uint64_t sub_1000E4A08(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;
  if ((a3 & 1) == 0) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> EnumValue.asString()()
{
  uint64_t v2 = v0;
  v3 = *(void **)(v0 + 40);
  if ((*(_BYTE *)(v2 + 56) & 1) != 0)
  {
    uint64_t v4 = *(void *)(v2 + 24);
    uint64_t v5 = *(void *)(v2 + 32);
    v6 = sub_100019AFC((void *)v2, v4);
    v7 = v3;
    v3 = v6;
    uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 32))(v7, v4, v5);
    if (!v1)
    {
      v3 = (void *)v8;
      uint64_t v4 = v9;
    }
  }

  else
  {
    uint64_t v4 = *(void *)(v2 + 48);
    sub_1000145E8();
  }

  uint64_t v10 = (uint64_t)v3;
  v11 = (void *)v4;
  result._object = v11;
  result._countAndFlagsBits = v10;
  return result;
}

uint64_t static EnumValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  sub_100019AFC((void *)a1, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 8) + 8LL))(v4);
  uint64_t v8 = v7;
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  sub_100019AFC((void *)a2, v10);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)(v9 + 8) + 8LL))(v10);
  if (v6 == v11 && v8 == v12)
  {
    swift_bridgeObjectRelease_n(v8, 2LL);
  }

  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v11, v12, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0LL;
    if ((v14 & 1) == 0) {
      return result;
    }
  }

  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a2 + 40);
  uint64_t v18 = *(void *)(a2 + 48);
  char v19 = *(_BYTE *)(a2 + 56);
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 1) != 0)
    {
      return (_DWORD)v16 == (_DWORD)v17;
    }

    else
    {
      uint64_t v25 = *(void *)(a2 + 24);
      uint64_t v26 = *(void *)(a2 + 32);
      sub_100019AFC((void *)a2, v25);
      v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 24);
      swift_bridgeObjectRetain(v18);
      int v28 = v27(v17, v18, v25, v26);
      sub_1000E4A08(v17, v18, 0);
      return v28 == (_DWORD)v16;
    }
  }

  uint64_t v21 = *(void *)(a1 + 48);
  if ((v19 & 1) != 0)
  {
    uint64_t v22 = *(void *)(a1 + 24);
    uint64_t v23 = *(void *)(a1 + 32);
    sub_100019AFC((void *)a1, v22);
    v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 24);
    sub_1000145E8();
    int v30 = v24(v16, v21, v22, v23);
    sub_1000E522C();
    return v30 == (_DWORD)v17;
  }

  if (v16 == v17 && v21 == v18) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)(a1 + 40), *(void *)(a1 + 48), v17, v18, 0LL);
  }
}

uint64_t EnumValue.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100019AFC(a1, v4);
  dispatch thunk of Encoder.singleValueContainer()(v15, v4, v5);
  uint64_t v6 = *(void *)(v1 + 40);
  if ((*(_BYTE *)(v3 + 56) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v3 + 48);
    sub_1000145E8();
    goto LABEL_5;
  }

  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t v8 = *(void *)(v3 + 32);
  sub_100019AFC((void *)v3, v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v6, v7, v8);
  if (!v2)
  {
    uint64_t v6 = v9;
    uint64_t v11 = v10;
LABEL_5:
    uint64_t v12 = v16;
    uint64_t v13 = v17;
    sub_1000AB9E8((uint64_t)v15, v16);
    dispatch thunk of SingleValueEncodingContainer.encode(_:)(v6, v11, v12, v13);
    swift_bridgeObjectRelease();
  }

  return sub_1000108B8(v15);
}

uint64_t sub_1000E4DA4(void *a1)
{
  return EnumValue.encode(to:)(a1);
}

uint64_t sub_1000E4DB8(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for EnumValue(uint64_t a1)
{
  return sub_1000E4A08(*(void *)(a1 + 40), *(void *)(a1 + 48), *(_BYTE *)(a1 + 56));
}

uint64_t initializeWithCopy for EnumValue(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(v2 + 40);
  uint64_t v6 = *(void *)(v2 + 48);
  LOBYTE(v2) = *(_BYTE *)(v2 + 56);
  sub_1000E4DB8(v5, v6, v2);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 56) = v2;
  return a1;
}

uint64_t assignWithCopy for EnumValue(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  sub_1000E4EB0((void *)a1, a2);
  uint64_t v4 = v2[5];
  uint64_t v5 = v2[6];
  LOBYTE(v2) = *((_BYTE *)v2 + 56);
  sub_1000E4DB8(v4, v5, (char)v2);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  char v8 = *(_BYTE *)(a1 + 56);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = (_BYTE)v2;
  sub_1000E4A08(v6, v7, v8);
  return a1;
}

void *sub_1000E4EB0(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        uint64_t result = (void *)swift_release(v11);
        void *v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          void *v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          void *v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

__n128 initializeWithTake for EnumValue(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for EnumValue(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  char v5 = *(_BYTE *)(a2 + 56);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  char v8 = *(_BYTE *)(a1 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = v5;
  sub_1000E4A08(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnumValue(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 57))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EnumValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 57) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for EnumValue()
{
  return &type metadata for EnumValue;
}

uint64_t destroy for EnumValue.Container(uint64_t a1)
{
  return sub_1000E4A08(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s11Schematizer9EnumValueV9ContainerOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_1000E4DB8(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for EnumValue.Container(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_1000E4DB8(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(_BYTE *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1000E4A08(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for EnumValue.Container(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1000E4A08(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for EnumValue.Container()
{
  return &type metadata for EnumValue.Container;
}

uint64_t sub_1000E522C()
{
  return sub_1000E4A08(v0, v1, 0);
}

uint64_t sub_1000E523C@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess(*a1 + 16, v6, 0LL, 0LL);
  __int128 v4 = *(_OWORD *)(v3 + 16);
  *a2 = v4;
  return swift_unknownObjectRetain(v4);
}

uint64_t sub_1000E5288(__int128 *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  swift_beginAccess(*a2 + 16, v7, 1LL, 0LL);
  uint64_t v4 = *(void *)(v3 + 16);
  __int128 v5 = *a1;
  *(_OWORD *)(v3 + 16) = *a1;
  swift_unknownObjectRetain(v5);
  return swift_unknownObjectRelease(v4);
}

uint64_t Schematizer.schemaStore.getter()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 16));
}

uint64_t Schematizer.__allocating_init()()
{
  uint64_t v1 = sub_100009ACC(v0, 32LL);
  uint64_t v2 = type metadata accessor for ProtoSchemaStore();
  sub_100009ACC(v2, 64LL);
  *(void *)(v1 + 16) = ProtoSchemaStore.init()();
  *(void *)(v1 + 24) = &protocol witness table for ProtoSchemaStore;
  return v1;
}

uint64_t Schematizer.init()()
{
  uint64_t v1 = type metadata accessor for ProtoSchemaStore();
  sub_100009ACC(v1, 64LL);
  *(void *)(v0 + 16) = ProtoSchemaStore.init()();
  *(void *)(v0 + 24) = &protocol witness table for ProtoSchemaStore;
  return v0;
}

void Schematizer.__allocating_init(withModel:)()
{
}

void Schematizer.init(withModel:)()
{
  uint64_t v2 = type metadata accessor for ProtoSchemaStore();
  swift_allocObject(v2, 64LL, 7LL);
  uint64_t v3 = ProtoSchemaStore.init(withModel:)();
  if (v1)
  {
    uint64_t v4 = type metadata accessor for Schematizer();
    swift_deallocPartialClassInstance(v0, v4, 32LL, 7LL);
  }

  else
  {
    *(void *)(v0 + 16) = v3;
    *(void *)(v0 + 24) = &protocol witness table for ProtoSchemaStore;
  }

  sub_1000E5738();
}

uint64_t Schematizer.__allocating_init(withSchemaStore:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100009ACC(v2, 32LL);
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t Schematizer.init(withSchemaStore:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

void (*Schematizer.interpret(payload:with:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4))(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t)
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  void v14[5];
  _BYTE v15[24];
  unint64_t v16;
  uint64_t v16 = a2;
  swift_beginAccess(v4 + 16, v15, 0LL, 0LL);
  uint64_t v9 = *(void *)(v4 + 16);
  uint64_t v10 = *(void *)(v4 + 24);
  uint64_t ObjectType = swift_getObjectType(v9);
  uint64_t v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 40);
  swift_unknownObjectRetain(v9);
  v12(v14, a3, a4, ObjectType, v10);
  swift_unknownObjectRelease();
  if (!v5)
  {
    type metadata accessor for ProtobufPayload();
    uint64_t v12 = (void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))static ProtobufPayload.create(with:payload:)( (uint64_t)v14,  a1,  v16);
    sub_1000108B8(v14);
  }

  return v12;
}

void Schematizer.enum(withName:)(uint64_t a1)
{
}

void Schematizer.messageSchema(withName:)(uint64_t a1)
{
}

uint64_t Schematizer.deinit()
{
  return v0;
}

uint64_t Schematizer.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for Schematizer()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer11Schematizer);
}

uint64_t sub_1000E56CC(uint64_t a1, ...)
{
  return swift_beginAccess(v1 + 16, va, 0LL, 0LL);
}

uint64_t sub_1000E56F0()
{
  return v4(v1, v0, v3, v2);
}

  ;
}

uint64_t sub_1000E572C()
{
  return swift_unknownObjectRelease(v0);
}

  ;
}

uint64_t sub_1000E5744()
{
  return swift_getObjectType(*(void *)(v0 + 16));
}

uint64_t sub_1000E5750(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000LL;
  if (v2 || (sub_100027D54(1701869940LL, 0xE400000000000000LL) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else
  {
    BOOL v6 = a1 == 0x656D614E65707974LL && a2 == 0xE800000000000000LL;
    if (v6 || (sub_100027D54(0x656D614E65707974LL, 0xE800000000000000LL) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1LL;
    }

    else
    {
      BOOL v7 = a1 == 6775156 && a2 == 0xE300000000000000LL;
      if (v7 || (sub_100027D54(6775156LL, 0xE300000000000000LL) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2LL;
      }

      else if (a1 == 0x7461657065527369LL && a2 == 0xEA00000000006465LL)
      {
        swift_bridgeObjectRelease();
        return 3LL;
      }

      else
      {
        char v9 = sub_100027D54(0x7461657065527369LL, 0xEA00000000006465LL);
        swift_bridgeObjectRelease();
        if ((v9 & 1) != 0) {
          return 3LL;
        }
        else {
          return 4LL;
        }
      }
    }
  }

uint64_t sub_1000E58B8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000E58E4 + 4 * byte_1001644D4[a1]))( 1701869940LL,  0xE400000000000000LL);
}

uint64_t sub_1000E58E4()
{
  return 0x656D614E65707974LL;
}

uint64_t sub_1000E58FC()
{
  return 6775156LL;
}

uint64_t sub_1000E590C()
{
  return 0x7461657065527369LL;
}

uint64_t sub_1000E5928()
{
  return sub_1000E58B8(*v0);
}

uint64_t sub_1000E5930@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000E5750(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000E5954(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1000E5960(uint64_t a1)
{
  unint64_t v2 = sub_1000E5BCC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E5988(uint64_t a1)
{
  unint64_t v2 = sub_1000E5BCC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PropertyModel.type.getter()
{
  return *v0;
}

uint64_t PropertyModel.typeName.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain(*(void *)(v0 + 16));
  return v1;
}

uint64_t ByteBufferView.startIndex.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t PropertyModel.isRepeated.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

void __swiftcall PropertyModel.init(type:typeName:tag:isRepeated:)( Schematizer::PropertyModel *__return_ptr retstr, Schematizer::TypeModel type, Swift::String_optional typeName, Swift::Int tag, Swift::Bool isRepeated)
{
  retstr->type = type;
  retstr->typeName = typeName;
  retstr->tag = tag;
  retstr->isRepeated = isRepeated;
}

uint64_t PropertyModel.init(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v5 = sub_10000941C(&qword_1001D8148);
  __chkstk_darwin(v5);
  sub_1000E673C();
  unint64_t v6 = sub_1000E5BCC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for PropertyModel.CodingKeys,  &type metadata for PropertyModel.CodingKeys,  v6,  v2,  v3);
  if (v1) {
    return sub_1000E3700();
  }
  v20[0] = 0;
  sub_1000E5C08();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for TypeModel, v20, v5, &type metadata for TypeModel);
  char v7 = v20[1];
  sub_1000E675C();
  uint64_t v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v8, v9);
  uint64_t v12 = v11;
  uint64_t v18 = v10;
  char v19 = v7;
  swift_bridgeObjectRetain(v11);
  sub_1000E675C();
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)(v13, v14);
  sub_1000E675C();
  char v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  sub_1000E66FC();
  sub_1000E3700();
  uint64_t result = sub_100010C70();
  *(_BYTE *)a1 = v19;
  *(void *)(a1 + 8) = v18;
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v15;
  *(_BYTE *)(a1 + 32) = v16 & 1;
  return result;
}

unint64_t sub_1000E5BCC()
{
  unint64_t result = qword_1001D8150;
  if (!qword_1001D8150)
  {
    unint64_t result = swift_getWitnessTable(&unk_100164648, &type metadata for PropertyModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D8150);
  }

  return result;
}

unint64_t sub_1000E5C08()
{
  unint64_t result = qword_1001D8158;
  if (!qword_1001D8158)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for TypeModel, &type metadata for TypeModel);
    atomic_store(result, (unint64_t *)&qword_1001D8158);
  }

  return result;
}

uint64_t PropertyModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000941C(&qword_1001D8160);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019AFC(a1, v9);
  unint64_t v11 = sub_1000E5BCC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for PropertyModel.CodingKeys,  &type metadata for PropertyModel.CodingKeys,  v11,  v9,  v10);
  v25[2] = *(_BYTE *)v3;
  v25[1] = 0;
  sub_1000E5DB4();
  sub_1000E674C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v12, v13, v14);
  if (!v2)
  {
    uint64_t v15 = *(void *)(v3 + 8);
    uint64_t v16 = *(void *)(v3 + 16);
    v25[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, v25, v5);
    v24[12] = 2;
    sub_1000E674C();
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, v19);
    if (*(_BYTE *)(v3 + 32) == 1)
    {
      v24[11] = 3;
      sub_1000E674C();
      KeyedEncodingContainer.encode(_:forKey:)(v20, v21, v22);
    }
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000E5DB4()
{
  unint64_t result = qword_1001D8168;
  if (!qword_1001D8168)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for TypeModel, &type metadata for TypeModel);
    atomic_store(result, (unint64_t *)&qword_1001D8168);
  }

  return result;
}

void static PropertyModel.__derived_struct_equals(_:_:)(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_1000E5E3C()
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000E5F10 + 4 * byte_1001644E3[*v0]))(0x3436746E69LL);
}

uint64_t sub_1000E5F10(uint64_t a1)
{
  if (a1 == 0x3436746E69LL && v3 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease_n(v3, 2LL);
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, 0x3436746E69LL, 0xE500000000000000LL, 0LL);
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(0xE500000000000000LL);
    char v6 = 0;
    if ((v5 & 1) == 0) {
      return v6 & 1;
    }
  }

  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v8 = *(void *)(v1 + 16);
  if (!v7)
  {
    if (v8) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }

  if (!v8) {
    goto LABEL_19;
  }
  uint64_t v9 = *(void *)(v2 + 8);
  uint64_t v10 = *(void *)(v1 + 8);
  BOOL v11 = v9 == v10 && v7 == v8;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v7, v10, v8, 0LL), char v6 = 0, (v12 & 1) != 0))
  {
LABEL_17:
    if (*(void *)(v2 + 24) == *(void *)(v1 + 24))
    {
      char v6 = ((*(_BYTE *)(v2 + 32) & 1) == 0) ^ *(_BYTE *)(v1 + 32);
      return v6 & 1;
    }

double sub_1000E608C@<D0>(uint64_t a1@<X8>)
{
  if (!v1)
  {
    double result = *(double *)v5;
    __int128 v4 = v5[1];
    *(_OWORD *)a1 = v5[0];
    *(_OWORD *)(a1 + 16) = v4;
    *(_BYTE *)(a1 + 32) = v6;
  }

  return result;
}

uint64_t sub_1000E60D0(void *a1)
{
  return PropertyModel.encode(to:)(a1);
}

uint64_t PropertyModel.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100019AFC(a1, v7);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 40))(v30, v7, v8);
  if (v2) {
    return sub_1000E3700();
  }
  sub_1000E6350((uint64_t)v30, (uint64_t)&v25);
  if (v29)
  {
    if (v29 == 1)
    {
      sub_100019BC4(&v25, (uint64_t)v23);
      uint64_t v7 = v24;
      sub_100019AFC(v23, v24);
      uint64_t v9 = sub_1000E6718();
      sub_1000E672C(v9);
      char v10 = 10;
    }

    else if (v27 | v28 | (unint64_t)v25 | v26 | *((void *)&v25 + 1))
    {
      uint64_t v12 = v27 | v28 | v26 | *((void *)&v25 + 1);
      if ((void)v25 != 1LL || v12)
      {
        if ((void)v25 != 2LL || v12)
        {
          if ((void)v25 != 3LL || v12)
          {
            if ((void)v25 != 4LL || v12)
            {
              if ((void)v25 != 5LL || v12)
              {
                if ((void)v25 != 6LL || v12)
                {
                  sub_1000E670C();
                  if (v14) {
                    BOOL v15 = 0;
                  }
                  else {
                    BOOL v15 = v13 == 7;
                  }
                  if (v15) {
                    char v10 = 9;
                  }
                  else {
                    char v10 = 8;
                  }
                }

                else
                {
                  sub_1000E670C();
                  char v10 = 6;
                }
              }

              else
              {
                sub_1000E670C();
                char v10 = 5;
              }
            }

            else
            {
              sub_1000E670C();
              char v10 = 4;
            }
          }

          else
          {
            sub_1000E670C();
            char v10 = 3;
          }
        }

        else
        {
          sub_1000E670C();
          char v10 = 1;
        }
      }

      else
      {
        sub_1000E670C();
        char v10 = 2;
      }
    }

    else
    {
      char v10 = 0;
      sub_1000E670C();
    }
  }

  else
  {
    sub_100019BC4(&v25, (uint64_t)v23);
    uint64_t v7 = v24;
    sub_100019AFC(v23, v24);
    uint64_t v11 = sub_1000E6718();
    sub_1000E672C(v11);
    char v10 = 7;
  }

  sub_1000E673C();
  uint64_t v16 = (*(uint64_t (**)(void, uint64_t))(v3 + 32))(0LL, v3);
  uint64_t v31 = v7;
  uint64_t v17 = v4;
  uint64_t v18 = a1[3];
  uint64_t v19 = a1[4];
  sub_100019AFC(a1, v18);
  char v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(v18, v19);
  sub_1000E638C(v30);
  uint64_t result = sub_1000E3700();
  *(_BYTE *)a2 = v10;
  uint64_t v22 = v31;
  *(void *)(a2 + 8) = v17;
  *(void *)(a2 + 16) = v22;
  *(void *)(a2 + 24) = v16;
  *(_BYTE *)(a2 + 32) = v20 & 1;
  return result;
}

uint64_t sub_1000E6350(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_1000E638C(void *a1)
{
  return a1;
}

uint64_t initializeWithCopy for PropertyModel(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for PropertyModel(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for PropertyModel(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for PropertyModel(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 33))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 16);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PropertyModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 33) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PropertyModel()
{
  return &type metadata for PropertyModel;
}

uint64_t storeEnumTagSinglePayload for PropertyModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000E65BC + 4 * byte_1001644F3[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000E65F0 + 4 * byte_1001644EE[v4]))();
}

uint64_t sub_1000E65F0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E65F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000E6600LL);
  }
  return result;
}

uint64_t sub_1000E660C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000E6614LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000E6618(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E6620(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PropertyModel.CodingKeys()
{
  return &type metadata for PropertyModel.CodingKeys;
}

unint64_t sub_1000E6640()
{
  unint64_t result = qword_1001D8170;
  if (!qword_1001D8170)
  {
    unint64_t result = swift_getWitnessTable(&unk_100164620, &type metadata for PropertyModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D8170);
  }

  return result;
}

unint64_t sub_1000E6680()
{
  unint64_t result = qword_1001D8178;
  if (!qword_1001D8178)
  {
    unint64_t result = swift_getWitnessTable(&unk_100164590, &type metadata for PropertyModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D8178);
  }

  return result;
}

unint64_t sub_1000E66C0()
{
  unint64_t result = qword_1001D8180;
  if (!qword_1001D8180)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001645B8, &type metadata for PropertyModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D8180);
  }

  return result;
}

uint64_t sub_1000E66FC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

  ;
}

uint64_t sub_1000E6718()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(v0 + 8) + 8LL))(v1);
}

uint64_t sub_1000E672C(uint64_t a1, ...)
{
  return sub_1000108B8((uint64_t *)va);
}

void *sub_1000E673C()
{
  return sub_100019AFC(v0, v0[3]);
}

  ;
}

  ;
}

void sub_1000E676C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v20 = _swiftEmptyArrayStorage;
  sub_1000D1AEC(v19);
  uint64_t v6 = v19[0];
  uint64_t v7 = v19[1];
  int64_t v8 = v19[3];
  unint64_t v9 = v19[4];
  int64_t v10 = (unint64_t)(v19[2] + 64LL) >> 6;
  swift_bridgeObjectRetain_n(a3, 2LL);
  swift_retain(v3);
  if (!v9) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v12 = v11 | (v8 << 6);
  while (1)
  {
    sub_1001089B8(*(_DWORD *)(*(void *)(v6 + 56) + 4 * v12));
    if (v9) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      break;
    }
    if (v13 >= v10) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v7 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v10) {
        goto LABEL_23;
      }
      unint64_t v14 = *(void *)(v7 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v10) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v7 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v10) {
            goto LABEL_23;
          }
          unint64_t v14 = *(void *)(v7 + 8 * v15);
          if (!v14)
          {
            int64_t v15 = v8 + 5;
            if (v8 + 5 >= v10) {
              goto LABEL_23;
            }
            unint64_t v14 = *(void *)(v7 + 8 * v15);
            if (!v14)
            {
              int64_t v15 = v8 + 6;
              if (v8 + 6 >= v10) {
                goto LABEL_23;
              }
              unint64_t v14 = *(void *)(v7 + 8 * v15);
              if (!v14)
              {
                int64_t v16 = v8 + 7;
                while (v16 < v10)
                {
                  unint64_t v14 = *(void *)(v7 + 8 * v16++);
                  if (v14)
                  {
                    int64_t v15 = v16 - 1;
                    goto LABEL_20;
                  }
                }

uint64_t *sub_1000E6914(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(v2 + 32);
  if (!*(void *)(v6 + 16)) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain(a2);
  unint64_t v7 = sub_10000EC64(a1, (uint64_t)a2);
  if ((v8 & 1) == 0)
  {
    sub_10001450C();
LABEL_5:
    unint64_t v10 = sub_1000E43B4();
    sub_100010EA0((uint64_t)&type metadata for SchemaError, v10);
    uint64_t v12 = v11;
    _StringGuts.grow(_:)(18LL);
    swift_bridgeObjectRelease();
    sub_1000E6D64();
    uint64_t v22 = v13;
    uint64_t v23 = v14;
    uint64_t v15 = *(void *)(v3 + 16);
    int64_t v16 = *(void **)(v3 + 24);
    swift_bridgeObjectRetain(v16);
    v17._countAndFlagsBits = v15;
    v17._object = v16;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    sub_1000E6D58();
    v18._countAndFlagsBits = a1;
    v18._object = a2;
    String.append(_:)(v18);
    unint64_t v9 = &v22;
    sub_1000E6D44();
    uint64_t v19 = v23;
    *(void *)uint64_t v12 = v22;
    *(void *)(v12 + 8) = v19;
    *(_BYTE *)(v12 + 41) = 5;
    swift_willThrow(v20);
    return v9;
  }

  unint64_t v9 = (uint64_t *)*(unsigned int *)(*(void *)(v6 + 56) + 4 * v7);
  sub_10001450C();
  return v9;
}

void *sub_1000E6A30(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v1 + 32);
  unint64_t result = sub_1000D1AEC(&v29);
  int64_t v6 = v32;
  unint64_t v7 = v33;
  int64_t v8 = (unint64_t)(v31 + 64) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v6 << 6);
      goto LABEL_22;
    }

    int64_t v11 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      break;
    }
    if (v11 >= v8) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v30 + 8 * v11);
    int64_t v13 = v6 + 1;
    if (!v12)
    {
      int64_t v13 = v6 + 2;
      if (v6 + 2 >= v8) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v30 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v6 + 3;
        if (v6 + 3 >= v8) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v30 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v6 + 4;
          if (v6 + 4 >= v8) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v30 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = v6 + 5;
            if (v6 + 5 >= v8) {
              goto LABEL_24;
            }
            unint64_t v12 = *(void *)(v30 + 8 * v13);
            if (!v12)
            {
              int64_t v13 = v6 + 6;
              if (v6 + 6 >= v8) {
                goto LABEL_24;
              }
              unint64_t v12 = *(void *)(v30 + 8 * v13);
              if (!v12)
              {
                int64_t v14 = v6 + 7;
                while (v14 < v8)
                {
                  unint64_t v12 = *(void *)(v30 + 8 * v14++);
                  if (v12)
                  {
                    int64_t v13 = v14 - 1;
                    goto LABEL_21;
                  }
                }

uint64_t sub_1000E6C70()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 40));
}

void *sub_1000E6C8C()
{
  return v0;
}

uint64_t sub_1000E6CB8()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t type metadata accessor for ProtoEnum()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer9ProtoEnum);
}

uint64_t sub_1000E6CF8()
{
  return swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 40LL));
}

uint64_t *sub_1000E6D04(uint64_t a1, void *a2)
{
  return sub_1000E6914(a1, a2);
}

void *sub_1000E6D24(int a1)
{
  return sub_1000E6A30(a1);
}

void sub_1000E6D44()
{
  v0._countAndFlagsBits = 0x65756C617620LL;
  v0._object = (void *)0xE600000000000000LL;
  String.append(_:)(v0);
}

void sub_1000E6D58()
{
  v0._countAndFlagsBits = 8236LL;
  v0._object = (void *)0xE200000000000000LL;
  String.append(_:)(v0);
}

  ;
}

uint64_t sub_1000E6D78()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C180(v0, qword_1001EDEC0);
  sub_1000093D0(v0, (uint64_t)qword_1001EDEC0);
  return Logger.init(subsystem:category:)( 0xD000000000000015LL,  0x8000000100172720LL,  0x746C7561666564LL,  0xE700000000000000LL);
}

uint64_t sub_1000E6DEC(uint64_t a1)
{
  return swift_weakAssign(v1 + 16, a1);
}

uint64_t sub_1000E6DF8()
{
  if (swift_weakLoadStrong(v0 + 16))
  {
    SQLiteBaseSchematizer.getSQLiteBridge()();
    uint64_t v0 = v1;
    swift_release();
  }

  else
  {
    unint64_t v2 = sub_1000E863C();
    uint64_t v3 = swift_allocError(&type metadata for SQLiteSchematizerError, v2, 0LL, 0LL);
    *uint64_t v4 = 0;
    swift_willThrow(v3);
  }

  return v0;
}

double sub_1000E6E8C()
{
  uint64_t Strong = swift_weakLoadStrong(v0 + 16);
  if (Strong)
  {
    uint64_t v3 = Strong;
    swift_beginAccess(Strong + 32, v8, 0LL, 0LL);
    double v1 = *(double *)(v3 + 32);
    swift_release();
  }

  else
  {
    unint64_t v4 = sub_1000E863C();
    uint64_t v5 = swift_allocError(&type metadata for SQLiteSchematizerError, v4, 0LL, 0LL);
    _BYTE *v6 = 0;
    swift_willThrow(v5);
  }

  return v1;
}

uint64_t sub_1000E6F24()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t sub_1000E6F4C()
{
  return sub_1000E6DF8();
}

double sub_1000E6F60()
{
  return sub_1000E6E8C();
}

uint64_t ProtoSchemaStore.allSchemaNames.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 24));
}

double SQLiteBaseSchematizer.queryTimeFrameGuideline.getter()
{
  return *(double *)(v0 + 32);
}

uint64_t SQLiteBaseSchematizer.queryTimeFrameGuideline.setter(double a1, double a2)
{
  uint64_t result = sub_100010BE4(v2 + 32, (uint64_t)v6, 1LL);
  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
  return result;
}

void SQLiteBaseSchematizer.queryTimeFrameGuideline.modify(uint64_t a1)
{
}

uint64_t sub_1000E7018()
{
  uint64_t v0 = sub_10000941C(&qword_1001D84D8);
  uint64_t inited = swift_initStackObject(v0, &v4);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1001646E0;
  *(void *)(inited + 32) = 0x6D756E655F70LL;
  *(void *)(inited + 40) = 0xE600000000000000LL;
  *(void *)(inited + 48) = type metadata accessor for PEnumFunction();
  *(void *)(inited + 56) = &protocol witness table for SQLiteSchematizerFunction;
  *(void *)(inited + 64) = 0x6A626F5F70LL;
  *(void *)(inited + 72) = 0xE500000000000000LL;
  *(void *)(inited + 80) = type metadata accessor for PObjFunction();
  *(void *)(inited + 88) = &protocol witness table for SQLiteSchematizerFunction;
  *(void *)(inited + 96) = 0x7465675F70LL;
  *(void *)(inited + 104) = 0xE500000000000000LL;
  *(void *)(inited + 112) = type metadata accessor for PGetFunction();
  *(void *)(inited + 120) = &protocol witness table for SQLiteSchematizerFunction;
  *(void *)(inited + 128) = 0x6E616D7465675F70LL;
  *(void *)(inited + 136) = 0xE900000000000079LL;
  *(void *)(inited + 144) = sub_10000941C(&qword_1001D84E0);
  *(void *)(inited + 152) = &protocol witness table for SQLiteSchematizerTableFunction<A>;
  *(void *)(inited + 160) = 0x666F656E6F5F70LL;
  *(void *)(inited + 168) = 0xE700000000000000LL;
  *(void *)(inited + 176) = type metadata accessor for POneOfFunction();
  *(void *)(inited + 184) = &protocol witness table for SQLiteSchematizerFunction;
  *(void *)(inited + 192) = 0x6E6F736A5F70LL;
  *(void *)(inited + 200) = 0xE600000000000000LL;
  *(void *)(inited + 208) = type metadata accessor for PJSONFunction();
  *(void *)(inited + 2swift_weakDestroy(v0 + 16) = &protocol witness table for SQLiteSchematizerFunction;
  *(void *)(inited + 224) = 0x616F6C7961705F70LL;
  *(void *)(inited + 232) = 0xE900000000000064LL;
  *(void *)(inited + 240) = type metadata accessor for PPayloadFunction();
  *(void *)(inited + 248) = &protocol witness table for SQLiteSchematizerFunction;
  strcpy((char *)(inited + 256), "p_message_name");
  *(_BYTE *)(inited + 271) = -18;
  *(void *)(inited + 272) = type metadata accessor for PMessageNameFunction();
  *(void *)(inited + 280) = &protocol witness table for SQLiteSchematizerFunction;
  *(void *)(inited + 288) = 0x7465675F6270LL;
  *(void *)(inited + 296) = 0xE600000000000000LL;
  *(void *)(inited + 304) = type metadata accessor for PBGetFunction();
  *(void *)(inited + 312) = &protocol witness table for SQLiteSchematizerFunction;
  *(void *)(inited + 320) = 0x74737269665F6270LL;
  *(void *)(inited + 328) = 0xEA0000000000666FLL;
  *(void *)(inited + 336) = type metadata accessor for PBFirstOfFunction();
  *(void *)(inited + 344) = &protocol witness table for SQLiteSchematizerFunction;
  *(void *)(inited + 352) = 0x65646F6365645F70LL;
  *(void *)(inited + 360) = 0xEF3436657361625FLL;
  *(void *)(inited + 368) = type metadata accessor for PBase64DecodeFunction();
  *(void *)(inited + 376) = &protocol witness table for SQLiteSchematizerFunction;
  *(void *)(inited + 384) = 0xD000000000000017LL;
  *(void *)(inited + 392) = 0x8000000100172810LL;
  *(void *)(inited + 400) = type metadata accessor for PSetTimeWindowFunction();
  *(void *)(inited + 408) = &protocol witness table for SQLiteSchematizerFunction;
  *(void *)(inited + 4swift_weakDestroy(v0 + 16) = 0xD000000000000019LL;
  *(void *)(inited + 424) = 0x8000000100172830LL;
  *(void *)(inited + 432) = type metadata accessor for PGetTimeWindowStartFunction();
  *(void *)(inited + 440) = &protocol witness table for SQLiteSchematizerFunction;
  *(void *)(inited + 448) = 0xD000000000000017LL;
  *(void *)(inited + 456) = 0x8000000100172850LL;
  *(void *)(inited + 464) = type metadata accessor for PGetTimeWindowEndFunction();
  *(void *)(inited + 472) = &protocol witness table for SQLiteSchematizerFunction;
  uint64_t v2 = sub_10000941C(&qword_1001D84E8);
  uint64_t result = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  v2,  &protocol witness table for String);
  qword_1001EDED8 = result;
  return result;
}

uint64_t SQLiteBaseSchematizer.functions.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 64));
}

uint64_t SQLiteBaseSchematizer.functions.setter(uint64_t a1)
{
  *(void *)(v1 + 64) = a1;
  return swift_bridgeObjectRelease();
}

void SQLiteBaseSchematizer.functions.modify(uint64_t a1)
{
}

void SQLiteBaseSchematizer.__allocating_init(schemaStore:viewProviders:)()
{
  uint64_t v1 = sub_1000E8854();
  SQLiteBaseSchematizer.init(schemaStore:viewProviders:)(v1, v2, v3);
  sub_1000E887C();
}

void SQLiteBaseSchematizer.init(schemaStore:viewProviders:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = a1;
  uint64_t v31 = a3;
  uint64_t v29 = a2;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  int64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = sub_1000E884C();
  uint64_t v12 = sub_100009ACC(v11, 32LL);
  uint64_t v13 = type metadata accessor for ProtoSchemaStore();
  sub_100009ACC(v13, 64LL);
  int64_t v14 = sub_1000E8894();
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = v14;
  *(void *)(v12 + 24) = &protocol witness table for ProtoSchemaStore;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v12;
  uint64_t v15 = static Date.distantPast.getter(v14);
  double v16 = Date.timeIntervalSince1970.getter(v15);
  Swift::String v17 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  uint64_t v18 = v17(v10, v4);
  uint64_t v19 = static Date.distantFuture.getter(v18);
  double v20 = Date.timeIntervalSince1970.getter(v19);
  v17(v8, v4);
  if (v16 > v20)
  {
    __break(1u);
  }

  else
  {
    *(double *)(v3 + 32) = v16;
    *(double *)(v3 + 40) = v20;
    *(void *)(v3 + 48) = 0LL;
    *(void *)(v3 + 56) = 0LL;
    uint64_t v21 = sub_10000941C(&qword_1001D7EB0);
    *(void *)(v3 + 64) = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v21,  &protocol witness table for String);
    uint64_t v22 = v30;
    if (v30)
    {
      uint64_t v23 = sub_100009ACC(v11, 32LL);
      uint64_t v24 = v29;
      *(void *)(v23 + swift_weakDestroy(v0 + 16) = v22;
      *(void *)(v23 + 24) = v24;
      *(void *)(v3 + swift_weakDestroy(v0 + 16) = v23;
      swift_unknownObjectRetain(v22);
    }

    else
    {
      uint64_t v25 = sub_100009ACC(v11, 32LL);
      sub_100009ACC(v13, 64LL);
      *(void *)(v25 + swift_weakDestroy(v0 + 16) = sub_1000E8894();
      *(void *)(v25 + 24) = &protocol witness table for ProtoSchemaStore;
      *(void *)(v3 + swift_weakDestroy(v0 + 16) = v25;
    }

    swift_release();
    *(void *)(v3 + 24) = v31;
    sub_1000E8814();
    uint64_t v26 = v32;
    v27();
    if (v26) {
      swift_release();
    }
    swift_unknownObjectRelease();
    sub_1000E87F8();
  }

void SQLiteBaseSchematizer.__allocating_init(schemaStoreModel:viewProviders:)()
{
  uint64_t v1 = sub_1000E8854();
  SQLiteBaseSchematizer.init(schemaStoreModel:viewProviders:)(v1, v2, v3);
  sub_1000E887C();
}

void SQLiteBaseSchematizer.init(schemaStoreModel:viewProviders:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v28 = a3;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  int64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)v27 - v9;
  uint64_t v11 = sub_1000E884C();
  uint64_t v12 = sub_100009ACC(v11, 32LL);
  uint64_t v13 = type metadata accessor for ProtoSchemaStore();
  sub_100009ACC(v13, 64LL);
  int64_t v14 = sub_1000E8894();
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = v14;
  *(void *)(v12 + 24) = &protocol witness table for ProtoSchemaStore;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v12;
  uint64_t v15 = static Date.distantPast.getter(v14);
  double v16 = Date.timeIntervalSince1970.getter(v15);
  Swift::String v17 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  uint64_t v18 = v17(v10, v4);
  uint64_t v19 = static Date.distantFuture.getter(v18);
  double v20 = Date.timeIntervalSince1970.getter(v19);
  v17(v8, v4);
  if (v16 > v20)
  {
    __break(1u);
  }

  else
  {
    *(double *)(v3 + 32) = v16;
    *(double *)(v3 + 40) = v20;
    *(void *)(v3 + 48) = 0LL;
    *(void *)(v3 + 56) = 0LL;
    uint64_t v21 = sub_10000941C(&qword_1001D7EB0);
    *(void *)(v3 + 64) = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v21,  &protocol witness table for String);
    sub_100009ACC(v11, 32LL);
    uint64_t v22 = v27[1];
    Schematizer.init(withModel:)();
    if (v22)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v24 = type metadata accessor for SQLiteBaseSchematizer();
      swift_deallocPartialClassInstance(v3, v24, 72LL, 7LL);
    }

    else
    {
      sub_1000E8824(v23);
      *(void *)(v3 + 24) = v28;
      sub_1000E8814();
      v26(v25);
    }

    sub_1000E87F8();
  }

Swift::Void __swiftcall SQLiteBaseSchematizer.ensureFunctions()()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 64;
  sub_100010BE4(v0 + 64, (uint64_t)v27, 0LL);
  if (!*(void *)(*(void *)(v0 + 64) + 16LL))
  {
    if (qword_1001D7E50 == -1) {
      goto LABEL_3;
    }
LABEL_27:
    swift_once(&qword_1001D7E50, sub_1000E7018);
LABEL_3:
    uint64_t v3 = qword_1001EDED8;
    uint64_t v23 = qword_1001EDED8 + 64;
    uint64_t v4 = 1LL << *(_BYTE *)(qword_1001EDED8 + 32);
    uint64_t v5 = -1LL;
    if (v4 < 64) {
      uint64_t v5 = ~(-1LL << v4);
    }
    unint64_t v6 = v5 & *(void *)(qword_1001EDED8 + 64);
    int64_t v24 = (unint64_t)(v4 + 63) >> 6;
    swift_bridgeObjectRetain(qword_1001EDED8);
    int64_t v7 = 0LL;
    if (v6)
    {
LABEL_6:
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_21;
    }

    while (1)
    {
      int64_t v10 = v7 + 1;
      if (__OFADD__(v7, 1LL))
      {
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }

      if (v10 >= v24) {
        goto LABEL_23;
      }
      unint64_t v11 = *(void *)(v23 + 8 * v10);
      ++v7;
      if (!v11)
      {
        int64_t v7 = v10 + 1;
        if (v10 + 1 >= v24) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v23 + 8 * v7);
        if (!v11)
        {
          int64_t v7 = v10 + 2;
          if (v10 + 2 >= v24) {
            goto LABEL_23;
          }
          unint64_t v11 = *(void *)(v23 + 8 * v7);
          if (!v11)
          {
            int64_t v12 = v10 + 3;
            if (v12 >= v24)
            {
LABEL_23:
              swift_release();
              return;
            }

            unint64_t v11 = *(void *)(v23 + 8 * v12);
            if (!v11)
            {
              while (1)
              {
                int64_t v7 = v12 + 1;
                if (__OFADD__(v12, 1LL)) {
                  goto LABEL_26;
                }
                if (v7 >= v24) {
                  goto LABEL_23;
                }
                unint64_t v11 = *(void *)(v23 + 8 * v7);
                ++v12;
                if (v11) {
                  goto LABEL_20;
                }
              }
            }

            int64_t v7 = v12;
          }
        }
      }

void *SQLiteBaseSchematizer.deinit()
{
  return v0;
}

uint64_t SQLiteBaseSchematizer.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

Swift::Void __swiftcall SQLiteBaseSchematizer.teardown()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Schematizer();
  uint64_t v3 = sub_100009ACC(v2, 32LL);
  uint64_t v4 = type metadata accessor for ProtoSchemaStore();
  sub_100009ACC(v4, 64LL);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = ProtoSchemaStore.init()();
  *(void *)(v3 + 24) = &protocol witness table for ProtoSchemaStore;
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v3;
  swift_release();
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain(*(void *)(v0 + 24));
    int64_t v7 = (uint64_t *)(v5 + 40);
    do
    {
      uint64_t v8 = *(v7 - 1);
      uint64_t v9 = *v7;
      uint64_t ObjectType = swift_getObjectType(v8);
      unint64_t v11 = *(void (**)(uint64_t, uint64_t))(v9 + 40);
      swift_unknownObjectRetain(v8);
      v11(ObjectType, v9);
      swift_unknownObjectRelease();
      v7 += 2;
      --v6;
    }

    while (v6);
    swift_bridgeObjectRelease();
  }

  sub_100010BE4(v1 + 64, (uint64_t)v12, 33LL);
  sub_10000941C(&qword_1001D8258);
  Dictionary._Variant.removeAll(keepingCapacity:)(0);
  swift_endAccess(v12);
}

void static SQLiteBaseSchematizer.createEnvironment()()
{
  uint64_t v0 = type metadata accessor for SQLiteBaseSchematizer.Environment();
  uint64_t v1 = sub_100009ACC(v0, 24LL);
  swift_weakInit(v1 + 16, 0LL);
  sub_100009A90();
}

uint64_t SQLiteBaseSchematizer.getSchemaStore()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_100010BE4(v1 + 16, (uint64_t)v3, 0LL);
  return swift_unknownObjectRetain(*(void *)(v1 + 16));
}

void SQLiteBaseSchematizer.getSQLiteBridge()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 48);
  if (!v2)
  {
    uint64_t v3 = SQLiteBaseSchematizer.getSchemaStore()();
    uint64_t v5 = v4;
    uint64_t v6 = type metadata accessor for SQLiteMessageInBlobBridge();
    sub_100009ACC(v6, 48LL);
    int64_t v7 = sub_1000FB67C(v3, v5);
    *(void *)(v1 + 48) = v7;
    *(void *)(v1 + 56) = &off_1001BA3B8;
    swift_retain(v7);
    swift_unknownObjectRelease();
    uint64_t v2 = 0LL;
  }

  swift_unknownObjectRetain(v2);
  sub_1000E5738();
}

Schematizer::SchemaStoreModel __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteBaseSchematizer.getSchemaStoreModel()()
{
  uint64_t v0 = SQLiteBaseSchematizer.getSchemaStore()();
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType(v0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 56))(ObjectType, v2);
  swift_unknownObjectRelease();
  sub_1000E5738();
  result.enums._rawValue = v5;
  result.schemas._rawValue = v4;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteBaseSchematizer.reloadViewProviders()()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = SQLiteBaseSchematizer.getSchemaStore()();
  Array<A>.reloadAll(with:)(v2, v3, v1);
  sub_10001449C();
  sub_1000E5738();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteBaseSchematizer.reconfigure(withSchemaStoreModel:)( Schematizer::SchemaStoreModel withSchemaStoreModel)
{
  uint64_t v3 = v1;
  rawValue = withSchemaStoreModel.enums._rawValue;
  uint64_t v5 = withSchemaStoreModel.schemas._rawValue;
  uint64_t v6 = sub_1000E884C();
  sub_100009ACC(v6, 32LL);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(rawValue);
  Schematizer.init(withModel:)();
  if (!v2)
  {
    sub_1000E8824(v7);
    *(void *)(v3 + 48) = 0LL;
    *(void *)(v3 + 56) = 0LL;
    swift_unknownObjectRelease();
    sub_1000E8814();
    v8();
  }

  sub_1000E5738();
}

uint64_t SQLiteBaseSchematizer.reconfigure(withSchemaStore:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_1000E884C();
  uint64_t v6 = sub_100009ACC(v5, 32LL);
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  v2[2] = v6;
  swift_unknownObjectRetain(a1);
  swift_release();
  v2[6] = 0LL;
  v2[7] = 0LL;
  uint64_t v7 = swift_unknownObjectRelease();
  return (*(uint64_t (**)(uint64_t))(*v2 + 272LL))(v7);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteBaseSchematizer.configureEventViews(for:withSchemaUpdate:)( Swift::OpaquePointer a1, Swift::Bool withSchemaUpdate)
{
  uint64_t v4 = v3;
  rawValue = a1._rawValue;
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    LODWORD(v7) = withSchemaUpdate;
    __n128 v8 = swift_bridgeObjectRetain(v5);
    uint64_t v48 = v9;
    int64_t v10 = (uint64_t *)(v9 + 40);
    v8.n128_u64[0] = 136315138LL;
    __n128 v50 = v8;
    v49 = (char *)&type metadata for Any + 8;
    v8.n128_u64[0] = 136315394LL;
    __n128 v51 = v8;
    HIDWORD(v53) = v7;
    while (1)
    {
      uint64_t v11 = *(v10 - 1);
      uint64_t v12 = *v10;
      if ((v7 & 1) == 0) {
        break;
      }
      uint64_t ObjectType = swift_getObjectType(v11);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 24);
      sub_1000E888C();
      if ((v14(ObjectType, v12) & 1) != 0) {
        goto LABEL_7;
      }
      sub_10001449C();
LABEL_27:
      v10 += 2;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }

    swift_unknownObjectRetain(v11);
LABEL_7:
    uint64_t v15 = swift_getObjectType(v11);
    (*(void (**)(void *, uint64_t, uint64_t))(v12 + 56))(rawValue, v15, v12);
    uint64_t v57 = v15;
    if (v4)
    {
      uint64_t v59 = v4;
      sub_1000E8844();
      uint64_t v16 = sub_10000941C(&qword_1001D2B70);
      if ((swift_dynamicCast(&v58, &v59, v16, &type metadata for SQLiteViewProviderError, 6LL) & 1) != 0 && !(_BYTE)v58)
      {
        if (qword_1001D7E48 != -1) {
          swift_once(&qword_1001D7E48, sub_1000E6D78);
        }
        uint64_t v36 = sub_100010ED4();
        sub_1000093D0(v36, (uint64_t)qword_1001EDEC0);
        uint64_t v37 = sub_1000E886C();
        v38 = (void *)Logger.logObject.getter(v37);
        os_log_type_t v43 = static os_log_type_t.info.getter(v38, v39, v40, v41, v42);
        if (os_log_type_enabled((os_log_t)v38, v43))
        {
          uint64_t v44 = sub_100009B20(12LL);
          uint64_t v45 = sub_100009B20(32LL);
          uint64_t v59 = v45;
          *(_DWORD *)uint64_t v44 = v50.n128_u32[0];
          uint64_t v46 = sub_1000E87DC( *(uint64_t (**)(uint64_t, uint64_t))(v12 + 16),  v48,  (uint64_t)v49,  v50.n128_i64[0],  v50.n128_i64[1],  v51.n128_i64[0],  v51.n128_i64[1],  v52,  v53,  (uint64_t)v38,  (uint64_t)rawValue,  v57);
          *(void *)(v44 + 4) = sub_1000E87EC(v46, v47);
          sub_1000E87D0();
          sub_100009B3C();
          _os_log_impl( (void *)&_mh_execute_header,  loga,  v43,  "Database does not meet %s view provider requirements",  (uint8_t *)v44,  0xCu);
          swift_arrayDestroy(v45, 1LL);
          sub_100010C34(v45);
          sub_100010C34(v44);
          sub_10001449C();

          sub_1000A2154();
        }

        else
        {
          sub_10001449C();
          sub_1000A2154();

          sub_1000E87D0();
        }

        uint64_t v4 = 0LL;
        LOBYTE(v7) = BYTE4(v53);
      }

      else
      {
        if (qword_1001D7E48 != -1) {
          swift_once(&qword_1001D7E48, sub_1000E6D78);
        }
        uint64_t v17 = sub_100010ED4();
        sub_1000093D0(v17, (uint64_t)qword_1001EDEC0);
        sub_1000E888C();
        sub_1000E8844();
        sub_1000E888C();
        uint64_t v18 = sub_1000E8844();
        uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
        os_log_type_t v21 = static os_log_type_t.error.getter(v19, v20);
        if (sub_1000E8834(v21))
        {
          uint64_t v7 = sub_100009B20(22LL);
          uint64_t v22 = sub_100009B20(64LL);
          uint64_t v59 = v22;
          *(_DWORD *)uint64_t v7 = v51.n128_u32[0];
          uint64_t v23 = sub_1000E87DC( *(uint64_t (**)(uint64_t, uint64_t))(v12 + 16),  v48,  (uint64_t)v49,  v50.n128_i64[0],  v50.n128_i64[1],  v51.n128_i64[0],  v51.n128_i64[1],  v22,  v53,  v16,  (uint64_t)rawValue,  v15);
          *(void *)(v7 + 4) = sub_1000E87EC(v23, v24);
          sub_1000E87D0();
          sub_100009B3C();
          *(_WORD *)(v7 + 12) = 2080;
          uint64_t v58 = v4;
          sub_1000E8844();
          uint64_t v25 = String.init<A>(describing:)(&v58);
          *(void *)(v7 + 14) = sub_1000E87EC(v25, v26);
          sub_100009B3C();
          sub_1000A2154();
          sub_1000A2154();
          _os_log_impl( (void *)&_mh_execute_header,  v19,  (os_log_type_t)v15,  "Failed to configure database with %s event provider: %s",  (uint8_t *)v7,  0x16u);
          swift_arrayDestroy(v52, 2LL);
          sub_100010C34(v52);
          uint64_t v27 = v7;
          LOBYTE(v7) = BYTE4(v53);
          sub_100010C34(v27);
          sub_10001449C();

          sub_1000A2154();
        }

        else
        {
          sub_10001449C();
          sub_1000A2154();
          sub_1000E87D0();
          sub_1000A2154();
          sub_1000A2154();
        }

        uint64_t v4 = 0LL;
      }
    }

    else
    {
      if (qword_1001D7E48 != -1) {
        swift_once(&qword_1001D7E48, sub_1000E6D78);
      }
      uint64_t v28 = sub_100010ED4();
      sub_1000093D0(v28, (uint64_t)qword_1001EDEC0);
      uint64_t v29 = sub_1000E886C();
      uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
      os_log_type_t v31 = static os_log_type_t.debug.getter(v30);
      if (sub_1000E8834(v31))
      {
        uint64_t v7 = sub_100009B20(12LL);
        uint64_t v32 = sub_100009B20(32LL);
        uint64_t v59 = v32;
        *(_DWORD *)uint64_t v7 = v50.n128_u32[0];
        uint64_t v33 = sub_1000E87DC( *(uint64_t (**)(uint64_t, uint64_t))(v12 + 16),  v48,  (uint64_t)v49,  v50.n128_i64[0],  v50.n128_i64[1],  v51.n128_i64[0],  v51.n128_i64[1],  v52,  v53,  v32,  (uint64_t)rawValue,  v15);
        *(void *)(v7 + 4) = sub_1000E87EC(v33, v34);
        sub_1000E87D0();
        sub_100009B3C();
        _os_log_impl( (void *)&_mh_execute_header,  v30,  (os_log_type_t)v15,  "Database configured with %s event provider",  (uint8_t *)v7,  0xCu);
        swift_arrayDestroy(log, 1LL);
        sub_100010C34((uint64_t)log);
        uint64_t v35 = v7;
        LOBYTE(v7) = BYTE4(v53);
        sub_100010C34(v35);
        sub_10001449C();
      }

      else
      {

        swift_unknownObjectRelease_n(v11, 3LL);
      }
    }

    goto LABEL_27;
  }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteBaseSchematizer.createFunctions(for:)( Swift::OpaquePointer a1)
{
  uint64_t v3 = v1;
  SQLiteBaseSchematizer.ensureFunctions()();
  uint64_t v5 = type metadata accessor for SQLiteDatabase();
  sub_100009ACC(v5, 24LL);
  uint64_t v6 = SQLiteDatabase.init(connection:)((uint64_t)a1._rawValue);
  if (!v2)
  {
    uint64_t v7 = v6;
    swift_beginAccess(v3 + 64, v10, 0LL, 0LL);
    uint64_t v8 = *(void *)(v3 + 64);
    swift_bridgeObjectRetain(v8);
    Dictionary<>.registerAll(on:)(v7, v8);
    uint64_t v9 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(void *)v7 + 144LL))(v9);
    sub_10001683C();
  }

void (*SQLiteBaseSchematizer.interpret(_:with:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4))(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t)
{
  void (*v8)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  sub_1000E889C();
  uint64_t v8 = Schematizer.interpret(payload:with:)(a1, a2, a3, a4);
  sub_10001683C();
  return v8;
}

uint64_t SQLiteBaseSchematizer.enum(withName:)(uint64_t a1, uint64_t a2)
{
  return sub_1000E8450(a1, a2, (void (*)(uint64_t, uint64_t))Schematizer.enum(withName:));
}

uint64_t SQLiteBaseSchematizer.messageSchema(withName:)(uint64_t a1, uint64_t a2)
{
  return sub_1000E8450(a1, a2, (void (*)(uint64_t, uint64_t))Schematizer.messageSchema(withName:));
}

uint64_t sub_1000E8450(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  return sub_10001683C();
}

uint64_t SQLiteBaseSchematizer.hookPerform(function:block:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t type metadata accessor for SQLiteBaseSchematizer()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer21SQLiteBaseSchematizer);
}

void sub_1000E84E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)*a5;
  unint64_t v15 = sub_10000EC64(a2, a3);
  uint64_t v17 = v14[2];
  BOOL v18 = (v16 & 1) == 0;
  Swift::Int v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v20 = v15;
  char v21 = v16;
  sub_10000941C(&qword_1001D84D0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v19)) {
    goto LABEL_5;
  }
  unint64_t v22 = sub_10000EC64(a2, a3);
  if ((v21 & 1) != (v23 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v20 = v22;
LABEL_5:
  unint64_t v24 = (void *)*a5;
  if ((v21 & 1) != 0)
  {
    uint64_t v25 = (uint64_t *)(v24[7] + 16 * v20);
    swift_unknownObjectRelease();
    *uint64_t v25 = a1;
    v25[1] = a7;
  }

  else
  {
    sub_1000E8678(v20, a2, a3, a1, v24, a6, a7);
    swift_bridgeObjectRetain(a3);
  }

uint64_t type metadata accessor for SQLiteBaseSchematizer.Environment()
{
  return objc_opt_self(&OBJC_CLASS____TtCC11Schematizer21SQLiteBaseSchematizerP33_54D94126AD68C83F177319E891D8185511Environment);
}

unint64_t sub_1000E863C()
{
  unint64_t result = qword_1001D84C8;
  if (!qword_1001D84C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100164810, &type metadata for SQLiteSchematizerError);
    atomic_store(result, (unint64_t *)&qword_1001D84C8);
  }

  return result;
}

unint64_t sub_1000E8678( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  uint64_t v7 = (void *)(a5[6] + 16 * result);
  void *v7 = a2;
  v7[1] = a3;
  uint64_t v8 = (void *)(a5[7] + 16 * result);
  *uint64_t v8 = a4;
  v8[1] = a7;
  uint64_t v9 = a5[2];
  BOOL v10 = __OFADD__(v9, 1LL);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a5[2] = v11;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SQLiteSchematizerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000E8710 + 4 * byte_1001646F5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000E8744 + 4 * byte_1001646F0[v4]))();
}

uint64_t sub_1000E8744(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E874C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000E8754LL);
  }
  return result;
}

uint64_t sub_1000E8760(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000E8768LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000E876C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E8774(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SQLiteSchematizerError()
{
  return &type metadata for SQLiteSchematizerError;
}

unint64_t sub_1000E8794()
{
  unint64_t result = qword_1001D84F0;
  if (!qword_1001D84F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001647E8, &type metadata for SQLiteSchematizerError);
    atomic_store(result, (unint64_t *)&qword_1001D84F0);
  }

  return result;
}

uint64_t sub_1000E87D0()
{
  return swift_unknownObjectRelease_n(v0, 2LL);
}

uint64_t sub_1000E87DC@<X0>( uint64_t (*a1)(uint64_t, uint64_t)@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return a1(a12, v12);
}

uint64_t sub_1000E87EC(uint64_t a1, unint64_t a2)
{
  return sub_1000307E0(a1, a2, (uint64_t *)(v2 - 72));
}

  ;
}

  ;
}

uint64_t sub_1000E8824(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = a1;
  return swift_release(v2);
}

BOOL sub_1000E8834(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000E8844()
{
  return swift_errorRetain(v0);
}

uint64_t sub_1000E884C()
{
  return type metadata accessor for Schematizer();
}

uint64_t sub_1000E8854()
{
  return v0;
}

uint64_t sub_1000E886C()
{
  return swift_unknownObjectRetain_n(v0, 2LL);
}

  ;
}

uint64_t sub_1000E888C()
{
  return swift_unknownObjectRetain(v0);
}

void *sub_1000E8894()
{
  return ProtoSchemaStore.init()();
}

uint64_t sub_1000E889C()
{
  return swift_retain(*(void *)(v0 + 16));
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PBFirstOfFunction.perform(with:arguments:)( SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  unint64_t v3 = *((void *)arguments._rawValue + 2);
  if (!v3)
  {
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }

  uint64_t v4 = SQLiteArgument.getUnsafeData()(*((sqlite3_value **)arguments._rawValue + 4));
  if (v5 >> 60 == 15)
  {
    unint64_t v6 = sub_1000E4274();
    uint64_t v7 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v6);
    *(void *)(v8 + 8) = 0LL;
    *(void *)(v8 + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)uint64_t v8 = 6LL;
    *(_BYTE *)(v8 + 24) = 4;
    swift_willThrow(v7);
    return;
  }

  if (v3 < 2) {
    goto LABEL_83;
  }
  uint64_t v9 = v4;
  unint64_t v10 = v5;
  v56[3] = v2;
  Swift::String v11 = SQLiteArgument.getStringNonNull()();
  if (v12)
  {
LABEL_9:
    uint64_t v16 = v9;
LABEL_10:
    sub_100010A1C(v16, v10);
    return;
  }

  if (v3 < 3) {
    goto LABEL_86;
  }
  LOBYTE(v13) = v11._object;
  Swift::String v14 = SQLiteArgument.getStringNonNull()();
  if (v15)
  {
    sub_100010C70();
    goto LABEL_9;
  }

  uint64_t v52 = v9;
  Swift::String v53 = v11;
  v56[0] = 46LL;
  v56[1] = 0xE100000000000000LL;
  unint64_t v17 = sub_1000106CC();
  uint64_t v18 = StringProtocol.components<A>(separatedBy:)(v56, &type metadata for String, &type metadata for String, v17, v17);
  sub_100010C70();
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    uint64_t v20 = v18 + 32;
    uint64_t v51 = v18;
    swift_bridgeObjectRetain(v18);
    uint64_t v21 = 0LL;
    unint64_t v22 = _swiftEmptyArrayStorage;
    while (1)
    {
      char v23 = (uint64_t *)(v20 + 16 * v21);
      uint64_t v25 = *v23;
      unint64_t v24 = v23[1];
      uint64_t v26 = HIBYTE(v24) & 0xF;
      uint64_t v27 = v25 & 0xFFFFFFFFFFFFLL;
      if ((v24 & 0x2000000000000000LL) != 0 ? HIBYTE(v24) & 0xF : v25 & 0xFFFFFFFFFFFFLL) {
        break;
      }
LABEL_53:
      if (++v21 == v19)
      {
        uint64_t v44 = swift_bridgeObjectRelease_n(v51, 2LL);
        goto LABEL_76;
      }
    }

    if ((v24 & 0x1000000000000000LL) != 0)
    {
      swift_bridgeObjectRetain(v24);
      uint64_t v30 = (uint64_t)sub_1000EA368(v25, v24, 10LL);
      LOBYTE(v13) = v41;
      swift_bridgeObjectRelease();
      goto LABEL_47;
    }

    if ((v24 & 0x2000000000000000LL) == 0)
    {
      if ((v25 & 0x1000000000000000LL) != 0) {
        uint64_t v29 = (unsigned __int8 *)((v24 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v29 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v25, v24);
      }
      uint64_t v30 = (uint64_t)sub_1000EA46C(v29, v27, 10LL);
      LOBYTE(v13) = v31 & 1;
LABEL_47:
      if ((v13 & 1) == 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
        {
          sub_1000E9A30( 0,  v22[2] + 1LL,  1,  (uint64_t)v22,  &qword_1001D8668,  (void (*)(void, uint64_t, void *, uint64_t))sub_1000E9EA8,  (void (*)(uint64_t, uint64_t, void *))sub_1001098A8);
          unint64_t v22 = v42;
        }

        unint64_t v13 = v22[2];
        unint64_t v36 = v22[3];
        if (v13 >= v36 >> 1)
        {
          sub_1000E9A30( v36 > 1,  v13 + 1,  1,  (uint64_t)v22,  &qword_1001D8668,  (void (*)(void, uint64_t, void *, uint64_t))sub_1000E9EA8,  (void (*)(uint64_t, uint64_t, void *))sub_1001098A8);
          unint64_t v22 = v43;
        }

        v22[2] = v13 + 1;
        v22[v13 + 4] = v30;
      }

      goto LABEL_53;
    }

    v53._countAndFlagsBits = v25;
    v53._object = (void *)(v24 & 0xFFFFFFFFFFFFFFLL);
    if (v25 == 43)
    {
      if (!v26) {
        goto LABEL_85;
      }
      uint64_t v30 = (BYTE1(v25) - 48);
      if (v26 == 2) {
        goto LABEL_46;
      }
      if ((BYTE2(v25) - 48) <= 9u)
      {
        uint64_t v30 = 10LL * (BYTE1(v25) - 48) + (BYTE2(v25) - 48);
        if (v26 != 3)
        {
          while (1)
          {
            sub_1000EA748();
            if (!v33 & v32) {
              goto LABEL_44;
            }
            sub_1000EA714();
            if (!v33) {
              goto LABEL_44;
            }
            uint64_t v30 = v35 + v34;
            if (__OFADD__(v35, v34)) {
              goto LABEL_44;
            }
            sub_1000EA764();
            if (v33) {
              goto LABEL_47;
            }
          }
        }

        goto LABEL_46;
      }
    }

    else
    {
      if (v25 == 45)
      {
        if (!v26) {
          goto LABEL_84;
        }
        if (v26 == 2)
        {
          LOBYTE(v13) = 0;
          uint64_t v30 = -(uint64_t)(BYTE1(v25) - 48);
          goto LABEL_47;
        }

        uint64_t v30 = -10LL * (BYTE1(v25) - 48) - (BYTE2(v25) - 48);
        if (v26 != 3)
        {
          while (1)
          {
            sub_1000EA748();
            if (!v33 & v32) {
              goto LABEL_44;
            }
            sub_1000EA714();
            if (!v33) {
              goto LABEL_44;
            }
            uint64_t v30 = v40 - v39;
            if (__OFSUB__(v40, v39)) {
              goto LABEL_44;
            }
            sub_1000EA764();
            if (v33) {
              goto LABEL_47;
            }
          }
        }

LABEL_88:
  __break(1u);
}

uint64_t sub_1000E8E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1001D7E78 != -1) {
    swift_once(&qword_1001D7E78, sub_10010B648);
  }
  uint64_t v7 = (void *)qword_1001DA8F8;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v7 updateData:isa];

  uint64_t v9 = (char *)qword_1001DA8F8;
  [(id)qword_1001DA8F8 seekToOffset:0];
  uint64_t v10 = *(void *)(a4 + 16);
  uint64_t v11 = Data.count.getter(a2, a3);
  if (v11 < 0)
  {
LABEL_72:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL);
    __break(1u);
    return result;
  }

  uint64_t v12 = (char *)v11;
  if (v10)
  {
    uint64_t v13 = 0LL;
    uint64_t v14 = a4 + 32;
    uint64_t v54 = v14;
    do
    {
      uint64_t v55 = v13;
      uint64_t v15 = *(void *)(v14 + 8 * v13);
      unint64_t v16 = (unint64_t)[v9 position];
      LOBYTE(v17) = 0;
      unsigned int v18 = 0;
      uint64_t v19 = 0LL;
      while (1)
      {
        while (1)
        {
          unint64_t v20 = *(void *)&v9[OBJC_IVAR___PBDataReader__pos];
          if (v20 == -1LL || v20 >= *(void *)&v9[OBJC_IVAR___PBDataReader__length])
          {
            char v22 = 0;
            v9[OBJC_IVAR___PBDataReader__error] = 1;
          }

          else
          {
            unint64_t v21 = v20 + 1;
            char v22 = *(_BYTE *)(*(void *)&v9[OBJC_IVAR___PBDataReader__bytes] + v20);
            *(void *)&v9[OBJC_IVAR___PBDataReader__pos] = v21;
          }

          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            break;
          }
          LOBYTE(v17) = v17 + 7;
          if (v18++ >= 9)
          {
            unint64_t v23 = 0LL;
            goto LABEL_20;
          }
        }

        unint64_t v23 = v9[OBJC_IVAR___PBDataReader__error] ? 0LL : v19;
LABEL_20:
        uint64_t v17 = v23 & 7;
        PBReaderSkipValueWithTag(v9, v23 >> 3, v23 & 7);
        unint64_t v25 = (unint64_t)[v9 position];
        unsigned int v18 = 0;
        uint64_t v17 = 0LL;
        uint64_t v19 = 0LL;
        if ((v25 & 0x8000000000000000LL) == 0)
        {
          uint64_t v19 = 0LL;
        }
      }

      if ((_DWORD)v17 != 2)
      {
        unint64_t v49 = sub_1000E43B4();
        swift_allocError(&type metadata for SchemaError, v49, 0LL, 0LL);
        uint64_t v51 = v50;
        _StringGuts.grow(_:)(38LL);
        swift_bridgeObjectRelease();
        v52._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
        String.append(_:)(v52);
        uint64_t v53 = swift_bridgeObjectRelease();
        *(void *)uint64_t v51 = 0xD000000000000024LL;
        *(void *)(v51 + 8) = 0x80000001001728C0LL;
        *(_BYTE *)(v51 + 41) = 12;
        swift_willThrow(v53);
        [(id)qword_1001DA8F8 updateData:0];
        return v17;
      }

      char v26 = 0;
      unsigned int v27 = 0;
      uint64_t v28 = 0LL;
      uint64_t v14 = v54;
      while (1)
      {
        unint64_t v29 = *(void *)&v9[OBJC_IVAR___PBDataReader__pos];
        if (v29 == -1LL || v29 >= *(void *)&v9[OBJC_IVAR___PBDataReader__length])
        {
          char v31 = 0;
          v9[OBJC_IVAR___PBDataReader__error] = 1;
        }

        else
        {
          unint64_t v30 = v29 + 1;
          char v31 = *(_BYTE *)(*(void *)&v9[OBJC_IVAR___PBDataReader__bytes] + v29);
          *(void *)&v9[OBJC_IVAR___PBDataReader__pos] = v30;
        }

        v28 |= (unint64_t)(v31 & 0x7F) << v26;
        if ((v31 & 0x80) == 0) {
          break;
        }
        v26 += 7;
        BOOL v47 = v27++ > 8;
        if (v47)
        {
          uint64_t v32 = 0LL;
          goto LABEL_38;
        }
      }

      if (v9[OBJC_IVAR___PBDataReader__error]) {
        uint64_t v32 = 0LL;
      }
      else {
        uint64_t v32 = v28;
      }
      if (v32 < 0) {
        goto LABEL_72;
      }
LABEL_38:
      unint64_t v33 = (unint64_t)[v9 position];
      if ((v33 & 0x8000000000000000LL) != 0) {
        goto LABEL_72;
      }
      uint64_t v13 = v55 + 1;
      uint64_t v12 = (char *)(v33 + v32);
    }

    while (v55 + 1 != v10);
  }

  unint64_t v34 = (unint64_t)[v9 position];
  if ((v34 & 0x8000000000000000LL) == 0 && v34 >= (unint64_t)v12)
  {
LABEL_42:
    uint64_t v17 = 0LL;
    goto LABEL_43;
  }

  LOBYTE(v17) = 0;
  unsigned int v36 = 0;
  unint64_t v37 = 0LL;
  while (1)
  {
    while (1)
    {
      unint64_t v38 = *(void *)&v9[OBJC_IVAR___PBDataReader__pos];
      if (v38 == -1LL || v38 >= *(void *)&v9[OBJC_IVAR___PBDataReader__length])
      {
        char v40 = 0;
        v9[OBJC_IVAR___PBDataReader__error] = 1;
      }

      else
      {
        unint64_t v39 = v38 + 1;
        char v40 = *(_BYTE *)(*(void *)&v9[OBJC_IVAR___PBDataReader__bytes] + v38);
        *(void *)&v9[OBJC_IVAR___PBDataReader__pos] = v39;
      }

      v37 |= (unint64_t)(v40 & 0x7F) << v17;
      if ((v40 & 0x80) == 0) {
        break;
      }
      LOBYTE(v17) = v17 + 7;
      BOOL v47 = v36++ > 8;
      if (v47)
      {
        unint64_t v42 = 0LL;
        LODWORD(v44) = 0;
        uint64_t v43 = 0LL;
        goto LABEL_59;
      }
    }

    if (v9[OBJC_IVAR___PBDataReader__error]) {
      unint64_t v41 = 0LL;
    }
    else {
      unint64_t v41 = v37;
    }
    unint64_t v42 = v41 >> 3;
    if (((v41 >> 3) & 0x80000000) != 0) {
      __break(1u);
    }
    uint64_t v43 = v41 & 7;
    unint64_t v44 = v41 >> 3;
LABEL_59:
    uint64_t v45 = *(void *)(a1 + 16);
    if (v45) {
      break;
    }
LABEL_67:
    PBReaderSkipValueWithTag(v9, v42, v43);
    unint64_t v48 = (unint64_t)[v9 position];
    unsigned int v36 = 0;
    uint64_t v17 = 0LL;
    unint64_t v37 = 0LL;
    if ((v48 & 0x8000000000000000LL) == 0)
    {
      unint64_t v37 = 0LL;
    }
  }

  uint64_t v46 = (_DWORD *)(a1 + 36);
  while (1)
  {
    BOOL v47 = *(v46 - 1) > (int)v42 || *v46 < (int)v42;
    if (!v47) {
      break;
    }
    v46 += 2;
    if (!--v45) {
      goto LABEL_67;
    }
  }

  uint64_t v17 = v44;
LABEL_43:
  [v9 updateData:0];
  return v17;
}

uint64_t sub_1000E9418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1001D7E78 != -1) {
    swift_once(&qword_1001D7E78, sub_10010B648);
  }
  uint64_t v7 = (void *)qword_1001DA8F8;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v7 updateData:isa];

  uint64_t v9 = (_BYTE *)qword_1001DA8F8;
  [(id)qword_1001DA8F8 seekToOffset:0];
  uint64_t v10 = *(void *)(a4 + 16);
  uint64_t v11 = Data.count.getter(a2, a3);
  if (v11 < 0)
  {
LABEL_65:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL);
    __break(1u);
    return result;
  }

  uint64_t v12 = (char *)v11;
  if (v10)
  {
    uint64_t v13 = 0LL;
    uint64_t v14 = a4 + 32;
    uint64_t v51 = v14;
    do
    {
      uint64_t v52 = v13;
      uint64_t v15 = *(void *)(v14 + 8 * v13);
      unint64_t v16 = (unint64_t)sub_1000EA6E8();
      LOBYTE(v17) = 0;
      unsigned int v18 = 0;
      uint64_t v19 = 0LL;
      while (1)
      {
        do
        {
          unint64_t v20 = *(void *)&v9[OBJC_IVAR___PBDataReader__pos];
          if (v20 == -1LL || v20 >= *(void *)&v9[OBJC_IVAR___PBDataReader__length])
          {
            char v22 = 0;
            v9[OBJC_IVAR___PBDataReader__error] = 1;
          }

          else
          {
            unint64_t v21 = v20 + 1;
            char v22 = *(_BYTE *)(*(void *)&v9[OBJC_IVAR___PBDataReader__bytes] + v20);
            *(void *)&v9[OBJC_IVAR___PBDataReader__pos] = v21;
          }

          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
          {
            sub_1000EA774();
            goto LABEL_18;
          }

          LOBYTE(v17) = v17 + 7;
          BOOL v24 = v18++ >= 9;
        }

        while (!v24);
        unint64_t v23 = 0LL;
LABEL_18:
        uint64_t v17 = v23 & 7;
        PBReaderSkipValueWithTag(v9, v23 >> 3, v23 & 7);
        unint64_t v25 = (unint64_t)sub_1000EA6E8();
        unsigned int v18 = 0;
        uint64_t v17 = 0LL;
        uint64_t v19 = 0LL;
        if ((v25 & 0x8000000000000000LL) == 0)
        {
          uint64_t v19 = 0LL;
        }
      }

      if ((_DWORD)v17 != 2)
      {
        unint64_t v46 = sub_1000E43B4();
        sub_100010EA0((uint64_t)&type metadata for SchemaError, v46);
        uint64_t v48 = v47;
        _StringGuts.grow(_:)(38LL);
        swift_bridgeObjectRelease();
        v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
        String.append(_:)(v49);
        uint64_t v50 = swift_bridgeObjectRelease();
        *(void *)uint64_t v48 = 0xD000000000000024LL;
        *(void *)(v48 + 8) = 0x80000001001728C0LL;
        *(_BYTE *)(v48 + 41) = 12;
        swift_willThrow(v50);
        [(id)qword_1001DA8F8 updateData:0];
        return v17;
      }

      char v26 = 0;
      unsigned int v27 = 0;
      uint64_t v28 = 0LL;
      uint64_t v14 = v51;
      while (1)
      {
        unint64_t v29 = *(void *)&v9[OBJC_IVAR___PBDataReader__pos];
        if (v29 == -1LL || v29 >= *(void *)&v9[OBJC_IVAR___PBDataReader__length])
        {
          char v31 = 0;
          v9[OBJC_IVAR___PBDataReader__error] = 1;
        }

        else
        {
          unint64_t v30 = v29 + 1;
          char v31 = *(_BYTE *)(*(void *)&v9[OBJC_IVAR___PBDataReader__bytes] + v29);
          *(void *)&v9[OBJC_IVAR___PBDataReader__pos] = v30;
        }

        v28 |= (unint64_t)(v31 & 0x7F) << v26;
        if ((v31 & 0x80) == 0) {
          break;
        }
        v26 += 7;
        BOOL v44 = v27++ > 8;
        if (v44)
        {
          uint64_t v32 = 0LL;
          goto LABEL_36;
        }
      }

      if (v9[OBJC_IVAR___PBDataReader__error]) {
        uint64_t v32 = 0LL;
      }
      else {
        uint64_t v32 = v28;
      }
      if (v32 < 0) {
        goto LABEL_65;
      }
LABEL_36:
      unint64_t v33 = (unint64_t)sub_1000EA6E8();
      if ((v33 & 0x8000000000000000LL) != 0) {
        goto LABEL_65;
      }
      uint64_t v13 = v52 + 1;
      uint64_t v12 = (char *)(v33 + v32);
    }

    while (v52 + 1 != v10);
  }

  unint64_t v34 = (unint64_t)sub_1000EA6E8();
  if ((v34 & 0x8000000000000000LL) == 0 && v34 >= (unint64_t)v12)
  {
LABEL_40:
    uint64_t v17 = 0LL;
    goto LABEL_41;
  }

  LOBYTE(v17) = 0;
  unsigned int v36 = 0;
  uint64_t v37 = 0LL;
  while (1)
  {
    do
    {
      unint64_t v38 = *(void *)&v9[OBJC_IVAR___PBDataReader__pos];
      if (v38 == -1LL || v38 >= *(void *)&v9[OBJC_IVAR___PBDataReader__length])
      {
        char v40 = 0;
        v9[OBJC_IVAR___PBDataReader__error] = 1;
      }

      else
      {
        unint64_t v39 = v38 + 1;
        char v40 = *(_BYTE *)(*(void *)&v9[OBJC_IVAR___PBDataReader__bytes] + v38);
        *(void *)&v9[OBJC_IVAR___PBDataReader__pos] = v39;
      }

      v37 |= (unint64_t)(v40 & 0x7F) << v17;
      if ((v40 & 0x80) == 0)
      {
        sub_1000EA774();
        goto LABEL_53;
      }

      LOBYTE(v17) = v17 + 7;
      BOOL v24 = v36++ >= 9;
    }

    while (!v24);
    unint64_t v41 = 0LL;
LABEL_53:
    uint64_t v42 = *(void *)(a1 + 16);
    if (v42) {
      break;
    }
LABEL_61:
    PBReaderSkipValueWithTag(v9, v41 >> 3, v41 & 7);
    unint64_t v45 = (unint64_t)sub_1000EA6E8();
    unsigned int v36 = 0;
    uint64_t v17 = 0LL;
    uint64_t v37 = 0LL;
    if ((v45 & 0x8000000000000000LL) == 0)
    {
      uint64_t v37 = 0LL;
    }
  }

  uint64_t v17 = (v41 >> 3);
  uint64_t v43 = (uint64_t *)(a1 + 40);
  while (1)
  {
    BOOL v44 = *(v43 - 1) > v17 || *v43 < v17;
    if (!v44) {
      break;
    }
    v43 += 2;
    if (!--v42) {
      goto LABEL_61;
    }
  }

uint64_t PBFirstOfFunction.__allocating_init(_:)(uint64_t a1)
{
  return SQLiteSchematizerFunction.init(_:)(a1);
}

void sub_1000E9970()
{
  if ((v2 & 1) != 0)
  {
    sub_1000325D4();
    if (v3 != v4)
    {
      sub_100032614();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_1000325C4();
    }
  }

  sub_1000EA704();
  if (v1)
  {
    uint64_t v5 = sub_10000941C(&qword_1001D8658);
    unint64_t v6 = (const void *)sub_100009ACC(v5, 40 * v1 + 32);
    size_t v7 = j__malloc_size(v6);
    sub_1000EA788(v7);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v8 = (char *)sub_1000EA73C();
    sub_10010984C(v8, v9, v10);
    sub_1000325B8();
  }

  else
  {
    uint64_t v11 = sub_1000EA6F4();
    sub_1000E9D8C(v11, v12, v13, v14);
  }

  sub_100019F1C();
}

void sub_1000E9A14(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_1000E9A30( char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(void, uint64_t, void *, uint64_t), void (*a7)(uint64_t, uint64_t, void *))
{
  if ((a3 & 1) != 0)
  {
    sub_1000325D4();
    if (v12 != v13)
    {
      sub_100032614();
      if (v12)
      {
        __break(1u);
        return;
      }

      sub_1000325C4();
    }
  }

  else
  {
    uint64_t v11 = a2;
  }

  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (v15)
  {
    uint64_t v16 = sub_10000941C(a5);
    uint64_t v17 = (void *)sub_100009ACC(v16, 8 * v15 + 32);
    size_t v18 = j__malloc_size(v17);
    v17[2] = v14;
    v17[3] = 2 * ((uint64_t)(v18 - 32) / 8);
  }

  else
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
  }

  uint64_t v19 = v17 + 4;
  if ((a1 & 1) != 0)
  {
    a7(a4 + 32, v14, v19);
    sub_1000325B8();
  }

  else
  {
    a6(0LL, v14, v19, a4);
  }

  sub_100019F1C();
}

void sub_1000E9AFC()
{
  if ((v2 & 1) != 0)
  {
    sub_1000325D4();
    if (v3 != v4)
    {
      sub_100032614();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_1000325C4();
    }
  }

  sub_1000EA704();
  if (v1)
  {
    uint64_t v5 = sub_10000941C(&qword_1001D8630);
    unint64_t v6 = (const void *)sub_100009ACC(v5, 16 * v1 + 32);
    size_t v7 = j__malloc_size(v6);
    sub_1000EA72C(v7 - 32);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v8 = (char *)sub_1000EA73C();
    sub_100109954(v8, v9, v10);
    sub_1000325B8();
  }

  else
  {
    uint64_t v11 = sub_1000EA6F4();
    sub_1000E9F98(v11, v12, v13, v14);
  }

  sub_1000110D4();
}

void sub_1000E9BA0()
{
  if ((v2 & 1) != 0)
  {
    sub_1000325D4();
    if (v3 != v4)
    {
      sub_100032614();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_1000325C4();
    }
  }

  sub_1000EA704();
  if (v1)
  {
    uint64_t v5 = sub_10000941C(&qword_1001D8638);
    unint64_t v6 = (const void *)sub_100009ACC(v5, 24 * v1 + 32);
    size_t v7 = j__malloc_size(v6);
    sub_1000EA788(v7);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v8 = sub_1000EA73C();
    sub_100109950(v8);
    sub_1000325B8();
  }

  else
  {
    uint64_t v9 = sub_1000EA6F4();
    sub_1000EA088(v9, v10, v11, v12);
  }

  sub_100019F1C();
}

void sub_1000E9C44()
{
  if ((v2 & 1) != 0)
  {
    sub_1000325D4();
    if (v3 != v4)
    {
      sub_100032614();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_1000325C4();
    }
  }

  sub_1000EA704();
  if (v1)
  {
    uint64_t v5 = sub_10000941C(&qword_1001D8650);
    unint64_t v6 = (const void *)sub_100009ACC(v5, 32 * v1 + 32);
    size_t v7 = j__malloc_size(v6);
    sub_1000EA72C(v7 - 32);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v8 = (char *)sub_1000EA73C();
    sub_1001098FC(v8, v9, v10);
    sub_1000325B8();
  }

  else
  {
    uint64_t v11 = sub_1000EA6F4();
    sub_1000EA180(v11, v12, v13, v14);
  }

  sub_1000110D4();
}

void sub_1000E9CE8()
{
  if ((v2 & 1) != 0)
  {
    sub_1000325D4();
    if (v3 != v4)
    {
      sub_100032614();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_1000325C4();
    }
  }

  sub_1000EA704();
  if (v1)
  {
    uint64_t v5 = sub_10000941C(&qword_1001D8648);
    unint64_t v6 = (const void *)sub_100009ACC(v5, (v1 << 6) | 0x20);
    size_t v7 = j__malloc_size(v6);
    sub_1000EA72C(v7 - 32);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v8 = (char *)sub_1000EA73C();
    sub_100109A00(v8, v9, v10);
    sub_1000325B8();
  }

  else
  {
    uint64_t v11 = sub_1000EA6F4();
    sub_1000EA274(v11, v12, v13, v14);
  }

  sub_1000110D4();
}

uint64_t sub_1000E9D8C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 40 * a1 + 32;
  unint64_t v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_10000941C(&qword_1001D8660);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease();
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1000E9EA8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = (char *)(a4 + 8 * a1 + 32);
  unint64_t v7 = &__dst[8 * v4];
  if (v6 >= v7 || &v6[8 * v4] <= __dst)
  {
    memcpy(__dst, v6, 8 * v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1000E9F98(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = (char *)(a4 + 16 * a1 + 32);
  unint64_t v7 = &__dst[16 * v4];
  if (v6 >= v7 || &v6[16 * v4] <= __dst)
  {
    memcpy(__dst, v6, 16 * v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1000EA088(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = (char *)(a4 + 24 * a1 + 32);
  uint64_t v7 = 3 * v4;
  uint64_t v8 = &__dst[8 * v7];
  if (v6 >= v8 || &v6[8 * v7] <= __dst)
  {
    memcpy(__dst, v6, 8 * v7);
    swift_bridgeObjectRelease(a4);
    return v8;
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000EA180(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 32 * a1 + 32;
  unint64_t v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000EA274(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + (a1 << 6) + 32;
  unint64_t v7 = a3 + (v4 << 6);
  if (v6 >= v7 || v6 + (v4 << 6) <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

unsigned __int8 *sub_1000EA368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v4 = String.init<A>(_:)( &v14,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v6 = v4;
  unint64_t v7 = v5;
  if ((v5 & 0x1000000000000000LL) == 0)
  {
    if ((v5 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v9 = HIBYTE(v7) & 0xF;
    uint64_t v14 = v6;
    uint64_t v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }

  uint64_t v6 = sub_1000CA2F4(v4, v5);
  unint64_t v11 = v10;
  swift_bridgeObjectRelease();
  unint64_t v7 = v11;
  if ((v11 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }

uint64_t type metadata accessor for PBFirstOfFunction()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer17PBFirstOfFunction);
}

unsigned __int8 *sub_1000EA46C(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v15 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v16 = a3 + 48;
        unsigned __int8 v17 = a3 + 55;
        unsigned __int8 v18 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = 58;
        }

        else
        {
          unsigned __int8 v18 = 97;
          unsigned __int8 v17 = 65;
        }

        if (result)
        {
          uint64_t v9 = 0LL;
          uint64_t v19 = result + 1;
          do
          {
            unsigned int v20 = *v19;
            if (v20 < 0x30 || v20 >= v16)
            {
              if (v20 < 0x41 || v20 >= v17)
              {
                uint64_t v13 = 0LL;
                if (v20 < 0x61 || v20 >= v18) {
                  return (unsigned __int8 *)v13;
                }
                char v21 = -87;
              }

              else
              {
                char v21 = -55;
              }
            }

            else
            {
              char v21 = -48;
            }

            uint64_t v22 = v9 * a3;
            uint64_t v9 = v22 + (v20 + v21);
            ++v19;
            --v15;
          }

          while (v15);
          return (unsigned __int8 *)v9;
        }

        return 0LL;
      }

      return 0LL;
    }
  }

  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        unsigned __int8 v23 = a3 + 48;
        unsigned __int8 v24 = a3 + 55;
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v23 = 58;
        }

        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v24 = 65;
        }

        if (result)
        {
          uint64_t v26 = 0LL;
          do
          {
            unsigned int v27 = *result;
            if (v27 < 0x30 || v27 >= v23)
            {
              if (v27 < 0x41 || v27 >= v24)
              {
                uint64_t v13 = 0LL;
                if (v27 < 0x61 || v27 >= v25) {
                  return (unsigned __int8 *)v13;
                }
                char v28 = -87;
              }

              else
              {
                char v28 = -55;
              }
            }

            else
            {
              char v28 = -48;
            }

            uint64_t v29 = v26 * a3;
            uint64_t v26 = v29 + (v27 + v28);
            ++result;
            --v3;
          }

          while (v3);
          return (unsigned __int8 *)(v29 + (v27 + v28));
        }

        return 0LL;
      }

      return 0LL;
    }

    if (a2 >= 1)
    {
      uint64_t v5 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v6 = a3 + 48;
        unsigned __int8 v7 = a3 + 55;
        unsigned __int8 v8 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = 58;
        }

        else
        {
          unsigned __int8 v8 = 97;
          unsigned __int8 v7 = 65;
        }

        if (result)
        {
          uint64_t v9 = 0LL;
          for (i = result + 1; ; ++i)
          {
            unsigned int v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                uint64_t v13 = 0LL;
                if (v11 < 0x61 || v11 >= v8) {
                  return (unsigned __int8 *)v13;
                }
                char v12 = -87;
              }

              else
              {
                char v12 = -55;
              }
            }

            else
            {
              char v12 = -48;
            }

            uint64_t v14 = v9 * a3;
            uint64_t v9 = v14 - (v11 + v12);
            if (!--v5) {
              return (unsigned __int8 *)v9;
            }
          }
        }

        return 0LL;
      }

      return 0LL;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

id sub_1000EA6E8()
{
  return [v0 *(SEL *)(v1 + 3296)];
}

uint64_t sub_1000EA6F4()
{
  return 0LL;
}

  ;
}

  ;
}

void sub_1000EA72C(uint64_t a1@<X8>)
{
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t sub_1000EA73C()
{
  return v0 + 32;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000EA788(uint64_t result)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v1;
  *(void *)(v2 + 24) = 2 * ((result - 32) / v3);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PGetTimeWindowEndFunction.perform(with:arguments:)( SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  if (!v2)
  {
    uint64_t v4 = v3;
    swift_beginAccess(v3 + 32, v6, 0LL, 0LL);
    Swift::Double v5 = *(double *)(v4 + 40);
    swift_release();
    SQLiteContext.setDouble(_:)(v5);
  }

uint64_t type metadata accessor for PGetTimeWindowEndFunction()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer25PGetTimeWindowEndFunction);
}

ValueMetadata *type metadata accessor for AnyKey()
{
  return &type metadata for AnyKey;
}

uint64_t sub_1000EA840()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

void sub_1000EA86C(void *a1@<X8>)
{
  *a1 = v2;
  a1[1] = v3;
}

void sub_1000EA890(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
}

uint64_t sub_1000EA898(uint64_t a1)
{
  unint64_t v2 = sub_1000EA968();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000EA8C0(uint64_t a1)
{
  unint64_t v2 = sub_1000EA968();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1000EA8EC()
{
  unint64_t result = qword_1001D87A8;
  if (!qword_1001D87A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001648A4, &type metadata for AnyKey);
    atomic_store(result, (unint64_t *)&qword_1001D87A8);
  }

  return result;
}

unint64_t sub_1000EA92C()
{
  unint64_t result = qword_1001D87B0;
  if (!qword_1001D87B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001648CC, &type metadata for AnyKey);
    atomic_store(result, (unint64_t *)&qword_1001D87B0);
  }

  return result;
}

unint64_t sub_1000EA968()
{
  unint64_t result = qword_1001D87B8;
  if (!qword_1001D87B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001648F4, &type metadata for AnyKey);
    atomic_store(result, (unint64_t *)&qword_1001D87B8);
  }

  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PMessageNameFunction.perform(with:arguments:)( SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  if (*((void *)arguments._rawValue + 2))
  {
    uint64_t v4 = (sqlite3_value *)*((void *)arguments._rawValue + 4);
    BOOL v5 = SQLiteArgument.isNull.getter(v4);
    if (v5)
    {
      SQLiteContext.setNull()();
    }

    else
    {
      sub_1000E42D0(v5);
      if (!v2)
      {
        SQLiteBaseSchematizer.getSQLiteBridge()();
        uint64_t v7 = v6;
        uint64_t v9 = v8;
        swift_release();
        uint64_t ObjectType = swift_getObjectType(v7);
        (*(void (**)(sqlite3_value *, uint64_t, uint64_t))(v9 + 24))(v4, ObjectType, v9);
        uint64_t v12 = v11;
        uint64_t v14 = v13;
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v15 = swift_getObjectType(v12);
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v14 + 16))(v21, v15, v14);
        swift_unknownObjectRelease();
        uint64_t v17 = v22;
        uint64_t v16 = v23;
        sub_100019AFC(v21, v22);
        uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)(v16 + 8) + 8LL))(v17);
        uint64_t v20 = v19;
        sub_1000108B8(v21);
        SQLiteContext.setString(_:destructor:)( v18,  v20,  (void (__cdecl **)(void *))1,  (sqlite3_context *)with.context._rawValue);
        swift_bridgeObjectRelease();
      }
    }
  }

  else
  {
    __break(1u);
  }

uint64_t type metadata accessor for PMessageNameFunction()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer20PMessageNameFunction);
}

uint64_t static ValueType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1000E6350(a2, (uint64_t)&v37);
  if (!v36)
  {
    sub_1000EB46C(v3, v4, v5, v6, v7, v8, v9, v10, v29, v30);
    if (!v40) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }

  if (v36 != 1)
  {
    sub_1000EB484();
    if (v24)
    {
      uint64_t v25 = v23 | v21 | v22;
      if (v20 != 1 || v25)
      {
        if (v20 != 2 || v25)
        {
          if (v20 != 3 || v25)
          {
            if (v20 != 4 || v25)
            {
              if (v20 != 5 || v25)
              {
                if (v20 != 6 || v25)
                {
                  if (v20 != 7 || v25)
                  {
                    sub_1000EB460();
                    if (!v18 || v37 != 8) {
                      goto LABEL_11;
                    }
                  }

                  else
                  {
                    sub_1000EB460();
                    if (!v18 || v37 != 7) {
                      goto LABEL_11;
                    }
                  }
                }

                else
                {
                  sub_1000EB460();
                  if (!v18 || v37 != 6) {
                    goto LABEL_11;
                  }
                }
              }

              else
              {
                sub_1000EB460();
                if (!v18 || v37 != 5) {
                  goto LABEL_11;
                }
              }
            }

            else
            {
              sub_1000EB460();
              if (!v18 || v37 != 4) {
                goto LABEL_11;
              }
            }
          }

          else
          {
            sub_1000EB460();
            if (!v18 || v37 != 3) {
              goto LABEL_11;
            }
          }
        }

        else
        {
          sub_1000EB460();
          if (!v18 || v37 != 2) {
            goto LABEL_11;
          }
        }
      }

      else
      {
        sub_1000EB460();
        if (!v18 || v37 != 1) {
          goto LABEL_11;
        }
      }

      int8x16_t v27 = vorrq_s8(v38, v39);
      if (vorr_s8(*(int8x8_t *)v27.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)))
      {
LABEL_11:
        sub_1000EADF4((uint64_t)&v35);
        char v19 = 0;
        return v19 & 1;
      }
    }

    else
    {
      sub_1000EB460();
      if (!v18) {
        goto LABEL_11;
      }
      int8x16_t v26 = vorrq_s8(v38, v39);
    }

    sub_1000E638C(&v35);
    char v19 = 1;
    return v19 & 1;
  }

  sub_1000EB46C(v3, v4, v5, v6, v7, v8, v9, v10, v29, v30);
  if (v40 != 1)
  {
LABEL_10:
    sub_1000108B8(v34);
    goto LABEL_11;
  }

LABEL_4:
  sub_100019BC4(v34, (uint64_t)v33);
  sub_100019BC4((__int128 *)&v37, (uint64_t)&v29);
  uint64_t v11 = sub_1000EB43C(v33);
  uint64_t v13 = v12;
  uint64_t v15 = v31;
  uint64_t v14 = v32;
  sub_100019AFC(&v29, v31);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)(v14 + 8) + 8LL))(v15);
  BOOL v18 = v11 == v16 && v13 == v17;
  if (v18) {
    char v19 = 1;
  }
  else {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v16, v17, 0LL);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000108B8(&v29);
  sub_1000108B8(v33);
  sub_1000E638C(&v35);
  return v19 & 1;
}

uint64_t sub_1000EADF4(uint64_t a1)
{
  uint64_t v2 = sub_10000941C(&qword_1001D88F8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t ValueType.description.getter()
{
  if (!v20)
  {
    sub_100019BC4(&v19, (uint64_t)v16);
    _StringGuts.grow(_:)(38LL);
    uint64_t v4 = v17;
    uint64_t v3 = v18;
    sub_100019AFC(v16, v17);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 8) + 8LL))(v4);
    sub_1000325E4();
    uint64_t v15 = v5;
    v6._countAndFlagsBits = 0xD000000000000021LL;
    v6._object = (void *)0x8000000100172970LL;
    String.append(_:)(v6);
    v22._countAndFlagsBits = sub_1000EB43C(v16);
    sub_1000EB478(v22);
    sub_1000325E4();
    uint64_t v1 = 41LL;
    unint64_t v2 = 0xE100000000000000LL;
    goto LABEL_5;
  }

  if (v20 == 1)
  {
    sub_100019BC4(&v19, (uint64_t)v16);
    _StringGuts.grow(_:)(20LL);
    swift_bridgeObjectRelease();
    uint64_t v15 = 0x206567617373656DLL;
    v21._countAndFlagsBits = sub_1000EB43C(v16);
    sub_1000EB478(v21);
    sub_1000325E4();
    uint64_t v1 = 0x616D6568637320LL;
    unint64_t v2 = 0xE700000000000000LL;
LABEL_5:
    String.append(_:)(*(Swift::String *)&v1);
    unint64_t v7 = v15;
    sub_1000108B8(v16);
    return v7;
  }

  unint64_t v7 = 0xD000000000000011LL;
  sub_1000EB484();
  if (v12)
  {
    uint64_t v13 = v11 | v9 | v10;
    if (v8 != 1 || v13)
    {
      if (v8 != 2 || v13)
      {
        if (v8 != 3 || v13)
        {
          if (v8 != 4 || v13)
          {
            if (v8 != 5 || v13)
            {
              if (v8 != 6 || v13)
              {
                if (v8 == 7 && v13 == 0) {
                  return 0x7274732074786574LL;
                }
                else {
                  return 0x64207972616E6962LL;
                }
              }

              else
              {
                return 0x6E61656C6F6F62LL;
              }
            }

            else
            {
              return 0xD000000000000015LL;
            }
          }

          else
          {
            return 0x676E6974616F6C66LL;
          }
        }

        else
        {
          return 0xD000000000000013LL;
        }
      }
    }

    else
    {
      return 0xD000000000000013LL;
    }
  }

  return v7;
}

void *destroy for ValueType(void *a1)
{
  unsigned int v1 = *((unsigned __int8 *)a1 + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 <= 1) {
    return (void *)sub_1000108B8(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for ValueType(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    __int128 v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 1;
  }

  else if (v3)
  {
    __int128 v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }

  else
  {
    __int128 v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }

  return a1;
}

uint64_t assignWithCopy for ValueType(uint64_t a1, __int128 *a2)
{
  if ((__int128 *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 <= 1) {
      sub_1000108B8((void *)a1);
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v7 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v7 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
    }

    else if (v5)
    {
      __int128 v8 = *a2;
      __int128 v9 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v9;
    }

    else
    {
      uint64_t v6 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }

  return a1;
}

__n128 initializeWithTake for ValueType(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ValueType(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 <= 1) {
      sub_1000108B8((void *)a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      __int128 v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v7;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = 1;
    }

    else
    {
      __int128 v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }

      else
      {
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(_BYTE *)(a1 + 40) = 0;
      }
    }
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for ValueType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for ValueType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + swift_weakDestroy(v0 + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 41) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 41) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 40) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000EB3E8(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  return result;
}

uint64_t sub_1000EB404(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 32) = 0LL;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + swift_weakDestroy(v0 + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ValueType()
{
  return &type metadata for ValueType;
}

uint64_t sub_1000EB43C(void *a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 8) + 8LL))(v1);
}

  ;
}

uint64_t sub_1000EB46C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  return sub_1000E6350((uint64_t)va1, (uint64_t)va);
}

void sub_1000EB478(Swift::String a1)
{
}

  ;
}

void destroy for AnyOption(uint64_t a1)
{
}

uint64_t _s11Schematizer9AnyOptionOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_1000E34EC(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AnyOption(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_1000E34EC(*(id *)a2, v4, v5);
  __int128 v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  sub_1000E3528(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AnyOption(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  sub_1000E3528(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyOption(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyOption(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000EB610(uint64_t result, char a2)
{
  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AnyOption()
{
  return &type metadata for AnyOption;
}

void sub_1000EB628(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

id sub_1000EB664( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  v26[3] = sub_100009788(0LL, &qword_1001D3170, &OBJC_CLASS___NSNumber_ptr);
  *int8x16_t v26 = a1;
  return a1;
}

uint64_t sub_1000EB6A8(uint64_t a1, uint64_t a2)
{
  v2[3] = &type metadata for String;
  *int v2 = a1;
  v2[1] = a2;
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1000EB6D8(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  unsigned int v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    __int128 v19 = _swiftEmptyArrayStorage;
    sub_10010A588(0LL, v2, 0);
    unsigned int v3 = _swiftEmptyArrayStorage;
    uint64_t v4 = a1 + 48;
    do
    {
      uint64_t v5 = (void *)sub_1000EC770();
      sub_1000E34EC(v5, v6, v7);
      uint64_t v8 = sub_1000EC770();
      sub_1000EB628(v8, v9, v10);
      uint64_t v11 = (void *)sub_1000EC770();
      sub_1000E3528(v11, v12, v13);
      __int128 v19 = v3;
      unint64_t v15 = v3[2];
      unint64_t v14 = v3[3];
      if (v15 >= v14 >> 1)
      {
        sub_10010A588((char *)(v14 > 1), v15 + 1, 1);
        unsigned int v3 = v19;
      }

      v4 += 24LL;
      v3[2] = v15 + 1;
      sub_1000108D8(&v18, &v3[4 * v15 + 4]);
      --v2;
    }

    while (v2);
  }

  uint64_t result = sub_10000941C(&qword_1001D16D0);
  v1[3] = result;
  *uint64_t v1 = v3;
  return result;
}

uint64_t sub_1000EB7E0(uint64_t a1)
{
  int64_t v2 = (void *)a1;
  sub_100010758(a1, (uint64_t)v70);
  uint64_t v3 = sub_100009788(0LL, &qword_1001D3170, &OBJC_CLASS___NSNumber_ptr);
  if (sub_1000EC740( (uint64_t)v68,  v4,  v5,  v3,  v6,  v7,  v8,  v9,  v51,  v55,  v59,  DynamicType,  v65,  v66,  v67,  v68[0])
    || sub_1000EC740( (uint64_t)v68,  v10,  v11,  (uint64_t)&type metadata for String,  v12,  v13,  v14,  v15,  v52,  v56,  v60,  DynamicType,  v65,  v66,  v67,  v68[0]))
  {
    sub_1000EC7A4();
  }

  else
  {
    uint64_t v16 = sub_10000941C(&qword_1001D16D0);
    if (sub_1000EC740( (uint64_t)&v71,  v17,  v18,  v16,  v19,  v20,  v21,  v22,  v53,  v57,  v61,  DynamicType,  v65,  v66,  v67,  v68[0]))
    {
      uint64_t v23 = v71;
      int64_t v24 = *(void *)(v71 + 16);
      if (v24)
      {
        v63 = v2;
        v69 = _swiftEmptyArrayStorage;
        sub_10010A5A4(0LL, v24, 0);
        uint64_t v25 = v23 + 32;
        while (1)
        {
          sub_100010758(v25, (uint64_t)v68);
          sub_100010758((uint64_t)v68, (uint64_t)&DynamicType);
          uint64_t v26 = sub_1000EB7E0(&DynamicType);
          uint64_t v28 = v27;
          char v30 = v29;
          sub_1000108B8(v68);
          if (v1) {
            break;
          }
          uint64_t v31 = v69;
          if ((swift_isUniquelyReferenced_nonNull_native(v69) & 1) == 0)
          {
            sub_10010A5A4(0LL, v31[2] + 1LL, 1);
            uint64_t v31 = v69;
          }

          unint64_t v33 = v31[2];
          unint64_t v32 = v31[3];
          if (v33 >= v32 >> 1)
          {
            sub_10010A5A4((void *)(v32 > 1), v33 + 1, 1);
            uint64_t v31 = v69;
          }

          v31[2] = v33 + 1;
          unint64_t v34 = &v31[3 * v33];
          v34[4] = v26;
          v34[5] = v28;
          *((_BYTE *)v34 + 48) = v30;
          v25 += 32LL;
          if (!--v24)
          {
            int64_t v2 = v63;
            goto LABEL_18;
          }
        }

        swift_release();
        sub_1000108B8(v63);
        swift_bridgeObjectRelease();
      }

      else
      {
LABEL_18:
        sub_1000108B8(v2);
        swift_bridgeObjectRelease();
      }
    }

    else
    {
      uint64_t v35 = sub_10000941C(qword_1001D1310);
      if (sub_1000EC740( (uint64_t)v68,  v36,  v37,  v35,  v38,  v39,  v40,  v41,  v54,  v58,  v62,  DynamicType,  v65,  v66,  v67,  v68[0]))
      {
        sub_1000EC4E8(v68[0]);
        sub_1000108B8(v2);
        swift_bridgeObjectRelease();
      }

      else
      {
        unint64_t v42 = sub_1000E43B4();
        swift_allocError(&type metadata for SchemaError, v42, 0LL, 0LL);
        uint64_t v44 = v43;
        v68[0] = 0LL;
        v68[1] = 0xE000000000000000LL;
        _StringGuts.grow(_:)(16LL);
        swift_bridgeObjectRelease();
        strcpy((char *)v68, "invalid type: ");
        HIBYTE(v68[1]) = -18;
        uint64_t v45 = v2[3];
        unint64_t v46 = sub_100019AFC(v2, v45);
        uint64_t DynamicType = swift_getDynamicType(v46, v45, 1LL);
        sub_10000941C(&qword_1001D16E8);
        v47._countAndFlagsBits = String.init<A>(describing:)(&DynamicType);
        String.append(_:)(v47);
        uint64_t v48 = swift_bridgeObjectRelease();
        uint64_t v49 = v68[1];
        *(void *)uint64_t v44 = v68[0];
        *(void *)(v44 + 8) = v49;
        *(_BYTE *)(v44 + 41) = 3;
        swift_willThrow(v48);
        sub_1000EC7A4();
      }
    }
  }

  sub_1000108B8(v70);
  return sub_1000EC770();
}

id sub_1000EBB28(void *a1)
{
  uint64_t v4 = sub_1000EC790();
  dispatch thunk of Decoder.singleValueContainer()(v4, v5);
  if (v2)
  {
    sub_1000108B8(a1);
  }

  else
  {
    sub_100019AFC(v8, v8[3]);
    uint64_t v6 = sub_1000EC790();
    id v1 = [objc_allocWithZone(NSNumber) initWithLongLong:dispatch thunk of SingleValueDecodingContainer.decode(_:)(v6)];
    sub_1000108B8(v8);
    sub_1000108B8(a1);
  }

  return v1;
}

void sub_1000EBCD4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }

void sub_1000EBD10()
{
}

void sub_1000EBDD4(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

uint64_t sub_1000EBE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6) {
    return 0LL;
  }
  sub_100009788(0LL, (unint64_t *)&qword_1001D6680, &OBJC_CLASS___NSObject_ptr);
  sub_1000EC7AC(v7);
  sub_1000E34EC(v6, v9, 0);
  char v10 = static NSObject.== infix(_:_:)(v7, v6);
  sub_1000E3628(v6, v9);
  sub_1000E3628(v7, v8);
  return v10 & 1;
}

id sub_1000EBF30@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result = sub_1000EBB28(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + swift_weakDestroy(v0 + 16) = v6;
  }

  return result;
}

void sub_1000EBF5C(uint64_t a1)
{
}

void sub_1000EBF78(uint64_t a1)
{
}

unint64_t sub_1000EBF94()
{
  unint64_t result = qword_1001D8908;
  if (!qword_1001D8908)
  {
    uint64_t v1 = sub_1000094A0(&qword_1001D8900);
    sub_1000EBFF8();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001D8908);
  }

  return result;
}

unint64_t sub_1000EBFF8()
{
  unint64_t result = qword_1001D8910;
  if (!qword_1001D8910)
  {
    unint64_t result = swift_getWitnessTable(&unk_100164A34, &type metadata for AnyOption);
    atomic_store(result, (unint64_t *)&qword_1001D8910);
  }

  return result;
}

unint64_t sub_1000EC034()
{
  unint64_t result = qword_1001D8920;
  if (!qword_1001D8920)
  {
    uint64_t v1 = sub_1000094A0(&qword_1001D8918);
    sub_1000EBFF8();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1001D8920);
  }

  return result;
}

unint64_t sub_1000EC0A0()
{
  unint64_t result = qword_1001D8928;
  if (!qword_1001D8928)
  {
    unint64_t result = swift_getWitnessTable(&unk_100164A0C, &type metadata for AnyOption);
    atomic_store(result, (unint64_t *)&qword_1001D8928);
  }

  return result;
}

uint64_t sub_1000EC0DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v2)
  {
    if (a1 != a2) {
      __asm { BR              X10 }
    }
  }

  return 1LL;
}

_OWORD *sub_1000EC2AC(uint64_t a1)
{
  unint64_t result = (_OWORD *)static _DictionaryStorage.copy(original:)(a1);
  uint64_t v3 = result;
  int64_t v4 = 0LL;
  uint64_t v31 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  uint64_t v8 = 1LL << *(_BYTE *)(v6 - 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & v5;
  uint64_t v27 = v6;
  int64_t v28 = (unint64_t)(v8 + 63) >> 6;
  char v29 = result + 4;
  if ((v9 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v31 + 48) + 16 * i);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    uint64_t v19 = *(void *)(v31 + 56) + 24 * i;
    uint64_t v20 = *(void **)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    char v22 = *(_BYTE *)(v19 + 16);
    swift_bridgeObjectRetain(v17);
    sub_1000E34EC(v20, v21, v22);
    sub_1000EB628((uint64_t)v20, v21, v22);
    sub_1000E3528(v20, v21, v22);
    *(void *)((char *)v29 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    uint64_t v23 = (void *)(v3[6] + 16 * i);
    *uint64_t v23 = v18;
    v23[1] = v17;
    unint64_t result = sub_1000108D8(&v30, (_OWORD *)(v3[7] + 32 * i));
    uint64_t v24 = v3[2];
    BOOL v25 = __OFADD__(v24, 1LL);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    v3[2] = v26;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      goto LABEL_24;
    }
    if (v13 >= v28) {
      return v3;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v28) {
        return v3;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v28) {
          return v3;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }

uint64_t sub_1000EC4E8(uint64_t a1)
{
  uint64_t result = static _DictionaryStorage.copy(original:)(a1);
  int64_t v4 = 0LL;
  uint64_t v31 = a1;
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v28 = a1 + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & v5;
  int64_t v29 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v30 = result + 64;
  uint64_t v34 = result;
  if ((v7 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v9 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v4 << 6))
  {
    unint64_t v14 = (uint64_t *)(*(void *)(v31 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    sub_100010758(*(void *)(v31 + 56) + 32 * i, (uint64_t)v33);
    sub_100010758((uint64_t)v33, (uint64_t)v32);
    swift_bridgeObjectRetain(v16);
    uint64_t v17 = sub_1000EB7E0((uint64_t)v32);
    if (v1)
    {
      swift_bridgeObjectRelease();
      uint64_t v27 = v34;
      swift_release();
      sub_1000108B8(v33);
      return v27;
    }

    uint64_t v20 = v17;
    uint64_t v21 = v18;
    char v22 = v19;
    sub_1000108B8(v33);
    *(void *)(v30 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    uint64_t result = v34;
    uint64_t v23 = (void *)(*(void *)(v34 + 48) + 16 * i);
    *uint64_t v23 = v15;
    v23[1] = v16;
    uint64_t v24 = *(void *)(result + 56) + 24 * i;
    *(void *)uint64_t v24 = v20;
    *(void *)(v24 + 8) = v21;
    *(_BYTE *)(v24 + swift_weakDestroy(v0 + 16) = v22;
    uint64_t v25 = *(void *)(result + 16);
    BOOL v11 = __OFADD__(v25, 1LL);
    uint64_t v26 = v25 + 1;
    if (v11)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }

    *(void *)(result + swift_weakDestroy(v0 + 16) = v26;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v11 = __OFADD__(v4++, 1LL);
    if (v11) {
      goto LABEL_27;
    }
    if (v4 >= v29) {
      return result;
    }
    unint64_t v12 = *(void *)(v28 + 8 * v4);
    if (!v12) {
      break;
    }
LABEL_15:
    unint64_t v8 = (v12 - 1) & v12;
  }

  int64_t v13 = v4 + 1;
  if (v4 + 1 >= v29) {
    return result;
  }
  unint64_t v12 = *(void *)(v28 + 8 * v13);
  if (v12) {
    goto LABEL_14;
  }
  int64_t v13 = v4 + 2;
  if (v4 + 2 >= v29) {
    return result;
  }
  unint64_t v12 = *(void *)(v28 + 8 * v13);
  if (v12) {
    goto LABEL_14;
  }
  int64_t v13 = v4 + 3;
  if (v4 + 3 >= v29) {
    return result;
  }
  unint64_t v12 = *(void *)(v28 + 8 * v13);
  if (v12)
  {
LABEL_14:
    int64_t v4 = v13;
    goto LABEL_15;
  }

  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v4 >= v29) {
      return result;
    }
    unint64_t v12 = *(void *)(v28 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_15;
    }
  }

uint64_t sub_1000EC740( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  return swift_dynamicCast(a1, va, v16, a4, 0LL);
}

uint64_t sub_1000EC750(uint64_t a1)
{
  return dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)(v3, v3, a1, v1, v2);
}

uint64_t sub_1000EC770()
{
  return v0;
}

uint64_t sub_1000EC780()
{
  return v0;
}

uint64_t sub_1000EC790()
{
  return v0;
}

uint64_t sub_1000EC7A4()
{
  return sub_1000108B8(v0);
}

id sub_1000EC7AC(void *a1)
{
  return sub_1000E34EC(a1, v1, 0);
}

uint64_t sub_1000EC7B8( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(void *, uint64_t, uint64_t), uint64_t *a6, void (*a7)(void *__return_ptr, uint64_t, uint64_t))
{
  if (*(void *)(a1 + 24))
  {
    a4();
    a5(v13, a2, a3);
    return sub_1000325E4();
  }

  else
  {
    sub_100014358(a1, a6);
    a7(v13, a2, a3);
    sub_1000325E4();
    return sub_100014358((uint64_t)v13, a6);
  }

void sub_1000EC84C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10010A56C(0LL, v1, 0);
    uint64_t v3 = sub_1000EEE40(a1);
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      unint64_t v5 = v3;
      if (v3 < 1LL << *(_BYTE *)(a1 + 32))
      {
        uint64_t v6 = a1 + 64;
        uint64_t v16 = a1 + 64;
        while ((*(void *)(v6 + 8 * (v5 >> 6)) & (1LL << v5)) != 0)
        {
          if (v4 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_18;
          }
          int64_t v17 = v1;
          int v18 = v4;
          uint64_t v7 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v5);
          uint64_t v8 = v7[1];
          uint64_t v19 = *v7;
          uint64_t v9 = *(void *)(a1 + 56) + 40 * v5;
          uint64_t v10 = *(void *)(v9 + 16);
          uint64_t v22 = *(void *)(v9 + 24);
          uint64_t v23 = *(void *)(v9 + 8);
          char v20 = *(_BYTE *)v9;
          char v21 = *(_BYTE *)(v9 + 32);
          unint64_t v12 = _swiftEmptyArrayStorage[2];
          unint64_t v11 = _swiftEmptyArrayStorage[3];
          swift_bridgeObjectRetain(v8);
          swift_bridgeObjectRetain(v10);
          if (v12 >= v11 >> 1) {
            sub_10010A56C((char *)(v11 > 1), v12 + 1, 1);
          }
          _swiftEmptyArrayStorage[2] = v12 + 1;
          int64_t v13 = &_swiftEmptyArrayStorage[7 * v12];
          v13[4] = v19;
          void v13[5] = v8;
          *((_BYTE *)v13 + 48) = v20;
          v13[7] = v23;
          v13[8] = v10;
          v13[9] = v22;
          *((_BYTE *)v13 + 8sub_1000E3528(v0, v2, 0) = v21;
          uint64_t v14 = -1LL << *(_BYTE *)(a1 + 32);
          uint64_t v6 = a1 + 64;
          if ((*(void *)(v16 + 8 * (v5 >> 6)) & (1LL << v5)) == 0) {
            goto LABEL_20;
          }
          if (v18 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_21;
          }
          uint64_t v15 = _HashTable.occupiedBucket(after:)(v5, v16, ~v14);
          --v1;
          if (v17 == 1) {
            return;
          }
          unint64_t v5 = v15;
          if ((v15 & 0x8000000000000000LL) == 0)
          {
            int v4 = *(_DWORD *)(a1 + 36);
            if (v15 < 1LL << *(_BYTE *)(a1 + 32)) {
              continue;
            }
          }

          goto LABEL_22;
        }

        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }

uint64_t sub_1000ECA54()
{
  uint64_t v2 = *(void **)(v0 + 80);
  if (v2)
  {
    sub_1000145F8();
    return (uint64_t)v2;
  }

  sub_1000ECE64();
  if (v1) {
    return (uint64_t)v2;
  }
  sub_1000A14F8(v0 + 72, (uint64_t)v49);
  uint64_t v35 = v0;
  sub_100047294();
  uint64_t v3 = sub_10000941C(&qword_1001D8B00);
  uint64_t v2 = (void *)Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for Int,  v3,  &protocol witness table for Int);
  sub_1000D1AEC(v50);
  uint64_t v38 = v50[0];
  int64_t v39 = v50[3];
  unint64_t v4 = v50[4];
  uint64_t v36 = v50[1];
  int64_t v37 = (unint64_t)(v50[2] + 64LL) >> 6;
  sub_100047294();
  if (!v4) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v5 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  unint64_t v6 = v5 | (v39 << 6);
  while (1)
  {
    int64_t v13 = (uint64_t *)(*(void *)(v38 + 48) + 16 * v6);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    sub_100019B20(*(void *)(v38 + 56) + 40 * v6, (uint64_t)&v46);
    *(void *)&__int128 v45 = v15;
    *((void *)&v45 + 1) = v14;
    v43[0] = v46;
    v43[1] = v47;
    __int128 v42 = v45;
    uint64_t v16 = v48;
    uint64_t v44 = v48;
    sub_100019AFC(v43, *((uint64_t *)&v47 + 1));
    int64_t v17 = *(uint64_t (**)(uint64_t))(v16 + 32);
    sub_100047294();
    uint64_t v18 = sub_10005A464();
    uint64_t v19 = v17(v18);
    *(_OWORD *)&v40[5] = v42;
    sub_100019B20((uint64_t)v43, (uint64_t)v41);
    sub_100019BC4(v41, (uint64_t)v40);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    uint64_t v51 = v2;
    unint64_t v21 = sub_10000ED7C(v19);
    uint64_t v23 = v2[2];
    BOOL v24 = (v22 & 1) == 0;
    Swift::Int v25 = v23 + v24;
    if (__OFADD__(v23, v24)) {
      break;
    }
    unint64_t v26 = v21;
    char v27 = v22;
    sub_10000941C(&qword_1001D8B10);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v25))
    {
      unint64_t v28 = sub_10000ED7C(v19);
      if ((v27 & 1) != (v29 & 1)) {
        goto LABEL_44;
      }
      unint64_t v26 = v28;
    }

    uint64_t v2 = v51;
    if ((v27 & 1) != 0)
    {
      uint64_t v30 = (void *)(v51[7] + 40 * v26);
      sub_1000108B8(v30);
      sub_100019BC4((__int128 *)v40, (uint64_t)v30);
    }

    else
    {
      v51[(v26 >> 6) + 8] |= 1LL << v26;
      *(void *)(v2[6] + 8 * v26) = v19;
      sub_100019BC4((__int128 *)v40, v2[7] + 40 * v26);
      uint64_t v31 = v2[2];
      BOOL v10 = __OFADD__(v31, 1LL);
      uint64_t v32 = v31 + 1;
      if (v10) {
        goto LABEL_42;
      }
      v2[2] = v32;
    }

    swift_bridgeObjectRelease();
    sub_100014358((uint64_t)&v42, &qword_1001D8B08);
    if (v4) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v7 = v39 + 1;
    if (__OFADD__(v39, 1LL)) {
      goto LABEL_43;
    }
    if (v7 >= v37) {
      goto LABEL_40;
    }
    unint64_t v8 = *(void *)(v36 + 8 * v7);
    if (!v8)
    {
      sub_1000EEEDC();
      if (v9 == v10) {
        goto LABEL_40;
      }
      sub_1000EEED0();
      if (v8) {
        goto LABEL_21;
      }
      sub_1000EEEDC();
      if (v9 == v10) {
        goto LABEL_40;
      }
      sub_1000EEED0();
      if (v8) {
        goto LABEL_21;
      }
      sub_1000EEEDC();
      if (v9 == v10) {
        goto LABEL_40;
      }
      sub_1000EEED0();
      if (v8) {
        goto LABEL_21;
      }
      sub_1000EEEDC();
      if (v9 == v10) {
        goto LABEL_40;
      }
      sub_1000EEED0();
      if (v8)
      {
LABEL_21:
        int64_t v7 = v11;
      }

      else
      {
        int64_t v7 = v12 + 5;
        if (v7 >= v37) {
          goto LABEL_40;
        }
        unint64_t v8 = *(void *)(v36 + 8 * v7);
        if (!v8)
        {
          int64_t v33 = v39 + 7;
          while (v33 < v37)
          {
            unint64_t v8 = *(void *)(v36 + 8 * v33++);
            if (v8)
            {
              int64_t v7 = v33 - 1;
              goto LABEL_22;
            }
          }

uint64_t sub_1000ECE64()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0 + 96;
  for (uint64_t result = sub_1000A14F8(v0 + 96, (uint64_t)v18); ; uint64_t result = sub_10001460C())
  {
    unint64_t v5 = *(void **)v3;
    unint64_t v6 = *(void *)(*(void *)v3 + 64LL);
    char v7 = *(_BYTE *)(*(void *)v3 + 32LL);
    uint64_t v8 = 1LL << v7;
    if (v6)
    {
      uint64_t v9 = 0LL;
      goto LABEL_14;
    }

    unsigned int v10 = v7 & 0x3F;
    if (v10 < 7) {
      return result;
    }
    unint64_t v6 = v5[9];
    if (v6)
    {
      uint64_t v9 = 1LL;
      goto LABEL_14;
    }

    if (v10 < 8) {
      return result;
    }
    unint64_t v6 = v5[10];
    if (!v6) {
      break;
    }
    uint64_t v9 = 2LL;
LABEL_14:
    unint64_t v12 = __clz(__rbit64(v6));
    uint64_t v13 = v12 + (v9 << 6);
    if (v13 == v8) {
      return result;
    }
    if (v13 < 0 || v13 >= v8)
    {
      __break(1u);
LABEL_23:
      __break(1u);
      return result;
    }

    uint64_t v14 = (uint64_t *)(v5[6] + 16 * v13);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    sub_10005A62C();
    sub_1000ED380(v15, v16, v17);
    if (v2) {
      return sub_10001460C();
    }
    sub_1000108B8(v17);
  }

  uint64_t v11 = 11LL;
  while (v11 - 8 < (unint64_t)(v8 + 63) >> 6)
  {
    unint64_t v6 = v5[v11++];
    if (v6)
    {
      uint64_t v9 = v11 - 9;
      goto LABEL_14;
    }
  }

  return result;
}

uint64_t sub_1000ECFA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = v7;
  v7[7] = 0LL;
  v7[8] = 0LL;
  sub_10000C4AC();
  uint64_t v13 = sub_10000941C(&qword_1001D8B00);
  v7[9] = sub_1000EEEC0(v13, v14, v13);
  v7[10] = 0LL;
  uint64_t v15 = sub_10000941C(&qword_1001D8B18);
  v7[11] = sub_1000EEEC0(v15, v16, v15);
  uint64_t v17 = sub_100010DFC();
  sub_1000EC84C(v17);
  uint64_t v19 = v18;
  sub_100010C70();
  uint64_t v56 = v19;
  sub_100047294();
  sub_1000EDBF4( (uint64_t *)&v56,  (uint64_t (*)(uint64_t))sub_1000EEE2C,  (uint64_t (*)(void *))sub_1000EE2D0);
  if (v8)
  {
LABEL_33:
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }

  uint64_t v49 = a7;
  sub_100009B3C();
  char v20 = v56;
  uint64_t v21 = v56[2];
  uint64_t v50 = a4;
  uint64_t v51 = v9;
  if (v21)
  {
    uint64_t v54 = a5;
    uint64_t v56 = _swiftEmptyArrayStorage;
    sub_1000AFA34(0, v21, 0);
    char v22 = v56;
    uint64_t v23 = v20 + 5;
    do
    {
      uint64_t v25 = *(v23 - 1);
      uint64_t v24 = *v23;
      uint64_t v56 = v22;
      unint64_t v27 = v22[2];
      unint64_t v26 = v22[3];
      sub_100010DFC();
      if (v27 >= v26 >> 1)
      {
        sub_1000AFA34(v26 > 1, v27 + 1, 1);
        char v22 = v56;
      }

      v23 += 7;
      v22[2] = v27 + 1;
      unint64_t v28 = &v22[2 * v27];
      v28[4] = v25;
      v28[5] = v24;
      --v21;
    }

    while (v21);
    swift_release();
    a4 = v50;
    uint64_t v9 = v51;
    a5 = v54;
  }

  else
  {
    swift_release();
    char v22 = _swiftEmptyArrayStorage;
  }

  v9[5] = v22;
  v9[12] = a4;
  uint64_t v29 = *(void *)(a5 + 16);
  if (v29)
  {
    uint64_t v56 = _swiftEmptyArrayStorage;
    sub_100010DFC();
    sub_1000A2710();
    sub_1000AFA34(0, v29, 0);
    uint64_t v30 = v56;
    uint64_t v31 = sub_1000EEE40(a5);
    if (v31 < 0 || (unint64_t v33 = v31, v31 >= 1LL << *(_BYTE *)(a5 + 32)))
    {
LABEL_27:
      __break(1u);
    }

    else
    {
      int v34 = v32;
      uint64_t v35 = a5 + 64;
      uint64_t v52 = a5 + 64;
      while ((*(void *)(v35 + 8 * (v33 >> 6)) & (1LL << v33)) != 0)
      {
        if (v34 != *(_DWORD *)(a5 + 36)) {
          goto LABEL_29;
        }
        uint64_t v36 = (uint64_t *)(*(void *)(a5 + 48) + 16 * v33);
        uint64_t v53 = v29;
        uint64_t v55 = *v36;
        uint64_t v37 = v36[1];
        uint64_t v56 = v30;
        unint64_t v39 = v30[2];
        unint64_t v38 = v30[3];
        sub_1000145E8();
        if (v39 >= v38 >> 1)
        {
          sub_1000AFA34(v38 > 1, v39 + 1, 1);
          uint64_t v30 = v56;
        }

        v30[2] = v39 + 1;
        uint64_t v40 = &v30[2 * v39];
        v40[4] = v55;
        v40[5] = v37;
        uint64_t v41 = -1LL << *(_BYTE *)(a5 + 32);
        uint64_t v35 = a5 + 64;
        if ((*(void *)(v52 + 8 * (v33 >> 6)) & (1LL << v33)) == 0) {
          goto LABEL_31;
        }
        if (v34 != *(_DWORD *)(a5 + 36)) {
          goto LABEL_32;
        }
        uint64_t v42 = _HashTable.occupiedBucket(after:)(v33, v52, ~v41);
        uint64_t v29 = v53 - 1;
        if (v53 == 1)
        {
          sub_10003B8E8();
          uint64_t v9 = v51;
          goto LABEL_26;
        }

        unint64_t v33 = v42;
        if ((v42 & 0x8000000000000000LL) == 0)
        {
          int v34 = *(_DWORD *)(a5 + 36);
          if (v42 < 1LL << *(_BYTE *)(a5 + 32)) {
            continue;
          }
        }

        goto LABEL_27;
      }
    }

    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  sub_100010DFC();
  uint64_t v30 = _swiftEmptyArrayStorage;
LABEL_26:
  uint64_t v56 = v30;
  sub_100047294();
  sub_1000EDBF4( (uint64_t *)&v56,  (uint64_t (*)(uint64_t))sub_1000EEE18,  (uint64_t (*)(void *))sub_1000EDC6C);
  sub_100009B3C();
  v9[6] = v56;
  v9[13] = a5;
  sub_1000A2710();
  uint64_t v43 = sub_1000EC2AC(a3);
  sub_10003B8E8();
  sub_100010C70();
  swift_bridgeObjectRelease();
  v9[4] = v43;
  swift_release();
  v9[2] = a1;
  v9[3] = a2;
  v9[7] = a6;
  v9[8] = v49;
  swift_unknownObjectRelease();
  return (uint64_t)v9;
}

uint64_t sub_1000ED380@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v5 = v3;
  uint64_t v9 = (uint64_t)(v3 + 9);
  sub_1000A14F8((uint64_t)(v3 + 9), (uint64_t)v42);
  uint64_t v10 = v3[9];
  sub_1000145E8();
  sub_100047294();
  sub_1000FB528(&v40, a1, a2, v10);
  swift_bridgeObjectRelease();
  sub_100009B3C();
  if (v41)
  {
    sub_100019BC4(&v40, (uint64_t)&v43);
    return sub_100019BC4(&v43, (uint64_t)a3);
  }

  sub_100014358((uint64_t)&v40, &qword_1001D8AF0);
  uint64_t v12 = (uint64_t)(v5 + 12);
  sub_1000A14F8((uint64_t)(v5 + 12), (uint64_t)&v40);
  uint64_t v13 = v5[12];
  sub_1000145E8();
  sub_100047294();
  sub_1000FB52C(a1, a2, v13, (uint64_t)v46);
  swift_bridgeObjectRelease();
  sub_100009B3C();
  sub_1000EDB64((uint64_t)v46, (uint64_t)&v48);
  if ((void)v49 == 1LL)
  {
    unint64_t v14 = sub_1000E43B4();
    sub_100010EA0((uint64_t)&type metadata for SchemaError, v14);
    uint64_t v16 = v15;
    *(void *)&__int128 v43 = 0LL;
    *((void *)&v43 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(35LL);
    swift_bridgeObjectRelease();
    *(void *)&__int128 v43 = 0x2220616D65686353LL;
    *((void *)&v43 + 1) = 0xE800000000000000LL;
    uint64_t v17 = v5[2];
    uint64_t v18 = (void *)v5[3];
    sub_1000145F8();
    v19._countAndFlagsBits = v17;
    v19._object = v18;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._object = (void *)0x8000000100172AA0LL;
    v20._countAndFlagsBits = 0xD000000000000016LL;
    String.append(_:)(v20);
    v21._countAndFlagsBits = sub_10005A464();
    String.append(_:)(v21);
    v22._countAndFlagsBits = 34LL;
    v22._object = (void *)0xE100000000000000LL;
    String.append(_:)(v22);
    uint64_t v24 = *((void *)&v43 + 1);
    *(void *)uint64_t v16 = v43;
    *(void *)(v16 + 8) = v24;
    *(_BYTE *)(v16 + 41) = 4;
    return swift_willThrow(v23);
  }

  __int128 v51 = v48;
  __int128 v52 = v49;
  char v53 = v50;
  uint64_t v25 = v5[7];
  if (!v25)
  {
    sub_1000EDBAC(v46);
    unint64_t v32 = sub_1000E43B4();
    uint64_t v23 = sub_100010EA0((uint64_t)&type metadata for SchemaError, v32);
    *(_OWORD *)uint64_t v33 = 0u;
    *(_OWORD *)(v33 + swift_weakDestroy(v0 + 16) = 0u;
    *(_OWORD *)(v33 + 25) = 0u;
    *(_BYTE *)(v33 + 41) = 14;
    return swift_willThrow(v23);
  }

  uint64_t v54 = v5 + 7;
  uint64_t v26 = v5[8];
  uint64_t v27 = type metadata accessor for ProtoProperty();
  sub_100009ACC(v27, 89LL);
  swift_unknownObjectRetain_n(v25, 2LL);
  sub_1000145E8();
  uint64_t v28 = sub_10005A464();
  uint64_t v31 = sub_1000F4C50(v28, v29, v30, v25, v26);
  if (v4) {
    return swift_unknownObjectRelease();
  }
  uint64_t v34 = v31;
  uint64_t v44 = v27;
  __int128 v45 = &off_1001BA5C0;
  *(void *)&__int128 v43 = v31;
  sub_100010BE4(v9, (uint64_t)v39, 33LL);
  sub_1000145E8();
  sub_10000C4AC();
  sub_1000EC7B8( (uint64_t)&v43,  a1,  a2,  (void (*)(void))sub_100019BC4,  (void (*)(void *, uint64_t, uint64_t))sub_1000FBC80,  &qword_1001D8AF0,  (void (*)(void *__return_ptr, uint64_t, uint64_t))sub_1000FFE14);
  swift_endAccess(v39);
  sub_100010BE4(v12, (uint64_t)&v43, 33LL);
  uint64_t v35 = sub_10005A464();
  sub_1000FFCF0(v35, v36, v37);
  swift_endAccess(&v43);
  sub_1000EDBAC(v47);
  if (!*(void *)(*(void *)v12 + 16LL))
  {
    unint64_t v38 = v54;
    *uint64_t v54 = 0LL;
    v38[1] = 0LL;
    swift_unknownObjectRelease();
  }

  a3[3] = v27;
  a3[4] = (uint64_t)&off_1001BA5C0;
  uint64_t result = swift_unknownObjectRelease();
  *a3 = v34;
  return result;
}

void sub_1000ED6FC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = v3 + 88;
  sub_1000A14F8(v3 + 88, (uint64_t)v29);
  uint64_t v9 = *(void *)(v3 + 88);
  sub_10005A62C();
  sub_100010DFC();
  uint64_t v10 = sub_1000EEEE8();
  sub_1000FB528(v12, v10, v11, v9);
  sub_10001460C();
  sub_100010C70();
  if (v28)
  {
    sub_100019BC4(&v27, (uint64_t)&v30);
    sub_100019BC4(&v30, (uint64_t)a3);
  }

  else
  {
    sub_100014358((uint64_t)&v27, &qword_1001D8AE8);
    uint64_t v13 = v3 + 104;
    sub_1000A14F8(v3 + 104, (uint64_t)&v27);
    sub_10005A62C();
    sub_1000A2710();
    uint64_t v14 = sub_1000EEEE8();
    uint64_t v15 = sub_1000FB524(v14);
    sub_10001460C();
    sub_10003B8E8();
    if (v15)
    {
      uint64_t v16 = type metadata accessor for ProtoOneOf();
      sub_100009ACC(v16, 56LL);
      sub_10005A62C();
      uint64_t v17 = sub_1000EEEE8();
      sub_10010924C(v17, v18, v15);
      if (!v4)
      {
        uint64_t v20 = v19;
        uint64_t v31 = v16;
        unint64_t v32 = &off_1001BB610;
        *(void *)&__int128 v30 = v19;
        sub_100010BE4(v8, (uint64_t)v26, 33LL);
        sub_10005A62C();
        swift_retain(v20);
        sub_1000EC7B8( (uint64_t)&v30,  a1,  a2,  (void (*)(void))sub_100019BC4,  (void (*)(void *, uint64_t, uint64_t))sub_1000FBC8C,  &qword_1001D8AE8,  (void (*)(void *__return_ptr, uint64_t, uint64_t))sub_1000FFF40);
        swift_endAccess(v26);
        sub_100010BE4(v13, (uint64_t)&v30, 33LL);
        uint64_t v21 = sub_1000EEEE8();
        sub_1000FFE30(v21, v22);
        swift_endAccess(&v30);
        sub_100009B3C();
        a3[3] = v16;
        a3[4] = &off_1001BB610;
        *a3 = v20;
      }
    }

    else
    {
      unint64_t v23 = sub_1000E43B4();
      uint64_t v24 = sub_100010EA0((uint64_t)&type metadata for SchemaError, v23);
      *(void *)uint64_t v25 = 7LL;
      *(_OWORD *)(v25 + 8) = 0u;
      *(_OWORD *)(v25 + 24) = 0u;
      *(_WORD *)(v25 + 4sub_1000E3528(v0, v2, 0) = 3584;
      swift_willThrow(v24);
    }
  }

void *sub_1000ED914(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for ProtobufPayload();
  unint64_t v6 = (void *)sub_100009ACC(v5, 72LL);
  v6[5] = type metadata accessor for ProtoMessageSchema();
  v6[6] = &off_1001B9FB8;
  v6[2] = v2;
  v6[7] = a1;
  v6[8] = a2;
  sub_1000EDB24();
  sub_10000C4AC();
  uint64_t v7 = sub_10005A464();
  sub_100014244(v7, v8);
  return v6;
}

uint64_t sub_1000ED994()
{
  return swift_bridgeObjectRelease(v0[13]);
}

void *sub_1000ED9E8()
{
  return v0;
}

uint64_t sub_1000EDA4C()
{
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

uint64_t type metadata accessor for ProtoMessageSchema()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer18ProtoMessageSchema);
}

uint64_t sub_1000EDA8C()
{
  return swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 32LL));
}

uint64_t sub_1000EDA98()
{
  return swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 48LL));
}

uint64_t sub_1000EDAA4()
{
  return sub_1000ECA54();
}

uint64_t sub_1000EDAC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1000ED380(a1, a2, a3);
}

void sub_1000EDAE4(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

void *sub_1000EDB04(uint64_t a1, uint64_t a2)
{
  return sub_1000ED914(a1, a2);
}

unint64_t sub_1000EDB24()
{
  unint64_t result = qword_1001DA030;
  if (!qword_1001DA030)
  {
    uint64_t v1 = type metadata accessor for ProtobufPayload();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ProtobufPayload, v1);
    atomic_store(result, (unint64_t *)&qword_1001DA030);
  }

  return result;
}

uint64_t sub_1000EDB64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001D8AF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1000EDBAC(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1000EDBE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1) {
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

uint64_t sub_1000EDBF4(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void *))
{
  uint64_t v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v6 = a2(v6);
  }
  uint64_t v7 = *(void *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  uint64_t result = a3(v9);
  *a1 = v6;
  return result;
}

void sub_1000EDC6C(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        sub_1000EE964(0LL, v3, 1LL, a1);
      }
      return;
    }

    goto LABEL_144;
  }

  Swift::Int v5 = v4;
  sub_10010288C(v3 / 2);
  uint64_t v107 = v6;
  uint64_t v108 = v3;
  v109 = v7;
  v105 = a1;
  if (v3 <= 0)
  {
    v110 = (char *)_swiftEmptyArrayStorage;
    unint64_t v37 = _swiftEmptyArrayStorage[2];
LABEL_110:
    if (v37 < 2)
    {
LABEL_121:
      swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        *(void *)(v107 + swift_weakDestroy(v0 + 16) = 0LL;
        swift_bridgeObjectRelease();
        return;
      }

      goto LABEL_149;
    }

    uint64_t v96 = *v105;
    while (1)
    {
      unint64_t v97 = v37 - 2;
      if (v37 < 2) {
        break;
      }
      if (!v96) {
        goto LABEL_153;
      }
      v98 = v110;
      uint64_t v99 = *(void *)&v110[16 * v97 + 32];
      uint64_t v100 = *(void *)&v110[16 * v37 + 24];
      sub_1000EEAC4( (char *)(v96 + 16 * v99),  (char *)(v96 + 16LL * *(void *)&v110[16 * v37 + 16]),  v96 + 16 * v100,  v109);
      if (v1) {
        goto LABEL_106;
      }
      if (v100 < v99) {
        goto LABEL_139;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v110) & 1) == 0)
      {
        sub_1000DD478((uint64_t)v110);
        v98 = v103;
      }

      if (v97 >= *((void *)v98 + 2)) {
        goto LABEL_140;
      }
      v101 = &v98[16 * v97 + 32];
      *(void *)v101 = v99;
      *((void *)v101 + 1) = v100;
      unint64_t v102 = *((void *)v98 + 2);
      if (v37 > v102) {
        goto LABEL_141;
      }
      memmove(&v98[16 * v37 + 16], &v98[16 * v37 + 32], 16 * (v102 - v37));
      v110 = v98;
      *((void *)v98 + 2) = v102 - 1;
      unint64_t v37 = v102 - 1;
      Swift::Int v3 = v108;
      if (v102 <= 2) {
        goto LABEL_121;
      }
    }

LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    return;
  }

  Swift::Int v106 = v5;
  Swift::Int v8 = 0LL;
  uint64_t v9 = *a1;
  uint64_t v104 = *a1 + 8;
  v110 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v10 = v8++;
    if (v8 >= v3) {
      goto LABEL_32;
    }
    uint64_t v11 = (uint64_t *)(v9 + 16 * v8);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    uint64_t v14 = (void *)(v9 + 16 * v10);
    uint64_t v15 = v14[1];
    if (v12 == *v14 && v13 == v15)
    {
      Swift::Int v18 = v10 + 2;
      if (v10 + 2 >= v3) {
        goto LABEL_31;
      }
      int v17 = 0;
LABEL_13:
      uint64_t v19 = (uint64_t *)(v104 + 16 * v18);
      do
      {
        uint64_t v20 = *(v19 - 1);
        uint64_t v21 = *v19;
        uint64_t v22 = (void *)(v9 + 16 * v8);
        uint64_t v23 = v22[1];
        if (v20 == *v22 && v21 == v23)
        {
          if ((v17 & 1) != 0) {
            goto LABEL_24;
          }
        }

        else if (((v17 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, *v22, v23, 1LL)) & 1) != 0)
        {
          goto LABEL_23;
        }

        v19 += 2;
        Swift::Int v25 = v18 + 1;
        Swift::Int v8 = v18;
        Swift::Int v18 = v25;
      }

      while (v25 < v3);
      Swift::Int v18 = v25;
      goto LABEL_23;
    }

    int v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, *v14, v15, 1LL);
    Swift::Int v18 = v10 + 2;
    if (v10 + 2 < v3) {
      goto LABEL_13;
    }
LABEL_23:
    Swift::Int v8 = v18;
    if ((v17 & 1) == 0) {
      goto LABEL_32;
    }
LABEL_24:
    if (v18 < v10) {
      goto LABEL_148;
    }
    if (v10 < v18)
    {
      uint64_t v26 = 16 * v18;
      uint64_t v27 = 16 * v10;
      Swift::Int v28 = v18;
      Swift::Int v29 = v10;
      do
      {
        if (v29 != --v28)
        {
          if (!v9) {
            goto LABEL_152;
          }
          uint64_t v30 = v9 + v26;
          uint64_t v31 = *(void *)(v9 + v27);
          uint64_t v32 = *(void *)(v9 + v27 + 8);
          *(_OWORD *)(v9 + v27) = *(_OWORD *)(v9 + v26 - 16);
          *(void *)(v30 - swift_weakDestroy(v0 + 16) = v31;
          *(void *)(v30 - 8) = v32;
        }

        ++v29;
        v26 -= 16LL;
        v27 += 16LL;
      }

      while (v29 < v28);
    }

LABEL_73:
    if ((v63 & 1) != 0) {
      goto LABEL_133;
    }
    uint64_t v71 = &v38[2 * v40];
    uint64_t v73 = *v71;
    uint64_t v72 = v71[1];
    BOOL v51 = __OFSUB__(v72, v73);
    uint64_t v74 = v72 - v73;
    if (v51) {
      goto LABEL_135;
    }
    if (v74 < v62) {
      goto LABEL_90;
    }
LABEL_81:
    unint64_t v79 = v40 - 1;
    if (v40 - 1 >= v37)
    {
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }

    if (!v9) {
      goto LABEL_151;
    }
    v80 = &v38[2 * v79];
    uint64_t v81 = *v80;
    v82 = &v38[2 * v40];
    uint64_t v83 = v82[1];
    sub_1000EEAC4((char *)(v9 + 16 * *v80), (char *)(v9 + 16LL * *v82), v9 + 16 * v83, v109);
    if (v1) {
      break;
    }
    if (v83 < v81) {
      goto LABEL_124;
    }
    if (v40 > *((void *)v110 + 2)) {
      goto LABEL_125;
    }
    uint64_t *v80 = v81;
    v38[2 * v79 + 1] = v83;
    unint64_t v84 = *((void *)v110 + 2);
    if (v40 >= v84) {
      goto LABEL_126;
    }
    uint64_t v34 = v110;
    unint64_t v37 = v84 - 1;
    memmove(&v38[2 * v40], v82 + 2, 16 * (v84 - 1 - v40));
    *((void *)v110 + 2) = v84 - 1;
    if (v84 <= 2) {
      goto LABEL_90;
    }
  }

LABEL_106:
  swift_bridgeObjectRelease();
  if (v108 < -1) {
    goto LABEL_145;
  }
  *(void *)(v107 + swift_weakDestroy(v0 + 16) = 0LL;
  swift_bridgeObjectRelease();
}

void sub_1000EE2D0(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        sub_1000EEA28(0LL, v3, 1LL, a1);
      }
      return;
    }

    goto LABEL_124;
  }

  Swift::Int v5 = v4;
  uint64_t v115 = v1;
  sub_1001028F8(v3 / 2);
  uint64_t v110 = v6;
  __dst = v7;
  uint64_t v112 = v3;
  uint64_t v108 = a1;
  if (v3 <= 0)
  {
    Swift::Int v10 = (char *)_swiftEmptyArrayStorage;
    unint64_t v47 = _swiftEmptyArrayStorage[2];
LABEL_90:
    unint64_t v97 = v10;
    if (v47 < 2)
    {
LABEL_101:
      swift_bridgeObjectRelease();
      if (v112 >= -1)
      {
        *(void *)(v110 + swift_weakDestroy(v0 + 16) = 0LL;
        swift_bridgeObjectRelease();
        return;
      }

      goto LABEL_129;
    }

    uint64_t v98 = *v108;
    while (1)
    {
      unint64_t v99 = v47 - 2;
      if (v47 < 2) {
        break;
      }
      if (!v98) {
        goto LABEL_133;
      }
      uint64_t v100 = (uint64_t)v97;
      uint64_t v101 = v97[2 * v99 + 4];
      uint64_t v102 = v97[2 * v47 + 3];
      sub_1000EEC68((char *)(v98 + 56 * v101), (char *)(v98 + 56LL * v97[2 * v47 + 2]), v98 + 56 * v102, __dst);
      if (v115) {
        goto LABEL_86;
      }
      if (v102 < v101) {
        goto LABEL_119;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v100) & 1) == 0)
      {
        sub_1000DD478(v100);
        uint64_t v100 = v105;
      }

      if (v99 >= *(void *)(v100 + 16)) {
        goto LABEL_120;
      }
      v103 = (void *)(v100 + 32 + 16 * v99);
      void *v103 = v101;
      v103[1] = v102;
      unint64_t v104 = *(void *)(v100 + 16);
      if (v47 > v104) {
        goto LABEL_121;
      }
      memmove((void *)(v100 + 32 + 16 * (v47 - 1)), (const void *)(v100 + 32 + 16 * v47), 16 * (v104 - v47));
      unint64_t v97 = (void *)v100;
      *(void *)(v100 + swift_weakDestroy(v0 + 16) = v104 - 1;
      unint64_t v47 = v104 - 1;
      if (v104 <= 2) {
        goto LABEL_101;
      }
    }

LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
    return;
  }

  Swift::Int v8 = 0LL;
  uint64_t v9 = *a1;
  uint64_t v109 = *a1 + 40;
  uint64_t v106 = *a1 - 56;
  uint64_t v107 = *a1 + 96;
  Swift::Int v10 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v111 = v5;
  uint64_t v113 = v9;
  while (1)
  {
    Swift::Int v11 = v8++;
    if (v8 < v3)
    {
      uint64_t v12 = *(void *)(v109 + 56 * v8);
      uint64_t v13 = *(void *)(v109 + 56 * v11);
      Swift::Int v8 = v11 + 2;
      if (v11 + 2 < v3)
      {
        uint64_t v14 = (void *)(v107 + 56 * v11);
        uint64_t v15 = v14;
        while (1)
        {
          uint64_t v16 = v15[7];
          v15 += 7;
          if (v12 < v13 == v16 >= *v14) {
            break;
          }
          ++v8;
          uint64_t v14 = v15;
          if (v8 >= v3)
          {
            Swift::Int v8 = v3;
            break;
          }
        }
      }

      if (v12 < v13)
      {
        if (v8 < v11) {
          goto LABEL_126;
        }
        if (v11 < v8)
        {
          uint64_t v17 = 56 * v8;
          Swift::Int v18 = v8;
          Swift::Int v19 = v11;
          uint64_t v20 = 56 * v11;
          do
          {
            if (v19 != --v18)
            {
              if (!v9) {
                goto LABEL_132;
              }
              uint64_t v21 = v9 + v20;
              uint64_t v22 = v9 + v17;
              uint64_t v23 = *(void *)(v9 + v20);
              uint64_t v24 = *(void *)(v9 + v20 + 8);
              char v25 = *(_BYTE *)(v9 + v20 + 16);
              uint64_t v26 = *(void *)(v9 + v20 + 40);
              char v27 = *(_BYTE *)(v9 + v20 + 48);
              __int128 v28 = *(_OWORD *)(v9 + v20 + 24);
              __int128 v29 = *(_OWORD *)(v9 + v17 - 40);
              __int128 v30 = *(_OWORD *)(v9 + v17 - 24);
              __int128 v31 = *(_OWORD *)(v9 + v17 - 56);
              *(void *)(v21 + 48) = *(void *)(v9 + v17 - 8);
              *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = v29;
              *(_OWORD *)(v21 + 32) = v30;
              *(_OWORD *)uint64_t v21 = v31;
              *(void *)(v22 - 56) = v23;
              *(void *)(v22 - 48) = v24;
              *(_BYTE *)(v22 - 4sub_1000E3528(v0, v2, 0) = v25;
              *(_OWORD *)(v22 - 32) = v28;
              *(void *)(v22 - swift_weakDestroy(v0 + 16) = v26;
              *(_BYTE *)(v22 - 8) = v27;
            }

            ++v19;
            v17 -= 56LL;
            v20 += 56LL;
          }

          while (v19 < v18);
        }
      }
    }

    if (v8 < v3)
    {
      if (__OFSUB__(v8, v11)) {
        goto LABEL_123;
      }
      if (v8 - v11 < v5)
      {
        Swift::Int v32 = v11 + v5;
        if (__OFADD__(v11, v5)) {
          goto LABEL_127;
        }
        if (v32 >= v3) {
          Swift::Int v32 = v3;
        }
        if (v32 < v11) {
          goto LABEL_128;
        }
        if (v8 != v32)
        {
          uint64_t v33 = v106 + 56 * v8;
          do
          {
            Swift::Int v34 = v11;
            uint64_t v35 = v33;
            do
            {
              uint64_t v36 = *(void *)(v35 + 96);
              if (v36 >= *(void *)(v35 + 40)) {
                break;
              }
              if (!v9) {
                goto LABEL_130;
              }
              uint64_t v37 = v35 + 56;
              uint64_t v39 = *(void *)(v35 + 56);
              uint64_t v38 = *(void *)(v35 + 64);
              char v40 = *(_BYTE *)(v35 + 72);
              char v41 = *(_BYTE *)(v35 + 104);
              __int128 v42 = *(_OWORD *)(v35 + 80);
              __int128 v43 = *(_OWORD *)(v35 + 16);
              uint64_t v44 = *(void *)(v35 + 48);
              *(_OWORD *)(v35 + 56) = *(_OWORD *)v35;
              *(_OWORD *)(v35 + 72) = v43;
              *(_OWORD *)(v35 + 88) = *(_OWORD *)(v35 + 32);
              *(void *)uint64_t v35 = v39;
              *(void *)(v35 + 8) = v38;
              *(_BYTE *)(v35 + swift_weakDestroy(v0 + 16) = v40;
              *(_OWORD *)(v35 + 24) = v42;
              *(void *)(v35 + 4sub_1000E3528(v0, v2, 0) = v36;
              *(_BYTE *)(v35 + 48) = v41;
              v35 -= 56LL;
              ++v34;
              *(void *)(v37 + 48) = v44;
            }

            while (v8 != v34);
            ++v8;
            v33 += 56LL;
          }

          while (v8 != v32);
          Swift::Int v8 = v32;
        }
      }
    }

    if (v8 < v11) {
      goto LABEL_122;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
    {
      sub_1000DD3BC(0, *((void *)v10 + 2) + 1LL, 1, v10);
      Swift::Int v10 = v95;
    }

    unint64_t v46 = *((void *)v10 + 2);
    unint64_t v45 = *((void *)v10 + 3);
    unint64_t v47 = v46 + 1;
    uint64_t v9 = v113;
    if (v46 >= v45 >> 1)
    {
      sub_1000DD3BC(v45 > 1, v46 + 1, 1, v10);
      uint64_t v9 = v113;
      Swift::Int v10 = v96;
    }

    *((void *)v10 + 2) = v47;
    uint64_t v48 = v10 + 32;
    uint64_t v49 = &v10[16 * v46 + 32];
    *(void *)uint64_t v49 = v11;
    *((void *)v49 + 1) = v8;
    if (v46) {
      break;
    }
    unint64_t v47 = 1LL;
LABEL_81:
    Swift::Int v5 = v111;
    Swift::Int v3 = v112;
    if (v8 >= v112) {
      goto LABEL_90;
    }
  }

  while (1)
  {
    unint64_t v50 = v47 - 1;
    if (v47 >= 4)
    {
      uint64_t v55 = &v48[2 * v47];
      uint64_t v56 = *(v55 - 8);
      uint64_t v57 = *(v55 - 7);
      BOOL v61 = __OFSUB__(v57, v56);
      uint64_t v58 = v57 - v56;
      if (v61) {
        goto LABEL_107;
      }
      uint64_t v60 = *(v55 - 6);
      uint64_t v59 = *(v55 - 5);
      BOOL v61 = __OFSUB__(v59, v60);
      uint64_t v53 = v59 - v60;
      char v54 = v61;
      if (v61) {
        goto LABEL_108;
      }
      unint64_t v62 = v47 - 2;
      char v63 = &v48[2 * v47 - 4];
      uint64_t v65 = *v63;
      uint64_t v64 = v63[1];
      BOOL v61 = __OFSUB__(v64, v65);
      uint64_t v66 = v64 - v65;
      if (v61) {
        goto LABEL_109;
      }
      BOOL v61 = __OFADD__(v53, v66);
      uint64_t v67 = v53 + v66;
      if (v61) {
        goto LABEL_111;
      }
      if (v67 >= v58)
      {
        v85 = &v48[2 * v50];
        uint64_t v87 = *v85;
        uint64_t v86 = v85[1];
        BOOL v61 = __OFSUB__(v86, v87);
        uint64_t v88 = v86 - v87;
        if (v61) {
          goto LABEL_117;
        }
        BOOL v78 = v53 < v88;
        goto LABEL_70;
      }
    }

    else
    {
      if (v47 != 3)
      {
        uint64_t v79 = *((void *)v10 + 4);
        uint64_t v80 = *((void *)v10 + 5);
        BOOL v61 = __OFSUB__(v80, v79);
        uint64_t v72 = v80 - v79;
        char v73 = v61;
        goto LABEL_64;
      }

      uint64_t v52 = *((void *)v10 + 4);
      uint64_t v51 = *((void *)v10 + 5);
      BOOL v61 = __OFSUB__(v51, v52);
      uint64_t v53 = v51 - v52;
      char v54 = v61;
    }

    if ((v54 & 1) != 0) {
      goto LABEL_110;
    }
    unint64_t v62 = v47 - 2;
    BOOL v68 = &v48[2 * v47 - 4];
    uint64_t v70 = *v68;
    uint64_t v69 = v68[1];
    BOOL v71 = __OFSUB__(v69, v70);
    uint64_t v72 = v69 - v70;
    char v73 = v71;
    if (v71) {
      goto LABEL_112;
    }
    uint64_t v74 = &v48[2 * v50];
    uint64_t v76 = *v74;
    uint64_t v75 = v74[1];
    BOOL v61 = __OFSUB__(v75, v76);
    uint64_t v77 = v75 - v76;
    if (v61) {
      goto LABEL_114;
    }
    if (__OFADD__(v72, v77)) {
      goto LABEL_116;
    }
    if (v72 + v77 >= v53)
    {
      BOOL v78 = v53 < v77;
LABEL_70:
      if (v78) {
        unint64_t v50 = v62;
      }
      goto LABEL_72;
    }

LABEL_64:
    if ((v73 & 1) != 0) {
      goto LABEL_113;
    }
    uint64_t v81 = &v48[2 * v50];
    uint64_t v83 = *v81;
    uint64_t v82 = v81[1];
    BOOL v61 = __OFSUB__(v82, v83);
    uint64_t v84 = v82 - v83;
    if (v61) {
      goto LABEL_115;
    }
    if (v84 < v72) {
      goto LABEL_81;
    }
LABEL_72:
    unint64_t v89 = v50 - 1;
    if (v50 - 1 >= v47)
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }

    if (!v9) {
      goto LABEL_131;
    }
    v90 = &v48[2 * v89];
    uint64_t v91 = *v90;
    uint64_t v92 = &v48[2 * v50];
    uint64_t v93 = v92[1];
    sub_1000EEC68((char *)(v9 + 56 * *v90), (char *)(v9 + 56LL * *v92), v9 + 56 * v93, __dst);
    if (v115) {
      break;
    }
    if (v93 < v91) {
      goto LABEL_104;
    }
    if (v50 > *((void *)v10 + 2)) {
      goto LABEL_105;
    }
    uint64_t *v90 = v91;
    v48[2 * v89 + 1] = v93;
    unint64_t v94 = *((void *)v10 + 2);
    if (v50 >= v94) {
      goto LABEL_106;
    }
    unint64_t v47 = v94 - 1;
    memmove(&v48[2 * v50], v92 + 2, 16 * (v94 - 1 - v50));
    *((void *)v10 + 2) = v94 - 1;
    uint64_t v9 = v113;
    if (v94 <= 2) {
      goto LABEL_81;
    }
  }

LABEL_86:
  swift_bridgeObjectRelease();
  if (v112 < -1) {
    goto LABEL_125;
  }
  *(void *)(v110 + swift_weakDestroy(v0 + 16) = 0LL;
  swift_bridgeObjectRelease();
}

uint64_t sub_1000EE964(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
    while (2)
    {
      uint64_t v9 = (uint64_t *)(v7 + 16 * v4);
      uint64_t result = *v9;
      uint64_t v10 = v9[1];
      uint64_t v11 = v6;
      uint64_t v12 = (uint64_t *)v8;
      do
      {
        uint64_t v13 = *(v12 - 2);
        uint64_t v14 = *(v12 - 1);
        if (result == v13 && v10 == v14) {
          break;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v13, v14, 1LL);
        if ((result & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return result;
        }

        uint64_t result = *v12;
        uint64_t v10 = v12[1];
        *(_OWORD *)uint64_t v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }

      while (v4 != v11);
      ++v4;
      v8 += 16LL;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }

  return result;
}

uint64_t sub_1000EEA28(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 56 * a3 - 56;
    while (2)
    {
      uint64_t v6 = result;
      uint64_t v7 = v5;
      do
      {
        uint64_t v8 = *(void *)(v7 + 96);
        if (v8 >= *(void *)(v7 + 40)) {
          break;
        }
        if (!v4)
        {
          __break(1u);
          return result;
        }

        uint64_t v9 = v7 + 56;
        uint64_t v11 = *(void *)(v7 + 56);
        uint64_t v10 = *(void *)(v7 + 64);
        char v12 = *(_BYTE *)(v7 + 72);
        char v13 = *(_BYTE *)(v7 + 104);
        __int128 v14 = *(_OWORD *)(v7 + 80);
        __int128 v15 = *(_OWORD *)(v7 + 16);
        uint64_t v16 = *(void *)(v7 + 48);
        *(_OWORD *)(v7 + 56) = *(_OWORD *)v7;
        *(_OWORD *)(v7 + 72) = v15;
        *(_OWORD *)(v7 + 88) = *(_OWORD *)(v7 + 32);
        *(void *)uint64_t v7 = v11;
        *(void *)(v7 + 8) = v10;
        *(_BYTE *)(v7 + swift_weakDestroy(v0 + 16) = v12;
        *(_OWORD *)(v7 + 24) = v14;
        *(void *)(v7 + 4sub_1000E3528(v0, v2, 0) = v8;
        *(_BYTE *)(v7 + 48) = v13;
        v7 -= 56LL;
        ++v6;
        *(void *)(v9 + 48) = v16;
      }

      while (a3 != v6);
      ++a3;
      v5 += 56LL;
      if (a3 != a2) {
        continue;
      }
      break;
    }
  }

  return result;
}

uint64_t sub_1000EEAC4(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 16;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 16;
  if (v9 >= v11)
  {
    sub_1000DAB2C(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    char v12 = &v4[16 * v11];
    if (v7 >= v6 || v10 < 16) {
      goto LABEL_47;
    }
    uint64_t v20 = (char *)(a3 - 16);
    while (1)
    {
      uint64_t v21 = v20 + 16;
      uint64_t v22 = *((void *)v12 - 2);
      uint64_t v23 = *((void *)v12 - 1);
      uint64_t v24 = v12 - 16;
      uint64_t v25 = *((void *)v6 - 2);
      uint64_t v26 = *((void *)v6 - 1);
      BOOL v27 = v22 == v25 && v23 == v26;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v25, v26, 1LL) & 1) == 0)
      {
        BOOL v29 = v21 != v12 || v20 >= v12;
        v12 -= 16;
        if (!v29) {
          goto LABEL_43;
        }
      }

      else
      {
        BOOL v28 = v21 != v6 || v20 >= v6;
        uint64_t v24 = v6 - 16;
        v6 -= 16;
        if (!v28) {
          goto LABEL_43;
        }
      }

      *(_OWORD *)uint64_t v20 = *(_OWORD *)v24;
LABEL_43:
      v20 -= 16;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_47;
      }
    }
  }

  sub_1000DAB2C(a1, (a2 - a1) / 16, a4);
  char v12 = &v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      uint64_t v14 = *((void *)v6 + 1);
      uint64_t v15 = *((void *)v4 + 1);
      BOOL v16 = *(void *)v6 == *(void *)v4 && v14 == v15;
      if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v6, v14, *(void *)v4, v15, 1LL) & 1) != 0) {
        break;
      }
      uint64_t v17 = v4;
      BOOL v16 = v7 == v4;
      v4 += 16;
      if (!v16) {
        goto LABEL_15;
      }
LABEL_16:
      v7 += 16;
    }

    uint64_t v17 = v6;
    BOOL v16 = v7 == v6;
    v6 += 16;
    if (v16) {
      goto LABEL_16;
    }
LABEL_15:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v17;
    goto LABEL_16;
  }

uint64_t sub_1000EEC68(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 56;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 56;
  if (v9 >= v11)
  {
    sub_1001097E8(a2, (uint64_t)(a3 - (void)a2) / 56, __dst);
    char v12 = &v4[56 * v11];
    if (v7 >= v6 || v10 < 56) {
      goto LABEL_41;
    }
    unint64_t v21 = a3 - 56;
    while (1)
    {
      uint64_t v22 = (char *)(v21 + 56);
      if (*((void *)v12 - 2) >= *((void *)v6 - 2))
      {
        uint64_t v23 = v12 - 56;
        BOOL v25 = v22 != v12 || v21 >= (unint64_t)v12;
        v12 -= 56;
        if (!v25) {
          goto LABEL_37;
        }
      }

      else
      {
        uint64_t v23 = v6 - 56;
        BOOL v24 = v22 != v6 || v21 >= (unint64_t)v6;
        v6 -= 56;
        if (!v24) {
          goto LABEL_37;
        }
      }

      __int128 v26 = *(_OWORD *)v23;
      __int128 v27 = *((_OWORD *)v23 + 1);
      __int128 v28 = *((_OWORD *)v23 + 2);
      *(void *)(v21 + 48) = *((void *)v23 + 6);
      *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = v27;
      *(_OWORD *)(v21 + 32) = v28;
      *(_OWORD *)unint64_t v21 = v26;
LABEL_37:
      v21 -= 56LL;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_41;
      }
    }
  }

  sub_1001097E8(__src, (a2 - __src) / 56, __dst);
  char v12 = &v4[56 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 56)
  {
    do
    {
      if (*((void *)v6 + 5) >= *((void *)v4 + 5))
      {
        BOOL v13 = v7 == v4;
        uint64_t v14 = v4;
        v4 += 56;
        if (v13 && v7 < v4) {
          goto LABEL_16;
        }
      }

      else
      {
        BOOL v13 = v7 == v6;
        uint64_t v14 = v6;
        v6 += 56;
        if (v13 && v7 < v6) {
          goto LABEL_16;
        }
      }

      __int128 v17 = *(_OWORD *)v14;
      __int128 v18 = *((_OWORD *)v14 + 1);
      __int128 v19 = *((_OWORD *)v14 + 2);
      *((void *)v7 + 6) = *((void *)v14 + 6);
      *((_OWORD *)v7 + 1) = v18;
      *((_OWORD *)v7 + 2) = v19;
      *(_OWORD *)uint64_t v7 = v17;
LABEL_16:
      v7 += 56;
    }

    while (v4 < v12 && (unint64_t)v6 < a3);
  }

  uint64_t v6 = v7;
LABEL_41:
  sub_1001097E8(v4, (v12 - v4) / 56, v6);
  return 1LL;
}

void sub_1000EEE18(uint64_t a1)
{
}

char *sub_1000EEE2C(uint64_t a1)
{
  return sub_10010A5C0(0LL, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_1000EEE40(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  uint64_t v2 = 64LL;
  for (uint64_t i = 10LL; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64LL;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_1000EEEC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Dictionary.init(dictionaryLiteral:)(v5, v3, a3, v4);
}

  ;
}

  ;
}

uint64_t sub_1000EEEE8()
{
  return v0;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PJSONFunction.perform(with:arguments:)( SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  if (*((void *)arguments._rawValue + 2))
  {
    uint64_t v4 = (sqlite3_value *)*((void *)arguments._rawValue + 4);
    BOOL v5 = SQLiteArgument.isNull.getter(v4);
    if (v5)
    {
      SQLiteContext.setNull()();
    }

    else
    {
      sub_1000E42D0(v5);
      if (!v2)
      {
        SQLiteBaseSchematizer.getSQLiteBridge()();
        uint64_t v7 = v6;
        uint64_t v9 = v8;
        swift_release();
        uint64_t ObjectType = swift_getObjectType(v7);
        uint64_t v11 = (*(uint64_t (**)(sqlite3_value *, uint64_t, uint64_t))(v9 + 24))(v4, ObjectType, v9);
        uint64_t v13 = v12;
        uint64_t v15 = v14;
        uint64_t v17 = v16;
        swift_unknownObjectRelease();
        sub_1000F71B0((uint64_t)with.context._rawValue, v11, v13, v15, v17);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }
    }
  }

  else
  {
    __break(1u);
  }

uint64_t type metadata accessor for PJSONFunction()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer13PJSONFunction);
}

uint64_t TagPathAndType.tagPath.getter()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t TagPathAndType.type.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E6350(v1 + 8, a1);
}

uint64_t TagPathAndType.type.setter(uint64_t a1)
{
  return sub_1000EF03C(a1, v1 + 8);
}

uint64_t sub_1000EF03C(uint64_t a1, uint64_t a2)
{
  return a2;
}

Swift::Void (__swiftcall *SchemaMismatchError.actual.modify())()
{
  return _CPStartNetworkSearchFeedback.redactUnused();
}

uint64_t TagPathAndType.init(tagPath:type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  return sub_1000EF098(a2, (uint64_t)(a3 + 1));
}

uint64_t sub_1000EF098(uint64_t a1, uint64_t a2)
{
  return a2;
}

ValueMetadata *type metadata accessor for TagPathComponent()
{
  return &type metadata for TagPathComponent;
}

uint64_t destroy for TagPathAndType(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for TagPathAndType(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  BOOL v5 = a2 + 1;
  int v6 = *((unsigned __int8 *)a2 + 48);
  swift_bridgeObjectRetain(v4);
  if (v6 == 1)
  {
    __int128 v8 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v8;
    (**(void (***)(uint64_t, _OWORD *))(v8 - 8))(a1 + 8, v5);
    *(_BYTE *)(a1 + 48) = 1;
  }

  else if (v6)
  {
    __int128 v9 = v5[1];
    *(_OWORD *)(a1 + 8) = *v5;
    *(_OWORD *)(a1 + 24) = v9;
    *(_OWORD *)(a1 + 33) = *(_OWORD *)((char *)v5 + 25);
  }

  else
  {
    __int128 v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v7;
    (**(void (***)(uint64_t, _OWORD *))(v7 - 8))(a1 + 8, v5);
    *(_BYTE *)(a1 + 48) = 0;
  }

  return a1;
}

uint64_t assignWithCopy for TagPathAndType(uint64_t a1, uint64_t *a2)
{
  BOOL v5 = (__int128 *)(a2 + 1);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  if ((uint64_t *)a1 != a2)
  {
    sub_1000E638C((void *)(a1 + 8));
    if (*((_BYTE *)a2 + 48) == 1)
    {
      uint64_t v7 = a2[4];
      *(void *)(a1 + 32) = v7;
      *(void *)(a1 + 4sub_1000E3528(v0, v2, 0) = a2[5];
      (**(void (***)(uint64_t, __int128 *))(v7 - 8))(a1 + 8, v5);
      *(_BYTE *)(a1 + 48) = 1;
    }

    else if (*((_BYTE *)a2 + 48))
    {
      __int128 v8 = *v5;
      __int128 v9 = v5[1];
      *(_OWORD *)(a1 + 33) = *(__int128 *)((char *)v5 + 25);
      *(_OWORD *)(a1 + 8) = v8;
      *(_OWORD *)(a1 + 24) = v9;
    }

    else
    {
      uint64_t v6 = a2[4];
      *(void *)(a1 + 32) = v6;
      *(void *)(a1 + 4sub_1000E3528(v0, v2, 0) = a2[5];
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1 + 8, v5);
      *(_BYTE *)(a1 + 48) = 0;
    }
  }

  return a1;
}

__n128 initializeWithTake for TagPathAndType(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TagPathAndType(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_1000E638C((void *)(a1 + 8));
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for TagPathAndType(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 49))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TagPathAndType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 4sub_1000E3528(v0, v2, 0) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 49) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for TagPathAndType()
{
  return &type metadata for TagPathAndType;
}

uint64_t destroy for SchemaError(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 41);
  if (v1 >= 0xE) {
    unsigned int v1 = *(_DWORD *)result + 14;
  }
  switch(v1)
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 0xCu:
    case 0xDu:
      __n128 result = swift_bridgeObjectRelease();
      break;
    case 6u:
      unsigned int v2 = *(unsigned __int8 *)(result + 40);
      if (v2 >= 2) {
        unsigned int v2 = *(_DWORD *)result + 2;
      }
      if (v2 <= 1) {
        goto LABEL_8;
      }
      break;
    case 7u:
      unsigned int v3 = *(unsigned __int8 *)(result + 40);
      if (v3 >= 2) {
        unsigned int v3 = *(_DWORD *)result + 2;
      }
      if (v3 <= 1) {
        goto LABEL_8;
      }
      break;
    case 8u:
      unsigned int v4 = *(unsigned __int8 *)(result + 40);
      if (v4 >= 2) {
        unsigned int v4 = *(_DWORD *)result + 2;
      }
      if (v4 <= 1) {
        goto LABEL_8;
      }
      break;
    case 9u:
      unsigned int v5 = *(unsigned __int8 *)(result + 40);
      if (v5 >= 2) {
        unsigned int v5 = *(_DWORD *)result + 2;
      }
      if (v5 <= 1) {
        goto LABEL_8;
      }
      break;
    case 0xAu:
      unsigned int v6 = *(unsigned __int8 *)(result + 40);
      if (v6 >= 2) {
        unsigned int v6 = *(_DWORD *)result + 2;
      }
      if (v6 <= 1) {
        goto LABEL_8;
      }
      break;
    case 0xBu:
      unsigned int v7 = *(unsigned __int8 *)(result + 40);
      if (v7 >= 2) {
        unsigned int v7 = *(_DWORD *)result + 2;
      }
      if (v7 <= 1) {
LABEL_8:
      }
        __n128 result = sub_1000108B8((void *)result);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t initializeWithCopy for SchemaError(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 41);
  if (v3 >= 0xE) {
    unsigned int v3 = *(_DWORD *)a2 + 14;
  }
  switch(v3)
  {
    case 0u:
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      *(_BYTE *)(a1 + 41) = 0;
      goto LABEL_43;
    case 1u:
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      char v5 = 1;
      goto LABEL_42;
    case 2u:
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      char v5 = 2;
      goto LABEL_42;
    case 3u:
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      char v5 = 3;
      goto LABEL_42;
    case 4u:
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      char v5 = 4;
      goto LABEL_42;
    case 5u:
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      char v5 = 5;
      goto LABEL_42;
    case 6u:
      unsigned int v6 = *(unsigned __int8 *)(a2 + 40);
      if (v6 >= 2) {
        unsigned int v6 = *(_DWORD *)a2 + 2;
      }
      if (v6 == 1)
      {
        __int128 v19 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v19;
        (**(void (***)(uint64_t))(v19 - 8))(a1);
        *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
      }

      else if (v6)
      {
        __int128 v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v20;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }

      else
      {
        __int128 v7 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v7;
        (**(void (***)(uint64_t))(v7 - 8))(a1);
        *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
      }

      char v21 = 6;
      goto LABEL_63;
    case 7u:
      unsigned int v8 = *(unsigned __int8 *)(a2 + 40);
      if (v8 >= 2) {
        unsigned int v8 = *(_DWORD *)a2 + 2;
      }
      if (v8 == 1)
      {
        __int128 v22 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v22;
        (**(void (***)(uint64_t))(v22 - 8))(a1);
        *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
      }

      else if (v8)
      {
        __int128 v23 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v23;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }

      else
      {
        __int128 v9 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v9;
        (**(void (***)(uint64_t))(v9 - 8))(a1);
        *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
      }

      char v21 = 7;
      goto LABEL_63;
    case 8u:
      unsigned int v10 = *(unsigned __int8 *)(a2 + 40);
      if (v10 >= 2) {
        unsigned int v10 = *(_DWORD *)a2 + 2;
      }
      if (v10 == 1)
      {
        __int128 v24 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v24;
        (**(void (***)(uint64_t))(v24 - 8))(a1);
        *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
      }

      else if (v10)
      {
        __int128 v31 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v31;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }

      else
      {
        __int128 v11 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v11;
        (**(void (***)(uint64_t))(v11 - 8))(a1);
        *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
      }

      char v21 = 8;
      goto LABEL_63;
    case 9u:
      unsigned int v12 = *(unsigned __int8 *)(a2 + 40);
      if (v12 >= 2) {
        unsigned int v12 = *(_DWORD *)a2 + 2;
      }
      if (v12 == 1)
      {
        __int128 v25 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v25;
        (**(void (***)(uint64_t))(v25 - 8))(a1);
        *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
      }

      else if (v12)
      {
        __int128 v26 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v26;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }

      else
      {
        __int128 v13 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v13;
        (**(void (***)(uint64_t))(v13 - 8))(a1);
        *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
      }

      char v21 = 9;
      goto LABEL_63;
    case 0xAu:
      unsigned int v14 = *(unsigned __int8 *)(a2 + 40);
      if (v14 >= 2) {
        unsigned int v14 = *(_DWORD *)a2 + 2;
      }
      if (v14 == 1)
      {
        __int128 v27 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v27;
        (**(void (***)(uint64_t))(v27 - 8))(a1);
        *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
      }

      else if (v14)
      {
        __int128 v28 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v28;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }

      else
      {
        __int128 v15 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v15;
        (**(void (***)(uint64_t))(v15 - 8))(a1);
        *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
      }

      char v21 = 10;
      goto LABEL_63;
    case 0xBu:
      unsigned int v16 = *(unsigned __int8 *)(a2 + 40);
      if (v16 >= 2) {
        unsigned int v16 = *(_DWORD *)a2 + 2;
      }
      if (v16 == 1)
      {
        __int128 v29 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v29;
        (**(void (***)(uint64_t))(v29 - 8))(a1);
        *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
      }

      else if (v16)
      {
        __int128 v30 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v30;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }

      else
      {
        __int128 v17 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v17;
        (**(void (***)(uint64_t))(v17 - 8))(a1);
        *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
      }

      char v21 = 11;
LABEL_63:
      *(_BYTE *)(a1 + 41) = v21;
      return a1;
    case 0xCu:
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      char v5 = 12;
      goto LABEL_42;
    case 0xDu:
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      char v5 = 13;
LABEL_42:
      *(_BYTE *)(a1 + 41) = v5;
LABEL_43:
      swift_bridgeObjectRetain(v4);
      break;
    default:
      __int128 v18 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v18;
      *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
      break;
  }

  return a1;
}

uint64_t assignWithCopy for SchemaError(uint64_t a1, __int128 *a2)
{
  if ((__int128 *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 0xE) {
      unsigned int v4 = *(_DWORD *)a1 + 14;
    }
    switch(v4)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 0xCu:
      case 0xDu:
        swift_bridgeObjectRelease();
        break;
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
        unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
        if (v5 >= 2) {
          unsigned int v5 = *(_DWORD *)a1 + 2;
        }
        if (v5 <= 1) {
          sub_1000108B8((void *)a1);
        }
        break;
      default:
        break;
    }

    unsigned int v6 = *((unsigned __int8 *)a2 + 41);
    if (v6 >= 0xE) {
      unsigned int v6 = *(_DWORD *)a2 + 14;
    }
    switch(v6)
    {
      case 0u:
        *(void *)a1 = *(void *)a2;
        uint64_t v7 = *((void *)a2 + 1);
        *(void *)(a1 + 8) = v7;
        *(_BYTE *)(a1 + 41) = 0;
        goto LABEL_52;
      case 1u:
        *(void *)a1 = *(void *)a2;
        uint64_t v7 = *((void *)a2 + 1);
        *(void *)(a1 + 8) = v7;
        char v8 = 1;
        goto LABEL_51;
      case 2u:
        *(void *)a1 = *(void *)a2;
        uint64_t v7 = *((void *)a2 + 1);
        *(void *)(a1 + 8) = v7;
        char v8 = 2;
        goto LABEL_51;
      case 3u:
        *(void *)a1 = *(void *)a2;
        uint64_t v7 = *((void *)a2 + 1);
        *(void *)(a1 + 8) = v7;
        char v8 = 3;
        goto LABEL_51;
      case 4u:
        *(void *)a1 = *(void *)a2;
        uint64_t v7 = *((void *)a2 + 1);
        *(void *)(a1 + 8) = v7;
        char v8 = 4;
        goto LABEL_51;
      case 5u:
        *(void *)a1 = *(void *)a2;
        uint64_t v7 = *((void *)a2 + 1);
        *(void *)(a1 + 8) = v7;
        char v8 = 5;
        goto LABEL_51;
      case 6u:
        unsigned int v9 = *((unsigned __int8 *)a2 + 40);
        if (v9 >= 2) {
          unsigned int v9 = *(_DWORD *)a2 + 2;
        }
        if (v9 == 1)
        {
          uint64_t v23 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v23;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, __int128 *))(v23 - 8))(a1, a2);
          *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
        }

        else if (v9)
        {
          __int128 v24 = *a2;
          __int128 v25 = a2[1];
          *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
          *(_OWORD *)a1 = v24;
          *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v25;
        }

        else
        {
          uint64_t v10 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v10;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, __int128 *))(v10 - 8))(a1, a2);
          *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
        }

        char v26 = 6;
        goto LABEL_72;
      case 7u:
        unsigned int v11 = *((unsigned __int8 *)a2 + 40);
        if (v11 >= 2) {
          unsigned int v11 = *(_DWORD *)a2 + 2;
        }
        if (v11 == 1)
        {
          uint64_t v27 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v27;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, __int128 *))(v27 - 8))(a1, a2);
          *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
        }

        else if (v11)
        {
          __int128 v28 = *a2;
          __int128 v29 = a2[1];
          *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
          *(_OWORD *)a1 = v28;
          *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v29;
        }

        else
        {
          uint64_t v12 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v12;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, __int128 *))(v12 - 8))(a1, a2);
          *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
        }

        char v26 = 7;
        goto LABEL_72;
      case 8u:
        unsigned int v13 = *((unsigned __int8 *)a2 + 40);
        if (v13 >= 2) {
          unsigned int v13 = *(_DWORD *)a2 + 2;
        }
        if (v13 == 1)
        {
          uint64_t v30 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v30;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, __int128 *))(v30 - 8))(a1, a2);
          *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
        }

        else if (v13)
        {
          __int128 v40 = *a2;
          __int128 v41 = a2[1];
          *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
          *(_OWORD *)a1 = v40;
          *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v41;
        }

        else
        {
          uint64_t v14 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v14;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, __int128 *))(v14 - 8))(a1, a2);
          *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
        }

        char v26 = 8;
        goto LABEL_72;
      case 9u:
        unsigned int v15 = *((unsigned __int8 *)a2 + 40);
        if (v15 >= 2) {
          unsigned int v15 = *(_DWORD *)a2 + 2;
        }
        if (v15 == 1)
        {
          uint64_t v31 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v31;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, __int128 *))(v31 - 8))(a1, a2);
          *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
        }

        else if (v15)
        {
          __int128 v32 = *a2;
          __int128 v33 = a2[1];
          *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
          *(_OWORD *)a1 = v32;
          *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v33;
        }

        else
        {
          uint64_t v16 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v16;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, __int128 *))(v16 - 8))(a1, a2);
          *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
        }

        char v26 = 9;
        goto LABEL_72;
      case 0xAu:
        unsigned int v17 = *((unsigned __int8 *)a2 + 40);
        if (v17 >= 2) {
          unsigned int v17 = *(_DWORD *)a2 + 2;
        }
        if (v17 == 1)
        {
          uint64_t v34 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v34;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, __int128 *))(v34 - 8))(a1, a2);
          *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
        }

        else if (v17)
        {
          __int128 v35 = *a2;
          __int128 v36 = a2[1];
          *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v36;
        }

        else
        {
          uint64_t v18 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v18;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, __int128 *))(v18 - 8))(a1, a2);
          *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
        }

        char v26 = 10;
        goto LABEL_72;
      case 0xBu:
        unsigned int v19 = *((unsigned __int8 *)a2 + 40);
        if (v19 >= 2) {
          unsigned int v19 = *(_DWORD *)a2 + 2;
        }
        if (v19 == 1)
        {
          uint64_t v37 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v37;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, __int128 *))(v37 - 8))(a1, a2);
          *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
        }

        else if (v19)
        {
          __int128 v38 = *a2;
          __int128 v39 = a2[1];
          *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
          *(_OWORD *)a1 = v38;
          *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v39;
        }

        else
        {
          uint64_t v20 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v20;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, __int128 *))(v20 - 8))(a1, a2);
          *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
        }

        char v26 = 11;
LABEL_72:
        *(_BYTE *)(a1 + 41) = v26;
        return a1;
      case 0xCu:
        *(void *)a1 = *(void *)a2;
        uint64_t v7 = *((void *)a2 + 1);
        *(void *)(a1 + 8) = v7;
        char v8 = 12;
        goto LABEL_51;
      case 0xDu:
        *(void *)a1 = *(void *)a2;
        uint64_t v7 = *((void *)a2 + 1);
        *(void *)(a1 + 8) = v7;
        char v8 = 13;
LABEL_51:
        *(_BYTE *)(a1 + 41) = v8;
LABEL_52:
        swift_bridgeObjectRetain(v7);
        break;
      default:
        __int128 v21 = *a2;
        __int128 v22 = a2[1];
        *(_OWORD *)(a1 + 26) = *(__int128 *)((char *)a2 + 26);
        *(_OWORD *)a1 = v21;
        *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v22;
        break;
    }
  }

  return a1;
}

__n128 initializeWithTake for SchemaError(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SchemaError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 0xE) {
      unsigned int v4 = *(_DWORD *)a1 + 14;
    }
    switch(v4)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 0xCu:
      case 0xDu:
        swift_bridgeObjectRelease();
        break;
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
        unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
        if (v5 >= 2) {
          unsigned int v5 = *(_DWORD *)a1 + 2;
        }
        if (v5 <= 1) {
          sub_1000108B8((void *)a1);
        }
        break;
      default:
        break;
    }

    unsigned int v6 = *(unsigned __int8 *)(a2 + 41);
    if (v6 >= 0xE) {
      unsigned int v6 = *(_DWORD *)a2 + 14;
    }
    switch(v6)
    {
      case 0u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_BYTE *)(a1 + 41) = 0;
        return a1;
      case 1u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v7 = 1;
        goto LABEL_70;
      case 2u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v7 = 2;
        goto LABEL_70;
      case 3u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v7 = 3;
        goto LABEL_70;
      case 4u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v7 = 4;
        goto LABEL_70;
      case 5u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v7 = 5;
        goto LABEL_70;
      case 6u:
        unsigned int v8 = *(unsigned __int8 *)(a2 + 40);
        if (v8 >= 2) {
          unsigned int v8 = *(_DWORD *)a2 + 2;
        }
        if (v8 == 1)
        {
          __int128 v21 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v21;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
        }

        else
        {
          __int128 v9 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v9;
          if (v8)
          {
            *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
          }

          else
          {
            *(void *)(a1 + 32) = *(void *)(a2 + 32);
            *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
          }
        }

        char v7 = 6;
        goto LABEL_70;
      case 7u:
        unsigned int v10 = *(unsigned __int8 *)(a2 + 40);
        if (v10 >= 2) {
          unsigned int v10 = *(_DWORD *)a2 + 2;
        }
        if (v10 == 1)
        {
          __int128 v22 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v22;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
        }

        else
        {
          __int128 v11 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v11;
          if (v10)
          {
            *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
          }

          else
          {
            *(void *)(a1 + 32) = *(void *)(a2 + 32);
            *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
          }
        }

        char v7 = 7;
        goto LABEL_70;
      case 8u:
        unsigned int v12 = *(unsigned __int8 *)(a2 + 40);
        if (v12 >= 2) {
          unsigned int v12 = *(_DWORD *)a2 + 2;
        }
        if (v12 == 1)
        {
          __int128 v23 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v23;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
        }

        else
        {
          __int128 v13 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v13;
          if (v12)
          {
            *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
          }

          else
          {
            *(void *)(a1 + 32) = *(void *)(a2 + 32);
            *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
          }
        }

        char v7 = 8;
        goto LABEL_70;
      case 9u:
        unsigned int v14 = *(unsigned __int8 *)(a2 + 40);
        if (v14 >= 2) {
          unsigned int v14 = *(_DWORD *)a2 + 2;
        }
        if (v14 == 1)
        {
          __int128 v24 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v24;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
        }

        else
        {
          __int128 v15 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v15;
          if (v14)
          {
            *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
          }

          else
          {
            *(void *)(a1 + 32) = *(void *)(a2 + 32);
            *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
          }
        }

        char v7 = 9;
        goto LABEL_70;
      case 0xAu:
        unsigned int v16 = *(unsigned __int8 *)(a2 + 40);
        if (v16 >= 2) {
          unsigned int v16 = *(_DWORD *)a2 + 2;
        }
        if (v16 == 1)
        {
          __int128 v25 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v25;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
        }

        else
        {
          __int128 v17 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v17;
          if (v16)
          {
            *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
          }

          else
          {
            *(void *)(a1 + 32) = *(void *)(a2 + 32);
            *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
          }
        }

        char v7 = 10;
        goto LABEL_70;
      case 0xBu:
        unsigned int v18 = *(unsigned __int8 *)(a2 + 40);
        if (v18 >= 2) {
          unsigned int v18 = *(_DWORD *)a2 + 2;
        }
        if (v18 == 1)
        {
          __int128 v26 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v26;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
        }

        else
        {
          __int128 v19 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v19;
          if (v18)
          {
            *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
          }

          else
          {
            *(void *)(a1 + 32) = *(void *)(a2 + 32);
            *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
          }
        }

        char v7 = 11;
        goto LABEL_70;
      case 0xCu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v7 = 12;
        goto LABEL_70;
      case 0xDu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v7 = 13;
LABEL_70:
        *(_BYTE *)(a1 + 41) = v7;
        break;
      default:
        __int128 v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v20;
        *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
        break;
    }
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for SchemaError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xF2 && *(_BYTE *)(a1 + 42)) {
    return (*(_DWORD *)a1 + 242);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 >= 0xF) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for SchemaError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF1)
  {
    *(_OWORD *)(result + 26) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + swift_weakDestroy(v0 + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 242;
    if (a3 >= 0xF2) {
      *(_BYTE *)(result + 42) = 1;
    }
  }

  else
  {
    if (a3 >= 0xF2) {
      *(_BYTE *)(result + 42) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 41) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000F02AC(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 41);
  return result;
}

uint64_t sub_1000F02C8(uint64_t result, unsigned int a2)
{
  if (a2 > 0xD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + swift_weakDestroy(v0 + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 14;
    LOBYTE(a2) = 14;
  }

  *(_BYTE *)(result + 41) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SchemaError()
{
  return &type metadata for SchemaError;
}

uint64_t sub_1000F0300(uint64_t result)
{
  else {
    return result;
  }
}

void sub_1000F0314(int a1)
{
}

void sub_1000F031C(uint64_t a1)
{
}

uint64_t sub_1000F0324@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000F0300(*a1);
  *a2 = result;
  return result;
}

void sub_1000F034C(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  LOBYTE(v6) = a2;
  sub_1000E6350(v5, (uint64_t)&v98);
  if (v102)
  {
    if (v102 == 1)
    {
      sub_100019BC4(&v98, (uint64_t)v95);
      uint64_t v9 = v96;
      uint64_t v10 = v97;
      sub_100019AFC(v95, v96);
      id v11 = (id)PBReaderReadData(a1);
      if (v11)
      {
        unsigned int v12 = v11;
        uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
        uint64_t v15 = v14;

        uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 64))(v13, v15, v9, v10);
        if (v4)
        {
          sub_1000F0F2C();
        }

        else
        {
          uint64_t v38 = v16;
          uint64_t v39 = v17;
          sub_1000F0F2C();
          *(void *)a3 = v38;
          *(void *)(a3 + 8) = v39;
          *(_BYTE *)(a3 + 57) = 10;
        }

        sub_1000108B8(v95);
        return;
      }

      __break(1u);
      goto LABEL_129;
    }

    unsigned int v6 = v6;
    if (v100 | v101 | (unint64_t)v98 | v99 | *((void *)&v98 + 1))
    {
      uint64_t v29 = v100 | v101 | v99 | *((void *)&v98 + 1);
      if ((void)v98 != 1LL || v29)
      {
        if ((void)v98 == 2LL && !v29)
        {
          sub_1000F0F44();
          __int128 v40 = (int *)&OBJC_IVAR___PBDataReader__pos;
          __int128 v41 = (int *)&OBJC_IVAR___PBDataReader__length;
          __int128 v42 = (int *)&OBJC_IVAR___PBDataReader__bytes;
          while (1)
          {
            uint64_t v43 = *v40;
            uint64_t v44 = *(void *)(a1 + v43);
            unint64_t v45 = v44 + 1;
            if (v44 == -1 || v45 > *(void *)(a1 + *v41))
            {
              sub_1000F0F10();
            }

            else
            {
              LOBYTE(v44) = *(_BYTE *)(*(void *)(a1 + *v42) + v44);
              *(void *)(a1 + v43) = v45;
            }

            if ((v44 & 0x80) == 0) {
              break;
            }
            sub_1000F0F50();
            if (v46 >= 9)
            {
              uint64_t v47 = 0LL;
              goto LABEL_58;
            }
          }

          sub_1000F0F00();
          if (!v91) {
            uint64_t v47 = 0LL;
          }
LABEL_58:
          *(void *)a3 = v47;
          char v62 = 2;
          goto LABEL_127;
        }

        if ((void)v98 != 3LL || v29)
        {
          if ((void)v98 != 4LL || v29)
          {
            if ((void)v98 != 5LL || v29)
            {
              if ((void)v98 != 6LL || v29)
              {
                if ((void)v98 != 7LL || v29)
                {
                  id v92 = (id)PBReaderReadData(a1);
                  if (!v92)
                  {
LABEL_130:
                    __break(1u);
                    return;
                  }

                  static Data._unconditionallyBridgeFromObjectiveC(_:)(v92);
                  sub_1000F0F20();
                  *(void *)a3 = v5;
                  *(void *)(a3 + 8) = v6;
                  char v62 = 9;
                }

                else
                {
                  id v88 = (id)PBReaderReadString(a1);
                  if (!v88)
                  {
LABEL_129:
                    __break(1u);
                    goto LABEL_130;
                  }

                  static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
                  sub_1000F0F20();
                  *(void *)a3 = v5;
                  *(void *)(a3 + 8) = v6;
                  char v62 = 8;
                }
              }

              else
              {
                sub_1000F0F44();
                uint64_t v74 = (int *)&OBJC_IVAR___PBDataReader__pos;
                uint64_t v75 = (int *)&OBJC_IVAR___PBDataReader__length;
                uint64_t v76 = (int *)&OBJC_IVAR___PBDataReader__bytes;
                while (1)
                {
                  uint64_t v77 = *v74;
                  uint64_t v78 = *(void *)(a1 + v77);
                  unint64_t v79 = v78 + 1;
                  if (v78 == -1 || v79 > *(void *)(a1 + *v75))
                  {
                    sub_1000F0F10();
                  }

                  else
                  {
                    LOBYTE(v78) = *(_BYTE *)(*(void *)(a1 + *v76) + v78);
                    *(void *)(a1 + v77) = v79;
                  }

                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  sub_1000F0F50();
                  if (v80 >= 9)
                  {
                    char v81 = 0;
                    goto LABEL_121;
                  }
                }

                sub_1000F0F00();
                BOOL v91 = !v91 || v90 == 0;
                char v81 = !v91;
LABEL_121:
                *(_BYTE *)a3 = v81;
                char v62 = 6;
              }
            }

            else
            {
              if (*(void *)(a1 + OBJC_IVAR___PBDataReader__pos) > 0xFFFFFFFFFFFFFFF7LL
                || (sub_1000F0F38(), !v91 && v33))
              {
                *(_BYTE *)(a1 + OBJC_IVAR___PBDataReader__error) = 1;
                uint64_t v93 = 0LL;
              }

              else
              {
                uint64_t v93 = *(void *)(*(void *)(a1 + OBJC_IVAR___PBDataReader__bytes) + v72);
                *(void *)(a1 + v71) = v73;
              }

              *(void *)a3 = v93;
              char v62 = 5;
            }
          }

          else
          {
            if (*(void *)(a1 + OBJC_IVAR___PBDataReader__pos) > 0xFFFFFFFFFFFFFFFBLL
              || (sub_1000F0F38(), !v91 && v33))
            {
              *(_BYTE *)(a1 + OBJC_IVAR___PBDataReader__error) = 1;
              int v89 = 0;
            }

            else
            {
              int v89 = *(_DWORD *)(*(void *)(a1 + OBJC_IVAR___PBDataReader__bytes) + v64);
              *(void *)(a1 + v63) = v65;
            }

            *(_DWORD *)a3 = v89;
            char v62 = 4;
          }

unint64_t sub_1000F0B60()
{
  unint64_t result = qword_1001D8C58;
  if (!qword_1001D8C58)
  {
    unint64_t result = swift_getWitnessTable(&unk_100164BDC, &type metadata for ValueTypeError);
    atomic_store(result, (unint64_t *)&qword_1001D8C58);
  }

  return result;
}

void *destroy for ValueTypeError(void *a1)
{
  return a1;
}

uint64_t initializeWithCopy for ValueTypeError(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 40) == 1)
  {
    __int128 v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
  }

  else if (*(_BYTE *)(a2 + 40))
  {
    __int128 v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }

  else
  {
    __int128 v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
    *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
  }

  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return a1;
}

uint64_t assignWithCopy for ValueTypeError(uint64_t a1, __int128 *a2)
{
  if ((__int128 *)a1 != a2)
  {
    sub_1000E638C((void *)a1);
    if (*((_BYTE *)a2 + 40) == 1)
    {
      uint64_t v5 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v5;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v5 - 8))(a1, a2);
      *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
    }

    else if (*((_BYTE *)a2 + 40))
    {
      __int128 v6 = *a2;
      __int128 v7 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v6;
      *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v7;
    }

    else
    {
      uint64_t v4 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
    }
  }

  *(_BYTE *)(a1 + 41) = *((_BYTE *)a2 + 41);
  return a1;
}

uint64_t assignWithTake for ValueTypeError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1000E638C((void *)a1);
    __int128 v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v4;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }

  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return a1;
}

uint64_t getEnumTagSinglePayload for ValueTypeError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 42))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ValueTypeError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 4sub_1000E3528(v0, v2, 0) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 42) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 42) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 4sub_1000E3528(v0, v2, 0) = -(char)a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ValueTypeError()
{
  return &type metadata for ValueTypeError;
}

uint64_t storeEnumTagSinglePayload for ProtoWireType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1000F0E40 + 4 * byte_100164BC5[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000F0E74 + 4 * asc_100164BC0[v4]))();
}

uint64_t sub_1000F0E74(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F0E7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000F0E84LL);
  }
  return result;
}

uint64_t sub_1000F0E90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000F0E98LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1000F0E9C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F0EA4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ProtoWireType()
{
  return &type metadata for ProtoWireType;
}

unint64_t sub_1000F0EC4()
{
  unint64_t result = qword_1001D8C60;
  if (!qword_1001D8C60)
  {
    unint64_t result = swift_getWitnessTable(&unk_100164CA4, &type metadata for ProtoWireType);
    atomic_store(result, (unint64_t *)&qword_1001D8C60);
  }

  return result;
}

  ;
}

void sub_1000F0F10()
{
  *(_BYTE *)(v2 + *vsub_1000E3528(v0, v2, 0) = v1;
}

void sub_1000F0F20()
{
}

uint64_t sub_1000F0F2C()
{
  return sub_100010A30(v1, v0);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000F0F5C(int a1, uint64_t a2, Swift::String forSchemaName, sqlite3_context *a4)
{
  uint64_t v7 = v6;
  if (v6) {
    goto LABEL_2;
  }
  uint64_t v10 = sub_1000F1798();
  uint64_t v11 = v10 + 4;
  if (__OFADD__(v10, 4LL))
  {
    __break(1u);
    goto LABEL_10;
  }

  if (v11 < (uint64_t)0xFFFFFFFF80000000LL)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (v11 > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    JUMPOUT(0x1000F118CLL);
  }

  if (sqlite3_malloc((int)v10 + 4)) {
    __asm { BR              X10 }
  }

  unint64_t v12 = sub_1000F173C();
  uint64_t v7 = swift_allocError(&type metadata for SQLiteMessageTypeRegistry.Error, v12, 0LL, 0LL);
  *uint64_t v13 = 3;
  swift_willThrow(v7);
LABEL_2:
  uint64_t v14 = v7;
  uint64_t v8 = sub_10000941C(&qword_1001D2B70);
  SQLiteContext.setError<A>(_:message:code:)((uint64_t)&v14, 0xD000000000000014LL, 0x8000000100172B60LL, -1, a4, v8);
  return swift_errorRelease(v7);
}

uint64_t sub_1000F11A0(sqlite3_value *a1)
{
  uint64_t result = SQLiteArgument.withUnsafeBytes<A>(_:)((uint64_t (*)(const void *, uint64_t))sub_1000F1448, v1, a1);
  if (!v2) {
    return v4;
  }
  return result;
}

void sub_1000F11E8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = type metadata accessor for Data.Deallocator(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    if (__OFSUB__(a2, 4LL))
    {
      __break(1u);
    }

    else
    {
      sub_1000FB98C(*(_DWORD *)(a1 + a2 - 4), (uint64_t)v31);
      if (!v4)
      {
        uint64_t v32 = type metadata accessor for ProtobufPayload();
        sub_100019B20((uint64_t)v31, (uint64_t)v28);
        (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for Data.Deallocator.none(_:), v9);
        uint64_t v13 = Data.init(bytesNoCopy:count:deallocator:)(a1, a2 - 4, v12);
        uint64_t v15 = v14;
        sub_1000108B8(v31);
        uint64_t v16 = v29;
        uint64_t v17 = v30;
        uint64_t v18 = sub_1000AB9E8((uint64_t)v28, v29);
        __chkstk_darwin(v18);
        __int128 v20 = (char *)v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v21 + 16))(v20);
        sub_1000F45B0((uint64_t)v20, v13, v15, v32, v16, v17);
        uint64_t v23 = v22;
        sub_1000108B8(v28);
        unint64_t v24 = sub_1000EDB24();
        *a4 = a3;
        a4[1] = &off_1001BA3B8;
        a4[2] = v23;
        a4[3] = v24;
        swift_retain(a3);
      }
    }
  }

  else
  {
    unint64_t v25 = sub_1000E43B4();
    uint64_t v26 = swift_allocError(&type metadata for SchemaError, v25, 0LL, 0LL);
    *(void *)uint64_t v27 = 0xD000000000000031LL;
    *(void *)(v27 + 8) = 0x8000000100172B20LL;
    *(_BYTE *)(v27 + 41) = 3;
    swift_willThrow(v26);
  }

uint64_t sub_1000F13E0()
{
  unint64_t v0 = SQLiteMessageTypeRegistry.deinit();
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t type metadata accessor for SQLiteMessageInBlobBridge()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer25SQLiteMessageInBlobBridge);
}

uint64_t sub_1000F141C(sqlite3_value *a1)
{
  uint64_t result = sub_1000F11A0(a1);
  if (v1) {
    return v3;
  }
  return result;
}

void sub_1000F1448(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

void sub_1000F1460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!__DataStorage._bytes.getter() || !__OFSUB__(a1, __DataStorage._offset.getter()))
  {
    __DataStorage._length.getter();
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000F1540LL);
}

void sub_1000F155C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __asm { BR              X10 }

void *sub_1000F15A0( int a1, const void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (!v14)
  {
    __break(1u);
    JUMPOUT(0x1000F1604LL);
  }

  sub_100010A30(v16, v15);
  return v14;
}

uint64_t sub_1000F1614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v13 = a1;
  __int16 v14 = a2;
  char v15 = BYTE2(a2);
  char v16 = BYTE3(a2);
  char v17 = BYTE4(a2);
  char v18 = BYTE5(a2);
  sub_100014244(a5, a6);
  sub_1000F155C((uint64_t)&v13, (uint64_t)&v19, a3, a4, a5, a6);
  uint64_t v11 = v10;
  sub_100010A30(a5, a6);
  return v11;
}

unint64_t sub_1000F173C()
{
  unint64_t result = qword_1001D8D98;
  if (!qword_1001D8D98)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001653B8, &type metadata for SQLiteMessageTypeRegistry.Error);
    atomic_store(result, (unint64_t *)&qword_1001D8D98);
  }

  return result;
}

void sub_1000F1778(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1000F178C()
{
  return sub_100014244(v1, v0);
}

uint64_t sub_1000F1798()
{
  return Data.count.getter(v1, v0);
}

uint64_t sub_1000F17A4(unsigned int *a1)
{
  return CharacterSet.contains(_:)(*a1) & 1;
}

uint64_t CharacterSet.init(stringLiteral:)(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_1000F17F8()
{
  return sub_1000F1858(&qword_1001D8DA0, (uint64_t)&protocol conformance descriptor for CharacterSet);
}

void *sub_1000F181C()
{
  return &protocol witness table for String;
}

uint64_t sub_1000F1828(uint64_t *a1)
{
  return CharacterSet.init(stringLiteral:)(*a1, a1[1]);
}

uint64_t sub_1000F1834()
{
  return sub_1000F1858(&qword_1001D8DA8, (uint64_t)&protocol conformance descriptor for CharacterSet);
}

uint64_t sub_1000F1858(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for CharacterSet(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

void *sub_1000F1898()
{
  return &protocol witness table for String;
}

void *sub_1000F18A4()
{
  return &protocol witness table for String;
}

uint64_t static ProtobufPayload.create(with:payload:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = type metadata accessor for ProtobufPayload();
  uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
  sub_100019BC4(v9, v6 + 16);
  *(void *)(v6 + 56) = a2;
  *(void *)(v6 + 64) = a3;
  sub_1000B4990( (unint64_t *)&qword_1001DA030,  v7,  (uint64_t (*)(uint64_t))type metadata accessor for ProtobufPayload,  (uint64_t)&protocol conformance descriptor for ProtobufPayload);
  sub_100014244(a2, a3);
  return sub_1000F4C18();
}

void ProtobufPayload.__allocating_init(with:payload:)(void *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t type metadata accessor for ProtobufPayload()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer15ProtobufPayload);
}

void ProtobufPayload.messageSchema.getter(uint64_t a1@<X8>)
{
}

uint64_t ProtobufPayload.payload.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  sub_100014244(v1, *(void *)(v0 + 64));
  return v1;
}

void sub_1000F19C8(uint64_t a1, uint64_t *a2)
{
  __asm { BR              X10 }

id sub_1000F1A20( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, int a11, uint64_t a12, __int128 a13, __int128 a14, uint64_t a15, char a16, __int128 a17, __int128 a18, __int128 a19, uint64_t a20, char a21, __int128 a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34)
{
  return [v35 writeInt32:v37 forTag:v34];
}

void static ProtobufPayload.create(with:constructor:)( void *a1, void (*a2)(void *__return_ptr, void), uint64_t a3)
{
  uint64_t v5 = v3;
  id v9 = [objc_allocWithZone(PBDataWriter) init];
  if (!v9)
  {
    unint64_t v32 = sub_1000E43B4();
    sub_100010EA0((uint64_t)&type metadata for SchemaError, v32);
    sub_1000E43F0(v33, 0xD000000000000013LL);
LABEL_11:
    sub_10002716C();
    return;
  }

  uint64_t v10 = v9;
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100019AFC(a1, v11);
  v36[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12);
  swift_bridgeObjectRetain(v36[0]);
  sub_1000F3EE8(v36);
  if (!v4)
  {
    sub_1000F4C3C();
    uint64_t v13 = v36[0];
    uint64_t v14 = *(void *)(v36[0] + 16);
    if (v14)
    {
      swift_retain(v36[0]);
      uint64_t v39 = v13;
      char v15 = (uint64_t *)(v13 + 40);
      do
      {
        uint64_t v16 = *v15;
        v36[0] = *(v15 - 1);
        v36[1] = v16;
        swift_bridgeObjectRetain(v16);
        sub_1000F1EE4(v36, a1, a2, a3, v5, (uint64_t)v10);
        v15 += 2;
        swift_bridgeObjectRelease();
        --v14;
      }

      while (v14);
      swift_release();
    }

    swift_release();
    id v17 = [v10 data];
    if (v17)
    {
      char v18 = v17;
      uint64_t v19 = type metadata accessor for ProtobufPayload();
      sub_10004D7B4((uint64_t)a1, (uint64_t)v36);
      id v20 = v18;
      uint64_t v21 = sub_1000F211C(v20);
      uint64_t v23 = v22;

      uint64_t v24 = v37;
      uint64_t v25 = v38;
      uint64_t v26 = sub_1000AB9E8((uint64_t)v36, v37);
      __chkstk_darwin(v26);
      sub_100009AEC();
      uint64_t v29 = v28 - v27;
      (*(void (**)(uint64_t))(v30 + 16))(v28 - v27);
      sub_1000F45B0(v29, v21, v23, v19, v24, v25);
      sub_1000108B8(v36);
      sub_1000B4990( (unint64_t *)&qword_1001DA030,  v31,  (uint64_t (*)(uint64_t))type metadata accessor for ProtobufPayload,  (uint64_t)&protocol conformance descriptor for ProtobufPayload);
    }

    else
    {
      unint64_t v34 = sub_1000E43B4();
      sub_100010EA0((uint64_t)&type metadata for SchemaError, v34);
      sub_1000E43F0(v35, 0xD000000000000021LL);
    }

    goto LABEL_11;
  }

  swift_release();
  __break(1u);
}

void *sub_1000F1EE4( uint64_t *a1, void *a2, void (*a3)(void *__return_ptr, void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  sub_100019AFC(a2, v11);
  uint64_t result = (*(void *(**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 48))( v25,  v9,  v10,  v11,  v12);
  if (!v6)
  {
    uint64_t v14 = v26;
    uint64_t v15 = v27;
    sub_100019AFC(v25, v26);
    unint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 32))(v14, v15);
    a3(v22, v25);
    unint64_t v28 = HIDWORD(v16);
    while (1)
    {
      if (v23 == 255)
      {
        sub_100028CD0((uint64_t)v22, &qword_1001D8F00);
        return (void *)sub_1000108B8(v25);
      }

      sub_1000F4798((uint64_t)v22, (uint64_t)v24);
      if ((v16 & 0x8000000000000000LL) != 0) {
        break;
      }
      if (v28)
      {
        id v20 = "Not enough bits to represent the passed value";
        uint64_t v21 = 45LL;
        goto LABEL_13;
      }

      sub_1000F19C8(a6, v24);
      uint64_t v17 = v26;
      uint64_t v18 = v27;
      sub_100019AFC(v25, v26);
      char v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18);
      sub_1000F4848((uint64_t)v24);
      if ((v19 & 1) == 0) {
        return (void *)sub_1000108B8(v25);
      }
      a3(v22, v25);
    }

    id v20 = "Negative value is not representable";
    uint64_t v21 = 35LL;
LABEL_13:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v20,  v21,  2LL,  "Swift/Integers.swift",  20LL);
    __break(1u);
  }

  return result;
}

uint64_t sub_1000F211C(void *a1)
{
  *(void *)&__int128 v14 = a1;
  unint64_t v2 = sub_1000F487C();
  id v3 = a1;
  uint64_t v4 = sub_10000941C(&qword_1001D60D8);
  if (!swift_dynamicCast(v15, &v14, v2, v4, 6LL))
  {
    uint64_t v16 = 0LL;
    memset(v15, 0, sizeof(v15));
    sub_100028CD0((uint64_t)v15, &qword_1001D60E0);
    uint64_t v8 = NSData.startIndex.getter(v7);
    uint64_t v9 = NSData.endIndex.getter();
    uint64_t v10 = sub_1000F4A6C(v8, v9);
    *(void *)&v15[0] = Data._Representation.init(count:)(v10);
    *((void *)&v15[0] + 1) = v11;
    __chkstk_darwin(*(void *)&v15[0]);
    sub_1000F4050();
    __asm { BR              X12 }
  }

  sub_100019BC4(v15, (uint64_t)&v17);
  uint64_t v5 = v18;
  uint64_t v6 = v19;
  sub_100019AFC(&v17, v18);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)( &v14,  sub_1000B8D40,  0LL,  &type metadata for Data._Representation,  v5,  v6);

  v15[0] = v14;
  sub_1000108B8(&v17);
  return *(void *)&v15[0];
}

void ProtobufPayload.init(with:payload:)(void *a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000F2488( void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  uint64_t v12 = sub_1000AB9E8((uint64_t)a1, v10);
  __chkstk_darwin(v12);
  __int128 v14 = sub_1000F4BC8(v13, v16);
  v15(v14);
  a4(v5, a2, a3, v4, v10, v11);
  sub_1000108B8(a1);
  sub_10002FBC0();
}

uint64_t ProtobufPayload.__allocating_init(with:from:payload:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8 = v6;
  uint64_t v12 = a3;
  uint64_t ObjectType = swift_getObjectType(a3);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 40))( v25,  a1,  a2,  ObjectType,  a4);
  if (v7)
  {
    sub_100010A30(a5, a6);
    sub_1000145F0();
    swift_unknownObjectRelease();
  }

  else
  {
    sub_1000145F0();
    swift_unknownObjectRelease();
    uint64_t v16 = v26;
    uint64_t v17 = v27;
    uint64_t v18 = sub_1000AB9E8((uint64_t)v25, v26);
    __chkstk_darwin(v18);
    id v20 = sub_1000F4BC8(v19, v24);
    v21(v20);
    sub_1000F45B0(a4, a5, a6, v8, v16, v17);
    uint64_t v12 = v22;
    sub_1000108B8(v25);
  }

  return v12;
}

void ProtobufPayload.value(forKey:)()
{
  unint64_t v2 = sub_100019AFC((void *)(v0 + 16), *(void *)(v0 + 40));
  id v3 = sub_1000F4B7C((uint64_t)v2);
  if (!v1)
  {
    uint64_t v11 = sub_1000F4BB4((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v13, v14);
    uint64_t v12 = ProtobufPayload.value(forProperty:)(v11);
    sub_1000F4C10((uint64_t)v12);
  }

  sub_1000F4B9C();
}

void *ProtobufPayload.value(forKeypath:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = *(void *)(v3 + 56);
  uint64_t v9 = *(void *)(v3 + 64);
  sub_10004D7B4(v3 + 16, (uint64_t)v11);
  char v12 = 1;
  sub_1001037C8(a1, a2, (uint64_t)v11, (uint64_t)v13);
  uint64_t result = sub_1000E638C(v11);
  if (!v4)
  {
    static ProtoTagPathHelper.extractValue(from:pathAndType:)(v8, v9, (uint64_t)v13, a3);
    return (void *)sub_1000F46CC((uint64_t)v13);
  }

  return result;
}

void *ProtobufPayload.value(forProperty:)(void *a1)
{
  uint64_t v3 = sub_1000F4C28();
  uint64_t result = (void *)v4(v3);
  if (!v1)
  {
    sub_1000F4C48(a1);
    uint64_t v6 = sub_1000F4C28();
    uint64_t v8 = v7(v6);
    uint64_t v9 = sub_10000941C(&qword_1001D8638);
    uint64_t v10 = swift_allocObject(v9, 56LL, 7LL);
    *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
    *(void *)(v10 + 32) = v8;
    *(void *)(v10 + 4sub_1000E3528(v0, v2, 0) = 0LL;
    *(_BYTE *)(v10 + 48) = 0;
    sub_1000E6350((uint64_t)v17, (uint64_t)&v16);
    uint64_t v15 = v10;
    uint64_t v11 = sub_1000F4C18();
    static ProtoTagPathHelper.extractValue(from:pathAndType:)(v11, v12, v13, v14);
    sub_1000F46CC((uint64_t)&v15);
    return sub_1000E638C(v17);
  }

  return result;
}

void *ProtobufPayload.forEachValue(ofKey:block:)(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *))
{
  uint64_t v5 = v3;
  uint64_t v9 = v5[5];
  uint64_t v10 = v5[6];
  sub_100019AFC(v5 + 2, v9);
  uint64_t result = (*(void *(**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 48))( v13,  a1,  a2,  v9,  v10);
  if (!v4)
  {
    static ProtoTagPathHelper.extractValues(from:property:block:)(v5[7], v5[8], v13, a3);
    return (void *)sub_1000F4C10(v12);
  }

  return result;
}

void ProtobufPayload.forEachValue(ofProperty:block:)(void *a1, void (*a2)(_BYTE *))
{
}

uint64_t ProtobufPayload.forEachValue(matchingPath:handler:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = static PropertyPathUtil.parse(_:)(a1, a2);
  if (v5) {
    return swift_errorRelease(v5);
  }
  uint64_t v11 = v8;
  sub_1000B4990( (unint64_t *)&qword_1001DA030,  v9,  (uint64_t (*)(uint64_t))type metadata accessor for ProtobufPayload,  (uint64_t)&protocol conformance descriptor for ProtobufPayload);
  sub_1000F29B8(v4, v12, v11, a3, a4);
  return swift_bridgeObjectRelease();
}

void sub_1000F29B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t, __n128);
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void v18[3];
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void v23[3];
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  void v29[6];
  void *v30;
  if (*(void *)(a3 + 16))
  {
    v18[0] = *(void *)(a3 + 16);
    v18[1] = a4;
    v18[2] = a5;
    uint64_t v7 = *(void *)(a3 + 32);
    uint64_t v6 = *(void *)(a3 + 40);
    uint64_t v22 = *(void *)(a3 + 48);
    uint64_t v21 = *(unsigned __int8 *)(a3 + 56);
    uint64_t ObjectType = swift_getObjectType(a1);
    uint64_t v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, __n128))(a2 + 16);
    uint64_t v10 = swift_bridgeObjectRetain(v6);
    id v20 = ObjectType;
    v9(v23, ObjectType, a2, v10);
    uint64_t v11 = v24;
    uint64_t v12 = v25;
    sub_100019AFC(v23, v24);
    uint64_t v19 = a2;
    uint64_t v13 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v12 + 48);
    uint64_t v14 = swift_bridgeObjectRetain(v6);
    uint64_t v15 = v30;
    v13(&v26, v7, v6, v11, v12, v14);
    if (v15)
    {
      swift_errorRelease(v15);
      swift_bridgeObjectRelease();
      sub_1000108B8(v23);
      uint64_t v26 = 0u;
      uint64_t v27 = 0u;
      unint64_t v28 = 0LL;
LABEL_4:
      swift_bridgeObjectRelease();
      sub_100028CD0((uint64_t)&v26, &qword_1001D8AF0);
      return;
    }

    uint64_t v16 = v19;
    swift_bridgeObjectRelease();
    sub_1000108B8(v23);
    if (!*((void *)&v27 + 1)) {
      goto LABEL_4;
    }
    uint64_t v17 = sub_100019BC4(&v26, (uint64_t)v29);
    uint64_t v30 = v18;
    *(void *)&uint64_t v26 = 0LL;
    __chkstk_darwin(v17);
    (*(void (**)(void *, uint64_t *(*)(uint64_t *)))(v16 + 72))(v29, sub_1000F4810);
    sub_1000108B8(v29);
    swift_bridgeObjectRelease();
  }

  else
  {
    __break(1u);
  }

uint64_t *sub_1000F2BD0( uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, uint64_t (*a8)(void), uint64_t a9, uint64_t a10)
{
  uint64_t v11 = v10;
  if ((a6 & 1) == 0)
  {
    uint64_t v14 = *a2;
    if (*a2 != a5)
    {
LABEL_17:
      if (!__OFADD__(v14++, 1LL)) {
        goto LABEL_26;
      }
      __break(1u);
      goto LABEL_20;
    }
  }

  if ((a7 & 1) != 0)
  {
    uint64_t result = (uint64_t *)a8();
    uint64_t v14 = *a2 + 1;
    BOOL v15 = __OFADD__(*a2, 1LL);
    if (!v10) {
      goto LABEL_23;
    }
    if (!v15) {
      goto LABEL_26;
    }
    __break(1u);
  }

  sub_1000F47D4(result, (uint64_t)v26);
  if (v27 != 10)
  {
LABEL_20:
    uint64_t result = (uint64_t *)sub_1000F4848((uint64_t)v26);
    uint64_t v14 = *a2 + 1;
    if (!__OFADD__(*a2, 1LL)) {
      goto LABEL_26;
    }
    __break(1u);
LABEL_23:
    if (v15)
    {
      __break(1u);
      goto LABEL_25;
    }

uint64_t sub_1000F2D38(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_100050610(0LL, result, v3);
  if ((v4 & 1) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result;
  }
  if (v3 < v5) {
    goto LABEL_9;
  }
  if ((v5 & 0x8000000000000000LL) == 0) {
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

void *sub_1000F2DA0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  uint64_t v10 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v11 = swift_unknownObjectRetain_n(a1, 2LL);
  uint64_t v12 = (void *)swift_dynamicCastClass(v11, v10);
  if (!v12)
  {
    swift_unknownObjectRelease();
    uint64_t v12 = _swiftEmptyArrayStorage;
  }

  uint64_t v13 = v12[2];
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }

  if (v13 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    sub_1000F3F50(a1, a2, a3, a4);
    uint64_t v9 = v8;
    goto LABEL_9;
  }

  uint64_t v9 = (void *)swift_dynamicCastClass(a1, v10);
  if (!v9)
  {
    swift_unknownObjectRelease();
    uint64_t v9 = _swiftEmptyArrayStorage;
  }

uint64_t ProtobufPayload.forEachValue(_:)(void (*a1)(void *, __int128 *))
{
  uint64_t v4 = v1[7];
  uint64_t v5 = v1[8];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  sub_100019AFC(v1 + 2, v6);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 40))(v6, v7);
  if (!v2)
  {
    uint64_t v9 = result;
    swift_bridgeObjectRetain(result);
    sub_100104F84(v4, v5, v9, a1);
    return sub_1000145F0();
  }

  return result;
}

void *ProtobufPayload.getArray(matchingPath:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = _swiftEmptyArrayStorage;
  v3[2] = &v4;
  ProtobufPayload.forEachValue(matchingPath:handler:)(a1, a2, (uint64_t)sub_1000F4700, (uint64_t)v3);
  return v4;
}

uint64_t sub_1000F2F64(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(*a2 + 16);
  sub_1000FBACC(v4);
  uint64_t v5 = *a2;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v4 + 1;
  return sub_1000F47D4(a1, v5 + (v4 << 6) + 32);
}

void ProtobufPayload.value(forOneofName:)()
{
  uint64_t v2 = sub_100019AFC((void *)(v0 + 16), *(void *)(v0 + 40));
  uint64_t v3 = sub_1000F4B7C((uint64_t)v2);
  if (!v1)
  {
    uint64_t v11 = sub_1000F4BB4((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v14, v15);
    uint64_t v13 = ProtobufPayload.value(forOneof:)(v11, v12);
    sub_1000F4C10(v13);
  }

  sub_1000F4B9C();
}

uint64_t ProtobufPayload.value(forOneof:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1000F4BE8(a1);
  sub_1000F3094(v4, v2 + 2, v2[7], v2[8], (uint64_t)_swiftEmptyArrayStorage, a2);
  return sub_1000F4C3C();
}

id sub_1000F3094@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (qword_1001D7E78 != -1) {
    swift_once(&qword_1001D7E78, sub_10010B648);
  }
  uint64_t v9 = (void *)qword_1001DA8F8;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v9 updateData:isa];

  uint64_t v11 = (char *)qword_1001DA8F8;
  [(id)qword_1001DA8F8 seekToOffset:0];
  uint64_t v12 = *(void *)(a5 + 16);
  uint64_t v13 = Data.count.getter(a3, a4);
  if ((v13 & 0x8000000000000000LL) == 0)
  {
    uint64_t v14 = (char *)v13;
    if (v12)
    {
      uint64_t v15 = 0LL;
      uint64_t v16 = a5 + 32;
      uint64_t v74 = a5 + 32;
      do
      {
        uint64_t v75 = v15;
        uint64_t v17 = *(void *)(v16 + 8 * v15);
        unint64_t v18 = (unint64_t)[v11 position];
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0LL;
        while (1)
        {
          while (1)
          {
            unint64_t v22 = *(void *)&v11[OBJC_IVAR___PBDataReader__pos];
            if (v22 == -1LL || v22 >= *(void *)&v11[OBJC_IVAR___PBDataReader__length])
            {
              char v24 = 0;
              v11[OBJC_IVAR___PBDataReader__error] = 1;
            }

            else
            {
              unint64_t v23 = v22 + 1;
              char v24 = *(_BYTE *)(*(void *)&v11[OBJC_IVAR___PBDataReader__bytes] + v22);
              *(void *)&v11[OBJC_IVAR___PBDataReader__pos] = v23;
            }

            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0) {
              break;
            }
            v19 += 7;
            BOOL v26 = v20++ >= 9;
            if (v26)
            {
              unint64_t v25 = 0LL;
              goto LABEL_20;
            }
          }

          unint64_t v25 = v11[OBJC_IVAR___PBDataReader__error] ? 0LL : v21;
LABEL_20:
          int v27 = v25 & 7;
          PBReaderSkipValueWithTag(v11, v25 >> 3, v25 & 7);
          unint64_t v28 = (unint64_t)[v11 position];
          unsigned int v20 = 0;
          char v19 = 0;
          uint64_t v21 = 0LL;
          if ((v28 & 0x8000000000000000LL) == 0)
          {
            uint64_t v21 = 0LL;
          }
        }

        if (v27 != 2)
        {
          unint64_t v67 = sub_1000E43B4();
          swift_allocError(&type metadata for SchemaError, v67, 0LL, 0LL);
          uint64_t v55 = v68;
          _StringGuts.grow(_:)(38LL);
          swift_bridgeObjectRelease();
          *(void *)&__int128 v80 = 0xD000000000000024LL;
          *((void *)&v80 + 1) = 0x80000001001728C0LL;
          LOBYTE(v79[0]) = v27;
LABEL_68:
          v56._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
          String.append(_:)(v56);
          uint64_t v57 = swift_bridgeObjectRelease();
          uint64_t v58 = *((void *)&v80 + 1);
          *(void *)uint64_t v55 = v80;
          *(void *)(v55 + 8) = v58;
          char v59 = 12;
          goto LABEL_69;
        }

        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0LL;
        while (1)
        {
          unint64_t v32 = *(void *)&v11[OBJC_IVAR___PBDataReader__pos];
          if (v32 == -1LL || v32 >= *(void *)&v11[OBJC_IVAR___PBDataReader__length])
          {
            char v34 = 0;
            v11[OBJC_IVAR___PBDataReader__error] = 1;
          }

          else
          {
            unint64_t v33 = v32 + 1;
            char v34 = *(_BYTE *)(*(void *)&v11[OBJC_IVAR___PBDataReader__bytes] + v32);
            *(void *)&v11[OBJC_IVAR___PBDataReader__pos] = v33;
          }

          v31 |= (unint64_t)(v34 & 0x7F) << v29;
          if ((v34 & 0x80) == 0) {
            break;
          }
          v29 += 7;
          BOOL v50 = v30++ > 8;
          if (v50)
          {
            uint64_t v35 = 0LL;
            goto LABEL_38;
          }
        }

        if (v11[OBJC_IVAR___PBDataReader__error]) {
          uint64_t v35 = 0LL;
        }
        else {
          uint64_t v35 = v31;
        }
        if (v35 < 0) {
          goto LABEL_77;
        }
LABEL_38:
        unint64_t v36 = (unint64_t)[v11 position];
        if ((v36 & 0x8000000000000000LL) != 0) {
          goto LABEL_77;
        }
        uint64_t v15 = v75 + 1;
        uint64_t v14 = (char *)(v36 + v35);
        uint64_t v16 = v74;
      }

      while (v75 + 1 != v12);
    }

    unint64_t v37 = (unint64_t)[v11 position];
    if ((v37 & 0x8000000000000000LL) == 0 && v37 >= (unint64_t)v14)
    {
LABEL_42:
      *(_WORD *)(a6 + 96) = 0;
      *(_OWORD *)(a6 + 64) = 0u;
      *(_OWORD *)(a6 + 8sub_1000E3528(v0, v2, 0) = 0u;
      *(_OWORD *)(a6 + 32) = 0u;
      *(_OWORD *)(a6 + 48) = 0u;
      *(_OWORD *)a6 = 0u;
      *(_OWORD *)(a6 + swift_weakDestroy(v0 + 16) = 0u;
      return [v11 updateData:0];
    }

    char v39 = 0;
    unsigned int v40 = 0;
    unint64_t v41 = 0LL;
    while (1)
    {
      while (1)
      {
        unint64_t v42 = *(void *)&v11[OBJC_IVAR___PBDataReader__pos];
        if (v42 == -1LL || v42 >= *(void *)&v11[OBJC_IVAR___PBDataReader__length])
        {
          char v44 = 0;
          v11[OBJC_IVAR___PBDataReader__error] = 1;
        }

        else
        {
          unint64_t v43 = v42 + 1;
          char v44 = *(_BYTE *)(*(void *)&v11[OBJC_IVAR___PBDataReader__bytes] + v42);
          *(void *)&v11[OBJC_IVAR___PBDataReader__pos] = v43;
        }

        v41 |= (unint64_t)(v44 & 0x7F) << v39;
        if (v44 < 0) {
          break;
        }
        if (v11[OBJC_IVAR___PBDataReader__error]) {
          unint64_t v45 = 0LL;
        }
        else {
          unint64_t v45 = v41;
        }
LABEL_55:
        char v46 = v45 & 7;
        uint64_t v47 = *(void *)(a1 + 16);
        if (v47)
        {
          uint64_t v48 = (v45 >> 3);
          uint64_t v49 = (uint64_t *)(a1 + 40);
          while (1)
          {
            BOOL v50 = *(v49 - 1) > v48 || *v49 < v48;
            if (!v50) {
              break;
            }
            v49 += 2;
            if (!--v47) {
              goto LABEL_63;
            }
          }

          char v52 = sub_1000F0300(v45 & 7);
          if (v52 == 6)
          {
            unint64_t v53 = sub_1000E43B4();
            swift_allocError(&type metadata for SchemaError, v53, 0LL, 0LL);
            uint64_t v55 = v54;
            _StringGuts.grow(_:)(21LL);
            swift_bridgeObjectRelease();
            *(void *)&__int128 v80 = 0xD000000000000013LL;
            *((void *)&v80 + 1) = 0x8000000100172C20LL;
            LOBYTE(v79[0]) = v46;
            goto LABEL_68;
          }

          char v61 = v52;
          uint64_t v62 = a2[3];
          uint64_t v63 = a2[4];
          sub_100019AFC(a2, v62);
          uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 40))(v62, v63);
          if (v78) {
            return [v11 updateData:0];
          }
          sub_1000FB63C(v48, v64, (uint64_t)&v80);
          swift_bridgeObjectRelease();
          if (v81)
          {
            sub_100019BC4(&v80, (uint64_t)v83);
            sub_10004D7B4((uint64_t)v83, (uint64_t)v82);
            uint64_t v65 = v84;
            uint64_t v66 = v85;
            sub_100019AFC(v83, v84);
            (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v66 + 40))(v79, v65, v66);
            sub_1000F034C(qword_1001DA8F8, v61, (uint64_t)&v80);
            sub_1000E638C(v79);
            sub_100019BC4(v82, a6);
            sub_1000F4798((uint64_t)&v80, a6 + 40);
            sub_1000108B8(v83);
            unsigned int v60 = (void *)qword_1001DA8F8;
            return [v60 updateData:0];
          }

          sub_100028CD0((uint64_t)&v80, &qword_1001D8AF0);
          unint64_t v69 = sub_1000E43B4();
          swift_allocError(&type metadata for SchemaError, v69, 0LL, 0LL);
          uint64_t v55 = v70;
          *(void *)&__int128 v80 = 0x6761742068746957LL;
          *((void *)&v80 + 1) = 0xE900000000000020LL;
          v79[0] = v48;
          v71._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
          String.append(_:)(v71);
          uint64_t v57 = swift_bridgeObjectRelease();
          uint64_t v72 = *((void *)&v80 + 1);
          *(void *)uint64_t v55 = v80;
          *(void *)(v55 + 8) = v72;
          char v59 = 4;
LABEL_69:
          *(_BYTE *)(v55 + 41) = v59;
          swift_willThrow(v57);
          unsigned int v60 = (void *)qword_1001DA8F8;
          return [v60 updateData:0];
        }

LABEL_63:
        PBReaderSkipValueWithTag(v11, v45 >> 3, v45 & 7);
        unint64_t v51 = (unint64_t)[v11 position];
        unsigned int v40 = 0;
        char v39 = 0;
        unint64_t v41 = 0LL;
        if ((v51 & 0x8000000000000000LL) == 0)
        {
          unint64_t v41 = 0LL;
        }
      }

      v39 += 7;
      BOOL v26 = v40++ >= 9;
      if (v26)
      {
        unint64_t v45 = 0LL;
        goto LABEL_55;
      }
    }
  }

LABEL_77:
  id result = (id)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL);
  __break(1u);
  return result;
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufPayload.propertyName(forOneofName:)( Swift::String forOneofName)
{
  uint64_t v3 = v1;
  object = forOneofName._object;
  uint64_t countAndFlagsBits = forOneofName._countAndFlagsBits;
  uint64_t v6 = v3[5];
  uint64_t v7 = v3[6];
  uint64_t v8 = sub_100019AFC(v3 + 2, v6);
  uint64_t v9 = object;
  uint64_t v10 = (uint64_t)v8;
  (*(void (**)(void *__return_ptr, uint64_t, void *, uint64_t, uint64_t))(v7 + 56))( v15,  countAndFlagsBits,  v9,  v6,  v7);
  if (!v2)
  {
    uint64_t v10 = ProtobufPayload.propertyName(forOneof:)(v15);
    uint64_t v3 = v11;
    sub_1000F4C10(v10);
  }

  uint64_t v12 = v10;
  uint64_t v13 = v3;
  result.value._object = v13;
  result.value._uint64_t countAndFlagsBits = v12;
  return result;
}

uint64_t ProtobufPayload.propertyName(forOneof:)(void *a1)
{
  uint64_t v4 = sub_1000F4BE8(a1);
  uint64_t v5 = sub_1000E9418(v4, *(void *)(v1 + 56), *(void *)(v1 + 64), (uint64_t)_swiftEmptyArrayStorage);
  char v7 = v6;
  uint64_t result = swift_bridgeObjectRelease();
  if (!v2)
  {
    if ((v7 & 1) != 0)
    {
      return 0LL;
    }

    else
    {
      uint64_t v9 = a1[3];
      uint64_t v10 = a1[4];
      sub_100019AFC(a1, v9);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v5, v9, v10);
    }
  }

  return result;
}

void ProtobufPayload.property(forOneofName:)()
{
  uint64_t v2 = sub_100019AFC((void *)(v0 + 16), *(void *)(v0 + 40));
  uint64_t v3 = sub_1000F4B7C((uint64_t)v2);
  if (!v1)
  {
    uint64_t v11 = sub_1000F4BB4((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v14, v15);
    uint64_t v13 = ProtobufPayload.property(forOneof:)(v11, v12);
    sub_1000F4C10(v13);
  }

  sub_1000F4B9C();
}

uint64_t ProtobufPayload.property(forOneof:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = ProtobufPayload.propertyName(forOneof:)(a1);
  if (!v3)
  {
    if (v6)
    {
      sub_1000F4C48((void *)(v2 + 16));
      uint64_t v7 = sub_1000F4C18();
      v8(v7);
      return swift_bridgeObjectRelease();
    }

    else
    {
      *(void *)(a2 + 32) = 0LL;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = 0u;
    }
  }

  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufPayload.asJSON()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v3);
  sub_100009AEC();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for JSONEncoder.OutputFormatting(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  JSONEncoder.init()();
  uint64_t v12 = sub_10000941C(&qword_1001D8DB0);
  uint64_t v13 = swift_allocObject( v12,  ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
        + 2LL * *(void *)(v8 + 72),
          *(unsigned __int8 *)(v8 + 80) | 7LL);
  *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_10015D580;
  uint64_t v14 = static JSONEncoder.OutputFormatting.prettyPrinted.getter();
  static JSONEncoder.OutputFormatting.sortedKeys.getter(v14);
  uint64_t v34 = v13;
  sub_1000B4990( &qword_1001D8DB8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for JSONEncoder.OutputFormatting,  (uint64_t)&protocol conformance descriptor for JSONEncoder.OutputFormatting);
  uint64_t v16 = v15;
  uint64_t v17 = sub_10000941C(&qword_1001D8DC0);
  unint64_t v18 = sub_1000F4718();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v17, v18, v7, v16);
  dispatch thunk of JSONEncoder.outputFormatting.setter(v10);
  uint64_t v34 = v2;
  uint64_t v19 = type metadata accessor for ProtobufPayload();
  sub_1000B4990( &qword_1001D8DD0,  v20,  (uint64_t (*)(uint64_t))type metadata accessor for ProtobufPayload,  (uint64_t)&protocol conformance descriptor for ProtobufPayload);
  uint64_t v22 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v34, v19, v21);
  if (!v1)
  {
    uint64_t v24 = v22;
    unint64_t v25 = v23;
    static String.Encoding.utf8.getter(v22);
    String.init(data:encoding:)(v24, v25, v6);
    uint64_t v27 = v26;
    sub_100010A30(v24, v25);
    if (!v27)
    {
      unint64_t v30 = sub_1000E43B4();
      sub_100010EA0((uint64_t)&type metadata for SchemaError, v30);
      sub_1000E43F0(v31, 0xD000000000000017LL);
    }
  }

  swift_release();
  sub_10002716C();
  result._object = v29;
  result._uint64_t countAndFlagsBits = v28;
  return result;
}

void *ProtobufPayload.deinit()
{
  return v0;
}

uint64_t ProtobufPayload.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t sub_1000F3D44(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return static ProtobufPayload.create(with:payload:)(a1, a2, a3);
}

void sub_1000F3D58(void *a1, void (*a2)(void *__return_ptr, void), uint64_t a3)
{
}

void *sub_1000F3D6C(void *a1)
{
  return ProtobufPayload.value(forProperty:)(a1);
}

void sub_1000F3D80()
{
}

void *sub_1000F3D94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ProtobufPayload.value(forKeypath:)(a1, a2, a3);
}

void sub_1000F3DA8(void *a1, void (*a2)(_BYTE *))
{
}

void *sub_1000F3DBC(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *))
{
  return ProtobufPayload.forEachValue(ofKey:block:)(a1, a2, a3);
}

uint64_t sub_1000F3DD0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return ProtobufPayload.forEachValue(matchingPath:handler:)(a1, a2, a3, a4);
}

uint64_t sub_1000F3DE4(void (*a1)(void *, __int128 *))
{
  return ProtobufPayload.forEachValue(_:)(a1);
}

void *sub_1000F3DF8(uint64_t a1, unint64_t a2)
{
  return ProtobufPayload.getArray(matchingPath:)(a1, a2);
}

uint64_t sub_1000F3E0C(void *a1)
{
  return ProtobufPayload.propertyName(forOneof:)(a1);
}

uint64_t sub_1000F3E20(uint64_t a1, uint64_t a2)
{
  return ProtobufPayload.propertyName(forOneofName:)(*(Swift::String *)&a1).value._countAndFlagsBits;
}

uint64_t sub_1000F3E34@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ProtobufPayload.value(forOneof:)(a1, a2);
}

void sub_1000F3E48()
{
}

uint64_t sub_1000F3E5C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ProtobufPayload.property(forOneof:)(a1, a2);
}

void sub_1000F3E70()
{
}

uint64_t sub_1000F3E84()
{
  return ProtobufPayload.asJSON()()._countAndFlagsBits;
}

uint64_t sub_1000F3E98(void *a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ProtobufPayload, a2);
  return SchematizedPayload.encode(to:)(a1, a2, WitnessTable);
}

void sub_1000F3EE8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_1000EEE18(v2);
    uint64_t v2 = v3;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_1000EDC6C(v5);
  *a1 = v2;
}

void sub_1000F3F50(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }

  if (v5)
  {
    if (v5 <= 0)
    {
      uint64_t v9 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v8 = sub_10000941C(&qword_1001D8650);
      uint64_t v9 = (void *)swift_allocObject(v8, 32 * v5 + 32, 7LL);
      size_t v10 = j__malloc_size(v9);
      __int128 v9[2] = v5;
      v9[3] = 2 * ((uint64_t)(v10 - 32) / 32);
    }

    if (v4 != a3)
    {
      sub_10010A448(a2 + 32 * a3, v5, (unint64_t)(v9 + 4));
      return;
    }

    goto LABEL_10;
  }

void *sub_1000F400C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  v4[2] = &v5;
  return sub_1000F434C( (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1000F4B2C,  (uint64_t)v4,  a1,  a2);
}

void sub_1000F4050()
{
  __asm { BR              X11 }

void *sub_1000F40B0@<X0>(uint64_t a1@<X8>)
{
  void *(*v3)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v4;
  void *result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v7 = v4;
  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  uint64_t v9 = BYTE4(a1);
  size_t v10 = BYTE5(a1);
  uint64_t v11 = BYTE6(a1);
  Swift::String result = sub_1000F4458((uint64_t)&v7, v3, v2, BYTE6(a1));
  uint64_t v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  *uint64_t v1 = v7;
  v1[1] = v6;
  return result;
}

uint64_t sub_1000F42F0(_BYTE *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  sub_1000F48B8(&v7, a1, a2);
  return v7;
}

void *sub_1000F434C( void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v6 = a4 - a3;
    uint64_t v7 = a3;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v6 = 0LL;
  }

  Swift::String result = a1(&v9, v7, v6);
  if (!v4) {
    return (void *)v9;
  }
  return result;
}

char *sub_1000F43AC(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  Swift::String result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  Swift::String result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }

  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  Swift::String result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

void *sub_1000F4458( uint64_t a1, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  Swift::String result = a2(&v6, a1, a1 + a4);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

void sub_1000F449C(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100010A30(a1, a2);
  [a4 writeData:isa forTag:a3];
}

void sub_1000F4504(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [a4 writeString:v7 forTag:a3];
}

void sub_1000F4564(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a4 writeData:isa forTag:a3];
}

void sub_1000F45B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  sub_100009AEC();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for ProtobufPayload();
  uint64_t v16 = (void *)swift_allocObject(v15, 72LL, 7LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v14, a1, a5);
  sub_1000F4668(v14, a2, a3, v16, a5, a6);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, a5);
  sub_10002FBC0();
}

void *sub_1000F4668(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  a4[5] = a5;
  a4[6] = a6;
  uint64_t v11 = sub_10001B468(a4 + 2);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32LL))(v11, a1, a5);
  a4[7] = a2;
  a4[8] = a3;
  return a4;
}

uint64_t sub_1000F46CC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F4700(uint64_t *a1)
{
  return sub_1000F2F64(a1, *(uint64_t **)(v1 + 16));
}

unint64_t sub_1000F4718()
{
  unint64_t result = qword_1001D8DC8;
  if (!qword_1001D8DC8)
  {
    uint64_t v1 = sub_1000094A0(&qword_1001D8DC0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001D8DC8);
  }

  return result;
}

void sub_1000F475C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = v3;
}

uint64_t sub_1000F4798(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000F47D4(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t *sub_1000F4810(uint64_t *a1)
{
  return sub_1000F2BD0( a1,  *(uint64_t **)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(_BYTE *)(v1 + 48),  *(_BYTE *)(v1 + 49),  *(uint64_t (**)(void))(v1 + 56),  *(void *)(v1 + 64),  *(void *)(v1 + 72));
}

uint64_t sub_1000F4848(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000F487C()
{
  unint64_t result = qword_1001D8EF8;
  if (!qword_1001D8EF8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSMutableData);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001D8EF8);
  }

  return result;
}

void sub_1000F48B8(void *a1, _BYTE *a2, uint64_t a3)
{
  id v7 = v3;
  uint64_t v8 = NSData.startIndex.getter();

  unint64_t v23 = a2;
  if (!a2 || !a3) {
    goto LABEL_5;
  }
  if (a3 < 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  if (v8 == NSData.endIndex.getter())
  {
LABEL_5:
    *a1 = v7;
    a1[1] = v8;
    return;
  }

  char v9 = NSData.subscript.getter(v8);
  id v10 = v7;
  uint64_t v11 = NSData.startIndex.getter();
  uint64_t v12 = NSData.endIndex.getter();

  if (v8 >= v11 && v8 < v12)
  {
    *a2 = v9;
    if (a3 == 1)
    {
      ++v8;
      goto LABEL_5;
    }

    uint64_t v22 = a1;
    uint64_t v14 = 1LL;
    while (a3 != v14)
    {
      uint64_t v15 = v8 + v14;
      if (v8 + v14 == NSData.endIndex.getter())
      {
        v8 += v14;
        goto LABEL_24;
      }

      char v16 = NSData.subscript.getter(v8 + v14);
      id v17 = v10;
      uint64_t v18 = NSData.startIndex.getter();
      uint64_t v19 = NSData.endIndex.getter();

      if (v15 < v18 || v15 >= v19) {
        goto LABEL_26;
      }
      uint64_t v21 = v14 + 1;
      v23[v14] = v16;
      uint64_t v14 = v21;
      if (a3 == v21)
      {
        v8 += v21;
LABEL_24:
        a1 = v22;
        goto LABEL_5;
      }
    }

    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

void *sub_1000F4A3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  unint64_t result = sub_1000F400C(a1, a2, *a3);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
  }

  return result;
}

uint64_t sub_1000F4A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = ((uint64_t (*)(void))NSData.startIndex.getter)();
  uint64_t result = NSData.endIndex.getter();
  if (v4 > a1 || result < a1)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v7 = NSData.startIndex.getter(result);
  uint64_t result = NSData.endIndex.getter();
  if (v7 > a2 || result < a2) {
    goto LABEL_12;
  }
  uint64_t result = a2 - a1;
  if (__OFSUB__(a2, a1)) {
LABEL_13:
  }
    __break(1u);
  return result;
}

void *sub_1000F4AD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_1000F4A3C(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t sub_1000F4AF0@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_1000F42F0(a1, a2, *a3);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
  }

  return result;
}

uint64_t sub_1000F4B2C@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1000F4AF0(a1, a2, *(void ***)(v3 + 16), a3);
}

uint64_t sub_1000F4B48(uint64_t a1)
{
  return a1;
}

void *sub_1000F4B7C(uint64_t a1, ...)
{
  void *(*v1)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  va_list va;
  va_start(va, a1);
  return v1((uint64_t *)va, v3, v2, v4, v5);
}

  ;
}

char *sub_1000F4BB4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

char *sub_1000F4BC8@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_1000F4BE8(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  sub_100019AFC(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t sub_1000F4C10(uint64_t a1, ...)
{
  return sub_1000108B8((uint64_t *)va);
}

uint64_t sub_1000F4C18()
{
  return v0;
}

uint64_t sub_1000F4C28()
{
  return v0;
}

uint64_t sub_1000F4C3C()
{
  return swift_bridgeObjectRelease(v0);
}

void *sub_1000F4C48(void *a1)
{
  return sub_100019AFC(a1, v1);
}

uint64_t sub_1000F4C50(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  *(_BYTE *)(v5 + 88) = 1;
  *(_BYTE *)(v5 + 74) = a3[32];
  *(void *)(v5 + 8sub_1000E3528(v0, v2, 0) = *((void *)a3 + 3);
  char v10 = *a3;
  sub_1000F5760((uint64_t)(a3 + 8), (uint64_t)v16);
  v12[0] = v10;
  sub_1000F5760((uint64_t)v16, (uint64_t)&v13);
  v14[1] = a5;
  swift_unknownObjectWeakInit(v14, a4);
  swift_retain(v5);
  swift_unknownObjectRelease();
  char v15 = 0;
  sub_1000F56F8((uint64_t)v12, v5 + 32);
  swift_release();
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  return v5;
}

uint64_t sub_1000F4D14()
{
  return *(void *)(v0 + 80);
}

uint64_t sub_1000F4D1C@<X0>(uint64_t a1@<X8>)
{
  if (v6[41] != 1)
  {
    sub_1000F5698((uint64_t)v6, (uint64_t)v4);
    __asm { BR              X10 }
  }

  return sub_1000EF098((uint64_t)v6, a1);
}

#error "1000F4EF4: call analysis failed (funcsize=23)"
uint64_t sub_1000F4FA4()
{
  uint64_t v0;
  return sub_1000F5638(v0 + 32);
}

uint64_t sub_1000F4FAC()
{
  return swift_deallocClassInstance(v0, 89LL, 7LL);
}

uint64_t type metadata accessor for ProtoProperty()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer13ProtoProperty);
}

uint64_t destroy for ProtoProperty.ProtoPropertyInfo(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(unsigned __int8 *)(result + 41);
  if (v2 >= 2) {
    unsigned int v2 = *(_DWORD *)result + 2;
  }
  if (v2 == 1)
  {
    unsigned int v3 = *(unsigned __int8 *)(result + 40);
    if (v3 >= 2) {
      unsigned int v3 = *(_DWORD *)result + 2;
    }
    if (v3 <= 1) {
      return sub_1000108B8((void *)result);
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    return swift_unknownObjectWeakDestroy(v1 + 24);
  }

  return result;
}

uint64_t initializeWithCopy for ProtoProperty.ProtoPropertyInfo(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 41);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      __int128 v9 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v9;
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1, a2);
      char v8 = 1;
      *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
    }

    else
    {
      if (v5)
      {
        __int128 v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v10;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }

      else
      {
        __int128 v6 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v6;
        (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
        *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
      }

      char v8 = 1;
    }
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = v7;
    swift_bridgeObjectRetain(v7);
    swift_unknownObjectWeakCopyInit(a1 + 24, a2 + 24);
    char v8 = 0;
    *(void *)(a1 + 3sub_1000108B8(v0 + 2) = *(void *)(a2 + 32);
  }

  *(_BYTE *)(a1 + 41) = v8;
  return a1;
}

uint64_t assignWithCopy for ProtoProperty.ProtoPropertyInfo(uint64_t a1, __int128 *a2)
{
  if ((__int128 *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
      if (v5 >= 2) {
        unsigned int v5 = *(_DWORD *)a1 + 2;
      }
      if (v5 <= 1) {
        sub_1000108B8((void *)a1);
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectWeakDestroy(a1 + 24);
    }

    unsigned int v6 = *((unsigned __int8 *)a2 + 41);
    if (v6 >= 2) {
      unsigned int v6 = *(_DWORD *)a2 + 2;
    }
    if (v6 == 1)
    {
      unsigned int v7 = *((unsigned __int8 *)a2 + 40);
      if (v7 >= 2) {
        unsigned int v7 = *(_DWORD *)a2 + 2;
      }
      if (v7 == 1)
      {
        uint64_t v11 = *((void *)a2 + 3);
        *(void *)(a1 + 24) = v11;
        *(void *)(a1 + 3sub_1000108B8(v0 + 2) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v11 - 8))(a1, a2);
        char v10 = 1;
        *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
      }

      else
      {
        if (v7)
        {
          __int128 v12 = *a2;
          __int128 v13 = a2[1];
          *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
          *(_OWORD *)a1 = v12;
          *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v13;
        }

        else
        {
          uint64_t v8 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v8;
          *(void *)(a1 + 3sub_1000108B8(v0 + 2) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, __int128 *))(v8 - 8))(a1, a2);
          *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
        }

        char v10 = 1;
      }
    }

    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      uint64_t v9 = *((void *)a2 + 2);
      *(void *)(a1 + swift_weakDestroy(v0 + 16) = v9;
      swift_bridgeObjectRetain(v9);
      swift_unknownObjectWeakCopyInit(a1 + 24, (char *)a2 + 24);
      char v10 = 0;
      *(void *)(a1 + 3sub_1000108B8(v0 + 2) = *((void *)a2 + 4);
    }

    *(_BYTE *)(a1 + 41) = v10;
  }

  return a1;
}

uint64_t initializeWithTake for ProtoProperty.ProtoPropertyInfo(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 41);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      __int128 v8 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v8;
      *(void *)(a1 + 3sub_1000108B8(v0 + 2) = *(void *)(a2 + 32);
      char v7 = 1;
      *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
    }

    else
    {
      __int128 v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }

      else
      {
        *(void *)(a1 + 3sub_1000108B8(v0 + 2) = *(void *)(a2 + 32);
        *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
      }

      char v7 = 1;
    }
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    swift_unknownObjectWeakTakeInit(a1 + 24, a2 + 24);
    char v7 = 0;
    *(void *)(a1 + 3sub_1000108B8(v0 + 2) = *(void *)(a2 + 32);
  }

  *(_BYTE *)(a1 + 41) = v7;
  return a1;
}

uint64_t assignWithTake for ProtoProperty.ProtoPropertyInfo(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
      if (v5 >= 2) {
        unsigned int v5 = *(_DWORD *)a1 + 2;
      }
      if (v5 <= 1) {
        sub_1000108B8((void *)a1);
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectWeakDestroy(a1 + 24);
    }

    unsigned int v6 = *(unsigned __int8 *)(a2 + 41);
    if (v6 >= 2) {
      unsigned int v6 = *(_DWORD *)a2 + 2;
    }
    if (v6 == 1)
    {
      unsigned int v7 = *(unsigned __int8 *)(a2 + 40);
      if (v7 >= 2) {
        unsigned int v7 = *(_DWORD *)a2 + 2;
      }
      if (v7 == 1)
      {
        __int128 v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v10;
        *(void *)(a1 + 3sub_1000108B8(v0 + 2) = *(void *)(a2 + 32);
        char v9 = 1;
        *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 1;
      }

      else
      {
        __int128 v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v8;
        if (v7)
        {
          *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
        }

        else
        {
          *(void *)(a1 + 3sub_1000108B8(v0 + 2) = *(void *)(a2 + 32);
          *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
        }

        char v9 = 1;
      }
    }

    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      swift_unknownObjectWeakTakeInit(a1 + 24, a2 + 24);
      char v9 = 0;
      *(void *)(a1 + 3sub_1000108B8(v0 + 2) = *(void *)(a2 + 32);
    }

    *(_BYTE *)(a1 + 41) = v9;
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for ProtoProperty.ProtoPropertyInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 42)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for ProtoProperty.ProtoPropertyInfo( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 26) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + swift_weakDestroy(v0 + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 4sub_1000108B8(v0 + 2) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 4sub_1000108B8(v0 + 2) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 41) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000F5598(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 41);
  return result;
}

uint64_t sub_1000F55B4(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + swift_weakDestroy(v0 + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(asub_1000108B8(v0 + 2) = 2;
  }

  *(_BYTE *)(result + 41) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ProtoProperty.ProtoPropertyInfo()
{
  return &type metadata for ProtoProperty.ProtoPropertyInfo;
}

uint64_t sub_1000F55EC()
{
  return *(unsigned __int8 *)(*(void *)v0 + 74LL);
}

uint64_t sub_1000F55F8()
{
  return sub_1000F4D14();
}

uint64_t sub_1000F5618@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F4D1C(a1);
}

uint64_t sub_1000F5638(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F5664(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000F5698(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000F56CC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F56F8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000F572C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000F5760(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001D4480);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t destroy for ProtoProperty.Config(uint64_t a1)
{
  return swift_unknownObjectWeakDestroy(a1 + 24);
}

uint64_t initializeWithCopy for ProtoProperty.Config(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  uint64_t v5 = a2 + 24;
  swift_bridgeObjectRetain(v4);
  swift_unknownObjectWeakCopyInit(a1 + 24, v5);
  *(void *)(a1 + 3sub_1000108B8(v0 + 2) = *(void *)(a2 + 32);
  return a1;
}

uint64_t assignWithCopy for ProtoProperty.Config(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  swift_unknownObjectWeakCopyAssign(a1 + 24, a2 + 24);
  *(void *)(a1 + 3sub_1000108B8(v0 + 2) = *(void *)(a2 + 32);
  return a1;
}

uint64_t initializeWithTake for ProtoProperty.Config(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectWeakTakeInit(a1 + 24, a2 + 24);
  *(void *)(a1 + 3sub_1000108B8(v0 + 2) = *(void *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for ProtoProperty.Config(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  swift_unknownObjectWeakTakeAssign(a1 + 24, a2 + 24);
  *(void *)(a1 + 3sub_1000108B8(v0 + 2) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProtoProperty.Config(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      int v2 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else if ((*(void *)(a1 + 32) & 0xF000000000000007LL) != 0)
    {
      int v2 = *(_DWORD *)(a1 + 24) & 0x7FFFFFFF;
    }

    else
    {
      int v2 = -1;
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProtoProperty.Config(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 4sub_1000E3528(v0, v2, 0) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      *(void *)(result + 3sub_1000108B8(v0 + 2) = 1LL;
      return result;
    }

    *(_BYTE *)(result + 4sub_1000E3528(v0, v2, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ProtoProperty.Config()
{
  return &type metadata for ProtoProperty.Config;
}

uint64_t sub_1000F59CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
  return sub_1000F56CC((uint64_t)&a31);
}

void *sub_1000F59D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *(*v14)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  va_list va;
  va_start(va, a10);
  return v14((uint64_t *)va, v11, v10, v13, v12);
}

uint64_t sub_1000F59F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34)
{
  return swift_unknownObjectWeakLoadStrong(&a34);
}

uint64_t sub_1000F5A00(uint64_t a1)
{
  return swift_getObjectType(a1);
}

double sub_1000F5A0C()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  return result;
}

uint64_t sub_1000F5A20()
{
  return swift_unknownObjectRelease(v0);
}

void PGetManyColumn.columnType.getter(char a1)
{
  __asm { BR              X10 }

void *sub_1000F5A64()
{
  return &type metadata for Data;
}

unint64_t sub_1000F5A94()
{
  unint64_t result = qword_1001D9000;
  if (!qword_1001D9000)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1001D9000);
  }

  return result;
}

unint64_t sub_1000F5AD0()
{
  unint64_t result = qword_1001D9008;
  if (!qword_1001D9008)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SQLiteUndefined,  &type metadata for SQLiteUndefined);
    atomic_store(result, (unint64_t *)&qword_1001D9008);
  }

  return result;
}

BOOL PGetManyColumn.hidden.getter(char a1)
{
  return a1 != 0;
}

Schematizer::PGetManyColumn_optional __swiftcall PGetManyColumn.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001B9288, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return (Schematizer::PGetManyColumn_optional)5;
  }
  else {
    return (Schematizer::PGetManyColumn_optional)v3;
  }
}

_UNKNOWN **static PGetManyColumn.allCases.getter()
{
  return &off_1001B9320;
}

uint64_t PGetManyColumn.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000F5B9C + 4 * byte_100164ED5[a1]))( 0x65756C6176LL,  0xE500000000000000LL);
}

uint64_t sub_1000F5B9C()
{
  return 0x7463656A626FLL;
}

uint64_t sub_1000F5BB0()
{
  return 0x64616F6C796170LL;
}

uint64_t sub_1000F5BC8()
{
  return 0x614E616D65686373LL;
}

uint64_t sub_1000F5BE4()
{
  return 0x79747265706F7270LL;
}

BOOL sub_1000F5C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000F68D8();
  return static SQLiteColumnDescribing.== infix(_:_:)(a1, a2, a3, v6);
}

void sub_1000F5C44()
{
}

void sub_1000F5C4C(uint64_t a1)
{
}

void sub_1000F5C54(uint64_t a1)
{
}

Schematizer::PGetManyColumn_optional sub_1000F5C5C@<W0>( Swift::String *a1@<X0>, Schematizer::PGetManyColumn_optional *a2@<X8>)
{
  result.value = PGetManyColumn.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t sub_1000F5C88@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PGetManyColumn.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

BOOL sub_1000F5CB0()
{
  return PGetManyColumn.hidden.getter(*v0);
}

void sub_1000F5CB8(void *a1@<X8>)
{
  *a1 = &off_1001B9320;
}

void sub_1000F5CC8()
{
}

uint64_t sub_1000F5CD0()
{
  return sub_1000F5CD8(*v0);
}

uint64_t sub_1000F5CD8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000F5D08 + 4 * byte_100164EDA[a1]))( 0x65756C6176LL,  0xE500000000000000LL);
}

uint64_t sub_1000F5D08()
{
  return 0x7463656A626FLL;
}

uint64_t sub_1000F5D1C()
{
  return 0x64616F6C796170LL;
}

uint64_t sub_1000F5D34()
{
  return 0x614E616D65686373LL;
}

uint64_t sub_1000F5D50()
{
  return 0x79747265706F7270LL;
}

uint64_t sub_1000F5D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return v3 & 1;
}

void sub_1000F5D88()
{
}

uint64_t PGetManyConnection.__allocating_init(_:argc:argv:)(uint64_t a1, int a2, uint64_t a3)
{
  return PGetManyConnection.init(_:argc:argv:)(a1, a2, a3);
}

uint64_t PGetManyConnection.init(_:argc:argv:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t)v3;
  uint64_t v9 = *v3;
  uint64_t v10 = sub_10000941C(&qword_1001D84E0);
  uint64_t v11 = swift_dynamicCastClass(a1, v10);
  if (!v11)
  {
    unint64_t v14 = sub_1000F5F70();
    sub_100010EA0((uint64_t)&unk_1001BA828, v14);
    *char v15 = xmmword_100163360;
    sub_1000C5DB8();
    goto LABEL_6;
  }

  uint64_t v12 = v11;
  swift_retain(v3);
  uint64_t v13 = swift_retain(a1);
  sub_1000E42E4(v13);
  if (v4)
  {
    sub_100010D00();
    swift_release();
LABEL_6:
    sub_10001443C();
    swift_deallocPartialClassInstance(v3, v9, 56LL, 7LL);
    return v5;
  }

  SQLiteBaseSchematizer.getSQLiteBridge()();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  swift_release();
  *(void *)(v5 + 4sub_1000E3528(v0, v2, 0) = v18;
  *(void *)(v5 + 48) = v20;
  sub_100010D00();
  uint64_t v5 = SQLiteBaseVTab.Connection.init(_:argc:argv:)(v12, a2, a3);
  sub_10001443C();
  return v5;
}

unint64_t sub_1000F5F70()
{
  unint64_t result = qword_1001D9010;
  if (!qword_1001D9010)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001650E8, &unk_1001BA828);
    atomic_store(result, (unint64_t *)&qword_1001D9010);
  }

  return result;
}

uint64_t PGetManyConnection.bestIndex(_:)(uint64_t result)
{
  uint64_t v1 = *(int *)result;
  if ((v1 & 0x80000000) != 0)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    return result;
  }

  if ((_DWORD)v1)
  {
    uint64_t v2 = 0LL;
    int v3 = 0;
    uint64_t v4 = *(void *)(result + 8);
    uint64_t v5 = (_BYTE *)(v4 + 5);
    while (v4)
    {
      uint64_t v6 = *(int *)(v5 - 5);
      if ((v6 & 0x80000000) != 0)
      {
        __break(1u);
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }

      if (*((_BYTE *)&off_1001B9348 + v6 + 32))
      {
        uint64_t v7 = 19LL;
        if (!*v5 || *(v5 - 1) != 2) {
          return v7;
        }
        if (__OFADD__(v3++, 1)) {
          goto LABEL_20;
        }
        uint64_t v9 = *(void *)(result + 32);
        if (!v9) {
          goto LABEL_23;
        }
        uint64_t v10 = v9 + v2;
        *(_DWORD *)uint64_t v10 = v3;
        *(_BYTE *)(v10 + 4) = 1;
      }

      v2 += 8LL;
      v5 += 12;
      if (!--v1) {
        goto LABEL_16;
      }
    }

    goto LABEL_22;
  }

  int v3 = 0;
LABEL_16:
  *(void *)(result + 64) = 0LL;
  *(void *)(result + 7sub_1000108B8(v0 + 2) = 1LL;
  return (v3 & 0xFFFFFFFE) != 2;
}

uint64_t sub_1000F6080()
{
  return swift_unknownObjectRelease(*(void *)(v0 + 40));
}

uint64_t PGetManyConnection.deinit()
{
  return v0;
}

uint64_t PGetManyConnection.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t sub_1000F60D4(uint64_t a1)
{
  return sub_1000F611C(a1);
}

uint64_t sub_1000F611C(uint64_t a1)
{
  *(_OWORD *)(v1 + 3sub_1000108B8(v0 + 2) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(void *)(v1 + 8sub_1000E3528(v0, v2, 0) = _swiftEmptyArrayStorage;
  if (*(_UNKNOWN ****)a1 == &type metadata for PGetManyConnection)
  {
    __int128 v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(v1 + 64) = v7;
    swift_unknownObjectRetain(v7);
    return SQLiteBaseVTab.Cursor.init(_:)(a1);
  }

  else
  {
    unint64_t v3 = sub_1000F5F70();
    sub_100010EA0((uint64_t)&unk_1001BA828, v3);
    *uint64_t v4 = xmmword_100163360;
    sub_1000C5DB8();
    sub_10001443C();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = type metadata accessor for PGetManyCursor(0LL);
    return swift_deallocPartialClassInstance(v1, v5, 88LL, 7LL);
  }

uint64_t sub_1000F61E8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == 3)
  {
    Swift::String v17 = SQLiteArgument.getStringNonNull()();
    uint64_t result = v17._countAndFlagsBits;
    if (!v18)
    {
      uint64_t countAndFlagsBits = v1[4]._countAndFlagsBits;
      object = v1[4]._object;
      uint64_t ObjectType = swift_getObjectType(countAndFlagsBits);
      uint64_t v22 = (uint64_t (*)(uint64_t, void *))object[1];
      swift_unknownObjectRetain(countAndFlagsBits);
      uint64_t v23 = v22(ObjectType, object);
      uint64_t v25 = v24;
      swift_unknownObjectRelease();
      uint64_t v26 = SQLiteArgument.getData()(*(sqlite3_value **)(a1 + 32));
      if (v27 >> 60 == 15)
      {
        unint64_t v28 = sub_1000E4274();
        sub_100010EA0((uint64_t)&type metadata for SQLiteError, v28);
        *(void *)(v29 + 8) = 0LL;
        *(void *)(v29 + swift_weakDestroy(v0 + 16) = 0LL;
        *(void *)uint64_t v29 = 6LL;
        *(_BYTE *)(v29 + 24) = 4;
        sub_1000C5DB8();
        swift_bridgeObjectRelease();
        return sub_100010CA0();
      }

      else
      {
        uint64_t v32 = v26;
        unint64_t v33 = v27;
        type metadata accessor for ProtobufPayload();
        uint64_t v34 = ProtobufPayload.__allocating_init(with:from:payload:)( v17._countAndFlagsBits,  (uint64_t)v17._object,  v23,  v25,  v32,  v33);
        unint64_t v35 = sub_1000EDB24();
        v2[2]._uint64_t countAndFlagsBits = v34;
        v2[2]._object = (void *)v35;
        swift_unknownObjectRelease();
        Swift::String v36 = SQLiteArgument.getStringNonNull()();
        uint64_t result = v36._countAndFlagsBits;
        if (!v37)
        {
          v2[3] = v36;
          return swift_bridgeObjectRelease();
        }
      }
    }
  }

  else if (v4 == 2)
  {
    Swift::String v6 = SQLiteArgument.getStringNonNull()();
    uint64_t result = v6._countAndFlagsBits;
    if (!v7)
    {
      uint64_t v8 = v1[4]._countAndFlagsBits;
      uint64_t v9 = swift_getObjectType(v2[4]._countAndFlagsBits);
      uint64_t v10 = v2[4]._object;
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = (void (*)(uint64_t, uint64_t, void *))v10[3];
      swift_unknownObjectRetain(v8);
      v12(v11, v9, v10);
      uint64_t v14 = v13;
      char v16 = v15;
      sub_100010CA0();
      swift_unknownObjectRelease();
      v2[2]._uint64_t countAndFlagsBits = v14;
      v2[2]._object = v16;
      swift_unknownObjectRelease();
      v2[3] = v6;
      return swift_bridgeObjectRelease();
    }
  }

  else
  {
    unint64_t v30 = sub_1000F5F70();
    sub_100010EA0((uint64_t)&unk_1001BA828, v30);
    *uint64_t v31 = 0LL;
    v31[1] = 0LL;
    return sub_1000C5DB8();
  }

  return result;
}

uint64_t PGetManyCursor.filter(idxNum:idxStr:arguments:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = SQLiteBaseVTab.Cursor.filter(idxNum:idxStr:arguments:)();
  if (!v4 && !(_DWORD)result)
  {
    sub_1000F61E8(a3);
    uint64_t v8 = v3[4];
    if (v8 && (uint64_t v9 = v5[7]) != 0)
    {
      uint64_t v11 = v5[5];
      uint64_t v10 = v5[6];
      uint64_t ObjectType = swift_getObjectType(v5[4]);
      uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v11 + 104);
      swift_unknownObjectRetain(v8);
      __n128 v14 = swift_bridgeObjectRetain(v9);
      uint64_t v15 = v13(v10, v9, ObjectType, v11, v14);
      sub_100010CA0();
      swift_bridgeObjectRelease();
      v5[10] = v15;
      swift_bridgeObjectRelease();
      return 0LL;
    }

    else
    {
      unint64_t v16 = sub_1000F5F70();
      sub_100010EA0((uint64_t)&unk_1001BA828, v16);
      *Swift::String v17 = 0xD000000000000012LL;
      v17[1] = 0x8000000100172CB0LL;
      return sub_1000C5DB8();
    }
  }

  return result;
}

Swift::Int64 __swiftcall PGetManyCursor.rowCount()()
{
  return *(void *)(*(void *)(v0 + 80) + 16LL);
}

Swift::Int32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PGetManyCursor.setValue(forColumn:on:)( Swift::String forColumn, SQLiter::SQLiteContext on)
{
  object = forColumn._object;
  uint64_t countAndFlagsBits = forColumn._countAndFlagsBits;
  SQLiteDatabase.unsafeConnection()();
  swift_bridgeObjectRetain(object);
  v5._uint64_t countAndFlagsBits = countAndFlagsBits;
  v5._object = object;
  v6.value = PGetManyColumn.init(rawValue:)(v5).value;
  if (v6.value != Schematizer_PGetManyColumn_unknownDefault && *(void *)(v2 + 32)) {
    __asm { BR              X10 }
  }

  return 1;
}

uint64_t sub_1000F679C(uint64_t a1)
{
  uint64_t v2 = sub_10000941C(&qword_1001D8F00);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000F67DC()
{
  return swift_bridgeObjectRelease(v0[10]);
}

void *PGetManyCursor.deinit()
{
  return v0;
}

uint64_t PGetManyCursor.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

unint64_t sub_1000F6868()
{
  unint64_t result = qword_1001D9018;
  if (!qword_1001D9018)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PGetManyColumn,  &type metadata for PGetManyColumn);
    atomic_store(result, (unint64_t *)&qword_1001D9018);
  }

  return result;
}

unint64_t sub_1000F68A4(void *a1)
{
  a1[1] = sub_1000F68D8();
  a1[2] = sub_1000F6914();
  unint64_t result = sub_1000F6950();
  a1[3] = result;
  return result;
}

unint64_t sub_1000F68D8()
{
  unint64_t result = qword_1001D9020;
  if (!qword_1001D9020)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PGetManyColumn,  &type metadata for PGetManyColumn);
    atomic_store(result, (unint64_t *)&qword_1001D9020);
  }

  return result;
}

unint64_t sub_1000F6914()
{
  unint64_t result = qword_1001D9028;
  if (!qword_1001D9028)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PGetManyColumn,  &type metadata for PGetManyColumn);
    atomic_store(result, (unint64_t *)&qword_1001D9028);
  }

  return result;
}

unint64_t sub_1000F6950()
{
  unint64_t result = qword_1001D9030;
  if (!qword_1001D9030)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PGetManyColumn,  &type metadata for PGetManyColumn);
    atomic_store(result, (unint64_t *)&qword_1001D9030);
  }

  return result;
}

unint64_t sub_1000F6990()
{
  unint64_t result = qword_1001D9038;
  if (!qword_1001D9038)
  {
    uint64_t v1 = sub_1000094A0(&qword_1001D9040);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001D9038);
  }

  return result;
}

unint64_t sub_1000F69D4(uint64_t a1)
{
  unint64_t result = sub_1000F6868();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1000F69FC()
{
  unint64_t result = qword_1001D9048;
  if (!qword_1001D9048)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PGetManyColumn,  &type metadata for PGetManyColumn);
    atomic_store(result, (unint64_t *)&qword_1001D9048);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for PGetManyColumn(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1000F6A84 + 4 * byte_100164EE4[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000F6AB8 + 4 * byte_100164EDF[v4]))();
}

uint64_t sub_1000F6AB8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F6AC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000F6AC8LL);
  }
  return result;
}

uint64_t sub_1000F6AD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000F6ADCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1000F6AE0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F6AE8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for PGetManyColumn()
{
}

void type metadata accessor for PGetManyConfig()
{
}

uint64_t type metadata accessor for PGetManyConnection(uint64_t a1)
{
  return sub_100018ABC(a1, qword_1001D90A0, (uint64_t)&nominal type descriptor for PGetManyConnection);
}

uint64_t sub_1000F6B20(uint64_t a1)
{
  uint64_t v2 = &unk_100165078;
  return swift_initClassMetadata2(a1, 256LL, 1LL, &v2, a1 + 192);
}

uint64_t type metadata accessor for PGetManyCursor(uint64_t a1)
{
  return sub_100018ABC(a1, qword_1001D91B8, (uint64_t)&nominal type descriptor for PGetManyCursor);
}

uint64_t sub_1000F6B74(uint64_t a1)
{
  v2[0] = &unk_1001650C0;
  v2[1] = &unk_1001650C0;
  v2[2] = &unk_100165078;
  v2[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 256LL, 4LL, v2, a1 + 216);
}

unint64_t sub_1000F6BD0(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_1000F6BE8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }

  return a1;
}

void *sub_1000F6C30(void *a1, void *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      uint64_t v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }

uint64_t sub_1000F6CD0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_1000F6D30(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(vswift_weakDestroy(v0 + 3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000F6D84(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }

  return result;
}

uint64_t sub_1000F6DE0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1000F6DF8(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else if (a2)
  {
    result[1] = (a2 - 1);
  }

  return result;
}

void type metadata accessor for PGetManyError()
{
}

void sub_1000F6E24(uint64_t a1, uint64_t a2)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PPayloadFunction.perform(with:arguments:)( SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  if (!v2)
  {
    SQLiteBaseSchematizer.getSQLiteBridge()();
    uint64_t v6 = v5;
    uint64_t v8 = v7;
    swift_release();
    if (*((void *)arguments._rawValue + 2))
    {
      uint64_t ObjectType = swift_getObjectType(v6);
      (*(void (**)(void, uint64_t, uint64_t))(v8 + 24))(*((void *)arguments._rawValue + 4), ObjectType, v8);
      uint64_t v11 = v10;
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v14 = swift_getObjectType(v11);
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 24))(v14, v13);
      unint64_t v17 = v16;
      SQLiteContext.setData(_:destructor:)(v15, v16, 1, (sqlite3_context *)with.context._rawValue);
      sub_100010A30(v15, v17);
      swift_unknownObjectRelease();
    }

    else
    {
      __break(1u);
    }
  }

uint64_t type metadata accessor for PPayloadFunction()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer16PPayloadFunction);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PSetTimeWindowFunction.perform(with:arguments:)( SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  uint64_t v3 = *((void *)arguments._rawValue + 2);
  if (!v3)
  {
    __break(1u);
    goto LABEL_10;
  }

  double v4 = SQLiteArgument.getDouble()();
  if (v3 == 1)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }

  double v5 = v4;
  double v7 = SQLiteArgument.getDouble()();
  if (v5 >= v7)
  {
    unint64_t v11 = sub_1000E43B4();
    uint64_t v12 = swift_allocError(&type metadata for SchemaError, v11, 0LL, 0LL);
    *(void *)uint64_t v13 = 0xD000000000000028LL;
    *(void *)(v13 + 8) = 0x8000000100172D60LL;
    *(_BYTE *)(v13 + 41) = 0;
    swift_willThrow(v12);
  }

  else
  {
    double v8 = v7;
    sub_1000E42D0(v6);
    if (!v2)
    {
      if (v5 <= v8)
      {
        uint64_t v10 = v9;
        swift_beginAccess(v9 + 32, v14, 1LL, 0LL);
        *(double *)(v10 + 3sub_1000108B8(v0 + 2) = v5;
        *(double *)(v10 + 4sub_1000E3528(v0, v2, 0) = v8;
        swift_release();
        SQLiteContext.setBool(_:)(1);
        return;
      }

      goto LABEL_11;
    }
  }

uint64_t type metadata accessor for PSetTimeWindowFunction()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer22PSetTimeWindowFunction);
}

uint64_t destroy for SQLiteAttributedMessage(void *a1)
{
  return swift_unknownObjectRelease(a1[2]);
}

__int128 *initializeWithCopy for SQLiteAttributedMessage(__int128 *a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __int128 v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  swift_unknownObjectRetain(v3);
  swift_unknownObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for SQLiteAttributedMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v6);
  a1[1] = v5;
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[2];
  a1[2] = v7;
  swift_unknownObjectRetain(v7);
  swift_unknownObjectRelease(v9);
  a1[3] = v8;
  return a1;
}

void *assignWithTake for SQLiteAttributedMessage(void *a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  swift_unknownObjectRelease(a1[2]);
  *((_OWORD *)a1 + 1) = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for SQLiteAttributedMessage()
{
  return &type metadata for SQLiteAttributedMessage;
}

uint64_t sub_1000F71B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType = swift_getObjectType(a4);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(a5 + 160);
  sub_1000F78E0();
  v8(ObjectType, a5);
  sub_1000F78C0();
  sub_1000F78AC();
  return sub_1000F7894(a4);
}

void sub_1000F725C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void (*v14)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  void v15[3];
  void v16[2];
  v15[0] = a1;
  v15[1] = a2;
  v16[0] = 64LL;
  v16[1] = 0xE100000000000000LL;
  unint64_t v11 = sub_1000106CC();
  if ((StringProtocol.contains<A>(_:)(v16, &type metadata for String, &type metadata for String, v11, v11) & 1) != 0)
  {
    v12._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    v12._object = (void *)0x8000000100172DF0LL;
    SQLiteContext.setError(message:code:)(v12, -1);
  }

  else
  {
    uint64_t ObjectType = swift_getObjectType(a6);
    uint64_t v14 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 64);
    sub_1000F78E0();
    v14(v15, a1, a2, ObjectType, a7);
    swift_unknownObjectRelease();
    sub_1000F748C();
    sub_1000F679C((uint64_t)v15);
  }

void sub_1000F748C()
{
  if (v1[57] == 255)
  {
    sub_1000F679C((uint64_t)v1);
    SQLiteContext.setNull()();
  }

  else
  {
    sub_1000F4798((uint64_t)v1, (uint64_t)v2);
    sub_1000F75E4();
    sub_1000F4848((uint64_t)v2);
  }

uint64_t sub_1000F7528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t ObjectType = swift_getObjectType(a6);
  Swift::String v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 120);
  sub_1000F78E0();
  v12(a1, a2, ObjectType, a7);
  sub_1000F78C0();
  sub_1000F78AC();
  return sub_1000F7894(a6);
}

void sub_1000F75E4()
{
  __asm { BR              X10 }

void sub_1000F763C()
{
}

  ;
}

uint64_t sub_1000F784C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001D8F00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F7894(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

void sub_1000F78AC()
{
}

uint64_t sub_1000F78C0()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000F78D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return SQLiteContext.setError<A>(_:message:code:)(a1, a2 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a3, -1, v6, a6);
}

uint64_t sub_1000F78E0()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_1000F78E8()
{
  return v0;
}

uint64_t IntegerSet.forEach(_:)( void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v72 = a1;
  uint64_t v73 = a2;
  uint64_t v10 = *(void *)(a4 - 8);
  __chkstk_darwin(a1);
  sub_100032C48();
  uint64_t v71 = v11;
  sub_10003D810();
  __chkstk_darwin(v12);
  sub_10003D828();
  uint64_t v70 = v13;
  sub_10003D810();
  __chkstk_darwin(v14);
  sub_10005A2F8();
  uint64_t v69 = v15;
  uint64_t v17 = *(void *)(*(void *)(v16 + 8) + 32LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v17,  a4,  &protocol requirements base descriptor for Strideable,  &associated type descriptor for Strideable.Stride);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a4, AssociatedTypeWitness);
  uint64_t v76 = type metadata accessor for ClosedRange<>.Index(0LL, a4, v17, AssociatedConformanceWitness);
  uint64_t v20 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  sub_100032C48();
  uint64_t v74 = v21;
  sub_10003D810();
  __chkstk_darwin(v22);
  sub_10005A2F8();
  uint64_t v82 = v23;
  uint64_t v24 = type metadata accessor for ClosedRange(255LL, a4, *(void *)(v17 + 8));
  uint64_t v79 = AssociatedConformanceWitness;
  uint64_t v80 = v17;
  v83[1] = v17;
  v83[2] = AssociatedConformanceWitness;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ClosedRange<A>, v24);
  uint64_t v65 = type metadata accessor for IndexingIterator(0LL, v24, WitnessTable);
  uint64_t v64 = *(void *)(v65 - 8);
  sub_100027160();
  __chkstk_darwin(v26);
  sub_100032C48();
  uint64_t v63 = v27;
  sub_10003D810();
  __chkstk_darwin(v28);
  sub_10005A2F8();
  uint64_t v81 = v29;
  uint64_t v30 = *(void *)(v24 - 8);
  uint64_t v31 = *(void *)(v30 + 64);
  __chkstk_darwin(v32);
  uint64_t v62 = (char *)&v59 - v33;
  __n128 v34 = swift_bridgeObjectRetain(a3);
  uint64_t v35 = Array.startIndex.getter(v34);
  Swift::Int after = v35;
  if (v35 == sub_1000F985C()) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v67 = v10;
  uint64_t v59 = v31;
  uint64_t v60 = v30;
  uint64_t v61 = a3;
  uint64_t v36 = v76;
  uint64_t v66 = v20;
  uint64_t v78 = v24;
  while (2)
  {
    uint64_t v37 = v24;
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v35, IsNativeType, a3, v37);
    if (IsNativeType)
    {
      uint64_t v39 = v60;
      sub_1000F9740( a3 + ((*(unsigned __int8 *)(v39 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))
      + *(void *)(v60 + 72) * v35,
        *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 16));
      uint64_t v24 = v37;
      goto LABEL_5;
    }

    uint64_t result = _ArrayBuffer._getElementSlowPath(_:)(v35, a3, v37);
    if (v59 == 8)
    {
      uint64_t v24 = v37;
      v83[0] = result;
      uint64_t v39 = v60;
      sub_1000F9740((uint64_t)v83, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 16));
      swift_unknownObjectRelease();
LABEL_5:
      sub_100047294();
      Array.formIndex(after:)(&after);
      swift_bridgeObjectRelease();
      uint64_t v40 = v63;
      v77(v63, a3, v24);
      ClosedRange<>.startIndex.getter(v24, v80, v79);
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(a3, v24);
      uint64_t v41 = v65;
      uint64_t v42 = v40 + *(int *)(v65 + 36);
      uint64_t v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32);
      v68(v42, v82, v36);
      uint64_t v43 = v81;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 32))(v81, v40, v41);
      uint64_t v75 = v43 + *(int *)(v41 + 36);
      while (1)
      {
        uint64_t v44 = v82;
        uint64_t v46 = v79;
        uint64_t v45 = v80;
        ClosedRange<>.endIndex.getter(v24, v80, v79);
        uint64_t v47 = v75;
        char v48 = static ClosedRange<>.Index.== infix(_:_:)(v75, v44, a4, v45, v46);
        uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
        uint64_t v36 = v76;
        v49(v44, v76);
        if ((v48 & 1) != 0) {
          break;
        }
        uint64_t v77 = v6;
        uint64_t v50 = v74;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v74, v47, v36);
        uint64_t result = sub_100010708(v50, 1LL, a4);
        if ((_DWORD)result == 1)
        {
          __break(1u);
          goto LABEL_17;
        }

        char v52 = *(void (**)(uint64_t))(v67 + 32);
        uint64_t v53 = v70;
        uint64_t v54 = sub_1000F9718();
        v52(v54);
        uint64_t v55 = v69;
        ((void (*)(uint64_t, uint64_t, uint64_t))v52)(v69, v53, a4);
        uint64_t v56 = v82;
        ClosedRange<>.index(after:)(v47, v78, v80, v79);
        v49(v47, v36);
        v68(v47, v56, v36);
        uint64_t v57 = v71;
        ((void (*)(uint64_t, uint64_t, uint64_t))v52)(v71, v55, a4);
        uint64_t v58 = v77;
        v72(v57);
        uint64_t v6 = v58;
        if (v58)
        {
          sub_1000F97A8();
          sub_1000F9728();
          return swift_bridgeObjectRelease();
        }

        sub_1000F97A8();
        uint64_t v20 = v66;
        uint64_t v24 = v78;
      }

      sub_1000F9728();
      uint64_t v35 = after;
      a3 = v61;
      if (v35 != sub_1000F985C()) {
        continue;
      }
      return swift_bridgeObjectRelease();
    }

    break;
  }

void IntegerSet.add(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v21;
  a20 = v22;
  uint64_t v24 = v23;
  uint64_t v244 = v25;
  uint64_t v26 = *(void *)(v23 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v26, v26, "lower upper ", 0LL);
  sub_100027160();
  __chkstk_darwin(v27);
  sub_100032C48();
  uint64_t v236 = v28;
  sub_10003D810();
  __chkstk_darwin(v29);
  sub_10005A2F8();
  uint64_t v234 = v30;
  v225 = *(void **)(v24 + 24);
  uint64_t v31 = v225[1];
  uint64_t v227 = *(void *)(v31 + 24);
  v231 = *(void (**)(uint64_t, uint64_t))(v227 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v231,  v26,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  sub_1000F979C();
  __chkstk_darwin(v32);
  v230 = (char *)v219 - v33;
  uint64_t v228 = v31;
  uint64_t v239 = *(void *)(*(void *)(v31 + 32) + 8LL);
  uint64_t v34 = type metadata accessor for ClosedRange(0LL, v26, v239);
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  sub_100032C48();
  uint64_t v223 = v36;
  sub_10003D810();
  uint64_t v38 = __chkstk_darwin(v37);
  uint64_t v40 = (char *)v219 - v39;
  __chkstk_darwin(v38);
  sub_10003D828();
  uint64_t v237 = v41;
  sub_10003D810();
  __chkstk_darwin(v42);
  uint64_t v44 = (char *)v219 - v43;
  uint64_t v243 = *(void *)(v26 - 8);
  sub_100027160();
  __chkstk_darwin(v45);
  sub_100032C48();
  uint64_t v226 = v46;
  sub_10003D810();
  __chkstk_darwin(v47);
  sub_10003D828();
  unint64_t v233 = v48;
  sub_10003D810();
  __chkstk_darwin(v49);
  sub_10003D828();
  uint64_t v232 = v50;
  sub_10003D810();
  __chkstk_darwin(v51);
  sub_10005A2F8();
  v224 = v52;
  uint64_t v53 = *v20;
  uint64_t v247 = *v20;
  uint64_t v54 = type metadata accessor for Array(0LL, v34);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v54);
  uint64_t v56 = Collection.isEmpty.getter(v54, WitnessTable);
  v241 = v20;
  v242 = v44;
  uint64_t v245 = v35;
  uint64_t v235 = v54;
  uint64_t v240 = v34;
  if ((v56 & 1) != 0)
  {
    uint64_t v57 = TupleTypeMetadata2;
    uint64_t v58 = v244;
    if ((dispatch thunk of static Comparable.<= infix(_:_:)(v244, v244, v26, v239) & 1) != 0)
    {
      uint64_t v59 = v58;
      uint64_t v60 = v234;
      uint64_t v61 = v234 + *(int *)(v57 + 48);
      uint64_t v62 = v243;
      sub_1000F96D8(v234, v59);
      sub_1000F96D8(v61, v59);
      uint64_t v63 = v236;
      uint64_t v64 = v236 + *(int *)(v57 + 48);
      sub_1000F96D8(v236, v60);
      sub_1000F96D8(v64, v61);
      uint64_t v65 = v237;
      sub_1000F96D8(v237, v63);
      uint64_t v66 = (uint64_t)v242;
      uint64_t v67 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
      v67(v64, v26);
      uint64_t v68 = v63 + *(int *)(v57 + 48);
      sub_1000F96D8(v63, v60);
      sub_1000F96D8(v68, v61);
      sub_1000F96D8(v65 + *(int *)(v240 + 36), v68);
      v67(v63, v26);
      sub_1000770AC(v66, v65, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v245 + 32));
      uint64_t v69 = v66;
LABEL_4:
      Array.append(_:)(v69, v235);
LABEL_29:
      sub_100009AA0();
      return;
    }

    __break(1u);
    __break(1u);
    goto LABEL_31;
  }

  v222 = v40;
  uint64_t v246 = v53;
  __chkstk_darwin(v56);
  uint64_t v70 = v225;
  v219[-4] = v26;
  v219[-3] = v70;
  uint64_t v71 = v244;
  v219[-2] = v244;
  __n128 v72 = swift_bridgeObjectRetain(v53);
  Collection.firstIndex(where:)(&v247, sub_1000F95F8, &v219[-6], v54, WitnessTable, v72);
  swift_bridgeObjectRelease();
  if ((v248 & 1) != 0)
  {
    uint64_t v73 = sub_100047294();
    uint64_t v74 = v240;
    sub_1000F9840(v73);
    sub_1000F9808();
    uint64_t v75 = v243;
    uint64_t v76 = (uint64_t)v242;
    sub_1000F98DC(-1LL);
    uint64_t v77 = v233;
    uint64_t v78 = v26;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v75 + 16))(v233, v76 + *(int *)(v74 + 36), v26);
    sub_1000A22A0(*(uint64_t (**)(void))(v245 + 8));
    uint64_t v79 = v231;
    sub_1000F96E0((uint64_t)v231);
    uint64_t v80 = v230;
    sub_1000F98D0((uint64_t)&unk_100165198);
    uint64_t v81 = v226;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v80, v78, v79);
    uint64_t v82 = v232;
    uint64_t v83 = sub_1000F98C4();
    dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)(v83, v84, v78, v85);
    unint64_t v86 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
    sub_1000F9890(v81);
    sub_1000F9890(v77);
    sub_1000F9848();
    uint64_t v87 = v244;
    LOBYTE(v75) = dispatch thunk of static Equatable.== infix(_:_:)(v82, v244, v78, v88);
    sub_1000F9890(v82);
    v231 = v86;
    if ((v75 & 1) == 0)
    {
      if ((dispatch thunk of static Comparable.<= infix(_:_:)(v87, v87, v78, v239) & 1) != 0)
      {
        uint64_t v162 = v87;
        uint64_t v163 = TupleTypeMetadata2;
        uint64_t v164 = v234;
        uint64_t v165 = v234 + *(int *)(TupleTypeMetadata2 + 48);
        sub_1000B1B58(v234, v162);
        sub_1000B1B58(v165, v162);
        uint64_t v166 = v236;
        uint64_t v167 = v236 + *(int *)(v163 + 48);
        sub_1000B1B58(v236, v164);
        sub_1000B1B58(v167, v165);
        v168 = *(void (**)(uint64_t))(v243 + 32);
        uint64_t v169 = v237;
        sub_1000F97F0(v237, v166);
        v170 = v231;
        v231(v167, v78);
        uint64_t v171 = v166 + *(int *)(v163 + 48);
        sub_1000F97F0(v166, v164);
        uint64_t v172 = sub_1000F9718();
        v168(v172);
        sub_1000F97F0(v169 + *(int *)(v74 + 36), v171);
        v170(v166, v78);
        uint64_t v173 = sub_1000F9868();
        v174(v173, v169, v74);
        uint64_t v69 = v165;
        goto LABEL_4;
      }

      goto LABEL_35;
    }

    uint64_t v89 = sub_100047294();
    uint64_t v90 = sub_1000F9840(v89);
    swift_bridgeObjectRelease();
    BOOL v91 = __OFSUB__(v90, 1LL);
    unint64_t v92 = v90 - 1;
    if (!v91)
    {
      uint64_t v93 = sub_100047294();
      sub_1000F9840(v93);
      sub_1000F9808();
      BOOL v91 = __OFSUB__(v82, 1LL);
      uint64_t v94 = v82 - 1;
      uint64_t v95 = v239;
      if (!v91)
      {
        unint64_t v233 = v92;
        uint64_t v96 = v237;
        sub_1000F98DC(v94);
        uint64_t v97 = v232;
        sub_1000B1B58(v232, v96);
        ((void (*)(uint64_t, uint64_t))v225)(v96, v74);
        uint64_t v98 = sub_1000F98C4();
        if ((dispatch thunk of static Comparable.<= infix(_:_:)(v98, v99, v78, v95) & 1) != 0)
        {
          uint64_t v100 = v87;
          uint64_t v101 = v78;
          uint64_t v102 = TupleTypeMetadata2;
          uint64_t v103 = v234;
          unint64_t v104 = (uint64_t *)(v234 + *(int *)(TupleTypeMetadata2 + 48));
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v243 + 32))(v234, v97, v78);
          sub_1000B1B58((uint64_t)v104, v100);
          uint64_t v105 = v236;
          uint64_t v106 = v236 + *(int *)(v102 + 48);
          sub_1000B1B58(v236, v103);
          sub_1000B1B58(v106, (uint64_t)v104);
          uint64_t v107 = (uint64_t)v222;
          sub_1000F9794((uint64_t)v222, v105);
          uint64_t v108 = (void (*)(uint64_t))v231;
          v231(v106, v101);
          uint64_t v109 = v105 + *(int *)(v102 + 48);
          sub_1000F9794(v105, v103);
          sub_1000F9794(v109, (uint64_t)v104);
          sub_1000F9794(v107 + *(int *)(v74 + 36), v109);
          uint64_t v110 = sub_1000F98C4();
          v108(v110);
          uint64_t v111 = v245;
          uint64_t v112 = (uint64_t)v242;
          (*(void (**)(char *, uint64_t, uint64_t))(v245 + 32))(v242, v107, v74);
          sub_1000F9788();
          uint64_t v113 = *v104;
          unint64_t v114 = v233;
          sub_1000F95A8(v233, v113, v74);
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v111 + 40))( v113 + ((*(unsigned __int8 *)(v111 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80))
          + *(void *)(v111 + 72) * v114,
            v112,
            v74);
          goto LABEL_29;
        }

        goto LABEL_34;
      }

void IntegerSet.lowerBound.getter()
{
  uint64_t v7 = sub_1000F96A4(v4, v5, v6);
  sub_1000F97F8(v7);
  sub_1000F979C();
  __chkstk_darwin(v8);
  sub_1000F9758();
  __chkstk_darwin(v9);
  uint64_t v10 = sub_1000F9680();
  swift_getWitnessTable(&protocol conformance descriptor for [A], v10);
  uint64_t v11 = sub_1000F9814();
  Collection.first.getter(v11);
  if (sub_100010708(v1, 1LL, v0) == 1)
  {
    sub_1000F97B8();
    uint64_t v12 = sub_1000F9898();
    dispatch thunk of static FixedWidthInteger.max.getter(v12);
  }

  else
  {
    sub_1000770AC(v2, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
    sub_1000F9774();
    sub_1000770AC(v13, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
  }

  sub_100009AA0();
}

void IntegerSet.upperBound.getter()
{
  uint64_t v7 = sub_1000F96A4(v4, v5, v6);
  sub_1000F97F8(v7);
  sub_1000F979C();
  __chkstk_darwin(v8);
  sub_1000F9758();
  __chkstk_darwin(v9);
  uint64_t v10 = sub_1000F9680();
  swift_getWitnessTable(&protocol conformance descriptor for [A], v10);
  uint64_t v11 = sub_1000F9814();
  BidirectionalCollection.last.getter(v11);
  if (sub_100010708(v1, 1LL, v0) == 1)
  {
    sub_1000F97B8();
    uint64_t v12 = sub_1000F9898();
    dispatch thunk of static FixedWidthInteger.min.getter(v12, v13);
  }

  else
  {
    sub_1000770AC(v2, v1 + *(int *)(v0 + 36), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
    sub_1000F9774();
    sub_1000770AC(v14, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
  }

  sub_100009AA0();
}

BOOL IntegerSet.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1000F9828(a1, a2, *(void *)(*(void *)(*(void *)(a4 + 8) + 32LL) + 8LL));
  uint64_t v9 = type metadata accessor for Optional(0LL, v8);
  uint64_t v10 = *(void *)(v9 - 8);
  sub_1000F979C();
  __chkstk_darwin(v11);
  uint64_t v13 = &v18[-v12];
  uint64_t v22 = a2;
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v21 = a1;
  uint64_t v14 = type metadata accessor for Array(0LL, v8);
  swift_bridgeObjectRetain(a2);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v14);
  Sequence.first(where:)(sub_1000F9618, v18, v14, WitnessTable);
  swift_bridgeObjectRelease();
  BOOL v16 = sub_100010708((uint64_t)v13, 1LL, v8) != 1;
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
  return v16;
}

uint64_t sub_1000F9024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for ClosedRange(0LL, a3, *(void *)(*(void *)(*(void *)(a4 + 8) + 32LL) + 8LL));
  return ClosedRange.contains(_:)(a2, v5) & 1;
}

uint64_t sub_1000F9084(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of static Comparable.< infix(_:_:)(a2, a1) & 1;
}

void IntegerSet.forEach(_:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v82 = v6;
  uint64_t v83 = v7;
  uint64_t v81 = *(void *)(v2 - 8);
  sub_100027160();
  __chkstk_darwin(v8);
  sub_100032C48();
  uint64_t v80 = v9;
  sub_10003D810();
  __chkstk_darwin(v10);
  sub_10005A2F8();
  uint64_t v79 = v11;
  Swift::Int v13 = *(void *)(*(void *)(v12 + 8) + 32LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v13,  v3,  &protocol requirements base descriptor for Strideable,  &associated type descriptor for Strideable.Stride);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v3, AssociatedTypeWitness);
  uint64_t v16 = type metadata accessor for ClosedRange<>.Index(0LL, v3, v13, AssociatedConformanceWitness);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v68 - v22;
  uint64_t v25 = sub_1000F9828(v21, v24, *(void *)(v13 + 8));
  Swift::Int v85 = v13;
  v90[1] = v13;
  v90[2] = AssociatedConformanceWitness;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ClosedRange<A>, v25);
  uint64_t v27 = v25;
  uint64_t v76 = v25;
  uint64_t v28 = type metadata accessor for IndexingIterator(0LL, v25, WitnessTable);
  uint64_t v73 = *(void *)(v28 - 8);
  uint64_t v74 = v28;
  sub_100027160();
  __chkstk_darwin(v29);
  sub_100032C48();
  uint64_t v75 = v30;
  sub_10003D810();
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)&v68 - v32;
  uint64_t v34 = *(void *)(v27 - 8);
  sub_1000F979C();
  uint64_t v69 = v35;
  __chkstk_darwin(v36);
  uint64_t v71 = (char *)&v68 - v37;
  __n128 v38 = swift_bridgeObjectRetain(v5);
  uint64_t v39 = Array.startIndex.getter(v38);
  v90[0] = v39;
  if (v39 == Array.endIndex.getter(v5, v76))
  {
LABEL_2:
    swift_bridgeObjectRelease();
    sub_100009AA0();
    return;
  }

  uint64_t v70 = v5;
  uint64_t v77 = v20;
  uint64_t v78 = v17;
  unint64_t v86 = v33;
  uint64_t v87 = AssociatedConformanceWitness;
  uint64_t v72 = v34;
  while (2)
  {
    uint64_t v40 = v76;
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v39, IsNativeType, v5, v40);
    if (IsNativeType)
    {
      unint64_t v42 = v5
      uint64_t v43 = v71;
      uint64_t v88 = *(char **)(v72 + 16);
      ((void (*)(char *, unint64_t, uint64_t))v88)(v71, v42, v76);
      goto LABEL_6;
    }

    uint64_t v63 = sub_1000A2380();
    uint64_t v64 = v76;
    uint64_t v66 = _ArrayBuffer._getElementSlowPath(_:)(v63, v65, v76);
    if (v69 == 8)
    {
      uint64_t v67 = v64;
      uint64_t v89 = v66;
      uint64_t v43 = v71;
      uint64_t v88 = *(char **)(v72 + 16);
      ((void (*)(char *, uint64_t *, uint64_t))v88)(v71, &v89, v67);
      swift_unknownObjectRelease();
      uint64_t v5 = v70;
LABEL_6:
      swift_bridgeObjectRetain(v5);
      uint64_t v44 = v76;
      Array.formIndex(after:)(v90);
      swift_bridgeObjectRelease();
      uint64_t v45 = v75;
      ((void (*)(uint64_t, char *, uint64_t))v88)(v75, v43, v44);
      Swift::Int v46 = v85;
      ClosedRange<>.startIndex.getter(v44, v85, AssociatedConformanceWitness);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v43, v44);
      uint64_t v47 = v74;
      uint64_t v48 = v45 + *(int *)(v74 + 36);
      uint64_t v84 = *(void (**)(uint64_t, char *, uint64_t))(v17 + 32);
      v84(v48, v23, v16);
      uint64_t v49 = v86;
      (*(void (**)(char *, uint64_t, uint64_t))(v73 + 32))(v86, v75, v47);
      uint64_t v88 = &v49[*(int *)(v47 + 36)];
      while (1)
      {
        ClosedRange<>.endIndex.getter(v44, v46, AssociatedConformanceWitness);
        char v50 = static ClosedRange<>.Index.== infix(_:_:)(v88, v23, v3, v46, AssociatedConformanceWitness);
        uint64_t v51 = *(void (**)(char *, uint64_t))(v17 + 8);
        v51(v23, v16);
        if ((v50 & 1) != 0) {
          break;
        }
        (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v88, v16);
        if (sub_100010708((uint64_t)v20, 1LL, v3) == 1)
        {
          __break(1u);
          goto LABEL_15;
        }

        uint64_t v52 = v81;
        uint64_t v53 = *(void (**)(uint64_t, char *, uint64_t))(v81 + 32);
        v53(v80, v20, v3);
        uint64_t v54 = v3;
        uint64_t v55 = v16;
        uint64_t v56 = v79;
        uint64_t v57 = sub_1000F98C4();
        Swift::Int v58 = v85;
        ((void (*)(uint64_t))v53)(v57);
        uint64_t v59 = v88;
        ClosedRange<>.index(after:)(v88, v44, v58, v87);
        v51(v59, v55);
        uint64_t v60 = v59;
        Swift::Int v46 = v58;
        v84((uint64_t)v60, v23, v55);
        v82(v56);
        uint64_t v61 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
        uint64_t AssociatedConformanceWitness = v87;
        uint64_t v62 = v56;
        uint64_t v16 = v55;
        uint64_t v3 = v54;
        uint64_t v20 = v77;
        uint64_t v17 = v78;
        v61(v62, v3);
      }

      (*(void (**)(char *, uint64_t))(v73 + 8))(v86, v74);
      uint64_t v39 = v90[0];
      uint64_t v5 = v70;
      if (v39 != Array.endIndex.getter(v70, v44)) {
        continue;
      }
      goto LABEL_2;
    }

    break;
  }

uint64_t sub_1000F95A8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = _swift_isClassOrObjCExistentialType(a3, a3);
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }

  uint64_t v6 = a2 & 0xFFFFFFFFFFFFF8LL;
  if ((result & 1) == 0) {
    uint64_t v6 = a2;
  }
  if (*(void *)(v6 + 16) <= a1) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_1000F95F8(uint64_t a1)
{
  return sub_1000F9084(a1, *(void *)(v1 + 32)) & 1;
}

uint64_t sub_1000F9618(uint64_t a1)
{
  return sub_1000F9024(a1, v1[4], v1[2], v1[3]) & 1;
}

uint64_t type metadata accessor for IntegerSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntegerSet);
}

uint64_t sub_1000F9644(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_1000F964C()
{
  return v1(*(void *)(v3 - 200), v2, v0);
}

uint64_t sub_1000F9668(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_1000F9670(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of static Comparable.<= infix(_:_:)(a1, a2, v2, *(void *)(v3 - 176));
}

uint64_t sub_1000F9680()
{
  *(void *)(v2 - 88) = v0;
  return type metadata accessor for Array(0LL, v1);
}

uint64_t sub_1000F96A4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)(v3 - 96) = a3;
  return type metadata accessor for ClosedRange(255LL, a1, *(void *)(*(void *)(*(void *)(a2 + 8) + 32LL) + 8LL));
}

uint64_t sub_1000F96C8(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_1000F96D0(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_1000F96D8(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_1000F96E0(uint64_t a1)
{
  return swift_getAssociatedConformanceWitness(a1, v1, *(void *)(v2 - 256));
}

uint64_t sub_1000F96F0()
{
  return (*(uint64_t (**)(void))(v0 - 328))();
}

uint64_t sub_1000F96FC()
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(v2 - 128) + 32LL))( *(void *)(v2 - 152),  v1,  v0);
}

uint64_t sub_1000F9718()
{
  return v0;
}

uint64_t sub_1000F9728()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 264) + 8LL))( *(void *)(v0 - 128),  *(void *)(v0 - 256));
}

uint64_t sub_1000F9740@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v4 = *(void *)(v3 - 280);
  *(void *)(v3 - 16sub_1000E3528(v0, v2, 0) = a2;
  return a2(v4, a1, v2);
}

  ;
}

uint64_t sub_1000F9774()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v0 - 8) + 8LL))(v1, v0);
}

void sub_1000F9788()
{
}

uint64_t sub_1000F9794(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

  ;
}

uint64_t sub_1000F97A8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_1000F97B8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

  ;
}

uint64_t sub_1000F97E0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 288))(a1, a2, v2);
}

uint64_t sub_1000F97F0(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_1000F97F8(uint64_t a1)
{
  return type metadata accessor for Optional(0LL, a1);
}

uint64_t sub_1000F9808()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000F9814()
{
  return v0;
}

uint64_t sub_1000F9828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata accessor for ClosedRange(255LL, v3, a3);
}

uint64_t sub_1000F9834(uint64_t a1, uint64_t a2)
{
  return Array.subscript.getter(*(void *)(v2 - 256), a2, v3);
}

uint64_t sub_1000F9840(uint64_t a1)
{
  return Array.count.getter(a1, v1);
}

  ;
}

uint64_t sub_1000F985C()
{
  return Array.endIndex.getter(v0, v1);
}

uint64_t sub_1000F9868()
{
  return *(void *)(v0 - 152);
}

uint64_t sub_1000F987C()
{
  return v0;
}

uint64_t sub_1000F9890(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_1000F9898()
{
  return v0;
}

uint64_t sub_1000F98AC(uint64_t a1, uint64_t a2)
{
  return Array.subscript.getter(v3, a2, v2);
}

uint64_t sub_1000F98B8()
{
  return v1(v2, v0);
}

uint64_t sub_1000F98C4()
{
  return v0;
}

uint64_t sub_1000F98D0(uint64_t a1)
{
  return dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(a1, 512LL, v1);
}

uint64_t sub_1000F98DC(uint64_t a1)
{
  return Array.subscript.getter(a1, v1, v2);
}

uint64_t sub_1000F98E8(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v3, v2);
}

void sub_1000F98F4(uint64_t a1)
{
  uint64_t v3 = v18[0];
  uint64_t v4 = v18[1];
  int64_t v5 = v18[3];
  unint64_t v6 = v18[4];
  int64_t v7 = (unint64_t)(v18[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a1);
  if (!v6) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v9 = v8 | (v5 << 6);
  while (1)
  {
    Swift::Int v13 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v9);
    uint64_t v14 = v13[1];
    uint64_t v15 = *(void *)(*(void *)(v3 + 56) + 8 * v9);
    v17[0] = *v13;
    v17[1] = v14;
    v17[2] = v15;
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    sub_1000FA144(v17);
    if (v1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      break;
    }
    if (v10 >= v7) {
      goto LABEL_24;
    }
    unint64_t v11 = *(void *)(v4 + 8 * v10);
    if (!v11)
    {
      int64_t v12 = v5 + 2;
      if (v5 + 2 >= v7) {
        goto LABEL_24;
      }
      unint64_t v11 = *(void *)(v4 + 8 * v12);
      if (v11) {
        goto LABEL_12;
      }
      int64_t v12 = v5 + 3;
      if (v5 + 3 >= v7) {
        goto LABEL_24;
      }
      unint64_t v11 = *(void *)(v4 + 8 * v12);
      if (v11) {
        goto LABEL_12;
      }
      int64_t v12 = v5 + 4;
      if (v5 + 4 >= v7) {
        goto LABEL_24;
      }
      unint64_t v11 = *(void *)(v4 + 8 * v12);
      if (v11)
      {
LABEL_12:
        int64_t v10 = v12;
      }

      else
      {
        int64_t v10 = v5 + 5;
        if (v5 + 5 >= v7) {
          goto LABEL_24;
        }
        unint64_t v11 = *(void *)(v4 + 8 * v10);
        if (!v11)
        {
          int64_t v16 = v5 + 6;
          while (v16 < v7)
          {
            unint64_t v11 = *(void *)(v4 + 8 * v16++);
            if (v11)
            {
              int64_t v10 = v16 - 1;
              goto LABEL_13;
            }
          }

uint64_t SchematizedPayload.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000941C(&qword_1001D9630);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100019AFC(a1, v10);
  unint64_t v12 = sub_1000EA968();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AnyKey, &type metadata for AnyKey, v12, v10, v11);
  uint64_t v13 = sub_10000941C(&qword_1001D9638);
  uint64_t v22 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v13,  &protocol witness table for String);
  uint64_t v20 = &v22;
  uint64_t v21 = v9;
  uint64_t v14 = v18[1];
  (*(void (**)(uint64_t (*)(void *, uint64_t *), char *, uint64_t, uint64_t))(a3 + 96))( sub_1000FA12C,  v19,  a2,  a3);
  uint64_t v15 = v22;
  if (v14)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRetain(v22);
    sub_1000F98F4(v16);
    swift_bridgeObjectRelease_n(v15, 2LL);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1000F9C1C(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100019AFC(a1, v7);
  LOBYTE(v8) = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8);
  uint64_t v10 = a1[3];
  uint64_t v9 = a1[4];
  sub_100019AFC(a1, v10);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)(v9 + 8) + 8LL))(v10);
  if ((v8 & 1) != 0)
  {
    sub_1000FB60C(v11, v12, *a3);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = _swiftEmptyArrayStorage;
    }
    sub_1000F47D4(a2, (uint64_t)&v47);
    if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
    {
      sub_1000E9CE8();
      uint64_t v15 = v44;
    }

    unint64_t v16 = v15[2];
    if (v16 >= v15[3] >> 1)
    {
      sub_1000E9CE8();
      uint64_t v15 = v45;
    }

    __int128 v15[2] = v16 + 1;
    sub_1000F4798((uint64_t)&v47, (uint64_t)&v15[8 * v16 + 4]);
    uint64_t v18 = a1[3];
    uint64_t v17 = a1[4];
    sub_100019AFC(a1, v18);
    (*(void (**)(uint64_t))(*(void *)(v17 + 8) + 8LL))(v18);
    sub_1000FBD20();
    return swift_bridgeObjectRelease();
  }

  uint64_t v47 = v11;
  unint64_t v48 = v12;
  uint64_t v19 = sub_10000941C(&qword_1001D9630);
  sub_1000FA540();
  KeyedEncodingContainer.encode<A>(_:forKey:)(a2, &v47, v19);
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (qword_1001D7E48 != -1) {
    swift_once(&qword_1001D7E48, sub_1000E6D78);
  }
  uint64_t v46 = v19;
  uint64_t v20 = type metadata accessor for Logger(0LL);
  sub_1000093D0(v20, (uint64_t)qword_1001EDEC0);
  sub_100019B20((uint64_t)a1, (uint64_t)&v47);
  swift_errorRetain(v3);
  uint64_t v21 = swift_errorRetain(v3);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v24 = static os_log_type_t.error.getter(v22, v23);
  if (os_log_type_enabled(v22, v24))
  {
    uint64_t v25 = swift_slowAlloc(22LL, -1LL);
    uint64_t v26 = swift_slowAlloc(64LL, -1LL);
    uint64_t v53 = v26;
    *(_DWORD *)uint64_t v25 = 136315394;
    uint64_t v28 = v49;
    uint64_t v27 = v50;
    sub_100019AFC(&v47, v49);
    uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)(v27 + 8) + 8LL))(v28);
    uint64_t v51 = sub_1000307E0(v29, v30, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v25 + 4);
    swift_bridgeObjectRelease();
    sub_1000108B8(&v47);
    *(_WORD *)(v25 + 1sub_1000108B8(v0 + 2) = 2080;
    uint64_t v51 = v3;
    swift_errorRetain(v3);
    sub_10000941C(&qword_1001D2B70);
    uint64_t v31 = String.init<A>(describing:)(&v51);
    uint64_t v51 = sub_1000307E0(v31, v32, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v25 + 14);
    swift_bridgeObjectRelease();
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v22, v24, "Sch: Error encoding %s: %s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy(v26, 2LL);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  else
  {
    sub_1000108B8(&v47);
    swift_errorRelease(v3);
    swift_errorRelease(v3);
  }

  uint64_t v47 = 0LL;
  unint64_t v48 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(26LL);
  swift_bridgeObjectRelease();
  uint64_t v47 = 0xD000000000000014LL;
  unint64_t v48 = 0x8000000100172E70LL;
  uint64_t v35 = a1[3];
  uint64_t v34 = a1[4];
  sub_100019AFC(a1, v35);
  v36._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(void *)(v34 + 8) + 8LL))(v35);
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._uint64_t countAndFlagsBits = 8250LL;
  v37._object = (void *)0xE200000000000000LL;
  String.append(_:)(v37);
  uint64_t v53 = v3;
  swift_errorRetain(v3);
  sub_10000941C(&qword_1001D2B70);
  v38._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v53);
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  uint64_t v39 = v47;
  unint64_t v40 = v48;
  uint64_t v42 = a1[3];
  uint64_t v41 = a1[4];
  sub_100019AFC(a1, v42);
  uint64_t v47 = (*(uint64_t (**)(uint64_t))(*(void *)(v41 + 8) + 8LL))(v42);
  unint64_t v48 = v43;
  KeyedEncodingContainer.encode(_:forKey:)(v39, v40, &v47, v46);
  swift_bridgeObjectRelease();
  swift_errorRelease(v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000FA12C(void *a1, uint64_t *a2)
{
  return sub_1000F9C1C(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_1000FA144(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = (void *)a1[1];
  uint64_t v4 = a1[2];
  uint64_t v24 = *a1;
  unint64_t v25 = (unint64_t)v2;
  uint64_t v5 = sub_10000941C(&qword_1001D9630);
  sub_10000941C(&qword_1001D9638);
  sub_1000FA4DC();
  uint64_t result = KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v24, v5);
  uint64_t v7 = v1;
  if (v1)
  {
    if (qword_1001D7E48 != -1) {
      swift_once(&qword_1001D7E48, sub_1000E6D78);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_1000093D0(v8, (uint64_t)qword_1001EDEC0);
    swift_bridgeObjectRetain(v2);
    swift_errorRetain(v1);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v2);
    swift_errorRetain(v1);
    swift_bridgeObjectRetain(v4);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v12 = static os_log_type_t.error.getter(v10, v11);
    if (os_log_type_enabled(v10, v12))
    {
      uint64_t v23 = v5;
      uint64_t v13 = swift_slowAlloc(22LL, -1LL);
      uint64_t v14 = swift_slowAlloc(64LL, -1LL);
      *(_DWORD *)uint64_t v13 = 136315394;
      uint64_t v24 = v14;
      swift_bridgeObjectRetain(v2);
      uint64_t v26 = sub_1000307E0(v3, (unint64_t)v2, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v13 + 4);
      swift_bridgeObjectRelease_n(v4, 2LL);
      swift_bridgeObjectRelease_n(v2, 3LL);
      *(_WORD *)(v13 + 1sub_1000108B8(v0 + 2) = 2080;
      uint64_t v26 = v1;
      swift_errorRetain(v1);
      sub_10000941C(&qword_1001D2B70);
      uint64_t v15 = String.init<A>(describing:)(&v26);
      uint64_t v26 = sub_1000307E0(v15, v16, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v13 + 14);
      swift_bridgeObjectRelease();
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v10, v12, "Sch: Error encoding %s: %s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy(v14, 2LL);
      swift_slowDealloc(v14, -1LL, -1LL);
      uint64_t v17 = v13;
      uint64_t v5 = v23;
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v4, 2LL);
      swift_bridgeObjectRelease_n(v2, 2LL);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }

    uint64_t v24 = 0LL;
    unint64_t v25 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(26LL);
    swift_bridgeObjectRelease();
    uint64_t v24 = 0xD000000000000014LL;
    unint64_t v25 = 0x8000000100172E70LL;
    v18._uint64_t countAndFlagsBits = v3;
    v18._object = v2;
    String.append(_:)(v18);
    v19._uint64_t countAndFlagsBits = 8250LL;
    v19._object = (void *)0xE200000000000000LL;
    String.append(_:)(v19);
    uint64_t v26 = v1;
    swift_errorRetain(v1);
    sub_10000941C(&qword_1001D2B70);
    v20._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v26);
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    uint64_t v21 = v24;
    unint64_t v22 = v25;
    uint64_t v24 = v3;
    unint64_t v25 = (unint64_t)v2;
    swift_bridgeObjectRetain(v2);
    KeyedEncodingContainer.encode(_:forKey:)(v21, v22, &v24, v5);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    return swift_bridgeObjectRelease();
  }

  return result;
}

unint64_t sub_1000FA4DC()
{
  unint64_t result = qword_1001D9640;
  if (!qword_1001D9640)
  {
    uint64_t v1 = sub_1000094A0(&qword_1001D9638);
    sub_1000FA540();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001D9640);
  }

  return result;
}

unint64_t sub_1000FA540()
{
  unint64_t result = qword_1001D9648;
  if (!qword_1001D9648)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AnyValue, &type metadata for AnyValue);
    atomic_store(result, (unint64_t *)&qword_1001D9648);
  }

  return result;
}

void AnyValue.encode(to:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  sub_100019AFC(a1, v2);
  dispatch thunk of Encoder.singleValueContainer()(v5, v2, v3);
  sub_1000F47D4(v1, (uint64_t)v4);
  __asm { BR              X10 }

uint64_t sub_1000FA5E8()
{
  return sub_1000108B8((void *)(v0 - 104));
}

void sub_1000FA6CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15, __int128 a16, __int128 a17)
{
  a9 = a15;
  a10 = a16;
  a11 = a17;
  *(__int128 *)((char *)&a11 + 9) = *(__int128 *)((char *)&a17 + 9);
  sub_1000FAEB4();
  unint64_t v19 = sub_1000FA7FC();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(&a9, &type metadata for EnumValue, v19, v17, v18);
  sub_1000F4B48((uint64_t)&a9);
  JUMPOUT(0x1000FA6A4LL);
}

void sub_1000FA724( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19)
{
  uint64_t v20 = a18;
  unint64_t v21 = a19;
  a9 = a18;
  a10 = a19;
  uint64_t v22 = *(void *)(v19 - 80);
  uint64_t v23 = *(void *)(v19 - 72);
  sub_1000AB9E8(v19 - 104, v22);
  unint64_t v24 = sub_10002D480();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(&a9, &type metadata for Data, v24, v22, v23);
  sub_100010A30(v20, v21);
  JUMPOUT(0x1000FA6A4LL);
}

void sub_1000FA778( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v21 = a18;
  uint64_t v22 = a19;
  uint64_t ObjectType = swift_getObjectType(a18);
  a9 = v21;
  sub_1000FAED8();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(&a9, ObjectType, *(void *)(v22 + 8), v19, v20);
  swift_unknownObjectRelease();
  JUMPOUT(0x1000FA6A4LL);
}

void sub_1000FA7C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
}

unint64_t sub_1000FA7FC()
{
  unint64_t result = qword_1001D9650;
  if (!qword_1001D9650)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for EnumValue, &type metadata for EnumValue);
    atomic_store(result, (unint64_t *)&qword_1001D9650);
  }

  return result;
}

void sub_1000FA838(void *a1)
{
}

uint64_t destroy for AnyValue(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(unsigned __int8 *)(result + 57);
  while (2)
  {
    switch(v2)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        return result;
      case 7:
        sub_1000108B8((void *)result);
        unint64_t result = sub_1000E4A08(*(void *)(v1 + 40), *(void *)(v1 + 48), *(_BYTE *)(v1 + 56));
        break;
      case 8:
        unint64_t result = swift_bridgeObjectRelease();
        break;
      case 9:
        unint64_t result = sub_100010A30(*(void *)result, *(void *)(result + 8));
        break;
      case 10:
        unint64_t result = swift_unknownObjectRelease();
        break;
      default:
        int v2 = *(_DWORD *)result + 11;
        continue;
    }

    break;
  }

  return result;
}

uint64_t initializeWithCopy for AnyValue(uint64_t a1, uint64_t *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 57);
  while (2)
  {
    switch(v4)
    {
      case 0:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_BYTE *)(a1 + 57) = 0;
        return a1;
      case 1:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        char v5 = 1;
        goto LABEL_13;
      case 2:
        *(void *)a1 = *a2;
        char v5 = 2;
        goto LABEL_13;
      case 3:
        *(void *)a1 = *a2;
        char v5 = 3;
        goto LABEL_13;
      case 4:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        char v5 = 4;
        goto LABEL_13;
      case 5:
        *(void *)a1 = *a2;
        char v5 = 5;
        goto LABEL_13;
      case 6:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        char v5 = 6;
        goto LABEL_13;
      case 7:
        __int128 v6 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 24) = v6;
        (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
        uint64_t v7 = a2[5];
        uint64_t v8 = a2[6];
        char v9 = *((_BYTE *)a2 + 56);
        sub_1000E4DB8(v7, v8, v9);
        *(void *)(a1 + 4sub_1000E3528(v0, v2, 0) = v7;
        *(void *)(a1 + 48) = v8;
        *(_BYTE *)(a1 + 56) = v9;
        char v5 = 7;
        goto LABEL_13;
      case 8:
        uint64_t v14 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v14;
        *(_BYTE *)(a1 + 57) = 8;
        swift_bridgeObjectRetain(v14);
        return a1;
      case 9:
        uint64_t v11 = *a2;
        unint64_t v10 = a2[1];
        sub_100014244(*a2, v10);
        *(void *)a1 = v11;
        *(void *)(a1 + 8) = v10;
        char v5 = 9;
LABEL_13:
        *(_BYTE *)(a1 + 57) = v5;
        break;
      case 10:
        __int128 v13 = *(_OWORD *)a2;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_BYTE *)(a1 + 57) = 10;
        swift_unknownObjectRetain(v13);
        break;
      default:
        int v4 = *(_DWORD *)a2 + 11;
        continue;
    }

    return a1;
  }

uint64_t assignWithCopy for AnyValue(uint64_t a1, __int128 *a2)
{
  if ((__int128 *)a1 != a2)
  {
    int v4 = *(unsigned __int8 *)(a1 + 57);
    while (2)
    {
      switch(v4)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
          break;
        case 7:
          sub_1000108B8((void *)a1);
          sub_1000E4A08(*(void *)(a1 + 40), *(void *)(a1 + 48), *(_BYTE *)(a1 + 56));
          break;
        case 8:
          swift_bridgeObjectRelease();
          break;
        case 9:
          sub_100010A30(*(void *)a1, *(void *)(a1 + 8));
          break;
        case 10:
          swift_unknownObjectRelease();
          break;
        default:
          int v4 = *(_DWORD *)a1 + 11;
          continue;
      }

      break;
    }

    int v5 = *((unsigned __int8 *)a2 + 57);
    while (2)
    {
      switch(v5)
      {
        case 0:
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_BYTE *)(a1 + 57) = 0;
          return a1;
        case 1:
          *(_DWORD *)a1 = *(_DWORD *)a2;
          char v6 = 1;
          goto LABEL_20;
        case 2:
          *(void *)a1 = *(void *)a2;
          char v6 = 2;
          goto LABEL_20;
        case 3:
          *(void *)a1 = *(void *)a2;
          char v6 = 3;
          goto LABEL_20;
        case 4:
          *(_DWORD *)a1 = *(_DWORD *)a2;
          char v6 = 4;
          goto LABEL_20;
        case 5:
          *(void *)a1 = *(void *)a2;
          char v6 = 5;
          goto LABEL_20;
        case 6:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          char v6 = 6;
          goto LABEL_20;
        case 7:
          uint64_t v7 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v7;
          *(void *)(a1 + 3sub_1000108B8(v0 + 2) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, __int128 *))(v7 - 8))(a1, a2);
          uint64_t v8 = *((void *)a2 + 5);
          uint64_t v9 = *((void *)a2 + 6);
          char v10 = *((_BYTE *)a2 + 56);
          sub_1000E4DB8(v8, v9, v10);
          *(void *)(a1 + 4sub_1000E3528(v0, v2, 0) = v8;
          *(void *)(a1 + 48) = v9;
          *(_BYTE *)(a1 + 56) = v10;
          char v6 = 7;
          goto LABEL_20;
        case 8:
          *(void *)a1 = *(void *)a2;
          uint64_t v15 = *((void *)a2 + 1);
          *(void *)(a1 + 8) = v15;
          *(_BYTE *)(a1 + 57) = 8;
          swift_bridgeObjectRetain(v15);
          return a1;
        case 9:
          uint64_t v12 = *(void *)a2;
          unint64_t v11 = *((void *)a2 + 1);
          sub_100014244(v12, v11);
          *(void *)a1 = v12;
          *(void *)(a1 + 8) = v11;
          char v6 = 9;
LABEL_20:
          *(_BYTE *)(a1 + 57) = v6;
          break;
        case 10:
          __int128 v14 = *a2;
          *(_OWORD *)a1 = *a2;
          *(_BYTE *)(a1 + 57) = 10;
          swift_unknownObjectRetain(v14);
          break;
        default:
          int v5 = *(_DWORD *)a2 + 11;
          continue;
      }

      break;
    }
  }

  return a1;
}

__n128 initializeWithTake for AnyValue(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 4sub_1000108B8(v0 + 2) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  *(_OWORD *)(a1 + 3sub_1000108B8(v0 + 2) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AnyValue(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v4 = *(unsigned __int8 *)(a1 + 57);
    while (2)
    {
      switch(v4)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
          break;
        case 7:
          sub_1000108B8((void *)a1);
          sub_1000E4A08(*(void *)(a1 + 40), *(void *)(a1 + 48), *(_BYTE *)(a1 + 56));
          break;
        case 8:
          swift_bridgeObjectRelease();
          break;
        case 9:
          sub_100010A30(*(void *)a1, *(void *)(a1 + 8));
          break;
        case 10:
          swift_unknownObjectRelease();
          break;
        default:
          int v4 = *(_DWORD *)a1 + 11;
          continue;
      }

      break;
    }

    int v5 = *(unsigned __int8 *)(a2 + 57);
    while (2)
    {
      switch(v5)
      {
        case 0:
          char v6 = 0;
          *(_DWORD *)a1 = *(_DWORD *)a2;
          break;
        case 1:
          *(_DWORD *)a1 = *(_DWORD *)a2;
          char v6 = 1;
          break;
        case 2:
          *(void *)a1 = *(void *)a2;
          char v6 = 2;
          break;
        case 3:
          *(void *)a1 = *(void *)a2;
          char v6 = 3;
          break;
        case 4:
          *(_DWORD *)a1 = *(_DWORD *)a2;
          char v6 = 4;
          break;
        case 5:
          *(void *)a1 = *(void *)a2;
          char v6 = 5;
          break;
        case 6:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          char v6 = 6;
          break;
        case 7:
          __int128 v7 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v7;
          *(_OWORD *)(a1 + 3sub_1000108B8(v0 + 2) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
          char v6 = 7;
          break;
        case 8:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          char v6 = 8;
          break;
        case 9:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          char v6 = 9;
          break;
        case 10:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          char v6 = 10;
          break;
        default:
          int v5 = *(_DWORD *)a2 + 11;
          continue;
      }

      break;
    }

    *(_BYTE *)(a1 + 57) = v6;
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for AnyValue(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xF6 && *(_BYTE *)(a1 + 58)) {
    return (*(_DWORD *)a1 + 246);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 57);
  if (v3 >= 0xB) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for AnyValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(_OWORD *)(result + 4sub_1000108B8(v0 + 2) = 0u;
    *(_OWORD *)(result + swift_weakDestroy(v0 + 16) = 0u;
    *(_OWORD *)(result + 3sub_1000108B8(v0 + 2) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 246;
    if (a3 >= 0xF6) {
      *(_BYTE *)(result + 58) = 1;
    }
  }

  else
  {
    if (a3 >= 0xF6) {
      *(_BYTE *)(result + 58) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 57) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000FAE5C(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 57);
  return result;
}

uint64_t sub_1000FAE78(uint64_t result, unsigned int a2)
{
  if (a2 > 0xA)
  {
    *(_OWORD *)(result + 41) = 0u;
    *(_OWORD *)(result + swift_weakDestroy(v0 + 16) = 0u;
    *(_OWORD *)(result + 3sub_1000108B8(v0 + 2) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 11;
    LOBYTE(asub_1000108B8(v0 + 2) = 11;
  }

  *(_BYTE *)(result + 57) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AnyValue()
{
  return &type metadata for AnyValue;
}

uint64_t sub_1000FAEB4()
{
  return sub_1000AB9E8(v0 - 104, *(void *)(v0 - 80));
}

  ;
}

uint64_t sub_1000FAED8()
{
  return sub_1000AB9E8(v0 - 104, *(void *)(v0 - 80));
}

uint64_t sub_1000FAEE8()
{
  return v0;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PEnumFunction.perform(with:arguments:)( SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  if (*((void *)arguments._rawValue + 2) < 2uLL)
  {
    __break(1u);
  }

  else
  {
    Swift::String v4 = SQLiteArgument.getStringNonNull()();
    if (!v5)
    {
      sub_1000E42D0(v4._countAndFlagsBits);
      SQLiteBaseSchematizer.enum(withName:)(v4._countAndFlagsBits, (uint64_t)v4._object);
      swift_release();
      sub_10001460C();
      sub_100019BC4(&v17, (uint64_t)v18);
      char v6 = (sqlite3_value *)*((void *)arguments._rawValue + 4);
      if (SQLiteArgument.isText.getter(*((sqlite3_value **)arguments._rawValue + 4)))
      {
        Swift::String v7 = SQLiteArgument.getStringNonNull()();
        if (!v8)
        {
          uint64_t v9 = v19;
          uint64_t v10 = v20;
          sub_100019AFC(v18, v19);
          Swift::Int32 v16 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v10 + 24))( v7._countAndFlagsBits,  v7._object,  v9,  v10);
          sub_10001460C();
          SQLiteContext.setInt32(_:)(v16);
        }
      }

      else if (SQLiteArgument.isInteger.getter(v6))
      {
        uint64_t v11 = SQLiteArgument.getInt32()();
        uint64_t v12 = v19;
        uint64_t v13 = v20;
        sub_100019AFC(v18, v19);
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v11, v12, v13);
        SQLiteContext.setString(_:destructor:)( v14,  v15,  (void (__cdecl **)(void *))1,  (sqlite3_context *)with.context._rawValue);
        swift_bridgeObjectRelease();
      }

      sub_1000108B8(v18);
    }
  }

uint64_t sub_1000FB100(uint64_t a1)
{
  uint64_t v2 = sub_10000941C(&qword_1001D9658);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for PEnumFunction()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer13PEnumFunction);
}

void sub_1000FB160(uint64_t a1@<X8>)
{
  v1._object = (void *)((a1 - 32) | 0x8000000000000000LL);
  v1._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  SQLiteContext.setError(message:code:)(v1, -1);
}

uint64_t sub_1000FB17C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000FB188(a1, a2, a3, a4, (uint64_t)&off_1001BA3A8);
}

uint64_t sub_1000FB188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(ObjectType, a2);
  unint64_t v12 = v11;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 16))(v18, ObjectType, a2);
  uint64_t v14 = v19;
  uint64_t v13 = v20;
  sub_100019AFC(v18, v19);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)(v13 + 8) + 8LL))(v14);
  (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 8) + 32LL))( v10,  v12,  v15,  v16,  a3,  a4);
  sub_100010A30(v10, v12);
  swift_bridgeObjectRelease();
  return sub_1000108B8(v18);
}

void sub_1000FB27C(uint64_t a1)
{
  if (v1[57] == 255)
  {
    sub_1000F679C((uint64_t)v1);
    SQLiteContext.setNull()();
  }

  else
  {
    sub_1000F4798((uint64_t)v1, (uint64_t)v2);
    sub_1000F75E4();
    sub_1000F4848((uint64_t)v2);
  }

uint64_t sub_1000FB314( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 16))(v19, a3, a4, a6, a7);
  sub_100019B20((uint64_t)v19, (uint64_t)v18);
  uint64_t v12 = type metadata accessor for ProtobufPayload();
  uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
  sub_100019BC4(v18, v13 + 16);
  *(void *)(v13 + 56) = a1;
  *(void *)(v13 + 64) = a2;
  unint64_t v14 = sub_1000EDB24();
  uint64_t v15 = *(void *)(a7 + 8);
  uint64_t v16 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v15 + 16);
  sub_100014244(a1, a2);
  v16(v13, v14, a5, a6, v15);
  swift_release();
  return sub_1000108B8(v19);
}

uint64_t sub_1000FB454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000FB188(a1, a2, a3, a4, (uint64_t)&off_1001BAC28);
}

uint64_t sub_1000FB460(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000FB314(a1, a2, a3, a4, a5, a6, (uint64_t)&off_1001BB018);
}

uint64_t sub_1000FB46C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (unint64_t v4 = sub_10001104C(a1, a2), (v5 & 1) != 0)) {
    return *(void *)(*(void *)(v3 + 56) + 8 * v4);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000FB4AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0LL;
  }
  unint64_t v4 = sub_10001104C(a1, a2);
  if ((v5 & 1) == 0) {
    return 0LL;
  }
  char v6 = (void *)(*(void *)(v3 + 56) + 24 * v4);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = v6[2];
  swift_bridgeObjectRetain(*v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return v7;
}

void sub_1000FB52C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v5 = xmmword_1001652F0;
  if (*(void *)(a3 + 16))
  {
    __int128 v13 = xmmword_1001652F0;
    unint64_t v7 = sub_10000EC64(a1, a2);
    if ((v8 & 1) != 0)
    {
      uint64_t v9 = (unsigned __int8 *)(*(void *)(a3 + 56) + 40 * v7);
      uint64_t v10 = *v9;
      uint64_t v11 = *((void *)v9 + 1);
      __int128 v13 = *((_OWORD *)v9 + 1);
      unsigned __int8 v12 = v9[32];
      swift_bridgeObjectRetain(*((void *)v9 + 2));
    }

    else
    {
      uint64_t v10 = 0LL;
      uint64_t v11 = 0LL;
      unsigned __int8 v12 = 0;
    }

    __int128 v5 = v13;
  }

  else
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    unsigned __int8 v12 = 0;
  }

  *(void *)a4 = v10;
  *(void *)(a4 + 8) = v11;
  *(_OWORD *)(a4 + swift_weakDestroy(v0 + 16) = v5;
  *(_BYTE *)(a4 + 3sub_1000108B8(v0 + 2) = v12;
}

void sub_1000FB5D0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v5 = sub_10001104C(a1, a2), (v6 & 1) != 0))
  {
    sub_1000FBD74(v5);
  }

  else
  {
    *(void *)(a4 + 3sub_1000108B8(v0 + 2) = 0LL;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + swift_weakDestroy(v0 + 16) = 0u;
  }

  sub_100009A90();
}

void sub_1000FB60C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    unint64_t v3 = sub_10001104C(a1, a2);
    if ((v4 & 1) != 0) {
      sub_1000FBD88(v3);
    }
  }

  sub_100009A90();
}

void sub_1000FB63C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v4 = sub_10000ED7C(a1), (v5 & 1) != 0))
  {
    sub_1000FBD74(v4);
  }

  else
  {
    *(void *)(a3 + 3sub_1000108B8(v0 + 2) = 0LL;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + swift_weakDestroy(v0 + 16) = 0u;
  }

  sub_100009A90();
}

void *sub_1000FB67C(uint64_t a1, uint64_t a2)
{
  v2[2] = &_swiftEmptyArrayStorage;
  v2[3] = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for Int,  &protocol witness table for String);
  void v2[4] = a1;
  v2[5] = a2;
  return v2;
}

void *SQLiteMessageTypeRegistry.deinit()
{
  return v0;
}

uint64_t sub_1000FB704()
{
  return 0x7FFFFFFFLL;
}

Swift::UInt32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteMessageTypeRegistry.id(forSchemaName:)( Swift::String forSchemaName)
{
  unint64_t v3 = v1;
  object = forSchemaName._object;
  uint64_t v5 = *v1;
  uint64_t v6 = (uint64_t)(v3 + 3);
  sub_100010BE4((uint64_t)(v3 + 3), (uint64_t)v33, 0LL);
  uint64_t v7 = v3[3];
  swift_bridgeObjectRetain(object);
  swift_bridgeObjectRetain(v7);
  uint64_t v8 = sub_10005A464();
  unint64_t v10 = sub_1000FB46C(v8, v9, v7);
  char v12 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v12 & 1) != 0)
  {
    unint64_t v10 = (unint64_t)(v3 + 2);
    uint64_t v15 = sub_100010BE4((uint64_t)(v3 + 2), (uint64_t)v32, 0LL);
    uint64_t v16 = *(void *)(v3[2] + 16LL);
    if (v16 >= (*(uint64_t (**)(uint64_t))(v5 + 104))(v15))
    {
      unint64_t v26 = sub_1000F173C();
      uint64_t v27 = sub_100010EA0((uint64_t)&type metadata for SQLiteMessageTypeRegistry.Error, v26);
      *uint64_t v28 = 0;
      swift_willThrow(v27);
    }

    else
    {
      unint64_t v34 = v16;
      uint64_t v17 = v3[4];
      uint64_t v18 = v3[5];
      swift_getObjectType(v17);
      uint64_t v19 = *(void (**)(uint64_t))(v18 + 40);
      swift_unknownObjectRetain(v17);
      uint64_t v20 = sub_10005A464();
      v19(v20);
      swift_unknownObjectRelease();
      if (!v2)
      {
        unint64_t v21 = v34;
        sub_100010BE4(v6, (uint64_t)v30, 33LL);
        swift_bridgeObjectRetain(object);
        sub_1000FBC98();
        swift_endAccess(v30);
        swift_bridgeObjectRelease();
        sub_100010BE4(v10, (uint64_t)v30, 33LL);
        sub_100034104((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E9970);
        uint64_t v22 = *(void *)(*(void *)v10 + 16LL);
        uint64_t v23 = sub_10005A464();
        sub_100034180(v23, v24);
        uint64_t v25 = *(void *)v10;
        *(void *)(v25 + swift_weakDestroy(v0 + 16) = v22 + 1;
        sub_10004D7B4((uint64_t)v31, v25 + 40 * v22 + 32);
        swift_endAccess(v30);
        if (v21 >= 0xFFFFFFFF) {
          goto LABEL_4;
        }
        sub_1000108B8(v31);
        LODWORD(v1sub_1000E3528(v0, v2, 0) = v21 + 1;
      }
    }

    return v10;
  }

  if ((v10 & 0x8000000000000000LL) != 0)
  {
    sub_100019F5C();
    __int128 v13 = "Negative value is not representable";
    uint64_t v14 = 35LL;
    goto LABEL_12;
  }

  if (!HIDWORD(v10)) {
    return v10;
  }
LABEL_4:
  sub_100019F5C();
  __int128 v13 = "Not enough bits to represent the passed value";
  uint64_t v14 = 45LL;
LABEL_12:
  Swift::UInt32 result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v13,  v14,  2LL,  "Swift/Integers.swift",  20LL);
  __break(1u);
  return result;
}

void sub_1000FB98C(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  if (!a1)
  {
    unint64_t v10 = sub_1000F173C();
    uint64_t v7 = sub_100010EA0((uint64_t)&type metadata for SQLiteMessageTypeRegistry.Error, v10);
    char v9 = 2;
    goto LABEL_5;
  }

  sub_100010BE4(v2 + 16, (uint64_t)v11, 0LL);
  uint64_t v5 = *(void *)(v2 + 16);
  if (*(void *)(v5 + 16) < (unint64_t)a1)
  {
    unint64_t v6 = sub_1000F173C();
    uint64_t v7 = sub_100010EA0((uint64_t)&type metadata for SQLiteMessageTypeRegistry.Error, v6);
    char v9 = 1;
LABEL_5:
    *uint64_t v8 = v9;
    swift_willThrow(v7);
    return;
  }

  sub_10004D7B4(v5 + 40LL * (a1 - 1) + 32, a2);
}

uint64_t sub_1000FBA4C()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 32));
}

uint64_t SQLiteMessageTypeRegistry.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t sub_1000FBA90()
{
  return sub_100034104((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E9A14);
}

uint64_t sub_1000FBA9C()
{
  return sub_100034104((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E9AFC);
}

uint64_t sub_1000FBAA8()
{
  return sub_100034104((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000E9CE8);
}

uint64_t sub_1000FBAB4(uint64_t a1)
{
  return sub_100034180(a1, (uint64_t (*)(BOOL))sub_1000E9A14);
}

uint64_t sub_1000FBAC0(uint64_t a1)
{
  return sub_100034180(a1, (uint64_t (*)(BOOL))sub_1000E9AFC);
}

uint64_t sub_1000FBACC(uint64_t a1)
{
  return sub_100034180(a1, (uint64_t (*)(BOOL))sub_1000E9CE8);
}

uint64_t sub_1000FBAD8()
{
  uint64_t v1 = *v0;
  *uint64_t v0 = v3;
  return sub_100010B54(v1);
}

uint64_t sub_1000FBB30()
{
  return sub_1000FBC98();
}

uint64_t type metadata accessor for SQLiteMessageTypeRegistry()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer25SQLiteMessageTypeRegistry);
}

uint64_t storeEnumTagSinglePayload for SQLiteMessageTypeRegistry.Error( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000FBBA8 + 4 * byte_100165305[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000FBBDC + 4 * byte_100165300[v4]))();
}

uint64_t sub_1000FBBDC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FBBE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000FBBECLL);
  }
  return result;
}

uint64_t sub_1000FBBF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000FBC00LL);
  }
  *(_BYTE *)Swift::UInt32 result = a2 + 3;
  return result;
}

uint64_t sub_1000FBC04(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000FBC0C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SQLiteMessageTypeRegistry.Error()
{
  return &type metadata for SQLiteMessageTypeRegistry.Error;
}

unint64_t sub_1000FBC2C()
{
  unint64_t result = qword_1001D98B8;
  if (!qword_1001D98B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100165390, &type metadata for SQLiteMessageTypeRegistry.Error);
    atomic_store(result, (unint64_t *)&qword_1001D98B8);
  }

  return result;
}

uint64_t sub_1000FBC68()
{
  return sub_1000FBC98();
}

uint64_t sub_1000FBC74()
{
  return sub_1000FBC98();
}

uint64_t sub_1000FBC80()
{
  return sub_1000FBC98();
}

uint64_t sub_1000FBC8C()
{
  return sub_1000FBC98();
}

uint64_t sub_1000FBC98()
{
  uint64_t v1 = sub_1000FBD58();
  sub_1000FBD30(v1);
  uint64_t v2 = *v0;
  *uint64_t v0 = v4;
  return sub_100010B54(v2);
}

uint64_t sub_1000FBCCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10005A464();
  sub_100102FDC(v5, v6, a3);
  uint64_t v7 = *v3;
  uint64_t *v3 = v9;
  return sub_100010B54(v7);
}

uint64_t sub_1000FBD20()
{
  return sub_1000FBC98();
}

uint64_t sub_1000FBD30(uint64_t a1)
{
  *uint64_t v2 = 0x8000000000000000LL;
  return v1(v5, v4, v3, a1);
}

uint64_t sub_1000FBD58()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

void sub_1000FBD74(uint64_t a1)
{
}

uint64_t sub_1000FBD88(uint64_t a1)
{
  return swift_bridgeObjectRetain(*(void *)(*(void *)(v1 + 56) + 8 * a1));
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> POneOfFunction.perform(with:arguments:)( SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  unint64_t v3 = *((void *)arguments._rawValue + 2);
  if (!v3)
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v5 = (sqlite3_value *)*((void *)arguments._rawValue + 4);
  BOOL v6 = SQLiteArgument.isNull.getter(v5);
  if (v6)
  {
    SQLiteContext.setNull()();
    return;
  }

  sub_1000E42D0(v6);
  if (!v2)
  {
    SQLiteBaseSchematizer.getSQLiteBridge()();
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    swift_release();
    uint64_t ObjectType = swift_getObjectType(v8);
    uint64_t v12 = (*(uint64_t (**)(sqlite3_value *, uint64_t, uint64_t))(v10 + 24))(v5, ObjectType, v10);
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    swift_unknownObjectRelease();
    if (v3 >= 2)
    {
      Swift::String v19 = SQLiteArgument.getStringNonNull()();
      if (v20)
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }

      else
      {
        sub_1000F7528(v19._countAndFlagsBits, (uint64_t)v19._object, (uint64_t)with.context._rawValue, v12, v14, v16, v18);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }

      return;
    }

uint64_t type metadata accessor for POneOfFunction()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer14POneOfFunction);
}

uint64_t sub_1000FBF08()
{
  return 255LL;
}

void sub_1000FBF10(int a1, unint64_t a2, uint64_t a3, void *a4, sqlite3_context *a5)
{
  v8._uint64_t countAndFlagsBits = a3;
  v8._object = a4;
  Swift::UInt32 v9 = SQLiteMessageTypeRegistry.id(forSchemaName:)(v8);
  if (v10)
  {
    uint64_t v12 = v10;
    uint64_t v11 = sub_10000941C(&qword_1001D2B70);
    SQLiteContext.setError<A>(_:message:code:)((uint64_t)&v12, 0xD000000000000014LL, 0x8000000100172B60LL, -1, a5, v11);
    swift_errorRelease(v10);
  }

  else
  {
    SQLiteContext.setSubtype(_:)(v9);
  }

uint64_t sub_1000FBFC8(sqlite3_value *a1)
{
  unsigned int v4 = SQLiteArgument.subtype.getter(a1);
  sub_1000FB98C(v4, (uint64_t)v15);
  if (!v2)
  {
    uint64_t v5 = SQLiteArgument.getUnsafeData()(a1);
    if (v6 >> 60 == 15)
    {
      unint64_t v7 = sub_1000E4274();
      uint64_t v8 = swift_allocError(&type metadata for SQLiteError, v7, 0LL, 0LL);
      *(void *)(v9 + 8) = 0LL;
      *(void *)(v9 + swift_weakDestroy(v0 + 16) = 0LL;
      *(void *)uint64_t v9 = 6LL;
      *(_BYTE *)(v9 + 24) = 4;
      swift_willThrow(v8);
      sub_1000108B8(v15);
    }

    else
    {
      uint64_t v10 = v5;
      unint64_t v11 = v6;
      uint64_t v12 = type metadata accessor for ProtobufPayload();
      uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
      sub_100019BC4(v15, v13 + 16);
      *(void *)(v13 + 56) = v10;
      *(void *)(v13 + 64) = v11;
      sub_1000EDB24();
      swift_retain(v1);
    }
  }

  return v1;
}

uint64_t type metadata accessor for SQLiteMessageAsSubtypeBridge()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer28SQLiteMessageAsSubtypeBridge);
}

uint64_t sub_1000FC0F0(sqlite3_value *a1)
{
  uint64_t result = sub_1000FBFC8(a1);
  if (v1) {
    return v3;
  }
  return result;
}

void Dictionary<>.registerAll(on:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_1000FC484();
  unint64_t v8 = v7 & v6;
  int64_t v26 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain(v10);
  int64_t v11 = 0LL;
  if (!v8) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(a2 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = (void *)(*(void *)(a2 + 56) + 16 * i);
    uint64_t v21 = *v20;
    uint64_t v22 = *(void *)(v20[1] + 8LL);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(void *)a1 + 152LL);
    swift_unknownObjectRetain_n(*v20, 2LL);
    __n128 v24 = swift_bridgeObjectRetain(v19);
    v23(v21, v22, v18, v19, v24);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      sub_1000FC4A4();
      return;
    }

    swift_bridgeObjectRelease();
    sub_1000FC4A4();
    if (v8) {
      goto LABEL_2;
    }
LABEL_3:
    if (__OFADD__(v11++, 1LL))
    {
      __break(1u);
      goto LABEL_24;
    }

    if (v11 >= v26) {
      goto LABEL_22;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v11);
    if (!v15) {
      break;
    }
LABEL_13:
    unint64_t v8 = (v15 - 1) & v15;
  }

  int64_t v16 = v11 + 1;
  if (v11 + 1 >= v26) {
    goto LABEL_22;
  }
  unint64_t v15 = *(void *)(v25 + 8 * v16);
  if (v15) {
    goto LABEL_12;
  }
  int64_t v16 = v11 + 2;
  if (v11 + 2 >= v26) {
    goto LABEL_22;
  }
  unint64_t v15 = *(void *)(v25 + 8 * v16);
  if (v15) {
    goto LABEL_12;
  }
  int64_t v16 = v11 + 3;
  if (v11 + 3 >= v26)
  {
LABEL_22:
    swift_release();
    return;
  }

  unint64_t v15 = *(void *)(v25 + 8 * v16);
  if (v15)
  {
LABEL_12:
    int64_t v11 = v16;
    goto LABEL_13;
  }

  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_22;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_13;
    }
  }

void Dictionary<>.unregisterAll(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a2 + 64;
  sub_1000FC484();
  unint64_t v6 = v5 & v4;
  int64_t v8 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(v9);
  int64_t v10 = 0LL;
  if (!v6) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v11 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    int64_t v16 = (void *)(*(void *)(a2 + 56) + 16 * i);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t ObjectType = swift_getObjectType(*v16);
    uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32);
    swift_unknownObjectRetain(v17);
    v20(a1, ObjectType, v18);
    swift_unknownObjectRelease();
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    if (__OFADD__(v10++, 1LL))
    {
      __break(1u);
      goto LABEL_22;
    }

    if (v10 >= v8) {
      goto LABEL_20;
    }
    unint64_t v14 = *(void *)(v21 + 8 * v10);
    if (!v14) {
      break;
    }
LABEL_13:
    unint64_t v6 = (v14 - 1) & v14;
  }

  int64_t v15 = v10 + 1;
  if (v10 + 1 >= v8) {
    goto LABEL_20;
  }
  unint64_t v14 = *(void *)(v21 + 8 * v15);
  if (v14) {
    goto LABEL_12;
  }
  int64_t v15 = v10 + 2;
  if (v10 + 2 >= v8) {
    goto LABEL_20;
  }
  unint64_t v14 = *(void *)(v21 + 8 * v15);
  if (v14) {
    goto LABEL_12;
  }
  int64_t v15 = v10 + 3;
  if (v10 + 3 >= v8)
  {
LABEL_20:
    swift_release();
    return;
  }

  unint64_t v14 = *(void *)(v21 + 8 * v15);
  if (v14)
  {
LABEL_12:
    int64_t v10 = v15;
    goto LABEL_13;
  }

  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_20;
    }
    unint64_t v14 = *(void *)(v21 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_13;
    }
  }

uint64_t sub_1000FC4A4()
{
  return swift_unknownObjectRelease_n(v0, 2LL);
}

uint64_t sub_1000FC4B0()
{
  uint64_t v4 = NSScanner.currentIndex.getter();
  uint64_t v3 = String.subscript.getter(v4, v1, v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1000FC53C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_1000FC4B0();
  uint64_t v7 = v6;
  if (v6)
  {
    if (v5 == a1 && v6 == a2)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      a2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v5, v6, 0LL);
      swift_bridgeObjectRelease();
      uint64_t v7 = 0LL;
      if ((a2 & 1) == 0) {
        return v7;
      }
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)([v2 string]);
    sub_1000FC608();
    uint64_t v9 = NSScanner.currentIndex.getter();
    uint64_t v7 = 1LL;
    uint64_t v10 = String.index(_:offsetBy:)(v9, 1LL, a2, a1);
    swift_bridgeObjectRelease();
    NSScanner.currentIndex.setter(v10);
  }

  return v7;
}

void sub_1000FC608()
{
}

uint64_t sub_1000FC614(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  uint64_t v22 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) != 0) {
    uint64_t v6 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v6 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v6)
  {
    uint64_t v19 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v20 = a4 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain(a4);
    uint64_t v10 = 0LL;
    while (1)
    {
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        int v13 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(v10 << 16, a3, a4);
      }

      else
      {
        if ((a4 & 0x2000000000000000LL) != 0)
        {
          v21[0] = a3;
          v21[1] = v20;
          unint64_t v11 = v21;
          uint64_t v12 = v22;
        }

        else
        {
          unint64_t v11 = (void *)v19;
          uint64_t v12 = v5;
          if ((a3 & 0x1000000000000000LL) == 0) {
            unint64_t v11 = (void *)_StringObject.sharedUTF8.getter(a3, a4);
          }
        }

        int v13 = _decodeScalar(_:startingAt:)(v11, v12, v10);
      }

      uint64_t v15 = v14;
      LODWORD(v21[0]) = v13;
      char v16 = a1(v21);
      if (v4)
      {
        swift_bridgeObjectRelease(a4);
        return v17 & 1;
      }

      if ((v16 & 1) == 0) {
        break;
      }
      v10 += v15;
      if (v10 >= v6)
      {
        swift_bridgeObjectRelease(a4);
        goto LABEL_17;
      }
    }

    swift_bridgeObjectRelease(a4);
    char v17 = 0;
  }

  else
  {
LABEL_17:
    char v17 = 1;
  }

  return v17 & 1;
}

unint64_t static PropertyPathUtil.parse(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for NSScanner.NumberRepresentation(0LL);
  uint64_t v79 = *(void *)(v5 - 8);
  uint64_t v80 = v5;
  __chkstk_darwin(v5);
  sub_100014428();
  uint64_t v78 = v6;
  uint64_t v7 = type metadata accessor for CharacterSet(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100014428();
  unint64_t v85 = v9;
  uint64_t v10 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v10 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10)
  {
    unint64_t v44 = sub_1000FD2E8();
    uint64_t v45 = sub_100010EA0((uint64_t)&type metadata for PropertyPathUtil.Error, v44);
    *(_OWORD *)uint64_t v46 = 0u;
    *(_OWORD *)(v46 + swift_weakDestroy(v0 + 16) = 0u;
    *(void *)(v46 + 3sub_1000108B8(v0 + 2) = 0LL;
    *(_BYTE *)(v46 + 4sub_1000E3528(v0, v2, 0) = 6;
    swift_willThrow(v45);
    return a2;
  }

  uint64_t v84 = v2;
  sub_1000FCD04();
  swift_bridgeObjectRetain(a2);
  uint64_t v73 = a1;
  unint64_t v74 = a2;
  id v11 = sub_1000FCC94(a1, a2);
  uint64_t v12 = (uint64_t)[v11 setCharactersToBeSkipped:0];
  a2 = (unint64_t)_swiftEmptyArrayStorage;
  unsigned int v77 = enum case for NSScanner.NumberRepresentation.decimal(_:);
  uint64_t v76 = v8;
  while (1)
  {
    uint64_t v13 = NSScanner.currentIndex.getter(v12);
    if (qword_1001D7E60 != -1) {
      swift_once(&qword_1001D7E60, sub_1000FD200);
    }
    uint64_t v14 = sub_1000093D0(v7, (uint64_t)qword_1001D9B40);
    uint64_t v15 = NSScanner.scanCharacters(from:)(v14);
    if (!v16)
    {
      swift_bridgeObjectRelease();
      unint64_t v47 = sub_1000FD2E8();
      uint64_t v48 = sub_100010EA0((uint64_t)&type metadata for PropertyPathUtil.Error, v47);
      uint64_t v50 = sub_1000FD864(v48, v49);
      *(void *)(v51 + swift_weakDestroy(v0 + 16) = v13;
      *(_BYTE *)(v51 + 4sub_1000E3528(v0, v2, 0) = 0;
      goto LABEL_31;
    }

    uint64_t v17 = v16;
    uint64_t v82 = v15;
    unint64_t v83 = a2;
    uint64_t v18 = String.subscript.getter(15LL, v15, v16);
    unint64_t v20 = v19;
    if (qword_1001D7E58 != -1) {
      swift_once(&qword_1001D7E58, sub_1000FD120);
    }
    uint64_t v21 = sub_1000093D0(v7, (uint64_t)qword_1001D9B28);
    a2 = v85;
    uint64_t v22 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 16))(v85, v21, v7);
    __chkstk_darwin(v22);
    *(&v73 - sub_1000108B8(v0 + 2) = a2;
    swift_bridgeObjectRetain(v20);
    uint64_t v23 = v84;
    char v24 = sub_1000FC614((uint64_t (*)(void *))sub_1000FD324, (uint64_t)(&v73 - 4), v18, v20);
    uint64_t v84 = v23;
    swift_bridgeObjectRelease_n(v20, 2LL);
    uint64_t v25 = *(void (**)(unint64_t, uint64_t))(v8 + 8);
    v25(a2, v7);
    if ((v24 & 1) == 0)
    {
      sub_1000FD850();
      unint64_t v52 = sub_1000FD2E8();
      sub_100010EA0((uint64_t)&type metadata for PropertyPathUtil.Error, v52);
      *(void *)uint64_t v53 = v82;
      *(void *)(v53 + 8) = v17;
      uint64_t v50 = v74;
      *(void *)(v53 + swift_weakDestroy(v0 + 16) = v73;
      *(void *)(v53 + 24) = v50;
      *(void *)(v53 + 3sub_1000108B8(v0 + 2) = v13;
      char v54 = 1;
      goto LABEL_30;
    }

    int v26 = sub_1000FD878(91LL);
    char v27 = v26;
    if ((v26 & 1) == 0)
    {
      uint64_t v34 = 0LL;
      goto LABEL_17;
    }

    int v81 = v26;
    unint64_t v28 = v85;
    ((void (*)(void))static CharacterSet.whitespaces.getter)();
    NSScanner.scanCharacters(from:)(v28);
    swift_bridgeObjectRelease();
    unint64_t v29 = v28;
    a2 = v7;
    uint64_t v30 = ((uint64_t (*)(unint64_t, uint64_t))v25)(v29, v7);
    uint64_t v75 = NSScanner.currentIndex.getter(v30);
    uint64_t v31 = v78;
    uint64_t v32 = v79;
    uint64_t v33 = v80;
    (*(void (**)(uint64_t, void, uint64_t))(v79 + 104))(v78, v77, v80);
    uint64_t v34 = NSScanner.scanInt(representation:)(v31);
    char v36 = v35;
    uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    if ((v36 & 1) != 0)
    {
      sub_10001450C();
      sub_1000FD850();
      unint64_t v59 = sub_1000FD2E8();
      uint64_t v60 = sub_100010EA0((uint64_t)&type metadata for PropertyPathUtil.Error, v59);
      uint64_t v50 = sub_1000FD864(v60, v61);
      *(void *)(v53 + swift_weakDestroy(v0 + 16) = v75;
      char v54 = 2;
      goto LABEL_30;
    }

    if (v34 < 0)
    {
      sub_10001450C();
      sub_1000FD850();
      unint64_t v62 = sub_1000FD2E8();
      sub_100010EA0((uint64_t)&type metadata for PropertyPathUtil.Error, v62);
      uint64_t v63 = v73;
      uint64_t v50 = v74;
      *(void *)uint64_t v53 = v34;
      *(void *)(v53 + 8) = v63;
      uint64_t v64 = v75;
      *(void *)(v53 + swift_weakDestroy(v0 + 16) = v50;
      *(void *)(v53 + 24) = v64;
      *(void *)(v53 + 3sub_1000108B8(v0 + 2) = 0LL;
      char v54 = 3;
LABEL_30:
      *(_BYTE *)(v53 + 4sub_1000E3528(v0, v2, 0) = v54;
LABEL_31:
      swift_bridgeObjectRetain(v50);
      goto LABEL_33;
    }

    unint64_t v38 = v85;
    static CharacterSet.whitespaces.getter(v37);
    NSScanner.scanCharacters(from:)(v38);
    swift_bridgeObjectRelease();
    uint64_t v7 = a2;
    v25(v38, a2);
    char v39 = sub_1000FD878(93LL);
    uint64_t v8 = v76;
    char v27 = v81;
    if ((v39 & 1) == 0) {
      break;
    }
LABEL_17:
    a2 = v83;
    if ((swift_isUniquelyReferenced_nonNull_native(v83) & 1) == 0)
    {
      sub_1000FD88C();
      a2 = v42;
    }

    unint64_t v40 = *(void *)(a2 + 16);
    if (v40 >= *(void *)(a2 + 24) >> 1)
    {
      sub_1000FD88C();
      a2 = v43;
    }

    *(void *)(a2 + swift_weakDestroy(v0 + 16) = v40 + 1;
    unint64_t v41 = a2 + 32 * v40;
    *(void *)(v41 + 3sub_1000108B8(v0 + 2) = v82;
    *(void *)(v41 + 4sub_1000E3528(v0, v2, 0) = v17;
    *(void *)(v41 + 48) = v34;
    *(_BYTE *)(v41 + 56) = (v27 ^ 1) & 1;
    if (objc_msgSend(v11, "isAtEnd", v73, v74))
    {

      return a2;
    }

    uint64_t v12 = sub_1000FD878(46LL);
    if ((v12 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v55 = sub_1000FD880();
      a2 = NSScanner.currentIndex.getter(v55);
      unint64_t v56 = sub_1000FD2E8();
      uint64_t v57 = sub_100010EA0((uint64_t)&type metadata for PropertyPathUtil.Error, v56);
      sub_1000FD808(v57, v58);
      char v71 = 5;
      goto LABEL_32;
    }
  }

  sub_10001450C();
  sub_1000FD850();
  uint64_t v65 = sub_1000FD880();
  a2 = NSScanner.currentIndex.getter(v65);
  unint64_t v66 = sub_1000FD2E8();
  uint64_t v67 = sub_100010EA0((uint64_t)&type metadata for PropertyPathUtil.Error, v66);
  sub_1000FD808(v67, v68);
  char v71 = 4;
LABEL_32:
  *(_BYTE *)(v70 + 4sub_1000E3528(v0, v2, 0) = v71;
LABEL_33:
  swift_willThrow(v69);

  return a2;
}

id sub_1000FCC94(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithString:v5];

  return v6;
}

unint64_t sub_1000FCD04()
{
  unint64_t result = qword_1001D9B58;
  if (!qword_1001D9B58)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSScanner);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001D9B58);
  }

  return result;
}

void PropertyPathUtil.Error.errorDescription.getter()
{
  *(void *)&v3[0] = &type metadata for PropertyPathUtil;
  sub_10000941C(&qword_1001D9B68);
  *(void *)&v3[0] = String.init<A>(describing:)(v3);
  *((void *)&v3[0] + 1) = v1;
  v2._uint64_t countAndFlagsBits = 0x203A726F72724520LL;
  v2._object = (void *)0xE800000000000000LL;
  String.append(_:)(v2);
  sub_1000FD340(v0, v3);
  __asm { BR              X10 }

uint64_t sub_1000FCDD0()
{
  uint64_t v4 = sub_1000FD7EC(v0 | 4, (void *)0x8000000100173050LL, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

void sub_1000FCF98()
{
}

uint64_t sub_1000FCFCC(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  Swift::Int v13 = String.distance(from:to:)(15LL, a5);
  v14._uint64_t countAndFlagsBits = 32LL;
  v14._object = (void *)0xE100000000000000LL;
  Swift::String v15 = String.init(repeating:count:)(v14, v13);
  swift_bridgeObjectRetain(v15._object);
  v16._uint64_t countAndFlagsBits = 0x6572654820A987E2LL;
  v16._object = (void *)0xA800000000000000LL;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v15._object);
  swift_bridgeObjectRetain(a7);
  v17._uint64_t countAndFlagsBits = a1;
  v17._object = a2;
  String.append(_:)(v17);
  v18._uint64_t countAndFlagsBits = 10LL;
  v18._object = (void *)0xE100000000000000LL;
  String.append(_:)(v18);
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v15._object);
  v19._uint64_t countAndFlagsBits = 10LL;
  v19._object = (void *)0xE100000000000000LL;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = a3;
  v20._object = a4;
  String.append(_:)(v20);
  return a6;
}

void sub_1000FD0E0()
{
}

uint64_t sub_1000FD120()
{
  uint64_t v0 = type metadata accessor for CharacterSet(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v10 - v6;
  sub_10001C180(v5, qword_1001D9B28);
  sub_1000093D0(v0, (uint64_t)qword_1001D9B28);
  static CharacterSet.letters.getter();
  CharacterSet.init(charactersIn:)(95LL, 0xE100000000000000LL);
  CharacterSet.union(_:)(v4);
  uint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  return ((uint64_t (*)(char *, uint64_t))v8)(v7, v0);
}

uint64_t sub_1000FD200()
{
  uint64_t v0 = type metadata accessor for CharacterSet(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001C180(v2, qword_1001D9B40);
  sub_1000093D0(v0, (uint64_t)qword_1001D9B40);
  if (qword_1001D7E58 != -1) {
    swift_once(&qword_1001D7E58, sub_1000FD120);
  }
  sub_1000093D0(v0, (uint64_t)qword_1001D9B28);
  static CharacterSet.decimalDigits.getter();
  CharacterSet.union(_:)(v4);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

unint64_t sub_1000FD2E8()
{
  unint64_t result = qword_1001D9B60;
  if (!qword_1001D9B60)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for PropertyPathUtil.Error,  &type metadata for PropertyPathUtil.Error);
    atomic_store(result, (unint64_t *)&qword_1001D9B60);
  }

  return result;
}

uint64_t sub_1000FD324(unsigned int *a1)
{
  return sub_1000F17A4(a1) & 1;
}

_OWORD *sub_1000FD340(__int128 *a1, _OWORD *a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(__int128 *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t initializeWithCopy for PropertyPathElement(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for PropertyPathElement(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  return a1;
}

__n128 initializeWithTake for AvroPrimitive(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PropertyPathElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PropertyPathElement(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 25))
    {
      LODWORD(vsub_1000108B8(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_1000108B8(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_1000108B8(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PropertyPathElement(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for PropertyPathElement()
{
}

void type metadata accessor for PropertyPathUtil()
{
}

uint64_t sub_1000FD4E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if (a6 <= 5u)
  {
    if (((1 << a6) & 0x35) != 0)
    {
      return swift_bridgeObjectRetain(a2);
    }

    else if (a6 == 1)
    {
      swift_bridgeObjectRetain(a2);
      return swift_bridgeObjectRetain(a4);
    }

    else
    {
      return swift_bridgeObjectRetain(a3);
    }
  }

  return result;
}

uint64_t destroy for PropertyPathUtil.Error(uint64_t a1)
{
  return sub_1000FD564( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(_BYTE *)(a1 + 40));
}

uint64_t sub_1000FD564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if (a6 <= 5u)
  {
    if (((1 << a6) & 0x35) != 0)
    {
      return swift_bridgeObjectRelease(a2);
    }

    else if (a6 == 1)
    {
      swift_bridgeObjectRelease(a2);
      return swift_bridgeObjectRelease(a4);
    }

    else
    {
      return swift_bridgeObjectRelease(a3);
    }
  }

  return result;
}

uint64_t initializeWithCopy for PropertyPathUtil.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unsigned __int8 v8 = *(_BYTE *)(a2 + 40);
  sub_1000FD4E8(*(void *)a2, v4, v5, v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 3sub_1000108B8(v0 + 2) = v7;
  *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = v8;
  return a1;
}

uint64_t assignWithCopy for PropertyPathUtil.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unsigned __int8 v8 = *(_BYTE *)(a2 + 40);
  sub_1000FD4E8(*(void *)a2, v4, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 3sub_1000108B8(v0 + 2) = v7;
  unsigned __int8 v14 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = v8;
  sub_1000FD564(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for PropertyPathUtil.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(_BYTE *)(a2 + 40);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  __int128 v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v10;
  *(void *)(a1 + 3sub_1000108B8(v0 + 2) = v3;
  unsigned __int8 v11 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = v4;
  sub_1000FD564(v5, v7, v6, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PropertyPathUtil.Error(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFA && *(_BYTE *)(a1 + 41))
    {
      int v2 = *(_DWORD *)a1 + 249;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
      if (v3 <= 6) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PropertyPathUtil.Error( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 4sub_1000E3528(v0, v2, 0) = 0;
    *(void *)uint64_t result = a2 - 250;
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 41) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 41) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 4sub_1000E3528(v0, v2, 0) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000FD7A4(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 6);
  }
}

uint64_t sub_1000FD7BC(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(void *)uint64_t result = a2 - 6;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    LOBYTE(asub_1000108B8(v0 + 2) = 6;
  }

  *(_BYTE *)(result + 4sub_1000E3528(v0, v2, 0) = a2;
  return result;
}

void type metadata accessor for PropertyPathUtil.Error()
{
}

uint64_t sub_1000FD7EC(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  return sub_1000FCFCC(a1, a2, a3, a4, a5, v6, v5);
}

uint64_t sub_1000FD7F8()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_1000FD808(uint64_t a1, void *a2)
{
  *a2 = *(void *)(v4 - 176);
  a2[1] = v3;
  a2[3] = 0LL;
  a2[4] = 0LL;
  a2[2] = v2;
}

void sub_1000FD820(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_1000FD830()
{
  v0._uint64_t countAndFlagsBits = 41LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

  ;
}

uint64_t sub_1000FD850()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 96));
}

  ;
}

uint64_t sub_1000FD864(uint64_t a1, void *a2)
{
  uint64_t result = *(void *)(v2 - 168);
  *a2 = *(void *)(v2 - 176);
  a2[1] = result;
  a2[3] = 0LL;
  a2[4] = 0LL;
  return result;
}

uint64_t sub_1000FD878(uint64_t a1)
{
  return sub_1000FC53C(a1, 0xE100000000000000LL);
}

uint64_t sub_1000FD880()
{
  return swift_bridgeObjectRetain(*(void *)(v0 - 168));
}

void sub_1000FD88C()
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PGetTimeWindowStartFunction.perform(with:arguments:)( SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  if (!v2)
  {
    uint64_t v4 = v3;
    swift_beginAccess(v3 + 32, v6, 0LL, 0LL);
    Swift::Double v5 = *(double *)(v4 + 32);
    swift_release();
    SQLiteContext.setDouble(_:)(v5);
  }

uint64_t type metadata accessor for PGetTimeWindowStartFunction()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer27PGetTimeWindowStartFunction);
}

uint64_t SQLiteSchematizerTableFunction.schematizer.getter()
{
  return swift_weakLoadStrong(v0 + 48);
}

uint64_t SQLiteSchematizerTableFunction.schematizer.setter(uint64_t a1)
{
  uint64_t v3 = v1 + 48;
  sub_100010BE4(v3, (uint64_t)v5, 1LL);
  swift_weakAssign(v3, a1);
  return swift_release();
}

void (*SQLiteSchematizerTableFunction.schematizer.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  sub_100010BE4(v1 + 48, (uint64_t)v3, 33LL);
  void v3[3] = swift_weakLoadStrong(v1 + 48);
  return sub_1000FDA18;
}

void sub_1000FDA18(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  swift_weakAssign(*(void *)(*(void *)a1 + 32LL) + 48LL, v4);
  if ((a2 & 1) != 0)
  {
    swift_release(v3[3]);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_release(v4);
  }

  free(v3);
}

uint64_t SQLiteSchematizerTableFunction.__allocating_init(_:)(uint64_t a1)
{
  return SQLiteSchematizerTableFunction.init(_:)(a1);
}

uint64_t SQLiteSchematizerTableFunction.init(_:)(uint64_t a1)
{
  uint64_t v3 = swift_weakInit(v1 + 48, 0LL);
  sub_100010BE4(v3, (uint64_t)v6, 1LL);
  swift_weakAssign(v1 + 48, a1);
  uint64_t v4 = SQLiteVTab.init(style:)(2LL);
  swift_release();
  return v4;
}

void SQLiteSchematizerTableFunction.__allocating_init(style:)()
{
}

void SQLiteSchematizerTableFunction.init(style:)()
{
}

uint64_t sub_1000FDB70()
{
  return swift_weakDestroy(v0 + 48);
}

uint64_t SQLiteSchematizerTableFunction.deinit()
{
  uint64_t v0 = SQLiteVTab.deinit();
  swift_weakDestroy(v0 + 48);
  return v0;
}

uint64_t SQLiteSchematizerTableFunction.__deallocating_deinit()
{
  uint64_t v0 = SQLiteSchematizerTableFunction.deinit();
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t sub_1000FDBC0()
{
  return swift_weakLoadStrong(v0 + 48);
}

uint64_t sub_1000FDC04(uint64_t a1)
{
  uint64_t v2 = "\b";
  return swift_initClassMetadata2(a1, 0LL, 1LL, &v2, a1 + 368);
}

uint64_t type metadata accessor for SQLiteSchematizerTableFunction( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SQLiteSchematizerTableFunction);
}

uint64_t SQLiteSchematizerFunction.init(_:)(uint64_t a1)
{
  uint64_t v3 = swift_weakInit(v1 + 40, 0LL);
  sub_100010BE4(v3, (uint64_t)v5, 1LL);
  swift_weakAssign(v1 + 40, a1);
  swift_release();
  return SQLiteBaseFunction.init()();
}

void SQLiteSchematizerFunction.init()(uint64_t a1, uint64_t a2)
{
}

uint64_t SQLiteSchematizerFunction.options.getter()
{
  return 2049LL;
}

void SQLiteSchematizerFunction.hookPerform(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = objc_autoreleasePoolPush();
  sub_1000E42D0((uint64_t)v6);
  if (!v3)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 336LL))(v2, a1, a2);
    swift_release();
  }

  objc_autoreleasePoolPop(v6);
}

void SQLiteSchematizerFunction.schematizer.getter(uint64_t a1)
{
}

uint64_t SQLiteSchematizerFunction.schematizer.setter(uint64_t a1)
{
  uint64_t v3 = v1 + 40;
  sub_100010BE4(v3, (uint64_t)v5, 1LL);
  swift_weakAssign(v3, a1);
  return swift_release();
}

void (*SQLiteSchematizerFunction.schematizer.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  sub_100010BE4(v1 + 40, (uint64_t)v3, 33LL);
  void v3[3] = sub_1000FDF0C();
  return sub_1000FDE2C;
}

void sub_1000FDE2C(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  swift_weakAssign(*(void *)(*(void *)a1 + 32LL) + 40LL, v4);
  if ((a2 & 1) != 0)
  {
    swift_release(v3[3]);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_release(v4);
  }

  free(v3);
}

uint64_t sub_1000FDE98()
{
  return swift_weakDestroy(v0 + 40);
}

uint64_t sub_1000FDEA0()
{
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t sub_1000FDEA8()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192LL))();
}

uint64_t type metadata accessor for SQLiteSchematizerFunction()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer25SQLiteSchematizerFunction);
}

uint64_t sub_1000FDEE4(uint64_t a1, ...)
{
  return swift_beginAccess(v1 + 40, va, 0LL, 0LL);
}

uint64_t sub_1000FDEFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_stdlib_reportUnimplementedInitializer(a1, 37LL, a3, 6LL, 0LL);
}

uint64_t sub_1000FDF0C()
{
  return swift_weakLoadStrong(v0);
}

void sub_1000FDF14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = v29[0];
  uint64_t v22 = v29[1];
  int64_t v30 = v29[3];
  unint64_t v7 = v29[4];
  int64_t v23 = (unint64_t)(v29[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a2);
  if (!v7) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v8 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v9 = v8 | (v30 << 6);
  while (1)
  {
    uint64_t v13 = (uint64_t *)(*(void *)(v24 + 48) + 16 * v9);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    swift_bridgeObjectRetain(v14);
    sub_1000ED6FC(v15, v14, v26);
    if (v3)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }

    sub_100019B20((uint64_t)v26, (uint64_t)v25);
    swift_bridgeObjectRetain(v14);
    uint64_t v16 = OneOfModel.init(_:)(v25);
    swift_isUniquelyReferenced_nonNull_native(a1);
    v25[0] = a1;
    sub_100102F4C(v16, v15, v14);
    uint64_t v17 = v25[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v18 = v27;
    uint64_t v19 = v28;
    sub_100019AFC(v26, v27);
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 24))(v18, v19);
    swift_retain(a3);
    sub_1000FEE68(v20);
    swift_bridgeObjectRelease();
    sub_1000108B8(v26);
    swift_bridgeObjectRelease();
    a1 = v17;
    if (v7) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v10 >= v23) {
      goto LABEL_24;
    }
    unint64_t v11 = *(void *)(v22 + 8 * v10);
    if (!v11)
    {
      int64_t v12 = v30 + 2;
      if (v30 + 2 >= v23) {
        goto LABEL_24;
      }
      unint64_t v11 = *(void *)(v22 + 8 * v12);
      if (v11) {
        goto LABEL_12;
      }
      int64_t v12 = v30 + 3;
      if (v30 + 3 >= v23) {
        goto LABEL_24;
      }
      unint64_t v11 = *(void *)(v22 + 8 * v12);
      if (v11) {
        goto LABEL_12;
      }
      int64_t v12 = v30 + 4;
      if (v30 + 4 >= v23) {
        goto LABEL_24;
      }
      unint64_t v11 = *(void *)(v22 + 8 * v12);
      if (v11)
      {
LABEL_12:
        int64_t v10 = v12;
      }

      else
      {
        int64_t v10 = v30 + 5;
        if (v30 + 5 >= v23) {
          goto LABEL_24;
        }
        unint64_t v11 = *(void *)(v22 + 8 * v10);
        if (!v11)
        {
          int64_t v21 = v30 + 6;
          while (v21 < v23)
          {
            unint64_t v11 = *(void *)(v22 + 8 * v21++);
            if (v11)
            {
              int64_t v10 = v21 - 1;
              goto LABEL_13;
            }
          }

uint64_t sub_1000FE208(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_1000D1AEC(v39);
  uint64_t v37 = v39[0];
  uint64_t v35 = v39[1];
  int64_t v43 = v39[3];
  unint64_t v6 = v39[4];
  int64_t v36 = (unint64_t)(v39[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a2);
  if (!v6) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v7 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v8 = v7 | (v43 << 6);
  while (1)
  {
    int64_t v12 = (uint64_t *)(*(void *)(v37 + 48) + 16 * v8);
    uint64_t v14 = *v12;
    uint64_t v13 = v12[1];
    swift_bridgeObjectRetain_n(v13, 2LL);
    sub_1000ED380(v14, v13, v38);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)a1;
    }

    PropertyModel.init(_:)(v38, (uint64_t)&v40);
    uint64_t v3 = 0LL;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
    v38[0] = (uint64_t)a1;
    unint64_t v16 = sub_10000EC64(v14, v13);
    uint64_t v18 = a1[2];
    BOOL v19 = (v17 & 1) == 0;
    Swift::Int v20 = v18 + v19;
    if (__OFADD__(v18, v19)) {
      break;
    }
    unint64_t v21 = v16;
    char v22 = v17;
    sub_10000941C(&qword_1001D9FE0);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v20))
    {
      unint64_t v23 = sub_10000EC64(v14, v13);
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_37;
      }
      unint64_t v21 = v23;
    }

    a1 = (void *)v38[0];
    if ((v22 & 1) != 0)
    {
      uint64_t v25 = *(void *)(v38[0] + 56) + 40 * v21;
      swift_bridgeObjectRelease();
      __int128 v26 = v41;
      *(_OWORD *)uint64_t v25 = v40;
      *(_OWORD *)(v25 + swift_weakDestroy(v0 + 16) = v26;
      *(_BYTE *)(v25 + 3sub_1000108B8(v0 + 2) = v42;
    }

    else
    {
      *(void *)(v38[0] + 8 * (v21 >> 6) + 64) |= 1LL << v21;
      uint64_t v27 = (uint64_t *)(a1[6] + 16 * v21);
      *uint64_t v27 = v14;
      v27[1] = v13;
      uint64_t v28 = a1[7] + 40 * v21;
      __int128 v29 = v41;
      *(_OWORD *)uint64_t v28 = v40;
      *(_OWORD *)(v28 + swift_weakDestroy(v0 + 16) = v29;
      *(_BYTE *)(v28 + 3sub_1000108B8(v0 + 2) = v42;
      uint64_t v30 = a1[2];
      BOOL v31 = __OFADD__(v30, 1LL);
      uint64_t v32 = v30 + 1;
      if (v31) {
        goto LABEL_35;
      }
      a1[2] = v32;
      swift_bridgeObjectRetain(v13);
    }

    swift_bridgeObjectRelease_n(v13, 2LL);
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v9 = v43 + 1;
    if (__OFADD__(v43, 1LL)) {
      goto LABEL_36;
    }
    if (v9 >= v36) {
      goto LABEL_32;
    }
    unint64_t v10 = *(void *)(v35 + 8 * v9);
    if (!v10)
    {
      int64_t v11 = v43 + 2;
      if (v43 + 2 >= v36) {
        goto LABEL_32;
      }
      unint64_t v10 = *(void *)(v35 + 8 * v11);
      if (v10) {
        goto LABEL_12;
      }
      int64_t v11 = v43 + 3;
      if (v43 + 3 >= v36) {
        goto LABEL_32;
      }
      unint64_t v10 = *(void *)(v35 + 8 * v11);
      if (v10) {
        goto LABEL_12;
      }
      int64_t v11 = v43 + 4;
      if (v43 + 4 >= v36) {
        goto LABEL_32;
      }
      unint64_t v10 = *(void *)(v35 + 8 * v11);
      if (v10)
      {
LABEL_12:
        int64_t v9 = v11;
      }

      else
      {
        int64_t v9 = v43 + 5;
        if (v43 + 5 >= v36) {
          goto LABEL_32;
        }
        unint64_t v10 = *(void *)(v35 + 8 * v9);
        if (!v10)
        {
          int64_t v33 = v43 + 6;
          while (v33 < v36)
          {
            unint64_t v10 = *(void *)(v35 + 8 * v33++);
            if (v10)
            {
              int64_t v9 = v33 - 1;
              goto LABEL_13;
            }
          }

void sub_1000FE578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  sub_1000D1AEC(v43);
  uint64_t v8 = v43[0];
  int64_t v9 = v43[3];
  unint64_t v10 = v43[4];
  uint64_t v38 = v43[1];
  int64_t v39 = (unint64_t)(v43[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a2);
  while (1)
  {
    if (v10)
    {
      unint64_t v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v12 = v11 | (v9 << 6);
      goto LABEL_15;
    }

    int64_t v13 = v9 + 1;
    if (__OFADD__(v9, 1LL)) {
      break;
    }
    if (v13 >= v39) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(v38 + 8 * v13);
    if (!v14)
    {
      int64_t v15 = v9 + 2;
      if (v9 + 2 >= v39) {
        goto LABEL_25;
      }
      unint64_t v14 = *(void *)(v38 + 8 * v15);
      if (v14) {
        goto LABEL_13;
      }
      int64_t v15 = v9 + 3;
      if (v9 + 3 >= v39) {
        goto LABEL_25;
      }
      unint64_t v14 = *(void *)(v38 + 8 * v15);
      if (v14) {
        goto LABEL_13;
      }
      int64_t v15 = v9 + 4;
      if (v9 + 4 >= v39) {
        goto LABEL_25;
      }
      unint64_t v14 = *(void *)(v38 + 8 * v15);
      if (v14)
      {
LABEL_13:
        int64_t v13 = v15;
      }

      else
      {
        int64_t v13 = v9 + 5;
        if (v9 + 5 >= v39) {
          goto LABEL_25;
        }
        unint64_t v14 = *(void *)(v38 + 8 * v13);
        if (!v14)
        {
          int64_t v32 = v9 + 6;
          while (v32 < v39)
          {
            unint64_t v14 = *(void *)(v38 + 8 * v32++);
            if (v14)
            {
              int64_t v13 = v32 - 1;
              goto LABEL_14;
            }
          }

uint64_t sub_1000FE9E8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v43 = a3;
  sub_1000D1AEC(v49);
  uint64_t v40 = v49[1];
  int64_t v44 = v49[3];
  unint64_t v7 = v49[4];
  int64_t v41 = (unint64_t)(v49[2] + 64LL) >> 6;
  uint64_t v42 = v49[0];
  swift_bridgeObjectRetain(a2);
  if (!v7) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v8 = __clz(__rbit64(v7));
  uint64_t v9 = (v7 - 1) & v7;
  unint64_t v10 = v8 | (v44 << 6);
  while (1)
  {
    unint64_t v14 = (uint64_t *)(*(void *)(v42 + 48) + 16 * v10);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    swift_bridgeObjectRetain_n(v15, 2LL);
    ProtoSchemaStore.enum(withName:)();
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)a1;
    }

    uint64_t v50 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for Int32,  &protocol witness table for String);
    uint64_t v17 = v47;
    uint64_t v18 = v48;
    sub_100019AFC(v46, v47);
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18);
    __chkstk_darwin(v19);
    v39[2] = &v50;
    v39[3] = v46;
    sub_1000E2FB8((uint64_t)sub_1000E3368, (uint64_t)v39, v19);
    uint64_t v45 = 0LL;
    unint64_t v20 = v9;
    swift_bridgeObjectRelease();
    uint64_t v21 = v50;
    sub_1000108B8(v46);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
    v46[0] = a1;
    unint64_t v23 = sub_10000EC64(v16, v15);
    uint64_t v25 = a1[2];
    BOOL v26 = (v24 & 1) == 0;
    Swift::Int v27 = v25 + v26;
    if (__OFADD__(v25, v26)) {
      break;
    }
    unint64_t v28 = v23;
    char v29 = v24;
    sub_10000941C(&qword_1001DA008);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v27))
    {
      unint64_t v30 = sub_10000EC64(v16, v15);
      if ((v29 & 1) != (v31 & 1)) {
        goto LABEL_37;
      }
      unint64_t v28 = v30;
    }

    a1 = (void *)v46[0];
    if ((v29 & 1) != 0)
    {
      uint64_t v32 = *(void *)(v46[0] + 56LL);
      swift_bridgeObjectRelease();
      *(void *)(v32 + 8 * v28) = v21;
    }

    else
    {
      *(void *)(v46[0] + 8 * (v28 >> 6) + 64) |= 1LL << v28;
      uint64_t v33 = (uint64_t *)(a1[6] + 16 * v28);
      *uint64_t v33 = v16;
      v33[1] = v15;
      *(void *)(a1[7] + 8 * v28) = v21;
      uint64_t v34 = a1[2];
      BOOL v35 = __OFADD__(v34, 1LL);
      uint64_t v36 = v34 + 1;
      if (v35) {
        goto LABEL_35;
      }
      a1[2] = v36;
      swift_bridgeObjectRetain(v15);
    }

    swift_bridgeObjectRelease_n(v15, 2LL);
    swift_bridgeObjectRelease();
    unint64_t v7 = v20;
    uint64_t v4 = v45;
    if (v7) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v11 = v44 + 1;
    if (__OFADD__(v44, 1LL)) {
      goto LABEL_36;
    }
    if (v11 >= v41) {
      goto LABEL_32;
    }
    unint64_t v12 = *(void *)(v40 + 8 * v11);
    if (!v12)
    {
      int64_t v13 = v44 + 2;
      if (v44 + 2 >= v41) {
        goto LABEL_32;
      }
      unint64_t v12 = *(void *)(v40 + 8 * v13);
      if (v12) {
        goto LABEL_12;
      }
      int64_t v13 = v44 + 3;
      if (v44 + 3 >= v41) {
        goto LABEL_32;
      }
      unint64_t v12 = *(void *)(v40 + 8 * v13);
      if (v12) {
        goto LABEL_12;
      }
      int64_t v13 = v44 + 4;
      if (v44 + 4 >= v41) {
        goto LABEL_32;
      }
      unint64_t v12 = *(void *)(v40 + 8 * v13);
      if (v12)
      {
LABEL_12:
        int64_t v11 = v13;
      }

      else
      {
        int64_t v11 = v44 + 5;
        if (v44 + 5 >= v41) {
          goto LABEL_32;
        }
        unint64_t v12 = *(void *)(v40 + 8 * v11);
        if (!v12)
        {
          int64_t v37 = v44 + 6;
          while (v37 < v41)
          {
            unint64_t v12 = *(void *)(v40 + 8 * v37++);
            if (v12)
            {
              int64_t v11 = v37 - 1;
              goto LABEL_13;
            }
          }

uint64_t ProtoSchemaStore.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, 64LL, 7LL);
  ProtoSchemaStore.init()();
  return v1;
}

uint64_t ProtoSchemaStore.__allocating_init(withModel:)()
{
  uint64_t v1 = sub_100009ACC(v0, 64LL);
  ProtoSchemaStore.init(withModel:)();
  return v1;
}

void sub_1000FEE68(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1 + 56;
  uint64_t v5 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v9 = 0LL;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v10 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    swift_bridgeObjectRetain(v17);
    sub_1000ED380(v16, v17, v19);
    if (v2)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }

    sub_1000108B8(v19);
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v9++, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v9 >= v8) {
      goto LABEL_26;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v9);
    if (!v13)
    {
      int64_t v14 = v9 + 1;
      if (v9 + 1 >= v8) {
        goto LABEL_26;
      }
      unint64_t v13 = *(void *)(v4 + 8 * v14);
      if (v13) {
        goto LABEL_14;
      }
      int64_t v14 = v9 + 2;
      if (v9 + 2 >= v8) {
        goto LABEL_26;
      }
      unint64_t v13 = *(void *)(v4 + 8 * v14);
      if (v13) {
        goto LABEL_14;
      }
      int64_t v14 = v9 + 3;
      if (v9 + 3 >= v8) {
        goto LABEL_26;
      }
      unint64_t v13 = *(void *)(v4 + 8 * v14);
      if (v13)
      {
LABEL_14:
        int64_t v9 = v14;
        goto LABEL_15;
      }

      int64_t v18 = v9 + 4;
      if (v9 + 4 >= v8)
      {
LABEL_26:
        swift_release();
        swift_release();
        return;
      }

      unint64_t v13 = *(void *)(v4 + 8 * v18);
      v9 += 4LL;
      if (!v13) {
        break;
      }
    }

uint64_t ProtoSchemaStore.allEnumNames.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t ProtoSchemaStore.__allocating_init(withURL:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for JSONDecoder(0LL);
  uint64_t v4 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  JSONDecoder.init()();
  uint64_t v5 = Data.init(contentsOf:options:)(a1, 0LL);
  if (v1)
  {
    uint64_t v7 = sub_10005A18C();
    sub_1000A1498(v7);
    swift_release();
  }

  else
  {
    uint64_t v8 = v5;
    uint64_t v9 = v6;
    unint64_t v10 = sub_1000FF268();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)( &v14,  &type metadata for SchemaStoreModel,  v8,  v9,  &type metadata for SchemaStoreModel,  v10);
    sub_10005A904();
    uint64_t v12 = type metadata accessor for ProtoSchemaStore();
    uint64_t v4 = sub_100009ACC(v12, 64LL);
    ProtoSchemaStore.init(withModel:)();
    uint64_t v13 = sub_10005A18C();
    sub_1000A1498(v13);
    swift_release();
  }

  return v4;
}

void *ProtoSchemaStore.init()()
{
  uint64_t v1 = type metadata accessor for ProtoEnum();
  v0[4] = sub_10010116C(v1, v2, v1);
  uint64_t v3 = type metadata accessor for ProtoMessageSchema();
  uint64_t v5 = sub_10010116C(v3, v4, v3);
  v0[5] = v5;
  v0[2] = _swiftEmptySetSingleton;
  v0[3] = _swiftEmptySetSingleton;
  uint64_t v7 = sub_10010116C(v5, v6, (uint64_t)&type metadata for EnumModel);
  v0[6] = v7;
  v0[7] = sub_10010116C(v7, v8, (uint64_t)&type metadata for MessageSchemaModel);
  return v0;
}

void *ProtoSchemaStore.init(withModel:)()
{
  uint64_t v3 = sub_1001011EC();
  v0[4] = sub_1001011A8(v3, v4, v3);
  uint64_t v5 = sub_1001011F4();
  v0[5] = sub_1001011A8(v5, v6, v5);
  uint64_t v7 = sub_1000145E8();
  v0[2] = sub_1000FF2D0(v7, (void *(*)(void *__return_ptr, uint64_t))sub_1000D1AEC);
  uint64_t v8 = sub_10005A62C();
  v0[3] = sub_1000FF2D0(v8, (void *(*)(void *__return_ptr, uint64_t))sub_1000D1AEC);
  v0[6] = v1;
  v0[7] = v2;
  return v0;
}

unint64_t sub_1000FF268()
{
  unint64_t result = qword_1001D9E60;
  if (!qword_1001D9E60)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SchemaStoreModel,  &type metadata for SchemaStoreModel);
    atomic_store(result, (unint64_t *)&qword_1001D9E60);
  }

  return result;
}

uint64_t type metadata accessor for ProtoSchemaStore()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer16ProtoSchemaStore);
}

void *sub_1000FF2C4(uint64_t a1)
{
  return sub_1000FF2D0(a1, (void *(*)(void *__return_ptr, uint64_t))sub_1000D1AEC);
}

void *sub_1000FF2D0(uint64_t a1, void *(*a2)(void *__return_ptr, uint64_t))
{
  uint64_t v20 = Set.init(minimumCapacity:)(*(void *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  unint64_t result = a2(v21, a1);
  uint64_t v5 = v21[0];
  uint64_t v6 = v21[1];
  int64_t v7 = v21[3];
  unint64_t v8 = v22;
  int64_t v9 = (unint64_t)(v21[2] + 64LL) >> 6;
  if (!v22) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v11 = v10 | (v7 << 6);
  while (1)
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v11);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    sub_1000145E8();
    sub_100057B4C(&v19, v17, v18);
    unint64_t result = (void *)swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v12 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_21;
    }
    unint64_t v13 = *(void *)(v6 + 8 * v12);
    int64_t v14 = v7 + 1;
    if (!v13)
    {
      int64_t v14 = v7 + 2;
      if (v7 + 2 >= v9) {
        goto LABEL_21;
      }
      unint64_t v13 = *(void *)(v6 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v7 + 3;
        if (v7 + 3 >= v9) {
          goto LABEL_21;
        }
        unint64_t v13 = *(void *)(v6 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v7 + 4;
          if (v7 + 4 >= v9) {
            goto LABEL_21;
          }
          unint64_t v13 = *(void *)(v6 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v7 + 5;
            if (v7 + 5 >= v9) {
              goto LABEL_21;
            }
            unint64_t v13 = *(void *)(v6 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v7 + 6;
              while (v15 < v9)
              {
                unint64_t v13 = *(void *)(v6 + 8 * v15++);
                if (v13)
                {
                  int64_t v14 = v15 - 1;
                  goto LABEL_18;
                }
              }

void ProtoSchemaStore.messageSchema(withName:)()
{
  uint64_t v6 = v5;
  uint64_t v7 = v1 + 40;
  sub_100010BE4(v1 + 40, (uint64_t)v41, 0LL);
  uint64_t v8 = *(void *)(v1 + 40);
  if (*(void *)(v8 + 16))
  {
    sub_10005A62C();
    swift_bridgeObjectRetain(v8);
    unint64_t v9 = sub_1001011CC();
    if ((v10 & 1) != 0)
    {
      uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
      swift_retain(v11);
      sub_10001460C();
      sub_100009B3C();
      v6[3] = sub_1001011F4();
      v6[4] = (uint64_t)&off_1001B9FB8;
      uint64_t *v6 = v11;
      goto LABEL_9;
    }

    sub_10001460C();
    sub_100009B3C();
  }

  uint64_t v42 = v6;
  uint64_t v38 = v4 + 56;
  sub_100010BE4(v4 + 56, (uint64_t)v40, 0LL);
  uint64_t v12 = *(void *)(v4 + 56);
  sub_10005A62C();
  swift_bridgeObjectRetain(v12);
  uint64_t v13 = sub_1000EEEE8();
  uint64_t v15 = sub_1000FB4AC(v13, v14, v12);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  sub_10001460C();
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v20 = sub_1001011F4();
    sub_100009ACC(v20, 112LL);
    sub_10005A62C();
    swift_retain(v4);
    uint64_t v21 = sub_1000EEEE8();
    uint64_t v24 = sub_1000ECFA0(v21, v22, v15, v17, v19, v4, v23);
    if (!v0)
    {
      uint64_t v25 = v24;
      sub_100010BE4(v7, (uint64_t)v39, 33LL);
      sub_10005A62C();
      swift_retain(v25);
      uint64_t v26 = sub_1000FBC68();
      sub_10004ECB8(v26);
      sub_10001460C();
      sub_100010BE4(v38, (uint64_t)v39, 33LL);
      uint64_t v27 = sub_1000EEEE8();
      uint64_t v29 = sub_1000FFBD0(v27, v28);
      uint64_t v31 = v30;
      uint64_t v33 = v32;
      sub_10004ECB8(v29);
      sub_100100080(v29, v31, v33);
      uint64_t v34 = v42;
      v42[3] = v20;
      v34[4] = (uint64_t)&off_1001B9FB8;
      *uint64_t v34 = v25;
    }
  }

  else
  {
    unint64_t v35 = sub_1000E43B4();
    sub_100010EA0((uint64_t)&type metadata for SchemaError, v35);
    *(void *)uint64_t v36 = v3;
    *(void *)(v36 + 8) = v2;
    *(_BYTE *)(v36 + 41) = 1;
    uint64_t v37 = sub_10005A62C();
    swift_willThrow(v37);
  }

void ProtoSchemaStore.enum(withName:)()
{
  uint64_t v6 = v5;
  uint64_t v7 = v1 + 32;
  sub_100010BE4(v1 + 32, (uint64_t)v32, 0LL);
  uint64_t v8 = *(void *)(v1 + 32);
  if (*(void *)(v8 + 16))
  {
    sub_10005A62C();
    swift_bridgeObjectRetain(v8);
    unint64_t v9 = sub_1001011CC();
    if ((v10 & 1) != 0)
    {
      uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
      swift_retain(v11);
      sub_10001460C();
      sub_100009B3C();
      v6[3] = sub_1001011EC();
      v6[4] = &off_1001B9B98;
      void *v6 = v11;
      goto LABEL_9;
    }

    sub_10001460C();
    sub_100009B3C();
  }

  uint64_t v12 = v4 + 48;
  sub_100010BE4(v4 + 48, (uint64_t)v31, 0LL);
  uint64_t v13 = *(void *)(v4 + 48);
  sub_10005A62C();
  swift_bridgeObjectRetain(v13);
  uint64_t v14 = sub_1000EEEE8();
  uint64_t v15 = sub_1000FB524(v14);
  sub_10001460C();
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v16 = sub_1001011EC();
    sub_100009ACC(v16, 48LL);
    sub_10005A62C();
    uint64_t v17 = sub_1000EEEE8();
    sub_1000E676C(v17, v18, v15);
    if (!v0)
    {
      uint64_t v20 = v19;
      sub_100010BE4(v7, (uint64_t)v30, 33LL);
      sub_10005A62C();
      swift_retain(v20);
      uint64_t v21 = sub_1000FBC74();
      sub_10004ECB8(v21);
      sub_10001460C();
      sub_100010BE4(v12, (uint64_t)v30, 33LL);
      uint64_t v22 = sub_1000EEEE8();
      uint64_t v26 = sub_1000FFE44(v22, v23, v24, v25);
      sub_10004ECB8(v26);
      sub_100009B3C();
      v6[3] = v16;
      v6[4] = &off_1001B9B98;
      void *v6 = v20;
    }
  }

  else
  {
    unint64_t v27 = sub_1000E43B4();
    sub_100010EA0((uint64_t)&type metadata for SchemaError, v27);
    *(void *)uint64_t v28 = v3;
    *(void *)(v28 + 8) = v2;
    *(_BYTE *)(v28 + 41) = 2;
    uint64_t v29 = sub_10005A62C();
    swift_willThrow(v29);
  }

unint64_t ProtoSchemaStore.description.getter()
{
  v4[0] = 0LL;
  v4[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(28LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  unint64_t v5 = 0xD00000000000001ALL;
  unint64_t v6 = 0x80000001001731B0LL;
  swift_beginAccess(v0 + 40, v4, 0LL, 0LL);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  return v5;
}

Schematizer::SchemaStoreModel __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtoSchemaStore.asModel()()
{
  uint64_t v0 = swift_unknownObjectRetain();
  Swift::String v1 = (void *)SchemaStoreModel.init(_:)(v0, (uint64_t)&protocol witness table for ProtoSchemaStore);
  result.enums._rawValue = v2;
  result.schemas._rawValue = v1;
  return result;
}

Schematizer::SchemaStoreModel __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtoSchemaStore.engagedElementsModel()()
{
  uint64_t v4 = sub_1001011D8();
  sub_1000FE578(v4, v5, v6);
  if (v1)
  {
    sub_10001683C();
    sub_10001460C();
  }

  else
  {
    uint64_t v2 = v7;
    sub_10001460C();
    sub_100010BE4(v0 + 32, (uint64_t)&v14, 0LL);
    sub_1000145E8();
    sub_10005A62C();
    Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for EnumModel,  &protocol witness table for String);
    sub_1001011FC();
    uint64_t v8 = (void *)sub_1001011D8();
    uint64_t v3 = sub_1000FE9E8(v8, v9, v10);
    swift_bridgeObjectRelease();
    sub_10001683C();
    sub_10001460C();
  }

  uint64_t v11 = v2;
  uint64_t v12 = (void *)v3;
  result.enums._rawValue = v12;
  result.schemas._rawValue = v11;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtoSchemaStore.merge(with:)( Schematizer::SchemaStoreModel with)
{
  uint64_t v2 = sub_1000145E8();
  uint64_t v3 = sub_10010079C( v2,  (uint64_t)sub_1001010E4,  0LL,  (void *)(v1 + 48),  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))sub_100100AD4);
  sub_10004ECB8(v3);
  uint64_t v4 = (void *)(v1 + 56);
  sub_100010BE4((uint64_t)v4, (uint64_t)v7, 33LL);
  uint64_t v5 = sub_10005A62C();
  uint64_t v6 = sub_10010079C( v5,  (uint64_t)sub_100100CE8,  0LL,  v4,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))sub_100100830);
  sub_10004ECB8(v6);
}

void *ProtoSchemaStore.deinit()
{
  return v0;
}

uint64_t ProtoSchemaStore.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

uint64_t sub_1000FFB24(uint64_t a1)
{
  return ProtoSchemaStore.__allocating_init(withURL:)(a1);
}

uint64_t sub_1000FFB38()
{
  return ProtoSchemaStore.__allocating_init(withModel:)();
}

void sub_1000FFB4C()
{
}

void sub_1000FFB60()
{
}

void *sub_1000FFB74()
{
  return ProtoSchemaStore.asModel()().schemas._rawValue;
}

void *sub_1000FFB88()
{
  return ProtoSchemaStore.engagedElementsModel()().schemas._rawValue;
}

void sub_1000FFB9C(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_1000FFBB0()
{
  return ProtoSchemaStore.description.getter();
}

uint64_t sub_1000FFBD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain(*v3);
  unint64_t v6 = sub_10000EC64(a1, a2);
  LOBYTE(asub_1000108B8(v0 + 2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v13 = *v3;
  uint64_t v9 = *v3;
  void *v3 = 0x8000000000000000LL;
  Swift::Int v10 = *(void *)(v9 + 24);
  sub_10000941C(&qword_1001D9FF8);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(*(void *)(v13 + 56) + 24 * v6);
  _NativeDictionary._delete(at:)(v6, v13, &type metadata for String, &type metadata for MessageSchemaModel);
  void *v3 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

void sub_1000FFCF0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  sub_10005A62C();
  unint64_t v8 = sub_10000EC64(a1, a2);
  LOBYTE(asub_1000108B8(v0 + 2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v19 = *v4;
    uint64_t v11 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    Swift::Int v12 = *(void *)(v11 + 24);
    sub_10000941C(&qword_1001D9FE0);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v12);
    sub_100080A3C(*(void *)(v19 + 48) + 16 * v8);
    uint64_t v13 = (unsigned __int8 *)(*(void *)(v19 + 56) + 40 * v8);
    uint64_t v14 = *v13;
    uint64_t v15 = *((void *)v13 + 1);
    uint64_t v16 = *((void *)v13 + 2);
    uint64_t v17 = *((void *)v13 + 3);
    unsigned __int8 v18 = v13[32];
    _NativeDictionary._delete(at:)( v8,  v19,  &type metadata for String,  &type metadata for PropertyModel,  &protocol witness table for String);
    *uint64_t v4 = v19;
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v17 = 0LL;
    unsigned __int8 v18 = 0;
    uint64_t v16 = 1LL;
  }

  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v15;
  *(void *)(a3 + swift_weakDestroy(v0 + 16) = v16;
  *(void *)(a3 + 24) = v17;
  *(_BYTE *)(a3 + 3sub_1000108B8(v0 + 2) = v18;
  sub_1000144F0();
}

void sub_1000FFE14(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t sub_1000FFE30(uint64_t a1, uint64_t a2)
{
  return sub_1000FFE44(a1, a2, &qword_1001D9FD0, (uint64_t)&type metadata for OneOfModel);
}

uint64_t sub_1000FFE44(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  char v7 = v4;
  swift_bridgeObjectRetain(*v7);
  unint64_t v10 = sub_10000EC64(a1, a2);
  LOBYTE(asub_1000108B8(v0 + 2) = v11;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
  sub_100080A78();
  Swift::Int v14 = *(void *)(v13 + 24);
  sub_10000941C(a3);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v14);
  sub_100080A3C(*(void *)(v17 + 48) + 16 * v10);
  uint64_t v15 = *(void *)(*(void *)(v17 + 56) + 8 * v10);
  _NativeDictionary._delete(at:)(v10, v17, &type metadata for String, a4);
  void *v7 = v17;
  swift_bridgeObjectRelease();
  return v15;
}

void sub_1000FFF40(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

void sub_1000FFF5C( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void (*a4)(unint64_t, uint64_t)@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v10 = v6;
  swift_bridgeObjectRetain(*v10);
  unint64_t v14 = sub_10000EC64(a1, a2);
  LOBYTE(asub_1000108B8(v0 + 2) = v15;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v10);
    sub_100080A78();
    Swift::Int v18 = *(void *)(v17 + 24);
    sub_10000941C(a3);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v18);
    sub_100080A3C(*(void *)(v20 + 48) + 16 * v14);
    a4(*(void *)(v20 + 56) + 40 * v14, a6);
    uint64_t v19 = sub_10000941C(a5);
    _NativeDictionary._delete(at:)(v14, v20, &type metadata for String, v19);
    *unint64_t v10 = v20;
    swift_bridgeObjectRelease();
  }

  else
  {
    *(void *)(a6 + 3sub_1000108B8(v0 + 2) = 0LL;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + swift_weakDestroy(v0 + 16) = 0u;
    sub_1000144F0();
  }

uint64_t sub_100100080(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a3);
  }

  return result;
}

uint64_t sub_1001000B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_10000941C(&qword_1001DA000);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v36 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v38 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0LL;
    if (!v11) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v15 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
    {
      uint64_t v20 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
      uint64_t v22 = *v20;
      uint64_t v21 = v20[1];
      uint64_t v23 = *(void *)(v5 + 56) + 24 * i;
      __int128 v40 = *(_OWORD *)v23;
      uint64_t v24 = *(void *)(v23 + 16);
      if ((v39 & 1) == 0)
      {
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v40);
        swift_bridgeObjectRetain(*((void *)&v40 + 1));
        swift_bridgeObjectRetain(v24);
      }

      Hasher.init(_seed:)(v41, *(void *)(v8 + 40));
      String.hash(into:)(v41, v22, v21);
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1LL << *(_BYTE *)(v8 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1LL << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) == 0)
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v25) >> 6;
        while (++v27 != v30 || (v29 & 1) == 0)
        {
          BOOL v31 = v27 == v30;
          if (v27 == v30) {
            unint64_t v27 = 0LL;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v12 + 8 * v27);
          if (v32 != -1)
          {
            unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        return result;
      }

      unint64_t v28 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v12 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v28;
      uint64_t v33 = (void *)(*(void *)(v8 + 48) + 16 * v28);
      *uint64_t v33 = v22;
      v33[1] = v21;
      uint64_t v34 = *(void *)(v8 + 56) + 24 * v28;
      *(_OWORD *)uint64_t v34 = v40;
      *(void *)(v34 + swift_weakDestroy(v0 + 16) = v24;
      ++*(void *)(v8 + 16);
      if (v11) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v17 = v14 + 1;
      if (__OFADD__(v14, 1LL)) {
        goto LABEL_42;
      }
      if (v17 >= v37) {
        goto LABEL_35;
      }
      unint64_t v18 = v38[v17];
      ++v14;
      if (!v18)
      {
        int64_t v14 = v17 + 1;
        if (v17 + 1 >= v37) {
          goto LABEL_35;
        }
        unint64_t v18 = v38[v14];
        if (!v18)
        {
          int64_t v19 = v17 + 2;
          if (v19 >= v37)
          {
LABEL_35:
            swift_release();
            uint64_t v3 = v36;
            if ((v39 & 1) != 0)
            {
              uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
              if (v35 >= 64) {
                sub_100057A20(0LL, (unint64_t)(v35 + 63) >> 6, v38);
              }
              else {
                void *v38 = -1LL << v35;
              }
              *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
            }

            break;
          }

          unint64_t v18 = v38[v19];
          if (!v18)
          {
            while (1)
            {
              int64_t v14 = v19 + 1;
              if (__OFADD__(v19, 1LL)) {
                goto LABEL_43;
              }
              if (v14 >= v37) {
                goto LABEL_35;
              }
              unint64_t v18 = v38[v14];
              ++v19;
              if (v18) {
                goto LABEL_21;
              }
            }
          }

          int64_t v14 = v19;
        }
      }

uint64_t sub_1001003E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_10000941C((uint64_t *)&unk_1001DA010);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_42;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0LL;
  if (!v11) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v15 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v14 << 6))
  {
    uint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    uint64_t v24 = *(void *)(*(void *)(v5 + 56) + 8 * i);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v21[1]);
      swift_bridgeObjectRetain(v24);
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v23, v22);
    uint64_t result = Hasher._finalize()();
    uint64_t v25 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1LL << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) == 0)
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v25) >> 6;
      while (++v27 != v30 || (v29 & 1) == 0)
      {
        BOOL v31 = v27 == v30;
        if (v27 == v30) {
          unint64_t v27 = 0LL;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v12 + 8 * v27);
        if (v32 != -1)
        {
          unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    unint64_t v28 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v12 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v28;
    uint64_t v33 = (void *)(*(void *)(v8 + 48) + 16 * v28);
    *uint64_t v33 = v23;
    v33[1] = v22;
    *(void *)(*(void *)(v8 + 56) + 8 * v28) = v24;
    ++*(void *)(v8 + 16);
    if (v11) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      goto LABEL_44;
    }
    if (v17 >= v35)
    {
      swift_release();
      unint64_t v18 = (void *)(v5 + 64);
      goto LABEL_37;
    }

    unint64_t v18 = (void *)(v5 + 64);
    unint64_t v19 = *(void *)(v36 + 8 * v17);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v35) {
        goto LABEL_35;
      }
      unint64_t v19 = *(void *)(v36 + 8 * v14);
      if (!v19) {
        break;
      }
    }

uint64_t sub_1001006E8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *a1 = a4;
  a1[1] = a5;
  a1[2] = a6;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(a6);
  return a2;
}

uint64_t sub_100100754(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a4;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a4);
  return a2;
}

uint64_t sub_10010079C( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))
{
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
  uint64_t v13 = *a4;
  *a4 = 0x8000000000000000LL;
  a5(a1, a2, a3, isUniquelyReferenced_nonNull_native, &v13);
  uint64_t v11 = *a4;
  *a4 = v13;
  return swift_bridgeObjectRelease(v11);
}

uint64_t sub_100100830(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v47 = a5;
  sub_100100D34(a1, a2, a3, v42);
  __int128 v38 = v42[0];
  __int128 v39 = v42[1];
  __int128 v40 = v42[2];
  uint64_t v41 = v43;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100100D70((uint64_t)v44);
  sub_100101124((uint64_t)v44, (uint64_t)&v33);
  sub_100101124((uint64_t)v44, (uint64_t)v45);
  if (v46)
  {
    while (1)
    {
      uint64_t v7 = v33;
      uint64_t v8 = v34;
      uint64_t v9 = v35;
      uint64_t v10 = v36;
      uint64_t v11 = v37;
      uint64_t v12 = (void *)*v47;
      unint64_t v14 = sub_10000EC64(v33, v34);
      uint64_t v15 = v12[2];
      BOOL v16 = (v13 & 1) == 0;
      uint64_t v17 = v15 + v16;
      if (__OFADD__(v15, v16)) {
        break;
      }
      char v18 = v13;
      if (v12[3] >= v17)
      {
        if ((a4 & 1) == 0)
        {
          sub_10000941C(&qword_1001D9FF8);
          _NativeDictionary.copy()();
        }
      }

      else
      {
        sub_1001000B8(v17, a4 & 1);
        unint64_t v19 = sub_10000EC64(v7, v8);
        if ((v18 & 1) != (v20 & 1)) {
          goto LABEL_16;
        }
        unint64_t v14 = v19;
      }

      uint64_t v21 = (void *)*v47;
      if ((v18 & 1) != 0)
      {
        uint64_t v22 = (void *)(v21[7] + 24 * v14);
        uint64_t v23 = v22[1];
        uint64_t v32 = *v22;
        uint64_t v24 = v22[2];
        swift_bridgeObjectRetain(*v22);
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v25 = (void *)(v21[7] + 24 * v14);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *uint64_t v25 = v32;
        v25[1] = v23;
        v25[2] = v24;
      }

      else
      {
        v21[(v14 >> 6) + 8] |= 1LL << v14;
        unint64_t v26 = (uint64_t *)(v21[6] + 16 * v14);
        *unint64_t v26 = v7;
        v26[1] = v8;
        unint64_t v27 = (void *)(v21[7] + 24 * v14);
        *unint64_t v27 = v9;
        v27[1] = v10;
        void v27[2] = v11;
        uint64_t v28 = v21[2];
        BOOL v29 = __OFADD__(v28, 1LL);
        uint64_t v30 = v28 + 1;
        if (v29) {
          goto LABEL_15;
        }
        void v21[2] = v30;
      }

      sub_100100D70((uint64_t)v44);
      sub_100101124((uint64_t)v44, (uint64_t)&v33);
      sub_100101124((uint64_t)v44, (uint64_t)v45);
      a4 = 1;
      if (!v46) {
        goto LABEL_13;
      }
    }

    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
  }

  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    swift_release();
    sub_10003D774(v38);
    return swift_release();
  }

  return result;
}

uint64_t sub_100100AD4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v33 = v34;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  uint64_t v8 = sub_100100F54();
  if (v9)
  {
    uint64_t v11 = v8;
    uint64_t v12 = v9;
    uint64_t v13 = v10;
    while (1)
    {
      unint64_t v14 = (void *)*a5;
      unint64_t v16 = sub_10000EC64(v11, v12);
      uint64_t v17 = v14[2];
      BOOL v18 = (v15 & 1) == 0;
      uint64_t v19 = v17 + v18;
      if (__OFADD__(v17, v18)) {
        break;
      }
      char v20 = v15;
      if (v14[3] >= v19)
      {
        if ((a4 & 1) == 0)
        {
          sub_10000941C(&qword_1001DA008);
          _NativeDictionary.copy()();
        }
      }

      else
      {
        sub_1001003E4(v19, a4 & 1);
        unint64_t v21 = sub_10000EC64(v11, v12);
        if ((v20 & 1) != (v22 & 1)) {
          goto LABEL_17;
        }
        unint64_t v16 = v21;
      }

      uint64_t v23 = (void *)*a5;
      if ((v20 & 1) != 0)
      {
        uint64_t v24 = *(void *)(v23[7] + 8 * v16);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v25 = v23[7];
        swift_bridgeObjectRelease();
        *(void *)(v25 + 8 * vswift_weakDestroy(v0 + 16) = v24;
      }

      else
      {
        v23[(v16 >> 6) + 8] |= 1LL << v16;
        unint64_t v26 = (uint64_t *)(v23[6] + 16 * v16);
        *unint64_t v26 = v11;
        v26[1] = v12;
        *(void *)(v23[7] + 8 * vswift_weakDestroy(v0 + 16) = v13;
        uint64_t v27 = v23[2];
        BOOL v28 = __OFADD__(v27, 1LL);
        uint64_t v29 = v27 + 1;
        if (v28) {
          goto LABEL_16;
        }
        v23[2] = v29;
      }

      uint64_t v11 = sub_100100F54();
      uint64_t v12 = v30;
      uint64_t v13 = v31;
      a4 = 1;
      if (!v30) {
        goto LABEL_14;
      }
    }

    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
  }

  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_release();
    sub_10003D774(v33);
    return swift_release();
  }

  return result;
}

__n128 sub_100100CE8@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3 = sub_1001006E8(&v7, *a1, a1[1], a1[2], a1[3], a1[4]);
  unint64_t v4 = v8;
  __n128 result = v7;
  a2->n128_u64[0] = v3;
  a2->n128_u64[1] = v6;
  a2[1] = result;
  a2[2].n128_u64[0] = v4;
  return result;
}

uint64_t sub_100100D34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v8 = -1LL;
  }
  a4[3] = 0LL;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_100100D70@<X0>(uint64_t a1@<X8>)
{
  void (*v16)(uint64_t *__return_ptr, void *);
  uint64_t result;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  void v30[5];
  uint64_t v3 = *v1;
  int64_t v5 = v1[3];
  unint64_t v4 = v1[4];
  int64_t v6 = v5;
  if (v4)
  {
    uint64_t v7 = (v4 - 1) & v4;
    unint64_t v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    uint64_t v9 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v8);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    uint64_t v12 = (uint64_t *)(*(void *)(v3 + 56) + 24 * v8);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = v12[2];
    _OWORD v1[3] = v6;
    v1[4] = v7;
    unint64_t v16 = (void (*)(uint64_t *__return_ptr, void *))v1[5];
    v30[0] = v10;
    v30[1] = v11;
    v30[2] = v13;
    v30[3] = v14;
    v30[4] = v15;
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    v16(&v27, v30);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v13);
    uint64_t result = swift_bridgeObjectRelease(v11);
    BOOL v18 = v27;
    uint64_t v19 = v28;
    char v20 = v29;
LABEL_23:
    *(void *)a1 = v18;
    *(_OWORD *)(a1 + 8) = v19;
    *(_OWORD *)(a1 + 24) = v20;
    return result;
  }

  unint64_t v21 = v5 + 1;
  if (!__OFADD__(v5, 1LL))
  {
    char v22 = (unint64_t)(v1[2] + 64) >> 6;
    if (v21 < v22)
    {
      uint64_t v23 = v1[1];
      uint64_t v24 = *(void *)(v23 + 8 * v21);
      if (v24)
      {
LABEL_7:
        uint64_t v7 = (v24 - 1) & v24;
        unint64_t v8 = __clz(__rbit64(v24)) + (v21 << 6);
        int64_t v6 = v21;
        goto LABEL_3;
      }

      uint64_t v25 = v5 + 2;
      int64_t v6 = v5 + 1;
      if (v5 + 2 < v22)
      {
        uint64_t v24 = *(void *)(v23 + 8 * v25);
        if (v24)
        {
LABEL_10:
          unint64_t v21 = v25;
          goto LABEL_7;
        }

        int64_t v6 = v5 + 2;
        if (v5 + 3 < v22)
        {
          uint64_t v24 = *(void *)(v23 + 8 * (v5 + 3));
          if (v24)
          {
            unint64_t v21 = v5 + 3;
            goto LABEL_7;
          }

          uint64_t v25 = v5 + 4;
          int64_t v6 = v5 + 3;
          if (v5 + 4 < v22)
          {
            uint64_t v24 = *(void *)(v23 + 8 * v25);
            if (v24) {
              goto LABEL_10;
            }
            unint64_t v21 = v5 + 5;
            int64_t v6 = v5 + 4;
            if (v5 + 5 < v22)
            {
              uint64_t v24 = *(void *)(v23 + 8 * v21);
              if (v24) {
                goto LABEL_7;
              }
              int64_t v6 = v22 - 1;
              unint64_t v26 = v5 + 6;
              while (v26 < v22)
              {
                uint64_t v24 = *(void *)(v23 + 8 * v26++);
                if (v24)
                {
                  unint64_t v21 = v26 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }

    BOOL v18 = 0LL;
    _OWORD v1[3] = v6;
    v1[4] = 0LL;
    uint64_t v19 = 0uLL;
    char v20 = 0uLL;
    goto LABEL_23;
  }

  __break(1u);
  return result;
}

uint64_t sub_100100F54()
{
  void (*v11)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[3];
  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = *(void *)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    _BYTE v20[2] = v10;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    v11(&v19, v20);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v9);
    return v19;
  }

  uint64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      uint64_t v15 = v0[1];
      unint64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }

      uint64_t v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        unint64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          uint64_t v13 = v17;
          goto LABEL_7;
        }

        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          unint64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            uint64_t v13 = v3 + 3;
            goto LABEL_7;
          }

          uint64_t v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            unint64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            uint64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              unint64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              BOOL v18 = v3 + 6;
              while (v18 < v14)
              {
                unint64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  uint64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }

    uint64_t result = 0LL;
    v0[3] = v4;
    v0[4] = 0LL;
  }

  return result;
}

uint64_t sub_1001010E4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100100754(&v6, *a1, a1[1], a1[2]);
  uint64_t v4 = v6;
  *a2 = result;
  a2[1] = v5;
  a2[2] = v4;
  return result;
}

uint64_t sub_100101124(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001D9FF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010116C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Dictionary.init(dictionaryLiteral:)(v3, v4, a3, v5);
}

  ;
}

  ;
}

uint64_t sub_1001011A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Dictionary.init(dictionaryLiteral:)(v3, v4, a3, v5);
}

  ;
}

unint64_t sub_1001011CC()
{
  return sub_10000EC64(v1, v0);
}

uint64_t sub_1001011D8()
{
  return v0;
}

uint64_t sub_1001011EC()
{
  return type metadata accessor for ProtoEnum();
}

uint64_t sub_1001011F4()
{
  return type metadata accessor for ProtoMessageSchema();
}

uint64_t sub_1001011FC()
{
  return swift_retain(v0);
}

uint64_t RawPayload.data.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SRRawPayload_data);
  sub_1001015E0();
  return v1;
}

void static RawPayload.event(with:dataVersion:)(uint64_t a1, unint64_t a2)
{
}

void RawPayload.__allocating_init(with:)()
{
}

id RawPayload.init(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v2);
  *(_DWORD *)&v2[OBJC_IVAR___SRRawPayload_dataVersion] = 1;
  uint64_t v6 = &v2[OBJC_IVAR___SRRawPayload_data];
  *(void *)uint64_t v6 = a1;
  *((void *)v6 + 1) = a2;
  v8.receiver = v2;
  v8.super_class = ObjectType;
  return objc_msgSendSuper2(&v8, "init");
}

id RawPayload.__allocating_init<A>(with:)(void *a1)
{
  id result = [a1 data];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(result);
    uint64_t v6 = v5;

    sub_1001015CC();
    id v7 = RawPayload.init(with:)(v4, v6);

    return v7;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t RawPayload.schemitized(with:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ProtobufPayload();
  sub_100019B20(a1, (uint64_t)v16);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR___SRRawPayload_data);
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR___SRRawPayload_data + 8);
  uint64_t v6 = v17;
  uint64_t v7 = v18;
  uint64_t v8 = sub_1000AB9E8((uint64_t)v16, v17);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v16[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v11 + 16))(v10);
  sub_1000F45B0((uint64_t)v10, v4, v5, v3, v6, v7);
  uint64_t v13 = v12;
  sub_1001015E0();
  sub_1000108B8(v16);
  sub_1000EDB24();
  return v13;
}

id RawPayload.__allocating_init()()
{
  return [sub_1001015CC() init];
}

void RawPayload.init()()
{
}

uint64_t type metadata accessor for RawPayload()
{
  return objc_opt_self(&OBJC_CLASS___SRRawPayload);
}

id sub_1001015CC()
{
  return objc_allocWithZone(v0);
}

id sub_1001015D4()
{
  return RawPayload.init(with:)(v1, v0);
}

uint64_t sub_1001015E0()
{
  return sub_100014244(v0, v1);
}

uint64_t sub_1001015EC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t ObjectType = swift_getObjectType(v5);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 40);
  swift_unknownObjectRetain(v5);
  v8(a1, a2, ObjectType, v6);
  return swift_unknownObjectRelease(v5);
}

void sub_100101680(uint64_t a1, uint64_t a2, sqlite3_context *a3)
{
  uint64_t v6 = (uint64_t *)sqlite3_malloc(8);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = type metadata accessor for SQLiteMessagePointerInBlobBridge.Wrapper();
    uint64_t v9 = swift_allocObject(v8, 32LL, 7LL);
    *(void *)(v9 + swift_weakDestroy(v0 + 16) = a1;
    *(void *)(v9 + 24) = a2;
    uint64_t *v7 = v9;
    swift_unknownObjectRetain();
    SQLiteContext.setBuffer(_:ofSize:destructor:)(v7, a3, 8LL, (void (__cdecl **)(void *))sub_100101728, v10);
  }

  else
  {
    __break(1u);
  }

void sub_1001016F8(void *a1)
{
  if (a1)
  {
    swift_release(*a1);
    sqlite3_free(a1);
  }

uint64_t sub_10010172C(sqlite3_value *a1)
{
  uint64_t result = SQLiteArgument.withUnsafeBytes<A>(_:)((uint64_t (*)(const void *, uint64_t))sub_1001018F4, v1, a1);
  if (!v2) {
    return v4;
  }
  return result;
}

uint64_t sub_100101774@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    uint64_t v3 = swift_unknownObjectRetain();
    swift_getObjectType(v3);
    sub_1000F7844();
    *a2 = v4;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
    return swift_retain();
  }

  else
  {
    unint64_t v9 = sub_1000E43B4();
    uint64_t v10 = swift_allocError(&type metadata for SchemaError, v9, 0LL, 0LL);
    *(void *)uint64_t v11 = 0xD000000000000031LL;
    *(void *)(v11 + 8) = 0x8000000100172B20LL;
    *(_BYTE *)(v11 + 41) = 3;
    return swift_willThrow(v10);
  }

uint64_t type metadata accessor for SQLiteMessagePointerInBlobBridge()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer32SQLiteMessagePointerInBlobBridge);
}

uint64_t type metadata accessor for SQLiteMessagePointerInBlobBridge.Wrapper()
{
  return objc_opt_self(&OBJC_CLASS____TtCC11Schematizer32SQLiteMessagePointerInBlobBridgeP33_44A2EBA8A1FFBBD1E7A445274244E3D57Wrapper);
}

uint64_t sub_100101880(uint64_t a1, uint64_t a2)
{
  return sub_1001015EC(a1, a2);
}

uint64_t sub_100101894()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 16));
}

void sub_1001018B8(uint64_t a1, uint64_t a2, sqlite3_context *a3)
{
}

uint64_t sub_1001018CC(sqlite3_value *a1)
{
  uint64_t result = sub_10010172C(a1);
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t sub_1001018F4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_100101774(a1, a2);
}

uint64_t sub_10010190C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000LL;
  if (v2 || (sub_100027D54(0x736E6F6974706FLL, 0xE700000000000000LL) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else
  {
    BOOL v6 = a1 == 0x69747265706F7270LL && a2 == 0xEA00000000007365LL;
    if (v6 || (sub_100027D54(0x69747265706F7270LL, 0xEA00000000007365LL) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1LL;
    }

    else if (a1 == 0x73664F656E6FLL && a2 == 0xE600000000000000LL)
    {
      swift_bridgeObjectRelease();
      return 2LL;
    }

    else
    {
      char v8 = sub_100027D54(0x73664F656E6FLL, 0xE600000000000000LL);
      sub_1000325E4();
      if ((v8 & 1) != 0) {
        return 2LL;
      }
      else {
        return 3LL;
      }
    }
  }

uint64_t sub_100101A34(char a1)
{
  if (!a1) {
    return 0x736E6F6974706FLL;
  }
  if (a1 == 1) {
    return 0x69747265706F7270LL;
  }
  return 0x73664F656E6FLL;
}

uint64_t sub_100101A8C()
{
  return sub_100101A34(*v0);
}

uint64_t sub_100101A94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10010190C(a1, a2);
  *a3 = result;
  return result;
}

void sub_100101AB8(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_100101AC4(uint64_t a1)
{
  unint64_t v2 = sub_10010296C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100101AEC(uint64_t a1)
{
  unint64_t v2 = sub_10010296C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t MessageSchemaModel.properties.getter(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

void MessageSchemaModel.properties.setter(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
  sub_100009A90();
}

uint64_t MessageSchemaModel.oneOfs.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRetain(a3);
}

void MessageSchemaModel.oneOfs.setter(uint64_t a1)
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = a1;
  sub_100009A90();
}

Swift::Void (__swiftcall *AvroMapSchema.values.modify())()
{
  return _CPStartNetworkSearchFeedback.redactUnused();
}

void MessageSchemaModel.init(from:)(void *a1)
{
  uint64_t v3 = sub_10000941C(&qword_1001DA230);
  __chkstk_darwin(v3);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100019AFC(a1, v4);
  unint64_t v6 = sub_10010296C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for MessageSchemaModel.CodingKeys,  &type metadata for MessageSchemaModel.CodingKeys,  v6,  v4,  v5);
  if (v1)
  {
    sub_1000E3700();
  }

  else
  {
    sub_1000271C4();
    char v15 = 0;
    sub_100103798((unint64_t *)&qword_1001D8920, v7, (void (*)(void))sub_1000EBFF8);
    sub_10010378C();
    uint64_t v8 = v16;
    if (!v16) {
      uint64_t v8 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for AnyOption,  &protocol witness table for String);
    }
    sub_1000271C4();
    char v15 = 1;
    uint64_t v10 = sub_100103798(&qword_1001DA248, v9, (void (*)(void))sub_1001029A8);
    swift_bridgeObjectRetain(v8);
    sub_10010378C();
    if (v10)
    {
      sub_100043AB0();
      sub_1000145F0();
      sub_1000E3700();
      sub_1000145F0();
    }

    else
    {
      uint64_t v11 = v16;
      if (!v16) {
        uint64_t v11 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for PropertyModel,  &protocol witness table for String);
      }
      uint64_t v12 = sub_1000271C4();
      char v15 = 2;
      uint64_t v14 = sub_100103798(&qword_1001DA260, v13, (void (*)(void))sub_100102A50);
      swift_bridgeObjectRetain(v11);
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v12, &v15, v3, v12, v14);
      if (!v16) {
        Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for OneOfModel,  &protocol witness table for String);
      }
      sub_100043AB0();
      sub_100047294();
      sub_1000E3700();
      sub_100009B3C();
      sub_100010C70();
      sub_1000145F0();
    }
  }

  sub_10002716C();
}

Schematizer::MessageSchemaModel __swiftcall MessageSchemaModel.init(properties:oneOfs:)( Swift::OpaquePointer_optional properties, Swift::OpaquePointer_optional oneOfs)
{
  uint64_t v2 = *(void *)&properties.is_nil;
  rawValue = properties.value._rawValue;
  uint64_t v4 = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for AnyOption,  &protocol witness table for String);
  if (!rawValue)
  {
    rawValue = (void *)Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for PropertyModel,  &protocol witness table for String);
    if (v2) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for OneOfModel,  &protocol witness table for String);
    goto LABEL_3;
  }

  if (!v2) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v5 = (void *)v4;
  unint64_t v6 = rawValue;
  uint64_t v7 = (void *)v2;
  result.oneOfs._rawValue = v7;
  result.properties._rawValue = v6;
  result.options._rawValue = v5;
  return result;
}

uint64_t MessageSchemaModel.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = a4;
  uint64_t v8 = sub_10000941C(&qword_1001DA270);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100019AFC(a1, v12);
  unint64_t v14 = sub_10010296C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for MessageSchemaModel.CodingKeys,  &type metadata for MessageSchemaModel.CodingKeys,  v14,  v12,  v13);
  if (!*(void *)(a2 + 16)
    || (v18 = a2, char v17 = 0, sub_10000941C(&qword_1001D8918), sub_100102A8C(), sub_1001036C4(), !v4))
  {
    if (!*(void *)(a3 + 16)
      || (v18 = a3, char v17 = 1, sub_10000941C(&qword_1001DA240), sub_100102AF8(), sub_1001036C4(), !v4))
    {
      if (*(void *)(v16 + 16))
      {
        uint64_t v18 = v16;
        char v17 = 2;
        sub_10000941C(&qword_1001DA258);
        sub_100102BA0();
        sub_1001036C4();
      }
    }
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void static MessageSchemaModel.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((sub_1000E1534(a1, a4) & 1) != 0 && (sub_1000E2460(a2, a5) & 1) != 0) {
    sub_1000E28D0(a3, a6);
  }
  else {
    sub_1000110D4();
  }
}

void sub_1001020C0(void *a1@<X0>, void *a2@<X8>)
{
  if (!v2)
  {
    *a2 = v4;
    a2[1] = v5;
    a2[2] = v6;
  }

uint64_t sub_1001020EC(void *a1)
{
  return MessageSchemaModel.encode(to:)(a1, *v1, v1[1], v1[2]);
}

void sub_100102108(uint64_t *a1, uint64_t *a2)
{
}

void MessageSchemaModel.init(_:dontCopy:)(void *a1, char a2)
{
  void (*v53)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  void *v64;
  void v65[3];
  __int128 v66;
  __int128 v67;
  char v68;
  uint64_t v69;
  uint64_t v4 = a1;
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100019AFC(a1, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
  uint64_t v8 = sub_1000EC4E8(v7);
  sub_100009B3C();
  if (v2)
  {
    sub_1001037A0();
LABEL_24:
    sub_10002716C();
    return;
  }

  uint64_t v64 = v4;
  if ((a2 & 1) != 0)
  {
    swift_retain(v8);
    uint64_t v9 = (uint64_t *)Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for PropertyModel,  &protocol witness table for String);
LABEL_19:
    uint64_t v43 = v4[3];
    uint64_t v44 = v4[4];
    sub_100103784(v4);
    uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 32))(v43, v44);
    uint64_t v46 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for OneOfModel,  &protocol witness table for String);
    uint64_t v47 = *(void *)(v45 + 16);
    if (v47)
    {
      unint64_t v62 = v8;
      uint64_t v63 = v9;
      swift_bridgeObjectRetain(v45);
      uint64_t v61 = v45;
      uint64_t v48 = (uint64_t *)(v45 + 40);
      do
      {
        uint64_t v69 = v46;
        uint64_t v49 = *(v48 - 1);
        uint64_t v50 = *v48;
        uint64_t v52 = v64[3];
        uint64_t v51 = v64[4];
        sub_100019AFC(v64, v52);
        uint64_t v53 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56);
        swift_bridgeObjectRetain_n(v50, 2LL);
        v53(v65, v49, v50, v52, v51);
        sub_100103784(v65);
        char v54 = sub_10010376C();
        unint64_t v56 = v55(v54);
        uint64_t v57 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for Int,  &protocol witness table for String);
        Swift::Int v58 = __chkstk_darwin(v57);
        *(&v61 - sub_1000108B8(v0 + 2) = (uint64_t)v65;
        unint64_t v59 = sub_1000E375C(v58, (void (*)(uint64_t *, void *))sub_1000E3F00, (uint64_t)(&v61 - 4), v56);
        v48 += 2;
        sub_100009B3C();
        sub_1001037BC();
        uint64_t v60 = v69;
        swift_isUniquelyReferenced_nonNull_native(v69);
        v65[0] = v60;
        sub_100102F4C(v59, v49, v50);
        uint64_t v46 = v65[0];
        sub_100019F4C(v50);
        swift_bridgeObjectRelease();
        --v47;
      }

      while (v47);
      swift_bridgeObjectRelease();
      uint64_t v9 = v63;
    }

    swift_bridgeObjectRelease();
    sub_100047294();
    swift_bridgeObjectRetain(v9);
    sub_1001037A0();
    sub_100009B3C();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_24;
  }

  uint64_t v10 = v4[3];
  uint64_t v11 = v4[4];
  sub_100103784(v4);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 24);
  swift_retain(v8);
  uint64_t v13 = v12(v10, v11);
  uint64_t v9 = (uint64_t *)Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for PropertyModel,  &protocol witness table for String);
  uint64_t v14 = *(void *)(v13 + 16);
  if (!v14)
  {
LABEL_18:
    sub_100009B3C();
    goto LABEL_19;
  }

  unint64_t v62 = v8;
  sub_100047294();
  uint64_t v61 = v13;
  char v15 = (uint64_t *)(v13 + 40);
  while (1)
  {
    uint64_t v69 = v14;
    uint64_t v16 = *(v15 - 1);
    uint64_t v17 = *v15;
    uint64_t v63 = v15;
    uint64_t v18 = v4[4];
    sub_100019AFC(v4, v4[3]);
    uint64_t v19 = *(void (**)(uint64_t))(v18 + 48);
    swift_bridgeObjectRetain_n(v17, 2LL);
    uint64_t v20 = sub_10010376C();
    v19(v20);
    PropertyModel.init(_:)(v65, (uint64_t)&v66);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
    v65[0] = v9;
    uint64_t v22 = sub_10010376C();
    unint64_t v24 = sub_10000EC64(v22, v23);
    uint64_t v26 = v9[2];
    BOOL v27 = (v25 & 1) == 0;
    Swift::Int v28 = v26 + v27;
    if (__OFADD__(v26, v27)) {
      break;
    }
    unint64_t v29 = v24;
    char v30 = v25;
    sub_10000941C(&qword_1001D9FE0);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v28))
    {
      uint64_t v31 = sub_10010376C();
      sub_10000EC64(v31, v32);
      sub_100103708();
      if (!v34) {
        goto LABEL_27;
      }
      unint64_t v29 = v33;
    }

    uint64_t v9 = (uint64_t *)v65[0];
    if ((v30 & 1) != 0)
    {
      uint64_t v35 = *(void *)(v65[0] + 56LL) + 40 * v29;
      swift_bridgeObjectRelease();
      __int128 v36 = v67;
      *(_OWORD *)uint64_t v35 = v66;
      *(_OWORD *)(v35 + swift_weakDestroy(v0 + 16) = v36;
      *(_BYTE *)(v35 + 3sub_1000108B8(v0 + 2) = v68;
    }

    else
    {
      *(void *)(v65[0] + 8 * (v29 >> 6) + 64) |= 1LL << v29;
      uint64_t v37 = (void *)(v9[6] + 16 * v29);
      *uint64_t v37 = v16;
      v37[1] = v17;
      uint64_t v38 = v9[7] + 40 * v29;
      __int128 v39 = v67;
      *(_OWORD *)uint64_t v38 = v66;
      *(_OWORD *)(v38 + swift_weakDestroy(v0 + 16) = v39;
      *(_BYTE *)(v38 + 3sub_1000108B8(v0 + 2) = v68;
      uint64_t v40 = v9[2];
      BOOL v41 = __OFADD__(v40, 1LL);
      uint64_t v42 = v40 + 1;
      if (v41) {
        goto LABEL_26;
      }
      __int128 v9[2] = v42;
      swift_bridgeObjectRetain(v17);
    }

    char v15 = v63 + 2;
    sub_100019F4C(v17);
    swift_bridgeObjectRelease();
    uint64_t v14 = v69 - 1;
    uint64_t v4 = v64;
    if (v69 == 1)
    {
      sub_100009B3C();
      uint64_t v8 = v62;
      goto LABEL_18;
    }
  }

  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

Swift::Void __swiftcall MessageSchemaModel.add(property:withName:)( Schematizer::PropertyModel *property, Swift::String withName)
{
  object = withName._object;
  uint64_t countAndFlagsBits = withName._countAndFlagsBits;
  swift_bridgeObjectRetain(withName._object);
  sub_10010338C((uint64_t)property);
  sub_1000FBCCC((uint64_t)property, countAndFlagsBits, (uint64_t)object);
  swift_bridgeObjectRelease();
}

Swift::Bool __swiftcall MessageSchemaModel.hasProperty(_:)(Swift::String a1)
{
  if (*(void *)(v1 + 16))
  {
    object = a1._object;
    uint64_t countAndFlagsBits = a1._countAndFlagsBits;
    swift_bridgeObjectRetain(a1._object);
    sub_10000EC64(countAndFlagsBits, (uint64_t)object);
    sub_1000325E4();
  }

  sub_1000110D4();
  return result;
}

uint64_t MessageSchemaModel.nextAvailableTag.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v19[0];
  uint64_t v4 = v19[1];
  int64_t v5 = v19[3];
  unint64_t v6 = v19[4];
  int64_t v7 = (unint64_t)(v19[2] + 64LL) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v9 = 1LL;
  if (!v6) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v11 = v10 | (v5 << 6);
  while (1)
  {
    uint64_t v16 = *(void *)(*(void *)(v3 + 56) + 40 * v11 + 24);
    BOOL v17 = __OFADD__(v16, 1LL);
    uint64_t v18 = v16 + 1;
    if (v17) {
      break;
    }
    if (v18 > v9) {
      uint64_t v9 = v18;
    }
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v12 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      goto LABEL_28;
    }
    if (v12 >= v7) {
      goto LABEL_26;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v12);
    int64_t v14 = v5 + 1;
    if (!v13)
    {
      int64_t v14 = v5 + 2;
      if (v5 + 2 >= v7) {
        goto LABEL_26;
      }
      unint64_t v13 = *(void *)(v4 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v5 + 3;
        if (v5 + 3 >= v7) {
          goto LABEL_26;
        }
        unint64_t v13 = *(void *)(v4 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v5 + 4;
          if (v5 + 4 >= v7) {
            goto LABEL_26;
          }
          unint64_t v13 = *(void *)(v4 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v5 + 5;
            if (v5 + 5 >= v7) {
              goto LABEL_26;
            }
            unint64_t v13 = *(void *)(v4 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v5 + 6;
              if (v5 + 6 >= v7) {
                goto LABEL_26;
              }
              unint64_t v13 = *(void *)(v4 + 8 * v14);
              if (!v13)
              {
                int64_t v15 = v5 + 7;
                while (v15 < v7)
                {
                  unint64_t v13 = *(void *)(v4 + 8 * v15++);
                  if (v13)
                  {
                    int64_t v14 = v15 - 1;
                    goto LABEL_20;
                  }
                }

void sub_10010288C(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_1000B1A70();
    sub_1000B1A10( (uint64_t)"Fatal error",  v1,  v2,  (uint64_t)"Can't construct Array with count < 0",  v3,  v4,  (uint64_t)"Swift/Array.swift",  v5,  v6,  v7,  v8);
    __break(1u);
  }

  else
  {
    if (a1) {
      *(void *)(static Array._allocateBufferUninitialized(minimumCapacity:)(a1, &type metadata for String) + swift_weakDestroy(v0 + 16) = a1;
    }
    sub_10004ECC0();
  }

void sub_1001028F8(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_1000B1A70();
    sub_1000B1A10( (uint64_t)"Fatal error",  v3,  v4,  (uint64_t)"Can't construct Array with count < 0",  v5,  v6,  (uint64_t)"Swift/Array.swift",  v7,  v8,  v9,  v10);
    __break(1u);
  }

  else
  {
    if (a1)
    {
      uint64_t v2 = sub_10000941C(&qword_1001DA2B8);
      *(void *)(static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v2) + swift_weakDestroy(v0 + 16) = a1;
    }

    sub_10004ECC0();
  }

unint64_t sub_10010296C()
{
  unint64_t result = qword_1001DA238;
  if (!qword_1001DA238)
  {
    unint64_t result = swift_getWitnessTable(&unk_100165868, &type metadata for MessageSchemaModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DA238);
  }

  return result;
}

unint64_t sub_1001029A8()
{
  unint64_t result = qword_1001DA250;
  if (!qword_1001DA250)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PropertyModel, &type metadata for PropertyModel);
    atomic_store(result, (unint64_t *)&qword_1001DA250);
  }

  return result;
}

uint64_t sub_1001029E4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_1000094A0(a2);
    a3();
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100102A50()
{
  unint64_t result = qword_1001DA268;
  if (!qword_1001DA268)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OneOfModel, &type metadata for OneOfModel);
    atomic_store(result, (unint64_t *)&qword_1001DA268);
  }

  return result;
}

unint64_t sub_100102A8C()
{
  unint64_t result = qword_1001DA278;
  if (!qword_1001DA278)
  {
    uint64_t v1 = sub_1000094A0(&qword_1001D8918);
    sub_1000EC0A0();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1001DA278);
  }

  return result;
}

unint64_t sub_100102AF8()
{
  unint64_t result = qword_1001DA280;
  if (!qword_1001DA280)
  {
    uint64_t v1 = sub_1000094A0(&qword_1001DA240);
    sub_100102B64();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1001DA280);
  }

  return result;
}

unint64_t sub_100102B64()
{
  unint64_t result = qword_1001DA288;
  if (!qword_1001DA288)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PropertyModel, &type metadata for PropertyModel);
    atomic_store(result, (unint64_t *)&qword_1001DA288);
  }

  return result;
}

unint64_t sub_100102BA0()
{
  unint64_t result = qword_1001DA290;
  if (!qword_1001DA290)
  {
    uint64_t v1 = sub_1000094A0(&qword_1001DA258);
    sub_100102C0C();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1001DA290);
  }

  return result;
}

unint64_t sub_100102C0C()
{
  unint64_t result = qword_1001DA298;
  if (!qword_1001DA298)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OneOfModel, &type metadata for OneOfModel);
    atomic_store(result, (unint64_t *)&qword_1001DA298);
  }

  return result;
}

void sub_100102C48()
{
  int v4 = v3;
  sub_100010DD4(v3, v5, v6);
  sub_100010C20();
  if (v9)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v10 = v7;
  char v11 = v8;
  sub_10000941C((uint64_t *)&unk_1001D2A10);
  if (!sub_100010EDC()) {
    goto LABEL_5;
  }
  unint64_t v12 = sub_10010375C();
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v10 = v12;
LABEL_5:
  int64_t v14 = *v2;
  if ((v11 & 1) != 0)
  {
    *(_DWORD *)(v14[7] + 4 * v1sub_1000E3528(v0, v2, 0) = v4;
    sub_10002FBC0();
  }

  else
  {
    sub_100103234(v10, v1, v0, v4, v14);
    sub_1001036B0(v0);
  }

void sub_100102CF4()
{
  uint64_t v4 = v3;
  sub_100010DD4(v3, v5, v6);
  sub_100010C20();
  if (v9)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v10 = v7;
  char v11 = v8;
  sub_10000941C(&qword_1001DA2D8);
  if (!sub_100010EDC()) {
    goto LABEL_5;
  }
  unint64_t v12 = sub_10010375C();
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v10 = v12;
LABEL_5:
  int64_t v14 = *v2;
  if ((v11 & 1) != 0)
  {
    *(void *)(v14[7] + 8 * v1sub_1000E3528(v0, v2, 0) = v4;
    sub_10002FBC0();
  }

  else
  {
    sub_10010327C(v10, v1, v0, v4, v14);
    sub_1001036B0(v0);
  }

void sub_100102DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100102DAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100102DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v8)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  sub_10010374C();
  if (sub_100010EDC())
  {
    sub_1001036E4();
    sub_100103708();
    if (!v10) {
      goto LABEL_10;
    }
    uint64_t v6 = v9;
  }

  if ((v7 & 1) != 0)
  {
    uint64_t v11 = *(void *)(*(void *)v5 + 56LL);
    swift_release();
    *(void *)(v11 + 8 * v6) = v3;
    sub_100009AA0();
  }

  else
  {
    unint64_t v12 = sub_1001036F4();
    sub_10010327C(v12, v13, v14, v15, v16);
    sub_100010B84(v4);
  }

void sub_100102E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100102E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100102E70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, void *))
{
  if (v11)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  sub_10010374C();
  if (sub_100010EDC())
  {
    sub_1001036E4();
    sub_100103708();
    if (!v13) {
      goto LABEL_10;
    }
    uint64_t v9 = v12;
  }

  if ((v10 & 1) != 0)
  {
    uint64_t v14 = (void *)(*(void *)(*(void *)v8 + 56LL) + 40 * v9);
    sub_1000108B8(v14);
    a6(v6, v14);
  }

  else
  {
    unint64_t v15 = sub_1001036F4();
    sub_1001032C4(v15, v16, v17, v18, v19);
    swift_bridgeObjectRetain(v7);
  }

void sub_100102F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v9)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  BOOL v10 = v7;
  char v11 = v8;
  sub_10000941C(&qword_1001D9FD0);
  BOOL v12 = sub_100010EDC();
  if (v12)
  {
    sub_1001036E4();
    sub_100103708();
    if (!v16) {
      goto LABEL_10;
    }
    BOOL v10 = v12;
  }

  if ((v11 & 1) != 0)
  {
    sub_100103778(v12, v13, v14, v15, *v6);
    *(void *)(v4 + 8 * v1sub_1000E3528(v0, v2, 0) = v3;
    sub_10002FBC0();
  }

  else
  {
    unint64_t v17 = sub_1001036F4();
    sub_10010327C(v17, v18, v19, v20, v21);
    sub_1001036B0(v5);
  }

void sub_100102FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v8)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  uint64_t v9 = v6;
  char v10 = v7;
  sub_10000941C(&qword_1001D9FE0);
  if (sub_100010EDC())
  {
    sub_1001036E4();
    sub_100103708();
    if (!v12) {
      goto LABEL_10;
    }
    uint64_t v9 = v11;
  }

  if ((v10 & 1) != 0)
  {
    uint64_t v13 = *(void *)(*(void *)v5 + 56LL) + 40 * v9;
    swift_bridgeObjectRelease();
    __int128 v14 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v3;
    *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = v14;
    *(_BYTE *)(v13 + 3sub_1000108B8(v0 + 2) = *(_BYTE *)(v3 + 32);
    sub_10002FBC0();
  }

  else
  {
    unint64_t v15 = sub_1001036F4();
    sub_100103300(v15, v16, v17, v18, v19);
    sub_1001036B0(v4);
  }

void sub_100103088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v9)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  BOOL v10 = v7;
  char v11 = v8;
  sub_10000941C(&qword_1001DA2D0);
  BOOL v12 = sub_100010EDC();
  if (v12)
  {
    sub_1001036E4();
    sub_100103708();
    if (!v16) {
      goto LABEL_10;
    }
    BOOL v10 = v12;
  }

  if ((v11 & 1) != 0)
  {
    sub_100103778(v12, v13, v14, v15, *v6);
    *(void *)(v4 + 8 * v1sub_1000E3528(v0, v2, 0) = v3;
    sub_10002FBC0();
  }

  else
  {
    unint64_t v17 = sub_1001036F4();
    sub_10010327C(v17, v18, v19, v20, v21);
    sub_1001036B0(v5);
  }

void sub_100103118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  BOOL v7 = v6;
  Swift::Int v14 = *v6;
  sub_10000EC64(a4, a5);
  sub_100010C20();
  if (v17)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v18 = v15;
  char v19 = v16;
  sub_10000941C(&qword_1001D9FF8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a6 & 1, v14)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_10000EC64(a4, a5);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = (void *)*v7;
  if ((v19 & 1) != 0)
  {
    uint64_t v23 = (uint64_t *)(v22[7] + 24 * v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *uint64_t v23 = a1;
    v23[1] = a2;
    v23[2] = a3;
    sub_100009AA0();
  }

  else
  {
    sub_100103338(v18, a4, a5, a1, a2, a3, v22);
    sub_100010B84(a5);
  }

unint64_t sub_100103234(unint64_t result, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(_DWORD *)(a5[7] + 4 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t sub_10010327C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

void sub_1001032C4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = sub_100103718(a1, a2, a3, a4, a5);
  v10(v9, v7 + v6 * v8);
  uint64_t v11 = *(void *)(a5 + 16);
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a5 + swift_weakDestroy(v0 + 16) = v13;
    sub_100009A90();
  }

unint64_t sub_100103300(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result = sub_100103718(a1, a2, a3, a4, a5);
  uint64_t v9 = v7 + result * v8;
  __int128 v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = v11;
  *(_BYTE *)(v9 + 3sub_1000108B8(v0 + 2) = *(_BYTE *)(v10 + 32);
  uint64_t v12 = *(void *)(v6 + 16);
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    *(void *)(v6 + swift_weakDestroy(v0 + 16) = v14;
  }
  return result;
}

unint64_t sub_100103338( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1LL << result;
  uint64_t v7 = (void *)(a7[6] + 16 * result);
  void *v7 = a2;
  v7[1] = a3;
  uint64_t v8 = (void *)(a7[7] + 24 * result);
  *uint64_t v8 = a4;
  v8[1] = a5;
  v8[2] = a6;
  uint64_t v9 = a7[2];
  BOOL v10 = __OFADD__(v9, 1LL);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a7[2] = v11;
  }
  return result;
}

uint64_t sub_10010338C(uint64_t a1)
{
  return a1;
}

uint64_t destroy for MessageSchemaModel(void *a1)
{
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *_s11Schematizer18MessageSchemaModelVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[2];
  a1[2] = v5;
  swift_bridgeObjectRetain(v3);
  sub_100047294();
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for MessageSchemaModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

void *assignWithTake for MessageSchemaModel(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a1[2];
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for MessageSchemaModel()
{
  return &type metadata for MessageSchemaModel;
}

uint64_t storeEnumTagSinglePayload for MessageSchemaModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10010354C + 4 * byte_100165705[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100103580 + 4 * byte_100165700[v4]))();
}

uint64_t sub_100103580(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100103588(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100103590LL);
  }
  return result;
}

uint64_t sub_10010359C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001035A4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1001035A8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001035B0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MessageSchemaModel.CodingKeys()
{
  return &type metadata for MessageSchemaModel.CodingKeys;
}

unint64_t sub_1001035D0()
{
  unint64_t result = qword_1001DA2A0;
  if (!qword_1001DA2A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100165840, &type metadata for MessageSchemaModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DA2A0);
  }

  return result;
}

unint64_t sub_100103610()
{
  unint64_t result = qword_1001DA2A8;
  if (!qword_1001DA2A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001657B0, &type metadata for MessageSchemaModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DA2A8);
  }

  return result;
}

unint64_t sub_100103650()
{
  unint64_t result = qword_1001DA2B0;
  if (!qword_1001DA2B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001657D8, &type metadata for MessageSchemaModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DA2B0);
  }

  return result;
}

unint64_t sub_10010368C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000EC64(a2, a3);
}

uint64_t sub_1001036B0(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_1001036C4()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(v1 - 72, v1 - 81, v0);
}

unint64_t sub_1001036E4()
{
  return sub_10000EC64(v1, v0);
}

uint64_t sub_1001036F4()
{
  return v0;
}

  ;
}

unint64_t sub_100103718(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1LL << result;
  uint64_t v5 = (void *)(*(void *)(a5 + 48) + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  return result;
}

uint64_t sub_10010374C()
{
  return sub_10000941C(v0);
}

unint64_t sub_10010375C()
{
  return sub_10000EC64(v1, v0);
}

uint64_t sub_10010376C()
{
  return v0;
}

uint64_t sub_100103778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_bridgeObjectRelease(*(void *)(*(void *)(a5 + 56) + 8 * v5));
}

void *sub_100103784(void *a1)
{
  return sub_100019AFC(a1, v1);
}

uint64_t sub_10010378C()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_100103798(unint64_t *a1, uint64_t a2, void (*a3)(void))
{
  return sub_1001029E4(a1, v3, a3);
}

uint64_t sub_1001037A0()
{
  return sub_1000108B8(v0);
}

  ;
}

uint64_t sub_1001037BC()
{
  return sub_1000108B8((void *)(v0 - 160));
}

void *sub_1001037C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  v180[0] = a1;
  v180[1] = a2;
  *(void *)&v175[0] = 64LL;
  *((void *)&v175[0] + 1) = 0xE100000000000000LL;
  unint64_t v10 = sub_1000106CC();
  if ((StringProtocol.contains<A>(_:)(v175, &type metadata for String, &type metadata for String, v10, v10) & 1) != 0)
  {
    unint64_t v11 = sub_1000E43B4();
    sub_100010EA0((uint64_t)&type metadata for SchemaError, v11);
    return (void *)sub_100105AA0(v12, 17LL);
  }

  uint64_t v161 = a4;
  sub_1000E6350(a3, (uint64_t)v180);
  *(void *)&v175[0] = a1;
  *((void *)&v175[0] + 1) = a2;
  v177[0] = 46LL;
  v177[1] = 0xE100000000000000LL;
  uint64_t v14 = StringProtocol.components<A>(separatedBy:)(v177, &type metadata for String, &type metadata for String, v10, v10);
  uint64_t v22 = *(void *)(v14 + 16);
  uint64_t v163 = v14;
  if (!v22)
  {
    unint64_t v24 = _swiftEmptyArrayStorage;
LABEL_30:
    sub_100105ADC(v14, v15, v16, v17, v18, v19, v20, v21, v160, v161, v163);
    unint64_t result = (void *)sub_1000EF098((uint64_t)v180, (uint64_t)(v162 + 1));
    *uint64_t v162 = v24;
    return result;
  }

  uint64_t v23 = (uint64_t *)(v14 + 40);
  unint64_t v24 = _swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v26 = *(v23 - 1);
    uint64_t v25 = *v23;
    sub_1000E6350((uint64_t)v180, (uint64_t)v175);
    if (v176 != 1)
    {
      uint64_t v95 = sub_1000110E0();
      sub_100105ADC(v95, v96, v97, v98, v99, v100, v101, v102, v160, v161, v163);
      sub_1000E638C(v175);
      unint64_t v103 = sub_1000E43B4();
      sub_100010EA0((uint64_t)&type metadata for SchemaError, v103);
      sub_100105AA0(v104, 16LL);
      return sub_100105AFC();
    }

    sub_100019BC4(v175, (uint64_t)v177);
    swift_bridgeObjectRetain(v25);
    unint64_t v27 = sub_100105BC4(93LL);
    int v181 = v28;
    if ((v28 & 1) == 0) {
      break;
    }
    uint64_t v58 = v178;
    uint64_t v59 = v179;
    sub_100019AFC(v177, v178);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 48))( v175,  v26,  v25,  v58,  v59);
    if (v5)
    {
      uint64_t v115 = sub_1000110E0();
      sub_100105ADC(v115, v116, v117, v118, v119, v120, v121, v122, v160, v161, v163);
      goto LABEL_35;
    }

    sub_100010C70();
    sub_100019BC4(v175, (uint64_t)v172);
    sub_100019AFC(v172, v173);
    if ((sub_100105B60() & 1) != 0)
    {
      uint64_t v131 = sub_1000110E0();
      sub_100105ADC(v131, v132, v133, v134, v135, v136, v137, v138, v160, v161, v163);
      unint64_t v139 = sub_1000E43B4();
      sub_100010EA0((uint64_t)&type metadata for SchemaError, v139);
      uint64_t v141 = 13LL;
      goto LABEL_41;
    }

    uint64_t v60 = v173;
    uint64_t v61 = v174;
    unint64_t v62 = sub_100019AFC(v172, v173);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v61 + 40))(v175, v60, v61);
    uint64_t v63 = sub_100105AFC();
    sub_100105C28((uint64_t)v63, v64, v65, v66, v67, v68, v69, v70, v160, v161, v163, v164, v166, v168);
    sub_100019AFC(v172, v173);
    sub_100105B10();
    uint64_t v5 = 0LL;
    if ((sub_100105C34() & 1) == 0)
    {
      sub_100105B04();
      unint64_t v24 = v91;
    }

    unint64_t v71 = v24[2];
    unint64_t v72 = v71 + 1;
    if (v71 >= v24[3] >> 1)
    {
      sub_100105B04();
      unint64_t v24 = v92;
    }

    unint64_t v56 = 0LL;
LABEL_27:
    v24[2] = v72;
    uint64_t v90 = &v24[3 * v71];
    Swift::Int v90[4] = v62;
    v90[5] = v56;
    v23 += 2;
    *((_BYTE *)v90 + 48) = (v181 & 1) == 0;
    sub_1000108B8(v172);
    uint64_t v14 = sub_1000108B8(v177);
    if (!--v22) {
      goto LABEL_30;
    }
  }

  unint64_t v29 = v27;
  unint64_t v30 = sub_100105BC4(91LL);
  if ((v31 & 1) != 0)
  {
    uint64_t v105 = sub_1000110E0();
    sub_100105ADC(v105, v106, v107, v108, v109, v110, v111, v112, v160, v161, v163);
    sub_100010C70();
    unint64_t v113 = sub_1000E43B4();
    sub_100010EA0((uint64_t)&type metadata for SchemaError, v113);
    sub_100105AA0(v114, 15LL);
    goto LABEL_36;
  }

  uint64_t v32 = v30;
  unint64_t v169 = v29;
  v170 = v24;
  uint64_t v165 = v22;
  uint64_t v167 = (uint64_t)v23;
  swift_bridgeObjectRetain(v25);
  uint64_t v33 = sub_100105C54(15LL, v32);
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  sub_100010C70();
  uint64_t v171 = v5;
  uint64_t v41 = v178;
  uint64_t v40 = v179;
  sub_100019AFC(v177, v178);
  uint64_t v42 = static String._fromSubstring(_:)(v33, v35, v37, v39);
  uint64_t v44 = v43;
  sub_1000110E0();
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 48))( v175,  v42,  v44,  v41,  v40);
  if (v171)
  {
    uint64_t v123 = swift_bridgeObjectRelease();
    sub_100105ADC(v123, v124, v125, v126, v127, v128, v129, v130, v160, v161, v163);
    sub_100010C70();
LABEL_35:
    swift_bridgeObjectRelease();
LABEL_36:
    sub_100105AFC();
    return (void *)sub_1000108B8(v177);
  }

  swift_bridgeObjectRelease();
  sub_100019BC4(v175, (uint64_t)v172);
  sub_100019AFC(v172, v173);
  unint64_t v24 = v170;
  if ((sub_100105B60() & 1) == 0)
  {
    uint64_t v142 = sub_1000110E0();
    sub_100105ADC(v142, v143, v144, v145, v146, v147, v148, v149, v160, v161, v163);
    sub_100010C70();
    unint64_t v150 = sub_1000E43B4();
    sub_100010EA0((uint64_t)&type metadata for SchemaError, v150);
    uint64_t v141 = 14LL;
    goto LABEL_41;
  }

  unint64_t v45 = String.index(after:)(v32, v26, v25);
  if (v169 >> 14 >= v45 >> 14)
  {
    uint64_t v46 = sub_100105C54(v45, v169);
    unint64_t v48 = v47;
    sub_100010C70();
    if (!((v46 ^ v48) >> 14)) {
      goto LABEL_44;
    }
    unint64_t v49 = sub_100105B74();
    sub_100105554(v49, v50, v51, v52, v53);
    if ((v55 & 0x100) != 0)
    {
      uint64_t v73 = sub_100105B74();
      unint64_t v56 = sub_1001051A4(v73, v74, v75, v76, v77);
      char v79 = v78;
      swift_bridgeObjectRelease();
      uint64_t v23 = (uint64_t *)v167;
      if ((v79 & 1) != 0)
      {
LABEL_39:
        sub_1000110E0();
        goto LABEL_40;
      }
    }

    else
    {
      unint64_t v56 = v54;
      char v57 = v55;
      swift_bridgeObjectRelease();
      uint64_t v23 = (uint64_t *)v167;
      if ((v57 & 1) != 0) {
        goto LABEL_39;
      }
    }

    uint64_t v80 = v173;
    uint64_t v81 = v174;
    unint64_t v62 = sub_100019AFC(v172, v173);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v81 + 40))(v175, v80, v81);
    uint64_t v82 = sub_100105AFC();
    sub_100105C28((uint64_t)v82, v83, v84, v85, v86, v87, v88, v89, v160, v161, v163, v165, v167, v32);
    sub_100019AFC(v172, v173);
    sub_100105B10();
    uint64_t v5 = 0LL;
    if ((sub_100105C34() & 1) == 0)
    {
      sub_100105B04();
      unint64_t v24 = v93;
    }

    uint64_t v22 = v164;
    unint64_t v71 = v24[2];
    unint64_t v72 = v71 + 1;
    if (v71 >= v24[3] >> 1)
    {
      sub_100105B04();
      unint64_t v24 = v94;
    }

    goto LABEL_27;
  }

  __break(1u);
LABEL_44:
  uint64_t v152 = sub_1000110E0();
  sub_100105ADC(v152, v153, v154, v155, v156, v157, v158, v159, v160, v161, v163);
LABEL_40:
  swift_bridgeObjectRelease();
  unint64_t v151 = sub_1000E43B4();
  sub_100010EA0((uint64_t)&type metadata for SchemaError, v151);
  uint64_t v141 = 15LL;
LABEL_41:
  sub_100105AA0(v140, v141);
  sub_100105AFC();
  sub_1000108B8(v172);
  return (void *)sub_1000108B8(v177);
}

void static ProtoTagPathHelper.extractValue(from:pathAndType:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(void *)a3;
  if (!*(void *)(*(void *)a3 + 16LL))
  {
LABEL_58:
    unint64_t v52 = sub_1000E43B4();
    uint64_t v53 = sub_100010EA0((uint64_t)&type metadata for SchemaError, v52);
    *(void *)uint64_t v54 = 0x2064696C61766E69LL;
    *(void *)(v54 + 8) = 0xEF68746170676174LL;
    *(_BYTE *)(v54 + 41) = 12;
    swift_willThrow(v53);
    return;
  }

  uint64_t v96 = a3;
  uint64_t v102 = a4;
  uint64_t v7 = sub_100104684(a1, a2);
  uint64_t v100 = *(void *)(v4 + 16);
  uint64_t v8 = Data.count.getter(a1, a2);
  unint64_t v103 = v8;
  if ((v8 & 0x8000000000000000LL) == 0)
  {
    if (!*(void *)(v4 + 16)) {
      goto LABEL_57;
    }
    unint64_t v9 = 0LL;
    uint64_t v10 = v4 + 32;
    uint64_t v98 = v4 + 32;
    uint64_t v99 = v4;
    while (1)
    {
      unint64_t v11 = v10 + 24 * v9;
      uint64_t v12 = *(void *)v11;
      if ((*(_BYTE *)(v11 + 16) & 1) == 0)
      {
        unint64_t v29 = (unint64_t)sub_10003D808(v8, "position");
        if ((v29 & 0x8000000000000000LL) == 0 && v29 >= v103)
        {
LABEL_62:
          sub_100105B28( v29,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v92,  v93,  v94,  v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102);
          id v61 = sub_100105AD0(v60, "seekToOffset:");
          sub_100105AD0((uint64_t)v61, "updateData:");
          sub_100105AC0();
          if (!v59) {
            goto LABEL_63;
          }
          __break(1u);
          goto LABEL_77;
        }

        while (1)
        {
          sub_100105BE4();
          if (v22 || (sub_100105BD4(), v23)) {
            sub_100105BB4();
          }
          else {
            sub_100105AE4();
          }
          unint64_t v42 = ((unint64_t)(v41 & 0x7F) << v38) | v40;
          if (v41 < 0)
          {
            if (v39 < 9) {
              continue;
            }
            unint64_t v43 = 0LL;
          }

          else if (v7[OBJC_IVAR___PBDataReader__error])
          {
            unint64_t v43 = 0LL;
          }

          else
          {
            unint64_t v43 = v42;
          }

          uint64_t v28 = v43 & 7;
          uint64_t v44 = sub_100105C60(v37, v43 >> 3);
          unint64_t v29 = (unint64_t)sub_10003D808(v44, "position");
          if ((v29 & 0x8000000000000000LL) == 0 && v29 >= v103) {
            goto LABEL_62;
          }
        }
      }

      uint64_t v97 = v9;
      uint64_t v13 = *(void *)(v11 + 8);
      while (1)
      {
        unint64_t v14 = (unint64_t)sub_10003D808(v8, "position");
        if ((v14 & 0x8000000000000000LL) == 0 && v14 >= v103)
        {
          sub_100105B28( v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21,  v92,  v93,  v94,  v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102);
          id v56 = sub_100105AD0(v55, "seekToOffset:");
          sub_100105AD0((uint64_t)v56, "updateData:");
          sub_100105AC0();
          if (!v59) {
            goto LABEL_63;
          }
          __break(1u);
          goto LABEL_62;
        }

        sub_100105BF4();
        while (1)
        {
          sub_100105BE4();
          if (v22 || (sub_100105BD4(), v23)) {
            sub_100105BB4();
          }
          else {
            sub_100105AE4();
          }
          sub_100105BA4();
          if ((v27 & 0x80) == 0) {
            break;
          }
          if (v26 >= 9)
          {
            unint64_t v25 = 0LL;
            goto LABEL_19;
          }
        }

        if (v7[OBJC_IVAR___PBDataReader__error]) {
          unint64_t v25 = 0LL;
        }
LABEL_19:
        uint64_t v28 = v25 & 7;
LABEL_22:
        uint64_t v8 = sub_100105C60(v24, v25 >> 3);
      }

      if (v13) {
        break;
      }
      unint64_t v9 = v97;
LABEL_40:
      char v45 = sub_1000F0300(v28);
      if (v45 == 6)
      {
        unint64_t v62 = sub_1000E43B4();
        sub_100010EA0((uint64_t)&type metadata for SchemaError, v62);
        sub_100105B8C();
        _StringGuts.grow(_:)(22LL);
        swift_bridgeObjectRelease();
        HIBYTE(v104) = v28;
        v105._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
        sub_100105C1C(v105);
        uint64_t v63 = sub_1000110E0();
        uint64_t v71 = sub_100105B48( v63,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v92,  v93,  v94,  v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v104,  0xD000000000000014LL,  0x8000000100173370LL);
        id v72 = sub_100105AD0(v71, "seekToOffset:");
        sub_100105AD0((uint64_t)v72, "updateData:");
        sub_100105AC0();
        if (!v59) {
          goto LABEL_63;
        }
        __break(1u);
LABEL_67:
        sub_1000F034C((uint64_t)v7, v46, v102);
        char v57 = &selRef_fbr;
        if (v101)
        {
          id v74 = sub_100105AD0(v73, "seekToOffset:");
          sub_100105AD0((uint64_t)v74, "updateData:");
          sub_100105AC0();
          if (!v59) {
            goto LABEL_63;
          }
          __break(1u);
LABEL_71:
          unint64_t v75 = sub_1000E43B4();
          sub_100010EA0((uint64_t)&type metadata for SchemaError, v75);
          sub_100105B8C();
          _StringGuts.grow(_:)(38LL);
          swift_bridgeObjectRelease();
          HIBYTE(v104) = v28;
          v106._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
          sub_100105C1C(v106);
          uint64_t v76 = sub_1000110E0();
          uint64_t v84 = sub_100105B48( v76,  v77,  v78,  v79,  v80,  v81,  v82,  v83,  v92,  v93,  v94,  v95,  v96,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  v104,  0xD000000000000024LL,  0x80000001001728C0LL);
          id v85 = sub_100105AD0(v84, "seekToOffset:");
          sub_100105AD0((uint64_t)v85, "updateData:");
          sub_100105AC0();
          if (!v59)
          {
LABEL_63:
            v57[92] = v58;

            return;
          }

          __break(1u);
        }

        id v86 = sub_100105AD0(v73, v57[413]);
        sub_100105AD0((uint64_t)v86, "updateData:");
        sub_100105AC0();
        if (!v59) {
          goto LABEL_63;
        }
LABEL_77:
        __break(1u);
      }

      char v46 = v45;
      if (++v9 == v100) {
        goto LABEL_67;
      }
      if (v45 != 2) {
        goto LABEL_71;
      }
      sub_100105BF4();
      while (1)
      {
        sub_100105BE4();
        if (v22 || (sub_100105BD4(), v23)) {
          sub_100105BB4();
        }
        else {
          sub_100105AE4();
        }
        sub_100105BA4();
        if ((v50 & 0x80) == 0) {
          break;
        }
        if (v49 > 8)
        {
          uint64_t v51 = 0LL;
          goto LABEL_55;
        }
      }

      if (v7[OBJC_IVAR___PBDataReader__error]) {
        uint64_t v51 = 0LL;
      }
      else {
        uint64_t v51 = v48;
      }
      if (v51 < 0) {
        goto LABEL_78;
      }
LABEL_55:
      uint64_t v8 = (uint64_t)sub_10003D808(v47, "position");
      if (v8 < 0) {
        goto LABEL_78;
      }
      unint64_t v103 = v8 + v51;
      uint64_t v10 = v98;
      if (v9 >= *(void *)(v99 + 16))
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
    }

    --v13;
    goto LABEL_22;
  }

void static ProtoTagPathHelper.extractValues(from:property:block:)( uint64_t a1, uint64_t a2, void *a3, void (*a4)(_BYTE *))
{
  uint64_t v9 = sub_100105C40();
  v10(v9);
  if (!v4)
  {
    sub_100019AFC(a3, a3[3]);
    uint64_t v11 = sub_100105C40();
    uint64_t v23 = v12(v11);
    uint64_t v14 = a3[3];
    uint64_t v13 = a3[4];
    sub_100019AFC(a3, v14);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v14, v13);
    if ((v15 & 1) != 0)
    {
      __chkstk_darwin(v15);
      sub_100104AA0(a1, a2, v23, (void (*)(char *, unint64_t))sub_100104A84);
      sub_100105AFC();
    }

    else
    {
      uint64_t v16 = sub_10000941C(&qword_1001D8638);
      uint64_t v17 = swift_allocObject(v16, 56LL, 7LL);
      *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
      *(void *)(v17 + 3sub_1000108B8(v0 + 2) = v23;
      *(void *)(v17 + 4sub_1000E3528(v0, v2, 0) = 0LL;
      *(_BYTE *)(v17 + 48) = 0;
      sub_1000E6350((uint64_t)v22, (uint64_t)&v19);
      uint64_t v18 = v17;
      static ProtoTagPathHelper.extractValue(from:pathAndType:)(a1, a2, (uint64_t)&v18, (uint64_t)v20);
      sub_1000F46CC((uint64_t)&v18);
      if (v20[57] == 255)
      {
        sub_100105AFC();
        sub_100028CD0((uint64_t)v20, &qword_1001D8F00);
      }

      else
      {
        sub_1000F4798((uint64_t)v20, (uint64_t)v21);
        a4(v21);
        sub_1000F4848((uint64_t)v21);
        sub_100105AFC();
      }
    }
  }

uint64_t static ProtoTagPathHelper.extractAllValues(from:schema:block:)( uint64_t a1, uint64_t a2, void *a3, void (*a4)(void *, __int128 *))
{
  uint64_t v8 = a3[3];
  uint64_t v9 = a3[4];
  sub_100105C10(a1, a2, a3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 40))(v8, v9);
  if (!v4)
  {
    uint64_t v11 = result;
    swift_bridgeObjectRetain(result);
    sub_100104F84(a1, a2, v11, a4);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_100104608()
{
  uint64_t v0 = sub_10000941C((uint64_t *)&unk_1001D0C00);
  uint64_t v1 = swift_allocObject(v0, 40LL, 7LL);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = xmmword_10015D570;
  id v2 = [objc_allocWithZone(PBDataReader) init];
  *(void *)(v1 + 3sub_1000108B8(v0 + 2) = v2;
  uint64_t result = specialized Array._endMutation()(v2);
  qword_1001DA2E8 = v1;
  return result;
}

void *sub_100104684(uint64_t a1, uint64_t a2)
{
  if (__OFADD__(qword_1001DA2E0, 1LL))
  {
    __break(1u);
LABEL_19:
    id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
    goto LABEL_17;
  }

  uint64_t v2 = a2;
  uint64_t v4 = a1;
  ++qword_1001DA2E0;
  while (1)
  {
    if (qword_1001D7E68 != -1) {
      swift_once(&qword_1001D7E68, sub_100104608);
    }
    swift_beginAccess(&qword_1001DA2E8, v17, 0LL, 0LL);
    if ((unint64_t)qword_1001DA2E8 >> 62)
    {
      uint64_t v12 = qword_1001DA2E8 < 0 ? qword_1001DA2E8 : qword_1001DA2E8 & 0xFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRetain(qword_1001DA2E8);
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v12);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v6 = *(void *)((qword_1001DA2E8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    unint64_t v5 = qword_1001DA2E0;
    if (qword_1001DA2E0 < v6) {
      break;
    }
    id v7 = [objc_allocWithZone(PBDataReader) init];
    uint64_t v8 = swift_beginAccess(&qword_1001DA2E8, v16, 33LL, 0LL);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
    unint64_t v10 = *(void *)((qword_1001DA2E8 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v9 = *(void *)((qword_1001DA2E8 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v10 >= v9 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1);
    }
    uint64_t v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v7);
    specialized Array._endMutation()(v11);
    swift_endAccess(v16);
  }

  swift_beginAccess(&qword_1001DA2E8, v16, 32LL, 0LL);
  uint64_t v3 = qword_1001DA2E8;
  sub_100030F44(v5, (qword_1001DA2E8 & 0xC000000000000001LL) == 0, qword_1001DA2E8);
  if ((v3 & 0xC000000000000001LL) != 0) {
    goto LABEL_19;
  }
  id v13 = *(id *)(v3 + 8 * v5 + 32);
LABEL_17:
  uint64_t v14 = v13;
  swift_endAccess(v16);
  sub_100105510(v4, v2, v14);
  return v14;
}

unint64_t sub_100104860(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0LL;
  }
  uint64_t v9 = 4 * v4;
  unint64_t v10 = 15LL;
  while (1)
  {
    uint64_t v11 = String.subscript.getter(v10, a3, a4);
    if (v11 == a1 && v12 == a2) {
      break;
    }
    uint64_t v14 = v12;
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, a1, a2, 0LL);
    swift_bridgeObjectRelease(v14);
    if ((v15 & 1) != 0) {
      return v10;
    }
    unint64_t v10 = String.index(after:)(v10, a3, a4);
    if (v9 == v10 >> 14) {
      return 0LL;
    }
  }

  swift_bridgeObjectRelease(a2);
  return v10;
}

void sub_100104944(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *))
{
  char v5 = a2;
  char v7 = sub_1000F0300(a2);
  if (v7 == 6)
  {
    unint64_t v8 = sub_1000E43B4();
    swift_allocError(&type metadata for SchemaError, v8, 0LL, 0LL);
    uint64_t v10 = v9;
    _StringGuts.grow(_:)(22LL);
    swift_bridgeObjectRelease();
    char v14 = v5;
    v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
    String.append(_:)(v11);
    uint64_t v12 = swift_bridgeObjectRelease();
    *(void *)uint64_t v10 = 0xD000000000000014LL;
    *(void *)(v10 + 8) = 0x8000000100173370LL;
    *(_BYTE *)(v10 + 41) = 12;
    swift_willThrow(v12);
  }

  else
  {
    sub_1000F034C(a1, v7, (uint64_t)&v13);
    if (!v3)
    {
      a3(&v13);
      sub_1000F4848((uint64_t)&v13);
    }
  }

void sub_100104A84(uint64_t a1, uint64_t a2)
{
}

void sub_100104AA0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, unint64_t))
{
  uint64_t v9 = (char *)sub_100104684(a1, a2);
  uint64_t v10 = Data.count.getter(a1, a2);
  if ((v10 & 0x8000000000000000LL) == 0)
  {
    unint64_t v11 = v10;
    unint64_t v12 = (unint64_t)[v9 position];
    if ((v12 & 0x8000000000000000LL) == 0 && v12 >= v11)
    {
LABEL_22:
      [v9 seekToOffset:0];
      [v9 updateData:0];
      uint64_t v22 = qword_1001DA2E0 - 1;
      if (!__OFSUB__(qword_1001DA2E0, 1LL)) {
        goto LABEL_23;
      }
      goto LABEL_27;
    }

    char v13 = 0;
    unsigned int v14 = 0;
    unint64_t v15 = 0LL;
    while (1)
    {
      while (1)
      {
        unint64_t v16 = *(void *)&v9[OBJC_IVAR___PBDataReader__pos];
        if (v16 == -1LL || v16 >= *(void *)&v9[OBJC_IVAR___PBDataReader__length])
        {
          char v18 = 0;
          v9[OBJC_IVAR___PBDataReader__error] = 1;
        }

        else
        {
          unint64_t v17 = v16 + 1;
          char v18 = *(_BYTE *)(*(void *)&v9[OBJC_IVAR___PBDataReader__bytes] + v16);
          *(void *)&v9[OBJC_IVAR___PBDataReader__pos] = v17;
        }

        v15 |= (unint64_t)(v18 & 0x7F) << v13;
        if (v18 < 0) {
          break;
        }
        if (v9[OBJC_IVAR___PBDataReader__error]) {
          unint64_t v19 = 0LL;
        }
        else {
          unint64_t v19 = v15;
        }
LABEL_16:
        if (a3 == (v19 >> 3))
        {
          a4(v9, v19 & 7);
          if (v4)
          {
            [v9 seekToOffset:0];
            [v9 updateData:0];
            uint64_t v22 = qword_1001DA2E0 - 1;
            if (!__OFSUB__(qword_1001DA2E0, 1LL))
            {
LABEL_23:
              qword_1001DA2E0 = v22;

              return;
            }

            __break(1u);
LABEL_27:
            __break(1u);
          }
        }

        else
        {
          PBReaderSkipValueWithTag(v9, v19 >> 3, v19 & 7);
        }

        unint64_t v21 = (unint64_t)[v9 position];
        unsigned int v14 = 0;
        char v13 = 0;
        unint64_t v15 = 0LL;
        if ((v21 & 0x8000000000000000LL) == 0)
        {
          unint64_t v15 = 0LL;
          if (v21 >= v11) {
            goto LABEL_22;
          }
        }
      }

      v13 += 7;
      if (v14++ >= 9)
      {
        unint64_t v19 = 0LL;
        goto LABEL_16;
      }
    }
  }

  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL);
  __break(1u);
}

uint64_t sub_100104D30( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, void (*a5)(void *, __int128 *))
{
  if (v27)
  {
    sub_100019BC4(&v26, (uint64_t)v30);
    uint64_t v10 = v31;
    uint64_t v11 = v32;
    sub_100019AFC(v30, v31);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 40))(v29, v10, v11);
    if (!v5)
    {
      char v12 = sub_1000F0300(a1);
      if (v12 == 6)
      {
        unint64_t v13 = sub_1000E43B4();
        swift_allocError(&type metadata for SchemaError, v13, 0LL, 0LL);
        uint64_t v15 = v14;
        *(void *)&__int128 v26 = 0LL;
        *((void *)&v26 + 1) = 0xE000000000000000LL;
        _StringGuts.grow(_:)(22LL);
        swift_bridgeObjectRelease();
        *(void *)&__int128 v26 = 0xD000000000000014LL;
        *((void *)&v26 + 1) = 0x8000000100173370LL;
        char v28 = a1;
        v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
        String.append(_:)(v16);
        uint64_t v17 = swift_bridgeObjectRelease();
        uint64_t v18 = *((void *)&v26 + 1);
        *(void *)uint64_t v15 = v26;
        *(void *)(v15 + 8) = v18;
        *(_BYTE *)(v15 + 41) = 12;
        swift_willThrow(v17);
      }

      else
      {
        sub_1000F034C(a3, v12, (uint64_t)&v26);
        a5(v30, &v26);
        sub_1000F4848((uint64_t)&v26);
      }

      sub_1000E638C(v29);
    }

    return sub_1000108B8(v30);
  }

  else
  {
    sub_100028CD0((uint64_t)&v26, &qword_1001D8AF0);
    unint64_t v19 = sub_1000E43B4();
    swift_allocError(&type metadata for SchemaError, v19, 0LL, 0LL);
    uint64_t v21 = v20;
    *(void *)&__int128 v26 = 0x6761742068746977LL;
    *((void *)&v26 + 1) = 0xE900000000000020LL;
    LODWORD(v29[0]) = a2;
    v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
    String.append(_:)(v22);
    uint64_t v23 = swift_bridgeObjectRelease();
    uint64_t v24 = *((void *)&v26 + 1);
    *(void *)uint64_t v21 = v26;
    *(void *)(v21 + 8) = v24;
    *(_BYTE *)(v21 + 41) = 4;
    return swift_willThrow(v23);
  }

void sub_100104F84(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, __int128 *))
{
  unint64_t v8 = (char *)sub_100104684(a1, a2);
  unint64_t v28 = Data.count.getter(a1, a2);
  if ((v28 & 0x8000000000000000LL) != 0)
  {
    swift_bridgeObjectRelease();
    sub_100010FA8();
    sub_10006B518( (uint64_t)"Fatal error",  v20,  v21,  (uint64_t)"Negative value is not representable",  v22,  v23,  (uint64_t)"Swift/Integers.swift",  v24,  v25,  v26,  v27);
    __break(1u);
  }

  else
  {
    while (1)
    {
      unint64_t v9 = (unint64_t)[v8 position];
      if ((v9 & 0x8000000000000000LL) == 0 && v9 >= v28) {
        break;
      }
      sub_100105BF4();
      while (1)
      {
        unint64_t v10 = *(void *)&v8[OBJC_IVAR___PBDataReader__pos];
        if (v10 == -1LL || v10 >= *(void *)&v8[OBJC_IVAR___PBDataReader__length]) {
          v8[OBJC_IVAR___PBDataReader__error] = 1;
        }
        else {
          *(void *)&v8[OBJC_IVAR___PBDataReader__pos] = v10 + 1;
        }
        sub_100105BA4();
        if ((v13 & 0x80) == 0) {
          break;
        }
        if (v12 >= 9)
        {
          unint64_t v11 = 0LL;
          goto LABEL_14;
        }
      }

      if (v8[OBJC_IVAR___PBDataReader__error]) {
        unint64_t v11 = 0LL;
      }
LABEL_14:
      uint64_t v14 = sub_100104D30(v11 & 7, v11 >> 3, (uint64_t)v8, a3, a4);
      if (v4)
      {
        id v15 = sub_100105C04(v14, "seekToOffset:");
        sub_100105C04((uint64_t)v15, "updateData:");
        sub_100105AC0();
        if (!v18) {
          goto LABEL_19;
        }
        __break(1u);
        break;
      }
    }

    id v19 = sub_100105C04(v9, "seekToOffset:");
    sub_100105C04((uint64_t)v19, "updateData:");
    sub_100105AC0();
    if (v18) {
      __break(1u);
    }
LABEL_19:
    *(void *)(v16 + 736) = v17;
    swift_bridgeObjectRelease();
  }

ValueMetadata *type metadata accessor for ProtoTagPathHelper()
{
  return &type metadata for ProtoTagPathHelper;
}

unsigned __int8 *sub_1001051A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int64_t a5)
{
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  unint64_t v7 = sub_10010562C();
  swift_bridgeObjectRetain(a4);
  uint64_t v8 = String.init<A>(_:)(&v18, &type metadata for Substring, &protocol witness table for Substring, v7);
  uint64_t v10 = v8;
  unint64_t v11 = v9;
  if ((v9 & 0x1000000000000000LL) == 0)
  {
    if ((v9 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v13 = HIBYTE(v11) & 0xF;
    uint64_t v18 = v10;
    uint64_t v19 = v11 & 0xFFFFFFFFFFFFFFLL;
    unsigned int v12 = (unsigned __int8 *)&v18;
    goto LABEL_7;
  }

  uint64_t v10 = sub_1000CA2F4(v8, v9);
  unint64_t v15 = v14;
  swift_bridgeObjectRelease();
  unint64_t v11 = v15;
  if ((v15 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v10 & 0x1000000000000000LL) != 0)
  {
    unsigned int v12 = (unsigned __int8 *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    unsigned int v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v10, v11);
  }

unsigned __int8 *sub_100105294(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v17 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v18 = a3 + 48;
        unsigned __int8 v19 = a3 + 55;
        unsigned __int8 v20 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = 58;
        }

        else
        {
          unsigned __int8 v20 = 97;
          unsigned __int8 v19 = 65;
        }

        if (result)
        {
          unint64_t v9 = 0LL;
          uint64_t v21 = result + 1;
          do
          {
            unsigned int v22 = *v21;
            if (v22 < 0x30 || v22 >= v18)
            {
              if (v22 < 0x41 || v22 >= v19)
              {
                uint64_t v13 = 0LL;
                if (v22 < 0x61 || v22 >= v20) {
                  return (unsigned __int8 *)v13;
                }
                char v23 = -87;
              }

              else
              {
                char v23 = -55;
              }
            }

            else
            {
              char v23 = -48;
            }

            if (!is_mul_ok(v9, a3)) {
              return 0LL;
            }
            unint64_t v24 = v9 * a3;
            unsigned __int8 v25 = v22 + v23;
            BOOL v16 = __CFADD__(v24, v25);
            unint64_t v9 = v24 + v25;
            if (v16) {
              return 0LL;
            }
            ++v21;
            --v17;
          }

          while (v17);
          return (unsigned __int8 *)v9;
        }

        return 0LL;
      }

      return 0LL;
    }
  }

  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        unsigned __int8 v26 = a3 + 48;
        unsigned __int8 v27 = a3 + 55;
        unsigned __int8 v28 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = 58;
        }

        else
        {
          unsigned __int8 v28 = 97;
          unsigned __int8 v27 = 65;
        }

        if (result)
        {
          unint64_t v29 = 0LL;
          do
          {
            unsigned int v30 = *result;
            if (v30 < 0x30 || v30 >= v26)
            {
              if (v30 < 0x41 || v30 >= v27)
              {
                uint64_t v13 = 0LL;
                if (v30 < 0x61 || v30 >= v28) {
                  return (unsigned __int8 *)v13;
                }
                char v31 = -87;
              }

              else
              {
                char v31 = -55;
              }
            }

            else
            {
              char v31 = -48;
            }

            if (!is_mul_ok(v29, a3)) {
              return 0LL;
            }
            unint64_t v32 = v29 * a3;
            unsigned __int8 v33 = v30 + v31;
            BOOL v16 = __CFADD__(v32, v33);
            unint64_t v29 = v32 + v33;
            if (v16) {
              return 0LL;
            }
            ++result;
            --v3;
          }

          while (v3);
          return (unsigned __int8 *)v29;
        }

        return 0LL;
      }

      return 0LL;
    }

    if (a2 >= 1)
    {
      uint64_t v5 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v6 = a3 + 48;
        unsigned __int8 v7 = a3 + 55;
        unsigned __int8 v8 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = 58;
        }

        else
        {
          unsigned __int8 v8 = 97;
          unsigned __int8 v7 = 65;
        }

        if (result)
        {
          unint64_t v9 = 0LL;
          for (unint64_t i = result + 1; ; ++i)
          {
            unsigned int v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                uint64_t v13 = 0LL;
                if (v11 < 0x61 || v11 >= v8) {
                  return (unsigned __int8 *)v13;
                }
                char v12 = -87;
              }

              else
              {
                char v12 = -55;
              }
            }

            else
            {
              char v12 = -48;
            }

            if (!is_mul_ok(v9, a3)) {
              return 0LL;
            }
            unint64_t v14 = v9 * a3;
            unsigned __int8 v15 = v11 + v12;
            BOOL v16 = v14 >= v15;
            unint64_t v9 = v14 - v15;
            if (!v16) {
              return 0LL;
            }
            if (!--v5) {
              return (unsigned __int8 *)v9;
            }
          }
        }

        return 0LL;
      }

      return 0LL;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

void sub_100105510(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a3 updateData:isa];
}

void sub_100105554( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int64_t a5)
{
  if ((a4 & 0x1000000000000000LL) != 0) {
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000LL) != 0)
  {
    uint64_t v12 = HIBYTE(a4) & 0xF;
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    unsigned int v11 = v14;
  }

  else if ((a3 & 0x1000000000000000LL) != 0)
  {
    unsigned int v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    unsigned int v11 = (void *)_StringObject.sharedUTF8.getter(a3, a4);
  }

  sub_100105668((uint64_t)v11, v12, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000LL) != 0;
  }

unint64_t sub_10010562C()
{
  unint64_t result = qword_1001DA2F0;
  if (!qword_1001DA2F0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_1001DA2F0);
  }

  return result;
}

void sub_100105668( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, int64_t a7)
{
  unint64_t v11 = a3;
  uint64_t v13 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000LL) == 0) {
    LOBYTE(v1swift_weakDestroy(v0 + 3) = 1;
  }
  uint64_t v14 = 4LL << v13;
  unint64_t v15 = a3 & 0xC;
  unint64_t v16 = a3;
  if (v15 == 4LL << v13)
  {
    sub_1000B8A04(a3, a5, a6);
    unint64_t v16 = v20;
  }

  uint64_t v17 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x1000000000000000LL) != 0)
  {
    unint64_t v21 = a5 & 0xFFFFFFFFFFFFLL;
    if ((a6 & 0x2000000000000000LL) != 0) {
      unint64_t v21 = HIBYTE(a6) & 0xF;
    }
    if (v21 < v16 >> 16) {
      goto LABEL_96;
    }
    uint64_t v18 = String.UTF8View._foreignDistance(from:to:)(15LL, v16, a5, a6);
    uint64_t v17 = HIBYTE(a6) & 0xF;
  }

  else
  {
    uint64_t v18 = v16 >> 16;
  }

  if (v15 == v14)
  {
    uint64_t v22 = v17;
    sub_1000B8A04(v11, a5, a6);
    uint64_t v17 = v22;
    unint64_t v11 = v23;
  }

  if ((a4 & 0xC) == v14)
  {
    unint64_t v24 = a4;
    uint64_t v25 = v17;
    sub_1000B8A04(v24, a5, a6);
    uint64_t v17 = v25;
    a4 = v26;
    if ((a6 & 0x1000000000000000LL) == 0) {
      goto LABEL_11;
    }
  }

  else if ((a6 & 0x1000000000000000LL) == 0)
  {
LABEL_11:
    uint64_t v19 = (a4 >> 16) - (v11 >> 16);
    goto LABEL_22;
  }

  unint64_t v27 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a6 & 0x2000000000000000LL) != 0) {
    unint64_t v27 = v17;
  }
  if (v27 < v11 >> 16) {
    goto LABEL_92;
  }
  if (v27 < a4 >> 16)
  {
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }

  uint64_t v19 = String.UTF8View._foreignDistance(from:to:)(v11, a4, a5, a6);
LABEL_22:
  uint64_t v28 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_91;
  }

  if (v28 < v18)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }

  unint64_t v29 = (unsigned __int8 *)(a1 + v18);
  if (!a1) {
    unint64_t v29 = 0LL;
  }
  int v30 = *v29;
  if (v30 == 43)
  {
    if (v19 < 1)
    {
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
      return;
    }

    if (v19 != 1)
    {
      unsigned __int8 v42 = a7 + 48;
      unsigned __int8 v43 = a7 + 55;
      unsigned __int8 v44 = a7 + 87;
      if (a7 > 10)
      {
        unsigned __int8 v42 = 58;
      }

      else
      {
        unsigned __int8 v44 = 97;
        unsigned __int8 v43 = 65;
      }

      if (v29)
      {
        unint64_t v45 = 0LL;
        char v46 = v29 + 1;
        uint64_t v47 = v19 - 1;
        while (1)
        {
          unsigned int v48 = *v46;
          if (v48 < 0x30 || v48 >= v42)
          {
            if (v48 < 0x41 || v48 >= v43)
            {
              if (v48 < 0x61 || v48 >= v44) {
                return;
              }
              char v49 = -87;
            }

            else
            {
              char v49 = -55;
            }
          }

          else
          {
            char v49 = -48;
          }

          if (is_mul_ok(v45, a7))
          {
            unint64_t v50 = v45 * a7;
            unsigned __int8 v51 = v48 + v49;
            BOOL v41 = __CFADD__(v50, v51);
            unint64_t v45 = v50 + v51;
            if (!v41)
            {
              ++v46;
              if (--v47) {
                continue;
              }
            }
          }

          return;
        }
      }
    }
  }

  else
  {
    if (v30 == 45)
    {
      if (v19 >= 1)
      {
        if (v19 != 1)
        {
          unsigned __int8 v31 = a7 + 48;
          unsigned __int8 v32 = a7 + 55;
          unsigned __int8 v33 = a7 + 87;
          if (a7 > 10)
          {
            unsigned __int8 v31 = 58;
          }

          else
          {
            unsigned __int8 v33 = 97;
            unsigned __int8 v32 = 65;
          }

          if (v29)
          {
            unint64_t v34 = 0LL;
            uint64_t v35 = v29 + 1;
            uint64_t v36 = v19 - 1;
            while (1)
            {
              unsigned int v37 = *v35;
              if (v37 < 0x30 || v37 >= v31)
              {
                if (v37 < 0x41 || v37 >= v32)
                {
                  if (v37 < 0x61 || v37 >= v33) {
                    return;
                  }
                  char v38 = -87;
                }

                else
                {
                  char v38 = -55;
                }
              }

              else
              {
                char v38 = -48;
              }

              if (is_mul_ok(v34, a7))
              {
                unint64_t v39 = v34 * a7;
                unsigned __int8 v40 = v37 + v38;
                BOOL v41 = v39 >= v40;
                unint64_t v34 = v39 - v40;
                if (v41)
                {
                  ++v35;
                  if (--v36) {
                    continue;
                  }
                }
              }

              return;
            }
          }
        }

        return;
      }

      goto LABEL_94;
    }

    if (v28 != v18)
    {
      unsigned __int8 v52 = a7 + 48;
      unsigned __int8 v53 = a7 + 55;
      unsigned __int8 v54 = a7 + 87;
      if (a7 > 10)
      {
        unsigned __int8 v52 = 58;
      }

      else
      {
        unsigned __int8 v54 = 97;
        unsigned __int8 v53 = 65;
      }

      if (v29)
      {
        unint64_t v55 = 0LL;
        while (1)
        {
          unsigned int v56 = *v29;
          if (v56 < 0x30 || v56 >= v52)
          {
            if (v56 < 0x41 || v56 >= v53)
            {
              if (v56 < 0x61 || v56 >= v54) {
                return;
              }
              char v57 = -87;
            }

            else
            {
              char v57 = -55;
            }
          }

          else
          {
            char v57 = -48;
          }

          if (is_mul_ok(v55, a7))
          {
            unint64_t v58 = v55 * a7;
            unsigned __int8 v59 = v56 + v57;
            BOOL v41 = __CFADD__(v58, v59);
            unint64_t v55 = v58 + v59;
            if (!v41)
            {
              ++v29;
              if (--v19) {
                continue;
              }
            }
          }

          return;
        }
      }
    }
  }

uint64_t sub_100105AA0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_WORD *)(a1 + 4sub_1000E3528(v0, v2, 0) = 3584;
  return swift_willThrow();
}

  ;
}

id sub_100105AD0(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 0);
}

uint64_t sub_100105ADC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return swift_bridgeObjectRelease(a11);
}

void sub_100105AE4()
{
  *(void *)(v2 + vsub_1000E3528(v0, v2, 0) = v1 + 1;
}

void *sub_100105AFC()
{
  return sub_1000E638C((void *)(v0 - 136));
}

void sub_100105B04()
{
}

uint64_t sub_100105B10()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 32))(v0, v1);
}

double sub_100105B28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  *(void *)(a19 + 48) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a19 + swift_weakDestroy(v0 + 16) = 0u;
  *(_OWORD *)(a19 + 3sub_1000108B8(v0 + 2) = 0u;
  *(_OWORD *)a19 = 0u;
  *(_WORD *)(a19 + 56) = -256;
  return result;
}

uint64_t sub_100105B48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  *(void *)uint64_t v23 = a22;
  *(void *)(v23 + 8) = a23;
  *(_BYTE *)(v23 + 41) = 12;
  return swift_willThrow();
}

uint64_t sub_100105B60()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(v0, v1);
}

uint64_t sub_100105B74()
{
  return v0;
}

  ;
}

  ;
}

void sub_100105BB4()
{
  *(_BYTE *)(v0 + *vsub_1000108B8(v0 + 2) = v1;
}

unint64_t sub_100105BC4(uint64_t a1)
{
  return sub_100104860(a1, 0xE100000000000000LL, v2, v1);
}

  ;
}

  ;
}

  ;
}

id sub_100105C04(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 0);
}

void *sub_100105C10(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100019AFC(a3, v3);
}

void sub_100105C1C(Swift::String a1)
{
}

uint64_t sub_100105C28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  return sub_1000EF098((uint64_t)va, v14 - 136);
}

uint64_t sub_100105C34()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_100105C40()
{
  return v0;
}

uint64_t sub_100105C54(uint64_t a1, uint64_t a2)
{
  return String.subscript.getter(a1, a2, v3, v2);
}

uint64_t sub_100105C60(uint64_t a1, uint64_t a2)
{
  return PBReaderSkipValueWithTag(v2, a2, v3);
}

uint64_t PBase64DecodeFunction.parametersCount.getter()
{
  return 0xFFFFFFFFLL;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PBase64DecodeFunction.perform(with:arguments:)( SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  uint64_t v5 = sub_10000941C(&qword_1001DA2F8);
  __chkstk_darwin(v5);
  unsigned __int8 v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for String.Encoding(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v40 - v12;
  uint64_t v14 = *((void *)arguments._rawValue + 2);
  if ((unint64_t)(v14 - 1) > 1)
  {
    v43._uint64_t countAndFlagsBits = 0LL;
    v43._object = (void *)0xE000000000000000LL;
    _StringGuts.grow(_:)(31LL);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    v21._object = (void *)0x8000000100173390LL;
    SQLiteContext.setError(message:code:)(v21, -1);
  }

  else
  {
    uint64_t v41 = v11;
    uint64_t v42 = v10;
    rawValue = (sqlite3_context *)with.context._rawValue;
    unint64_t v15 = (sqlite3_value *)*((void *)arguments._rawValue + 4);
    uint64_t v16 = SQLiteArgument.getBase64EncodedData()(v15);
    if (v17 >> 60 == 15)
    {
      uint64_t v18 = SQLiteArgument.getData()(v15);
      unint64_t v20 = v19;
      sub_100106180(v18, v19);
      sub_100010A1C(v18, v20);
    }

    else
    {
      uint64_t v22 = v16;
      unint64_t v23 = v17;
      v40[0] = v8;
      v40[1] = v2;
      static String.Encoding.utf8.getter(v16);
      uint64_t v24 = sub_100106174();
      uint64_t v26 = String.init(data:encoding:)(v24, v25, v13);
      if (v27)
      {
        Data.init(base64Encoded:options:)(v26, v27, 0LL);
        unint64_t v29 = v28;
        sub_100009B3C();
        if (v29 >> 60 != 15) {
          __asm { BR              X9 }
        }
      }

      if (v14 == 2)
      {
        Swift::String v30 = SQLiteArgument.getStringNonNull()();
        if (v31)
        {
          sub_100106158();
        }

        else
        {
          swift_bridgeObjectRetain(v30._object);
          sub_100106174();
          sub_10010603C(v32);
          uint64_t v33 = v40[0];
          if (sub_100010708((uint64_t)v7, 1LL, v40[0]) == 1)
          {
            sub_1001060F8((uint64_t)v7);
            v43._uint64_t countAndFlagsBits = 0LL;
            v43._object = (void *)0xE000000000000000LL;
            _StringGuts.grow(_:)(23LL);
            swift_bridgeObjectRelease();
            v43._uint64_t countAndFlagsBits = 0xD000000000000011LL;
            v43._object = (void *)0x80000001001733C0LL;
            v34._uint64_t countAndFlagsBits = sub_100106174();
            String.append(_:)(v34);
            swift_bridgeObjectRelease();
            v35._object = (void *)0x80000001001733E0LL;
            v35._uint64_t countAndFlagsBits = 0xD000000000000011LL;
            String.append(_:)(v35);
            SQLiteContext.setError(message:code:)(v43, -1);
            sub_100106158();
            sub_100009B3C();
          }

          else
          {
            swift_bridgeObjectRelease();
            uint64_t v37 = v41;
            uint64_t v36 = v42;
            (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v41, v7, v33);
            (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v13, v37, v33);
            uint64_t v38 = sub_100106164();
            if (v39)
            {
              SQLiteContext.setString(_:destructor:)(v38, v39, (void (__cdecl **)(void *))1, rawValue);
              sub_100009B3C();
            }

            else
            {
              SQLiteContext.setNull()();
            }

            sub_100106158();
            (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v33);
          }
        }
      }

      else
      {
        sub_100014244(v22, v23);
        sub_100106180(v22, v23);
        sub_100106158();
        sub_100106158();
      }
    }
  }

uint64_t sub_10010603C@<X0>(uint64_t a1@<X8>)
{
  Swift::String v2 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v2._countAndFlagsBits == 946238581 && v2._object == (void *)0xE400000000000000LL)
  {
    uint64_t v5 = swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  char v4 = _stringCompareWithSmolCheck(_:_:expecting:)( 946238581LL,  0xE400000000000000LL,  v2._countAndFlagsBits,  v2._object,  0LL);
  uint64_t v5 = swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
LABEL_8:
    static String.Encoding.utf8.getter(v5);
    uint64_t v6 = 0LL;
    goto LABEL_9;
  }

  uint64_t v6 = 1LL;
LABEL_9:
  uint64_t v7 = type metadata accessor for String.Encoding(0LL);
  return sub_100009654(a1, v6, 1LL, v7);
}

uint64_t sub_1001060F8(uint64_t a1)
{
  uint64_t v2 = sub_10000941C(&qword_1001DA2F8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for PBase64DecodeFunction()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer21PBase64DecodeFunction);
}

uint64_t sub_100106158()
{
  return sub_100010A30(v0, v1);
}

uint64_t sub_100106164()
{
  return String.init(data:encoding:)(v0, v1, v2);
}

uint64_t sub_100106174()
{
  return v0;
}

void sub_100106180(int a1, unint64_t a2)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PBGetFunction.perform(with:arguments:)( SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  unint64_t v4 = *((void *)arguments._rawValue + 2);
  if (!v4)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v7 = SQLiteArgument.getUnsafeData()(*((sqlite3_value **)arguments._rawValue + 4));
  if (v8 >> 60 == 15)
  {
    unint64_t v9 = sub_1000E4274();
    uint64_t v10 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v9);
    *(void *)(v11 + 8) = 0LL;
    *(void *)(v11 + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)uint64_t v11 = 6LL;
    *(_BYTE *)(v11 + 24) = 4;
    swift_willThrow(v10);
    return;
  }

  if (v4 < 2) {
    goto LABEL_49;
  }
  uint64_t v12 = v7;
  unint64_t v13 = v8;
  uint64_t v14 = sqlite3_value_text(*((sqlite3_value **)arguments._rawValue + 5));
  if (!v14)
  {
    unint64_t v44 = sub_1000E43B4();
    uint64_t v45 = sub_100010EA0((uint64_t)&type metadata for SchemaError, v44);
    *(void *)uint64_t v46 = 0xD000000000000024LL;
    *(void *)(v46 + 8) = 0x8000000100173430LL;
    *(_BYTE *)(v46 + 41) = 0;
    swift_willThrow(v45);
    sub_100010A1C(v12, v13);
    return;
  }

  Swift::String v21 = v14;
  rawValue = (sqlite3_value **)arguments._rawValue;
  unint64_t v51 = v4;
  uint64_t v47 = with.context._rawValue;
  uint64_t v53 = v2;
  uint64_t v48 = v12;
  unint64_t v49 = v13;
  LOBYTE(v2sub_1000108B8(v0 + 2) = *v14;
  if (!*v14) {
    goto LABEL_41;
  }
  unint64_t v23 = 0LL;
  char v24 = 0;
  uint64_t v25 = (void *)(v53 + 48);
  while (v22 < 0x30u)
  {
    unint64_t v26 = 0LL;
LABEL_11:
    if ((v23 & 0x8000000000000000LL) != 0)
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }

    sub_100106618((uint64_t)v14, v15, v16, v17, v18, v19, v20);
    char v27 = sub_100106638();
    *uint64_t v25 = v3;
    if ((v27 & 1) == 0)
    {
      sub_10010660C();
      sub_10010662C(v36);
    }

    unint64_t v28 = *(void *)(v3 + 16);
    if (v28 >= *(void *)(v3 + 24) >> 1)
    {
      sub_10010660C();
      sub_10010662C(v37);
    }

    *(void *)(v3 + swift_weakDestroy(v0 + 16) = v28 + 1;
    uint64_t v29 = v3 + 24 * v28;
    *(void *)(v29 + 3sub_1000108B8(v0 + 2) = v23;
    *(void *)(v29 + 4sub_1000E3528(v0, v2, 0) = v26;
    *(_BYTE *)(v29 + 48) = 1;
    uint64_t v14 = (const unsigned __int8 *)swift_endAccess(v52);
    if (!(_BYTE)v22) {
      goto LABEL_41;
    }
    char v24 = 0;
LABEL_18:
    int v30 = *++v21;
    LOBYTE(v2sub_1000108B8(v0 + 2) = v30;
    if (!v30) {
      goto LABEL_41;
    }
  }

  if (v22 > 0x39u)
  {
    if (v22 == 105)
    {
      unint64_t v23 = 0LL;
      char v24 = 1;
      goto LABEL_18;
    }

    unint64_t v26 = 0LL;
    LOBYTE(v2sub_1000108B8(v0 + 2) = 1;
    goto LABEL_11;
  }

  unint64_t v26 = 0LL;
  do
  {
    if (!is_mul_ok(v26, 0xAuLL))
    {
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }

    BOOL v31 = __CFADD__(10 * v26, (v22 - 48));
    unint64_t v26 = 10 * v26 + (v22 - 48);
    if (v31) {
      goto LABEL_46;
    }
    int v32 = *++v21;
    int v22 = v32;
  }

  while ((v32 - 58) > 0xF5u);
  if (v22 == 105)
  {
    char v24 = 1;
    unint64_t v23 = v26;
    goto LABEL_18;
  }

  if ((v24 & 1) == 0)
  {
    if (!v26) {
      goto LABEL_41;
    }
    if ((v26 & 0x8000000000000000LL) != 0) {
      goto LABEL_51;
    }
    sub_100106618((uint64_t)v14, v15, v16, v17, v18, v19, v20);
    char v33 = sub_100106638();
    *uint64_t v25 = v3;
    if ((v33 & 1) == 0)
    {
      sub_10010660C();
      sub_10010662C(v38);
    }

    unint64_t v34 = *(void *)(v3 + 16);
    if (v34 >= *(void *)(v3 + 24) >> 1)
    {
      sub_10010660C();
      sub_10010662C(v39);
    }

    *(void *)(v3 + swift_weakDestroy(v0 + 16) = v34 + 1;
    uint64_t v35 = v3 + 24 * v34;
    *(void *)(v35 + 3sub_1000108B8(v0 + 2) = v26;
    *(void *)(v35 + 4sub_1000E3528(v0, v2, 0) = 0LL;
    *(_BYTE *)(v35 + 48) = 0;
    uint64_t v14 = (const unsigned __int8 *)swift_endAccess(v52);
    char v24 = 0;
    if (!v22) {
      goto LABEL_41;
    }
    goto LABEL_18;
  }

  if (v23) {
    goto LABEL_11;
  }
LABEL_41:
  if (v51 < 3)
  {
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }

  unsigned __int8 v40 = sqlite3_value_text(rawValue[6]);
  if (v40)
  {
    uint64_t v41 = v53;
    char v42 = *v40;
    swift_beginAccess(v53 + 48, v52, 1LL, 0LL);
    uint64_t v43 = *(void *)(v41 + 48);
    swift_bridgeObjectRetain(v43);
    sub_100109D14((uint64_t)v47, v48, v49, v43, v42);
    swift_bridgeObjectRelease();
    *(void *)(v41 + 48) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    sub_100010A1C(v48, v49);
    return;
  }

LABEL_52:
  __break(1u);
}

            sub_100109C4C(v5);
            uint64_t v5 = v31;
            goto LABEL_22;
          }

            sub_100109C60();
            uint64_t v5 = v31;
            goto LABEL_22;
          }

uint64_t PBGetFunction.__allocating_init(_:)(uint64_t a1)
{
  *(void *)(swift_allocObject(v1, 56LL, 7LL) + 48) = _swiftEmptyArrayStorage;
  return SQLiteSchematizerFunction.init(_:)(a1);
}

uint64_t PBGetFunction.init(_:)(uint64_t a1)
{
  *(void *)(v1 + 48) = _swiftEmptyArrayStorage;
  return SQLiteSchematizerFunction.init(_:)(a1);
}

uint64_t sub_100106594()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 48));
}

uint64_t PBGetFunction.deinit()
{
  uint64_t v0 = SQLiteBaseFunction.deinit();
  swift_weakDestroy(v0 + 40);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PBGetFunction.__deallocating_deinit()
{
  uint64_t v0 = PBGetFunction.deinit();
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t type metadata accessor for PBGetFunction()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer13PBGetFunction);
}

void sub_10010660C()
{
}

uint64_t sub_100106618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  return swift_beginAccess(v7, va, 33LL, 0LL);
}

uint64_t sub_10010662C(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t sub_100106638()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PGetFunction.perform(with:arguments:)( SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  unint64_t v3 = *((void *)arguments._rawValue + 2);
  if (!v3)
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v5 = (sqlite3_value *)*((void *)arguments._rawValue + 4);
  BOOL v6 = SQLiteArgument.isNull.getter(v5);
  if (v6)
  {
    SQLiteContext.setNull()();
    return;
  }

  sub_1000E42D0(v6);
  if (!v2)
  {
    SQLiteBaseSchematizer.getSQLiteBridge()();
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    swift_release();
    uint64_t ObjectType = swift_getObjectType(v8);
    uint64_t v12 = (*(uint64_t (**)(sqlite3_value *, uint64_t, uint64_t))(v10 + 24))(v5, ObjectType, v10);
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    swift_unknownObjectRelease();
    if (v3 >= 2)
    {
      Swift::String v19 = SQLiteArgument.getStringNonNull()();
      if (v20)
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }

      else
      {
        sub_1000F725C(v19._countAndFlagsBits, (uint64_t)v19._object, (uint64_t)with.context._rawValue, v12, v14, v16, v18);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }

      return;
    }

uint64_t type metadata accessor for PGetFunction()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer12PGetFunction);
}

uint64_t sub_1001067B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v19)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  char v27;
  uint64_t v28;
  BOOL v29;
  Swift::Int v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  void *v35;
  uint64_t *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  int64_t v42;
  int64_t v46;
  uint64_t v47;
  void v48[5];
  uint64_t v49;
  uint64_t v5 = v4;
  uint64_t v41 = a2 + 56;
  uint64_t v7 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a2 + 56);
  char v42 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  int64_t v10 = 0LL;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v49 = (v9 - 1) & v9;
  for (unint64_t i = __clz(__rbit64(v9)) | (v10 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v10 << 6))
  {
    uint64_t v15 = (uint64_t *)(*(void *)(a2 + 48) + 16 * i);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    uint64_t ObjectType = swift_getObjectType(a3);
    Swift::String v19 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 40);
    swift_bridgeObjectRetain_n(v16, 2LL);
    v19(v48, v17, v16, ObjectType, a4);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)a1;
    }

    MessageSchemaModel.init(_:dontCopy:)(v48, 0);
    Swift::String v21 = v20;
    unint64_t v23 = v22;
    uint64_t v47 = v24;
    uint64_t v46 = v10;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
    v48[0] = a1;
    unint64_t v26 = sub_10000EC64(v17, v16);
    unint64_t v28 = a1[2];
    uint64_t v29 = (v27 & 1) == 0;
    int v30 = v28 + v29;
    if (__OFADD__(v28, v29)) {
      break;
    }
    BOOL v31 = v26;
    int v32 = v27;
    sub_10000941C(&qword_1001D9FF8);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v30))
    {
      char v33 = sub_10000EC64(v17, v16);
      if ((v32 & 1) != (v34 & 1)) {
        goto LABEL_40;
      }
      BOOL v31 = v33;
    }

    a1 = (void *)v48[0];
    if ((v32 & 1) != 0)
    {
      uint64_t v35 = (void *)(*(void *)(v48[0] + 56LL) + 24 * v31);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *uint64_t v35 = v21;
      v35[1] = v23;
      v35[2] = v47;
    }

    else
    {
      *(void *)(v48[0] + 8 * (v31 >> 6) + 64) |= 1LL << v31;
      uint64_t v36 = (uint64_t *)(a1[6] + 16 * v31);
      *uint64_t v36 = v17;
      v36[1] = v16;
      uint64_t v37 = (void *)(a1[7] + 24 * v31);
      *uint64_t v37 = v21;
      v37[1] = v23;
      v37[2] = v47;
      uint64_t v38 = a1[2];
      BOOL v12 = __OFADD__(v38, 1LL);
      uint64_t v39 = v38 + 1;
      if (v12) {
        goto LABEL_37;
      }
      a1[2] = v39;
      swift_bridgeObjectRetain(v16);
    }

    swift_bridgeObjectRelease_n(v16, 2LL);
    swift_bridgeObjectRelease();
    int64_t v10 = v46;
    uint64_t v5 = 0LL;
    unint64_t v9 = v49;
    if (v49) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v12 = __OFADD__(v10++, 1LL);
    if (v12) {
      goto LABEL_38;
    }
    if (v10 >= v42) {
      goto LABEL_34;
    }
    unint64_t v13 = *(void *)(v41 + 8 * v10);
    if (!v13)
    {
      int64_t v14 = v10 + 1;
      if (v10 + 1 >= v42) {
        goto LABEL_34;
      }
      unint64_t v13 = *(void *)(v41 + 8 * v14);
      if (v13) {
        goto LABEL_16;
      }
      int64_t v14 = v10 + 2;
      if (v10 + 2 >= v42) {
        goto LABEL_34;
      }
      unint64_t v13 = *(void *)(v41 + 8 * v14);
      if (v13) {
        goto LABEL_16;
      }
      int64_t v14 = v10 + 3;
      if (v10 + 3 >= v42) {
        goto LABEL_34;
      }
      unint64_t v13 = *(void *)(v41 + 8 * v14);
      if (v13)
      {
LABEL_16:
        int64_t v10 = v14;
        goto LABEL_17;
      }

      int64_t v14 = v10 + 4;
      if (v10 + 4 < v42)
      {
        unint64_t v13 = *(void *)(v41 + 8 * v14);
        if (!v13)
        {
          while (1)
          {
            int64_t v10 = v14 + 1;
            if (__OFADD__(v14, 1LL)) {
              goto LABEL_39;
            }
            if (v10 >= v42) {
              goto LABEL_34;
            }
            unint64_t v13 = *(void *)(v41 + 8 * v10);
            ++v14;
            if (v13) {
              goto LABEL_17;
            }
          }
        }

        goto LABEL_16;
      }

uint64_t sub_100106B5C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v21)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  char v29;
  uint64_t v30;
  BOOL v31;
  Swift::Int v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  void v42[4];
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void v50[3];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v5 = v4;
  uint64_t v46 = a2;
  uint64_t v47 = a3;
  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v43 = a2 + 56;
  uint64_t v8 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & v7;
  unint64_t v44 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v45 = a4;
  swift_bridgeObjectRetain(a2);
  int64_t v11 = 0LL;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v49 = (v10 - 1) & v10;
  for (unint64_t i = __clz(__rbit64(v10)) | (v11 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v11 << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v46 + 48) + 16 * i);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t ObjectType = swift_getObjectType(v47);
    uint64_t v20 = v45;
    Swift::String v21 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 48);
    swift_bridgeObjectRetain_n(v18, 2LL);
    v21(v50, v17, v18, ObjectType, v20);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)a1;
    }

    uint64_t v53 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for Int32,  &protocol witness table for String);
    int v22 = v51;
    unint64_t v23 = v52;
    sub_100019AFC(v50, v51);
    char v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v22, v23);
    __chkstk_darwin(v24);
    v42[2] = &v53;
    _OWORD v42[3] = v50;
    sub_1000E2FB8((uint64_t)sub_1000E3368, (uint64_t)v42, v24);
    uint64_t v48 = 0LL;
    uint64_t v25 = v11;
    swift_bridgeObjectRelease();
    unint64_t v26 = v53;
    sub_1000108B8(v50);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
    v50[0] = a1;
    unint64_t v28 = sub_10000EC64(v17, v18);
    int v30 = a1[2];
    BOOL v31 = (v29 & 1) == 0;
    int v32 = v30 + v31;
    if (__OFADD__(v30, v31)) {
      break;
    }
    char v33 = v28;
    unint64_t v34 = v29;
    sub_10000941C(&qword_1001DA008);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v32))
    {
      uint64_t v35 = sub_10000EC64(v17, v18);
      if ((v34 & 1) != (v36 & 1)) {
        goto LABEL_40;
      }
      char v33 = v35;
    }

    a1 = (void *)v50[0];
    if ((v34 & 1) != 0)
    {
      uint64_t v37 = *(void *)(v50[0] + 56LL);
      swift_bridgeObjectRelease();
      *(void *)(v37 + 8 * v3swift_weakDestroy(v0 + 3) = v26;
    }

    else
    {
      *(void *)(v50[0] + 8 * (v33 >> 6) + 64) |= 1LL << v33;
      uint64_t v38 = (uint64_t *)(a1[6] + 16 * v33);
      void *v38 = v17;
      v38[1] = v18;
      *(void *)(a1[7] + 8 * v3swift_weakDestroy(v0 + 3) = v26;
      uint64_t v39 = a1[2];
      BOOL v13 = __OFADD__(v39, 1LL);
      unsigned __int8 v40 = v39 + 1;
      if (v13) {
        goto LABEL_37;
      }
      a1[2] = v40;
      swift_bridgeObjectRetain(v18);
    }

    swift_bridgeObjectRelease_n(v18, 2LL);
    swift_bridgeObjectRelease();
    int64_t v11 = v25;
    uint64_t v5 = v48;
    unint64_t v10 = v49;
    if (v49) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v13 = __OFADD__(v11++, 1LL);
    if (v13) {
      goto LABEL_38;
    }
    if (v11 >= v44) {
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v43 + 8 * v11);
    if (!v14)
    {
      int64_t v15 = v11 + 1;
      if (v11 + 1 >= v44) {
        goto LABEL_34;
      }
      unint64_t v14 = *(void *)(v43 + 8 * v15);
      if (v14) {
        goto LABEL_16;
      }
      int64_t v15 = v11 + 2;
      if (v11 + 2 >= v44) {
        goto LABEL_34;
      }
      unint64_t v14 = *(void *)(v43 + 8 * v15);
      if (v14) {
        goto LABEL_16;
      }
      int64_t v15 = v11 + 3;
      if (v11 + 3 >= v44) {
        goto LABEL_34;
      }
      unint64_t v14 = *(void *)(v43 + 8 * v15);
      if (v14)
      {
LABEL_16:
        int64_t v11 = v15;
        goto LABEL_17;
      }

      int64_t v15 = v11 + 4;
      if (v11 + 4 < v44)
      {
        unint64_t v14 = *(void *)(v43 + 8 * v15);
        if (!v14)
        {
          while (1)
          {
            int64_t v11 = v15 + 1;
            if (__OFADD__(v15, 1LL)) {
              goto LABEL_39;
            }
            if (v11 >= v44) {
              goto LABEL_34;
            }
            unint64_t v14 = *(void *)(v43 + 8 * v11);
            ++v15;
            if (v14) {
              goto LABEL_17;
            }
          }
        }

        goto LABEL_16;
      }

uint64_t *SchemaStoreModel.emptyStore.unsafeMutableAddressor()
{
  if (qword_1001D7E70 != -1) {
    swift_once(&qword_1001D7E70, sub_100107108);
  }
  return &static SchemaStoreModel.emptyStore;
}

uint64_t SchemaStoreModel.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(ObjectType, a2);
  Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for MessageSchemaModel,  &protocol witness table for String);
  sub_100107C08();
  uint64_t v8 = sub_1001067B8(v2, v7, a1, a2);
  if (v2)
  {
    sub_100010CA0();
    sub_1000145F0();
  }

  else
  {
    uint64_t v3 = v8;
    sub_1000145F0();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(a2 + 16);
    __n128 v10 = swift_bridgeObjectRetain(v3);
    uint64_t v11 = v9(ObjectType, a2, v10);
    Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for EnumModel,  &protocol witness table for String);
    sub_100107C08();
    sub_100106B5C(v9, v11, a1, a2);
    swift_bridgeObjectRelease();
    sub_100010CA0();
    swift_bridgeObjectRelease();
  }

  return v3;
}

uint64_t sub_100107108()
{
  uint64_t v0 = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for MessageSchemaModel,  &protocol witness table for String);
  uint64_t result = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for EnumModel,  &protocol witness table for String);
  static SchemaStoreModel.emptyStore = v0;
  *(void *)algn_1001EDEE8 = result;
  return result;
}

uint64_t static SchemaStoreModel.emptyStore.getter()
{
  if (qword_1001D7E70 != -1) {
    swift_once(&qword_1001D7E70, sub_100107108);
  }
  uint64_t v0 = static SchemaStoreModel.emptyStore;
  swift_bridgeObjectRetain(static SchemaStoreModel.emptyStore);
  sub_100047294();
  return v0;
}

uint64_t sub_1001071E0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73616D65686373LL && a2 == 0xE700000000000000LL;
  if (v2 || (sub_100027D54(0x73616D65686373LL, 0xE700000000000000LL) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x736D756E65LL && a2 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v7 = sub_100027D54(0x736D756E65LL, 0xE500000000000000LL);
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1001072AC(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x736D756E65LL;
  }
  else {
    return 0x73616D65686373LL;
  }
}

uint64_t sub_1001072E0()
{
  return sub_1001072AC(*v0);
}

uint64_t sub_1001072E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001071E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10010730C(uint64_t a1)
{
  unint64_t v2 = sub_100107594();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100107334(uint64_t a1)
{
  unint64_t v2 = sub_100107594();
  return CodingKey.debugDescription.getter(a1, v2);
}

void SchemaStoreModel.schemas.setter(uint64_t a1)
{
  *uint64_t v1 = a1;
  sub_100009A90();
}

uint64_t SchemaStoreModel.init(from:)(void *a1)
{
  uint64_t v3 = sub_10000941C(&qword_1001DA6C8);
  __chkstk_darwin(v3);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100019AFC(a1, v4);
  unint64_t v6 = sub_100107594();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SchemaStoreModel.CodingKeys,  &type metadata for SchemaStoreModel.CodingKeys,  v6,  v4,  v5);
  if (v1)
  {
    sub_1000E3700();
  }

  else
  {
    sub_1000271C4();
    sub_10010760C(&qword_1001DA6E0, &qword_1001DA6D8);
    sub_100107C14();
    uint64_t v4 = v10;
    if (!v10) {
      uint64_t v4 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for MessageSchemaModel,  &protocol witness table for String);
    }
    sub_1000271C4();
    sub_10010760C(&qword_1001DA6F8, &qword_1001DA6F0);
    uint64_t v9 = v8;
    swift_bridgeObjectRetain(v4);
    sub_100107C14();
    if (v9)
    {
      sub_100107BF8();
      sub_1000145F0();
      sub_1000E3700();
      sub_1000145F0();
    }

    else
    {
      if (!v10) {
        Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for EnumModel,  &protocol witness table for String);
      }
      sub_100107BF8();
      sub_100047294();
      sub_1000E3700();
      swift_bridgeObjectRelease();
      sub_1000145F0();
    }
  }

  return v4;
}

unint64_t sub_100107594()
{
  unint64_t result = qword_1001DA6D0;
  if (!qword_1001DA6D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100165AB4, &type metadata for SchemaStoreModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DA6D0);
  }

  return result;
}

unint64_t sub_1001075D0()
{
  unint64_t result = qword_1001DA6E8;
  if (!qword_1001DA6E8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessageSchemaModel,  &type metadata for MessageSchemaModel);
    atomic_store(result, (unint64_t *)&qword_1001DA6E8);
  }

  return result;
}

void sub_10010760C(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    sub_100107C4C(0LL, a2);
    v2();
    atomic_store(sub_100107C2C((uint64_t)&protocol conformance descriptor for <> [A : B]), a1);
  }

  sub_1000D1B70();
}

unint64_t sub_10010765C()
{
  unint64_t result = qword_1001DA700;
  if (!qword_1001DA700)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for EnumModel, &type metadata for EnumModel);
    atomic_store(result, (unint64_t *)&qword_1001DA700);
  }

  return result;
}

uint64_t SchemaStoreModel.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_10000941C(&qword_1001DA708);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100019AFC(a1, v11);
  unint64_t v13 = sub_100107594();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SchemaStoreModel.CodingKeys,  &type metadata for SchemaStoreModel.CodingKeys,  v13,  v11,  v12);
  if (!*(void *)(a2 + 16)
    || (uint64_t v23 = a2,
        char v22 = 0,
        sub_1000271C4(),
        sub_100107808(&qword_1001DA710, &qword_1001DA6D8),
        uint64_t v14 = sub_100107C38(),
        sub_100107C20(v14, v15, v16),
        !v3))
  {
    if (*(void *)(a3 + 16))
    {
      uint64_t v23 = a3;
      char v22 = 1;
      sub_1000271C4();
      sub_100107808(&qword_1001DA720, &qword_1001DA6F0);
      uint64_t v17 = sub_100107C38();
      sub_100107C20(v17, v18, v19);
    }
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void sub_100107808(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    sub_100107C4C(0LL, a2);
    v2();
    atomic_store(sub_100107C2C((uint64_t)&protocol conformance descriptor for <> [A : B]), a1);
  }

  sub_1000D1B70();
}

unint64_t sub_100107858()
{
  unint64_t result = qword_1001DA718;
  if (!qword_1001DA718)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessageSchemaModel,  &type metadata for MessageSchemaModel);
    atomic_store(result, (unint64_t *)&qword_1001DA718);
  }

  return result;
}

unint64_t sub_100107894()
{
  unint64_t result = qword_1001DA728;
  if (!qword_1001DA728)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for EnumModel, &type metadata for EnumModel);
    atomic_store(result, (unint64_t *)&qword_1001DA728);
  }

  return result;
}

void static SchemaStoreModel.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((v6 & 1) != 0) {
    sub_1000E2C78(a2, a4);
  }
}

uint64_t sub_100107914@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = SchemaStoreModel.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t sub_10010793C(void *a1)
{
  return SchemaStoreModel.encode(to:)(a1, *v1, v1[1]);
}

void sub_100107954(uint64_t *a1, uint64_t *a2)
{
}

uint64_t destroy for SchemaStoreModel(void *a1)
{
  return swift_bridgeObjectRelease(a1[1]);
}

uint64_t *_s11Schematizer16SchemaStoreModelVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  sub_100047294();
  return a1;
}

uint64_t *assignWithCopy for SchemaStoreModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *assignWithTake for SchemaStoreModel(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for SchemaStoreModel()
{
  return &type metadata for SchemaStoreModel;
}

uint64_t storeEnumTagSinglePayload for SchemaStoreModel.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100107AB8 + 4 * byte_100165955[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100107AEC + 4 * asc_100165950[v4]))();
}

uint64_t sub_100107AEC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100107AF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100107AFCLL);
  }
  return result;
}

uint64_t sub_100107B08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100107B10LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100107B14(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100107B1C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SchemaStoreModel.CodingKeys()
{
  return &type metadata for SchemaStoreModel.CodingKeys;
}

unint64_t sub_100107B3C()
{
  unint64_t result = qword_1001DA730;
  if (!qword_1001DA730)
  {
    unint64_t result = swift_getWitnessTable(&unk_100165A8C, &type metadata for SchemaStoreModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DA730);
  }

  return result;
}

unint64_t sub_100107B7C()
{
  unint64_t result = qword_1001DA738;
  if (!qword_1001DA738)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001659FC, &type metadata for SchemaStoreModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DA738);
  }

  return result;
}

unint64_t sub_100107BBC()
{
  unint64_t result = qword_1001DA740;
  if (!qword_1001DA740)
  {
    unint64_t result = swift_getWitnessTable(&unk_100165A24, &type metadata for SchemaStoreModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DA740);
  }

  return result;
}

uint64_t sub_100107BF8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100107C08()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_100107C14()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_100107C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3);
}

uint64_t sub_100107C2C(uint64_t a1)
{
  return swift_getWitnessTable(a1, v1);
}

uint64_t sub_100107C38()
{
  return v0 - 72;
}

uint64_t sub_100107C4C(uint64_t a1, uint64_t *a2)
{
  return sub_1000094A0(a2);
}

uint64_t OneOfValue.value.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000F47D4((uint64_t *)(v1 + 40), a1);
}

void *destroy for OneOfValue(uint64_t a1)
{
  unint64_t result = (void *)(a1 + 40);
  switch(*(_BYTE *)(a1 + 97))
  {
    case 7:
      sub_1000108B8(result);
      unint64_t result = (void *)sub_1000E4A08(*(void *)(a1 + 80), *(void *)(a1 + 88), *(_BYTE *)(a1 + 96));
      break;
    case 8:
      unint64_t result = (void *)swift_bridgeObjectRelease();
      break;
    case 9:
      unint64_t result = (void *)sub_100010A30(*(void *)(a1 + 40), *(void *)(a1 + 48));
      break;
    case 0xA:
      unint64_t result = (void *)swift_unknownObjectRelease();
      break;
    default:
      return result;
  }

  return result;
}

uint64_t initializeWithCopy for OneOfValue(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = (_OWORD *)(a1 + 40);
  uint64_t v6 = (_OWORD *)(a2 + 40);
  switch(*(_BYTE *)(a2 + 97))
  {
    case 7:
      __int128 v7 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 64) = v7;
      (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
      uint64_t v8 = *(void *)(a2 + 80);
      uint64_t v9 = *(void *)(a2 + 88);
      char v10 = *(_BYTE *)(a2 + 96);
      sub_1000E4DB8(v8, v9, v10);
      *(void *)(a1 + 8sub_1000E3528(v0, v2, 0) = v8;
      *(void *)(a1 + 88) = v9;
      *(_BYTE *)(a1 + 96) = v10;
      char v11 = 7;
      goto LABEL_6;
    case 8:
      uint64_t v13 = *(void *)(a2 + 48);
      *(void *)(a1 + 4sub_1000E3528(v0, v2, 0) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v13;
      *(_BYTE *)(a1 + 97) = 8;
      swift_bridgeObjectRetain(v13);
      break;
    case 9:
      uint64_t v15 = *(void *)(a2 + 40);
      unint64_t v14 = *(void *)(a2 + 48);
      sub_100014244(v15, v14);
      *(void *)(a1 + 4sub_1000E3528(v0, v2, 0) = v15;
      *(void *)(a1 + 48) = v14;
      char v11 = 9;
LABEL_6:
      *(_BYTE *)(a1 + 97) = v11;
      break;
    case 0xA:
      *(_OWORD *)(a1 + 4sub_1000E3528(v0, v2, 0) = *v6;
      *(_BYTE *)(a1 + 97) = 10;
      swift_unknownObjectRetain();
      break;
    default:
      __int128 v12 = *(_OWORD *)(a2 + 56);
      *uint64_t v5 = *v6;
      *(_OWORD *)(a1 + 56) = v12;
      *(_OWORD *)(a1 + 7sub_1000108B8(v0 + 2) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 8sub_1000108B8(v0 + 2) = *(_OWORD *)(a2 + 82);
      break;
  }

  return a1;
}

uint64_t assignWithCopy for OneOfValue(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    __int128 v4 = (_OWORD *)(a2 + 40);
    sub_1000F4848(a1 + 40);
    switch(*(_BYTE *)(a2 + 97))
    {
      case 7:
        uint64_t v5 = *(void *)(a2 + 64);
        *(void *)(a1 + 64) = v5;
        *(void *)(a1 + 7sub_1000108B8(v0 + 2) = *(void *)(a2 + 72);
        (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
        uint64_t v6 = *(void *)(a2 + 80);
        uint64_t v7 = *(void *)(a2 + 88);
        char v8 = *(_BYTE *)(a2 + 96);
        sub_1000E4DB8(v6, v7, v8);
        *(void *)(a1 + 8sub_1000E3528(v0, v2, 0) = v6;
        *(void *)(a1 + 88) = v7;
        *(_BYTE *)(a1 + 96) = v8;
        char v9 = 7;
        goto LABEL_7;
      case 8:
        *(void *)(a1 + 4sub_1000E3528(v0, v2, 0) = *(void *)(a2 + 40);
        uint64_t v13 = *(void *)(a2 + 48);
        *(void *)(a1 + 48) = v13;
        *(_BYTE *)(a1 + 97) = 8;
        swift_bridgeObjectRetain(v13);
        break;
      case 9:
        uint64_t v15 = *(void *)(a2 + 40);
        unint64_t v14 = *(void *)(a2 + 48);
        sub_100014244(v15, v14);
        *(void *)(a1 + 4sub_1000E3528(v0, v2, 0) = v15;
        *(void *)(a1 + 48) = v14;
        char v9 = 9;
LABEL_7:
        *(_BYTE *)(a1 + 97) = v9;
        break;
      case 0xA:
        *(_OWORD *)(a1 + 4sub_1000E3528(v0, v2, 0) = *v4;
        *(_BYTE *)(a1 + 97) = 10;
        swift_unknownObjectRetain();
        break;
      default:
        __int128 v10 = *v4;
        __int128 v11 = *(_OWORD *)(a2 + 56);
        __int128 v12 = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 8sub_1000108B8(v0 + 2) = *(_OWORD *)(a2 + 82);
        *(_OWORD *)(a1 + 56) = v11;
        *(_OWORD *)(a1 + 7sub_1000108B8(v0 + 2) = v12;
        *(_OWORD *)(a1 + 4sub_1000E3528(v0, v2, 0) = v10;
        break;
    }
  }

  return a1;
}

void *initializeWithTake for OneOfValue(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x62uLL);
}

uint64_t assignWithTake for OneOfValue(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)(a1 + 3sub_1000108B8(v0 + 2) = *(void *)(a2 + 32);
  if (a1 != a2)
  {
    sub_1000F4848(a1 + 40);
    *(_OWORD *)(a1 + 4sub_1000E3528(v0, v2, 0) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 7sub_1000108B8(v0 + 2) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 8sub_1000108B8(v0 + 2) = *(_OWORD *)(a2 + 82);
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for OneOfValue(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 98))
    {
      LODWORD(vsub_1000108B8(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_1000108B8(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_1000108B8(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OneOfValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0LL;
    *(_OWORD *)(result + 7sub_1000108B8(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4sub_1000E3528(v0, v2, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 96) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 98) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 98) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for OneOfValue()
{
  return &type metadata for OneOfValue;
}

uint64_t _s7SQLiter14SQLiteBaseVTabC10ConnectionC14getTableSchemaSSyKF_0()
{
  return 0LL;
}

uint64_t type metadata accessor for ProtoEntity()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer11ProtoEntity);
}

uint64_t sub_100108090()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 24LL));
  return v1;
}

void sub_1001080C0(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100108100(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1001081D4 + 4 * byte_100165B53[a2]))(0x3436746E69LL);
}

uint64_t sub_1001081D4(uint64_t a1)
{
  unint64_t v2 = 0xE500000000000000LL;
  if (a1 == 0x3436746E69LL && v1 == 0xE500000000000000LL)
  {
    char v4 = 1;
    unint64_t v2 = v1;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x3436746E69LL, 0xE500000000000000LL, 0LL);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v4 & 1;
}

void sub_1001082D8(uint64_t a1)
{
}

void sub_1001082E4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = a2(a1);
  sub_10007B058(v4, v5, v6);
  sub_1000325E4();
  sub_10007AFDC();
  sub_10003DDCC();
}

void sub_10010831C(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_100108354(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE500000000000000LL);
}

void sub_100108420(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_10010845C(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE600000000000000LL);
}

void sub_1001084D8(int a1, Swift::UInt8 a2)
{
}

void sub_1001084FC(uint64_t a1)
{
  int v1 = Hasher.init(_seed:)(v10, a1);
  sub_10007B13C(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10[0]);
  sub_10007AFDC();
  sub_10003DDCC();
}

void sub_100108528(uint64_t a1, uint64_t a2)
{
}

void sub_100108534(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = a3(a2);
  sub_10007B058(v5, v6, v7);
  sub_1000325E4();
  sub_10007AFDC();
  sub_10003DDCC();
}

Schematizer::TypeModel_optional __swiftcall TypeModel.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001B9370, v2);
  sub_1000325E4();
  if (v3 >= 0xB) {
    return (Schematizer::TypeModel_optional)11;
  }
  else {
    return (Schematizer::TypeModel_optional)v3;
  }
}

uint64_t TypeModel.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001085E0 + 4 * byte_100165B6E[a1]))( 7630441LL,  0xE300000000000000LL);
}

uint64_t sub_1001085E0()
{
  return 0x3436746E69LL;
}

uint64_t sub_1001085F4()
{
  return 1953393013LL;
}

uint64_t sub_100108604()
{
  return 0x3436746E6975LL;
}

uint64_t sub_100108618()
{
  return 0x74616F6C66LL;
}

uint64_t sub_10010862C()
{
  return 0x656C62756F64LL;
}

uint64_t sub_100108640()
{
  return 1819242338LL;
}

uint64_t sub_100108650()
{
  return 1836412517LL;
}

uint64_t sub_100108660()
{
  return 0x676E69727473LL;
}

uint64_t sub_100108674()
{
  return 0x616D65686373LL;
}

uint64_t sub_100108688()
{
  return 1635017060LL;
}

void sub_100108698(char *a1)
{
}

unint64_t sub_1001086A8()
{
  unint64_t result = qword_1001DA7F0;
  if (!qword_1001DA7F0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for TypeModel, &type metadata for TypeModel);
    atomic_store(result, (unint64_t *)&qword_1001DA7F0);
  }

  return result;
}

void sub_1001086E4()
{
}

void sub_100108704(uint64_t a1)
{
}

void sub_10010870C(uint64_t a1)
{
}

Schematizer::TypeModel_optional sub_10010872C@<W0>( Swift::String *a1@<X0>, Schematizer::TypeModel_optional *a2@<X8>)
{
  result.value = TypeModel.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t sub_100108758@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = TypeModel.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100108780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10010897C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001087DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10010897C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t getEnumTagSinglePayload for TypeModel(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF6)
  {
    if (a2 + 10 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 10) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 11;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for TypeModel(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF5) {
    return ((uint64_t (*)(void))((char *)&loc_1001088FC + 4 * byte_100165B7E[v4]))();
  }
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_100108930 + 4 * byte_100165B79[v4]))();
}

uint64_t sub_100108930(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100108938(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100108940LL);
  }
  return result;
}

uint64_t sub_10010894C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100108954LL);
  }
  *(_BYTE *)uint64_t result = a2 + 10;
  return result;
}

uint64_t sub_100108958(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100108960(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TypeModel()
{
  return &type metadata for TypeModel;
}

unint64_t sub_10010897C()
{
  unint64_t result = qword_1001DA7F8;
  if (!qword_1001DA7F8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for TypeModel, &type metadata for TypeModel);
    atomic_store(result, (unint64_t *)&qword_1001DA7F8);
  }

  return result;
}

void sub_1001089B8(unsigned int a1)
{
  int v37 = a1;
  uint64_t v3 = *v1;
  if (!*(void *)(*v1 + 16))
  {
    sub_1000FBA90();
    uint64_t v18 = *(void *)(*v1 + 16);
    sub_1000FBAB4(v18);
    uint64_t v19 = *v1;
    *(void *)(v19 + swift_weakDestroy(v0 + 16) = v18 + 1;
    uint64_t v20 = (int32x2_t *)(v19 + 8 * v18);
    int32x2_t v21 = vdup_n_s32(a1);
    goto LABEL_25;
  }

  unint64_t v4 = (unint64_t)&v36;
  v35[2] = &v37;
  sub_1000145E8();
  unint64_t v5 = sub_10010903C((uint64_t (*)(uint64_t *))sub_100109CD8, (uint64_t)v35, v3);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    unint64_t v5 = *v1;
    unint64_t v4 = *(void *)(*v1 + 16);
    if (v4)
    {
      uint64_t v7 = v4 - 1;
      unint64_t v22 = v5 + 8 * (v4 - 1);
      int v23 = *(_DWORD *)(v22 + 36);
      LODWORD(vswift_weakDestroy(v0 + 3) = v23 + 1;
      if (!__OFADD__(v23, 1))
      {
        unsigned int v24 = v37;
        if ((_DWORD)v3 == v37)
        {
          int v2 = *(_DWORD *)(v22 + 32);
          if ((int)v3 >= v2)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) != 0)
            {
LABEL_22:
              if (v4 <= *(void *)(v5 + 16))
              {
                unint64_t v25 = v5 + 8 * v7;
                *(_DWORD *)(v25 + 3sub_1000108B8(v0 + 2) = v2;
                *(_DWORD *)(v25 + 36) = v3;
                *__int16 v1 = v5;
                return;
              }

              __break(1u);
              goto LABEL_54;
            }

LABEL_51:
          __break(1u);
          goto LABEL_52;
        }

        sub_1000FBA90();
        uint64_t v26 = *(void *)(*v1 + 16);
        sub_1000FBAB4(v26);
        uint64_t v19 = *v1;
        *(void *)(v19 + swift_weakDestroy(v0 + 16) = v26 + 1;
        uint64_t v20 = (int32x2_t *)(v19 + 8 * v26);
        int32x2_t v21 = vdup_n_s32(v24);
LABEL_25:
        v20[4] = v21;
        *__int16 v1 = v19;
        return;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_44;
  }

  LODWORD(vswift_weakDestroy(v0 + 3) = v37;
  if (!v5)
  {
    uint64_t v7 = *v1;
    unint64_t v8 = *(void *)(*v1 + 16);
    goto LABEL_28;
  }

  unint64_t v4 = v5 - 1;
  if (__OFSUB__(v5, 1LL))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }

  if ((v4 & 0x8000000000000000LL) != 0)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }

  uint64_t v7 = *v1;
  unint64_t v8 = *(void *)(*v1 + 16);
  if (v4 >= v8)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v9 = v7 + 32;
  __int128 v10 = (int *)(v7 + 32 + 8 * v4);
  int v11 = v10[1];
  BOOL v12 = __OFADD__(v11, 1);
  int v13 = v11 + 1;
  if (v12)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }

  if (v13 != v37)
  {
    if ((v5 & 0x8000000000000000LL) == 0)
    {
LABEL_28:
      if (v5 < v8)
      {
        int v27 = *(_DWORD *)(v7 + 32 + 8 * v5);
        BOOL v12 = __OFSUB__(v27, 1);
        int v28 = v27 - 1;
        if (!v12)
        {
          if (v28 != v37)
          {
            sub_100109A54(v5, v5, v37 | ((unint64_t)v37 << 32));
            return;
          }

          unint64_t v4 = *(unsigned int *)(v7 + 32 + 8 * v5 + 4);
          if ((int)v4 >= v37)
          {
            if ((sub_100109D0C() & 1) != 0)
            {
LABEL_33:
              if (v5 < *(void *)(v7 + 16))
              {
                unint64_t v29 = v7 + 8 * v5;
                *(_DWORD *)(v29 + 3sub_1000108B8(v0 + 2) = v3;
                *(_DWORD *)(v29 + 36) = v4;
                goto LABEL_40;
              }

              __break(1u);
              goto LABEL_57;
            }

          __break(1u);
          goto LABEL_52;
        }

        sub_1000FBA9C();
        uint64_t v26 = *(void *)(*v1 + 16);
        sub_1000FBAC0(v26);
        uint64_t v19 = *v1;
        *(void *)(v19 + swift_weakDestroy(v0 + 16) = v26 + 1;
        uint64_t v20 = (int64x2_t *)(v19 + 16 * v26);
        int32x2_t v21 = vdupq_n_s64(v24);
LABEL_25:
        _BYTE v20[2] = v21;
        *__int16 v1 = v19;
        return;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_44;
  }

  uint64_t v3 = v37;
  if (!v5)
  {
    uint64_t v7 = *v1;
    unint64_t v8 = *(void *)(*v1 + 16);
    goto LABEL_28;
  }

  unint64_t v4 = v5 - 1;
  if (__OFSUB__(v5, 1LL))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }

  if ((v4 & 0x8000000000000000LL) != 0)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }

  uint64_t v7 = *v1;
  unint64_t v8 = *(void *)(*v1 + 16);
  if (v4 >= v8)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v9 = v7 + 32;
  __int128 v10 = (uint64_t *)(v7 + 32 + 16 * v4);
  int v11 = v10[1];
  BOOL v12 = __OFADD__(v11, 1LL);
  int v13 = v11 + 1;
  if (v12)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }

  if (v13 != v37)
  {
    if ((v5 & 0x8000000000000000LL) == 0)
    {
LABEL_28:
      if (v5 < v8)
      {
        int v27 = *(void *)(v7 + 32 + 16 * v5);
        BOOL v12 = __OFSUB__(v27, 1LL);
        int v28 = v27 - 1;
        if (!v12)
        {
          if (v28 != v37)
          {
            sub_100109B4C(v5, v5, v37, v37);
            return;
          }

          unint64_t v4 = *(void *)(v7 + 32 + 16 * v5 + 8);
          if ((uint64_t)v4 >= v37)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) != 0)
            {
LABEL_33:
              if (v5 < *(void *)(v7 + 16))
              {
                unint64_t v29 = v7 + 16 * v5;
                *(void *)(v29 + 3sub_1000108B8(v0 + 2) = v3;
                *(void *)(v29 + 4sub_1000E3528(v0, v2, 0) = v4;
                goto LABEL_40;
              }

              __break(1u);
              goto LABEL_57;
            }

LABEL_54:
          __break(1u);
          goto LABEL_55;
        }

        goto LABEL_46;
      }

          __break(1u);
          goto LABEL_55;
        }

        goto LABEL_46;
      }

LABEL_60:
      sub_100109C4C(v7);
      uint64_t v7 = v33;
      goto LABEL_14;
    }

      sub_100109C60();
      uint64_t v7 = v33;
      goto LABEL_14;
    }

LABEL_59:
    __break(1u);
    goto LABEL_60;
  }

  if (v37 < v2)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }

  if ((sub_100109D0C() & 1) == 0)
  {
LABEL_63:
    sub_100109C4C(v7);
    uint64_t v7 = v34;
  }

  if (v4 >= *(void *)(v7 + 16))
  {
    __break(1u);
    return;
  }

  uint64_t v30 = v7 + 8 * v4;
  *(_DWORD *)(v30 + 3sub_1000108B8(v0 + 2) = v2;
  *(_DWORD *)(v30 + 36) = v3;
LABEL_40:
  *__int16 v1 = v7;
}

    __break(1u);
    goto LABEL_60;
  }

  if (v37 < v2)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }

  if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) == 0)
  {
LABEL_63:
    sub_100109C60();
    uint64_t v7 = v34;
  }

  if (v4 >= *(void *)(v7 + 16))
  {
    __break(1u);
    return;
  }

  uint64_t v30 = v7 + 16 * v4;
  *(void *)(v30 + 3sub_1000108B8(v0 + 2) = v2;
  *(void *)(v30 + 4sub_1000E3528(v0, v2, 0) = v3;
LABEL_40:
  *__int16 v1 = v7;
}

void sub_100108CE4(unint64_t a1)
{
  uint64_t v37 = a1;
  uint64_t v3 = *v1;
  if (!*(void *)(*v1 + 16))
  {
    sub_1000FBA9C();
    uint64_t v18 = *(void *)(*v1 + 16);
    sub_1000FBAC0(v18);
    uint64_t v19 = *v1;
    *(void *)(v19 + swift_weakDestroy(v0 + 16) = v18 + 1;
    uint64_t v20 = (int64x2_t *)(v19 + 16 * v18);
    int64x2_t v21 = vdupq_n_s64(a1);
    goto LABEL_25;
  }

  unint64_t v4 = (unint64_t)&v36;
  v35[2] = &v37;
  swift_bridgeObjectRetain(v3);
  unint64_t v5 = sub_1001090C0((uint64_t (*)(__int128 *))sub_100109CBC, (uint64_t)v35, v3);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    unint64_t v5 = *v1;
    unint64_t v4 = *(void *)(*v1 + 16);
    if (v4)
    {
      unint64_t v7 = v4 - 1;
      unint64_t v22 = v5 + 16 * (v4 - 1);
      uint64_t v23 = *(void *)(v22 + 40);
      uint64_t v3 = v23 + 1;
      if (!__OFADD__(v23, 1LL))
      {
        unint64_t v24 = v37;
        if (v3 == v37)
        {
          uint64_t v2 = *(void *)(v22 + 32);
          if (v3 >= v2)
          {
            if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) != 0)
            {
LABEL_22:
              if (v4 <= *(void *)(v5 + 16))
              {
                unint64_t v25 = v5 + 16 * v7;
                *(void *)(v25 + 3sub_1000108B8(v0 + 2) = v2;
                *(void *)(v25 + 4sub_1000E3528(v0, v2, 0) = v3;
                *__int16 v1 = v5;
                return;
              }

              __break(1u);
              goto LABEL_54;
            }

BOOL sub_100109024(int a1, int a2)
{
  return a1 > a2;
}

BOOL sub_100109030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 < a1;
}

uint64_t sub_10010903C(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return 0LL;
  }
  uint64_t v6 = 0LL;
  uint64_t v7 = a3 + 32;
  while (1)
  {
    uint64_t v10 = *(void *)(v7 + 8 * v6);
    char v8 = a1(&v10);
    if (v3 || (v8 & 1) != 0) {
      break;
    }
    if (v4 == ++v6) {
      return 0LL;
    }
  }

  return v6;
}

uint64_t sub_1001090C0(uint64_t (*a1)(__int128 *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return 0LL;
  }
  uint64_t v6 = 0LL;
  uint64_t v7 = a3 + 32;
  while (1)
  {
    __int128 v10 = *(_OWORD *)(v7 + 16 * v6);
    char v8 = a1(&v10);
    if (v3 || (v8 & 1) != 0) {
      break;
    }
    if (v4 == ++v6) {
      return 0LL;
    }
  }

  return v6;
}

void sub_10010914C(unint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) == 0)
  {
    sub_100109C4C(v3);
    uint64_t v3 = v6;
  }

  unint64_t v4 = *(void *)(v3 + 16);
  if (v4 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v5 = v4 - 1;
    sub_1001098A8((char *)(v3 + 8 * a1 + 40), v4 - 1 - a1, (char *)(v3 + 8 * a1 + 32));
    *(void *)(v3 + swift_weakDestroy(v0 + 16) = v5;
    *__int16 v1 = v3;
  }

void sub_1001091C4(unint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) == 0)
  {
    sub_100109C60();
    uint64_t v3 = v6;
  }

  unint64_t v4 = *(void *)(v3 + 16);
  if (v4 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v5 = v4 - 1;
    sub_100109954((char *)(v3 + 16 * a1 + 48), v4 - 1 - a1, (char *)(v3 + 16 * a1 + 32));
    *(void *)(v3 + swift_weakDestroy(v0 + 16) = v5;
    *__int16 v1 = v3;
  }

void sub_10010924C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a3;
  swift_bridgeObjectRetain_n(a3, 2LL);
  swift_retain(v3);
  v3[5] = sub_1000FF2C4(a3);
  uint64_t v19 = _swiftEmptyArrayStorage;
  sub_1000D1AEC(v18);
  uint64_t v6 = v18[0];
  uint64_t v7 = v18[1];
  int64_t v8 = v18[3];
  unint64_t v9 = v18[4];
  int64_t v10 = (unint64_t)(v18[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a3);
  if (!v9) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v12 = v11 | (v8 << 6);
  while (1)
  {
    sub_100108CE4(*(void *)(*(void *)(v6 + 56) + 8 * v12));
    if (v9) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      break;
    }
    if (v13 >= v10) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v7 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v10) {
        goto LABEL_23;
      }
      unint64_t v14 = *(void *)(v7 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v10) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v7 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v10) {
            goto LABEL_23;
          }
          unint64_t v14 = *(void *)(v7 + 8 * v15);
          if (!v14)
          {
            int64_t v15 = v8 + 5;
            if (v8 + 5 >= v10) {
              goto LABEL_23;
            }
            unint64_t v14 = *(void *)(v7 + 8 * v15);
            if (!v14)
            {
              int64_t v15 = v8 + 6;
              if (v8 + 6 >= v10) {
                goto LABEL_23;
              }
              unint64_t v14 = *(void *)(v7 + 8 * v15);
              if (!v14)
              {
                int64_t v16 = v8 + 7;
                while (v16 < v10)
                {
                  unint64_t v14 = *(void *)(v7 + 8 * v16++);
                  if (v14)
                  {
                    int64_t v15 = v16 - 1;
                    goto LABEL_20;
                  }
                }

unint64_t *sub_10010940C(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(v2 + 32);
  if (!*(void *)(v5 + 16)) {
    goto LABEL_5;
  }
  sub_1000145E8();
  unint64_t v6 = sub_10000EC64(a1, (uint64_t)a2);
  if ((v7 & 1) == 0)
  {
    sub_10001450C();
LABEL_5:
    unint64_t v9 = sub_1000E43B4();
    sub_100010EA0((uint64_t)&type metadata for SchemaError, v9);
    uint64_t v11 = v10;
    _StringGuts.grow(_:)(29LL);
    swift_bridgeObjectRelease();
    unint64_t v16 = 0xD00000000000001BLL;
    unint64_t v17 = 0x8000000100173550LL;
    int64_t v8 = &v16;
    v12._uint64_t countAndFlagsBits = a1;
    v12._object = a2;
    String.append(_:)(v12);
    unint64_t v13 = v17;
    *(void *)uint64_t v11 = v16;
    *(void *)(v11 + 8) = v13;
    *(_BYTE *)(v11 + 41) = 4;
    swift_willThrow(v14);
    return v8;
  }

  int64_t v8 = *(unint64_t **)(*(void *)(v5 + 56) + 8 * v6);
  sub_10001450C();
  return v8;
}

void *sub_100109500(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 32);
  unint64_t result = sub_1000D1AEC(&v19);
  int64_t v5 = v22;
  unint64_t v6 = v23;
  int64_t v7 = (unint64_t)(v21 + 64) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v5 << 6);
      goto LABEL_22;
    }

    int64_t v10 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      break;
    }
    if (v10 >= v7) {
      goto LABEL_24;
    }
    unint64_t v11 = *(void *)(v20 + 8 * v10);
    int64_t v12 = v5 + 1;
    if (!v11)
    {
      int64_t v12 = v5 + 2;
      if (v5 + 2 >= v7) {
        goto LABEL_24;
      }
      unint64_t v11 = *(void *)(v20 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v5 + 3;
        if (v5 + 3 >= v7) {
          goto LABEL_24;
        }
        unint64_t v11 = *(void *)(v20 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v5 + 4;
          if (v5 + 4 >= v7) {
            goto LABEL_24;
          }
          unint64_t v11 = *(void *)(v20 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v5 + 5;
            if (v5 + 5 >= v7) {
              goto LABEL_24;
            }
            unint64_t v11 = *(void *)(v20 + 8 * v12);
            if (!v11)
            {
              int64_t v12 = v5 + 6;
              if (v5 + 6 >= v7) {
                goto LABEL_24;
              }
              unint64_t v11 = *(void *)(v20 + 8 * v12);
              if (!v11)
              {
                int64_t v13 = v5 + 7;
                while (v13 < v7)
                {
                  unint64_t v11 = *(void *)(v20 + 8 * v13++);
                  if (v11)
                  {
                    int64_t v12 = v13 - 1;
                    goto LABEL_21;
                  }
                }

uint64_t sub_100109710()
{
  return swift_bridgeObjectRelease(v0[6]);
}

void *sub_100109734()
{
  return v0;
}

uint64_t sub_100109768()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t type metadata accessor for ProtoOneOf()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer10ProtoOneOf);
}

void *sub_1001097A8(uint64_t a1)
{
  return sub_100109500(a1);
}

unint64_t *sub_1001097C8(uint64_t a1, void *a2)
{
  return sub_10010940C(a1, a2);
}

char *sub_1001097E8(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    sub_100109CF4();
    __src = (char *)sub_1000DE2F4( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (__dst != __src || &__src[56 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 56 * a2);
  }

  return __src;
}

char *sub_10010984C(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100109CF4();
    unint64_t result = (char *)sub_1000DE2F4( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_1000DE30C(a3, result);
  }

  return result;
}

char *sub_1001098A8(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100109CF4();
    unint64_t result = (char *)sub_1000DE2F4( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_1000DE30C(a3, result);
  }

  return result;
}

char *sub_1001098FC(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100109CF4();
    unint64_t result = (char *)sub_1000DE2F4( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_1000DE30C(a3, result);
  }

  return result;
}

char *sub_100109954(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100109CF4();
    unint64_t result = (char *)sub_1000DE2F4( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_1000DE30C(a3, result);
  }

  return result;
}

char *sub_1001099A8(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100109CF4();
    unint64_t result = (char *)sub_1000DE2F4( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_1000DE30C(a3, result);
  }

  return result;
}

char *sub_100109A00(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100109CF4();
    unint64_t result = (char *)sub_1000DE2F4( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[64 * a2] <= a3)
  {
    return (char *)sub_1000DE30C(a3, result);
  }

  return result;
}

void sub_100109A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1LL, v8))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  if (!isUniquelyReferenced_nonNull_native || v10 > *(void *)(v5 + 24) >> 1)
  {
    if (v6 <= v10) {
      uint64_t v13 = v6 + v9;
    }
    else {
      uint64_t v13 = v6;
    }
    sub_1000E9A14(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    uint64_t v5 = v14;
  }

  uint64_t v15 = v5 + 32 + 8 * a1;
  if (!v9) {
    goto LABEL_16;
  }
  uint64_t v16 = *(void *)(v5 + 16);
  if (__OFSUB__(v16, a2)) {
    goto LABEL_22;
  }
  sub_1001098A8((char *)(v5 + 32 + 8 * a2), v16 - a2, (char *)(v15 + 8));
  uint64_t v17 = *(void *)(v5 + 16);
  BOOL v18 = __OFADD__(v17, v9);
  uint64_t v19 = v17 + v9;
  if (!v18)
  {
    *(void *)(v5 + swift_weakDestroy(v0 + 16) = v19;
LABEL_16:
    *(void *)uint64_t v15 = a3;
    uint64_t *v3 = v5;
    return;
  }

void sub_100109B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 16LL);
  if (v7 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v10 = 1 - v9;
  if (__OFSUB__(1LL, v9))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (__OFADD__(v7, v10))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (!swift_isUniquelyReferenced_nonNull_native(*v4) || v7 + v10 > *(void *)(v6 + 24) >> 1)
  {
    sub_1000E9AFC();
    uint64_t v6 = v13;
  }

  uint64_t v14 = v6 + 32 + 16 * a1;
  if (!v10) {
    goto LABEL_13;
  }
  uint64_t v15 = *(void *)(v6 + 16);
  if (__OFSUB__(v15, a2)) {
    goto LABEL_19;
  }
  sub_100109954((char *)(v6 + 32 + 16 * a2), v15 - a2, (char *)(v14 + 16));
  uint64_t v16 = *(void *)(v6 + 16);
  BOOL v17 = __OFADD__(v16, v10);
  uint64_t v18 = v16 + v10;
  if (!v17)
  {
    *(void *)(v6 + swift_weakDestroy(v0 + 16) = v18;
LABEL_13:
    *(void *)uint64_t v14 = a3;
    *(void *)(v14 + 8) = a4;
    *uint64_t v4 = v6;
    return;
  }

void sub_100109C4C(uint64_t a1)
{
}

void sub_100109C60()
{
}

BOOL sub_100109C74(void *a1, int *a2)
{
  return sub_100109024(*a1, *a2);
}

BOOL sub_100109C94(uint64_t *a1, uint64_t *a2)
{
  return sub_100109030(*a1, a1[1], *a2);
}

BOOL sub_100109CBC(uint64_t *a1)
{
  return sub_100109C94(a1, *(uint64_t **)(v1 + 16));
}

BOOL sub_100109CD8(void *a1)
{
  return sub_100109C74(a1, *(int **)(v1 + 16));
}

  ;
}

uint64_t sub_100109D0C()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

void sub_100109D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (v11[32] == 255)
  {
    sub_100014358((uint64_t)&v10, &qword_1001DA8D8);
    v9._object = (void *)0x8000000100173570LL;
    v9._uint64_t countAndFlagsBits = 0xD000000000000017LL;
    SQLiteContext.setError(message:code:)(v9, -1);
  }

  else
  {
    sub_1000EF098((uint64_t)&v10, (uint64_t)v12);
    sub_1000E6350((uint64_t)v12, (uint64_t)v11);
    uint64_t v10 = a4;
    swift_bridgeObjectRetain(a4);
    sub_100109EBC(a1, a2, a3, (uint64_t)&v10);
    sub_1000F46CC((uint64_t)&v10);
    sub_1000E638C(v12);
  }

double sub_100109DF0@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 'I':
      uint64_t v2 = 2LL;
LABEL_15:
      *(void *)uint64_t v4 = v2;
      memset(&v4[8], 0, 32);
      goto LABEL_16;
    case 'U':
      uint64_t v2 = 3LL;
      goto LABEL_15;
    case 'b':
      uint64_t v2 = 8LL;
      goto LABEL_15;
    case 'd':
      uint64_t v2 = 5LL;
      goto LABEL_15;
    case 'u':
      uint64_t v2 = 1LL;
      goto LABEL_15;
    case 't':
      uint64_t v2 = 7LL;
      goto LABEL_15;
  }

  if (a1 != 105)
  {
    *(void *)(a2 + 3sub_1000108B8(v0 + 2) = 0LL;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = 0u;
    *(_BYTE *)(a2 + 4sub_1000E3528(v0, v2, 0) = -1;
    return result;
  }

  memset(v4, 0, sizeof(v4));
LABEL_16:
  char v5 = 2;
  sub_1000EF098((uint64_t)v4, a2);
  return result;
}

uint64_t sub_100109EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100014358((uint64_t)&v5, &qword_1001D8F00);
}

uint64_t sub_10010A1B4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t v6 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v7 = 51LL;
  }

  else
  {
    if (a3 + 56 * a2 <= a1 || a1 + 56 * a2 <= a3)
    {
      sub_10000941C(&qword_1001DA2B8);
      return swift_arrayInitWithCopy(a3);
    }

    uint64_t v6 = "UnsafeMutablePointer.initialize overlapping range";
    uint64_t v7 = 49LL;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v6,  v7,  2LL,  "Swift/UnsafePointer.swift",  25LL);
  __break(1u);
  return result;
}

uint64_t sub_10010A2A8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (a3 + 32 * a2 <= a1 || a1 + 32 * a2 <= a3) {
      return swift_arrayInitWithCopy(a3);
    }
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_10010A378(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (a3 + 24 * a2 <= a1 || a1 + 24 * a2 <= a3) {
      return swift_arrayInitWithCopy(a3);
    }
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_10010A448(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_100019F5C();
    __int128 v5 = "UnsafeMutablePointer.initialize with negative count";
    uint64_t v6 = 51LL;
  }

  else
  {
    if (a3 + 32 * a2 <= a1 || a1 + 32 * a2 <= a3) {
      return swift_arrayInitWithCopy(a3);
    }
    sub_100019F5C();
    __int128 v5 = "UnsafeMutablePointer.initialize overlapping range";
    uint64_t v6 = 49LL;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v5,  v6,  2LL,  "Swift/UnsafePointer.swift",  25LL);
  __break(1u);
  return result;
}

uint64_t sub_10010A4FC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10010A538(uint64_t a1)
{
  return a1;
}

char *sub_10010A56C(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10010A5C0(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

char *sub_10010A588(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10010A6A8(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

void *sub_10010A5A4(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10010A788(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

char *sub_10010A5C0(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000941C(&qword_1001DA8F0);
    int v11 = (char *)swift_allocObject(v10, 56 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_1000108B8(v0 + 2) = v8;
    *((void *)v11 + swift_weakDestroy(v0 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }

  else
  {
    int v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_1001097E8(v14, v8, v13);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_10010A1B4((unint64_t)v14, v8, (unint64_t)v13);
  }

  swift_release();
  return v11;
}

char *sub_10010A6A8(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000941C(&qword_1001D16E0);
    int v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_1000108B8(v0 + 2) = v8;
    *((void *)v11 + swift_weakDestroy(v0 + 3) = 2 * ((uint64_t)(v12 - 32) / 32);
  }

  else
  {
    int v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_1001098FC(v14, v8, v13);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_10010A2A8((unint64_t)v14, v8, (unint64_t)v13);
  }

  swift_release();
  return v11;
}

void *sub_10010A788(void *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000941C(&qword_1001DA8E8);
    int v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    int v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    sub_100109950(v13);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_10010A378(v13, v8, (unint64_t)(v11 + 4));
  }

  swift_release();
  return v11;
}

uint64_t static ProtoFirstOfHelper.getFirst<A>(ofTags:fromData:atTagPath:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v66 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  sub_100014428();
  uint64_t v65 = v10;
  if (qword_1001D7E78 != -1) {
    swift_once(&qword_1001D7E78, sub_10010B648);
  }
  int v11 = (void *)qword_1001DA8F8;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v11 updateData:isa];

  uint64_t v13 = qword_1001DA8F8;
  [(id)qword_1001DA8F8 seekToOffset:0];
  uint64_t v14 = *(void *)(a4 + 16);
  uint64_t v15 = Data.count.getter(a2, a3);
  if (v15 < 0)
  {
LABEL_64:
    sub_10010B710();
    uint64_t result = sub_10006B518( (uint64_t)"Fatal error",  v54,  v55,  (uint64_t)"Negative value is not representable",  v56,  v57,  (uint64_t)"Swift/Integers.swift",  v58,  v59,  v60,  v61);
    __break(1u);
    return result;
  }

  unint64_t v16 = v15;
  if (!v14)
  {
LABEL_40:
    unint64_t v38 = (unint64_t)sub_10005A6B4(v15, "position");
    if ((v38 & 0x8000000000000000LL) == 0 && v38 >= v16)
    {
      uint64_t v21 = 0LL;
      goto LABEL_61;
    }

    uint64_t v64 = *(void *)(a6 + 8);
    unint64_t v62 = sub_10010B678();
    LOBYTE(v21) = 0;
    unsigned int v39 = 0;
    unint64_t v40 = 0LL;
    while (1)
    {
      while (1)
      {
        unint64_t v41 = *(void *)(v13 + OBJC_IVAR___PBDataReader__pos);
        if (v41 == -1LL || v41 >= *(void *)(v13 + OBJC_IVAR___PBDataReader__length))
        {
          char v43 = 0;
          *(_BYTE *)(v13 + OBJC_IVAR___PBDataReader__error) = 1;
        }

        else
        {
          unint64_t v42 = v41 + 1;
          char v43 = *(_BYTE *)(*(void *)(v13 + OBJC_IVAR___PBDataReader__bytes) + v41);
          *(void *)(v13 + OBJC_IVAR___PBDataReader__pos) = v42;
        }

        v40 |= (unint64_t)(v43 & 0x7F) << v21;
        if (v43 < 0) {
          break;
        }
        if (*(_BYTE *)(v13 + OBJC_IVAR___PBDataReader__error)) {
          unint64_t v44 = 0LL;
        }
        else {
          unint64_t v44 = v40;
        }
LABEL_55:
        LODWORD(v69) = v44 >> 3;
        dispatch thunk of BinaryInteger.init<A>(_:)(&v69, &type metadata for UInt32, v62, a5, v64);
        BOOL v45 = IntegerSet.contains(_:)(v65, a1, a5, a6);
        (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, a5);
        if (v45)
        {
          uint64_t v21 = (v44 >> 3);
          goto LABEL_61;
        }

        uint64_t v46 = PBReaderSkipValueWithTag(v13, v44 >> 3, v44 & 7);
        unint64_t v47 = (unint64_t)sub_10005A6B4(v46, "position");
        unsigned int v39 = 0;
        uint64_t v21 = 0LL;
        unint64_t v40 = 0LL;
        if ((v47 & 0x8000000000000000LL) == 0)
        {
          unint64_t v40 = 0LL;
          if (v47 >= v16) {
            goto LABEL_61;
          }
        }
      }

      LOBYTE(v21) = v21 + 7;
      BOOL v28 = v39++ >= 9;
      if (v28)
      {
        unint64_t v44 = 0LL;
        goto LABEL_55;
      }
    }
  }

  uint64_t v17 = 0LL;
  uint64_t v18 = a4 + 32;
  uint64_t v60 = a4 + 32;
  uint64_t v61 = v14;
  while (1)
  {
    uint64_t v63 = v17;
    uint64_t v19 = *(void *)(v18 + 8 * v17);
    unint64_t v20 = (unint64_t)sub_10005A6B4(v15, "position");
    if ((v20 & 0x8000000000000000LL) == 0 && v20 >= v16) {
      break;
    }
    uint64_t v21 = 0LL;
    unsigned int v22 = 0;
    uint64_t v23 = 0LL;
    while (1)
    {
      while (1)
      {
        unint64_t v24 = *(void *)(v13 + OBJC_IVAR___PBDataReader__pos);
        if (v24 == -1LL || v24 >= *(void *)(v13 + OBJC_IVAR___PBDataReader__length))
        {
          char v26 = 0;
          *(_BYTE *)(v13 + OBJC_IVAR___PBDataReader__error) = 1;
        }

        else
        {
          unint64_t v25 = v24 + 1;
          char v26 = *(_BYTE *)(*(void *)(v13 + OBJC_IVAR___PBDataReader__bytes) + v24);
          *(void *)(v13 + OBJC_IVAR___PBDataReader__pos) = v25;
        }

        v23 |= (unint64_t)(v26 & 0x7F) << v21;
        if ((v26 & 0x80) == 0) {
          break;
        }
        v21 += 7LL;
        BOOL v28 = v22++ >= 9;
        if (v28)
        {
          unint64_t v27 = 0LL;
          goto LABEL_20;
        }
      }

      unint64_t v27 = *(_BYTE *)(v13 + OBJC_IVAR___PBDataReader__error) ? 0LL : v23;
LABEL_20:
      uint64_t v29 = PBReaderSkipValueWithTag(v13, v27 >> 3, v27 & 7);
      unint64_t v20 = (unint64_t)sub_10005A6B4(v29, "position");
      unsigned int v22 = 0;
      uint64_t v21 = 0LL;
      uint64_t v23 = 0LL;
      if ((v20 & 0x8000000000000000LL) == 0)
      {
        uint64_t v23 = 0LL;
        if (v20 >= v16) {
          goto LABEL_61;
        }
      }
    }

    if ((v27 & 7) != 2)
    {
      unint64_t v49 = sub_1000E43B4();
      sub_100010EA0((uint64_t)&type metadata for SchemaError, v49);
      uint64_t v51 = v50;
      _StringGuts.grow(_:)(38LL);
      swift_bridgeObjectRelease();
      v52._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
      String.append(_:)(v52);
      uint64_t v53 = swift_bridgeObjectRelease();
      *(void *)uint64_t v51 = 0xD000000000000024LL;
      *(void *)(v51 + 8) = 0x80000001001728C0LL;
      *(_BYTE *)(v51 + 41) = 12;
      swift_willThrow(v53);
      sub_10010B73C((id)qword_1001DA8F8, "updateData:");
      return v21;
    }

    char v30 = 0;
    unsigned int v31 = 0;
    uint64_t v32 = 0LL;
    while (1)
    {
      unint64_t v33 = *(void *)(v13 + OBJC_IVAR___PBDataReader__pos);
      if (v33 == -1LL || v33 >= *(void *)(v13 + OBJC_IVAR___PBDataReader__length))
      {
        char v35 = 0;
        *(_BYTE *)(v13 + OBJC_IVAR___PBDataReader__error) = 1;
      }

      else
      {
        unint64_t v34 = v33 + 1;
        char v35 = *(_BYTE *)(*(void *)(v13 + OBJC_IVAR___PBDataReader__bytes) + v33);
        *(void *)(v13 + OBJC_IVAR___PBDataReader__pos) = v34;
      }

      v32 |= (unint64_t)(v35 & 0x7F) << v30;
      if ((v35 & 0x80) == 0) {
        break;
      }
      v30 += 7;
      if (v31++ > 8)
      {
        uint64_t v37 = 0LL;
        goto LABEL_38;
      }
    }

    if (*(_BYTE *)(v13 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v37 = 0LL;
    }
    else {
      uint64_t v37 = v32;
    }
    if (v37 < 0) {
      goto LABEL_64;
    }
LABEL_38:
    uint64_t v15 = (uint64_t)sub_10005A6B4(v20, "position");
    if (v15 < 0) {
      goto LABEL_64;
    }
    uint64_t v17 = v63 + 1;
    unint64_t v16 = v15 + v37;
    uint64_t v18 = v60;
    if (v63 + 1 == v61) {
      goto LABEL_40;
    }
  }

  uint64_t v21 = 0LL;
LABEL_61:
  sub_10010B73C((id)qword_1001DA8F8, "updateData:");
  return v21;
}

id static ProtoFirstOfHelper.getOneOfValue<A>(ofTags:messageSchema:fromData:atTagPath:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v85 = *(void *)(a6 - 8);
  __chkstk_darwin(a1);
  sub_100014428();
  uint64_t v84 = v13;
  if (qword_1001D7E78 != -1) {
    swift_once(&qword_1001D7E78, sub_10010B648);
  }
  uint64_t v14 = (void *)qword_1001DA8F8;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v14 updateData:isa];

  unint64_t v16 = (_BYTE *)qword_1001DA8F8;
  [(id)qword_1001DA8F8 seekToOffset:0];
  uint64_t v17 = *(void *)(a5 + 16);
  uint64_t v18 = Data.count.getter(a3, a4);
  if (v18 < 0)
  {
LABEL_68:
    sub_10010B710();
    id result = (id)sub_10006B518( (uint64_t)"Fatal error",  v72,  v73,  (uint64_t)"Negative value is not representable",  v74,  v75,  (uint64_t)"Swift/Integers.swift",  v76,  v77,  (uint64_t)a2,  a8);
    __break(1u);
    return result;
  }

  uint64_t v19 = (char *)v18;
  if (v17)
  {
    uint64_t v20 = 0LL;
    uint64_t v21 = a5 + 32;
    uint64_t v82 = v17;
    uint64_t v80 = a5 + 32;
    do
    {
      uint64_t v22 = *(void *)(v21 + 8 * v20);
      unint64_t v23 = (unint64_t)sub_10010B704();
      char v24 = 0;
      unsigned int v25 = 0;
      uint64_t v26 = 0LL;
      while (1)
      {
        while (1)
        {
          unint64_t v27 = *(void *)&v16[OBJC_IVAR___PBDataReader__pos];
          if (v27 == -1LL || v27 >= *(void *)&v16[OBJC_IVAR___PBDataReader__length])
          {
            char v28 = 0;
            v16[OBJC_IVAR___PBDataReader__error] = 1;
          }

          else
          {
            sub_10010B72C();
          }

          v26 |= (unint64_t)(v28 & 0x7F) << v24;
          if ((v28 & 0x80) == 0) {
            break;
          }
          v24 += 7;
          BOOL v30 = v25++ >= 9;
          if (v30)
          {
            unint64_t v29 = 0LL;
            goto LABEL_20;
          }
        }

        unint64_t v29 = v16[OBJC_IVAR___PBDataReader__error] ? 0LL : v26;
LABEL_20:
        int v31 = v29 & 7;
        PBReaderSkipValueWithTag(v16, v29 >> 3, v29 & 7);
        unint64_t v32 = (unint64_t)sub_10010B704();
        unsigned int v25 = 0;
        char v24 = 0;
        uint64_t v26 = 0LL;
        if ((v32 & 0x8000000000000000LL) == 0)
        {
          uint64_t v26 = 0LL;
        }
      }

      if (v31 != 2)
      {
        unint64_t v66 = sub_1000E43B4();
        sub_100010EA0((uint64_t)&type metadata for SchemaError, v66);
        uint64_t v68 = v67;
        _StringGuts.grow(_:)(38LL);
        swift_bridgeObjectRelease();
        *(void *)&__int128 v89 = 0xD000000000000024LL;
        *((void *)&v89 + 1) = 0x80000001001728C0LL;
        LOBYTE(v88[0]) = v31;
        v96._uint64_t countAndFlagsBits = sub_10010B744( (uint64_t)&type metadata for UInt8,  (uint64_t)&protocol witness table for UInt8);
        sub_10010B74C(v96);
        uint64_t v56 = swift_bridgeObjectRelease();
        *(void *)uint64_t v68 = 0xD000000000000024LL;
        *(void *)(v68 + 8) = 0x80000001001728C0LL;
        *(_BYTE *)(v68 + 41) = 12;
        goto LABEL_66;
      }

      char v33 = 0;
      unsigned int v34 = 0;
      uint64_t v35 = 0LL;
      while (1)
      {
        unint64_t v36 = *(void *)&v16[OBJC_IVAR___PBDataReader__pos];
        if (v36 == -1LL || v36 >= *(void *)&v16[OBJC_IVAR___PBDataReader__length])
        {
          char v37 = 0;
          v16[OBJC_IVAR___PBDataReader__error] = 1;
        }

        else
        {
          sub_10010B72C();
        }

        v35 |= (unint64_t)(v37 & 0x7F) << v33;
        if ((v37 & 0x80) == 0) {
          break;
        }
        v33 += 7;
        if (v34++ > 8)
        {
          uint64_t v39 = 0LL;
          goto LABEL_38;
        }
      }

      if (v16[OBJC_IVAR___PBDataReader__error]) {
        uint64_t v39 = 0LL;
      }
      else {
        uint64_t v39 = v35;
      }
      if (v39 < 0) {
        goto LABEL_68;
      }
LABEL_38:
      unint64_t v40 = (unint64_t)sub_10010B704();
      if ((v40 & 0x8000000000000000LL) != 0) {
        goto LABEL_68;
      }
      ++v20;
      uint64_t v19 = (char *)(v40 + v39);
      uint64_t v21 = v80;
    }

    while (v20 != v82);
  }

  unint64_t v41 = (unint64_t)sub_10010B704();
  if ((v41 & 0x8000000000000000LL) == 0 && v41 >= (unint64_t)v19)
  {
LABEL_57:
    *(_WORD *)(a8 + 96) = 0;
    *(_OWORD *)(a8 + 64) = 0u;
    *(_OWORD *)(a8 + 8sub_1000E3528(v0, v2, 0) = 0u;
    *(_OWORD *)(a8 + 3sub_1000108B8(v0 + 2) = 0u;
    *(_OWORD *)(a8 + 48) = 0u;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + swift_weakDestroy(v0 + 16) = 0u;
    return sub_10010B73C((id)qword_1001DA8F8, "updateData:");
  }

  uint64_t v83 = *(void *)(a7 + 8);
  unint64_t v81 = sub_10010B678();
  char v42 = 0;
  unsigned int v43 = 0;
  uint64_t v44 = 0LL;
  while (1)
  {
    while (1)
    {
      unint64_t v45 = *(void *)&v16[OBJC_IVAR___PBDataReader__pos];
      if (v45 == -1LL || v45 >= *(void *)&v16[OBJC_IVAR___PBDataReader__length])
      {
        char v46 = 0;
        v16[OBJC_IVAR___PBDataReader__error] = 1;
      }

      else
      {
        sub_10010B72C();
      }

      v44 |= (unint64_t)(v46 & 0x7F) << v42;
      if ((v46 & 0x80) == 0) {
        break;
      }
      v42 += 7;
      BOOL v30 = v43++ >= 9;
      if (v30)
      {
        unint64_t v47 = 0LL;
        goto LABEL_54;
      }
    }

    unint64_t v47 = v16[OBJC_IVAR___PBDataReader__error] ? 0LL : v44;
LABEL_54:
    char v48 = v47 & 7;
    LODWORD(v89) = v47 >> 3;
    dispatch thunk of BinaryInteger.init<A>(_:)(&v89, &type metadata for UInt32, v81, a6, v83);
    BOOL v49 = IntegerSet.contains(_:)(v84, a1, a6, a7);
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v84, a6);
    if (v49) {
      break;
    }
    PBReaderSkipValueWithTag(v16, v47 >> 3, v47 & 7);
    unint64_t v50 = (unint64_t)[v16 position];
    unsigned int v43 = 0;
    char v42 = 0;
    uint64_t v44 = 0LL;
    if ((v50 & 0x8000000000000000LL) == 0)
    {
      uint64_t v44 = 0LL;
    }
  }

  char v52 = sub_1000F0300(v47 & 7);
  if (v52 == 6)
  {
    unint64_t v53 = sub_1000E43B4();
    sub_100010EA0((uint64_t)&type metadata for SchemaError, v53);
    uint64_t v55 = v54;
    *(void *)&__int128 v89 = 0LL;
    *((void *)&v89 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(21LL);
    swift_bridgeObjectRelease();
    *(void *)&__int128 v89 = 0xD000000000000013LL;
    *((void *)&v89 + 1) = 0x8000000100172C20LL;
    LOBYTE(v88[0]) = v48;
    v95._uint64_t countAndFlagsBits = sub_10010B744( (uint64_t)&type metadata for UInt8,  (uint64_t)&protocol witness table for UInt8);
    sub_10010B74C(v95);
    uint64_t v56 = swift_bridgeObjectRelease();
    uint64_t v57 = *((void *)&v89 + 1);
    *(void *)uint64_t v55 = v89;
    *(void *)(v55 + 8) = v57;
    char v58 = 12;
    goto LABEL_61;
  }

  char v59 = v52;
  uint64_t v60 = a2[3];
  uint64_t v61 = a2[4];
  sub_100019AFC(a2, v60);
  uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 40))(v60, v61);
  if (!v8)
  {
    uint64_t v63 = (v47 >> 3);
    sub_1000FB63C(v63, v62, (uint64_t)&v89);
    swift_bridgeObjectRelease();
    if (v90)
    {
      sub_100019BC4(&v89, (uint64_t)v92);
      sub_100019B20((uint64_t)v92, (uint64_t)v91);
      uint64_t v64 = v93;
      uint64_t v65 = v94;
      sub_100019AFC(v92, v93);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v65 + 40))(v88, v64, v65);
      sub_1000F034C(qword_1001DA8F8, v59, (uint64_t)&v89);
      sub_1000E638C(v88);
      sub_100019BC4(v91, a8);
      sub_1000F4798((uint64_t)&v89, a8 + 40);
      sub_1000108B8(v92);
      return sub_10010B73C((id)qword_1001DA8F8, "updateData:");
    }

    sub_10010B6B4((uint64_t)&v89);
    unint64_t v69 = sub_1000E43B4();
    sub_100010EA0((uint64_t)&type metadata for SchemaError, v69);
    uint64_t v55 = v70;
    *(void *)&__int128 v89 = 0x6761742068746957LL;
    *((void *)&v89 + 1) = 0xE900000000000020LL;
    v88[0] = v63;
    v97._uint64_t countAndFlagsBits = sub_10010B744((uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
    sub_10010B74C(v97);
    uint64_t v56 = swift_bridgeObjectRelease();
    uint64_t v71 = *((void *)&v89 + 1);
    *(void *)uint64_t v55 = v89;
    *(void *)(v55 + 8) = v71;
    char v58 = 4;
LABEL_61:
    *(_BYTE *)(v55 + 41) = v58;
LABEL_66:
    swift_willThrow(v56);
  }

  return sub_10010B73C((id)qword_1001DA8F8, "updateData:");
}

id sub_10010B648()
{
  id result = [objc_allocWithZone(PBDataReader) init];
  qword_1001DA8F8 = (uint64_t)result;
  return result;
}

unint64_t sub_10010B678()
{
  unint64_t result = qword_1001DA900;
  if (!qword_1001DA900)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(result, (unint64_t *)&qword_1001DA900);
  }

  return result;
}

uint64_t sub_10010B6B4(uint64_t a1)
{
  uint64_t v2 = sub_10000941C(&qword_1001D8AF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for ProtoFirstOfHelper()
{
  return &type metadata for ProtoFirstOfHelper;
}

id sub_10010B704()
{
  return [v1 *(SEL *)(v0 + 3296)];
}

  ;
}

void sub_10010B72C()
{
  *(void *)(v2 + vsub_1000E3528(v0, v2, 0) = v1;
}

id sub_10010B73C(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, 0);
}

uint64_t sub_10010B744(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of CustomStringConvertible.description.getter(a1, a2);
}

void sub_10010B74C(Swift::String a1)
{
}

void sub_10010B754()
{
  qword_1001EDEF0 = -1LL;
}

uint64_t sub_10010B764()
{
  uint64_t v0 = type metadata accessor for CharacterSet(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v10 - v6;
  sub_10001C180(v5, qword_1001EDEF8);
  sub_1000093D0(v0, (uint64_t)qword_1001EDEF8);
  static CharacterSet.alphanumerics.getter();
  CharacterSet.init(charactersIn:)(95LL, 0xE100000000000000LL);
  CharacterSet.union(_:)(v4);
  uint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  return ((uint64_t (*)(char *, uint64_t))v8)(v7, v0);
}

void *sub_10010B844(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xC0uLL);
}

uint64_t sub_10010B84C(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 192))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(vswift_weakDestroy(v0 + 3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10010B8A0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 184) = 0LL;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 15sub_1000108B8(v0 + 2) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12sub_1000E3528(v0, v2, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7sub_1000108B8(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4sub_1000E3528(v0, v2, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 19sub_1000108B8(v0 + 2) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 19sub_1000108B8(v0 + 2) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

void type metadata accessor for sqlite3_module(uint64_t a1)
{
}

void type metadata accessor for sqlite3_vtab_cursor(uint64_t a1)
{
}

void *sub_10010B94C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t sub_10010B954(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10010B974(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 88) = 0LL;
    *(_OWORD *)(result + 7sub_1000108B8(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4sub_1000E3528(v0, v2, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 96) = v3;
  return result;
}

void type metadata accessor for sqlite3_index_info(uint64_t a1)
{
}

uint64_t sub_10010B9CC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10010B9EC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for sqlite3_vtab(uint64_t a1)
{
}

void *sub_10010BA2C(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

void type metadata accessor for sqlite3_index_constraint_usage(uint64_t a1)
{
}

uint64_t sub_10010BA4C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10010BA6C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 8) = v3;
  return result;
}

void type metadata accessor for sqlite3_index_orderby(uint64_t a1)
{
}

uint64_t sub_10010BAA8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t result = v2;
  return result;
}

void type metadata accessor for sqlite3_index_constraint(uint64_t a1)
{
}

void SQLiteBaseFunction.database.setter()
{
}

sqlite3_stmt *Bool.init(with:column:)()
{
  unint64_t result = (sqlite3_stmt *)sub_10010BF6C();
  if (v0)
  {
    sub_10001683C();
    return (sqlite3_stmt *)v3;
  }

  if (v1 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if (v1 <= 0x7FFFFFFF)
  {
    int v4 = sqlite3_column_int(result, v1);
    sub_10001683C();
    return (sqlite3_stmt *)(v4 != 0);
  }

  __break(1u);
  return result;
}

void sub_10010BB5C(_BYTE *a1@<X8>)
{
  unsigned __int8 v3 = Bool.init(with:column:)();
  if (!v1) {
    *a1 = v3 & 1;
  }
  sub_10010BF78();
}

sqlite3_stmt *Float.init(with:column:)()
{
  unint64_t result = (sqlite3_stmt *)sub_10010BF6C();
  if (v0) {
    return (sqlite3_stmt *)sub_10001683C();
  }
  if (v1 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if (v1 <= 0x7FFFFFFF)
  {
    sqlite3_column_double(result, v1);
    return (sqlite3_stmt *)sub_10001683C();
  }

  __break(1u);
  return result;
}

void sub_10010BBF8(_DWORD *a1@<X8>)
{
  if (!v1) {
    *a1 = v3;
  }
  sub_10010BF78();
}

sqlite3_stmt *Double.init(with:column:)()
{
  unint64_t result = (sqlite3_stmt *)sub_10010BF6C();
  if (v0) {
    return (sqlite3_stmt *)sub_10001683C();
  }
  if (v1 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if (v1 <= 0x7FFFFFFF)
  {
    sqlite3_column_double(result, v1);
    return (sqlite3_stmt *)sub_10001683C();
  }

  __break(1u);
  return result;
}

void sub_10010BC88(void *a1@<X8>)
{
  if (!v1) {
    *a1 = v3;
  }
  sub_10010BF78();
}

uint64_t RawRepresentable<>.init(with:column:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v39 = a1;
  uint64_t v35 = a5;
  uint64_t v8 = type metadata accessor for Optional(0LL, a2);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  int v11 = (char *)&v34 - v10;
  uint64_t v36 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a3,  a2,  &protocol requirements base descriptor for RawRepresentable,  &associated type descriptor for RawRepresentable.RawValue);
  uint64_t v38 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v34 - v16;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 8);
  uint64_t v19 = swift_retain();
  char v37 = v17;
  uint64_t v20 = v42;
  uint64_t v42 = AssociatedTypeWitness;
  v18(v19, v39, AssociatedTypeWitness, a4);
  if (v20) {
    return swift_release();
  }
  uint64_t v22 = v8;
  uint64_t v23 = v35;
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v15, v37, v42);
  dispatch thunk of RawRepresentable.init(rawValue:)(v15, a2, v36);
  if (sub_100010708((uint64_t)v11, 1LL, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v22);
    uint64_t v40 = 0LL;
    unint64_t v41 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(45LL);
    v24._object = (void *)0x80000001001735F0LL;
    v24._uint64_t countAndFlagsBits = 0xD000000000000011LL;
    String.append(_:)(v24);
    v25._uint64_t countAndFlagsBits = _typeName(_:qualified:)(a2, 0LL);
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 0xD000000000000018LL;
    v26._object = (void *)0x8000000100173610LL;
    String.append(_:)(v26);
    unint64_t v27 = v37;
    uint64_t v28 = v42;
    DefaultStringInterpolation.appendInterpolation<A>(_:)(v37, v42);
    uint64_t v29 = v40;
    unint64_t v30 = v41;
    unint64_t v31 = sub_1000E4274();
    uint64_t v32 = swift_allocError(&type metadata for SQLiteError, v31, 0LL, 0LL);
    *(void *)uint64_t v33 = v29;
    *(void *)(v33 + 8) = v30;
    *(void *)(v33 + swift_weakDestroy(v0 + 16) = 0LL;
    *(_BYTE *)(v33 + 24) = 3;
    swift_willThrow(v32);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v27, v28);
  }

  else
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v42);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a2 - 8) + 32LL))(v23, v11, a2);
  }

uint64_t sub_10010BF6C()
{
  return sub_10011B510();
}

  ;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteRow.getColumnCount()()
{
  Swift::Int result = sub_10011B510();
  if (!v0) {
    return sqlite3_column_count((sqlite3_stmt *)result);
  }
  return result;
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteRow.columnName(for:)( Swift::Int a1)
{
  uint64_t v3 = (sqlite3_stmt *)sub_10010C778();
  if (!v1)
  {
    if (v2 < (uint64_t)0xFFFFFFFF80000000LL)
    {
      __break(1u);
    }

    else if (v2 <= 0x7FFFFFFF)
    {
      uint64_t v3 = (sqlite3_stmt *)sqlite3_column_name(v3, v2);
      if (v3) {
        uint64_t v3 = (sqlite3_stmt *)String.init(cString:)(v3);
      }
      else {
        int v4 = 0LL;
      }
      goto LABEL_10;
    }

    __break(1u);
  }

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteRow.columnIndex(for:)( Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v5 = (sqlite3_stmt *)sub_10011B510();
  if (v1) {
    return v2;
  }
  Swift::Int result = sqlite3_column_count(v5);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v7 = (int)result;
    if ((_DWORD)result)
    {
      Swift::Int v2 = 0LL;
      while (v7 != v2)
      {
        uint64_t v8 = (sqlite3_stmt *)sub_10011B510();
        Swift::Int result = (Swift::Int)sqlite3_column_name(v8, v2);
        if (result)
        {
          uint64_t v9 = String.init(cString:)(result);
          if (v9 == countAndFlagsBits && v10 == object)
          {
            swift_bridgeObjectRelease();
            return v2;
          }

          char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, v9, v10, 0LL);
          Swift::Int result = swift_bridgeObjectRelease();
          if ((v12 & 1) != 0) {
            return v2;
          }
        }

        if (v7 == ++v2) {
          goto LABEL_13;
        }
      }

      __break(1u);
      goto LABEL_17;
    }

SQLiter::SQLiteDataType __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteRow.type(at:)( Swift::Int at)
{
  uint64_t v3 = (sqlite3_stmt *)sub_10010C778();
  if (v1) {
    return (char)v3;
  }
  if (v2 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (v2 > 0x7FFFFFFF)
  {
LABEL_8:
    __break(1u);
    return (char)v3;
  }

  Swift::Int32 v4 = sqlite3_column_type(v3, v2);
  LOBYTE(vswift_weakDestroy(v0 + 3) = SQLiteDataType.init(rawValue:)(v4);
  if (v3 == 5)
  {
    _StringGuts.grow(_:)(21LL);
    swift_bridgeObjectRelease();
    v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    unint64_t v6 = sub_1000E4274();
    uint64_t v7 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v6);
    *(void *)uint64_t v8 = 0xD000000000000013LL;
    *(void *)(v8 + 8) = 0x8000000100173630LL;
    *(void *)(v8 + swift_weakDestroy(v0 + 16) = 0LL;
    *(_BYTE *)(v8 + 24) = 3;
    LOBYTE(vswift_weakDestroy(v0 + 3) = swift_willThrow(v7);
  }

  return (char)v3;
}

SQLiter::SQLiteDataType __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteRow.type(for:)( Swift::String a1)
{
  Swift::Int v1 = SQLiteRow.columnIndex(for:)(a1);
  if (!v2) {
    LOBYTE(swift_initStackObject(v0, v1) = SQLiteRow.type(at:)(v1);
  }
  return (char)v1;
}

void SQLiteRow.get<A>(at:type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10010C298(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void SQLiteRow.get<A>(from:type:)(uint64_t a1, uint64_t a2)
{
}

void sub_10010C2F8(uint64_t a1, uint64_t a2)
{
  Swift::Int v2 = SQLiteRow.columnIndex(for:)(*(Swift::String *)&a1);
  if (!v3)
  {
    uint64_t v4 = v2;
    uint64_t v5 = swift_retain();
    sub_10010C76C(v5, v4);
  }

  sub_10010C740();
}

void SQLiteRow.getNonNull<A>(at:type:)(Swift::Int a1, uint64_t a2, uint64_t a3)
{
  SQLiter::SQLiteDataType v5 = SQLiteRow.type(at:)(a1);
  if (!v7)
  {
    if (v5 == SQLiter_SQLiteDataType_null)
    {
      unint64_t v8 = sub_1000E4274();
      uint64_t v9 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v8);
      sub_10010C750(v9, v10);
    }

    else
    {
      SQLiteRow.get<A>(at:type:)(a1, v6, a3);
    }
  }

  sub_10010C740();
}

void SQLiteRow.getNonNull<A>(at:type:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v9 = type metadata accessor for Optional(0LL, a3);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v17 - v11;
  SQLiteRow.get<A>(at:type:)(a1, v13, a2);
  if (!v4)
  {
    if (sub_100010708((uint64_t)v12, 1LL, a3) == 1)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      unint64_t v14 = sub_1000E4274();
      uint64_t v15 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v14);
      sub_10010C750(v15, v16);
    }

    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(a3 - 8) + 32LL))(a4, v12, a3);
    }
  }

Swift::Int SQLiteRow.getNonNull<A>(from:type:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10010C5F4(a1, a2, a3, a4, a5, a6, (uint64_t (*)(Swift::Int))SQLiteRow.getNonNull<A>(at:type:));
}

{
  return sub_10010C5F4(a1, a2, a3, a4, a5, a6, (uint64_t (*)(Swift::Int))SQLiteRow.getNonNull<A>(at:type:));
}

uint64_t SQLiteRow.getNullable<A>(at:type:)@<X0>( Swift::Int a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t result = SQLiteRow.type(at:)(a1);
  if (!v9)
  {
    if (result == 4)
    {
      uint64_t v10 = a4;
      uint64_t v11 = 1LL;
    }

    else
    {
      char v12 = *(void (**)(uint64_t, Swift::Int, uint64_t, uint64_t))(a3 + 8);
      uint64_t v13 = swift_retain();
      v12(v13, a1, a2, a3);
      uint64_t v10 = a4;
      uint64_t v11 = 0LL;
    }

    return sub_100009654(v10, v11, 1LL, a2);
  }

  return result;
}

Swift::Int SQLiteRow.getNullable<A>(from:type:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10010C5F4(a1, a2, a3, a4, a5, a6, (uint64_t (*)(Swift::Int))SQLiteRow.getNullable<A>(at:type:));
}

Swift::Int sub_10010C5F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(Swift::Int))
{
  Swift::Int result = SQLiteRow.columnIndex(for:)(*(Swift::String *)&a1);
  if (!v9) {
    return a7(result);
  }
  return result;
}

uint64_t SQLiteRow.forEachColumn(_:)(void (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = sub_10011B510();
  if (!v1)
  {
    uint64_t result = sqlite3_column_count((sqlite3_stmt *)result);
    if ((result & 0x80000000) == 0)
    {
      uint64_t v4 = (int)result;
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v5 = 0LL;
      while (v4 != v5)
      {
        uint64_t v6 = (sqlite3_stmt *)sub_10011B510();
        uint64_t result = (uint64_t)sqlite3_column_name(v6, v5);
        if (result)
        {
          uint64_t v7 = String.init(cString:)(result);
          a1(v5, v7, v8);
          uint64_t result = swift_bridgeObjectRelease();
        }

        if (v4 == ++v5) {
          return result;
        }
      }

      __break(1u);
    }

    __break(1u);
  }

  return result;
}

ValueMetadata *type metadata accessor for SQLiteRow()
{
  return &type metadata for SQLiteRow;
}

  ;
}

uint64_t sub_10010C750(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)a2 = 6LL;
  *(_BYTE *)(a2 + 24) = 4;
  return swift_willThrow();
}

uint64_t sub_10010C76C(uint64_t a1, uint64_t a2)
{
  return v4(a1, a2, v3, v2);
}

uint64_t sub_10010C778()
{
  return sub_10011B510();
}

char *SQLiteUndefined.sqlColumnType.unsafeMutableAddressor()
{
  return &static SQLiteUndefined.sqlColumnType;
}

void static SQLiteUndefined.sqlColumnType.getter()
{
}

void static SQLiteUndefined.sqlColumnType.setter(char a1)
{
  static SQLiteUndefined.sqlColumnType = a1;
  sub_10004ECC0();
}

uint64_t (*static SQLiteUndefined.sqlColumnType.modify(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

char *SQLiteUndefined.sqlNullable.unsafeMutableAddressor()
{
  return &static SQLiteUndefined.sqlNullable;
}

void static SQLiteUndefined.sqlNullable.getter()
{
}

void static SQLiteUndefined.sqlNullable.setter(char a1)
{
  static SQLiteUndefined.sqlNullable = a1;
  sub_10004ECC0();
}

uint64_t (*static SQLiteUndefined.sqlNullable.modify(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

SQLiter::SQLiteDataType __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteUndefined.getSQLDataType()()
{
  unint64_t v0 = sub_1000E4274();
  sub_100010EA0((uint64_t)&type metadata for SQLiteError, v0);
  return sub_10010CBFC(v1, 0xD00000000000003ALL);
}

double SQLiteUndefined.unwrapIfOptional()@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 3sub_1000108B8(v0 + 2) = 0LL;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = 0u;
  return result;
}

uint64_t static SQLiteUndefined.create(from:at:nullable:)()
{
  unint64_t v0 = sub_1000E4274();
  sub_100010EA0((uint64_t)&type metadata for SQLiteError, v0);
  return sub_10010CBFC(v1, 0xD000000000000024LL);
}

uint64_t SQLiteUndefined.bind(to:at:)()
{
  unint64_t v0 = sub_1000E4274();
  sub_100010EA0((uint64_t)&type metadata for SQLiteError, v0);
  return sub_10010CBFC(v1, 0xD00000000000002FLL);
}

unint64_t static SQLiteUndefined.create(from:)@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for SQLiteUndefined;
  unint64_t result = sub_1000F5AD0();
  *(void *)(a1 + 3sub_1000108B8(v0 + 2) = result;
  return result;
}

Swift::Int SQLiteUndefined.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t sub_10010CA40()
{
  return static SQLiteUndefined.sqlColumnType;
}

uint64_t sub_10010CA80()
{
  return static SQLiteUndefined.sqlNullable;
}

uint64_t sub_10010CAC0()
{
  return SQLiteUndefined.getSQLDataType()();
}

uint64_t sub_10010CAD8()
{
  return static SQLiteUndefined.create(from:at:nullable:)();
}

unint64_t sub_10010CAF0@<X0>(uint64_t a1@<X8>)
{
  return static SQLiteUndefined.create(from:)(a1);
}

uint64_t sub_10010CB04()
{
  return SQLiteUndefined.bind(to:at:)();
}

Swift::Int sub_10010CB1C(uint64_t a1)
{
  return Hasher._finalize()();
}

unint64_t sub_10010CB4C(uint64_t a1)
{
  unint64_t result = sub_10010CB70();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_10010CB70()
{
  unint64_t result = qword_1001DA960;
  if (!qword_1001DA960)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SQLiteUndefined,  &type metadata for SQLiteUndefined);
    atomic_store(result, (unint64_t *)&qword_1001DA960);
  }

  return result;
}

unint64_t sub_10010CBB0()
{
  unint64_t result = qword_1001DA968;
  if (!qword_1001DA968)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SQLiteUndefined,  &type metadata for SQLiteUndefined);
    atomic_store(result, (unint64_t *)&qword_1001DA968);
  }

  return result;
}

ValueMetadata *type metadata accessor for SQLiteUndefined()
{
  return &type metadata for SQLiteUndefined;
}

uint64_t sub_10010CBFC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = (v2 - 32) | 0x8000000000000000LL;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 3;
  return swift_willThrow();
}

uint64_t static SQLiteError.__derived_enum_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  return ((uint64_t (*)(void))((char *)sub_10010CC38 + 4 * byte_100165E88[a4]))();
}

uint64_t sub_10010CC38(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a8 || a1 != a5) {
    return 0LL;
  }
  if (a2 == a6 && a3 == a7) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, a6, a7, 0LL);
  }
}

uint64_t sub_10010CE40(uint64_t a1)
{
  return static SQLiteError.__derived_enum_equals(_:_:)( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(_BYTE *)(a1 + 24));
}

uint64_t sub_10010CE64(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 0:
      goto LABEL_3;
    case 1:
    case 2:
    case 3:
      a3 = a2;
LABEL_3:
      uint64_t result = swift_bridgeObjectRetain(a3);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t destroy for SQLiteError(uint64_t a1)
{
  return sub_10010CEB0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_10010CEB0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 0:
      goto LABEL_3;
    case 1:
    case 2:
    case 3:
      a3 = a2;
LABEL_3:
      uint64_t result = swift_bridgeObjectRelease(a3);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t initializeWithCopy for SQLiteError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  sub_10010CE64(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for SQLiteError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  sub_10010CE64(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  char v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_10010CEB0(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for SQLiteError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  char v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_10010CEB0(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLiteError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFC && *(_BYTE *)(a1 + 25))
    {
      int v2 = *(_DWORD *)a1 + 251;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 4) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLiteError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 24) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10010D084(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_10010D09C(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 4;
  if (a2 >= 4)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    LOBYTE(asub_1000108B8(v0 + 2) = 4;
    *(void *)uint64_t result = v2;
  }

  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SQLiteError()
{
  return &type metadata for SQLiteError;
}

uint64_t static SQLiteVTabColumnSchema.allHidden.getter(uint64_t a1, uint64_t a2)
{
  return sub_10010D134(a1, a2, (uint64_t)&unk_100165F10, (uint64_t)sub_10010DBDC);
}

uint64_t sub_10010D0DC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2 + a1 - 8) + 32LL))(*(void *)(a2 + a1 - 16));
  *a3 = result & 1;
  return result;
}

uint64_t static SQLiteVTabColumnSchema.allVisible.getter(uint64_t a1, uint64_t a2)
{
  return sub_10010D134(a1, a2, (uint64_t)&unk_100165F40, (uint64_t)sub_10010D24C);
}

uint64_t sub_10010D134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[4] = v15;
  v14[0] = a1;
  v14[1] = a2;
  uint64_t KeyPath = swift_getKeyPath(a3, v14);
  v13[2] = a2;
  v13[3] = KeyPath;
  uint64_t v9 = type metadata accessor for Array(0LL, a1);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v9);
  uint64_t v11 = _ArrayProtocol.filter(_:)(a4, v13, v9, WitnessTable);
  swift_release(KeyPath);
  return v11;
}

BOOL SQLiteVTabColumnSchema.visible.getter(uint64_t a1, uint64_t a2)
{
  return ((*(uint64_t (**)(void))(a2 + 32))() & 1) == 0;
}

BOOL sub_10010D20C@<W0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  BOOL result = SQLiteVTabColumnSchema.visible.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_10010D24C(uint64_t a1)
{
  return var1;
}

uint64_t SQLiteVTab.getConnectionClass()(uint64_t a1)
{
  return sub_10010DBF4( a1,  *(void *)(*(void *)v1 + 344LL),  *(void *)(*(void *)v1 + 336LL),  (uint64_t)&protocol requirements base descriptor for SQLiteVTabConfig,  (uint64_t)&associated type descriptor for SQLiteVTabConfig.Connection);
}

uint64_t SQLiteVTab.__allocating_init(style:)(char a1)
{
  return SQLiteBaseVTab.init(style:)(a1);
}

uint64_t SQLiteVTab.__deallocating_deinit()
{
  uint64_t v0 = SQLiteBaseVTab.deinit();
  return swift_deallocClassInstance(v0, 41LL, 7LL);
}

void static SQLiteVTab.getTable(forConnection:)(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  sub_10010DBFC(a1);
  uint64_t Strong = swift_weakLoadStrong(v2);
  if (!Strong) {
    goto LABEL_4;
  }
  if (!swift_dynamicCastClass(Strong, v1))
  {
    sub_10001443C();
LABEL_4:
    unint64_t v4 = sub_10010D364();
    sub_100010EA0((uint64_t)&type metadata for SQLiteVTabError, v4);
    *(_DWORD *)uint64_t v5 = 0;
    *(_BYTE *)(v5 + 4) = 1;
    sub_1000C5DB8();
  }

  sub_10010DC34();
}

unint64_t sub_10010D364()
{
  unint64_t result = qword_1001DA970[0];
  if (!qword_1001DA970[0])
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SQLiteVTabError,  &type metadata for SQLiteVTabError);
    atomic_store(result, qword_1001DA970);
  }

  return result;
}

void static SQLiteVTab.getConnection(forCursor:)(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  sub_10010DBFC(a1);
  uint64_t Strong = swift_weakLoadStrong(v2);
  if (!Strong) {
    goto LABEL_4;
  }
  uint64_t v4 = Strong;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v1 + 344),  *(void *)(v1 + 336),  &protocol requirements base descriptor for SQLiteVTabConfig,  &associated type descriptor for SQLiteVTabConfig.Connection);
  if (!swift_dynamicCastClass(v4, AssociatedTypeWitness))
  {
    sub_10001443C();
LABEL_4:
    unint64_t v6 = sub_10010D364();
    sub_100010EA0((uint64_t)&type metadata for SQLiteVTabError, v6);
    *(_DWORD *)uint64_t v7 = 1;
    *(_BYTE *)(v7 + 4) = 1;
    sub_1000C5DB8();
  }

  sub_10010DC34();
}

void static SQLiteVTab.getTable(forCursor:)(uint64_t a1)
{
  if (!v1)
  {
    static SQLiteVTab.getTable(forConnection:)(v2);
    sub_10001443C();
  }

  sub_10010DC1C();
}

uint64_t SQLiteVTab.BaseConnection.getCursorClass()(uint64_t a1)
{
  return sub_10010DBF4( a1,  *(void *)(*(void *)v1 + 184LL),  *(void *)(*(void *)v1 + 176LL),  (uint64_t)&protocol requirements base descriptor for SQLiteVTabConfig,  (uint64_t)&associated type descriptor for SQLiteVTabConfig.Cursor);
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteVTab.BaseConnection.getTableSchema()()
{
  uint64_t v2 = *(void *)(*(void *)v0 + 176LL);
  uint64_t v1 = *(void *)(*(void *)v0 + 184LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v1,  v2,  &protocol requirements base descriptor for SQLiteVTabConfig,  &associated type descriptor for SQLiteVTabConfig.ColumnSchema);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness);
  dispatch thunk of static CaseIterable.allCases.getter( &v18,  AssociatedTypeWitness,  *(void *)(AssociatedConformanceWitness + 16));
  uint64_t v17[5] = v18;
  v17[2] = v2;
  uint64_t v17[3] = v1;
  uint64_t v5 = type metadata accessor for Array(0LL, AssociatedTypeWitness);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v5);
  uint64_t v8 = sub_100119604( (void (*)(char *, uint64_t))sub_10010DBC0,  (uint64_t)v17,  v5,  (uint64_t)&type metadata for String,  (uint64_t)&type metadata for Never,  WitnessTable,  (uint64_t)&protocol witness table for Never,  v7);
  swift_bridgeObjectRelease();
  uint64_t v18 = v8;
  uint64_t v9 = sub_10000941C(&qword_1001D1460);
  unint64_t v10 = sub_1000152B0();
  uint64_t v11 = BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v9, v10);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = v11;
  uint64_t v15 = v13;
  result._object = v15;
  result._uint64_t countAndFlagsBits = v14;
  return result;
}

uint64_t sub_10010D5E4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v19 = 0LL;
  unint64_t v20 = 0xE000000000000000LL;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  a2,  a1,  &protocol requirements base descriptor for SQLiteVTabConfig,  &associated type descriptor for SQLiteVTabConfig.ColumnSchema);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness);
  dispatch thunk of RawRepresentable.rawValue.getter( &v18,  AssociatedTypeWitness,  *(void *)(AssociatedConformanceWitness + 24));
  object = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(object);
  v9._uint64_t countAndFlagsBits = 32LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  (*(void (**)(uint64_t))(*(void *)(AssociatedConformanceWitness + 8) + 24LL))(AssociatedTypeWitness);
  LOBYTE(v18._countAndFlagsBits) = (*(uint64_t (**)(void))(v10 + 24))();
  _print_unlocked<A, B>(_:_:)( &v18,  &v19,  &type metadata for SQLiteColumnType,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  char v11 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))( AssociatedTypeWitness,  AssociatedConformanceWitness);
  BOOL v12 = (v11 & 1) == 0;
  if ((v11 & 1) != 0) {
    uint64_t v13 = 0x4E454444494820LL;
  }
  else {
    uint64_t v13 = 0LL;
  }
  if (v12) {
    unint64_t v14 = 0xE000000000000000LL;
  }
  else {
    unint64_t v14 = 0xE700000000000000LL;
  }
  unint64_t v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  uint64_t result = swift_bridgeObjectRelease(v14);
  unint64_t v17 = v20;
  *a3 = v19;
  a3[1] = v17;
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteVTab.BaseConnection.columnName(atIndex:)( Swift::Int32 atIndex)
{
  uint64_t v4 = *(void *)(*(void *)v1 + 176LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 184LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v3,  v4,  &protocol requirements base descriptor for SQLiteVTabConfig,  &associated type descriptor for SQLiteVTabConfig.ColumnSchema);
  uint64_t v6 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v7 = *(void (***)(char *, uint64_t))(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v23 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v23 - v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, v4, AssociatedTypeWitness);
  uint64_t v15 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t v16 = AssociatedTypeWitness;
  SQLiteColumnDescribing<>.init(index:)( atIndex,  AssociatedTypeWitness,  *(void *)(AssociatedConformanceWitness + 16),  (uint64_t)v10);
  if (sub_100010708((uint64_t)v10, 1LL, AssociatedTypeWitness) == 1)
  {
    v7[1](v10, v6);
    unint64_t v17 = sub_10010D364();
    sub_100010EA0((uint64_t)&type metadata for SQLiteVTabError, v17);
    *(_DWORD *)uint64_t v18 = atIndex;
    *(_BYTE *)(v18 + 4) = 0;
    sub_1000C5DB8();
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, AssociatedTypeWitness);
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 32))(AssociatedTypeWitness, v15);
    uint64_t v7 = v19;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  }

  uint64_t v20 = v16;
  uint64_t v21 = v7;
  result._object = v21;
  result._uint64_t countAndFlagsBits = v20;
  return result;
}

uint64_t SQLiteVTab.BaseConnection.__allocating_init(_:argc:argv:)(uint64_t a1, int a2, uint64_t a3)
{
  return SQLiteBaseVTab.Connection.init(_:argc:argv:)(a1, a2, a3);
}

uint64_t SQLiteVTab.BaseConnection.init(_:argc:argv:)(uint64_t a1, int a2, uint64_t a3)
{
  return SQLiteBaseVTab.Connection.init(_:argc:argv:)(a1, a2, a3);
}

uint64_t SQLiteBaseVTab.Connection.deinit()
{
  return v0;
}

uint64_t SQLiteVTab.BaseConnection.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

void SQLiteVTab.BaseCursor.__allocating_init(_:)(uint64_t a1)
{
}

uint64_t SQLiteVTab.BaseCursor.init(_:)(uint64_t a1)
{
  return SQLiteBaseVTab.Cursor.init(_:)(a1);
}

uint64_t SQLiteBaseVTab.Cursor.deinit()
{
  return v0;
}

uint64_t SQLiteBaseVTab.Cursor.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t initializeBufferWithCopyOfBuffer for SQLiteVTabError(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)Swift::String result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SQLiteVTabError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for SQLiteVTabError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)Swift::String result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 5) = v3;
  return result;
}

uint64_t sub_10010DAB4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10010DAD0(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)Swift::String result = a2 - 1;
    char v2 = 1;
  }

  else
  {
    char v2 = 0;
  }

  *(_BYTE *)(result + 4) = v2;
  return result;
}

ValueMetadata *type metadata accessor for SQLiteVTabError()
{
  return &type metadata for SQLiteVTabError;
}

uint64_t sub_10010DB00(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + 352);
}

uint64_t type metadata accessor for SQLiteVTab(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SQLiteVTab);
}

uint64_t sub_10010DB40(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + 192);
}

uint64_t type metadata accessor for SQLiteVTab.BaseConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SQLiteVTab.BaseConnection);
}

uint64_t sub_10010DB80(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + 216);
}

uint64_t type metadata accessor for SQLiteVTab.BaseCursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SQLiteVTab.BaseCursor);
}

uint64_t sub_10010DBC0@<X0>(void *a1@<X8>)
{
  return sub_10010D5E4(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_10010DBDC(uint64_t a1)
{
  return sub_10010D24C(a1) & 1;
}

uint64_t sub_10010DBF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_getAssociatedTypeWitness(0LL, a2, a3, a4, a5);
}

uint64_t sub_10010DBFC(uint64_t a1, ...)
{
  return swift_beginAccess(v1, va, 0LL, 0LL);
}

__n128 sub_10010DC10(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

  ;
}

uint64_t sub_10010DC28()
{
  return 16LL;
}

  ;
}

uint64_t sub_10010DC40()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C180(v0, qword_1001EDF10);
  sub_1000093D0(v0, (uint64_t)qword_1001EDF10);
  return Logger.init(subsystem:category:)( 0xD000000000000011LL,  0x8000000100173710LL,  0x746C7561666564LL,  0xE700000000000000LL);
}

uint64_t type metadata accessor for SQLiteLogger()
{
  return objc_opt_self(&OBJC_CLASS____TtC7SQLiter12SQLiteLogger);
}

uint64_t static SQLiteType.sqlNull.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = type metadata accessor for Optional(0LL, a1);
  a2[3] = v3;
  a2[4] = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v3);
  uint64_t v4 = sub_10001B468(a2);
  return sub_100014600((uint64_t)v4, 1LL);
}

void static SQLiteType.getSQLNonNullDataType()(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_10010DD78()
{
  return 0LL;
}

uint64_t SQLiteType.isEqualTo(sqlValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a3;
  uint64_t v5 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  sub_100009AEC();
  uint64_t v35 = v7 - v6;
  uint64_t v9 = type metadata accessor for Optional(255LL, v8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v9, v9, 0LL, 0LL);
  uint64_t v36 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v11 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v13 = (char *)&v33 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v33 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v33 - v21;
  uint64_t v37 = v5;
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v24 = v20;
  sub_10011019C((uint64_t)&v33 - v21, v23);
  sub_100014600((uint64_t)v22, 0LL);
  sub_100019B20(a1, (uint64_t)v38);
  uint64_t v25 = sub_10000941C(&qword_1001DAB90);
  int v26 = swift_dynamicCast(v19, v38, v25, a2, 6LL);
  sub_100014600((uint64_t)v19, v26 ^ 1u);
  uint64_t v27 = (uint64_t)&v13[*(int *)(v24 + 48)];
  sub_100110174((uint64_t)v13, (uint64_t)v22);
  sub_100110174(v27, (uint64_t)v19);
  sub_100110144((uint64_t)v13);
  if (!v29)
  {
    sub_100110174((uint64_t)v16, (uint64_t)v13);
    sub_100110144(v27);
    if (!v29)
    {
      uint64_t v30 = v35;
      sub_10011019C(v35, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 32));
      char v28 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v30, a2, *(void *)(*(void *)(v34 + 16) + 8LL));
      unint64_t v31 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
      v31(v30, a2);
      sub_100110088();
      v31((uint64_t)v16, a2);
      sub_10005A564((uint64_t)v13);
      goto LABEL_10;
    }

    sub_100110088();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v16, a2);
LABEL_9:
    (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v24);
    char v28 = 0;
    goto LABEL_10;
  }

  sub_100110088();
  sub_100110144(v27);
  if (!v29) {
    goto LABEL_9;
  }
  sub_10005A564((uint64_t)v13);
  char v28 = 1;
LABEL_10:
  sub_10005A564((uint64_t)v19);
  return v28 & 1;
}

uint64_t static SQLiteSafeType<>.create(from:at:nullable:)@<X0>( Swift::Int at@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, void *a6@<X8>)
{
  uint64_t v7 = v6;
  if ((a2 & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t result = SQLiteRow.type(at:)(at);
  uint64_t v7 = v14;
  if (v14) {
    return result;
  }
  sub_100110104();
  if (v15)
  {
    uint64_t v16 = sub_100110190();
    a6[3] = v16;
    a6[4] = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v16);
    uint64_t v17 = sub_1001100FC();
    return sub_100110098((uint64_t)v17);
  }

  else
  {
LABEL_6:
    uint64_t v18 = *(uint64_t (**)(uint64_t, Swift::Int, uint64_t, uint64_t))(a4 + 8);
    a6[3] = a3;
    a6[4] = a5;
    sub_1001100FC();
    uint64_t v19 = swift_retain();
    uint64_t result = v18(v19, at, a3, a4);
    if (v7) {
      return (uint64_t)sub_10010E158(a6);
    }
  }

  return result;
}

void *sub_10010E158(void *result)
{
  uint64_t v1 = *(void *)(result[3] - 8LL);
  if ((*(_DWORD *)(v1 + 80) & 0x20000) != 0) {
    return (void *)swift_slowDealloc( *result,  *(void *)(v1 + 64)
  }
                     + ((*(_DWORD *)(v1 + 80) + 16LL) & ~(unint64_t)*(_DWORD *)(v1 + 80)),
                       *(_DWORD *)(v1 + 80) | 7LL);
  return result;
}

void SQLiteSafeType<>.getSQLDataType()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_10010E1C8()
{
  return 0LL;
}

uint64_t SQLiteSafeType<>.unwrapIfOptional()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  a3[3] = a1;
  a3[4] = a2;
  sub_10001B468(a3);
  sub_100110160();
  return sub_1001100E8(v3, v4, v5, v6);
}

void static SQLiteUnsafeType<>.create(from:at:nullable:)()
{
  uint64_t v2 = v1;
  uint64_t v26 = v3;
  uint64_t v5 = v4;
  int v25 = v6;
  uint64_t v8 = v7;
  uint64_t v24 = v9;
  uint64_t v10 = type metadata accessor for Optional(0LL, v4);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v23 - v12;
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 8);
  uint64_t v15 = swift_retain();
  v14(v15, v8, v5, v2);
  if (!v0)
  {
    char v16 = v25;
    uint64_t v17 = v26;
    uint64_t v18 = v24;
    if (sub_100010708((uint64_t)v13, 1LL, v5) == 1)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      if ((v16 & 1) != 0)
      {
        *(void *)(v18 + swift_weakDestroy(v0 + 24) = v10;
        *(void *)(v18 + 3sub_1000108B8(v0 + 2) = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v10);
        uint64_t v19 = sub_1001100FC();
        sub_100110098((uint64_t)v19);
      }

      else
      {
        unint64_t v21 = sub_1000E4274();
        sub_100010EA0((uint64_t)&type metadata for SQLiteError, v21);
        v22[1] = 0LL;
        v22[2] = 0LL;
        *uint64_t v22 = 6LL;
        sub_100110034((uint64_t)v22, 4);
      }
    }

    else
    {
      *(void *)(v18 + swift_weakDestroy(v0 + 24) = v5;
      *(void *)(v18 + 3sub_1000108B8(v0 + 2) = v17;
      uint64_t v20 = sub_1001100FC();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v5 - 8) + 32LL))(v20, v13, v5);
    }
  }

  sub_10002716C();
}

void SQLiteUnsafeType<>.getSQLDataType()(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_10010E3E4()
{
  return 0LL;
}

uint64_t SQLiteUnsafeType<>.unwrapIfOptional()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  a3[3] = a1;
  a3[4] = a2;
  sub_10001B468(a3);
  sub_100110160();
  return sub_1001100E8(v3, v4, v5, v6);
}

uint64_t static Bool.sqlColumnType.getter()
{
  return 9LL;
}

void static Bool.create(from:)(uint64_t a1@<X8>)
{
  Swift::String v2 = String.lowercased()();
  Swift::Bool value = Bool.init(_:)(v2).value;
  *(void *)(a1 + swift_weakDestroy(v0 + 24) = sub_10000941C(&qword_1001DAB98);
  *(void *)(a1 + 3sub_1000108B8(v0 + 2) = sub_10010FEE0(&qword_1001DABA0, &qword_1001DAB98);
  *(_BYTE *)a1 = value;
  sub_1000E5738();
}

uint64_t sub_10010E4D8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = *v3;
  *(void *)(a3 + swift_weakDestroy(v0 + 24) = result;
  *(void *)(a3 + 3sub_1000108B8(v0 + 2) = a2;
  *(_BYTE *)a3 = v4;
  return result;
}

uint64_t sub_10010E4E8@<X0>( Swift::Int at@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v8 = v5;
  if ((a2 & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t result = SQLiteRow.type(at:)(at);
  uint64_t v8 = v11;
  if (v11) {
    return result;
  }
  if (result == 4)
  {
    a5[3] = sub_10000941C(&qword_1001DAB98);
    uint64_t result = sub_10010FEE0(&qword_1001DABA0, &qword_1001DAB98);
    a5[4] = result;
    char v12 = 2;
  }

  else
  {
LABEL_5:
    a5[3] = a3;
    a5[4] = a4;
    swift_retain();
    uint64_t result = (uint64_t)Bool.init(with:column:)();
    if (v8) {
      return (uint64_t)sub_10010E158(a5);
    }
    char v12 = result & 1;
  }

  *(_BYTE *)a5 = v12;
  return result;
}

uint64_t sub_10010E5C0@<X0>(uint64_t a1@<X8>)
{
  Swift::String v2 = String.lowercased()();
  Swift::Bool value = Bool.init(_:)(v2).value;
  *(void *)(a1 + swift_weakDestroy(v0 + 24) = sub_10000941C(&qword_1001DAB98);
  uint64_t result = sub_10010FEE0(&qword_1001DABA0, &qword_1001DAB98);
  *(void *)(a1 + 3sub_1000108B8(v0 + 2) = result;
  *(_BYTE *)a1 = value;
  return result;
}

uint64_t static Float.sqlColumnType.getter()
{
  return 6LL;
}

void static Float.create(from:)(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = sub_1000CC794(v2, v3);
  *(void *)(v4 + swift_weakDestroy(v0 + 24) = sub_10000941C(&qword_1001DABA8);
  *(void *)(v4 + 3sub_1000108B8(v0 + 2) = sub_10010FEE0(&qword_1001DABB0, &qword_1001DABA8);
  *(_DWORD *)uint64_t v4 = v5;
  *(_BYTE *)(v4 + 4) = BYTE4(v5) & 1;
  sub_1000E5738();
}

float sub_10010E6A0@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float result = *v3;
  *(void *)(a3 + swift_weakDestroy(v0 + 24) = a1;
  *(void *)(a3 + 3sub_1000108B8(v0 + 2) = a2;
  *(float *)a3 = result;
  return result;
}

uint64_t sub_10010E6B0@<X0>( Swift::Int at@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8 = v5;
  if ((a2 & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t result = SQLiteRow.type(at:)(at);
  uint64_t v8 = v11;
  if (v11) {
    return result;
  }
  if (result == 4)
  {
    *(void *)(a5 + swift_weakDestroy(v0 + 24) = sub_10000941C(&qword_1001DABA8);
    uint64_t result = sub_10010FEE0(&qword_1001DABB0, &qword_1001DABA8);
    *(void *)(a5 + 3sub_1000108B8(v0 + 2) = result;
    *(_DWORD *)a5 = 0;
    *(_BYTE *)(a5 + 4) = 1;
  }

  else
  {
LABEL_5:
    *(void *)(a5 + swift_weakDestroy(v0 + 24) = a3;
    *(void *)(a5 + 3sub_1000108B8(v0 + 2) = a4;
    swift_retain();
    uint64_t result = (uint64_t)Float.init(with:column:)();
    if (v8) {
      return (uint64_t)sub_10010E158((void *)a5);
    }
    else {
      *(_DWORD *)a5 = v12;
    }
  }

  return result;
}

uint64_t sub_10010E78C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = sub_1000CC794(a1, a2);
  *(void *)(a3 + swift_weakDestroy(v0 + 24) = sub_10000941C(&qword_1001DABA8);
  uint64_t result = sub_10010FEE0(&qword_1001DABB0, &qword_1001DABA8);
  *(void *)(a3 + 3sub_1000108B8(v0 + 2) = result;
  *(_DWORD *)a3 = v6;
  *(_BYTE *)(a3 + 4) = BYTE4(v6) & 1;
  return result;
}

uint64_t static Double.sqlColumnType.getter()
{
  return 7LL;
}

uint64_t static Double.create(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10010E89C(v2, v3);
  char v7 = v6;
  *(void *)(v4 + swift_weakDestroy(v0 + 24) = sub_10000941C(&qword_1001DABB8);
  uint64_t result = sub_10010FEE0(&qword_1001DABC0, &qword_1001DABB8);
  *(void *)(v4 + 3sub_1000108B8(v0 + 2) = result;
  *(void *)uint64_t v4 = v5;
  *(_BYTE *)(v4 + 8) = v7 & 1;
  return result;
}

uint64_t sub_10010E89C(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0LL;
  uint64_t v9 = &v11;
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)(sub_10010FF9C, v8, a1, a2, &type metadata for Bool);
    swift_bridgeObjectRelease();
    char v5 = v10[0];
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    v10[0] = a1;
    v10[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    char v5 = (a1 > 0x20u || ((0x100003E01uLL >> a1) & 1) == 0)
      && (char v6 = (_BYTE *)_swift_stdlib_strtod_clocale(v10, &v11, a1)) != 0LL
      && *v6 == 0;
    swift_bridgeObjectRelease();
  }

  else
  {
    if ((a1 & 0x1000000000000000LL) != 0)
    {
      uint64_t v3 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v3 = _StringObject.sharedUTF8.getter(a1, a2);
    }

    char v5 = sub_1000CF310(v3, v4, (void (*)(uint64_t *__return_ptr))sub_10010FFBC);
    swift_bridgeObjectRelease();
  }

  if ((v5 & 1) != 0) {
    return v11;
  }
  else {
    return 0LL;
  }
}

double sub_10010EA04@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result = *v3;
  *(void *)(a3 + swift_weakDestroy(v0 + 24) = a1;
  *(void *)(a3 + 3sub_1000108B8(v0 + 2) = a2;
  *(double *)a3 = result;
  return result;
}

uint64_t sub_10010EA14@<X0>( Swift::Int at@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8 = v5;
  if ((a2 & 1) != 0)
  {
    uint64_t result = SQLiteRow.type(at:)(at);
    uint64_t v8 = v12;
    if (v12) {
      return result;
    }
    if (result == 4)
    {
      *(void *)(a5 + swift_weakDestroy(v0 + 24) = sub_10000941C(&qword_1001DABB8);
      uint64_t result = sub_10010FEE0(&qword_1001DABC0, &qword_1001DABB8);
      *(void *)(a5 + 3sub_1000108B8(v0 + 2) = result;
      *(void *)a5 = 0LL;
      *(_BYTE *)(a5 + 8) = 1;
      return result;
    }
  }

  *(void *)(a5 + swift_weakDestroy(v0 + 24) = a3;
  *(void *)(a5 + 3sub_1000108B8(v0 + 2) = a4;
  swift_retain();
  uint64_t result = sub_10011B510();
  if (v8)
  {
    swift_release();
    return (uint64_t)sub_10010E158((void *)a5);
  }

  if (at < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_12;
  }

  if (at > 0x7FFFFFFF)
  {
LABEL_12:
    __break(1u);
    return result;
  }

  double v13 = sqlite3_column_double((sqlite3_stmt *)result, at);
  uint64_t result = swift_release();
  *(double *)a5 = v13;
  return result;
}

uint64_t sub_10010EB30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10010E89C(a1, a2);
  char v8 = v7;
  *(void *)(a3 + swift_weakDestroy(v0 + 24) = sub_10000941C(&qword_1001DABB8);
  uint64_t result = sub_10010FEE0(&qword_1001DABC0, &qword_1001DABB8);
  *(void *)(a3 + 3sub_1000108B8(v0 + 2) = result;
  *(void *)a3 = v6;
  *(_BYTE *)(a3 + 8) = v8 & 1;
  return result;
}

uint64_t static String.create(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  a3[3] = &type metadata for String;
  a3[4] = &protocol witness table for String;
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10010EBF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  a3[3] = a1;
  a3[4] = a2;
  *a3 = v5;
  a3[1] = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_10010EC08@<X0>(char a1@<W2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t result = (uint64_t)String.init(with:column:)();
  if (!v4)
  {
    if (v10)
    {
      a4[3] = a2;
      a4[4] = a3;
      *a4 = result;
      a4[1] = v10;
    }

    else if ((a1 & 1) != 0)
    {
      a4[3] = sub_10000941C(&qword_1001D4480);
      uint64_t result = sub_10010FEE0((unint64_t *)&qword_1001DAC78, &qword_1001D4480);
      a4[4] = result;
      *a4 = 0LL;
      a4[1] = 0LL;
    }

    else
    {
      unint64_t v11 = sub_1000E4274();
      uint64_t v12 = swift_allocError(&type metadata for SQLiteError, v11, 0LL, 0LL);
      *(void *)(v13 + 8) = 0LL;
      *(void *)(v13 + swift_weakDestroy(v0 + 16) = 0LL;
      *(void *)uint64_t v13 = 6LL;
      *(_BYTE *)(v13 + swift_weakDestroy(v0 + 24) = 4;
      return swift_willThrow(v12);
    }
  }

  return result;
}

uint64_t sub_10010ECE4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  a5[3] = a3;
  a5[4] = a4;
  *a5 = a1;
  a5[1] = a2;
  return swift_bridgeObjectRetain(a2);
}

void static Data.create(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = Data.init(base64Encoded:options:)(a1, a2, 0LL);
  uint64_t v6 = v5;
  a3[3] = sub_10000941C(&qword_1001DABC8);
  a3[4] = sub_10010ED54();
  *a3 = v4;
  a3[1] = v6;
  sub_1000E5738();
}

unint64_t sub_10010ED54()
{
  unint64_t result = qword_1001DABD0;
  if (!qword_1001DABD0)
  {
    uint64_t v1 = sub_1000094A0(&qword_1001DABC8);
    sub_1000F5A94();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1001DABD0);
  }

  return result;
}

uint64_t sub_10010EDB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  a3[3] = a1;
  a3[4] = a2;
  *a3 = v4;
  a3[1] = v5;
  return sub_100014244(v4, v5);
}

uint64_t sub_10010EDD0@<X0>(char a1@<W2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t result = (uint64_t)Data.init(with:column:)();
  if (!v4)
  {
    if (v10 >> 60 == 15)
    {
      if ((a1 & 1) != 0)
      {
        *(void *)(a4 + swift_weakDestroy(v0 + 24) = sub_10000941C(&qword_1001DABC8);
        uint64_t result = sub_10010ED54();
        *(void *)(a4 + 3sub_1000108B8(v0 + 2) = result;
        *(_OWORD *)a4 = xmmword_10015D820;
      }

      else
      {
        unint64_t v11 = sub_1000E4274();
        uint64_t v12 = swift_allocError(&type metadata for SQLiteError, v11, 0LL, 0LL);
        *(void *)(v13 + 8) = 0LL;
        *(void *)(v13 + swift_weakDestroy(v0 + 16) = 0LL;
        *(void *)uint64_t v13 = 6LL;
        *(_BYTE *)(v13 + swift_weakDestroy(v0 + 24) = 4;
        return swift_willThrow(v12);
      }
    }

    else
    {
      *(void *)(a4 + swift_weakDestroy(v0 + 24) = a2;
      *(void *)(a4 + 3sub_1000108B8(v0 + 2) = a3;
      *(void *)a4 = result;
      *(void *)(a4 + 8) = v10;
    }
  }

  return result;
}

unint64_t sub_10010EEA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = Data.init(base64Encoded:options:)(a1, a2, 0LL);
  uint64_t v6 = v5;
  a3[3] = sub_10000941C(&qword_1001DABC8);
  unint64_t result = sub_10010ED54();
  a3[4] = result;
  *a3 = v4;
  a3[1] = v6;
  return result;
}

uint64_t static Optional<A>.sqlColumnType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t static Optional<A>.create(from:at:nullable:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t static Optional<A>.create(from:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v5) {
    return (*(uint64_t (**)(void))(a3 + 64))();
  }
  uint64_t v7 = sub_100110190();
  *(void *)(a4 + swift_weakDestroy(v0 + 24) = v7;
  *(void *)(a4 + 3sub_1000108B8(v0 + 2) = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v7);
  char v8 = sub_1001100FC();
  return sub_100110098((uint64_t)v8);
}

uint64_t Optional<A>.getSQLDataType()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v9, v11);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v9, v3);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(v3, a2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v12;
}

uint64_t Optional<A>.unwrapIfOptional()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(a1);
  sub_100009AEC();
  uint64_t v9 = v8 - v7;
  __chkstk_darwin(v10);
  sub_100009AEC();
  uint64_t v13 = v12 - v11;
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v12 - v11, v15);
  uint64_t result = sub_100010708(v13, 1LL, v5);
  if ((_DWORD)result == 1)
  {
    *(void *)(a3 + 3sub_1000108B8(v0 + 2) = 0LL;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + swift_weakDestroy(v0 + 16) = 0u;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v9, v13, v5);
    (*(void (**)(uint64_t, uint64_t))(a2 + 48))(v5, a2);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  }

  return result;
}

uint64_t sub_10010F1EC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 - 8) + 24LL))();
}

uint64_t sub_10010F218(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 - 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v9, v11);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v9, v3);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(v3, v2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v12;
}

uint64_t sub_10010F32C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a2 - 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v12 + 16))(v11, v13);
  uint64_t result = sub_100010708((uint64_t)v11, 1LL, v5);
  if ((_DWORD)result == 1)
  {
    *(void *)(a3 + 3sub_1000108B8(v0 + 2) = 0LL;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + swift_weakDestroy(v0 + 16) = 0u;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v11, v5);
    (*(void (**)(uint64_t, uint64_t))(v4 + 48))(v5, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }

  return result;
}

uint64_t sub_10010F438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(*(void *)(a5 - 8) + 56LL))();
}

uint64_t sub_10010F464@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v6) {
    return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 64LL))();
  }
  a5[3] = a3;
  a5[4] = a4;
  uint64_t v8 = sub_10001B468(a5);
  return sub_100009654((uint64_t)v8, 1LL, 1LL, *(void *)(a3 + 16));
}

uint64_t static RawRepresentable<>.sqlColumnType.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

unint64_t sub_10010F51C(uint64_t a1)
{
  unint64_t result = sub_10010F540();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_10010F540()
{
  unint64_t result = qword_1001DABD8;
  if (!qword_1001DABD8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1001DABD8);
  }

  return result;
}

uint64_t sub_10010F57C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, a2);
  uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, a2);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

void sub_10010F5EC()
{
  if (v0) {
    goto LABEL_7;
  }
  sub_1001100B4();
  if (v1 == v2)
  {
    sub_1001100A8();
    if (!(v1 ^ v2 | v4)) {
      goto LABEL_12;
    }
    int v5 = sub_1001100D8(v3);
    if (v5 < -128)
    {
      unint64_t v6 = sub_1000E4274();
      uint64_t v7 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v6);
      sub_10010FFF8(v7, v8);
LABEL_7:
      sub_10001683C();
LABEL_8:
      sub_100110138();
      sub_10010DC1C();
      return;
    }

    int v9 = v5;
    sub_10001683C();
    if (v9 <= 127) {
      goto LABEL_8;
    }
    __break(1u);
  }

  __break(1u);
LABEL_12:
  __break(1u);
}

void sub_10010F668()
{
  if (v0) {
    goto LABEL_7;
  }
  sub_1001100B4();
  if (v1 == v2)
  {
    sub_1001100A8();
    if (!(v1 ^ v2 | v4)) {
      goto LABEL_12;
    }
    int v5 = sub_1001100D8(v3);
    if (v5 < -32768)
    {
      unint64_t v6 = sub_1000E4274();
      uint64_t v7 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v6);
      sub_10010FFF8(v7, v8);
LABEL_7:
      sub_10001683C();
LABEL_8:
      sub_100110138();
      sub_10010DC1C();
      return;
    }

    int v9 = v5;
    sub_10001683C();
    if (v9 < 0x8000) {
      goto LABEL_8;
    }
    __break(1u);
  }

  __break(1u);
LABEL_12:
  __break(1u);
}

void sub_10010F6E4()
{
  if (v0) {
    goto LABEL_6;
  }
  sub_1001100B4();
  if (v1 == v2)
  {
    sub_1001100A8();
    if (!(v1 ^ v2 | v4)) {
      goto LABEL_8;
    }
    sub_1001100D8(v3);
LABEL_6:
    sub_10001683C();
    return;
  }

  __break(1u);
LABEL_8:
  __break(1u);
}

uint64_t sub_10010F73C()
{
  if (v0) {
    goto LABEL_7;
  }
  sub_1001100B4();
  if (v1 != v2)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  sub_1001100A8();
  if (!(v1 ^ v2 | v4)) {
    goto LABEL_10;
  }
  unsigned int v5 = sub_1001100D8(v3);
  if ((v5 & 0x80000000) != 0)
  {
    unint64_t v7 = sub_1000E4274();
    uint64_t v8 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v7);
    sub_10010FFF8(v8, v9);
    goto LABEL_7;
  }

  if (v5 < 0x100)
  {
LABEL_7:
    sub_10001683C();
    return sub_100110138();
  }

void sub_10010F810()
{
  if (v0) {
    goto LABEL_2;
  }
  sub_1001100B4();
  if (v1 != v2)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  sub_1001100A8();
  if (!(v1 ^ v2 | v4)) {
    goto LABEL_11;
  }
  unsigned int v5 = sub_1001100D8(v3);
  if ((v5 & 0x80000000) != 0)
  {
    unint64_t v7 = sub_1000E4274();
    uint64_t v8 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v7);
    sub_10010FFF8(v8, v9);
LABEL_2:
    sub_10001683C();
LABEL_8:
    sub_100110138();
    sub_10010DC1C();
    return;
  }

  unsigned int v6 = v5;
  sub_10001683C();
  if (!HIWORD(v6)) {
    goto LABEL_8;
  }
LABEL_12:
  __break(1u);
}

void sub_10010F890()
{
  if (v0) {
    goto LABEL_7;
  }
  sub_1001100B4();
  if (v1 == v2)
  {
    sub_1001100A8();
    if (!(v1 ^ v2 | v4)) {
      goto LABEL_9;
    }
    if ((sub_1001100D8(v3) & 0x80000000) != 0)
    {
      unint64_t v5 = sub_1000E4274();
      uint64_t v6 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v5);
      sub_10010FFF8(v6, v7);
    }

void sub_10010F904()
{
}

void sub_10010F940()
{
}

void sub_10010F97C()
{
  if ((v2 & 1) != 0)
  {
    sub_100110018();
    if (v1) {
      goto LABEL_9;
    }
    sub_100110104();
    if (v3)
    {
      uint64_t v4 = sub_100110130();
      *(void *)(v0 + 3sub_1000108B8(v0 + 2) = sub_10011005C(v4);
      *(_WORD *)uint64_t v0 = 256;
      goto LABEL_9;
    }
  }

  uint64_t v5 = sub_100110070();
  char v6 = sub_1001100F0(v5);
  if (v1) {
    sub_1001100E0();
  }
  else {
    *(_BYTE *)uint64_t v0 = v6;
  }
LABEL_9:
  sub_10002716C();
}

uint64_t sub_10010F9EC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v4 = *v3;
  *(void *)(a3 + swift_weakDestroy(v0 + 24) = result;
  *(void *)(a3 + 3sub_1000108B8(v0 + 2) = a2;
  *(_WORD *)a3 = v4;
  return result;
}

void sub_10010F9FC()
{
}

void sub_10010FA38()
{
}

void sub_10010FA74()
{
  if ((v2 & 1) != 0)
  {
    sub_100110018();
    if (v1) {
      goto LABEL_9;
    }
    sub_100110104();
    if (v3)
    {
      uint64_t v4 = sub_100110130();
      *(void *)(v0 + 3sub_1000108B8(v0 + 2) = sub_10011005C(v4);
      *(_WORD *)uint64_t v0 = 0;
      *(_BYTE *)(v0 + sub_1000108B8(v0 + 2) = 1;
      goto LABEL_9;
    }
  }

  uint64_t v5 = sub_100110070();
  __int16 v6 = sub_1001100F0(v5);
  if (v1) {
    sub_1001100E0();
  }
  else {
    *(_WORD *)uint64_t v0 = v6;
  }
LABEL_9:
  sub_10002716C();
}

uint64_t sub_10010FAE8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *v3;
  *(void *)(a3 + swift_weakDestroy(v0 + 24) = result;
  *(void *)(a3 + 3sub_1000108B8(v0 + 2) = a2;
  *(_DWORD *)a3 = v4;
  return result;
}

void sub_10010FAF8()
{
}

void sub_10010FB34()
{
}

void sub_10010FB70()
{
  if ((v2 & 1) != 0)
  {
    sub_100110018();
    if (v1) {
      goto LABEL_9;
    }
    sub_100110104();
    if (v3)
    {
      uint64_t v4 = sub_100110130();
      *(void *)(v0 + 3sub_1000108B8(v0 + 2) = sub_10011005C(v4);
      *(_DWORD *)uint64_t v0 = 0;
      *(_BYTE *)(v0 + 4) = 1;
      goto LABEL_9;
    }
  }

  uint64_t v5 = sub_100110070();
  int v6 = sub_1001100F0(v5);
  if (v1) {
    sub_1001100E0();
  }
  else {
    *(_DWORD *)uint64_t v0 = v6;
  }
LABEL_9:
  sub_10002716C();
}

void sub_10010FBE4()
{
  if (v0) {
    goto LABEL_6;
  }
  sub_1001100B4();
  if (v2 == v3)
  {
    sub_1001100A8();
    if (!(v2 ^ v3 | v5)) {
      goto LABEL_8;
    }
    sqlite3_column_int64(v4, v1);
LABEL_6:
    sub_10001683C();
    return;
  }

  __break(1u);
LABEL_8:
  __break(1u);
}

void sub_10010FC40()
{
}

void sub_10010FC54()
{
  if (v0) {
    goto LABEL_7;
  }
  sub_1001100B4();
  if (v2 == v3)
  {
    sub_1001100A8();
    if (!(v2 ^ v3 | v5)) {
      goto LABEL_9;
    }
    if (sqlite3_column_int64(v4, v1) < 0)
    {
      unint64_t v6 = sub_1000E4274();
      uint64_t v7 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v6);
      sub_10010FFF8(v7, v8);
    }

void sub_10010FCD8()
{
}

void sub_10010FD14()
{
}

void sub_10010FD40()
{
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = v0;
  uint64_t v10 = v9;
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = v3;
    uint64_t v13 = v2;
    SQLiteRow.type(at:)(v1);
    uint64_t v8 = v14;
    if (v14) {
      goto LABEL_9;
    }
    sub_100110104();
    if (v15)
    {
      void v10[3] = sub_10000941C(v13);
      uint64_t v16 = sub_10010FEE0(v12, v13);
      sub_10011017C(v16);
      goto LABEL_9;
    }
  }

  void v10[3] = v7;
  v10[4] = v5;
  swift_retain();
  sub_10010FC54();
  if (v8) {
    sub_1001100E0();
  }
  else {
    *uint64_t v10 = v17;
  }
LABEL_9:
  sub_10002716C();
}

uint64_t sub_10010FDF8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *v3;
  a3[3] = result;
  a3[4] = a2;
  *a3 = v4;
  return result;
}

void sub_10010FE08()
{
}

void sub_10010FE44()
{
  if ((v5 & 1) != 0)
  {
    sub_100110018();
    uint64_t v0 = v2;
    if (v2) {
      goto LABEL_9;
    }
    sub_100110104();
    if (v6)
    {
      uint64_t v7 = sub_100110130();
      uint64_t v8 = sub_10011005C(v7);
      sub_10011017C(v8);
      goto LABEL_9;
    }
  }

  uint64_t v9 = sub_100110070();
  uint64_t v10 = v4(v9, v3);
  if (v0) {
    sub_1001100E0();
  }
  else {
    *Swift::Int v1 = v10;
  }
LABEL_9:
  sub_10002716C();
}

void sub_10010FEB4()
{
}

uint64_t sub_10010FEE0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_1000094A0(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v4);
    atomic_store(result, a1);
  }

  return result;
}

_BYTE *sub_10010FF34@<X0>(_BYTE *result@<X0>, uint64_t (*a2)(void)@<X2>, BOOL *a3@<X8>)
{
  unsigned int v4 = *result;
  BOOL v5 = v4 > 0x20;
  uint64_t v6 = (1LL << v4) & 0x100003E01LL;
  BOOL v7 = v5 || v6 == 0;
  BOOL v8 = v7 && (result = (_BYTE *)a2()) != 0LL && *result == 0;
  *a3 = v8;
  return result;
}

_BYTE *sub_10010FF9C@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_10010FF34(a1, (uint64_t (*)(void))&__swift_stdlib_strtod_clocale, a2);
}

void *sub_10010FFBC@<X0>(_BYTE *a1@<X8>)
{
  return sub_1000CF3E4(a1);
}

void sub_10010FFE4()
{
}

uint64_t sub_10010FFF8(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)a2 = 8LL;
  *(_BYTE *)(a2 + swift_weakDestroy(v0 + 24) = 4;
  return swift_willThrow();
}

uint64_t sub_100110018()
{
  return SQLiteRow.type(at:)(v0);
}

uint64_t sub_100110034@<X0>(uint64_t a1@<X1>, char a2@<W8>)
{
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 24) = a2;
  return swift_willThrow();
}

  ;
}

uint64_t sub_10011005C(uint64_t a1)
{
  *(void *)(v1 + swift_weakDestroy(v0 + 24) = a1;
  return sub_10010FEE0(v3, v2);
}

uint64_t sub_100110070()
{
  *(void *)(v0 + swift_weakDestroy(v0 + 24) = v3;
  *(void *)(v0 + 3sub_1000108B8(v0 + 2) = v2;
  return swift_retain(v1);
}

  ;
}

uint64_t sub_100110088()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_100110098(uint64_t a1)
{
  return sub_100009654(a1, 1LL, 1LL, v1);
}

  ;
}

  ;
}

uint64_t sub_1001100C0(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1001100D8(sqlite3_stmt *a1)
{
  return sqlite3_column_int(a1, v1);
}

void *sub_1001100E0()
{
  return sub_10010E158(v0);
}

uint64_t sub_1001100E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_1001100F0(uint64_t a1)
{
  return v2(a1, v1);
}

void *sub_1001100FC()
{
  return sub_10001B468(v0);
}

  ;
}

  ;
}

uint64_t sub_100110120()
{
  return 1LL;
}

uint64_t sub_100110130()
{
  return sub_10000941C(v0);
}

uint64_t sub_100110138()
{
  return v0;
}

uint64_t sub_100110144(uint64_t a1)
{
  return sub_100010708(a1, 1LL, v1);
}

  ;
}

uint64_t sub_100110174(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_10011017C(uint64_t result)
{
  *(void *)(v1 + 3sub_1000108B8(v0 + 2) = result;
  *(void *)uint64_t v1 = 0LL;
  *(_BYTE *)(v1 + 8) = 1;
  return result;
}

uint64_t sub_100110190()
{
  return type metadata accessor for Optional(0LL, v0);
}

uint64_t sub_10011019C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

uint64_t static AvroPrimitiveSchema.float.getter()
{
  return 4LL;
}

uint64_t static AvroPrimitiveSchema.double.getter()
{
  return 5LL;
}

uint64_t sub_1001101B8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + swift_weakDestroy(v0 + 24) = sub_10000941C(&qword_1001DAC68);
  uint64_t result = sub_1001162C0(&qword_1001DAC70, &qword_1001DAC68);
  *(void *)(a3 + 3sub_1000108B8(v0 + 2) = result;
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t result = sub_1001123EC(a1, a2, 10LL);
    if ((result & 0x10000) != 0)
    {
      swift_bridgeObjectRetain(a2);
      sub_100114680(a1, a2);
      unsigned int v8 = v9;
      uint64_t result = swift_bridgeObjectRelease();
    }

    else
    {
      unsigned int v8 = result;
    }

    int v10 = (v8 >> 8) & 1;
    if (v10) {
      char v11 = 0;
    }
    else {
      char v11 = v8;
    }
  }

  else
  {
    char v11 = 0;
    LOBYTE(v1sub_1000E3528(v0, v2, 0) = 1;
  }

  *(_BYTE *)a3 = v11;
  *(_BYTE *)(a3 + 1) = v10;
  return result;
}

uint64_t sub_1001102A8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + swift_weakDestroy(v0 + 24) = sub_10000941C(&qword_1001DAC48);
  uint64_t result = sub_1001162C0(&qword_1001DAC50, &qword_1001DAC48);
  *(void *)(a3 + 3sub_1000108B8(v0 + 2) = result;
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t result = sub_100112C58(a1, a2, 10LL);
    int v8 = result;
    if ((result & 0x1000000) != 0)
    {
      swift_bridgeObjectRetain(a2);
      sub_100114F80(a1, a2);
      int v8 = v9;
      uint64_t result = swift_bridgeObjectRelease();
    }

    unsigned int v10 = (v8 & 0x10000u) >> 16;
    if ((v8 & 0x10000) != 0) {
      __int16 v11 = 0;
    }
    else {
      __int16 v11 = v8;
    }
  }

  else
  {
    __int16 v11 = 0;
    LOBYTE(v1sub_1000E3528(v0, v2, 0) = 1;
  }

  *(_WORD *)a3 = v11;
  *(_BYTE *)(a3 + sub_1000108B8(v0 + 2) = v10 & 1;
  return result;
}

uint64_t sub_100110398@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + swift_weakDestroy(v0 + 24) = sub_10000941C(&qword_1001DAC28);
  uint64_t result = sub_1001162C0(&qword_1001DAC30, &qword_1001DAC28);
  *(void *)(a3 + 3sub_1000108B8(v0 + 2) = result;
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t result = sub_1001134C4(a1, a2, 10LL);
    uint64_t v8 = result;
    if ((result & 0x10000000000LL) != 0)
    {
      swift_bridgeObjectRetain(a2);
      uint64_t v8 = sub_100115810(a1, a2);
      uint64_t result = swift_bridgeObjectRelease();
    }

    unint64_t v9 = (v8 & (unint64_t)&_mh_execute_header) >> 32;
    else {
      int v10 = v8;
    }
  }

  else
  {
    int v10 = 0;
    LOBYTE(v9) = 1;
  }

  *(_DWORD *)a3 = v10;
  *(_BYTE *)(a3 + 4) = v9 & 1;
  return result;
}

uint64_t sub_100110488@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + swift_weakDestroy(v0 + 24) = sub_10000941C(&qword_1001DAC58);
  uint64_t result = sub_1001162C0(&qword_1001DAC60, &qword_1001DAC58);
  *(void *)(a3 + 3sub_1000108B8(v0 + 2) = result;
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t result = sub_1001140E0(a1, a2, 10LL);
    if ((result & 0x10000) != 0)
    {
      swift_bridgeObjectRetain(a2);
      sub_100114680(a1, a2);
      unsigned int v8 = v9;
      uint64_t result = swift_bridgeObjectRelease();
    }

    else
    {
      unsigned int v8 = result;
    }

    int v10 = (v8 >> 8) & 1;
    if (v10) {
      char v11 = 0;
    }
    else {
      char v11 = v8;
    }
  }

  else
  {
    char v11 = 0;
    LOBYTE(v1sub_1000E3528(v0, v2, 0) = 1;
  }

  *(_BYTE *)a3 = v11;
  *(_BYTE *)(a3 + 1) = v10;
  return result;
}

uint64_t sub_100110578@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + swift_weakDestroy(v0 + 24) = sub_10000941C(&qword_1001DAC38);
  uint64_t result = sub_1001162C0(&qword_1001DAC40, &qword_1001DAC38);
  *(void *)(a3 + 3sub_1000108B8(v0 + 2) = result;
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t result = sub_1001149E0(a1, a2, 10LL);
    int v8 = result;
    if ((result & 0x1000000) != 0)
    {
      swift_bridgeObjectRetain(a2);
      sub_100114F80(a1, a2);
      int v8 = v9;
      uint64_t result = swift_bridgeObjectRelease();
    }

    unsigned int v10 = (v8 & 0x10000u) >> 16;
    if ((v8 & 0x10000) != 0) {
      __int16 v11 = 0;
    }
    else {
      __int16 v11 = v8;
    }
  }

  else
  {
    __int16 v11 = 0;
    LOBYTE(v1sub_1000E3528(v0, v2, 0) = 1;
  }

  *(_WORD *)a3 = v11;
  *(_BYTE *)(a3 + sub_1000108B8(v0 + 2) = v10 & 1;
  return result;
}

uint64_t sub_100110668@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + swift_weakDestroy(v0 + 24) = sub_10000941C(&qword_1001DAC18);
  uint64_t result = sub_1001162C0(&qword_1001DAC20, &qword_1001DAC18);
  *(void *)(a3 + 3sub_1000108B8(v0 + 2) = result;
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t result = sub_1001152D8(a1, a2, 10LL);
    uint64_t v8 = result;
    if ((result & 0x10000000000LL) != 0)
    {
      swift_bridgeObjectRetain(a2);
      uint64_t v8 = sub_100115810(a1, a2);
      uint64_t result = swift_bridgeObjectRelease();
    }

    unint64_t v9 = (v8 & (unint64_t)&_mh_execute_header) >> 32;
    else {
      int v10 = v8;
    }
  }

  else
  {
    int v10 = 0;
    LOBYTE(v9) = 1;
  }

  *(_DWORD *)a3 = v10;
  *(_BYTE *)(a3 + 4) = v9 & 1;
  return result;
}

uint64_t static SQLiteInteger64.create(from:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_10011087C(a1, a2, a3, a4, a5);
}

void sub_10011076C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = sub_100116478(a1, a2, a3);
  uint64_t v8 = sub_10011667C(v7);
  sub_100116780(v8);
  if (v9)
  {
    uint64_t v10 = sub_10011683C();
    sub_1001139FC(v10, v11, v12);
    if ((v14 & 0x100) != 0)
    {
      swift_bridgeObjectRetain(v4);
      sub_100116770();
      sub_100116748();
      int v15 = v5 & 1;
    }

    else
    {
      uint64_t v6 = v13;
      int v15 = v14 & 1;
    }

    if (v15) {
      uint64_t v16 = 0LL;
    }
    else {
      uint64_t v16 = v6;
    }
  }

  else
  {
    uint64_t v16 = 0LL;
    LOBYTE(v15) = 1;
  }

  *(void *)uint64_t v3 = v16;
  *(_BYTE *)(v3 + 8) = v15;
  sub_100116710();
}

void sub_1001107F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = sub_100116478(a1, a2, a3);
  uint64_t v8 = sub_10011667C(v7);
  sub_100116780(v8);
  if (v9)
  {
    uint64_t v10 = sub_10011683C();
    sub_100115B78(v10, v11, v12);
    if ((v14 & 0x100) != 0)
    {
      swift_bridgeObjectRetain(v4);
      sub_100116770();
      sub_100116748();
      int v15 = v5 & 1;
    }

    else
    {
      uint64_t v6 = v13;
      int v15 = v14 & 1;
    }

    if (v15) {
      uint64_t v16 = 0LL;
    }
    else {
      uint64_t v16 = v6;
    }
  }

  else
  {
    uint64_t v16 = 0LL;
    LOBYTE(v15) = 1;
  }

  *(void *)uint64_t v3 = v16;
  *(_BYTE *)(v3 + 8) = v15;
  sub_100116710();
}

uint64_t sub_10011087C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Optional(0LL, a3);
  a5[3] = v10;
  a5[4] = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v10);
  sub_10001B468(a5);
  uint64_t v11 = *(void *)(*(void *)(a4 + 24) + 16LL);
  __n128 v12 = swift_bridgeObjectRetain(a2);
  return dispatch thunk of LosslessStringConvertible.init(_:)(a1, a2, a3, v11, v12);
}

void sub_100110930(_BYTE *a1@<X8>)
{
  if (!v1) {
    *a1 = v3;
  }
  sub_10010BF78();
}

void SQLiteInteger32.init(with:column:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  a20 = v29;
  a21 = v30;
  sub_10011655C();
  __chkstk_darwin(v31);
  sub_10005A4F0();
  __chkstk_darwin(v32);
  sub_1001164B0();
  __chkstk_darwin(v33);
  uint64_t v34 = (sqlite3_stmt *)sub_1001167F0();
  if (v21) {
    goto LABEL_9;
  }
  if (v24 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if (v24 <= 0x7FFFFFFF)
  {
    int v35 = sqlite3_column_int(v34, v24);
    uint64_t v36 = *(void *)(v27 + 24);
    if (v22 != &type metadata for Int32)
    {
      int v48 = v35;
      sub_1001166B8();
      sub_1001167B0();
      uint64_t v37 = sub_1001166A4();
      if ((v36 & 1) != 0)
      {
        if (v37 <= 32)
        {
          int v42 = sub_100116414();
          sub_100116444(v23);
          if (v48 >= v42) {
            goto LABEL_8;
          }
        }

        else
        {
          int v49 = v48;
          unint64_t v38 = sub_100111F38();
          sub_1001163C0((uint64_t)&v49, (uint64_t)&type metadata for Int32, v38);
          char v39 = sub_1001163E8(v28, v25);
          sub_1001164C4(v28);
          sub_1001164C4(v25);
          if ((v39 & 1) == 0) {
            goto LABEL_8;
          }
        }
      }

      else if (v37 > 31)
      {
        a11 = v48;
        sub_1001166E8();
        if (v48 < 0)
        {
          sub_1001164C4(v26);
          sub_1001164C4(v25);
        }

        else
        {
          unint64_t v43 = sub_100111F38();
          sub_1001163C0((uint64_t)&a11, (uint64_t)&type metadata for Int32, v43);
          char v44 = sub_1001163E8(v28, v26);
          sub_1001165E8(v28);
          sub_1001165E8(v26);
          sub_1001165E8(v25);
          if ((v44 & 1) == 0) {
            goto LABEL_8;
          }
        }
      }

      else
      {
        int v41 = sub_100116414();
        sub_100116444(v23);
        if (v48 >= v41) {
          goto LABEL_8;
        }
      }

      unint64_t v45 = sub_1000E4274();
      uint64_t v46 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v45);
      sub_10010FFF8(v46, v47);
      swift_release();
      goto LABEL_10;
    }

uint64_t sub_100110BB0(uint64_t a1, uint64_t a2)
{
  return sub_100110BC8(a1, a2, *v2);
}

uint64_t sub_100110BC8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = sub_10011B510();
  if (!v3)
  {
    if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
    {
      __break(1u);
    }

    else if (a2 <= 0x7FFFFFFF)
    {
      uint64_t result = sqlite3_bind_int((sqlite3_stmt *)result, a2, a3);
      if ((_DWORD)result)
      {
        uint64_t v7 = result;
        unint64_t v8 = sub_1000E4274();
        uint64_t v9 = swift_allocError(&type metadata for SQLiteError, v8, 0LL, 0LL);
        *(void *)uint64_t v10 = v7;
        *(void *)(v10 + 8) = 0xD000000000000012LL;
        *(void *)(v10 + swift_weakDestroy(v0 + 16) = 0x8000000100173770LL;
        *(_BYTE *)(v10 + swift_weakDestroy(v0 + 24) = 0;
        return swift_willThrow(v9);
      }

      return result;
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_100110C84(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result = sub_10011B510();
  if (!v3)
  {
    if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
    {
      __break(1u);
    }

    else if (a2 <= 0x7FFFFFFF)
    {
      uint64_t result = sqlite3_bind_int((sqlite3_stmt *)result, a2, a3);
      if ((_DWORD)result)
      {
        uint64_t v7 = result;
        unint64_t v8 = sub_1000E4274();
        uint64_t v9 = swift_allocError(&type metadata for SQLiteError, v8, 0LL, 0LL);
        *(void *)uint64_t v10 = v7;
        *(void *)(v10 + 8) = 0xD000000000000012LL;
        *(void *)(v10 + swift_weakDestroy(v0 + 16) = 0x8000000100173770LL;
        *(_BYTE *)(v10 + swift_weakDestroy(v0 + 24) = 0;
        return swift_willThrow(v9);
      }

      return result;
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_100110D40(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t result = sub_10011B510();
  if (!v3)
  {
    if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
    {
      __break(1u);
    }

    else if (a2 <= 0x7FFFFFFF)
    {
      uint64_t result = sqlite3_bind_int((sqlite3_stmt *)result, a2, a3);
      if ((_DWORD)result)
      {
        uint64_t v7 = result;
        unint64_t v8 = sub_1000E4274();
        uint64_t v9 = swift_allocError(&type metadata for SQLiteError, v8, 0LL, 0LL);
        *(void *)uint64_t v10 = v7;
        *(void *)(v10 + 8) = 0xD000000000000012LL;
        *(void *)(v10 + swift_weakDestroy(v0 + 16) = 0x8000000100173770LL;
        *(_BYTE *)(v10 + swift_weakDestroy(v0 + 24) = 0;
        return swift_willThrow(v9);
      }

      return result;
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_100110DFC(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t result = sub_10011B510();
  if (!v3)
  {
    if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
    {
      __break(1u);
    }

    else if (a2 <= 0x7FFFFFFF)
    {
      uint64_t result = sqlite3_bind_int((sqlite3_stmt *)result, a2, a3);
      if ((_DWORD)result)
      {
        uint64_t v7 = result;
        unint64_t v8 = sub_1000E4274();
        uint64_t v9 = swift_allocError(&type metadata for SQLiteError, v8, 0LL, 0LL);
        *(void *)uint64_t v10 = v7;
        *(void *)(v10 + 8) = 0xD000000000000012LL;
        *(void *)(v10 + swift_weakDestroy(v0 + 16) = 0x8000000100173770LL;
        *(_BYTE *)(v10 + swift_weakDestroy(v0 + 24) = 0;
        return swift_willThrow(v9);
      }

      return result;
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_100110EB8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = sub_10011B510();
  if (!v3)
  {
    if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
    {
      __break(1u);
    }

    else if (a2 <= 0x7FFFFFFF)
    {
      uint64_t result = sqlite3_bind_int((sqlite3_stmt *)result, a2, a3);
      if ((_DWORD)result)
      {
        uint64_t v7 = result;
        unint64_t v8 = sub_1000E4274();
        uint64_t v9 = swift_allocError(&type metadata for SQLiteError, v8, 0LL, 0LL);
        *(void *)uint64_t v10 = v7;
        *(void *)(v10 + 8) = 0xD000000000000012LL;
        *(void *)(v10 + swift_weakDestroy(v0 + 16) = 0x8000000100173770LL;
        *(_BYTE *)(v10 + swift_weakDestroy(v0 + 24) = 0;
        return swift_willThrow(v9);
      }

      return result;
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_100110F74(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = sub_10011B510();
  if (!v3)
  {
    if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
    {
      __break(1u);
    }

    else if (a2 <= 0x7FFFFFFF)
    {
      if ((a3 & 0x80000000) == 0)
      {
        uint64_t result = sqlite3_bind_int((sqlite3_stmt *)result, a2, a3);
        if ((_DWORD)result)
        {
          uint64_t v7 = result;
          unint64_t v8 = sub_1000E4274();
          uint64_t v9 = swift_allocError(&type metadata for SQLiteError, v8, 0LL, 0LL);
          *(void *)uint64_t v10 = v7;
          *(void *)(v10 + 8) = 0xD000000000000012LL;
          *(void *)(v10 + swift_weakDestroy(v0 + 16) = 0x8000000100173770LL;
          *(_BYTE *)(v10 + swift_weakDestroy(v0 + 24) = 0;
          return swift_willThrow(v9);
        }

        return result;
      }

void SQLiteInteger32.bind(to:at:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  a20 = v24;
  a21 = v25;
  sub_1001164CC(v26, v27, v28, v29);
  uint64_t v33 = sub_100116894( v30,  v31,  v32,  (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral,  (uint64_t)&associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v34 = sub_100116730(v33);
  __chkstk_darwin(v34);
  sub_100116534(v35, v63);
  __chkstk_darwin(v36);
  sub_10005A4F0();
  __chkstk_darwin(v37);
  sub_1001168D8();
  __chkstk_darwin(v38);
  sub_100116914();
  __chkstk_darwin(v39);
  sub_1001164B0();
  __chkstk_darwin(v40);
  sub_100116900();
  __chkstk_darwin(v41);
  sub_1001168EC();
  __chkstk_darwin(v42);
  sub_1001168C4();
  __chkstk_darwin(v43);
  sub_100116618();
  uint64_t v44 = v21;
  if (v21) {
    goto LABEL_17;
  }
  sub_10011650C();
  if (v48 != v49)
  {
    __break(1u);
    goto LABEL_19;
  }

  if (v47 > 0x7FFFFFFF)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  sub_1001165F0(v45, v46);
  sub_100116690();
  sub_1001165D0();
  sub_10011633C(v22);
  uint64_t v50 = sub_100116358();
  sub_100116408(v66);
  if (v50 < 33)
  {
    uint64_t v51 = sub_100116358();
    sub_10011633C(v66);
    if (v51 != 32 || (sub_100116364() & 1) != 0) {
      goto LABEL_15;
    }
  }

  else
  {
    sub_10011633C(v66);
  }

  sub_100116408(v70);
  a11 = 0x7FFFFFFF;
  char v52 = sub_100116364();
  uint64_t v44 = v70;
  uint64_t v53 = sub_100116358();
  if ((v52 & 1) != 0)
  {
    if (v53 > 32)
    {
      unint64_t v54 = sub_100111F38();
      sub_100116398((uint64_t)&a11, (uint64_t)&type metadata for Int32, v54);
      char v55 = sub_1001163E8(v67, v70);
      sub_10011633C(v67);
      uint64_t v56 = v70;
      goto LABEL_14;
    }

uint64_t sub_100111494@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1001101B8(a1, a2, a3);
}

void sub_1001114A8(_BYTE *a1@<X8>)
{
  char v3 = sub_10010F73C();
  if (!v1) {
    *a1 = v3;
  }
  sub_10010BF78();
}

uint64_t sub_1001114CC(uint64_t a1, uint64_t a2)
{
  return sub_100110C84(a1, a2, *v2);
}

uint64_t sub_1001114E8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100110488(a1, a2, a3);
}

void sub_1001114FC(_WORD *a1@<X8>)
{
  if (!v1) {
    *a1 = v3;
  }
  sub_10010BF78();
}

uint64_t sub_100111520(uint64_t a1, uint64_t a2)
{
  return sub_100110D40(a1, a2, *v2);
}

uint64_t sub_100111538@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1001102A8(a1, a2, a3);
}

void sub_10011154C(_WORD *a1@<X8>)
{
  if (!v1) {
    *a1 = v3;
  }
  sub_10010BF78();
}

uint64_t sub_100111570(uint64_t a1, uint64_t a2)
{
  return sub_100110DFC(a1, a2, *v2);
}

uint64_t sub_100111588@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100110578(a1, a2, a3);
}

void sub_10011159C(_DWORD *a1@<X8>)
{
  if (!v1) {
    *a1 = v3;
  }
  sub_10010BF78();
}

uint64_t sub_1001115C0(uint64_t a1, uint64_t a2)
{
  return sub_100110EB8(a1, a2, *v2);
}

uint64_t sub_1001115D8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100110398(a1, a2, a3);
}

void sub_1001115EC(_DWORD *a1@<X8>)
{
  if (!v1) {
    *a1 = v3;
  }
  sub_10010BF78();
}

uint64_t sub_100111610(uint64_t a1, uint64_t a2)
{
  return sub_100110F74(a1, a2, *v2);
}

uint64_t sub_100111628@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100110668(a1, a2, a3);
}

void sub_10011163C(void *a1@<X8>)
{
  if (!v1) {
    *a1 = v3;
  }
  sub_10010BF78();
}

void SQLiteInteger64.init(with:column:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, sqlite3_int64 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v28;
  a20 = v29;
  sub_10011655C();
  __chkstk_darwin(v30);
  sub_10005A4F0();
  __chkstk_darwin(v31);
  sub_1001164B0();
  __chkstk_darwin(v32);
  uint64_t v33 = (sqlite3_stmt *)sub_1001167F0();
  if (v20) {
    goto LABEL_9;
  }
  if (v23 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if (v23 <= 0x7FFFFFFF)
  {
    sqlite3_int64 v34 = sqlite3_column_int64(v33, v23);
    uint64_t v35 = *(void *)(v26 + 24);
    if (v21 != &type metadata for Int64)
    {
      uint64_t v47 = v34;
      sub_1001166B8();
      sub_1001167B0();
      uint64_t v36 = sub_1001166A4();
      if ((v35 & 1) != 0)
      {
        if (v36 <= 64)
        {
          uint64_t v41 = sub_100116414();
          sub_100116444(v22);
          sqlite3_int64 v34 = v47;
          if (v47 >= v41) {
            goto LABEL_8;
          }
        }

        else
        {
          a10 = v47;
          unint64_t v37 = sub_100111F74();
          sub_1001163C0((uint64_t)&a10, (uint64_t)&type metadata for Int64, v37);
          char v38 = sub_1001163E8(v27, v24);
          sub_1001164C4(v27);
          sub_1001164C4(v24);
          sqlite3_int64 v34 = v47;
          if ((v38 & 1) == 0) {
            goto LABEL_8;
          }
        }
      }

      else if (v36 > 63)
      {
        a10 = v47;
        sub_1001166E8();
        if (v47 < 0)
        {
          sub_1001164C4(v25);
          sub_1001164C4(v24);
        }

        else
        {
          unint64_t v42 = sub_100111F74();
          sub_1001163C0((uint64_t)&a10, (uint64_t)&type metadata for Int64, v42);
          char v43 = sub_1001163E8(v27, v25);
          sub_1001165E8(v27);
          sub_1001165E8(v25);
          sub_1001165E8(v24);
          sqlite3_int64 v34 = v47;
          if ((v43 & 1) == 0) {
            goto LABEL_8;
          }
        }
      }

      else
      {
        uint64_t v40 = sub_100116414();
        sub_100116444(v22);
        sqlite3_int64 v34 = v47;
        if (v47 >= v40) {
          goto LABEL_8;
        }
      }

      unint64_t v44 = sub_1000E4274();
      uint64_t v45 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v44);
      sub_10010FFF8(v45, v46);
      swift_release();
      goto LABEL_10;
    }

void sub_1001118B8()
{
  uint64_t v2 = (sqlite3_stmt *)sub_1001167E0();
  if (v0) {
    goto LABEL_6;
  }
  if (v1 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if (v1 <= 0x7FFFFFFF)
  {
    if (sub_1001168AC(v2))
    {
      unint64_t v3 = sub_1000E4274();
      uint64_t v4 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v3);
      sub_100116880(v4, v5);
      sub_1001163A8(v6, (uint64_t)"Failed to bind Int");
    }

LABEL_6:
    sub_1000E5738();
    return;
  }

  __break(1u);
}

  *(_OWORD *)a1 = v9;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(a1 + swift_weakDestroy(v0 + 24) = v7;
  *(void *)(a1 + 3sub_1000108B8(v0 + 2) = v6;
  *(void *)(a1 + 4sub_1000E3528(v0, v2, 0) = v7;
  return a3;
}

  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(a2 + swift_weakDestroy(v0 + 24) = v2;
  *(void *)(a2 + 3sub_1000108B8(v0 + 2) = v3;
  *(void *)(a2 + 4sub_1000E3528(v0, v2, 0) = v4;
  *(void *)(a2 + 48) = v5;
  *(void *)(a2 + 56) = v6;
  *(_BYTE *)(a2 + 64) = v12;
}

  sub_10002716C();
}

  sub_10002716C();
}

void sub_100111930()
{
  unint64_t v3 = (sqlite3_stmt *)sub_1001167E0();
  if (v0) {
    goto LABEL_7;
  }
  if (v2 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if ((v1 & 0x8000000000000000LL) == 0)
  {
    if (sub_1001168AC(v3))
    {
      unint64_t v4 = sub_1000E4274();
      uint64_t v5 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v4);
      sub_100116880(v5, v6);
      sub_1001163A8(v7, (uint64_t)"Failed to bind Int");
    }

void SQLiteInteger64.bind(to:at:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  sub_1001164CC(v25, v26, v27, v28);
  uint64_t v32 = sub_100116894( v29,  v30,  v31,  (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral,  (uint64_t)&associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v33 = sub_100116730(v32);
  __chkstk_darwin(v33);
  sub_100116534(v34, v62);
  __chkstk_darwin(v35);
  sub_10005A4F0();
  __chkstk_darwin(v36);
  sub_1001168D8();
  __chkstk_darwin(v37);
  sub_100116914();
  __chkstk_darwin(v38);
  sub_1001164B0();
  __chkstk_darwin(v39);
  sub_100116900();
  __chkstk_darwin(v40);
  sub_1001168EC();
  __chkstk_darwin(v41);
  sub_1001168C4();
  __chkstk_darwin(v42);
  sub_100116618();
  uint64_t v43 = v20;
  if (v20) {
    goto LABEL_17;
  }
  sub_10011650C();
  if (v47 != v48)
  {
    __break(1u);
    goto LABEL_19;
  }

  if (v46 > 0x7FFFFFFF)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  sub_1001165F0(v44, v45);
  sub_100116690();
  sub_1001165D0();
  sub_10011633C(v21);
  uint64_t v49 = sub_100116358();
  sub_100116408(v65);
  if (v49 < 65)
  {
    uint64_t v50 = sub_100116358();
    sub_10011633C(v65);
    if (v50 != 64 || (sub_100116364() & 1) != 0) {
      goto LABEL_15;
    }
  }

  else
  {
    sub_10011633C(v65);
  }

  sub_100116408(v69);
  a10 = 0x7FFFFFFFFFFFFFFFLL;
  char v51 = sub_100116364();
  uint64_t v43 = v69;
  uint64_t v52 = sub_100116358();
  if ((v51 & 1) != 0)
  {
    if (v52 > 64)
    {
      unint64_t v53 = sub_100111F74();
      sub_100116398((uint64_t)&a10, (uint64_t)&type metadata for Int64, v53);
      char v54 = sub_1001163E8(v66, v69);
      sub_10011633C(v66);
      uint64_t v55 = v69;
      goto LABEL_14;
    }

void sub_100111E0C(uint64_t a1, uint64_t a2)
{
}

void sub_100111E38(void *a1@<X8>)
{
  if (!v1) {
    *a1 = v3;
  }
  sub_10010BF78();
}

void sub_100111E60(uint64_t a1, uint64_t a2)
{
}

void sub_100111E8C(void *a1@<X8>)
{
  if (!v1) {
    *a1 = v3;
  }
  sub_10010BF78();
}

void sub_100111EB0()
{
}

void sub_100111EC8(uint64_t a1, uint64_t a2)
{
}

void sub_100111EF4()
{
}

void sub_100111F0C(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_100111F38()
{
  unint64_t result = qword_1001DAC80;
  if (!qword_1001DAC80)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int32, &type metadata for Int32);
    atomic_store(result, (unint64_t *)&qword_1001DAC80);
  }

  return result;
}

unint64_t sub_100111F74()
{
  unint64_t result = qword_1001DAC88;
  if (!qword_1001DAC88)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int64, &type metadata for Int64);
    atomic_store(result, (unint64_t *)&qword_1001DAC88);
  }

  return result;
}

unint64_t sub_100111FB0(uint64_t a1)
{
  unint64_t result = sub_100111FD4();
  *(void *)(a1 + swift_weakDestroy(v0 + 24) = result;
  return result;
}

unint64_t sub_100111FD4()
{
  unint64_t result = qword_1001DAC90;
  if (!qword_1001DAC90)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int8, &type metadata for Int8);
    atomic_store(result, (unint64_t *)&qword_1001DAC90);
  }

  return result;
}

unint64_t sub_100112010(uint64_t a1)
{
  unint64_t result = sub_100112034();
  *(void *)(a1 + swift_weakDestroy(v0 + 24) = result;
  return result;
}

unint64_t sub_100112034()
{
  unint64_t result = qword_1001DAC98;
  if (!qword_1001DAC98)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt8, &type metadata for UInt8);
    atomic_store(result, (unint64_t *)&qword_1001DAC98);
  }

  return result;
}

unint64_t sub_100112070(uint64_t a1)
{
  unint64_t result = sub_100112094();
  *(void *)(a1 + swift_weakDestroy(v0 + 24) = result;
  return result;
}

unint64_t sub_100112094()
{
  unint64_t result = qword_1001DACA0;
  if (!qword_1001DACA0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int16, &type metadata for Int16);
    atomic_store(result, (unint64_t *)&qword_1001DACA0);
  }

  return result;
}

unint64_t sub_1001120D0(uint64_t a1)
{
  unint64_t result = sub_1001120F4();
  *(void *)(a1 + swift_weakDestroy(v0 + 24) = result;
  return result;
}

unint64_t sub_1001120F4()
{
  unint64_t result = qword_1001DACA8;
  if (!qword_1001DACA8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt16, &type metadata for UInt16);
    atomic_store(result, (unint64_t *)&qword_1001DACA8);
  }

  return result;
}

unint64_t sub_100112130(uint64_t a1)
{
  unint64_t result = sub_100112154();
  *(void *)(a1 + swift_weakDestroy(v0 + 24) = result;
  return result;
}

unint64_t sub_100112154()
{
  unint64_t result = qword_1001DACB0;
  if (!qword_1001DACB0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int32, &type metadata for Int32);
    atomic_store(result, (unint64_t *)&qword_1001DACB0);
  }

  return result;
}

unint64_t sub_100112190(uint64_t a1)
{
  unint64_t result = sub_1001121B4();
  *(void *)(a1 + swift_weakDestroy(v0 + 24) = result;
  return result;
}

unint64_t sub_1001121B4()
{
  unint64_t result = qword_1001DACB8;
  if (!qword_1001DACB8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(result, (unint64_t *)&qword_1001DACB8);
  }

  return result;
}

unint64_t sub_1001121F0(uint64_t a1)
{
  unint64_t result = sub_100112214();
  *(void *)(a1 + swift_weakDestroy(v0 + 24) = result;
  return result;
}

unint64_t sub_100112214()
{
  unint64_t result = qword_1001DACC0;
  if (!qword_1001DACC0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int64, &type metadata for Int64);
    atomic_store(result, (unint64_t *)&qword_1001DACC0);
  }

  return result;
}

unint64_t sub_100112250(uint64_t a1)
{
  unint64_t result = sub_100112274();
  *(void *)(a1 + swift_weakDestroy(v0 + 24) = result;
  return result;
}

unint64_t sub_100112274()
{
  unint64_t result = qword_1001DACC8;
  if (!qword_1001DACC8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_1001DACC8);
  }

  return result;
}

unint64_t sub_1001122B0(uint64_t a1)
{
  unint64_t result = sub_1001122D4();
  *(void *)(a1 + swift_weakDestroy(v0 + 24) = result;
  return result;
}

unint64_t sub_1001122D4()
{
  unint64_t result = qword_1001DACD0;
  if (!qword_1001DACD0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1001DACD0);
  }

  return result;
}

unint64_t sub_100112310(uint64_t a1)
{
  unint64_t result = sub_100112334();
  *(void *)(a1 + swift_weakDestroy(v0 + 24) = result;
  return result;
}

unint64_t sub_100112334()
{
  unint64_t result = qword_1001DACD8;
  if (!qword_1001DACD8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt, &type metadata for UInt);
    atomic_store(result, (unint64_t *)&qword_1001DACD8);
  }

  return result;
}

uint64_t sub_100112370()
{
  if ((v2 & 0x1000000000000000LL) == 0)
  {
    if ((v2 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    sub_10011649C();
    return v0(v3);
  }

  sub_100116454();
  sub_100116424();
  sub_1001168A0();
  if ((v2 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v1 & 0x1000000000000000LL) != 0) {
    uint64_t v3 = sub_100116648();
  }
  else {
    uint64_t v3 = sub_1001165B8();
  }
  return v0(v3);
}

uint64_t sub_1001123EC(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unsigned __int8 v16 = 0;
    unsigned __int8 v66 = 0;
    goto LABEL_145;
  }

  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0)
    {
      unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      unint64_t result = _StringObject.sharedUTF8.getter(result, a2);
    }

    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v31 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v32 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v33 = a3 + 55;
          }

          else
          {
            unsigned __int8 v32 = 97;
            unsigned __int8 v33 = 65;
          }

          if (a3 <= 10) {
            unsigned __int8 v34 = a3 + 48;
          }
          else {
            unsigned __int8 v34 = 58;
          }
          if (result)
          {
            LOBYTE(v1sub_1000108B8(v0 + 2) = 0;
            uint64_t v35 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v36 = *v35;
              if (v36 < 0x30 || v36 >= v34)
              {
                if (v36 < 0x41 || v36 >= v33)
                {
                  unsigned __int8 v16 = 0;
                  char v17 = 1;
                  if (v36 < 0x61 || v36 >= v32) {
                    goto LABEL_144;
                  }
                  char v37 = -87;
                }

                else
                {
                  char v37 = -55;
                }
              }

              else
              {
                char v37 = -48;
              }

              int v38 = (char)v12 * (char)a3;
              char v39 = v38;
              int v12 = (char)v38 + (char)(v36 + v37);
              ++v35;
              --v31;
            }

            while (v31);
LABEL_76:
            char v17 = 0;
            unsigned __int8 v16 = v12;
            goto LABEL_144;
          }

          goto LABEL_99;
        }

unsigned __int8 *sub_1001129A4(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }

        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v22 = -87;
              }

              else
              {
                char v22 = -55;
              }
            }

            else
            {
              char v22 = -48;
            }

            int v23 = (char)v8 * (char)a3;
            char v24 = v23;
            int v8 = (char)v23 + (char)(v21 + v22);
            ++v20;
            --v16;
          }

          while (v16);
LABEL_48:
          int v13 = 0;
          unsigned __int8 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }

        goto LABEL_71;
      }

uint64_t sub_100112C58(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unsigned __int16 v16 = 0;
    unsigned __int8 v66 = 0;
    goto LABEL_145;
  }

  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0)
    {
      unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      unint64_t result = _StringObject.sharedUTF8.getter(result, a2);
    }

    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v31 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v32 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v33 = a3 + 55;
          }

          else
          {
            unsigned __int8 v32 = 97;
            unsigned __int8 v33 = 65;
          }

          if (a3 <= 10) {
            unsigned __int8 v34 = a3 + 48;
          }
          else {
            unsigned __int8 v34 = 58;
          }
          if (result)
          {
            LOWORD(v1sub_1000108B8(v0 + 2) = 0;
            uint64_t v35 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v36 = *v35;
              if (v36 < 0x30 || v36 >= v34)
              {
                if (v36 < 0x41 || v36 >= v33)
                {
                  unsigned __int16 v16 = 0;
                  char v17 = 1;
                  if (v36 < 0x61 || v36 >= v32) {
                    goto LABEL_144;
                  }
                  char v37 = -87;
                }

                else
                {
                  char v37 = -55;
                }
              }

              else
              {
                char v37 = -48;
              }

              int v38 = (__int16)v12 * (__int16)a3;
              __int16 v39 = v38;
              int v12 = (__int16)v38 + (v36 + v37);
              ++v35;
              --v31;
            }

            while (v31);
LABEL_76:
            char v17 = 0;
            unsigned __int16 v16 = v12;
            goto LABEL_144;
          }

          goto LABEL_99;
        }

unsigned __int8 *sub_100113210(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }

        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v22 = -87;
              }

              else
              {
                char v22 = -55;
              }
            }

            else
            {
              char v22 = -48;
            }

            int v23 = (__int16)v8 * (__int16)a3;
            __int16 v24 = v23;
            int v8 = (__int16)v23 + (v21 + v22);
            ++v20;
            --v16;
          }

          while (v16);
LABEL_48:
          int v13 = 0;
          unsigned __int16 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }

        goto LABEL_71;
      }

uint64_t sub_1001134C4(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unsigned int v16 = 0;
    unsigned __int8 v66 = 0;
    return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
  }

  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0)
    {
      unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      unint64_t result = _StringObject.sharedUTF8.getter(result, a2);
    }

    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v31 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v32 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v33 = a3 + 55;
          }

          else
          {
            unsigned __int8 v32 = 97;
            unsigned __int8 v33 = 65;
          }

          if (a3 <= 10) {
            unsigned __int8 v34 = a3 + 48;
          }
          else {
            unsigned __int8 v34 = 58;
          }
          if (result)
          {
            unsigned int v12 = 0;
            uint64_t v35 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v36 = *v35;
              if (v36 < 0x30 || v36 >= v34)
              {
                if (v36 < 0x41 || v36 >= v33)
                {
                  unsigned int v16 = 0;
                  char v17 = 1;
                  if (v36 < 0x61 || v36 >= v32) {
                    goto LABEL_144;
                  }
                  char v37 = -87;
                }

                else
                {
                  char v37 = -55;
                }
              }

              else
              {
                char v37 = -48;
              }

              uint64_t v38 = (int)v12 * (uint64_t)(int)a3;
              unsigned __int8 v39 = v36 + v37;
              unsigned int v12 = v38 + v39;
              if (__OFADD__((_DWORD)v38, v39)) {
                goto LABEL_143;
              }
              ++v35;
              --v31;
            }

            while (v31);
LABEL_76:
            char v17 = 0;
            unsigned int v16 = v12;
            goto LABEL_144;
          }

          goto LABEL_99;
        }

void sub_1001139FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
LABEL_130:
    sub_1001166CC();
    sub_1001167C0();
    return;
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((a1 & 0x1000000000000000LL) != 0)
    {
      uint64_t v4 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v4 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
    }

    int v6 = *v4;
    if (v6 == 43)
    {
      if (v5 >= 1)
      {
        if (v5 != 1)
        {
          sub_100116344();
          if (v23)
          {
            sub_100116868();
            while (1)
            {
              sub_100116850();
              if (v12 && v27 < v25)
              {
                char v28 = -48;
              }

              else if (v27 < 0x41 || v27 >= v24)
              {
                sub_100116608();
                if (!v12 || v27 >= v29) {
                  goto LABEL_130;
                }
                char v28 = -87;
              }

              else
              {
                char v28 = -55;
              }

              if ((unsigned __int128)(v26 * (__int128)a3) >> 64 == (v26 * a3) >> 63
                && !__OFADD__(v26 * a3, (v27 + v28)))
              {
                sub_10011685C();
                if (!v30) {
                  continue;
                }
              }

              goto LABEL_130;
            }
          }
        }

        goto LABEL_130;
      }

      goto LABEL_135;
    }

    if (v6 != 45)
    {
      if (v5)
      {
        sub_100116798();
        if (v31 ^ v32 | v30) {
          unsigned __int8 v36 = v38;
        }
        if (v31 ^ v32 | v30) {
          unsigned __int8 v37 = 65;
        }
        unsigned __int8 v39 = v31 ^ v32 | v30 ? v35 : 58;
        if (v34)
        {
          uint64_t v40 = 0LL;
          while (1)
          {
            unsigned int v41 = *v34;
            if (v41 < 0x30 || v41 >= v39)
            {
              if (v41 < 0x41 || v41 >= v37)
              {
                if (v41 < 0x61 || v41 >= v36) {
                  goto LABEL_130;
                }
                char v42 = -87;
              }

              else
              {
                char v42 = -55;
              }
            }

            else
            {
              char v42 = -48;
            }

            uint64_t v43 = v40 * a3;
            if ((unsigned __int128)(v40 * (__int128)a3) >> 64 == (v40 * a3) >> 63)
            {
              unsigned __int8 v44 = v41 + v42;
              uint64_t v40 = v43 + v44;
              if (!__OFADD__(v43, v44))
              {
                ++v34;
                if (--v33) {
                  continue;
                }
              }
            }

            goto LABEL_130;
          }
        }
      }

      goto LABEL_130;
    }

    if (v5 >= 1)
    {
      if (v5 != 1)
      {
        sub_100116344();
        if (v7)
        {
          sub_100116868();
          while (1)
          {
            sub_100116850();
            if (v12 && v11 < v9)
            {
              char v13 = -48;
            }

            else if (v11 < 0x41 || v11 >= v8)
            {
              sub_100116608();
              if (!v12 || v11 >= v14) {
                goto LABEL_130;
              }
              char v13 = -87;
            }

            else
            {
              char v13 = -55;
            }

            if ((unsigned __int128)(v10 * (__int128)a3) >> 64 == (v10 * a3) >> 63
              && !__OFSUB__(v10 * a3, (v11 + v13)))
            {
              sub_10011685C();
              if (!v30) {
                continue;
              }
            }

            goto LABEL_130;
          }
        }
      }

      goto LABEL_130;
    }

    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
    goto LABEL_136;
  }

  sub_100116758();
  if (!v30)
  {
    if (v15 != 45)
    {
      if (v16)
      {
        sub_100116344();
        while (1)
        {
          sub_100116670();
          if (v12 && v54 < v53)
          {
            char v55 = -48;
          }

          else if (v54 < 0x41 || v54 >= v52)
          {
            sub_100116434();
            if (!v12 || v54 >= v56) {
              goto LABEL_130;
            }
            char v55 = -87;
          }

          else
          {
            char v55 = -55;
          }

          if ((unsigned __int128)(v51 * (__int128)a3) >> 64 == (v51 * a3) >> 63
            && !__OFADD__(v51 * a3, (v54 + v55)))
          {
            sub_100116724();
            if (!v30) {
              continue;
            }
          }

          goto LABEL_130;
        }
      }

      goto LABEL_130;
    }

    if (v16)
    {
      if (v16 != 1)
      {
        sub_100116344();
        sub_1001168B8();
        while (1)
        {
          sub_100116670();
          if (v12 && v20 < v19)
          {
            char v21 = -48;
          }

          else if (v20 < 0x41 || v20 >= v18)
          {
            sub_100116434();
            if (!v12 || v20 >= v22) {
              goto LABEL_130;
            }
            char v21 = -87;
          }

          else
          {
            char v21 = -55;
          }

          if ((unsigned __int128)(v17 * (__int128)a3) >> 64 == (v17 * a3) >> 63
            && !__OFSUB__(v17 * a3, (v20 + v21)))
          {
            sub_100116724();
            if (!v30) {
              continue;
            }
          }

          goto LABEL_130;
        }
      }

      goto LABEL_130;
    }

    goto LABEL_134;
  }

  if (v16)
  {
    if (v16 != 1)
    {
      sub_100116344();
      sub_1001168B8();
      while (1)
      {
        sub_100116670();
        if (v12 && v48 < v47)
        {
          char v49 = -48;
        }

        else if (v48 < 0x41 || v48 >= v46)
        {
          sub_100116434();
          if (!v12 || v48 >= v50) {
            goto LABEL_130;
          }
          char v49 = -87;
        }

        else
        {
          char v49 = -55;
        }

        if ((unsigned __int128)(v45 * (__int128)a3) >> 64 == (v45 * a3) >> 63
          && !__OFADD__(v45 * a3, (v48 + v49)))
        {
          sub_100116724();
          if (!v30) {
            continue;
          }
        }

        goto LABEL_130;
      }
    }

    goto LABEL_130;
  }

LABEL_136:
  __break(1u);
}

  __break(1u);
}

unsigned __int8 *sub_100113E7C(unsigned __int8 *result, uint64_t a2)
{
  int v2 = *result;
  if (v2 == 43)
  {
    if (a2 >= 1)
    {
      if (a2 != 1)
      {
        sub_1001164F4();
        if (v20 ^ v21 | v19) {
          unsigned __int8 v25 = v28;
        }
        if (v20 ^ v21 | v19) {
          unsigned __int8 v26 = 65;
        }
        if (!(v20 ^ v21 | v19)) {
          unsigned __int8 v27 = 58;
        }
        if (v22)
        {
          uint64_t v13 = 0LL;
          unsigned __int8 v29 = (unsigned __int8 *)(v22 + 1);
          do
          {
            unsigned int v30 = *v29;
            if (v30 < 0x30 || v30 >= v27)
            {
              if (v30 < 0x41 || v30 >= v26)
              {
                uint64_t v17 = 0LL;
                if (v30 < 0x61 || v30 >= v25) {
                  return (unsigned __int8 *)v17;
                }
                char v31 = -87;
              }

              else
              {
                char v31 = -55;
              }
            }

            else
            {
              char v31 = -48;
            }

            uint64_t v32 = v13 * v23;
            uint64_t v13 = v32 + (v30 + v31);
            ++v29;
            --v24;
          }

          while (v24);
          return (unsigned __int8 *)v13;
        }

        return 0LL;
      }

      return 0LL;
    }
  }

  else
  {
    if (v2 != 45)
    {
      if (a2)
      {
        sub_1001164F4();
        if (v34 ^ v35 | v33) {
          unsigned __int8 v39 = v42;
        }
        if (v34 ^ v35 | v33) {
          unsigned __int8 v40 = 65;
        }
        if (!(v34 ^ v35 | v33)) {
          unsigned __int8 v41 = 58;
        }
        if (v36)
        {
          uint64_t v43 = 0LL;
          do
          {
            unsigned int v44 = *v36;
            if (v44 < 0x30 || v44 >= v41)
            {
              if (v44 < 0x41 || v44 >= v40)
              {
                uint64_t v17 = 0LL;
                if (v44 < 0x61 || v44 >= v39) {
                  return (unsigned __int8 *)v17;
                }
                char v45 = -87;
              }

              else
              {
                char v45 = -55;
              }
            }

            else
            {
              char v45 = -48;
            }

            uint64_t v46 = v43 * v37;
            uint64_t v43 = v46 + (v44 + v45);
            ++v36;
            --v38;
          }

          while (v38);
          return (unsigned __int8 *)(v46 + (v44 + v45));
        }

        return 0LL;
      }

      return 0LL;
    }

    if (a2 >= 1)
    {
      if (a2 != 1)
      {
        sub_1001164F4();
        if (v4 ^ v5 | v3) {
          unsigned __int8 v9 = v12;
        }
        if (v4 ^ v5 | v3) {
          unsigned __int8 v10 = 65;
        }
        if (!(v4 ^ v5 | v3)) {
          unsigned __int8 v11 = 58;
        }
        if (v6)
        {
          uint64_t v13 = 0LL;
          for (unint64_t i = (unsigned __int8 *)(v6 + 1); ; ++i)
          {
            unsigned int v15 = *i;
            if (v15 < 0x30 || v15 >= v11)
            {
              if (v15 < 0x41 || v15 >= v10)
              {
                uint64_t v17 = 0LL;
                if (v15 < 0x61 || v15 >= v9) {
                  return (unsigned __int8 *)v17;
                }
                char v16 = -87;
              }

              else
              {
                char v16 = -55;
              }
            }

            else
            {
              char v16 = -48;
            }

            uint64_t v18 = v13 * v7;
            uint64_t v13 = v18 - (v15 + v16);
            if (!--v8) {
              return (unsigned __int8 *)v13;
            }
          }
        }

        return 0LL;
      }

      return 0LL;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1001140E0(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unsigned __int8 v16 = 0;
    unsigned __int8 v54 = 0;
    goto LABEL_145;
  }

  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0)
    {
      unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      unint64_t result = _StringObject.sharedUTF8.getter(result, a2);
    }

    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v27 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v28 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v29 = a3 + 55;
          }

          else
          {
            unsigned __int8 v28 = 97;
            unsigned __int8 v29 = 65;
          }

          if (a3 <= 10) {
            unsigned __int8 v30 = a3 + 48;
          }
          else {
            unsigned __int8 v30 = 58;
          }
          if (result)
          {
            LOBYTE(v1sub_1000108B8(v0 + 2) = 0;
            char v31 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v32 = *v31;
              if (v32 < 0x30 || v32 >= v30)
              {
                if (v32 < 0x41 || v32 >= v29)
                {
                  unsigned __int8 v16 = 0;
                  char v17 = 1;
                  if (v32 < 0x61 || v32 >= v28) {
                    goto LABEL_144;
                  }
                  char v33 = -87;
                }

                else
                {
                  char v33 = -55;
                }
              }

              else
              {
                char v33 = -48;
              }

              unsigned int v12 = (v12 * a3) + (v32 + v33);
              if (((v12 >> 8) & 1) != 0) {
                goto LABEL_143;
              }
              ++v31;
              --v27;
            }

            while (v27);
LABEL_76:
            char v17 = 0;
            unsigned __int8 v16 = v12;
            goto LABEL_144;
          }

          goto LABEL_99;
        }

void sub_100114680(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_1001163D4(a1, a2);
  sub_1001167D8( v2,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol witness table for String,  v3,  v4);
  sub_1001163F0();
  sub_1001146D0();
  sub_1001167D0(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
  sub_100014A40();
}

void sub_1001146D0()
{
  if ((v1 & 0x1000000000000000LL) == 0)
  {
    if ((v1 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    sub_10011649C();
    goto LABEL_7;
  }

  sub_100116454();
  sub_100116424();
  sub_1001168A0();
  if ((v1 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v0 & 0x1000000000000000LL) != 0) {
    uint64_t v2 = sub_100116648();
  }
  else {
    uint64_t v2 = sub_1001165B8();
  }
LABEL_7:
  sub_100116874(v2, v3);
  sub_100116630();
}

unsigned __int8 *sub_100114738(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v15 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = a3 + 55;
        }

        else
        {
          unsigned __int8 v15 = 97;
          unsigned __int8 v16 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          uint64_t v18 = result + 1;
          do
          {
            unsigned int v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v20 = -87;
              }

              else
              {
                char v20 = -55;
              }
            }

            else
            {
              char v20 = -48;
            }

            unsigned int v8 = (v8 * a3) + (v19 + v20);
            if (((v8 >> 8) & 1) != 0) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }

          while (v14);
LABEL_48:
          int v13 = 0;
          unsigned __int8 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }

        goto LABEL_71;
      }

uint64_t sub_1001149E0(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unsigned __int16 v16 = 0;
    unsigned __int8 v54 = 0;
    goto LABEL_145;
  }

  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0)
    {
      unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      unint64_t result = _StringObject.sharedUTF8.getter(result, a2);
    }

    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v27 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v28 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v29 = a3 + 55;
          }

          else
          {
            unsigned __int8 v28 = 97;
            unsigned __int8 v29 = 65;
          }

          if (a3 <= 10) {
            unsigned __int8 v30 = a3 + 48;
          }
          else {
            unsigned __int8 v30 = 58;
          }
          if (result)
          {
            LOWORD(v1sub_1000108B8(v0 + 2) = 0;
            char v31 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v32 = *v31;
              if (v32 < 0x30 || v32 >= v30)
              {
                if (v32 < 0x41 || v32 >= v29)
                {
                  unsigned __int16 v16 = 0;
                  char v17 = 1;
                  if (v32 < 0x61 || v32 >= v28) {
                    goto LABEL_144;
                  }
                  char v33 = -87;
                }

                else
                {
                  char v33 = -55;
                }
              }

              else
              {
                char v33 = -48;
              }

              int v12 = (unsigned __int16)(v12 * a3) + (v32 + v33);
              if ((v12 & 0x10000) != 0) {
                goto LABEL_143;
              }
              ++v31;
              --v27;
            }

            while (v27);
LABEL_76:
            char v17 = 0;
            unsigned __int16 v16 = v12;
            goto LABEL_144;
          }

          goto LABEL_99;
        }

void sub_100114F80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_1001163D4(a1, a2);
  sub_1001167D8( v2,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol witness table for String,  v3,  v4);
  sub_1001163F0();
  sub_100114FD0();
  sub_1001167D0(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
  sub_100014A40();
}

void sub_100114FD0()
{
  if ((v1 & 0x1000000000000000LL) == 0)
  {
    if ((v1 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    sub_10011649C();
    goto LABEL_7;
  }

  sub_100116454();
  sub_100116424();
  sub_1001168A0();
  if ((v1 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v0 & 0x1000000000000000LL) != 0) {
    uint64_t v2 = sub_100116648();
  }
  else {
    uint64_t v2 = sub_1001165B8();
  }
LABEL_7:
  sub_100116874(v2, v3);
  sub_100116630();
}

unsigned __int8 *sub_100115030(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v15 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = a3 + 55;
        }

        else
        {
          unsigned __int8 v15 = 97;
          unsigned __int8 v16 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          uint64_t v18 = result + 1;
          do
          {
            unsigned int v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v20 = -87;
              }

              else
              {
                char v20 = -55;
              }
            }

            else
            {
              char v20 = -48;
            }

            int v8 = (unsigned __int16)(v8 * a3) + (v19 + v20);
            if ((v8 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }

          while (v14);
LABEL_48:
          int v13 = 0;
          unsigned __int16 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }

        goto LABEL_71;
      }

uint64_t sub_1001152D8(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unsigned int v16 = 0;
    unsigned __int8 v66 = 0;
    return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
  }

  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0)
    {
      unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      unint64_t result = _StringObject.sharedUTF8.getter(result, a2);
    }

    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v31 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v32 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v33 = a3 + 55;
          }

          else
          {
            unsigned __int8 v32 = 97;
            unsigned __int8 v33 = 65;
          }

          if (a3 <= 10) {
            unsigned __int8 v34 = a3 + 48;
          }
          else {
            unsigned __int8 v34 = 58;
          }
          if (result)
          {
            unsigned int v12 = 0;
            unsigned __int8 v35 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v36 = *v35;
              if (v36 < 0x30 || v36 >= v34)
              {
                if (v36 < 0x41 || v36 >= v33)
                {
                  unsigned int v16 = 0;
                  char v17 = 1;
                  if (v36 < 0x61 || v36 >= v32) {
                    goto LABEL_144;
                  }
                  char v37 = -87;
                }

                else
                {
                  char v37 = -55;
                }
              }

              else
              {
                char v37 = -48;
              }

              unint64_t v38 = v12 * (unint64_t)a3;
              if ((v38 & 0xFFFFFFFF00000000LL) != 0) {
                goto LABEL_143;
              }
              unsigned __int8 v39 = v36 + v37;
              unsigned int v12 = v38 + v39;
              if (__CFADD__((_DWORD)v38, v39)) {
                goto LABEL_143;
              }
              ++v35;
              --v31;
            }

            while (v31);
LABEL_76:
            char v17 = 0;
            unsigned int v16 = v12;
            goto LABEL_144;
          }

          goto LABEL_99;
        }

uint64_t sub_100115810(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_1001163D4(a1, a2);
  sub_1001167D8( v2,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol witness table for String,  v3,  v4);
  sub_1001163F0();
  unint64_t v5 = sub_100115874();
  sub_1001167D0(v5, v6, v7, v8, v9, v10, v11, v12, v14, v15, v16, v17);
  return v5 | ((HIDWORD(v5) & 1) << 32);
}

unint64_t sub_100115874()
{
  if ((v3 & 0x1000000000000000LL) != 0)
  {
    sub_100116454();
    sub_100116424();
    sub_1001168A0();
    if ((v3 & 0x2000000000000000LL) == 0)
    {
LABEL_3:
      if ((v2 & 0x1000000000000000LL) != 0) {
        uint64_t v4 = sub_100116648();
      }
      else {
        uint64_t v4 = sub_1001165B8();
      }
      goto LABEL_7;
    }
  }

  else if ((v3 & 0x2000000000000000LL) == 0)
  {
    goto LABEL_3;
  }

  sub_10011649C();
LABEL_7:
  unint64_t result = v0(v4);
  if (!v1) {
    return result | ((HIDWORD(result) & 1) << 32);
  }
  return result;
}

unsigned __int8 *sub_1001158F8(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }

        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }

              else
              {
                char v22 = -55;
              }
            }

            else
            {
              char v22 = -48;
            }

            unint64_t v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000LL) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__CFADD__((_DWORD)v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }

          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }

        goto LABEL_71;
      }

void sub_100115B78(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
LABEL_130:
    sub_1001166CC();
    sub_1001167C0();
    return;
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((a1 & 0x1000000000000000LL) != 0)
    {
      uint64_t v4 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v4 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
    }

    int v6 = *v4;
    if (v6 == 43)
    {
      if (v5 >= 1)
      {
        if (v5 != 1)
        {
          sub_100116344();
          if (v23)
          {
            sub_100116868();
            while (1)
            {
              sub_100116850();
              if (v12 && v27 < v25)
              {
                char v28 = -48;
              }

              else if (v27 < 0x41 || v27 >= v24)
              {
                sub_100116608();
                if (!v12 || v27 >= v29) {
                  goto LABEL_130;
                }
                char v28 = -87;
              }

              else
              {
                char v28 = -55;
              }

              if (is_mul_ok(v26, a3) && !__CFADD__(v26 * a3, (v27 + v28)))
              {
                sub_10011685C();
                if (!v30) {
                  continue;
                }
              }

              goto LABEL_130;
            }
          }
        }

        goto LABEL_130;
      }

      goto LABEL_135;
    }

    if (v6 != 45)
    {
      if (v5)
      {
        sub_100116798();
        if (v31 ^ v32 | v30) {
          unsigned __int8 v36 = v38;
        }
        if (v31 ^ v32 | v30) {
          unsigned __int8 v37 = 65;
        }
        unsigned __int8 v39 = v31 ^ v32 | v30 ? v35 : 58;
        if (v34)
        {
          unint64_t v40 = 0LL;
          while (1)
          {
            unsigned int v41 = *v34;
            if (v41 < 0x30 || v41 >= v39)
            {
              if (v41 < 0x41 || v41 >= v37)
              {
                if (v41 < 0x61 || v41 >= v36) {
                  goto LABEL_130;
                }
                char v42 = -87;
              }

              else
              {
                char v42 = -55;
              }
            }

            else
            {
              char v42 = -48;
            }

            if (is_mul_ok(v40, a3))
            {
              unint64_t v43 = v40 * a3;
              unsigned __int8 v44 = v41 + v42;
              BOOL v12 = __CFADD__(v43, v44);
              unint64_t v40 = v43 + v44;
              if (!v12)
              {
                ++v34;
                if (--v33) {
                  continue;
                }
              }
            }

            goto LABEL_130;
          }
        }
      }

      goto LABEL_130;
    }

    if (v5 >= 1)
    {
      if (v5 != 1)
      {
        sub_100116344();
        if (v7)
        {
          sub_100116868();
          while (1)
          {
            sub_100116850();
            if (v12 && v11 < v9)
            {
              char v13 = -48;
            }

            else if (v11 < 0x41 || v11 >= v8)
            {
              sub_100116608();
              if (!v12 || v11 >= v14) {
                goto LABEL_130;
              }
              char v13 = -87;
            }

            else
            {
              char v13 = -55;
            }

            if (is_mul_ok(v10, a3) && v10 * a3 >= (v11 + v13))
            {
              sub_10011685C();
              if (!v30) {
                continue;
              }
            }

            goto LABEL_130;
          }
        }
      }

      goto LABEL_130;
    }

    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
    goto LABEL_136;
  }

  sub_100116758();
  if (!v30)
  {
    if (v15 != 45)
    {
      if (v16)
      {
        sub_100116344();
        while (1)
        {
          sub_100116670();
          if (v12 && v54 < v53)
          {
            char v55 = -48;
          }

          else if (v54 < 0x41 || v54 >= v52)
          {
            sub_100116434();
            if (!v12 || v54 >= v56) {
              goto LABEL_130;
            }
            char v55 = -87;
          }

          else
          {
            char v55 = -55;
          }

          if (is_mul_ok(v51, a3) && !__CFADD__(v51 * a3, (v54 + v55)))
          {
            sub_100116724();
            if (!v30) {
              continue;
            }
          }

          goto LABEL_130;
        }
      }

      goto LABEL_130;
    }

    if (v16)
    {
      if (v16 != 1)
      {
        sub_100116344();
        sub_1001168B8();
        while (1)
        {
          sub_100116670();
          if (v12 && v20 < v19)
          {
            char v21 = -48;
          }

          else if (v20 < 0x41 || v20 >= v18)
          {
            sub_100116434();
            if (!v12 || v20 >= v22) {
              goto LABEL_130;
            }
            char v21 = -87;
          }

          else
          {
            char v21 = -55;
          }

          if (is_mul_ok(v17, a3) && v17 * a3 >= (v20 + v21))
          {
            sub_100116724();
            if (!v30) {
              continue;
            }
          }

          goto LABEL_130;
        }
      }

      goto LABEL_130;
    }

    goto LABEL_134;
  }

  if (v16)
  {
    if (v16 != 1)
    {
      sub_100116344();
      sub_1001168B8();
      while (1)
      {
        sub_100116670();
        if (v12 && v48 < v47)
        {
          char v49 = -48;
        }

        else if (v48 < 0x41 || v48 >= v46)
        {
          sub_100116434();
          if (!v12 || v48 >= v50) {
            goto LABEL_130;
          }
          char v49 = -87;
        }

        else
        {
          char v49 = -55;
        }

        if (is_mul_ok(v45, a3) && !__CFADD__(v45 * a3, (v48 + v49)))
        {
          sub_100116724();
          if (!v30) {
            continue;
          }
        }

        goto LABEL_130;
      }
    }

    goto LABEL_130;
  }

uint64_t sub_100115FF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_1001163D4(a1, a2);
  sub_1001167D8( v2,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol witness table for String,  v3,  v4);
  sub_1001163F0();
  uint64_t v5 = sub_100112370();
  sub_1001167D0(v5, v6, v7, v8, v9, v10, v11, v12, v14, v15, v16, v17);
  return v5;
}

unsigned __int8 *sub_10011605C(unsigned __int8 *result, uint64_t a2)
{
  int v2 = *result;
  if (v2 == 43)
  {
    if (a2 >= 1)
    {
      if (a2 != 1)
      {
        sub_1001164F4();
        if (v22 ^ v23 | v21) {
          unsigned __int8 v27 = v30;
        }
        if (v22 ^ v23 | v21) {
          unsigned __int8 v28 = 65;
        }
        if (!(v22 ^ v23 | v21)) {
          unsigned __int8 v29 = 58;
        }
        if (v24)
        {
          unint64_t v13 = 0LL;
          char v31 = (unsigned __int8 *)(v24 + 1);
          do
          {
            unsigned int v32 = *v31;
            if (v32 < 0x30 || v32 >= v29)
            {
              if (v32 < 0x41 || v32 >= v28)
              {
                uint64_t v17 = 0LL;
                if (v32 < 0x61 || v32 >= v27) {
                  return (unsigned __int8 *)v17;
                }
                char v33 = -87;
              }

              else
              {
                char v33 = -55;
              }
            }

            else
            {
              char v33 = -48;
            }

            if (!is_mul_ok(v13, v25)) {
              return 0LL;
            }
            unint64_t v34 = v13 * v25;
            unsigned __int8 v35 = v32 + v33;
            BOOL v20 = __CFADD__(v34, v35);
            unint64_t v13 = v34 + v35;
            if (v20) {
              return 0LL;
            }
            ++v31;
            --v26;
          }

          while (v26);
          return (unsigned __int8 *)v13;
        }

        return 0LL;
      }

      return 0LL;
    }
  }

  else
  {
    if (v2 != 45)
    {
      if (a2)
      {
        sub_1001164F4();
        if (v37 ^ v38 | v36) {
          unsigned __int8 v42 = v45;
        }
        if (v37 ^ v38 | v36) {
          unsigned __int8 v43 = 65;
        }
        if (!(v37 ^ v38 | v36)) {
          unsigned __int8 v44 = 58;
        }
        if (v39)
        {
          unint64_t v46 = 0LL;
          do
          {
            unsigned int v47 = *v39;
            if (v47 < 0x30 || v47 >= v44)
            {
              if (v47 < 0x41 || v47 >= v43)
              {
                uint64_t v17 = 0LL;
                if (v47 < 0x61 || v47 >= v42) {
                  return (unsigned __int8 *)v17;
                }
                char v48 = -87;
              }

              else
              {
                char v48 = -55;
              }
            }

            else
            {
              char v48 = -48;
            }

            if (!is_mul_ok(v46, v40)) {
              return 0LL;
            }
            unint64_t v49 = v46 * v40;
            unsigned __int8 v50 = v47 + v48;
            BOOL v20 = __CFADD__(v49, v50);
            unint64_t v46 = v49 + v50;
            if (v20) {
              return 0LL;
            }
            ++v39;
            --v41;
          }

          while (v41);
          return (unsigned __int8 *)v46;
        }

        return 0LL;
      }

      return 0LL;
    }

    if (a2 >= 1)
    {
      if (a2 != 1)
      {
        sub_1001164F4();
        if (v4 ^ v5 | v3) {
          unsigned __int8 v9 = v12;
        }
        if (v4 ^ v5 | v3) {
          unsigned __int8 v10 = 65;
        }
        if (!(v4 ^ v5 | v3)) {
          unsigned __int8 v11 = 58;
        }
        if (v6)
        {
          unint64_t v13 = 0LL;
          for (unint64_t i = (unsigned __int8 *)(v6 + 1); ; ++i)
          {
            unsigned int v15 = *i;
            if (v15 < 0x30 || v15 >= v11)
            {
              if (v15 < 0x41 || v15 >= v10)
              {
                uint64_t v17 = 0LL;
                if (v15 < 0x61 || v15 >= v9) {
                  return (unsigned __int8 *)v17;
                }
                char v16 = -87;
              }

              else
              {
                char v16 = -55;
              }
            }

            else
            {
              char v16 = -48;
            }

            if (!is_mul_ok(v13, v7)) {
              return 0LL;
            }
            unint64_t v18 = v13 * v7;
            unsigned __int8 v19 = v15 + v16;
            BOOL v20 = v18 >= v19;
            unint64_t v13 = v18 - v19;
            if (!v20) {
              return 0LL;
            }
            if (!--v8) {
              return (unsigned __int8 *)v13;
            }
          }
        }

        return 0LL;
      }

      return 0LL;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1001162C0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_1000094A0(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v4);
    atomic_store(result, a1);
  }

  return result;
}

void sub_100116314()
{
}

void sub_100116328()
{
}

uint64_t sub_10011633C(uint64_t a1)
{
  return v2(a1, v1);
}

  ;
}

uint64_t sub_100116358()
{
  return dispatch thunk of BinaryInteger.bitWidth.getter(v0, v1);
}

uint64_t sub_100116364()
{
  return dispatch thunk of static BinaryInteger.isSigned.getter(v0, v1);
}

uint64_t sub_100116374()
{
  return dispatch thunk of BinaryInteger._lowWord.getter(v0, v1);
}

uint64_t sub_100116380()
{
  return dispatch thunk of static Comparable.< infix(_:_:)(v0, v1);
}

uint64_t sub_100116398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(a1, a2, a3, v3, v4);
}

uint64_t sub_1001163A8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = (a2 - 32) | 0x8000000000000000LL;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 24) = 0;
  return swift_willThrow();
}

uint64_t sub_1001163C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(a1, a2, a3, v3, v4);
}

uint64_t sub_1001163D4(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1001163E8(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of static Comparable.< infix(_:_:)(a1, a2);
}

  ;
}

uint64_t sub_100116408(uint64_t a1)
{
  return v2(a1, v3, v1);
}

uint64_t sub_100116414()
{
  return dispatch thunk of BinaryInteger._lowWord.getter(v0, v1);
}

uint64_t sub_100116424()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100116434()
{
  return 0LL;
}

uint64_t sub_100116444@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_100116454()
{
  return sub_1000CA2F4(v0, v1);
}

  ;
}

uint64_t sub_100116478(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10000941C(a3);
}

  ;
}

  ;
}

uint64_t sub_1001164C4(uint64_t a1)
{
  return v1(a1, v2);
}

void sub_1001164CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v6 - 104) = a2;
  *(void *)(v6 - 96) = v5;
  *(void *)(v6 - 12sub_1000E3528(v0, v2, 0) = v4;
  *(void *)(v6 - 136) = *(void *)(*(void *)(a4 + 24) + 8LL);
}

  ;
}

void sub_10011650C()
{
  *(void *)(v6 - 2swift_weakDestroy(v0 + 16) = v4;
  *(void *)(v6 - 208) = v3;
  *(void *)(v6 - 20sub_1000E3528(v0, v2, 0) = v1;
  *(void *)(v6 - 176) = v5;
  *(void *)(v6 - 168) = v0;
  *(void *)(v6 - 96) = v2;
}

void sub_100116534(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v3 - 16sub_1000E3528(v0, v2, 0) = (char *)&a2 - a1;
  *(void *)(v3 - 128) = v2;
  *(void *)(v3 - 11sub_1000108B8(v0 + 2) = *(void *)(v2 - 8);
}

  ;
}

uint64_t sub_100116580()
{
  return dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v1, v0, *(void *)(v2 - 144));
}

uint64_t sub_10011659C()
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(v2 - 112) + 32LL))( *(void *)(v2 - 216),  v1,  v0);
}

uint64_t sub_1001165B8()
{
  return _StringObject.sharedUTF8.getter(v0, v1);
}

uint64_t sub_1001165C4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

uint64_t sub_1001165D0()
{
  return v1(v3, v2, v0);
}

uint64_t sub_1001165E8(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_1001165F0(uint64_t a1, uint64_t a2)
{
  *(void *)(v5 - 19sub_1000108B8(v0 + 2) = a1;
  *(void *)(v5 - 184) = v2;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 112) + 16LL))(v4, a2, v3);
}

uint64_t sub_100116608()
{
  return 0LL;
}

uint64_t sub_100116618()
{
  return sub_10011B510();
}

  ;
}

uint64_t sub_100116648()
{
  return (v0 & 0xFFFFFFFFFFFFFFFLL) + 32;
}

uint64_t sub_100116658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of BinaryInteger.init<A>(_:)(v5 - 72, a2, a3, v3, v4);
}

  ;
}

uint64_t sub_10011667C(uint64_t a1)
{
  *(void *)(v1 + swift_weakDestroy(v0 + 24) = a1;
  return sub_1001162C0(v2, v3);
}

uint64_t sub_100116690()
{
  return dispatch thunk of static BinaryInteger.isSigned.getter(v0, v1);
}

uint64_t sub_1001166A4()
{
  return dispatch thunk of BinaryInteger.bitWidth.getter(v0, v1);
}

uint64_t sub_1001166B8()
{
  return dispatch thunk of static FixedWidthInteger.min.getter(v0, v1);
}

  ;
}

uint64_t sub_1001166E8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v3, v2, v0);
}

uint64_t sub_1001166FC(uint64_t a1)
{
  return dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(a1, 256LL, v1);
}

  ;
}

  ;
}

uint64_t sub_100116730(uint64_t result)
{
  *(void *)(v1 - 15sub_1000108B8(v0 + 2) = result;
  return result;
}

uint64_t sub_100116748()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t sub_100116770()
{
  return sub_100115FF8(v1, v0);
}

uint64_t sub_100116780(uint64_t result)
{
  *(void *)(v1 + 3sub_1000108B8(v0 + 2) = result;
  return result;
}

  ;
}

uint64_t sub_1001167B0()
{
  return dispatch thunk of static BinaryInteger.isSigned.getter(v0, *(void *)(v1 + 8));
}

  ;
}

uint64_t sub_1001167D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return swift_bridgeObjectRelease(a12);
}

uint64_t sub_1001167D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return String.init<A>(_:)(va, a2, a3, a4);
}

uint64_t sub_1001167E0()
{
  return sub_10011B510();
}

uint64_t sub_1001167F0()
{
  return sub_10011B510();
}

  ;
}

uint64_t sub_100116818()
{
  return swift_getAssociatedConformanceWitness(*(void *)(v1 - 144), v0, *(void *)(v1 - 152));
}

void sub_100116828(uint64_t a1, void *a2)
{
  *a2 = v2;
  a2[1] = 0xD000000000000012LL;
}

uint64_t sub_10011683C()
{
  return v0;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100116874(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

void sub_100116880(uint64_t a1, void *a2)
{
  *a2 = v2;
  a2[1] = 0xD000000000000012LL;
}

uint64_t sub_100116894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 - 144) = a2;
  return swift_getAssociatedTypeWitness(0LL, a2, a3, a4, a5);
}

void sub_1001168A0()
{
  *uint64_t v1 = v0;
  v1[1] = v2;
}

uint64_t sub_1001168AC(sqlite3_stmt *a1)
{
  return sqlite3_bind_int64(a1, v2, v1);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100116928@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess(*a1 + 24, v6, 0LL, 0LL);
  uint64_t v4 = *(void *)(v3 + 32);
  *a2 = *(void *)(v3 + 24);
  a2[1] = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_100116970(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  swift_beginAccess(*a2 + 24, v7, 1LL, 0LL);
  uint64_t v5 = *(void *)(v4 + 32);
  *(void *)(v4 + swift_weakDestroy(v0 + 24) = v3;
  *(void *)(v4 + 3sub_1000108B8(v0 + 2) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v5);
}

uint64_t SQLiteBaseFunction.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(*(void *)(v0 + 32));
  return v1;
}

uint64_t SQLiteBaseFunction.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, 40LL, 7LL);
  SQLiteBaseFunction.init()();
  return v1;
}

uint64_t SQLiteBaseFunction.init()()
{
  *(void *)(v0 + swift_weakDestroy(v0 + 24) = 0LL;
  *(void *)(v0 + 3sub_1000108B8(v0 + 2) = 0LL;
  return v0;
}

uint64_t SQLiteBaseFunction.hookPerform(_:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t SQLiteBaseFunction.register(_:database:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(sqlite3 **)(a3 + 16);
  if (v5)
  {
    uint64_t v7 = result;
    swift_beginAccess(v3 + 3, v16, 1LL, 0LL);
    void v3[3] = v7;
    v3[4] = a2;
    swift_bridgeObjectRetain(a2);
    uint64_t v8 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*v3 + 152LL))(v8);
    int v9 = sub_1001174BC();
    unsigned __int8 v10 = (const char *)(sub_1001174D8() + 32);
    swift_retain();
    function_uint64_t v2 = sqlite3_create_function_v2( v5,  v10,  v4,  v9,  v3,  (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_100116D68,  0LL,  0LL,  (void (__cdecl *)(void *))sub_100116E4C);
    uint64_t result = swift_release();
    if (function_v2)
    {
      _StringGuts.grow(_:)(31LL);
      swift_bridgeObjectRelease();
      v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
      String.append(_:)(v12);
      sub_10001450C();
      sub_1001174CC(0xD00000000000001DLL);
      sub_10001450C();
      unint64_t v13 = sub_1000E4274();
      uint64_t v14 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v13);
      return sub_1001174A4(v14, v15);
    }
  }

  return result;
}

void sub_100116C04(sqlite3_context *a1)
{
  if (a1)
  {
    if (sqlite3_user_data(a1))
    {
      uint64_t v2 = swift_retain();
      uint64_t v3 = __chkstk_darwin(v2);
      (*(void (**)(uint64_t (*)()))(*(void *)v3 + 176LL))(sub_100117484);
      swift_release();
    }

    else
    {
      sqlite3_result_error(a1, "Cannot bind to function instance.", -1);
    }
  }

uint64_t sub_100116D00(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result = Array<A>.init(_:argc:)(a3, a4);
  if (!v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 168LL))(a2, result);
    return swift_bridgeObjectRelease();
  }

  return result;
}

void sub_100116D6C(uint64_t a1)
{
  if (a1)
  {
    swift_release();
  }

  else
  {
    if (qword_1001DA918 != -1) {
      swift_once(&qword_1001DA918, sub_10010DC40);
    }
    uint64_t v1 = type metadata accessor for Logger(0LL);
    uint64_t v2 = sub_1000093D0(v1, (uint64_t)qword_1001EDF10);
    osos_log_t log = (os_log_s *)Logger.logObject.getter(v2);
    os_log_type_t v3 = static os_log_type_t.fault.getter(oslog);
    if (os_log_type_enabled(oslog, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Missing function object", v4, 2u);
      swift_slowDealloc(v4, -1LL, -1LL);
    }
  }

uint64_t SQLiteBaseFunction.unregister(database:)(uint64_t result)
{
  os_log_type_t v3 = *(sqlite3 **)(result + 16);
  if (v3)
  {
    uint64_t result = swift_beginAccess(v1 + 3, v13, 0LL, 0LL);
    if (v1[4])
    {
      uint64_t v4 = *(void (**)(__n128))(*v1 + 152LL);
      __n128 v5 = swift_bridgeObjectRetain(v1[4]);
      v4(v5);
      int v6 = sub_1001174BC();
      uint64_t v7 = sub_1001174D8();
      swift_bridgeObjectRelease();
      int function = sqlite3_create_function( v3,  (const char *)(v7 + 32),  v2,  v6,  0LL,  (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))j___sSo29_CPStartNetworkSearchFeedbackC7parsecdE12redactUnusedyyF,  0LL,  0LL);
      uint64_t result = swift_release();
      if (function)
      {
        _StringGuts.grow(_:)(34LL);
        swift_bridgeObjectRelease();
        int v14 = function;
        v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
        String.append(_:)(v9);
        sub_10001450C();
        sub_1001174CC(0xD000000000000020LL);
        sub_10001450C();
        unint64_t v10 = sub_1000E4274();
        uint64_t v11 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v10);
        return sub_1001174A4(v11, v12);
      }
    }
  }

  return result;
}

uint64_t SQLiteBaseFunction.deinit()
{
  uint64_t v1 = v0;
  sub_1000A14F8(v0 + 24, (uint64_t)v19);
  unint64_t v2 = *(void *)(v0 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 24);
    uint64_t v4 = qword_1001DA918;
    sub_100010E2C();
    if (v4 != -1) {
      swift_once(&qword_1001DA918, sub_10010DC40);
    }
    uint64_t v5 = sub_100010ED4();
    sub_1000093D0(v5, (uint64_t)qword_1001EDF10);
    uint64_t v6 = sub_100010E2C();
    uint64_t v7 = (void *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.debug.getter(v7);
    if (!os_log_type_enabled((os_log_t)v7, v8))
    {

      swift_bridgeObjectRelease_n(v2, 2LL);
      goto LABEL_13;
    }

    Swift::String v9 = (uint8_t *)sub_100009B20(12LL);
    uint64_t v10 = sub_100009B20(32LL);
    uint64_t v18 = v10;
    *(_DWORD *)Swift::String v9 = 136315138;
    sub_100010E2C();
    uint64_t v17 = sub_1000307E0(v3, v2, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v9 + 4);
    swift_bridgeObjectRelease_n(v2, 3LL);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v7, v8, "Destroying %s function", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL);
    sub_100010C34(v10);
    uint64_t v11 = (uint64_t)v9;
  }

  else
  {
    if (qword_1001DA918 != -1) {
      swift_once(&qword_1001DA918, sub_10010DC40);
    }
    uint64_t v12 = sub_100010ED4();
    uint64_t v13 = sub_1000093D0(v12, (uint64_t)qword_1001EDF10);
    uint64_t v7 = (void *)Logger.logObject.getter(v13);
    os_log_type_t v14 = static os_log_type_t.debug.getter(v7);
    if (!os_log_type_enabled((os_log_t)v7, v14)) {
      goto LABEL_11;
    }
    uint64_t v15 = (uint8_t *)sub_100009B20(2LL);
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v7, v14, "Destroying unregistered function", v15, 2u);
    uint64_t v11 = (uint64_t)v15;
  }

  sub_100010C34(v11);
LABEL_11:

LABEL_13:
  swift_weakDestroy(v1 + 16);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t SQLiteBaseFunction.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

Swift::Void __swiftcall SQLiteBaseFunction.receivedParameter(_:index:)(Swift::OpaquePointer _, Swift::Int index)
{
  uint64_t v3 = v2;
  if (qword_1001DA918 != -1) {
    swift_once(&qword_1001DA918, sub_10010DC40);
  }
  uint64_t v6 = sub_100010ED4();
  sub_1000093D0(v6, (uint64_t)qword_1001EDF10);
  uint64_t v7 = swift_retain_n(v2);
  os_log_type_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.debug.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = sub_100009B20(32LL);
    uint64_t v11 = sub_100009B20(64LL);
    uint64_t v19 = v11;
    *(_DWORD *)uint64_t v10 = 136315650;
    sub_1000A14F8(v3 + 24, (uint64_t)v18);
    uint64_t v12 = *(void *)(v3 + 32);
    if (v12)
    {
      uint64_t v13 = *(void *)(v3 + 24);
      unint64_t v14 = *(void *)(v3 + 32);
    }

    else
    {
      unint64_t v14 = 0xE90000000000003ELL;
      uint64_t v13 = 0x6E776F6E6B6E753CLL;
    }

    swift_bridgeObjectRetain(v12);
    uint64_t rawValue = sub_1000307E0(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&rawValue, v18, v10 + 4);
    sub_1001174E4();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 1sub_1000108B8(v0 + 2) = 2048;
    uint64_t rawValue = index;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&rawValue, v18, v10 + 14);
    *(_WORD *)(v10 + 2sub_1000108B8(v0 + 2) = 2080;
    uint64_t rawValue = (uint64_t)_._rawValue;
    uint64_t v15 = String.init<A>(describing:)(&rawValue);
    uint64_t rawValue = sub_1000307E0(v15, v16, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&rawValue, v18, v10 + 24);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Function %s received %ld parameter: %s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy(v11, 2LL);
    sub_100010C34(v11);
    sub_100010C34(v10);
  }

  else
  {

    sub_1001174E4();
  }

uint64_t sub_100117440()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184LL))();
}

uint64_t type metadata accessor for SQLiteBaseFunction()
{
  return objc_opt_self(&OBJC_CLASS____TtC7SQLiter18SQLiteBaseFunction);
}

uint64_t sub_100117484()
{
  return sub_100116D00(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(_DWORD *)(v0 + 40));
}

uint64_t sub_1001174A4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = v3;
  *(_BYTE *)(a2 + swift_weakDestroy(v0 + 24) = 0;
  return swift_willThrow();
}

uint64_t sub_1001174BC()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160LL))();
}

uint64_t sub_1001174CC(uint64_t a1)
{
  uint64_t v2 = v1;
  return SQLiteDatabase.logAndReturnSQLErrorMessage(_:)(*(Swift::String *)&a1)._countAndFlagsBits;
}

uint64_t sub_1001174D8()
{
  return String.utf8CString.getter(v1, v0);
}

uint64_t sub_1001174E4()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_1001174F0(uint64_t a1, uint64_t a2, unint64_t a3, int a4, sqlite3_context *a5)
{
  if (String.count.getter(a2, a3))
  {
    swift_bridgeObjectRetain(a3);
    v10._uint64_t countAndFlagsBits = 8238LL;
    v10._object = (void *)0xE200000000000000LL;
    String.append(_:)(v10);
    uint64_t v12 = a2;
    unint64_t v11 = a3;
  }

  else
  {
    uint64_t v12 = 0LL;
    unint64_t v11 = 0xE000000000000000LL;
  }

  uint64_t v20 = 0x203A726F727245LL;
  unint64_t v21 = 0xE700000000000000LL;
  uint64_t v19 = a1;
  swift_errorRetain(a1);
  sub_10000941C(&qword_1001D2B70);
  v13._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v19);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  uint64_t v14 = v20;
  uint64_t v15 = (void *)v21;
  uint64_t v20 = v12;
  unint64_t v21 = v11;
  swift_bridgeObjectRetain(v11);
  v16._uint64_t countAndFlagsBits = v14;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v17 = String.utf8CString.getter(v20, v21);
  swift_bridgeObjectRelease();
  sqlite3_result_error(a5, (const char *)(v17 + 32), a4);
  return swift_release();
}

uint64_t SQLiteDatabase.unsafeConnection()()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_100117630()
{
  uint64_t result = sqlite3_threadsafe();
  if ((_DWORD)result != 2)
  {
    unint64_t v1 = sub_1000E4274();
    sub_100010EA0((uint64_t)&type metadata for SQLiteError, v1);
    *(void *)(v2 + 8) = 0LL;
    *(void *)(v2 + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)uint64_t v2 = 1LL;
    *(_BYTE *)(v2 + swift_weakDestroy(v0 + 24) = 4;
    return sub_1000C5DB8();
  }

  return result;
}

uint8_t *static SQLiteDatabase.openInMemoryConnection()()
{
  if (!v1)
  {
    ppDb = 0LL;
    uint64_t v3 = (uint8_t *)sqlite3_open(":memory:", &ppDb);
    if ((_DWORD)v3)
    {
      uint64_t v2 = v3;
      if (qword_1001DA918 != -1) {
        swift_once(&qword_1001DA918, sub_10010DC40);
      }
      uint64_t v4 = sub_100010ED4();
      uint64_t v5 = (os_log_s *)sub_100010E78(v4, (uint64_t)qword_1001EDF10);
      os_log_type_t v7 = static os_log_type_t.error.getter(v5, v6);
      if (sub_100047154(v7))
      {
        os_log_type_t v8 = (uint8_t *)sub_100009B20(8LL);
        *(_DWORD *)os_log_type_t v8 = 67109120;
        int v24 = (int)v2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &ppDb, v8 + 4);
        _os_log_impl( (void *)&_mh_execute_header,  v5,  v0,  "Error %d occurred while opening in-memory db connection",  v8,  8u);
        sub_100010C34((uint64_t)v8);
      }

      unint64_t v9 = sub_1000E4274();
      sub_100010EA0((uint64_t)&type metadata for SQLiteError, v9);
      *Swift::String v10 = v2;
      v10[1] = 0xD000000000000026LL;
      sub_100119594((uint64_t)v10, (uint64_t)"Failed to open in-memory db connection");
LABEL_8:
      sub_1000C5DB8();
      return v2;
    }

    uint64_t v2 = (uint8_t *)ppDb;
    if (!ppDb)
    {
      if (qword_1001DA918 != -1) {
        swift_once(&qword_1001DA918, sub_10010DC40);
      }
      uint64_t v18 = sub_100010ED4();
      uint64_t v19 = (os_log_s *)sub_100010E78(v18, (uint64_t)qword_1001EDF10);
      os_log_type_t v21 = static os_log_type_t.error.getter(v19, v20);
      if (sub_100047154(v21))
      {
        uint64_t v2 = (uint8_t *)sub_100009B20(2LL);
        *(_WORD *)uint64_t v2 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v0, "Failed to open in-memory db connection", v2, 2u);
        sub_100010C34((uint64_t)v2);
      }

      unint64_t v22 = sub_1000E4274();
      sub_100010EA0((uint64_t)&type metadata for SQLiteError, v22);
      sub_100119478(v23, 0xD000000000000026LL);
      goto LABEL_8;
    }

    if (qword_1001DA918 != -1) {
      swift_once(&qword_1001DA918, sub_10010DC40);
    }
    uint64_t v12 = sub_100010ED4();
    Swift::String v13 = (void *)sub_100010E78(v12, (uint64_t)qword_1001EDF10);
    os_log_type_t v14 = static os_log_type_t.debug.getter(v13);
    if (sub_10006B5F4(v14))
    {
      uint64_t v15 = (_WORD *)sub_100009B20(2LL);
      *uint64_t v15 = 0;
      sub_100119508((void *)&_mh_execute_header, v16, v17, "In-memory db connection opened");
      sub_100010C34((uint64_t)v15);
    }
  }

  return v2;
}

uint8_t *static SQLiteDatabase.openConnection(_:readOnly:requiresAuthentication:)( uint64_t a1, char a2, char a3)
{
  uint64_t v7 = sub_10005A18C();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v11 = (uint8_t *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  os_log_type_t v14 = (char *)&v74 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v74 - v15;
  uint64_t v17 = sub_100117630();
  if (!v3)
  {
    uint64_t v77 = v8;
    uint64_t v18 = v7;
    if ((a3 & 1) != 0) {
      int v19 = 3145728;
    }
    else {
      int v19 = 0;
    }
    if ((a2 & 1) != 0) {
      int v20 = 65537;
    }
    else {
      int v20 = 65542;
    }
    int v21 = v20 | v19;
    ppDb = 0LL;
    uint64_t v22 = URL.path.getter(v17);
    uint64_t v24 = v23;
    uint64_t v25 = String.utf8CString.getter(v22, v23);
    swift_bridgeObjectRelease(v24);
    unsigned int v26 = sqlite3_open_v2((const char *)(v25 + 32), &ppDb, v21, 0LL);
    swift_release(v25);
    if (v26)
    {
      if (qword_1001DA918 != -1) {
        swift_once(&qword_1001DA918, sub_10010DC40);
      }
      uint64_t v27 = sub_100010ED4();
      sub_1000093D0(v27, (uint64_t)qword_1001EDF10);
      uint64_t v28 = v77;
      uint64_t v29 = v18;
      uint64_t v30 = (*(uint64_t (**)(uint8_t *, uint64_t, uint64_t))(v77 + 16))(v11, a1, v18);
      char v31 = (os_log_s *)Logger.logObject.getter(v30);
      os_log_type_t v33 = static os_log_type_t.error.getter(v31, v32);
      if (os_log_type_enabled(v31, v33))
      {
        uint64_t v34 = sub_100009B20(18LL);
        uint64_t v35 = sub_100009B20(32LL);
        uint64_t v79 = v35;
        *(_DWORD *)uint64_t v34 = 67109378;
        LODWORD(v78) = v26;
        uint64_t v36 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, (char *)&v78 + 4, v34 + 4);
        *(_WORD *)(v34 + 8) = 2080;
        uint64_t v76 = v29;
        uint64_t v37 = URL.path.getter(v36);
        uint64_t v39 = sub_1001194FC(v37, v38);
        uint64_t v40 = sub_10011957C(v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v40, v41, v42);
        sub_100009B3C();
        sub_1001195A8((uint64_t)v11, *(uint64_t (**)(uint64_t, void))(v28 + 8));
        _os_log_impl( (void *)&_mh_execute_header,  v31,  v33,  "Error %d occurred while opening db connection: %s",  (uint8_t *)v34,  0x12u);
        sub_100030F9C(v35);
        sub_100010C34(v35);
        sub_100010C34(v34);
      }

      else
      {
        (*(void (**)(uint8_t *, uint64_t))(v28 + 8))(v11, v18);
      }

      if (ppDb) {
        sub_100117F08(ppDb);
      }
      unint64_t v55 = sub_1000E4274();
      sub_100010EA0((uint64_t)&type metadata for SQLiteError, v55);
      *unsigned __int8 v56 = v26;
      v56[1] = 0xD00000000000001CLL;
      sub_100119594((uint64_t)v56, (uint64_t)"Failed to open db connection");
LABEL_22:
      sub_1000C5DB8();
      return v11;
    }

    unint64_t v11 = (uint8_t *)ppDb;
    if (!ppDb)
    {
      uint64_t v58 = v18;
      if (qword_1001DA918 != -1) {
        swift_once(&qword_1001DA918, sub_10010DC40);
      }
      uint64_t v59 = sub_100010ED4();
      sub_1000093D0(v59, (uint64_t)qword_1001EDF10);
      uint64_t v60 = v77;
      uint64_t v61 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v77 + 16))(v14, a1, v58);
      char v62 = (os_log_s *)Logger.logObject.getter(v61);
      os_log_type_t v64 = static os_log_type_t.error.getter(v62, v63);
      if (os_log_type_enabled(v62, v64))
      {
        unint64_t v11 = (uint8_t *)sub_100009B20(12LL);
        uint64_t v65 = sub_100009B20(32LL);
        uint64_t v79 = v65;
        *(_DWORD *)unint64_t v11 = 136315138;
        uint64_t v76 = v58;
        uint64_t v66 = URL.path.getter(v65);
        uint64_t v68 = sub_1001194FC(v66, v67);
        uint64_t v69 = sub_10011957C(v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v69, v70, v71);
        sub_100009B3C();
        sub_1001195A8((uint64_t)v14, *(uint64_t (**)(uint64_t, void))(v60 + 8));
        sub_100014564((void *)&_mh_execute_header, v62, v64, "Failed to open db connection with no error: %s", v11);
        sub_100030F9C(v65);
        sub_100010C34(v65);
        sub_100010C34((uint64_t)v11);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v60 + 8))(v14, v58);
      }

      unint64_t v72 = sub_1000E4274();
      sub_100010EA0((uint64_t)&type metadata for SQLiteError, v72);
      sub_100119478(v73, 0xD00000000000002ALL);
      goto LABEL_22;
    }

    uint64_t v43 = v18;
    if (qword_1001DA918 != -1) {
      swift_once(&qword_1001DA918, sub_10010DC40);
    }
    uint64_t v44 = sub_100010ED4();
    sub_1000093D0(v44, (uint64_t)qword_1001EDF10);
    uint64_t v45 = v77;
    uint64_t v46 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v77 + 16))(v16, a1, v43);
    unsigned int v47 = (os_log_s *)Logger.logObject.getter(v46);
    os_log_type_t v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = sub_100009B20(12LL);
      uint64_t v76 = v43;
      unsigned __int8 v50 = (uint8_t *)v49;
      uint64_t v51 = sub_100009B20(32LL);
      uint64_t v75 = v51;
      uint64_t v79 = v51;
      *(_DWORD *)unsigned __int8 v50 = 136315138;
      uint64_t v74 = v50 + 4;
      uint64_t v52 = URL.path.getter(v51);
      uint64_t v78 = sub_1001194FC(v52, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v74);
      sub_100009B3C();
      sub_1001195A8((uint64_t)v16, *(uint64_t (**)(uint64_t, void))(v45 + 8));
      sub_100014564((void *)&_mh_execute_header, v47, v48, "DB connection opened %s", v50);
      uint64_t v54 = v75;
      sub_100030F9C(v75);
      sub_100010C34(v54);
      sub_100010C34((uint64_t)v50);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v16, v43);
    }
  }

  return v11;
}

void sub_100117F08(sqlite3 *a1)
{
  int v1 = sqlite3_close_v2(a1);
  if (v1)
  {
    int v2 = v1;
    if (qword_1001DA918 != -1) {
      swift_once(&qword_1001DA918, sub_10010DC40);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    uint64_t v4 = sub_1000093D0(v3, (uint64_t)qword_1001EDF10);
    osos_log_t log = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.error.getter(oslog, v5);
    if (os_log_type_enabled(oslog, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v7 = 67240192;
      int v9 = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v7 + 4);
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Close db connection failed with code %{public}d", v7, 8u);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    else
    {
    }
  }

uint64_t SQLiteDatabase.__allocating_init()()
{
  uint64_t v0 = sub_1001194BC();
  SQLiteDatabase.init()();
  return v0;
}

void SQLiteDatabase.init()()
{
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0LL;
  int v2 = static SQLiteDatabase.openInMemoryConnection()();
  if (v1)
  {
    swift_release();
  }

  else
  {
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v2;
    SQLiteDatabase.registerMathFunctions()((uint64_t)v2, v3, v4, v5, v6);
    swift_release();
    if (qword_1001DA918 != -1) {
      swift_once(&qword_1001DA918, sub_10010DC40);
    }
    uint64_t v7 = sub_100010ED4();
    uint64_t v8 = (void *)sub_100010E78(v7, (uint64_t)qword_1001EDF10);
    os_log_type_t v9 = static os_log_type_t.debug.getter(v8);
    if (sub_10006B5F4(v9))
    {
      uint64_t v10 = (_WORD *)sub_100009B20(2LL);
      *uint64_t v10 = 0;
      sub_100119508((void *)&_mh_execute_header, v11, v12, "In-memory db connection opened");
      sub_100010C34((uint64_t)v10);
    }
  }

  sub_1000E887C();
}

void SQLiteDatabase.__allocating_init(_:readOnly:requiresAuthentication:)(uint64_t a1, char a2, char a3)
{
}

uint64_t SQLiteDatabase.init(_:readOnly:requiresAuthentication:)(uint64_t a1, char a2, char a3)
{
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
  uint64_t v5 = static SQLiteDatabase.openConnection(_:readOnly:requiresAuthentication:)(a1, a2, a3);
  if (!v4)
  {
    *(void *)(v3 + swift_weakDestroy(v0 + 16) = v5;
    SQLiteDatabase.registerMathFunctions()((uint64_t)v5, v6, v7, v8, v9);
  }

  swift_release(v3);
  uint64_t v10 = sub_10005A18C();
  sub_1000A1498(v10);
  return v3;
}

uint64_t SQLiteDatabase.__allocating_init(connection:)(uint64_t a1)
{
  uint64_t v2 = sub_1001194BC();
  SQLiteDatabase.init(connection:)(a1);
  return v2;
}

uint64_t SQLiteDatabase.init(connection:)(uint64_t a1)
{
  uint64_t v3 = v1;
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = 0LL;
  if (a1)
  {
    *(void *)(v1 + swift_weakDestroy(v0 + 16) = a1;
  }

  else
  {
    if (qword_1001DA918 != -1) {
      swift_once(&qword_1001DA918, sub_10010DC40);
    }
    uint64_t v4 = sub_100010ED4();
    sub_1000093D0(v4, (uint64_t)qword_1001EDF10);
    uint64_t v5 = sub_100010D08();
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v8 = static os_log_type_t.error.getter(v6, v7);
    if (sub_10006B5F4(v8))
    {
      uint64_t v9 = (uint8_t *)sub_100009B20(12LL);
      uint64_t v10 = sub_100009B20(32LL);
      uint64_t v18 = v10;
      *(_DWORD *)uint64_t v9 = 136315138;
      uint64_t v16 = v3;
      type metadata accessor for SQLiteDatabase();
      sub_100010D08();
      uint64_t v11 = String.init<A>(describing:)(&v16);
      uint64_t v16 = sub_1000307E0(v11, v12, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v9 + 4);
      sub_10004099C();
      swift_bridgeObjectRelease();
      sub_100014564((void *)&_mh_execute_header, v6, v2, "Can't create %s from a nil connection", v9);
      sub_100030F9C(v10);
      sub_100010C34(v10);
      sub_100010C34((uint64_t)v9);
    }

    else
    {

      sub_10004099C();
    }

    unint64_t v13 = sub_1000E4274();
    sub_100010EA0((uint64_t)&type metadata for SQLiteError, v13);
    sub_100119478(v14, 0xD00000000000002BLL);
    sub_1000C5DB8();
  }

  return v3;
}

uint64_t SQLiteDatabase.deinit()
{
  return v0;
}

uint64_t SQLiteDatabase.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t SQLiteDatabase.detachConnection()()
{
  uint64_t result = *(void *)(v0 + 16);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0LL;
  return result;
}

uint64_t SQLiteDatabase.register(_:withName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 8))(a3, a4, v4, ObjectType, a2);
}

Swift::Void __swiftcall SQLiteDatabase.close()()
{
  uint64_t v1 = *(sqlite3 **)(v0 + 16);
  if (v1)
  {
    sub_100117F08(v1);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0LL;
  }

Swift::Bool __swiftcall SQLiteDatabase.isOpen()()
{
  return *(void *)(v0 + 16) != 0LL;
}

uint64_t SQLiteDatabase.statement(with:verboseLog:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v7 = *(sqlite3 **)(v4 + 16);
  if (v7)
  {
    ppStmt = 0LL;
    uint64_t v11 = String.utf8CString.getter(a1, a2);
    unsigned int v12 = sqlite3_prepare_v2(v7, (const char *)(v11 + 32), -1, &ppStmt, 0LL);
    swift_release();
    unint64_t v13 = ppStmt;
    if (ppStmt && !v12)
    {
      uint64_t v14 = type metadata accessor for SQLiteStatement.Context();
      swift_allocObject(v14, 32LL, 7LL);
      sub_100010D08();
      swift_bridgeObjectRetain(a2);
      uint64_t result = Schematizer.init(withSchemaStore:)(v5, (uint64_t)v13);
      *(void *)a4 = result;
      *(void *)(a4 + 8) = a1;
      *(void *)(a4 + swift_weakDestroy(v0 + 16) = a2;
      *(_OWORD *)(a4 + swift_weakDestroy(v0 + 24) = xmmword_1001664D0;
      *(_BYTE *)(a4 + 4sub_1000E3528(v0, v2, 0) = a3 & 1;
      return result;
    }

    _StringGuts.grow(_:)(46LL);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    String.append(_:)(v18);
    sub_1000110E0();
    v19._uint64_t countAndFlagsBits = 8236LL;
    v19._object = (void *)0xE200000000000000LL;
    String.append(_:)(v19);
    v20._uint64_t countAndFlagsBits = a1;
    v20._object = a2;
    String.append(_:)(v20);
    uint64_t v21 = sub_1001174CC(0xD000000000000028LL);
    uint64_t v23 = v22;
    sub_10001450C();
    unint64_t v24 = sub_1000E4274();
    sub_100010EA0((uint64_t)&type metadata for SQLiteError, v24);
    *(void *)uint64_t v25 = v12;
    *(void *)(v25 + 8) = v21;
    *(void *)(v25 + swift_weakDestroy(v0 + 16) = v23;
    *(_BYTE *)(v25 + swift_weakDestroy(v0 + 24) = 0;
  }

  else
  {
    unint64_t v16 = sub_1000E4274();
    sub_100010EA0((uint64_t)&type metadata for SQLiteError, v16);
    *(void *)(v17 + 8) = 0LL;
    *(void *)(v17 + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)uint64_t v17 = 0LL;
    *(_BYTE *)(v17 + swift_weakDestroy(v0 + 24) = 4;
  }

  return sub_1000C5DB8();
}

uint64_t SQLiteDatabase.transaction(_:)(void (*a1)(uint64_t))
{
  uint64_t result = SQLiteDatabase.statement(with:verboseLog:)( 0xD000000000000012LL,  (void *)0x8000000100173950LL,  0,  (uint64_t)v6);
  if (!v1)
  {
    __chkstk_darwin(result);
    sub_1001195F0((uint64_t)v6, sub_10011930C);
    swift_release();
    __int128 v9 = *(_OWORD *)&v6[8];
    uint64_t v4 = sub_100025EAC((uint64_t)&v9);
    a1(v4);
    uint64_t v5 = SQLiteDatabase.statement(with:verboseLog:)(0x3B54494D4D4F43LL, (void *)0xE700000000000000LL, 0, (uint64_t)v7);
    __chkstk_darwin(v5);
    sub_1001195C4();
    sub_1001195F0((uint64_t)v7, sub_100119464);
    swift_release();
    __int128 v8 = *(_OWORD *)&v7[8];
    return sub_100025EAC((uint64_t)&v8);
  }

  return result;
}

Swift::String __swiftcall SQLiteDatabase.logAndReturnSQLErrorMessage(_:)(Swift::String a1)
{
  os_log_type_t v2 = *(sqlite3 **)(v1 + 16);
  if (v2)
  {
    Swift::String v23 = a1;
    swift_bridgeObjectRetain(a1._object);
    if (sqlite3_errmsg(v2))
    {
      uint64_t v3 = String.init(cString:)();
      unint64_t v5 = v4;
      uint64_t v6 = HIBYTE(v4) & 0xF;
      if ((v4 & 0x2000000000000000LL) == 0) {
        uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
      }
      if (!v6)
      {
        sub_1000325E4();
        uint64_t v3 = 0xD000000000000019LL;
        unint64_t v5 = 0x80000001001739B0LL;
      }

      v22[0] = 8236LL;
      v22[1] = 0xE200000000000000LL;
      unint64_t v7 = v5;
      String.append(_:)(*(Swift::String *)&v3);
      sub_1000325E4();
      v8._uint64_t countAndFlagsBits = 8236LL;
      v8._object = (void *)0xE200000000000000LL;
      String.append(_:)(v8);
      sub_1000325E4();
    }

    if (qword_1001DA918 != -1) {
      swift_once(&qword_1001DA918, sub_10010DC40);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    sub_1000093D0(v9, (uint64_t)qword_1001EDF10);
    uint64_t countAndFlagsBits = v23._countAndFlagsBits;
    object = v23._object;
    uint64_t v12 = swift_bridgeObjectRetain_n(v23._object, 2LL);
    unint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v15 = static os_log_type_t.error.getter(v13, v14);
    if (os_log_type_enabled(v13, v15))
    {
      unint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v17 = swift_slowAlloc(32LL, -1LL);
      v22[0] = v17;
      *(_DWORD *)unint64_t v16 = 136315138;
      swift_bridgeObjectRetain(object);
      uint64_t v21 = sub_1000307E0(countAndFlagsBits, (unint64_t)object, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v16 + 4);
      swift_bridgeObjectRelease_n(object, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "%s", v16, 0xCu);
      swift_arrayDestroy(v17, 1LL);
      sub_100010C34(v17);
      sub_100010C34((uint64_t)v16);
    }

    else
    {

      swift_bridgeObjectRelease_n(v23._object, 2LL);
    }

    swift_beginAccess(&v23, v22, 0LL, 0LL);
    unint64_t v18 = v23._countAndFlagsBits;
    Swift::String v19 = v23._object;
  }

  else
  {
    String.append(_:)(a1);
    unint64_t v18 = 0xD000000000000014LL;
    Swift::String v19 = (void *)0x8000000100173990LL;
  }

  result._object = v19;
  result._uint64_t countAndFlagsBits = v18;
  return result;
}

uint64_t SQLiteDatabase.registerMathFunctions()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = v5;
  if (sub_1001194E8( *(sqlite3 **)(v5 + 16),  "power",  2,  a4,  a5,  (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1001191F0))
  {
    sub_1001195B0();
    _StringGuts.grow(_:)(35LL);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    sub_1001195D8(v18);
    sub_10001450C();
    uint64_t v10 = sub_1001174CC(0xD000000000000021LL);
    uint64_t v12 = v11;
    sub_10001450C();
    unint64_t v13 = sub_1000E4274();
    sub_100010EA0((uint64_t)&type metadata for SQLiteError, v13);
    *(void *)uint64_t v14 = v6;
  }

  else
  {
    if (!sub_1001194E8( *(sqlite3 **)(v5 + 16),  "exp",  1,  v8,  v9,  (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1001192E8))
    {
      sub_100010D08();
      return v7;
    }

    sub_1001195B0();
    _StringGuts.grow(_:)(33LL);
    swift_bridgeObjectRelease();
    v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    sub_1001195D8(v19);
    sub_10001450C();
    uint64_t v10 = sub_1001174CC(0xD00000000000001FLL);
    uint64_t v12 = v15;
    sub_10001450C();
    unint64_t v16 = sub_1000E4274();
    sub_100010EA0((uint64_t)&type metadata for SQLiteError, v16);
    *(void *)uint64_t v14 = 0LL;
  }

  *(void *)(v14 + 8) = v10;
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = v12;
  *(_BYTE *)(v14 + swift_weakDestroy(v0 + 24) = 0;
  swift_willThrow();
  return v7;
}

void sub_1001190A4(sqlite3_context *a1, int a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = Array<A>.init(_:argc:)(a3, a2);
    uint64_t v5 = v4;
    if (*(void *)(v4 + 16))
    {
      unsigned int v6 = *(sqlite3_value **)(v4 + 32);
      if (sqlite3_value_type(v6) != 2 && sqlite3_value_type(v6) != 1) {
        goto LABEL_11;
      }
      if (*(void *)(v5 + 16) >= 2uLL)
      {
        uint64_t v7 = *(sqlite3_value **)(v5 + 40);
        if (sqlite3_value_type(v7) == 2 || sqlite3_value_type(v7) == 1)
        {
          double v8 = sqlite3_value_double(*(sqlite3_value **)(v5 + 32));
          uint64_t v9 = *(sqlite3_value **)(v5 + 40);
          swift_bridgeObjectRelease();
          double v10 = sqlite3_value_double(v9);
          double v11 = pow(v8, v10);
LABEL_12:
          sqlite3_result_double(a1, v11);
          return;
        }

void sub_1001191F4(sqlite3_context *a1, int a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = Array<A>.init(_:argc:)(a3, a2);
    uint64_t v5 = v4;
    if (*(void *)(v4 + 16))
    {
      unsigned int v6 = *(sqlite3_value **)(v4 + 32);
      if (sqlite3_value_type(v6) == 2 || sqlite3_value_type(v6) == 1)
      {
        uint64_t v7 = *(sqlite3_value **)(v5 + 32);
        swift_bridgeObjectRelease();
        double v8 = sqlite3_value_double(v7);
        double v9 = exp(v8);
      }

      else
      {
        swift_bridgeObjectRelease();
        double v9 = 0.0;
      }

      sqlite3_result_double(a1, v9);
    }

    else
    {
      __break(1u);
    }
  }

uint64_t type metadata accessor for SQLiteDatabase()
{
  return objc_opt_self(&OBJC_CLASS____TtC7SQLiter14SQLiteDatabase);
}

void sub_10011930C(uint64_t a1)
{
}

unint64_t sub_100119324()
{
  unint64_t result = qword_1001DADF0;
  if (!qword_1001DADF0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SQLiteDatabase.TransactionError,  &type metadata for SQLiteDatabase.TransactionError);
    atomic_store(result, (unint64_t *)&qword_1001DADF0);
  }

  return result;
}

uint64_t destroy for SQLiteDatabase.TransactionError(uint64_t *a1)
{
  return sub_10005A738(*a1, a1[1]);
}

uint64_t _s7SQLiter14SQLiteDatabaseC16TransactionErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  MessageSchemaModel.properties.getter(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SQLiteDatabase.TransactionError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  MessageSchemaModel.properties.getter(*(void *)a2, v4);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  sub_10005A738(v6, v7);
  return a1;
}

uint64_t assignWithTake for SQLiteDatabase.TransactionError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  sub_10005A738(v4, v5);
  return a1;
}

ValueMetadata *type metadata accessor for SQLiteDatabase.TransactionError()
{
  return &type metadata for SQLiteDatabase.TransactionError;
}

void sub_100119464(uint64_t a1)
{
}

void sub_100119478(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = (v2 - 32) | 0x8000000000000000LL;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = 0LL;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 24) = 3;
}

uint64_t sub_100119494@<X0>(uint64_t a1@<X8>)
{
  return SQLiteDatabase.statement(with:verboseLog:)(0x4B4341424C4C4F52LL, (void *)0xE90000000000003BLL, 0, a1);
}

uint64_t sub_1001194BC()
{
  return swift_allocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001194CC(uint64_t a1)
{
  *(void *)(v1 + swift_weakDestroy(v0 + 24) = a1;
  return v1 + 24;
}

uint64_t sub_1001194E8( sqlite3 *a1, const char *a2, int a3, uint64_t a4, uint64_t a5, void (__cdecl *a6)(sqlite3_context *, int, sqlite3_value **))
{
  return sqlite3_create_function(a1, a2, a3, 5, 0LL, a6, 0LL, 0LL);
}

uint64_t sub_1001194FC(uint64_t a1, unint64_t a2)
{
  return sub_1000307E0(a1, a2, (uint64_t *)(v2 - 104));
}

void sub_100119508(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_10011951C()
{
  return v1;
}

uint64_t sub_100119544()
{
  return v1;
}

uint64_t sub_10011956C()
{
  return sub_1000307E0(v2, v1, (uint64_t *)(v0 + 32));
}

uint64_t sub_10011957C(uint64_t a1)
{
  *(void *)(v1 - 11sub_1000108B8(v0 + 2) = a1;
  return v1 - 112;
}

void sub_100119594(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = (a2 - 32) | 0x8000000000000000LL;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 24) = 0;
}

uint64_t sub_1001195A8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void)@<X8>)
{
  return a2(a1, *(void *)(v2 - 128));
}

  ;
}

  ;
}

void sub_1001195D8(Swift::String a1)
{
}

uint64_t sub_1001195E4()
{
  return swift_release(*(void *)(v0 + 208));
}

void sub_1001195F0(uint64_t a1, void (*a2)(uint64_t))
{
}

uint64_t sub_1001195F8()
{
  return swift_release(*(void *)(v0 + 160));
}

uint64_t sub_100119604( void (*a1)(char *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v47 = a5;
  uint64_t v48 = a8;
  uint64_t v54 = a1;
  uint64_t v55 = a2;
  uint64_t v46 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  sub_100014428();
  uint64_t v56 = v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  *(void *)(v13 + 8),  v14,  &protocol requirements base descriptor for Sequence,  &associated type descriptor for Sequence.Element);
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v17 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v51 = (char *)&v42 - v18;
  uint64_t v19 = a4;
  __chkstk_darwin(v17);
  sub_100014428();
  uint64_t v50 = v20;
  uint64_t v21 = swift_getAssociatedTypeWitness( 0LL,  a6,  a3,  &protocol requirements base descriptor for Collection,  &associated type descriptor for Collection.Index);
  uint64_t v49 = *(void *)(v21 - 8);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v45 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v42 - v24;
  uint64_t v52 = v8;
  uint64_t v26 = a6;
  uint64_t v27 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v27) {
    return static Array._allocateUninitialized(_:)(0LL, v19);
  }
  Swift::Int v28 = v27;
  uint64_t v43 = v21;
  uint64_t v29 = v16;
  uint64_t v60 = ContiguousArray.init()(v19);
  uint64_t v53 = type metadata accessor for ContiguousArray(0LL, v19);
  ContiguousArray.reserveCapacity(_:)(v28);
  uint64_t v44 = v25;
  uint64_t v30 = a3;
  uint64_t v31 = v52;
  uint64_t v32 = v30;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v28 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v57 = v26;
    uint64_t v35 = v50;
    uint64_t v34 = v51;
    uint64_t v36 = v44;
    while (1)
    {
      uint64_t v37 = (void (*)(_BYTE *, void))dispatch thunk of Collection.subscript.read(v59, v36, v32, v57);
      (*(void (**)(char *))(v29 + 16))(v34);
      v37(v59, 0LL);
      uint64_t v38 = v58;
      v54(v34, v56);
      if (v38) {
        break;
      }
      uint64_t v58 = 0LL;
      sub_100019E6C();
      ContiguousArray.append(_:)(v35, v53);
      dispatch thunk of Collection.formIndex(after:)(v36, v32, v57);
      if (!--v28)
      {
        uint64_t v39 = v49;
        uint64_t v40 = v45;
        uint64_t v41 = v43;
        (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v45, v36, v43);
        _expectEnd<A>(of:is:)(v31, v40, v32, v57);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
        return v60;
      }
    }

    sub_100019E6C();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v43);
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v48, v56, v47);
  }

  return result;
}

uint64_t SQLiteStatement.nextRowValue<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = SQLiteStatement.nextRow()();
  if (!v3)
  {
    if (result)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 8))(result, a1, a2);
      uint64_t v8 = a3;
      uint64_t v9 = 0LL;
    }

    else
    {
      uint64_t v8 = a3;
      uint64_t v9 = 1LL;
    }

    return sub_100009654(v8, v9, 1LL, a1);
  }

  return result;
}

void SQLiteStatement.singleRowIfAny<A>()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double v4 = swift_bridgeObjectRetain(v3).n128_u64[0];
  sub_10011A41C(v5, (void (*)(uint64_t))sub_10011A280, v6, v7, v8, v9, v10, v11, v4);
  swift_bridgeObjectRelease();
  sub_10001443C();
  if (v2)
  {
    uint64_t v12 = sub_10011A438();
    sub_100019DA4(v12);
  }

  sub_10011A408();
}

{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  sub_10011A3B0(a1, a2);
  sub_10011A3F0();
  *(void *)&double v4 = swift_bridgeObjectRetain(v3).n128_u64[0];
  sub_10011A41C(v5, (void (*)(uint64_t))sub_10011A29C, v6, v7, v8, v9, v10, v11, v4);
  swift_bridgeObjectRelease();
  sub_10001443C();
  if (v2)
  {
    uint64_t v12 = sub_10011A438();
    sub_100019DA4(v12);
  }

  sub_10011A408();
}

uint64_t sub_100119A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Optional(0LL, a3);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v15 - v10;
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 8);
  uint64_t v13 = swift_retain();
  uint64_t result = v12(v13, a3, a4);
  if (!v4)
  {
    sub_100009654((uint64_t)v11, 0LL, 1LL, a3);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 40))(a2, v11, v8);
  }

  return result;
}

uint64_t sub_100119B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for Optional(0LL, a3);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - v11;
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 8);
  uint64_t v14 = swift_retain(a1);
  uint64_t result = v13(v14, a3, a4);
  if (!v4) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 40))(a2, v12, v9);
  }
  return result;
}

uint64_t SQLiteStatement.singleRow<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100119C58(a1, a2, (uint64_t (*)(uint64_t, uint64_t))SQLiteStatement.singleRowIfAny<A>(), a3);
}

{
  return sub_100119C58(a1, a2, (uint64_t (*)(uint64_t, uint64_t))SQLiteStatement.singleRowIfAny<A>(), a3);
}

uint64_t sub_100119C58@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a4;
  uint64_t v8 = type metadata accessor for Optional(0LL, a1);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t result = a3(a1, a2);
  if (!v4)
  {
    uint64_t v16 = v23;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    int v17 = sub_100010708((uint64_t)v12, 1LL, a1);
    uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    if (v17 == 1)
    {
      v18(v12, v8);
      unint64_t v19 = sub_1000E4274();
      uint64_t v20 = swift_allocError(&type metadata for SQLiteError, v19, 0LL, 0LL);
      *(void *)(v21 + 8) = 0LL;
      *(void *)(v21 + swift_weakDestroy(v0 + 16) = 0LL;
      *(void *)uint64_t v21 = 5LL;
      *(_BYTE *)(v21 + swift_weakDestroy(v0 + 24) = 4;
      swift_willThrow(v20);
      return sub_10011A42C();
    }

    else
    {
      sub_10011A42C();
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a1 - 8) + 32LL))(v16, v12, a1);
    }
  }

  return result;
}

uint64_t SQLiteStatement.rows<A>()(uint64_t a1)
{
  return sub_100119EA8(a1);
}

uint64_t sub_100119DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 8);
  swift_retain(v12);
  uint64_t result = v11(a2, a3, a4);
  if (!v4)
  {
    uint64_t v14 = type metadata accessor for Array(0LL, a3);
    return Array.append(_:)(v9, v14);
  }

  return result;
}

uint64_t SQLiteStatement.compactRows<A>()(uint64_t a1)
{
  return sub_100119EA8(a1);
}

uint64_t sub_100119EA8(uint64_t a1)
{
  uint64_t v5 = static Array._allocateUninitialized(_:)(0LL, a1);
  uint64_t v3 = type metadata accessor for Array(0LL, a1);
  SQLiteStatement.reduce<A>(into:handleRow:)((uint64_t)&v5, v3, (uint64_t)&v6);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v1) {
    return v6;
  }
  return result;
}

uint64_t sub_100119F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v23[1] = a1;
  v23[0] = type metadata accessor for Optional(0LL, a3);
  uint64_t v6 = *(void *)(v23[0] - 8LL);
  uint64_t v7 = __chkstk_darwin(v23[0]);
  uint64_t v9 = (char *)v23 - v8;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = __chkstk_darwin(v7);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v23 - v14;
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 8);
  uint64_t v17 = swift_retain();
  uint64_t v18 = v23[3];
  uint64_t result = v16(v17, a3, a4);
  if (!v18)
  {
    uint64_t v20 = v15;
    uint64_t v21 = v23[0];
    if (sub_100010708((uint64_t)v9, 1LL, a3) == 1)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v21);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v20, v9, a3);
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v20, a3);
      uint64_t v22 = type metadata accessor for Array(0LL, a3);
      Array.append(_:)(v13, v22);
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v20, a3);
    }
  }

  return result;
}

uint64_t Array<A>.init(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1;
  uint64_t v8 = (sqlite3_stmt *)sub_10011B510();
  if (v3)
  {
    sub_10001443C();
    return v7;
  }

  uint64_t result = sqlite3_column_count(v8);
  if ((result & 0x80000000) == 0)
  {
    v14[1] = 0LL;
    void v14[2] = result;
    __chkstk_darwin(result);
    v13[2] = a2;
    v13[3] = a3;
    void v13[4] = a1;
    uint64_t v10 = sub_10000941C(&qword_1001DAF10);
    uint64_t v11 = sub_10000941C(&qword_1001D2B70);
    unint64_t v12 = sub_10011A308();
    uint64_t v7 = sub_100119604( (void (*)(char *, uint64_t))sub_10011A2E8,  (uint64_t)v13,  v10,  a2,  v11,  v12,  (uint64_t)&protocol self-conformance witness table for Error,  (uint64_t)v14);
    sub_10001443C();
    return v7;
  }

  __break(1u);
  return result;
}

uint64_t sub_10011A1D8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = *a1;
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 8);
  swift_retain(a2);
  uint64_t result = v11(a2, v10, a3, a4);
  if (v5) {
    *a5 = v5;
  }
  return result;
}

uint64_t sub_10011A250@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = Array<A>.init(with:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
  if (!v4) {
    *a4 = result;
  }
  return result;
}

uint64_t sub_10011A280(uint64_t a1)
{
  return sub_100119A0C(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_10011A29C(uint64_t a1)
{
  return sub_100119B58(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_10011A2B8(uint64_t a1, uint64_t a2)
{
  return sub_100119DDC(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10011A2D0(uint64_t a1, uint64_t a2)
{
  return sub_100119F38(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10011A2E8(uint64_t *a1, void *a2)
{
  return sub_10011A1D8(a1, v2[4], v2[2], v2[3], a2);
}

unint64_t sub_10011A308()
{
  unint64_t result = qword_1001DAF18;
  if (!qword_1001DAF18)
  {
    uint64_t v1 = sub_1000094A0(&qword_1001DAF10);
    sub_10011A374();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001DAF18);
  }

  return result;
}

unint64_t sub_10011A374()
{
  unint64_t result = qword_1001DAF20;
  if (!qword_1001DAF20)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1001DAF20);
  }

  return result;
}

uint64_t sub_10011A3B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100009654(a2, 1LL, 1LL, a1);
}

uint64_t sub_10011A3F0()
{
  return swift_retain(v0);
}

  ;
}

void sub_10011A41C( uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_10011A42C()
{
  return v2(v1, v0);
}

uint64_t sub_10011A438()
{
  return type metadata accessor for Optional(0LL, v0);
}

uint64_t Array<A>.init(_:argc:)(uint64_t a1, int a2)
{
  if (!a1)
  {
    unint64_t v8 = sub_1000E4274();
    sub_100010EA0((uint64_t)&type metadata for SQLiteError, v8);
    *(_OWORD *)uint64_t v9 = xmmword_1001665A0;
    *(void *)(v9 + swift_weakDestroy(v0 + 16) = 0LL;
    sub_100110034(v9, 3);
    return (uint64_t)v2;
  }

  if ((a2 & 0x80000000) == 0)
  {
    uint64_t v3 = a2;
    if (a2)
    {
      uint64_t v5 = static Array._allocateBufferUninitialized(minimumCapacity:)(a2, &type metadata for SQLiteArgument);
      uint64_t v2 = (void *)v5;
      uint64_t v6 = 0LL;
      *(void *)(v5 + swift_weakDestroy(v0 + 16) = v3;
      while (v3 != v6)
      {
        uint64_t v7 = *(void *)(a1 + 8 * v6);
        if (!v7)
        {
          unint64_t v10 = sub_1000E4274();
          sub_100010EA0((uint64_t)&type metadata for SQLiteError, v10);
          *(_OWORD *)uint64_t v11 = xmmword_100166590;
          *(void *)(v11 + swift_weakDestroy(v0 + 16) = 0LL;
          sub_100110034(v11, 3);
          v2[2] = 0LL;
          swift_bridgeObjectRelease();
          return (uint64_t)v2;
        }

        *(void *)(v5 + 8 * v6++ + 3sub_1000108B8(v0 + 2) = v7;
        if (v3 == v6) {
          goto LABEL_11;
        }
      }

      __break(1u);
      goto LABEL_15;
    }

    uint64_t v2 = _swiftEmptyArrayStorage;
LABEL_11:
    v2[2] = v3;
    return (uint64_t)v2;
  }

BOOL SQLiteArgument.isFloatingPoint.getter(sqlite3_value *a1)
{
  return sub_10011AD90(a1) == 2 || sub_10011AD88() == 1;
}

uint64_t SQLiteArgument.init(_:)(uint64_t result)
{
  if (!result)
  {
    unint64_t v1 = sub_1000E4274();
    sub_100010EA0((uint64_t)&type metadata for SQLiteError, v1);
    *(_OWORD *)uint64_t v2 = xmmword_100166590;
    *(void *)(v2 + swift_weakDestroy(v0 + 16) = 0LL;
    return sub_100110034(v2, 3);
  }

  return result;
}

BOOL SQLiteArgument.isNull.getter(sqlite3_value *a1)
{
  return sqlite3_value_type(a1) == 5;
}

BOOL SQLiteArgument.isText.getter(sqlite3_value *a1)
{
  return sqlite3_value_type(a1) == 3;
}

BOOL SQLiteArgument.isBlob.getter(sqlite3_value *a1)
{
  return sub_10011AD90(a1) == 4 || sub_10011AD88() == 3;
}

BOOL SQLiteArgument.isInteger.getter(sqlite3_value *a1)
{
  return sqlite3_value_type(a1) == 1;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteArgument.getInt()()
{
  return sqlite3_value_int64(v0);
}

Swift::UInt64 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteArgument.getUInt64()()
{
  return sub_10011A8D0(v0);
}

Swift::Int8 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteArgument.getInt8()()
{
  int v1 = sub_10011AD80(v0);
  if (v1 >= -128)
  {
    if (v1 > 127)
    {
      __break(1u);
      return v1;
    }
  }

  else
  {
    unint64_t v2 = sub_1000E4274();
    sub_100010EA0((uint64_t)&type metadata for SQLiteError, v2);
    sub_10011AD68(v3, 8LL);
  }

  sub_10010BF78();
  return v1;
}

Swift::UInt8 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteArgument.getUInt8()()
{
  unsigned int v1 = sub_10011AD80(v0);
  if ((v1 & 0x80000000) != 0) {
    goto LABEL_4;
  }
  if (v1 >= 0x100)
  {
    sub_100019F5C();
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL);
    __break(1u);
LABEL_4:
    unint64_t v2 = sub_1000E4274();
    sub_100010EA0((uint64_t)&type metadata for SQLiteError, v2);
    LOBYTE(swift_initStackObject(v0, v1) = sub_10011AD68(v3, 8LL);
  }

  return v1;
}

Swift::Int16 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteArgument.getInt16()()
{
  int v1 = sub_10011AD80(v0);
  if (v1 >= -32768)
  {
    if (v1 >= 0x8000)
    {
      __break(1u);
      return v1;
    }
  }

  else
  {
    unint64_t v2 = sub_1000E4274();
    sub_100010EA0((uint64_t)&type metadata for SQLiteError, v2);
    sub_10011AD68(v3, 8LL);
  }

  sub_10010BF78();
  return v1;
}

Swift::UInt16 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteArgument.getUInt16()()
{
  unsigned int v1 = sub_10011AD80(v0);
  if ((v1 & 0x80000000) != 0) {
    goto LABEL_4;
  }
  if (HIWORD(v1))
  {
    __break(1u);
LABEL_4:
    unint64_t v2 = sub_1000E4274();
    sub_100010EA0((uint64_t)&type metadata for SQLiteError, v2);
    sub_10011AD68(v3, 8LL);
  }

  sub_10010BF78();
  return result;
}

Swift::UInt32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteArgument.getUInt32()()
{
  Swift::UInt32 v1 = sqlite3_value_int(v0);
  if ((v1 & 0x80000000) != 0)
  {
    unint64_t v2 = sub_1000E4274();
    sub_100010EA0((uint64_t)&type metadata for SQLiteError, v2);
    sub_10011AD68(v3, 8LL);
  }

  return v1;
}

sqlite3_int64 sub_10011A8D0(sqlite3_value *a1)
{
  sqlite3_int64 v1 = sqlite3_value_int64(a1);
  if (v1 < 0)
  {
    unint64_t v2 = sub_1000E4274();
    sub_100010EA0((uint64_t)&type metadata for SQLiteError, v2);
    sub_10011AD68(v3, 8LL);
  }

  return v1;
}

Swift::Bool __swiftcall SQLiteArgument.getBool()()
{
  return sqlite3_value_int(v0) != 0;
}

Swift::Float __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteArgument.getFloat()()
{
  double v1 = sqlite3_value_double(v0);
  if (v1 < 3.40282347e38 || v1 > -3.40282347e38) {
    return v1;
  }
  unint64_t v2 = sub_1000E4274();
  sub_100010EA0((uint64_t)&type metadata for SQLiteError, v2);
  sub_10011AD68(v3, 8LL);
  return result;
}

uint64_t SQLiteArgument.withUnsafeBytes<A>(_:)( uint64_t (*a1)(const void *, uint64_t), int a2, sqlite3_value *a3)
{
  uint64_t v5 = sqlite3_value_blob(a3);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = sqlite3_value_bytes(a3);
    uint64_t v5 = v6;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  return a1(v5, v7);
}

uint64_t SQLiteArgument.getData()(sqlite3_value *a1)
{
  unint64_t v2 = sqlite3_value_blob(a1);
  if (v2)
  {
    uint64_t v3 = v2;
    int v4 = sqlite3_value_bytes(a1);
    return Data.init(bytes:count:)(v3, v4);
  }

  else
  {
    sub_10011AD88();
    return 0LL;
  }

uint64_t SQLiteArgument.getUnsafeData()(sqlite3_value *a1)
{
  uint64_t v2 = type metadata accessor for Data.Deallocator(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sqlite3_value_blob(a1);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = sqlite3_value_bytes(a1);
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Data.Deallocator.none(_:), v2);
    return Data.init(bytesNoCopy:count:deallocator:)(v7, v8, v5);
  }

  else
  {
    sqlite3_value_type(a1);
    return 0LL;
  }

uint64_t SQLiteArgument.getDataNonNull()(uint64_t a1)
{
  return sub_10011AB84(a1, (uint64_t (*)(void))SQLiteArgument.getData());
}

uint64_t SQLiteArgument.getUnsafeDataNonNull()(uint64_t a1)
{
  return sub_10011AB84(a1, (uint64_t (*)(void))SQLiteArgument.getUnsafeData());
}

uint64_t sub_10011AB84(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2();
  if (v3 >> 60 == 15)
  {
    unint64_t v4 = sub_1000E4274();
    sub_100010EA0((uint64_t)&type metadata for SQLiteError, v4);
    sub_10011AD68(v5, 6LL);
  }

  return v2;
}

Swift::String_optional __swiftcall SQLiteArgument.getString()()
{
  double v1 = sqlite3_value_text(v0);
  if (v1) {
    double v1 = (const unsigned __int8 *)String.init(cString:)();
  }
  else {
    uint64_t v2 = 0LL;
  }
  result.value._object = v2;
  result.value._uint64_t countAndFlagsBits = (uint64_t)v1;
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteArgument.getStringNonNull()()
{
  double v1 = sqlite3_value_text(v0);
  if (v1)
  {
    uint64_t v2 = String.init(cString:)(v1);
  }

  else
  {
    unint64_t v4 = sub_1000E4274();
    sub_100010EA0((uint64_t)&type metadata for SQLiteError, v4);
    uint64_t v2 = sub_10011AD68(v5, 6LL);
  }

  result._object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t SQLiteArgument.getBase64EncodedData()(sqlite3_value *a1)
{
  uint64_t v2 = sqlite3_value_text(v1);
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = String.init(cString:)(v2);
  uint64_t v5 = Data.init(base64Encoded:options:)(v3, v4, 0LL);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if (v7 >> 60 == 15) {
    return 0LL;
  }
  return v5;
}

uint64_t getEnumTagSinglePayload for SQLiteArgument(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 == 1 || !*(_BYTE *)(a1 + 8))
    {
      if (*(void *)a1) {
        int v2 = -1;
      }
      else {
        int v2 = 0;
      }
    }

    else
    {
      int v2 = *(_DWORD *)a1 + 1;
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLiteArgument(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)Swift::String result = a2 - 2;
    if (a3 >= 2) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 2) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)Swift::String result = 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SQLiteArgument()
{
  return &type metadata for SQLiteArgument;
}

uint64_t sub_10011AD68@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)a1 = a2;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 24) = 4;
  return swift_willThrow();
}

uint64_t sub_10011AD80(sqlite3_value *a1)
{
  return sqlite3_value_int(a1);
}

uint64_t sub_10011AD88()
{
  return sqlite3_value_type(v0);
}

uint64_t sub_10011AD90(sqlite3_value *a1)
{
  return sqlite3_value_type(a1);
}

SQLiter::SQLiteDataType_optional __swiftcall SQLiteDataType.init(rawValue:)(Swift::Int32 rawValue)
{
  else {
    return (SQLiter::SQLiteDataType_optional)(0x40201030005uLL >> (8 * rawValue));
  }
}

uint64_t SQLiteDataType.rawValue.getter(char a1)
{
  return dword_100166694[a1];
}

BOOL sub_10011ADD0(char *a1, char *a2)
{
  return sub_10011CCA8(*a1, *a2);
}

unint64_t sub_10011ADE0()
{
  unint64_t result = qword_1001DAF28;
  if (!qword_1001DAF28)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SQLiteDataType,  &type metadata for SQLiteDataType);
    atomic_store(result, (unint64_t *)&qword_1001DAF28);
  }

  return result;
}

void sub_10011AE1C()
{
}

void sub_10011AE24(uint64_t a1)
{
}

void sub_10011AE2C(uint64_t a1)
{
}

SQLiter::SQLiteDataType_optional sub_10011AE34@<W0>( Swift::Int32 *a1@<X0>, SQLiter::SQLiteDataType_optional *a2@<X8>)
{
  result.Swift::Bool value = SQLiteDataType.init(rawValue:)(*a1).value;
  a2->Swift::Bool value = result.value;
  return result;
}

uint64_t sub_10011AE5C@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = SQLiteDataType.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for SQLiteDataType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10011AED0 + 4 * byte_1001665D9[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10011AF04 + 4 * asc_1001665D4[v4]))();
}

uint64_t sub_10011AF04(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011AF0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10011AF14LL);
  }
  return result;
}

uint64_t sub_10011AF20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10011AF28LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10011AF2C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011AF34(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SQLiteDataType()
{
  return &type metadata for SQLiteDataType;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> String.ensureValidSQLNameCharacters()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for CharacterSet(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v16[0] = v3;
  v16[1] = v2;
  if (qword_1001DA910 != -1) {
    swift_once(&qword_1001DA910, sub_10010B764);
  }
  uint64_t v8 = sub_1000093D0(v4, (uint64_t)qword_1001EDEF8);
  CharacterSet.inverted.getter(v8, v9);
  unint64_t v10 = sub_1000106CC();
  StringProtocol.rangeOfCharacter(from:options:range:)(v7, 0LL, 0LL, 0LL, 1LL, &type metadata for String, v10);
  char v12 = v11;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v12 & 1) == 0)
  {
    unint64_t v13 = sub_1000E4274();
    uint64_t v14 = swift_allocError(&type metadata for SQLiteError, v13, 0LL, 0LL);
    *(void *)(v15 + 8) = 0LL;
    *(void *)(v15 + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)uint64_t v15 = 10LL;
    *(_BYTE *)(v15 + swift_weakDestroy(v0 + 24) = 4;
    swift_willThrow(v14);
  }

void sub_10011B090()
{
}

void SQLiteStatement.forEach(_:)(void (*a1)(uint64_t))
{
}

double SQLiteStatement.init(database:statement:sqlString:verboseLog:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for SQLiteStatement.Context();
  uint64_t v13 = swift_allocObject(v12, 32LL, 7LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v13 + swift_weakDestroy(v0 + 24) = a2;
  *(void *)a6 = v13;
  *(void *)(a6 + 8) = a3;
  *(void *)(a6 + swift_weakDestroy(v0 + 16) = a4;
  double result = 0.0;
  *(_OWORD *)(a6 + swift_weakDestroy(v0 + 24) = xmmword_1001664D0;
  *(_BYTE *)(a6 + 4sub_1000E3528(v0, v2, 0) = a5;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteStatement.execute()()
{
}

uint64_t SQLiteStatement.nextRow()()
{
  uint64_t v3 = (sqlite3_stmt *)sub_10011C960();
  if (!v1)
  {
    int v5 = sqlite3_step(v3);
    if (v5 == 100)
    {
      sub_10005E31C();
    }

    else
    {
      unsigned int v6 = v5;
      if (v5 == 101)
      {
        if ((*(_BYTE *)(v0 + 40) & 1) != 0)
        {
          if (qword_1001DA918 != -1) {
            swift_once(&qword_1001DA918, sub_10010DC40);
          }
          uint64_t v7 = sub_100010ED4();
          sub_1000093D0(v7, (uint64_t)qword_1001EDF10);
          uint64_t v9 = *(void *)(v0 + 8);
          unint64_t v8 = *(void *)(v0 + 16);
          sub_10011C9AC();
          uint64_t v10 = sub_10007735C();
          char v11 = (os_log_s *)Logger.logObject.getter(v10);
          os_log_type_t v12 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v11, v12))
          {
            uint64_t v22 = v9;
            uint64_t v13 = (uint8_t *)sub_100009B20(12LL);
            uint64_t v14 = sub_100009B20(32LL);
            v23[0] = v14;
            *(_DWORD *)uint64_t v13 = 136315138;
            swift_bridgeObjectRetain(v8);
            uint64_t v24 = sub_1000307E0(v22, v8, v23);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v13 + 4);
            sub_10011C8C0();
            sub_10011C98C();
            _os_log_impl((void *)&_mh_execute_header, v11, v12, "SQL statement executed: %s", v13, 0xCu);
            swift_arrayDestroy(v14, 1LL);
            sub_100010C34(v14);
            sub_100010C34((uint64_t)v13);
          }

          else
          {

            sub_10011C998();
            sub_10011C8C0();
          }
        }

        return 0LL;
      }

      else
      {
        sub_10011B4AC();
        _StringGuts.grow(_:)(39LL);
        swift_bridgeObjectRelease(0xE000000000000000LL);
        v23[0] = 0xD000000000000025LL;
        v23[1] = 0x8000000100173A60LL;
        uint64_t v16 = *(void *)(v0 + 8);
        uint64_t v15 = *(void **)(v0 + 16);
        swift_bridgeObjectRetain(v15);
        v17._uint64_t countAndFlagsBits = v16;
        v17._object = v15;
        String.append(_:)(v17);
        swift_bridgeObjectRelease(v15);
        v18._uint64_t countAndFlagsBits = 0xD000000000000025LL;
        v18._object = (void *)0x8000000100173A60LL;
        Swift::String v19 = SQLiteDatabase.logAndReturnSQLErrorMessage(_:)(v18);
        sub_10001443C();
        swift_bridgeObjectRelease(0x8000000100173A60LL);
        uint64_t v2 = v6;
        unint64_t v20 = sub_1000E4274();
        sub_100010EA0((uint64_t)&type metadata for SQLiteError, v20);
        *(void *)uint64_t v21 = v6;
        *(Swift::String *)(v21 + 8) = v19;
        *(_BYTE *)(v21 + swift_weakDestroy(v0 + 24) = 0;
        sub_1000C5DB8();
      }
    }
  }

  return v2;
}

uint64_t SQLiteStatement.expectAtMostOneRow()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_10011C8CC(a1);
  sub_10011C8EC(v2, v3, (__n128)xmmword_100163360);
  return sub_10011C86C(v1);
}

void SQLiteStatement.reduce<A>(into:handleRow:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = sub_10011C874(a1, a2, a3);
  sub_10011C930(v4, (void (*)(uint64_t))sub_10011C5C8);
  if (v3) {
    sub_10011C940();
  }
  sub_1000F4B9C();
}

uint64_t sub_10011B464()
{
  uint64_t v1 = *(sqlite3_stmt **)(v0 + 24);
  if (v1) {
    sqlite3_finalize(v1);
  }
  swift_release(*(void *)(v0 + 16));
  return v0;
}

uint64_t sub_10011B48C()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t sub_10011B4AC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1 && *(void *)(v1 + 16)) {
    return swift_retain(v1);
  }
  unint64_t v3 = sub_1000E4274();
  sub_100010EA0((uint64_t)&type metadata for SQLiteError, v3);
  *(void *)(v4 + 8) = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)uint64_t v4 = 4LL;
  *(_BYTE *)(v4 + swift_weakDestroy(v0 + 24) = 4;
  return sub_1000C5DB8();
}

uint64_t sub_10011B510()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (!v1 || !*(void *)(v1 + 16))
  {
    unint64_t v3 = sub_1000E4274();
    sub_100010EA0((uint64_t)&type metadata for SQLiteError, v3);
    uint64_t v5 = 4LL;
LABEL_7:
    *(void *)uint64_t v4 = v5;
    *(void *)(v4 + 8) = 0LL;
    *(void *)(v4 + swift_weakDestroy(v0 + 16) = 0LL;
    *(_BYTE *)(v4 + swift_weakDestroy(v0 + 24) = 4;
    return swift_willThrow();
  }

  uint64_t result = *(void *)(v0 + 24);
  if (!result)
  {
    unint64_t v6 = sub_1000E4274();
    sub_100010EA0((uint64_t)&type metadata for SQLiteError, v6);
    uint64_t v5 = 3LL;
    goto LABEL_7;
  }

  return result;
}

__n128 SQLiteStatement.bind(_:at:)@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100019AFC(a1, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8))(v5, a2, v8, v9);
  if (!v4)
  {
    __int128 v20 = *(_OWORD *)(v5 + 8);
    uint64_t v11 = swift_retain(*(void *)v5);
    sub_10011C9A4(v11, v12, v13, v14, v15, v16, v17, v18, v20);
    __int128 v19 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v5;
    *(_OWORD *)(a3 + swift_weakDestroy(v0 + 16) = v19;
    __n128 result = *(__n128 *)(v5 + 25);
    *(__n128 *)(a3 + 25) = result;
  }

  return result;
}

void SQLiteStatement.bind(_:withName:)()
{
  uint64_t v2 = (uint64_t)v0;
  sub_10011C978();
  uint64_t v3 = *v0;
  sub_10011B510();
  if (!v1)
  {
    uint64_t v4 = sub_10011C950();
    sub_10011C920(v4);
    sub_10011C96C();
    if ((_DWORD)v3)
    {
      sub_10011C8F8();
      sub_10011C8E0(v2, v3, v5);
      __int128 v16 = *(_OWORD *)(v2 + 8);
      uint64_t v6 = swift_retain();
      sub_10011C9A4(v6, v7, v8, v9, v10, v11, v12, v13, v16);
      sub_10011C9B8();
    }

    else
    {
      unint64_t v14 = sub_1000E4274();
      sub_100010EA0((uint64_t)&type metadata for SQLiteError, v14);
      sub_10011AD68(v15, 9LL);
    }
  }

void SQLiteStatement.bindIfAny(_:withName:)()
{
  if (!v1)
  {
    uint64_t v4 = sub_10011C950();
    sub_10011C920(v4);
    sub_10011C96C();
    if ((_DWORD)v0)
    {
      sub_10011C8F8();
      sub_10011C8E0(v0, v0, v5);
    }

    uint64_t v6 = *(void *)(v0 + 8);
    swift_bridgeObjectRetain(*(void *)(v0 + 16));
    char v7 = *(_BYTE *)(v0 + 40);
    *(void *)uint64_t v3 = v2;
    *(void *)(v3 + 8) = v6;
    *(void *)(v3 + swift_weakDestroy(v0 + 16) = v8;
    *(_OWORD *)(v3 + swift_weakDestroy(v0 + 24) = *(_OWORD *)(v0 + 24);
    *(_BYTE *)(v3 + 4sub_1000E3528(v0, v2, 0) = v7;
    sub_10005E31C();
  }

  sub_10002FBAC();
}

double SQLiteStatement.bind(_:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    *a2 = v5;
    a2[1] = *(_OWORD *)v6;
    double result = *(double *)&v6[9];
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)&v6[9];
  }

  return result;
}

void SQLiteStatement.bind(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0LL;
    __int128 v5 = (void *)(a1 + 32);
    while (1)
    {
      ++v4;
      uint64_t v6 = v5[4];
      sub_100019AFC(v5, v5[3]);
      sub_10011C8E0(v1, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8));
      if (v2) {
        break;
      }
      v5 += 5;
      if (v3 == v4)
      {
        __int128 v17 = *(_OWORD *)(v1 + 8);
        uint64_t v7 = swift_retain(*(void *)v1);
        sub_10011C9A4(v7, v8, v9, v10, v11, v12, v13, v14, v17);
        sub_10011C9B8();
        break;
      }
    }
  }

  else
  {
    unint64_t v15 = sub_1000E4274();
    sub_100010EA0((uint64_t)&type metadata for SQLiteError, v15);
    sub_10011AD68(v16, 7LL);
  }

  sub_10011C8A4();
}

sqlite3_stmt *SQLiteStatement.reset()@<X0>(_OWORD *a1@<X8>)
{
  double result = (sqlite3_stmt *)sub_10011B510();
  if (!v2)
  {
    __int128 v5 = result;
    int v6 = sqlite3_reset(result);
    if (v6)
    {
      unsigned int v7 = v6;
      if (qword_1001DA918 != -1) {
        swift_once(&qword_1001DA918, sub_10010DC40);
      }
      uint64_t v8 = sub_100010ED4();
      uint64_t v9 = sub_1000093D0(v8, (uint64_t)qword_1001EDF10);
      uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
      os_log_type_t v12 = static os_log_type_t.error.getter(v10, v11);
      if (os_log_type_enabled(v10, v12))
      {
        uint64_t v13 = (uint8_t *)sub_100009B20(8LL);
        *(_DWORD *)uint64_t v13 = 67109120;
        unsigned int v17 = v7;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v13 + 4);
        _os_log_impl((void *)&_mh_execute_header, v10, v12, "Failed to reset a statement with error: %d", v13, 8u);
        sub_100010C34((uint64_t)v13);
      }

      unint64_t v14 = sub_1000E4274();
      sub_100010EA0((uint64_t)&type metadata for SQLiteError, v14);
      *(void *)uint64_t v15 = v7;
      *(void *)(v15 + 8) = 0xD000000000000010LL;
      *(void *)(v15 + swift_weakDestroy(v0 + 16) = 0x8000000100173A90LL;
      *(_BYTE *)(v15 + swift_weakDestroy(v0 + 24) = 0;
      return (sqlite3_stmt *)sub_1000C5DB8();
    }

    else
    {
      sqlite3_clear_bindings(v5);
      __int128 v18 = *(_OWORD *)((char *)v1 + 8);
      swift_retain();
      double result = (sqlite3_stmt *)sub_10011C5F4((uint64_t)&v18);
      __int128 v16 = v1[1];
      *a1 = *v1;
      a1[1] = v16;
      *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)v1 + 25);
    }
  }

  return result;
}

void sub_10011BA30(uint64_t a1, uint64_t a2)
{
  if (qword_1001DA918 != -1) {
    swift_once(&qword_1001DA918, sub_10010DC40);
  }
  uint64_t v3 = sub_100010ED4();
  sub_1000093D0(v3, (uint64_t)qword_1001EDF10);
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_10011C9AC();
  uint64_t v6 = sub_10007735C();
  unsigned int v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v9 = static os_log_type_t.error.getter(v7, v8);
  if (os_log_type_enabled(v7, v9))
  {
    uint64_t v10 = (uint8_t *)sub_100009B20(12LL);
    uint64_t v11 = sub_100009B20(32LL);
    uint64_t v16 = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    swift_bridgeObjectRetain(v5);
    uint64_t v14 = sub_1000307E0(v4, v5, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v10 + 4);
    sub_10011C8C0();
    sub_10011C98C();
    _os_log_impl((void *)&_mh_execute_header, v7, v9, "Unexpected result: %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1LL);
    sub_100010C34(v11);
    sub_100010C34((uint64_t)v10);
  }

  else
  {

    sub_10011C998();
    sub_10011C8C0();
  }

  unint64_t v12 = sub_1000E4274();
  sub_100010EA0((uint64_t)&type metadata for SQLiteError, v12);
  *(_OWORD *)uint64_t v13 = xmmword_1001666E0;
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = 0x8000000100173AF0LL;
  *(_BYTE *)(v13 + swift_weakDestroy(v0 + 24) = 0;
  sub_1000C5DB8();
  sub_10011C8A4();
}

double SQLiteStatement.executeAndReset()@<D0>(_OWORD *a1@<X8>)
{
  if (!v2)
  {
    SQLiteStatement.reset()(&v6);
    __int128 v5 = v7[0];
    *a1 = v6;
    a1[1] = v5;
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)v7 + 9);
  }

  return result;
}

uint64_t SQLiteStatement.singleRowIfAny<A>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v6 = v2[1];
  uint64_t v7 = v2[2];
  v10[0] = *v2;
  v10[1] = v6;
  v10[2] = v7;
  __int128 v11 = xmmword_100163360;
  char v12 = 0;
  sub_10005E31C();
  swift_bridgeObjectRetain(v7);
  sub_10011BF4C((uint64_t)v10, (void (*)(uint64_t))sub_10011C61C);
  swift_bridgeObjectRelease();
  if (!v3) {
    return sub_10001443C();
  }
  sub_10001443C();
  uint64_t v8 = type metadata accessor for Optional(0LL, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(a2, v8);
}

uint64_t sub_10011BD28(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Optional(0LL, a5);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v15 - v12;
  uint64_t result = a3(a1);
  if (!v5)
  {
    sub_100009654((uint64_t)v13, 0LL, 1LL, a5);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 40))(a2, v13, v10);
  }

  return result;
}

uint64_t SQLiteStatement.singleRow<A>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v16 = a2;
  uint64_t v4 = type metadata accessor for Optional(0LL, a1);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v15 - v9;
  uint64_t result = SQLiteStatement.singleRowIfAny<A>(_:)(a1, (uint64_t)&v15 - v9);
  if (!v2)
  {
    uint64_t v12 = v16;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    if (sub_100010708((uint64_t)v8, 1LL, a1) == 1)
    {
      sub_100078258((uint64_t)v8);
      unint64_t v13 = sub_1000E4274();
      sub_100010EA0((uint64_t)&type metadata for SQLiteError, v13);
      sub_10011AD68(v14, 5LL);
      return sub_100078258((uint64_t)v10);
    }

    else
    {
      sub_100078258((uint64_t)v10);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a1 - 8) + 32LL))(v12, v8, a1);
    }
  }

  return result;
}

void sub_10011BF4C(uint64_t a1, void (*a2)(uint64_t))
{
  unint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = SQLiteStatement.nextRow()();
  if (v2)
  {
LABEL_2:
    sub_10002FBAC();
    return;
  }

  uint64_t v7 = v6;
  unint64_t v8 = v5;
  while (v7)
  {
    if (!v8)
    {
      unint64_t v11 = sub_1000E4274();
      sub_100010EA0((uint64_t)&type metadata for SQLiteError, v11);
      sub_10011AD68(v12, 2LL);
      sub_10001443C();
      goto LABEL_2;
    }

    a2(v7);
    sub_10001443C();
    --v8;
    uint64_t v7 = SQLiteStatement.nextRow()();
  }

  if (v5 >= v8)
  {
    if (v5 - v8 < *(void *)(a1 + 24))
    {
      unint64_t v9 = sub_1000E4274();
      sub_100010EA0((uint64_t)&type metadata for SQLiteError, v9);
      sub_10011AD68(v10, 5LL);
    }

    goto LABEL_2;
  }

  __break(1u);
}

uint64_t type metadata accessor for SQLiteStatement.Context()
{
  return objc_opt_self(&OBJC_CLASS____TtCV7SQLiter15SQLiteStatement7Context);
}

void SQLiteStatement.iterate(_:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = v1;
  unint64_t v5 = *(void *)(v1 + 32);
  unint64_t v6 = v5;
  while (1)
  {
    uint64_t v7 = SQLiteStatement.nextRow()();
    if (v2) {
      goto LABEL_12;
    }
    if (!v7) {
      break;
    }
    if (!v6)
    {
      unint64_t v11 = sub_1000E4274();
      sub_100010EA0((uint64_t)&type metadata for SQLiteError, v11);
      sub_10011AD68(v12, 2LL);
      swift_release();
LABEL_12:
      sub_10002FBAC();
      return;
    }

    char v8 = a1(v7);
    swift_release();
    --v6;
    if ((v8 & 1) == 0) {
      goto LABEL_12;
    }
  }

  if (v5 >= v6)
  {
    if (v5 - v6 < *(void *)(v3 + 24))
    {
      unint64_t v9 = sub_1000E4274();
      sub_100010EA0((uint64_t)&type metadata for SQLiteError, v9);
      sub_10011AD68(v10, 5LL);
    }

    goto LABEL_12;
  }

  __break(1u);
}

void SQLiteStatement.reduce<A>(_:handleRow:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = sub_10011C874(a1, a2, a3);
  sub_10011C930(v4, (void (*)(uint64_t))sub_10011C638);
  if (v3) {
    sub_10011C940();
  }
  sub_1000F4B9C();
}

uint64_t sub_10011C19C( uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a5 - 8);
  uint64_t v11 = __chkstk_darwin(a1);
  unint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v17 - v14;
  (*(void (**)(char *))(v10 + 16))(v13);
  a3(v13, a1);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, a5);
  if (!v5) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 40))(a2, v15, a5);
  }
  return result;
}

uint64_t SQLiteStatement.map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[2] = a3;
  void v4[3] = a1;
  void v4[4] = a2;
  return SQLiteStatement.compactMap<A>(_:)((uint64_t)sub_10011C654, (uint64_t)v4, a3);
}

uint64_t sub_10011C2BC@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a1();
  if (!v3) {
    return sub_100009654(a3, 0LL, 1LL, a2);
  }
  return result;
}

uint64_t SQLiteStatement.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = static Array._allocateUninitialized(_:)(0LL, a3);
  sub_10011BF4C(v3, (void (*)(uint64_t))sub_10011C670);
  if (v4) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_10011C39C(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a4;
  uint64_t v22 = a2;
  uint64_t v7 = type metadata accessor for Optional(0LL, a5);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = *(void *)(a5 - 8);
  uint64_t v13 = __chkstk_darwin(v9);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  unsigned int v17 = (char *)&v21 - v16;
  uint64_t v18 = v23;
  uint64_t result = v22(a1);
  if (!v18)
  {
    if (sub_100010708((uint64_t)v11, 1LL, a5) == 1)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v11, a5);
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, a5);
      uint64_t v20 = type metadata accessor for Array(0LL, a5);
      Array.append(_:)(v15, v20);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, a5);
    }
  }

  return result;
}

uint64_t SQLiteStatement.expectRows()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_10011C8CC(a1);
  sub_10011C8EC(v2, v3, (__n128)xmmword_1001666F0);
  return sub_10011C86C(v1);
}

uint64_t SQLiteStatement.expect(minRows:maxRows:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3[1];
  uint64_t v5 = v3[2];
  *(void *)a3 = *v3;
  *(void *)(a3 + 8) = v4;
  *(void *)(a3 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(a3 + swift_weakDestroy(v0 + 24) = a1;
  *(void *)(a3 + 3sub_1000108B8(v0 + 2) = a2;
  *(_BYTE *)(a3 + 4sub_1000E3528(v0, v2, 0) = 0;
  swift_retain();
  return sub_10011C86C(v5);
}

uint64_t SQLiteStatement.dontExpectRows()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1[1];
  uint64_t v3 = v1[2];
  *(void *)a1 = *v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + swift_weakDestroy(v0 + 24) = 0LL;
  *(void *)(a1 + 3sub_1000108B8(v0 + 2) = 0LL;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = 0;
  swift_retain();
  return sub_10011C86C(v3);
}

uint64_t SQLiteStatement.expectOneRow()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_10011C8CC(a1);
  sub_10011C8EC(v2, v3, (__n128)vdupq_n_s64(1uLL));
  return sub_10011C86C(v1);
}

uint64_t sub_10011C5C8(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(v1 + 24))(*(void *)(v1 + 40), a1);
}

uint64_t sub_10011C5F4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10011C61C(uint64_t a1)
{
  return sub_10011BD28( a1,  *(void *)(v1 + 24),  *(uint64_t (**)(uint64_t))(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 16));
}

uint64_t sub_10011C638(uint64_t a1)
{
  return sub_10011C19C( a1,  *(void *)(v1 + 24),  *(void (**)(char *, uint64_t))(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 16));
}

uint64_t sub_10011C654@<X0>(uint64_t a1@<X8>)
{
  return sub_10011C2BC(*(uint64_t (**)(void))(v1 + 24), *(void *)(v1 + 16), a1);
}

uint64_t sub_10011C670(uint64_t a1)
{
  return sub_10011C39C( a1,  *(uint64_t (**)(uint64_t))(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 16));
}

uint64_t destroy for SQLiteStatement(void *a1)
{
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t initializeWithCopy for SQLiteStatement(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = a2[2];
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 24) = *(_OWORD *)(a2 + 3);
  *(_BYTE *)(a1 + 4sub_1000E3528(v0, v2, 0) = *((_BYTE *)a2 + 40);
  swift_retain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for SQLiteStatement(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  a1[4] = a2[4];
  *((_BYTE *)a1 + 4sub_1000E3528(v0, v2, 0) = *((_BYTE *)a2 + 40);
  return a1;
}

uint64_t *assignWithTake for SQLiteStatement(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  uint64_t v5 = a2[2];
  uint64_t v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 3) = *(_OWORD *)(a2 + 3);
  *((_BYTE *)a1 + 4sub_1000E3528(v0, v2, 0) = *((_BYTE *)a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLiteStatement(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 41))
    {
      LODWORD(vsub_1000108B8(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(vsub_1000108B8(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLiteStatement(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + swift_weakDestroy(v0 + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 4sub_1000E3528(v0, v2, 0) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 41) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SQLiteStatement()
{
  return &type metadata for SQLiteStatement;
}

uint64_t sub_10011C86C(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_10011C874@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, a1, a2);
}

  ;
}

uint64_t sub_10011C8C0()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_10011C8CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t sub_10011C8E0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3, v4);
}

uint64_t sub_10011C8EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  *(__n128 *)(a2 + swift_weakDestroy(v0 + 24) = a3;
  *(_BYTE *)(a2 + 4sub_1000E3528(v0, v2, 0) = 0;
  return swift_retain(a1);
}

void *sub_10011C8F8()
{
  return sub_100019AFC(v0, v0[3]);
}

uint64_t sub_10011C920(uint64_t a1)
{
  return sqlite3_bind_parameter_index(v1, (const char *)(a1 + 32));
}

void sub_10011C930(uint64_t a1, void (*a2)(uint64_t))
{
}

uint64_t sub_10011C940()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10011C950()
{
  return String.utf8CString.getter(v1, v0);
}

uint64_t sub_10011C960()
{
  return sub_10011B510();
}

uint64_t sub_10011C96C()
{
  return swift_release(v0);
}

  ;
}

uint64_t sub_10011C98C()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

uint64_t sub_10011C998()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_10011C9A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10011C5F4((uint64_t)&a9);
}

uint64_t sub_10011C9AC()
{
  return swift_retain_n(v0, 2LL);
}

__n128 sub_10011C9B8()
{
  __int128 v2 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)v0;
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  __n128 result = *(__n128 *)(v0 + 25);
  *(__n128 *)(v1 + 25) = result;
  return result;
}

SQLiter::SQLiteDataType __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteColumnType.getDataType()()
{
  __asm { BR              X10 }

  return result;
}

uint64_t sub_10011CA00()
{
  return 0LL;
}

void sub_10011CA78(char a1)
{
  __asm { BR              X10 }

uint64_t sub_10011CAB8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10011CB98 + 4 * byte_100166746[a2]))(1112493122LL);
}

uint64_t sub_10011CB98(uint64_t a1)
{
  if (a1 == 1112493122 && v1 == v2)
  {
    char v4 = 1;
    uint64_t v2 = v1;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 1112493122LL, v2, 0LL);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v4 & 1;
}

BOOL sub_10011CCA8(char a1, char a2)
{
  return dword_100166834[a1] == dword_100166834[a2];
}

void sub_10011CCCC(char a1)
{
}

Swift::Int sub_10011CD0C(unsigned __int8 a1)
{
  uint64_t v2 = SQLiteColumnType.rawValue.getter(a1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void sub_10011CD6C(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_10011CDA4(uint64_t a1)
{
  return swift_bridgeObjectRelease(v1);
}

void sub_10011CE7C(uint64_t a1, char a2)
{
}

void sub_10011CEAC(uint64_t a1, char a2)
{
}

Swift::Int sub_10011CEE8(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = SQLiteColumnType.rawValue.getter(a2);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void SQLiteColumnType.defaultNativeType.getter(char a1)
{
  __asm { BR              X10 }

void *sub_10011CF7C()
{
  return &type metadata for Double;
}

SQLiter::SQLiteColumnType_optional __swiftcall SQLiteColumnType.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001BB6F0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xB) {
    return (SQLiter::SQLiteColumnType_optional)11;
  }
  else {
    return (SQLiter::SQLiteColumnType_optional)v3;
  }
}

uint64_t SQLiteColumnType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10011D0AC + 4 * byte_100166767[a1]))( 1415071060LL,  0xE400000000000000LL);
}

uint64_t sub_10011D0AC()
{
  return 1112493122LL;
}

uint64_t sub_10011D0B8()
{
  return 0x3233544E49LL;
}

uint64_t sub_10011D0CC()
{
  return 0x3436544E49LL;
}

uint64_t sub_10011D0E0()
{
  return 0x3233544E4955LL;
}

uint64_t sub_10011D0F4()
{
  return 0x3436544E4955LL;
}

uint64_t sub_10011D108()
{
  return 0x54414F4C46LL;
}

uint64_t sub_10011D11C()
{
  return 0x454C42554F44LL;
}

uint64_t sub_10011D130()
{
  return 0x4E41454C4F4F42LL;
}

uint64_t sub_10011D148()
{
  return 5852737LL;
}

uint64_t sub_10011D158()
{
  return 0x454D495445544144LL;
}

void sub_10011D170(char *a1)
{
}

unint64_t sub_10011D180()
{
  unint64_t result = qword_1001DB018;
  if (!qword_1001DB018)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SQLiteColumnType,  &type metadata for SQLiteColumnType);
    atomic_store(result, (unint64_t *)&qword_1001DB018);
  }

  return result;
}

Swift::Int sub_10011D1BC()
{
  return sub_10011CD0C(*v0);
}

void sub_10011D1C4(uint64_t a1)
{
}

Swift::Int sub_10011D1CC(uint64_t a1)
{
  return sub_10011CEE8(a1, *v1);
}

SQLiter::SQLiteColumnType_optional sub_10011D1D4@<W0>( Swift::String *a1@<X0>, SQLiter::SQLiteColumnType_optional *a2@<X8>)
{
  result.Swift::Bool value = SQLiteColumnType.init(rawValue:)(*a1).value;
  a2->Swift::Bool value = result.value;
  return result;
}

uint64_t sub_10011D200@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SQLiteColumnType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t storeEnumTagSinglePayload for SQLiteColumnType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF5) {
    return ((uint64_t (*)(void))((char *)&loc_10011D274 + 4 * byte_100166777[v4]))();
  }
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_10011D2A8 + 4 * byte_100166772[v4]))();
}

uint64_t sub_10011D2A8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011D2B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10011D2B8LL);
  }
  return result;
}

uint64_t sub_10011D2C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10011D2CCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 10;
  return result;
}

uint64_t sub_10011D2D0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011D2D8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SQLiteColumnType()
{
  return &type metadata for SQLiteColumnType;
}

void sub_10011D2F4(uint64_t a1@<X8>)
{
}

sqlite3_stmt *String.init(with:column:)()
{
  uint64_t result = (sqlite3_stmt *)sub_10010BF6C();
  if (v0)
  {
    sub_10001683C();
    return (sqlite3_stmt *)v1;
  }

  if (v1 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if (v1 <= 0x7FFFFFFF)
  {
    int v3 = sqlite3_column_text(result, v1);
    if (v3)
    {
      uint64_t v1 = String.init(cString:)(v3);
      sub_10001683C();
    }

    else
    {
      sub_10001683C();
      return 0LL;
    }

    return (sqlite3_stmt *)v1;
  }

  __break(1u);
  return result;
}

uint64_t sub_10011D38C@<X0>(uint64_t *a1@<X8>)
{
  return sub_10011D4A4((uint64_t (*)(void))String.init(with:column:), a1);
}

sqlite3_stmt *Data.init(with:column:)()
{
  uint64_t result = (sqlite3_stmt *)sub_10010BF6C();
  if (v0)
  {
    sub_10001683C();
    return (sqlite3_stmt *)v1;
  }

  if (v1 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else if (v1 <= 0x7FFFFFFF)
  {
    int v3 = result;
    uint64_t v4 = sqlite3_column_blob(result, v1);
    if (v4)
    {
      uint64_t v5 = v4;
      int v6 = sqlite3_column_bytes(v3, v1);
      uint64_t v1 = Data.init(bytes:count:)(v5, v6);
      sub_10001683C();
    }

    else
    {
      SQLiteRow.type(at:)(v1);
      sub_10001683C();
      if (!v7) {
        return 0LL;
      }
    }

    return (sqlite3_stmt *)v1;
  }

  __break(1u);
  return result;
}

uint64_t sub_10011D488@<X0>(uint64_t *a1@<X8>)
{
  return sub_10011D4A4((uint64_t (*)(void))Data.init(with:column:), a1);
}

uint64_t sub_10011D4A4@<X0>(uint64_t (*a1)(void)@<X4>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t RawRepresentable<>.init(with:column:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v54 = a2;
  uint64_t v50 = a6;
  uint64_t v10 = type metadata accessor for Optional(0LL, a3);
  uint64_t v46 = *(void *)(v10 - 8);
  uint64_t v47 = v10;
  __chkstk_darwin(v10);
  uint64_t v48 = (char *)&v45 - v11;
  uint64_t v49 = a4;
  uint64_t v51 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  a4,  a3,  &protocol requirements base descriptor for RawRepresentable,  &associated type descriptor for RawRepresentable.RawValue);
  uint64_t v13 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v52 = *(void *)(v13 - 8);
  uint64_t v53 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v45 - v15;
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = __chkstk_darwin(v14);
  uint64_t v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v45 - v21;
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 8);
  uint64_t v24 = swift_retain();
  uint64_t v25 = v57;
  uint64_t v26 = AssociatedTypeWitness;
  v23(v24, v54, AssociatedTypeWitness, a5);
  if (v25) {
    return swift_release();
  }
  uint64_t v29 = v52;
  uint64_t v28 = v53;
  uint64_t v57 = a1;
  if (sub_100010708((uint64_t)v16, 1LL, v26) == 1)
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v28);
    uint64_t v30 = 1LL;
    uint64_t v32 = v50;
    uint64_t v31 = v51;
  }

  else
  {
    os_log_type_t v33 = v16;
    uint64_t v34 = v22;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v22, v33, v26);
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, v26);
    uint64_t v35 = (uint64_t)v48;
    uint64_t v36 = v20;
    uint64_t v31 = v51;
    dispatch thunk of RawRepresentable.init(rawValue:)(v36, v51, v49);
    if (sub_100010708(v35, 1LL, v31) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v35, v47);
      uint64_t v55 = 0LL;
      unint64_t v56 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(45LL);
      v37._object = (void *)0x80000001001735F0LL;
      v37._uint64_t countAndFlagsBits = 0xD000000000000011LL;
      String.append(_:)(v37);
      v38._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v31, 0LL);
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      v39._uint64_t countAndFlagsBits = 0xD000000000000018LL;
      v39._object = (void *)0x8000000100173610LL;
      String.append(_:)(v39);
      DefaultStringInterpolation.appendInterpolation<A>(_:)(v34, v26);
      uint64_t v40 = v55;
      unint64_t v41 = v56;
      unint64_t v42 = sub_1000E4274();
      uint64_t v43 = swift_allocError(&type metadata for SQLiteError, v42, 0LL, 0LL);
      *(void *)uint64_t v44 = v40;
      *(void *)(v44 + 8) = v41;
      *(void *)(v44 + swift_weakDestroy(v0 + 16) = 0LL;
      *(_BYTE *)(v44 + swift_weakDestroy(v0 + 24) = 3;
      swift_willThrow(v43);
      swift_release();
      return sub_10011D814();
    }

    swift_release();
    sub_10011D814();
    uint64_t v32 = v50;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 32LL))(v50, v35, v31);
    uint64_t v30 = 0LL;
  }

  return sub_100009654(v32, v30, 1LL, v31);
}

uint64_t sub_10011D814()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

Swift::Void __swiftcall SQLiteContext.setError(message:code:)(Swift::String message, Swift::Int32 code)
{
  int v3 = v2;
  uint64_t v5 = String.utf8CString.getter(message._countAndFlagsBits, message._object);
  sqlite3_result_error(v3, (const char *)(v5 + 32), code);
  swift_release(v5);
}

uint64_t SQLiteContext.setError<A>(_:message:code:)( uint64_t a1, uint64_t a2, unint64_t a3, int a4, sqlite3_context *a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a6 - 8);
  __chkstk_darwin(a1);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (String.count.getter(v15, v16))
  {
    uint64_t v28 = a2;
    unint64_t v29 = a3;
    swift_bridgeObjectRetain(a3);
    v17._uint64_t countAndFlagsBits = 8238LL;
    v17._object = (void *)0xE200000000000000LL;
    String.append(_:)(v17);
    uint64_t v19 = v28;
    unint64_t v18 = v29;
  }

  else
  {
    uint64_t v19 = 0LL;
    unint64_t v18 = 0xE000000000000000LL;
  }

  uint64_t v28 = 0x203A726F727245LL;
  unint64_t v29 = 0xE700000000000000LL;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a6);
  v20._uint64_t countAndFlagsBits = String.init<A>(describing:)(v14);
  object = v20._object;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(object);
  uint64_t v22 = v28;
  uint64_t v23 = (void *)v29;
  uint64_t v28 = v19;
  unint64_t v29 = v18;
  swift_bridgeObjectRetain(v18);
  v24._uint64_t countAndFlagsBits = v22;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v18);
  unint64_t v25 = v29;
  uint64_t v26 = String.utf8CString.getter(v28, v29);
  swift_bridgeObjectRelease(v25);
  sqlite3_result_error(a5, (const char *)(v26 + 32), a4);
  return swift_release(v26);
}

void (__cdecl **SQLiteDestructor.value.getter(void (__cdecl **result)(void *)))(void *)
{
  if (result)
  {
    if (result == (void (__cdecl **)(void *))1)
    {
      if (qword_1001DA908 != -1) {
        swift_once(&qword_1001DA908, sub_10010B754);
      }
      return (void (__cdecl **)(void *))qword_1001EDEF0;
    }

    else if (result == (void (__cdecl **)(void *))2)
    {
      return &_sqlite3_free;
    }
  }

  return result;
}

Swift::Void __swiftcall SQLiteContext.setSubtype(_:)(Swift::UInt32 a1)
{
}

Swift::Void __swiftcall SQLiteContext.setInt32(_:)(Swift::Int32 a1)
{
}

Swift::Void __swiftcall SQLiteContext.setInt64(_:)(Swift::Int64 a1)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteContext.setInt(_:)( Swift::Int a1)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteContext.setUInt64(_:)( Swift::UInt64 a1)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteContext.setInt8(_:)( Swift::Int8 a1)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteContext.setUInt8(_:)( Swift::UInt8 a1)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteContext.setInt16(_:)( Swift::Int16 a1)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteContext.setUInt16(_:)( Swift::UInt16 a1)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteContext.setUInt32(_:)( Swift::UInt32 a1)
{
  if ((a1 & 0x80000000) != 0)
  {
    unint64_t v2 = sub_1000E4274();
    uint64_t v3 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v2);
    sub_10010FFF8(v3, v4);
  }

  else
  {
    sqlite3_result_int(v1, a1);
  }

  sub_10010BF78();
}

void sub_10011DB70(sqlite3_int64 a1, sqlite3_context *a2)
{
  if (a1 < 0)
  {
    unint64_t v2 = sub_1000E4274();
    uint64_t v3 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v2);
    sub_10010FFF8(v3, v4);
  }

  else
  {
    sub_10011E28C(a1, a2);
  }

  sub_10010BF78();
}

Swift::Void __swiftcall SQLiteContext.setBool(_:)(Swift::Bool a1)
{
}

Swift::Void __swiftcall SQLiteContext.setFloat(_:)(Swift::Float a1)
{
}

void SQLiteContext.setString(_:destructor:)( uint64_t a1, uint64_t a2, void (__cdecl **a3)(void *), sqlite3_context *a4)
{
  if (a2) {
    sub_10011DC88(a1, a2, a4, a3);
  }
  else {
    sqlite3_result_null(a4);
  }
}

void sub_10011DC08(const char *a1, sqlite3_context *a2, void (__cdecl **a3)(void *))
{
  int64_t v6 = strlen(a1);
  if (v6 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
  }

  else
  {
    int v7 = v6;
    if (v6 <= 0x7FFFFFFF)
    {
      uint64_t v8 = SQLiteDestructor.value.getter(a3);
      sqlite3_result_text(a2, a1, v7, (void (__cdecl *)(void *))v8);
      return;
    }
  }

  __break(1u);
}

void sub_10011DC88(uint64_t a1, uint64_t a2, sqlite3_context *a3, void (__cdecl **a4)(void *))
{
  _OWORD v7[2] = a3;
  v7[3] = a4;
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)(sub_10011E250, v7, a1, a2, (char *)&type metadata for () + 8);
  }

  else
  {
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      v8[0] = a1;
      v8[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      int64_t v6 = (const char *)v8;
    }

    else if ((a1 & 0x1000000000000000LL) != 0)
    {
      int64_t v6 = (const char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      int64_t v6 = (const char *)_StringObject.sharedUTF8.getter(a1, a2);
    }

    sub_10011DC08(v6, a3, a4);
  }

void SQLiteContext.setData(_:destructor:)(int a1, unint64_t a2, int a3, sqlite3_context *a4)
{
  if (a2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  sqlite3_result_null(a4);
}

uint64_t sub_10011DDD0()
{
  return sub_100010A30(v0, v1);
}

void SQLiteContext.setBuffer(_:ofSize:destructor:)( void *a1@<X0>, sqlite3_context *a2@<X3>, uint64_t a3@<X1>, void (__cdecl **a4)(void *)@<X2>, int a5@<W8>)
{
  if (a3 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_13;
  }

  a5 = a3;
  if (a3 > 0x7FFFFFFF)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v5 = a1;
  if (!a4)
  {
    uint64_t v8 = 0LL;
    goto LABEL_11;
  }

  if (a4 == (void (__cdecl **)(void *))1)
  {
    v11[0] = v6;
    v11[1] = v7;
    int64_t v6 = v11;
    if (qword_1001DA908 == -1)
    {
LABEL_10:
      uint64_t v8 = (void (__cdecl **)(void *))qword_1001EDEF0;
      goto LABEL_11;
    }

uint64_t sub_10011DFC4( uint64_t a1, uint64_t a2, sqlite3_context *a3, uint64_t a4, unint64_t a5, void (__cdecl **a6)(void *))
{
  uint64_t v13 = a1;
  __int16 v14 = a2;
  char v15 = BYTE2(a2);
  char v16 = BYTE3(a2);
  char v17 = BYTE4(a2);
  char v18 = BYTE5(a2);
  uint64_t v10 = Data.count.getter(a4, a5);
  SQLiteContext.setBuffer(_:ofSize:destructor:)(&v13, a3, v10, a6, v11);
  return sub_100010A30(a4, a5);
}

uint64_t sub_10011E0CC( uint64_t a1, uint64_t a2, uint64_t a3, sqlite3_context *a4, uint64_t a5, unint64_t a6, void (__cdecl **a7)(void *))
{
  uint64_t v12 = __DataStorage._bytes.getter();
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
      __break(1u);
      return result;
    }

    char v15 = (void *)(v13 + a1 - result);
  }

  else
  {
    char v15 = 0LL;
  }

  __DataStorage._length.getter();
  if (v15)
  {
    uint64_t v16 = Data.count.getter(a5, a6);
    SQLiteContext.setBuffer(_:ofSize:destructor:)(v15, a4, v16, a7, v17);
  }

  else
  {
    sqlite3_result_null(a4);
  }

  return sub_100010A30(a5, a6);
}

uint64_t getEnumTagSinglePayload for SQLiteDestructor(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for SQLiteDestructor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)uint64_t result = 0LL;
    *(_DWORD *)uint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SQLiteDestructor()
{
  return &type metadata for SQLiteDestructor;
}

ValueMetadata *type metadata accessor for SQLiteContext()
{
  return &type metadata for SQLiteContext;
}

void sub_10011E250(const char *a1)
{
}

uint64_t sub_10011E268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10011E0CC(a1, a2, a3, v6, v3, v4, v5);
}

uint64_t sub_10011E280()
{
  return sub_10007E2A4(v0, v1);
}

void sub_10011E28C(sqlite3_int64 a1, sqlite3_context *a2)
{
}

void sub_10011E2A0(int a1@<W1>, sqlite3_context *a2@<X8>)
{
}

uint64_t sub_10011E2A8()
{
  return sub_100010A1C(v0, v1);
}

  ;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteSchemaDescribing.ensureValidSQLNameCharacters()()
{
  uint64_t v2 = (*(uint64_t (**)(void))(v0 + 16))();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = v2 + 32;
    do
    {
      sub_100019B20(v4, (uint64_t)v7);
      uint64_t v6 = v8;
      uint64_t v5 = v9;
      sub_100019AFC(v7, v8);
      (*(void (**)(uint64_t))(*(void *)(v5 + 8) + 8LL))(v6);
      sub_1000108B8(v7);
      if (v1) {
        break;
      }
      v4 += 40LL;
      --v3;
    }

    while (v3);
  }

  swift_bridgeObjectRelease();
}

uint64_t SQLiteSchema.columns.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v8;
  uint64_t v5 = sub_10000941C(qword_1001DB020);
  uint64_t v6 = _arrayForceCast<A, B>(_:)(v4, a1, v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_10011E3C8(uint64_t a1, uint64_t a2)
{
  return SQLiteSchema.columns.getter(*(void *)(a1 + 16), a2, *(void *)(a1 + 32));
}

void sub_10011E3D8()
{
}

uint64_t sub_10011E3F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32LL);
}

uint64_t type metadata accessor for SQLiteSchema(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for SQLiteSchema);
}

uint64_t SQLiteBaseVTab.init(style:)(char a1)
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v1 + swift_weakDestroy(v0 + 24) = 0LL;
  *(_BYTE *)(v1 + 4sub_1000E3528(v0, v2, 0) = a1;
  uint64_t v2 = sub_100009B20(192LL);
  *(void *)(v1 + 3sub_1000108B8(v0 + 2) = v2;
  int v3 = (*(uint64_t (**)(void))(*(void *)v1 + 312LL))();
  uint64_t v4 = SQLiteBaseVTab.xCreate()();
  unsigned int v5 = *(unsigned __int8 *)(v1 + 40);
  *(_DWORD *)uint64_t v2 = v3;
  if (v5 >= 2) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = sub_10011F218;
  }
  *(void *)(v2 + 8) = v4;
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = sub_10011FD64;
  *(void *)(v2 + swift_weakDestroy(v0 + 24) = sub_10011F170;
  *(void *)(v2 + 3sub_1000108B8(v0 + 2) = sub_10011F218;
  *(void *)(v2 + 4sub_1000E3528(v0, v2, 0) = v6;
  *(void *)(v2 + 48) = sub_10011F2BC;
  *(void *)(v2 + 56) = sub_10011F35C;
  *(void *)(v2 + 64) = sub_10011F464;
  *(void *)(v2 + 7sub_1000108B8(v0 + 2) = sub_10011F520;
  *(void *)(v2 + 8sub_1000E3528(v0, v2, 0) = sub_10011F5DC;
  *(void *)(v2 + 88) = sub_10011F6B8;
  *(void *)(v2 + 96) = sub_10011F788;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 12sub_1000E3528(v0, v2, 0) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 15sub_1000108B8(v0 + 2) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(void *)(v2 + 184) = 0LL;
  return v1;
}

uint64_t SQLiteBaseVTab.deinit()
{
  uint64_t v1 = v0;
  sub_100010C34(*(void *)(v0 + 32));
  if (qword_1001DA918 != -1) {
    swift_once(&qword_1001DA918, sub_10010DC40);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_1000093D0(v2, (uint64_t)qword_1001EDF10);
  uint64_t v3 = swift_retain_n(v0, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)sub_100009B20(12LL);
    uint64_t v7 = sub_100009B20(32LL);
    uint64_t v15 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    sub_1000A14F8(v1 + 16, (uint64_t)v14);
    uint64_t v8 = *(void *)(v1 + 24);
    if (v8)
    {
      uint64_t v9 = *(void *)(v1 + 16);
      unint64_t v10 = *(void *)(v1 + 24);
    }

    else
    {
      unint64_t v10 = 0x8000000100173B20LL;
      uint64_t v9 = 0xD000000000000010LL;
    }

    swift_bridgeObjectRetain(v8);
    sub_1000307E0(v9, v10, &v15);
    sub_100030F88();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v11, v12, v6 + 4);
    sub_10004099C();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Destroying vtable module with name %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL);
    sub_100010C34(v7);
    sub_100010C34((uint64_t)v6);
  }

  else
  {

    sub_10004099C();
  }

  swift_bridgeObjectRelease();
  return v1;
}

uint64_t SQLiteBaseVTab.moduleName.getter()
{
  return v0;
}

uint64_t (*SQLiteBaseVTab.xCreate()())(sqlite3 *a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5, uint64_t a6)
{
  uint64_t v1 = sub_10011FD64;
  if (*(_BYTE *)(v0 + 40) != 1) {
    uint64_t v1 = 0LL;
  }
  if (*(_BYTE *)(v0 + 40)) {
    return v1;
  }
  else {
    return sub_10011F080;
  }
}

uint64_t (*SQLiteBaseVTab.xDestroy()())()
{
  else {
    return sub_10011F218;
  }
}

uint64_t SQLiteBaseVTab.register(_:database:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  sub_10011FD68((uint64_t)(v4 + 2), (uint64_t)v15);
  v4[2] = a1;
  void v4[3] = a2;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(sqlite3 **)(a3 + 16);
  uint64_t v9 = (const sqlite3_module *)v4[4];
  unint64_t v10 = (const char *)(String.utf8CString.getter(a1, a2) + 32);
  swift_retain();
  LODWORD(v4) = sqlite3_create_module_v2(v8, v10, v9, v4, (void (__cdecl *)(void *))sub_10011F7D4);
  uint64_t result = swift_release();
  if ((_DWORD)v4)
  {
    unint64_t v12 = sub_1000E4274();
    sub_100010EA0((uint64_t)&type metadata for SQLiteError, v12);
    *(void *)uint64_t v13 = a1;
    *(void *)(v13 + 8) = a2;
    *(void *)(v13 + swift_weakDestroy(v0 + 16) = 0LL;
    *(_BYTE *)(v13 + swift_weakDestroy(v0 + 24) = 2;
    swift_bridgeObjectRetain(a2);
    return swift_willThrow(v14);
  }

  return result;
}

uint64_t SQLiteBaseVTab.connect(db:argc:argv:outVTab:outError:)( sqlite3 *a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v9 = (char *)sqlite3_malloc(32);
  if (v9)
  {
    unint64_t v10 = v9;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))((*(uint64_t (**)(void))(*(void *)v4 + 320LL))() + 120);
    uint64_t v12 = sub_10000C4AC();
    uint64_t v13 = (void *)v11(v12, a2, a3);
    _StringGuts.grow(_:)(54LL);
    uint64_t __src = 0LL;
    unint64_t v25 = 0xE000000000000000LL;
    v14._object = (void *)0x8000000100173C30LL;
    v14._uint64_t countAndFlagsBits = 0xD000000000000019LL;
    String.append(_:)(v14);
    uint64_t v15 = v13[2];
    uint64_t v16 = (void *)v13[3];
    swift_bridgeObjectRetain(v16);
    v17._uint64_t countAndFlagsBits = v15;
    v17._object = v16;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 0x20202020200A2820LL;
    v18._object = (void *)0xEF20202020202020LL;
    String.append(_:)(v18);
    v19._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*v13 + 152LL))();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 0x202020202020200ALL;
    v21._object = (void *)0xEA00000000002920LL;
    String.append(_:)(v21);
    uint64_t v22 = String.utf8CString.getter(0LL, 0xE000000000000000LL);
    swift_bridgeObjectRelease();
    int v23 = sqlite3_declare_vtab(a1, (const char *)(v22 + 32));
    swift_release();
    if (!v23)
    {
      uint64_t __src = 0LL;
      LODWORD(v25) = 0;
      uint64_t v26 = 0LL;
      uint64_t v27 = v13;
      sub_10011F7F8((char *)&__src, 1LL, v10);
      uint64_t result = 0LL;
      *a4 = v10;
      return result;
    }

    swift_release();
  }

  return 1LL;
}

void SQLiteBaseVTab.disconnect(_:)(void *a1)
{
}

uint64_t SQLiteBaseVTab.open(_:for:)(char **a1, uint64_t a2)
{
  uint64_t v4 = (char *)sqlite3_malloc(16);
  if (!v4) {
    return 1LL;
  }
  os_log_type_t v5 = v4;
  uint64_t v6 = *(uint64_t (**)(uint64_t))((*(uint64_t (**)(void))(*(void *)a2 + 160LL))() + 144);
  uint64_t v7 = sub_10000C4AC();
  __src[0] = 0LL;
  __src[1] = v6(v7);
  sub_10011F8C0((char *)__src, 1LL, v5);
  uint64_t result = 0LL;
  *a1 = v5;
  return result;
}

void SQLiteBaseVTab.close(_:for:)(void *a1)
{
  if (a1[1]) {
    swift_release();
  }
  sqlite3_free(a1);
  sub_100009A90();
}

void SQLiteBaseVTab.filter(_:for:idxNum:idxStr:arguments:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 152LL);
    sub_10000C4AC();
    v9(a3, a4, a5);
    sub_10001683C();
  }

  sub_10005A430();
}

uint64_t SQLiteBaseVTab.next(_:for:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 1LL;
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 160LL);
  uint64_t v3 = sub_10000C4AC();
  uint64_t v4 = v2(v3);
  sub_10001683C();
  return v4;
}

void SQLiteBaseVTab.eof(_:for:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(void (**)(uint64_t))(*(void *)v1 + 168LL);
    uint64_t v3 = sub_10000C4AC();
    v2(v3);
    sub_10001683C();
  }

  sub_1000110D4();
}

void SQLiteBaseVTab.column(_:for:context:columnIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 144LL))(a4);
    uint64_t v8 = v7;
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 184LL);
    swift_retain();
    v9(v6, v8, a3);
    swift_bridgeObjectRelease();
    swift_release();
  }

  sub_10005A430();
}

void SQLiteBaseVTab.rowid(_:for:outRowid:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 176LL);
    uint64_t v6 = sub_10000C4AC();
    uint64_t v7 = v5(v6);
    sub_10001683C();
    *a3 = v7;
  }

  sub_1000110D4();
}

uint64_t SQLiteBaseVTab.Connection.init(_:argc:argv:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = sub_10011FD80();
  if (a2 < 3)
  {
    unint64_t v11 = sub_1000E4274();
    uint64_t v12 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v11);
    *(void *)uint64_t v13 = 0xD00000000000001CLL;
    Swift::String v14 = "Invalid number of parameters";
LABEL_8:
    unint64_t v19 = (unint64_t)(v14 - 32) | 0x8000000000000000LL;
    goto LABEL_9;
  }

  uint64_t v15 = *(void *)(a3 + 16);
  if (!v15)
  {
    unint64_t v18 = sub_1000E4274();
    uint64_t v12 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v18);
    *(void *)uint64_t v13 = 0x7463657078656E55LL;
    unint64_t v19 = 0xEE006C696E206465LL;
LABEL_9:
    *(void *)(v13 + 8) = v19;
    *(void *)(v13 + swift_weakDestroy(v0 + 16) = 0LL;
    *(_BYTE *)(v13 + swift_weakDestroy(v0 + 24) = 3;
    swift_willThrow(v12);
    swift_release();
    swift_weakDestroy(v3 + 32);
    uint64_t v21 = type metadata accessor for SQLiteBaseVTab.Connection();
    swift_deallocPartialClassInstance(v3, v21, 40LL, 7LL);
    return v3;
  }

  static String.Encoding.utf8.getter(v10);
  uint64_t v16 = String.init(cString:encoding:)(v15, v9);
  if (!v17)
  {
    unint64_t v20 = sub_1000E4274();
    uint64_t v12 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v20);
    *(void *)uint64_t v13 = 0xD000000000000014LL;
    Swift::String v14 = "Cannot create string";
    goto LABEL_8;
  }

  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v16;
  *(void *)(v3 + swift_weakDestroy(v0 + 24) = v17;
  sub_10011FD68(v3 + 32, (uint64_t)v24);
  swift_weakAssign(v3 + 32, a1);
  swift_release();
  return v3;
}

void SQLiteBaseVTab.Connection.table.getter()
{
}

uint64_t SQLiteBaseVTab.Cursor.init(_:)(uint64_t a1)
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = 0LL;
  uint64_t v3 = sub_10011FD80();
  sub_10011FD68(v3, (uint64_t)v5);
  swift_weakAssign(v1 + 24, a1);
  swift_release();
  return v1;
}

void SQLiteBaseVTab.Cursor.connection.getter()
{
}

uint64_t SQLiteBaseVTab.Cursor.filter(idxNum:idxStr:arguments:)()
{
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0LL;
  return static AvroPrimitiveSchema.null.getter();
}

Swift::Int32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteBaseVTab.Cursor.next()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  BOOL v2 = __OFADD__(v1, 1LL);
  uint64_t v3 = v1 + 1;
  if (v2)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v3;
    return static AvroPrimitiveSchema.null.getter();
  }

  return result;
}

Swift::Bool __swiftcall SQLiteBaseVTab.Cursor.hasMoreRows()()
{
  return result;
}

uint64_t sub_10011EFDC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess(*a1 + 16, v6, 0LL, 0LL);
  uint64_t v4 = *(void *)(v3 + 24);
  *a2 = *(void *)(v3 + 16);
  a2[1] = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_10011F024(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  swift_beginAccess(*a2 + 16, v7, 1LL, 0LL);
  uint64_t v5 = *(void *)(v4 + 24);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)(v4 + swift_weakLoadStrong(v0 + 24) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_10011F080(sqlite3 *a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5, uint64_t a6)
{
  return sub_10011F094(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10011F094(sqlite3 *a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5, uint64_t a6)
{
  if (!a1 || !a2 || !a5 || !a4 || !a6) {
    return 1LL;
  }
  sub_10000C4AC();
  uint64_t v10 = SQLiteBaseVTab.connect(db:argc:argv:outVTab:outError:)(a1, a3, a4, a5);
  sub_10001683C();
  return v10;
}

uint64_t sub_10011F110(uint64_t a1, uint64_t a2)
{
  if (!a1 || !a2) {
    return 1LL;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 128LL);
  swift_retain(v3);
  uint64_t v5 = v4(a2);
  swift_release(v3);
  return v5;
}

uint64_t sub_10011F174(void *a1)
{
  if (!a1) {
    return 1LL;
  }
  uint64_t v2 = (uint64_t *)a1[3];
  uint64_t v3 = *v2;
  v2 += 4;
  uint64_t v4 = *(void (**)(uint64_t))(v3 + 136);
  uint64_t v5 = swift_retain();
  v4(v5);
  swift_beginAccess(v2, v8, 0LL, 0LL);
  if (swift_weakLoadStrong(v2))
  {
    SQLiteBaseVTab.disconnect(_:)(a1);
    swift_release();
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v6 = 1LL;
  }

  swift_release();
  return v6;
}

uint64_t sub_10011F21C(uint64_t a1, char **a2)
{
  uint64_t v2 = 1LL;
  if (a1 && a2)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    swift_retain();
    swift_beginAccess(v4 + 32, v6, 0LL, 0LL);
    if (swift_weakLoadStrong(v4 + 32))
    {
      uint64_t v2 = SQLiteBaseVTab.open(_:for:)(a2, v4);
      swift_release();
      swift_release();
    }

    else
    {
      swift_release();
      return 1LL;
    }
  }

  return v2;
}

uint64_t sub_10011F2C0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    if (!*(void *)result)
    {
      __break(1u);
      return result;
    }

    uint64_t v2 = *(void *)(*(void *)result + 24LL);
    swift_retain();
    swift_beginAccess(v2 + 32, v3, 0LL, 0LL);
    if (swift_weakLoadStrong(v2 + 32))
    {
      SQLiteBaseVTab.close(_:for:)(v1);
      swift_release();
      swift_release();
      return 0LL;
    }

    swift_release();
  }

  return 1LL;
}

uint64_t sub_10011F360(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  if (!a1) {
    return 1LL;
  }
  uint64_t v9 = Array<A>.init(_:argc:)(a5, a4);
  uint64_t result = (uint64_t)objc_autoreleasePoolPush();
  if (*(void *)a1)
  {
    unint64_t v11 = (void *)result;
    uint64_t v12 = *(void *)(*(void *)a1 + 24LL);
    swift_retain();
    swift_beginAccess(v12 + 32, &v15, 0LL, 0LL);
    if (swift_weakLoadStrong(v12 + 32))
    {
      SQLiteBaseVTab.filter(_:for:idxNum:idxStr:arguments:)(a1, v13, a2, a3, v9);
      uint64_t v8 = v14;
      swift_release();
      swift_release();
    }

    else
    {
      swift_release();
      uint64_t v8 = 1LL;
    }

    objc_autoreleasePoolPop(v11);
    swift_bridgeObjectRelease();
    return v8;
  }

  __break(1u);
  return result;
}

uint64_t sub_10011F468(uint64_t a1)
{
  if (!a1) {
    return 1LL;
  }
  uint64_t result = (uint64_t)objc_autoreleasePoolPush();
  if (*(void *)a1)
  {
    uint64_t v3 = (void *)result;
    uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
    swift_retain();
    swift_beginAccess(v4 + 32, v6, 0LL, 0LL);
    if (swift_weakLoadStrong(v4 + 32))
    {
      uint64_t v5 = SQLiteBaseVTab.next(_:for:)(a1);
      swift_release();
      swift_release();
    }

    else
    {
      swift_release();
      uint64_t v5 = 1LL;
    }

    objc_autoreleasePoolPop(v3);
    return v5;
  }

  __break(1u);
  return result;
}

uint64_t sub_10011F524(uint64_t a1)
{
  if (!a1) {
    return 1LL;
  }
  uint64_t result = (uint64_t)objc_autoreleasePoolPush();
  if (*(void *)a1)
  {
    uint64_t v3 = (void *)result;
    uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
    swift_retain();
    swift_beginAccess(v4 + 32, v7, 0LL, 0LL);
    if (swift_weakLoadStrong(v4 + 32))
    {
      SQLiteBaseVTab.eof(_:for:)(a1);
      uint64_t v6 = v5;
      swift_release();
      swift_release();
    }

    else
    {
      swift_release();
      uint64_t v6 = 1LL;
    }

    objc_autoreleasePoolPop(v3);
    return v6;
  }

  __break(1u);
  return result;
}

uint64_t sub_10011F5E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || !a2) {
    return 1LL;
  }
  uint64_t result = (uint64_t)objc_autoreleasePoolPush();
  if (*(void *)a1)
  {
    uint64_t v7 = (void *)result;
    uint64_t v8 = *(void *)(*(void *)a1 + 24LL);
    swift_retain();
    swift_beginAccess(v8 + 32, v11, 0LL, 0LL);
    if (swift_weakLoadStrong(v8 + 32))
    {
      SQLiteBaseVTab.column(_:for:context:columnIndex:)(a1, v8, a2, a3);
      uint64_t v10 = v9;
      swift_release();
      swift_release();
    }

    else
    {
      swift_release();
      uint64_t v10 = 1LL;
    }

    objc_autoreleasePoolPop(v7);
    return v10;
  }

  __break(1u);
  return result;
}

uint64_t sub_10011F6BC(uint64_t a1, uint64_t *a2)
{
  if (!a1 || !a2) {
    return 1LL;
  }
  uint64_t result = (uint64_t)objc_autoreleasePoolPush();
  if (*(void *)a1)
  {
    uint64_t v5 = (void *)result;
    uint64_t v6 = *(void *)(*(void *)a1 + 24LL);
    swift_retain();
    swift_beginAccess(v6 + 32, v10, 0LL, 0LL);
    if (swift_weakLoadStrong(v6 + 32))
    {
      SQLiteBaseVTab.rowid(_:for:outRowid:)(a1, v7, a2);
      uint64_t v9 = v8;
      swift_release();
      swift_release();
    }

    else
    {
      swift_release();
      uint64_t v9 = 1LL;
    }

    objc_autoreleasePoolPop(v5);
    return v9;
  }

  __break(1u);
  return result;
}

uint64_t SQLiteBaseVTab.__allocating_init(style:)(char a1)
{
  uint64_t v3 = swift_allocObject(v1, 41LL, 7LL);
  SQLiteBaseVTab.init(style:)(a1);
  return v3;
}

uint64_t sub_10011F7C8(uint64_t result)
{
  if (result) {
    return swift_release(result);
  }
  return result;
}

uint64_t SQLiteBaseVTab.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 41LL, 7LL);
}

void *sub_10011F7F8(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (&__dst[32 * a2] <= __src || &__src[32 * a2] <= __dst) {
      return memcpy(__dst, __src, 32 * a2);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

void *sub_10011F8C0(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (&__dst[16 * a2] <= __src || &__src[16 * a2] <= __dst) {
      return memcpy(__dst, __src, 16 * a2);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t SQLiteBaseVTab.Connection.tableName.getter()
{
  return v0;
}

uint64_t sub_10011F9B0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + 32LL;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  *a2 = result;
  return result;
}

uint64_t sub_10011F9FC(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2 + 32LL;
  swift_beginAccess(v3, v5, 1LL, 0LL);
  return swift_weakAssign(v3, v2);
}

uint64_t SQLiteBaseVTab.Connection.__allocating_init(_:argc:argv:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v7 = swift_allocObject(v3, 40LL, 7LL);
  SQLiteBaseVTab.Connection.init(_:argc:argv:)(a1, a2, a3);
  return v7;
}

uint64_t SQLiteBaseVTab.Connection.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t sub_10011FAE0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + 24LL;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  *a2 = result;
  return result;
}

uint64_t sub_10011FB2C(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2 + 24LL;
  swift_beginAccess(v3, v5, 1LL, 0LL);
  return swift_weakAssign(v3, v2);
}

uint64_t SQLiteBaseVTab.Cursor.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, 32LL, 7LL);
  SQLiteBaseVTab.Cursor.init(_:)(a1);
  return v3;
}

uint64_t sub_10011FBC4()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232LL))();
}

uint64_t type metadata accessor for SQLiteBaseVTab.Connection()
{
  return objc_opt_self(&OBJC_CLASS____TtCC7SQLiter14SQLiteBaseVTab10Connection);
}

unint64_t sub_10011FC04()
{
  unint64_t result = qword_1001DB0A8;
  if (!qword_1001DB0A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SQLiteBaseVTab.Style,  &type metadata for SQLiteBaseVTab.Style);
    atomic_store(result, (unint64_t *)&qword_1001DB0A8);
  }

  return result;
}

uint64_t type metadata accessor for SQLiteBaseVTab()
{
  return objc_opt_self(&OBJC_CLASS____TtC7SQLiter14SQLiteBaseVTab);
}

uint64_t storeEnumTagSinglePayload for SQLiteBaseVTab.Style(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10011FCC4 + 4 * byte_10016692D[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10011FCF8 + 4 * byte_100166928[v4]))();
}

uint64_t sub_10011FCF8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011FD00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10011FD08LL);
  }
  return result;
}

uint64_t sub_10011FD14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10011FD1CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10011FD20(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10011FD28(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SQLiteBaseVTab.Style()
{
  return &type metadata for SQLiteBaseVTab.Style;
}

uint64_t type metadata accessor for SQLiteBaseVTab.Cursor()
{
  return objc_opt_self(&OBJC_CLASS____TtCC7SQLiter14SQLiteBaseVTab6Cursor);
}

uint64_t sub_10011FD68(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 1LL, 0LL);
}

uint64_t sub_10011FD74()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 24));
}

uint64_t sub_10011FD80()
{
  return swift_weakInit(v0, 0LL);
}

uint64_t SQLiteColumnDescribing<>.init(index:)@<X0>( int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = v10;
  if (Array.count.getter(v10, a2) <= a1)
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    Array.subscript.getter(a1, v7, a2);
    uint64_t v8 = 0LL;
  }

  swift_bridgeObjectRelease();
  return sub_100009654(a4, v8, 1LL, a2);
}

uint64_t SQLiteColumnDescribing.nullable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(v2 + 32))() & 1;
}

void SQLiteColumnDescribing.isValid(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  uint64_t v5 = (char *)sub_10011FEC8 + 4 * byte_100166A20[sub_1001204AC(v3, v4)];
  __asm { BR              X10 }

uint64_t sub_10011FEC8()
{
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  sub_100019AFC(v0, v2);
  char v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 40))(v2, v3);
  if (!v1) {
    __asm { BR              X11 }
  }

  return 0LL;
}

uint64_t sub_10011FFB4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((SQLiteColumnDescribing.nullable.getter(a10, v11) & 1) == 0) {
    JUMPOUT(0x10011FF8CLL);
  }
  uint64_t v12 = v10[3];
  uint64_t v13 = sub_100019AFC(v10, v12);
  uint64_t DynamicType = swift_getDynamicType(v13, v12, 1LL);
  unsigned __int8 v15 = sub_1001204AC(DynamicType, v10[4]);
  return ((uint64_t (*)(void))((char *)&loc_10011FF8C + 4 * byte_100166A30[v15]))();
}

void sub_100120060()
{
}

void sub_100120068()
{
}

BOOL static SQLiteColumnDescribing.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = __chkstk_darwin(a1);
  uint64_t v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v29 - v12;
  unsigned __int8 v15 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 32);
  v29[0] = v11;
  uint64_t v17 = v15(v16, v14);
  uint64_t v19 = v18;
  v29[1] = a2;
  uint64_t v20 = v15(a3, a4);
  if (v17 == v20 && v19 == v21)
  {
    swift_bridgeObjectRelease_n(v19, 2LL);
    sub_10012047C();
    sub_100120490();
    uint64_t v25 = v7;
  }

  else
  {
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v20, v21, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10012047C();
    sub_100120490();
    BOOL v24 = 0LL;
    uint64_t v25 = v7;
    if ((v23 & 1) == 0) {
      goto LABEL_9;
    }
  }

  uint64_t v26 = sub_1001204A0();
  BOOL v24 = v26 == sub_1001204A0();
LABEL_9:
  uint64_t v27 = *(void (**)(char *, uint64_t))(v25 + 8);
  v27(v10, a3);
  v27(v13, a3);
  return v24;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteColumnDescribing.ensureValidSQLNameCharacters()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for CharacterSet(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v16[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v3, v2);
  v16[1] = v8;
  if (qword_1001DA910 != -1) {
    swift_once(&qword_1001DA910, sub_10010B764);
  }
  uint64_t v9 = sub_1000093D0(v4, (uint64_t)qword_1001EDEF8);
  CharacterSet.inverted.getter(v9, v10);
  unint64_t v11 = sub_1000106CC();
  StringProtocol.rangeOfCharacter(from:options:range:)(v7, 0LL, 0LL, 0LL, 1LL, &type metadata for String, v11);
  char v13 = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v13 & 1) == 0)
  {
    unint64_t v14 = sub_1000E4274();
    sub_100010EA0((uint64_t)&type metadata for SQLiteError, v14);
    v15[1] = 0LL;
    __int128 v15[2] = 0LL;
    *unsigned __int8 v15 = 10LL;
    sub_100110034((uint64_t)v15, 4);
  }

  swift_bridgeObjectRelease();
}

uint64_t SQLiteColumnDescribing<>.columnName.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return v5;
}

uint64_t SQLiteColumnDescribing<>.getColumnIndex()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = v18;
  uint64_t v8 = type metadata accessor for Array(0LL, a1);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
  Collection<>.firstIndex(of:)(&v15, v4, v8, WitnessTable, *(void *)(a2 + 16));
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
  {
    dispatch thunk of RawRepresentable.rawValue.getter(&v15, a1, a4);
    uint64_t v10 = v15;
    uint64_t v11 = v16;
    unint64_t v12 = sub_1000E4274();
    sub_100010EA0((uint64_t)&type metadata for SQLiteError, v12);
    *char v13 = v10;
    v13[1] = v11;
    v13[2] = 0LL;
    return sub_100110034((uint64_t)v13, 1);
  }

  uint64_t result = v15;
  if (v15 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (v15 > 0x7FFFFFFF) {
LABEL_7:
  }
    __break(1u);
  return result;
}

uint64_t sub_10012047C()
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16))(v1, *(void *)(v3 - 96), v0);
}

uint64_t sub_100120490()
{
  return v1(v2, *(void *)(v3 - 88), v0);
}

uint64_t sub_1001204A0()
{
  return v2(v0, v1);
}

uint64_t sub_1001204AC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

void Bool.bind(to:at:)(uint64_t a1, uint64_t a2, char a3)
{
  if (!v4)
  {
    sub_1001100B4();
    if (v7 != v8)
    {
      __break(1u);
LABEL_9:
      __break(1u);
      return;
    }

    sub_1001100A8();
    if (!(v7 ^ v8 | v10)) {
      goto LABEL_9;
    }
    if (sqlite3_bind_int(v9, v5, a3 & 1))
    {
      unint64_t v11 = sub_10012120C();
      sub_100010EA0((uint64_t)&type metadata for SQLiteError, v11);
      *unint64_t v12 = v3;
      v12[1] = 0xD000000000000012LL;
      sub_1001163A8((uint64_t)v12, (uint64_t)"Failed to bind Int");
    }
  }

void sub_100120544(uint64_t a1, uint64_t a2)
{
}

void Float.bind(to:at:)(float a1)
{
  if (v1) {
    goto LABEL_7;
  }
  sub_1001100B4();
  if (v4 == v5)
  {
    sub_1001100A8();
    if (!(v4 ^ v5 | v7)) {
      goto LABEL_9;
    }
    if (sqlite3_bind_double(v6, v2, a1))
    {
      unint64_t v8 = sub_10012120C();
      uint64_t v9 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v8);
      sub_1001211AC(v9, v10);
      sub_1001163A8(v11, (uint64_t)"Failed to bind Double");
    }

void sub_1001205D8()
{
}

void Double.bind(to:at:)(double a1)
{
  if (v1) {
    goto LABEL_7;
  }
  sub_1001100B4();
  if (v4 == v5)
  {
    sub_1001100A8();
    if (!(v4 ^ v5 | v7)) {
      goto LABEL_9;
    }
    if (sqlite3_bind_double(v6, v2, a1))
    {
      unint64_t v8 = sub_10012120C();
      uint64_t v9 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v8);
      sub_1001211AC(v9, v10);
      sub_1001163A8(v11, (uint64_t)"Failed to bind Double");
    }

void sub_10012066C()
{
}

void String.bind(to:at:)()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  int v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for String.Encoding(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *v9;
  sub_10011B510();
  if (v0) {
    goto LABEL_11;
  }
  sub_1001100B4();
  if (v15 != v16)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  sub_1001100A8();
  if (!(v15 ^ v16 | v18)) {
    goto LABEL_13;
  }
  uint64_t v1 = v17;
  v26[0] = v5;
  v26[1] = v3;
  static String.Encoding.utf8.getter(v17);
  unint64_t v19 = sub_1000106CC();
  uint64_t v14 = StringProtocol.cString(using:)(v13, &type metadata for String, v19);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (qword_1001DA908 != -1) {
LABEL_14:
  }
    swift_once(&qword_1001DA908, sub_10010B754);
  if (v14) {
    uint64_t v20 = (const char *)(v14 + 32);
  }
  else {
    uint64_t v20 = 0LL;
  }
  int v21 = sqlite3_bind_text(v1, v7, v20, -1, (void (__cdecl *)(void *))qword_1001EDEF0);
  swift_bridgeObjectRelease();
  if (v21)
  {
    unint64_t v22 = sub_1000E4274();
    uint64_t v23 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v22);
    sub_1001211AC(v23, v24);
    sub_1001163A8(v25, (uint64_t)"Failed to bind String");
  }

void sub_1001207E8()
{
}

void Data.bind(to:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v21 = *(_OWORD *)(a1 + 8);
  uint64_t v5 = sub_10005E31C();
  sub_10011C9A4(v5, v6, v7, v8, v9, v10, v11, v12, v21);
  uint64_t v13 = sub_10005E31C();
  sub_10011C9A4(v13, v14, v15, v16, v17, v18, v19, v20, v21);
  __asm { BR              X10 }

uint64_t sub_10012086C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = sub_10005E31C();
  sub_10011C9A4(v10, v11, v12, v13, v14, v15, v16, v17, v44);
  sub_10005E31C();
  sub_100121194();
  sub_1001211C0(v9, v8 & 0xFFFFFFFFFFFFLL, BYTE6(v8));
  sub_1001211A0();
  uint64_t v18 = sub_10001443C();
  sub_100121214(v18, v19, v20, v21, v22, v23, v24, v25, v45);
  sub_1001211A0();
  uint64_t v26 = sub_10001443C();
  sub_100121214(v26, v27, v28, v29, v30, v31, v32, v33, v46);
  sub_1001211A0();
  uint64_t v34 = sub_10001443C();
  sub_100121214(v34, v35, v36, v37, v38, v39, v40, v41, v47);
  return sub_1001211A0();
}

uint64_t sub_1001209F0(const void *a1, uint64_t a2, sqlite3_stmt **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *a3;
  uint64_t result = sub_10011B510();
  if (!v6)
  {
    if (a4 < (uint64_t)0xFFFFFFFF80000000LL)
    {
      __break(1u);
    }

    else if (a4 <= 0x7FFFFFFF)
    {
      uint64_t v11 = (sqlite3_stmt *)result;
      uint64_t v13 = Data.count.getter(a5, a6);
      if (v13 >= (uint64_t)0xFFFFFFFF80000000LL)
      {
        LODWORD(a6) = v13;
        if (v13 <= 0x7FFFFFFF)
        {
          if (qword_1001DA908 == -1) {
            goto LABEL_7;
          }
          goto LABEL_14;
        }

void sub_100120B28(uint64_t a1, uint64_t a2)
{
}

void Array<A>.bind(to:at:)()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v20 = v7;
  uint64_t v19 = v8;
  uint64_t v9 = *(void *)(v3 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = Array.count.getter(v12, v13);
  if ((v14 & 0x8000000000000000LL) == 0)
  {
    uint64_t v15 = v14;
    if (!v14)
    {
LABEL_8:
      sub_10002716C();
      return;
    }

    uint64_t v16 = 0LL;
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 8);
    while (v15 != v16)
    {
      Array.subscript.getter(v16, v6, v4);
      if (__OFADD__(v16, v20)) {
        goto LABEL_10;
      }
      v17(v19, v16 + v20, v4, v2);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v4);
      if (!v0 && v15 != ++v16) {
        continue;
      }
      goto LABEL_8;
    }

    __break(1u);
LABEL_10:
    __break(1u);
  }

  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  sub_10005A080();
  uint64_t v11 = v3;
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4)
  {
    uint64_t v5 = v1;
    uint64_t v6 = 0LL;
    uint64_t v7 = (void *)(v2 + 32);
    while (v4 != v6)
    {
      uint64_t v8 = v7[3];
      uint64_t v9 = v7[4];
      sub_100019AFC(v7, v8);
      if (__OFADD__(v6, v11)) {
        goto LABEL_10;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8))(v5, v6 + v11, v8, v9);
      if (!v0)
      {
        v7 += 5;
        if (v4 - 1 != v6++) {
          continue;
        }
      }

      goto LABEL_8;
    }

    __break(1u);
LABEL_10:
    __break(1u);
  }

  else
  {
LABEL_8:
    sub_10002716C();
  }

void sub_100120C38()
{
}

void Optional<A>.bind(to:at:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v21;
  a20 = v22;
  a10 = v20;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v31 = *(void *)(v25 - 8);
  uint64_t v32 = __chkstk_darwin(v29);
  uint64_t v34 = (char *)&a9 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = *(void *)(v35 + 16);
  uint64_t v37 = *(void *)(v36 - 8);
  __chkstk_darwin(v32);
  uint64_t v39 = (char *)&a9 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v31 + 16))(v34, v40);
  if (sub_100010708((uint64_t)v34, 1LL, v36) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v39, v34, v36);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 8))(v30, v28, v36, v24);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v36);
    goto LABEL_8;
  }

  (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v26);
  uint64_t v41 = a10;
  sub_10011B510();
  if (v41)
  {
LABEL_8:
    sub_10002716C();
    return;
  }

  sub_1001100B4();
  if (v42 == v43)
  {
    sub_1001100A8();
    if (!(v42 ^ v43 | v45)) {
      goto LABEL_10;
    }
    sqlite3_bind_null(v44, v28);
    goto LABEL_8;
  }

  __break(1u);
LABEL_10:
  __break(1u);
}

#error "100120E5C: call analysis failed (funcsize=6)"
void RawRepresentable<>.bind(to:at:)( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t AssociatedTypeWitness;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  sub_10005A080();
  a19 = v21;
  a20 = v22;
  a10 = v20;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v25,  v27,  &protocol requirements base descriptor for RawRepresentable,  &associated type descriptor for RawRepresentable.RawValue);
  uint64_t v34 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v36 = (char *)&a9 - v35;
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&a9 - v35), v28, v26);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 8))(v32, v30, AssociatedTypeWitness, v24);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v36, AssociatedTypeWitness);
  sub_10002716C();
}

uint64_t sub_100120F30( uint64_t a1, uint64_t a2, uint64_t a3, sqlite3_stmt **a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v14 = (char *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_16:
      __break(1u);
      return result;
    }

    v14 += a1 - result;
  }

  BOOL v15 = __OFSUB__(a2, a1);
  uint64_t v16 = a2 - a1;
  if (v15)
  {
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v17 = __DataStorage._length.getter();
  if (v17 >= v16) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = v17;
  }
  uint64_t v19 = &v14[v18];
  if (v14) {
    uint64_t v20 = (uint64_t)v19;
  }
  else {
    uint64_t v20 = 0LL;
  }
  sub_1001209F0(v14, v20, a4, a5, a6, a7);
  uint64_t v21 = (__int128 *)(a4 + 1);
  swift_release();
  if (v25)
  {
    __int128 v24 = *v21;
    uint64_t v22 = &v24;
  }

  else
  {
    __int128 v23 = *v21;
    uint64_t v22 = &v23;
  }

  sub_100025EAC((uint64_t)v22);
  return sub_100010A30(a6, a7);
}

uint64_t sub_100121034( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  __int128 v19 = *(_OWORD *)(a4 + 8);
  uint64_t v13 = a1;
  __int16 v14 = a2;
  char v15 = BYTE2(a2);
  char v16 = BYTE3(a2);
  char v17 = BYTE4(a2);
  char v18 = BYTE5(a2);
  uint64_t v11 = (char *)&v13 + a3;
  swift_retain();
  sub_10011C5F4((uint64_t)&v19);
  sub_1001209F0(&v13, (uint64_t)v11, (sqlite3_stmt **)a4, a5, a6, a7);
  swift_release();
  sub_100025EAC((uint64_t)&v19);
  swift_release();
  sub_100025EAC((uint64_t)&v19);
  return sub_100010A30(a6, a7);
}

uint64_t sub_100121194()
{
  return sub_100014244(v1, v0);
}

uint64_t sub_1001211A0()
{
  return sub_100010A30(v1, v0);
}

void sub_1001211AC(uint64_t a1, void *a2)
{
  *a2 = v2;
  a2[1] = 0xD000000000000015LL;
}

uint64_t sub_1001211C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100121034(a1, a2, a3, v6, v5, v4, v3);
}

uint64_t sub_1001211D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100120F30(a1, a2, a3, v6, v5, v4, v3);
}

uint64_t sub_1001211F0()
{
  return sub_10011B510();
}

  ;
}

unint64_t sub_10012120C()
{
  return sub_1000E4274();
}

uint64_t sub_100121214( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100025EAC((uint64_t)&a9);
}

void sub_10012121C(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x8000000000000000LL) == 0)
  {
    AvroValue.schema.getter(a1);
    sub_1001280F8(a2);
LABEL_3:
    swift_release();
LABEL_4:
    sub_10002FBC0();
    return;
  }

  uint64_t v3 = *(void *)(a2 + 16);
  AvroValue.schema.getter(a1);
  sub_1001280F8(a2);
  char v5 = v4;
  swift_release();
  if ((v5 & 1) != 0) {
    goto LABEL_4;
  }
  uint64_t v6 = sub_100010E2C();
  AvroValue.schema.getter(v6);
  uint64_t v7 = *(void *)(v3 + 16);
  if (!v7)
  {
    sub_1000110A8();
    goto LABEL_3;
  }

  uint64_t v8 = *(void *)(v3 + 32);
  sub_10005E31C();
  sub_100010E2C();
  sub_1001280F8(v8);
  sub_100127FF4();
  if ((v8 & 1) != 0 || v7 == 1)
  {
LABEL_8:
    sub_100019F4C(v3);
    goto LABEL_3;
  }

  uint64_t v9 = 5LL;
  while (1)
  {
    uint64_t v10 = v9 - 3;
    if (__OFADD__(v9 - 4, 1LL)) {
      break;
    }
    uint64_t v11 = *(void *)(v3 + 8 * v9);
    sub_10005E31C();
    sub_1001280F8(v11);
    sub_100127FF4();
    if ((v11 & 1) == 0)
    {
      ++v9;
      if (v10 != v7) {
        continue;
      }
    }

    goto LABEL_8;
  }

  __break(1u);
}

void sub_100121338(uint64_t a1)
{
  __asm { BR              X9 }

uint64_t sub_100121378(uint64_t a1)
{
  return ((uint64_t (*)(uint64_t, __n128, __n128))((char *)&loc_100121390
                                                          + dword_100121584[*(unsigned __int8 *)(a1 + 16)]))( 7LL,  (__n128)0,  (__n128)0);
}

uint64_t sub_1001213A8( __int128 a1, __int128 a2, __int128 a3, __n128 a4, __n128 a5, uint64_t a6, SwiftAvro::AvroRecord *a7, char a8, SwiftAvro::AvroRecordSchema *schema, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t result = 0LL;
  v22->n128_u64[0] = 1LL;
  v22->n128_u64[1] = 0LL;
  v22[1].n128_u64[0] = 0LL;
  v22[1].n128_u64[1] = 0LL;
  v22[2] = a4;
  uint64_t v22[3] = a5;
  v22[4].n128_u8[0] = v23;
  return result;
}

void sub_100121510()
{
}

void sub_10012151C()
{
}

void sub_100121528()
{
}

void sub_100121534()
{
}

void sub_100121540()
{
}

void sub_100121554()
{
}

uint64_t sub_1001215A4()
{
  uint64_t result = sub_100009ACC((uint64_t)&unk_1001BD1A8, 17LL);
  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
  static AvroSchema.null = result;
  return result;
}

void *AvroPrimitiveSchema.null.unsafeMutableAddressor()
{
  return &static AvroPrimitiveSchema.null;
}

uint64_t *AvroSchema.null.unsafeMutableAddressor()
{
  if (qword_1001DB438 != -1) {
    swift_once(&qword_1001DB438, sub_1001215A4);
  }
  return &static AvroSchema.null;
}

void static AvroSchema.null.getter()
{
}

uint64_t sub_100121638()
{
  uint64_t result = swift_allocObject(&unk_1001BD1A8, 17LL, 7LL);
  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
  static AvroSchema.BOOLean = result;
  return result;
}

void *AvroPrimitiveSchema.BOOLean.unsafeMutableAddressor()
{
  return &static AvroPrimitiveSchema.BOOLean;
}

uint64_t *AvroSchema.BOOLean.unsafeMutableAddressor()
{
  if (qword_1001DB440 != -1) {
    swift_once(&qword_1001DB440, sub_100121638);
  }
  return &static AvroSchema.BOOLean;
}

void static AvroSchema.BOOLean.getter()
{
}

uint64_t sub_1001216D4()
{
  uint64_t result = swift_allocObject(&unk_1001BD1A8, 17LL, 7LL);
  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 2;
  static AvroSchema.int = result;
  return result;
}

void *AvroPrimitiveSchema.int.unsafeMutableAddressor()
{
  return &static AvroPrimitiveSchema.int;
}

uint64_t *AvroSchema.int.unsafeMutableAddressor()
{
  if (qword_1001DB448 != -1) {
    swift_once(&qword_1001DB448, sub_1001216D4);
  }
  return &static AvroSchema.int;
}

void static AvroSchema.int.getter()
{
}

uint64_t sub_100121770()
{
  uint64_t result = swift_allocObject(&unk_1001BD1A8, 17LL, 7LL);
  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 3;
  static AvroSchema.long = result;
  return result;
}

void *AvroPrimitiveSchema.long.unsafeMutableAddressor()
{
  return &static AvroPrimitiveSchema.long;
}

uint64_t *AvroSchema.long.unsafeMutableAddressor()
{
  if (qword_1001DB450 != -1) {
    swift_once(&qword_1001DB450, sub_100121770);
  }
  return &static AvroSchema.long;
}

void static AvroSchema.long.getter()
{
}

uint64_t sub_10012180C()
{
  uint64_t result = swift_allocObject(&unk_1001BD1A8, 17LL, 7LL);
  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 4;
  static AvroSchema.float = result;
  return result;
}

void *AvroPrimitiveSchema.float.unsafeMutableAddressor()
{
  return &static AvroPrimitiveSchema.float;
}

uint64_t *AvroSchema.float.unsafeMutableAddressor()
{
  if (qword_1001DB458 != -1) {
    swift_once(&qword_1001DB458, sub_10012180C);
  }
  return &static AvroSchema.float;
}

void static AvroSchema.float.getter()
{
}

uint64_t sub_1001218A8()
{
  uint64_t result = swift_allocObject(&unk_1001BD1A8, 17LL, 7LL);
  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 5;
  static AvroSchema.double = result;
  return result;
}

void *AvroPrimitiveSchema.double.unsafeMutableAddressor()
{
  return &static AvroPrimitiveSchema.double;
}

uint64_t *AvroSchema.double.unsafeMutableAddressor()
{
  if (qword_1001DB460 != -1) {
    swift_once(&qword_1001DB460, sub_1001218A8);
  }
  return &static AvroSchema.double;
}

void static AvroSchema.double.getter()
{
}

uint64_t sub_100121944()
{
  uint64_t result = swift_allocObject(&unk_1001BD1A8, 17LL, 7LL);
  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 6;
  static AvroSchema.string = result;
  return result;
}

void *AvroPrimitiveSchema.string.unsafeMutableAddressor()
{
  return &static AvroPrimitiveSchema.string;
}

uint64_t *AvroSchema.string.unsafeMutableAddressor()
{
  if (qword_1001DB468 != -1) {
    swift_once(&qword_1001DB468, sub_100121944);
  }
  return &static AvroSchema.string;
}

void static AvroSchema.string.getter()
{
}

uint64_t sub_1001219E0()
{
  uint64_t result = swift_allocObject(&unk_1001BD1A8, 17LL, 7LL);
  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 7;
  static AvroSchema.bytes = result;
  return result;
}

void *AvroPrimitiveSchema.bytes.unsafeMutableAddressor()
{
  return &static AvroPrimitiveSchema.bytes;
}

uint64_t *AvroSchema.bytes.unsafeMutableAddressor()
{
  if (qword_1001DB470 != -1) {
    swift_once(&qword_1001DB470, sub_1001219E0);
  }
  return &static AvroSchema.bytes;
}

void static AvroSchema.bytes.getter()
{
}

void sub_100121A84(void *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  sub_100127FEC();
  sub_100009A90();
}

void static AvroSchema.array(itemSchema:)(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100009ACC((uint64_t)&unk_1001BD108, 40LL);
  v2[2] = 0x7961727261LL;
  v2[3] = 0xE500000000000000LL;
  void v2[4] = a1;
  sub_100127FEC();
  sub_100009A90();
}

uint64_t AvroArraySchema.init(items:)()
{
  return 0x7961727261LL;
}

void static AvroSchema.array(schema:)()
{
  uint64_t v3 = (void *)sub_100009ACC((uint64_t)&unk_1001BD108, 40LL);
  _OWORD v3[2] = v2;
  void v3[3] = v1;
  v3[4] = v0;
  sub_100127FEC();
  sub_100047294();
  sub_1000110D4();
}

void static AvroSchema.map(valueSchema:)(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100009ACC((uint64_t)&unk_1001BD130, 40LL);
  v2[2] = 7364973LL;
  v2[3] = 0xE300000000000000LL;
  void v2[4] = a1;
  sub_100127FEC();
  sub_100009A90();
}

uint64_t AvroMapSchema.init(values:)()
{
  return 7364973LL;
}

void static AvroSchema.map(schema:)()
{
  uint64_t v3 = (void *)sub_100009ACC((uint64_t)&unk_1001BD130, 40LL);
  _OWORD v3[2] = v2;
  void v3[3] = v1;
  v3[4] = v0;
  sub_100127FEC();
  sub_100047294();
  sub_1000110D4();
}

void static AvroSchema.record(name:fields:)()
{
  uint64_t v3 = sub_100009ACC((uint64_t)&unk_1001BD158, 72LL);
  char v4 = (void *)sub_100128058(v3);
  void v4[4] = v2;
  v4[5] = v1;
  void v4[6] = 0LL;
  v4[7] = 0LL;
  v4[8] = v0;
  sub_100047294();
  sub_10005A624();
  sub_1000110D4();
}

void __swiftcall AvroRecordSchema.init(name:fields:)( SwiftAvro::AvroRecordSchema *__return_ptr retstr, Swift::String name, Swift::OpaquePointer fields)
{
  retstr->type._uint64_t countAndFlagsBits = 0x64726F636572LL;
  retstr->type._object = (void *)0xE600000000000000LL;
  retstr->name = name;
  retstr->namespace.value._uint64_t countAndFlagsBits = 0LL;
  retstr->namespace.value._object = 0LL;
  retstr->fields = fields;
}

uint64_t static AvroSchema.record(name:namespace:fields:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_100009ACC((uint64_t)&unk_1001BD158, 72LL);
  uint64_t v11 = sub_100128058(v10);
  *(void *)(v11 + 3sub_1000108B8(v0 + 2) = a1;
  *(void *)(v11 + 4sub_1000E3528(v0, v2, 0) = a2;
  *(void *)(v11 + 48) = a3;
  *(void *)(v11 + 56) = a4;
  uint64_t v12 = v11 | 0x6000000000000000LL;
  *(void *)(v11 + 64) = a5;
  sub_1000145E8();
  sub_100047294();
  sub_10005A624();
  return v12;
}

void __swiftcall AvroRecordSchema.init(name:namespace:fields:)( SwiftAvro::AvroRecordSchema *__return_ptr retstr, Swift::String name, Swift::String a3, Swift::OpaquePointer fields)
{
  retstr->type._uint64_t countAndFlagsBits = 0x64726F636572LL;
  retstr->type._object = (void *)0xE600000000000000LL;
  retstr->name = name;
  retstr->namespace.Swift::Bool value = a3;
  retstr->fields = fields;
}

void static AvroSchema.record(schema:)(uint64_t a1)
{
  uint64_t v2 = sub_100009ACC((uint64_t)&unk_1001BD158, 72LL);
  __int128 v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 3sub_1000108B8(v0 + 2) = v3;
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 32);
  *(void *)(v2 + 64) = *(void *)(a1 + 48);
  sub_10005B5EC((void *)a1);
  sub_100009A90();
}

void static AvroSchema.union(of:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 0LL;
    while (*(void *)(a1 + 8 * v2 + 32) >> 61 != 4LL)
    {
      if (v1 == ++v2)
      {
        *(void *)(sub_100009ACC((uint64_t)&unk_1001BD180, 24LL) + swift_weakDestroy(v0 + 16) = a1;
        sub_10005A624();
        sub_100009A90();
        return;
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

SwiftAvro::AvroUnionSchema __swiftcall AvroUnionSchema.init(of:)(SwiftAvro::AvroUnionSchema of)
{
  uint64_t v1 = *((void *)of.schemas._rawValue + 2);
  if (v1)
  {
    uint64_t v2 = 0LL;
    while (*((void *)of.schemas._rawValue + v2 + 4) >> 61 != 4LL)
    {
      if (v1 == ++v2) {
        return of;
      }
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return of;
}

void static AvroSchema.union(schema:)(uint64_t a1)
{
  *(void *)(sub_100009ACC((uint64_t)&unk_1001BD180, 24LL) + swift_weakDestroy(v0 + 16) = a1;
  sub_10005A624();
  sub_100009A90();
}

uint64_t AvroSchema.init(for:)()
{
  uint64_t result = sub_100009ACC((uint64_t)&unk_1001BD1A8, 17LL);
  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
  return result;
}

{
  uint64_t result;
  uint64_t result = sub_100009ACC((uint64_t)&unk_1001BD1A8, 17LL);
  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 2;
  return result;
}

{
  uint64_t result;
  uint64_t result = sub_100009ACC((uint64_t)&unk_1001BD1A8, 17LL);
  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 3;
  return result;
}

{
  uint64_t result;
  uint64_t result = sub_100009ACC((uint64_t)&unk_1001BD1A8, 17LL);
  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 4;
  return result;
}

{
  uint64_t result;
  uint64_t result = sub_100009ACC((uint64_t)&unk_1001BD1A8, 17LL);
  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 5;
  return result;
}

{
  uint64_t result;
  uint64_t result = sub_100009ACC((uint64_t)&unk_1001BD1A8, 17LL);
  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 6;
  return result;
}

void AvroSchema.init(for:)()
{
  *(_BYTE *)(sub_100009ACC((uint64_t)&unk_1001BD1A8, 17LL) + swift_weakDestroy(v0 + 16) = 7;
  sub_100009A90();
}

void sub_100121F54(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_100121F8C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = *(_BYTE *)(a2 + 16);
  sub_100127D10(0LL);
  uint64_t v4 = sub_100124784(v3);
  sub_1001280D8(v2, v4);
  return swift_bridgeObjectRelease();
}

void _s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_1001220AC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    return 0LL;
  }
  unsigned __int8 v2 = *(_BYTE *)(a2 + 16);
  uint64_t v3 = sub_100124784(*(_BYTE *)(a1 + 16));
  uint64_t v5 = v4;
  uint64_t v6 = sub_100124784(v2);
  if (v3 == v6 && v5 == v7)
  {
    sub_100019F4C(v5);
    return 1LL;
  }

  else
  {
    char v9 = sub_10005A06C(v3, v5, v6, v7);
    sub_1000325E4();
    sub_100009B3C();
    return v9 & 1;
  }

uint64_t sub_1001222A4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1001222D0()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100122308()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10012232C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

void sub_10012233C(uint64_t a1)
{
  uint64_t v1 = sub_10003DDD8(a1);
  sub_100128000((uint64_t)v1);
  sub_10007AFDC();
  sub_10003DDCC();
}

void sub_100122364()
{
}

void sub_10012236C(uint64_t a1)
{
}

Swift::Int sub_100122374(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_100121F54((uint64_t)v4, v2);
  return Hasher._finalize()();
}

void sub_1001223B4(uint64_t *a1)
{
}

uint64_t AvroSchema.hash(into:)()
{
  uint64_t v1 = v0 & 0x1FFFFFFFFFFFFFFFLL;
  swift_retain();
  uint64_t v2 = sub_10005A790();
  sub_100121F54(v2, v3);
  return sub_1000167DC(v1);
}

void AvroSchema.hashValue.getter(uint64_t a1)
{
  uint64_t v1 = sub_10000C4AC();
  sub_100128000(v1);
  sub_10001683C();
  sub_10007AFDC();
  sub_10003DDCC();
}

void sub_100122428()
{
}

uint64_t sub_100122430()
{
  return AvroSchema.hash(into:)();
}

Swift::Int sub_100122438(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  swift_retain();
  sub_100121F54((uint64_t)v4, v2);
  swift_release();
  return Hasher._finalize()();
}

uint64_t sub_10012248C(void *a1, void *a2)
{
  return static AvroSchema.__derived_struct_equals(_:_:)(*a1, *a2);
}

void AvroSchema.encode(to:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_1001224D4(uint64_t a1, uint64_t a2)
{
}

void AvroPrimitiveSchema.encode(to:)(void *a1, unsigned __int8 a2)
{
  uint64_t v5 = sub_10000941C(&qword_1001DB488);
  sub_10002FBE4();
  __chkstk_darwin(v6);
  sub_100019AFC(a1, a1[3]);
  unint64_t v7 = sub_100122878();
  sub_100127F80((uint64_t)&unk_1001BD8D0, v8, v7);
  uint64_t v9 = sub_1001249F4(a2);
  KeyedEncodingContainer.encode(_:forKey:)(v9, v10, v11, v5);
  sub_100128014(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_10001460C();
  sub_10002FBAC();
}

void AvroArraySchema.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void AvroMapSchema.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void AvroRecordSchema.encode(to:)(void *a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = sub_10000941C(&qword_1001DB4B8);
  sub_10002FBE4();
  __chkstk_darwin(v7);
  sub_100019AFC(a1, a1[3]);
  unint64_t v8 = sub_100124AC4();
  sub_100127F80((uint64_t)&type metadata for AvroRecordSchema.CodingKeys, v9, v8);
  uint64_t v10 = *v4;
  uint64_t v11 = v4[1];
  char v20 = 0;
  sub_10002FB1C(v10, v11, (uint64_t)&v20);
  if (!v2)
  {
    uint64_t v12 = v4[2];
    uint64_t v13 = v4[3];
    char v19 = 1;
    sub_10002FB1C(v12, v13, (uint64_t)&v19);
    uint64_t v14 = v4[4];
    uint64_t v15 = v4[5];
    char v18 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v18, v6);
    uint64_t v17 = v4[6];
    char v16 = 3;
    sub_10000941C(&qword_1001DB4C8);
    sub_100126A18(&qword_1001DB4D0, &qword_1001DB4C8, (void (*)(void))sub_100124B00);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v6);
  }

  sub_100128014(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_10002FBAC();
}

uint64_t AvroUnionSchema.encode(to:)()
{
  return sub_100128100();
}

unint64_t sub_10012283C()
{
  unint64_t result = qword_1001DB480;
  if (!qword_1001DB480)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AvroSchema, &type metadata for AvroSchema);
    atomic_store(result, (unint64_t *)&qword_1001DB480);
  }

  return result;
}

unint64_t sub_100122878()
{
  unint64_t result = qword_1001DB490;
  if (!qword_1001DB490)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001678D4, &unk_1001BD8D0);
    atomic_store(result, (unint64_t *)&qword_1001DB490);
  }

  return result;
}

void sub_1001228B4(uint64_t a1)
{
}

uint64_t AvroSchema.init(from:)(void *a1)
{
  if (!v2)
  {
    sub_10006B6C8(v6, v6[3]);
    unint64_t v3 = sub_100124B3C();
    sub_1001280E8((uint64_t)&type metadata for AvroPrimitiveSchema, (uint64_t)&type metadata for AvroPrimitiveSchema, v3);
    uint64_t v1 = sub_100009ACC((uint64_t)&unk_1001BD1A8, 17LL);
    *(_BYTE *)(v1 + swift_weakDestroy(v0 + 16) = v5;
    sub_1000108B8(v6);
  }

  sub_1000E3700();
  return v1;
}

uint64_t sub_100122AE0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = AvroSchema.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

void AvroSchema.description.getter(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_100122B38(uint64_t a1)
{
  char v2 = *(_BYTE *)(a1 + 16);
  String.init<A>(describing:)(&v2);
  return sub_10006B688();
}

void sub_100122C18()
{
}

uint64_t variable initialization expression of AvroRecordSchema.type()
{
  return 0x64726F636572LL;
}

void AvroRecordSchema.type.getter()
{
}

void AvroRecordSchema.name.getter()
{
}

void AvroRecordSchema.name.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + swift_weakLoadStrong(v0 + 24) = a2;
  sub_1000110D4();
}

void variable initialization expression of AvroRecordSchema.namespace()
{
}

void AvroRecordSchema.namespace.getter()
{
}

void AvroRecordSchema.namespace.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 3sub_1000108B8(v0 + 2) = a1;
  *(void *)(v2 + 4sub_1000E3528(v0, v2, 0) = a2;
  sub_1000110D4();
}

Swift::Void (__swiftcall *AvroRecordSchema.namespace.modify())()
{
  return _CPStartNetworkSearchFeedback.redactUnused();
}

uint64_t AvroRecordSchema.fields.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 48));
}

void AvroRecordSchema.fields.setter(uint64_t a1)
{
  *(void *)(v1 + 48) = a1;
  sub_100009A90();
}

Swift::Void (__swiftcall *AvroRecordSchema.fields.modify())()
{
  return _CPStartNetworkSearchFeedback.redactUnused();
}

uint64_t sub_100122D3C(uint64_t a1, unint64_t a2)
{
  if (a1 == 1701869940 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1701667182 && a2 == 0xE400000000000000LL)
  {
    unint64_t v8 = 0xE400000000000000LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x63617073656D616ELL && a2 == 0xE900000000000065LL)
  {
    unint64_t v10 = 0xE900000000000065LL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x63617073656D616ELL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2LL;
  }

  if (a1 == 0x73646C656966LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 3LL;
  }

  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73646C656966LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_100122ED4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100122F00 + 4 * byte_100166B34[a1]))( 1701869940LL,  0xE400000000000000LL);
}

uint64_t sub_100122F00()
{
  return 1701667182LL;
}

uint64_t sub_100122F0C()
{
  return 0x63617073656D616ELL;
}

uint64_t sub_100122F28()
{
  return 0x73646C656966LL;
}

uint64_t sub_100122F3C()
{
  return sub_100122ED4(*v0);
}

uint64_t sub_100122F44@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100122D3C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100122F68@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static AvroPrimitiveSchema.float.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100122F8C(uint64_t a1)
{
  unint64_t v2 = sub_100124AC4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100122FB4(uint64_t a1)
{
  unint64_t v2 = sub_100124AC4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void InternalError.description.setter(uint64_t a1, uint64_t a2)
{
  *unint64_t v2 = a1;
  v2[1] = a2;
  sub_1000110D4();
}

uint64_t AvroRecordSchema.Field.init(name:type:optional:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((v4 & 1) != 0)
  {
    uint64_t v5 = sub_10000941C(&qword_1001DB508);
    uint64_t v6 = sub_100009ACC(v5, 48LL);
    *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_10015D580;
    if (qword_1001DB438 != -1) {
      swift_once(&qword_1001DB438, sub_1001215A4);
    }
    uint64_t v7 = static AvroSchema.null;
    *(void *)(v6 + 3sub_1000108B8(v0 + 2) = static AvroSchema.null;
    *(void *)(v6 + 4sub_1000E3528(v0, v2, 0) = a3;
    uint64_t v8 = sub_100009ACC((uint64_t)&unk_1001BD180, 24LL);
    AvroUnionSchema.init(of:)((Swift::OpaquePointer)v6);
    *(void *)(v8 + swift_weakDestroy(v0 + 16) = v6;
    swift_retain(v7 & 0x1FFFFFFFFFFFFFFFLL);
  }

  return sub_10005A790();
}

uint64_t sub_1001230C8(uint64_t a1, unint64_t a2)
{
  if (a1 == 1701667182 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1701869940 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1701869940LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_10012319C(char a1)
{
  if ((a1 & 1) != 0) {
    return 1701869940LL;
  }
  else {
    return 1701667182LL;
  }
}

uint64_t sub_1001231C0()
{
  return sub_10012319C(*v0);
}

uint64_t sub_1001231C8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001230C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001231EC(uint64_t a1)
{
  unint64_t v2 = sub_100126928();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100123214(uint64_t a1)
{
  unint64_t v2 = sub_100126928();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10012324C(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_100124090( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void))static AvroMapSchema.__derived_struct_equals(_:_:));
}

uint64_t AvroRecordSchema.hash(into:)()
{
  if (*(void *)(v0 + 40))
  {
    Hasher._combine(_:)(1u);
    sub_100010E2C();
    uint64_t v1 = sub_1000A1F68();
    sub_100128140(v1, v2);
    sub_1000110A8();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  sub_10005A624();
  uint64_t v3 = sub_10005A790();
  sub_1001268B0(v3, v4);
  return swift_bridgeObjectRelease();
}

void static AvroRecordSchema.__derived_struct_equals(_:_:)()
{
  uint64_t v3 = *v2;
  uint64_t v4 = v1[1];
  uint64_t v5 = v0[1];
  BOOL v6 = v3 == *v0 && v4 == v5;
  if (v6 || (sub_10005A06C(v3, v4, *v0, v5) & 1) != 0)
  {
    uint64_t v7 = v1[2];
    uint64_t v8 = v1[3];
    uint64_t v9 = v0[2];
    uint64_t v10 = v0[3];
    BOOL v11 = v7 == v9 && v8 == v10;
    if (v11 || (sub_10005A06C(v7, v8, v9, v10) & 1) != 0)
    {
      uint64_t v12 = v1[5];
      uint64_t v13 = v0[5];
      if (v12)
      {
        if (v13)
        {
          uint64_t v14 = v1[4];
          uint64_t v15 = v0[4];
          BOOL v16 = v14 == v15 && v12 == v13;
          if (v16 || (sub_10005A06C(v14, v12, v15, v13) & 1) != 0) {
            goto LABEL_18;
          }
        }
      }

      else if (!v13)
      {
LABEL_18:
        sub_100123600(v1[6], v0[6]);
        return;
      }
    }
  }

  sub_100009A90();
}

uint64_t sub_100123380(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      char v22 = 1;
    }

    else
    {
      uint64_t v3 = v2 - 1;
      uint64_t v4 = a1 + 48;
      uint64_t v5 = a2 + 48;
      do
      {
        uint64_t v34 = v3;
        char v6 = *(_BYTE *)(v4 + 48);
        uint64_t v8 = *(void *)(v4 + 32);
        uint64_t v7 = *(void *)(v4 + 40);
        uint64_t v10 = *(void *)(v4 + 16);
        uint64_t v9 = *(void *)(v4 + 24);
        uint64_t v12 = *(void *)v4;
        unint64_t v11 = *(void *)(v4 + 8);
        unint64_t v13 = *(void *)(v4 - 8);
        uint64_t v14 = *(void *)(v5 - 16);
        unint64_t v15 = *(void *)(v5 - 8);
        uint64_t v16 = *(void *)v5;
        unint64_t v24 = *(void *)(v5 + 8);
        uint64_t v25 = *(void *)(v4 - 16);
        uint64_t v18 = *(void *)(v5 + 16);
        uint64_t v17 = *(void *)(v5 + 24);
        uint64_t v19 = *(void *)(v5 + 32);
        uint64_t v20 = *(void *)(v5 + 40);
        char v21 = *(_BYTE *)(v5 + 48);
        v35[0] = v25;
        v35[1] = v13;
        unint64_t v26 = v13;
        uint64_t v27 = v12;
        v35[2] = v12;
        v35[3] = v11;
        char v28 = v11;
        uint64_t v29 = v10;
        void v35[4] = v10;
        v35[5] = v9;
        uint64_t v30 = v9;
        uint64_t v31 = v8;
        v35[6] = v8;
        v35[7] = v7;
        uint64_t v33 = v7;
        char v32 = v6;
        char v36 = v6;
        v37[0] = v14;
        v37[1] = v15;
        v37[2] = v16;
        v37[3] = v24;
        v37[4] = v18;
        v37[5] = v17;
        v37[6] = v19;
        v37[7] = v20;
        char v38 = v21;
        sub_100127A18(v25, v13, v12, v11, v10, v9, v8, v7, v6);
        sub_100127A18(v14, v15, v16, v24, v18, v17, v19, v20, v21);
        char v22 = sub_100137EA4(v35, v37);
        sub_10005B13C(v14, v15, v16, v24, v18, v17, v19, v20, v21);
        sub_10005B13C(v25, v26, v27, v28, v29, v30, v31, v33, v32);
        uint64_t v3 = v34 - 1;
        if ((v22 & 1) == 0) {
          break;
        }
        v4 += 72LL;
        v5 += 72LL;
      }

      while (v34);
    }
  }

  else
  {
    char v22 = 0;
  }

  return v22 & 1;
}

void _s9SwiftAvro0B11UnionSchemaV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == *(void *)(a2 + 16))
  {
    if (v4)
    {
      sub_10005A784();
      if (v5 != v6)
      {
        sub_10005E314();
        sub_1000A1738();
        char v7 = sub_100128174();
        sub_100019F70();
        swift_release();
        if ((v7 & 1) != 0)
        {
          uint64_t v8 = (uint64_t *)(v3 + 40);
          uint64_t v9 = v2 + 40;
          uint64_t v10 = v4 - 1;
          do
          {
            if (!v10) {
              break;
            }
            uint64_t v11 = *v8++;
            v9 += 8LL;
            sub_1000A1738();
            sub_10005E31C();
            uint64_t v12 = sub_10006B66C();
            _s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(v12, v13);
            sub_100127FF4();
            sub_100019F70();
            --v10;
          }

          while ((v11 & 1) != 0);
        }
      }
    }
  }

  sub_10002FBC0();
}

uint64_t sub_100123600(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2) {
      return 1LL;
    }
    uint64_t v3 = (uint64_t *)(a2 + 48);
    for (unint64_t i = (uint64_t *)(a1 + 48); ; i += 3)
    {
      uint64_t v5 = *(i - 2);
      uint64_t v6 = *(i - 1);
      uint64_t v7 = *i;
      uint64_t v8 = *(v3 - 2);
      uint64_t v9 = *(v3 - 1);
      uint64_t v10 = *v3;
      BOOL v11 = v5 == v8 && v6 == v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)(v5, *(i - 1), v8, *(v3 - 1), 0LL) & 1) == 0) {
        break;
      }
      swift_retain(v10 & 0x1FFFFFFFFFFFFFFFLL);
      swift_bridgeObjectRetain(v6);
      swift_retain(v7 & 0x1FFFFFFFFFFFFFFFLL);
      swift_bridgeObjectRetain(v9);
      char v12 = _s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(v7, v10);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0) {
        break;
      }
      v3 += 3;
      if (!--v2) {
        return 1LL;
      }
    }
  }

  return 0LL;
}

void AvroRecordSchema.hashValue.getter(uint64_t a1)
{
}

Swift::Int sub_100123734(uint64_t a1)
{
  return Hasher._finalize()();
}

void AvroRecordSchema.Field.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_10012379C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t a7)
{
  uint64_t v11 = sub_10000941C(a5);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  sub_100019AFC(a1, v13);
  uint64_t v15 = a6();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a7, a7, v15, v13, v14);
  char v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v21, v11);
  if (!v18)
  {
    uint64_t v19 = a4;
    char v20 = 1;
    sub_10012283C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v11);
  }

  sub_100128014(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
  sub_10002716C();
}

void AvroRecordSchema.Field.init(from:)()
{
  uint64_t v2 = sub_10000941C(&qword_1001DB520);
  sub_10002FBE4();
  __chkstk_darwin(v3);
  sub_100009AEC();
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  sub_10006B6C8(v0, v4);
  unint64_t v6 = sub_100126928();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AvroRecordSchema.Field.CodingKeys,  &type metadata for AvroRecordSchema.Field.CodingKeys,  v6,  v4,  v5);
  if (v1)
  {
    sub_1000E3700();
  }

  else
  {
    char v10 = 0;
    sub_10012800C((uint64_t)&v10, v2);
    uint64_t v8 = v7;
    char v9 = 1;
    sub_100126964();
    swift_bridgeObjectRetain(v8);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for AvroSchema, &v9, v2, &type metadata for AvroSchema);
    sub_100107BF8();
    sub_1000A1738();
    sub_1000108B8(v0);
    swift_release();
    sub_1000145F0();
  }

  sub_1001280C8();
  sub_10002FBAC();
}

uint64_t sub_100123A0C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100124670((uint64_t (*)(void))AvroRecordSchema.Field.init(from:), a1);
}

void sub_100123A28(void *a1)
{
}

void AvroRecordSchema.init(from:)()
{
  uint64_t v3 = v2;
  uint64_t v4 = sub_10000941C(&qword_1001DB530);
  __chkstk_darwin(v4);
  sub_100009AEC();
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  sub_100019AFC(v0, v5);
  unint64_t v7 = sub_100124AC4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AvroRecordSchema.CodingKeys,  &type metadata for AvroRecordSchema.CodingKeys,  v7,  v5,  v6);
  if (v1)
  {
    sub_1000108B8(v0);
    sub_10001460C();
    sub_100010C70();
  }

  else
  {
    char v26 = 0;
    uint64_t v8 = sub_10012800C((uint64_t)&v26, v4);
    uint64_t v10 = v9;
    uint64_t v21 = v8;
    char v25 = 1;
    MessageSchemaModel.properties.getter(v8, v9);
    uint64_t v11 = sub_10012800C((uint64_t)&v25, v4);
    uint64_t v13 = v12;
    uint64_t v19 = v11;
    char v20 = v3;
    char v24 = 2;
    MessageSchemaModel.properties.getter(v11, v12);
    uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v24, v4);
    uint64_t v16 = v15;
    uint64_t v18 = v14;
    uint64_t v17 = sub_10000941C(&qword_1001DB4C8);
    char v23 = 3;
    sub_100126A18(&qword_1001DB538, &qword_1001DB4C8, (void (*)(void))sub_1001269A0);
    sub_100010DFC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, &v23, v4, v17);
    sub_100127D94();
    sub_10005A62C();
    sub_10003EF98();
    sub_100047294();
    sub_10001460C();
    sub_1000110E0();
    sub_1000E3700();
    swift_bridgeObjectRelease();
    sub_100010C70();
    sub_1000110E0();
    sub_10001460C();
    *char v20 = v21;
    v20[1] = v10;
    _BYTE v20[2] = v19;
    v20[3] = v13;
    v20[4] = v18;
    v20[5] = v16;
    v20[6] = v22;
  }

  sub_10002716C();
}

double sub_100123CA0@<D0>(uint64_t a1@<X8>)
{
  if (!v1)
  {
    *(_OWORD *)a1 = v4;
    *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v5;
    double result = *(double *)&v6;
    *(_OWORD *)(a1 + 3sub_1000108B8(v0 + 2) = v6;
    *(void *)(a1 + 48) = v7;
  }

  return result;
}

void sub_100123CEC(void *a1)
{
}

void AvroRecordSchema.Field.description.getter(uint64_t a1, void *a2, uint64_t a3)
{
  v6._uint64_t countAndFlagsBits = a1;
  v6._object = a2;
  String.append(_:)(v6);
  sub_1000110A8();
  v7._uint64_t countAndFlagsBits = 8250LL;
  v7._object = (void *)0xE200000000000000LL;
  String.append(_:)(v7);
  swift_retain();
  AvroSchema.description.getter(a3);
  String.append(_:)(v8);
  sub_1000110B0();
  sub_1000325E4();
  v9._uint64_t countAndFlagsBits = 125LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  sub_1000D1B70();
}

void sub_100123D98()
{
}

void AvroRecordSchema.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  sub_1000145E8();
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  sub_10001450C();
  v4._uint64_t countAndFlagsBits = 0x73646C656966202CLL;
  v4._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v4);
  uint64_t v5 = sub_10005A624();
  v6._uint64_t countAndFlagsBits = Array.description.getter(v5, &type metadata for AvroRecordSchema.Field);
  sub_100128150(v6);
  sub_1000325E4();
  sub_1000110A8();
  sub_1001280A8();
  sub_1000D1B70();
}

uint64_t variable initialization expression of AvroArraySchema.type()
{
  return 0x7961727261LL;
}

void AvroArraySchema.type.getter()
{
}

void AvroArraySchema.items.getter()
{
}

void AvroArraySchema.items.setter(uint64_t a1)
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = a1;
  sub_100009A90();
}

uint64_t sub_100123EE4(uint64_t a1, unint64_t a2)
{
  if (a1 == 1701869940 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x736D657469LL && a2 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease(0xE500000000000000LL);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736D657469LL, 0xE500000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_100123FB8(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x736D657469LL;
  }
  else {
    return 1701869940LL;
  }
}

void sub_100123FE4()
{
}

uint64_t sub_100123FFC()
{
  return sub_100123FB8(*v0);
}

uint64_t sub_100124004@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100123EE4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100124028(uint64_t a1)
{
  unint64_t v2 = sub_100124A4C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100124050(uint64_t a1)
{
  unint64_t v2 = sub_100124A4C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100124078()
{
  return AvroMapSchema.hashValue.getter(*v0, v0[1], v0[2]);
}

uint64_t sub_100124084(uint64_t a1)
{
  return AvroMapSchema.hash(into:)(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100124090( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

void AvroArraySchema.init(from:)()
{
  unint64_t v3 = sub_100124A4C();
  sub_100127F24((uint64_t)&type metadata for AvroArraySchema.CodingKeys, v4, v3);
  if (!v1)
  {
    sub_100127E94();
    unint64_t v5 = sub_100127FD8();
    sub_10005A62C();
    sub_100127DFC((uint64_t)&type metadata for AvroSchema);
    if (!v5)
    {
      sub_10011D814();
      sub_10005E314();
      sub_1000108B8(v0);
      sub_100011030();
      sub_10001460C();
      goto LABEL_4;
    }

    sub_10011D814();
    sub_10001460C();
  }

  sub_1000108B8(v0);
  sub_10001460C();
LABEL_4:
  sub_1001280C8();
  sub_10002FBAC();
}

uint64_t sub_1001241B4@<X0>(uint64_t *a1@<X8>)
{
  return sub_100124670((uint64_t (*)(void))AvroArraySchema.init(from:), a1);
}

void sub_1001241D0(void *a1)
{
}

void AvroArraySchema.description.getter(int a1, int a2, uint64_t a3)
{
}

void sub_100124208(int a1, int a2)
{
}

uint64_t variable initialization expression of AvroMapSchema.type()
{
  return 7364973LL;
}

uint64_t sub_100124220(uint64_t a1, unint64_t a2)
{
  if (a1 == 1701869940 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x7365756C6176LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7365756C6176LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

void sub_1001242F4(uint64_t a1)
{
  char v1 = a1;
  sub_10003DDD8(a1);
  Hasher._combine(_:)(v1 & 1);
  sub_10007AFDC();
  sub_10003DDCC();
}

uint64_t sub_100124324(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x7365756C6176LL;
  }
  else {
    return 1701869940LL;
  }
}

void sub_100124350(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(v2);
  sub_10007AFDC();
  sub_10003DDCC();
}

uint64_t sub_100124384()
{
  return sub_100124324(*v0);
}

uint64_t sub_10012438C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100124220(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001243B0(uint64_t a1)
{
  unint64_t v2 = sub_100124A88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001243D8(uint64_t a1)
{
  unint64_t v2 = sub_100124A88();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t _s9SwiftAvro0B9MapSchemaV4hash4intoys6HasherVz_tF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000167DC(a4 & 0x1FFFFFFFFFFFFFFFLL);
}

void _s9SwiftAvro0B9MapSchemaV23__derived_struct_equalsySbAC_ACtFZ_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5 = a1 == a4 && a2 == a5;
  if (v5 || (sub_10005A06C(a1, a2, a4, a5) & 1) != 0)
  {
    uint64_t v6 = sub_10005A790();
    _s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(v6);
  }

  else
  {
    sub_100009A90();
  }

void _s9SwiftAvro0B9MapSchemaV9hashValueSivg_0()
{
  uint64_t v2 = sub_10000C4AC();
  sub_100128000(v2);
  sub_10001683C();
  sub_10007AFDC();
  sub_100128098();
}

void sub_1001244F0(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[2];
  Hasher.init(_seed:)(v4, a1);
  sub_100010E2C();
  sub_100128140((uint64_t)v4, v2);
  sub_1000110A8();
  swift_retain();
  sub_100121F54((uint64_t)v4, v3);
  sub_100010D00();
  sub_10007AFDC();
  sub_100128098();
}

void AvroMapSchema.init(from:)()
{
  unint64_t v3 = sub_100124A88();
  sub_100127F24((uint64_t)&type metadata for AvroMapSchema.CodingKeys, v4, v3);
  if (!v1)
  {
    sub_100127E94();
    unint64_t v5 = sub_100127FD8();
    sub_10005A62C();
    sub_100127DFC((uint64_t)&type metadata for AvroSchema);
    if (!v5)
    {
      sub_10011D814();
      sub_10005E314();
      sub_1000108B8(v0);
      sub_100011030();
      sub_10001460C();
      goto LABEL_4;
    }

    sub_10011D814();
    sub_10001460C();
  }

  sub_1000108B8(v0);
  sub_10001460C();
LABEL_4:
  sub_1001280C8();
  sub_10002FBAC();
}

uint64_t sub_100124654@<X0>(uint64_t *a1@<X8>)
{
  return sub_100124670((uint64_t (*)(void))AvroMapSchema.init(from:), a1);
}

uint64_t sub_100124670@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

void sub_10012469C(void *a1)
{
}

void AvroMapSchema.description.getter(int a1, int a2, uint64_t a3)
{
}

void sub_1001246D4(int a1, int a2, uint64_t a3, Swift::Int a4)
{
  v5._uint64_t countAndFlagsBits = AvroSchema.description.getter(a3);
  sub_100128150(v5);
  sub_100010D00();
  sub_1000110A8();
  sub_1001280A8();
  sub_1000D1B70();
}

void sub_100124744(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001BD018, v2);
  sub_1000325E4();
  sub_100009A90();
}

uint64_t sub_100124784(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001247B0 + 4 * byte_100166B38[a1]))( 1819047278LL,  0xE400000000000000LL);
}

uint64_t sub_1001247C8()
{
  return 0x7365747962LL;
}

void sub_1001247DC(int a1, int a2)
{
}

void sub_1001247E4(char *a1)
{
}

void sub_1001247F0(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100124830(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1001248D0 + 4 * byte_100166B48[a2]))(0x6E61656C6F6F62LL);
}

uint64_t sub_1001248D0(uint64_t a1)
{
  unint64_t v2 = 0xE700000000000000LL;
  if (a1 == 0x6E61656C6F6F62LL && v1 == 0xE700000000000000LL)
  {
    char v4 = 1;
    unint64_t v2 = v1;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6E61656C6F6F62LL, 0xE700000000000000LL, 0LL);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v4 & 1;
}

void sub_1001249A0(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = v3;
}

uint64_t sub_1001249CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100124784(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1001249F4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100124A20 + 4 * byte_100166B50[a1]))( 1819047278LL,  0xE400000000000000LL);
}

uint64_t sub_100124A38()
{
  return 0x7365747962LL;
}

unint64_t sub_100124A4C()
{
  unint64_t result = qword_1001DB4A0;
  if (!qword_1001DB4A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100167884, &type metadata for AvroArraySchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DB4A0);
  }

  return result;
}

unint64_t sub_100124A88()
{
  unint64_t result = qword_1001DB4B0;
  if (!qword_1001DB4B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100167834, &type metadata for AvroMapSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DB4B0);
  }

  return result;
}

unint64_t sub_100124AC4()
{
  unint64_t result = qword_1001DB4C0;
  if (!qword_1001DB4C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001677E4, &type metadata for AvroRecordSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DB4C0);
  }

  return result;
}

unint64_t sub_100124B00()
{
  unint64_t result = qword_1001DB4D8;
  if (!qword_1001DB4D8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AvroRecordSchema.Field,  &type metadata for AvroRecordSchema.Field);
    atomic_store(result, (unint64_t *)&qword_1001DB4D8);
  }

  return result;
}

unint64_t sub_100124B3C()
{
  unint64_t result = qword_1001DB4E0;
  if (!qword_1001DB4E0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AvroPrimitiveSchema,  &type metadata for AvroPrimitiveSchema);
    atomic_store(result, (unint64_t *)&qword_1001DB4E0);
  }

  return result;
}

unint64_t sub_100124B78()
{
  unint64_t result = qword_1001DB4E8;
  if (!qword_1001DB4E8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AvroArraySchema,  &type metadata for AvroArraySchema);
    atomic_store(result, (unint64_t *)&qword_1001DB4E8);
  }

  return result;
}

unint64_t sub_100124BB4()
{
  unint64_t result = qword_1001DB4F0;
  if (!qword_1001DB4F0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AvroMapSchema, &type metadata for AvroMapSchema);
    atomic_store(result, (unint64_t *)&qword_1001DB4F0);
  }

  return result;
}

unint64_t sub_100124BF0()
{
  unint64_t result = qword_1001DB4F8;
  if (!qword_1001DB4F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AvroRecordSchema,  &type metadata for AvroRecordSchema);
    atomic_store(result, (unint64_t *)&qword_1001DB4F8);
  }

  return result;
}

unint64_t sub_100124C2C()
{
  unint64_t result = qword_1001DB500;
  if (!qword_1001DB500)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AvroUnionSchema,  &type metadata for AvroUnionSchema);
    atomic_store(result, (unint64_t *)&qword_1001DB500);
  }

  return result;
}

Swift::Int sub_100124C68()
{
  return sub_100124C70(*v0);
}

Swift::Int sub_100124C70(unsigned __int8 a1)
{
  uint64_t v2 = sub_100124784(a1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void sub_100124CD0(uint64_t a1)
{
}

void sub_100124CD8(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_100124D10(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE700000000000000LL);
}

Swift::Int sub_100124DA8(uint64_t a1)
{
  return sub_100124DB0(a1, *v1);
}

Swift::Int sub_100124DB0(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = sub_100124784(a2);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void AvroPrimitiveSchema.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_100124E44(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE700000000000000LL);
}

void static AvroPrimitiveSchema.__derived_struct_equals(_:_:)(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100124F1C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100124FBC + 4 * byte_100166B70[a2]))(0x6E61656C6F6F62LL);
}

uint64_t sub_100124FBC(uint64_t a1)
{
  if (a1 == 0x6E61656C6F6F62LL && v1 == 0xE700000000000000LL) {
    char v3 = 1;
  }
  else {
    char v3 = sub_10005A06C(a1, v1, 0x6E61656C6F6F62LL, 0xE700000000000000LL);
  }
  sub_1000325E4();
  sub_100009B3C();
  return v3 & 1;
}

void AvroPrimitiveSchema.hashValue.getter(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_10003DDD8(a1);
  uint64_t v2 = sub_100124784(v1);
  String.hash(into:)(v4, v2, v3);
  sub_1000325E4();
  sub_10007AFDC();
  sub_10003DDCC();
}

void sub_1001250C8()
{
}

void sub_1001250D0(uint64_t a1)
{
}

Swift::Int sub_1001250D8(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  uint64_t v3 = sub_100124784(v2);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void sub_100125134(char *a1)
{
}

uint64_t sub_100125140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001279DC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10012519C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1001279DC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_1001251E8(uint64_t a1, uint64_t a2)
{
  if (a1 == 1701869940 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10005A06C(1701869940LL, 0xE400000000000000LL, a1, a2);
    sub_1000325E4();
  }

  sub_100009A90();
}

void sub_100125250(uint64_t a1)
{
}

void sub_100125280(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  *a3 = v4 != 0;
}

uint64_t sub_1001252AC(uint64_t a1)
{
  unint64_t v2 = sub_100122878();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001252D4(uint64_t a1)
{
  unint64_t v2 = sub_100122878();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1001252FC(void *a1)
{
}

uint64_t AvroPrimitiveSchema.init(from:)(void *a1)
{
  uint64_t v3 = sub_10000941C(&qword_1001DB558);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100009AEC();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100019AFC(a1, v8);
  dispatch thunk of Decoder.singleValueContainer()(v8, v9);
  if (v1)
  {
    uint64_t v13 = a1[3];
    uint64_t v14 = a1[4];
    sub_100019AFC(a1, v13);
    unint64_t v15 = sub_100122878();
    dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1001BD8D0, &unk_1001BD8D0, v15, v13, v14);
    sub_1001269DC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&unk_1001BD690, v16, v3, &unk_1001BD690);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
    swift_errorRelease(v1);
    uint64_t v17 = LOBYTE(v19[0]);
  }

  else
  {
    uint64_t v10 = v20;
    uint64_t v11 = v21;
    sub_10006B6C8(v19, v20);
    unint64_t v12 = sub_1001269DC();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)(&unk_1001BD690, &unk_1001BD690, v12, v10, v11);
    uint64_t v17 = v22;
    sub_1000108B8(v19);
  }

  sub_1000E3700();
  return v17;
}

uint64_t sub_1001254D8@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = AvroPrimitiveSchema.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t AvroPrimitiveSchema.description.getter(char a1)
{
  char v2 = a1;
  return String.init<A>(describing:)(&v2);
}

uint64_t sub_10012552C()
{
  return AvroPrimitiveSchema.description.getter(*v0);
}

void AvroUnionSchema.hash(into:)()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Hasher._combine(_:)(v1);
  if (v1)
  {
    sub_10005A624();
    uint64_t v2 = 0LL;
    do
    {
      ++v2;
      sub_1000A1738();
      uint64_t v3 = sub_1000A1F68();
      sub_100121F54(v3, v4);
      sub_100019F70();
    }

    while (v1 != v2);
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_100019F1C();
  }

void AvroUnionSchema.hashValue.getter(uint64_t a1)
{
}

void sub_1001255E8()
{
}

void sub_1001255F0()
{
}

Swift::Int sub_1001255F8(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  Swift::UInt v3 = *(void *)(v2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    swift_bridgeObjectRetain(v2);
    uint64_t v4 = 0LL;
    do
    {
      uint64_t v5 = *(void *)(v2 + 8 * v4++ + 32);
      swift_retain();
      sub_100121F54((uint64_t)v7, v5);
      swift_release();
    }

    while (v3 != v4);
    swift_bridgeObjectRelease();
  }

  return Hasher._finalize()();
}

uint64_t sub_100125698(void *a1, void *a2)
{
  return static AvroUnionSchema.__derived_struct_equals(_:_:)(*a1, *a2);
}

uint64_t sub_1001256A4()
{
  return AvroUnionSchema.encode(to:)();
}

uint64_t AvroUnionSchema.init(from:)(void *a1)
{
  if (!v2)
  {
    sub_10006B6C8(v6, v6[3]);
    uint64_t v3 = sub_10000941C(&qword_1001DB568);
    uint64_t v4 = sub_100126A18(&qword_1001DB570, &qword_1001DB568, (void (*)(void))sub_100126964);
    sub_1001280E8(v3, v3, v4);
    uint64_t v1 = v6[6];
    sub_1000108B8(v6);
  }

  sub_1000E3700();
  return v1;
}

uint64_t sub_100125790@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = AvroUnionSchema.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t AvroUnionSchema.description.getter(uint64_t a1)
{
  return sub_10006B66C();
}

uint64_t sub_1001257FC()
{
  return AvroUnionSchema.description.getter(*v0);
}

void *sub_100125804(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t variable initialization expression of ByteBuffer.data()
{
  return 0LL;
}

void sub_100125860(uint64_t a1, uint64_t a2)
{
  if (v2)
  {
    uint64_t v4 = v3 + 32;
    do
    {
      v4 += 8LL;
      sub_10005E31C();
      uint64_t v5 = sub_10006B66C();
      sub_100121F54(v5, v6);
      swift_release();
      --v2;
    }

    while (v2);
  }

  sub_100019F1C();
}

void sub_1001258AC(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  sub_100127D10(v3);
  if (v3) {
    __asm { BR              X8 }
  }

void sub_1001268B0(uint64_t a1, uint64_t a2)
{
  if (v2)
  {
    uint64_t v5 = (uint64_t *)(v4 + 48);
    do
    {
      uint64_t v6 = *v5;
      v5 += 3;
      sub_10005E314();
      sub_1000145E8();
      sub_100127E84();
      sub_10005E314();
      sub_100121F54(v3, v6);
      sub_10001450C();
      sub_100019D80(v6 & 0x1FFFFFFFFFFFFFFFLL);
      --v2;
    }

    while (v2);
  }

unint64_t sub_100126928()
{
  unint64_t result = qword_1001DB518;
  if (!qword_1001DB518)
  {
    unint64_t result = swift_getWitnessTable(&unk_100167794, &type metadata for AvroRecordSchema.Field.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DB518);
  }

  return result;
}

unint64_t sub_100126964()
{
  unint64_t result = qword_1001DB528;
  if (!qword_1001DB528)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AvroSchema, &type metadata for AvroSchema);
    atomic_store(result, (unint64_t *)&qword_1001DB528);
  }

  return result;
}

unint64_t sub_1001269A0()
{
  unint64_t result = qword_1001DB540;
  if (!qword_1001DB540)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AvroRecordSchema.Field,  &type metadata for AvroRecordSchema.Field);
    atomic_store(result, (unint64_t *)&qword_1001DB540);
  }

  return result;
}

unint64_t sub_1001269DC()
{
  unint64_t result = qword_1001DB560;
  if (!qword_1001DB560)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016776C, &unk_1001BD690);
    atomic_store(result, (unint64_t *)&qword_1001DB560);
  }

  return result;
}

uint64_t sub_100126A18(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000094A0(a2);
    a3();
    uint64_t v6 = sub_1000A1F68();
    uint64_t result = swift_getWitnessTable(v6, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100126A7C()
{
  unint64_t result = qword_1001DB578;
  if (!qword_1001DB578)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AvroSchema, &type metadata for AvroSchema);
    atomic_store(result, (unint64_t *)&qword_1001DB578);
  }

  return result;
}

unint64_t sub_100126ABC()
{
  unint64_t result = qword_1001DB580;
  if (!qword_1001DB580)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AvroRecordSchema.Field,  &type metadata for AvroRecordSchema.Field);
    atomic_store(result, (unint64_t *)&qword_1001DB580);
  }

  return result;
}

unint64_t sub_100126AFC()
{
  unint64_t result = qword_1001DB588;
  if (!qword_1001DB588)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AvroRecordSchema,  &type metadata for AvroRecordSchema);
    atomic_store(result, (unint64_t *)&qword_1001DB588);
  }

  return result;
}

unint64_t sub_100126B3C()
{
  unint64_t result = qword_1001DB590;
  if (!qword_1001DB590)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AvroArraySchema,  &type metadata for AvroArraySchema);
    atomic_store(result, (unint64_t *)&qword_1001DB590);
  }

  return result;
}

unint64_t sub_100126B7C()
{
  unint64_t result = qword_1001DB598;
  if (!qword_1001DB598)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AvroMapSchema, &type metadata for AvroMapSchema);
    atomic_store(result, (unint64_t *)&qword_1001DB598);
  }

  return result;
}

unint64_t sub_100126BBC()
{
  unint64_t result = qword_1001DB5A0;
  if (!qword_1001DB5A0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AvroPrimitiveSchema,  &type metadata for AvroPrimitiveSchema);
    atomic_store(result, (unint64_t *)&qword_1001DB5A0);
  }

  return result;
}

unint64_t sub_100126BFC()
{
  unint64_t result = qword_1001DB5A8;
  if (!qword_1001DB5A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AvroUnionSchema,  &type metadata for AvroUnionSchema);
    atomic_store(result, (unint64_t *)&qword_1001DB5A8);
  }

  return result;
}

void type metadata accessor for AvroSchema()
{
}

uint64_t destroy for AvroRecordSchema(void *a1)
{
  return swift_bridgeObjectRelease(a1[6]);
}

void *initializeWithCopy for AvroRecordSchema(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[6];
  a1[6] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

void *assignWithCopy for AvroRecordSchema(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[6];
  uint64_t v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

void *assignWithTake for AvroRecordSchema(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = a1[3];
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  a1[4] = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(a1[5]);
  uint64_t v8 = a1[6];
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AvroRecordSchema(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      LODWORD(vsub_1000108B8(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_1000108B8(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_1000108B8(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AvroRecordSchema(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 4sub_1000E3528(v0, v2, 0) = 0u;
    *(_OWORD *)(result + swift_weakLoadStrong(v0 + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for AvroRecordSchema()
{
}

void type metadata accessor for AvroRecordSchema.Field()
{
}

void type metadata accessor for AvroArraySchema()
{
}

uint64_t _s9SwiftAvro15AvroArraySchemaVwxx_0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 16) & 0x1FFFFFFFFFFFFFFFLL);
}

void _s9SwiftAvro15AvroArraySchemaVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  sub_10000C4AC();
  sub_100009A90();
}

void _s9SwiftAvro15AvroArraySchemaVwca_0()
{
  void *v3 = *v2;
  uint64_t v4 = v2[1];
  *(void *)(v1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  sub_1000110A8();
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = *(void *)(v0 + 16);
  swift_retain();
  sub_100010D00();
  sub_1000110D4();
}

void _s9SwiftAvro15AvroArraySchemaVwta_0()
{
  uint64_t v3 = v2[1];
  *uint64_t v1 = *v2;
  v1[1] = v3;
  swift_bridgeObjectRelease();
  v1[2] = *(void *)(v0 + 16);
  swift_release();
  sub_100009A90();
}

void type metadata accessor for AvroMapSchema()
{
}

void type metadata accessor for AvroPrimitiveSchema()
{
}

void type metadata accessor for AvroUnionSchema()
{
}

void *_s9SwiftAvro10AvroSchemaVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = *a2 & 0x1FFFFFFFFFFFFFFFLL;
  *a1 = *a2;
  swift_retain(v3);
  return a1;
}

uint64_t _s9SwiftAvro10AvroSchemaVwxx_0(void *a1)
{
  return swift_release(*a1 & 0x1FFFFFFFFFFFFFFFLL);
}

void _s9SwiftAvro10AvroSchemaVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  sub_10001683C();
  sub_100009A90();
}

uint64_t *_s9SwiftAvro10AvroSchemaVwta_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  swift_release(v3 & 0x1FFFFFFFFFFFFFFFLL);
  return a1;
}

uint64_t _s9SwiftAvro10AvroSchemaVwet_0(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7C && *(_BYTE *)(a1 + 8)) {
      return sub_100128148(*(_DWORD *)a1 + 123);
    }
    unsigned int v3 = (((*(void *)a1 >> 57) >> 4) | (8 * ((*(void *)a1 >> 57) & 8 | *(void *)a1 & 7))) ^ 0x7F;
    if (v3 >= 0x7B) {
      return sub_100128148(-1);
    }
  }

  else
  {
    unsigned int v3 = -1;
  }

  return sub_100128148(v3);
}

uint64_t _s9SwiftAvro10AvroSchemaVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(void *)unint64_t result = a2 - 124;
    if (a3 >= 0x7C) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7C) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007LL;
    }
  }

  return result;
}

uint64_t sub_100127138(void *a1)
{
  return *a1 >> 61;
}

void *sub_100127144(void *result)
{
  *result &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t *sub_100127154(uint64_t *result, uint64_t a2)
{
  *unint64_t result = *result & 0xFFFFFFFFFFFFFF8LL | (a2 << 61);
  return result;
}

void type metadata accessor for AvroSchema._Schema()
{
}

ValueMetadata *type metadata accessor for AvroRecordSchema.Field.CodingKeys()
{
  return &type metadata for AvroRecordSchema.Field.CodingKeys;
}

uint64_t _s9SwiftAvro19AvroPrimitiveSchemaVwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_100128148(-1);
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_100128148((*a1 | (v4 << 8)) - 8);
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_100128148((*a1 | (v4 << 8)) - 8);
    }

    int v4 = a1[1];
    if (a1[1]) {
      return sub_100128148((*a1 | (v4 << 8)) - 8);
    }
  }

uint64_t _s9SwiftAvro19AvroPrimitiveSchemaVwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_10012725C + 4 * byte_100166BA7[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100127290 + 4 * byte_100166BA2[v4]))();
}

uint64_t sub_100127290(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100127298(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001272A0LL);
  }
  return result;
}

uint64_t sub_1001272AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001272B4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_1001272B8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001272C0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for AvroPrimitiveSchema.Primitive()
{
}

uint64_t storeEnumTagSinglePayload for AvroRecordSchema.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100127324 + 4 * byte_100166BB1[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100127358 + 4 * byte_100166BAC[v4]))();
}

uint64_t sub_100127358(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100127360(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100127368LL);
  }
  return result;
}

uint64_t sub_100127374(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10012737CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100127380(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100127388(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AvroRecordSchema.CodingKeys()
{
  return &type metadata for AvroRecordSchema.CodingKeys;
}

ValueMetadata *type metadata accessor for AvroMapSchema.CodingKeys()
{
  return &type metadata for AvroMapSchema.CodingKeys;
}

uint64_t _s9SwiftAvro16AvroRecordSchemaV5FieldV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_100128148(-1);
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_100128148((*a1 | (v4 << 8)) - 2);
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_100128148((*a1 | (v4 << 8)) - 2);
    }

    int v4 = a1[1];
    if (a1[1]) {
      return sub_100128148((*a1 | (v4 << 8)) - 2);
    }
  }

uint64_t _s9SwiftAvro16AvroRecordSchemaV5FieldV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100127484 + 4 * byte_100166BBB[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001274B8 + 4 * byte_100166BB6[v4]))();
}

uint64_t sub_1001274B8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001274C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001274C8LL);
  }
  return result;
}

uint64_t sub_1001274D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001274DCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1001274E0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001274E8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AvroArraySchema.CodingKeys()
{
  return &type metadata for AvroArraySchema.CodingKeys;
}

uint64_t sub_100127504(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100127544 + 4 * byte_100166BC0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100127564 + 4 * byte_100166BC5[v4]))();
  }
}

_BYTE *sub_100127544(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100127564(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10012756C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100127574(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10012757C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100127584(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void type metadata accessor for AvroPrimitiveSchema.CodingKeys()
{
}

unint64_t sub_1001275A0()
{
  unint64_t result = qword_1001DB5B0;
  if (!qword_1001DB5B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100167334, &unk_1001BD8D0);
    atomic_store(result, (unint64_t *)&qword_1001DB5B0);
  }

  return result;
}

unint64_t sub_1001275E0()
{
  unint64_t result = qword_1001DB5B8;
  if (!qword_1001DB5B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001673EC, &type metadata for AvroArraySchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DB5B8);
  }

  return result;
}

unint64_t sub_100127620()
{
  unint64_t result = qword_1001DB5C0;
  if (!qword_1001DB5C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001674A4, &type metadata for AvroMapSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DB5C0);
  }

  return result;
}

unint64_t sub_100127660()
{
  unint64_t result = qword_1001DB5C8;
  if (!qword_1001DB5C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016755C, &type metadata for AvroRecordSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DB5C8);
  }

  return result;
}

unint64_t sub_1001276A0()
{
  unint64_t result = qword_1001DB5D0;
  if (!qword_1001DB5D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100167674, &type metadata for AvroRecordSchema.Field.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DB5D0);
  }

  return result;
}

unint64_t sub_1001276E0()
{
  unint64_t result = qword_1001DB5D8;
  if (!qword_1001DB5D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001675BC, &unk_1001BD690);
    atomic_store(result, (unint64_t *)&qword_1001DB5D8);
  }

  return result;
}

unint64_t sub_100127720()
{
  unint64_t result = qword_1001DB5E0;
  if (!qword_1001DB5E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100167704, &unk_1001BD570);
    atomic_store(result, (unint64_t *)&qword_1001DB5E0);
  }

  return result;
}

unint64_t sub_100127760()
{
  unint64_t result = qword_1001DB5E8;
  if (!qword_1001DB5E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001675E4, &type metadata for AvroRecordSchema.Field.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DB5E8);
  }

  return result;
}

unint64_t sub_1001277A0()
{
  unint64_t result = qword_1001DB5F0;
  if (!qword_1001DB5F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016760C, &type metadata for AvroRecordSchema.Field.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DB5F0);
  }

  return result;
}

unint64_t sub_1001277E0()
{
  unint64_t result = qword_1001DB5F8;
  if (!qword_1001DB5F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001674CC, &type metadata for AvroRecordSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DB5F8);
  }

  return result;
}

unint64_t sub_100127820()
{
  unint64_t result = qword_1001DB600;
  if (!qword_1001DB600)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001674F4, &type metadata for AvroRecordSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DB600);
  }

  return result;
}

unint64_t sub_100127860()
{
  unint64_t result = qword_1001DB608;
  if (!qword_1001DB608)
  {
    unint64_t result = swift_getWitnessTable(&unk_100167414, &type metadata for AvroMapSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DB608);
  }

  return result;
}

unint64_t sub_1001278A0()
{
  unint64_t result = qword_1001DB610;
  if (!qword_1001DB610)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016743C, &type metadata for AvroMapSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DB610);
  }

  return result;
}

unint64_t sub_1001278E0()
{
  unint64_t result = qword_1001DB618;
  if (!qword_1001DB618)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016735C, &type metadata for AvroArraySchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DB618);
  }

  return result;
}

unint64_t sub_100127920()
{
  unint64_t result = qword_1001DB620;
  if (!qword_1001DB620)
  {
    unint64_t result = swift_getWitnessTable(&unk_100167384, &type metadata for AvroArraySchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DB620);
  }

  return result;
}

unint64_t sub_100127960()
{
  unint64_t result = qword_1001DB628;
  if (!qword_1001DB628)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001672A4, &unk_1001BD8D0);
    atomic_store(result, (unint64_t *)&qword_1001DB628);
  }

  return result;
}

unint64_t sub_1001279A0()
{
  unint64_t result = qword_1001DB630;
  if (!qword_1001DB630)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001672CC, &unk_1001BD8D0);
    atomic_store(result, (unint64_t *)&qword_1001DB630);
  }

  return result;
}

unint64_t sub_1001279DC()
{
  unint64_t result = qword_1001DB638;
  if (!qword_1001DB638)
  {
    unint64_t result = swift_getWitnessTable(&unk_100167584, &unk_1001BD690);
    atomic_store(result, (unint64_t *)&qword_1001DB638);
  }

  return result;
}

uint64_t sub_100127A18( uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  switch(a9)
  {
    case 0:
      unint64_t result = sub_100127AE0(result, a2, a3, a4);
      break;
    case 1:
    case 2:
      swift_retain(a3 & 0x1FFFFFFFFFFFFFFFLL);
      swift_bridgeObjectRetain(a4);
      unint64_t v11 = a2;
      goto LABEL_5;
    case 3:
      swift_bridgeObjectRetain(a6);
      swift_bridgeObjectRetain(a7);
      swift_bridgeObjectRetain(a8);
      swift_bridgeObjectRetain(a2);
      unint64_t v11 = a4;
LABEL_5:
      unint64_t result = swift_bridgeObjectRetain(v11);
      break;
    case 4:
      unint64_t result = swift_retain(result);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_100127AE0(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 6) {
    return sub_100127B04(result, a2);
  }
  if (a4 == 5) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_100127B04(uint64_t result, unint64_t a2)
{
  uint64_t v2 = (a2 >> 60) & 3;
  if ((_DWORD)v2 == 2 || (_DWORD)v2 == 1) {
    return sub_100014244(result, a2 & 0xCFFFFFFFFFFFFFFFLL);
  }
  if (!(_DWORD)v2) {
    return swift_bridgeObjectRetain(result);
  }
  return result;
}

uint64_t sub_100127B2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  char v10 = *(_BYTE *)(a1 + 72);
  swift_bridgeObjectRetain(*(void *)a1);
  sub_100127A18(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t sub_100127BB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  char v10 = *(_BYTE *)(a1 + 72);
  swift_bridgeObjectRelease();
  sub_10005B13C(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

unint64_t sub_100127C44()
{
  unint64_t result = qword_1001DB640;
  if (!qword_1001DB640)
  {
    uint64_t v1 = sub_1000094A0(&qword_1001D4168);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001DB640);
  }

  return result;
}

uint64_t sub_100127C88()
{
  return swift_deallocObject(v0, 104LL, 7LL);
}

void sub_100127D10(Swift::UInt a1)
{
}

uint64_t sub_100127D18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(v12, v13, v14, v11, v16, v15, v9, v10, a9);
}

uint64_t sub_100127D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)(a1, a1, a3, v3, v4);
}

uint64_t sub_100127D54( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(a1, a2, a3, a4, a5, a6, a7, v9, a9);
}

uint64_t sub_100127D5C@<X0>( char a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return sub_100127A18(v15, v16, v14, a10, a8, a14, a13, a11, a1);
}

uint64_t sub_100127D94()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

void *sub_100127DA4()
{
  return sub_100019AFC((void *)(v0 - 88), *(void *)(v0 - 64));
}

uint64_t sub_100127DC4()
{
  return v0;
}

uint64_t sub_100127DDC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(a1, v15, v14, v11, v10, v12, v9, v13, a9);
}

uint64_t sub_100127DFC(uint64_t a1)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, v2 - 81, v1, a1);
}

uint64_t sub_100127E1C()
{
  return v0;
}

uint64_t sub_100127E44()
{
  return v0;
}

uint64_t sub_100127E6C()
{
  return swift_retain(v0 & 0x1FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100127E78( uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(result, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_100127E84()
{
  return String.hash(into:)(v0, v1, v2);
}

uint64_t sub_100127E94()
{
  *(_BYTE *)(v1 - 65) = 0;
  return KeyedDecodingContainer.decode(_:forKey:)(v1 - 65, v0);
}

  ;
}

  ;
}

uint64_t sub_100127EDC()
{
  return 0x6E61656C6F6F62LL;
}

uint64_t sub_100127EF4(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, v2);
}

uint64_t sub_100127EFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, unint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34)
{
  return sub_100127A18(a1, v34, a25, a27, a24, a33, a32, a34, a9);
}

  ;
}

uint64_t sub_100127F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

  ;
}

uint64_t sub_100127F58()
{
  return 0x676E69727473LL;
}

uint64_t sub_100127F6C()
{
  return 0x656C62756F64LL;
}

uint64_t sub_100127F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

void sub_100127F94(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100127FA8()
{
  return 0x74616F6C66LL;
}

__n128 sub_100127FBC(uint64_t a1, __n128 *a2)
{
  return a2[3];
}

unint64_t sub_100127FD8()
{
  *(_BYTE *)(v0 - 81) = 1;
  return sub_100126964();
}

uint64_t sub_100127FEC()
{
  return swift_retain(v0 & 0x1FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100127FF4()
{
  return swift_release(v0);
}

void sub_100128000(uint64_t a1, ...)
{
}

uint64_t sub_10012800C(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

uint64_t sub_100128014@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

void *sub_100128020(void *a1)
{
  return sub_100019AFC(a1, a1[3]);
}

uint64_t sub_100128034()
{
  return dispatch thunk of Decoder.singleValueContainer()(v0, v1);
}

void sub_100128048(int a1, int a2, uint64_t a3, Swift::Int a4)
{
}

uint64_t sub_100128050(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, v2);
}

uint64_t sub_100128058(uint64_t result)
{
  *(void *)(result + swift_weakDestroy(v0 + 16) = 0x64726F636572LL;
  *(void *)(result + swift_weakLoadStrong(v0 + 24) = 0xE600000000000000LL;
  return result;
}

uint64_t sub_100128070(uint64_t a1)
{
  return swift_retain(*(void *)(a1 + 32) & 0x1FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100128080()
{
  return 7630441LL;
}

void sub_100128090(uint64_t a1)
{
}

  ;
}

void sub_1001280A8()
{
  v0._uint64_t countAndFlagsBits = 41LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

uint64_t sub_1001280B8()
{
  return swift_release(v0);
}

  ;
}

uint64_t sub_1001280D8(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, v2);
}

void sub_1001280E0(Swift::UInt8 a1)
{
}

uint64_t sub_1001280E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)(a1, a2, a3, v3, v4);
}

void sub_1001280F8(uint64_t a1)
{
}

uint64_t sub_100128100()
{
  return Array<A>.encode(to:)(v1, v0);
}

uint64_t sub_100128110()
{
  return v0;
}

uint64_t sub_100128128()
{
  return String.hash(into:)(v0, v1, v2);
}

uint64_t sub_100128138( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(a1, a2, a3, a4, a5, a6, a7, v9, a9);
}

uint64_t sub_100128140(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, v2);
}

uint64_t sub_100128148@<X0>(int a1@<W8>)
{
  return (a1 + 1);
}

void sub_100128150(Swift::String a1)
{
}

uint64_t sub_10012815C()
{
  return 1735290732LL;
}

uint64_t sub_100128168()
{
  return v0;
}

uint64_t sub_100128174()
{
  return _s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(v0, v1);
}

  ;
}

unint64_t sub_10012818C()
{
  return sub_100127C44();
}

uint64_t sub_100128198()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 24));
}

BOOL sub_1001281A0()
{
  return *(void *)(v0 + 24) == *(void *)(v0 + 32);
}

uint64_t ByteBuffer.init()()
{
  return 0LL;
}

Swift::Int __swiftcall ByteBuffer.writeBytes(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1 = *((void *)a1._rawValue + 2);
  if (!v1) {
    return 0LL;
  }
  Data._Representation.append(contentsOf:)((char *)a1._rawValue + 32, (char *)a1._rawValue + v1 + 32);
  return *((void *)a1._rawValue + 2);
}

void sub_1001281FC()
{
  static Endianness.host = 1;
}

char *Endianness.host.unsafeMutableAddressor()
{
  if (qword_1001DB478 != -1) {
    swift_once(&qword_1001DB478, sub_1001281FC);
  }
  return &static Endianness.host;
}

uint64_t static Endianness.host.getter()
{
  if (qword_1001DB478 != -1) {
    swift_once(&qword_1001DB478, sub_1001281FC);
  }
  return static Endianness.host;
}

Swift::Int Endianness.hashValue.getter(uint64_t a1)
{
  char v1 = a1;
  sub_10003DDD8(a1);
  Hasher._combine(_:)(v1 & 1);
  return Hasher._finalize()();
}

Swift::Int sub_1001282C8()
{
  return Endianness.hashValue.getter(*v0);
}

uint64_t ByteBuffer.data.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t ByteBuffer.readerIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

double ByteBuffer.readableBytesView.getter@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result = *(double *)&v7;
  *(_OWORD *)a3 = v7;
  *(_OWORD *)(a3 + swift_weakDestroy(v0 + 16) = v8;
  *(void *)(a3 + 3sub_1000108B8(v0 + 2) = v9;
  return result;
}

uint64_t ByteBufferView.init(_:)(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_100128370 + *((int *)qword_100128430 + (a2 >> 62))))();
}

uint64_t sub_100128388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v3 < a3)
  {
    __break(1u);
    goto LABEL_5;
  }

  if (a3 < 0)
  {
LABEL_5:
    __break(1u);
    JUMPOUT(0x10012841CLL);
  }

  return ((uint64_t (*)(void))((char *)&loc_1001283C8 + *((int *)qword_100128440 + v4)))();
}

uint64_t ByteBuffer.count.getter(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_100128464 + *((int *)qword_1001284A8 + (a2 >> 62))))(0LL);
}

uint64_t sub_100128474(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2);
}

void ByteBuffer._toEndianness<A>(value:endianness:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((a2 & 1) != 0) {
    dispatch thunk of FixedWidthInteger.littleEndian.getter(a6, a7);
  }
  else {
    dispatch thunk of FixedWidthInteger.bigEndian.getter(a6, a7);
  }
  sub_100009A90();
}

uint64_t sub_1001284EC(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_1001284FC + dword_10012854C[a2 >> 62]))();
}

uint64_t sub_10012850C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = BYTE6(a2) - a3;
  if (__OFSUB__(BYTE6(a2), a3))
  {
    __break(1u);
    JUMPOUT(0x100128544LL);
  }

  return result;
}

uint64_t ByteBuffer.init(bytes:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    Data._Representation.append(contentsOf:)(a1 + 32, a1 + 32 + v2);
  }
  swift_bridgeObjectRelease(a1);
  return 0LL;
}

  ;
}

uint64_t ByteBuffer.readInteger<A>(endianness:as:)@<X0>(void *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Optional(0LL, a1);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __int128 v8 = (char *)&v17 - v7;
  uint64_t v9 = v2[2];
  ByteBuffer.getInteger<A>(at:endianness:as:)(v9, *v2, v2[1], v9, a1, (uint64_t)&v17 - v7);
  if (sub_100010708((uint64_t)v8, 1LL, (uint64_t)a1) == 1)
  {
    sub_10006B56C(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    uint64_t v10 = a2;
    uint64_t v11 = 1LL;
    return sub_100009654(v10, v11, 1LL, (uint64_t)a1);
  }

  uint64_t v12 = *(a1 - 1);
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, void *))(v12 + 32))(a2, v8, a1);
  uint64_t v14 = *(void *)(v12 + 64);
  BOOL v15 = __OFADD__(v9, v14);
  uint64_t v16 = v9 + v14;
  if (!v15)
  {
    v2[2] = v16;
    uint64_t v10 = a2;
    uint64_t v11 = 0LL;
    return sub_100009654(v10, v11, 1LL, (uint64_t)a1);
  }

  __break(1u);
  return result;
}

uint64_t sub_1001286F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 >= a5)
  {
    if (a1 != 0x7FFFFFFFFFFFFFFFLL)
    {
      sub_10012C094();
      __asm { BR              X10 }
    }

    __break(1u);
    JUMPOUT(0x10012886CLL);
  }

  return (a1 < a5) << 8;
}

void sub_10012888C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __dst, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  if (v26 >= v27)
  {
    if (__OFADD__(v26, 4LL))
    {
      __break(1u);
      JUMPOUT(0x100128A6CLL);
    }

    sub_10012BF8C();
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_1001288DC + *((int *)qword_100128A80 + v28)))( v29,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  a9,  __dst,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18);
  }

  else
  {
    sub_1000144B0();
  }

uint64_t sub_100128A90()
{
  if (v0 >= v1)
  {
    if (!__OFADD__(v0, 8LL))
    {
      sub_10012BF8C();
      __asm { BR              X10 }
    }

    __break(1u);
    JUMPOUT(0x100128CA8LL);
  }

  return 0LL;
}

uint64_t ByteBuffer.getInteger<A>(at:endianness:as:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, void *a5@<X6>, uint64_t a6@<X8>)
{
  if (result < a4) {
    return sub_100009654(a6, 1LL, 1LL, (uint64_t)a5);
  }
  uint64_t v7 = *(void *)(*(a5 - 1) + 64LL);
  if (v7 < 0) {
    return sub_100009654(a6, 1LL, 1LL, (uint64_t)a5);
  }
  if (__OFADD__(result, v7))
  {
    __break(1u);
  }

  else if (a5 == (void *)&type metadata for UInt8)
  {
    uint64_t v18 = __chkstk_darwin(result);
    char v24 = &type metadata for UInt8;
    uint64_t v25 = v19;
    uint64_t v26 = v18;
    uint64_t v27 = v20;
    ByteBuffer.withUnsafeBytes<A>(_:)( (uint64_t)sub_10012ACF0,  (uint64_t)v23,  a2,  a3,  v21,  (uint64_t)&type metadata for UInt8);
    return sub_100009654(a6, 0LL, 1LL, (uint64_t)&type metadata for UInt8);
  }

  else
  {
    uint64_t v10 = __chkstk_darwin(result);
    v22[2] = v11;
    uint64_t v22[3] = v12;
    v23[0] = v10;
    v23[1] = v13;
    char v24 = (void *)a2;
    uint64_t v25 = a3;
    uint64_t v26 = v14;
    LOBYTE(v27) = v15;
    uint64_t v16 = type metadata accessor for Optional(0LL, v11);
    return ByteBuffer.withUnsafeBytes<A>(_:)((uint64_t)sub_10012ACBC, (uint64_t)v22, a2, a3, v17, v16);
  }

  return result;
}

Swift::Void __swiftcall ByteBuffer.moveReaderIndex(forwardBy:)(Swift::Int forwardBy)
{
  uint64_t v2 = *(void *)(v1 + 16);
  BOOL v3 = __OFADD__(v2, forwardBy);
  Swift::Int v4 = v2 + forwardBy;
  if (v3) {
    __break(1u);
  }
  else {
    *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  }
}

Swift::String_optional __swiftcall ByteBuffer.readString(length:)(Swift::Int length)
{
  if ((length & 0x8000000000000000LL) == 0)
  {
    if (!__OFADD__(*(void *)(v1 + 16), length)) {
      __asm { BR              X10 }
    }

    __break(1u);
    JUMPOUT(0x10012906CLL);
  }

  sub_10012BF28();
  result.value._object = v3;
  result.value._uint64_t countAndFlagsBits = v2;
  return result;
}

Swift::String_optional __swiftcall ByteBuffer.getString(at:length:)(Swift::Int at, Swift::Int length)
{
  if (at >= v2 && (length & 0x8000000000000000LL) == 0)
  {
    if (!__OFADD__(at, length))
    {
      sub_10012C094();
      __asm { BR              X10 }
    }

    __break(1u);
    JUMPOUT(0x100129284LL);
  }

  sub_10012BF28();
  result.value._object = v5;
  result.value._uint64_t countAndFlagsBits = v4;
  return result;
}

Swift::OpaquePointer_optional __swiftcall ByteBuffer.readBytes(length:)(Swift::Int length)
{
  if ((length & 0x8000000000000000LL) == 0)
  {
    if (!__OFADD__(*(void *)(v1 + 16), length)) {
      __asm { BR              X10 }
    }

    __break(1u);
    JUMPOUT(0x100129480LL);
  }

  Swift::Int v2 = 0LL;
  result.value._uint64_t rawValue = v2;
  return result;
}

Swift::OpaquePointer_optional __swiftcall ByteBuffer.getBytes(at:length:)(Swift::Int at, Swift::Int length)
{
  if (at >= v3 && (length & 0x8000000000000000LL) == 0)
  {
    if (!__OFADD__(at, length)) {
      __asm { BR              X10 }
    }

    __break(1u);
    JUMPOUT(0x1001296C4LL);
  }

  uint64_t v4 = 0LL;
  result.is_nil = length;
  result.value._uint64_t rawValue = v4;
  return result;
}

uint64_t ByteBuffer.withUnsafeBytes<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _OWORD v7[2] = a6;
  void v7[3] = a1;
  void v7[4] = a2;
  return Data.withUnsafeBytes<A>(_:)(sub_10012B3DC, v7, a3, a4, a6);
}

uint64_t sub_100129718( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  int __dst = 0;
  if (a1)
  {
    memcpy(&__dst, (const void *)(a1 + a3), a4 - a3);
    LODWORD(v9) = __dst;
  }

  else
  {
    LODWORD(v9) = 0;
  }

  unsigned int v10 = bswap32(v9);
  if ((a8 & 1) != 0) {
    return v9;
  }
  else {
    return v10;
  }
}

unint64_t sub_1001297AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  unint64_t v12 = 0LL;
  if (a1)
  {
    memcpy(&v12, (const void *)(a1 + a3), a4 - a3);
    unint64_t v9 = v12;
  }

  else
  {
    unint64_t v9 = 0LL;
  }

  unint64_t v10 = bswap64(v9);
  if ((a8 & 1) != 0) {
    return v9;
  }
  else {
    return v10;
  }
}

uint64_t sub_100129838@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8)
{
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  int v26 = a5 & 1;
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a8 + 8) + 24LL) + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v9,  a7,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  uint64_t v11 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v13 = (char *)&v22 - v12;
  uint64_t v14 = *(void *)(a7 - 8);
  __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_getAssociatedConformanceWitness(v9, a7, AssociatedTypeWitness);
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100166160,  256LL,  AssociatedTypeWitness);
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v13, a7, v9);
  uint64_t v28 = v22;
  uint64_t v29 = v23;
  uint64_t v30 = v24;
  uint64_t v31 = v25;
  sub_100129DDC( (uint64_t)v16,  (uint64_t)sub_10012BE18,  (uint64_t)v27,  a7,  (uint64_t)&type metadata for Never,  (uint64_t)&type metadata for () + 8,  (uint64_t)&protocol witness table for Never,  v17);
  ByteBuffer._toEndianness<A>(value:endianness:)((uint64_t)v16, v26, v18, v19, v20, a7, a8);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, a7);
  return sub_100009654(a6, 0LL, 1LL, a7);
}

void *sub_100129A2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  Swift::OpaquePointer_optional result = sub_10012B390(a1, a2, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_10012BDFC);
  *a3 = result;
  a3[1] = v5;
  return result;
}

void ByteBuffer.writeImmutableBuffer(_:)()
{
  __asm { BR              X10 }

void sub_100129AB4()
{
}

void ByteBuffer.writeData(_:)()
{
  __asm { BR              X10 }

void sub_100129B30()
{
}

uint64_t sub_100129B78(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

Swift::Int __swiftcall ByteBuffer.writeString(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v3 = type metadata accessor for String.Encoding(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String.Encoding.utf8.getter(v5);
  uint64_t v8 = String.data(using:allowLossyConversion:)(v7, 0LL, countAndFlagsBits, object);
  unint64_t v10 = v9;
  sub_10006B56C(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  if (v10 >> 60 == 15)
  {
    uint64_t v8 = 0LL;
    unint64_t v10 = 0xC000000000000000LL;
  }

  ByteBuffer.writeData(_:)();
  Swift::Int v12 = v11;
  sub_100010A30(v8, v10);
  return v12;
}

uint64_t ByteBuffer.writeInteger<A>(_:endianness:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  char v8 = a2 & 1;
  uint64_t v9 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  Swift::Int v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *v4;
  unint64_t v13 = v4[1];
  sub_100014244(*v4, v13);
  ByteBuffer._toEndianness<A>(value:endianness:)(a1, v8, v14, v15, v16, a3, a4);
  sub_100010A30(v12, v13);
  uint64_t v21 = v4;
  sub_100129DDC( (uint64_t)v11,  (uint64_t)sub_10012B3FC,  (uint64_t)v20,  a3,  (uint64_t)&type metadata for Never,  (uint64_t)&type metadata for Int,  (uint64_t)&protocol witness table for Never,  v17);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a3);
  return v19[1];
}

uint64_t sub_100129D78@<X0>(_BYTE *a1@<X0>, _BYTE *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 + 16);
  if (v6)
  {
    Data._Representation.append(contentsOf:)(v4 + 32, v4 + 32 + v6);
    uint64_t v7 = *(void *)(v5 + 16);
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  uint64_t result = swift_release();
  *a3 = v7;
  return result;
}

uint64_t sub_100129DDC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = __chkstk_darwin(a1);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = v16(v12, v12 + *(void *)(*(void *)(v15 - 8) + 64LL), v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

Swift::Void __swiftcall ByteBuffer.moveReaderIndex(to:)(Swift::Int to)
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = to;
}

void ByteBuffer.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3, Swift::UInt a4)
{
}

uint64_t static ByteBuffer.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static Data.== infix(_:_:)(a1, a2, a4, a5) & (a3 == a6);
}

Swift::Int ByteBuffer.hashValue.getter(uint64_t a1, unint64_t a2, Swift::UInt a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_100129F64()
{
  return ByteBuffer.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

void sub_100129F70(uint64_t a1)
{
}

Swift::Int sub_100129F7C(uint64_t a1)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  Swift::UInt v4 = v1[2];
  Hasher.init(_seed:)(v6, a1);
  sub_100014244(v2, v3);
  Data.hash(into:)(v6, v2, v3);
  sub_100010A30(v2, v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t sub_100129FF0(uint64_t *a1, uint64_t *a2)
{
  return static ByteBuffer.__derived_struct_equals(_:_:)(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

uint64_t ByteBufferView._buffer.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_100014244(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

void ByteBufferView._buffer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3 = a1;
  v3[1] = a2;
  _OWORD v3[2] = a3;
  sub_1000110D4();
}

uint64_t ByteBufferView._range.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t ByteBufferView._range.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + swift_weakLoadStrong(v0 + 24) = result;
  *(void *)(v2 + 3sub_1000108B8(v0 + 2) = a2;
  return result;
}

Swift::Void (__swiftcall *ByteBufferView._range.modify())()
{
  return _CPStartNetworkSearchFeedback.redactUnused();
}

uint64_t ByteBufferView.init(buffer:range:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 < 0)
  {
    __break(1u);
    JUMPOUT(0x10012A108LL);
  }

  return ((uint64_t (*)(void))((char *)&loc_10012A0B4 + dword_10012A114[a2 >> 62]))();
}

uint64_t ByteBufferView.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *v5;
  uint64_t v8 = v5[1];
  v10[2] = a3;
  void v10[3] = a1;
  v10[4] = a2;
  return ByteBuffer.withUnsafeBytes<A>(_:)((uint64_t)sub_10012B418, (uint64_t)v10, v7, v8, a5, a3);
}

char *sub_10012A15C( char *result, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *), uint64_t a4, uint64_t a5)
{
  if (!result) {
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a5 + 24);
  uint64_t v7 = *(void *)(a5 + 32);
  BOOL v8 = __OFSUB__(v7, v6);
  uint64_t v9 = v7 - v6;
  if (v8)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }

  uint64_t result = (char *)a3(&v10, &result[v6], &result[v6 + v9]);
  if (!v5) {
    return (char *)v10;
  }
  return result;
}

uint64_t sub_10012A1B8( uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  if (result)
  {
    uint64_t v5 = *(void *)(a5 + 24);
    uint64_t v6 = *(void *)(a5 + 32);
    BOOL v7 = __OFSUB__(v6, v5);
    uint64_t v8 = v6 - v5;
    if (!v7) {
      return a3(result + v5, result + v5 + v8);
    }
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t ByteBufferView.endIndex.getter()
{
  return *(void *)(v0 + 32);
}

Swift::Int __swiftcall ByteBufferView.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1LL);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t ByteBufferView.subscript.getter(uint64_t result)
{
  if (v1[3] > result || v1[4] <= result)
  {
    __break(1u);
    goto LABEL_8;
  }

  Swift::Int result = sub_1001286F8(result, 0LL, *v1, v1[1], v1[2]);
  if ((result & 0x100) != 0) {
LABEL_8:
  }
    __break(1u);
  return result;
}

void ByteBufferView.subscript.getter(uint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) == 0) {
    __asm { BR              X11 }
  }

  __break(1u);
  JUMPOUT(0x10012A2F8LL);
}

uint64_t ByteBufferView.withContiguousStorageIfAvailable<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v10[2] = a3;
  void v10[3] = a1;
  v10[4] = a2;
  uint64_t result = ByteBufferView.withUnsafeBytes<A>(_:)((uint64_t)sub_10012B460, (uint64_t)v10, a3, a4, a5);
  if (!v6) {
    return sub_100009654(a6, 0LL, 1LL, a3);
  }
  return result;
}

Swift::Int_optional_optional __swiftcall ByteBufferView._customIndexOfEquatableElement(_:)(Swift::UInt8 a1)
{
  __asm { BR              X11 }

  return result;
}

void sub_10012A3C8(uint64_t a1@<X8>)
{
  uint64_t v1 = sub_10012BFDC(a1);
  sub_10012ADEC(v1, v2, v3, (void *(*)(uint64_t *__return_ptr, uint64_t *, char *))sub_10012B4A8);
  sub_10012C024();
}

uint64_t sub_10012A46C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = sub_1001374D8(a3, a1, a2);
  if ((v8 & 1) == 0 && (uint64_t v9 = *(void *)(a4 + 24), v10 = __OFADD__(result, v9), result += v9, v10))
  {
    __break(1u);
  }

  else
  {
    *(void *)a5 = result;
    *(_BYTE *)(a5 + 8) = v8 & 1;
  }

  return result;
}

Swift::Int_optional_optional __swiftcall ByteBufferView._customLastIndexOfEquatableElement(_:)(Swift::UInt8 a1)
{
  __asm { BR              X11 }

  return result;
}

void sub_10012A51C(uint64_t a1@<X8>)
{
  uint64_t v1 = sub_10012BFDC(a1);
  sub_10012ADEC(v1, v2, v3, (void *(*)(uint64_t *__return_ptr, uint64_t *, char *))sub_10012BE50);
  sub_10012C024();
}

uint64_t sub_10012A5C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v12 = a3;
  void v11[2] = &v12;
  uint64_t result = sub_10012AEC8((uint64_t)sub_10012BDE0, (uint64_t)v11, a1, a2);
  if ((v8 & 1) == 0 && (uint64_t v9 = *(void *)(a4 + 24), v10 = __OFADD__(result, v9), result += v9, v10))
  {
    __break(1u);
  }

  else
  {
    *(void *)a5 = result;
    *(_BYTE *)(a5 + 8) = v8 & 1;
  }

  return result;
}

uint64_t sub_10012A630(uint64_t a1, uint64_t a2)
{
  BOOL v3 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }

  if (result < *(void *)(v2 + 24) || *(void *)(v2 + 32) < result) {
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_10012A658(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = *(void *)(v3 + 32);
  if (v5 < a3 || v4 > a3 || v4 > result || v5 < result)
  {
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v9 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    return result;
  }

  if (a2 < 1)
  {
    if (v9 <= 0 && v9 > a2) {
      return 0LL;
    }
  }

  else if ((v9 & 0x8000000000000000LL) == 0 && v9 < (unint64_t)a2)
  {
    return 0LL;
  }

  BOOL v11 = __OFADD__(result, a2);
  result += a2;
  if (v11) {
    goto LABEL_29;
  }
  if (result < v4 || v5 < result) {
    goto LABEL_30;
  }
  return result;
}

uint64_t sub_10012A6D0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 24);
  uint64_t v4 = *(void *)(v2 + 32);
  if (v4 < a2 || v3 > a2 || v3 > result || v4 < result)
  {
    __break(1u);
    goto LABEL_14;
  }

  BOOL v8 = __OFSUB__(a2, result);
  uint64_t result = a2 - result;
  if (v8) {
LABEL_14:
  }
    __break(1u);
  return result;
}

uint64_t sub_10012A6FC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10012A740(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10012A740(uint64_t a1)
{
  BOOL v2 = __OFSUB__(a1, 1LL);
  uint64_t result = a1 - 1;
  if (v2)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }

  if (result < *(void *)(v1 + 24) || result >= *(void *)(v1 + 32)) {
    goto LABEL_9;
  }
  return result;
}

uint64_t *sub_10012A764(uint64_t *result)
{
  uint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1LL))
  {
    __break(1u);
  }

  else if (v2 < *(void *)(v1 + 32) && v2 >= *(void *)(v1 + 24))
  {
    *uint64_t result = v2;
    return result;
  }

  __break(1u);
  return result;
}

uint64_t sub_10012A790@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_10012A630(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10012A7D4(uint64_t *a1, uint64_t *a2)
{
  return sub_10012A6D0(*a1, *a2);
}

void sub_10012A814(uint64_t *a1@<X8>)
{
  *a1 = ByteBufferView.startIndex.getter();
  sub_100009A90();
}

void sub_10012A834(uint64_t *a1@<X8>)
{
  *a1 = ByteBufferView.endIndex.getter();
  sub_100009A90();
}

uint64_t sub_10012A854(_BYTE *a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*a2 >= v2[3] && result < v2[4])
  {
    uint64_t result = sub_1001286F8(result, 0LL, *v2, v2[1], v2[2]);
    if ((result & 0x100) == 0)
    {
      *a1 = result;
      return (uint64_t)_CPStartNetworkSearchFeedback.redactUnused();
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

double sub_10012A8B0@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(a2 + 3sub_1000108B8(v0 + 2) = v6;
  return result;
}

uint64_t sub_10012A90C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10012A94C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10012A94C()
{
  uint64_t result = *(void *)(v0 + 24);
  if (*(void *)(v0 + 32) < result) {
    __break(1u);
  }
  return result;
}

BOOL sub_10012A960()
{
  return sub_1001281A0();
}

void sub_10012A99C(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_10012A9A8(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_10012A9B4(unsigned __int8 *a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  *(void *)a3 = a2(*a1);
  *(_BYTE *)(a3 + 8) = v4;
  *(_BYTE *)(a3 + 9) = v5 & 1;
  sub_10012C0D0();
}

void sub_10012A9FC(uint64_t a1@<X8>)
{
  *(void *)a1 = sub_10012A658(v2, v3, v4);
  *(_BYTE *)(a1 + 8) = v5 & 1;
  sub_10012C0D0();
}

uint64_t sub_10012AA34(uint64_t *a1, uint64_t *a2)
{
  return sub_10012AA78(*a1, *a2, a2[1]);
}

uint64_t sub_10012AA78(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result >= a2)
  {
    BOOL v4 = __OFSUB__(result, a3);
    BOOL v3 = result - a3 < 0;
  }

  else
  {
    BOOL v4 = 0;
    BOOL v3 = 0;
  }

  if (v3 == v4) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10012AA8C(uint64_t *a1, uint64_t *a2)
{
  return sub_10012AAD0(*a1, *a2, a2[1]);
}

uint64_t sub_10012AAD0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < a2 || a3 < result) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10012AAE4(uint64_t *a1, uint64_t *a2)
{
  return sub_10012AB2C(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_10012AB2C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result < a3 || a4 < a2) {
    __break(1u);
  }
  return result;
}

void sub_10012AB40(Swift::Int *a1@<X0>, Swift::Int *a2@<X8>)
{
  *a2 = ByteBufferView.index(after:)(*a1);
  sub_100009A90();
}

void *sub_10012AB64(void *result)
{
  if (__OFADD__(*result, 1LL)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

__n128 sub_10012AB7C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 24);
  *(__n128 *)(a1 + swift_weakLoadStrong(v0 + 24) = result;
  *(void *)(a1 + 4sub_1000E3528(v0, v2, 0) = result.n128_u64[0];
  return result;
}

uint64_t sub_10012AB9C()
{
  return sub_10012ABD4();
}

uint64_t sub_10012ABD4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t result = v2 - v1;
  if (v2 < v1)
  {
    __break(1u);
    goto LABEL_5;
  }

  if (__OFSUB__(v2, v1)) {
LABEL_5:
  }
    __break(1u);
  return result;
}

void *sub_10012ABF0()
{
  return sub_10012AC18();
}

void *sub_10012AC18()
{
  uint64_t v1 = sub_10012AF60(v0);
  sub_10012B500((uint64_t)v0);
  return v1;
}

uint64_t sub_10012AC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10012AC80(a1, a2, a3, a4, a5);
}

uint64_t sub_10012AC84@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return ByteBufferView.withContiguousStorageIfAvailable<A>(_:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10012ACBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100129838( a1,  a2,  *(void *)(v3 + 32),  *(void *)(v3 + 40),  *(_BYTE *)(v3 + 72),  a3,  *(void *)(v3 + 16),  *(void *)(v3 + 24));
}

void sub_10012ACF0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 16);
  char v4 = *(_BYTE *)(a1 + *(void *)(v2 + 32));
  swift_dynamicCast(a2, &v4, &type metadata for UInt8, v3, 7LL);
  sub_10010BF78();
}

void *sub_10012AD34( uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, char *))
{
  uint64_t result = (void *)__DataStorage._bytes.getter();
  uint64_t v9 = result;
  if (result)
  {
    uint64_t result = (void *)__DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }

    uint64_t v9 = (void *)((char *)v9 + a1 - (void)result);
  }

  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t v14 = (char *)v9 + v13;
  if (v9) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0LL;
  }
  uint64_t result = a4(&v16, v9, v15);
  if (!v4) {
    return (void *)v16;
  }
  return result;
}

void *sub_10012ADEC( uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, uint64_t *, char *))
{
  uint64_t v6 = a1;
  __int16 v7 = a2;
  char v8 = BYTE2(a2);
  char v9 = BYTE3(a2);
  char v10 = BYTE4(a2);
  char v11 = BYTE5(a2);
  uint64_t result = a4(&v12, &v6, (char *)&v6 + a3);
  if (!v4) {
    return (void *)v12;
  }
  return result;
}

uint64_t sub_10012AEC8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return 0LL;
  }
  uint64_t v6 = a4 - a3;
  if (a4 == a3)
  {
    return 0LL;
  }

  else
  {
    __int16 v7 = (uint64_t (*)(char *))result;
    uint64_t v8 = a4 - a3;
    while (!__OFSUB__(v8--, 1LL))
    {
      if (v8 < 0 || v8 >= v6) {
        goto LABEL_15;
      }
      char v10 = *(_BYTE *)(a3 + v8);
      uint64_t result = v7(&v10);
      if (v4 || (result & 1) != 0 || !v8) {
        return v8;
      }
    }

    __break(1u);
LABEL_15:
    __break(1u);
  }

  return result;
}

void *sub_10012AF60(void *result)
{
  uint64_t v1 = result[3];
  uint64_t v2 = result[4];
  uint64_t v3 = v2 - v1;
  if (v2 < v1)
  {
    __break(1u);
    goto LABEL_11;
  }

  if (__OFSUB__(v2, v1))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  if (v3 <= 0)
  {
    char v5 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v4 = sub_10000941C(&qword_1001D2418);
    char v5 = (void *)swift_allocObject(v4, v3 + 32, 7LL);
    size_t v6 = j__malloc_size(v5);
    uint64_t v5[2] = v3;
    v5[3] = 2 * v6 - 64;
  }

  sub_10012BFF8();
  uint64_t v7 = sub_10012B0B4((uint64_t)v8, (uint64_t)(v5 + 4), v3);
  uint64_t result = (void *)sub_100010A30(v8[0], v8[1]);
  if (v7 == v3) {
    return v5;
  }
LABEL_12:
  __break(1u);
  return result;
}

void *sub_10012B028(const void *a1, int64_t a2)
{
  if (!a2) {
    return _swiftEmptyArrayStorage;
  }
  if (a2 <= 0)
  {
    char v5 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v4 = sub_10000941C(&qword_1001D2418);
    char v5 = (void *)swift_allocObject(v4, a2 + 32, 7LL);
    size_t v6 = j__malloc_size(v5);
    uint64_t v5[2] = a2;
    v5[3] = 2 * v6 - 64;
  }

  memcpy(v5 + 4, a1, a2);
  return v5;
}

uint64_t sub_10012B0B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  __int128 v9 = *v3;
  uint64_t v5 = *((void *)v3 + 2);
  uint64_t v7 = *((void *)v4 + 3);
  uint64_t v6 = *((void *)v4 + 4);
  if (!a2)
  {
LABEL_5:
    a3 = 0LL;
    goto LABEL_6;
  }

  if (a3)
  {
    if (a3 < 0) {
      __break(1u);
    }
    if (v6 != v7)
    {
      __int128 v10 = *v4;
      sub_10012B4C4((uint64_t)&v10, (uint64_t)v11);
      if (v6 > v7)
      {
        if (v7 >= v5)
        {
          sub_10012B4C4((uint64_t)v11, (uint64_t)v12);
          __asm { BR              X10 }
        }

        __break(1u);
        JUMPOUT(0x10012B33CLL);
      }

      __break(1u);
      JUMPOUT(0x10012B318LL);
    }

    goto LABEL_5;
  }

char *sub_10012B360@<X0>( char *a1@<X0>, uint64_t a2@<X1>, void *(*a3)(uint64_t *__return_ptr, char *, char *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t result = sub_10012A15C(a1, a2, a3, a4, a5);
  if (!v6)
  {
    *(void *)a6 = result;
    *(_BYTE *)(a6 + 8) = v9 & 1;
  }

  return result;
}

void *sub_10012B390( uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  if (a1) {
    uint64_t v4 = a2 - a1;
  }
  else {
    uint64_t v4 = 0LL;
  }
  uint64_t result = a3(&v6, a1, v4);
  if (!v3) {
    return (void *)v6;
  }
  return result;
}

uint64_t sub_10012B3DC()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_10012B3FC@<X0>(_BYTE *a1@<X0>, _BYTE *a2@<X1>, void *a3@<X8>)
{
  return sub_100129D78(a1, a2, a3);
}

uint64_t sub_10012B418(uint64_t a1, uint64_t a2)
{
  return sub_10012A1B8( a1,  a2,  *(uint64_t (**)(uint64_t, uint64_t))(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40));
}

uint64_t sub_10012B434(uint64_t a1)
{
  return a1;
}

uint64_t sub_10012B460(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(a1, v3);
}

uint64_t sub_10012B48C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10012A46C(a1, a2, *(_BYTE *)(v3 + 16), *(void *)(v3 + 24), a3);
}

char *sub_10012B4A8@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10012B360( a1,  a2,  *(void *(**)(uint64_t *__return_ptr, char *, char *))(v3 + 16),  *(void *)(v3 + 24),  *(void *)(v3 + 32),  a3);
}

uint64_t sub_10012B4C4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10012B500(uint64_t a1)
{
  return a1;
}

void *sub_10012B52C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *(*a7)(uint64_t *__return_ptr, uint64_t, void *))
{
  uint64_t v14 = sub_10012B628(0LL, a3, a5, a6);
  uint64_t result = (void *)sub_10012B628(a3, a4, a5, a6);
  if (__OFADD__(v14, result))
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v16 = result;
  if ((uint64_t)result + v14 < v14)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  if (a1) {
    uint64_t v17 = a1 + v14;
  }
  else {
    uint64_t v17 = 0LL;
  }
  uint64_t result = a7(&v18, v17, v16);
  if (!v7) {
    return (void *)v18;
  }
  return result;
}

uint64_t sub_10012B5F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!a1) {
    a2 = 0LL;
  }
  uint64_t result = static String._fromUTF8Repairing(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_10012B628(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 - a3;
  if (!a3) {
    uint64_t v4 = 0LL;
  }
  if (result < 0 || v4 < result)
  {
    __break(1u);
  }

  else if ((a2 & 0x8000000000000000LL) == 0 && v4 >= a2)
  {
    return a2 - result;
  }

  __break(1u);
  return result;
}

void *sub_10012B65C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *(*a4)(uint64_t *__return_ptr, uint64_t, void *)@<X3>, void *a5@<X8>)
{
  uint64_t result = sub_10012B52C(a1, a2, *a3, a3[1], a3[2], a3[3], a4);
  if (!v5)
  {
    *a5 = result;
    a5[1] = v8;
  }

  return result;
}

BOOL sub_10012B698(char *a1, char *a2)
{
  return static SQLiteBaseVTab.Style.__derived_enum_equals(_:_:)(*a1, *a2);
}

uint64_t sub_10012B6B8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t result = sub_100129718(a1, a2, a3, a4, a5, a6, a7, a8 & 1);
  if (!v9)
  {
    *(_DWORD *)a9 = result;
    *(_BYTE *)(a9 + 4) = BYTE4(result) & 1;
  }

  return result;
}

unint64_t sub_10012B6EC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  unint64_t result = sub_1001297AC(a1, a2, a3, a4, a5, a6, a7, a8 & 1);
  if (!v9)
  {
    *(void *)a9 = result;
    *(_BYTE *)(a9 + 8) = v12 & 1;
  }

  return result;
}

uint64_t sub_10012B720@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10012A5C0(a1, a2, *(_BYTE *)(v3 + 16), *(void *)(v3 + 24), a3);
}

unint64_t sub_10012B740()
{
  unint64_t result = qword_1001DB648;
  if (!qword_1001DB648)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Endianness, &type metadata for Endianness);
    atomic_store(result, (unint64_t *)&qword_1001DB648);
  }

  return result;
}

unint64_t sub_10012B780()
{
  unint64_t result = qword_1001DB650;
  if (!qword_1001DB650)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ByteBuffer, &type metadata for ByteBuffer);
    atomic_store(result, (unint64_t *)&qword_1001DB650);
  }

  return result;
}

unint64_t sub_10012B7C0()
{
  unint64_t result = qword_1001DB658;
  if (!qword_1001DB658)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ByteBufferView,  &type metadata for ByteBufferView);
    atomic_store(result, (unint64_t *)&qword_1001DB658);
  }

  return result;
}

uint64_t sub_10012B7FC()
{
  return sub_10012B934(&qword_1001DB660, (uint64_t)&protocol conformance descriptor for <> Range<A>);
}

unint64_t sub_10012B824()
{
  unint64_t result = qword_1001DB668;
  if (!qword_1001DB668)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ByteBufferView,  &type metadata for ByteBufferView);
    atomic_store(result, (unint64_t *)&qword_1001DB668);
  }

  return result;
}

unint64_t sub_10012B864()
{
  unint64_t result = qword_1001DB670;
  if (!qword_1001DB670)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ByteBufferView,  &type metadata for ByteBufferView);
    atomic_store(result, (unint64_t *)&qword_1001DB670);
  }

  return result;
}

uint64_t sub_10012B8A0()
{
  return sub_10012B934(&qword_1001DB678, (uint64_t)&protocol conformance descriptor for <> Range<A>);
}

unint64_t sub_10012B8C8()
{
  unint64_t result = qword_1001DB680;
  if (!qword_1001DB680)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ByteBufferView,  &type metadata for ByteBufferView);
    atomic_store(result, (unint64_t *)&qword_1001DB680);
  }

  return result;
}

void *sub_10012B904()
{
  return &protocol witness table for Int;
}

uint64_t sub_10012B910()
{
  return sub_10012B934((unint64_t *)&qword_1001DAF18, (uint64_t)&protocol conformance descriptor for <> Range<A>);
}

uint64_t sub_10012B934(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_1000094A0(&qword_1001DAF10);
    sub_10011A374();
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10012B9A4()
{
  unint64_t result = qword_1001DB688;
  if (!qword_1001DB688)
  {
    uint64_t v1 = sub_1000094A0(&qword_1001DB690);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for IndexingIterator<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001DB688);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for Endianness(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10012BA34 + 4 * byte_100167929[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10012BA68 + 4 * byte_100167924[v4]))();
}

uint64_t sub_10012BA68(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012BA70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10012BA78LL);
  }
  return result;
}

uint64_t sub_10012BA84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10012BA8CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10012BA90(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012BA98(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for Endianness()
{
}

uint64_t destroy for ByteBuffer(uint64_t a1)
{
  return sub_100010A30(*(void *)a1, *(void *)(a1 + 8));
}

void _s9SwiftAvro10ByteBufferVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100014244(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  sub_1000110D4();
}

uint64_t *assignWithCopy for ByteBuffer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100014244(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100010A30(v6, v7);
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithTake for ByteBuffer(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100010A30(v4, v5);
  a1[2] = *(void *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ByteBuffer(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xD && *(_BYTE *)(a1 + 24))
    {
      unsigned int v2 = *(_DWORD *)a1 + 12;
    }

    else
    {
      unsigned int v2 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
      if (v2 >= 0xC) {
        unsigned int v2 = -1;
      }
    }
  }

  else
  {
    unsigned int v2 = -1;
  }

  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for ByteBuffer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)unint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + swift_weakLoadStrong(v0 + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + swift_weakLoadStrong(v0 + 24) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

void type metadata accessor for ByteBuffer()
{
}

uint64_t initializeWithCopy for ByteBufferView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_100014244(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + swift_weakLoadStrong(v0 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t *assignWithCopy for ByteBufferView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100014244(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100010A30(v6, v7);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for ByteBufferView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100010A30(v4, v5);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 3sub_1000108B8(v0 + 2) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ByteBufferView(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xD && *(_BYTE *)(a1 + 40))
    {
      unsigned int v2 = *(_DWORD *)a1 + 12;
    }

    else
    {
      unsigned int v2 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
      if (v2 >= 0xC) {
        unsigned int v2 = -1;
      }
    }
  }

  else
  {
    unsigned int v2 = -1;
  }

  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for ByteBufferView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + swift_weakLoadStrong(v0 + 24) = 0u;
    *(void *)unint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 4sub_1000E3528(v0, v2, 0) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 4sub_1000E3528(v0, v2, 0) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

void type metadata accessor for ByteBufferView()
{
}

BOOL sub_10012BDE0(char *a1)
{
  return sub_10012B698(a1, *(char **)(v1 + 16));
}

void *sub_10012BDFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_10012B65C( a1,  a2,  *(uint64_t **)(v3 + 16),  *(void *(**)(uint64_t *__return_ptr, uint64_t, void *))(v3 + 24),  a3);
}

void *sub_10012BE18(void *result)
{
  uint64_t v2 = v1[2];
  if (v2) {
    uint64_t v3 = (const void *)(v2 + v1[4]);
  }
  else {
    uint64_t v3 = 0LL;
  }
  if (result && v3)
  {
    if (v2) {
      uint64_t v4 = v2 + v1[5];
    }
    else {
      uint64_t v4 = 0LL;
    }
    return memmove(result, v3, v4 - (void)v3);
  }

  return result;
}

char *sub_10012BE50@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10012B4A8(a1, a2, a3);
}

  ;
}

  ;
}

void *sub_10012BEE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_100129A2C(a1, a2, a3);
}

  ;
}

uint64_t sub_10012BF08()
{
  *(_OWORD *)(v1 - 8sub_1000E3528(v0, v2, 0) = *v0;
  return sub_10012B4C4(v1 - 80, v1 - 64);
}

  ;
}

uint64_t sub_10012BF44@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 4sub_1000E3528(v0, v2, 0) = a1 & 0x3FFFFFFFFFFFFFFFLL;
  return swift_retain(*(void *)(v1 - 48));
}

void *sub_10012BF5C( uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, char *))
{
  return sub_10012AD34(v5, v6, v4, a4);
}

void *sub_10012BF74( uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, char *))
{
  return sub_10012AD34(v4, v6, v5, a4);
}

  ;
}

  ;
}

uint64_t sub_10012BFC4()
{
  return sub_100010A30(v0, v1);
}

uint64_t sub_10012BFD0()
{
  return sub_100014244(v0, v1);
}

uint64_t sub_10012BFDC@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 4sub_1000E3528(v0, v2, 0) = a1 & 0x3FFFFFFFFFFFFFFFLL;
  return *(void *)(v1 - 48);
}

uint64_t sub_10012BFF8()
{
  return sub_10012B434(v0);
}

__n128 sub_10012C000()
{
  return *(__n128 *)v0;
}

  ;
}

  ;
}

uint64_t sub_10012C034()
{
  return swift_retain(v0);
}

uint64_t sub_10012C044()
{
  return sub_100014244(v0, v1);
}

uint64_t sub_10012C054()
{
  return sub_10012B500(v0);
}

uint64_t sub_10012C064()
{
  return sub_100010A30(v1, v0);
}

  ;
}

void *sub_10012C07C( int a1, const void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char __dst)
{
  return memcpy(&__dst, a2, v11 - v10);
}

void *sub_10012C088( uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return memcpy(&a9, a2, v10 - v9);
}

  ;
}

void sub_10012C0A8(uint64_t a1@<X8>)
{
  *(void *)(v1 - 4sub_1000E3528(v0, v2, 0) = a1 & 0x3FFFFFFFFFFFFFFFLL;
}

uint64_t sub_10012C0BC()
{
  return 0LL;
}

  ;
}

uint64_t sub_10012C0DC()
{
  return Data.append(_:)();
}

uint64_t sub_10012C0E8(uint64_t a1)
{
  return Data.hash(into:)(a1, v2, v1);
}

uint64_t sub_10012C0F4()
{
  return sub_100010A30(v0, v1);
}

uint64_t sub_10012C100()
{
  return sub_10012B4C4(v0 - 64, v0 - 48);
}

void ByteBuffer.writeAvroValue(_:)(const void *a1)
{
  __asm { BR              X10 }

uint64_t sub_10012C160( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, SwiftAvro::AvroRecord *a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43)
{
  char v44 = *(_BYTE *)(v43 - 136);
  sub_100136454( a1,  (void (*)(void, void, void, void, void, void, void, void, char))sub_100127A18);
  uint64_t v45 = sub_1001369E8();
  ByteBuffer.writeAvroPrimitive(_:)(v45, v46, v47, v44);
  uint64_t v49 = v48;
  sub_100136454( v48,  (void (*)(void, void, void, void, void, void, void, void, char))sub_10005B13C);
  return v49;
}

void *sub_10012C340(const void *a1, void *a2)
{
  return a2;
}

uint64_t sub_10012C37C(_BYTE *a1)
{
  uint64_t v3 = v2;
  *(_BYTE *)(v2 + 3sub_1000108B8(v0 + 2) = *a1;
  uint64_t v4 = v2 + 32;
  uint64_t v5 = *(void *)(v3 + 16);
  if (v5)
  {
    Data._Representation.append(contentsOf:)(v4, v4 + v5);
    uint64_t v6 = *(void *)(v3 + 16);
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  swift_release();
  return v6;
}

uint64_t sub_10012C3EC(_DWORD *a1)
{
  uint64_t v3 = v2;
  *(_DWORD *)(v2 + 3sub_1000108B8(v0 + 2) = *a1;
  uint64_t v4 = v2 + 32;
  uint64_t v5 = *(void *)(v3 + 16);
  if (v5)
  {
    Data._Representation.append(contentsOf:)(v4, v4 + v5);
    uint64_t v6 = *(void *)(v3 + 16);
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  swift_release();
  return v6;
}

uint64_t sub_10012C45C(void *a1)
{
  uint64_t v3 = v2;
  *(void *)(v2 + 3sub_1000108B8(v0 + 2) = *a1;
  uint64_t v4 = v2 + 32;
  uint64_t v5 = *(void *)(v3 + 16);
  if (v5)
  {
    Data._Representation.append(contentsOf:)(v4, v4 + v5);
    uint64_t v6 = *(void *)(v3 + 16);
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  swift_release();
  return v6;
}

void ByteBuffer.writeAvroPrimitive(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X11 }

uint64_t sub_10012C524()
{
  char v2 = v0 & 1;
  return sub_10012C37C(&v2);
}

void ByteBuffer.writeAvroArray(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100136A4C();
  __chkstk_darwin(v2);
  sub_100014428();
  uint64_t v6 = *(void *)(v1 + 16);
  if (v6)
  {
    v7._uint64_t rawValue = sub_100133910(2 * v6);
    sub_10013646C(v7);
    sub_10001450C();
    sub_10005A62C();
    __asm { BR              X8 }
  }

  sub_100136124(v3, v4, v5, (uint64_t)_swiftEmptyArrayStorage);
  v9._uint64_t rawValue = (void *)v8;
  unint64_t v11 = *(void *)(v8 + 16);
  unint64_t v10 = *(void *)(v8 + 24);
  if (v11 >= v10 >> 1)
  {
    sub_100031574(v10 > 1, v11 + 1, 1LL, v8);
    v9._uint64_t rawValue = v12;
  }

  *((void *)v9._rawValue + sub_1000108B8(v0 + 2) = v11 + 1;
  *((_BYTE *)v9._rawValue + v11 + 3sub_1000108B8(v0 + 2) = 0;
  ByteBuffer.writeBytes(_:)(v9);
  sub_1000110A8();
  sub_100009AA0();
}

void ByteBuffer.writeAvroMap(_:)()
{
  uint64_t v1 = v0;
  uint64_t v48 = sub_100136A4C();
  uint64_t v50 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  sub_100014428();
  uint64_t v49 = v5;
  uint64_t v51 = v1;
  uint64_t v6 = *(void *)(v1 + 16);
  if (!v6) {
    goto LABEL_41;
  }
  v7._uint64_t rawValue = sub_100133910(2 * v6);
  Swift::Int v8 = sub_100136C7C(v7);
  sub_1000325E4();
  uint64_t v46 = v1 + 64;
  uint64_t v9 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & *(void *)(v1 + 64);
  int64_t v47 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain(v51);
  if (v11)
  {
    unint64_t v12 = __clz(__rbit64(v11));
    goto LABEL_22;
  }

  if (v47 <= 1) {
    goto LABEL_36;
  }
  unint64_t v13 = *(void *)(v46 + 8);
  uint64_t v14 = 1LL;
  if (v13) {
    goto LABEL_21;
  }
  sub_100136970();
  if (v15 == v16) {
    goto LABEL_36;
  }
  sub_1001368FC();
  if (v13) {
    goto LABEL_21;
  }
  sub_100136970();
  if (v15 == v16) {
    goto LABEL_36;
  }
  sub_1001368FC();
  if (v13)
  {
LABEL_21:
    unint64_t v12 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_22:
    uint64_t v20 = (uint64_t *)(*(void *)(v51 + 48) + 16 * v12);
    uint64_t v22 = *v20;
    unint64_t v21 = v20[1];
    sub_100136B60();
    unint64_t v24 = v23[1];
    uint64_t v52 = *v23;
    uint64_t v25 = v23[2];
    uint64_t v26 = v23[4];
    uint64_t v54 = v23[5];
    uint64_t v27 = v23[6];
    unint64_t v53 = v23[3];
    if ((v21 & 0x1000000000000000LL) != 0)
    {
      Swift::Int v28 = String.UTF8View._foreignCount()();
    }

    else if ((v21 & 0x2000000000000000LL) != 0)
    {
      Swift::Int v28 = HIBYTE(v21) & 0xF;
    }

    else
    {
      Swift::Int v28 = v22 & 0xFFFFFFFFFFFFLL;
    }

    uint64_t v29 = (2 * v28) ^ (v28 >> 63);
    sub_10005A624();
    sub_1001368BC();
    sub_100135CE8(v52, v24, v25, v53, v26, v54, v27, v30, v45);
    sub_100136724();
    sub_100136254();
    if (v31) {
      Data._Representation.append(contentsOf:)(v29 + 32, v29 + 32 + v31);
    }
    uint64_t v32 = sub_1000145F0();
    static String.Encoding.utf8.getter(v32);
    uint64_t v33 = String.data(using:allowLossyConversion:)(v49, 0LL, v22, v21);
    unint64_t v35 = v34;
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v48);
    if (v35 >> 60 == 15) {
      uint64_t v36 = 0LL;
    }
    else {
      uint64_t v36 = v33;
    }
    if (v35 >> 60 == 15) {
      unint64_t v37 = 0xC000000000000000LL;
    }
    else {
      unint64_t v37 = v35;
    }
    Data.append(_:)(v36, v37);
    __asm { BR              X9 }
  }

  int64_t v18 = v17 + 3;
  if (v18 >= v47) {
    goto LABEL_36;
  }
  unint64_t v13 = *(void *)(v46 + 8 * v18);
  if (v13)
  {
    uint64_t v14 = v18;
    goto LABEL_21;
  }

  while (1)
  {
    if (__OFADD__(v18, 1LL))
    {
      __break(1u);
      JUMPOUT(0x10012EB58LL);
    }

    sub_100136970();
    if (v15 == v16) {
      break;
    }
    sub_1001368FC();
    int64_t v18 = v19 + 1;
    if (v13) {
      goto LABEL_21;
    }
  }

Swift::Int __swiftcall ByteBuffer.writeAvroRecord(_:)(SwiftAvro::AvroRecord *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_100136A4C();
  __chkstk_darwin(v3);
  sub_100014428();
  uint64_t v4 = *(void *)(v2 + 56);
  if (*(void *)(v4 + 16))
  {
    sub_10005A62C();
    sub_100135484(0LL, 1, v4);
    __asm { BR              X8 }
  }

  sub_100009AA0();
  return result;
}

Swift::Int ByteBuffer.writeAvroUnion(_:)(uint64_t a1)
{
  v2._uint64_t rawValue = sub_100133910((2LL * *(void *)(a1 + 80)) ^ (*(uint64_t *)(a1 + 80) >> 63));
  Swift::Int v3 = sub_100136588(v2);
  sub_1000110A8();
  sub_100136498(v7, (const void *)(a1 + 8));
  ByteBuffer.writeAvroValue(_:)(v7);
  BOOL v5 = __OFADD__(v3, v4);
  Swift::Int result = v3 + v4;
  if (v5) {
    __break(1u);
  }
  return result;
}

Swift::Int sub_1001335CC(uint64_t a1)
{
  uint64_t v1 = sub_100133910((2 * a1) ^ (a1 >> 63));
  Swift::Int v2 = ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v1);
  swift_bridgeObjectRelease();
  return v2;
}

Swift::Int __swiftcall ByteBuffer.writeAvroString(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if (((uint64_t)a1._object & 0x1000000000000000LL) != 0)
  {
    uint64_t v3 = String.UTF8View._foreignCount()();
  }

  else if (((uint64_t)a1._object & 0x2000000000000000LL) != 0)
  {
    uint64_t v3 = HIBYTE(a1._object) & 0xF;
  }

  else
  {
    uint64_t v3 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }

  v4._uint64_t rawValue = sub_1001360AC(v3);
  Swift::Int v5 = sub_10013646C(v4);
  sub_10001450C();
  v6._uint64_t countAndFlagsBits = countAndFlagsBits;
  v6._object = object;
  Swift::Int v7 = ByteBuffer.writeString(_:)(v6);
  BOOL v8 = __OFADD__(v5, v7);
  Swift::Int result = v5 + v7;
  if (v8) {
    __break(1u);
  }
  else {
    sub_100019F1C();
  }
  return result;
}

Swift::Int __swiftcall ByteBuffer.writeAvroLong(_:)(Swift::Int64 a1)
{
  v1._uint64_t rawValue = sub_1001360AC(a1);
  Swift::Int v2 = sub_100136C7C(v1);
  sub_1000325E4();
  return v2;
}

Swift::Int __swiftcall ByteBuffer.writeAvroBool(_:)(Swift::Bool a1)
{
  Swift::Bool v2 = a1;
  sub_10012C37C(&v2);
  sub_100136640();
  return result;
}

Swift::Int __swiftcall ByteBuffer.writeAvroInt(_:)(Swift::Int32 a1)
{
  v1._uint64_t rawValue = sub_1001337EC((2 * a1) ^ (a1 >> 31));
  Swift::Int v2 = sub_100136C7C(v1);
  sub_1000325E4();
  return v2;
}

Swift::Int __swiftcall ByteBuffer.writeAvroFloat(_:)(Swift::Float a1)
{
  Swift::Float v2 = a1;
  sub_10012C3EC(&v2);
  sub_100136640();
  return result;
}

Swift::Int __swiftcall ByteBuffer.writeAvroDouble(_:)(Swift::Double a1)
{
  Swift::Double v2 = a1;
  sub_10012C45C(&v2);
  sub_100136640();
  return result;
}

void *sub_1001337EC(unsigned int a1)
{
  LOBYTE(sub_100121F54((uint64_t)va, v1) = a1 & 0x7F;
  if (a1 >= 0x80)
  {
    unsigned int v6 = a1;
    sub_100031574(0LL, 1LL, 1LL, (uint64_t)_swiftEmptyArrayStorage);
    Swift::Double v2 = v7;
    unint64_t v8 = v7[2];
    do
    {
      unint64_t v9 = v2[3];
      if (v8 >= v9 >> 1)
      {
        sub_100031574(v9 > 1, v8 + 1, 1LL, (uint64_t)v2);
        Swift::Double v2 = v12;
      }

      char v10 = v1 | 0x80;
      int v1 = (v6 >> 7) & 0x7F;
      unsigned int v11 = v6 >> 14;
      v6 >>= 7;
      v2[2] = v8 + 1;
      *((_BYTE *)v2 + v8++ + 3sub_1000108B8(v0 + 2) = v10;
    }

    while (v11);
  }

  else
  {
    Swift::Double v2 = _swiftEmptyArrayStorage;
  }

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
  {
    sub_100031574(0LL, v2[2] + 1LL, 1LL, (uint64_t)v2);
    Swift::Double v2 = v13;
  }

  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1)
  {
    sub_100031574(v3 > 1, v4 + 1, 1LL, (uint64_t)v2);
    Swift::Double v2 = v14;
  }

  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 3sub_1000108B8(v0 + 2) = v1;
  return v2;
}

void *sub_100133910(unint64_t a1)
{
  LOBYTE(sub_100121F54((uint64_t)va, v1) = a1 & 0x7F;
  if (a1 >= 0x80)
  {
    unint64_t v6 = a1;
    sub_100031574(0LL, 1LL, 1LL, (uint64_t)_swiftEmptyArrayStorage);
    Swift::Double v2 = v7;
    unint64_t v8 = v7[2];
    do
    {
      unint64_t v9 = v2[3];
      if (v8 >= v9 >> 1)
      {
        sub_100031574(v9 > 1, v8 + 1, 1LL, (uint64_t)v2);
        Swift::Double v2 = v12;
      }

      char v10 = v1 | 0x80;
      uint64_t v1 = (v6 >> 7) & 0x7F;
      unint64_t v11 = v6 >> 14;
      v6 >>= 7;
      v2[2] = v8 + 1;
      *((_BYTE *)v2 + v8++ + 3sub_1000108B8(v0 + 2) = v10;
    }

    while (v11);
  }

  else
  {
    Swift::Double v2 = _swiftEmptyArrayStorage;
  }

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
  {
    sub_100031574(0LL, v2[2] + 1LL, 1LL, (uint64_t)v2);
    Swift::Double v2 = v13;
  }

  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1)
  {
    sub_100031574(v3 > 1, v4 + 1, 1LL, (uint64_t)v2);
    Swift::Double v2 = v14;
  }

  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 3sub_1000108B8(v0 + 2) = v1;
  return v2;
}

uint64_t sub_100133A34( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, char))
{
  char v4 = *(_BYTE *)(a1 + 64);
  a2( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  v4);
  return a1;
}

Swift::Int __swiftcall ByteBuffer.writeAvroBytes(_:)(Swift::OpaquePointer a1)
{
  v2._uint64_t rawValue = sub_100133910(2LL * *((void *)a1._rawValue + 2));
  Swift::Int v3 = sub_100136588(v2);
  sub_1000110A8();
  Swift::Int v4 = ByteBuffer.writeBytes(_:)(a1);
  BOOL v5 = __OFADD__(v3, v4);
  Swift::Int result = v3 + v4;
  if (v5) {
    __break(1u);
  }
  else {
    sub_1000110D4();
  }
  return result;
}

void ByteBuffer.writeAvroBytes(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_1001284EC(a1, a2);
  Swift::Int v3 = sub_1001360AC(v2);
  Swift::Int v4 = ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v3);
  sub_10001460C();
  sub_100019F90();
  ByteBuffer.writeImmutableBuffer(_:)();
  if (__OFADD__(v4, v5)) {
    __break(1u);
  }
  else {
    sub_100019F1C();
  }
}

void ByteBuffer.writeAvroBytes(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = Data.count.getter(a1, a2);
  v3._uint64_t rawValue = sub_1001360AC(v2);
  Swift::Int v4 = sub_10013646C(v3);
  sub_10001450C();
  ByteBuffer.writeData(_:)();
  if (__OFADD__(v4, v5)) {
    __break(1u);
  }
  else {
    sub_100019F1C();
  }
}

uint64_t sub_100133B70()
{
  if (v16 != v17)
  {
    sub_100136C5C();
    if (v16 >= v17)
    {
      __break(1u);
    }

    else if (v16 >= v15)
    {
      __asm { BR              X8 }
    }

    __break(1u);
    JUMPOUT(0x100133E98LL);
  }

  uint64_t v1 = sub_100136C5C();
  sub_1001368F4(v1, v2, v3, v4, v5, v6, v7, v8, v10, v11, v12, v13);
  return 0LL;
}

uint64_t sub_100133ED8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    int v2 = 0;
    uint64_t v3 = a1 + 31;
    do
    {
      uint64_t v4 = *(_BYTE *)(v3 + v1) & 0x7F | (v2 << 7);
      int v2 = *(_BYTE *)(v3 + v1--) & 0x7F | (v2 << 7);
    }

    while (v1);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  swift_bridgeObjectRelease(a1);
  return v4;
}

unint64_t sub_100133F24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = 0LL;
    do
    {
      unint64_t v3 = *(_BYTE *)(a1 + 31 + v1) & 0x7F | (v2 << 7);
      unint64_t v2 = v3;
      --v1;
    }

    while (v1);
  }

  else
  {
    unint64_t v3 = 0LL;
  }

  swift_bridgeObjectRelease(a1);
  return v3;
}

void ByteBuffer.readAvroValue(_:)(uint64_t a1)
{
  __asm { BR              X10 }

void sub_100133FAC(uint64_t a1)
{
  *(_OWORD *)uint64_t v1 = v2;
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *(_OWORD *)(v1 + 3sub_1000108B8(v0 + 2) = v4;
  *(_OWORD *)(v1 + 48) = v5;
  *(_BYTE *)(v1 + 64) = v6;
}

void ByteBuffer.readAvroPrimitive(_:)(char a1)
{
  __asm { BR              X11 }

void sub_1001340BC()
{
  uint64_t v2 = v1[2];
  __int16 v3 = sub_1001286F8(v2, 0LL, *v1, v1[1], v2);
  if ((v3 & 0x100) != 0)
  {
    BOOL v5 = 0LL;
    char v4 = -1;
  }

  else
  {
    if (__OFADD__(v2, 1LL))
    {
      __break(1u);
      JUMPOUT(0x10013425CLL);
    }

    char v4 = 0;
    v1[2] = v2 + 1;
    BOOL v5 = v3 != 0;
  }

  *(void *)uint64_t v0 = v5;
  *(void *)(v0 + 8) = 0LL;
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v0 + swift_weakLoadStrong(v0 + 24) = 0LL;
  *(_OWORD *)(v0 + 3sub_1000108B8(v0 + 2) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_BYTE *)(v0 + 64) = v4;
  sub_1000110D4();
}

void ByteBuffer.readAvroArray(_:)()
{
  uint64_t v43 = v4;
  uint64_t v6 = v5;
  uint64_t v42 = v7;
  uint64_t v44 = v8;
  if (!sub_100133B70()) {
    goto LABEL_12;
  }
  sub_100136344();
  if (v10)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    uint64_t v23 = 0LL;
    unint64_t v21 = 0LL;
    sub_100136B28();
    char v22 = -1;
    uint64_t v24 = v44;
    goto LABEL_13;
  }

  sub_100133F24(v9);
  sub_1001367F0();
  unint64_t v2 = v12 ^ (v11 >> 1);
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    JUMPOUT(0x1001347C0LL);
  }

  if (v2)
  {
    swift_bridgeObjectRetain(v6);
    sub_10000C4AC();
    __asm { BR              X8 }
  }

  sub_10000C4AC();
  sub_10005A624();
  uint64_t v13 = sub_100135440();
  if ((v14 & 1) != 0 || v13)
  {
    sub_100105ADC(v13, v14, v15, v16, v17, v18, v19, v20, v35, v37, v6);
    uint64_t v27 = swift_bridgeObjectRelease();
    sub_100136B6C(v27, v28, v29, v30, v31, v32, v33, v34, v36, v38, v39, v40, v41, v42, v43 & 0x1FFFFFFFFFFFFFFFLL);
    goto LABEL_12;
  }

  sub_100136B28();
  unint64_t v21 = _swiftEmptyArrayStorage;
  char v22 = 1;
  uint64_t v23 = v6;
  uint64_t v24 = v44;
  uint64_t v25 = v42;
  uint64_t v26 = v43;
LABEL_13:
  *(void *)uint64_t v24 = v25;
  *(void *)(v24 + 8) = v23;
  *(void *)(v24 + swift_weakDestroy(v0 + 16) = v26;
  *(void *)(v24 + swift_weakLoadStrong(v0 + 24) = v21;
  *(void *)(v24 + 3sub_1000108B8(v0 + 2) = v0;
  *(void *)(v24 + 4sub_1000E3528(v0, v2, 0) = v3;
  *(void *)(v24 + 48) = v2;
  *(void *)(v24 + 56) = v1;
  *(_BYTE *)(v24 + 64) = v22;
  sub_100009AA0();
}

void ByteBuffer.readAvroMap(_:)()
{
  uint64_t v1 = v0;
  uint64_t v22 = v2;
  uint64_t v21 = v3;
  uint64_t v5 = v4;
  if (!sub_100133B70()) {
    goto LABEL_15;
  }
  sub_100136344();
  if (v7)
  {
LABEL_14:
    swift_bridgeObjectRelease();
LABEL_15:
    sub_100136958();
    goto LABEL_16;
  }

  sub_100133F24(v6);
  sub_1001367F0();
  unint64_t v10 = v9 ^ (v8 >> 1);
  swift_retain();
  swift_bridgeObjectRetain(v22);
  uint64_t v11 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for AvroValue,  &protocol witness table for String);
  if ((v10 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    JUMPOUT(0x100134BCCLL);
  }

  uint64_t v23 = v11;
  if (v10)
  {
    if (sub_100133B70())
    {
      sub_100136344();
      if (v7)
      {
        swift_bridgeObjectRelease();
      }

      else
      {
        unint64_t v13 = sub_100133F24(v12);
        sub_1001367FC(v13);
        if (v14) {
          __asm { BR              X8 }
        }
      }
    }

    goto LABEL_13;
  }

  uint64_t v15 = sub_100135440();
  if ((v16 & 1) != 0 || v15)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_14;
  }

  char v17 = 2;
  uint64_t v18 = v22;
  uint64_t v19 = v21;
  uint64_t v20 = v23;
LABEL_16:
  *(void *)uint64_t v5 = v19;
  *(void *)(v5 + 8) = v18;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v1;
  *(void *)(v5 + swift_weakLoadStrong(v0 + 24) = v20;
  *(_OWORD *)(v5 + 3sub_1000108B8(v0 + 2) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_BYTE *)(v5 + 64) = v17;
  sub_100009AA0();
}

void ByteBuffer.readAvroRecord(_:)()
{
  uint64_t v1 = v0;
  uint64_t v11 = v2;
  sub_10005B5EC(v0);
  AvroRecord.init(schema:)(&v12, v1);
  object = v12.schema.type._object;
  uint64_t countAndFlagsBits = v12.schema.name._countAndFlagsBits;
  uint64_t v4 = v12.schema.name._object;
  uint64_t v7 = v12.schema.namespace.value._countAndFlagsBits;
  uint64_t v6 = v12.schema.namespace.value._object;
  uint64_t rawValue = v12.schema.fields._rawValue;
  unint64_t v8 = v12.fields._rawValue;
  unint64_t v10 = v1->fields._rawValue;
  unint64_t v13 = v10;
  if (v10[2])
  {
    sub_10005A624();
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0) {
      sub_10013B64C();
    }
    __asm { BR              X9 }
  }

  *(void *)uint64_t v11 = v12.schema.type._countAndFlagsBits;
  *(void *)(v11 + 8) = object;
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = countAndFlagsBits;
  *(void *)(v11 + swift_weakLoadStrong(v0 + 24) = v4;
  *(void *)(v11 + 3sub_1000108B8(v0 + 2) = v7;
  *(void *)(v11 + 4sub_1000E3528(v0, v2, 0) = v6;
  *(void *)(v11 + 48) = rawValue;
  *(void *)(v11 + 56) = v8;
  *(_BYTE *)(v11 + 64) = 3;
  sub_100009AA0();
}

void ByteBuffer.readAvroUnion(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!sub_100133B70()) {
    goto LABEL_5;
  }
  sub_100136344();
  if (v10)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v13 = 0LL;
    unint64_t v11 = 0LL;
    a1 = 0LL;
    unint64_t v2 = 0LL;
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    char v12 = -1;
    goto LABEL_6;
  }

  sub_100133F24(v9);
  uint64_t v13 = 0LL;
  sub_1001367F0();
  char v12 = -1;
  if (((v15 ^ (v14 >> 1)) & 0x8000000000000000LL) != 0)
  {
    sub_100136624();
  }

  else
  {
    sub_100136624();
    if (v16 < v18)
    {
      uint64_t v40 = v17;
      uint64_t v41 = v16;
      uint64_t v19 = *(void *)(v17 + 8 * v16 + 32);
      uint64_t v42 = v19 & 0x1FFFFFFFFFFFFFFFLL;
      swift_retain();
      ByteBuffer.readAvroValue(_:)(v43, v19);
      uint64_t v13 = v43[0];
      unint64_t v20 = v43[1];
      a1 = v43[2];
      unint64_t v2 = v43[3];
      uint64_t v3 = v43[4];
      uint64_t v4 = v43[5];
      uint64_t v5 = v43[6];
      uint64_t v6 = v43[7];
      char v12 = v44;
      uint64_t v21 = sub_1001359B4((uint64_t)v43, (uint64_t)v55);
      if (v55[64] == 255)
      {
        sub_100136A30(v21, v22, v23, v24, v25, v26, v27, v28, v39, v40, v41, v42);
      }

      else
      {
        sub_100136498(v56, v55);
        swift_bridgeObjectRetain(v40);
        sub_10013773C(v29, (uint64_t)v56, v41, (uint64_t)v45);
        sub_100136A30(v30, v31, v32, v33, v34, v35, v36, v37, v39, v40, v41, v42);
        uint64_t v13 = v46;
        unint64_t v20 = v47;
        a1 = v48;
        unint64_t v2 = v49;
        uint64_t v3 = v50;
        uint64_t v4 = v51;
        uint64_t v5 = v52;
        uint64_t v6 = v53;
        char v12 = v54;
        sub_100135F98(v46, v47, v48, v49, v50, v51, v52, v38, v54);
        sub_100127BB8((uint64_t)v45);
      }

      unint64_t v11 = v20;
    }
  }

uint64_t sub_100135440()
{
  uint64_t result = sub_100133B70();
  if (result)
  {
    sub_100136344();
    if (v2)
    {
      swift_bridgeObjectRelease();
      return 0LL;
    }

    else
    {
      unint64_t v3 = sub_100133F24(v1);
      return -(uint64_t)(v3 & 1) ^ (v3 >> 1);
    }
  }

  return result;
}

unint64_t sub_100135484(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (*(void *)(a3 + 16) > result)
    {
      return result;
    }

    __break(1u);
  }

  return result;
}

void sub_1001354A4()
{
  if ((v3 & 1) != 0)
  {
    sub_1000325D4();
    if (v5 != v6)
    {
      sub_100032614();
      if (v5)
      {
        __break(1u);
        return;
      }

      sub_1000325C4();
    }
  }

  else
  {
    int64_t v4 = v2;
  }

  int64_t v7 = *((void *)v0 + 2);
  if (v4 <= v7) {
    int64_t v8 = *((void *)v0 + 2);
  }
  else {
    int64_t v8 = v4;
  }
  if (v8)
  {
    uint64_t v9 = sub_10000941C(&qword_1001DB6A8);
    char v10 = (char *)sub_100009ACC(v9, v8 + 32);
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + sub_1000108B8(v0 + 2) = v7;
    *((void *)v10 + swift_weakDestroy(v0 + 3) = 2 * v11 - 64;
  }

  else
  {
    char v10 = (char *)_swiftEmptyArrayStorage;
  }

  char v12 = v10 + 32;
  uint64_t v13 = v0 + 32;
  if ((v1 & 1) != 0)
  {
    if (v10 != v0 || &v13[v7] <= v12) {
      sub_100136AA0(v12, v13);
    }
    *((void *)v0 + sub_1000108B8(v0 + 2) = 0LL;
  }

  else
  {
    memcpy(v12, v13, v7);
  }

  sub_1000325E4();
  sub_1000110D4();
}

void sub_100135560()
{
  if ((v3 & 1) != 0)
  {
    sub_1000325D4();
    if (v5 != v6)
    {
      sub_100032614();
      if (v5)
      {
        __break(1u);
        return;
      }

      sub_1000325C4();
    }
  }

  else
  {
    int64_t v4 = v2;
  }

  uint64_t v7 = v0[2];
  else {
    int64_t v8 = v4;
  }
  if (v8)
  {
    uint64_t v9 = sub_10000941C(&qword_1001DB6B0);
    char v10 = (void *)sub_100009ACC(v9, 24LL * (void)v8 + 32);
    sub_100136B3C(v10);
  }

  else
  {
    int64_t v8 = _swiftEmptyArrayStorage;
  }

  size_t v11 = (char *)(v8 + 4);
  char v12 = (char *)(v0 + 4);
  if ((v1 & 1) != 0)
  {
    if (v8 != v0 || &v12[24 * v7] <= v11) {
      memmove(v11, v12, 24 * v7);
    }
    v0[2] = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v11);
  }

  sub_1000325E4();
  sub_100019F1C();
}

void sub_100135628()
{
  if ((v3 & 1) != 0)
  {
    sub_1000325D4();
    if (v5 != v6)
    {
      sub_100032614();
      if (v5)
      {
        __break(1u);
        return;
      }

      sub_1000325C4();
    }
  }

  else
  {
    int64_t v4 = v2;
  }

  uint64_t v7 = v0[2];
  else {
    int64_t v8 = v4;
  }
  if (v8)
  {
    uint64_t v9 = sub_10000941C(&qword_1001DB6C0);
    char v10 = (void *)sub_100009ACC(v9, 72LL * (void)v8 + 32);
    sub_100136B3C(v10);
  }

  else
  {
    int64_t v8 = _swiftEmptyArrayStorage;
  }

  size_t v11 = (char *)(v8 + 4);
  char v12 = (char *)(v0 + 4);
  if ((v1 & 1) != 0)
  {
    if (v8 != v0 || &v12[72 * v7] <= v11) {
      memmove(v11, v12, 72 * v7);
    }
    v0[2] = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v11);
  }

  sub_1000325E4();
  sub_100019F1C();
}

char *sub_1001356F0(char *__src, uint64_t a2, char *__dst)
{
  if (__dst != __src || &__src[72 * a2] <= __dst) {
    return (char *)memmove(__dst, __src, 72 * a2);
  }
  return __src;
}

void sub_100135720()
{
}

void sub_10013572C()
{
}

void sub_100135738()
{
}

void sub_100135744(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *char v1 = v3;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native) {
    *char v1 = a1(isUniquelyReferenced_nonNull_native, *(void *)(v3 + 16) + 1LL, 1LL, v3);
  }
  sub_1000110D4();
}

uint64_t sub_100135790(uint64_t a1)
{
  return sub_100034180(a1, (uint64_t (*)(BOOL))sub_1001354A4);
}

uint64_t sub_10013579C(uint64_t a1)
{
  return sub_100034180(a1, (uint64_t (*)(BOOL))sub_100135560);
}

uint64_t sub_1001357A8(uint64_t a1)
{
  return sub_100034180(a1, (uint64_t (*)(BOOL))sub_100135628);
}

uint64_t sub_1001357B4(void *a1, uint64_t a2, uint64_t a3)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v9 = *v3;
  void *v3 = 0x8000000000000000LL;
  sub_100135830(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  void *v3 = v9;
  return swift_bridgeObjectRelease();
}

void sub_100135830(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = (void **)v4;
  char v10 = (void *)*v4;
  unint64_t v11 = sub_10000EC64(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v11;
  char v17 = v12;
  sub_10000941C(&qword_1001DB6B8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_10000EC64(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v16 = v18;
LABEL_5:
  unint64_t v20 = *v5;
  if ((v17 & 1) != 0)
  {
    sub_100135A90((uint64_t)a1, v20[7] + 72 * v16);
  }

  else
  {
    sub_100141304(v16, a2, a3, a1, v20);
    swift_bridgeObjectRetain(a3);
  }

void sub_100135944(_BYTE *a1, _BYTE *a2)
{
  if (!a1) {
    goto LABEL_8;
  }
  int64_t v4 = a2 - a1;
  if (a2 == a1) {
    goto LABEL_8;
  }
  sub_1000C9F30(a2 - a1, 0LL);
  if (a2 && a1 < a2)
  {
    if ((v4 & 0x8000000000000000LL) == 0)
    {
      sub_100136AA0((void *)(v5 + 32), a1);
LABEL_8:
      sub_1000110D4();
      return;
    }

    __break(1u);
  }

  __break(1u);
}

uint64_t sub_1001359B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001DB698);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001359FC( uint64_t result, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255) {
    return sub_10005B13C(result, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t sub_100135A14( uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255) {
    return sub_100127A18(result, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  return result;
}

void *sub_100135A2C(void *a1)
{
  return a1;
}

unint64_t sub_100135A54()
{
  unint64_t result = qword_1001DB6A0;
  if (!qword_1001DB6A0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for InvalidFieldError,  &type metadata for InvalidFieldError);
    atomic_store(result, (unint64_t *)&qword_1001DB6A0);
  }

  return result;
}

uint64_t sub_100135A90(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100135ACC()
{
  return sub_100034180(*(void *)(*(void *)(v0 + 496) + 16LL), v1);
}

void sub_100135AE4()
{
}

uint64_t sub_100135AF0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(v10, v9, v16, v15, v14, v13, v12, v11, a9);
}

uint64_t sub_100135B20( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(a1, a2, a3, v12, v11, v13, v10, v9, a9);
}

uint64_t sub_100135B38( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18( *(void *)(v12 - 480),  v9,  v11,  *(void *)(v12 - 472),  *(void *)(v12 - 464),  *(void *)(v12 - 456),  *(void *)(v12 - 448),  v10,  a9);
}

uint64_t sub_100135B88( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18( *(void *)(v13 - 320),  v11,  v12,  *(void *)(v13 - 312),  *(void *)(v13 - 344),  v9,  *(void *)(v13 - 336),  v10,  a9);
}

uint64_t sub_100135BD4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(a1, v15, v13, v9, v10, v11, v12, v14, a9);
}

uint64_t sub_100135BF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(a1, v14, v12, v9, v10, v11, v15, v13, a9);
}

uint64_t sub_100135C14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(v9[7], v9[21], v9[4], v9[36], v9[8], v9[9], v9[10], v9[13], a9);
}

uint64_t sub_100135C5C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(v10, v12, v9[49], v11, v9[55], v9[54], v9[53], v9[52], a9);
}

uint64_t sub_100135C8C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(v14, v15, v10, v16, v13, v12, v11, v9, a9);
}

uint64_t sub_100135CB0( uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(a1, a2, a3, a4, a5, a6, a7, v9, a9);
}

uint64_t sub_100135CB8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(v11, v10, v12, v9[43], v9[26], v9[29], v9[33], v9[36], a9);
}

uint64_t sub_100135CE0( uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(a1, a2, a3, a4, a5, a6, a7, v9, a9);
}

uint64_t sub_100135CE8( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(a1, a2, a3, a4, a5, a6, a7, v9, a9);
}

uint64_t sub_100135CF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Data._Representation.append(contentsOf:)(a1, a1 + a2);
}

uint64_t sub_100135CFC( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(v13, v12, v11, a4, v9, v10, v15, v14, a9);
}

uint64_t sub_100135D2C( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(*(void *)(v9 + 352), v15, v14, a4, v11, v12, v13, v10, a9);
}

uint64_t sub_100135D58( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(v12, v14, v11, v15, v10, *(void *)(v9 + 432), v13, *(void *)(v9 + 280), a9);
}

uint64_t sub_100135D84( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(v9, v10, v14, v12, v11, v15, v13, v16, a9);
}

uint64_t sub_100135DB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(v10, v9, v14, v12, v11, v16, v13, v15, a9);
}

uint64_t sub_100135DDC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(v9, v15, v10, v16, v13, v12, v11, v14, a9);
}

uint64_t sub_100135E08( uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(a1, a2, a3, a4, a5, a6, a7, v9, a9);
}

uint64_t sub_100135E10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(v12, v13, v15, v11, *(void *)(v9 + 400), *(void *)(v9 + 448), v10, v14, a9);
}

uint64_t sub_100135E38( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(v11, v16, v13, v15, v10, v12, v14, v9, a9);
}

uint64_t sub_100135E60( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(a1, a2, v12, v14, v11, v9, v10, v13, a9);
}

void sub_100135E7C()
{
}

uint64_t sub_100135E88( uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(a1, a2, a3, a4, a5, a6, a7, v9, a9);
}

uint64_t sub_100135E90( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(a1, a2, a3, a4, a5, a6, v10, v9, a9);
}

uint64_t sub_100135EA0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(v9[44], v9[27], v9[25], v9[43], v9[26], v9[29], v9[33], v9[36], a9);
}

uint64_t sub_100135EE0( uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(a1, a2, a3, a4, a5, a6, a7, v9, a9);
}

uint64_t sub_100135EE8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(v11, v10, v13, *(void *)(v9 + 440), v14, v12, *(void *)(v9 + 432), *(void *)(v9 + 424), a9);
}

uint64_t sub_100135F28()
{
  return sub_100034180(*(void *)(*(void *)(v0 + 496) + 16LL), v1);
}

Swift::Int sub_100135F40()
{
  v2._uint64_t rawValue = *(void **)(v0 + 496);
  *((void *)v2._rawValue + sub_1000108B8(v0 + 2) = v1 + 1;
  *((_BYTE *)v2._rawValue + v1 + 3sub_1000108B8(v0 + 2) = 0;
  return ByteBuffer.writeBytes(_:)(v2);
}

uint64_t sub_100135F60( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(a1, a2, a3, a4, a5, a6, v9, v10, a9);
}

  ;
}

uint64_t sub_100135F90( uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(a1, a2, a3, a4, a5, a6, a7, v9, a9);
}

uint64_t sub_100135F98( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(a1, a2, a3, a4, a5, a6, a7, v9, a9);
}

uint64_t sub_100135FA0(uint64_t a1)
{
  return sub_100034180(a1, v1);
}

uint64_t sub_100135FA8( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(a1, a2, a3, a4, a5, a6, a7, v9, a9);
}

uint64_t sub_100135FB0( uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(a1, a2, a3, a4, a5, a6, a7, v9, a9);
}

uint64_t sub_100135FB8( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(a1, a2, a3, a4, a5, a6, a7, v9, a9);
}

  ;
}

uint64_t sub_100135FD0( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(v11, a2, a3, a4, v10, v13, v12, v9, a9);
}

uint64_t sub_100136000( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(v9[46], v11, v12, v10, v13, v14, v9[40], v9[35], a9);
}

Swift::Int sub_100136030(Swift::OpaquePointer a1)
{
  return ByteBuffer.writeBytes(_:)(a1);
}

  ;
}

void sub_100136048()
{
  *(void *)(v1 + 256) = v0;
  *(void *)(v1 + 2swift_weakLoadStrong(v0 + 24) = v2;
}

uint64_t sub_100136068( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  v10[45] = v12;
  v10[46] = v11;
  v10[44] = v9;
  return sub_100127A18(v9, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_100136098( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(a1, a2, a3, a4, a5, a6, a7, v9, a9);
}

  ;
}

void *sub_1001360AC(uint64_t a1)
{
  return sub_100133910((2 * a1) ^ (a1 >> 63));
}

  ;
}

uint64_t sub_1001360C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(v13, v14, v12, *(void *)(v9 + 304), v10, *(void *)(v9 + 312), v11, *(void *)(v9 + 352), a9);
}

uint64_t sub_1001360F0( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(v10, a2, v11, v13, v9[51], v9[52], v12, v9[55], a9);
}

uint64_t sub_10013611C(uint64_t a1, uint64_t a2)
{
  return Data._Representation.append(contentsOf:)(a1, a2);
}

void sub_100136124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_100136134( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35)
{
  return sub_10005B13C(v37, v39, v38, v35, a27, a35, a31, a29, v36);
}

uint64_t sub_10013615C()
{
  return *(void *)(v0 + 328);
}

uint64_t sub_10013618C()
{
  uint64_t v3 = *(void *)(v0 + 496);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v1 + 1;
  *(_BYTE *)(v3 + 32 + sub_100121F54((uint64_t)va, v1) = v2;
  return Data._Representation.append(contentsOf:)(v3 + 32, v3 + 32 + v1 + 1);
}

uint64_t sub_1001361B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18( v11,  *(void *)(v9 + 240),  v13,  v12,  v10,  *(void *)(v9 + 296),  *(void *)(v9 + 312),  *(void *)(v9 + 304),  a9);
}

uint64_t sub_1001361D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(v10, v15, v12, v9, v14, v13, v11, v16, a9);
}

uint64_t sub_1001361F8()
{
  return sub_10012BE64(v0);
}

uint64_t sub_100136200()
{
  return sub_10005B218(v0, v2, v1, 6);
}

void sub_10013623C()
{
}

void sub_100136248()
{
}

  ;
}

uint64_t sub_100136260()
{
  return *(void *)(v0 + 328);
}

uint64_t sub_100136288( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18( *(void *)(v9 + 424),  *(void *)(v9 + 448),  v13,  v12,  v10,  v11,  *(void *)(v9 + 432),  *(void *)(v9 + 440),  a9);
}

uint64_t sub_1001362A8()
{
  return v0;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10013632C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Data._Representation.append(contentsOf:)(a1, a1 + a2);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10013635C( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(a1, a2, a3, a4, a5, a6, a7, *(void *)(v9 + 424), a9);
}

uint64_t sub_100136368()
{
  return sub_100010A30(v1, v0);
}

  ;
}

uint64_t sub_100136380( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(a1, a2, a3, v10, v9[40], v9[41], v9[42], v9[43], a9);
}

uint64_t sub_100136390( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(a1, a2, a3, a4, a5, v9[37], v9[39], v9[38], a9);
}

uint64_t sub_10013639C()
{
  return v0;
}

uint64_t sub_1001363C0( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(a1, a2, a3, a4, a5, a6, a7, v9, a9);
}

void sub_1001363CC()
{
  uint64_t v3 = *(void *)(v0 + 496);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v1 + 1;
  *(_BYTE *)(v3 + v1 + 3sub_1000108B8(v0 + 2) = v2;
}

uint64_t sub_1001363F0()
{
  return swift_retain(*(void *)(v0 + 32) & 0x1FFFFFFFFFFFFFFFLL);
}

  ;
}

void *sub_100136430()
{
  return sub_100133910(*(void *)(v0 + 448));
}

void *sub_10013643C()
{
  return sub_100133910(v0);
}

uint64_t sub_100136448()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 392));
}

uint64_t sub_100136454( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, char))
{
  return sub_100133A34(v2, a2);
}

uint64_t sub_10013645C()
{
  return swift_release(v0);
}

Swift::Int sub_10013646C(Swift::OpaquePointer a1)
{
  return ByteBuffer.writeBytes(_:)(a1);
}

  ;
}

  ;
}

uint64_t sub_100136490(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_100127AE0(a1, a2, a3, 6);
}

void *sub_100136498(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x41uLL);
}

void sub_1001364A0(unint64_t a1@<X8>)
{
}

uint64_t sub_1001364B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  return swift_retain(*(void *)(a21 + 32) & 0x1FFFFFFFFFFFFFFFLL);
}

void sub_1001364D0()
{
  uint64_t v3 = *(void *)(v0 + 496);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v1 + 1;
  *(_BYTE *)(v3 + v1 + 3sub_1000108B8(v0 + 2) = v2;
}

  ;
}

uint64_t sub_100136510()
{
  return v0;
}

uint64_t sub_100136530()
{
  return v0;
}

uint64_t sub_100136550()
{
  return v0;
}

uint64_t sub_100136570( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_retain(*(void *)(a15 + 32) & 0x1FFFFFFFFFFFFFFFLL);
}

Swift::Int sub_100136588(Swift::OpaquePointer a1)
{
  return ByteBuffer.writeBytes(_:)(a1);
}

uint64_t sub_100136590@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 496);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  return v2 + 32;
}

uint64_t sub_1001365A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 496);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = a1;
  uint64_t result = v3 + 32;
  *(_BYTE *)(v3 + 32 + vsub_1000108B8(v0 + 2) = 0;
  return result;
}

uint64_t sub_1001365B4()
{
  return v0;
}

uint64_t sub_1001365D4()
{
  return sub_100034180(*(void *)(*(void *)(v0 + 496) + 16LL), v1);
}

uint64_t sub_1001365EC()
{
  return sub_100034180(*(void *)(*(void *)(v0 + 496) + 16LL), v1);
}

size_t sub_100136604(const void *a1)
{
  return j__malloc_size(a1);
}

  ;
}

  ;
}

Swift::Int sub_10013664C()
{
  return sub_1001335CC(0LL);
}

uint64_t sub_100136658()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 504));
}

uint64_t sub_100136664()
{
  return v0;
}

uint64_t sub_100136680()
{
  return v0;
}

Swift::Int sub_10013669C(SwiftAvro::AvroRecord *a1)
{
  return ByteBuffer.writeAvroRecord(_:)(a1);
}

void sub_1001366A4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1001366B0()
{
  return v0;
}

uint64_t sub_1001366BC()
{
  return *(void *)(v0 + 328);
}

uint64_t sub_1001366D8(uint64_t a1)
{
  return swift_retain(*(void *)(a1 + 32) & 0x1FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1001366EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33)
{
  return swift_release(a33 & 0x1FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1001366F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  return swift_bridgeObjectRelease(a37);
}

void *sub_100136700(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

uint64_t sub_100136708()
{
  return v0;
}

void *sub_100136724()
{
  return sub_100133910(v0);
}

Swift::Int sub_10013672C(SwiftAvro::AvroRecord *a1)
{
  return ByteBuffer.writeAvroRecord(_:)(a1);
}

Swift::Int sub_100136734()
{
  *((void *)v0._rawValue + sub_1000108B8(v0 + 2) = v1;
  *((_BYTE *)v0._rawValue + v2 + 3sub_1000108B8(v0 + 2) = 0;
  return ByteBuffer.writeBytes(_:)(v0);
}

uint64_t sub_100136748()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 224));
}

  ;
}

uint64_t sub_100136770(uint64_t a1)
{
  return sub_100014244(v1, v4);
}

  ;
}

void sub_1001367AC()
{
  *(void *)(v0 + 43sub_1000108B8(v0 + 2) = v1;
}

uint64_t sub_1001367BC()
{
  return swift_release(v0 & 0x1FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1001367C4(uint64_t result)
{
  *(void *)(v1 - 52sub_1000E3528(v0, v2, 0) = result;
  return result;
}

uint64_t sub_1001367D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Data._Representation.append(contentsOf:)(a1, a1 + a2);
}

  ;
}

  ;
}

uint64_t sub_1001367FC(unint64_t a1)
{
  return ByteBuffer.readString(length:)(-(uint64_t)(a1 & 1) ^ (a1 >> 1)).value._countAndFlagsBits;
}

uint64_t sub_10013680C()
{
  return v0;
}

void sub_100136824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[15] = a3;
  v5[26] = v6;
  v5[27] = v4;
  v5[25] = v7;
  v5[32] = v3;
}

uint64_t sub_10013683C(uint64_t a1)
{
  return sub_100010A30(a1, v1);
}

uint64_t sub_100136844( uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(a1, a2, a3, a4, a5, a6, a7, v9, a9);
}

Swift::Int sub_10013684C(uint64_t a1)
{
  return ByteBuffer.writeAvroUnion(_:)(a1);
}

uint64_t sub_100136854()
{
  return ByteBuffer.writeAvroArray(_:)();
}

Swift::Int sub_10013685C(Swift::OpaquePointer a1)
{
  return ByteBuffer.writeBytes(_:)(a1);
}

void sub_100136864(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_10013686C()
{
  return ByteBuffer.writeAvroMap(_:)();
}

uint64_t sub_100136874()
{
  return *(void *)(v0 + 16);
}

  ;
}

uint64_t sub_10013689C()
{
  return v0;
}

uint64_t sub_1001368AC()
{
  return v0;
}

  ;
}

uint64_t sub_1001368CC()
{
  return v0;
}

  ;
}

uint64_t sub_1001368F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  return sub_10012B500((uint64_t)va);
}

  ;
}

uint64_t sub_10013690C()
{
  return v0;
}

uint64_t sub_100136918()
{
  return swift_release(v0 & 0x1FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100136920()
{
  return v0;
}

uint64_t sub_100136938()
{
  return Data.append(_:)();
}

uint64_t sub_100136940()
{
  return ByteBuffer.writeAvroArray(_:)();
}

void sub_100136948(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_100136950()
{
  return ByteBuffer.writeAvroMap(_:)();
}

  ;
}

  ;
}

  ;
}

void sub_10013698C()
{
  uint64_t v3 = *(void *)(v0 + 496);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v2 + 1;
  *(_BYTE *)(v3 + v2 + 3sub_1000108B8(v0 + 2) = v1;
}

  ;
}

  ;
}

uint64_t sub_1001369C0()
{
  return *(void *)(v0 + 328);
}

Swift::Int sub_1001369D8()
{
  return sub_1001335CC(*(void *)(v0 + 368));
}

uint64_t sub_1001369E8()
{
  return v0;
}

uint64_t sub_1001369F8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 272));
}

uint64_t sub_100136A00(uint64_t result)
{
  *(void *)(v1 + 7sub_1000108B8(v0 + 2) = result;
  return result;
}

void sub_100136A10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[36] = a8;
  v8[33] = a7;
  v8[29] = a6;
  v8[43] = a4;
}

uint64_t sub_100136A24( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(a1, a2, a3, a4, a5, a6, a7, v9, a9);
}

uint64_t sub_100136A30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return swift_release(a12);
}

uint64_t sub_100136A38@<X0>(uint64_t a1@<X8>)
{
  return Data._Representation.append(contentsOf:)(v1 + 32, v1 + 32 + a1);
}

void *sub_100136A44()
{
  return sub_100133910(0LL);
}

uint64_t sub_100136A4C()
{
  return type metadata accessor for String.Encoding(0LL);
}

void *sub_100136A54()
{
  return sub_100135A2C((void *)(v0 - 240));
}

uint64_t sub_100136A5C()
{
  return sub_10012BE64(v0);
}

  ;
}

uint64_t sub_100136A78()
{
  return swift_release(v0 & 0x1FFFFFFFFFFFFFFFLL);
}

  ;
}

  ;
}

void *sub_100136AA0(void *a1, const void *a2)
{
  return memmove(a1, a2, v2);
}

uint64_t sub_100136AA8(uint64_t result)
{
  *(void *)(v1 + 36sub_1000E3528(v0, v2, 0) = result;
  return result;
}

void sub_100136AB4()
{
  *(_BYTE *)(v1 - 104) = v0;
  ByteBuffer.writeAvroValue(_:)((const void *)(v1 - 168));
}

uint64_t sub_100136AC0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return swift_bridgeObjectRelease(a17);
}

uint64_t sub_100136AC8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 384));
}

uint64_t sub_100136AD0()
{
  return v0;
}

  ;
}

uint64_t sub_100136AF0()
{
  return v0;
}

uint64_t sub_100136B04()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 280));
}

uint64_t sub_100136B0C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return swift_bridgeObjectRelease(a16);
}

  ;
}

  ;
}

size_t sub_100136B3C(void *a1)
{
  size_t result = j__malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

  ;
}

uint64_t sub_100136B6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_release(a15);
}

uint64_t sub_100136B74()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 104));
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100136BB0@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100136C04()
{
  return *(void *)(v0 + 328);
}

uint64_t sub_100136C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))ByteBuffer.writeAvroArray(_:))(a1, a2, a3, v3);
}

uint64_t sub_100136C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))ByteBuffer.writeAvroMap(_:))(a1, a2, a3, v3);
}

void *sub_100136C30()
{
  return sub_100133910(v0);
}

  ;
}

uint64_t sub_100136C48()
{
  return v0;
}

uint64_t sub_100136C5C()
{
  return sub_100014244(v0, v1);
}

uint64_t sub_100136C68()
{
  return v0;
}

Swift::Int sub_100136C7C(Swift::OpaquePointer a1)
{
  return ByteBuffer.writeBytes(_:)(a1);
}

  ;
}

uint64_t sub_100136C98()
{
  return *(void *)(v0 + 328);
}

  ;
}

  ;
}

void AvroValue.schema.getter(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_100136D14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, __int128 a27)
{
  _BYTE v30[24] = a21;
  *(void *)&v30[16] = a20;
  *(void *)&v30[8] = a19;
  *(void *)uint64_t v30 = a18;
  a27 = *(_OWORD *)v30;
  *(__int128 *)((char *)&a27 + 9) = *(_OWORD *)&v30[9];
  sub_1001371C8(&a27, (_OWORD *)(v27 - 88));
  uint64_t v28 = sub_1001371C8((__int128 *)(v27 - 88), (_OWORD *)(v27 - 144));
  return ((uint64_t (*)(uint64_t))((char *)sub_100136D5C + 4 * byte_100167C35[*(unsigned __int8 *)(v27 - 120)]))((uint64_t)v28);
}

uint64_t sub_100136D5C(uint64_t a1)
{
  uint64_t result = sub_100009ACC((uint64_t)&unk_1001BDDE8, 17LL);
  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
  return result;
}

  ;
}

void AvroValue.init(_:)(uint64_t a1@<X8>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X3>)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(a1 + swift_weakLoadStrong(v0 + 24) = a5;
  *(_OWORD *)(a1 + 3sub_1000108B8(v0 + 2) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  sub_10013DF20(a1);
}

{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(a1 + swift_weakLoadStrong(v0 + 24) = a5;
  *(_OWORD *)(a1 + 3sub_1000108B8(v0 + 2) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  sub_10013DF20(a1);
}

uint64_t AvroMap.init(schema:)()
{
  return sub_10013DE90();
}

void __swiftcall AvroRecord.init(schema:)( SwiftAvro::AvroRecord *__return_ptr retstr, SwiftAvro::AvroRecordSchema *schema)
{
  uint64_t countAndFlagsBits = schema->type._countAndFlagsBits;
  object = schema->type._object;
  uint64_t v5 = schema->name._countAndFlagsBits;
  uint64_t v6 = schema->name._object;
  Swift::String_optional v7 = schema->namespace;
  uint64_t rawValue = (uint64_t *)schema->fields._rawValue;
  uint64_t v21 = rawValue;
  int64_t v9 = rawValue[2];
  if (v9)
  {
    unint64_t v15 = v6;
    uint64_t v16 = v5;
    char v17 = object;
    uint64_t v18 = countAndFlagsBits;
    Swift::String_optional v19 = v7;
    sub_10005B5EC(schema);
    sub_100137538(&v21);
    sub_10013B674(0LL, v9, 0);
    uint64_t v11 = rawValue + 6;
    do
    {
      uint64_t v12 = *v11;
      swift_retain(*v11 & 0x1FFFFFFFFFFFFFFFLL);
      sub_100047294();
      sub_100121338(v12);
      swift_release();
      sub_100009B3C();
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        sub_10013B674((char *)(v13 > 1), v14 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      sub_100136498(&_swiftEmptyArrayStorage[9 * v14 + 4], v20);
      v11 += 3;
      --v9;
    }

    while (v9);
    sub_100125804(schema);
    sub_100135A2C(&v21);
    Swift::String_optional v7 = v19;
    object = v17;
    uint64_t countAndFlagsBits = v18;
    uint64_t v6 = v15;
    uint64_t v5 = v16;
  }

  retstr->schema.type._uint64_t countAndFlagsBits = countAndFlagsBits;
  retstr->schema.type._object = object;
  retstr->schema.name._uint64_t countAndFlagsBits = v5;
  retstr->schema.name._object = v6;
  retstr->schema.namespace = v7;
  retstr->schema.fields._uint64_t rawValue = rawValue;
  retstr->fields._uint64_t rawValue = _swiftEmptyArrayStorage;
}

void AvroValue.init(_:)(uint64_t a1@<X8>, uint64_t a2@<X0>)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)(a1 + swift_weakLoadStrong(v0 + 24) = v3;
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 3sub_1000108B8(v0 + 2) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  sub_10013DF20(a1);
}

void AvroValue.init(_:)(const void *a1)
{
  uint64_t v2 = sub_100009ACC((uint64_t)&unk_1001BDE10, 104LL);
  sub_100136700((void *)(v2 + 16), a1);
  sub_10013DBE4();
  sub_1000110D4();
}

uint64_t sub_100137134()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100137158()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_10013719C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

_OWORD *sub_1001371C8(__int128 *a1, _OWORD *a2)
{
  __int128 v2 = *a1;
  *(_OWORD *)((char *)a2 + 9) = *(__int128 *)((char *)a1 + 9);
  *a2 = v2;
  return a2;
}

uint64_t sub_1001371E0(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = *((void *)a1 + 2);
  *(_OWORD *)a2 = v2;
  return a2;
}

uint64_t sub_1001371F8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

void *AvroValue.null.unsafeMutableAddressor()
{
  return &static AvroValue.null;
}

double AvroValue.init(_:)@<D0>(void *a1@<X8>, unsigned int a2@<W0>)
{
  *a1 = a2;
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = 1LL;
  return sub_10013DA68((uint64_t)a1);
}

double static AvroValue.long(_:)@<D0>(void *a1@<X8>, uint64_t a2@<X0>)
{
  *a1 = a2;
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = 2LL;
  return sub_10013DA68((uint64_t)a1);
}

double AvroValue.init(_:)@<D0>(void *a1@<X8>, unsigned int a2@<S0>)
{
  *a1 = a2;
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = 3LL;
  return sub_10013DA68((uint64_t)a1);
}

double static AvroValue.double(_:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(a1 + swift_weakLoadStrong(v0 + 24) = 4LL;
  return sub_10013DA68(a1);
}

uint64_t static AvroValue.string(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(_OWORD *)(a3 + swift_weakDestroy(v0 + 16) = xmmword_100168670;
  *(_OWORD *)(a3 + 3sub_1000108B8(v0 + 2) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_BYTE *)(a3 + 64) = 0;
  return swift_bridgeObjectRetain(a2);
}

uint64_t static AvroValue.bytes(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(a2 + swift_weakLoadStrong(v0 + 24) = 6LL;
  *(_OWORD *)(a2 + 3sub_1000108B8(v0 + 2) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_BYTE *)(a2 + 64) = 0;
  return swift_bridgeObjectRetain(a1);
}

void AvroRecord.set(_:forField:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100010DFC();
  unint64_t v8 = sub_100137578(v7, a2, a3);
  char v10 = v9;
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
    unint64_t v12 = sub_100135A54();
    sub_100010EA0((uint64_t)&type metadata for InvalidFieldError, v12);
    *unint64_t v13 = a2;
    v13[1] = a3;
    uint64_t v14 = sub_1000145E8();
    swift_willThrow(v14);
    goto LABEL_7;
  }

  uint64_t v11 = *(void *)(v3 + 56);
  if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) != 0)
  {
    if ((v8 & 0x8000000000000000LL) == 0) {
      goto LABEL_4;
    }
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  sub_10013B64C();
  uint64_t v11 = v15;
  if ((v8 & 0x8000000000000000LL) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if (v8 < *(void *)(v11 + 16))
  {
    AvroValue.update(_:)(a1);
    *(void *)(v3 + 5sub_10005B218(v0, v2, v1, 6) = v11;
LABEL_7:
    sub_10002716C();
    return;
  }

__n128 static AvroValue.record(_:)@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v7 = a1[1];
  __int128 v8 = *a1;
  __n128 v6 = (__n128)a1[2];
  uint64_t v3 = *((void *)a1 + 6);
  uint64_t v4 = *((void *)a1 + 7);
  sub_10013B6D8(a1);
  *(_OWORD *)a2 = v8;
  *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v7;
  __n128 result = v6;
  *(__n128 *)(a2 + 3sub_1000108B8(v0 + 2) = v6;
  *(void *)(a2 + 48) = v3;
  *(void *)(a2 + 5sub_10005B218(v0, v2, v1, 6) = v4;
  *(_BYTE *)(a2 + 64) = 3;
  return result;
}

uint64_t sub_1001373FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a2 + 32);
  swift_retain();
  _s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(v4);
  LOBYTE(v4) = v5;
  swift_release();
  if ((v4 & 1) != 0) {
    return 0LL;
  }
  uint64_t v6 = 0LL;
  while (v2 - 1 != v6)
  {
    uint64_t v7 = *(void *)(a2 + 40 + 8 * v6);
    swift_retain();
    _s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(v7);
    LOBYTE(v7) = v8;
    swift_release();
    ++v6;
    if ((v7 & 1) != 0) {
      return v6;
    }
  }

  return 0LL;
}

uint64_t sub_1001374D8(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0LL;
  uint64_t v5 = a3 - a2;
  if (a2)
  {
    while (1)
    {
      if (v5 == result) {
        return 0LL;
      }
      if (v5 <= result) {
        break;
      }
      ++result;
    }

    __break(1u);
  }

  return result;
}

void *sub_100137538(void *a1)
{
  return a1;
}

BOOL AvroMap.isEmpty.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return *(void *)(a4 + 16) == 0LL;
}

uint64_t AvroMap.count.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return *(void *)(a4 + 16);
}

uint64_t sub_100137578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = (uint64_t *)(a1 + 40);
    while (1)
    {
      uint64_t v8 = *(v7 - 1);
      uint64_t v9 = *v7;
      BOOL v10 = v8 == a2 && v9 == a3;
      if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, a2, a3, 0LL) & 1) != 0) {
        break;
      }
      v7 += 3;
      if (v4 == ++v6) {
        goto LABEL_9;
      }
    }
  }

  else
  {
LABEL_9:
    uint64_t v6 = 0LL;
  }

  swift_bridgeObjectRelease(a3);
  return v6;
}

uint64_t static AvroValue.array(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1001376FC(a1, a2, a3, a4, 1, a5);
}

uint64_t AvroMap.set(_:forKey:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(v3 + 16);
  swift_retain();
  sub_10012121C((uint64_t)a1, v7);
  char v9 = v8;
  swift_release();
  if ((v9 & 1) != 0)
  {
    sub_10005A62C();
    sub_10013D9C0( (uint64_t)a1,  (void (*)(void, void, void, void, void, void, void, void, char))sub_100127A18);
    sub_1001357B4(a1, a2, a3);
    return sub_10001460C();
  }

  else
  {
    uint64_t v11 = swift_retain();
    AvroValue.schema.getter(v11);
    uint64_t v13 = v12;
    unint64_t v14 = sub_10013B73C();
    sub_100010EA0((uint64_t)&type metadata for SchemaMismatchError, v14);
    *uint64_t v15 = v7;
    v15[1] = v13;
    return sub_1000C5DB8();
  }

uint64_t static AvroValue.map(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1001376FC(a1, a2, a3, a4, 2, a5);
}

uint64_t sub_1001376FC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(a6 + swift_weakLoadStrong(v0 + 24) = a4;
  *(_OWORD *)(a6 + 3sub_1000108B8(v0 + 2) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_BYTE *)(a6 + 64) = a5;
  MessageSchemaModel.properties.getter(a1, a2);
  sub_10000C4AC();
  return swift_bridgeObjectRetain(a4);
}

void sub_10013773C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a3 < 0 || *(void *)(a1 + 16) <= a3)
  {
    _StringGuts.grow(_:)(134LL);
    sub_10013DE30(0xD00000000000003CLL, (uint64_t)"The index for avro union is out of bounds, schema length is ");
    sub_10001460C();
    v8._uint64_t countAndFlagsBits = sub_10013DE20();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._object = (void *)0x8000000100173E40LL;
    v9._uint64_t countAndFlagsBits = 0xD000000000000020LL;
    String.append(_:)(v9);
    v10._uint64_t countAndFlagsBits = sub_10013DE20();
    String.append(_:)(v10);
    sub_10001450C();
    sub_10013DE30(0xD000000000000026LL, (uint64_t)". Double check the index and try again");
    unint64_t v11 = sub_10013DA04();
    sub_100010EA0((uint64_t)&type metadata for InternalError, v11);
    *uint64_t v12 = 0LL;
    v12[1] = 0xE000000000000000LL;
    sub_1000C5DB8();
    sub_10013D9C0( a2,  (void (*)(void, void, void, void, void, void, void, void, char))sub_10005B13C);
  }

  else
  {
    char v5 = *(_BYTE *)(a2 + 64);
    *(void *)a4 = a1;
    __int128 v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a4 + 8) = *(_OWORD *)a2;
    *(_OWORD *)(a4 + swift_weakLoadStrong(v0 + 24) = v6;
    __int128 v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a4 + 4sub_1000E3528(v0, v2, 0) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a4 + 5sub_10005B218(v0, v2, v1, 6) = v7;
    *(_BYTE *)(a4 + 7sub_1000108B8(v0 + 2) = v5;
    *(void *)(a4 + 8sub_1000E3528(v0, v2, 0) = a3;
  }

void SchemaMismatchError.expected.getter()
{
}

void SchemaMismatchError.expected.setter(uint64_t a1)
{
  *uint64_t v1 = a1;
  sub_100009A90();
}

void SchemaMismatchError.actual.getter()
{
}

void SchemaMismatchError.actual.setter(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
  sub_100009A90();
}

void SchemaMismatchError.description.getter()
{
  v10._uint64_t countAndFlagsBits = 0x6F67207475622027LL;
  v10._object = (void *)0xEB00000000272074LL;
  String.append(_:)(v10);
  sub_10004EC38();
  AvroSchema.description.getter(v0);
  sub_10013DB64(v14);
  sub_1000110B0();
  sub_1000325E4();
  sub_10013DE40();
  sub_1000D1B70();
}

uint64_t SchemaMismatchError.hash(into:)()
{
  return swift_release();
}

void static SchemaMismatchError.__derived_struct_equals(_:_:)(uint64_t a1)
{
  if ((v1 & 1) != 0)
  {
    uint64_t v2 = sub_10005A790();
    _s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(v2);
  }

void SchemaMismatchError.hashValue.getter(uint64_t a1, uint64_t a2)
{
}

void sub_100137AD0()
{
}

uint64_t sub_100137AD8()
{
  return SchemaMismatchError.hash(into:)();
}

Swift::Int sub_100137AE0(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  swift_retain();
  sub_100121F54((uint64_t)v5, v2);
  swift_release();
  swift_retain();
  sub_100121F54((uint64_t)v5, v3);
  swift_release();
  return Hasher._finalize()();
}

void sub_100137B5C()
{
}

void sub_100137B64(uint64_t *a1)
{
}

void InvalidFieldError.description.getter()
{
  v10._uint64_t countAndFlagsBits = v1;
  v10._object = v0;
  String.append(_:)(v10);
  sub_1000325E4();
  sub_10013DE40();
  sub_1000D1B70();
}

void sub_100137BF0()
{
}

uint64_t InternalError.description.getter(uint64_t a1, uint64_t a2)
{
  return sub_10005A790();
}

uint64_t _s9SwiftAvro17InvalidFieldErrorV4hash4intoys6HasherVz_tF_0()
{
  uint64_t v1 = sub_10013DE90();
  String.hash(into:)(v1, v2, v3);
  return swift_bridgeObjectRelease();
}

uint64_t _s9SwiftAvro17InvalidFieldErrorV23__derived_struct_equalsySbAC_ACtFZ_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
  }
}

void _s9SwiftAvro17InvalidFieldErrorV9hashValueSivg_0(uint64_t a1, uint64_t a2)
{
}

void sub_100137CB8(uint64_t a1)
{
  uint64_t v1 = sub_10013DD54(a1, &v2);
  sub_10013DD54((uint64_t)v1, v3);
  __asm { BR              X10 }

void sub_100137D14()
{
}

void sub_100137EA4(const void *a1)
{
  __asm { BR              X10 }

uint64_t sub_100137EF4()
{
  if (v2)
  {
    char v8 = 0;
  }

  else
  {
    sub_10013D9C0( v0,  (void (*)(void, void, void, void, void, void, void, void, char))sub_100127A18);
    sub_10013D9C0( v1,  (void (*)(void, void, void, void, void, void, void, void, char))sub_100127A18);
    uint64_t v3 = sub_10013DFC4();
    _s9SwiftAvro0B9PrimitiveV23__derived_struct_equalsySbAC_ACtFZ_0(v3, v4, v5, v6);
    char v8 = v7;
    sub_10013D9C0( v1,  (void (*)(void, void, void, void, void, void, void, void, char))sub_10005B13C);
    sub_10013D9C0( v0,  (void (*)(void, void, void, void, void, void, void, void, char))sub_10005B13C);
  }

  return v8 & 1;
}

void sub_100138320(uint64_t a1)
{
  uint64_t v1 = sub_10013DD54(a1, &v3);
  int v2 = sub_10003DDD8((uint64_t)v1);
  sub_10013DD54((uint64_t)v2, v4);
  __asm { BR              X10 }

Swift::Int sub_100138380()
{
  return sub_10007AFDC();
}

uint64_t sub_100138548()
{
  return InvalidFieldError.hashValue.getter(*v0, v0[1]);
}

uint64_t sub_100138550(uint64_t a1)
{
  return InvalidFieldError.hash(into:)(a1, *v1, v1[1]);
}

void sub_100138558(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  sub_10007B008(a1, a2);
  sub_100047294();
  sub_1001280D8((uint64_t)v4, v3);
  sub_100009B3C();
  sub_10007AFDC();
  sub_1000C5E6C();
}

uint64_t sub_100138594(uint64_t *a1, uint64_t *a2)
{
  return static InvalidFieldError.__derived_struct_equals(_:_:)(*a1, a1[1], *a2, a2[1]);
}

void sub_1001385A8()
{
  unint64_t v1 = sub_10012C340(v0, v2);
  sub_100138320((uint64_t)v1);
}

void sub_1001385DC(uint64_t a1)
{
}

void sub_100138610(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 *)(v1 + 64);
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }

Swift::Int sub_100138664( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t __dst, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42)
{
  return Hasher._finalize()();
}

uint64_t sub_1001388A4(const void *a1, const void *a2)
{
  return v3 & 1;
}

void AvroValue.hash(into:)()
{
  __asm { BR              X10 }

void sub_100138948()
{
  Swift::UInt v0 = sub_10013DF0C();
  sub_10013DDD4(v0);
  sub_10013DAB8( v1,  (void (*)(void, void, void, void, void, void, void, void, char))sub_100127A18);
  sub_10013DDAC();
  sub_10013DAB8( v2,  (void (*)(void, void, void, void, void, void, void, void, char))sub_10005B13C);
}

void static AvroValue.__derived_struct_equals(_:_:)( const void *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void AvroValue.hashValue.getter()
{
  __asm { BR              X10 }

Swift::Int sub_100138B78()
{
  return Hasher._finalize()();
}

void sub_100138D6C()
{
}

void sub_100138DA4()
{
}

Swift::Int sub_100138DDC(uint64_t a1)
{
  return Hasher._finalize()();
}

void sub_100138E30(const void *a1, const void *a2)
{
}

uint64_t static AvroPrimitive.BOOLean(_:)(char a1)
{
  return a1 & 1;
}

uint64_t static AvroPrimitive.int(_:)(uint64_t result)
{
  return result;
}

  ;
}

  ;
}

  ;
}

void AvroValue.init(_:)(uint64_t a1@<X8>, uint64_t a2@<X0>, uint64_t a3@<X1>)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = xmmword_100168670;
  *(_OWORD *)(a1 + 3sub_1000108B8(v0 + 2) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  sub_10013DB00(a1);
}

{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3 | 0x2000000000000000LL;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = xmmword_100168680;
  *(_OWORD *)(a1 + 3sub_1000108B8(v0 + 2) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  sub_10013DB00(a1);
}

uint64_t static AvroPrimitive.string(_:)(uint64_t a1, uint64_t a2)
{
  return sub_10005A790();
}

double AvroValue.init(_:)@<D0>(void *a1@<X8>, uint64_t a2@<X0>)
{
  *a1 = a2;
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = 6LL;
  return sub_10013DA68((uint64_t)a1);
}

uint64_t static AvroPrimitive.bytes(_:)(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

double AvroValue.init(_:)@<D0>(void *a1@<X8>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>)
{
  *a1 = a2;
  a1[1] = a3 | 0x1000000000000000LL;
  a1[2] = a4;
  a1[3] = 6LL;
  return sub_10013DA68((uint64_t)a1);
}

uint64_t static AvroPrimitive.bytes(_:)(uint64_t a1, unint64_t a2)
{
  return a1;
}

{
  sub_100014244(a1, a2);
  return sub_10006B688();
}

void static AvroValue.bytes(_:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a2 | 0x1000000000000000LL;
  sub_100014244(a1, a2);
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = v7;
  *(void *)(a4 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(a4 + swift_weakLoadStrong(v0 + 24) = 6LL;
  *(_OWORD *)(a4 + 3sub_1000108B8(v0 + 2) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_BYTE *)(a4 + 64) = 0;
  sub_1000110D4();
}

void static AvroValue.bytes(_:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a2 | 0x2000000000000000LL;
  sub_100014244(a1, a2);
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = v5;
  *(_OWORD *)(a3 + swift_weakDestroy(v0 + 16) = xmmword_100168680;
  *(_OWORD *)(a3 + 3sub_1000108B8(v0 + 2) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_BYTE *)(a3 + 64) = 0;
  sub_1000110D4();
}

void *AvroPrimitive.null.unsafeMutableAddressor()
{
  return &static AvroPrimitive.null;
}

double static AvroValue.null.getter@<D0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  a1[3] = 7LL;
  return sub_10013DA68((uint64_t)a1);
}

void static AvroValue.union(_:)(const void *a1)
{
  uint64_t v2 = sub_100009ACC((uint64_t)&unk_1001BDE10, 104LL);
  sub_100136700((void *)(v2 + 16), a1);
  sub_100127B2C((uint64_t)a1);
  sub_10013DBE4();
  sub_1000110D4();
}

uint64_t sub_1001390EC(unsigned __int8 *a1)
{
  return AvroValue.init(_:)(*a1);
}

uint64_t sub_1001390F4(void *a1)
{
  return AvroValue.init(_:)(*a1);
}

uint64_t sub_1001390FC(double *a1)
{
  return AvroValue.init(_:)(*a1);
}

void sub_100139104(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_100139114(void *a1, uint64_t a2, uint64_t a3)
{
  return ExpressibleByStringInterpolation<>.init(stringInterpolation:)(*a1, a1[1], a2, a3);
}

void AvroValue.update(_:)(uint64_t a1)
{
  uint64_t v3 = sub_100136498(v14, v1);
  AvroValue.schema.getter((uint64_t)v3);
  sub_10012121C(a1, v4);
  char v6 = v5;
  uint64_t v7 = swift_release();
  if ((v6 & 1) != 0)
  {
    sub_10012C340(v14, v15);
    sub_10012C340(v15, v16);
    __asm { BR              X10 }
  }

  AvroValue.schema.getter(v7);
  uint64_t v9 = v8;
  AvroValue.schema.getter(v8);
  uint64_t v11 = v10;
  unint64_t v12 = sub_10013B73C();
  sub_100010EA0((uint64_t)&type metadata for SchemaMismatchError, v12);
  *Swift::String v13 = v9;
  v13[1] = v11;
  sub_1000C5DB8();
  sub_10002716C();
}

#error "1001392F8: call analysis failed (funcsize=91)"
uint64_t AvroUnion.update(_:)(const void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t result;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  const void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[72];
  uint64_t v74[8];
  char v75;
  uint64_t v76;
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  char v5 = a1;
  sub_10012C340(a1, v73);
  sub_10012C340(v73, v74);
  if (v75 == 4)
  {
    uint64_t v65 = v5;
    uint64_t v76 = v2;
    uint64_t v7 = *(void *)(v74[0] + 16);
    char v6 = *(void *)(v74[0] + 24);
    uint64_t v8 = *(void *)(v74[0] + 32);
    uint64_t v9 = *(void *)(v74[0] + 56);
    unint64_t v67 = *(void *)(v74[0] + 48);
    uint64_t v68 = *(void *)(v74[0] + 40);
    uint64_t v11 = *(void *)(v74[0] + 64);
    uint64_t v10 = *(void *)(v74[0] + 72);
    unint64_t v12 = *(void *)(v74[0] + 80);
    Swift::String v13 = *(_BYTE *)(v74[0] + 88);
    os_log_type_t v64 = *(void *)(v74[0] + 96);
    Swift::String v14 = *(void *)v4;
    sub_100010DFC();
    sub_10013DDF8();
    uint64_t v69 = v12;
    uint64_t v15 = v12;
    uint64_t v16 = v7;
    sub_100127A18(v17, v18, v19, v20, v21, v22, v23, v15, v13);
    _s9SwiftAvro0B11UnionSchemaV23__derived_struct_equalsySbAC_ACtFZ_0(v7, v14);
    if ((v24 & 1) != 0)
    {
      uint64_t v66 = *(void *)(v4 + 8);
      char v62 = *(void *)(v4 + 24);
      uint64_t v63 = *(void *)(v4 + 16);
      uint64_t v60 = *(void *)(v4 + 40);
      uint64_t v61 = *(void *)(v4 + 32);
      uint64_t v58 = *(void *)(v4 + 56);
      uint64_t v59 = *(void *)(v4 + 48);
      uint64_t v57 = *(void *)(v4 + 64);
      uint64_t v25 = *(_BYTE *)(v4 + 72);
      sub_10001460C();
      uint64_t result = sub_10005B13C(v66, v63, v62, v61, v60, v59, v58, v57, v25);
      *(void *)uint64_t v4 = v16;
      *(void *)(v4 + 8) = v6;
      *(void *)(v4 + swift_weakDestroy(v0 + 16) = v8;
      *(void *)(v4 + swift_weakLoadStrong(v0 + 24) = v68;
      *(void *)(v4 + 3sub_1000108B8(v0 + 2) = v67;
      *(void *)(v4 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = v9;
      *(void *)(v4 + 48) = v11;
      *(void *)(v4 + 5sub_10005B218(v0, v2, v1, 6) = v10;
      *(void *)(v4 + 64) = v69;
      *(_BYTE *)(v4 + 7sub_1000108B8(v0 + 2) = v13;
      *(void *)(v4 + 8sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = v64;
      return result;
    }

    swift_bridgeObjectRelease();
    sub_10013DDF8();
    sub_10005B13C(v27, v28, v29, v30, v31, v32, v33, v69, v13);
    uint64_t v3 = v76;
    char v5 = v65;
  }

  uint64_t v34 = *(void *)v4;
  char v35 = sub_10005A62C();
  AvroValue.schema.getter(v35);
  uint64_t v37 = sub_1001373FC(v36, v34);
  unint64_t v39 = v38;
  sub_10001460C();
  uint64_t result = swift_release();
  if ((v39 & 1) != 0)
  {
LABEL_10:
    uint64_t v50 = sub_10006B2D0((uint64_t)&unk_1001BDD48);
    *(void *)(v50 + swift_weakDestroy(v0 + 16) = v34;
    uint64_t v51 = v50 | 0x8000000000000000LL;
    uint64_t v52 = sub_10005A62C();
    AvroValue.schema.getter(v52);
    char v54 = v53;
    uint64_t v55 = sub_10013B73C();
    sub_100010EA0((uint64_t)&type metadata for SchemaMismatchError, v55);
    *unint64_t v56 = v51;
    v56[1] = v54;
    return sub_1000C5DB8();
  }

  if ((v37 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (v37 < *(void *)(v34 + 16))
  {
    swift_retain();
    sub_10013DFB8();
    uint64_t v41 = v40;
    swift_release();
    if ((v41 & 1) != 0)
    {
      unint64_t v42 = *(void *)(v4 + 8);
      uint64_t v44 = *(void *)(v4 + 16);
      char v43 = v4 + 8;
      unint64_t v72 = v42;
      uint64_t v76 = v3;
      uint64_t v45 = *(void *)(v43 + 16);
      uint64_t v46 = *(void *)(v43 + 24);
      uint64_t v47 = *(void *)(v43 + 32);
      uint64_t v48 = *(void *)(v43 + 40);
      uint64_t v70 = *(void *)(v43 + 56);
      uint64_t v71 = *(void *)(v43 + 48);
      uint64_t v49 = *(_BYTE *)(v43 + 64);
      sub_10013D9C0( (uint64_t)v5,  (void (*)(void, void, void, void, void, void, void, void, char))sub_100127A18);
      sub_10005B13C(v72, v44, v45, v46, v47, v48, v71, v70, v49);
      uint64_t result = (uint64_t)sub_100136498((void *)v43, v5);
      *(void *)(v43 + 7sub_1000108B8(v0 + 2) = v37;
      return result;
    }

    goto LABEL_10;
  }

  __break(1u);
  return result;
}

void AvroValue.description.getter()
{
  __asm { BR              X10 }

uint64_t sub_10013972C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 - 120);
  sub_10013DAB8( a1,  (void (*)(void, void, void, void, void, void, void, void, char))sub_100127A18);
  uint64_t v3 = sub_10013DFC4();
  AvroPrimitive.description.getter(v3, v4, v5, v6);
  sub_10004EC84();
  sub_10013DAB8( v7,  (void (*)(void, void, void, void, void, void, void, void, char))sub_10005B13C);
  return v2;
}

void sub_100139864()
{
}

void *AvroRecord.schema.getter@<X0>(void *a1@<X8>)
{
  return sub_10013B8CC(v1, a1);
}

#error "1001399B0: call analysis failed (funcsize=75)"
void AvroRecord.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  uint64_t v4;
  _OWORD v5[3];
  uint64_t v6;
  uint64_t v3 = *(_OWORD *)(v1 + 16);
  v5[0] = *(_OWORD *)v1;
  v5[1] = v3;
  uint64_t v5[2] = *(_OWORD *)(v1 + 32);
  char v6 = *(void *)(v1 + 48);
  sub_10005B5EC(v5);
  AvroRecordSchema.hash(into:)();
  sub_100125804(v5);
  uint64_t v4 = *(void *)(v1 + 56);
  sub_10005A624();
  sub_1001258AC(a1, v4);
  sub_1000325E4();
  sub_1000C5E6C();
}

uint64_t static AvroRecord.__derived_struct_equals(_:_:)()
{
  if ((v2 & 1) != 0) {
    return sub_100123380(*(void *)(v1 + 56), *(void *)(v0 + 56));
  }
  else {
    return 0LL;
  }
}

Swift::Int AvroRecord.hashValue.getter(uint64_t a1)
{
  __int128 v2 = *(_OWORD *)(v1 + 16);
  v5[0] = *(_OWORD *)v1;
  v5[1] = v2;
  uint64_t v5[2] = *(_OWORD *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 48);
  sub_10005B5EC(v5);
  AvroRecordSchema.hash(into:)();
  sub_100125804(v5);
  uint64_t v3 = sub_10005A624();
  sub_10013DCB8(v3);
  sub_1000325E4();
  return sub_10007AFDC();
}

Swift::Int sub_100139B44(uint64_t a1)
{
  __int128 v2 = *(_OWORD *)(v1 + 16);
  v6[0] = *(_OWORD *)v1;
  v6[1] = v2;
  v6[2] = *(_OWORD *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 48);
  Hasher.init(_seed:)(v5, a1);
  sub_10005B5EC(v6);
  AvroRecordSchema.hash(into:)();
  sub_100125804(v6);
  swift_bridgeObjectRetain(v3);
  sub_1001258AC((uint64_t)v5, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t AvroRecord.description.getter()
{
  *(void *)&v5[0] = 0LL;
  *((void *)&v5[0] + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(34LL);
  swift_bridgeObjectRelease();
  sub_10013DD0C();
  uint64_t v1 = sub_100010E2C();
  v7._uint64_t countAndFlagsBits = Array.description.getter(v1, &type metadata for AvroValue);
  sub_10013DB64(v7);
  sub_1000110A8();
  sub_10001450C();
  sub_10013DA8C();
  __int128 v2 = *(_OWORD *)(v0 + 16);
  v5[0] = *(_OWORD *)v0;
  v5[1] = v2;
  uint64_t v5[2] = *(_OWORD *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10005B5EC(v5);
  AvroRecordSchema.description.getter();
  sub_10013DB64(v8);
  sub_1000325E4();
  sub_100125804(v5);
  sub_1001280A8();
  return v4;
}

void *AvroArray.append(_:)(const void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v1 + 16);
  sub_10000C4AC();
  sub_10012121C((uint64_t)a1, v4);
  char v6 = v5;
  swift_release();
  if ((v6 & 1) != 0)
  {
    sub_10013D9C0( (uint64_t)a1,  (void (*)(void, void, void, void, void, void, void, void, char))sub_100127A18);
    sub_100135738();
    uint64_t v7 = *(void *)(*(void *)(v1 + 24) + 16LL);
    sub_1001357A8(v7);
    uint64_t v8 = *(void *)(v1 + 24);
    *(void *)(v8 + swift_weakDestroy(v0 + 16) = v7 + 1;
    uint64_t result = sub_100136498((void *)(v8 + 72 * v7 + 32), a1);
    *(void *)(v2 + swift_weakLoadStrong(v0 + 24) = v8;
  }

  else
  {
    uint64_t v10 = sub_10000C4AC();
    AvroValue.schema.getter(v10);
    uint64_t v12 = v11;
    unint64_t v13 = sub_10013B73C();
    sub_100010EA0((uint64_t)&type metadata for SchemaMismatchError, v13);
    *Swift::String v14 = v4;
    v14[1] = v12;
    return (void *)sub_1000C5DB8();
  }

  return result;
}

uint64_t AvroArray.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = *(void *)(v5 + 24);
  void v11[2] = v5;
  sub_1000145E8();
  Sequence.forEach(_:)(sub_10013B908, v11, a2, a3);
  if (!v4) {
    return sub_10001450C();
  }
  uint64_t v9 = swift_bridgeObjectRelease();
  *(void *)(v5 + swift_weakLoadStrong(v0 + 24) = v8;
  return swift_willThrow(v9);
}

void *sub_100139E08(void *__src)
{
  return AvroArray.append(_:)(__dst);
}

#error "100139F0C: call analysis failed (funcsize=58)"
uint64_t AvroArray.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10013A280(a1, a2, a3, a4, a5, sub_1001258AC);
}

uint64_t static AvroArray.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10013A338(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t))sub_100123380) & 1;
}

void AvroArray.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_100010E2C();
  sub_10013DCC4(v4);
  sub_1000A1738();
  sub_10013DD20((uint64_t)v6);
  sub_1000110A8();
  sub_100019D80(a3 & 0x1FFFFFFFFFFFFFFFLL);
  uint64_t v5 = sub_10005A624();
  sub_10013DCB8(v5);
  sub_1000325E4();
  sub_10007AFDC();
  sub_10013DD84();
}

void sub_100139FD8()
{
}

uint64_t sub_100139FE4(uint64_t a1)
{
  return AvroArray.hash(into:)(a1, *v1, v1[1], v1[2], v1[3]);
}

void sub_100139FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100139FFC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_10013A800(a1, a2, a3, a4, static AvroArray.__derived_struct_equals(_:_:));
}

void AvroArray.description.getter()
{
  uint64_t v11 = sub_10005A62C();
  v14._uint64_t countAndFlagsBits = Array.description.getter(v11, &type metadata for AvroValue);
  sub_10013DB64(v14);
  sub_10001460C();
  sub_1000110E0();
  sub_10013DA8C();
  sub_1000A1738();
  sub_10005A624();
  AvroArraySchema.description.getter(v2, v0, v1);
  sub_10013DB64(v15);
  swift_release();
  sub_1000325E4();
  sub_1000110A8();
  sub_1001280A8();
  sub_10005A430();
}

void sub_10013A0B4()
{
}

uint64_t _s9SwiftAvro0B5ArrayV6schemaAA0bC6SchemaVvg_0()
{
  return sub_10013DE90();
}

uint64_t AvroMap.subscript.getter@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  unint64_t v5 = *(void *)(a3 + 16);
  if (!v5)
  {
    uint64_t v12 = 0LL;
LABEL_7:
    uint64_t v13 = 0LL;
    unint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    LOBYTE(v19) = -1;
    goto LABEL_8;
  }

  uint64_t v8 = result;
  MessageSchemaModel.properties.getter(result, a2);
  unint64_t v9 = sub_10000EC64(v8, a2);
  if ((v10 & 1) == 0)
  {
    uint64_t result = sub_10005A1BC();
    uint64_t v12 = 0LL;
    unint64_t v5 = 0LL;
    goto LABEL_7;
  }

  uint64_t v11 = *(void *)(a3 + 56) + 72 * v9;
  uint64_t v12 = *(void *)v11;
  uint64_t v13 = *(void *)(v11 + 16);
  unint64_t v14 = *(void *)(v11 + 24);
  uint64_t v15 = *(void *)(v11 + 32);
  uint64_t v16 = *(void *)(v11 + 40);
  uint64_t v17 = *(void *)(v11 + 48);
  uint64_t v18 = *(void *)(v11 + 56);
  int v19 = *(unsigned __int8 *)(v11 + 64);
  unint64_t v28 = *(void *)(v11 + 8);
  sub_100127A18(*(void *)v11, v28, v13, v14, v15, v16, v17, v18, *(_BYTE *)(v11 + 64));
  uint64_t result = sub_10005A1BC();
  if (v19 == 4)
  {
    unint64_t v26 = *(void *)(v12 + 32);
    uint64_t v27 = *(void *)(v12 + 24);
    unint64_t v24 = *(void *)(v12 + 48);
    uint64_t v25 = *(void *)(v12 + 40);
    uint64_t v22 = *(void *)(v12 + 64);
    uint64_t v23 = *(void *)(v12 + 56);
    uint64_t v20 = *(void *)(v12 + 80);
    uint64_t v21 = *(void *)(v12 + 72);
    LOBYTE(v19) = *(_BYTE *)(v12 + 88);
    sub_100127A18(v27, v26, v25, v24, v23, v22, v21, v20, v19);
    uint64_t result = sub_10005B13C(v12, v28, v13, v14, v15, v16, v17, v18, 4);
    unint64_t v5 = v26;
    uint64_t v12 = v27;
    unint64_t v14 = v24;
    uint64_t v13 = v25;
    uint64_t v16 = v22;
    uint64_t v15 = v23;
    uint64_t v17 = v21;
    uint64_t v18 = v20;
  }

  else
  {
    unint64_t v5 = v28;
  }

uint64_t AvroMap.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10013A280(a1, a2, a3, a4, a5, sub_10013B920);
}

uint64_t sub_10013A280( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v10 = a4 & 0x1FFFFFFFFFFFFFFFLL;
  sub_1000272E4();
  sub_1000145E8();
  sub_10013DEC8(a1);
  sub_1000272E4();
  sub_100121F54(a1, a4);
  sub_10001450C();
  sub_100019D80(v10);
  sub_100047294();
  a6(a1, a5);
  return swift_bridgeObjectRelease();
}

uint64_t static AvroMap.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10013A338(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t))sub_10013A3C4) & 1;
}

uint64_t sub_10013A338( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t))
{
  BOOL v10 = a1 == a5 && a2 == a6;
  if (!v10 && (sub_10005A06C(a1, a2, a5, a6) & 1) == 0) {
    return 0LL;
  }
  _s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(a3);
  if ((v11 & 1) == 0) {
    return 0LL;
  }
  uint64_t v12 = sub_10005A790();
  return a9(v12);
}

uint64_t sub_10013A3C4(uint64_t result, uint64_t a2)
{
  uint64_t v40 = result;
  if (result == a2) {
    return 1LL;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v46 = 0LL;
  uint64_t v37 = result + 64;
  uint64_t v2 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(result + 64);
  int64_t v38 = (unint64_t)(v2 + 63) >> 6;
  while (1)
  {
    if (v4)
    {
      uint64_t v42 = (v4 - 1) & v4;
      unint64_t v5 = __clz(__rbit64(v4)) | (v46 << 6);
      goto LABEL_22;
    }

    int64_t v6 = v46 + 1;
    if (__OFADD__(v46, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v6 >= v38) {
      return 1LL;
    }
    unint64_t v7 = *(void *)(v37 + 8 * v6);
    ++v46;
    if (!v7)
    {
      int64_t v46 = v6 + 1;
      if (v6 + 1 >= v38) {
        return 1LL;
      }
      unint64_t v7 = *(void *)(v37 + 8 * v46);
      if (!v7)
      {
        int64_t v46 = v6 + 2;
        if (v6 + 2 >= v38) {
          return 1LL;
        }
        unint64_t v7 = *(void *)(v37 + 8 * v46);
        if (!v7) {
          break;
        }
      }
    }

void AvroMap.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_10013A784()
{
}

uint64_t sub_10013A790(uint64_t a1)
{
  return AvroMap.hash(into:)(a1, *v1, v1[1], v1[2], v1[3]);
}

void sub_10013A79C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10013A7A8( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *v4;
  uint64_t v7 = v4[1];
  uint64_t v9 = v4[2];
  uint64_t v8 = v4[3];
  sub_10007B008(a1, a2);
  a4(v10, v6, v7, v9, v8);
  sub_10007AFDC();
  sub_10013DD84();
}

uint64_t sub_10013A7F4(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_10013A800(a1, a2, a3, a4, static AvroMap.__derived_struct_equals(_:_:));
}

uint64_t sub_10013A800( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void, void, void))
{
  return a5(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

void AvroMap.description.getter()
{
  uint64_t v11 = sub_10005A62C();
  v14._uint64_t countAndFlagsBits = Dictionary.description.getter(v11, &type metadata for String, &type metadata for AvroValue);
  sub_10013DB64(v14);
  sub_10001460C();
  sub_1000110E0();
  sub_10013DA8C();
  sub_1000A1738();
  sub_10005A624();
  AvroMapSchema.description.getter(v2, v0, v1);
  sub_10013DB64(v15);
  swift_release();
  sub_1000325E4();
  sub_1000110A8();
  sub_1001280A8();
  sub_10005A430();
}

void sub_10013A8DC()
{
  __asm { BR              X10 }

void sub_10013A910()
{
}

void _s9SwiftAvro0B9PrimitiveV23__derived_struct_equalsySbAC_ACtFZ_0( uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }

uint64_t sub_10013AA1C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a8) {
    char v10 = 0;
  }
  else {
    char v10 = ((v9 & 1) == 0LL) ^ v8;
  }
  return v10 & 1;
}

void sub_10013AB90(uint64_t a1)
{
}

void sub_10013ABCC()
{
}

void sub_10013ABD8()
{
}

void sub_10013ABE8()
{
}

Swift::Int sub_10013ABF8(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10013AC54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10013AF04( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void, void, void))_s9SwiftAvro0B9PrimitiveV23__derived_struct_equalsySbAC_ACtFZ_0);
}

void sub_10013AC60(uint64_t a1, unint64_t a2)
{
  if (((a2 >> 60) & 3) != 0)
  {
    uint64_t v2 = sub_10006B688();
    sub_100014244(v2, v3);
  }

  else
  {
    uint64_t v4 = sub_10005A624();
    sub_10013E144(v4);
  }

  uint64_t v5 = sub_10006B688();
  Data.hashValue.getter(v5);
  uint64_t v6 = sub_10006B688();
  sub_100010A30(v6, v7);
  sub_1000110D4();
}

BOOL sub_10013ACC0(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = sub_10005A790();
  sub_10013AC60(v4, v5);
  return v3 == v6;
}

void sub_10013AD00(uint64_t a1, uint64_t a2, unint64_t a3)
{
}

void sub_10013AD28()
{
}

void sub_10013AD30(uint64_t a1)
{
}

Swift::Int sub_10013AD38(uint64_t a1)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  Hasher.init(_seed:)(v6, a1);
  sub_10013AC60(v2, v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL sub_10013AD80(uint64_t a1)
{
  return sub_10013ACC0(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t static AvroPrimitive.null.getter()
{
  return 0LL;
}

uint64_t AvroPrimitive.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5 = sub_10013DD40();
  return sub_10005B218(v5, v6, v7, v8);
}

void AvroPrimitive.hashValue.getter(uint64_t a1)
{
  uint64_t v1 = sub_10013DD40();
  sub_100127AE0(v1, v2, v3, v4);
  sub_10013DB8C();
  uint64_t v5 = sub_10013DD40();
  sub_10005B218(v5, v6, v7, v8);
  sub_10007AFDC();
  sub_100128098();
}

void sub_10013AE54()
{
}

uint64_t sub_10013AE64(uint64_t a1)
{
  return AvroPrimitive.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

Swift::Int sub_10013AE74(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  char v5 = *(_BYTE *)(v1 + 24);
  Hasher.init(_seed:)(v7, a1);
  sub_100127AE0(v2, v3, v4, v5);
  sub_10013A8DC();
  sub_10005B218(v2, v3, v4, v5);
  return Hasher._finalize()();
}

uint64_t sub_10013AEF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10013AF04( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void, void, void))static AvroPrimitive.__derived_struct_equals(_:_:));
}

uint64_t sub_10013AF04( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void, void, void))
{
  return a5( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(unsigned __int8 *)(a1 + 24),  *(void *)a2,  *(void *)(a2 + 8),  *(void *)(a2 + 16),  *(unsigned __int8 *)(a2 + 24));
}

void AvroPrimitive.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }

uint64_t sub_10013AF6C()
{
  if ((v0 & 1) != 0) {
    return 1702195828LL;
  }
  else {
    return 0x65736C6166LL;
  }
}

void sub_10013B02C()
{
}

uint64_t AvroUnion.value.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10013C950(v1 + 8, a1);
}

void AvroUnion.init(schema:value:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v27 = *(void *)(a2 + 16);
  uint64_t v25 = *(void *)(a2 + 32);
  uint64_t v26 = *(void *)(a2 + 24);
  uint64_t v23 = *(void *)(a2 + 48);
  uint64_t v24 = *(void *)(a2 + 40);
  uint64_t v22 = *(void *)(a2 + 56);
  char v21 = *(_BYTE *)(a2 + 64);
  swift_bridgeObjectRetain(a1);
  AvroValue.schema.getter(v8);
  unint64_t v10 = sub_1001373FC(v9, a1);
  char v12 = v11;
  sub_10001450C();
  swift_release();
  if ((v12 & 1) != 0)
  {
LABEL_6:
    uint64_t v15 = sub_10006B2D0((uint64_t)&unk_1001BDD48);
    *(void *)(v15 + swift_weakDestroy(v0 + 16) = a1;
    unint64_t v16 = v15 | 0x8000000000000000LL;
    AvroValue.schema.getter(v15);
    unint64_t v18 = v17;
    unint64_t v19 = sub_10013B73C();
    sub_100010EA0((uint64_t)&type metadata for SchemaMismatchError, v19);
    *char v20 = v16;
    v20[1] = v18;
    sub_1000C5DB8();
    sub_10013D9C0( a2,  (void (*)(void, void, void, void, void, void, void, void, char))sub_10005B13C);
    return;
  }

  if ((v10 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (v10 < *(void *)(a1 + 16))
  {
    sub_1000272E4();
    sub_10013DFB8();
    char v14 = v13;
    swift_release();
    if ((v14 & 1) != 0)
    {
      *(void *)a3 = a1;
      *(void *)(a3 + 8) = v6;
      *(void *)(a3 + swift_weakDestroy(v0 + 16) = v7;
      *(void *)(a3 + swift_weakLoadStrong(v0 + 24) = v27;
      *(void *)(a3 + 3sub_1000108B8(v0 + 2) = v26;
      *(void *)(a3 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = v25;
      *(void *)(a3 + 48) = v24;
      *(void *)(a3 + 5sub_10005B218(v0, v2, v1, 6) = v23;
      *(void *)(a3 + 64) = v22;
      *(_BYTE *)(a3 + 7sub_1000108B8(v0 + 2) = v21;
      *(void *)(a3 + 8sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = v10;
      return;
    }

    goto LABEL_6;
  }

  __break(1u);
}

void AvroUnion.hash(into:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  sub_1000145E8();
  sub_100125860(a1, v5);
  sub_100135A2C(&v5);
  sub_100136498(v3, v1 + 1);
  sub_10012C340(v3, v4);
  sub_10012C340(v4, v6);
  __asm { BR              X10 }

void sub_10013B248()
{
  Swift::UInt v1 = sub_10013DF0C();
  sub_100127D10(v1);
  sub_10013DD7C( v2,  (void (*)(void, void, void, void, void, void, void, void, char))sub_100127A18,  v3);
  sub_10013DDAC();
  sub_10013DD7C( v4,  (void (*)(void, void, void, void, void, void, void, void, char))sub_10005B13C,  v5);
  sub_100127D10(*(void *)(v0 + 80));
}

BOOL static AvroUnion.__derived_struct_equals(_:_:)()
{
  if ((v4 & 1) != 0
    && (sub_100136498(v15, (const void *)(v1 + 8)),
        sub_100136498(v14, (const void *)(v0 + 8)),
        sub_10012C340(v15, v16),
        sub_10013DFB0(v14, v5, v6, v7, v8, v9, v10, v11, v14[0], v14[1]),
        sub_100137EA4(v16),
        (v12 & 1) != 0))
  {
    return *(void *)(v1 + 80) == *(void *)(v0 + 80);
  }

  else
  {
    return 0LL;
  }

void AvroUnion.hashValue.getter(uint64_t a1)
{
}

Swift::Int sub_10013B4F0(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t AvroUnion.description.getter()
{
  v6[0] = 0LL;
  v6[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(43LL);
  swift_bridgeObjectRelease();
  sub_10013DD0C();
  sub_100136498(v6, v0 + 1);
  sub_10013D9C0( (uint64_t)v6,  (void (*)(void, void, void, void, void, void, void, void, char))sub_100127A18);
  v7._uint64_t countAndFlagsBits = AvroValue.description.getter();
  sub_10013DB64(v7);
  sub_1000110A8();
  sub_10013D9C0( (uint64_t)v6,  (void (*)(void, void, void, void, void, void, void, void, char))sub_10005B13C);
  v1._uint64_t countAndFlagsBits = 0x3A7865646E69202CLL;
  v1._object = (void *)0xE900000000000020LL;
  String.append(_:)(v1);
  uint64_t v5 = v0[10];
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  sub_10013DB64(v8);
  sub_1000110A8();
  sub_10013DA8C();
  uint64_t v5 = *v0;
  swift_bridgeObjectRetain(v5);
  v9._uint64_t countAndFlagsBits = Array.description.getter(v2, &type metadata for AvroSchema);
  sub_10013DB64(v9);
  sub_1000325E4();
  sub_100135A2C(&v5);
  sub_1001280A8();
  return v4;
}

void sub_10013B64C()
{
}

void sub_10013B660()
{
}

char *sub_10013B674(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10013B778(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

uint64_t sub_10013B690()
{
  return swift_deallocObject(v0, 104LL, 7LL);
}

void *sub_10013B6D8(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  swift_bridgeObjectRetain(a1[5]);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

unint64_t sub_10013B73C()
{
  unint64_t result = qword_1001DB6C8;
  if (!qword_1001DB6C8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SchemaMismatchError,  &type metadata for SchemaMismatchError);
    atomic_store(result, (unint64_t *)&qword_1001DB6C8);
  }

  return result;
}

char *sub_10013B778(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000941C(&qword_1001DB6C0);
    uint64_t v11 = (char *)swift_allocObject(v10, 72 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_1000108B8(v0 + 2) = v8;
    *((void *)v11 + swift_weakDestroy(v0 + 3) = 2 * ((uint64_t)(v12 - 32) / 72);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    sub_1001356F0((char *)(a4 + 32), v8, v11 + 32);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v11 + 32);
  }

  swift_release();
  return v11;
}

void *sub_10013B874(void *a1)
{
  return a1;
}

void *sub_10013B8A0(void *a1)
{
  return a1;
}

void *sub_10013B8CC(void *a1, void *a2)
{
  return a2;
}

void *sub_10013B908(void *a1)
{
  return sub_100139E08(a1);
}

void sub_10013B920(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 64);
  uint64_t v4 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 64);
  int64_t v24 = (unint64_t)(v4 + 63) >> 6;
  MessageSchemaModel.properties.getter(a1, a2);
  if (v6)
  {
    unint64_t v7 = __clz(__rbit64(v6));
    goto LABEL_16;
  }

  if (v24 > 1)
  {
    unint64_t v8 = v3[1];
    uint64_t v9 = 1LL;
    if (v8) {
      goto LABEL_15;
    }
    uint64_t v9 = 2LL;
    if (v24 <= 2) {
      goto LABEL_17;
    }
    unint64_t v8 = v3[2];
    if (v8)
    {
LABEL_15:
      unint64_t v7 = __clz(__rbit64(v8)) + (v9 << 6);
LABEL_16:
      uint64_t v26 = *(void *)(*(void *)(a2 + 48) + 16 * v7);
      uint64_t v11 = *(void *)(a2 + 56) + 72 * v7;
      uint64_t v12 = *(void *)v11;
      unint64_t v13 = *(void *)(v11 + 8);
      uint64_t v14 = *(void *)(v11 + 16);
      unint64_t v15 = *(void *)(v11 + 24);
      uint64_t v16 = *(unsigned __int8 *)(v11 + 64);
      uint64_t v17 = *(void *)(a1 + 64);
      __int128 v18 = *(_OWORD *)(a1 + 16);
      v27[0] = *(_OWORD *)a1;
      v27[1] = v18;
      __int128 v19 = *(_OWORD *)(a1 + 48);
      void v27[2] = *(_OWORD *)(a1 + 32);
      v27[3] = v19;
      uint64_t v28 = v17;
      sub_100047294();
      sub_10013DA78(v12, v13, v14, v15, v20, v21, v22, v23, v16);
      sub_1001280D8((uint64_t)v27, v26);
      sub_100009B3C();
      __asm { BR              X8 }
    }

    uint64_t v10 = 3LL;
    if (v24 > 3)
    {
      unint64_t v8 = v3[3];
      if (v8)
      {
        uint64_t v9 = 3LL;
        goto LABEL_15;
      }

      while (1)
      {
        uint64_t v9 = v10 + 1;
        if (__OFADD__(v10, 1LL)) {
          __break(1u);
        }
        if (v9 >= v24) {
          break;
        }
        unint64_t v8 = v3[v9];
        ++v10;
        if (v8) {
          goto LABEL_15;
        }
      }
    }
  }

uint64_t sub_10013C950(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_10013C988()
{
  unint64_t result = qword_1001DB6D0;
  if (!qword_1001DB6D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SchemaMismatchError,  &type metadata for SchemaMismatchError);
    atomic_store(result, (unint64_t *)&qword_1001DB6D0);
  }

  return result;
}

unint64_t sub_10013C9C8()
{
  unint64_t result = qword_1001DB6D8;
  if (!qword_1001DB6D8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for InvalidFieldError,  &type metadata for InvalidFieldError);
    atomic_store(result, (unint64_t *)&qword_1001DB6D8);
  }

  return result;
}

unint64_t sub_10013CA08()
{
  unint64_t result = qword_1001DB6E0;
  if (!qword_1001DB6E0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for InternalError, &type metadata for InternalError);
    atomic_store(result, (unint64_t *)&qword_1001DB6E0);
  }

  return result;
}

unint64_t sub_10013CA48()
{
  unint64_t result = qword_1001DB6E8;
  if (!qword_1001DB6E8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AvroValue, &type metadata for AvroValue);
    atomic_store(result, (unint64_t *)&qword_1001DB6E8);
  }

  return result;
}

void *sub_10013CA84()
{
  return &protocol witness table for Bool;
}

void *sub_10013CA90()
{
  return &protocol witness table for Int;
}

void *sub_10013CA9C()
{
  return &protocol witness table for Double;
}

unint64_t sub_10013CAAC()
{
  unint64_t result = qword_1001DB6F0;
  if (!qword_1001DB6F0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AvroValue, &type metadata for AvroValue);
    atomic_store(result, (unint64_t *)&qword_1001DB6F0);
  }

  return result;
}

unint64_t sub_10013CAEC()
{
  unint64_t result = qword_1001DB6F8;
  if (!qword_1001DB6F8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AvroValue, &type metadata for AvroValue);
    atomic_store(result, (unint64_t *)&qword_1001DB6F8);
  }

  return result;
}

unint64_t sub_10013CB2C()
{
  unint64_t result = qword_1001DB700;
  if (!qword_1001DB700)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AvroValue, &type metadata for AvroValue);
    atomic_store(result, (unint64_t *)&qword_1001DB700);
  }

  return result;
}

void *sub_10013CB68()
{
  return &protocol witness table for DefaultStringInterpolation;
}

unint64_t sub_10013CB78()
{
  unint64_t result = qword_1001DB708;
  if (!qword_1001DB708)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AvroRecord, &type metadata for AvroRecord);
    atomic_store(result, (unint64_t *)&qword_1001DB708);
  }

  return result;
}

unint64_t sub_10013CBB8()
{
  unint64_t result = qword_1001DB710;
  if (!qword_1001DB710)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AvroArray, &type metadata for AvroArray);
    atomic_store(result, (unint64_t *)&qword_1001DB710);
  }

  return result;
}

unint64_t sub_10013CBF8()
{
  unint64_t result = qword_1001DB718;
  if (!qword_1001DB718)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AvroMap, &type metadata for AvroMap);
    atomic_store(result, (unint64_t *)&qword_1001DB718);
  }

  return result;
}

unint64_t sub_10013CC38()
{
  unint64_t result = qword_1001DB720;
  if (!qword_1001DB720)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AvroPrimitive, &type metadata for AvroPrimitive);
    atomic_store(result, (unint64_t *)&qword_1001DB720);
  }

  return result;
}

unint64_t sub_10013CC78()
{
  unint64_t result = qword_1001DB728;
  if (!qword_1001DB728)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AvroUnion, &type metadata for AvroUnion);
    atomic_store(result, (unint64_t *)&qword_1001DB728);
  }

  return result;
}

uint64_t destroy for SchemaMismatchError(void *a1)
{
  return swift_release(a1[1] & 0x1FFFFFFFFFFFFFFFLL);
}

void _s9SwiftAvro19SchemaMismatchErrorVwCP_0(void *a1, void *a2)
{
  uint64_t v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  swift_retain();
  sub_10000C4AC();
  sub_100009A90();
}

uint64_t *assignWithCopy for SchemaMismatchError(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2 & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v5 = *a1;
  *a1 = *a2;
  uint64_t v6 = v5 & 0x1FFFFFFFFFFFFFFFLL;
  swift_retain(v4);
  swift_release(v6);
  uint64_t v7 = a2[1];
  uint64_t v8 = a1[1];
  a1[1] = v7;
  uint64_t v9 = v8 & 0x1FFFFFFFFFFFFFFFLL;
  swift_retain(v7 & 0x1FFFFFFFFFFFFFFFLL);
  swift_release(v9);
  return a1;
}

void *assignWithTake for SchemaMismatchError(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4 & 0x1FFFFFFFFFFFFFFFLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for SchemaMismatchError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7C && *(_BYTE *)(a1 + 16))
    {
      unsigned int v2 = *(_DWORD *)a1 + 123;
    }

    else
    {
      unsigned int v2 = (((*(void *)a1 >> 57) >> 4) | (8 * ((*(void *)a1 >> 57) & 8 | *(void *)a1 & 7))) ^ 0x7F;
      if (v2 >= 0x7B) {
        unsigned int v2 = -1;
      }
    }
  }

  else
  {
    unsigned int v2 = -1;
  }

  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for SchemaMismatchError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(void *)unint64_t result = a2 - 124;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7C) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7C) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007LL;
    }
  }

  return result;
}

void type metadata accessor for SchemaMismatchError()
{
}

void type metadata accessor for InvalidFieldError()
{
}

void _s9SwiftAvro17InvalidFieldErrorVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  sub_100009B3C();
  sub_100009A90();
}

uint64_t sub_10013CECC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
      return sub_10013DF48(result, a2);
    }

    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    if (a2) {
      return sub_10013DF48(result, a2);
    }
  }

  return result;
}

void type metadata accessor for InternalError()
{
}

void *initializeWithTake for AvroValue(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x41uLL);
}

void type metadata accessor for AvroValue()
{
}

void type metadata accessor for AvroRecord()
{
}

void type metadata accessor for AvroArray()
{
}

uint64_t _s9SwiftAvro9AvroArrayVwxx_0(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

void _s9SwiftAvro9AvroArrayVwcp_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  sub_10004EC38();
  sub_100047294();
  sub_1000110D4();
}

void _s9SwiftAvro9AvroArrayVwca_0()
{
  void *v3 = *v2;
  uint64_t v4 = v2[1];
  v1[1] = v4;
  swift_bridgeObjectRetain(v4);
  sub_1000110A8();
  v1[2] = *(void *)(v0 + 16);
  swift_retain();
  sub_1000110B0();
  uint64_t v5 = *(void *)(v0 + 24);
  _OWORD v1[3] = v5;
  swift_bridgeObjectRetain(v5);
  sub_1000325E4();
  sub_1000110D4();
}

void _s9SwiftAvro9AvroArrayVwta_0()
{
  uint64_t v3 = v2[1];
  *Swift::String v1 = *v2;
  v1[1] = v3;
  swift_bridgeObjectRelease();
  v1[2] = *(void *)(v0 + 16);
  swift_release();
  _OWORD v1[3] = *(void *)(v0 + 24);
  swift_bridgeObjectRelease();
  sub_100009A90();
}

uint64_t sub_10013D094(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + swift_weakLoadStrong(v0 + 24) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 3sub_1000108B8(v0 + 2) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
      return sub_10013DF48(result, a2);
    }

    *(_BYTE *)(result + 3sub_1000108B8(v0 + 2) = 0;
    if (a2) {
      return sub_10013DF48(result, a2);
    }
  }

  return result;
}

void type metadata accessor for AvroMap()
{
}

void type metadata accessor for AvroPrimitive()
{
}

uint64_t destroy for AvroUnion(uint64_t a1)
{
  return sub_10005B13C( *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(_BYTE *)(a1 + 72));
}

uint64_t initializeWithCopy for AvroUnion(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  unint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  unint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a2[7];
  uint64_t v14 = a2[8];
  char v12 = *((_BYTE *)a2 + 72);
  swift_bridgeObjectRetain(v4);
  sub_100127A18(v5, v6, v7, v8, v9, v10, v11, v14, v12);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(a1 + swift_weakLoadStrong(v0 + 24) = v7;
  *(void *)(a1 + 3sub_1000108B8(v0 + 2) = v8;
  *(void *)(a1 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 5sub_10005B218(v0, v2, v1, 6) = v11;
  *(void *)(a1 + 64) = v14;
  *(_BYTE *)(a1 + 7sub_1000108B8(v0 + 2) = v12;
  *(void *)(a1 + 8sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = a2[10];
  return a1;
}

uint64_t assignWithCopy for AvroUnion(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[1];
  unint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  unint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a2[7];
  uint64_t v12 = a2[8];
  char v23 = *((_BYTE *)a2 + 72);
  sub_100127A18(v5, v6, v7, v8, v9, v10, v11, v12, v23);
  uint64_t v13 = *(void *)(a1 + 8);
  unint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  char v21 = *(_BYTE *)(a1 + 72);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(a1 + swift_weakLoadStrong(v0 + 24) = v7;
  *(void *)(a1 + 3sub_1000108B8(v0 + 2) = v8;
  *(void *)(a1 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 5sub_10005B218(v0, v2, v1, 6) = v11;
  *(void *)(a1 + 64) = v12;
  *(_BYTE *)(a1 + 7sub_1000108B8(v0 + 2) = v23;
  sub_10005B13C(v13, v14, v15, v16, v17, v18, v19, v20, v21);
  *(void *)(a1 + 8sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = a2[10];
  return a1;
}

void *initializeWithTake for AvroUnion(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

uint64_t assignWithTake for AvroUnion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  char v4 = *(_BYTE *)(a2 + 72);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  char v13 = *(_BYTE *)(a1 + 72);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + swift_weakLoadStrong(v0 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 5sub_10005B218(v0, v2, v1, 6) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 7sub_1000108B8(v0 + 2) = v4;
  sub_10005B13C(v5, v6, v7, v8, v9, v10, v11, v12, v13);
  *(void *)(a1 + 8sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = *(void *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for AvroUnion(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 88))
    {
      LODWORD(vsub_1000108B8(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(vsub_1000108B8(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AvroUnion(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 7sub_1000108B8(v0 + 2) = 0u;
    *(_OWORD *)(result + 5sub_10005B218(v0, v2, v1, 6) = 0u;
    *(_OWORD *)(result + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = 0u;
    *(_OWORD *)(result + swift_weakLoadStrong(v0 + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 88) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for AvroUnion()
{
}

uint64_t sub_10013D414(uint64_t a1)
{
  return sub_10005B23C(*(void *)a1, *(void *)(a1 + 8));
}

void sub_10013D424(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  sub_10013DF54(*a2);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  sub_1000110D4();
}

uint64_t *sub_10013D45C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  sub_100127B04(*a2, v4);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  sub_10005B23C(v6, v7);
  return a1;
}

uint64_t *sub_10013D4B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v3;
  sub_10005B23C(v4, v5);
  return a1;
}

uint64_t sub_10013D4F0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 == 1 || !*(_BYTE *)(a1 + 24))
    {
      if ((~*(void *)(a1 + 8) & 0x3000000000000000LL) != 0) {
        int v2 = -1;
      }
      else {
        int v2 = 0;
      }
    }

    else
    {
      int v2 = *(_DWORD *)a1 + 1;
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10013D530(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)unint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(_BYTE *)(result + swift_weakLoadStrong(v0 + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 2) {
      *(_BYTE *)(result + swift_weakLoadStrong(v0 + 24) = 0;
    }
    if (a2)
    {
      *(_OWORD *)unint64_t result = xmmword_100168690;
      *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    }
  }

  return result;
}

uint64_t sub_10013D57C(uint64_t a1)
{
  return (*(void *)(a1 + 8) >> 60) & 3LL;
}

uint64_t sub_10013D588(uint64_t result)
{
  *(void *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  return result;
}

uint64_t sub_10013D598(uint64_t result, char a2)
{
  *(void *)(result + 8) = *(void *)(result + 8) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 3) << 60);
  return result;
}

void type metadata accessor for AvroPrimitive.SomeBytes()
{
}

uint64_t _s9SwiftAvro13AvroPrimitiveVwxx_0(uint64_t a1)
{
  return sub_10005B218(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

void _s9SwiftAvro13AvroPrimitiveVwcp_0(uint64_t a1, uint64_t a2)
{
  *(void *)uint64_t v2 = v3;
  *(void *)(v2 + 8) = v4;
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *(_BYTE *)(v2 + swift_weakLoadStrong(v0 + 24) = v6;
  sub_100019F1C();
}

void _s9SwiftAvro13AvroPrimitiveVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)v2;
  unint64_t v8 = *(void *)(v2 + 8);
  uint64_t v9 = *(void *)(v2 + 16);
  *(void *)uint64_t v2 = v3;
  *(void *)(v2 + 8) = v4;
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  char v10 = *(_BYTE *)(v2 + 24);
  *(_BYTE *)(v2 + swift_weakLoadStrong(v0 + 24) = v6;
  sub_10005B218(v7, v8, v9, v10);
  sub_100019F1C();
}

void _s9SwiftAvro13AvroPrimitiveVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  char v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + swift_weakLoadStrong(v0 + 24) = v4;
  sub_10005B218(v5, v7, v6, v8);
  sub_100009A90();
}

uint64_t _s9SwiftAvro13AvroPrimitiveVwet_0(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xF9 && *(_BYTE *)(a1 + 25))
    {
      int v2 = *(_DWORD *)a1 + 248;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 7) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t _s9SwiftAvro13AvroPrimitiveVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(_BYTE *)(result + swift_weakLoadStrong(v0 + 24) = 0;
    *(void *)unint64_t result = a2 - 249;
    if (a3 >= 0xF9) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0xF9) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + swift_weakLoadStrong(v0 + 24) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10013D70C(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 7);
  }
}

uint64_t sub_10013D724(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 7;
  if (a2 >= 7)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    LOBYTE(asub_1000108B8(v0 + 2) = 7;
    *(void *)unint64_t result = v2;
  }

  *(_BYTE *)(result + swift_weakLoadStrong(v0 + 24) = a2;
  return result;
}

void type metadata accessor for AvroPrimitive.Value()
{
}

uint64_t _s9SwiftAvro9AvroValueVwxx_0(uint64_t a1)
{
  return sub_10005B13C( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(_BYTE *)(a1 + 64));
}

void _s9SwiftAvro9AvroValueVwcp_0()
{
}

#error "10013D7E0: call analysis failed (funcsize=17)"
void _s9SwiftAvro9AvroValueVwta_0(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  unsigned int v3 = *(_BYTE *)(a2 + 64);
  char v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  char v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(_BYTE *)(a1 + 64);
  char v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v13;
  unint64_t v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 3sub_1000108B8(v0 + 2) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 64) = v3;
  sub_10005B13C(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  sub_1000A28E0();
}

uint64_t _s9SwiftAvro9AvroValueVwet_0(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFC && *(_BYTE *)(a1 + 65))
    {
      int v2 = *(_DWORD *)a1 + 251;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
      if (v3 <= 4) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t _s9SwiftAvro9AvroValueVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 5sub_10005B218(v0, v2, v1, 6) = 0LL;
    *(_OWORD *)(result + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = 0u;
    *(_OWORD *)(result + swift_weakLoadStrong(v0 + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(void *)unint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 65) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 65) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 64) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10013D8E4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t sub_10013D8EC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 64) = a2;
  return result;
}

void type metadata accessor for AvroValue.Value()
{
}

unint64_t sub_10013D904()
{
  unint64_t result = qword_1001DB730;
  if (!qword_1001DB730)
  {
    unint64_t result = swift_getWitnessTable(&unk_100168530, &unk_1001BE450);
    atomic_store(result, (unint64_t *)&qword_1001DB730);
  }

  return result;
}

unint64_t sub_10013D944()
{
  unint64_t result = qword_1001DB738;
  if (!qword_1001DB738)
  {
    unint64_t result = swift_getWitnessTable(&unk_100168598, &unk_1001BE3C0);
    atomic_store(result, (unint64_t *)&qword_1001DB738);
  }

  return result;
}

unint64_t sub_10013D984()
{
  unint64_t result = qword_1001DB740;
  if (!qword_1001DB740)
  {
    unint64_t result = swift_getWitnessTable(&unk_100168600, &unk_1001BE330);
    atomic_store(result, (unint64_t *)&qword_1001DB740);
  }

  return result;
}

void sub_10013D9C0( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, char))
{
  char v2 = *(_BYTE *)(a1 + 64);
  a2( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  v2);
  sub_1000A28E0();
}

unint64_t sub_10013DA04()
{
  unint64_t result = qword_1001DB748;
  if (!qword_1001DB748)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for InternalError, &type metadata for InternalError);
    atomic_store(result, (unint64_t *)&qword_1001DB748);
  }

  return result;
}

double sub_10013DA68@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 3sub_1000108B8(v0 + 2) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 0;
  return result;
}

uint64_t sub_10013DA78( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(a1, a2, a3, a4, v11, v12, v10, v9, a9);
}

void sub_10013DA8C()
{
  v0._uint64_t countAndFlagsBits = 0x616D65686373202CLL;
  v0._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v0);
}

uint64_t sub_10013DAAC( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100127A18(a1, a2, a3, a4, a5, a6, v10, v9, a9);
}

void sub_10013DAB8( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, char))
{
}

uint64_t sub_10013DAC0(uint64_t a1, uint64_t a2)
{
  return sub_100127A18( *(void *)a2,  *(void *)(a2 + 8),  *(void *)(a2 + 16),  *(void *)(a2 + 24),  *(void *)(a2 + 32),  *(void *)(a2 + 40),  *(void *)(a2 + 48),  *(void *)(a2 + 56),  *(_BYTE *)(a2 + 64));
}

void sub_10013DB00(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 64) = 0;
}

double _s9SwiftAvro0B5ValueVyACSbcfC_0@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1 & 1;
  double result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + swift_weakLoadStrong(v0 + 24) = 0u;
  *(_OWORD *)(a2 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = 0u;
  *(_OWORD *)(a2 + 49) = 0u;
  return result;
}

uint64_t sub_10013DB28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41)
{
  return String.hash(into:)(&a41, v42, v41);
}

uint64_t sub_10013DB38( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return sub_100127A18(a1, a2, v22, v21, v20, a19, a20, a17, a9);
}

void sub_10013DB64(Swift::String a1)
{
}

uint64_t sub_10013DB6C( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return sub_100127A18(a1, a2, a3, a4, a5, a6, a7, a17, a9);
}

uint64_t sub_10013DB7C()
{
  return v0;
}

void sub_10013DB8C()
{
}

uint64_t sub_10013DBA0(uint64_t a1, uint64_t a2)
{
  return sub_100127AE0(*(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(_BYTE *)(a2 + 24));
}

uint64_t sub_10013DBC4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, int a21, char a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, unint64_t a31)
{
  return sub_10005B13C(a23, a31, a24, a25, a26, a27, a28, a29, a22);
}

double sub_10013DBE4()
{
  *(void *)uint64_t v0 = v1;
  double result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + swift_weakLoadStrong(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = 0u;
  *(void *)(v0 + 5sub_10005B218(v0, v2, v1, 6) = 0LL;
  *(_BYTE *)(v0 + 64) = 4;
  return result;
}

uint64_t sub_10013DC08( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return sub_100127A18(a1, a2, a3, a4, a5, a6, v17, a17, a9);
}

uint64_t sub_10013DC18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49)
{
  *(_OWORD *)(v50 - 24sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = *v49;
  return a49;
}

void *sub_10013DC3C()
{
  return sub_10012C340(v0, (void *)(v1 - 168));
}

void sub_10013DC58()
{
}

void sub_10013DC60()
{
}

void sub_10013DC68()
{
}

void sub_10013DC70()
{
}

uint64_t sub_10013DC78@<X0>( unint64_t a1@<X1>, char a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, unint64_t a32)
{
  return sub_100127A18(v32, a1, a31, a32, a21, a18, a22, a20, a2);
}

uint64_t sub_10013DC94( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(a1, a2, v13, v11, v12, v14, v10, v9, a9);
}

void sub_10013DCB0( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, char))
{
}

void sub_10013DCB8(uint64_t a1, ...)
{
}

uint64_t sub_10013DCC4(uint64_t a1, ...)
{
  return String.hash(into:)(va, v2, v1);
}

  ;
}

uint64_t sub_10013DCF4( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10005B13C(a1, a2, a3, v9, v12, v13, v11, v10, a9);
}

  ;
}

void sub_10013DD20(uint64_t a1)
{
}

uint64_t sub_10013DD28( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  return sub_100127A18(a1, a2, a3, a4, a21, v21, v22, v23, a9);
}

uint64_t sub_10013DD40()
{
  return v0;
}

void *sub_10013DD54(uint64_t a1, void *a2)
{
  return sub_10012C340(v2, a2);
}

uint64_t sub_10013DD5C()
{
  return v0;
}

void sub_10013DD7C( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, char), uint64_t a3, ...)
{
}

  ;
}

uint64_t sub_10013DD98(uint64_t a1)
{
  return AvroMap.hash(into:)(a1, v1, v2, v3, v4);
}

void sub_10013DDAC()
{
}

uint64_t sub_10013DDC0(uint64_t a1)
{
  return AvroMap.hash(into:)(a1, v1, v2, v3, v4);
}

void sub_10013DDD4(Swift::UInt a1)
{
}

  ;
}

  ;
}

uint64_t sub_10013DE10@<X0>(uint64_t a1@<X8>)
{
  return swift_release(a1 & 0x1FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10013DE18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_bridgeObjectRelease(a10);
}

uint64_t sub_10013DE20()
{
  return dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
}

void sub_10013DE30(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_10013DE40()
{
  v0._uint64_t countAndFlagsBits = 39LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

  ;
}

void sub_10013DE68( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, char), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void sub_10013DE70(uint64_t a1)
{
}

void sub_10013DE78()
{
  *(void *)uint64_t v0 = v1;
  *(void *)(v0 + 8) = v2;
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)(v0 + swift_weakLoadStrong(v0 + 24) = v4;
  *(void *)(v0 + 3sub_1000108B8(v0 + 2) = v5;
  *(void *)(v0 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = v6;
  *(void *)(v0 + 48) = v7;
  *(void *)(v0 + 5sub_10005B218(v0, v2, v1, 6) = v8;
  *(_BYTE *)(v0 + 64) = v9;
}

uint64_t sub_10013DE90()
{
  return v0;
}

void sub_10013DEA0(uint64_t a1)
{
}

void sub_10013DEA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41)
{
}

void *sub_10013DEB8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35)
{
  return sub_10013B8A0(&a35);
}

void *sub_10013DEC0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  return sub_10013B8A0(&a37);
}

uint64_t sub_10013DEC8(uint64_t a1)
{
  return String.hash(into:)(a1, v2, v1);
}

  ;
}

void sub_10013DEE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

uint64_t sub_10013DEEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
  *(void *)(v33 - 25sub_10005B218(v0, v2, v1, 6) = v31;
  *(void *)(v33 - 248) = v32;
  return sub_10011C5F4((uint64_t)&a31);
}

  ;
}

uint64_t sub_10013DF0C()
{
  return 0LL;
}

void sub_10013DF20(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 64) = v1;
}

void *sub_10013DF28()
{
  return sub_10013B8A0((void *)(v0 - 192));
}

uint64_t sub_10013DF30()
{
  return sub_100123380(v0, v1);
}

void sub_10013DF3C()
{
}

uint64_t sub_10013DF48(uint64_t result, int a2)
{
  *(void *)(result + 8) = (a2 - 1);
  return result;
}

uint64_t sub_10013DF54(uint64_t a1)
{
  return sub_100127B04(a1, v1);
}

void sub_10013DF60()
{
}

void sub_10013DF6C()
{
}

void sub_10013DF78( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41)
{
}

void sub_10013DF84()
{
}

void sub_10013DF90( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41)
{
}

__n128 sub_10013DF9C( __n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, __n128 a18, unint64_t a19)
{
  __n128 result = a18;
  a1[1] = a18;
  a1[2].n128_u64[0] = a19;
  return result;
}

void *sub_10013DFB0( const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return sub_10012C340(a1, va);
}

void sub_10013DFB8()
{
}

uint64_t sub_10013DFC4()
{
  return v0;
}

uint64_t sub_10013DFD8()
{
  return v0;
}

  ;
}

void AvroPrimitive.get<A>()(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }

uint64_t sub_10013E03C()
{
  char v5 = v2 & 1;
  int v3 = swift_dynamicCast(v1, &v5, &type metadata for Bool, v0, 6LL);
  return sub_100009654(v1, v3 ^ 1u, 1LL, v0);
}

uint64_t sub_10013E144(uint64_t a1)
{
  uint64_t v9 = sub_10000941C(&qword_1001D4168);
  unint64_t v10 = sub_100127C44();
  v8[0] = a1;
  char v2 = sub_100019AFC(v8, v9);
  uint64_t v3 = *v2 + 32LL;
  uint64_t v4 = v3 + *(void *)(*v2 + 16LL);
  swift_bridgeObjectRetain(a1);
  sub_1000B8D40(v3, v4, &v7);
  swift_bridgeObjectRelease();
  uint64_t v5 = v7;
  sub_1000108B8(v8);
  return v5;
}

uint64_t sub_10013E1E4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_100127AE0(v3, a2, a3, 6);
}

double sub_10013E1F0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    char v7 = *(_BYTE *)(a1 + 48);
    sub_100140934(v5, v6, v7);
    uint64_t v4 = 1LL;
  }

  else
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    char v7 = -1;
  }

  *(void *)a2 = a1;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(a2 + swift_weakLoadStrong(v0 + 24) = v6;
  *(_BYTE *)(a2 + 3sub_1000108B8(v0 + 2) = v7;
  *(void *)&double result = swift_bridgeObjectRetain(a1).n128_u64[0];
  return result;
}

uint64_t AvroSchemaEncoder.outputFormatting.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t AvroSchemaEncoder.OutputFormatting.indentation.setter(uint64_t result)
{
  if (result < 0) {
    __break(1u);
  }
  else {
    *uint64_t v1 = result;
  }
  return result;
}

uint64_t *(*AvroSchemaEncoder.OutputFormatting.indentation.modify( void *a1))(uint64_t *result, char a2)
{
  *a1 = *v1;
  a1[1] = v1;
  return sub_10013E294;
}

uint64_t *sub_10013E294(uint64_t *result, char a2)
{
  uint64_t v2 = *result;
  if ((a2 & 1) != 0)
  {
    if ((v2 & 0x8000000000000000LL) == 0)
    {
LABEL_5:
      *(void *)result[1] = v2;
      return result;
    }

    __break(1u);
  }

  if ((v2 & 0x8000000000000000LL) == 0) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void AvroSchemaEncoder.hash(into:)(int a1, Swift::UInt a2)
{
}

void AvroSchemaEncoder.hashValue.getter(uint64_t a1)
{
}

void sub_10013E300()
{
}

void sub_10013E308(int a1)
{
}

Swift::Int sub_10013E310(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10013E350(void *a1, void *a2)
{
  return static AvroSchemaEncoder.__derived_struct_equals(_:_:)(*a1, *a2);
}

Swift::Int AvroSchemaEncoder.encodeBytes(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int result = sub_10013E3E8();
  if (!v2)
  {
    uint64_t v5 = sub_10013E470(result, a2);
    swift_bridgeObjectRelease();
    return v5;
  }

  return result;
}

uint64_t type metadata accessor for SchemaEncoder()
{
  return objc_opt_self(&OBJC_CLASS____TtC9SwiftAvro13SchemaEncoder);
}

uint64_t sub_10013E3E8()
{
  uint64_t v2 = v1;
  swift_allocObject(v0, 56LL, 7LL);
  uint64_t v3 = sub_10013F5B8();
  swift_retain();
  uint64_t v4 = (void *)swift_retain();
  sub_10013F6B0(v4);
  if (!v1)
  {
    uint64_t v2 = v3[5];
    swift_bridgeObjectRetain(v2);
  }

  swift_release();
  return v2;
}

uint64_t sub_10013E470(Swift::Int a1, uint64_t a2)
{
  Swift::Int v4 = sub_10013F2F4(a1);
  sub_100031574(0LL, v4 & ~(v4 >> 63), 0LL, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v6 = v5;
  sub_10013E1F0(a1, (uint64_t)&v142);
  __int128 v146 = v142;
  int v7 = v145;
  uint64_t v8 = 0LL;
  unint64_t v9 = *((void *)&v142 + 1);
  uint64_t v138 = v142;
  uint64_t v139 = a2;
  uint64_t v137 = v142 + 32;
  uint64_t v135 = -a2;
  uint64_t v10 = v143;
  unint64_t v11 = v144;
LABEL_2:
  unint64_t v12 = *(void *)(v138 + 16);
  Swift::Int v13 = v10;
  unint64_t v14 = v11;
  uint64_t v136 = v8;
  uint64_t v15 = v8;
  while (2)
  {
    uint64_t v141 = v15;
    if (v9 == v12)
    {
      int v16 = v7;
      uint64_t v8 = v15;
      uint64_t v10 = 0LL;
      uint64_t v140 = 0LL;
      int v7 = 255;
      unint64_t v9 = v12;
    }

    else
    {
      if ((v9 & 0x8000000000000000LL) != 0) {
        goto LABEL_122;
      }
      if (v9 >= *(void *)(v138 + 16)) {
        goto LABEL_123;
      }
      int v16 = v7;
      unint64_t v17 = v9 + 1;
      uint64_t v18 = v137 + 24 * v9;
      int v7 = *(unsigned __int8 *)(v18 + 16);
      uint64_t v19 = *(void *)v18;
      uint64_t v140 = *(void *)(v18 + 8);
      sub_100140934(*(void *)v18, v140, *(_BYTE *)(v18 + 16));
      uint64_t v8 = v141;
      uint64_t v10 = v19;
      unint64_t v9 = v17;
    }

    unint64_t v11 = v140;
    switch(v16)
    {
      case 0:
        if ((v13 & 1) != 0) {
          char v31 = 123;
        }
        else {
          char v31 = 91;
        }
        unint64_t v33 = *(void *)(v6 + 16);
        unint64_t v32 = *(void *)(v6 + 24);
        unint64_t v34 = v33 + 1;
        if (v33 >= v32 >> 1)
        {
          uint64_t v101 = v10;
          uint64_t v102 = v6;
          unint64_t v103 = v9;
          sub_100031574(v32 > 1, v33 + 1, 1LL, v102);
          uint64_t v8 = v141;
          unint64_t v9 = v103;
          uint64_t v6 = v104;
          uint64_t v10 = v101;
        }

        *(void *)(v6 + swift_weakDestroy(v0 + 16) = v34;
        *(_BYTE *)(v6 + v33 + 3sub_1000108B8(v0 + 2) = v31;
        if (v139 < 1) {
          goto LABEL_113;
        }
        BOOL v35 = __OFADD__(v8, v139);
        v8 += v139;
        if (v35) {
          goto LABEL_124;
        }
        unint64_t v36 = *(void *)(v6 + 24);
        if ((uint64_t)(v33 + 2) > (uint64_t)(v36 >> 1))
        {
          uint64_t v110 = v10;
          uint64_t v111 = v6;
          unint64_t v112 = v9;
          uint64_t v113 = v8;
          sub_100031574(v36 > 1, v33 + 2, 1LL, v111);
          uint64_t v8 = v113;
          unint64_t v9 = v112;
          uint64_t v6 = v114;
          uint64_t v10 = v110;
        }

        *(void *)(v6 + swift_weakDestroy(v0 + 16) = v33 + 2;
        *(_BYTE *)(v6 + v34 + 3sub_1000108B8(v0 + 2) = 10;
        if (v8 < 0) {
          goto LABEL_125;
        }
        if (v8)
        {
          unint64_t v37 = v33 + 34;
          uint64_t v38 = v8;
          do
          {
            unint64_t v39 = *(void *)(v6 + 24);
            if (v37 - 32 >= v39 >> 1)
            {
              uint64_t v40 = v10;
              uint64_t v41 = v6;
              unint64_t v42 = v9;
              uint64_t v43 = v8;
              sub_100031574(v39 > 1, v37 - 31, 1LL, v41);
              uint64_t v8 = v43;
              unint64_t v9 = v42;
              uint64_t v6 = v44;
              uint64_t v10 = v40;
            }

            *(void *)(v6 + swift_weakDestroy(v0 + 16) = v37 - 31;
            *(_BYTE *)(v6 + v37++) = 32;
            --v38;
          }

          while (v38);
        }

        goto LABEL_113;
      case 1:
        if (v7 == 1 || v7 == 255)
        {
          unint64_t v20 = v9;
          if ((v13 & 1) != 0) {
            char v21 = 125;
          }
          else {
            char v21 = 93;
          }
          uint64_t v22 = v10;
          sub_1001412DC(v10, v140, v7);
          unint64_t v24 = *(void *)(v6 + 16);
          unint64_t v23 = *(void *)(v6 + 24);
          if (v24 >= v23 >> 1)
          {
            sub_100031574(v23 > 1, v24 + 1, 1LL, v6);
            uint64_t v6 = v29;
          }

          *(void *)(v6 + swift_weakDestroy(v0 + 16) = v24 + 1;
          *(_BYTE *)(v6 + v24 + 3sub_1000108B8(v0 + 2) = v21;
          if (v139 < 1)
          {
            sub_1001412F0(v22, v140, v7);
            uint64_t v10 = v22;
            uint64_t v8 = v136;
            unint64_t v9 = v20;
            goto LABEL_114;
          }

          if (v7 == 255) {
            goto LABEL_119;
          }
          sub_1001412F0(v22, v140, v7);
          uint64_t v25 = v141;
          uint64_t v26 = v141 - v139;
          if (__OFSUB__(v141, v139))
          {
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
            goto LABEL_129;
          }

          if (v26 < 0) {
            goto LABEL_121;
          }
          unint64_t v28 = *(void *)(v6 + 16);
          unint64_t v27 = *(void *)(v6 + 24);
          if (v28 >= v27 >> 1)
          {
            sub_100031574(v27 > 1, v28 + 1, 1LL, v6);
            uint64_t v25 = v141;
            uint64_t v6 = v30;
          }

          uint64_t v15 = 0LL;
          *(void *)(v6 + swift_weakDestroy(v0 + 16) = v28 + 1;
          *(_BYTE *)(v6 + v28 + 3sub_1000108B8(v0 + 2) = 10;
          Swift::Int v13 = v22;
          unint64_t v14 = v140;
          unint64_t v9 = v20;
          if (v26)
          {
            uint64_t v10 = v22;
            unint64_t v69 = v28 + 33;
            uint64_t v70 = v135 + v25;
            do
            {
              unint64_t v71 = *(void *)(v6 + 24);
              if (v69 - 32 >= v71 >> 1)
              {
                sub_100031574(v71 > 1, v69 - 31, 1LL, v6);
                unint64_t v9 = v20;
                uint64_t v6 = v72;
                uint64_t v10 = v22;
              }

              *(void *)(v6 + swift_weakDestroy(v0 + 16) = v69 - 31;
              *(_BYTE *)(v6 + v69++) = 32;
              --v70;
            }

            while (v70);
            uint64_t v8 = v141 - v139;
            goto LABEL_113;
          }

          continue;
        }

        if ((v13 & 1) != 0) {
          char v73 = 125;
        }
        else {
          char v73 = 93;
        }
        unint64_t v75 = *(void *)(v6 + 16);
        unint64_t v74 = *(void *)(v6 + 24);
        int64_t v76 = v74 >> 1;
        unint64_t v77 = v75 + 1;
        if (v74 >> 1 <= v75)
        {
          uint64_t v119 = v10;
          unint64_t v120 = v9;
          sub_100031574(v74 > 1, v75 + 1, 1LL, v6);
          uint64_t v8 = v141;
          unint64_t v9 = v120;
          uint64_t v6 = v121;
          uint64_t v10 = v119;
          unint64_t v74 = *(void *)(v6 + 24);
          int64_t v76 = v74 >> 1;
        }

        *(void *)(v6 + swift_weakDestroy(v0 + 16) = v77;
        *(_BYTE *)(v6 + v75 + 3sub_1000108B8(v0 + 2) = v73;
        unint64_t v78 = v75 + 2;
        if (v76 < (uint64_t)(v75 + 2))
        {
          uint64_t v122 = v10;
          unint64_t v123 = v9;
          sub_100031574(v74 > 1, v75 + 2, 1LL, v6);
          uint64_t v8 = v141;
          unint64_t v9 = v123;
          uint64_t v6 = v124;
          uint64_t v10 = v122;
        }

        *(void *)(v6 + swift_weakDestroy(v0 + 16) = v78;
        *(_BYTE *)(v6 + v77 + 3sub_1000108B8(v0 + 2) = 44;
        if (v139 >= 1)
        {
          unint64_t v79 = *(void *)(v6 + 24);
          if ((uint64_t)(v75 + 3) > (uint64_t)(v79 >> 1))
          {
            uint64_t v129 = v10;
            unint64_t v130 = v9;
            sub_100031574(v79 > 1, v75 + 3, 1LL, v6);
            uint64_t v8 = v141;
            unint64_t v9 = v130;
            uint64_t v6 = v131;
            uint64_t v10 = v129;
          }

          *(void *)(v6 + swift_weakDestroy(v0 + 16) = v75 + 3;
          *(_BYTE *)(v6 + v78 + 3sub_1000108B8(v0 + 2) = 10;
          if (v8 < 0) {
            goto LABEL_127;
          }
          if (v8)
          {
            for (uint64_t i = 0LL; i != v8; ++i)
            {
              unint64_t v81 = *(void *)(v6 + 24);
              if (v75 + i + 3 >= v81 >> 1)
              {
                uint64_t v82 = v10;
                uint64_t v83 = v6;
                unint64_t v84 = v9;
                sub_100031574(v81 > 1, v75 + i + 4, 1LL, v83);
                uint64_t v8 = v141;
                unint64_t v9 = v84;
                uint64_t v6 = v85;
                uint64_t v10 = v82;
              }

              *(void *)(v6 + swift_weakDestroy(v0 + 16) = v75 + i + 4;
              *(_BYTE *)(v6 + v75 + i + 35) = 32;
            }
          }
        }

LABEL_113:
        unint64_t v11 = v140;
LABEL_114:
        if (v7 != 255) {
          goto LABEL_2;
        }
LABEL_119:
        sub_100135A2C(&v146);
        return v6;
      case 2:
        if (v7 && v7 != 3) {
          goto LABEL_130;
        }
        uint64_t v45 = v10;
        unint64_t v46 = v9;
        unint64_t v48 = *(void *)(v6 + 16);
        unint64_t v47 = *(void *)(v6 + 24);
        if (v48 >= v47 >> 1)
        {
          sub_100031574(v47 > 1, v48 + 1, 1LL, v6);
          uint64_t v6 = v105;
        }

        *(void *)(v6 + swift_weakDestroy(v0 + 16) = v48 + 1;
        *(_BYTE *)(v6 + v48 + 3sub_1000108B8(v0 + 2) = 34;
        sub_10013F1CC(v13, v14);
        if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
        {
          sub_100031574(0LL, *(void *)(v6 + 16) + 1LL, 1LL, v6);
          uint64_t v6 = v106;
        }

        uint64_t v8 = v141;
        unint64_t v50 = *(void *)(v6 + 16);
        unint64_t v49 = *(void *)(v6 + 24);
        int64_t v51 = v49 >> 1;
        unint64_t v52 = v50 + 1;
        if (v49 >> 1 <= v50)
        {
          sub_100031574(v49 > 1, v50 + 1, 1LL, v6);
          uint64_t v8 = v141;
          unint64_t v9 = v46;
          uint64_t v6 = v107;
          uint64_t v10 = v45;
          unint64_t v49 = *(void *)(v6 + 24);
          int64_t v51 = v49 >> 1;
        }

        else
        {
          unint64_t v9 = v46;
          uint64_t v10 = v45;
        }

        *(void *)(v6 + swift_weakDestroy(v0 + 16) = v52;
        *(_BYTE *)(v6 + v50 + 3sub_1000108B8(v0 + 2) = 34;
        unint64_t v53 = v50 + 2;
        if (v51 < (uint64_t)(v50 + 2))
        {
          sub_100031574(v49 > 1, v50 + 2, 1LL, v6);
          uint64_t v8 = v141;
          unint64_t v9 = v46;
          uint64_t v6 = v108;
          uint64_t v10 = v45;
        }

        *(void *)(v6 + swift_weakDestroy(v0 + 16) = v53;
        *(_BYTE *)(v6 + v52 + 3sub_1000108B8(v0 + 2) = 58;
        if (v139 < 1) {
          goto LABEL_113;
        }
        unint64_t v54 = *(void *)(v6 + 24);
        unint64_t v55 = v50 + 3;
        if ((uint64_t)(v50 + 3) > (uint64_t)(v54 >> 1))
        {
          sub_100031574(v54 > 1, v50 + 3, 1LL, v6);
          uint64_t v8 = v141;
          unint64_t v9 = v46;
          uint64_t v6 = v109;
          uint64_t v10 = v45;
        }

        unint64_t v11 = v140;
        *(void *)(v6 + swift_weakDestroy(v0 + 16) = v55;
        *(_BYTE *)(v6 + v53 + 3sub_1000108B8(v0 + 2) = 32;
        goto LABEL_114;
      case 3:
        if (v7)
        {
          unint64_t v56 = v9;
          uint64_t v57 = v10;
          sub_1001412DC(v10, v140, v7);
          unint64_t v59 = *(void *)(v6 + 16);
          unint64_t v58 = *(void *)(v6 + 24);
          if (v59 >= v58 >> 1)
          {
            sub_100031574(v58 > 1, v59 + 1, 1LL, v6);
            uint64_t v6 = v125;
          }

          *(void *)(v6 + swift_weakDestroy(v0 + 16) = v59 + 1;
          *(_BYTE *)(v6 + v59 + 3sub_1000108B8(v0 + 2) = 34;
          sub_10013F1CC(v13, v14);
          if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
          {
            sub_100031574(0LL, *(void *)(v6 + 16) + 1LL, 1LL, v6);
            uint64_t v6 = v126;
          }

          unint64_t v61 = *(void *)(v6 + 16);
          unint64_t v60 = *(void *)(v6 + 24);
          unint64_t v62 = v61 + 1;
          uint64_t v8 = v141;
          if (v61 >= v60 >> 1)
          {
            sub_100031574(v60 > 1, v61 + 1, 1LL, v6);
            uint64_t v8 = v141;
            unint64_t v9 = v56;
            uint64_t v6 = v127;
          }

          else
          {
            unint64_t v9 = v56;
          }

          uint64_t v10 = v57;
          *(void *)(v6 + swift_weakDestroy(v0 + 16) = v62;
          *(_BYTE *)(v6 + v61 + 3sub_1000108B8(v0 + 2) = 34;
          if (v139 >= 1)
          {
            BOOL v35 = __OFSUB__(v8, v139);
            v8 -= v139;
            if (v35) {
              goto LABEL_128;
            }
            if (v8 < 0)
            {
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
              JUMPOUT(0x10013F034LL);
            }

            unint64_t v63 = *(void *)(v6 + 24);
            if ((uint64_t)(v61 + 2) > (uint64_t)(v63 >> 1))
            {
              uint64_t v132 = v8;
              sub_100031574(v63 > 1, v61 + 2, 1LL, v6);
              uint64_t v8 = v132;
              unint64_t v9 = v56;
              uint64_t v6 = v133;
              uint64_t v10 = v57;
            }

            *(void *)(v6 + swift_weakDestroy(v0 + 16) = v61 + 2;
            *(_BYTE *)(v6 + v62 + 3sub_1000108B8(v0 + 2) = 10;
            if (v8)
            {
              unint64_t v64 = v61 + 34;
              uint64_t v65 = v8;
              do
              {
                unint64_t v66 = *(void *)(v6 + 24);
                if (v64 - 32 >= v66 >> 1)
                {
                  uint64_t v67 = v8;
                  sub_100031574(v66 > 1, v64 - 31, 1LL, v6);
                  uint64_t v8 = v67;
                  unint64_t v9 = v56;
                  uint64_t v6 = v68;
                  uint64_t v10 = v57;
                }

                *(void *)(v6 + swift_weakDestroy(v0 + 16) = v64 - 31;
                *(_BYTE *)(v6 + v64++) = 32;
                --v65;
              }

              while (v65);
            }
          }
        }

        else
        {
          uint64_t v86 = v10;
          unint64_t v87 = v9;
          sub_100140934(v10, v140, 0);
          uint64_t v10 = v86;
          unint64_t v9 = v87;
LABEL_96:
          uint64_t v88 = v10;
          unint64_t v89 = v9;
          unint64_t v91 = *(void *)(v6 + 16);
          unint64_t v90 = *(void *)(v6 + 24);
          if (v91 >= v90 >> 1)
          {
            sub_100031574(v90 > 1, v91 + 1, 1LL, v6);
            uint64_t v6 = v115;
          }

          *(void *)(v6 + swift_weakDestroy(v0 + 16) = v91 + 1;
          *(_BYTE *)(v6 + v91 + 3sub_1000108B8(v0 + 2) = 34;
          sub_10013F1CC(v13, v14);
          if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
          {
            sub_100031574(0LL, *(void *)(v6 + 16) + 1LL, 1LL, v6);
            uint64_t v6 = v116;
          }

          uint64_t v8 = v141;
          unint64_t v93 = *(void *)(v6 + 16);
          unint64_t v92 = *(void *)(v6 + 24);
          int64_t v94 = v92 >> 1;
          unint64_t v95 = v93 + 1;
          if (v92 >> 1 <= v93)
          {
            sub_100031574(v92 > 1, v93 + 1, 1LL, v6);
            uint64_t v8 = v141;
            unint64_t v9 = v89;
            uint64_t v6 = v117;
            uint64_t v10 = v88;
            unint64_t v92 = *(void *)(v6 + 24);
            int64_t v94 = v92 >> 1;
          }

          else
          {
            unint64_t v9 = v89;
            uint64_t v10 = v88;
          }

          *(void *)(v6 + swift_weakDestroy(v0 + 16) = v95;
          *(_BYTE *)(v6 + v93 + 3sub_1000108B8(v0 + 2) = 34;
          unint64_t v96 = v93 + 2;
          if (v94 < (uint64_t)(v93 + 2))
          {
            sub_100031574(v92 > 1, v93 + 2, 1LL, v6);
            uint64_t v8 = v141;
            unint64_t v9 = v89;
            uint64_t v6 = v118;
            uint64_t v10 = v88;
          }

          *(void *)(v6 + swift_weakDestroy(v0 + 16) = v96;
          *(_BYTE *)(v6 + v95 + 3sub_1000108B8(v0 + 2) = 44;
          if (v139 >= 1)
          {
            unint64_t v97 = *(void *)(v6 + 24);
            if ((uint64_t)(v93 + 3) > (uint64_t)(v97 >> 1))
            {
              sub_100031574(v97 > 1, v93 + 3, 1LL, v6);
              uint64_t v8 = v141;
              unint64_t v9 = v89;
              uint64_t v6 = v128;
              uint64_t v10 = v88;
            }

            *(void *)(v6 + swift_weakDestroy(v0 + 16) = v93 + 3;
            *(_BYTE *)(v6 + v96 + 3sub_1000108B8(v0 + 2) = 10;
            if (v8 < 0) {
              goto LABEL_126;
            }
            if (v8)
            {
              for (uint64_t j = 0LL; j != v8; ++j)
              {
                unint64_t v99 = *(void *)(v6 + 24);
                if (v93 + j + 3 >= v99 >> 1)
                {
                  sub_100031574(v99 > 1, v93 + j + 4, 1LL, v6);
                  uint64_t v8 = v141;
                  unint64_t v9 = v89;
                  uint64_t v6 = v100;
                  uint64_t v10 = v88;
                }

                *(void *)(v6 + swift_weakDestroy(v0 + 16) = v93 + j + 4;
                *(_BYTE *)(v6 + v93 + j + 35) = 32;
              }
            }
          }
        }

        goto LABEL_113;
      default:
        goto LABEL_119;
    }
  }

uint64_t AvroSchemaEncoder.encode(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SchemaEncoder();
  Swift::Int v5 = sub_10013E3E8();
  if (!v2)
  {
    uint64_t v6 = sub_10013E470(v5, a2);
    swift_bridgeObjectRelease();
    uint64_t v4 = static String._fromUTF8Repairing(_:)(v6 + 32, *(void *)(v6 + 16));
    swift_bridgeObjectRelease();
  }

  return v4;
}

unint64_t sub_10013F0D8()
{
  unint64_t result = qword_1001DB750;
  if (!qword_1001DB750)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AvroSchemaEncoder.OutputFormatting,  &type metadata for AvroSchemaEncoder.OutputFormatting);
    atomic_store(result, (unint64_t *)&qword_1001DB750);
  }

  return result;
}

unint64_t sub_10013F118()
{
  unint64_t result = qword_1001DB758;
  if (!qword_1001DB758)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AvroSchemaEncoder,  &type metadata for AvroSchemaEncoder);
    atomic_store(result, (unint64_t *)&qword_1001DB758);
  }

  return result;
}

void type metadata accessor for AvroSchemaEncoder()
{
}

void type metadata accessor for AvroSchemaEncoder.OutputFormatting()
{
}

void sub_10013F16C(uint64_t a1)
{
  uint64_t v3 = *v1;
  if (!swift_isUniquelyReferenced_nonNull_native(*v1) || a1 > *(void *)(v3 + 24) >> 1)
  {
    sub_100135560();
    uint64_t v3 = v4;
  }

  *uint64_t v1 = v3;
}

Swift::Int sub_10013F1CC(Swift::Int result, unint64_t a2)
{
  Swift::Int v4 = result;
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unint64_t result = String.UTF8View._foreignCount()();
    uint64_t v5 = result;
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    uint64_t v5 = HIBYTE(a2) & 0xF;
  }

  else
  {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v6 = *v2;
  uint64_t v7 = *(void *)(*v2 + 16);
  uint64_t v8 = v7 + v5;
  if (__OFADD__(v7, v5))
  {
    __break(1u);
  }

  else
  {
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    *uint64_t v2 = v6;
    if (!(_DWORD)isUniquelyReferenced_nonNull_native || (uint64_t v10 = *(void *)(v6 + 24) >> 1, v10 < v8))
    {
      if (v7 <= v8) {
        uint64_t v11 = v7 + v5;
      }
      else {
        uint64_t v11 = v7;
      }
      sub_100031574(isUniquelyReferenced_nonNull_native, v11, 1LL, v6);
      uint64_t v6 = v12;
      *uint64_t v2 = v12;
      uint64_t v10 = *(void *)(v12 + 24) >> 1;
    }

    uint64_t v13 = *(void *)(v6 + 16);
    uint64_t v14 = v10 - v13;
    uint64_t v15 = v6 + v13 + 32;
    swift_bridgeObjectRetain(a2);
    unint64_t result = _StringGuts.copyUTF8(into:)(v15, v14, v4, a2);
    if ((v16 & 1) != 0) {
      goto LABEL_22;
    }
    uint64_t v17 = result;
    unint64_t result = swift_bridgeObjectRelease_n(a2, 2LL);
    if (v17 >= v5)
    {
      if (v17 < 1)
      {
LABEL_17:
        *uint64_t v2 = v6;
        return result;
      }

      uint64_t v18 = *(void *)(v6 + 16);
      BOOL v19 = __OFADD__(v18, v17);
      uint64_t v20 = v18 + v17;
      if (!v19)
      {
        *(void *)(v6 + swift_weakDestroy(v0 + 16) = v20;
        goto LABEL_17;
      }

      goto LABEL_21;
    }
  }

  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

Swift::Int sub_10013F2F4(Swift::Int result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0LL;
    for (uint64_t i = (unsigned __int8 *)(result + 48); ; i += 24)
    {
      unsigned int v4 = *i;
      if (v4 >= 2)
      {
        uint64_t v6 = *((void *)i - 2);
        unint64_t v7 = *((void *)i - 1);
        if (v4 == 2)
        {
          if ((v7 & 0x1000000000000000LL) != 0)
          {
            unint64_t result = String.UTF8View._foreignCount()();
          }

          else if ((v7 & 0x2000000000000000LL) != 0)
          {
            unint64_t result = HIBYTE(v7) & 0xF;
          }

          else
          {
            unint64_t result = v6 & 0xFFFFFFFFFFFFLL;
          }

          uint64_t v5 = result + 3;
          if (__OFADD__(result, 3LL)) {
            goto LABEL_26;
          }
        }

        else
        {
          if ((v7 & 0x1000000000000000LL) != 0)
          {
            unint64_t result = String.UTF8View._foreignCount()();
          }

          else if ((v7 & 0x2000000000000000LL) != 0)
          {
            unint64_t result = HIBYTE(v7) & 0xF;
          }

          else
          {
            unint64_t result = v6 & 0xFFFFFFFFFFFFLL;
          }

          uint64_t v5 = result + 2;
          if (__OFADD__(result, 2LL)) {
            goto LABEL_27;
          }
        }
      }

      else
      {
        uint64_t v5 = 1LL;
      }

      BOOL v8 = __OFADD__(v2, v5);
      v2 += v5;
      if (v8) {
        break;
      }
      if (!--v1) {
        return v2;
      }
    }

    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }

  else
  {
    return 0LL;
  }

  return result;
}

void sub_10013F3B4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }

void sub_10013F3EC()
{
}

uint64_t sub_10013F444(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)(void))((char *)sub_10013F460 + 4 * byte_1001686B4[a3]))();
}

BOOL sub_10013F460(unsigned __int8 a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, char a6)
{
  return !a6 && ((a4 ^ a1) & 1) == 0LL;
}

Swift::Int sub_10013F4D8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10007AFDC();
}

Swift::Int sub_10013F528()
{
  return sub_10013F4D8(*(void *)v0, *(void *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

void sub_10013F534(uint64_t a1)
{
}

Swift::Int sub_10013F540(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  char v4 = *(_BYTE *)(v1 + 16);
  Hasher.init(_seed:)(v6, a1);
  sub_10013F3B4((uint64_t)v6, v2, v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_10013F594(uint64_t a1)
{
  return sub_10013F444(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void sub_10013F5B0()
{
}

void *sub_10013F5B8()
{
  uint64_t v1 = type metadata accessor for CodingUserInfoKey(0LL);
  v0[3] = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  v1,  (char *)&type metadata for Any + 8,  &protocol witness table for CodingUserInfoKey);
  v0[4] = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for AvroRecordSchema,  &protocol witness table for String);
  v0[6] = _swiftEmptyArrayStorage;
  v0[2] = _swiftEmptyArrayStorage;
  v0[5] = _swiftEmptyArrayStorage;
  sub_10013F16C(64LL);
  return v0;
}

void sub_10013F64C()
{
}

void sub_10013F680()
{
}

void sub_10013F6B0(void *a1)
{
  unint64_t v3 = *(void *)(a1[6] + 16LL);
  uint64_t v4 = a1[2];
  swift_bridgeObjectRetain(v4);
  sub_10013F64C();
  if (!v1)
  {
    for (uint64_t i = a1[6]; v3 < *(void *)(i + 16); uint64_t i = a1[6])
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(i);
      a1[6] = i;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10013B660();
        uint64_t i = v34;
        a1[6] = v34;
      }

      uint64_t v24 = *(void *)(i + 16);
      if (!v24) {
        goto LABEL_37;
      }
      uint64_t v25 = v24 - 1;
      char v26 = *(_BYTE *)(i + v25 + 32);
      *(void *)(i + swift_weakDestroy(v0 + 16) = v25;
      a1[6] = i;
      uint64_t v27 = a1[5];
      char v28 = swift_isUniquelyReferenced_nonNull_native(v27);
      a1[5] = v27;
      if ((v26 & 1) != 0)
      {
        if ((v28 & 1) == 0)
        {
          sub_100135560();
          uint64_t v27 = v35;
          a1[5] = v35;
        }

        unint64_t v29 = *(void *)(v27 + 16);
        if (v29 >= *(void *)(v27 + 24) >> 1)
        {
          sub_100135560();
          uint64_t v27 = v36;
          a1[5] = v36;
        }

        *(void *)(v27 + swift_weakDestroy(v0 + 16) = v29 + 1;
        uint64_t v30 = v27 + 24 * v29;
        *(_OWORD *)(v30 + 3sub_1000108B8(v0 + 2) = xmmword_1001652F0;
        uint64_t v31 = v30 + 32;
      }

      else
      {
        if ((v28 & 1) == 0)
        {
          sub_100135560();
          uint64_t v27 = v37;
          a1[5] = v37;
        }

        unint64_t v32 = *(void *)(v27 + 16);
        if (v32 >= *(void *)(v27 + 24) >> 1)
        {
          sub_100135560();
          uint64_t v27 = v38;
          a1[5] = v38;
        }

        *(void *)(v27 + swift_weakDestroy(v0 + 16) = v32 + 1;
        uint64_t v33 = v27 + 24 * v32;
        *(void *)(v33 + 3sub_1000108B8(v0 + 2) = 0LL;
        *(void *)(v33 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = 0LL;
        uint64_t v31 = v33 + 32;
      }

      *(_BYTE *)(v31 + swift_weakDestroy(v0 + 16) = 1;
    }

void sub_10013FA28(void (*a1)(__n128))
{
  unint64_t v4 = *(void *)(v1[6] + 16LL);
  uint64_t v5 = v1[2];
  __n128 v6 = swift_bridgeObjectRetain(v5);
  a1(v6);
  if (!v2)
  {
    for (uint64_t i = v1[6]; v4 < *(void *)(i + 16); uint64_t i = v1[6])
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(i);
      v1[6] = i;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10013B660();
        uint64_t i = v36;
        v1[6] = v36;
      }

      uint64_t v26 = *(void *)(i + 16);
      if (!v26) {
        goto LABEL_37;
      }
      uint64_t v27 = v26 - 1;
      char v28 = *(_BYTE *)(i + v27 + 32);
      *(void *)(i + swift_weakDestroy(v0 + 16) = v27;
      v1[6] = i;
      uint64_t v29 = v1[5];
      char v30 = swift_isUniquelyReferenced_nonNull_native(v29);
      v1[5] = v29;
      if ((v28 & 1) != 0)
      {
        if ((v30 & 1) == 0)
        {
          sub_100135560();
          uint64_t v29 = v37;
          v1[5] = v37;
        }

        unint64_t v31 = *(void *)(v29 + 16);
        if (v31 >= *(void *)(v29 + 24) >> 1)
        {
          sub_100135560();
          uint64_t v29 = v38;
          v1[5] = v38;
        }

        *(void *)(v29 + swift_weakDestroy(v0 + 16) = v31 + 1;
        uint64_t v32 = v29 + 24 * v31;
        *(_OWORD *)(v32 + 3sub_1000108B8(v0 + 2) = xmmword_1001652F0;
        uint64_t v33 = v32 + 32;
      }

      else
      {
        if ((v30 & 1) == 0)
        {
          sub_100135560();
          uint64_t v29 = v39;
          v1[5] = v39;
        }

        unint64_t v34 = *(void *)(v29 + 16);
        if (v34 >= *(void *)(v29 + 24) >> 1)
        {
          sub_100135560();
          uint64_t v29 = v40;
          v1[5] = v40;
        }

        *(void *)(v29 + swift_weakDestroy(v0 + 16) = v34 + 1;
        uint64_t v35 = v29 + 24 * v34;
        *(void *)(v35 + 3sub_1000108B8(v0 + 2) = 0LL;
        *(void *)(v35 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = 0LL;
        uint64_t v33 = v35 + 32;
      }

      *(_BYTE *)(v33 + swift_weakDestroy(v0 + 16) = 1;
    }

uint64_t sub_10013FD7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(v3[5] + 16LL);
  sub_10013579C(v6);
  sub_10014190C(v6 + 1);
  uint64_t v9 = v8 + v6 * v7;
  *(_OWORD *)(v9 + 3sub_1000108B8(v0 + 2) = xmmword_1001652F0;
  *(_BYTE *)(v9 + 48) = 0;
  sub_100135720();
  uint64_t v10 = *(void *)(v3[6] + 16LL);
  sub_100135790(v10);
  uint64_t v11 = v3[6];
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v10 + 1;
  *(_BYTE *)(v11 + v10 + 3sub_1000108B8(v0 + 2) = 1;
  uint64_t v16 = v3[2];
  unint64_t v17 = v3;
  uint64_t v13 = type metadata accessor for KeyedContainer(0LL, a2, a3, v12);
  swift_bridgeObjectRetain(v16);
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1001689A8, v13);
  return KeyedEncodingContainer.init<A>(_:)(&v16, a2, v13, WitnessTable);
}

uint64_t sub_10013FE70()
{
  uint64_t v2 = (uint64_t)v0;
  sub_10014192C();
  uint64_t v3 = *(void *)(v0[5] + 16LL);
  sub_10013579C(v3);
  sub_10014190C(v3 + 1);
  uint64_t v6 = v5 + v3 * v4;
  *(void *)(v6 + 3sub_1000108B8(v0 + 2) = 0LL;
  *(void *)(v6 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = 0LL;
  *(_BYTE *)(v6 + 48) = 0;
  sub_100135720();
  uint64_t v7 = *(void *)(v0[6] + 16LL);
  sub_100135790(v7);
  uint64_t v8 = v0[6];
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v7 + 1;
  *(_BYTE *)(v8 + v7 + 3sub_1000108B8(v0 + 2) = 0;
  uint64_t v9 = v0[2];
  _OWORD v1[3] = &unk_1001BE838;
  v1[4] = sub_100141294();
  *uint64_t v1 = 0LL;
  v1[1] = v9;
  v1[2] = v2;
  swift_bridgeObjectRetain(v9);
  return sub_100141900(v2);
}

uint64_t sub_10013FF10@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  a1[3] = &unk_1001BE8C0;
  a1[4] = sub_100140B50();
  *a1 = v3;
  a1[1] = v1;
  swift_bridgeObjectRetain(v3);
  return sub_100141900(v1);
}

void sub_10013FF54(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(*(void *)(v2 + 40) + 16LL);
  sub_10013579C(v5);
  sub_10014190C(v5 + 1);
  uint64_t v8 = v7 + v5 * v6;
  *(void *)(v8 + 3sub_1000108B8(v0 + 2) = a1;
  *(void *)(v8 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = a2;
  *(_BYTE *)(v8 + 48) = 3;
}

void sub_10013FFC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = dispatch thunk of CodingKey.stringValue.getter(a4, a5);
  uint64_t v10 = v9;
  sub_10013572C();
  uint64_t v11 = *(void *)(*(void *)(v5 + 40) + 16LL);
  sub_10013579C(v11);
  sub_10014190C(v11 + 1);
  uint64_t v14 = v13 + v11 * v12;
  *(void *)(v14 + 3sub_1000108B8(v0 + 2) = v8;
  *(void *)(v14 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = v10;
  *(_BYTE *)(v14 + 48) = 2;
  sub_10013FF54(a1, a2);
}

uint64_t sub_100140064(unint64_t a1, void *a2)
{
  if (a1 >> 61 == 3)
  {
    __int128 v5 = *(_OWORD *)(a1 + 32);
    v8[0] = *(_OWORD *)(a1 + 16);
    v8[1] = v5;
    void v8[2] = *(_OWORD *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 64);
    swift_retain();
    sub_100140558((uint64_t)v8);
    return swift_release();
  }

  if (!(a1 >> 61))
  {
    unsigned __int8 v4 = *(_BYTE *)(a1 + 16);
    swift_retain();
    sub_1001403F4(v4);
    return swift_release();
  }

  void v7[3] = *a2;
  void v7[4] = sub_1001415F0();
  v7[0] = a2;
  swift_retain();
  swift_retain();
  AvroSchema.encode(to:)((uint64_t)v7, a1);
  swift_release();
  return sub_1000108B8(v7);
}

void *sub_100140154(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a4;
  uint64_t v7 = *a2;
  uint64_t v8 = __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v23 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v23 - v14;
  unint64_t v17 = *(void (**)(char *, uint64_t))(v16 + 16);
  v17((char *)&v23 - v14, a1);
  if ((swift_dynamicCast(&v24, v15, a3, &type metadata for AvroSchema, 6LL) & 1) != 0)
  {
    uint64_t v18 = v24;
    if ((unint64_t)v24 >> 61 == 3)
    {
      __int128 v22 = *(_OWORD *)(v24 + 32);
      v28[0] = *(_OWORD *)(v24 + 16);
      v28[1] = v22;
      v28[2] = *(_OWORD *)(v24 + 48);
      uint64_t v29 = *(void *)(v24 + 64);
      swift_retain();
      sub_100140558((uint64_t)v28);
      uint64_t v20 = v18 & 0x1FFFFFFFFFFFFFFFLL;
      return (void *)swift_release_n(v20, 2LL);
    }

    if (!((unint64_t)v24 >> 61))
    {
      unsigned __int8 v19 = *(_BYTE *)(v24 + 16);
      swift_retain();
      sub_1001403F4(v19);
      uint64_t v20 = v18 & 0x1FFFFFFFFFFFFFFFLL;
      return (void *)swift_release_n(v20, 2LL);
    }

    *((void *)&v25 + Hasher._combine(_:)(v0 & 1) = v7;
    *(void *)&__int128 v26 = sub_1001415F0();
    *(void *)&__int128 v24 = a2;
    swift_retain();
    dispatch thunk of Encodable.encode(to:)(&v24, a3, v32);
    swift_release();
  }

  else
  {
    ((void (*)(char *, uint64_t, uint64_t))v17)(v13, a1, a3);
    if ((swift_dynamicCast(&v24, v13, a3, &type metadata for AvroPrimitiveSchema, 6LL) & 1) != 0) {
      return (void *)sub_1001403F4(v24);
    }
    ((void (*)(char *, uint64_t, uint64_t))v17)(v10, a1, a3);
    if ((swift_dynamicCast(&v24, v10, a3, &type metadata for AvroRecordSchema, 6LL) & 1) != 0)
    {
      v30[0] = v24;
      v30[1] = v25;
      v30[2] = v26;
      uint64_t v31 = v27;
      sub_100140558((uint64_t)v30);
      return sub_100125804(v30);
    }

    *((void *)&v25 + Hasher._combine(_:)(v0 & 1) = v7;
    *(void *)&__int128 v26 = sub_1001415F0();
    *(void *)&__int128 v24 = a2;
    swift_retain();
    dispatch thunk of Encodable.encode(to:)(&v24, a3, v32);
  }

  return (void *)sub_1000108B8(&v24);
}

uint64_t sub_1001403F4(unsigned __int8 a1)
{
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v3 = (uint64_t *)(v1 + 40);
  if (*(void *)(v4 + 16))
  {
    uint64_t v5 = sub_1001249F4(a1);
    uint64_t v7 = v6;
    sub_10013572C();
    uint64_t v8 = *(void *)(*v3 + 16);
    uint64_t result = sub_10013579C(v8);
    uint64_t v10 = *v3;
    *(void *)(v10 + swift_weakDestroy(v0 + 16) = v8 + 1;
    uint64_t v11 = v10 + 24 * v8;
    *(void *)(v11 + 3sub_1000108B8(v0 + 2) = v5;
    uint64_t v12 = v11 + 32;
    char v13 = 3;
  }

  else
  {
    sub_10013572C();
    uint64_t v14 = *(void *)(*v3 + 16);
    sub_10013579C(v14);
    uint64_t v15 = *v3;
    *(void *)(v15 + swift_weakDestroy(v0 + 16) = v14 + 1;
    uint64_t v16 = v15 + 24 * v14;
    *(_OWORD *)(v16 + 3sub_1000108B8(v0 + 2) = xmmword_1001652F0;
    *(_BYTE *)(v16 + 48) = 0;
    sub_10013572C();
    uint64_t v17 = *(void *)(*v3 + 16);
    sub_10013579C(v17);
    uint64_t v18 = *v3;
    *(void *)(v18 + swift_weakDestroy(v0 + 16) = v17 + 1;
    uint64_t v19 = v18 + 24 * v17;
    *(_OWORD *)(v19 + 3sub_1000108B8(v0 + 2) = xmmword_100168D40;
    *(_BYTE *)(v19 + 48) = 2;
    uint64_t v20 = sub_1001249F4(a1);
    uint64_t v22 = v21;
    sub_10013572C();
    uint64_t v23 = *(void *)(*v3 + 16);
    sub_10013579C(v23);
    uint64_t v24 = *v3;
    *(void *)(v24 + swift_weakDestroy(v0 + 16) = v23 + 1;
    uint64_t v25 = v24 + 24 * v23;
    *(void *)(v25 + 3sub_1000108B8(v0 + 2) = v20;
    *(void *)(v25 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = v22;
    *(_BYTE *)(v25 + 48) = 3;
    sub_10013572C();
    uint64_t v26 = *(void *)(*v3 + 16);
    uint64_t result = sub_10013579C(v26);
    uint64_t v7 = 0LL;
    uint64_t v27 = *v3;
    *(void *)(v27 + swift_weakDestroy(v0 + 16) = v26 + 1;
    uint64_t v28 = v27 + 24 * v26;
    char v13 = 1;
    *(void *)(v28 + 3sub_1000108B8(v0 + 2) = 1LL;
    uint64_t v12 = v28 + 32;
  }

  *(void *)(v12 + 8) = v7;
  *(_BYTE *)(v12 + swift_weakDestroy(v0 + 16) = v13;
  return result;
}

uint64_t sub_100140558(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v1;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  swift_beginAccess(v1 + 4, v26, 33LL, 0LL);
  swift_bridgeObjectRetain(v7);
  sub_10005B5EC((void *)a1);
  sub_1001413D4(a1, v6, v7, (uint64_t)&v27);
  swift_endAccess(v26);
  swift_bridgeObjectRelease();
  uint64_t v8 = *((void *)&v27 + 1);
  if (!*((void *)&v27 + 1))
  {
    *((void *)&v28 + Hasher._combine(_:)(v0 & 1) = v5;
    *(void *)&__int128 v29 = sub_1001415F0();
    *(void *)&__int128 v27 = v3;
    swift_retain();
    AvroRecordSchema.encode(to:)(&v27);
    return sub_1000108B8(&v27);
  }

  uint64_t v24 = v5;
  uint64_t v25 = v3;
  uint64_t v35 = v2;
  uint64_t v9 = v27;
  __int128 v10 = v28;
  __int128 v11 = v29;
  uint64_t v12 = v30;
  __int128 v31 = v27;
  __int128 v32 = v28;
  __int128 v33 = v29;
  uint64_t v34 = v30;
  static AvroRecordSchema.__derived_struct_equals(_:_:)();
  if ((v13 & 1) != 0)
  {
    sub_100141668(v9, v8, v10, *((uint64_t *)&v10 + 1), v11, *((uint64_t *)&v11 + 1), v12);
    *((void *)&v28 + Hasher._combine(_:)(v0 & 1) = v24;
    *(void *)&__int128 v29 = sub_1001415F0();
    *(void *)&__int128 v27 = v25;
    swift_retain();
    String.encode(to:)(&v27, v6, v7);
    return sub_1000108B8(&v27);
  }

  uint64_t v15 = swift_allocObject(&unk_1001BE760, 72LL, 7LL);
  __int128 v16 = v32;
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = v31;
  *(_OWORD *)(v15 + 3sub_1000108B8(v0 + 2) = v16;
  *(_OWORD *)(v15 + 48) = v33;
  *(void *)(v15 + 64) = v34;
  uint64_t v17 = v15 | 0x6000000000000000LL;
  uint64_t v18 = swift_allocObject(&unk_1001BE760, 72LL, 7LL);
  __int128 v19 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v18 + 3sub_1000108B8(v0 + 2) = v19;
  *(_OWORD *)(v18 + 48) = *(_OWORD *)(a1 + 32);
  *(void *)(v18 + 64) = *(void *)(a1 + 48);
  uint64_t v20 = v18 | 0x6000000000000000LL;
  unint64_t v21 = sub_10013B73C();
  swift_allocError(&type metadata for SchemaMismatchError, v21, 0LL, 0LL);
  *uint64_t v22 = v17;
  v22[1] = v20;
  uint64_t v23 = sub_10005B5EC((void *)a1);
  return swift_willThrow(v23);
}

void sub_10014075C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = dispatch thunk of CodingKey.stringValue.getter(a4, a6);
  uint64_t v9 = v8;
  sub_10013572C();
  uint64_t v10 = *(void *)(*(void *)(v6 + 40) + 16LL);
  sub_10013579C(v10);
  sub_10014190C(v10 + 1);
  uint64_t v13 = v12 + v10 * v11;
  *(void *)(v13 + 3sub_1000108B8(v0 + 2) = v7;
  *(void *)(v13 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = v9;
  *(_BYTE *)(v13 + 48) = 2;
  sub_10013F680();
}

void *sub_10014080C()
{
  return v0;
}

uint64_t sub_100140848()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t sub_100140868(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = 1;
  }
  else {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1001408B4 + 4 * byte_1001686BD[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001408E8 + 4 * byte_1001686B8[v4]))();
}

uint64_t sub_1001408E8(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1001408F0(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1001408F8LL);
  }
  return result;
}

uint64_t sub_100140904(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x10014090CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100140910(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_100140918(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

void type metadata accessor for SchemaEncoder.ContainerKind()
{
}

uint64_t sub_100140934(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 0xFE) == 2) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_10014094C(uint64_t a1)
{
  return sub_10014095C(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_10014095C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 0xFE) == 2) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

void sub_100140974(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_100140934(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  sub_1000110D4();
}

uint64_t sub_1001409B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_100140934(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  sub_10014095C(v6, v7, v8);
  return a1;
}

uint64_t sub_100140A08(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  sub_10014095C(v4, v5, v6);
  return a1;
}

void type metadata accessor for SchemaEncoder.Token()
{
}

unint64_t sub_100140A5C()
{
  unint64_t result = qword_1001DB820;
  if (!qword_1001DB820)
  {
    unint64_t result = swift_getWitnessTable(&unk_100168824, &unk_1001BE740);
    atomic_store(result, (unint64_t *)&qword_1001DB820);
  }

  return result;
}

unint64_t sub_100140A9C()
{
  unint64_t result = qword_1001DB828;
  if (!qword_1001DB828)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001688CC, &unk_1001BE6B0);
    atomic_store(result, (unint64_t *)&qword_1001DB828);
  }

  return result;
}

uint64_t sub_100140AD8()
{
  return swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 16LL));
}

uint64_t sub_100140AE4()
{
  return swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 24LL));
}

uint64_t sub_100140AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013FD7C(a1, a2, a3);
}

uint64_t sub_100140B10()
{
  return sub_10013FE70();
}

uint64_t sub_100140B30@<X0>(void *a1@<X8>)
{
  return sub_10013FF10(a1);
}

unint64_t sub_100140B50()
{
  unint64_t result = qword_1001DB830;
  if (!qword_1001DB830)
  {
    unint64_t result = swift_getWitnessTable(&unk_100168C88, &unk_1001BE8C0);
    atomic_store(result, (unint64_t *)&qword_1001DB830);
  }

  return result;
}

void sub_100140B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100140BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_100140BD8()
{
}

void sub_100140BE4()
{
}

void sub_100140BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_100140C08()
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

uint64_t sub_100140C1C()
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

void sub_100140C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t sub_100140C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)(a1, a2, a5, a3, a6, a4);
}

uint64_t sub_100140C7C()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_100140C90()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_100140CA4(uint64_t a1, char a2)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1);
}

void sub_100140CBC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_100140CD8(uint64_t a1, char a2)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1);
}

void sub_100140CF0(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100140D0C(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100140D28(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_100140D44(uint64_t a1, char a2)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1);
}

uint64_t sub_100140D5C(uint64_t a1, uint64_t a2, char a3)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3 & 1);
}

uint64_t sub_100140D74(uint64_t a1, char a2)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1);
}

void sub_100140D8C(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100140DA8(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
}

void sub_100140DC4(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100140DE0(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
}

void sub_100140DFC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100140E18(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
}

uint64_t sub_100140E3C(uint64_t a1, char a2)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1);
}

uint64_t sub_100140E54(uint64_t a1, uint64_t a2, char a3)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3 & 1);
}

uint64_t sub_100140E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)(a1, a2, a5, a3, a6, a4);
}

void sub_100140E94(uint64_t a1, uint64_t a2)
{
  if (__OFADD__(*v2, 1LL))
  {
    __break(1u);
  }

  else
  {
    ++*v2;
    sub_10013FF54(a1, a2);
  }

void sub_100140ED0()
{
  if (__OFADD__(*v0, 1LL))
  {
    __break(1u);
  }

  else
  {
    ++*v0;
    sub_10013F680();
    sub_100141924();
  }

uint64_t sub_100140F00()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 8));
}

void sub_100140F08(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100140F1C()
{
  return UnkeyedEncodingContainer.encode(_:)();
}

uint64_t sub_100140F30()
{
  return UnkeyedEncodingContainer.encode(_:)();
}

void sub_100140F44()
{
}

uint64_t sub_100140F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encodeConditional<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100140F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100140FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100140FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100140FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100141020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100141048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100141070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100141098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001410C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001410E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100141110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100141138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100141160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100141188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001411B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1001411D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100141200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a5, a2, a6, a3, a4);
}

void sub_100141230(uint64_t a1, uint64_t a2)
{
}

void sub_100141258(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10014126C()
{
  return SingleValueEncodingContainer.encode(_:)();
}

uint64_t sub_100141280()
{
  return SingleValueEncodingContainer.encode(_:)();
}

unint64_t sub_100141294()
{
  unint64_t result = qword_1001DB838;
  if (!qword_1001DB838)
  {
    unint64_t result = swift_getWitnessTable(&unk_100168B20, &unk_1001BE838);
    atomic_store(result, (unint64_t *)&qword_1001DB838);
  }

  return result;
}

uint64_t type metadata accessor for KeyedContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyedContainer);
}

uint64_t sub_1001412DC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_100140934(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_1001412F0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_10014095C(a1, a2, a3);
  }
  return a1;
}

void sub_100141304(unint64_t a1, uint64_t a2, uint64_t a3, void *__src, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  char v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  memcpy((void *)(a5[7] + 72 * a1), __src, 0x41uLL);
  uint64_t v7 = a5[2];
  BOOL v8 = __OFADD__(v7, 1LL);
  uint64_t v9 = v7 + 1;
  if (v8)
  {
    __break(1u);
  }

  else
  {
    a5[2] = v9;
    sub_100009A90();
  }

unint64_t sub_100141370(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  uint64_t v6 = a5[7] + 56 * result;
  __int128 v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)a4;
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = v7;
  *(_OWORD *)(v6 + 3sub_1000108B8(v0 + 2) = *(_OWORD *)(a4 + 32);
  *(void *)(v6 + 48) = *(void *)(a4 + 48);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_1001413D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  uint64_t v11 = *v4;
  *uint64_t v4 = 0x8000000000000000LL;
  sub_100141458(a1, a2, a3, isUniquelyReferenced_nonNull_native, a4);
  *uint64_t v4 = v11;
  return swift_bridgeObjectRelease();
}

void sub_100141458(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6 = (void **)v5;
  uint64_t v12 = (void *)*v5;
  unint64_t v13 = sub_10000EC64(a2, a3);
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v18 = v13;
  char v19 = v14;
  sub_10000941C(qword_1001DB848);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_10000EC64(a2, a3);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v6;
  if ((v19 & 1) != 0)
  {
    uint64_t v23 = v22[7] + 56 * v18;
    uint64_t v24 = *(void *)(v23 + 16);
    uint64_t v25 = *(void *)(v23 + 24);
    uint64_t v26 = *(void *)(v23 + 48);
    *(_OWORD *)a5 = *(_OWORD *)v23;
    *(void *)(a5 + swift_weakDestroy(v0 + 16) = v24;
    *(void *)(a5 + swift_weakLoadStrong(v0 + 24) = v25;
    *(_OWORD *)(a5 + 3sub_1000108B8(v0 + 2) = *(_OWORD *)(v23 + 32);
    *(void *)(a5 + 48) = v26;
    __int128 v27 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v23 + 3sub_1000108B8(v0 + 2) = v27;
    *(_OWORD *)uint64_t v23 = *(_OWORD *)a1;
    *(void *)(v23 + 48) = *(void *)(a1 + 48);
  }

  else
  {
    sub_100141370(v18, a2, a3, a1, v22);
    *(void *)(a5 + 48) = 0LL;
    *(_OWORD *)(a5 + swift_weakDestroy(v0 + 16) = 0u;
    *(_OWORD *)(a5 + 3sub_1000108B8(v0 + 2) = 0u;
    *(_OWORD *)a5 = 0u;
    swift_bridgeObjectRetain(a3);
  }

uint64_t sub_1001415C0(unint64_t *a1, void *a2)
{
  return sub_100140064(*a1, a2);
}

uint64_t sub_1001415D8()
{
  return sub_1001415C0(*(unint64_t **)(v0 + 16), *(void **)(v0 + 24));
}

unint64_t sub_1001415F0()
{
  unint64_t result = qword_1001DB840;
  if (!qword_1001DB840)
  {
    uint64_t v1 = type metadata accessor for SchemaEncoder();
    unint64_t result = swift_getWitnessTable(&unk_1001688F4, v1);
    atomic_store(result, (unint64_t *)&qword_1001DB840);
  }

  return result;
}

uint64_t sub_10014162C()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100141668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a7);
    return swift_bridgeObjectRelease(a6);
  }

  return result;
}

void *sub_1001416B8()
{
  return sub_100140154(*(void *)(v0 + 32), *(uint64_t **)(v0 + 40), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001416D8(void *a1)
{
  return swift_release(a1[1]);
}

uint64_t sub_100141714(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 16));
}

void sub_10014173C(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  swift_retain();
  sub_100009A90();
}

void *sub_100141774(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

void *sub_1001417D8(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + Hasher._combine(_:)(v0 & 1) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  return a1;
}

void type metadata accessor for UnkeyedContainer()
{
}

void sub_100141828(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_retain();
  sub_100009A90();
}

void sub_100141858(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  sub_1000110D4();
}

void sub_1001418AC(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  sub_100009A90();
}

void type metadata accessor for SingleValueContainer()
{
}

uint64_t sub_1001418F0(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t sub_100141900(uint64_t a1)
{
  return swift_retain(a1);
}

void sub_10014190C(uint64_t a1@<X8>)
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = a1;
}

void sub_100141918(int a1, Swift::UInt a2)
{
}

  ;
}

void sub_10014192C()
{
}

void sub_100141938()
{
}

uint64_t BiomeSearchTablesProvider.__allocating_init(environment:feedbackConfig:feedbackStreamDescriptors:)()
{
  return BiomeSearchTablesProvider.init(environment:feedbackConfig:feedbackStreamDescriptors:)();
}

uint64_t BiomeSearchTablesProvider.init(environment:feedbackConfig:feedbackStreamDescriptors:)()
{
  uint64_t v4 = type metadata accessor for BiomeSearchTablesConfig(0LL);
  uint64_t v9 = v4;
  uint64_t v10 = &off_1001BF070;
  uint64_t v5 = sub_10001B468(&v8);
  uint64_t v6 = type metadata accessor for FeedbackStoreConfig(0LL);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(v5, v1, v6);
  *(void *)((char *)v5 + *(int *)(v4 + 20)) = v0;
  return BiomeTablesProvider.init(config:environment:)(&v8, v3, v2);
}

uint64_t type metadata accessor for BiomeSearchTablesConfig(uint64_t a1)
{
  return sub_100018ABC(a1, qword_1001DBAB8, (uint64_t)&nominal type descriptor for BiomeSearchTablesConfig);
}

uint64_t BiomeTablesProvider.init(config:environment:)(__int128 *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 5sub_10005B218(v0, v2, v1, 6) = 0LL;
  *(_BYTE *)(v3 + 64) = 0;
  sub_100019BC4(a1, v3 + 16);
  *(void *)(v3 + 7sub_1000108B8(v0 + 2) = a2;
  *(void *)(v3 + 8sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = a3;
  return v3;
}

void BiomeSearchTablesProvider.init(config:environment:)(uint64_t a1, uint64_t a2)
{
}

uint64_t BiomeSearchTablesProvider.deinit()
{
  return BiomeTablesProvider.deinit();
}

uint64_t BiomeTablesProvider.deinit()
{
  return v0;
}

uint64_t BiomeSearchTablesProvider.__deallocating_deinit()
{
  uint64_t v0 = BiomeTablesProvider.deinit();
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t sub_100141B0C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

id sub_100141B38()
{
  return *(id *)(v0 + 32);
}

void *sub_100141B40()
{
  uint64_t v1 = type metadata accessor for FeedbackStreamDescriptor(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10005F878();
  uint64_t v5 = v3 - v4;
  __chkstk_darwin(v6);
  __int128 v8 = (char *)v25 - v7;
  uint64_t v9 = *(void *)(v0 + *(int *)(type metadata accessor for BiomeSearchTablesConfig(0LL) + 20));
  uint64_t v10 = *(void *)(v9 + 16);
  if (!v10) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v11 = v9 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v29 = *(void *)(v2 + 72);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v2 + 16);
  int v28 = enum case for FeedbackStreamDescriptor.session(_:);
  v25[1] = v9;
  __n128 v13 = swift_bridgeObjectRetain(v9);
  char v14 = _swiftEmptyArrayStorage;
  uint64_t v26 = v2;
  do
  {
    v12(v8, v11, v1, v13);
    ((void (*)(uint64_t, char *, uint64_t))v12)(v5, v8, v1);
    int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v5, v1);
    uint64_t v16 = sub_100142AFC(v5);
    if (v15 == v28)
    {
      sub_100142AFC((uint64_t)v8);
    }

    else
    {
      uint64_t v27 = FeedbackStreamDescriptor.tableName.getter(v16);
      uint64_t v18 = v17;
      sub_100142AFC((uint64_t)v8);
      if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      {
        sub_100142B04(0, v14[2] + 1LL);
        char v14 = v22;
      }

      unint64_t v20 = v14[2];
      unint64_t v19 = v14[3];
      if (v20 >= v19 >> 1)
      {
        sub_100142B04(v19 > 1, v20 + 1);
        char v14 = v23;
      }

      void v14[2] = v20 + 1;
      char v21 = &v14[2 * v20];
      void v21[4] = v27;
      v21[5] = v18;
      uint64_t v2 = v26;
    }

    v11 += v29;
    --v10;
  }

  while (v10);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_100141D20@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v72 = a3;
  uint64_t v5 = type metadata accessor for BiomeStreamConfig(0LL);
  uint64_t v73 = *(void *)(v5 - 8);
  uint64_t v74 = v5;
  __chkstk_darwin(v5);
  sub_10005F878();
  uint64_t v75 = v6 - v7;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v68 - v9;
  uint64_t v11 = sub_10000941C(&qword_1001DBAF0);
  __chkstk_darwin(v11);
  __n128 v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for FeedbackStreamDescriptor(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_10005F878();
  uint64_t v18 = (void *)(v16 - v17);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v68 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v68 - v23;
  __n128 v25 = swift_bridgeObjectRetain(a2);
  uint64_t v78 = a1;
  int64_t v76 = a2;
  FeedbackStreamDescriptor.init(tableName:)(a1, a2, v25);
  uint64_t v82 = v14;
  if (sub_100010708((uint64_t)v13, 1LL, v14) == 1)
  {
    sub_100142724((uint64_t)v13);
    unint64_t v80 = 0LL;
    unint64_t v81 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(23LL);
    swift_bridgeObjectRelease();
    unint64_t v80 = 0xD000000000000015LL;
    unint64_t v81 = 0x8000000100174000LL;
    v26._uint64_t countAndFlagsBits = v78;
    v26._object = v76;
    String.append(_:)(v26);
    unint64_t v27 = v80;
    unint64_t v28 = v81;
    unint64_t v29 = sub_100142764();
    uint64_t v30 = swift_allocError(&type metadata for SearchFeedbackError, v29, 0LL, 0LL);
    *__int128 v31 = v27;
    v31[1] = v28;
    return swift_willThrow(v30);
  }

  else
  {
    uint64_t v78 = (uint64_t)v22;
    int64_t v76 = v18;
    uint64_t v33 = v75;
    uint64_t v34 = v82;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v24, v13, v82);
    uint64_t v35 = v77;
    FeedbackStoreConfig.getConfig(forStream:)(v24);
    if (v35)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v24, v34);
    }

    else
    {
      unint64_t v77 = v24;
      uint64_t v36 = enum case for FeedbackStreamDescriptor.session(_:);
      uint64_t v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 104);
      uint64_t v38 = v78;
      v37((void *)v78, enum case for FeedbackStreamDescriptor.session(_:), v34);
      uint64_t v39 = v33;
      FeedbackStoreConfig.getConfig(forStream:)(v38);
      unint64_t v71 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8);
      uint64_t v40 = v38;
      uint64_t v41 = v82;
      uint64_t v42 = v71(v40, v82);
      uint64_t v43 = BiomeStreamConfig.tableName.getter(v42);
      uint64_t v78 = v44;
      uint64_t v79 = v43;
      uint64_t v45 = sub_10000941C(&qword_1001DBB00);
      uint64_t v46 = swift_allocObject(v45, 112LL, 7LL);
      *(_OWORD *)(v46 + swift_weakDestroy(v0 + 16) = xmmword_10015D580;
      uint64_t v47 = ((uint64_t (*)(void))FeedbackStreamDescriptor.rawValue.getter)();
      uint64_t v69 = v48;
      uint64_t v70 = v47;
      unint64_t v49 = v37;
      uint64_t v50 = ((uint64_t (*)(void))BiomeStreamConfig.messageSchemaName.getter)();
      uint64_t v68 = v51;
      uint64_t v52 = BiomeStreamConfig.storeConfig.getter();
      uint64_t v53 = v69;
      *(void *)(v46 + 3sub_1000108B8(v0 + 2) = v70;
      *(void *)(v46 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = v53;
      uint64_t v54 = v68;
      *(void *)(v46 + 48) = v50;
      *(void *)(v46 + 5sub_10005B218(v0, v2, v1, 6) = v54;
      *(void *)(v46 + 64) = v52;
      uint64_t v55 = (uint64_t)v76;
      uint64_t v56 = v49(v76, v36, v41);
      uint64_t v70 = FeedbackStreamDescriptor.rawValue.getter(v56);
      uint64_t v58 = v57;
      unint64_t v59 = (uint64_t (*)(char *, uint64_t))v71;
      uint64_t v60 = v71(v55, v41);
      uint64_t v61 = v39;
      uint64_t v62 = BiomeStreamConfig.messageSchemaName.getter(v60);
      uint64_t v64 = v63;
      uint64_t v65 = BiomeStreamConfig.storeConfig.getter();
      *(void *)(v46 + 7sub_1000108B8(v0 + 2) = v70;
      *(void *)(v46 + 8sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = v58;
      *(void *)(v46 + 88) = v62;
      *(void *)(v46 + 9sub_10005B218(v0, v2, v1, 6) = v64;
      *(void *)(v46 + 104) = v65;
      unint64_t v66 = v72;
      v72[3] = (uint64_t)&type metadata for BiomeSearchTablesConfig.TableConfig;
      v66[4] = (uint64_t)&off_1001DBB08;
      uint64_t v67 = v78;
      *unint64_t v66 = v79;
      v66[1] = v67;
      v66[2] = v46;
      sub_100142ADC(v61);
      sub_100142ADC((uint64_t)v10);
      return v59(v77, v41);
    }
  }

uint64_t sub_100142118@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100141D20(a1, a2, a3);
}

uint64_t variable initialization expression of BaseBiomeTable.BiomeConnection.estimatedRows()
{
  return 100LL;
}

double _s14SearchFeedback0aB6CursorC18timeFrameGuidelineSNySdGvpfi_0()
{
  if (qword_1001DB8F8 != -1) {
    swift_once(&qword_1001DB8F8, sub_10014DCC4);
  }
  return *(double *)&static BiomeStoreEnumerator.Constants.defaultTimeRange;
}

uint64_t variable initialization expression of BiomeDatabaseWriter.feedbackStreamWriters()
{
  uint64_t v0 = type metadata accessor for SessionType(0LL);
  uint64_t v1 = sub_10000941C(&qword_1001DB918);
  unint64_t v2 = sub_1001421C8();
  return Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v0, v1, v2);
}

unint64_t sub_1001421C8()
{
  unint64_t result = qword_1001D1108;
  if (!qword_1001D1108)
  {
    uint64_t v1 = type metadata accessor for SessionType(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SessionType, v1);
    atomic_store(result, (unint64_t *)&qword_1001D1108);
  }

  return result;
}

uint64_t variable initialization expression of UploadStateFileStore.logger()
{
  return Logger.init(subsystem:category:)( 0xD000000000000011LL,  0x800000010016AB00LL,  0x446E6F6973736553LL,  0xE900000000000042LL);
}

unint64_t variable initialization expression of UploadStateFileStore.sessionUploadStateFileName()
{
  return 0xD000000000000019LL;
}

uint64_t variable initialization expression of SessionFeedback.closingDate@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  return sub_100009654(a1, 1LL, 1LL, v2);
}

uint64_t variable initialization expression of WritableSessionDatabase.locker()
{
  uint64_t v0 = type metadata accessor for Locker();
  uint64_t v1 = swift_allocObject(v0, 24LL, 7LL);
  uint64_t v2 = (_DWORD *)swift_slowAlloc(4LL, -1LL);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *uint64_t v2 = 0;
  return v1;
}

uint64_t variable initialization expression of WritableSessionDatabase.sessions()
{
  uint64_t v0 = type metadata accessor for SessionFeedback(0LL);
  return Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v0,  &protocol witness table for String);
}

uint64_t type metadata accessor for BiomeSearchTablesProvider(uint64_t a1)
{
  return sub_100018ABC(a1, qword_1001DB948, (uint64_t)&nominal type descriptor for BiomeSearchTablesProvider);
}

uint64_t sub_10014231C(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 256LL, 0LL, v2, a1 + 232);
}

uint64_t *sub_100142350(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v10);
  }

  else
  {
    uint64_t v7 = type metadata accessor for FeedbackStoreConfig(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + static AvroValue.__derived_struct_equals(_:_:)(v9, v10, v3, v4, v5, v6, v7, v8) = v9;
    swift_bridgeObjectRetain(v9);
  }

  return a1;
}

uint64_t sub_1001423DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FeedbackStoreConfig(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_100142420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FeedbackStoreConfig(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t sub_100142480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FeedbackStoreConfig(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a2 + v7);
  uint64_t v9 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_1001424EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FeedbackStoreConfig(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100142548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FeedbackStoreConfig(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t sub_1001425AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001425B8);
}

uint64_t sub_1001425B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FeedbackStoreConfig(0LL);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return sub_100010708(a1, a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(static AvroValue.__derived_struct_equals(_:_:)(v9, v10, v3, v4, v5, v6, v7, v8) = -1;
  }
  return (v8 + 1);
}

uint64_t sub_100142630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014263C);
}

uint64_t sub_10014263C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for FeedbackStoreConfig(0LL);
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3) {
    return sub_100009654(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1001426B0(uint64_t a1)
{
  uint64_t result = type metadata accessor for FeedbackStoreConfig(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_100142724(uint64_t a1)
{
  uint64_t v2 = sub_10000941C(&qword_1001DBAF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100142764()
{
  unint64_t result = qword_1001DBAF8;
  if (!qword_1001DBAF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016A154, &type metadata for SearchFeedbackError);
    atomic_store(result, (unint64_t *)&qword_1001DBAF8);
  }

  return result;
}

uint64_t destroy for BiomeSearchTablesConfig.TableConfig(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

void *_s14SearchFeedback23BiomeSearchTablesConfigV11TableConfigVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for BiomeSearchTablesConfig.TableConfig(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *assignWithTake for BiomeSearchTablesConfig.TableConfig(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + Hasher._combine(_:)(v0 & 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for BiomeSearchTablesConfig.TableConfig()
{
  return &type metadata for BiomeSearchTablesConfig.TableConfig;
}

void destroy for BiomeSearchTablesConfig.TableConfig.StoreConfig(uint64_t a1)
{
}

void *initializeWithCopy for BiomeSearchTablesConfig.TableConfig.StoreConfig(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = (void *)a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  id v6 = v5;
  return a1;
}

void *assignWithCopy for BiomeSearchTablesConfig.TableConfig.StoreConfig(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  unint64_t v8 = (void *)a2[4];
  uint64_t v9 = (void *)a1[4];
  a1[4] = v8;
  id v10 = v8;

  return a1;
}

void *assignWithTake for BiomeSearchTablesConfig.TableConfig.StoreConfig(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  uint64_t v6 = (void *)a1[4];
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 3) = *(_OWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for BiomeSearchTablesConfig.TableConfig.StoreConfig(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(vsub_1000108B8(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_1000108B8(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_1000108B8(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BiomeSearchTablesConfig.TableConfig.StoreConfig( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + swift_weakLoadStrong(v0 + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BiomeSearchTablesConfig.TableConfig.StoreConfig()
{
  return &type metadata for BiomeSearchTablesConfig.TableConfig.StoreConfig;
}

_UNKNOWN **sub_100142AAC()
{
  return &off_1001BF190;
}

void type metadata accessor for BMStoreError(uint64_t a1)
{
}

uint64_t sub_100142ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_stdlib_reportUnimplementedInitializer(a1, 40LL, a3, 25LL, 0LL);
}

uint64_t sub_100142ADC(uint64_t a1)
{
  return v1(a1, v2);
}

  ;
}

uint64_t sub_100142AFC(uint64_t a1)
{
  return v2(a1, v1);
}

void sub_100142B04(char a1, uint64_t a2)
{
}

void SearchSessionTableColumn.columnType.getter(char a1)
{
  __asm { BR              X10 }

void *sub_100142B48()
{
  return &type metadata for String;
}

unint64_t sub_100142BA8()
{
  unint64_t result = qword_1001DAC78;
  if (!qword_1001DAC78)
  {
    uint64_t v1 = sub_1000094A0(&qword_1001D4480);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1001DAC78);
  }

  return result;
}

uint64_t SearchSessionTableColumn.propertyName.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100142C40 + 4 * byte_100168DF8[a1]))( 0x536E6F6973736573LL,  0xEC00000074726174LL);
}

unint64_t sub_100142C40()
{
  return 0xD000000000000026LL;
}

uint64_t sub_100142C60()
{
  return 0x6469754772657375LL;
}

uint64_t sub_100142C84()
{
  return 0x656C62616E457564LL;
}

uint64_t sub_100142CA0()
{
  return 0x437972746E756F63LL;
}

uint64_t sub_100142CC4()
{
  return 0x6F6973726556736FLL;
}

SearchFeedback::SearchSessionTableColumn_optional __swiftcall SearchSessionTableColumn.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001BED18, v2);
  sub_1000325E4();
  if (v3 >= 8) {
    return (SearchFeedback::SearchSessionTableColumn_optional)8;
  }
  else {
    return (SearchFeedback::SearchSessionTableColumn_optional)v3;
  }
}

_UNKNOWN **static SearchSessionTableColumn.allCases.getter()
{
  return &off_1001BEDF8;
}

uint64_t SearchSessionTableColumn.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100142D60 + 4 * byte_100168E00[a1]))( 29556LL,  0xE200000000000000LL);
}

uint64_t sub_100142D60()
{
  return 0x6E6F6973736573LL;
}

uint64_t sub_100142D7C()
{
  return 0x6975675F72657375LL;
}

uint64_t sub_100142D98()
{
  return 0x6C62616E655F7564LL;
}

uint64_t sub_100142DB4()
{
  return 0x5F7972746E756F63LL;
}

uint64_t sub_100142DD8()
{
  return 0x625F6D6574737973LL;
}

BOOL sub_100142DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100144314();
  return static SQLiteColumnDescribing.== infix(_:_:)(a1, a2, a3, v6);
}

void sub_100142E38()
{
}

void sub_100142E40(uint64_t a1)
{
}

void sub_100142E48(uint64_t a1)
{
}

SearchFeedback::SearchSessionTableColumn_optional sub_100142E50@<W0>( Swift::String *a1@<X0>, SearchFeedback::SearchSessionTableColumn_optional *a2@<X8>)
{
  result.Swift::Bool value = SearchSessionTableColumn.init(rawValue:)(*a1).value;
  a2->Swift::Bool value = result.value;
  return result;
}

uint64_t sub_100142E7C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SearchSessionTableColumn.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100142EA4(void *a1@<X8>)
{
  *a1 = &off_1001BEDF8;
}

void sub_100142EB4()
{
}

uint64_t sub_100142EBC()
{
  return sub_10014BED4(*v0);
}

void sub_100142EC4()
{
}

Swift::String __swiftcall SearchSessionTable.getModuleName()()
{
  uint64_t v0 = 0x6F69737365735F70LL;
  uint64_t v1 = (void *)0xE90000000000006ELL;
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

void SearchSessionTable.__allocating_init(config:environment:)()
{
  uint64_t v2 = sub_1001446DC();
  sub_1001446EC(v2);
  sub_1001446CC();
}

void SearchSessionTable.init(config:environment:)()
{
  uint64_t v1 = sub_1001446DC();
  sub_1001446EC(v1);
  sub_1001446CC();
}

uint64_t sub_100142F8C()
{
  *(void *)(v1 + 88) = v2;
  *(void *)(v1 + 9sub_10005B218(v0, v2, v1, 6) = v0;
  uint64_t v4 = SQLiteBaseVTab.init(style:)(0);
  return sub_1001446EC(v4);
}

uint64_t SearchSessionTable.deinit()
{
  return sub_100142FE0();
}

uint64_t sub_100142FE0()
{
  uint64_t v0 = SQLiteBaseVTab.deinit();
  sub_1000108B8((void *)(v0 + 48));
  swift_unknownObjectRelease();
  return v0;
}

uint64_t SearchSessionTable.__deallocating_deinit()
{
  uint64_t v0 = sub_100142FE0();
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

uint64_t sub_100143030()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for SearchSessionTable(0LL);
  uint64_t v4 = sub_10014C2A0(v2);
  if (v1) {
    return v3;
  }
  sub_100019B20(v4 + 48, (uint64_t)v22);
  swift_release();
  uint64_t v5 = v23;
  uint64_t v6 = v24;
  sub_100019AFC(v22, v23);
  (*(void (**)(void *__return_ptr, void, void, uint64_t, uint64_t))(v6 + 16))( v19,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  v5,  v6);
  uint64_t v8 = v20;
  uint64_t v9 = v21;
  sub_100019AFC(v19, v20);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 32))(v8, v9);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v9,  v8,  &protocol requirements base descriptor for BiomeTableConfig,  &associated type descriptor for BiomeTableConfig.StoreConfig);
  uint64_t v12 = sub_10000941C(&qword_1001DC0C0);
  uint64_t v13 = _arrayForceCast<A, B>(_:)(v10, AssociatedTypeWitness, v12);
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(v13 + 16))
  {
    sub_100019B20(v13 + 32, (uint64_t)v16);
    swift_bridgeObjectRelease();
    uint64_t v14 = v17;
    uint64_t v15 = v18;
    sub_100019AFC(v16, v17);
    uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
    sub_1000108B8(v16);
    sub_1000108B8(v19);
    sub_1000108B8(v22);
    return v3;
  }

  __break(1u);
  return result;
}

uint64_t SearchSessionConnection.checkPlanOrdering(_:)(uint64_t result)
{
  if (*(_DWORD *)(result + 16) == 1)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(unsigned int **)(result + 24);
    if (v2)
    {
      if (!*((_BYTE *)v2 + 4))
      {
        uint64_t result = sub_100143224(*v2);
      }
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_100143224(uint64_t result)
{
  if ((int)result >= 8LL)
  {
    uint64_t v1 = 8LL;
    goto LABEL_5;
  }

  if ((result & 0x80000000) == 0)
  {
    uint64_t v1 = *((unsigned __int8 *)&off_1001BEDF8 + (int)result + 32);
LABEL_5:
    swift_bridgeObjectRelease(&off_1001BEDF8);
    return v1;
  }

  __break(1u);
  return result;
}

uint64_t sub_100143280(uint64_t result)
{
  if ((result & 0x80000000) == 0) {
    return *((unsigned __int8 *)&off_1001BEE20 + (int)result + 32);
  }
  __break(1u);
  return result;
}

uint64_t SearchSessionConnection.checkPlanConstraints(_:)(unsigned int *a1)
{
  uint64_t v5 = *a1;
  if ((v5 & 0x80000000) != 0)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }

  uint64_t v4 = (uint64_t)a1;
  if ((_DWORD)v5)
  {
    uint64_t v6 = 0LL;
    int v7 = 0;
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t v10 = *((void *)a1 + 1);
    uint64_t v4 = 8 * v5;
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v1 = &off_1001BEE48;
    uint64_t v3 = (char *)(v10 + 5);
    while (1)
    {
      if (v4 == v6) {
        goto LABEL_41;
      }
      if (!v10) {
        goto LABEL_47;
      }
      uint64_t v11 = *(int *)(v3 - 5);
      if ((int)v11 <= 7)
      {
        if ((v11 & 0x80000000) != 0) {
          goto LABEL_42;
        }
        int v12 = *((unsigned __int8 *)&off_1001BEE48 + v11 + 32);
        if ((v12 - 2) >= 6)
        {
          if (v12)
          {
            if (!*v3)
            {
              sub_1000110A8();
              return 0LL;
            }
          }

          else if (*v3)
          {
            int v13 = *(v3 - 1);
            HIDWORD(v14) = v13;
            LODWORD(v14) = v13 - 4;
            switch((v14 >> 2))
            {
              case 0u:
              case 7u:
                uint64_t v17 = v9;
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
                uint64_t v9 = v17;
                uint64_t v8 = 1LL;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                  goto LABEL_25;
                }
                uint64_t v8 = 1LL;
                goto LABEL_20;
              case 1u:
              case 3u:
                uint64_t v15 = v8;
                char v16 = swift_isUniquelyReferenced_nonNull_native(v2);
                uint64_t v8 = v15;
                uint64_t v9 = 1LL;
                if ((v16 & 1) != 0)
                {
                  uint64_t v9 = 1LL;
                }

                else
                {
LABEL_25:
                  int64_t v27 = v2[2] + 1LL;
                  uint64_t v28 = (uint64_t)v2;
                  uint64_t v29 = v8;
                  uint64_t v30 = v9;
                  sub_100143FBC( 0,  v27,  1,  v28,  &qword_1001D2418,  (void (*)(uint64_t, uint64_t, char *))sub_1000DABEC);
                  uint64_t v9 = v30;
                  uint64_t v8 = v29;
                  uint64_t v2 = v31;
                }

uint64_t sub_1001436BC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_100019F5C();
    sub_100032678();
  }

  else
  {
    uint64_t v5 = *(void *)(*(void *)(type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL) - 8) + 72LL) * a2;
    unint64_t v6 = a3 + v5;
    unint64_t v7 = a1 + v5;
    if (v6 <= a1 || v7 <= a3) {
      return swift_arrayInitWithCopy(a3);
    }
    sub_100019F5C();
    sub_100032668();
  }

  uint64_t result = sub_100032620(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

uint64_t SearchSessionConnection.__allocating_init(_:argc:argv:)(uint64_t a1, int a2, uint64_t a3)
{
  return sub_100143834(a1, a2, a3, &qword_1001DC0E0, &qword_1001DC0E8);
}

uint64_t SearchSessionConnection.init(_:argc:argv:)(uint64_t a1, int a2, uint64_t a3)
{
  return sub_100143834(a1, a2, a3, &qword_1001DC0E0, &qword_1001DC0E8);
}

uint64_t sub_100143810(uint64_t a1, int a2, uint64_t a3)
{
  return sub_100143834(a1, a2, a3, &qword_1001DC0D0, &qword_1001DC0D8);
}

uint64_t sub_100143834(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  *(void *)(v5 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = 100LL;
  uint64_t v10 = sub_10000941C(a4);
  uint64_t v11 = swift_dynamicCastClass(a1, v10);
  if (v11)
  {
    if (a2 == 3) {
      return SQLiteBaseVTab.Connection.init(_:argc:argv:)(v11, 3, a3);
    }
    char v13 = 1;
  }

  else
  {
    char v13 = 2;
  }

  unint64_t v14 = sub_100144640();
  uint64_t v15 = sub_100010EA0((uint64_t)&type metadata for BiomeTableError, v14);
  *uint64_t v16 = v13;
  swift_willThrow(v15);
  swift_release();
  uint64_t v17 = sub_10000941C(a5);
  return swift_deallocPartialClassInstance(v5, v17, 48LL, 7LL);
}

uint64_t SearchFeedbackConnection.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

double *sub_100143938(uint64_t a1)
{
  return sub_10014397C(a1);
}

double *sub_10014397C(uint64_t a1)
{
  uint64_t v2 = (double *)v1;
  uint64_t v4 = qword_1001DB8F8;
  swift_retain();
  if (v4 != -1) {
    swift_once(&qword_1001DB8F8, sub_10014DCC4);
  }
  *(_OWORD *)(v1 + 7sub_1000108B8(v0 + 2) = static BiomeStoreEnumerator.Constants.defaultTimeRange;
  uint64_t v5 = type metadata accessor for SearchSessionConnection(0LL);
  uint64_t v6 = swift_dynamicCastClass(a1, v5);
  if (!v6)
  {
    sub_100010D00();
    unint64_t v13 = sub_100144640();
    uint64_t v14 = sub_100010EA0((uint64_t)&type metadata for BiomeTableError, v13);
    *uint64_t v15 = 2;
    swift_willThrow(v14);
LABEL_8:
    swift_release();
    uint64_t v25 = type metadata accessor for SearchSessionCursor(0LL);
    swift_deallocPartialClassInstance(v1, v25, 88LL, 7LL);
    return v2;
  }

  uint64_t v7 = v6;
  swift_retain();
  sub_1001446C0();
  sub_10014C344();
  if (v4)
  {
    sub_10014468C();
    goto LABEL_8;
  }

  uint64_t v10 = v8;
  uint64_t v11 = v9;
  sub_1001446C0();
  sub_10014C3BC(v12);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t ObjectType = swift_getObjectType(v10);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(ObjectType, v11);
  uint64_t v44 = v10;
  uint64_t v23 = v22;
  uint64_t v24 = swift_getObjectType(v21);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 40))(v43, v17, v19, v24, v23);
  uint64_t v27 = v44;
  swift_unknownObjectRelease();
  sub_10003B8E8();
  sub_1001446C0();
  *(double *)(v1 + 7sub_1000108B8(v0 + 2) = sub_10014C430();
  *(void *)(v1 + 8sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = v28;
  sub_1001446C0();
  uint64_t v29 = sub_100143030();
  uint64_t v31 = v30;
  sub_1001446C0();
  uint64_t v33 = sub_10014C4A8(v32);
  double v34 = v2[9];
  double v35 = v2[10];
  sub_100019B20((uint64_t)v43, (uint64_t)v42);
  uint64_t v36 = type metadata accessor for SessionEnumerator();
  sub_100009ACC(v36, 192LL);
  swift_unknownObjectRetain();
  *((void *)v2 + 8) = sub_100145C24(v29, v31, v33, v27, v11, v42, v34, v35);
  sub_100010D00();
  swift_retain();
  uint64_t v2 = (double *)sub_10014C514(v7);
  sub_10014468C();
  uint64_t v37 = sub_10006B7B4();
  sub_100144708(v37, v38, v39, v40, v41);
  return v2;
}

uint64_t SearchSessionCursor.readFilterParameters(idxNum:idxStr:arguments:)(uint64_t a1, char *a2, uint64_t a3)
{
  double v4 = *(double *)(v3 + 72);
  double v5 = *(double *)(v3 + 80);
  if (a2)
  {
    uint64_t v6 = *(void *)(a3 + 16);
    if (v6)
    {
      uint64_t v7 = a2;
      uint64_t v8 = a3 + 32;
      do
      {
        int v9 = *v7++;
        double v10 = SQLiteArgument.getDouble()();
        HIDWORD(v1Hasher._combine(_:)(v0 & 1) = v9;
        LODWORD(v1Hasher._combine(_:)(v0 & 1) = v9 - 4;
        switch((v11 >> 2))
        {
          case 0u:
            if (v4 < v10)
            {
              double v4 = v10 + 0.0;
              if (v10 + 0.0 < INFINITY) {
                *(void *)&v4 += (*(uint64_t *)&v4 >> 63) | 1;
              }
            }

            break;
          case 1u:
            if (v10 <= v5) {
              double v5 = v10;
            }
            break;
          case 3u:
            if (v10 < v5)
            {
              double v12 = 0.0 - v10;
              if (v12 < INFINITY) {
                *(void *)&v12 += (*(uint64_t *)&v12 >> 63) | 1;
              }
              double v5 = -v12;
            }

            break;
          case 7u:
            if (v4 <= v10) {
              double v4 = v10;
            }
            break;
          default:
            break;
        }

        v8 += 8LL;
        --v6;
      }

      while (v6);
    }
  }

  if (v5 >= v4) {
    double v13 = v5;
  }
  else {
    double v13 = v4;
  }
  double v14 = fmax(v4, 0.0);
  if (v5 >= 0.0)
  {
    double v15 = v5;
  }

  else
  {
    double v13 = v14;
    double v15 = 0.0;
  }

  if (v4 < 0.0)
  {
    double v16 = 0.0;
  }

  else
  {
    double v15 = v13;
    double v16 = v4;
  }

  if (v16 > v15)
  {
    __break(1u);
    JUMPOUT(0x100143DDCLL);
  }

  uint64_t v17 = *(void *)(v3 + 64);
  double v18 = ClosedRange<>.fromUnixToReferenceTime.getter(v16, v15);
  uint64_t v20 = v19;
  swift_beginAccess(v17 + 24, v22, 1LL, 0LL);
  *(double *)(v17 + swift_weakLoadStrong(v0 + 24) = v18;
  *(void *)(v17 + 3sub_1000108B8(v0 + 2) = v20;
  return 0LL;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SearchFeedbackCursor.resetSearch()()
{
}

Swift::Int32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SearchSessionCursor.setValue(forColumn:on:)( Swift::String forColumn, SQLiter::SQLiteContext on)
{
  object = forColumn._object;
  uint64_t countAndFlagsBits = forColumn._countAndFlagsBits;
  swift_bridgeObjectRetain(forColumn._object);
  v4._uint64_t countAndFlagsBits = countAndFlagsBits;
  v4._object = object;
  double v5 = (char *)sub_100143E6C + 4 * byte_100168E08[SearchSessionTableColumn.init(rawValue:)(v4).value];
  __asm { BR              X10 }

  return result;
}

uint64_t sub_100143E6C()
{
  return 0LL;
}

void sub_100143EEC()
{
}

Swift::Int32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SearchFeedbackCursor.next()()
{
  return SQLiteBaseVTab.Cursor.next()();
}

Swift::Bool __swiftcall SearchFeedbackCursor.hasMoreRows()()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + 64) + 232LL))() & 1;
}

uint64_t sub_100143F68()
{
  return swift_release(*(void *)(v0 + 64));
}

uint64_t SearchFeedbackCursor.deinit()
{
  return v0;
}

uint64_t SearchFeedbackCursor.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

void sub_100143FBC( char a1, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, char *))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return;
      }

      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v10 = a2;
  }

  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    uint64_t v13 = sub_10000941C(a5);
    double v14 = (char *)sub_100009ACC(v13, v12 + 32);
    size_t v15 = j__malloc_size(v14);
    *((void *)v14 + sub_1000108B8(v0 + 2) = v11;
    *((void *)v14 + swift_weakDestroy(v0 + 3) = 2 * v15 - 64;
  }

  else
  {
    double v14 = (char *)_swiftEmptyArrayStorage;
  }

  double v16 = v14 + 32;
  if ((a1 & 1) != 0)
  {
    a6(a4 + 32, v11, v16);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
    sub_1000325E4();
  }

  else
  {
    sub_1000324C0(0LL, v11, v16, a4);
  }

  sub_100019F1C();
}

void sub_100144090(char a1, int64_t a2, char a3, uint64_t a4)
{
}

void sub_1001440AC( char a1, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(void, uint64_t, void *, uint64_t), void (*a7)(uint64_t, uint64_t, void *))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    int64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return;
      }

      int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v12 = a2;
  }

  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (v14)
  {
    uint64_t v15 = sub_10000941C(a5);
    double v16 = (void *)sub_100009ACC(v15, 16 * v14 + 32);
    size_t v17 = j__malloc_size(v16);
    void v16[2] = v13;
    void v16[3] = 2 * ((uint64_t)(v17 - 32) / 16);
  }

  else
  {
    double v16 = _swiftEmptyArrayStorage;
  }

  double v18 = v16 + 4;
  if ((a1 & 1) != 0)
  {
    a7(a4 + 32, v13, v18);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
    sub_1000325E4();
  }

  else
  {
    a6(0LL, v13, v18, a4);
  }

  sub_100019F1C();
}

uint64_t sub_100144190(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 16 * a1 + 32;
  unint64_t v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

int64_t *sub_100144284(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10014A1E0(a1, a2, a3, *v3);
  char *v3 = result;
  return result;
}

unint64_t sub_1001442A4()
{
  unint64_t result = qword_1001DBB38;
  if (!qword_1001DBB38)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchSessionTableColumn,  &type metadata for SearchSessionTableColumn);
    atomic_store(result, (unint64_t *)&qword_1001DBB38);
  }

  return result;
}

unint64_t sub_1001442E0(void *a1)
{
  a1[1] = sub_100144314();
  a1[2] = sub_100144350();
  unint64_t result = sub_10014438C();
  a1[3] = result;
  return result;
}

unint64_t sub_100144314()
{
  unint64_t result = qword_1001DBB40;
  if (!qword_1001DBB40)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchSessionTableColumn,  &type metadata for SearchSessionTableColumn);
    atomic_store(result, (unint64_t *)&qword_1001DBB40);
  }

  return result;
}

unint64_t sub_100144350()
{
  unint64_t result = qword_1001DBB48;
  if (!qword_1001DBB48)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchSessionTableColumn,  &type metadata for SearchSessionTableColumn);
    atomic_store(result, (unint64_t *)&qword_1001DBB48);
  }

  return result;
}

unint64_t sub_10014438C()
{
  unint64_t result = qword_1001DBB50;
  if (!qword_1001DBB50)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchSessionTableColumn,  &type metadata for SearchSessionTableColumn);
    atomic_store(result, (unint64_t *)&qword_1001DBB50);
  }

  return result;
}

unint64_t sub_1001443CC()
{
  unint64_t result = qword_1001DBB58;
  if (!qword_1001DBB58)
  {
    uint64_t v1 = sub_1000094A0(&qword_1001DBB60);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001DBB58);
  }

  return result;
}

unint64_t sub_100144410(uint64_t a1)
{
  unint64_t result = sub_1001442A4();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_100144438()
{
  unint64_t result = qword_1001DBB68;
  if (!qword_1001DBB68)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchSessionTableColumn,  &type metadata for SearchSessionTableColumn);
    atomic_store(result, (unint64_t *)&qword_1001DBB68);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for SearchSessionTableColumn(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = 1;
  }
  else {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_1001444C0 + 4 * byte_100168E16[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1001444F4 + 4 * byte_100168E11[v4]))();
}

uint64_t sub_1001444F4(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1001444FC(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x100144504LL);
  }
  return result;
}

uint64_t sub_100144510(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100144518LL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_10014451C(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_100144524(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchSessionTableColumn()
{
  return &type metadata for SearchSessionTableColumn;
}

ValueMetadata *type metadata accessor for SearchSessionTableConfig()
{
  return &type metadata for SearchSessionTableConfig;
}

uint64_t type metadata accessor for SearchSessionTable(uint64_t a1)
{
  return sub_100018ABC(a1, qword_1001DBBC0, (uint64_t)&nominal type descriptor for SearchSessionTable);
}

uint64_t sub_100144564(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 256LL, 0LL, v2, a1 + 456);
}

uint64_t type metadata accessor for SearchSessionConnection(uint64_t a1)
{
  return sub_100018ABC(a1, qword_1001DBDD8, (uint64_t)&nominal type descriptor for SearchSessionConnection);
}

uint64_t sub_1001445AC(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 256LL, 0LL, v2, a1 + 256);
}

uint64_t type metadata accessor for SearchSessionCursor(uint64_t a1)
{
  return sub_100018ABC(a1, qword_1001DBF30, (uint64_t)&nominal type descriptor for SearchSessionCursor);
}

uint64_t sub_1001445F4(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = &unk_100169008;
  return swift_initClassMetadata2(a1, 256LL, 2LL, v2, a1 + 312);
}

unint64_t sub_100144640()
{
  unint64_t result = qword_1001DC0B8;
  if (!qword_1001DC0B8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for BiomeTableError,  &type metadata for BiomeTableError);
    atomic_store(result, (unint64_t *)&qword_1001DC0B8);
  }

  return result;
}

uint64_t sub_10014467C()
{
  return v0;
}

uint64_t sub_10014468C()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_100144698()
{
  return 0x746E65696C63LL;
}

uint64_t sub_1001446AC()
{
  return 0x656C61636F6CLL;
}

  ;
}

  ;
}

uint64_t sub_1001446DC()
{
  return sub_100142F8C();
}

uint64_t sub_1001446EC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100144708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return sub_1000108B8((uint64_t *)va);
}

void BaseBiomeTable.init(config:environment:)(void *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 88) = a2;
  *(void *)(v3 + 9sub_10005B218(v0, v2, v1, 6) = a3;
  SQLiteVTab.init(style:)(0LL);
  sub_1000108B8(a1);
  sub_1000110D4();
}

void BaseBiomeTable.deinit()
{
  uint64_t v0 = SQLiteVTab.deinit();
  sub_1000108B8((void *)(v0 + 48));
  swift_unknownObjectRelease();
  sub_100009A90();
}

void BaseBiomeTable.__allocating_init(style:)()
{
}

uint64_t BaseBiomeTable.getSQLiteBridge()()
{
  __int16 v1 = *(uint64_t (**)(uint64_t))(v0 + 16);
  swift_unknownObjectRetain();
  uint64_t v2 = sub_100145930();
  uint64_t v3 = v1(v2);
  swift_unknownObjectRelease();
  return v3;
}

double BaseBiomeTable.getQueryTimeFrameGuideline()()
{
  __int16 v1 = *(double (**)(uint64_t))(v0 + 24);
  swift_unknownObjectRetain();
  uint64_t v2 = sub_100145930();
  double v3 = v1(v2);
  swift_unknownObjectRelease();
  return v3;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BaseBiomeTable.getMessageName(forTable:storeIndex:)( Swift::String forTable, Swift::Int storeIndex)
{
  double v5 = sub_100019AFC((void *)(v2 + 48), *(void *)(v2 + 72));
  sub_1001457F0((uint64_t)v5, v6, v7, v8, v9);
  if (v3) {
    goto LABEL_5;
  }
  uint64_t v10 = v40[3];
  uint64_t v11 = sub_100145850(v40);
  uint64_t v14 = sub_1001458E0( v11,  v12,  v13,  (uint64_t)&protocol requirements base descriptor for BiomeTableConfig,  (uint64_t)&associated type descriptor for BiomeTableConfig.StoreConfig);
  uint64_t v15 = sub_10000941C(&qword_1001DC0C0);
  sub_100145920(v15);
  uint64_t v16 = sub_100145944();
  if (storeIndex < 0)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (*(void *)(v14 + 16) <= (unint64_t)storeIndex)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  sub_1001458B8(v16, (uint64_t)v17, v18, v19, v20, v21, v22, v23, v39[0]);
  uint64_t v24 = sub_100009B3C();
  sub_100145900(v24, v25, v26, v27, v28, v29, v30, v31, v39[0], v39[1], v39[2], v39[3]);
  uint64_t v2 = sub_100145910(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16));
  storeIndex = v32;
  uint64_t v33 = sub_1000108B8(v39);
  sub_100144708(v33, v34, v35, v36, v37);
LABEL_5:
  uint64_t v16 = v2;
  size_t v17 = (void *)storeIndex;
LABEL_8:
  result._object = v17;
  result._uint64_t countAndFlagsBits = v16;
  return result;
}

uint64_t BaseBiomeTable.getStoreReader(at:forTable:)(unint64_t a1)
{
  uint64_t v4 = sub_100019AFC(v1 + 6, v1[9]);
  sub_1001457F0((uint64_t)v4, v5, v6, v7, v8);
  if (v2) {
    return (uint64_t)v1;
  }
  uint64_t v9 = v53[3];
  uint64_t v10 = sub_100145850(v53);
  uint64_t v13 = sub_1001458E0( v10,  v11,  v12,  (uint64_t)&protocol requirements base descriptor for BiomeTableConfig,  (uint64_t)&associated type descriptor for BiomeTableConfig.StoreConfig);
  uint64_t v14 = sub_10000941C(&qword_1001DC0C0);
  sub_100145920(v14);
  uint64_t result = sub_100145944();
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)(v13 + 16) > a1)
  {
    sub_1001458B8(result, v16, v17, v18, v19, v20, v21, v22, v50[0]);
    uint64_t v23 = sub_100009B3C();
    sub_100145900(v23, v24, v25, v26, v27, v28, v29, v30, v50[0], v50[1], v50[2], v51);
    uint64_t v31 = sub_100145910(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
    uint64_t v33 = v32;
    uint64_t v34 = v51;
    uint64_t v35 = v52;
    sub_100019AFC(v50, v51);
    uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 24))(v34, v35);
    uint64_t v37 = type metadata accessor for RawPayload();
    uint64_t v38 = (void *)BMUseCaseLegacy;
    uint64_t v39 = objc_allocWithZone(&OBJC_CLASS___BMStreamDatastoreReader);
    id v40 = v38;
    uint64_t v41 = (void *)v36;
    __int16 v1 = v39;
    unint64_t v42 = sub_100145524(v31, v33, v41, v37, v40);
    if (v42)
    {
      __int16 v1 = v42;
    }

    else
    {
      unint64_t v48 = sub_100144640();
      sub_100010EA0((uint64_t)&type metadata for BiomeTableError, v48);
      sub_100145844(v49, 3);
    }

    uint64_t v43 = sub_1000108B8(v50);
    sub_100144708(v43, v44, v45, v46, v47);
    return (uint64_t)v1;
  }

  __break(1u);
  return result;
}

uint64_t BaseBiomeTable.BiomeConnection.init(_:argc:argv:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *v4;
  v4[5] = 100LL;
  uint64_t v9 = *(void *)(v8 + 192);
  uint64_t v10 = *(void *)(v8 + 200);
  uint64_t v11 = type metadata accessor for BaseBiomeTable(0LL, v9, v10, a4);
  uint64_t v12 = swift_dynamicCastClass(a1, v11);
  if (v12)
  {
    if (a2 == 3) {
      return SQLiteVTab.BaseConnection.init(_:argc:argv:)(v12, 3, a3);
    }
    char v14 = 1;
  }

  else
  {
    char v14 = 2;
  }

  unint64_t v15 = sub_100144640();
  uint64_t v16 = sub_100010EA0((uint64_t)&type metadata for BiomeTableError, v15);
  *uint64_t v17 = v14;
  swift_willThrow(v16);
  sub_100010D00();
  uint64_t v19 = type metadata accessor for BaseBiomeTable.BiomeConnection(0LL, v9, v10, v18);
  return swift_deallocPartialClassInstance(v4, v19, 48LL, 7LL);
}

uint64_t BaseBiomeTable.BiomeConnection.bestIndex(_:)(uint64_t a1)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*v1 + 248LL))(a1);
  sub_100145874(v3);
  uint64_t result = 0LL;
  *(void *)(a1 + 7sub_1000108B8(v0 + 2) = v1[5];
  return result;
}

uint64_t BaseBiomeTable.BiomeConnection.estimatedRows.getter(uint64_t a1)
{
  return *(void *)(v1 + 40);
}

uint64_t BaseBiomeTable.BiomeConnection.estimatedRows.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess(v1 + 40, v4, 1LL, 0LL);
  *(void *)(v1 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = a1;
  return result;
}

uint64_t (*BaseBiomeTable.BiomeConnection.estimatedRows.modify(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

void BaseBiomeTable.BiomeConnection.getSQLiteBridge()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!v4)
  {
    BaseBiomeTable.getSQLiteBridge()();
    swift_release();
  }

  sub_1000E5738();
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BaseBiomeTable.BiomeConnection.getMessageName(forStoreIndex:)( Swift::Int forStoreIndex)
{
  if (!v4)
  {
    BaseBiomeTable.getMessageName(forTable:storeIndex:)(v6[1], v5);
    sub_1001458AC();
  }

  sub_1000E5738();
  result._object = v8;
  result._uint64_t countAndFlagsBits = v7;
  return result;
}

double BaseBiomeTable.BiomeConnection.getQueryTimeFrameGuideline()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!v4)
  {
    double TimeFrame = BaseBiomeTable.getQueryTimeFrameGuideline()();
    sub_1001458AC();
  }

  return TimeFrame;
}

unint64_t BaseBiomeTable.BiomeConnection.getReader(forStoreIndex:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!v4)
  {
    unint64_t v5 = BaseBiomeTable.getStoreReader(at:forTable:)(v5);
    sub_1001458AC();
  }

  return v5;
}

uint64_t BaseBiomeTable.BiomeCursor.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v8 = *(void *)(*(void *)v4 + 216LL);
  uint64_t v9 = *(void *)(*(void *)v4 + 224LL);
  uint64_t v10 = type metadata accessor for BaseBiomeTable.BiomeConnection(0LL, v8, v9, a4);
  uint64_t v11 = swift_dynamicCastClass(a1, v10);
  if (!v11)
  {
    unint64_t v22 = sub_100144640();
    sub_100010EA0((uint64_t)&type metadata for BiomeTableError, v22);
    sub_100145844(v23, 2);
    swift_release();
    goto LABEL_6;
  }

  uint64_t v12 = v11;
  swift_retain();
  uint64_t v13 = swift_retain();
  BaseBiomeTable.BiomeConnection.getSQLiteBridge()(v13, v14, v15, v16);
  if (v5)
  {
    sub_100010D00();
    sub_1000ABA64();
LABEL_6:
    uint64_t v24 = type metadata accessor for BaseBiomeTable.BiomeCursor(0LL, v8, v9, v21);
    swift_deallocPartialClassInstance(v6, v24, 64LL, 7LL);
    return v6;
  }

  *(void *)(v6 + 3sub_1000108B8(v0 + 2) = v17;
  *(void *)(v6 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = v18;
  *(double *)(v6 + sub_100019B20(v3, v1 + 48) = BaseBiomeTable.BiomeConnection.getQueryTimeFrameGuideline()(v17, v18, v19, v20);
  *(void *)(v6 + 5sub_10005B218(v0, v2, v1, 6) = v26;
  sub_100010D00();
  uint64_t v6 = SQLiteVTab.BaseCursor.init(_:)(v12);
  swift_release();
  return v6;
}

void BaseBiomeTable.BiomeCursor.deinit()
{
}

uint64_t BaseBiomeTable.BiomeCursor.filter(idxNum:idxStr:arguments:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = SQLiteBaseVTab.Cursor.filter(idxNum:idxStr:arguments:)();
  if (!v4 && !(_DWORD)result)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 296LL))(a1, a2, a3);
    (*(void (**)(uint64_t))(*(void *)v3 + 304LL))(v9);
    return 0LL;
  }

  return result;
}

void BaseBiomeTable.config.getter(uint64_t a1@<X8>)
{
}

void BaseBiomeTable.__allocating_init(config:environment:)(void *a1, uint64_t a2, uint64_t a3)
{
}

Swift::String __swiftcall BaseBiomeTable.getModuleName()()
{
  uint64_t v0 = 0x6D61657274735F70LL;
  uint64_t v1 = (void *)0xE800000000000000LL;
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t BaseBiomeTable.register(with:)(uint64_t a1)
{
  void (*v24)(uint64_t *__return_ptr, unint64_t, unint64_t, void);
  uint64_t v4 = (*(uint64_t (**)(void))(*v1 + 448LL))();
  uint64_t v6 = v5;
  (*(void (**)(void *, _UNKNOWN **, uint64_t, void *))(*(void *)a1 + 152LL))( v1,  &protocol witness table for SQLiteBaseVTab,  v4,  v5);
  if (!v2)
  {
    uint64_t v8 = v1[9];
    uint64_t v7 = v1[10];
    sub_100019AFC(v1 + 6, v8);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v8, v7);
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)(v9 + 16);
    if (v11)
    {
      uint64_t v24 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void))(*(void *)a1 + 176LL);
      swift_bridgeObjectRetain(v9);
      uint64_t v12 = (void *)(v10 + 40);
      while (1)
      {
        uint64_t v14 = *(v12 - 1);
        uint64_t v13 = (void *)*v12;
        swift_bridgeObjectRetain(*v12);
        _StringGuts.grow(_:)(37LL);
        swift_bridgeObjectRelease();
        v15._uint64_t countAndFlagsBits = v14;
        v15._object = v13;
        String.append(_:)(v15);
        v16._uint64_t countAndFlagsBits = 0x20474E49535520LL;
        v16._object = (void *)0xE700000000000000LL;
        String.append(_:)(v16);
        v17._uint64_t countAndFlagsBits = v4;
        v17._object = v6;
        String.append(_:)(v17);
        v24(&v20, 0xD00000000000001ALL, 0x8000000100174120LL, 0LL);
        swift_bridgeObjectRelease();
        SQLiteStatement.execute()();
        if (v18) {
          break;
        }
        v12 += 2;
        swift_release();
        __int128 v22 = v21;
        sub_100025EAC((uint64_t)&v22);
        swift_bridgeObjectRelease();
        if (!--v11)
        {
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease_n(v10, 2LL);
        }
      }

      swift_release();
      __int128 v23 = v21;
      sub_100025EAC((uint64_t)&v23);
      sub_100009B3C();
      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

void BaseBiomeTable.init(style:)()
{
}

uint64_t sub_100145304()
{
  return swift_unknownObjectRelease();
}

uint64_t BaseBiomeTable.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

void BaseBiomeTable.BiomeConnection.__allocating_init(_:argc:argv:)(uint64_t a1, int a2, uint64_t a3)
{
}

uint64_t BaseBiomeTable.BiomeConnection.__deallocating_deinit()
{
  uint64_t v0 = SQLiteBaseVTab.Connection.deinit();
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t BaseBiomeTable.BiomeCursor.__allocating_init(_:)(uint64_t a1)
{
  return BaseBiomeTable.BiomeCursor.init(_:)(a1, v3, v4, v5);
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BaseBiomeTable.BiomeCursor.getMessageName(forStoreIndex:)( Swift::Int forStoreIndex)
{
  uint64_t v3 = sub_1001458CC();
  if (!v3) {
    goto LABEL_5;
  }
  if (!sub_100145888(v3, v4, v5, v6))
  {
    sub_100010D00();
LABEL_5:
    unint64_t v8 = sub_100144640();
    sub_100010EA0((uint64_t)&type metadata for BiomeTableError, v8);
    sub_100145844(v9, 2);
    goto LABEL_6;
  }

  Swift::String v7 = BaseBiomeTable.BiomeConnection.getMessageName(forStoreIndex:)((Swift::Int)object);
  uint64_t countAndFlagsBits = v7._countAndFlagsBits;
  object = v7._object;
  sub_100010D00();
LABEL_6:
  uint64_t v10 = countAndFlagsBits;
  uint64_t v11 = object;
  result._object = v11;
  result._uint64_t countAndFlagsBits = v10;
  return result;
}

void BaseBiomeTable.BiomeCursor.getReader(forStoreIndex:)()
{
  uint64_t v1 = sub_1001458CC();
  if (!v1) {
    goto LABEL_5;
  }
  if (!sub_100145888(v1, v2, v3, v4))
  {
    sub_100010D00();
LABEL_5:
    unint64_t v8 = sub_100144640();
    sub_100010EA0((uint64_t)&type metadata for BiomeTableError, v8);
    sub_100145844(v9, 2);
    goto LABEL_6;
  }

  BaseBiomeTable.BiomeConnection.getReader(forStoreIndex:)(v0, v5, v6, v7);
  sub_100010D00();
LABEL_6:
  sub_1000E887C();
}

uint64_t sub_100145500()
{
  return swift_unknownObjectRelease(*(void *)(v0 + 32));
}

uint64_t BaseBiomeTable.BiomeCursor.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

id sub_100145524(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v6 = v5;
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a4) {
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(a4);
  }
  else {
    uint64_t ObjCClassFromMetadata = 0LL;
  }
  id v13 = [v6 initWithStream:v11 config:a3 eventDataClass:ObjCClassFromMetadata useCase:a5];

  return v13;
}

uint64_t type metadata accessor for BaseBiomeTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BaseBiomeTable);
}

uint64_t type metadata accessor for BaseBiomeTable.BiomeConnection( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BaseBiomeTable.BiomeConnection);
}

uint64_t type metadata accessor for BaseBiomeTable.BiomeCursor( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BaseBiomeTable.BiomeCursor);
}

unint64_t sub_1001455E0()
{
  unint64_t result = qword_1001DC0F0[0];
  if (!qword_1001DC0F0[0])
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for BiomeTableError,  &type metadata for BiomeTableError);
    atomic_store(result, qword_1001DC0F0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for BiomeTableError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = 1;
  }
  else {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100145668 + 4 * byte_100169025[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10014569C + 4 * byte_100169020[v4]))();
}

uint64_t sub_10014569C(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1001456A4(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1001456ACLL);
  }
  return result;
}

uint64_t sub_1001456B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001456C0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1001456C4(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1001456CC(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BiomeTableError()
{
  return &type metadata for BiomeTableError;
}

uint64_t sub_1001456E8(uint64_t a1)
{
  v2[0] = "(";
  v2[1] = &unk_100169128;
  return swift_initClassMetadata2(a1, 0LL, 2LL, v2, a1 + 368);
}

uint64_t sub_100145730(uint64_t a1)
{
  uint64_t v2 = (char *)&value witness table for Builtin.Int64 + 64;
  return swift_initClassMetadata2(a1, 0LL, 1LL, &v2, a1 + 208);
}

uint64_t sub_100145774(uint64_t a1)
{
  v2[0] = &unk_100169128;
  v2[1] = &unk_100169178;
  return swift_initClassMetadata2(a1, 0LL, 2LL, v2, a1 + 232);
}

void sub_1001457BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void *sub_1001457F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return (*(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 16))( (uint64_t *)va,  v6,  v5,  v7,  v8);
}

void sub_100145814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_100145844@<X0>(_BYTE *a1@<X1>, char a2@<W8>)
{
  *a1 = a2;
  return swift_willThrow();
}

uint64_t sub_100145850(void *a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

uint64_t sub_100145874(uint64_t a1, ...)
{
  return swift_beginAccess(v1 + 40, va, 0LL, 0LL);
}

uint64_t sub_100145888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for BaseBiomeTable.BiomeConnection(0LL, *(void *)(v4 + 216), *(void *)(v4 + 224), a4);
  return swift_dynamicCastClass(a1, v6);
}

uint64_t sub_1001458AC()
{
  return swift_release(v0);
}

void sub_1001458B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1001458CC()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

uint64_t sub_1001458E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_getAssociatedTypeWitness(0LL, v6, v5, a4, a5);
}

uint64_t sub_1001458F0()
{
  return swift_getObjectType(*(void *)(v0 + 88));
}

void *sub_100145900( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return sub_100019AFC(&a9, a12);
}

uint64_t sub_100145910@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_100145920(uint64_t a1)
{
  return _arrayForceCast<A, B>(_:)(v2, v1, a1);
}

uint64_t sub_100145930()
{
  return v0;
}

uint64_t sub_100145944()
{
  return swift_bridgeObjectRelease(v0);
}

void UploadFrom.hashValue.getter(uint64_t a1)
{
  char v1 = a1;
  sub_10003DDD8(a1);
  Hasher._combine(_:)(v1 & 1);
  Hasher._finalize()();
  sub_10003DDCC();
}

void sub_100145984()
{
}

const char *SessionDBFeatureFlags.domain.getter()
{
  return "parsecd";
}

const char *SessionDBFeatureFlags.feature.getter()
{
  return "session_db_upload";
}

uint64_t static SessionDBFeatureFlags.uploadFromFlag.getter()
{
  v2[3] = &type metadata for SessionDBFeatureFlags;
  void v2[4] = sub_100145A00();
  char v0 = isFeatureEnabled(_:)(v2);
  sub_1000108B8(v2);
  return v0 & 1;
}

unint64_t sub_100145A00()
{
  unint64_t result = qword_1001DC278;
  if (!qword_1001DC278)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SessionDBFeatureFlags,  &type metadata for SessionDBFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_1001DC278);
  }

  return result;
}

unint64_t sub_100145A40()
{
  unint64_t result = qword_1001DC280;
  if (!qword_1001DC280)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UploadFrom, &type metadata for UploadFrom);
    atomic_store(result, (unint64_t *)&qword_1001DC280);
  }

  return result;
}

unint64_t sub_100145A80()
{
  unint64_t result = qword_1001DC288;
  if (!qword_1001DC288)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SessionDBFeatureFlags,  &type metadata for SessionDBFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_1001DC288);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for UploadFrom(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = 1;
  }
  else {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100145B08 + 4 * byte_1001691B5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100145B3C + 4 * byte_1001691B0[v4]))();
}

uint64_t sub_100145B3C(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_100145B44(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x100145B4CLL);
  }
  return result;
}

uint64_t sub_100145B58(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100145B60LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100145B64(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_100145B6C(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UploadFrom()
{
  return &type metadata for UploadFrom;
}

uint64_t storeEnumTagSinglePayload for SessionDBFeatureFlags(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100145BC8 + 4 * byte_1001691BA[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100145BE8 + 4 * byte_1001691BF[v4]))();
  }
}

_BYTE *sub_100145BC8(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100145BE8(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100145BF0(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100145BF8(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100145C00(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100145C08(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SessionDBFeatureFlags()
{
  return &type metadata for SessionDBFeatureFlags;
}

uint64_t sub_100145C24( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, double a7, double a8)
{
  *(void *)(v8 + 144) = 0LL;
  *(_BYTE *)(v8 + 15sub_1000108B8(v0 + 2) = 1;
  *(_OWORD *)(v8 + 16sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = 0u;
  *(_OWORD *)(v8 + 17sub_10005B218(v0, v2, v1, 6) = 0u;
  *(void *)(v8 + 88) = a1;
  *(void *)(v8 + 9sub_10005B218(v0, v2, v1, 6) = a2;
  uint64_t result = sub_100019B20((uint64_t)a6, v8 + 104);
  double v16 = a7 + -1200.0;
  if (v16 > a8)
  {
    __break(1u);
  }

  else
  {
    uint64_t v18 = a6[3];
    uint64_t v17 = a6[4];
    sub_100019AFC(a6, v18);
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)(v17 + 8) + 8LL))(v18);
    uint64_t v21 = BiomeStoreEnumerator.init(reader:sqliteBridge:enumerationRange:messageName:)(a3, a4, a5, v19, v20, v16, a8);
    sub_1000108B8(a6);
    return v21;
  }

  return result;
}

void *sub_100145D0C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000941C(&qword_1001DC4E0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v21[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = type metadata accessor for BiomeSessionWrapper(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = BiomeStoreEnumerator.getNextEvent()();
  if (v8)
  {
    while (1)
    {
      id v9 = [v8 eventBody];
      if (v9) {
        break;
      }

      uint64_t v8 = BiomeStoreEnumerator.getNextEvent()();
      if (!v8) {
        return v8;
      }
    }

    uint64_t v10 = (char *)v9;
    sub_100152124(v10, (uint64_t)v4);
    sub_10003D7EC((uint64_t)v4, 0LL);
    sub_10014694C((uint64_t)v4, (uint64_t)v7);
    id v11 = *(id *)&v7[*(int *)(v5 + 20)];
    uint64_t v12 = RawPayload.schemitized(with:)(v0 + 104);
    uint64_t v14 = v13;

    *(void *)(v1 + 16sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = v12;
    *(void *)(v1 + 168) = v14;
    swift_unknownObjectRelease();
    id v15 = [v8 timestamp];
    *(void *)(v1 + 144) = v16;
    *(_BYTE *)(v1 + 15sub_1000108B8(v0 + 2) = 0;
    uint64_t v17 = SessionType.canonicalIdentifier.getter(v15);
    uint64_t v19 = v18;

    sub_100146990((uint64_t)v7);
    *(void *)(v1 + 17sub_10005B218(v0, v2, v1, 6) = v17;
    *(void *)(v1 + 184) = v19;
    swift_bridgeObjectRelease();
  }

  return v8;
}

uint64_t sub_100145EE4()
{
  return *(void *)(v0 + 144);
}

uint64_t sub_100145EF0()
{
  uint64_t v1 = *(void *)(v0 + 160);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v0 + 160));
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 24);
  swift_unknownObjectRetain(v1);
  uint64_t v5 = v4(ObjectType, v2);
  swift_unknownObjectRelease(v1);
  return v5;
}

uint64_t sub_100145F70@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(v3 + 160);
  if (v4)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(v3 + 168);
    uint64_t ObjectType = swift_getObjectType(*(void *)(v3 + 160));
    id v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    swift_unknownObjectRetain(v4);
    v9(v6, a2, ObjectType, v7);
    return swift_unknownObjectRelease(v4);
  }

  else
  {
    *(void *)(a3 + sub_100019B20(v3, v1 + 48) = 0LL;
    *(_OWORD *)(a3 + swift_weakDestroy(v0 + 16) = 0u;
    *(_OWORD *)(a3 + 3sub_1000108B8(v0 + 2) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_WORD *)(a3 + 5sub_10005B218(v0, v2, v1, 6) = -256;
  }

  return result;
}

uint64_t sub_100146028(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100145F70(a1, a2, (uint64_t)&v38);
  if (!v2)
  {
    if (BYTE1(v45) == 255)
    {
      sub_100014358((uint64_t)&v38, &qword_1001D8F00);
      return 0LL;
    }

    else
    {
      uint64_t v11 = sub_100146A30(result, v4, v5, v6, v7, v8, v9, v10, v38, v39, v40, v41, v42, v43, v44, v45, v46);
      uint64_t v19 = sub_100146A6C(v11, v12, v13, v14, v15, v16, v17, v18, v38, v39, v40, v41, v42, v43, v44, v45, v46);
      if (BYTE1(v45) == 8)
      {
        sub_100146A28(v19, v20, v21, v22, v23, v24, v25, v26);
        return v38;
      }

      else
      {
        sub_1000F4848((uint64_t)&v38);
        unint64_t v27 = sub_1001469CC();
        uint64_t v28 = sub_100010EA0((uint64_t)&type metadata for SearchStoreEnumerator.Error, v27);
        uint64_t v30 = sub_100146A18(v28, v29);
        return sub_100146A28(v30, v31, v32, v33, v34, v35, v36, v37);
      }
    }
  }

  return result;
}

uint64_t sub_1001460CC(sqlite3_context *a1)
{
  uint64_t v4 = *(void *)(v1 + 176);
  uint64_t v3 = *(void *)(v1 + 184);
  swift_bridgeObjectRetain(v3);
  SQLiteContext.setString(_:destructor:)(v4, v3, (void (__cdecl **)(void *))1, a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100146114()
{
  uint64_t result = sub_100145F70(0x656C62616E457564LL, 0xE900000000000064LL, (uint64_t)&v36);
  if (!v0)
  {
    if (BYTE1(v43) == 255)
    {
      sub_100014358((uint64_t)&v36, &qword_1001D8F00);
      return 2LL;
    }

    else
    {
      uint64_t v9 = sub_100146A30(result, v2, v3, v4, v5, v6, v7, v8, v36, v37, v38, v39, v40, v41, v42, v43, v44);
      uint64_t v17 = sub_100146A6C(v9, v10, v11, v12, v13, v14, v15, v16, v36, v37, v38, v39, v40, v41, v42, v43, v44);
      if (BYTE1(v43) == 6)
      {
        sub_100146A28(v17, v18, v19, v20, v21, v22, v23, v24);
        return v36;
      }

      else
      {
        sub_1000F4848((uint64_t)&v36);
        unint64_t v25 = sub_1001469CC();
        uint64_t v26 = sub_100010EA0((uint64_t)&type metadata for SearchStoreEnumerator.Error, v25);
        uint64_t v28 = sub_100146A18(v26, v27);
        return sub_100146A28(v28, v29, v30, v31, v32, v33, v34, v35);
      }
    }
  }

  return result;
}

void sub_1001461CC()
{
  char v1 = sub_100146114();
  if (!v0)
  {
    if (v1 == 2) {
      sub_100146A64();
    }
    else {
      SQLiteContext.setBool(_:)(v1 & 1);
    }
  }

void sub_100146218(uint64_t a1)
{
}

void sub_100146248(uint64_t a1)
{
}

unint64_t sub_10014626C()
{
  uint64_t v2 = sub_100146028(0x746E656761LL, 0xE500000000000000LL);
  if (v1) {
    return v0;
  }
  unint64_t v0 = v2;
  unint64_t v4 = v3;
  if (!v3) {
    return v0;
  }
  unint64_t v5 = sub_100104860(40LL, 0xE100000000000000LL, v2, v3);
  if ((v6 & 1) != 0) {
    goto LABEL_9;
  }
  unint64_t v7 = v5;
  swift_bridgeObjectRetain(v4);
  unint64_t v8 = String.index(after:)(v7, v0, v4);
  swift_bridgeObjectRelease();
  unint64_t v0 = sub_1001465B8(v8, v0, v4);
  sub_100146A50();
  unint64_t result = sub_100146454(v9, v10, v11, v12, v13, v14);
  if ((v16 & 1) != 0) {
    goto LABEL_9;
  }
  if (result >> 14 < v0 >> 14)
  {
    __break(1u);
    goto LABEL_12;
  }

  sub_100146A50();
  uint64_t v23 = Substring.subscript.getter(v17, v18, v19, v20, v21, v22);
  unint64_t v25 = v24;
  uint64_t v27 = v26;
  unint64_t v0 = v28;
  swift_bridgeObjectRelease();
  sub_100146A3C();
  unint64_t v35 = sub_100146658(v29, v30, v31, v32, v33, v34);
  if ((v36 & 1) != 0)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    unint64_t v52 = sub_1001469CC();
    uint64_t v53 = sub_100010EA0((uint64_t)&type metadata for SearchStoreEnumerator.Error, v52);
    *uint64_t v54 = 1;
    swift_willThrow(v53);
    return v0;
  }

  unint64_t v37 = v35;
  swift_bridgeObjectRetain(v0);
  unint64_t v38 = Substring.index(after:)(v37, v23, v25, v27, v0);
  unint64_t result = sub_100009B3C();
  if (v25 >> 14 >= v38 >> 14)
  {
    sub_100146A3C();
    uint64_t v45 = Substring.subscript.getter(v39, v40, v41, v42, v43, v44);
    uint64_t v47 = v46;
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    sub_100009B3C();
    unint64_t v0 = static String._fromSubstring(_:)(v45, v47, v49, v51);
    swift_bridgeObjectRelease();
    return v0;
  }

unint64_t sub_100146454( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v25 = a4 >> 14;
  if (a4 >> 14 == a3 >> 14) {
    return 0LL;
  }
  uint64_t v13 = Substring.subscript.getter(a3, a3, a4, a5, a6);
  if (v13 == a1 && v14 == a2)
  {
    unint64_t v6 = a3;
LABEL_10:
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    uint64_t v16 = v14;
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, a1, a2, 0LL);
    swift_bridgeObjectRelease(v16);
    if ((v17 & 1) != 0)
    {
      return a3;
    }

    else
    {
      unint64_t v6 = a3;
      while (1)
      {
        unint64_t v19 = Substring.index(after:)(v6, a3, a4, a5, a6);
        if (v19 >> 14 == v25) {
          return 0LL;
        }
        unint64_t v6 = v19;
        uint64_t v20 = Substring.subscript.getter(v19, a3, a4, a5, a6);
        if (v20 == a1 && v21 == a2) {
          goto LABEL_10;
        }
        uint64_t v23 = v21;
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, a1, a2, 0LL);
        swift_bridgeObjectRelease(v23);
        if ((v24 & 1) != 0) {
          return v6;
        }
      }
    }
  }

  return v6;
}

unint64_t sub_1001465B8(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v4 < result >> 14)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v5 = 11LL;
    }
    uint64_t v6 = String.subscript.getter(result, v5 | (v4 << 16), a2, a3);
    swift_bridgeObjectRelease(a3);
    return v6;
  }

  return result;
}

unint64_t sub_100146658( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = a3 >> 14;
  if (a3 >> 14 == a4 >> 14) {
    return 0LL;
  }
  unint64_t v7 = Substring.index(before:)(a4, a3, a4, a5, a6);
  uint64_t v14 = Substring.subscript.getter(v7, a3, a4, a5, a6);
  if (v14 == a1 && v15 == a2)
  {
LABEL_17:
    swift_bridgeObjectRelease(a2);
    return v7;
  }

  uint64_t v17 = v15;
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0LL);
  swift_bridgeObjectRelease(v17);
  if ((v18 & 1) != 0) {
    return v7;
  }
  if (v6 != v7 >> 14)
  {
    while (1)
    {
      unint64_t v7 = Substring.index(before:)(v7, a3, a4, a5, a6);
      uint64_t v19 = Substring.subscript.getter(v7, a3, a4, a5, a6);
      if (v19 == a1 && v20 == a2) {
        break;
      }
      uint64_t v22 = v20;
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, a1, a2, 0LL);
      swift_bridgeObjectRelease(v22);
      if ((v23 & 1) != 0) {
        return v7;
      }
      if (v6 == v7 >> 14) {
        return 0LL;
      }
    }

    goto LABEL_17;
  }

  return 0LL;
}

void sub_1001467B0()
{
  unint64_t v1 = sub_10014626C();
  if (!v0)
  {
    if (v2)
    {
      sub_100146A08(v1);
      sub_100009B3C();
    }

    else
    {
      sub_100146A64();
    }
  }

  sub_10010DC1C();
}

void sub_1001467F4(uint64_t a1)
{
}

void sub_100146828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_100146028(a2, a3);
  if (!v3)
  {
    if (v5)
    {
      sub_100146A08(v4);
      sub_100009B3C();
    }

    else
    {
      sub_100146A64();
    }
  }

  sub_10010DC1C();
}

void sub_100146874()
{
}

uint64_t sub_1001468A0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001468CC()
{
  uint64_t v0 = BiomeStoreEnumerator.deinit();
  swift_bridgeObjectRelease();
  sub_1000108B8((void *)(v0 + 104));
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100146910()
{
  uint64_t v0 = sub_1001468CC();
  return swift_deallocClassInstance(v0, 192LL, 7LL);
}

uint64_t type metadata accessor for SessionEnumerator()
{
  return objc_opt_self(&OBJC_CLASS____TtC14SearchFeedback17SessionEnumerator);
}

uint64_t sub_10014694C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BiomeSessionWrapper(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100146990(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BiomeSessionWrapper(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_1001469CC()
{
  unint64_t result = qword_1001DC4E8;
  if (!qword_1001DC4E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001693F4, &type metadata for SearchStoreEnumerator.Error);
    atomic_store(result, (unint64_t *)&qword_1001DC4E8);
  }

  return result;
}

void sub_100146A08(uint64_t a1)
{
}

uint64_t sub_100146A18(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
  return swift_willThrow();
}

uint64_t sub_100146A28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  return sub_1000F4848((uint64_t)va);
}

uint64_t sub_100146A30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  return sub_1000F4798((uint64_t)&a9, (uint64_t)&a17);
}

  ;
}

  ;
}

void sub_100146A64()
{
}

uint64_t sub_100146A6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return sub_1000F47D4(&a17, (uint64_t)&a9);
}

void sub_100146A78()
{
  double v1 = COERCE_DOUBLE((*(uint64_t (**)(void))(*(void *)v0 + 240LL))());
  if ((v2 & 1) != 0)
  {
    SQLiteContext.setNull()();
  }

  else
  {
    Double.fromReferenceToUnixTime.getter(v1);
    SQLiteContext.setDouble(_:)(v3);
  }

uint64_t Double.fromReferenceToUnixTime.getter(double a1)
{
  if (qword_1001DB8E0 != -1) {
    uint64_t result = swift_once(&qword_1001DB8E0, sub_100146EE8);
  }
  if (*(double *)&qword_1001DC500 >= a1)
  {
    if (qword_1001DB8D0 != -1) {
      return swift_once(&qword_1001DB8D0, sub_100146EB0);
    }
  }

  else
  {
    if (qword_1001DB8E8 != -1) {
      uint64_t result = swift_once(&qword_1001DB8E8, sub_100146F04);
    }
    if (*(double *)&qword_1001DC508 <= a1)
    {
      if (qword_1001DB8D8 != -1) {
        return swift_once(&qword_1001DB8D8, sub_100146ECC);
      }
    }

    else if (qword_1001DB8F0 != -1)
    {
      return swift_once(&qword_1001DB8F0, sub_100146FC0);
    }
  }

  return result;
}

double ClosedRange<>.fromUnixToReferenceTime.getter(double a1, double a2)
{
  if (qword_1001DB8D0 != -1) {
    swift_once(&qword_1001DB8D0, sub_100146EB0);
  }
  if (*(double *)&qword_1001DC4F0 >= a1)
  {
    if (qword_1001DB8E0 != -1) {
      swift_once(&qword_1001DB8E0, sub_100146EE8);
    }
    a1 = *(double *)&qword_1001DC500;
    goto LABEL_15;
  }

  if (qword_1001DB8D8 != -1) {
    goto LABEL_31;
  }
  while (1)
  {
    if (*(double *)&qword_1001DC4F8 <= a1)
    {
      if (qword_1001DB8E8 != -1) {
        swift_once(&qword_1001DB8E8, sub_100146F04);
      }
      a1 = *(double *)&qword_1001DC508;
    }

    else
    {
      if (qword_1001DB8F0 != -1) {
        swift_once(&qword_1001DB8F0, sub_100146FC0);
      }
      a1 = a1 - *(double *)&qword_1001DC510;
    }

uint64_t sub_100146E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  return BiomeStoreEnumerator.init(reader:sqliteBridge:enumerationRange:messageName:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_100146E94()
{
  uint64_t v0 = BiomeStoreEnumerator.deinit();
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t sub_100146EB0(uint64_t a1)
{
  return sub_100146F20( a1,  (uint64_t (*)(uint64_t))&static Date.distantPast.getter,  (double (*)(uint64_t))&Date.timeIntervalSince1970.getter,  (double *)&qword_1001DC4F0);
}

uint64_t sub_100146ECC(uint64_t a1)
{
  return sub_100146F20( a1,  (uint64_t (*)(uint64_t))&static Date.distantFuture.getter,  (double (*)(uint64_t))&Date.timeIntervalSince1970.getter,  (double *)&qword_1001DC4F8);
}

uint64_t sub_100146EE8(uint64_t a1)
{
  return sub_100146F20( a1,  (uint64_t (*)(uint64_t))&static Date.distantPast.getter,  (double (*)(uint64_t))&Date.timeIntervalSinceReferenceDate.getter,  (double *)&qword_1001DC500);
}

uint64_t sub_100146F04(uint64_t a1)
{
  return sub_100146F20( a1,  (uint64_t (*)(uint64_t))&static Date.distantFuture.getter,  (double (*)(uint64_t))&Date.timeIntervalSinceReferenceDate.getter,  (double *)&qword_1001DC508);
}

uint64_t sub_100146F20( uint64_t a1, uint64_t (*a2)(uint64_t), double (*a3)(uint64_t), double *a4)
{
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a2(v9);
  double v13 = a3(v12);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  *a4 = v13;
  return result;
}

double sub_100146FC0()
{
  if (qword_1001DB8D0 != -1) {
    swift_once(&qword_1001DB8D0, sub_100146EB0);
  }
  double v0 = *(double *)&qword_1001DC4F0;
  if (qword_1001DB8E0 != -1) {
    swift_once(&qword_1001DB8E0, sub_100146EE8);
  }
  double result = v0 - *(double *)&qword_1001DC500;
  *(double *)&qword_1001DC510 = v0 - *(double *)&qword_1001DC500;
  return result;
}

uint64_t Double.fromUnixToReferenceTime.getter(double a1)
{
  if (qword_1001DB8D0 != -1) {
    uint64_t result = swift_once(&qword_1001DB8D0, sub_100146EB0);
  }
  if (*(double *)&qword_1001DC4F0 >= a1)
  {
    if (qword_1001DB8E0 != -1) {
      return swift_once(&qword_1001DB8E0, sub_100146EE8);
    }
  }

  else
  {
    if (qword_1001DB8D8 != -1) {
      uint64_t result = swift_once(&qword_1001DB8D8, sub_100146ECC);
    }
    if (*(double *)&qword_1001DC4F8 <= a1)
    {
      if (qword_1001DB8E8 != -1) {
        return swift_once(&qword_1001DB8E8, sub_100146F04);
      }
    }

    else if (qword_1001DB8F0 != -1)
    {
      return swift_once(&qword_1001DB8F0, sub_100146FC0);
    }
  }

  return result;
}

uint64_t type metadata accessor for SearchStoreEnumerator()
{
  return objc_opt_self(&OBJC_CLASS____TtC14SearchFeedback21SearchStoreEnumerator);
}

uint64_t storeEnumTagSinglePayload for SearchStoreEnumerator.Error( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = 1;
  }
  else {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1001471D8 + 4 * byte_100169365[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10014720C + 4 * asc_100169360[v4]))();
}

uint64_t sub_10014720C(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_100147214(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10014721CLL);
  }
  return result;
}

uint64_t sub_100147228(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100147230LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100147234(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_10014723C(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchStoreEnumerator.Error()
{
  return &type metadata for SearchStoreEnumerator.Error;
}

unint64_t sub_10014725C()
{
  unint64_t result = qword_1001DC678;
  if (!qword_1001DC678)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001693CC, &type metadata for SearchStoreEnumerator.Error);
    atomic_store(result, (unint64_t *)&qword_1001DC678);
  }

  return result;
}

void sub_100147298(uint64_t a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t v3 = swift_allocObject(&unk_1001BFAB0, 24LL, 7LL);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = a1;
  v5[4] = sub_1001473F8;
  void v5[5] = v3;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256LL;
  uint64_t v5[2] = sub_1000198FC;
  _OWORD v5[3] = &unk_1001BFAC8;
  uint64_t v4 = _Block_copy(v5);
  swift_release();
  AnalyticsSendEventLazy(v2, v4);
  _Block_release(v4);
}

uint64_t sub_100147358(uint64_t a1)
{
  uint64_t v2 = sub_10000941C(&qword_1001D5730);
  uint64_t inited = swift_initStackObject(v2, v6);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
  *(void *)(inited + 3sub_1000108B8(v0 + 2) = 0x746E65696C63LL;
  *(void *)(inited + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = 0xE600000000000000LL;
  ClientType.rawValue.getter(a1);
  *(NSNumber *)(inited + sub_100019B20(v3, v1 + 48) = UInt._bridgeToObjectiveC()();
  unint64_t v4 = sub_1000A36DC();
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v4, &protocol witness table for String);
}

uint64_t sub_1001473E8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001473F8()
{
  return sub_100147358(*(void *)(v0 + 16));
}

uint64_t sub_100147400(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_1000108B8(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100147410(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

ValueMetadata *type metadata accessor for BiomeStreamsTelemetryReporter()
{
  return &type metadata for BiomeStreamsTelemetryReporter;
}

void *UploadStateFileStore.uploadedAtBookmarks()()
{
  uint64_t v2 = sub_1001513F8();
  if (v0) {
    return v1;
  }
  uint64_t v4 = (uint64_t)v2;
  uint64_t v5 = *((void *)v2 + 2);
  if (!v5)
  {
    sub_10001450C();
    return _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRetain(v2);
  unint64_t v6 = (_BYTE *)(v4 + 40);
  do
  {
    if (*v6 == 1)
    {
      uint64_t v7 = *((void *)v6 - 1);
      uint64_t v8 = swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
      unint64_t v10 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v9 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v10 >= v9 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1);
      }
      uint64_t v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v7);
      specialized Array._endMutation()(v11);
    }

    v6 += 16;
    --v5;
  }

  while (v5);
  sub_10001450C();
  __int16 v1 = _swiftEmptyArrayStorage;
  if (*(void *)(v4 + 16))
  {
    char v12 = *(_BYTE *)(v4 + 40);
    sub_10001450C();
    if ((v12 & 1) != 0) {
      return v1;
    }
    uint64_t v13 = type metadata accessor for SessionBookmark();
    swift_allocObject(v13, 49LL, 7LL);
    SessionBookmark.init()();
    uint64_t v4 = v14;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    {
LABEL_13:
      sub_1001475B0(0LL, 0LL, v4);
      return _swiftEmptyArrayStorage;
    }
  }

  else
  {
    __break(1u);
  }

  else {
    uint64_t v15 = (void *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL);
  }
  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v15);
  unint64_t result = (void *)swift_bridgeObjectRelease();
  if ((v16 & 0x8000000000000000LL) == 0) {
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001475B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    uint64_t v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      goto LABEL_4;
    }
  }

  if (v7 < 0) {
    uint64_t v19 = v7;
  }
  else {
    uint64_t v19 = v7 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v7);
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease();
LABEL_4:
  if (v9 < v5)
  {
    __break(1u);
    goto LABEL_35;
  }

  uint64_t v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  uint64_t v8 = 1 - v9;
  if (__OFSUB__(1LL, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    uint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    goto LABEL_9;
  }

uint64_t BiomeDatabaseReader.__allocating_init(fileManager:)(uint64_t a1)
{
  uint64_t result = swift_allocObject(v1, 24LL, 7LL);
  *(void *)(result + swift_weakDestroy(v0 + 16) = a1;
  return result;
}

void sub_100147844( void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  id v13 = [a1 bookmark];
  if (v13)
  {
    id v14 = v13;
    while (1)
    {
      id v15 = [a1 nextEvent];
      if (!v15)
      {
        swift_bridgeObjectRelease();

        goto LABEL_8;
      }

      uint64_t v16 = v15;
      sub_100149074((char *)v14, v15, a2, a3, a4, a5, a6);
      if (v6) {
        break;
      }

      id v14 = [a1 bookmark];
      if (!v14) {
        goto LABEL_6;
      }
    }

    swift_release();
    swift_bridgeObjectRelease();
  }

  else
  {
LABEL_6:
    swift_bridgeObjectRelease();
LABEL_8:
    swift_release();
  }

void sub_100147968(void *a1, uint64_t a2, void (*a3)(void *, uint64_t), uint64_t a4)
{
  id v9 = [a1 bookmark];
  if (v9)
  {
    id v10 = v9;
    while (1)
    {
      id v11 = [a1 nextEvent];
      if (!v11)
      {
        swift_bridgeObjectRelease();

        return;
      }

      char v12 = v11;
      sub_1001487B0(v10, v11, a2, a3, a4);
      if (v4) {
        break;
      }

      id v10 = [a1 bookmark];
      if (!v10) {
        goto LABEL_6;
      }
    }

    swift_bridgeObjectRelease();
  }

  else
  {
LABEL_6:
    swift_bridgeObjectRelease();
  }

void *sub_100147A68(id a1, uint64_t a2, uint64_t a3)
{
  while (1)
  {
    id v8 = [a1 bookmark];
    if (!v8)
    {
      swift_bridgeObjectRelease();
      return 0LL;
    }

    id v9 = v8;
    id v10 = [a1 nextEvent];
    if (!v10)
    {
      swift_bridgeObjectRelease();

      return 0LL;
    }

    id v11 = v10;
    char v12 = sub_100149CA4((uint64_t)v9, v10, a2, a3);
    if (v3) {
      break;
    }
    uint64_t v4 = v12;

    if (v4)
    {
      swift_bridgeObjectRelease();
      return v4;
    }
  }

  swift_bridgeObjectRelease();

  return v4;
}

void sub_100147B64()
{
  uint64_t v3 = v2;
  do
  {
    id v4 = [v0 bookmark];
    if (!v4) {
      break;
    }
    uint64_t v5 = v4;
    id v6 = [v0 nextEvent];
    if (!v6)
    {
      uint64_t v7 = v5;
LABEL_9:

      break;
    }

    uint64_t v7 = v6;
    uint64_t v8 = v3(v5, v6);
    if (v1)
    {

      goto LABEL_9;
    }

    uint64_t v9 = v8;
  }

  while (!v9);
  sub_10002716C();
}

void *BMStreamDatastoreReader<>.DefaultStartTimeDelta.unsafeMutableAddressor()
{
  return &static BMStreamDatastoreReader<>.DefaultStartTimeDelta;
}

double static BMStreamDatastoreReader<>.DefaultStartTimeDelta.getter()
{
  return -604800.0;
}

id sub_100147C30(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for Date(0LL);
  sub_100047200();
  __chkstk_darwin(v6);
  sub_100009AEC();
  uint64_t v9 = v8 - v7;
  if (*(void *)(a1 + 16)) {
    return objc_msgSend(v3, "newEnumeratorFromBookmark:");
  }
  uint64_t v11 = Date.init(timeIntervalSinceNow:)(-604800.0);
  id v10 = [v3 newEnumeratorFromStartTime:Date.timeIntervalSinceReferenceDate.getter(v11)];
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v9, v5);
  return v10;
}

uint64_t BiomeDatabaseReader.init(fileManager:)(uint64_t a1)
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = a1;
  return v1;
}

void sub_100147CF4()
{
  uint64_t v3 = type metadata accessor for BiomeStreamConfig(0LL);
  uint64_t v37 = *(void *)(v3 - 8);
  uint64_t v38 = v3;
  sub_100027160();
  __chkstk_darwin(v4);
  sub_10014BB90(v5, v34);
  type metadata accessor for FeedbackStreamDescriptor(0LL);
  sub_100047200();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v40 = (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v39 = (uint64_t)&v34 - v9;
  uint64_t v10 = type metadata accessor for FeedbackStoreConfig(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100009AEC();
  uint64_t v14 = v13 - v12;
  id v15 = *(void **)(v0 + 16);
  uint64_t v16 = sub_10000941C(&qword_1001DC790);
  uint64_t v17 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v19 = swift_allocObject(v16, v18 + *(void *)(v2 + 72), v17 | 7);
  *(_OWORD *)(v19 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
  sub_10014BB68(v19 + v18);
  FeedbackStoreConfig.init(fileManager:streams:)(v15, v19);
  if (!v1)
  {
    uint64_t v36 = v11;
    uint64_t v42 = v10;
    uint64_t v20 = v39;
    uint64_t v21 = sub_10014BB68(v39);
    uint64_t v35 = FeedbackStreamDescriptor.rawValue.getter(v21);
    uint64_t v23 = v22;
    sub_10014BBF0(v20);
    uint64_t v24 = v40;
    sub_10014BB68(v40);
    uint64_t v25 = v41;
    FeedbackStoreConfig.getConfig(forStream:)(v24);
    uint64_t v26 = sub_10014BBF0(v24);
    uint64_t v27 = (void *)BiomeStreamConfig.storeConfig.getter(v26);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v25, v38);
    uint64_t v28 = sub_10014BBF8();
    uint64_t v29 = (void *)BMUseCaseLegacy;
    objc_allocWithZone(&OBJC_CLASS___BMStreamDatastoreReader);
    id v30 = v29;
    if (!sub_100145524(v35, v23, v27, v28, v30))
    {
      unint64_t v31 = sub_10014A16C();
      uint64_t v32 = sub_100010EA0((uint64_t)&type metadata for SessionDatabaseError, v31);
      sub_10014BB2C((__n128)xmmword_10015F770, v32, v33);
    }

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v14, v42);
  }

  sub_10002716C();
}

void sub_100147F64()
{
  uint64_t v36 = type metadata accessor for BiomeStreamConfig(0LL);
  uint64_t v3 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  sub_100009AEC();
  uint64_t v6 = v5 - v4;
  type metadata accessor for FeedbackStoreConfig(0LL);
  sub_100047200();
  __chkstk_darwin(v7);
  sub_10014BB90(v8, v33);
  sub_10000941C(&qword_1001DBAF0);
  sub_100027160();
  __chkstk_darwin(v9);
  uint64_t v10 = sub_10014BB74();
  uint64_t v11 = type metadata accessor for FeedbackStreamDescriptor(v10);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_100009AEC();
  uint64_t v15 = v14 - v13;
  SessionType.biomeStreamDescriptor.getter();
  if (sub_100010708(v0, 1LL, v11) == 1)
  {
    sub_100014358(v0, &qword_1001DBAF0);
    unint64_t v16 = sub_10014A16C();
    uint64_t v17 = sub_100010EA0((uint64_t)&type metadata for SessionDatabaseError, v16);
    sub_10014BB2C((__n128)xmmword_100163360, v17, v18);
  }

  else
  {
    uint64_t v35 = v6;
    uint64_t v34 = v3;
    sub_10005F8E4(v15, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32));
    uint64_t v19 = *(void **)(v1 + 16);
    uint64_t v20 = sub_10000941C(&qword_1001DC790);
    uint64_t v21 = *(unsigned __int8 *)(v12 + 80);
    uint64_t v22 = (v21 + 32) & ~v21;
    uint64_t v23 = swift_allocObject(v20, v22 + *(void *)(v12 + 72), v21 | 7);
    *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
    sub_10005F8E4(v23 + v22, v15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16));
    uint64_t v24 = FeedbackStoreConfig.init(fileManager:streams:)(v19, v23);
    if (!v2)
    {
      uint64_t v25 = FeedbackStreamDescriptor.rawValue.getter(v24);
      uint64_t v27 = v26;
      uint64_t v28 = FeedbackStoreConfig.getConfig(forStream:)(v15);
      uint64_t v38 = (void *)BiomeStreamConfig.storeConfig.getter(v28);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, v36);
      uint64_t v37 = sub_10014BBF8();
      uint64_t v29 = (void *)BMUseCaseLegacy;
      objc_allocWithZone(&OBJC_CLASS___BMStreamDatastoreReader);
      if (sub_100145524(v25, v27, v38, v37, v29))
      {
        sub_10014BBBC();
        sub_10014BBAC();
        goto LABEL_6;
      }

      unint64_t v30 = sub_10014A16C();
      uint64_t v31 = sub_100010EA0((uint64_t)&type metadata for SessionDatabaseError, v30);
      sub_10014BB2C((__n128)xmmword_10015F770, v31, v32);
      sub_10014BBBC();
    }

    sub_10014BBAC();
  }

uint64_t sub_1001481F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v4;
  sub_10000941C(&qword_1001D32B0);
  sub_100027160();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char **)((char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v72 - v13;
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v85 = *(void *)(v15 - 8);
  sub_100027160();
  __chkstk_darwin(v16);
  uint64_t v17 = sub_10014BB38();
  uint64_t v83 = *(void *)(v17 - 8);
  uint64_t v84 = v17;
  sub_100027160();
  __chkstk_darwin(v18);
  uint64_t v86 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v20 = [objc_allocWithZone(PBDataWriter) init];
  if (!v20)
  {
    unint64_t v23 = sub_10014B4E4();
    sub_100010EA0((uint64_t)&type metadata for BiomeReadError, v23);
    *uint64_t v24 = 258;
    sub_1000C5DB8();
    return v3;
  }

  uint64_t v82 = v5;
  id v21 = v20;
  sub_100147F64();
  if (v4)
  {

    return v3;
  }

  uint64_t v25 = v22;
  sub_1000A14F8(a1 + 16, (uint64_t)v88);
  uint64_t v81 = a1;
  uint64_t v26 = sub_1000A1F68();
  sub_100014244(v26, v27);
  uint64_t v28 = sub_1000A1F68();
  id v30 = sub_10014B3AC(v28, v29, v21);
  uint64_t v31 = v81 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_creationDate;
  double v32 = Date.timeIntervalSinceReferenceDate.getter(v30);
  uint64_t v3 = a3;
  double v34 = Date.timeIntervalSinceReferenceDate.getter(v33);
  if (v32 > v34)
  {
    unint64_t v35 = sub_10014B4E4();
    sub_100010EA0((uint64_t)&type metadata for BiomeReadError, v35);
    *uint64_t v36 = 260;
    sub_1000C5DB8();

    return v3;
  }

  uint64_t v75 = v31;
  uint64_t v79 = v25;
  id v37 = -[objc_class fetchEventsFrom:to:](v25, "fetchEventsFrom:to:", v32, v34);
  uint64_t v38 = sub_10000941C(&qword_1001DC7A0);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v37, v38);

  if ((unint64_t)v3 >> 62)
  {
LABEL_33:
    if (v3 < 0) {
      uint64_t v70 = v3;
    }
    else {
      uint64_t v70 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    id v71 = v21;
    swift_bridgeObjectRetain(v3);
    uint64_t v39 = _CocoaArrayWrapper.endIndex.getter(v70);
  }

  else
  {
    uint64_t v39 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    id v40 = v21;
    swift_bridgeObjectRetain(v3);
  }

  int64_t v76 = v14;
  uint64_t v77 = v6;
  uint64_t v78 = v15;
  uint64_t v72 = a3;
  uint64_t v73 = v12;
  id v80 = v21;
  if (v39)
  {
    uint64_t v6 = 0LL;
    id v21 = (id)(v3 & 0xC000000000000001LL);
    a3 = 1LL;
    double v41 = 0.0;
    uint64_t v12 = &selRef_fbr;
    while (2)
    {
      uint64_t v15 = v6;
      while (1)
      {
        if (v21) {
          uint64_t v42 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v3);
        }
        else {
          uint64_t v42 = (char *)*(id *)(v3 + 8 * v15 + 32);
        }
        uint64_t v14 = v42;
        uint64_t v6 = v15 + 1;
        if (__OFADD__(v15, 1LL))
        {
          __break(1u);
          goto LABEL_33;
        }

        uint64_t v43 = (char *)[v42 eventBody];
        if (v43) {
          break;
        }

        ++v15;
        if (v6 == v39)
        {
          char v49 = a3;
          goto LABEL_22;
        }
      }

      uint64_t v44 = v43;
      uint64_t v46 = *(void *)&v43[OBJC_IVAR___SRRawPayload_data];
      unint64_t v45 = *(void *)&v43[OBJC_IVAR___SRRawPayload_data + 8];
      sub_100014244(v46, v45);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100010A30(v46, v45);
      Class v47 = isa;
      [v80 writeData:isa forTag:200];

      [v14 timestamp];
      double v41 = v48;

      char v49 = 0;
      a3 = 0LL;
      if (v6 != v39) {
        continue;
      }
      break;
    }
  }

  else
  {
    char v49 = 1;
    double v41 = 0.0;
  }

void sub_1001487B0(void *a1, void *a2, uint64_t a3, void (*a4)(void *, uint64_t), uint64_t a5)
{
  uint64_t v11 = sub_10000941C(&qword_1001D32B0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v17 = [a2 eventBody];
  if (v17)
  {
    uint64_t v34 = a5;
    unint64_t v35 = a4;
    id v18 = v17;
    [a2 timestamp];
    Date.init(timeIntervalSinceReferenceDate:)(v19);
    sub_100009654((uint64_t)v13, 1LL, 1LL, v14);
    uint64_t v20 = type metadata accessor for SessionFeedback(0LL);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    id v21 = SessionFeedback.init(withWrappedPayload:creationDate:closingDate:)(v18, (uint64_t)v16, (uint64_t)v13);
    if (!v5)
    {
      uint64_t v22 = v21;
      uint64_t v23 = *(void *)((char *)v21 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_sessionId);
      uint64_t v24 = *(void *)((char *)v21 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_sessionId + 8);
      id v25 = a1;
      objc_msgSend(a2, "timestamp", swift_bridgeObjectRetain(v24).n128_f64[0]);
      double v27 = v26;
      uint64_t v28 = type metadata accessor for SessionBookmark();
      swift_allocObject(v28, 49LL, 7LL);
      uint64_t v29 = sub_1001561C4((uint64_t)v25, v23, v24, v27);
      if ((sub_100148A4C(v29, a3) & 1) != 0)
      {
        swift_release();
        swift_release();
      }

      else
      {
        swift_retain();
        swift_retain();
        v35(v22, v29);
        swift_release_n(v29, 2LL);
        swift_release_n(v22, 2LL);
      }
    }
  }

  else
  {
    unsigned __int8 v30 = [a2 error];
    unint64_t v31 = sub_10014B4E4();
    uint64_t v32 = swift_allocError(&type metadata for BiomeReadError, v31, 0LL, 0LL);
    *uint64_t v33 = v30;
    v33[1] = 0;
    swift_willThrow(v32);
  }

uint64_t sub_100148A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a2);
  if (v4)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001LL) != 0)
      {
        uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a2);
      }

      else
      {
        uint64_t v5 = *(void *)(a2 + 32);
        swift_retain();
      }

      type metadata accessor for SessionBookmark();
      char v6 = static SessionBookmark.== infix(_:_:)(v5, a1);
      swift_release();
      if ((v6 & 1) != 0) {
        break;
      }
      if (v4 != 1)
      {
        uint64_t v9 = 5LL;
        while (1)
        {
          if ((a2 & 0xC000000000000001LL) != 0)
          {
            uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, a2);
          }

          else
          {
            uint64_t v10 = *(void *)(a2 + 8 * v9);
            swift_retain();
          }

          uint64_t v11 = v9 - 3;
          if (__OFADD__(v9 - 4, 1LL)) {
            break;
          }
          char v7 = static SessionBookmark.== infix(_:_:)(v10, a1);
          swift_release();
          if ((v7 & 1) == 0)
          {
            ++v9;
            if (v11 != v4) {
              continue;
            }
          }

          goto LABEL_9;
        }

        __break(1u);
LABEL_19:
        uint64_t v12 = a2 < 0 ? a2 : a2 & 0xFFFFFFFFFFFFFF8LL;
        swift_bridgeObjectRetain(a2);
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v12);
        if (v4) {
          continue;
        }
      }

      goto LABEL_8;
    }

    char v7 = 1;
  }

  else
  {
LABEL_8:
    char v7 = 0;
  }

uint64_t sub_100148BA4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v16 = sub_10014FFF0(v9);
  sub_10014A3F4((size_t *)&v16);
  if (v5)
  {
    uint64_t result = swift_release();
    __break(1u);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = (uint64_t)v16;
    uint64_t v11 = v16[2];
    if (v11)
    {
      uint64_t v12 = *(void *)(type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL) - 8);
      uint64_t v13 = v10 + ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
      uint64_t v14 = *(void *)(v12 + 72);
      swift_retain();
      do
      {
        sub_100148CA0(v13, a2, v4, a3, a4);
        v13 += v14;
        --v11;
      }

      while (v11);
      return sub_100019D80(v10);
    }

    else
    {
      return swift_release();
    }
  }

  return result;
}

uint64_t sub_100148CA0( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v33 = a5;
  uint64_t v34 = a4;
  uint64_t v39 = a3;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v36 = *(void *)(v8 - 8);
  uint64_t v37 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL);
  uint64_t v11 = *(int *)(v38 + 24);
  uint64_t v40 = a1;
  uint64_t v32 = v11;
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v41 = v5;
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0) {
      uint64_t v30 = a2;
    }
    else {
      uint64_t v30 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_retain();
    swift_bridgeObjectRetain(a2);
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v30);
    if (!v13) {
      goto LABEL_7;
    }
  }

  else
  {
    uint64_t v13 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_retain();
    swift_bridgeObjectRetain(a2);
    if (!v13) {
      goto LABEL_7;
    }
  }

  unint64_t v35 = a2 & 0xC000000000000001LL;
  if ((a2 & 0xC000000000000001LL) != 0)
  {
    uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a2);
  }

  else
  {
    uint64_t v14 = *(void *)(a2 + 32);
    swift_retain();
  }

  type metadata accessor for SessionBookmark();
  char v15 = static SessionBookmark.== infix(_:_:)(v14, v12);
  swift_release();
  if ((v15 & 1) != 0) {
    goto LABEL_14;
  }
  if (v13 == 1) {
    goto LABEL_7;
  }
  if (v35)
  {
    uint64_t v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(1LL, a2);
  }

  else
  {
    uint64_t v24 = *(void *)(a2 + 40);
    swift_retain();
  }

  char v25 = static SessionBookmark.== infix(_:_:)(v24, v12);
  swift_release();
  if ((v25 & 1) != 0)
  {
LABEL_14:
    swift_release();
    return swift_bridgeObjectRelease();
  }

  if (v13 == 2)
  {
LABEL_7:
    swift_release();
    uint64_t v16 = swift_bridgeObjectRelease();
    uint64_t v17 = v40;
    uint64_t v18 = *(void *)(v40 + *(int *)(v38 + 20));
    Date.init()(v16);
    uint64_t v19 = v41;
    uint64_t v20 = sub_1001481F8(v18, v17, (uint64_t)v10);
    if (v19) {
      return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v10, v37);
    }
    uint64_t v22 = v20;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v37);
    uint64_t v23 = *(void *)(v17 + v32);
    swift_retain();
    swift_retain();
    v34(v22, v23);
    swift_release();
    return swift_release_n(v22, 2LL);
  }

  uint64_t v26 = 6LL;
  while (1)
  {
    if (v35)
    {
      uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)(v26 - 4, a2);
      uint64_t v27 = result;
    }

    else
    {
      uint64_t v27 = *(void *)(a2 + 8 * v26);
      uint64_t result = swift_retain();
    }

    uint64_t v28 = v26 - 3;
    if (__OFADD__(v26 - 4, 1LL)) {
      break;
    }
    char v29 = static SessionBookmark.== infix(_:_:)(v27, v12);
    swift_release();
    if ((v29 & 1) != 0) {
      goto LABEL_14;
    }
    ++v26;
    if (v28 == v13) {
      goto LABEL_7;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_100148F80(void *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v10 = type metadata accessor for SessionType(0LL);
  uint64_t v11 = type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL);
  unint64_t v12 = sub_1001421C8();
  uint64_t v16 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v10, v11, v12);
  swift_bridgeObjectRetain(a2);
  swift_retain();
  sub_100147844(a1, &v16, a2, v4, a3, a4);
  uint64_t v13 = v16;
  if (v5) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain(v16);
  sub_100148BA4(v15, a2, a3, a4);
  return swift_bridgeObjectRelease_n(v13, 2LL);
}

void sub_100149074( char *a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t), uint64_t a7)
{
  uint64_t v68 = a7;
  uint64_t v69 = a6;
  uint64_t v70 = a5;
  uint64_t v71 = a4;
  uint64_t v77 = a3;
  uint64_t v75 = a1;
  uint64_t v9 = sub_10000941C(&qword_1001DC7A8);
  uint64_t v10 = __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v65 - v13;
  uint64_t v15 = (int *)type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL);
  __chkstk_darwin(v15);
  uint64_t v72 = (uint64_t)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v76 = type metadata accessor for SessionType(0LL);
  uint64_t v78 = *(void *)(v76 - 8);
  uint64_t v17 = __chkstk_darwin(v76);
  uint64_t v74 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v65 - v19;
  uint64_t v21 = sub_10000941C(&qword_1001D32B0);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v65 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v27 = [a2 eventBody];
  if (v27)
  {
    uint64_t v67 = v12;
    uint64_t v73 = v20;
    id v28 = v27;
    [a2 timestamp];
    Date.init(timeIntervalSinceReferenceDate:)(v29);
    uint64_t v30 = v24;
    uint64_t v31 = v28;
    sub_100009654((uint64_t)v23, 1LL, 1LL, v30);
    uint64_t v32 = type metadata accessor for SessionFeedback(0LL);
    swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    uint64_t v33 = (char *)SessionFeedback.init(withWrappedPayload:creationDate:closingDate:)(v28, (uint64_t)v26, (uint64_t)v23);
    if (v7)
    {
    }

    else
    {
      uint64_t v38 = v33;
      id v66 = v31;
      uint64_t v39 = *(void *)&v33[OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_sessionId];
      uint64_t v40 = *(void *)&v33[OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_sessionId + 8];
      uint64_t v41 = v75;
      objc_msgSend(a2, "timestamp", swift_bridgeObjectRetain(v40).n128_f64[0]);
      double v43 = v42;
      uint64_t v44 = type metadata accessor for SessionBookmark();
      swift_allocObject(v44, 49LL, 7LL);
      uint64_t v45 = sub_1001561C4((uint64_t)v41, v39, v40, v43);
      uint64_t v75 = v38;
      uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v78 + 16);
      uint64_t v47 = v76;
      v46(v73, &v38[OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_type], v76);
      sub_10014E5E8(*v77, (uint64_t)v14);
      if (sub_100010708((uint64_t)v14, 1LL, (uint64_t)v15) == 1)
      {
        uint64_t v71 = v45;
        sub_100014358((uint64_t)v14, &qword_1001DC7A8);
      }

      else
      {
        uint64_t v48 = (uint64_t)v14;
        uint64_t v49 = v72;
        sub_10014B4A0(v48, v72);
        uint64_t v50 = *(void *)(v49 + v15[6]);
        uint64_t v51 = swift_retain();
        char v52 = sub_100148A4C(v51, v71);
        swift_release();
        if ((v52 & 1) != 0)
        {
          uint64_t v71 = v45;
          sub_10014B464(v49);
        }

        else
        {
          uint64_t v65 = v50;
          uint64_t v60 = &v75[OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_creationDate];
          uint64_t v61 = swift_retain();
          uint64_t v62 = sub_1001481F8(v61, (uint64_t)v73, (uint64_t)v60);
          swift_release();
          uint64_t v63 = v65;
          swift_retain();
          uint64_t v64 = swift_retain();
          v69(v64, v63);
          uint64_t v71 = v45;
          sub_10014B464(v72);
          swift_release();
          swift_release_n(v62, 2LL);
          uint64_t v47 = v76;
        }
      }

      uint64_t v54 = (uint64_t)v73;
      uint64_t v53 = (uint64_t)v74;
      uint64_t v55 = (uint64_t)v67;
      uint64_t v56 = v47;
      v46(v74, v73, v47);
      v46((char *)v55, (char *)v54, v47);
      uint64_t v57 = v75;
      swift_retain();
      uint64_t v58 = v71;
      swift_retain();
      [a2 timestamp];
      *(void *)(v55 + v15[5]) = v57;
      *(void *)(v55 + v15[6]) = v58;
      *(void *)(v55 + v15[7]) = v59;
      sub_100009654(v55, 0LL, 1LL, (uint64_t)v15);
      sub_100149618(v55, v53);

      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v54, v56);
    }
  }

  else
  {
    unsigned __int8 v34 = [a2 error];
    unint64_t v35 = sub_10014B4E4();
    uint64_t v36 = swift_allocError(&type metadata for BiomeReadError, v35, 0LL, 0LL);
    *uint64_t v37 = v34;
    v37[1] = 0;
    swift_willThrow(v36);
  }

uint64_t sub_100149618(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001DC7A8);
  __chkstk_darwin(v4);
  char v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (sub_100010708(a1, 1LL, v10) == 1)
  {
    sub_100014358(a1, &qword_1001DC7A8);
    sub_100157714((uint64_t)v6);
    uint64_t v11 = type metadata accessor for SessionType(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(a2, v11);
    return sub_100014358((uint64_t)v6, &qword_1001DC7A8);
  }

  else
  {
    sub_10014B4A0(a1, (uint64_t)v9);
    sub_100157A80();
    uint64_t v13 = type metadata accessor for SessionType(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(a2, v13);
  }

void BiomeDatabaseReader.forEach(withPredicate:block:)()
{
  char v2 = v1;
  uint64_t v4 = v3;
  sub_100147CF4();
  if (v0) {
    return;
  }
  char v6 = v5;
  if (v2 < 0)
  {
    if ((unint64_t)v4 >> 62)
    {
      if (v4 >= 0) {
        uint64_t v11 = v4 & 0xFFFFFFFFFFFFFF8LL;
      }
      else {
        uint64_t v11 = v4;
      }
      swift_bridgeObjectRetain(v4);
      if (_CocoaArrayWrapper.endIndex.getter(v11)) {
        goto LABEL_6;
      }
    }

    else
    {
      uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v4);
      if (v9)
      {
LABEL_6:
        if ((v4 & 0xC000000000000001LL) == 0)
        {
          if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8LL) + 0x10))
          {
            __break(1u);
            return;
          }

          uint64_t v10 = swift_retain();
          int v7 = 1;
          uint64_t v8 = (void *)v4;
          goto LABEL_15;
        }

        uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v4);
LABEL_14:
        uint64_t v8 = (void *)v4;
        int v7 = 1;
LABEL_15:
        uint64_t v4 = v10;
        goto LABEL_16;
      }
    }

    uint64_t v12 = type metadata accessor for SessionBookmark();
    swift_allocObject(v12, 49LL, 7LL);
    SessionBookmark.init()();
    goto LABEL_14;
  }

  int v7 = v2 & 1;
  swift_retain();
  uint64_t v8 = _swiftEmptyArrayStorage;
LABEL_16:
  id v13 = sub_100147C30(v4);
  if (v13)
  {
    uint64_t v14 = v13;
    if (v7)
    {
      uint64_t v15 = (void *)sub_10014BBDC();
      sub_100148F80(v15, v16, v17, v18);
    }

    else
    {
      swift_bridgeObjectRetain(v8);
      uint64_t v22 = (void *)sub_10014BBDC();
      sub_100147968(v22, v23, v24, v25);
    }

    sub_10003B8E8();
  }

  else
  {
    sub_10003B8E8();
    unint64_t v19 = sub_10014A16C();
    uint64_t v20 = sub_100010EA0((uint64_t)&type metadata for SessionDatabaseError, v19);
    sub_10014BB2C((__n128)xmmword_100169490, v20, v21);
  }

  swift_release();
}

void BiomeDatabaseReader.forEach(start:block:)( uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  if (!v3)
  {
    int v7 = v6;
    id v8 = [v6 newEnumeratorFromStartTime:Date.timeIntervalSinceReferenceDate.getter(v6)];

    if (v8)
    {
      sub_100148F80(v8, (uint64_t)_swiftEmptyArrayStorage, a2, a3);
    }

    else
    {
      unint64_t v9 = sub_10014A16C();
      uint64_t v10 = sub_100010EA0((uint64_t)&type metadata for SessionDatabaseError, v9);
      sub_10014BB2C((__n128)xmmword_100169490, v10, v11);
    }
  }

void BiomeDatabaseReader.lookupSession(guid:creationTs:)()
{
  uint64_t v39 = v4;
  uint64_t v40 = v5;
  sub_10000941C(&qword_1001D32B0);
  sub_100027160();
  __chkstk_darwin(v6);
  uint64_t v7 = sub_10014BB74();
  uint64_t v8 = type metadata accessor for Date(v7);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = sub_10014BB38();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100009AEC();
  uint64_t v14 = v13 - v12;
  sub_100147CF4();
  if (!v2)
  {
    uint64_t v16 = v15;
    uint64_t v37 = v11;
    uint64_t v38 = 0LL;
    uint64_t v32 = v0;
    uint64_t v33 = v3;
    uint64_t v34 = v9;
    uint64_t v35 = v1;
    uint64_t v36 = v14;
    id v17 = [v15 newEnumeratorFromStartTime:Date.timeIntervalSinceReferenceDate.getter(v15)];

    if (v17)
    {
      swift_bridgeObjectRetain(v40);
      uint64_t v18 = sub_100147A68(v17, v39, v40);
      uint64_t v22 = v18;
      if (v18)
      {
        uint64_t v23 = v36;
        uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))( v36,  (uint64_t)v18 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_type,  v10);
        __chkstk_darwin(v24);
        *(&v31 - sub_1000108B8(v0 + 2) = v23;
        swift_retain();
        sub_100147B64();
        uint64_t v38 = 0LL;
        uint64_t v40 = v25;
        uint64_t v26 = (uint64_t)v22;
        if (v25)
        {
          uint64_t v27 = v34;
          uint64_t v28 = v32;
          sub_10005F8E4( v32,  v25 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_creationDate,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 16));
          sub_10003B954(v28, 0LL);
          uint64_t v29 = sub_100010708(v28, 1LL, v8);
          uint64_t v30 = v33;
          if ((_DWORD)v29 != 1)
          {
            sub_10005F8E4(v33, v28, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 32));
LABEL_13:
            sub_1001481F8(v26, v23, v30);
            sub_10014BB54();

            sub_100019D80(v26);
            swift_release();
            sub_10014BBCC();
            goto LABEL_14;
          }
        }

        else
        {
          uint64_t v28 = v32;
          uint64_t v29 = sub_10003B954(v32, 1LL);
          uint64_t v30 = v33;
        }

        Date.init()(v29);
        sub_100014358(v28, &qword_1001D32B0);
        goto LABEL_13;
      }

      sub_10014BC00();
    }

    else
    {
      unint64_t v19 = sub_10014A16C();
      uint64_t v20 = sub_100010EA0((uint64_t)&type metadata for SessionDatabaseError, v19);
      sub_10014BB2C((__n128)xmmword_100169490, v20, v21);
    }
  }

void *sub_100149CA4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = sub_10000941C(&qword_1001D32B0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v15 = [a2 eventBody];
  if (v15)
  {
    id v16 = v15;
    [a2 timestamp];
    Date.init(timeIntervalSinceReferenceDate:)(v17);
    sub_100009654((uint64_t)v11, 1LL, 1LL, v12);
    uint64_t v18 = type metadata accessor for SessionFeedback(0LL);
    swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    unint64_t v19 = SessionFeedback.init(withWrappedPayload:creationDate:closingDate:)(v16, (uint64_t)v14, (uint64_t)v11);
    if (v4
      || ((uint64_t v5 = v19,
           uint64_t v25 = (char *)v19 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_sessionId,
           uint64_t v26 = *(void *)((char *)v19 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_sessionId),
           uint64_t v27 = *((void *)v25 + 1),
           v26 == a3)
        ? (BOOL v28 = v27 == a4)
        : (BOOL v28 = 0),
          v28))
    {
    }

    else
    {
      char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, a3, a4, 0LL);

      if ((v29 & 1) == 0)
      {
        swift_release();
        return 0LL;
      }
    }
  }

  else
  {
    unsigned __int8 v20 = [a2 error];
    unint64_t v21 = sub_10014B4E4();
    uint64_t v22 = swift_allocError(&type metadata for BiomeReadError, v21, 0LL, 0LL);
    *uint64_t v23 = v20;
    v23[1] = 0;
    swift_willThrow(v22);
  }

  return v5;
}

void *sub_100149E8C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = sub_10000941C(&qword_1001D32B0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v13 = [a2 eventBody];
  if (v13)
  {
    id v14 = v13;
    [a2 timestamp];
    Date.init(timeIntervalSinceReferenceDate:)(v15);
    sub_100009654((uint64_t)v9, 1LL, 1LL, v10);
    uint64_t v16 = type metadata accessor for SessionFeedback(0LL);
    swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    double v17 = SessionFeedback.init(withWrappedPayload:creationDate:closingDate:)(v14, (uint64_t)v12, (uint64_t)v9);
    if (v3)
    {
    }

    else
    {
      uint64_t v4 = v17;
      char v23 = static SessionType.== infix(_:_:)((char *)v17 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_type, a3);

      if ((v23 & 1) == 0)
      {
        swift_release();
        return 0LL;
      }
    }
  }

  else
  {
    unsigned __int8 v18 = [a2 error];
    unint64_t v19 = sub_10014B4E4();
    uint64_t v20 = swift_allocError(&type metadata for BiomeReadError, v19, 0LL, 0LL);
    *unint64_t v21 = v18;
    v21[1] = 0;
    swift_willThrow(v20);
  }

  return v4;
}

uint64_t BiomeDatabaseReader.deinit()
{
  return v0;
}

uint64_t BiomeDatabaseReader.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

void sub_10014A090()
{
}

uint64_t sub_10014A0B0(uint64_t a1)
{
  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL);
    __break(1u);
  }

  else
  {
    if (a1)
    {
      uint64_t v2 = type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL);
      uint64_t v3 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v2);
      _OWORD v3[2] = a1;
    }

    else
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
    }

    type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL);
    return (uint64_t)v3;
  }

  return result;
}

unint64_t sub_10014A16C()
{
  unint64_t result = qword_1001DC680;
  if (!qword_1001DC680)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SessionDatabaseError,  &type metadata for SessionDatabaseError);
    atomic_store(result, (unint64_t *)&qword_1001DC680);
  }

  return result;
}

void *sub_10014A1A8(uint64_t a1, void *a2)
{
  return sub_100149E8C(a1, a2, *(void *)(v2 + 16));
}

uint64_t type metadata accessor for BiomeDatabaseReader()
{
  return objc_opt_self(&OBJC_CLASS____TtC14SearchFeedback19BiomeDatabaseReader);
}

void *sub_10014A1E0(void *result, int64_t a2, char a3, int64_t *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = a4[2];
  if (v7 <= v8) {
    int64_t v9 = a4[2];
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000941C(&qword_1001D2440);
    uint64_t v11 = (void *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    void v11[2] = v8;
    void v11[3] = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  id v13 = v11 + 4;
  id v14 = a4 + 4;
  if ((v5 & 1) != 0)
  {
    sub_1000DABEC(v14, v8, v13);
    a4[2] = 0LL;
  }

  else
  {
    sub_1000DB1B8((char *)v14, v8, (char *)v13);
  }

  swift_release();
  return v11;
}

size_t sub_10014A2B4(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    double v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_10000941C(&qword_1001DC788);
  uint64_t v11 = *(void *)(type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  double v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  unint64_t result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if (result - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_24;
  }
  __int128 v15[2] = v8;
  void v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  uint64_t v17 = *(unsigned __int8 *)(*(void *)(type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL) - 8) + 80LL);
  uint64_t v18 = (v17 + 32) & ~v17;
  unint64_t v19 = (unint64_t)v15 + v18;
  unint64_t v20 = a4 + v18;
  if ((v5 & 1) != 0)
  {
    sub_10015474C(v20, v8, v19);
    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_1001436BC(v20, v8, v19);
  }

  swift_release();
  return (size_t)v15;
}

void sub_10014A3F4(size_t *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL) - 8);
  size_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    size_t v3 = sub_10014B40C(v3);
  }
  uint64_t v4 = *(void *)(v3 + 16);
  v5[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_10014A4AC(v5);
  *a1 = v3;
}

uint64_t type metadata accessor for BiomeDatabaseReader.SessionProxy(uint64_t a1)
{
  uint64_t result = qword_1001DC808;
  if (!qword_1001DC808) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BiomeDatabaseReader.SessionProxy);
  }
  return result;
}

void sub_10014A4AC(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v142 = type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL);
  uint64_t v136 = *(void *)(v142 - 8);
  uint64_t v4 = __chkstk_darwin(v142);
  uint64_t v133 = (uint64_t)&v128 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v143 = (uint64_t)&v128 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v140 = (uint64_t)&v128 - v9;
  __chkstk_darwin(v8);
  uint64_t v139 = (uint64_t)&v128 - v10;
  Swift::Int v11 = a1[1];
  Swift::Int v12 = _minimumMergeRunLength(_:)(v11);
  if (v12 >= v11)
  {
    if ((v11 & 0x8000000000000000LL) == 0)
    {
      if (v11) {
        sub_10014ADBC(0LL, v11, 1LL, a1);
      }
      return;
    }

    goto LABEL_140;
  }

  Swift::Int v13 = v12;
  uint64_t v141 = a1;
  uint64_t v129 = sub_10014A0B0(v11 / 2);
  unint64_t v135 = v14;
  if (v11 <= 0)
  {
LABEL_104:
    uint64_t v16 = (char *)_swiftEmptyArrayStorage;
    unint64_t v65 = _swiftEmptyArrayStorage[2];
LABEL_105:
    if (v65 < 2)
    {
LABEL_116:
      swift_bridgeObjectRelease();
      if (v11 >= -1) {
        goto LABEL_117;
      }
      goto LABEL_144;
    }

    uint64_t v120 = *v141;
    while (1)
    {
      unint64_t v121 = v65 - 2;
      if (v65 < 2) {
        break;
      }
      if (!v120) {
        goto LABEL_148;
      }
      uint64_t v122 = v16;
      uint64_t v123 = *(void *)&v16[16 * v121 + 32];
      uint64_t v124 = *(void *)&v16[16 * v65 + 24];
      sub_10014AFBC( v120 + *(void *)(v136 + 72) * v123,  v120 + *(void *)(v136 + 72) * *(void *)&v16[16 * v65 + 16],  v120 + *(void *)(v136 + 72) * v124,  v135);
      if (v2) {
        goto LABEL_102;
      }
      if (v124 < v123) {
        goto LABEL_135;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      {
        sub_1000DD478((uint64_t)v16);
        uint64_t v122 = v127;
      }

      if (v121 >= *((void *)v122 + 2)) {
        goto LABEL_136;
      }
      uint64_t v125 = &v122[16 * v121 + 32];
      *(void *)uint64_t v125 = v123;
      *((void *)v125 + Hasher._combine(_:)(v0 & 1) = v124;
      unint64_t v126 = *((void *)v122 + 2);
      if (v65 > v126) {
        goto LABEL_137;
      }
      memmove(&v122[16 * v65 + 16], &v122[16 * v65 + 32], 16 * (v126 - v65));
      *((void *)v122 + sub_1000108B8(v0 + 2) = v126 - 1;
      unint64_t v65 = v126 - 1;
      uint64_t v16 = v122;
      if (v126 <= 2) {
        goto LABEL_116;
      }
    }

LABEL_117:
  *(void *)(v129 + swift_weakDestroy(v0 + 16) = 0LL;
  swift_bridgeObjectRelease();
}

uint64_t sub_10014ADBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v28 = a1;
  uint64_t v31 = type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL);
  uint64_t v7 = __chkstk_darwin(v31);
  uint64_t v32 = (uint64_t)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  Swift::Int v11 = (char *)&v26 - v10;
  uint64_t result = __chkstk_darwin(v9);
  Swift::Int v15 = (char *)&v26 - v14;
  uint64_t v30 = a3;
  uint64_t v27 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v34 = v16 * (v30 - 1);
    uint64_t v29 = v16;
    uint64_t v33 = v16 * v30;
    while (2)
    {
      uint64_t v17 = 0LL;
      uint64_t v18 = v28;
      do
      {
        uint64_t v19 = *a4;
        sub_10014B420(v33 + v17 + *a4, (uint64_t)v15);
        sub_10014B420(v34 + v17 + v19, (uint64_t)v11);
        uint64_t v20 = *(int *)(v31 + 28);
        double v21 = *(double *)&v15[v20];
        double v22 = *(double *)&v11[v20];
        sub_10014B464((uint64_t)v11);
        uint64_t result = sub_10014B464((uint64_t)v15);
        if (v21 >= v22) {
          break;
        }
        uint64_t v23 = *a4;
        if (!*a4)
        {
          __break(1u);
          return result;
        }

        uint64_t v24 = v23 + v33 + v17;
        uint64_t v25 = v23 + v34 + v17;
        sub_10014B4A0(v24, v32);
        swift_arrayInitWithTakeFrontToBack(v24, v25, 1LL, v31);
        uint64_t result = sub_10014B4A0(v32, v25);
        v17 -= v29;
        ++v18;
      }

      while (v30 != v18);
      v34 += v29;
      v33 += v29;
      if (++v30 != v27) {
        continue;
      }
      break;
    }
  }

  return result;
}

uint64_t sub_10014AFBC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v57 = a3;
  uint64_t v62 = type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL);
  uint64_t v7 = __chkstk_darwin(v62);
  uint64_t v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v7);
  Swift::Int v12 = (char *)&v56 - v11;
  uint64_t v14 = *(void *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }

  int64_t v15 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000LL && v14 == -1) {
    goto LABEL_76;
  }
  int64_t v17 = v57 - a2;
  if (v57 - a2 == 0x8000000000000000LL && v14 == -1) {
    goto LABEL_77;
  }
  unint64_t v61 = a4;
  uint64_t v19 = v15 / v14;
  uint64_t v20 = v14;
  uint64_t v21 = v17 / v14;
  if (v15 / v14 >= v17 / v14)
  {
    unint64_t v24 = v61;
    uint64_t result = sub_10015474C(a2, v17 / v14, v61);
    unint64_t v25 = v24 + v21 * v20;
    BOOL v37 = v21 * v20 < 1 || a1 >= a2;
    uint64_t v28 = v20;
    if (v37) {
      goto LABEL_70;
    }
    uint64_t v59 = -v20;
    uint64_t v60 = v9;
    unint64_t v38 = v57;
    uint64_t v58 = v20;
    while (1)
    {
      uint64_t v39 = v59;
      unint64_t v40 = v38 + v59;
      unint64_t v41 = v25 + v59;
      unint64_t v42 = v25;
      sub_10014B420(v25 + v59, (uint64_t)v12);
      unint64_t v43 = a2 + v39;
      uint64_t v44 = a2 + v39;
      uint64_t v45 = (uint64_t)v12;
      uint64_t v46 = (uint64_t)v60;
      sub_10014B420(v44, (uint64_t)v60);
      uint64_t v47 = *(int *)(v62 + 28);
      double v48 = *(double *)(v45 + v47);
      double v49 = *(double *)(v46 + v47);
      uint64_t v50 = v46;
      Swift::Int v12 = (char *)v45;
      sub_10014B464(v50);
      uint64_t result = sub_10014B464(v45);
      if (v48 < v49) {
        break;
      }
      if (v38 < v42 || v40 >= v42)
      {
        uint64_t result = swift_arrayInitWithTakeFrontToBack(v40, v41, 1LL, v62);
        unint64_t v25 = v41;
        unint64_t v24 = v61;
LABEL_65:
        uint64_t v28 = v58;
        unint64_t v38 = v40;
        goto LABEL_66;
      }

      unint64_t v24 = v61;
      if (v38 == v42)
      {
        unint64_t v25 = v41;
        goto LABEL_65;
      }

      unint64_t v38 = v40;
      uint64_t result = swift_arrayInitWithTakeBackToFront(v40, v41, 1LL, v62);
      unint64_t v25 = v41;
      uint64_t v28 = v58;
LABEL_66:
      if (v25 <= v24 || a2 <= a1) {
        goto LABEL_70;
      }
    }

    unint64_t v57 = v42;
    if (v38 < a2 || v40 >= a2)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack(v40, v43, 1LL, v62);
      a2 = v43;
      unint64_t v24 = v61;
      uint64_t v28 = v58;
    }

    else
    {
      uint64_t v28 = v58;
      if (v38 != a2)
      {
        unint64_t v38 = v40;
        uint64_t result = swift_arrayInitWithTakeBackToFront(v40, v43, 1LL, v62);
        a2 = v43;
        unint64_t v24 = v61;
LABEL_63:
        unint64_t v25 = v57;
        goto LABEL_66;
      }

      a2 = v43;
      unint64_t v24 = v61;
    }

    unint64_t v38 = v40;
    goto LABEL_63;
  }

  unint64_t v22 = v61;
  uint64_t result = sub_10015474C(a1, v15 / v14, v61);
  uint64_t v23 = v19 * v20;
  unint64_t v24 = v22;
  unint64_t v25 = v22 + v23;
  unint64_t v26 = v57;
  BOOL v27 = v23 < 1 || a2 >= v57;
  uint64_t v28 = v20;
  if (!v27)
  {
    do
    {
      unint64_t v29 = v25;
      sub_10014B420(a2, (uint64_t)v12);
      sub_10014B420(v24, (uint64_t)v9);
      uint64_t v30 = *(int *)(v62 + 28);
      double v31 = *(double *)&v12[v30];
      double v32 = *(double *)&v9[v30];
      sub_10014B464((uint64_t)v9);
      uint64_t result = sub_10014B464((uint64_t)v12);
      if (v31 >= v32)
      {
        if (a1 < v24 || a1 >= v24 + v28)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack(a1, v24, 1LL, v62);
        }

        else if (a1 != v24)
        {
          uint64_t result = swift_arrayInitWithTakeBackToFront(a1, v24, 1LL, v62);
        }

        unint64_t v33 = a2;
        v24 += v28;
        unint64_t v26 = v57;
      }

      else
      {
        unint64_t v33 = a2 + v28;
        if (a1 < a2 || a1 >= v33)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack(a1, a2, 1LL, v62);
        }

        else if (a1 != a2)
        {
          uint64_t result = swift_arrayInitWithTakeBackToFront(a1, a2, 1LL, v62);
        }
      }

      unint64_t v25 = v29;
      a1 += v28;
      BOOL v36 = v24 >= v29 || v33 >= v26;
      a2 = v33;
    }

    while (!v36);
  }

  a2 = a1;
LABEL_70:
  int64_t v54 = v25 - v24;
  if (v28 != -1 || v54 != 0x8000000000000000LL)
  {
    sub_10015474C(v24, v54 / v28, a2);
    return 1LL;
  }

id sub_10014B3AC(uint64_t a1, unint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100010A30(a1, a2);
  id v7 = [a3 writeData:isa];

  return v7;
}

size_t sub_10014B40C(uint64_t a1)
{
  return sub_10014A2B4(0LL, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_10014B420(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014B464(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10014B4A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10014B4E4()
{
  unint64_t result = qword_1001DC798;
  if (!qword_1001DC798)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169500, &type metadata for BiomeReadError);
    atomic_store(result, (unint64_t *)&qword_1001DC798);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for BiomeReadError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  unsigned int v2 = a2 + 0xFFFF;
  else {
    unsigned int v3 = 4;
  }
  if (v2 < 0xFF0000) {
    unsigned int v3 = 1;
  }
  if (v2 >= 0x10000) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_10014B568 + 4 * byte_1001694A0[v4]))();
}

uint64_t storeEnumTagSinglePayload for BiomeReadError(_WORD *a1, int a2, int a3)
{
  unsigned int v3 = a3 + 0xFFFF;
  else {
    int v4 = 4;
  }
  if (v3 < 0xFF0000) {
    int v4 = 1;
  }
  if (v3 >= 0x10000) {
    LODWORD(v5) = v4;
  }
  else {
    LODWORD(v5) = 0;
  }
  if (a3) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (!a2) {
    return ((uint64_t (*)(void))((char *)sub_10014B62C + 4 * byte_1001694AA[v5]))();
  }
  *a1 = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_10014B60C + 4 * byte_1001694A5[v5]))();
}

uint64_t sub_10014B60C(uint64_t result)
{
  *(_BYTE *)(result + sub_1000108B8(v0 + 2) = v1;
  return result;
}

uint64_t sub_10014B62C(uint64_t result)
{
  *(_BYTE *)(result + sub_1000108B8(v0 + 2) = 0;
  return result;
}

uint64_t sub_10014B634(uint64_t result)
{
  *(_DWORD *)(result + sub_1000108B8(v0 + 2) = v1;
  return result;
}

uint64_t sub_10014B63C(uint64_t result)
{
  *(_WORD *)(result + sub_1000108B8(v0 + 2) = v1;
  return result;
}

uint64_t sub_10014B644(uint64_t result)
{
  *(_WORD *)(result + sub_1000108B8(v0 + 2) = 0;
  return result;
}

uint64_t sub_10014B64C(uint64_t result)
{
  *(_DWORD *)(result + sub_1000108B8(v0 + 2) = 0;
  return result;
}

uint64_t sub_10014B658(unsigned __int8 *a1)
{
  if (a1[1]) {
    return (*a1 | (a1[1] << 8)) - 255;
  }
  else {
    return 0LL;
  }
}

_BYTE *sub_10014B678(_BYTE *result, int a2)
{
  if (a2)
  {
    *unint64_t result = a2 - 1;
    unsigned int v2 = ((a2 - 1) >> 8) + 1;
  }

  else
  {
    LOBYTE(vsub_1000108B8(v0 + 2) = 0;
  }

  result[1] = v2;
  return result;
}

ValueMetadata *type metadata accessor for BiomeReadError()
{
  return &type metadata for BiomeReadError;
}

uint64_t *sub_10014B6AC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    int v4 = (uint64_t *)(v11 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for SessionType(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v4, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)v4 + static AvroValue.__derived_struct_equals(_:_:)(v9, v10, v3, v4, v5, v6, v7, v8) = v10;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)v4 + v9) = v11;
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_retain(v10);
  }

  swift_retain(v11);
  return v4;
}

uint64_t sub_10014B750(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SessionType(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  swift_release(*(void *)(a1 + *(int *)(a2 + 20)));
  return swift_release(*(void *)(a1 + *(int *)(a2 + 24)));
}

uint64_t sub_10014B7A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SessionType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = *(void *)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  uint64_t v10 = *(void *)(a2 + v8);
  *(void *)(a1 + static AvroValue.__derived_struct_equals(_:_:)(v9, v10, v3, v4, v5, v6, v7, v8) = v10;
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_retain(v9);
  swift_retain(v10);
  return a1;
}

uint64_t sub_10014B81C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SessionType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void *)(a2 + v7);
  uint64_t v9 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  swift_retain(v8);
  swift_release(v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = *(void *)(a2 + v10);
  uint64_t v12 = *(void *)(a1 + v10);
  *(void *)(a1 + v1sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = v11;
  swift_retain(v11);
  swift_release(v12);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10014B8B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SessionType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10014B920(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SessionType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_release(v8);
  uint64_t v9 = a3[6];
  uint64_t v10 = *(void *)(a1 + v9);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  swift_release(v10);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10014B9A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014B9B0);
}

uint64_t sub_10014B9B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SessionType(0LL);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return sub_100010708(a1, a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(static AvroValue.__derived_struct_equals(_:_:)(v9, v10, v3, v4, v5, v6, v7, v8) = -1;
  }
  return (v8 + 1);
}

uint64_t sub_10014BA28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014BA34);
}

uint64_t sub_10014BA34(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SessionType(0LL);
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3) {
    return sub_100009654(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_10014BAA8(uint64_t a1)
{
  uint64_t result = type metadata accessor for SessionType(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    void v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    void v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10014BB2C(__n128 a1, uint64_t a2, __n128 *a3)
{
  *a3 = a1;
  return swift_willThrow();
}

uint64_t sub_10014BB38()
{
  return type metadata accessor for SessionType(0LL);
}

uint64_t sub_10014BB54()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_10014BB68(uint64_t a1)
{
  return v1(a1, v3, v2);
}

uint64_t sub_10014BB74()
{
  return 0LL;
}

void sub_10014BB90(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 88) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_10014BBAC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10014BBBC()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 128) + 8LL))(v0, *(void *)(v1 - 120));
}

uint64_t sub_10014BBCC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_10014BBDC()
{
  return v0;
}

uint64_t sub_10014BBF0(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_10014BBF8()
{
  return type metadata accessor for RawPayload();
}

void sub_10014BC00()
{
}

void sub_10014BC08(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_10003DDD8(a1);
  uint64_t v2 = SearchSessionTableColumn.rawValue.getter(v1);
  sub_10007B058(v2, v3, v4);
  sub_1000325E4();
  sub_10007AFDC();
  sub_10003DDCC();
}

Swift::Int sub_10014BC3C(char a1)
{
  return Hasher._finalize()();
}

void sub_10014BC80(uint64_t a1)
{
}

void sub_10014BCA8(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_10014BCDC(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE800000000000000LL);
}

void sub_10014BD30(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_10014BD64(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE700000000000000LL);
}

void sub_10014BE30(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = SearchSessionTableColumn.rawValue.getter(a2);
  sub_10007B058(v3, v4, v5);
  sub_1000325E4();
  sub_10007AFDC();
  sub_10003DDCC();
}

Swift::Int sub_10014BE68(uint64_t a1, char a2)
{
  return Hasher._finalize()();
}

void sub_10014BEA8(uint64_t a1)
{
}

uint64_t sub_10014BED4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10014BEFC + 4 * byte_10016954C[a1]))( 29556LL,  0xE200000000000000LL);
}

uint64_t sub_10014BEFC()
{
  return 0x6E6F6973736573LL;
}

uint64_t sub_10014BF14()
{
  return 0x746E65696C63LL;
}

uint64_t sub_10014BF28()
{
  return 0x6975675F72657375LL;
}

uint64_t sub_10014BF44()
{
  return 0x6C62616E655F7564LL;
}

uint64_t sub_10014BF60()
{
  return 0x5F7972746E756F63LL;
}

uint64_t sub_10014BF80()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_10014BF94()
{
  return 0x625F6D6574737973LL;
}

uint64_t sub_10014BFB4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10014BFDC + 4 * byte_100169554[a1]))( 29556LL,  0xE200000000000000LL);
}

uint64_t sub_10014BFDC()
{
  return 0x6B63616264656566LL;
}

uint64_t sub_10014BFF4()
{
  return 1701869940LL;
}

uint64_t sub_10014C004()
{
  return 0x64695F7972657571LL;
}

uint64_t sub_10014C01C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = sub_100019AFC((void *)(v3 + 48), *(void *)(v3 + 72));
  sub_1001457F0((uint64_t)v6, v7, v8, v9, v10);
  if (v4) {
    return v3;
  }
  uint64_t v11 = v39[3];
  uint64_t v12 = sub_100145850(v39);
  uint64_t v15 = sub_1001458E0( v12,  v13,  v14,  (uint64_t)&protocol requirements base descriptor for BiomeTableConfig,  (uint64_t)&associated type descriptor for BiomeTableConfig.StoreConfig);
  uint64_t v16 = sub_10000941C(&qword_1001DC0C0);
  sub_100145920(v16);
  uint64_t result = sub_100145944();
  if ((a3 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)(v15 + 16) > a3)
  {
    sub_10014D864(result, v18, v19, v20, v21, v22, v23, v24, v38[0]);
    uint64_t v25 = sub_100009B3C();
    sub_100145900(v25, v26, v27, v28, v29, v30, v31, v32, v38[0], v38[1], v38[2], v38[3]);
    uint64_t v3 = sub_100145910(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16));
    uint64_t v33 = sub_1000108B8(v38);
    sub_100144708(v33, v34, v35, v36, v37);
    return v3;
  }

  __break(1u);
  return result;
}

uint64_t sub_10014C10C(unint64_t a1)
{
  uint64_t v4 = sub_100019AFC(v1 + 6, v1[9]);
  sub_1001457F0((uint64_t)v4, v5, v6, v7, v8);
  if (v2) {
    return (uint64_t)v1;
  }
  uint64_t v9 = v53[3];
  uint64_t v10 = sub_100145850(v53);
  uint64_t v13 = sub_1001458E0( v10,  v11,  v12,  (uint64_t)&protocol requirements base descriptor for BiomeTableConfig,  (uint64_t)&associated type descriptor for BiomeTableConfig.StoreConfig);
  uint64_t v14 = sub_10000941C(&qword_1001DC0C0);
  sub_100145920(v14);
  uint64_t result = sub_100145944();
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)(v13 + 16) > a1)
  {
    sub_10014D864(result, v16, v17, v18, v19, v20, v21, v22, v50[0]);
    uint64_t v23 = sub_100009B3C();
    sub_100145900(v23, v24, v25, v26, v27, v28, v29, v30, v50[0], v50[1], v50[2], v51);
    uint64_t v31 = sub_100145910(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
    uint64_t v33 = v32;
    uint64_t v34 = v51;
    uint64_t v35 = v52;
    sub_100019AFC(v50, v51);
    uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 24))(v34, v35);
    uint64_t v37 = type metadata accessor for RawPayload();
    unint64_t v38 = (void *)BMUseCaseLegacy;
    uint64_t v39 = objc_allocWithZone(&OBJC_CLASS___BMStreamDatastoreReader);
    id v40 = v38;
    unint64_t v41 = (void *)v36;
    unsigned __int8 v1 = v39;
    unint64_t v42 = sub_100145524(v31, v33, v41, v37, v40);
    if (v42)
    {
      unsigned __int8 v1 = v42;
    }

    else
    {
      unint64_t v48 = sub_100144640();
      sub_100010EA0((uint64_t)&type metadata for BiomeTableError, v48);
      sub_100145844(v49, 3);
    }

    uint64_t v43 = sub_1000108B8(v50);
    sub_100144708(v43, v44, v45, v46, v47);
    return (uint64_t)v1;
  }

  __break(1u);
  return result;
}

uint64_t sub_10014C2A0(uint64_t a1)
{
  return sub_10014C2B4(a1);
}

uint64_t sub_10014C2B4(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  swift_beginAccess(a1 + 32, v8, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    uint64_t result = swift_dynamicCastClass(Strong, v1);
    if (result) {
      return result;
    }
    swift_release();
  }

  unint64_t v5 = sub_10010D364();
  uint64_t v6 = sub_100010EA0((uint64_t)&type metadata for SQLiteVTabError, v5);
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  return swift_willThrow(v6);
}

void sub_10014C344()
{
}

void sub_10014C360(uint64_t *a1)
{
  if (!v1)
  {
    BaseBiomeTable.getSQLiteBridge()();
    sub_100019F70();
  }

  sub_1000E5738();
}

void sub_10014C3BC(uint64_t a1)
{
}

void sub_10014C3D8(uint64_t a1, uint64_t *a2)
{
  if (!v2)
  {
    sub_10014C01C(*(void *)(v4 + 16), *(void *)(v4 + 24), v3);
    sub_1001458AC();
  }

  sub_1000E5738();
}

double sub_10014C430()
{
  return sub_10014C44C(&qword_1001DC0E0);
}

double sub_10014C44C(uint64_t *a1)
{
  if (!v1)
  {
    double TimeFrame = BaseBiomeTable.getQueryTimeFrameGuideline()();
    sub_1001458AC();
  }

  return TimeFrame;
}

uint64_t sub_10014C4A8(uint64_t a1)
{
  return sub_10014C4C4(a1, &qword_1001DC0E0);
}

uint64_t sub_10014C4C4(uint64_t a1, uint64_t *a2)
{
  if (!v2)
  {
    unint64_t v3 = sub_100110138();
    sub_10014C10C(v3);
    sub_1001458AC();
  }

  return sub_100110138();
}

uint64_t sub_10014C514(uint64_t a1)
{
  return sub_10014C540(a1, &qword_1001DC0E8, &qword_1001DC0E0, &qword_1001DCDD0);
}

uint64_t sub_10014C540(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = v4;
  uint64_t v10 = sub_10000941C(a2);
  uint64_t v11 = swift_dynamicCastClass(a1, v10);
  if (!v11)
  {
    unint64_t v15 = sub_100144640();
    sub_100010EA0((uint64_t)&type metadata for BiomeTableError, v15);
    sub_100145844(v16, 2);
    swift_release();
    goto LABEL_6;
  }

  uint64_t v12 = v11;
  swift_retain();
  swift_retain();
  sub_10014C360(a3);
  if (v5)
  {
    sub_100010D00();
    sub_1001174E4();
LABEL_6:
    uint64_t v17 = sub_10000941C(a4);
    swift_deallocPartialClassInstance(v8, v17, 64LL, 7LL);
    return v8;
  }

  *(void *)(v8 + 3sub_1000108B8(v0 + 2) = v13;
  *(void *)(v8 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = v14;
  *(double *)(v8 + sub_100019B20(v3, v1 + 48) = sub_10014C44C(a3);
  *(void *)(v8 + 5sub_10005B218(v0, v2, v1, 6) = v19;
  sub_100010D00();
  uint64_t v8 = SQLiteBaseVTab.Cursor.init(_:)(v12);
  swift_release();
  return v8;
}

void SearchFeedbackTableColumn.columnType.getter(char a1)
{
  __asm { BR              X10 }

void *sub_10014C6A8()
{
  return &type metadata for Data;
}

unint64_t sub_10014C6F4()
{
  unint64_t result = qword_1001DAC10;
  if (!qword_1001DAC10)
  {
    uint64_t v1 = sub_1000094A0(&qword_1001DAC08);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1001DAC10);
  }

  return result;
}

uint64_t SearchFeedbackTableColumn.propertyName.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10014C788 + 4 * byte_10016955C[a1]))( 0x6D617473656D6974LL,  0xE900000000000070LL);
}

unint64_t sub_10014C78C()
{
  return 0xD000000000000012LL;
}

uint64_t sub_10014C7A8()
{
  return 0x64497972657571LL;
}

SearchFeedback::SearchFeedbackTableColumn_optional __swiftcall SearchFeedbackTableColumn.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001BEFF0, v2);
  sub_1000325E4();
  if (v3 >= 4) {
    return (SearchFeedback::SearchFeedbackTableColumn_optional)4;
  }
  else {
    return (SearchFeedback::SearchFeedbackTableColumn_optional)v3;
  }
}

_UNKNOWN **static SearchFeedbackTableColumn.allCases.getter()
{
  return &off_1001BEE20;
}

uint64_t SearchFeedbackTableColumn.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10014C838 + 4 * byte_100169560[a1]))( 29556LL,  0xE200000000000000LL);
}

uint64_t sub_10014C83C()
{
  return 1701869940LL;
}

uint64_t sub_10014C84C()
{
  return 0x64695F7972657571LL;
}

BOOL sub_10014C864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10014D588();
  return static SQLiteColumnDescribing.== infix(_:_:)(a1, a2, a3, v6);
}

Swift::Int sub_10014C8A4()
{
  return sub_10014BC3C(*v0);
}

void sub_10014C8AC(uint64_t a1)
{
}

Swift::Int sub_10014C8B4(uint64_t a1)
{
  return sub_10014BE68(a1, *v1);
}

SearchFeedback::SearchFeedbackTableColumn_optional sub_10014C8BC@<W0>( Swift::String *a1@<X0>, SearchFeedback::SearchFeedbackTableColumn_optional *a2@<X8>)
{
  result.Swift::Bool value = SearchFeedbackTableColumn.init(rawValue:)(*a1).value;
  a2->Swift::Bool value = result.value;
  return result;
}

uint64_t sub_10014C8E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SearchFeedbackTableColumn.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10014C910(void *a1@<X8>)
{
  *a1 = &off_1001BEE20;
}

void sub_10014C920()
{
}

uint64_t sub_10014C928()
{
  return sub_10014BFB4(*v0);
}

void sub_10014C930()
{
}

Swift::String __swiftcall SearchFeedbackTable.getModuleName()()
{
  uint64_t v0 = 0x6162646565665F70LL;
  uint64_t v1 = (void *)0xEA00000000006B63LL;
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

void SearchFeedbackTable.__allocating_init(config:environment:)(void *a1)
{
  uint64_t v3 = sub_100019B20((uint64_t)a1, (uint64_t)v4);
  sub_10014D8B0(v3);
  sub_1000108B8(a1);
  sub_1001446CC();
}

void SearchFeedbackTable.init(config:environment:)(void *a1)
{
  uint64_t v2 = sub_100019B20((uint64_t)a1, (uint64_t)v3);
  sub_10014D8B0(v2);
  sub_1000108B8(a1);
  sub_1001446CC();
}

uint64_t SearchFeedbackTable.__deallocating_deinit()
{
  uint64_t v0 = _s14SearchFeedback0aB5TableCfd_0();
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

uint64_t SearchFeedbackConnection.checkPlanOrdering(_:)(uint64_t result)
{
  if (*(_DWORD *)(result + 16) == 1)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(unsigned int **)(result + 24);
    if (v2)
    {
      if (!*((_BYTE *)v2 + 4))
      {
        Swift::String result = sub_100143280(*v2);
      }
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t SearchFeedbackConnection.checkPlanConstraints(_:)(unsigned int *a1)
{
  uint64_t v5 = *a1;
  if ((v5 & 0x80000000) != 0)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }

  uint64_t v4 = (_UNKNOWN **)a1;
  if ((_DWORD)v5)
  {
    uint64_t v3 = 0LL;
    int v6 = 0;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v9 = *((void *)a1 + 1);
    uint64_t v10 = 8 * v5;
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v11 = (_BYTE *)(v9 + 5);
    uint64_t v4 = &off_1001BEEA8;
    while (1)
    {
      if (!v9) {
        break;
      }
      uint64_t v12 = *(int *)(v11 - 5);
      if ((int)v12 <= 3)
      {
        if ((v12 & 0x80000000) != 0) {
          goto LABEL_42;
        }
        int v13 = *((unsigned __int8 *)&off_1001BEEA8 + v12 + 32);
        if ((v13 - 2) >= 2)
        {
          if (v13)
          {
            if (!*v11)
            {
              sub_1000110A8();
              return 0LL;
            }
          }

          else if (*v11)
          {
            int v14 = *(v11 - 1);
            HIDWORD(v15) = v14;
            LODWORD(v15) = v14 - 4;
            switch((v15 >> 2))
            {
              case 0u:
              case 7u:
                uint64_t v18 = v8;
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
                uint64_t v8 = v18;
                uint64_t v7 = 1LL;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                  goto LABEL_25;
                }
                uint64_t v7 = 1LL;
                goto LABEL_18;
              case 1u:
              case 3u:
                uint64_t v16 = v7;
                char v17 = swift_isUniquelyReferenced_nonNull_native(v2);
                uint64_t v7 = v16;
                uint64_t v8 = 1LL;
                if ((v17 & 1) != 0)
                {
                  uint64_t v8 = 1LL;
                }

                else
                {
LABEL_25:
                  uint64_t v25 = v7;
                  uint64_t v26 = v8;
                  sub_100031574(0LL, v2[2] + 1LL, 1LL, (uint64_t)v2);
                  uint64_t v8 = v26;
                  uint64_t v7 = v25;
                  uint64_t v2 = v27;
                }

uint64_t SearchFeedbackConnection.__allocating_init(_:argc:argv:)(uint64_t a1, int a2, uint64_t a3)
{
  return sub_100143810(a1, a2, a3);
}

uint64_t SearchFeedbackConnection.init(_:argc:argv:)(uint64_t a1, int a2, uint64_t a3)
{
  return sub_100143810(a1, a2, a3);
}

uint64_t sub_10014CEC4()
{
  uint64_t v1 = sub_100110138();
  return sub_10014CF04(v1);
}

uint64_t sub_10014CF04(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = qword_1001DB8F8;
  swift_retain();
  if (v6 != -1) {
    swift_once(&qword_1001DB8F8, sub_10014DCC4);
  }
  *(_OWORD *)(v1 + 7sub_1000108B8(v0 + 2) = static BiomeStoreEnumerator.Constants.defaultTimeRange;
  uint64_t v7 = type metadata accessor for SearchFeedbackConnection(0LL);
  uint64_t v8 = swift_dynamicCastClass(a1, v7);
  if (!v8)
  {
    sub_100010D00();
    unint64_t v14 = sub_100144640();
    sub_100010EA0((uint64_t)&type metadata for BiomeTableError, v14);
    sub_100145844(v15, 2);
LABEL_8:
    swift_release();
    uint64_t v25 = type metadata accessor for SearchFeedbackCursor(0LL);
    swift_deallocPartialClassInstance(v1, v25, 88LL, 7LL);
    return v4;
  }

  uint64_t v9 = v8;
  swift_retain();
  sub_10014C360(&qword_1001DC0D0);
  if (v3)
  {
    sub_10014468C();
    goto LABEL_8;
  }

  uint64_t v12 = v10;
  uint64_t v13 = v11;
  sub_10014D8D4(1LL, &qword_1001DC0D0);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  sub_10014D8D4(0LL, &qword_1001DC0D0);
  uint64_t v46 = v20;
  uint64_t v51 = v21;
  uint64_t ObjectType = swift_getObjectType(v12);
  uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
  uint64_t v22 = v45(ObjectType, v13);
  uint64_t v47 = v23;
  uint64_t v24 = swift_getObjectType(v22);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t))(v47 + 40))(v50, v17, v19, v24);
  swift_unknownObjectRelease();
  sub_10005A1BC();
  uint64_t v27 = v45(ObjectType, v13);
  uint64_t v29 = v28;
  uint64_t v30 = swift_getObjectType(v27);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 40))(v49, v46, v51, v30, v29);
  swift_unknownObjectRelease();
  sub_10005A1BC();
  *(double *)(v4 + 7sub_1000108B8(v0 + 2) = sub_10014C44C(&qword_1001DC0D0);
  *(void *)(v4 + 8sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = v31;
  uint64_t v32 = sub_10014C4C4(0LL, &qword_1001DC0D0);
  double v33 = *(double *)(v4 + 72);
  double v34 = *(double *)(v4 + 80);
  sub_100019B20((uint64_t)v49, (uint64_t)v48);
  uint64_t v35 = type metadata accessor for FeedbackEnumerator();
  sub_100009ACC(v35, 242LL);
  swift_unknownObjectRetain();
  *(void *)(v4 + 64) = sub_100154894(v32, v12, v13, v48, v33, v34);
  sub_100010D00();
  uint64_t v4 = sub_10014C540(v9, &qword_1001DC0D8, &qword_1001DC0D0, &qword_1001DCDC8);
  sub_10006B7B4();
  sub_100019F70();
  uint64_t v36 = sub_1000108B8(v49);
  sub_10014D8C0(v36, v37, v38, v39, v40, v41, v42, v43, ObjectType, (uint64_t)v45, v46, v47, v48[0], v48[1]);
  return v4;
}

uint64_t SearchFeedbackCursor.readFilterParameters(idxNum:idxStr:arguments:)( uint64_t a1, char *a2, uint64_t a3)
{
  double v4 = *(double *)(v3 + 72);
  double v5 = *(double *)(v3 + 80);
  if (a2)
  {
    uint64_t v6 = *(void *)(a3 + 16);
    if (v6)
    {
      uint64_t v7 = a2;
      uint64_t v8 = a3 + 32;
      do
      {
        int v9 = *v7++;
        double v10 = SQLiteArgument.getDouble()();
        HIDWORD(v1Hasher._combine(_:)(v0 & 1) = v9;
        LODWORD(v1Hasher._combine(_:)(v0 & 1) = v9 - 4;
        switch((v11 >> 2))
        {
          case 0u:
            if (v4 < v10)
            {
              double v4 = v10 + 0.0;
              if (v10 + 0.0 < INFINITY) {
                *(void *)&v4 += (*(uint64_t *)&v4 >> 63) | 1;
              }
            }

            break;
          case 1u:
            if (v10 <= v5) {
              double v5 = v10;
            }
            break;
          case 3u:
            if (v10 < v5)
            {
              double v12 = 0.0 - v10;
              if (v12 < INFINITY) {
                *(void *)&v12 += (*(uint64_t *)&v12 >> 63) | 1;
              }
              double v5 = -v12;
            }

            break;
          case 7u:
            if (v4 <= v10) {
              double v4 = v10;
            }
            break;
          default:
            break;
        }

        v8 += 8LL;
        --v6;
      }

      while (v6);
    }
  }

  if (v5 >= v4) {
    double v13 = v5;
  }
  else {
    double v13 = v4;
  }
  double v14 = fmax(v4, 0.0);
  if (v5 >= 0.0)
  {
    double v15 = v5;
  }

  else
  {
    double v13 = v14;
    double v15 = 0.0;
  }

  if (v4 < 0.0)
  {
    double v16 = 0.0;
  }

  else
  {
    double v15 = v13;
    double v16 = v4;
  }

  if (v16 > v15)
  {
    __break(1u);
    JUMPOUT(0x10014D40CLL);
  }

  uint64_t v17 = *(void *)(v3 + 64);
  double v18 = ClosedRange<>.fromUnixToReferenceTime.getter(v16, v15);
  uint64_t v20 = v19;
  swift_beginAccess(v17 + 24, v22, 1LL, 0LL);
  *(double *)(v17 + swift_weakDestroy(v0 + 24) = v18;
  *(void *)(v17 + 3sub_1000108B8(v0 + 2) = v20;
  return 0LL;
}

Swift::Int32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SearchFeedbackCursor.setValue(forColumn:on:)( Swift::String forColumn, SQLiter::SQLiteContext on)
{
  object = forColumn._object;
  uint64_t countAndFlagsBits = forColumn._countAndFlagsBits;
  swift_bridgeObjectRetain(forColumn._object);
  v4._uint64_t countAndFlagsBits = countAndFlagsBits;
  v4._object = object;
  double v5 = (char *)sub_10014D47C + 4 * byte_100169564[SearchFeedbackTableColumn.init(rawValue:)(v4).value];
  __asm { BR              X10 }

  return result;
}

uint64_t sub_10014D47C()
{
  return 0LL;
}

unint64_t sub_10014D518()
{
  unint64_t result = qword_1001DC848;
  if (!qword_1001DC848)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchFeedbackTableColumn,  &type metadata for SearchFeedbackTableColumn);
    atomic_store(result, (unint64_t *)&qword_1001DC848);
  }

  return result;
}

unint64_t sub_10014D554(void *a1)
{
  a1[1] = sub_10014D588();
  a1[2] = sub_10014D5C4();
  unint64_t result = sub_10014D600();
  a1[3] = result;
  return result;
}

unint64_t sub_10014D588()
{
  unint64_t result = qword_1001DC850;
  if (!qword_1001DC850)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchFeedbackTableColumn,  &type metadata for SearchFeedbackTableColumn);
    atomic_store(result, (unint64_t *)&qword_1001DC850);
  }

  return result;
}

unint64_t sub_10014D5C4()
{
  unint64_t result = qword_1001DC858;
  if (!qword_1001DC858)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchFeedbackTableColumn,  &type metadata for SearchFeedbackTableColumn);
    atomic_store(result, (unint64_t *)&qword_1001DC858);
  }

  return result;
}

unint64_t sub_10014D600()
{
  unint64_t result = qword_1001DC860;
  if (!qword_1001DC860)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchFeedbackTableColumn,  &type metadata for SearchFeedbackTableColumn);
    atomic_store(result, (unint64_t *)&qword_1001DC860);
  }

  return result;
}

unint64_t sub_10014D640()
{
  unint64_t result = qword_1001DC868;
  if (!qword_1001DC868)
  {
    uint64_t v1 = sub_1000094A0(&qword_1001DC870);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001DC868);
  }

  return result;
}

unint64_t sub_10014D684(uint64_t a1)
{
  unint64_t result = sub_10014D518();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_10014D6AC()
{
  unint64_t result = qword_1001DC878;
  if (!qword_1001DC878)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SearchFeedbackTableColumn,  &type metadata for SearchFeedbackTableColumn);
    atomic_store(result, (unint64_t *)&qword_1001DC878);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for SearchFeedbackTableColumn(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = 1;
  }
  else {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10014D734 + 4 * byte_10016956E[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10014D768 + 4 * byte_100169569[v4]))();
}

uint64_t sub_10014D768(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_10014D770(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10014D778LL);
  }
  return result;
}

uint64_t sub_10014D784(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x10014D78CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10014D790(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_10014D798(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchFeedbackTableColumn()
{
  return &type metadata for SearchFeedbackTableColumn;
}

ValueMetadata *type metadata accessor for SearchFeedbackTableConfig()
{
  return &type metadata for SearchFeedbackTableConfig;
}

uint64_t type metadata accessor for SearchFeedbackTable(uint64_t a1)
{
  return sub_100018ABC(a1, qword_1001DC8D0, (uint64_t)&nominal type descriptor for SearchFeedbackTable);
}

uint64_t type metadata accessor for SearchFeedbackConnection(uint64_t a1)
{
  return sub_100018ABC(a1, qword_1001DCAE8, (uint64_t)&nominal type descriptor for SearchFeedbackConnection);
}

uint64_t type metadata accessor for SearchFeedbackCursor(uint64_t a1)
{
  return sub_100018ABC(a1, qword_1001DCC40, (uint64_t)&nominal type descriptor for SearchFeedbackCursor);
}

uint64_t sub_10014D800(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = &unk_100169768;
  return swift_initClassMetadata2(a1, 256LL, 2LL, v2, a1 + 312);
}

uint64_t sub_10014D84C()
{
  return 0x6B63616264656566LL;
}

uint64_t sub_10014D864( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100019B20(v9 + 40 * v10 + 32, (uint64_t)&a9);
}

uint64_t sub_10014D878(uint64_t a1, uint64_t *a2)
{
  return sub_10000941C(a2);
}

uint64_t sub_10014D88C()
{
  return sub_10014C2B4(v0);
}

uint64_t sub_10014D8A0()
{
  return sub_10014C2B4(v0);
}

uint64_t sub_10014D8B0(uint64_t a1, ...)
{
  return sub_100142F88(va, v2, v1);
}

uint64_t sub_10014D8C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  return sub_1000108B8((uint64_t *)va);
}

void sub_10014D8C8()
{
}

void sub_10014D8D4(uint64_t a1, uint64_t *a2)
{
}

__int128 *BiomeStoreEnumerator.Constants.defaultTimeRange.unsafeMutableAddressor()
{
  if (qword_1001DB8F8 != -1) {
    swift_once(&qword_1001DB8F8, sub_10014DCC4);
  }
  return &static BiomeStoreEnumerator.Constants.defaultTimeRange;
}

void *BiomeStoreEnumerator.getNextEvent()()
{
  uint64_t v1 = *(void **)(v0 + 40);
  if (!v1) {
    return 0LL;
  }
  id v2 = [v1 nextEvent];
  int v3 = v2;
  if (v2)
  {
    id v4 = [v2 timestamp];
    double v6 = v5;
    sub_10014DF34((uint64_t)v4);
    if (v6 > *(double *)(v0 + 32))
    {

      return 0LL;
    }
  }

  return v3;
}

double BiomeStoreEnumerator.enumerationRange.getter(uint64_t a1)
{
  return *(double *)(v1 + 24);
}

uint64_t BiomeStoreEnumerator.enumerationRange.setter(double a1, double a2)
{
  uint64_t result = swift_beginAccess(v2 + 24, v6, 1LL, 0LL);
  *(double *)(v2 + swift_weakDestroy(v0 + 24) = a1;
  *(double *)(v2 + 3sub_1000108B8(v0 + 2) = a2;
  return result;
}

void BiomeStoreEnumerator.enumerationRange.modify(uint64_t a1)
{
}

void BiomeStoreEnumerator.currentEvent.setter(void *a1)
{
  uint64_t v2 = (void *)v1[6];
  v1[6] = a1;
  id v3 = a1;

  (*(void (**)(void))(*v1 + 272LL))();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BiomeStoreEnumerator.startEnumeration()()
{
  uint64_t v1 = *(void **)(v0 + 16);
  swift_beginAccess(v0 + 24, v4, 0LL, 0LL);
  id v2 = [v1 newEnumeratorFromStartTime:*(double *)(v0 + 24)];
  id v3 = *(void **)(v0 + 40);
  *(void *)(v0 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = v2;

  (*(void (**)(void))(*(void *)v0 + 224LL))();
}

Swift::Void __swiftcall BiomeStoreEnumerator.next()()
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 216LL))();
  BiomeStoreEnumerator.currentEvent.setter(v1);
}

Swift::Bool __swiftcall BiomeStoreEnumerator.hasEvent()()
{
  return *(void *)(v0 + 48) != 0LL;
}

Swift::Void __swiftcall BiomeStoreEnumerator.setPayload(on:)(SQLiter::SQLiteContext on)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*v1 + 248LL))();
  if (v4 >> 60 == 15)
  {
    SQLiteContext.setNull()();
  }

  else
  {
    uint64_t v5 = v3;
    unint64_t v6 = v4;
    uint64_t v7 = v1[8];
    uint64_t ObjectType = swift_getObjectType(v1[7]);
    (*(void (**)(uint64_t, unint64_t, void, void, void *, uint64_t, uint64_t))(v7 + 32))( v5,  v6,  v1[9],  v1[10],  on.context._rawValue,  ObjectType,  v7);
    sub_100010A1C(v5, v6);
  }

uint64_t BiomeStoreEnumerator.init(reader:sqliteBridge:enumerationRange:messageName:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  *(void *)(v7 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = 0LL;
  *(void *)(v7 + sub_100019B20(v3, v1 + 48) = 0LL;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = a1;
  *(double *)(v7 + swift_weakDestroy(v0 + 24) = a6;
  *(double *)(v7 + 3sub_1000108B8(v0 + 2) = a7;
  *(void *)(v7 + 5sub_10005B218(v0, v2, v1, 6) = a2;
  *(void *)(v7 + 64) = a3;
  *(void *)(v7 + 7sub_1000108B8(v0 + 2) = a4;
  *(void *)(v7 + 8sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = a5;
  return v7;
}

uint64_t BiomeStoreEnumerator.deinit()
{
  swift_unknownObjectRelease(*(void *)(v0 + 56));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  return v0;
}

uint64_t BiomeStoreEnumerator.timestamp.getter()
{
  if (!*(void *)(v0 + 48)) {
    return 0LL;
  }
  [*(id *)(v0 + 48) timestamp];
  return v1;
}

uint64_t BiomeStoreEnumerator.payload.getter()
{
  uint64_t v1 = *(void **)(v0 + 48);
  if (!v1) {
    return 0LL;
  }
  id v2 = (char *)[v1 eventBody];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)&v2[OBJC_IVAR___SRRawPayload_data];
  sub_100014244(v4, *(void *)&v2[OBJC_IVAR___SRRawPayload_data + 8]);

  return v4;
}

uint64_t sub_10014DCC4()
{
  uint64_t v0 = type metadata accessor for Date(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v15 - v6;
  uint64_t v8 = static Date.distantPast.getter(v5);
  double v9 = Date.timeIntervalSince1970.getter(v8);
  uint64_t v10 = *(uint64_t (**)(char *, uint64_t))(v1 + 8);
  uint64_t v11 = v10(v7, v0);
  uint64_t v12 = static Date.distantFuture.getter(v11);
  double v13 = Date.timeIntervalSince1970.getter(v12);
  uint64_t result = v10(v4, v0);
  if (v9 > v13)
  {
    __break(1u);
  }

  else
  {
    *(double *)&static BiomeStoreEnumerator.Constants.defaultTimeRange = v9;
    *((double *)&static BiomeStoreEnumerator.Constants.defaultTimeRange + Hasher._combine(_:)(v0 & 1) = v13;
  }

  return result;
}

double static BiomeStoreEnumerator.Constants.defaultTimeRange.getter()
{
  if (qword_1001DB8F8 != -1) {
    swift_once(&qword_1001DB8F8, sub_10014DCC4);
  }
  return *(double *)&static BiomeStoreEnumerator.Constants.defaultTimeRange;
}

void BiomeStoreEnumerator.sqliteBridge.getter()
{
}

void BiomeStoreEnumerator.messageName.getter()
{
}

uint64_t BiomeStoreEnumerator.__allocating_init(reader:sqliteBridge:enumerationRange:messageName:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  uint64_t result = swift_allocObject(v7, 88LL, 7LL);
  *(void *)(result + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = 0LL;
  *(void *)(result + sub_100019B20(v3, v1 + 48) = 0LL;
  *(void *)(result + swift_weakDestroy(v0 + 16) = a1;
  *(double *)(result + swift_weakDestroy(v0 + 24) = a6;
  *(double *)(result + 3sub_1000108B8(v0 + 2) = a7;
  *(void *)(result + 5sub_10005B218(v0, v2, v1, 6) = a2;
  *(void *)(result + 64) = a3;
  *(void *)(result + 7sub_1000108B8(v0 + 2) = a4;
  *(void *)(result + 8sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = a5;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BiomeStoreEnumerator.setTimestamp(on:)( SQLiter::SQLiteContext on)
{
  Swift::Double v2 = COERCE_DOUBLE((*(uint64_t (**)(void))(*(void *)v1 + 240LL))());
  if ((v3 & 1) != 0) {
    SQLiteContext.setNull()();
  }
  else {
    SQLiteContext.setDouble(_:)(v2);
  }
}

uint64_t BiomeStoreEnumerator.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t type metadata accessor for BiomeStoreEnumerator()
{
  return objc_opt_self(&OBJC_CLASS____TtC14SearchFeedback20BiomeStoreEnumerator);
}

ValueMetadata *type metadata accessor for BiomeStoreEnumerator.Constants()
{
  return &type metadata for BiomeStoreEnumerator.Constants;
}

uint64_t sub_10014DF34(uint64_t a1, ...)
{
  return swift_beginAccess(v1 + 24, va, 0LL, 0LL);
}

Swift::Void __swiftcall BiomeTablesProvider.teardown()()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 5sub_10005B218(v0, v2, v1, 6) = 0LL;
  swift_release(v1);
}

uint64_t BiomeTablesProvider.getTableFunction()()
{
  if (v0[7])
  {
    uint64_t v1 = v0[7];
  }

  else
  {
    Swift::Double v2 = v0;
    uint64_t v3 = *(void *)(*v0 + 88LL);
    sub_100019B20((uint64_t)(v2 + 2), (uint64_t)v8);
    uint64_t v4 = v2[9];
    uint64_t v5 = v2[10];
    uint64_t v6 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v3 + 408);
    swift_unknownObjectRetain();
    uint64_t v1 = v6(v8, v4, v5);
    v2[7] = v1;
    swift_retain();
    swift_release();
  }

  swift_retain();
  return v1;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BiomeTablesProvider.configure(databaseConnection:)( Swift::OpaquePointer databaseConnection)
{
  uint64_t v3 = type metadata accessor for SQLiteDatabase();
  swift_allocObject(v3, 24LL, 7LL);
  uint64_t v4 = SQLiteDatabase.init(connection:)((uint64_t)databaseConnection._rawValue);
  if (!v1)
  {
    uint64_t v5 = v4;
    BiomeTablesProvider.getTableFunction()();
    BaseBiomeTable.register(with:)(v5);
    uint64_t v6 = swift_release();
    (*(void (**)(uint64_t))(*(void *)v5 + 144LL))(v6);
    swift_release();
  }

uint64_t BiomeTablesProvider.config.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100019B20(v1 + 16, a1);
}

uint64_t BiomeTablesProvider.__allocating_init(config:environment:)(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = swift_allocObject(v3, 88LL, 7LL);
  BiomeTablesProvider.init(config:environment:)(a1, a2, a3);
  return v7;
}

uint64_t BiomeTablesProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t sub_10014E134()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224LL))();
}

uint64_t sub_10014E150(uint64_t a1)
{
  v2[0] = "(";
  v2[1] = &unk_1001698B0;
  void v2[2] = &unk_1001698C8;
  v2[3] = &unk_1001698E0;
  return swift_initClassMetadata2(a1, 0LL, 4LL, v2, a1 + 104);
}

uint64_t type metadata accessor for BiomeTablesProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BiomeTablesProvider);
}

void sub_10014E1B8(uint64_t a1)
{
  uint64_t v2 = sub_10000941C(&qword_1001DD100);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v20[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000D1AF0(a1, v20);
  uint64_t v5 = v20[0];
  uint64_t v6 = v20[1];
  int64_t v7 = v20[3];
  unint64_t v8 = v20[4];
  int64_t v9 = (unint64_t)(v20[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a1);
  if (!v8) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v11 = v10 | (v7 << 6);
  while (1)
  {
    uint64_t v16 = *(void *)(v5 + 48);
    uint64_t v17 = type metadata accessor for SessionType(0LL);
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v17 - 8) + 16LL))( v4,  v16 + *(void *)(*(void *)(v17 - 8) + 72LL) * v11,  v17);
    double v18 = *(void **)(*(void *)(v5 + 56) + 8 * v11);
    *(void *)&v4[*(int *)(v2 + 48)] = v18;
    [v18 syncMappedFiles];
    sub_100014358((uint64_t)v4, &qword_1001DD100);
    if (v8) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v12 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_21;
    }
    unint64_t v13 = *(void *)(v6 + 8 * v12);
    int64_t v14 = v7 + 1;
    if (!v13)
    {
      int64_t v14 = v7 + 2;
      if (v7 + 2 >= v9) {
        goto LABEL_21;
      }
      unint64_t v13 = *(void *)(v6 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v7 + 3;
        if (v7 + 3 >= v9) {
          goto LABEL_21;
        }
        unint64_t v13 = *(void *)(v6 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v7 + 4;
          if (v7 + 4 >= v9) {
            goto LABEL_21;
          }
          unint64_t v13 = *(void *)(v6 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v7 + 5;
            if (v7 + 5 >= v9) {
              goto LABEL_21;
            }
            unint64_t v13 = *(void *)(v6 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v7 + 6;
              while (v15 < v9)
              {
                unint64_t v13 = *(void *)(v6 + 8 * v15++);
                if (v13)
                {
                  int64_t v14 = v15 - 1;
                  goto LABEL_18;
                }
              }

uint64_t sub_10014E390(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a1;
  uint64_t v5 = type metadata accessor for FeedbackStreamDescriptor(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  int64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v23 - v10;
  uint64_t v12 = *(void *)(a3 + 56);
  uint64_t v23 = a3 + 56;
  uint64_t v13 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v24 = (unint64_t)(v13 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a3);
  int64_t v17 = 0LL;
  if (!v15) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))( v11,  *(void *)(a3 + 48) + *(void *)(v6 + 72) * i,  v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v11, v5);
    v25(v9);
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      return swift_release(a3);
    }

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v17++, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v17 >= v24) {
      return swift_release(a3);
    }
    unint64_t v21 = *(void *)(v23 + 8 * v17);
    if (!v21) {
      break;
    }
LABEL_17:
    unint64_t v15 = (v21 - 1) & v21;
  }

  int64_t v22 = v17 + 1;
  if (v17 + 1 >= v24) {
    return swift_release(a3);
  }
  unint64_t v21 = *(void *)(v23 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v17 + 2;
  if (v17 + 2 >= v24) {
    return swift_release(a3);
  }
  unint64_t v21 = *(void *)(v23 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v17 + 3;
  if (v17 + 3 >= v24) {
    return swift_release(a3);
  }
  unint64_t v21 = *(void *)(v23 + 8 * v22);
  if (v21) {
    goto LABEL_16;
  }
  int64_t v22 = v17 + 4;
  if (v17 + 4 >= v24) {
    return swift_release(a3);
  }
  unint64_t v21 = *(void *)(v23 + 8 * v22);
  if (v21)
  {
LABEL_16:
    int64_t v17 = v22;
    goto LABEL_17;
  }

  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v17 >= v24) {
      return swift_release(a3);
    }
    unint64_t v21 = *(void *)(v23 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_17;
    }
  }

uint64_t sub_10014E5E8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_10000EDAC(), (v5 & 1) != 0))
  {
    unint64_t v6 = v4;
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = sub_10015086C();
    sub_10014B420(v7 + *(void *)(*(void *)(v8 - 8) + 72LL) * v6, a2);
    uint64_t v9 = a2;
    uint64_t v10 = 0LL;
    uint64_t v11 = v8;
  }

  else
  {
    uint64_t v11 = sub_10015086C();
    uint64_t v9 = a2;
    uint64_t v10 = 1LL;
  }

  return sub_100009654(v9, v10, 1LL, v11);
}

void *sub_10014E66C(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0LL;
  }
  unint64_t v3 = sub_10000EDAC();
  if ((v4 & 1) == 0) {
    return 0LL;
  }
  char v5 = *(void **)(*(void *)(a2 + 56) + 8 * v3);
  id v6 = v5;
  return v5;
}

void *sub_10014E6B0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for SessionType(0LL);
  uint64_t v6 = sub_10000941C(&qword_1001DB918);
  unint64_t v7 = sub_1001421C8();
  void v2[2] = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, v5, v6, v7);
  v2[3] = 0LL;
  void v2[4] = a1;
  sub_100150780(a2, (uint64_t)&v9);
  if (v10)
  {
    sub_100014358(a2, &qword_1001DD0F8);
    sub_100019BC4(&v9, (uint64_t)&v11);
  }

  else
  {
    uint64_t v12 = &type metadata for BiomeStreamsTelemetryReporter;
    uint64_t v13 = &off_1001BFB10;
    sub_100014358(a2, &qword_1001DD0F8);
    sub_100014358((uint64_t)&v9, &qword_1001DD0F8);
  }

  sub_100019BC4(&v11, (uint64_t)(v2 + 5));
  return v2;
}

void sub_10014E7A0()
{
  uint64_t v3 = sub_100150874();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = sub_1001507C8();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10005F878();
  uint64_t v9 = v7 - v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v35 - v11;
  uint64_t v13 = sub_10015087C();
  __chkstk_darwin(v13);
  sub_100027240();
  uint64_t v16 = *(void **)(v0 + 24);
  if (!v16)
  {
    uint64_t v38 = v3;
    uint64_t v39 = v2;
    uint64_t v37 = v4;
    uint64_t v40 = v15;
    uint64_t v41 = v14;
    id v42 = *(id *)(v0 + 32);
    uint64_t v18 = sub_10000941C(&qword_1001DC790);
    uint64_t v19 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v20 = (v19 + 32) & ~v19;
    uint64_t v21 = swift_allocObject(v18, v20 + *(void *)(v6 + 72), v19 | 7);
    *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
    sub_100150804(v21 + v20);
    FeedbackStoreConfig.init(fileManager:streams:)(v42, v21);
    if (v1) {
      goto LABEL_5;
    }
    uint64_t v35 = v0;
    uint64_t v22 = sub_100150804((uint64_t)v12);
    uint64_t v36 = FeedbackStreamDescriptor.rawValue.getter(v22);
    id v42 = v23;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    sub_100150804(v9);
    uint64_t v24 = v39;
    FeedbackStoreConfig.getConfig(forStream:)(v9);
    uint64_t v25 = sub_10015084C();
    uint64_t v26 = (void *)BiomeStreamConfig.storeConfig.getter(v25);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v24, v38);
    uint64_t v27 = sub_10014BBF8();
    id v28 = objc_allocWithZone(&OBJC_CLASS___BMStreamDatastoreWriter);
    id v29 = sub_10014FEF0(v36, (uint64_t)v42, v26, v27);
    if (!v29)
    {
      unint64_t v32 = sub_10014A16C();
      uint64_t v33 = sub_100010EA0((uint64_t)&type metadata for SessionDatabaseError, v32);
      *double v34 = xmmword_10015F770;
      swift_willThrow(v33);
      sub_100150810();
      goto LABEL_5;
    }

    uint64_t v30 = v29;
    sub_100150810();
    uint64_t v31 = *(void **)(v35 + 24);
    *(void *)(v35 + swift_weakDestroy(v0 + 24) = v30;
    v30;

    uint64_t v16 = 0LL;
  }

  id v17 = v16;
LABEL_5:
  sub_10002716C();
}

void sub_10014EA04()
{
  uint64_t v4 = sub_100150874();
  uint64_t v41 = *(void *)(v4 - 8);
  uint64_t v42 = v4;
  sub_100027160();
  __chkstk_darwin(v5);
  sub_100009AEC();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = sub_10015087C();
  uint64_t v43 = *(void *)(v9 - 8);
  uint64_t v44 = v9;
  sub_100027160();
  __chkstk_darwin(v10);
  sub_100014428();
  uint64_t v46 = v11;
  sub_10000941C(&qword_1001DBAF0);
  sub_100027160();
  __chkstk_darwin(v12);
  uint64_t v13 = sub_1001507C8();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v40 = sub_1001507E4();
  uint64_t v16 = sub_100010BE4(v40, v15, 0LL);
  if (*(void *)(*(void *)(v0 + 16) + 16LL))
  {
    sub_100047294();
    unint64_t v17 = sub_10000EDAC();
    if ((v18 & 1) != 0)
    {
      sub_100150840(v17);
      sub_100009B3C();
      goto LABEL_10;
    }

    uint64_t v16 = sub_100009B3C();
  }

  SessionType.biomeStreamDescriptor.getter(v16);
  if (sub_100010708(v2, 1LL, v13) == 1)
  {
    sub_100014358(v2, &qword_1001DBAF0);
    unint64_t v19 = sub_10014A16C();
    uint64_t v20 = sub_100010EA0((uint64_t)&type metadata for SessionDatabaseError, v19);
    sub_10014BB2C((__n128)xmmword_100163360, v20, v21);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v3, v2, v13);
    uint64_t v22 = *(void **)(v0 + 32);
    uint64_t v23 = sub_10000941C(&qword_1001DC790);
    uint64_t v24 = *(unsigned __int8 *)(v14 + 80);
    uint64_t v25 = (v24 + 32) & ~v24;
    uint64_t v26 = swift_allocObject(v23, v25 + *(void *)(v14 + 72), v24 | 7);
    *(_OWORD *)(v26 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v26 + v25, v3, v13);
    uint64_t v27 = FeedbackStoreConfig.init(fileManager:streams:)(v22, v26);
    if (!v1)
    {
      uint64_t v28 = FeedbackStreamDescriptor.rawValue.getter(v27);
      uint64_t v30 = v29;
      uint64_t v31 = FeedbackStoreConfig.getConfig(forStream:)(v3);
      unint64_t v32 = (void *)BiomeStreamConfig.storeConfig.getter(v31);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v8, v42);
      uint64_t v33 = sub_10014BBF8();
      id v34 = objc_allocWithZone(&OBJC_CLASS___BMStreamDatastoreWriter);
      id v35 = sub_10014FEF0(v28, v30, v32, v33);
      if (v35)
      {
        uint64_t v36 = v35;
        sub_100010BE4(v40, (uint64_t)v45, 33LL);
        v36;
        sub_100157AB4();
        swift_endAccess(v45);
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v46, v44);
        sub_100150830();
        goto LABEL_10;
      }

      unint64_t v37 = sub_10014A16C();
      uint64_t v38 = sub_100010EA0((uint64_t)&type metadata for SessionDatabaseError, v37);
      sub_10014BB2C((__n128)xmmword_10015F770, v38, v39);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v46, v44);
    }

    sub_100150830();
  }

void sub_10014ED0C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SessionType(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100009AEC();
  uint64_t v8 = v7 - v6;
  sub_100010BE4(v2 + 16, (uint64_t)v29, 0LL);
  uint64_t v9 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain(v9);
  uint64_t v10 = sub_10014E66C(a1, v9);
  swift_bridgeObjectRelease();

  if (v10)
  {
    sub_100010BE4(v2 + 16, (uint64_t)v28, 33LL);
    uint64_t v11 = (void *)sub_100157860();
    swift_endAccess(v28);

    if (!*(void *)(*(void *)(v2 + 16) + 16LL))
    {
      uint64_t v12 = *(void **)(v2 + 24);
      *(void *)(v2 + swift_weakDestroy(v0 + 24) = 0LL;
    }
  }

  else
  {
    if (qword_1001DB908 != -1) {
      swift_once(&qword_1001DB908, sub_100155A88);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_1000093D0(v13, (uint64_t)qword_1001EDFC0);
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v20 = static os_log_type_t.info.getter(v15, v16, v17, v18, v19);
    if (os_log_type_enabled(v15, v20))
    {
      uint64_t v21 = (uint8_t *)sub_100009B20(12LL);
      uint64_t v22 = sub_100009B20(32LL);
      v28[0] = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v23 = SessionType.description.getter(v22);
      uint64_t v25 = sub_1000307E0(v23, v24, v28);
      uint64_t v26 = sub_100150858(v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v26, v27, v21 + 4);
      swift_bridgeObjectRelease();
      sub_100150820();
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v20,  "Attempt to release un-acquired ftore writer for: %s",  v21,  0xCu);
      swift_arrayDestroy(v22, 1LL);
      sub_100010C34(v22);
      sub_100010C34((uint64_t)v21);
    }

    else
    {
      sub_100150820();
    }
  }

void sub_10014EF40( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  uint64_t v26 = type metadata accessor for SessionType(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v28 = sub_1001507E4();
  sub_100010BE4(v28, v29, 0LL);
  if (*(void *)(*(void *)(v20 + 16) + 16LL))
  {
    sub_100047294();
    unint64_t v30 = sub_10000EDAC();
    if ((v31 & 1) != 0)
    {
      sub_100150840(v30);
      sub_100009B3C();
      goto LABEL_11;
    }

    sub_100009B3C();
  }

  if (qword_1001DB908 != -1) {
    swift_once(&qword_1001DB908, sub_100155A88);
  }
  uint64_t v32 = type metadata accessor for Logger(0LL);
  sub_1000093D0(v32, (uint64_t)qword_1001EDFC0);
  uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v21, v25, v26);
  id v34 = (os_log_s *)Logger.logObject.getter(v33);
  os_log_type_t v35 = static os_log_type_t.fault.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)sub_100009B20(12LL);
    uint64_t v37 = sub_100009B20(32LL);
    a10 = v37;
    *(_DWORD *)uint64_t v36 = 136315138;
    uint64_t v38 = SessionType.description.getter(v37);
    uint64_t v40 = sub_1000307E0(v38, v39, &a10);
    uint64_t v41 = sub_100150858(v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v41, v42, v36 + 4);
    sub_100009B3C();
    sub_1000ABA4C(v21, *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
    _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "Feedback store writer is requested without filed session for: %s",  v36,  0xCu);
    swift_arrayDestroy(v37, 1LL);
    sub_100010C34(v37);
    sub_100010C34((uint64_t)v36);
  }

  else
  {
    sub_1000ABA4C(v21, *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
  }

  sub_10014EA04();
LABEL_11:
  sub_10002716C();
}

uint64_t BiomeDatabaseWriter.deinit()
{
  uint64_t v2 = v1;
  [v1 syncMappedFiles];

  sub_100010BE4(v0 + 16, (uint64_t)&v5, 0LL);
  swift_bridgeObjectRetain(*(void *)(v0 + 16));
  sub_10014E1B8(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_1000108B8((void *)(v0 + 40));
  return v0;
}

uint64_t BiomeDatabaseWriter.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 80LL, 7LL);
}

void BiomeDatabaseWriter.addSession(_:sessionId:type:)()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v52 = v6;
  uint64_t v8 = v7;
  sub_10000941C(&qword_1001D32B0);
  sub_100027160();
  __chkstk_darwin(v9);
  sub_100014428();
  uint64_t v51 = v10;
  uint64_t v11 = type metadata accessor for Date(0LL);
  sub_100027160();
  __chkstk_darwin(v12);
  sub_100014428();
  uint64_t v50 = v13;
  uint64_t v14 = type metadata accessor for SessionType(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_10005F878();
  uint64_t v18 = (uint64_t *)(v16 - v17);
  __chkstk_darwin(v19);
  uint64_t v21 = (uint64_t *)((char *)&v47 - v20);
  if ((sub_1000A47FC(*(void *)&v8[OBJC_IVAR___SRRawPayload_data], *(void *)&v8[OBJC_IVAR___SRRawPayload_data + 8]) & 1) != 0)
  {
    unint64_t v22 = sub_10014A16C();
    uint64_t v23 = sub_100010EA0((uint64_t)&type metadata for SessionDatabaseError, v22);
    *uint64_t v24 = xmmword_100169960;
LABEL_5:
    swift_willThrow(v23);
    goto LABEL_6;
  }

  uint64_t v48 = v5;
  uint64_t v49 = v0;
  uint64_t v25 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16);
  v25(v21, v3, v14);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v15 + 88))(v21, v14) == enum case for SessionType.unknown(_:))
  {
    sub_1000ABA4C((uint64_t)v21, *(uint64_t (**)(uint64_t, uint64_t))(v15 + 96));
    uint64_t v26 = *v21;
    uint64_t v27 = v21[1];
    unint64_t v28 = sub_10014A16C();
    uint64_t v23 = sub_100010EA0((uint64_t)&type metadata for SessionDatabaseError, v28);
    *uint64_t v29 = v26;
    v29[1] = v27;
    goto LABEL_5;
  }

  sub_1000ABA4C((uint64_t)v21, *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
  sub_10014EA04();
  if (!v1)
  {

    v25(v18, v3, v14);
    char v31 = v8;
    swift_bridgeObjectRetain(v48);
    Date.init()(v32);
    sub_100009654(v51, 1LL, 1LL, v11);
    uint64_t v33 = type metadata accessor for SessionFeedback(0LL);
    swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
    SessionFeedback.init(session:sessionId:type:creationDate:closingDate:)();
    uint64_t v34 = v49;
    sub_10014E7A0();
    uint64_t v36 = v35;
    SessionFeedback.getWrappedPayload()();
    uint64_t v38 = v37;
    unsigned int v39 = [v36 writeEventWithEventBody:v37];

    if (v39)
    {
      uint64_t v40 = sub_100019AFC((void *)(v34 + 40), *(void *)(v34 + 64));
      uint64_t v41 = SessionType.clientType.getter(v40);
      sub_100147298(v41);
    }

    else
    {
      if (qword_1001DB908 != -1) {
        swift_once(&qword_1001DB908, sub_100155A88);
      }
      uint64_t v42 = type metadata accessor for Logger(0LL);
      uint64_t v43 = sub_1000093D0(v42, (uint64_t)qword_1001EDFC0);
      uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
      os_log_type_t v45 = static os_log_type_t.fault.getter(v44);
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = (uint8_t *)sub_100009B20(2LL);
        *(_WORD *)uint64_t v46 = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Failed to create new biome session", v46, 2u);
        sub_100010C34((uint64_t)v46);
      }
    }

    sub_10014F680();
  }

#error "10014F614: call analysis failed (funcsize=40)"
void BiomeDatabaseWriter.close(session:)(uint64_t a1)
{
  sub_10014ED0C(a1 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_type);
}

uint64_t sub_10014F680()
{
  return sub_10014F838();
}

uint64_t sub_10014F838()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_10015087C();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100009AEC();
  uint64_t v7 = v6 - v5;
  v16[1] = static SessionType.allKnownCases.getter();
  uint64_t v8 = sub_10000941C(&qword_1001DD0E8);
  unint64_t v9 = sub_10014FFAC();
  uint64_t v10 = Collection<>.biomeStreamDescriptors.getter(v8, v9);
  swift_bridgeObjectRelease();
  id v11 = *(id *)(v2 + 32);
  uint64_t v12 = sub_100047294();
  uint64_t v13 = sub_100150100(v12);
  sub_100009B3C();
  uint64_t v14 = FeedbackStoreConfig.init(fileManager:streams:)(v11, v13);
  if (!v1)
  {
    __chkstk_darwin(v14);
    v16[-2] = v2;
    v16[-1] = v7;
    sub_10014E390((void (*)(char *))sub_100150218, (uint64_t)&v16[-4], v10);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  }

  return sub_100009B3C();
}

void sub_10014F970(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for FeedbackStreamDescriptor(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10014FC24(a1);
  if (v1)
  {
    if (qword_1001DB908 != -1) {
      swift_once(&qword_1001DB908, sub_100155A88);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    sub_1000093D0(v7, (uint64_t)qword_1001EDFC0);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
    swift_errorRetain(v1);
    uint64_t v8 = swift_errorRetain(v1);
    unint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v11 = static os_log_type_t.error.getter(v9, v10);
    if (os_log_type_enabled(v9, v11))
    {
      uint64_t v12 = swift_slowAlloc(22LL, -1LL);
      uint64_t v13 = swift_slowAlloc(64LL, -1LL);
      uint64_t v19 = v13;
      uint64_t v22 = v13;
      *(_DWORD *)uint64_t v12 = 136315394;
      uint64_t v14 = FeedbackStreamDescriptor.rawValue.getter(v13);
      uint64_t v20 = sub_1000307E0(v14, v15, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v12 + 4);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      *(_WORD *)(v12 + 1sub_1000108B8(v0 + 2) = 2080;
      uint64_t v20 = v1;
      swift_errorRetain(v1);
      sub_10000941C(&qword_1001D2B70);
      uint64_t v16 = String.init<A>(describing:)(&v20);
      uint64_t v20 = sub_1000307E0(v16, v17, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v12 + 14);
      swift_bridgeObjectRelease();
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v9, v11, "Failed prune stream %s, error: %s", (uint8_t *)v12, 0x16u);
      uint64_t v18 = v19;
      swift_arrayDestroy(v19, 2LL);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);

      swift_errorRelease(v1);
    }

    else
    {
      swift_errorRelease(v1);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }
  }

uint64_t sub_10014FC24(uint64_t a1)
{
  uint64_t v35 = type metadata accessor for Date(0LL);
  uint64_t v32 = *(void *)(v35 - 8);
  sub_100027160();
  __chkstk_darwin(v4);
  sub_10005F878();
  uint64_t v33 = (char *)(v5 - v6);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v30 - v8;
  uint64_t v10 = sub_100150874();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100027240();
  uint64_t v31 = FeedbackStreamDescriptor.rawValue.getter(v12);
  uint64_t v14 = v13;
  uint64_t v15 = FeedbackStoreConfig.getConfig(forStream:)(a1);
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  unint64_t v17 = (void *)BiomeStreamConfig.storeConfig.getter(v15);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v1, v10);
  uint64_t v18 = sub_10014BBF8();
  id v19 = objc_allocWithZone(&OBJC_CLASS___BMStreamDatastorePruner);
  id v20 = sub_10014FEF0(v31, v14, v17, v18);
  uint64_t v21 = static Date.distantPast.getter(v20);
  double v22 = Date.timeIntervalSinceReferenceDate.getter(v21);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t))(v32 + 8);
  uint64_t v24 = v35;
  uint64_t v25 = v23(v9, v35);
  uint64_t v26 = v33;
  uint64_t v27 = FeedbackStreamDescriptor.streamTTLDate.getter(v25);
  double v28 = Date.timeIntervalSinceReferenceDate.getter(v27);
  v23(v26, v24);
  aBlock[4] = SchemaMismatchError.init(expected:actual:);
  aBlock[5] = 0LL;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10014FE6C;
  aBlock[3] = &unk_1001BFF90;
  uint64_t v29 = _Block_copy(aBlock);
  swift_release();
  [v20 removeEventsFrom:1 to:v29 reason:v22 usingBlock:v28];

  _Block_release(v29);
  uint64_t result = swift_isEscapingClosureAtFileLocation(0LL, "", 119LL, 202LL, 11LL, 1LL);
  if ((result & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10014FE6C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2);
}

void sub_10014FE90()
{
}

uint64_t sub_10014FEB0()
{
  return BiomeDatabaseWriter.addFeedback(_:to:)();
}

void sub_10014FED0(uint64_t a1)
{
}

id sub_10014FEF0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a4) {
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(a4);
  }
  else {
    uint64_t ObjCClassFromMetadata = 0LL;
  }
  id v10 = [v4 initWithStream:v8 config:a3 eventDataClass:ObjCClassFromMetadata];

  return v10;
}

uint64_t type metadata accessor for BiomeDatabaseWriter()
{
  return objc_opt_self(&OBJC_CLASS____TtC14SearchFeedback19BiomeDatabaseWriter);
}

uint64_t sub_10014FF94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_1000108B8(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10014FFA4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_10014FFAC()
{
  unint64_t result = qword_1001DD0F0;
  if (!qword_1001DD0F0)
  {
    uint64_t v1 = sub_1000094A0(&qword_1001DD0E8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001DD0F0);
  }

  return result;
}

void *sub_10014FFF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_10000941C(&qword_1001DC788);
  uint64_t v4 = *(void *)(sub_10015086C() - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 32) & ~v6;
  NSString v8 = (void *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  unint64_t result = (void *)j__malloc_size(v8);
  if (v5)
  {
    if ((void *)((char *)result - v7) != (void *)0x8000000000000000LL || v5 != -1)
    {
      void v8[2] = v1;
      _OWORD v8[3] = 2 * (((uint64_t)result - v7) / v5);
      uint64_t v11 = sub_100150230(&v13, (uint64_t)v8 + v7, v1, a1);
      uint64_t v12 = v13;
      sub_100047294();
      sub_10003D774(v12);
      if (v11 == v1) {
        return v8;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *sub_100150100(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_10000941C(&qword_1001DC790);
  uint64_t v4 = *(void *)(type metadata accessor for FeedbackStreamDescriptor(0LL) - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 32) & ~v6;
  NSString v8 = (void *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  unint64_t result = (void *)j__malloc_size(v8);
  if (v5)
  {
    if ((void *)((char *)result - v7) != (void *)0x8000000000000000LL || v5 != -1)
    {
      void v8[2] = v1;
      _OWORD v8[3] = 2 * (((uint64_t)result - v7) / v5);
      uint64_t v11 = sub_1001504B8(&v13, (uint64_t)v8 + v7, v1, a1);
      uint64_t v12 = v13;
      swift_bridgeObjectRetain(a1);
      sub_10003D774(v12);
      if (v11 == v1) {
        return v8;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void sub_100150218(uint64_t a1)
{
}

uint64_t sub_100150230(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v30 - v14;
  uint64_t v35 = a4;
  uint64_t v18 = *(void *)(a4 + 64);
  uint64_t v17 = a4 + 64;
  uint64_t v16 = v18;
  uint64_t v19 = -1LL << *(_BYTE *)(v17 - 32);
  if (-v19 < 64) {
    uint64_t v20 = ~(-1LL << -(char)v19);
  }
  else {
    uint64_t v20 = -1LL;
  }
  unint64_t v21 = v20 & v16;
  if (!a2)
  {
    int64_t v22 = 0LL;
    a3 = 0LL;
LABEL_38:
    *a1 = v35;
    a1[1] = v17;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }

  if (!a3)
  {
    int64_t v22 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v32 = -1LL << *(_BYTE *)(v17 - 32);
  uint64_t v33 = a1;
  int64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  int64_t v34 = (unint64_t)(63 - v19) >> 6;
  int64_t v31 = v34 - 1;
  if (!v21) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  unint64_t v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    uint64_t v29 = *(void *)(v9 + 72);
    sub_10014B420(*(void *)(v35 + 56) + v29 * v25, (uint64_t)v12);
    sub_10014B4A0((uint64_t)v12, (uint64_t)v15);
    uint64_t result = sub_10014B4A0((uint64_t)v15, a2);
    if (v23 == a3) {
      goto LABEL_37;
    }
    a2 += v29;
    if (v21) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v26 >= v34) {
      goto LABEL_32;
    }
    unint64_t v27 = *(void *)(v17 + 8 * v26);
    if (!v27) {
      break;
    }
LABEL_18:
    unint64_t v21 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v26 << 6);
    int64_t v22 = v26;
  }

  v22 += 2LL;
  if (v26 + 1 >= v34)
  {
    unint64_t v21 = 0LL;
    int64_t v22 = v26;
    goto LABEL_36;
  }

  unint64_t v27 = *(void *)(v17 + 8 * v22);
  if (v27) {
    goto LABEL_14;
  }
  int64_t v28 = v26 + 2;
  if (v26 + 2 >= v34) {
    goto LABEL_32;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v28);
  if (v27) {
    goto LABEL_17;
  }
  int64_t v22 = v26 + 3;
  if (v26 + 3 >= v34)
  {
    unint64_t v21 = 0LL;
    int64_t v22 = v26 + 2;
    goto LABEL_36;
  }

  unint64_t v27 = *(void *)(v17 + 8 * v22);
  if (v27)
  {
LABEL_14:
    int64_t v26 = v22;
    goto LABEL_18;
  }

  int64_t v28 = v26 + 4;
  if (v26 + 4 >= v34)
  {
LABEL_32:
    unint64_t v21 = 0LL;
LABEL_36:
    a3 = v23;
LABEL_37:
    uint64_t v19 = v32;
    a1 = v33;
    goto LABEL_38;
  }

  unint64_t v27 = *(void *)(v17 + 8 * v28);
  if (v27)
  {
LABEL_17:
    int64_t v26 = v28;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v26 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v26 >= v34)
    {
      unint64_t v21 = 0LL;
      int64_t v22 = v31;
      goto LABEL_36;
    }

    unint64_t v27 = *(void *)(v17 + 8 * v26);
    ++v28;
    if (v27) {
      goto LABEL_18;
    }
  }

uint64_t sub_1001504B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for FeedbackStreamDescriptor(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v32 - v14;
  uint64_t v39 = a4;
  uint64_t v18 = *(void *)(a4 + 56);
  uint64_t v17 = a4 + 56;
  uint64_t v16 = v18;
  uint64_t v37 = v17;
  uint64_t v19 = -1LL << *(_BYTE *)(v17 - 24);
  if (-v19 < 64) {
    uint64_t v20 = ~(-1LL << -(char)v19);
  }
  else {
    uint64_t v20 = -1LL;
  }
  unint64_t v21 = v20 & v16;
  if (!a2)
  {
    int64_t v22 = 0LL;
    a3 = 0LL;
LABEL_38:
    uint64_t v31 = v37;
    *a1 = v39;
    a1[1] = v31;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }

  if (!a3)
  {
    int64_t v22 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v34 = -1LL << *(_BYTE *)(v17 - 24);
  uint64_t v35 = a1;
  int64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  int64_t v36 = (unint64_t)(63 - v19) >> 6;
  int64_t v33 = v36 - 1;
  uint64_t v38 = a3;
  if (!v21) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  unint64_t v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    uint64_t v29 = *(void *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v12, *(void *)(v39 + 48) + v29 * v25, v8);
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v15, v12, v8);
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v15, v8);
    a3 = v38;
    if (v23 == v38) {
      goto LABEL_37;
    }
    a2 += v29;
    if (v21) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v26 >= v36) {
      goto LABEL_32;
    }
    unint64_t v27 = *(void *)(v37 + 8 * v26);
    if (!v27) {
      break;
    }
LABEL_18:
    unint64_t v21 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v26 << 6);
    int64_t v22 = v26;
  }

  v22 += 2LL;
  if (v26 + 1 >= v36)
  {
    unint64_t v21 = 0LL;
    int64_t v22 = v26;
    goto LABEL_36;
  }

  unint64_t v27 = *(void *)(v37 + 8 * v22);
  if (v27) {
    goto LABEL_14;
  }
  int64_t v28 = v26 + 2;
  if (v26 + 2 >= v36) {
    goto LABEL_32;
  }
  unint64_t v27 = *(void *)(v37 + 8 * v28);
  if (v27) {
    goto LABEL_17;
  }
  int64_t v22 = v26 + 3;
  if (v26 + 3 >= v36)
  {
    unint64_t v21 = 0LL;
    int64_t v22 = v26 + 2;
    goto LABEL_36;
  }

  unint64_t v27 = *(void *)(v37 + 8 * v22);
  if (v27)
  {
LABEL_14:
    int64_t v26 = v22;
    goto LABEL_18;
  }

  int64_t v28 = v26 + 4;
  if (v26 + 4 >= v36)
  {
LABEL_32:
    unint64_t v21 = 0LL;
LABEL_36:
    a3 = v23;
LABEL_37:
    uint64_t v19 = v34;
    a1 = v35;
    goto LABEL_38;
  }

  unint64_t v27 = *(void *)(v37 + 8 * v28);
  if (v27)
  {
LABEL_17:
    int64_t v26 = v28;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v26 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v26 >= v36)
    {
      unint64_t v21 = 0LL;
      int64_t v22 = v33;
      goto LABEL_36;
    }

    unint64_t v27 = *(void *)(v37 + 8 * v26);
    ++v28;
    if (v27) {
      goto LABEL_18;
    }
  }

uint64_t sub_100150780(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001DD0F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001507C8()
{
  return type metadata accessor for FeedbackStreamDescriptor(0LL);
}

uint64_t sub_1001507E4()
{
  return v0 + 16;
}

uint64_t sub_100150804(uint64_t a1)
{
  return v1(a1, v2, v3);
}

uint64_t sub_100150810()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 104) + 8LL))(v0, *(void *)(v1 - 96));
}

uint64_t sub_100150820()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100150830()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

id sub_100150840(uint64_t a1)
{
  return *(id *)(*(void *)(v1 + 56) + 8 * a1);
}

uint64_t sub_10015084C()
{
  return v0(v2, v1);
}

uint64_t sub_100150858(uint64_t a1)
{
  *(void *)(v1 - 11sub_1000108B8(v0 + 2) = a1;
  return v1 - 112;
}

uint64_t sub_10015086C()
{
  return type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL);
}

uint64_t sub_100150874()
{
  return type metadata accessor for BiomeStreamConfig(0LL);
}

uint64_t sub_10015087C()
{
  return type metadata accessor for FeedbackStoreConfig(0LL);
}

uint64_t sub_100150884(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (a1) {
    return v1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10015089C(char a1)
{
  return a1 & 1;
}

void sub_1001508A4()
{
}

void sub_1001508AC(uint64_t a1)
{
}

uint64_t sub_1001508B4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100150884(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001508DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10015089C(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_100150904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100151E3C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100150960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100151E3C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001509AC(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6B72616D6B6F6F62LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6B72616D6B6F6F62LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6574617473LL && a2 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease(0xE500000000000000LL);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6574617473LL, 0xE500000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_100150A90(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x6574617473LL;
  }
  else {
    return 0x6B72616D6B6F6F62LL;
  }
}

uint64_t sub_100150AC4()
{
  return sub_100150A90(*v0);
}

uint64_t sub_100150ACC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001509AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100150AF0(uint64_t a1)
{
  unint64_t v2 = sub_100151AE8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100150B18(uint64_t a1)
{
  unint64_t v2 = sub_100151AE8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100150B40(void *a1, uint64_t a2, char a3)
{
  uint64_t v7 = sub_10000941C(&qword_1001DD238);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100009AEC();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100019AFC(a1, v12);
  unint64_t v14 = sub_100151AE8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for UploadStateFileStore.UploadState.CodingKeys,  &type metadata for UploadStateFileStore.UploadState.CodingKeys,  v14,  v12,  v13);
  uint64_t v19 = a2;
  char v18 = 0;
  type metadata accessor for SessionBookmark();
  sub_100151B60(&qword_1001DD240, (uint64_t)&protocol conformance descriptor for SessionBookmark);
  sub_100152118((uint64_t)&v19, (uint64_t)&v18, v7);
  if (!v3)
  {
    char v17 = a3 & 1;
    char v16 = 1;
    sub_100151B9C();
    sub_100152118((uint64_t)&v17, (uint64_t)&v16, v7);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_100150C8C(void *a1)
{
  uint64_t v3 = sub_10000941C(&qword_1001DD218);
  sub_10002FBE4();
  __chkstk_darwin(v4);
  uint64_t v5 = a1[3];
  sub_100019AFC(a1, v5);
  unint64_t v6 = sub_100151AE8();
  sub_10015210C( (uint64_t)&type metadata for UploadStateFileStore.UploadState.CodingKeys,  (uint64_t)&type metadata for UploadStateFileStore.UploadState.CodingKeys,  v6);
  if (v1)
  {
    sub_1000E3700();
  }

  else
  {
    uint64_t v7 = type metadata accessor for SessionBookmark();
    char v11 = 0;
    sub_100151B60(&qword_1001DD228, (uint64_t)&protocol conformance descriptor for SessionBookmark);
    sub_100152100(v7, (uint64_t)&v11, v3, v7);
    uint64_t v5 = v12;
    char v10 = 1;
    unint64_t v9 = sub_100151B24();
    swift_retain();
    sub_100152100((uint64_t)&unk_1001C0208, (uint64_t)&v10, v3, (uint64_t)&unk_1001C0208);
    sub_100107BF8();
    if (v9) {
      sub_10001106C();
    }
    sub_1000108B8(a1);
    sub_10001106C();
  }

  return v5;
}

uint64_t sub_100150E08(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x736574617473LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736574617473LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

uint64_t sub_100150E84()
{
  return 0x736574617473LL;
}

uint64_t sub_100150E98(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001DD288);
  sub_10002FBE4();
  __chkstk_darwin(v5);
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100019AFC(a1, v6);
  unint64_t v8 = sub_100151E78();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for UploadStateFileStore.UploadStates.CodingKeys,  &type metadata for UploadStateFileStore.UploadStates.CodingKeys,  v8,  v6,  v7);
  uint64_t v11 = a2;
  sub_10000941C(&qword_1001DD298);
  sub_100151EF0(&qword_1001DD2A0, (void (*)(void))sub_100151EB4, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v11, v9, v4);
  return sub_100082B9C();
}

void *sub_100150FA0(void *a1)
{
  uint64_t v3 = sub_10000941C(&qword_1001DD2B0);
  sub_10002FBE4();
  __chkstk_darwin(v4);
  uint64_t v5 = sub_100019AFC(a1, a1[3]);
  unint64_t v6 = sub_100151E78();
  sub_10015210C( (uint64_t)&type metadata for UploadStateFileStore.UploadStates.CodingKeys,  (uint64_t)&type metadata for UploadStateFileStore.UploadStates.CodingKeys,  v6);
  if (v1)
  {
    sub_1000E3700();
  }

  else
  {
    uint64_t v7 = sub_10000941C(&qword_1001DD298);
    sub_100151EF0( &qword_1001DD2B8,  (void (*)(void))sub_100151F58,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v7, v8, v3, v7);
    sub_100082B9C();
    uint64_t v5 = v10;
    sub_1000E3700();
  }

  return v5;
}

uint64_t sub_1001510C0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100150C8C(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5 & 1;
  }

  return result;
}

uint64_t sub_1001510F0(void *a1)
{
  return sub_100150B40(a1, *(void *)v1, *(_BYTE *)(v1 + 8));
}

uint64_t sub_100151110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100150E08(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100151138(uint64_t a1)
{
  unint64_t v2 = sub_100151E78();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100151160(uint64_t a1)
{
  unint64_t v2 = sub_100151E78();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100151188@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100150FA0(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1001511B0(void *a1)
{
  return sub_100150E98(a1, *v1);
}

uint64_t UploadStateFileStore.isUploadEnabled.getter()
{
  return static SessionDBFeatureFlags.uploadFromFlag.getter() & 1;
}

uint64_t UploadStateFileStore.aggregatedToDate.getter()
{
  return sub_100151314();
}

void *UploadStateFileStore.uploadedBookmarks.getter()
{
  return UploadStateFileStore.uploadedAtBookmarks()();
}

void UploadStateFileStore.__allocating_init(fileManager:)(uint64_t a1)
{
}

uint64_t UploadStateFileStore.init(fileManager:)(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC14SearchFeedback20UploadStateFileStore_sessionUploadStateFileName);
  void *v3 = 0xD000000000000019LL;
  v3[1] = 0x8000000100173FB0LL;
  *(void *)(v1 + OBJC_IVAR____TtC14SearchFeedback20UploadStateFileStore_uploadStateCache) = 0LL;
  *(void *)(v1 + OBJC_IVAR____TtC14SearchFeedback20UploadStateFileStore_fileManager) = a1;
  return v1;
}

uint64_t sub_100151314()
{
  uint64_t v0 = type metadata accessor for Date(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_100009AEC();
  uint64_t v4 = v3 - v2;
  uint64_t v6 = static Date.now.getter(v5);
  double v7 = Date.timeIntervalSince1970.getter(v6);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v4, v0);
  if ((~*(void *)&v7 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (v7 <= -1.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (v7 >= 1.84467441e19)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v9 = (unint64_t)v7 / 0x15180;
  BOOL v10 = v9 >= 7;
  unint64_t v11 = v9 - 7;
  if (v10) {
    return Date.init(timeIntervalSince1970:)(result, (double)(86400 * v11));
  }
LABEL_10:
  __break(1u);
  return result;
}

void (*sub_1001513F8())(char *, uint64_t)
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000941C(&qword_1001D5ED0);
  __chkstk_darwin(v2);
  sub_100009AEC();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = type metadata accessor for URL(0LL);
  double v7 = *(void (**)(char *, uint64_t))(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  BOOL v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v35 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  char v16 = (char *)&v35 - v15;
  uint64_t v17 = *(void *)(v0 + OBJC_IVAR____TtC14SearchFeedback20UploadStateFileStore_uploadStateCache);
  if (v17)
  {
    double v7 = *(void (**)(char *, uint64_t))(v0
                                                + OBJC_IVAR____TtC14SearchFeedback20UploadStateFileStore_uploadStateCache);
  }

  else
  {
    uint64_t v38 = OBJC_IVAR____TtC14SearchFeedback20UploadStateFileStore_uploadStateCache;
    id v39 = *(id *)(v0 + OBJC_IVAR____TtC14SearchFeedback20UploadStateFileStore_fileManager);
    NSFileManager.parsecdAssetsDirectoryURL.getter(v14);
    if (sub_100010708(v5, 1LL, v6) == 1)
    {
      sub_100010AE8(v5);
      unint64_t v18 = sub_100151BD8();
      uint64_t v19 = swift_allocError(&type metadata for UploadStateStoreError, v18, 0LL, 0LL);
      *uint64_t v20 = 0;
      swift_willThrow(v19);
      return v7;
    }

    (*((void (**)(char *, uint64_t, uint64_t))v7 + 4))(v16, v5, v6);
    uint64_t v21 = *(void *)(v0 + OBJC_IVAR____TtC14SearchFeedback20UploadStateFileStore_sessionUploadStateFileName);
    uint64_t v36 = *(void *)(v0 + OBJC_IVAR____TtC14SearchFeedback20UploadStateFileStore_sessionUploadStateFileName + 8);
    uint64_t v37 = v21;
    uint64_t v22 = URL.appendingPathComponent(_:)(v21, v36);
    URL.path.getter(v22);
    uint64_t v23 = v13;
    unint64_t v24 = (void (*)(char *, uint64_t))*((void *)v7 + 1);
    v24(v23, v6);
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unsigned int v26 = [v39 fileExistsAtPath:v25];

    if (v26)
    {
      double v7 = v24;
      URL.appendingPathComponent(_:)(v37, v36);
      uint64_t v27 = v40;
      uint64_t v28 = Data.init(contentsOf:options:)(v10, 0LL);
      if (v27)
      {
        v24(v10, v6);
        v24(v16, v6);
        return v7;
      }

      uint64_t v30 = v28;
      uint64_t v31 = v29;
      v7(v10, v6);
      uint64_t v32 = type metadata accessor for JSONDecoder(0LL);
      swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
      JSONDecoder.init()();
      unint64_t v33 = sub_100151C14();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v41, &unk_1001C00E0, v30, v31, &unk_1001C00E0, v33);
      uint64_t v40 = 0LL;
      v7(v16, v6);
      sub_1001520F4();
      swift_release();
      double v7 = v41;
      *(void *)(v1 + v38) = v41;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRelease();
    }

    else
    {
      double v7 = (void (*)(char *, uint64_t))_swiftEmptyArrayStorage;
      *(void *)(v1 + v38) = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
      v24(v16, v6);
    }
  }

  swift_bridgeObjectRetain(v17);
  return v7;
}

void UploadStateFileStore.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SearchFeedback20UploadStateFileStore_logger;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100009A90();
}

uint64_t UploadStateFileStore.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

unint64_t sub_1001517D0()
{
  unint64_t result = qword_1001DD108;
  if (!qword_1001DD108)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for UploadStateStoreError,  &type metadata for UploadStateStoreError);
    atomic_store(result, (unint64_t *)&qword_1001DD108);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for UploadStateStoreError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = 1;
  }
  else {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100151858 + 4 * byte_100169975[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10015188C + 4 * byte_100169970[v4]))();
}

uint64_t sub_10015188C(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_100151894(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10015189CLL);
  }
  return result;
}

uint64_t sub_1001518A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001518B0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1001518B4(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1001518BC(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

void type metadata accessor for UploadStateStoreError()
{
}

uint64_t sub_1001518D4()
{
  return type metadata accessor for UploadStateFileStore(0LL);
}

uint64_t type metadata accessor for UploadStateFileStore(uint64_t a1)
{
  uint64_t result = qword_1001DD138;
  if (!qword_1001DD138) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UploadStateFileStore);
  }
  return result;
}

uint64_t sub_100151914(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v4[2] = &unk_100169A78;
    void v4[3] = &unk_100169A90;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1001519A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  swift_retain(v3);
  return a1;
}

uint64_t *sub_1001519D4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t *sub_100151A20(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t sub_100151A5C(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 9))
    {
      LODWORD(vsub_1000108B8(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(vsub_1000108B8(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100151A9C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for UploadStateFileStore.UploadState()
{
}

unint64_t sub_100151AE8()
{
  unint64_t result = qword_1001DD220;
  if (!qword_1001DD220)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169D1C, &type metadata for UploadStateFileStore.UploadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DD220);
  }

  return result;
}

unint64_t sub_100151B24()
{
  unint64_t result = qword_1001DD230;
  if (!qword_1001DD230)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169CF4, &unk_1001C0208);
    atomic_store(result, (unint64_t *)&qword_1001DD230);
  }

  return result;
}

void sub_100151B60(unint64_t *a1, uint64_t a2)
{
  if (!*a1)
  {
    uint64_t v4 = type metadata accessor for SessionBookmark();
    atomic_store(swift_getWitnessTable(a2, v4), a1);
  }

  sub_100009A90();
}

unint64_t sub_100151B9C()
{
  unint64_t result = qword_1001DD248;
  if (!qword_1001DD248)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169CCC, &unk_1001C0208);
    atomic_store(result, (unint64_t *)&qword_1001DD248);
  }

  return result;
}

unint64_t sub_100151BD8()
{
  unint64_t result = qword_1001DD250;
  if (!qword_1001DD250)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for UploadStateStoreError,  &type metadata for UploadStateStoreError);
    atomic_store(result, (unint64_t *)&qword_1001DD250);
  }

  return result;
}

unint64_t sub_100151C14()
{
  unint64_t result = qword_1001DD258;
  if (!qword_1001DD258)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169C7C, &unk_1001C00E0);
    atomic_store(result, (unint64_t *)&qword_1001DD258);
  }

  return result;
}

void type metadata accessor for UploadStateFileStore.UploadStates()
{
}

ValueMetadata *type metadata accessor for UploadStateFileStore.UploadState.CodingKeys()
{
  return &type metadata for UploadStateFileStore.UploadState.CodingKeys;
}

uint64_t _s14SearchFeedback20UploadStateFileStoreC11UploadStateV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = 1;
  }
  else {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100151CC0 + 4 * byte_10016997F[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100151CF4 + 4 * byte_10016997A[v4]))();
}

uint64_t sub_100151CF4(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_100151CFC(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x100151D04LL);
  }
  return result;
}

uint64_t sub_100151D10(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100151D18LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100151D1C(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_100151D24(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

void type metadata accessor for UploadStateFileStore.State()
{
}

unint64_t sub_100151D40()
{
  unint64_t result = qword_1001DD260;
  if (!qword_1001DD260)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169B9C, &unk_1001C0208);
    atomic_store(result, (unint64_t *)&qword_1001DD260);
  }

  return result;
}

unint64_t sub_100151D80()
{
  unint64_t result = qword_1001DD268;
  if (!qword_1001DD268)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169C54, &type metadata for UploadStateFileStore.UploadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DD268);
  }

  return result;
}

unint64_t sub_100151DC0()
{
  unint64_t result = qword_1001DD270;
  if (!qword_1001DD270)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169BC4, &type metadata for UploadStateFileStore.UploadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DD270);
  }

  return result;
}

unint64_t sub_100151E00()
{
  unint64_t result = qword_1001DD278;
  if (!qword_1001DD278)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169BEC, &type metadata for UploadStateFileStore.UploadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DD278);
  }

  return result;
}

unint64_t sub_100151E3C()
{
  unint64_t result = qword_1001DD280;
  if (!qword_1001DD280)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169B24, &unk_1001C0208);
    atomic_store(result, (unint64_t *)&qword_1001DD280);
  }

  return result;
}

unint64_t sub_100151E78()
{
  unint64_t result = qword_1001DD290;
  if (!qword_1001DD290)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169E24, &type metadata for UploadStateFileStore.UploadStates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DD290);
  }

  return result;
}

unint64_t sub_100151EB4()
{
  unint64_t result = qword_1001DD2A8;
  if (!qword_1001DD2A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169AB4, &unk_1001C00B8);
    atomic_store(result, (unint64_t *)&qword_1001DD2A8);
  }

  return result;
}

uint64_t sub_100151EF0(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_1000094A0(&qword_1001DD298);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100151F58()
{
  unint64_t result = qword_1001DD2C0;
  if (!qword_1001DD2C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169ADC, &unk_1001C00B8);
    atomic_store(result, (unint64_t *)&qword_1001DD2C0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for UploadStateFileStore.UploadStates.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100151FD4 + 4 * byte_100169984[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100151FF4 + 4 * byte_100169989[v4]))();
  }
}

_BYTE *sub_100151FD4(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100151FF4(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100151FFC(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100152004(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10015200C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100152014(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for UploadStateFileStore.UploadStates.CodingKeys()
{
  return &type metadata for UploadStateFileStore.UploadStates.CodingKeys;
}

unint64_t sub_100152034()
{
  unint64_t result = qword_1001DD2C8;
  if (!qword_1001DD2C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169DFC, &type metadata for UploadStateFileStore.UploadStates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DD2C8);
  }

  return result;
}

unint64_t sub_100152074()
{
  unint64_t result = qword_1001DD2D0;
  if (!qword_1001DD2D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169D6C, &type metadata for UploadStateFileStore.UploadStates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DD2D0);
  }

  return result;
}

unint64_t sub_1001520B4()
{
  unint64_t result = qword_1001DD2D8;
  if (!qword_1001DD2D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169D94, &type metadata for UploadStateFileStore.UploadStates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DD2D8);
  }

  return result;
}

uint64_t sub_1001520F4()
{
  return sub_100010A30(v1, v0);
}

uint64_t sub_100152100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_10015210C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a2, a3, v3, v4);
}

uint64_t sub_100152118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3);
}

void sub_100152124(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v8 = v7 - v6;
  uint64_t v9 = sub_1000A15C0();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100009AEC();
  uint64_t v37 = v12 - v11;
  if (qword_1001DD2F0)
  {
    uint64_t v31 = v10;
    uint64_t v32 = a2;
    uint64_t v33 = v9;
    uint64_t v13 = (_UNKNOWN **)off_1001DD2F8;
    uint64_t v14 = qword_1001DD2F0;
  }

  else
  {
    if (qword_1001DB900 != -1) {
      swift_once(&qword_1001DB900, sub_1001525EC);
    }
    uint64_t v19 = *(void *)algn_1001DD2E8;
    uint64_t v20 = sub_100153DA8();
    sub_100153D48(v20);
    sub_100153D3C();
    swift_bridgeObjectRetain(v19);
    uint64_t v21 = ProtoSchemaStore.init(withModel:)();
    if (v2) {
      goto LABEL_18;
    }
    uint64_t v14 = (uint64_t)v21;
    uint64_t v31 = v10;
    uint64_t v32 = a2;
    uint64_t v33 = v9;
    uint64_t v13 = &protocol witness table for ProtoSchemaStore;
    qword_1001DD2F0 = (uint64_t)v21;
    off_1001DD2F8 = &protocol witness table for ProtoSchemaStore;
    swift_retain();
    sub_1000471D0();
  }

  sub_100153DA0();
  uint64_t v15 = *(void *)&a1[OBJC_IVAR___SRRawPayload_data];
  unint64_t v16 = *(void *)&a1[OBJC_IVAR___SRRawPayload_data + 8];
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_100014244(v15, v16);
  uint64_t v17 = sub_100153D70();
  ProtobufPayload.__allocating_init(with:from:payload:)(v17, v18, v14, (uint64_t)v13, v15, v16);
  if (v2)
  {
    sub_10007725C();
LABEL_18:

    return;
  }

  sub_100153DB8();
  if (HIBYTE(v36) >= 0xFFu)
  {
    sub_1000C00CC((uint64_t)&v34, &qword_1001D8F00);
LABEL_16:
    unint64_t v25 = sub_100153BC0();
    sub_100010EA0((uint64_t)&type metadata for BiomeSessionError, v25);
    char v24 = 1;
    goto LABEL_17;
  }

  if ((v36 & 0xFF00) != 0x800)
  {
    sub_1000F4848((uint64_t)&v34);
    goto LABEL_16;
  }

  SessionType.init(withCanonicalIdentifier:)(v34, v35);
  if (sub_100010708(v8, 1LL, v33) == 1)
  {
    sub_1000C00CC(v8, &qword_1001D5288);
    unint64_t v22 = sub_100153BC0();
    sub_100010EA0((uint64_t)&type metadata for BiomeSessionError, v22);
    char v24 = 2;
LABEL_17:
    sub_100145844(v23, v24);
    sub_10007725C();
    sub_1000A1790();
    goto LABEL_18;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v37, v8, v33);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v32, v37, v33);
  sub_100153DB8();
  uint64_t v26 = v37;
  if (HIBYTE(v36) < 0xFFu)
  {
    if ((v36 & 0xFF00) == 0x900)
    {
      id v27 = objc_allocWithZone((Class)type metadata accessor for RawPayload());
      id v28 = RawPayload.init(with:)(v34, v35);
      sub_10007725C();

      sub_1000A1790();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v37, v33);
      *(void *)(v32 + *(int *)(type metadata accessor for BiomeSessionWrapper(0LL) + 20)) = v28;
      return;
    }

    sub_1000F4848((uint64_t)&v34);
  }

  else
  {
    sub_1000C00CC((uint64_t)&v34, &qword_1001D8F00);
  }

  unint64_t v29 = sub_100153BC0();
  sub_100010EA0((uint64_t)&type metadata for BiomeSessionError, v29);
  sub_100145844(v30, 3);
  sub_10007725C();

  sub_1000A1790();
  sub_100153DB0(v26);
  sub_100153DB0(v32);
}

uint64_t SessionFeedback.__allocating_init(session:sessionId:type:creationDate:closingDate:)()
{
  uint64_t v0 = sub_1000CA9E4();
  SessionFeedback.init(session:sessionId:type:creationDate:closingDate:)();
  return v0;
}

void SessionFeedback.__allocating_init(withWrappedPayload:creationDate:closingDate:)( void *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1001525EC()
{
  uint64_t v0 = sub_10000941C(&qword_1001DD4C0);
  uint64_t inited = swift_initStackObject(v0, &v4);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10015D580;
  *(void *)(inited + 3sub_1000108B8(v0 + 2) = 0x72657070617257LL;
  *(void *)(inited + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = 0xE700000000000000LL;
  v5.value._uint64_t rawValue = (void *)Dictionary.init(dictionaryLiteral:)( &off_1001BEF08,  &type metadata for String,  &type metadata for PropertyModel,  &protocol witness table for String);
  v5.is_nil = 0;
  *(Schematizer::MessageSchemaModel *)(inited + sub_100019B20(v3, v1 + 48) = MessageSchemaModel.init(properties:oneOfs:)(v5, v7);
  *(void *)(inited + 7sub_1000108B8(v0 + 2) = 0x6E6F6973736553LL;
  *(void *)(inited + 8sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = 0xE700000000000000LL;
  v6.value._uint64_t rawValue = (void *)Dictionary.init(dictionaryLiteral:)( &off_1001BEF98,  &type metadata for String,  &type metadata for PropertyModel,  &protocol witness table for String);
  v6.is_nil = 0;
  *(Schematizer::MessageSchemaModel *)(inited + 88) = MessageSchemaModel.init(properties:oneOfs:)(v6, v8);
  uint64_t v2 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  &type metadata for MessageSchemaModel,  &protocol witness table for String);
  uint64_t result = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for EnumModel,  &protocol witness table for String);
  qword_1001DD2E0 = v2;
  *(void *)algn_1001DD2E8 = result;
  return result;
}

uint64_t sub_100152718()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  if (qword_1001DD2F0)
  {
    uint64_t v4 = (_UNKNOWN **)off_1001DD2F8;
    uint64_t v5 = qword_1001DD2F0;
  }

  else
  {
    if (qword_1001DB900 != -1) {
      swift_once(&qword_1001DB900, sub_1001525EC);
    }
    uint64_t v10 = *(void *)algn_1001DD2E8;
    uint64_t v11 = sub_100153DA8();
    sub_100153D48(v11);
    sub_100153D3C();
    swift_bridgeObjectRetain(v10);
    uint64_t result = (uint64_t)sub_100153D94();
    uint64_t v2 = v1;
    if (v1) {
      return result;
    }
    uint64_t v5 = result;
    uint64_t v4 = &protocol witness table for ProtoSchemaStore;
    qword_1001DD2F0 = result;
    off_1001DD2F8 = &protocol witness table for ProtoSchemaStore;
    swift_retain();
    sub_1000471D0();
  }

  sub_100153DA0();
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];
  swift_unknownObjectRetain();
  sub_100014244(v7, v8);
  uint64_t result = ProtobufPayload.__allocating_init(with:from:payload:)( 0x6E6F6973736553LL,  0xE700000000000000LL,  v5,  (uint64_t)v4,  v7,  v8);
  if (v2) {
    return result;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(void *)result + 104LL))( &v14,  25705LL,  0xE200000000000000LL);
  if (HIBYTE(v15) < 0xFFu)
  {
    if ((v15 & 0xFF00) == 0x800)
    {
      swift_release();
      return v14;
    }

    sub_1000F4848((uint64_t)&v14);
  }

  else
  {
    sub_1000C00CC((uint64_t)&v14, &qword_1001D8F00);
  }

  unint64_t v12 = sub_100153BC0();
  sub_100010EA0((uint64_t)&type metadata for BiomeSessionError, v12);
  sub_100145844(v13, 3);
  return swift_release();
}

uint64_t sub_10015290C()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  if (qword_1001DD2F0)
  {
    uint64_t v4 = (_UNKNOWN **)off_1001DD2F8;
    uint64_t v5 = qword_1001DD2F0;
    goto LABEL_3;
  }

  if (qword_1001DB900 != -1) {
    swift_once(&qword_1001DB900, sub_1001525EC);
  }
  uint64_t v8 = qword_1001DD2E0;
  uint64_t v9 = *(void *)algn_1001DD2E8;
  uint64_t v10 = sub_100153DA8();
  sub_100153D48(v10);
  sub_100153D3C();
  swift_bridgeObjectRetain(v9);
  uint64_t v11 = sub_100153D94();
  uint64_t v2 = v1;
  if (!v1)
  {
    uint64_t v5 = (uint64_t)v11;
    uint64_t v4 = &protocol witness table for ProtoSchemaStore;
    qword_1001DD2F0 = (uint64_t)v11;
    off_1001DD2F8 = &protocol witness table for ProtoSchemaStore;
    swift_retain();
    sub_1000471D0();
LABEL_3:
    swift_getObjectType(v5);
    Swift::OpaquePointer_optional v6 = (void (*)(uint64_t))v4[5];
    swift_unknownObjectRetain();
    uint64_t v7 = sub_100153D70();
    uint64_t v8 = v5;
    v6(v7);
    if (v2)
    {
      sub_1000145E0();
    }

    else
    {
      uint64_t v12 = sub_100153DA0();
      __chkstk_darwin(v12);
      v22[2] = v3;
      static ProtobufPayload.create(with:constructor:)( v23,  (void (*)(void *__return_ptr, void))sub_100153BA8,  (uint64_t)v22);
      uint64_t v15 = v14;
      uint64_t ObjectType = swift_getObjectType(v16);
      uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 24))(ObjectType, v15);
      uint64_t v20 = v19;
      id v21 = objc_allocWithZone((Class)type metadata accessor for RawPayload());
      uint64_t v8 = (uint64_t)RawPayload.init(with:)(v18, v20);
      sub_1000145E0();
      swift_unknownObjectRelease();
      sub_1000108B8(v23);
    }
  }

  return v8;
}

uint64_t sub_100152AF4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1[3];
  uint64_t v5 = a1[4];
  sub_100019AFC(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 8) + 8LL))(v6);
  BOOL v9 = v7 == 0x546E6F6973736573LL && v8 == 0xEB00000000657079LL;
  if (v9
    || (uint64_t v10 = v7,
        uint64_t v11 = v8,
        (_stringCompareWithSmolCheck(_:_:expecting:)(0x546E6F6973736573LL, 0xEB00000000657079LL, v7, v8, 0LL) & 1) != 0))
  {
    uint64_t v12 = swift_bridgeObjectRelease();
    uint64_t result = SessionType.description.getter(v12);
    *(void *)a3 = result;
    *(void *)(a3 + 8) = v14;
    *(_BYTE *)(a3 + 57) = 8;
    return result;
  }

  if (v10 == 0x64616F6C796170LL && v11 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x64616F6C796170LL, 0xE700000000000000LL, v10, v11, 0LL);
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
      unint64_t v17 = sub_100153BC0();
      uint64_t v18 = swift_allocError(&type metadata for BiomeSessionError, v17, 0LL, 0LL);
      *uint64_t v19 = 0;
      return swift_willThrow(v18);
    }
  }

  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  *(void *)a3 = *v20;
  *(void *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 57) = 9;
  return sub_100014244(v21, v22);
}

id SessionFeedback.backingStore.getter()
{
  return *(id *)(v0 + 16);
}

void SessionFeedback.backingStore.setter(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = a1;

  sub_10004ECC0();
}

uint64_t (*SessionFeedback.backingStore.modify(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t SessionFeedback.type.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100152DA0( &OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_type,  (uint64_t (*)(void))&type metadata accessor for SessionType,  a1);
}

uint64_t SessionFeedback.sessionId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_sessionId);
  swift_bridgeObjectRetain(*(void *)(v0 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_sessionId + 8));
  return v1;
}

uint64_t SessionFeedback.creationDate.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100152DA0( &OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_creationDate,  (uint64_t (*)(void))&type metadata accessor for Date,  a1);
}

uint64_t sub_100152DA0@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3 + *a1;
  uint64_t v6 = a2(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a3, v5, v6);
}

uint64_t sub_100152DE0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_closingDate;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_100026490(v3, a2);
}

uint64_t sub_100152E34(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001D32B0);
  __chkstk_darwin(v4);
  uint64_t v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_100026490(a1, (uint64_t)v6);
  uint64_t v7 = *a2 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_closingDate;
  swift_beginAccess(v7, v10, 33LL, 0LL);
  sub_10002D564((uint64_t)v6, v7);
  return swift_endAccess(v10);
}

void SessionFeedback.closingDate.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_closingDate;
  sub_100010BE4(v3, (uint64_t)v4, 0LL);
  sub_100026490(v3, a1);
  sub_10004ECC0();
}

uint64_t SessionFeedback.init(session:sessionId:type:creationDate:closingDate:)()
{
  uint64_t v7 = v0 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_closingDate;
  uint64_t v8 = type metadata accessor for Date(0LL);
  sub_100009654(v7, 1LL, 1LL, v8);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v6;
  BOOL v9 = (void *)(v0 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_sessionId);
  *BOOL v9 = v5;
  v9[1] = v4;
  uint64_t v10 = v0 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_type;
  uint64_t v11 = sub_1000A15C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))(v10, v3, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))( v0 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_creationDate,  v2,  v8);
  uint64_t v12 = v0 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_closingDate;
  sub_100010BC0(v0 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_closingDate, (uint64_t)v14);
  sub_10002D564(v1, v12);
  swift_endAccess(v14);
  return v0;
}

void *SessionFeedback.init(withWrappedPayload:creationDate:closingDate:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v32 = a3;
  uint64_t v6 = sub_1000A15C0();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100009AEC();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for BiomeSessionWrapper(0LL);
  sub_100009B94();
  __chkstk_darwin(v12);
  sub_100009AEC();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = (uint64_t)v4 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_closingDate;
  uint64_t v17 = type metadata accessor for Date(0LL);
  sub_100009654(v16, 1LL, 1LL, v17);
  uint64_t v18 = a1;
  sub_100152124(v18, v15);
  if (v28)
  {

    sub_1000C00CC(v32, &qword_1001D32B0);
    sub_100153D28();
    sub_1000C00CC((uint64_t)v4 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_closingDate, &qword_1001D32B0);
    uint64_t v21 = type metadata accessor for SessionFeedback(0LL);
    swift_deallocPartialClassInstance(v4, v21, *(unsigned int *)(*v4 + 48LL), *(unsigned __int16 *)(*v4 + 52LL));
  }

  else
  {
    uint64_t v29 = v10;
    uint64_t v19 = *(void **)(v15 + *(int *)(v11 + 20));
    void v4[2] = v19;
    id v20 = v19;
    uint64_t v23 = sub_100152718();
    uint64_t v25 = v24;

    uint64_t v26 = (void *)((char *)v4 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_sessionId);
    *uint64_t v26 = v23;
    v26[1] = v25;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v29, v15, v6);
    sub_100146990(v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))( (uint64_t)v4 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_type,  v29,  v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32LL))( (uint64_t)v4 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_creationDate,  a2,  v17);
    uint64_t v27 = (uint64_t)v4 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_closingDate;
    sub_100010BC0((uint64_t)v4 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_closingDate, (uint64_t)v31);
    sub_10002D564(v32, v27);
    swift_endAccess(v31);
  }

  return v4;
}

uint64_t type metadata accessor for BiomeSessionWrapper(uint64_t a1)
{
  return sub_100018ABC(a1, qword_1001DD480, (uint64_t)&nominal type descriptor for BiomeSessionWrapper);
}

uint64_t type metadata accessor for SessionFeedback(uint64_t a1)
{
  return sub_100018ABC(a1, qword_1001DD328, (uint64_t)&nominal type descriptor for SessionFeedback);
}

void SessionFeedback.getWrappedPayload()()
{
  uint64_t v1 = type metadata accessor for BiomeSessionWrapper(0LL);
  sub_100009B94();
  __chkstk_darwin(v2);
  sub_100009AEC();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = v0 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_type;
  uint64_t v7 = sub_1000A15C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
  swift_beginAccess(v0 + 16, v10, 0LL, 0LL);
  uint64_t v8 = *(void **)(v0 + 16);
  *(void *)(v5 + *(int *)(v1 + 20)) = v8;
  id v9 = v8;
  sub_10015290C();
  sub_100146990(v5);
  sub_1000E887C();
}

uint64_t sub_100153344(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = a2;
  uint64_t v50 = a1;
  sub_10000941C(&qword_1001D32B0);
  sub_100009B94();
  __chkstk_darwin(v3);
  sub_100032C48();
  uint64_t v52 = v4;
  sub_10003D810();
  __chkstk_darwin(v5);
  uint64_t v51 = (uint64_t)&v45 - v6;
  sub_10003D810();
  __chkstk_darwin(v7);
  id v9 = (char *)&v45 - v8;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100032C48();
  uint64_t v49 = v12;
  sub_10003D810();
  __chkstk_darwin(v13);
  uint64_t v48 = (uint64_t)&v45 - v14;
  sub_10003D810();
  __chkstk_darwin(v15);
  uint64_t v46 = (char *)&v45 - v16;
  sub_10003D810();
  uint64_t v18 = __chkstk_darwin(v17);
  id v20 = (char *)&v45 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v45 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (char *)&v45 - v25;
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v45 - v27;
  uint64_t v53 = v2;
  uint64_t v29 = Date.addingTimeInterval(_:)(900.0);
  Date.init()(v29);
  sub_10006D118();
  if ((sub_100153D10() & 1) != 0) {
    uint64_t v30 = (uint64_t)v23;
  }
  else {
    uint64_t v30 = (uint64_t)v26;
  }
  sub_1000F97F0((uint64_t)v28, v30);
  uint64_t v31 = (uint64_t)v23;
  uint64_t v32 = (uint64_t)v46;
  sub_100153D08(v31);
  sub_100153D08((uint64_t)v26);
  sub_100026490(v47, (uint64_t)v9);
  sub_1000F97F0(v32, (uint64_t)v28);
  if (sub_100010708((uint64_t)v9, 1LL, v10) == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v20, v32, v10);
    sub_1000C00CC((uint64_t)v9, &qword_1001D32B0);
  }

  else
  {
    sub_100153D08(v32);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v20, v9, v10);
  }

  else {
    uint64_t v33 = (uint64_t)v20;
  }
  uint64_t v34 = v48;
  sub_1000F97F0(v48, v33);
  uint64_t v35 = v50;
  char v36 = sub_100153D88(v50, (uint64_t)v20);
  uint64_t v37 = v49;
  if ((v36 & 1) != 0)
  {
    uint64_t v38 = v49;
    uint64_t v39 = v35;
  }

  else
  {
    uint64_t v38 = v49;
    uint64_t v39 = (uint64_t)v20;
  }

  sub_1000F97F0(v38, v39);
  if ((sub_100153D10() & 1) != 0) {
    uint64_t v40 = v37;
  }
  else {
    uint64_t v40 = v34;
  }
  uint64_t v41 = v51;
  sub_1000F97F0(v51, v40);
  sub_100153D08(v37);
  sub_100153D08(v34);
  sub_100153D08((uint64_t)v20);
  sub_100153D08((uint64_t)v28);
  sub_100009654(v41, 0LL, 1LL, v10);
  uint64_t v42 = v52;
  sub_100047014(v41, v52);
  uint64_t v43 = v53 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_closingDate;
  sub_100010BE4(v53 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_closingDate, (uint64_t)v54, 33LL);
  sub_10002D564(v42, v43);
  return swift_endAccess(v54);
}

uint64_t SessionFeedback.deinit()
{
  uint64_t v1 = sub_1000A15C0();
  sub_100019DA4(v1);
  swift_bridgeObjectRelease();
  uint64_t v2 = type metadata accessor for Date(0LL);
  sub_100019DA4(v2);
  sub_1000C00CC(v0 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_closingDate, &qword_1001D32B0);
  return v0;
}

uint64_t SessionFeedback.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100153720()
{
  return type metadata accessor for SessionFeedback(0LL);
}

void sub_100153728(uint64_t a1)
{
  v8[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t v2 = type metadata accessor for SessionType(319LL);
  if (v3 <= 0x3F)
  {
    v8[1] = *(void *)(v2 - 8) + 64LL;
    void v8[2] = &unk_100169EB8;
    uint64_t v4 = type metadata accessor for Date(319LL);
    if (v5 <= 0x3F)
    {
      _OWORD v8[3] = *(void *)(v4 - 8) + 64LL;
      sub_100026D28(319LL);
      if (v7 <= 0x3F)
      {
        void v8[4] = *(void *)(v6 - 8) + 64LL;
        swift_updateClassMetadata2(a1, 256LL, 5LL, v8, a1 + 80);
      }
    }
  }

uint64_t *sub_1001537E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v11);
  }

  else
  {
    uint64_t v7 = type metadata accessor for SessionType(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    id v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + static AvroValue.__derived_struct_equals(_:_:)(v9, v10, v3, v4, v5, v6, v7, v8) = (uint64_t)v9;
    id v10 = v9;
  }

  return a1;
}

void sub_10015386C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SessionType(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
}

uint64_t sub_1001538B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SessionType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  id v9 = v8;
  return a1;
}

uint64_t sub_100153910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SessionType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  id v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  return a1;
}

uint64_t sub_100153978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SessionType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1001539D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SessionType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  return a1;
}

uint64_t sub_100153A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100153A44);
}

uint64_t sub_100153A44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000A15C0();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return sub_100010708(a1, a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(static AvroValue.__derived_struct_equals(_:_:)(v9, v10, v3, v4, v5, v6, v7, v8) = -1;
  }
  return (v8 + 1);
}

uint64_t sub_100153AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100153AC4);
}

uint64_t sub_100153AC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1000A15C0();
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3) {
    return sub_100009654(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_100153B34(uint64_t a1)
{
  uint64_t result = type metadata accessor for SessionType(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_100153BA8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100152AF4(a1, *(void *)(v2 + 16), a2);
}

unint64_t sub_100153BC0()
{
  unint64_t result = qword_1001DD4B8;
  if (!qword_1001DD4B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169F6C, &type metadata for BiomeSessionError);
    atomic_store(result, (unint64_t *)&qword_1001DD4B8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for BiomeSessionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = 1;
  }
  else {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100153C48 + 4 * byte_100169E85[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100153C7C + 4 * byte_100169E80[v4]))();
}

uint64_t sub_100153C7C(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_100153C84(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x100153C8CLL);
  }
  return result;
}

uint64_t sub_100153C98(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100153CA0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_100153CA4(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_100153CAC(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BiomeSessionError()
{
  return &type metadata for BiomeSessionError;
}

unint64_t sub_100153CCC()
{
  unint64_t result = qword_1001DD4C8;
  if (!qword_1001DD4C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169F44, &type metadata for BiomeSessionError);
    atomic_store(result, (unint64_t *)&qword_1001DD4C8);
  }

  return result;
}

uint64_t sub_100153D08(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_100153D10()
{
  return dispatch thunk of static Comparable.< infix(_:_:)(v0, v1);
}

uint64_t sub_100153D28()
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(v0 - 8) + 8LL))(*(void *)(v1 - 112), v0);
}

uint64_t sub_100153D3C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100153D48(uint64_t a1)
{
  return swift_allocObject(a1, 64LL, 7LL);
}

  ;
}

uint64_t sub_100153D70()
{
  return 0x72657070617257LL;
}

uint64_t sub_100153D88(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of static Comparable.>= infix(_:_:)(a1, a2, v2, v3);
}

void *sub_100153D94()
{
  return ProtoSchemaStore.init(withModel:)();
}

uint64_t sub_100153DA0()
{
  return type metadata accessor for ProtobufPayload();
}

uint64_t sub_100153DA8()
{
  return type metadata accessor for ProtoSchemaStore();
}

uint64_t sub_100153DB0(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_100153DB8()
{
  return v0();
}

void UploadStateFileStore.uploadDidStart(at:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100019F54(a1);
  int v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)sub_100009B20(12LL);
    uint64_t v8 = sub_100009B20(32LL);
    uint64_t v56 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v55 = a1;
    sub_10015485C();
    uint64_t v9 = sub_100010D08();
    uint64_t v12 = sub_100154874(v9, v10, v11);
    sub_10015488C(v12, v13, v14, v15, v16, v17, v18);
    sub_10004EDAC();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v19, v20, v7 + 4);
    sub_10004099C();
    uint64_t v2 = v1;
    swift_bridgeObjectRelease();
    sub_100014564((void *)&_mh_execute_header, v5, v6, "Starting upload at bookmark: %s", v7);
    swift_arrayDestroy(v8, 1LL);
    sub_100010C34(v8);
    sub_100010C34((uint64_t)v7);
  }

  else
  {
    sub_10004099C();
  }

  uint64_t v21 = sub_1001513F8();
  if (!v2)
  {
    uint64_t v22 = (uint64_t)v21;
    uint64_t v23 = *((void *)v21 + 2);
    if (v23)
    {
      sub_10015485C();
      uint64_t v24 = (_BYTE *)(v22 + 40);
      while (1)
      {
        char v25 = *v24;
        if ((static SessionBookmark.== infix(_:_:)(*((void *)v24 - 1), a1) & 1) != 0) {
          break;
        }
        v24 += 16;
        if (!--v23) {
          goto LABEL_9;
        }
      }

      swift_retain();
      sub_100010C70();
      if ((v25 & 1) != 0)
      {
        unint64_t v31 = sub_100151BD8();
        sub_100010EA0((uint64_t)&type metadata for UploadStateStoreError, v31);
        sub_100145844(v32, 1);
LABEL_20:
        swift_release();
        goto LABEL_25;
      }

      uint64_t v35 = sub_100019F54(a1);
      char v36 = (os_log_s *)Logger.logObject.getter(v35);
      os_log_type_t v41 = static os_log_type_t.info.getter(v36, v37, v38, v39, v40);
      if (os_log_type_enabled(v36, v41))
      {
        uint64_t v42 = (uint8_t *)sub_100009B20(12LL);
        uint64_t v43 = sub_100009B20(32LL);
        uint64_t v56 = v43;
        *(_DWORD *)uint64_t v42 = 136315138;
        uint64_t v55 = a1;
        sub_100010D08();
        uint64_t v44 = String.init<A>(describing:)(&v55);
        sub_10015488C(v44, v45, v46, v47, v48, v49, v50);
        sub_10004EDAC();
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v51, v52, v42 + 4);
        sub_10004099C();
        swift_bridgeObjectRelease();
        sub_100014564((void *)&_mh_execute_header, v36, v41, "restarting upload at bookmark: %s", v42);
        sub_100154864();
        sub_100010C34(v43);
        sub_100010C34((uint64_t)v42);
      }

      else
      {
        sub_10004099C();
      }

      swift_release();
    }

    else
    {
LABEL_9:
      uint64_t v26 = sub_100154158(v22);
      if (v26)
      {
        uint64_t v27 = v26;
        sub_10015485C();
        if (!static SessionBookmark.< infix(_:_:)(v27, a1))
        {
          sub_100010C70();
          unint64_t v33 = sub_100151BD8();
          sub_100010EA0((uint64_t)&type metadata for UploadStateStoreError, v33);
          sub_100145844(v34, 4);
          goto LABEL_20;
        }

        swift_release();
      }

      sub_100010D08();
      if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
      {
        sub_100154880(0, *(void *)(v22 + 16) + 1LL);
        uint64_t v22 = v53;
      }

      unint64_t v29 = *(void *)(v22 + 16);
      unint64_t v28 = *(void *)(v22 + 24);
      if (v29 >= v28 >> 1)
      {
        sub_100154880(v28 > 1, v29 + 1);
        uint64_t v22 = v54;
      }

      *(void *)(v22 + swift_weakDestroy(v0 + 16) = v29 + 1;
      uint64_t v30 = v22 + 16 * v29;
      *(void *)(v30 + 3sub_1000108B8(v0 + 2) = a1;
      *(_BYTE *)(v30 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = 0;
      sub_100154198(v22);
      sub_100010C70();
    }
  }

uint64_t sub_100154158(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    return swift_retain(*(void *)(a1 + 16 * v1 + 16));
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100154198(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_10000941C(&qword_1001D5ED0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v27 - v13;
  *(void *)(v1 + OBJC_IVAR____TtC14SearchFeedback20UploadStateFileStore_uploadStateCache) = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v15 = swift_bridgeObjectRelease();
  NSFileManager.parsecdAssetsDirectoryURL.getter(v15);
  if (sub_100010708((uint64_t)v7, 1LL, v8) == 1)
  {
    sub_100010AE8((uint64_t)v7);
    unint64_t v16 = sub_100151BD8();
    uint64_t v17 = sub_100010EA0((uint64_t)&type metadata for UploadStateStoreError, v16);
    *uint64_t v18 = 0;
    return swift_willThrow(v17);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
    uint64_t v20 = type metadata accessor for JSONEncoder(0LL);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    JSONEncoder.init()();
    uint64_t v29 = a1;
    unint64_t v21 = sub_100154820();
    swift_bridgeObjectRetain(a1);
    uint64_t v22 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v29, &unk_1001C00E0, v21);
    unint64_t v28 = v23;
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }

    else
    {
      uint64_t v24 = v22;
      swift_release();
      swift_bridgeObjectRelease();
      URL.appendingPathComponent(_:)( *(void *)(v1 + OBJC_IVAR____TtC14SearchFeedback20UploadStateFileStore_sessionUploadStateFileName),  *(void *)(v1 + OBJC_IVAR____TtC14SearchFeedback20UploadStateFileStore_sessionUploadStateFileName + 8));
      unint64_t v25 = v28;
      Data.write(to:options:)(v12, 1LL, v24, v28);
      sub_100010A30(v24, v25);
      uint64_t v26 = *(void (**)(char *, uint64_t))(v9 + 8);
      v26(v12, v8);
      return ((uint64_t (*)(char *, uint64_t))v26)(v14, v8);
    }
  }

void UploadStateFileStore.uploadDidFinish(at:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100019F54(a1);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)sub_100009B20(12LL);
    uint64_t v8 = sub_100009B20(32LL);
    v34[1] = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    sub_10015485C();
    uint64_t v9 = swift_retain();
    uint64_t v12 = sub_100154874(v9, v10, v11);
    uint64_t v33 = sub_10015488C(v12, v13, v14, v15, v16, v17, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v7 + 4);
    sub_10014468C();
    uint64_t v2 = v1;
    swift_bridgeObjectRelease();
    sub_100014564((void *)&_mh_execute_header, v5, v6, "Finished uploading at bookmark: %s", v7);
    sub_100154864();
    sub_100010C34(v8);
    sub_100010C34((uint64_t)v7);
  }

  else
  {
    sub_10014468C();
  }

  uint64_t v19 = sub_1001513F8();
  if (v2) {
    goto LABEL_20;
  }
  uint64_t v20 = (uint64_t)v19;
  swift_retain();
  swift_bridgeObjectRetain(v20);
  unint64_t v22 = sub_1001546B8(v21, a1);
  char v24 = v23;
  swift_bridgeObjectRelease();
  if ((v24 & 1) != 0)
  {
    unint64_t v28 = sub_100151BD8();
    sub_100010EA0((uint64_t)&type metadata for UploadStateStoreError, v28);
    char v27 = 3;
    goto LABEL_11;
  }

  if ((v22 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  if (v22 >= *(void *)(v20 + 16))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    sub_10015480C(v20);
    uint64_t v20 = v32;
    goto LABEL_13;
  }

  if ((*(_BYTE *)(v20 + 16 * v22 + 40) & 1) != 0)
  {
    unint64_t v25 = sub_100151BD8();
    sub_100010EA0((uint64_t)&type metadata for UploadStateStoreError, v25);
    char v27 = 2;
LABEL_11:
    sub_100145844(v26, v27);
    swift_bridgeObjectRelease();
LABEL_20:
    sub_1000E5710();
    return;
  }

  if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0) {
    goto LABEL_23;
  }
LABEL_13:
  unint64_t v29 = *(void *)(v20 + 16);
  if (v22 < v29)
  {
    *(_BYTE *)(v20 + 32 + 16 * v22 + 8) = 1;
    if (v29 != 1 && *(_BYTE *)(v20 + 40) && *(_BYTE *)(v20 + 56) == 1)
    {
      do
      {
        unint64_t v30 = v29 - 1;
        memmove((void *)(v20 + 32), (const void *)(v20 + 48), 16 * (v29 - 1));
        *(void *)(v20 + swift_weakDestroy(v0 + 16) = v30;
        swift_release();
        unint64_t v29 = *(void *)(v20 + 16);
      }

      while (v29 >= 2 && (*(_BYTE *)(v20 + 56) & 1) != 0);
    }

    swift_bridgeObjectRetain(v20);
    sub_100154198(v31);
    swift_bridgeObjectRelease_n(v20, 2LL);
    goto LABEL_20;
  }

  __break(1u);
}

uint64_t sub_1001546B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 32);
    type metadata accessor for SessionBookmark();
    uint64_t v5 = 0LL;
    while ((static SessionBookmark.== infix(_:_:)(*v4, a2) & 1) == 0)
    {
      ++v5;
      v4 += 2;
      if (v3 == v5)
      {
        uint64_t v5 = 0LL;
        break;
      }
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  swift_release();
  return v5;
}

uint64_t sub_10015474C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_100109CF4();
    uint64_t result = sub_1000DE2F4( (uint64_t)"Fatal error",  v15,  v16,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v17,  v18,  (uint64_t)"Swift/UnsafePointer.swift",  v19,  v20,  v21,  v22);
    __break(1u);
  }

  else if (a3 < a1 {
         || (uint64_t result = type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL),
  }
             a1 + *(void *)(*(void *)(result - 8) + 72LL) * a2 <= a3))
  {
    type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL);
    uint64_t v11 = sub_1000DE3AC();
    return swift_arrayInitWithTakeFrontToBack(v11, v12, v13, v14);
  }

  else if (a3 != a1)
  {
    uint64_t v7 = sub_1000DE3AC();
    return swift_arrayInitWithTakeBackToFront(v7, v8, v9, v10);
  }

  return result;
}

void sub_10015480C(uint64_t a1)
{
}

unint64_t sub_100154820()
{
  unint64_t result = qword_1001DD4D0;
  if (!qword_1001DD4D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169CA4, &unk_1001C00E0);
    atomic_store(result, (unint64_t *)&qword_1001DD4D0);
  }

  return result;
}

uint64_t sub_10015485C()
{
  return type metadata accessor for SessionBookmark();
}

uint64_t sub_100154864()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_100154874(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return String.init<A>(describing:)(va);
}

void sub_100154880(char a1, int64_t a2)
{
}

uint64_t sub_10015488C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  return sub_1000307E0(a1, a2, (uint64_t *)va);
}

uint64_t sub_100154894(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, double a5, double a6)
{
  *(_WORD *)(v6 + 24sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = 0;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 2swift_weakDestroy(v0 + 24) = 0u;
  *(_OWORD *)(v6 + 17sub_10005B218(v0, v2, v1, 6) = 0u;
  *(_OWORD *)(v6 + 19sub_1000108B8(v0 + 2) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 16sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  sub_10004D7B4((uint64_t)a4, v6 + 88);
  uint64_t v14 = a4[3];
  uint64_t v13 = a4[4];
  sub_100019AFC(a4, v14);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)(v13 + 8) + 8LL))(v14);
  uint64_t v17 = BiomeStoreEnumerator.init(reader:sqliteBridge:enumerationRange:messageName:)(a1, a2, a3, v15, v16, a5, a6);
  sub_1000108B8(a4);
  return v17;
}

uint64_t sub_100154964()
{
  *(void *)(v0 + 128) = 0LL;
  *(void *)(v0 + 13sub_10005B218(v0, v2, v1, 6) = 0LL;
  swift_unknownObjectRelease();
  __int16 v8 = 0;
  memset(v7, 0, sizeof(v7));
  uint64_t v1 = sub_1001551E0();
  swift_beginAccess(v1, v2, v3, v4);
  sub_1001550C8((uint64_t)v7, v0 + 144);
  return swift_endAccess(v6);
}

uint64_t sub_1001549C4()
{
  uint64_t v1 = v0;
  if (*(void *)(v0 + 128))
  {
    uint64_t v2 = *(void *)(v0 + 128);
  }

  else
  {
    uint64_t v3 = BiomeStoreEnumerator.payload.getter();
    if (v4 >> 60 == 15)
    {
      uint64_t v2 = 0LL;
    }

    else
    {
      uint64_t v5 = v3;
      unint64_t v6 = v4;
      id v7 = objc_allocWithZone((Class)type metadata accessor for RawPayload());
      sub_100014244(v5, v6);
      id v8 = RawPayload.init(with:)(v5, v6);
      uint64_t v2 = RawPayload.schemitized(with:)(v0 + 88);
      uint64_t v10 = v9;
      sub_100010A1C(v5, v6);

      *(void *)(v1 + 128) = v2;
      *(void *)(v1 + 13sub_10005B218(v0, v2, v1, 6) = v10;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
    }
  }

  swift_unknownObjectRetain();
  return v2;
}

uint64_t sub_100154AAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_1001549C4();
  if (result)
  {
    uint64_t v8 = v7;
    uint64_t ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, a2, ObjectType, v8);
    return swift_unknownObjectRelease();
  }

  else
  {
    *(void *)(a3 + sub_100019B20(v3, v1 + 48) = 0LL;
    *(_OWORD *)(a3 + swift_weakDestroy(v0 + 16) = 0u;
    *(_OWORD *)(a3 + 3sub_1000108B8(v0 + 2) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_WORD *)(a3 + 5sub_10005B218(v0, v2, v1, 6) = -256;
  }

  return result;
}

double sub_100154B44@<D0>(void *a1@<X8>)
{
  void (*v11)(void *__return_ptr, uint64_t, void *, uint64_t, uint64_t, __n128);
  __n128 v12;
  double result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE v19[104];
  void __src[13];
  void v21[14];
  uint64_t v3 = v2;
  uint64_t v5 = sub_1001549C4();
  if (!v5) {
    return sub_1001551C8();
  }
  uint64_t v7 = v6;
  uint64_t ObjectType = swift_getObjectType(v5);
  uint64_t v9 = qword_1001DD4D8;
  uint64_t v10 = off_1001DD4E0;
  uint64_t v11 = *(void (**)(void *__return_ptr, uint64_t, void *, uint64_t, uint64_t, __n128))(v7 + 136);
  uint64_t v12 = swift_bridgeObjectRetain(off_1001DD4E0);
  v11(v21, v9, v10, ObjectType, v7, v12);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (!v3)
  {
    sub_100155144((uint64_t)v21, (uint64_t)__src);
    if (__src[3])
    {
      memcpy(a1, __src, 0x62uLL);
      sub_10015518C((uint64_t)a1, (uint64_t)__src);
      sub_100155144((uint64_t)__src, (uint64_t)v19);
      uint64_t v14 = sub_1001551E0();
      swift_beginAccess(v14, v15, v16, v17);
      sub_1001550C8((uint64_t)v19, v1 + 144);
      swift_endAccess(v18);
    }

    else
    {
      sub_100028CD0((uint64_t)__src, &qword_1001DD6F0);
      return sub_1001551C8();
    }
  }

  return result;
}

void sub_100154C7C()
{
  if (!v0)
  {
    sub_100019BDC((uint64_t)v6, (uint64_t)__src, &qword_1001DD6F0);
    if (__src[3])
    {
      memcpy(__dst, __src, 0x62uLL);
      sub_1000F47D4(&__dst[5], (uint64_t)__src);
      if (BYTE1(__src[7]) != 10)
      {
        sub_1000F4848((uint64_t)__src);
        unint64_t v1 = sub_1001469CC();
        uint64_t v2 = sub_100010EA0((uint64_t)&type metadata for SearchStoreEnumerator.Error, v1);
        sub_100146A18(v2, v3);
      }

      sub_100155110((uint64_t)__dst);
      sub_100028CD0((uint64_t)v6, &qword_1001DD6F0);
    }

    else
    {
      sub_10005A5A4((uint64_t)v6);
      sub_10005A5A4((uint64_t)__src);
    }
  }

uint64_t sub_100154D80()
{
  if (!v1)
  {
    if (v9)
    {
      sub_10004D7B4((uint64_t)v8, (uint64_t)v5);
      sub_100155110((uint64_t)v8);
      uint64_t v3 = v6;
      uint64_t v2 = v7;
      sub_100019AFC(v5, v6);
      uint64_t v0 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 8) + 8LL))(v3);
      sub_1000108B8(v5);
    }

    else
    {
      sub_100028CD0((uint64_t)v8, &qword_1001DD6F0);
      return 0LL;
    }
  }

  return v0;
}

void sub_100154E34()
{
  uint64_t v1 = *(void *)aQueryid_0;
  uint64_t v2 = unk_1001DD4F0;
  swift_bridgeObjectRetain(unk_1001DD4F0);
  sub_100154AAC(v1, v2, (uint64_t)v9);
  swift_bridgeObjectRelease();
  if (!v0)
  {
    sub_100019BDC((uint64_t)v9, (uint64_t)v6, &qword_1001D8F00);
    if (HIBYTE(v7) <= 0xFEu)
    {
      sub_1000F4798((uint64_t)v6, (uint64_t)v8);
      sub_1000F47D4(v8, (uint64_t)v6);
      if (HIBYTE(v7) == 3)
      {
        sub_1000F4848((uint64_t)v8);
        sub_100028CD0((uint64_t)v9, &qword_1001D8F00);
      }

      else
      {
        sub_1000F4848((uint64_t)v6);
        unint64_t v3 = sub_1001469CC();
        uint64_t v4 = sub_100010EA0((uint64_t)&type metadata for SearchStoreEnumerator.Error, v3);
        sub_100146A18(v4, v5);
        sub_1000F4848((uint64_t)v8);
        sub_100028CD0((uint64_t)v9, &qword_1001D8F00);
      }
    }

    else
    {
      sub_10005A5A4((uint64_t)v9);
      sub_10005A5A4((uint64_t)v6);
    }
  }

void sub_100154F60(uint64_t a1)
{
  if (!v2)
  {
    uint64_t v6 = v4;
    if (v4)
    {
      uint64_t v7 = v5;
      uint64_t v8 = *(void *)(v1 + 64);
      uint64_t ObjectType = swift_getObjectType(*(void *)(v1 + 56));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v7, a1, ObjectType, v8);
      swift_unknownObjectRelease();
    }

    else
    {
      SQLiteContext.setNull()();
    }
  }

void sub_100154FF0()
{
}

void sub_10015501C()
{
}

void sub_10015504C()
{
  uint64_t v0 = BiomeStoreEnumerator.deinit();
  sub_1000108B8((void *)(v0 + 88));
  swift_unknownObjectRelease();
  sub_100028CD0(v0 + 144, &qword_1001DD6F0);
  sub_100009A90();
}

uint64_t sub_10015508C()
{
  return swift_deallocClassInstance(v0, 242LL, 7LL);
}

uint64_t type metadata accessor for FeedbackEnumerator()
{
  return objc_opt_self(&OBJC_CLASS____TtC14SearchFeedback18FeedbackEnumerator);
}

uint64_t sub_1001550C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001DD6F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100155110(uint64_t a1)
{
  return a1;
}

uint64_t sub_100155144(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001DD6F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10015518C(uint64_t a1, uint64_t a2)
{
  return a2;
}

double sub_1001551C8()
{
  *(_WORD *)(v0 + 9sub_10005B218(v0, v2, v1, 6) = 0;
  double result = 0.0;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 8sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = 0u;
  *(_OWORD *)(v0 + 3sub_1000108B8(v0 + 2) = 0u;
  *(_OWORD *)(v0 + sub_100019B20(v3, v1 + 48) = 0u;
  *(_OWORD *)uint64_t v0 = 0u;
  *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = 0u;
  return result;
}

uint64_t sub_1001551E0()
{
  return v0;
}

uint64_t sub_100155218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(os_unfair_lock_s **)(a1 + 16);
  os_unfair_lock_lock(v7);
  swift_beginAccess(a2 + 104, v13, 0LL, 0LL);
  uint64_t v8 = *(void *)(a2 + 104);
  if (*(void *)(v8 + 16))
  {
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(v8);
    unint64_t v9 = sub_10000EC64(a3, a4);
    if ((v10 & 1) != 0)
    {
      uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
      swift_retain();
    }

    else
    {
      uint64_t v11 = 0LL;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  os_unfair_lock_unlock(v7);
  swift_bridgeObjectRelease();
  swift_release();
  return v11;
}

void SessionDatabaseError.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(a3)
  {
    case 1LL:
      Swift::UInt v4 = 0LL;
      goto LABEL_9;
    case 2LL:
      Swift::UInt v4 = 1LL;
      goto LABEL_9;
    case 3LL:
      Swift::UInt v4 = 2LL;
      goto LABEL_9;
    case 4LL:
      Swift::UInt v4 = 3LL;
      goto LABEL_9;
    case 5LL:
      Swift::UInt v4 = 4LL;
LABEL_9:
      Hasher._combine(_:)(v4);
      break;
    default:
      Hasher._combine(_:)(5uLL);
      if (a3)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(a3);
        sub_100155A7C(a1);
        sub_1001553AC(a2, a3);
      }

      else
      {
        Hasher._combine(_:)(0);
      }

      break;
  }

uint64_t sub_1001553AC(uint64_t a1, uint64_t a2)
{
  return result;
}

uint64_t static SessionDatabaseError.__derived_enum_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  switch(a2)
  {
    case 1LL:
      return a4 == 1;
    case 2LL:
      return a4 == 2;
    case 3LL:
      return a4 == 3;
    case 4LL:
      return a4 == 4;
    case 5LL:
      return a4 == 5;
    default:
      if (a2)
      {
        if (!a4) {
          return 0LL;
        }
        BOOL v4 = a1 == a3 && a2 == a4;
        return v4 || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL) & 1) != 0;
      }

      if (!a4) {
        return 1LL;
      }
      sub_1001553AC(a1, 0LL);
      return 0LL;
  }

Swift::Int SessionDatabaseError.hashValue.getter(uint64_t a1, uint64_t a2)
{
  switch(a2)
  {
    case 1LL:
      Swift::UInt v4 = 0LL;
      goto LABEL_9;
    case 2LL:
      Swift::UInt v4 = 1LL;
      goto LABEL_9;
    case 3LL:
      Swift::UInt v4 = 2LL;
      goto LABEL_9;
    case 4LL:
      Swift::UInt v4 = 3LL;
      goto LABEL_9;
    case 5LL:
      Swift::UInt v4 = 4LL;
LABEL_9:
      Hasher._combine(_:)(v4);
      break;
    default:
      Hasher._combine(_:)(5uLL);
      if (a2)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(a2);
        sub_100155A7C((uint64_t)v6);
        sub_1001553AC(a1, a2);
      }

      else
      {
        Hasher._combine(_:)(0);
      }

      break;
  }

  return Hasher._finalize()();
}

Swift::Int sub_100155564()
{
  return SessionDatabaseError.hashValue.getter(*v0, v0[1]);
}

void sub_10015556C(uint64_t a1)
{
}

Swift::Int sub_100155574(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  Hasher.init(_seed:)(v6, a1);
  switch(v2)
  {
    case 1LL:
      Swift::UInt v4 = 0LL;
      goto LABEL_9;
    case 2LL:
      Swift::UInt v4 = 1LL;
      goto LABEL_9;
    case 3LL:
      Swift::UInt v4 = 2LL;
      goto LABEL_9;
    case 4LL:
      Swift::UInt v4 = 3LL;
      goto LABEL_9;
    case 5LL:
      Swift::UInt v4 = 4LL;
LABEL_9:
      Hasher._combine(_:)(v4);
      break;
    default:
      Hasher._combine(_:)(5uLL);
      if (v2)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(v2);
        String.hash(into:)(v6, v3, v2);
        sub_1001553AC(v3, v2);
      }

      else
      {
        Hasher._combine(_:)(0);
      }

      break;
  }

  return Hasher._finalize()();
}

uint64_t sub_100155660(uint64_t *a1, uint64_t *a2)
{
  return static SessionDatabaseError.__derived_enum_equals(_:_:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t SessionFeedbackReference.sessionBookmark.getter(uint64_t a1, uint64_t a2)
{
  return swift_retain(a2);
}

unint64_t sub_100155684()
{
  unint64_t result = qword_1001DD7A8;
  if (!qword_1001DD7A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SessionDatabaseError,  &type metadata for SessionDatabaseError);
    atomic_store(result, (unint64_t *)&qword_1001DD7A8);
  }

  return result;
}

unint64_t destroy for SessionDatabaseError(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  return result;
}

uint64_t _s14SearchFeedback20SessionDatabaseErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  LODWORD(sub_100127AE0(v1, v2, v3, v4) = -1;
  if (v3 < 0xFFFFFFFF) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if ((v4 + 1) > 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }

  return a1;
}

void *assignWithCopy for SessionDatabaseError(void *a1, void *a2)
{
  unint64_t v4 = a1[1];
  LODWORD(v5) = -1;
  if (v4 >= 0xFFFFFFFF) {
    LODWORD(vsub_10005B218(v0, v2, v1, 6) = -1;
  }
  else {
    uint64_t v6 = a1[1];
  }
  unsigned int v7 = v6 + 1;
  if (a2[1] < 0xFFFFFFFFuLL) {
    uint64_t v5 = a2[1];
  }
  unsigned int v8 = v5 + 1;
  if (v7 > 1)
  {
    if (v8 <= 1)
    {
      *a1 = *a2;
      uint64_t v10 = a2[1];
      a1[1] = v10;
      swift_bridgeObjectRetain(v10);
      return a1;
    }

uint64_t assignWithTake for SessionDatabaseError(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  int v5 = -1;
  if (v4 < 0xFFFFFFFF) {
    int v5 = v4;
  }
  unint64_t v6 = *(void *)(a2 + 8);
  LODWORD(v7) = -1;
  if (v6 < 0xFFFFFFFF) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if ((v7 + 1) > 1)
  {
    swift_bridgeObjectRelease(v4);
LABEL_9:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SessionDatabaseError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 > 0x7FFFFFF9 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483642);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(vswift_weakDestroy(v0 + 3) = -1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for SessionDatabaseError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFA)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483642;
    if (a3 >= 0x7FFFFFFA) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFA) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 5;
    }
  }

  return result;
}

uint64_t sub_100155914(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(swift_initStackObject(v0, v1) = -1;
  }
  else {
    return 0LL;
  }
}

void *sub_100155934(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *unint64_t result = 0LL;
    result[1] = 0LL;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
  }

  else if (a2)
  {
    result[1] = a2;
  }

  return result;
}

ValueMetadata *type metadata accessor for SessionDatabaseError()
{
  return &type metadata for SessionDatabaseError;
}

uint64_t destroy for SessionFeedbackReference(void *a1)
{
  return swift_release(a1[1]);
}

uint64_t *_s14SearchFeedback24SessionFeedbackReferenceVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for SessionFeedbackReference(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

void *assignWithTake for SessionFeedbackReference(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

ValueMetadata *type metadata accessor for SessionFeedbackReference()
{
  return &type metadata for SessionFeedbackReference;
}

uint64_t sub_100155A7C(uint64_t a1)
{
  return String.hash(into:)(a1, v2, v1);
}

uint64_t sub_100155A88()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C180(v0, qword_1001EDFC0);
  sub_1000093D0(v0, (uint64_t)qword_1001EDFC0);
  return Logger.init(subsystem:category:)( 0xD000000000000011LL,  0x800000010016AB00LL,  0x465F636573726150LL,  0xEF6B636162646565LL);
}

ValueMetadata *type metadata accessor for SearchFeedbackError()
{
  return &type metadata for SearchFeedbackError;
}

double SessionBookmark.__allocating_init()()
{
  uint64_t v0 = sub_100156A58();
  uint64_t v3 = swift_allocObject(v0, v1, v2);
  double result = 0.0;
  *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = 0u;
  *(_OWORD *)(v3 + 3sub_1000108B8(v0 + 2) = 0u;
  *(_BYTE *)(v3 + sub_100019B20(v3, v1 + 48) = 1;
  return result;
}

uint64_t static SessionBookmark.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t result = (v4 | v5) == 0;
  if (v4 && v5)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v8 = *(void *)(a2 + 24);
    if (v7 == v8 && v4 == v5) {
      return 1LL;
    }
    else {
      return _stringCompareWithSmolCheck(_:_:expecting:)(v7, v4, v8, v5, 0LL);
    }
  }

  return result;
}

BOOL static SessionBookmark.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 40);
  double v3 = -1.0;
  if (*(_BYTE *)(a1 + 48)) {
    double v2 = -1.0;
  }
  if (!*(_BYTE *)(a2 + 48)) {
    double v3 = *(double *)(a2 + 40);
  }
  return v2 < v3;
}

uint64_t sub_100155BB8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x616D6B6F6F426D62LL && a2 == 0xEA00000000006B72LL;
  if (v2 || (sub_100027D54(0x616D6B6F6F426D62LL, 0xEA00000000006B72LL) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else
  {
    BOOL v6 = a1 == 0x496E6F6973736573LL && a2 == 0xE900000000000064LL;
    if (v6 || (sub_100027D54(0x496E6F6973736573LL, 0xE900000000000064LL) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1LL;
    }

    else if (a1 == 0x6D617473656D6974LL && a2 == 0xE900000000000070LL)
    {
      swift_bridgeObjectRelease();
      return 2LL;
    }

    else
    {
      char v8 = sub_100027D54(0x6D617473656D6974LL, 0xE900000000000070LL);
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0) {
        return 2LL;
      }
      else {
        return 3LL;
      }
    }
  }

void sub_100155CFC(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_10003DDD8(a1);
  Hasher._combine(_:)(v1);
  sub_10007AFDC();
  sub_10003DDCC();
}

uint64_t sub_100155D2C(char a1)
{
  if (!a1) {
    return 0x616D6B6F6F426D62LL;
  }
  if (a1 == 1) {
    return 0x496E6F6973736573LL;
  }
  return 0x6D617473656D6974LL;
}

void sub_100155D8C()
{
}

uint64_t sub_100155D94()
{
  return sub_100155D2C(*v0);
}

uint64_t sub_100155D9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100155BB8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100155DC0(uint64_t a1)
{
  unint64_t v2 = sub_100156168();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100155DE8(uint64_t a1)
{
  unint64_t v2 = sub_100156168();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100155E10(void *a1)
{
  uint64_t v1 = sub_100156878(a1);
  if (v2 >> 60 == 15)
  {
    unint64_t v3 = sub_1001568D8();
    uint64_t v4 = swift_allocError(&type metadata for SessionBookmarkError, v3, 0LL, 0LL);
    *uint64_t v5 = 1;
    swift_willThrow(v4);
  }

  return v1;
}

id sub_100155E88(uint64_t a1, unint64_t a2)
{
  id result = sub_100156808(a1, a2);
  if (!result)
  {
    unint64_t v5 = sub_1001568D8();
    uint64_t v6 = swift_allocError(&type metadata for SessionBookmarkError, v5, 0LL, 0LL);
    _BYTE *v7 = 0;
    return (id)swift_willThrow(v6);
  }

  return result;
}

double SessionBookmark.init()()
{
  double result = 0.0;
  *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 3sub_1000108B8(v0 + 2) = 0u;
  *(_BYTE *)(v0 + sub_100019B20(v3, v1 + 48) = 1;
  return result;
}

uint64_t SessionBookmark.__allocating_init(from:)(void *a1)
{
  uint64_t v2 = sub_100156A58();
  uint64_t v5 = swift_allocObject(v2, v3, v4);
  SessionBookmark.init(from:)(a1);
  return v5;
}

uint64_t SessionBookmark.init(from:)(void *a1)
{
  uint64_t v3 = sub_10000941C(&qword_1001DD7B0);
  __chkstk_darwin(v3);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100019AFC(a1, v4);
  unint64_t v6 = sub_100156168();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SessionBookmark.CodingKeys,  &type metadata for SessionBookmark.CodingKeys,  v6,  v4,  v5);
  if (v1)
  {
    uint64_t v9 = v16;
    uint64_t v7 = type metadata accessor for SessionBookmark();
    swift_deallocPartialClassInstance(v16, v7, 49LL);
  }

  else
  {
    char v17 = 0;
    sub_1000CF258();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v17, v3, &type metadata for Data);
    uint64_t v9 = v16;
    *(void *)(v16 + swift_weakDestroy(v0 + 16) = sub_100155E88(v18, v19);
    uint64_t v10 = sub_100156A40(1);
    *(void *)(v16 + swift_weakDestroy(v0 + 24) = KeyedDecodingContainer.decode(_:forKey:)(v10, v11);
    *(void *)(v16 + 3sub_1000108B8(v0 + 2) = v12;
    uint64_t v13 = sub_100156A40(2);
    KeyedDecodingContainer.decode(_:forKey:)(v13);
    uint64_t v15 = v14;
    sub_1000E66FC();
    sub_100156A34();
    *(void *)(v16 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = v15;
    *(_BYTE *)(v16 + sub_100019B20(v3, v1 + 48) = 0;
  }

  sub_1000108B8(a1);
  return v9;
}

unint64_t sub_100156168()
{
  unint64_t result = qword_1001DD7B8;
  if (!qword_1001DD7B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016A3B4, &type metadata for SessionBookmark.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DD7B8);
  }

  return result;
}

uint64_t type metadata accessor for SessionBookmark()
{
  return objc_opt_self(&OBJC_CLASS____TtC14SearchFeedback15SessionBookmark);
}

uint64_t sub_1001561C4(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v4 + swift_weakDestroy(v0 + 24) = a2;
  *(void *)(v4 + 3sub_1000108B8(v0 + 2) = a3;
  *(double *)(v4 + 4sub_10005B13C(v45, v42, v44, v43, v49, v47, v48, v46, 0) = a4;
  *(_BYTE *)(v4 + sub_100019B20(v3, v1 + 48) = 0;
  return v4;
}

void SessionBookmark.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000941C(&qword_1001DD7C0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void **)(v3 + 16);
  if (v10)
  {
    uint64_t v25 = v7;
    uint64_t v26 = v6;
    uint64_t v11 = a1[3];
    uint64_t v12 = a1[4];
    sub_100019AFC(a1, v11);
    unint64_t v13 = sub_100156168();
    id v14 = v10;
    dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SessionBookmark.CodingKeys,  &type metadata for SessionBookmark.CodingKeys,  v13,  v11,  v12);
    uint64_t v15 = sub_100155E10(v14);
    if (v2)
    {
      (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v26);
    }

    else
    {
      uint64_t v27 = v15;
      uint64_t v28 = v16;
      char v29 = 0;
      sub_10002D480();
      sub_100107C20((uint64_t)&v27, (uint64_t)&v29, v26);
      sub_1000F0F2C();
      uint64_t v17 = *(void *)(v3 + 32);
      uint64_t v27 = *(void *)(v3 + 24);
      uint64_t v28 = v17;
      char v29 = 1;
      swift_bridgeObjectRetain(v17);
      sub_10000941C(&qword_1001D4480);
      sub_100156400(&qword_1001DD7C8, &qword_1001D4480);
      uint64_t v18 = sub_10002FC98();
      sub_100107C20(v18, v19, v20);
      swift_bridgeObjectRelease();
      char v21 = *(_BYTE *)(v3 + 48);
      uint64_t v27 = *(void *)(v3 + 40);
      LOBYTE(v28) = v21;
      char v29 = 2;
      sub_10000941C(&qword_1001DABB8);
      sub_100156400(&qword_1001DD7D0, &qword_1001DABB8);
      uint64_t v22 = sub_10002FC98();
      sub_100107C20(v22, v23, v24);
      sub_100156A20();
    }
  }

uint64_t sub_100156400(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_1000094A0(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v4);
    atomic_store(result, a1);
  }

  return result;
}

void SessionBookmark.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 32);
  if (v3)
  {
    uint64_t v4 = *(void *)(v1 + 24);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v3);
    String.hash(into:)(a1, v4, v3);
    swift_bridgeObjectRelease(v3);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

uint64_t SessionBookmark.deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return v0;
}

uint64_t SessionBookmark.__deallocating_deinit()
{
  uint64_t v0 = sub_100156A58();
  return swift_deallocClassInstance(v0, v1, v2);
}

void SessionBookmark.hashValue.getter(uint64_t a1)
{
}

void sub_10015652C(uint64_t a1)
{
}

void sub_10015654C(uint64_t a1)
{
}

unint64_t sub_100156570()
{
  unint64_t result = qword_1001DD7D8;
  if (!qword_1001DD7D8)
  {
    uint64_t v1 = type metadata accessor for SessionBookmark();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SessionBookmark, v1);
    atomic_store(result, (unint64_t *)&qword_1001DD7D8);
  }

  return result;
}

Swift::Int sub_1001565AC(uint64_t a1)
{
  return Hasher._finalize()();
}

BOOL sub_1001565E8(uint64_t *a1, uint64_t *a2)
{
  return static SessionBookmark.< infix(_:_:)(*a1, *a2);
}

uint64_t sub_100156614@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = SessionBookmark.__allocating_init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

void sub_10015663C(void *a1)
{
}

uint64_t sub_10015665C(uint64_t *a1, uint64_t *a2)
{
  return static SessionBookmark.== infix(_:_:)(*a1, *a2) & 1;
}

uint64_t storeEnumTagSinglePayload for SessionBookmark.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = 1;
  }
  else {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1001566C8 + 4 * byte_10016A1A5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001566FC + 4 * byte_10016A1A0[v4]))();
}

uint64_t sub_1001566FC(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_100156704(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10015670CLL);
  }
  return result;
}

uint64_t sub_100156718(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100156720LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100156724(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_10015672C(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SessionBookmark.CodingKeys()
{
  return &type metadata for SessionBookmark.CodingKeys;
}

unint64_t sub_10015674C()
{
  unint64_t result = qword_1001DD8B8;
  if (!qword_1001DD8B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016A38C, &type metadata for SessionBookmark.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DD8B8);
  }

  return result;
}

unint64_t sub_10015678C()
{
  unint64_t result = qword_1001DD8C0;
  if (!qword_1001DD8C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016A2FC, &type metadata for SessionBookmark.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DD8C0);
  }

  return result;
}

unint64_t sub_1001567CC()
{
  unint64_t result = qword_1001DD8C8;
  if (!qword_1001DD8C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016A324, &type metadata for SessionBookmark.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001DD8C8);
  }

  return result;
}

id sub_100156808(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
    Class isa = 0LL;
  }

  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100010A1C(a1, a2);
  }

  id v6 = [v2 initWithProtoData:isa];

  return v6;
}

uint64_t sub_100156878(void *a1)
{
  id v1 = [a1 encodeAsProto];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

unint64_t sub_1001568D8()
{
  unint64_t result = qword_1001DD8D0;
  if (!qword_1001DD8D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016A490, &type metadata for SessionBookmarkError);
    atomic_store(result, (unint64_t *)&qword_1001DD8D0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for SessionBookmarkError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = 1;
  }
  else {
    LODWORD(sub_100127AE0(v1, v2, v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100156960 + 4 * byte_10016A1AF[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100156994 + 4 * byte_10016A1AA[v4]))();
}

uint64_t sub_100156994(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_10015699C(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1001569A4LL);
  }
  return result;
}

uint64_t sub_1001569B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001569B8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1001569BC(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1001569C4(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SessionBookmarkError()
{
  return &type metadata for SessionBookmarkError;
}

unint64_t sub_1001569E4()
{
  unint64_t result = qword_1001DD8D8;
  if (!qword_1001DD8D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016A468, &type metadata for SessionBookmarkError);
    atomic_store(result, (unint64_t *)&qword_1001DD8D8);
  }

  return result;
}

uint64_t sub_100156A20()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 112) + 8LL))(v1, v0);
}

uint64_t sub_100156A34()
{
  return sub_100010A30(v0, v1);
}

uint64_t sub_100156A40@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 - 9sub_10005B218(v0, v2, v1, 6) = a1;
  return v1 - 96;
}

uint64_t sub_100156A58()
{
  return v0;
}

uint64_t sub_100156A68()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C180(v0, qword_1001EDFD8);
  sub_1000093D0(v0, (uint64_t)qword_1001EDFD8);
  return Logger.init(subsystem:category:)( 0xD000000000000011LL,  0x800000010016AB00LL,  0x446E6F6973736553LL,  0xE900000000000042LL);
}

uint64_t WritableSessionDatabase.__allocating_init(fileManager:ledger:)(void *a1, void *a2)
{
  uint64_t v7 = 0LL;
  memset(v6, 0, sizeof(v6));
  uint64_t v4 = sub_100156B40(a1, v8, (uint64_t)v6);
  sub_1000108B8(a2);
  return v4;
}

uint64_t sub_100156B40(void *a1, void *a2, uint64_t a3)
{
  if (qword_1001DB910 != -1) {
    swift_once(&qword_1001DB910, sub_100156A68);
  }
  uint64_t v6 = sub_100010ED4();
  uint64_t v7 = (os_log_s *)sub_1000093D0(v6, (uint64_t)qword_1001EDFD8);
  Logger.logObject.getter(v7);
  os_log_type_t v8 = sub_10015827C();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)sub_100009B20(2LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Initializing Biome feedback store", v9, 2u);
    sub_100010C34((uint64_t)v9);
  }

  sub_100150780(a3, (uint64_t)v17);
  uint64_t v10 = type metadata accessor for BiomeDatabaseWriter();
  swift_allocObject(v10, 80LL, 7LL);
  id v11 = a1;
  uint64_t v12 = sub_10014E6B0((uint64_t)v11, (uint64_t)v17);
  sub_100019B20((uint64_t)a2, (uint64_t)v17);
  uint64_t v13 = type metadata accessor for WritableSessionDatabase();
  uint64_t v14 = swift_allocObject(v13, 112LL, 7LL);
  uint64_t v15 = sub_100157FF8((uint64_t)v12, v17, v14);

  sub_1001580BC(a3);
  sub_1000108B8(a2);
  return v15;
}

void WritableSessionDatabase.addSession(_:guid:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = v4[10];
  uint64_t v11 = v4[11];
  uint64_t v12 = (os_log_s *)sub_100019AFC(v4 + 7, v10);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 8))(a4, v10, v11) & 1) != 0)
  {
    uint64_t v13 = v5[12];
    swift_retain();
    sub_10005A624();
    if (sub_100155214(v13, v5, a2, a3))
    {
      if (qword_1001DB910 != -1) {
        swift_once(&qword_1001DB910, sub_100156A68);
      }
      uint64_t v14 = sub_100010ED4();
      sub_1000093D0(v14, (uint64_t)qword_1001EDFD8);
      uint64_t v15 = sub_1001581A4();
      Logger.logObject.getter(v15);
      os_log_type_t v16 = sub_100010EC4();
      if (sub_1000A2364(v16))
      {
        uint64_t v17 = (uint8_t *)sub_100009B20(12LL);
        uint64_t v18 = sub_100009B20(32LL);
        v27[0] = v18;
        *(_DWORD *)uint64_t v17 = 136315138;
        uint64_t v19 = sub_10005A624();
        sub_100158224(v19);
        sub_10015825C();
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v20, v21, v17 + 4);
        sub_10015818C();
        _os_log_impl( (void *)&_mh_execute_header,  v12,  (os_log_type_t)a4,  "Session with GUID %s is already added",  v17,  0xCu);
        swift_arrayDestroy(v18, 1LL);
        sub_100010C34(v18);
        sub_100010C34((uint64_t)v17);
      }

      else
      {

        sub_100158180();
      }

      swift_release();
    }

    else
    {
      uint64_t v22 = v5[5];
      uint64_t v23 = v5[6];
      sub_100019AFC(v5 + 2, v22);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8))(a1, a2, a3, a4, v22, v23);
      uint64_t v24 = *(os_unfair_lock_s **)(v13 + 16);
      os_unfair_lock_lock(v24);
      sub_1001581B4(v25);
      sub_10005A624();
      uint64_t v26 = swift_retain();
      sub_100157AE8(v26, a2, a3);
      swift_endAccess(v27);
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v24);
      swift_release();
    }
  }

  sub_1000144B0();
}

uint64_t WritableSessionDatabase.addFeedback(_:guid:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = v4[12];
  swift_retain();
  sub_10005A624();
  uint64_t v9 = sub_100155214(v8, v4, a2, a3);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = v4[5];
    uint64_t v12 = v4[6];
    sub_100019AFC(v4 + 2, v11);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v12 + 16))(a1, v10, v11, v12);
    sub_10001443C();
    return 1LL;
  }

  else
  {
    if (qword_1001DB910 != -1) {
      swift_once(&qword_1001DB910, sub_100156A68);
    }
    uint64_t v13 = sub_100010ED4();
    sub_1000093D0(v13, (uint64_t)qword_1001EDFD8);
    uint64_t v14 = sub_1001581A4();
    Logger.logObject.getter(v14);
    os_log_type_t v15 = sub_10015827C();
    if (sub_10003EFD0(v15))
    {
      os_log_type_t v16 = (_DWORD *)sub_100009B20(12LL);
      uint64_t v17 = sub_100009B20(32LL);
      uint64_t v25 = v17;
      *os_log_type_t v16 = 136315138;
      uint64_t v18 = sub_10005A624();
      sub_100158198(v18, v19, &v25);
      sub_100158248();
      sub_100158270(v20, v21);
      sub_10015818C();
      sub_1001581C8((void *)&_mh_execute_header, v22, v23, "Attempt to add feedback for missing session with GUID: %s");
      sub_100158204();
      sub_100010C34(v17);
      sub_100010C34((uint64_t)v16);
    }

    else
    {

      sub_100158180();
    }

    return 0LL;
  }

Swift::Bool __swiftcall WritableSessionDatabase.closeSession(guid:)(Swift::String guid)
{
  object = guid._object;
  uint64_t countAndFlagsBits = guid._countAndFlagsBits;
  uint64_t v4 = v1[12];
  swift_retain();
  sub_10005A624();
  uint64_t v5 = sub_100155214(v4, v1, countAndFlagsBits);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = v1[5];
    uint64_t v8 = v1[6];
    sub_100019AFC(v1 + 2, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v6, v7, v8);
    uint64_t v20 = *(os_unfair_lock_s **)(v4 + 16);
    os_unfair_lock_lock(v20);
    sub_1001581B4(v21);
    sub_10005A624();
    sub_100157978(countAndFlagsBits, (uint64_t)object);
    swift_endAccess(v23);
    swift_bridgeObjectRelease();
    swift_release();
    os_unfair_lock_unlock(v20);
    sub_10001443C();
  }

  else
  {
    if (qword_1001DB910 != -1) {
      swift_once(&qword_1001DB910, sub_100156A68);
    }
    uint64_t v9 = sub_100010ED4();
    sub_1000093D0(v9, (uint64_t)qword_1001EDFD8);
    uint64_t v10 = sub_1001581A4();
    Logger.logObject.getter(v10);
    os_log_type_t v11 = sub_10015827C();
    if (sub_10003EFD0(v11))
    {
      uint64_t v12 = (_DWORD *)sub_100009B20(12LL);
      uint64_t v13 = sub_100009B20(32LL);
      v23[0] = v13;
      *uint64_t v12 = 136315138;
      uint64_t v14 = sub_10005A624();
      sub_100158198(v14, v15, v23);
      sub_100158234();
      sub_100158270(v16, v17);
      sub_10015818C();
      sub_1001581C8((void *)&_mh_execute_header, v18, v19, "Attempt to close missing session with GUID: %s");
      sub_100158204();
      sub_100010C34(v13);
      sub_100010C34((uint64_t)v12);
    }

    else
    {

      sub_100158180();
    }
  }

  sub_1000144B0();
  return result;
}

uint64_t WritableSessionDatabase.deinit()
{
  return v0;
}

uint64_t WritableSessionDatabase.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

uint64_t sub_100157698()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144LL))() & 1;
}

uint64_t sub_1001576C4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152LL))() & 1;
}

BOOL sub_1001576F0(uint64_t a1, uint64_t a2)
{
  return WritableSessionDatabase.closeSession(guid:)(*(Swift::String *)&a1);
}

uint64_t sub_100157714@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain(*v1);
  unint64_t v4 = sub_10000EDAC();
  char v6 = v5;
  sub_10001460C();
  if ((v6 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    uint64_t v19 = *v2;
    uint64_t v8 = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    Swift::Int v9 = *(void *)(v8 + 24);
    sub_10000941C(&qword_1001DD9D8);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v9);
    uint64_t v10 = *(void *)(v19 + 48);
    uint64_t v11 = sub_1000A15C0();
    sub_10015828C(v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * v4, *(void *)(v11 - 8));
    uint64_t v12 = *(void *)(v19 + 56);
    uint64_t v13 = type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL);
    sub_10014B4A0(v12 + *(void *)(*(void *)(v13 - 8) + 72LL) * v4, a1);
    uint64_t v14 = sub_1001580FC((unint64_t *)&qword_1001D1108, (uint64_t)&protocol conformance descriptor for SessionType);
    sub_100158298(v4, v19, v15, v16, v14);
    *uint64_t v2 = v19;
    swift_bridgeObjectRelease();
    return sub_100009654(a1, 0LL, 1LL, v13);
  }

  else
  {
    uint64_t v18 = type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL);
    return sub_100009654(a1, 1LL, 1LL, v18);
  }

uint64_t sub_100157860()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRetain(*v0);
  unint64_t v2 = sub_10000EDAC();
  char v4 = v3;
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0) {
    return 0LL;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  uint64_t v15 = *v1;
  uint64_t v6 = *v1;
  *uint64_t v1 = 0x8000000000000000LL;
  Swift::Int v7 = *(void *)(v6 + 24);
  sub_10000941C(&qword_1001DD9D0);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v7);
  uint64_t v8 = *(void *)(v15 + 48);
  uint64_t v9 = sub_1000A15C0();
  sub_10015828C(v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * v2, *(void *)(v9 - 8));
  uint64_t v10 = *(void *)(*(void *)(v15 + 56) + 8 * v2);
  sub_10000941C(&qword_1001DB918);
  uint64_t v11 = sub_1001580FC((unint64_t *)&qword_1001D1108, (uint64_t)&protocol conformance descriptor for SessionType);
  sub_100158298(v2, v15, v12, v13, v11);
  *uint64_t v1 = v15;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100157978(uint64_t a1, uint64_t a2)
{
  char v3 = v2;
  swift_bridgeObjectRetain(*v3);
  unint64_t v6 = sub_10000EC64(a1, a2);
  LOBYTE(asub_1000108B8(v0 + 2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v14 = *v3;
  uint64_t v9 = *v3;
  void *v3 = 0x8000000000000000LL;
  Swift::Int v10 = *(void *)(v9 + 24);
  sub_10000941C(&qword_1001DD9C8);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(*(void *)(v14 + 56) + 8 * v6);
  uint64_t v12 = type metadata accessor for SessionFeedback(0LL);
  _NativeDictionary._delete(at:)(v6, v14, &type metadata for String, v12);
  void *v3 = v14;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_100157A80()
{
  uint64_t v1 = sub_100010D38();
  sub_100157B84(v1, v2, v3);
  uint64_t v4 = *v0;
  *uint64_t v0 = v6;
  return sub_100010D28(v4);
}

uint64_t sub_100157AB4()
{
  uint64_t v1 = sub_100010D38();
  sub_100157CF0(v1, v2, v3);
  uint64_t v4 = *v0;
  *uint64_t v0 = v6;
  return sub_100010D28(v4);
}

uint64_t sub_100157AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v9 = *v3;
  void *v3 = 0x8000000000000000LL;
  sub_100157E34(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  void *v3 = v9;
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for WritableSessionDatabase()
{
  return objc_opt_self(&OBJC_CLASS____TtC14SearchFeedback23WritableSessionDatabase);
}

uint64_t sub_100157B84(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for SessionType(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)*v3;
  unint64_t v13 = sub_10000EDAC();
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v18 = v13;
  char v19 = v14;
  sub_10000941C(&qword_1001DD9D8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_10000EDAC();
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v4;
  if ((v19 & 1) != 0)
  {
    uint64_t v23 = v22[7];
    uint64_t v24 = type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL);
    return sub_10015813C(a1, v23 + *(void *)(*(void *)(v24 - 8) + 72LL) * v18);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    return sub_100157F48(v18, (uint64_t)v11, a1, v22);
  }

void sub_100157CF0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for SessionType(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)*v3;
  unint64_t v13 = sub_10000EDAC();
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v18 = v13;
  char v19 = v14;
  sub_10000941C(&qword_1001DD9D0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_10000EDAC();
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }

  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v4;
  if ((v19 & 1) != 0)
  {
    uint64_t v23 = v22[7];

    *(void *)(v23 + 8 * v18) = a1;
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    sub_1000105BC(v18, (uint64_t)v11, a1, v22);
  }

void sub_100157E34(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v11 = sub_10000EC64(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v11;
  char v17 = v12;
  sub_10000941C(&qword_1001DD9C8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_10000EC64(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v16 = v18;
LABEL_5:
  unint64_t v20 = *v5;
  if ((v17 & 1) != 0)
  {
    uint64_t v21 = v20[7];
    swift_release();
    *(void *)(v21 + 8 * vswift_weakDestroy(v0 + 16) = a1;
  }

  else
  {
    sub_10010327C(v16, a2, a3, a1, v20);
    swift_bridgeObjectRetain(a3);
  }

uint64_t sub_100157F48(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for SessionType(0LL);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL);
  uint64_t result = sub_10014B4A0(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_100157FF8(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v12 = type metadata accessor for BiomeDatabaseWriter();
  uint64_t v13 = &protocol witness table for BiomeDatabaseWriter;
  *(void *)&__int128 v11 = a1;
  uint64_t v6 = type metadata accessor for Locker();
  uint64_t v7 = swift_allocObject(v6, 24LL, 7LL);
  uint64_t v8 = (_DWORD *)swift_slowAlloc(4LL, -1LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = 0;
  *(void *)(a3 + 9sub_10005B218(v0, v2, v1, 6) = v7;
  uint64_t v9 = type metadata accessor for SessionFeedback(0LL);
  *(void *)(a3 + 104) = Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  v9,  &protocol witness table for String);
  sub_100019BC4(&v11, a3 + 16);
  sub_100019BC4(a2, a3 + 56);
  return a3;
}

uint64_t sub_1001580BC(uint64_t a1)
{
  uint64_t v2 = sub_10000941C(&qword_1001DD0F8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1001580FC(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for SessionType(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10015813C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BiomeDatabaseReader.SessionProxy(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100158180()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_10015818C()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

uint64_t sub_100158198(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000307E0(v4, v3, a3);
}

uint64_t sub_1001581A4()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

uint64_t sub_1001581B4(uint64_t a1, ...)
{
  return swift_beginAccess(v1, va, 33LL, 0LL);
}

void sub_1001581C8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void sub_1001581DC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_1001581F0()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_100158204()
{
  return swift_arrayDestroy(v0, 1LL);
}

uint64_t sub_100158214()
{
  return swift_arrayDestroy(v0, 2LL);
}

uint64_t sub_100158224(uint64_t a1, ...)
{
  return sub_1000307E0(v2, v1, (uint64_t *)va);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100158270(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_10015827C()
{
  return static os_log_type_t.info.getter();
}

uint64_t sub_100158284(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_10015828C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, v2);
}

uint64_t sub_100158298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _NativeDictionary._delete(at:)(a1, a2, v5, v6, a5);
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_handleInvocation(void *a1, const char *a2, ...)
{
  return _[a1 handleInvocation];
}

id objc_msgSend_invoke(void *a1, const char *a2, ...)
{
  return _[a1 invoke];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_parsec_componentsWithURL_resolvingAgainstBaseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parsec_componentsWithURL:resolvingAgainstBaseURL:");
}

id objc_msgSend_parsec_filterObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parsec_filterObjectsUsingBlock:");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_query(void *a1, const char *a2, ...)
{
  return _[a1 query];
}

id objc_msgSend_queryItems(void *a1, const char *a2, ...)
{
  return _[a1 queryItems];
}

id objc_msgSend_setQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQuery:");
}

id objc_msgSend_setQueryItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryItems:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}