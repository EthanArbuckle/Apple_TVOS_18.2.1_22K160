_BYTE *sub_100006414(char a1)
{
  _BYTE *result;
  result = malloc(1uLL);
  *result = a1;
  return result;
}

uint64_t sub_100006440(unsigned __int8 *a1, int a2, unsigned __int8 a3)
{
  while (1)
  {
    int v3 = __ldaxr(a1);
    if (v3 != a2) {
      break;
    }
    if (!__stlxr(a3, a1)) {
      return 1LL;
    }
  }

  uint64_t result = 0LL;
  __clrex();
  return result;
}

uint64_t sub_10000646C(unsigned __int8 *a1, char a2)
{
  do
    unsigned __int8 v2 = __ldxr(a1);
  while (__stxr(v2 + a2, a1));
  return v2 & 1;
}

uint64_t sub_100006484(unsigned __int8 *a1, char a2)
{
  do
    unsigned __int8 v2 = __ldxr(a1);
  while (__stxr(v2 - a2, a1));
  return v2 & 1;
}

uint64_t sub_10000649C(unsigned __int8 *a1, unsigned __int8 a2)
{
  do
    unsigned __int8 v2 = __ldxr(a1);
  while (__stxr(a2, a1));
  return v2 & 1;
}

uint64_t sub_1000064B4(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *sub_1000064C0(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

void *sub_1000064C8(uint64_t a1)
{
  uint64_t result = malloc(8uLL);
  *uint64_t result = a1;
  return result;
}

uint64_t sub_1000064F0(unint64_t *a1, uint64_t a2, unint64_t a3)
{
  while (1)
  {
    unint64_t v3 = __ldaxr(a1);
    if (v3 != a2) {
      break;
    }
    if (!__stlxr(a3, a1)) {
      return 1LL;
    }
  }

  uint64_t result = 0LL;
  __clrex();
  return result;
}

unint64_t sub_100006518(unint64_t *a1, uint64_t a2)
{
  do
    unint64_t result = __ldxr(a1);
  while (__stxr(result + a2, a1));
  return result;
}

unint64_t sub_100006530(unint64_t *a1, uint64_t a2)
{
  do
    unint64_t result = __ldxr(a1);
  while (__stxr(result - a2, a1));
  return result;
}

unint64_t sub_100006548(unint64_t *a1, unint64_t a2)
{
  do
    unint64_t result = __ldxr(a1);
  while (__stxr(a2, a1));
  return result;
}

uint64_t sub_10000655C(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_100006564(void *result, uint64_t a2)
{
  *unint64_t result = a2;
  return result;
}

uint64_t sub_10000656C(unsigned __int8 *a1, unsigned __int8 a2, unsigned __int8 a3)
{
  while (1)
  {
    int v3 = __ldaxr(a1);
    if (v3 != a2) {
      break;
    }
    if (!__stlxr(a3, a1)) {
      return 1LL;
    }
  }

  uint64_t result = 0LL;
  __clrex();
  return result;
}

uint64_t sub_100006598(unsigned __int8 *a1, char a2)
{
  do
    signed __int8 v2 = __ldxr(a1);
  while (__stxr(v2 + a2, a1));
  return v2;
}

uint64_t sub_1000065B0(unsigned __int8 *a1, char a2)
{
  do
    signed __int8 v2 = __ldxr(a1);
  while (__stxr(v2 - a2, a1));
  return v2;
}

uint64_t sub_1000065C8(unsigned __int8 *a1, unsigned __int8 a2)
{
  do
    signed __int8 v2 = __ldxr(a1);
  while (__stxr(a2, a1));
  return v2;
}

uint64_t sub_1000065DC(char *a1)
{
  return *a1;
}

uint64_t sub_1000065E8(unsigned __int8 *a1, char a2)
{
  do
    uint64_t v2 = __ldxr(a1);
  while (__stxr(v2 + a2, a1));
  return v2;
}

uint64_t sub_100006600(unsigned __int8 *a1, char a2)
{
  do
    uint64_t v2 = __ldxr(a1);
  while (__stxr(v2 - a2, a1));
  return v2;
}

uint64_t sub_100006618(unsigned __int8 *a1, unsigned __int8 a2)
{
  do
    uint64_t v2 = __ldxr(a1);
  while (__stxr(a2, a1));
  return v2;
}

uint64_t sub_100006630(unsigned __int8 *a1)
{
  return *a1;
}

_WORD *sub_100006638(__int16 a1)
{
  uint64_t result = malloc(2uLL);
  *uint64_t result = a1;
  return result;
}

uint64_t sub_100006660(unsigned __int16 *a1, unsigned __int16 a2, unsigned __int16 a3)
{
  while (1)
  {
    int v3 = __ldaxr(a1);
    if (v3 != a2) {
      break;
    }
    if (!__stlxr(a3, a1)) {
      return 1LL;
    }
  }

  uint64_t result = 0LL;
  __clrex();
  return result;
}

uint64_t sub_10000668C(unsigned __int16 *a1, __int16 a2)
{
  do
    signed __int16 v2 = __ldxr(a1);
  while (__stxr(v2 + a2, a1));
  return v2;
}

uint64_t sub_1000066A4(unsigned __int16 *a1, __int16 a2)
{
  do
    signed __int16 v2 = __ldxr(a1);
  while (__stxr(v2 - a2, a1));
  return v2;
}

uint64_t sub_1000066BC(unsigned __int16 *a1, unsigned __int16 a2)
{
  do
    signed __int16 v2 = __ldxr(a1);
  while (__stxr(a2, a1));
  return v2;
}

uint64_t sub_1000066D0(__int16 *a1)
{
  return *a1;
}

_WORD *sub_1000066DC(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t sub_1000066E4(unsigned __int16 *a1, int a2, unsigned __int16 a3)
{
  while (1)
  {
    int v3 = __ldaxr(a1);
    if (v3 != a2) {
      break;
    }
    if (!__stlxr(a3, a1)) {
      return 1LL;
    }
  }

  uint64_t result = 0LL;
  __clrex();
  return result;
}

uint64_t sub_100006710(unsigned __int16 *a1, __int16 a2)
{
  do
    uint64_t v2 = __ldxr(a1);
  while (__stxr(v2 + a2, a1));
  return v2;
}

uint64_t sub_100006728(unsigned __int16 *a1, __int16 a2)
{
  do
    uint64_t v2 = __ldxr(a1);
  while (__stxr(v2 - a2, a1));
  return v2;
}

uint64_t sub_100006740(unsigned __int16 *a1, unsigned __int16 a2)
{
  do
    uint64_t v2 = __ldxr(a1);
  while (__stxr(a2, a1));
  return v2;
}

uint64_t sub_100006758(unsigned __int16 *a1)
{
  return *a1;
}

_DWORD *sub_100006760(int a1)
{
  uint64_t result = malloc(4uLL);
  *uint64_t result = a1;
  return result;
}

uint64_t sub_100006788(unsigned int *a1, int a2, unsigned int a3)
{
  while (1)
  {
    unsigned int v3 = __ldaxr(a1);
    if (v3 != a2) {
      break;
    }
    if (!__stlxr(a3, a1)) {
      return 1LL;
    }
  }

  uint64_t result = 0LL;
  __clrex();
  return result;
}

uint64_t sub_1000067B0(unsigned int *a1, int a2)
{
  do
    uint64_t v2 = __ldxr(a1);
  while (__stxr(v2 + a2, a1));
  return v2;
}

uint64_t sub_1000067C8(unsigned int *a1, int a2)
{
  do
    uint64_t v2 = __ldxr(a1);
  while (__stxr(v2 - a2, a1));
  return v2;
}

uint64_t sub_1000067E0(unsigned int *a1, unsigned int a2)
{
  do
    uint64_t result = __ldxr(a1);
  while (__stxr(a2, a1));
  return result;
}

uint64_t sub_1000067F4(unsigned int *a1)
{
  return *a1;
}

_DWORD *sub_1000067FC(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3 = sub_100009AC4();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = static os_signpost_type_t.begin.getter(v5);
  if (qword_1001D0548 != -1) {
    swift_once(&qword_1001D0548, sub_1000345E0);
  }
  uint64_t v9 = qword_1001EDCA8;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)(v8, &_mh_execute_header, v9, "daemonLifetime", 14LL, 2LL, v7);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v10 = objc_autoreleasePoolPush();
  uint64_t v11 = type metadata accessor for ServiceState();
  sub_100009ACC(v11, 48LL);
  sub_10000695C();
  objc_autoreleasePoolPop(v10);
  dispatch_main();
}

void sub_10000695C()
{
  uint64_t v3 = v0;
  uint64_t v4 = sub_100009AC4();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100009B6C();
  v3[5] = 0LL;
  uint64_t v7 = static os_signpost_type_t.begin.getter(v6);
  if (qword_1001D0548 != -1) {
    swift_once(&qword_1001D0548, sub_1000345E0);
  }
  uint64_t v8 = qword_1001EDCA8;
  sub_100009A98();
  sub_100009BD0(v7, (uint64_t)&_mh_execute_header, v8, (uint64_t)"launch", 6LL);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v4);
  signal(15, (void (__cdecl *)(int))sub_100006C64);
  signal(2, (void (__cdecl *)(int))sub_100006C78);
  uint64_t v9 = (void (**)(void, uint64_t))[objc_allocWithZone((Class)type metadata accessor for ParsecService()) init];
  v3[2] = v9;
  sub_100009B34((uint64_t)v9, (unint64_t *)&unk_1001D0BF0, &OBJC_CLASS___NSXPCListener_ptr);
  id v10 = sub_100006C7C(0xD000000000000011LL, 0x800000010016AB00LL);
  v3[3] = v10;
  [v10 setDelegate:v9];
  [v10 activate];
  uint64_t v11 = sub_100006CEC();
  v3[4] = v11;
  sub_100009B34((uint64_t)v11, (unint64_t *)&qword_1001D43D0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v28 = static OS_dispatch_queue.main.getter();
  v29[4] = sub_100009780;
  v29[5] = v3;
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 1107296256LL;
  uint64_t v12 = sub_100009BBC((uint64_t)sub_1000BCFEC);
  swift_retain(v3);
  swift_release();
  uint64_t v13 = sub_100009BA4();
  v27[2] = v27;
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_100009AEC();
  uint64_t v17 = v16 - v15;
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v19 = sub_100009C54();
  v27[1] = v27;
  sub_100009B84();
  __chkstk_darwin(v20);
  sub_100009AD4();
  v29[0] = &_swiftEmptyArrayStorage;
  sub_100008FF4((unint64_t *)&qword_1001D2B80, v21);
  uint64_t v23 = v22;
  uint64_t v24 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
  unint64_t v25 = sub_10000945C();
  dispatch thunk of SetAlgebra.init<A>(_:)(v29, v24, v25, v19, v23);
  v26 = (void *)v28;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v2, v12);
  _Block_release(v12);

  v9[1](v2, v19);
  sub_100009BC8(v17, *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
  sub_100009AA0();
}

void sub_100006C68()
{
}

id sub_100006C7C(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithMachServiceName:v5];

  return v6;
}

void **sub_100006CEC()
{
  uint64_t v2 = sub_100009AC4();
  sub_100009B84();
  __chkstk_darwin(v3);
  sub_100009B54();
  uint64_t v4 = static os_signpost_type_t.begin.getter();
  if (qword_1001D0548 != -1) {
    swift_once(&qword_1001D0548, sub_1000345E0);
  }
  uint64_t v5 = qword_1001EDCA8;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v4, &_mh_execute_header, v5, "setupSigHandlers", 16LL, 2LL, v1);
  v45 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  uint64_t v6 = sub_100009BC8(v1, v45);
  sub_100009B34(v6, &qword_1001D43E0, &OBJC_CLASS___OS_dispatch_source_ptr);
  uint64_t v46 = static OS_dispatch_source.makeSignalSource(signal:queue:)(2LL, 0LL);
  uint64_t v42 = static OS_dispatch_source.makeSignalSource(signal:queue:)(15LL, 0LL);
  uint64_t ObjectType = swift_getObjectType(v46);
  v49 = sub_1000071D0;
  uint64_t v50 = 0LL;
  v47 = _NSConcreteStackBlock;
  uint64_t v48 = 1107296256LL;
  uint64_t v8 = sub_100009C04((uint64_t)&unk_1001B0CC0);
  uint64_t v9 = sub_100009BA4();
  v37 = &v36;
  uint64_t v38 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v44 = v2;
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v9);
  unint64_t v40 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v13 = (char *)&v36 - v40;
  static DispatchQoS.unspecified.getter(v12);
  uint64_t v14 = sub_100009C54();
  uint64_t v36 = (uint64_t)&v36;
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v43 = v1;
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14);
  unint64_t v39 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v17 = (char *)&v36 - v39;
  uint64_t v41 = ObjectType;
  sub_1000071E4();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v13, v17, v8, ObjectType);
  _Block_release(v8);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v15 + 8);
  v18(v17, v14);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v13, v9);
  uint64_t v20 = v42;
  uint64_t v21 = swift_getObjectType(v42);
  v49 = sub_100007278;
  uint64_t v50 = 0LL;
  v47 = _NSConcreteStackBlock;
  uint64_t v48 = 1107296256LL;
  uint64_t v22 = sub_100009C04((uint64_t)&unk_1001B0CE8);
  v37 = &v36;
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v36 - v40;
  uint64_t v25 = static DispatchQoS.unspecified.getter(v23);
  __chkstk_darwin(v25);
  v26 = (char *)&v36 - v39;
  sub_1000071E4();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v24, v26, v22, v21);
  _Block_release(v22);
  v18(v26, v14);
  v19(v24, v38);
  uint64_t v27 = v46;
  OS_dispatch_source.resume()();
  OS_dispatch_source.resume()();
  uint64_t v28 = sub_10000941C((uint64_t *)&unk_1001D0C00);
  uint64_t v29 = sub_100009ACC(v28, 48LL);
  *(_OWORD *)(v29 + 16) = xmmword_10015C7E0;
  *(void *)(v29 + 32) = v27;
  *(void *)(v29 + 40) = v20;
  v47 = (void **)v29;
  uint64_t v30 = specialized Array._endMutation()();
  v31 = v47;
  uint64_t v32 = static os_signpost_type_t.end.getter(v30);
  uint64_t v33 = qword_1001EDCA8;
  uint64_t v34 = v43;
  sub_100009A98();
  sub_100009A6C(v32, (uint64_t)&_mh_execute_header, v33, (uint64_t)"setupSigHandlers", 16LL);
  v45(v34, v44);
  return v31;
}

uint64_t sub_1000070BC()
{
  uint64_t v0 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = (void (__cdecl *)(int))SIG_IGN.getter(v2);
  uint64_t v6 = signal(15, v5);
  uint64_t v7 = (void (__cdecl *)(int))SIG_IGN.getter(v6);
  signal(2, v7);
  uint64_t v8 = objc_autoreleasePoolPush();
  sub_100007858();
  objc_autoreleasePoolPop(v8);
  uint64_t v10 = static os_signpost_type_t.end.getter(v9);
  if (qword_1001D0548 != -1) {
    swift_once(&qword_1001D0548, sub_1000345E0);
  }
  uint64_t v11 = qword_1001EDCA8;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v10, &_mh_execute_header, v11, "launch", 6LL, 2LL);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

void sub_1000071D0()
{
}

uint64_t sub_1000071E4()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = &_swiftEmptyArrayStorage;
  sub_100008FF4( (unint64_t *)&qword_1001D2B80,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v2 = v1;
  uint64_t v3 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
  unint64_t v4 = sub_10000945C();
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v6, v3, v4, v0, v2);
}

void sub_100007278()
{
}

void sub_10000728C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100009AC4();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100009B6C();
  sub_100009B34(v9, (unint64_t *)&qword_1001D1080, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v10 = (void *)static OS_os_log.default.getter();
  uint64_t v11 = static os_log_type_t.debug.getter();
  os_log(_:dso:log:type:_:)(a1, a2, 2LL, &_mh_execute_header, v10, v11, &_swiftEmptyArrayStorage);

  uint64_t v12 = static os_signpost_type_t.end.getter();
  if (qword_1001D0548 != -1) {
    swift_once(&qword_1001D0548, sub_1000345E0);
  }
  uint64_t v13 = qword_1001EDCA8;
  uint64_t v14 = sub_10000941C(&qword_1001D0C10);
  uint64_t v15 = sub_100009ACC(v14, 72LL);
  *(_OWORD *)(v15 + 16) = xmmword_10015C7F0;
  *(void *)(v15 + 56) = &type metadata for UInt;
  *(void *)(v15 + 64) = &protocol witness table for UInt;
  *(void *)(v15 + 32) = a3;
  sub_100009A98();
  sub_100009BD0(v12, (uint64_t)&_mh_execute_header, v13, (uint64_t)"daemonLifetime", 14LL);
  swift_bridgeObjectRelease(v15);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v3, v7);
  exit(0);
}

void sub_100007400()
{
  uint64_t v3 = v2 - v1;
  uint64_t v4 = sub_100009AC4();
  __chkstk_darwin(v4);
  uint64_t v5 = sub_100009A78();
  if (qword_1001D0548 != -1) {
    swift_once(&qword_1001D0548, sub_1000345E0);
  }
  uint64_t v6 = qword_1001EDCA8;
  sub_100009A98();
  sub_100009A6C(v5, (uint64_t)&_mh_execute_header, v6, (uint64_t)"setupEnvironment", 16LL);
  sub_100009B28();
  uint64_t v7 = dispatch_group_create();
  dispatch_group_enter(v7);
  uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
  id v9 = [v8 standardUserDefaults];
  sub_100033160();

  id v10 = [v8 standardUserDefaults];
  uint64_t v11 = sub_10000941C(&qword_1001D10D0);
  uint64_t inited = swift_initStackObject(v11, &v27);
  *(_OWORD *)(inited + 16) = xmmword_10015C800;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"PARSessionMaxAge");
  *(void *)(inited + 40) = v13;
  *(void *)(inited + 72) = &type metadata for UInt32;
  *(_DWORD *)(inited + 48) = 172800;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"PARSessionSoftLimitOverride");
  *(void *)(inited + 88) = v14;
  *(void *)(inited + 120) = &type metadata for Int64;
  *(void *)(inited + 96) = 600LL;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"PARSessionIdleTimeOverride");
  *(void *)(inited + 136) = v15;
  *(void *)(inited + 168) = &type metadata for Int64;
  *(void *)(inited + 144) = 180LL;
  uint64_t v16 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v16);
  [v10 registerDefaults:isa];

  uint64_t v18 = static os_signpost_type_t.begin.getter();
  uint64_t v19 = qword_1001EDCA8;
  sub_100009A98();
  sub_100009A6C(v18, (uint64_t)&_mh_execute_header, v19, (uint64_t)"setupCaches", 11LL);
  uint64_t v20 = sub_100009B28();
  static TaskPriority.userInitiated.getter(v20);
  uint64_t v21 = type metadata accessor for TaskPriority(0LL);
  sub_100009654(v3, 0LL, 1LL, v21);
  uint64_t v22 = (void *)sub_100009ACC((uint64_t)&unk_1001B0C80, 40LL);
  v22[2] = 0LL;
  v22[3] = 0LL;
  v22[4] = v7;
  v7;
  sub_1000C06B4(v3, (uint64_t)&unk_1001D0BE8, (uint64_t)v22);
  swift_release(v23);
  uint64_t v24 = sub_100009740(v3);
  uint64_t v25 = static os_signpost_type_t.end.getter(v24);
  uint64_t v26 = qword_1001EDCA8;
  sub_100009A98();
  sub_100009A6C(v25, (uint64_t)&_mh_execute_header, v26, (uint64_t)"setupEnvironment", 16LL);
  sub_100009B28();
  sub_100009AA0();
}

uint64_t sub_100007700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for OSSignpostID(0LL);
  v4[3] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[4] = v6;
  v4[5] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100007760, 0LL, 0LL);
}

uint64_t sub_100007760()
{
  uint64_t v1 = *(dispatch_group_s **)(v0 + 16);
  id v2 = [(id)objc_opt_self(NSFileManager) defaultManager];
  NSFileManager.createRequiredCacheSubdirectories()();

  dispatch_group_leave(v1);
  uint64_t v4 = static os_signpost_type_t.end.getter(v3);
  if (qword_1001D0548 != -1) {
    swift_once(&qword_1001D0548, sub_1000345E0);
  }
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v8 = qword_1001EDCA8;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v4, &_mh_execute_header, v8, "setupCaches", 11LL, 2LL);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100007858()
{
  if (qword_1001D0548 != -1) {
    swift_once(&qword_1001D0548, sub_1000345E0);
  }
  sub_100009A98();
  uint64_t v2 = sub_100009BDC();
  sub_100009A6C(v2, v3, v4, v5, 5LL);
  sub_100009AB8();
  sub_100007400();
  uint64_t v7 = v6;
  sub_100007954();
  uint64_t v9 = v8;
  sub_100007CF8(v8);
  sub_100008244();
  *(void *)(v0 + 40) = v9;
  swift_retain(v9);
  swift_release();
  OS_dispatch_group.wait()();

  uint64_t v10 = swift_release();
  static os_signpost_type_t.end.getter(v10);
  sub_100009A98();
  uint64_t v11 = sub_100009BF0();
  sub_100009A6C(v11, v12, v13, v14, 5LL);
  sub_100009AB8();
  sub_100009AA0();
}

void sub_100007954()
{
  uint64_t v3 = v0;
  uint64_t v4 = sub_100009AC4();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100009AD4();
  uint64_t v7 = static os_signpost_type_t.begin.getter(v6);
  if (qword_1001D0550 != -1) {
    swift_once(&qword_1001D0550, sub_100034630);
  }
  uint64_t v8 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  sub_100009BAC(v7, (uint64_t)&_mh_execute_header, v8, (uint64_t)"main");
  uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v34(v2, v4);
  uint64_t v9 = type metadata accessor for Assembly();
  sub_100009ACC(v9, 376LL);
  uint64_t v10 = sub_100048CAC();
  uint64_t v11 = *(void *)(*(void *)(v3 + 16) + OBJC_IVAR____TtC7parsecd13ParsecService__assembly);
  uint64_t v12 = sub_100009ACC((uint64_t)&unk_1001B0C30, 32LL);
  *(void *)(v12 + 24) = &off_1001B3A58;
  swift_unknownObjectWeakInit(v12 + 16, v10);
  swift_retain(v10);
  swift_retain(v11);
  sub_100008484((uint64_t)sub_10000940C, v12);
  swift_release();
  swift_release();
  swift_release();
  sub_1000478B0();
  sub_1000C20C4(0x7473726966206E6FLL, 0xED000064616F6C20LL);
  swift_unknownObjectRelease();
  swift_weakInit(v36, v10);
  sub_1000348EC();
  swift_weakDestroy(v36);
  uint64_t v33 = v10[31];
  v36[4] = sub_100009414;
  v36[5] = v10;
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 1107296256LL;
  uint64_t v13 = sub_100009BBC((uint64_t)sub_1000D2F18);
  uint64_t v30 = sub_100009BA4();
  v31 = v29;
  uint64_t v14 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  sub_100009AEC();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = swift_retain(v10);
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v19 = sub_100009C54();
  v29[1] = v29;
  uint64_t v32 = v4;
  sub_100009B84();
  __chkstk_darwin(v20);
  sub_100009B54();
  v35 = &_swiftEmptyArrayStorage;
  sub_100008FF4((unint64_t *)&qword_1001D2B80, v21);
  uint64_t v23 = v22;
  uint64_t v24 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
  unint64_t v25 = sub_10000945C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v24, v25, v19, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v1, v13);
  _Block_release(v13);
  sub_100009BC8(v1, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v17, v30);
  uint64_t v26 = swift_release();
  uint64_t v27 = static os_signpost_type_t.end.getter(v26);
  uint64_t v28 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  sub_100009BAC(v27, (uint64_t)&_mh_execute_header, v28, (uint64_t)"main");
  v34(v2, v32);
  sub_100009AA0();
}

void sub_100007C9C()
{
  id v0 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  [v0 postNotificationName:@"PARStartup" object:0];
}

uint64_t sub_100007CF8(uint64_t a1)
{
  uint64_t v31 = a1;
  uint64_t v2 = sub_100009AC4();
  __chkstk_darwin(v2);
  uint64_t v3 = sub_100009A78();
  if (qword_1001D0548 != -1) {
    swift_once(&qword_1001D0548, sub_1000345E0);
  }
  uint64_t v4 = qword_1001EDCA8;
  sub_100009A98();
  sub_100009A6C(v3, (uint64_t)&_mh_execute_header, v4, (uint64_t)"setupXPCStreamHandler", 21LL);
  uint64_t v5 = sub_100009AB8();
  sub_100009B34(v5, (unint64_t *)&qword_1001D43D0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  sub_100009BA4();
  sub_100009B94();
  __chkstk_darwin(v6);
  sub_100009AD4();
  static DispatchQoS.default.getter(v7);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  sub_100009B94();
  __chkstk_darwin(v9);
  sub_100009AEC();
  uint64_t v12 = v11 - v10;
  uint64_t v32 = 0LL;
  sub_100008FF4((unint64_t *)&qword_1001D0BB0, v13);
  dispatch thunk of OptionSet.init(rawValue:)(&v32, v8, v14);
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void))(v18 + 104))( v17,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  uint64_t v19 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001BLL,  0x800000010016A9B0LL,  v1,  v12,  v17,  0LL);
  uint64_t v20 = (const char *)kNSURLSessionLaunchOnDemandNotificationName;
  uint64_t v34 = _CPStartNetworkSearchFeedback.redactUnused();
  uint64_t v35 = 0LL;
  uint64_t v32 = _NSConcreteStackBlock;
  uint64_t v33 = 1107296256LL;
  uint64_t v21 = sub_100009C1C((uint64_t)&unk_1001B0BA8);
  uint64_t v22 = v19;
  xpc_set_event_stream_handler(v20, v22, v21);
  _Block_release(v21);

  uint64_t v23 = sub_100009ACC((uint64_t)&unk_1001B0BE0, 24LL);
  swift_weakInit(v23 + 16, v31);
  uint64_t v34 = sub_1000093C8;
  uint64_t v35 = v23;
  uint64_t v32 = _NSConcreteStackBlock;
  uint64_t v33 = 1107296256LL;
  uint64_t v24 = sub_100009C1C((uint64_t)&unk_1001B0BF8);
  unint64_t v25 = v22;
  swift_release();
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v25, v24);
  _Block_release(v24);

  uint64_t v27 = static os_signpost_type_t.end.getter(v26);
  uint64_t v28 = qword_1001EDCA8;
  sub_100009A98();
  sub_100009A6C(v27, (uint64_t)&_mh_execute_header, v28, (uint64_t)"setupXPCStreamHandler", 21LL);
  return sub_100009AB8();
}

uint64_t sub_10000801C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_100008064(void *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v14, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = (const char *)XPC_EVENT_KEY_NAME.getter();
    string = xpc_dictionary_get_string(a1, v5);
    if (string)
    {
      uint64_t v7 = string;
      if (!strcmp("com.apple.proactive.queries.clearData", string))
      {
        if (qword_1001D0530 != -1) {
          swift_once(&qword_1001D0530, sub_1000344F0);
        }
        uint64_t v9 = type metadata accessor for Logger(0LL);
        uint64_t v10 = sub_1000093D0(v9, (uint64_t)qword_1001EDC60);
        uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
        os_log_type_t v12 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v11, v12))
        {
          uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v13 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "Received com.apple.proactive.queries.clearData notification: Clearing Spotlight engagement cache",  v13,  2u);
          swift_slowDealloc(v13, -1LL, -1LL);
        }

        if (!sub_100047900()) {
          return swift_release();
        }
        sub_10001FA2C(2u);
      }

      else if (!strcmp("com.apple.parsecd.queries.clearData", v7))
      {
        sub_100047A50();
        sub_1000D176C();
      }

      else
      {
        if (strcmp("com.apple.purplebuddy.setupexited", v7)) {
          return swift_release();
        }
        sub_1000478B0();
        char v8 = sub_1000C15D4();
        swift_unknownObjectRelease();
        if ((v8 & 1) == 0) {
          return swift_release();
        }
        sub_1000478B0();
        sub_1000C20C4(0xD000000000000016LL, 0x800000010016AAA0LL);
      }

      swift_unknownObjectRelease();
    }

    return swift_release();
  }

  return result;
}

void sub_100008244()
{
  if (qword_1001D0548 != -1) {
    swift_once(&qword_1001D0548, sub_1000345E0);
  }
  sub_100009A98();
  uint64_t v1 = sub_100009BDC();
  sub_100009A6C(v1, v2, v3, v4, 15LL);
  sub_100009AB8();
  type metadata accessor for FlusherClient();
  id v5 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  id v6 = [(id)objc_opt_self(NSFileManager) defaultManager];
  sub_100047AA0();
  sub_1000BD018(v5, v6, v7, v8);

  uint64_t v9 = swift_bridgeObjectRelease();
  static os_signpost_type_t.end.getter(v9);
  sub_100009A98();
  uint64_t v10 = sub_100009BF0();
  sub_100009A6C(v10, v11, v12, v13, 15LL);
  sub_100009AB8();
  sub_100009AA0();
}

uint64_t sub_100008384()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  return v0;
}

uint64_t sub_1000083B8()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t sub_1000083D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v3++;
      uint64_t v4 = v5;
      if ((v5 & ~v2) == 0) {
        uint64_t v4 = 0LL;
      }
      v2 |= v4;
      --v1;
    }

    while (v1);
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  swift_bridgeObjectRelease(a1);
  return v2;
}

void variable initialization expression of AtomicValue.lock()
{
  uint64_t v0 = type metadata accessor for Lock();
  sub_100009ACC(v0, 24LL);
  Lock.init()();
  sub_100009A90();
}

uint64_t type metadata accessor for ServiceState()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd12ServiceState);
}

uint64_t variable initialization expression of Lock.mutex()
{
  return sub_100009B20(64LL);
}

uint64_t variable initialization expression of ConditionLock.cond()
{
  return sub_100009B20(48LL);
}

uint64_t sub_100008484(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(os_unfair_lock_s **)(v2 + 16);
  uint64_t v6 = (uint64_t)&v5[4];
  uint64_t v7 = v5 + 9;
  os_unfair_lock_lock(v5 + 9);
  sub_100009618(v6, a1, a2, &v9);
  os_unfair_lock_unlock(v7);
  return v9;
}

uint64_t sub_1000084EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 16);
  if ((v3 & 1) == 0)
  {
    uint64_t v5 = *(dispatch_group_s **)a1;
    uint64_t v4 = *(void **)(a1 + 8);
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = a3;
    *(_BYTE *)(a1 + 16) = 1;
    swift_retain(a3);
    dispatch_group_leave(v5);
    sub_100009644(v5, v4, 0);
  }

  return v3 ^ 1u;
}

id variable initialization expression of SessionFilename.processID()
{
  id v0 = [(id)objc_opt_self(NSProcessInfo) processInfo];
  id v1 = [v0 processIdentifier];

  return v1;
}

uint64_t static AvroPrimitiveSchema.null.getter()
{
  return 0LL;
}

void type metadata accessor for PAREnabledStatus(uint64_t a1)
{
}

__n128 sub_1000085C8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1000085DC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000085FC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for _opaque_pthread_cond_t(uint64_t a1)
{
}

__n128 initializeWithTake for AvroRecord(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_10000865C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000867C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for _opaque_pthread_mutex_t(uint64_t a1)
{
}

void type metadata accessor for _TimingDataOptions(uint64_t a1)
{
}

void type metadata accessor for CLAuthorizationStatus(uint64_t a1)
{
}

void type metadata accessor for TRIDeploymentEnvironment(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for NotificationBarrier.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

void *sub_100008738(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xD0uLL);
}

uint64_t sub_100008740(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 208)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100008760(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 200) = 0LL;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 208) = v3;
  return result;
}

void type metadata accessor for CC_SHA512state_st(uint64_t a1)
{
}

void type metadata accessor for compression_status(uint64_t a1)
{
}

__n128 initializeWithTake for ByteBufferView(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1000087FC(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 == 1 || !*(_BYTE *)(a1 + 40))
    {
      if (*(void *)a1) {
        int v2 = -1;
      }
      else {
        int v2 = 0;
      }
    }

    else
    {
      int v2 = *(_DWORD *)a1 + 1;
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100008838(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 2;
    if (a3 >= 2) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if (a3 >= 2) {
      *(_BYTE *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)__n128 result = 0LL;
    }
  }

  return result;
}

void type metadata accessor for compression_stream(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for _CPKnownFeedbackType(uint64_t a1)
{
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

void sub_1000088F8()
{
}

uint64_t sub_100008918(uint64_t a1, id *a2)
{
  return sub_100009984(a1, a2);
}

uint64_t sub_10000892C(uint64_t a1, id *a2)
{
  return sub_100009914(a1, a2) & 1;
}

uint64_t sub_100008944(uint64_t a1, uint64_t a2)
{
  return a2 | a1;
}

uint64_t sub_10000894C(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

uint64_t sub_100008954(uint64_t a1, uint64_t a2)
{
  return a2 ^ a1;
}

BOOL sub_10000895C(void *a1, uint64_t a2)
{
  uint64_t v3 = *v2 & a2;
  if (v3 != a2) {
    *v2 |= a2;
  }
  *a1 = a2;
  return v3 != a2;
}

uint64_t sub_100008988(uint64_t a1)
{
  uint64_t result = *v1 & a1;
  if (result) {
    *v1 &= ~a1;
  }
  return result;
}

uint64_t sub_1000089AC(uint64_t a1)
{
  uint64_t v2 = *v1;
  *v1 |= a1;
  return v2 & a1;
}

uint64_t sub_1000089C4(uint64_t result)
{
  *v1 |= result;
  return result;
}

uint64_t sub_1000089D4(uint64_t result)
{
  *v1 &= result;
  return result;
}

uint64_t sub_1000089E4(uint64_t result)
{
  *v1 ^= result;
  return result;
}

uint64_t sub_1000089F4(uint64_t a1, uint64_t a2)
{
  return a2 & ~a1;
}

BOOL sub_1000089FC(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_100008A08(uint64_t a1, uint64_t a2)
{
  return (a2 & a1) == 0;
}

BOOL sub_100008A14(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

BOOL sub_100008A20(uint64_t a1)
{
  return a1 == 0;
}

uint64_t sub_100008A2C(uint64_t result)
{
  *v1 &= ~result;
  return result;
}

_DWORD *sub_100008A3C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

BOOL sub_100008A4C(int *a1, int *a2)
{
  return sub_10007E4E8(*a1, *a2);
}

void *sub_100008A58@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100008A64@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100008AB4(*a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

void sub_100008A94()
{
  _DWORD *v0 = v1;
  sub_100009A90();
}

uint64_t sub_100008AB4(uint64_t result)
{
  return result;
}

void sub_100008AD0(void *a1@<X8>)
{
  *a1 = variable initialization expression of SQLiteBaseFunction.database();
  sub_100009A90();
}

uint64_t sub_100008AF0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100008944(*a1, *v2);
  *a2 = result;
  return result;
}

void sub_100008B1C(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = sub_10000894C(*a1, *v2);
  sub_100009A90();
}

uint64_t sub_100008B44@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100008954(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_100008B70(void *a1, uint64_t *a2)
{
  return sub_10000895C(a1, *a2);
}

uint64_t sub_100008B78@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100008988(*a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_100008BA8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000089AC(*a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_100008BD8(uint64_t *a1)
{
  return sub_1000089C4(*a1);
}

uint64_t sub_100008BE0(uint64_t *a1)
{
  return sub_1000089D4(*a1);
}

uint64_t sub_100008BE8(uint64_t *a1)
{
  return sub_1000089E4(*a1);
}

uint64_t sub_100008BF0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000089F4(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_100008C1C(uint64_t *a1)
{
  return sub_1000089FC(*a1, *v1);
}

BOOL sub_100008C28(uint64_t *a1)
{
  return sub_100008A08(*a1, *v1);
}

BOOL sub_100008C34(uint64_t *a1)
{
  return sub_100008A14(*a1, *v1);
}

BOOL sub_100008C40()
{
  return sub_100008A20(*v0);
}

uint64_t sub_100008C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100008C60(uint64_t *a1)
{
  return sub_100008A2C(*a1);
}

void sub_100008C68(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  a2(v3);
  sub_100009B3C();
  sub_100009A90();
}

uint64_t sub_100008C98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100009C34(a1, a2);
  String.hash(into:)(v2, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_100008CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100009C34(a1, a2);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, v2);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v6;
}

void sub_100008D38(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = v3;
}

void sub_100008D5C()
{
}

uint64_t sub_100008D7C(uint64_t a1)
{
  return sub_100008C98(a1, *v1);
}

Swift::Int sub_100008D94(uint64_t a1)
{
  return sub_100008CD0(a1, *v1);
}

BOOL sub_100008DAC(uint64_t *a1, uint64_t *a2)
{
  return static SQLiteViewProvider.== infix(_:_:)(*a1, *a2);
}

void sub_100008DB8()
{
  void *v0 = v1;
  sub_100009A90();
}

void sub_100008DD8(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100008DE4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000083D8(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100008E08(void *a1, void *a2)
{
  return sub_10007E4F4(*a1, *a2);
}

void sub_100008E14(uint64_t a1@<X8>)
{
  *(void *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3 & 1;
}

  ;
}

uint64_t sub_100008E50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100008E78(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_100008FF4((unint64_t *)&unk_1001D0C70, (uint64_t (*)(uint64_t))type metadata accessor for Name);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

void *sub_100008EFC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_100008F0C(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100008F18(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_100008FF4( (unint64_t *)&unk_1001D0BA0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

void sub_100008F9C()
{
}

void sub_100008FC8()
{
}

void sub_100008FF4(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v3 = sub_100009C28(0LL, a2);
    atomic_store(sub_100009C10(v3), a1);
  }

  sub_100009A90();
}

uint64_t sub_100009020(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_100008FF4(&qword_1001D0B90, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

void sub_1000090A4()
{
}

void sub_1000090D0()
{
}

uint64_t sub_1000090FC@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = sub_100009B3C();
  *a1 = v2;
  return result;
}

void sub_10000913C()
{
  uint64_t v1 = sub_100009C5C();
  void *v0 = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(v1);
  v0[1] = v2;
  sub_100009A90();
}

uint64_t sub_100009160(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_100008FF4(&qword_1001D0B80, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_1000091E4(uint64_t a1)
{
  return sub_100009568(a1, *v1);
}

Swift::Int sub_1000091EC(uint64_t a1)
{
  return sub_1000095A8(a1, *v1);
}

uint64_t sub_1000091F4(uint64_t *a1, uint64_t *a2)
{
  return sub_1000094E4(*a1, *a2);
}

void sub_100009200()
{
}

void sub_10000922C()
{
}

void sub_100009258()
{
}

void sub_100009284()
{
}

void sub_1000092B0()
{
}

void sub_1000092DC()
{
}

void sub_100009308()
{
}

void sub_100009334()
{
}

void sub_100009360()
{
}

uint64_t sub_10000938C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000939C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000093A4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000093C8(void *a1)
{
  return sub_100008064(a1, v1);
}

uint64_t sub_1000093D0(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_1000093E8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10000940C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000D3348(v1, a1);
}

void sub_100009414()
{
}

uint64_t sub_10000941C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_10000945C()
{
  unint64_t result = qword_1001D2B90;
  if (!qword_1001D2B90)
  {
    uint64_t v1 = sub_1000094A0((uint64_t *)&unk_1001D0BC0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001D2B90);
  }

  return result;
}

uint64_t sub_1000094A0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_1000094E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = ((uint64_t (*)(void))static String._unconditionallyBridgeFromObjectiveC(_:))();
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_100009568(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000095A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100009618@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t result = sub_1000084EC(a1, a2, a3);
  if (!v4) {
    *a4 = result & 1;
  }
  return result;
}

void sub_100009644(void *a1, id a2, char a3)
{
  if ((a3 & 1) != 0) {
    swift_release(a2);
  }
  else {
}
  }

uint64_t sub_100009654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_100009660()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10000968C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1001D0BE4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000096F8;
  return sub_100007700(a1, v4, v5, v6);
}

uint64_t sub_1000096F8()
{
  uint64_t v4 = *v0;
  uint64_t v1 = *(void *)(v4 + 16);
  uint64_t v2 = *v0;
  uint64_t v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100009740(uint64_t a1)
{
  uint64_t v2 = sub_10000941C((uint64_t *)&unk_1001D0BD0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100009780()
{
  return sub_1000070BC();
}

uint64_t sub_100009788(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

void type metadata accessor for SFResultType(uint64_t a1)
{
}

void type metadata accessor for SFQueryTopicType(uint64_t a1)
{
}

void type metadata accessor for PARReplyType(uint64_t a1)
{
}

void type metadata accessor for _CPFeedbackType(uint64_t a1)
{
}

void type metadata accessor for Name(uint64_t a1)
{
}

void type metadata accessor for DelayedRequestDisposition(uint64_t a1)
{
}

void type metadata accessor for ICMusicSubscriptionStatusType(uint64_t a1)
{
}

void sub_10000984C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

void sub_100009890()
{
}

void sub_1000098BC()
{
}

void sub_1000098E8()
{
}

uint64_t sub_100009914(uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(v3, &v7);
  if (v8)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v5 = 0LL;
  }

  *uint64_t v2 = v5;
  return v4 & 1;
}

uint64_t sub_100009984(uint64_t a1, id *a2)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(v3, &v6);
  if (v7)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    uint64_t result = sub_100009B3C();
  }

  else
  {
    NSString v5 = 0LL;
  }

  *uint64_t v2 = v5;
  return result;
}

void sub_1000099E8(uint64_t a1)
{
}

uint64_t sub_100009A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return os_signpost(_:dso:log:name:signpostID:)(a1, a2, a3, a4, a5, 2LL, v5);
}

uint64_t sub_100009A78()
{
  return static os_signpost_type_t.begin.getter();
}

  ;
}

uint64_t sub_100009A98()
{
  return static OSSignpostID.exclusive.getter();
}

  ;
}

uint64_t sub_100009AB8()
{
  return v2(v1, v0);
}

uint64_t sub_100009AC4()
{
  return type metadata accessor for OSSignpostID(0LL);
}

uint64_t sub_100009ACC(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7LL);
}

  ;
}

  ;
}

uint64_t sub_100009AFC()
{
  return *v0;
}

  ;
}

uint64_t sub_100009B20(uint64_t a1)
{
  return swift_slowAlloc(a1, -1LL);
}

uint64_t sub_100009B28()
{
  return v2(v1, v0);
}

uint64_t sub_100009B34(uint64_t a1, unint64_t *a2, void *a3)
{
  return sub_100009788(0LL, a2, a3);
}

uint64_t sub_100009B3C()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_100009B44(uint64_t a1, id *a2)
{
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_100009BA4()
{
  return type metadata accessor for DispatchQoS(0LL);
}

uint64_t sub_100009BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return os_signpost(_:dso:log:name:signpostID:)(a1, a2, a3, a4, 4LL, 2LL, v4);
}

void *sub_100009BBC@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 112) = a1;
  *(void *)(v2 - 104) = v1;
  return _Block_copy((const void *)(v2 - 128));
}

uint64_t sub_100009BC8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_100009BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return os_signpost(_:dso:log:name:signpostID:_:_:)(a1, a2, a3, a4, a5, 2LL, v5);
}

uint64_t sub_100009BDC()
{
  return v0;
}

uint64_t sub_100009BF0()
{
  return v0;
}

void *sub_100009C04@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 136) = v1;
  *(void *)(v2 - 128) = a1;
  return _Block_copy((const void *)(v2 - 152));
}

uint64_t sub_100009C10(uint64_t a1)
{
  return swift_getWitnessTable(v1, a1);
}

void *sub_100009C1C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 128) = v1;
  *(void *)(v2 - 120) = a1;
  return _Block_copy((const void *)(v2 - 144));
}

uint64_t sub_100009C28(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  return a2(255LL);
}

uint64_t sub_100009C34(uint64_t a1, uint64_t a2)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
}

  ;
}

uint64_t sub_100009C54()
{
  return type metadata accessor for DispatchWorkItemFlags(0LL);
}

uint64_t sub_100009C5C()
{
  return *(void *)v0;
}

uint64_t sub_100009C68()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 12;
  os_unfair_lock_lock(v1 + 12);
  sub_100009CC4(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void *sub_100009CC4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (*result)
  {
    uint64_t v3 = (void *)result[3];
    uint64_t v4 = result[1];
    swift_retain(v4);
    id v5 = v3;
    uint64_t result = (void *)swift_release(v4);
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  *a2 = v3;
  return result;
}

uint64_t (*sub_100009D20())()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t *)&v1[4];
  uint64_t v3 = v1 + 12;
  os_unfair_lock_lock(v1 + 12);
  sub_100009DBC(v2, &v6);
  os_unfair_lock_unlock(v3);
  if (!(void)v6) {
    return 0LL;
  }
  __int128 v5 = v6;
  *(_OWORD *)(swift_allocObject(&unk_1001B1030, 32LL, 7LL) + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  return sub_10000A690;
}

uint64_t sub_100009DBC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = a1[1];
    swift_retain(v4);
    uint64_t result = swift_allocObject(&unk_1001B1058, 32LL, 7LL);
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
    *(void *)(result + 24) = v4;
    __int128 v6 = sub_10000A6C0;
  }

  else
  {
    __int128 v6 = 0LL;
    uint64_t result = 0LL;
  }

  *a2 = v6;
  a2[1] = result;
  return result;
}

uint64_t sub_100009E2C(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = dispatch_group_create();
  dispatch_group_enter(v9);
  uint64_t v10 = sub_10000941C(&qword_1001D0D80);
  uint64_t v11 = swift_allocObject(v10, 52LL, 7LL);
  *(_DWORD *)(v11 + 48) = 0;
  *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  *(void *)(v11 + 24) = a4;
  *(void *)(v11 + 32) = a2;
  *(void *)(v11 + 40) = v9;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  uint64_t v12 = v9;
  swift_retain(v4);
  [a2 addObserver:v4 selector:"handleEvent:" name:a1 object:0];

  swift_release();
  return v4;
}

uint64_t sub_100009EE4(uint64_t a1)
{
  uint64_t v2 = sub_100009C68();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = type metadata accessor for DispatchTime(0LL);
    v20[3] = v20;
    uint64_t v5 = *(void *)(v4 - 8);
    uint64_t v6 = __chkstk_darwin(v4);
    uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    v20[2] = v20;
    uint64_t v9 = __chkstk_darwin(v6);
    uint64_t v11 = (char *)v20 - v10;
    static DispatchTime.now()(v9);
    uint64_t v12 = type metadata accessor for DispatchTimeInterval(0LL);
    v20[1] = v20;
    uint64_t v13 = *(void *)(v12 - 8);
    __chkstk_darwin(v12);
    uint64_t v15 = (void *)((char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    *uint64_t v15 = a1;
    (*(void (**)(void *, void, uint64_t))(v13 + 104))( v15,  enum case for DispatchTimeInterval.milliseconds(_:),  v12);
    + infix(_:_:)(v11, v15);
    (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
    uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v11, v4);
    uint64_t v17 = OS_dispatch_group.wait(timeout:)(v8) & 1;
    v16(v8, v4);
    sub_10000A094();
    LOBYTE(v11) = static DispatchTimeoutResult.== infix(_:_:)(v17, 1LL);

    char v18 = v11 ^ 1;
  }

  else
  {
    char v18 = 1;
  }

  return v18 & 1;
}

void sub_10000A094()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t *)&v1[4];
  uint64_t v3 = v1 + 12;
  os_unfair_lock_lock(v1 + 12);
  sub_10000A1FC(v2, v0);
  os_unfair_lock_unlock(v3);
}

uint64_t (*sub_10000A0E8(uint64_t a1))()
{
  uint64_t result = sub_100009D20();
  if (result)
  {
    uint64_t v4 = (uint64_t)result;
    uint64_t v5 = v3;
    return (uint64_t (*)())sub_10000A65C(v4, v5);
  }

  return result;
}

void sub_10000A1FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v6 = (void *)a1[2];
    uint64_t v5 = (void *)a1[3];
    uint64_t v7 = a1[1];
    swift_retain(v7);
    id v8 = v6;
    uint64_t v9 = v5;
    sub_10000A61C(v2, v7, v6, v5);
    swift_release();
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    dispatch_group_leave(v9);
    [v8 removeObserver:a2];
  }

uint64_t sub_10000A2B4()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for NotificationBarrier()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd19NotificationBarrier);
}

void destroy for NotificationBarrier.State(uint64_t a1)
{
  if (*(void *)a1 >= 0xFFFFFFFFuLL)
  {
    swift_release(*(void *)(a1 + 8));
  }

uint64_t initializeWithCopy for NotificationBarrier.State(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    __int128 v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  }

  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void **)(a2 + 16);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    uint64_t v5 = *(void **)(a2 + 24);
    *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
    *(void *)(a1 + 24) = v5;
    swift_retain(v3);
    id v6 = v4;
    id v7 = v5;
  }

  return a1;
}

uint64_t assignWithCopy for NotificationBarrier.State(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*(void *)a1 < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v13 = a2[1];
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v13;
      uint64_t v14 = (void *)a2[2];
      *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
      uint64_t v15 = (void *)a2[3];
      *(void *)(a1 + 24) = v15;
      swift_retain(v13);
      id v16 = v14;
      id v17 = v15;
      return a1;
    }

LABEL_7:
    __int128 v18 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v18;
    return a1;
  }

  if (v4 < 0xFFFFFFFF)
  {
    swift_release(*(void *)(a1 + 8));

    goto LABEL_7;
  }

  unint64_t v5 = a2[1];
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  swift_retain(v5);
  swift_release(v6);
  id v7 = (void *)a2[2];
  __int128 v8 = *(void **)(a1 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  id v9 = v7;

  uint64_t v10 = (void *)a2[3];
  uint64_t v11 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v10;
  id v12 = v10;

  return a1;
}

  uint64_t v20 = type metadata accessor for ExperimentalFeedbackDatabase();
  swift_deallocPartialClassInstance(v2, v20, 24LL, 7LL);
  return 0LL;
}
  }

  sub_10000C4AC();
  sub_1000C1750(a1);
  sub_100010D00();
  sub_10001683C();
  return swift_release();
}

    uint64_t v31 = 0x524F525245LL;
LABEL_8:
    v54 = 0xE500000000000000LL;
    goto LABEL_9;
  }

  v54 = 0xE200000000000000LL;
  uint64_t v31 = 19279LL;
LABEL_9:
  uint64_t v32 = Apple_Parsec_Search_V2_SearchResponse.feedback.getter();
  uint64_t v34 = v33;
  uint64_t v35 = Data.base64EncodedString(options:)(0LL);
  uint64_t v36 = sub_100010A30(v32, v34);
  v37 = Apple_Parsec_Search_V2_SearchResponse.partialClientAddress.getter(v36);
  unint64_t v39 = v38;
  unint64_t v40 = (double)Apple_Parsec_Search_V2_SearchResponse.millisecondDuration.getter();
  uint64_t v41 = sub_10003D690();
  objc_allocWithZone(&OBJC_CLASS____CPEndNetworkSearchFeedback);
  uint64_t v42 = swift_unknownObjectRetain(v55);
  uint64_t v28 = sub_10008F690(v42, v58, v59, v40, v31, v54, v35._countAndFlagsBits, (uint64_t)v35._object, v37, v39, v41);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
LABEL_10:
  uint64_t v43 = *(void *)(v61 + 64);
  uint64_t v44 = objc_allocWithZone(&OBJC_CLASS____CPFeedbackPayload);
  swift_unknownObjectRetain(v43);
  v45 = v28;
  uint64_t v46 = [v44 initWithCodable:v45];
  [v46 setQueryId:v60];

  v47 = (uint64_t)v57;
  sub_100082F80((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_1000C1650);
  uint64_t v48 = v64;
  v49 = sub_100010708(v47, 1LL, v64);
  v51 = v62;
  uint64_t v50 = v63;
  if (v49 == 1)
  {
    parsecdUserAgent.getter();
    sub_100019C1C(v47, (uint64_t *)&unk_1001D5D20);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v62, v47, v48);
  }

  sub_1000A5CB4();

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v51, v48);
}

  unint64_t v5 = 45;
  return v5 == 45;
}

  unint64_t v5 = 45;
  return v5 == 45;
}

  id v12 = sub_1000CA074(v8, v9, a3);
  swift_bridgeObjectRelease();
  return v12 | ((((unint64_t)v12 >> 32) & 1) << 32);
}

  uint64_t v6 = 45;
LABEL_9:
  id v7 = v6 == 45;
  sub_1000108B8(v9);
  return v7;
}

  uint64_t v6 = 45;
LABEL_9:
  id v7 = v6 == 45;
  sub_1000108B8(v9);
  return v7;
}

  id v12 = sub_1000EA46C(v8, v9, a3);
  swift_bridgeObjectRelease();
  return v12;
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }

  *a1 = *a2;
  uint64_t v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

  id v16 = sub_100105294(v12, v13, a5);
  swift_bridgeObjectRelease();
  return v16;
}

    sub_10001683C();
    sub_100110138();
    sub_10010DC1C();
    return;
  }

  __break(1u);
LABEL_9:
  __break(1u);
}

    sub_10001683C();
    return;
  }

  __break(1u);
LABEL_9:
  __break(1u);
}

    sub_1000E5738();
    return;
  }

    sub_1001211FC();
    return;
  }

  __break(1u);
LABEL_9:
  __break(1u);
}

    sub_1001211FC();
    return;
  }

  __break(1u);
LABEL_9:
  __break(1u);
}

__n128 initializeWithTake for NotificationBarrier.State(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for NotificationBarrier.State(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    swift_release(*(void *)(a1 + 8));

LABEL_5:
    __int128 v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
    return a1;
  }

  *(void *)a1 = *(void *)a2;
  swift_release(*(void *)(a1 + 8));
  unint64_t v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  unint64_t v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for NotificationBarrier.State(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NotificationBarrier.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }

  return result;
}

uint64_t sub_10000A5D0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (v1 + 1);
}

void *sub_10000A5E8(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[2] = 0LL;
    result[3] = 0LL;
    result[1] = 0LL;
  }

  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }

  *__n128 result = v2;
  return result;
}

ValueMetadata *type metadata accessor for NotificationBarrier.State()
{
  return &type metadata for NotificationBarrier.State;
}

void sub_10000A61C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a1)
  {
    swift_release(a2);
  }

uint64_t sub_10000A65C(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_10000A66C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10000A690()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t sub_10000A6C0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result & 1;
  return result;
}

NSString sub_10000A6F0()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1001EDA60 = (uint64_t)result;
  return result;
}

void sub_10000A724(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign(v2 + 16, a1);
  sub_1000D1C68();
}

void sub_10000A748(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_observer;
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign(v4, a1);
  sub_1000D1BA0();
}

uint64_t sub_10000A778()
{
  uint64_t v0 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static DispatchQoS.unspecified.getter(v1);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v4);
  __int128 v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = 0LL;
  sub_10000BCF8( (unint64_t *)&qword_1001D0BB0,  v7,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  dispatch thunk of OptionSet.init(rawValue:)(&v15, v4, v8);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void))(v12 + 104))( v11,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002ELL,  0x800000010016ACE0LL,  v3,  v6,  v11,  0LL);
  qword_1001D0D88 = result;
  return result;
}

id sub_10000A8EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v6 = v5;
  v52.super_class = (Class)swift_getObjectType(v5);
  uint64_t v8 = type metadata accessor for OSSignpostID(0LL);
  __chkstk_darwin(v8);
  sub_10000BEB8();
  uint64_t v9 = OBJC_IVAR____TtC7parsecd25ParsecSubscriptionManager_lifetimeSpan;
  *(void *)&v5[OBJC_IVAR____TtC7parsecd25ParsecSubscriptionManager_lifetimeSpan] = 0LL;
  uint64_t v10 = &v5[OBJC_IVAR____TtC7parsecd25ParsecSubscriptionManager_assembly];
  *((void *)v10 + 1) = 0LL;
  swift_unknownObjectWeakInit(v10, 0LL);
  v52.receiver = v5;
  uint64_t v11 = static os_signpost_type_t.begin.getter(v52.receiver);
  if (qword_1001D0568 != -1) {
    swift_once(&qword_1001D0568, sub_100034704);
  }
  uint64_t v12 = qword_1001EDCC8;
  sub_10000BEA4();
  sub_10000BE8C(v11, (uint64_t)&_mh_execute_header, v12, (uint64_t)"lifetimeSpanInit", 16LL);
  sub_10000BE80();
  uint64_t v13 = sub_10000941C(&qword_1001D0DD8);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  swift_retain(a5);
  sub_10000D8D8();
  *(void *)&v6[v9] = v14;
  uint64_t v15 = swift_release();
  uint64_t v16 = static os_signpost_type_t.end.getter(v15);
  uint64_t v17 = qword_1001EDCC8;
  sub_10000BEA4();
  sub_10000BE8C(v16, (uint64_t)&_mh_execute_header, v17, (uint64_t)"lifetimeSpanInit", 16LL);
  sub_10000BE80();
  *((void *)v10 + 1) = a2;
  uint64_t v18 = swift_unknownObjectWeakAssign(v10, a1);
  uint64_t v19 = static os_signpost_type_t.begin.getter(v18);
  uint64_t v20 = qword_1001EDCC8;
  sub_10000BEA4();
  sub_10000BE8C(v19, (uint64_t)&_mh_execute_header, v20, (uint64_t)"fuseProvider", 12LL);
  sub_10000BE80();
  if (qword_1001D0488 != -1) {
    swift_once(&qword_1001D0488, sub_10000A778);
  }
  uint64_t v21 = (void *)qword_1001D0D88;
  uint64_t v22 = type metadata accessor for FuseSubscriptionProvider();
  uint64_t v23 = swift_allocObject(v22, 64LL, 7LL);
  id v24 = v21;
  uint64_t v25 = swift_unknownObjectRetain(a1);
  uint64_t v26 = sub_10000B844(v25, v24, v23);
  *(void *)((char *)v52.receiver + OBJC_IVAR____TtC7parsecd25ParsecSubscriptionManager_fuseProvider) = v26;
  uint64_t v27 = static os_signpost_type_t.end.getter(v26);
  uint64_t v28 = qword_1001EDCC8;
  sub_10000BEA4();
  sub_10000BE8C(v27, (uint64_t)&_mh_execute_header, v28, (uint64_t)"fuseProvider", 12LL);
  uint64_t v29 = sub_10000BE80();
  uint64_t v30 = static os_signpost_type_t.begin.getter(v29);
  uint64_t v31 = qword_1001EDCC8;
  sub_10000BEA4();
  sub_10000BE8C(v30, (uint64_t)&_mh_execute_header, v31, (uint64_t)"storefrontIdentifierProvider", 28LL);
  sub_10000BE80();
  uint64_t v32 = (void *)qword_1001D0D88;
  uint64_t v33 = (char *)objc_allocWithZone((Class)type metadata accessor for AppleAccountMonitor());
  swift_unknownObjectRetain(a1);
  *(void *)((char *)v52.receiver + OBJC_IVAR____TtC7parsecd25ParsecSubscriptionManager_storefrontIdentifierProvider) = sub_10000BAEC(a1, v32, v33);

  uint64_t v35 = static os_signpost_type_t.end.getter(v34);
  uint64_t v36 = qword_1001EDCC8;
  sub_10000BEA4();
  sub_10000BE8C(v35, (uint64_t)&_mh_execute_header, v36, (uint64_t)"storefrontIdentifierProvider", 28LL);
  uint64_t v37 = sub_10000BE80();
  uint64_t v38 = static os_signpost_type_t.begin.getter(v37);
  uint64_t v39 = qword_1001EDCC8;
  sub_10000BEA4();
  sub_10000BE8C(v38, (uint64_t)&_mh_execute_header, v39, (uint64_t)"super.init()", 12LL);
  sub_10000BE80();
  objc_super v55 = v52;
  id v40 = objc_msgSendSuper2(&v55, "init");
  uint64_t v41 = static os_signpost_type_t.end.getter(v40);
  uint64_t v42 = qword_1001EDCC8;
  sub_10000BEA4();
  sub_10000BE8C(v41, (uint64_t)&_mh_execute_header, v42, (uint64_t)"super.init()", 12LL);
  sub_10000BE80();
  if (a3)
  {
    uint64_t v43 = swift_unknownObjectRetain(a3);
    uint64_t v44 = static os_signpost_type_t.begin.getter(v43);
    uint64_t v45 = qword_1001EDCC8;
    sub_10000BEA4();
    sub_10000BE8C(v44, (uint64_t)&_mh_execute_header, v45, (uint64_t)"startSubscribers", 16LL);
    sub_10000BE80();
    uint64_t v46 = sub_10000AD60(a3, a4);
    uint64_t v47 = static os_signpost_type_t.end.getter(v46);
    uint64_t v48 = qword_1001EDCC8;
    sub_10000BEA4();
    sub_10000BE8C(v47, (uint64_t)&_mh_execute_header, v48, (uint64_t)"startSubscribers", 16LL);
    swift_unknownObjectRelease(a1);
    swift_release();
    swift_unknownObjectRelease_n(a3, 2LL);

    sub_10000BE80();
  }

  else
  {

    swift_unknownObjectRelease(a1);
    swift_release();
  }

  return v40;
}

uint64_t sub_10000AD60(uint64_t a1, uint64_t a2)
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR____TtC7parsecd25ParsecSubscriptionManager_assembly]);
  if (Strong)
  {
    uint64_t v6 = Strong;
    id v7 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    swift_unknownObjectRelease(v6);
    [v7 addObserver:v2 selector:"bagChangeNotificationWithNotification:" name:@"PARBagChangeNotification" object:0];
  }

  if (qword_1001D0488 != -1) {
    swift_once(&qword_1001D0488, sub_10000A778);
  }
  v25[2] = qword_1001D0D88;
  uint64_t v8 = swift_allocObject(&unk_1001B10A0, 32LL, 7LL);
  *(void *)(v8 + 24) = a2;
  swift_unknownObjectWeakInit(v8 + 16, a1);
  uint64_t v9 = swift_allocObject(&unk_1001B10C8, 32LL, 7LL);
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *(void *)(v9 + 24) = v2;
  aBlock[4] = sub_10000BCAC;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000D2F18;
  aBlock[3] = &unk_1001B10E0;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  v25[1] = v25;
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_retain(v8);
  static DispatchQoS.unspecified.getter(v2);
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags(0LL);
  v25[0] = v25;
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = &_swiftEmptyArrayStorage;
  sub_10000BCF8( (unint64_t *)&qword_1001D2B80,  v19,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v21 = v20;
  uint64_t v22 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
  unint64_t v23 = sub_10000945C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v22, v23, v15, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v18, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_release();
  return swift_release();
}

uint64_t sub_10000B02C(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v2);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(a1 + 24);
    sub_10000A724(result, v5);
    sub_10000A748(v4, v5);
    return swift_unknownObjectRelease(v4);
  }

  return result;
}

id sub_10000B0BC()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  uint64_t v2 = objc_autoreleasePoolPush();
  uint64_t v3 = *(void *)&v0[OBJC_IVAR____TtC7parsecd25ParsecSubscriptionManager_lifetimeSpan];
  *(void *)&v0[OBJC_IVAR____TtC7parsecd25ParsecSubscriptionManager_lifetimeSpan] = 0LL;
  swift_release(v3);
  objc_autoreleasePoolPop(v2);
  v5.receiver = v0;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, "dealloc");
}

void sub_10000B1A4(void *a1)
{
  if (v3)
  {
    uint64_t v4 = v3;
    v23[0] = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(@"bag");
    v23[1] = v5;
    AnyHashable.init<A>(_:)(v23);
    sub_10000BEF0((uint64_t)aBlock, v4, &v24);
    swift_bridgeObjectRelease();
    sub_10000BD34((uint64_t)aBlock);
    if (v25)
    {
      uint64_t v6 = sub_100009788(0LL, (unint64_t *)&qword_1001D47F0, &OBJC_CLASS___PARBag_ptr);
      if ((swift_dynamicCast(v23, &v24, (char *)&type metadata for Any + 8, v6, 6LL) & 1) != 0)
      {

        if (qword_1001D0488 != -1) {
          swift_once(&qword_1001D0488, sub_10000A778);
        }
        v21[3] = qword_1001D0D88;
        uint64_t v7 = swift_allocObject(&unk_1001B1168, 24LL, 7LL);
        swift_unknownObjectWeakInit(v7 + 16, v1);
        aBlock[4] = sub_10000BDCC;
        aBlock[5] = v7;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = sub_1000D2F18;
        aBlock[3] = &unk_1001B1180;
        uint64_t v8 = _Block_copy(aBlock);
        uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
        v21[2] = v21;
        uint64_t v10 = *(void *)(v9 - 8);
        __chkstk_darwin(v9);
        sub_10000BEB8();
        uint64_t v11 = swift_retain(v7);
        static DispatchQoS.unspecified.getter(v11);
        uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
        v21[1] = v21;
        uint64_t v13 = *(void *)(v12 - 8);
        __chkstk_darwin(v12);
        uint64_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        *(void *)&__int128 v24 = &_swiftEmptyArrayStorage;
        sub_10000BCF8( (unint64_t *)&qword_1001D2B80,  v16,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v18 = v17;
        uint64_t v19 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
        unint64_t v20 = sub_10000945C();
        dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v19, v20, v12, v18);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v2, v15, v8);
        _Block_release(v8);
        (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v9);
        swift_release();
        swift_release();
      }
    }

    else
    {
      sub_10000BD68((uint64_t)&v24);
    }
  }

uint64_t sub_10000B478(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v1);
  if (result)
  {
    uint64_t v3 = (void *)result;
    swift_retain(*(void *)(result + OBJC_IVAR____TtC7parsecd25ParsecSubscriptionManager_fuseProvider));

    sub_1000D1C68();
    return swift_release();
  }

  return result;
}

void sub_10000B538()
{
}

uint64_t type metadata accessor for ParsecSubscriptionManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd25ParsecSubscriptionManager);
}

uint64_t sub_10000B590(uint64_t a1)
{
  return sub_10000B77C(a1, type metadata accessor for PegasusContext);
}

void sub_10000B59C(uint64_t a1)
{
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  swift_retain(a1);
  uint64_t v3 = (_DWORD *)sub_10000BE98();
  *(void *)(v1 + 24) = v3;
  *uint64_t v3 = 0;
  swift_release(a1);
  sub_100009A90();
}

uint64_t sub_10000B5D4(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  *(_BYTE *)(v3 + 32) = a3;
  swift_bridgeObjectRetain(a2);
  objc_super v5 = (_DWORD *)swift_slowAlloc(4LL, -1LL);
  *(void *)(v3 + 40) = v5;
  *objc_super v5 = 0;
  swift_bridgeObjectRelease(a2);
  return v3;
}

uint64_t sub_10000B620(double a1)
{
  *(double *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  uint64_t v2 = (_DWORD *)sub_10000BE98();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = 0;
  return v1;
}

void sub_10000B644(uint64_t a1)
{
  uint64_t v2 = (_DWORD *)sub_10000BE98();
  *(void *)(v1 + 24) = v2;
  sub_10000BEAC(v2);
  sub_100009A90();
}

uint64_t sub_10000B66C(int a1)
{
  *(_DWORD *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  uint64_t v2 = (_DWORD *)sub_10000BE98();
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = 0;
  return v1;
}

uint64_t sub_10000B690(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 88LL);
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, a1, v4);
  uint64_t v6 = (_DWORD *)sub_10000BE98();
  sub_10000BEDC(v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return v1;
}

void sub_10000B708(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v3 = (_DWORD *)sub_10000BE98();
  v2[4] = v3;
  sub_10000BEAC(v3);
  sub_100009A90();
}

void sub_10000B73C(void *a1)
{
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  id v2 = a1;
  uint64_t v3 = (_DWORD *)sub_10000BE98();
  *(void *)(v1 + 24) = v3;
  *uint64_t v3 = 0;

  sub_100009A90();
}

uint64_t sub_10000B770(uint64_t a1)
{
  return sub_10000B77C(a1, type metadata accessor for SessionTokens);
}

uint64_t sub_10000B77C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v5 = (_DWORD *)sub_10000BE98();
  sub_10000BEDC(v5);
  sub_10000BE38(a1, a2);
  return v2;
}

void sub_10000B7D0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void (**)(id, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v8 = a2;
  id v7 = a3;
  v6(v8, a3);
  swift_release(v5);
}

uint64_t sub_10000B844(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)(a3 + 56) = 0LL;
  uint64_t v5 = qword_1001D0528;
  swift_retain(a3);
  if (v5 != -1) {
    swift_once(&qword_1001D0528, sub_1000344D0);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_1000093D0(v6, (uint64_t)qword_1001EDC48);
  id v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Registering for subscription updates", v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  uint64_t v11 = (void *)objc_opt_self(&OBJC_CLASS___ICMusicSubscriptionStatusMonitor);
  id v12 = [(id)objc_opt_self(ICUserIdentity) autoupdatingActiveAccount];
  id v13 = [v11 sharedMonitorForIdentity:v12];

  *(void *)(a3 + 48) = v13;
  swift_release();
  uint64_t v14 = sub_1000D21E8((uint64_t)a2);
  uint64_t v15 = *(void **)(v14 + 48);
  uint64_t v16 = swift_allocObject(&unk_1001B1118, 24LL, 7LL);
  swift_weakInit(v16 + 16, v14);
  v27[4] = sub_10000BCF0;
  v27[5] = v16;
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 1107296256LL;
  v27[2] = sub_10000B7D0;
  void v27[3] = &unk_1001B1130;
  uint64_t v17 = _Block_copy(v27);
  id v18 = a2;
  swift_retain(v14);
  id v19 = v15;
  swift_release();
  id v20 = [v19 beginObservingSubscriptionStatusWithHandler:v17];
  _Block_release(v17);

  uint64_t v21 = *(void *)(v14 + 56);
  *(void *)(v14 + 56) = v20;
  swift_unknownObjectRelease(v21);
  uint64_t v22 = *(void **)(v14 + 48);
  swift_retain(v14);
  id v23 = [v22 subscriptionStatus];
  __int128 v24 = v23;
  if (v23)
  {
    id v25 = [v23 statusType];
  }

  else
  {
    id v25 = 0LL;
  }

  sub_1000D2360((uint64_t)v25, v24 == 0LL);
  swift_release_n(v14, 2LL);
  swift_release();

  return v14;
}

id sub_10000BAEC(uint64_t a1, void *a2, char *a3)
{
  *(void *)&a3[OBJC_IVAR____TtC7parsecd19AppleAccountMonitor_monitoredAccountStore] = 0LL;
  uint64_t v6 = &a3[OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_observer];
  *((void *)v6 + 1) = 0LL;
  swift_unknownObjectWeakInit(v6, 0LL);
  uint64_t v7 = &a3[OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_storefrontIdentifier];
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  id v8 = &a3[OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_assembly];
  *((void *)v8 + 1) = 0LL;
  swift_unknownObjectWeakInit(v8, 0LL);
  uint64_t v9 = OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider__pendingUpdate;
  uint64_t v10 = sub_10000941C((uint64_t *)&unk_1001D0DE0);
  swift_allocObject(v10, 48LL, 7LL);
  swift_retain(a1);
  id v11 = a2;
  id v12 = a3;
  *(void *)&a3[v9] = sub_10000B5D4(0LL, 0LL, 0);
  *((void *)v8 + 1) = &off_1001B3A58;
  swift_unknownObjectWeakAssign(v8, a1);
  *(void *)&v12[OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_queue] = v11;
  id v13 = v11;

  v17.receiver = v12;
  v17.super_class = (Class)type metadata accessor for StorefrontIdentifierProvider();
  id v14 = objc_msgSendSuper2(&v17, "init");
  swift_release();

  id v15 = v14;
  sub_1000C7D60();

  swift_release();
  return v15;
}

uint64_t sub_10000BC5C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10000BC80()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10000BCAC()
{
  return sub_10000B02C(*(void *)(v0 + 16));
}

uint64_t sub_10000BCB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000BCC4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10000BCCC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10000BCF0(uint64_t a1, void *a2)
{
  return sub_1000D2904(a1, a2, v2);
}

void sub_10000BCF8(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = a2(255LL);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  sub_100009A90();
}

uint64_t sub_10000BD34(uint64_t a1)
{
  return a1;
}

uint64_t sub_10000BD68(uint64_t a1)
{
  uint64_t v2 = sub_10000941C((uint64_t *)&unk_1001D32C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10000BDA8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10000BDCC()
{
  return sub_10000B478(v0);
}

uint64_t sub_10000BDD4(uint64_t a1)
{
  return a1;
}

void sub_10000BDF8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  sub_100009A90();
}

void sub_10000BE38(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  sub_100009A90();
}

uint64_t sub_10000BE80()
{
  return v2(v1, v0);
}

uint64_t sub_10000BE8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return os_signpost(_:dso:log:name:signpostID:)(a1, a2, a3, a4, a5, 2LL, v5);
}

uint64_t sub_10000BE98()
{
  return swift_slowAlloc(4LL, -1LL);
}

uint64_t sub_10000BEA4()
{
  return static OSSignpostID.exclusive.getter();
}

uint64_t sub_10000BEAC(_DWORD *a1)
{
  *a1 = 0;
  return swift_bridgeObjectRelease(v1);
}

  ;
}

uint64_t sub_10000BED0(uint64_t a1)
{
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  return swift_bridgeObjectRetain(a1);
}

_DWORD *sub_10000BEDC(_DWORD *result)
{
  *(void *)(v1 + *(void *)(*(void *)v1 + 96LL)) = result;
  *uint64_t result = 0;
  return result;
}

double sub_10000BEF0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v5 = sub_10000EC34(a1), (v6 & 1) != 0))
  {
    sub_100010F30(*(void *)(a2 + 56) + 32 * v5, (uint64_t)a3);
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

double sub_10000BF3C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_10001104C(a1, a2), (v7 & 1) != 0))
  {
    sub_100010F30(*(void *)(v4 + 56) + 32 * v6, (uint64_t)a4);
  }

  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }

  return result;
}

uint64_t sub_10000BF84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0LL;
  }
  unint64_t v4 = sub_10001104C(a1, a2);
  if ((v5 & 1) == 0) {
    return 0LL;
  }
  unint64_t v6 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v4);
  uint64_t v7 = *v6;
  swift_bridgeObjectRetain(v6[1]);
  return v7;
}

uint64_t sub_10000BFD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_10001104C(a1, a2), (v7 & 1) != 0))
  {
    unint64_t v8 = v6;
    uint64_t v9 = *(void *)(v4 + 56);
    uint64_t v10 = sub_100010E34();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))( a4,  v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * v8,  v10);
    uint64_t v11 = a4;
    uint64_t v12 = 0LL;
    uint64_t v13 = v10;
  }

  else
  {
    uint64_t v13 = sub_100010E34();
    uint64_t v11 = a4;
    uint64_t v12 = 1LL;
  }

  return sub_100009654(v11, v12, 1LL, v13);
}

void sub_10000C060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    unint64_t v3 = sub_10001104C(a1, a2);
    if ((v4 & 1) != 0) {
      sub_100011110(v3);
    }
  }

  sub_100009A90();
}

void sub_10000C090(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    unint64_t v2 = sub_10000EDAC();
    if ((v3 & 1) != 0) {
      sub_100011110(v2);
    }
  }

  sub_100009A90();
}

void sub_10000C0C4()
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  if (sub_100010708(v1, 1LL, v6) == 1)
  {
    __break(1u);
  }

  else
  {
    sub_100010FC0();
    v7();
    sub_1000110D4();
  }

uint64_t sub_10000C170(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v3;
  *(void *)(v5 + 24) = 0LL;
  sub_100010D20(v5 + 16);
  uint64_t v9 = v5 + OBJC_IVAR____TtC7parsecd10FileWriter__fileUrl;
  uint64_t v10 = type metadata accessor for URL(0LL);
  sub_100009654(v9, 1LL, 1LL, v10);
  *(void *)(v5 + OBJC_IVAR____TtC7parsecd10FileWriter_maxFileSize) = 0x200000LL;
  *(void *)(v5 + OBJC_IVAR____TtC7parsecd10FileWriter_closingBufferSize) = 0x40000LL;
  uint64_t v11 = OBJC_IVAR____TtC7parsecd10FileWriter_writeTx;
  *(void *)(v5 + v11) = os_transaction_create("com.apple.parsecd.sessionFile");
  *(void *)(v5 + OBJC_IVAR____TtC7parsecd10FileWriter_eventWriteSpan) = 0LL;
  *(void *)(v5 + OBJC_IVAR____TtC7parsecd10FileWriter_fileHandle) = 0LL;
  *(void *)(v5 + 24) = a2;
  swift_unknownObjectWeakAssign(v5 + 16, a1);
  uint64_t v12 = *(void **)(a1 + 240);
  *(void *)(v5 + 32) = v12;
  id v13 = v12;
  sub_1000478B0();
  sub_1000C20C4(0LL, 0LL);
  sub_1000C27CC();
  id v15 = v14;
  swift_unknownObjectRelease();
  if (!v15)
  {
LABEL_4:
    uint64_t v18 = sub_10001085C(a3, (SEL *)&selRef_userGuidString);
    if (v19)
    {
      sub_10000C620(a1, v19, v18, v19);
      swift_bridgeObjectRelease();
      if (!v4)
      {
        sub_10000C808(a3);
        sub_1000489B0();
        uint64_t v33 = v32;
        uint64_t v34 = sub_10000941C(&qword_1001D1070);
        swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
        uint64_t v35 = sub_10000EBF4(v33, 2, 0LL);
        swift_unknownObjectRelease();

        *(void *)(v5 + OBJC_IVAR____TtC7parsecd10FileWriter_eventWriteSpan) = v35;
        swift_release();
        return v5;
      }

      swift_release();
    }

    else
    {
      swift_release();
      uint64_t v20 = type metadata accessor for SessionFileCreationError(0LL);
      sub_1000108E8(&qword_1001D1068, (void (*)(uint64_t))type metadata accessor for SessionFileCreationError);
      uint64_t v21 = sub_100011038();
      swift_allocError(v21, v22, 0LL, 0LL);
      __int128 v24 = v23;
      uint64_t v25 = sub_10001085C(a3, (SEL *)&selRef_agent);
      if (v26) {
        uint64_t v27 = v25;
      }
      else {
        uint64_t v27 = 0LL;
      }
      if (v26) {
        unint64_t v28 = v26;
      }
      else {
        unint64_t v28 = 0xE000000000000000LL;
      }
      uint64_t v29 = sub_100010660(a3);
      if (v29)
      {
        uint64_t v30 = v29 & 0xFFFFFFFFFFFFFF8LL;
        if ((unint64_t)v29 >> 62)
        {
          if (v29 < 0) {
            uint64_t v30 = v29;
          }
          uint64_t v31 = _CocoaArrayWrapper.endIndex.getter(v30);
        }

        else
        {
          uint64_t v31 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        }

        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v31 = 0LL;
      }

      *__int128 v24 = v27;
      v24[1] = v28;
      v24[2] = v31;
      uint64_t v36 = swift_storeEnumTagMultiPayload(v24, v20, 2LL);
      swift_willThrow(v36);
    }

    swift_unknownObjectRelease();

    return v5;
  }

  NSString v16 = String._bridgeToObjectiveC()();
  unint64_t v17 = (unint64_t)[v15 maximumSizeForFeedbackType:v16];

  if ((v17 & 0x8000000000000000LL) == 0)
  {
    *(void *)(v5 + OBJC_IVAR____TtC7parsecd10FileWriter_maxFileSize) = v17;
    goto LABEL_4;
  }

  sub_100010FA8();
  sub_100010F80();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)(v38, v39, v40, v41, v42, v43, v44, v45);
  __break(1u);
  return result;
}

uint64_t sub_10000C4AC()
{
  return swift_retain(v0);
}

uint64_t sub_10000C4B4()
{
  sub_100010AE8(v0 + OBJC_IVAR____TtC7parsecd10FileWriter__fileUrl);
  swift_unknownObjectRelease();
  swift_release();

  return v0;
}

uint64_t sub_10000C51C()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10000C540()
{
  return type metadata accessor for FileWriter(0LL);
}

uint64_t type metadata accessor for FileWriter(uint64_t a1)
{
  uint64_t result = qword_1001D0E28;
  if (!qword_1001D0E28) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FileWriter);
  }
  return result;
}

void sub_10000C580(uint64_t a1)
{
  v4[0] = &unk_10015D4D8;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_10000D05C(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(v2 - 8) + 64LL;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = &unk_10015D4F0;
    v4[6] = &unk_10015D4F0;
    v4[7] = &unk_10015D4F0;
    swift_updateClassMetadata2(a1, 256LL, 8LL, v4, a1 + 80);
  }

void sub_10000C620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for FeedbackFile(0LL);
  sub_100009B94();
  __chkstk_darwin(v9);
  sub_100010FCC();
  sub_100048758();
  sub_1000CB4AC(a3, a4, v5);
  swift_unknownObjectRelease();
  if (!v4)
  {
    uint64_t v10 = *(void **)(v5 + *(int *)(v8 + 20));
    id v11 = v10;
    sub_10000C6F4(v5, v10);

    sub_10000BE38(v5, type metadata accessor for FeedbackFile);
  }

uint64_t sub_10000C6F4(uint64_t a1, void *a2)
{
  uint64_t v5 = __chkstk_darwin(v4);
  char v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v18[-v8 - 8];
  uint64_t v10 = *(void **)(v2 + OBJC_IVAR____TtC7parsecd10FileWriter_fileHandle);
  *(void *)(v2 + OBJC_IVAR____TtC7parsecd10FileWriter_fileHandle) = a2;
  id v11 = a2;

  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v13 = sub_100011020();
  v14(v13);
  sub_100009654((uint64_t)v9, 0LL, 1LL, v12);
  sub_100010A74((uint64_t)v9, (uint64_t)v7);
  uint64_t v15 = v2 + OBJC_IVAR____TtC7parsecd10FileWriter__fileUrl;
  sub_100010BC0(v15, (uint64_t)v18);
  sub_100010ABC((uint64_t)v7, v15, &qword_1001D5ED0);
  return swift_endAccess(v18);
}

uint64_t sub_10000C808(void *a1)
{
  uint64_t result = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (result)
  {
    sub_1000489B0();
    uint64_t v5 = v4;
    uint64_t v6 = sub_10000941C(&qword_1001D1070);
    swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    uint64_t v7 = sub_10000EBF4(v5, 1, 0LL);
    uint64_t result = sub_10003B79C(a1);
    if (v8 >> 60 == 15)
    {
      __break(1u);
    }

    else
    {
      uint64_t v9 = result;
      unint64_t v10 = v8;
      swift_retain(v7);
      id v11 = (os_log_s *)sub_10000CB04();
      swift_release();
      sub_100010A1C(v9, v10);
      if ((_DWORD)v11 == 2)
      {
        if (qword_1001D0508 != -1) {
          swift_once(&qword_1001D0508, sub_100034448);
        }
        uint64_t v12 = sub_100010ED4();
        sub_100010E78(v12, (uint64_t)qword_1001EDBE8);
        os_log_type_t v13 = sub_100010EC4();
        if (os_log_type_enabled(v11, v13))
        {
          id v14 = (_WORD *)sub_100009B20(2LL);
          *id v14 = 0;
          sub_100010E6C((void *)&_mh_execute_header, v11, v13, "Could not write session to file.");
          sub_100010C34((uint64_t)v14);
        }

        sub_10000D010();
      }

      swift_unknownObjectRelease();
      return swift_release();
    }
  }

  return result;
}

uint64_t sub_10000C994(uint64_t a1)
{
  if (!*(void *)(v1 + OBJC_IVAR____TtC7parsecd10FileWriter_fileHandle)) {
    return 2LL;
  }
  id v3 = [objc_allocWithZone(PBDataWriter) init];
  if (!v3) {
    return 2LL;
  }
  uint64_t v4 = v3;
  PBDataWriterWriteSubmessage(v3, a1, 200LL);
  uint64_t result = sub_1000107FC(v4);
  if (v6 >> 60 != 15)
  {
    os_log_type_t v7 = result;
    swift_retain(*(void *)(v1 + OBJC_IVAR____TtC7parsecd10FileWriter_eventWriteSpan));
    sub_1000110B8();
    uint64_t v8 = sub_10000CB04();
    swift_release();
    uint64_t v9 = sub_1000110B8();
    sub_100010A1C(v9, v10);
    if (v8 == 2)
    {
      if (qword_1001D0508 != -1) {
        swift_once(&qword_1001D0508, sub_100034448);
      }
      uint64_t v11 = sub_100010ED4();
      sub_100010E78(v11, (uint64_t)qword_1001EDBE8);
      os_log_type_t v12 = sub_100010EC4();
      if (sub_100010DE4(v12))
      {
        os_log_type_t v13 = (uint8_t *)sub_100009B20(2LL);
        *(_WORD *)os_log_type_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v8, v7, "Error appending data.", v13, 2u);
        sub_100010C34((uint64_t)v13);
        id v14 = v4;
        uint64_t v4 = (void *)v8;
      }

      else
      {
        id v14 = (void *)v8;
      }

      uint64_t v8 = 2LL;
    }

    return v8;
  }

  __break(1u);
  return result;
}

uint64_t sub_10000CB04()
{
  uint64_t v54 = v1;
  uint64_t v55 = v2;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  unint64_t v10 = (os_log_s *)type metadata accessor for DispatchPredicate(0LL);
  uint64_t v11 = *((void *)v10 - 1);
  __chkstk_darwin(v10);
  os_log_type_t v13 = (void *)((char *)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL) + 8);
  id v14 = *(void **)(v3 + 32);
  *os_log_type_t v13 = v14;
  (*(void (**)(void *, void, os_log_s *))(v11 + 104))( v13,  enum case for DispatchPredicate.onQueue(_:),  v10);
  id v15 = v14;
  uint64_t v16 = _dispatchPreconditionTest(_:)(v13);
  uint64_t v17 = (*(uint64_t (**)(void *, os_log_s *))(v11 + 8))(v13, v10);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    swift_once(&qword_1001D0508, sub_100034448);
    uint64_t v19 = sub_100010ED4();
    sub_100010E78(v19, (uint64_t)qword_1001EDBE8);
    os_log_type_t v20 = sub_100010EC4();
    if (sub_100010DE4(v20))
    {
      uint64_t v21 = (_WORD *)sub_100009B20(2LL);
      *uint64_t v21 = 0;
      sub_100010E6C((void *)&_mh_execute_header, v10, (os_log_type_t)v13, "Exception thrown while seeking file");
      sub_100010C34((uint64_t)v21);
    }

    if (v5)
    {
      unint64_t v22 = sub_1000109A4();
      sub_100010EA0((uint64_t)&unk_1001B8398, v22);
      sub_100010EB8(v23, 2);
      sub_100010D88();
    }

    sub_1000110CC();
LABEL_9:

    return 2LL;
  }

  if (!*(void *)(v3 + OBJC_IVAR____TtC7parsecd10FileWriter_fileHandle)) {
    return 2LL;
  }
  __chkstk_darwin(v17);
  v51 = v18;
  uint64_t v16 = v18;
  sub_1000C7040((uint64_t)sub_10001099C, (uint64_t)&v49);
  uint64_t v25 = v24;
  uint64_t v26 = sub_100011054();
  unint64_t v27 = (unint64_t)v25 + v26;
  if (__OFADD__(v25, v26))
  {
    __break(1u);
LABEL_28:
    swift_once(&qword_1001D0508, sub_100034448);
LABEL_14:
    uint64_t v29 = sub_100010ED4();
    sub_100010E78(v29, (uint64_t)qword_1001EDBE8);
    os_log_type_t v30 = sub_100010EC4();
    if (sub_100010DE4(v30))
    {
      uint64_t v31 = (_WORD *)sub_100009B20(2LL);
      _WORD *v31 = 0;
      sub_100010E6C((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "File grew too large.");
      sub_100010C34((uint64_t)v31);
    }

    sub_1000110CC();
    if (v5)
    {
      unint64_t v32 = sub_1000109A4();
      uint64_t v33 = sub_100010EA0((uint64_t)&unk_1001B8398, v32);
      sub_100010EB8(v34, 4);

      swift_errorRelease(v33);
      return 2LL;
    }

    goto LABEL_9;
  }

  uint64_t v28 = OBJC_IVAR____TtC7parsecd10FileWriter_maxFileSize;
  if ((v27 & 0x8000000000000000LL) == 0 && v27 >= *(void *)(v3 + OBJC_IVAR____TtC7parsecd10FileWriter_maxFileSize))
  {
    if (qword_1001D0508 == -1) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }

  v53[0] = v9;
  v53[1] = v7;
  unint64_t v35 = sub_1000109E0();
  ((void (*)(void *, void *, unint64_t))NSFileHandle.write<A>(contentsOf:))( v53,  &type metadata for Data,  v35);
  if (v5)
  {
    uint64_t v36 = sub_100011054();

    ((void (*)(uint64_t))sub_1000AF798)(v36);
  }

  else
  {
  }

  if ((v27 & 0x8000000000000000LL) == 0)
  {
    unint64_t v38 = *(void *)(v3 + v28);
    BOOL v39 = v38 >= v27;
    unint64_t v40 = v38 - v27;
    if (v39) {
      return v40 <= 0x40000;
    }
    __break(1u);
  }

  sub_100010FA8();
  sub_100010F80();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)(v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, (_DWORD)v51);
  __break(1u);
  return result;
}

unint64_t sub_10000CFDC@<X0>(void *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = (unint64_t)[a1 seekToEndOfFile];
  if ((result & 0x8000000000000000LL) != 0) {
    __break(1u);
  }
  else {
    *a2 = result;
  }
  return result;
}

void sub_10000D010()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7parsecd10FileWriter_eventWriteSpan);
  *(void *)(v0 + OBJC_IVAR____TtC7parsecd10FileWriter_eventWriteSpan) = 0LL;
  swift_release(v1);
  uint64_t v2 = OBJC_IVAR____TtC7parsecd10FileWriter_fileHandle;
  [*(id *)(v0 + OBJC_IVAR____TtC7parsecd10FileWriter_fileHandle) closeFile];
  uint64_t v3 = *(void **)(v0 + v2);
  *(void *)(v0 + v2) = 0LL;
}

void sub_10000D05C(uint64_t a1)
{
  if (!qword_1001D46D0)
  {
    uint64_t v2 = type metadata accessor for URL(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1001D46D0);
    }
  }

uint64_t sub_10000D0B4()
{
  return sub_10000C4AC();
}

uint64_t sub_10000D0BC()
{
  uint64_t v1 = sub_10000941C(&qword_1001D10D0);
  uint64_t inited = swift_initStackObject(v1, v18);
  *(_OWORD *)(inited + sub_10000BDD4(v0 + 16) = xmmword_10015D4A0;
  strcpy((char *)(inited + 32), "session_start");
  *(_WORD *)(inited + 46) = -4864;
  id v3 = [v0 sessionStart];
  *(void *)(inited + 48) = v4;
  *(void *)(inited + 72) = &type metadata for Double;
  *(void *)(inited + 80) = 0x746E656761LL;
  *(void *)(inited + 88) = 0xE500000000000000LL;
  uint64_t v5 = sub_100011108((uint64_t)v3, (SEL *)&selRef_agent);
  if (v6) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0LL;
  }
  if (v6) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = 0xE000000000000000LL;
  }
  *(void *)(inited + 96) = v7;
  *(void *)(inited + 104) = v8;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 128) = 0x6975675F72657375LL;
  *(void *)(inited + 136) = 0xE900000000000064LL;
  uint64_t v9 = sub_100011108(v5, (SEL *)&selRef_userGuidString);
  if (v10) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = 0LL;
  }
  if (v10) {
    unint64_t v12 = v10;
  }
  else {
    unint64_t v12 = 0xE000000000000000LL;
  }
  *(void *)(inited + 144) = v11;
  *(void *)(inited + 152) = v12;
  *(void *)(inited + 168) = &type metadata for String;
  strcpy((char *)(inited + 176), "country_code");
  *(_BYTE *)(inited + 189) = 0;
  *(_WORD *)(inited + 190) = -5120;
  uint64_t v13 = sub_100011108(v9, (SEL *)&selRef_countryCode);
  *(void *)(inited + 2sub_10000BDD4(v0 + 16) = &type metadata for String;
  if (v14) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = 0LL;
  }
  if (v14) {
    unint64_t v16 = v14;
  }
  else {
    unint64_t v16 = 0xE000000000000000LL;
  }
  *(void *)(inited + 192) = v15;
  *(void *)(inited + 200) = v16;
  return Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
}

void *sub_10000D228(uint64_t a1, uint64_t a2, void *a3)
{
  v3[3] = 0LL;
  sub_100010D20((uint64_t)(v3 + 2));
  sub_100010D20((uint64_t)(v3 + 4));
  uint64_t v7 = sub_100010ECC();
  v3[5] = 0LL;
  v3[6] = 0LL;
  uint64_t v8 = sub_100009ACC(v7, 24LL);
  uint64_t v9 = (_DWORD *)sub_100009B20(4LL);
  *(void *)(v8 + sub_10000BDD4(v0 + 16) = v9;
  *uint64_t v9 = 0;
  v3[7] = v8;
  v3[3] = a2;
  swift_unknownObjectWeakAssign(v3 + 2, a1);
  swift_unknownObjectRelease();
  swift_unknownObjectWeakAssign(v3 + 4, a3);

  return v3;
}

uint64_t sub_10000D2D4(uint64_t a1)
{
  id v3 = *(os_unfair_lock_s **)(v1[7] + 16LL);
  swift_retain(v1);
  os_unfair_lock_lock(v3);
  sub_10000D36C(v1, &v8);
  os_unfair_lock_unlock(v3);
  swift_release();
  if (!(void)v8) {
    return 3LL;
  }
  uint64_t v4 = *((void *)&v8 + 1);
  uint64_t v5 = sub_100010E3C();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v5, v4);
  sub_100010CA0();
  return v6;
}

uint64_t sub_10000D36C@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SessionFileCreationError(0LL);
  __chkstk_darwin(v4);
  if (!a1[5])
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1 + 2);
    if (Strong)
    {
      uint64_t v8 = Strong;
      uint64_t v9 = a1[3];
      uint64_t v10 = swift_unknownObjectWeakLoadStrong(a1 + 4);
      if (v10)
      {
        uint64_t v11 = (void *)v10;
        uint64_t v12 = type metadata accessor for FileWriter(0LL);
        uint64_t v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
        swift_unknownObjectRetain(v8);
        id v14 = v11;
        sub_10000C170(v8, v9, v14);

        swift_unknownObjectRelease();
        a1[5] = v13;
        a1[6] = &off_1001B11E0;
      }

      swift_unknownObjectRelease();
    }
  }

  __int128 v5 = *(_OWORD *)(a1 + 5);
  *a2 = v5;
  return swift_unknownObjectRetain(v5);
}

uint64_t sub_10000D77C()
{
  uint64_t v16 = v1;
  uint64_t v17 = v2;
  id v3 = v0;
  char v5 = v4;
  uint64_t v6 = v0[7];
  if ((v4 & 1) != 0)
  {
    uint64_t v7 = *(os_unfair_lock_s **)(v6 + 16);
    swift_retain(v3);
    os_unfair_lock_lock(v7);
    sub_10000D36C(v3, &v15);
    os_unfair_lock_unlock(v7);
    sub_1000110B0();
    uint64_t v9 = *((void *)&v15 + 1);
    uint64_t v8 = v15;
    if ((void)v15)
    {
LABEL_3:
      uint64_t v10 = sub_100010E3C();
      uint64_t v11 = *(uint64_t (**)(void, uint64_t, uint64_t))(v9 + 24);
      swift_unknownObjectRetain(v8);
      uint64_t v12 = v11(v5 & 1, v10, v9);
      swift_unknownObjectRelease_n(v8, 2LL);
      return v12;
    }
  }

  else
  {
    id v14 = *(os_unfair_lock_s **)(v6 + 16);
    swift_retain(v0);
    os_unfair_lock_lock(v14);
    uint64_t v8 = v0[5];
    uint64_t v9 = v3[6];
    swift_unknownObjectRetain(v3[5]);
    os_unfair_lock_unlock(v14);
    sub_1000110B0();
    if (v8) {
      goto LABEL_3;
    }
  }

  return 0LL;
}

uint64_t sub_10000D85C()
{
  return v0;
}

uint64_t sub_10000D890()
{
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

uint64_t type metadata accessor for LazyFileWriter()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd14LazyFileWriter);
}

void sub_10000D8D8()
{
}

uint64_t sub_10000D8EC(void *a1, int a2)
{
  uint64_t v3 = v2;
  int v65 = a2;
  v63 = a1;
  uint64_t v4 = sub_10000941C(&qword_1001D1078);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v62 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v60 - v7;
  uint64_t v64 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = v2 + 16;
  swift_weakInit(v2 + 16, 0LL);
  *(void *)(v2 + 24) = 0LL;
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 32) = 0LL;
  *(_WORD *)(v2 + 40) = 256;
  *(void *)(v2 + 48) = 0LL;
  *(void *)(v2 + 56) = 0LL;
  *(void *)(v2 + 64) = &_swiftEmptyArrayStorage;
  *(void *)(v2 + 72) = 0LL;
  *(_BYTE *)(v2 + 81) = 0;
  sub_100009788(0LL, (unint64_t *)&qword_1001D1080, &OBJC_CLASS___OS_os_log_ptr);
  v67[0] = qword_1001D6BC8;
  v67[1] = off_1001D6BD0;
  v66[0] = 45LL;
  v66[1] = 0xE100000000000000LL;
  v68[0] = 95LL;
  v68[1] = 0xE100000000000000LL;
  unint64_t v13 = sub_1000106CC();
  uint64_t v14 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v66,  v68,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v13,  v13,  v13);
  uint64_t v16 = v15;
  uint64_t v18 = aDiskwrite[0];
  uint64_t v17 = aDiskwrite[1];
  swift_bridgeObjectRetain(aDiskwrite[1]);
  uint64_t v19 = v18;
  os_log_type_t v20 = v63;
  *(void *)(v3 + 88) = OS_os_log.init(subsystem:category:)(v14, v16, v19, v17);
  uint64_t v21 = v3 + *(void *)(*(void *)v3 + 136LL);
  uint64_t v22 = type metadata accessor for OSSignpostID(0LL);
  sub_100009654(v21, 1LL, 1LL, v22);
  uint64_t v23 = *(void *)(*(void *)v3 + 152LL);
  uint64_t v24 = type metadata accessor for Locker();
  uint64_t v25 = swift_allocObject(v24, 24LL, 7LL);
  uint64_t v26 = (_DWORD *)swift_slowAlloc(4LL, -1LL);
  *(void *)(v25 + sub_10000BDD4(v0 + 16) = v26;
  _DWORD *v26 = 0;
  *(void *)(v3 + v23) = v25;
  Date.init()(v26);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v3 + *(void *)(*(void *)v3 + 144LL), v11, v64);
  swift_weakAssign(v12, v20);
  *(_BYTE *)(v3 + 80) = v65;
  id v27 = *(id *)(v3 + 88);
  swift_retain(v3);
  OSSignpostID.init(log:object:)(v27, v3);
  uint64_t v64 = v22;
  sub_100009654((uint64_t)v8, 0LL, 1LL, v22);
  uint64_t v28 = v3 + *(void *)(*(void *)v3 + 136LL);
  swift_beginAccess(v28, v67, 33LL, 0LL);
  sub_100010ABC((uint64_t)v8, v28, &qword_1001D1078);
  swift_endAccess(v67);
  v67[0] = v3;
  swift_retain(v3);
  uint64_t v29 = String.init<A>(describing:)(v67);
  uint64_t v31 = v30;
  unint64_t v32 = *(os_unfair_lock_s **)(v20[4] + 16LL);
  os_unfair_lock_lock(v32);
  uint64_t v33 = v20 + 2;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v20 + 2);
  if (Strong)
  {
    uint64_t v35 = Strong;
    uint64_t v61 = v28;
    uint64_t v36 = v20[3];
    swift_beginAccess(v20 + 5, v66, 0LL, 0LL);
    uint64_t v37 = v20;
    uint64_t v38 = v20[5];
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v38);
    sub_10000C060(v29, v31, v38);
    uint64_t v40 = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    if (v40)
    {
      uint64_t ObjectType = swift_getObjectType(v35);
      (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v36 + 32))(v3, &off_1001B7B30, ObjectType, v36);
    }

    swift_unknownObjectRelease();
    os_log_type_t v20 = v37;
    uint64_t v28 = v61;
  }

  uint64_t v42 = type metadata accessor for ActivityMonitor.WeakReference();
  uint64_t v43 = swift_allocObject(v42, 32LL, 7LL);
  *(void *)(v43 + 24) = 0LL;
  uint64_t v44 = swift_unknownObjectWeakInit(v43 + 16, 0LL);
  *(void *)(v43 + 24) = &off_1001B7B30;
  swift_unknownObjectWeakAssign(v44, v3);
  swift_beginAccess(v20 + 5, v67, 33LL, 0LL);
  swift_bridgeObjectRetain(v31);
  sub_10000F6F4(v43, v29, v31, (uint64_t)&unk_1001D1090, v45, v46, v47, v48, v60, v61);
  swift_endAccess(v67);
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v32);
  swift_bridgeObjectRelease();
  uint64_t v49 = swift_unknownObjectWeakLoadStrong(v33);
  if (v49)
  {
    uint64_t v50 = v20[3];
    uint64_t v51 = swift_getObjectType(v49);
    (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v50 + 8))(v3, &off_1001B7B30, v51, v50);
    swift_release();
    swift_unknownObjectRelease();
  }

  else
  {
    swift_release();
  }

  uint64_t v52 = v62;
  uint64_t v53 = v64;
  sub_1000107D0(v28, v62, &qword_1001D1078);
  uint64_t result = sub_100010708(v52, 1LL, v53);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    id v55 = *(id *)(v3 + 88);
    uint64_t v56 = static os_signpost_type_t.begin.getter(v55);
    uint64_t v57 = sub_1000C67B8(v65);
    os_signpost(_:dso:log:name:signpostID:)(v56, &_mh_execute_header, v55, v57, v58, v59);

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v53 - 8) + 8LL))(v52, v53);
    swift_release();
    return v3;
  }

  return result;
}

void sub_10000DE34()
{
}

void sub_10000DE48()
{
  v66 = v2;
  v67 = v3;
  uint64_t v4 = v0;
  uint64_t v6 = v5;
  sub_10000941C(&qword_1001D1078);
  sub_100009B94();
  uint64_t v8 = __chkstk_darwin(v7);
  int v65 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v64 - v10;
  uint64_t v12 = sub_100010E34();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = v0 + 16;
  swift_weakInit(v0 + 16, 0LL);
  sub_100010C5C();
  *(void *)(v0 + 64) = &_swiftEmptyArrayStorage;
  *(void *)(v0 + 72) = 0LL;
  *(_BYTE *)(v0 + 80) = 0;
  sub_100009B34(v17, (unint64_t *)&qword_1001D1080, &OBJC_CLASS___OS_os_log_ptr);
  unint64_t v18 = sub_100010B68(0x800000010016AE50LL);
  sub_100010B28(v18, v19, v20, v21, v22, v23, (uint64_t)&type metadata for String);
  sub_100010E04();
  v69[0] = v66(0LL);
  sub_10000941C(v67);
  uint64_t v24 = sub_100010F04();
  uint64_t v26 = OS_os_log.init(subsystem:category:)(v0, v1, v24, v25);
  uint64_t v27 = sub_100010BCC(v26);
  sub_100010F48(v27);
  uint64_t v29 = *(void *)(v28 + 152);
  uint64_t v30 = sub_100010ECC();
  uint64_t v31 = sub_100009ACC(v30, 24LL);
  unint64_t v32 = (_DWORD *)sub_100009B20(4LL);
  *(void *)(v31 + sub_10000BDD4(v0 + 16) = v32;
  *unint64_t v32 = 0;
  *(void *)(v4 + v29) = v31;
  Date.init()(v32);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v4 + *(void *)(*(void *)v4 + 144LL), v15, v12);
  swift_weakAssign(v16, v6);
  uint64_t v33 = sub_100010CC0();
  sub_100010D08();
  OSSignpostID.init(log:object:)(v33, v4);
  sub_100009654((uint64_t)v11, 0LL, 1LL, (uint64_t)v1);
  uint64_t v34 = v4 + *(void *)(*(void *)v4 + 136LL);
  sub_100010BC0(v34, (uint64_t)v69);
  sub_100010ABC((uint64_t)v11, v34, &qword_1001D1078);
  sub_100010CF8();
  v69[0] = v4;
  sub_100010D08();
  uint64_t v35 = sub_100010F04();
  uint64_t v37 = v36;
  uint64_t v38 = *(os_unfair_lock_s **)(v6[4] + 16LL);
  os_unfair_lock_lock(v38);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v6 + 2);
  if (Strong)
  {
    uint64_t v33 = (void *)Strong;
    v66 = (uint64_t (*)(void))v34;
    v67 = v1;
    uint64_t v40 = v6[3];
    sub_100010BE4((uint64_t)(v6 + 5), (uint64_t)&v68, 0LL);
    uint64_t v41 = v6[5];
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v41);
    sub_10000C060(v35, v37, v41);
    uint64_t v43 = v42;
    sub_1000110E0();
    swift_bridgeObjectRelease();
    sub_10001106C();
    if (v43)
    {
      uint64_t v44 = sub_100010E3C();
      sub_100010DAC( (uint64_t)&off_1001B7B30,  v44,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 32));
    }

    sub_100010CA0();
  }

  uint64_t v45 = sub_100011044();
  uint64_t v46 = sub_100009ACC(v45, 32LL);
  uint64_t v47 = sub_100010BEC(v46);
  v33[3] = &off_1001B7B30;
  swift_unknownObjectWeakAssign(v47, v4);
  sub_100010BC0((uint64_t)(v6 + 5), (uint64_t)v69);
  swift_bridgeObjectRetain(v37);
  uint64_t v48 = (uint64_t)v33;
  uint64_t v49 = v6 + 5;
  sub_10000F6F4(v48, v35, v37, (uint64_t)&unk_1001D1090, v50, v51, v52, v53, v62, v63);
  sub_100010CF8();
  sub_1000110E0();
  os_unfair_lock_unlock(v38);
  sub_1000110E0();
  uint64_t v54 = swift_unknownObjectWeakLoadStrong(v6 + 2);
  if (v54)
  {
    uint64_t v49 = (void *)v54;
    uint64_t v55 = v6[3];
    uint64_t ObjectType = swift_getObjectType(v54);
    sub_100010DAC( (uint64_t)&off_1001B7B30,  ObjectType,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 8));
    sub_100010D00();
    uint64_t v57 = sub_100010CA0();
  }

  else
  {
    uint64_t v57 = sub_100010D00();
  }

  uint64_t v59 = (uint64_t)v65;
  sub_100011060(v57, v58, &qword_1001D1078);
  sub_100011004(v59);
  if (v60)
  {
    __break(1u);
  }

  else
  {
    sub_100010CC0();
    uint64_t v61 = sub_1000110E8();
    os_signpost(_:dso:log:name:signpostID:)(v61, &_mh_execute_header, v49, "lifetime", 8LL, 2LL, v59);

    sub_100010E8C();
    sub_1000110B0();
    sub_1000110FC();
    sub_100009AA0();
  }

void sub_10000E21C()
{
  uint64_t v3 = v0;
  unsigned __int8 v54 = v4;
  sub_10000941C(&qword_1001D1078);
  sub_100009B94();
  __chkstk_darwin(v5);
  sub_100010C00(v6, v52);
  __chkstk_darwin(v7);
  sub_100010C78();
  sub_100010F98();
  __chkstk_darwin(v8);
  sub_100010B9C();
  sub_100010C5C();
  *(void *)(v0 + 64) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 72) = 0LL;
  *(_BYTE *)(v0 + 81) = 0;
  uint64_t v10 = sub_100009B34(v9, (unint64_t *)&qword_1001D1080, &OBJC_CLASS___OS_os_log_ptr);
  unint64_t v11 = sub_100010B68((uint64_t)off_1001D4A88);
  sub_100010B28(v11, v12, v13, v14, v15, v16, (uint64_t)&type metadata for String);
  sub_100010E04();
  uint64_t v17 = qword_1001D4A90;
  sub_100010E2C();
  uint64_t v18 = sub_100010DB8();
  uint64_t v19 = sub_100010BCC(v18);
  uint64_t v20 = sub_100010CC8(v19);
  sub_100009ACC(v20, 24LL);
  uint64_t v21 = (_DWORD *)sub_100009B20(4LL);
  sub_100010C8C(v21);
  sub_100010D90();
  sub_100011080();
  *(_BYTE *)(v0 + 80) = v54;
  id v22 = sub_100010CC0();
  sub_100010D08();
  sub_100010D10();
  uint64_t v23 = sub_100010F38();
  sub_100009654(v23, v24, v25, v10);
  uint64_t v26 = v3 + *(void *)(*(void *)v3 + 136LL);
  sub_100010BC0(v26, (uint64_t)v56);
  sub_100010ABC(v2, v26, &qword_1001D1078);
  sub_100010CF8();
  v56[0] = v3;
  sub_100010D08();
  sub_100010F04();
  sub_100010E14();
  uint64_t v27 = sub_100010DF4();
  if (v27)
  {
    id v22 = (id)v27;
    uint64_t v28 = *(void *)(v17 + 24);
    sub_100010BE4(v17 + 40, (uint64_t)&v55, 0LL);
    uint64_t v29 = v17;
    sub_100010DFC();
    sub_100010E2C();
    sub_100010E44(v1);
    uint64_t v31 = v30;
    sub_100010C70();
    sub_1000110A8();
    sub_100011030();
    if (v31)
    {
      uint64_t v32 = sub_100010E3C();
      sub_100010DAC( (uint64_t)&off_1001B7B30,  v32,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 32));
    }

    sub_100010CA0();
    uint64_t v17 = v29;
  }

  uint64_t v33 = sub_100011044();
  uint64_t v34 = sub_100009ACC(v33, 32LL);
  uint64_t v35 = sub_100010BEC(v34);
  sub_100010EAC(v35);
  sub_100010BC0(v17 + 40, (uint64_t)v56);
  sub_100010DFC();
  sub_100010F0C((uint64_t)v22, v1, v36, (uint64_t)&unk_1001D1090, v37, v38, v39, v40, v50, v51);
  sub_100010CF8();
  sub_100010C70();
  sub_10001108C();
  sub_100010C70();
  uint64_t v41 = sub_100010DF4();
  if (v41)
  {
    uint64_t v42 = sub_1000110F0(v41);
    sub_100010F24( (uint64_t)&off_1001B7B30,  v42,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 48));
    sub_100010D00();
    uint64_t v43 = sub_100010CA0();
  }

  else
  {
    uint64_t v43 = sub_100010D00();
  }

  sub_100011060(v43, v44, &qword_1001D1078);
  sub_100011004(v53);
  if (v45)
  {
    __break(1u);
  }

  else
  {
    sub_100010CC0();
    uint64_t v46 = sub_1000110E8();
    uint64_t v47 = sub_100079D04(v54);
    os_signpost(_:dso:log:name:signpostID:)(v46, &_mh_execute_header, v22, v47, v48, v49);

    sub_100010E8C();
    sub_100011030();
    sub_1000110FC();
    sub_100009AA0();
  }

void sub_10000E4FC()
{
  uint64_t v6 = v0;
  char v59 = v7;
  uint64_t v58 = v8;
  sub_10000941C(&qword_1001D1078);
  sub_100009B94();
  __chkstk_darwin(v9);
  sub_100010C00(v10, v54);
  __chkstk_darwin(v11);
  uint64_t v56 = sub_100010C78();
  sub_100010F98();
  __chkstk_darwin(v12);
  sub_100010B9C();
  sub_100010C5C();
  *(void *)(v0 + 64) = &_swiftEmptyArrayStorage;
  *(void *)(v0 + 72) = 0LL;
  *(_BYTE *)(v0 + 81) = 0;
  sub_100009B34(v13, (unint64_t *)&qword_1001D1080, &OBJC_CLASS___OS_os_log_ptr);
  unint64_t v14 = sub_100010B68((uint64_t)off_1001D5DA8);
  sub_100010B28(v14, v15, v16, v17, v18, v19, (uint64_t)&type metadata for String);
  sub_100010E04();
  uint64_t v21 = aQuerycache_2[0];
  uint64_t v20 = aQuerycache_2[1];
  sub_100010E2C();
  uint64_t v22 = OS_os_log.init(subsystem:category:)(v0, v1, v21, v20);
  uint64_t v23 = sub_100010BCC(v22);
  sub_100010F48(v23);
  uint64_t v24 = sub_100010ECC();
  sub_100009ACC(v24, 24LL);
  uint64_t v25 = (_DWORD *)sub_100009B20(4LL);
  sub_100010C8C(v25);
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  uint64_t v27 = v58;
  v26(v6 + *(void *)(*(void *)v6 + 144LL), v3, v56);
  swift_weakAssign(v5, v58);
  *(_BYTE *)(v0 + 80) = v59;
  uint64_t v28 = (uint64_t)sub_100010CC0();
  sub_100010D08();
  sub_100010D10();
  uint64_t v29 = sub_100010F38();
  sub_100009654(v29, v30, v31, v1);
  uint64_t v32 = v6 + *(void *)(*(void *)v6 + 136LL);
  sub_100010BC0(v32, (uint64_t)v61);
  sub_100010ABC(v4, v32, &qword_1001D1078);
  sub_100010CF8();
  v61[0] = v6;
  sub_100010D08();
  uint64_t v33 = sub_100010F04();
  os_unfair_lock_lock(*(os_unfair_lock_t *)(*(void *)(v58 + 32) + 16LL));
  uint64_t v34 = sub_100010DF4();
  if (v34)
  {
    uint64_t v28 = v34;
    uint64_t v57 = v1;
    uint64_t v35 = *(void *)(v58 + 24);
    sub_100010BE4(v58 + 40, (uint64_t)&v60, 0LL);
    sub_100010DFC();
    sub_100010E2C();
    sub_100010E44(v33);
    uint64_t v37 = v36;
    sub_100010C70();
    sub_1000110A8();
    sub_10001106C();
    if (v37)
    {
      uint64_t v38 = sub_100010E3C();
      (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v35 + 32))(v6, &off_1001B7B30, v38, v35);
    }

    sub_100010CA0();
    uint64_t v27 = v58;
    uint64_t v1 = v57;
  }

  uint64_t v39 = sub_100011044();
  uint64_t v40 = sub_100009ACC(v39, 32LL);
  uint64_t v41 = sub_100010BEC(v40);
  sub_100010EAC(v41);
  sub_100010BC0(v27 + 40, (uint64_t)v61);
  sub_100010DFC();
  sub_100010F0C(v28, v33, v42, (uint64_t)&unk_1001D1090, v43, v44, v45, v46, v52, v53);
  sub_100010CF8();
  sub_100010C70();
  sub_10001108C();
  sub_100010C70();
  uint64_t v47 = sub_100010DF4();
  if (v47)
  {
    uint64_t v48 = *(void *)(v27 + 24);
    uint64_t ObjectType = swift_getObjectType(v47);
    sub_100010F24( (uint64_t)&off_1001B7B30,  ObjectType,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 8));
    sub_100010D00();
    sub_100010CA0();
  }

  else
  {
    sub_100010D00();
  }

  sub_1000107D0(v32, v55, &qword_1001D1078);
  sub_100011004(v55);
  if (v50)
  {
    __break(1u);
  }

  else
  {
    id v51 = sub_100010CC0();
    sub_10000EB5C(v55, (uint64_t)v51, v59);

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v55, v1);
    sub_10001106C();
    sub_1000110FC();
    sub_100009AA0();
  }

void sub_10000E834()
{
  uint64_t v3 = v0;
  char v54 = v4;
  sub_10000941C(&qword_1001D1078);
  sub_100009B94();
  __chkstk_darwin(v5);
  sub_100010C00(v6, v50);
  __chkstk_darwin(v7);
  sub_100010C78();
  sub_100010F98();
  __chkstk_darwin(v8);
  sub_100010B9C();
  sub_100010C5C();
  *(void *)(v0 + 64) = &_swiftEmptyArrayStorage;
  *(void *)(v0 + 72) = 0LL;
  *(_BYTE *)(v0 + 81) = 0;
  uint64_t v10 = sub_100009B34(v9, (unint64_t *)&qword_1001D1080, &OBJC_CLASS___OS_os_log_ptr);
  unint64_t v11 = sub_100010B68((uint64_t)off_1001D60F0);
  sub_100010B28(v11, v12, v13, v14, v15, v16, (uint64_t)&type metadata for String);
  sub_100010E04();
  uint64_t v17 = aContextmanager_5[0];
  sub_100010E2C();
  uint64_t v18 = sub_100010DB8();
  uint64_t v19 = sub_100010BCC(v18);
  uint64_t v20 = sub_100010CC8(v19);
  sub_100009ACC(v20, 24LL);
  uint64_t v21 = (_DWORD *)sub_100009B20(4LL);
  sub_100010C8C(v21);
  sub_100010D90();
  sub_100011080();
  *(_BYTE *)(v0 + 80) = v54;
  id v22 = sub_100010CC0();
  sub_100010D08();
  sub_100010D10();
  uint64_t v23 = sub_100010F38();
  sub_100009654(v23, v24, v25, v10);
  uint64_t v26 = v3 + *(void *)(*(void *)v3 + 136LL);
  sub_100010BC0(v26, (uint64_t)v56);
  sub_100010ABC(v2, v26, &qword_1001D1078);
  sub_100010CF8();
  v56[0] = v3;
  sub_100010D08();
  sub_100010F04();
  sub_100010E14();
  uint64_t v27 = sub_100010DF4();
  if (v27)
  {
    id v22 = (id)v27;
    uint64_t v51 = v26;
    uint64_t v53 = v10;
    uint64_t v28 = *(void *)(v17 + 24);
    sub_100010BE4(v17 + 40, (uint64_t)&v55, 0LL);
    uint64_t v29 = v17;
    sub_100010DFC();
    sub_100010E2C();
    sub_100010E44(v1);
    uint64_t v31 = v30;
    sub_100010C70();
    sub_1000110A8();
    sub_100011030();
    if (v31)
    {
      uint64_t v32 = sub_100010E3C();
      sub_100010DAC( (uint64_t)&off_1001B7B30,  v32,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 32));
    }

    sub_100010CA0();
    uint64_t v17 = v29;
    uint64_t v10 = v53;
    uint64_t v26 = v51;
  }

  uint64_t v33 = sub_100011044();
  uint64_t v34 = sub_100009ACC(v33, 32LL);
  uint64_t v35 = sub_100010BEC(v34);
  sub_100010EAC(v35);
  sub_100010BC0(v17 + 40, (uint64_t)v56);
  sub_100010DFC();
  sub_100010F0C((uint64_t)v22, v1, v36, (uint64_t)&unk_1001D1090, v37, v38, v39, v40, v48, v49);
  sub_100010CF8();
  sub_100010C70();
  sub_10001108C();
  sub_100010C70();
  uint64_t v41 = sub_100010DF4();
  if (v41)
  {
    uint64_t v42 = sub_1000110F0(v41);
    sub_100010F24( (uint64_t)&off_1001B7B30,  v42,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 48));
    sub_100010D00();
    sub_100010CA0();
  }

  else
  {
    sub_100010D00();
  }

  sub_1000107D0(v26, v52, &qword_1001D1078);
  if (sub_100010708(v52, 1LL, v10) == 1)
  {
    __break(1u);
  }

  else
  {
    sub_100010CC0();
    uint64_t v43 = sub_1000110E8();
    if (v54)
    {
      if (v54 == 1)
      {
        uint64_t v44 = "contextUpdate";
        uint64_t v45 = 13LL;
      }

      else
      {
        uint64_t v44 = "notBagFetchable";
        uint64_t v45 = 15LL;
      }
    }

    else
    {
      uint64_t v44 = "lifetime";
      uint64_t v45 = 8LL;
    }

    os_signpost(_:dso:log:name:signpostID:)(v43, &_mh_execute_header, v22, v44, v45, 2LL);

    uint64_t v46 = sub_1000110B8();
    v47(v46);
    sub_100011030();
    sub_1000110FC();
    sub_100009AA0();
  }

void sub_10000EB5C(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

uint64_t sub_10000EBA4(uint64_t a1)
{
  return os_signpost(_:dso:log:name:signpostID:)(a1, &_mh_execute_header, v2, "cacheAccess", 11LL, 2LL, v1);
}

uint64_t sub_10000EBF4(void *a1, int a2, uint64_t a3)
{
  *(void *)(v3 + qword_1001D6BE8) = 0LL;
  *(void *)(v3 + *(void *)(*(void *)v3 + 472LL)) = a3;
  return sub_10000D8EC(a1, a2);
}

uint64_t sub_10000EC10(void *a1, int a2, uint64_t a3, int a4)
{
  *(void *)(v4 + qword_1001D6BE8) = 0LL;
  uint64_t v5 = v4 + *(void *)(*(void *)v4 + 472LL);
  *(void *)uint64_t v5 = a3;
  *(_DWORD *)(v5 + 8) = a4;
  return sub_10000D8EC(a1, a2);
}

unint64_t sub_10000EC34(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10000EE10(a1, v4);
}

unint64_t sub_10000EC64(uint64_t a1, uint64_t a2)
{
  Swift::Int v7 = Hasher._finalize()();
  return sub_10000EED4(a1, a2, v7);
}

unint64_t sub_10000ECBC()
{
  uint64_t v0 = sub_100011038();
  return sub_10000EFB4(v0, v1);
}

unint64_t sub_10000ECDC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  sub_1000108E8(&qword_1001D1120, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)(v6, v2, v3);
  Swift::Int v4 = Hasher._finalize()();
  return sub_10000F0C0(a1, v4);
}

unint64_t sub_10000ED5C()
{
  uint64_t v0 = sub_100011038();
  return sub_10000F1CC(v0, v1);
}

unint64_t sub_10000ED7C(uint64_t a1)
{
  uint64_t v3 = static Hasher._hash(seed:_:)(*(void *)(v1 + 40), a1);
  return sub_10000F2E4(a1, v3);
}

unint64_t sub_10000EDAC()
{
  uint64_t v0 = sub_1000110B8();
  dispatch thunk of Hashable._rawHashValue(seed:)(v0, v1, v2);
  uint64_t v3 = sub_100011038();
  return sub_10000F380(v3, v4);
}

unint64_t sub_10000EE10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_100010794(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10000BD34((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

unint64_t sub_10000EED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_10000EFB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_10000941C(&qword_1001D1130);
    id v7 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)(v7, a1);

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)(v10, a1);

        if ((v11 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

unint64_t sub_10000F0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for CancellableStoreKey(0LL);
  __chkstk_darwin(v5);
  char v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    do
    {
      sub_100010920(*(void *)(v2 + 48) + v12 * v10, (uint64_t)v8);
      char v13 = static UUID.== infix(_:_:)(v8, a1);
      sub_10000BE38((uint64_t)v8, type metadata accessor for CancellableStoreKey);
      if ((v13 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

unint64_t sub_10000F1CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_100009788(0LL, (unint64_t *)&qword_1001D10B8, &OBJC_CLASS___SFTopic_ptr);
    id v7 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)(v7, a1);

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)(v10, a1);

        if ((v11 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

unint64_t sub_10000F2E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

unint64_t sub_10000F380(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v18 = a1;
  uint64_t v5 = type metadata accessor for SessionType(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    char v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      sub_1000108E8(&qword_1001D1110, (void (*)(uint64_t))&type metadata accessor for SessionType);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

#error "10000F4F8: call analysis failed (funcsize=17)"
uint64_t sub_10000F504(uint64_t a1, uint64_t a2, double a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  sub_100010CA8();
  sub_100010E50();
  uint64_t v7 = sub_10000FA98(a1, a2, v6, a3);
  sub_100010CB0(v7, v8, v9, v10, v11, v12, v13, v14, v16, v17);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10000F560()
{
  return sub_10000F66C();
}

#error "10000F5C4: call analysis failed (funcsize=23)"
uint64_t sub_10000F5D0( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10)
{
  return sub_10000F750(a1, a2, (uint64_t)sub_10000FC7C, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_10000F5DC()
{
  uint64_t v0 = sub_100010D38();
  id v3 = sub_10000FDB8(v0, v1, v2);
  uint64_t v11 = sub_100010CB0((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v13, v14);
  return sub_100010D28(v11);
}

uint64_t sub_10000F614( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_10000F6F4(a1, a2, a3, (uint64_t)&qword_1001D10E0, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_10000F620()
{
  uint64_t v0 = sub_100010D38();
  unint64_t v3 = sub_10000FED8(v0, v1, v2);
  uint64_t v11 = sub_100010CB0(v3, v4, v5, v6, v7, v8, v9, v10, v13, v14);
  return sub_100010D28(v11);
}

uint64_t sub_10000F658()
{
  return sub_10000F66C();
}

uint64_t sub_10000F66C()
{
  void *v0 = v2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10000F6E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_10000F6F4(a1, a2, a3, (uint64_t)&unk_1001D1090, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_10000F6F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = *v10;
  uint64_t *v10 = a10;
  return sub_100010B54(v11);
}

uint64_t sub_10000F744( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_10000F750(a1, a2, (uint64_t)sub_100010184, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_10000F750( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  sub_100010CA8();
  sub_100010E50();
  v12(v16, v14);
  uint64_t v17 = *v10;
  uint64_t *v10 = a10;
  return sub_100010B54(v17);
}

void sub_10000F79C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v9)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v10 = v7;
  char v11 = v8;
  sub_10000941C((uint64_t *)&unk_1001D10C0);
  if (!sub_100010EDC()) {
    goto LABEL_5;
  }
  unint64_t v12 = sub_10000EC64(a2, a3);
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v10 = v12;
LABEL_5:
  uint64_t v14 = *v3;
  if ((v11 & 1) != 0)
  {
    uint64_t v15 = *(void *)(v14 + 56);
    uint64_t v16 = *(void **)(v15 + 8 * v10);
    *(void *)(v15 + 8 * v10) = a1;
  }

  else
  {
    sub_100010590(v10, a2, a3, a1, v14);
    swift_bridgeObjectRetain(a3);
  }

_OWORD *sub_10000F884(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v11 = sub_10000EC64(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v11;
  char v17 = v12;
  sub_10000941C(&qword_1001D10D8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_10000EC64(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if ((v17 & 1) != 0)
  {
    uint64_t v21 = (void *)(v20[7] + 32 * v16);
    sub_1000108B8(v21);
    return sub_1000108D8(a1, v21);
  }

  else
  {
    sub_1000102C8(v16, a2, a3, a1, v20);
    return (_OWORD *)swift_bridgeObjectRetain(a3);
  }

id sub_10000F9A0( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  char v19 = v18;
  char v21 = v20;
  uint64_t v23 = v22;
  Swift::Int v24 = *v18;
  uint64_t v37 = v25;
  sub_10000ECBC();
  sub_100010C20();
  if (v28)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v29 = v26;
  char v30 = v27;
  sub_10000941C(&qword_1001D1138);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(v21 & 1, v24)) {
    goto LABEL_5;
  }
  unint64_t v31 = sub_10000ECBC();
  if ((v30 & 1) != (v32 & 1))
  {
LABEL_9:
    uint64_t v36 = sub_10000941C(&qword_1001D1130);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v36);
    __break(1u);
    return result;
  }

  unint64_t v29 = v31;
LABEL_5:
  uint64_t v33 = (void *)*v19;
  if ((v30 & 1) != 0)
  {
    uint64_t v34 = v33[7];
    id result = (id)swift_bridgeObjectRelease();
    *(void *)(v34 + 8 * v29) = v23;
  }

  else
  {
    sub_100010330(v29, (uint64_t)v37, v23, v33);
    return v37;
  }

  return result;
}

uint64_t sub_10000FA98(uint64_t a1, uint64_t a2, char a3, double a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v11 = sub_10000EC64(a1, a2);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v16 = v11;
  char v17 = v12;
  sub_10000941C(&qword_1001D1140);
  uint64_t result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v15);
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t result = sub_10000EC64(a1, a2);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  unint64_t v16 = result;
LABEL_5:
  char v20 = *v5;
  if ((v17 & 1) != 0)
  {
    *(double *)(v20[7] + 8 * vsub_10000BDD4(v0 + 16) = a4;
  }

  else
  {
    sub_100010374(v16, a1, a2, v20, a4);
    return swift_bridgeObjectRetain(a2);
  }

  return result;
}

void sub_10000FBA8()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  sub_10000EC64(v3, v1);
  sub_100010C20();
  if (v11)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v12 = v9;
  char v13 = v10;
  sub_10000941C(&qword_1001D10A0);
  if (!sub_100010EF0()) {
    goto LABEL_5;
  }
  unint64_t v14 = sub_100010FE4();
  if ((v13 & 1) != (v15 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v12 = v14;
LABEL_5:
  unint64_t v16 = *v0;
  if ((v13 & 1) != 0)
  {
    char v17 = (uint64_t *)(v16[7] + 16 * v12);
    swift_bridgeObjectRelease();
    *char v17 = v8;
    v17[1] = v6;
    sub_100009AA0();
  }

  else
  {
    sub_1000103BC(v12, v4, v2, v8, v6, v16);
    sub_100010B84(v2);
  }

void sub_10000FC7C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CancellableStoreKey(0LL);
  __chkstk_darwin(v8);
  char v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v11 = (void *)*v3;
  unint64_t v12 = sub_10000ECDC(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v13 & 1) == 0;
  Swift::Int v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v17 = v12;
  char v18 = v13;
  sub_10000941C(&qword_1001D1128);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v16)) {
    goto LABEL_5;
  }
  unint64_t v19 = sub_10000ECDC(a2);
  if ((v18 & 1) != (v20 & 1))
  {
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }

  unint64_t v17 = v19;
LABEL_5:
  char v21 = *v4;
  if ((v18 & 1) != 0)
  {
    uint64_t v22 = v21[7];
    swift_release();
    *(void *)(v22 + 8 * v17) = a1;
  }

  else
  {
    sub_100010920(a2, (uint64_t)v10);
    sub_100010408(v17, (uint64_t)v10, a1, v21);
  }

id sub_10000FDB8(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v8 = sub_10000ED5C();
  uint64_t v10 = v7[2];
  BOOL v11 = (v9 & 1) == 0;
  Swift::Int v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v13 = v8;
  char v14 = v9;
  sub_10000941C(&qword_1001D10B0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v12)) {
    goto LABEL_5;
  }
  unint64_t v15 = sub_10000ED5C();
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_9:
    uint64_t v21 = sub_100009788(0LL, (unint64_t *)&qword_1001D10B8, &OBJC_CLASS___SFTopic_ptr);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
    __break(1u);
    return result;
  }

  unint64_t v13 = v15;
LABEL_5:
  unint64_t v17 = *v4;
  if ((v14 & 1) != 0)
  {
    uint64_t v18 = v17[7];
    uint64_t v19 = v18 + *(void *)(*(void *)(type metadata accessor for TopicCacheEntry(0LL) - 8) + 72LL) * v13;
    return (id)sub_100010714(a1, v19);
  }

  else
  {
    sub_1000104A0(v13, (uint64_t)a2, a1, v17);
    return a2;
  }

unint64_t sub_10000FED8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  unint64_t v8 = (void *)*v3;
  unint64_t v9 = sub_10000ED7C(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v14 = v9;
  char v15 = v10;
  sub_10000941C(&qword_1001D10E8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_10000ED7C(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
    __break(1u);
    return result;
  }

  unint64_t v14 = v16;
LABEL_5:
  uint64_t v18 = *v4;
  if ((v15 & 1) == 0) {
    return sub_100010330(v14, a2, a1, v18);
  }
  uint64_t v19 = v18[7];
  unint64_t result = swift_release();
  *(void *)(v19 + 8 * v14) = a1;
  return result;
}

uint64_t sub_10000FFD4()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  sub_100010DD4(v9, v7, v5);
  sub_100010C20();
  if (v13)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v14 = v11;
  char v15 = v12;
  sub_10000941C(v4);
  if (!sub_100010EF0()) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_100010FE4();
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }

  unint64_t v14 = v16;
LABEL_5:
  uint64_t v18 = *v0;
  if ((v15 & 1) != 0)
  {
    uint64_t v19 = *(void *)(v18 + 56);
    uint64_t v20 = v2(0LL);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 40LL))( v19 + *(void *)(*(void *)(v20 - 8) + 72LL) * v14,  v10,  v20);
  }

  else
  {
    sub_10001052C(v14, v8, v6, v10, v18);
    return sub_100010B84(v6);
  }

void sub_1000100C0()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  sub_100010DD4(v7, v5, v3);
  sub_100010C20();
  if (v11)
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v12 = v9;
  char v13 = v10;
  sub_10000941C(v2);
  if (!sub_100010EDC()) {
    goto LABEL_5;
  }
  unint64_t v14 = sub_10000EC64(v6, v4);
  if ((v13 & 1) != (v15 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return;
  }

  unint64_t v12 = v14;
LABEL_5:
  if ((v13 & 1) != 0)
  {
    uint64_t v16 = *(void *)(*(void *)v0 + 56LL);
    swift_release(*(void *)(v16 + 8 * v12));
    *(void *)(v16 + 8 * v12) = v8;
    sub_100009AA0();
  }

  else
  {
    sub_100010FC0();
    sub_100010590(v17, v18, v19, v8, v20);
    sub_100010B84(v4);
  }

uint64_t sub_100010184(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for SessionType(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = (void *)*v3;
  unint64_t v13 = sub_10000EDAC();
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v18 = v13;
  char v19 = v14;
  sub_10000941C(&qword_1001D1100);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_10000EDAC();
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v4;
  if ((v19 & 1) != 0)
  {
    uint64_t v23 = v22[7];
    uint64_t result = swift_release();
    *(void *)(v23 + 8 * v18) = a1;
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    return sub_1000105BC(v18, (uint64_t)v11, a1, v22);
  }

  return result;
}

_OWORD *sub_1000102C8(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_1000108D8(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t sub_100010330(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1LL << result;
  *(void *)(a4[6] + 8 * result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1LL);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

unint64_t sub_100010374(unint64_t result, uint64_t a2, uint64_t a3, void *a4, double a5)
{
  a4[(result >> 6) + 8] |= 1LL << result;
  BOOL v5 = (void *)(a4[6] + 16 * result);
  *BOOL v5 = a2;
  v5[1] = a3;
  *(double *)(a4[7] + 8 * result) = a5;
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

unint64_t sub_1000103BC( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1LL << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  BOOL v7 = (void *)(a6[7] + 16 * result);
  void *v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

void sub_100010408(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CancellableStoreKey(0LL);
  sub_100010964(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1, type metadata accessor for CancellableStoreKey);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1LL);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
}

void sub_1000104A0(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for TopicCacheEntry(0LL);
  sub_100010964(a3, v7 + *(void *)(*(void *)(v8 - 8) + 72LL) * a1, type metadata accessor for TopicCacheEntry);
  uint64_t v9 = a4[2];
  BOOL v10 = __OFADD__(v9, 1LL);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a4[2] = v11;
  }
}

void sub_10001052C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(v8 + 56);
  uint64_t v11 = v10(0LL);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))( v9 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  a4,  v11);
  uint64_t v12 = *(void *)(a5 + 16);
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a5 + sub_10000BDD4(v0 + 16) = v14;
    sub_1000110D4();
  }

unint64_t sub_100010590(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result = sub_100010D5C(a1, a2, a3, a4, a5);
  *(void *)(*(void *)(v6 + 56) + 8 * result) = v7;
  uint64_t v8 = *(void *)(v6 + 16);
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    *(void *)(v6 + sub_10000BDD4(v0 + 16) = v10;
  }
  return result;
}

uint64_t sub_1000105BC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for SessionType(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_100010654(void *a1)
{
  return sub_10001085C(a1, (SEL *)&selRef_agent);
}

uint64_t sub_100010660(void *a1)
{
  id v1 = [a1 feedbacks];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = sub_100009788(0LL, (unint64_t *)&unk_1001D36A0, &OBJC_CLASS____CPFeedbackPayload_ptr);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

unint64_t sub_1000106CC()
{
  unint64_t result = qword_1001D1088;
  if (!qword_1001D1088)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1001D1088);
  }

  return result;
}

uint64_t sub_100010708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t sub_100010714(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TopicCacheEntry(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100010758(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100010794(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_1000107D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100010FF4(a1, a2, a3);
  sub_100010F18(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  sub_100009A90();
}

uint64_t sub_1000107FC(void *a1)
{
  id v1 = [a1 immutableData];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10001085C(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v4;
}

uint64_t sub_1000108B8(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

_OWORD *sub_1000108D8(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_1000108E8(unint64_t *a1, void (*a2)(uint64_t))
{
  if (!*a1)
  {
    a2(255LL);
    uint64_t v3 = sub_100011038();
    atomic_store(swift_getWitnessTable(v3, v4), a1);
  }

  sub_100009A90();
}

uint64_t sub_100010920(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CancellableStoreKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_100010964(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3(0LL);
  sub_100010F18(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_100009A90();
}

unint64_t sub_10001099C@<X0>(unint64_t *a1@<X8>)
{
  return sub_10000CFDC(*(void **)(v1 + 16), a1);
}

unint64_t sub_1000109A4()
{
  unint64_t result = qword_1001D1148;
  if (!qword_1001D1148)
  {
    unint64_t result = swift_getWitnessTable(&unk_100163320, &unk_1001B8398);
    atomic_store(result, (unint64_t *)&qword_1001D1148);
  }

  return result;
}

unint64_t sub_1000109E0()
{
  unint64_t result = qword_1001D1150;
  if (!qword_1001D1150)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1001D1150);
  }

  return result;
}

uint64_t sub_100010A1C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100010A30(result, a2);
  }
  return result;
}

uint64_t sub_100010A30(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100010A74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001D5ED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_100010ABC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100010FF4(a1, a2, a3);
  sub_100010F18(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 40LL));
  sub_100009A90();
}

uint64_t sub_100010AE8(uint64_t a1)
{
  uint64_t v2 = sub_10000941C(&qword_1001D5ED0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100010B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v7 - 144,  v7 - 96,  0LL,  0LL,  0LL,  1LL,  a7,  a7,  a7,  a1,  a1,  a1);
}

uint64_t sub_100010B54(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

unint64_t sub_100010B68@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 120) = v1;
  *(void *)(v2 - 112) = a1;
  *(void *)(v2 - 144) = 45LL;
  *(void *)(v2 - 136) = 0xE100000000000000LL;
  *(void *)(v2 - 96) = 95LL;
  *(void *)(v2 - 88) = 0xE100000000000000LL;
  return sub_1000106CC();
}

uint64_t sub_100010B84(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_100010B9C()
{
  return swift_weakInit(v0 + 16, 0LL);
}

uint64_t sub_100010BC0(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 33LL, 0LL);
}

uint64_t sub_100010BCC(uint64_t a1)
{
  *(void *)(v1 + 88) = a1;
  return type metadata accessor for OSSignpostID(0LL);
}

uint64_t sub_100010BE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0LL);
}

uint64_t sub_100010BEC(uint64_t a1)
{
  *(void *)(a1 + 24) = 0LL;
  return swift_unknownObjectWeakInit(a1 + 16, 0LL);
}

void sub_100010C00(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

  ;
}

uint64_t sub_100010C34(uint64_t a1)
{
  return swift_slowDealloc(a1, -1LL, -1LL);
}

void sub_100010C40()
{
  void *v0 = 0x8000000000000000LL;
}

void sub_100010C5C()
{
  *(void *)(v0 + 24) = 0LL;
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 32) = 0LL;
  *(_WORD *)(v0 + 40) = 256;
  *(void *)(v0 + 48) = 0LL;
  *(void *)(v0 + 56) = 0LL;
}

uint64_t sub_100010C70()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100010C78()
{
  return type metadata accessor for Date(0LL);
}

uint64_t sub_100010C8C(_DWORD *a1)
{
  *(void *)(v2 + sub_10000BDD4(v0 + 16) = a1;
  *a1 = 0;
  *(void *)(v1 + v3) = v2;
  return Date.init()();
}

uint64_t sub_100010CA0()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_100010CA8()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_100010CB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  uint64_t *v10 = a10;
  return result;
}

id sub_100010CC0()
{
  return *(id *)(v0 + 88);
}

uint64_t sub_100010CC8(uint64_t a1)
{
  return type metadata accessor for Locker();
}

uint64_t sub_100010CF8()
{
  return swift_endAccess(v0 - 120);
}

uint64_t sub_100010D00()
{
  return swift_release(v0);
}

uint64_t sub_100010D08()
{
  return swift_retain(v0);
}

uint64_t sub_100010D10()
{
  return OSSignpostID.init(log:object:)(v1, v0);
}

uint64_t sub_100010D20(uint64_t a1)
{
  return swift_unknownObjectWeakInit(a1, 0LL);
}

uint64_t sub_100010D28(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_100010D38()
{
  void *v0 = 0x8000000000000000LL;
  return v1;
}

unint64_t sub_100010D5C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1LL << result;
  BOOL v5 = (void *)(*(void *)(a5 + 48) + 16 * result);
  *BOOL v5 = a2;
  v5[1] = a3;
  return result;
}

uint64_t sub_100010D88()
{
  return swift_errorRelease(v0);
}

uint64_t sub_100010D90()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v1 + 32))( v0 + *(void *)(*(void *)v0 + 144LL),  v2,  *(void *)(v3 - 160));
}

uint64_t sub_100010DAC@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(v3, a1, a2, v4);
}

uint64_t sub_100010DB8()
{
  return OS_os_log.init(subsystem:category:)(v0, v2, v3, v1);
}

unint64_t sub_100010DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10000EC64(a2, a3);
}

BOOL sub_100010DE4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100010DF4()
{
  return swift_unknownObjectWeakLoadStrong(v0);
}

uint64_t sub_100010DFC()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

void sub_100010E14()
{
}

uint64_t sub_100010E2C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100010E34()
{
  return type metadata accessor for Date(0LL);
}

uint64_t sub_100010E3C()
{
  return swift_getObjectType(v0);
}

void sub_100010E44(uint64_t a1)
{
}

void sub_100010E50()
{
  void *v0 = 0x8000000000000000LL;
}

void sub_100010E6C(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_100010E78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_1000093D0(a1, a2);
  return Logger.logObject.getter(v2);
}

uint64_t sub_100010E8C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

uint64_t sub_100010EA0(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0LL, 0LL);
}

uint64_t sub_100010EAC(uint64_t a1)
{
  *(void *)(v2 + 24) = v3;
  return swift_unknownObjectWeakAssign(a1, v1);
}

uint64_t sub_100010EB8@<X0>(_BYTE *a1@<X1>, char a2@<W8>)
{
  *a1 = a2;
  return sub_1000AF7BC();
}

uint64_t sub_100010EC4()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_100010ECC()
{
  return type metadata accessor for Locker();
}

uint64_t sub_100010ED4()
{
  return type metadata accessor for Logger(0LL);
}

BOOL sub_100010EDC()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

BOOL sub_100010EF0()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

uint64_t sub_100010F04()
{
  return String.init<A>(describing:)(v0 - 120);
}

uint64_t sub_100010F0C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_10000F6F4(a1, a2, v10, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_100010F18@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_100010F24@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(v3, a1, a2, v4);
}

uint64_t sub_100010F30(uint64_t a1, uint64_t a2)
{
  return sub_100010758(a1, a2);
}

uint64_t sub_100010F38()
{
  return v0;
}

uint64_t sub_100010F48(uint64_t a1)
{
  return sub_100009654(v1, 1LL, 1LL, a1);
}

Swift::Int sub_100010F70()
{
  return NSObject._rawHashValue(seed:)(*(void *)(v0 + 40));
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

unint64_t sub_100010FE4()
{
  return sub_10000EC64(v1, v0);
}

uint64_t sub_100010FF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10000941C(a3);
}

uint64_t sub_100011004(uint64_t a1)
{
  return sub_100010708(a1, 1LL, v1);
}

uint64_t sub_100011020()
{
  return v0;
}

uint64_t sub_100011030()
{
  return swift_release(v0);
}

uint64_t sub_100011038()
{
  return v0;
}

uint64_t sub_100011044()
{
  return type metadata accessor for ActivityMonitor.WeakReference();
}

unint64_t sub_10001104C(uint64_t a1, uint64_t a2)
{
  return sub_10000EC64(a1, a2);
}

uint64_t sub_100011054()
{
  return Data.count.getter(v1, v0);
}

void sub_100011060(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_10001106C()
{
  return swift_release(v0);
}

void *sub_100011074(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, *(void *)(v1 + 40));
}

uint64_t sub_100011080()
{
  return swift_weakAssign(v1, v0);
}

void sub_10001108C()
{
}

  ;
}

uint64_t sub_1000110A8()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000110B0()
{
  return swift_release(v0);
}

uint64_t sub_1000110B8()
{
  return v0;
}

uint64_t sub_1000110C4()
{
  return swift_errorRetain(v0);
}

void sub_1000110CC()
{
}

  ;
}

uint64_t sub_1000110E0()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000110E8()
{
  return static os_signpost_type_t.begin.getter();
}

uint64_t sub_1000110F0(uint64_t a1)
{
  return swift_getObjectType(a1);
}

uint64_t sub_1000110FC()
{
  return v0;
}

uint64_t sub_100011108(uint64_t a1, SEL *a2)
{
  return sub_10001085C(v2, a2);
}

uint64_t sub_100011110(uint64_t a1)
{
  return swift_retain(*(void *)(*(void *)(v1 + 56) + 8 * a1));
}

uint64_t sub_10001111C(uint64_t a1)
{
  uint64_t v3 = swift_weakInit(v1 + 16, 0LL);
  *(_BYTE *)(v1 + 24) = 0;
  swift_weakAssign(v3, a1);
  sub_100010D00();
  return v1;
}

void sub_100011158()
{
  uint64_t v24 = v1;
  uint64_t v25 = v2;
  uint64_t v3 = v0;
  BOOL v5 = v4;
  if (!sub_100014444()) {
    goto LABEL_24;
  }
  sub_100014538();
  if (!v6)
  {
LABEL_23:
    sub_100010D00();
    goto LABEL_24;
  }

  uint64_t v7 = v6;
  if (([v6 smartHistoryEnabled] & 1) == 0)
  {
    sub_100010D00();

    goto LABEL_24;
  }

  if (qword_1001D0530 != -1) {
    swift_once(&qword_1001D0530, sub_1000344F0);
  }
  uint64_t v8 = sub_100010ED4();
  uint64_t v9 = (os_log_s *)sub_1000093D0(v8, (uint64_t)qword_1001EDC60);
  id v10 = v5;
  Logger.logObject.getter(v10);
  os_log_type_t v11 = sub_100014588();
  if (os_log_type_enabled(v9, v11))
  {
    BOOL v12 = (uint8_t *)sub_100009B20(12LL);
    *(_DWORD *)BOOL v12 = 134217984;
    id v22 = sub_1000144A4();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v12 + 4);

    sub_100014564((void *)&_mh_execute_header, v9, v11, "request.triggerEvent %lu", v12);
    sub_100010C34((uint64_t)v12);
  }

  else
  {
  }

  if (sub_1000144A4() != (id)21 && sub_1000144A4() != (id)24 && sub_1000144A4() != (id)1)
  {

    goto LABEL_23;
  }

  id v13 = [v10 queryString];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  uint64_t v16 = v15;

  uint64_t v18 = (uint64_t)sub_1000145D8(v17, "smartHistoryMinimumQueryLength");
  if (v18 >= 1)
  {
    id v19 = sub_1000145D8(v18, "smartHistoryMinimumQueryLength");
    uint64_t v20 = (uint64_t)v19 - 1;
    if (!__OFSUB__(v19, 1LL)) {
      goto LABEL_18;
    }
    __break(1u);
  }

  uint64_t v20 = 0LL;
LABEL_18:
  if (String.count.getter(v14, v16) >= v20)
  {
    swift_bridgeObjectRetain(v16);
    id v21 = v7;
    swift_retain(v3);
    sub_1000125F4(v10, v21, v3, v14, v16, v21, v3);
    sub_100010D00();
  }

  else
  {

    sub_100010D00();
  }

  sub_100009B3C();
LABEL_24:
  sub_1000144F0();
}

void *sub_100011394(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = sub_100014444();
  if (!v7) {
    return &_swiftEmptyArrayStorage;
  }
  if (!sub_100014474(v7) || (sub_100014494(), sub_100014614(), !v3))
  {
    sub_100010D00();
    return &_swiftEmptyArrayStorage;
  }

  if (a3 >= 0xA) {
    uint64_t v8 = 10LL;
  }
  else {
    uint64_t v8 = a3;
  }
  uint64_t v9 = sub_10001ED68(a1, a2, *(_BYTE *)(v3 + 24), v8);
  sub_100010D00();
  sub_100010CA0();
  return (void *)v9;
}

void sub_100011434(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = (int *)type metadata accessor for ECCQuery(0LL);
  sub_100009B94();
  __chkstk_darwin(v8);
  id v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100014444();
  if (v11)
  {
    if (sub_100014474(v11) && (sub_100014494(), sub_100014620(), v3))
    {
      char v12 = *(_BYTE *)(v3 + 24);
      uint64_t v13 = 10LL;
      if (a3 < 0xA) {
        uint64_t v13 = a3;
      }
      *(void *)id v10 = a1;
      *((void *)v10 + 1) = a2;
      v10[16] = v12;
      *((void *)v10 + 3) = v13;
      *((_WORD *)v10 + sub_10000BDD4(v0 + 16) = 0;
      v10[34] = 1;
      uint64_t v14 = (uint64_t)&v10[v7[10]];
      swift_bridgeObjectRetain(a2);
      Date.init(timeIntervalSinceNow:)(-604800.0);
      uint64_t v15 = sub_100010E34();
      sub_100009654(v14, 0LL, 1LL, v15);
      v10[v7[11]] = 1;
      v10[v7[12]] = 1;
      v10[v7[13]] = 1;
      sub_10001EE3C();
      sub_10001443C();
      sub_100010CA0();
      sub_1000143C4((uint64_t)v10);
    }

    else
    {
      sub_10001443C();
    }
  }

  sub_100009AA0();
}

void sub_100011568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (int *)type metadata accessor for ECCQuery(0LL);
  sub_100009B94();
  __chkstk_darwin(v8);
  id v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100014444();
  if (v11)
  {
    if (sub_100014474(v11) && (sub_100014494(), sub_100014620(), v3))
    {
      char v12 = *(_BYTE *)(v3 + 24);
      *(void *)id v10 = a1;
      *((void *)v10 + 1) = a2;
      v10[16] = v12;
      *((void *)v10 + 3) = a3;
      *((_WORD *)v10 + sub_10000BDD4(v0 + 16) = 0;
      v10[34] = 1;
      uint64_t v13 = (uint64_t)&v10[v7[10]];
      uint64_t v14 = sub_100010E34();
      sub_100009654(v13, 1LL, 1LL, v14);
      v10[v7[11]] = 1;
      v10[v7[12]] = 0;
      v10[v7[13]] = 0;
      swift_bridgeObjectRetain(a2);
      sub_10001EE3C();
      sub_10001443C();
      sub_100010CA0();
      sub_1000143C4((uint64_t)v10);
    }

    else
    {
      sub_10001443C();
    }
  }

  sub_100009AA0();
}

void sub_100011680()
{
  uint64_t v44 = v1;
  uint64_t v45 = v2;
  uint64_t v3 = v0;
  char v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = sub_100010E34();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_100009AEC();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = sub_100014444();
  if (!v13) {
    goto LABEL_13;
  }
  if (sub_100014474(v13) && (uint64_t v14 = sub_100014494(), sub_100010CA0(), v14))
  {
    sub_100082F44();
    if (v15)
    {
      uint64_t v16 = (uint64_t)[v15 smartHistorySampleThreshold];
      uint64_t v17 = Date.init()(v16);
      double v18 = Date.timeIntervalSince1970.getter(v17);
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
      if ((~*(void *)&v18 & 0x7FF0000000000000LL) != 0)
      {
        if (v18 > -9.22337204e18)
        {
          if (v18 < 9.22337204e18)
          {
            if ((uint64_t)v18 % 100 >= v16
              || (sub_1000142C8(v7, (SEL *)&selRef_fbr), !v19)
              || (Data.init(base64Encoded:options:)(), unint64_t v21 = v20, sub_100009B3C(), v21 >> 60 == 15))
            {
              sub_10001443C();
              sub_10001449C();
LABEL_12:
              sub_1000144CC();
LABEL_13:
              sub_1000144D4();
              return;
            }

            id v22 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
            sub_100014590();
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            id v40 = 0LL;
            id v24 = [v22 JSONObjectWithData:isa options:0 error:&v40];

            id v25 = v40;
            if (!v24)
            {
              uint64_t v37 = v25;
              uint64_t v38 = _convertNSErrorToError(_:)(v25);

              swift_willThrow(v39);
              swift_errorRelease(v38);
              sub_1000144CC();
              sub_100014400();
              sub_10001449C();
              goto LABEL_13;
            }

            _bridgeAnyObjectToAny(_:)(v24);
            sub_100010CA0();
            sub_1000108D8(&v41, v43);
            sub_100010758((uint64_t)v43, (uint64_t)&v41);
            uint64_t v26 = sub_10000941C(qword_1001D1310);
            uint64_t v29 = (uint64_t)v40;
            sub_10000BF3C(25452LL, 0xE200000000000000LL, (uint64_t)v40, &v41);
            if (v42)
            {
              if (!sub_100014460(v30, v31, v32, (uint64_t)&type metadata for Bool))
              {
                sub_1000144CC();
                sub_100014400();
                sub_10001449C();
                sub_100009B3C();
                goto LABEL_29;
              }

              if ((v40 & 1) == 0)
              {
                sub_1000108B8(v43);
                sub_100014400();
                sub_10001449C();
                sub_100009B3C();
                goto LABEL_12;
              }

              sub_10000BF3C(113LL, 0xE100000000000000LL, v29, &v41);
              uint64_t v33 = sub_100009B3C();
              if (v42)
              {
                if ((sub_100014460(v33, v34, v35, (uint64_t)&type metadata for String) & 1) != 0)
                {
                  uint64_t v36 = swift_allocObject(&unk_1001B1270, 32LL, 7LL);
                  *(_BYTE *)(v36 + sub_10000BDD4(v0 + 16) = v5 & 1;
                  *(void *)(v36 + 24) = v3;
                  swift_retain(v3);
                  sub_10001F454();
                  sub_1000144CC();
                  sub_100014400();
                  sub_10001449C();
                  sub_10001460C();
                  swift_release();
LABEL_29:
                  sub_1000108B8(v43);
                  goto LABEL_13;
                }

LABEL_25:
                sub_1000144CC();
                sub_100014400();
                sub_10001449C();
                goto LABEL_29;
              }

              sub_1000144CC();
              sub_100014400();
              sub_10001449C();
            }

            else
            {
              sub_1000144CC();
              sub_100014400();
              sub_10001449C();
              sub_100009B3C();
            }

            sub_100014358((uint64_t)&v41, (uint64_t *)&unk_1001D32C0);
            goto LABEL_29;
          }

    uint64_t v13 = (v18 - 1) & v18;
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  double v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    double v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

    sub_10005A27C();
    unint64_t v20 = v27 & v26;
  }

  id v25 = v24 + 3;
  if (v25 >= v21)
  {
LABEL_28:
    swift_release();
    uint64_t v3 = v31;
    goto LABEL_30;
  }

  if (v12[v25])
  {
    uint64_t v16 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v16 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v16 >= v21) {
      goto LABEL_28;
    }
    ++v25;
    if (v12[v16]) {
      goto LABEL_25;
    }
  }

    *(void *)(v34 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a1) - 1;
    uint64_t result = swift_release();
    uint64_t v1 = v32;
  }

  else
  {
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a1) - 1;
  }

  uint64_t v28 = *v1;
  uint64_t v29 = *(void *)(*v1 + 16);
  uint64_t v30 = __OFSUB__(v29, 1LL);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v28 + sub_10000BDD4(v0 + 16) = v31;
    ++*(_DWORD *)(v28 + 36);
  }

  return result;
}

    swift_once(&qword_1001D05D0, sub_10006D4B8);
    goto LABEL_18;
  }

  uint64_t v30 = 1LL;
  uint64_t v31 = a6;
  uint64_t v11 = v49;
  return sub_100009654(v31, v30, 1LL, v11);
}

        return;
      }
    }

    if (qword_1001D05F0 != -1) {
      swift_once(&qword_1001D05F0, sub_10007BA50);
    }
    uint64_t v55 = qword_1001EDDB0;
    swift_retain(qword_1001EDDB0);
    Lock.lock()();
    swift_beginAccess(v55 + 24, &v121, 1LL, 0LL);
    uint64_t v56 = v105;
    if ((*(_BYTE *)(v55 + 24) & 1) != 0)
    {
      Lock.unlock()();
      swift_bridgeObjectRelease();
      swift_release();
      if (qword_1001D0570 != -1) {
        swift_once(&qword_1001D0570, sub_100034744);
      }
      uint64_t v57 = type metadata accessor for Logger(0LL);
      sub_1000093D0(v57, (uint64_t)qword_1001EDCD0);
      uint64_t v35 = v27;
      uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
      uint64_t v38 = static os_log_type_t.default.getter(v36);
      if (os_log_type_enabled(v36, v38))
      {
        uint64_t v39 = swift_slowAlloc(12LL, -1LL);
        id v40 = swift_slowAlloc(32LL, -1LL);
        aBlock[0] = v40;
        *(_DWORD *)uint64_t v39 = 136315138;
        uint64_t v58 = sub_10007CBC4();
        v119 = sub_1000307E0(v58, v59, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, aBlock, v39 + 4);

        swift_bridgeObjectRelease();
        uint64_t v43 = "Throttling warmup for session: %s: already in progress";
        goto LABEL_23;
      }

      goto LABEL_25;
    }

    *(_BYTE *)(v55 + 24) = 1;
    Lock.unlock()();
    swift_release();
    if (qword_1001D0570 != -1) {
      swift_once(&qword_1001D0570, sub_100034744);
    }
    uint64_t v60 = type metadata accessor for Logger(0LL);
    sub_1000093D0(v60, (uint64_t)qword_1001EDCD0);
    uint64_t v62 = v115;
    uint64_t v61 = v116;
    uint64_t v63 = v107;
    v103 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v115 + 16);
    v103(v17, v107, v116);
    uint64_t v64 = v27;
    int v65 = (os_log_s *)Logger.logObject.getter(v64);
    v66 = static os_log_type_t.debug.getter();
    v67 = v66;
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v68 = swift_slowAlloc(22LL, -1LL);
      v102 = swift_slowAlloc(64LL, -1LL);
      aBlock[0] = v102;
      *(_DWORD *)uint64_t v68 = 136315394;
      v101 = v67;
      v69 = sub_10007CBC4();
      v119 = sub_1000307E0(v69, v70, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, aBlock, v68 + 4);

      v71 = swift_bridgeObjectRelease();
      *(_WORD *)(v68 + 12) = 2080;
      v72 = URL.absoluteString.getter(v71);
      v119 = sub_1000307E0(v72, v73, aBlock);
      uint64_t v61 = v116;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, aBlock, v68 + 14);
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v115 + 8))(v17, v61);
      _os_log_impl( (void *)&_mh_execute_header,  v65,  (os_log_type_t)v101,  "Warming up session %s to %s",  (uint8_t *)v68,  0x16u);
      v74 = v102;
      swift_arrayDestroy(v102, 2LL);
      swift_slowDealloc(v74, -1LL, -1LL);
      v75 = v68;
      uint64_t v63 = v107;
      swift_slowDealloc(v75, -1LL, -1LL);
    }

    else
    {

      (*(void (**)(_BYTE *, uint64_t))(v62 + 8))(v17, v61);
    }

    v76 = v108;
    v103(v108, v63, v61);
    v77 = v117;
    URLRequest.init(url:cachePolicy:timeoutInterval:)(v76, 0LL, 60.0);
    URLRequest.cachePolicy.setter(1LL);
    URLRequest.assumesHTTP3Capable.setter(v109 & 1);
    if (v56)
    {
      swift_retain(v33);
      v56(v77);
      sub_10000A65C((uint64_t)v56, v33);
    }

    v78 = sub_10000941C(&qword_1001D4CD0);
    swift_allocObject(v78, 32LL, 7LL);
    v79 = sub_10007B894(0LL);
    Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
    v81 = swift_allocObject(&unk_1001B50D0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v81 + 16, v64);
    v82 = (void *)swift_allocObject(&unk_1001B5148, 48LL, 7LL);
    v82[2] = v79;
    v82[3] = v81;
    v83 = v110;
    v84 = v112;
    v82[4] = v110;
    v82[5] = v84;
    aBlock[4] = (uint64_t)sub_10007DFD4;
    aBlock[5] = (uint64_t)v82;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_10007CE78;
    aBlock[3] = (uint64_t)&unk_1001B5160;
    v85 = _Block_copy(aBlock);
    swift_retain(v79);
    sub_100026250(v83, v84);
    swift_release();
    v86 = [v64 dataTaskWithRequest:isa completionHandler:v85];
    _Block_release(v85);

    v87 = v86;
    sub_10007B998((uint64_t)v86);

    v88 = (uint64_t)v111;
    Date.init()(v89);
    sub_100009654(v88, 0LL, 1LL, v118);
    swift_retain(qword_1001D4C18);
    sub_10004A38C();
    aBlock[0] = v90;
    sub_1000D96F4(v88, countAndFlagsBits, (uint64_t)object);
    sub_10004B580();
    swift_release();
    v91 = v64;
    v92 = (os_log_s *)Logger.logObject.getter(v91);
    v93 = static os_log_type_t.default.getter(v92);
    if (os_log_type_enabled(v92, v93))
    {
      v94 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v95 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v95;
      *(_DWORD *)v94 = 136315138;
      v96 = sub_10007CBC4();
      v119 = sub_1000307E0(v96, v97, aBlock);
      v77 = v117;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, aBlock, v94 + 4);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "Kicked off connection warmup for session %s", v94, 0xCu);
      swift_arrayDestroy(v95, 1LL);
      swift_slowDealloc(v95, -1LL, -1LL);
      swift_slowDealloc(v94, -1LL, -1LL);
    }

    else
    {
    }

    v99 = v104;
    *(float *)&v98 = NSURLSessionTaskPriorityHigh;
    [v87 setPriority:v98];
    objc_msgSend(v87, "set_preconnect:", 1);
    [v87 resume];

    swift_release();
    (*(void (**)(_BYTE *, uint64_t))(v113 + 8))(v77, v99);
  }

  __break(1u);
  return result;
}

        sub_1000C5E94();
        uint64_t v35 = v17;
        uint64_t v7 = v19 + (v18 << 6);
        char v5 = v18;
      }

      unint64_t v20 = (uint64_t *)(*(void *)(v0 + 48) + 16 * v7);
      id v22 = *v20;
      unint64_t v21 = v20[1];
      uint64_t v23 = (uint64_t *)(*(void *)(v0 + 56) + 16 * v7);
      id v24 = *v23;
      id v25 = v23[1];
      v36[2] = v22;
      v36[3] = v21;
      v36[0] = v24;
      v36[1] = v25;
      swift_bridgeObjectRetain(v21);
      uint64_t v26 = swift_bridgeObjectRetain(v25);
      sub_1000C5D60(v26, (uint64_t)v36);
      uint64_t v27 = (_OWORD *)sub_1000C5D90();
      sub_1000108D8(v27, v37);
      sub_1000C5DDC();
      if ((v28 & 1) == 0) {
        break;
      }
      sub_1000C5CC4(v3[6]);
      sub_1000C5D74();
      sub_1000C5DC0();
      sub_1000C5DE8(v37);
      uint64_t v2 = v35;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    sub_1000C5E80();
    sub_1000C5D10(v29);
    sub_1000108D8(v37, v30);
    uint64_t v31 = v3[2];
    uint64_t v11 = __OFADD__(v31, 1LL);
    uint64_t v32 = v31 + 1;
    if (v11) {
      goto LABEL_33;
    }
    v3[2] = v32;
    uint64_t v2 = v35;
  }

  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
}

    uint64_t v8 = (v14 - 1) & v14;
    uint64_t v37 = v15;
    uint64_t v10 = __clz(__rbit64(v14)) + (v15 << 6);
LABEL_26:
    double v18 = v4;
    uint64_t v19 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v10);
    unint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    id v22 = (uint64_t *)(*(void *)(v4 + 56) + 24 * v10);
    uint64_t v23 = *v22;
    id v24 = v22[2];
    swift_bridgeObjectRetain(v21);
    sub_10005A62C();
    sub_1000145E8();
    sub_10003EF98();
    id v25 = sub_10000EC64(v20, v21);
    uint64_t v27 = v26;
    sub_100010C70();
    if ((v27 & 1) == 0) {
      goto LABEL_33;
    }
    uint64_t v28 = (uint64_t *)(*(void *)(a2 + 56) + 24 * v25);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    uint64_t v31 = v28[2];
    swift_bridgeObjectRetain(*v28);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    if ((sub_1000E1534(v29, v23) & 1) == 0 || (uint64_t v32 = sub_1000E373C(), (sub_1000E2460(v32, v33) & 1) == 0))
    {
      swift_bridgeObjectRelease();
      sub_100010C70();
      sub_1000110E0();
LABEL_33:
      sub_1000110E0();
      sub_10001450C();
      sub_1000145F0();
      return;
    }

    sub_1000E2C84(v31, v24);
    uint64_t v35 = v34;
    sub_1000110E0();
    sub_10001450C();
    sub_10001460C();
    sub_1000145F0();
    swift_bridgeObjectRelease();
    sub_100010C70();
    char v4 = v18;
    char v5 = v37;
    if ((v35 & 1) == 0) {
      return;
    }
  }

  sub_1000C5E08();
  if (v12 == v13) {
    return;
  }
  uint64_t v14 = *(void *)(v36 + 8 * v16);
  if (v14)
  {
    uint64_t v15 = v16;
    goto LABEL_25;
  }

  while (!__OFADD__(v16, 1LL))
  {
    sub_1000E366C();
    if (v12 == v13) {
      return;
    }
    uint64_t v14 = *(void *)(v36 + 8 * v15);
    uint64_t v16 = v17 + 1;
    if (v14) {
      goto LABEL_25;
    }
  }

  __break(1u);
  return result;
}

  if (!v15) {
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

          swift_release();
          swift_release();
          return;
        }
      }
    }

  sub_1000E5710();
}

LABEL_34:
          __break(1u);
        }
      }

      else
      {
        __break(1u);
      }

      __break(1u);
      goto LABEL_34;
    }

    sub_10001443C();
    swift_unknownObjectRelease();
  }

  else
  {
    swift_release();
  }

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

    if (v61 < v44)
    {
      if (__OFSUB__(v61, v45)) {
        goto LABEL_162;
      }
      if (v61 - v45 < v62) {
        break;
      }
    }

      swift_release();
      swift_unknownObjectRelease();
      return (uint64_t)a1;
    }

      swift_release();
      swift_unknownObjectRelease();
      return (uint64_t)a1;
    }

uint64_t sub_100011AB0(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v8 = a1;
  uint64_t v7 = &type metadata for Int;
  v6[0] = a2 & 1;
  swift_bridgeObjectRetain(a1);
  sub_1000D95A8((uint64_t)v6, 101LL, 0xE100000000000000LL);
  uint64_t v4 = *(unsigned __int8 *)(a3 + 24);
  uint64_t v7 = &type metadata for UInt;
  v6[0] = v4;
  sub_1000D95A8((uint64_t)v6, 99LL, 0xE100000000000000LL);
  sub_10001295C(v8);
  return swift_bridgeObjectRelease();
}

void sub_100011B48(uint64_t a1)
{
  uint64_t v2 = v1;
  if (qword_1001D0530 != -1) {
    swift_once(&qword_1001D0530, sub_1000344F0);
  }
  uint64_t v4 = sub_100010ED4();
  uint64_t v5 = sub_1000093D0(v4, (uint64_t)qword_1001EDC60);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  uint64_t v8 = v7;
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v9 = (uint8_t *)sub_10001441C();
    *(_WORD *)uint64_t v9 = 0;
    sub_10001447C((void *)&_mh_execute_header, v6, (os_log_type_t)v8, "ECC: received engagement feedback", v9);
    sub_100010C34((uint64_t)v9);
  }

  if (!swift_weakLoadStrong(v2 + 16))
  {
    oslog = (os_log_s *)sub_100014514();
    os_log_type_t v23 = static os_log_type_t.error.getter(oslog, v22);
    if (os_log_type_enabled(oslog, v23))
    {
      id v24 = (uint8_t *)sub_10001441C();
      *(_WORD *)id v24 = 0;
      sub_10001447C((void *)&_mh_execute_header, oslog, v23, "ECC: No client state", v24);
      sub_100010C34((uint64_t)v24);
    }

    goto LABEL_24;
  }

  sub_100014538();
  if (v10)
  {
    oslog = v10;
    id v11 = -[os_log_s smartHistoryEnabled](v10, "smartHistoryEnabled");
    if ((_DWORD)v11)
    {
      id v12 = sub_1000145D8((uint64_t)v11, "result");
      if (v12)
      {
        id v52 = v12;
        sub_100012C58();
        (*(void (**)(uint64_t))(*(void *)v2 + 264LL))(a1);
        if (v13)
        {
          if ([v52 typeForPQC] != (id)2) {
            sub_100011680();
          }
          sub_100011E50(v52);
          int v14 = sub_100010D00();
          sub_1000145C8(v14, v15, v16, v17, v18, v19, v20, v21, (uint64_t)v52, oslog);

          swift_bridgeObjectRelease();
          return;
        }

        sub_100014514();
        os_log_type_t v40 = sub_100014588();
        if (sub_100010DE4(v40))
        {
          __int128 v41 = (_WORD *)sub_10001441C();
          sub_10001457C(v41);
          sub_10001444C((void *)&_mh_execute_header, v42, v43, "ECC: failed to resolve suggestion");
          sub_100010C34(a1);
        }

        int v44 = sub_100010D00();
        sub_1000145C8(v44, v45, v46, v47, v48, v49, v50, v51, (uint64_t)v52, oslog);
        uint64_t v39 = v54;
LABEL_25:

        return;
      }

      uint64_t v8 = sub_100014514();
      os_log_type_t v37 = static os_log_type_t.error.getter(v8, v36);
      if (!sub_100010DE4(v37)) {
        goto LABEL_23;
      }
      uint64_t v38 = (_WORD *)sub_10001441C();
      sub_10001457C(v38);
      uint64_t v35 = "ECC: result is not set";
    }

    else
    {
      sub_100014514();
      os_log_type_t v31 = sub_100014588();
      if (!sub_100010DE4(v31))
      {
LABEL_23:

        sub_100010D00();
LABEL_24:
        uint64_t v39 = oslog;
        goto LABEL_25;
      }

      uint64_t v32 = (_WORD *)sub_10001441C();
      sub_10001457C(v32);
      uint64_t v35 = "ECC: smart history is disabled";
    }

    sub_10001444C((void *)&_mh_execute_header, v33, v34, v35);
    sub_100010C34(a1);
    goto LABEL_23;
  }

  id v25 = (void *)sub_100014514();
  os_log_type_t v27 = static os_log_type_t.error.getter(v25, v26);
  if (sub_100010DE4(v27))
  {
    uint64_t v28 = (_WORD *)sub_10001441C();
    sub_10001457C(v28);
    sub_10001444C((void *)&_mh_execute_header, v29, v30, "ECC: No bag");
    sub_100010C34(a1);
  }

  swift_release();
}

void sub_100011E50(void *a1)
{
  uint64_t v4 = sub_100010E34();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100009AEC();
  uint64_t v8 = v7 - v6;
  if (((*(uint64_t (**)(void))(*(void *)v2 + 232LL))() & 1) == 0)
  {
    if (qword_1001D0530 != -1) {
      swift_once(&qword_1001D0530, sub_1000344F0);
    }
    uint64_t v26 = sub_100010ED4();
    uint64_t v42 = (os_log_s *)sub_100010E78(v26, (uint64_t)qword_1001EDC60);
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (!sub_100014544(v27)) {
      goto LABEL_26;
    }
    uint64_t v28 = (uint8_t *)sub_10001441C();
    *(_WORD *)uint64_t v28 = 0;
    uint64_t v29 = "ECC: disabled";
LABEL_25:
    sub_10001447C((void *)&_mh_execute_header, v42, v1, v29, v28);
    sub_100010C34((uint64_t)v28);
    goto LABEL_26;
  }

  uint64_t Strong = swift_weakLoadStrong(v2 + 16);
  if (!Strong)
  {
    if (qword_1001D0530 != -1) {
      swift_once(&qword_1001D0530, sub_1000344F0);
    }
    uint64_t v34 = sub_100010ED4();
    uint64_t v42 = (os_log_s *)sub_100010E78(v34, (uint64_t)qword_1001EDC60);
    os_log_type_t v36 = static os_log_type_t.error.getter(v42, v35);
    if (!sub_100014544(v36)) {
      goto LABEL_26;
    }
    uint64_t v28 = (uint8_t *)sub_10001441C();
    *(_WORD *)uint64_t v28 = 0;
    uint64_t v29 = "ECC: No client state";
    goto LABEL_25;
  }

  uint64_t v10 = Strong;
  if (!sub_100014474(Strong) || (uint64_t v11 = sub_100014494(), sub_100010CA0(), !v11))
  {
    if (qword_1001D0530 != -1) {
      swift_once(&qword_1001D0530, sub_1000344F0);
    }
    uint64_t v30 = sub_100010ED4();
    uint64_t v43 = (void *)sub_100010E78(v30, (uint64_t)qword_1001EDC60);
    os_log_type_t v32 = static os_log_type_t.error.getter(v43, v31);
    if (!sub_100014554(v32))
    {

      sub_100009AA0();
      swift_release();
      return;
    }

    uint64_t v33 = (uint8_t *)sub_10001441C();
    *(_WORD *)uint64_t v33 = 0;
    sub_10001447C((void *)&_mh_execute_header, (os_log_s *)v43, (os_log_type_t)v2, "ECC: cache is missing", v33);
    sub_100010C34((uint64_t)v33);
    sub_100010D00();
    goto LABEL_26;
  }

  swift_unknownObjectRetain(*(void *)(v10 + 64));
  sub_1000145F8();
  uint64_t v12 = sub_100014590();
  sub_1000A5B20(v12, v13);
  sub_100010CA0();
  if (((*(uint64_t (**)(void *))(*(void *)v2 + 256LL))(a1) & 1) == 0)
  {
    if (qword_1001D0530 != -1) {
      swift_once(&qword_1001D0530, sub_1000344F0);
    }
    uint64_t v38 = sub_100010ED4();
    int v44 = (void *)sub_100010E78(v38, (uint64_t)qword_1001EDC60);
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    if (!sub_100014554(v39))
    {

      sub_100010D00();
      sub_100009AA0();
      swift_unknownObjectRelease();
      return;
    }

    os_log_type_t v40 = (_WORD *)sub_10001441C();
    sub_10001457C(v40);
    sub_10001447C( (void *)&_mh_execute_header,  (os_log_s *)v44,  (os_log_type_t)v2,  "ECC: unsupported engagement type",  v2);
    sub_100010C34((uint64_t)v2);
    sub_100010D00();
    swift_unknownObjectRelease();
LABEL_26:
    sub_100009AA0();

    return;
  }

  unsigned int v41 = [a1 type];
  sub_1000142C8(a1, (SEL *)&selRef_userInput);
  if (v15) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = 0LL;
  }
  if (v15) {
    unint64_t v17 = v15;
  }
  else {
    unint64_t v17 = 0xE000000000000000LL;
  }
  uint64_t v18 = sub_100009788(0LL, &qword_1001D44B0, &OBJC_CLASS___PAREngagedResult_ptr);
  Date.init()(v18);
  sub_1000145F8();
  uint64_t v19 = sub_100014590();
  int v21 = (void *)PAREngagedResult.init(_:searchString:type:engagemementTime:)(v19, v20, v16, v17, 1LL, v8);
  [v21 setType:v41];
  Date.init()([v21 setScore:1.0]);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
  [v21 setEngagementTime:isa];

  uint64_t v23 = sub_10000941C((uint64_t *)&unk_1001D0C00);
  uint64_t v24 = swift_allocObject(v23, 40LL, 7LL);
  *(_OWORD *)(v24 + sub_10000BDD4(v0 + 16) = xmmword_10015D570;
  *(void *)(v24 + swift_unknownObjectWeakDestroy(v0 + 32) = v21;
  specialized Array._endMutation()(v24);
  id v25 = v21;
  sub_10001F5A0();
  sub_100010D00();
  sub_100010CA0();

  sub_10001460C();
  sub_100009AA0();
}

uint64_t sub_1000122D0()
{
  uint64_t result = sub_100014444();
  if (result)
  {
    if (sub_100014474(result) && (uint64_t v1 = sub_100014494(), swift_unknownObjectRelease(), v1))
    {
      sub_10001F70C();
      sub_100010D00();
      return swift_unknownObjectRelease();
    }

    else
    {
      return swift_release();
    }
  }

  return result;
}

uint64_t sub_100012374()
{
  uint64_t result = sub_100014444();
  if (result)
  {
    if (sub_100014474(result) && (sub_100014494(), sub_100014614(), v0))
    {
      sub_10001F8E0();
      sub_100010D00();
      return swift_unknownObjectRelease();
    }

    else
    {
      return swift_release();
    }
  }

  return result;
}

uint64_t static Optional<A>.sqlNullable.getter()
{
  return 1LL;
}

uint64_t _s7SQLiter18SQLiteBaseFunctionC4nameSSSgvpfi_0()
{
  return 0LL;
}

void sub_100012454(uint64_t a1, void (*a2)(void), uint64_t a3)
{
}

void sub_100012460(uint64_t a1, void (*a2)(void), uint64_t a3)
{
}

void sub_10001246C( uint64_t a1, void (*a2)(void), uint64_t a3, void (*a4)(uint64_t, void, void (*)(void), uint64_t))
{
  uint64_t v6 = v4;
  uint64_t v10 = sub_100014444();
  if (v10)
  {
    if (sub_100014474(v10))
    {
      uint64_t v11 = sub_100014494();
      swift_unknownObjectRelease();
      if (v11)
      {
        a4(a1, *(unsigned __int8 *)(v6 + 24), a2, a3);
        swift_release();
        swift_unknownObjectRelease();
        return;
      }
    }

    swift_release();
  }

  if (a2)
  {
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(kPARErrorDomain);
    uint64_t v14 = v13;
    uint64_t v15 = sub_10000941C(&qword_1001D10D0);
    uint64_t inited = swift_initStackObject(v15, &v20);
    *(_OWORD *)(inited + sub_10000BDD4(v0 + 16) = xmmword_10015C7F0;
    *(void *)(inited + swift_unknownObjectWeakDestroy(v0 + 32) = 0x6E6F73616572LL;
    *(void *)(inited + 40) = 0xE600000000000000LL;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD00000000000001DLL;
    *(void *)(inited + 56) = 0x800000010016AEB0LL;
    uint64_t v17 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    id v18 = objc_allocWithZone(&OBJC_CLASS___NSError);
    uint64_t v19 = (void *)sub_1000765BC(v12, v14, 500LL, v17);
    a2();
  }

void *sub_1000125F4(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, id a6, uint64_t a7)
{
  id v47 = a2;
  uint64_t v48 = a4;
  uint64_t v12 = sub_10000941C((uint64_t *)&unk_1001D5D20);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for UserAgent(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  id v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Strong = swift_weakLoadStrong(a3 + 16);
  if (Strong)
  {
    uint64_t v20 = Strong;
    uint64_t v45 = v16;
    id v49 = a6;
    id v21 = [a1 queryString];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v24 = v23;

    sub_100082F58();
    int v25 = sub_100010708((uint64_t)v14, 1LL, v15);
    uint64_t v46 = a7;
    uint64_t v44 = v15;
    if (v25 == 1)
    {
      parsecdUserAgent.getter();
      sub_100014358((uint64_t)v14, (uint64_t *)&unk_1001D5D20);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v18, v14, v15);
    }

    uint64_t v27 = String.count.getter(v22, v24);
    else {
      uint64_t v28 = 19LL;
    }
    id v29 = objc_msgSend(a1, "queryId", v44);
    id v30 = objc_allocWithZone(&OBJC_CLASS___SFStartLocalSearchFeedback);
    id v31 = sub_100013EA0(v22, v24, v28, 7LL, (uint64_t)v29);
    uint64_t v32 = *(void *)(v20 + 64);
    sub_100009788(0LL, (unint64_t *)&unk_1001D36A0, &OBJC_CLASS____CPFeedbackPayload_ptr);
    swift_unknownObjectRetain(v32);
    id v33 = v31;
    sub_1000A4734(v33, (uint64_t)[a1 queryId]);
    uint64_t v35 = v34;
    sub_1000A5CB4();
    swift_unknownObjectRelease();

    uint64_t v36 = v48;
    uint64_t v37 = String.count.getter(v48, a5);
    if (v37 >= (uint64_t)[v49 smartHistoryMinimumQueryLength])
    {
      sub_100011394(v36, a5, 1uLL);
      sub_100013B68();
      uint64_t v26 = v38;
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v26 = _swiftEmptyArrayStorage;
    }

    id v39 = [objc_allocWithZone(SFEndLocalSearchFeedback) initWithStartSearch:v33];
    swift_unknownObjectRetain(*(void *)(v20 + 64));
    id v40 = v39;
    sub_1000A4734(v40, (uint64_t)[a1 queryId]);
    uint64_t v42 = v41;
    sub_1000A5CB4();

    swift_release();
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v44);
    swift_bridgeObjectRelease();
    a6 = v49;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v26 = _swiftEmptyArrayStorage;
  }

  swift_release();

  return v26;
}

void sub_10001295C(uint64_t a1)
{
  if (*(void *)(a1 + 16) && (uint64_t v1 = sub_100014444()) != 0)
  {
    if (sub_100014474(v1))
    {
      sub_1000C0A00();
      uint64_t v3 = v2;
      id v4 = objc_allocWithZone(&OBJC_CLASS___SFCustomFeedback);
      id v5 = sub_100013F24(6LL, v3);
      if (v5)
      {
        id v14 = v5;
        id v6 = [(id)objc_opt_self(NSFileManager) defaultManager];
        uint64_t v7 = sub_100077894(6LL);

        sub_1000141F8(v14, (SEL *)&selRef_data);
        if (v9 >> 60 == 15)
        {
          __break(1u);
        }

        else
        {
          uint64_t v10 = v8;
          unint64_t v11 = v9;
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_100010A1C(v10, v11);
          [v7 writeData:isa];

          [v7 closeFile];
          sub_100010D00();
          sub_1000145E0();
          sub_1000144B0();
        }
      }

      else
      {
        sub_100010D00();
        sub_1000144B0();
        swift_unknownObjectRelease();
      }
    }

    else
    {
      sub_1000144B0();
      swift_release();
    }
  }

  else
  {
    sub_1000144B0();
  }

void sub_100012C58()
{
  uint64_t v194 = v0;
  uint64_t v195 = v1;
  v174 = v2;
  sub_100010E34();
  sub_100009B94();
  __chkstk_darwin(v3);
  sub_100014428();
  uint64_t v5 = sub_100014484(v4);
  uint64_t v175 = type metadata accessor for Apple_Parsec_Search_V2_Entity.Topic(v5);
  uint64_t v6 = *(void *)(v175 - 8);
  __chkstk_darwin(v175);
  sub_100014428();
  uint64_t v8 = sub_100014484(v7);
  uint64_t v180 = type metadata accessor for Apple_Parsec_Search_V2_Entity.Category(v8);
  sub_10001456C(*(void *)(v180 - 8));
  __chkstk_darwin(v9);
  sub_100014428();
  uint64_t v11 = sub_100014484(v10);
  uint64_t v182 = type metadata accessor for Apple_Parsec_Search_V2_Entity(v11);
  sub_10001456C(*(void *)(v182 - 8));
  __chkstk_darwin(v12);
  sub_100014428();
  uint64_t v14 = sub_100014484(v13);
  type metadata accessor for BinaryDecodingOptions(v14);
  sub_100009B94();
  __chkstk_darwin(v15);
  sub_100014428();
  uint64_t v186 = v16;
  sub_10000941C(&qword_1001D12E0);
  sub_100009B94();
  __chkstk_darwin(v17);
  sub_100014428();
  uint64_t v19 = v18;
  uint64_t v173 = type metadata accessor for Apple_Parsec_Search_V2_Result(0LL);
  sub_10001456C(*(void *)(v173 - 8));
  __chkstk_darwin(v20);
  sub_100014428();
  uint64_t v22 = sub_100014484(v21);
  uint64_t v23 = type metadata accessor for Client(v22);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  sub_100009AEC();
  uint64_t v27 = v26 - v25;
  uint64_t v28 = type metadata accessor for UserAgent(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  sub_100009AEC();
  uint64_t v32 = v31 - v30;
  sub_10000941C((uint64_t *)&unk_1001D5D20);
  sub_100009B94();
  __chkstk_darwin(v33);
  sub_100009AEC();
  uint64_t v36 = v35 - v34;
  uint64_t v37 = sub_100014444();
  if (!v37) {
    goto LABEL_62;
  }
  uint64_t v172 = v6;
  uint64_t v38 = v37;
  sub_100082F58();
  if (sub_100010708(v36, 1LL, v28))
  {
    sub_10001443C();
    sub_100014358(v36, (uint64_t *)&unk_1001D5D20);
LABEL_62:
    sub_1000144D4();
    return;
  }

  uint64_t v164 = v38;
  uint64_t v39 = sub_100014590();
  v40(v39);
  uint64_t v41 = sub_100014358(v36, (uint64_t *)&unk_1001D5D20);
  UserAgent.client.getter(v41);
  uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v32, v28);
  uint64_t v160 = Client.name.getter(v42);
  uint64_t v163 = v43;
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v27, v23);
  uint64_t v44 = v174;
  sub_1000141F8(v174, (SEL *)&selRef_entityData);
  if (v46 >> 60 == 15)
  {
LABEL_53:
    sub_1000142C8(v44, (SEL *)&selRef_userInput);
    if (v137)
    {
      uint64_t v138 = v136;
      uint64_t v139 = v137;
      sub_1000142C8(v44, (SEL *)&selRef_completedQuery);
      if (v141)
      {
        uint64_t v142 = v140;
        uint64_t v143 = v141;
        if (String.count.getter(v140, v141) > 0)
        {
          uint64_t v144 = sub_10000941C(&qword_1001D12E8);
          uint64_t inited = swift_initStackObject(v144, &v191);
          *(_OWORD *)(inited + sub_10000BDD4(v0 + 16) = xmmword_10015D580;
          *(void *)(inited + swift_unknownObjectWeakDestroy(v0 + 32) = 0x7475706E69LL;
          *(void *)(inited + 40) = 0xE500000000000000LL;
          *(void *)(inited + 48) = v138;
          *(void *)(inited + 56) = v139;
          *(void *)(inited + 64) = 0x7972657571LL;
          *(void *)(inited + 72) = 0xE500000000000000LL;
          *(void *)(inited + 80) = v142;
          *(void *)(inited + 88) = v143;
          Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
          v190[0] = v160;
          v190[1] = v163;
          unint64_t v146 = sub_1000106CC();
          uint64_t v147 = StringProtocol.capitalized.getter(&type metadata for String, v146);
          uint64_t v149 = v148;
          sub_10001450C();
          sub_1000C0D90();
          uint64_t v151 = v150;
          swift_bridgeObjectRelease();
          id v152 = objc_allocWithZone(&OBJC_CLASS___INIntent);
          id v153 = sub_10001412C(v147, v149, 0x656D656761676E45LL, 0xEA0000000000746ELL, v151);
          sub_100009788(0LL, &qword_1001D12F0, &OBJC_CLASS___INInteraction_ptr);
          id v154 = v153;
          id v155 = sub_100013B10(v154, 0LL);
          [v155 donateInteractionWithCompletion:0];

LABEL_61:
          swift_release();
          goto LABEL_62;
        }

        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
    }

    sub_1000145B4((uint64_t)&v190[1]);
    goto LABEL_61;
  }

  uint64_t v47 = v45;
  unint64_t v48 = v46;
  memset(v190, 0, 40);
  sub_100014244(v45, v46);
  BinaryDecodingOptions.init()(v49);
  unint64_t v50 = sub_100014288();
  Message.init(serializedData:extensions:partial:options:)(v47, v48, v190, 0LL, v186, v173, v50);
  v158 = (void *)v47;
  uint64_t v159 = v48;
  sub_100014600(v19, 0LL);
  uint64_t v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v170 + 32))(v171, v19, v173);
  uint64_t v52 = Apple_Parsec_Search_V2_Result.entities.getter(v51);
  uint64_t v167 = *(void *)(v52 + 16);
  if (!v167)
  {
LABEL_39:
    uint64_t v110 = swift_bridgeObjectRelease();
    sub_1000145D0(v110, (SEL *)&selRef_identifier);
    if (v112) {
      uint64_t v113 = v111;
    }
    else {
      uint64_t v113 = 0LL;
    }
    if (v112) {
      uint64_t v114 = v112;
    }
    else {
      uint64_t v114 = 0xE000000000000000LL;
    }
    Date.init()(v111);
    id v115 = objc_allocWithZone(&OBJC_CLASS___PPSource);
    uint64_t v47 = (uint64_t)sub_100014038(0xD000000000000011LL, 0x800000010016AB00LL, 0LL, 0LL, v113, v114, v168);
    sub_1000145F8();
    sub_10000941C(&qword_1001D1130);
    sub_10000941C(&qword_1001D1300);
    sub_100014314();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    uint64_t v117 = sub_1000145F0();
    sub_1000145D0(v117, (SEL *)&selRef_userInput);
    NSString v118 = String._bridgeToObjectiveC()();
    uint64_t v119 = swift_bridgeObjectRelease();
    sub_1000145D0(v119, (SEL *)&selRef_completedQuery);
    v120 = (void *)objc_opt_self(&OBJC_CLASS___PPCustomDonation);
    NSString v121 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v190[0] = 0LL;
    unsigned int v122 = [v120 donateParsecNamedEntitiesAndTopics:isa rawQuery:v118 reformulatedQuery:v121 source:v47 error:v190];

    uint64_t v123 = v190[0];
    uint64_t v55 = (void *)v173;
    if (v122)
    {
      v124 = *(void (**)(uint64_t, uint64_t))(v170 + 8);
      id v125 = (id)v190[0];
      v124(v171, v173);
      sub_10001451C();
    }

    else
    {
      id v126 = (id)v190[0];
      unint64_t v54 = _convertNSErrorToError(_:)(v123);

      swift_willThrow(v127);
      if (qword_1001D0530 != -1) {
LABEL_66:
      }
        swift_once(&qword_1001D0530, sub_1000344F0);
      uint64_t v128 = sub_100010ED4();
      sub_1000093D0(v128, (uint64_t)qword_1001EDC60);
      swift_errorRetain(v54);
      uint64_t v129 = swift_errorRetain(v54);
      v130 = (os_log_s *)Logger.logObject.getter(v129);
      os_log_type_t v131 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v130, v131))
      {
        v132 = (uint8_t *)sub_100009B20(12LL);
        uint64_t v133 = sub_100009B20(32LL);
        v190[0] = v133;
        *(_DWORD *)v132 = 136315138;
        swift_getErrorValue(v54);
        uint64_t v134 = Error.localizedDescription.getter(v189[1], v189[2]);
        uint64_t v188 = sub_1000307E0(v134, v135, v190);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, v189, v132 + 4);
        sub_100009B3C();
        sub_100014530();
        sub_100014530();
        sub_100014564((void *)&_mh_execute_header, v130, v131, "ECC: donateParsecNamedEntitiesAndTopics error %s", v132);
        swift_arrayDestroy(v133, 1LL);
        sub_100010C34(v133);
        sub_100010C34((uint64_t)v132);
      }

      else
      {

        sub_100014530();
        sub_100014530();
      }

      sub_100014530();
      sub_10001451C();
      (*(void (**)(uint64_t, void *))(v170 + 8))(v171, v55);
    }

    sub_1000145B4((uint64_t)&v193);
    uint64_t v44 = v174;
    goto LABEL_53;
  }

  unint64_t v54 = 0LL;
  unint64_t v166 = v52 + ((*(unsigned __int8 *)(v183 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v183 + 80));
  uint64_t v55 = &_swiftEmptyDictionarySingleton;
  *(void *)&__int128 v53 = 134217984LL;
  __int128 v161 = v53;
  uint64_t v56 = v184;
  uint64_t v165 = v52;
  while (1)
  {
    if (v54 >= *(void *)(v52 + 16))
    {
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }

    unint64_t v176 = v54;
    uint64_t v57 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v183 + 16))( v181,  v166 + *(void *)(v183 + 72) * v54,  v182);
    uint64_t v58 = Apple_Parsec_Search_V2_Entity.name.getter(v57);
    uint64_t v60 = v59;
    Apple_Parsec_Search_V2_Entity.category.getter();
    uint64_t v61 = sub_10004761C();
    (*(void (**)(uint64_t, uint64_t))(v179 + 8))(v178, v180);
    id v62 = objc_allocWithZone(&OBJC_CLASS___PPNamedEntity);
    id v63 = sub_100013FAC(v58, v60, v61, 0LL, 0xE000000000000000LL);
    Apple_Parsec_Search_V2_Entity.probabilityScore.getter();
    id v177 = sub_1000145BC(objc_allocWithZone(&OBJC_CLASS___PPScoredItem), "initWithItem:score:");
    uint64_t v64 = Apple_Parsec_Search_V2_Entity.topics.getter();
    uint64_t v65 = *(void *)(v64 + 16);
    if (v65)
    {
      id v169 = v63;
      v190[0] = (uint64_t)_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v65);
      unint64_t v66 = v64 + ((*(unsigned __int8 *)(v172 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80));
      uint64_t v187 = *(void *)(v172 + 72);
      v185 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v172 + 16);
      do
      {
        uint64_t v67 = v185(v56, v66, v175);
        Apple_Parsec_Search_V2_Entity.Topic.identifier.getter(v67);
        id v68 = objc_allocWithZone(&OBJC_CLASS___PPTopic);
        NSString v69 = String._bridgeToObjectiveC()();
        sub_1000145F0();
        id v70 = [v68 initWithTopicIdentifier:v69];

        Apple_Parsec_Search_V2_Entity.Topic.score.getter();
        id v71 = sub_1000145BC(objc_allocWithZone(&OBJC_CLASS___PPScoredItem), "initWithItem:score:");

        uint64_t v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v172 + 8))(v56, v175);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v72);
        uint64_t v73 = *(void *)(v190[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v73);
        uint64_t v74 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v73, v71);
        specialized ContiguousArray._endMutation()(v74);
        v66 += v187;
        --v65;
      }

      while (v65);
      uint64_t v47 = v190[0];
      sub_1000145B4((uint64_t)&v192);
      id v63 = v169;
    }

    else
    {
      sub_1000145F0();
      uint64_t v47 = (uint64_t)_swiftEmptyArrayStorage;
    }

    v75 = v177;
    if (qword_1001D0530 != -1) {
      swift_once(&qword_1001D0530, sub_1000344F0);
    }
    uint64_t v76 = sub_100010ED4();
    v77 = (os_log_s *)sub_1000093D0(v76, (uint64_t)qword_1001EDC60);
    uint64_t v78 = swift_bridgeObjectRetain_n(v47, 2LL);
    Logger.logObject.getter(v78);
    os_log_type_t v79 = sub_100014588();
    if (os_log_type_enabled(v77, v79))
    {
      uint64_t v80 = sub_100009B20(12LL);
      *(_DWORD *)uint64_t v80 = v161;
      if ((unint64_t)v47 >> 62)
      {
        id v107 = v63;
        if (v47 < 0) {
          uint64_t v108 = v47;
        }
        else {
          uint64_t v108 = v47 & 0xFFFFFFFFFFFFFF8LL;
        }
        sub_1000145E8();
        uint64_t v109 = v108;
        id v63 = v107;
        v75 = v177;
        uint64_t v81 = _CocoaArrayWrapper.endIndex.getter(v109);
        sub_10001450C();
      }

      else
      {
        uint64_t v81 = *(void *)((v47 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      sub_10001450C();
      *(void *)(v80 + 4) = v81;
      sub_10001450C();
      sub_100014564((void *)&_mh_execute_header, v77, v79, "ECC: scored topics: %ld", (uint8_t *)v80);
      sub_100010C34(v80);
    }

    else
    {

      swift_bridgeObjectRelease_n(v47, 2LL);
    }

    if (v55[2])
    {
      id v82 = v75;
      unint64_t v83 = sub_10000ECBC();
      if ((v84 & 1) != 0)
      {
        uint64_t v85 = *(void *)(v55[7] + 8 * v83);
        swift_bridgeObjectRetain(v85);

        v190[0] = v85;
        sub_10007E870(v47);
        LODWORD(v85) = v190[0];
        uint64_t v47 = (uint64_t)v63;
        id v86 = v82;
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v55);
        v190[0] = (uint64_t)v55;
        sub_10000F9A0( v85,  (int)v86,  isUniquelyReferenced_nonNull_native,  v88,  v89,  v90,  v91,  v92,  v157,  v158,  v159,  v160,  v161,  *((uint64_t *)&v161 + 1),  v162,  v163,  v164,  v165);
        uint64_t v55 = (void *)v190[0];

        goto LABEL_33;
      }
    }

    unint64_t v54 = v75;
    char v93 = swift_isUniquelyReferenced_nonNull_native(v55);
    v190[0] = (uint64_t)v55;
    unint64_t v94 = sub_10000ECBC();
    uint64_t v96 = v55[2];
    BOOL v97 = (v95 & 1) == 0;
    uint64_t v55 = (void *)(v96 + v97);
    if (__OFADD__(v96, v97)) {
      goto LABEL_64;
    }
    unint64_t v98 = v94;
    char v99 = v95;
    sub_10000941C(&qword_1001D1138);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v93, (Swift::Int)v55)) {
      break;
    }
LABEL_28:
    uint64_t v55 = (void *)v190[0];
    if ((v99 & 1) != 0)
    {
      uint64_t v102 = *(void *)(v190[0] + 56);
      swift_bridgeObjectRelease();
      *(void *)(v102 + 8 * v98) = v47;
    }

    else
    {
      *(void *)(v190[0] + 8 * (v98 >> 6) + 64) |= 1LL << v98;
      *(void *)(v55[6] + 8 * v98) = v54;
      *(void *)(v55[7] + 8 * v98) = v47;
      uint64_t v103 = v55[2];
      BOOL v104 = __OFADD__(v103, 1LL);
      uint64_t v105 = v103 + 1;
      if (v104) {
        goto LABEL_65;
      }
      v55[2] = v105;
      id v106 = (id)v54;
    }

LABEL_33:
    swift_bridgeObjectRelease();
    unint64_t v54 = v176 + 1;
    (*(void (**)(uint64_t, uint64_t))(v183 + 8))(v181, v182);
    uint64_t v52 = v165;
    if (v176 + 1 == v167) {
      goto LABEL_39;
    }
  }

  unint64_t v100 = sub_10000ECBC();
  if ((v99 & 1) == (v101 & 1))
  {
    unint64_t v98 = v100;
    goto LABEL_28;
  }

  uint64_t v156 = sub_10000941C(&qword_1001D1130);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v156);
  __break(1u);
}

id sub_100013B10(void *a1, void *a2)
{
  id v5 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)) initWithIntent:a1 response:a2];

  return v5;
}

void sub_100013B68()
{
  uint64_t v1 = v0;
  if (sub_100014444())
  {
    sub_100014538();
    if (!v2)
    {
LABEL_20:
      sub_100010D00();
      goto LABEL_27;
    }

    uint64_t v3 = v2;
    if ([v2 smartHistoryEnabled])
    {
      if ((unint64_t)v1 >> 62)
      {
        if (v1 < 0) {
          uint64_t v18 = v1;
        }
        else {
          uint64_t v18 = v1 & 0xFFFFFFFFFFFFFF8LL;
        }
        sub_1000145E8();
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v18);
        sub_10001450C();
        if (v4)
        {
LABEL_6:
          if (v4 < 1)
          {
            __break(1u);
          }

          else
          {
            sub_1000145E8();
            for (uint64_t i = 0LL; i != v4; ++i)
            {
              if ((v1 & 0xC000000000000001LL) != 0) {
                id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
              }
              else {
                id v6 = *(id *)(v1 + 8 * i + 32);
              }
              uint64_t v7 = v6;
              uint64_t v8 = PAREngagedResult.toServerSuggestion()();

              if (v8)
              {
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                unint64_t v9 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
                uint64_t v10 = sub_100014590();
                uint64_t v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v11);
                specialized Array._endMutation()(v12);
              }
            }

            sub_10001450C();
            if (!((unint64_t)&_swiftEmptyArrayStorage >> 62))
            {
              uint64_t v13 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_18:
              if (v13 > 1)
              {
                uint64_t v14 = sub_10004EE20(1LL, (unint64_t)&_swiftEmptyArrayStorage);
                sub_1000AC610(v14, v15, v16, v17);

                sub_100010D00();
                goto LABEL_27;
              }

              goto LABEL_20;
            }
          }

          else {
            uint64_t v19 = (void *)((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL);
          }
          swift_bridgeObjectRetain(&_swiftEmptyArrayStorage);
          uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v19);
          sub_10001460C();
          goto LABEL_18;
        }
      }

      else
      {
        uint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (v4) {
          goto LABEL_6;
        }
      }
    }

    sub_100010D00();
  }

LABEL_27:
  sub_1000144F0();
}

    swift_bridgeObjectRelease();
    goto LABEL_28;
  }

  if (qword_1001D0540 != -1) {
    swift_once(&qword_1001D0540, sub_100034544);
  }
  uint64_t v15 = sub_100010ED4();
  uint64_t v44 = (os_log_s *)sub_100010E78(v15, (uint64_t)qword_1001EDC90);
  unint64_t v17 = static os_log_type_t.error.getter(v44, v16);
  if (os_log_type_enabled(v44, v17))
  {
    uint64_t v18 = (_WORD *)sub_10001441C();
    sub_100047288(v18);
    sub_10001447C((void *)&_mh_execute_header, v44, v17, "Could not fetch CC from GEOServices", v0);
    sub_100010C34((uint64_t)v0);
    sub_10001449C();
  }

  else
  {

    swift_unknownObjectRelease(v11);
  }

  _Block_release(v181);
  sub_100009AA0();
}

        sub_1000C5E94();
        uint64_t v28 = v15;
        id v6 = v17 + (v16 << 6);
        uint64_t v4 = v16;
      }

      uint64_t v18 = (void *)(*(void *)(v0 + 48) + 16 * v6);
      uint64_t v19 = v18[1];
      uint64_t v20 = *(void *)(*(void *)(v0 + 56) + 8 * v6);
      v29[1] = *v18;
      void v29[2] = v19;
      v29[0] = v20;
      uint64_t v21 = swift_bridgeObjectRetain(v19);
      sub_1000C5D60(v21, (uint64_t)v29);
      uint64_t v22 = (_OWORD *)sub_1000C5D90();
      sub_1000108D8(v22, v30);
      sub_1000C5DDC();
      if ((v23 & 1) == 0) {
        break;
      }
      sub_1000C5CC4(v3[6]);
      sub_1000C5D74();
      sub_1000C5DC0();
      sub_1000C5DE8(v30);
      uint64_t v2 = v28;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    sub_1000C5E80();
    sub_1000C5D10(v24);
    sub_1000108D8(v30, v25);
    uint64_t v26 = v3[2];
    uint64_t v8 = __OFADD__(v26, 1LL);
    uint64_t v27 = v26 + 1;
    if (v8) {
      goto LABEL_35;
    }
    v3[2] = v27;
    uint64_t v2 = v28;
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

              swift_release();
              return;
            }
          }
        }
      }
    }

                swift_bridgeObjectRetain(a1);
                swift_release();
                return v6;
              }
            }
          }
        }
      }
    }

  __break(1u);
  return result;
}

  __break(1u);
}

      uint64_t v34 = sub_1000F0B60();
      swift_allocError(&type metadata for ValueTypeError, v34, 0LL, 0LL);
      uint64_t v36 = v35;
      uint64_t v37 = sub_1000E6350(v5, v35);
      *(_BYTE *)(v36 + 41) = v6;
      swift_willThrow(v37);
      return;
    }

    if ((_BYTE)v6) {
      goto LABEL_27;
    }
    sub_1000F0F44();
    uint64_t v51 = (int *)&OBJC_IVAR___PBDataReader__pos;
    uint64_t v52 = (int *)&OBJC_IVAR___PBDataReader__error;
    __int128 v53 = 1;
    unint64_t v54 = (int *)&OBJC_IVAR___PBDataReader__length;
    uint64_t v55 = (int *)&OBJC_IVAR___PBDataReader__bytes;
    while (1)
    {
      uint64_t v56 = *v51;
      uint64_t v57 = *(void *)(a1 + v56);
      uint64_t v58 = v57 + 1;
      if (v57 == -1 || v58 > *(void *)(a1 + *v54))
      {
        uint64_t v59 = 0;
        *(_BYTE *)(a1 + *v52) = v53;
      }

      else
      {
        uint64_t v59 = *(_BYTE *)(*(void *)(a1 + *v55) + v57);
        *(void *)(a1 + v56) = v58;
      }

      if ((v59 & 0x80) == 0) {
        break;
      }
      sub_1000F0F50();
      if (v60 >= 9)
      {
        uint64_t v61 = 0;
        goto LABEL_67;
      }
    }

    sub_1000F0F00();
    if (!v91) {
      uint64_t v61 = 0;
    }
LABEL_67:
    *(_DWORD *)a3 = v61;
    *(_BYTE *)(a3 + 57) = 0;
  }

  else
  {
    sub_100019BC4(&v98, a3);
    sub_1000F0F44();
    uint64_t v20 = (int *)&OBJC_IVAR___PBDataReader__pos;
    uint64_t v21 = (int *)&OBJC_IVAR___PBDataReader__error;
    uint64_t v22 = (int *)&OBJC_IVAR___PBDataReader__length;
    uint64_t v23 = (int *)&OBJC_IVAR___PBDataReader__bytes;
    while (1)
    {
      uint64_t v24 = *v20;
      uint64_t v25 = *(void *)(a1 + v24);
      uint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(a1 + *v22))
      {
        sub_1000F0F10();
      }

      else
      {
        LOBYTE(v25) = *(_BYTE *)(*(void *)(a1 + *v23) + v25);
        *(void *)(a1 + v24) = v26;
      }

      uint64_t v27 = ((unint64_t)(v25 & 0x7F) << v19) | v18;
      if ((v25 & 0x80) == 0) {
        break;
      }
      sub_1000F0F50();
      if (v28 >= 9)
      {
        uint64_t v27 = 0LL;
        goto LABEL_25;
      }
    }

    uint64_t v27 = v27;
    if (*(_BYTE *)(a1 + *v21)) {
      uint64_t v27 = 0LL;
    }
LABEL_25:
    *(void *)(a3 + 40) = v27;
    *(void *)(a3 + 48) = 0LL;
    *(_WORD *)(a3 + 56) = 1793;
  }

uint64_t sub_100013D28()
{
  return swift_deallocClassInstance(v0, 25LL, 7LL);
}

uint64_t type metadata accessor for BasicEngagedSuggestionController()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd32BasicEngagedSuggestionController);
}

void sub_100013D6C()
{
}

void sub_100013D8C(uint64_t a1, uint64_t a2, unint64_t a3)
{
}

void sub_100013DAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100013DCC()
{
  return sub_1000122D0();
}

void sub_100013DEC(uint64_t a1, void (*a2)(void), uint64_t a3)
{
}

void sub_100013E0C(uint64_t a1, void (*a2)(void), uint64_t a3)
{
}

uint64_t sub_100013E2C()
{
  return sub_100012374();
}

void sub_100013E60(uint64_t a1)
{
}

void sub_100013E80()
{
}

id sub_100013EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6 = v5;
  if (a2)
  {
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v11 = 0LL;
  }

  id v12 = [v6 initWithInput:v11 triggerEvent:a3 indexType:a4 queryId:a5];

  return v12;
}

id sub_100013F24(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    v5.super.Class isa = 0LL;
  }

  id v6 = [v2 initWithType:a1 jsonFeedback:v5.super.isa];

  return v6;
}

id sub_100013FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5);
  id v11 = [v5 initWithName:v9 category:a3 language:v10];

  return v11;
}

id sub_100014038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a4)
  {
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a4);
  }

  else
  {
    NSString v14 = 0LL;
  }

  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a6);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v17 = [v8 initWithBundleId:v13 groupId:v14 documentId:v15 date:isa];

  uint64_t v18 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8LL))(a7, v18);
  return v17;
}

id sub_10001412C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a5)
  {
    v11.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a5);
  }

  else
  {
    v11.super.Class isa = 0LL;
  }

  id v12 = [v5 initWithDomain:v9 verb:v10 parametersByName:v11.super.isa];

  return v12;
}

void sub_1000141F8(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
    sub_10001462C();
  }

  sub_1000110D4();
}

uint64_t sub_100014244(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_100014288()
{
  unint64_t result = qword_1001D12F8;
  if (!qword_1001D12F8)
  {
    uint64_t v1 = type metadata accessor for Apple_Parsec_Search_V2_Result(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Apple_Parsec_Search_V2_Result, v1);
    atomic_store(result, (unint64_t *)&qword_1001D12F8);
  }

  return result;
}

void sub_1000142C8(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    sub_10001462C();
  }

  sub_1000110D4();
}

unint64_t sub_100014314()
{
  unint64_t result = qword_1001D1308;
  if (!qword_1001D1308)
  {
    uint64_t v1 = sub_1000094A0(&qword_1001D1130);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1001D1308);
  }

  return result;
}

uint64_t sub_100014358(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000941C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_100014394()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000143B8(uint64_t a1)
{
  return sub_100011AB0(a1, *(_BYTE *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000143C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ECCQuery(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100014400()
{
  return swift_release();
}

uint64_t sub_10001441C()
{
  return swift_slowAlloc(2LL, -1LL);
}

  ;
}

uint64_t sub_10001443C()
{
  return swift_release(v0);
}

uint64_t sub_100014444()
{
  return swift_weakLoadStrong(v0 + 16);
}

void sub_10001444C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_100014460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v5 - 192, v5 - 168, v4 + 8, a4, 6LL);
}

uint64_t sub_100014474(uint64_t a1)
{
  return swift_unknownObjectWeakLoadStrong(a1 + 16);
}

void sub_10001447C(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_100014484@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return 0LL;
}

uint64_t sub_100014494()
{
  return sub_100047900();
}

uint64_t sub_10001449C()
{
  return swift_unknownObjectRelease(v0);
}

id sub_1000144A4()
{
  return [v0 *(SEL *)(v1 + 8)];
}

  ;
}

void sub_1000144CC()
{
}

  ;
}

  ;
}

uint64_t sub_10001450C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100014514()
{
  return Logger.logObject.getter();
}

uint64_t sub_10001451C()
{
  return sub_100010A1C(*(void *)(v0 - 552), *(void *)(v0 - 544));
}

uint64_t sub_100014530()
{
  return swift_errorRelease(v0);
}

void sub_100014538()
{
}

BOOL sub_100014544(os_log_type_t a1)
{
  return os_log_type_enabled(*(os_log_t *)(v1 - 96), a1);
}

BOOL sub_100014554(os_log_type_t a1)
{
  return os_log_type_enabled(*(os_log_t *)(v1 - 96), a1);
}

void sub_100014564(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

void sub_10001456C(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

_WORD *sub_10001457C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t sub_100014588()
{
  return static os_log_type_t.debug.getter();
}

uint64_t sub_100014590()
{
  return v0;
}

  ;
}

uint64_t sub_1000145B4@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(a1 - 256));
}

id sub_1000145BC(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2, v3);
}

void sub_1000145C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000145D0(uint64_t a1, SEL *a2)
{
}

id sub_1000145D8(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_1000145E0()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000145E8()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000145F0()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000145F8()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100014600(uint64_t a1, uint64_t a2)
{
  return sub_100009654(a1, a2, 1LL, v2);
}

uint64_t sub_10001460C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100014614()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_100014620()
{
  return swift_unknownObjectRelease(v0);
}

void sub_10001462C()
{
}

uint64_t AtomicValue.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  AtomicValue.init(_:)(a1);
  return v3;
}

char *AtomicValue.init(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = type metadata accessor for Lock();
  swift_allocObject(v4, 24LL, 7LL);
  *((void *)v1 + 2) = Lock.init()();
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8LL) + 32LL))( &v1[*(void *)(*(void *)v1 + 96LL)],  a1);
  return v1;
}

void AtomicValue.load()(uint64_t a1@<X8>)
{
  uint64_t v4 = sub_100014A28();
  swift_beginAccess(v4, v5, 0LL, 0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v2 + 80) - 8LL) + 16LL))(a1, v1);
  Lock.unlock()();
  sub_100014A40();
}

void AtomicValue.store(_:)(uint64_t a1)
{
  uint64_t v4 = sub_100014A28();
  swift_beginAccess(v4, v5, 33LL, 0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v2 + 80) - 8LL) + 24LL))(v1, a1);
  swift_endAccess(v6);
  Lock.unlock()();
  sub_100014A40();
}

void AtomicValue.store(resultOf:)(void (*a1)(_BYTE *))
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v5);
  NSString v9 = &v12[-v8];
  Lock.lock()();
  uint64_t v10 = v1 + *(void *)(*(void *)v1 + 96LL);
  swift_beginAccess(v10, v13, 0LL, 0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v7, v10, v3);
  uint64_t v11 = v14;
  a1(v7);
  sub_100014A18();
  if (!v11)
  {
    swift_beginAccess(v10, v12, 33LL, 0LL);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v4 + 40))(v10, v9, v3);
    swift_endAccess(v12);
  }

  sub_1000148D4();
}

void sub_1000148D4()
{
}

char *AtomicValue.deinit()
{
  uint64_t v1 = *(void *)v0;
  swift_release(*((void *)v0 + 2));
  (*(void (**)(char *))(*(void *)(*(void *)(v1 + 80) - 8LL) + 8LL))(&v0[*(void *)(*(void *)v0 + 96LL)]);
  return v0;
}

uint64_t AtomicValue.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100014960(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 2LL, v4, a1 + 88);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for AtomicValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AtomicValue);
}

uint64_t sub_1000149EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_100014A18()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100014A28()
{
  return v0 + *(void *)(*(void *)v0 + 96LL);
}

  ;
}

void sub_100014A50()
{
}

void sub_100014A5C(uint64_t a1)
{
  uint64_t v2 = v21[0];
  uint64_t v3 = v21[1];
  int64_t v4 = v21[3];
  unint64_t v5 = v21[4];
  int64_t v6 = (unint64_t)(v21[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a1);
  uint64_t v7 = &_swiftEmptyArrayStorage;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v4 << 6);
      goto LABEL_20;
    }

    int64_t v10 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      break;
    }
    if (v10 >= v6) {
      goto LABEL_26;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    int64_t v12 = v4 + 1;
    if (!v11)
    {
      int64_t v12 = v4 + 2;
      if (v4 + 2 >= v6) {
        goto LABEL_26;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v4 + 3;
        if (v4 + 3 >= v6) {
          goto LABEL_26;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v4 + 4;
          if (v4 + 4 >= v6) {
            goto LABEL_26;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v4 + 5;
            if (v4 + 5 >= v6) {
              goto LABEL_26;
            }
            unint64_t v11 = *(void *)(v3 + 8 * v12);
            if (!v11)
            {
              int64_t v13 = v4 + 6;
              while (v13 < v6)
              {
                unint64_t v11 = *(void *)(v3 + 8 * v13++);
                if (v11)
                {
                  int64_t v12 = v13 - 1;
                  goto LABEL_19;
                }
              }

LABEL_26:
              swift_release();
              return;
            }
          }
        }
      }
    }

  sub_100009AA0();
}

  *(double *)&uint64_t result = 0.0;
  return result;
}

  __break(1u);
}

    *a2 = v14;
    return result;
  }

  unint64_t v16 = v26[0];
  uint64_t v28 = v26[1];
  unint64_t v17 = sub_1000F2D38(1LL, a10);
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  swift_bridgeObjectRetain(a10);
  uint64_t v24 = sub_1000F2DA0(v17, v19, v21, v23);
  sub_1000F29B8(v16, v28, v24, a8, a9);
  swift_unknownObjectRelease();
  uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
  uint64_t v14 = *a2 + 1;
  uint64_t v15 = __OFADD__(*a2, 1LL);
  if (v11)
  {
    if (!v15) {
      goto LABEL_26;
    }
    __break(1u);
    goto LABEL_17;
  }

                sub_1000325E4();
                swift_release();
                return v9;
              }
            }
          }
        }
      }
    }

LABEL_19:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    int64_t v4 = v12;
LABEL_20:
    if (!*(void *)(*(void *)(v2 + 56) + 16 * v9 + 8))
    {
      uint64_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v9);
      uint64_t v15 = v14[1];
      uint64_t v22 = *v14;
      swift_bridgeObjectRetain(v15);
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
      {
        sub_1000313E4(0, v7[2] + 1LL, 1, (uint64_t)v7);
        uint64_t v7 = v19;
      }

      unint64_t v17 = v7[2];
      unint64_t v16 = v7[3];
      if (v17 >= v16 >> 1)
      {
        sub_1000313E4(v16 > 1, v17 + 1, 1, (uint64_t)v7);
        uint64_t v7 = v20;
      }

      v7[2] = v17 + 1;
      uint64_t v18 = (char *)&v7[2 * v17];
      *((void *)v18 + 4) = v22;
      *((void *)v18 + 5) = v15;
    }
  }

  __break(1u);
}

  uint64_t v45 = (uint64_t (*)(char *, uint64_t))v46[0];
  ((void (*)(char *, uint64_t))v46[0])(v13, v9);
  return v45(v16, v9);
}

        uint64_t v20 = (v24 - 1) & v24;
        uint64_t v22 = __clz(__rbit64(v24)) + (v16 << 6);
      }

      uint64_t v29 = (uint64_t *)(*(void *)(v94 + 48) + 16 * v22);
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      out_token = -1;
      uint64_t v32 = v91;
      sub_10003ED84(a3, v91);
      uint64_t v33 = *(unsigned __int8 *)(v92 + 80);
      uint64_t v34 = (v33 + 16) & ~v33;
      uint64_t v35 = (v90 + v34) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v36 = (v35 + 23) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v37 = swift_allocObject(&unk_1001B33B8, v36 + 16, v33 | 7);
      sub_10003EEC8(v32, v37 + v34);
      uint64_t v38 = (void *)(v37 + v35);
      *uint64_t v38 = v30;
      v38[1] = v31;
      uint64_t v39 = (void *)(v37 + v36);
      id v40 = v96;
      *uint64_t v39 = v93;
      v39[1] = v40;
      aBlock[4] = sub_10003EF10;
      aBlock[5] = v37;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_10003E8DC;
      aBlock[3] = &unk_1001B33D0;
      uint64_t v41 = _Block_copy(aBlock);
      swift_bridgeObjectRetain_n(v31, 2LL);
      uint64_t v42 = (dispatch_queue_s *)v95;
      swift_retain(v40);
      swift_release();
      uint64_t v43 = (const char *)(String.utf8CString.getter(v30, v31) + 32);
      sub_100010BE4((uint64_t)&out_token, (uint64_t)aBlock, 33LL);
      uint64_t v44 = notify_register_dispatch(v43, &out_token, v42, v41);
      swift_endAccess(aBlock);
      swift_release();
      _Block_release(v41);

      if (!v44) {
        break;
      }
      uint64_t v45 = v89;
      sub_10003ED84(a3, v89);
      unint64_t v46 = sub_100010ED4();
      if (sub_100010708(v45, 1LL, v46) == 1)
      {
        sub_1000110E0();
        sub_10003EDCC(v45);
      }

      else
      {
        uint64_t v61 = sub_10003EF98();
        id v62 = (os_log_s *)Logger.logObject.getter(v61);
        uint64_t v64 = static os_log_type_t.error.getter(v62, v63);
        if (sub_10003EFD0(v64))
        {
          sub_10003EFFC();
          uint64_t v65 = sub_10003EFA0();
          aBlock[0] = v65;
          *(_DWORD *)uint64_t v45 = v83;
          sub_10003EF98();
          unint64_t v66 = sub_10003EFC0();
          sub_10003EFB0(v66);
          *(_WORD *)(v45 + 12) = 1024;
          *(_DWORD *)(v45 + 14) = v44;
          sub_10003F014( (void *)&_mh_execute_header,  v62,  (os_log_type_t)v43,  "Failed to subscribe to notifications for %s - Result: %u");
          swift_arrayDestroy(v65, 1LL);
          uint64_t v67 = v65;
          a3 = v85;
          sub_100010C34(v67);
          id v68 = v45;
          uint64_t v45 = v89;
          sub_100010C34(v68);
        }

        else
        {
          sub_10003EFF0();
        }

        (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8LL))(v45, v46);
      }
    }

    uint64_t v47 = out_token;
    unint64_t v48 = v88;
    sub_100010BE4((uint64_t)v88, (uint64_t)aBlock, 33LL);
    sub_10003EF98();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v48);
    BOOL v97 = (void *)*v48;
    unint64_t v50 = v97;
    *unint64_t v48 = 0x8000000000000000LL;
    uint64_t v51 = sub_10003F008();
    __int128 v53 = v50[2];
    unint64_t v54 = (v52 & 1) == 0;
    uint64_t v55 = v53 + v54;
    if (__OFADD__(v53, v54)) {
      goto LABEL_44;
    }
    uint64_t v56 = v51;
    uint64_t v57 = v52;
    sub_10000941C((uint64_t *)&unk_1001D2A10);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v55)) {
      break;
    }
LABEL_27:
    uint64_t v60 = v97;
    if ((v57 & 1) != 0)
    {
      *(_DWORD *)(v97[7] + 4 * v56) = v47;
    }

    else
    {
      v97[(v56 >> 6) + 8] |= 1LL << v56;
      NSString v69 = (void *)(v60[6] + 16 * v56);
      *NSString v69 = v30;
      v69[1] = v31;
      *(_DWORD *)(v60[7] + 4 * v56) = v47;
      id v70 = v60[2];
      id v71 = __OFADD__(v70, 1LL);
      uint64_t v72 = v70 + 1;
      if (v71) {
        goto LABEL_45;
      }
      v60[2] = v72;
      sub_10003EF98();
    }

    *int v88 = v60;
    sub_1000110E0();
    swift_bridgeObjectRelease();
    swift_endAccess(aBlock);
    a3 = v85;
    uint64_t v73 = v84;
    sub_10003ED84(v85, v84);
    uint64_t v74 = sub_100010ED4();
    if (sub_100010708(v73, 1LL, v74) == 1)
    {
      sub_1000110E0();
      sub_10003EDCC(v73);
    }

    else
    {
      v75 = sub_10003EF98();
      uint64_t v76 = (os_log_s *)Logger.logObject.getter(v75);
      v77 = static os_log_type_t.debug.getter();
      if (sub_10003EFD0(v77))
      {
        sub_10003EFFC();
        uint64_t v78 = sub_10003EFA0();
        aBlock[0] = v78;
        *(_DWORD *)uint64_t v55 = v83;
        sub_10003EF98();
        os_log_type_t v79 = sub_10003EFC0();
        sub_10003EFB0(v79);
        *(_WORD *)(v55 + 12) = 1024;
        *(_DWORD *)(v55 + 14) = out_token;
        sub_10003F014( (void *)&_mh_execute_header,  v76,  isUniquelyReferenced_nonNull_native,  "Successfully subscribed to notifications for %s [token %d]");
        swift_arrayDestroy(v78, 1LL);
        uint64_t v80 = v78;
        uint64_t v73 = v84;
        sub_100010C34(v80);
        sub_100010C34(v55);
      }

      else
      {
        sub_10003EFF0();
      }

      (*(void (**)(uint64_t, uint64_t))(*(void *)(v74 - 8) + 8LL))(v73, v74);
    }
  }

  uint64_t v58 = sub_10003F008();
  if ((v57 & 1) == (v59 & 1))
  {
    uint64_t v56 = v58;
    goto LABEL_27;
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

    sub_10005A27C();
    uint64_t v15 = v26 & v25;
  }

  if (v21 + 3 < v45)
  {
    sub_10005A880();
    if (!v24)
    {
      while (1)
      {
        uint64_t v18 = v23 + 1;
        if (__OFADD__(v23, 1LL)) {
          goto LABEL_38;
        }
        if (v18 >= v45) {
          goto LABEL_31;
        }
        ++v23;
        if (v46[v18]) {
          goto LABEL_19;
        }
      }
    }

    uint64_t v18 = v23;
    goto LABEL_19;
  }

          uint64_t v37 = (v41 - 1) & v41;
          uint64_t v39 = __clz(__rbit64(v41)) + (v33 << 6);
        }

        uint64_t v43 = (uint64_t *)(*(void *)(v96 + 48) + 16 * v39);
        uint64_t v45 = *v43;
        uint64_t v44 = v43[1];
        swift_bridgeObjectRetain(v44);
        unint64_t v46 = String._bridgeToObjectiveC()();
        uint64_t v47 = [v24 urlForIdentifier:v46];

        if (v47) {
          break;
        }
        unint64_t v50 = (uint64_t)v95;
        sub_100009654((uint64_t)v95, 1LL, 1LL, v98);
LABEL_27:
        swift_bridgeObjectRelease();
        sub_100019C1C(v50, &qword_1001D5ED0);
      }

      unint64_t v48 = v90;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v47);

      double v49 = (void (*)(char *, char *, uint64_t))v97[4];
      unint64_t v50 = (uint64_t)v95;
      uint64_t v51 = v48;
      uint64_t v52 = v98;
      v49(v95, v51, v98);
      sub_100009654(v50, 0LL, 1LL, v52);
      __int128 v53 = v91;
      unint64_t v54 = v98;
      v49(v91, (char *)v50, v98);
      if (qword_1001D0520 != -1) {
        swift_once(&qword_1001D0520, sub_1000344B0);
      }
      uint64_t v55 = type metadata accessor for Logger(0LL);
      sub_1000093D0(v55, (uint64_t)qword_1001EDC30);
      uint64_t v56 = v97;
      uint64_t v57 = v85;
      int v89 = (void (*)(char *, char *, uint64_t))v97[2];
      v89(v85, v53, v54);
      uint64_t v58 = swift_bridgeObjectRetain_n(v44, 2LL);
      uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
      uint64_t v64 = static os_log_type_t.info.getter(v59, v60, v61, v62, v63);
      if (os_log_type_enabled(v59, v64))
      {
        uint64_t v65 = v57;
        unint64_t v66 = swift_slowAlloc(22LL, -1LL);
        char v84 = swift_slowAlloc(64LL, -1LL);
        unint64_t v100 = v84;
        *(_DWORD *)unint64_t v66 = v82;
        swift_bridgeObjectRetain(v44);
        *(void *)(v66 + 4) = sub_1000307E0(v45, v44, &v100);
        uint64_t v67 = swift_bridgeObjectRelease_n(v44, 3LL);
        *(_WORD *)(v66 + 12) = 2080;
        unint64_t v83 = v59;
        id v68 = v65;
        NSString v69 = URL.absoluteString.getter(v67);
        *(void *)(v66 + 14) = sub_1000307E0(v69, v70, &v100);
        swift_bridgeObjectRelease();
        id v71 = v98;
        uint64_t v72 = (void (*)(char *, uint64_t))v97[1];
        v72(v68, v98);
        uint64_t v73 = v83;
        _os_log_impl((void *)&_mh_execute_header, v83, v64, "add resource %{public}s from %s", (uint8_t *)v66, 0x16u);
        uint64_t v74 = v84;
        swift_arrayDestroy(v84, 2LL);
        swift_slowDealloc(v74, -1LL, -1LL);
        swift_slowDealloc(v66, -1LL, -1LL);

        v75 = v71;
        uint64_t v76 = v72;
      }

      else
      {
        swift_bridgeObjectRelease_n(v44, 2LL);
        uint64_t v76 = (void (*)(char *, uint64_t))v56[1];
        v75 = v98;
        v76(v57, v98);
      }

      v77 = (uint64_t)v86;
      uint64_t v78 = v91;
      v89(v86, v91, v75);
      sub_100009654(v77, 0LL, 1LL, v75);
      os_log_type_t v79 = v94;
      sub_10006EF1C(v45, v44, v77, v87);
      uint64_t v80 = v75;
      uint64_t v24 = v88;
      unint64_t v94 = v79;
      if (v79)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        sub_100019C1C(v77, &qword_1001D5ED0);
        v76(v78, v80);
        swift_release();
        return;
      }

      swift_bridgeObjectRelease();
      sub_100019C1C(v77, &qword_1001D5ED0);
      v76(v78, v80);
    }
  }

  v116 = v156;
  uint64_t v117 = sub_1000A377C(v93, &type metadata for String, &protocol witness table for String);
  sub_1000A3724( v117,  v118,  v119,  v120,  v121,  v122,  v123,  v124,  v144,  0xD00000000000001ALL,  0x800000010016D950LL,  *(uint64_t *)&v156,  v157,  v158,  v159,  v160,  v161,  v162,  v163);
  swift_bridgeObjectRelease();

  v130 = sub_1000A376C(v125, v126, v127, v128, v129);
  if (v164)
  {
    if ((sub_1000A3734(v130, v131, v132, (uint64_t)&type metadata for Double, v134) & 1) != 0)
    {
      *(double *)&uint64_t result = *(double *)&v153 - v116;
      return result;
    }
  }

  else
  {
    sub_1000A3774(v130, v131, v132, v133, v134, v135, v136, v137, v145, v153);
  }

    uint64_t v14 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
    int64_t v13 = v19;
LABEL_20:
    uint64_t v21 = *(void *)(v12 + 48);
    uint64_t v22 = type metadata accessor for SessionType(0LL);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(*(void *)(v22 - 8) + 16LL))( v11,  v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v16,  v22);
    uint64_t v23 = *(void *)(*(void *)(v12 + 56) + 8 * v16);
    *(void *)&v11[*(int *)(v6 + 48)] = v23;
    sub_1000D1B28((uint64_t)v11, (uint64_t)v9);
    swift_retain(v23);
    sub_100082F58();
    if (sub_100010708((uint64_t)v4, 1LL, v42) == 1)
    {
      sub_100014358((uint64_t)v4, (uint64_t *)&unk_1001D5D20);
      sub_100014358((uint64_t)v9, &qword_1001D7458);
    }

    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v35 + 32))(v36, v4, v42);
      uint64_t v24 = sub_10000941C(&qword_1001D12E8);
      uint64_t inited = swift_initStackObject(v24, v40);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v33;
      *(void *)(inited + swift_unknownObjectWeakDestroy(v0 + 32) = 0x696669746E656469LL;
      *(void *)(inited + 40) = 0xEA00000000007265LL;
      *(void *)(inited + 48) = SessionType.description.getter();
      *(void *)(inited + 56) = v26;
      *(void *)(inited + 64) = 0x746E656761LL;
      *(void *)(inited + 72) = 0xE500000000000000LL;
      *(void *)(inited + 80) = UserAgent.fullString.getter();
      *(void *)(inited + 88) = v27;
      uint64_t v34 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
      (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v36, v42);
      sub_100014358((uint64_t)v9, &qword_1001D7458);
      if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
      {
        sub_100031A70();
        uint64_t v37 = v30;
      }

      uint64_t v28 = v37[2];
      if (v28 >= v37[3] >> 1)
      {
        sub_100031A70();
        uint64_t v37 = v31;
      }

      uint64_t v29 = v37;
      v37[2] = v28 + 1;
      v29[v28 + 4] = v34;
    }
  }

  __break(1u);
}

  if (v14 < 0) {
    uint64_t v28 = v14;
  }
  else {
    uint64_t v28 = v14 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v14);
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v28);
  if (!v15) {
    goto LABEL_23;
  }
LABEL_4:
  if (v15 < 1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v29 = v8;
    uint64_t v3 = 0LL;
    unint64_t v16 = 0LL;
    unint64_t v8 = (void *)(v14 & 0xC000000000000001LL);
    do
    {
      if (v8) {
        unint64_t v17 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v14);
      }
      else {
        unint64_t v17 = (char *)*(id *)(v14 + 8 * v16 + 32);
      }
      uint64_t v18 = v17;
      uint64_t v19 = *(id *)&v17[OBJC_IVAR____TtC7parsecd16ClientConnection_connection];
      uint64_t v20 = [v19 processIdentifier];

      if (v13 == v20 && __OFADD__(v3++, 1LL))
      {
        __break(1u);
        goto LABEL_19;
      }

      ++v16;
    }

    while (v15 != v16);
    swift_bridgeObjectRelease();
    if (v3 <= 2) {
      goto LABEL_17;
    }
    if (qword_1001D0518 == -1) {
      goto LABEL_14;
    }
  }

  swift_once(&qword_1001D0518, sub_100034490);
LABEL_14:
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v23 = sub_1000093D0(v22, (uint64_t)qword_1001EDC18);
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  uint64_t v26 = static os_log_type_t.error.getter(v24, v25);
  if (os_log_type_enabled(v24, v26))
  {
    uint64_t v27 = swift_slowAlloc(18LL, -1LL);
    *(_DWORD *)uint64_t v27 = 134218240;
    uint64_t v30 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v27 + 4);
    *(_WORD *)(v27 + 12) = 1024;
    LODWORD(v30) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 4, v27 + 14);
    _os_log_impl((void *)&_mh_execute_header, v24, v26, "too many connections %ld from pid %d", (uint8_t *)v27, 0x12u);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  else
  {

LABEL_17:
  }

            sub_1000E36C4();
            unint64_t v9 = v12 + (v13 << 6);
            goto LABEL_20;
          }
        }
      }
    }

    return 1LL;
  }

  return 0LL;
}

    int64_t v6 = 0;
  }

  return v6 & 1;
}

uint64_t sub_100014C38(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  BOOL v8 = v4 == v6 && v5 == v7;
  if (v8 || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0LL), uint64_t result = 0LL, (v9 & 1) != 0))
  {
    uint64_t v11 = a1[4];
    uint64_t v12 = a1[5];
    uint64_t v13 = a2[4];
    uint64_t v14 = a2[5];
    BOOL v15 = v11 == v13 && v12 == v14;
    if (v15
      || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v13, v14, 0LL), uint64_t result = 0LL, (v16 & 1) != 0))
    {
      uint64_t v17 = a1[6];
      uint64_t v18 = a1[7];
      uint64_t v19 = a2[6];
      uint64_t v20 = a2[7];
      if (v17 == v19 && v18 == v20) {
        return 1LL;
      }
      else {
        return _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v19, v20, 0LL);
      }
    }
  }

  return result;
}

void *sub_100014CD4()
{
  return v0;
}

uint64_t sub_100014D10()
{
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t type metadata accessor for BagContext()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd10BagContext);
}

uint64_t sub_100014D50(void **a1, void **a2)
{
  return sub_100014C38(*a1, *a2) & 1;
}

void *sub_100014D70(unint64_t *a1)
{
  uint64_t v2 = (unint64_t *)((char *)a1 + *(int *)(type metadata accessor for PegasusContext(0LL) + 80));
  unint64_t v4 = *v2;
  unint64_t v3 = v2[1];
  unint64_t v6 = a1[11];
  unint64_t v5 = a1[12];
  unint64_t v8 = *a1;
  unint64_t v7 = a1[1];
  if (v3 && v5 && v7)
  {
    unint64_t v9 = a1[13];
    if (v9) {
      int64_t v10 = (void *)a1[13];
    }
    else {
      int64_t v10 = &_swiftEmptyArrayStorage;
    }
    unint64_t v11 = a1[19];
    unint64_t v18 = a1[18];
    uint64_t v19 = v10;
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(v9);
    sub_1000152F4((uint64_t)a1);
    uint64_t result = (void *)sub_100015358();
    result[2] = v4;
    result[3] = v3;
    result[4] = v6;
    result[5] = v5;
    result[6] = v8;
    result[7] = v7;
    result[8] = v19;
    result[9] = v18;
    result[10] = v11;
  }

  else
  {
    uint64_t v13 = sub_10000941C(&qword_1001D1458);
    uint64_t inited = (__n128 *)swift_initStackObject(v13, v20);
    BOOL v15 = sub_100015330(inited, (__n128)xmmword_10015C800);
    v15[3].n128_u64[0] = v4;
    v15[3].n128_u64[1] = v3;
    v15[4].n128_u64[0] = 0xD000000000000017LL;
    v15[4].n128_u64[1] = 0x800000010016AF10LL;
    v15[5].n128_u64[0] = v6;
    v15[5].n128_u64[1] = v5;
    v15[6].n128_u64[0] = 0xD000000000000010LL;
    v15[6].n128_u64[1] = 0x800000010016AF30LL;
    v15[7].n128_u64[0] = v8;
    v15[7].n128_u64[1] = v7;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v5);
    uint64_t v16 = sub_10000941C(&qword_1001D4480);
    uint64_t v17 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  v16,  &protocol witness table for String);
    sub_100014F2C(v17, 0x4373757361676550LL, 0xEE00747865746E6FLL);
    swift_bridgeObjectRelease();
    sub_1000152F4((uint64_t)a1);
    return 0LL;
  }

  return result;
}

void sub_100014F2C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  v19[0] = v5;
  uint64_t v6 = sub_10000941C(&qword_1001D1460);
  unint64_t v7 = sub_1000152B0();
  uint64_t v8 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v6, v7);
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  if (qword_1001D0540 != -1) {
    swift_once(&qword_1001D0540, sub_100034544);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_1000093D0(v11, (uint64_t)qword_1001EDC90);
  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v12 = swift_bridgeObjectRetain(v10);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v15 = static os_log_type_t.error.getter(v13, v14);
  if (os_log_type_enabled(v13, v15))
  {
    uint64_t v16 = swift_slowAlloc(22LL, -1LL);
    uint64_t v17 = swift_slowAlloc(64LL, -1LL);
    v19[0] = v17;
    *(_DWORD *)uint64_t v16 = 136315394;
    swift_bridgeObjectRetain(a3);
    uint64_t v18 = sub_1000307E0(a2, a3, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v16 + 4);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v16 + 12) = 2080;
    swift_bridgeObjectRetain(v10);
    uint64_t v18 = sub_1000307E0(v8, v10, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v16 + 14);
    swift_bridgeObjectRelease_n(v10, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v13, v15, "%s missing properties: %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v17, 2LL);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v10, 2LL);
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

void *sub_100015174()
{
  uint64_t v0 = static DeviceContextUtil.deviceCountryCode()();
  unint64_t v2 = v1;
  uint64_t v4 = static DeviceContextUtil.effectiveSystemLanguage()();
  unint64_t v5 = v3;
  if (v2 && v3)
  {
    uint64_t v6 = static DeviceContextUtil.localeIdentifier()();
    uint64_t v8 = v7;
    uint64_t v9 = static DeviceContextUtil.topPreferredLanguages()();
    uint64_t v10 = static DeviceContextUtil.region.getter();
    uint64_t v12 = v11;
    uint64_t result = (void *)sub_100015358();
    result[2] = v0;
    result[3] = v2;
    result[4] = v4;
    result[5] = v5;
    result[6] = v6;
    result[7] = v8;
    result[8] = v9;
    result[9] = v10;
    result[10] = v12;
  }

  else
  {
    uint64_t v14 = sub_10000941C(&qword_1001D1458);
    uint64_t inited = (__n128 *)swift_initStackObject(v14, &v19);
    uint64_t v16 = sub_100015330(inited, (__n128)xmmword_10015D580);
    v16[3].n128_u64[0] = v0;
    v16[3].n128_u64[1] = v2;
    v16[4].n128_u64[0] = 0xD000000000000017LL;
    v16[4].n128_u64[1] = 0x800000010016AF10LL;
    v16[5].n128_u64[0] = v4;
    v16[5].n128_u64[1] = v5;
    uint64_t v17 = sub_10000941C(&qword_1001D4480);
    uint64_t v18 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  v17,  &protocol witness table for String);
    sub_100014F2C(v18, 0xD000000000000011LL, 0x800000010016AF70LL);
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return result;
}

unint64_t sub_1000152B0()
{
  unint64_t result = qword_1001D1468[0];
  if (!qword_1001D1468[0])
  {
    uint64_t v1 = sub_1000094A0(&qword_1001D1460);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, qword_1001D1468);
  }

  return result;
}

uint64_t sub_1000152F4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PegasusContext(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

__n128 *sub_100015330(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x437972746E756F63LL;
  result[2].n128_u64[1] = 0xEB0000000065646FLL;
  return result;
}

uint64_t sub_100015358()
{
  return swift_allocObject(v0, 88LL, 7LL);
}

uint64_t Atomic.__allocating_init(value:)(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, 24LL, 7LL);
  Atomic.init(value:)(a1);
  return v3;
}

void *Atomic.init(value:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v1 + 80LL);
  uint64_t v4 = (uint64_t (*)(uint64_t))(*(uint64_t (**)(uint64_t))(*(void *)(*v1 + 88LL) + 8LL))(v3);
  uint64_t v5 = v4(a1);
  sub_10001683C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  v1[2] = v5;
  return v1;
}

uint64_t Atomic.compareAndExchange(expected:desired:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10001682C();
  char v7 = v6(v5, a1, a2);
  sub_10001683C();
  return v7 & 1;
}

uint64_t Atomic.add(_:)()
{
  uint64_t v2 = (uint64_t (*)(void, uint64_t))sub_100016818(*(uint64_t (**)(void))(v1 + 32));
  sub_1000167E8(v2);
  return sub_1000167DC(v0);
}

uint64_t Atomic.sub(_:)()
{
  uint64_t v2 = (uint64_t (*)(void, uint64_t))sub_100016818(*(uint64_t (**)(void))(v1 + 40));
  sub_1000167E8(v2);
  return sub_1000167DC(v0);
}

uint64_t Atomic.exchange(with:)()
{
  uint64_t v2 = (uint64_t (*)(void, uint64_t))sub_100016818(*(uint64_t (**)(void))(v1 + 48));
  sub_1000167E8(v2);
  return sub_1000167DC(v0);
}

uint64_t Atomic.load()()
{
  uint64_t v1 = v0;
  sub_100016820();
  uint64_t v3 = (void (*)(void))sub_100016818(*(uint64_t (**)(void))(v2 + 56));
  uint64_t v5 = v4;
  v3(*(void *)(v1 + 16));
  return sub_1000167DC(v5);
}

uint64_t Atomic.store(_:)(uint64_t a1)
{
  uint64_t v4 = sub_10001682C();
  v5(v4, a1);
  return sub_1000167DC(v1);
}

uint64_t Atomic.deinit()
{
  uint64_t v2 = sub_10001682C();
  v3(v2);
  sub_10001683C();
  return v0;
}

uint64_t Atomic.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

_BYTE *sub_1000155D0(char a1)
{
  return sub_100006414(a1 & 1);
}

uint64_t (**Bool.atomic_create.unsafeMutableAddressor())()
{
  return &static Bool.atomic_create;
}

void static Bool.atomic_create.getter()
{
}

void (__cdecl **Bool.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static Bool.atomic_destroy;
}

void static UInt64.atomic_destroy.getter()
{
}

uint64_t sub_10001560C(unsigned __int8 *a1, char a2, char a3)
{
  return sub_100006440(a1, a2 & 1, a3 & 1);
}

uint64_t (**Bool.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Bool.atomic_compare_and_exchange;
}

void static Bool.atomic_compare_and_exchange.getter()
{
}

uint64_t sub_100015640(unsigned __int8 *a1, char a2)
{
  return sub_10000646C(a1, a2 & 1);
}

uint64_t (**Bool.atomic_add.unsafeMutableAddressor())()
{
  return &static Bool.atomic_add;
}

void static Bool.atomic_add.getter()
{
}

uint64_t sub_100015670(unsigned __int8 *a1, char a2)
{
  return sub_100006484(a1, a2 & 1);
}

uint64_t (**Bool.atomic_sub.unsafeMutableAddressor())()
{
  return &static Bool.atomic_sub;
}

void static Bool.atomic_sub.getter()
{
}

uint64_t sub_1000156A0(unsigned __int8 *a1, char a2)
{
  return sub_10000649C(a1, a2 & 1);
}

uint64_t (**Bool.atomic_exchange.unsafeMutableAddressor())()
{
  return &static Bool.atomic_exchange;
}

void static Bool.atomic_exchange.getter()
{
}

uint64_t sub_1000156D0(_BYTE *a1)
{
  return sub_1000064B4(a1);
}

uint64_t (**Bool.atomic_load.unsafeMutableAddressor())()
{
  return &static Bool.atomic_load;
}

void static Bool.atomic_load.getter()
{
}

_BYTE *sub_1000156FC(_BYTE *a1, char a2)
{
  return sub_1000064C0(a1, a2 & 1);
}

uint64_t (**Bool.atomic_store.unsafeMutableAddressor())()
{
  return &static Bool.atomic_store;
}

void static Bool.atomic_store.getter()
{
}

_BYTE *(*sub_10001571C())(char *a1)
{
  return sub_10001572C;
}

_BYTE *sub_10001572C(char *a1)
{
  return sub_1000155D0(*a1);
}

void (__cdecl *sub_100015734())(void *)
{
  return j_j__free;
}

uint64_t (*sub_100015744())(unsigned __int8 *a1, char *a2, char *a3)
{
  return sub_100015754;
}

uint64_t sub_100015754(unsigned __int8 *a1, char *a2, char *a3)
{
  return sub_10001560C(a1, *a2, *a3);
}

uint64_t (*sub_100015760())@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_100015770;
}

uint64_t sub_100015770@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100015640(a1, *a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10001579C@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100015670(a1, *a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1000157C8@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000156A0(a1, *a2);
  *a3 = result & 1;
  return result;
}

uint64_t (*sub_1000157F4())@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_10001579C;
}

uint64_t (*sub_100015804())@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_1000157C8;
}

uint64_t (*sub_100015814())@<X0>(_BYTE *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100015824;
}

uint64_t sub_100015824@<X0>(_BYTE *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000156D0(a1);
  *a2 = result & 1;
  return result;
}

_BYTE *(*sub_10001584C())(_BYTE *a1, char *a2)
{
  return sub_10001585C;
}

_BYTE *sub_10001585C(_BYTE *a1, char *a2)
{
  return sub_1000156FC(a1, *a2);
}

_BYTE *sub_100015864(char a1)
{
  return sub_100006414(a1);
}

uint64_t (**Int8.atomic_create.unsafeMutableAddressor())()
{
  return &static Int8.atomic_create;
}

void static Int8.atomic_create.getter()
{
}

void (__cdecl **Int8.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static Int8.atomic_destroy;
}

uint64_t sub_100015890(unsigned __int8 *a1, unsigned __int8 a2, unsigned __int8 a3)
{
  return sub_10000656C(a1, a2, a3);
}

uint64_t (**Int8.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Int8.atomic_compare_and_exchange;
}

void static Int8.atomic_compare_and_exchange.getter()
{
}

uint64_t sub_1000158C4(unsigned __int8 *a1, char a2)
{
  return sub_100006598(a1, a2);
}

uint64_t (**Int8.atomic_add.unsafeMutableAddressor())()
{
  return &static Int8.atomic_add;
}

void static Int8.atomic_add.getter()
{
}

uint64_t sub_1000158F4(unsigned __int8 *a1, char a2)
{
  return sub_1000065B0(a1, a2);
}

uint64_t (**Int8.atomic_sub.unsafeMutableAddressor())()
{
  return &static Int8.atomic_sub;
}

void static Int8.atomic_sub.getter()
{
}

uint64_t sub_100015924(unsigned __int8 *a1, unsigned __int8 a2)
{
  return sub_1000065C8(a1, a2);
}

uint64_t (**Int8.atomic_exchange.unsafeMutableAddressor())()
{
  return &static Int8.atomic_exchange;
}

void static Int8.atomic_exchange.getter()
{
}

uint64_t sub_100015954(char *a1)
{
  return sub_1000065DC(a1);
}

uint64_t (**Int8.atomic_load.unsafeMutableAddressor())()
{
  return &static Int8.atomic_load;
}

void static Int8.atomic_load.getter()
{
}

_BYTE *sub_100015980(_BYTE *a1, char a2)
{
  return sub_1000064C0(a1, a2);
}

uint64_t (**Int8.atomic_store.unsafeMutableAddressor())()
{
  return &static Int8.atomic_store;
}

void static Int8.atomic_store.getter()
{
}

_BYTE *(*sub_1000159A0())(char *a1)
{
  return sub_1000159B0;
}

_BYTE *sub_1000159B0(char *a1)
{
  return sub_100015864(*a1);
}

uint64_t (*sub_1000159B8())(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return sub_1000159C8;
}

uint64_t sub_1000159C8(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return sub_100015890(a1, *a2, *a3);
}

uint64_t (*sub_1000159D4())@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_1000159E4;
}

uint64_t sub_1000159E4@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000158C4(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_100015A0C@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000158F4(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_100015A34@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100015924(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t (*sub_100015A5C())@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_100015A0C;
}

uint64_t (*sub_100015A6C())@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_100015A34;
}

uint64_t (*sub_100015A7C())@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100015A8C;
}

uint64_t sub_100015A8C@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100015954(a1);
  *a2 = result;
  return result;
}

_BYTE *(*sub_100015AB0())(_BYTE *a1, char *a2)
{
  return sub_100015AC0;
}

_BYTE *sub_100015AC0(_BYTE *a1, char *a2)
{
  return sub_100015980(a1, *a2);
}

_BYTE *sub_100015AC8(char a1)
{
  return sub_100006414(a1);
}

uint64_t (**UInt8.atomic_create.unsafeMutableAddressor())()
{
  return &static UInt8.atomic_create;
}

void static UInt8.atomic_create.getter()
{
}

void (__cdecl **UInt8.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static UInt8.atomic_destroy;
}

uint64_t sub_100015AF4(unsigned __int8 *a1, unsigned __int8 a2, unsigned __int8 a3)
{
  return sub_100006440(a1, a2, a3);
}

uint64_t (**UInt8.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static UInt8.atomic_compare_and_exchange;
}

void static UInt8.atomic_compare_and_exchange.getter()
{
}

uint64_t sub_100015B28(unsigned __int8 *a1, char a2)
{
  return sub_1000065E8(a1, a2);
}

uint64_t (**UInt8.atomic_add.unsafeMutableAddressor())()
{
  return &static UInt8.atomic_add;
}

void static UInt8.atomic_add.getter()
{
}

uint64_t sub_100015B58(unsigned __int8 *a1, char a2)
{
  return sub_100006600(a1, a2);
}

uint64_t (**UInt8.atomic_sub.unsafeMutableAddressor())()
{
  return &static UInt8.atomic_sub;
}

void static UInt8.atomic_sub.getter()
{
}

uint64_t sub_100015B88(unsigned __int8 *a1, unsigned __int8 a2)
{
  return sub_100006618(a1, a2);
}

uint64_t (**UInt8.atomic_exchange.unsafeMutableAddressor())()
{
  return &static UInt8.atomic_exchange;
}

void static UInt8.atomic_exchange.getter()
{
}

uint64_t sub_100015BB8(unsigned __int8 *a1)
{
  return sub_100006630(a1);
}

uint64_t (**UInt8.atomic_load.unsafeMutableAddressor())()
{
  return &static UInt8.atomic_load;
}

void static UInt8.atomic_load.getter()
{
}

_BYTE *sub_100015BE4(_BYTE *a1, char a2)
{
  return sub_1000064C0(a1, a2);
}

uint64_t (**UInt8.atomic_store.unsafeMutableAddressor())()
{
  return &static UInt8.atomic_store;
}

void static UInt8.atomic_store.getter()
{
}

_BYTE *(*sub_100015C04())(char *a1)
{
  return sub_100015C14;
}

_BYTE *sub_100015C14(char *a1)
{
  return sub_100015AC8(*a1);
}

uint64_t (*sub_100015C1C())(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return sub_100015C2C;
}

uint64_t sub_100015C2C(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return sub_100015AF4(a1, *a2, *a3);
}

uint64_t (*sub_100015C38())@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_100015C48;
}

uint64_t sub_100015C48@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100015B28(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_100015C70@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100015B58(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_100015C98@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100015B88(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t (*sub_100015CC0())@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_100015C70;
}

uint64_t (*sub_100015CD0())@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_100015C98;
}

uint64_t (*sub_100015CE0())@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_100015CF0;
}

uint64_t sub_100015CF0@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100015BB8(a1);
  *a2 = result;
  return result;
}

_BYTE *(*sub_100015D14())(_BYTE *a1, char *a2)
{
  return sub_100015D24;
}

_BYTE *sub_100015D24(_BYTE *a1, char *a2)
{
  return sub_100015BE4(a1, *a2);
}

_WORD *sub_100015D2C(__int16 a1)
{
  return sub_100006638(a1);
}

uint64_t (**Int16.atomic_create.unsafeMutableAddressor())()
{
  return &static Int16.atomic_create;
}

void static Int16.atomic_create.getter()
{
}

void (__cdecl **Int16.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static Int16.atomic_destroy;
}

uint64_t sub_100015D58(unsigned __int16 *a1, unsigned __int16 a2, unsigned __int16 a3)
{
  return sub_100006660(a1, a2, a3);
}

uint64_t (**Int16.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Int16.atomic_compare_and_exchange;
}

void static Int16.atomic_compare_and_exchange.getter()
{
}

uint64_t sub_100015D8C(unsigned __int16 *a1, __int16 a2)
{
  return sub_10000668C(a1, a2);
}

uint64_t (**Int16.atomic_add.unsafeMutableAddressor())()
{
  return &static Int16.atomic_add;
}

void static Int16.atomic_add.getter()
{
}

uint64_t sub_100015DBC(unsigned __int16 *a1, __int16 a2)
{
  return sub_1000066A4(a1, a2);
}

uint64_t (**Int16.atomic_sub.unsafeMutableAddressor())()
{
  return &static Int16.atomic_sub;
}

void static Int16.atomic_sub.getter()
{
}

uint64_t sub_100015DEC(unsigned __int16 *a1, unsigned __int16 a2)
{
  return sub_1000066BC(a1, a2);
}

uint64_t (**Int16.atomic_exchange.unsafeMutableAddressor())()
{
  return &static Int16.atomic_exchange;
}

void static Int16.atomic_exchange.getter()
{
}

uint64_t sub_100015E1C(__int16 *a1)
{
  return sub_1000066D0(a1);
}

uint64_t (**Int16.atomic_load.unsafeMutableAddressor())()
{
  return &static Int16.atomic_load;
}

void static Int16.atomic_load.getter()
{
}

_WORD *sub_100015E48(_WORD *a1, __int16 a2)
{
  return sub_1000066DC(a1, a2);
}

uint64_t (**Int16.atomic_store.unsafeMutableAddressor())()
{
  return &static Int16.atomic_store;
}

void static Int16.atomic_store.getter()
{
}

_WORD *(*sub_100015E68())(__int16 *a1)
{
  return sub_100015E78;
}

_WORD *sub_100015E78(__int16 *a1)
{
  return sub_100015D2C(*a1);
}

uint64_t (*sub_100015E80())(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return sub_100015E90;
}

uint64_t sub_100015E90(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return sub_100015D58(a1, *a2, *a3);
}

uint64_t (*sub_100015E9C())@<X0>(unsigned __int16 *a1@<X0>, __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  return sub_100015EAC;
}

uint64_t sub_100015EAC@<X0>(unsigned __int16 *a1@<X0>, __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t result = sub_100015D8C(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_100015ED4@<X0>(unsigned __int16 *a1@<X0>, __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t result = sub_100015DBC(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_100015EFC@<X0>(unsigned __int16 *a1@<X0>, unsigned __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t result = sub_100015DEC(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t (*sub_100015F24())@<X0>(unsigned __int16 *a1@<X0>, __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  return sub_100015ED4;
}

uint64_t (*sub_100015F34())@<X0>(unsigned __int16 *a1@<X0>, unsigned __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  return sub_100015EFC;
}

uint64_t (*sub_100015F44())@<X0>(__int16 *a1@<X0>, _WORD *a2@<X8>)
{
  return sub_100015F54;
}

uint64_t sub_100015F54@<X0>(__int16 *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t result = sub_100015E1C(a1);
  *a2 = result;
  return result;
}

_WORD *(*sub_100015F78())(_WORD *a1, __int16 *a2)
{
  return sub_100015F88;
}

_WORD *sub_100015F88(_WORD *a1, __int16 *a2)
{
  return sub_100015E48(a1, *a2);
}

_WORD *sub_100015F90(__int16 a1)
{
  return sub_100006638(a1);
}

uint64_t (**UInt16.atomic_create.unsafeMutableAddressor())()
{
  return &static UInt16.atomic_create;
}

void static UInt16.atomic_create.getter()
{
}

void (__cdecl **UInt16.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static UInt16.atomic_destroy;
}

uint64_t sub_100015FBC(unsigned __int16 *a1, unsigned __int16 a2, unsigned __int16 a3)
{
  return sub_1000066E4(a1, a2, a3);
}

uint64_t (**UInt16.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static UInt16.atomic_compare_and_exchange;
}

void static UInt16.atomic_compare_and_exchange.getter()
{
}

uint64_t sub_100015FF0(unsigned __int16 *a1, __int16 a2)
{
  return sub_100006710(a1, a2);
}

uint64_t (**UInt16.atomic_add.unsafeMutableAddressor())()
{
  return &static UInt16.atomic_add;
}

void static UInt16.atomic_add.getter()
{
}

uint64_t sub_100016020(unsigned __int16 *a1, __int16 a2)
{
  return sub_100006728(a1, a2);
}

uint64_t (**UInt16.atomic_sub.unsafeMutableAddressor())()
{
  return &static UInt16.atomic_sub;
}

void static UInt16.atomic_sub.getter()
{
}

uint64_t sub_100016050(unsigned __int16 *a1, unsigned __int16 a2)
{
  return sub_100006740(a1, a2);
}

uint64_t (**UInt16.atomic_exchange.unsafeMutableAddressor())()
{
  return &static UInt16.atomic_exchange;
}

void static UInt16.atomic_exchange.getter()
{
}

uint64_t sub_100016080(unsigned __int16 *a1)
{
  return sub_100006758(a1);
}

uint64_t (**UInt16.atomic_load.unsafeMutableAddressor())()
{
  return &static UInt16.atomic_load;
}

void static UInt16.atomic_load.getter()
{
}

_WORD *sub_1000160AC(_WORD *a1, __int16 a2)
{
  return sub_1000066DC(a1, a2);
}

uint64_t (**UInt16.atomic_store.unsafeMutableAddressor())()
{
  return &static UInt16.atomic_store;
}

void static UInt16.atomic_store.getter()
{
}

_WORD *(*sub_1000160CC())(__int16 *a1)
{
  return sub_1000160DC;
}

_WORD *sub_1000160DC(__int16 *a1)
{
  return sub_100015F90(*a1);
}

uint64_t (*sub_1000160E4())(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return sub_1000160F4;
}

uint64_t sub_1000160F4(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return sub_100015FBC(a1, *a2, *a3);
}

uint64_t (*sub_100016100())@<X0>(unsigned __int16 *a1@<X0>, __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  return sub_100016110;
}

uint64_t sub_100016110@<X0>(unsigned __int16 *a1@<X0>, __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t result = sub_100015FF0(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_100016138@<X0>(unsigned __int16 *a1@<X0>, __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t result = sub_100016020(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_100016160@<X0>(unsigned __int16 *a1@<X0>, unsigned __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t result = sub_100016050(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t (*sub_100016188())@<X0>(unsigned __int16 *a1@<X0>, __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  return sub_100016138;
}

uint64_t (*sub_100016198())@<X0>(unsigned __int16 *a1@<X0>, unsigned __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  return sub_100016160;
}

uint64_t (*sub_1000161A8())@<X0>(unsigned __int16 *a1@<X0>, _WORD *a2@<X8>)
{
  return sub_1000161B8;
}

uint64_t sub_1000161B8@<X0>(unsigned __int16 *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t result = sub_100016080(a1);
  *a2 = result;
  return result;
}

_WORD *(*sub_1000161DC())(_WORD *a1, __int16 *a2)
{
  return sub_1000161EC;
}

_WORD *sub_1000161EC(_WORD *a1, __int16 *a2)
{
  return sub_1000160AC(a1, *a2);
}

_DWORD *(**Int32.atomic_create.unsafeMutableAddressor())(int)
{
  return &static Int32.atomic_create;
}

void static UInt32.atomic_create.getter()
{
}

void (__cdecl **Int32.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static Int32.atomic_destroy;
}

uint64_t sub_10001621C(unsigned int *a1, int a2, unsigned int a3)
{
  return sub_100006788(a1, a2, a3);
}

uint64_t (**Int32.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Int32.atomic_compare_and_exchange;
}

void static UInt32.atomic_compare_and_exchange.getter()
{
}

uint64_t (**Int32.atomic_add.unsafeMutableAddressor())(unsigned int *, int)
{
  return &static Int32.atomic_add;
}

void static UInt32.atomic_add.getter()
{
}

uint64_t (**Int32.atomic_sub.unsafeMutableAddressor())(unsigned int *, int)
{
  return &static Int32.atomic_sub;
}

void static UInt32.atomic_sub.getter()
{
}

uint64_t (**Int32.atomic_exchange.unsafeMutableAddressor())(unsigned int *, unsigned int)
{
  return &static Int32.atomic_exchange;
}

void static UInt32.atomic_exchange.getter()
{
}

uint64_t (**Int32.atomic_load.unsafeMutableAddressor())(unsigned int *)
{
  return &static Int32.atomic_load;
}

void static UInt32.atomic_load.getter()
{
}

_DWORD *(**Int32.atomic_store.unsafeMutableAddressor())(_DWORD *result, int)
{
  return &static Int32.atomic_store;
}

void static UInt32.atomic_store.getter()
{
}

_DWORD *(*sub_1000162D4())(int *a1)
{
  return sub_1000162E4;
}

_DWORD *sub_1000162E4(int *a1)
{
  return sub_1000161F4(*a1);
}

uint64_t (*sub_1000162EC())(unsigned int *a1, int *a2, unsigned int *a3)
{
  return sub_1000162FC;
}

uint64_t sub_1000162FC(unsigned int *a1, int *a2, unsigned int *a3)
{
  return sub_10001621C(a1, *a2, *a3);
}

uint64_t (*sub_100016308())@<X0>(unsigned int *a1@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  return sub_100016318;
}

uint64_t sub_100016318@<X0>(unsigned int *a1@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t result = sub_100016248(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_100016340@<X0>(unsigned int *a1@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t result = sub_100016264(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_100016368@<X0>(unsigned int *a1@<X0>, unsigned int *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t result = sub_100016280(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t (*sub_100016390())@<X0>(unsigned int *a1@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  return sub_100016340;
}

uint64_t (*sub_1000163A0())@<X0>(unsigned int *a1@<X0>, unsigned int *a2@<X1>, _DWORD *a3@<X8>)
{
  return sub_100016368;
}

uint64_t (*sub_1000163B0())@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1000163C0;
}

uint64_t sub_1000163C0@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_10001629C(a1);
  *a2 = result;
  return result;
}

_DWORD *(*sub_1000163E4())(_DWORD *a1, int *a2)
{
  return sub_1000163F4;
}

_DWORD *sub_1000163F4(_DWORD *a1, int *a2)
{
  return sub_1000162B8(a1, *a2);
}

_DWORD *(**UInt32.atomic_create.unsafeMutableAddressor())(int)
{
  return &static UInt32.atomic_create;
}

void (__cdecl **UInt32.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static UInt32.atomic_destroy;
}

uint64_t (**UInt32.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static UInt32.atomic_compare_and_exchange;
}

uint64_t (**UInt32.atomic_add.unsafeMutableAddressor())(unsigned int *, int)
{
  return &static UInt32.atomic_add;
}

uint64_t (**UInt32.atomic_sub.unsafeMutableAddressor())(unsigned int *, int)
{
  return &static UInt32.atomic_sub;
}

uint64_t (**UInt32.atomic_exchange.unsafeMutableAddressor())(unsigned int *, unsigned int)
{
  return &static UInt32.atomic_exchange;
}

uint64_t (**UInt32.atomic_load.unsafeMutableAddressor())(unsigned int *)
{
  return &static UInt32.atomic_load;
}

_DWORD *(**UInt32.atomic_store.unsafeMutableAddressor())(_DWORD *result, int)
{
  return &static UInt32.atomic_store;
}

void *(**Int64.atomic_create.unsafeMutableAddressor())(uint64_t)
{
  return &static Int64.atomic_create;
}

void static UInt64.atomic_create.getter()
{
}

void (__cdecl **Int64.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static Int64.atomic_destroy;
}

uint64_t sub_100016484(unint64_t *a1, uint64_t a2, unint64_t a3)
{
  return sub_1000064F0(a1, a2, a3);
}

uint64_t (**Int64.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Int64.atomic_compare_and_exchange;
}

void static UInt64.atomic_compare_and_exchange.getter()
{
}

unint64_t (**Int64.atomic_add.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static Int64.atomic_add;
}

void static UInt64.atomic_add.getter()
{
}

unint64_t (**Int64.atomic_sub.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static Int64.atomic_sub;
}

void static UInt64.atomic_sub.getter()
{
}

unint64_t (**Int64.atomic_exchange.unsafeMutableAddressor())(unint64_t *, unint64_t)
{
  return &static Int64.atomic_exchange;
}

void static UInt64.atomic_exchange.getter()
{
}

uint64_t (**Int64.atomic_load.unsafeMutableAddressor())(uint64_t)
{
  return &static Int64.atomic_load;
}

void static UInt64.atomic_load.getter()
{
}

void *(**Int64.atomic_store.unsafeMutableAddressor())(void *result, uint64_t)
{
  return &static Int64.atomic_store;
}

void static UInt64.atomic_store.getter()
{
}

void *(*sub_10001653C())(uint64_t *a1)
{
  return sub_10001654C;
}

void *sub_10001654C(uint64_t *a1)
{
  return sub_10001645C(*a1);
}

uint64_t (*sub_100016554())(unint64_t *a1, uint64_t *a2, unint64_t *a3)
{
  return sub_100016564;
}

uint64_t sub_100016564(unint64_t *a1, uint64_t *a2, unint64_t *a3)
{
  return sub_100016484(a1, *a2, *a3);
}

unint64_t (*sub_100016570())@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  return sub_100016580;
}

unint64_t sub_100016580@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = sub_1000164B0(a1, *a2);
  *a3 = result;
  return result;
}

unint64_t sub_1000165A8@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = sub_1000164CC(a1, *a2);
  *a3 = result;
  return result;
}

unint64_t sub_1000165D0@<X0>( unint64_t *a1@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = sub_1000164E8(a1, *a2);
  *a3 = result;
  return result;
}

unint64_t (*sub_1000165F8())@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  return sub_1000165A8;
}

unint64_t (*sub_100016608())@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  return sub_1000165D0;
}

uint64_t (*sub_100016618())@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100016628;
}

uint64_t sub_100016628@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100016504(a1);
  *a2 = result;
  return result;
}

void *(*sub_10001664C())(void *a1, uint64_t *a2)
{
  return sub_10001665C;
}

void *sub_10001665C(void *a1, uint64_t *a2)
{
  return sub_100016520(a1, *a2);
}

void *(**UInt64.atomic_create.unsafeMutableAddressor())(uint64_t)
{
  return &static UInt64.atomic_create;
}

void (__cdecl **UInt64.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static UInt64.atomic_destroy;
}

uint64_t (**UInt64.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static UInt64.atomic_compare_and_exchange;
}

unint64_t (**UInt64.atomic_add.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static UInt64.atomic_add;
}

unint64_t (**UInt64.atomic_sub.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static UInt64.atomic_sub;
}

unint64_t (**UInt64.atomic_exchange.unsafeMutableAddressor())(unint64_t *, unint64_t)
{
  return &static UInt64.atomic_exchange;
}

uint64_t (**UInt64.atomic_load.unsafeMutableAddressor())(uint64_t)
{
  return &static UInt64.atomic_load;
}

void *(**UInt64.atomic_store.unsafeMutableAddressor())(void *result, uint64_t)
{
  return &static UInt64.atomic_store;
}

void *(**Int.atomic_create.unsafeMutableAddressor())(uint64_t)
{
  return &static Int.atomic_create;
}

void (__cdecl **Int.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static Int.atomic_destroy;
}

uint64_t (**Int.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Int.atomic_compare_and_exchange;
}

unint64_t (**Int.atomic_add.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static Int.atomic_add;
}

unint64_t (**Int.atomic_sub.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static Int.atomic_sub;
}

unint64_t (**Int.atomic_exchange.unsafeMutableAddressor())(unint64_t *, unint64_t)
{
  return &static Int.atomic_exchange;
}

uint64_t (**Int.atomic_load.unsafeMutableAddressor())(uint64_t)
{
  return &static Int.atomic_load;
}

void *(**Int.atomic_store.unsafeMutableAddressor())(void *result, uint64_t)
{
  return &static Int.atomic_store;
}

void *(**UInt.atomic_create.unsafeMutableAddressor())(uint64_t)
{
  return &static UInt.atomic_create;
}

void (__cdecl **UInt.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static UInt.atomic_destroy;
}

uint64_t (**UInt.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static UInt.atomic_compare_and_exchange;
}

unint64_t (**UInt.atomic_add.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static UInt.atomic_add;
}

unint64_t (**UInt.atomic_sub.unsafeMutableAddressor())(unint64_t *, uint64_t)
{
  return &static UInt.atomic_sub;
}

unint64_t (**UInt.atomic_exchange.unsafeMutableAddressor())(unint64_t *, unint64_t)
{
  return &static UInt.atomic_exchange;
}

uint64_t (**UInt.atomic_load.unsafeMutableAddressor())(uint64_t)
{
  return &static UInt.atomic_load;
}

void *(**UInt.atomic_store.unsafeMutableAddressor())(void *result, uint64_t)
{
  return &static UInt.atomic_store;
}

uint64_t sub_100016784(uint64_t a1)
{
  uint64_t v2 = (char *)&value witness table for Builtin.RawPointer + 64;
  return swift_initClassMetadata2(a1, 0LL, 1LL, &v2, a1 + 96);
}

uint64_t type metadata accessor for Atomic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Atomic);
}

  ;
}

uint64_t sub_1000167DC(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_1000167E8(uint64_t (*a1)(void, uint64_t))
{
  return a1(*(void *)(v1 + 16), v2);
}

uint64_t sub_100016800()
{
  return *(void *)(*(void *)v0 + 80LL);
}

uint64_t sub_100016818@<X0>(uint64_t (*a1)(void)@<X8>)
{
  return a1();
}

uint64_t sub_100016820()
{
  return *(void *)(*(void *)v0 + 80LL);
}

uint64_t sub_10001682C()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_10001683C()
{
  return swift_release(v0);
}

void *sub_100016844@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SessionTokens(0LL);
  uint64_t result = (void *)UUID.init()(v4);
  if (a1)
  {
    swift_unknownObjectRetain(a1);
    sub_100048A88();
    uint64_t v6 = sub_10003F020();
    sub_10001683C();
    if (v6) {
      sub_100019F78();
    }
    sub_100048B30();
    uint64_t v7 = sub_10003F020();
    sub_10001683C();
    if (v7) {
      sub_100019F78();
    }
    swift_unknownObjectRelease_n(a1, 2LL);
    uint64_t result = _swiftEmptySetSingleton;
    if (!_swiftEmptySetSingleton[2])
    {
      swift_bridgeObjectRelease();
      uint64_t result = 0LL;
    }

    *(void *)(a2 + *(int *)(v4 + sub_100016818(*(uint64_t (**)(void))(v4 + 24)) = result;
  }

  else
  {
    *(void *)(a2 + *(int *)(v4 + sub_100016818(*(uint64_t (**)(void))(v4 + 24)) = 0LL;
  }

  return result;
}

uint64_t sub_100016924(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(type metadata accessor for SessionTokens(0LL) + 20);
  return static UUID.== infix(_:_:)(a1 + v4, a2 + v4);
}

uint64_t sub_10001695C@<X0>(uint64_t a1@<X8>)
{
  return swift_release();
}

void sub_1000169A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = sub_100019F90();
  sub_100019BDC(v6, v7, (uint64_t *)&unk_1001D36B0);
  uint64_t v8 = type metadata accessor for SessionTokens(0LL);
  if (sub_100010708(v2, 1LL, v8) == 1)
  {
    uint64_t v9 = swift_unknownObjectRetain(a1);
    sub_100016844(v9, a2);
    sub_100019C1C(v2, (uint64_t *)&unk_1001D36B0);
  }

  else
  {
    sub_100019C44(v2, a2);
  }

  if (!*(void *)(a2 + *(int *)(v8 + 24)))
  {
    if (qword_1001D0500 != -1) {
      swift_once(&qword_1001D0500, sub_100034420);
    }
    uint64_t v10 = sub_100010ED4();
    uint64_t v11 = (os_log_s *)sub_100010E78(v10, (uint64_t)qword_1001EDBD0);
    os_log_type_t v13 = static os_log_type_t.error.getter(v11, v12);
    if (os_log_type_enabled(v11, v13))
    {
      uint64_t v14 = (uint8_t *)sub_100009B20(2LL);
      *(_WORD *)uint64_t v14 = 0;
      sub_10001447C((void *)&_mh_execute_header, v11, v13, "Experiments statuses are not yet updated", v14);
      sub_100010C34((uint64_t)v14);
    }
  }

  sub_100019F1C();
}

uint64_t sub_100016AF4()
{
  uint64_t v32 = v2;
  uint64_t v33 = v4;
  if (!v3) {
    return 3LL;
  }
  uint64_t v5 = v3;
  uint64_t v6 = (uint64_t *)type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(v6 - 1);
  __chkstk_darwin(v6);
  sub_100009B54();
  uint64_t v8 = *(void **)(swift_unknownObjectUnownedLoadStrong(v0 + 16) + 240);
  id v9 = v5;
  id v10 = v8;
  swift_unknownObjectRelease();
  *uint64_t v1 = v10;
  (*(void (**)(void *, void, uint64_t *))(v7 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v6);
  uint64_t v11 = _dispatchPreconditionTest(_:)(v1);
  (*(void (**)(void *, uint64_t *))(v7 + 8))(v1, v6);
  if ((v11 & 1) == 0) {
    goto LABEL_27;
  }
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC7parsecd13ClientSession_fulfilled) & 1) == 0
    && (id v12 = [v9 codable]) != 0
    && (os_log_type_t v13 = v12,
        uint64_t v14 = objc_opt_self(&OBJC_CLASS____CPConnectionInvalidatedFeedback),
        uint64_t v15 = swift_dynamicCastObjCClass(v13, v14),
        v13,
        v15))
  {
    sub_100017A40();
    uint64_t v16 = (void *)(v0 + OBJC_IVAR____TtC7parsecd13ClientSession_connectionInvalidationFeedbacks);
    swift_beginAccess(v16, v31, 33LL, 0LL);
    id v17 = v9;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    sub_100034164(*(void *)((*v16 & 0xFFFFFFFFFFFFF8LL) + 0x10));
    uint64_t v18 = sub_100019F90();
    uint64_t v20 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v19);
    specialized Array._endMutation()(v20);
    swift_endAccess(v31);
    uint64_t v21 = 3LL;
  }

  else
  {
    uint64_t v6 = (uint64_t *)(v0 + OBJC_IVAR____TtC7parsecd13ClientSession_connectionInvalidationFeedbacks);
    swift_beginAccess(v0 + OBJC_IVAR____TtC7parsecd13ClientSession_connectionInvalidationFeedbacks, v31, 1LL, 0LL);
    uint64_t v22 = *(void *)((*v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    while (v22)
    {
      uint64_t v23 = *v6;
      id v30 = v9;
      if ((unint64_t)*v6 >> 62)
      {
        sub_100019DEC();
        uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v22);
        if (!v11)
        {
LABEL_21:
          swift_bridgeObjectRelease();
          *uint64_t v6 = (uint64_t)_swiftEmptyArrayStorage;
          swift_bridgeObjectRelease();
          id v9 = v30;
          break;
        }
      }

      else
      {
        uint64_t v11 = *(void *)((v23 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain(v23);
        if (!v11) {
          goto LABEL_21;
        }
      }

      uint64_t v24 = 4LL;
      while (1)
      {
        id v25 = (v23 & 0xC000000000000001LL) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24 - 4, v23)
            : *(id *)(v23 + 8 * v24);
        uint64_t v26 = v25;
        id v9 = (id)(v24 - 3);
        if (__OFADD__(v24 - 4, 1LL)) {
          break;
        }
        char v27 = sub_100017400(v25);

        ++v24;
      }

      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      sub_100019DEC();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v11);
      swift_bridgeObjectRelease();
    }

    uint64_t v21 = sub_100017400(v9);
  }

  return v21;
}

BOOL sub_100016DCC()
{
  uint64_t v0 = sub_100019F9C();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v14 - v3;
  uint64_t v5 = sub_100082F6C();
  uint64_t v6 = Client.type.getter(v5);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t))(v1 + 8);
  uint64_t v8 = v7(v4, v0);
  uint64_t v9 = UserAgent.client.getter(v8);
  uint64_t v10 = Client.type.getter(v9);
  uint64_t v11 = sub_100019F90();
  ((void (*)(uint64_t))v7)(v11);
  uint64_t v12 = ClientType.rawValue.getter(v6);
  return v12 == ClientType.rawValue.getter(v10);
}

uint64_t sub_100016EB8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100019D88();
  uint64_t v6 = v5;
  sub_100010E2C();
  uint64_t result = sub_10005A920(v4, v6, a1, (uint64_t)v13);
  uint64_t v8 = v13[1];
  uint64_t v9 = v13[2];
  uint64_t v10 = v13[3];
  __int128 v11 = v14;
  __int128 v12 = v15;
  *(void *)a2 = v13[0];
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + swift_unknownObjectUnownedLoadStrong(v1 + 16) = v9;
  *(void *)(a2 + 24) = v10;
  *(_OWORD *)(a2 + swift_unknownObjectWeakDestroy(v0 + 32) = v11;
  *(_OWORD *)(a2 + 48) = v12;
  return result;
}

__objc2_class *sub_1000171EC(void *a1, uint64_t a2, void *a3)
{
  uint64_t result = (__objc2_class *)object_getClass(a1);
  if (result == &OBJC_CLASS____TtC7parsecd8Assembly && a1 != 0LL)
  {
    uint64_t v7 = a1[2];
    if (v7)
    {
      swift_retain(v7);
      sub_100034EDC(a3);
      return (__objc2_class *)swift_release();
    }
  }

  return result;
}

void sub_10001724C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (v22)
  {
    sub_100019BC4(&v21, (uint64_t)v23);
    uint64_t v9 = type metadata accessor for DispatchPredicate(0LL);
    uint64_t v10 = *(void *)(v9 - 8);
    __chkstk_darwin(v9);
    __int128 v12 = (void *)((char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    os_log_type_t v13 = *(void **)(a1 + 240);
    *__int128 v12 = v13;
    (*(void (**)(void *, void, uint64_t))(v10 + 104))( v12,  enum case for DispatchPredicate.onQueue(_:),  v9);
    id v14 = v13;
    LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
    (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
    if ((v13 & 1) != 0)
    {
      uint64_t v15 = v24;
      uint64_t v16 = v25;
      sub_100019AFC(v23, v24);
      type metadata accessor for RawPayload();
      sub_100009788(0LL, &qword_1001D16B0, &OBJC_CLASS____CPClientSession_ptr);
      id v17 = RawPayload.__allocating_init<A>(with:)(a3);
      uint64_t v18 = type metadata accessor for SessionTokens(0LL);
      uint64_t v19 = UUID.uuidString.getter(v18);
      (*(void (**)(id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 8))(v17, v19, v20, a5, v15, v16);

      swift_bridgeObjectRelease();
      sub_1000108B8(v23);
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    sub_100019C1C((uint64_t)&v21, &qword_1001D16A8);
  }

uint64_t sub_100017400(void *a1)
{
  uint64_t v2 = v1;
  sub_100017630();
  id v4 = [a1 codable];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = [v4 timestamp];

    if (!v6)
    {
      id v7 = [a1 codable];
      if (v7)
      {
        uint64_t v8 = v7;
        [v7 setTimestamp:mach_absolute_time()];
      }
    }
  }

  sub_100017A40();
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong(v2 + 16);
  if (object_getClass(Strong) != (Class)&OBJC_CLASS____TtC7parsecd8Assembly || Strong == 0LL)
  {
    swift_unknownObjectRelease();
  }

  else
  {
    uint64_t v11 = Strong[2];
    swift_retain(v11);
    swift_unknownObjectRelease();
    if (v11)
    {
      type metadata accessor for SessionTokens(0LL);
      sub_100035314(a1);
      swift_release();
    }
  }

  sub_10007E7BC();
  sub_10001695C((uint64_t)v23);
  uint64_t v12 = v24;
  uint64_t v13 = v25;
  sub_100019AFC(v23, v24);
  type metadata accessor for RawPayload();
  sub_100009788(0LL, (unint64_t *)&unk_1001D36A0, &OBJC_CLASS____CPFeedbackPayload_ptr);
  id v14 = a1;
  id v15 = RawPayload.__allocating_init<A>(with:)(v14);
  uint64_t v16 = type metadata accessor for SessionTokens(0LL);
  uint64_t v17 = UUID.uuidString.getter(v16);
  (*(void (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16))(v15, v17, v18, v12, v13);

  swift_bridgeObjectRelease();
  sub_1000108B8(v23);
  uint64_t v19 = *(void *)(v2 + 32);
  if (!v19) {
    return 3LL;
  }
  uint64_t v20 = *(void *)(v2 + 40);
  uint64_t ObjectType = swift_getObjectType(v19);
  return (*(uint64_t (**)(id, uint64_t, uint64_t))(v20 + 16))(v14, ObjectType, v20);
}

void sub_100017630()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 16;
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  id v7 = *(id *)(swift_unknownObjectUnownedLoadStrong(v2) + 240);
  swift_unknownObjectRelease();
  *id v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  char v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v8 & 1) != 0)
  {
    uint64_t v9 = OBJC_IVAR____TtC7parsecd13ClientSession_fulfilled;
    if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC7parsecd13ClientSession_fulfilled) & 1) == 0)
    {
      sub_1000177E4();
      uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong(v2);
      uint64_t v11 = *(void **)(v1 + OBJC_IVAR____TtC7parsecd13ClientSession_backingStore);
      sub_1000171EC(Strong, *(void *)(v1 + 24), v11);
      swift_unknownObjectRelease();
      uint64_t v12 = swift_unknownObjectUnownedLoadStrong(v2);
      uint64_t v13 = *(void *)(v1 + 24);
      uint64_t v14 = v1 + OBJC_IVAR____TtC7parsecd13ClientSession_tokens;
      uint64_t v15 = v1 + OBJC_IVAR____TtC7parsecd13ClientSession_type;
      sub_10001695C((uint64_t)v17);
      sub_10001724C(v12, v13, v11, v14, v15, (uint64_t)v17);
      swift_unknownObjectRelease();
      sub_100019C1C((uint64_t)v17, &qword_1001D16A8);
      sub_10001924C();
      sub_1000194C0(v11);
      *(_BYTE *)(v1 + v9) = 1;
    }
  }

  else
  {
    __break(1u);
  }

void sub_1000177E4()
{
  uint64_t v3 = sub_100010ED4();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100009B6C();
  sub_100019BDC(v0 + OBJC_IVAR____TtC7parsecd13ClientSession_tailLog, v0, (uint64_t *)&unk_1001D5D30);
  if (sub_100010708(v0, 1LL, v3) == 1)
  {
    sub_100019C1C(v0, (uint64_t *)&unk_1001D5D30);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v1, v0, v3);
    uint64_t v5 = sub_1000190A0();
    if (v6)
    {
      uint64_t v7 = v5;
      unint64_t v8 = v6;
      sub_100019F54(v0);
      uint64_t v9 = swift_bridgeObjectRetain(v8);
      uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
      os_log_type_t v11 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v20 = v7;
        uint64_t v12 = sub_100009B20(22LL);
        uint64_t v21 = sub_100009B20(64LL);
        uint64_t v22 = v21;
        *(_DWORD *)uint64_t v12 = 136315394;
        sub_100019DB8();
        sub_10000BCF8( (unint64_t *)&qword_1001D1690,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v14 = sub_100019F2C(v13);
        uint64_t v16 = sub_100019E0C(v14, v15);
        uint64_t v17 = sub_100019E8C(v16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v17, v18, v12 + 4);
        sub_100019D80(v0);
        sub_100009B3C();
        *(_WORD *)(v12 + 12) = 2080;
        swift_bridgeObjectRetain(v8);
        uint64_t v19 = sub_1000307E0(v20, v8, &v22);
        sub_100019E24(v19);
        sub_100019FA4(v8);
        sub_100019F44((void *)&_mh_execute_header, v10, v11, "%s fulfilled: (%s).", (uint8_t *)v12);
        sub_100019E18();
        sub_100010C34(v21);
        sub_100010C34(v12);
      }

      else
      {

        sub_100019F4C(v8);
        sub_100019D80(v0);
      }
    }

    sub_100019E60(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  }

  sub_100009AA0();
}

void sub_100017A40()
{
  uint64_t v4 = v3;
  sub_10000941C((uint64_t *)&unk_1001D5D30);
  sub_100009B94();
  __chkstk_darwin(v5);
  sub_10000BEB8();
  uint64_t v6 = sub_100010ED4();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100009B6C();
  sub_100019BDC(v0 + OBJC_IVAR____TtC7parsecd13ClientSession_tailLog, v2, (uint64_t *)&unk_1001D5D30);
  if (sub_100010708(v2, 1LL, v6) == 1)
  {
    sub_100019C1C(v2, (uint64_t *)&unk_1001D5D30);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v1, v2, v6);
    uint64_t v8 = sub_1000190A0();
    if (v9)
    {
      uint64_t v10 = v8;
      unint64_t v11 = v9;
      sub_100019F54(v0);
      uint64_t v12 = swift_bridgeObjectRetain(v11);
      uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
      os_log_type_t v14 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v23 = v10;
        uint64_t v15 = sub_100009B20(22LL);
        uint64_t v24 = sub_100009B20(64LL);
        uint64_t v25 = v24;
        *(_DWORD *)uint64_t v15 = 136315394;
        sub_100019DB8();
        sub_10000BCF8( (unint64_t *)&qword_1001D1690,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v17 = sub_100019F2C(v16);
        uint64_t v19 = sub_100019E0C(v17, v18);
        uint64_t v20 = sub_100019E8C(v19);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v20, v21, v15 + 4);
        sub_100019D80(v0);
        sub_100009B3C();
        *(_WORD *)(v15 + 12) = 2080;
        swift_bridgeObjectRetain(v11);
        uint64_t v22 = sub_1000307E0(v23, v11, &v25);
        sub_100019E24(v22);
        sub_100019FA4(v11);
        sub_100019F44((void *)&_mh_execute_header, v13, v14, v4, (uint8_t *)v15);
        sub_100019E18();
        sub_100010C34(v24);
        sub_100010C34(v15);
      }

      else
      {

        sub_100019F4C(v11);
        sub_100019D80(v0);
      }
    }

    sub_100019E60(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  }

  sub_100009AA0();
}

void sub_100017C98()
{
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v5 = (os_log_s **)sub_100019F9C();
  id v68 = *(v5 - 1);
  __chkstk_darwin(v5);
  sub_100009B54();
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10000BEB8();
  id v8 = *(id *)(swift_unknownObjectUnownedLoadStrong(v2 + 16) + 240);
  swift_unknownObjectRelease();
  *uint64_t v1 = v8;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v6);
  char v9 = _dispatchPreconditionTest(_:)(v1);
  (*(void (**)(void *, uint64_t))(v7 + 8))(v1, v6);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v67 = v5;
  int v10 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC7parsecd13ClientSession_fulfilled);
  uint64_t v5 = (os_log_s **)_swiftEmptyArrayStorage;
  uint64_t v66 = v2 + 16;
  if (v10 != 1 || (id v11 = [objc_allocWithZone(_CPSessionEndFeedback) init]) == 0)
  {
    uint64_t v16 = (void *)(v2 + OBJC_IVAR____TtC7parsecd13ClientSession_connectionInvalidationFeedbacks);
    sub_100019DD8();
    *uint64_t v16 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    if (qword_1001D0500 == -1)
    {
LABEL_7:
      uint64_t v17 = sub_100010ED4();
      sub_1000093D0(v17, (uint64_t)qword_1001EDBD0);
      uint64_t v18 = sub_100019EA4();
      id v14 = (id)Logger.logObject.getter(v18);
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled((os_log_t)v14, v19))
      {

        sub_100019F38();
        goto LABEL_11;
      }

      uint64_t v20 = sub_100009B20(22LL);
      uint64_t v21 = sub_100009B20(64LL);
      v70[0] = v21;
      *(_DWORD *)uint64_t v20 = 136315394;
      uint64_t v22 = sub_100019D88();
      uint64_t v69 = sub_100019F84(v22, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70, v20 + 4);
      sub_100019D80(v2);
      uint64_t v24 = sub_100009B3C();
      *(_WORD *)(v20 + 12) = 2080;
      uint64_t v25 = UserAgent.client.getter(v24);
      uint64_t v26 = Client.name.getter(v25);
      unint64_t v28 = v27;
      sub_100019EEC();
      uint64_t v69 = sub_1000307E0(v26, v28, v70);
      uint64_t v5 = (os_log_s **)_swiftEmptyArrayStorage;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70, v20 + 14);
      sub_100019D80(v2);
      swift_bridgeObjectRelease();
      sub_100019F44( (void *)&_mh_execute_header,  (os_log_s *)v14,  v19,  "Skipped unfulfilled session %s of client: %s",  (uint8_t *)v20);
      swift_arrayDestroy(v21, 2LL);
      sub_100010C34(v21);
      sub_100010C34(v20);
      goto LABEL_9;
    }

LABEL_21:
    swift_once(&qword_1001D0500, sub_100034420);
    goto LABEL_7;
  }

  uint64_t v12 = v11;
  [v11 setReason:v4];
  id v13 = objc_allocWithZone(&OBJC_CLASS____CPFeedbackPayload);
  id v14 = v12;
  id v15 = [v13 initWithCodable:v14];
  [v15 setQueryId:0];

  LOBYTE(v12) = sub_100016AF4();
  if (v12 == 2)
  {
    if (qword_1001D0500 != -1) {
      swift_once(&qword_1001D0500, sub_100034420);
    }
    uint64_t v50 = sub_100010ED4();
    sub_1000093D0(v50, (uint64_t)qword_1001EDBD0);
    uint64_t v51 = sub_100019EA4();
    uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
    os_log_type_t v53 = static os_log_type_t.fault.getter(v52);
    if (sub_100010DE4(v53))
    {
      uint64_t v54 = sub_100009B20(28LL);
      uint64_t v65 = (os_log_s **)sub_100009B20(64LL);
      v70[0] = (uint64_t)v65;
      *(_DWORD *)uint64_t v54 = 67240706;
      LODWORD(v74) = v4;
      unsigned int v64 = &unk_1001ED000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, (char *)&v74 + 4, v54 + 4);
      *(_WORD *)(v54 + 8) = 2082;
      id v63 = v52;
      uint64_t v55 = sub_100019D88();
      uint64_t v74 = sub_100019F84(v55, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75, v54 + 10);
      sub_100019D80(v2);
      uint64_t v57 = sub_100009B3C();
      *(_WORD *)(v54 + 18) = 2082;
      uint64_t v58 = UserAgent.client.getter(v57);
      uint64_t v59 = Client.name.getter(v58);
      unint64_t v61 = v60;
      sub_100019EEC();
      uint64_t v74 = sub_1000307E0(v59, v61, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75, v54 + 20);
      sub_100019D80(v2);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v63,  (os_log_type_t)v64,  "SessionEndFeedback %{public}d not written for session: %{public}s client: %{public}s",  (uint8_t *)v54,  0x1Cu);
      sub_100019E18();
      sub_100010C34((uint64_t)v65);
      uint64_t v62 = v54;
      uint64_t v5 = (os_log_s **)_swiftEmptyArrayStorage;
      sub_100010C34(v62);

      goto LABEL_11;
    }

    sub_100019F38();
LABEL_9:

    goto LABEL_11;
  }

LABEL_11:
  sub_10001695C((uint64_t)v70);
  uint64_t v29 = v72;
  sub_100019AFC(v70, (uint64_t)v71);
  uint64_t v30 = sub_100019D88();
  uint64_t v32 = v31;
  (*((void (**)(uint64_t))v29 + 3))(v30);
  swift_bridgeObjectRelease();
  sub_1000108B8(v70);
  if (*(void *)(v2 + 32))
  {
    uint64_t v33 = *(void *)(v2 + 40);
    uint64_t ObjectType = swift_getObjectType(*(void *)(v2 + 32));
    uint64_t v35 = sub_100047B48(ObjectType, v33);
    if (v35)
    {
      uint64_t v36 = v35;
      swift_unknownObjectUnownedLoadStrong(v66);
      sub_100048758();
      sub_100010CA0();
      sub_1000CADFC();
      swift_unknownObjectRelease();
      id v68 = *(id *)(swift_unknownObjectUnownedLoadStrong(v66) + 240);
      sub_100010CA0();
      uint64_t v37 = sub_100019E00((uint64_t)&unk_1001B1DD0);
      *(void *)(v37 + swift_unknownObjectUnownedLoadStrong(v1 + 16) = v2;
      *(void *)(v37 + 24) = v36;
      uint64_t v72 = sub_100019CAC;
      uint64_t v73 = v37;
      v70[0] = (uint64_t)_NSConcreteStackBlock;
      v70[1] = 1107296256LL;
      v70[2] = (uint64_t)sub_1000D2F18;
      id v71 = &unk_1001B1DE8;
      uint64_t v38 = _Block_copy(v70);
      uint64_t v66 = type metadata accessor for DispatchQoS(0LL);
      uint64_t v67 = &v63;
      uint64_t v39 = *(void *)(v66 - 8);
      __chkstk_darwin(v66);
      sub_10000BEB8();
      swift_retain(v2);
      uint64_t v40 = swift_retain(v36);
      static DispatchQoS.unspecified.getter(v40);
      uint64_t v41 = type metadata accessor for DispatchWorkItemFlags(0LL);
      uint64_t v65 = &v63;
      uint64_t v42 = *(void *)(v41 - 8);
      __chkstk_darwin(v41);
      sub_100009AEC();
      uint64_t v45 = v44 - v43;
      uint64_t v69 = (uint64_t)v5;
      unint64_t v46 = sub_100019CD0();
      uint64_t v47 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
      unint64_t v48 = sub_10000945C();
      dispatch thunk of SetAlgebra.init<A>(_:)(&v69, v47, v48, v41, v46);
      double v49 = v68;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v32, v45, v38);
      _Block_release(v38);
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v45, v41);
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v32, v66);
      swift_release();
    }
  }

  sub_1000186F8();
  sub_100009AA0();
}

    uint64_t v36 = (v13 - 1) & v13;
    uint64_t v37 = v14;
  }

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
}

              swift_release();
              return;
            }
          }
        }
      }
    }

      if (qword_1001D0500 == -1) {
        goto LABEL_22;
      }
      goto LABEL_48;
    }

    id v8 = (v13 - 1) & v13;
    id v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    id v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = *(_DWORD *)(*(void *)(v3 + 56) + 4 * v11);
    swift_bridgeObjectRetain(v17);
    os_log_type_t v19 = sub_10000EC64(v16, v17);
    uint64_t v21 = v20;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0 || *(_DWORD *)(*(void *)(a2 + 56) + 4 * v19) != v18) {
      return 0LL;
    }
  }

  id v14 = v12 + 3;
  if (v14 >= v9) {
    return 1LL;
  }
  id v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    uint64_t v4 = v14;
    goto LABEL_21;
  }

  while (1)
  {
    uint64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      return 1LL;
    }
    id v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }

    uint64_t v7 = (v12 - 1) & v12;
    int v10 = __clz(__rbit64(v12)) + (v13 << 6);
    uint64_t v6 = v13;
LABEL_22:
    if (*(_DWORD *)(*(void *)(v29 + 56) + 4 * v10) == a1)
    {
      id v15 = *(void *)(v29 + 48) + 16 * v10;
      uint64_t v17 = *(void **)v15;
      uint64_t v16 = *(void *)(v15 + 8);
      swift_bridgeObjectRetain(v4);
      swift_bridgeObjectRetain(v16);
      swift_release();
      return v17;
    }
  }

  __break(1u);
  return result;
}

  uint64_t v6 = v7;
LABEL_47:
  sub_1000DAB2C(v4, (v12 - v4) / 16, v6);
  return 1LL;
}

              swift_release();
              return (void *)v20;
            }
          }
        }
      }
    }

      id v11 = (v18 - 1) & v18;
    }
  }

  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

    id v11 = (v19 - 1) & v19;
  }

  uint64_t v20 = v17 + 2;
  if (v20 < v35)
  {
    os_log_type_t v19 = *(void *)(v36 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        id v14 = v20 + 1;
        if (__OFADD__(v20, 1LL)) {
          goto LABEL_45;
        }
        if (v14 >= v35) {
          goto LABEL_35;
        }
        os_log_type_t v19 = *(void *)(v36 + 8 * v14);
        ++v20;
        if (v19) {
          goto LABEL_21;
        }
      }
    }

    id v14 = v20;
    goto LABEL_21;
  }

    uint64_t v6 = (v11 - 1) & v11;
    char v9 = __clz(__rbit64(v11)) + (v12 << 6);
    uint64_t v5 = v12;
LABEL_22:
    if (*(void *)(*(void *)(v19 + 56) + 8 * v9) == a1)
    {
      id v14 = *(void *)(*(void *)(v19 + 48) + 16 * v9);
      swift_bridgeObjectRetain(v3);
      sub_1000145E8();
      swift_release();
      return (void *)v14;
    }
  }

  __break(1u);
  return result;
}

    uint64_t v42 = (v7 - 1) & v7;
    uint64_t v5 = __clz(__rbit64(v7)) + (v46 << 6);
LABEL_22:
    char v9 = (uint64_t *)(*(void *)(v40 + 48) + 16 * v5);
    int v10 = v9[1];
    uint64_t v44 = *v9;
    id v11 = *(void *)(v40 + 56) + 72 * v5;
    id v13 = *(void *)v11;
    uint64_t v12 = *(void *)(v11 + 8);
    id v14 = *(void *)(v11 + 16);
    id v15 = *(void *)(v11 + 24);
    uint64_t v16 = *(void *)(v11 + 32);
    uint64_t v17 = *(void *)(v11 + 40);
    uint64_t v18 = *(void *)(v11 + 48);
    os_log_type_t v19 = *(void *)(v11 + 56);
    uint64_t v20 = *(_BYTE *)(v11 + 64);
    swift_bridgeObjectRetain(v10);
    uint64_t v43 = v20;
    uint64_t v36 = v20;
    uint64_t v47 = v13;
    unint64_t v48 = v14;
    uint64_t v21 = v12;
    uint64_t v51 = v16;
    uint64_t v52 = v15;
    double v49 = v18;
    uint64_t v50 = v17;
    sub_100127A18(v13, v12, v14, v15, v16, v17, v18, v19, v36);
    uint64_t v22 = sub_10000EC64(v44, v10);
    LOBYTE(v14) = v23;
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      sub_10005B13C(v13, v12, v48, v15, v51, v17, v18, v19, v43);
      return 0LL;
    }

    uint64_t v24 = *(void *)(a2 + 56) + 72 * v22;
    uint64_t v25 = *(void *)v24;
    uint64_t v26 = *(void *)(v24 + 8);
    unint64_t v27 = *(void *)(v24 + 16);
    unint64_t v28 = *(void *)(v24 + 24);
    uint64_t v29 = *(void *)(v24 + 32);
    uint64_t v30 = *(void *)(v24 + 40);
    uint64_t v31 = v21;
    uint64_t v41 = v21;
    uint64_t v32 = *(void *)(v24 + 48);
    uint64_t v33 = *(void *)(v24 + 56);
    uint64_t v34 = *(_BYTE *)(v24 + 64);
    v53[0] = v25;
    v53[1] = v26;
    v53[2] = v27;
    v53[3] = v28;
    v53[4] = v29;
    v53[5] = v30;
    v53[6] = v32;
    v53[7] = v33;
    uint64_t v54 = v34;
    v55[0] = v47;
    v55[1] = v31;
    v55[2] = v48;
    v55[3] = v52;
    v55[4] = v51;
    v55[5] = v50;
    v55[6] = v49;
    v55[7] = v19;
    unint64_t v56 = v43;
    sub_100127A18(v25, v26, v27, v28, v29, v30, v32, v33, v34);
    uint64_t v45 = sub_100137EA4(v53, v55);
    uint64_t v35 = v25;
    uint64_t v4 = v42;
    sub_10005B13C(v35, v26, v27, v28, v29, v30, v32, v33, v34);
    uint64_t result = sub_10005B13C(v47, v41, v48, v52, v51, v50, v49, v19, v43);
    if ((v45 & 1) == 0) {
      return 0LL;
    }
  }

  id v8 = v6 + 3;
  if (v8 >= v38) {
    return 1LL;
  }
  uint64_t v7 = *(void *)(v37 + 8 * v8);
  if (v7)
  {
    unint64_t v46 = v8;
    goto LABEL_21;
  }

  while (1)
  {
    unint64_t v46 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      break;
    }
    if (v46 >= v38) {
      return 1LL;
    }
    uint64_t v7 = *(void *)(v37 + 8 * v46);
    ++v8;
    if (v7) {
      goto LABEL_21;
    }
  }

              swift_release();
              return;
            }
          }
        }
      }
    }

void sub_1000183FC()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3);
  id v8 = (char *)v35 - v7;
  __chkstk_darwin(v6);
  int v10 = (char *)v35 - v9;
  uint64_t v11 = v0 + 16;
  swift_unknownObjectUnownedLoadStrong(v0 + 16);
  sub_100048C2C();
  unint64_t v13 = v12;
  swift_unknownObjectRelease();
  uint32_t v14 = arc4random_uniform(0x64u);
  if ((v13 & 0x8000000000000000LL) != 0)
  {
    sub_100019F5C();
    uint64_t v33 = "Negative value is not representable";
    uint64_t v34 = 35LL;
LABEL_14:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v33, v34, 2LL, "Swift/Integers.swift", 20LL);
    __break(1u);
    return;
  }

  if (HIDWORD(v13))
  {
    sub_100019F5C();
    uint64_t v33 = "Not enough bits to represent the passed value";
    uint64_t v34 = 45LL;
    goto LABEL_14;
  }

  if (v14 < v13)
  {
    sub_10000C0C4();
    uint64_t v15 = URL.lastPathComponent.getter();
    unint64_t v17 = v16;
    uint64_t v18 = type metadata accessor for SessionFilename(0LL);
    swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    SessionFilename.init(fromString:)(v15, v17);
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = (_BYTE *)(v19 + OBJC_IVAR____TtC7parsecd15SessionFilename_state);
      sub_100019DD8();
      *uint64_t v21 = 1;
      uint64_t v22 = swift_retain(v20);
      URL.deletingLastPathComponent()(v22);
      SessionFilename.filenameString.getter();
      URL.appendingPathComponent(_:)(v23, v24);
      swift_bridgeObjectRelease();
      sub_100019FAC((uint64_t)v5);
      uint64_t Strong = swift_unknownObjectUnownedLoadStrong(v11);
      sub_10004AA74(Strong, v35);
      sub_100010CA0();
      uint64_t v26 = v36;
      uint64_t v27 = v37;
      sub_100019AFC(v35, v36);
      (*(void (**)(char *, void, void, uint64_t, uint64_t))(v27 + 8))(v8, 0LL, 0LL, v26, v27);
      sub_100019D80(v20);
      sub_100019FAC((uint64_t)v8);
      sub_100019FAC((uint64_t)v10);
      sub_1000108B8(v35);
    }

    else
    {
      if (qword_1001D0500 != -1) {
        swift_once(&qword_1001D0500, sub_100034420);
      }
      uint64_t v28 = sub_100010ED4();
      uint64_t v29 = (os_log_s *)sub_100010E78(v28, (uint64_t)qword_1001EDBD0);
      os_log_type_t v31 = static os_log_type_t.error.getter(v29, v30);
      if (os_log_type_enabled(v29, v31))
      {
        uint64_t v32 = (uint8_t *)sub_100009B20(2LL);
        *(_WORD *)uint64_t v32 = 0;
        sub_10001447C((void *)&_mh_execute_header, v29, v31, "Coin toss said to flush eagerly but had to bail.", v32);
        sub_100010C34((uint64_t)v32);
      }

      sub_100019E60(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    }
  }

  sub_100009AA0();
}

void sub_1000186F8()
{
  uint64_t v4 = v3 - v2;
  sub_100019BDC(v0 + OBJC_IVAR____TtC7parsecd13ClientSession_tailLog, v3 - v2, (uint64_t *)&unk_1001D5D30);
  uint64_t v5 = sub_100010ED4();
  if (sub_100010708(v4, 1LL, v5) == 1)
  {
    sub_100019C1C(v4, (uint64_t *)&unk_1001D5D30);
  }

  else
  {
    uint64_t v6 = sub_100019F54(v0);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)sub_100009B20(12LL);
      uint64_t v10 = sub_100009B20(32LL);
      *(_DWORD *)uint64_t v9 = 136315138;
      uint64_t v16 = v10;
      uint64_t v11 = sub_100019DB8();
      sub_10000BCF8( (unint64_t *)&qword_1001D1690,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
      uint64_t v15 = sub_100019E0C(v13, v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v9 + 4);
      sub_100019D80(v0);
      sub_100009B3C();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s complete.", v9, 0xCu);
      swift_arrayDestroy(v10, 1LL);
      sub_100010C34(v10);
      sub_100010C34((uint64_t)v9);
    }

    else
    {
      sub_100019D80(v0);
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  }

  sub_100009AA0();
}

void sub_1000188D4()
{
  uint64_t v1 = type metadata accessor for SessionType(0LL);
  sub_100019DA4(v1);
  uint64_t v2 = type metadata accessor for UserAgent(0LL);
  sub_100019DA4(v2);

  swift_bridgeObjectRelease();
  sub_100019C1C(v0 + OBJC_IVAR____TtC7parsecd13ClientSession_tailLog, (uint64_t *)&unk_1001D5D30);
  sub_100009A90();
}

uint64_t sub_100018974()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100018998()
{
  return type metadata accessor for ClientSession(0LL);
}

uint64_t type metadata accessor for ClientSession(uint64_t a1)
{
  return sub_100018ABC(a1, (uint64_t *)&unk_1001D1528, (uint64_t)&nominal type descriptor for ClientSession);
}

void sub_1000189B4(uint64_t a1)
{
  v10[0] = &unk_10015D768;
  v10[1] = &unk_10015D780;
  uint64_t v2 = type metadata accessor for SessionTokens(319LL);
  if (v3 <= 0x3F)
  {
    v10[2] = *(void *)(v2 - 8) + 64LL;
    uint64_t v4 = type metadata accessor for SessionType(319LL);
    if (v5 <= 0x3F)
    {
      v10[3] = *(void *)(v4 - 8) + 64LL;
      uint64_t v6 = type metadata accessor for UserAgent(319LL);
      if (v7 <= 0x3F)
      {
        v10[4] = *(void *)(v6 - 8) + 64LL;
        v10[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
        v10[6] = &unk_10015D798;
        v10[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
        sub_100018AEC(319LL);
        if (v9 <= 0x3F)
        {
          v10[8] = *(void *)(v8 - 8) + 64LL;
          swift_updateClassMetadata2(a1, 256LL, 9LL, v10, a1 + 80);
        }
      }
    }
  }

uint64_t type metadata accessor for SessionTokens(uint64_t a1)
{
  return sub_100018ABC(a1, qword_1001D1650, (uint64_t)&nominal type descriptor for SessionTokens);
}

uint64_t sub_100018ABC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

void sub_100018AEC(uint64_t a1)
{
  if (!qword_1001D1538)
  {
    uint64_t v2 = type metadata accessor for Logger(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1001D1538);
    }
  }

uint64_t *sub_100018B40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v14);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    unint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = *(uint64_t *)((char *)a2 + v12);
    *(uint64_t *)((char *)a1 + v12) = v13;
    swift_bridgeObjectRetain(v13);
  }

  return a1;
}

uint64_t sub_100018C00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 24)));
}

uint64_t sub_100018C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = *(void *)(a2 + v11);
  *(void *)(a1 + v11) = v12;
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t sub_100018D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v13 = *(void *)(a2 + v11);
  *(void *)(a1 + v11) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_100018DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + sub_100016818(*(uint64_t (**)(void))(v4 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100018E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = *(void *)(a1 + v11);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_100018ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100018ED8);
}

uint64_t sub_100018ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100019ECC();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)v3)
  {
    uint64_t v7 = v6;
    uint64_t v8 = v4;
    return sub_100010708(v8, v3, v7);
  }

  uint64_t v9 = type metadata accessor for UUID(0LL);
  if (*(_DWORD *)(*(void *)(v9 - 8) + 84LL) == (_DWORD)v3)
  {
    uint64_t v7 = v9;
    uint64_t v8 = v4 + *(int *)(a3 + 20);
    return sub_100010708(v8, v3, v7);
  }

  unint64_t v11 = *(void *)(v4 + *(int *)(a3 + 24));
  if (v11 >= 0xFFFFFFFF) {
    LODWORD(v11) = -1;
  }
  int v12 = v11 - 1;
  if (v12 < 0) {
    int v12 = -1;
  }
  return (v12 + 1);
}

uint64_t sub_100018F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100018F84);
}

uint64_t sub_100018F84(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_100019ECC();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = v5;
    return sub_100009654(v10, v4, v4, v9);
  }

  uint64_t result = type metadata accessor for UUID(0LL);
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return sub_100009654(v10, v4, v4, v9);
  }

  *(void *)(v5 + *(int *)(a4 + sub_100016818(*(uint64_t (**)(void))(v4 + 24)) = v4;
  return result;
}

uint64_t sub_100019014(uint64_t a1)
{
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for UUID(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      v5[2] = "\b";
      swift_initStructMetadata(a1, 256LL, 3LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000190A0()
{
  uint64_t v31 = v2;
  uint64_t v32 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  unint64_t v11 = v10;
  uint64_t v12 = type metadata accessor for JSONEncodingOptions(0LL);
  uint64_t v28 = *(void *)(v12 - 8);
  uint64_t v29 = v12;
  __chkstk_darwin(v12);
  sub_100009AEC();
  uint64_t v15 = v14 - v13;
  uint64_t v30 = v11;
  sub_10000941C(v11);
  sub_100009B94();
  __chkstk_darwin(v16);
  uint64_t v17 = sub_100019E38();
  uint64_t v18 = v9(v17);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v26 - v20;
  sub_100019980(v0, v9, v7, v5, v1);
  uint64_t v27 = v7;
  if (sub_100010708(v1, 1LL, v18) == 1)
  {
    sub_100019C1C(v1, v30);
    return 0LL;
  }

  else
  {
    uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 32))(v21, v1, v18);
    JSONEncodingOptions.init()(v24);
    sub_10000BCF8(v27, v9, v5);
    uint64_t v22 = Message.jsonString(options:)(v15, v18, v25);
    sub_100019EDC();
    sub_100019E6C();
  }

  return v22;
}

void sub_10001924C()
{
  uint64_t v0 = (void *)sub_10000D0BC();
  uint64_t v19 = (void *)sub_10000941C(qword_1001D1310);
  aBlock[0] = v0;
  uint64_t v1 = static JSONSerializationUtil.data(withJSONObject:options:)(aBlock, 0LL);
  unint64_t v3 = v2;
  sub_1000108B8(aBlock);
  uint64_t v4 = sub_100019E00((uint64_t)&unk_1001B1D80);
  *(void *)(v4 + sub_100019D10(v0 + 16) = v1;
  *(void *)(v4 + 24) = v3;
  uint64_t v5 = (void *)objc_opt_self(&OBJC_CLASS___OSALog);
  sub_100014244(v1, v3);
  NSString v6 = String._bridgeToObjectiveC()();
  uint64_t v20 = sub_100019BBC;
  uint64_t v21 = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1000197E4;
  uint64_t v19 = &unk_1001B1D98;
  uint64_t v7 = _Block_copy(aBlock);
  swift_retain(v4);
  swift_release();
  aBlock[0] = 0LL;
  id v8 = [v5 createForSubmission:v6 metadata:0 options:0 error:aBlock writing:v7];
  _Block_release(v7);

  id v9 = aBlock[0];
  if (v8)
  {

    sub_100019E54();
    sub_100019F70();
  }

  else
  {
    uint64_t v10 = v9;
    uint64_t v11 = _convertNSErrorToError(_:)(v9);

    swift_willThrow(v12);
    if (qword_1001D0508 != -1) {
      swift_once(&qword_1001D0508, sub_100034448);
    }
    uint64_t v13 = sub_100010ED4();
    uint64_t v14 = (os_log_s *)sub_100010E78(v13, (uint64_t)qword_1001EDBE8);
    os_log_type_t v16 = static os_log_type_t.error.getter(v14, v15);
    if (sub_100010DE4(v16))
    {
      uint64_t v17 = (uint8_t *)sub_100009B20(2LL);
      *(_WORD *)uint64_t v17 = 0;
      sub_10001447C( (void *)&_mh_execute_header,  v14,  (os_log_type_t)v11,  "Error registering session file with OSAnalytics.",  v17);
      sub_100010C34((uint64_t)v17);
      swift_errorRelease(v11);
      sub_100019F70();

      sub_100019E54();
    }

    else
    {
      sub_100019E54();
      sub_100019F70();
      swift_errorRelease(v11);
    }
  }

void sub_1000194C0(void *a1)
{
  uint64_t v3 = sub_100019F9C();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100019EB4();
  uint64_t v5 = sub_100010654(a1);
  uint64_t v6 = Client.init(_:)(v5);
  uint64_t v7 = Client.name.getter(v6);
  uint64_t v9 = v8;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  uint64_t v10 = (void *)kPARFeedbackSessionFileCreationEvent;
  uint64_t v11 = sub_100019E00((uint64_t)&unk_1001B1D30);
  *(void *)(v11 + sub_100019D10(v0 + 16) = v7;
  *(void *)(v11 + 24) = v9;
  aBlock[4] = sub_100019B80;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000198FC;
  id aBlock[3] = &unk_1001B1D48;
  uint64_t v12 = _Block_copy(aBlock);
  id v13 = v10;
  sub_10001683C();
  AnalyticsSendEventLazy(v13, v12);
  _Block_release(v12);

  sub_100019F1C();
}

void sub_1000195C0(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    v6[0] = a2;
    v6[1] = a3;
    unint64_t v4 = sub_1000109E0();
    id v5 = a1;
    NSFileHandle.write<A>(contentsOf:)(v6, &type metadata for Data, v4);
  }

void sub_1000197E4(uint64_t a1, void *a2)
{
  unint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

uint64_t sub_100019834()
{
  uint64_t v0 = sub_10000941C(&qword_1001D5730);
  uint64_t inited = swift_initStackObject(v0, &v4);
  *(_OWORD *)(inited + sub_100019D10(v0 + 16) = xmmword_10015D580;
  *(void *)(inited + swift_unknownObjectWeakDestroy(v0 + 32) = 0x746E65696C63LL;
  *(void *)(inited + 40) = 0xE600000000000000LL;
  *(void *)(inited + 48) = String._bridgeToObjectiveC()();
  *(void *)(inited + 56) = 1701869940LL;
  *(void *)(inited + 64) = 0xE400000000000000LL;
  *(NSNumber *)(inited + 72) = Int32._bridgeToObjectiveC()();
  uint64_t v2 = sub_100009788(0LL, (unint64_t *)&qword_1001D6680, &OBJC_CLASS___NSObject_ptr);
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v2, &protocol witness table for String);
}

Class sub_1000198FC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain(*(void *)(a1 + 40));
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_100009788(0LL, (unint64_t *)&qword_1001D6680, &OBJC_CLASS___NSObject_ptr);
    v4.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }

  else
  {
    v4.super.Class isa = 0LL;
  }

  return v4.super.isa;
}

void sub_100019980( void *a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v32 = a3;
  type metadata accessor for BinaryDecodingOptions(0LL);
  sub_100009B94();
  __chkstk_darwin(v11);
  uint64_t v12 = sub_100019E38();
  uint64_t v13 = a2(v12);
  uint64_t v29 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v26 - v14;
  id v16 = [a1 data];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v27 = a5;
    uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
    uint64_t v28 = v5;
    uint64_t v20 = v19;

    uint64_t v31 = 0LL;
    memset(v30, 0, sizeof(v30));
    BinaryDecodingOptions.init()(0.0);
    sub_10000BCF8(v32, a2, a4);
    uint64_t v21 = v28;
    Message.init(serializedData:extensions:partial:options:)(v18, v20, v30, 0LL, v6, v13, v22);

    if (v21) {
      return;
    }
    uint64_t v23 = v27;
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v27, v15, v13);
    uint64_t v24 = v23;
    uint64_t v25 = 0LL;
  }

  else
  {

    uint64_t v24 = a5;
    uint64_t v25 = 1LL;
  }

  sub_100009654(v24, v25, 1LL, v13);
}

void *sub_100019AFC(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t sub_100019B20(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100019B64()
{
  uint64_t v0 = sub_100019E7C();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100019B80()
{
  return sub_100019834();
}

uint64_t sub_100019B88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100019B98(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100019BA0()
{
  uint64_t v1 = sub_100019E7C();
  return swift_deallocObject(v1, v2, v3);
}

void sub_100019BBC(void *a1)
{
}

uint64_t sub_100019BC4(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + sub_100019D10(v0 + 16) = v3;
  return a2;
}

void sub_100019BDC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000941C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  sub_100009A90();
}

void sub_100019C1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_10000941C(a2);
  sub_100019DA4(v2);
  sub_100009A90();
}

uint64_t sub_100019C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SessionTokens(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100019C88()
{
  uint64_t v0 = sub_100019E7C();
  return swift_deallocObject(v0, v1, v2);
}

void sub_100019CAC()
{
}

unint64_t sub_100019CD0()
{
  unint64_t result = qword_1001D2B80;
  if (!qword_1001D2B80)
  {
    uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1001D2B80);
  }

  return result;
}

uint64_t sub_100019D10(uint64_t a1)
{
  return a1;
}

uint64_t sub_100019D34(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SessionTokens(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100019D80(uint64_t a1)
{
  return swift_release_n(a1, 2LL);
}

uint64_t sub_100019D88()
{
  uint64_t v0 = type metadata accessor for SessionTokens(0LL);
  return UUID.uuidString.getter(v0);
}

uint64_t sub_100019DA4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_100019DB8()
{
  return type metadata accessor for UUID(0LL);
}

uint64_t sub_100019DD8()
{
  return swift_beginAccess(v0, v1 - 104, 1LL, 0LL);
}

uint64_t sub_100019DEC()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100019E00(uint64_t a1)
{
  return swift_allocObject(a1, 32LL, 7LL);
}

uint64_t sub_100019E0C(uint64_t a1, unint64_t a2)
{
  return sub_1000307E0(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t sub_100019E18()
{
  return swift_arrayDestroy(v0, 2LL);
}

uint64_t sub_100019E24(uint64_t a1)
{
  *(void *)(v3 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 96, v2, v1);
}

uint64_t sub_100019E38()
{
  return 0LL;
}

uint64_t sub_100019E54()
{
  return sub_100010A30(v1, v0);
}

uint64_t sub_100019E60@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_100019E6C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_100019E7C()
{
  return v0;
}

uint64_t sub_100019E8C(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t sub_100019EA4()
{
  return swift_retain_n(v0, 4LL);
}

  ;
}

uint64_t sub_100019ECC()
{
  return type metadata accessor for Date(0LL);
}

uint64_t sub_100019EDC()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 112) + 8LL))(v0, *(void *)(v1 - 104));
}

uint64_t sub_100019EEC()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 168) + 8LL))(v0, *(void *)(v1 - 176));
}

uint64_t sub_100019EFC()
{
  return swift_arrayDestroy(v0, 1LL);
}

void sub_100019F0C(void *a1, os_log_s *a2, uint64_t a3, const char *a4)
{
}

  ;
}

uint64_t sub_100019F2C(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

uint64_t sub_100019F38()
{
  return swift_release_n(v0, 4LL);
}

void sub_100019F44(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_100019F4C(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2LL);
}

uint64_t sub_100019F54(uint64_t a1)
{
  return swift_retain_n(a1, 2LL);
}

  ;
}

uint64_t sub_100019F70()
{
  return swift_release(v0);
}

void sub_100019F78()
{
}

uint64_t sub_100019F84(uint64_t a1, unint64_t a2)
{
  return sub_1000307E0(a1, a2, (uint64_t *)(v2 - 152));
}

uint64_t sub_100019F90()
{
  return v0;
}

uint64_t sub_100019F9C()
{
  return type metadata accessor for Client(0LL);
}

uint64_t sub_100019FA4(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3LL);
}

uint64_t sub_100019FAC(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_100019FB4(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

BOOL sub_100019FC0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))() == 0;
}

uint64_t static JSONSerializationUtil.data(withJSONObject:options:)(void *a1, uint64_t a2)
{
  os_log_type_t v5 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  uint64_t v6 = a1[3];
  uint64_t v7 = sub_100019AFC(a1, v6);
  LODWORD(sub_1000107D0(v3, v4, v5) = objc_msgSend(v5, "isValidJSONObject:", _bridgeAnythingToObjectiveC<A>(_:)(v7, v6));
  uint64_t v8 = swift_unknownObjectRelease();
  if ((_DWORD)v5)
  {
    __chkstk_darwin(v8);
    v16[2] = a1;
    v16[3] = a2;
    uint64_t result = sub_10001A690((uint64_t)sub_10001A678, (uint64_t)v16, &v17);
    if (!v2) {
      return v17;
    }
  }

  else
  {
    uint64_t v10 = sub_10001A114(a1, 1953460082LL, (void *)0xE400000000000000LL);
    uint64_t v12 = v11;
    unint64_t v13 = sub_10001A52C();
    uint64_t v14 = swift_allocError(&type metadata for JSONSerializationUtilError, v13, 0LL, 0LL);
    *uint64_t v15 = v10;
    v15[1] = v12;
    return swift_willThrow(v14);
  }

  return result;
}

uint64_t sub_10001A114(void *a1, uint64_t a2, void *a3)
{
  uint64_t v44 = 0LL;
  unint64_t v45 = 0xE000000000000000LL;
  sub_100010758((uint64_t)a1, (uint64_t)v43);
  uint64_t v6 = sub_10000941C(qword_1001D1310);
  uint64_t v7 = swift_dynamicCast(&DynamicType, v43, (char *)&type metadata for Any + 8, v6, 6LL);
  if ((_DWORD)v7)
  {
    uint64_t v8 = DynamicType;
    __chkstk_darwin(v7);
    sub_10001AB28(v8, (void (*)(uint64_t, uint64_t, _BYTE *))sub_10001B09C);
    swift_bridgeObjectRelease();
    return v44;
  }

  sub_100010758((uint64_t)a1, (uint64_t)v43);
  uint64_t v9 = sub_10000941C(&qword_1001D16D0);
  if (swift_dynamicCast(&DynamicType, v43, (char *)&type metadata for Any + 8, v9, 6LL))
  {
    uint64_t v10 = *(void *)(DynamicType + 16);
    if (v10)
    {
      uint64_t v11 = 0LL;
      uint64_t v12 = DynamicType + 32;
      do
      {
        sub_100010758(v12, (uint64_t)v43);
        uint64_t DynamicType = 46LL;
        unint64_t v42 = 0xE100000000000000LL;
        v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
        String.append(_:)(v13);
        swift_bridgeObjectRelease();
        uint64_t v14 = DynamicType;
        uint64_t v15 = (void *)v42;
        uint64_t DynamicType = a2;
        unint64_t v42 = (unint64_t)a3;
        swift_bridgeObjectRetain(a3);
        v16._uint64_t countAndFlagsBits = v14;
        v16._object = v15;
        String.append(_:)(v16);
        swift_bridgeObjectRelease();
        uint64_t v17 = sub_10001A114(v43, DynamicType, v42);
        unint64_t v19 = v18;
        swift_bridgeObjectRelease();
        sub_1000108B8(v43);
        uint64_t v20 = HIBYTE(v19) & 0xF;
        if ((v19 & 0x2000000000000000LL) == 0) {
          uint64_t v20 = v17 & 0xFFFFFFFFFFFFLL;
        }
        if (v20)
        {
          uint64_t v21 = v44 & 0xFFFFFFFFFFFFLL;
          if ((v45 & 0x2000000000000000LL) != 0) {
            uint64_t v21 = HIBYTE(v45) & 0xF;
          }
          BOOL v22 = v21 == 0;
          uint64_t v23 = 10LL;
          if (v22)
          {
            uint64_t v23 = 0LL;
            uint64_t v24 = (void *)0xE000000000000000LL;
          }

          else
          {
            uint64_t v24 = (void *)0xE100000000000000LL;
          }

          v43[0]._uint64_t countAndFlagsBits = v23;
          v43[0]._object = v24;
          swift_bridgeObjectRetain(v24);
          v25._uint64_t countAndFlagsBits = v17;
          v25._object = (void *)v19;
          String.append(_:)(v25);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          String.append(_:)(v43[0]);
        }

        ++v11;
        swift_bridgeObjectRelease();
        v12 += 32LL;
      }

      while (v10 != v11);
    }

    goto LABEL_19;
  }

  sub_100010758((uint64_t)a1, (uint64_t)v43);
  uint64_t v26 = sub_10000941C(&qword_1001D16D8);
  if (swift_dynamicCast(&DynamicType, v43, (char *)&type metadata for Any + 8, v26, 6LL))
  {
    uint64_t v27 = DynamicType;
    swift_bridgeObjectRetain(a3);
    sub_10001ACD0(v27, a2, (uint64_t)a3, &v44);
LABEL_19:
    swift_bridgeObjectRelease();
    return v44;
  }

  uint64_t v29 = objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  uint64_t v30 = sub_10000941C(&qword_1001D16E0);
  uint64_t v31 = swift_allocObject(v30, 64LL, 7LL);
  *(_OWORD *)(v31 + sub_100019D10(v0 + 16) = xmmword_10015C7F0;
  sub_100010758((uint64_t)a1, v31 + 32);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  LOBYTE(v29) = [(id)v29 isValidJSONObject:isa];

  if ((v29 & 1) == 0)
  {
    v43[0]._uint64_t countAndFlagsBits = 0LL;
    v43[0]._object = (void *)0xE000000000000000LL;
    _StringGuts.grow(_:)(46LL);
    swift_bridgeObjectRelease();
    v43[0]._uint64_t countAndFlagsBits = 0x6F207463656A624FLL;
    v43[0]._object = (void *)0xEF20657079742066LL;
    uint64_t v33 = a1[3];
    uint64_t v34 = sub_100019AFC(a1, v33);
    uint64_t DynamicType = swift_getDynamicType(v34, v33, 1LL);
    sub_10000941C(&qword_1001D16E8);
    v35._uint64_t countAndFlagsBits = String.init<A>(describing:)(&DynamicType);
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._uint64_t countAndFlagsBits = 544497952LL;
    v36._object = (void *)0xE400000000000000LL;
    String.append(_:)(v36);
    v37._uint64_t countAndFlagsBits = a2;
    v37._object = a3;
    String.append(_:)(v37);
    v38._object = (void *)0x800000010016B0C0LL;
    v38._uint64_t countAndFlagsBits = 0xD000000000000017LL;
    String.append(_:)(v38);
    uint64_t countAndFlagsBits = v43[0]._countAndFlagsBits;
    object = v43[0]._object;
    swift_bridgeObjectRelease();
    uint64_t v44 = countAndFlagsBits;
    unint64_t v45 = (unint64_t)object;
  }

  return v44;
}

unint64_t sub_10001A52C()
{
  unint64_t result = qword_1001D16C8;
  if (!qword_1001D16C8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for JSONSerializationUtilError,  &type metadata for JSONSerializationUtilError);
    atomic_store(result, (unint64_t *)&qword_1001D16C8);
  }

  return result;
}

void sub_10001A568(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  uint64_t v7 = a1[3];
  uint64_t v8 = sub_100019AFC(a1, v7);
  id v16 = 0LL;
  id v9 = objc_msgSend(v6, "dataWithJSONObject:options:error:", _bridgeAnythingToObjectiveC<A>(_:)(v8, v7), a2, &v16);
  swift_unknownObjectRelease();
  id v10 = v16;
  if (v9)
  {
    uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v13 = v12;

    *a3 = v11;
    a3[1] = v13;
  }

  else
  {
    uint64_t v14 = v10;
    _convertNSErrorToError(_:)(v10);

    swift_willThrow(v15);
  }

void sub_10001A678(uint64_t *a1@<X8>)
{
}

uint64_t sub_10001A690@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v23 = 0LL;
  __int128 v22 = xmmword_10015D820;
  uint64_t v6 = (void *)swift_allocObject(&unk_1001B1EE0, 48LL, 7LL);
  void v6[2] = &v22;
  void v6[3] = a1;
  v6[4] = a2;
  v6[5] = &v23;
  uint64_t v7 = swift_allocObject(&unk_1001B1F08, 32LL, 7LL);
  *(void *)(v7 + sub_100019D10(v0 + 16) = sub_10001B028;
  *(void *)(v7 + 24) = v6;
  void v21[4] = sub_10001B040;
  void v21[5] = v7;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256LL;
  v21[2] = sub_10007B5C8;
  v21[3] = &unk_1001B1F20;
  uint64_t v8 = _Block_copy(v21);
  swift_retain(v7);
  swift_release();
  id v9 = (void (*)(void))v8[2];
  uint64_t isEscapingClosureAtFileLocation = v8;
  v9();
  id v11 = 0LL;
  while (1)
  {

    id v12 = v11;
    _Block_release((const void *)isEscapingClosureAtFileLocation);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v7, "", 92LL, 18LL, 40LL, 1LL);
    uint64_t v13 = (void *)swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
      goto LABEL_11;
    }

    if (v12)
    {
      id v14 = v12;
      Incident.reportTelemetry()();
      unint64_t v15 = sub_10001B060();
      uint64_t v16 = swift_allocError(&type metadata for Incident, v15, 0LL, 0LL);
      *(void *)uint64_t v17 = v12;
      *(void *)(v17 + 8) = 0LL;
      *(_BYTE *)(v17 + sub_100019D10(v0 + 16) = 0;
      swift_willThrow(v16);

LABEL_7:
      sub_100010A1C(v22, *((unint64_t *)&v22 + 1));
      swift_errorRelease(v23);
      return swift_release();
    }

    if (v23)
    {
      uint64_t v18 = swift_errorRetain(v23);
      swift_willThrow(v18);
      goto LABEL_7;
    }

    uint64_t v7 = *((void *)&v22 + 1);
    if (*((void *)&v22 + 1) >> 60 != 15LL) {
      break;
    }
LABEL_11:
    __break(1u);
    id v11 = objc_begin_catch(v13);
    objc_end_catch();
  }

  uint64_t v20 = v22;
  uint64_t result = swift_release();
  *a3 = v20;
  a3[1] = v7;
  return result;
}

void *initializeBufferWithCopyOfBuffer for JSONSerializationUtilError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for StorefrontAccount(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *assignWithCopy for JSONSerializationUtilError(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for JSONSerializationUtilError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for JSONSerializationUtilError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONSerializationUtilError(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONSerializationUtilError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + sub_100019D10(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + sub_100019D10(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for JSONSerializationUtilError()
{
  return &type metadata for JSONSerializationUtilError;
}

ValueMetadata *type metadata accessor for JSONSerializationUtil()
{
  return &type metadata for JSONSerializationUtil;
}

uint64_t sub_10001AA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  v10._uint64_t countAndFlagsBits = 46LL;
  v10._object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_10001A114(a3, a4, a5);
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000LL) == 0) {
    uint64_t v14 = v11 & 0xFFFFFFFFFFFFLL;
  }
  if (v14)
  {
    unint64_t v15 = a6[1];
    uint64_t v16 = *a6 & 0xFFFFFFFFFFFFLL;
    if ((v15 & 0x2000000000000000LL) != 0) {
      uint64_t v16 = HIBYTE(v15) & 0xF;
    }
    BOOL v17 = v16 == 0;
    uint64_t v18 = 10LL;
    if (v17)
    {
      uint64_t v18 = 0LL;
      unint64_t v19 = (void *)0xE000000000000000LL;
    }

    else
    {
      unint64_t v19 = (void *)0xE100000000000000LL;
    }

    uint64_t v23 = v18;
    swift_bridgeObjectRetain(v19);
    v20._uint64_t countAndFlagsBits = v11;
    v20._object = (void *)v13;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = v23;
    v21._object = v19;
    String.append(_:)(v21);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10001AB28(uint64_t a1, void (*a2)(uint64_t, uint64_t, _BYTE *))
{
  uint64_t v4 = v20[0];
  uint64_t v21 = v20[1];
  int64_t v5 = v20[3];
  unint64_t v6 = v20[4];
  int64_t v7 = (unint64_t)(v20[2] + 64LL) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  if (!v6) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v10 = v9 | (v5 << 6);
  while (1)
  {
    unint64_t v15 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v10);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    sub_100010758(*(void *)(v4 + 56) + 32 * v10, (uint64_t)v19);
    v18[0] = v16;
    v18[1] = v17;
    swift_bridgeObjectRetain(v17);
    a2(v16, v17, v19);
    uint64_t result = sub_10001B0A8((uint64_t)v18);
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v11 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      break;
    }
    if (v11 >= v7) {
      return swift_release();
    }
    unint64_t v12 = *(void *)(v21 + 8 * v11);
    int64_t v13 = v5 + 1;
    if (!v12)
    {
      int64_t v13 = v5 + 2;
      if (v5 + 2 >= v7) {
        return swift_release();
      }
      unint64_t v12 = *(void *)(v21 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v5 + 3;
        if (v5 + 3 >= v7) {
          return swift_release();
        }
        unint64_t v12 = *(void *)(v21 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v5 + 4;
          if (v5 + 4 >= v7) {
            return swift_release();
          }
          unint64_t v12 = *(void *)(v21 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = v5 + 5;
            if (v5 + 5 >= v7) {
              return swift_release();
            }
            unint64_t v12 = *(void *)(v21 + 8 * v13);
            if (!v12)
            {
              int64_t v14 = v5 + 6;
              while (v14 < v7)
              {
                unint64_t v12 = *(void *)(v21 + 8 * v14++);
                if (v12)
                {
                  int64_t v13 = v14 - 1;
                  goto LABEL_18;
                }
              }

              return swift_release();
            }
          }
        }
      }
    }

LABEL_18:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v5 = v13;
  }

  __break(1u);
  return result;
}

    int64_t v7 = (v13 - 1) & v13;
    int64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    unint64_t v6 = v14;
  }

  __break(1u);
  return result;
}

    sub_10005A27C();
    unint64_t v12 = v28 & v27;
  }

  uint64_t v24 = v22 + 4;
  if (v24 >= v14)
  {
LABEL_21:
    swift_release();
    sub_100009AA0();
    return;
  }

  if (*(void *)(v30 + 8 * v24))
  {
    unint64_t v9 = v24;
    goto LABEL_18;
  }

  while (1)
  {
    unint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_21;
    }
    sub_10005A88C();
    uint64_t v24 = v25 + 1;
    if (v26) {
      goto LABEL_18;
    }
  }

    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v5 = v13;
  }

  __break(1u);
  return result;
}

    uint64_t v8 = (v13 - 1) & v13;
    int64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    int64_t v7 = v14;
  }

  __break(1u);
}

    int64_t v7 = (v13 - 1) & v13;
    int64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    unint64_t v6 = v14;
  }

  __break(1u);
  return result;
}

    unint64_t v10 = (v17 - 1) & v17;
    unint64_t v45 = v18;
  }

  unint64_t v19 = v13 + 4;
  if (v13 + 4 >= v43)
  {
LABEL_29:
    swift_release();
    Swift::String v37 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    sub_10000941C((uint64_t *)&unk_1001D44D0);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_10001460C();
    uint64_t v39 = @"download_resources";
    uint64_t v40 = (void *)sub_10007740C();
    [v40 v41];

    swift_unknownObjectRelease();
    goto LABEL_30;
  }

  uint64_t v17 = *(void *)(v42 + 8 * v19);
  if (v17)
  {
    uint64_t v18 = v13 + 4;
    goto LABEL_18;
  }

  while (1)
  {
    uint64_t v18 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v18 >= v43) {
      goto LABEL_29;
    }
    uint64_t v17 = *(void *)(v42 + 8 * v18);
    ++v19;
    if (v17) {
      goto LABEL_18;
    }
  }

    unint64_t v10 = (v16 - 1) & v16;
    int64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
    unint64_t v9 = v17;
  }

  __break(1u);
  return result;
}

    uint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v7 = v15;
  }

  __break(1u);
  return result;
}

    int64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
    unint64_t v10 = v18;
  }

  __break(1u);
  return result;
}

    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
    int64_t v11 = v18;
  }

  __break(1u);
  return result;
}

  __break(1u);
}

    uint64_t v17 = (v23 - 1) & v23;
    uint64_t v21 = __clz(__rbit64(v23)) + (v22 << 6);
    uint64_t v18 = v22;
  }

  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

    unint64_t v10 = (v14 - 1) & v14;
  }

  unint64_t v15 = v13 + 3;
  if (v15 >= v28) {
    return v3;
  }
  int64_t v14 = *(void *)(v27 + 8 * v15);
  if (v14)
  {
    uint64_t v4 = v15;
    goto LABEL_18;
  }

  while (1)
  {
    uint64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v4 >= v28) {
      return v3;
    }
    int64_t v14 = *(void *)(v27 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }

    uint64_t v8 = (v13 - 1) & v13;
    int64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    int64_t v7 = v14;
  }

  __break(1u);
  return result;
}

                uint64_t v21 = v2[2];
                Swift::String v20 = v2[3];
                uint64_t v1 = (void *)(v21 + 1);
                if (v21 >= v20 >> 1)
                {
                  uint64_t v28 = (uint64_t)v2;
                  uint64_t v47 = v7;
                  uint64_t v29 = v8;
                  sub_100031574(v20 > 1, v21 + 1, 1LL, v28);
                  uint64_t v8 = v29;
                  int64_t v7 = v47;
                  unint64_t v2 = v30;
                }

                v2[2] = v1;
                *((_BYTE *)v2 + v21 + swift_unknownObjectWeakDestroy(v0 + 32) = v14;
                if (__OFADD__(v6++, 1)) {
                  goto LABEL_43;
                }
                uint64_t v23 = *((void *)a1 + 4);
                if (!v23) {
                  goto LABEL_48;
                }
                uint64_t v24 = &v3[v23];
                *(_DWORD *)uint64_t v24 = v6;
                v24[4] = 1;
                break;
              default:
                break;
            }
          }
        }
      }

      v3 += 8;
      v11 += 12;
      if ((char *)v10 == v3)
      {
        uint64_t v31 = v8 + v7;
        uint64_t v4 = (_UNKNOWN **)a1;
        goto LABEL_27;
      }
    }

    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    JUMPOUT(0x10014CE34LL);
  }

  uint64_t v31 = 0LL;
  unint64_t v2 = _swiftEmptyArrayStorage;
LABEL_27:
  void v4[8] = *(&off_1001BEED0 + v31 + 4);
  uint64_t v32 = v2[2];
  if (v32 > 0x7FFFFFFE) {
    goto LABEL_45;
  }
  uint64_t v33 = (char *)sqlite3_malloc((int)v32 + 1);
  if (!v33) {
    goto LABEL_49;
  }
  uint64_t v3 = v33;
  v4[6] = v33;
  uint64_t v34 = v2[2];
  uint64_t v1 = _swiftEmptyArrayStorage;
  if (v34)
  {
    swift_bridgeObjectRetain(v2);
    sub_100144284(0LL, v34, 0);
    Swift::String v35 = 0LL;
    uint64_t v1 = _swiftEmptyArrayStorage;
    while (1)
    {
      Swift::String v36 = *((char *)v2 + v35 + 32);
      if (v36 < 0) {
        break;
      }
      Swift::String v38 = _swiftEmptyArrayStorage[2];
      Swift::String v37 = _swiftEmptyArrayStorage[3];
      if (v38 >= v37 >> 1) {
        sub_100144284((void *)(v37 > 1), v38 + 1, 1);
      }
      ++v35;
      _swiftEmptyArrayStorage[2] = v38 + 1;
      *((_BYTE *)&_swiftEmptyArrayStorage[4] + v38) = v36;
      if (v34 == v35)
      {
        sub_1000110A8();
        goto LABEL_36;
      }
    }

    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }

    uint64_t v8 = (v13 - 1) & v13;
    int64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    int64_t v7 = v14;
  }

  __break(1u);
}

uint64_t sub_10001ACD0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 56);
  int64_t v28 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v36 = a1;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v10 = 0LL;
  if (!v8) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    sub_100010794(*(void *)(v36 + 48) + 40 * i, (uint64_t)v34);
    v32[0] = v34[0];
    v32[1] = v34[1];
    uint64_t v33 = v35;
    uint64_t v31 = &type metadata for AnyHashable;
    v30._uint64_t countAndFlagsBits = swift_allocObject(&unk_1001B1F58, 56LL, 7LL);
    sub_100010794((uint64_t)v32, v30._countAndFlagsBits + 16);
    swift_bridgeObjectRetain(a3);
    v16._uint64_t countAndFlagsBits = 0xD000000000000010LL;
    v16._object = (void *)0x800000010016B0E0LL;
    String.append(_:)(v16);
    uint64_t v17 = sub_10001A114(&v30, a2, a3);
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    sub_1000108B8(&v30);
    uint64_t v20 = HIBYTE(v19) & 0xF;
    if ((v19 & 0x2000000000000000LL) == 0) {
      uint64_t v20 = v17 & 0xFFFFFFFFFFFFLL;
    }
    if (v20)
    {
      unint64_t v21 = a4[1];
      uint64_t v22 = *a4 & 0xFFFFFFFFFFFFLL;
      if ((v21 & 0x2000000000000000LL) != 0) {
        uint64_t v22 = HIBYTE(v21) & 0xF;
      }
      BOOL v23 = v22 == 0;
      uint64_t v24 = 10LL;
      if (v23)
      {
        uint64_t v24 = 0LL;
        Swift::String v25 = (void *)0xE000000000000000LL;
      }

      else
      {
        Swift::String v25 = (void *)0xE100000000000000LL;
      }

      v30._uint64_t countAndFlagsBits = v24;
      v30._object = v25;
      swift_bridgeObjectRetain(v25);
      v26._uint64_t countAndFlagsBits = v17;
      v26._object = (void *)v19;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      String.append(_:)(v30);
    }

    swift_bridgeObjectRelease();
    uint64_t result = sub_10000BD34((uint64_t)v32);
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_34;
    }

    if (v13 >= v28) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v28) {
        goto LABEL_32;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v28) {
          goto LABEL_32;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v10);
        if (!v14)
        {
          int64_t v10 = v13 + 3;
          if (v13 + 3 >= v28) {
            goto LABEL_32;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v10);
          if (!v14) {
            break;
          }
        }
      }
    }

LABEL_20:
    unint64_t v8 = (v14 - 1) & v14;
  }

  int64_t v15 = v13 + 4;
  if (v15 >= v28)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    return swift_release();
  }

  unint64_t v14 = *(void *)(v27 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_20;
  }

  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v10 >= v28) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }

  __break(1u);
}

    int64_t v5 = (v12 - 1) & v12;
  }

  int64_t v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_23:
    swift_release();
    return swift_release();
  }

  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    unint64_t v8 = v13;
    goto LABEL_20;
  }

  while (1)
  {
    unint64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }

    sub_1000A6FB0();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v15, v24);
  }

  if (*((_BYTE *)v71 + 88) == 1)
  {
    switch((char)v68)
    {
      case 0:
        goto LABEL_26;
      case 2:
        sub_1000ABB70();
        if (qword_1001D0500 != -1) {
          swift_once(&qword_1001D0500, sub_100034420);
        }
        Swift::String v25 = sub_100010ED4();
        uint64_t v3 = (os_log_s *)sub_1000093D0(v25, (uint64_t)qword_1001EDBD0);
        Swift::String v26 = swift_retain_n(v14, 2LL);
        Logger.logObject.getter(v26);
        uint64_t v27 = sub_100014588();
        if (sub_10006B5F4(v27))
        {
          int64_t v28 = (uint8_t *)sub_100009B20(12LL);
          uint64_t v29 = sub_100009B20(32LL);
          uint64_t v69 = v24;
          Swift::String v30 = v29;
          v73[0] = v29;
          *(_DWORD *)int64_t v28 = 136315138;
          uint64_t v31 = *((void *)v14 + 7);
          sub_100010DFC();
          uint64_t v74 = sub_1000ABBE0(v31, v32, v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v28 + 4);
          sub_1000ABBD4();
          swift_bridgeObjectRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v3,  (os_log_type_t)a2,  "flushing because max timer expired %s",  v28,  0xCu);
          sub_100030F9C(v30);
          sub_100010C34(v30);
          sub_100010C34((uint64_t)v28);

          return (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 8))(v15, v69);
        }

        sub_1000ABBD4();
        break;
      case 3:
        goto LABEL_20;
      case 4:
        uint64_t v40 = v24;
        sub_1000ABB70();
        if (qword_1001D0500 != -1) {
          swift_once(&qword_1001D0500, sub_100034420);
        }
        uint64_t v41 = sub_100010ED4();
        unint64_t v42 = (os_log_s *)sub_1000093D0(v41, (uint64_t)qword_1001EDBD0);
        uint64_t v43 = swift_retain(v14);
        Logger.logObject.getter(v43);
        uint64_t v44 = sub_100014588();
        if (os_log_type_enabled(v42, v44))
        {
          unint64_t v45 = sub_100009B20(22LL);
          unint64_t v46 = sub_100009B20(32LL);
          uint64_t v74 = v46;
          *(_DWORD *)unint64_t v45 = 134218242;
          uint64_t v47 = (void *)((char *)v71 + 96);
          sub_1000A14F8((uint64_t)v71 + 96, (uint64_t)v73);
          unint64_t v48 = *((void *)v71 + 15);
          double v49 = sub_100019AFC(v47, v48);
          uint64_t v50 = *(void *)(v48 - 8);
          __chkstk_darwin(v49);
          sub_100010FCC();
          (*(void (**)(void *))(v50 + 16))(v47);
          uint64_t v51 = v47[1];
          uint64_t v52 = *(uint64_t (**)(uint64_t, uint64_t))(v50 + 8);
          int64_t v15 = v69;
          sub_10003D850((uint64_t)v47, v52);
          uint64_t v72 = v51;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73, v45 + 4);
          *(_WORD *)(v45 + 12) = 2080;
          os_log_type_t v53 = *((void *)v71 + 7);
          sub_100010DFC();
          uint64_t v72 = sub_1000ABBE0(v53, v54, &v74);
          uint64_t v4 = v70;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73, v45 + 14);
          swift_release();
          swift_bridgeObjectRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v42,  v44,  "session flushed because soft limit reached and idle time was beyond %f %s",  (uint8_t *)v45,  0x16u);
          sub_100030F9C(v46);
          uint64_t v55 = v46;
          unint64_t v14 = v71;
          sub_100010C34(v55);
          sub_100010C34(v45);
        }

        else
        {

          swift_release();
        }

        sub_1000A71EC();
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v15, v40);
        goto LABEL_39;
      case 5:
        unint64_t v56 = (os_log_s *)*((void *)v71 + 2);
        if (v56)
        {
          swift_unknownObjectRetain(*((void *)v71 + 2));
          uint64_t v57 = sub_1000ABB94();
          sub_100010CA0();
        }

        else
        {
          uint64_t v57 = 3;
        }

        sub_1000ABB60();
        if (qword_1001D0500 != -1) {
          swift_once(&qword_1001D0500, sub_100034420);
        }
        uint64_t v59 = sub_100010ED4();
        sub_100010E78(v59, (uint64_t)qword_1001EDBD0);
        unint64_t v60 = sub_100014588();
        if (sub_10006B5F4(v60))
        {
          unint64_t v61 = (_WORD *)sub_100009B20(2LL);
          *unint64_t v61 = 0;
          sub_1000ABAD4( (void *)&_mh_execute_header,  v56,  (os_log_type_t)a2,  "session flushed because soft limit reached and sentinel feedback received");
          sub_100010C34((uint64_t)v61);
        }

        if (v57 != 2) {
          return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v15, v24);
        }
        uint64_t v62 = v71;
        sub_1000A71EC();
        uint64_t result = sub_1000ABA4C(v15, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
        *((_BYTE *)v62 + 88) = 0;
        return result;
      default:
        goto LABEL_21;
    }

    goto LABEL_24;
  }

  if ((_BYTE)v68) {
    goto LABEL_21;
  }
  uint64_t v34 = v63;
  sub_1000AB89C(a2, v63);
  if (sub_100010708(v34, 1LL, v24) == 1)
  {
    sub_1000ABB80();
    sub_1000ABB2C();
    uint64_t v35 = v64;
    sub_1000ABC14();
    sub_100019C1C(v34, (uint64_t *)&unk_1001D5D20);
  }

  else
  {
    uint64_t v35 = v64;
    sub_1000A1C7C(v64, v34, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
  }

  sub_1000A71EC();
  uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v58(v35, v24);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v58)(v15, v24);
LABEL_39:
  *((_BYTE *)v14 + 88) = 0;
  return result;
}

    unint64_t v11 = (v17 - 1) & v17;
  }

  unint64_t v18 = v16 + 4;
  if (v18 >= v36) {
    return swift_release();
  }
  uint64_t v17 = *(void *)(v35 + 8 * v18);
  if (v17)
  {
    int64_t v13 = v18;
    goto LABEL_20;
  }

  while (1)
  {
    int64_t v13 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v13 >= v36) {
      return swift_release();
    }
    uint64_t v17 = *(void *)(v35 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_20;
    }
  }

    uint64_t v4 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
    uint64_t v3 = v11;
  }

  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

    sub_1000E36B0();
    unint64_t v11 = v14 + (v6 << 6);
LABEL_21:
    int64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    Swift::String v16 = *v15;
    uint64_t v17 = v15[1];
    unint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8 * v11);
    sub_1000145E8();
    unint64_t v19 = sub_10000EC64(v16, v17);
    unint64_t v21 = v20;
    sub_10001450C();
    if ((v21 & 1) == 0 || *(void *)(*(void *)(a2 + 56) + 8 * v19) != v18) {
      return;
    }
  }

  int64_t v13 = v12 + 3;
  if (v13 >= v9) {
    return;
  }
  if (*(void *)(v7 + 8 * v13))
  {
    uint64_t v6 = v13;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v6 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v6 >= v9) {
      return;
    }
    ++v13;
    if (*(void *)(v7 + 8 * v6)) {
      goto LABEL_20;
    }
  }

    sub_1000E36B0();
    unint64_t v11 = v14 + (v7 << 6);
LABEL_21:
    int64_t v15 = *(void *)(*(void *)(a1 + 56) + 8 * v11);
    sub_10003EF98();
    sub_1000145E8();
    sub_10003F008();
    uint64_t v17 = v16;
    sub_1000110E0();
    if ((v17 & 1) == 0)
    {
      sub_10001450C();
      return;
    }

    unint64_t v18 = sub_10005A62C();
    unint64_t v19 = v6(v18, v15);
    sub_10001450C();
    sub_10001460C();
    if ((v19 & 1) == 0) {
      return;
    }
  }

  int64_t v13 = v12 + 3;
  if (v13 >= v20) {
    return;
  }
  if (*(void *)(v8 + 8 * v13))
  {
    uint64_t v7 = v13;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v7 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v7 >= v20) {
      return;
    }
    ++v13;
    if (*(void *)(v8 + 8 * v7)) {
      goto LABEL_20;
    }
  }

    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    unint64_t v8 = v15;
  }

  __break(1u);
}

      uint64_t v6 = (v11 - 1) & v11;
      unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_21:
      int64_t v13 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v9);
      unint64_t v14 = *v13;
      int64_t v15 = v13[1];
      Swift::String v16 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v9);
      uint64_t v17 = *v16;
      unint64_t v18 = v16[1];
      unint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 24);
      swift_bridgeObjectRetain(v15);
      uint64_t v20 = swift_retain(v1);
      unint64_t v21 = v19(v20, v17, v18);
      sub_100010BE4(v2, (uint64_t)v26, 33LL);
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v1 + 64));
      Swift::String v25 = *(void *)(v1 + 64);
      *(void *)(v1 + 64) = 0x8000000000000000LL;
      sub_1000E84E8(v21, v14, v15, isUniquelyReferenced_nonNull_native, &v25, v17, v18);
      *(void *)(v1 + 64) = v25;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess(v26);
      if (v6) {
        goto LABEL_6;
      }
    }
  }

    uint64_t v6 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    int64_t v5 = v14;
  }

  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    unint64_t v8 = v15;
  }

  __break(1u);
}

  __break(1u);
}

  __break(1u);
  sub_10011633C(v44);
  __break(1u);
}

  __break(1u);
  sub_10011633C(v43);
  __break(1u);
}

                uint64_t v20 = v2[2];
                unint64_t v19 = v2[3];
                if (v20 >= v19 >> 1)
                {
                  uint64_t v24 = (uint64_t)v2;
                  unint64_t v48 = v8;
                  Swift::String v25 = v9;
                  sub_100143FBC( v19 > 1,  v20 + 1,  1,  v24,  &qword_1001D2418,  (void (*)(uint64_t, uint64_t, char *))sub_1000DABEC);
                  unint64_t v9 = v25;
                  unint64_t v8 = v48;
                  unint64_t v2 = v26;
                }

                v2[2] = v20 + 1;
                *((_BYTE *)v2 + v20 + swift_unknownObjectWeakDestroy(v0 + 32) = v13;
                if (__OFADD__(v7++, 1))
                {
                  __break(1u);
LABEL_47:
                  __break(1u);
                  goto LABEL_48;
                }

                uint64_t v22 = *((void *)a1 + 4);
                if (!v22) {
                  goto LABEL_49;
                }
                BOOL v23 = v22 + v6;
                *(_DWORD *)BOOL v23 = v7;
                *(_BYTE *)(v23 + 4) = 1;
                break;
              default:
                break;
            }
          }
        }
      }

      v6 += 8LL;
      v3 += 12;
      if (v4 == v6)
      {
        uint64_t v32 = v9 + v8;
        uint64_t v4 = (uint64_t)a1;
        goto LABEL_27;
      }
    }
  }

  uint64_t v32 = 0LL;
  unint64_t v2 = _swiftEmptyArrayStorage;
LABEL_27:
  *(void *)(v4 + 64) = *(&off_1001BEE70 + v32 + 4);
  uint64_t v33 = v2[2];
  if (v33 > 0x7FFFFFFE) {
    goto LABEL_44;
  }
  uint64_t v34 = (char *)sqlite3_malloc((int)v33 + 1);
  if (!v34)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    JUMPOUT(0x10014369CLL);
  }

  uint64_t v3 = v34;
  *(void *)(v4 + 48) = v34;
  uint64_t v35 = v2[2];
  uint64_t v1 = _swiftEmptyArrayStorage;
  if (v35)
  {
    swift_bridgeObjectRetain(v2);
    sub_100144284(0LL, v35, 0);
    uint64_t v36 = 0LL;
    uint64_t v1 = _swiftEmptyArrayStorage;
    while (1)
    {
      Swift::String v37 = *((char *)v2 + v36 + 32);
      if (v37 < 0) {
        break;
      }
      uint64_t v39 = _swiftEmptyArrayStorage[2];
      Swift::String v38 = _swiftEmptyArrayStorage[3];
      if (v39 >= v38 >> 1) {
        sub_100144284((void *)(v38 > 1), v39 + 1, 1);
      }
      ++v36;
      _swiftEmptyArrayStorage[2] = v39 + 1;
      *((_BYTE *)&_swiftEmptyArrayStorage[4] + v39) = v37;
      if (v35 == v36)
      {
        sub_1000110A8();
        goto LABEL_36;
      }
    }

    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

uint64_t sub_10001AFB0(uint64_t *a1, void (*a2)(__int128 *__return_ptr))
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = v6;
  return sub_100010A1C(v3, v4);
}

uint64_t sub_10001B01C()
{
  return sub_10001B110(v0, 48LL);
}

uint64_t sub_10001B028()
{
  return sub_10001AFB0(*(uint64_t **)(v0 + 16), *(void (**)(__int128 *__return_ptr))(v0 + 24));
}

uint64_t sub_10001B034()
{
  return sub_10001B110(v0, 32LL);
}

void sub_10001B040()
{
}

uint64_t sub_10001B048(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001B058(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_10001B060()
{
  unint64_t result = qword_1001D6D70;
  if (!qword_1001D6D70)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Incident, &type metadata for Incident);
    atomic_store(result, (unint64_t *)&qword_1001D6D70);
  }

  return result;
}

uint64_t sub_10001B09C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001AA08(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void **)(v3 + 32));
}

uint64_t sub_10001B0A8(uint64_t a1)
{
  uint64_t v2 = sub_10000941C(&qword_1001D16F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10001B0E8()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10001B110(uint64_t a1, uint64_t a2)
{
  return swift_deallocObject(a1, a2, 7LL);
}

id sub_10001B118()
{
  id v0 = objc_allocWithZone(&OBJC_CLASS___NSUserDefaults);
  id v1 = sub_10001B504(0xD00000000000001CLL, (uint64_t)"com.apple.assistant.backedup");
  if (v1)
  {
    NSString v2 = String._bridgeToObjectiveC()();
    id v3 = [v1 stringForKey:v2];

    if (v3)
    {
      id v1 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    }

    else
    {
      return 0LL;
    }
  }

  return v1;
}

uint64_t sub_10001B1DC()
{
  id v0 = objc_allocWithZone(&OBJC_CLASS___NSUserDefaults);
  id v1 = sub_10001B504(0xD000000000000016LL, (uint64_t)"com.apple.voicetrigger");
  if (!v1) {
    return 2LL;
  }
  NSString v2 = v1;
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 BOOLForKey:v3];

  return (uint64_t)v4;
}

uint64_t sub_10001B278(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + sub_100019D10(v0 + 16) = 0LL;
  *(_DWORD *)(v2 + 24) = 0;
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 32) = 0LL;
  *(void *)(v2 + 40) = 0LL;
  *(_BYTE *)(v2 + 48) = 2;
  *(void *)(v2 + 64) = 0LL;
  uint64_t v5 = swift_unknownObjectWeakInit(v2 + 56, 0LL);
  *(void *)(v2 + 64) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
  id v6 = sub_10001B118();
  uint64_t v8 = v7;
  char v9 = sub_10001B1DC();
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 32) = v6;
  *(void *)(v2 + 40) = v8;
  *(_BYTE *)(v2 + 48) = v9;
  swift_bridgeObjectRelease();
  id v10 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  uint64_t v11 = sub_10000941C((uint64_t *)&unk_1001D32A0);
  uint64_t inited = swift_initStackObject(v11, v21);
  *(_OWORD *)(inited + sub_100019D10(v0 + 16) = xmmword_10015C7F0;
  v20[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"context");
  v20[1] = v13;
  AnyHashable.init<A>(_:)(v20);
  uint64_t v14 = type metadata accessor for ContextUpdate(0LL);
  *(void *)(inited + 96) = v14;
  int64_t v15 = sub_10001B468((void *)(inited + 72));
  uint64_t v16 = *(void *)(v2 + 40);
  char v17 = *(_BYTE *)(v2 + 48);
  *int64_t v15 = *(void *)(v2 + 32);
  v15[1] = v16;
  *((_BYTE *)v15 + sub_100019D10(v0 + 16) = v17;
  swift_storeEnumTagMultiPayload(v15, v14, 12LL);
  swift_bridgeObjectRetain(v16);
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  sub_1000C5160((uint64_t)@"com.apple.parsecd.contextUpdate", 0LL, v18, v10);

  swift_unknownObjectRelease(a1);
  return v2;
}

uint64_t sub_10001B41C()
{
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t type metadata accessor for SiriSettingsManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd19SiriSettingsManager);
}

void *sub_10001B468(void *a1)
{
  id v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

id sub_10001B4A4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v4 = 0LL;
  }

  id v5 = [v2 initWithSuiteName:v4];

  return v5;
}

id sub_10001B504@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001B4A4(a1, (a2 - 32) | 0x8000000000000000LL);
}

uint64_t sub_10001B510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = (char *)&value witness table for Builtin.RawPointer + 64;
  uint64_t result = type metadata accessor for AtomicLazy.Inner(319LL, *(void *)(a1 + 80), *(void *)(a1 + 88), a4);
  if (v6 <= 0x3F)
  {
    v7[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 2LL, v7, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10001B590()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C180(v0, qword_1001D1850);
  sub_1000093D0(v0, (uint64_t)qword_1001D1850);
  return Logger.init()();
}

void *sub_10001B5D8()
{
  uint64_t v1 = *v0;
  swift_slowDealloc(v0[2], -1LL, -1LL);
  uint64_t v2 = (char *)v0 + *(void *)(*v0 + 104LL);
  uint64_t v4 = type metadata accessor for AtomicLazy.Inner(0LL, *(void *)(v1 + 80), *(void *)(v1 + 88), v3);
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8LL))(v2, v4);
  return v0;
}

uint64_t sub_10001B63C()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for AtomicLazy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AtomicLazy);
}

uint64_t type metadata accessor for AtomicLazy.Inner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AtomicLazy.Inner);
}

uint64_t sub_10001B678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24LL);
}

uint64_t sub_10001B680(uint64_t a1)
{
  v4[0] = (char *)&value witness table for () + 64;
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 24));
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initEnumMetadataMultiPayload(a1, 0LL, 2LL, v4);
    return 0LL;
  }

  return result;
}

uint64_t *sub_10001B6F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8LL);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
LABEL_18:
    swift_retain(v8);
    return v3;
  }

  unsigned int v9 = *((unsigned __int8 *)a2 + v5);
  if (v9 >= 2)
  {
    else {
      uint64_t v10 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v9 != 1)
  {
    uint64_t v8 = a2[1];
    *unint64_t v3 = *a2;
    v3[1] = v8;
    *((_BYTE *)v3 + sub_1000107D0(v3, v4, v5) = 0;
    goto LABEL_18;
  }

  (*(void (**)(uint64_t *))(v4 + 16))(a1);
  *((_BYTE *)v3 + sub_1000107D0(v3, v4, v5) = 1;
  return v3;
}

uint64_t sub_10001B80C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 24) - 8LL);
  unint64_t v3 = *(void *)(v2 + 64);
  if (v3 <= 0x10) {
    unint64_t v3 = 16LL;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1) {
      return (*(uint64_t (**)(void))(v2 + 8))();
    }
    else {
      return swift_release(*(void *)(a1 + 8));
    }
  }

  else
  {
    else {
      uint64_t v5 = 4LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_10001B854 + 4 * byte_10015D935[v5]))();
  }

void *sub_10001B8AC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8LL);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  unsigned int v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    else {
      uint64_t v7 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v6 == 1)
  {
    (*(void (**)(void *))(v4 + 16))(a1);
    char v8 = 1;
  }

  else
  {
    uint64_t v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    swift_retain(v9);
    char v8 = 0;
  }

  *((_BYTE *)a1 + sub_1000107D0(v3, v4, v5) = v8;
  return a1;
}

void *sub_10001B984(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16LL;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      else {
        uint64_t v9 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v8 == 1) {
      (*(void (**)(void *, void))(v6 + 8))(a1, *(void *)(a3 + 24));
    }
    else {
      swift_release(a1[1]);
    }
    unsigned int v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 1;
    }

    else
    {
      uint64_t v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      *((_BYTE *)a1 + v7) = 0;
      swift_retain(v12);
    }
  }

  return a1;
}

_OWORD *sub_10001BB14(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8LL);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16LL;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 64);
  }
  unsigned int v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    else {
      uint64_t v7 = 4LL;
    }
    __asm { BR              X13 }
  }

  if (v6 == 1)
  {
    (*(void (**)(_OWORD *))(v4 + 32))(a1);
    char v8 = 1;
  }

  else
  {
    char v8 = 0;
    *a1 = *a2;
  }

  *((_BYTE *)a1 + sub_1000107D0(v3, v4, v5) = v8;
  return a1;
}

uint64_t sub_10001BBE8(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  if ((_OWORD *)a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16LL;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = *(unsigned __int8 *)(a1 + v7);
    if (v8 >= 2)
    {
      else {
        uint64_t v9 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v8 == 1) {
      (*(void (**)(uint64_t, void))(v6 + 8))(a1, *(void *)(a3 + 24));
    }
    else {
      swift_release(*(void *)(a1 + 8));
    }
    unsigned int v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      else {
        uint64_t v11 = 4LL;
      }
      __asm { BR              X12 }
    }

    if (v10 == 1)
    {
      (*(void (**)(uint64_t, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v12 = 1;
    }

    else
    {
      char v12 = 0;
      *(_OWORD *)a1 = *a2;
    }

    *(_BYTE *)(a1 + v7) = v12;
  }

  return a1;
}

uint64_t sub_10001BD74(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = 16LL;
  if (*(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL) > 0x10uLL) {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL);
  }
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_21;
  }
  uint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)(a1 + v4);
      if (!v6) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4)) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

    if (v8 < 2)
    {
LABEL_21:
      unsigned int v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0LL;
      }
    }
  }

  int v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4)) {
    goto LABEL_21;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (!(_DWORD)v4) {
    return (v9 + 255);
  }
  return ((uint64_t (*)(void))((char *)&loc_10001BE38 + 4 * byte_10015D958[(v4 - 1)]))();
}

void sub_10001BE84(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8LL) + 64LL);
  if (v5 <= 0x10) {
    unint64_t v5 = 16LL;
  }
  size_t v6 = v5 + 1;
  char v7 = 8 * (v5 + 1);
  if (a3 < 0xFF)
  {
    unsigned int v8 = 0;
  }

  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << v7) - 254) >> v7) + 1;
    if (HIWORD(v10))
    {
      unsigned int v8 = &dword_100000004;
    }

    else if (v10 >= 0x100)
    {
      unsigned int v8 = 2;
    }

    else
    {
      unsigned int v8 = v10 > 1;
    }
  }

  else
  {
    unsigned int v8 = &_mh_execute_header.magic + 1;
  }

  if (a2 <= 0xFE) {
    __asm { BR              X11 }
  }

  unsigned int v9 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      int v11 = v9 & ~(-1 << v7);
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v11;
        *((_BYTE *)a1 + 2) = BYTE2(v11);
      }

      else if ((_DWORD)v6 == 2)
      {
        *a1 = v11;
      }

      else
      {
        *(_BYTE *)a1 = v11;
      }
    }
  }

  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v9;
  }

  __asm { BR              X10 }

uint64_t sub_10001C028(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 16LL;
  if (*(void *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 64LL) > 0x10uLL) {
    uint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 64LL);
  }
  else {
    uint64_t v3 = 4LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_10001C070 + 4 * byte_10015D966[v3]))();
}

void sub_10001C0B8(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL) <= 0x10uLL) {
    size_t v4 = 16LL;
  }
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8LL) + 64LL);
  }
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }

      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }

      else
      {
        *a1 = v7;
      }
    }

    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }

  else
  {
    a1[v4] = a2;
  }

uint64_t *sub_10001C180(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

id sub_10001C1E0()
{
  return *(id *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_outputStream);
}

uint64_t sub_10001C210()
{
  return *(void *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream__uncompressedBytesWritten);
}

uint64_t sub_10001C240()
{
  return *(void *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream__compressedBytesWritten);
}

void sub_10001C250()
{
  id v1 = [(id)objc_opt_self(NSOutputStream) outputStreamToMemory];
  [v0 initWithOutputStream:v1];

  sub_100009A90();
}

void sub_10001C2C8(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  sub_10001C2F4(a1);
  sub_100009A90();
}

char *sub_10001C2F4(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v1);
  *(_DWORD *)&v1[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_status] = 0;
  uint64_t v4 = v1;
  uint64_t v5 = static Array._allocateBufferUninitialized(minimumCapacity:)(4096LL, &type metadata for UInt8);
  *(void *)(v5 + sub_100019D10(v0 + 16) = 4096LL;
  bzero((void *)(v5 + 32), 0x1000uLL);
  unsigned int v6 = (uint64_t *)&v4[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_destBuffer];
  *(void *)&v4[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_destBuffer] = v5;
  bzero(&v4[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_shaContext], 0xD0uLL);
  uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(64LL, &type metadata for UInt8);
  *(void *)(v7 + sub_100019D10(v0 + 16) = 64LL;
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(void *)&v4[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_digest] = v7;
  *(void *)&v4[OBJC_IVAR____TtC7parsecd22CompressedOutputStream__uncompressedBytesWritten] = 0LL;
  *(void *)&v4[OBJC_IVAR____TtC7parsecd22CompressedOutputStream__compressedBytesWritten] = 0LL;
  *(void *)&v4[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_outputStream] = a1;
  sub_100010BC0((uint64_t)v6, (uint64_t)v26);
  uint64_t v8 = *v6;
  id v9 = a1;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
  *unsigned int v6 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1000D4F58(v8);
    uint64_t v8 = isUniquelyReferenced_nonNull_native;
  }

  *unsigned int v6 = v8;
  sub_10001CF50(isUniquelyReferenced_nonNull_native, v11, v12);
  uint64_t v13 = &v4[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_stream];
  *(void *)uint64_t v13 = v8 + 32;
  *((void *)v13 + 1) = 0LL;
  *((void *)v13 + 3) = 0LL;
  *((void *)v13 + 4) = 0LL;
  *((void *)v13 + 2) = v8 + 32;

  v25.receiver = v4;
  v25.super_class = ObjectType;
  uint64_t v14 = (char *)objc_msgSendSuper2(&v25, "initToBuffer:capacity:", v8 + 32, 4096);
  int64_t v15 = (compression_stream *)&v14[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_stream];
  sub_100010BC0((uint64_t)&v14[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_stream], (uint64_t)v26);
  uint64_t v16 = v14;
  uint64_t v17 = compression_stream_init(v15, COMPRESSION_STREAM_ENCODE, COMPRESSION_ZLIB);
  LODWORD(v15) = v17;
  sub_10001CF50(v17, v18, v19);
  *(_DWORD *)&v16[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_status] = (_DWORD)v15;
  uint64_t v20 = (CC_SHA512_CTX *)&v16[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_shaContext];
  sub_100010BC0((uint64_t)&v16[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_shaContext], (uint64_t)v26);
  uint64_t v21 = CC_SHA512_Init(v20);
  sub_10001CF50(v21, v22, v23);

  return v16;
}

uint64_t sub_10001C550()
{
  id v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_digest);
  sub_100010BE4(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_digest, (uint64_t)v18, 0LL);
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(v2);
    sub_1000AFA34(0, v3, 0);
    uint64_t v4 = 0LL;
    do
    {
      char v5 = *(_BYTE *)(v2 + v4 + 32);
      uint64_t v6 = sub_10000941C(&qword_1001D0C10);
      uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
      *(_OWORD *)(v7 + sub_100019D10(v0 + 16) = xmmword_10015C7F0;
      *(void *)(v7 + sub_10000BDD4(v0 + 56) = &type metadata for UInt8;
      *(void *)(v7 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v7 + swift_unknownObjectWeakDestroy(v0 + 32) = v5;
      uint64_t v8 = String.init(format:_:)(2016555045LL, 0xE400000000000000LL);
      uint64_t v10 = v9;
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        sub_1000AFA34(v11 > 1, v12 + 1, 1);
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      uint64_t v13 = &_swiftEmptyArrayStorage[2 * v12];
      void v13[4] = v8;
      v13[5] = v10;
    }

    while (v3 != v4);
    swift_bridgeObjectRelease();
  }

  uint64_t v14 = sub_10000941C(&qword_1001D1460);
  unint64_t v15 = sub_1000152B0();
  uint64_t v16 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v14, v15);
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_10001C6F0(const uint8_t *a1, size_t a2)
{
  uint64_t v3 = OBJC_IVAR____TtC7parsecd22CompressedOutputStream_status;
  if (*(_DWORD *)(v2 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_status)) {
    return -1LL;
  }
  uint64_t v7 = (compression_stream *)(v2 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_stream);
  sub_100010BE4(v2 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_stream, (uint64_t)v41, 1LL);
  v7->src_ptr = a1;
  v7->size_t src_size = a2;
  uint64_t v8 = (CC_SHA512_CTX **)(v2 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_destBuffer);
  sub_100010BC0(v2 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_destBuffer, (uint64_t)v40);
  uint64_t v9 = *v8;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
  *uint64_t v8 = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_24:
    sub_1000D4F58((uint64_t)v9);
    uint64_t v9 = (CC_SHA512_CTX *)isUniquelyReferenced_nonNull_native;
  }

  v7->dst_ptr = (uint8_t *)&v9->hash[2];
  *uint64_t v8 = v9;
  sub_10001CF58(isUniquelyReferenced_nonNull_native, v11, v12, v13);
  v7->size_t dst_size = 4096LL;
  if ((a2 & 0x8000000000000000LL) == 0)
  {
    if (HIDWORD(a2))
    {
      sub_100019F5C();
      Swift::String v38 = "Not enough bits to represent the passed value";
      uint64_t v39 = 45LL;
      goto LABEL_29;
    }

    uint64_t v9 = (CC_SHA512_CTX *)(v2 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_shaContext);
    uint64_t v14 = OBJC_IVAR____TtC7parsecd22CompressedOutputStream__compressedBytesWritten;
    uint64_t v15 = OBJC_IVAR____TtC7parsecd22CompressedOutputStream_outputStream;
    do
    {
      sub_100010BC0((uint64_t)v9, (uint64_t)v40);
      uint64_t v16 = CC_SHA512_Update(v9, a1, a2);
      sub_10001CF58(v16, v17, v18, v19);
      sub_100010BC0((uint64_t)v7, (uint64_t)v40);
      uint64_t v20 = compression_stream_process(v7, 0);
      int v21 = v20;
      sub_10001CF58(v20, v22, v23, v24);
      *(_DWORD *)(v2 + v3) = v21;
      if (v21) {
        break;
      }
      size_t dst_size = v7->dst_size;
      if (dst_size != 4096)
      {
        uint64_t v26 = 4096 - dst_size;
        if (__OFSUB__(4096LL, dst_size))
        {
          __break(1u);
LABEL_23:
          __break(1u);
          goto LABEL_24;
        }

        if (v26 >= 1)
        {
          uint64_t v27 = *(void *)(v2 + v14);
          BOOL v28 = __OFADD__(v27, v26);
          uint64_t v29 = v27 + v26;
          if (v28) {
            goto LABEL_23;
          }
          *(void *)(v2 + v14) = v29;
        }

        objc_msgSend(*(id *)(v2 + v15), "write:maxLength:", &(*v8)->hash[2]);
        sub_100010BC0((uint64_t)v8, (uint64_t)v40);
        uint64_t v30 = (uint64_t)*v8;
        uint64_t v31 = swift_isUniquelyReferenced_nonNull_native(*v8);
        *uint64_t v8 = (CC_SHA512_CTX *)v30;
        if ((v31 & 1) == 0)
        {
          sub_1000D4F58(v30);
          uint64_t v30 = v31;
        }

        v7->dst_ptr = (uint8_t *)(v30 + 32);
        *uint64_t v8 = (CC_SHA512_CTX *)v30;
        sub_10001CF58(v31, v32, v33, v34);
        v7->size_t dst_size = 4096LL;
        if (*(_DWORD *)(v2 + v3)) {
          break;
        }
      }
    }

    while (v7->src_size);
    size_t src_size = v7->src_size;
    uint64_t result = a2 - src_size;
    if (__OFSUB__(a2, src_size))
    {
      __break(1u);
    }

    else
    {
      if (result < 1) {
        return result;
      }
      uint64_t v36 = *(void *)(v2 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream__uncompressedBytesWritten);
      BOOL v28 = __OFADD__(v36, result);
      uint64_t v37 = v36 + result;
      if (!v28)
      {
        *(void *)(v2 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream__uncompressedBytesWritten) = v37;
        return result;
      }
    }

    __break(1u);
  }

  sub_100019F5C();
  Swift::String v38 = "Negative value is not representable";
  uint64_t v39 = 35LL;
LABEL_29:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v38,  v39,  2LL,  "Swift/Integers.swift",  20LL);
  __break(1u);
  return result;
}

uint64_t sub_10001C9F4()
{
  unsigned int v1 = *(_DWORD *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_status) + 1;
  if (v1 > 2) {
    return 0LL;
  }
  else {
    return *(void *)&asc_10015D9F0[8 * v1];
  }
}

void sub_10001CA74()
{
  if (*(_DWORD *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_status) == -1)
  {
    uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
    uint64_t v3 = v2;
    id v4 = objc_allocWithZone(&OBJC_CLASS___NSError);
    sub_1000765BC(v1, v3, 0LL, 0LL);
  }

  sub_100009A90();
}

id sub_10001CAE4()
{
  return [*(id *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_outputStream) open];
}

id sub_10001CB30()
{
  uint64_t v2 = (compression_stream *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_stream);
  uint64_t v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_destBuffer);
  uint64_t v4 = OBJC_IVAR____TtC7parsecd22CompressedOutputStream_status;
  sub_100010BE4(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_stream, (uint64_t)v53, 1LL);
  do
  {
    v2->size_t src_size = 0LL;
    sub_100010BC0((uint64_t)v3, (uint64_t)v52);
    char v5 = sub_10001CF44();
    *uint64_t v3 = v1;
    if ((v5 & 1) == 0)
    {
      sub_10001CF70();
      uint64_t v1 = v36;
      *uint64_t v3 = v36;
    }

    uint64_t v6 = sub_100010BC0((uint64_t)v2, (uint64_t)v51);
    v2->dst_ptr = (uint8_t *)(v1 + 32);
    sub_10001CF38(v6, v7, v8, v9, v10, v11);
    v2->size_t dst_size = 4096LL;
    uint64_t v1 = compression_stream_process(v2, 1);
    sub_10001CF50(v1, v12, v13);
    *(_DWORD *)(v0 + v4) = v1;
    swift_unknownObjectUnownedInit(v51, v0);
    sub_100010BC0((uint64_t)v3, (uint64_t)v52);
    uint64_t v14 = sub_10001CF44();
    *uint64_t v3 = v1;
    if ((v14 & 1) == 0)
    {
      sub_10001CF70();
      uint64_t v1 = v14;
      *uint64_t v3 = v14;
    }

    uint64_t v17 = (char *)sub_10001CF60(v14, v15, v16);
    uint64_t v18 = &v17[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_stream];
    sub_100010BE4((uint64_t)&v17[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_stream], (uint64_t)&v50, 0LL);
    uint64_t v19 = *(void *)v18;

    uint64_t v23 = v19 - (v1 + 32);
    if (v23 >= 1)
    {
      uint64_t v24 = (char *)sub_10001CF60(v20, v21, v22);
      uint64_t v25 = *(void *)&v24[OBJC_IVAR____TtC7parsecd22CompressedOutputStream__compressedBytesWritten];
      BOOL v26 = __OFADD__(v25, v23);
      uint64_t v27 = v25 + v23;
      if (v26)
      {
        __break(1u);
        goto LABEL_13;
      }

      *(void *)&v24[OBJC_IVAR____TtC7parsecd22CompressedOutputStream__compressedBytesWritten] = v27;
    }

    BOOL v28 = (char *)sub_10001CF60(v20, v21, v22);
    id v29 = *(id *)&v28[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_outputStream];

    id v30 = [v29 write:v1 + 32 maxLength:v23];
    sub_10001CF38((uint64_t)v30, v31, v32, v33, v34, v35);

    swift_unknownObjectUnownedDestroy(v51);
  }

  while (!*(_DWORD *)(v0 + v4));
  uint64_t v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_digest);
  sub_100010BC0(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_digest, (uint64_t)v52);
  char v37 = sub_10001CF44();
  *uint64_t v3 = v1;
  if ((v37 & 1) != 0) {
    goto LABEL_11;
  }
LABEL_13:
  sub_10001CF70();
  uint64_t v1 = v49;
  *uint64_t v3 = v49;
LABEL_11:
  Swift::String v38 = (CC_SHA512_CTX *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_shaContext);
  sub_100010BC0(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_shaContext, (uint64_t)v51);
  uint64_t v39 = CC_SHA512_Final((unsigned __int8 *)(v1 + 32), v38);
  uint64_t v42 = sub_10001CF50(v39, v40, v41);
  sub_10001CF38(v42, v43, v44, v45, v46, v47);
  sub_100010BC0((uint64_t)v2, (uint64_t)v52);
  compression_stream_destroy(v2);
  swift_endAccess(v52);
  return [*(id *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_outputStream) close];
}

void sub_10001CDB8()
{
}

void sub_10001CDEC()
{
}

void sub_10001CE20()
{
}

id RawPayload.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CompressedOutputStream()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd22CompressedOutputStream);
}

uint64_t sub_10001CF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  *uint64_t v6 = v7;
  return swift_endAccess(va);
}

uint64_t sub_10001CF44()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_10001CF50(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return swift_endAccess(va);
}

uint64_t sub_10001CF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  return swift_endAccess(va);
}

uint64_t sub_10001CF60(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return swift_unknownObjectUnownedLoadStrong(va);
}

uint64_t sub_10001CF68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_stdlib_reportUnimplementedInitializer(a1, a2, a3, a4, 0LL);
}

void sub_10001CF70()
{
}

uint64_t EngagedCompletionCacheClient.rawValue.getter(uint64_t result)
{
  return result;
}

void sub_10001CF80(char a1)
{
  uint64_t v3 = type metadata accessor for PegasusClientName(0LL);
  __chkstk_darwin(v3);
  sub_100019EB4();
  if (a1)
  {
    if (a1 == 1) {
      char v5 = (unsigned int *)&enum case for PegasusClientName.Safari(_:);
    }
    else {
      char v5 = (unsigned int *)&enum case for PegasusClientName.Spotlight(_:);
    }
    (*(void (**)(uint64_t, void))(v4 + 104))(v1, *v5);
    Client.init(_:)(v1);
    sub_1000110D4();
  }

  else
  {
    static Client.unknown.getter();
  }

parsecd::EngagedCompletionCacheClient_optional __swiftcall EngagedCompletionCacheClient.init(rawValue:)( Swift::UInt rawValue)
{
  if (rawValue >= 3) {
    LOBYTE(rawValue) = 3;
  }
  return (parsecd::EngagedCompletionCacheClient_optional)rawValue;
}

BOOL sub_10001D034(char *a1, char *a2)
{
  return static SQLiteBaseVTab.Style.__derived_enum_equals(_:_:)(*a1, *a2);
}

unint64_t sub_10001D044()
{
  unint64_t result = qword_1001D19D0;
  if (!qword_1001D19D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EngagedCompletionCacheClient,  &type metadata for EngagedCompletionCacheClient);
    atomic_store(result, (unint64_t *)&qword_1001D19D0);
  }

  return result;
}

uint64_t sub_10001D080()
{
  return sub_10007975C(*v0);
}

uint64_t sub_10001D088(uint64_t a1)
{
  return sub_10007AFD8(a1, *v1);
}

uint64_t sub_10001D090(uint64_t a1)
{
  return sub_100079B34(a1, *v1);
}

void sub_10001D098()
{
}

Swift::Int sub_10001D0B8()
{
  return Hasher._finalize()();
}

parsecd::EngagedCompletionCacheClient_optional sub_10001D0F8@<W0>( Swift::UInt *a1@<X0>, parsecd::EngagedCompletionCacheClient_optional *a2@<X8>)
{
  result.value = EngagedCompletionCacheClient.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void sub_10001D120(uint64_t *a1@<X8>)
{
  *a1 = EngagedCompletionCacheClient.rawValue.getter(*v1);
  sub_100009A90();
}

_BYTE *initializeBufferWithCopyOfBuffer for EngagedCompletionCacheClient(_BYTE *result, _BYTE *a2)
{
  *parsecd::EngagedCompletionCacheClient_optional result = *a2;
  return result;
}

void type metadata accessor for EngagedCompletionCacheClient()
{
}

Swift::Int sub_10001D16C(uint64_t a1)
{
  return Hasher._finalize()();
}

void sub_10001D1A8()
{
  uint64_t v18 = type metadata accessor for URL(0LL);
  uint64_t v17 = *(void *)(v18 - 8);
  sub_100027160();
  uint64_t v3 = __chkstk_darwin(v2);
  char v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v14 - v6;
  uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v9 = [v8 defaultManager];
  sub_10001D474(v9, (uint64_t)v7);
  if (v1)
  {

    swift_unknownObjectRelease();
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v5, v7, v18);
    id v16 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    id v15 = [v8 defaultManager];
    sub_1000478B0();
    sub_1000C27CC();
    uint64_t v11 = v10;
    swift_unknownObjectRelease();
    sub_1000489B0();
    uint64_t v13 = v12;
    swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
    sub_10001D5E8((uint64_t)v5, v16, v15, v11, v13);
    swift_unknownObjectRelease();

    sub_1000271A0();
  }

  sub_10002716C();
}

unint64_t sub_10001D358()
{
  uint64_t v0 = type metadata accessor for Date(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin();
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = Date.init()(v2);
  double v6 = Date.timeIntervalSinceReferenceDate.getter(v5);
  unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  if ((~*(void *)&v6 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (v6 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (v6 < 1.84467441e19) {
    return (unint64_t)v6;
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_10001D418(uint64_t a1)
{
  double v1 = Date.timeIntervalSinceReferenceDate.getter(a1);
  if ((~*(void *)&v1 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (v1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (v1 >= 1.84467441e19) {
LABEL_7:
  }
    __break(1u);
}

uint64_t sub_10001D474@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  id v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v15 - v10;
  id v16 = a1;
  uint64_t v12 = sub_100009788(0LL, (unint64_t *)&qword_1001D1AE8, &OBJC_CLASS___NSFileManager_ptr);
  uint64_t result = static PegasusConfigContainerURLProvider.containerURL<A>(using:)(&v16, v12);
  if (!v2)
  {
    URL.appendingPathComponent(_:)(0xD000000000000012LL, 0x800000010016B940LL);
    uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
    v14(v9, v5);
    sub_10001E08C(v11);
    URL.appendingPathComponent(_:)(0x62642E6568636143LL, 0xE800000000000000LL);
    sub_10001E58C(a1, a2);
    return ((uint64_t (*)(char *, uint64_t))v14)(v11, v5);
  }

  return result;
}

void sub_10001D5E8(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v97 = a5;
  id v80 = a4;
  uint64_t v95 = a1;
  id v96 = a3;
  id v94 = a2;
  uint64_t v79 = *v5;
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v99 = *(void *)(v7 - 8);
  uint64_t v100 = v7;
  sub_100027160();
  uint64_t v9 = __chkstk_darwin(v8);
  int v92 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v98 = (uint64_t)&v79 - v11;
  uint64_t v12 = sub_10000941C(&qword_1001D1AC8);
  sub_100009ACC(v12, 32LL);
  v5[2] = sub_10000B620(2592000.0);
  int v91 = (void (*)(char *, uint64_t, uint64_t))sub_100009788( 0LL,  (unint64_t *)&qword_1001D43D0,  &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  int v88 = *(void **)(*(void *)(v13 - 8) + 64LL);
  __chkstk_darwin(v13);
  unint64_t v89 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  sub_100027218();
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v86 = v15;
  uint64_t v82 = *(void *)(v16 + 64);
  __chkstk_darwin(v15);
  unint64_t v87 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v18 = (char *)&v79 - v87;
  unsigned int v84 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v85 = *(void (**)(char *))(v19 + 104);
  v85((char *)&v79 - v87);
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  uint64_t v21 = *(void *)(*(void *)(v20 - 8) + 64LL);
  __chkstk_darwin(v20);
  unint64_t v83 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v22 = (char *)&v79 - v83;
  uint64_t v103 = &_swiftEmptyArrayStorage;
  sub_10000BCF8( (unint64_t *)&qword_1001D1AD0,  v23,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v25 = v24;
  uint64_t v26 = sub_10000941C((uint64_t *)&unk_1001D3780);
  uint64_t v81 = v26;
  sub_100025F50((unint64_t *)&qword_1001D1AD8, (uint64_t *)&unk_1001D3780);
  uint64_t v28 = v27;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v103, v26, v27, v20, v25);
  sub_100027204();
  uint64_t v29 = (uint64_t)v18;
  uint64_t v30 = v90;
  uint64_t v32 = sub_10002727C(0xD000000000000020LL, v31, v6, (uint64_t)v22, v29);
  *(void *)(v30 + swift_unknownObjectWeakDestroy(v0 + 32) = v32;
  __chkstk_darwin(v32);
  uint64_t v33 = sub_100027218();
  __chkstk_darwin(v33);
  uint64_t v34 = (char *)&v79 - v87;
  uint64_t v35 = ((uint64_t (*)(char *, void, uint64_t))v85)((char *)&v79 - v87, v84, v86);
  __chkstk_darwin(v35);
  uint64_t v36 = (char *)&v79 - v83;
  uint64_t v103 = &_swiftEmptyArrayStorage;
  uint64_t v37 = v20;
  uint64_t v38 = v95;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v103, v81, v28, v37, v25);
  sub_100027204();
  uint64_t v39 = (uint64_t)v36;
  uint64_t v40 = v100;
  *(void *)(v30 + 40) = sub_10002727C(v41, v42, v6, v39, (uint64_t)v34);
  uint64_t v43 = type metadata accessor for Locker();
  uint64_t v44 = sub_100009ACC(v43, 24LL);
  uint64_t v45 = (_DWORD *)sub_100009B20(4LL);
  *(void *)(v44 + sub_100019D10(v0 + 16) = v45;
  *uint64_t v45 = 0;
  *(void *)(v30 + 48) = v44;
  id v46 = [objc_allocWithZone(PARSmartSearchV1Parameters) init];
  id v47 = [objc_allocWithZone(PARSmartSearchV2Parameters) init];
  *(void *)(v30 + sub_10000BDD4(v0 + 56) = v46;
  *(void *)(v30 + 64) = v47;
  *(_OWORD *)(v30 + 72) = xmmword_10015DA60;
  uint64_t v48 = v97;
  *(void *)(v30 + 24) = v97;
  uint64_t v49 = v30 + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_dbURL;
  uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v99 + 16);
  v50(v30 + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_dbURL, v38, v40);
  uint64_t v51 = swift_retain(v48);
  URL.path.getter(v51);
  NSString v52 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v53 = [v96 fileExistsAtPath:v52];

  if (qword_1001D0530 != -1) {
    swift_once(&qword_1001D0530, sub_1000344F0);
  }
  uint64_t v54 = type metadata accessor for Logger(0LL);
  uint64_t v55 = sub_1000093D0(v54, (uint64_t)qword_1001EDC60);
  os_log_type_t v56 = static os_log_type_t.default.getter(v55);
  int v91 = (void (*)(char *, uint64_t, uint64_t))v50;
  uint64_t v57 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v50)(v98, v38, v40);
  uint64_t v58 = (os_log_s *)Logger.logObject.getter(v57);
  os_log_type_t v59 = v56;
  BOOL v60 = os_log_type_enabled(v58, v56);
  LODWORD(v89) = v53;
  if (v60)
  {
    uint64_t v61 = sub_100009B20(22LL);
    int v88 = (void *)sub_100009B20(64LL);
    uint64_t v103 = v88;
    *(_DWORD *)uint64_t v61 = 136315394;
    if (v53) {
      uint64_t v62 = 0x697865206E65706FLL;
    }
    else {
      uint64_t v62 = 0x6E20657461657263LL;
    }
    if (v53) {
      unint64_t v63 = 0xED0000676E697473LL;
    }
    else {
      unint64_t v63 = 0xEA00000000007765LL;
    }
    uint64_t v101 = sub_1000307E0(v62, v63, (uint64_t *)&v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v61 + 4);
    swift_bridgeObjectRelease();
    *(_WORD *)(v61 + 12) = 2080;
    unint64_t v64 = sub_100025DFC();
    uint64_t v65 = v49;
    uint64_t v66 = v98;
    uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter(v100, v64);
    uint64_t v101 = sub_1000307E0(v67, v68, (uint64_t *)&v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v61 + 14);
    swift_bridgeObjectRelease();
    uint64_t v69 = v66;
    uint64_t v49 = v65;
    (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v69, v100);
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "ECC will %s DB at %s.", (uint8_t *)v61, 0x16u);
    uint64_t v70 = (uint64_t)v88;
    swift_arrayDestroy(v88, 2LL);
    uint64_t v38 = v95;
    sub_100010C34(v70);
    uint64_t v71 = v61;
    uint64_t v40 = v100;
    sub_100010C34(v71);
  }

  else
  {
    sub_1000271E4(v98);
  }

  uint64_t v72 = (uint64_t)v92;
  v91(v92, v38, v40);
  uint64_t v73 = type metadata accessor for SQLiteDatabase();
  sub_100009ACC(v73, 24LL);
  uint64_t v74 = v93;
  uint64_t v75 = SQLiteDatabase.init(_:readOnly:requiresAuthentication:)(v72, 0, 0);
  if (v74)
  {

    sub_100027260();
    sub_100027258();
    sub_1000272D8();
    sub_1000271E4(v38);
    swift_release();
    swift_release();

    swift_release();
    uint64_t v76 = *(void **)(v30 + 56);

    sub_1000271E4(v49);
    swift_deallocPartialClassInstance( v30,  v79,  *(unsigned int *)(*(void *)v30 + 48LL),  *(unsigned __int16 *)(*(void *)v30 + 52LL));
  }

  else
  {
    *(void *)(v30 + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_database) = v75;
    sub_10001DD74(v89 ^ 1);
    id v77 = v94;
    objc_msgSend( v94,  "addObserver:selector:name:object:",  v30,  "bagChangeNotificationWithNotification:",  @"PARBagChangeNotification",  0,  v79);
    if (v80)
    {
      id v78 = v80;
      sub_10001DDC0(v78);
      sub_10001DEE4(v78);

      sub_100027260();
      sub_100027258();
    }

    else
    {

      sub_100027260();
      sub_100027258();
    }

    sub_1000271E4(v38);
  }

  sub_10002716C();
}

uint64_t sub_10001DD74(char a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_database);
  v4[16] = a1;
  return (*(uint64_t (**)(void *(*)(), _BYTE *))(*(void *)v2 + 192LL))(sub_100025E3C, v4);
}

void sub_10001DDC0(void *a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1[6] + 16LL);
  os_unfair_lock_lock(v3);
  id v4 = objc_allocWithZone(&OBJC_CLASS___PARSmartSearchV1Parameters);
  id v5 = a1;
  id v6 = [v4 initFromBag:v5];
  id v7 = [objc_allocWithZone(PARSmartSearchV2Parameters) initFromBag:v5];

  unint64_t v8 = (unint64_t)[v5 smartHistoryMaxRows];
  if ((v8 & 0x8000000000000000LL) != 0
    || (unint64_t v9 = v8, v10 = (unint64_t)[v5 smartHistoryTimeout], (v10 & 0x8000000000000000) != 0))
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t v12 = (void *)v1[7];
    uint64_t v11 = (void *)v1[8];
    v1[7] = v6;
    v1[8] = v7;
    void v1[9] = v9;
    v1[10] = v10;

    os_unfair_lock_unlock(v3);
  }

id sub_10001DEE4(void *a1)
{
  id result = [a1 zkwRecentsExpiration];
  if (result)
  {
    uint64_t v3 = result;
    [result doubleValue];
    double v5 = v4;

    swift_retain(*(void *)(v1 + 16));
    sub_10004B544(v5);
    return (id)swift_release();
  }

  return result;
}

void sub_10001DF5C(void *a1)
{
  if (!v1)
  {
    __int128 v8 = 0u;
    __int128 v9 = 0u;
    goto LABEL_6;
  }

  uint64_t v2 = v1;
  v6[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"bag");
  v6[1] = v3;
  AnyHashable.init<A>(_:)(v6);
  sub_10000BEF0((uint64_t)v7, v2, &v8);
  swift_bridgeObjectRelease();
  sub_10000BD34((uint64_t)v7);
  if (!*((void *)&v9 + 1))
  {
LABEL_6:
    sub_100019C1C((uint64_t)&v8, (uint64_t *)&unk_1001D32C0);
    return;
  }

  uint64_t v4 = sub_100009788(0LL, (unint64_t *)&qword_1001D47F0, &OBJC_CLASS___PARBag_ptr);
  if ((swift_dynamicCast(v7, &v8, (char *)&type metadata for Any + 8, v4, 6LL) & 1) != 0)
  {
    double v5 = v7[0];
    sub_10001DDC0(v7[0]);
    sub_10001DEE4(v5);
  }

void sub_10001E08C(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v47 - v12;
  char v55 = 0;
  URL.path.getter(v11);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v52 = v4;
  unsigned int v15 = [v4 fileExistsAtPath:v14 isDirectory:&v55];

  if (v15)
  {
    if ((v55 & 1) != 0) {
      return;
    }
    uint64_t v50 = v10;
    if (qword_1001D0530 != -1) {
      swift_once(&qword_1001D0530, sub_1000344F0);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_1000093D0(v16, (uint64_t)qword_1001EDC60);
    uint64_t v17 = (*(uint64_t (**)(char *, void *, uint64_t))(v7 + 16))(v13, a1, v6);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v49 = (void *)swift_slowAlloc(32LL, -1LL);
      id v56 = v49;
      uint64_t v51 = v7;
      *(_DWORD *)uint64_t v20 = 136315138;
      uint64_t v48 = v20 + 4;
      unint64_t v21 = sub_100025DFC();
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(v6, v21);
      uint64_t v53 = sub_1000307E0(v22, v23, (uint64_t *)&v56);
      uint64_t v3 = v2;
      uint64_t v7 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v48);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "ECC expected a directory but found a regular file at %s.",  v20,  0xCu);
      uint64_t v24 = v49;
      swift_arrayDestroy(v49, 1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    }

    URL._bridgeToObjectiveC()(v25);
    uint64_t v27 = v26;
    id v56 = 0LL;
    unsigned int v28 = [v52 removeItemAtURL:v26 error:&v56];

    id v29 = v56;
    unint64_t v10 = v50;
    if (!v28) {
      goto LABEL_17;
    }
    id v30 = v56;
  }

  if (qword_1001D0530 != -1) {
    swift_once(&qword_1001D0530, sub_1000344F0);
  }
  uint64_t v31 = type metadata accessor for Logger(0LL);
  sub_1000093D0(v31, (uint64_t)qword_1001EDC60);
  uint64_t v32 = (*(uint64_t (**)(char *, void *, uint64_t))(v7 + 16))(v10, a1, v6);
  uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = swift_slowAlloc(12LL, -1LL);
    uint64_t v51 = v7;
    uint64_t v36 = (uint8_t *)v35;
    uint64_t v37 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v50 = v3;
    uint64_t v38 = v37;
    id v56 = v37;
    *(_DWORD *)uint64_t v36 = 136315138;
    uint64_t v49 = a1;
    unint64_t v39 = sub_100025DFC();
    uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter(v6, v39);
    uint64_t v53 = sub_1000307E0(v40, v41, (uint64_t *)&v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v36 + 4);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v10, v6);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "ECC creating db dir at path %s", v36, 0xCu);
    swift_arrayDestroy(v38, 1LL);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }

  URL.path.getter(v42);
  NSString v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v56 = 0LL;
  unsigned int v44 = [v52 createDirectoryAtPath:v43 withIntermediateDirectories:1 attributes:0 error:&v56];

  id v29 = v56;
  if (v44)
  {
    id v45 = v56;
    return;
  }

LABEL_17:
  id v46 = v29;
  _convertNSErrorToError(_:)(v29);

  swift_willThrow();
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 3;
  double v5 = v6 - 3;
  if (!v7) {
    double v5 = -1;
  }
  return (v5 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 2;
  double v5 = v6 - 2;
  if (!v7) {
    double v5 = -1;
  }
  return (v5 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 5;
  double v5 = v6 - 5;
  if (!v7) {
    double v5 = -1;
  }
  return (v5 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x21;
  double v5 = v6 - 33;
  if (!v7) {
    double v5 = -1;
  }
  return (v5 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 6;
  double v5 = v6 - 6;
  if (!v7) {
    double v5 = -1;
  }
  return (v5 + 1);
}

  uint64_t v6 = *(unsigned __int8 *)a1;
  uint64_t v7 = v6 >= 2;
  double v5 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    double v5 = -1;
  }
  return (v5 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 8;
  double v5 = v6 - 8;
  if (!v7) {
    double v5 = -1;
  }
  return (v5 + 1);
}

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

    sub_10005A27C();
    uint64_t v18 = v29 & v28;
  }

  if (v24 + 3 >= v44)
  {
LABEL_29:
    swift_release_n(v12, 2LL);
    double v5 = v42;
    goto LABEL_31;
  }

  sub_10005A880();
  if (v27)
  {
    unint64_t v21 = v26;
    goto LABEL_17;
  }

  while (1)
  {
    unint64_t v21 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v21 >= v44) {
      goto LABEL_29;
    }
    ++v26;
    if (*(void *)(v43 + 8 * v21)) {
      goto LABEL_17;
    }
  }

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x6E;
  double v5 = v6 - 110;
  if (!v7) {
    double v5 = -1;
  }
  return (v5 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x2D;
  double v5 = v6 - 45;
  if (!v7) {
    double v5 = -1;
  }
  return (v5 + 1);
}

  sub_100082F80((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_1000C1650);
  uint64_t v62 = sub_100010708(v32, 1LL, v22);
  unint64_t v63 = v62;
  sub_1000A215C(v62, (uint64_t *)&unk_1001D5D20);
  if (v63 == 1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(kPARErrorDomain);
    sub_1000A28B4();
    uint64_t v71 = sub_10000941C(&qword_1001D10D0);
    uint64_t v72 = (__n128 *)sub_1000A25C0(v71);
    uint64_t v73 = sub_1000A194C(v72, (__n128)xmmword_10015C7F0);
    uint64_t v75 = sub_1000A1924(v73, (uint64_t)&type metadata for String, v74);
    v75[6] = v76;
    v75[7] = v77;
    Dictionary.init(dictionaryLiteral:)( v75,  v78,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    uint64_t v79 = objc_allocWithZone(&OBJC_CLASS___NSError);
    id v80 = (id)sub_1000A1458();
    uint64_t v81 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  }

  else
  {
    sub_100086CFC( 0LL,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v112,  v113,  v114,  v115,  v116,  (uint64_t)v117,  v118,  v119,  v120,  (uint64_t)v121,  v122,  v123);
    if ((v82 & 1) != 0)
    {
      sub_100082FD4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (void (*)(uint64_t))sub_1000C1614);
      if (v83)
      {
        unsigned int v84 = (void *)v83;
        uint64_t v85 = sub_100009B34(v83, (unint64_t *)&qword_1001D47F0, &OBJC_CLASS___PARBag_ptr);
        if ((Config.isDefault.getter(v85) & 1) == 0)
        {
          id v80 = v84;
          sub_1000A2300();
          sub_100061F7C(v104, v105, v106, v107, v108, v109, (uint64_t)v84, v116);
          sub_10001449C();

          goto LABEL_29;
        }
      }

      static String._unconditionallyBridgeFromObjectiveC(_:)(kPARErrorDomain);
      sub_1000A28B4();
      uint64_t v86 = sub_10000941C(&qword_1001D10D0);
      uint64_t inited = (__n128 *)swift_initStackObject(v86, &v129);
      int v88 = sub_10006B254(inited, (__n128)xmmword_10015C7F0);
      unint64_t v89 = sub_1000A1914((uint64_t)v88, (uint64_t)&type metadata for String);
      int v91 = sub_10006B3C0(v89, v90 + 11);
      Dictionary.init(dictionaryLiteral:)( v91,  v92,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
      uint64_t v93 = objc_allocWithZone(&OBJC_CLASS___NSError);
      id v80 = (id)sub_1000A1458();
      uint64_t v81 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    }

    else
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(kPARErrorDomain);
      sub_1000A28B4();
      id v94 = sub_10000941C(&qword_1001D10D0);
      uint64_t v95 = (__n128 *)swift_initStackObject(v94, &v130);
      id v96 = sub_10006B254(v95, (__n128)xmmword_10015C7F0);
      uint64_t v97 = sub_1000A1914((uint64_t)v96, (uint64_t)&type metadata for String);
      uint64_t v99 = sub_10006B3C0(v97, v98);
      Dictionary.init(dictionaryLiteral:)( v99,  v100,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
      uint64_t v101 = objc_allocWithZone(&OBJC_CLASS___NSError);
      id v80 = (id)sub_1000A1458();
      uint64_t v81 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    }
  }

  uint64_t v102 = v81;
  [v102 addObserver:v21 selector:"bagChangeNotificationWithNotification:" name:@"PARBagChangeNotification" object:0];

  uint64_t v103 = v127;
  if (v127)
  {
    sub_1000A2580();
    sub_1000A2300();
    v103();
    sub_100014530();
    sub_10007705C((uint64_t)v133);
  }

  else
  {
    sub_10007705C((uint64_t)v133);
    sub_1000A2300();
  }

  v486 = v57;
  v520[0] = 0LL;
  sub_1000A1BC8((uint64_t)v520);
  v505 = (char *)v520[0];
  if (qword_1001D04B0 != -1) {
    swift_once(&qword_1001D04B0, sub_1000342AC);
  }
  id v106 = (os_log_s *)sub_1000093D0((uint64_t)v511, (uint64_t)qword_1001EDAE0);
  sub_100019F54(v79);
  id v107 = v9;
  uint64_t v108 = (os_log_s *)Logger.logObject.getter(v107);
  uint64_t v109 = static os_log_type_t.default.getter(v108);
  uint64_t v110 = os_log_type_enabled(v108, v109);
  v512 = v1;
  v515 = v79;
  if (v110)
  {
    uint64_t v111 = sub_100009B20(52LL);
    v453 = v106;
    uint64_t v112 = v111;
    uint64_t v113 = sub_100009B20(64LL);
    v520[0] = v113;
    *(_DWORD *)uint64_t v112 = 136447235;
    sub_1000A15C0();
    sub_100059F08(&qword_1001D5280, (uint64_t (*)(uint64_t))&type metadata accessor for SessionType);
    id v115 = sub_1000A1EC8(v114);
    *(void *)&v517 = sub_1000307E0(v115, v116, v520);
    sub_1000A1894((uint64_t)&v517, (uint64_t)&v517 + 8);
    sub_100019D80(v515);
    uint64_t v117 = sub_1000110A8();
    *(_WORD *)(v112 + 12) = 2050;
    NSString v118 = sub_10005A6E0(v117, "queryId");

    *(void *)&v517 = v118;
    sub_1000A1A78((uint64_t)&v517, (uint64_t)&v517 + 8);

    *(_WORD *)(v112 + 22) = 2050;
    *(void *)&v517 = v505;
    sub_1000A1870((uint64_t)&v517, v119, v112 + 24);
    *(_WORD *)(v112 + swift_unknownObjectWeakDestroy(v0 + 32) = 2085;
    sub_1000A14F8((uint64_t)&v526, (uint64_t)&v516);
    sub_1000145E8();
    v120 = sub_1000A1E54();
    *(void *)&v517 = sub_1000307E0(v120, v121, v122);
    sub_1000A1A78((uint64_t)&v517, (uint64_t)&v517 + 8);
    sub_10001450C();
    *(_WORD *)(v112 + 42) = 2048;
    sub_1000145E8();
    uint64_t v123 = sub_1000A1E54();
    uint64_t v1 = String.UTF16View.count.getter(v123);
    uint64_t v70 = v514;
    swift_bridgeObjectRelease();
    *(void *)&v517 = v1;
    sub_10006B768();
    uint64_t v79 = v515;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v124, v125, v126);
    _os_log_impl( (void *)&_mh_execute_header,  v108,  v109,  "Session %{public}s performing query %{public}llu requestId: %{public}llu '%{sensitive}s', length: %ld",  (uint8_t *)v112,  0x34u);
    sub_10004EE00(v113);
    sub_100010C34(v113);
    uint64_t v127 = v112;
    id v106 = v453;
    sub_100010C34(v127);
  }

  else
  {

    sub_100019D80(v79);
  }

  sub_100086CFC( 1LL,  v128,  v129,  v130,  v131,  v132,  v133,  v134,  v451,  (uint64_t)v452,  (uint64_t)v453,  v454,  v455,  v456,  v457,  v458,  v459,  v460,  v461,  v462);
  if ((v135 & 1) == 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(kPARErrorDomain);
    sub_10004EC84();
    v145 = sub_10000941C(&qword_1001D10D0);
    uint64_t inited = (__n128 *)swift_initStackObject(v145, &v525);
    uint64_t v147 = sub_10006B254(inited, (__n128)xmmword_10015C7F0);
    v147[4].n128_u64[1] = (unint64_t)&type metadata for String;
    uint64_t v148 = sub_10006B3C0((uint64_t)v147, 0xD000000000000013LL);
    uint64_t v150 = Dictionary.init(dictionaryLiteral:)( v148,  v149,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    uint64_t v151 = objc_allocWithZone(&OBJC_CLASS___NSError);
    id v152 = (void *)sub_10006B3A4(v79, v79, 1LL, v150);
    Logger.logObject.getter(v152);
    id v153 = sub_100010EC4();
    id v154 = sub_10004ED20(v153);
    v511 = v152;
    if (v154)
    {
      id v155 = (uint8_t *)sub_100009B20(12LL);
      uint64_t v156 = sub_100009B20(32LL);
      v520[0] = v156;
      *(_DWORD *)id v155 = 136642819;
      sub_1000A14F8((uint64_t)&v526, (uint64_t)&v517);
      v505 = (char *)&type metadata for Any + 8;
      uint64_t v157 = v526;
      sub_10003EF98();
      v523 = sub_1000A1C20(v157, v158, v520);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v523, &v524, v155 + 4);
      sub_1000110E0();
      sub_100014564( (void *)&_mh_execute_header,  v106,  (os_log_type_t)v1,  "Bag fetch failed, can't complete query: %{sensitive}s",  v155);
      swift_arrayDestroy(v156, 1LL);
      sub_100010C34(v156);
      sub_100010C34((uint64_t)v155);
    }

    uint64_t v159 = v503;
    sub_1000A14F8((uint64_t)&v526, (uint64_t)v520);
    uint64_t v160 = objc_allocWithZone(&OBJC_CLASS____CPSkipSearchFeedback);
    sub_100010E2C();
    __int128 v161 = sub_1000A21A0(3LL);
    uint64_t v162 = *(os_log_s **)(v515 + 64);
    uint64_t v163 = sub_1000A1E14();
    sub_10005A6E0(v163, "queryId");
    uint64_t v164 = [objc_allocWithZone(_CPFeedbackPayload) initWithCodable:v161];
    sub_1000A1964(v164, "setQueryId:");
    sub_100082F80( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent,  (void (*)(uint64_t))sub_1000C1650);
    uint64_t v165 = sub_1000A2718();
    uint64_t v167 = sub_10005A148(v165, v166, v514);
    if (v139)
    {
      v190 = (uint64_t)v504;
      uint64_t v168 = parsecdUserAgent.getter(v167);
      sub_1000A2724(v168, (uint64_t *)&unk_1001D5D20);
      v189 = v506;
    }

    else
    {
      v189 = v506;
      v190 = (uint64_t)v504;
      sub_10005A274((uint64_t)v504, v159, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v506 + 32));
    }

    sub_1000A2684();
    sub_10005A910();

    uint64_t v191 = sub_10004729C(v190, *(uint64_t (**)(uint64_t, uint64_t))(v189 + 8));
    sub_10005A6E0(v191, "queryId");
    uint64_t v192 = (uint64_t)v511;
    uint64_t v193 = v511;
    uint64_t v194 = sub_1000C5FB0(v192);

    if (v194) {
      uint64_t v195 = (void *)sub_1000A21B8();
    }
    else {
      uint64_t v195 = 0LL;
    }
    v196 = v513;
    v197 = sub_1000A2418();
    v198(v197);

    sub_1000A21B0();
    sub_1000A1360(qword_1001D2E88);

    sub_10001683C();
    goto LABEL_39;
  }

  uint64_t v136 = (uint64_t)v502;
  sub_1000A1BDC((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_1000C1650);
  uint64_t v137 = sub_10005A148(v136, 1LL, v70);
  uint64_t v138 = v512;
  if (v139)
  {
    sub_1000A1A50(v137, (uint64_t *)&unk_1001D5D20);
    uint64_t v141 = sub_10005A6E0(v140, "queryId");
    uint64_t v142 = v509;
    sub_1000A1354((uint64_t)v509, (uint64_t)v141, v509[2]);
    sub_1000A1360(qword_1001D2E88);
    sub_10001683C();
LABEL_26:
    uint64_t v143 = sub_1000A2068();
LABEL_49:
    sub_10005A6D0(v143, v144);
    sub_1000A184C();
    sub_100009B3C();
    _Block_release(v142);
    uint64_t v188 = (os_log_s *)v142;
    goto LABEL_50;
  }

  v504 = v107;
  id v169 = v106;
  uint64_t v170 = v506;
  uint64_t v171 = (uint64_t)v501;
  sub_1000A1D34();
  v172();
  sub_1000A14F8((uint64_t)&v526, (uint64_t)&v523);
  v520[0] = v526;
  v520[1] = v527;
  uint64_t v173 = sub_1000A0210();
  sub_100059DA0((unint64_t *)&unk_1001D53A0, (uint64_t *)&unk_1001D5388);
  uint64_t v175 = BidirectionalCollection<>.starts<A>(with:)(v513, &type metadata for String, v138, v173, v174);
  if ((v175 & 1) != 0)
  {
    unint64_t v176 = objc_allocWithZone(&OBJC_CLASS____CPSkipSearchFeedback);
    sub_1000145E8();
    sub_1000A1C00();
    uint64_t v180 = sub_10008F620(v177, v178, v179);
    uint64_t v181 = sub_10006B4EC();
    sub_1000A1434(v181, "queryId");
    uint64_t v182 = [objc_allocWithZone(_CPFeedbackPayload) initWithCodable:v180];
    sub_1000A259C(v182, "setQueryId:");
    sub_1000A5CB4();
    sub_100010CA0();

    uint64_t v184 = sub_1000A1434(v183, "queryId");
    v185 = v509;
    sub_1000A1354((uint64_t)v509, (uint64_t)v184, v509[2]);
    sub_1000A1360(qword_1001D2E88);
    sub_10001683C();

    sub_1000A18CC(v171, *(uint64_t (**)(uint64_t, void))(v170 + 8));
    uint64_t v186 = sub_1000A1BF4();
LABEL_34:
    sub_10005A6D0(v186, v187);
    sub_1000A184C();
    sub_100009B3C();
    _Block_release(v185);
    uint64_t v188 = (os_log_s *)v185;
LABEL_50:
    _Block_release(v188);
    sub_100009AA0();
    return;
  }

  v199 = v515;
  sub_100082FD4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (void (*)(uint64_t))sub_1000C1614);
  if (!v200)
  {
    v210 = sub_1000A2000(0LL, "queryId");
    uint64_t v142 = v509;
    sub_1000A1354((uint64_t)v509, (uint64_t)v210, v509[2]);
    sub_1000A1360(qword_1001D2E88);
    sub_10001683C();
    (*(void (**)(void *, uint64_t))(v506 + 8))(v501, v514);
LABEL_48:
    uint64_t v143 = sub_1000A1BF4();
    goto LABEL_49;
  }

  v201 = v200;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v199 + 16);
  v203 = v514;
  if (!Strong)
  {
    v211 = sub_1000A2000(0LL, "queryId");
    uint64_t v142 = v509;
    sub_1000A1354((uint64_t)v509, (uint64_t)v211, v509[2]);
    sub_1000A1360(qword_1001D2E88);
    sub_10001683C();

    (*(void (**)(void *, uint64_t))(v506 + 8))(v501, v203);
    goto LABEL_48;
  }

  v204 = Strong;
  v205 = *(os_log_s **)(v199 + 24);
  if (([v201 isEnabled] & 1) == 0)
  {
    sub_1000A2740();
    v212 = sub_10006B8B0();
    if (sub_100010DE4(v212))
    {
      v213 = (uint8_t *)sub_100009B20(2LL);
      *(_WORD *)v213 = 0;
      sub_10001447C((void *)&_mh_execute_header, v205, (os_log_type_t)v199, "no search, bag disabled", v213);
      sub_100010C34((uint64_t)v213);
    }

    v214 = objc_allocWithZone(&OBJC_CLASS____CPSkipSearchFeedback);
    sub_100010E2C();
    v215 = sub_1000A21A0(2LL);
    v216 = sub_10006B4EC();
    sub_1000A1434(v216, "queryId");
    v217 = [objc_allocWithZone(_CPFeedbackPayload) initWithCodable:v215];
    sub_1000A259C(v217, "setQueryId:");
    sub_1000A26DC();
    sub_100010CA0();

    v219 = sub_1000A1434(v218, "queryId");
    v185 = v509;
    sub_1000A1354((uint64_t)v509, (uint64_t)v219, v509[2]);
    sub_1000A1360(qword_1001D2E88);

    sub_10001683C();
    sub_10005A910();

    goto LABEL_54;
  }

  v453 = v205;
  v503 = v204;
  sub_10006B4EC();
  sub_1000A8A40();
  sub_100010CA0();
  v206 = v199 + OBJC_IVAR____TtC7parsecd11ClientState_engagedSuggestionController;
  sub_1000A14F8(v199 + OBJC_IVAR____TtC7parsecd11ClientState_engagedSuggestionController, (uint64_t)&v519);
  sub_1000107D0(v206, (uint64_t)&v517, (uint64_t *)&unk_1001D44A0);
  if (v518)
  {
    sub_100019BC4(&v517, (uint64_t)v520);
    v207 = v521;
    v208 = v522;
    sub_100019AFC(v520, (uint64_t)v521);
    v209 = v207;
    v199 = v515;
    (*(void (**)(void *, void *, unint64_t))(v208 + 8))(v504, v209, v208);
    sub_1000108B8(v520);
  }

  else
  {
    sub_100019C1C((uint64_t)&v517, (uint64_t *)&unk_1001D44A0);
  }

  v222 = sub_1000A2380();
  sub_100090098(v222, v223);
  sub_1000A2660();
  sub_1000A5AE8();
  sub_10004EC84();
  sub_1000145E0();
  if (v199)
  {
    v224 = String._bridgeToObjectiveC()();
    sub_1000110A8();
  }

  else
  {
    v224 = 0LL;
  }

  v225 = v504;
  sub_1000A1650(v504, "setPreviouslyEngagedQuery:");

  v227 = (void (*)(uint64_t, uint64_t, uint64_t))sub_10005A6E0(v226, "minimumQueryLength");
  v228 = [v225 pretend];
  v502 = v227;
  if ((v228 & 1) == 0)
  {
    v229 = v526;
    sub_100010E2C();
    v230 = String.UTF16View.count.getter(v229);
    sub_1000110A8();
    if (v230 < (uint64_t)v227)
    {
      sub_10008FF98(v225);
      v232 = v231;
      swift_bridgeObjectRelease();
      if (!v232) {
        goto LABEL_71;
      }
      sub_10008FF98(v225);
      if (!v233)
      {
LABEL_102:
        sub_1000A1D88();
        _Block_release(v232);
        __break(1u);
        goto LABEL_103;
      }

      if ((unint64_t)v233 >> 62)
      {
        if (v233 >= 0) {
          v233 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        v234 = _CocoaArrayWrapper.endIndex.getter(v233);
      }

      else
      {
        v234 = *(void *)((v233 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      }

      sub_100009B3C();
      v225 = v504;
      if (v234 <= 0)
      {
LABEL_71:
        v258 = v225;
        v259 = v169;
        Logger.logObject.getter(v258);
        v260 = sub_100014588();
        if (sub_1000A2364(v260))
        {
          v261 = sub_100009B20(32LL);
          v262 = (void *)sub_100009B20(32LL);
          v511 = v262;
          v520[0] = (uint64_t)v262;
          *(_DWORD *)v261 = 134218498;
          v263 = sub_100047258((uint64_t)v262, "queryId");
          v264 = sub_1000A20B0((uint64_t)v263);
          sub_1000A1844(v264, v265);

          *(_WORD *)(v261 + 12) = 2080;
          v266 = v526;
          swift_bridgeObjectRetain(v527);
          *(void *)&v517 = sub_1000A1E90(v266, v267, v520);
          sub_1000A1844((uint64_t)&v517, v138);
          v268 = &selRef_fbr;
          swift_bridgeObjectRelease();
          *(_WORD *)(v261 + 22) = 2048;
          *(void *)&v517 = v502;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v517, v138, v261 + 24);
          sub_1000A1B74( (void *)&_mh_execute_header,  v259,  (os_log_type_t)v227,  "query[%llu] input '%s' less than %ld",  (uint8_t *)v261);
          v269 = (uint64_t)v511;
          sub_100030F9C((uint64_t)v511);
          sub_100010C34(v269);
          sub_100010C34(v261);
        }

        else
        {

          v268 = &selRef_fbr;
        }

        v296 = v526;
        v297 = v527;
        v298 = objc_allocWithZone(&OBJC_CLASS____CPSkipSearchFeedback);
        sub_1000145E8();
        v299 = sub_10008F620(1LL, v296, v297);
        v300 = sub_10006B4EC();
        v301 = sub_100047258(v300, v268[4]);
        v302 = [objc_allocWithZone(_CPFeedbackPayload) initWithCodable:v299];
        [v302 setQueryId:v301];
        sub_1000A2164();
        sub_1000A5CB4();
        sub_100010CA0();

        v304 = sub_100047258(v303, v268[4]);
        uint64_t v142 = v509;
        sub_1000A1354((uint64_t)v509, (uint64_t)v304, v509[2]);
        sub_1000A1360(qword_1001D2E88);
        sub_10001683C();

        sub_1000A1CB4();
        sub_1000A1CA4(v305, type metadata accessor for SessionTokens);
        sub_1000A1818();
        goto LABEL_26;
      }
    }
  }

  sub_10004A274(v499);
  v235 = sub_1000A1CBC();
  sub_100009ACC(v235, 928LL);
  v236 = sub_1000A1738();
  sub_1000A2638(v236);
  sub_100082FD4( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__configuration,  (void (*)(uint64_t))sub_10004A3B8);
  v238 = v237;
  uint64_t v162 = v497;
  sub_1000520C0();
  swift_release();

  v239 = v495;
  v240 = (void (*)(void))*((void *)v496 + 4);
  sub_1000A21D0();
  v240();
  if ([v225 pretend])
  {
    v241 = objc_allocWithZone(&OBJC_CLASS___NSHTTPURLResponse);
    v242 = v225;
    v243 = sub_10006B65C((uint64_t)v242, "init");
    v244 = (uint64_t)v489;
    Apple_Parsec_Search_V2_SearchResponse.init()();
    v245 = sub_100088AD8((uint64_t)v243, 0LL, 0xC000000000000000LL, v244, v242);
    v247 = v246;

    v248 = sub_1000A1BF4();
    v250 = v249(v248);
    sub_100047258(v250, "queryId");
    if ((v247 & 1) != 0)
    {
      v520[0] = (uint64_t)v245;
      v251 = sub_10000941C(&qword_1001D2B70);
      swift_willThrowTypedImpl(v520, v251, &protocol self-conformance witness table for Error);
      v252 = 0LL;
    }

    else
    {
      v252 = v245;
    }

    v196 = v513;
    v271 = sub_1000A2418();
    sub_1000A1368(v271, v272, (uint64_t)v252, v273);

    sub_1000A1360(qword_1001D2E88);
    sub_1000A1CB4();

    sub_1000A0380(v245, v247 & 1);
    sub_10001683C();
    v274 = sub_1000A2314();
    sub_1000A1CAC(v274, type metadata accessor for PegasusContext);
    sub_1000A1CA4(v275, type metadata accessor for SessionTokens);
    sub_1000A18CC((uint64_t)v501, *(uint64_t (**)(uint64_t, void))(v506 + 8));
LABEL_39:
    sub_10005A6D0(v196, *(uint64_t (**)(uint64_t, uint64_t))(v507 + 8));
    sub_1000A184C();
    sub_100009B3C();
    _Block_release(v162);
    uint64_t v188 = v162;
    goto LABEL_50;
  }

  v502 = (void (*)(uint64_t, uint64_t, uint64_t))v240;
  v253 = v494;
  v254 = v515;
  v255 = sub_1000A1BDC( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client,  (void (*)(uint64_t))sub_1000C16A8);
  Client.type.getter(v255);
  (*(void (**)(uint64_t, void *))(v492 + 8))(v253, v493);
  v256 = sub_10006B664();
  if (v256 == ClientType.rawValue.getter(1LL))
  {
    v521 = &unk_1001B32C8;
    v522 = sub_10003B83C();
    LOBYTE(v520[0]) = 6;
    v257 = isFeatureEnabled(_:)(v520);
    sub_1000108B8(v520);
  }

  else
  {
    v257 = 0;
  }

  if (*(void *)(*(void *)(v254 + 64) + 32LL))
  {
    v276 = v488;
    sub_1000A1C7C(v488, v498, *((uint64_t (**)(uint64_t, uint64_t, uint64_t))v496 + 2));
    sub_100009654(v276, 0LL, 1LL, v239);
    sub_10000C4AC();
    sub_1000B20C4(v504, v276);
    v278 = v277;
    v279 = sub_10001683C();
    sub_1000A1878(v279, &qword_1001D5380);
    if (v278)
    {
      v280 = [objc_allocWithZone(PARReply) init];
      if ((v257 & 1) == 0)
      {
        [v504 scale];
        objc_msgSend(v280, "setScale:");
      }

      type metadata accessor for CachedResultSet.Result(0LL);
      v281 = sub_1000A2374();
      sub_100014244(v281, v282);
      sub_1000A2374();
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      v284 = sub_1000A2374();
      sub_100010A30(v284, v285);
      [v280 setData:isa];

      v287 = sub_10005A6B4(v286, "queryId");
      v288 = v509;
      sub_1000A1368((uint64_t)v509, (uint64_t)v287, (uint64_t)v280, v509[2]);
      sub_10005A62C();
      sub_100088BB0();
      sub_10001106C();

      sub_1000A1CB4();
      sub_1000110B0();
      swift_bridgeObjectRelease();

      v289 = sub_1000A2314();
      sub_1000A1CAC(v289, type metadata accessor for PegasusContext);
      sub_1000A1CA4(v290, type metadata accessor for SessionTokens);
      sub_1000A1818();
      v291 = sub_1000A2068();
      v270(v291);
      sub_1000A184C();
      sub_100009B3C();
      _Block_release(v288);
      uint64_t v188 = (os_log_s *)v288;
      goto LABEL_50;
    }
  }

  if ((v257 & 1) != 0)
  {
    v185 = v509;
    _Block_copy(v509);
    sub_10009D214( v504,  v498,  v503,  (uint64_t)v453,  v510,  v485,  v501,  v515,  (void (**)(void, void, void, void))v185);
    sub_100088C90();
    sub_100086C64();
    sub_100019F70();
    sub_10005A910();

    v292 = sub_1000A2170();
    v294 = sub_1000A18D4(v292, v293);
    sub_1000A1CAC(v294, type metadata accessor for PegasusContext);
    sub_1000A1CA4(v295, type metadata accessor for SessionTokens);
LABEL_54:
    v220 = sub_1000A1BF4();
    sub_1000A18CC(v220, v221);
    uint64_t v186 = sub_1000A2068();
    goto LABEL_34;
  }

  v306 = v504;
  sub_100088D04();
  v488 = v307;
  if (qword_1001D0538 != -1) {
    swift_once(&qword_1001D0538, sub_100034518);
  }
  v308 = (os_log_s *)sub_1000093D0((uint64_t)v511, (uint64_t)qword_1001EDC78);
  v309 = (void (*)(char *, uint64_t, uint64_t))*((void *)v496 + 2);
  v309(v486, v498, v239);
  v310 = (uint64_t)v487;
  v311 = sub_1000A1E48();
  v491 = (void (*)(uint64_t, uint64_t, uint64_t))v309;
  ((void (*)(uint64_t))v309)(v311);
  v312 = v306;
  v313 = v308;
  Logger.logObject.getter(v312);
  v314 = sub_100014588();
  v315 = sub_1000A23D8((os_log_type_t)v314);
  v452 = v201;
  v504 = v312;
  if (v315)
  {
    LODWORD(v490) = v314;
    v497 = v308;
    v316 = sub_100009B20(42LL);
    v317 = (void *)sub_100009B20(64LL);
    v489 = v317;
    v520[0] = (uint64_t)v317;
    *(_DWORD *)v316 = 134349826;
    v318 = sub_10005A6B4((uint64_t)v317, "queryId");
    v319 = sub_1000A20B0((uint64_t)v318);
    sub_1000A1658(v319, v320);

    *(_WORD *)(v316 + 12) = 2080;
    v321 = (uint64_t)v486;
    v322 = URLRequest.debugDescription.getter();
    *(void *)&v517 = sub_1000307E0(v322, v323, v520);
    sub_1000A223C((uint64_t)&v517, v310);
    sub_100009B3C();
    v324 = (void (*)(id, uint64_t))*((void *)v496 + 1);
    v325 = sub_1000A26D4(v321);
    *(_WORD *)(v316 + 22) = 2080;
    v326 = URLRequest.allHTTPHeaderFields.getter(v325);
    if (!v326) {
      v326 = sub_1000A1BA0( (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)&type metadata for String,  v327,  (uint64_t)&protocol witness table for String);
    }
    v328 = sub_1000A1BA8(v326, (uint64_t)&type metadata for String);
    sub_100009B3C();
    *(void *)&v517 = sub_1000A1E90(v328, v329, v520);
    sub_1000A1894((uint64_t)&v517, (uint64_t)&v517 + 8);
    sub_10005A1BC();
    v324(v487, v495);
    *(_WORD *)(v316 + swift_unknownObjectWeakDestroy(v0 + 32) = 2050;
    *(void *)&v517 = v505;
    sub_1000A1870((uint64_t)&v517, v330, v316 + 34);
    v331 = v497;
    sub_1000A1808( (void *)&_mh_execute_header,  v497,  (os_log_type_t)v490,  "performing query %{public}llu request %s header: %s requestId: %{public}llu",  (uint8_t *)v316);
    v332 = (uint64_t)v489;
    sub_10004EE00((uint64_t)v489);
    sub_100010C34(v332);
    sub_100010C34(v316);
  }

  else
  {

    v324 = (void (*)(id, uint64_t))*((void *)v496 + 1);
    sub_1000A26D4((uint64_t)v486);
    sub_1000A26D4(v310);
  }

  v490 = (void (*)(uint64_t))v324;
  v333 = v498;
  v232 = sub_1000869C4();
  sub_10005A62C();
  sub_1000A1B94();
  sub_100090108(v334, v335, v336);
  v338 = (unint64_t)sub_10005A6B4(v337, "triggerEvent");
  if (v338 >> 31)
  {
    __break(1u);
    goto LABEL_102;
  }

  v339 = sub_10006B65C(v338, "setTriggerEvent:");
  v340 = sub_1000A1F3C((uint64_t)v339, "setEndpoint:");
  v341 = sub_10005A6B4((uint64_t)v340, "triggerEvent");
  sub_10006B65C((uint64_t)v341, "setSearchType:");
  sub_1000A1C30();
  v342 = v232;
  sub_100032C5C((uint64_t)v342, "queryId");
  v343 = sub_1000A230C(objc_allocWithZone(&OBJC_CLASS____CPFeedbackPayload), "initWithCodable:");
  sub_1000A1650(v343, "setQueryId:");
  v489 = v342;

  v344 = &selRef_fbr;
  sub_1000A1BE4();
  sub_1000471D0();

  v345 = sub_10006B4EC();
  sub_10005A6E0(v345, "queryId");
  v346 = v505;
  sub_1000A84F8();
  sub_100010CA0();
  sub_1000498D4();
  v348 = v347;
  v349 = sub_1000A1BB0(v333);
  v497 = v350;

  v351 = v510;
  v352 = swift_weakLoadStrong(v510 + 16);
  v487 = v349;
  if (v352)
  {
    v353 = (void *)v352;
    v354 = *(void (**)(uint64_t, uint64_t, void *))(v492 + 16);
    LODWORD(v492) = *(unsigned __int8 *)(v351 + 80);
    v355 = v494;
    v354(v494, v351 + qword_1001EDD10, v493);
    v356 = *(void *)(v351 + qword_1001EDD08);
    v357 = *(_BYTE *)(v351 + qword_1001EDD08 + 8);
    v358 = sub_1000A1CC4();
    v359 = sub_1000773F4(v358);
    v360 = v349;
    v361 = v488;
    sub_1000A1BB8(v488);
    v362 = v360;
    swift_retain(v497);
    v363 = v356;
    v346 = v505;
    v364 = v357;
    v344 = &selRef_fbr;
    v366 = sub_1000A21C0(v353, v492, v355, v363, v364, v362, v361, v365, 0xE200000000000000LL, v359);
    sub_1000A2668(v366, qword_1001EDD00);
    sub_10005A910();
    v367 = sub_10001683C();
  }

  else
  {
    v368 = v349;
    v367 = swift_retain(v497);
  }

  v369 = UUID.init()(v367);
  v520[0] = (uint64_t)v497;
  v370 = sub_1000A2000(v369, v344[4]);
  v371 = sub_100019E00((uint64_t)&unk_1001B59C8);
  *(void *)(v371 + sub_100019D10(v0 + 16) = v370;
  *(void *)(v371 + 24) = v346;
  v372 = sub_100019E00((uint64_t)&unk_1001B59F0);
  *(void *)(v372 + sub_100019D10(v0 + 16) = sub_1000A0250;
  *(void *)(v372 + 24) = v371;
  v373 = sub_1000271C4();
  v374 = sub_10000941C(&qword_1001D53B8);
  sub_1000A1588(&qword_1001D53C0);
  v375 = v455;
  Publisher.map<A>(_:)(sub_1000A0258, v372, v373, v374);
  sub_100019F70();
  swift_release();
  v376 = sub_100019E00((uint64_t)&unk_1001B5A18);
  v377 = v515;
  *(void *)(v376 + sub_100019D10(v0 + 16) = sub_1000A0260;
  *(void *)(v376 + 24) = v377;
  sub_10005E31C();
  sub_10000941C(&qword_1001D53C8);
  v378 = v458;
  sub_1000A1C0C();
  v232 = (id)v375;
  Publishers.Map.tryMap<A>(_:)();
  sub_1000110B0();
  sub_10005A26C(v375, *(uint64_t (**)(uint64_t, uint64_t))(v456 + 8));
  v379 = sub_100019E00((uint64_t)&unk_1001B5A40);
  *(void *)(v379 + sub_100019D10(v0 + 16) = sub_1000A028C;
  *(void *)(v379 + 24) = v377;
  sub_10005E31C();
  sub_10000941C(&qword_1001D53D0);
  sub_1000A1C0C();
  sub_1000A20C8();
  sub_1000110B0();
  sub_10005A26C(v378, *(uint64_t (**)(uint64_t, uint64_t))(v459 + 8));
  v380 = sub_100019E00((uint64_t)&unk_1001B5A68);
  *(void *)(v380 + sub_100019D10(v0 + 16) = sub_1000A02B8;
  *(void *)(v380 + 24) = v377;
  sub_10005E31C();
  v494 = sub_10000941C(&qword_1001D53D8);
  sub_1000A1C4C();
  sub_100019F70();
  v381 = sub_1000A1BF4();
  sub_10004729C(v381, v382);
  v383 = v454;
  v384 = v495;
  v385 = v491;
  v491(v454, v498, v495);
  v492 = v526;
  v493 = (void *)v527;
  swift_bridgeObjectRetain(v527);
  sub_100090158(v489, (SEL *)&selRef_uuid);
  v486 = (char *)v387;
  if (v386)
  {
    v388 = v386;
    v389 = v481;
    v385(v481, v383, v384);
    v390 = v496[80];
    v391 = v384;
    v392 = (v390 + 32) & ~v390;
    v462 = v390 | 7;
    v463 = v390;
    v393 = (v480 + v392 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    v394 = (v393 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    v395 = swift_allocObject(&unk_1001B5A90, v394 + 8, v390 | 7);
    v396 = v493;
    *(void *)(v395 + sub_100019D10(v0 + 16) = v492;
    *(void *)(v395 + 24) = v396;
    v502(v395 + v392, v389, v391);
    v397 = (void *)(v395 + v393);
    *v397 = v486;
    v397[1] = v388;
    v398 = v515;
    *(void *)(v395 + v394) = v515;
    v399 = v398;
    swift_retain(v398);
    v400 = sub_10005A578();
    v490(v400);
    v401 = sub_100019E00((uint64_t)&unk_1001B5AB8);
    *(void *)(v401 + sub_100019D10(v0 + 16) = sub_1000A02E8;
    *(void *)(v401 + 24) = v395;
    v402 = v465;
    v403 = v469;
    v404 = v478;
    Publishers.TryMap.tryMap<A>(_:)(sub_1000A02EC, v401, v469, v494);
    sub_100019F70();
    sub_1000A268C(v404);
    v405 = v489;
    v493 = v405;
    v406 = (unsigned __int8 *)v487;
    v496 = v406;
    v407 = sub_1000A2000((uint64_t)v406, "queryId");
    v408 = (void *)sub_100009ACC((uint64_t)&unk_1001B5AE0, 48LL);
    v408[2] = v399;
    v408[3] = v405;
    v408[4] = v406;
    v408[5] = v407;
    v409 = sub_100019E00((uint64_t)&unk_1001B5B08);
    *(void *)(v409 + sub_100019D10(v0 + 16) = sub_1000A0308;
    *(void *)(v409 + 24) = v408;
    sub_1000A14AC();
    v410 = v467;
    Publishers.TryMap.tryMap<A>(_:)(sub_1000A12E0, v409, v403, v494);
    sub_10005A8E0();
    sub_1000A268C(v402);
    v411 = v481;
    v412 = v495;
    v491(v481, v498, v495);
    v413 = (v463 + 24) & ~v463;
    v414 = swift_allocObject(&unk_1001B5B30, v413 + v480, v462);
    v415 = v504;
    *(void *)(v414 + sub_100019D10(v0 + 16) = v504;
    v502(v414 + v413, v411, v412);
    v416 = sub_100019E00((uint64_t)&unk_1001B5B58);
    *(void *)(v416 + sub_100019D10(v0 + 16) = sub_1000A0334;
    *(void *)(v416 + 24) = v414;
    v417 = v415;
    v418 = sub_10000941C(&qword_1001D5440);
    v419 = v466;
    Publishers.TryMap.tryMap<A>(_:)(sub_1000A0338, v416, v403, v418);
    sub_1000110B0();
    sub_1000A268C(v410);
    sub_1000A20C8();
    v504 = *(void **)(v468 + 8);
    v420 = sub_10004729C(v419, (uint64_t (*)(uint64_t, uint64_t))v504);
    v502 = (void (*)(uint64_t, uint64_t, uint64_t))sub_1000145D8(v420, "queryId");
    v421 = v474;
    sub_1000A1C7C(v484, (uint64_t)v169, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v474 + 16));
    sub_1000A2118();
    v422 = ((unint64_t)v417 + v473 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    sub_1000A1D94();
    v424 = v423 & 0xFFFFFFFFFFFFFFF8LL;
    v426 = swift_allocObject(&unk_1001B5B80, (v423 & 0xFFFFFFFFFFFFFFF8LL) + 8, v425);
    sub_1000A1C7C((uint64_t)v417 + v426, v484, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v421 + 32));
    *(void *)(v426 + v422) = v502;
    *(void *)(v426 + v419) = v505;
    *(void *)((char *)v169 + v426) = v515;
    v427 = v493;
    *(void *)(v426 + v410) = v493;
    *(void *)(v426 + v424) = v496;
    v428 = sub_100019E00((uint64_t)&unk_1001B5BA8);
    *(void *)(v428 + sub_100019D10(v0 + 16) = sub_1000A0354;
    *(void *)(v428 + 24) = v426;
    sub_10000C4AC();
    v511 = v427;
    v429 = sub_1000271C4();
    sub_100059DA0(&qword_1001D5450, &qword_1001D5370);
    v431 = v430;
    sub_1000A1588(&qword_1001D5458);
    v432 = v475;
    v433 = v482;
    Publisher.catch<A>(_:)(sub_1000A0358, v428, v483, v429, v431, v434);
    sub_10001443C();
    v435 = sub_1000A2380();
    ((void (*)(uint64_t))v504)(v435);
    v436 = sub_100019E00((uint64_t)&unk_1001B5928);
    v437 = sub_1000A1B44(v436);
    *(void *)(v433 + 24) = &off_1001B4440;
    swift_unknownObjectWeakInit(v437, v485);
    v438 = v479;
    v439 = v472;
    sub_1000A0008();
    v440 = (*(unsigned __int8 *)(v470 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v470 + 80);
    sub_1000A14CC();
    v443 = swift_allocObject(&unk_1001B5BD0, v441, v442);
    *(void *)(v443 + sub_100019D10(v0 + 16) = v433;
    sub_1000A0040(v439, v443 + v440);
    *(void *)(v443 + v431) = v510;
    v444 = (void (**)())(v443 + v419);
    v445 = v508;
    *v444 = sub_1000A1350;
    v444[1] = (void (*)())v445;
    sub_100059DA0((unint64_t *)&qword_1001D5460, &qword_1001D5378);
    v447 = v446;
    sub_1000A1EA4();
    sub_10005E314();
    Publisher<>.sink(receiveValue:)(sub_1000A037C, v443, v477, v447);
    sub_100019F70();
    sub_10005A6D0(v432, *(uint64_t (**)(uint64_t, uint64_t))(v476 + 8));
    sub_100060FBC();
    sub_10001106C();
    sub_100088C90();
    sub_100086C64();

    swift_unknownObjectRelease();
    sub_1000A1790();
    sub_1000A1CB4();

    swift_release();
    sub_10004D784(v438, type metadata accessor for CancellableStoreKey);
    v448 = ((uint64_t (*)(uint64_t, uint64_t))v490)(v498, v495);
    sub_1000A1CAC(v448, type metadata accessor for PegasusContext);
    sub_1000A1CA4(v449, type metadata accessor for SessionTokens);
    sub_1000A18CC((uint64_t)v501, *(uint64_t (**)(uint64_t, void))(v506 + 8));
    (*(void (**)(uint64_t, uint64_t))(v507 + 8))(v513, v512);
    v450 = (os_log_s *)v527;
    sub_100011030();
    sub_100009B3C();
    sub_1000A1D88();
    uint64_t v188 = v450;
    goto LABEL_50;
  }

      uint64_t v16 = swift_retain(v12);
      sub_10005DFFC(v16, v5, v6, sub_1000A46E8);
      sub_100010D00();
      sub_1000110A8();
      swift_release_n(v12, 2LL);
LABEL_19:
      swift_release();
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 4;
  double v5 = v6 - 4;
  if (!v7) {
    double v5 = -1;
  }
  return (v5 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 9;
  double v5 = v6 - 9;
  if (!v7) {
    double v5 = -1;
  }
  return (v5 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0xA;
  double v5 = v6 - 10;
  if (!v7) {
    double v5 = -1;
  }
  return (v5 + 1);
}

    __break(1u);
    return result;
  }

  swift_beginAccess(v1 + v18, v55, 0LL, 0LL);
  sub_10004344C(v19, (uint64_t)v5);
  unsigned int v28 = type metadata accessor for OSSignpostID(0LL);
  id result = sub_100010708((uint64_t)v5, 1LL, v28);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v22 = *(void *)(v1 + 88);
  id v29 = static os_signpost_type_t.end.getter(result);
  id v30 = sub_100041438(v17);
  os_signpost(_:dso:log:name:signpostID:)(v29, &_mh_execute_header, v22, v30, v31, v32);
  (*(void (**)(char *, uint64_t))(*(void *)(v28 - 8) + 8LL))(v5, v28);
LABEL_7:
  uint64_t Strong = swift_weakLoadStrong(v1 + 16);
  if (Strong)
  {
    os_log_type_t v34 = Strong;
    uint64_t v54 = v1;
    swift_retain(v1);
    uint64_t v35 = String.init<A>(describing:)(&v54);
    uint64_t v37 = v36;
    uint64_t v38 = *(os_unfair_lock_s **)(*(void *)(v34 + 32) + 16LL);
    os_unfair_lock_lock(v38);
    sub_100081100(v34, v35, v37, v1, (uint64_t (**)(void, void))&off_1001B7B30);
    os_unfair_lock_unlock(v38);
    swift_bridgeObjectRelease();
    unint64_t v39 = swift_unknownObjectWeakLoadStrong(v34 + 16);
    if (v39)
    {
      uint64_t v40 = *(void *)(v34 + 24);
      uint64_t ObjectType = swift_getObjectType(v39);
      uint64_t v42 = *(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v40 + 16);
      NSString v43 = swift_retain(v1);
      v42(v43, &off_1001B7B30, ObjectType, v40);
      swift_release_n(v1, 2LL);
      swift_unknownObjectRelease();
    }

    else
    {
      swift_release();
    }

    id v46 = v50;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)uint64_t v9 = 0LL;
    *(void *)(v9 + 8) = 0LL;
    *(_BYTE *)(v9 + sub_100019D10(v0 + 16) = 0;
    *(_BYTE *)(v1 + 41) = 1;
    *id v46 = 0LL;
    v46[1] = 0LL;
    *(void *)(v1 + 64) = &_swiftEmptyArrayStorage;
    *(void *)(v1 + 72) = 0LL;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    *(_BYTE *)(v1 + 81) = 1;
    return swift_weakAssign(v1 + 16, 0LL);
  }

  else
  {
    unsigned int v44 = sub_1000D5B8C();
    if (v44)
    {
      id v45 = static os_log_type_t.fault.getter(v44);
      os_log(_:dso:log:type:_:)( "ActivityMonitor is deallocated before ActivitySpan's end() method is invoked. Activity's bookkeeping could be inaccurate.",  121LL,  2LL,  &_mh_execute_header,  v22,  v45,  &_swiftEmptyArrayStorage);
    }

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

      __break(1u);
      goto LABEL_18;
    }

  __break(1u);
  return result;
}

    uint64_t v49 = (v13 - 1) & v13;
  }

  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  id result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

    uint64_t v49 = (v14 - 1) & v14;
  }

  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  id result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0xB;
  double v5 = v6 - 11;
  if (!v7) {
    double v5 = -1;
  }
  return (v5 + 1);
}

  __break(1u);
  return result;
}

    sub_10002716C();
    return;
  }

    sub_10002716C();
    return;
  }

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 8;
  uint64_t v8 = v6 - 8;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return sub_100128148(v8);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 2;
  uint64_t v8 = v6 - 2;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return sub_100128148(v8);
}

  swift_release();
  Hasher._combine(_:)(0LL);
}

uint64_t sub_10001E58C(void *a1, uint64_t a2)
{
  v46[1] = a2;
  uint64_t v3 = sub_10000941C(&qword_1001D5ED0);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v46 - v7;
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)v46 - v15;
  NSFileManager.parsecdAssetsDirectoryURL.getter(v14);
  if (sub_100010708((uint64_t)v6, 1LL, v9) == 1)
  {
    sub_100019C1C((uint64_t)v6, &qword_1001D5ED0);
    sub_100009654((uint64_t)v8, 1LL, 1LL, v9);
LABEL_4:
    sub_100019C1C((uint64_t)v8, &qword_1001D5ED0);
    unint64_t v18 = sub_100025EEC();
    swift_allocError(&unk_1001B25E0, v18, 0LL, 0LL);
    return swift_willThrow();
  }

  URL.appendingPathComponent(_:)(0xD000000000000012LL, 0x800000010016B940LL);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v6, v9);
  sub_100009654((uint64_t)v8, 0LL, 1LL, v9);
  v46[0] = v17;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v8, v9);
  URL.appendingPathComponent(_:)(0x62642E6568636143LL, 0xE800000000000000LL);
  URL.path(percentEncoded:)(1);
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v21 = [a1 fileExistsAtPath:v20];

  URL.path(percentEncoded:)(1);
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v23 = [a1 fileExistsAtPath:v22];

  if ((v21 & 1) != 0)
  {
    if (!v23)
    {
LABEL_9:
      if (qword_1001D0530 != -1) {
        swift_once(&qword_1001D0530, sub_1000344F0);
      }
      uint64_t v29 = type metadata accessor for Logger(0LL);
      uint64_t v30 = sub_1000093D0(v29, (uint64_t)qword_1001EDC60);
      uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
      os_log_type_t v32 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "ECC migration not needed.", v33, 2u);
        swift_slowDealloc(v33, -1LL, -1LL);
      }

      goto LABEL_19;
    }

    URL.path(percentEncoded:)(1);
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v47 = 0LL;
    unsigned int v26 = [a1 removeItemAtPath:v25 error:&v47];

    id v27 = v47;
    if (v26)
    {
      id v28 = v47;
      goto LABEL_9;
    }

    goto LABEL_18;
  }

  if (v23)
  {
    URL._bridgeToObjectiveC()(v24);
    uint64_t v35 = v34;
    URL._bridgeToObjectiveC()(v36);
    uint64_t v38 = v37;
    id v47 = 0LL;
    unsigned int v39 = [a1 copyItemAtURL:v35 toURL:v37 error:&v47];

    id v27 = v47;
    if (!v39) {
      goto LABEL_18;
    }
    id v40 = v47;
    URL.path(percentEncoded:)(1);
    NSString v41 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v47 = 0LL;
    unsigned int v42 = [a1 removeItemAtPath:v41 error:&v47];

    id v27 = v47;
    if (!v42)
    {
LABEL_18:
      id v44 = v27;
      _convertNSErrorToError(_:)(v27);

      swift_willThrow();
      goto LABEL_19;
    }

    id v43 = v47;
  }

void sub_10001EA30()
{
  swift_release();
  uint64_t v1 = *(void **)(v0 + 56);

  uint64_t v2 = type metadata accessor for URL(0LL);
  sub_100019DA4(v2);
  swift_release();
  sub_100009A90();
}

uint64_t sub_10001EA9C()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10001EAC0()
{
  return type metadata accessor for EngagedCompletionSQLCache(0LL);
}

uint64_t type metadata accessor for EngagedCompletionSQLCache(uint64_t a1)
{
  return sub_100018ABC(a1, qword_1001D1A08, (uint64_t)&nominal type descriptor for EngagedCompletionSQLCache);
}

uint64_t sub_10001EADC(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  void v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[5] = " ";
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[6] = *(void *)(result - 8) + 64LL;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 8LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void sub_10001EB74(id *a1)
{
}

uint64_t sub_10001EB9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + sub_100019D10(v0 + 16) = *(_OWORD *)(a2 + 16);
  id v5 = v3;
  id v6 = v4;
  return a1;
}

uint64_t sub_10001EBD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  *(void *)(a1 + sub_100019D10(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t sub_10001EC38(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  *(_OWORD *)(a1 + sub_100019D10(v0 + 16) = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLiteAttributedMessage(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLiteAttributedMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + sub_100019D10(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for EngagedCompletionSQLCache.Params()
{
}

void sub_10001ED08(void *a1, void *a2)
{
  id v5 = *(os_unfair_lock_s **)(v2[6] + 16LL);
  os_unfair_lock_lock(v5);
  id v6 = (void *)v2[7];
  uint64_t v7 = (void *)v2[8];
  v2[7] = a1;
  v2[8] = a2;
  id v8 = a1;
  id v9 = a2;

  os_unfair_lock_unlock(v5);
}

uint64_t sub_10001ED68(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  id v9 = (int *)sub_1000271D4();
  sub_100027160();
  __chkstk_darwin(v10);
  sub_1000270AC();
  *(void *)uint64_t v4 = a1;
  *(void *)(v4 + 8) = a2;
  *(_BYTE *)(v4 + sub_100019D10(v0 + 16) = a3;
  *(void *)(v4 + 24) = a4;
  *(_WORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 32) = 1;
  *(_BYTE *)(v4 + 34) = 0;
  uint64_t v12 = v4 + *(int *)(v11 + 40);
  uint64_t v13 = sub_100010E34();
  sub_100009654(v12, 1LL, 1LL, v13);
  *(_BYTE *)(v4 + v9[11]) = 0;
  *(_BYTE *)(v4 + v9[12]) = 1;
  *(_BYTE *)(v4 + v9[13]) = 1;
  swift_bridgeObjectRetain(a2);
  sub_10001EE3C();
  uint64_t v15 = v14;
  sub_1000143C4(v4);
  return v15;
}

void sub_10001EE3C()
{
  uint64_t v3 = v2;
  uint64_t v4 = sub_1000271D4();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v4);
  __chkstk_darwin(v7);
  id v9 = (char *)&v50 - v8;
  uint64_t v10 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100009B6C();
  uint64_t v12 = (void *)v0[4];
  *uint64_t v1 = (uint64_t)v12;
  (*(void (**)(uint64_t *, void, uint64_t))(v11 + 104))( v1,  enum case for DispatchPredicate.notOnQueue(_:),  v10);
  uint64_t v62 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v1);
  uint64_t v13 = (*(uint64_t (**)(uint64_t *, uint64_t))(v11 + 8))(v1, v10);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  if (*(_BYTE *)(v3 + 32) == 1)
  {
    id v52 = (uint64_t *)((char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    uint64_t v14 = sub_100009ACC((uint64_t)&unk_1001B24F8, 24LL);
    *(void *)(v14 + sub_100019D10(v0 + 16) = &_swiftEmptyArrayStorage;
    uint64_t v53 = v14 + 16;
    uint64_t v15 = *(os_unfair_lock_s **)(v0[6] + 16LL);
    sub_10000C4AC();
    os_unfair_lock_lock(v15);
    uint64_t v16 = (void *)v0[7];
    uint64_t v17 = (void *)v0[8];
    uint64_t v60 = v0[10];
    id v18 = v16;
    id v19 = v17;
    os_unfair_lock_unlock(v15);

    swift_release();
    dispatch_group_t v20 = dispatch_group_create();
    dispatch_group_t v55 = v20;
    uint64_t v58 = type metadata accessor for DispatchQoS(0LL);
    os_log_type_t v59 = &v50;
    uint64_t v57 = *(void *)(v58 - 8);
    sub_100027160();
    __chkstk_darwin(v21);
    sub_100009B6C();
    uint64_t v61 = v20;
    static DispatchQoS.userInitiated.getter(v61);
    uint64_t v22 = sub_100009C54();
    id v56 = &v50;
    uint64_t v23 = *(void *)(v22 - 8);
    __chkstk_darwin(v22);
    sub_100027240();
    static DispatchWorkItemFlags.assignCurrentContext.getter();
    uint64_t v51 = v3;
    sub_1000262D4(v3, (uint64_t)v9);
    uint64_t v24 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v25 = (v24 + 32) & ~v24;
    uint64_t v26 = swift_allocObject(&unk_1001B2520, v25 + v6, v24 | 7);
    *(void *)(v26 + sub_100019D10(v0 + 16) = v14;
    *(void *)(v26 + 24) = v0;
    sub_1000263B4((uint64_t)v9, v26 + v25);
    v64[4] = (uint64_t)sub_1000263F8;
    v64[5] = v26;
    v64[0] = (uint64_t)_NSConcreteStackBlock;
    v64[1] = 1107296256LL;
    v64[2] = (uint64_t)sub_1000D2F18;
    v64[3] = (uint64_t)&unk_1001B2538;
    id v9 = (char *)_Block_copy(v64);
    sub_10000C4AC();
    uint64_t v54 = v14;
    sub_1000272E4();
    OS_dispatch_queue.async(group:qos:flags:execute:)(v55, v18, v20, v9);
    _Block_release(v9);

    (*(void (**)(dispatch_group_t, uint64_t))(v23 + 8))(v20, v22);
    (*(void (**)(id, uint64_t))(v57 + 8))(v18, v58);
    swift_release();
    uint64_t v27 = type metadata accessor for DispatchTime(0LL);
    __chkstk_darwin(v27);
    sub_100027228();
    uint64_t v29 = __chkstk_darwin(v28);
    uint64_t v31 = (char *)&v50 - v30;
    static DispatchTime.now()(v29);
    uint64_t v32 = type metadata accessor for DispatchTimeInterval(0LL);
    uint64_t v33 = *(void *)(v32 - 8);
    __chkstk_darwin(v32);
    uint64_t v1 = (uint64_t *)((char *)&v50 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    if ((v60 & 0x8000000000000000LL) == 0)
    {
      uint64_t v62 = &v50;
      *uint64_t v1 = v60;
      (*(void (**)(uint64_t *, void, uint64_t))(v33 + 104))( v1,  enum case for DispatchTimeInterval.milliseconds(_:),  v32);
      + infix(_:_:)(v31, v1);
      uint64_t v35 = sub_1000272AC();
      v36(v35);
      sub_100027268((uint64_t)v31);
      uint64_t v37 = v61;
      char v38 = OS_dispatch_group.wait(timeout:)(v9);
      uint64_t v1 = (uint64_t *)v37;
      if ((static DispatchTimeoutResult.== infix(_:_:)(v38 & 1, 1LL) & 1) == 0)
      {
        sub_100027268((uint64_t)v9);

LABEL_12:
        swift_beginAccess(v53, v64, 0LL, 0LL);
        swift_bridgeObjectRetain(*(void *)(v54 + 16));
        swift_release();
        goto LABEL_13;
      }

      if (qword_1001D0530 == -1)
      {
LABEL_6:
        uint64_t v39 = sub_100010ED4();
        sub_1000093D0(v39, (uint64_t)qword_1001EDC60);
        id v40 = v52;
        uint64_t v41 = sub_1000262D4(v51, (uint64_t)v52);
        unsigned int v42 = (os_log_s *)Logger.logObject.getter(v41);
        os_log_type_t v44 = static os_log_type_t.error.getter(v42, v43);
        if (os_log_type_enabled(v42, v44))
        {
          uint64_t v45 = sub_100009B20(22LL);
          os_log_type_t v59 = (uint64_t *)sub_100009B20(32LL);
          v64[0] = (uint64_t)v59;
          *(_DWORD *)uint64_t v45 = 136643075;
          uint64_t v46 = *v40;
          unint64_t v47 = v40[1];
          swift_bridgeObjectRetain(v47);
          uint64_t v63 = sub_1000307E0(v46, v47, v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v45 + 4);
          swift_bridgeObjectRelease();
          sub_1000143C4((uint64_t)v40);
          *(_WORD *)(v45 + 12) = 2048;
          uint64_t v63 = v60;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v45 + 14);
          _os_log_impl( (void *)&_mh_execute_header,  v42,  v44,  "ECC search timed out for input %{sensitive}s timeout value %lu",  (uint8_t *)v45,  0x16u);
          uint64_t v48 = (uint64_t)v59;
          swift_arrayDestroy(v59, 1LL);
          sub_100010C34(v48);
          sub_100010C34(v45);
        }

        else
        {

          sub_1000143C4((uint64_t)v40);
        }

        sub_100027268((uint64_t)v9);
        goto LABEL_12;
      }

LABEL_16:
      swift_once(&qword_1001D0530, sub_1000344F0);
      goto LABEL_6;
    }

    return (void *)sub_10001FD94();
  }

  uint64_t v15 = static os_log_type_t.default.getter(result);
  uint64_t v16 = v15;
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v15);
  id v18 = v16;
  if (os_log_type_enabled(v17, v16))
  {
    id v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "ECC upgrading schema", v19, 2u);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  return sub_1000201DC();
}

  a2 = a1;
LABEL_22:
  uint64_t v28 = v25 - a4;
  if (v18 != -1 || v28 != 0x8000000000000000LL)
  {
    sub_1000DAB84(a4, v28 / v18, a2);
    return;
  }

    __break(1u);
    goto LABEL_17;
  }

  uint64_t v14 = _swiftEmptyArrayStorage;
LABEL_12:
  if (v7 != v4)
  {
    type metadata accessor for URL(0LL);
    sub_1000DE4F4();
    sub_1000DB4A8(v5 + *(void *)(v18 + 72) * v4, v8, (unint64_t)v14 + v17);
LABEL_14:
    sub_10002FBC0();
    return;
  }

  a2 = a1;
LABEL_22:
  uint64_t v28 = v25 - a4;
  if (v18 != -1 || v28 != 0x8000000000000000LL)
  {
    sub_1000DAE44(a4, v28 / v18, a2, (void (*)(void))&type metadata accessor for URLQueryItem);
    return;
  }

LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  __chkstk_darwin(v13);
  *(&v50 - 2) = (uint64_t)v0;
  *(&v50 - 1) = v3;
  uint64_t v49 = sub_10000941C(&qword_1001D1B10);
  OS_dispatch_queue.sync<A>(execute:)(v64, sub_100026274, &v50 - 4, v49);
LABEL_13:
  sub_100009AA0();
}

    uint64_t v60 = [v52 searchURL];
    if (!v60)
    {
      uint64_t v61 = 1LL;
      uint64_t v3 = (uint64_t)v197;
      uint64_t v62 = v198;
LABEL_20:
      sub_100009654(v3, v61, 1LL, v53);
      sub_100010A74(v3, (uint64_t)v62);
      sub_10005A148((uint64_t)v62, 1LL, v53);
      if (v50)
      {
        sub_100028CD0((uint64_t)v62, &qword_1001D5ED0);
        uint64_t v63 = sub_100059E4C();
        unint64_t v64 = sub_100010EA0((uint64_t)&type metadata for PARNetworkRequestFactory.NetworkRequestError, v63);
        *uint64_t v65 = 1;
        swift_willThrow(v64);
LABEL_79:
        swift_unknownObjectRelease();
        goto LABEL_80;
      }

      v197 = (uint64_t (*)(char *, uint64_t))v48;
      uint64_t v66 = (uint64_t)v181;
      (*(void (**)(char *, void *, uint64_t))(v54 + 32))(v181, v62, v53);
      uint64_t v67 = v193;
      sub_100052E10();
      unint64_t v68 = (void *)sub_10005A204();
      uint64_t v69 = v191;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v191, v66, v53);
      uint64_t v70 = v192;
      uint64_t v71 = sub_1000D9978(v69);
      if (v70)
      {
        (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v66, v53);
        goto LABEL_79;
      }

      uint64_t v72 = v71;
      v198 = v52;
      uint64_t v73 = v67[20];
      uint64_t v74 = v67[21];
      uint64_t v75 = sub_10005A6B4(v71, "queryString");
      sub_10005A614((uint64_t)v75);
      sub_10005A654();

      v177[1] = v73;
      uint64_t v191 = v74;
      sub_10005A378(v73, v74, v66, v3);
      uint64_t v76 = sub_10001460C();
      if (sub_10005A6B4(v76, "type") == (id)1)
      {
        id v77 = v67[86];
        id v78 = v67[87];
        sub_1000145E8();
      }

      else
      {
        id v77 = 0LL;
        id v78 = 0LL;
      }

      uint64_t v79 = v183;
      id v80 = (char *)[v199 triggerEvent];
      if ((unint64_t)(v80 - 22) < 2)
      {
        sub_10001450C();
        id v77 = v67[30];
        id v78 = v67[31];
        goto LABEL_37;
      }

      if (v80 != (char *)8)
      {
        if (v80 == (char *)24)
        {
          sub_10001450C();
          id v77 = v67[86];
          id v78 = v67[87];
          goto LABEL_37;
        }

        if (v80 == (char *)21)
        {
          v174 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"suggest_queries");
          sub_1000DA09C(v174, v175, v67[84], v67[85]);
          sub_1000145F0();
        }

        else if (v80 == (char *)10)
        {
          goto LABEL_33;
        }

        if (!v78)
        {
LABEL_39:
          sub_1000B48B4(v199);
          sub_1000DA264(v83);
          sub_10001450C();
          sub_10005A874();
          sub_100051810();
          unsigned int v84 = sub_100051358();
          sub_10005A31C(v84, (SEL *)&selRef_clientName);
          sub_100052E98();
          sub_10001450C();
          sub_100059CE8(v199, (SEL *)&selRef_topics);
          uint64_t v85 = sub_10005A868();
          sub_100052EC0(v85, v86);
          sub_100009B3C();
          sub_100052FA4(v72, v194);
          uint64_t v192 = sub_10005A3CC();
          sub_100053010();
          sub_10008FFFC(v199);
          if (v88)
          {
            sub_1000DA09C(v67[106], v67[107], v87, v88);
            sub_10001450C();
          }

          sub_10001085C(v198, (SEL *)&selRef_clientName);
          sub_10005A3F0();
          if (v184) {
            sub_100059CE8(v184, (SEL *)&selRef_overrideFeatureFlags);
          }
          unint64_t v89 = v194;
          sub_10005A868();
          uint64_t v90 = v198;
          sub_100051414();
          sub_10001450C();
          sub_10001460C();
          sub_1000531F4();
          sub_100051D0C(v72, *(void *)(v89 + *(int *)(v79 + 80)), *(void *)(v89 + *(int *)(v79 + 80) + 8));
          int v91 = v185;
          int v92 = sub_100059E88(v89, v185);
          sub_10005A31C(v92, (SEL *)&selRef_clientName);
          if (v93) {
            id v94 = v93;
          }
          else {
            id v94 = 0xE000000000000000LL;
          }
          sub_100053288();
          sub_100009B3C();
          sub_1000152F4(v91);
          uint64_t v95 = sub_10005A874();
          sub_1000518B0(v95, v96, v97);
          sub_1000518F0(v72, *(void *)(v89 + 88), *(void *)(v89 + 96));
          sub_10005A120();
          sub_100090008(v199);
          sub_10005A180();
          sub_10005365C();
          sub_10001460C();
          uint64_t v98 = sub_10005A15C();
          sub_100053698(v98, v99);
          uint64_t v100 = sub_10005A15C();
          sub_1000536E4(v100, v101);
          uint64_t v102 = sub_10005A15C();
          sub_100053734(v102, v103);
          BOOL v104 = sub_10005A15C();
          sub_100053784(v104, v105);
          id v106 = sub_10005A15C();
          sub_1000537D0(v106, v107);
          sub_10005A478(v108, (SEL *)&selRef_l2version);
          sub_10005A3F0();
          if (v50) {
            uint64_t v111 = 0xE000000000000000LL;
          }
          else {
            uint64_t v111 = v110;
          }
          uint64_t v112 = sub_10005A478(v109, (SEL *)&selRef_l3version);
          if (v113) {
            uint64_t v114 = v112;
          }
          else {
            uint64_t v114 = 0LL;
          }
          if (v113) {
            id v115 = v113;
          }
          else {
            id v115 = 0xE000000000000000LL;
          }
          sub_1000537FC(v72, v94, v111, v114, v115);
          v116 = v194;
          swift_bridgeObjectRelease();
          sub_10001460C();
          sub_100053888();
          uint64_t v117 = sub_10005A15C();
          sub_100053AC0(v117, v118);
          uint64_t v119 = sub_10001085C(v90, (SEL *)&selRef_clientName);
          if (!v120)
          {
            uint64_t v119 = 0LL;
            v120 = 0xE000000000000000LL;
          }

          NSString v121 = v186;
          PegasusClientName.init(rawValue:)(v119, v120);
          unsigned int v122 = v180;
          uint64_t v123 = sub_10005A148(v121, 1LL, v180);
          v124 = v188;
          if (v50) {
            goto LABEL_60;
          }
          id v125 = v182;
          sub_100059ECC();
          id v126 = (*(uint64_t (**)(char *, uint64_t))(v179 + 88))(v125, v122);
          if ((_DWORD)v126 == v178)
          {
            uint64_t v127 = sub_10005A15C();
            sub_100053BAC(v127, v128);
LABEL_60:
            sub_10005A848(v123, &qword_1001D3DA8);
            sub_10005A644();
            sub_100053C64();
            sub_10005A15C();
            sub_100053CC4();
            goto LABEL_61;
          }

          if ((_DWORD)v126 == enum case for PegasusClientName.Siri(_:))
          {
            sub_10005A644();
            sub_100053C18();
          }

          else if ((_DWORD)v126 != enum case for PegasusClientName.Messages(_:))
          {
            if ((_DWORD)v126 != enum case for PegasusClientName.News(_:))
            {
              uint64_t v123 = v197(v125, v122);
              goto LABEL_60;
            }

            sub_100048630();
            unint64_t v176 = swift_unknownObjectRelease();
            sub_10005A848(v176, &qword_1001D3DA8);
            sub_10005A874();
            sub_100053D24();
LABEL_61:
            sub_10005A644();
            sub_100053D4C();
            uint64_t v129 = sub_10005A15C();
            sub_100053D98(v129, v130);
            os_log_type_t v131 = sub_10005A15C();
            sub_100053DE4(v131, v132);
            sub_100053E48();
            sub_100053EAC();
            sub_10005A31C(v133, (SEL *)&selRef_userAgent);
            sub_10005A180();
            sub_10005A2D0(v72, v134);
            sub_100009B3C();
            sub_100053F24(v72, v116, (uint64_t)v90);
            [v199 scale];
            *(float *)&unint64_t v135 = v135;
            sub_100053FD0(*(float *)&v135);
            sub_10005A874();
            sub_100051D50();
            sub_10005A31C(v136, (SEL *)&selRef_clientName);
            uint64_t v138 = v137;
            uint64_t v139 = sub_10005A15C();
            sub_10005404C(v139, v140, v141, v138);
            sub_10001450C();
            [v199 exp];
            sub_100054120(v72, v90);
            uint64_t v142 = [v199 queryCommand];
            if (!v142)
            {
LABEL_78:
              uint64_t v172 = sub_1000D9BA4(v124);
              uint64_t v173 = sub_10005A6E0(v172, "timeoutIntervalForRequest");
              URLRequest.timeoutInterval.setter(v173);
              URLRequest.assumesHTTP3Capable.setter([v90 assumesHTTP3Capable]);
              swift_unknownObjectRelease();
              swift_release();
              sub_10005A5F4();
              goto LABEL_80;
            }

            uint64_t v143 = v142;
            uint64_t v144 = objc_opt_self(&OBJC_CLASS___SFPerformEntityQueryCommand);
            v145 = sub_10005A720(v144);
            if (v145)
            {
              unint64_t v146 = (void *)v145;
              uint64_t v147 = v143;
              sub_100090020(v146);
              sub_10005A28C(v148, v149);
              sub_1000145F0();
              uint64_t v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"se");
              id v152 = v151;
              id v153 = [v146 entityType];
              id v154 = 43LL;
              if (v153 == 3) {
                id v154 = 41LL;
              }
              id v155 = 42LL;
              if (v153 == 3) {
                id v155 = 40LL;
              }
              uint64_t v156 = v67[v154];
              uint64_t v157 = v67[v155];
              sub_100010DFC();
              sub_10005A378(v150, v152, v157, v156);
              sub_1000145F0();
              v124 = v188;
              swift_bridgeObjectRelease();
              sub_10005419C(v72, v146);
            }

            else
            {
              v158 = objc_opt_self(&OBJC_CLASS___SFUpdateSearchQueryCommand);
              uint64_t v159 = sub_10005A720(v158);
              if (!v159)
              {
LABEL_77:

                goto LABEL_78;
              }

              uint64_t v160 = (void *)v159;
              __int128 v161 = v143;
              sub_100090014(v160);
              sub_10005A28C(v162, v163);
              sub_1000145F0();
              uint64_t v164 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"se");
              unint64_t v166 = v165;
              uint64_t v167 = [v160 querySource];
              uint64_t v168 = 43LL;
              if (v167 == 2) {
                uint64_t v168 = 41LL;
              }
              id v169 = 42LL;
              if (v167 == 2) {
                id v169 = 40LL;
              }
              uint64_t v170 = v67[v168];
              uint64_t v171 = v67[v169];
              sub_10005A62C();
              sub_10005A378(v164, v166, v171, v170);
              sub_1000145F0();
              sub_10001460C();
            }

            goto LABEL_77;
          }

          sub_10005A848(v126, &qword_1001D3DA8);
          goto LABEL_61;
        }

  sub_100009AA0();
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

    uint64_t v36 = v90;
    uint64_t v34 = v76;
    goto LABEL_16;
  }

  uint64_t v35 = v93;
  uint64_t v36 = v90;
  uint64_t v37 = v91;
LABEL_16:
  (*(void (**)(char *, uint64_t))(v77 + 8))(v23, v34);
LABEL_17:
  sub_100019C1C((uint64_t)v25, (uint64_t *)&unk_1001D5340);
  v36(v37, v30, v26);
  sub_100059F08( &qword_1001D16A0,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload);
  uint64_t v60 = Message.serializedData(partial:)(0LL, v26, v59);
  if (v35)
  {
    swift_errorRelease(v35);
    uint64_t v62 = *(void (**)(char *, uint64_t))(v92 + 8);
    v62(v37, v26);
    return ((uint64_t (*)(char *, uint64_t))v62)(v30, v26);
  }

  else
  {
    uint64_t v63 = v60;
    unint64_t v64 = v61;
    uint64_t v65 = v88 + 16;
    uint64_t v66 = *(void (**)(char *, uint64_t))(v92 + 8);
    v66(v37, v26);
    swift_beginAccess(v65, v94, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v65);
    if (Strong)
    {
      unint64_t v68 = *(void *)(Strong + 64);
      uint64_t v69 = objc_allocWithZone(&OBJC_CLASS____CPFeedbackPayload);
      swift_unknownObjectRetain(v68);
      sub_100014244(v63, v64);
      sub_100069C58(v63, v64);
      uint64_t v71 = v70;
      sub_1000A5CB4();
      swift_release();
      swift_unknownObjectRelease();

      sub_100010A30(v63, v64);
      return ((uint64_t (*)(char *, uint64_t))v66)(v30, v26);
    }

    else
    {
      v66(v30, v26);
      return sub_100010A30(v63, v64);
    }
  }

    uint64_t v15 = *(void *)(v11 + 24);
    if (v15)
    {
      if ((sub_1000AD010(v8, *(void *)(v15 + 16)) & 1) == 0)
      {
        sub_100010D00();
        sub_1000110A8();
        sub_100019F70();
        goto LABEL_19;
      }

  result |= 0x800uLL;
  if ((a5 & 1) != 0) {
LABEL_6:
  }
    result |= 0x1000uLL;
LABEL_7:
  if ((a6 & 1) != 0) {
    result |= 0x2000uLL;
  }
  if ((a7 & 1) != 0) {
    return result | 0x4000;
  }
  return result;
}

  __break(1u);
}

    uint64_t v7 = (v13 - 1) & v13;
  }

  while (1)
  {
    id v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v8) {
      goto LABEL_26;
    }
    uint64_t v13 = *(void *)(v4 + 8 * v9);
    ++v18;
    if (v13) {
      goto LABEL_15;
    }
  }

  sub_100019F5C();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL);
  __break(1u);
  return result;
}

    if (*(double *)&qword_1001DC4F0 >= a2)
    {
      if (qword_1001DB8E0 != -1) {
        swift_once(&qword_1001DB8E0, sub_100146EE8);
      }
      uint64_t v4 = *(double *)&qword_1001DC500;
    }

    else
    {
      if (qword_1001DB8D8 != -1) {
        swift_once(&qword_1001DB8D8, sub_100146ECC);
      }
      if (*(double *)&qword_1001DC4F8 <= a2)
      {
        if (qword_1001DB8E8 != -1) {
          swift_once(&qword_1001DB8E8, sub_100146F04);
        }
        uint64_t v4 = *(double *)&qword_1001DC508;
      }

      else
      {
        if (qword_1001DB8F0 != -1) {
          swift_once(&qword_1001DB8F0, sub_100146FC0);
        }
        uint64_t v4 = a2 - *(double *)&qword_1001DC510;
      }
    }

    if (a1 <= v4) {
      break;
    }
    __break(1u);
LABEL_31:
    swift_once(&qword_1001DB8D8, sub_100146ECC);
  }

  return a1;
}

void sub_10001F454()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  char v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = *v1;
  uint64_t v13 = sub_100009ACC((uint64_t)&unk_1001B24A8, 72LL);
  *(_BYTE *)(v13 + sub_100019D10(v0 + 16) = v7;
  *(void *)(v13 + 24) = v11;
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 32) = v9;
  *(void *)(v13 + 40) = v1;
  *(void *)(v13 + 48) = v5;
  *(void *)(v13 + sub_10000BDD4(v0 + 56) = v3;
  *(void *)(v13 + 64) = v12;
  sub_1000271DC();
  sub_1000270FC();
  sub_100027108();
  __chkstk_darwin(v14);
  sub_100027144();
  sub_1000272E4();
  sub_100026250(v5, v3);
  sub_1000271FC();
  sub_100009C54();
  sub_10002711C();
  __chkstk_darwin(v15);
  sub_1000270AC();
  sub_10000BCF8( (unint64_t *)&qword_1001D2B80,  v16,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1000271C4();
  sub_1000271BC((unint64_t *)&qword_1001D2B90);
  sub_10002708C(v17);
  sub_1000270C4();
  sub_1000271B4();
  sub_1000270EC();
  sub_1000270DC();
  sub_1000271CC();
  sub_100009AA0();
}

void sub_10001F5A0()
{
}

void sub_10001F5BC()
{
}

void sub_10001F5D8()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  char v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = sub_100009ACC(v10, 56LL);
  *(void *)(v11 + sub_100019D10(v0 + 16) = v9;
  *(void *)(v11 + 24) = v1;
  *(_BYTE *)(v11 + swift_unknownObjectWeakDestroy(v0 + 32) = v7;
  *(void *)(v11 + 40) = v5;
  *(void *)(v11 + 48) = v3;
  sub_1000271DC();
  sub_1000270FC();
  sub_100027108();
  __chkstk_darwin(v12);
  sub_100027144();
  sub_1000272E4();
  sub_100026250(v5, v3);
  sub_1000271FC();
  sub_100009C54();
  sub_10002711C();
  __chkstk_darwin(v13);
  sub_1000270AC();
  sub_10000BCF8( (unint64_t *)&qword_1001D2B80,  v14,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1000271C4();
  sub_1000271BC((unint64_t *)&qword_1001D2B90);
  sub_10002708C(v15);
  sub_1000270C4();
  sub_1000271B4();
  sub_1000270EC();
  sub_1000270DC();
  sub_1000271CC();
  sub_100009AA0();
}

void sub_10001F70C()
{
  char v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_100010E34();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v23 - v12;
  v23[0] = *(void *)(v0 + 32);
  sub_1000271F4((uint64_t)v23 - v12, v6);
  sub_1000271F4((uint64_t)v11, v4);
  uint64_t v14 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = (v14 + 24) & ~v14;
  uint64_t v16 = (v9 + v14 + v15) & ~v14;
  uint64_t v17 = v16 + v9;
  uint64_t v18 = swift_allocObject(&unk_1001B2458, v17 + 1, v14 | 7);
  *(void *)(v18 + sub_100019D10(v0 + 16) = v0;
  sub_1000271F4(v18 + v15, (uint64_t)v13);
  sub_1000271F4(v18 + v16, (uint64_t)v11);
  *(_BYTE *)(v18 + v17) = v2;
  v23[6] = sub_1000261AC;
  v23[7] = v18;
  id v23[2] = _NSConcreteStackBlock;
  void v23[3] = 1107296256LL;
  v23[4] = sub_1000D2F18;
  v23[5] = &unk_1001B2470;
  sub_1000271DC();
  sub_1000270FC();
  sub_100027108();
  __chkstk_darwin(v19);
  sub_100009B54();
  sub_10000C4AC();
  sub_1000271FC();
  sub_100009C54();
  sub_10002711C();
  __chkstk_darwin(v20);
  sub_1000270AC();
  v23[1] = _swiftEmptyArrayStorage;
  sub_10000BCF8( (unint64_t *)&qword_1001D2B80,  v21,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1000271C4();
  sub_1000271BC((unint64_t *)&qword_1001D2B90);
  sub_10002708C(v22);
  sub_1000270C4();
  sub_1000271B4();
  sub_1000270EC();
  sub_1000270DC();
  sub_1000271CC();
  sub_100009AA0();
}

void sub_10001F8E0()
{
  uint64_t v1 = v0;
  char v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = sub_100009ACC((uint64_t)&unk_1001B2408, 56LL);
  *(_DWORD *)(v10 + sub_100019D10(v0 + 16) = v5;
  *(_BYTE *)(v10 + 20) = BYTE4(v5) & 1;
  *(void *)(v10 + 24) = v1;
  *(_BYTE *)(v10 + swift_unknownObjectWeakDestroy(v0 + 32) = v3;
  *(void *)(v10 + 40) = v9;
  *(void *)(v10 + 48) = v7;
  sub_1000271DC();
  sub_1000270FC();
  sub_100027108();
  __chkstk_darwin(v11);
  sub_100009B54();
  swift_retain(v1);
  swift_bridgeObjectRetain(v7);
  sub_1000271FC();
  sub_100009C54();
  sub_10002711C();
  __chkstk_darwin(v12);
  sub_1000270AC();
  sub_10000BCF8( (unint64_t *)&qword_1001D2B80,  v13,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1000271C4();
  sub_1000271BC((unint64_t *)&qword_1001D2B90);
  sub_10002708C(v14);
  sub_1000270C4();
  sub_1000271B4();
  sub_1000270EC();
  sub_1000270DC();
  sub_1000271CC();
  sub_100009AA0();
}

uint64_t sub_10001FA2C(unsigned __int8 a1)
{
  *(void *)&__int128 v8 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(59LL);
  sub_100027204();
  v2._uint64_t countAndFlagsBits = 0xD000000000000038LL;
  String.append(_:)(v2);
  *(void *)&__int128 v9 = a1;
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  object = v3._object;
  String.append(_:)(v3);
  sub_1000110A8();
  sub_1000272A0();
  sub_1000272CC();
  sub_100027138(v5, 0xE000000000000000LL);
  if (object)
  {
    sub_100010D88();
    return swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    SQLiteStatement.execute()();
    if (v7) {
      sub_100010D88();
    }
    swift_release();
    __int128 v9 = v8;
    return sub_100025EAC((uint64_t)&v9);
  }

void *sub_10001FB30(char a1)
{
  if (qword_1001D0530 != -1) {
    swift_once(&qword_1001D0530, sub_1000344F0);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_1000093D0(v2, (uint64_t)qword_1001EDC60);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "ECC database opened.", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  if ((a1 & 1) != 0)
  {
    uint64_t v8 = static os_log_type_t.default.getter(v7);
    os_log_type_t v9 = v8;
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v12 = 0;
      uint64_t v13 = "ECC creating schema for new db";
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v10, v11, v13, v12, 2u);
      swift_slowDealloc(v12, -1LL, -1LL);
      goto LABEL_16;
    }

    goto LABEL_16;
  }

  uint64_t result = (void *)sub_10001FF04();
  if (!(_BYTE)result) {
    return result;
  }
  if (result != 1)
  {
    uint64_t v20 = static os_log_type_t.default.getter(result);
    os_log_type_t v21 = v20;
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v11 = v21;
    if (os_log_type_enabled(v10, v21))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v12 = 0;
      uint64_t v13 = "ECC recovering schema from old version";
      goto LABEL_15;
    }

uint64_t sub_10001FD94()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v10 = 0LL;
  uint64_t v3 = (dispatch_queue_s *)v0[4];
  uint64_t v4 = (void *)swift_allocObject(&unk_1001B2250, 40LL, 7LL);
  void v4[2] = v1;
  v4[3] = &v10;
  v4[4] = v2;
  uint64_t v5 = swift_allocObject(&unk_1001B2278, 32LL, 7LL);
  *(void *)(v5 + sub_100019D10(v0 + 16) = sub_100025E78;
  *(void *)(v5 + 24) = v4;
  aBlock[4] = sub_10001B040;
  aBlock[5] = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10007B5C8;
  id aBlock[3] = &unk_1001B2290;
  uint64_t v6 = _Block_copy(aBlock);
  swift_retain(v1);
  swift_retain(v5);
  swift_release();
  dispatch_sync(v3, v6);
  _Block_release(v6);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation(v5, "", 93LL, 280LL, 30LL, 1LL);
  uint64_t result = swift_release();
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    if (v10)
    {
      uint64_t v8 = swift_errorRetain(v10);
      swift_willThrow(v8);
      swift_errorRelease(v10);
    }

    return swift_release();
  }

  return result;
}

uint64_t sub_10001FF04()
{
  (*(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void))(**(void **)(v0 + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_database)
                                                                                            + 176LL))( &v5,  0xD00000000000003BLL,  0x800000010016B900LL,  0LL);
  SQLiteStatement.expectAtMostOneRow()(&v7);
  swift_release();
  __int128 v10 = v6;
  uint64_t v1 = sub_100025EAC((uint64_t)&v10);
  v3[0] = 2;
  __chkstk_darwin(v1);
  SQLiteStatement.reduce<A>(_:handleRow:)( (uint64_t)v3,  (uint64_t)&type metadata for EngagedCompletionSQLCache.SchemaState,  (uint64_t)&v4);
  swift_release();
  __int128 v9 = v8;
  sub_100025EAC((uint64_t)&v9);
  return v4;
}

void *sub_1000201DC()
{
  void *(*v2)(uint64_t *__return_ptr, unint64_t, unint64_t, void);
  void *result;
  uint64_t v4;
  __int128 *v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v2 = *(void *(**)(uint64_t *__return_ptr, unint64_t, unint64_t, void))(**(void **)(v0 + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_database) + 176LL);
  uint64_t result = v2(&v10, 0xD00000000000004FLL, 0x800000010016B870LL, 0LL);
  if (!v1)
  {
    SQLiteStatement.execute()();
    swift_release();
    if (v4)
    {
      uint64_t v17 = v11;
      uint64_t v5 = &v17;
    }

    else
    {
      os_log_type_t v16 = v11;
      sub_100025EAC((uint64_t)&v16);
      _StringGuts.grow(_:)(65LL);
      v6._object = (void *)0x800000010016B8C0LL;
      v6._uint64_t countAndFlagsBits = 0xD00000000000003DLL;
      String.append(_:)(v6);
      v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      v8._uint64_t countAndFlagsBits = 15145LL;
      v8._object = (void *)0xE200000000000000LL;
      String.append(_:)(v8);
      v2(&v12, 0LL, 0xE000000000000000LL, 0LL);
      swift_bridgeObjectRelease();
      SQLiteStatement.execute()();
      swift_release();
      if (v9)
      {
        uint64_t v15 = v13;
        uint64_t v5 = &v15;
      }

      else
      {
        uint64_t v14 = v13;
        uint64_t v5 = &v14;
      }
    }

    return (void *)sub_100025EAC((uint64_t)v5);
  }

  return result;
}

BOOL static SQLiteBaseVTab.Style.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void SQLiteBaseVTab.Style.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int SQLiteBaseVTab.Style.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_100020414()
{
  return SQLiteBaseVTab.Style.hashValue.getter(*v0);
}

void sub_10002041C(uint64_t a1)
{
}

Swift::Int sub_100020424(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_100020464(uint64_t a1@<X1>, char *a2@<X8>)
{
  if (!v2)
  {
    if (v5 == 8)
    {
      char v4 = 1;
    }

    else
    {
      if (v5 == 9)
      {
        *a2 = 0;
        return;
      }

      char v4 = 2;
    }

    *a2 = v4;
  }

uint64_t sub_1000204D4(uint64_t a1, uint64_t *a2)
{
  void (*v9)(uint64_t *__return_ptr, unint64_t, unint64_t, void);
  uint64_t v10;
  __int128 v11;
  __int128 *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint64_t v15;
  os_log_s *v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27[2];
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  _BYTE v46[48];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  if (qword_1001D0530 != -1) {
    swift_once(&qword_1001D0530, sub_1000344F0);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_1000093D0(v4, (uint64_t)qword_1001EDC60);
  uint64_t v5 = ((uint64_t (*)(void))static os_log_type_t.default.getter)();
  os_log_type_t v6 = v5;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v5);
  if (os_log_type_enabled(v7, v6))
  {
    __int128 v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)__int128 v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v6, "ECC creating db schema", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  v9(&v28, 0xD000000000000017LL, 0x800000010016B550LL, 0LL);
  SQLiteStatement.execute()();
  if (v10)
  {
    swift_release();
    os_log_type_t v11 = v29;
LABEL_7:
    *(_OWORD *)uint64_t v46 = v11;
    uint64_t v12 = (__int128 *)v46;
    goto LABEL_9;
  }

  swift_release();
  id v56 = v29;
  sub_100025EAC((uint64_t)&v56);
  v9(&v30, 0xD000000000000035LL, 0x800000010016B570LL, 0LL);
  SQLiteStatement.execute()();
  if (v10)
  {
    swift_release();
    os_log_type_t v11 = v31;
    goto LABEL_7;
  }

  swift_release();
  dispatch_group_t v55 = v31;
  sub_100025EAC((uint64_t)&v55);
  v9(&v32, 0xD00000000000004FLL, 0x800000010016B5B0LL, 0LL);
  SQLiteStatement.execute()();
  if (v10)
  {
    swift_release();
    os_log_type_t v11 = v33;
    goto LABEL_7;
  }

  swift_release();
  uint64_t v54 = v33;
  sub_100025EAC((uint64_t)&v54);
  v9(&v34, 0xD000000000000031LL, 0x800000010016B600LL, 0LL);
  SQLiteStatement.execute()();
  if (v10)
  {
    swift_release();
    os_log_type_t v11 = v35;
    goto LABEL_7;
  }

  swift_release();
  uint64_t v53 = v35;
  sub_100025EAC((uint64_t)&v53);
  v9(&v36, 0xD0000000000000FELL, 0x800000010016B640LL, 0LL);
  SQLiteStatement.execute()();
  if (v10)
  {
    swift_release();
    os_log_type_t v11 = v37;
    goto LABEL_7;
  }

  swift_release();
  id v52 = v37;
  sub_100025EAC((uint64_t)&v52);
  v9(&v38, 0xD000000000000026LL, 0x800000010016B740LL, 0LL);
  SQLiteStatement.execute()();
  if (v10)
  {
    swift_release();
    os_log_type_t v11 = v39;
    goto LABEL_7;
  }

  swift_release();
  uint64_t v51 = v39;
  sub_100025EAC((uint64_t)&v51);
  v9(&v40, 0xD00000000000004BLL, 0x800000010016B770LL, 0LL);
  SQLiteStatement.execute()();
  if (v10)
  {
    swift_release();
    os_log_type_t v11 = v41;
    goto LABEL_7;
  }

  swift_release();
  uint64_t v50 = v41;
  sub_100025EAC((uint64_t)&v50);
  v9(&v42, 0xD000000000000020LL, 0x800000010016B7C0LL, 0LL);
  SQLiteStatement.execute()();
  if (v10)
  {
    swift_release();
    os_log_type_t v11 = v43;
    goto LABEL_7;
  }

  swift_release();
  uint64_t v49 = v43;
  sub_100025EAC((uint64_t)&v49);
  v9(&v44, 0xD00000000000003FLL, 0x800000010016B7F0LL, 0LL);
  SQLiteStatement.execute()();
  if (v10)
  {
    swift_release();
    os_log_type_t v11 = v45;
    goto LABEL_7;
  }

  swift_release();
  uint64_t v48 = v45;
  sub_100025EAC((uint64_t)&v48);
  *(void *)uint64_t v46 = 0LL;
  *(void *)&v46[8] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(56LL);
  v23._uint64_t countAndFlagsBits = 0xD000000000000034LL;
  v23._object = (void *)0x800000010016B830LL;
  String.append(_:)(v23);
  *(void *)&unint64_t v47 = 9LL;
  v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 15145LL;
  v25._object = (void *)0xE200000000000000LL;
  String.append(_:)(v25);
  v9((uint64_t *)v46, *(void *)v46, *(void *)&v46[8], 0LL);
  swift_bridgeObjectRelease();
  SQLiteStatement.execute()();
  if (!v10)
  {
    swift_release();
    unint64_t v47 = *(_OWORD *)&v46[8];
    return sub_100025EAC((uint64_t)&v47);
  }

  swift_release();
  unint64_t v47 = *(_OWORD *)&v46[8];
  uint64_t v12 = &v47;
LABEL_9:
  uint64_t v13 = sub_100025EAC((uint64_t)v12);
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  swift_errorRetain(v10);
  uint64_t v15 = swift_errorRetain(v10);
  os_log_type_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  if (os_log_type_enabled(v16, v14))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    os_log_type_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v26 = v10;
    v27[0] = v18;
    *(_DWORD *)uint64_t v17 = 136315138;
    swift_errorRetain(v10);
    sub_10000941C(&qword_1001D2B70);
    uint64_t v19 = String.init<A>(describing:)(&v26);
    uint64_t v26 = sub_1000307E0(v19, v20, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v17 + 4);
    swift_bridgeObjectRelease();
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v16, v14, "ECC error creating db schema: %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  os_log_type_t v21 = *a2;
  *a2 = v10;
  return swift_errorRelease(v21);
}

unint64_t sub_100020B78(unint64_t a1, uint64_t a2)
{
  unint64_t result = sub_100020BCC(a2);
  if ((result & 0x8000000000000000LL) == 0 && result >= a1) {
    return sub_100020DD0(a1, a2);
  }
  return result;
}

uint64_t sub_100020BCC(unsigned __int8 a1)
{
  uint64_t v8 = 0LL;
  *(void *)&__int128 v9 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(68LL);
  v3._object = (void *)0x800000010016BB40LL;
  v3._uint64_t countAndFlagsBits = 0xD000000000000041LL;
  String.append(_:)(v3);
  *(void *)&__int128 v10 = a1;
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 59LL;
  v5._object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  (*(void (**)(uint64_t *__return_ptr, void, unint64_t, void))(**(void **)(v1
                                                                                                + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_database)
                                                                                  + 176LL))( &v8,  0LL,  0xE000000000000000LL,  0LL);
  swift_bridgeObjectRelease();
  SQLiteStatement.singleRow<A>(_:)((uint64_t)&type metadata for Int, (uint64_t)&v7);
  swift_release();
  __int128 v10 = v9;
  sub_100025EAC((uint64_t)&v10);
  return v7;
}

uint64_t sub_100020DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  __int128 v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  os_log_type_t v11 = (char *)v21 - v10;
  uint64_t v23 = 0LL;
  *(void *)&__int128 v24 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(124LL);
  v12._uint64_t countAndFlagsBits = 0xD000000000000048LL;
  v12._object = (void *)0x800000010016BAC0LL;
  String.append(_:)(v12);
  v21[1] = a2;
  *(void *)&__int128 v25 = a2;
  v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._object = (void *)0x800000010016BB10LL;
  v14._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
  String.append(_:)(v14);
  *(void *)&__int128 v25 = a1;
  v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 15136LL;
  v16._object = (void *)0xE200000000000000LL;
  String.append(_:)(v16);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void, void))(**(void **)(v2
                                                                                       + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_database)
                                                                         + 176LL))( &v23,  v23,  v24,  0LL);
  swift_bridgeObjectRelease();
  SQLiteStatement.singleRow<A>(_:)((uint64_t)&type metadata for Int64, (uint64_t)&v22);
  swift_release();
  __int128 v25 = v24;
  uint64_t v17 = sub_100025EAC((uint64_t)&v25);
  uint64_t v18 = v22;
  static Date.distantPast.getter(v17);
  Date.init(timeIntervalSinceReferenceDate:)((double)v18);
  sub_100021060();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  v19(v9, v5);
  return ((uint64_t (*)(char *, uint64_t))v19)(v11, v5);
}

void sub_100021030(uint64_t a1)
{
}

void sub_100021060()
{
  uint64_t v56 = v1;
  uint64_t v58 = v2;
  os_log_type_t v59 = v3;
  uint64_t v4 = sub_100010E34();
  uint64_t v60 = *(void *)(v4 - 8);
  sub_100027160();
  __chkstk_darwin(v5);
  sub_100027228();
  uint64_t v7 = __chkstk_darwin(v6);
  __int128 v9 = (char *)&v54 - v8;
  __chkstk_darwin(v7);
  os_log_type_t v11 = (char *)&v54 - v10;
  uint64_t v12 = type metadata accessor for DispatchPredicate(0LL);
  unint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  Swift::String v15 = (uint64_t *)((char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v57 = v0;
  Swift::String v16 = *(void **)(v0 + 32);
  *Swift::String v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v17 = v16;
  char v18 = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if ((v18 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    swift_once(&qword_1001D0530, sub_1000344F0);
LABEL_17:
    uint64_t v29 = sub_100010ED4();
    uint64_t v30 = sub_1000093D0(v29, (uint64_t)qword_1001EDC60);
    uint64_t v31 = static os_log_type_t.default.getter(v30);
    os_log_type_t v32 = v31;
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v31);
    if (os_log_type_enabled(v33, v32))
    {
      uint64_t v34 = sub_100009B20(22LL);
      uint64_t v35 = sub_100009B20(64LL);
      dispatch_group_t v55 = v15;
      uint64_t v36 = v35;
      uint64_t v61 = v35;
      *(_DWORD *)uint64_t v34 = 136315394;
      unint64_t v63 = v13;
      uint64_t v37 = sub_100027210((uint64_t)&type metadata for UInt64);
      uint64_t v39 = sub_100027288(v37, v38);
      sub_100027184(v39);
      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12) = 2080;
      unint64_t v63 = (unint64_t)v11;
      uint64_t v40 = sub_100027210((uint64_t)&type metadata for UInt64);
      uint64_t v42 = sub_100027288(v40, v41);
      sub_100027184(v42);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v33,  v32,  "ECC clearing completions from %s to %s",  (uint8_t *)v34,  0x16u);
      swift_arrayDestroy(v36, 2LL);
      uint64_t v43 = v36;
      Swift::String v15 = v55;
      sub_100010C34(v43);
      sub_100010C34(v34);
    }

    uint64_t v61 = 0LL;
    v62.n128_u64[0] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(111LL);
    sub_100027204();
    String.append(_:)(v44);
    unint64_t v63 = v13;
    v45._uint64_t countAndFlagsBits = sub_100027210((uint64_t)&type metadata for UInt64);
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    sub_100027204();
    v46._uint64_t countAndFlagsBits = 0xD000000000000018LL;
    String.append(_:)(v46);
    unint64_t v63 = (unint64_t)v11;
    v64._uint64_t countAndFlagsBits = sub_100027210((uint64_t)&type metadata for UInt64);
    sub_100027294(v64);
    sub_1000110A8();
    v47._uint64_t countAndFlagsBits = 0x696C6320444E4120LL;
    v47._object = (void *)0xEF203D3D20746E65LL;
    String.append(_:)(v47);
    unint64_t v63 = v56;
    v65._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
    sub_100027294(v65);
    sub_1000110A8();
    sub_1000272A0();
    uint64_t v48 = v62.n128_u64[0];
    sub_1000272CC();
    sub_100027138(v49, v48);
    if (&type metadata for UInt64)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      SQLiteStatement.execute()();
      if (!v50)
      {
        swift_release();
        sub_10002712C(v62);
        goto LABEL_24;
      }

      swift_release();
      sub_10002712C(v62);
    }

    sub_100010D88();
LABEL_24:
    uint64_t v51 = v58;
    id v52 = v59;
    uint64_t v53 = *(void (**)(char *, uint64_t))(v60 + 8);
    v53((char *)v15, v58);
    v53(v52, v51);
    sub_100009AA0();
    return;
  }

  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
  uint64_t v20 = v58;
  v19(v11, v58, v4);
  os_log_type_t v21 = v59;
  v19(v9, (uint64_t)v59, v4);
  uint64_t v22 = static Date.== infix(_:_:)(v20, v21);
  Swift::String v15 = v9;
  uint64_t v23 = v11;
  if ((v22 & 1) != 0)
  {
    Date.addingTimeInterval(_:)(-60.0);
    __int128 v24 = *(void (**)(char *, uint64_t))(v60 + 8);
    v24(v11, v4);
    sub_100027270((uint64_t)v11);
    Date.addingTimeInterval(_:)(60.0);
    v24(v9, v4);
    uint64_t v22 = sub_100027270((uint64_t)v9);
  }

  if (Date.timeIntervalSinceReferenceDate.getter(v22) > 0.0)
  {
    double v26 = Date.timeIntervalSinceReferenceDate.getter(v25);
    if ((~*(void *)&v26 & 0x7FF0000000000000LL) != 0)
    {
      if (v26 > -1.0)
      {
        if (v26 < 1.84467441e19)
        {
          unint64_t v13 = (unint64_t)v26;
          goto LABEL_10;
        }

LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_30;
  }

  unint64_t v13 = 0LL;
LABEL_10:
  if (Date.timeIntervalSinceReferenceDate.getter(v25) <= 0.0)
  {
    os_log_type_t v11 = 0LL;
LABEL_16:
    uint64_t v58 = v4;
    os_log_type_t v59 = v23;
    if (qword_1001D0530 == -1) {
      goto LABEL_17;
    }
    goto LABEL_27;
  }

  double v28 = Date.timeIntervalSinceReferenceDate.getter(v27);
  if ((~*(void *)&v28 & 0x7FF0000000000000LL) == 0) {
    goto LABEL_31;
  }
  if (v28 <= -1.0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  if (v28 < 1.84467441e19)
  {
    os_log_type_t v11 = (char *)v28;
    goto LABEL_16;
  }

  __break(1u);
  return result;
}

  if (a2 < 0) {
    Swift::String v65 = a2;
  }
  else {
    Swift::String v65 = a2 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a2);
  double v26 = _CocoaArrayWrapper.endIndex.getter(v65);
  if (!v26) {
    goto LABEL_34;
  }
LABEL_3:
  uint64_t v66 = a3;
  uint64_t v67 = v25;
  uint64_t v74 = a1 + 5;
  uint64_t v75 = a2 & 0xC000000000000001LL;
  uint64_t v25 = 4LL;
  unint64_t v68 = a1;
  a3 = v70;
  uint64_t v69 = a2;
  uint64_t v73 = v26;
  while (1)
  {
    if (v75) {
      uint64_t v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25 - 4, a2);
    }
    else {
      uint64_t v27 = *(id *)(a2 + 8 * v25);
    }
    double v28 = v27;
    if (__OFADD__(v25 - 4, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    id v77 = v25;
    sub_100019AFC(v74, a1[8]);
    sub_1000DF5AC(v28, (uint64_t)a3);
    uint64_t v76 = v25 - 3;
    uint64_t v29 = sub_10006D028((uint64_t)a3, v17);
    Date.init()(v29);
    sub_10006D118();
    uint64_t v30 = dispatch thunk of static Comparable.< infix(_:_:)(v10, v17);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
    if ((v30 & 1) == 0)
    {
      sub_10001460C();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v67 + qword_1001D2E88) = 27;
      sub_100042D10();
      if (qword_1001D04E0 != -1) {
        swift_once(&qword_1001D04E0, sub_10003438C);
      }
      uint64_t v54 = sub_100010ED4();
      sub_1000093D0(v54, (uint64_t)qword_1001EDB70);
      dispatch_group_t v55 = sub_10006D214();
      uint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
      uint64_t v57 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = (uint8_t *)sub_100009B20(12LL);
        os_log_type_t v59 = sub_100009B20(32LL);
        uint64_t v79 = v59;
        *(_DWORD *)uint64_t v58 = 136642819;
        static String._unconditionallyBridgeFromObjectiveC(_:)([v55 description]);
        sub_10006D21C();
        uint64_t v60 = sub_10006D1EC();
        uint64_t v61 = sub_10006D1FC(v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v61, v62, v63);

        swift_bridgeObjectRelease();
        sub_100014564((void *)&_mh_execute_header, v56, v57, "Cached result expired for: %{sensitive}s", v58);
        swift_arrayDestroy(v59, 1LL);
        sub_100010C34(v59);
        sub_100010C34((uint64_t)v58);
      }

      else
      {
      }

      swift_release();
      sub_10006D098(v17);
      Swift::String v64 = 0LL;
      a3 = v66;
      goto LABEL_36;
    }

    if (qword_1001D04E0 != -1) {
      swift_once(&qword_1001D04E0, sub_10003438C);
    }
    uint64_t v31 = sub_100010ED4();
    sub_1000093D0(v31, (uint64_t)qword_1001EDB70);
    os_log_type_t v32 = sub_10006D214();
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    uint64_t v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v71 = sub_100009B20(12LL);
      uint64_t v72 = sub_100009B20(32LL);
      uint64_t v79 = v72;
      *(_DWORD *)uint64_t v71 = 136642819;
      uint64_t v35 = v10;
      uint64_t v36 = v7;
      uint64_t v37 = [v32 description];
      unint64_t v38 = v6;
      uint64_t v39 = v17;
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      uint64_t v42 = v41;

      uint64_t v7 = v36;
      uint64_t v10 = v35;
      a3 = v70;
      uint64_t v43 = v40;
      id v17 = v39;
      uint64_t v6 = v38;
      *(void *)(v71 + 4) = sub_1000307E0(v43, v42, &v79);

      a1 = v68;
      swift_bridgeObjectRelease();
      sub_100014564((void *)&_mh_execute_header, v33, v34, "Found cached result for: %{sensitive}s", (uint8_t *)v71);
      swift_arrayDestroy(v72, 1LL);
      a2 = v69;
      sub_100010C34(v72);
      sub_100010C34(v71);
    }

    else
    {
    }

    swift_bridgeObjectRetain(*(void *)(v17 + *(int *)(v78 + 20)));
    sub_10007ECDC();

    sub_10006D098(v17);
    uint64_t v25 = v77 + 1;
    if (v76 == v73)
    {
      sub_10001460C();
      Swift::String v64 = v80;
      a3 = v66;
      uint64_t v25 = v67;
      goto LABEL_35;
    }
  }

  sub_10001460C();
  swift_bridgeObjectRelease();
  sub_10006CEFC((uint64_t)a3);
  if (qword_1001D04E0 != -1) {
    swift_once(&qword_1001D04E0, sub_10003438C);
  }
  Swift::String v44 = sub_100010ED4();
  sub_1000093D0(v44, (uint64_t)qword_1001EDB70);
  Swift::String v45 = sub_10006D214();
  Swift::String v46 = (os_log_s *)Logger.logObject.getter(v45);
  Swift::String v47 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = (uint8_t *)sub_100009B20(12LL);
    uint64_t v49 = sub_100009B20(32LL);
    uint64_t v79 = v49;
    *(_DWORD *)uint64_t v48 = 136642819;
    static String._unconditionallyBridgeFromObjectiveC(_:)([v45 description]);
    sub_10006D21C();
    uint64_t v50 = sub_10006D1EC();
    uint64_t v51 = sub_10006D1FC(v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v51, v52, v53);

    swift_bridgeObjectRelease();
    sub_100014564( (void *)&_mh_execute_header,  v46,  v47,  "Cached result missing for: %{sensitive}s, will trigger server request",  v48);
    swift_arrayDestroy(v49, 1LL);
    sub_100010C34(v49);
    sub_100010C34((uint64_t)v48);
  }

  else
  {
  }

  a3 = v66;
  *(_BYTE *)(v67 + qword_1001D2E88) = 6;
  sub_100042D10();
  sub_10001683C();

  Swift::String v64 = 0LL;
LABEL_36:
  *a3 = v64;
}

  __break(1u);
  return result;
}

LABEL_33:
  __break(1u);
}

      swift_once(&qword_1001D0530, sub_1000344F0);
      goto LABEL_19;
    }

    __break(1u);
    goto LABEL_33;
  }

      sub_10001450C();
      id v77 = v67[28];
      id v78 = v67[29];
LABEL_37:
      sub_1000145E8();
      goto LABEL_38;
    }

    os_log_type_t v59 = v60;
    Swift::String v3 = (uint64_t)v197;
    goto LABEL_17;
  }

  dispatch_group_t v55 = sub_100059E4C();
  uint64_t v56 = sub_100010EA0((uint64_t)&type metadata for PARNetworkRequestFactory.NetworkRequestError, v55);
  *uint64_t v57 = 0;
  swift_willThrow(v56);
LABEL_80:
  sub_10005A8AC();
  sub_10002716C();
}

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }

void sub_100021594(uint64_t a1)
{
}

void sub_1000215C4(void *a1, uint64_t a2)
{
  uint64_t v118 = a2;
  uint64_t v113 = *v2;
  uint64_t v4 = sub_10000941C(&qword_1001D32B0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v115 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  v116 = (os_log_s *)((char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v114 = (char *)&v105 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v105 - v13;
  __chkstk_darwin(v12);
  Swift::String v16 = (char *)&v105 - v15;
  if (qword_1001D0530 != -1) {
    swift_once(&qword_1001D0530, sub_1000344F0);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  uint64_t v18 = sub_1000093D0(v17, (uint64_t)qword_1001EDC60);
  uint64_t v19 = static os_log_type_t.default.getter(v18);
  os_log_type_t v20 = v19;
  os_log_type_t v21 = (os_log_s *)Logger.logObject.getter(v19);
  if (os_log_type_enabled(v21, v20))
  {
    uint64_t v22 = v16;
    uint64_t v23 = v6;
    uint64_t v24 = v7;
    uint64_t v25 = v14;
    uint64_t v26 = v18;
    uint64_t v27 = a1;
    double v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)double v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v20, "ECC: adding engagement", v28, 2u);
    uint64_t v29 = v28;
    a1 = v27;
    uint64_t v18 = v26;
    uint64_t v14 = v25;
    uint64_t v7 = v24;
    uint64_t v6 = v23;
    Swift::String v16 = v22;
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  uint64_t v30 = sub_10001085C(a1, (SEL *)&selRef_title);
  uint64_t v119 = v31;
  if (!v31)
  {
    v120 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v61 = static os_log_type_t.error.getter(v120, v60);
    if (os_log_type_enabled(v120, v61))
    {
      __n128 v62 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)__n128 v62 = 0;
      _os_log_impl((void *)&_mh_execute_header, v120, v61, "ECC: suggestion string is missing", v62, 2u);
      swift_slowDealloc(v62, -1LL, -1LL);
    }

    return;
  }

  uint64_t v32 = v30;
  uint64_t v33 = sub_10001085C(a1, (SEL *)&selRef_searchString);
  if (!v34)
  {
    unint64_t v63 = v119;
    uint64_t v64 = swift_bridgeObjectRetain(v119);
    Swift::String v65 = (os_log_s *)Logger.logObject.getter(v64);
    os_log_type_t v67 = static os_log_type_t.error.getter(v65, v66);
    if (os_log_type_enabled(v65, v67))
    {
      unint64_t v68 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v69 = swift_slowAlloc(32LL, -1LL);
      unint64_t v138 = v69;
      *(_DWORD *)unint64_t v68 = 136642819;
      swift_bridgeObjectRetain(v63);
      uint64_t v136 = sub_1000307E0(v32, v63, (uint64_t *)&v138);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v68 + 4);
      swift_bridgeObjectRelease_n(v63, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v65, v67, "ECC: search string is missing for: %{sensitive}s", v68, 0xCu);
      swift_arrayDestroy(v69, 1LL);
      swift_slowDealloc(v69, -1LL, -1LL);
      swift_slowDealloc(v68, -1LL, -1LL);

      return;
    }

    uint64_t v80 = v63;
    goto LABEL_38;
  }

  uint64_t v117 = a1;
  unint64_t v111 = v34;
  uint64_t v112 = v32;
  uint64_t v106 = v33;
  uint64_t v35 = v120;
  uint64_t v36 = *(os_unfair_lock_s **)(*((void *)v120 + 6) + 16LL);
  swift_retain(v120);
  os_unfair_lock_lock(v36);
  uint64_t v37 = (void *)*((void *)v35 + 7);
  unint64_t v38 = (void *)*((void *)v35 + 8);
  unint64_t v110 = *((void *)v35 + 9);
  id v109 = v37;
  id v108 = v38;
  os_unfair_lock_unlock(v36);
  uint64_t v39 = swift_release();
  uint64_t v40 = static os_log_type_t.default.getter(v39);
  LOBYTE(v38) = v40;
  unint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
  os_log_type_t v42 = v38;
  if (os_log_type_enabled(v41, (os_log_type_t)v38))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v43 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "ECC: deleting engagements older than 30 days", v43, 2u);
    swift_slowDealloc(v43, -1LL, -1LL);
  }

  uint64_t v45 = static Date.distantPast.getter(v44);
  Swift::String v46 = v114;
  Date.init()(v45);
  Date.addingTimeInterval(_:)(-2592000.0);
  uint64_t v47 = v115;
  uint64_t v48 = *(void (**)(char *, uint64_t))(v115 + 8);
  v48(v46, v7);
  uint64_t v49 = v14;
  uint64_t v50 = v16;
  uint64_t v51 = v118;
  sub_100021060();
  v48(v49, v7);
  v48(v50, v7);
  if (v110) {
    unint64_t v52 = v110;
  }
  else {
    unint64_t v52 = 10000LL;
  }
  sub_100020B78(v52, v51);
  id v53 = [v117 engagementTime];
  uint64_t v107 = v18;
  if (v53)
  {
    uint64_t v54 = v53;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    dispatch_group_t v55 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
    v55(v6, v50, v7);
    sub_100009654((uint64_t)v6, 0LL, 1LL, v7);
    uint64_t v56 = sub_100010708((uint64_t)v6, 1LL, v7);
    unint64_t v57 = v111;
    if ((_DWORD)v56 != 1)
    {
      uint64_t v58 = v116;
      uint64_t v59 = ((uint64_t (*)(os_log_s *, char *, uint64_t))v55)(v116, v6, v7);
      goto LABEL_22;
    }
  }

  else
  {
    uint64_t v56 = sub_100009654((uint64_t)v6, 1LL, 1LL, v7);
    unint64_t v57 = v111;
  }

  uint64_t v58 = v116;
  Date.init()(v56);
  sub_100019C1C((uint64_t)v6, &qword_1001D32B0);
LABEL_22:
  double v70 = Date.timeIntervalSinceReferenceDate.getter(v59);
  v48((char *)v58, v7);
  unint64_t v71 = v119;
  if ((~*(void *)&v70 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_40;
  }

  if (v70 <= -1.0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  if (v70 >= 1.84467441e19)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }

  unint64_t v72 = v112;
  uint64_t v73 = sub_100022CE0(v112, v119);
  uint64_t v75 = v74;
  uint64_t v76 = sub_100025FAC(v117);
  else {
    uint64_t v78 = v76;
  }
  v116 = (os_log_s *)v78;
  else {
    uint64_t v79 = v77;
  }
  uint64_t v49 = 0LL;
  (*(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, uint64_t))(**(void **)((char *)v120 + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_database)
                                                                                             + 176LL))( &v128,  0xD0000000000000ADLL,  0x800000010016BA10LL,  1LL);
  v120 = v79;
  uint64_t v140 = &type metadata for String;
  uint64_t v141 = &protocol witness table for String;
  unint64_t v138 = v72;
  *(void *)&__int128 v139 = v71;
  swift_bridgeObjectRetain(v71);
  SQLiteStatement.bind(_:at:)(&v138, 1LL, (uint64_t)v130);
  uint64_t v6 = v130;
  swift_release();
  __int128 v149 = v129;
  sub_100025EAC((uint64_t)&v149);
  sub_1000108B8(&v138);
  uint64_t v140 = &type metadata for String;
  uint64_t v141 = &protocol witness table for String;
  unint64_t v138 = v106;
  *(void *)&__int128 v139 = v57;
  swift_bridgeObjectRetain(v57);
  SQLiteStatement.bind(_:at:)(&v138, 2LL, (uint64_t)v131);
  swift_release();
  __int128 v148 = *(_OWORD *)&v130[8];
  sub_100025EAC((uint64_t)&v148);
  sub_1000108B8(&v138);
  uint64_t v140 = &type metadata for Int64;
  uint64_t v141 = &protocol witness table for Int64;
  if (((unint64_t)v70 & 0x8000000000000000LL) == 0)
  {
    unint64_t v138 = (unint64_t)v70;
    SQLiteStatement.bind(_:at:)(&v138, 3LL, (uint64_t)v132);
    swift_release();
    __int128 v147 = *(_OWORD *)&v131[8];
    sub_100025EAC((uint64_t)&v147);
    sub_1000108B8(&v138);
    signed int v92 = [v117 type];
    uint64_t v141 = &protocol witness table for Int;
    uint64_t v140 = &type metadata for Int;
    unint64_t v138 = v92;
    SQLiteStatement.bind(_:at:)(&v138, 4LL, (uint64_t)v133);
    swift_release();
    __int128 v146 = *(_OWORD *)&v132[8];
    sub_100025EAC((uint64_t)&v146);
    sub_1000108B8(&v138);
    uint64_t v141 = &protocol witness table for Int;
    uint64_t v140 = &type metadata for Int;
    uint64_t v93 = v118;
    unint64_t v138 = v118;
    SQLiteStatement.bind(_:at:)(&v138, 5LL, (uint64_t)v134);
    uint64_t v115 = v93;
    swift_release();
    __int128 v145 = *(_OWORD *)&v133[8];
    sub_100025EAC((uint64_t)&v145);
    sub_1000108B8(&v138);
    uint64_t v140 = &type metadata for String;
    uint64_t v141 = &protocol witness table for String;
    unint64_t v138 = v73;
    *(void *)&__int128 v139 = v75;
    SQLiteStatement.bind(_:at:)(&v138, 6LL, (uint64_t)&v135);
    unint64_t v57 = v111;
    unint64_t v71 = v119;
    swift_release();
    __int128 v144 = *(_OWORD *)&v134[8];
    sub_100025EAC((uint64_t)&v144);
    sub_1000108B8(&v138);
    uint64_t v48 = (void (*)(char *, uint64_t))v117;
    [v117 score];
    uint64_t v140 = &type metadata for Double;
    uint64_t v141 = &protocol witness table for Double;
    unint64_t v138 = v94;
    SQLiteStatement.bind(_:at:)(&v138, 7LL, (uint64_t)&v136);
    uint64_t v58 = v120;
LABEL_42:
    swift_release();
    __int128 v143 = *(_OWORD *)(v6 + 248);
    sub_100025EAC((uint64_t)&v143);
    sub_1000108B8(&v138);
    unsigned int v122 = &type metadata for Data;
    uint64_t v123 = &protocol witness table for Data;
    *(void *)&__int128 v121 = v116;
    *((void *)&v121 + 1) = v58;
    sub_100014244((uint64_t)v116, (unint64_t)v58);
    SQLiteStatement.bind(_:at:)(&v121, 8LL, (uint64_t)&v138);
    if (v49)
    {
      swift_release();
      __int128 v142 = v137;
      sub_100025EAC((uint64_t)&v142);
      sub_1000108B8(&v121);
LABEL_35:
      uint64_t v81 = v48;
      swift_errorRetain(v49);
      swift_bridgeObjectRetain(v71);
      swift_bridgeObjectRetain(v57);
      uint64_t v82 = v81;
      uint64_t v83 = swift_errorRetain(v49);
      unsigned int v84 = (os_log_s *)Logger.logObject.getter(v83);
      os_log_type_t v86 = static os_log_type_t.error.getter(v84, v85);
      if (os_log_type_enabled(v84, v86))
      {
        uint64_t v87 = swift_slowAlloc(48LL, -1LL);
        uint64_t v119 = swift_slowAlloc(96LL, -1LL);
        v127[0] = v119;
        *(_DWORD *)uint64_t v87 = 136643843;
        swift_bridgeObjectRetain(v71);
        uint64_t v126 = sub_1000307E0(v112, v71, v127);
        v120 = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v87 + 4);
        swift_bridgeObjectRelease_n(v71, 3LL);
        *(_WORD *)(v87 + 12) = 2080;
        swift_getErrorValue(v49);
        uint64_t v88 = Error.localizedDescription.getter(v124, v125);
        uint64_t v126 = sub_1000307E0(v88, v89, v127);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v87 + 14);
        swift_bridgeObjectRelease();
        swift_errorRelease(v49);
        swift_errorRelease(v49);
        *(_WORD *)(v87 + 22) = 2085;
        swift_bridgeObjectRetain(v57);
        uint64_t v126 = sub_1000307E0(v106, v57, v127);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v87 + 24);
        swift_bridgeObjectRelease_n(v57, 3LL);
        *(_WORD *)(v87 + swift_unknownObjectWeakDestroy(v0 + 32) = 1024;
        unsigned int v90 = [v82 type];

        LODWORD(v126) = v90;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, (char *)&v126 + 4, v87 + 34);

        *(_WORD *)(v87 + 38) = 2048;
        uint64_t v126 = v118;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v87 + 40);
        _os_log_impl( (void *)&_mh_execute_header,  v84,  v86,  "ECC completion %{sensitive}s in not added because of error: %s input %{sensitive}s type %d client %lu",  (uint8_t *)v87,  0x30u);
        uint64_t v91 = v119;
        swift_arrayDestroy(v119, 3LL);
        swift_slowDealloc(v91, -1LL, -1LL);
        swift_slowDealloc(v87, -1LL, -1LL);

        sub_100010A30((uint64_t)v116, (unint64_t)v120);
        swift_errorRelease(v49);
        return;
      }

      sub_100010A30((uint64_t)v116, (unint64_t)v58);
      swift_errorRelease(v49);
      swift_bridgeObjectRelease_n(v71, 2LL);
      swift_errorRelease(v49);
      swift_errorRelease(v49);

      uint64_t v80 = v57;
      goto LABEL_38;
    }

    swift_release();
    __int128 v142 = v137;
    sub_100025EAC((uint64_t)&v142);
    sub_1000108B8(&v121);
    SQLiteStatement.execute()();
    if (v49)
    {
      swift_release();
      __int128 v121 = v139;
      sub_100025EAC((uint64_t)&v121);
      unint64_t v57 = v111;
      unint64_t v71 = v119;
      uint64_t v58 = v120;
      uint64_t v48 = (void (*)(char *, uint64_t))v117;
      goto LABEL_35;
    }

    swift_release();
    __int128 v121 = v139;
    uint64_t v95 = sub_100025EAC((uint64_t)&v121);
    os_log_type_t v96 = static os_log_type_t.default.getter(v95);
    uint64_t v97 = v117;
    swift_bridgeObjectRetain(v119);
    swift_bridgeObjectRetain(v111);
    id v98 = v97;
    uint64_t v99 = (os_log_s *)Logger.logObject.getter(v98);
    os_log_type_t v100 = v96;
    if (os_log_type_enabled(v99, v96))
    {
      uint64_t v101 = swift_slowAlloc(38LL, -1LL);
      uint64_t v102 = swift_slowAlloc(64LL, -1LL);
      v127[0] = v102;
      *(_DWORD *)uint64_t v101 = 136643587;
      unint64_t v103 = v119;
      swift_bridgeObjectRetain(v119);
      uint64_t v126 = sub_1000307E0(v112, v103, v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v101 + 4);
      swift_bridgeObjectRelease_n(v103, 3LL);
      *(_WORD *)(v101 + 12) = 2085;
      unint64_t v104 = v111;
      swift_bridgeObjectRetain(v111);
      uint64_t v126 = sub_1000307E0(v106, v104, v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v101 + 14);
      swift_bridgeObjectRelease_n(v104, 3LL);
      *(_WORD *)(v101 + 22) = 1024;
      LODWORD(v104) = [v98 type];

      LODWORD(v126) = v104;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, (char *)&v126 + 4, v101 + 24);

      *(_WORD *)(v101 + 28) = 2048;
      uint64_t v126 = v115;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v101 + 30);
      _os_log_impl( (void *)&_mh_execute_header,  v99,  v100,  "ECC completion added %{sensitive}s input %{sensitive}s type %d client %lu",  (uint8_t *)v101,  0x26u);
      swift_arrayDestroy(v102, 2LL);
      swift_slowDealloc(v102, -1LL, -1LL);
      swift_slowDealloc(v101, -1LL, -1LL);

      sub_100010A30((uint64_t)v116, (unint64_t)v120);
      return;
    }

    sub_100010A30((uint64_t)v116, (unint64_t)v120);
    swift_bridgeObjectRelease_n(v111, 2LL);
    uint64_t v80 = v119;
LABEL_38:
    swift_bridgeObjectRelease_n(v80, 2LL);
    return;
  }

  __break(1u);
}

void sub_1000225CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void (*a21)(id, uint64_t))
{
  uint64_t v55 = v23;
  uint64_t v56 = v24;
  uint64_t v26 = v25;
  uint64_t v57 = v27;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v34 = v22;
  if ((unint64_t)v22 >> 62)
  {
    if (v22 < 0) {
      os_log_type_t v21 = (void *)v22;
    }
    else {
      os_log_type_t v21 = (void *)(v22 & 0xFFFFFFFFFFFFFF8LL);
    }
    swift_bridgeObjectRetain(v22);
    uint64_t v35 = _CocoaArrayWrapper.endIndex.getter(v21);
    if (!v35) {
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v35 = *(void *)((v22 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v22);
    if (!v35) {
      goto LABEL_9;
    }
  }

  if (v35 < 1)
  {
    __break(1u);
    return;
  }

  for (uint64_t i = 0LL; i != v35; ++i)
  {
    if ((v34 & 0xC000000000000001LL) != 0) {
      id v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v34);
    }
    else {
      id v37 = *(id *)(v34 + 8 * i + 32);
    }
    os_log_type_t v21 = v37;
    a21(v37, v31);
  }

LABEL_9:
  swift_bridgeObjectRelease();
  if (v29)
  {
    uint64_t v38 = v29;
    uint64_t v54 = *(void *)(v33 + 40);
    uint64_t v39 = sub_100009ACC(v26, 32LL);
    *(void *)(v39 + sub_100019D10(v0 + 16) = v29;
    uint64_t v40 = v57;
    *(void *)(v39 + 24) = v57;
    v58[5] = v55;
    v58[6] = v39;
    v58[1] = _NSConcreteStackBlock;
    v58[2] = 1107296256LL;
    v58[3] = sub_1000D2F18;
    v58[4] = v56;
    sub_1000271DC();
    uint64_t v55 = sub_1000270FC();
    uint64_t v56 = v52;
    uint64_t v53 = v38;
    sub_10002711C();
    __chkstk_darwin(v41);
    sub_1000270AC();
    uint64_t v42 = swift_retain_n(v40, 2LL);
    static DispatchQoS.unspecified.getter(v42);
    uint64_t v43 = sub_100009C54();
    v52[1] = v52;
    uint64_t v44 = *(void *)(v43 - 8);
    __chkstk_darwin(v43);
    Swift::String v46 = (char *)v52 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    v58[0] = _swiftEmptyArrayStorage;
    sub_10000BCF8( (unint64_t *)&qword_1001D2B80,  v47,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v49 = v48;
    uint64_t v50 = sub_1000271C4();
    sub_1000271BC((unint64_t *)&qword_1001D2B90);
    dispatch thunk of SetAlgebra.init<A>(_:)(v58, v50, v51, v43, v49);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v26, v46, v21);
    sub_1000271B4();
    sub_10000A65C(v53, v40);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v43);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v26, v55);
    sub_1000271CC();
  }

  sub_100009AA0();
}

  sub_10006B494();
}

  sub_10001449C();
  return v10;
}

  sub_10002716C();
}

  swift_unknownObjectRelease();
  return v9;
}

  sub_10010117C();
}

  sub_10010117C();
}

  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_100022840()
{
  uint64_t v1 = v0;
  unsigned __int8 v3 = v2;
  uint64_t v5 = v4;
  if (qword_1001D0530 != -1) {
    swift_once(&qword_1001D0530, sub_1000344F0);
  }
  uint64_t v6 = sub_100010ED4();
  uint64_t v7 = sub_1000093D0(v6, (uint64_t)qword_1001EDC60);
  uint64_t v8 = static os_log_type_t.default.getter(v7);
  os_log_type_t v9 = v8;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v8);
  if (os_log_type_enabled(v10, v9))
  {
    uint64_t v11 = (uint8_t *)sub_100009B20(2LL);
    *(_WORD *)uint64_t v11 = 0;
    sub_10001447C((void *)&_mh_execute_header, v10, v9, "ECC: removing engagement", v11);
    sub_100010C34((uint64_t)v11);
  }

  uint64_t v12 = sub_10001085C(v5, (SEL *)&selRef_title);
  if (v13)
  {
    uint64_t v14 = v12;
    uint64_t v15 = v13;
    uint64_t v16 = sub_100025FAC(v5);
    if (v17 >> 60 == 15)
    {
      uint64_t v18 = static os_log_type_t.default.getter(v16);
      os_log_type_t v19 = v18;
      os_log_type_t v20 = (os_log_s *)Logger.logObject.getter(v18);
      if (os_log_type_enabled(v20, v19))
      {
        os_log_type_t v21 = (uint8_t *)sub_100009B20(2LL);
        *(_WORD *)os_log_type_t v21 = 0;
        sub_10001447C((void *)&_mh_execute_header, v20, v19, "ECC: engagement does not have local data", v21);
        sub_100010C34((uint64_t)v21);
      }

      sub_1000272CC();
      sub_100027138(0xD000000000000059LL, 0x800000010016B960LL);
      if (v1)
      {
        sub_100010D88();
        sub_100009AA0();
        swift_bridgeObjectRelease();
        return;
      }

      uint64_t v35 = sub_10000941C(&qword_1001D1AF8);
      uint64_t inited = swift_initStackObject(v35, v44);
      *(_OWORD *)(inited + sub_100019D10(v0 + 16) = xmmword_10015C800;
      *(void *)(inited + sub_10000BDD4(v0 + 56) = &type metadata for Int;
      *(void *)(inited + 64) = &protocol witness table for Int;
      *(void *)(inited + swift_unknownObjectWeakDestroy(v0 + 32) = v3;
      *(void *)(inited + 96) = &type metadata for String;
      *(void *)(inited + 104) = &protocol witness table for String;
      *(void *)(inited + 72) = v14;
      *(void *)(inited + 80) = v15;
      signed int v37 = [v5 type];
      *(void *)(inited + 136) = &type metadata for Int;
      *(void *)(inited + 144) = &protocol witness table for Int;
      *(void *)(inited + 112) = v37;
      SQLiteStatement.bind(_:)(inited);
      swift_setDeallocating(inited);
      sub_1000BC730();
      sub_1000272C4();
      sub_10002712C(v45);
      SQLiteStatement.execute()();
      if (v40) {
        sub_100010D88();
      }
    }

    else
    {
      uint64_t v26 = v16;
      unint64_t v27 = v17;
      uint64_t v28 = swift_bridgeObjectRelease();
      uint64_t v29 = static os_log_type_t.default.getter(v28);
      os_log_type_t v30 = v29;
      uint64_t v31 = (os_log_s *)Logger.logObject.getter(v29);
      if (os_log_type_enabled(v31, v30))
      {
        uint64_t v32 = (uint8_t *)sub_100009B20(2LL);
        *(_WORD *)uint64_t v32 = 0;
        sub_10001447C((void *)&_mh_execute_header, v31, v30, "ECC: engagement has local data", v32);
        sub_100010C34((uint64_t)v32);
      }

      sub_1000272CC();
      sub_100027138(0xD00000000000004CLL, 0x800000010016B9C0LL);
      if (v1)
      {
        sub_100010D88();
        sub_100009AA0();
        sub_100010A1C(v33, v34);
        return;
      }

      uint64_t v38 = sub_10000941C(&qword_1001D1AF8);
      uint64_t v39 = swift_initStackObject(v38, v43);
      *(_OWORD *)(v39 + sub_100019D10(v0 + 16) = xmmword_10015D580;
      *(void *)(v39 + sub_10000BDD4(v0 + 56) = &type metadata for Int;
      *(void *)(v39 + 64) = &protocol witness table for Int;
      *(void *)(v39 + swift_unknownObjectWeakDestroy(v0 + 32) = v3;
      *(void *)(v39 + 96) = &type metadata for Data;
      *(void *)(v39 + 104) = &protocol witness table for Data;
      *(void *)(v39 + 72) = v26;
      *(void *)(v39 + 80) = v27;
      sub_100014244(v26, v27);
      SQLiteStatement.bind(_:)(v39);
      swift_setDeallocating(v39);
      sub_1000BC730();
      sub_1000272C4();
      sub_10002712C(v45);
      SQLiteStatement.execute()();
      if (v41) {
        sub_100010D88();
      }
      sub_1000272B8();
    }

    swift_release();
    __int128 v47 = v46;
    sub_100025EAC((uint64_t)&v47);
    sub_100009AA0();
  }

  else
  {
    oslog = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v23 = static os_log_type_t.error.getter(oslog, v22);
    if (os_log_type_enabled(oslog, v23))
    {
      uint64_t v24 = (uint8_t *)sub_100009B20(2LL);
      *(_WORD *)uint64_t v24 = 0;
      sub_10001447C((void *)&_mh_execute_header, oslog, v23, "ECC: suggestion string is missing", v24);
      sub_100010C34((uint64_t)v24);
    }

    sub_100009AA0();
  }

uint64_t sub_100022CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_1000272AC();
  if ((sub_100025C8C(v5, v6) & 1) != 0)
  {
    swift_bridgeObjectRetain(a2);
  }

  else
  {
    sub_1000272AC();
    Swift::String v7 = String.lowercased()();
    static Locale.current.getter(v7._countAndFlagsBits, v7._object);
    uint64_t v8 = type metadata accessor for Locale(0LL);
    sub_100009654(v2, 0LL, 1LL, v8);
    unint64_t v9 = sub_1000106CC();
    StringProtocol.folding(options:locale:)(128LL, v2, &type metadata for String, v9);
    sub_100019C1C(v2, &qword_1001D1B00);
    swift_bridgeObjectRelease();
    StringProtocol.decomposedStringWithCompatibilityMapping.getter(&type metadata for String, v9);
    swift_bridgeObjectRelease();
  }

  return sub_1000272AC();
}

uint64_t sub_100022DF4(uint64_t a1, void *a2)
{
  id v60 = a2;
  uint64_t v61 = a1;
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10002396C();
  __n128 v62 = v8;
  uint64_t v63 = v7;
  v65[0] = 0LL;
  v65[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(746LL);
  v9._uint64_t countAndFlagsBits = 0xD000000000000092LL;
  v9._object = (void *)0x800000010016C240LL;
  String.append(_:)(v9);
  Date.init(timeIntervalSinceNow:)(-3600.0);
  sub_10001D418((uint64_t)v6);
  unint64_t v11 = v10;
  uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v6, v3);
  unint64_t v64 = v11;
  v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0xD000000000000016LL;
  v14._object = (void *)0x800000010016C2E0LL;
  uint64_t v59 = (void *)0x800000010016C2E0LL;
  String.append(_:)(v14);
  [a2 weightLast1hour];
  Double.write<A>(to:)( v65,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v15._uint64_t countAndFlagsBits = 0xD000000000000024LL;
  v15._object = (void *)0x800000010016C300LL;
  String.append(_:)(v15);
  Date.init(timeIntervalSinceNow:)(-86400.0);
  sub_10001D418((uint64_t)v6);
  unint64_t v17 = v16;
  uint64_t v18 = v3;
  v12(v6, v3);
  unint64_t v64 = v17;
  v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0xD000000000000016LL;
  v20._object = (void *)0x800000010016C2E0LL;
  String.append(_:)(v20);
  id v21 = v60;
  [v60 weightLast1day];
  Double.write<A>(to:)( v65,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v22._uint64_t countAndFlagsBits = 0xD000000000000024LL;
  v22._object = (void *)0x800000010016C300LL;
  String.append(_:)(v22);
  Date.init(timeIntervalSinceNow:)(-604800.0);
  sub_10001D418((uint64_t)v6);
  unint64_t v24 = v23;
  v12(v6, v18);
  id v25 = v12;
  unint64_t v64 = v24;
  v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 0xD000000000000016LL;
  uint64_t v28 = v59;
  v27._object = v59;
  String.append(_:)(v27);
  [v21 weightLast1week];
  Double.write<A>(to:)( v65,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v29._uint64_t countAndFlagsBits = 0xD000000000000024LL;
  v29._object = (void *)0x800000010016C300LL;
  String.append(_:)(v29);
  Date.init(timeIntervalSinceNow:)(-2592000.0);
  sub_10001D418((uint64_t)v6);
  unint64_t v31 = v30;
  v25(v6, v18);
  unint64_t v64 = v31;
  v32._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._uint64_t countAndFlagsBits = 0xD000000000000016LL;
  v33._object = v28;
  String.append(_:)(v33);
  [v21 weightLast1month];
  Double.write<A>(to:)( v65,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v34._uint64_t countAndFlagsBits = 0xD000000000000024LL;
  v34._object = (void *)0x800000010016C300LL;
  String.append(_:)(v34);
  Date.init(timeIntervalSinceNow:)(-31536000.0);
  sub_10001D418((uint64_t)v6);
  unint64_t v36 = v35;
  v25(v6, v18);
  unint64_t v64 = v36;
  v37._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._uint64_t countAndFlagsBits = 0xD000000000000016LL;
  v38._object = v28;
  String.append(_:)(v38);
  [v21 weightAll];
  Double.write<A>(to:)( v65,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v39._uint64_t countAndFlagsBits = 0xD000000000000032LL;
  v39._object = (void *)0x800000010016C330LL;
  String.append(_:)(v39);
  [v21 weightMostRecent];
  Double.write<A>(to:)( v65,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v40._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v40._object = (void *)0x800000010016C370LL;
  String.append(_:)(v40);
  unint64_t v64 = sub_10001D358();
  v41._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  v42._uint64_t countAndFlagsBits = 0xD0000000000000B0LL;
  v42._object = (void *)0x800000010016C390LL;
  String.append(_:)(v42);
  uint64_t v43 = v61;
  unint64_t v64 = *(unsigned __int8 *)(v61 + 16);
  v44._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  v45._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  v45._object = (void *)0x800000010016C450LL;
  String.append(_:)(v45);
  if (*(_BYTE *)(v43 + 33)) {
    uint64_t v46 = 0x65707974202CLL;
  }
  else {
    uint64_t v46 = 0LL;
  }
  if (*(_BYTE *)(v43 + 33)) {
    unint64_t v47 = 0xE600000000000000LL;
  }
  else {
    unint64_t v47 = 0xE000000000000000LL;
  }
  unint64_t v48 = v47;
  String.append(_:)(*(Swift::String *)&v46);
  swift_bridgeObjectRelease();
  v49._uint64_t countAndFlagsBits = 32LL;
  v49._object = (void *)0xE100000000000000LL;
  String.append(_:)(v49);
  if (*(_BYTE *)(v43 + 34)) {
    uint64_t v50 = 0x5F6369706F74202CLL;
  }
  else {
    uint64_t v50 = 0LL;
  }
  if (*(_BYTE *)(v43 + 34)) {
    unint64_t v51 = 0xEC00000061746164LL;
  }
  else {
    unint64_t v51 = 0xE000000000000000LL;
  }
  unint64_t v52 = v51;
  String.append(_:)(*(Swift::String *)&v50);
  swift_bridgeObjectRelease();
  v53._uint64_t countAndFlagsBits = 10LL;
  v53._object = (void *)0xE100000000000000LL;
  String.append(_:)(v53);
  v54._uint64_t countAndFlagsBits = v63;
  v54._object = v62;
  String.append(_:)(v54);
  swift_bridgeObjectRelease();
  v55._uint64_t countAndFlagsBits = 0xD000000000000025LL;
  v55._object = (void *)0x800000010016C470LL;
  String.append(_:)(v55);
  unint64_t v64 = *(void *)(v43 + 24);
  v56._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  v57._uint64_t countAndFlagsBits = 59LL;
  v57._object = (void *)0xE100000000000000LL;
  String.append(_:)(v57);
  return v65[0];
}

uint64_t sub_100023434(uint64_t a1, id a2)
{
  if (v4 > 0.0) {
    [a2 paramV];
  }
  [a2 windowBucket];
  if (v5 > 0.0) {
    [a2 windowBucket];
  }
  sub_10002396C();
  uint64_t v37 = v6;
  uint64_t v8 = v7;
  v38[0] = 0LL;
  v38[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(692LL);
  v9._uint64_t countAndFlagsBits = 0xD00000000000007ALL;
  v9._object = (void *)0x800000010016BF50LL;
  String.append(_:)(v9);
  [a2 paramK];
  Double.write<A>(to:)( v38,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v10._uint64_t countAndFlagsBits = 0xD000000000000012LL;
  v10._object = (void *)0x800000010016BFD0LL;
  String.append(_:)(v10);
  [a2 paramK];
  Double.write<A>(to:)( v38,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v11._uint64_t countAndFlagsBits = 2108704LL;
  v11._object = (void *)0xE300000000000000LL;
  String.append(_:)(v11);
  [a2 paramA];
  Double.write<A>(to:)( v38,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v12._uint64_t countAndFlagsBits = 0xD000000000000027LL;
  v12._object = (void *)0x800000010016BFF0LL;
  String.append(_:)(v12);
  [a2 paramC];
  Double.write<A>(to:)( v38,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v13._uint64_t countAndFlagsBits = 0xD000000000000013LL;
  v13._object = (void *)0x800000010016C020LL;
  String.append(_:)(v13);
  [a2 paramQ];
  Double.write<A>(to:)( v38,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v14._object = (void *)0x800000010016C040LL;
  v14._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v14);
  [a2 paramB];
  Double.write<A>(to:)( v38,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v15._uint64_t countAndFlagsBits = 0xD000000000000031LL;
  v15._object = (void *)0x800000010016C060LL;
  String.append(_:)(v15);
  sub_10001D358();
  v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 539959337LL;
  v17._object = (void *)0xE400000000000000LL;
  String.append(_:)(v17);
  Double.write<A>(to:)( v38,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v18._object = (void *)0x800000010016C0A0LL;
  v18._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v18);
  [a2 paramM];
  Double.write<A>(to:)( v38,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v19._uint64_t countAndFlagsBits = 0xD00000000000003ALL;
  v19._object = (void *)0x800000010016C0C0LL;
  String.append(_:)(v19);
  Double.write<A>(to:)( v38,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v20._uint64_t countAndFlagsBits = 0xD0000000000000C5LL;
  v20._object = (void *)0x800000010016C100LL;
  String.append(_:)(v20);
  v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._object = (void *)0x800000010016BF00LL;
  v22._uint64_t countAndFlagsBits = 0xD000000000000018LL;
  String.append(_:)(v22);
  if (*(_BYTE *)(a1 + 33)) {
    uint64_t v23 = 0x65707974202CLL;
  }
  else {
    uint64_t v23 = 0LL;
  }
  if (*(_BYTE *)(a1 + 33)) {
    unint64_t v24 = 0xE600000000000000LL;
  }
  else {
    unint64_t v24 = 0xE000000000000000LL;
  }
  unint64_t v25 = v24;
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = 32LL;
  v26._object = (void *)0xE100000000000000LL;
  String.append(_:)(v26);
  if (*(_BYTE *)(a1 + 34)) {
    uint64_t v27 = 0x5F6369706F74202CLL;
  }
  else {
    uint64_t v27 = 0LL;
  }
  if (*(_BYTE *)(a1 + 34)) {
    unint64_t v28 = 0xEC00000061746164LL;
  }
  else {
    unint64_t v28 = 0xE000000000000000LL;
  }
  unint64_t v29 = v28;
  String.append(_:)(*(Swift::String *)&v27);
  swift_bridgeObjectRelease();
  v30._object = (void *)0x800000010016C1D0LL;
  v30._uint64_t countAndFlagsBits = 0xD000000000000018LL;
  String.append(_:)(v30);
  [a2 minCount];
  v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._uint64_t countAndFlagsBits = v37;
  v32._object = v8;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v33._object = (void *)0x800000010016C1F0LL;
  String.append(_:)(v33);
  v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._uint64_t countAndFlagsBits = 59LL;
  v35._object = (void *)0xE100000000000000LL;
  String.append(_:)(v35);
  return v38[0];
}

void sub_10002396C()
{
  Swift::Int v3 = v2;
  uint64_t v5 = v4;
  sub_10000941C(&qword_1001D32B0);
  sub_100027160();
  __chkstk_darwin(v6);
  sub_100019EB4();
  uint64_t v7 = sub_100010E34();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100009B54();
  uint64_t v9 = sub_1000271D4();
  sub_100026490(v5 + *(int *)(v9 + 40), v0);
  if (sub_100010708(v0, 1LL, v7) == 1)
  {
    sub_100019C1C(v0, &qword_1001D32B0);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v1, v0, v7);
    _StringGuts.grow(_:)(v3);
    swift_bridgeObjectRelease();
    sub_10001D418(v1);
    v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    String.append(_:)(v10);
    sub_1000110A8();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v7);
  }

  sub_100009AA0();
}

void sub_100023AC8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v39[1] = 0LL;
  v39[2] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(206LL);
  v7._uint64_t countAndFlagsBits = 0xD0000000000000CCLL;
  v7._object = (void *)0x800000010016BE00LL;
  String.append(_:)(v7);
  uint64_t v38 = *(unsigned __int8 *)(a1 + 16);
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for ECCQuery(0LL);
  swift_retain(*(void *)(v1 + 16));
  double v10 = sub_10004A3E8();
  swift_release();
  Date.init(timeIntervalSinceNow:)(-v10);
  if (qword_1001D0530 != -1) {
    swift_once(&qword_1001D0530, sub_1000344F0);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = sub_1000093D0(v11, (uint64_t)qword_1001EDC60);
  os_log_type_t v13 = static os_log_type_t.default.getter(v12);
  uint64_t v14 = swift_retain(v1);
  Swift::String v15 = (os_log_s *)Logger.logObject.getter(v14);
  BOOL v16 = os_log_type_enabled(v15, v13);
  uint64_t v36 = v4;
  if (v16)
  {
    Swift::String v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v35 = v3;
    *(_DWORD *)Swift::String v17 = 134217984;
    swift_retain(*(void *)(v1 + 16));
    double v18 = sub_10004A3E8();
    swift_release();
    uint64_t v38 = *(void *)&v18;
    uint64_t v3 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v17 + 4);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v15, v13, "ZKW current cache expiration is: %f", v17, 0xCu);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {

    swift_release();
  }

  uint64_t v38 = 0LL;
  v39[0] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(34LL);
  uint64_t v19 = swift_bridgeObjectRelease();
  uint64_t v38 = 0xD000000000000020LL;
  v39[0] = 0x800000010016BF20LL;
  double v20 = Date.timeIntervalSinceReferenceDate.getter(v19);
  if ((~*(void *)&v20 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }

  if (v20 <= -1.0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  if (v20 >= 1.84467441e19)
  {
LABEL_28:
    __break(1u);
    return;
  }

  unint64_t v37 = (unint64_t)v20;
  v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = v38;
  v22._object = (void *)v39[0];
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v6, v3);
LABEL_11:
  if (*(_BYTE *)(a1 + *(int *)(v9 + 48)) == 1)
  {
    uint64_t v38 = 0LL;
    v39[0] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(29LL);
    swift_bridgeObjectRelease();
    uint64_t v38 = 0xD000000000000018LL;
    v39[0] = 0x800000010016BF00LL;
    if (*(_BYTE *)(a1 + 33)) {
      uint64_t v23 = 0x65707974202CLL;
    }
    else {
      uint64_t v23 = 0LL;
    }
    if (*(_BYTE *)(a1 + 33)) {
      unint64_t v24 = 0xE600000000000000LL;
    }
    else {
      unint64_t v24 = 0xE000000000000000LL;
    }
    unint64_t v25 = v24;
    String.append(_:)(*(Swift::String *)&v23);
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 32LL;
    v26._object = (void *)0xE100000000000000LL;
    String.append(_:)(v26);
    if (*(_BYTE *)(a1 + 34)) {
      uint64_t v27 = 0x5F6369706F74202CLL;
    }
    else {
      uint64_t v27 = 0LL;
    }
    if (*(_BYTE *)(a1 + 34)) {
      unint64_t v28 = 0xEC00000061746164LL;
    }
    else {
      unint64_t v28 = 0xE000000000000000LL;
    }
    unint64_t v29 = v28;
    String.append(_:)(*(Swift::String *)&v27);
    swift_bridgeObjectRelease();
    v30._uint64_t countAndFlagsBits = v38;
    v30._object = (void *)v39[0];
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
  }

  uint64_t v38 = 0LL;
  v39[0] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(48LL);
  swift_bridgeObjectRelease();
  uint64_t v38 = 0xD00000000000002DLL;
  v39[0] = 0x800000010016BED0LL;
  unint64_t v37 = *(void *)(a1 + 24);
  v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._uint64_t countAndFlagsBits = 59LL;
  v32._object = (void *)0xE100000000000000LL;
  String.append(_:)(v32);
  v33._uint64_t countAndFlagsBits = v38;
  v33._object = (void *)v39[0];
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
}

uint64_t sub_100023F6C(uint64_t a1)
{
  uint64_t v3 = v1;
  id v5 = *v1;
  uint64_t v6 = type metadata accessor for Client(0LL);
  __chkstk_darwin(v6);
  Swift::String v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v13 = v3[4];
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_16:
    swift_once(&qword_1001D0530, sub_1000344F0);
    goto LABEL_8;
  }

  id v59 = v5;
  Swift::String v15 = (os_unfair_lock_s *)*((void *)v3[6] + 2);
  swift_retain(v3);
  os_unfair_lock_lock(v15);
  id v16 = v3[8];
  id v17 = v3[7];
  id v18 = v16;
  os_unfair_lock_unlock(v15);
  swift_release();
  uint64_t v19 = v3[3];
  char v20 = *(_BYTE *)(a1 + 16);
  id v5 = v17;
  id v2 = v18;
  swift_retain(v19);
  sub_10001CF80(v20);
  uint64_t v21 = type metadata accessor for ResourceAccessSpan(0LL);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  uint64_t v58 = sub_100041728(v19, 19, (uint64_t)v8, 0LL, 1);
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for ECCQuery(0LL) + 44)) == 1)
  {
    sub_100023AC8(a1);
  }

  else if ([v2 enabled])
  {
    uint64_t v22 = sub_100023434(a1, v2);
  }

  else
  {
    uint64_t v22 = sub_100022DF4(a1, v5);
  }

  uint64_t v65 = v22;
  unint64_t v66 = v23;
  if (qword_1001D0530 != -1) {
    goto LABEL_16;
  }
LABEL_8:
  uint64_t v24 = type metadata accessor for Logger(0LL);
  uint64_t v25 = sub_1000093D0(v24, (uint64_t)qword_1001EDC60);
  os_log_type_t v26 = static os_log_type_t.default.getter(v25);
  unint64_t v27 = v66;
  uint64_t v56 = v65;
  uint64_t v28 = swift_bridgeObjectRetain_n(v66, 2LL);
  uint64_t v57 = v25;
  unint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
  os_log_type_t v30 = v26;
  BOOL v31 = os_log_type_enabled(v29, v26);
  id v60 = v2;
  id v61 = v5;
  if (v31)
  {
    Swift::String v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v33 = swift_slowAlloc(32LL, -1LL);
    uint64_t v69 = v33;
    *(_DWORD *)Swift::String v32 = 136315138;
    swift_bridgeObjectRetain(v27);
    uint64_t v67 = sub_1000307E0(v56, v27, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v32 + 4);
    swift_bridgeObjectRelease_n(v27, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "ECC completionsForInput: %s", v32, 0xCu);
    swift_arrayDestroy(v33, 1LL);
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v27, 2LL);
  }

  uint64_t v34 = a1;
  uint64_t v35 = *(void *)a1;
  uint64_t v36 = *(void *)(a1 + 8);
  uint64_t v37 = sub_100022CE0(v35, v36);
  uint64_t v39 = v38;
  uint64_t v56 = sub_10002473C(11452399LL, 0xA300000000000000LL, v37, v38);
  id v59 = v40;
  swift_bridgeObjectRetain(v36);
  uint64_t v55 = sub_10002473C(11452399LL, 0xA300000000000000LL, v35, v36);
  uint64_t v42 = v41;
  swift_bridgeObjectRelease();
  uint64_t v43 = *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_database);
  swift_beginAccess(&v65, &v64, 0LL, 0LL);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t, void))(*(void *)v43 + 176LL))( &v67,  v65,  v66,  0LL);
  uint64_t v54 = v34;
  swift_bridgeObjectRelease();
  uint64_t v44 = sub_10000941C(&qword_1001D1AF8);
  uint64_t inited = swift_initStackObject(v44, &v62);
  *(_OWORD *)(inited + sub_100019D10(v0 + 16) = xmmword_10015D4A0;
  *(void *)(inited + sub_10000BDD4(v0 + 56) = &type metadata for String;
  *(void *)(inited + 64) = &protocol witness table for String;
  *(void *)(inited + swift_unknownObjectWeakDestroy(v0 + 32) = v35;
  *(void *)(inited + 40) = v36;
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 104) = &protocol witness table for String;
  *(void *)(inited + 72) = v55;
  *(void *)(inited + 80) = v42;
  *(void *)(inited + 136) = &type metadata for String;
  *(void *)(inited + 144) = &protocol witness table for String;
  *(void *)(inited + 112) = v37;
  *(void *)(inited + 120) = v39;
  *(void *)(inited + 176) = &type metadata for String;
  *(void *)(inited + 184) = &protocol witness table for String;
  id v46 = v59;
  *(void *)(inited + 152) = v56;
  *(void *)(inited + 160) = v46;
  swift_bridgeObjectRetain(v36);
  SQLiteStatement.bind(_:)(inited);
  swift_setDeallocating(inited);
  sub_1000BC730();
  swift_release();
  __int128 v71 = v68;
  uint64_t v47 = sub_100025EAC((uint64_t)&v71);
  __chkstk_darwin(v47);
  Swift::String v49 = v60;
  unint64_t v48 = v61;
  *(&v54 - 4) = v54;
  *(&v54 - 3) = (uint64_t)v48;
  *(&v54 - 2) = (uint64_t)v49;
  uint64_t v50 = sub_100009788(0LL, &qword_1001D44B0, &OBJC_CLASS___PAREngagedResult_ptr);
  uint64_t v52 = SQLiteStatement.compactMap<A>(_:)((uint64_t)sub_100026474, (uint64_t)(&v54 - 6), v50);
  swift_release();
  v63[0] = v70;
  sub_100025EAC((uint64_t)v63);
  else {
    char v53 = 57;
  }
  *(_BYTE *)(v58 + qword_1001D2E88) = v53;
  sub_100042D10();
  swift_release();

  return v52;
}

uint64_t sub_10002473C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v6 = a3;
  uint64_t v7 = a4;
  swift_bridgeObjectRetain(a4);
  uint64_t v6 = String.init<A>(_:)( &v6,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v7 = v4;
  String.append<A>(contentsOf:)(v8, &type metadata for String, &protocol witness table for String);
  return v6;
}

void sub_1000247B8(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, double a4@<X3>, void *a5@<X8>)
{
  uint64_t v12 = type metadata accessor for Date(0LL);
  id v13 = *(void (***)(void, void))(v12 - 8);
  __chkstk_darwin(v12);
  Swift::String v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  SQLiteRow.get<A>(at:type:)(0LL, (uint64_t)&type metadata for String, a1);
  if (!v5)
  {
    id v55 = a3;
    unint64_t v16 = v60;
    if (!v60)
    {
      id v13 = 0LL;
LABEL_7:
      *a5 = v13;
      return;
    }

    uint64_t v54 = a2;
    double v17 = a4;
    double v18 = v59;
    SQLiteRow.get<A>(at:type:)(1LL, (uint64_t)&type metadata for Int, a1);
    uint64_t v52 = a5;
    uint64_t v53 = *(void *)&v18;
    uint64_t v19 = *(void *)&v59;
    if (*(uint64_t *)&v59 < (uint64_t)0xFFFFFFFF80000000LL)
    {
      __break(1u);
    }

    else if (*(uint64_t *)&v59 <= 0x7FFFFFFF)
    {
      double v20 = v17;
      SQLiteRow.get<A>(at:type:)(2LL, (uint64_t)&type metadata for Double, a1);
      uint64_t v21 = v54;
      double v22 = v59;
      SQLiteRow.get<A>(at:type:)(3LL, (uint64_t)&type metadata for Int64, a1);
      double v51 = v20;
      uint64_t v23 = *(void *)&v59;
      SQLiteRow.get<A>(at:type:)(4LL, (uint64_t)&type metadata for Data, a1);
      uint64_t v24 = *(void *)&v59;
      if (v60 >> 60 == 15) {
        uint64_t v24 = 0LL;
      }
      uint64_t v48 = v23;
      uint64_t v49 = v24;
      unint64_t v25 = 0xC000000000000000LL;
      if (v60 >> 60 != 15) {
        unint64_t v25 = v60;
      }
      unint64_t v50 = v25;
      sub_100009788(0LL, &qword_1001D44B0, &OBJC_CLASS___PAREngagedResult_ptr);
      uint64_t v26 = swift_bridgeObjectRetain_n(v16, 2LL);
      Date.init()(v26);
      unint64_t v27 = (void *)PAREngagedResult.init(_:searchString:type:engagemementTime:)(v53, v16, v53, v16, v19, v15);
      [v27 setScore:v22];
      if ((sub_1000A47FC(v49, v50) & 1) == 0) {
        sub_1000264D8(v49, v50, v27);
      }
      Date.init(timeIntervalSinceReferenceDate:)((double)v48);
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      ((void (**)(char *, uint64_t))v13)[1](v15, v12);
      [v27 setEngagementTime:isa];

      uint64_t v29 = type metadata accessor for ECCQuery(0LL);
      id v13 = (void (**)(void, void))v27;
      double v18 = v51;
      if ((*(_BYTE *)(v21 + *(int *)(v29 + 44)) & 1) != 0)
      {
        sub_100010A30(v49, v50);
        swift_bridgeObjectRelease();
LABEL_17:
        a5 = v52;
        goto LABEL_7;
      }

      SQLiteRow.get<A>(at:type:)(5LL, (uint64_t)&type metadata for Double, a1);
      SQLiteRow.get<A>(at:type:)(6LL, (uint64_t)&type metadata for Double, a1);
      double v6 = v59;
      if (qword_1001D0530 == -1)
      {
LABEL_19:
        uint64_t v30 = type metadata accessor for Logger(0LL);
        uint64_t v31 = sub_1000093D0(v30, (uint64_t)qword_1001EDC60);
        os_log_type_t v32 = static os_log_type_t.default.getter(v31);
        uint64_t v33 = swift_bridgeObjectRetain(v16);
        uint64_t v54 = v31;
        uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
        os_log_type_t v35 = v32;
        if (os_log_type_enabled(v34, v32))
        {
          uint64_t v36 = swift_slowAlloc(22LL, -1LL);
          *(double *)&uint64_t v37 = COERCE_DOUBLE(swift_slowAlloc(32LL, -1LL));
          double v59 = *(double *)&v37;
          *(_DWORD *)uint64_t v36 = 136643075;
          swift_bridgeObjectRetain(v16);
          uint64_t v56 = sub_1000307E0(v53, v16, (uint64_t *)&v59);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v36 + 4);
          swift_bridgeObjectRelease_n(v16, 3LL);
          *(_WORD *)(v36 + 12) = 2048;
          swift_beginAccess(&v61, &v56, 0LL, 0LL);
          double v58 = v61;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v36 + 14);
          _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "ECC completion found: %{sensitive}s %f",  (uint8_t *)v36,  0x16u);
          swift_arrayDestroy(v37, 1LL);
          swift_slowDealloc(v37, -1LL, -1LL);
          swift_slowDealloc(v36, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v16, 2LL);
        }

        a5 = v52;
        swift_beginAccess(&v61, &v59, 0LL, 0LL);
        double v38 = v61;
        id v39 = v55;
        id v40 = [v55 weightMinThresholdToSend];
        if (v41 <= v38)
        {
          [v13 setFreshnessScore:v38];
          sub_100010A30(v49, v50);
          goto LABEL_7;
        }

        os_log_type_t v42 = static os_log_type_t.default.getter(v40);
        id v43 = v39;
        uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
        if (os_log_type_enabled(v44, v42))
        {
          uint64_t v45 = swift_slowAlloc(22LL, -1LL);
          *(_DWORD *)uint64_t v45 = 134218240;
          double v58 = v61;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v45 + 4);
          *(_WORD *)(v45 + 12) = 2048;
          [v43 weightMinThresholdToSend];
          double v58 = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v45 + 14);

          _os_log_impl( (void *)&_mh_execute_header,  v44,  v42,  "ECC completion freshness score < MinThresholdToSend, %f < %f, dropping",  (uint8_t *)v45,  0x16u);
          swift_slowDealloc(v45, -1LL, -1LL);

          sub_100010A30(v49, v50);
        }

        else
        {
          sub_100010A30(v49, v50);
        }

        id v13 = 0LL;
        goto LABEL_17;
      }

uint64_t sub_100024E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 16;
  uint64_t v5 = sub_100023F6C(a3);
  swift_beginAccess(v4, v7, 1LL, 0LL);
  *(void *)(a1 + sub_100019D10(v0 + 16) = v5;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100024EDC(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5)
{
  void (*v8)(uint64_t *__return_ptr, unint64_t, unint64_t, uint64_t);
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v16;
  _BYTE v17[120];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  if ((a1 & 0x100000000LL) != 0)
  {
    v8(&v18, 0xD00000000000004CLL, 0x800000010016BC00LL, 1LL);
    uint64_t v12 = sub_10000941C(&qword_1001D1AF8);
    uint64_t inited = swift_initStackObject(v12, v17);
    *(_OWORD *)(inited + sub_100019D10(v0 + 16) = xmmword_10015D580;
    *(void *)(inited + sub_10000BDD4(v0 + 56) = &type metadata for Int;
    *(void *)(inited + 64) = &protocol witness table for Int;
    *(void *)(inited + swift_unknownObjectWeakDestroy(v0 + 32) = a3;
    *(void *)(inited + 96) = &type metadata for String;
    *(void *)(inited + 104) = &protocol witness table for String;
    *(void *)(inited + 72) = a4;
    *(void *)(inited + 80) = a5;
    swift_bridgeObjectRetain(a5);
    SQLiteStatement.bind(_:)(inited);
    swift_setDeallocating(inited);
  }

  else
  {
    uint64_t v9 = a1;
    v8(&v18, 0xD000000000000059LL, 0x800000010016B960LL, 1LL);
    uint64_t v10 = sub_10000941C(&qword_1001D1AF8);
    uint64_t v11 = swift_initStackObject(v10, &v16);
    *(_OWORD *)(v11 + sub_100019D10(v0 + 16) = xmmword_10015C800;
    *(void *)(v11 + sub_10000BDD4(v0 + 56) = &type metadata for Int;
    *(void *)(v11 + 64) = &protocol witness table for Int;
    *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 32) = a3;
    *(void *)(v11 + 96) = &type metadata for String;
    *(void *)(v11 + 104) = &protocol witness table for String;
    *(void *)(v11 + 72) = a4;
    *(void *)(v11 + 80) = a5;
    *(void *)(v11 + 136) = &type metadata for Int;
    *(void *)(v11 + 144) = &protocol witness table for Int;
    *(void *)(v11 + 112) = v9;
    swift_bridgeObjectRetain(a5);
    SQLiteStatement.bind(_:)(v11);
    swift_setDeallocating(v11);
  }

  sub_1000BC730();
  swift_release();
  double v22 = v19;
  sub_100025EAC((uint64_t)&v22);
  SQLiteStatement.execute()();
  if (v14) {
    swift_errorRelease(v14);
  }
  swift_release();
  uint64_t v21 = v20;
  return sub_100025EAC((uint64_t)&v21);
}

uint64_t sub_100025168( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v60 = a6;
  uint64_t v61 = a1;
  uint64_t v64 = a3;
  uint64_t v65 = a5;
  uint64_t v62 = a4;
  uint64_t v63 = a2;
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v76 = 0LL;
  *(void *)&__int128 v77 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(365LL);
  v10._uint64_t countAndFlagsBits = 0xD000000000000048LL;
  v10._object = (void *)0x800000010016BC50LL;
  String.append(_:)(v10);
  Date.init(timeIntervalSinceNow:)(-3600.0);
  sub_10001D418((uint64_t)v9);
  uint64_t v12 = v11;
  id v13 = *(void (**)(char *, uint64_t))(v7 + 8);
  v13(v9, v6);
  v75[0] = v12;
  v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._object = (void *)0x800000010016BCA0LL;
  v15._uint64_t countAndFlagsBits = 0xD000000000000021LL;
  String.append(_:)(v15);
  Date.init(timeIntervalSinceNow:)(-86400.0);
  sub_10001D418((uint64_t)v9);
  uint64_t v17 = v16;
  v13(v9, v6);
  v75[0] = v17;
  v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = 0xD000000000000022LL;
  v19._object = (void *)0x800000010016BCD0LL;
  String.append(_:)(v19);
  Date.init(timeIntervalSinceNow:)(-604800.0);
  sub_10001D418((uint64_t)v9);
  uint64_t v21 = v20;
  v13(v9, v6);
  v75[0] = v21;
  v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._object = (void *)0x800000010016BD00LL;
  v23._uint64_t countAndFlagsBits = 0xD000000000000021LL;
  String.append(_:)(v23);
  Date.init(timeIntervalSinceNow:)(-2592000.0);
  sub_10001D418((uint64_t)v9);
  uint64_t v25 = v24;
  v13(v9, v6);
  v75[0] = v25;
  v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._object = (void *)0x800000010016BD30LL;
  v27._uint64_t countAndFlagsBits = 0xD000000000000021LL;
  String.append(_:)(v27);
  Date.init(timeIntervalSinceNow:)(-31536000.0);
  sub_10001D418((uint64_t)v9);
  uint64_t v29 = v28;
  v13(v9, v6);
  v75[0] = v29;
  v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = 0xD00000000000007FLL;
  v31._object = (void *)0x800000010016BD60LL;
  String.append(_:)(v31);
  v75[0] = v61;
  v32._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  v33._object = (void *)0x800000010016BDE0LL;
  String.append(_:)(v33);
  uint64_t v34 = v76;
  uint64_t v35 = v77;
  uint64_t v37 = v63;
  uint64_t v36 = v64;
  uint64_t v38 = sub_100022CE0(v63, v64);
  uint64_t v40 = v39;
  uint64_t v61 = sub_10002473C(11452399LL, 0xA300000000000000LL, v38, v39);
  uint64_t v42 = v41;
  uint64_t v43 = sub_10002473C(11452399LL, 0xA300000000000000LL, v37, v36);
  uint64_t v45 = v44;
  uint64_t v46 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for Double,  &protocol witness table for String);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, void))(**(void **)(v62
                                                                                        + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_database)
                                                                          + 176LL))( &v71,  v34,  v35,  0LL);
  uint64_t v58 = v45;
  uint64_t v59 = v40;
  uint64_t v62 = v42;
  uint64_t v57 = v46;
  swift_bridgeObjectRelease();
  uint64_t v78 = &type metadata for String;
  uint64_t v79 = &protocol witness table for String;
  uint64_t v76 = v63;
  *(void *)&__int128 v77 = v64;
  swift_bridgeObjectRetain(v64);
  SQLiteStatement.bind(_:at:)(&v76, 1LL, (uint64_t)v73);
  swift_release();
  __int128 v83 = v72;
  sub_100025EAC((uint64_t)&v83);
  sub_1000108B8(&v76);
  uint64_t v78 = &type metadata for String;
  uint64_t v79 = &protocol witness table for String;
  uint64_t v76 = v43;
  *(void *)&__int128 v77 = v58;
  SQLiteStatement.bind(_:at:)(&v76, 2LL, (uint64_t)v74);
  uint64_t v47 = v62;
  uint64_t v48 = v59;
  swift_release();
  __int128 v82 = *(_OWORD *)&v73[8];
  sub_100025EAC((uint64_t)&v82);
  sub_1000108B8(&v76);
  uint64_t v78 = &type metadata for String;
  uint64_t v79 = &protocol witness table for String;
  uint64_t v76 = v38;
  *(void *)&__int128 v77 = v48;
  SQLiteStatement.bind(_:at:)(&v76, 3LL, (uint64_t)v75);
  uint64_t v53 = v65;
  swift_release();
  __int128 v81 = *(_OWORD *)&v74[8];
  sub_100025EAC((uint64_t)&v81);
  sub_1000108B8(&v76);
  uint64_t v67 = &type metadata for String;
  __int128 v68 = &protocol witness table for String;
  *(void *)&__int128 v66 = v61;
  *((void *)&v66 + 1) = v47;
  SQLiteStatement.bind(_:at:)(&v66, 4LL, (uint64_t)&v76);
  swift_release();
  __int128 v80 = *(_OWORD *)&v75[1];
  sub_100025EAC((uint64_t)&v80);
  sub_1000108B8(&v66);
  uint64_t v54 = v57;
  v69[0] = v57;
  swift_bridgeObjectRetain(v57);
  uint64_t v55 = sub_10000941C(&qword_1001D1B08);
  SQLiteStatement.reduce<A>(into:handleRow:)((uint64_t)v69, v55, (uint64_t)&v70);
  swift_bridgeObjectRelease_n(v54, 2LL);
  swift_release();
  __int128 v66 = v77;
  sub_100025EAC((uint64_t)&v66);
  if (!v53) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v49 = v60;
  swift_retain(v60);
  sub_1000C0FE8();
  uint64_t v51 = v50;
  swift_bridgeObjectRelease();
  v53(v51);
  swift_bridgeObjectRelease();
  return sub_10000A65C((uint64_t)v53, v49);
}

void sub_100025A34(uint64_t a1, uint64_t a2)
{
  if (!v2)
  {
    unint64_t v4 = v17;
    if (v17)
    {
      uint64_t v5 = *(void *)&v16;
      SQLiteRow.get<A>(at:type:)(1LL, (uint64_t)&type metadata for Double, a2);
      double v6 = v16;
      if (qword_1001D0530 != -1) {
        swift_once(&qword_1001D0530, sub_1000344F0);
      }
      uint64_t v7 = type metadata accessor for Logger(0LL);
      uint64_t v8 = sub_1000093D0(v7, (uint64_t)qword_1001EDC60);
      os_log_type_t v9 = static os_log_type_t.default.getter(v8);
      uint64_t v10 = swift_bridgeObjectRetain_n(v17, 2LL);
      uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
      os_log_type_t v12 = v9;
      if (os_log_type_enabled(v11, v9))
      {
        uint64_t v13 = swift_slowAlloc(22LL, -1LL);
        uint64_t v14 = swift_slowAlloc(32LL, -1LL);
        double v16 = *(double *)&v14;
        *(_DWORD *)uint64_t v13 = 136315394;
        swift_bridgeObjectRetain(v4);
        uint64_t v15 = sub_1000307E0(v5, v4, (uint64_t *)&v16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v13 + 4);
        swift_bridgeObjectRelease_n(v4, 3LL);
        *(_WORD *)(v13 + 12) = 2048;
        uint64_t v15 = *(void *)&v6;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v13 + 14);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "ECC feature: %s %f", (uint8_t *)v13, 0x16u);
        swift_arrayDestroy(v14, 1LL);
        swift_slowDealloc(v14, -1LL, -1LL);
        swift_slowDealloc(v13, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v17, 2LL);
      }

      sub_10000F504(v5, v4, v6);
      swift_bridgeObjectRelease();
    }
  }

uint64_t sub_100025C8C(uint64_t a1, unint64_t a2)
{
  uint64_t v15 = a1 & 0xFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0LL;
  }
  uint64_t v13 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v14 = a2 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain(a2);
  uint64_t v5 = 0LL;
  uint64_t v6 = 1LL;
  while (1)
  {
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      unsigned int v9 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(v5 << 16, a1, a2);
    }

    else
    {
      if ((a2 & 0x2000000000000000LL) != 0)
      {
        v17[0] = a1;
        v17[1] = v14;
        uint64_t v7 = v17;
        uint64_t v8 = v16;
      }

      else
      {
        uint64_t v7 = (void *)v13;
        uint64_t v8 = v15;
        if ((a1 & 0x1000000000000000LL) == 0) {
          uint64_t v7 = (void *)_StringObject.sharedUTF8.getter(a1, a2);
        }
      }

      unsigned int v9 = _decodeScalar(_:startingAt:)(v7, v8, v5);
    }

    BOOL v11 = v9 - 12032 < 0xE0 || (v9 - 19968) >> 4 < 0x51B;
    if (v9 >> 7 == 93) {
      BOOL v11 = 1;
    }
    if (v9 != 12539 && v9 - 12448 < 0x60) {
      break;
    }
    if (v9 - 65382 < 0x3A) {
      BOOL v11 = 1;
    }
    if (v11 || v9 - 12352 < 0x60) {
      goto LABEL_27;
    }
    v5 += v10;
    if (v5 >= v2)
    {
      uint64_t v6 = 0LL;
      goto LABEL_27;
    }
  }

  uint64_t v6 = 1LL;
LABEL_27:
  swift_bridgeObjectRelease(a2);
  return v6;
}

unint64_t sub_100025DFC()
{
  unint64_t result = qword_1001D1AE0;
  if (!qword_1001D1AE0)
  {
    uint64_t v1 = type metadata accessor for URL(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_1001D1AE0);
  }

  return result;
}

void *sub_100025E3C()
{
  return sub_10001FB30(*(_BYTE *)(v0 + 16));
}

uint64_t sub_100025E58()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100025E78()
{
  return sub_1000204D4(*(void *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_100025E84()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100025E94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100025EA4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100025EAC(uint64_t a1)
{
  return a1;
}

void sub_100025ED4(uint64_t a1@<X1>, char *a2@<X8>)
{
}

unint64_t sub_100025EEC()
{
  unint64_t result = qword_1001D1AF0;
  if (!qword_1001D1AF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015DD48, &unk_1001B25E0);
    atomic_store(result, (unint64_t *)&qword_1001D1AF0);
  }

  return result;
}

uint64_t sub_100025F2C()
{
  return sub_10002606C(&unk_1001B2318, sub_100027088, &unk_1001B2330, sub_100022840);
}

void sub_100025F50(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_1000094A0(a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for [A], v3), a1);
  }

  sub_100009A90();
}

uint64_t sub_100025F8C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100025FAC(void *a1)
{
  id v1 = [a1 encodedNormalizedTopic];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100026010()
{
  if (*(void *)(v0 + 40)) {
    swift_release();
  }
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100026048()
{
  return sub_10002606C(&unk_1001B23B8, sub_1000260A8, &unk_1001B23D0, sub_1000215C4);
}

#error "100026098: call analysis failed (funcsize=15)"
void sub_1000260A8()
{
  uint64_t v0;
  (*(void (**)(void))(v0 + 16))(0LL);
  sub_100009A90();
}

uint64_t sub_1000260C8()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000260F0()
{
  return sub_100024EDC( *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32),  *(void *)(v0 + 24),  *(_BYTE *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48));
}

uint64_t sub_10002611C()
{
  uint64_t v1 = sub_100010E34();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  uint64_t v8 = v5 + v7 + 1;
  sub_1000271EC();
  unsigned int v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  return swift_deallocObject(v0, v8, v6);
}

void sub_1000261AC()
{
}

uint64_t sub_100026200()
{
  if (v0[6]) {
    swift_release(v0[7]);
  }
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_10002623C()
{
  return sub_100025168( *(unsigned __int8 *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void (**)(uint64_t))(v0 + 48),  *(void *)(v0 + 56));
}

uint64_t sub_100026250(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_retain(a2);
  }
  return result;
}

uint64_t type metadata accessor for ECCQuery(uint64_t a1)
{
  return sub_100018ABC(a1, qword_1001D1B80, (uint64_t)&nominal type descriptor for ECCQuery);
}

uint64_t sub_100026274@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100023F6C(*(void *)(v1 + 24));
  *a1 = result;
  return result;
}

uint64_t sub_1000262B0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000262D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ECCQuery(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100026318()
{
  uint64_t v1 = sub_1000271D4();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  sub_1000271EC();
  sub_100027198();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v4 + *(int *)(v1 + 40);
  uint64_t v7 = sub_100010E34();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1000263B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ECCQuery(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000263F8()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_1000271D4() - 8) + 80LL);
  return sub_100024E7C(*(void *)(v0 + 16), *(void *)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

unint64_t sub_100026424()
{
  unint64_t result = qword_1001D1B18;
  if (!qword_1001D1B18)
  {
    uint64_t v1 = sub_100009788(255LL, (unint64_t *)&unk_1001D4810, &OBJC_CLASS___NSError_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1001D1B18);
  }

  return result;
}

void sub_100026474(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_100026490(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001D32B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_1000264D8(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a3 setEncodedNormalizedTopic:isa];
}

void *sub_10002651C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v14);
  }

  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    *(_BYTE *)(a1 + sub_100019D10(v0 + 16) = *((_BYTE *)a2 + 16);
    *(void *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = *((_BYTE *)a2 + 32);
    *(_WORD *)(a1 + 33) = *(_WORD *)((char *)a2 + 33);
    uint64_t v9 = a3[10];
    uint64_t v10 = (void *)(a1 + v9);
    BOOL v11 = (char *)a2 + v9;
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    uint64_t v12 = type metadata accessor for Date(0LL);
    swift_bridgeObjectRetain(v8);
    if (sub_100010708((uint64_t)v11, 1LL, v12))
    {
      uint64_t v13 = sub_10000941C(&qword_1001D32B0);
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
      sub_100009654((uint64_t)v10, 0LL, 1LL, v12);
    }

    uint64_t v15 = a3[12];
    *((_BYTE *)v4 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)v4 + v15) = *((_BYTE *)a2 + v15);
    *((_BYTE *)v4 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  }

  return v4;
}

uint64_t sub_100026654(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t result = sub_100010708(v4, 1LL, v5);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  }
  return result;
}

uint64_t sub_1000266C0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  *(_BYTE *)(a1 + sub_100019D10(v0 + 16) = *((_BYTE *)a2 + 16);
  *(void *)(a1 + 24) = a2[3];
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = *((_BYTE *)a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)((char *)a2 + 33);
  uint64_t v8 = a3[10];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (char *)a2 + v8;
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  uint64_t v11 = type metadata accessor for Date(0LL);
  swift_bridgeObjectRetain(v7);
  if (sub_100010708((uint64_t)v10, 1LL, v11))
  {
    uint64_t v12 = sub_10000941C(&qword_1001D32B0);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    sub_100009654((uint64_t)v9, 0LL, 1LL, v11);
  }

  uint64_t v13 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *(_BYTE *)(a1 + v13) = *((_BYTE *)a2 + v13);
  *(_BYTE *)(a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  return a1;
}

uint64_t sub_1000267CC(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + sub_100019D10(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  uint64_t v7 = a3[10];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date(0LL);
  int v11 = sub_100010708((uint64_t)v8, 1LL, v10);
  int v12 = sub_100010708((uint64_t)v9, 1LL, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 24))(v8, v9, v10);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_10000941C(&qword_1001D32B0);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  sub_100009654((uint64_t)v8, 0LL, 1LL, v10);
LABEL_7:
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_10002693C(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + sub_100019D10(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = *(_BYTE *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  uint64_t v6 = a3[10];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date(0LL);
  if (sub_100010708((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = sub_10000941C(&qword_1001D32B0);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    sub_100009654((uint64_t)v7, 0LL, 1LL, v9);
  }

  uint64_t v11 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_100026A38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + sub_100019D10(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  uint64_t v7 = a3[10];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  uint64_t v10 = type metadata accessor for Date(0LL);
  int v11 = sub_100010708((uint64_t)v8, 1LL, v10);
  int v12 = sub_100010708((uint64_t)v9, 1LL, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_10000941C(&qword_1001D32B0);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  sub_100009654((uint64_t)v8, 0LL, 1LL, v10);
LABEL_7:
  uint64_t v15 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_100026B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100026BA0);
}

uint64_t sub_100026BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_10000941C(&qword_1001D32B0);
    return sub_100010708(a1 + *(int *)(a3 + 40), a2, v8);
  }

uint64_t sub_100026C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100026C24);
}

void sub_100026C24(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + 8) = (a2 - 1);
    sub_1000110D4();
  }

  else
  {
    uint64_t v7 = sub_10000941C(&qword_1001D32B0);
    sub_100009654(a1 + *(int *)(a4 + 40), a2, a2, v7);
  }

void sub_100026C8C(uint64_t a1)
{
  v4[0] = &unk_10015DC00;
  v4[1] = &unk_10015DC18;
  void v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = &unk_10015DC30;
  v4[4] = &unk_10015DC30;
  v4[5] = &unk_10015DC30;
  sub_100026D28(319LL);
  if (v3 <= 0x3F)
  {
    v4[6] = *(void *)(v2 - 8) + 64LL;
    v4[7] = &unk_10015DC30;
    void v4[8] = &unk_10015DC30;
    void v4[9] = &unk_10015DC30;
    swift_initStructMetadata(a1, 256LL, 10LL, v4, a1 + 16);
  }

void sub_100026D28(uint64_t a1)
{
  if (!qword_1001D3230)
  {
    uint64_t v2 = type metadata accessor for Date(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1001D3230);
    }
  }

uint64_t getEnumTagSinglePayload for CountryCodeSourceDevice(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t sub_100026DD0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100026E10 + 4 * byte_10015DA70[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100026E30 + 4 * byte_10015DA75[v4]))();
  }
}

_BYTE *sub_100026E10(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_100026E30(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_100026E38(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_100026E40(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_100026E48(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_100026E50(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void type metadata accessor for EngagedCompletionCacheError()
{
}

uint64_t getEnumTagSinglePayload for ClientSessionState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }

uint64_t _s7parsecd28EngagedCompletionCacheClientOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100026F3C + 4 * byte_10015DA7F[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100026F70 + 4 * byte_10015DA7A[v4]))();
}

uint64_t sub_100026F70(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100026F78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100026F80LL);
  }
  return result;
}

uint64_t sub_100026F8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100026F94LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100026F98(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100026FA0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EngagedCompletionSQLCache.SchemaState()
{
  return &type metadata for EngagedCompletionSQLCache.SchemaState;
}

unint64_t sub_100026FC0()
{
  unint64_t result = qword_1001D1BD8;
  if (!qword_1001D1BD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015DCB8, &type metadata for EngagedCompletionSQLCache.SchemaState);
    atomic_store(result, (unint64_t *)&qword_1001D1BD8);
  }

  return result;
}

unint64_t sub_100027000()
{
  unint64_t result = qword_1001D1BE0[0];
  if (!qword_1001D1BE0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10015DD20, &unk_1001B25E0);
    atomic_store(result, qword_1001D1BE0);
  }

  return result;
}

uint64_t sub_10002708C(uint64_t a1)
{
  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 136, v3, a1, v1, v2);
}

  ;
}

uint64_t sub_1000270C4()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v1, v2, v0);
}

uint64_t sub_1000270DC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000270EC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000270FC()
{
  return type metadata accessor for DispatchQoS(0LL);
}

  ;
}

  ;
}

uint64_t sub_10002712C(__n128 a1)
{
  *(__n128 *)(v1 - 96) = a1;
  return sub_100025EAC(v1 - 96);
}

uint64_t sub_100027138(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, 1LL);
}

uint64_t sub_100027144()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

  ;
}

uint64_t sub_100027184(uint64_t a1)
{
  *(void *)(v3 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 96, v1 + 8, v2);
}

uint64_t sub_100027198()
{
  return swift_release(*(void *)(v0 + 24));
}

uint64_t sub_1000271A0()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 88) + 8LL))(v0, *(void *)(v1 - 72));
}

void sub_1000271B4()
{
}

void sub_1000271BC(unint64_t *a1)
{
}

uint64_t sub_1000271C4()
{
  return sub_10000941C(v0);
}

uint64_t sub_1000271CC()
{
  return swift_release(*(void *)(v0 - 88));
}

uint64_t sub_1000271D4()
{
  return type metadata accessor for ECCQuery(0LL);
}

void *sub_1000271DC()
{
  return _Block_copy((const void *)(v0 - 128));
}

uint64_t sub_1000271E4(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_1000271EC()
{
  return swift_release(*(void *)(v0 + 16));
}

uint64_t sub_1000271F4(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_1000271FC()
{
  return static DispatchQoS.unspecified.getter();
}

  ;
}

uint64_t sub_100027210(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(a1, v1);
}

uint64_t sub_100027218()
{
  return static DispatchQoS.userInitiated.getter();
}

  ;
}

  ;
}

uint64_t sub_100027258()
{
  return swift_release(*(void *)(v0 - 128));
}

void sub_100027260()
{
}

uint64_t sub_100027268(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_100027270(uint64_t a1)
{
  return v2(a1, v3, v1);
}

uint64_t sub_10002727C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(a1, a2, a3, a4, a5, 0LL);
}

uint64_t sub_100027288(uint64_t a1, unint64_t a2)
{
  return sub_1000307E0(a1, a2, (uint64_t *)(v2 - 144));
}

void sub_100027294(Swift::String a1)
{
}

void sub_1000272A0()
{
  v0._uint64_t countAndFlagsBits = 59LL;
  v0._object = (void *)0xE100000000000000LL;
  String.append(_:)(v0);
}

uint64_t sub_1000272AC()
{
  return v0;
}

uint64_t sub_1000272B8()
{
  return sub_100010A1C(v1, v0);
}

uint64_t sub_1000272C4()
{
  return swift_release(*(void *)(v0 - 208));
}

  ;
}

void sub_1000272D8()
{
}

uint64_t sub_1000272E4()
{
  return swift_retain(v0);
}

uint64_t sub_1000272EC(uint64_t a1)
{
  uint64_t v2 = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 1LL, &v2, a1 + 88);
}

void *sub_100027330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4[2];
  uint64_t v10 = *(void *)(*v4 + 80LL);
  uint64_t v6 = type metadata accessor for TimedReference.State(0LL, v10, a3, a4);
  uint64_t v7 = sub_10000941C(&qword_1001D1D20);
  sub_1000BCC20((void (*)(uint64_t))sub_100027618, (uint64_t)&v9, v5, v6, v7);
  swift_release();
  return v4;
}

void *sub_1000273B0@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3 = *(void *)(*result + qword_1001D1C88);
  if (v3)
  {
    swift_retain(*(void *)(*result + qword_1001D1C88));
    sub_10000941C(&qword_1001D2B70);
    Task.cancel()();
    unint64_t result = (void *)swift_release();
  }

  *a2 = v3 == 0;
  return result;
}

uint64_t sub_100027438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_deallocClassInstance(v4, 24LL, 7LL);
}

uint64_t type metadata accessor for TimedReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimedReference);
}

void sub_100027464(uint64_t a1)
{
  v4[0] = "\b";
  sub_100027584(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    void v4[2] = &unk_10015DDF0;
    v4[3] = &unk_10015DE08;
    v4[4] = &unk_10015DE08;
    v4[5] = "\b";
    swift_initClassMetadata2(a1, 0LL, 6LL, v4, a1 + 88);
  }

uint64_t sub_1000274F4()
{
  return v0;
}

uint64_t sub_100027558()
{
  uint64_t v0 = sub_1000274F4();
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for TimedReference.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimedReference.State);
}

void sub_100027584(uint64_t a1)
{
  if (!qword_1001D1D10)
  {
    uint64_t v2 = type metadata accessor for ContinuousClock.Instant(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1001D1D10);
    }
  }

uint64_t sub_1000275D8(uint64_t a1)
{
  uint64_t v2 = sub_10000941C(&qword_1001D1D18);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_100027618@<X0>(void *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1000273B0(a1, a2);
}

uint64_t sub_100027630(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = "ZL6BUSYGB3.com.apple.news";
  if (a1 == 0xD000000000000019LL)
  {
    sub_100027D64();
    if (v24) {
      return 6LL;
    }
  }

  uint64_t v5 = 0xD000000000000020LL;
  uint64_t v6 = "ZL6BUSYGB3.com.apple.news.widget";
  if (a1 == 0xD000000000000020LL)
  {
    sub_100027D64();
    if (v24) {
      return 6LL;
    }
  }

  uint64_t v7 = 0xD00000000000001DLL;
  uint64_t v8 = "ZL6BUSYGB3.com.apple.news.tag";
  if (a1 == 0xD00000000000001DLL)
  {
    sub_100027D64();
    if (v24) {
      return 6LL;
    }
  }

  uint64_t v9 = 0xD000000000000027LL;
  uint64_t v10 = "ZL6BUSYGB3.com.apple.news.widgetintents";
  if (a1 == 0xD000000000000027LL)
  {
    sub_100027D64();
    if (v24) {
      return 6LL;
    }
  }

  uint64_t v12 = 0xD000000000000011LL;
  uint64_t v13 = "com.apple.parsecd";
  if (a1 == 0xD000000000000011LL)
  {
    sub_100027D64();
    if (v24) {
      return 7LL;
    }
  }

  uint64_t v14 = 0xD00000000000001BLL;
  uint64_t v15 = "com.apple.assistant_service";
  if (a1 == 0xD00000000000001BLL)
  {
    sub_100027D64();
    if (v24) {
      return 3LL;
    }
  }

  uint64_t v16 = 0xD00000000000001ELL;
  unint64_t v17 = "com.apple.assistant.assistantd";
  if (a1 == 0xD00000000000001ELL)
  {
    sub_100027D64();
    if (v24) {
      return 3LL;
    }
  }

  uint64_t v18 = 0xD000000000000016LL;
  Swift::String v19 = "com.apple.mobilesafari";
  if (a1 == 0xD000000000000016LL)
  {
    sub_100027D64();
    if (v24) {
      return 1LL;
    }
  }

  if (a1 == 0xD000000000000010LL)
  {
    sub_100027D64();
    if (v24) {
      return 1LL;
    }
  }

  sub_100027204();
  if ((sub_100027D54(0xD000000000000010LL, v20) & 1) != 0) {
    return 1LL;
  }
  uint64_t v21 = 0xD000000000000018LL;
  Swift::String v22 = "com.apple.mediaanalysisd";
  if (a1 == 0xD000000000000018LL)
  {
    sub_100027D64();
    if (v24) {
      return 13LL;
    }
  }

  char v23 = sub_100027D3C(v21, (uint64_t)v22);
  BOOL v24 = a2 == 0x800000010016C6A0LL && a1 == 0xD000000000000010LL;
  uint64_t result = 13LL;
  if (v24 || (v23 & 1) != 0) {
    return result;
  }
  if ((sub_100027D54(0xD000000000000010LL, 0x800000010016C6A0LL) & 1) != 0) {
    return 13LL;
  }
  uint64_t v25 = 0xD000000000000022LL;
  Swift::String v26 = "com.apple.VisualIntelligenceCamera";
  if (a1 == 0xD000000000000022LL)
  {
    sub_100027D64();
    if (v24) {
      return 13LL;
    }
  }

  uint64_t v27 = 0xD000000000000013LL;
  uint64_t v28 = "com.apple.MobileSMS";
  if (a1 == 0xD000000000000013LL)
  {
    sub_100027D64();
    if (v24) {
      return 5LL;
    }
  }

  uint64_t v29 = 0xD000000000000012LL;
  Swift::String v30 = "com.apple.Carousel";
  if (a1 == 0xD000000000000012LL)
  {
    sub_100027D64();
    if (v24) {
      return 5LL;
    }
  }

  uint64_t v31 = 0xD00000000000003DLL;
  Swift::String v32 = "com.apple.siri.parsec.HashtagImagesApp.HashtagImagesExtension";
  if (a1 == 0xD00000000000003DLL)
  {
    sub_100027D64();
    if (v24) {
      return 5LL;
    }
  }

  uint64_t v33 = 0xD000000000000034LL;
  uint64_t v34 = "com.apple.intelligenceplatform.intelligenceplatformd";
  if (a1 == 0xD000000000000034LL)
  {
    sub_100027D64();
    if (v24) {
      return 19LL;
    }
  }

  uint64_t v35 = 0xD000000000000041LL;
  uint64_t v36 = "com.apple.intelligenceplatform.IntelligencePlatformComputeService";
  if (a1 == 0xD000000000000041LL)
  {
    sub_100027D64();
    if (v24) {
      return 19LL;
    }
  }

  uint64_t v37 = 0xD00000000000001ALL;
  uint64_t v38 = "com.apple.omniSearch.Ringo";
  if (a1 == 0xD00000000000001ALL)
  {
    sub_100027D64();
    if (v24) {
      return 20LL;
    }
  }

  uint64_t v39 = 0xD000000000000028LL;
  uint64_t v40 = "com.apple.omniSearch.SearchToolExtension";
  if (a1 == 0xD000000000000028LL)
  {
    sub_100027D64();
    if (v24) {
      return 20LL;
    }
  }

  uint64_t v41 = 0xD00000000000002CLL;
  uint64_t v42 = "com.apple.intelligenceflow.intelligenceflowd";
  if (a1 == 0xD00000000000002CLL)
  {
    sub_100027D64();
    if (v24) {
      return 20LL;
    }
  }

  uint64_t result = sub_1000279BC(a1, a2);
  if ((v43 & 1) != 0) {
    return 0LL;
  }
  return result;
}

uint64_t sub_1000279BC(uint64_t a1, uint64_t a2)
{
  if (qword_1001D05C8 != -1) {
    swift_once(&qword_1001D05C8, sub_10006B928);
  }
  if (byte_1001EDD88 != 1) {
    return 0LL;
  }
  uint64_t v4 = 0xD000000000000014LL;
  uint64_t v5 = "com.apple.parsectool";
  if (a1 == 0xD000000000000014LL)
  {
    sub_100027D64();
    if (v18) {
      return 8LL;
    }
  }

  uint64_t v7 = 0xD000000000000013LL;
  uint64_t v8 = "com.apple.jujubectl";
  if (a1 == 0xD000000000000013LL)
  {
    sub_100027D64();
    if (v18) {
      return 13LL;
    }
  }

  uint64_t v9 = 0xD000000000000012LL;
  uint64_t v10 = "com.apple.arkitctl";
  if (a1 == 0xD000000000000012LL)
  {
    sub_100027D64();
    if (v18) {
      return 13LL;
    }
  }

  uint64_t v11 = 0xD000000000000029LL;
  uint64_t v12 = "com.apple.siri.VisualIntelligencePerfTool";
  if (a1 == 0xD000000000000029LL)
  {
    sub_100027D64();
    if (v18) {
      return 13LL;
    }
  }

  if (a1 == 0xD00000000000001DLL)
  {
    sub_100027D64();
    if (v18) {
      return 13LL;
    }
  }

  sub_100027204();
  if ((sub_100027D54(0xD00000000000001DLL, v13) & 1) != 0) {
    return 13LL;
  }
  if (a1 == 0xD000000000000021LL)
  {
    sub_100027D64();
    if (v18) {
      return 13LL;
    }
  }

  sub_100027204();
  uint64_t v35 = v14;
  if ((sub_100027D54(v14, v15) & 1) != 0) {
    return 13LL;
  }
  if (a1 == 0xD000000000000018LL)
  {
    sub_100027D64();
    if (v18) {
      return 13LL;
    }
  }

  sub_100027204();
  char v17 = sub_100027D54(0xD000000000000018LL, v16);
  BOOL v18 = a1 == 0xD00000000000001DLL && a2 == 0x800000010016C980LL;
  char v19 = v18;
  uint64_t result = 13LL;
  if ((v17 & 1) != 0 || (v19 & 1) != 0) {
    return result;
  }
  char v20 = sub_100027D54(0xD00000000000001DLL, 0x800000010016C980LL);
  BOOL v21 = a1 == 0xD000000000000018LL && a2 == 0x800000010016C9A0LL;
  BOOL v22 = v21;
  uint64_t result = 13LL;
  if ((v20 & 1) != 0 || v22) {
    return result;
  }
  if ((sub_100027D54(0xD000000000000018LL, 0x800000010016C9A0LL) & 1) != 0) {
    return 13LL;
  }
  BOOL v23 = a1 == 0x2E6770762E6D6F63LL && a2 == 0xED00007265766F52LL;
  if (v23 || (sub_100027D54(0x2E6770762E6D6F63LL, 0xED00007265766F52LL) & 1) != 0) {
    return 13LL;
  }
  uint64_t v24 = 0xD000000000000026LL;
  uint64_t v25 = "com.apple.siri.parsec.HashtagImagesApp";
  if (a1 == 0xD000000000000026LL)
  {
    sub_100027D64();
    if (v18) {
      return 5LL;
    }
  }

  uint64_t v26 = 0xD000000000000023LL;
  uint64_t v27 = "com.apple.siri.SearchToShareAppNano";
  if (a1 == 0xD000000000000023LL)
  {
    sub_100027D64();
    if (v18) {
      return 5LL;
    }
  }

  uint64_t v28 = 0xD000000000000025LL;
  uint64_t v29 = "com.apple.intelligenceplatform.iptool";
  if (a1 == 0xD000000000000025LL)
  {
    sub_100027D64();
    if (v18) {
      return 19LL;
    }
  }

  uint64_t v30 = 0xD00000000000001CLL;
  uint64_t v31 = "com.apple.omniSearch.omstool";
  if (a1 == 0xD00000000000001CLL)
  {
    sub_100027D64();
    if (v18) {
      return 20LL;
    }
  }

  char v32 = sub_100027D3C(v30, (uint64_t)v31);
  BOOL v34 = a1 == v35 && a2 == 0x800000010016CA70LL;
  uint64_t result = 20LL;
  if ((v32 & 1) == 0 && !v34)
  {
    if ((sub_100027D54(0xD000000000000021LL, 0x800000010016CA70LL) & 1) != 0) {
      return 20LL;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100027D3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, (a2 - 32) | 0x8000000000000000LL, v3, v2, 0LL);
}

uint64_t sub_100027D54(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

  ;
}

void sub_100027D74(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (void *)((char *)&v23[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = *(void **)(v2 + 40);
  void *v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once(&qword_1001D0540, sub_100034544);
    goto LABEL_5;
  }

  if (*(_BYTE *)(v2 + 32) == (a1 & 1) || !swift_unknownObjectWeakLoadStrong(v2 + 16)) {
    return;
  }
  if (qword_1001D0540 != -1) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_1000093D0(v10, (uint64_t)qword_1001EDC90);
  uint64_t v11 = swift_retain(v2);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v14 = 67109120;
    LODWORD(v23[0]) = *(unsigned __int8 *)(v2 + 32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v23, (char *)v23 + 4, v14 + 4);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "new managed status = %{BOOL}d", v14, 8u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {

    swift_release();
  }

  id v15 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  uint64_t v16 = sub_10000941C((uint64_t *)&unk_1001D32A0);
  uint64_t inited = swift_initStackObject(v16, v24);
  *(_OWORD *)(inited + sub_100019D10(v0 + 16) = xmmword_10015C7F0;
  v23[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"context");
  v23[1] = v18;
  AnyHashable.init<A>(_:)(v23);
  uint64_t v19 = type metadata accessor for ContextUpdate(0LL);
  *(void *)(inited + 96) = v19;
  char v20 = sub_10001B468((void *)(inited + 72));
  *(_BYTE *)char v20 = *(_BYTE *)(v2 + 32);
  swift_storeEnumTagMultiPayload(v20, v19, 7LL);
  uint64_t v21 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  sub_1000C5160((uint64_t)@"com.apple.parsecd.contextUpdate", 0LL, v21, v15);
  swift_unknownObjectRelease();
}

void sub_10002804C(char a1)
{
  char v2 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(v1 + swift_unknownObjectWeakDestroy(v0 + 32) = a1;
  sub_100027D74(v2);
}

uint64_t sub_10002805C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  sub_10000941C(&qword_1001D1DE0);
  sub_100009B94();
  __chkstk_darwin(v7);
  sub_100009AEC();
  uint64_t v10 = v9 - v8;
  *(void *)(v4 + 24) = 0LL;
  uint64_t v11 = swift_unknownObjectWeakInit(v4 + 16, 0LL);
  *(_WORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 32) = 0;
  *(void *)(v4 + 24) = a2;
  uint64_t v33 = a1;
  swift_unknownObjectWeakAssign(v11, a1);
  sub_100028BD4();
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  __chkstk_darwin(v12);
  sub_100009AEC();
  uint64_t v15 = v14 - v13;
  (*(void (**)(uint64_t, void))(v16 + 104))( v14 - v13,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  sub_100009BA4();
  sub_100009B94();
  __chkstk_darwin(v17);
  sub_1000270AC();
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v19 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  sub_100009B94();
  __chkstk_darwin(v20);
  sub_100009AEC();
  uint64_t v23 = v22 - v21;
  uint64_t v35 = &_swiftEmptyArrayStorage;
  sub_10000BCF8( (unint64_t *)&qword_1001D1AD0,  v24,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v26 = v25;
  uint64_t v27 = sub_10000941C((uint64_t *)&unk_1001D3780);
  sub_100025F50((unint64_t *)&qword_1001D1AD8, (uint64_t *)&unk_1001D3780);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v27, v28, v19, v26);
  *(void *)(v4 + 40) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000029LL,  0x800000010016CB10LL,  v3,  v23,  v15,  0LL);
  id v29 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  uint64_t v30 = qword_1001D0480;
  swift_retain(v4);
  if (v30 != -1) {
    swift_once(&qword_1001D0480, sub_10000A6F0);
  }
  objc_msgSend(v29, "addObserver:selector:name:object:", v4, "accountsDidChange:", qword_1001EDA60, 0, v33, v35);

  swift_release();
  uint64_t v31 = type metadata accessor for Notification(0LL);
  sub_100009654(v10, 1LL, 1LL, v31);
  sub_1000282FC();
  swift_unknownObjectRelease(v34);
  sub_100028CD0(v10, &qword_1001D1DE0);
  return v4;
}

void sub_1000282FC()
{
  uint64_t v1 = sub_100009BBC((uint64_t)sub_1000D2F18);
  sub_100009BA4();
  sub_100027108();
  __chkstk_darwin(v2);
  sub_100009B54();
  uint64_t v3 = swift_retain(v0);
  static DispatchQoS.unspecified.getter(v3);
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v4);
  sub_1000270AC();
  sub_10000BCF8( (unint64_t *)&qword_1001D2B80,  v5,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_10000941C((uint64_t *)&unk_1001D0BC0);
  sub_100025F50((unint64_t *)&qword_1001D2B90, (uint64_t *)&unk_1001D0BC0);
  sub_10002708C(v6);
  sub_1000270C4();
  _Block_release(v1);
  sub_1000270EC();
  sub_1000270DC();
  swift_release();
  sub_100009AA0();
}

void sub_10002842C(uint64_t a1)
{
  uint64_t v5 = v4 - v3;
  sub_1000282FC();
  sub_100028C88(a1, v5);
  uint64_t v6 = type metadata accessor for Notification(0LL);
  if (sub_100010708(v5, 1LL, v6) == 1)
  {
    uint64_t v7 = &qword_1001D1DE0;
    uint64_t v8 = (__int128 *)v5;
LABEL_3:
    sub_100028CD0((uint64_t)v8, v7);
    return;
  }

  uint64_t v9 = Notification.userInfo.getter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  if (v9)
  {
    uint64_t v10 = 0x756F636341524150LL;
    uint64_t v11 = 0xEA0000000000746ELL;
    AnyHashable.init<A>(_:)(&v10);
    sub_10000BEF0((uint64_t)v13, v9, &v14);
    swift_bridgeObjectRelease();
    sub_10000BD34((uint64_t)v13);
    if (!v15)
    {
      uint64_t v7 = (uint64_t *)&unk_1001D32C0;
      uint64_t v8 = &v14;
      goto LABEL_3;
    }

    if ((swift_dynamicCast(&v10, &v14, (char *)&type metadata for Any + 8, &type metadata for StorefrontAccount, 6LL) & 1) != 0)
    {
      sub_1000285A4(v10, v11, v12);
      swift_bridgeObjectRelease();
    }
  }

void sub_1000285A4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = swift_allocObject(&unk_1001B28B0, 41LL, 7LL);
  *(void *)(v8 + sub_100019D10(v0 + 16) = v4;
  *(void *)(v8 + 24) = a1;
  *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 32) = a2;
  *(_BYTE *)(v8 + 40) = a3;
  uint64_t v9 = sub_100009BBC((uint64_t)sub_1000D2F18);
  sub_100009BA4();
  sub_100027108();
  __chkstk_darwin(v10);
  sub_100009B54();
  swift_retain(v4);
  uint64_t v11 = swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v11);
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v12);
  sub_1000270AC();
  sub_10000BCF8( (unint64_t *)&qword_1001D2B80,  v13,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_10000941C((uint64_t *)&unk_1001D0BC0);
  sub_100025F50((unint64_t *)&qword_1001D2B90, (uint64_t *)&unk_1001D0BC0);
  sub_10002708C(v14);
  sub_1000270C4();
  _Block_release(v9);
  sub_1000270EC();
  sub_1000270DC();
  swift_release();
  sub_100009AA0();
}

void sub_1000287D8(uint64_t a1)
{
  id v2 = [(id)objc_opt_self(MCProfileConnection) sharedConnection];
  if (!v2) {
    return;
  }
  id v22 = v2;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1 + 16);
  if (!Strong)
  {
LABEL_9:

    return;
  }

  uint64_t v4 = Strong;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(MCFeatureBookstoreAllowed);
  if (sub_100028C30(v5, v6, v22) == 2 || ([v22 isiTunesAllowed] & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 33) & 1) == 0)
    {
      uint64_t v9 = (_BYTE *)(a1 + 33);
      unsigned int v8 = 1;
      goto LABEL_11;
    }

    goto LABEL_8;
  }

  unsigned int v7 = [v22 isAppInstallationAllowed];
  if (v7 != *(unsigned __int8 *)(a1 + 33))
  {
LABEL_8:
    swift_unknownObjectRelease(v4);
    goto LABEL_9;
  }

  unsigned int v8 = v7 ^ 1;
  uint64_t v9 = (_BYTE *)(a1 + 33);
LABEL_11:
  if (qword_1001D0540 != -1) {
    swift_once(&qword_1001D0540, sub_100034544);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_1000093D0(v10, (uint64_t)qword_1001EDC90);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v14 = 134217984;
    uint64_t v23 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v14 + 4);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "new device restricted status = %ld", v14, 0xCu);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  *uint64_t v9 = v8;
  id v15 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  uint64_t v16 = sub_10000941C((uint64_t *)&unk_1001D32A0);
  uint64_t inited = swift_initStackObject(v16, v25);
  *(_OWORD *)(inited + sub_100019D10(v0 + 16) = xmmword_10015C7F0;
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"context");
  uint64_t v24 = v18;
  AnyHashable.init<A>(_:)(&v23);
  uint64_t v19 = type metadata accessor for ContextUpdate(0LL);
  *(void *)(inited + 96) = v19;
  uint64_t v20 = sub_10001B468((void *)(inited + 72));
  *(_BYTE *)uint64_t v20 = *v9;
  swift_storeEnumTagMultiPayload(v20, v19, 8LL);
  uint64_t v21 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  sub_1000C5160((uint64_t)@"com.apple.parsecd.contextUpdate", 0LL, v21, v15);

  swift_unknownObjectRelease(v4);
}

uint64_t sub_100028B88()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t type metadata accessor for DeviceRestrictionsManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd25DeviceRestrictionsManager);
}

unint64_t sub_100028BD4()
{
  unint64_t result = qword_1001D43D0;
  if (!qword_1001D43D0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001D43D0);
  }

  return result;
}

void sub_100028C10()
{
}

uint64_t sub_100028C18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100028C28(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

id sub_100028C30(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [a3 effectiveBoolValueForSetting:v5];

  return v6;
}

uint64_t sub_100028C88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001D1DE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_100028CD0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000941C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  sub_100009A90();
}

uint64_t sub_100028D08()
{
  return swift_deallocObject(v0, 41LL, 7LL);
}

void sub_100028D34()
{
}

uint64_t sub_100028D64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v2);
  if (result) {
    return swift_release(result);
  }
  return result;
}

void sub_100028DAC(uint64_t a1)
{
  if (qword_1001D0518 != -1) {
    swift_once(&qword_1001D0518, sub_100034490);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_1000093D0(v2, (uint64_t)qword_1001EDC18);
  sub_100029138();
  uint64_t v3 = sub_100029138();
  oslog = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(oslog, v4);
  if (os_log_type_enabled(oslog, v5))
  {
    id v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unsigned int v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)id v6 = 138412290;
    sub_100029138();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(a1);
    uint64_t v10 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v6 + 4);
    uint64_t *v7 = v8;
    sub_100014530();
    sub_100014530();
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, "VisibilityManager.performWithBag failed with: %@", v6, 0xCu);
    sub_10000941C(&qword_1001D1060);
    swift_arrayDestroy(v7, 1LL);
    sub_100010C34((uint64_t)v7);
    sub_100010C34((uint64_t)v6);
  }

  else
  {
    sub_100014530();
    sub_100014530();
  }

void sub_100028F40()
{
  uint64_t v0 = Notification.userInfo.getter();
  if (!v0)
  {
    __int128 v5 = 0u;
    __int128 v6 = 0u;
    goto LABEL_6;
  }

  uint64_t v1 = v0;
  *(void *)&__int128 v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"bag");
  *((void *)&v5 + 1) = v2;
  AnyHashable.init<A>(_:)(&v5);
  sub_10000BEF0((uint64_t)v4, v1, &v5);
  swift_bridgeObjectRelease();
  sub_10000BD34((uint64_t)v4);
  if (!*((void *)&v6 + 1))
  {
LABEL_6:
    sub_10000BD68((uint64_t)&v5);
    return;
  }

  unint64_t v3 = sub_1000290FC();
}

uint64_t sub_1000290B0()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t type metadata accessor for VisibilityManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd17VisibilityManager);
}

unint64_t sub_1000290FC()
{
  unint64_t result = qword_1001D47F0;
  if (!qword_1001D47F0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___PARBag);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001D47F0);
  }

  return result;
}

uint64_t sub_100029138()
{
  return swift_errorRetain(v0);
}

uint64_t sub_100029140(uint64_t a1)
{
  uint64_t result = sub_10001111C(a1);
  *(_BYTE *)(result + 24) = 2;
  return result;
}

uint64_t type metadata accessor for SpotlightEngagedSuggestionController()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd36SpotlightEngagedSuggestionController);
}

NSString sub_10002917C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1001EDAB8 = (uint64_t)result;
  return result;
}

void sub_1000291B0(uint64_t a1@<X8>)
{
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + sub_10000BDD4(v0 + 16) = 0u;
  *(_BYTE *)(a1 + 64) = 2;
  uint64_t v2 = (int *)type metadata accessor for PegasusContext(0LL);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  uint64_t v3 = a1 + v2[16];
  uint64_t v4 = type metadata accessor for Date(0LL);
  sub_10002FC40(v3, v5, v6, v4);
  *(void *)(a1 + v2[17]) = 0LL;
  sub_10002FB10(v2[18]);
  sub_10002FB10(v2[19]);
  sub_10002FB10(v2[20]);
  sub_10002FB10(v2[21]);
  sub_10002FB10(v2[22]);
  *(_OWORD *)(a1 + v2[23]) = xmmword_10015D820;
  sub_10002FB10(v2[24]);
  sub_10002FB10(v2[25]);
  *(void *)(a1 + v2[26]) = 0LL;
  uint64_t v7 = v2[27];
  uint64_t v8 = (void *)(a1 + v2[28]);
  *uint64_t v8 = 0LL;
  v8[1] = 0LL;
  uint64_t v9 = (void *)(a1 + v2[29]);
  *uint64_t v9 = 0LL;
  v9[1] = 0LL;
  *(_BYTE *)(a1 + v2[30]) = 2;
  *(_BYTE *)(a1 + v2[32]) = 2;
  *(_BYTE *)(a1 + v2[33]) = 2;
  uint64_t v10 = (void *)(a1 + v7);
  sub_10002FB10(v2[34]);
  *(_BYTE *)(a1 + v2[35]) = 2;
  *(_BYTE *)(a1 + v2[36]) = 6;
  void *v10 = static ConfigurationContext.regionCode.getter();
  v10[1] = v11;
  *(_BYTE *)(a1 + v2[31]) = 0;
  sub_1000110D4();
}

void sub_1000292DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

void sub_1000292E8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

void sub_1000292F4( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for SessionType(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100009AEC();
  uint64_t v14 = v13 - v12;
  swift_bridgeObjectRetain(a2);
  uint64_t v15 = SessionType.init(withClientIdentifier:)(a1, a2);
  uint64_t v16 = a4(v15);
  uint64_t v18 = v17;
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
  if (v18)
  {
    swift_bridgeObjectRetain(v18);
    sub_1000293DC(a3, v16, v18, a5);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v19 = type metadata accessor for Trialpb_TrialExperiment(0LL);
    sub_10002FC40(a5, v20, v21, v19);
  }

  sub_10002FBC0();
}

void sub_1000293DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v37 = a4;
  uint64_t v40 = a2;
  uint64_t v6 = type metadata accessor for Trialpb_TrialExperiment(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v37 - v11;
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v38 = a1 + 56;
  uint64_t v14 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v39 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v42 = a1;
  swift_bridgeObjectRetain(a1);
  int64_t j = 0LL;
  uint64_t v41 = a3;
  if (!v16) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v18 | (j << 6); ; unint64_t i = __clz(__rbit64(v21)) + (j << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))( v12,  *(void *)(v42 + 48) + *(void *)(v7 + 72) * i,  v6);
    id v29 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t v30 = v29(v10, v12, v6);
    uint64_t v31 = Trialpb_TrialExperiment.experimentNamespace.getter(v30);
    if (v31 == v40 && v32 == a3)
    {
      sub_10002FC38();
      swift_bridgeObjectRelease();
LABEL_33:
      uint64_t v35 = v37;
      v29((char *)v37, v10, v6);
      uint64_t v36 = 0LL;
LABEL_35:
      sub_100009654(v35, v36, 1LL, v6);
      swift_bridgeObjectRelease();
      sub_10002716C();
      return;
    }

    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, v40, a3, 0LL);
    swift_bridgeObjectRelease();
    if ((v34 & 1) != 0)
    {
      sub_10002FC38();
      goto LABEL_33;
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    a3 = v41;
    if (v16) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v20 = j + 1;
    if (__OFADD__(j, 1LL)) {
      break;
    }
    if (v20 >= v39) {
      goto LABEL_34;
    }
    unint64_t v21 = *(void *)(v38 + 8 * v20);
    ++j;
    if (v21) {
      goto LABEL_23;
    }
    int64_t j = v20 + 1;
    sub_10002FC00();
    if (v22 == v23) {
      goto LABEL_34;
    }
    sub_10002FBF4();
    if (v21) {
      goto LABEL_23;
    }
    int64_t j = v24 + 2;
    sub_10002FC00();
    if (v22 == v23) {
      goto LABEL_34;
    }
    sub_10002FBF4();
    if (v21) {
      goto LABEL_23;
    }
    int64_t j = v25 + 3;
    sub_10002FC00();
    if (v22 == v23) {
      goto LABEL_34;
    }
    sub_10002FBF4();
    if (v21) {
      goto LABEL_23;
    }
    int64_t v27 = v26 + 4;
    if (v27 >= v39)
    {
LABEL_34:
      sub_10002FC38();
      uint64_t v36 = 1LL;
      uint64_t v35 = v37;
      goto LABEL_35;
    }

    unint64_t v21 = *(void *)(v38 + 8 * v27);
    for (j = v27; !v21; int64_t v27 = v28 + 1)
    {
      int64_t j = v27 + 1;
      if (__OFADD__(v27, 1LL)) {
        goto LABEL_37;
      }
      sub_10002FC00();
      if (v22 == v23) {
        goto LABEL_34;
      }
      sub_10002FBF4();
    }

LABEL_23:
    unint64_t v16 = (v21 - 1) & v21;
  }

  __break(1u);
LABEL_37:
  __break(1u);
}

  __break(1u);
}

    __break(1u);
    JUMPOUT(0x1000579FCLL);
  }

  if (qword_1001D0510 != -1) {
    swift_once(&qword_1001D0510, sub_100034468);
  }
  uint64_t v13 = sub_1000093D0(v7, (uint64_t)qword_1001EDC00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v0, v13, v7);
  uint64_t v1 = v6;
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v1);
  unint64_t v16 = static os_log_type_t.error.getter(v14, v15);
  if (os_log_type_enabled(v14, v16))
  {
    uint64_t v33 = v16;
    uint64_t v17 = sub_100009B20(28LL);
    uint64_t v32 = sub_100009B20(64LL);
    v35[0] = v32;
    *(_DWORD *)uint64_t v17 = 136315650;
    unint64_t v18 = sub_10001085C(v1, (SEL *)&selRef_suggestion);
    if (!v19) {
      goto LABEL_23;
    }
    HIDWORD(v34) = (unint64_t)sub_1000307E0(v18, v19, v35) >> 32;
    sub_10005A68C();

    sub_10003B8E8();
    *(_WORD *)(v17 + 12) = 1024;
    int64_t v20 = [v1 type];

    LODWORD(v34) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, (char *)&v34 + 4, v17 + 14);

    *(_WORD *)(v17 + 18) = 2080;
    unint64_t v21 = sub_10001085C(v1, (SEL *)&selRef_topicIdentifier);
    if (v22)
    {
      char v23 = v22;
    }

    else
    {
      unint64_t v21 = 7104878LL;
      char v23 = 0xE300000000000000LL;
    }

    char v34 = sub_1000307E0(v21, v23, v35);
    sub_10005A68C();

    sub_10003B8E8();
    _os_log_impl( (void *)&_mh_execute_header,  v14,  v33,  "Can't extract ECC suggestion and source for %s, invalid type (%d) or topic (%s)",  (uint8_t *)v17,  0x1Cu);
    swift_arrayDestroy(v32, 2LL);
    sub_100010C34(v32);
    sub_100010C34(v17);
  }

  else
  {
  }

  uint64_t v30 = sub_10005A790();
  v31(v30);
  return 0LL;
}

      uint64_t v9 = (v17 - 1) & v17;
    }
  }

  NSString result = swift_release();
  *uint64_t v2 = v6;
  return result;
}

    uint64_t v10 = (v17 - 1) & v17;
  }

  unint64_t v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_35:
    NSString result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_37;
  }

  uint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
    uint64_t v13 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v13 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_35;
    }
    uint64_t v17 = *(void *)(v8 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

  __break(1u);
  return result;
}

  sub_10006B494();
}

              swift_release();
              uint64_t v25 = v28;
              uint64_t v26 = 1LL;
              return sub_100009654(v25, v26, 1LL, v3);
            }
          }
        }
      }
    }

              swift_release();
              uint64_t v25 = v28;
              uint64_t v26 = 1LL;
              return sub_100009654(v25, v26, 1LL, v4);
            }
          }
        }
      }
    }

                swift_bridgeObjectRelease();
                swift_release();
                uint64_t v17 = v20;
                v3[4] = a3;
                v3[5] = v17;
                swift_release();
                v3[2] = a1;
                v3[3] = a2;
                return;
              }
            }
          }
        }
      }
    }

                swift_bridgeObjectRelease();
                swift_release();
                v3[6] = v19;
                swift_release();
                v3[2] = a1;
                v3[3] = a2;
                return;
              }
            }
          }
        }
      }
    }

  __break(1u);
}

uint64_t sub_10002966C@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  if (a1 > 2) {
    *a2 = a1;
  }
  type metadata accessor for Apple_Parsec_Feedback_V2_LookupSelectionType(0LL);
  uint64_t v2 = sub_10002FAF8();
  return v3(v2);
}

uint64_t sub_1000296E0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    BOOL v4 = a1 == 67 && a2 == 0xE100000000000000LL;
    if (!v4 && (sub_10002FAB8(67LL, 0xE100000000000000LL) & 1) == 0 && (a1 != 70 || a2 != 0xE100000000000000LL)) {
      sub_10002FAB8(70LL, 0xE100000000000000LL);
    }
  }

  type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.TemperatureUnit(0LL);
  uint64_t v6 = sub_10002FAF8();
  return sub_10002FB68(v6, v7, v8, v9);
}

uint64_t sub_100029778(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    BOOL v4 = a1 == 21333 && a2 == 0xE200000000000000LL;
    if (!v4 && (sub_10002FAB8(21333LL, 0xE200000000000000LL) & 1) == 0)
    {
      BOOL v5 = a1 == 19285 && a2 == 0xE200000000000000LL;
      if (!v5 && (sub_10002FAB8(19285LL, 0xE200000000000000LL) & 1) == 0 && (a1 != 18771 || a2 != 0xE200000000000000LL)) {
        sub_10002FAB8(18771LL, 0xE200000000000000LL);
      }
    }
  }

  type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.MeasurementSystem(0LL);
  uint64_t v7 = sub_10002FAF8();
  return sub_10002FB68(v7, v8, v9, v10);
}

uint64_t sub_100029844(unint64_t a1)
{
  if (a1 >= 7) {
    return 6LL;
  }
  else {
    return (0x5040302010006uLL >> (8 * a1));
  }
}

uint64_t sub_10002986C(unsigned __int8 a1)
{
  return a1 + 1LL;
}

void sub_100029878()
{
}

void sub_100029880(uint64_t a1)
{
}

void sub_100029888(uint64_t a1)
{
}

uint64_t sub_100029890@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100029844(*a1);
  *a2 = result;
  return result;
}

void sub_1000298B8(uint64_t *a1@<X8>)
{
  *a1 = sub_10002986C(*v1);
  sub_100009A90();
}

uint64_t sub_1000298DC(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x800000010016AF30LL;
    if (a2 == 0x800000010016AF30LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010016AF30LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0xD000000000000018LL && a2 == 0x800000010016CBE0LL)
  {
    unint64_t v6 = 0x800000010016CBE0LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x800000010016CBE0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0xD000000000000017LL)
  {
    unint64_t v7 = 0x800000010016CC00LL;
    if (a2 == 0x800000010016CC00LL) {
      goto LABEL_16;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x800000010016CC00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v8 = 0x800000010016CC20LL;
    if (a2 == 0x800000010016CC20LL) {
      goto LABEL_21;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x800000010016CC20LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_21:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v9 = 0x800000010016CC40LL;
    if (a2 == 0x800000010016CC40LL) {
      goto LABEL_26;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x800000010016CC40LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 4LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v10 = 0x800000010016CC60LL;
    if (a2 == 0x800000010016CC60LL) {
      goto LABEL_31;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010016CC60LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 5LL;
  }

  if (a1 == 0xD000000000000017LL)
  {
    unint64_t v11 = 0x800000010016AF10LL;
    if (a2 == 0x800000010016AF10LL) {
      goto LABEL_36;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x800000010016AF10LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 6LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v12 = 0x800000010016AF50LL;
    if (a2 == 0x800000010016AF50LL) {
      goto LABEL_41;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x800000010016AF50LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
LABEL_41:
    swift_bridgeObjectRelease(v12);
    return 7LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v13 = 0x800000010016CC80LL;
    if (a2 == 0x800000010016CC80LL) {
      goto LABEL_46;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010016CC80LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
LABEL_46:
    swift_bridgeObjectRelease(v13);
    return 8LL;
  }

  if (a1 == 0x74696E55706D6574LL && a2 == 0xE900000000000073LL)
  {
    unint64_t v15 = 0xE900000000000073LL;
    goto LABEL_54;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74696E55706D6574LL, 0xE900000000000073LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
LABEL_54:
    swift_bridgeObjectRelease(v15);
    return 9LL;
  }

  if (a1 == 0x6E6F69676572LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v17 = 0xE600000000000000LL;
    goto LABEL_62;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F69676572LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v17 = a2;
LABEL_62:
    swift_bridgeObjectRelease(v17);
    return 10LL;
  }

  if (a1 == 0x7461636F4C6F6567LL && a2 == 0xEB000000006E6F69LL)
  {
    unint64_t v19 = 0xEB000000006E6F69LL;
    goto LABEL_70;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461636F4C6F6567LL, 0xEB000000006E6F69LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v19 = a2;
LABEL_70:
    swift_bridgeObjectRelease(v19);
    return 11LL;
  }

  if (a1 == 0x7461636F4C6F6567LL && a2 == 0xEE006567416E6F69LL)
  {
    unint64_t v21 = 0xEE006567416E6F69LL;
    goto LABEL_78;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461636F4C6F6567LL, 0xEE006567416E6F69LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v21 = a2;
LABEL_78:
    swift_bridgeObjectRelease(v21);
    return 12LL;
  }

  if (a1 == 0x6563616C506F6567LL && a2 == 0xEC0000006B72616DLL)
  {
    unint64_t v23 = 0xEC0000006B72616DLL;
    goto LABEL_86;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6563616C506F6567LL, 0xEC0000006B72616DLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v23 = a2;
LABEL_86:
    swift_bridgeObjectRelease(v23);
    return 13LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v24 = 0x800000010016CCA0LL;
    if (a2 == 0x800000010016CCA0LL) {
      goto LABEL_91;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010016CCA0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v24 = a2;
LABEL_91:
    swift_bridgeObjectRelease(v24);
    return 14LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v25 = 0x800000010016CCC0LL;
    if (a2 == 0x800000010016CCC0LL) {
      goto LABEL_96;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010016CCC0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v25 = a2;
LABEL_96:
    swift_bridgeObjectRelease(v25);
    return 15LL;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v26 = 0x800000010016AEF0LL;
    if (a2 == 0x800000010016AEF0LL) {
      goto LABEL_101;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x800000010016AEF0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v26 = a2;
LABEL_101:
    swift_bridgeObjectRelease(v26);
    return 16LL;
  }

  if (a1 == 0xD00000000000001ALL && a2 == 0x800000010016CCE0LL)
  {
    unint64_t v27 = 0x800000010016CCE0LL;
LABEL_107:
    swift_bridgeObjectRelease(v27);
    return 17LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000010016CCE0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v27 = a2;
    goto LABEL_107;
  }

  if (a1 == 0xD000000000000020LL && a2 == 0x800000010016CD00LL)
  {
    unint64_t v28 = 0x800000010016CD00LL;
LABEL_113:
    swift_bridgeObjectRelease(v28);
    return 18LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020LL, 0x800000010016CD00LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v28 = a2;
    goto LABEL_113;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v29 = 0x800000010016CD30LL;
    if (a2 == 0x800000010016CD30LL) {
      goto LABEL_118;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010016CD30LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v29 = a2;
LABEL_118:
    swift_bridgeObjectRelease(v29);
    return 19LL;
  }

  if (a1 == 0xD000000000000017LL)
  {
    unint64_t v30 = 0x800000010016CD50LL;
    if (a2 == 0x800000010016CD50LL) {
      goto LABEL_123;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017LL, 0x800000010016CD50LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v30 = a2;
LABEL_123:
    swift_bridgeObjectRelease(v30);
    return 20LL;
  }

  if (a1 == 0xD00000000000001BLL)
  {
    unint64_t v31 = 0x800000010016CD70LL;
    if (a2 == 0x800000010016CD70LL) {
      goto LABEL_128;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x800000010016CD70LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v31 = a2;
LABEL_128:
    swift_bridgeObjectRelease(v31);
    return 21LL;
  }

  if (a1 == 0xD00000000000001BLL)
  {
    unint64_t v32 = 0x800000010016CD90LL;
    if (a2 == 0x800000010016CD90LL) {
      goto LABEL_133;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x800000010016CD90LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v32 = a2;
LABEL_133:
    swift_bridgeObjectRelease(v32);
    return 22LL;
  }

  if (a1 == 0x6F436E6F69676572LL && a2 == 0xEA00000000006564LL)
  {
    unint64_t v34 = 0xEA00000000006564LL;
    goto LABEL_141;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F436E6F69676572LL, 0xEA00000000006564LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v34 = a2;
LABEL_141:
    swift_bridgeObjectRelease(v34);
    return 23LL;
  }

  if (a1 == 0xD000000000000013LL && a2 == 0x800000010016CDB0LL)
  {
    unint64_t v35 = 0x800000010016CDB0LL;
LABEL_147:
    swift_bridgeObjectRelease(v35);
    return 24LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x800000010016CDB0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v35 = a2;
    goto LABEL_147;
  }

  if (a1 == 0x7469617274726F70LL && a2 == 0xEF6E6F6973726556LL)
  {
    unint64_t v37 = 0xEF6E6F6973726556LL;
    goto LABEL_155;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7469617274726F70LL, 0xEF6E6F6973726556LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v37 = a2;
LABEL_155:
    swift_bridgeObjectRelease(v37);
    return 25LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v38 = 0x800000010016CDD0LL;
    if (a2 == 0x800000010016CDD0LL) {
      goto LABEL_160;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010016CDD0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v38 = a2;
LABEL_160:
    swift_bridgeObjectRelease(v38);
    return 26LL;
  }

  if (a1 == 0xD000000000000015LL && a2 == 0x800000010016CDF0LL)
  {
    unint64_t v39 = 0x800000010016CDF0LL;
LABEL_166:
    swift_bridgeObjectRelease(v39);
    return 27LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000010016CDF0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v39 = a2;
    goto LABEL_166;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v40 = 0x800000010016CAD0LL;
    if (a2 == 0x800000010016CAD0LL) {
      goto LABEL_171;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010016CAD0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v40 = a2;
LABEL_171:
    swift_bridgeObjectRelease(v40);
    return 28LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v41 = 0x800000010016CAF0LL;
    if (a2 == 0x800000010016CAF0LL) {
      goto LABEL_176;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010016CAF0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v41 = a2;
LABEL_176:
    swift_bridgeObjectRelease(v41);
    return 29LL;
  }

  if (a1 == 0xD000000000000014LL)
  {
    unint64_t v42 = 0x800000010016CE10LL;
    if (a2 == 0x800000010016CE10LL) {
      goto LABEL_181;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x800000010016CE10LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v42 = a2;
LABEL_181:
    swift_bridgeObjectRelease(v42);
    return 30LL;
  }

  if (a1 == 0x4569726953796568LL && a2 == 0xEE0064656C62616ELL)
  {
    unint64_t v44 = 0xEE0064656C62616ELL;
    goto LABEL_189;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4569726953796568LL, 0xEE0064656C62616ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v44 = a2;
LABEL_189:
    swift_bridgeObjectRelease(v44);
    return 31LL;
  }

  if (a1 == 0xD000000000000012LL && a2 == 0x800000010016CE30LL)
  {
    swift_bridgeObjectRelease(0x800000010016CE30LL);
    return 32LL;
  }

  else
  {
    char v45 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x800000010016CE30LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v45 & 1) != 0) {
      return 32LL;
    }
    else {
      return 33LL;
    }
  }

uint64_t sub_10002A4E8()
{
  return 33LL;
}

uint64_t sub_10002A4F0()
{
  return 0LL;
}

uint64_t sub_10002A4FC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10002A534 + 4 * byte_10015DF20[a1]))( 0xD000000000000010LL,  0x800000010016AF30LL);
}

uint64_t sub_10002A534(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_10002A790()
{
  return sub_10002A4FC(*v0);
}

uint64_t sub_10002A798@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000298DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10002A7BC()
{
  return sub_10002A4F0();
}

uint64_t sub_10002A7D8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_10002A4E8();
  *a1 = result;
  return result;
}

uint64_t sub_10002A7FC(uint64_t a1)
{
  unint64_t v2 = sub_10002D36C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002A824(uint64_t a1)
{
  unint64_t v2 = sub_10002D36C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10002A84C()
{
  uint64_t v4 = sub_10000941C(&qword_1001D21A8);
  sub_10002FBE4();
  __chkstk_darwin(v5);
  sub_100009B54();
  sub_10002FB80();
  unint64_t v6 = sub_10002D36C();
  sub_10002FB3C((uint64_t)&type metadata for PegasusContext.CodingKeys, v7, v6);
  uint64_t v8 = *v0;
  uint64_t v9 = v0[1];
  LOBYTE(v34) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v8, v9, &v34, v4);
  if (!v1)
  {
    sub_10002FA88(v0[2], v0[3], 1);
    sub_10002FA88(v0[4], v0[5], 2);
    sub_10002FA88(v0[6], v0[7], 3);
    sub_10002FAA0(*((unsigned __int8 *)v0 + 64), 4);
    sub_10002FA88(v0[9], v0[10], 5);
    sub_10002FA88(v0[11], v0[12], 6);
    *(void *)&__int128 v34 = v0[13];
    char v35 = 7;
    sub_10000941C(&qword_1001D1460);
    sub_10002D3A8();
    sub_10002FC24();
    sub_10002FAC8();
    sub_10002FA88(v0[14], v0[15], 8);
    sub_10002FA88(v0[16], v0[17], 9);
    sub_10002FA88(v0[18], v0[19], 10);
    *(void *)&__int128 v34 = v0[20];
    char v35 = 11;
    sub_100009788(0LL, (unint64_t *)&qword_1001D21C0, &OBJC_CLASS___CLLocation_ptr);
    sub_10002D444( &qword_1001D21C8,  (unint64_t *)&qword_1001D21C0,  &OBJC_CLASS___CLLocation_ptr,  (uint64_t)&protocol conformance descriptor for CLLocation);
    sub_10002FC98();
    sub_10002FAC8();
    uint64_t v33 = (int *)type metadata accessor for PegasusContext(0LL);
    LOBYTE(v34) = 12;
    type metadata accessor for Date(0LL);
    sub_10002D404();
    sub_10002FAC8();
    *(void *)&__int128 v34 = *(uint64_t *)((char *)v0 + v33[17]);
    char v35 = 13;
    sub_100009788(0LL, &qword_1001D21D8, &OBJC_CLASS___CLPlacemark_ptr);
    sub_10002D444( &qword_1001D21E0,  &qword_1001D21D8,  &OBJC_CLASS___CLPlacemark_ptr,  (uint64_t)&protocol conformance descriptor for CLPlacemark);
    sub_10002FC98();
    sub_10002FAC8();
    uint64_t v10 = sub_10002FAD4(v33[18]);
    sub_10002FA88(v10, v11, 14);
    uint64_t v12 = sub_10002FAD4(v33[19]);
    sub_10002FA88(v12, v13, 15);
    uint64_t v14 = sub_10002FAD4(v33[20]);
    sub_10002FA88(v14, v15, 16);
    uint64_t v16 = sub_10002FAD4(v33[21]);
    sub_10002FA88(v16, v17, 17);
    uint64_t v18 = sub_10002FAD4(v33[22]);
    sub_10002FA88(v18, v19, 18);
    __int128 v34 = *(_OWORD *)((char *)v0 + v33[23]);
    char v35 = 19;
    sub_10002D480();
    sub_10002FAC8();
    uint64_t v20 = sub_10002FAD4(v33[24]);
    sub_10002FA88(v20, v21, 20);
    uint64_t v22 = sub_10002FAD4(v33[25]);
    sub_10002FA88(v22, v23, 21);
    *(void *)&__int128 v34 = *(uint64_t *)((char *)v0 + v33[26]);
    char v35 = 22;
    sub_10002FC24();
    sub_10002FAC8();
    uint64_t v24 = sub_10002FAD4(v33[27]);
    sub_10002FA88(v24, v25, 23);
    uint64_t v26 = sub_10002FAD4(v33[28]);
    sub_10002FA88(v26, v27, 24);
    uint64_t v28 = sub_10002FAD4(v33[29]);
    sub_10002FA88(v28, v29, 25);
    sub_10002FAA0(*((unsigned __int8 *)v0 + v33[30]), 26);
    uint64_t v30 = *((unsigned __int8 *)v0 + v33[31]);
    LOBYTE(v34) = 27;
    KeyedEncodingContainer.encode(_:forKey:)(v30, &v34, v4);
    sub_10002FAA0(*((unsigned __int8 *)v0 + v33[32]), 28);
    sub_10002FAA0(*((unsigned __int8 *)v0 + v33[33]), 29);
    uint64_t v31 = sub_10002FAD4(v33[34]);
    sub_10002FA88(v31, v32, 30);
    sub_10002FAA0(*((unsigned __int8 *)v0 + v33[35]), 31);
    LOBYTE(v34) = *((_BYTE *)v0 + v33[36]);
    char v35 = 32;
    sub_10002D4BC();
    sub_10002FAC8();
  }

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_10002716C();
}

void sub_10002AD84()
{
}

void sub_10002AD98(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for LocationContext(0LL);
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for ContextUpdate(0LL);
  __chkstk_darwin(v4);
  sub_100009B54();
  sub_10000BDF8(a1, v1, v5);
  unint64_t v6 = (char *)sub_10002AE58 + 4 * byte_10015DF41[swift_getEnumCaseMultiPayload(v1, v4)];
  __asm { BR              X10 }

void sub_10002AE58( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v23 = *(void *)(v21 - 192);
  uint64_t v22 = *(void *)(v21 - 184);
  sub_100010E2C();
  sub_10001450C();
  *(void *)uint64_t v19 = v23;
  *(void *)(v19 + 8) = v22;
  uint64_t v25 = *(void *)(v21 - 176);
  uint64_t v24 = *(void *)(v21 - 168);
  sub_100010E2C();
  sub_10001450C();
  *(void *)(v19 + sub_10000BDD4(v0 + 16) = v25;
  *(void *)(v19 + 24) = v24;
  uint64_t v27 = *(void *)(v21 - 160);
  uint64_t v26 = *(void *)(v21 - 152);
  sub_100010E2C();
  sub_10001450C();
  *(void *)(v19 + swift_unknownObjectWeakDestroy(v0 + 32) = v27;
  *(void *)(v19 + 40) = v26;
  *(_BYTE *)(v19 + 64) = *(_BYTE *)(v21 - 144);
  uint64_t v29 = *(void *)(v21 - 136);
  uint64_t v28 = *(void *)(v21 - 128);
  sub_100010E2C();
  sub_10001450C();
  *(void *)(v19 + 72) = v29;
  *(void *)(v19 + 80) = v28;
  uint64_t v31 = *(void *)(v21 - 120);
  uint64_t v30 = *(void *)(v21 - 112);
  sub_100010E2C();
  sub_10001450C();
  *(void *)(v19 + 88) = v31;
  *(void *)(v19 + 96) = v30;
  uint64_t v32 = *(void *)(v21 - 104);
  sub_100010E2C();
  sub_10001450C();
  *(void *)(v19 + 104) = v32;
  uint64_t v34 = *(void *)(v21 - 96);
  uint64_t v33 = *(void *)(v21 - 88);
  sub_100010E2C();
  sub_10001450C();
  *(void *)(v19 + 128) = v34;
  *(void *)(v19 + 136) = v33;
  uint64_t v36 = *(void *)(v21 - 80);
  uint64_t v35 = *(void *)(v21 - 72);
  sub_100010E2C();
  sub_10001450C();
  sub_10002D5AC((void *)(v21 - 192));
  *(void *)(v19 + 144) = v36;
  *(void *)(v19 + 152) = v35;
  sub_10000BDF8(v19, v18, type metadata accessor for PegasusContext);
  sub_10002FBC0();
}

unint64_t sub_10002B164(Swift::String string)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001B0590, v3);
  sub_10002FC74();
  if (v1 >= 5) {
    return 5LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_10002B1A8(char a1)
{
  return sub_10002FC4C(a1);
}

uint64_t sub_10002B1B8(char *a1, char *a2)
{
  return sub_10007E640(*a1, *a2);
}

void sub_10002B1C4()
{
}

uint64_t sub_10002B1CC(uint64_t a1)
{
  return sub_100079AD4(a1, *v1);
}

void sub_10002B1D4(uint64_t a1)
{
}

unint64_t sub_10002B1DC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10002B164(*a1);
  *a2 = result;
  return result;
}

void sub_10002B208(uint64_t *a1@<X8>)
{
  *a1 = sub_10002B1A8(*v1);
  a1[1] = 0xE100000000000000LL;
  sub_100009A90();
}

uint64_t sub_10002B230()
{
  return sub_10002B1A8(*v0);
}

uint64_t sub_10002B24C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10002B1A4(a1);
  *a2 = result;
  return result;
}

void sub_10002B270(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_10002B27C(uint64_t a1)
{
  unint64_t v2 = sub_10002B42C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002B2A4(uint64_t a1)
{
  unint64_t v2 = sub_10002B42C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void Trialpb_TrialExperiment.encode(to:)()
{
  uint64_t v1 = sub_10000941C(&qword_1001D2038);
  sub_10002FBE4();
  __chkstk_darwin(v2);
  sub_10002FB80();
  unint64_t v3 = sub_10002B42C();
  uint64_t v5 = sub_10002FB3C((uint64_t)&unk_1001B2AB8, v4, v3);
  uint64_t v6 = Trialpb_TrialExperiment.experimentNamespace.getter(v5);
  char v22 = 0;
  sub_10002FB1C(v6, v7, (uint64_t)&v22);
  if (v0)
  {
    sub_10002FB2C();
    sub_1000145F0();
  }

  else
  {
    uint64_t v8 = sub_1000145F0();
    uint64_t v9 = Trialpb_TrialExperiment.experimentID.getter(v8);
    char v21 = 1;
    sub_10002FB1C(v9, v10, (uint64_t)&v21);
    uint64_t v11 = sub_1000145F0();
    uint64_t v12 = Trialpb_TrialExperiment.treatmentID.getter(v11);
    char v20 = 2;
    sub_10002FB1C(v12, v13, (uint64_t)&v20);
    char v19 = 3;
    uint64_t v14 = sub_1000145F0();
    uint64_t v15 = Trialpb_TrialExperiment.deploymentID.getter(v14);
    uint64_t v16 = KeyedEncodingContainer.encode(_:forKey:)(v15, &v19, v1);
    uint64_t v17 = Trialpb_TrialExperiment.compatibilityVersion.getter(v16);
    char v18 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v18, v1);
    sub_10002FB2C();
  }

  sub_10002FBAC();
}

unint64_t sub_10002B42C()
{
  unint64_t result = qword_1001D2040;
  if (!qword_1001D2040)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015E3C0, &unk_1001B2AB8);
    atomic_store(result, (unint64_t *)&qword_1001D2040);
  }

  return result;
}

void sub_10002B468()
{
}

void Trialpb_TrialExperiment.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = sub_10000941C(&qword_1001D2048);
  uint64_t v4 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  sub_100009AEC();
  uint64_t v5 = type metadata accessor for Trialpb_TrialExperiment(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100009AEC();
  uint64_t v9 = v8 - v7;
  Trialpb_TrialExperiment.init()();
  uint64_t v11 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019AFC(a1, v11);
  unint64_t v12 = sub_10002B42C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1001B2AB8, &unk_1001B2AB8, v12, v11, v10);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  }

  else
  {
    char v27 = 0;
    uint64_t v13 = sub_10002FB4C((uint64_t)&v27);
    Trialpb_TrialExperiment.experimentNamespace.setter(v13, v14);
    char v26 = 1;
    uint64_t v15 = sub_10002FB4C((uint64_t)&v26);
    Trialpb_TrialExperiment.experimentID.setter(v15, v16);
    char v25 = 2;
    uint64_t v17 = sub_10002FB4C((uint64_t)&v25);
    Trialpb_TrialExperiment.treatmentID.setter(v17, v18);
    char v24 = 3;
    uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)(&v24, v22);
    Trialpb_TrialExperiment.deploymentID.setter(v19);
    char v23 = 4;
    uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)(&v23, v22);
    Trialpb_TrialExperiment.compatibilityVersion.setter(v20);
    sub_10002FBA0(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a2, v9, v5);
  }

  sub_1000108B8(a1);
  sub_10002716C();
}

uint64_t sub_10002B6A8(Swift::String string)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001B0628, v3);
  sub_10002FC74();
  if (v1 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v1) {
    return v4;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10002B6F4(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x64757469676E6F6CLL;
  }
  else {
    return 0x656475746974616CLL;
  }
}

void sub_10002B730(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_10002B744(char *a1, unsigned __int8 *a2)
{
}

void sub_10002B750()
{
}

uint64_t sub_10002B758(uint64_t a1)
{
  return sub_100079904(a1, *v1);
}

void sub_10002B760(uint64_t a1)
{
}

uint64_t sub_10002B768@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10002B6A8(*a1);
  *a2 = result;
  return result;
}

void sub_10002B794(uint64_t *a1@<X8>)
{
  *a1 = sub_10002B6F4(*v1);
  a1[1] = v3;
  sub_100009A90();
}

uint64_t sub_10002B7B8()
{
  return sub_10002B6F4(*v0);
}

uint64_t sub_10002B7C0@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10002B6F0(a1);
  *a2 = result;
  return result;
}

void sub_10002B7E4(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10002B7F0(uint64_t a1)
{
  unint64_t v2 = sub_10002B904();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002B818(uint64_t a1)
{
  unint64_t v2 = sub_10002B904();
  return CodingKey.debugDescription.getter(a1, v2);
}

void CLLocation.encode(to:)()
{
  unint64_t v2 = sub_10002B904();
  sub_10002FB3C((uint64_t)&unk_1001B2A28, v3, v2);
  sub_10002FC8C();
  char v5 = 0;
  sub_10002FBD4((uint64_t)&v5);
  if (!v0)
  {
    sub_10002FC8C();
    char v4 = 1;
    sub_10002FBD4((uint64_t)&v4);
  }

  sub_10002FB2C();
  sub_10002FBAC();
}

unint64_t sub_10002B904()
{
  unint64_t result = qword_1001D2058;
  if (!qword_1001D2058)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015E370, &unk_1001B2A28);
    atomic_store(result, (unint64_t *)&qword_1001D2058);
  }

  return result;
}

void sub_10002B940()
{
}

void *sub_10002B960(uint64_t a1, uint64_t *a2, int *a3)
{
  char v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *char v4 = *a2;
    char v4 = (void *)(v21 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v21);
  }

  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + sub_10000BDD4(v0 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[5];
    *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = a2[4];
    *(void *)(a1 + 40) = v9;
    uint64_t v10 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + sub_10000BDD4(v0 + 56) = v10;
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    uint64_t v11 = a2[10];
    *(void *)(a1 + 72) = a2[9];
    *(void *)(a1 + 80) = v11;
    uint64_t v12 = a2[12];
    *(void *)(a1 + 88) = a2[11];
    *(void *)(a1 + 96) = v12;
    uint64_t v14 = a2[13];
    uint64_t v13 = a2[14];
    *(void *)(a1 + 104) = v14;
    *(void *)(a1 + 112) = v13;
    uint64_t v15 = a2[16];
    uint64_t v83 = a2[15];
    *(void *)(a1 + 120) = v83;
    *(void *)(a1 + 128) = v15;
    uint64_t v17 = a2[17];
    uint64_t v16 = a2[18];
    *(void *)(a1 + 136) = v17;
    *(void *)(a1 + 144) = v16;
    uint64_t v81 = a2[19];
    uint64_t v82 = v17;
    uint64_t v18 = a3[16];
    unsigned int v84 = (void *)a2[20];
    __dst = (void *)(a1 + v18);
    __int128 v80 = (char *)a2 + v18;
    *(void *)(a1 + 152) = v81;
    *(void *)(a1 + 160) = v84;
    uint64_t v79 = type metadata accessor for Date(0LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v82);
    swift_bridgeObjectRetain(v81);
    id v19 = v84;
    if (sub_100010708((uint64_t)v80, 1LL, v79))
    {
      uint64_t v20 = sub_10000941C(&qword_1001D32B0);
      memcpy(__dst, v80, *(void *)(*(void *)(v20 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v79 - 8) + 16LL))(__dst, v80, v79);
      sub_100009654((uint64_t)__dst, 0LL, 1LL, v79);
    }

    uint64_t v22 = a3[17];
    uint64_t v23 = a3[18];
    char v24 = *(void **)((char *)a2 + v22);
    *(void *)((char *)v4 + v22) = v24;
    char v25 = (void *)((char *)v4 + v23);
    char v26 = (uint64_t *)((char *)a2 + v23);
    uint64_t v27 = v26[1];
    *char v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = a3[19];
    uint64_t v29 = a3[20];
    uint64_t v30 = (void *)((char *)v4 + v28);
    uint64_t v31 = (uint64_t *)((char *)a2 + v28);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = (void *)((char *)v4 + v29);
    uint64_t v34 = (uint64_t *)((char *)a2 + v29);
    uint64_t v35 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v35;
    uint64_t v36 = a3[21];
    uint64_t v37 = a3[22];
    unint64_t v38 = (void *)((char *)v4 + v36);
    unint64_t v39 = (uint64_t *)((char *)a2 + v36);
    uint64_t v40 = v39[1];
    *unint64_t v38 = *v39;
    v38[1] = v40;
    unint64_t v41 = (void *)((char *)v4 + v37);
    unint64_t v42 = (uint64_t *)((char *)a2 + v37);
    uint64_t v43 = v42[1];
    *unint64_t v41 = *v42;
    v41[1] = v43;
    uint64_t v44 = a3[23];
    __dsta = (void *)((char *)v4 + v44);
    char v45 = (uint64_t *)((char *)a2 + v44);
    unint64_t v46 = *(uint64_t *)((char *)a2 + v44 + 8);
    id v47 = v24;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v43);
    if (v46 >> 60 == 15)
    {
      *(_OWORD *)__dsta = *(_OWORD *)v45;
    }

    else
    {
      uint64_t v48 = *v45;
      sub_100014244(*v45, v46);
      uint64_t *__dsta = v48;
      __dsta[1] = v46;
    }

    uint64_t v49 = a3[24];
    uint64_t v50 = a3[25];
    uint64_t v51 = (void *)((char *)v4 + v49);
    uint64_t v52 = (uint64_t *)((char *)a2 + v49);
    uint64_t v53 = v52[1];
    void *v51 = *v52;
    v51[1] = v53;
    uint64_t v54 = (void *)((char *)v4 + v50);
    uint64_t v55 = (uint64_t *)((char *)a2 + v50);
    uint64_t v56 = v55[1];
    *uint64_t v54 = *v55;
    v54[1] = v56;
    uint64_t v57 = a3[26];
    uint64_t v58 = a3[27];
    uint64_t v59 = *(uint64_t *)((char *)a2 + v57);
    *(void *)((char *)v4 + v57) = v59;
    uint64_t v60 = (void *)((char *)v4 + v58);
    uint64_t v61 = (uint64_t *)((char *)a2 + v58);
    uint64_t v62 = v61[1];
    *uint64_t v60 = *v61;
    v60[1] = v62;
    uint64_t v63 = a3[28];
    uint64_t v64 = a3[29];
    uint64_t v65 = (void *)((char *)v4 + v63);
    __int128 v66 = (uint64_t *)((char *)a2 + v63);
    uint64_t v67 = v66[1];
    *uint64_t v65 = *v66;
    v65[1] = v67;
    __int128 v68 = (void *)((char *)v4 + v64);
    uint64_t v69 = (uint64_t *)((char *)a2 + v64);
    uint64_t v70 = v69[1];
    *__int128 v68 = *v69;
    v68[1] = v70;
    uint64_t v71 = a3[31];
    *((_BYTE *)v4 + a3[30]) = *((_BYTE *)a2 + a3[30]);
    *((_BYTE *)v4 + v71) = *((_BYTE *)a2 + v71);
    uint64_t v72 = a3[33];
    *((_BYTE *)v4 + a3[32]) = *((_BYTE *)a2 + a3[32]);
    *((_BYTE *)v4 + v72) = *((_BYTE *)a2 + v72);
    uint64_t v73 = a3[34];
    uint64_t v74 = a3[35];
    uint64_t v75 = (void *)((char *)v4 + v73);
    uint64_t v76 = (uint64_t *)((char *)a2 + v73);
    uint64_t v77 = v76[1];
    void *v75 = *v76;
    v75[1] = v77;
    *((_BYTE *)v4 + v74) = *((_BYTE *)a2 + v74);
    *((_BYTE *)v4 + a3[36]) = *((_BYTE *)a2 + a3[36]);
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v67);
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v77);
  }

  return v4;
}

uint64_t sub_10002BCE4(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[16];
  uint64_t v5 = type metadata accessor for Date(0LL);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t *)(a1 + a2[23]);
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    sub_100010A30(*v6, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10002BE84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + sub_10000BDD4(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + sub_10000BDD4(v0 + 56) = v9;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v10;
  uint64_t v11 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v11;
  uint64_t v13 = *(void *)(a2 + 104);
  uint64_t v12 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = v13;
  *(void *)(a1 + 112) = v12;
  uint64_t v14 = *(void *)(a2 + 128);
  uint64_t v81 = *(void *)(a2 + 120);
  *(void *)(a1 + 120) = v81;
  *(void *)(a1 + 128) = v14;
  uint64_t v16 = *(void *)(a2 + 136);
  uint64_t v15 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = v16;
  *(void *)(a1 + 144) = v15;
  uint64_t v79 = *(void *)(a2 + 152);
  uint64_t v80 = v16;
  uint64_t v17 = a3[16];
  uint64_t v82 = *(void **)(a2 + 160);
  __dst = (void *)(a1 + v17);
  uint64_t v78 = (const void *)(a2 + v17);
  *(void *)(a1 + 152) = v79;
  *(void *)(a1 + 160) = v82;
  uint64_t v77 = type metadata accessor for Date(0LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRetain(v79);
  id v18 = v82;
  if (sub_100010708((uint64_t)v78, 1LL, v77))
  {
    uint64_t v19 = sub_10000941C(&qword_1001D32B0);
    memcpy(__dst, v78, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v77 - 8) + 16LL))(__dst, v78, v77);
    sub_100009654((uint64_t)__dst, 0LL, 1LL, v77);
  }

  uint64_t v20 = a3[17];
  uint64_t v21 = a3[18];
  uint64_t v22 = *(void **)(a2 + v20);
  *(void *)(a1 + v20) = v22;
  uint64_t v23 = (void *)(a1 + v21);
  char v24 = (void *)(a2 + v21);
  uint64_t v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  uint64_t v26 = a3[19];
  uint64_t v27 = a3[20];
  uint64_t v28 = (void *)(a1 + v26);
  uint64_t v29 = (void *)(a2 + v26);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = (void *)(a1 + v27);
  uint64_t v32 = (void *)(a2 + v27);
  uint64_t v33 = v32[1];
  void *v31 = *v32;
  v31[1] = v33;
  uint64_t v34 = a3[21];
  uint64_t v35 = a3[22];
  uint64_t v36 = (void *)(a1 + v34);
  uint64_t v37 = (void *)(a2 + v34);
  uint64_t v38 = v37[1];
  *uint64_t v36 = *v37;
  v36[1] = v38;
  unint64_t v39 = (void *)(a1 + v35);
  uint64_t v40 = (void *)(a2 + v35);
  uint64_t v41 = v40[1];
  *unint64_t v39 = *v40;
  v39[1] = v41;
  uint64_t v42 = a3[23];
  __dsta = (uint64_t *)(a1 + v42);
  uint64_t v43 = (uint64_t *)(a2 + v42);
  unint64_t v44 = *(void *)(a2 + v42 + 8);
  id v45 = v22;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v41);
  if (v44 >> 60 == 15)
  {
    *(_OWORD *)__dsta = *(_OWORD *)v43;
  }

  else
  {
    uint64_t v46 = *v43;
    sub_100014244(*v43, v44);
    uint64_t *__dsta = v46;
    __dsta[1] = v44;
  }

  uint64_t v47 = a3[24];
  uint64_t v48 = a3[25];
  uint64_t v49 = (void *)(a1 + v47);
  uint64_t v50 = (void *)(a2 + v47);
  uint64_t v51 = v50[1];
  *uint64_t v49 = *v50;
  v49[1] = v51;
  uint64_t v52 = (void *)(a1 + v48);
  uint64_t v53 = (void *)(a2 + v48);
  uint64_t v54 = v53[1];
  *uint64_t v52 = *v53;
  v52[1] = v54;
  uint64_t v55 = a3[26];
  uint64_t v56 = a3[27];
  uint64_t v57 = *(void *)(a2 + v55);
  *(void *)(a1 + v55) = v57;
  uint64_t v58 = (void *)(a1 + v56);
  uint64_t v59 = (void *)(a2 + v56);
  uint64_t v60 = v59[1];
  *uint64_t v58 = *v59;
  v58[1] = v60;
  uint64_t v61 = a3[28];
  uint64_t v62 = a3[29];
  uint64_t v63 = (void *)(a1 + v61);
  uint64_t v64 = (void *)(a2 + v61);
  uint64_t v65 = v64[1];
  void *v63 = *v64;
  v63[1] = v65;
  __int128 v66 = (void *)(a1 + v62);
  uint64_t v67 = (void *)(a2 + v62);
  uint64_t v68 = v67[1];
  *__int128 v66 = *v67;
  v66[1] = v68;
  uint64_t v69 = a3[31];
  *(_BYTE *)(a1 + a3[30]) = *(_BYTE *)(a2 + a3[30]);
  *(_BYTE *)(a1 + v69) = *(_BYTE *)(a2 + v69);
  uint64_t v70 = a3[33];
  *(_BYTE *)(a1 + a3[32]) = *(_BYTE *)(a2 + a3[32]);
  *(_BYTE *)(a1 + v70) = *(_BYTE *)(a2 + v70);
  uint64_t v71 = a3[34];
  uint64_t v72 = a3[35];
  uint64_t v73 = (void *)(a1 + v71);
  uint64_t v74 = (void *)(a2 + v71);
  uint64_t v75 = v74[1];
  *uint64_t v73 = *v74;
  v73[1] = v75;
  *(_BYTE *)(a1 + v72) = *(_BYTE *)(a2 + v72);
  *(_BYTE *)(a1 + a3[36]) = *(_BYTE *)(a2 + a3[36]);
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRetain(v75);
  return a1;
}

uint64_t sub_10002C1DC(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  *(void *)(a1 + sub_10000BDD4(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + sub_10000BDD4(v0 + 56) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a1 + 80) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v11 = *(void *)(a2 + 96);
  *(void *)(a1 + 96) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 104);
  *(void *)(a1 + 104) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  uint64_t v13 = *(void *)(a2 + 120);
  *(void *)(a1 + 120) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  uint64_t v14 = *(void *)(a2 + 136);
  *(void *)(a1 + 136) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  uint64_t v15 = *(void *)(a2 + 152);
  *(void *)(a1 + 152) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void **)(a1 + 160);
  uint64_t v17 = *(void **)(a2 + 160);
  *(void *)(a1 + 160) = v17;
  id v18 = v17;

  uint64_t v19 = a3[16];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (const void *)(a2 + v19);
  uint64_t v22 = type metadata accessor for Date(0LL);
  int v23 = sub_100010708((uint64_t)v20, 1LL, v22);
  int v24 = sub_100010708((uint64_t)v21, 1LL, v22);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v22 - 8) + 16LL))(v20, v21, v22);
      sub_100009654((uint64_t)v20, 0LL, 1LL, v22);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v25 = *(void *)(v22 - 8);
  if (v24)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v20, v22);
LABEL_6:
    uint64_t v26 = sub_10000941C(&qword_1001D32B0);
    memcpy(v20, v21, *(void *)(*(void *)(v26 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(v25 + 24))(v20, v21, v22);
LABEL_7:
  uint64_t v27 = a3[17];
  uint64_t v28 = *(void **)(a1 + v27);
  uint64_t v29 = *(void **)(a2 + v27);
  *(void *)(a1 + v27) = v29;
  id v30 = v29;

  uint64_t v31 = a3[18];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  *uint64_t v32 = *v33;
  uint64_t v34 = v33[1];
  v32[1] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[19];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (void *)(a2 + v35);
  *uint64_t v36 = *v37;
  uint64_t v38 = v37[1];
  v36[1] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease();
  uint64_t v39 = a3[20];
  uint64_t v40 = (void *)(a1 + v39);
  uint64_t v41 = (void *)(a2 + v39);
  *uint64_t v40 = *v41;
  uint64_t v42 = v41[1];
  v40[1] = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[21];
  unint64_t v44 = (void *)(a1 + v43);
  id v45 = (void *)(a2 + v43);
  *unint64_t v44 = *v45;
  uint64_t v46 = v45[1];
  v44[1] = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[22];
  uint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = (void *)(a2 + v47);
  *uint64_t v48 = *v49;
  uint64_t v50 = v49[1];
  v48[1] = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[23];
  uint64_t v52 = (uint64_t *)(a1 + v51);
  uint64_t v53 = (uint64_t *)(a2 + v51);
  unint64_t v54 = *(void *)(a2 + v51 + 8);
  if (*(void *)(a1 + v51 + 8) >> 60 != 15LL)
  {
    if (v54 >> 60 != 15)
    {
      uint64_t v56 = *v53;
      sub_100014244(v56, v54);
      uint64_t v57 = *v52;
      unint64_t v58 = v52[1];
      *uint64_t v52 = v56;
      v52[1] = v54;
      sub_100010A30(v57, v58);
      goto LABEL_14;
    }

    sub_10002C714((uint64_t)v52);
    goto LABEL_12;
  }

  if (v54 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
    goto LABEL_14;
  }

  uint64_t v55 = *v53;
  sub_100014244(v55, v54);
  *uint64_t v52 = v55;
  v52[1] = v54;
LABEL_14:
  uint64_t v59 = a3[24];
  uint64_t v60 = (void *)(a1 + v59);
  uint64_t v61 = (void *)(a2 + v59);
  *uint64_t v60 = *v61;
  uint64_t v62 = v61[1];
  v60[1] = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease();
  uint64_t v63 = a3[25];
  uint64_t v64 = (void *)(a1 + v63);
  uint64_t v65 = (void *)(a2 + v63);
  *uint64_t v64 = *v65;
  uint64_t v66 = v65[1];
  v64[1] = v66;
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRelease();
  uint64_t v67 = a3[26];
  uint64_t v68 = *(void *)(a2 + v67);
  *(void *)(a1 + v67) = v68;
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRelease();
  uint64_t v69 = a3[27];
  uint64_t v70 = (void *)(a1 + v69);
  uint64_t v71 = (void *)(a2 + v69);
  *uint64_t v70 = *v71;
  uint64_t v72 = v71[1];
  v70[1] = v72;
  swift_bridgeObjectRetain(v72);
  swift_bridgeObjectRelease();
  uint64_t v73 = a3[28];
  uint64_t v74 = (void *)(a1 + v73);
  uint64_t v75 = (void *)(a2 + v73);
  *uint64_t v74 = *v75;
  uint64_t v76 = v75[1];
  v74[1] = v76;
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRelease();
  uint64_t v77 = a3[29];
  uint64_t v78 = (void *)(a1 + v77);
  uint64_t v79 = (void *)(a2 + v77);
  *uint64_t v78 = *v79;
  uint64_t v80 = v79[1];
  v78[1] = v80;
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[30]) = *(_BYTE *)(a2 + a3[30]);
  *(_BYTE *)(a1 + a3[31]) = *(_BYTE *)(a2 + a3[31]);
  *(_BYTE *)(a1 + a3[32]) = *(_BYTE *)(a2 + a3[32]);
  *(_BYTE *)(a1 + a3[33]) = *(_BYTE *)(a2 + a3[33]);
  uint64_t v81 = a3[34];
  uint64_t v82 = (void *)(a1 + v81);
  uint64_t v83 = (void *)(a2 + v81);
  *uint64_t v82 = *v83;
  uint64_t v84 = v83[1];
  v82[1] = v84;
  swift_bridgeObjectRetain(v84);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[35]) = *(_BYTE *)(a2 + a3[35]);
  *(_BYTE *)(a1 + a3[36]) = *(_BYTE *)(a2 + a3[36]);
  return a1;
}

uint64_t sub_10002C714(uint64_t a1)
{
  return a1;
}

uint64_t sub_10002C748(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + sub_10000BDD4(v0 + 16) = v6;
  __int128 v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  __int128 v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v8;
  __int128 v9 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  uint64_t v10 = a3[16];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  *(_OWORD *)(a1 + 144) = v9;
  uint64_t v13 = type metadata accessor for Date(0LL);
  if (sub_100010708((uint64_t)v12, 1LL, v13))
  {
    uint64_t v14 = sub_10000941C(&qword_1001D32B0);
    memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 32LL))(v11, v12, v13);
    sub_100009654((uint64_t)v11, 0LL, 1LL, v13);
  }

  uint64_t v15 = a3[18];
  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  uint64_t v16 = a3[20];
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  *(_OWORD *)(a1 + vsub_10000BDD4(v0 + 16) = *(_OWORD *)(a2 + v16);
  uint64_t v17 = a3[22];
  *(_OWORD *)(a1 + a3[21]) = *(_OWORD *)(a2 + a3[21]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  uint64_t v18 = a3[24];
  *(_OWORD *)(a1 + a3[23]) = *(_OWORD *)(a2 + a3[23]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  uint64_t v19 = a3[26];
  *(_OWORD *)(a1 + a3[25]) = *(_OWORD *)(a2 + a3[25]);
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  uint64_t v20 = a3[28];
  *(_OWORD *)(a1 + a3[27]) = *(_OWORD *)(a2 + a3[27]);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  uint64_t v21 = a3[30];
  *(_OWORD *)(a1 + a3[29]) = *(_OWORD *)(a2 + a3[29]);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  uint64_t v22 = a3[32];
  *(_BYTE *)(a1 + a3[31]) = *(_BYTE *)(a2 + a3[31]);
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  uint64_t v23 = a3[34];
  *(_BYTE *)(a1 + a3[33]) = *(_BYTE *)(a2 + a3[33]);
  *(_OWORD *)(a1 + v23) = *(_OWORD *)(a2 + v23);
  uint64_t v24 = a3[36];
  *(_BYTE *)(a1 + a3[35]) = *(_BYTE *)(a2 + a3[35]);
  *(_BYTE *)(a1 + v24) = *(_BYTE *)(a2 + v24);
  return a1;
}

uint64_t sub_10002C90C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + sub_10000BDD4(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + sub_10000BDD4(v0 + 56) = v9;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);

  uint64_t v16 = a3[16];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  uint64_t v19 = type metadata accessor for Date(0LL);
  int v20 = sub_100010708((uint64_t)v17, 1LL, v19);
  int v21 = sub_100010708((uint64_t)v18, 1LL, v19);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 32LL))(v17, v18, v19);
      sub_100009654((uint64_t)v17, 0LL, 1LL, v19);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  uint64_t v22 = *(void *)(v19 - 8);
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v22 + 8))(v17, v19);
LABEL_6:
    uint64_t v23 = sub_10000941C(&qword_1001D32B0);
    memcpy(v17, v18, *(void *)(*(void *)(v23 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(v22 + 40))(v17, v18, v19);
LABEL_7:
  uint64_t v24 = a3[17];
  uint64_t v25 = *(void **)(a1 + v24);
  *(void *)(a1 + v24) = *(void *)(a2 + v24);

  uint64_t v26 = a3[18];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (uint64_t *)(a2 + v26);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  *uint64_t v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[19];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (uint64_t *)(a2 + v31);
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  *uint64_t v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[20];
  uint64_t v37 = (void *)(a1 + v36);
  uint64_t v38 = (uint64_t *)(a2 + v36);
  uint64_t v40 = *v38;
  uint64_t v39 = v38[1];
  void *v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[21];
  uint64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (uint64_t *)(a2 + v41);
  uint64_t v45 = *v43;
  uint64_t v44 = v43[1];
  *uint64_t v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[22];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (uint64_t *)(a2 + v46);
  uint64_t v50 = *v48;
  uint64_t v49 = v48[1];
  *uint64_t v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[23];
  uint64_t v52 = (uint64_t *)(a1 + v51);
  uint64_t v53 = (uint64_t *)(a2 + v51);
  unint64_t v54 = *(void *)(a1 + v51 + 8);
  if (v54 >> 60 != 15)
  {
    unint64_t v55 = v53[1];
    if (v55 >> 60 != 15)
    {
      uint64_t v56 = *v52;
      *uint64_t v52 = *v53;
      v52[1] = v55;
      sub_100010A30(v56, v54);
      goto LABEL_12;
    }

    sub_10002C714((uint64_t)v52);
  }

  *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
LABEL_12:
  uint64_t v57 = a3[24];
  unint64_t v58 = (void *)(a1 + v57);
  uint64_t v59 = (uint64_t *)(a2 + v57);
  uint64_t v61 = *v59;
  uint64_t v60 = v59[1];
  *unint64_t v58 = v61;
  v58[1] = v60;
  swift_bridgeObjectRelease();
  uint64_t v62 = a3[25];
  uint64_t v63 = (void *)(a1 + v62);
  uint64_t v64 = (uint64_t *)(a2 + v62);
  uint64_t v66 = *v64;
  uint64_t v65 = v64[1];
  void *v63 = v66;
  v63[1] = v65;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[26]) = *(void *)(a2 + a3[26]);
  swift_bridgeObjectRelease();
  uint64_t v67 = a3[27];
  uint64_t v68 = (void *)(a1 + v67);
  uint64_t v69 = (uint64_t *)(a2 + v67);
  uint64_t v71 = *v69;
  uint64_t v70 = v69[1];
  *uint64_t v68 = v71;
  v68[1] = v70;
  swift_bridgeObjectRelease();
  uint64_t v72 = a3[28];
  uint64_t v73 = (void *)(a1 + v72);
  uint64_t v74 = (uint64_t *)(a2 + v72);
  uint64_t v76 = *v74;
  uint64_t v75 = v74[1];
  *uint64_t v73 = v76;
  v73[1] = v75;
  swift_bridgeObjectRelease();
  uint64_t v77 = a3[29];
  uint64_t v78 = (void *)(a1 + v77);
  uint64_t v79 = (uint64_t *)(a2 + v77);
  uint64_t v81 = *v79;
  uint64_t v80 = v79[1];
  *uint64_t v78 = v81;
  v78[1] = v80;
  swift_bridgeObjectRelease();
  uint64_t v82 = a3[31];
  *(_BYTE *)(a1 + a3[30]) = *(_BYTE *)(a2 + a3[30]);
  *(_BYTE *)(a1 + v82) = *(_BYTE *)(a2 + v82);
  uint64_t v83 = a3[33];
  *(_BYTE *)(a1 + a3[32]) = *(_BYTE *)(a2 + a3[32]);
  *(_BYTE *)(a1 + v83) = *(_BYTE *)(a2 + v83);
  uint64_t v84 = a3[34];
  uint64_t v85 = (void *)(a1 + v84);
  os_log_type_t v86 = (uint64_t *)(a2 + v84);
  uint64_t v88 = *v86;
  uint64_t v87 = v86[1];
  *uint64_t v85 = v88;
  v85[1] = v87;
  swift_bridgeObjectRelease();
  uint64_t v89 = a3[36];
  *(_BYTE *)(a1 + a3[35]) = *(_BYTE *)(a2 + a3[35]);
  *(_BYTE *)(a1 + v89) = *(_BYTE *)(a2 + v89);
  return a1;
}

uint64_t sub_10002CCB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002CCBC);
}

void sub_10002CCBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 2147483646)
  {
    sub_10002FC58();
    sub_1000110D4();
  }

  else
  {
    uint64_t v6 = sub_10000941C(&qword_1001D32B0);
    sub_10002FB5C(a1 + *(int *)(a3 + 64), a2, v6);
  }

uint64_t sub_10002CD1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002CD28);
}

void sub_10002CD28(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 2147483646)
  {
    *(void *)(a1 + 8) = a2;
    sub_1000110D4();
  }

  else
  {
    uint64_t v7 = sub_10000941C(&qword_1001D32B0);
    sub_10002FB74(a1 + *(int *)(a4 + 64), a2, a2, v7);
  }

uint64_t type metadata accessor for PegasusContext(uint64_t a1)
{
  return sub_100018ABC(a1, qword_1001D20B8, (uint64_t)&nominal type descriptor for PegasusContext);
}

void sub_10002CD9C(uint64_t a1)
{
  v4[0] = &unk_10015E090;
  v4[1] = &unk_10015E090;
  void v4[2] = &unk_10015E090;
  v4[3] = &unk_10015E090;
  v4[4] = &unk_10015E0A8;
  id v4[5] = &unk_10015E090;
  void v4[6] = &unk_10015E090;
  v4[7] = &unk_10015E0C0;
  void v4[8] = &unk_10015E090;
  void v4[9] = &unk_10015E090;
  void v4[10] = &unk_10015E090;
  v4[11] = &unk_10015E0C0;
  sub_100026D28(319LL);
  if (v3 <= 0x3F)
  {
    v4[12] = *(void *)(v2 - 8) + 64LL;
    v4[13] = &unk_10015E0C0;
    v4[14] = &unk_10015E090;
    v4[15] = &unk_10015E090;
    v4[16] = &unk_10015E090;
    v4[17] = &unk_10015E090;
    v4[18] = &unk_10015E090;
    v4[19] = &unk_10015E0D8;
    v4[20] = &unk_10015E090;
    v4[21] = &unk_10015E090;
    v4[22] = &unk_10015E0C0;
    v4[23] = &unk_10015E090;
    _BYTE v4[24] = &unk_10015E090;
    v4[25] = &unk_10015E090;
    v4[26] = &unk_10015E0A8;
    v4[27] = &unk_10015E0F0;
    v4[28] = &unk_10015E0A8;
    v4[29] = &unk_10015E0A8;
    v4[30] = &unk_10015E090;
    v4[31] = &unk_10015E0A8;
    v4[32] = &unk_10015E108;
    swift_initStructMetadata(a1, 256LL, 33LL, v4, a1 + 16);
  }

__n128 initializeWithTake for StorefrontAccount(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

void type metadata accessor for SiriSettingsContext()
{
}

uint64_t getEnumTagSinglePayload for PARNetworkRequestFactory.NetworkRequestError( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }

uint64_t sub_10002CF40(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10002CF8C + 4 * byte_10015DF54[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10002CFC0 + 4 * byte_10015DF4F[v4]))();
}

uint64_t sub_10002CFC0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002CFC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10002CFD0LL);
  }
  return result;
}

uint64_t sub_10002CFDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10002CFE4LL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_10002CFE8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002CFF0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10002CFFC(_BYTE *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

void _s10CodingKeysOMa()
{
}

uint64_t getEnumTagSinglePayload for DevicePersistentDataManager.Activity( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }

uint64_t sub_10002D09C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10002D0E8 + 4 * byte_10015DF5E[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10002D11C + 4 * byte_10015DF59[v4]))();
}

uint64_t sub_10002D11C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002D124(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10002D12CLL);
  }
  return result;
}

uint64_t sub_10002D138(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10002D140LL);
  }
  *(_BYTE *)__n128 result = a2 + 4;
  return result;
}

uint64_t sub_10002D144(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002D14C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void _s10CodingKeysOMa_0()
{
}

unint64_t sub_10002D168()
{
  unint64_t result = qword_1001D2170;
  if (!qword_1001D2170)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015E208, &unk_1001B2AB8);
    atomic_store(result, (unint64_t *)&qword_1001D2170);
  }

  return result;
}

unint64_t sub_10002D1A8()
{
  unint64_t result = qword_1001D2178;
  if (!qword_1001D2178)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015E2F8, &unk_1001B2A28);
    atomic_store(result, (unint64_t *)&qword_1001D2178);
  }

  return result;
}

uint64_t sub_10002D1E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10002D330();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_10002D234()
{
  unint64_t result = qword_1001D2180;
  if (!qword_1001D2180)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015E230, &unk_1001B2A28);
    atomic_store(result, (unint64_t *)&qword_1001D2180);
  }

  return result;
}

unint64_t sub_10002D274()
{
  unint64_t result = qword_1001D2188;
  if (!qword_1001D2188)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015E258, &unk_1001B2A28);
    atomic_store(result, (unint64_t *)&qword_1001D2188);
  }

  return result;
}

unint64_t sub_10002D2B4()
{
  unint64_t result = qword_1001D2190;
  if (!qword_1001D2190)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015E140, &unk_1001B2AB8);
    atomic_store(result, (unint64_t *)&qword_1001D2190);
  }

  return result;
}

unint64_t sub_10002D2F4()
{
  unint64_t result = qword_1001D2198;
  if (!qword_1001D2198)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015E168, &unk_1001B2AB8);
    atomic_store(result, (unint64_t *)&qword_1001D2198);
  }

  return result;
}

unint64_t sub_10002D330()
{
  unint64_t result = qword_1001D21A0;
  if (!qword_1001D21A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015E634, &unk_1001B2BD8);
    atomic_store(result, (unint64_t *)&qword_1001D21A0);
  }

  return result;
}

unint64_t sub_10002D36C()
{
  unint64_t result = qword_1001D21B0;
  if (!qword_1001D21B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015E5E4, &type metadata for PegasusContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D21B0);
  }

  return result;
}

unint64_t sub_10002D3A8()
{
  unint64_t result = qword_1001D21B8;
  if (!qword_1001D21B8)
  {
    uint64_t v1 = sub_1000094A0(&qword_1001D1460);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001D21B8);
  }

  return result;
}

unint64_t sub_10002D404()
{
  unint64_t result = qword_1001D21D0;
  if (!qword_1001D21D0)
  {
    uint64_t v1 = type metadata accessor for Date(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_1001D21D0);
  }

  return result;
}

void sub_10002D444(unint64_t *a1, unint64_t *a2, void *a3, uint64_t a4)
{
  if (!*a1)
  {
    uint64_t v6 = sub_100009788(255LL, a2, a3);
    atomic_store(swift_getWitnessTable(a4, v6), a1);
  }

  sub_100009A90();
}

unint64_t sub_10002D480()
{
  unint64_t result = qword_1001D21E8;
  if (!qword_1001D21E8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1001D21E8);
  }

  return result;
}

unint64_t sub_10002D4BC()
{
  unint64_t result = qword_1001D21F0;
  if (!qword_1001D21F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015E348, &unk_1001B2BD8);
    atomic_store(result, (unint64_t *)&qword_1001D21F0);
  }

  return result;
}

uint64_t type metadata accessor for LocationContext(uint64_t a1)
{
  return sub_100018ABC(a1, qword_1001D2250, (uint64_t)&nominal type descriptor for LocationContext);
}

uint64_t type metadata accessor for ContextUpdate(uint64_t a1)
{
  return sub_100018ABC(a1, qword_1001D2310, (uint64_t)&nominal type descriptor for ContextUpdate);
}

uint64_t sub_10002D520(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocationContext(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002D564(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001D32B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

void *sub_10002D5AC(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[10];
  uint64_t v7 = a1[11];
  uint64_t v8 = a1[15];
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v8);
  return a1;
}

void **sub_10002D63C(void **a1, void **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void **)&v4[(v3 + 16LL) & ~(unint64_t)v3];
    swift_retain(v4);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = v4;
    if (sub_100010708((uint64_t)v10, 1LL, v11))
    {
      uint64_t v13 = sub_10000941C(&qword_1001D32B0);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
      sub_100009654((uint64_t)v9, 0LL, 1LL, v11);
    }

    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = *(void **)((char *)a2 + v14);
    *(void **)((char *)v7 + v14) = v16;
    uint64_t v17 = (void **)((char *)v7 + v15);
    uint64_t v18 = (void **)((char *)a2 + v15);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    uint64_t v20 = a3[8];
    uint64_t v21 = a3[9];
    uint64_t v22 = (void **)((char *)v7 + v20);
    uint64_t v23 = (void **)((char *)a2 + v20);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    uint64_t v25 = (void **)((char *)v7 + v21);
    uint64_t v26 = (void **)((char *)a2 + v21);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = a3[10];
    uint64_t v29 = a3[11];
    uint64_t v30 = (void **)((char *)v7 + v28);
    uint64_t v31 = (void **)((char *)a2 + v28);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = *(void **)((char *)a2 + v29);
    *(void **)((char *)v7 + v29) = v33;
    id v34 = v16;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v33);
  }

  return v7;
}

uint64_t sub_10002D7B4(id *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date(0LL);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void **sub_10002D874(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  id v11 = v6;
  if (sub_100010708((uint64_t)v9, 1LL, v10))
  {
    uint64_t v12 = sub_10000941C(&qword_1001D32B0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    sub_100009654((uint64_t)v8, 0LL, 1LL, v10);
  }

  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = *(void **)((char *)a2 + v13);
  *(void **)((char *)a1 + v13) = v15;
  uint64_t v16 = (void **)((char *)a1 + v14);
  uint64_t v17 = (void **)((char *)a2 + v14);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = a3[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = (void **)((char *)a1 + v19);
  uint64_t v22 = (void **)((char *)a2 + v19);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  uint64_t v24 = (void **)((char *)a1 + v20);
  uint64_t v25 = (void **)((char *)a2 + v20);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  uint64_t v27 = a3[10];
  uint64_t v28 = a3[11];
  uint64_t v29 = (void **)((char *)a1 + v27);
  uint64_t v30 = (void **)((char *)a2 + v27);
  uint64_t v31 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v31;
  uint64_t v32 = *(void **)((char *)a2 + v28);
  *(void **)((char *)a1 + v28) = v32;
  id v33 = v15;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v32);
  return a1;
}

void **sub_10002D9C4(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *a2;
  *a1 = *a2;
  id v8 = v7;

  uint64_t v9 = a3[5];
  uint64_t v10 = (char *)a1 + v9;
  id v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  int v13 = sub_100010708((uint64_t)v10, 1LL, v12);
  int v14 = sub_100010708((uint64_t)v11, 1LL, v12);
  if (!v13)
  {
    uint64_t v15 = *(void *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v10, v11, v12);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_6;
  }

  if (v14)
  {
LABEL_6:
    uint64_t v16 = sub_10000941C(&qword_1001D32B0);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
  sub_100009654((uint64_t)v10, 0LL, 1LL, v12);
LABEL_7:
  uint64_t v17 = a3[6];
  uint64_t v18 = *(void **)((char *)a1 + v17);
  uint64_t v19 = *(void **)((char *)a2 + v17);
  *(void **)((char *)a1 + v17) = v19;
  id v20 = v19;

  uint64_t v21 = a3[7];
  uint64_t v22 = (void **)((char *)a1 + v21);
  uint64_t v23 = (void **)((char *)a2 + v21);
  *uint64_t v22 = *v23;
  uint64_t v24 = v23[1];
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[8];
  uint64_t v26 = (void **)((char *)a1 + v25);
  uint64_t v27 = (void **)((char *)a2 + v25);
  void *v26 = *v27;
  uint64_t v28 = v27[1];
  v26[1] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[9];
  uint64_t v30 = (void **)((char *)a1 + v29);
  uint64_t v31 = (void **)((char *)a2 + v29);
  *uint64_t v30 = *v31;
  uint64_t v32 = v31[1];
  v30[1] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[10];
  id v34 = (void **)((char *)a1 + v33);
  uint64_t v35 = (void **)((char *)a2 + v33);
  *id v34 = *v35;
  uint64_t v36 = v35[1];
  v34[1] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease();
  uint64_t v37 = a3[11];
  uint64_t v38 = *(void **)((char *)a2 + v37);
  *(void **)((char *)a1 + v37) = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_10002DBC0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  if (sub_100010708((uint64_t)v8, 1LL, v9))
  {
    uint64_t v10 = sub_10000941C(&qword_1001D32B0);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    sub_100009654((uint64_t)v7, 0LL, 1LL, v9);
  }

  uint64_t v11 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  uint64_t v12 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  uint64_t v13 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  return a1;
}

void **sub_10002DCB8(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = a3[5];
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  int v11 = sub_100010708((uint64_t)v8, 1LL, v10);
  int v12 = sub_100010708((uint64_t)v9, 1LL, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_10000941C(&qword_1001D32B0);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  sub_100009654((uint64_t)v8, 0LL, 1LL, v10);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = *(void **)((char *)a1 + v15);
  *(void **)((char *)a1 + v15) = *(void **)((char *)a2 + v15);

  uint64_t v17 = a3[7];
  uint64_t v18 = (void **)((char *)a1 + v17);
  uint64_t v19 = (uint64_t *)((char *)a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[8];
  uint64_t v23 = (void **)((char *)a1 + v22);
  uint64_t v24 = (uint64_t *)((char *)a2 + v22);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  *uint64_t v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[9];
  uint64_t v28 = (void **)((char *)a1 + v27);
  uint64_t v29 = (uint64_t *)((char *)a2 + v27);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  *uint64_t v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[10];
  uint64_t v33 = (void **)((char *)a1 + v32);
  id v34 = (uint64_t *)((char *)a2 + v32);
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  *uint64_t v33 = v36;
  v33[1] = v35;
  swift_bridgeObjectRelease();
  *(void **)((char *)a1 + a3[11]) = *(void **)((char *)a2 + a3[11]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10002DE64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002DE70);
}

void sub_10002DE70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000941C(&qword_1001D32B0);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    sub_10002FB5C(a1 + *(int *)(a3 + 20), a2, v6);
  }
  else {
    sub_1000110D4();
  }
}

uint64_t sub_10002DEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002DEF0);
}

void sub_10002DEF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_10000941C(&qword_1001D32B0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
  {
    sub_10002FB74(a1 + *(int *)(a4 + 20), a2, a2, v8);
  }

  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
    sub_1000110D4();
  }

void sub_10002DF60(uint64_t a1)
{
  v4[0] = &unk_10015E0C0;
  sub_100026D28(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    void v4[2] = &unk_10015E0C0;
    v4[3] = &unk_10015E420;
    v4[4] = &unk_10015E420;
    id v4[5] = &unk_10015E420;
    void v4[6] = &unk_10015E420;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256LL, 8LL, v4, a1 + 16);
  }

uint64_t *sub_10002DFF4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v21);
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        uint64_t v9 = a2[3];
        a1[2] = a2[2];
        a1[3] = v9;
        uint64_t v10 = a2[5];
        a1[4] = a2[4];
        a1[5] = v10;
        *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
        uint64_t v11 = a2[8];
        a1[7] = a2[7];
        a1[8] = v11;
        uint64_t v12 = a2[10];
        a1[9] = a2[9];
        a1[10] = v12;
        uint64_t v14 = a2[11];
        uint64_t v13 = a2[12];
        a1[11] = v14;
        a1[12] = v13;
        uint64_t v16 = a2[13];
        uint64_t v15 = a2[14];
        a1[13] = v16;
        a1[14] = v15;
        uint64_t v17 = a2[15];
        a1[15] = v17;
        swift_bridgeObjectRetain(v8);
        swift_bridgeObjectRetain(v9);
        swift_bridgeObjectRetain(v10);
        swift_bridgeObjectRetain(v11);
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 0LL;
        goto LABEL_20;
      case 1u:
        uint64_t v22 = a2[1];
        *a1 = *a2;
        a1[1] = v22;
        swift_bridgeObjectRetain(v22);
        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 1LL;
        goto LABEL_20;
      case 2u:
        uint64_t v23 = (void *)*a2;
        *a1 = *a2;
        uint64_t v24 = (int *)type metadata accessor for LocationContext(0LL);
        uint64_t v25 = v24[5];
        uint64_t v26 = (char *)a1 + v25;
        uint64_t v27 = (char *)a2 + v25;
        uint64_t v28 = type metadata accessor for Date(0LL);
        id v29 = v23;
        if (sub_100010708((uint64_t)v27, 1LL, v28))
        {
          uint64_t v30 = sub_10000941C(&qword_1001D32B0);
          memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16LL))(v26, v27, v28);
          sub_100009654((uint64_t)v26, 0LL, 1LL, v28);
        }

        uint64_t v40 = v24[6];
        uint64_t v41 = *(void **)((char *)a2 + v40);
        *(uint64_t *)((char *)a1 + v40) = (uint64_t)v41;
        uint64_t v42 = v24[7];
        uint64_t v43 = (uint64_t *)((char *)a1 + v42);
        uint64_t v44 = (uint64_t *)((char *)a2 + v42);
        uint64_t v45 = v44[1];
        *uint64_t v43 = *v44;
        v43[1] = v45;
        uint64_t v46 = v24[8];
        uint64_t v47 = (uint64_t *)((char *)a1 + v46);
        uint64_t v48 = (uint64_t *)((char *)a2 + v46);
        uint64_t v49 = v48[1];
        *uint64_t v47 = *v48;
        v47[1] = v49;
        uint64_t v50 = v24[9];
        uint64_t v51 = (uint64_t *)((char *)a1 + v50);
        uint64_t v52 = (uint64_t *)((char *)a2 + v50);
        uint64_t v53 = v52[1];
        void *v51 = *v52;
        v51[1] = v53;
        uint64_t v54 = v24[10];
        unint64_t v55 = (uint64_t *)((char *)a1 + v54);
        uint64_t v56 = (uint64_t *)((char *)a2 + v54);
        uint64_t v57 = v56[1];
        *unint64_t v55 = *v56;
        v55[1] = v57;
        uint64_t v58 = v24[11];
        uint64_t v59 = *(uint64_t *)((char *)a2 + v58);
        *(uint64_t *)((char *)a1 + v58) = v59;
        id v60 = v41;
        swift_bridgeObjectRetain(v45);
        swift_bridgeObjectRetain(v49);
        swift_bridgeObjectRetain(v53);
        swift_bridgeObjectRetain(v57);
        swift_bridgeObjectRetain(v59);
        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 2LL;
        goto LABEL_20;
      case 3u:
        unint64_t v31 = a2[1];
        if (v31 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }

        else
        {
          uint64_t v39 = *a2;
          sub_100014244(v39, v31);
          *a1 = v39;
          a1[1] = v31;
        }

        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 3LL;
        goto LABEL_20;
      case 4u:
        uint64_t v32 = a2[1];
        *a1 = *a2;
        a1[1] = v32;
        *((_BYTE *)a1 + sub_10000BDD4(v0 + 16) = *((_BYTE *)a2 + 16);
        swift_bridgeObjectRetain(v32);
        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 4LL;
        goto LABEL_20;
      case 5u:
        uint64_t v33 = a2[1];
        *a1 = *a2;
        a1[1] = v33;
        uint64_t v34 = a2[2];
        uint64_t v35 = a2[3];
        a1[2] = v34;
        a1[3] = v35;
        swift_bridgeObjectRetain(v33);
        swift_bridgeObjectRetain(v35);
        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 5LL;
        goto LABEL_20;
      case 0xAu:
        uint64_t v36 = a2[1];
        *a1 = *a2;
        a1[1] = v36;
        swift_bridgeObjectRetain(v36);
        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 10LL;
        goto LABEL_20;
      case 0xBu:
        uint64_t v37 = a2[1];
        *a1 = *a2;
        a1[1] = v37;
        swift_bridgeObjectRetain(v37);
        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 11LL;
        goto LABEL_20;
      case 0xCu:
        uint64_t v38 = a2[1];
        *a1 = *a2;
        a1[1] = v38;
        *((_BYTE *)a1 + sub_10000BDD4(v0 + 16) = *((_BYTE *)a2 + 16);
        swift_bridgeObjectRetain(v38);
        uint64_t v18 = a1;
        uint64_t v19 = a3;
        uint64_t v20 = 12LL;
LABEL_20:
        swift_storeEnumTagMultiPayload(v18, v19, v20);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

uint64_t sub_10002E380(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_2;
    case 1:
    case 4:
    case 10:
    case 11:
    case 12:
      goto LABEL_2;
    case 2:

      uint64_t v4 = type metadata accessor for LocationContext(0LL);
      uint64_t v5 = a1 + *(int *)(v4 + 20);
      uint64_t v6 = type metadata accessor for Date(0LL);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_2;
    case 3:
      unint64_t v7 = *(void *)(a1 + 8);
      if (v7 >> 60 != 15) {
        return sub_100010A30(*(void *)a1, v7);
      }
      return result;
    case 5:
      swift_bridgeObjectRelease();
LABEL_2:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }

  return result;
}

uint64_t *sub_10002E4FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      uint64_t v7 = a2[3];
      a1[2] = a2[2];
      a1[3] = v7;
      uint64_t v8 = a2[5];
      a1[4] = a2[4];
      a1[5] = v8;
      *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
      uint64_t v9 = a2[8];
      a1[7] = a2[7];
      a1[8] = v9;
      uint64_t v10 = a2[10];
      a1[9] = a2[9];
      a1[10] = v10;
      uint64_t v12 = a2[11];
      uint64_t v11 = a2[12];
      a1[11] = v12;
      a1[12] = v11;
      uint64_t v14 = a2[13];
      uint64_t v13 = a2[14];
      a1[13] = v14;
      a1[14] = v13;
      uint64_t v15 = a2[15];
      a1[15] = v15;
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v15);
      uint64_t v16 = a1;
      uint64_t v17 = a3;
      uint64_t v18 = 0LL;
      goto LABEL_18;
    case 1u:
      uint64_t v19 = a2[1];
      *a1 = *a2;
      a1[1] = v19;
      swift_bridgeObjectRetain(v19);
      uint64_t v16 = a1;
      uint64_t v17 = a3;
      uint64_t v18 = 1LL;
      goto LABEL_18;
    case 2u:
      uint64_t v20 = (void *)*a2;
      *a1 = *a2;
      uint64_t v21 = (int *)type metadata accessor for LocationContext(0LL);
      uint64_t v22 = v21[5];
      uint64_t v23 = (char *)a1 + v22;
      uint64_t v24 = (char *)a2 + v22;
      uint64_t v25 = type metadata accessor for Date(0LL);
      id v26 = v20;
      if (sub_100010708((uint64_t)v24, 1LL, v25))
      {
        uint64_t v27 = sub_10000941C(&qword_1001D32B0);
        memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16LL))(v23, v24, v25);
        sub_100009654((uint64_t)v23, 0LL, 1LL, v25);
      }

      uint64_t v37 = v21[6];
      uint64_t v38 = *(void **)((char *)a2 + v37);
      *(uint64_t *)((char *)a1 + v37) = (uint64_t)v38;
      uint64_t v39 = v21[7];
      uint64_t v40 = (uint64_t *)((char *)a1 + v39);
      uint64_t v41 = (uint64_t *)((char *)a2 + v39);
      uint64_t v42 = v41[1];
      *uint64_t v40 = *v41;
      v40[1] = v42;
      uint64_t v43 = v21[8];
      uint64_t v44 = (uint64_t *)((char *)a1 + v43);
      uint64_t v45 = (uint64_t *)((char *)a2 + v43);
      uint64_t v46 = v45[1];
      *uint64_t v44 = *v45;
      v44[1] = v46;
      uint64_t v47 = v21[9];
      uint64_t v48 = (uint64_t *)((char *)a1 + v47);
      uint64_t v49 = (uint64_t *)((char *)a2 + v47);
      uint64_t v50 = v49[1];
      *uint64_t v48 = *v49;
      v48[1] = v50;
      uint64_t v51 = v21[10];
      uint64_t v52 = (uint64_t *)((char *)a1 + v51);
      uint64_t v53 = (uint64_t *)((char *)a2 + v51);
      uint64_t v54 = v53[1];
      *uint64_t v52 = *v53;
      v52[1] = v54;
      uint64_t v55 = v21[11];
      uint64_t v56 = *(uint64_t *)((char *)a2 + v55);
      *(uint64_t *)((char *)a1 + v55) = v56;
      id v57 = v38;
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRetain(v54);
      swift_bridgeObjectRetain(v56);
      uint64_t v16 = a1;
      uint64_t v17 = a3;
      uint64_t v18 = 2LL;
      goto LABEL_18;
    case 3u:
      unint64_t v28 = a2[1];
      if (v28 >> 60 == 15)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }

      else
      {
        uint64_t v36 = *a2;
        sub_100014244(v36, v28);
        *a1 = v36;
        a1[1] = v28;
      }

      uint64_t v16 = a1;
      uint64_t v17 = a3;
      uint64_t v18 = 3LL;
      goto LABEL_18;
    case 4u:
      uint64_t v29 = a2[1];
      *a1 = *a2;
      a1[1] = v29;
      *((_BYTE *)a1 + sub_10000BDD4(v0 + 16) = *((_BYTE *)a2 + 16);
      swift_bridgeObjectRetain(v29);
      uint64_t v16 = a1;
      uint64_t v17 = a3;
      uint64_t v18 = 4LL;
      goto LABEL_18;
    case 5u:
      uint64_t v30 = a2[1];
      *a1 = *a2;
      a1[1] = v30;
      uint64_t v31 = a2[2];
      uint64_t v32 = a2[3];
      a1[2] = v31;
      a1[3] = v32;
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v32);
      uint64_t v16 = a1;
      uint64_t v17 = a3;
      uint64_t v18 = 5LL;
      goto LABEL_18;
    case 0xAu:
      uint64_t v33 = a2[1];
      *a1 = *a2;
      a1[1] = v33;
      swift_bridgeObjectRetain(v33);
      uint64_t v16 = a1;
      uint64_t v17 = a3;
      uint64_t v18 = 10LL;
      goto LABEL_18;
    case 0xBu:
      uint64_t v34 = a2[1];
      *a1 = *a2;
      a1[1] = v34;
      swift_bridgeObjectRetain(v34);
      uint64_t v16 = a1;
      uint64_t v17 = a3;
      uint64_t v18 = 11LL;
      goto LABEL_18;
    case 0xCu:
      uint64_t v35 = a2[1];
      *a1 = *a2;
      a1[1] = v35;
      *((_BYTE *)a1 + sub_10000BDD4(v0 + 16) = *((_BYTE *)a2 + 16);
      swift_bridgeObjectRetain(v35);
      uint64_t v16 = a1;
      uint64_t v17 = a3;
      uint64_t v18 = 12LL;
LABEL_18:
      swift_storeEnumTagMultiPayload(v16, v17, v18);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

uint64_t *sub_10002E860(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10002EC64((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        *a1 = *a2;
        uint64_t v6 = a2[1];
        a1[1] = v6;
        a1[2] = a2[2];
        uint64_t v7 = a2[3];
        a1[3] = v7;
        a1[4] = a2[4];
        uint64_t v8 = a2[5];
        a1[5] = v8;
        *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
        a1[7] = a2[7];
        uint64_t v9 = a2[8];
        a1[8] = v9;
        a1[9] = a2[9];
        uint64_t v10 = a2[10];
        a1[10] = v10;
        uint64_t v11 = a2[11];
        a1[11] = v11;
        a1[12] = a2[12];
        uint64_t v12 = a2[13];
        a1[13] = v12;
        a1[14] = a2[14];
        uint64_t v13 = a2[15];
        a1[15] = v13;
        swift_bridgeObjectRetain(v6);
        swift_bridgeObjectRetain(v7);
        swift_bridgeObjectRetain(v8);
        swift_bridgeObjectRetain(v9);
        swift_bridgeObjectRetain(v10);
        swift_bridgeObjectRetain(v11);
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v13);
        uint64_t v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 0LL;
        goto LABEL_19;
      case 1u:
        *a1 = *a2;
        uint64_t v17 = a2[1];
        a1[1] = v17;
        swift_bridgeObjectRetain(v17);
        uint64_t v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 1LL;
        goto LABEL_19;
      case 2u:
        uint64_t v18 = (void *)*a2;
        *a1 = *a2;
        uint64_t v19 = (int *)type metadata accessor for LocationContext(0LL);
        uint64_t v20 = v19[5];
        uint64_t v21 = (char *)a1 + v20;
        uint64_t v22 = (char *)a2 + v20;
        uint64_t v23 = type metadata accessor for Date(0LL);
        id v24 = v18;
        if (sub_100010708((uint64_t)v22, 1LL, v23))
        {
          uint64_t v25 = sub_10000941C(&qword_1001D32B0);
          memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16LL))(v21, v22, v23);
          sub_100009654((uint64_t)v21, 0LL, 1LL, v23);
        }

        uint64_t v34 = v19[6];
        uint64_t v35 = *(void **)((char *)a2 + v34);
        *(uint64_t *)((char *)a1 + v34) = (uint64_t)v35;
        uint64_t v36 = v19[7];
        uint64_t v37 = (uint64_t *)((char *)a1 + v36);
        uint64_t v38 = (uint64_t *)((char *)a2 + v36);
        void *v37 = *v38;
        uint64_t v39 = v38[1];
        v37[1] = v39;
        uint64_t v40 = v19[8];
        uint64_t v41 = (uint64_t *)((char *)a1 + v40);
        uint64_t v42 = (uint64_t *)((char *)a2 + v40);
        *uint64_t v41 = *v42;
        uint64_t v43 = v42[1];
        v41[1] = v43;
        uint64_t v44 = v19[9];
        uint64_t v45 = (uint64_t *)((char *)a1 + v44);
        uint64_t v46 = (uint64_t *)((char *)a2 + v44);
        *uint64_t v45 = *v46;
        uint64_t v47 = v46[1];
        v45[1] = v47;
        uint64_t v48 = v19[10];
        uint64_t v49 = (uint64_t *)((char *)a1 + v48);
        uint64_t v50 = (uint64_t *)((char *)a2 + v48);
        *uint64_t v49 = *v50;
        uint64_t v51 = v50[1];
        v49[1] = v51;
        uint64_t v52 = v19[11];
        uint64_t v53 = *(uint64_t *)((char *)a2 + v52);
        *(uint64_t *)((char *)a1 + v52) = v53;
        id v54 = v35;
        swift_bridgeObjectRetain(v39);
        swift_bridgeObjectRetain(v43);
        swift_bridgeObjectRetain(v47);
        swift_bridgeObjectRetain(v51);
        swift_bridgeObjectRetain(v53);
        uint64_t v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 2LL;
        goto LABEL_19;
      case 3u:
        unint64_t v26 = a2[1];
        if (v26 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }

        else
        {
          uint64_t v33 = *a2;
          sub_100014244(v33, v26);
          *a1 = v33;
          a1[1] = v26;
        }

        uint64_t v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 3LL;
        goto LABEL_19;
      case 4u:
        *a1 = *a2;
        uint64_t v27 = a2[1];
        a1[1] = v27;
        *((_BYTE *)a1 + sub_10000BDD4(v0 + 16) = *((_BYTE *)a2 + 16);
        swift_bridgeObjectRetain(v27);
        uint64_t v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 4LL;
        goto LABEL_19;
      case 5u:
        *a1 = *a2;
        uint64_t v28 = a2[1];
        a1[1] = v28;
        a1[2] = a2[2];
        uint64_t v29 = a2[3];
        a1[3] = v29;
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRetain(v29);
        uint64_t v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 5LL;
        goto LABEL_19;
      case 0xAu:
        *a1 = *a2;
        uint64_t v30 = a2[1];
        a1[1] = v30;
        swift_bridgeObjectRetain(v30);
        uint64_t v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 10LL;
        goto LABEL_19;
      case 0xBu:
        *a1 = *a2;
        uint64_t v31 = a2[1];
        a1[1] = v31;
        swift_bridgeObjectRetain(v31);
        uint64_t v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 11LL;
        goto LABEL_19;
      case 0xCu:
        *a1 = *a2;
        uint64_t v32 = a2[1];
        a1[1] = v32;
        *((_BYTE *)a1 + sub_10000BDD4(v0 + 16) = *((_BYTE *)a2 + 16);
        swift_bridgeObjectRetain(v32);
        uint64_t v14 = a1;
        uint64_t v15 = a3;
        uint64_t v16 = 12LL;
LABEL_19:
        swift_storeEnumTagMultiPayload(v14, v15, v16);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

uint64_t sub_10002EC64(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_10002ECA0(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
  {
    *a1 = *a2;
    uint64_t v6 = (int *)type metadata accessor for LocationContext(0LL);
    uint64_t v7 = v6[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date(0LL);
    if (sub_100010708((uint64_t)v9, 1LL, v10))
    {
      uint64_t v11 = sub_10000941C(&qword_1001D32B0);
      memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
      sub_100009654((uint64_t)v8, 0LL, 1LL, v10);
    }

    *(void *)((char *)a1 + v6[6]) = *(void *)((char *)a2 + v6[6]);
    *(_OWORD *)((char *)a1 + v6[7]) = *(_OWORD *)((char *)a2 + v6[7]);
    *(_OWORD *)((char *)a1 + v6[8]) = *(_OWORD *)((char *)a2 + v6[8]);
    *(_OWORD *)((char *)a1 + v6[9]) = *(_OWORD *)((char *)a2 + v6[9]);
    *(_OWORD *)((char *)a1 + v6[10]) = *(_OWORD *)((char *)a2 + v6[10]);
    *(void *)((char *)a1 + v6[11]) = *(void *)((char *)a2 + v6[11]);
    swift_storeEnumTagMultiPayload(a1, a3, 2LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *sub_10002EDF4(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10002EC64((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
    {
      *a1 = *a2;
      uint64_t v6 = (int *)type metadata accessor for LocationContext(0LL);
      uint64_t v7 = v6[5];
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for Date(0LL);
      if (sub_100010708((uint64_t)v9, 1LL, v10))
      {
        uint64_t v11 = sub_10000941C(&qword_1001D32B0);
        memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
        sub_100009654((uint64_t)v8, 0LL, 1LL, v10);
      }

      *(void *)((char *)a1 + v6[6]) = *(void *)((char *)a2 + v6[6]);
      *(_OWORD *)((char *)a1 + v6[7]) = *(_OWORD *)((char *)a2 + v6[7]);
      *(_OWORD *)((char *)a1 + v6[8]) = *(_OWORD *)((char *)a2 + v6[8]);
      *(_OWORD *)((char *)a1 + v6[9]) = *(_OWORD *)((char *)a2 + v6[9]);
      *(_OWORD *)((char *)a1 + v6[10]) = *(_OWORD *)((char *)a2 + v6[10]);
      *(void *)((char *)a1 + v6[11]) = *(void *)((char *)a2 + v6[11]);
      swift_storeEnumTagMultiPayload(a1, a3, 2LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_10002EF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_10002EF74(uint64_t a1)
{
  v4[0] = &unk_10015E448;
  v4[1] = &unk_10015E420;
  uint64_t result = type metadata accessor for LocationContext(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    v4[3] = &unk_10015E0D8;
    v4[4] = &unk_10015E460;
    id v4[5] = &unk_10015E478;
    void v4[6] = &unk_10015E0F0;
    v4[7] = &unk_10015E0F0;
    void v4[8] = &unk_10015E0F0;
    void v4[9] = &unk_10015E490;
    void v4[10] = &unk_10015E420;
    v4[11] = &unk_10015E090;
    v4[12] = &unk_10015E460;
    v4[13] = &unk_10015E0F0;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 14LL, v4);
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for PegasusContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xE0)
  {
    if (a2 + 32 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 32) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 33;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for PegasusContext.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 32 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 32) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xE0) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xDF) {
    return ((uint64_t (*)(void))((char *)&loc_10002F104 + 4 * byte_10015DF9C[v4]))();
  }
  *a1 = a2 + 32;
  return ((uint64_t (*)(void))((char *)sub_10002F138 + 4 * byte_10015DF97[v4]))();
}

uint64_t sub_10002F138(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002F140(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10002F148LL);
  }
  return result;
}

uint64_t sub_10002F154(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10002F15CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 32;
  return result;
}

uint64_t sub_10002F160(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002F168(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PegasusContext.CodingKeys()
{
  return &type metadata for PegasusContext.CodingKeys;
}

uint64_t getEnumTagSinglePayload for CountryCodeSource(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }

uint64_t sub_10002F20C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10002F258 + 4 * byte_10015DFA6[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10002F28C + 4 * byte_10015DFA1[v4]))();
}

uint64_t sub_10002F28C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002F294(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10002F29CLL);
  }
  return result;
}

uint64_t sub_10002F2A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10002F2B0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_10002F2B4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002F2BC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for TransportationMode()
{
}

unint64_t sub_10002F2D8()
{
  unint64_t result = qword_1001D2348;
  if (!qword_1001D2348)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015E504, &unk_1001B2BD8);
    atomic_store(result, (unint64_t *)&qword_1001D2348);
  }

  return result;
}

unint64_t sub_10002F318()
{
  unint64_t result = qword_1001D2350;
  if (!qword_1001D2350)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015E5BC, &type metadata for PegasusContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D2350);
  }

  return result;
}

unint64_t sub_10002F358()
{
  unint64_t result = qword_1001D2358;
  if (!qword_1001D2358)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015E52C, &type metadata for PegasusContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D2358);
  }

  return result;
}

unint64_t sub_10002F398()
{
  unint64_t result = qword_1001D2360[0];
  if (!qword_1001D2360[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10015E554, &type metadata for PegasusContext.CodingKeys);
    atomic_store(result, qword_1001D2360);
  }

  return result;
}

uint64_t destroy for SubscriptionProvider.SubscriptionState(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

void *sub_10002F3FC(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *sub_10002F438(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *sub_10002F4A4(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t _s9SwiftAvro9AvroArrayVwet_0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10002F528(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + sub_10000BDD4(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for SilhouetteContext()
{
}

void sub_10002F574(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + sub_10000BDD4(v0 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  sub_100009A90();
}

uint64_t assignWithCopy for StorefrontAccount(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + sub_10000BDD4(v0 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

void sub_10002F5F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + sub_10000BDD4(v0 + 16) = *(_BYTE *)(a2 + 16);
  sub_100009A90();
}

uint64_t sub_10002F630(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 17)) {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else {
      sub_10002FC58();
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10002F678(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + sub_10000BDD4(v0 + 16) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

void type metadata accessor for CountryCodeContext()
{
}

void type metadata accessor for TimeZoneContext()
{
}

uint64_t sub_10002F6E4(void *a1)
{
  return swift_bridgeObjectRelease(a1[15]);
}

uint64_t sub_10002F73C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + sub_10000BDD4(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + sub_10000BDD4(v0 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  uint64_t v9 = *(void *)(a2 + 88);
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = v9;
  *(void *)(a1 + 96) = v8;
  uint64_t v11 = *(void *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = v11;
  *(void *)(a1 + 112) = v10;
  uint64_t v12 = *(void *)(a2 + 120);
  *(void *)(a1 + 120) = v12;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t sub_10002F7F8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + sub_10000BDD4(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + sub_10000BDD4(v0 + 56) = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 88);
  uint64_t v15 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v16 = *(void *)(a2 + 104);
  uint64_t v17 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  uint64_t v18 = *(void *)(a2 + 120);
  uint64_t v19 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  return a1;
}

void *sub_10002F924(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x80uLL);
}

uint64_t sub_10002F92C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + sub_10000BDD4(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a1 + 64);
  *(void *)(a1 + sub_10000BDD4(v0 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v10;
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease(*(void *)(a1 + 80));
  uint64_t v12 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(void *)(a2 + 104);
  uint64_t v14 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v13;
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)(a2 + 120);
  uint64_t v16 = *(void *)(a1 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v15;
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t sub_10002F9D8(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 128))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10002FA18(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0LL;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + sub_10000BDD4(v0 + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 128) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for LocalContext()
{
}

uint64_t sub_10002FA88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - 96) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 96, v3);
}

uint64_t sub_10002FAA0@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  *(_BYTE *)(v3 - 96) = a2;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, v3 - 96, v2);
}

uint64_t sub_10002FAB8(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_10002FAC8()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_10002FAD4@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + a1);
}

uint64_t sub_10002FAE0@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(v1 + a1 + 8));
}

uint64_t sub_10002FAEC()
{
  return type metadata accessor for PegasusContext(0LL);
}

uint64_t sub_10002FAF8()
{
  return v0;
}

void sub_10002FB10(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)(v1 + a1);
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
}

uint64_t sub_10002FB1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_10002FB2C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10002FB3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_10002FB4C(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t sub_10002FB5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100010708(a1, a2, a3);
}

uint64_t sub_10002FB68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_10002FB74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100009654(a1, a2, a3, a4);
}

void *sub_10002FB80()
{
  return sub_100019AFC(v0, v0[3]);
}

uint64_t sub_10002FBA0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

  ;
}

  ;
}

uint64_t sub_10002FBD4(uint64_t a1)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v1);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10002FC0C@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(v1 + a1 + 8));
}

uint64_t sub_10002FC18@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(v1 + a1 + 8));
}

uint64_t sub_10002FC24()
{
  return v0 - 96;
}

uint64_t sub_10002FC38()
{
  return swift_release(*(void *)(v0 - 72));
}

uint64_t sub_10002FC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100009654(a1, 1LL, 1LL, a4);
}

uint64_t sub_10002FC4C@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + 8 * a1);
}

  ;
}

uint64_t sub_10002FC74()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

id sub_10002FC8C()
{
  return [v0 *(SEL *)(v1 + 528)];
}

uint64_t sub_10002FC98()
{
  return v0 - 96;
}

uint64_t sub_10002FCAC(uint64_t a1)
{
  v2[0] = "\b";
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 2LL, v2, a1 + 88);
}

uint64_t sub_10002FCF8()
{
  return v0;
}

uint64_t sub_10002FD1C()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for ReferenceTracker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReferenceTracker);
}

uint64_t sub_10002FD48()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C180(v0, qword_1001EDAC0);
  sub_1000093D0(v0, (uint64_t)qword_1001EDAC0);
  return Logger.init(subsystem:category:)( 0x636573726170LL,  0xE600000000000000LL,  0x614E746E65696C43LL,  0xEA0000000000656DLL);
}

void sub_10002FDB8()
{
  qword_1001EDAD8 = (uint64_t)&off_1001B0678;
}

uint64_t static ClientName.extractClientNameFromUserAgent(_:allowAbbreviation:)( uint64_t a1, unint64_t a2, char a3)
{
  if (!a2) {
    return a1;
  }
  Swift::String v6 = String.lowercased()();
  id v7 = objc_allocWithZone(&OBJC_CLASS___NSRegularExpression);
  id v8 = sub_100030708(0xD000000000000016LL, 0x800000010016CE50LL, 0LL);
  if (!v8)
  {
    sub_1000145F0();
    return 0LL;
  }

  id v9 = v8;
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 =  objc_msgSend( v9,  "matchesInString:options:range:",  v10,  0,  0,  String.count.getter(v6._countAndFlagsBits, v6._object));

  unint64_t v12 = sub_100030EE4();
  uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0) {
      uint64_t v57 = v13;
    }
    else {
      uint64_t v57 = v13 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v13);
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v57);
    sub_100009B3C();
  }

  else
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v14 > 0)
  {
    if ((v13 & 0xC000000000000001LL) != 0)
    {
      id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v13);
      goto LABEL_9;
    }

    if (*(void *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      id v15 = *(id *)(v13 + 32);
LABEL_9:
      uint64_t v16 = v15;
      sub_100009B3C();
      id v17 = [v16 rangeAtIndex:3];
      uint64_t v19 = v18;

      uint64_t v20 = Range<>.init(_:in:)(v17, v19, v6._countAndFlagsBits, v6._object);
      if ((v22 & 1) == 0)
      {
        uint64_t v23 = String.subscript.getter(v20, v21, v6._countAndFlagsBits, v6._object);
        uint64_t v25 = v24;
        uint64_t v27 = v26;
        uint64_t v29 = v28;
        sub_1000145F0();
        uint64_t v30 = static String._fromSubstring(_:)(v23, v25, v27, v29);
        uint64_t v32 = v31;
        sub_10001450C();
        uint64_t v33 = static ClientName.extractClientNameFromString(_:)(v30, v32);
        uint64_t v35 = v34;
        sub_100009B3C();

        if (v35) {
          return v33;
        }
        else {
          return 0x64636573726170LL;
        }
      }

      sub_1000145F0();
      goto LABEL_28;
    }

    __break(1u);
    goto LABEL_39;
  }

  sub_100009B3C();
  sub_1000145F0();
  if (qword_1001D04A0 != -1) {
LABEL_39:
  }
    swift_once(&qword_1001D04A0, sub_10002FD48);
  uint64_t v36 = type metadata accessor for Logger(0LL);
  sub_1000093D0(v36, (uint64_t)qword_1001EDAC0);
  uint64_t v37 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v40 = static os_log_type_t.error.getter(v38, v39);
  if (os_log_type_enabled(v38, v40))
  {
    uint64_t v41 = (uint8_t *)sub_100009B20(12LL);
    id v58 = v9;
    uint64_t v42 = sub_100009B20(32LL);
    v59[0] = v42;
    *(_DWORD *)uint64_t v41 = 136315138;
    swift_bridgeObjectRetain(a2);
    sub_1000307E0(a1, a2, v59);
    sub_100030F88();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v43, v44, v41 + 4);
    swift_bridgeObjectRelease_n(a2, 3LL);
    sub_100014564((void *)&_mh_execute_header, v38, v40, "Couldn't find a match for regex in userAgent: %s", v41);
    sub_100030F9C(v42);
    uint64_t v45 = v42;
    id v9 = v58;
    sub_100010C34(v45);
    sub_100010C34((uint64_t)v41);

    if ((a3 & 1) == 0) {
      goto LABEL_28;
    }
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    if ((a3 & 1) == 0)
    {
LABEL_28:

      return 0LL;
    }
  }

  uint64_t v46 = static ClientName.extractClientNameFromString(_:)(a1, a2);
  if (v47) {
    a1 = v46;
  }
  else {
    a1 = 0x64636573726170LL;
  }
  if (v47) {
    unint64_t v48 = v47;
  }
  else {
    unint64_t v48 = 0xE700000000000000LL;
  }
  uint64_t v49 = swift_bridgeObjectRetain_n(v48, 2LL);
  uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
  os_log_type_t v51 = static os_log_type_t.default.getter(v50);
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v52 = (uint8_t *)sub_100009B20(12LL);
    uint64_t v53 = sub_100009B20(32LL);
    v59[0] = v53;
    *(_DWORD *)uint64_t v52 = 136315138;
    swift_bridgeObjectRetain(v48);
    uint64_t v54 = sub_1000307E0(a1, v48, v59);
    sub_100030F6C(v54, v55);
    swift_bridgeObjectRelease_n(v48, 3LL);
    sub_100014564((void *)&_mh_execute_header, v50, v51, "Allows matching abbreviated user agent. ClientName: %s", v52);
    sub_100030F9C(v53);
    sub_100010C34(v53);
    sub_100010C34((uint64_t)v52);
  }

  else
  {

    swift_bridgeObjectRelease_n(v48, 2LL);
  }

  return a1;
}

uint64_t static ClientName.extractClientNameFromString(_:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    Swift::String v3 = String.lowercased()();
    if (qword_1001D04A8 != -1) {
      swift_once(&qword_1001D04A8, sub_10002FDB8);
    }
    uint64_t v4 = qword_1001EDAD8;
    uint64_t v5 = *(void *)(qword_1001EDAD8 + 16);
    if (v5)
    {
      swift_bridgeObjectRetain(qword_1001EDAD8);
      unint64_t v6 = sub_1000106CC();
      id v7 = (unint64_t *)(v4 + 40);
      while (1)
      {
        a1 = *(v7 - 1);
        unint64_t v8 = *v7;
        Swift::String v14 = v3;
        uint64_t v12 = a1;
        unint64_t v13 = v8;
        swift_bridgeObjectRetain(v8);
        if ((StringProtocol.contains<A>(_:)(&v12, &type metadata for String, &type metadata for String, v6, v6) & 1) != 0) {
          break;
        }
        v7 += 2;
        swift_bridgeObjectRelease();
        if (!--v5)
        {
          sub_10001450C();
          goto LABEL_9;
        }
      }

      swift_bridgeObjectRelease();
      sub_10001450C();
    }

    else
    {
LABEL_9:
      Swift::String v14 = v3;
      uint64_t v12 = 0x64636573726170LL;
      unint64_t v13 = 0xE700000000000000LL;
      unint64_t v9 = sub_1000106CC();
      char v10 = StringProtocol.contains<A>(_:)(&v12, &type metadata for String, &type metadata for String, v9, v9);
      swift_bridgeObjectRelease();
      if ((v10 & 1) != 0) {
        return 0x64636573726170LL;
      }
      else {
        return 0LL;
      }
    }
  }

  return a1;
}

id FlusherClient.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

id ClientName.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClientName();
  return objc_msgSendSuper2(&v2, "init");
}

id ClientName.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClientName();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_100030708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v12 = 0LL;
  id v7 = [v3 initWithPattern:v6 options:a3 error:&v12];

  id v8 = v12;
  if (v7)
  {
    id v9 = v12;
  }

  else
  {
    id v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }

  return v7;
}

uint64_t sub_1000307E0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  NSString v6 = sub_1000308B0(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    id v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100010758((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100010758((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_1000108B8(v12);
  return v7;
}

void *sub_1000308B0(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_100030A04((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
      unint64_t result = 0LL;
      *a1 = __dst;
      return result;
    }

    goto LABEL_11;
  }

  if ((a6 & 0x1000000000000000LL) != 0)
  {
LABEL_11:
    unint64_t result = sub_100030AC8(a5, a6);
    *a1 = v12;
    return result;
  }

  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }

  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      unint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
      __break(1u);
      return result;
    }
  }

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return (void *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

void *sub_100030A04(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    unint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory with negative count",  60LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1170LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    unint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1173LL,  0);
  }

  __break(1u);
  return result;
}

void *sub_100030AC8(uint64_t a1, unint64_t a2)
{
  objc_super v2 = sub_100030B5C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    objc_super v2 = sub_100030CCC(0LL, v2[2] + 1LL, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    objc_super v2 = sub_100030CCC((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  void v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + swift_unknownObjectWeakDestroy(v0 + 32) = 0;
  return v2;
}

void *sub_100030B5C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v4 = String.UTF8View._foreignCount()();
    if (v4) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }

  if ((a2 & 0x2000000000000000LL) != 0) {
    Swift::Int v4 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  sub_1000C9F30(v4, 0LL);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  2,  71LL,  0);
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v6 = v5;
  uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 32, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    LOBYTE(v10) = 2;
    unint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    goto LABEL_15;
  }

  if (v7 == v4) {
    return (void *)v6;
  }
  unint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  2,  1122LL,  0);
LABEL_15:
  __break(1u);
  return result;
}

char *sub_100030CCC(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000941C(&qword_1001D2418);
    id v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    id v11 = (char *)&_swiftEmptyArrayStorage;
  }

  unint64_t v13 = v11 + 32;
  Swift::String v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100030E64(v14, v8, v13);
    *(void *)(a4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_100030DA0(v14, v8, v13);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_100030DA0(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    unint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    unint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

char *sub_100030E64(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000LL) != 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }

  return __src;
}

unint64_t sub_100030EE4()
{
  unint64_t result = qword_1001D23E8;
  if (!qword_1001D23E8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSTextCheckingResult);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001D23E8);
  }

  return result;
}

uint64_t type metadata accessor for ClientName()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd10ClientName);
}

unint64_t sub_100030F44(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > result)
    {
      return result;
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_100030F6C(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v4 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)((uint64_t *)va, va1, v2);
}

  ;
}

uint64_t sub_100030F9C(uint64_t a1)
{
  return swift_arrayDestroy(a1, 1LL);
}

uint64_t sub_100030FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100032578();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100031000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100032578();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void static _CPKnownFeedbackType.allCases.getter()
{
  uint64_t v0 = sub_100031588(0LL, 1LL, 1, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v1 = 0LL;
  unint64_t v2 = *((void *)v0 + 2);
  do
  {
    unint64_t v3 = *((void *)v0 + 3);
    if (v2 >= v3 >> 1) {
      uint64_t v0 = sub_100031588((char *)(v3 > 1), v2 + 1, 1, (uint64_t)v0);
    }
    *((void *)v0 + 2) = v2 + 1;
    *(_DWORD *)&v0[4 * v2++ + 32] = v1++;
  }

  while ((_DWORD)v1 != 19);
  sub_1000110D4();
}

void sub_1000310D8(void *a1@<X8>)
{
  *a1 = v2;
}

void *static _CPKnownFeedbackType.allCustomFeedbackDirectories.getter()
{
  uint64_t v0 = &_swiftEmptyArrayStorage;
  uint64_t v1 = 1LL;
  do
  {
    switch((int)v1)
    {
      case 1:
        uint64_t v2 = @"SafariAutoFill";
        goto LABEL_19;
      case 2:
        uint64_t v2 = @"Crowdsourcing";
        goto LABEL_19;
      case 3:
        uint64_t v2 = @"SpotlightResultFeatures";
        goto LABEL_19;
      case 4:
        uint64_t v2 = @"SafariAutoPlay";
        goto LABEL_19;
      case 5:
        uint64_t v2 = @"Trystero";
        goto LABEL_19;
      case 6:
        uint64_t v2 = @"EngagedCompletionFeatures";
        goto LABEL_19;
      case 7:
        uint64_t v2 = @"ProactiveEventTracker";
        goto LABEL_19;
      case 8:
        uint64_t v2 = @"PhiDES";
        goto LABEL_19;
      case 9:
        uint64_t v2 = @"DuetExpert";
        goto LABEL_19;
      case 10:
        uint64_t v2 = @"UserReport";
        goto LABEL_19;
      case 11:
        uint64_t v2 = @"Usage";
        goto LABEL_19;
      case 12:
        uint64_t v2 = @"FeedbackV2";
        goto LABEL_19;
      case 13:
        uint64_t v2 = @"FeedbackV2PB";
        goto LABEL_19;
      case 14:
        uint64_t v2 = @"ProactiveEventTrackerAggregated";
        goto LABEL_19;
      case 15:
        uint64_t v2 = @"Handwashing";
LABEL_19:
        uint64_t v4 = v2;
        unint64_t v3 = v2;
        break;
      case 16:
        size_t v12 = @"Experiments";
        unint64_t v3 = @"Experiments";
        break;
      case 17:
        unint64_t v13 = @"FeatureQuality";
        unint64_t v3 = @"FeatureQuality";
        break;
      case 18:
        Swift::String v14 = @"OnDeviceAnalytics";
        unint64_t v3 = @"OnDeviceAnalytics";
        break;
      default:
        unint64_t v3 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  v1));
        break;
    }

    char v5 = v3;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v8 = v7;

    if ((swift_isUniquelyReferenced_nonNull_native(v0) & 1) == 0)
    {
      sub_100032688(0, v0[2] + 1LL);
      uint64_t v0 = v15;
    }

    unint64_t v10 = v0[2];
    unint64_t v9 = v0[3];
    if (v10 >= v9 >> 1)
    {
      sub_100032688(v9 > 1, v10 + 1);
      uint64_t v0 = v16;
    }

    uint64_t v1 = (v1 + 1);
    v0[2] = v10 + 1;
    id v11 = (char *)&v0[2 * v10];
    *((void *)v11 + 4) = v6;
    *((void *)v11 + 5) = v8;
  }

  while ((_DWORD)v1 != 19);
  return v0;
}

Swift::Bool __swiftcall _CPKnownFeedbackType.isProtobuf()()
{
  return (v0 & 0xFFFFFFFE) == 10;
}

uint64_t _CPResultType.isSuggestion.getter(unsigned int a1)
{
  return (a1 < 0x16) & (0x238000u >> a1);
}

uint64_t _CPBundleIdentifier.isSuggestion.getter(unsigned int a1)
{
  uint64_t result = 1LL;
  if (a1 > 0x3D || ((1LL << a1) & 0x2044300140C08800LL) == 0)
  {
    unsigned int v3 = a1 - 86;
    if (v3 > 0x15 || ((1 << v3) & 0x230001) == 0) {
      return 0LL;
    }
  }

  return result;
}

void sub_1000313E4(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_1000325D4();
    if (v7 != v8)
    {
      sub_100032614();
      if (v7)
      {
        __break(1u);
        return;
      }

      sub_1000325C4();
    }
  }

  else
  {
    uint64_t v6 = a2;
  }

  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    uint64_t v11 = sub_10000941C(&qword_1001D24A8);
    size_t v12 = (char *)sub_100032600(v11, 16 * v10);
    size_t v13 = j__malloc_size(v12);
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 16);
  }

  else
  {
    size_t v12 = (char *)&_swiftEmptyArrayStorage;
  }

  Swift::String v14 = v12 + 32;
  if ((a1 & 1) != 0)
  {
    sub_1000DAB2C((char *)(a4 + 32), v9, v14);
    sub_1000325B8();
  }

  else
  {
    sub_100031BF0(0LL, v9, (unint64_t)v14, a4);
  }

  sub_1000110D4();
}

void sub_1000314A4()
{
}

void sub_1000314C0()
{
}

void sub_1000314DC()
{
  if ((v2 & 1) != 0)
  {
    sub_1000325D4();
    if (v3 != v4)
    {
      sub_100032614();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_1000325C4();
    }
  }

  sub_100032638();
  if (v1)
  {
    uint64_t v10 = sub_10003260C(v5, v6, v7, v8, v9);
    uint64_t v11 = (const void *)sub_100032600(v10, 16 * v1);
    size_t v12 = j__malloc_size(v11);
    sub_100032658(v12 - 32);
  }

  if ((v0 & 1) != 0)
  {
    sub_10003262C();
    sub_1000325B8();
  }

  else
  {
    uint64_t v13 = sub_100032694();
    sub_1000320D8(v13, v14, v15, v16, v17);
  }

  sub_100019F1C();
}

void sub_100031574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

char *sub_100031588(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000941C(&qword_1001D24B0);
    uint64_t v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  if ((v5 & 1) != 0)
  {
    sub_1000DABF0((char *)(a4 + 32), v8, v13);
    *(void *)(a4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_100031DD8(0LL, v8, v13, a4);
  }

  return v11;
}

unint64_t sub_100031678()
{
  unint64_t result = qword_1001D2420;
  if (!qword_1001D2420)
  {
    uint64_t v1 = sub_1000094A0(&qword_1001D2428);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001D2420);
  }

  return result;
}

uint64_t sub_1000316BC()
{
  return sub_100031870();
}

void sub_1000316D8(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_1000325D4();
    if (v7 != v8)
    {
      sub_100032614();
      if (v7)
      {
        __break(1u);
        return;
      }

      sub_1000325C4();
    }
  }

  else
  {
    uint64_t v6 = a2;
  }

  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    uint64_t v11 = sub_10000941C(&qword_1001D2488);
    size_t v12 = (char *)swift_allocObject(v11, 24 * v10 + 32, 7LL);
    size_t v13 = j__malloc_size(v12);
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 24);
  }

  else
  {
    size_t v12 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v12 + 32;
  if ((a1 & 1) != 0)
  {
    sub_1000DAC54((char *)(a4 + 32), v9, v14);
    sub_1000325B8();
  }

  else
  {
    sub_100031EC8(0LL, v9, (unint64_t)v14, a4);
  }

  sub_100019F1C();
}

void sub_1000317A4()
{
}

void sub_1000317C0()
{
  if ((v2 & 1) != 0)
  {
    sub_1000325D4();
    if (v3 != v4)
    {
      sub_100032614();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_1000325C4();
    }
  }

  sub_100032638();
  if (v1)
  {
    uint64_t v10 = sub_10003260C(v5, v6, v7, v8, v9);
    uint64_t v11 = (const void *)sub_100032600(v10, 32 * v1);
    size_t v12 = j__malloc_size(v11);
    sub_100032658(v12 - 32);
  }

  else
  {
    uint64_t v11 = &_swiftEmptyArrayStorage;
  }

  if ((v0 & 1) != 0)
  {
    sub_10003262C();
    sub_1000325B8();
  }

  else
  {
    sub_100032648(v5, v6, (uint64_t)v11 + 32);
  }

  sub_100019F1C();
}

uint64_t sub_100031854()
{
  return sub_100031870();
}

uint64_t sub_100031870()
{
  if ((v6 & 1) != 0)
  {
    sub_1000325D4();
    if (v10 != v11)
    {
      sub_100032614();
      if (v10)
      {
        __break(1u);
LABEL_23:
        sub_100019F5C();
        uint64_t v30 = "Division by zero";
        uint64_t v31 = 16LL;
LABEL_25:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v30,  v31,  2LL,  "Swift/IntegerTypes.swift",  24LL);
        __break(1u);
        return result;
      }

      sub_1000325C4();
    }
  }

  else
  {
    uint64_t v9 = v5;
  }

  uint64_t v12 = *(void *)(v0 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (!v13)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }

  uint64_t v14 = sub_10003260C(v4, v5, v6, v7, v8);
  uint64_t v15 = *(void *)(v1(0LL) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v19 = (void *)swift_allocObject(v14, v18 + v16 * v13, v17 | 7);
  size_t v20 = j__malloc_size(v19);
  if (!v16) {
    goto LABEL_23;
  }
  if (v20 - v18 == 0x8000000000000000LL && v16 == -1)
  {
    sub_100019F5C();
    uint64_t v30 = "Division results in an overflow";
    uint64_t v31 = 31LL;
    goto LABEL_25;
  }

  uint64_t v19[2] = v12;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_18:
  uint64_t v22 = *(unsigned __int8 *)(*(void *)(v1(0LL) - 8) + 80LL);
  uint64_t v23 = (v22 + 32) & ~v22;
  if ((v3 & 1) != 0)
  {
    v2(v0 + v23, v12, (char *)v19 + v23);
    sub_1000325B8();
  }

  else
  {
    uint64_t v24 = sub_100032694();
    sub_1000322C0(v24, v25, v26, v27, v28);
  }

  return (uint64_t)v19;
}

uint64_t sub_100031A00()
{
  return sub_100031870();
}

void sub_100031A1C()
{
}

void sub_100031A38()
{
}

uint64_t sub_100031A54()
{
  return sub_100031870();
}

void sub_100031A70()
{
}

void sub_100031A8C()
{
  if ((v2 & 1) != 0)
  {
    sub_1000325D4();
    if (v3 != v4)
    {
      sub_100032614();
      if (v3)
      {
        __break(1u);
        return;
      }

      sub_1000325C4();
    }
  }

  sub_100032638();
  if (v1)
  {
    uint64_t v10 = sub_10003260C(v5, v6, v7, v8, v9);
    char v11 = (const void *)sub_100032600(v10, 8 * v1);
    size_t v12 = j__malloc_size(v11);
    sub_100032658(v12 - 32);
  }

  else
  {
    char v11 = &_swiftEmptyArrayStorage;
  }

  if ((v0 & 1) != 0)
  {
    sub_10003262C();
    sub_1000325B8();
  }

  else
  {
    sub_100032648(v5, v6, (uint64_t)v11 + 32);
  }

  sub_100019F1C();
}

void sub_100031B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100031B34( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, char *))
{
  char v8 = a1;
  if ((a3 & 1) != 0)
  {
    sub_1000325D4();
    if (v10 != v11)
    {
      sub_100032614();
      if (v10)
      {
        __break(1u);
        return;
      }

      sub_1000325C4();
    }
  }

  else
  {
    uint64_t v9 = a2;
  }

  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (v13)
  {
    uint64_t v14 = sub_10003260C(a1, a2, a3, a4, a5);
    uint64_t v15 = (char *)swift_allocObject(v14, v13 + 32, 7LL);
    size_t v16 = j__malloc_size(v15);
    *((void *)v15 + 2) = v12;
    *((void *)v15 + 3) = 2 * v16 - 64;
  }

  else
  {
    uint64_t v15 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v17 = v15 + 32;
  if ((v8 & 1) != 0)
  {
    a6(a4 + 32, v12, v17);
    sub_1000325B8();
  }

  else
  {
    sub_1000324C0(0LL, v12, v17, a4);
  }

  sub_100019F1C();
}

uint64_t sub_100031BF0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 16 * a1 + 32;
  unint64_t v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100031CE4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 32 * a1 + 32;
  unint64_t v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100031DD8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = (char *)(a4 + 4 * a1 + 32);
  unint64_t v7 = &__dst[4 * v4];
  if (v6 >= v7 || &v6[4 * v4] <= __dst)
  {
    memcpy(__dst, v6, 4 * v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100031EC8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 24 * a1 + 32;
  unint64_t v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100031FC4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 32 * a1 + 32;
  unint64_t v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    sub_10000941C(&qword_1001D2470);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease();
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000320D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    sub_100019F5C();
    sub_100032678();
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 16 * a1 + 32;
  unint64_t v8 = a3 + 16 * v5;
  if (v7 >= v8 || v7 + 16 * v5 <= a3)
  {
    sub_10003260C(a1, a2, a3, a4, a5);
    swift_arrayInitWithCopy(a3);
    sub_1000325E4();
    return v8;
  }

  sub_100019F5C();
  sub_100032668();
LABEL_11:
  uint64_t result = sub_100032620(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  __break(1u);
  return result;
}

uint64_t sub_1000321B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 8 * a1 + 32;
  unint64_t v7 = a3 + 8 * v4;
  if (v6 >= v7 || v6 + 8 * v4 <= a3)
  {
    type metadata accessor for Name(0LL);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease();
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000322C0( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    sub_100019F5C();
    sub_100032678();
    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(a5(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    sub_1000325E4();
    return v14;
  }

  sub_100019F5C();
  sub_100032668();
LABEL_11:
  uint64_t result = sub_100032620(v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28);
  __break(1u);
  return result;
}

uint64_t sub_1000323AC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 8 * a1 + 32;
  unint64_t v7 = a3 + 8 * v4;
  if (v6 >= v7 || v6 + 8 * v4 <= a3)
  {
    sub_10000941C((uint64_t *)&unk_1001D44D0);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease();
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1000324C0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if ((v4 & 0x8000000000000000LL) != 0)
  {
LABEL_9:
    sub_100019F5C();
    sub_100032678();
    goto LABEL_11;
  }

  uint64_t v5 = (char *)(a4 + a1 + 32);
  unint64_t v6 = &__dst[v4];
  if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
  {
    memcpy(__dst, v5, v4);
    sub_1000325E4();
    return v6;
  }

  sub_100019F5C();
  sub_100032668();
LABEL_11:
  uint64_t result = (char *)sub_100032620(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
  return result;
}

unint64_t sub_100032578()
{
  unint64_t result = qword_1001D2490;
  if (!qword_1001D2490)
  {
    type metadata accessor for _CPKnownFeedbackType(255LL);
    unint64_t result = swift_getWitnessTable(&unk_10015CE40, v1);
    atomic_store(result, (unint64_t *)&qword_1001D2490);
  }

  return result;
}

uint64_t sub_1000325B8()
{
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  return swift_bridgeObjectRelease(v0);
}

  ;
}

  ;
}

uint64_t sub_1000325E4()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t sub_100032600@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return swift_allocObject(a1, a2 + 32, 7LL);
}

uint64_t sub_10003260C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_10000941C(a5);
}

  ;
}

uint64_t sub_100032620( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2LL, a7, 25LL, a9, a10, a11);
}

uint64_t sub_10003262C()
{
  return v1(v0 + 32, v2);
}

  ;
}

uint64_t sub_100032648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return v4(0LL, v5, a3, v3);
}

void sub_100032658(uint64_t a1@<X8>)
{
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

  ;
}

  ;
}

void sub_100032688(char a1, uint64_t a2)
{
}

uint64_t sub_100032694()
{
  return 0LL;
}

uint64_t sub_1000326A8@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 0:
    case 7:
      uint64_t v3 = (unsigned int *)&enum case for Apple_Parsec_Spotlight_V1alpha_TopicType.generic(_:);
      goto LABEL_10;
    case 1:
      uint64_t v3 = (unsigned int *)&enum case for Apple_Parsec_Spotlight_V1alpha_TopicType.media(_:);
      goto LABEL_10;
    case 2:
      uint64_t v3 = (unsigned int *)&enum case for Apple_Parsec_Spotlight_V1alpha_TopicType.entity(_:);
      goto LABEL_10;
    case 3:
      uint64_t v3 = (unsigned int *)&enum case for Apple_Parsec_Spotlight_V1alpha_TopicType.sports(_:);
      goto LABEL_10;
    case 4:
      uint64_t v3 = (unsigned int *)&enum case for Apple_Parsec_Spotlight_V1alpha_TopicType.weather(_:);
      goto LABEL_10;
    case 5:
      uint64_t v3 = (unsigned int *)&enum case for Apple_Parsec_Spotlight_V1alpha_TopicType.flight(_:);
      goto LABEL_10;
    case 6:
      uint64_t v3 = (unsigned int *)&enum case for Apple_Parsec_Spotlight_V1alpha_TopicType.relatedPoi(_:);
      goto LABEL_10;
    case 8:
      uint64_t v3 = (unsigned int *)&enum case for Apple_Parsec_Spotlight_V1alpha_TopicType.webPunchout(_:);
LABEL_10:
      uint64_t v4 = *v3;
      uint64_t v5 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_TopicType(0LL);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104LL))(a2, v4, v5);
      break;
    default:
      type metadata accessor for SFQueryTopicType(0LL);
      int v9 = a1;
      uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v8, &v9, v8, &type metadata for Int32);
      __break(1u);
      break;
  }

  return result;
}

void sub_100032794()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_Topic.WeatherDetail(0LL);
  uint64_t v65 = *(void *)(v2 - 8);
  uint64_t v66 = v2;
  sub_100027160();
  __chkstk_darwin(v3);
  sub_100032C48();
  uint64_t v64 = v4;
  __chkstk_darwin(v5);
  uint64_t v63 = (char *)&v62 - v6;
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  sub_100027160();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_Topic.FlightDetail(0LL);
  uint64_t v68 = *(void *)(v11 - 8);
  uint64_t v69 = v11;
  sub_100027160();
  __chkstk_darwin(v12);
  sub_100032C48();
  uint64_t v67 = v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v62 - v15;
  type metadata accessor for Apple_Parsec_Spotlight_V1alpha_TopicType(0LL);
  sub_100027160();
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Apple_Parsec_Spotlight_V1alpha_TopicContext.init()(v18);
  id v21 = [v0 topic];
  id v22 = [v21 query];

  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v25 = v24;

  sub_100032C24();
  Apple_Parsec_Spotlight_V1alpha_Topic.query.setter(v23, v25);
  sub_100032C3C();
  id v26 = sub_100032C30();
  LODWORD(v22) = [v26 queryType];

  sub_1000326A8((int)v22, (uint64_t)v20);
  sub_100032C24();
  Apple_Parsec_Spotlight_V1alpha_Topic.type.setter(v20);
  sub_100032C3C();
  id v27 = [v1 contextId];
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  uint64_t v30 = v29;

  Apple_Parsec_Spotlight_V1alpha_TopicContext.contextID.setter(v28, v30);
  id v31 = sub_100032C30();
  id v32 = [v31 identifier];

  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  uint64_t v35 = v34;

  sub_100032C24();
  Apple_Parsec_Spotlight_V1alpha_Topic.id.setter(v33, v35);
  sub_100032C3C();
  id v36 = sub_100032C30();
  uint64_t v37 = objc_opt_self(&OBJC_CLASS___SFFlightTopic);
  if (sub_100032C70(v37))
  {
    id v38 = v36;
    uint64_t v39 = Apple_Parsec_Spotlight_V1alpha_Topic.FlightDetail.init()();
    id v40 = sub_100032C5C(v39, "date");
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    double v42 = Date.timeIntervalSince1970.getter(v41);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v10, v71);
    if ((~*(void *)&v42 & 0x7FF0000000000000LL) != 0)
    {
      if (v42 > -1.0)
      {
        if (v42 < 1.84467441e19)
        {
          Apple_Parsec_Spotlight_V1alpha_Topic.FlightDetail.timestamp.setter((unint64_t)v42);
          uint64_t v44 = v67;
          uint64_t v43 = v68;
          uint64_t v45 = v69;
          (*(void (**)(uint64_t, char *, uint64_t))(v68 + 16))(v67, v16, v69);
          sub_100032C24();
          Apple_Parsec_Spotlight_V1alpha_Topic.flight.setter(v44);
          sub_100032C64();

          (*(void (**)(char *, uint64_t))(v43 + 8))(v16, v45);
          return;
        }

        goto LABEL_11;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }

  uint64_t v46 = v63;
  uint64_t v47 = v64;
  uint64_t v49 = v65;
  uint64_t v48 = v66;
  uint64_t v50 = objc_opt_self(&OBJC_CLASS___SFWeatherTopic);
  if (sub_100032C70(v50))
  {
    id v51 = v36;
    uint64_t v52 = Apple_Parsec_Spotlight_V1alpha_Topic.WeatherDetail.init()();
    id v53 = sub_100032C5C(v52, "location");
    [v53 lat];
    double v55 = v54;

    float v56 = v55;
    uint64_t v57 = Apple_Parsec_Spotlight_V1alpha_Topic.WeatherDetail.lat.setter(v56);
    id v58 = sub_100032C5C(v57, "location");
    [v58 lng];
    double v60 = v59;

    float v61 = v60;
    Apple_Parsec_Spotlight_V1alpha_Topic.WeatherDetail.long.setter(v61);
    (*(void (**)(uint64_t, char *, uint64_t))(v49 + 16))(v47, v46, v48);
    sub_100032C24();
    Apple_Parsec_Spotlight_V1alpha_Topic.weather.setter(v47);
    sub_100032C64();

    (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v48);
  }

  else
  {
  }

uint64_t sub_100032C24()
{
  return Apple_Parsec_Spotlight_V1alpha_TopicContext.topic.modify(v0 - 128);
}

id sub_100032C30()
{
  return [v0 *(SEL *)(v1 + 560)];
}

uint64_t sub_100032C3C()
{
  return v0(v1 - 128, 0LL);
}

  ;
}

id sub_100032C5C(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_100032C64()
{
  return v0(v1 - 128, 0LL);
}

uint64_t sub_100032C70(uint64_t a1)
{
  return swift_dynamicCastObjCClass(v1, a1);
}

uint64_t sub_100032C7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)v10.val = a1;
  *(void *)&v10.val[2] = a2;
  *(void *)&v10.val[4] = a3;
  *(void *)&v10.val[6] = a4;
  uint64_t v4 = SecTaskCreateWithAuditToken(0LL, &v10);
  if (v4)
  {
    uint64_t v5 = v4;
    uint32_t CodeSignStatus = SecTaskGetCodeSignStatus(v4);

    int v7 = CodeSignStatus & 1;
    int v8 = (CodeSignStatus >> 18) & 0x100;
  }

  else
  {
    int v8 = 0;
    int v7 = 0;
  }

  return v8 | v7;
}

void sub_100032CF8(uint64_t a1, __int16 a2)
{
  char v2 = HIBYTE(a2);
  Hasher._combine(_:)(a2 & 1);
  Hasher._combine(_:)(v2 & 1);
}

BOOL sub_100032D28(int a1, unsigned int a2)
{
  return ((a1 ^ a2 | ((a1 ^ a2) >> 8)) & 1) == 0;
}

Swift::Int sub_100032D3C(__int16 a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_100032D8C()
{
  if (v0[1]) {
    __int16 v1 = 256;
  }
  else {
    __int16 v1 = 0;
  }
  return sub_100032D3C(v1 | *v0);
}

void sub_100032DA8(uint64_t a1)
{
  if (v1[1]) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  sub_100032CF8(a1, v2 | *v1);
}

Swift::Int sub_100032DC4(uint64_t a1)
{
  Swift::UInt8 v2 = *v1;
  Swift::UInt8 v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL sub_100032E1C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1[1]) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  int v3 = v2 | *a1;
  if (a2[1]) {
    int v4 = 256;
  }
  else {
    int v4 = 0;
  }
  return sub_100032D28(v3, v4 | *a2);
}

uint64_t sub_100032E4C()
{
  unsigned __int16 v1 = sub_100032C7C(v3, v4, v5, v6);
  return v1 & (v1 > 0xFFu);
}

uint64_t sub_100032E94(__int16 a1)
{
  HIBYTE(v10[1]) = -18;
  if ((a1 & 1) != 0) {
    uint64_t v2 = 1702195828LL;
  }
  else {
    uint64_t v2 = 0x65736C6166LL;
  }
  if ((a1 & 1) != 0) {
    unint64_t v3 = 0xE400000000000000LL;
  }
  else {
    unint64_t v3 = 0xE500000000000000LL;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease(v3);
  v5._object = (void *)0x800000010016D290LL;
  v5._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  String.append(_:)(v5);
  if ((a1 & 0x100) != 0) {
    uint64_t v6 = 1702195828LL;
  }
  else {
    uint64_t v6 = 0x65736C6166LL;
  }
  if ((a1 & 0x100) != 0) {
    unint64_t v7 = 0xE400000000000000LL;
  }
  else {
    unint64_t v7 = 0xE500000000000000LL;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease(v7);
  return v10[0];
}

uint64_t sub_100032F90()
{
  if (v0[1]) {
    __int16 v1 = 256;
  }
  else {
    __int16 v1 = 0;
  }
  return sub_100032E94(v1 | *v0);
}

_WORD *initializeBufferWithCopyOfBuffer for RemoteConnectorIdentity(_WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for RemoteConnectorIdentity(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFF)
  {
    if (a2 + 65281 <= 0xFFFEFFFF) {
      int v2 = 2;
    }
    else {
      int v2 = 4;
    }
    if (a2 + 65281 < 0xFF0000) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = *((unsigned __int8 *)a1 + 2);
      if (!*((_BYTE *)a1 + 2)) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 16)) - 65282;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for RemoteConnectorIdentity(_WORD *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000330A0 + 4 * byte_10015E815[v4]))();
  }
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_1000330D4 + 4 * byte_10015E810[v4]))();
}

uint64_t sub_1000330D4(uint64_t result)
{
  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000330DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2) {
    JUMPOUT(0x1000330E4LL);
  }
  return result;
}

uint64_t sub_1000330F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2) {
    JUMPOUT(0x1000330F8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000330FC(uint64_t result)
{
  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_100033104(uint64_t result)
{
  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemoteConnectorIdentity()
{
  return &type metadata for RemoteConnectorIdentity;
}

unint64_t sub_100033124()
{
  unint64_t result = qword_1001D24B8;
  if (!qword_1001D24B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015E868, &type metadata for RemoteConnectorIdentity);
    atomic_store(result, (unint64_t *)&qword_1001D24B8);
  }

  return result;
}

void sub_100033160()
{
  __int16 v1 = v0;
  uint64_t v2 = type metadata accessor for PegasusClientName(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int v5 = (char *)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NSString v6 = sub_100034268();
  id v7 = [v1 integerForKey:v6];

  switch((unint64_t)v7)
  {
    case 2uLL:
    case 3uLL:
    case 4uLL:
      NSString v22 = String._bridgeToObjectiveC()();
      sub_10003421C((uint64_t)v22, "removeObjectForKey:");

      break;
    case 5uLL:
      break;
    default:
      v37[1] = "parsecd.UserDefaultsManager";
      id v38 = v1;
      uint64_t v8 = sub_10000941C(&qword_1001D24F8);
      uint64_t v9 = *(void *)(v3 + 72);
      uint64_t v10 = *(unsigned __int8 *)(v3 + 80);
      uint64_t v11 = (v10 + 32) & ~v10;
      uint64_t v12 = 6LL;
      uint64_t v13 = swift_allocObject(v8, v11 + 6 * v9, v10 | 7);
      *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015E8D0;
      v37[0] = v13;
      uint64_t v14 = v13 + v11;
      sub_100034260(v13 + v11, enum case for PegasusClientName.Safari(_:));
      sub_100034260(v14 + v9, enum case for PegasusClientName.Spotlight(_:));
      sub_100034260(v14 + 2 * v9, enum case for PegasusClientName.Lookup(_:));
      sub_100034260(v14 + 3 * v9, enum case for PegasusClientName.Messages(_:));
      sub_100034260(v14 + 4 * v9, enum case for PegasusClientName.News(_:));
      uint64_t v40 = v9;
      sub_100034260(v14 + 5 * v9, enum case for PegasusClientName.Siri(_:));
      double v42 = (char *)&_swiftEmptyArrayStorage;
      sub_1000AFA34(0, 6LL, 0);
      uint64_t v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
      uint64_t v41 = v3;
      do
      {
        uint64_t v15 = v39(v5, v14, v2);
        PegasusClientName.rawValue.getter(v15);
        uint64_t v17 = v16;
        Swift::String v18 = String.lowercased()();
        swift_bridgeObjectRelease(v17);
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        uint64_t v19 = v42;
        if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
        {
          sub_1000AFA34(0, *((void *)v19 + 2) + 1LL, 1);
          uint64_t v19 = v42;
        }

        unint64_t v21 = *((void *)v19 + 2);
        unint64_t v20 = *((void *)v19 + 3);
        if (v21 >= v20 >> 1)
        {
          sub_1000AFA34(v20 > 1, v21 + 1, 1);
          uint64_t v19 = v42;
        }

        *((void *)v19 + 2) = v21 + 1;
        *(Swift::String *)&v19[16 * v21 + 32] = v18;
        uint64_t v3 = v41;
        v14 += v40;
        --v12;
      }

      while (v12);
      swift_setDeallocating(v37[0]);
      sub_1000BC6EC();
      uint64_t v23 = *((void *)v19 + 2);
      __int16 v1 = v38;
      if (v23)
      {
        swift_retain(v19);
        uint64_t v24 = (void **)(v19 + 40);
        do
        {
          uint64_t v25 = (uint64_t)*(v24 - 1);
          id v26 = *v24;
          double v42 = (char *)0xD000000000000017LL;
          unint64_t v43 = 0x800000010016D3C0LL;
          swift_bridgeObjectRetain(v26);
          v27._uint64_t countAndFlagsBits = v25;
          v27._object = v26;
          String.append(_:)(v27);
          unint64_t v28 = v43;
          NSString v29 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v28);
          [v1 removeObjectForKey:v29];
          sub_10001450C();

          v24 += 2;
          --v23;
        }

        while (v23);
        swift_release(v19);
      }

      swift_release(v19);
      NSString v30 = String._bridgeToObjectiveC()();
      sub_10003421C((uint64_t)v30, "removeObjectForKey:");

      NSString v31 = sub_100034228();
      sub_100034208((uint64_t)v31);

      NSString v32 = sub_100034228();
      sub_100034208((uint64_t)v32);

      NSString v33 = String._bridgeToObjectiveC()();
      sub_100034208((uint64_t)v33);

      NSString v34 = sub_100034228();
      sub_100034208((uint64_t)v34);

      NSString v35 = sub_100034228();
      sub_100034208((uint64_t)v35);

      break;
  }

  NSString v36 = sub_100034268();
  [v1 setInteger:5 forKey:v36];
}

id sub_100033610(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v2);
  NSString v6 = &v2[OBJC_IVAR____TtC7parsecd19UserDefaultsManager_assembly];
  *((void *)v6 + 1) = 0LL;
  uint64_t v7 = swift_unknownObjectWeakInit(v6, 0LL);
  *(void *)(v7 + 8) = a2;
  swift_unknownObjectWeakAssign(v7, a1);
  uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
  uint64_t v9 = v2;
  id v10 = [v8 standardUserDefaults];
  *(void *)&v9[OBJC_IVAR____TtC7parsecd19UserDefaultsManager_userDefaults] = v10;

  v13.receiver = v9;
  v13.super_class = ObjectType;
  id v11 = objc_msgSendSuper2(&v13, "init");
  _CFPreferencesSetBackupDisabled( kCFPreferencesCurrentApplication,  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost,  0LL,  1LL);
  sub_100033728();

  swift_unknownObjectRelease(a1);
  return v11;
}

void sub_100033728()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC7parsecd19UserDefaultsManager_assembly);
  if (Strong)
  {
    uint64_t v2 = Strong;
    uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC7parsecd19UserDefaultsManager_userDefaults);
    NSString v4 = String._bridgeToObjectiveC()();
    unsigned __int8 v5 = [v3 BOOLForKey:v4];

    id v6 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    uint64_t v7 = sub_10000941C((uint64_t *)&unk_1001D32A0);
    uint64_t inited = swift_initStackObject(v7, v14);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
    v13[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"context");
    v13[1] = v9;
    AnyHashable.init<A>(_:)(v13);
    uint64_t v10 = type metadata accessor for ContextUpdate(0LL);
    *(void *)(inited + 96) = v10;
    id v11 = sub_10001B468((void *)(inited + 72));
    *(_BYTE *)id v11 = v5;
    swift_storeEnumTagMultiPayload(v11, v10, 6LL);
    uint64_t v12 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    sub_1000C5160((uint64_t)@"com.apple.parsecd.contextUpdate", 0LL, v12, v6);
    swift_unknownObjectRelease(v2);
  }

void sub_1000338B8()
{
}

uint64_t type metadata accessor for UserDefaultsManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd19UserDefaultsManager);
}

void *sub_100033948()
{
  uint64_t v1 = type metadata accessor for URLQueryItem(0LL);
  uint64_t v105 = *(void *)(v1 - 8);
  uint64_t v106 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v100 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NSString v4 = sub_100034268();
  id v5 = [v0 stringForKey:v4];

  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  id v6 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  if (qword_1001D0510 != -1) {
    goto LABEL_54;
  }
  while (1)
  {
    uint64_t v9 = type metadata accessor for Logger(0LL);
    uint64_t v10 = sub_1000093D0(v9, (uint64_t)qword_1001EDC00);
    uint64_t v11 = swift_bridgeObjectRetain_n(v8, 2LL);
    uint64_t v103 = v10;
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter(v12);
    BOOL v14 = os_log_type_enabled(v12, v13);
    unint64_t v104 = v3;
    if (v14)
    {
      uint64_t v15 = (uint8_t *)sub_100009B20(12LL);
      uint64_t v16 = sub_100009B20(32LL);
      v116[0] = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_bridgeObjectRetain(v8);
      uint64_t v114 = sub_1000307E0((uint64_t)v6, v8, v116);
      uint64_t v3 = v104;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v15 + 4);
      swift_bridgeObjectRelease_n(v8, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "processing debug parameters %s", v15, 0xCu);
      swift_arrayDestroy(v16, 1LL);
      sub_100010C34(v16);
      sub_100010C34((uint64_t)v15);
    }

    else
    {

      uint64_t v17 = swift_bridgeObjectRelease_n(v8, 2LL);
    }

    v116[0] = 38LL;
    v116[1] = 0xE100000000000000LL;
    __chkstk_darwin(v17);
    uint64_t v99 = v116;
    swift_bridgeObjectRetain(v8);
    uint64_t v18 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_1000341EC, (uint64_t)v97, (uint64_t)v6, v8);
    swift_bridgeObjectRelease();
    uint64_t v108 = *(void *)(v18 + 16);
    if (!v108)
    {
      swift_bridgeObjectRelease();
      return _swiftEmptyArrayStorage;
    }

    unint64_t v20 = 0LL;
    uint64_t v107 = v18 + 32;
    id v6 = _swiftEmptyArrayStorage;
    *(void *)&__int128 v19 = 136315138LL;
    __int128 v101 = v19;
    v100[1] = (char *)&type metadata for Any + 8;
    uint64_t v21 = v18;
    uint64_t v102 = v18;
LABEL_8:
    if (v20 < *(void *)(v21 + 16)) {
      break;
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    swift_once(&qword_1001D0510, sub_100034468);
  }

  unint64_t v109 = v20;
  unint64_t v110 = v6;
  NSString v22 = (unint64_t *)(v107 + 32 * v20);
  unint64_t v23 = *v22;
  unint64_t v24 = v22[1];
  unint64_t v25 = v24 >> 14;
  id v26 = _swiftEmptyArrayStorage;
  if (v24 >> 14 == *v22 >> 14)
  {
LABEL_36:
    if (v26[2] == 2LL)
    {
      uint64_t v70 = v26;
      uint64_t v71 = v26[4];
      uint64_t v72 = v26[5];
      uint64_t v73 = v70[6];
      uint64_t v74 = v70[7];
      swift_bridgeObjectRetain(v74);
      id v6 = (void *)static String._fromSubstring(_:)(v71, v72, v73, v74);
      uint64_t v76 = v75;
      sub_10001450C();
      if (v70[2] < 2uLL) {
        goto LABEL_53;
      }
      uint64_t v77 = v70[8];
      uint64_t v78 = v70[9];
      uint64_t v8 = v70[10];
      uint64_t v79 = v70[11];
      swift_bridgeObjectRetain(v79);
      swift_bridgeObjectRelease();
      uint64_t v80 = static String._fromSubstring(_:)(v77, v78, v8, v79);
      uint64_t v82 = v81;
      sub_1000110E0();
      URLQueryItem.init(name:value:)(v6, v76, v80, v82);
      swift_bridgeObjectRelease();
      sub_10001450C();
      id v6 = v110;
      if ((swift_isUniquelyReferenced_nonNull_native(v110) & 1) == 0) {
        id v6 = (void *)sub_100034274();
      }
      unint64_t v83 = v6[2];
      if (v83 >= v6[3] >> 1) {
        id v6 = (void *)sub_100034274();
      }
      void v6[2] = v83 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v105 + 32))( (unint64_t)v6 + ((*(unsigned __int8 *)(v105 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80))
      + *(void *)(v105 + 72) * v83,
        v3,
        v106);
    }

    else
    {
      uint64_t v84 = swift_bridgeObjectRetain(v26);
      uint64_t v85 = v26;
      os_log_type_t v86 = (os_log_s *)Logger.logObject.getter(v84);
      os_log_type_t v88 = static os_log_type_t.error.getter(v86, v87);
      if (os_log_type_enabled(v86, v88))
      {
        uint64_t v89 = sub_100009B20(12LL);
        uint64_t v90 = sub_100009B20(32LL);
        v116[0] = v90;
        *(_DWORD *)uint64_t v89 = v101;
        uint64_t v91 = swift_bridgeObjectRetain(v85);
        uint64_t v8 = Array.description.getter(v91, &type metadata for Substring);
        unint64_t v93 = v92;
        swift_bridgeObjectRelease();
        *(void *)(v89 + 4) = sub_1000307E0(v8, v93, v116);
        sub_100034280();
        sub_1000110E0();
        _os_log_impl((void *)&_mh_execute_header, v86, v88, "invalid query components: %s", (uint8_t *)v89, 0xCu);
        swift_arrayDestroy(v90, 1LL);
        sub_100010C34(v90);
        sub_100010C34(v89);
      }

      else
      {

        sub_100034280();
      }

      id v6 = v110;
    }

    unint64_t v20 = v109 + 1;
    if (v109 + 1 == v108)
    {
      swift_bridgeObjectRelease();
      return v6;
    }

    goto LABEL_8;
  }

  unint64_t v28 = v22[2];
  unint64_t v27 = v22[3];
  swift_bridgeObjectRetain_n(v27, 2LL);
  unint64_t v29 = v23;
  unint64_t v30 = v23;
  unint64_t v31 = v23;
  uint64_t v113 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v32 = sub_10003424C();
    unint64_t v33 = v27;
    uint64_t v37 = Substring.subscript.getter(v32, v34, v35, v36, v27);
    if (v37 == 61 && v38 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v8 = v38;
      char v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v38, 61LL, 0xE100000000000000LL, 0LL);
      swift_bridgeObjectRelease();
      if ((v40 & 1) == 0)
      {
        uint64_t v41 = sub_10003424C();
        unint64_t v27 = v33;
        unint64_t v29 = Substring.index(after:)(v41, v42, v43, v44, v33);
        continue;
      }
    }

    if (v30 >> 14 != v29 >> 14)
    {
      if (v29 >> 14 < v30 >> 14) {
        goto LABEL_55;
      }
      uint64_t v45 = Substring.subscript.getter(v30, v29, v23, v24, v28, v33);
      uint64_t v111 = v47;
      uint64_t v112 = v46;
      uint64_t v8 = v48;
      if ((sub_1000342A0() & 1) == 0)
      {
        sub_100034234();
        unint64_t v31 = v58;
      }

      sub_10003428C();
      if (v31 >= v50 >> 1)
      {
        sub_1000314A4();
        uint64_t v49 = v59;
      }

      uint64_t v113 = v49;
      v49[2] = v31 + 1;
      id v51 = &v49[4 * v31];
      uint64_t v52 = v112;
      v51[4] = v45;
      v51[5] = v52;
      uint64_t v53 = v111;
      v51[6] = v8;
      v51[7] = v53;
    }

    unint64_t v27 = v33;
    uint64_t v54 = sub_10003424C();
    unint64_t v29 = Substring.index(after:)(v54, v55, v56, v57, v33);
    unint64_t v30 = v29;
    unint64_t v31 = v29;
  }

  while (v25 != v29 >> 14);
  if (v25 == v30 >> 14)
  {
    sub_1000110E0();
    uint64_t v3 = v104;
    uint64_t v21 = v102;
    id v26 = v113;
LABEL_35:
    sub_1000110E0();
    goto LABEL_36;
  }

  if (v25 >= v31 >> 14)
  {
    uint64_t v60 = Substring.subscript.getter(v31, v24, v23, v24, v28, v27);
    uint64_t v62 = v61;
    uint64_t v64 = v63;
    uint64_t v66 = v65;
    sub_1000110E0();
    if ((sub_1000342A0() & 1) == 0)
    {
      sub_100034234();
      unint64_t v31 = v94;
    }

    uint64_t v21 = v102;
    sub_10003428C();
    uint64_t v8 = v31 + 1;
    if (v31 >= v68 >> 1)
    {
      sub_1000314A4();
      uint64_t v67 = v95;
    }

    v67[2] = v8;
    uint64_t v69 = &v67[4 * v31];
    id v26 = v67;
    v69[4] = v60;
    void v69[5] = v62;
    uint64_t v69[6] = v64;
    v69[7] = v66;
    uint64_t v3 = v104;
    goto LABEL_35;
  }

LABEL_55:
  LODWORD(v99) = 0;
  uint64_t v98 = 754LL;
  v97[0] = 2;
  unint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/Range.swift",  17LL);
  __break(1u);
  return result;
}

        __break(1u);
        goto LABEL_56;
      }
    }

    __break(1u);
    goto LABEL_55;
  }

  (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
LABEL_19:
  uint64_t v35 = (Class *)&_ss24UnkeyedEncodingContainerPsE6encode10contentsOfyqd___tKSTRd__s6UInt32V7ElementRtd__lF_ptr;
  while (1)
  {
LABEL_22:
    uint64_t v55 = UserAgent.fullString.getter();
    uint64_t v34 = (Class *)v56;
    sub_1000292E8(v55, v56, v22, (uint64_t)v11);
    swift_bridgeObjectRelease();
    if (sub_100010708((uint64_t)v11, 1LL, v14) == 1)
    {
      sub_100019C1C((uint64_t)v11, &qword_1001D3DB8);
      goto LABEL_39;
    }

    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v11, v14);
    uint64_t v57 = (char *)[objc_allocWithZone(v35[268]) init];
    if (!v57) {
      break;
    }
    uint64_t v11 = v57;
    unint64_t v58 = Trialpb_TrialExperiment.experimentNamespace.getter(v57);
    sub_1000A9FC0(v58, v59, v11, (SEL *)&selRef_setNamespaceId_);
    uint64_t v61 = Trialpb_TrialExperiment.experimentID.getter(v60);
    sub_1000A9FC0(v61, v62, v11, (SEL *)&selRef_setExperimentId_);
    uint64_t v64 = Trialpb_TrialExperiment.treatmentID.getter(v63);
    sub_1000A9FC0(v64, v65, v11, (SEL *)&selRef_setTreatmentId_);
    uint64_t v67 = Trialpb_TrialExperiment.deploymentID.getter(v66);
    uint64_t v47 = 0xFFFFFFFF80000000LL;
    if (v67 < (uint64_t)0xFFFFFFFF80000000LL)
    {
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }

    uint64_t v47 = 0x7FFFFFFFLL;
    unint64_t v20 = v94;
    if (v67 > 0x7FFFFFFF) {
      goto LABEL_57;
    }
    unint64_t v68 = Trialpb_TrialExperiment.compatibilityVersion.getter([v11 setDeploymentId:v67]);
    if ((v68 & 0x80000000) == 0)
    {
      [v11 setVersion:v68];
      uint64_t v69 = sub_1000A9F04(v20);
      swift_bridgeObjectRelease();
      unint64_t v31 = v88;
      if (!v69)
      {
        uint64_t v75 = sub_10000941C((uint64_t *)&unk_1001D0C00);
        uint64_t v76 = swift_allocObject(v75, 40LL, 7LL);
        *(_OWORD *)(v76 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015D570;
        *(void *)(v76 + swift_unknownObjectWeakDestroy(v0 + 32) = v11;
        uint64_t v95 = v76;
        specialized Array._endMutation()(v76);
        unint64_t v31 = v88;
        sub_1000A9F60(v95, v20);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
        goto LABEL_40;
      }

      uint64_t v95 = sub_1000A9F04(v20);
      if (!v95)
      {
        [v20 setExperimentInfos:0];

        (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
        swift_bridgeObjectRelease();
        goto LABEL_40;
      }

      uint64_t v70 = v11;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v72 = *(void *)((v95 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      uint64_t v71 = *(void *)((v95 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v72 >= v71 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v71 > 1);
      }
      uint64_t v73 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v72, v70);
      specialized Array._endMutation()(v73);
      if (v95)
      {
        sub_1000AB6A0();
        v74.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }

      else
      {
        v74.super.Class isa = 0LL;
      }

      [v20 setExperimentInfos:v74.super.isa];

      break;
    }

            sub_100109C4C(v7);
            uint64_t v7 = v32;
            goto LABEL_33;
          }

            sub_100109C60();
            uint64_t v7 = v32;
            goto LABEL_33;
          }

uint64_t sub_1000340E0()
{
  return sub_100034104((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000314A4);
}

uint64_t sub_1000340EC()
{
  return sub_100034104((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000316D8);
}

uint64_t sub_1000340F8()
{
  return sub_100034104((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100031A1C);
}

uint64_t sub_100034104(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v1);
  *uint64_t v1 = v3;
  if (!(_DWORD)result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1LL, 1LL, v3);
    *uint64_t v1 = result;
  }

  return result;
}

uint64_t sub_100034158(uint64_t a1)
{
  return sub_100034180(a1, (uint64_t (*)(BOOL))sub_1000314A4);
}

uint64_t sub_100034168(uint64_t a1)
{
  return sub_100034180(a1, (uint64_t (*)(BOOL))sub_1000316D8);
}

uint64_t sub_100034174(uint64_t a1)
{
  return sub_100034180(a1, (uint64_t (*)(BOOL))sub_100031A1C);
}

uint64_t sub_100034180(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24LL);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    uint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }

  return result;
}

uint64_t sub_1000341C0(uint64_t result)
{
  unint64_t v2 = *(void *)((*v1 & 0xFFFFFFFFFFFFF8LL) + 0x18);
  return result;
}

uint64_t sub_1000341EC(uint64_t *a1)
{
  return sub_10005065C(a1, *(uint64_t **)(v1 + 16)) & 1;
}

id sub_100034208(uint64_t a1)
{
  return objc_msgSend(v2, *(SEL *)(v1 + 632), a1);
}

id sub_10003421C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

NSString sub_100034228()
{
  return String._bridgeToObjectiveC()();
}

void sub_100034234()
{
}

uint64_t sub_10003424C()
{
  return v0;
}

uint64_t sub_100034260(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

NSString sub_100034268()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_100034274()
{
  return sub_1000316BC();
}

uint64_t sub_100034280()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

  ;
}

uint64_t sub_1000342A0()
{
  return swift_isUniquelyReferenced_nonNull_native(*(void *)(v0 - 128));
}

uint64_t sub_1000342AC(uint64_t a1)
{
  return sub_100034850(a1, qword_1001EDAE0, 0x535F636573726150LL, 0x6863726165LL);
}

uint64_t sub_1000342D4(uint64_t a1)
{
  return sub_10003456C(a1, qword_1001EDAF8, 0x435F636573726150LL, 0xEB00000000647261LL);
}

uint64_t sub_1000342FC(uint64_t a1)
{
  return sub_100034850(a1, qword_1001EDB10, 0x465F636573726150LL, 0x746867696CLL);
}

uint64_t sub_100034324(uint64_t a1)
{
  return sub_100034850(a1, qword_1001EDB28, 0x4C5F636573726150LL, 0x70556B6F6FLL);
}

uint64_t sub_10003434C(uint64_t a1)
{
  return sub_10003482C(a1, qword_1001EDB40, 18LL, 0x800000010016D5B0LL);
}

uint64_t sub_10003436C(uint64_t a1)
{
  return sub_10003482C(a1, qword_1001EDB58, 18LL, 0x800000010016D5D0LL);
}

uint64_t sub_10003438C(uint64_t a1)
{
  return sub_10003456C(a1, qword_1001EDB70, 0x545F636573726150LL, 0xEC0000006369706FLL);
}

uint64_t sub_1000343B4(uint64_t a1)
{
  return sub_10003456C(a1, qword_1001EDB88, 0x425F636573726150LL, 0xEA00000000006761LL);
}

uint64_t sub_1000343D8(uint64_t a1)
{
  return sub_10003456C(a1, qword_1001EDBA0, 0x636573726150LL, 0xE600000000000000LL);
}

uint64_t sub_1000343F4(uint64_t a1)
{
  return sub_10003456C(a1, qword_1001EDBB8, 0x465F636573726150LL, 0xEF6B636162646565LL);
}

uint64_t sub_100034420(uint64_t a1)
{
  return sub_100034834(a1, qword_1001EDBD0, 0x535F636573726150LL, 0x6E6F69737365LL);
}

uint64_t sub_100034448(uint64_t a1)
{
  return sub_10003482C(a1, qword_1001EDBE8, 23LL, 0x800000010016D490LL);
}

uint64_t sub_100034468(uint64_t a1)
{
  return sub_100034834(a1, qword_1001EDC00, 0x525F636573726150LL, 0x747365757165LL);
}

uint64_t sub_100034490(uint64_t a1)
{
  return sub_10003482C(a1, qword_1001EDC18, 17LL, 0x800000010016D4B0LL);
}

uint64_t sub_1000344B0(uint64_t a1)
{
  return sub_10003482C(a1, qword_1001EDC30, 22LL, 0x800000010016D4F0LL);
}

uint64_t sub_1000344D0(uint64_t a1)
{
  return sub_10003482C(a1, qword_1001EDC48, 19LL, 0x800000010016D4D0LL);
}

uint64_t sub_1000344F0(uint64_t a1)
{
  return sub_100034834(a1, qword_1001EDC60, 0x435F636573726150LL, 0x676E69686361LL);
}

uint64_t sub_100034518(uint64_t a1)
{
  return sub_10003456C(a1, qword_1001EDC78, 0x505F636573726150LL, 0xEF6C6F636F746F72LL);
}

uint64_t sub_100034544(uint64_t a1)
{
  return sub_100034834(a1, qword_1001EDC90, 0x435F636573726150LL, 0x747865746E6FLL);
}

uint64_t sub_10003456C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10001C180(v7, a2);
  sub_1000093D0(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, a3, a4);
}

void sub_1000345E0()
{
  qword_1001EDCA8 = OS_os_log.init(subsystem:category:)( 0xD000000000000010LL,  v0,  0x64636573726170LL,  0xE700000000000000LL);
  sub_100009A90();
}

void sub_100034630()
{
  qword_1001EDCB0 = OS_os_log.init(subsystem:category:)( 0xD000000000000010LL,  v0,  0xD000000000000010LL,  0x800000010016D590LL);
  sub_100009A90();
}

void sub_100034684()
{
  qword_1001EDCB8 = sub_10003483C(v0, v1, (uint64_t)"parsecd.Context_Manger");
  sub_100009A90();
}

void sub_1000346C4()
{
  qword_1001EDCC0 = sub_10003483C(v0, v1, (uint64_t)"parsecd.Context_Provider_Interface");
  sub_100009A90();
}

void sub_100034704()
{
  qword_1001EDCC8 = sub_10003483C(v0, v1, (uint64_t)"parsecd.Parsec_Subscription_Manager");
  sub_100009A90();
}

void sub_100034744()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C180(v0, qword_1001EDCD0);
  sub_1000093D0(v0, (uint64_t)qword_1001EDCD0);
  Logger.init(subsystem:category:)( 0xD000000000000010LL,  0x800000010016AE50LL,  0x575F636573726150LL,  0xED000070756D7261LL);
  sub_100009A90();
}

uint64_t sub_1000347C0()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t type metadata accessor for ParsecLogger()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd12ParsecLogger);
}

unint64_t sub_1000347F0()
{
  unint64_t result = qword_1001D1080;
  if (!qword_1001D1080)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_os_log);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001D1080);
  }

  return result;
}

uint64_t sub_10003482C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10003456C(a1, a2, a3 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a4);
}

uint64_t sub_100034834(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10003456C(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000LL);
}

uint64_t sub_10003483C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return OS_os_log.init(subsystem:category:)(0xD000000000000010LL, a1, a2, (a3 - 32) | 0x8000000000000000LL);
}

uint64_t sub_100034850(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10003456C(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL | 0xED00000000000000LL);
}

unint64_t sub_100034858()
{
  return sub_1000347F0();
}

  ;
}

uint64_t sub_100034870()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Locker();
  uint64_t v3 = swift_allocObject(v2, 24LL, 7LL);
  NSString v4 = (_DWORD *)swift_slowAlloc(4LL, -1LL);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *NSString v4 = 0;
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(_BYTE *)(v1 + 24) = 0;
  uint64_t v5 = sub_10000941C(&qword_1001D37C0);
  swift_allocObject(v5, 25LL, 7LL);
  sub_10005FC38(0);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 32) = v6;
  return v1;
}

uint64_t sub_1000348EC()
{
  uint64_t v1 = v0;
  if ((sub_1000C15D4() & 1) == 0)
  {
    uint64_t v2 = *(os_unfair_lock_s **)(*(void *)(v0 + 16) + 16LL);
    swift_retain(v1);
    os_unfair_lock_lock(v2);
    if ((*(_BYTE *)(v1 + 24) & 1) == 0) {
      *(_BYTE *)(v1 + 24) = 1;
    }
    os_unfair_lock_unlock(v2);
    swift_release(v1);
  }

  return 1LL;
}

uint64_t sub_100034950()
{
  return v0;
}

uint64_t sub_100034974()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for DeviceSetupStatus()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd17DeviceSetupStatus);
}

uint64_t sub_1000349B4(void *a1)
{
  void (*v25)(uint64_t *__return_ptr, unint64_t, unint64_t, void);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(_BYTE *__return_ptr, unint64_t, unint64_t, void);
  uint64_t v29;
  uint64_t v30;
  os_log_s *v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  _BYTE v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  _BYTE v50[24];
  void *v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v2 = v1;
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v38 - v8;
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  BOOL v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v38 - v15;
  id v51 = &unk_1001B32C8;
  uint64_t v52 = sub_10003B83C();
  v50[0] = 1;
  char v17 = isFeatureEnabled(_:)(v50);
  uint64_t v18 = sub_1000108B8(v50);
  if ((v17 & 1) != 0)
  {
    NSFileManager.parsecdSessionFBDirectoryURL.getter(v18);
    if (sub_100010708((uint64_t)v7, 1LL, v10) == 1)
    {
      sub_100014358((uint64_t)v7, &qword_1001D5ED0);
      sub_10003B948((uint64_t)v9, 1LL);
LABEL_6:

      sub_100014358((uint64_t)v9, &qword_1001D5ED0);
      goto LABEL_7;
    }

    URL.appendingPathComponent(_:)(0x6B63616264656566LL, 0xEB0000000062642ELL);
    __int128 v19 = *(void (**)(char *, uint64_t))(v11 + 8);
    v19(v7, v10);
    sub_10003B948((uint64_t)v9, 0LL);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v9, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
    uint64_t v22 = type metadata accessor for SQLiteDatabase();
    swift_allocObject(v22, 24LL, 7LL);
    uint64_t v23 = 0LL;
    uint64_t v24 = SQLiteDatabase.init(_:readOnly:requiresAuthentication:)((uint64_t)v14, 0, 0);
    *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v24;
    unint64_t v25 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void))(*(void *)v24 + 176LL);
    swift_retain(v24);
    v25(&v48, 0xD00000000000006BLL, 0x800000010016D700LL, 0LL);
    swift_release(v24);
    SQLiteStatement.execute()();
    if (!v26)
    {
      sub_10003B900();
      uint64_t v54 = v49;
      sub_100025EAC((uint64_t)&v54);
      unint64_t v27 = *(void *)(v2 + 16);
      unint64_t v28 = *(void (**)(_BYTE *__return_ptr, unint64_t, unint64_t, void))(*(void *)v27 + 176LL);
      swift_retain(v27);
      v28(v50, 0xD0000000000000A6LL, 0x800000010016D770LL, 0LL);
      swift_release(v27);
      sub_10003B908();
      sub_10003B8E0();
      uint64_t v53 = *(_OWORD *)&v50[8];
      sub_100025EAC((uint64_t)&v53);

      v19(v16, v10);
      return v2;
    }

    sub_10003B900();
    *(_OWORD *)unint64_t v50 = v49;
    sub_100025EAC((uint64_t)v50);
    uint64_t v42 = v19;
    if (qword_1001D04F8 != -1) {
      swift_once(&qword_1001D04F8, sub_1000343F4);
    }
    unint64_t v29 = sub_100010ED4();
    sub_1000093D0(v29, (uint64_t)qword_1001EDBB8);
    sub_1000110C4();
    unint64_t v30 = sub_1000110C4();
    unint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    unint64_t v33 = static os_log_type_t.error.getter(v31, v32);
    if (os_log_type_enabled(v31, v33))
    {
      uint64_t v34 = (uint8_t *)sub_10003B8B0();
      char v40 = sub_100009B20(32LL);
      uint64_t v47 = v40;
      uint64_t v41 = 0LL;
      *(_DWORD *)uint64_t v34 = 136315138;
      uint64_t v39 = v34 + 4;
      sub_10003B960();
      uint64_t v35 = Error.localizedDescription.getter(v45, v46);
      uint64_t v43 = sub_10003B924(v35, v36);
      uint64_t v23 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v39);
      sub_100009B3C();
      sub_100010D88();
      sub_100010D88();
      sub_100014564((void *)&_mh_execute_header, v31, v33, "error creating feedback db: %s", v34);
      uint64_t v37 = v40;
      sub_100030F9C(v40);
      sub_100010C34(v37);
      sub_100010C34((uint64_t)v34);
    }

    else
    {

      sub_100010D88();
      sub_100010D88();
    }

    sub_100010D88();
    v42(v16, v10);
    if (!v23)
    {
      swift_release(v2);
      return 0LL;
    }
  }

  else
  {
  }

void sub_100034EDC(void *a1)
{
  uint64_t v3 = type metadata accessor for JSONEncodingOptions(0LL);
  __chkstk_darwin(v3);
  sub_100009AEC();
  uint64_t v6 = v5 - v4;
  type metadata accessor for BinaryDecodingOptions(0LL);
  sub_100009B94();
  __chkstk_darwin(v7);
  sub_100009AEC();
  uint64_t v10 = v9 - v8;
  sub_10000941C(&qword_1001D16B8);
  sub_100009B94();
  __chkstk_darwin(v11);
  sub_100009AEC();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for Apple_Parsec_Feedback_V2_ClientSession(0LL);
  uint64_t v29 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_100014428();
  uint64_t v28 = v16;
  uint64_t v17 = sub_10003B79C(a1);
  if (v18 >> 60 == 15)
  {
    __break(1u);
  }

  else
  {
    uint64_t v19 = v17;
    double v20 = sub_10003B910();
    BinaryDecodingOptions.init()(v20);
    uint64_t v21 = sub_10003B7FC( &qword_1001D16C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ClientSession,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_ClientSession);
    Message.init(serializedData:extensions:partial:options:)(v19, v1, v31, 0LL, v10, v15, v21);
    sub_10003B954(v14, 0LL);
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v28, v14, v15);
    JSONEncodingOptions.init()(v22);
    uint64_t v23 = Message.jsonString(options:)(v6, v15, v21);
    uint64_t v25 = v24;
    sub_10003B8F0();
    sub_10003B930(49LL, 0x800000010016D6C0LL);
    uint64_t v26 = sub_10000941C(&qword_1001D1AF8);
    uint64_t inited = swift_initStackObject(v26, &v30);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
    *(void *)(inited + sub_10000BDD4(v0 + 56) = &type metadata for String;
    *(void *)(inited + 64) = &protocol witness table for String;
    *(void *)(inited + swift_unknownObjectWeakDestroy(v0 + 32) = v23;
    *(void *)(inited + 40) = v25;
    SQLiteStatement.bind(_:)(inited);
    swift_setDeallocating(inited);
    sub_1000BC730();
    swift_release();
    sub_10003B8D0();
    sub_10003B908();
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v15);
    sub_10003B8E0();
    sub_10003B8C0();
    sub_100009AA0();
  }

void sub_100035314(void *a1)
{
  uint64_t v4 = v3 - v2;
  uint64_t v5 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback(0LL);
  uint64_t v52 = *(void *)(v5 - 8);
  uint64_t v53 = v5;
  __chkstk_darwin(v5);
  sub_100014428();
  uint64_t v51 = v6;
  type metadata accessor for BinaryDecodingOptions(0LL);
  sub_100009B94();
  __chkstk_darwin(v7);
  sub_100009AEC();
  uint64_t v10 = v9 - v8;
  sub_10000941C(&qword_1001D1698);
  sub_100009B94();
  __chkstk_darwin(v11);
  sub_100009AEC();
  uint64_t v14 = v13 - v12;
  uint64_t v56 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload(0LL);
  uint64_t v54 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  sub_100014428();
  uint64_t v55 = v15;
  uint64_t v16 = type metadata accessor for Client(0LL);
  unint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  sub_100009AEC();
  uint64_t v20 = v19 - v18;
  uint64_t v21 = UserAgent.client.getter();
  uint64_t v22 = Client.name.getter(v21);
  uint64_t v24 = v23;
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v20, v16);
  uint64_t v26 = static Client.unknownClientName.getter(v25);
  if (v22 == v26 && v24 == v27)
  {
    swift_bridgeObjectRelease_n(v24, 2LL);
    goto LABEL_9;
  }

  char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, v26, v27, 0LL);
  sub_100009B3C();
  if ((v29 & 1) != 0 || (uint64_t v30 = sub_10003B79C(a1), v31 >> 60 == 15))
  {
    sub_10003B8E8();
LABEL_9:
    sub_100009AA0();
    return;
  }

  uint64_t v32 = v30;
  sub_10003B910();
  sub_100014244(v33, v34);
  BinaryDecodingOptions.init()(v35);
  uint64_t v36 = sub_10003B7FC( &qword_1001D16A0,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_FeedbackPayload);
  Message.init(serializedData:extensions:partial:options:)(v32, v17, v59, 0LL, v10, v56, v36);
  sub_10003B93C(v14, 0LL);
  uint64_t v37 = (*(uint64_t (**)(void))(v54 + 32))();
  Apple_Parsec_Feedback_V2_FeedbackPayload.containedFeedback.getter(v37);
  if (sub_100010708(v4, 1LL, v53) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v55, v56);
    sub_100010A1C(v32, v17);
    sub_10003B8E8();
    sub_100014358(v4, (uint64_t *)&unk_1001D5340);
    goto LABEL_9;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v51, v4, v53);
  uint64_t v38 = sub_1000358D8(v51);
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  uint64_t v49 = v38;
  uint64_t v50 = v43;
  sub_10003B930(60LL, 0x800000010016D680LL);
  uint64_t v44 = sub_10000941C(&qword_1001D1AF8);
  uint64_t inited = swift_initStackObject(v44, &v58);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015E970;
  *(void *)(inited + sub_10000BDD4(v0 + 56) = &type metadata for String;
  *(void *)(inited + 64) = &protocol witness table for String;
  *(void *)(inited + swift_unknownObjectWeakDestroy(v0 + 32) = v22;
  *(void *)(inited + 40) = v24;
  uint64_t v46 = UUID.uuidString.getter(inited);
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 104) = &protocol witness table for String;
  *(void *)(inited + 72) = v46;
  *(void *)(inited + 80) = v47;
  unint64_t v48 = (unint64_t)[a1 queryId];
  *(void *)(inited + 136) = &type metadata for Int64;
  *(void *)(inited + 144) = &protocol witness table for Int64;
  if ((v48 & 0x8000000000000000LL) == 0)
  {
    *(void *)(inited + 112) = v48;
    *(void *)(inited + 176) = &type metadata for String;
    *(void *)(inited + 184) = &protocol witness table for String;
    *(void *)(inited + 152) = v49;
    *(void *)(inited + 160) = v40;
    *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = &type metadata for String;
    *(void *)(inited + 224) = &protocol witness table for String;
    *(void *)(inited + 192) = v50;
    *(void *)(inited + 200) = v42;
    SQLiteStatement.bind(_:)(inited);
    swift_setDeallocating(inited);
    sub_1000BC730();
    sub_10003B900();
    sub_10003B8D0();
    sub_10003B908();
    sub_10003B8E0();
    sub_10003B8C0();
    sub_10003B890();
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v55, v56);
    goto LABEL_9;
  }

  __break(1u);
}

uint64_t sub_1000358D8(uint64_t a1)
{
  uint64_t v1023 = a1;
  uint64_t v928 = type metadata accessor for Apple_Parsec_Feedback_V2_ExperimentTriggeredFeedback(0LL);
  uint64_t v896 = *(void *)(v928 - 8);
  __chkstk_darwin(v928);
  v927 = (char *)&v847 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v926 = type metadata accessor for Apple_Parsec_Feedback_V2_DynamicButtonVisibilityFeedback(0LL);
  uint64_t v895 = *(void *)(v926 - 8);
  __chkstk_darwin(v926);
  v925 = (char *)&v847 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v924 = type metadata accessor for Apple_Parsec_Feedback_V2_CommandEngagementFeedback(0LL);
  uint64_t v894 = *(void *)(v924 - 8);
  __chkstk_darwin(v924);
  v923 = (char *)&v847 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v922 = type metadata accessor for Apple_Parsec_Feedback_V2_ClientTimingFeedback(0LL);
  uint64_t v893 = *(void *)(v922 - 8);
  __chkstk_darwin(v922);
  v921 = (char *)&v847 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v920 = type metadata accessor for Apple_Parsec_Feedback_V2_CBAEngagementFeedback(0LL);
  uint64_t v892 = *(void *)(v920 - 8);
  __chkstk_darwin(v920);
  v919 = (char *)&v847 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v918 = type metadata accessor for Apple_Parsec_Feedback_V2_CacheHitFeedback(0LL);
  uint64_t v891 = *(void *)(v918 - 8);
  __chkstk_darwin(v918);
  v917 = (char *)&v847 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v916 = type metadata accessor for Apple_Parsec_Feedback_V2_SkipSearchFeedback(0LL);
  uint64_t v890 = *(void *)(v916 - 8);
  __chkstk_darwin(v916);
  v915 = (char *)&v847 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v914 = type metadata accessor for Apple_Parsec_Feedback_V2_CardViewAppearFeedback(0LL);
  uint64_t v889 = *(void *)(v914 - 8);
  __chkstk_darwin(v914);
  v913 = (char *)&v847 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v912 = type metadata accessor for Apple_Parsec_Feedback_V2_SessionEndFeedback(0LL);
  uint64_t v888 = *(void *)(v912 - 8);
  __chkstk_darwin(v912);
  v911 = (char *)&v847 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v910 = type metadata accessor for Apple_Parsec_Feedback_V2_CardSectionEngagementFeedback(0LL);
  uint64_t v887 = *(void *)(v910 - 8);
  __chkstk_darwin(v910);
  v909 = (char *)&v847 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v908 = type metadata accessor for Apple_Parsec_Feedback_V2_ConnectionInvalidatedFeedback(0LL);
  uint64_t v886 = *(void *)(v908 - 8);
  __chkstk_darwin(v908);
  v907 = (char *)&v847 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v906 = type metadata accessor for Apple_Parsec_Feedback_V2_LookupHintRelevancyFeedback(0LL);
  uint64_t v885 = *(void *)(v906 - 8);
  __chkstk_darwin(v906);
  v905 = (char *)&v847 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v904 = type metadata accessor for Apple_Parsec_Feedback_V2_ResultGradingFeedback(0LL);
  uint64_t v884 = *(void *)(v904 - 8);
  __chkstk_darwin(v904);
  v903 = (char *)&v847 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v902 = type metadata accessor for Apple_Parsec_Feedback_V2_SessionMissingSuggestionsFeedback(0LL);
  uint64_t v883 = *(void *)(v902 - 8);
  __chkstk_darwin(v902);
  v901 = (char *)&v847 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v900 = type metadata accessor for Apple_Parsec_Feedback_V2_SessionMissingResultsFeedback(0LL);
  uint64_t v882 = *(void *)(v900 - 8);
  __chkstk_darwin(v900);
  v899 = (char *)&v847 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v898 = type metadata accessor for Apple_Parsec_Feedback_V2_DidGoToSearchFeedback(0LL);
  uint64_t v881 = *(void *)(v898 - 8);
  __chkstk_darwin(v898);
  v897 = (char *)&v847 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v976 = type metadata accessor for Apple_Parsec_Feedback_V2_DidGoToSiteFeedback(0LL);
  uint64_t v880 = *(void *)(v976 - 8);
  __chkstk_darwin(v976);
  v975 = (char *)&v847 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v974 = type metadata accessor for Apple_Parsec_Feedback_V2_VisibleSectionHeaderFeedback(0LL);
  uint64_t v879 = *(void *)(v974 - 8);
  __chkstk_darwin(v974);
  v973 = (char *)&v847 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v972 = type metadata accessor for Apple_Parsec_Feedback_V2_SectionEngagementFeedback(0LL);
  uint64_t v878 = *(void *)(v972 - 8);
  __chkstk_darwin(v972);
  v971 = (char *)&v847 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v877 = type metadata accessor for Apple_Parsec_Feedback_V2_ClearInputFeedback(0LL);
  uint64_t v876 = *(void *)(v877 - 8);
  __chkstk_darwin(v877);
  v875 = (char *)&v847 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v874 = type metadata accessor for Apple_Parsec_Feedback_V2_LateSectionsAppendedFeedback(0LL);
  uint64_t v873 = *(void *)(v874 - 8);
  __chkstk_darwin(v874);
  v872 = (char *)&v847 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v871 = type metadata accessor for Apple_Parsec_Feedback_V2_ResultsReceivedAfterTimeoutFeedback(0LL);
  uint64_t v870 = *(void *)(v871 - 8);
  __chkstk_darwin(v871);
  v869 = (char *)&v847 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v932 = type metadata accessor for Apple_Parsec_Feedback_V2_VisibleSuggestionsFeedback(0LL);
  uint64_t v931 = *(void *)(v932 - 8);
  __chkstk_darwin(v932);
  v930 = (char *)&v847 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v936 = type metadata accessor for Apple_Parsec_Feedback_V2_CardViewDisappearFeedback(0LL);
  uint64_t v935 = *(void *)(v936 - 8);
  __chkstk_darwin(v936);
  v934 = (char *)&v847 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v940 = type metadata accessor for Apple_Parsec_Feedback_V2_SuggestionEngagementFeedback(0LL);
  uint64_t v939 = *(void *)(v940 - 8);
  __chkstk_darwin(v940);
  v938 = (char *)&v847 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v944 = type metadata accessor for Apple_Parsec_Feedback_V2_CustomFeedback(0LL);
  uint64_t v943 = *(void *)(v944 - 8);
  __chkstk_darwin(v944);
  v942 = (char *)&v847 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v948 = type metadata accessor for Apple_Parsec_Feedback_V2_ErrorFeedback(0LL);
  uint64_t v947 = *(void *)(v948 - 8);
  __chkstk_darwin(v948);
  v946 = (char *)&v847 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v952 = type metadata accessor for Apple_Parsec_Feedback_V2_EndLocalSearchFeedback(0LL);
  uint64_t v951 = *(void *)(v952 - 8);
  __chkstk_darwin(v952);
  v950 = (char *)&v847 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t started = type metadata accessor for Apple_Parsec_Feedback_V2_StartLocalSearchFeedback(0LL);
  uint64_t v955 = *(void *)(started - 8);
  __chkstk_darwin(started);
  v954 = (char *)&v847 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v960 = type metadata accessor for Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback(0LL);
  uint64_t v959 = *(void *)(v960 - 8);
  __chkstk_darwin(v960);
  v958 = (char *)&v847 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v964 = type metadata accessor for Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback(0LL);
  uint64_t v963 = *(void *)(v964 - 8);
  __chkstk_darwin(v964);
  v962 = (char *)&v847 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v970 = type metadata accessor for Apple_Parsec_Feedback_V2_EndSearchFeedback(0LL);
  uint64_t v969 = *(void *)(v970 - 8);
  __chkstk_darwin(v970);
  v968 = (char *)&v847 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v980 = type metadata accessor for Apple_Parsec_Feedback_V2_StartSearchFeedback(0LL);
  uint64_t v979 = *(void *)(v980 - 8);
  __chkstk_darwin(v980);
  v967 = (char *)&v847 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v984 = type metadata accessor for Apple_Parsec_Feedback_V2_StoreCardSectionEngagementFeedback(0LL);
  uint64_t v983 = *(void *)(v984 - 8);
  __chkstk_darwin(v984);
  v978 = (char *)&v847 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v988 = type metadata accessor for Apple_Parsec_Feedback_V2_MapsCardSectionEngagementFeedback(0LL);
  uint64_t v987 = *(void *)(v988 - 8);
  __chkstk_darwin(v988);
  v982 = (char *)&v847 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v992 = type metadata accessor for Apple_Parsec_Feedback_V2_CardSectionFeedback(0LL);
  uint64_t v991 = *(void *)(v992 - 8);
  __chkstk_darwin(v992);
  v986 = (char *)&v847 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v996 = type metadata accessor for Apple_Parsec_Feedback_V2_VisibleResultsFeedback(0LL);
  uint64_t v995 = *(void *)(v996 - 8);
  __chkstk_darwin(v996);
  v990 = (char *)&v847 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v1000 = type metadata accessor for Apple_Parsec_Feedback_V2_ResultEngagementFeedback(0LL);
  uint64_t v999 = *(void *)(v1000 - 8);
  __chkstk_darwin(v1000);
  v994 = (char *)&v847 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v1004 = type metadata accessor for Apple_Parsec_Feedback_V2_ResultFeedback(0LL);
  uint64_t v1003 = *(void *)(v1004 - 8);
  __chkstk_darwin(v1004);
  v998 = (char *)&v847 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = type metadata accessor for Apple_Parsec_Feedback_V2_ResultRankingFeedback(0LL);
  uint64_t v1007 = *(void *)(v40 - 8);
  uint64_t v1008 = v40;
  __chkstk_darwin(v40);
  v1002 = (char *)&v847 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = type metadata accessor for Apple_Parsec_Feedback_V2_SectionRankingFeedback(0LL);
  uint64_t v1013 = *(void *)(v42 - 8);
  uint64_t v1014 = v42;
  __chkstk_darwin(v42);
  v1006 = (char *)&v847 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = type metadata accessor for Apple_Parsec_Feedback_V2_RankingFeedback(0LL);
  uint64_t v1011 = *(void *)(v44 - 8);
  uint64_t v1012 = v44;
  __chkstk_darwin(v44);
  v1010 = (char *)&v847 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = type metadata accessor for Apple_Parsec_Feedback_V2_SearchViewDisappearFeedback(0LL);
  uint64_t v1016 = *(void *)(v46 - 8);
  uint64_t v1017 = v46;
  __chkstk_darwin(v46);
  v1015 = (char *)&v847 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = type metadata accessor for Apple_Parsec_Feedback_V2_SearchViewAppearFeedback(0LL);
  uint64_t v1019 = *(void *)(v48 - 8);
  uint64_t v1020 = v48;
  __chkstk_darwin(v48);
  v1018 = (char *)&v847 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = type metadata accessor for JSONEncodingOptions(0LL);
  uint64_t v1021 = *(void *)(v50 - 8);
  uint64_t v1022 = v50;
  uint64_t v51 = __chkstk_darwin(v50);
  v868 = (char *)&v847 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = __chkstk_darwin(v51);
  v867 = (char *)&v847 - v54;
  uint64_t v55 = __chkstk_darwin(v53);
  v866 = (char *)&v847 - v56;
  uint64_t v57 = __chkstk_darwin(v55);
  v865 = (char *)&v847 - v58;
  uint64_t v59 = __chkstk_darwin(v57);
  v864 = (char *)&v847 - v60;
  uint64_t v61 = __chkstk_darwin(v59);
  v863 = (char *)&v847 - v62;
  uint64_t v63 = __chkstk_darwin(v61);
  v862 = (char *)&v847 - v64;
  uint64_t v65 = __chkstk_darwin(v63);
  v861 = (char *)&v847 - v66;
  uint64_t v67 = __chkstk_darwin(v65);
  v860 = (char *)&v847 - v68;
  uint64_t v69 = __chkstk_darwin(v67);
  v859 = (char *)&v847 - v70;
  uint64_t v71 = __chkstk_darwin(v69);
  v858 = (char *)&v847 - v72;
  uint64_t v73 = __chkstk_darwin(v71);
  v857 = (char *)&v847 - v74;
  uint64_t v75 = __chkstk_darwin(v73);
  v856 = (char *)&v847 - v76;
  uint64_t v77 = __chkstk_darwin(v75);
  v855 = (char *)&v847 - v78;
  uint64_t v79 = __chkstk_darwin(v77);
  v854 = (char *)&v847 - v80;
  uint64_t v81 = __chkstk_darwin(v79);
  v853 = (char *)&v847 - v82;
  uint64_t v83 = __chkstk_darwin(v81);
  v852 = (char *)&v847 - v84;
  uint64_t v85 = __chkstk_darwin(v83);
  v851 = (char *)&v847 - v86;
  uint64_t v87 = __chkstk_darwin(v85);
  v850 = (char *)&v847 - v88;
  uint64_t v89 = __chkstk_darwin(v87);
  v849 = (char *)&v847 - v90;
  uint64_t v91 = __chkstk_darwin(v89);
  v848 = (char *)&v847 - v92;
  uint64_t v93 = __chkstk_darwin(v91);
  v847 = (char *)&v847 - v94;
  uint64_t v95 = __chkstk_darwin(v93);
  v929 = (char *)&v847 - v96;
  uint64_t v97 = __chkstk_darwin(v95);
  v933 = (char *)&v847 - v98;
  uint64_t v99 = __chkstk_darwin(v97);
  v937 = (char *)&v847 - v100;
  uint64_t v101 = __chkstk_darwin(v99);
  v941 = (char *)&v847 - v102;
  uint64_t v103 = __chkstk_darwin(v101);
  v945 = (char *)&v847 - v104;
  uint64_t v105 = __chkstk_darwin(v103);
  v949 = (char *)&v847 - v106;
  uint64_t v107 = __chkstk_darwin(v105);
  v953 = (char *)&v847 - v108;
  uint64_t v109 = __chkstk_darwin(v107);
  v957 = (char *)&v847 - v110;
  uint64_t v111 = __chkstk_darwin(v109);
  v961 = (char *)&v847 - v112;
  uint64_t v113 = __chkstk_darwin(v111);
  v966 = (char *)&v847 - v114;
  uint64_t v115 = __chkstk_darwin(v113);
  v965 = (char *)&v847 - v116;
  uint64_t v117 = __chkstk_darwin(v115);
  v977 = (char *)&v847 - v118;
  uint64_t v119 = __chkstk_darwin(v117);
  v981 = (char *)&v847 - v120;
  uint64_t v121 = __chkstk_darwin(v119);
  v985 = (char *)&v847 - v122;
  uint64_t v123 = __chkstk_darwin(v121);
  v989 = (char *)&v847 - v124;
  uint64_t v125 = __chkstk_darwin(v123);
  v993 = (char *)&v847 - v126;
  uint64_t v127 = __chkstk_darwin(v125);
  v997 = (char *)&v847 - v128;
  uint64_t v129 = __chkstk_darwin(v127);
  v1001 = (char *)&v847 - v130;
  uint64_t v131 = __chkstk_darwin(v129);
  v1005 = (char *)&v847 - v132;
  uint64_t v133 = __chkstk_darwin(v131);
  v1009 = (char *)&v847 - v134;
  uint64_t v135 = __chkstk_darwin(v133);
  __int128 v137 = (char *)&v847 - v136;
  uint64_t v138 = __chkstk_darwin(v135);
  uint64_t v140 = (char *)&v847 - v139;
  __chkstk_darwin(v138);
  __int128 v142 = (char *)&v847 - v141;
  uint64_t v143 = type metadata accessor for Apple_Parsec_Feedback_V2_Feedback(0LL);
  uint64_t v144 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  __int128 v146 = (char *)&v847 - ((v145 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v147 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback(0LL);
  uint64_t v148 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v150 = (char *)&v847 - ((v149 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v148 + 16))(v150, v1023, v147);
  int v151 = (*(uint64_t (**)(char *, uint64_t))(v148 + 88))(v150, v147);
  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.feedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v148 + 96))(v150, v147);
    uint64_t v152 = (*(uint64_t (**)(char *, char *, uint64_t))(v144 + 32))(v146, v150, v143);
    uint64_t v153 = static Apple_Parsec_Feedback_V2_Feedback.protoMessageName.getter(v152);
    unint64_t v155 = v154;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v153);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v156);
    uint64_t v157 = v153;
    uint64_t v158 = v1026;
    uint64_t v159 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v157, v155);
    swift_bridgeObjectRelease();
    uint64_t v1023 = sub_10003B73C(v159);
    uint64_t v1026 = v160;
    uint64_t v162 = v161;
    uint64_t v164 = v163;
    uint64_t v165 = swift_bridgeObjectRelease();
    JSONEncodingOptions.init()(v165);
    uint64_t v166 = sub_10003B7FC( &qword_1001D2858,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_Feedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_Feedback);
    Message.jsonString(options:)(v142, v143, v166);
    if (v158)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v1021 + 8))(v142, v1022);
      (*(void (**)(char *, uint64_t))(v144 + 8))(v146, v143);
      return v143;
    }

    (*(void (**)(char *, uint64_t))(v1021 + 8))(v142, v1022);
    (*(void (**)(char *, uint64_t))(v144 + 8))(v146, v143);
    uint64_t v206 = v162;
    uint64_t v184 = v164;
    uint64_t v207 = v1023;
    goto LABEL_12;
  }

  uint64_t v167 = v148;
  uint64_t v168 = v147;
  id v169 = v150;
  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.searchViewAppearFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v148 + 96))(v150, v168);
    uint64_t v170 = v1018;
    uint64_t v171 = v1019;
    uint64_t v172 = v1020;
    uint64_t v173 = (*(uint64_t (**)(char *, char *, uint64_t))(v1019 + 32))(v1018, v150, v1020);
    uint64_t v174 = static Apple_Parsec_Feedback_V2_SearchViewAppearFeedback.protoMessageName.getter(v173);
    unint64_t v176 = v175;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v174);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v177);
    uint64_t v178 = v174;
    uint64_t v179 = v1026;
    uint64_t v180 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v178, v176);
    swift_bridgeObjectRelease();
    uint64_t v1023 = sub_10003B73C(v180);
    uint64_t v1026 = v181;
    uint64_t v143 = v182;
    uint64_t v184 = v183;
    uint64_t v185 = swift_bridgeObjectRelease();
    JSONEncodingOptions.init()(v185);
    uint64_t v186 = sub_10003B7FC( &qword_1001D2850,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_SearchViewAppearFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_SearchViewAppearFeedback);
    Message.jsonString(options:)(v140, v172, v186);
    if (v179)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v1021 + 8))(v140, v1022);
      (*(void (**)(char *, uint64_t))(v171 + 8))(v170, v172);
      return v143;
    }

    (*(void (**)(char *, uint64_t))(v1021 + 8))(v140, v1022);
    (*(void (**)(char *, uint64_t))(v171 + 8))(v170, v172);
    uint64_t v208 = v1026;
    uint64_t v207 = v1023;
    uint64_t v206 = v143;
    goto LABEL_30;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.searchViewDisappearFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v148 + 96))(v150, v168);
    uint64_t v188 = v1015;
    uint64_t v187 = v1016;
    uint64_t v189 = v1017;
    uint64_t v190 = (*(uint64_t (**)(char *, char *, uint64_t))(v1016 + 32))(v1015, v169, v1017);
    uint64_t v191 = static Apple_Parsec_Feedback_V2_SearchViewDisappearFeedback.protoMessageName.getter(v190);
    unint64_t v193 = v192;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v191);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v194);
    uint64_t v195 = v191;
    uint64_t v196 = v1026;
    uint64_t v197 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v195, v193);
    swift_bridgeObjectRelease();
    uint64_t v1023 = sub_10003B73C(v197);
    uint64_t v1026 = v198;
    uint64_t v1020 = v199;
    uint64_t v143 = v200;
    uint64_t v201 = swift_bridgeObjectRelease();
    JSONEncodingOptions.init()(v201);
    uint64_t v202 = sub_10003B7FC( &qword_1001D2848,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_SearchViewDisappearFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_SearchViewDisappearFeedback);
    Message.jsonString(options:)(v137, v189, v202);
    if (v196)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v1021 + 8))(v137, v1022);
      v203 = *(void (**)(char *, uint64_t))(v187 + 8);
      v204 = v188;
LABEL_10:
      uint64_t v205 = v189;
LABEL_110:
      v203(v204, v205);
      return v143;
    }

    (*(void (**)(char *, uint64_t))(v1021 + 8))(v137, v1022);
    (*(void (**)(char *, uint64_t))(v187 + 8))(v188, v189);
    uint64_t v207 = v1023;
    uint64_t v208 = v1026;
    uint64_t v206 = v1020;
    uint64_t v184 = v143;
    goto LABEL_30;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.rankingFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v148 + 96))(v150, v168);
    v209 = v1010;
    uint64_t v210 = v1011;
    v211 = v150;
    uint64_t v212 = v1012;
    uint64_t v213 = (*(uint64_t (**)(char *, char *, uint64_t))(v1011 + 32))(v1010, v211, v1012);
    uint64_t v214 = static Apple_Parsec_Feedback_V2_RankingFeedback.protoMessageName.getter(v213);
    unint64_t v216 = v215;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v214);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v217);
    uint64_t v218 = v214;
    uint64_t v219 = v1026;
    uint64_t v220 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v218, v216);
    swift_bridgeObjectRelease();
    uint64_t v1023 = sub_10003B73C(v220);
    uint64_t v1026 = v221;
    uint64_t v1020 = v222;
    uint64_t v143 = v223;
    uint64_t v224 = swift_bridgeObjectRelease();
    v225 = v1009;
    JSONEncodingOptions.init()(v224);
    uint64_t v226 = sub_10003B7FC( &qword_1001D2840,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_RankingFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_RankingFeedback);
    Message.jsonString(options:)(v225, v212, v226);
    if (!v219)
    {
      (*(void (**)(char *, uint64_t))(v1021 + 8))(v225, v1022);
      (*(void (**)(char *, uint64_t))(v210 + 8))(v209, v212);
      uint64_t v184 = v143;
      uint64_t v208 = v1026;
      uint64_t v207 = v1023;
      uint64_t v206 = v1020;
      goto LABEL_30;
    }

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v1021 + 8))(v225, v1022);
    v203 = *(void (**)(char *, uint64_t))(v210 + 8);
    v204 = v209;
    goto LABEL_16;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.sectionRankingFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v148 + 96))(v150, v168);
    uint64_t v227 = v1014;
    v228 = v1006;
    uint64_t v229 = (*(uint64_t (**)(char *, char *, uint64_t))(v1013 + 32))(v1006, v169, v1014);
    uint64_t v230 = static Apple_Parsec_Feedback_V2_SectionRankingFeedback.protoMessageName.getter(v229);
    unint64_t v232 = v231;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v230);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v233);
    uint64_t v234 = v230;
    uint64_t v235 = v1026;
    uint64_t v236 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v234, v232);
    swift_bridgeObjectRelease();
    uint64_t v207 = sub_10003B73C(v236);
    uint64_t v1026 = v237;
    uint64_t v206 = v238;
    uint64_t v184 = v239;
    uint64_t v240 = swift_bridgeObjectRelease();
    uint64_t v143 = (uint64_t)v1005;
    JSONEncodingOptions.init()(v240);
    uint64_t v241 = sub_10003B7FC( &qword_1001D2838,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_SectionRankingFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_SectionRankingFeedback);
    Message.jsonString(options:)(v143, v227, v241);
    if (v235)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v1021 + 8))(v143, v1022);
      (*(void (**)(char *, uint64_t))(v1013 + 8))(v228, v1014);
      return v143;
    }

    (*(void (**)(uint64_t, uint64_t))(v1021 + 8))(v143, v1022);
    (*(void (**)(char *, uint64_t))(v1013 + 8))(v228, v1014);
    uint64_t v208 = v1026;
    goto LABEL_30;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.resultRankingFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v148 + 96))(v150, v168);
    uint64_t v242 = v1008;
    v243 = v1002;
    uint64_t v244 = (*(uint64_t (**)(char *, char *, uint64_t))(v1007 + 32))(v1002, v169, v1008);
    uint64_t v245 = static Apple_Parsec_Feedback_V2_ResultRankingFeedback.protoMessageName.getter(v244);
    unint64_t v247 = v246;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v245);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v248);
    uint64_t v249 = v245;
    uint64_t v250 = v1026;
    uint64_t v251 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v249, v247);
    swift_bridgeObjectRelease();
    uint64_t v207 = sub_10003B73C(v251);
    uint64_t v1026 = v252;
    uint64_t v206 = v253;
    uint64_t v184 = v254;
    uint64_t v255 = swift_bridgeObjectRelease();
    uint64_t v143 = (uint64_t)v1001;
    JSONEncodingOptions.init()(v255);
    uint64_t v256 = sub_10003B7FC( &qword_1001D2830,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ResultRankingFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_ResultRankingFeedback);
    Message.jsonString(options:)(v143, v242, v256);
    if (v250)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v1021 + 8))(v143, v1022);
      (*(void (**)(char *, uint64_t))(v1007 + 8))(v243, v1008);
      return v143;
    }

    (*(void (**)(uint64_t, uint64_t))(v1021 + 8))(v143, v1022);
    (*(void (**)(char *, uint64_t))(v1007 + 8))(v243, v1008);
    goto LABEL_12;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.resultFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v148 + 96))(v150, v168);
    v257 = v998;
    v258 = v150;
    uint64_t v259 = v1004;
    uint64_t v260 = (*(uint64_t (**)(char *, char *, uint64_t))(v1003 + 32))(v998, v258, v1004);
    uint64_t v261 = static Apple_Parsec_Feedback_V2_ResultFeedback.protoMessageName.getter(v260);
    unint64_t v263 = v262;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v261);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v264);
    uint64_t v265 = v261;
    uint64_t v266 = v1026;
    uint64_t v267 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v265, v263);
    swift_bridgeObjectRelease();
    uint64_t v207 = sub_10003B73C(v267);
    uint64_t v1026 = v268;
    uint64_t v206 = v269;
    uint64_t v184 = v270;
    uint64_t v271 = swift_bridgeObjectRelease();
    uint64_t v143 = (uint64_t)v997;
    JSONEncodingOptions.init()(v271);
    uint64_t v272 = sub_10003B7FC( &qword_1001D2828,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ResultFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_ResultFeedback);
    Message.jsonString(options:)(v143, v259, v272);
    if (v266)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v1021 + 8))(v143, v1022);
      v203 = *(void (**)(char *, uint64_t))(v1003 + 8);
      v204 = v257;
      p_uint64_t started = &v1028;
      goto LABEL_109;
    }

    (*(void (**)(uint64_t, uint64_t))(v1021 + 8))(v143, v1022);
    v306 = *(void (**)(char *, void))(v1003 + 8);
    v307 = v257;
    v308 = &v1028;
LABEL_65:
    v306(v307, *(v308 - 32));
LABEL_12:
    uint64_t v208 = v1026;
    goto LABEL_30;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.resultEngagementFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v148 + 96))(v150, v168);
    v274 = v994;
    v275 = v150;
    uint64_t v276 = v1000;
    uint64_t v277 = (*(uint64_t (**)(char *, char *, uint64_t))(v999 + 32))(v994, v275, v1000);
    uint64_t v278 = static Apple_Parsec_Feedback_V2_ResultEngagementFeedback.protoMessageName.getter(v277);
    unint64_t v280 = v279;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v278);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v281);
    uint64_t v282 = v278;
    uint64_t v283 = v1026;
    uint64_t v284 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v282, v280);
    swift_bridgeObjectRelease();
    uint64_t v207 = sub_10003B73C(v284);
    uint64_t v1026 = v285;
    uint64_t v206 = v286;
    uint64_t v184 = v287;
    uint64_t v288 = swift_bridgeObjectRelease();
    uint64_t v143 = (uint64_t)v993;
    JSONEncodingOptions.init()(v288);
    uint64_t v289 = sub_10003B7FC( &qword_1001D2820,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ResultEngagementFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_ResultEngagementFeedback);
    Message.jsonString(options:)(v143, v276, v289);
    if (v283)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v1021 + 8))(v143, v1022);
      v203 = *(void (**)(char *, uint64_t))(v999 + 8);
      v204 = v274;
      p_uint64_t started = &v1027;
      goto LABEL_109;
    }

    (*(void (**)(uint64_t, uint64_t))(v1021 + 8))(v143, v1022);
    v306 = *(void (**)(char *, void))(v999 + 8);
    v307 = v274;
    v308 = &v1027;
    goto LABEL_65;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.visibleResultsFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v148 + 96))(v150, v168);
    v290 = v990;
    v291 = v150;
    uint64_t v292 = v996;
    uint64_t v293 = (*(uint64_t (**)(char *, char *, uint64_t))(v995 + 32))(v990, v291, v996);
    uint64_t v294 = static Apple_Parsec_Feedback_V2_VisibleResultsFeedback.protoMessageName.getter(v293);
    unint64_t v296 = v295;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v294);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v297);
    uint64_t v298 = v294;
    uint64_t v299 = v1026;
    uint64_t v300 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v298, v296);
    swift_bridgeObjectRelease();
    uint64_t v207 = sub_10003B73C(v300);
    uint64_t v1026 = v301;
    uint64_t v206 = v302;
    uint64_t v184 = v303;
    uint64_t v304 = swift_bridgeObjectRelease();
    uint64_t v143 = (uint64_t)v989;
    JSONEncodingOptions.init()(v304);
    uint64_t v305 = sub_10003B7FC( &qword_1001D2818,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_VisibleResultsFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_VisibleResultsFeedback);
    Message.jsonString(options:)(v143, v292, v305);
    if (v299)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v1021 + 8))(v143, v1022);
      v203 = *(void (**)(char *, uint64_t))(v995 + 8);
      v204 = v290;
      p_uint64_t started = &v1026;
      goto LABEL_109;
    }

    (*(void (**)(uint64_t, uint64_t))(v1021 + 8))(v143, v1022);
    v306 = *(void (**)(char *, void))(v995 + 8);
    v307 = v290;
    v308 = &v1026;
    goto LABEL_65;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.cardSectionFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v148 + 96))(v150, v168);
    v309 = v986;
    v310 = v150;
    uint64_t v311 = v992;
    uint64_t v312 = (*(uint64_t (**)(char *, char *, uint64_t))(v991 + 32))(v986, v310, v992);
    uint64_t v313 = static Apple_Parsec_Feedback_V2_CardSectionFeedback.protoMessageName.getter(v312);
    unint64_t v315 = v314;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v313);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v316);
    uint64_t v317 = v313;
    uint64_t v318 = v1026;
    uint64_t v319 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v317, v315);
    swift_bridgeObjectRelease();
    uint64_t v207 = sub_10003B73C(v319);
    uint64_t v1026 = v320;
    uint64_t v206 = v321;
    uint64_t v184 = v322;
    uint64_t v323 = swift_bridgeObjectRelease();
    uint64_t v143 = (uint64_t)v985;
    JSONEncodingOptions.init()(v323);
    uint64_t v324 = sub_10003B7FC( &qword_1001D2810,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_CardSectionFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_CardSectionFeedback);
    Message.jsonString(options:)(v143, v311, v324);
    if (v318)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v1021 + 8))(v143, v1022);
      v203 = *(void (**)(char *, uint64_t))(v991 + 8);
      v204 = v309;
      p_uint64_t started = &v1024;
      goto LABEL_109;
    }

    (*(void (**)(uint64_t, uint64_t))(v1021 + 8))(v143, v1022);
    v306 = *(void (**)(char *, void))(v991 + 8);
    v307 = v309;
    v308 = &v1024;
    goto LABEL_65;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.mapsCardSectionEngagementFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v148 + 96))(v150, v168);
    v325 = v982;
    v326 = v150;
    uint64_t v327 = v988;
    uint64_t v328 = (*(uint64_t (**)(char *, char *, uint64_t))(v987 + 32))(v982, v326, v988);
    uint64_t v329 = static Apple_Parsec_Feedback_V2_MapsCardSectionEngagementFeedback.protoMessageName.getter(v328);
    unint64_t v331 = v330;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v329);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v332);
    uint64_t v333 = v329;
    uint64_t v334 = v1026;
    uint64_t v335 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v333, v331);
    swift_bridgeObjectRelease();
    uint64_t v207 = sub_10003B73C(v335);
    uint64_t v1026 = v336;
    uint64_t v206 = v337;
    uint64_t v184 = v338;
    uint64_t v339 = swift_bridgeObjectRelease();
    uint64_t v143 = (uint64_t)v981;
    JSONEncodingOptions.init()(v339);
    uint64_t v340 = sub_10003B7FC( &qword_1001D2808,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_MapsCardSectionEngagementFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_MapsCardSectionEngagementFeedback);
    Message.jsonString(options:)(v143, v327, v340);
    if (v334)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v1021 + 8))(v143, v1022);
      v203 = *(void (**)(char *, uint64_t))(v987 + 8);
      v204 = v325;
      p_uint64_t started = &v1020;
      goto LABEL_109;
    }

    (*(void (**)(uint64_t, uint64_t))(v1021 + 8))(v143, v1022);
    v306 = *(void (**)(char *, void))(v987 + 8);
    v307 = v325;
    v308 = &v1020;
    goto LABEL_65;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.storeCardSectionEngagementFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v148 + 96))(v150, v168);
    v341 = v978;
    v342 = v150;
    uint64_t v343 = v984;
    uint64_t v344 = (*(uint64_t (**)(char *, char *, uint64_t))(v983 + 32))(v978, v342, v984);
    uint64_t v345 = static Apple_Parsec_Feedback_V2_StoreCardSectionEngagementFeedback.protoMessageName.getter(v344);
    unint64_t v347 = v346;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v345);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v348);
    uint64_t v349 = v345;
    uint64_t v350 = v1026;
    uint64_t v351 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v349, v347);
    swift_bridgeObjectRelease();
    uint64_t v207 = sub_10003B73C(v351);
    uint64_t v1026 = v352;
    uint64_t v206 = v353;
    uint64_t v184 = v354;
    uint64_t v355 = swift_bridgeObjectRelease();
    uint64_t v143 = (uint64_t)v977;
    JSONEncodingOptions.init()(v355);
    uint64_t v356 = sub_10003B7FC( &qword_1001D2800,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_StoreCardSectionEngagementFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_StoreCardSectionEngagementFeedback);
    Message.jsonString(options:)(v143, v343, v356);
    if (v350)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v1021 + 8))(v143, v1022);
      v203 = *(void (**)(char *, uint64_t))(v983 + 8);
      v204 = v341;
      p_uint64_t started = &v1016;
      goto LABEL_109;
    }

    (*(void (**)(uint64_t, uint64_t))(v1021 + 8))(v143, v1022);
    v306 = *(void (**)(char *, void))(v983 + 8);
    v307 = v341;
    v308 = &v1016;
    goto LABEL_65;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.startSearchFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v148 + 96))(v150, v168);
    v357 = v967;
    v358 = v150;
    uint64_t v359 = v980;
    uint64_t v360 = (*(uint64_t (**)(char *, char *, uint64_t))(v979 + 32))(v967, v358, v980);
    uint64_t v361 = static Apple_Parsec_Feedback_V2_StartSearchFeedback.protoMessageName.getter(v360);
    unint64_t v363 = v362;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v361);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v364);
    uint64_t v365 = v361;
    uint64_t v366 = v1026;
    uint64_t v367 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v365, v363);
    swift_bridgeObjectRelease();
    uint64_t v207 = sub_10003B73C(v367);
    uint64_t v1026 = v368;
    uint64_t v206 = v369;
    uint64_t v184 = v370;
    uint64_t v371 = swift_bridgeObjectRelease();
    uint64_t v143 = (uint64_t)v965;
    JSONEncodingOptions.init()(v371);
    uint64_t v372 = sub_10003B7FC( &qword_1001D27F8,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_StartSearchFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_StartSearchFeedback);
    Message.jsonString(options:)(v143, v359, v372);
    if (v366)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v1021 + 8))(v143, v1022);
      v203 = *(void (**)(char *, uint64_t))(v979 + 8);
      v204 = v357;
      p_uint64_t started = &v1012;
      goto LABEL_109;
    }

    (*(void (**)(uint64_t, uint64_t))(v1021 + 8))(v143, v1022);
    v306 = *(void (**)(char *, void))(v979 + 8);
    v307 = v357;
    v308 = &v1012;
    goto LABEL_65;
  }

  v373 = v971;
  uint64_t v212 = v972;
  uint64_t v143 = (uint64_t)v973;
  uint64_t v374 = v974;
  v375 = v975;
  uint64_t v189 = v976;
  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.endSearchFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
    uint64_t v376 = v970;
    uint64_t v377 = (*(uint64_t (**)(char *, char *, uint64_t))(v969 + 32))(v968, v169, v970);
    uint64_t v378 = static Apple_Parsec_Feedback_V2_EndSearchFeedback.protoMessageName.getter(v377);
    unint64_t v380 = v379;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v378);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v381);
    uint64_t v382 = v378;
    uint64_t v383 = v1026;
    uint64_t v384 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v382, v380);
    swift_bridgeObjectRelease();
    uint64_t v1023 = sub_10003B73C(v384);
    uint64_t v143 = v385;
    uint64_t v206 = v386;
    uint64_t v184 = v387;
    uint64_t v388 = swift_bridgeObjectRelease();
    v389 = v966;
    JSONEncodingOptions.init()(v388);
    uint64_t v390 = sub_10003B7FC( &qword_1001D27F0,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_EndSearchFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_EndSearchFeedback);
    Message.jsonString(options:)(v389, v376, v390);
    if (v383)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v1021 + 8))(v966, v1022);
      v203 = *(void (**)(char *, uint64_t))(v969 + 8);
      v204 = v968;
      p_uint64_t started = (uint64_t *)&v1002;
      goto LABEL_109;
    }

    (*(void (**)(char *, uint64_t))(v1021 + 8))(v966, v1022);
    (*(void (**)(char *, uint64_t))(v969 + 8))(v968, v970);
LABEL_121:
    uint64_t v207 = v1023;
    uint64_t v208 = v143;
    goto LABEL_30;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.startNetworkSearchFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
    uint64_t v391 = v964;
    uint64_t v392 = (*(uint64_t (**)(char *, char *, uint64_t))(v963 + 32))(v962, v169, v964);
    uint64_t v393 = static Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.protoMessageName.getter(v392);
    unint64_t v395 = v394;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v393);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v396);
    uint64_t v397 = v393;
    uint64_t v398 = v1026;
    uint64_t v399 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v397, v395);
    swift_bridgeObjectRelease();
    uint64_t v1023 = sub_10003B73C(v399);
    uint64_t v143 = v400;
    uint64_t v206 = v401;
    uint64_t v184 = v402;
    uint64_t v403 = swift_bridgeObjectRelease();
    v404 = v961;
    JSONEncodingOptions.init()(v403);
    uint64_t v405 = sub_10003B7FC( &qword_1001D27E8,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback);
    Message.jsonString(options:)(v404, v391, v405);
    if (v398)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v1021 + 8))(v961, v1022);
      v203 = *(void (**)(char *, uint64_t))(v963 + 8);
      v204 = v962;
      p_uint64_t started = &v996;
      goto LABEL_109;
    }

    (*(void (**)(char *, uint64_t))(v1021 + 8))(v961, v1022);
    (*(void (**)(char *, uint64_t))(v963 + 8))(v962, v964);
    goto LABEL_121;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.endNetworkSearchFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
    uint64_t v406 = v960;
    uint64_t v407 = (*(uint64_t (**)(char *, char *, uint64_t))(v959 + 32))(v958, v169, v960);
    uint64_t v408 = static Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.protoMessageName.getter(v407);
    unint64_t v410 = v409;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v408);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v411);
    uint64_t v412 = v408;
    uint64_t v413 = v1026;
    uint64_t v414 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v412, v410);
    swift_bridgeObjectRelease();
    uint64_t v1023 = sub_10003B73C(v414);
    uint64_t v143 = v415;
    uint64_t v206 = v416;
    uint64_t v184 = v417;
    uint64_t v418 = swift_bridgeObjectRelease();
    v419 = v957;
    JSONEncodingOptions.init()(v418);
    uint64_t v420 = sub_10003B7FC( &qword_1001D27E0,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback);
    Message.jsonString(options:)(v419, v406, v420);
    if (v413)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v1021 + 8))(v957, v1022);
      v203 = *(void (**)(char *, uint64_t))(v959 + 8);
      v204 = v958;
      p_uint64_t started = &v992;
      goto LABEL_109;
    }

    (*(void (**)(char *, uint64_t))(v1021 + 8))(v957, v1022);
    (*(void (**)(char *, uint64_t))(v959 + 8))(v958, v960);
    goto LABEL_121;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.startLocalSearchFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
    uint64_t v421 = started;
    uint64_t v422 = (*(uint64_t (**)(char *, char *, uint64_t))(v955 + 32))(v954, v169, started);
    uint64_t v423 = static Apple_Parsec_Feedback_V2_StartLocalSearchFeedback.protoMessageName.getter(v422);
    unint64_t v425 = v424;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v423);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v426);
    uint64_t v427 = v423;
    uint64_t v428 = v1026;
    uint64_t v429 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v427, v425);
    swift_bridgeObjectRelease();
    uint64_t v1023 = sub_10003B73C(v429);
    uint64_t v143 = v430;
    uint64_t v206 = v431;
    uint64_t v184 = v432;
    uint64_t v433 = swift_bridgeObjectRelease();
    v434 = v953;
    JSONEncodingOptions.init()(v433);
    uint64_t v435 = sub_10003B7FC( &qword_1001D27D8,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_StartLocalSearchFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_StartLocalSearchFeedback);
    Message.jsonString(options:)(v434, v421, v435);
    if (v428)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v1021 + 8))(v953, v1022);
      v203 = *(void (**)(char *, uint64_t))(v955 + 8);
      v204 = v954;
      p_uint64_t started = &v988;
      goto LABEL_109;
    }

    (*(void (**)(char *, uint64_t))(v1021 + 8))(v953, v1022);
    (*(void (**)(char *, uint64_t))(v955 + 8))(v954, started);
    goto LABEL_121;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.endLocalSearchFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
    uint64_t v436 = v952;
    uint64_t v437 = (*(uint64_t (**)(char *, char *, uint64_t))(v951 + 32))(v950, v169, v952);
    uint64_t v438 = static Apple_Parsec_Feedback_V2_EndLocalSearchFeedback.protoMessageName.getter(v437);
    unint64_t v440 = v439;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v438);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v441);
    uint64_t v442 = v438;
    uint64_t v443 = v1026;
    uint64_t v444 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v442, v440);
    swift_bridgeObjectRelease();
    uint64_t v1023 = sub_10003B73C(v444);
    uint64_t v143 = v445;
    uint64_t v206 = v446;
    uint64_t v184 = v447;
    uint64_t v448 = swift_bridgeObjectRelease();
    v449 = v949;
    JSONEncodingOptions.init()(v448);
    uint64_t v450 = sub_10003B7FC( &qword_1001D27D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_EndLocalSearchFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_EndLocalSearchFeedback);
    Message.jsonString(options:)(v449, v436, v450);
    if (v443)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v1021 + 8))(v949, v1022);
      v203 = *(void (**)(char *, uint64_t))(v951 + 8);
      v204 = v950;
      p_uint64_t started = &v984;
      goto LABEL_109;
    }

    (*(void (**)(char *, uint64_t))(v1021 + 8))(v949, v1022);
    (*(void (**)(char *, uint64_t))(v951 + 8))(v950, v952);
    goto LABEL_121;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.errorFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
    uint64_t v451 = v948;
    uint64_t v452 = (*(uint64_t (**)(char *, char *, uint64_t))(v947 + 32))(v946, v169, v948);
    uint64_t v453 = static Apple_Parsec_Feedback_V2_ErrorFeedback.protoMessageName.getter(v452);
    unint64_t v455 = v454;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v453);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v456);
    uint64_t v457 = v453;
    uint64_t v458 = v1026;
    uint64_t v459 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v457, v455);
    swift_bridgeObjectRelease();
    uint64_t v1023 = sub_10003B73C(v459);
    uint64_t v143 = v460;
    uint64_t v206 = v461;
    uint64_t v184 = v462;
    uint64_t v463 = swift_bridgeObjectRelease();
    v464 = v945;
    JSONEncodingOptions.init()(v463);
    uint64_t v465 = sub_10003B7FC( &qword_1001D27C8,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ErrorFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_ErrorFeedback);
    Message.jsonString(options:)(v464, v451, v465);
    if (v458)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v1021 + 8))(v945, v1022);
      v203 = *(void (**)(char *, uint64_t))(v947 + 8);
      v204 = v946;
      p_uint64_t started = &v980;
      goto LABEL_109;
    }

    (*(void (**)(char *, uint64_t))(v1021 + 8))(v945, v1022);
    (*(void (**)(char *, uint64_t))(v947 + 8))(v946, v948);
    goto LABEL_121;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.customFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
    uint64_t v466 = v944;
    uint64_t v467 = (*(uint64_t (**)(char *, char *, uint64_t))(v943 + 32))(v942, v169, v944);
    uint64_t v468 = static Apple_Parsec_Feedback_V2_CustomFeedback.protoMessageName.getter(v467);
    unint64_t v470 = v469;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v468);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v471);
    uint64_t v472 = v468;
    uint64_t v473 = v1026;
    uint64_t v474 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v472, v470);
    swift_bridgeObjectRelease();
    uint64_t v1023 = sub_10003B73C(v474);
    uint64_t v143 = v475;
    uint64_t v206 = v476;
    uint64_t v184 = v477;
    uint64_t v478 = swift_bridgeObjectRelease();
    v479 = v941;
    JSONEncodingOptions.init()(v478);
    uint64_t v480 = sub_10003B7FC( &qword_1001D27C0,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_CustomFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_CustomFeedback);
    Message.jsonString(options:)(v479, v466, v480);
    if (v473)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v1021 + 8))(v941, v1022);
      v203 = *(void (**)(char *, uint64_t))(v943 + 8);
      v204 = v942;
      p_uint64_t started = &v976;
      goto LABEL_109;
    }

    (*(void (**)(char *, uint64_t))(v1021 + 8))(v941, v1022);
    (*(void (**)(char *, uint64_t))(v943 + 8))(v942, v944);
    goto LABEL_121;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.suggestionEngagementFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
    uint64_t v481 = v940;
    uint64_t v482 = (*(uint64_t (**)(char *, char *, uint64_t))(v939 + 32))(v938, v169, v940);
    uint64_t v483 = static Apple_Parsec_Feedback_V2_SuggestionEngagementFeedback.protoMessageName.getter(v482);
    unint64_t v485 = v484;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v483);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v486);
    uint64_t v487 = v483;
    uint64_t v488 = v1026;
    uint64_t v489 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v487, v485);
    swift_bridgeObjectRelease();
    uint64_t v1023 = sub_10003B73C(v489);
    uint64_t v143 = v490;
    uint64_t v206 = v491;
    uint64_t v184 = v492;
    uint64_t v493 = swift_bridgeObjectRelease();
    v494 = v937;
    JSONEncodingOptions.init()(v493);
    uint64_t v495 = sub_10003B7FC( &qword_1001D27B8,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_SuggestionEngagementFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_SuggestionEngagementFeedback);
    Message.jsonString(options:)(v494, v481, v495);
    if (v488)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v1021 + 8))(v937, v1022);
      v203 = *(void (**)(char *, uint64_t))(v939 + 8);
      v204 = v938;
      p_uint64_t started = &v972;
      goto LABEL_109;
    }

    (*(void (**)(char *, uint64_t))(v1021 + 8))(v937, v1022);
    (*(void (**)(char *, uint64_t))(v939 + 8))(v938, v940);
    goto LABEL_121;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.cardViewDisappearFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
    uint64_t v496 = v936;
    uint64_t v497 = (*(uint64_t (**)(char *, char *, uint64_t))(v935 + 32))(v934, v169, v936);
    uint64_t v498 = static Apple_Parsec_Feedback_V2_CardViewDisappearFeedback.protoMessageName.getter(v497);
    unint64_t v500 = v499;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v498);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v501);
    uint64_t v502 = v498;
    uint64_t v503 = v1026;
    uint64_t v504 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v502, v500);
    swift_bridgeObjectRelease();
    uint64_t v1023 = sub_10003B73C(v504);
    uint64_t v143 = v505;
    uint64_t v206 = v506;
    uint64_t v184 = v507;
    uint64_t v508 = swift_bridgeObjectRelease();
    v509 = v933;
    JSONEncodingOptions.init()(v508);
    uint64_t v510 = sub_10003B7FC( &qword_1001D27B0,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_CardViewDisappearFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_CardViewDisappearFeedback);
    Message.jsonString(options:)(v509, v496, v510);
    if (v503)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v1021 + 8))(v933, v1022);
      v203 = *(void (**)(char *, uint64_t))(v935 + 8);
      v204 = v934;
      p_uint64_t started = (uint64_t *)&v968;
      goto LABEL_109;
    }

    (*(void (**)(char *, uint64_t))(v1021 + 8))(v933, v1022);
    (*(void (**)(char *, uint64_t))(v935 + 8))(v934, v936);
    goto LABEL_121;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.visibleSuggestionsFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
    uint64_t v511 = v932;
    uint64_t v512 = (*(uint64_t (**)(char *, char *, uint64_t))(v931 + 32))(v930, v169, v932);
    uint64_t v513 = static Apple_Parsec_Feedback_V2_VisibleSuggestionsFeedback.protoMessageName.getter(v512);
    unint64_t v515 = v514;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v513);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v516);
    uint64_t v517 = v513;
    uint64_t v518 = v1026;
    uint64_t v519 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v517, v515);
    swift_bridgeObjectRelease();
    uint64_t v1023 = sub_10003B73C(v519);
    uint64_t v143 = v520;
    uint64_t v206 = v521;
    uint64_t v184 = v522;
    uint64_t v523 = swift_bridgeObjectRelease();
    v524 = v929;
    JSONEncodingOptions.init()(v523);
    uint64_t v525 = sub_10003B7FC( &qword_1001D27A8,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_VisibleSuggestionsFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_VisibleSuggestionsFeedback);
    Message.jsonString(options:)(v524, v511, v525);
    if (v518)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v1021 + 8))(v929, v1022);
      v203 = *(void (**)(char *, uint64_t))(v931 + 8);
      v204 = v930;
      p_uint64_t started = &v964;
      goto LABEL_109;
    }

    (*(void (**)(char *, uint64_t))(v1021 + 8))(v929, v1022);
    (*(void (**)(char *, uint64_t))(v931 + 8))(v930, v932);
    goto LABEL_121;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.resultsReceivedAfterTimeoutFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
    uint64_t v526 = v871;
    uint64_t v527 = (*(uint64_t (**)(char *, char *, uint64_t))(v870 + 32))(v869, v169, v871);
    uint64_t v528 = static Apple_Parsec_Feedback_V2_ResultsReceivedAfterTimeoutFeedback.protoMessageName.getter(v527);
    unint64_t v530 = v529;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v528);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v531);
    uint64_t v532 = v528;
    uint64_t v533 = v1026;
    uint64_t v534 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v532, v530);
    swift_bridgeObjectRelease();
    uint64_t v1023 = sub_10003B73C(v534);
    uint64_t v143 = v535;
    uint64_t v206 = v536;
    uint64_t v184 = v537;
    uint64_t v538 = swift_bridgeObjectRelease();
    v539 = v847;
    JSONEncodingOptions.init()(v538);
    uint64_t v540 = sub_10003B7FC( &qword_1001D27A0,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ResultsReceivedAfterTimeoutFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_ResultsReceivedAfterTimeoutFeedback);
    Message.jsonString(options:)(v539, v526, v540);
    if (v533)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v1021 + 8))(v847, v1022);
      v203 = *(void (**)(char *, uint64_t))(v870 + 8);
      v204 = v869;
      p_uint64_t started = (uint64_t *)&v903;
      goto LABEL_109;
    }

    (*(void (**)(char *, uint64_t))(v1021 + 8))(v847, v1022);
    (*(void (**)(char *, uint64_t))(v870 + 8))(v869, v871);
    goto LABEL_121;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.lateSectionsAppendedFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
    uint64_t v541 = v874;
    uint64_t v542 = (*(uint64_t (**)(char *, char *, uint64_t))(v873 + 32))(v872, v169, v874);
    uint64_t v543 = static Apple_Parsec_Feedback_V2_LateSectionsAppendedFeedback.protoMessageName.getter(v542);
    unint64_t v545 = v544;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v543);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v546);
    uint64_t v547 = v543;
    uint64_t v548 = v1026;
    uint64_t v549 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v547, v545);
    swift_bridgeObjectRelease();
    uint64_t v1023 = sub_10003B73C(v549);
    uint64_t v143 = v550;
    uint64_t v206 = v551;
    uint64_t v184 = v552;
    uint64_t v553 = swift_bridgeObjectRelease();
    v554 = v848;
    JSONEncodingOptions.init()(v553);
    uint64_t v555 = sub_10003B7FC( &qword_1001D2798,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_LateSectionsAppendedFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_LateSectionsAppendedFeedback);
    Message.jsonString(options:)(v554, v541, v555);
    if (v548)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v1021 + 8))(v848, v1022);
      v203 = *(void (**)(char *, uint64_t))(v873 + 8);
      v204 = v872;
      p_uint64_t started = &v906;
      goto LABEL_109;
    }

    (*(void (**)(char *, uint64_t))(v1021 + 8))(v848, v1022);
    (*(void (**)(char *, uint64_t))(v873 + 8))(v872, v874);
    goto LABEL_121;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.clearInputFeedback_p(_:))
  {
    (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
    uint64_t v556 = v877;
    uint64_t v557 = (*(uint64_t (**)(char *, char *, uint64_t))(v876 + 32))(v875, v169, v877);
    uint64_t v558 = static Apple_Parsec_Feedback_V2_ClearInputFeedback.protoMessageName.getter(v557);
    unint64_t v560 = v559;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v558);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v561);
    uint64_t v562 = v558;
    uint64_t v563 = v1026;
    uint64_t v564 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v562, v560);
    swift_bridgeObjectRelease();
    uint64_t v1023 = sub_10003B73C(v564);
    uint64_t v143 = v565;
    uint64_t v206 = v566;
    uint64_t v184 = v567;
    uint64_t v568 = swift_bridgeObjectRelease();
    v569 = v849;
    JSONEncodingOptions.init()(v568);
    uint64_t v570 = sub_10003B7FC( &qword_1001D2790,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ClearInputFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_ClearInputFeedback);
    Message.jsonString(options:)(v569, v556, v570);
    if (v563)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v1021 + 8))(v849, v1022);
      v203 = *(void (**)(char *, uint64_t))(v876 + 8);
      v204 = v875;
      p_uint64_t started = (uint64_t *)&v909;
      goto LABEL_109;
    }

    (*(void (**)(char *, uint64_t))(v1021 + 8))(v849, v1022);
    (*(void (**)(char *, uint64_t))(v876 + 8))(v875, v877);
    goto LABEL_121;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.sectionEngagementFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
    uint64_t v143 = v212;
    uint64_t v572 = (*(uint64_t (**)(char *, char *, uint64_t))(v878 + 32))(v373, v169, v212);
    uint64_t v573 = static Apple_Parsec_Feedback_V2_SectionEngagementFeedback.protoMessageName.getter(v572);
    unint64_t v575 = v574;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v573);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v576);
    uint64_t v577 = v573;
    uint64_t v578 = v1026;
    uint64_t v579 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v577, v575);
    swift_bridgeObjectRelease();
    uint64_t v207 = sub_10003B73C(v579);
    uint64_t v1026 = v580;
    uint64_t v582 = v581;
    uint64_t v584 = v583;
    uint64_t v585 = swift_bridgeObjectRelease();
    v586 = v850;
    JSONEncodingOptions.init()(v585);
    uint64_t v587 = sub_10003B7FC( &qword_1001D2788,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_SectionEngagementFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_SectionEngagementFeedback);
    Message.jsonString(options:)(v586, v212, v587);
    if (!v578)
    {
      (*(void (**)(char *, uint64_t))(v1021 + 8))(v850, v1022);
      (*(void (**)(char *, uint64_t))(v878 + 8))(v373, v212);
      uint64_t v184 = v584;
      uint64_t v208 = v1026;
      uint64_t v206 = v582;
      goto LABEL_30;
    }

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v1021 + 8))(v850, v1022);
    v203 = *(void (**)(char *, uint64_t))(v878 + 8);
    v204 = v373;
LABEL_16:
    uint64_t v205 = v212;
    goto LABEL_110;
  }

  if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.visibleSectionHeaderFeedback(_:))
  {
    (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
    uint64_t v588 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v879 + 32))(v143, v169, v374);
    uint64_t v589 = static Apple_Parsec_Feedback_V2_VisibleSectionHeaderFeedback.protoMessageName.getter(v588);
    unint64_t v591 = v590;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v589);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v592);
    uint64_t v593 = v589;
    uint64_t v594 = v1026;
    uint64_t v595 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v593, v591);
    swift_bridgeObjectRelease();
    uint64_t v1023 = sub_10003B73C(v595);
    uint64_t v1026 = v596;
    uint64_t v598 = v597;
    uint64_t v600 = v599;
    uint64_t v601 = swift_bridgeObjectRelease();
    v602 = v851;
    JSONEncodingOptions.init()(v601);
    uint64_t v603 = sub_10003B7FC( &qword_1001D2780,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_VisibleSectionHeaderFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_VisibleSectionHeaderFeedback);
    Message.jsonString(options:)(v602, v374, v603);
    if (v594)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v1021 + 8))(v851, v1022);
      (*(void (**)(uint64_t, uint64_t))(v879 + 8))(v143, v374);
      return v143;
    }

    (*(void (**)(char *, uint64_t))(v1021 + 8))(v851, v1022);
    (*(void (**)(uint64_t, uint64_t))(v879 + 8))(v143, v374);
    uint64_t v184 = v600;
    uint64_t v208 = v1026;
    uint64_t v206 = v598;
    uint64_t v207 = v1023;
    goto LABEL_30;
  }

  if (v151 != enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.didGoToSiteFeedback(_:))
  {
    if (v151 != enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.didGoToSearchFeedback(_:))
    {
      if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.sessionMissingResultsFeedback(_:))
      {
        (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
        uint64_t v143 = v900;
        uint64_t v636 = (*(uint64_t (**)(char *, char *, uint64_t))(v882 + 32))(v899, v169, v900);
        uint64_t v637 = static Apple_Parsec_Feedback_V2_SessionMissingResultsFeedback.protoMessageName.getter(v636);
        unint64_t v639 = v638;
        uint64_t v1024 = 46LL;
        unint64_t v1025 = 0xE100000000000000LL;
        __chkstk_darwin(v637);
        *(&v847 - 2) = (char *)&v1024;
        swift_bridgeObjectRetain(v640);
        uint64_t v641 = v637;
        uint64_t v642 = v1026;
        uint64_t v643 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v641, v639);
        swift_bridgeObjectRelease();
        uint64_t v207 = sub_10003B73C(v643);
        uint64_t v645 = v644;
        uint64_t v206 = v646;
        uint64_t v184 = v647;
        uint64_t v648 = swift_bridgeObjectRelease();
        v649 = v854;
        JSONEncodingOptions.init()(v648);
        uint64_t v650 = sub_10003B7FC( &qword_1001D2768,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_SessionMissingResultsFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_SessionMissingResultsFeedback);
        Message.jsonString(options:)(v649, v143, v650);
        if (v642)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v1021 + 8))(v854, v1022);
          v203 = *(void (**)(char *, uint64_t))(v882 + 8);
          v204 = v899;
          p_uint64_t started = &v932;
          goto LABEL_109;
        }

        (*(void (**)(char *, uint64_t))(v1021 + 8))(v854, v1022);
        (*(void (**)(char *, uint64_t))(v882 + 8))(v899, v900);
      }

      else if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.sessionMissingSuggestionsFeedback(_:))
      {
        (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
        uint64_t v143 = v902;
        uint64_t v651 = (*(uint64_t (**)(char *, char *, uint64_t))(v883 + 32))(v901, v169, v902);
        uint64_t v652 = static Apple_Parsec_Feedback_V2_SessionMissingSuggestionsFeedback.protoMessageName.getter(v651);
        unint64_t v654 = v653;
        uint64_t v1024 = 46LL;
        unint64_t v1025 = 0xE100000000000000LL;
        __chkstk_darwin(v652);
        *(&v847 - 2) = (char *)&v1024;
        swift_bridgeObjectRetain(v655);
        uint64_t v656 = v652;
        uint64_t v657 = v1026;
        uint64_t v658 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v656, v654);
        swift_bridgeObjectRelease();
        uint64_t v207 = sub_10003B73C(v658);
        uint64_t v645 = v659;
        uint64_t v206 = v660;
        uint64_t v184 = v661;
        uint64_t v662 = swift_bridgeObjectRelease();
        v663 = v855;
        JSONEncodingOptions.init()(v662);
        uint64_t v664 = sub_10003B7FC( &qword_1001D2760,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_SessionMissingSuggestionsFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_SessionMissingSuggestionsFeedback);
        Message.jsonString(options:)(v663, v143, v664);
        if (v657)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v1021 + 8))(v855, v1022);
          v203 = *(void (**)(char *, uint64_t))(v883 + 8);
          v204 = v901;
          p_uint64_t started = (uint64_t *)&v934;
          goto LABEL_109;
        }

        (*(void (**)(char *, uint64_t))(v1021 + 8))(v855, v1022);
        (*(void (**)(char *, uint64_t))(v883 + 8))(v901, v902);
      }

      else if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.resultGradingFeedback(_:))
      {
        (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
        uint64_t v143 = v904;
        uint64_t v665 = (*(uint64_t (**)(char *, char *, uint64_t))(v884 + 32))(v903, v169, v904);
        uint64_t v666 = static Apple_Parsec_Feedback_V2_ResultGradingFeedback.protoMessageName.getter(v665);
        unint64_t v668 = v667;
        uint64_t v1024 = 46LL;
        unint64_t v1025 = 0xE100000000000000LL;
        __chkstk_darwin(v666);
        *(&v847 - 2) = (char *)&v1024;
        swift_bridgeObjectRetain(v669);
        uint64_t v670 = v666;
        uint64_t v671 = v1026;
        uint64_t v672 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v670, v668);
        swift_bridgeObjectRelease();
        uint64_t v207 = sub_10003B73C(v672);
        uint64_t v645 = v673;
        uint64_t v206 = v674;
        uint64_t v184 = v675;
        uint64_t v676 = swift_bridgeObjectRelease();
        v677 = v856;
        JSONEncodingOptions.init()(v676);
        uint64_t v678 = sub_10003B7FC( &qword_1001D2758,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ResultGradingFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_ResultGradingFeedback);
        Message.jsonString(options:)(v677, v143, v678);
        if (v671)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v1021 + 8))(v856, v1022);
          v203 = *(void (**)(char *, uint64_t))(v884 + 8);
          v204 = v903;
          p_uint64_t started = &v936;
          goto LABEL_109;
        }

        (*(void (**)(char *, uint64_t))(v1021 + 8))(v856, v1022);
        (*(void (**)(char *, uint64_t))(v884 + 8))(v903, v904);
      }

      else if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.lookupHintRelevancyFeedback(_:))
      {
        (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
        uint64_t v143 = v906;
        uint64_t v679 = (*(uint64_t (**)(char *, char *, uint64_t))(v885 + 32))(v905, v169, v906);
        uint64_t v680 = static Apple_Parsec_Feedback_V2_LookupHintRelevancyFeedback.protoMessageName.getter(v679);
        unint64_t v682 = v681;
        uint64_t v1024 = 46LL;
        unint64_t v1025 = 0xE100000000000000LL;
        __chkstk_darwin(v680);
        *(&v847 - 2) = (char *)&v1024;
        swift_bridgeObjectRetain(v683);
        uint64_t v684 = v680;
        uint64_t v685 = v1026;
        uint64_t v686 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v684, v682);
        swift_bridgeObjectRelease();
        uint64_t v207 = sub_10003B73C(v686);
        uint64_t v645 = v687;
        uint64_t v206 = v688;
        uint64_t v184 = v689;
        uint64_t v690 = swift_bridgeObjectRelease();
        v691 = v857;
        JSONEncodingOptions.init()(v690);
        uint64_t v692 = sub_10003B7FC( &qword_1001D2750,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_LookupHintRelevancyFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_LookupHintRelevancyFeedback);
        Message.jsonString(options:)(v691, v143, v692);
        if (v685)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v1021 + 8))(v857, v1022);
          v203 = *(void (**)(char *, uint64_t))(v885 + 8);
          v204 = v905;
          p_uint64_t started = (uint64_t *)&v938;
          goto LABEL_109;
        }

        (*(void (**)(char *, uint64_t))(v1021 + 8))(v857, v1022);
        (*(void (**)(char *, uint64_t))(v885 + 8))(v905, v906);
      }

      else if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.connectionInvalidatedFeedback(_:))
      {
        (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
        uint64_t v143 = v908;
        uint64_t v693 = (*(uint64_t (**)(char *, char *, uint64_t))(v886 + 32))(v907, v169, v908);
        uint64_t v694 = static Apple_Parsec_Feedback_V2_ConnectionInvalidatedFeedback.protoMessageName.getter(v693);
        unint64_t v696 = v695;
        uint64_t v1024 = 46LL;
        unint64_t v1025 = 0xE100000000000000LL;
        __chkstk_darwin(v694);
        *(&v847 - 2) = (char *)&v1024;
        swift_bridgeObjectRetain(v697);
        uint64_t v698 = v694;
        uint64_t v699 = v1026;
        uint64_t v700 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v698, v696);
        swift_bridgeObjectRelease();
        uint64_t v207 = sub_10003B73C(v700);
        uint64_t v645 = v701;
        uint64_t v206 = v702;
        uint64_t v184 = v703;
        uint64_t v704 = swift_bridgeObjectRelease();
        v705 = v858;
        JSONEncodingOptions.init()(v704);
        uint64_t v706 = sub_10003B7FC( &qword_1001D2748,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ConnectionInvalidatedFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_ConnectionInvalidatedFeedback);
        Message.jsonString(options:)(v705, v143, v706);
        if (v699)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v1021 + 8))(v858, v1022);
          v203 = *(void (**)(char *, uint64_t))(v886 + 8);
          v204 = v907;
          p_uint64_t started = &v940;
          goto LABEL_109;
        }

        (*(void (**)(char *, uint64_t))(v1021 + 8))(v858, v1022);
        (*(void (**)(char *, uint64_t))(v886 + 8))(v907, v908);
      }

      else if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.cardSectionEngagementFeedback(_:))
      {
        (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
        uint64_t v143 = v910;
        uint64_t v707 = (*(uint64_t (**)(char *, char *, uint64_t))(v887 + 32))(v909, v169, v910);
        uint64_t v708 = static Apple_Parsec_Feedback_V2_CardSectionEngagementFeedback.protoMessageName.getter(v707);
        unint64_t v710 = v709;
        uint64_t v1024 = 46LL;
        unint64_t v1025 = 0xE100000000000000LL;
        __chkstk_darwin(v708);
        *(&v847 - 2) = (char *)&v1024;
        swift_bridgeObjectRetain(v711);
        uint64_t v712 = v708;
        uint64_t v713 = v1026;
        uint64_t v714 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v712, v710);
        swift_bridgeObjectRelease();
        uint64_t v207 = sub_10003B73C(v714);
        uint64_t v645 = v715;
        uint64_t v206 = v716;
        uint64_t v184 = v717;
        uint64_t v718 = swift_bridgeObjectRelease();
        v719 = v859;
        JSONEncodingOptions.init()(v718);
        uint64_t v720 = sub_10003B7FC( &qword_1001D2740,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_CardSectionEngagementFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_CardSectionEngagementFeedback);
        Message.jsonString(options:)(v719, v143, v720);
        if (v713)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v1021 + 8))(v859, v1022);
          v203 = *(void (**)(char *, uint64_t))(v887 + 8);
          v204 = v909;
          p_uint64_t started = (uint64_t *)&v942;
          goto LABEL_109;
        }

        (*(void (**)(char *, uint64_t))(v1021 + 8))(v859, v1022);
        (*(void (**)(char *, uint64_t))(v887 + 8))(v909, v910);
      }

      else if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.sessionEndFeedback(_:))
      {
        (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
        uint64_t v143 = v912;
        uint64_t v721 = (*(uint64_t (**)(char *, char *, uint64_t))(v888 + 32))(v911, v169, v912);
        uint64_t v722 = static Apple_Parsec_Feedback_V2_SessionEndFeedback.protoMessageName.getter(v721);
        unint64_t v724 = v723;
        uint64_t v1024 = 46LL;
        unint64_t v1025 = 0xE100000000000000LL;
        __chkstk_darwin(v722);
        *(&v847 - 2) = (char *)&v1024;
        swift_bridgeObjectRetain(v725);
        uint64_t v726 = v722;
        uint64_t v727 = v1026;
        uint64_t v728 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v726, v724);
        swift_bridgeObjectRelease();
        uint64_t v207 = sub_10003B73C(v728);
        uint64_t v645 = v729;
        uint64_t v206 = v730;
        uint64_t v184 = v731;
        uint64_t v732 = swift_bridgeObjectRelease();
        v733 = v860;
        JSONEncodingOptions.init()(v732);
        uint64_t v734 = sub_10003B7FC( &qword_1001D2738,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_SessionEndFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_SessionEndFeedback);
        Message.jsonString(options:)(v733, v143, v734);
        if (v727)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v1021 + 8))(v860, v1022);
          v203 = *(void (**)(char *, uint64_t))(v888 + 8);
          v204 = v911;
          p_uint64_t started = &v944;
          goto LABEL_109;
        }

        (*(void (**)(char *, uint64_t))(v1021 + 8))(v860, v1022);
        (*(void (**)(char *, uint64_t))(v888 + 8))(v911, v912);
      }

      else if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.cardViewAppearFeedback(_:))
      {
        (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
        uint64_t v143 = v914;
        uint64_t v735 = (*(uint64_t (**)(char *, char *, uint64_t))(v889 + 32))(v913, v169, v914);
        uint64_t v736 = static Apple_Parsec_Feedback_V2_CardViewAppearFeedback.protoMessageName.getter(v735);
        unint64_t v738 = v737;
        uint64_t v1024 = 46LL;
        unint64_t v1025 = 0xE100000000000000LL;
        __chkstk_darwin(v736);
        *(&v847 - 2) = (char *)&v1024;
        swift_bridgeObjectRetain(v739);
        uint64_t v740 = v736;
        uint64_t v741 = v1026;
        uint64_t v742 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v740, v738);
        swift_bridgeObjectRelease();
        uint64_t v207 = sub_10003B73C(v742);
        uint64_t v645 = v743;
        uint64_t v206 = v744;
        uint64_t v184 = v745;
        uint64_t v746 = swift_bridgeObjectRelease();
        v747 = v861;
        JSONEncodingOptions.init()(v746);
        uint64_t v748 = sub_10003B7FC( &qword_1001D2730,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_CardViewAppearFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_CardViewAppearFeedback);
        Message.jsonString(options:)(v747, v143, v748);
        if (v741)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v1021 + 8))(v861, v1022);
          v203 = *(void (**)(char *, uint64_t))(v889 + 8);
          v204 = v913;
          p_uint64_t started = (uint64_t *)&v946;
          goto LABEL_109;
        }

        (*(void (**)(char *, uint64_t))(v1021 + 8))(v861, v1022);
        (*(void (**)(char *, uint64_t))(v889 + 8))(v913, v914);
      }

      else if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.skipSearchFeedback(_:))
      {
        (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
        uint64_t v143 = v916;
        uint64_t v749 = (*(uint64_t (**)(char *, char *, uint64_t))(v890 + 32))(v915, v169, v916);
        uint64_t v750 = static Apple_Parsec_Feedback_V2_SkipSearchFeedback.protoMessageName.getter(v749);
        unint64_t v752 = v751;
        uint64_t v1024 = 46LL;
        unint64_t v1025 = 0xE100000000000000LL;
        __chkstk_darwin(v750);
        *(&v847 - 2) = (char *)&v1024;
        swift_bridgeObjectRetain(v753);
        uint64_t v754 = v750;
        uint64_t v755 = v1026;
        uint64_t v756 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v754, v752);
        swift_bridgeObjectRelease();
        uint64_t v207 = sub_10003B73C(v756);
        uint64_t v645 = v757;
        uint64_t v206 = v758;
        uint64_t v184 = v759;
        uint64_t v760 = swift_bridgeObjectRelease();
        v761 = v862;
        JSONEncodingOptions.init()(v760);
        uint64_t v762 = sub_10003B7FC( &qword_1001D2728,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_SkipSearchFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_SkipSearchFeedback);
        Message.jsonString(options:)(v761, v143, v762);
        if (v755)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v1021 + 8))(v862, v1022);
          v203 = *(void (**)(char *, uint64_t))(v890 + 8);
          v204 = v915;
          p_uint64_t started = &v948;
          goto LABEL_109;
        }

        (*(void (**)(char *, uint64_t))(v1021 + 8))(v862, v1022);
        (*(void (**)(char *, uint64_t))(v890 + 8))(v915, v916);
      }

      else if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.cacheHitFeedback(_:))
      {
        (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
        uint64_t v143 = v918;
        uint64_t v763 = (*(uint64_t (**)(char *, char *, uint64_t))(v891 + 32))(v917, v169, v918);
        uint64_t v764 = static Apple_Parsec_Feedback_V2_CacheHitFeedback.protoMessageName.getter(v763);
        unint64_t v766 = v765;
        uint64_t v1024 = 46LL;
        unint64_t v1025 = 0xE100000000000000LL;
        __chkstk_darwin(v764);
        *(&v847 - 2) = (char *)&v1024;
        swift_bridgeObjectRetain(v767);
        uint64_t v768 = v764;
        uint64_t v769 = v1026;
        uint64_t v770 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v768, v766);
        swift_bridgeObjectRelease();
        uint64_t v207 = sub_10003B73C(v770);
        uint64_t v645 = v771;
        uint64_t v206 = v772;
        uint64_t v184 = v773;
        uint64_t v774 = swift_bridgeObjectRelease();
        v775 = v863;
        JSONEncodingOptions.init()(v774);
        uint64_t v776 = sub_10003B7FC( &qword_1001D2720,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_CacheHitFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_CacheHitFeedback);
        Message.jsonString(options:)(v775, v143, v776);
        if (v769)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v1021 + 8))(v863, v1022);
          v203 = *(void (**)(char *, uint64_t))(v891 + 8);
          v204 = v917;
          p_uint64_t started = (uint64_t *)&v950;
          goto LABEL_109;
        }

        (*(void (**)(char *, uint64_t))(v1021 + 8))(v863, v1022);
        (*(void (**)(char *, uint64_t))(v891 + 8))(v917, v918);
      }

      else if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.cbaEngagementFeedback(_:))
      {
        (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
        uint64_t v143 = v920;
        uint64_t v777 = (*(uint64_t (**)(char *, char *, uint64_t))(v892 + 32))(v919, v169, v920);
        uint64_t v778 = static Apple_Parsec_Feedback_V2_CBAEngagementFeedback.protoMessageName.getter(v777);
        unint64_t v780 = v779;
        uint64_t v1024 = 46LL;
        unint64_t v1025 = 0xE100000000000000LL;
        __chkstk_darwin(v778);
        *(&v847 - 2) = (char *)&v1024;
        swift_bridgeObjectRetain(v781);
        uint64_t v782 = v778;
        uint64_t v783 = v1026;
        uint64_t v784 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v782, v780);
        swift_bridgeObjectRelease();
        uint64_t v207 = sub_10003B73C(v784);
        uint64_t v645 = v785;
        uint64_t v206 = v786;
        uint64_t v184 = v787;
        uint64_t v788 = swift_bridgeObjectRelease();
        v789 = v864;
        JSONEncodingOptions.init()(v788);
        uint64_t v790 = sub_10003B7FC( &qword_1001D2718,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_CBAEngagementFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_CBAEngagementFeedback);
        Message.jsonString(options:)(v789, v143, v790);
        if (v783)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v1021 + 8))(v864, v1022);
          v203 = *(void (**)(char *, uint64_t))(v892 + 8);
          v204 = v919;
          p_uint64_t started = &v952;
          goto LABEL_109;
        }

        (*(void (**)(char *, uint64_t))(v1021 + 8))(v864, v1022);
        (*(void (**)(char *, uint64_t))(v892 + 8))(v919, v920);
      }

      else if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.clientTimingFeedback(_:))
      {
        (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
        uint64_t v143 = v922;
        uint64_t v791 = (*(uint64_t (**)(char *, char *, uint64_t))(v893 + 32))(v921, v169, v922);
        uint64_t v792 = static Apple_Parsec_Feedback_V2_ClientTimingFeedback.protoMessageName.getter(v791);
        unint64_t v794 = v793;
        uint64_t v1024 = 46LL;
        unint64_t v1025 = 0xE100000000000000LL;
        __chkstk_darwin(v792);
        *(&v847 - 2) = (char *)&v1024;
        swift_bridgeObjectRetain(v795);
        uint64_t v796 = v792;
        uint64_t v797 = v1026;
        uint64_t v798 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v796, v794);
        swift_bridgeObjectRelease();
        uint64_t v207 = sub_10003B73C(v798);
        uint64_t v645 = v799;
        uint64_t v206 = v800;
        uint64_t v184 = v801;
        uint64_t v802 = swift_bridgeObjectRelease();
        v803 = v865;
        JSONEncodingOptions.init()(v802);
        uint64_t v804 = sub_10003B7FC( &qword_1001D2710,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ClientTimingFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_ClientTimingFeedback);
        Message.jsonString(options:)(v803, v143, v804);
        if (v797)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v1021 + 8))(v865, v1022);
          v203 = *(void (**)(char *, uint64_t))(v893 + 8);
          v204 = v921;
          p_uint64_t started = (uint64_t *)&v954;
          goto LABEL_109;
        }

        (*(void (**)(char *, uint64_t))(v1021 + 8))(v865, v1022);
        (*(void (**)(char *, uint64_t))(v893 + 8))(v921, v922);
      }

      else if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.commandEngagementFeedback(_:))
      {
        (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
        uint64_t v143 = v924;
        uint64_t v805 = (*(uint64_t (**)(char *, char *, uint64_t))(v894 + 32))(v923, v169, v924);
        uint64_t v806 = static Apple_Parsec_Feedback_V2_CommandEngagementFeedback.protoMessageName.getter(v805);
        unint64_t v808 = v807;
        uint64_t v1024 = 46LL;
        unint64_t v1025 = 0xE100000000000000LL;
        __chkstk_darwin(v806);
        *(&v847 - 2) = (char *)&v1024;
        swift_bridgeObjectRetain(v809);
        uint64_t v810 = v806;
        uint64_t v811 = v1026;
        uint64_t v812 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v810, v808);
        swift_bridgeObjectRelease();
        uint64_t v207 = sub_10003B73C(v812);
        uint64_t v645 = v813;
        uint64_t v206 = v814;
        uint64_t v184 = v815;
        uint64_t v816 = swift_bridgeObjectRelease();
        v817 = v866;
        JSONEncodingOptions.init()(v816);
        uint64_t v818 = sub_10003B7FC( &qword_1001D2708,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_CommandEngagementFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_CommandEngagementFeedback);
        Message.jsonString(options:)(v817, v143, v818);
        if (v811)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v1021 + 8))(v866, v1022);
          v203 = *(void (**)(char *, uint64_t))(v894 + 8);
          v204 = v923;
          p_uint64_t started = &started;
          goto LABEL_109;
        }

        (*(void (**)(char *, uint64_t))(v1021 + 8))(v866, v1022);
        (*(void (**)(char *, uint64_t))(v894 + 8))(v923, v924);
      }

      else if (v151 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.dynamicButtonVisibilityFeedback(_:))
      {
        (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
        uint64_t v143 = v926;
        uint64_t v819 = (*(uint64_t (**)(char *, char *, uint64_t))(v895 + 32))(v925, v169, v926);
        uint64_t v820 = static Apple_Parsec_Feedback_V2_DynamicButtonVisibilityFeedback.protoMessageName.getter(v819);
        unint64_t v822 = v821;
        uint64_t v1024 = 46LL;
        unint64_t v1025 = 0xE100000000000000LL;
        __chkstk_darwin(v820);
        *(&v847 - 2) = (char *)&v1024;
        swift_bridgeObjectRetain(v823);
        uint64_t v824 = v820;
        uint64_t v825 = v1026;
        uint64_t v826 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v824, v822);
        swift_bridgeObjectRelease();
        uint64_t v207 = sub_10003B73C(v826);
        uint64_t v645 = v827;
        uint64_t v206 = v828;
        uint64_t v184 = v829;
        uint64_t v830 = swift_bridgeObjectRelease();
        v831 = v867;
        JSONEncodingOptions.init()(v830);
        uint64_t v832 = sub_10003B7FC( &qword_1001D2700,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_DynamicButtonVisibilityFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_DynamicButtonVisibilityFeedback);
        Message.jsonString(options:)(v831, v143, v832);
        if (v825)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v1021 + 8))(v867, v1022);
          v203 = *(void (**)(char *, uint64_t))(v895 + 8);
          v204 = v925;
          p_uint64_t started = (uint64_t *)&v958;
          goto LABEL_109;
        }

        (*(void (**)(char *, uint64_t))(v1021 + 8))(v867, v1022);
        (*(void (**)(char *, uint64_t))(v895 + 8))(v925, v926);
      }

      else
      {
        if (v151 != enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.experimentTriggeredFeedback(_:))
        {
          uint64_t v143 = 0x6E776F6E6B6E75LL;
          (*(void (**)(char *, uint64_t))(v167 + 8))(v169, v168);
          return v143;
        }

        (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
        uint64_t v143 = v928;
        uint64_t v833 = (*(uint64_t (**)(char *, char *, uint64_t))(v896 + 32))(v927, v169, v928);
        uint64_t v834 = static Apple_Parsec_Feedback_V2_ExperimentTriggeredFeedback.protoMessageName.getter(v833);
        unint64_t v836 = v835;
        uint64_t v1024 = 46LL;
        unint64_t v1025 = 0xE100000000000000LL;
        __chkstk_darwin(v834);
        *(&v847 - 2) = (char *)&v1024;
        swift_bridgeObjectRetain(v837);
        uint64_t v838 = v834;
        uint64_t v839 = v1026;
        uint64_t v840 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_1000341EC, (uint64_t)(&v847 - 4), v838, v836);
        swift_bridgeObjectRelease();
        uint64_t v207 = sub_10003B73C(v840);
        uint64_t v645 = v841;
        uint64_t v206 = v842;
        uint64_t v184 = v843;
        uint64_t v844 = swift_bridgeObjectRelease();
        v845 = v868;
        JSONEncodingOptions.init()(v844);
        uint64_t v846 = sub_10003B7FC( &qword_1001D26F8,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ExperimentTriggeredFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_ExperimentTriggeredFeedback);
        Message.jsonString(options:)(v845, v143, v846);
        if (v839)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v1021 + 8))(v868, v1022);
          v203 = *(void (**)(char *, uint64_t))(v896 + 8);
          v204 = v927;
          p_uint64_t started = &v960;
          goto LABEL_109;
        }

        (*(void (**)(char *, uint64_t))(v1021 + 8))(v868, v1022);
        (*(void (**)(char *, uint64_t))(v896 + 8))(v927, v928);
      }

      uint64_t v208 = v645;
      goto LABEL_30;
    }

    (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
    uint64_t v620 = v898;
    uint64_t v621 = (*(uint64_t (**)(char *, char *, uint64_t))(v881 + 32))(v897, v169, v898);
    uint64_t v622 = static Apple_Parsec_Feedback_V2_DidGoToSearchFeedback.protoMessageName.getter(v621);
    unint64_t v624 = v623;
    uint64_t v1024 = 46LL;
    unint64_t v1025 = 0xE100000000000000LL;
    __chkstk_darwin(v622);
    *(&v847 - 2) = (char *)&v1024;
    swift_bridgeObjectRetain(v625);
    uint64_t v626 = v622;
    uint64_t v627 = v1026;
    uint64_t v628 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v626, v624);
    swift_bridgeObjectRelease();
    uint64_t v207 = sub_10003B73C(v628);
    uint64_t v630 = v629;
    uint64_t v143 = v631;
    uint64_t v184 = v632;
    uint64_t v633 = swift_bridgeObjectRelease();
    v634 = v853;
    JSONEncodingOptions.init()(v633);
    uint64_t v635 = sub_10003B7FC( &qword_1001D2770,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_DidGoToSearchFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_DidGoToSearchFeedback);
    Message.jsonString(options:)(v634, v620, v635);
    if (!v627)
    {
      (*(void (**)(char *, uint64_t))(v1021 + 8))(v853, v1022);
      (*(void (**)(char *, uint64_t))(v881 + 8))(v897, v898);
      uint64_t v208 = v630;
      uint64_t v206 = v143;
      goto LABEL_30;
    }

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v1021 + 8))(v853, v1022);
    v203 = *(void (**)(char *, uint64_t))(v881 + 8);
    v204 = v897;
    p_uint64_t started = (uint64_t *)&v930;
LABEL_109:
    uint64_t v205 = *(p_started - 32);
    goto LABEL_110;
  }

  (*(void (**)(char *, uint64_t))(v167 + 96))(v169, v168);
  uint64_t v143 = v189;
  uint64_t v604 = (*(uint64_t (**)(char *, char *, uint64_t))(v880 + 32))(v375, v169, v189);
  uint64_t v605 = static Apple_Parsec_Feedback_V2_DidGoToSiteFeedback.protoMessageName.getter(v604);
  unint64_t v607 = v606;
  uint64_t v1024 = 46LL;
  unint64_t v1025 = 0xE100000000000000LL;
  __chkstk_darwin(v605);
  *(&v847 - 2) = (char *)&v1024;
  swift_bridgeObjectRetain(v608);
  uint64_t v609 = v605;
  uint64_t v610 = v1026;
  uint64_t v611 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10003B878, (uint64_t)(&v847 - 4), v609, v607);
  swift_bridgeObjectRelease();
  uint64_t v1023 = sub_10003B73C(v611);
  uint64_t v613 = v612;
  uint64_t v615 = v614;
  uint64_t v184 = v616;
  uint64_t v617 = swift_bridgeObjectRelease();
  v618 = v852;
  JSONEncodingOptions.init()(v617);
  uint64_t v619 = sub_10003B7FC( &qword_1001D2778,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_DidGoToSiteFeedback,  (uint64_t)&protocol conformance descriptor for Apple_Parsec_Feedback_V2_DidGoToSiteFeedback);
  Message.jsonString(options:)(v618, v189, v619);
  if (v610)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v1021 + 8))(v852, v1022);
    v203 = *(void (**)(char *, uint64_t))(v880 + 8);
    v204 = v375;
    goto LABEL_10;
  }

  (*(void (**)(char *, uint64_t))(v1021 + 8))(v852, v1022);
  (*(void (**)(char *, uint64_t))(v880 + 8))(v375, v189);
  uint64_t v207 = v1023;
  uint64_t v208 = v613;
  uint64_t v206 = v615;
LABEL_30:
  if (!v184) {
    return 0x6E776F6E6B6E75LL;
  }
  uint64_t v143 = static String._fromSubstring(_:)(v207, v208, v206, v184);
  swift_bridgeObjectRelease();
  return v143;
}

uint64_t type metadata accessor for ExperimentalFeedbackDatabase()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd28ExperimentalFeedbackDatabase);
}

uint64_t sub_10003B73C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = (uint64_t *)(a1 + 32 * v1);
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v2[3]);
  return v3;
}

uint64_t sub_10003B79C(void *a1)
{
  id v1 = [a1 data];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10003B7FC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10003B83C()
{
  unint64_t result = qword_1001D2860;
  if (!qword_1001D2860)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015ECBC, &unk_1001B32C8);
    atomic_store(result, (unint64_t *)&qword_1001D2860);
  }

  return result;
}

uint64_t sub_10003B878(uint64_t *a1)
{
  return sub_1000341EC(a1) & 1;
}

uint64_t sub_10003B890()
{
  return (*(uint64_t (**)(void, uint64_t))(v0[8] + 8LL))(v0[7], v1);
}

uint64_t sub_10003B8B0()
{
  return swift_slowAlloc(12LL, -1LL);
}

uint64_t sub_10003B8C0()
{
  *(_OWORD *)(v1 - 128) = *(_OWORD *)(v0 + 56);
  return sub_100025EAC(v1 - 128);
}

uint64_t sub_10003B8D0()
{
  *(_OWORD *)(v1 - 112) = *(_OWORD *)(v0 + 8);
  return sub_100025EAC(v1 - 112);
}

uint64_t sub_10003B8E0()
{
  return swift_release(*(void *)(v0 - 176));
}

uint64_t sub_10003B8E8()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10003B8F0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_10003B900()
{
  return swift_release(*(void *)(v0 - 224));
}

void sub_10003B908()
{
}

double sub_10003B910()
{
  *(void *)(v0 - 144) = 0LL;
  double result = 0.0;
  *(_OWORD *)(v0 - 176) = 0u;
  *(_OWORD *)(v0 - 160) = 0u;
  return result;
}

uint64_t sub_10003B924(uint64_t a1, unint64_t a2)
{
  return sub_1000307E0(a1, a2, (uint64_t *)(v2 - 240));
}

uint64_t sub_10003B930(uint64_t a1, uint64_t a2)
{
  return v2(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a2, 0LL);
}

uint64_t sub_10003B93C(uint64_t a1, uint64_t a2)
{
  return sub_100009654(a1, a2, 1LL, v2);
}

uint64_t sub_10003B948(uint64_t a1, uint64_t a2)
{
  return sub_100009654(a1, a2, 1LL, v2);
}

uint64_t sub_10003B954(uint64_t a1, uint64_t a2)
{
  return sub_100009654(a1, a2, 1LL, v2);
}

uint64_t sub_10003B960()
{
  return swift_getErrorValue(v0);
}

void SessionDBFeatureFlags.hash(into:)()
{
}

char *sub_10003B990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v11 = v5;
  id v12 = a5;
  id v13 = sub_10003C054(a1, a2, a3, a4, a5);
  if (v13)
  {
    id v14 = v13;
    sub_10003C15C( (uint64_t)&off_1001B0788,  (uint64_t)&_swiftEmptyArrayStorage,  (uint64_t)&_swiftEmptyArrayStorage,  (uint64_t)&_swiftEmptyArrayStorage,  v13);
  }

  else
  {
    if (qword_1001D0518 != -1) {
      swift_once(&qword_1001D0518, sub_100034490);
    }
    uint64_t v15 = sub_100010ED4();
    uint64_t v16 = (os_log_s *)sub_100010E78(v15, (uint64_t)qword_1001EDC18);
    os_log_type_t v18 = static os_log_type_t.error.getter(v16, v17);
    if (os_log_type_enabled(v16, v18))
    {
      uint64_t v19 = (uint8_t *)sub_10001441C();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v18, "Failed to inititialize APSConnection.", v19, 2u);
      sub_100010C34((uint64_t)v19);
    }

    id v14 = 0LL;
  }

  *(void *)&v11[OBJC_IVAR____TtC7parsecd34CloudNotificationChannelConnection_apsConnection] = v14;

  v26.receiver = v11;
  v26.super_class = (Class)type metadata accessor for CloudNotificationChannelConnection();
  uint64_t v20 = (char *)objc_msgSendSuper2(&v26, "init");
  uint64_t v21 = v20;
  uint64_t v22 = *(void **)&v20[OBJC_IVAR____TtC7parsecd34CloudNotificationChannelConnection_apsConnection];
  if (v22)
  {
    uint64_t v23 = v20;
    id v24 = v22;
    [v24 setDelegate:v23];
  }

  return v21;
}

void sub_10003BB48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void **)(v4 + OBJC_IVAR____TtC7parsecd34CloudNotificationChannelConnection_apsConnection);
  if (v5)
  {
    id v10 = objc_allocWithZone(&OBJC_CLASS___PKPublicChannel);
    id v11 = v5;
    swift_bridgeObjectRetain(a2);
    id v12 = sub_10003C0FC(a1, a2);
    sub_10003C23C((uint64_t)v12, a3, a4, v11);
  }

  else
  {
    unint64_t v13 = sub_10003C304();
    uint64_t v14 = swift_allocError(&type metadata for CloudNotificationChannelError, v13, 0LL, 0LL);
    swift_willThrow(v14);
  }

void sub_10003BC14(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 == 15)
  {
    if (qword_1001D0518 != -1) {
      swift_once(&qword_1001D0518, sub_100034490);
    }
    uint64_t v3 = sub_100010ED4();
    uint64_t v4 = sub_100010E78(v3, (uint64_t)qword_1001EDC18);
    os_log_type_t v6 = sub_10003C440(v4, v5);
    if (sub_10003C430(v6, v7, v8, v9, v10, v11, v12, v13, v26, oslog))
    {
      uint64_t v14 = (_WORD *)sub_10001441C();
      *uint64_t v14 = 0;
      sub_10003C41C( (void *)&_mh_execute_header,  v15,  v16,  "Received null public token on token callback.",  v17,  v18,  v19,  v20,  v27,  osloga);
      sub_100010C34((uint64_t)v14);
    }
  }

  else
  {
    sub_100014244(a2, a3);
    if (qword_1001D0518 != -1) {
      swift_once(&qword_1001D0518, sub_100034490);
    }
    uint64_t v23 = sub_100010ED4();
    osloga = (os_log_s *)sub_100010E78(v23, (uint64_t)qword_1001EDC18);
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(osloga, v24))
    {
      uint64_t v25 = (uint8_t *)sub_10001441C();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, osloga, v24, "Received cloud channels connection token", v25, 2u);
      sub_100010C34((uint64_t)v25);
    }

    sub_100010A1C(a2, a3);
  }
}

void sub_10003BDFC(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v43 = a2;
    uint64_t v2 = sub_10003C290(v43);
    if (v2)
    {
      sub_10003C448(v2);
      uint64_t v4 = v3;
      swift_bridgeObjectRelease();
      if (v4)
      {

        swift_bridgeObjectRelease();
        return;
      }
    }

    if (qword_1001D0518 != -1) {
      swift_once(&qword_1001D0518, sub_100034490);
    }
    uint64_t v5 = sub_100010ED4();
    uint64_t v6 = sub_100010E78(v5, (uint64_t)qword_1001EDC18);
    os_log_type_t v8 = sub_10003C440(v6, v7);
    if (!sub_10003C430(v8, v9, v10, v11, v12, v13, v14, v15, (uint64_t)v43, v47))
    {

      uint64_t v41 = v44;
      goto LABEL_15;
    }

    int v16 = (_WORD *)sub_10001441C();
    *int v16 = 0;
    sub_10003C41C( (void *)&_mh_execute_header,  v17,  v18,  "Received invalid APNS message.",  v19,  v20,  v21,  v22,  (uint64_t)v44,  (os_log_t)v48);
    sub_100010C34((uint64_t)v16);
  }

  else
  {
    if (qword_1001D0518 != -1) {
      swift_once(&qword_1001D0518, sub_100034490);
    }
    uint64_t v23 = sub_100010ED4();
    uint64_t v24 = sub_100010E78(v23, (uint64_t)qword_1001EDC18);
    os_log_type_t v26 = sub_10003C440(v24, v25);
    if (sub_10003C430(v26, v27, v28, v29, v30, v31, v32, v33, (uint64_t)v42, v47))
    {
      uint64_t v34 = (_WORD *)sub_10001441C();
      *uint64_t v34 = 0;
      sub_10003C41C( (void *)&_mh_execute_header,  v35,  v36,  "Received null APNs message.",  v37,  v38,  v39,  v40,  (uint64_t)v46,  v49);
      sub_100010C34((uint64_t)v34);
    }
  }

  uint64_t v41 = v49;
LABEL_15:
}

void sub_10003BFBC()
{
}

id sub_10003BFF4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CloudNotificationChannelConnection();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CloudNotificationChannelConnection()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd34CloudNotificationChannelConnection);
}

id sub_10003C054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (!a2)
  {
    NSString v9 = 0LL;
    if (a4) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v10 = 0LL;
    goto LABEL_6;
  }

  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (!a4) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
LABEL_6:
  id v11 = [v5 initWithEnvironmentName:v9 namedDelegatePort:v10 queue:a5];

  return v11;
}

id sub_10003C0FC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v4 = 0LL;
  }

  id v5 = [v2 initWithChannelID:v4];

  return v5;
}

void sub_10003C15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  Class v11 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  Class v12 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a3);
  Class v13 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a4);
  [a5 setEnabledTopics:isa ignoredTopics:v11 opportunisticTopics:v12 nonWakingTopics:v13];
}

void sub_10003C23C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = String._bridgeToObjectiveC()();
  [a4 subscribeToChannel:a1 forTopic:v6];
}

uint64_t sub_10003C290(void *a1)
{
  id v2 = [a1 userInfo];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v2,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  return v3;
}

unint64_t sub_10003C304()
{
  unint64_t result = qword_1001D2900;
  if (!qword_1001D2900)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015EA88, &type metadata for CloudNotificationChannelError);
    atomic_store(result, (unint64_t *)&qword_1001D2900);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for CloudNotificationChannelError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10003C380 + 4 * asc_10015E9B0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10003C3A0 + 4 * byte_10015E9B5[v4]))();
  }
}

_BYTE *sub_10003C380(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10003C3A0(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10003C3A8(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10003C3B0(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10003C3B8(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10003C3C0(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CloudNotificationChannelError()
{
  return &type metadata for CloudNotificationChannelError;
}

unint64_t sub_10003C3E0()
{
  unint64_t result = qword_1001D2908;
  if (!qword_1001D2908)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015EA60, &type metadata for CloudNotificationChannelError);
    atomic_store(result, (unint64_t *)&qword_1001D2908);
  }

  return result;
}

void sub_10003C41C( void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t log)
{
}

BOOL sub_10003C430( os_log_type_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t oslog)
{
  return os_log_type_enabled(oslog, a1);
}

uint64_t sub_10003C440(uint64_t a1, uint64_t a2)
{
  return static os_log_type_t.error.getter(a1, a2);
}

void sub_10003C448(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_10000941C(&qword_1001D6A50);
    int v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    int v3 = &_swiftEmptyDictionarySingleton;
  }

  sub_1000D1AEC(v47);
  uint64_t v4 = v47[0];
  uint64_t v5 = v47[3];
  int64_t v34 = (unint64_t)(v47[2] + 64LL) >> 6;
  uint64_t v35 = v47[1];
  unint64_t v6 = v47[4];
  uint64_t v7 = &__src[40];
  os_log_type_t v8 = &__dst[40];
  NSString v9 = &v41;
  os_log_type_t v10 = &v43;
  swift_bridgeObjectRetain(a1);
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v36 = (v6 - 1) & v6;
  int64_t v37 = v5;
  for (unint64_t i = __clz(__rbit64(v6)) | (v5 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v14 << 6))
  {
    sub_100010794(*(void *)(v4 + 48) + 40 * i, (uint64_t)__src);
    sub_100010758(*(void *)(v4 + 56) + 32 * i, (uint64_t)v7);
    memcpy(__dst, __src, sizeof(__dst));
    sub_100010794((uint64_t)__dst, (uint64_t)v40);
    if (!swift_dynamicCast(&v38, v40, &type metadata for AnyHashable, &type metadata for String, 6LL))
    {
      uint64_t v38 = 0LL;
      uint64_t v39 = 0LL;
      sub_100028CD0((uint64_t)__dst, &qword_1001D2910);
      swift_bridgeObjectRelease();
      uint64_t v32 = sub_10003D874();
      sub_10003D774(v32);
      swift_release();
      goto LABEL_32;
    }

    uint64_t v16 = v38;
    uint64_t v17 = v39;
    sub_100010758((uint64_t)v8, (uint64_t)v40);
    sub_100028CD0((uint64_t)__dst, &qword_1001D2910);
    sub_1000108D8(v40, v9);
    *(void *)&__int128 v42 = v16;
    *((void *)&v42 + 1) = v17;
    sub_1000108D8(v9, v10);
    __int128 v18 = v42;
    sub_1000108D8(v10, v44);
    sub_1000108D8(v44, &v42);
    unint64_t v19 = sub_10000EC64(v18, *((uint64_t *)&v18 + 1));
    unint64_t v20 = v19;
    if ((v21 & 1) != 0)
    {
      int v22 = v10;
      uint64_t v23 = v9;
      uint64_t v24 = v8;
      uint64_t v25 = v4;
      os_log_type_t v26 = v7;
      int v27 = (_OWORD *)(v3[6] + 16 * v19);
      swift_bridgeObjectRelease();
      *int v27 = v18;
      uint64_t v7 = v26;
      uint64_t v4 = v25;
      os_log_type_t v8 = v24;
      NSString v9 = v23;
      os_log_type_t v10 = v22;
      int v28 = (void *)(v3[7] + 32 * v20);
      sub_1000108B8(v28);
      sub_1000108D8(&v42, v28);
      goto LABEL_28;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v19;
    *(_OWORD *)(v3[6] + 16 * v19) = v18;
    sub_1000108D8(&v42, (_OWORD *)(v3[7] + 32 * v19));
    uint64_t v29 = v3[2];
    BOOL v30 = __OFADD__(v29, 1LL);
    uint64_t v31 = v29 + 1;
    if (v30) {
      goto LABEL_34;
    }
    v3[2] = v31;
LABEL_28:
    unint64_t v6 = v36;
    uint64_t v5 = v37;
    if (v36) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v12 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      goto LABEL_35;
    }
    if (v12 >= v34) {
      goto LABEL_31;
    }
    unint64_t v13 = *(void *)(v35 + 8 * v12);
    int64_t v14 = v5 + 1;
    if (!v13)
    {
      int64_t v14 = v5 + 2;
      if (v5 + 2 >= v34) {
        goto LABEL_31;
      }
      unint64_t v13 = *(void *)(v35 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v5 + 3;
        if (v5 + 3 >= v34) {
          goto LABEL_31;
        }
        unint64_t v13 = *(void *)(v35 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v5 + 4;
          if (v5 + 4 >= v34) {
            goto LABEL_31;
          }
          unint64_t v13 = *(void *)(v35 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v5 + 5;
            if (v5 + 5 >= v34) {
              goto LABEL_31;
            }
            unint64_t v13 = *(void *)(v35 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v5 + 6;
              while (v15 < v34)
              {
                unint64_t v13 = *(void *)(v35 + 8 * v15++);
                if (v13)
                {
                  int64_t v14 = v15 - 1;
                  goto LABEL_21;
                }
              }

LABEL_31:
              uint64_t v33 = sub_10003D874();
              sub_10003D774(v33);
LABEL_32:
              sub_100009AA0();
              return;
            }
          }
        }
      }
    }

  swift_release();
  uint64_t v5 = v44;
  sub_10005A598();
  if (v42 > 63) {
    sub_100057A20(0LL, (unint64_t)(v42 + 63) >> 6, v46);
  }
  else {
    *id v46 = -1LL << v42;
  }
  v11[2] = 0LL;
LABEL_35:
  swift_release();
  *uint64_t v5 = v12;
  sub_100009AA0();
}

  sub_100009AA0();
}

            unint64_t v154 = sub_1000A2778(v153, "queryId");
            uint64_t v82 = v245;
            sub_1000A1354((uint64_t)v245, (uint64_t)v154, v245[2]);
            sub_1000A1360(qword_1001D2E88);
            sub_100011030();
            sub_10001683C();
            swift_unknownObjectRelease();

            sub_1000A1F8C();
            uint64_t v115 = *(uint64_t (**)(uint64_t, uint64_t))(v142 + 8);
            uint64_t v116 = v241;
            goto LABEL_32;
          }

          sub_1000A23E4();
          uint64_t v222 = v88;
          sub_100014244(v156, v157);
          sub_100090158(v139, (SEL *)&selRef_tokenString);
          if (!v159)
          {
            sub_100010A1C(v117, (unint64_t)v121);

            uint64_t v237 = 0LL;
            LODWORD(v218) = 1;
            uint64_t v248 = (id)0xE000000000000000LL;
LABEL_43:
            sub_1000A23A8();
            uint64_t v163 = v230;
            sub_1000A2040(v117);
            uint64_t v164 = sub_1000A2040(v117);
            JSONDecodingOptions.init()(v164);
            sub_100059F08( &qword_1001D52F8,  (uint64_t (*)(uint64_t))&type metadata accessor for Searchfoundation_DrillDownMetadata);
            Message.init(jsonUTF8Data:options:)(v117, v121, v163, v234, v165);
            sub_1000A27B8(v118, 0LL, 1LL);
            uint64_t v166 = v229;
            uint64_t v167 = v228;
            uint64_t v168 = sub_1000A2244();
            sub_1000770AC(v168, v169, v170);
            uint64_t v171 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v166 + 16);
            uint64_t v172 = v239;
            sub_1000770AC(v239, v167, v171);
            unint64_t v231 = (char *)v117;
            uint64_t v173 = Apple_Parsec_Responseframework_Engagement_V1alpha_EngagementRequest.requestMetadata.setter(v172);
            uint64_t v174 = UUID.init()(v173);
            UUID.init()(v174);
            unint64_t v175 = sub_10000C4AC();
            unint64_t v176 = dispatch thunk of BasePegasusProxy.feedbackEventStream.getter(v175);
            sub_10001683C();
            uint64_t v251 = v176;
            sub_1000A1E84();
            sub_10005A6F0(v225, v241, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v142 + 16));
            uint64_t v230 = *(unsigned __int8 *)(v226 + 80);
            sub_1000A1F80();
            uint64_t v226 = v178 + v177;
            uint64_t v179 = v178;
            uint64_t v221 = v178;
            uint64_t v239 = v180 | 7;
            uint64_t v181 = (v178 + v177 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            uint64_t v182 = (void *)swift_allocObject( &unk_1001B5900,  ((*(unsigned __int8 *)(v142 + 80) + v181 + 8) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80))
                             + v224,
                               v180 | 7 | *(unsigned __int8 *)(v142 + 80));
            uint64_t v183 = (uint64_t)v237;
            uint64_t v184 = v238;
            v182[2] = v238;
            v182[3] = v183;
            uint64_t v185 = v248;
            uint64_t v248 = v121;
            uint64_t v186 = v227;
            v182[4] = v185;
            v182[5] = v186;
            v182[6] = &off_1001B4440;
            sub_1000A264C((uint64_t)v182, (uint64_t)v182 + v179);
            *(void *)((char *)v182 + v181) = v28;
            sub_1000A1880((uint64_t)&v250);
            sub_1000272E4();
            uint64_t v187 = v184;
            uint64_t v237 = v187;
            uint64_t v188 = v186;
            uint64_t v189 = sub_1000271C4();
            sub_1000A1588(&qword_1001D5308);
            Publisher<>.sink(receiveValue:)(sub_1000A0084, v182, v189, v190);
            sub_100011030();
            swift_release();
            sub_100060FBC();
            sub_10001106C();
            uint64_t v251 = dispatch thunk of PegasusProxyForEngagement.searchResponsePublisher(forSearchRequestWithQueryContext:)(v240);
            uint64_t v191 = sub_100019E00((uint64_t)&unk_1001B5928);
            *(void *)(v191 + 24) = &off_1001B4440;
            uint64_t v238 = v188;
            swift_unknownObjectWeakInit(v191 + 16, v188);
            unint64_t v192 = v117;
            sub_1000A0008();
            unint64_t v193 = (void *)swift_allocObject(&unk_1001B5950, v226, v239);
            v193[2] = v223;
            v193[3] = sub_1000A0000;
            uint64_t v194 = v244;
            v193[4] = v244;
            v193[5] = v187;
            v193[6] = v191;
            uint64_t v195 = v192;
            sub_1000A0040(v192, (uint64_t)v193 + v221);
            uint64_t v196 = sub_100019E00((uint64_t)&unk_1001B5928);
            uint64_t v197 = sub_1000A1B44(v196);
            off_1001B5940 = (uint64_t (*)())&off_1001B4440;
            swift_unknownObjectWeakInit(v197, v188);
            sub_1000A0008();
            uint64_t v198 = (v230 + 24) & ~v230;
            sub_1000A1F80();
            uint64_t v200 = (v199 + v198 + 7) & 0xFFFFFFFFFFFFFFF8LL;
            uint64_t v201 = (v200 + 11) & 0xFFFFFFFFFFFFFFF8LL;
            uint64_t v202 = (v201 + 11) & 0xFFFFFFFFFFFFFFF8LL;
            v203 = (v202 + 23) & 0xFFFFFFFFFFFFFFF8LL;
            v204 = swift_allocObject(&unk_1001B5978, v203 + 8, v239);
            uint64_t v205 = sub_1000A2804(v204);
            sub_1000A0040(v195, v205 + v198);
            uint64_t v206 = v223;
            *(void *)(v191 + v200) = v223;
            *(_DWORD *)(v191 + v201) = v218;
            uint64_t v207 = (void (**)())(v191 + v202);
            *uint64_t v207 = sub_1000A0000;
            v207[1] = (void (*)())v194;
            uint64_t v208 = v237;
            *(void *)(v191 + v203) = v237;
            v209 = v208;
            sub_100019F54(v206);
            sub_100019F54(v194);
            uint64_t v210 = v209;
            v211 = sub_10000941C(&qword_1001D5310);
            sub_100059DA0(&qword_1001D5318, &qword_1001D5310);
            Publisher.sink(receiveCompletion:receiveValue:)(sub_1000A00F4, v193, sub_1000A01A8, v191, v211, v212);
            sub_100019F70();
            sub_100011030();
            swift_release();
            uint64_t v213 = v232;
            sub_100060FBC();
            sub_1000A1DE0((uint64_t)&v249);
            sub_10001443C();
            sub_10007705C((uint64_t)&v252);
            sub_100010D00();
            uint64_t v214 = sub_1000A2148((uint64_t)&a18);
            sub_100010A1C(v214, (unint64_t)v248);
            unint64_t v215 = sub_10006B688();
            sub_100010A1C(v215, v216);
            sub_1000A2264(v233);
            sub_1000A2264(v213);
            sub_1000A1E3C();
            v217(v228, v234);
            sub_1000A1F8C();
            (*(void (**)(uint64_t, uint64_t))(v242 + 8))(v241, v246);
            uint64_t v82 = v245;
            goto LABEL_33;
          }

          uint64_t v237 = (char *)v158;
          uint64_t v248 = v159;
          sub_100010A1C(v117, (unint64_t)v121);

          uint64_t v160 = 1;
LABEL_42:
          LODWORD(v218) = v160;
          goto LABEL_43;
        }

        uint64_t v147 = objc_opt_self(&OBJC_CLASS___SFShowSFCardCommand);
        uint64_t v148 = sub_1000A27C0(v147);
        if (v148)
        {
          uint64_t v139 = (os_log_s *)v148;
          __int128 v142 = v117;
          uint64_t v222 = v88;
          uint64_t v140 = v136;
          uint64_t v149 = (os_log_s *)sub_10006B65C((uint64_t)v140, "card");
          if (!v149
            || (uint64_t v139 = v149,
                uint64_t v88 = -[os_log_s drilldownMetadata](v149, "drilldownMetadata"),
                v139,
                !v88)
            || (sub_10009002C(v88), v150 >> 60 == 15))
          {
            sub_1000A23BC();
            sub_1000A1834();
            int v151 = sub_100010EC4();
            if (sub_100010DE4(v151))
            {
              uint64_t v152 = (uint8_t *)sub_100009B20(2LL);
              *(_WORD *)uint64_t v152 = 0;
              sub_10001447C( (void *)&_mh_execute_header,  v139,  (os_log_type_t)v88,  "Incomplete request: Missing drilldowndata",  v152);
              sub_100010C34((uint64_t)v152);
            }

            goto LABEL_31;
          }

          sub_1000A23E4();

          uint64_t v160 = 2;
          goto LABEL_42;
        }

        uint64_t v121 = v240;
      }

      uint64_t v161 = sub_100009B3C();
      uint64_t v162 = sub_100032C5C(v161, "queryId");
      uint64_t v82 = v245;
      sub_1000A1354((uint64_t)v245, (uint64_t)v162, v245[2]);
      sub_1000A1360(qword_1001D2E88);
      sub_100043584();
      sub_10001683C();
      sub_10001449C();
      (*(void (**)(void *, uint64_t))(v235 + 8))(v121, v236);
    }

    else
    {
      __int128 v146 = sub_10003D808(v113, "queryId");
      uint64_t v82 = v245;
      sub_1000A1354((uint64_t)v245, (uint64_t)v146, v245[2]);
      sub_1000A15EC(qword_1001D2E88);
      sub_1000A1790();
      sub_10001449C();
    }

    sub_10005A6D0(v241, *(uint64_t (**)(uint64_t, uint64_t))(v117 + 8));
    unint64_t v155 = v243;
    goto LABEL_39;
  }

  sub_1000A1878(v78, (uint64_t *)&unk_1001D5D20);
  uint64_t v81 = sub_100047258(v80, "queryId");
  uint64_t v82 = v245;
  sub_1000A1354((uint64_t)v245, (uint64_t)v81, v245[2]);
  sub_1000A15EC(qword_1001D2E88);
  sub_1000A1790();
LABEL_33:
  unint64_t v155 = v243;
LABEL_39:
  sub_1000A1A98(v249, v155);
  sub_10005A8E0();
  _Block_release(v82);
  sub_100009AA0();
}

        uint64_t v5 = (v12 - 1) & v12;
        os_log_type_t v8 = __clz(__rbit64(v12)) + (v11 << 6);
        unint64_t v6 = v11;
      }

      int64_t v14 = (uint64_t *)(*(void *)(v0 + 48) + 16 * v8);
      uint64_t v16 = *v14;
      int64_t v15 = v14[1];
      uint64_t v17 = *(void **)(*(void *)(v0 + 56) + 8 * v8);
      swift_bridgeObjectRetain(v15);
      __int128 v18 = v17;
      unint64_t v19 = sub_10000EC64(v16, v15);
      unint64_t v20 = v19;
      if ((v21 & 1) == 0) {
        break;
      }
      int v22 = (uint64_t *)(v2[6] + 16 * v19);
      swift_bridgeObjectRelease();
      *int v22 = v16;
      v22[1] = v15;
      uint64_t v23 = v2[7];

      *(void *)(v23 + 8 * v20) = v18;
    }

    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v19;
    uint64_t v24 = (uint64_t *)(v2[6] + 16 * v19);
    *uint64_t v24 = v16;
    v24[1] = v15;
    *(void *)(v2[7] + 8 * v19) = v18;
    uint64_t v25 = v2[2];
    os_log_type_t v10 = __OFADD__(v25, 1LL);
    os_log_type_t v26 = v25 + 1;
    if (v10) {
      goto LABEL_39;
    }
    void v2[2] = v26;
  }

  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
}

    os_log_type_t v8 = v18;
LABEL_32:
    if (v8 >= v3) {
      goto LABEL_41;
    }
    if (__OFSUB__(v8, v10)) {
      goto LABEL_143;
    }
    if (v8 - v10 >= v106) {
      goto LABEL_41;
    }
    if (__OFADD__(v10, v106)) {
      goto LABEL_146;
    }
    if (v10 + v106 >= v3) {
      uint64_t v33 = v3;
    }
    else {
      uint64_t v33 = v10 + v106;
    }
    if (v33 < v10) {
      goto LABEL_147;
    }
    if (v8 == v33)
    {
LABEL_41:
      int64_t v34 = v110;
    }

    else
    {
      uint64_t v85 = (void *)(v9 + 16 * v8);
      int64_t v34 = v110;
      do
      {
        uint64_t v86 = (uint64_t *)(v9 + 16 * v8);
        uint64_t v87 = *v86;
        uint64_t v88 = v86[1];
        uint64_t v89 = v10;
        uint64_t v90 = v85;
        do
        {
          uint64_t v91 = *(v90 - 2);
          uint64_t v92 = *(v90 - 1);
          uint64_t v93 = v87 == v91 && v88 == v92;
          if (v93 || (_stringCompareWithSmolCheck(_:_:expecting:)(v87, v88, v91, v92, 1LL) & 1) == 0) {
            break;
          }
          if (!v9) {
            goto LABEL_150;
          }
          uint64_t v87 = *v90;
          uint64_t v88 = v90[1];
          *(_OWORD *)uint64_t v90 = *((_OWORD *)v90 - 1);
          *(v90 - 1) = v88;
          *(v90 - 2) = v87;
          v90 -= 2;
          ++v89;
        }

        while (v8 != v89);
        ++v8;
        v85 += 2;
      }

      while (v8 != v33);
      os_log_type_t v8 = v33;
    }

    if (v8 < v10) {
      goto LABEL_142;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
    {
      sub_1000DD3BC(0, *((void *)v34 + 2) + 1LL, 1, v34);
      int64_t v34 = v94;
    }

    uint64_t v36 = *((void *)v34 + 2);
    uint64_t v35 = *((void *)v34 + 3);
    int64_t v37 = v36 + 1;
    if (v36 >= v35 >> 1)
    {
      sub_1000DD3BC(v35 > 1, v36 + 1, 1, v34);
      int64_t v34 = v95;
    }

    *((void *)v34 + 2) = v37;
    uint64_t v38 = v34 + 32;
    uint64_t v39 = (Swift::Int *)&v34[16 * v36 + 32];
    *uint64_t v39 = v10;
    v39[1] = v8;
    uint64_t v110 = v34;
    if (v36) {
      break;
    }
    int64_t v37 = 1LL;
LABEL_90:
    int v3 = v108;
    if (v8 >= v108) {
      goto LABEL_110;
    }
  }

  while (1)
  {
    int v40 = v37 - 1;
    if (v37 >= 4)
    {
      id v45 = &v38[2 * v37];
      id v46 = *(v45 - 8);
      uint64_t v47 = *(v45 - 7);
      uint64_t v51 = __OFSUB__(v47, v46);
      id v48 = v47 - v46;
      if (v51) {
        goto LABEL_127;
      }
      uint64_t v50 = *(v45 - 6);
      uint64_t v49 = *(v45 - 5);
      uint64_t v51 = __OFSUB__(v49, v50);
      uint64_t v43 = v49 - v50;
      uint64_t v44 = v51;
      if (v51) {
        goto LABEL_128;
      }
      uint64_t v52 = v37 - 2;
      uint64_t v53 = &v38[2 * v37 - 4];
      uint64_t v55 = *v53;
      uint64_t v54 = v53[1];
      uint64_t v51 = __OFSUB__(v54, v55);
      uint64_t v56 = v54 - v55;
      if (v51) {
        goto LABEL_129;
      }
      uint64_t v51 = __OFADD__(v43, v56);
      uint64_t v57 = v43 + v56;
      if (v51) {
        goto LABEL_131;
      }
      if (v57 >= v48)
      {
        uint64_t v75 = &v38[2 * v40];
        uint64_t v77 = *v75;
        uint64_t v76 = v75[1];
        uint64_t v51 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v51) {
          goto LABEL_137;
        }
        uint64_t v68 = v43 < v78;
        goto LABEL_79;
      }
    }

    else
    {
      if (v37 != 3)
      {
        uint64_t v69 = *((void *)v34 + 4);
        uint64_t v70 = *((void *)v34 + 5);
        uint64_t v51 = __OFSUB__(v70, v69);
        uint64_t v62 = v70 - v69;
        uint64_t v63 = v51;
        goto LABEL_73;
      }

      __int128 v42 = *((void *)v34 + 4);
      uint64_t v41 = *((void *)v34 + 5);
      uint64_t v51 = __OFSUB__(v41, v42);
      uint64_t v43 = v41 - v42;
      uint64_t v44 = v51;
    }

    if ((v44 & 1) != 0) {
      goto LABEL_130;
    }
    uint64_t v52 = v37 - 2;
    uint64_t v58 = &v38[2 * v37 - 4];
    uint64_t v60 = *v58;
    uint64_t v59 = v58[1];
    uint64_t v61 = __OFSUB__(v59, v60);
    uint64_t v62 = v59 - v60;
    uint64_t v63 = v61;
    if (v61) {
      goto LABEL_132;
    }
    uint64_t v64 = &v38[2 * v40];
    uint64_t v66 = *v64;
    uint64_t v65 = v64[1];
    uint64_t v51 = __OFSUB__(v65, v66);
    uint64_t v67 = v65 - v66;
    if (v51) {
      goto LABEL_134;
    }
    if (__OFADD__(v62, v67)) {
      goto LABEL_136;
    }
    if (v62 + v67 >= v43)
    {
      uint64_t v68 = v43 < v67;
LABEL_79:
      if (v68) {
        int v40 = v52;
      }
      goto LABEL_81;
    }

void sub_10003C7E0()
{
  uint64_t v0 = sub_10000941C((uint64_t *)&unk_1001D5D10);
  __chkstk_darwin(v0);
  sub_100032C48();
  uint64_t v216 = v1;
  sub_10003D810();
  __chkstk_darwin(v2);
  uint64_t v234 = (char *)&v216 - v3;
  uint64_t v4 = sub_10000941C(&qword_1001D32B0);
  __chkstk_darwin(v4);
  sub_100032C48();
  uint64_t v224 = v5;
  sub_10003D810();
  __chkstk_darwin(v6);
  sub_10003D828();
  uint64_t v229 = v7;
  sub_10003D810();
  __chkstk_darwin(v8);
  sub_10003D828();
  uint64_t v228 = v9;
  sub_10003D810();
  __chkstk_darwin(v10);
  sub_10003D828();
  uint64_t v223 = v11;
  sub_10003D810();
  __chkstk_darwin(v12);
  sub_10003D828();
  uint64_t v222 = v13;
  sub_10003D810();
  __chkstk_darwin(v14);
  sub_10003D828();
  uint64_t v227 = v15;
  sub_10003D810();
  __chkstk_darwin(v16);
  sub_10003D828();
  uint64_t v220 = v17;
  sub_10003D810();
  __chkstk_darwin(v18);
  sub_10003D828();
  uint64_t v221 = v19;
  sub_10003D810();
  __chkstk_darwin(v20);
  sub_10003D828();
  uint64_t v219 = v21;
  sub_10003D810();
  __chkstk_darwin(v22);
  sub_10003D828();
  uint64_t v226 = v23;
  sub_10003D810();
  __chkstk_darwin(v24);
  sub_10003D828();
  uint64_t v217 = v25;
  sub_10003D810();
  __chkstk_darwin(v26);
  sub_10003D828();
  uint64_t v218 = v27;
  sub_10003D810();
  __chkstk_darwin(v28);
  sub_10003D828();
  uint64_t v232 = v29;
  sub_10003D810();
  __chkstk_darwin(v30);
  sub_10003D828();
  uint64_t v233 = v31;
  sub_10003D810();
  __chkstk_darwin(v32);
  sub_10003D828();
  uint64_t v230 = v33;
  sub_10003D810();
  __chkstk_darwin(v34);
  sub_10003D828();
  uint64_t v231 = v35;
  sub_10003D810();
  uint64_t v37 = __chkstk_darwin(v36);
  uint64_t v39 = (char *)&v216 - v38;
  uint64_t v40 = __chkstk_darwin(v37);
  __int128 v42 = (char *)&v216 - v41;
  uint64_t v43 = __chkstk_darwin(v40);
  id v45 = (char *)&v216 - v44;
  uint64_t v46 = __chkstk_darwin(v43);
  id v48 = (char *)&v216 - v47;
  uint64_t v49 = __chkstk_darwin(v46);
  uint64_t v51 = (char *)&v216 - v50;
  uint64_t v52 = __chkstk_darwin(v49);
  uint64_t v54 = (char *)&v216 - v53;
  uint64_t v55 = __chkstk_darwin(v52);
  uint64_t v57 = (char *)&v216 - v56;
  uint64_t v58 = __chkstk_darwin(v55);
  uint64_t v60 = (char *)&v216 - v59;
  uint64_t v239 = &_swiftEmptyDictionarySingleton;
  id v61 = sub_10003D808(v58, "requestStartDate");
  if (v61)
  {
    uint64_t v62 = v61;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v63 = type metadata accessor for Date(0LL);
    uint64_t v64 = (uint64_t)v57;
    uint64_t v65 = 0LL;
  }

  else
  {
    uint64_t v63 = type metadata accessor for Date(0LL);
    uint64_t v64 = (uint64_t)v57;
    uint64_t v65 = 1LL;
  }

  sub_10003D7EC(v64, v65);
  sub_10003D8B8((uint64_t)v57, v66, &qword_1001D32B0);
  type metadata accessor for Date(0LL);
  uint64_t v67 = sub_100010708((uint64_t)v60, 1LL, v63);
  if ((_DWORD)v67 == 1)
  {
    sub_10003D89C(v67, &qword_1001D32B0);
    sub_10003D81C();
  }

  else
  {
    double v68 = Date.timeIntervalSinceReferenceDate.getter(v67);
    uint64_t v238 = &type metadata for Double;
    double v236 = v68;
    sub_10003D850((uint64_t)v60, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8LL));
  }

  unint64_t v225 = (unint64_t)"ificationChannelConnection";
  sub_1000D95A8((uint64_t)&v236, 0xD00000000000002CLL, 0x800000010016D8A0LL);
  id v70 = sub_10003D808(v69, "requestStartDate");
  if (v70)
  {
    uint64_t v71 = v70;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v72 = 0LL;
  }

  else
  {
    uint64_t v72 = 1LL;
  }

  sub_10003D7EC((uint64_t)v51, v72);
  sub_10003D77C((uint64_t)v51, (uint64_t)v54, &qword_1001D32B0);
  uint64_t v73 = sub_10003D7D0((uint64_t)v54);
  if (v74)
  {
    sub_100028CD0((uint64_t)v54, &qword_1001D32B0);
    sub_10003D81C();
  }

  else
  {
    double v75 = Date.timeIntervalSinceReferenceDate.getter(v73);
    uint64_t v238 = &type metadata for Double;
    double v236 = v75;
    sub_10003D850((uint64_t)v54, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8LL));
  }

  sub_10003D7BC(0xD00000000000001BLL, (uint64_t)"_kCFNTimingDataRequestStart");
  id v77 = sub_10003D808(v76, "requestStartDate");
  uint64_t v78 = v231;
  if (v77)
  {
    uint64_t v79 = v77;
    sub_10003D8B0();

    uint64_t v80 = 0LL;
  }

  else
  {
    uint64_t v80 = 1LL;
  }

  sub_10003D7EC((uint64_t)v45, v80);
  sub_10003D77C((uint64_t)v45, (uint64_t)v48, &qword_1001D32B0);
  uint64_t v81 = sub_10003D7D0((uint64_t)v48);
  if (v74)
  {
    sub_100028CD0((uint64_t)v48, &qword_1001D32B0);
    sub_10003D81C();
  }

  else
  {
    double v82 = Date.timeIntervalSinceReferenceDate.getter(v81);
    sub_10003D8C0(v82);
    sub_10003D850((uint64_t)v48, v83);
  }

  uint64_t v84 = (uint64_t)v234;
  sub_10003D7BC(0xD00000000000001DLL, (uint64_t)"_kCFNTimingDataTimingDataInit");
  id v86 = sub_10003D808(v85, "requestEndDate");
  if (v86)
  {
    uint64_t v87 = v86;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v88 = 0LL;
  }

  else
  {
    uint64_t v88 = 1LL;
  }

  sub_10003D7EC((uint64_t)v39, v88);
  sub_10003D77C((uint64_t)v39, (uint64_t)v42, &qword_1001D32B0);
  uint64_t v89 = sub_10003D7D0((uint64_t)v42);
  if (v74)
  {
    sub_100028CD0((uint64_t)v42, &qword_1001D32B0);
    sub_10003D81C();
  }

  else
  {
    double v90 = Date.timeIntervalSinceReferenceDate.getter(v89);
    sub_10003D8C0(v90);
    sub_10003D850((uint64_t)v42, v91);
  }

  uint64_t v92 = v233;
  sub_10003D834((uint64_t)"_kCFNTimingDataRequestEnd");
  id v94 = sub_10003D808(v93, "responseStartDate");
  uint64_t v95 = v232;
  if (v94)
  {
    uint64_t v96 = v94;
    uint64_t v97 = v230;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v98 = v97;
    uint64_t v99 = 0LL;
  }

  else
  {
    uint64_t v99 = 1LL;
    uint64_t v98 = v230;
  }

  sub_10003D7EC(v98, v99);
  sub_10003D77C(v98, v78, &qword_1001D32B0);
  uint64_t v100 = sub_10003D7D0(v78);
  if (v74)
  {
    sub_100028CD0(v78, &qword_1001D32B0);
    sub_10003D81C();
  }

  else
  {
    double v101 = Date.timeIntervalSinceReferenceDate.getter(v100);
    uint64_t v238 = &type metadata for Double;
    double v236 = v101;
    sub_10003D850(v78, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8LL));
  }

  sub_10003D7BC(0xD00000000000001CLL, (uint64_t)"_kCFNTimingDataResponseStart");
  id v103 = sub_10003D808(v102, "responseEndDate");
  if (v103)
  {
    uint64_t v104 = v103;
    sub_10003D888();

    uint64_t v105 = 0LL;
  }

  else
  {
    uint64_t v105 = 1LL;
  }

  uint64_t v106 = sub_10003D7EC(v95, v105);
  sub_10003D890(v106, v107, &qword_1001D32B0);
  uint64_t v108 = sub_10003D7D0(v92);
  if (v74)
  {
    sub_100028CD0(v92, &qword_1001D32B0);
    sub_10003D81C();
  }

  else
  {
    double v109 = Date.timeIntervalSinceReferenceDate.getter(v108);
    uint64_t v238 = &type metadata for Double;
    double v236 = v109;
    sub_10003D850(v92, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8LL));
  }

  sub_10003D7BC(0xD00000000000001ALL, (uint64_t)"_kCFNTimingDataResponseEnd");
  unsigned __int8 v111 = sub_10003D808(v110, "isReusedConnection");
  uint64_t v238 = &type metadata for Bool;
  LOBYTE(v236) = v111;
  sub_10003D7F8(0xD00000000000001FLL, (uint64_t)"_kCFNTimingDataConnectionReused");
  id v113 = sub_10003D808(v112, "countOfRequestHeaderBytesSent");
  sub_10003D8A4((uint64_t)v113);
  sub_10003D7F8(0xD000000000000020LL, (uint64_t)"_kCFNTimingDataRequestHeaderSize");
  id v115 = sub_10003D808(v114, "countOfResponseHeaderBytesReceived");
  sub_10003D8A4((uint64_t)v115);
  sub_10003D7F8(0xD000000000000021LL, (uint64_t)"_kCFNTimingDataResponseHeaderSize");
  id v117 = sub_10003D808(v116, "countOfResponseBodyBytesReceived");
  sub_10003D8A4((uint64_t)v117);
  sub_10003D7F8(0xD000000000000028LL, (uint64_t)"_kCFNTimingDataResponseBodyBytesReceived");
  id v119 = sub_10003D808(v118, "countOfResponseBodyBytesAfterDecoding");
  sub_10003D8A4((uint64_t)v119);
  sub_10003D7F8(0xD000000000000027LL, (uint64_t)"_kCFNTimingDataResponseBodyBytesDecoded");
  uint64_t v121 = (uint64_t)sub_10003D808(v120, "countOfRequestBodyBytesSent");
  uint64_t v122 = (char *)sub_10003D808(v121, "countOfRequestHeaderBytesSent");
  if (__OFADD__(v121, v122))
  {
    __break(1u);
    goto LABEL_92;
  }

  uint64_t v238 = &type metadata for Int64;
  *(void *)&double v236 = &v122[v121];
  sub_10003D7BC(0xD00000000000001DLL, (uint64_t)"_kCFNTimingDataTotalBytesSent");
  uint64_t v124 = (uint64_t)sub_10003D808(v123, "countOfResponseBodyBytesReceived");
  uint64_t v125 = (char *)sub_10003D808(v124, "countOfResponseHeaderBytesReceived");
  if (__OFADD__(v124, v125))
  {
LABEL_92:
    __break(1u);
    return;
  }

  uint64_t v238 = &type metadata for Int64;
  *(void *)&double v236 = &v125[v124];
  sub_10003D7BC(0xD000000000000021LL, (uint64_t)"_kCFNTimingDataTotalBytesReceived");
  uint64_t v127 = sub_10003D86C(v126, (SEL *)&selRef__interfaceName);
  if (v128)
  {
    uint64_t v238 = &type metadata for String;
    double v236 = *(double *)&v127;
    uint64_t v237 = v128;
  }

  else
  {
    sub_10003D81C();
  }

  uint64_t v129 = v223;
  uint64_t v130 = v224;
  uint64_t v131 = v221;
  uint64_t v132 = v218;
  sub_1000D95A8((uint64_t)&v236, 0xD00000000000002CLL, v225 | 0x8000000000000000LL);
  unsigned __int8 v134 = sub_10003D808(v133, "_connectionRace");
  uint64_t v238 = &type metadata for Bool;
  LOBYTE(v236) = v134;
  sub_10003D7F8(0xD000000000000027LL, (uint64_t)"_kCFNTimingDataConnectionStopTimeCounts");
  id v136 = sub_10003D808(v135, "_connectionIdentifier");
  if (v136)
  {
    __int128 v137 = v136;
    uint64_t v138 = v216;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v139 = v138;
    uint64_t v140 = type metadata accessor for UUID(0LL);
    uint64_t v141 = v139;
    uint64_t v142 = 0LL;
  }

  else
  {
    uint64_t v140 = type metadata accessor for UUID(0LL);
    uint64_t v139 = v216;
    uint64_t v141 = v216;
    uint64_t v142 = 1LL;
  }

  sub_100009654(v141, v142, 1LL, v140);
  sub_10003D77C(v139, v84, (uint64_t *)&unk_1001D5D10);
  type metadata accessor for UUID(0LL);
  uint64_t v143 = sub_100010708(v84, 1LL, v140);
  if ((_DWORD)v143 == 1)
  {
    sub_100028CD0(v84, (uint64_t *)&unk_1001D5D10);
    sub_10003D81C();
  }

  else
  {
    uint64_t v144 = UUID.uuidString.getter(v143);
    uint64_t v238 = &type metadata for String;
    double v236 = *(double *)&v144;
    uint64_t v237 = v145;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v140 - 8) + 8LL))(v84, v140);
  }

  uint64_t v146 = v229;
  sub_10003D7BC(0xD00000000000001DLL, (uint64_t)"_kCFNTimingDataConnectionUUID");
  unsigned int v148 = sub_10003D808(v147, "_redirected");
  uint64_t v238 = &type metadata for UInt32;
  LODWORD(v236) = v148;
  sub_10003D7F8(0xD00000000000001CLL, (uint64_t)"_kCFNTimingDataRedirectCount");
  id v150 = sub_10003D808(v149, "connectStartDate");
  if (v150)
  {
    int v151 = v150;
    uint64_t v152 = v217;
    sub_10003D8B0();

    uint64_t v153 = v152;
    uint64_t v154 = 0LL;
  }

  else
  {
    uint64_t v154 = 1LL;
    uint64_t v153 = v217;
  }

  sub_10003D7EC(v153, v154);
  sub_10003D77C(v153, v132, &qword_1001D32B0);
  uint64_t v155 = sub_10003D7D0(v132);
  if (v74)
  {
    sub_100028CD0(v132, &qword_1001D32B0);
    sub_10003D81C();
  }

  else
  {
    double v156 = Date.timeIntervalSinceReferenceDate.getter(v155);
    sub_10003D858((uint64_t)&type metadata for Double, v156);
    sub_10003D850(v132, v157);
  }

  sub_10003D7BC(0xD00000000000001BLL, (uint64_t)"_kCFNTimingDataConnectStart");
  id v159 = sub_10003D808(v158, "connectEndDate");
  if (v159)
  {
    uint64_t v160 = v159;
    uint64_t v161 = v219;
    sub_10003D888();

    uint64_t v162 = v161;
    uint64_t v163 = 0LL;
  }

  else
  {
    uint64_t v163 = 1LL;
    uint64_t v162 = v219;
  }

  uint64_t v164 = v130;
  sub_10003D7EC(v162, v163);
  uint64_t v165 = v162;
  uint64_t v166 = v226;
  sub_10003D8B8(v165, v167, &qword_1001D32B0);
  uint64_t v168 = sub_10003D7D0(v166);
  uint64_t v169 = v228;
  if (v74)
  {
    sub_10003D89C(v168, &qword_1001D32B0);
    sub_10003D81C();
  }

  else
  {
    double v170 = Date.timeIntervalSinceReferenceDate.getter(v168);
    uint64_t v238 = &type metadata for Double;
    double v236 = v170;
    sub_10003D850(v166, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8LL));
  }

  sub_10003D834((uint64_t)"_kCFNTimingDataConnectEnd");
  id v172 = sub_10003D808(v171, "domainLookupStartDate");
  if (v172)
  {
    uint64_t v173 = v172;
    uint64_t v174 = v220;
    sub_10003D8B0();

    uint64_t v175 = v174;
    uint64_t v176 = 0LL;
  }

  else
  {
    uint64_t v176 = 1LL;
    uint64_t v175 = v220;
  }

  sub_10003D7EC(v175, v176);
  sub_10003D77C(v175, v131, &qword_1001D32B0);
  uint64_t v177 = sub_10003D7D0(v131);
  if (v74)
  {
    sub_100028CD0(v131, &qword_1001D32B0);
    sub_10003D81C();
  }

  else
  {
    double v178 = Date.timeIntervalSinceReferenceDate.getter(v177);
    sub_10003D858((uint64_t)&type metadata for Double, v178);
    sub_10003D850(v131, v179);
  }

  sub_10003D7BC(0xD000000000000020LL, (uint64_t)"_kCFNTimingDataDomainLookupStart");
  id v181 = sub_10003D808(v180, "domainLookupEndDate");
  if (v181)
  {
    uint64_t v182 = v181;
    uint64_t v183 = v222;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v184 = v183;
    uint64_t v185 = 0LL;
  }

  else
  {
    uint64_t v185 = 1LL;
    uint64_t v184 = v222;
  }

  sub_10003D7EC(v184, v185);
  uint64_t v186 = v184;
  uint64_t v187 = v227;
  sub_10003D8B8(v186, v188, &qword_1001D32B0);
  uint64_t v189 = sub_10003D7D0(v187);
  if (v74)
  {
    sub_10003D89C(v189, &qword_1001D32B0);
    sub_10003D81C();
  }

  else
  {
    double v190 = Date.timeIntervalSinceReferenceDate.getter(v189);
    uint64_t v238 = &type metadata for Double;
    double v236 = v190;
    sub_10003D850(v187, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8LL));
  }

  sub_10003D7BC(0xD00000000000001ELL, (uint64_t)"_kCFNTimingDataDomainLookupEnd");
  id v192 = sub_10003D808(v191, "fetchStartDate");
  if (v192)
  {
    unint64_t v193 = v192;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v194 = 0LL;
  }

  else
  {
    uint64_t v194 = 1LL;
  }

  sub_10003D7EC(v169, v194);
  sub_10003D77C(v169, v129, &qword_1001D32B0);
  uint64_t v195 = sub_10003D7D0(v129);
  if (v74)
  {
    sub_100028CD0(v129, &qword_1001D32B0);
    sub_10003D81C();
  }

  else
  {
    double v196 = Date.timeIntervalSinceReferenceDate.getter(v195);
    sub_10003D858((uint64_t)&type metadata for Double, v196);
    sub_10003D850(v129, v197);
  }

  sub_10003D834((uint64_t)"_kCFNTimingDataFetchStart");
  id v199 = sub_10003D808(v198, "secureConnectionStartDate");
  if (v199)
  {
    uint64_t v200 = v199;
    sub_10003D888();

    uint64_t v201 = 0LL;
  }

  else
  {
    uint64_t v201 = 1LL;
  }

  uint64_t v202 = sub_10003D7EC(v164, v201);
  sub_10003D890(v202, v203, &qword_1001D32B0);
  uint64_t v204 = sub_10003D7D0(v146);
  if (v74)
  {
    sub_100028CD0(v146, &qword_1001D32B0);
    sub_10003D81C();
  }

  else
  {
    double v205 = Date.timeIntervalSinceReferenceDate.getter(v204);
    uint64_t v238 = &type metadata for Double;
    double v236 = v205;
    sub_10003D850(v146, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8LL));
  }

  sub_10003D7BC(0xD000000000000024LL, (uint64_t)"_kCFNTimingDataSecureConnectionStart");
  uint64_t v207 = sub_10003D86C(v206, (SEL *)&selRef_networkProtocolName);
  if (v208)
  {
    uint64_t v238 = &type metadata for String;
    double v236 = *(double *)&v207;
    uint64_t v237 = v208;
  }

  else
  {
    sub_10003D81C();
  }

  sub_10003D7F8(0xD000000000000022LL, (uint64_t)"_kCFNTimingDataNetworkProtocolName");
  uint64_t v209 = NSURLSessionTaskTransactionMetrics.remotePort.getter();
  if ((v210 & 1) == 0)
  {
    uint64_t v211 = v209;
    uint64_t v212 = sub_10003D86C(v209, (SEL *)&selRef_remoteAddress);
    if (v213)
    {
      double v236 = *(double *)&v212;
      uint64_t v237 = v213;
      v214._uint64_t countAndFlagsBits = 58LL;
      v214._object = (void *)0xE100000000000000LL;
      String.append(_:)(v214);
      uint64_t v235 = v211;
      v215._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      String.append(_:)(v215);
      swift_bridgeObjectRelease();
      uint64_t v238 = &type metadata for String;
      sub_10003D7BC(0xD000000000000024LL, (uint64_t)"_kCFNTimingDataConnectionPeerAddress");
    }
  }

  sub_100009AA0();
}

uint64_t sub_10003D690()
{
  if (v1)
  {
    sub_10003C448(v1);
    uint64_t v3 = v2;
    swift_bridgeObjectRelease();
    if (v3) {
      return v3;
    }
  }

  id v5 = [v0 _incompleteCurrentTaskTransactionMetrics];
  sub_10003C7E0();
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();

  return v7;
}

void sub_10003D710(void *a1)
{
  id v1 = [a1 _timingData];
  if (v1)
  {
    uint64_t v2 = v1;
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }

  sub_100009A90();
}

uint64_t sub_10003D774(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

void sub_10003D77C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000941C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  sub_100009A90();
}

void sub_10003D7BC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

uint64_t sub_10003D7D0(uint64_t a1)
{
  return sub_100010708(a1, 1LL, v1);
}

uint64_t sub_10003D7EC(uint64_t a1, uint64_t a2)
{
  return sub_100009654(a1, a2, 1LL, v2);
}

void sub_10003D7F8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

id sub_10003D808(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

  ;
}

double sub_10003D81C()
{
  double result = 0.0;
  *(_OWORD *)(v0 - 128) = 0u;
  *(_OWORD *)(v0 - 112) = 0u;
  return result;
}

  ;
}

void sub_10003D834(uint64_t a1@<X8>)
{
}

uint64_t sub_10003D850@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

void sub_10003D858(uint64_t a1@<X8>, double a2@<D0>)
{
  *(void *)(v2 - 104) = a1;
  *(double *)(v2 - 128) = a2;
}

uint64_t sub_10003D86C(uint64_t a1, SEL *a2)
{
  return sub_10001085C(v2, a2);
}

uint64_t sub_10003D874()
{
  return v0;
}

uint64_t sub_10003D888()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_10003D890(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_10003D89C(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_10003D8A4(uint64_t result)
{
  *(void *)(v2 - 104) = v1;
  *(void *)(v2 - 128) = result;
  return result;
}

uint64_t sub_10003D8B0()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_10003D8B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_10003D8C0(double a1)
{
  *(void *)(v2 - 104) = v1;
  *(double *)(v2 - 128) = a1;
}

uint64_t sub_10003D8D4(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_10003D900 + 4 * byte_10015EAD0[a1]))( "corelocation_revgeo",  19LL);
}

void sub_10003D900()
{
}

uint64_t sub_10003D964(char a1)
{
  return qword_10015ECF0[a1];
}

unint64_t sub_10003D984(unsigned __int8 a1)
{
  if (((1 << a1) & 0xB0) != 0) {
    unint64_t v1 = 0xD000000000000017LL;
  }
  else {
    unint64_t v1 = 0LL;
  }
  if (a1 <= 7u) {
    return v1;
  }
  else {
    return 0LL;
  }
}

void sub_10003D9C8(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_10003DDD8(a1);
  Hasher._combine(_:)(v1);
  Hasher._finalize()();
  sub_10003DDCC();
}

void sub_10003D9FC()
{
}

uint64_t sub_10003DA04()
{
  return sub_10003D964(*v0);
}

unint64_t sub_10003DA0C()
{
  return sub_10003D984(*v0);
}

const char *sub_10003DA14()
{
  return "parsecd";
}

uint64_t sub_10003DA28()
{
  return sub_10003D8D4(*v0);
}

uint64_t sub_10003DA44(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10003DA84 + 4 * byte_10015EAD8[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10003DAA4 + 4 * byte_10015EADD[v4]))();
  }
}

_BYTE *sub_10003DA84(_BYTE *result, char a2)
{
  *double result = a2;
  return result;
}

_BYTE *sub_10003DAA4(_BYTE *result)
{
  *double result = 0;
  return result;
}

_DWORD *sub_10003DAAC(_DWORD *result, int a2)
{
  *double result = a2;
  return result;
}

_WORD *sub_10003DAB4(_WORD *result, __int16 a2)
{
  *double result = a2;
  return result;
}

_WORD *sub_10003DABC(_WORD *result)
{
  *double result = 0;
  return result;
}

_DWORD *sub_10003DAC4(_DWORD *result)
{
  *double result = 0;
  return result;
}

void type metadata accessor for SpotlightUIFeatureFlag()
{
}

uint64_t getEnumTagSinglePayload for SearchSessionTableColumn(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 7) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }

uint64_t sub_10003DB64(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_10003DBB0 + 4 * byte_10015EAE7[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10003DBE4 + 4 * byte_10015EAE2[v4]))();
}

uint64_t sub_10003DBE4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003DBEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10003DBF4LL);
  }
  return result;
}

uint64_t sub_10003DC00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003DC08LL);
  }
  *(_BYTE *)double result = a2 + 7;
  return result;
}

uint64_t sub_10003DC0C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003DC14(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ParsecFeatureFlag()
{
}

unint64_t sub_10003DC2C(uint64_t a1)
{
  unint64_t result = sub_10003B83C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003DC54()
{
  unint64_t result = qword_1001D2918;
  if (!qword_1001D2918)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015EBD0, &unk_1001B32C8);
    atomic_store(result, (unint64_t *)&qword_1001D2918);
  }

  return result;
}

unint64_t sub_10003DC90()
{
  return 0xD00000000000001DLL;
}

void SessionDBFeatureFlags.hashValue.getter(uint64_t a1)
{
}

unint64_t sub_10003DCE0()
{
  return 0xD00000000000001DLL;
}

const char *sub_10003DCFC()
{
  return "SpotlightUI";
}

const char *sub_10003DD10()
{
  return "SnippetModernization";
}

unint64_t sub_10003DD28()
{
  unint64_t result = qword_1001D2920;
  if (!qword_1001D2920)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015EC78, &unk_1001B3238);
    atomic_store(result, (unint64_t *)&qword_1001D2920);
  }

  return result;
}

unint64_t sub_10003DD64(uint64_t a1)
{
  unint64_t result = sub_10003DD88();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003DD88()
{
  unint64_t result = qword_1001D2928;
  if (!qword_1001D2928)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015EBF8, &unk_1001B3238);
    atomic_store(result, (unint64_t *)&qword_1001D2928);
  }

  return result;
}

  ;
}

  ;
}

void *sub_10003DDD8(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, 0LL);
}

uint64_t sub_10003DDE4(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = v20[0];
  uint64_t v5 = v20[1];
  int64_t v6 = v20[3];
  unint64_t v7 = v20[4];
  int64_t v8 = (unint64_t)(v20[2] + 64LL) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  if (!v7) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v11 = v10 | (v6 << 6);
  while (1)
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v11);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = *(unsigned int *)(*(void *)(v4 + 56) + 4 * v11);
    swift_bridgeObjectRetain(v18);
    a2(v17, v18, v19);
    uint64_t result = swift_bridgeObjectRelease(v18);
    if (v7) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v12 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      break;
    }
    if (v12 >= v8) {
      return swift_release(v4);
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    int64_t v14 = v6 + 1;
    if (!v13)
    {
      int64_t v14 = v6 + 2;
      if (v6 + 2 >= v8) {
        return swift_release(v4);
      }
      unint64_t v13 = *(void *)(v5 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v6 + 3;
        if (v6 + 3 >= v8) {
          return swift_release(v4);
        }
        unint64_t v13 = *(void *)(v5 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v6 + 4;
          if (v6 + 4 >= v8) {
            return swift_release(v4);
          }
          unint64_t v13 = *(void *)(v5 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v6 + 5;
            if (v6 + 5 >= v8) {
              return swift_release(v4);
            }
            unint64_t v13 = *(void *)(v5 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v6 + 6;
              while (v15 < v8)
              {
                unint64_t v13 = *(void *)(v5 + 8 * v15++);
                if (v13)
                {
                  int64_t v14 = v15 - 1;
                  goto LABEL_18;
                }
              }

              return swift_release(v4);
            }
          }
        }
      }
    }

uint64_t sub_10003DF54(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v95 = a2;
  uint64_t v96 = a5;
  uint64_t v93 = a4;
  uint64_t v8 = sub_10000941C((uint64_t *)&unk_1001D5D30);
  uint64_t v92 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v92 + 64);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v89 = (uint64_t)v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v84 = (uint64_t)v82 - v12;
  __chkstk_darwin(v11);
  uint64_t v91 = (uint64_t)v82 - v13;
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v88 = (void *)(v5 + 16);
  v82[0] = v5;
  sub_10003ED84(a3, v5 + OBJC_IVAR____TtC7parsecd21NotificationsListener_logger);
  uint64_t v14 = sub_100050CF4(a1);
  int64_t v16 = 0LL;
  uint64_t v17 = *(void *)(v14 + 56);
  uint64_t v86 = v14 + 56;
  uint64_t v94 = v14;
  uint64_t v18 = 1LL << *(_BYTE *)(v14 + 32);
  uint64_t v19 = -1LL;
  if (v18 < 64) {
    uint64_t v19 = ~(-1LL << v18);
  }
  unint64_t v20 = v19 & v17;
  int64_t v87 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v90 = v9 + 7;
  *(void *)&__int128 v15 = 136315394LL;
  __int128 v83 = v15;
  v82[1] = (char *)&type metadata for Any + 8;
  uint64_t v85 = a3;
  while (1)
  {
    while (1)
    {
      if (v20)
      {
        unint64_t v21 = __clz(__rbit64(v20));
        v20 &= v20 - 1;
        unint64_t v22 = v21 | (v16 << 6);
      }

      else
      {
        int64_t v23 = v16 + 1;
        if (__OFADD__(v16, 1LL))
        {
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
        }

        if (v23 >= v87) {
          goto LABEL_42;
        }
        unint64_t v24 = *(void *)(v86 + 8 * v23);
        ++v16;
        if (!v24)
        {
          int64_t v16 = v23 + 1;
          if (v23 + 1 >= v87) {
            goto LABEL_42;
          }
          sub_10003EFE0();
          if (!v24)
          {
            int64_t v16 = v25 + 2;
            if (v25 + 2 >= v87) {
              goto LABEL_42;
            }
            sub_10003EFE0();
            if (!v24)
            {
              int64_t v27 = v26 + 3;
              if (v27 >= v87)
              {
LABEL_42:

                swift_release();
                sub_10003EDCC(a3);
                swift_release();
                return v82[0];
              }

              unint64_t v24 = *(void *)(v86 + 8 * v27);
              if (!v24)
              {
                while (1)
                {
                  int64_t v16 = v27 + 1;
                  if (__OFADD__(v27, 1LL)) {
                    goto LABEL_46;
                  }
                  if (v16 >= v87) {
                    goto LABEL_42;
                  }
                  sub_10003EFE0();
                  int64_t v27 = v28 + 1;
                  if (v24) {
                    goto LABEL_19;
                  }
                }
              }

              int64_t v16 = v27;
            }
          }
        }

uint64_t sub_10003E690( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, unint64_t, uint64_t))
{
  uint64_t v10 = sub_10000941C((uint64_t *)&unk_1001D5D30);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10003ED84(a2, (uint64_t)v12);
  uint64_t v13 = type metadata accessor for Logger(0LL);
  if (sub_100010708((uint64_t)v12, 1LL, v13) == 1)
  {
    sub_10003EDCC((uint64_t)v12);
  }

  else
  {
    uint64_t v14 = swift_bridgeObjectRetain_n(a4, 2LL);
    __int128 v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc(18LL, -1LL);
      uint64_t v23 = a3;
      uint64_t v18 = v17;
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      uint64_t v25 = v22;
      *(_DWORD *)uint64_t v18 = 136315394;
      swift_bridgeObjectRetain(a4);
      uint64_t v24 = sub_1000307E0(v23, a4, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v18 + 4);
      swift_bridgeObjectRelease_n(a4, 3LL);
      *(_WORD *)(v18 + 12) = 1024;
      LODWORD(v24) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, (char *)&v24 + 4, v18 + 14);
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "Received notification for %s [token %d]",  (uint8_t *)v18,  0x12u);
      uint64_t v19 = v22;
      swift_arrayDestroy(v22, 1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
      uint64_t v20 = v18;
      a3 = v23;
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a4, 2LL);
    }

    (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8LL))(v12, v13);
  }

  return a5(a3, a4, a1);
}

uint64_t sub_10003E8DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_10003E918(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_10000941C((uint64_t *)&unk_1001D5D30);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10003ED84(a3, (uint64_t)v12);
  uint64_t v13 = type metadata accessor for NotificationsListener(0LL);
  uint64_t v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  sub_10003DF54(a1, a2, (uint64_t)v12, a4, a5);
  sub_10003EDCC(a3);
  return v14;
}

uint64_t sub_10003E9E4()
{
  uint64_t v1 = swift_bridgeObjectRetain(*(void *)(v0 + 16));
  sub_10003DDE4(v1, (void (*)(uint64_t, uint64_t, uint64_t))sub_10003EF90);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10003EDCC(v0 + OBJC_IVAR____TtC7parsecd21NotificationsListener_logger);
  return v0;
}

uint64_t sub_10003EA60(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_10000941C((uint64_t *)&unk_1001D5D30);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint32_t v11 = notify_cancel(a3);
  sub_10003ED84(a4 + OBJC_IVAR____TtC7parsecd21NotificationsListener_logger, (uint64_t)v10);
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v14 = swift_bridgeObjectRetain_n(a2, 2LL);
  __int128 v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc(24LL, -1LL);
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = v18;
    *(_DWORD *)uint64_t v17 = 136315650;
    uint32_t v20 = v11;
    swift_bridgeObjectRetain(a2);
    uint64_t v21 = sub_1000307E0(a1, a2, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v17 + 4);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v17 + 12) = 1024;
    LODWORD(v21) = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, (char *)&v21 + 4, v17 + 14);
    *(_WORD *)(v17 + 18) = 1024;
    LODWORD(v21) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, (char *)&v21 + 4, v17 + 20);
    _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "Canceled notifications for %s [token: %d] - Result: %u",  (uint8_t *)v17,  0x18u);
    swift_arrayDestroy(v18, 1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8LL))(v10, v12);
}

uint64_t sub_10003ECA4()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10003ECC8()
{
  return type metadata accessor for NotificationsListener(0LL);
}

uint64_t type metadata accessor for NotificationsListener(uint64_t a1)
{
  uint64_t result = qword_1001D2960;
  if (!qword_1001D2960) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NotificationsListener);
  }
  return result;
}

void sub_10003ED08(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_100018AEC(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
  }

uint64_t sub_10003ED84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C((uint64_t *)&unk_1001D5D30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003EDCC(uint64_t a1)
{
  uint64_t v2 = sub_10000941C((uint64_t *)&unk_1001D5D30);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10003EE0C()
{
  uint64_t v1 = *(void *)(sub_10000941C((uint64_t *)&unk_1001D5D30) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = sub_100010ED4();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 16, v2 | 7);
}

uint64_t sub_10003EEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C((uint64_t *)&unk_1001D5D30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003EF10(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_10000941C((uint64_t *)&unk_1001D5D30) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10003E690( a1,  v1 + v4,  *(void *)(v1 + v5),  *(void *)(v1 + v5 + 8),  *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10003EF78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003EF88(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10003EF90(uint64_t a1, unint64_t a2, int a3)
{
  return sub_10003EA60(a1, a2, a3, v3);
}

uint64_t sub_10003EF98()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10003EFA0()
{
  return swift_slowAlloc(32LL, -1LL);
}

uint64_t sub_10003EFB0(uint64_t a1)
{
  *(void *)(v1 + 4) = a1;
  return swift_bridgeObjectRelease_n(v2, 3LL);
}

uint64_t sub_10003EFC0()
{
  return sub_1000307E0(v0, v1, (uint64_t *)(v2 - 160));
}

BOOL sub_10003EFD0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

uint64_t sub_10003EFF0()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_10003EFFC()
{
  return swift_slowAlloc(18LL, -1LL);
}

unint64_t sub_10003F008()
{
  return sub_10000EC64(v0, v1);
}

void sub_10003F014(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_10003F020()
{
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t sub_10003F054()
{
  return swift_release();
}

uint64_t sub_10003F084()
{
  uint64_t v0 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static DispatchQoS.userInitiated.getter(v1);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v4);
  int64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = 0LL;
  uint64_t v8 = sub_10003B7FC( (unint64_t *)&qword_1001D0BB0,  v7,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  dispatch thunk of OptionSet.init(rawValue:)(&v15, v4, v8);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  __chkstk_darwin(v9);
  uint32_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void))(v12 + 104))( v11,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002ALL,  0x800000010016DF00LL,  v3,  v6,  v11,  0LL);
  qword_1001EDCE8 = result;
  return result;
}

uint64_t sub_10003F1F8()
{
  return v0;
}

uint64_t sub_10003F230()
{
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

uint64_t type metadata accessor for TrialExperimentsProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd24TrialExperimentsProvider);
}

void sub_10003F270()
{
  if (qword_1001D0540 != -1) {
    swift_once(&qword_1001D0540, sub_100034544);
  }
  uint64_t v2 = sub_100010ED4();
  sub_1000093D0(v2, (uint64_t)qword_1001EDC90);
  uint64_t v3 = sub_1000409A8();
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = sub_100009B20(22LL);
    uint64_t v7 = sub_100009B20(64LL);
    v35[0] = v7;
    *(_DWORD *)uint64_t v6 = 136315394;
    unint64_t v8 = sub_1000409F8();
    uint64_t v34 = (void *)sub_1000307E0(v8, v9, v35);
    uint64_t v1 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v6 + 4);
    sub_10004099C();
    sub_100010C70();
    *(_WORD *)(v6 + 12) = 2080;
    if (qword_1001D0578 != -1) {
      swift_once(&qword_1001D0578, sub_10003F084);
    }
    uint64_t v10 = OS_dispatch_queue.label.getter();
    uint64_t v34 = (void *)sub_1000307E0(v10, v11, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v6 + 14);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "%s Queueing call to performUpdateExperiments on queue %s",  (uint8_t *)v6,  0x16u);
    swift_arrayDestroy(v7, 2LL);
    sub_100010C34(v7);
    sub_100010C34(v6);
  }

  else
  {

    sub_10004099C();
  }

  if (qword_1001D0578 != -1) {
    swift_once(&qword_1001D0578, sub_10003F084);
  }
  v35[4] = (uint64_t)sub_10004098C;
  v35[5] = v0;
  v35[0] = (uint64_t)_NSConcreteStackBlock;
  v35[1] = 1107296256LL;
  uint64_t v12 = sub_100009BBC((uint64_t)sub_1000D2F18);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  sub_100040A24(v13, v14, v15, v16, v17, v18, v19, v20, v33);
  __chkstk_darwin(v21);
  sub_100009AEC();
  uint64_t v24 = v23 - v22;
  uint64_t v25 = sub_100010D08();
  static DispatchQoS.unspecified.getter(v25);
  uint64_t v26 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  sub_1000270AC();
  uint64_t v34 = &_swiftEmptyArrayStorage;
  uint64_t v29 = sub_10003B7FC( (unint64_t *)&qword_1001D2B80,  v28,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_10000941C((uint64_t *)&unk_1001D0BC0);
  sub_10000945C();
  uint64_t v30 = sub_100040A4C();
  dispatch thunk of SetAlgebra.init<A>(_:)(v30, v31, v32, v26, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v24, v1, v12);
  _Block_release(v12);
  (*(void (**)(uint64_t *, uint64_t))(v27 + 8))(v1, v26);
  (*(void (**)(uint64_t, uint64_t))&SessionFilename.ivar_base_size)(v24, v13);
  sub_100040A3C();
  sub_100009AA0();
}

unint64_t sub_10003F588(int a1)
{
  uint64_t v1 = (void *)0xE600000000000000LL;
  uint64_t v2 = 0x656369766544LL;
  switch(a1)
  {
    case 0:
      break;
    case 1:
      uint64_t v1 = (void *)0xEE006E6F69747563LL;
      uint64_t v2 = 0x6578452069726953LL;
      break;
    case 2:
      uint64_t v1 = (void *)0xEB00000000686372LL;
      uint64_t v2 = 0x6165532069726953LL;
      break;
    case 3:
      uint64_t v2 = 0xD000000000000015LL;
      uint64_t v1 = (void *)0x800000010016DED0LL;
      break;
    default:
      LODWORD(v7) = a1;
      type metadata accessor for TRIDeploymentEnvironment(0LL);
      uint64_t v2 = String.init<A>(describing:)(&v7);
      uint64_t v1 = v3;
      break;
  }

  unint64_t v7 = 0LL;
  unint64_t v8 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(23LL);
  swift_bridgeObjectRelease();
  unint64_t v7 = 0xD000000000000014LL;
  unint64_t v8 = 0x800000010016DEB0LL;
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v1;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 93LL;
  v5._object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  return v7;
}

void sub_10003F6C4()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_10000941C((uint64_t *)&unk_1001D5D30);
  __chkstk_darwin(v3);
  sub_100009AEC();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = *(void *)(v0 + 56);
  if (v7)
  {
    if (v7 == 1)
    {
      if (qword_1001D0540 != -1) {
        swift_once(&qword_1001D0540, sub_100034544);
      }
      uint64_t v8 = sub_100010ED4();
      sub_1000093D0(v8, (uint64_t)qword_1001EDC90);
      uint64_t v9 = sub_1000409A8();
      uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
      os_log_type_t v11 = static os_log_type_t.debug.getter();
      if (sub_10003EFD0(v11))
      {
        uint64_t v12 = sub_100009B20(12LL);
        uint64_t v13 = sub_100009B20(32LL);
        uint64_t v40 = v13;
        unint64_t v14 = sub_1000409D8(4.8149e-34);
        uint64_t v16 = sub_1000409D0(v14, v15);
        sub_1000409B4(v16);
        sub_10004099C();
        sub_100010C70();
        uint64_t v17 = "%s Experiments already updated. Skipping...";
LABEL_15:
        sub_1000409EC((void *)&_mh_execute_header, v10, v1, v17);
        sub_100030F9C(v13);
        sub_100010C34(v13);
        sub_100010C34(v12);

        goto LABEL_21;
      }
    }

    else
    {
      if (qword_1001D0540 != -1) {
        swift_once(&qword_1001D0540, sub_100034544);
      }
      uint64_t v28 = sub_100010ED4();
      sub_1000093D0(v28, (uint64_t)qword_1001EDC90);
      uint64_t v29 = sub_1000409A8();
      uint64_t v10 = (os_log_s *)Logger.logObject.getter(v29);
      os_log_type_t v30 = static os_log_type_t.debug.getter();
      if (sub_10003EFD0(v30))
      {
        uint64_t v12 = sub_100009B20(12LL);
        uint64_t v13 = sub_100009B20(32LL);
        uint64_t v40 = v13;
        unint64_t v31 = sub_1000409D8(4.8149e-34);
        uint64_t v33 = sub_1000409D0(v31, v32);
        sub_1000409B4(v33);
        sub_10004099C();
        sub_100010C70();
        goto LABEL_15;
      }
    }

    sub_10004099C();
    goto LABEL_21;
  }

  if (qword_1001D0540 != -1) {
    swift_once(&qword_1001D0540, sub_100034544);
  }
  uint64_t v18 = sub_100010ED4();
  uint64_t v19 = sub_1000093D0(v18, (uint64_t)qword_1001EDC90);
  uint64_t v20 = sub_1000409A8();
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)sub_100009B20(12LL);
    uint64_t v38 = v19;
    uint64_t v24 = sub_100009B20(32LL);
    uint64_t v40 = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    unint64_t v25 = sub_1000409F8();
    uint64_t v39 = sub_1000409D0(v25, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v23 + 4);
    sub_10004099C();
    swift_bridgeObjectRelease();
    sub_100030F9C(v24);
    uint64_t v27 = v24;
    uint64_t v19 = v38;
    sub_100010C34(v27);
    sub_100010C34((uint64_t)v23);
  }

  else
  {

    sub_10004099C();
  }

  type metadata accessor for NotificationsListener(0LL);
  if (qword_1001D0578 != -1) {
    swift_once(&qword_1001D0578, sub_10003F084);
  }
  uint64_t v34 = (void *)qword_1001EDCE8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16LL))(v6, v19, v18);
  sub_100009654(v6, 0LL, 1LL, v18);
  uint64_t v35 = swift_allocObject(&unk_1001B34E8, 24LL, 7LL);
  swift_weakInit(v35 + 16, v2);
  uint64_t v36 = sub_10003E918((uint64_t)&off_1001B07B8, v34, v6, (uint64_t)sub_100040984, v35);
  unint64_t v37 = *(void *)(v2 + 56);
  *(void *)(v2 + sub_10000BDD4(v0 + 56) = v36;
  sub_100040904(v37);
LABEL_21:
  sub_100009AA0();
}

uint64_t sub_10003FAB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 16;
  swift_beginAccess(a4 + 16, v6, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v4);
  if (result)
  {
    sub_10003FE54();
    return swift_release();
  }

  return result;
}

void sub_10003FB04()
{
  uint64_t v3 = *v0;
  if (qword_1001D0578 != -1) {
    swift_once(&qword_1001D0578, sub_10003F084);
  }
  uint64_t v4 = swift_allocObject(&unk_1001B3498, 32LL, 7LL);
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  *(void *)(v4 + sub_10000BDD4(v0 + 24) = v3;
  uint64_t v5 = sub_100009BBC((uint64_t)sub_1000D2F18);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  sub_100040A24(v6, v7, v8, v9, v10, v11, v12, v13, v26);
  __chkstk_darwin(v14);
  sub_100009AEC();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = sub_10000C4AC();
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v19 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  sub_1000270AC();
  uint64_t v22 = sub_10003B7FC( (unint64_t *)&qword_1001D2B80,  v21,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_10000941C((uint64_t *)&unk_1001D0BC0);
  sub_10000945C();
  uint64_t v23 = sub_100040A4C();
  dispatch thunk of SetAlgebra.init<A>(_:)(v23, v24, v25, v19, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v1, v5);
  _Block_release(v5);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v1, v19);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v17, v6);
  sub_100040A3C();
  sub_100009AA0();
}

uint64_t sub_10003FCB0(uint64_t a1)
{
  uint64_t result = swift_unknownObjectWeakLoadStrong(a1 + 24);
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(unsigned int *)(a1 + 40);
    if (qword_1001D0578 != -1) {
      swift_once(&qword_1001D0578, sub_10003F084);
    }
    uint64_t v5 = qword_1001EDCE8;
    uint64_t v6 = swift_allocObject(&unk_1001B34E8, 24LL, 7LL);
    swift_weakInit(v6 + 16, a1);
    swift_retain(v6);
    id v7 = sub_100082080(v4, v5, (uint64_t)sub_10004097C, v6);
    swift_release_n(v6, 2LL);
    swift_unknownObjectRelease(v3);
    uint64_t v8 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v7;
    return swift_unknownObjectRelease(v8);
  }

  return result;
}

uint64_t sub_10003FD98(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v3, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    sub_10003FE54();
    return swift_release();
  }

  return result;
}

uint64_t sub_10003FDEC()
{
  uint64_t result = swift_unknownObjectWeakLoadStrong(v0 + 24);
  if (result)
  {
    if (*(void *)(v0 + 48))
    {
      uint64_t v2 = swift_unknownObjectRetain(*(void *)(v0 + 48));
      sub_100082170(v2);
      swift_unknownObjectRelease();
    }

    return swift_unknownObjectRelease();
  }

  return result;
}

void sub_10003FE54()
{
  uint64_t v1 = v0;
  if (swift_unknownObjectWeakLoadStrong(v0 + 24))
  {
    if (qword_1001D0540 != -1) {
      swift_once(&qword_1001D0540, sub_100034544);
    }
    uint64_t v2 = sub_100010ED4();
    sub_1000093D0(v2, (uint64_t)qword_1001EDC90);
    sub_1000409A8();
    uint64_t v3 = (os_log_s *)sub_100014514();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    uint64_t v5 = &unk_10015D000;
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v6 = (_DWORD *)sub_100009B20(12LL);
      uint64_t v7 = sub_100009B20(32LL);
      uint64_t v26 = (void *)v7;
      *uint64_t v6 = 136315138;
      unint64_t v8 = sub_1000409F8();
      uint64_t v10 = sub_1000409D0(v8, v9);
      uint64_t v11 = sub_100040A0C(v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v11, v12, v13);
      sub_10004099C();
      swift_bridgeObjectRelease();
      sub_1000409EC((void *)&_mh_execute_header, v3, v4, "%s Updating trial experiments...");
      uint64_t v5 = (void *)&unk_10015D000;
      sub_100030F9C(v7);
      sub_100010C34(v7);
      sub_100010C34((uint64_t)v6);
    }

    else
    {

      uint64_t v14 = sub_10004099C();
    }

    uint64_t v26 = _swiftEmptySetSingleton;
    uint64_t v15 = *(unsigned int *)(v1 + 40);
    __chkstk_darwin(v14);
    void v23[2] = &v26;
    sub_100081EA4(v15, (uint64_t)sub_100040670, (uint64_t)v23);
    swift_bridgeObjectRetain(v26);
    sub_10003F054();
    sub_1000409A8();
    uint64_t v16 = (os_log_s *)sub_100014514();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (_DWORD *)sub_100009B20(12LL);
      uint64_t v19 = sub_100009B20(32LL);
      v25[0] = v19;
      *uint64_t v18 = v5[146];
      unint64_t v20 = sub_10003F588(v15);
      uint64_t v24 = sub_1000307E0(v20, v21, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v18 + 1);
      sub_10004099C();
      swift_bridgeObjectRelease();
      sub_1000409EC((void *)&_mh_execute_header, v16, v17, "%s Successfully updated trial experiments.");
      sub_100030F9C(v19);
      sub_100010C34(v19);
      sub_100010C34((uint64_t)v18);
      sub_1000145E0();
    }

    else
    {

      sub_1000145E0();
      sub_10004099C();
    }

    unint64_t v22 = *(void *)(v1 + 56);
    *(void *)(v1 + sub_10000BDD4(v0 + 56) = 1LL;
    sub_100040904(v22);
    swift_bridgeObjectRelease();
  }

  sub_100009AA0();
}

uint64_t *initializeBufferWithCopyOfBuffer for TrialExperimentsProvider.TrialExperimentsUpdateStatus( uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = v3;
  return a1;
}

unint64_t destroy for TrialExperimentsProvider.TrialExperimentsUpdateStatus(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_release(result);
  }
  return result;
}

unint64_t *assignWithCopy for TrialExperimentsProvider.TrialExperimentsUpdateStatus( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_retain(v4);
    }
  }

  else if (v4 < 0xFFFFFFFF)
  {
    swift_release(v3);
    *a1 = *a2;
  }

  else
  {
    *a1 = v4;
    swift_retain(v4);
    swift_release(v3);
  }

  return a1;
}

void *initializeWithTake for TrialExperimentsProvider.TrialExperimentsUpdateStatus( void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for TrialExperimentsProvider.TrialExperimentsUpdateStatus( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release(v3);
LABEL_6:
    *a1 = v4;
    return a1;
  }

  *a1 = v4;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrialExperimentsProvider.TrialExperimentsUpdateStatus( uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for TrialExperimentsProvider.TrialExperimentsUpdateStatus( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }

  return result;
}

void *sub_100040490(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }

  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }

  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for TrialExperimentsProvider.TrialExperimentsUpdateStatus()
{
  return &type metadata for TrialExperimentsProvider.TrialExperimentsUpdateStatus;
}

uint64_t sub_1000404C0(void *a1)
{
  uint64_t v2 = type metadata accessor for Trialpb_TrialExperiment(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v16 - v5;
  id v7 = [a1 namespaces];
  uint64_t v8 = sub_100009788(0LL, &qword_1001D2B78, &OBJC_CLASS___TRIVersionedNamespace_ptr);
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0) {
      uint64_t v14 = v9;
    }
    else {
      uint64_t v14 = v9 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v9);
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }

  if (!*(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  sub_100030F20(0LL, (v9 & 0xC000000000000001LL) == 0, v9);
  if ((v9 & 0xC000000000000001LL) != 0) {
    id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v9);
  }
  else {
    id v10 = *(id *)(v9 + 32);
  }
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  id v12 = v11;
  sub_100040678(v12, a1);
  sub_100057A3C();

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t sub_100040670(void *a1)
{
  return sub_1000404C0(a1);
}

void sub_100040678(void *a1, void *a2)
{
}

BOOL sub_100040770(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, a1);
  uint64_t v8 = _getErrorEmbeddedNSError<A>(_:)(v6, a1, a2);
  if (v8)
  {
    uint64_t v9 = v8;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  }

  else
  {
    uint64_t v9 = swift_allocError(a1, a2, 0LL, 0LL);
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v10, v6, a1);
  }

  uint64_t v11 = (void *)_convertErrorToNSError(_:)(v9);
  swift_errorRelease(v9);
  id v12 = [v11 domain];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v15 = v14;

  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"TRIGeneralErrorDomain");
  if (v13 == v16 && v15 == v17)
  {
    swift_bridgeObjectRelease_n(v15, 2LL);
  }

  else
  {
    uint64_t v19 = v17;
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v16, v17, 0LL);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v19);
    if ((v20 & 1) == 0)
    {

      return 0LL;
    }
  }

  id v22 = [v11 code];

  return v22 == (id)5;
}

unint64_t sub_100040904(unint64_t result)
{
  if (result >= 2) {
    return swift_release(result);
  }
  return result;
}

uint64_t sub_100040914()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100040938()
{
  return sub_10003FCB0(*(void *)(v0 + 16));
}

uint64_t sub_100040940(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100040950(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100040958()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10004097C()
{
  return sub_10003FD98(v0);
}

uint64_t sub_100040984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003FAB0(a1, a2, a3, v3);
}

uint64_t sub_10004099C()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_1000409A8()
{
  return swift_retain_n(v0, 2LL);
}

uint64_t sub_1000409B4(uint64_t a1)
{
  *(void *)(v2 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 96, v2 - 88, v1);
}

uint64_t sub_1000409D0(uint64_t a1, unint64_t a2)
{
  return sub_1000307E0(a1, a2, (uint64_t *)(v2 - 88));
}

unint64_t sub_1000409D8(float a1)
{
  *uint64_t v2 = a1;
  return sub_10003F588(*(_DWORD *)(v1 + 40));
}

void sub_1000409EC(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

unint64_t sub_1000409F8()
{
  return sub_10003F588(*(_DWORD *)(v0 + 40));
}

void sub_100040A00()
{
}

uint64_t sub_100040A0C(uint64_t a1)
{
  *(void *)(v1 - 136) = a1;
  return v1 - 136;
}

void sub_100040A24( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 - 152) = &a9;
}

uint64_t sub_100040A3C()
{
  return swift_release(*(void *)(v0 - 88));
}

uint64_t sub_100040A4C()
{
  return v0 - 136;
}

uint64_t sub_100040A60(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_100040A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3 + 40;
  uint64_t result = sub_100010BE4(v3 + 40, (uint64_t)v16, 0LL);
  uint64_t v8 = *(void *)(v3 + 40);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    unint64_t v10 = 0LL;
    for (unint64_t i = (uint64_t *)(v8 + 40); ; i += 3)
    {
      uint64_t v12 = *(i - 1);
      uint64_t v13 = *i;
      if (v12 == a2 && v13 == a3) {
        break;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, a2, a3, 0LL);
      if ((result & 1) != 0) {
        break;
      }
      if (v9 == ++v10) {
        return result;
      }
    }

    sub_100010BE4(v6, (uint64_t)v15, 33LL);
    sub_1000D2F3C(v10);
    swift_endAccess(v15);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_100040B30()
{
  *(void *)(v0 + 40) = _swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease();
}

void sub_100040B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = v6 + 1024;
  if (v6 >= 0xFFFFFFFFFFFFFC00LL)
  {
    __break(1u);
  }

  else
  {
    sub_100010BE4(v3 + 40, (uint64_t)v11, 33LL);
    swift_bridgeObjectRetain(a3);
    sub_1000340EC();
    uint64_t v8 = *(void *)(*(void *)(v3 + 40) + 16LL);
    sub_100034168(v8);
    uint64_t v9 = *(void *)(v3 + 40);
    *(void *)(v9 + swift_weakDestroy(v0 + 16) = v8 + 1;
    unint64_t v10 = (void *)(v9 + 24 * v8);
    v10[4] = a2;
    v10[5] = a3;
    v10[6] = v7;
    swift_endAccess(v11);
    sub_1000413FC();
  }

void sub_100040C00(uint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) == 0)
  {
    uint64_t v2 = a1;
    sub_100010BE4(v1 + 40, (uint64_t)v5, 0LL);
    for (unint64_t i = *(void **)(v1 + 40); ; unint64_t i = *(void **)(v1 + 40))
    {
      if (!i[2] || v2 < 1)
      {
        sub_1000413FC();
        return;
      }

      uint64_t v4 = i[6];
      swift_bridgeObjectRetain(i[5]);
      sub_1000A3BD8();
      swift_bridgeObjectRelease();
      if (v4 < 0) {
        break;
      }
      v2 -= v4;
    }

    __break(1u);
  }

  __break(1u);
}

void *sub_100040C8C()
{
  uint64_t result = v0;
  v0[4] = 0LL;
  v0[5] = &_swiftEmptyArrayStorage;
  v0[2] = 0LL;
  v0[3] = 0LL;
  return result;
}

uint64_t sub_100040CA4()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 40));
}

uint64_t sub_100040CAC()
{
  return v0;
}

uint64_t sub_100040CD0()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t type metadata accessor for QCCritbitOptimized()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd18QCCritbitOptimized);
}

uint64_t sub_100040D10()
{
  uint64_t v0 = sub_100040FBC((SEL *)&selRef_compressedDataUsingAlgorithm_error_);
  sub_1000A3C94(v0);
  return swift_release();
}

void sub_100040E4C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100040E78( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = sub_100040FBC((SEL *)&selRef_decompressedDataUsingAlgorithm_error_);
  LOBYTE(a4) = a4(a1, a2, v7);
  swift_release();
  return a4 & 1;
}

uint64_t sub_100040FBC(SEL *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for CachedResultSet.Result(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v24 - v8;
  uint64_t v10 = (uint64_t)v1 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result;
  sub_100041338(v10, (uint64_t)&v24 - v8);
  uint64_t v11 = (uint64_t *)(v10 + *(int *)(v4 + 40));
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  sub_100014244(*v11, v13);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100010A30(v12, v13);
  id v24 = 0LL;
  id v15 = objc_msgSend(isa, *a1, 1, &v24);

  id v16 = v24;
  if (v15)
  {
    uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v19 = v18;

    char v20 = &v9[*(int *)(v4 + 40)];
    sub_100010A30(*(void *)v20, *((void *)v20 + 1));
    *(void *)char v20 = v17;
    *((void *)v20 + 1) = v19;
    sub_100041338((uint64_t)v9, (uint64_t)v7);
    uint64_t v3 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
    *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
    sub_1000413B8((uint64_t)v7, v3 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result);
  }

  else
  {
    unint64_t v21 = v16;
    _convertNSErrorToError(_:)(v16);

    swift_willThrow(v22);
  }

  sub_10004137C((uint64_t)v9);
  return v3;
}

uint64_t type metadata accessor for QCCritbitCompressed()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd19QCCritbitCompressed);
}

void *sub_1000411C8(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  return a1;
}

void *assignWithCopy for QCCritbitOptimized.HistoryItem(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

__n128 initializeWithTake for QCCritbitOptimized.HistoryItem(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for QCCritbitOptimized.HistoryItem(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for QCCritbitOptimized.HistoryItem(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QCCritbitOptimized.HistoryItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + sub_10000BDD4(v0 + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + sub_10000BDD4(v0 + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for QCCritbitOptimized.HistoryItem()
{
  return &type metadata for QCCritbitOptimized.HistoryItem;
}

uint64_t sub_100041330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100040E78(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
}

uint64_t sub_100041338(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CachedResultSet.Result(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004137C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CachedResultSet.Result(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000413B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CachedResultSet.Result(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

  ;
}

void sub_100041410()
{
  qword_1001EDCF0 = (uint64_t)&off_1001B0400;
}

void sub_100041424()
{
  qword_1001EDCF8 = (uint64_t)&off_1001B0568;
}

uint64_t sub_100041438(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_100041464 + 4 * byte_10015EE80[a1]))( "unknown",  7LL);
}

const char *sub_100041464()
{
  return "configuration";
}

unint64_t sub_1000416CC()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1000416E8()
{
  return 0x656372756F736572LL;
}

uint64_t sub_10004170C()
{
  return sub_100041438(*v0);
}

uint64_t sub_100041728(void *a1, int a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t v6 = v5;
  *(_BYTE *)(v6 + qword_1001D2E88) = 0;
  char v11 = a5 & 1;
  *(void *)(v6 + qword_1001EDD00) = 0LL;
  uint64_t v12 = v6 + qword_1001EDD08;
  *(void *)uint64_t v12 = 0LL;
  *(_BYTE *)(v12 + 8) = 1;
  *(_BYTE *)(v6 + qword_1001D2E90) = 0;
  uint64_t v13 = v6 + qword_1001EDD10;
  uint64_t v14 = sub_100019F9C();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, a3, v14);
  *(void *)uint64_t v12 = a4;
  *(_BYTE *)(v12 + 8) = v11;
  uint64_t v16 = sub_10000941C(&qword_1001D0C10);
  if ((a5 & 1) != 0)
  {
    uint64_t inited = (__n128 *)swift_initStackObject(v16, v35);
    uint64_t v18 = sub_1000435D4(inited, (__n128)xmmword_10015C7F0);
    unint64_t v20 = v19;
    inited[3].n128_u64[1] = (unint64_t)&type metadata for String;
    inited[4].n128_u64[0] = sub_100042FE8();
    inited[2].n128_u64[0] = v18;
    inited[2].n128_u64[1] = v20;
    unint64_t v21 = "client=%{signpost.description:attribute,public}s";
    uint64_t v22 = a1;
    int v23 = a2;
    uint64_t v24 = 48LL;
    uint64_t v25 = (uint64_t)inited;
  }

  else
  {
    uint64_t v26 = (__n128 *)swift_initStackObject(v16, v34);
    uint64_t v27 = sub_1000435D4(v26, (__n128)xmmword_10015D580);
    unint64_t v29 = v28;
    v26[3].n128_u64[1] = (unint64_t)&type metadata for String;
    unint64_t v30 = sub_100042FE8();
    v26[2].n128_u64[0] = v27;
    v26[2].n128_u64[1] = v29;
    v26[6].n128_u64[0] = (unint64_t)&type metadata for UInt64;
    v26[6].n128_u64[1] = (unint64_t)&protocol witness table for UInt64;
    v26[4].n128_u64[0] = v30;
    v26[4].n128_u64[1] = a4;
    unint64_t v21 = "client=%{signpost.description:attribute,public}s, identifier=%{signpost.description:attribute,public}llu";
    uint64_t v22 = a1;
    int v23 = a2;
    uint64_t v24 = 104LL;
    uint64_t v25 = (uint64_t)v26;
  }

  uint64_t v31 = sub_1000418E4(v22, v23, (uint64_t)v21, v24, 2, v25);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a3, v14);
  return v31;
}

uint64_t sub_1000418E4(void *a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v67 = a6;
  HIDWORD(v62) = a5;
  uint64_t v63 = a3;
  uint64_t v64 = a4;
  int v68 = a2;
  uint64_t v9 = sub_10000941C(&qword_1001D1078);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v66 = (uint64_t)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v61 - v12;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = v6 + 16;
  swift_weakInit(v6 + 16, 0LL);
  *(void *)(v6 + sub_10000BDD4(v0 + 24) = 0LL;
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 32) = 0LL;
  *(_WORD *)(v6 + 40) = 256;
  *(void *)(v6 + 48) = 0LL;
  *(void *)(v6 + sub_10000BDD4(v0 + 56) = 0LL;
  *(void *)(v6 + 64) = &_swiftEmptyArrayStorage;
  *(void *)(v6 + 72) = 0LL;
  *(_BYTE *)(v6 + 81) = 0;
  sub_100009788(0LL, (unint64_t *)&qword_1001D1080, &OBJC_CLASS___OS_os_log_ptr);
  v70[0] = 0xD000000000000010LL;
  v70[1] = 0x800000010016AE50LL;
  v69[0] = 45LL;
  v69[1] = 0xE100000000000000LL;
  v71[0] = 95LL;
  v71[1] = 0xE100000000000000LL;
  unint64_t v19 = sub_1000106CC();
  uint64_t v20 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v69,  v71,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v19,  v19,  v19);
  *(void *)(v6 + 88) = OS_os_log.init(subsystem:category:)(v20, v21, 0x656372756F736572LL, 0xEE00737365636341LL);
  uint64_t v22 = v7 + *(void *)(*(void *)v7 + 136LL);
  uint64_t v23 = type metadata accessor for OSSignpostID(0LL);
  sub_100009654(v22, 1LL, 1LL, v23);
  uint64_t v24 = *(void *)(*(void *)v7 + 152LL);
  uint64_t v25 = type metadata accessor for Locker();
  uint64_t v26 = swift_allocObject(v25, 24LL, 7LL);
  uint64_t v27 = (_DWORD *)swift_slowAlloc(4LL, -1LL);
  *(void *)(v26 + swift_weakDestroy(v0 + 16) = v27;
  *uint64_t v27 = 0;
  *(void *)(v7 + vsub_10000BDD4(v0 + 24) = v26;
  uint64_t v28 = v67;
  Date.init()(v27);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v7 + *(void *)(*(void *)v7 + 144LL), v17, v14);
  swift_weakAssign(v18, a1);
  *(_BYTE *)(v7 + 80) = v68;
  id v29 = *(id *)(v7 + 88);
  swift_retain(v7);
  OSSignpostID.init(log:object:)(v29, v7);
  uint64_t v65 = v23;
  sub_100009654((uint64_t)v13, 0LL, 1LL, v23);
  uint64_t v30 = v7 + *(void *)(*(void *)v7 + 136LL);
  swift_beginAccess(v30, v70, 33LL, 0LL);
  sub_100043024((uint64_t)v13, v30);
  swift_endAccess(v70);
  v70[0] = v7;
  swift_retain(v7);
  uint64_t v31 = String.init<A>(describing:)(v70);
  uint64_t v33 = v32;
  uint64_t v34 = *(os_unfair_lock_s **)(a1[4] + 16LL);
  os_unfair_lock_lock(v34);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1 + 2);
  if (Strong)
  {
    uint64_t v36 = Strong;
    uint64_t v61 = v30;
    uint64_t v37 = a1[3];
    swift_beginAccess(a1 + 5, v69, 0LL, 0LL);
    uint64_t v38 = a1[5];
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v38);
    uint64_t v39 = sub_10000BFD4(v31, v33, v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    if (v39)
    {
      uint64_t ObjectType = swift_getObjectType(v36);
      (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v37 + 32))(v7, &off_1001B7B30, ObjectType, v37);
    }

    swift_unknownObjectRelease(v36);
    uint64_t v28 = v67;
    uint64_t v30 = v61;
  }

  uint64_t v41 = type metadata accessor for ActivityMonitor.WeakReference();
  uint64_t v42 = swift_allocObject(v41, 32LL, 7LL);
  *(void *)(v42 + sub_10000BDD4(v0 + 24) = 0LL;
  uint64_t v43 = swift_unknownObjectWeakInit(v42 + 16, 0LL);
  *(void *)(v42 + sub_10000BDD4(v0 + 24) = &off_1001B7B30;
  swift_unknownObjectWeakAssign(v43, v7);
  swift_beginAccess(a1 + 5, v70, 33LL, 0LL);
  swift_bridgeObjectRetain(v33);
  sub_10000F6E8(v42, v31, v33, v44, v45, v46, v47, v48, v61, v62);
  swift_endAccess(v70);
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v34);
  swift_bridgeObjectRelease();
  uint64_t v49 = swift_unknownObjectWeakLoadStrong(a1 + 2);
  if (v49)
  {
    uint64_t v50 = v49;
    uint64_t v51 = a1[3];
    uint64_t v52 = swift_getObjectType(v49);
    (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v51 + 8))(v7, &off_1001B7B30, v52, v51);
    swift_release();
    swift_unknownObjectRelease(v50);
  }

  else
  {
    swift_release();
  }

  uint64_t v54 = v65;
  uint64_t v53 = v66;
  sub_10004344C(v30, v66);
  uint64_t result = sub_100010708(v53, 1LL, v54);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    id v56 = *(id *)(v7 + 88);
    uint64_t v57 = static os_signpost_type_t.begin.getter(v56);
    uint64_t v58 = sub_100041438(v68);
    LOBYTE(v60) = BYTE4(v62);
    sub_1000A56E4(v57, (uint64_t)v56, v58, v59, 2LL, v53, v63, v64, v60, v28);

    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8LL))(v53, v54);
    sub_100043138();
    swift_release();
    return v7;
  }

  return result;
}

void sub_100041E38(void *a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v10 = v6;
  uint64_t v71 = a6;
  HIDWORD(v66) = a5;
  uint64_t v67 = a3;
  uint64_t v68 = a4;
  int v72 = a2;
  sub_10000941C(&qword_1001D1078);
  sub_100009B94();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v70 = (uint64_t)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = sub_100043528();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_1000434CC();
  sub_100010C5C();
  *(void *)(v6 + 64) = _swiftEmptyArrayStorage;
  *(void *)(v6 + 72) = 0LL;
  *(_BYTE *)(v6 + 81) = 0;
  uint64_t v18 = sub_100009B34(v17, (unint64_t *)&qword_1001D1080, &OBJC_CLASS___OS_os_log_ptr);
  unint64_t v19 = sub_100010B68(0x800000010016AE50LL);
  uint64_t v25 = sub_100010B28(v19, v20, v21, v22, v23, v24, (uint64_t)&type metadata for String);
  uint64_t v26 = v18;
  uint64_t v28 = OS_os_log.init(subsystem:category:)(v25, v27, 0x526B726F7774656ELL, 0xEE00747365757165LL);
  uint64_t v29 = sub_100010BCC(v28);
  uint64_t v30 = sub_10004358C();
  sub_100009654(v30, v31, v32, v29);
  uint64_t v33 = *(void *)(*(void *)v10 + 152LL);
  uint64_t v34 = type metadata accessor for Locker();
  sub_100009ACC(v34, 24LL);
  uint64_t v35 = (_DWORD *)sub_1000434F0();
  *(void *)(v26 + swift_weakDestroy(v0 + 16) = v35;
  _DWORD *v35 = 0;
  *(void *)(v10 + v33) = v26;
  uint64_t v36 = v71;
  Date.init()(v35);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v10 + *(void *)(*(void *)v10 + 144LL), v9, v15);
  swift_weakAssign(v7, a1);
  uint64_t v37 = sub_100043500();
  sub_100010D08();
  sub_100043548();
  uint64_t v69 = v29;
  sub_100009654(v8, 0LL, 1LL, v29);
  uint64_t v38 = v10 + *(void *)(*(void *)v10 + 136LL);
  sub_100010BC0(v38, (uint64_t)v74);
  sub_100043024(v8, v38);
  sub_100010CF8();
  v74[0] = v10;
  sub_100010D08();
  uint64_t v39 = sub_100010F04();
  uint64_t v41 = v40;
  sub_10004353C(a1[4]);
  uint64_t v42 = sub_10004357C();
  if (v42)
  {
    uint64_t v37 = (void *)v42;
    uint64_t v65 = v38;
    uint64_t v43 = a1[3];
    sub_100010BE4((uint64_t)(a1 + 5), (uint64_t)v73, 0LL);
    uint64_t v44 = a1[5];
    sub_10003EF98();
    swift_bridgeObjectRetain(v44);
    uint64_t v45 = sub_10000BFD4(v39, v41, v44);
    sub_1000110E0();
    swift_bridgeObjectRelease();
    swift_release();
    if (v45)
    {
      uint64_t v46 = sub_100010E3C();
      sub_1000435E0( (uint64_t)&off_1001B7B30,  v46,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 32));
    }

    sub_100010CA0();
    uint64_t v36 = v71;
    uint64_t v38 = v65;
  }

  uint64_t v47 = sub_100011044();
  uint64_t v48 = sub_100009ACC(v47, 32LL);
  uint64_t v49 = sub_100010BEC(v48);
  v37[3] = &off_1001B7B30;
  swift_unknownObjectWeakAssign(v49, v10);
  sub_100010BC0((uint64_t)(a1 + 5), (uint64_t)v74);
  sub_10003EF98();
  sub_10000F6E8((uint64_t)v37, v39, v41, v50, v51, v52, v53, v54, v65, v66);
  sub_100010CF8();
  sub_1000110E0();
  sub_100043554();
  sub_1000110E0();
  uint64_t v55 = sub_10004357C();
  if (v55)
  {
    uint64_t v56 = a1[3];
    uint64_t ObjectType = swift_getObjectType(v55);
    (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v56 + 8))(v10, &off_1001B7B30, ObjectType, v56);
    sub_100010D00();
    sub_100010CA0();
  }

  else
  {
    sub_100010D00();
  }

  uint64_t v59 = v69;
  uint64_t v58 = v70;
  sub_10004344C(v38, v70);
  if (sub_100010708(v58, 1LL, v59) == 1)
  {
    __break(1u);
  }

  else
  {
    id v60 = sub_100010CC0();
    uint64_t v61 = static os_signpost_type_t.begin.getter(v60);
    uint64_t v62 = sub_100041438(v72);
    LOBYTE(v64) = BYTE4(v66);
    sub_1000A56E4(v61, (uint64_t)v60, v62, v63, 2LL, v58, v67, v68, v64, v36);

    sub_1000145F0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8LL))(v58, v59);
    swift_release();
    sub_100009AA0();
  }

void sub_10004221C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v70 = a6;
  unsigned int v69 = a5;
  uint64_t v67 = a3;
  uint64_t v68 = a4;
  int v73 = a2;
  uint64_t v71 = a1;
  sub_10000941C(&qword_1001D1078);
  sub_100009B94();
  __chkstk_darwin(v8);
  sub_100010C00(v9, v65);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v65 - v11;
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = sub_1000435EC(v13);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = v6 + 16;
  swift_weakInit(v6 + 16, 0LL);
  sub_100010C5C();
  *(void *)(v6 + 64) = _swiftEmptyArrayStorage;
  *(void *)(v6 + 72) = 0LL;
  *(_BYTE *)(v6 + 81) = 0;
  uint64_t v19 = sub_100009B34(v18, (unint64_t *)&qword_1001D1080, &OBJC_CLASS___OS_os_log_ptr);
  unint64_t v20 = sub_100010B68((uint64_t)off_1001D5DA8);
  uint64_t v26 = sub_100010B28(v20, v21, v22, v23, v24, v25, (uint64_t)&type metadata for String);
  uint64_t v28 = v27;
  uint64_t v30 = aQuerycache_2[0];
  uint64_t v29 = aQuerycache_2[1];
  sub_100010E2C();
  uint64_t v31 = v30;
  uint64_t v32 = v71;
  uint64_t v33 = OS_os_log.init(subsystem:category:)(v26, v28, v31, v29);
  uint64_t v34 = sub_100010BCC(v33);
  uint64_t v35 = sub_10004358C();
  sub_100009654(v35, v36, v37, v34);
  uint64_t v38 = sub_10004356C();
  sub_100009ACC(v38, 24LL);
  uint64_t v39 = (_DWORD *)sub_1000434F0();
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = v39;
  *uint64_t v39 = 0;
  *(void *)(v7 + v29) = v19;
  Date.init()(v39);
  uint64_t v40 = sub_1000435B4();
  v41(v40, v16, v72);
  sub_10004359C();
  uint64_t v42 = (uint64_t)sub_100043500();
  sub_100010D08();
  sub_100043548();
  sub_100009654((uint64_t)v12, 0LL, 1LL, v34);
  uint64_t v43 = v7 + *(void *)(*(void *)v7 + 136LL);
  sub_100010BC0(v43, (uint64_t)v75);
  sub_100043024((uint64_t)v12, v43);
  sub_100010CF8();
  v75[0] = v7;
  sub_100010D08();
  uint64_t v44 = sub_100010F04();
  uint64_t v46 = v45;
  sub_10004353C(*(void *)(v32 + 32));
  uint64_t v47 = v32 + 16;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v32 + 16);
  if (Strong)
  {
    uint64_t v42 = Strong;
    uint64_t v66 = v43;
    uint64_t v72 = v34;
    uint64_t v49 = *(void *)(v32 + 24);
    sub_100010BE4(v32 + 40, (uint64_t)v74, 0LL);
    uint64_t v50 = v32;
    uint64_t v51 = *(void *)(v32 + 40);
    swift_bridgeObjectRetain(v46);
    sub_100010E2C();
    uint64_t v52 = sub_10000BFD4(v44, v46, v51);
    sub_1000145F0();
    sub_1000110A8();
    sub_100043584();
    if (v52)
    {
      uint64_t v53 = sub_100010E3C();
      (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v49 + 32))(v7, &off_1001B7B30, v53, v49);
    }

    sub_100010CA0();
    uint64_t v32 = v50;
    uint64_t v34 = v72;
  }

  uint64_t v54 = sub_100011044();
  uint64_t v55 = sub_100009ACC(v54, 32LL);
  uint64_t v56 = sub_100010BEC(v55);
  sub_100010EAC(v56);
  sub_100010BC0(v32 + 40, (uint64_t)v75);
  swift_bridgeObjectRetain(v46);
  sub_10000F6E8(v42, v44, v46, v57, v58, v59, v60, v61, v65, v66);
  sub_100010CF8();
  sub_1000145F0();
  sub_100043554();
  sub_1000145F0();
  uint64_t v62 = swift_unknownObjectWeakLoadStrong(v47);
  if (v62)
  {
    uint64_t v63 = sub_1000435C8(v62);
    sub_100010F24( (uint64_t)&off_1001B7B30,  v63,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 48));
    sub_100010D00();
    sub_100010CA0();
  }

  else
  {
    sub_100010D00();
  }

  sub_10004355C();
  if (sub_100010708(v17, 1LL, v34) == 1)
  {
    __break(1u);
  }

  else
  {
    id v64 = sub_100010CC0();
    sub_10004306C(v17, (uint64_t)v64, v67, v68, v69, v70, v73);

    sub_1000110A8();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8LL))(v17, v34);
    sub_100043584();
    sub_100009AA0();
  }

void sub_1000425B0(void *a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v10 = v6;
  sub_10000941C(&qword_1001D1078);
  sub_100009B94();
  __chkstk_darwin(v11);
  sub_100010C00(v12, v67);
  __chkstk_darwin(v13);
  uint64_t v14 = sub_100043528();
  uint64_t v15 = sub_1000435EC(v14);
  __chkstk_darwin(v15);
  sub_1000434CC();
  sub_100010C5C();
  *(void *)(v6 + 64) = &_swiftEmptyArrayStorage;
  *(void *)(v6 + 72) = 0LL;
  *(_BYTE *)(v6 + 81) = 0;
  uint64_t v17 = sub_100009B34(v16, (unint64_t *)&qword_1001D1080, &OBJC_CLASS___OS_os_log_ptr);
  unint64_t v18 = sub_100010B68((uint64_t)off_1001D60F0);
  uint64_t v24 = sub_100010B28(v18, v19, v20, v21, v22, v23, (uint64_t)&type metadata for String);
  uint64_t v26 = v25;
  uint64_t v28 = aContextmanager_5[0];
  uint64_t v27 = aContextmanager_5[1];
  sub_100010E2C();
  uint64_t v29 = v24;
  uint64_t v30 = v28;
  uint64_t v31 = a1;
  uint64_t v32 = v17;
  uint64_t v33 = OS_os_log.init(subsystem:category:)(v29, v26, v30, v27);
  uint64_t v34 = sub_100010BCC(v33);
  uint64_t v35 = sub_10004358C();
  sub_100009654(v35, v36, v37, v34);
  uint64_t v38 = sub_10004356C();
  sub_100009ACC(v38, 24LL);
  uint64_t v39 = (_DWORD *)sub_1000434F0();
  *(void *)(v32 + swift_weakDestroy(v0 + 16) = v39;
  *uint64_t v39 = 0;
  *(void *)(v10 + v27) = v32;
  Date.init()(v39);
  uint64_t v40 = sub_1000435B4();
  v41(v40, v9);
  sub_10004359C();
  uint64_t v42 = (uint64_t)sub_100043500();
  sub_100010D08();
  sub_100043548();
  sub_100009654(v8, 0LL, 1LL, v34);
  uint64_t v43 = v10 + *(void *)(*(void *)v10 + 136LL);
  sub_100010BC0(v43, (uint64_t)v78);
  sub_100043024(v8, v43);
  sub_100010CF8();
  v78[0] = v10;
  sub_100010D08();
  uint64_t v44 = sub_100010F04();
  uint64_t v46 = v45;
  sub_10004353C(a1[4]);
  uint64_t v47 = sub_10004357C();
  if (v47)
  {
    uint64_t v42 = v47;
    uint64_t v69 = v43;
    uint64_t v75 = v34;
    uint64_t v48 = a1[3];
    sub_100010BE4((uint64_t)(a1 + 5), (uint64_t)v77, 0LL);
    uint64_t v49 = a1[5];
    sub_10003EF98();
    sub_100010E2C();
    uint64_t v50 = sub_10000BFD4(v44, v46, v49);
    sub_1000110E0();
    sub_1000110A8();
    sub_100043584();
    if (v50)
    {
      uint64_t v51 = sub_100010E3C();
      sub_1000435E0( (uint64_t)&off_1001B7B30,  v51,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 32));
    }

    sub_100010CA0();
    uint64_t v31 = a1;
    uint64_t v34 = v75;
  }

  uint64_t v52 = sub_100011044();
  uint64_t v53 = sub_100009ACC(v52, 32LL);
  uint64_t v54 = sub_100010BEC(v53);
  sub_100010EAC(v54);
  sub_100010BC0((uint64_t)(v31 + 5), (uint64_t)v78);
  sub_10003EF98();
  sub_10000F6E8(v42, v44, v46, v55, v56, v57, v58, v59, v68, v69);
  sub_100010CF8();
  sub_1000110E0();
  sub_100043554();
  sub_1000110E0();
  uint64_t v60 = sub_10004357C();
  if (v60)
  {
    uint64_t v61 = sub_1000435C8(v60);
    sub_100010F24((uint64_t)&off_1001B7B30, v61, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v31[6]);
    sub_100010D00();
    sub_100010CA0();
  }

  else
  {
    sub_100010D00();
  }

  sub_10004355C();
  if (sub_100010708(v7, 1LL, v34) == 1)
  {
    __break(1u);
  }

  else
  {
    id v62 = sub_100010CC0();
    uint64_t v63 = static os_signpost_type_t.begin.getter();
    if (a2)
    {
      if (a2 == 1)
      {
        id v64 = "contextUpdate";
        uint64_t v65 = 13LL;
      }

      else
      {
        id v64 = "notBagFetchable";
        uint64_t v65 = 15LL;
      }
    }

    else
    {
      id v64 = "lifetime";
      uint64_t v65 = 8LL;
    }

    LOBYTE(v66) = a5;
    sub_1000A56E4(v63, (uint64_t)v62, (uint64_t)v64, v65, 2LL, v7, a3, a4, v66, a6);

    sub_1000110A8();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8LL))(v7, v34);
    sub_100043584();
    sub_100009AA0();
  }

uint64_t sub_10004294C()
{
  uint64_t v1 = v0 + qword_1001EDD10;
  uint64_t v2 = sub_100019F9C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
}

uint64_t sub_100042994()
{
  if ((*(_BYTE *)(v0 + 81) & 1) == 0) {
    sub_100042D10();
  }
  uint64_t v1 = sub_1000D5090();
  swift_release();
  uint64_t v2 = v1 + qword_1001EDD10;
  uint64_t v3 = sub_100019F9C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  return v1;
}

uint64_t sub_1000429F8()
{
  uint64_t v0 = sub_100042994();
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for ResourceAccessSpan(uint64_t a1)
{
  uint64_t result = qword_1001D2EC0;
  if (!qword_1001D2EC0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ResourceAccessSpan);
  }
  return result;
}

uint64_t sub_100042A50(uint64_t a1)
{
  v4[0] = &unk_10015EEF8;
  v4[1] = &unk_10015EF10;
  void v4[2] = &unk_10015EF28;
  uint64_t result = type metadata accessor for Client(319LL);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(result - 8) + 64LL;
    v4[4] = &unk_10015EF40;
    uint64_t result = swift_initClassMetadata2(a1, 256LL, 5LL, v4, a1 + 448);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100042AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 88);
  uint64_t v4 = static os_log_type_t.error.getter(a1, a2);
  os_log(_:dso:log:type:_:)( "LEAKED RESOURCE ACCESS SPAN: {{{",  32LL,  2LL,  &_mh_execute_header,  v3,  v4,  _swiftEmptyArrayStorage);
  uint64_t v5 = sub_1000D5138();
  static os_log_type_t.error.getter(v5, v6);
  uint64_t v7 = sub_10000941C(&qword_1001D0C10);
  uint64_t v8 = sub_100009ACC(v7, 72LL);
  *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
  char v32 = *(_BYTE *)(v2 + qword_1001D2E88);
  uint64_t v9 = String.init<A>(describing:)(&v32);
  uint64_t v11 = v10;
  *(void *)(v8 + sub_10000BDD4(v0 + 56) = &type metadata for String;
  unint64_t v12 = sub_100042FE8();
  *(void *)(v8 + 64) = v12;
  *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  sub_100043510((uint64_t)"Outcome: %s", 11LL);
  uint64_t v13 = swift_bridgeObjectRelease();
  static os_log_type_t.error.getter(v13, v14);
  uint64_t v15 = sub_100009ACC(v7, 72LL);
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
  char v16 = *(_BYTE *)(v2 + qword_1001EDD08 + 8);
  uint64_t v30 = *(void *)(v2 + qword_1001EDD08);
  char v31 = v16;
  sub_10000941C(&qword_1001D3178);
  uint64_t v17 = String.init<A>(describing:)(&v30);
  *(void *)(v15 + sub_10000BDD4(v0 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = v12;
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 32) = v17;
  *(void *)(v15 + 40) = v18;
  sub_100043510((uint64_t)"Identifier: %s", 14LL);
  uint64_t v19 = swift_bridgeObjectRelease();
  static os_log_type_t.error.getter(v19, v20);
  uint64_t v21 = sub_100009ACC(v7, 72LL);
  uint64_t v22 = *(void *)(v2 + qword_1001EDD00);
  *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
  BOOL v23 = v22 == 0;
  uint64_t v24 = 7562617LL;
  if (v23) {
    uint64_t v24 = 28526LL;
  }
  unint64_t v25 = 0xE300000000000000LL;
  *(void *)(v21 + sub_10000BDD4(v0 + 56) = &type metadata for String;
  *(void *)(v21 + 64) = v12;
  if (v23) {
    unint64_t v25 = 0xE200000000000000LL;
  }
  *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 32) = v24;
  *(void *)(v21 + 40) = v25;
  os_log(_:dso:log:type:_:)("Has network span: %s", (const char *)1);
  uint64_t v26 = swift_bridgeObjectRelease();
  uint64_t v28 = static os_log_type_t.error.getter(v26, v27);
  return os_log(_:dso:log:type:_:)("}}}", 3LL, 2LL, &_mh_execute_header, v3, v28, _swiftEmptyArrayStorage);
}

void sub_100042D10()
{
  if ((v0[81] & 1) == 0)
  {
    uint64_t v1 = v0;
    uint64_t v2 = *(void *)&v0[qword_1001EDD00];
    if (v2)
    {
      swift_retain(v2);
      sub_1000D7510();
      swift_release();
    }

    if ((v1[qword_1001D2E90] & 1) == 0)
    {
      uint64_t v3 = sub_10000941C(&qword_1001D3168);
      uint64_t inited = swift_initStackObject(v3, v16);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10015D580;
      *(void *)(inited + swift_unknownObjectWeakDestroy(v0 + 32) = 0x726574706F6461LL;
      *(void *)(inited + 40) = 0xE700000000000000LL;
      uint64_t v5 = Client.type.getter();
      ClientType.rawValue.getter(v5);
      *(void *)(inited + 48) = sub_1000435A8(objc_allocWithZone(&OBJC_CLASS___NSNumber));
      *(void *)(inited + sub_10000BDD4(v0 + 56) = 0x656D6F6374756FLL;
      *(void *)(inited + 64) = 0xE700000000000000LL;
      *(void *)(inited + 72) = sub_1000435A8(objc_allocWithZone(&OBJC_CLASS___NSNumber));
      uint64_t v6 = sub_100009788(0LL, &qword_1001D3170, &OBJC_CLASS___NSNumber_ptr);
      Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v6, &protocol witness table for String);
      sub_1000C07AC();
      uint64_t v8 = v7;
      swift_bridgeObjectRelease();
      sub_1000D5B24(v8);
      sub_1000110A8();
    }

    uint64_t v9 = sub_10000941C(&qword_1001D0C10);
    uint64_t v10 = sub_100009ACC(v9, 72LL);
    *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
    char v15 = v1[qword_1001D2E88];
    uint64_t v11 = String.init<A>(describing:)(&v15);
    uint64_t v13 = v12;
    *(void *)(v10 + sub_10000BDD4(v0 + 56) = &type metadata for String;
    *(void *)(v10 + 64) = sub_100042FE8();
    *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 32) = v11;
    *(void *)(v10 + 40) = v13;
    sub_1000D6888("outcome=%{signpost.description:attribute,public}s", 49LL, 2LL, v10);
    sub_1000110A8();
    uint64_t v14 = *(os_unfair_lock_s **)(*(void *)&v1[*(void *)(*(void *)v1 + 152LL)] + 16LL);
    swift_retain(*(void *)&v1[*(void *)(*(void *)v1 + 152LL)]);
    os_unfair_lock_lock(v14);
    if ((v1[81] & 1) == 0) {
      sub_1000D6614();
    }
    sub_100043554();
    swift_release();
  }

unint64_t sub_100042F44(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100042F70();
  unint64_t result = sub_100042FAC();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_100042F70()
{
  unint64_t result = qword_1001D3158;
  if (!qword_1001D3158)
  {
    unint64_t result = swift_getWitnessTable(&unk_100161600, &type metadata for ResourceAccessActivity);
    atomic_store(result, (unint64_t *)&qword_1001D3158);
  }

  return result;
}

unint64_t sub_100042FAC()
{
  unint64_t result = qword_1001D3160;
  if (!qword_1001D3160)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001615C8, &type metadata for ResourceAccessActivity);
    atomic_store(result, (unint64_t *)&qword_1001D3160);
  }

  return result;
}

unint64_t sub_100042FE8()
{
  unint64_t result = qword_1001D5740;
  if (!qword_1001D5740)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1001D5740);
  }

  return result;
}

uint64_t sub_100043024(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001D1078);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

void sub_10004306C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  __asm { BR              X10 }

void sub_1000430D0(uint64_t a1)
{
  LOBYTE(v7) = v6;
  sub_1000A56E4(a1, v4, (uint64_t)"cacheAccess", 11LL, 2LL, v3, v2, v1, v7, v5);
}

uint64_t sub_100043138()
{
  uint64_t v1 = v0;
  unsigned __int8 v2 = *(_BYTE *)(v0 + 80);
  v13[3] = &type metadata for ResourceAccessActivity;
  void v13[4] = &off_1001B3610;
  LOBYTE(v13[0]) = v2;
  uint64_t v3 = *(char *)sub_100019AFC(v13, (uint64_t)&type metadata for ResourceAccessActivity);
  if (qword_1001D0588 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v4 = *(void *)(qword_1001EDCF8 + 16);
    if (!v4) {
      break;
    }
    for (uint64_t i = 0LL; ; ++i)
    {
      uint64_t v6 = i + 1;
      if (__OFADD__(i, 1LL)) {
        break;
      }
      if (qword_10015F338[*(char *)(qword_1001EDCF8 + 32 + i)] == qword_10015F338[v3])
      {
        v7._uint64_t countAndFlagsBits = 46LL;
        v7._object = (void *)0xE100000000000000LL;
        String.append(_:)(v7);
        swift_bridgeObjectRetain(0x800000010016AE50LL);
        v8._uint64_t countAndFlagsBits = 0x656372756F736572LL;
        v8._object = (void *)0xEE00737365636341LL;
        String.append(_:)(v8);
        swift_bridgeObjectRelease();
        uint64_t v9 = sub_100041438(v2);
        v10._uint64_t countAndFlagsBits = StaticString.description.getter(v9);
        String.append(_:)(v10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain(0x800000010016AE50LL);
        v11._uint64_t countAndFlagsBits = 46LL;
        v11._object = (void *)0xE100000000000000LL;
        String.append(_:)(v11);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_retain(v1);
        sub_10004334C(0xD000000000000010LL, 0x800000010016AE50LL, v1);
        swift_bridgeObjectRelease();
        return sub_1000108B8(v13);
      }

      if (v6 == v4) {
        return sub_1000108B8(v13);
      }
    }

    __break(1u);
LABEL_11:
    swift_once(&qword_1001D0588, sub_100041424);
  }

  return sub_1000108B8(v13);
}

uint64_t sub_100043314(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = os_transaction_create();
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = v3;
  return swift_unknownObjectRelease(v4);
}

uint64_t sub_10004334C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)(sub_100043494, a3, a1, a2, (char *)&type metadata for () + 8);
    return swift_release();
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((a1 & 0x1000000000000000LL) != 0)
    {
      uint64_t v5 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v5 = _StringObject.sharedUTF8.getter(a1, a2);
    }

    sub_1000434AC(v5, v6, (uint64_t (*)(void))sub_100043494);
    return swift_release();
  }

  v10[0] = a1;
  v10[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v8 = os_transaction_create(v10);
  uint64_t v9 = *(void *)(a3 + 72);
  *(void *)(a3 + 72) = v8;
  swift_release();
  return swift_unknownObjectRelease(v9);
}

uint64_t sub_10004344C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001D1078);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100043494(uint64_t a1)
{
  return sub_100043314(a1, v1);
}

uint64_t sub_1000434AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_1000434CC()
{
  return swift_weakInit(v0 + 16, 0LL);
}

uint64_t sub_1000434F0()
{
  return swift_slowAlloc(4LL, -1LL);
}

id sub_100043500()
{
  *(_BYTE *)(v0 + 80) = *(_DWORD *)(v1 - 148);
  return *(id *)(v0 + 88);
}

uint64_t sub_100043510(uint64_t a1, uint64_t a2)
{
  return os_log(_:dso:log:type:_:)(a1, a2, 2LL, v3, v2, v4, v5);
}

uint64_t sub_100043528()
{
  return type metadata accessor for Date(0LL);
}

void sub_10004353C(uint64_t a1@<X8>)
{
}

uint64_t sub_100043548()
{
  return OSSignpostID.init(log:object:)(v1, v0);
}

void sub_100043554()
{
}

uint64_t sub_10004355C()
{
  return sub_10004344C(v0, *(void *)(v1 - 176));
}

uint64_t sub_10004356C()
{
  return type metadata accessor for Locker();
}

uint64_t sub_10004357C()
{
  return swift_unknownObjectWeakLoadStrong(v0);
}

uint64_t sub_100043584()
{
  return swift_release(v0);
}

uint64_t sub_10004358C()
{
  return v0;
}

uint64_t sub_10004359C()
{
  return swift_weakAssign(v0, v1);
}

id sub_1000435A8(void *a1)
{
  return objc_msgSend(a1, *(SEL *)(v2 + 952), v1);
}

uint64_t sub_1000435B4()
{
  return v0 + *(void *)(*(void *)v0 + 144LL);
}

uint64_t sub_1000435C8(uint64_t a1)
{
  return swift_getObjectType(a1);
}

uint64_t sub_1000435D4(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return Client.name.getter();
}

uint64_t sub_1000435E0@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(v3, a1, a2, v4);
}

uint64_t sub_1000435EC(uint64_t result)
{
  *(void *)(v1 - 160) = result;
  return result;
}

uint64_t sub_100043600(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v4 - v3;
  sub_10000941C((uint64_t *)&unk_1001D47C0);
  sub_100009B94();
  __chkstk_darwin(v6);
  sub_100009AEC();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for URLComponents(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100009AEC();
  uint64_t v14 = v13 - v12;
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  __chkstk_darwin(v15);
  sub_100009AEC();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = type metadata accessor for URL(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  sub_100009AEC();
  uint64_t v23 = v22 - v21;
  URLRequest.url.getter();
  if (sub_100010708(v18, 1LL, v19) == 1)
  {
    uint64_t v24 = &qword_1001D5ED0;
    uint64_t v25 = v18;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v23, v18, v19);
    URLComponents.init(url:resolvingAgainstBaseURL:)(v23, 1LL);
    if (sub_100010708(v9, 1LL, v10) == 1)
    {
      sub_100043AA0();
      uint64_t v24 = (uint64_t *)&unk_1001D47C0;
    }

    else
    {
      uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v14, v9, v10);
      uint64_t v29 = URLComponents.queryItems.getter(v28);
      if (!v29 || (uint64_t v30 = v29, swift_bridgeObjectRetain(a2), (v31 = sub_100043888(v30, a1, a2)) == 0))
      {
        sub_100043AB0();
        sub_100043AA0();
        return 0LL;
      }

      uint64_t v9 = v5;
      sub_100083008(v31, v5);
      swift_bridgeObjectRelease();
      uint64_t v32 = type metadata accessor for URLQueryItem(0LL);
      uint64_t v33 = sub_100010708(v5, 1LL, v32);
      if ((_DWORD)v33 != 1)
      {
        uint64_t v26 = URLQueryItem.value.getter(v33);
        sub_100043AB0();
        sub_100043AA0();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8LL))(v5, v32);
        return v26;
      }

      sub_100043AB0();
      sub_100043AA0();
      uint64_t v24 = (uint64_t *)&unk_1001D3180;
    }

    uint64_t v25 = v9;
  }

  sub_100014358(v25, v24);
  return 0LL;
}

uint64_t sub_100043888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a3;
  uint64_t v32 = type metadata accessor for URLQueryItem(0LL);
  uint64_t v6 = *(void *)(v32 - 8);
  uint64_t v7 = __chkstk_darwin(v32);
  uint64_t v31 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v26 - v10;
  uint64_t v12 = _swiftEmptyArrayStorage;
  uint64_t v33 = _swiftEmptyArrayStorage;
  uint64_t v30 = *(void *)(a1 + 16);
  if (!v30)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }

  v26[1] = v3;
  uint64_t v27 = a1;
  unint64_t v13 = 0LL;
  uint64_t v14 = v28;
  uint64_t v29 = a2;
  while (v13 < *(void *)(a1 + 16))
  {
    unint64_t v15 = (*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v16 = *(void *)(v6 + 72);
    uint64_t v17 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v6 + 16))(v11, a1 + v15 + v16 * v13, v32);
    uint64_t v18 = URLQueryItem.name.getter(v17);
    if (v18 == a2 && v19 == v14)
    {
      swift_bridgeObjectRelease();
LABEL_11:
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v22(v31, v11, v32);
      uint64_t v23 = v33;
      if ((swift_isUniquelyReferenced_nonNull_native(v33) & 1) == 0)
      {
        sub_1000AFA88(0, v23[2] + 1LL, 1);
        uint64_t v23 = v33;
      }

      unint64_t v25 = v23[2];
      unint64_t v24 = v23[3];
      if (v25 >= v24 >> 1)
      {
        sub_1000AFA88(v24 > 1, v25 + 1, 1);
        uint64_t v23 = v33;
      }

      void v23[2] = v25 + 1;
      uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v22)((char *)v23 + v15 + v25 * v16, v31, v32);
      uint64_t v33 = v23;
      a1 = v27;
      uint64_t v14 = v28;
      goto LABEL_16;
    }

    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, a2, v14, 0LL);
    swift_bridgeObjectRelease();
    if ((v21 & 1) != 0) {
      goto LABEL_11;
    }
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v32);
LABEL_16:
    ++v13;
    a2 = v29;
    if (v30 == v13)
    {
      uint64_t v12 = v33;
      goto LABEL_18;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_100043AA0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_100043AB0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100043AC4(uint64_t a1)
{
  return swift_unknownObjectRelease(a1);
}

id sub_100043AFC()
{
  return [v0 requestLocation];
}

void sub_100043B0C(uint64_t a1)
{
}

void sub_100043B18(uint64_t a1)
{
}

void sub_100043B24(uint64_t a1)
{
}

uint64_t sub_100043B30(uint64_t a1, uint64_t a2)
{
  return sub_100043B54(a1, a2, &OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationLatLng);
}

uint64_t sub_100043B3C(uint64_t a1, uint64_t a2)
{
  return sub_100043B54(a1, a2, &OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationSource);
}

uint64_t sub_100043B48(uint64_t a1, uint64_t a2)
{
  return sub_100043B54(a1, a2, &OBJC_IVAR____TtC7parsecd15LocationManager_lookupGeoLocationLatLng);
}

uint64_t sub_100043B54(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)(v3 + *a3);
  uint64_t v5 = v4[1];
  *uint64_t v4 = a1;
  v4[1] = a2;
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_100043B6C()
{
  uint64_t v0 = sub_10004A424();
  sub_10001683C();
  return v0;
}

uint64_t sub_100043BA0(int a1)
{
  return sub_10004713C(v1);
}

uint64_t sub_100043BD0()
{
  if (sub_1000471D8(OBJC_IVAR____TtC7parsecd15LocationManager_assembly)
    && (sub_1000478B0(),
        swift_unknownObjectRelease(),
        sub_1000C20C4(0LL, 0LL),
        sub_1000C27CC(),
        uint64_t v1 = v0,
        sub_1000471D0(),
        v1))
  {
    return sub_100046ED0(v1);
  }

  else
  {
    return 0LL;
  }

uint64_t sub_100043C4C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100043C78 + 4 * byte_10015F4A4[a1]))( 7565415LL,  0xE300000000000000LL);
}

uint64_t sub_100043C78()
{
  return 1819043171LL;
}

uint64_t sub_100043C88()
{
  return 1768319351LL;
}

uint64_t sub_100043C98()
{
  return 0x6E776F6E6B6E75LL;
}

uint64_t sub_100043CB0()
{
  return 0x6F6E676162LL;
}

uint64_t sub_100043CC4()
{
  return 0x6F6E2E72657375LL;
}

uint64_t sub_100043CDC()
{
  return 2003790963LL;
}

uint64_t sub_100043CEC()
{
  return 0x6E692E726F727265LL;
}

uint64_t sub_100043D0C()
{
  return sub_100047218();
}

uint64_t sub_100043D1C()
{
  return 0x6E752E726F727265LL;
}

uint64_t sub_100043D40()
{
  return sub_10004713C(v0);
}

void sub_100043D70(uint64_t a1)
{
  uint64_t v5 = sub_100010E34();
  sub_100047200();
  __chkstk_darwin(v6);
  sub_100010FCC();
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC7parsecd15LocationManager__lastLocationUpdateDate);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, a1, v5);
  swift_retain(v7);
  sub_10004B5E8(v2);
  sub_10001683C();
  sub_10004729C(a1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_100019F1C();
}

uint64_t sub_100043DF0()
{
  uint64_t v4 = *(void **)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue);
  *uint64_t v1 = v4;
  sub_1000471E0(v5, enum case for DispatchPredicate.onQueue(_:));
  id v6 = v4;
  LOBYTE(v4) = sub_1000471C8();
  uint64_t result = sub_100019E60(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  __break(1u);
  return result;
}

BOOL sub_100043E7C()
{
  uint64_t v0 = sub_100010E34();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_100009B6C();
  uint64_t v2 = sub_100043D40();
  double v3 = Date.timeIntervalSinceNow.getter(v2);
  sub_100019E60(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  return fabs(v3) >= 60.0;
}

void sub_100043F10()
{
}

id sub_100043F30()
{
  uint64_t v1 = *(dispatch_queue_s **)&v0[OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue];
  uint64_t v2 = sub_100009ACC((uint64_t)&unk_1001B3858, 24LL);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v0;
  uint64_t v3 = sub_100009ACC((uint64_t)&unk_1001B3880, 32LL);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = sub_1000470B4;
  *(void *)(v3 + sub_10000BDD4(v0 + 24) = v2;
  aBlock[4] = sub_10001B040;
  aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10007B5C8;
  id aBlock[3] = &unk_1001B3898;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v0;
  swift_retain(v3);
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 86LL, 115LL, 26LL, 1LL);
  id result = (id)swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    swift_release();
    v8.receiver = v5;
    v8.super_class = (Class)type metadata accessor for LocationManager(0LL);
    return objc_msgSendSuper2(&v8, "dealloc");
  }

  return result;
}

uint64_t sub_100044174()
{
  return type metadata accessor for LocationManager(0LL);
}

uint64_t type metadata accessor for LocationManager(uint64_t a1)
{
  uint64_t result = qword_1001D3220;
  if (!qword_1001D3220) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationManager);
  }
  return result;
}

void sub_1000441B4()
{
  uint64_t v3 = (uint8_t *)sub_100047134();
  sub_100047144();
  __chkstk_darwin(v4);
  sub_100010FCC();
  uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue];
  *uint64_t v1 = v5;
  (*(void (**)(void *, void, uint8_t *))(v2 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v3);
  id v6 = v5;
  char v7 = sub_1000471F8();
  sub_10004729C((uint64_t)v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once(&qword_1001D0540, sub_100034544);
    goto LABEL_6;
  }

  objc_super v8 = &v0[OBJC_IVAR____TtC7parsecd15LocationManager_locationService];
  if (*(void *)&v0[OBJC_IVAR____TtC7parsecd15LocationManager_locationService]) {
    goto LABEL_9;
  }
  uint64_t v3 = (uint8_t *)objc_allocWithZone(&OBJC_CLASS___CLLocationManager);
  id v9 = v6;
  uint64_t v10 = v0;
  uint64_t v11 = (uint64_t)v0;
  LOBYTE(sub_100010A1C(v1, v0) = (_BYTE)v3;
  id v12 = sub_100046E34(0xD000000000000034LL, 0x800000010016E790LL, v11, v6);
  if (v12)
  {
    unint64_t v13 = v12;
    [v12 setDynamicAccuracyReductionEnabled:1];
    [v13 setDesiredAccuracy:kCLLocationAccuracyKilometer];
    uint64_t v14 = *(void *)v8;
    *(void *)objc_super v8 = v13;
    *((void *)v8 + 1) = &off_1001B36E0;
    swift_unknownObjectRelease(v14);
    goto LABEL_9;
  }

  if (qword_1001D0540 != -1) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v15 = sub_100010ED4();
  uint64_t v16 = sub_100010E78(v15, (uint64_t)qword_1001EDC90);
  os_log_type_t v18 = sub_100047278(v16, v17);
  if (sub_100047154(v18))
  {
    uint64_t v19 = (_WORD *)sub_10001441C();
    sub_100047288(v19);
    sub_10001447C( (void *)&_mh_execute_header,  (os_log_s *)v6,  (os_log_type_t)v0,  "Exception initializing CLLocationManager",  v3);
    sub_100010C34((uint64_t)v3);
  }

LABEL_9:
  sub_100019F1C();
}

void sub_100044358()
{
  uint64_t v4 = *(void **)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue);
  *uint64_t v1 = v4;
  sub_1000471E0(v5, enum case for DispatchPredicate.onQueue(_:));
  id v6 = v4;
  LOBYTE(v4) = sub_1000471C8();
  sub_100019E60(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if ((v4 & 1) != 0)
  {
    char v7 = (void *)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_locationService);
    uint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_locationService);
    if (v8)
    {
      uint64_t v9 = v7[1];
      uint64_t ObjectType = swift_getObjectType(v8);
      uint64_t v11 = *(void (**)(void, uint64_t, uint64_t))(v9 + 16);
      swift_unknownObjectRetain(v8);
      v11(0LL, ObjectType, v9);
      swift_unknownObjectRelease();
    }

    void *v7 = 0LL;
    v7[1] = 0LL;
    swift_unknownObjectRelease();
    sub_100019F1C();
  }

  else
  {
    __break(1u);
  }

void sub_10004442C()
{
  uint64_t v2 = Notification.userInfo.getter();
  if (!v2)
  {
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    goto LABEL_5;
  }

  uint64_t v3 = v2;
  v20[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"bag");
  v20[1] = v4;
  AnyHashable.init<A>(_:)(v20);
  sub_10000BEF0((uint64_t)v19, v3, &v21);
  swift_bridgeObjectRelease();
  sub_10000BD34((uint64_t)v19);
  if (!*((void *)&v22 + 1))
  {
LABEL_5:
    sub_100014358((uint64_t)&v21, (uint64_t *)&unk_1001D32C0);
    goto LABEL_6;
  }

  sub_100014358((uint64_t)&v21, (uint64_t *)&unk_1001D32C0);
  v18[3] = *(void *)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue);
  uint64_t v5 = sub_100009ACC((uint64_t)&unk_1001B3808, 24LL);
  swift_unknownObjectWeakInit(v5 + 16, v0);
  v19[4] = sub_100047088;
  v19[5] = v5;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256LL;
  uint64_t v19[2] = sub_1000D2F18;
  v19[3] = &unk_1001B3820;
  _Block_copy(v19);
  uint64_t v6 = sub_10004724C();
  void v18[2] = v18;
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = swift_retain(v5);
  static DispatchQoS.unspecified.getter(v10);
  uint64_t v11 = sub_100009C54();
  v18[1] = v18;
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v21 = _swiftEmptyArrayStorage;
  unint64_t v15 = sub_100019CD0();
  uint64_t v16 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
  unint64_t v17 = sub_10000945C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v16, v17, v11, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v14, v1);
  _Block_release(v1);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release();
  sub_10001683C();
LABEL_6:
  sub_100009AA0();
}

void sub_100044688(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = (char *)Strong;
    uint64_t v4 = sub_100043BD0();
    if (!v4)
    {
LABEL_7:

      return;
    }

    uint64_t v5 = *(void *)(v4 + 16);
    swift_bridgeObjectRelease();
    if (v5)
    {
      uint64_t v6 = *(void **)&v3[OBJC_IVAR____TtC7parsecd15LocationManager_lastGeoLocationUpdate];
      if (v6)
      {
        id v7 = v6;
        sub_100044894(v7);
      }

      sub_1000441B4();
      sub_100044A90();
      goto LABEL_7;
    }

    sub_100044358();
    uint64_t v8 = sub_10000941C(&qword_1001D0C10);
    uint64_t v9 = swift_allocObject(v8, 112LL, 7LL);
    *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_10015D580;
    *(void *)(v9 + sub_10000BDD4(v0 + 56) = &type metadata for String;
    unint64_t v10 = sub_100042FE8();
    *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 32) = 0x6F6E676162LL;
    *(void *)(v9 + 40) = 0xE500000000000000LL;
    *(void *)(v9 + 96) = &type metadata for String;
    *(void *)(v9 + 104) = v10;
    *(void *)(v9 + 64) = v10;
    *(void *)(v9 + 72) = 7105633LL;
    *(void *)(v9 + 80) = 0xE300000000000000LL;
    uint64_t v11 = String.init(format:_:)(0x40252C4025LL, 0xE500000000000000LL);
    sub_1000447B4(v11, v12);

    swift_bridgeObjectRelease();
  }

void sub_1000447B4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = sub_100047134();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100009B54();
  uint64_t v8 = *(void **)(v2 + OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue);
  *uint64_t v3 = v8;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v6);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v3);
  (*(void (**)(void *, uint64_t))(v7 + 8))(v3, v6);
  if ((v8 & 1) != 0)
  {
    sub_100043B0C(0LL);
    sub_100043B24(0LL);
    sub_100043B48(0LL, 0xE000000000000000LL);
    sub_100043B30(0LL, 0xE000000000000000LL);
    swift_bridgeObjectRetain(a2);
    sub_100043B3C(a1, a2);
    sub_10002FBC0();
  }

  else
  {
    __break(1u);
  }

void sub_100044894(void *a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = (os_log_s *)sub_100047134();
  sub_100047144();
  __chkstk_darwin(v7);
  sub_100010FCC();
  uint64_t v8 = *(void **)((char *)v4 + OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue);
  *uint64_t v2 = v8;
  sub_1000471F0( (uint64_t)v2,  enum case for DispatchPredicate.onQueue(_:),  (uint64_t (*)(uint64_t, uint64_t, uint64_t))p_ivar_lyt[13]);
  id v9 = v8;
  sub_1000471F8();
  uint64_t v10 = sub_1000471AC();
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    swift_once(&qword_1001D0540, sub_100034544);
    goto LABEL_9;
  }

  p_ivar_lyt = &SessionEnumerator.ivar_lyt;
  unsigned int v11 = sub_100047258(v10, "type") - 1;
  if (v11 > 0xC) {
    LOBYTE(v2) = 3;
  }
  else {
    LOBYTE(v2) = byte_10015F5B8[v11];
  }
  uint64_t v6 = v4;
  uint64_t v12 = sub_100043BD0();
  if (v12)
  {
    uint64_t v6 = (os_log_s *)v12;
    uint64_t v13 = sub_100043C4C(v2);
    LOBYTE(v2) = v14;
    char v15 = sub_100050F1C(v13, v14, (uint64_t)v6);
    sub_100009B3C();
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
    {
      sub_100045D74(a1);
      goto LABEL_12;
    }
  }

  if (qword_1001D0540 != -1) {
    goto LABEL_14;
  }
LABEL_9:
  uint64_t v16 = sub_100010ED4();
  sub_100010E78(v16, (uint64_t)qword_1001EDC90);
  os_log_type_t v17 = sub_100014588();
  if (sub_10003EFD0(v17))
  {
    os_log_type_t v18 = (uint8_t *)sub_10001441C();
    *(_WORD *)os_log_type_t v18 = 0;
    sub_10001447C( (void *)&_mh_execute_header,  v6,  (os_log_type_t)v2,  "LocationManager discarded update from a disallowed source.",  v18);
    sub_100010C34((uint64_t)v18);
  }

  uint64_t v19 = sub_10000941C(&qword_1001D0C10);
  uint64_t v20 = sub_100009ACC(v19, 112LL);
  *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_10015D580;
  *(void *)(v20 + sub_10000BDD4(v0 + 56) = &type metadata for String;
  unint64_t v21 = sub_100042FE8();
  *(void *)(v20 + 64) = v21;
  *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 32) = 0x6F6E676162LL;
  *(void *)(v20 + 40) = 0xE500000000000000LL;
  unsigned int v22 = sub_100047258(v21, (const char *)p_ivar_lyt[504]);
  *(void *)(v20 + 96) = &type metadata for UInt32;
  *(void *)(v20 + 104) = &protocol witness table for UInt32;
  *(_DWORD *)(v20 + 72) = v22;
  uint64_t v23 = sub_100047240(0x64252C4025LL);
  sub_1000447B4(v23, v24);
  sub_1000110A8();
LABEL_12:
  sub_100019F1C();
}

void sub_100044A90()
{
  char v4 = v3;
  uint64_t v5 = sub_100009ACC((uint64_t)&unk_1001B3768, 25LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v0;
  *(_BYTE *)(v5 + sub_10000BDD4(v0 + 24) = v4;
  v14[5] = sub_100046FB4;
  v14[6] = v5;
  v14[1] = _NSConcreteStackBlock;
  v14[2] = 1107296256LL;
  uint64_t v6 = sub_100009BBC((uint64_t)sub_1000D2F18);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100009B54();
  static DispatchQoS.unspecified.getter(v0);
  uint64_t v9 = sub_100009C54();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_1000270AC();
  v14[0] = _swiftEmptyArrayStorage;
  unint64_t v11 = sub_100019CD0();
  uint64_t v12 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
  unint64_t v13 = sub_10000945C();
  dispatch thunk of SetAlgebra.init<A>(_:)(v14, v12, v13, v9, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v1, v2, v6);
  _Block_release(v6);
  sub_100047234(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  sub_10004729C(v1, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  swift_release();
  sub_100009AA0();
}

void sub_100044C90()
{
  uint64_t v4 = sub_100009C54();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100009B6C();
  static DispatchWorkItemFlags.barrier.getter();
  *(void *)(sub_100009ACC((uint64_t)&unk_1001B37B8, 24LL) + swift_weakDestroy(v0 + 16) = v0;
  sub_100009BBC((uint64_t)sub_1000D2F18);
  uint64_t v6 = sub_10004724C();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1000270AC();
  static DispatchQoS.unspecified.getter(v0);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v3, v1, v2);
  _Block_release(v2);
  sub_100047234(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  sub_100019E60(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  swift_release();
  sub_100009AA0();
}

void *sub_100044DA0(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocation);
  if (result)
  {
    [result coordinate];
    uint64_t v3 = v2;
    uint64_t v5 = v4;
    uint64_t v6 = sub_10000941C(&qword_1001D0C10);
    uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
    *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_10015D580;
    *(void *)(v7 + sub_10000BDD4(v0 + 56) = &type metadata for Double;
    *(void *)(v7 + 64) = &protocol witness table for Double;
    *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 32) = v3;
    *(void *)(v7 + 96) = &type metadata for Double;
    *(void *)(v7 + 104) = &protocol witness table for Double;
    *(void *)(v7 + 72) = v5;
    uint64_t v8 = String.init(format:_:)(0x66252C6625LL, 0xE500000000000000LL);
    return (void *)sub_100043B48(v8, v9);
  }

  return result;
}

uint64_t sub_100044EE0()
{
  uint64_t v7 = v1;
  if (v1)
  {
    uint64_t v8 = sub_100046F30(v1);
    if (v9 >> 60 != 15)
    {
      uint64_t v15 = v8;

      return v15;
    }

    if (qword_1001D0540 != -1) {
      swift_once(&qword_1001D0540, sub_100034544);
    }
    uint64_t v10 = sub_100010ED4();
    unint64_t v11 = (os_log_s *)sub_100010E78(v10, (uint64_t)qword_1001EDC90);
    os_log_type_t v13 = static os_log_type_t.error.getter(v11, v12);
    if (sub_100010DE4(v13))
    {
      uint64_t v14 = (uint8_t *)sub_10001441C();
      *(_WORD *)uint64_t v14 = 0;
      sub_10001447C( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "nil ClientMetadata received from GEOMapService",  v14);
      sub_100010C34((uint64_t)v14);
    }
  }

  else
  {
    if (qword_1001D0540 != -1) {
      swift_once(&qword_1001D0540, sub_100034544);
    }
    uint64_t v2 = sub_100010ED4();
    uint64_t v3 = sub_100010E78(v2, (uint64_t)qword_1001EDC90);
    os_log_type_t v5 = sub_100047278(v3, v4);
    if (sub_100047154(v5))
    {
      uint64_t v6 = (_WORD *)sub_10001441C();
      sub_100047288(v6);
      sub_10001447C((void *)&_mh_execute_header, 0LL, v0, "GEOServices returned nil GEOMapService", 0LL);
      sub_100010C34(0LL);
    }
  }

  return 0LL;
}

id sub_100045060@<X0>(void *a1@<X8>)
{
  id result = [(id)objc_opt_self(GEOMapService) sharedService];
  *a1 = result;
  return result;
}

uint64_t sub_1000450A0()
{
  uint64_t result = sub_100044EE0();
  if (v1 >> 60 != 15)
  {
    uint64_t v2 = result;
    unint64_t v3 = v1;
    if (sub_1000471D8(OBJC_IVAR____TtC7parsecd15LocationManager_assembly))
    {
      id v4 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
      uint64_t v5 = sub_10000941C((uint64_t *)&unk_1001D32A0);
      uint64_t inited = swift_initStackObject(v5, v12);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
      v11[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"context");
      v11[1] = v7;
      AnyHashable.init<A>(_:)(v11);
      uint64_t v8 = sub_100047198();
      *(void *)(inited + 96) = v8;
      unint64_t v9 = sub_10001B468((void *)(inited + 72));
      *unint64_t v9 = v2;
      v9[1] = v3;
      swift_storeEnumTagMultiPayload(v9, v8, 3LL);
      sub_100014244(v2, v3);
      uint64_t v10 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
      sub_100047170(v10);
      sub_1000471D0();

      return sub_100010A1C(v2, v3);
    }

    else
    {
      return sub_100010A1C(v2, v3);
    }
  }

  return result;
}

uint64_t sub_10004522C()
{
  id v3 = [(id)objc_opt_self(GEOCountryConfiguration) sharedConfiguration];
  if (v3)
  {
    id v4 = v3;
    int v14 = 1;
    id v5 = [v3 countryCodeWithSource:&v14 updatedAtTime:0];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    }

    else
    {

      uint64_t v7 = 0LL;
    }

    sub_10004735C(v14);
  }

  else
  {
    if (qword_1001D0540 != -1) {
      swift_once(&qword_1001D0540, sub_100034544);
    }
    uint64_t v8 = sub_100010ED4();
    uint64_t v9 = sub_100010E78(v8, (uint64_t)qword_1001EDC90);
    os_log_type_t v11 = sub_100047278(v9, v10);
    if (sub_100047154(v11))
    {
      uint64_t v12 = (_WORD *)sub_10001441C();
      sub_100047288(v12);
      sub_10001447C((void *)&_mh_execute_header, v0, v1, "nil GEOCountryConfiguration received from GEOServices", v2);
      sub_100010C34((uint64_t)v2);
    }

    return 0LL;
  }

  return v7;
}

void sub_10004539C()
{
  uint64_t v46 = v1;
  uint64_t v47 = v2;
  uint64_t v3 = type metadata accessor for PegasusContext(0LL);
  sub_100009B94();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v45[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v45[-1] - v8;
  uint64_t v10 = sub_1000471D8(OBJC_IVAR____TtC7parsecd15LocationManager_assembly);
  if (!v10) {
    goto LABEL_30;
  }
  uint64_t v11 = v10;
  uint64_t v12 = sub_10004522C();
  if (v13 != 1)
  {
    uint64_t v19 = v12;
    uint64_t v20 = v13;
    os_log_type_t v21 = v14;
    sub_10004A274((uint64_t)v9);
    unsigned int v22 = &v9[*(int *)(v3 + 80)];
    uint64_t v24 = *(void *)v22;
    uint64_t v23 = *((void *)v22 + 1);
    sub_100047294();
    sub_1000152F4((uint64_t)v9);
    if (v23)
    {
      if (!v20) {
        goto LABEL_27;
      }
      if (v24 == v19 && v23 == v20)
      {
        sub_100009B3C();
      }

      else
      {
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v23, v19, v20, 0LL);
        sub_100009B3C();
        if ((v26 & 1) == 0) {
          goto LABEL_28;
        }
      }
    }

    else if (v20)
    {
      goto LABEL_28;
    }

    sub_10004A274((uint64_t)v7);
    uint64_t v27 = &v7[*(int *)(v3 + 84)];
    uint64_t v29 = *(void *)v27;
    uint64_t v28 = *((void *)v27 + 1);
    sub_100047294();
    sub_1000152F4((uint64_t)v7);
    uint64_t v30 = sub_1000472C4(v21);
    if (v28)
    {
      if (v29 == v30 && v28 == v31)
      {
        sub_100009B3C();
        swift_bridgeObjectRelease();
LABEL_32:
        sub_100046EBC(v19, v20);
        if (qword_1001D0540 != -1) {
          swift_once(&qword_1001D0540, sub_100034544);
        }
        uint64_t v41 = sub_100010ED4();
        id v34 = (id)sub_100010E78(v41, (uint64_t)qword_1001EDC90);
        os_log_type_t v42 = static os_log_type_t.default.getter();
        if (!sub_100010DE4(v42))
        {

          sub_10001449C();
          goto LABEL_30;
        }

        uint64_t v43 = (uint8_t *)sub_10001441C();
        *(_WORD *)uint64_t v43 = 0;
        sub_10001447C((void *)&_mh_execute_header, (os_log_s *)v34, v21, "received redundant CountryCode update", v43);
        sub_100010C34((uint64_t)v43);
LABEL_29:
        sub_10001449C();

LABEL_30:
        sub_100009AA0();
        return;
      }

      char v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v28, v30, v31, 0LL);
      sub_100009B3C();
      swift_bridgeObjectRelease();
      if ((v33 & 1) != 0) {
        goto LABEL_32;
      }
LABEL_28:
      id v34 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
      uint64_t v35 = sub_10000941C((uint64_t *)&unk_1001D32A0);
      uint64_t v36 = sub_1000472BC(v35);
      *(_OWORD *)(v36 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
      v45[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"context");
      v45[1] = v37;
      AnyHashable.init<A>(_:)(v45);
      uint64_t v38 = sub_100047198();
      *(void *)(v36 + 96) = v38;
      uint64_t v39 = sub_10001B468((void *)(v36 + 72));
      *uint64_t v39 = v19;
      v39[1] = v20;
      *((_BYTE *)v39 + swift_weakDestroy(v0 + 16) = v21;
      swift_storeEnumTagMultiPayload(v39, v38, 4LL);
      uint64_t v40 = Dictionary.init(dictionaryLiteral:)( v36,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
      sub_1000C5160((uint64_t)@"com.apple.parsecd.contextUpdate", 0LL, v40, v34);
      goto LABEL_29;
    }

void sub_1000457A0(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (a3)
  {
    static Notification._unconditionallyBridgeFromObjectiveC(_:)(a3);
    uint64_t v9 = sub_100047280();
    uint64_t v10 = 0LL;
  }

  else
  {
    uint64_t v9 = sub_100047280();
    uint64_t v10 = 1LL;
  }

  sub_100009654(v4, v10, 1LL, v9);
  id v11 = a1;
  a4();

  sub_100014358(v4, &qword_1001D1DE0);
  sub_1000110D4();
}

void sub_100045840()
{
}

void sub_1000458A0(uint64_t a1, char a2)
{
  if ((sub_100043DF0() & 1) != 0)
  {
    if (qword_1001D0540 != -1) {
      swift_once(&qword_1001D0540, sub_100034544);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_1000093D0(v4, (uint64_t)qword_1001EDC90);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.default.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (_DWORD *)swift_slowAlloc(12LL, -1LL);
      swift_slowAlloc(32LL, -1LL);
      *uint64_t v8 = 136315138;
      __asm { BR              X10 }
    }

    if (!*(void *)(a1 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocation))
    {
      uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationSource);
      uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationSource + 8);
      BOOL v11 = v9 == 0x6E692E726F727265LL && v10 == 0xEA00000000007469LL;
      if (v11
        || (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, 0x6E692E726F727265LL, 0xEA00000000007469LL, 0LL) & 1) != 0)
      {
        sub_1000447B4(2003790963LL, 0xE400000000000000LL);
      }
    }

    uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC7parsecd15LocationManager_locationService);
    if (v12)
    {
      uint64_t v13 = *(void *)(a1 + OBJC_IVAR____TtC7parsecd15LocationManager_locationService + 8);
      uint64_t ObjectType = swift_getObjectType(v12);
      uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v13 + 32);
      swift_unknownObjectRetain(v12);
      v15(ObjectType, v13);
      swift_unknownObjectRelease();
    }
  }

void sub_100045B54()
{
  uint64_t v3 = v2;
  sub_10000941C(&qword_1001D32B0);
  sub_100009B94();
  __chkstk_darwin(v4);
  sub_100009B6C();
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocation);
  uint64_t v6 = v0 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationAge;
  swift_beginAccess(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationAge, &v27, 0LL, 0LL);
  sub_100026490(v6, v1);
  os_log_type_t v7 = *(void **)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_geoPlacemark);
  uint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationLatLng + 8);
  uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationSource + 8);
  uint64_t v25 = *(void *)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationSource);
  uint64_t v26 = *(void *)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationLatLng);
  uint64_t v10 = *(void *)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_lookupGeoLocationLatLng + 8);
  uint64_t v24 = *(void *)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_lookupGeoLocationLatLng);
  id v11 = v7;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  id v12 = v5;
  int v13 = sub_100043B6C();
  unint64_t v23 = sub_100045CCC(v13);
  unint64_t v15 = v14;
  uint64_t v16 = sub_100043BD0();
  if (v16) {
    os_log_type_t v17 = (void *)v16;
  }
  else {
    os_log_type_t v17 = _swiftEmptyArrayStorage;
  }
  *uint64_t v3 = v5;
  os_log_type_t v18 = (int *)type metadata accessor for LocationContext(0LL);
  sub_100047014(v1, (uint64_t)v3 + v18[5]);
  *(void *)((char *)v3 + v18[6]) = v7;
  uint64_t v19 = (void *)((char *)v3 + v18[7]);
  *uint64_t v19 = v26;
  v19[1] = v8;
  uint64_t v20 = (void *)((char *)v3 + v18[8]);
  *uint64_t v20 = v25;
  v20[1] = v9;
  os_log_type_t v21 = (void *)((char *)v3 + v18[9]);
  *os_log_type_t v21 = v24;
  v21[1] = v10;
  unsigned int v22 = (void *)((char *)v3 + v18[10]);
  *unsigned int v22 = v23;
  v22[1] = v15;
  *(void *)((char *)v3 + v18[11]) = v17;
  sub_100009AA0();
}

unint64_t sub_100045CCC(int a1)
{
  unint64_t result = 0xD000000000000010LL;
  switch(a1)
  {
    case 0:
      unint64_t result = 0x7265746544746F6ELL;
      break;
    case 1:
      unint64_t result = 0x7463697274736572LL;
      break;
    case 2:
      unint64_t result = 0x6465696E6564LL;
      break;
    case 3:
      return result;
    default:
      unint64_t result = 0x726F727265LL;
      break;
  }

  return result;
}

uint64_t sub_100045D74(void *a1)
{
  uint64_t v5 = v1;
  uint64_t v75 = sub_100010E34();
  sub_100009B94();
  __chkstk_darwin(v7);
  sub_100009B54();
  sub_10000941C(&qword_1001D32B0);
  sub_100009B94();
  __chkstk_darwin(v8);
  sub_1000270AC();
  uint64_t v9 = sub_100047134();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100009B6C();
  id v11 = *(void **)(v1 + OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue);
  *uint64_t v2 = v11;
  sub_1000471F0( (uint64_t)v2,  enum case for DispatchPredicate.onQueue(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 104));
  id v12 = v11;
  LOBYTE(v11) = sub_1000471C8();
  sub_10004726C(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  if ((v11 & 1) != 0)
  {
    if (qword_1001D0540 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_1001D0540, sub_100034544);
LABEL_3:
  uint64_t v13 = sub_100010ED4();
  uint64_t v14 = sub_1000093D0(v13, (uint64_t)qword_1001EDC90);
  id v15 = a1;
  uint64_t v74 = (os_log_s *)v14;
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    os_log_type_t v18 = (uint8_t *)sub_100009B20(12LL);
    uint64_t v73 = v5;
    *(double *)&uint64_t v19 = COERCE_DOUBLE(sub_100009B20(32LL));
    double v77 = *(double *)&v19;
    *(_DWORD *)os_log_type_t v18 = 136642819;
    uint64_t v20 = sub_10000941C(&qword_1001D32B8);
    uint64_t v21 = Optional.debugDescription.getter(v20);
    uint64_t v76 = sub_1000307E0(v21, v22, (uint64_t *)&v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v18 + 4);

    sub_100009B3C();
    sub_100014564((void *)&_mh_execute_header, v16, v17, "Setting new location %{sensitive}s", v18);
    swift_arrayDestroy(v19, 1LL);
    uint64_t v23 = v19;
    uint64_t v5 = v73;
    sub_100010C34(v23);
    sub_100010C34((uint64_t)v18);
  }

  else
  {
  }

  id v24 = v15;
  sub_100043B0C((uint64_t)a1);
  if (!a1) {
    __break(1u);
  }
  id v25 = [v24 timestamp];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100009654(v4, 0LL, 1LL, v75);
  uint64_t v26 = v5 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationAge;
  swift_beginAccess(v5 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationAge, &v77, 33LL, 0LL);
  sub_10002D564(v4, v26);
  uint64_t v27 = swift_endAccess(&v77);
  Date.init()(v27);
  sub_100043D70(v3);
  uint64_t v28 = *(void **)(v5 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocation);
  if (v28)
  {
    [v28 coordinate];
    double v30 = v29;
    double v32 = v31;
    uint64_t v33 = sub_10000941C(&qword_1001D0C10);
    uint64_t v34 = sub_100009ACC(v33, 112LL);
    *(_OWORD *)(v34 + swift_weakDestroy(v0 + 16) = xmmword_10015D580;
    unsigned int v35 = sub_100047258(v34, "type") - 1;
    if (v35 > 0xC) {
      unsigned __int8 v36 = 3;
    }
    else {
      unsigned __int8 v36 = byte_10015F5B8[v35];
    }
    uint64_t v37 = sub_100043C4C(v36);
    uint64_t v39 = v38;
    *(void *)(v34 + sub_10000BDD4(v0 + 56) = &type metadata for String;
    *(void *)(v34 + 64) = sub_100042FE8();
    *(void *)(v34 + swift_unknownObjectWeakDestroy(v0 + 32) = v37;
    *(void *)(v34 + 40) = v39;
    [v24 horizontalAccuracy];
    *(void *)(v34 + 96) = &type metadata for Double;
    *(void *)(v34 + 104) = &protocol witness table for Double;
    *(void *)(v34 + 72) = v40;
    uint64_t v41 = sub_100047240(0x66252C4025LL);
    sub_100043B3C(v41, v42);
    id v43 = objc_msgSend( (id)objc_opt_self(GEOLocationShifter),  "isLocationShiftRequiredForCoordinate:",  v30,  v32);
    if ((_DWORD)v43)
    {
      uint64_t v44 = v5;
      id v45 = [objc_allocWithZone(GEOLocationShifter) init];
      double v77 = 0.0;
      double v78 = 0.0;
      uint64_t v76 = 0LL;
      id v46 = objc_msgSend(v45, "shiftCoordinate:accuracy:shiftedCoordinate:shiftedAccuracy:", &v77, &v76, v30, v32, 0.0);
      int v47 = (int)v46;
      uint64_t v48 = Logger.logObject.getter(v46);
      uint64_t v50 = (os_log_s *)v48;
      if (v47)
      {
        os_log_type_t v51 = static os_log_type_t.debug.getter();
        if (sub_10003EFD0(v51))
        {
          uint64_t v52 = (uint8_t *)sub_10001441C();
          *(_WORD *)uint64_t v52 = 0;
          sub_10001447C( (void *)&_mh_execute_header,  v50,  (os_log_type_t)v39,  "Shifted coordinates on location update",  v52);
          sub_100010C34((uint64_t)v52);
        }

        sub_100043B0C((uint64_t)[objc_allocWithZone(CLLocation) initWithLatitude:v77 longitude:v78]);
        uint64_t v53 = (__n128 *)sub_100009ACC(v33, 112LL);
        uint64_t v54 = sub_10004710C(v53, (__n128)xmmword_10015D580);
        sub_100043B30(v54, v55);
      }

      else
      {
        os_log_type_t v61 = static os_log_type_t.error.getter(v48, v49);
        if (sub_10003EFD0(v61))
        {
          id v62 = (uint8_t *)sub_10001441C();
          *(_WORD *)id v62 = 0;
          sub_10001447C( (void *)&_mh_execute_header,  v50,  (os_log_type_t)v39,  "ShiftCoordinate failed to shift coordinates",  v62);
          sub_100010C34((uint64_t)v62);
        }
      }

      uint64_t v5 = v44;
    }

    else
    {
      Logger.logObject.getter(v43);
      os_log_type_t v56 = sub_100014588();
      if (sub_10003EFD0(v56))
      {
        uint64_t v57 = (uint8_t *)sub_10001441C();
        *(_WORD *)uint64_t v57 = 0;
        sub_10001447C( (void *)&_mh_execute_header,  v74,  (os_log_type_t)v39,  "isLocationShiftRequired returned false. Location shifting not required!",  v57);
        sub_100010C34((uint64_t)v57);
      }

      uint64_t v58 = sub_100009ACC(v33, 112LL);
      *(_OWORD *)(v58 + swift_weakDestroy(v0 + 16) = xmmword_10015D580;
      *(void *)(v58 + sub_10000BDD4(v0 + 56) = &type metadata for Double;
      *(void *)(v58 + 64) = &protocol witness table for Double;
      *(double *)(v58 + swift_unknownObjectWeakDestroy(v0 + 32) = v30;
      *(void *)(v58 + 96) = &type metadata for Double;
      *(void *)(v58 + 104) = &protocol witness table for Double;
      *(double *)(v58 + 72) = v32;
      uint64_t v59 = String.init(format:_:)(0x66252C6625LL, 0xE500000000000000LL);
      sub_100043B30(v59, v60);
    }
  }

  uint64_t v63 = *(void *)(v5 + OBJC_IVAR____TtC7parsecd15LocationManager_lookupGeoLocationLatLng);
  uint64_t v64 = *(void *)(v5 + OBJC_IVAR____TtC7parsecd15LocationManager_lookupGeoLocationLatLng + 8);
  sub_100047294();
  uint64_t v65 = String.count.getter(v63, v64);
  uint64_t result = sub_100009B3C();
  if (!v65)
  {
    [v24 coordinate];
    CLLocationCoordinate2DMake(trunc(v67), trunc(v68));
    uint64_t v69 = sub_10000941C(&qword_1001D0C10);
    uint64_t v70 = (__n128 *)sub_100009ACC(v69, 112LL);
    uint64_t v71 = sub_10004710C(v70, (__n128)xmmword_10015D580);
    return sub_100043B48(v71, v72);
  }

  return result;
}

void sub_1000463D4()
{
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  sub_100047134();
  sub_100047144();
  __chkstk_darwin(v6);
  sub_100010FCC();
  uint64_t v7 = *(void **)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue);
  *uint64_t v1 = v7;
  sub_1000471F0( (uint64_t)v1,  enum case for DispatchPredicate.onQueue(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104));
  id v8 = v7;
  sub_1000471F8();
  sub_1000471AC();
  if ((v7 & 1) != 0)
  {
    if (qword_1001D0540 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_1001D0540, sub_100034544);
LABEL_3:
  uint64_t v9 = sub_100010ED4();
  uint64_t v10 = (os_log_s *)sub_1000093D0(v9, (uint64_t)qword_1001EDC90);
  uint64_t v11 = swift_bridgeObjectRetain_n(v5, 2LL);
  Logger.logObject.getter(v11);
  os_log_type_t v12 = sub_100014588();
  unint64_t v13 = (unint64_t)v5 >> 62;
  if (os_log_type_enabled(v10, v12))
  {
    uint64_t v14 = (uint8_t *)sub_100009B20(12LL);
    *(_DWORD *)uint64_t v14 = 134217984;
    if (v13)
    {
      if (v5 < 0) {
        uint64_t v34 = v5;
      }
      else {
        uint64_t v34 = v5 & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_100010E2C();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v34);
      sub_1000110A8();
    }

    else
    {
      uint64_t v15 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    sub_1000110A8();
    uint64_t v35 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v14 + 4);
    sub_1000110A8();
    sub_100014564((void *)&_mh_execute_header, v10, v12, "LocationManager got an update of %ld locations.", v14);
    sub_100010C34((uint64_t)v14);
  }

  else
  {

    swift_bridgeObjectRelease_n(v5, 2LL);
  }

  if (!v13)
  {
    uint64_t v16 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_100010E2C();
    if (v16) {
      goto LABEL_10;
    }
LABEL_25:
    sub_1000110A8();
    goto LABEL_26;
  }

  if (v5 < 0) {
    uint64_t v33 = v5;
  }
  else {
    uint64_t v33 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_100010E2C();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v33);
  if (!v16) {
    goto LABEL_25;
  }
LABEL_10:
  BOOL v17 = __OFSUB__(v16, 1LL);
  unint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
    goto LABEL_28;
  }

  sub_100030F20(v18, (v5 & 0xC000000000000001LL) == 0, v5);
  if ((v5 & 0xC000000000000001LL) != 0)
  {
LABEL_28:
    id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v5);
    goto LABEL_13;
  }

  id v19 = *(id *)(v5 + 8 * v18 + 32);
LABEL_13:
  uint64_t v20 = v19;
  sub_1000110A8();
  [v20 horizontalAccuracy];
  if (v21 >= 0.0 && swift_unknownObjectWeakLoadStrong(v3 + OBJC_IVAR____TtC7parsecd15LocationManager_assembly))
  {
    id v22 = v20;
    sub_100043B18((uint64_t)v20);
    sub_100044894(v22);
    Logger.logObject.getter(v23);
    os_log_type_t v24 = sub_100014588();
    if (sub_10003EFD0(v24))
    {
      id v25 = (uint8_t *)sub_10001441C();
      *(_WORD *)id v25 = 0;
      sub_10001447C( (void *)&_mh_execute_header,  v10,  (os_log_type_t)v10,  "Posting PARContextUpdate for locationState",  v25);
      sub_100010C34((uint64_t)v25);
    }

    id v26 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    uint64_t v27 = sub_10000941C((uint64_t *)&unk_1001D32A0);
    uint64_t v28 = sub_1000472BC(v27);
    *(_OWORD *)(v28 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"context");
    uint64_t v36 = v29;
    sub_1000472A4();
    uint64_t v30 = sub_100047198();
    *(void *)(v28 + 96) = v30;
    double v31 = sub_10001B468((void *)(v28 + 72));
    sub_1000472B0();
    sub_100047210((uint64_t)v31, v30);
    uint64_t v32 = Dictionary.init(dictionaryLiteral:)( v28,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    sub_1000C5160((uint64_t)@"com.apple.parsecd.contextUpdate", 0LL, v32, v26);

    sub_1000471D0();
  }

  else
  {
  }

void sub_100046780()
{
}

void sub_1000467B8(uint64_t a1)
{
  v4[0] = &unk_10015F518;
  v4[1] = &unk_10015F530;
  void v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = &unk_10015F548;
  void v4[5] = &unk_10015F548;
  void v4[6] = &unk_10015F548;
  v4[7] = &unk_10015F560;
  sub_100026D28(319LL);
  if (v3 <= 0x3F)
  {
    void v4[8] = *(void *)(v2 - 8) + 64LL;
    void v4[9] = &unk_10015F560;
    void v4[10] = &unk_10015F560;
    v4[11] = &unk_10015F560;
    v4[12] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[13] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_updateClassMetadata2(a1, 256LL, 14LL, v4, a1 + 80);
  }

void sub_100046870()
{
}

void sub_1000468E0(uint64_t a1, int a2)
{
  uint64_t v6 = sub_100047134();
  sub_100047144();
  __chkstk_darwin(v7);
  sub_100010FCC();
  id v8 = *(void **)(v2 + OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue);
  *unint64_t v3 = v8;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v6);
  id v9 = v8;
  LOBYTE(v8) = sub_1000471F8();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v6);
  if ((v8 & 1) != 0)
  {
    if (sub_1000471D8(OBJC_IVAR____TtC7parsecd15LocationManager_assembly))
    {
      unsigned int v10 = [(id)objc_opt_self(CLLocationManager) locationServicesEnabled];
      sub_100043BA0(a2);
      if (v10 && a2 == 3) {
        sub_100044A90();
      }
      else {
        sub_1000447B4(0x6F6E2E72657375LL, 0xE700000000000000LL);
      }
      id v11 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
      uint64_t v12 = sub_10000941C((uint64_t *)&unk_1001D32A0);
      uint64_t inited = swift_initStackObject(v12, v19);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
      v18[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"context");
      v18[1] = v14;
      AnyHashable.init<A>(_:)(v18);
      uint64_t v15 = sub_100047198();
      *(void *)(inited + 96) = v15;
      uint64_t v16 = sub_10001B468((void *)(inited + 72));
      sub_100045B54();
      sub_100047210((uint64_t)v16, v15);
      uint64_t v17 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
      sub_1000C5160((uint64_t)@"com.apple.parsecd.contextUpdate", 0LL, v17, v11);
      sub_10001449C();
    }

    sub_10002FBC0();
  }

  else
  {
    __break(1u);
  }

void sub_100046B2C()
{
  uint64_t v4 = v3;
  sub_100047134();
  sub_100047144();
  __chkstk_darwin(v5);
  sub_100009B6C();
  uint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue);
  *uint64_t v1 = v6;
  sub_1000471F0( (uint64_t)v1,  enum case for DispatchPredicate.onQueue(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104));
  id v7 = v6;
  LOBYTE(String.hash(into:)(v4, v5, v6) = sub_1000471C8();
  sub_10004726C(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once(&qword_1001D0540, sub_100034544);
    goto LABEL_4;
  }

  if (!swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_assembly)) {
    goto LABEL_8;
  }
  if (qword_1001D0540 != -1) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v8 = sub_100010ED4();
  sub_1000093D0(v8, (uint64_t)qword_1001EDC90);
  uint64_t v9 = swift_errorRetain(v4);
  unsigned int v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v12 = static os_log_type_t.error.getter(v10, v11);
  if (os_log_type_enabled(v10, v12))
  {
    unint64_t v13 = (uint8_t *)sub_100009B20(12LL);
    uint64_t v14 = (void *)sub_100009B20(8LL);
    *(_DWORD *)unint64_t v13 = 138412290;
    uint64_t v15 = _convertErrorToNSError(_:)(v4);
    uint64_t v25 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v13 + 4);
    *uint64_t v14 = v15;
    swift_errorRelease(v4);
    sub_100014564((void *)&_mh_execute_header, v10, v12, "Location determination failed with error %@", v13);
    sub_10000941C(&qword_1001D1060);
    swift_arrayDestroy(v14, 1LL);
    sub_100010C34((uint64_t)v14);
    sub_100010C34((uint64_t)v13);
  }

  else
  {
    swift_errorRelease(v4);
  }

  uint64_t v16 = sub_100047218();
  sub_1000447B4(v16, v17);
  id v18 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  uint64_t v19 = sub_10000941C((uint64_t *)&unk_1001D32A0);
  uint64_t v20 = sub_1000472BC(v19);
  *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"context");
  uint64_t v26 = v21;
  sub_1000472A4();
  uint64_t v22 = sub_100047198();
  *(void *)(v20 + 96) = v22;
  uint64_t v23 = sub_10001B468((void *)(v20 + 72));
  sub_1000472B0();
  sub_100047210((uint64_t)v23, v22);
  uint64_t v24 = Dictionary.init(dictionaryLiteral:)( v20,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  sub_100047170(v24);
  sub_1000471D0();

LABEL_8:
  sub_100009AA0();
}

id sub_100046E34(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  if (a2)
  {
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v9 = 0LL;
  }

  id v10 = [v5 initWithEffectiveBundlePath:v9 delegate:a3 onQueue:a4];

  swift_unknownObjectRelease(a3);
  return v10;
}

uint64_t sub_100046EBC(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_100046ED0(void *a1)
{
  id v2 = [a1 supportedGeoLocationSources];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String);

  return v3;
}

uint64_t sub_100046F30(void *a1)
{
  id v1 = [a1 serializedClientMetadataForParsec];
  if (!v1) {
    return 0LL;
  }
  id v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100046F90()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

void sub_100046FB4()
{
}

uint64_t sub_100046FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100046FD0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_100046FD8()
{
  unint64_t result = qword_1001D21C0;
  if (!qword_1001D21C0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___CLLocation);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001D21C0);
  }

  return result;
}

uint64_t sub_100047014(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001D32B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void *sub_10004705C()
{
  return sub_100044DA0(*(void *)(v0 + 16));
}

uint64_t sub_100047064()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100047088()
{
}

uint64_t sub_100047090()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000470B4()
{
}

uint64_t sub_1000470D4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100047100(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void **)(v2 + a2);
  *(void *)(v2 + a2) = a1;
}

uint64_t sub_10004710C(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[3].n128_u64[1] = v2;
  a1[4].n128_u64[0] = v3;
  a1[2].n128_u64[0] = v4;
  a1[6].n128_u64[0] = v2;
  a1[6].n128_u64[1] = v3;
  a1[4].n128_u64[1] = v5;
  return String.init(format:_:)(0x66252C6625LL, 0xE500000000000000LL);
}

uint64_t sub_100047134()
{
  return type metadata accessor for DispatchPredicate(0LL);
}

uint64_t sub_10004713C(uint64_t a1)
{
  return swift_release(a1);
}

  ;
}

BOOL sub_100047154(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100047164@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(v1 + a1 + 8));
}

void sub_100047170(uint64_t a1)
{
}

uint64_t sub_100047184()
{
  return sub_100009654(v0, 1LL, 1LL, v1);
}

uint64_t sub_100047198()
{
  return type metadata accessor for ContextUpdate(0LL);
}

uint64_t sub_1000471A0@<X0>(uint64_t a1@<X8>)
{
  return swift_retain(*(void *)(v1 + a1));
}

uint64_t sub_1000471AC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_1000471C0(uint64_t a1@<X8>)
{
}

uint64_t sub_1000471C8()
{
  return _dispatchPreconditionTest(_:)(v0);
}

uint64_t sub_1000471D0()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000471D8@<X0>(uint64_t a1@<X8>)
{
  return swift_unknownObjectWeakLoadStrong(v1 + a1);
}

uint64_t sub_1000471E0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, a2, v2);
}

uint64_t sub_1000471F0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_1000471F8()
{
  return _dispatchPreconditionTest(_:)(v0);
}

  ;
}

uint64_t sub_100047210(uint64_t a1, uint64_t a2)
{
  return swift_storeEnumTagMultiPayload(a1, a2, 2LL);
}

uint64_t sub_100047218()
{
  return 0x61662E726F727265LL;
}

uint64_t sub_100047234@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_100047240(uint64_t a1)
{
  return String.init(format:_:)(a1, 0xE500000000000000LL);
}

uint64_t sub_10004724C()
{
  return type metadata accessor for DispatchQoS(0LL);
}

id sub_100047258(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_100047260()
{
  return sub_100014358(v1, v0);
}

uint64_t sub_10004726C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_100047278(uint64_t a1, uint64_t a2)
{
  return static os_log_type_t.error.getter(a1, a2);
}

uint64_t sub_100047280()
{
  return type metadata accessor for Notification(0LL);
}

_WORD *sub_100047288(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t sub_100047294()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10004729C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_1000472A4()
{
  return AnyHashable.init<A>(_:)(v0 - 200);
}

void sub_1000472B0()
{
}

uint64_t sub_1000472BC(uint64_t a1)
{
  return swift_initStackObject(a1, v1 - 184);
}

uint64_t sub_1000472C4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000472F0 + 4 * byte_10015F5D0[a1]))( 1701736302LL,  0xE400000000000000LL);
}

uint64_t sub_1000472F0()
{
  return 0x6E776F6E6B6E75LL;
}

uint64_t sub_100047308()
{
  return 0x656469727265766FLL;
}

uint64_t sub_100047320()
{
  return 0x656C61636F6C736ELL;
}

uint64_t sub_100047338()
{
  return 0x50496F6567LL;
}

uint64_t sub_10004734C()
{
  return 6513517LL;
}

uint64_t sub_10004735C(uint64_t result)
{
  else {
    return result;
  }
}

uint64_t sub_10004736C(uint64_t result)
{
  return result;
}

BOOL sub_100047374(int a1)
{
  return a1 != 256;
}

uint64_t storeEnumTagSinglePayload for CountryCodeSourceDevice(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000473C0 + 4 * byte_10015F5D6[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000473E0 + 4 * byte_10015F5DB[v4]))();
  }
}

_BYTE *sub_1000473C0(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000473E0(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000473E8(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000473F0(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000473F8(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100047400(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CountryCodeSourceDevice()
{
  return &type metadata for CountryCodeSourceDevice;
}

uint64_t storeEnumTagSinglePayload for CountryCodeSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_100047468 + 4 * byte_10015F5E5[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10004749C + 4 * byte_10015F5E0[v4]))();
}

uint64_t sub_10004749C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000474A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000474ACLL);
  }
  return result;
}

uint64_t sub_1000474B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000474C0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1000474C4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000474CC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CountryCodeSource()
{
  return &type metadata for CountryCodeSource;
}

void sub_1000474E8()
{
}

void sub_1000474F0(uint64_t a1)
{
}

void sub_1000474F8(uint64_t a1)
{
}

uint64_t sub_100047500@<X0>(unsigned int *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10004735C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100047528@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = sub_10004736C(*v1);
  *a1 = result;
  return result;
}

unint64_t sub_100047554()
{
  unint64_t result = qword_1001D32D0;
  if (!qword_1001D32D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015F69C, &type metadata for CountryCodeSource);
    atomic_store(result, (unint64_t *)&qword_1001D32D0);
  }

  return result;
}

BOOL sub_1000475A0@<W0>(int *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = sub_100047374(*a1);
  *a2 = result;
  return result;
}

void sub_1000475D0(_DWORD *a1@<X8>)
{
  *a1 = 256;
}

unint64_t sub_1000475E0()
{
  unint64_t result = qword_1001D32D8;
  if (!qword_1001D32D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015F73C, &type metadata for CountryCodeSourceDevice);
    atomic_store(result, (unint64_t *)&qword_1001D32D8);
  }

  return result;
}

uint64_t sub_10004761C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Search_V2_Entity.Category(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (uint64_t *)((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.UNRECOGNIZED(_:))
  {
    sub_1000478A4(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 96));
    uint64_t result = *v5;
    if ((*v5 & 0x8000000000000000LL) == 0) {
      return result;
    }
    int v6 = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL);
    __break(1u);
  }

  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryUnknown(_:)) {
    return 0LL;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryPerson(_:)) {
    return 1LL;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryOrganization(_:)) {
    return 2LL;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryLocation(_:)) {
    return 3LL;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryRestaurant(_:)) {
    return 4LL;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryActivityLocation(_:)) {
    return 5LL;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryMedia(_:)) {
    return 6LL;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryArtist(_:)) {
    return 7LL;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryStreetAddress(_:)) {
    return 8LL;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryCity(_:)) {
    return 9LL;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryState(_:)) {
    return 10LL;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryCountry(_:)) {
    return 11LL;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryFullAddress(_:)) {
    return 12LL;
  }
  if (v6 != enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryTouristAttraction(_:))
  {
    sub_1000478A4(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    return 0LL;
  }

  return 13LL;
}

uint64_t sub_1000478A4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

void sub_1000478B0()
{
  uint64_t v0 = sub_100010D08();
  sub_100047BE0(v0, (uint64_t)&unk_1001D3598, &qword_1001D35A0);
  sub_100010D00();
  sub_10001683C();
  sub_1000110B8();
  sub_1000110D4();
}

uint64_t sub_100047900()
{
  uint64_t v3 = static os_signpost_type_t.begin.getter(v2);
  if (qword_1001D0550 != -1) {
    swift_once(&qword_1001D0550, sub_100034630);
  }
  sub_10004EDD4();
  sub_10004EC90(v3, (uint64_t)&_mh_execute_header, v4, (uint64_t)"engagedCompletionCache");
  sub_10004EE08();
  uint64_t v5 = v0[14];
  int v6 = *(os_unfair_lock_s **)(v5 + 16);
  sub_10004EC38();
  swift_retain(v5);
  os_unfair_lock_lock(v6);
  uint64_t v7 = v0[12];
  if (!v7)
  {
    sub_10004CC50((uint64_t)v0);
    v0[12] = v8;
    v0[13] = v9;
    swift_unknownObjectRelease();
    uint64_t v7 = v0[12];
  }

  swift_unknownObjectRetain(v7);
  os_unfair_lock_unlock(v6);
  swift_release();
  uint64_t v10 = swift_release();
  uint64_t v11 = static os_signpost_type_t.end.getter(v10);
  sub_10004EDD4();
  sub_10004EC90(v11, (uint64_t)&_mh_execute_header, v12, (uint64_t)"engagedCompletionCache");
  sub_10004EE08();
  return v7;
}

void sub_100047A50()
{
  uint64_t v0 = sub_100010D08();
  sub_100047BE0(v0, (uint64_t)&unk_1001D35B8, &qword_1001D35C0);
  sub_100010D00();
  sub_10001683C();
  sub_1000110B8();
  sub_1000110D4();
}

void sub_100047AA0()
{
  id v0 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  sub_100027204();
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 stringForKey:v1];

  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    sub_10004EC84();
  }

  sub_1000110D4();
}

uint64_t sub_100047B48(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t))(a2 + 24))(0LL, a1);
}

void sub_100047B5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = (_DWORD *)sub_100009B20(4LL);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = 0;
  sub_10004E6C4(a1, v2 + 24, a2);
  sub_1000110D4();
}

void sub_100047BA0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = (_DWORD *)sub_100009B20(4LL);
  _DWORD *v7 = 0;
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *(void *)(v3 + sub_10000BDD4(v0 + 24) = v5;
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 32) = v4;
  *(_BYTE *)(v3 + 40) = a3 & 1;
  sub_1000110D4();
}

uint64_t sub_100047BE0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = *(os_unfair_lock_s **)(v3 + 16);
  os_unfair_lock_lock(v7);
  sub_100010BE4(v3 + 24, (uint64_t)v10, 33LL);
  uint64_t v8 = sub_100047DF4(v5, v4, a3);
  sub_10004ECB8(v8);
  os_unfair_lock_unlock(v7);
  return v8;
}

uint64_t sub_100047C64( uint64_t a1, uint64_t (*a2)(void), uint64_t a3, void (*a4)(void (*)(void *__return_ptr, void), uint64_t, void))
{
  uint64_t v9 = *(os_unfair_lock_s **)(v4 + 16);
  os_unfair_lock_lock(v9);
  sub_100010BE4(v4 + 24, (uint64_t)v12, 33LL);
  uint64_t v10 = sub_100047FD4(a1, a2, a3, a4);
  sub_10004ECB8(v10);
  os_unfair_lock_unlock(v9);
  return v10;
}

void (*sub_100047CEC(uint64_t a1))(id *__return_ptr, void *)
{
  void (*v4)(id *__return_ptr, void *);
  _BYTE v6[24];
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  swift_beginAccess(v1 + 24, v6, 33LL, 0LL);
  uint64_t v4 = sub_100048398(a1);
  swift_endAccess(v6);
  os_unfair_lock_unlock(v3);
  return v4;
}

void sub_100047D5C( uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void *, uint64_t)@<X2>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v11 = *(os_unfair_lock_s **)(v5 + 16);
  os_unfair_lock_lock(v11);
  sub_100010BE4(v5 + 24, (uint64_t)v13, 33LL);
  sub_1000481B4(a1, a2, a3, a4, a5);
  sub_10004ECB8(v12);
  os_unfair_lock_unlock(v11);
}

uint64_t sub_100047DF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void (*v5)(void *__return_ptr, uint64_t *);
  uint64_t v6;
  uint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void v31[2];
  uint64_t v30 = a1;
  uint64_t v5 = *(void (**)(void *__return_ptr, uint64_t *))v3;
  int v6 = *(void *)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 1) == 0)
  {
    if (qword_1001D0490 != -1) {
      swift_once(&qword_1001D0490, sub_10001B590);
    }
    uint64_t v8 = sub_100010ED4();
    sub_1000093D0(v8, (uint64_t)qword_1001D1850);
    sub_10004ED90();
    uint64_t v9 = sub_100014588();
    if (sub_10004ED20(v9))
    {
      uint64_t v10 = sub_100009B20(22LL);
      uint64_t v28 = sub_100009B20(64LL);
      v31[0] = v28;
      uint64_t v29 = sub_10004ED78(4.8752e-34);
      sub_10000941C(&qword_1001D3590);
      uint64_t v11 = String.init<A>(describing:)(&v29);
      unint64_t v13 = v12;
      uint64_t v29 = sub_10004ED18(v11, v12, v14, v15, v16, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v4);
      swift_bridgeObjectRelease(v13);
      *(_WORD *)(v10 + 12) = 2082;
      uint64_t v29 = sub_10004EDC0();
      sub_10000941C(a3);
      id v18 = String.init<A>(describing:)(&v29);
      uint64_t v29 = sub_10004ED18(v18, v19, v20, v21, v22, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v10 + 14);
      sub_10001460C();
      sub_10004ECA4((void *)&_mh_execute_header, v24, v25, "AtomicValue<%{public}s, %{public}s>.init");
      sub_10004EE00(v28);
      sub_100010C34(v28);
      sub_100010C34(v10);
    }

    v5(v31, &v30);
    sub_10004D880((uint64_t)v5, v6, 0);
    uint64_t v5 = (void (*)(void *__return_ptr, uint64_t *))v31[0];
    uint64_t v26 = v31[1];
    *(void *)uint64_t v3 = v31[0];
    *(void *)(v3 + 8) = v26;
    *(_BYTE *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
  }

  return swift_unknownObjectRetain(v5);
}

uint64_t sub_100047FD4( uint64_t a1, uint64_t (*a2)(void), uint64_t a3, void (*a4)(void (*)(void *__return_ptr, void), uint64_t, void))
{
  void (*v5)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v45 = a1;
  uint64_t v5 = *(void (**)(uint64_t *__return_ptr, uint64_t *))v4;
  if ((*(_BYTE *)(v4 + 16) & 1) == 0)
  {
    uint64_t v8 = *(void *)(v4 + 8);
    if (qword_1001D0490 != -1) {
      swift_once(&qword_1001D0490, sub_10001B590);
    }
    uint64_t v9 = sub_100010ED4();
    sub_1000093D0(v9, (uint64_t)qword_1001D1850);
    sub_10004ED90();
    uint64_t v10 = sub_100014588();
    if (os_log_type_enabled((os_log_t)v4, v10))
    {
      uint64_t v11 = sub_100009B20(22LL);
      uint64_t v12 = sub_100009B20(64LL);
      id v46 = v12;
      *(_DWORD *)uint64_t v11 = 136446466;
      id v43 = (uint64_t)a4;
      type metadata accessor for Assembly();
      unint64_t v13 = sub_10000941C(&qword_1001D3590);
      uint64_t v15 = sub_10004ED48(v13, v13, v14);
      sub_10004EDC8(v15, v16, v17, v18, v19, v20, v21);
      sub_10004EDAC();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v22, v23, v11 + 4);
      sub_10001460C();
      *(_WORD *)(v11 + 12) = 2082;
      a4 = (void (*)(void (*)(void *__return_ptr, void), uint64_t, void))(v11 + 14);
      uint64_t v44 = a2(0LL);
      uint64_t v24 = sub_10004EDC0();
      uint64_t v26 = sub_10004ED48(v24, v24, v25);
      uint64_t v33 = sub_10004EDC8(v26, v27, v28, v29, v30, v31, v32);
      sub_10004EC50(v33, v34, v35, v11 + 22, v36, v37, v38, v39, v41, v8, v43, v44);
      uint64_t v8 = v42;
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v4,  v10,  "AtomicValue<%{public}s, %{public}s>.init",  (uint8_t *)v11,  0x16u);
      sub_10004EE00(v12);
      sub_100010C34(v12);
      sub_100010C34(v11);
    }

    v5(&v46, &v45);
    a4((void (*)(void *__return_ptr, void))v5, v8, 0LL);
    *(void *)uint64_t v4 = v46;
    *(void *)(v4 + 8) = 0LL;
    *(_BYTE *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
  }

  return sub_10004EC38();
}

void sub_1000481B4( uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void *, uint64_t)@<X2>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v54 = a1;
  sub_10004E724((uint64_t)v5, (uint64_t)v52, a2);
  if ((v53 & 1) != 0)
  {
    a3(v52, a5);
  }

  else
  {
    sub_100019C1C((uint64_t)v5, a2);
    uint64_t v12 = (void (*)(uint64_t *))v52[0];
    uint64_t v11 = v52[1];
    if (qword_1001D0490 != -1) {
      swift_once(&qword_1001D0490, sub_10001B590);
    }
    uint64_t v13 = sub_100010ED4();
    sub_1000093D0(v13, (uint64_t)qword_1001D1850);
    sub_10004ED90();
    os_log_type_t v14 = sub_100014588();
    if (sub_10004ED20(v14))
    {
      uint64_t v47 = (uint64_t)v12;
      uint64_t v15 = sub_100009B20(22LL);
      uint64_t v51 = sub_100009B20(64LL);
      sub_10004ED78(4.8752e-34);
      uint64_t v16 = sub_10000941C(&qword_1001D3590);
      uint64_t v18 = sub_10004ED48(v16, v16, v17);
      uint64_t v49 = v11;
      sub_10004ED18(v18, v19, v20, v21, v22, v23);
      sub_10004EDAC();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v24, v25, v6);
      sub_10001450C();
      *(_WORD *)(v15 + 12) = 2082;
      uint64_t v11 = v15 + 14;
      uint64_t v50 = sub_10004EDC0();
      uint64_t v26 = sub_10000941C(a4);
      uint64_t v28 = sub_10004ED48(v26, v26, v27);
      uint64_t v34 = sub_10004ED18(v28, v29, v30, v31, v32, v33);
      sub_10004EC50(v34, v35, v36, v15 + 22, v37, v38, v39, v40, v46, v47, v49, v50);
      sub_10001460C();
      sub_10004ECA4((void *)&_mh_execute_header, v41, v42, "AtomicValue<%{public}s, %{public}s>.init");
      sub_10004EE00(v51);
      sub_100010C34(v51);
      uint64_t v43 = v15;
      uint64_t v12 = v48;
      sub_100010C34(v43);
    }

    v12(&v54);
    swift_release(v11);
    uint64_t v44 = sub_10004EDF4();
    sub_10004D7B4(v44, v45);
    v5[40] = 1;
  }

void (*sub_100048398(uint64_t a1))(id *__return_ptr, void *)
{
  void (*v2)(id *__return_ptr, void *);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_s *v7;
  os_log_type_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (*v16)(id *__return_ptr, uint64_t *);
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v18 = a1;
  uint64_t v2 = *(void (**)(id *__return_ptr, void *))v1;
  if ((*(_BYTE *)(v1 + 16) & 1) == 0)
  {
    uint64_t v3 = v1;
    uint64_t v16 = *(void (**)(id *__return_ptr, uint64_t *))v1;
    uint64_t v4 = *(void *)(v1 + 8);
    if (qword_1001D0490 != -1) {
      swift_once(&qword_1001D0490, sub_10001B590);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    uint64_t v6 = sub_1000093D0(v5, (uint64_t)qword_1001D1850);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    uint64_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc(22LL, -1LL);
      uint64_t v10 = (void *)swift_slowAlloc(64LL, -1LL);
      unint64_t v19 = v10;
      *(_DWORD *)uint64_t v9 = 136446466;
      uint64_t v17 = type metadata accessor for Assembly();
      sub_10000941C(&qword_1001D3590);
      uint64_t v11 = String.init<A>(describing:)(&v17);
      uint64_t v17 = sub_1000307E0(v11, v12, (uint64_t *)&v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v9 + 4);
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2082;
      uint64_t v17 = sub_100009788(0LL, &qword_1001D35E0, &OBJC_CLASS___NSURLSession_ptr);
      sub_10000941C(&qword_1001D35E8);
      uint64_t v13 = String.init<A>(describing:)(&v17);
      uint64_t v17 = sub_1000307E0(v13, v14, (uint64_t *)&v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v9 + 14);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "AtomicValue<%{public}s, %{public}s>.init",  (uint8_t *)v9,  0x16u);
      swift_arrayDestroy(v10, 2LL);
      swift_slowDealloc(v10, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    v16(&v19, &v18);
    sub_10004CBB4(v16, v4, 0);
    uint64_t v2 = (void (*)(id *__return_ptr, void *))v19;
    *(void *)uint64_t v3 = v19;
    *(void *)(v3 + 8) = 0LL;
    *(_BYTE *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
  }

  return v2;
}

void sub_1000485DC()
{
  uint64_t v0 = sub_100010D08();
  sub_100047C64( v0,  (uint64_t (*)(void))type metadata accessor for BiomeDatabaseManager,  (uint64_t)&unk_1001D35F8,  (void (*)(void (*)(void *__return_ptr, void), uint64_t, void))sub_10004CBC4);
  sub_100010D00();
  sub_10001683C();
  sub_1000110D4();
}

void sub_100048630()
{
  uint64_t v0 = sub_100010D08();
  sub_100047BE0(v0, (uint64_t)&unk_1001D3640, &qword_1001D3648);
  sub_100010D00();
  sub_10001683C();
  sub_1000110B8();
  sub_1000110D4();
}

void sub_100048680()
{
  uint64_t v0 = sub_100010D08();
  sub_100047BE0(v0, (uint64_t)&unk_1001D3628, (uint64_t *)&unk_1001D3630);
  sub_100010D00();
  sub_10001683C();
  sub_1000110B8();
  sub_1000110D4();
}

void sub_1000486D0()
{
  uint64_t v2 = v1;
  sub_100010CA0();
  if (v2)
  {
    swift_unknownObjectRetain(*(void *)(v2 + 64));
  }

  else
  {
    uint64_t v3 = *(void *)(v0 + 72);
    sub_100010D08();
    swift_retain(v3);
    sub_100047BE0(v0, (uint64_t)&unk_1001D35A8, &qword_1001D35B0);
    sub_10004EC84();
    sub_100010D00();
  }

  swift_release();
  sub_1000110D4();
}

void sub_100048758()
{
  uint64_t v0 = sub_100010D08();
  sub_100047BE0(v0, (uint64_t)&unk_1001D3600, &qword_1001D3608);
  sub_100010D00();
  sub_10001683C();
  sub_1000110B8();
  sub_1000110D4();
}

void sub_1000487A8()
{
  uint64_t v0 = sub_100010D08();
  sub_100047BE0(v0, (uint64_t)&unk_1001D3768, (uint64_t *)&unk_1001D3770);
  sub_100010D00();
  sub_10001683C();
  sub_1000110B8();
  sub_1000110D4();
}

void sub_1000487F8(uint64_t a1@<X8>)
{
  id v2 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  sub_100027204();
  NSString v3 = String._bridgeToObjectiveC()();
  unsigned int v4 = [v2 BOOLForKey:v3];

  if (v4)
  {
    *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = 0LL;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
    sub_100019F1C();
  }

  else
  {
    sub_1000488A0(a1);
  }

uint64_t sub_1000488A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 120;
  sub_100010BE4(v1 + 120, (uint64_t)v13, 0LL);
  sub_10004E724(v1 + 120, (uint64_t)&v10, &qword_1001D36D0);
  if (!v11)
  {
    sub_100019C1C((uint64_t)&v10, &qword_1001D36D0);
    id v4 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    sub_1000489B0();
    sub_10004ED84();
    uint64_t v5 = type metadata accessor for TopicCacheController();
    sub_100009ACC(v5, 88LL);
    uint64_t v6 = sub_10006BB20(v4, v1);
    uint64_t v11 = v5;
    uint64_t v12 = &off_1001B48D0;
    *(void *)&__int128 v10 = v6;
    sub_10004D7B4((uint64_t)&v10, (uint64_t)v9);
    sub_100010BE4(v3, (uint64_t)v8, 33LL);
    sub_10004D7F4((uint64_t)v9, v3);
    swift_endAccess(v8);
  }

  return sub_100019BC4(&v10, a1);
}

void sub_1000489B0()
{
}

uint64_t sub_1000489DC()
{
  uint64_t v1 = *(void *)(v0 + 160);
  sub_10004EC38();
  uint64_t v2 = sub_100010D08();
  sub_10004EC2C( v2,  &qword_1001D3610,  (void (*)(void *, uint64_t))sub_100019BC4,  (uint64_t)&unk_1001D3618,  &qword_1001D3620);
  sub_100010D00();
  return sub_1000167DC(v1);
}

void sub_100048A30()
{
  uint64_t v1 = *(void *)(v0 + 168);
  if (!v1)
  {
    uint64_t v2 = type metadata accessor for TrialAllocationStatusProvider();
    uint64_t v3 = sub_100009ACC(v2, 16LL);
    *(void *)(v0 + 168) = v3;
    *(void *)(v0 + 176) = &off_1001B55B8;
    swift_retain(v3);
    uint64_t v1 = 0LL;
  }

  swift_unknownObjectRetain(v1);
  sub_10004EDF4();
  sub_1000110D4();
}

void sub_100048A88()
{
  uint64_t v0 = sub_100010D08();
  sub_100047C64( v0,  (uint64_t (*)(void))type metadata accessor for TrialExperimentsProvider,  (uint64_t)&unk_1001D35F0,  (void (*)(void (*)(void *__return_ptr, void), uint64_t, void))sub_10004EB40);
  sub_100010D00();
  sub_10001683C();
  sub_1000110D4();
}

void sub_100048ADC()
{
  uint64_t v0 = sub_100010D08();
  sub_100047C64( v0,  (uint64_t (*)(void))type metadata accessor for TrialExperimentsProvider,  (uint64_t)&unk_1001D35F0,  (void (*)(void (*)(void *__return_ptr, void), uint64_t, void))sub_10004EB40);
  sub_100010D00();
  sub_10001683C();
  sub_1000110D4();
}

void sub_100048B30()
{
  uint64_t v0 = sub_100010D08();
  sub_100047C64( v0,  (uint64_t (*)(void))type metadata accessor for TrialExperimentsProvider,  (uint64_t)&unk_1001D35F0,  (void (*)(void (*)(void *__return_ptr, void), uint64_t, void))sub_10004EB40);
  sub_100010D00();
  sub_10001683C();
  sub_1000110D4();
}

uint64_t sub_100048B84()
{
  uint64_t v1 = *(void *)(v0 + 208);
  sub_10004EC38();
  uint64_t v2 = sub_100010D08();
  sub_10004EC2C( v2,  &qword_1001D3678,  (void (*)(void *, uint64_t))sub_100019BC4,  (uint64_t)&unk_1001D3680,  (uint64_t *)&unk_1001D3688);
  sub_100010D00();
  return sub_1000167DC(v1);
}

uint64_t sub_100048BD8()
{
  uint64_t v1 = *(void *)(v0 + 216);
  sub_10004EC38();
  uint64_t v2 = sub_100010D08();
  sub_10004EC2C( v2,  &qword_1001D3660,  (void (*)(void *, uint64_t))sub_100019BC4,  (uint64_t)&unk_1001D3668,  &qword_1001D3670);
  sub_100010D00();
  return sub_1000167DC(v1);
}

void sub_100048C2C()
{
  uint64_t v1 = v0;
  sub_100010CA0();
  if (v1)
  {
    id v2 = [v1 eagerFeedbackSamplingPercentage];

    if (v2)
    {
      [v2 integerValue];
    }
  }

  sub_100009A90();
}

void *sub_100048CAC()
{
  uint64_t v1 = v0;
  uint64_t v144 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v142 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  sub_100009AEC();
  uint64_t v143 = v3 - v2;
  uint64_t v140 = type metadata accessor for PegasusContext(0LL);
  uint64_t v4 = __chkstk_darwin(v140);
  uint64_t v141 = (uint64_t)&v136 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  __int128 v137 = (uint64_t *)((char *)&v136 - v6);
  v0[2] = 0LL;
  uint64_t v7 = sub_10000941C(&qword_1001D36D8);
  sub_10004EB50(v7);
  sub_10004EB5C((uint64_t)sub_10004B77C);
  v0[3] = v8;
  v0[4] = 0LL;
  uint64_t v9 = sub_10000941C(&qword_1001D36E0);
  sub_10004EB50(v9);
  sub_10004EB5C((uint64_t)sub_10004B7E8);
  v0[5] = v10;
  uint64_t v11 = sub_10000941C(&qword_1001D36E8);
  sub_10004EB50(v11);
  sub_10004EB5C((uint64_t)sub_10004B95C);
  v0[6] = v12;
  uint64_t v13 = sub_10000941C(&qword_1001D36F0);
  sub_10004EB50(v13);
  sub_10004EB5C((uint64_t)sub_10004BAD0);
  v0[7] = v14;
  uint64_t v15 = sub_10000941C(&qword_1001D36F8);
  sub_10004EB50(v15);
  sub_10004EB5C((uint64_t)sub_10004BC3C);
  v0[8] = v16;
  uint64_t v17 = sub_10000941C(&qword_1001D3700);
  sub_10004EB50(v17);
  sub_10004EB5C((uint64_t)sub_10004BE40);
  v0[9] = v18;
  uint64_t v19 = sub_10000941C(&qword_1001D3708);
  sub_10004EB50(v19);
  sub_10004EB5C((uint64_t)sub_10004BFDC);
  v0[10] = v20;
  uint64_t v21 = sub_10000941C(&qword_1001D3710);
  sub_10004EB50(v21);
  sub_10004EB5C((uint64_t)sub_10004C16C);
  v0[11] = v22;
  uint64_t v23 = type metadata accessor for Locker();
  v0[12] = 0LL;
  v0[13] = 0LL;
  uint64_t v24 = sub_100009ACC(v23, 24LL);
  uint64_t v25 = (_DWORD *)sub_100009B20(4LL);
  *(void *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = v25;
  *uint64_t v25 = 0;
  v1[14] = v24;
  *(_OWORD *)(v1 + 15) = 0u;
  *(_OWORD *)(v1 + 17) = 0u;
  v1[19] = 0LL;
  sub_10004ED6C((uint64_t)sub_10004C2E0);
  uint64_t v26 = sub_10000941C(&qword_1001D3718);
  uint64_t v27 = sub_100009ACC(v26, 65LL);
  sub_10004ED10(v27, &qword_1001D3610);
  v1[21] = 0LL;
  v1[22] = 0LL;
  v1[20] = v28;
  uint64_t v29 = sub_10000941C(&qword_1001D3720);
  sub_10004EB50(v29);
  sub_10004EB5C((uint64_t)sub_10004C370);
  v1[23] = v30;
  sub_10004EB50(v29);
  sub_10004EB5C((uint64_t)sub_10004C558);
  v1[24] = v31;
  sub_10004EB50(v29);
  sub_10004EB5C((uint64_t)sub_10004C740);
  v1[25] = v32;
  sub_10004ED6C((uint64_t)sub_10004C924);
  uint64_t v33 = sub_10000941C(&qword_1001D3728);
  uint64_t v34 = sub_100009ACC(v33, 65LL);
  sub_10004ED10(v34, &qword_1001D3678);
  v1[26] = v35;
  sub_10004ED6C((uint64_t)sub_10004CABC);
  uint64_t v36 = sub_10000941C(&qword_1001D3730);
  uint64_t v37 = sub_100009ACC(v36, 65LL);
  sub_10004ED10(v37, &qword_1001D3660);
  v1[27] = v38;
  *((_BYTE *)v1 + 2sub_10000BDD4(v0 + 24) = 1;
  uint64_t v39 = type metadata accessor for DeviceSetupStatus();
  sub_100009ACC(v39, 40LL);
  uint64_t v40 = sub_100034870();
  v1[29] = v40;
  uint64_t v41 = sub_100009B34(v40, (unint64_t *)&qword_1001D43D0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v139 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v138 = *(void *)(v139 - 8);
  uint64_t v42 = *(void *)(v138 + 64);
  uint64_t v43 = __chkstk_darwin(v139);
  uint64_t v136 = v42;
  static DispatchQoS.utility.getter(v43);
  uint64_t v44 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  uint64_t v45 = *(void *)(*(void *)(v44 - 8) + 64LL);
  __chkstk_darwin(v44);
  uint64_t v149 = v45;
  unint64_t v147 = (v45 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  aBlock[0] = 0LL;
  sub_100008FF4((unint64_t *)&qword_1001D0BB0, v46);
  uint64_t v146 = v47;
  sub_10004EC70(v47, v48, v47);
  uint64_t v49 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v152 = v49;
  uint64_t v51 = *(void *)(v50 + 64);
  __chkstk_darwin(v49);
  uint64_t v148 = v51;
  unint64_t v145 = (v51 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  unsigned int v150 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  int v151 = *(void (**)(char *))(v52 + 104);
  v151((char *)&v136 - v145);
  sub_10004ED30();
  uint64_t v153 = v41;
  uint64_t v59 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v53, v54, v55, v56, v57, v58);
  v1[30] = v59;
  uint64_t v60 = __chkstk_darwin(v59);
  uint64_t v61 = static DispatchQoS.background.getter(v60);
  __chkstk_darwin(v61);
  uint64_t v62 = sub_10004EBB4();
  __chkstk_darwin(v62);
  unint64_t v63 = v145;
  ((void (*)(char *, void, uint64_t))v151)((char *)&v136 - v145, v150, v152);
  sub_100027204();
  sub_10004ED30();
  uint64_t v70 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v64, v65, v66, v67, v68, v69);
  v1[31] = v70;
  __chkstk_darwin(v70);
  sub_10004ED98();
  uint64_t v72 = static DispatchQoS.userInitiated.getter(v71);
  __chkstk_darwin(v72);
  uint64_t v73 = sub_10004EBB4();
  __chkstk_darwin(v73);
  uint64_t v74 = (char *)&v136 - v63;
  uint64_t v75 = v150;
  uint64_t v76 = (void (*)(char *, uint64_t, uint64_t))v151;
  uint64_t v77 = v152;
  ((void (*)(char *, void, uint64_t))v151)(v74, v150, v152);
  uint64_t v78 = sub_10004EBD8(0xD00000000000001FLL, (uint64_t)"com.apple.parsecd.userInitiated");
  v1[32] = v78;
  __chkstk_darwin(v78);
  sub_10004ED98();
  uint64_t v80 = static DispatchQoS.userInteractive.getter(v79);
  uint64_t v81 = __chkstk_darwin(v80);
  aBlock[0] = 0LL;
  uint64_t v83 = sub_10004EC70(v81, v82, v146);
  __chkstk_darwin(v83);
  v76((char *)&v136 - v145, v75, v77);
  v1[33] = sub_10004EBD8(0xD000000000000021LL, (uint64_t)"com.apple.parsecd.userInteractive");
  v1[34] = 135LL;
  uint64_t v84 = sub_10000941C(&qword_1001D3738);
  sub_10004EB50(v84);
  sub_10004EB5C((uint64_t)sub_100049910);
  v1[35] = v85;
  sub_10004EB50(v84);
  sub_10004EB5C((uint64_t)sub_100049C18);
  v1[36] = v86;
  sub_10004EB50(v84);
  sub_10004EB5C((uint64_t)sub_100049E1C);
  v1[37] = v87;
  uint64_t v88 = sub_10000941C(&qword_1001D3740);
  uint64_t v89 = sub_10004EB50(v88);
  sub_10004EB5C((uint64_t)sub_10004A0F8);
  v1[38] = v90;
  uint64_t v91 = v137;
  sub_1000291B0((uint64_t)v137);
  static DeviceContextUtil.deviceCountryCode()();
  sub_10004EC84();
  uint64_t v92 = (uint64_t *)((char *)v91 + *(int *)(v140 + 80));
  uint64_t v93 = swift_bridgeObjectRelease();
  *uint64_t v92 = v89;
  v92[1] = v84;
  static DeviceContextUtil.effectiveSystemLanguage()(v93);
  sub_10004EC84();
  uint64_t v94 = swift_bridgeObjectRelease();
  v91[11] = v89;
  v91[12] = v84;
  static DeviceContextUtil.localeIdentifier()(v94);
  sub_10004EC84();
  uint64_t v95 = swift_bridgeObjectRelease();
  *uint64_t v91 = v89;
  v91[1] = v84;
  uint64_t v96 = static DeviceContextUtil.topPreferredLanguages()(v95);
  uint64_t v97 = swift_bridgeObjectRelease();
  v91[13] = v96;
  static DeviceContextUtil.region.getter(v97);
  sub_10004EC84();
  swift_bridgeObjectRelease();
  v91[18] = v96;
  v91[19] = v84;
  uint64_t v98 = (uint64_t)v91;
  uint64_t v99 = (uint64_t)v91;
  uint64_t v100 = v141;
  sub_10004D694(v98, v141, type metadata accessor for PegasusContext);
  uint64_t v101 = sub_10000941C(&qword_1001D3748);
  swift_allocObject(v101, *(unsigned int *)(v101 + 48), *(unsigned __int16 *)(v101 + 52));
  uint64_t v102 = sub_10000B590(v100);
  sub_10004D784(v99, type metadata accessor for PegasusContext);
  v1[39] = v102;
  uint64_t v103 = type metadata accessor for ActivityMonitor();
  sub_100009ACC(v103, 48LL);
  sub_100080D6C(0LL, 0LL);
  uint64_t v104 = sub_10000941C(&qword_1001D3750);
  sub_100009ACC(v104, 32LL);
  uint64_t v105 = sub_10004ED50();
  sub_10000B59C(v105);
  v1[40] = v106;
  sub_10004ED6C((uint64_t)sub_10004A604);
  uint64_t v107 = sub_10000941C((uint64_t *)&unk_1001D3758);
  uint64_t v108 = sub_100009ACC(v107, 65LL);
  sub_10004ED10(v108, &qword_1001D35C8);
  v1[41] = v109;
  uint64_t v110 = type metadata accessor for Assembly.Clock();
  uint64_t v111 = sub_100009ACC(v110, 16LL);
  v1[45] = v110;
  v1[46] = &off_1001B3A48;
  v1[42] = v111;
  sub_100049824();
  swift_unknownObjectRelease();
  sub_100048B84();
  sub_1000108B8(aBlock);
  sub_100048A88();
  swift_release();
  sub_100048ADC();
  swift_release();
  sub_100048B30();
  swift_release();
  sub_1000478B0();
  swift_unknownObjectRelease();
  sub_100048630();
  swift_unknownObjectRelease();
  sub_100048680();
  swift_unknownObjectRelease();
  sub_100047A50();
  swift_unknownObjectRelease();
  sub_100048758();
  swift_unknownObjectRelease();
  sub_1000487A8();
  swift_unknownObjectRelease();
  uint64_t v153 = v1[31];
  uint64_t v112 = sub_100009ACC((uint64_t)&unk_1001B3C50, 24LL);
  swift_weakInit(v112 + 16, v1);
  aBlock[4] = sub_10004D860;
  aBlock[5] = v112;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000D2F18;
  id aBlock[3] = &unk_1001B3C68;
  id v113 = _Block_copy(aBlock);
  __chkstk_darwin(v113);
  uint64_t v114 = (char *)&v136 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = sub_10004EC38();
  static DispatchQoS.unspecified.getter(v115);
  uint64_t v116 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v117 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  sub_100009AEC();
  uint64_t v120 = v119 - v118;
  uint64_t v154 = &_swiftEmptyArrayStorage;
  sub_100008FF4((unint64_t *)&qword_1001D2B80, v121);
  uint64_t v123 = v122;
  uint64_t v124 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
  sub_100025F50((unint64_t *)&qword_1001D2B90, (uint64_t *)&unk_1001D0BC0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v154, v124, v125, v116, v123);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v114, v120, v113);
  _Block_release(v113);
  (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v120, v116);
  (*(void (**)(char *, uint64_t))(v138 + 8))(v114, v139);
  swift_release();
  sub_10001683C();
  sub_10000C4AC();
  uint64_t v126 = sub_100010D08();
  sub_100047BE0(v126, (uint64_t)&unk_1001D35A8, &qword_1001D35B0);
  sub_100010D00();
  sub_10001683C();
  uint64_t v127 = swift_unknownObjectRelease();
  static os_signpost_type_t.begin.getter(v127);
  if (qword_1001D0550 != -1) {
    swift_once(&qword_1001D0550, sub_100034630);
  }
  uint64_t v128 = v143;
  static OSSignpostID.exclusive.getter();
  sub_10004EBF8();
  uint64_t v129 = *(void (**)(uint64_t, uint64_t))(v142 + 8);
  uint64_t v130 = v144;
  v129(v128, v144);
  id v131 = [(id)objc_opt_self(NSFileManager) defaultManager];
  sub_10004ED84();
  uint64_t v132 = type metadata accessor for ExperimentalFeedbackDatabase();
  sub_100009ACC(v132, 24LL);
  uint64_t v133 = (void *)sub_10004ED50();
  v1[2] = sub_1000349B4(v133);
  uint64_t v134 = swift_release();
  static os_signpost_type_t.end.getter(v134);
  static OSSignpostID.exclusive.getter();
  sub_10004EBF8();
  v129(v128, v130);
  return v1;
}

void sub_100049824()
{
  uint64_t v0 = sub_100010D08();
  sub_100047BE0(v0, (uint64_t)&unk_1001D3650, &qword_1001D3658);
  sub_100010D00();
  sub_10001683C();
  sub_1000110B8();
  sub_1000110D4();
}

uint64_t sub_100049874(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v3, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    sub_100047900();
    swift_release();
    return swift_unknownObjectRelease();
  }

  return result;
}

void sub_1000498D4()
{
  uint64_t v0 = sub_100010D08();
  sub_100047CEC(v0);
  sub_100010D00();
  sub_10001683C();
  sub_1000110D4();
}

void sub_100049910(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v6 = [(id)objc_opt_self(NSURLSessionConfiguration) ephemeralSessionConfiguration];
  objc_msgSend(v6, "set_expiredDNSBehavior:", 1);
  objc_msgSend(v6, "set_allowsTCPFastOpen:", 1);
  objc_msgSend(v6, "set_allowsTLSSessionTickets:", 1);
  objc_msgSend(v6, "set_timingDataOptions:", 135);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecPolicyNameAppleParsecService);
  sub_10004CBFC(v7, v8, v6, (SEL *)&selRef_set_tlsTrustPinningPolicyName_);
  objc_msgSend(v6, "set_usesNWLoader:", 1);
  objc_msgSend(v6, "set_disableAPWakeOnIdleConnections:", 1);
  objc_msgSend(v6, "set_allowsHTTP3:", 1);
  objc_msgSend(v6, "set_allowsTLSSessionResumption:", 1);
  sub_1000478B0();
  uint64_t v10 = v9;
  sub_1000C27CC();
  uint64_t v12 = v11;
  swift_unknownObjectRelease(v10);
  if (v12)
  {
    id v13 = [v12 enablesL4S];
  }

  else
  {
    id v13 = 0LL;
  }

  objc_msgSend(v6, "set_enablesL4S:", v13);
  id v14 = [(id)objc_opt_self(NSURLSession) sessionWithConfiguration:v6];
  uint64_t v26 = 0LL;
  uint64_t v27 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(40LL);
  swift_bridgeObjectRelease();
  uint64_t v26 = 0xD000000000000020LL;
  uint64_t v27 = 0x800000010016EE10LL;
  unsigned int v15 = [v6 _enablesL4S];
  BOOL v16 = v15 == 0;
  if (v15) {
    uint64_t v17 = 1702195828LL;
  }
  else {
    uint64_t v17 = 0x65736C6166LL;
  }
  if (v16) {
    unint64_t v18 = 0xE500000000000000LL;
  }
  else {
    unint64_t v18 = 0xE400000000000000LL;
  }
  unint64_t v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 539828265LL;
  v20._object = (void *)0xE400000000000000LL;
  String.append(_:)(v20);
  uint64_t v21 = UUID.init()();
  uint64_t v22 = UUID.uuidString.getter(v21);
  uint64_t v24 = v23;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v25._uint64_t countAndFlagsBits = v22;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  sub_10004CBFC(v26, v27, v14, (SEL *)&selRef_setSessionDescription_);

  *a1 = v14;
}

void sub_100049BDC()
{
  uint64_t v0 = sub_100010D08();
  sub_100047CEC(v0);
  sub_100010D00();
  sub_10001683C();
  sub_1000110D4();
}

void sub_100049C18(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v6 = [(id)objc_opt_self(NSURLSessionConfiguration) ephemeralSessionConfiguration];
  objc_msgSend(v6, "set_timingDataOptions:", 135);
  [v6 setWaitsForConnectivity:1];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecPolicyNameAppleParsecService);
  sub_10004CBFC(v7, v8, v6, (SEL *)&selRef_set_tlsTrustPinningPolicyName_);
  objc_msgSend(v6, "set_usesNWLoader:", 1);
  objc_msgSend(v6, "set_disableAPWakeOnIdleConnections:", 1);
  id v9 = [(id)objc_opt_self(NSURLSession) sessionWithConfiguration:v6];
  uint64_t v16 = 0LL;
  uint64_t v17 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(28LL);
  uint64_t v10 = swift_bridgeObjectRelease();
  uint64_t v16 = 0xD00000000000001ALL;
  uint64_t v17 = 0x800000010016EDF0LL;
  uint64_t v11 = UUID.init()(v10);
  uint64_t v12 = UUID.uuidString.getter(v11);
  id v14 = v13;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v15._uint64_t countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  sub_10004CBFC(v16, v17, v9, (SEL *)&selRef_setSessionDescription_);

  *a1 = v9;
}

void sub_100049DE0()
{
  uint64_t v0 = sub_100010D08();
  sub_100047CEC(v0);
  sub_100010D00();
  sub_10001683C();
  sub_1000110D4();
}

void sub_100049E1C(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v6 = (void *)objc_opt_self(&OBJC_CLASS___NSURLSessionConfiguration);
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 backgroundSessionConfigurationWithIdentifier:v7];

  [v8 setHTTPCookieStorage:0];
  [v8 setURLCache:0];
  [v8 setDiscretionary:1];
  objc_msgSend(v8, "set_sessionSendsLaunchOnDemandEvents:", 1);
  objc_msgSend(v8, "set_allowsExpensiveAccess:", 0);
  [v8 setNetworkServiceType:3];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecPolicyNameAppleParsecService);
  sub_10004CBFC(v9, v10, v8, (SEL *)&selRef_set_tlsTrustPinningPolicyName_);
  objc_msgSend(v8, "set_usesNWLoader:", 1);
  objc_msgSend(v8, "set_disableAPWakeOnIdleConnections:", 1);
  sub_100009788(0LL, &qword_1001D35E0, &OBJC_CLASS___NSURLSession_ptr);
  id v11 = v8;
  sub_100048680();
  id v13 = sub_10004A08C(v11, v12, 0LL);
  uint64_t v20 = 0LL;
  uint64_t v21 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(33LL);
  uint64_t v14 = swift_bridgeObjectRelease();
  uint64_t v20 = 0xD00000000000001FLL;
  uint64_t v21 = 0x800000010016EDD0LL;
  uint64_t v15 = UUID.init()(v14);
  uint64_t v16 = UUID.uuidString.getter(v15);
  unint64_t v18 = v17;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v19._uint64_t countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  sub_10004CBFC(v20, v21, v13, (SEL *)&selRef_setSessionDescription_);

  *a1 = v13;
}

id sub_10004A08C(void *a1, uint64_t a2, void *a3)
{
  id v7 =  [(id)swift_getObjCClassFromMetadata(v3) sessionWithConfiguration:a1 delegate:a2 delegateQueue:a3];

  swift_unknownObjectRelease(a2);
  return v7;
}

uint64_t sub_10004A0F8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a1;
  uint64_t v10 = static os_signpost_type_t.begin.getter(v6);
  if (qword_1001D0550 != -1) {
    swift_once(&qword_1001D0550, sub_100034630);
  }
  uint64_t v11 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v10, &_mh_execute_header, v11, "setupContextManager", 19LL, 2LL);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  uint64_t v13 = type metadata accessor for ContextManager(0LL);
  uint64_t v14 = (void *)swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v15 = swift_retain(v9);
  uint64_t v16 = sub_10004CE58(v15, 60LL, 900LL, v14);
  *a2 = v16;
  a2[1] = &off_1001B7580;
  uint64_t v17 = static os_signpost_type_t.end.getter(v16);
  uint64_t v18 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v17, &_mh_execute_header, v18, "setupContextManager", 19LL, 2LL);
  return ((uint64_t (*)(char *, uint64_t))v12)(v8, v4);
}

uint64_t sub_10004A274@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 312);
  sub_10000C4AC();
  sub_10004A4B4(type metadata accessor for PegasusContext, a1);
  return swift_release(v3);
}

void sub_10004A2AC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PegasusContext(0LL);
  __chkstk_darwin(v2);
  sub_100009AEC();
  uint64_t v5 = v4 - v3;
  sub_10004D694(a1, v4 - v3, type metadata accessor for PegasusContext);
  sub_10000C4AC();
  sub_10004B6B8(v5, type metadata accessor for PegasusContext);
  sub_10001683C();
  sub_10004D784(a1, type metadata accessor for PegasusContext);
  sub_1000110D4();
}

uint64_t sub_10004A334()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  os_unfair_lock_lock(v1);
  swift_beginAccess(v0 + 16, v4, 0LL, 0LL);
  uint64_t v2 = *(void *)(v0 + 16);
  swift_retain(v2);
  os_unfair_lock_unlock(v1);
  return v2;
}

void sub_10004A38C()
{
}

void sub_10004A3B8()
{
  id v2 = *(id *)(v0 + 16);
  sub_10004EC18();
  sub_10004ECC0();
}

double sub_10004A3E8()
{
  double v2 = *(double *)(v0 + 16);
  sub_10004EC18();
  return v2;
}

uint64_t sub_10004A424()
{
  uint64_t v2 = *(unsigned int *)(v0 + 16);
  sub_10004EC18();
  return v2;
}

void sub_10004A458()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  sub_10004EB9C(v1);
  sub_10004EC68();
  sub_100014A40();
}

void sub_10004A4A8(uint64_t a1@<X8>)
{
}

void sub_10004A4B4(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2 + *(void *)(*(void *)v2 + 88LL);
  sub_100010BE4(v5, (uint64_t)v6, 0LL);
  sub_10004D694(v5, a2, a1);
  sub_100043554();
  sub_100014A40();
}

uint64_t sub_10004A50C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  sub_10004EC18();
  return v2;
}

uint64_t sub_10004A55C()
{
  return sub_1000110B8();
}

uint64_t sub_10004A5B0()
{
  uint64_t v1 = *(void *)(v0 + 328);
  sub_10004EC38();
  uint64_t v2 = sub_100010D08();
  sub_10004EC2C( v2,  &qword_1001D35C8,  (void (*)(void *, uint64_t))sub_100019BC4,  (uint64_t)&unk_1001D35D0,  &qword_1001D35D8);
  sub_100010D00();
  return sub_1000167DC(v1);
}

void sub_10004A604(void *a1@<X8>)
{
  id v2 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v3 = type metadata accessor for PegasusConfigURLProvider(0LL);
  a1[3] = v3;
  a1[4] = &protocol witness table for PegasusConfigURLProvider;
  uint64_t v4 = sub_10001B468(a1);
  *uint64_t v4 = v2;
  uint64_t v5 = (uint64_t)v4 + *(int *)(v3 + 20);
  id v6 = v2;
  static PegasusConfigURLProvider.getPegasusConfigCacheDirectoryURL(fileManager:)((uint64_t)v6, v5);
}

void sub_10004A694()
{
  uint64_t v1 = sub_10004ED84();
  type metadata accessor for UserAgent(v1);
  sub_10004EDE0();
  __chkstk_darwin(v2);
  sub_100009AEC();
  id v3 = objc_allocWithZone(&OBJC_CLASS____CPErrorFeedback);
  id v4 = v0;
  sub_10004CB5C((uint64_t)v0);
  uint64_t v10 = v5;
  id v6 = [objc_allocWithZone(_CPFeedbackPayload) initWithCodable:v5];
  [v6 setQueryId:0];
  if (v6)
  {
    sub_1000486D0();
    id v7 = v6;
    parsecdUserAgent.getter(v7);
    sub_1000A5CB4();

    sub_100010CA0();
    uint64_t v8 = sub_10004EDF4();
    v9(v8);
    sub_100019F1C();
  }

  else
  {
  }

void sub_10004A79C(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_100009B34(a1, &qword_1001D3698, &OBJC_CLASS___SFErrorFeedback_ptr);
  swift_errorRetain(a1);
  sub_1000C1A80(a1);
  uint64_t v5 = (void *)v4;
  sub_100009B34(v4, (unint64_t *)&unk_1001D36A0, &OBJC_CLASS____CPFeedbackPayload_ptr);
  id v6 = v5;
  sub_1000A4734(v6, 0LL);
  uint64_t v8 = v7;
  void v10[2] = v2;
  v10[3] = v7;
  uint64_t v9 = sub_10000941C(&qword_1001D1D20);
  OS_dispatch_queue.sync<A>(execute:)(&v11, sub_10004CE40, v10, v9);
}

uint64_t sub_10004A86C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v6 = sub_10000941C((uint64_t *)&unk_1001D36B0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UserAgent(0LL);
  __chkstk_darwin(v9);
  uint64_t v10 = type metadata accessor for SessionType(0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (*(uint64_t (**)(char *, void))(v12 + 104))( (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  enum case for SessionType.parsecd(_:));
  parsecdUserAgent.getter(v13);
  uint64_t v14 = type metadata accessor for SessionTokens(0LL);
  sub_100009654((uint64_t)v8, 1LL, 1LL, v14);
  uint64_t v15 = type metadata accessor for ClientSession(0LL);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  id v16 = a2;
  swift_retain(a1);
  uint64_t result = (uint64_t)sub_1000AA00C();
  uint64_t v18 = result;
  if (result)
  {
    sub_100017C98();
    uint64_t result = swift_release();
  }

  *a3 = v18 == 0;
  return result;
}

uint64_t sub_10004A9F4()
{
  return swift_unknownObjectRelease();
}

void sub_10004AA74(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (objc_class *)type metadata accessor for FlusherClient();
  id v5 = objc_allocWithZone(v4);
  uint64_t v6 = (void *)sub_10004ED50();
  id v7 = FlusherClient.init(connection:)(v6);
  a2[3] = v4;
  a2[4] = &off_1001B7938;
  *a2 = v7;
  sub_1000110D4();
}

uint64_t sub_10004AAEC()
{
  uint64_t v0 = sub_100010D08();
  sub_100047BE0(v0, (uint64_t)&unk_1001D35A8, &qword_1001D35B0);
  uint64_t v2 = v1;
  sub_100010D00();
  sub_10001683C();
  uint64_t v3 = sub_1000110B8();
  uint64_t v5 = sub_10004AB74(v3, v4, v2);
  swift_unknownObjectRelease();
  return v5;
}

uint64_t sub_10004AB74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000941C((uint64_t *)&unk_1001D5D20);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SessionLookupKey(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v25 - v14;
  sub_10004D694(a1, (uint64_t)&v25 - v14, type metadata accessor for SessionLookupKey);
  sub_10004D694((uint64_t)v15, (uint64_t)v13, type metadata accessor for SessionLookupKey);
  uint64_t v16 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v17 = (v16 + 16) & ~v16;
  uint64_t v18 = swift_allocObject(&unk_1001B3C28, v17 + v11, v16 | 7);
  sub_10004D890((uint64_t)v15, v18 + v17, type metadata accessor for SessionLookupKey);
  parsecdUserAgent.getter(v19);
  uint64_t v20 = type metadata accessor for UserAgent(0LL);
  sub_100009654((uint64_t)v8, 0LL, 1LL, v20);
  LOBYTE(v11) = sub_10004AF28(a2, a3, (uint64_t)v8, (uint64_t)v13);
  sub_100019C1C((uint64_t)v8, (uint64_t *)&unk_1001D5D20);
  sub_10004D784((uint64_t)v13, type metadata accessor for SessionLookupKey);
  if ((v11 & 1) != 0)
  {
    swift_release();
    swift_unknownObjectRetain(a2);
  }

  else
  {
    sub_100047A50();
    __chkstk_darwin(v21);
    *(&v25 - 2) = (uint64_t)sub_10004D734;
    *(&v25 - 1) = v18;
    sub_1000D1940(sub_10004D7AC);
    uint64_t v23 = v22;
    swift_release();
    swift_unknownObjectRelease();
    if (v23)
    {
      a2 = *(void *)(v23 + 64);
      swift_unknownObjectRetain(a2);
      swift_release();
    }

    else
    {
      return 0LL;
    }
  }

  return a2;
}

uint64_t sub_10004ADA4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000108B8((void *)(v0 + 336));
  return v0;
}

uint64_t sub_10004AEC8()
{
  return swift_deallocClassInstance(v0, 376LL, 7LL);
}

uint64_t type metadata accessor for Assembly()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd8Assembly);
}

uint64_t type metadata accessor for Assembly.Clock()
{
  return objc_opt_self(&OBJC_CLASS____TtCC7parsecd8AssemblyP33_F0E1FD14419439D79562AD28BDFB672A5Clock);
}

uint64_t sub_10004AF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = (char *)a4;
  uint64_t v52 = a3;
  uint64_t v50 = a1;
  uint64_t v51 = sub_10000941C((uint64_t *)&unk_1001D36C0);
  __chkstk_darwin(v51);
  uint64_t v53 = (uint64_t)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_10000941C((uint64_t *)&unk_1001D5D20);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v48 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v46 - v8;
  uint64_t v54 = type metadata accessor for UserAgent(0LL);
  uint64_t v49 = *(void *)(v54 - 8);
  uint64_t v10 = __chkstk_darwin(v54);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v46 - v13;
  uint64_t v47 = type metadata accessor for SessionTokens(0LL);
  __chkstk_darwin(v47);
  uint64_t v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for UUID(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v46 - v22;
  uint64_t v24 = type metadata accessor for SessionLookupKey(0LL);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v46 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10004D694((uint64_t)v55, (uint64_t)v26, v27);
  if (swift_getEnumCaseMultiPayload(v26, v24) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v26, v17);
    sub_1000A5C20((uint64_t)v16);
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, &v16[*(int *)(v47 + 20)], v17);
    sub_10004D784((uint64_t)v16, type metadata accessor for SessionTokens);
    char v38 = static UUID.== infix(_:_:)(v21, v23);
    uint64_t v39 = *(void (**)(char *, uint64_t))(v18 + 8);
    v39(v21, v17);
    v39(v23, v17);
    return v38 & 1;
  }

  uint64_t v55 = v12;
  uint64_t v28 = (uint64_t)v48;
  uint64_t v29 = v49;
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
  uint64_t v31 = v54;
  v30(v14, v26, v54);
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v9, v14, v31);
  sub_100009654((uint64_t)v9, 0LL, 1LL, v31);
  uint64_t v32 = v53;
  uint64_t v33 = v53 + *(int *)(v51 + 48);
  sub_10004E724(v52, v53, (uint64_t *)&unk_1001D5D20);
  sub_10004E724((uint64_t)v9, v33, (uint64_t *)&unk_1001D5D20);
  int v34 = sub_100010708(v32, 1LL, v31);
  uint64_t v35 = v32;
  uint64_t v36 = v14;
  uint64_t v37 = v29;
  if (v34 != 1)
  {
    sub_10004E724(v35, v28, (uint64_t *)&unk_1001D5D20);
    if (sub_100010708(v33, 1LL, v31) != 1)
    {
      uint64_t v41 = (uint64_t)v55;
      v30(v55, (char *)v33, v31);
      sub_100008FF4( (unint64_t *)&unk_1001D55E0,  (uint64_t (*)(uint64_t))&type metadata accessor for UserAgent);
      uint64_t v43 = v35;
      char v38 = dispatch thunk of static Equatable.== infix(_:_:)(v28, v41, v31, v42);
      uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
      v44(v41, v31);
      sub_100019C1C((uint64_t)v9, (uint64_t *)&unk_1001D5D20);
      v44((uint64_t)v36, v31);
      v44(v28, v31);
      sub_100019C1C(v43, (uint64_t *)&unk_1001D5D20);
      return v38 & 1;
    }

    sub_100019C1C((uint64_t)v9, (uint64_t *)&unk_1001D5D20);
    uint64_t v40 = *(void (**)(char *, uint64_t))(v29 + 8);
    v40(v14, v31);
    v40((char *)v28, v31);
    goto LABEL_8;
  }

  sub_100019C1C((uint64_t)v9, (uint64_t *)&unk_1001D5D20);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v31);
  if (sub_100010708(v33, 1LL, v31) != 1)
  {
LABEL_8:
    sub_100019C1C(v35, (uint64_t *)&unk_1001D36C0);
    char v38 = 0;
    return v38 & 1;
  }

  sub_100019C1C(v35, (uint64_t *)&unk_1001D5D20);
  char v38 = 1;
  return v38 & 1;
}

uint64_t sub_10004B3C8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, char *))
{
  uint64_t v4 = sub_10000941C((uint64_t *)&unk_1001D5D20);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  swift_unknownObjectRetain(v7);
  sub_100082F58();
  char v9 = a2(v7, v8, v6);
  swift_unknownObjectRelease();
  sub_100019C1C((uint64_t)v6, (uint64_t *)&unk_1001D5D20);
  return v9 & 1;
}

void sub_10004B488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3));
  NSString v6 = String._bridgeToObjectiveC()();
  sub_1000110A8();
  [v5 initWithMachServiceName:v6 options:a3];

  sub_1000110D4();
}

void sub_10004B4F0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v2 + sub_10000BDD4(v0 + 24) = a2;
  swift_bridgeObjectRetain(a2);
  sub_10001460C();
  sub_100043554();
  sub_1000325E4();
  sub_1000413FC();
}

void sub_10004B544(double a1)
{
  *(double *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  sub_10004EC18();
}

void sub_10004B580()
{
}

void sub_10004B5B8(int a1)
{
  *(_DWORD *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  sub_10004EC68();
  sub_100014A40();
}

void sub_10004B5E8(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 88LL);
  sub_100010BE4(v3, (uint64_t)v7, 33LL);
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(v3, a1, v4);
  sub_10004ECB8(v6);
  sub_10004EC68();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  sub_1000413FC();
}

void sub_10004B668(void *a1)
{
  uint64_t v4 = *(void **)(v1 + 16);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  id v5 = a1;

  sub_10004EC68();
  sub_100014A40();
}

void sub_10004B6AC(uint64_t a1)
{
}

void sub_10004B6B8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v5 = v2 + *(void *)(*(void *)v2 + 88LL);
  sub_100010BE4(v5, (uint64_t)v9, 33LL);
  sub_10004CBD0(a1, v5, a2);
  sub_10004ECB8(v6);
  sub_100043554();
  uint64_t v7 = sub_10004EDF4();
  sub_10004D784(v7, v8);
  sub_100014A40();
}

void sub_10004B71C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = *(os_unfair_lock_s **)(v3 + 40);
  os_unfair_lock_lock(v7);
  sub_10004EB7C(v8);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *(void *)(v3 + sub_10000BDD4(v0 + 24) = v4;
  *(_BYTE *)(v3 + swift_unknownObjectWeakDestroy(v0 + 32) = a3;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v7);
  sub_1000110A8();
  sub_1000413FC();
}

uint64_t sub_10004B77C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = type metadata accessor for BiomeDatabaseManager();
  memset(v8, 0, sizeof(v8));
  uint64_t v9 = 0LL;
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  uint64_t v6 = swift_retain(v3);
  uint64_t result = sub_10004D8BC(v6, (uint64_t)v8, v5);
  *a2 = result;
  return result;
}

uint64_t sub_10004B7E8@<X0>(uint64_t *a1@<X0>, char **a2@<X8>)
{
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a1;
  uint64_t v10 = static os_signpost_type_t.begin.getter(v6);
  if (qword_1001D0550 != -1) {
    swift_once(&qword_1001D0550, sub_100034630);
  }
  uint64_t v11 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v10, &_mh_execute_header, v11, "locationManager", 15LL, 2LL);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  uint64_t v13 = (char *)objc_allocWithZone((Class)type metadata accessor for LocationManager(0LL));
  uint64_t v14 = swift_retain(v9);
  uint64_t v15 = sub_10004DA38(v14, 0LL, 0LL, v13);
  *a2 = v15;
  a2[1] = (char *)&off_1001B3718;
  uint64_t v16 = static os_signpost_type_t.end.getter(v15);
  uint64_t v17 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v16, &_mh_execute_header, v17, "locationManager", 15LL, 2LL);
  return ((uint64_t (*)(char *, uint64_t))v12)(v8, v4);
}

uint64_t sub_10004B95C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a1;
  uint64_t v10 = static os_signpost_type_t.begin.getter(v6);
  if (qword_1001D0550 != -1) {
    swift_once(&qword_1001D0550, sub_100034630);
  }
  uint64_t v11 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v10, &_mh_execute_header, v11, "bagController", 13LL, 2LL);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  uint64_t v13 = type metadata accessor for ConfigurationController();
  uint64_t v14 = swift_allocObject(v13, 64LL, 7LL);
  uint64_t v15 = swift_retain(v9);
  uint64_t v16 = sub_10004DFE8(v15, v14);
  *a2 = v16;
  a2[1] = (uint64_t)&off_1001B7C68;
  uint64_t v17 = static os_signpost_type_t.end.getter(v16);
  uint64_t v18 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v17, &_mh_execute_header, v18, "bagController", 13LL, 2LL);
  return ((uint64_t (*)(char *, uint64_t))v12)(v8, v4);
}

uint64_t sub_10004BAD0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a1;
  uint64_t v10 = static os_signpost_type_t.begin.getter(v6);
  if (qword_1001D0550 != -1) {
    swift_once(&qword_1001D0550, sub_100034630);
  }
  uint64_t v11 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v10, &_mh_execute_header, v11, "downloadManager", 15LL, 2LL);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  uint64_t v13 = (char *)objc_allocWithZone((Class)type metadata accessor for DownloadManager());
  uint64_t v14 = swift_retain(v9);
  id v15 = sub_10004E210(v14, v13);
  *a2 = v15;
  a2[1] = &off_1001B4938;
  uint64_t v16 = static os_signpost_type_t.end.getter(v15);
  uint64_t v17 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v16, &_mh_execute_header, v17, "downloadManager", 15LL, 2LL);
  return ((uint64_t (*)(char *, uint64_t))v12)(v8, v4);
}

uint64_t sub_10004BC3C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a1;
  uint64_t v10 = static os_signpost_type_t.begin.getter(v6);
  if (qword_1001D0550 != -1) {
    swift_once(&qword_1001D0550, sub_100034630);
  }
  uint64_t v11 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v10, &_mh_execute_header, v11, "clientStateManager", 18LL, 2LL);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  uint64_t v13 = type metadata accessor for ClientStateManager();
  uint64_t v14 = swift_allocObject(v13, 40LL, 7LL);
  *(void *)(v14 + sub_10000BDD4(v0 + 24) = 0LL;
  uint64_t v15 = swift_unknownObjectWeakInit(v14 + 16, 0LL);
  *(void *)(v14 + sub_10000BDD4(v0 + 24) = &off_1001B3A58;
  swift_unknownObjectWeakAssign(v15, v9);
  uint64_t v16 = type metadata accessor for SessionType(0LL);
  uint64_t v17 = type metadata accessor for ClientState(0LL);
  sub_100008FF4( (unint64_t *)&qword_1001D1108,  (uint64_t (*)(uint64_t))&type metadata accessor for SessionType);
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)(&_swiftEmptyArrayStorage, v16, v17, v18);
  uint64_t v20 = sub_10000941C((uint64_t *)&unk_1001D37B0);
  uint64_t v21 = swift_allocObject(v20, 28LL, 7LL);
  *(_DWORD *)(v21 + sub_10000BDD4(v0 + 24) = 0;
  *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = v19;
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 32) = v21;
  *a2 = v14;
  a2[1] = (uint64_t)&off_1001B8AC8;
  uint64_t v22 = static os_signpost_type_t.end.getter(v21);
  uint64_t v23 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v22, &_mh_execute_header, v23, "clientStateManager", 18LL, 2LL);
  return ((uint64_t (*)(char *, uint64_t))v12)(v8, v4);
}

uint64_t sub_10004BE40@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a1;
  uint64_t v10 = static os_signpost_type_t.begin.getter(v6);
  if (qword_1001D0550 != -1) {
    swift_once(&qword_1001D0550, sub_100034630);
  }
  uint64_t v11 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v10, &_mh_execute_header, v11, "parsecSessionManager", 20LL, 2LL);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  uint64_t v13 = type metadata accessor for ClientSessionManager();
  memset(v18, 0, sizeof(v18));
  uint64_t v19 = 0LL;
  swift_allocObject(v13, 153LL, 7LL);
  swift_retain(v9);
  sub_10009F704();
  *a2 = v14;
  a2[1] = &off_1001B6BC8;
  uint64_t v15 = static os_signpost_type_t.end.getter(v14);
  uint64_t v16 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v15, &_mh_execute_header, v16, "parsecSessionManager", 20LL, 2LL);
  return ((uint64_t (*)(char *, uint64_t))v12)(v8, v4);
}

uint64_t sub_10004BFDC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a1;
  uint64_t v10 = static os_signpost_type_t.begin.getter(v6);
  if (qword_1001D0550 != -1) {
    swift_once(&qword_1001D0550, sub_100034630);
  }
  uint64_t v11 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v10, &_mh_execute_header, v11, "persistentStorage", 17LL, 2LL);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  uint64_t v13 = type metadata accessor for ParsecPersistentStorage();
  uint64_t v14 = swift_allocObject(v13, 41LL, 7LL);
  *(void *)(v14 + sub_10000BDD4(v0 + 24) = 0LL;
  uint64_t v15 = swift_unknownObjectWeakInit(v14 + 16, 0LL);
  *(_BYTE *)(v14 + 40) = 1;
  *(void *)(v14 + sub_10000BDD4(v0 + 24) = &off_1001B3A58;
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 32) = 0LL;
  uint64_t v16 = swift_unknownObjectWeakAssign(v15, v9);
  *a2 = v14;
  a2[1] = (uint64_t)&off_1001B8880;
  uint64_t v17 = static os_signpost_type_t.end.getter(v16);
  uint64_t v18 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v17, &_mh_execute_header, v18, "persistentStorage", 17LL, 2LL);
  return ((uint64_t (*)(char *, uint64_t))v12)(v8, v4);
}

uint64_t sub_10004C16C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a1;
  uint64_t v10 = static os_signpost_type_t.begin.getter(v6);
  if (qword_1001D0550 != -1) {
    swift_once(&qword_1001D0550, sub_100034630);
  }
  uint64_t v11 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v10, &_mh_execute_header, v11, "visibilityManager", 17LL, 2LL);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  uint64_t v13 = type metadata accessor for VisibilityManager();
  uint64_t v14 = (void *)swift_allocObject(v13, 48LL, 7LL);
  uint64_t v15 = swift_retain(v9);
  uint64_t v16 = sub_10004E4F0(v15, v14);
  *a2 = v16;
  a2[1] = &off_1001B28F8;
  uint64_t v17 = static os_signpost_type_t.end.getter(v16);
  uint64_t v18 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v17, &_mh_execute_header, v18, "visibilityManager", 17LL, 2LL);
  return ((uint64_t (*)(char *, uint64_t))v12)(v8, v4);
}

uint64_t sub_10004C2E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = v2;
  id v4 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v5 = type metadata accessor for DevicePersistentDataManager(0LL);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  uint64_t result = sub_100079E50(v3, (uint64_t)v4);
  a1[3] = v5;
  a1[4] = (uint64_t)&off_1001B4E98;
  *a1 = result;
  return result;
}

uint64_t sub_10004C370@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a1;
  uint64_t v10 = static os_signpost_type_t.begin.getter(v6);
  if (qword_1001D0550 != -1) {
    swift_once(&qword_1001D0550, sub_100034630);
  }
  uint64_t v11 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)( v10,  &_mh_execute_header,  v11,  "trialSearchServerExperimentsProvider",  36LL,  2LL);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  uint64_t v13 = type metadata accessor for TrialExperimentsProvider();
  uint64_t v14 = swift_allocObject(v13, 64LL, 7LL);
  uint64_t v15 = sub_10000941C((uint64_t *)&unk_1001D37A0);
  swift_allocObject(v15, 32LL, 7LL);
  swift_retain(v9);
  sub_10000B644(0LL);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v16;
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 32) = 0LL;
  swift_unknownObjectWeakInit(v14 + 24, 0LL);
  *(void *)(v14 + 48) = 0LL;
  *(void *)(v14 + sub_10000BDD4(v0 + 56) = 0LL;
  sub_100048A30();
  uint64_t v18 = v17;
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 32) = v19;
  swift_unknownObjectWeakAssign(v14 + 24, v17);
  swift_unknownObjectRelease(v18);
  *(_DWORD *)(v14 + 40) = 2;
  sub_10003FB04();
  sub_10003F270();
  uint64_t v20 = swift_release();
  *a2 = v14;
  uint64_t v21 = static os_signpost_type_t.end.getter(v20);
  uint64_t v22 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)( v21,  &_mh_execute_header,  v22,  "trialSearchServerExperimentsProvider",  36LL,  2LL);
  return ((uint64_t (*)(char *, uint64_t))v12)(v8, v4);
}

uint64_t sub_10004C558@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a1;
  uint64_t v10 = static os_signpost_type_t.begin.getter(v6);
  if (qword_1001D0550 != -1) {
    swift_once(&qword_1001D0550, sub_100034630);
  }
  uint64_t v11 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)( v10,  &_mh_execute_header,  v11,  "trialSiriServerExperimentsProvider",  34LL,  2LL);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  uint64_t v13 = type metadata accessor for TrialExperimentsProvider();
  uint64_t v14 = swift_allocObject(v13, 64LL, 7LL);
  uint64_t v15 = sub_10000941C((uint64_t *)&unk_1001D37A0);
  swift_allocObject(v15, 32LL, 7LL);
  swift_retain(v9);
  sub_10000B644(0LL);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v16;
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 32) = 0LL;
  swift_unknownObjectWeakInit(v14 + 24, 0LL);
  *(void *)(v14 + 48) = 0LL;
  *(void *)(v14 + sub_10000BDD4(v0 + 56) = 0LL;
  sub_100048A30();
  uint64_t v18 = v17;
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 32) = v19;
  swift_unknownObjectWeakAssign(v14 + 24, v17);
  swift_unknownObjectRelease(v18);
  *(_DWORD *)(v14 + 40) = 3;
  sub_10003FB04();
  sub_10003F270();
  uint64_t v20 = swift_release();
  *a2 = v14;
  uint64_t v21 = static os_signpost_type_t.end.getter(v20);
  uint64_t v22 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)( v21,  &_mh_execute_header,  v22,  "trialSiriServerExperimentsProvider",  34LL,  2LL);
  return ((uint64_t (*)(char *, uint64_t))v12)(v8, v4);
}

uint64_t sub_10004C740@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a1;
  uint64_t v10 = static os_signpost_type_t.begin.getter(v6);
  if (qword_1001D0550 != -1) {
    swift_once(&qword_1001D0550, sub_100034630);
  }
  uint64_t v11 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v10, &_mh_execute_header, v11, "trialDeviceExperimentsProvider", 30LL, 2LL);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  uint64_t v13 = type metadata accessor for TrialExperimentsProvider();
  uint64_t v14 = swift_allocObject(v13, 64LL, 7LL);
  uint64_t v15 = sub_10000941C((uint64_t *)&unk_1001D37A0);
  swift_allocObject(v15, 32LL, 7LL);
  swift_retain(v9);
  sub_10000B644(0LL);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v16;
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 32) = 0LL;
  swift_unknownObjectWeakInit(v14 + 24, 0LL);
  *(void *)(v14 + 48) = 0LL;
  *(void *)(v14 + sub_10000BDD4(v0 + 56) = 0LL;
  sub_100048A30();
  uint64_t v18 = v17;
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 32) = v19;
  swift_unknownObjectWeakAssign(v14 + 24, v17);
  swift_unknownObjectRelease(v18);
  *(_DWORD *)(v14 + 40) = 0;
  sub_10003FB04();
  sub_10003F270();
  uint64_t v20 = swift_release();
  *a2 = v14;
  uint64_t v21 = static os_signpost_type_t.end.getter(v20);
  uint64_t v22 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v21, &_mh_execute_header, v22, "trialDeviceExperimentsProvider", 30LL, 2LL);
  return ((uint64_t (*)(char *, uint64_t))v12)(v8, v4);
}

uint64_t sub_10004C924@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a1;
  uint64_t v10 = static os_signpost_type_t.begin.getter(v6);
  if (qword_1001D0550 != -1) {
    swift_once(&qword_1001D0550, sub_100034630);
  }
  uint64_t v11 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v10, &_mh_execute_header, v11, "amsBaselineSiriTreatmentProvider", 32LL, 2LL);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  uint64_t v13 = type metadata accessor for AMSBaselineTreatmentProvider();
  uint64_t v14 = (void *)swift_allocObject(v13, 56LL, 7LL);
  uint64_t v15 = swift_retain(v9);
  uint64_t v16 = sub_10004E628(v15, 0x65735F6563696F76LL, 0xEC00000068637261LL, v14);
  a2[3] = v13;
  a2[4] = &off_1001B4DC8;
  *a2 = v16;
  uint64_t v17 = static os_signpost_type_t.end.getter(v16);
  uint64_t v18 = qword_1001EDCB0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v17, &_mh_execute_header, v18, "amsBaselineSiriTreatmentProvider", 32LL, 2LL);
  return ((uint64_t (*)(char *, uint64_t))v12)(v8, v4);
}

char *sub_10004CABC@<X0>(uint64_t *a1@<X0>, char **a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(APSEnvironmentDevelopment);
  uint64_t v6 = v5;
  uint64_t v7 = *(void **)(v3 + 248);
  uint64_t v8 = (objc_class *)type metadata accessor for CloudNotificationChannelConnection();
  id v9 = objc_allocWithZone(v8);
  uint64_t result = sub_10003B990(v4, v6, 0xD000000000000011LL, 0x800000010016AB00LL, v7);
  a2[3] = (char *)v8;
  a2[4] = (char *)&off_1001B30B0;
  *a2 = result;
  return result;
}

void sub_10004CB5C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v3 = (void *)_convertErrorToNSError(_:)(a1);
    swift_errorRelease(a1);
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  [v1 initWithError:v3];

  sub_1000110D4();
}

void sub_10004CBB4(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {

  }
  else {
    swift_release(a2);
  }
}

uint64_t sub_10004CBC4(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    a1 = a2;
  }
  return swift_release(a1);
}

void sub_10004CBD0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_10004EC40(a1, a2, a3);
  sub_100010F18(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 24LL));
  sub_100009A90();
}

void sub_10004CBFC(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  id v6 = String._bridgeToObjectiveC()();
  sub_1000110A8();
  objc_msgSend(a3, *a4, v6);
}

void sub_10004CC50(uint64_t a1)
{
}

uint64_t sub_10004CE40@<X0>(BOOL *a1@<X8>)
{
  return sub_10004A86C(*(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

void *sub_10004CE58(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v82 = a2;
  uint64_t v83 = a3;
  uint64_t v85 = a1;
  uint64_t v5 = type metadata accessor for PegasusContext(0LL);
  __chkstk_darwin(v5);
  uint64_t v84 = (uint64_t)v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v86 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v80 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v8 = (char *)v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a4[3] = 0LL;
  a4[5] = 0LL;
  uint64_t v81 = a4 + 4;
  swift_unknownObjectWeakInit(a4 + 4, 0LL);
  uint64_t v9 = type metadata accessor for Locker();
  uint64_t v10 = swift_allocObject(v9, 24LL, 7LL);
  uint64_t v11 = (_DWORD *)swift_slowAlloc(4LL, -1LL);
  *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  *uint64_t v11 = 0;
  a4[6] = v10;
  uint64_t v12 = OBJC_IVAR____TtC7parsecd14ContextManager_locker;
  uint64_t v13 = swift_allocObject(v9, 24LL, 7LL);
  uint64_t v14 = (_DWORD *)swift_slowAlloc(4LL, -1LL);
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
  *uint64_t v14 = 0;
  *(void *)((char *)a4 + v12) = v13;
  uint64_t v15 = (char *)a4 + OBJC_IVAR____TtC7parsecd14ContextManager_logger;
  if (qword_1001D0540 != -1) {
    swift_once(&qword_1001D0540, sub_100034544);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = sub_1000093D0(v16, (uint64_t)qword_1001EDC90);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL))(v15, v17, v16);
  uint64_t v79 = OBJC_IVAR____TtC7parsecd14ContextManager_contextAccessQueue;
  v78[3] = sub_100009788(0LL, (unint64_t *)&qword_1001D43D0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v18 = type metadata accessor for DispatchQoS(0LL);
  v78[4] = v78;
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static DispatchQoS.userInteractive.getter(v19);
  uint64_t v22 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  v78[2] = v78;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void))(v25 + 104))( v24,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  uint64_t v26 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  v78[1] = v78;
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)v78 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v87 = &_swiftEmptyArrayStorage;
  sub_100008FF4((unint64_t *)&qword_1001D1AD0, v29);
  uint64_t v31 = v30;
  uint64_t v32 = sub_10000941C((uint64_t *)&unk_1001D3780);
  sub_100025F50((unint64_t *)&qword_1001D1AD8, (uint64_t *)&unk_1001D3780);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v87, v32, v33, v26, v31);
  uint64_t v34 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000024LL,  0x800000010016ED60LL,  v21,  v28,  v24,  0LL);
  *(void *)((char *)a4 + v79) = v34;
  *(void *)((char *)a4 + OBJC_IVAR____TtC7parsecd14ContextManager__parsecSubscriptionManager) = 0LL;
  *(void *)((char *)a4 + OBJC_IVAR____TtC7parsecd14ContextManager__contextProviderInterface) = 0LL;
  *(void *)((char *)a4 + OBJC_IVAR____TtC7parsecd14ContextManager_notBagFetchableSpan) = 0LL;
  uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v36 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "ContextManager is created", v37, 2u);
    swift_slowDealloc(v37, -1LL, -1LL);
  }

  uint64_t v38 = v85;
  sub_1000489B0();
  a4[2] = v39;
  uint64_t v40 = static os_signpost_type_t.begin.getter(v39);
  if (qword_1001D0558 != -1) {
    swift_once(&qword_1001D0558, sub_100034684);
  }
  uint64_t v41 = qword_1001EDCB8;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v40, &_mh_execute_header, v41, "lifetimeSpanInit", 16LL, 2LL);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v80 + 8);
  uint64_t v43 = v86;
  v42(v8, v86);
  uint64_t v44 = a4[2];
  uint64_t v45 = sub_10000941C((uint64_t *)&unk_1001D3790);
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  uint64_t v46 = (void *)swift_retain(v44);
  sub_1000425B0(v46, 0, (uint64_t)"enableTelemetry=YES", 19LL, 2, (uint64_t)&_swiftEmptyArrayStorage);
  a4[3] = v47;
  uint64_t v48 = swift_release();
  uint64_t v49 = static os_signpost_type_t.end.getter(v48);
  uint64_t v50 = qword_1001EDCB8;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v49, &_mh_execute_header, v50, "lifetimeSpanInit", 16LL, 2LL);
  uint64_t v51 = ((uint64_t (*)(char *, uint64_t))v42)(v8, v43);
  uint64_t v52 = static os_signpost_type_t.begin.getter(v51);
  uint64_t v53 = qword_1001EDCB8;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v52, &_mh_execute_header, v53, "configuration", 13LL, 2LL);
  uint64_t v54 = ((uint64_t (*)(char *, uint64_t))v42)(v8, v43);
  uint64_t v55 = (void *)((char *)a4 + OBJC_IVAR____TtC7parsecd14ContextManager_configuration);
  uint64_t v56 = v83;
  *uint64_t v55 = v82;
  v55[1] = v56;
  uint64_t v57 = static os_signpost_type_t.end.getter(v54);
  uint64_t v58 = qword_1001EDCB8;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v57, &_mh_execute_header, v58, "configuration", 13LL, 2LL);
  v42(v8, v43);
  a4[5] = &off_1001B3A58;
  swift_unknownObjectWeakAssign(v81, v38);
  uint64_t v59 = v84;
  sub_10004A274(v84);
  sub_10004D890( v59,  (uint64_t)a4 + OBJC_IVAR____TtC7parsecd14ContextManager_context,  type metadata accessor for PegasusContext);
  sub_1000478B0();
  uint64_t v61 = v60;
  LOBYTE(v59) = sub_1000C2D04();
  uint64_t v62 = swift_unknownObjectRelease(v61);
  if ((v59 & 1) == 0)
  {
    uint64_t v63 = a4[2];
    swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
    uint64_t v64 = (void *)swift_retain(v63);
    sub_1000425B0(v64, 2, (uint64_t)"enableTelemetry=YES", 19LL, 2, (uint64_t)&_swiftEmptyArrayStorage);
    *(void *)((char *)a4 + OBJC_IVAR____TtC7parsecd14ContextManager_notBagFetchableSpan) = v65;
    uint64_t v62 = swift_release();
  }

  uint64_t v66 = (os_log_s *)Logger.logObject.getter(v62);
  os_log_type_t v67 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v66, v67))
  {
    uint64_t v68 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v68 = 0;
    _os_log_impl((void *)&_mh_execute_header, v66, v67, "Setting up listener for context updates", v68, 2u);
    swift_slowDealloc(v68, -1LL, -1LL);
  }

  id v69 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  [v69 addObserver:a4 selector:"updateContext:" name:@"com.apple.parsecd.contextUpdate" object:0];

  uint64_t v71 = static os_signpost_type_t.begin.getter(v70);
  uint64_t v72 = qword_1001EDCB8;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v71, &_mh_execute_header, v72, "ensureComponents", 16LL, 2LL);
  uint64_t v73 = v86;
  v42(v8, v86);
  sub_1000BAB84();
  uint64_t v75 = static os_signpost_type_t.end.getter(v74);
  uint64_t v76 = qword_1001EDCB8;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v75, &_mh_execute_header, v76, "ensureComponents", 16LL, 2LL);
  swift_release();
  v42(v8, v73);
  return a4;
}

uint64_t type metadata accessor for SessionLookupKey(uint64_t a1)
{
  uint64_t result = qword_1001D3860;
  if (!qword_1001D3860) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SessionLookupKey);
  }
  return result;
}

void sub_10004D694(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_10004EC40(a1, a2, a3);
  sub_10004EB9C(v3);
  sub_100009A90();
}

uint64_t sub_10004D6B4()
{
  uint64_t v1 = type metadata accessor for SessionLookupKey(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  else {
    uint64_t v6 = type metadata accessor for UUID(0LL);
  }
  sub_100019DA4(v6);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10004D734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(type metadata accessor for SessionLookupKey(0LL) - 8) + 80LL);
  return sub_10004AF28(v5, v4, a3, v3 + ((v7 + 16) & ~v7));
}

void sub_10004D784(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2(0LL);
  sub_100019DA4(v2);
  sub_100009A90();
}

uint64_t sub_10004D7AC(uint64_t a1)
{
  return sub_10004B3C8(a1, *(uint64_t (**)(uint64_t, uint64_t, char *))(v1 + 16));
}

void sub_10004D7B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + sub_10000BDD4(v0 + 24) = v2;
  *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_100009A90();
}

uint64_t sub_10004D7F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001D36D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004D83C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10004D860()
{
  return sub_100049874(v0);
}

uint64_t sub_10004D868(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004D878(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10004D880(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_unknownObjectRelease(a1);
  }
  else {
    return swift_release(a2);
  }
}

void sub_10004D890(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_10004EC40(a1, a2, a3);
  sub_100010F18(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_100009A90();
}

uint64_t sub_10004D8BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + sub_10000BDD4(v0 + 24) = 0LL;
  uint64_t v6 = swift_unknownObjectWeakInit(a3 + 16, 0LL);
  *(void *)(a3 + sub_10000BDD4(v0 + 24) = &off_1001B3A58;
  swift_unknownObjectWeakAssign(v6, a1);
  sub_10004E724(a2, (uint64_t)&v14, &qword_1001D16A8);
  if (v15)
  {
    swift_release();
    sub_100019C1C(a2, &qword_1001D16A8);
    sub_100019BC4(&v14, (uint64_t)&v16);
  }

  else
  {
    uint64_t v7 = type metadata accessor for WritableSessionDatabase();
    id v8 = [(id)objc_opt_self(NSFileManager) defaultManager];
    uint64_t v9 = type metadata accessor for BiomeStreamsLedger();
    uint64_t v10 = swift_allocObject(v9, 32LL, 7LL);
    *(void *)(v10 + sub_10000BDD4(v0 + 24) = 0LL;
    uint64_t v11 = swift_unknownObjectWeakInit(v10 + 16, 0LL);
    *(void *)(v10 + sub_10000BDD4(v0 + 24) = &off_1001B3A58;
    swift_unknownObjectWeakAssign(v11, a1);
    uint64_t v17 = v9;
    uint64_t v18 = &off_1001B5420;
    *(void *)&__int128 v16 = v10;
    uint64_t v12 = WritableSessionDatabase.__allocating_init(fileManager:ledger:)(v8, &v16);
    uint64_t v17 = v7;
    uint64_t v18 = &protocol witness table for WritableSessionDatabase;
    swift_release();
    *(void *)&__int128 v16 = v12;
    sub_100019C1C(a2, &qword_1001D16A8);
    sub_100019C1C((uint64_t)&v14, &qword_1001D16A8);
  }

  sub_100019BC4(&v16, a3 + 32);
  return a3;
}

char *sub_10004DA38(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v61 = a3;
  uint64_t v63 = a2;
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v59 - v11;
  uint64_t v13 = &a4[OBJC_IVAR____TtC7parsecd15LocationManager_assembly];
  *((void *)v13 + 1) = 0LL;
  swift_unknownObjectWeakInit(v13, 0LL);
  __int128 v14 = &a4[OBJC_IVAR____TtC7parsecd15LocationManager_locationService];
  *(void *)__int128 v14 = 0LL;
  *((void *)v14 + 1) = 0LL;
  uint64_t v15 = OBJC_IVAR____TtC7parsecd15LocationManager_geoCoder;
  id v16 = objc_allocWithZone(&OBJC_CLASS___CLGeocoder);
  uint64_t v17 = a4;
  *(void *)&a4[v15] = [v16 init];
  *(void *)&v17[OBJC_IVAR____TtC7parsecd15LocationManager_geoLocation] = 0LL;
  *(void *)&v17[OBJC_IVAR____TtC7parsecd15LocationManager_lastGeoLocationUpdate] = 0LL;
  *(void *)&v17[OBJC_IVAR____TtC7parsecd15LocationManager_geoPlacemark] = 0LL;
  uint64_t v18 = &v17[OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationLatLng];
  *(void *)uint64_t v18 = 0LL;
  *((void *)v18 + 1) = 0xE000000000000000LL;
  sub_100009654((uint64_t)&v17[OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationAge], 1LL, 1LL, v6);
  uint64_t v19 = &v17[OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationSource];
  *(void *)uint64_t v19 = 0LL;
  *((void *)v19 + 1) = 0xE000000000000000LL;
  uint64_t v20 = &v17[OBJC_IVAR____TtC7parsecd15LocationManager_geoClientMetadata];
  *(void *)uint64_t v20 = 0LL;
  *((void *)v20 + 1) = 0xE000000000000000LL;
  uint64_t v21 = &v17[OBJC_IVAR____TtC7parsecd15LocationManager_lookupGeoLocationLatLng];
  *(void *)uint64_t v21 = 0LL;
  *((void *)v21 + 1) = 0xE000000000000000LL;
  uint64_t v22 = OBJC_IVAR____TtC7parsecd15LocationManager__locationAuthorizationStatus;
  uint64_t v23 = sub_10000941C(&qword_1001D37D8);
  swift_allocObject(v23, 32LL, 7LL);
  uint64_t v24 = sub_10000B66C(2);
  *(void *)&v17[v22] = v24;
  uint64_t v25 = OBJC_IVAR____TtC7parsecd15LocationManager__lastLocationUpdateDate;
  static Date.distantPast.getter(v24);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  uint64_t v26 = sub_10000941C((uint64_t *)&unk_1001D37E0);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  uint64_t v27 = sub_10000B690((uint64_t)v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  *(void *)&v17[v25] = v27;
  *((void *)v13 + 1) = &off_1001B3A58;
  uint64_t v62 = a1;
  swift_unknownObjectWeakAssign(v13, a1);
  uint64_t v28 = *(void **)(a1 + 256);
  *(void *)&v17[OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue] = v28;
  id v29 = v28;

  uint64_t v30 = (objc_class *)type metadata accessor for LocationManager(0LL);
  v66.receiver = v17;
  v66.super_class = v30;
  uint64_t v31 = (char *)objc_msgSendSuper2(&v66, "init");
  uint64_t v32 = &v31[OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationSource];
  *(void *)uint64_t v32 = 0x6E692E726F727265LL;
  *((void *)v32 + 1) = 0xEA00000000007469LL;
  uint64_t v33 = v31;
  swift_bridgeObjectRelease();
  uint64_t v34 = &v33[OBJC_IVAR____TtC7parsecd15LocationManager_locationService];
  uint64_t v35 = *(void *)&v33[OBJC_IVAR____TtC7parsecd15LocationManager_locationService];
  uint64_t v36 = v63;
  uint64_t v37 = v61;
  *(void *)uint64_t v34 = v63;
  *((void *)v34 + 1) = v37;
  swift_unknownObjectRetain(v36);
  swift_unknownObjectRelease(v35);
  uint64_t v38 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
  id v39 = [v38 defaultCenter];
  [v39 addObserver:v33 selector:"bagChangeNotification:" name:@"PARBagChangeNotification" object:0];

  id v40 = [v38 defaultCenter];
  [v40 addObserver:v33 selector:"updateMapsClientMetadata:" name:GEOMapServiceSerializedClientMetadataForParsecDidInvalidateNotificationName object:0];

  id v41 = [v38 defaultCenter];
  [v41 addObserver:v33 selector:"updateCountryCode:" name:GEOCountryConfigurationCountryCodeDidChangeNotification object:0];

  id v42 = [v38 defaultCenter];
  [v42 addObserver:v33 selector:"performedSearchNotification:" name:@"com.apple.parsecd.performedSearch" object:0];

  uint64_t v61 = *(void *)&v33[OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue];
  uint64_t v43 = swift_allocObject(&unk_1001B3CC8, 24LL, 7LL);
  *(void *)(v43 + swift_weakDestroy(v0 + 16) = v33;
  aBlock[4] = sub_10004E71C;
  aBlock[5] = v43;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000D2F18;
  id aBlock[3] = &unk_1001B3CE0;
  uint64_t v44 = _Block_copy(aBlock);
  uint64_t v60 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v45 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v47 = (char *)&v59 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = v33;
  static DispatchQoS.unspecified.getter(v48);
  uint64_t v49 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v50 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v52 = (char *)&v59 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = &_swiftEmptyArrayStorage;
  sub_100008FF4((unint64_t *)&qword_1001D2B80, v53);
  uint64_t v55 = v54;
  uint64_t v56 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
  sub_100025F50((unint64_t *)&qword_1001D2B90, (uint64_t *)&unk_1001D0BC0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v64, v56, v57, v49, v55);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v47, v52, v44);

  _Block_release(v44);
  swift_release();
  swift_unknownObjectRelease(v63);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v49);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v60);
  swift_release();
  return v48;
}

uint64_t sub_10004DFE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 16;
  *(void *)(a2 + sub_10000BDD4(v0 + 24) = 0LL;
  swift_unknownObjectWeakInit(a2 + 16, 0LL);
  *(_OWORD *)(a2 + swift_unknownObjectWeakDestroy(v0 + 32) = xmmword_10015F770;
  uint64_t v5 = sub_10000941C(&qword_1001D37C0);
  swift_allocObject(v5, 25LL, 7LL);
  sub_10005FC38(0);
  *(void *)(a2 + 48) = v6;
  uint64_t v7 = sub_10000941C(&qword_1001D37C8);
  swift_allocObject(v7, 32LL, 7LL);
  *(void *)(a2 + sub_10000BDD4(v0 + 56) = sub_10005FD0C(0LL);
  *(void *)(a2 + sub_10000BDD4(v0 + 24) = &off_1001B3A58;
  swift_unknownObjectWeakAssign(v4, a1);
  id v8 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  memset(v18, 0, sizeof(v18));
  uint64_t v19 = 0LL;
  id v9 = [objc_allocWithZone((Class)type metadata accessor for PARBagConfigFactory()) init];
  sub_100049BDC();
  uint64_t v11 = v10;
  v17[3] = sub_100009788(0LL, &qword_1001D35E0, &OBJC_CLASS___NSURLSession_ptr);
  v17[4] = &protocol witness table for NSURLSession;
  v17[0] = v11;
  sub_100008FF4(&qword_1001D37D0, (uint64_t (*)(uint64_t))type metadata accessor for ConfigurationController);
  uint64_t v13 = v12;
  uint64_t v14 = type metadata accessor for ConfigurationManager(0LL);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  swift_retain(a2);
  *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 32) = ConfigurationManager.init(defaults:context:configFactory:urlDataSource:delegate:)( v8,  v18,  v9,  v17,  a2,  v13);
  swift_release();
  id v15 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  swift_retain(a2);
  [v15 addObserver:a2 selector:"handleRefreshNotificationWithNotification:" name:@"PARBagRefreshRequired" object:0];

  swift_release();
  swift_release();
  return a2;
}

id sub_10004E210(uint64_t a1, char *a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a2);
  uint64_t v5 = &a2[OBJC_IVAR____TtC7parsecd15DownloadManager_assembly];
  *((void *)v5 + 1) = 0LL;
  swift_unknownObjectWeakInit(v5, 0LL);
  uint64_t v6 = OBJC_IVAR____TtC7parsecd15DownloadManager_hasStarted;
  uint64_t v7 = sub_10000941C(&qword_1001D43B0);
  uint64_t v8 = swift_allocObject(v7, 24LL, 7LL);
  id v9 = a2;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = sub_100006414(0);
  *(void *)&a2[v6] = v8;
  *(void *)&v9[OBJC_IVAR____TtC7parsecd15DownloadManager_resources] = &_swiftEmptyDictionarySingleton;
  *(void *)&v9[OBJC_IVAR____TtC7parsecd15DownloadManager_spans] = &_swiftEmptyDictionarySingleton;
  *((void *)v5 + 1) = &off_1001B3A58;
  swift_unknownObjectWeakAssign(v5, a1);
  sub_100009788(0LL, (unint64_t *)&qword_1001D43D0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static DispatchQoS.background.getter(v11);
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v14);
  id v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = 0LL;
  sub_100008FF4((unint64_t *)&qword_1001D0BB0, v17);
  dispatch thunk of OptionSet.init(rawValue:)(&v31, v14, v18);
  uint64_t v19 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void))(v22 + 104))( v21,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  *(void *)&v9[OBJC_IVAR____TtC7parsecd15DownloadManager_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000020LL,  0x800000010016F000LL,  v13,  v16,  v21,  0LL);

  v30.receiver = v9;
  v30.super_class = ObjectType;
  id v23 = objc_msgSendSuper2(&v30, "init");
  uint64_t v24 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
  id v25 = v23;
  id v26 = [v24 defaultCenter];
  id v27 = v25;
  [v26 addObserver:v27 selector:"bagChangeNotificationWithNotification:" name:@"PARBagChangeNotification" object:0];

  swift_release();
  return v27;
}

void *sub_10004E4F0(uint64_t a1, void *a2)
{
  a2[3] = 0LL;
  uint64_t v4 = swift_unknownObjectWeakInit(a2 + 2, 0LL);
  a2[4] = 0xD000000000000074LL;
  a2[5] = 0x800000010016EF10LL;
  a2[3] = &off_1001B3A58;
  swift_unknownObjectWeakAssign(v4, a1);
  id v5 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  [v5 addObserver:a2 selector:"bagChangeNotification:" name:@"PARBagChangeNotification" object:0];
  sub_1000478B0();
  uint64_t v7 = v6;
  uint64_t v8 = swift_allocObject(&unk_1001B3CA0, 24LL, 7LL);
  swift_weakInit(v8 + 16, a2);
  swift_retain(v8);
  sub_1000C2844(1, (void (*)(id))sub_10004E6F0, v8, (uint64_t)sub_100028DAC, 0LL);

  swift_unknownObjectRelease(v7);
  swift_release_n(v8, 2LL);
  swift_release();
  return a2;
}

void *sub_10004E628(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = sub_10000941C(&qword_1001D52B0);
  swift_allocObject(v8, 40LL, 7LL);
  sub_10000B708(0LL, 0LL);
  a4[3] = a3;
  a4[4] = a1;
  a4[5] = &off_1001B3A58;
  a4[6] = v9;
  a4[2] = a2;
  swift_unknownObjectRetain(a1);
  sub_100078460(1, 0LL, 0LL);
  swift_release();
  return a4;
}

void sub_10004E6C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100010FF4(a1, a2, a3);
  sub_100010F18(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 32LL));
  sub_100009A90();
}

uint64_t sub_10004E6F0(uint64_t a1)
{
  return sub_100028D64(a1, v1);
}

uint64_t sub_10004E6F8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10004E71C()
{
}

void sub_10004E724(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100010FF4(a1, a2, a3);
  sub_10004EB9C(v3);
  sub_100009A90();
}

uint64_t *sub_10004E744(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v11);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v7 = type metadata accessor for UserAgent(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
    }

    else
    {
      uint64_t v12 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16LL))(a1, a2, v12);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }

  return a1;
}

uint64_t sub_10004E814(uint64_t a1, uint64_t a2)
{
  else {
    uint64_t v3 = type metadata accessor for UUID(0LL);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
}

uint64_t sub_10004E860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = type metadata accessor for UserAgent(0LL);
    uint64_t v7 = 1LL;
  }

  else
  {
    uint64_t v6 = type metadata accessor for UUID(0LL);
    uint64_t v7 = 0LL;
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2);
  swift_storeEnumTagMultiPayload(a1, a3, v7);
  return a1;
}

uint64_t sub_10004E8EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10004D784(a1, type metadata accessor for SessionLookupKey);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v6 = type metadata accessor for UserAgent(0LL);
      uint64_t v7 = 1LL;
    }

    else
    {
      uint64_t v6 = type metadata accessor for UUID(0LL);
      uint64_t v7 = 0LL;
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2);
    swift_storeEnumTagMultiPayload(a1, a3, v7);
  }

  return a1;
}

uint64_t sub_10004E990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = type metadata accessor for UserAgent(0LL);
    uint64_t v7 = 1LL;
  }

  else
  {
    uint64_t v6 = type metadata accessor for UUID(0LL);
    uint64_t v7 = 0LL;
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2);
  swift_storeEnumTagMultiPayload(a1, a3, v7);
  return a1;
}

uint64_t sub_10004EA1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10004D784(a1, type metadata accessor for SessionLookupKey);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v6 = type metadata accessor for UserAgent(0LL);
      uint64_t v7 = 1LL;
    }

    else
    {
      uint64_t v6 = type metadata accessor for UUID(0LL);
      uint64_t v7 = 0LL;
    }

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2);
    swift_storeEnumTagMultiPayload(a1, a3, v7);
  }

  return a1;
}

uint64_t sub_10004EAC0(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for UserAgent(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v5);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10004EB50(uint64_t a1)
{
  return swift_allocObject(a1, 41LL, 7LL);
}

void sub_10004EB5C(uint64_t a1)
{
}

uint64_t sub_10004EB68(uint64_t a1, ...)
{
  return swift_beginAccess(v1 + 16, va, 0LL, 0LL);
}

uint64_t sub_10004EB7C(uint64_t a1, ...)
{
  return swift_beginAccess(v1 + 16, va, 1LL, 0LL);
}

void sub_10004EB90()
{
}

uint64_t sub_10004EB9C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(v1, v2, a1);
}

uint64_t sub_10004EBB4()
{
  *(void *)(v2 - 136) = 0LL;
  return dispatch thunk of OptionSet.init(rawValue:)(v2 - 136, v0, v1);
}

uint64_t sub_10004EBD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( a1,  (a2 - 32) | 0x8000000000000000LL,  v3,  v4,  v2,  0LL);
}

uint64_t sub_10004EBF8()
{
  return os_signpost(_:dso:log:name:signpostID:)(v0, v2, v3, v1, 10LL, 2LL, v4);
}

void sub_10004EC18()
{
}

void sub_10004EC20()
{
}

void sub_10004EC2C( uint64_t a1, uint64_t *a2, void (*a3)(void *, uint64_t), uint64_t a4, uint64_t *a5)
{
}

uint64_t sub_10004EC38()
{
  return swift_retain(v0);
}

uint64_t sub_10004EC40(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3(0LL);
}

uint64_t sub_10004EC50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  a12 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a12, v13 + 8, v12);
}

void sub_10004EC68()
{
}

uint64_t sub_10004EC70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of OptionSet.init(rawValue:)(v4 - 136, v3, a3);
}

  ;
}

uint64_t sub_10004EC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return os_signpost(_:dso:log:name:signpostID:)(a1, a2, v5, a4, 22LL, 2LL, v4);
}

void sub_10004ECA4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_10004ECB8(uint64_t a1, ...)
{
  return swift_endAccess(va);
}

  ;
}

void sub_10004ECCC()
{
}

void sub_10004ECE0()
{
}

uint64_t sub_10004ECF4()
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v0;
  return swift_bridgeObjectRetain(v0);
}

  ;
}

void sub_10004ED10(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_10004ED18(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return sub_1000307E0(a1, a2, (uint64_t *)va);
}

BOOL sub_10004ED20(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

uint64_t sub_10004ED48(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return String.init<A>(describing:)(va);
}

uint64_t sub_10004ED50()
{
  return v0;
}

uint64_t sub_10004ED60()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

void sub_10004ED6C(uint64_t a1@<X8>)
{
  *(void *)(v1 - 136) = a1;
  *(void *)(v1 - 128) = 0LL;
  *(_BYTE *)(v1 - 96) = 0;
}

uint64_t sub_10004ED78(float a1)
{
  *uint64_t v1 = a1;
  return type metadata accessor for Assembly();
}

uint64_t sub_10004ED84()
{
  return 0LL;
}

uint64_t sub_10004ED90()
{
  return Logger.logObject.getter();
}

  ;
}

  ;
}

uint64_t sub_10004EDC0()
{
  return sub_10000941C(v0);
}

uint64_t sub_10004EDC8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  return sub_1000307E0(a1, a2, (uint64_t *)va);
}

uint64_t sub_10004EDD4()
{
  return static OSSignpostID.exclusive.getter();
}

  ;
}

uint64_t sub_10004EDF4()
{
  return v0;
}

uint64_t sub_10004EE00(uint64_t a1)
{
  return swift_arrayDestroy(a1, 2LL);
}

uint64_t sub_10004EE08()
{
  return v2(v1, v0);
}

  ;
}

uint64_t sub_10004EE20(uint64_t a1, unint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    unint64_t v2 = a2;
    uint64_t v3 = a1;
    unint64_t v5 = a2 >> 62;
    if (!(a2 >> 62))
    {
      int64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      goto LABEL_4;
    }
  }

  sub_1000507F0();
  sub_100050860();
  sub_100050854();
LABEL_4:
  uint64_t result = sub_100050610(0LL, v3, v4);
  if ((v7 & 1) != 0) {
    int64_t v8 = v4;
  }
  else {
    int64_t v8 = result;
  }
  if (v8 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }

  if (v5)
  {
    sub_1000507F0();
    uint64_t v9 = sub_100050860();
    uint64_t result = swift_bridgeObjectRelease();
    if (v9 < 0)
    {
LABEL_25:
      __break(1u);
      return result;
    }

    swift_bridgeObjectRetain(v2);
    sub_100050860();
    uint64_t result = sub_100050854();
  }

  else
  {
    int64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v4 < v8)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if ((v2 & 0xC000000000000001LL) != 0 && v8)
  {
    int64_t v4 = sub_10005079C();
    Swift::Int v10 = 0LL;
    do
    {
      Swift::Int v11 = v10 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v10);
      Swift::Int v10 = v11;
    }

    while (v8 != v11);
  }

  if (!v5) {
    return v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  sub_1000507F0();
  uint64_t v12 = _CocoaArrayWrapper.subscript.getter(0LL, v8, v4);
  swift_bridgeObjectRelease_n(v2, 2LL);
  return v12;
}

uint64_t sub_10004EF78(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000LL) == 0) {
      uint64_t v5 = a2;
    }
    uint64_t v6 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v6 = 11LL;
    }
    uint64_t v7 = v6 | (v5 << 16);
    uint64_t v8 = String.index(_:offsetBy:limitedBy:)(15LL, result, v7, a2, a3);
    if ((v9 & 1) != 0) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = v8;
    }
    uint64_t v11 = String.subscript.getter(15LL, v10, a2, a3);
    swift_bridgeObjectRelease(a3);
    return v11;
  }

  return result;
}

id sub_10004F034()
{
  id result = (id)kCFLocaleTemperatureUnitPreferencesChangedNotification;
  if (kCFLocaleTemperatureUnitPreferencesChangedNotification)
  {
    qword_1001EDD20 = kCFLocaleTemperatureUnitPreferencesChangedNotification;
    return kCFLocaleTemperatureUnitPreferencesChangedNotification;
  }

  else
  {
    __break(1u);
  }

  return result;
}

NSString sub_10004F054()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1001EDD28 = (uint64_t)result;
  return result;
}

uint64_t sub_10004F088(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + sub_10000BDD4(v0 + 24) = 0LL;
  uint64_t v6 = swift_unknownObjectWeakInit(v2 + 16, 0LL);
  *(void *)(v2 + 40) = 0xE200000000000000LL;
  *(void *)(v2 + 48) = 19285LL;
  *(void *)(v2 + sub_10000BDD4(v0 + 56) = 0xE200000000000000LL;
  *(void *)(v2 + 64) = 18771LL;
  *(void *)(v2 + 72) = 0xE200000000000000LL;
  *(_DWORD *)(v2 + 80) = -1;
  *(void *)(v2 + sub_10000BDD4(v0 + 24) = a2;
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 32) = 21333LL;
  swift_unknownObjectWeakAssign(v6, a1);
  id v7 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  sub_10005080C(v7, "addObserver:selector:name:object:", v8, v9, (uint64_t)NSCurrentLocaleDidChangeNotification);

  id v10 = sub_10005081C();
  uint64_t v11 = qword_1001D0590;
  sub_10000C4AC();
  if (v11 != -1) {
    swift_once(&qword_1001D0590, sub_10004F034);
  }
  sub_10005080C(v10, "addObserver:selector:name:object:", v12, v13, qword_1001EDD20);

  sub_10001683C();
  id v14 = sub_10005081C();
  sub_100050844(v14, "addObserver:selector:name:object:", v15, v16, (uint64_t)NSSystemTimeZoneDidChangeNotification);

  id v17 = sub_10005081C();
  uint64_t v18 = qword_1001D0598;
  sub_10000C4AC();
  if (v18 != -1) {
    swift_once(&qword_1001D0598, sub_10004F054);
  }
  sub_100050844(v17, "addObserver:selector:name:object:", v19, v20, qword_1001EDD28);

  sub_10001683C();
  id v21 = sub_10005081C();
  sub_10005080C(v21, "addObserver:selector:name:object:", v22, v23, qword_1001EDD28);

  sub_100047280();
  sub_100047184();
  sub_10004F2B0();
  sub_100050868();
  sub_100047184();
  sub_10004FFB4();
  swift_unknownObjectRelease(a1);
  sub_100050868();
  return v2;
}

void *sub_10004F2B0()
{
  uint64_t v2 = type metadata accessor for Locale.Language(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100014428();
  uint64_t v155 = v4;
  sub_10000941C(&qword_1001D3A20);
  sub_100027160();
  __chkstk_darwin(v5);
  sub_100014428();
  unint64_t v157 = v6;
  uint64_t v7 = type metadata accessor for Locale.MeasurementSystem(0LL);
  id v159 = *(uint8_t ***)(v7 - 8);
  uint64_t v160 = v7;
  sub_100027160();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v154 = (char *)&v140 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v156 = (uint64_t)&v140 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v140 - v14;
  __chkstk_darwin(v13);
  uint64_t v161 = (uint64_t)&v140 - v16;
  uint64_t v153 = *(void *)(type metadata accessor for Calendar.Identifier(0LL) - 8);
  sub_100027160();
  __chkstk_darwin(v17);
  sub_10000BEB8();
  uint64_t v18 = type metadata accessor for Calendar(0LL);
  int v151 = *(uint8_t **)(v18 - 8);
  unint64_t v152 = v18;
  sub_100027160();
  __chkstk_darwin(v19);
  id v21 = (char *)&v140 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for Locale(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  sub_100014428();
  uint64_t v162 = v24;
  unsigned int v150 = v0;
  NSString result = (void *)swift_unknownObjectWeakLoadStrong(&v0->data);
  if (result)
  {
    uint64_t v146 = v3;
    uint64_t v147 = v2;
    uint64_t v149 = result;
    if (qword_1001D0540 != -1) {
      swift_once(&qword_1001D0540, sub_100034544);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    uint64_t v158 = sub_1000093D0(v26, (uint64_t)qword_1001EDC90);
    id v27 = (os_log_s *)Logger.logObject.getter(v158);
    os_log_type_t v28 = static os_log_type_t.info.getter();
    if (sub_100010DE4(v28))
    {
      uint64_t v29 = v15;
      objc_super v30 = (uint8_t *)sub_10001441C();
      *(_WORD *)objc_super v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v3, "Updating locale", v30, 2u);
      uint64_t v31 = (uint64_t)v30;
      uint64_t v15 = v29;
      sub_100010C34(v31);
    }

    uint64_t v32 = (void *)objc_opt_self(&OBJC_CLASS___NSLocale);
    uint64_t v33 = [v32 currentLocale];
    static Locale._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v34 = (void *)static Locale.preferredLanguages.getter();
    if (v34[2])
    {
      uint64_t v145 = v1;
      uint64_t v35 = v15;
      uint64_t v148 = v23;
      uint64_t v36 = v34[4];
      uint64_t v33 = (void *)v34[5];
      sub_100047294();
      uint64_t v37 = sub_1000110A8();
      uint64_t v166 = 45LL;
      unint64_t v167 = 0xE100000000000000LL;
      __chkstk_darwin(v37);
      *(&v140 - 2) = (unint64_t)&v166;
      unint64_t v38 = sub_1000504B8(sub_1000341EC, (uint64_t)(&v140 - 4), v36, (unint64_t)v33);
      if ((v39 & 1) == 0)
      {
        uint64_t v143 = v22;
        uint64_t v40 = String.subscript.getter(15LL, v38, v36, v33);
        uint64_t v42 = v41;
        uint64_t v44 = v43;
        uint64_t v46 = v45;
        sub_100009B3C();
        uint64_t v144 = static String._fromSubstring(_:)(v40, v42, v44, v46);
        unint64_t v140 = v47;
        sub_100050804();
        uint64_t v48 = swift_bridgeObjectRelease();
        uint64_t v15 = v35;
        uint64_t v1 = v145;
        goto LABEL_15;
      }

      sub_100009B3C();
      uint64_t v23 = v148;
      uint64_t v15 = v35;
      uint64_t v1 = v145;
    }

    else
    {
      sub_1000110A8();
    }

    uint64_t v49 = sub_1000505B8(v32);
    if (v49 && (uint64_t v33 = sub_100050148(v49), sub_1000110A8(), v33))
    {
      uint64_t v148 = v23;
      uint64_t v143 = v22;
      uint64_t v50 = (void *)objc_opt_self(&OBJC_CLASS___NSBundle);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      sub_100009B3C();
      id v52 = [v50 preferredLocalizationsFromArray:isa];

      static Array._unconditionallyBridgeFromObjectiveC(_:)(v52, &type metadata for String);
      sub_10005087C();
      if (v33[2])
      {
        unint64_t v53 = v33[5];
        uint64_t v144 = v33[4];
        unint64_t v140 = v53;
        swift_bridgeObjectRetain(v53);
        sub_100050804();
        uint64_t v48 = sub_100009B3C();
LABEL_15:
        uint64_t v145 = Locale.identifier.getter(v48);
        unint64_t v141 = v54;
        swift_bridgeObjectRetain(v54);
        uint64_t v55 = sub_100050804();
        uint64_t v56 = Locale.calendar.getter(v55);
        Calendar.identifier.getter(v56);
        (*((void (**)(char *, unint64_t))v151 + 1))(v21, v152);
        uint64_t v57 = Locale.localizedString(for:)(v1);
        unint64_t v59 = v58;
        sub_10005088C(*(uint64_t (**)(uint64_t, uint64_t))(v153 + 8));
        uint64_t v142 = v32;
        if (v59)
        {
          unint64_t v152 = v59;
          uint64_t v153 = v57;
          uint64_t v60 = sub_100050804();
          uint64_t v61 = v159;
        }

        else
        {
          sub_10005083C();
          os_log_type_t v66 = sub_100010EC4();
          BOOL v67 = sub_100010DE4(v66);
          uint64_t v61 = v159;
          if (v67)
          {
            uint64_t v68 = (_WORD *)sub_10001441C();
            sub_10001457C(v68);
            sub_10001444C((void *)&_mh_execute_header, v69, v70, "error getting localeCalendarIdentifier from NSLocale");
            sub_100010C34((uint64_t)v32);
          }

          unint64_t v152 = 0xE000000000000000LL;
          uint64_t v60 = sub_100050804();
          uint64_t v153 = 0LL;
        }

        uint64_t v71 = v161;
        Locale.measurementSystem.getter(v60);
        sub_100050874((uint64_t)v15, v71);
        uint64_t v72 = (os_log_s *)sub_10005083C();
        os_log_type_t v73 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v72, v73))
        {
          uint64_t v74 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v75 = swift_slowAlloc(32LL, -1LL);
          uint64_t v166 = v75;
          *(_DWORD *)uint64_t v74 = 136315138;
          int v151 = v74 + 4;
          uint64_t v76 = (uint64_t)v15;
          uint64_t v77 = v156;
          sub_100050874(v156, v76);
          uint64_t v78 = String.init<A>(describing:)(v77);
          v165[0] = sub_1000307E0(v78, v79, &v166);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v165, &v165[1], v151);
          uint64_t v80 = v160;
          swift_bridgeObjectRelease();
          uint64_t v81 = v76;
          uint64_t v82 = v159[1];
          ((void (*)(uint64_t, uint64_t))v82)(v81, v80);
          _os_log_impl((void *)&_mh_execute_header, v72, v73, "Processing measurement System: %s", v74, 0xCu);
          swift_arrayDestroy(v75, 1LL);
          sub_100010C34(v75);
          sub_100010C34((uint64_t)v74);
        }

        else
        {
          uint64_t v82 = v61[1];
          sub_100050828();
        }

        uint64_t v83 = v157;
        uint64_t v84 = (uint64_t)v154;
        uint64_t v85 = sub_100050874((uint64_t)v154, v161);
        static Locale.MeasurementSystem.metric.getter(v85);
        sub_100050684();
        char v86 = sub_1000507D8();
        uint64_t v87 = sub_100050828();
        if ((v86 & 1) != 0)
        {
          sub_100050834(v84);
          data = (uint8_t **)v150[2].isa;
          uint64_t info = v150[2].info;
        }

        else
        {
          static Locale.MeasurementSystem.us.getter(v87);
          char v90 = sub_1000507D8();
          uint64_t v91 = sub_100050828();
          if ((v90 & 1) != 0)
          {
            sub_100050834(v84);
            data = (uint8_t **)v150[1].isa;
            uint64_t info = v150[1].info;
          }

          else
          {
            static Locale.MeasurementSystem.uk.getter(v91);
            uint64_t v92 = sub_1000507D8();
            sub_100050828();
            sub_100050834(v84);
            if ((v92 & 1) == 0)
            {
              sub_10005083C();
              os_log_type_t v135 = sub_100010EC4();
              if (sub_100010DE4(v135))
              {
                uint64_t v136 = (_WORD *)sub_10001441C();
                sub_10001457C(v136);
                sub_10001444C( (void *)&_mh_execute_header,  v137,  v138,  "Found an unidentifiable measurementSystem, requests will not have a valid system set");
                sub_100010C34(v84);
              }

              id v159 = 0LL;
              uint64_t v156 = 0xE000000000000000LL;
LABEL_34:
              uint64_t v93 = v142;
              sub_100050804();
              static Array._unconditionallyBridgeFromObjectiveC(_:)( [v93 preferredLanguages],  &type metadata for String);
              sub_10005087C();
              if (v93[2] < 4uLL)
              {
                uint64_t v98 = v93;
                uint64_t v99 = v146;
              }

              else
              {
                uint64_t v94 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
                uint64_t v95 = swift_unknownObjectRetain_n(v93, 2LL);
                uint64_t v96 = (void *)swift_dynamicCastClass(v95, v94);
                if (!v96)
                {
                  sub_100009B3C();
                  uint64_t v96 = &_swiftEmptyArrayStorage;
                }

                uint64_t v97 = v96[2];
                swift_release();
                if (v97 == 3)
                {
                  uint64_t v98 = (void *)swift_dynamicCastClass(v93, v94);
                  sub_100009B3C();
                  uint64_t v99 = v146;
                  if (v98) {
                    goto LABEL_42;
                  }
                  uint64_t v98 = &_swiftEmptyArrayStorage;
                }

                else
                {
                  swift_bridgeObjectRelease();
                  sub_1000DBBF0((uint64_t)v93, (uint64_t)(v93 + 4), 0LL, 7uLL);
                  uint64_t v98 = v139;
                  uint64_t v99 = v146;
                }

                sub_100009B3C();
              }

LABEL_42:
              uint64_t v100 = v98;
              swift_bridgeObjectRetain(v98);
              uint64_t v101 = swift_bridgeObjectRelease();
              uint64_t v102 = v155;
              uint64_t v103 = Locale.language.getter(v101);
              Locale.Language.region.getter(v103);
              (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v102, v147);
              uint64_t v104 = type metadata accessor for Locale.Region(0LL);
              if (sub_100010708(v83, 1LL, v104) == 1)
              {
                sub_100014358(v83, &qword_1001D3A20);
                uint64_t v158 = 0LL;
                uint64_t v105 = 0LL;
              }

              else
              {
                uint64_t v158 = Locale.Region.identifier.getter();
                uint64_t v105 = v106;
                (*(void (**)(uint64_t, uint64_t))(*(void *)(v104 - 8) + 8LL))(v83, v104);
              }

              uint64_t v155 = v105;
              sub_100047294();
              swift_bridgeObjectRelease();
              uint64_t v107 = v162;
              id v108 =  -[objc_class objectForKey:]( Locale._bridgeToObjectiveC()().super.isa,  "objectForKey:",  NSLocaleTemperatureUnit);
              sub_10005087C();
              if (v107)
              {
                _bridgeAnyObjectToAny(_:)(v107);
                swift_unknownObjectRelease(v107);
              }

              else
              {
                memset(v165, 0, 32);
              }

              sub_1000506C4((uint64_t)v165, (uint64_t)&v166);
              int v151 = v82;
              if (v169)
              {
                if ((swift_dynamicCast(v163, &v166, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
                {
                  uint64_t v109 = sub_10004EF78(1LL, v163[0], v163[1]);
                  uint64_t v113 = static String._fromSubstring(_:)(v109, v110, v111, v112);
                  unint64_t v157 = v114;
                  sub_100050804();
                  sub_1000110A8();
LABEL_53:
                  uint64_t v147 = v113;
                  unsigned __int8 v115 = sub_100050288() & 1;
                  LODWORD(v146) = v115;
                  uint64_t v154 = (char *)[(id)objc_opt_self(NSNotificationCenter) defaultCenter];
                  unsigned int v150 = @"com.apple.parsecd.contextUpdate";
                  uint64_t v116 = sub_10000941C((uint64_t *)&unk_1001D32A0);
                  uint64_t inited = swift_initStackObject(v116, &v164);
                  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
                  uint64_t v166 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"context");
                  unint64_t v167 = v118;
                  AnyHashable.init<A>(_:)(&v166);
                  uint64_t v119 = type metadata accessor for ContextUpdate(0LL);
                  *(void *)(inited + 96) = v119;
                  uint64_t v120 = sub_10001B468((void *)(inited + 72));
                  unint64_t v121 = v141;
                  v165[0] = v145;
                  v165[1] = v141;
                  unint64_t v122 = v152;
                  v165[2] = v153;
                  v165[3] = v152;
                  uint64_t v123 = v156;
                  v165[4] = v159;
                  v165[5] = v156;
                  LOBYTE(v165[6]) = v115;
                  v165[7] = 0LL;
                  v165[8] = 0xE000000000000000LL;
                  unint64_t v124 = v140;
                  v165[9] = v144;
                  v165[10] = v140;
                  v165[11] = v100;
                  v165[12] = v113;
                  v165[13] = v157;
                  v165[14] = v158;
                  uint64_t v125 = v155;
                  v165[15] = v155;
                  swift_bridgeObjectRetain(v152);
                  sub_100047294();
                  swift_bridgeObjectRetain(v124);
                  sub_10005070C(v165);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_100009B3C();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  memcpy(v120, v165, 0x80uLL);
                  swift_storeEnumTagMultiPayload(v120, v119, 0LL);
                  uint64_t v126 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
                  uint64_t v127 = v154;
                  sub_1000C5160((uint64_t)v150, 0LL, v126, v154);
                  sub_100050884();

                  ((void (*)(uint64_t, uint64_t))v151)(v161, v160);
                  (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v162, v143);
                  uint64_t v166 = v145;
                  unint64_t v167 = v121;
                  uint64_t v168 = v153;
                  unint64_t v169 = v122;
                  double v170 = v159;
                  unint64_t v171 = v123;
                  char v172 = v146;
                  *(_DWORD *)uint64_t v173 = v183[0];
                  *(_DWORD *)&v173[3] = *(_DWORD *)((char *)v183 + 3);
                  uint64_t v174 = 0LL;
                  unint64_t v175 = 0xE000000000000000LL;
                  uint64_t v176 = v144;
                  unint64_t v177 = v124;
                  double v178 = v100;
                  uint64_t v179 = v147;
                  unint64_t v180 = v157;
                  uint64_t v181 = v158;
                  uint64_t v182 = v125;
                  return sub_10002D5AC(&v166);
                }
              }

              else
              {
                sub_100014358((uint64_t)&v166, (uint64_t *)&unk_1001D32C0);
              }

              unint64_t v157 = 0xE000000000000000LL;
              sub_100050804();
              uint64_t v113 = 0LL;
              goto LABEL_53;
            }

            data = (uint8_t **)v150[1].data;
            uint64_t info = v150[1].length;
          }
        }

        id v159 = data;
        uint64_t v156 = info;
        swift_bridgeObjectRetain(info);
        goto LABEL_34;
      }

      sub_100009B3C();
      sub_10005083C();
      os_log_type_t v128 = sub_100010EC4();
      BOOL v129 = sub_100010DE4(v128);
      uint64_t v130 = v143;
      uint64_t v131 = v148;
      if (v129)
      {
        uint64_t v132 = (_WORD *)sub_10001441C();
        sub_10001457C(v132);
        sub_10001444C((void *)&_mh_execute_header, v133, v134, "error getting effectiveSystemLanguage from NSLocale");
        sub_100010C34((uint64_t)v32);
      }

      sub_100050884();
      (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v162, v130);
    }

    else
    {
      sub_10005083C();
      os_log_type_t v62 = sub_100010EC4();
      if (sub_100010DE4(v62))
      {
        uint64_t v63 = (_WORD *)sub_10001441C();
        sub_10001457C(v63);
        sub_10001444C((void *)&_mh_execute_header, v64, v65, "error getting system languages from NSLocale");
        sub_100010C34((uint64_t)v32);
      }

      sub_100050884();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v162, v22);
    }

    uint64_t v166 = 0LL;
    unint64_t v167 = 0xE000000000000000LL;
    uint64_t v168 = 0LL;
    unint64_t v169 = 0xE000000000000000LL;
    double v170 = 0LL;
    unint64_t v171 = 0xE000000000000000LL;
    char v172 = 0;
    *(_DWORD *)uint64_t v173 = v183[0];
    *(_DWORD *)&v173[3] = *(_DWORD *)((char *)v183 + 3);
    uint64_t v174 = 0LL;
    unint64_t v175 = 0xE000000000000000LL;
    uint64_t v176 = 0LL;
    unint64_t v177 = 0xE000000000000000LL;
    double v178 = &_swiftEmptyArrayStorage;
    uint64_t v179 = 0LL;
    uint64_t v181 = 0LL;
    uint64_t v182 = 0LL;
    unint64_t v180 = 0xE000000000000000LL;
    return sub_10002D5AC(&v166);
  }

  return result;
}

  if (v3 >= 1)
  {
    for (uint64_t i = 0LL; i != v3; ++i)
    {
      if ((v1 & 0xC000000000000001LL) != 0) {
        objc_super v30 = (void *)sub_1000808E8();
      }
      else {
        objc_super v30 = sub_1000808BC();
      }
      uint64_t v31 = v30;
      sub_1000804AC(v30, (SEL *)&selRef_results);
      if (v32) {
        sub_10007EB04();
      }
    }

    goto LABEL_66;
  }

  __break(1u);
}

  NSString result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

void sub_10004FFB4()
{
  uint64_t v1 = type metadata accessor for TimeZone(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10000BEB8();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    uint64_t v4 = Strong;
    uint64_t v5 = static TimeZone.current.getter();
    uint64_t v6 = TimeZone.identifier.getter(v5);
    uint64_t v8 = v7;
    sub_10005088C(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    id v9 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    uint64_t v10 = sub_10000941C((uint64_t *)&unk_1001D32A0);
    uint64_t inited = swift_initStackObject(v10, v17);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
    v16[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"context");
    v16[1] = v12;
    AnyHashable.init<A>(_:)(v16);
    uint64_t v13 = type metadata accessor for ContextUpdate(0LL);
    *(void *)(inited + 96) = v13;
    uint64_t v14 = sub_10001B468((void *)(inited + 72));
    *uint64_t v14 = v6;
    v14[1] = v8;
    swift_storeEnumTagMultiPayload(v14, v13, 1LL);
    uint64_t v15 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    sub_1000C5160((uint64_t)@"com.apple.parsecd.contextUpdate", 0LL, v15, v9);
    swift_unknownObjectRelease(v4);
  }

void *sub_100050148(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v14 = &_swiftEmptyArrayStorage;
  sub_1000AFA34(0, v2, 0);
  uint64_t v3 = &_swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32LL)
    {
      sub_100010758(i, (uint64_t)v13);
      if (!swift_dynamicCast( &v11,  v13,  (char *)&type metadata for Any + 8,  &type metadata for String,  6LL)) {
        break;
      }
      uint64_t v5 = v11;
      uint64_t v6 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_1000AFA34(0, v3[2] + 1LL, 1);
        uint64_t v3 = v14;
      }

      unint64_t v8 = v3[2];
      unint64_t v7 = v3[3];
      if (v8 >= v7 >> 1)
      {
        sub_1000AFA34(v7 > 1, v8 + 1, 1);
        uint64_t v3 = v14;
      }

      v3[2] = v8 + 1;
      id v9 = (char *)&v3[2 * v8];
      *((void *)v9 + 4) = v5;
      *((void *)v9 + 5) = v6;
      if (!--v2) {
        return v3;
      }
    }

    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    sub_10001683C();
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v3;
}

uint64_t sub_100050288()
{
  uint64_t v1 = type metadata accessor for Locale.HourCycle(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_100009B6C();
  Locale.hourCycle.getter();
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v0, v1);
  BOOL v4 = v3 == enum case for Locale.HourCycle.zeroToEleven(_:) || v3 == enum case for Locale.HourCycle.oneToTwelve(_:);
  uint64_t v5 = !v4;
  if (v4) {
    return v5;
  }
  if (v3 == enum case for Locale.HourCycle.zeroToTwentyThree(_:)
    || v3 == enum case for Locale.HourCycle.oneToTwentyFour(_:))
  {
    return v5;
  }

  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)(v1, v1);
  __break(1u);
  return result;
}

uint64_t sub_10005035C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  if (a3)
  {
    static Notification._unconditionallyBridgeFromObjectiveC(_:)(a3);
    uint64_t v8 = sub_100047280();
    uint64_t v9 = 0LL;
  }

  else
  {
    uint64_t v8 = sub_100047280();
    uint64_t v9 = 1LL;
  }

  sub_100009654(v4, v9, 1LL, v8);
  uint64_t v10 = sub_10000C4AC();
  a4(v10);
  sub_10001683C();
  return sub_100014358(v4, &qword_1001D1DE0);
}

uint64_t sub_100050404()
{
  return v0;
}

uint64_t sub_100050438()
{
  return swift_deallocClassInstance(v0, 84LL, 7LL);
}

uint64_t type metadata accessor for LocalStateManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd17LocalStateManager);
}

uint64_t sub_100050478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL) & 1;
  }
}

unint64_t sub_1000504B8( uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0LL;
  }
  uint64_t v9 = 7LL;
  if (((a4 >> 60) & ((a3 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v9 = 11LL;
  }
  unint64_t v10 = v9 | (v5 << 16);
  while (1)
  {
    unint64_t v10 = String.index(before:)(v10, a3, a4);
    uint64_t v11 = String.subscript.getter(v10, a3, a4);
    uint64_t v13 = v12;
    v17[0] = v11;
    v17[1] = v12;
    char v14 = a1(v17);
    if (v4) {
      break;
    }
    char v15 = v14;
    swift_bridgeObjectRelease(v13);
    if ((v15 & 1) != 0) {
      return v10;
    }
    if (v10 < 0x4000) {
      return 0LL;
    }
  }

  swift_bridgeObjectRelease(v13);
  return v10;
}

uint64_t sub_1000505B8(void *a1)
{
  id v1 = [a1 systemLanguages];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, (char *)&type metadata for Any + 8);

  return v3;
}

uint64_t sub_100050610(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }

  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2) {
      return 0LL;
    }
  }

  else if ((v3 & 0x8000000000000000LL) == 0 && v3 < (unint64_t)a2)
  {
    return 0LL;
  }

  BOOL v5 = __OFADD__(result, a2);
  result += a2;
  if (v5) {
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_10005065C(uint64_t *a1, uint64_t *a2)
{
  return sub_100050478(*a1, a1[1], *a2, a2[1]) & 1;
}

unint64_t sub_100050684()
{
  unint64_t result = qword_1001D3A28;
  if (!qword_1001D3A28)
  {
    uint64_t v1 = type metadata accessor for Locale.MeasurementSystem(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Locale.MeasurementSystem, v1);
    atomic_store(result, (unint64_t *)&qword_1001D3A28);
  }

  return result;
}

uint64_t sub_1000506C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C((uint64_t *)&unk_1001D32C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void *sub_10005070C(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[10];
  uint64_t v7 = a1[11];
  uint64_t v8 = a1[13];
  swift_bridgeObjectRetain(a1[15]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

unint64_t sub_10005079C()
{
  unint64_t result = qword_1001D5470;
  if (!qword_1001D5470)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___SFSearchSuggestion);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001D5470);
  }

  return result;
}

uint64_t sub_1000507D8()
{
  return dispatch thunk of static Equatable.== infix(_:_:)(v3, v1, v2, v0);
}

uint64_t sub_1000507F0()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100050804()
{
  return swift_bridgeObjectRelease(0xE000000000000000LL);
}

id sub_10005080C(id a1, SEL a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend(a1, a2, v5, v6, a5, 0);
}

id sub_10005081C()
{
  return [v0 *(SEL *)(v1 + 3696)];
}

uint64_t sub_100050828()
{
  return v0(v2, v1);
}

uint64_t sub_100050834(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_10005083C()
{
  return Logger.logObject.getter();
}

id sub_100050844(id a1, SEL a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend(a1, a2, v5, v6, a5, 0);
}

uint64_t sub_100050854()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100050860()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

uint64_t sub_100050868()
{
  return sub_100014358(v0, v1);
}

uint64_t sub_100050874(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

void sub_10005087C()
{
}

uint64_t sub_100050884()
{
  return swift_unknownObjectRelease(*(void *)(v0 + 72));
}

uint64_t sub_10005088C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_100050898()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for Locker()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd6Locker);
}

{
  return objc_opt_self(&OBJC_CLASS____TtC14SearchFeedback6Locker);
}

void sub_1000508E4(void (*a1)(void))
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  a1();
  os_unfair_lock_unlock(v3);
}

void sub_10005093C()
{
  uint64_t v5 = v4;
  type metadata accessor for Trialpb_TrialExperiment(0LL);
  sub_100010F98();
  __chkstk_darwin(v6);
  sub_10005A49C();
  __chkstk_darwin(v7);
  sub_10005A380();
  __chkstk_darwin(v8);
  sub_10005A670();
  int64_t v9 = 0LL;
  uint64_t v30 = v5 + 56;
  sub_10005A480();
  unint64_t v12 = v11 & v10;
  int64_t v14 = (unint64_t)(v13 + 63) >> 6;
  if ((v11 & v10) == 0) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = v29 + (v9 << 6))
  {
    sub_10005A274( v2,  *(void *)(v5 + 48) + *(void *)(v3 + 72) * i,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
    sub_10005A274(v0, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
    sub_10005A464();
    sub_100057A3C();
    sub_10004729C(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    if (v12) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_23;
    }

    if (v17 >= v14) {
      goto LABEL_21;
    }
    ++v9;
    if (!*(void *)(v30 + 8 * v17))
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_21;
      }
      sub_10005A88C();
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v14) {
          goto LABEL_21;
        }
        sub_10005A88C();
        if (!v21)
        {
          int64_t v9 = v20 + 3;
          if (v20 + 3 >= v14) {
            goto LABEL_21;
          }
          sub_10005A88C();
          if (!v23) {
            break;
          }
        }
      }
    }

uint64_t sub_100050AE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v3 = *(v2 - 1);
      uint64_t v4 = *v2;
      swift_bridgeObjectRetain(*v2);
      sub_100057B4C(&v6, v3, v4);
      swift_bridgeObjectRelease();
      v2 += 2;
      --v1;
    }

    while (v1);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100050B54(uint64_t a1, void (*a2)(uint64_t, uint64_t, id))
{
  uint64_t v4 = v20[0];
  uint64_t v21 = v20[1];
  int64_t v5 = v20[3];
  unint64_t v6 = v20[4];
  int64_t v7 = (unint64_t)(v20[2] + 64LL) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  if (!v6) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v10 = v9 | (v5 << 6);
  while (1)
  {
    unint64_t v15 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v10);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = *(void **)(*(void *)(v4 + 56) + 8 * v10);
    swift_bridgeObjectRetain(v17);
    id v19 = v18;
    a2(v16, v17, v19);

    uint64_t result = swift_bridgeObjectRelease(v17);
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v11 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      break;
    }
    if (v11 >= v7) {
      return swift_release(v4);
    }
    unint64_t v12 = *(void *)(v21 + 8 * v11);
    int64_t v13 = v5 + 1;
    if (!v12)
    {
      int64_t v13 = v5 + 2;
      if (v5 + 2 >= v7) {
        return swift_release(v4);
      }
      unint64_t v12 = *(void *)(v21 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v5 + 3;
        if (v5 + 3 >= v7) {
          return swift_release(v4);
        }
        unint64_t v12 = *(void *)(v21 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v5 + 4;
          if (v5 + 4 >= v7) {
            return swift_release(v4);
          }
          unint64_t v12 = *(void *)(v21 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = v5 + 5;
            if (v5 + 5 >= v7) {
              return swift_release(v4);
            }
            unint64_t v12 = *(void *)(v21 + 8 * v13);
            if (!v12)
            {
              int64_t v14 = v5 + 6;
              while (v14 < v7)
              {
                unint64_t v12 = *(void *)(v21 + 8 * v14++);
                if (v12)
                {
                  int64_t v13 = v14 - 1;
                  goto LABEL_18;
                }
              }

              return swift_release(v4);
            }
          }
        }
      }
    }

uint64_t sub_100050CF4(uint64_t a1)
{
  uint64_t v2 = Set.init(minimumCapacity:)(*(void *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  uint64_t v10 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      sub_1000145E8();
      sub_100057B4C(&v9, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v3;
    }

    while (v3);
    sub_1000325E4();
    return v10;
  }

  else
  {
    uint64_t v7 = v2;
    sub_1000325E4();
  }

  return v7;
}

void sub_100050D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    unint64_t v7 = 0LL;
    uint64_t v8 = a1 + 40;
    uint64_t v18 = a1 + 40;
    do
    {
      uint64_t v9 = (void *)(v8 + 16 * v7);
      unint64_t v10 = v7;
      while (1)
      {
        if (v10 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return;
        }

        uint64_t v11 = *(v9 - 1);
        uint64_t v12 = *v9;
        BOOL v13 = v11 == a2 && v12 == a3;
        if (!v13 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(v9 - 1), *v9, a2, a3, 0LL) & 1) == 0) {
          break;
        }
        ++v10;
        v9 += 2;
        if (v5 == v10) {
          goto LABEL_17;
        }
      }

      swift_bridgeObjectRetain(v12);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
        sub_1000AFA34(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
      }
      unint64_t v15 = _swiftEmptyArrayStorage[2];
      unint64_t v14 = _swiftEmptyArrayStorage[3];
      unint64_t v16 = v15 + 1;
      if (v15 >= v14 >> 1)
      {
        sub_1000AFA34(v14 > 1, v15 + 1, 1);
        unint64_t v16 = v15 + 1;
      }

      unint64_t v7 = v10 + 1;
      _swiftEmptyArrayStorage[2] = v16;
      uint64_t v17 = &_swiftEmptyArrayStorage[2 * v15];
      v17[4] = v11;
      void v17[5] = v12;
      uint64_t v8 = v18;
    }

    while (v5 - 1 != v10);
  }

uint64_t sub_100050F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  if (!v5) {
    return 0LL;
  }
  sub_10005A784();
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(void *)(v7 + 40);
  if (v8 == v4 && v9 == v3) {
    return 1LL;
  }
  uint64_t result = sub_10005A06C(v8, v9, v4, v3);
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v5 == 1) {
    return 0LL;
  }
  uint64_t v12 = (uint64_t *)(a3 + 56);
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v14 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    uint64_t v15 = *(v12 - 1);
    uint64_t v16 = *v12;
    BOOL v17 = v15 == v4 && v16 == v3;
    if (v17 || (sub_10005A06C(v15, v16, v4, v3) & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v12 += 2;
    if (v14 == v5) {
      return result;
    }
  }

  __break(1u);
  return result;
}

BOOL static Endianness.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void Endianness.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int sub_100051004(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_100051048(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Endianness.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_100051054()
{
  return sub_100051004(*v0);
}

void sub_10005105C(uint64_t a1)
{
}

void sub_100051064()
{
  uint64_t v42 = v4;
  uint64_t v43 = v0;
  uint64_t v38 = v5;
  uint64_t v39 = v6;
  uint64_t v40 = v7;
  uint64_t v45 = v8;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v41 = sub_10005A3C4();
  sub_10005A234();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = sub_10005A18C();
  sub_100010F98();
  __chkstk_darwin(v16);
  sub_10005A4D4();
  __chkstk_darwin(v17);
  id v19 = (char *)v34 - v18;
  uint64_t v20 = *(void *)(v12 + 24);
  sub_1000C1ADC(*(void *)(v12 + 16), v20, v10, (uint64_t)v34 - v18);
  if (!v1)
  {
    uint64_t v35 = v15;
    uint64_t v36 = v2;
    uint64_t v37 = v12;
    uint64_t v45 = v20;
    uint64_t v21 = v41;
    uint64_t v22 = v42;
    sub_10005A204();
    sub_10005A6F0(v0, (uint64_t)v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
    uint64_t v23 = sub_1000D9978(v0);
    v34[1] = v19;
    _OWORD v34[2] = v3;
    if (v39) {
      uint64_t v24 = v38;
    }
    else {
      uint64_t v24 = 0LL;
    }
    swift_bridgeObjectRetain(v39);
    uint64_t v25 = v23;
    sub_10005131C();
    sub_1000325E4();
    sub_100051358();
    uint64_t v26 = v35;
    uint64_t v27 = v36;
    uint64_t v28 = (*(uint64_t (**)(char *, void, uint64_t))(v36 + 104))( v35,  enum case for PegasusClientName.Parsecd(_:),  v21);
    PegasusClientName.rawValue.getter(v28);
    uint64_t v29 = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v26, v21);
    uint64_t v30 = sub_100009B34(v29, &qword_1001D3170, &OBJC_CLASS___NSNumber_ptr);
    Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v30,  &protocol witness table for String);
    sub_10005A8E8();
    sub_10001460C();
    sub_100010C70();
    sub_100051810();
    uint64_t v31 = v37;
    sub_1000518B0(v25, *(void *)(v37 + 48), *(void *)(v37 + 56));
    sub_1000518F0(v25, *(void *)(v31 + 32), *(void *)(v31 + 40));
    sub_10005A120();
    sub_10005A8D4(v25);
    sub_100051D50();
    uint64_t v33 = UserAgent.fullString.getter(v32);
    sub_100051DAC(v25, v33);
    sub_1000325E4();
    sub_10005A6E8(v22);
    if (v24)
    {
      sub_10005A660();
      swift_release();
    }

    else
    {
      URLRequest.cachePolicy.setter(1LL);
      swift_release();
      sub_10005A660();
    }
  }

  sub_10005A8AC();
  sub_10002716C();
}

void sub_10005131C()
{
  if (v2 || (sub_10005A1F8(), !v3))
  {
    if ((sub_10005A048(v1) & 1) == 0) {
      sub_10005A098(*(void *)(v0 + 352), *(void *)(v0 + 360));
    }
  }

  sub_1000110D4();
}

uint64_t sub_100051358()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v3 = type metadata accessor for ParsecKeys(0LL);
  static ParsecKeys.shared.getter(v3);
  uint64_t v4 = ParsecKeys.oldSecretKey.getter();
  uint64_t v6 = v5;
  swift_release();
  sub_10005A264(v1, v2, v4, v6);
  uint64_t v7 = sub_100010C70();
  uint64_t v9 = v0[8];
  uint64_t v8 = v0[9];
  static ParsecKeys.shared.getter(v7);
  uint64_t v10 = ParsecKeys.encryptedToken.getter();
  uint64_t v12 = v11;
  swift_release();
  sub_10005A264(v9, v8, v10, v12);
  return swift_bridgeObjectRelease();
}

void sub_100051414()
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v13 = type metadata accessor for PegasusClientName(0LL);
  sub_10005A368();
  __chkstk_darwin(v14);
  sub_10000BEB8();
  uint64_t v15 = sub_10005A61C();
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v71 = v13;
    uint64_t v72 = v10;
    uint64_t v73 = v8;
    uint64_t v74 = v6;
    uint64_t v17 = *(void *)(v0 + 864);
    uint64_t v68 = *(void *)(v0 + 872);
    uint64_t v69 = v17;
    uint64_t v70 = v12;
    uint64_t v18 = sub_1000DA4A0();
    if (v19) {
      uint64_t v20 = v18;
    }
    else {
      uint64_t v20 = 0LL;
    }
    if (v19) {
      unint64_t v21 = v19;
    }
    else {
      unint64_t v21 = 0xE000000000000000LL;
    }
    v75[0] = 44LL;
    v75[1] = 0xE100000000000000LL;
    __chkstk_darwin(v18);
    void v65[2] = v75;
    sub_1000145E8();
    uint64_t v22 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_1000341EC, (uint64_t)v65, v20, v21);
    sub_10001450C();
    uint64_t v23 = *(void *)(v22 + 16);
    if (v23)
    {
      uint64_t v66 = v4;
      uint64_t v67 = v16;
      sub_100047294();
      uint64_t v24 = (uint64_t *)(v22 + 56);
      uint64_t v25 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v26 = *(v24 - 3);
        uint64_t v27 = *(v24 - 2);
        uint64_t v28 = *(v24 - 1);
        uint64_t v29 = *v24;
        sub_100010DFC();
        uint64_t v30 = static String._fromSubstring(_:)(v26, v27, v28, v29);
        uint64_t v32 = v31;
        sub_100010C70();
        if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
        {
          char v36 = sub_10005A194();
          sub_1000313E4(v36, v37, v38, (uint64_t)v25);
          uint64_t v25 = v39;
        }

        unint64_t v34 = v25[2];
        unint64_t v33 = v25[3];
        if (v34 >= v33 >> 1)
        {
          char v40 = sub_10005A354(v33);
          sub_1000313E4(v40, v41, v42, (uint64_t)v25);
          uint64_t v25 = v43;
        }

        v25[2] = v34 + 1;
        uint64_t v35 = &v25[2 * v34];
        v35[4] = v30;
        v35[5] = v32;
        v24 += 4;
        --v23;
      }

      while (v23);
      sub_100009B3C();
      uint64_t v4 = v66;
    }

    else
    {
      uint64_t v25 = _swiftEmptyArrayStorage;
    }

    sub_100009B3C();
    uint64_t v76 = sub_100050CF4((uint64_t)v25);
    uint64_t v44 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 104))( v1,  enum case for PegasusClientName.Spotlight(_:),  v71);
    uint64_t v45 = PegasusClientName.rawValue.getter(v44);
    uint64_t v47 = v46;
    sub_10004729C(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    if (v45 == v72 && v47 == v73)
    {
      sub_10005A738(v72, v73);
      uint64_t v50 = v74;
      if (!v74) {
        goto LABEL_32;
      }
    }

    else
    {
      char v49 = sub_10005A06C(v72, v73, v45, v47);
      sub_1000325E4();
      uint64_t v50 = v74;
      if ((v49 & 1) == 0 || !v74) {
        goto LABEL_32;
      }
    }

    id v51 = v50;
    NSString v52 = String._bridgeToObjectiveC()();
    unsigned int v53 = sub_10005A5E4();

    if (v53)
    {

LABEL_31:
LABEL_32:
      sub_100050AE0((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v57 = sub_100056928(v76, v4);
      sub_100009B3C();
      if (*(void *)(v57 + 16))
      {
        v75[0] = v57;
        uint64_t v58 = sub_1000271C4();
        sub_100059DA0(&qword_1001D3D50, &qword_1001D3D48);
        uint64_t v60 = v59;
        unint64_t v61 = sub_1000106CC();
        uint64_t v62 = Sequence<>.joined(separator:)(44LL, 0xE100000000000000LL, v58, v60, v61);
        uint64_t v64 = v63;
        sub_1000325E4();
        sub_1000D9FB4(v69, v68, v62, v64);
        sub_1000110A8();
        sub_10005A910();
      }

      else
      {
        sub_10005A910();
        sub_1000325E4();
      }

      goto LABEL_35;
    }

    NSString v54 = String._bridgeToObjectiveC()();
    unsigned int v55 = sub_10005A5E4();

    if (v55)
    {
    }

    else
    {
      v75[3] = (uint64_t)&unk_1001B32C8;
      v75[4] = sub_10003B83C();
      LOBYTE(v75[0]) = 5;
      char v56 = isFeatureEnabled(_:)(v75);
      sub_1000108B8(v75);

      if ((v56 & 1) == 0) {
        goto LABEL_31;
      }
    }

    sub_100057B4C(v75, 0x6867696C746F7073LL, 0xEF63707267655F74LL);

    swift_bridgeObjectRelease();
    goto LABEL_32;
  }

LABEL_35:
  sub_100009AA0();
}

        uint64_t v32 = &selRef_fbr;
LABEL_36:
        uint64_t v31 = &_ss24UnkeyedEncodingContainerPsE6encode10contentsOfyqd___tKSTRd__s6UInt32V7ElementRtd__lF_ptr;
        uint64_t v4 = v167;
        uint64_t v30 = v166;
LABEL_147:
        uint64_t v144 = v30;
        uint64_t v145 = objc_opt_self(v31[272]);
        uint64_t v146 = sub_10006B270(v145);
        uint64_t v147 = v169;
        if (v146)
        {
          uint64_t v148 = v146;
          uint64_t v149 = v27;
          unsigned int v150 = v27;
          int v151 = sub_10006B65C((uint64_t)v150, "result");
          uint64_t v144 = v151 == 0LL;
          if (v151)
          {
            unint64_t v152 = v151;
            uint64_t v4 = [v151 v32[4]];
          }

          else
          {
            uint64_t v4 = 0LL;
          }

          sub_10006461C(v148, v170);

          uint64_t v147 = v169;
          uint64_t v27 = v149;
        }

        if (v144) {
          uint64_t v153 = 0LL;
        }
        else {
          uint64_t v153 = (uint64_t)v4;
        }
        if (v147) {
          uint64_t v154 = v147;
        }
        else {
          uint64_t v154 = v153;
        }
        uint64_t v155 = *(void *)(v170 + 64);
        uint64_t v156 = sub_100009B34(v146, (unint64_t *)&unk_1001D36A0, &OBJC_CLASS____CPFeedbackPayload_ptr);
        unint64_t v157 = v27;
        swift_unknownObjectRetain(v155);
        sub_1000A4798(v157, v154, v156);
        id v159 = v158;
        sub_1000A5CB4();

        swift_unknownObjectRelease();
        sub_10005A910();

LABEL_159:
        sub_10006B56C(*(uint64_t (**)(uint64_t, uint64_t))(v171 + 8));
        break;
      case 0xCu:
      case 0xEu:
      case 0x10u:
        unint64_t v33 = [v27 respondsToSelector:"queryId"];
        if ((v33 & 1) != 0) {
          unint64_t v167 = [v27 queryId];
        }
        else {
          unint64_t v167 = 0LL;
        }
        uint64_t v166 = v33 ^ 1;
        id v51 = objc_opt_self(&OBJC_CLASS____CPStartSearchFeedback);
        NSString v52 = sub_10006B270(v51);
        if (!v52)
        {
          unsigned int v53 = objc_opt_self(&OBJC_CLASS____CPStartLocalSearchFeedback);
          NSString v52 = sub_10006B270(v53);
          if (!v52)
          {
            NSString v54 = objc_opt_self(&OBJC_CLASS____CPStartNetworkSearchFeedback);
            NSString v52 = sub_10006B270(v54);
            if (!v52) {
              goto LABEL_36;
            }
          }
        }

        unsigned int v55 = (void *)v52;
        char v56 = v27;
        uint64_t v57 = v27;
        if ([v55 triggerEvent] == 23)
        {
          swift_unknownObjectRetain(*(void *)(v170 + 64));
          sub_10006A374(v55, (SEL *)&selRef_input);
          sub_1000A5B20(v58, v59);
          swift_unknownObjectRelease();
        }

        uint64_t v27 = v56;
        goto LABEL_35;
      case 0x14u:
        uint64_t v32 = v27;
        uint64_t v125 = objc_opt_self(&OBJC_CLASS____CPSuggestionEngagementFeedback);
        if (!sub_10006B530(v125)) {
          goto LABEL_144;
        }
        uint64_t v4 = sub_10006B380();
        uint64_t v126 = sub_10006B4EC();
        uint64_t v104 = sub_10005A6E0(v126, "suggestion");
        if (!v104) {
          goto LABEL_100;
        }
        uint64_t v105 = &selRef_query;
        goto LABEL_94;
      case 0x17u:
        uint64_t v60 = objc_opt_self(&OBJC_CLASS____CPResultsReceivedAfterTimeoutFeedback);
        if (!sub_10006B270(v60)) {
          goto LABEL_89;
        }
        unint64_t v61 = sub_10006B3D0(v27);
        sub_10008051C(v27);
        if (!v62) {
          goto LABEL_104;
        }
        sub_10006B6A8();
        if (v64)
        {
          if (sub_10006B2E4(v63)) {
            goto LABEL_85;
          }
        }

        else if (*(void *)(v63 + 16))
        {
          goto LABEL_85;
        }

        goto LABEL_143;
      case 0x18u:
        uint64_t v66 = objc_opt_self(&OBJC_CLASS____CPLateSectionsAppendedFeedback);
        if (!sub_10006B270(v66)) {
          goto LABEL_89;
        }
        unint64_t v61 = sub_10006B3D0(v27);
        sub_100080490(v27);
        if (!v67) {
          goto LABEL_104;
        }
        sub_10006B6A8();
        if (v69)
        {
          if (!sub_10006B2E4(v68)) {
            goto LABEL_143;
          }
        }

        else if (!*(void *)(v68 + 16))
        {
          goto LABEL_143;
        }

        uint64_t v70 = sub_10006B460();
        sub_100030F20(v70, v71, v72);
        if (ObjectType) {
          uint64_t v73 = sub_10006B330();
        }
        else {
          uint64_t v73 = (uint64_t)sub_10006B440();
        }
        uint64_t v74 = (void *)v73;
        sub_10003B8E8();
        sub_100080474(v74);
        if (!v75) {
          goto LABEL_104;
        }
        sub_10006B394();
        if (v77)
        {
          if (!sub_10006B2E4(v76)) {
            goto LABEL_143;
          }
        }

        else if (!*(void *)(v76 + 16))
        {
          goto LABEL_143;
        }

        sub_10006B33C();
        if (v74) {
          goto LABEL_162;
        }
        uint64_t v78 = v61;
        unint64_t v79 = (uint64_t)sub_10006B440();
        goto LABEL_54;
      case 0x1Au:
        uint64_t v116 = objc_opt_self(&OBJC_CLASS____CPSectionEngagementFeedback);
        if (!sub_10006B270(v116))
        {
LABEL_89:
          sub_10006B488();
          uint64_t v27 = v124;
          goto LABEL_146;
        }

        unint64_t v61 = sub_10006B3D0(v27);
        uint64_t v117 = [v27 section];
        if (v117 && (sub_100080474(v117), v118))
        {
          sub_10006B394();
          if (v120)
          {
            if (sub_10006B2E4(v119)) {
              goto LABEL_85;
            }
          }

          else if (*(void *)(v119 + 16))
          {
LABEL_85:
            sub_10006B33C();
            if (ObjectType) {
              unint64_t v121 = sub_10006B330();
            }
            else {
              unint64_t v121 = (uint64_t)sub_10006B440();
            }
            unint64_t v122 = (void *)v121;
            uint64_t v123 = sub_10003B8E8();
            uint64_t v4 = sub_10005A6E0(v123, "queryId");

            goto LABEL_88;
          }

    uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"suggest_queries");
    uint64_t v97 = v96;
    uint64_t v98 = *(void *)(v78 + 16);
    if (v98)
    {
      uint64_t v99 = v95;
      sub_1000B4A3C();
      uint64_t v101 = v78 + v100;
      uint64_t v103 = *(void *)(v102 + 72);
      sub_1000B4A84();
      while (1)
      {
        uint64_t v104 = ((uint64_t (*)(char *, uint64_t, uint64_t))v78)(v9, v101, v88);
        uint64_t v105 = URLQueryItem.name.getter(v104);
        if (v105 == v99 && v106 == v97)
        {
          sub_1000B4A2C();
          uint64_t v109 = sub_1000110A8();
          goto LABEL_47;
        }

        sub_1000B4AD4(v105, v106, v99);
        sub_1000B4A5C();
        if ((v88 & 1) != 0) {
          break;
        }
        uint64_t v88 = v145;
        sub_10005A26C((uint64_t)v9, *(uint64_t (**)(uint64_t, uint64_t))(v147 + 8));
        v101 += v103;
        if (!--v98)
        {
          sub_1000110A8();
          uint64_t v83 = v134;
          goto LABEL_44;
        }
      }

      uint64_t v109 = sub_1000B4A2C();
      uint64_t v88 = v145;
LABEL_47:
      id v108 = URLQueryItem.value.getter(v109);
      uint64_t v45 = v110;
      sub_10005A26C((uint64_t)v9, *(uint64_t (**)(uint64_t, uint64_t))(v147 + 8));
      sub_1000110A8();
    }

    else
    {
LABEL_44:
      swift_bridgeObjectRelease();
      id v108 = 0LL;
      uint64_t v45 = 0LL;
    }

    unint64_t v140 = v108;
    uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"lc");
    uint64_t v113 = v112;
    unint64_t v114 = *(void *)(v83 + 16);
    unsigned __int8 v115 = v142;
    if (v114)
    {
      uint64_t v116 = v111;
      sub_1000B4A3C();
      uint64_t v117 = v83;
      uint64_t v119 = v83 + v118;
      unint64_t v121 = *(void *)(v120 + 72);
      unint64_t v122 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v120 + 16);
      swift_bridgeObjectRetain(v117);
      while (1)
      {
        uint64_t v123 = v122(v115, v119, v88);
        unint64_t v124 = URLQueryItem.name.getter(v123);
        if (v124 == v116 && v125 == v113)
        {
          sub_1000B4A68();
          os_log_type_t v128 = sub_10001450C();
          uint64_t countAndFlagsBits = v144._countAndFlagsBits;
          object = v144._object;
          goto LABEL_61;
        }

        _stringCompareWithSmolCheck(_:_:expecting:)(v124, v125, v116, v113, 0LL);
        sub_1000B4A5C();
        if ((v88 & 1) != 0) {
          break;
        }
        unsigned __int8 v115 = v142;
        uint64_t v88 = v145;
        sub_10005A26C(v142, *(uint64_t (**)(uint64_t, uint64_t))(v147 + 8));
        v119 += v121;
        if (!--v114)
        {
          sub_10001450C();
          sub_100019F4C(v134);
          goto LABEL_58;
        }
      }

      os_log_type_t v128 = sub_1000B4A68();
      uint64_t countAndFlagsBits = v144._countAndFlagsBits;
      object = v144._object;
LABEL_61:
      uint64_t v130 = v142;
      uint64_t v127 = v137;
      uint64_t v142 = URLQueryItem.value.getter(v128);
      uint64_t v145 = v131;
      sub_10005A26C(v130, *(uint64_t (**)(uint64_t, uint64_t))(v147 + 8));
      swift_bridgeObjectRelease();
      sub_10001450C();
      char v49 = countAndFlagsBits;
    }

    else
    {
      swift_bridgeObjectRelease();
      sub_10001450C();
LABEL_58:
      uint64_t v142 = 0LL;
      uint64_t v145 = 0LL;
      char v49 = v144._countAndFlagsBits;
      object = v144._object;
      uint64_t v127 = v137;
    }

    (*(void (**)(char *, uint64_t))(v138 + 8))(v127, v136);
    sub_1000B4A50(*(uint64_t (**)(void, uint64_t))(v139 + 8));
    uint64_t v46 = v135;
    uint64_t v47 = v133;
    goto LABEL_9;
  }

  sub_10004729C(v75, *(uint64_t (**)(uint64_t, uint64_t))(v138 + 8));
  sub_1000B4A50(*(uint64_t (**)(void, uint64_t))(v66 + 8));
LABEL_8:
  uint64_t v142 = 0LL;
  uint64_t v145 = 0LL;
  unint64_t v140 = 0LL;
  uint64_t v45 = 0LL;
  uint64_t v46 = 0LL;
  uint64_t v47 = 0LL;
  char v49 = v144._countAndFlagsBits;
  object = v144._object;
LABEL_9:
  if (qword_1001D0530 != -1) {
    swift_once(&qword_1001D0530, sub_1000344F0);
  }
  uint64_t v50 = sub_100010ED4();
  sub_1000093D0(v50, (uint64_t)qword_1001EDC60);
  sub_1000A18C4(v45);
  sub_1000A18C4((uint64_t)object);
  id v51 = sub_1000A18C4(v47);
  NSString v52 = (os_log_s *)Logger.logObject.getter(v51);
  unsigned int v53 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v52, v53))
  {
    NSString v54 = sub_100009B20(32LL);
    uint64_t v146 = sub_100009B20(96LL);
    uint64_t v147 = v37;
    v149[0] = v146;
    *(_DWORD *)NSString v54 = 136643331;
    swift_bridgeObjectRetain(object);
    unsigned int v150 = sub_1000307E0(v49, (unint64_t)object, v149);
    sub_1000B4ABC(v150, (uint64_t)v151);
    swift_bridgeObjectRelease_n(object, 3LL);
    *(_WORD *)(v54 + 12) = 2080;
    unsigned int v150 = v46;
    v151[0] = v47;
    swift_bridgeObjectRetain(v47);
    sub_10000941C(&qword_1001D4480);
    unsigned int v55 = sub_1000B4AC8();
    os_log_type_t v135 = v46;
    unsigned int v150 = sub_1000307E0(v55, v56, v149);
    sub_1000B4ABC(v150, (uint64_t)v151);
    sub_100019F4C(v47);
    sub_1000110A8();
    *(_WORD *)(v54 + 22) = 2085;
    uint64_t v57 = v140;
    unsigned int v150 = v140;
    v151[0] = v45;
    swift_bridgeObjectRetain(v45);
    uint64_t v58 = sub_1000B4AC8();
    unsigned int v150 = sub_1000307E0(v58, v59, v149);
    char v49 = v144._countAndFlagsBits;
    object = v144._object;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, v151, v54 + 24);
    sub_100019F4C(v45);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v52,  v53,  "cache lookup: '%{sensitive}s' qtype %s suggest %{sensitive}s",  (uint8_t *)v54,  0x20u);
    uint64_t v60 = v146;
    swift_arrayDestroy(v146, 3LL);
    uint64_t v37 = v147;
    sub_100010C34(v60);
    sub_100010C34(v54);
  }

  else
  {

    sub_100019F4C(v45);
    sub_100019F4C(v47);
    unint64_t v61 = sub_100019F4C((uint64_t)object);
    uint64_t v57 = v140;
  }

  __chkstk_darwin(v61);
  *(&v132 - 12) = v49;
  *(&v132 - 11) = (uint64_t)object;
  *(&v132 - 10) = v62;
  *(&v132 - 9) = v39;
  *(&v132 - 8) = v63;
  *(&v132 - 7) = v47;
  *(&v132 - 6) = v57;
  *(&v132 - 5) = v45;
  uint64_t v64 = v145;
  *(&v132 - 4) = v142;
  *(&v132 - 3) = v64;
  *(&v132 - 2) = v148;
  *(&v132 - 1) = v37;
  uint64_t v65 = sub_10000941C(&qword_1001D5ED8);
  OS_dispatch_queue.sync<A>(execute:)(&v150, sub_1000B490C, &v132 - 14, v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
LABEL_15:
  sub_1000144D4();
}

  sub_1000CF774();
  if (!v38 || !v36) {
    goto LABEL_34;
  }
  uint64_t v39 = sub_1000CF838(v37);
  if (v9 && v40 == v42) {
    goto LABEL_34;
  }
  _stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v41, v42, 0LL);
}

  __break(1u);
}

  swift_release();
LABEL_37:
  if ((v37 & 1) != 0)
  {
    unint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
    if (v34 >= 64) {
      sub_100057A20(0LL, (unint64_t)(v34 + 63) >> 6, v18);
    }
    else {
      *uint64_t v18 = -1LL << v34;
    }
    *(void *)(v5 + sub_10000BDD4(v0 + 16) = 0LL;
  }

    a1[2] = v4;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }

  uint64_t v5 = a1[6];
  if (v3 >= *(void *)(v5 + 16)) {
    goto LABEL_35;
  }
  while (1)
  {
    uint64_t v6 = swift_isUniquelyReferenced_nonNull_native(v5);
    a1[6] = v5;
    if ((v6 & 1) == 0)
    {
      sub_10013B660();
      uint64_t v5 = v17;
      a1[6] = v17;
    }

    uint64_t v7 = *(void *)(v5 + 16);
    if (!v7) {
      break;
    }
    uint64_t v8 = v7 - 1;
    uint64_t v9 = *(_BYTE *)(v5 + v8 + 32);
    *(void *)(v5 + sub_10000BDD4(v0 + 16) = v8;
    a1[6] = v5;
    uint64_t v10 = a1[5];
    uint64_t v11 = swift_isUniquelyReferenced_nonNull_native(v10);
    a1[5] = v10;
    if ((v9 & 1) != 0)
    {
      if ((v11 & 1) == 0)
      {
        sub_100135560();
        uint64_t v10 = v18;
        a1[5] = v18;
      }

      uint64_t v12 = *(void *)(v10 + 16);
      if (v12 >= *(void *)(v10 + 24) >> 1)
      {
        sub_100135560();
        uint64_t v10 = v19;
        a1[5] = v19;
      }

      *(void *)(v10 + sub_10000BDD4(v0 + 16) = v12 + 1;
      uint64_t v13 = v10 + 24 * v12;
      *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 32) = xmmword_1001652F0;
      uint64_t v14 = v13 + 32;
    }

    else
    {
      if ((v11 & 1) == 0)
      {
        sub_100135560();
        uint64_t v10 = v20;
        a1[5] = v20;
      }

      uint64_t v15 = *(void *)(v10 + 16);
      if (v15 >= *(void *)(v10 + 24) >> 1)
      {
        sub_100135560();
        uint64_t v10 = v21;
        a1[5] = v21;
      }

      *(void *)(v10 + sub_10000BDD4(v0 + 16) = v15 + 1;
      uint64_t v16 = v10 + 24 * v15;
      *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 32) = 0LL;
      *(void *)(v16 + 40) = 0LL;
      uint64_t v14 = v16 + 32;
    }

    *(_BYTE *)(v14 + sub_10000BDD4(v0 + 16) = 1;
    uint64_t v5 = a1[6];
    if (v3 >= *(void *)(v5 + 16)) {
      goto LABEL_35;
    }
  }

  __break(1u);
LABEL_37:
  __break(1u);
}

    v1[2] = v5;
    swift_bridgeObjectRelease();
    return;
  }

  uint64_t v7 = v1[6];
  if (v4 >= *(void *)(v7 + 16)) {
    goto LABEL_35;
  }
  while (1)
  {
    uint64_t v8 = swift_isUniquelyReferenced_nonNull_native(v7);
    v1[6] = v7;
    if ((v8 & 1) == 0)
    {
      sub_10013B660();
      uint64_t v7 = v19;
      v1[6] = v19;
    }

    uint64_t v9 = *(void *)(v7 + 16);
    if (!v9) {
      break;
    }
    uint64_t v10 = v9 - 1;
    uint64_t v11 = *(_BYTE *)(v7 + v10 + 32);
    *(void *)(v7 + sub_10000BDD4(v0 + 16) = v10;
    v1[6] = v7;
    uint64_t v12 = v1[5];
    uint64_t v13 = swift_isUniquelyReferenced_nonNull_native(v12);
    v1[5] = v12;
    if ((v11 & 1) != 0)
    {
      if ((v13 & 1) == 0)
      {
        sub_100135560();
        uint64_t v12 = v20;
        v1[5] = v20;
      }

      uint64_t v14 = *(void *)(v12 + 16);
      if (v14 >= *(void *)(v12 + 24) >> 1)
      {
        sub_100135560();
        uint64_t v12 = v21;
        v1[5] = v21;
      }

      *(void *)(v12 + sub_10000BDD4(v0 + 16) = v14 + 1;
      uint64_t v15 = v12 + 24 * v14;
      *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 32) = xmmword_1001652F0;
      uint64_t v16 = v15 + 32;
    }

    else
    {
      if ((v13 & 1) == 0)
      {
        sub_100135560();
        uint64_t v12 = v22;
        v1[5] = v22;
      }

      uint64_t v17 = *(void *)(v12 + 16);
      if (v17 >= *(void *)(v12 + 24) >> 1)
      {
        sub_100135560();
        uint64_t v12 = v23;
        v1[5] = v23;
      }

      *(void *)(v12 + sub_10000BDD4(v0 + 16) = v17 + 1;
      uint64_t v18 = v12 + 24 * v17;
      *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 32) = 0LL;
      *(void *)(v18 + 40) = 0LL;
      uint64_t v16 = v18 + 32;
    }

    *(_BYTE *)(v16 + sub_10000BDD4(v0 + 16) = 1;
    uint64_t v7 = v1[6];
    if (v4 >= *(void *)(v7 + 16)) {
      goto LABEL_35;
    }
  }

  __break(1u);
LABEL_37:
  __break(1u);
}

void sub_100051810()
{
  if (sub_10005A61C())
  {
    id v1 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    swift_unknownObjectRelease();
    uint64_t v0 = sub_100033948();
    if (v0[2]) {
      sub_1000DA264((uint64_t)v0);
    }
    sub_1000110A8();
  }

void sub_1000518B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    sub_10005A0B4();
    if (v5 || (sub_10005A1F8(), !v6))
    {
      if ((sub_10005A048(v4) & 1) == 0) {
        sub_10005A098(*(void *)(v3 + 256), *(void *)(v3 + 264));
      }
    }
  }

  sub_1000110D4();
}

void sub_1000518F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    sub_10005A0B4();
    if (v5 || (sub_10005A1F8(), !v6))
    {
      if ((sub_10005A048(v4) & 1) == 0) {
        sub_10005A098(*(void *)(v3 + 624), *(void *)(v3 + 632));
      }
    }
  }

  sub_1000110D4();
}

void sub_100051934()
{
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  char v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  type metadata accessor for String.Encoding(0LL);
  sub_100009B94();
  __chkstk_darwin(v11);
  sub_100009AD4();
  if (v10) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = _swiftEmptyArrayStorage;
  }
  uint64_t v45 = v12;
  if (!v2) {
    goto LABEL_18;
  }
  uint64_t v13 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000LL) == 0) {
    uint64_t v13 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v13)
  {
LABEL_18:
    sub_100047294();
    goto LABEL_29;
  }

  char v42 = (void *)v4;
  uint64_t v43 = v2;
  uint64_t v40 = 45LL;
  unint64_t v41 = 0xE100000000000000LL;
  sub_1000106CC();
  sub_100047294();
  sub_10003EF98();
  if ((sub_10005A458((uint64_t)&v40, (uint64_t)&type metadata for String, (uint64_t)&type metadata for String) & 1) == 0
    || (char v42 = (void *)v4,
        uint64_t v43 = v2,
        uint64_t v40 = 95LL,
        unint64_t v41 = 0xE100000000000000LL,
        (sub_10005A458((uint64_t)&v40, (uint64_t)&type metadata for String, (uint64_t)&type metadata for String) & 1) == 0))
  {
    if (v6)
    {
      char v42 = (void *)v4;
      uint64_t v43 = v2;
      sub_10003EF98();
      v14._uint64_t countAndFlagsBits = 45LL;
      v14._object = (void *)0xE100000000000000LL;
      String.append(_:)(v14);
      v15._uint64_t countAndFlagsBits = v8;
      v15._object = v6;
      String.append(_:)(v15);
      sub_1000110E0();
      uint64_t v4 = (uint64_t)v42;
      unint64_t v2 = v43;
    }
  }

  uint64_t v16 = v12[2];
  if (v16)
  {
    swift_bridgeObjectRetain_n(v12, 2LL);
    uint64_t v17 = v12 + 5;
    while (1)
    {
      uint64_t v19 = *(v17 - 1);
      uint64_t v18 = *v17;
      char v42 = (void *)v19;
      uint64_t v43 = v18;
      uint64_t v40 = v4;
      unint64_t v41 = v2;
      swift_bridgeObjectRetain(v18);
      v17 += 2;
      sub_10003B8E8();
      if (!--v16)
      {
        sub_100019F4C((uint64_t)v12);
        goto LABEL_17;
      }
    }

    sub_100019F4C((uint64_t)v12);
    swift_bridgeObjectRetain(v18);
    uint64_t v22 = sub_10005A62C();
    sub_100050D98(v22, v19, v18);
    uint64_t v24 = v23;
    sub_10001460C();
    uint64_t v45 = v24;
    uint64_t v20 = v19;
    uint64_t v21 = v18;
  }

  else
  {
LABEL_17:
    sub_10003EF98();
    uint64_t v20 = v4;
    uint64_t v21 = v2;
  }

  sub_1000592A0(0LL, 0LL, v20, v21);
  uint64_t v12 = v45;
  if (v45[2] >= 4uLL)
  {
    uint64_t v25 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
    uint64_t v26 = sub_10005A62C();
    uint64_t v27 = swift_unknownObjectRetain_n(v26, 2LL);
    uint64_t v28 = (void *)swift_dynamicCastClass(v27, v25);
    if (!v28)
    {
      sub_10001460C();
      uint64_t v28 = _swiftEmptyArrayStorage;
    }

    uint64_t v29 = v28[2];
    swift_release();
    if (v29 == 3)
    {
      uint64_t v30 = (void *)swift_dynamicCastClass(v12, v25);
      sub_100019F4C((uint64_t)v12);
      if (v30)
      {
LABEL_27:
        sub_1000110E0();
        uint64_t v45 = v30;
        uint64_t v12 = v30;
        goto LABEL_29;
      }

      uint64_t v30 = _swiftEmptyArrayStorage;
    }

    else
    {
      swift_bridgeObjectRelease();
      sub_1000DBBF0((uint64_t)v12, (uint64_t)(v12 + 4), 0LL, 7uLL);
      uint64_t v30 = v39;
      sub_10001460C();
    }

    sub_10001460C();
    goto LABEL_27;
  }

  sub_1000110E0();
LABEL_29:
  if (v12[2])
  {
    uint64_t v44 = sub_10000941C(&qword_1001D1460);
    char v42 = v12;
    sub_10005A62C();
    static JSONSerializationUtil.data(withJSONObject:options:)(&v42, 0LL);
    uint64_t v31 = sub_1000108B8(&v42);
    static String.Encoding.utf8.getter(v31);
    uint64_t v32 = sub_10005A578();
    uint64_t v34 = String.init(data:encoding:)(v32, v33, v0);
    if (v35)
    {
      uint64_t v36 = v34;
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"X-Apple-Languages");
      sub_10005A778(v37, v38, v36);
      sub_1000325E4();
      sub_1000110A8();
    }

    sub_10005A904();
  }

  swift_bridgeObjectRelease();
  sub_100009AA0();
}

void sub_100051D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    sub_10005A0B4();
    if (v5 || (sub_10005A1F8(), !v6))
    {
      if ((sub_10005A048(v4) & 1) == 0) {
        sub_10005A098(*(void *)(v3 + 544), *(void *)(v3 + 552));
      }
    }
  }

  sub_1000110D4();
}

void sub_100051D50()
{
  if (qword_1001D05C8 != -1) {
    swift_once(&qword_1001D05C8, sub_10006B928);
  }
  if (byte_1001EDD88 == 1) {
    sub_10005A1C4(v0[10], v0[11], v0[40], v0[41]);
  }
  sub_100009A90();
}

void sub_100051DAC(uint64_t a1, uint64_t a2)
{
  if (!a2 && (sub_10005A1F8(), v4) || (sub_10005A048(a2) & 1) != 0)
  {
    sub_1000110D4();
  }

  else
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"User-Agent");
    sub_10005A0E4(v5, v6);
    sub_10005A074(v2);
  }

void sub_100051E08()
{
  uint64_t v37 = v0;
  uint64_t v38 = v3;
  uint64_t v32 = v4;
  uint64_t v33 = v5;
  uint64_t v35 = v6;
  uint64_t v36 = v7;
  uint64_t v39 = v8;
  uint64_t v10 = v9;
  uint64_t v34 = sub_10005A3C4();
  sub_10005A234();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_10005A18C();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_10005A4D4();
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v28 - v17;
  uint64_t v19 = v10[3];
  sub_1000C1ADC(v10[2], v19, v38, (uint64_t)&v28 - v17);
  if (!v1)
  {
    uint64_t v31 = v13;
    uint64_t v38 = v2;
    uint64_t v39 = v19;
    type metadata accessor for ParsecURLRequestBuilder(0LL);
    sub_10005A3B0(v0, (uint64_t)v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 16));
    uint64_t v20 = sub_1000D9978(v0);
    uint64_t v28 = v18;
    uint64_t v29 = v15;
    uint64_t v30 = v14;
    swift_bridgeObjectRetain(v33);
    uint64_t v21 = v20;
    sub_10005131C();
    sub_1000325E4();
    uint64_t v22 = v38;
    uint64_t v23 = (uint64_t)v31;
    uint64_t v24 = (*(uint64_t (**)(char *, void, uint64_t))(v38 + 104))( v31,  enum case for PegasusClientName.Parsecd(_:),  v34);
    PegasusClientName.rawValue.getter(v24);
    uint64_t v25 = sub_10005A26C(v23, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
    uint64_t v26 = sub_100009B34(v25, &qword_1001D3170, &OBJC_CLASS___NSNumber_ptr);
    Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v26,  &protocol witness table for String);
    sub_10005A8E8();
    sub_1000110E0();
    sub_10001460C();
    sub_100051810();
    sub_1000518B0(v21, v10[6], v10[7]);
    sub_1000518F0(v21, v10[4], v10[5]);
    sub_10005A8D4(v21);
    UserAgent.fullString.getter(v27);
    sub_100052080();
    sub_1000325E4();
    sub_10005A6E8(v36);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v28, v30);
    sub_10005A8E0();
  }

  sub_10002716C();
}

void sub_100052080()
{
  if (v2 || (sub_10005A1F8(), !v3))
  {
    if ((sub_10005A048(v1) & 1) == 0) {
      sub_10005A098(*(void *)(v0 + 592), *(void *)(v0 + 600));
    }
  }

  sub_1000110D4();
}

void sub_1000520C0()
{
  uint64_t v1 = v0;
  uint64_t v2 = objc_opt_self(&OBJC_CLASS___PARSearchReplayRequest);
  if (swift_dynamicCastObjCClass(v1, v2))
  {
    id v3 = v1;
    sub_100052174();
  }

  else
  {
    sub_1000522A4();
  }

  sub_10002716C();
}

void sub_100052174()
{
  uint64_t v4 = v3;
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  __chkstk_darwin(v5);
  sub_100009AEC();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = sub_10005A18C();
  sub_10005A368();
  __chkstk_darwin(v10);
  sub_10005A4F0();
  __chkstk_darwin(v11);
  sub_10005A670();
  uint64_t v13 = sub_10005A478(v12, (SEL *)&selRef_replaySearchURL);
  if (!v14) {
    goto LABEL_5;
  }
  URL.init(string:)(v13, v14);
  sub_10003B8E8();
  sub_10005A148(v8, 1LL, v9);
  if (v15)
  {
    sub_100028CD0(v8, &qword_1001D5ED0);
LABEL_5:
    unint64_t v16 = sub_100059E10();
    uint64_t v17 = sub_100010EA0((uint64_t)&type metadata for ParsecURLRequestBuilder.URLError, v16);
    sub_10005A0C4(v17, v18);
    goto LABEL_6;
  }

  uint64_t v19 = sub_10005A15C();
  sub_10005A3B0(v19, v20, v21);
  sub_10005A3B0(v1, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v1, 0LL, 60.0);
  uint64_t v22 = sub_100059B54(v4);
  URLRequest.allHTTPHeaderFields.setter(v22);
  sub_10005A26C(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
LABEL_6:
  sub_10005A8AC();
  sub_10002716C();
}

void sub_1000522A4()
{
  uint64_t v192 = v1;
  uint64_t v184 = v4;
  uint64_t v187 = v5;
  uint64_t v188 = v6;
  uint64_t v189 = v7;
  uint64_t v9 = v8;
  id v199 = v10;
  uint64_t v194 = v11;
  sub_10000941C(&qword_1001D3DA8);
  sub_100009B94();
  __chkstk_darwin(v12);
  uint64_t v182 = (char *)v177 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10003D810();
  __chkstk_darwin(v14);
  sub_10005A2F8();
  uint64_t v186 = v15;
  uint64_t v183 = sub_10005A1B4();
  sub_100009B94();
  __chkstk_darwin(v16);
  sub_10005A50C(v17, v177[0]);
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  __chkstk_darwin(v18);
  sub_100032C48();
  uint64_t v197 = v19;
  sub_10003D810();
  __chkstk_darwin(v20);
  sub_10005A380();
  uint64_t v22 = __chkstk_darwin(v21);
  sub_10005A8C0(v22, v23, v24, v25, v26, v27, v28, v29, v177[0]);
  uint64_t v30 = sub_10005A18C();
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  sub_100032C48();
  uint64_t v191 = v32;
  sub_10003D810();
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)v177 - v34;
  uint64_t v36 = sub_10005A3C4();
  sub_10005A234();
  __chkstk_darwin(v37);
  sub_100019EB4();
  unint64_t v193 = v0;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v0 + 2);
  if (Strong)
  {
    uint64_t v181 = v35;
    uint64_t v195 = v31;
    uint64_t v196 = v30;
    uint64_t v190 = Strong;
    uint64_t v39 = v9;
    uint64_t v40 = sub_10005A6AC(Strong, (SEL *)&selRef_clientName);
    uint64_t v42 = v41;
    uint64_t v43 = *(uint64_t (**)(void *))(v2 + 104);
    int v178 = enum case for PegasusClientName.Spotlight(_:);
    uint64_t v44 = v43(v0);
    uint64_t v45 = PegasusClientName.rawValue.getter(v44);
    uint64_t v47 = v46;
    uint64_t v179 = v2;
    uint64_t v180 = v36;
    uint64_t v48 = *(void (**)(uint64_t))(v2 + 8);
    uint64_t v49 = sub_10005A7B4();
    v48(v49);
    if (v42)
    {
      BOOL v50 = v40 == v45 && v42 == v47;
      if (v50)
      {
        sub_10005A1BC();
        sub_1000325E4();
        NSString v52 = v39;
        uint64_t v54 = v195;
        uint64_t v53 = v196;
      }

      else
      {
        char v51 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v42, v45, v47, 0LL);
        sub_10005A1BC();
        sub_1000325E4();
        NSString v52 = v39;
        uint64_t v54 = v195;
        uint64_t v53 = v196;
        if ((v51 & 1) == 0) {
          goto LABEL_15;
        }
      }

      if ((char *)[v199 triggerEvent] - 24 <= (char *)0xFFFFFFFFFFFFFFFDLL)
      {
        id v58 = [v52 uncommittedSearchURL];
        if (!v58)
        {
          uint64_t v61 = 1LL;
          goto LABEL_18;
        }

        uint64_t v59 = v58;
LABEL_17:
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v59);

        uint64_t v61 = 0LL;
LABEL_18:
        uint64_t v62 = v198;
        goto LABEL_20;
      }
    }

    else
    {
      sub_1000325E4();
      NSString v52 = v39;
      uint64_t v54 = v195;
      uint64_t v53 = v196;
    }

LABEL_38:
        uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"qtype");
        sub_10005A378(v81, v82, v77, v78);
        sub_1000145F0();
        sub_10001450C();
        goto LABEL_39;
      }

void sub_100052E10()
{
  if (sub_10005A61C())
  {
    id v0 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    [v0 postNotificationName:@"com.apple.parsecd.performedSearch" object:0];
    swift_unknownObjectRelease();
  }

void sub_100052E98()
{
}

void sub_100052EC0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    v14[3] = sub_10000941C(&qword_1001D3DC0);
    v14[0] = a2;
    swift_bridgeObjectRetain(a2);
    static JSONSerializationUtil.data(withJSONObject:options:)(v14, 0LL);
    sub_10005A654();
    uint64_t v5 = sub_1000108B8(v14);
    static String.Encoding.utf8.getter(v5);
    uint64_t v6 = sub_10005A0A8();
    String.init(data:encoding:)(v6, v7, v2);
    uint64_t v9 = v8;
    uint64_t v10 = sub_10005A0A8();
    sub_100010A30(v10, v11);
    if (v9)
    {
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"X-Apple-TopTopics");
      sub_10005A0E4(v12, v13);
      sub_1000325E4();
      sub_10001450C();
    }
  }

  sub_100019F1C();
}

uint64_t sub_100052FA4(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a2 + *(int *)(sub_10005A1B4() + 120));
  uint64_t v4 = 6710895LL;
  if ((v3 & 1) != 0) {
    uint64_t v4 = 28271LL;
  }
  unint64_t v5 = 0xE300000000000000LL;
  if ((v3 & 1) != 0) {
    unint64_t v5 = 0xE200000000000000LL;
  }
  if (v3 == 2) {
    uint64_t v6 = 28271LL;
  }
  else {
    uint64_t v6 = v4;
  }
  if (v3 == 2) {
    uint64_t v7 = 0xE200000000000000LL;
  }
  else {
    uint64_t v7 = v5;
  }
  sub_10005A264(*(void *)(v2 + 784), *(void *)(v2 + 792), v6, v7);
  return sub_10005A074(v7);
}

void sub_100053010()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_10000941C(&qword_1001D3DB8);
  sub_100009B94();
  __chkstk_darwin(v7);
  uint64_t v8 = sub_10005A528();
  uint64_t v9 = type metadata accessor for Trialpb_TrialExperiment(v8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100009AEC();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = sub_10001085C(v6, (SEL *)&selRef_clientShortName);
  if (!v15) {
    goto LABEL_10;
  }
  if (!v2)
  {
    sub_1000145F0();
    uint64_t v34 = sub_10004358C();
    sub_100009654(v34, v35, v36, v9);
    goto LABEL_9;
  }

  sub_1000292DC(v14, v15, v2, v0);
  sub_1000145F0();
  uint64_t v16 = sub_10005A7A8();
  if (sub_100010708(v16, v17, v9) == 1)
  {
LABEL_9:
    sub_100028CD0(v0, &qword_1001D3DB8);
    goto LABEL_10;
  }

  sub_10005A274(v13, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32));
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"X-Apple-Trial-Treatment-Id");
  sub_10005A634();
  uint64_t v19 = Trialpb_TrialExperiment.treatmentID.getter(v18);
  sub_10005A12C(v19, v20);
  sub_1000145F0();
  sub_100010C70();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"X-Apple-Trial-Experiment-Id");
  sub_10005A634();
  uint64_t v22 = Trialpb_TrialExperiment.experimentID.getter(v21);
  sub_10005A12C(v22, v23);
  sub_1000145F0();
  sub_100010C70();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"X-Apple-Trial-Namespace-Id");
  sub_10005A634();
  uint64_t v25 = Trialpb_TrialExperiment.experimentNamespace.getter(v24);
  sub_10005A12C(v25, v26);
  sub_1000145F0();
  sub_100010C70();
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"sx");
  sub_1000DA09C(v27, v28, 49LL, 0xE100000000000000LL);
  sub_1000110E0();
  uint64_t v29 = sub_10001085C(v6, (SEL *)&selRef_treatmentId);
  uint64_t v31 = v30;
  sub_10005A738(v29, v30);
  if (v31)
  {
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"cx");
    sub_10005A1C4(v32, v33, 49LL, 0xE100000000000000LL);
    sub_10001460C();
  }

  sub_10004729C(v13, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
LABEL_10:
  sub_100009AA0();
}

void sub_1000531F4()
{
  if (sub_10005A61C())
  {
    sub_100047AA0();
    if (v1)
    {
      uint64_t v2 = v0;
      uint64_t v3 = v1;
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"X-Apple-Whitelisted-App-Signature");
      uint64_t v6 = v5;
      sub_1000DA3E0(v4, v5, v2, v3);
      swift_unknownObjectRelease();
      sub_10001450C();
      sub_10005A0D4(v6);
    }

    else
    {
      swift_unknownObjectRelease();
    }
  }

  else
  {
    sub_100019F1C();
  }

void sub_100053288()
{
  uint64_t v2 = v1;
  uint64_t v60 = v4;
  uint64_t v61 = v3;
  uint64_t v59 = v5;
  sub_10000941C(&qword_1001D32B0);
  sub_100009B94();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v55 = *(void *)(v9 - 8);
  sub_100027160();
  __chkstk_darwin(v10);
  sub_100032C48();
  uint64_t v54 = v11;
  sub_10003D810();
  __chkstk_darwin(v12);
  id v58 = (char *)&v54 - v13;
  sub_10003D810();
  __chkstk_darwin(v14);
  uint64_t v57 = (char *)&v54 - v15;
  sub_10003D810();
  __chkstk_darwin(v16);
  sub_10005A2F8();
  uint64_t v56 = v17;
  uint64_t v18 = type metadata accessor for PegasusClientName(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  sub_10005A380();
  __chkstk_darwin(v20);
  uint64_t v21 = *(uint64_t (**)(char *, void, uint64_t))(v19 + 104);
  uint64_t v23 = v21((char *)&v54 - v22, enum case for PegasusClientName.Safari(_:), v18);
  uint64_t v24 = PegasusClientName.rawValue.getter(v23);
  uint64_t v26 = v25;
  uint64_t v27 = *(void (**)(uint64_t))(v19 + 8);
  uint64_t v28 = sub_10005A7B4();
  v27(v28);
  if (v24 == v60 && v26 == v2) {
    goto LABEL_12;
  }
  char v30 = sub_10005A06C(v60, v2, v24, v26);
  sub_10001450C();
  if ((v30 & 1) != 0) {
    goto LABEL_13;
  }
  uint64_t v31 = v21(v0, enum case for PegasusClientName.Spotlight(_:), v18);
  uint64_t v32 = PegasusClientName.rawValue.getter(v31);
  uint64_t v34 = v33;
  ((void (*)(char *, uint64_t))v27)(v0, v18);
  if (v32 == v60 && v34 == v2)
  {
LABEL_12:
    sub_10005A1BC();
  }

  else
  {
    char v36 = sub_10005A06C(v60, v2, v32, v34);
    sub_100009B3C();
    if ((v36 & 1) == 0) {
      goto LABEL_25;
    }
  }

LABEL_13:
  uint64_t v37 = sub_10005A1B4();
  uint64_t v38 = (uint64_t *)(v61 + *(int *)(v37 + 84));
  uint64_t v39 = v38[1];
  if (v39)
  {
    uint64_t v40 = *v38;
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"X-Apple-GEOCountryCodeSource");
    sub_10005A654();
    v62[0] = v40;
    v62[1] = v39;
    sub_1000145F8();
    String.init<A>(_:)( v62,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
    uint64_t v42 = v41;
    uint64_t v43 = sub_10005A0A8();
    sub_1000DA3E0(v43, v44, v45, v42);
    sub_10001460C();
    uint64_t v37 = sub_1000145F0();
  }

  uint64_t v46 = v56;
  static Date.now.getter(v37);
  uint64_t v47 = (uint64_t)v57;
  static Date.- infix(_:_:)(v46, 900.0);
  uint64_t v48 = (uint64_t)v58;
  static Date.- infix(_:_:)(v46, 14400.0);
  sub_100059ECC();
  if (sub_100010708((uint64_t)v8, 1LL, v9) == 1)
  {
    sub_100028CD0((uint64_t)v8, &qword_1001D32B0);
  }

  else
  {
    uint64_t v49 = v54;
    (*(void (**)(void))(v55 + 32))();
    if ((static Date.< infix(_:_:)(v49, v48) & 1) != 0)
    {
      uint64_t v50 = 0xE400000000000000LL;
      uint64_t v51 = 1919431742LL;
    }

    else if ((static Date.< infix(_:_:)(v49, v47) & 1) != 0)
    {
      uint64_t v50 = 0xE700000000000000LL;
      uint64_t v51 = 0x7268342D6D3531LL;
    }

    else
    {
      if ((static Date.< infix(_:_:)(v49, v46) & 1) == 0)
      {
        sub_10005A564(v49);
        goto LABEL_24;
      }

      uint64_t v50 = 0xE400000000000000LL;
      uint64_t v51 = 1832202556LL;
    }

    sub_10005A564(v49);
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"X-Apple-LocAge");
    sub_1000DA3E0(v52, v53, v51, v50);
    sub_1000110A8();
    sub_10001450C();
  }

    uint64_t v6 = (v11 - 1) & v11;
    uint64_t v9 = __clz(__rbit64(v11)) + (v10 << 6);
    uint64_t v5 = v10;
  }

  __break(1u);
}

    uint64_t v7 = (v11 - 1) & v11;
    uint64_t v9 = __clz(__rbit64(v11)) + (v10 << 6);
    char v30 = v10;
  }

  __break(1u);
}

    uint64_t v6 = (v10 - 1) & v10;
    uint64_t v8 = __clz(__rbit64(v10)) + (v9 << 6);
    uint64_t v43 = v9;
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

    uint64_t v9 = (v12 - 1) & v12;
    uint64_t v10 = __clz(__rbit64(v12)) + (v11 << 6);
    uint64_t v44 = v11;
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

    uint64_t v13 = sub_1000E4274();
    sub_100010EA0((uint64_t)&type metadata for SQLiteError, v13);
    *(void *)uint64_t v14 = countAndFlagsBits;
    *(void *)(v14 + 8) = object;
    *(void *)(v14 + sub_10000BDD4(v0 + 16) = 0LL;
    *(_BYTE *)(v14 + sub_10000BDD4(v0 + 24) = 1;
    swift_bridgeObjectRetain(object);
    swift_willThrow(v15);
    return v2;
  }

        __break(1u);
LABEL_14:
        swift_once(&qword_1001DA908, sub_10010B754);
LABEL_7:
        uint64_t result = sqlite3_bind_blob(v11, a4, a1, a6, (void (__cdecl *)(void *))qword_1001EDEF0);
        if ((_DWORD)result)
        {
          uint64_t v14 = result;
          uint64_t v15 = sub_1000E4274();
          uint64_t v16 = swift_allocError(&type metadata for SQLiteError, v15, 0LL, 0LL);
          *(void *)uint64_t v17 = v14;
          *(void *)(v17 + 8) = 0xD000000000000013LL;
          *(void *)(v17 + sub_10000BDD4(v0 + 16) = 0x8000000100173C90LL;
          *(_BYTE *)(v17 + sub_10000BDD4(v0 + 24) = 0;
          return swift_willThrow(v16);
        }

        return result;
      }

      if (v26 < v27)
      {
        if (v15 < v18) {
          goto LABEL_141;
        }
        if (v18 < v15)
        {
          uint64_t v137 = v2;
          uint64_t v138 = v17;
          uint64_t v130 = v16;
          char v36 = 0LL;
          uint64_t v37 = v144;
          uint64_t v38 = v144 * (v15 - 1);
          uint64_t v39 = v18;
          uint64_t v40 = v15 * v144;
          uint64_t v41 = v39;
          uint64_t v134 = v39;
          uint64_t v42 = v39 * v144;
          do
          {
            if (v41 != v15 + v36 - 1)
            {
              uint64_t v43 = v132;
              if (!v132) {
                goto LABEL_147;
              }
              uint64_t v44 = v132 + v42;
              uint64_t v45 = v132 + v38;
              sub_10014B4A0(v132 + v42, v133);
              if (v42 < v38 || v44 >= v43 + v40)
              {
                swift_arrayInitWithTakeFrontToBack(v43 + v42, v43 + v38, 1LL, v142);
                uint64_t v37 = v144;
              }

              else
              {
                uint64_t v37 = v144;
                if (v42 != v38) {
                  swift_arrayInitWithTakeBackToFront(v44, v45, 1LL, v142);
                }
              }

              sub_10014B4A0(v133, v45);
              uint64_t v20 = v141;
            }

            ++v41;
            --v36;
            v38 -= v37;
            v40 -= v37;
            v42 += v37;
          }

          while (v41 < v15 + v36);
          uint64_t v2 = v137;
          uint64_t v17 = v138;
          uint64_t v16 = v130;
          uint64_t v18 = v134;
        }
      }
    }

    if (v15 < v17)
    {
      if (__OFSUB__(v15, v18)) {
        goto LABEL_139;
      }
      if (v15 - v18 < v128)
      {
        if (__OFADD__(v18, v128)) {
          goto LABEL_142;
        }
        if (v18 + v128 >= v17) {
          uint64_t v47 = v17;
        }
        else {
          uint64_t v47 = v18 + v128;
        }
        if (v47 < v18) {
          goto LABEL_143;
        }
        if (v15 != v47)
        {
          uint64_t v134 = v18;
          uint64_t v130 = v16;
          uint64_t v48 = *(void *)(v136 + 72);
          uint64_t v144 = v48 * (v15 - 1);
          uint64_t v137 = v2;
          uint64_t v138 = v48;
          uint64_t v49 = v15 * v48;
          uint64_t v132 = v47;
          do
          {
            uint64_t v50 = 0LL;
            uint64_t v51 = v134;
            while (1)
            {
              uint64_t v52 = v15;
              uint64_t v53 = *v20;
              uint64_t v54 = v139;
              sub_10014B420(v49 + v50 + *v20, v139);
              uint64_t v55 = v144 + v50 + v53;
              uint64_t v56 = v140;
              sub_10014B420(v55, v140);
              uint64_t v57 = *(int *)(v142 + 28);
              id v58 = *(double *)(v54 + v57);
              uint64_t v59 = *(double *)(v56 + v57);
              sub_10014B464(v56);
              sub_10014B464(v54);
              if (v58 >= v59) {
                break;
              }
              uint64_t v60 = *v20;
              if (!*v20) {
                goto LABEL_145;
              }
              uint64_t v61 = v60 + v49 + v50;
              uint64_t v62 = v60 + v144 + v50;
              sub_10014B4A0(v61, v143);
              swift_arrayInitWithTakeFrontToBack(v61, v62, 1LL, v142);
              sub_10014B4A0(v143, v62);
              v50 -= v138;
              ++v51;
              uint64_t v15 = v52;
              uint64_t v20 = v141;
              if (v52 == v51) {
                goto LABEL_46;
              }
            }

            uint64_t v15 = v52;
LABEL_46:
            ++v15;
            v144 += v138;
            v49 += v138;
          }

          while (v15 != v132);
          uint64_t v15 = v132;
          uint64_t v2 = v137;
          uint64_t v16 = v130;
          uint64_t v18 = v134;
        }
      }
    }

    if (v15 < v18) {
      goto LABEL_138;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
    {
      sub_1000DD3BC(0, *((void *)v16 + 2) + 1LL, 1, v16);
      uint64_t v16 = v118;
    }

    uint64_t v64 = *((void *)v16 + 2);
    unint64_t v63 = *((void *)v16 + 3);
    uint64_t v65 = v64 + 1;
    if (v64 >= v63 >> 1)
    {
      sub_1000DD3BC(v63 > 1, v64 + 1, 1, v16);
      uint64_t v16 = v119;
    }

    uint64_t v137 = v2;
    *((void *)v16 + 2) = v65;
    uint64_t v66 = v16 + 32;
    uint64_t v67 = &v16[16 * v64 + 32];
    *(void *)uint64_t v67 = v18;
    *((void *)v67 + 1) = v15;
    if (v64) {
      break;
    }
    uint64_t v65 = 1LL;
LABEL_96:
    uint64_t v17 = v141[1];
    uint64_t v11 = v131;
    uint64_t v2 = v137;
    if (v15 >= v17) {
      goto LABEL_105;
    }
  }

  while (1)
  {
    uint64_t v68 = v65 - 1;
    if (v65 >= 4)
    {
      uint64_t v73 = &v66[2 * v65];
      uint64_t v74 = *(v73 - 8);
      id v75 = *(v73 - 7);
      uint64_t v79 = __OFSUB__(v75, v74);
      uint64_t v76 = v75 - v74;
      if (v79) {
        goto LABEL_123;
      }
      uint64_t v78 = *(v73 - 6);
      uint64_t v77 = *(v73 - 5);
      uint64_t v79 = __OFSUB__(v77, v78);
      uint64_t v71 = v77 - v78;
      uint64_t v72 = v79;
      if (v79) {
        goto LABEL_124;
      }
      uint64_t v80 = v65 - 2;
      uint64_t v81 = &v66[2 * v65 - 4];
      uint64_t v83 = *v81;
      uint64_t v82 = v81[1];
      uint64_t v79 = __OFSUB__(v82, v83);
      uint64_t v84 = v82 - v83;
      if (v79) {
        goto LABEL_125;
      }
      uint64_t v79 = __OFADD__(v71, v84);
      uint64_t v85 = v71 + v84;
      if (v79) {
        goto LABEL_127;
      }
      if (v85 >= v76)
      {
        uint64_t v103 = &v66[2 * v68];
        uint64_t v105 = *v103;
        uint64_t v104 = v103[1];
        uint64_t v79 = __OFSUB__(v104, v105);
        uint64_t v106 = v104 - v105;
        if (v79) {
          goto LABEL_133;
        }
        uint64_t v96 = v71 < v106;
        goto LABEL_85;
      }
    }

    else
    {
      if (v65 != 3)
      {
        uint64_t v97 = *((void *)v16 + 4);
        uint64_t v98 = *((void *)v16 + 5);
        uint64_t v79 = __OFSUB__(v98, v97);
        char v90 = v98 - v97;
        uint64_t v91 = v79;
        goto LABEL_79;
      }

      uint64_t v70 = *((void *)v16 + 4);
      uint64_t v69 = *((void *)v16 + 5);
      uint64_t v79 = __OFSUB__(v69, v70);
      uint64_t v71 = v69 - v70;
      uint64_t v72 = v79;
    }

    if ((v72 & 1) != 0) {
      goto LABEL_126;
    }
    uint64_t v80 = v65 - 2;
    uint64_t v86 = &v66[2 * v65 - 4];
    uint64_t v88 = *v86;
    uint64_t v87 = v86[1];
    uint64_t v89 = __OFSUB__(v87, v88);
    char v90 = v87 - v88;
    uint64_t v91 = v89;
    if (v89) {
      goto LABEL_128;
    }
    uint64_t v92 = &v66[2 * v68];
    uint64_t v94 = *v92;
    uint64_t v93 = v92[1];
    uint64_t v79 = __OFSUB__(v93, v94);
    uint64_t v95 = v93 - v94;
    if (v79) {
      goto LABEL_130;
    }
    if (__OFADD__(v90, v95)) {
      goto LABEL_132;
    }
    if (v90 + v95 >= v71)
    {
      uint64_t v96 = v71 < v95;
LABEL_85:
      if (v96) {
        uint64_t v68 = v80;
      }
      goto LABEL_87;
    }

LABEL_24:
  sub_10005A564(v48);
  sub_10005A564(v47);
  sub_10005A564(v46);
LABEL_25:
  sub_100009AA0();
}

        uint64_t v10 = (v10 + 1) & v11;
        if (((*(void *)(v34 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
          goto LABEL_25;
        }
      }

      swift_arrayInitWithTakeFrontToBack(v24, v25, 1LL, v3);
LABEL_23:
      a1 = v10;
      goto LABEL_24;
    }

  uint64_t v134 = v25;
  if (qword_1001D0520 != -1) {
LABEL_31:
  }
    swift_once(&qword_1001D0520, sub_1000344B0);
  uint64_t v112 = sub_100010ED4();
  uint64_t v113 = (void *)sub_1000093D0(v112, (uint64_t)qword_1001EDC30);
  sub_10005A62C();
  sub_100077254();
  sub_10005A62C();
  uint64_t v114 = sub_100077254();
  Logger.logObject.getter(v114);
  uint64_t v115 = sub_100010EC4();
  if (!sub_100077244(v115))
  {
    sub_10007705C((uint64_t)&a14);

    sub_100077054();
    sub_100077054();
    sub_100019F4C(v27);
    sub_100077054();
    goto LABEL_28;
  }

  uint64_t v116 = sub_100009B20(22LL);
  uint64_t v136 = (void *)sub_100009B20(8LL);
  uint64_t v117 = (const __CFString *)sub_100009B20(32LL);
  uint64_t v133 = v34;
  uint64_t v137 = v117;
  *(void *)&uint64_t v139 = v117;
  *(_DWORD *)uint64_t v116 = 136315394;
  sub_10005A62C();
  uint64_t v118 = sub_10005A0A8();
  v138[0] = (id)sub_1000307E0(v118, v119, v120);
  sub_1000772AC();
  sub_100019FA4(v27);
  *(_WORD *)(v116 + 12) = 2112;
  uint64_t v121 = v31;
  uint64_t v122 = (void *)sub_1000773A8();
  v138[0] = v122;
  sub_1000772AC();
  uint64_t v123 = v136;
  *uint64_t v136 = v122;
  sub_100077054();
  sub_100077054();
  sub_100077100((void *)&_mh_execute_header, (os_log_s *)v113, (os_log_type_t)v25, "error trying to remove %s: %@");
  sub_10000941C(&qword_1001D1060);
  sub_100030F9C((uint64_t)v123);
  sub_100010C34((uint64_t)v123);
  uint64_t v124 = v137;
  sub_100030F9C((uint64_t)v137);
  sub_100010C34((uint64_t)v124);
  sub_100010C34(v116);
  sub_10007705C((uint64_t)&a14);

  sub_100077054();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v133, v121);
LABEL_29:
  sub_100009AA0();
}

  sub_100009AA0();
}

      uint64_t v10 = (v16 - 1) & v16;
      uint64_t v39 = v17;
      uint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
    }

    uint64_t v19 = v4;
    uint64_t v20 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v23 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v14);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    Hasher.init(_seed:)(v40, *(void *)(v9 + 40));
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v25);
    String.hash(into:)(v40, v22, v21);
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1LL << *(_BYTE *)(v9 + 32);
    uint64_t v27 = result & ~v26;
    uint64_t v28 = v27 >> 6;
    if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) == 0) {
      break;
    }
    uint64_t v29 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_34:
    *(void *)(v12 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v29;
    uint64_t v34 = (void *)(*(void *)(v9 + 48) + 16 * v29);
    *uint64_t v34 = v22;
    v34[1] = v21;
    uint64_t v35 = (void *)(*(void *)(v9 + 56) + 16 * v29);
    char *v35 = v24;
    v35[1] = v25;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1LL)) {
      goto LABEL_39;
    }
    uint64_t v4 = v19;
    uint64_t v11 = v39;
    if (!v5) {
      return v9;
    }
  }

  char v30 = 0;
  uint64_t v31 = (unint64_t)(63 - v26) >> 6;
  while (++v28 != v31 || (v30 & 1) == 0)
  {
    uint64_t v32 = v28 == v31;
    if (v28 == v31) {
      uint64_t v28 = 0LL;
    }
    v30 |= v32;
    uint64_t v33 = *(void *)(v12 + 8 * v28);
    if (v33 != -1)
    {
      uint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
      goto LABEL_34;
    }
  }

  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v15, v24);
  }

  sub_1000AB89C(a2, (uint64_t)v14);
  uint64_t v24 = v15;
  if (sub_100010708((uint64_t)v14, 1LL, v15) == 1)
  {
    sub_1000ABB80();
    sub_1000ABB2C();
    uint64_t v15 = v69;
    sub_1000ABC14();
    sub_100019C1C((uint64_t)v14, (uint64_t *)&unk_1001D5D20);
    uint64_t v4 = v70;
  }

  else
  {
    uint64_t v15 = v69;
    uint64_t v4 = v70;
    sub_1000A1C7C(v69, (uint64_t)v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 32));
  }

  LOBYTE(sub_1000107D0(v3, v4, v5) = v68;
  uint64_t v14 = v71;
  if (!*((_BYTE *)v71 + 88))
  {
    if (!(_BYTE)v68)
    {
LABEL_26:
      if (*((void *)v71 + 2))
      {
        swift_unknownObjectRetain(*((void *)v71 + 2));
        uint64_t v39 = sub_1000ABB94();
        sub_100010CA0();
        __asm { BR              X10 }
      }

      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v15, v24);
    }

    if (v68 != 3)
    {
      if (v68 == 1)
      {
        uint64_t result = sub_1000ABA4C(v15, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
        *((_BYTE *)v14 + 88) = 1;
        return result;
      }

    uint64_t v6 = (v13 - 1) & v13;
    uint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    uint64_t v9 = v14;
  }

  uint64_t v15 = v9 + 5;
  if (v9 + 5 >= v31)
  {
LABEL_36:
    swift_release();
    sub_10003D774(a1);
    return (uint64_t)v3;
  }

  uint64_t v13 = *(void *)(v32 + 8 * v15);
  if (v13)
  {
    uint64_t v14 = v9 + 5;
    goto LABEL_24;
  }

  while (1)
  {
    uint64_t v14 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v14 >= v31) {
      goto LABEL_36;
    }
    uint64_t v13 = *(void *)(v32 + 8 * v14);
    ++v15;
    if (v13) {
      goto LABEL_24;
    }
  }

                swift_bridgeObjectRetain(v4);
                swift_release();
                uint64_t v18 = sub_1000E43B4();
                sub_100010EA0((uint64_t)&type metadata for SchemaError, v18);
                uint64_t v20 = v19;
                _StringGuts.grow(_:)(18LL);
                swift_bridgeObjectRelease();
                sub_1000E6D64();
                uint64_t v27 = v21;
                uint64_t v28 = v22;
                uint64_t v23 = *(void *)(v2 + 16);
                uint64_t v17 = *(void **)(v2 + 24);
                swift_bridgeObjectRetain(v17);
                v24._uint64_t countAndFlagsBits = v23;
                v24._object = v17;
                String.append(_:)(v24);
                swift_bridgeObjectRelease();
                sub_1000E6D58();
                uint64_t v34 = a1;
                v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
                String.append(_:)(v25);
                sub_10001450C();
                sub_1000E6D44();
                *(void *)uint64_t v20 = v27;
                *(void *)(v20 + 8) = v28;
                *(_BYTE *)(v20 + 41) = 5;
                swift_willThrow(v26);
                return v17;
              }
            }
          }
        }
      }
    }

          swift_release();
          return;
        }
      }
    }

  __break(1u);
}

          swift_release();
          swift_release();
          return;
        }
      }
    }

                swift_bridgeObjectRetain(v3);
                swift_release();
                uint64_t v15 = sub_1000E43B4();
                sub_100010EA0((uint64_t)&type metadata for SchemaError, v15);
                uint64_t v14 = v16;
                _StringGuts.grow(_:)(28LL);
                swift_bridgeObjectRelease();
                v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
                String.append(_:)(v17);
                uint64_t v18 = sub_10001450C();
                *(void *)uint64_t v14 = 0xD00000000000001ALL;
                *(void *)(v14 + 8) = 0x8000000100173530LL;
                *(_BYTE *)(v14 + 41) = 4;
                swift_willThrow(v18);
                return (void *)v14;
              }
            }
          }
        }
      }
    }

void sub_10005365C()
{
  if (v2 || (sub_10005A1F8(), !v3))
  {
    if ((sub_10005A048(v1) & 1) == 0) {
      sub_10005A098(*(void *)(v0 + 368), *(void *)(v0 + 376));
    }
  }

  sub_1000110D4();
}

void sub_100053698(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (*(void *)(a2 + 16)) {
      BOOL v4 = 0;
    }
    else {
      BOOL v4 = v3 == 0xE000000000000000LL;
    }
    if (!v4 && (sub_10005A048(*(void *)(a2 + 16)) & 1) == 0) {
      sub_10005A0F4(*(void *)(v2 + 272), *(void *)(v2 + 280));
    }
  }

  sub_1000110D4();
}

void sub_1000536E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 80);
  if (v3)
  {
    if (*(void *)(a2 + 72)) {
      BOOL v4 = 0;
    }
    else {
      BOOL v4 = v3 == 0xE000000000000000LL;
    }
    if (!v4 && (sub_10005A048(*(void *)(a2 + 72)) & 1) == 0) {
      sub_10005A0F4(*(void *)(v2 + 560), *(void *)(v2 + 568));
    }
  }

  sub_1000110D4();
}

void sub_100053734(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 40);
  if (v3)
  {
    if (*(void *)(a2 + 32)) {
      BOOL v4 = 0;
    }
    else {
      BOOL v4 = v3 == 0xE000000000000000LL;
    }
    if (!v4 && (sub_10005A048(*(void *)(a2 + 32)) & 1) == 0) {
      sub_10005A0F4(*(void *)(v2 + 832), *(void *)(v2 + 840));
    }
  }

  sub_1000110D4();
}

void sub_100053784(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 136);
  if (v3)
  {
    if (*(void *)(a2 + 128)) {
      BOOL v4 = 0;
    }
    else {
      BOOL v4 = v3 == 0xE000000000000000LL;
    }
    if (!v4 && (sub_10005A048(*(void *)(a2 + 128)) & 1) == 0) {
      sub_10005A0F4(*(void *)(v2 + 416), *(void *)(v2 + 424));
    }
  }

  sub_1000110D4();
}

void sub_1000537D0(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 64) & 1) != 0) {
    sub_10005A718(v2[36], v2[37], v2[40], v2[41]);
  }
  sub_100009A90();
}

void sub_1000537FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((a2 || a3 != 0xE000000000000000LL) && (sub_10005A05C(a2, a3) & 1) == 0) {
    sub_10005A754(v5[90], v5[91]);
  }
  if (a4 || (sub_10005A1F8(), !v8))
  {
    if ((sub_10005A048(a4) & 1) == 0) {
      sub_1000DA09C(v5[92], v5[93], a4, a5);
    }
  }

  sub_100019F1C();
}

void sub_100053888()
{
  uint64_t v3 = v2;
  sub_10000941C(&qword_1001D5480);
  sub_100009B94();
  __chkstk_darwin(v4);
  uint64_t v5 = sub_10005A528();
  uint64_t v6 = type metadata accessor for Apple_Parsec_Search_LocalCompletionInfo(v5);
  uint64_t v7 = *(void *)(v6 - 8);
  sub_100027160();
  __chkstk_darwin(v8);
  sub_100009B54();
  if (!swift_unknownObjectWeakLoadStrong(v0 + 2)
    || (id v9 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults],
        NSString v10 = String._bridgeToObjectiveC()(),
        unsigned __int8 v11 = [v9 BOOLForKey:v10],
        v9,
        v10,
        sub_10005A910(),
        (v11 & 1) == 0))
  {
    sub_100056BC8(v3, (uint64_t)v0);
    uint64_t v12 = sub_10005A7A8();
    if (sub_100010708(v12, v13, v6) == 1)
    {
      sub_100028CD0((uint64_t)v0, &qword_1001D5480);
    }

    else
    {
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v7 + 32))(v1, v0, v6);
      Apple_Parsec_Search_LocalCompletionInfo.completions.getter(v14);
      sub_1000271C4();
      sub_100059DA0(qword_1001D1468, &qword_1001D1460);
      uint64_t v28 = sub_10005A168();
      uint64_t v16 = v15;
      uint64_t v17 = sub_1000110E0();
      Apple_Parsec_Search_LocalCompletionInfo.origins.getter(v17);
      uint64_t v29 = sub_10005A168();
      uint64_t v19 = v18;
      uint64_t v20 = sub_1000145F0();
      Apple_Parsec_Search_LocalCompletionInfo.scores.getter(v20);
      uint64_t v21 = sub_10005A168();
      uint64_t v23 = v22;
      sub_1000145F0();
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"lc");
      sub_1000DA09C(v24, v25, v28, v16);
      sub_1000145F0();
      sub_100010C70();
      sub_1000DA09C(v0[96], v0[97], v21, v23);
      sub_10003B8E8();
      sub_1000DA09C(v0[94], v0[95], v29, v19);
      sub_1000110E0();
      uint64_t v26 = sub_10005A464();
      v27(v26);
    }
  }

  sub_100009AA0();
}

void sub_100053AC0(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + *(int *)(sub_10005A1B4() + 92) + 8);
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  sub_100019F1C();
}

void sub_100053BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(a2 + *(int *)(sub_10005A1B4() + 112));
  unint64_t v4 = v3[1];
  if (!v4) {
    goto LABEL_6;
  }
  uint64_t v5 = *v3;
  uint64_t v6 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000LL) == 0) {
    uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v6)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"X-Apple-Silhouette");
    sub_10005A0E4(v7, v8);
    sub_10005A074(v2);
  }

  else
  {
LABEL_6:
    sub_1000110D4();
  }

void sub_100053C18()
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(sub_10005A1A4() + 112));
  unint64_t v3 = v2[1];
  if (v3)
  {
    uint64_t v4 = *v2;
    uint64_t v5 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000LL) == 0) {
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFLL;
    }
    if (v5) {
      sub_10005A1C4(*(void *)(v0 + 304), *(void *)(v0 + 312), v4, v3);
    }
  }

  sub_1000110D4();
}

void sub_100053C64()
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(sub_10005A1A4() + 72));
  uint64_t v3 = v2[1];
  if (v3)
  {
    uint64_t v4 = *v2;
    if (*v2) {
      BOOL v5 = 0;
    }
    else {
      BOOL v5 = v3 == 0xE000000000000000LL;
    }
    if (!v5 && (sub_10005A05C(v4, v3) & 1) == 0) {
      sub_10005A1C4(*(void *)(v0 + 144), *(void *)(v0 + 152), v4, v3);
    }
  }

  sub_1000110D4();
}

void sub_100053CC4()
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(sub_10005A1A4() + 76));
  uint64_t v3 = v2[1];
  if (v3)
  {
    uint64_t v4 = *v2;
    if (*v2) {
      BOOL v5 = 0;
    }
    else {
      BOOL v5 = v3 == 0xE000000000000000LL;
    }
    if (!v5 && (sub_10005A05C(v4, v3) & 1) == 0) {
      sub_10005A1C4(*(void *)(v0 + 32), *(void *)(v0 + 40), v4, v3);
    }
  }

  sub_1000110D4();
}

void sub_100053D24()
{
}

void sub_100053D4C()
{
  uint64_t v2 = sub_10005A1A4();
  char v3 = *(_BYTE *)(v1 + *(int *)(v2 + 128));
  int v4 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 132));
  if (v4 != 2) {
    v3 |= v4;
  }
  if ((v3 & 1) != 0) {
    sub_10005A1C4(v0[64], v0[65], v0[66], v0[67]);
  }
  sub_1000110D4();
}

void sub_100053D98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 56);
  if (v3)
  {
    if (*(void *)(a2 + 48)) {
      BOOL v4 = 0;
    }
    else {
      BOOL v4 = v3 == 0xE000000000000000LL;
    }
    if (!v4 && (sub_10005A048(*(void *)(a2 + 48)) & 1) == 0) {
      sub_10005A0F4(*(void *)(v2 + 192), *(void *)(v2 + 200));
    }
  }

  sub_1000110D4();
}

void sub_100053DE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 120);
  if (!v3
    || (!*(void *)(a2 + 112) ? (BOOL v4 = v3 == 0xE000000000000000LL) : (BOOL v4 = 0),
        v4 || (sub_10005A048(*(void *)(a2 + 112)) & 1) != 0))
  {
    sub_1000110D4();
  }

  else
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"X-Apple-Subscriptions");
    sub_10005A0E4(v5, v6);
    sub_10005A074(v2);
  }

uint64_t sub_100053E48()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"X-Apple-UserGuid");
  uint64_t v2 = v1;
  uint64_t v3 = UUID.description.getter();
  uint64_t v5 = v4;
  sub_1000DA3E0(v0, v2, v3, v4);
  sub_10001450C();
  return sub_10005A0D4(v5);
}

void sub_100053EAC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10005A0A8();
  sub_1000DA3E0(v2, v3, v4, v1);
  sub_10001460C();
  sub_1000325E4();
  sub_10005A430();
}

void sub_100053F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    sub_10005A784();
    id v13 = v4;
    uint64_t v5 = sub_100059C94(v13);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = (uint64_t *)(v3 + *(int *)(sub_10005A1B4() + 108));
      uint64_t v8 = v7[1];
      if (!v8)
      {
LABEL_6:
        sub_1000110A8();
        goto LABEL_7;
      }

      uint64_t v9 = *v7;
      char v10 = sub_100050F1C(*v7, v7[1], v6);
      sub_1000110A8();
      if ((v10 & 1) != 0)
      {
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"X-Apple-RegionCode");
        sub_1000DA3E0(v11, v12, v9, v8);
        goto LABEL_6;
      }
    }

void sub_100053FD0(float a1)
{
  if (a1 > 0.0)
  {
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"X-Apple-UI-Scale");
    uint64_t v4 = v3;
    uint64_t v5 = Float.description.getter(a1);
    sub_1000DA3E0(v2, v4, v5, v6);
    sub_1000110A8();
    swift_bridgeObjectRelease();
  }

void sub_10005404C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    BOOL v6 = a3 == 0x6867696C746F7073LL && a4 == 0xE900000000000074LL;
    if (v6 || (sub_10005A06C(a3, a4, 0x6867696C746F7073LL, 0xE900000000000074LL) & 1) != 0)
    {
      uint64_t v7 = sub_10005A1B4();
      uint64_t v8 = (uint64_t *)(a2 + *(int *)(v7 + 136));
      uint64_t v9 = v8[1];
      if (v9)
      {
        if (*v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v9 == 0xE000000000000000LL;
        }
        if (!v10)
        {
          uint64_t v11 = v7;
          if ((sub_10005A05C(*v8, v9) & 1) == 0)
          {
            sub_10005A754(v4[14], v4[15]);
          }
        }
      }
    }
  }

  sub_100019F1C();
}

void sub_100054120(int a1, id a2)
{
  if ([a2 exp])
  {
    dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    uint64_t v3 = v2;
    uint64_t v4 = sub_10005A0A8();
    sub_10005A1C4(v4, v5, v6, v3);
    sub_1000110A8();
  }

  sub_10005A430();
}

void sub_10005419C(uint64_t a1, void *a2)
{
  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"X-Apple-Entity-Query");
    sub_10005A0E4(v4, v5);
    sub_1000325E4();
    sub_10005A074(v2);
  }

  else
  {
    sub_1000110D4();
  }

void sub_1000541F0()
{
  uint64_t v104 = v4;
  uint64_t v105 = v5;
  uint64_t v7 = v6;
  uint64_t v111 = v8;
  uint64_t v109 = v9;
  uint64_t v106 = v10;
  uint64_t v103 = sub_10005A3C4();
  uint64_t v107 = *(void *)(v103 - 8);
  sub_100027160();
  __chkstk_darwin(v11);
  sub_100014428();
  uint64_t v100 = v12;
  uint64_t v13 = sub_10000941C(&qword_1001D3DC8);
  sub_100009B94();
  __chkstk_darwin(v14);
  sub_100014428();
  uint64_t v102 = v15;
  sub_10000941C(&qword_1001D3DA8);
  sub_100009B94();
  __chkstk_darwin(v16);
  uint64_t v101 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10003D810();
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v97 - v20;
  __chkstk_darwin(v19);
  sub_10005A2F8();
  uint64_t v108 = v22;
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  __chkstk_darwin(v23);
  uint64_t v24 = sub_10005A104();
  sub_100047200();
  __chkstk_darwin(v25);
  sub_10005A4B8();
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v97 - v28;
  __chkstk_darwin(v27);
  sub_10005A2F8();
  uint64_t v112 = v30;
  uint64_t v110 = v7;
  id v31 = [v7 searchURL];
  if (!v31)
  {
    uint64_t v45 = sub_10004358C();
    uint64_t v39 = sub_100009654(v45, v46, v47, v24);
    goto LABEL_7;
  }

  uint64_t v32 = v31;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v31);

  uint64_t v33 = *(void (**)(uint64_t, char *, uint64_t))(v2 + 32);
  v33(v0, v29, v24);
  sub_10005A680();
  sub_100009654(v34, v35, v36, v24);
  uint64_t v37 = sub_10005A7A8();
  uint64_t v39 = sub_10005A148(v37, v38, v24);
  if (v83)
  {
LABEL_7:
    sub_10003D89C(v39, &qword_1001D5ED0);
    unint64_t v48 = sub_100059E4C();
    uint64_t v49 = sub_100010EA0((uint64_t)&type metadata for PARNetworkRequestFactory.NetworkRequestError, v48);
    sub_10005A0C4(v49, v50);
    goto LABEL_8;
  }

  uint64_t v40 = v112;
  uint64_t v41 = sub_10005A56C();
  ((void (*)(uint64_t))v33)(v41);
  sub_100052E10();
  sub_10005A204();
  sub_10005A6F0(v3, v40, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  uint64_t v42 = sub_1000D9978(v3);
  if (!v1)
  {
    uint64_t v51 = v42;
    uint64_t v97 = 0LL;
    uint64_t v99 = v2;
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"qtype");
    sub_1000D9FB4(v52, v53, *(void *)(v0 + 208), *(void *)(v0 + 216));
    sub_1000110E0();
    sub_10005A814();
    sub_1000DA264(v54);
    sub_1000110E0();
    sub_100051810();
    sub_100051358();
    sub_10001085C(v110, (SEL *)&selRef_clientName);
    sub_10005A3F0();
    uint64_t v56 = sub_100009B34(v55, &qword_1001D3170, &OBJC_CLASS___NSNumber_ptr);
    Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v56,  &protocol witness table for String);
    sub_100051414();
    sub_1000110E0();
    swift_bridgeObjectRelease();
    uint64_t v57 = sub_10005A1B4();
    id v58 = v109;
    sub_100051D0C( v51,  *(uint64_t *)((char *)v109 + *(int *)(v57 + 80)),  *(uint64_t *)((char *)v109 + *(int *)(v57 + 80) + 8));
    sub_1000518B0(v51, *v58, v58[1]);
    sub_1000518F0(v51, v58[11], v58[12]);
    sub_10005A120();
    sub_100090008(v111);
    sub_10005A180();
    sub_10005365C();
    sub_1000110E0();
    uint64_t v59 = sub_10005A0A8();
    sub_100053698(v59, v60);
    uint64_t v61 = sub_10005A0A8();
    sub_1000536E4(v61, v62);
    uint64_t v63 = sub_10005A0A8();
    sub_100053734(v63, v64);
    uint64_t v65 = sub_10005A0A8();
    sub_100053784(v65, v66);
    uint64_t v67 = sub_10005A0A8();
    sub_1000537D0(v67, v68);
    uint64_t v69 = sub_10005A0A8();
    sub_100053AC0(v69, v70);
    uint64_t v71 = sub_10001085C(v110, (SEL *)&selRef_clientName);
    if (!v72)
    {
      uint64_t v71 = 0LL;
      unint64_t v72 = 0xE000000000000000LL;
    }

    PegasusClientName.init(rawValue:)(v71, v72);
    uint64_t v73 = v103;
    (*(void (**)(char *, void, uint64_t))(v107 + 104))( v21,  enum case for PegasusClientName.Messages(_:),  v103);
    sub_10005A584();
    uint64_t v74 = *(int *)(v13 + 48);
    uint64_t v75 = v102;
    uint64_t v76 = v102 + v74;
    sub_100059ECC();
    uint64_t v98 = v76;
    uint64_t v77 = v73;
    sub_100059ECC();
    sub_10005A148(v75, 1LL, v73);
    if (v83)
    {
      sub_10005A470((uint64_t)v21);
      sub_10005A470(v108);
      uint64_t v78 = sub_10005A148(v98, 1LL, v73);
      if (v83)
      {
        sub_10005A6D8(v78, &qword_1001D3DA8);
        uint64_t v79 = (uint64_t)v109;
        uint64_t v80 = v110;
LABEL_21:
        sub_10005A0A8();
        sub_100053D4C();
        uint64_t v84 = sub_10005A0A8();
        sub_100053D98(v84, v85);
        uint64_t v86 = sub_10005A0A8();
        sub_100053DE4(v86, v87);
        sub_10005A3CC();
        sub_100053010();
        sub_100053E48();
        sub_100053EAC();
        sub_10005A6AC(v88, (SEL *)&selRef_userAgent);
        sub_10005A180();
        sub_10005A410(v51, v89);
        sub_1000325E4();
        sub_100053F24(v51, v79, (uint64_t)v80);
        sub_10005A6E0(v90, "scale");
        *(float *)&double v91 = v91;
        sub_100053FD0(*(float *)&v91);
        sub_100051D50();
        sub_10005A6E8(v106);
        [v80 timeoutIntervalForRequest];
        sub_10005A5B4();
        URLRequest.assumesHTTP3Capable.setter([v80 assumesHTTP3Capable]);
        swift_release();
        uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t))(v99 + 8);
        uint64_t v44 = v112;
        goto LABEL_5;
      }
    }

    else
    {
      uint64_t v81 = (uint64_t)v101;
      sub_100059ECC();
      uint64_t v82 = v98;
      sub_10005A148(v98, 1LL, v77);
      if (!v83)
      {
        uint64_t v92 = v100;
        sub_10005A3B0(v100, v82, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v107 + 32));
        sub_100059F08(&qword_1001D3DD0, (uint64_t (*)(uint64_t))&type metadata accessor for PegasusClientName);
        uint64_t v93 = sub_10005A578();
        LODWORD(v98) = dispatch thunk of static Equatable.== infix(_:_:)(v93, v94, v77, v95);
        uint64_t v96 = *(void (**)(uint64_t, uint64_t))(v107 + 8);
        v96(v92, v77);
        sub_10005A470((uint64_t)v21);
        sub_10005A470(v108);
        v96((uint64_t)v101, v77);
        sub_10005A470(v75);
        uint64_t v79 = (uint64_t)v109;
        uint64_t v80 = v110;
        if ((v98 & 1) != 0) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }

      sub_10005A5A4((uint64_t)v21);
      sub_10005A5A4(v108);
      uint64_t v78 = sub_10005A26C(v81, *(uint64_t (**)(uint64_t, uint64_t))(v107 + 8));
    }

    sub_10005A6D8(v78, &qword_1001D3DC8);
    uint64_t v79 = (uint64_t)v109;
    uint64_t v80 = v110;
LABEL_20:
    sub_10005A0A8();
    sub_100053C64();
    sub_10005A0A8();
    sub_100053CC4();
    goto LABEL_21;
  }

  uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  uint64_t v44 = v40;
LABEL_5:
  sub_10005A6D0(v44, v43);
LABEL_8:
  sub_10002716C();
}

void sub_1000548FC()
{
  uint64_t v78 = v6;
  uint64_t v79 = v1;
  uint64_t v75 = v7;
  uint64_t v76 = v8;
  uint64_t v80 = v9;
  uint64_t v11 = v10;
  uint64_t v77 = v12;
  uint64_t v72 = sub_10005A3C4();
  uint64_t v74 = *(void *)(v72 - 8);
  sub_100027160();
  __chkstk_darwin(v13);
  sub_100014428();
  uint64_t v70 = v14;
  uint64_t v73 = sub_10000941C(&qword_1001D3DC8);
  sub_100009B94();
  __chkstk_darwin(v15);
  sub_100027240();
  sub_10000941C(&qword_1001D3DA8);
  sub_100009B94();
  __chkstk_darwin(v16);
  sub_10005A49C();
  __chkstk_darwin(v17);
  sub_10005A380();
  __chkstk_darwin(v18);
  sub_10005A670();
  sub_10005A18C();
  sub_100009B94();
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10005A204();
  uint64_t v22 = v11;
  id v23 = [v11 moreResultsURL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v23);

  uint64_t v24 = sub_1000D9978((uint64_t)v21);
  if (v2) {
    goto LABEL_20;
  }
  uint64_t v25 = v24;
  uint64_t v68 = v4;
  uint64_t v69 = v0;
  uint64_t v65 = v3;
  uint64_t v66 = v5;
  uint64_t v26 = v72;
  uint64_t v67 = 0LL;
  uint64_t v71 = v22;
  if (!sub_1000DA2D0()) {
    sub_100052E10();
  }
  sub_1000B48B4(v71);
  sub_1000DA264(v27);
  sub_10003B8E8();
  sub_100051810();
  sub_100051358();
  sub_10005A850();
  sub_10005A3F0();
  uint64_t v29 = sub_100009B34(v28, &qword_1001D3170, &OBJC_CLASS___NSNumber_ptr);
  Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v29,  &protocol witness table for String);
  sub_10005A8E8();
  sub_10003B8E8();
  sub_10005A1BC();
  uint64_t v30 = (uint64_t)v78;
  sub_1000518B0(v25, *v78, v78[1]);
  sub_1000518F0(v25, *(void *)(v30 + 88), *(void *)(v30 + 96));
  sub_10005A120();
  sub_1000536E4(v25, v30);
  uint64_t v31 = sub_10005A850();
  if (!v32)
  {
    uint64_t v31 = 0LL;
    unint64_t v32 = 0xE000000000000000LL;
  }

  uint64_t v33 = v66;
  PegasusClientName.init(rawValue:)(v31, v32);
  uint64_t v34 = v74;
  uint64_t v35 = v68;
  uint64_t v36 = v26;
  (*(void (**)(uint64_t, void, uint64_t))(v74 + 104))(v68, enum case for PegasusClientName.Messages(_:), v26);
  sub_10005A680();
  sub_100009654(v37, v38, v39, v26);
  uint64_t v40 = v69;
  uint64_t v41 = v69 + *(int *)(v73 + 48);
  sub_100059ECC();
  sub_10005A56C();
  sub_100059ECC();
  sub_10005A148(v40, 1LL, v26);
  if (!v44)
  {
    uint64_t v43 = v65;
    sub_100059ECC();
    sub_10005A148(v41, 1LL, v26);
    if (!v44)
    {
      uint64_t v45 = v70;
      uint64_t v46 = sub_10005A868();
      v47(v46);
      sub_100059F08(&qword_1001D3DD0, (uint64_t (*)(uint64_t))&type metadata accessor for PegasusClientName);
      uint64_t v48 = sub_10005A578();
      LODWORD(v73) = dispatch thunk of static Equatable.== infix(_:_:)(v48, v49, v36, v50);
      uint64_t v51 = v33;
      uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
      v52(v45, v36);
      sub_10005A3E8(v68);
      sub_10005A3E8(v51);
      uint64_t v53 = sub_10005A790();
      ((void (*)(uint64_t))v52)(v53);
      sub_10005A3E8(v40);
      uint64_t v42 = v80;
      if ((v73 & 1) != 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }

    sub_10005A5A4(v68);
    sub_10005A5A4(v33);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v43, v26);
LABEL_14:
    sub_100028CD0(v69, &qword_1001D3DC8);
    uint64_t v42 = v80;
LABEL_16:
    sub_10005A544();
    sub_100053C64();
    sub_10005A544();
    sub_100053CC4();
    goto LABEL_17;
  }

  sub_10005A3E8(v35);
  sub_10005A3E8(v33);
  sub_10005A148(v41, 1LL, v26);
  if (!v44) {
    goto LABEL_14;
  }
  sub_100028CD0(v69, &qword_1001D3DA8);
  uint64_t v42 = v80;
LABEL_17:
  sub_10005A544();
  sub_100053D4C();
  uint64_t v54 = sub_10005A544();
  sub_100053D98(v54, v55);
  uint64_t v56 = sub_10005A544();
  sub_100053DE4(v56, v57);
  sub_10005A3CC();
  sub_100053010();
  sub_1000531F4();
  sub_100053E48();
  sub_100053EAC();
  sub_10001085C(v42, (SEL *)&selRef_userAgent);
  sub_10005A180();
  sub_10005A410(v25, v58);
  sub_1000325E4();
  uint64_t v59 = sub_10005A544();
  sub_100053F24(v59, v60, (uint64_t)v42);
  sub_1000145D8(v61, "scale");
  *(float *)&double v62 = v62;
  sub_100053FD0(*(float *)&v62);
  sub_100051D50();
  uint64_t v63 = v67;
  sub_1000D9BA4(v77);
  if (!v63)
  {
    [v42 timeoutIntervalForRequest];
    sub_10005A5B4();
    URLRequest.assumesHTTP3Capable.setter([v42 assumesHTTP3Capable]);
  }

  sub_10005A8E0();
LABEL_20:
  sub_10002716C();
}

void sub_100054E50()
{
  uint64_t v78 = v3;
  uint64_t v79 = v1;
  uint64_t v75 = v5;
  uint64_t v76 = v4;
  uint64_t v7 = v6;
  id v80 = v8;
  uint64_t v77 = v9;
  uint64_t v10 = sub_10005A1B4();
  sub_100009B94();
  __chkstk_darwin(v11);
  sub_100009AD4();
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  __chkstk_darwin(v12);
  uint64_t v13 = sub_10005A104();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  __chkstk_darwin(v18);
  sub_10005A2F8();
  uint64_t v82 = v19;
  uint64_t v81 = v7;
  id v21 = sub_10005A6B4(v20, "searchURL");
  if (!v21)
  {
    uint64_t v25 = sub_10005A3FC();
    goto LABEL_7;
  }

  uint64_t v22 = v21;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v21);

  id v23 = *(void (**)(uint64_t))(v14 + 32);
  uint64_t v24 = sub_10005A7B4();
  v23(v24);
  sub_100009654(v0, 0LL, 1LL, v13);
  uint64_t v25 = sub_10005A148(v0, 1LL, v13);
  if (v26)
  {
LABEL_7:
    sub_10003D89C(v25, &qword_1001D5ED0);
    unint64_t v32 = sub_100059E4C();
    uint64_t v33 = sub_100010EA0((uint64_t)&type metadata for PARNetworkRequestFactory.NetworkRequestError, v32);
    sub_10005A0C4(v33, v34);
    goto LABEL_8;
  }

  ((void (*)(uint64_t, uint64_t, uint64_t))v23)(v82, v0, v13);
  uint64_t v27 = v0;
  sub_100052E10();
  sub_10005A204();
  sub_10005A3B0((uint64_t)v17, v82, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16));
  uint64_t v28 = v79;
  uint64_t v29 = sub_1000D9978((uint64_t)v17);
  if (v28)
  {
    uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8);
    uint64_t v31 = v82;
  }

  else
  {
    uint64_t v35 = v29;
    uint64_t v79 = v14;
    uint64_t v36 = *(void *)(v0 + 160);
    uint64_t v73 = *(void *)(v0 + 168);
    uint64_t v74 = v36;
    id v37 = [v80 queryString];
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    uint64_t v39 = v27;
    uint64_t v41 = v40;

    sub_1000D9FB4(v74, v73, v38, v41);
    sub_1000145F0();
    sub_10005A814();
    sub_1000DA264(v42);
    sub_1000145F0();
    sub_100051810();
    sub_100051358();
    sub_10001085C(v81, (SEL *)&selRef_clientName);
    sub_10005A3F0();
    uint64_t v44 = sub_100009B34(v43, &qword_1001D3170, &OBJC_CLASS___NSNumber_ptr);
    Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v44,  &protocol witness table for String);
    sub_100051414();
    sub_1000145F0();
    sub_10003B8E8();
    uint64_t v45 = v76;
    sub_100051D0C( v35,  *(uint64_t *)((char *)v76 + *(int *)(v10 + 80)),  *(uint64_t *)((char *)v76 + *(int *)(v10 + 80) + 8));
    sub_1000518B0(v35, *v45, v45[1]);
    sub_1000518F0(v35, v45[11], v45[12]);
    uint64_t v46 = sub_100059E88((uint64_t)v45, v2);
    id v47 = v80;
    sub_10005A6AC(v46, (SEL *)&selRef_preferredLanguage);
    sub_100051934();
    sub_100009B3C();
    sub_1000152F4(v2);
    sub_100090008(v47);
    sub_10005A180();
    sub_10005365C();
    sub_10001450C();
    uint64_t v48 = sub_10005A2DC();
    sub_1000536E4(v48, v49);
    uint64_t v50 = sub_10005A2DC();
    sub_100053AC0(v50, v51);
    sub_10005A2DC();
    sub_100053C64();
    sub_10005A2DC();
    sub_100053CC4();
    sub_10005A2DC();
    sub_100053D4C();
    uint64_t v52 = sub_10005A2DC();
    sub_100053D98(v52, v53);
    uint64_t v54 = sub_10005A2DC();
    sub_100053DE4(v54, v55);
    uint64_t v74 = sub_10005A3CC();
    sub_100053010();
    sub_1000531F4();
    id v57 = sub_10005A6B4(v56, "appBundleId");
    sub_10005A614((uint64_t)v57);
    sub_10005A83C();
    sub_1000DA09C(*(void *)(v39 + 400), *(void *)(v39 + 408), (uint64_t)v47, v2);
    uint64_t v58 = sub_100010C70();
    sub_10005A478(v58, (SEL *)&selRef_domain);
    sub_10005A180();
    if (v26) {
      unint64_t v60 = 0xE000000000000000LL;
    }
    else {
      unint64_t v60 = v59;
    }
    sub_1000553C8();
    uint64_t v61 = sub_1000145F0();
    id v62 = sub_1000145D8(v61, "queryContext");
    sub_10005A614((uint64_t)v62);
    sub_10005A83C();
    uint64_t v63 = v60;
    uint64_t v64 = v81;
    sub_100055404(v35, v63, v2);
    uint64_t v65 = sub_100010C70();
    sub_1000145D8(v65, "lookupSelectionType");
    sub_100055450();
    sub_100053E48();
    sub_100053EAC();
    sub_10005A6AC(v66, (SEL *)&selRef_userAgent);
    sub_10005A180();
    sub_10005A2D0(v35, v67);
    sub_100009B3C();
    uint64_t v68 = sub_10005A2DC();
    sub_100053F24(v68, v69, (uint64_t)v64);
    sub_1000145D8(v70, "scale");
    *(float *)&double v71 = v71;
    sub_100053FD0(*(float *)&v71);
    sub_100051D50();
    sub_1000D9BA4(v77);
    URLRequest.timeoutInterval.setter([v64 timeoutIntervalForRequest]);
    URLRequest.assumesHTTP3Capable.setter([v64 assumesHTTP3Capable]);
    swift_release();
    uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t))(v79 + 8);
    uint64_t v31 = v82;
  }

  sub_10005A26C(v31, v30);
LABEL_8:
  sub_10002716C();
}

void sub_1000553C8()
{
  if (v2 || (sub_10005A1F8(), !v3))
  {
    if ((sub_10005A048(v1) & 1) == 0) {
      sub_10005A098(*(void *)(v0 + 384), *(void *)(v0 + 392));
    }
  }

  sub_1000110D4();
}

void sub_100055404(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = sub_10005678C(a2, a3);
  if (v5)
  {
    uint64_t v6 = v5;
    sub_10005A1C4(*(void *)(v3 + 432), *(void *)(v3 + 440), v4, v5);
    sub_10005A074(v6);
  }

  else
  {
    sub_1000110D4();
  }

uint64_t sub_100055450()
{
  uint64_t v1 = *(void *)(v0 + 448);
  uint64_t v2 = *(void *)(v0 + 456);
  uint64_t v3 = sub_1000568C4();
  uint64_t v5 = v4;
  sub_10005A1C4(v1, v2, v3, v4);
  return sub_10005A0D4(v5);
}

void sub_100055498()
{
  v31[1] = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v32 = v8;
  sub_10005A18C();
  sub_100009B94();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10005A204();
  id v12 = [v5 cardURL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v12);

  uint64_t v13 = sub_1000D9978((uint64_t)v11);
  if (!v0)
  {
    uint64_t v14 = v13;
    sub_1000B48B4(v5);
    sub_1000DA264(v15);
    sub_10005A1BC();
    sub_100051810();
    sub_100051358();
    uint64_t v16 = sub_10005A1B4();
    sub_10005A7D4((uint64_t *)((char *)v7 + *(int *)(v16 + 80)));
    sub_1000518B0(v14, *v7, v7[1]);
    sub_1000518F0(v14, v7[11], v7[12]);
    sub_10005A120();
    uint64_t v17 = sub_10005A3B8();
    sub_1000536E4(v17, v18);
    uint64_t v19 = sub_10005A3B8();
    sub_100053AC0(v19, v20);
    sub_10005A3B8();
    sub_100053C64();
    sub_10005A3B8();
    sub_100053CC4();
    uint64_t v21 = sub_10005A3B8();
    sub_100053D98(v21, v22);
    uint64_t v23 = sub_10005A3B8();
    sub_100053DE4(v23, v24);
    sub_10005A3CC();
    sub_100053010();
    sub_1000531F4();
    sub_100053E48();
    sub_100053EAC();
    sub_10005A478(v25, (SEL *)&selRef_userAgent);
    sub_10005A180();
    sub_10005A410(v14, v26);
    sub_1000325E4();
    uint64_t v27 = sub_10005A3B8();
    sub_100053F24(v27, v28, (uint64_t)v3);
    [v5 scale];
    sub_10005A760(v29);
    sub_100051D50();
    uint64_t v30 = sub_1000D9BA4(v32);
    sub_1000145D8(v30, "timeoutIntervalForRequest");
    sub_10005A5B4();
    URLRequest.assumesHTTP3Capable.setter([v3 assumesHTTP3Capable]);
    sub_10001106C();
  }

  sub_10002716C();
}

void sub_1000556BC()
{
  uint64_t v124 = v1;
  uint64_t v125 = v0;
  uint64_t v120 = v4;
  uint64_t v121 = v3;
  uint64_t v112 = v5;
  uint64_t v7 = v6;
  uint64_t v126 = v8;
  uint64_t v119 = v9;
  uint64_t v10 = type metadata accessor for URLRequest(0LL);
  uint64_t v107 = *(void *)(v10 - 8);
  uint64_t v108 = v10;
  sub_100027160();
  __chkstk_darwin(v11);
  sub_10005A50C(v12, v106);
  sub_10000941C(&qword_1001D32B0);
  sub_100009B94();
  __chkstk_darwin(v13);
  sub_100014428();
  uint64_t v114 = v14;
  uint64_t v115 = type metadata accessor for Date(0LL);
  uint64_t v111 = *(void *)(v115 - 8);
  sub_100027160();
  __chkstk_darwin(v15);
  uint64_t v110 = (char *)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10003D810();
  __chkstk_darwin(v17);
  sub_10005A2F8();
  uint64_t v109 = v18;
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  __chkstk_darwin(v19);
  sub_100014428();
  uint64_t v122 = v20;
  uint64_t v123 = sub_10005A18C();
  uint64_t v118 = *(void *)(v123 - 8);
  sub_100027160();
  __chkstk_darwin(v21);
  uint64_t v116 = (char *)&v106 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10003D810();
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v106 - v25;
  __chkstk_darwin(v24);
  sub_10005A2F8();
  uint64_t v117 = v27;
  uint64_t v28 = sub_10005A3C4();
  sub_10005A234();
  __chkstk_darwin(v29);
  sub_100019EB4();
  uint64_t v30 = v7;
  uint64_t v31 = sub_10001085C(v7, (SEL *)&selRef_clientName);
  uint64_t v33 = v32;
  uint64_t v34 = (*(uint64_t (**)(void *, void, uint64_t))(v2 + 104))( v0,  enum case for PegasusClientName.Mail(_:),  v28);
  uint64_t v35 = PegasusClientName.rawValue.getter(v34);
  uint64_t v37 = v36;
  uint64_t v38 = sub_10005A7B4();
  v39(v38);
  if (v33)
  {
    BOOL v40 = v31 == v35 && v33 == v37;
    if (v40)
    {
      sub_1000325E4();
      sub_10005A1BC();
LABEL_14:
      sub_100055E24();
      goto LABEL_17;
    }

    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, v35, v37, 0LL);
    sub_1000325E4();
    sub_10005A1BC();
    uint64_t v42 = v30;
    if ((v41 & 1) != 0) {
      goto LABEL_14;
    }
  }

  else
  {
    sub_10005A1BC();
    uint64_t v42 = v30;
  }

  id v43 = [v42 flightURL];
  if (!v43)
  {
    uint64_t v60 = sub_10004358C();
    uint64_t v53 = sub_100009654(v60, v61, v62, v63);
    goto LABEL_16;
  }

  uint64_t v44 = v43;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v43);

  uint64_t v45 = v118;
  uint64_t v46 = *(void (**)(uint64_t, char *, uint64_t))(v118 + 32);
  uint64_t v47 = v123;
  v46(v122, v26, v123);
  sub_10005A680();
  sub_100009654(v48, v49, v50, v47);
  uint64_t v51 = sub_10005A7A8();
  uint64_t v53 = sub_10005A148(v51, v52, v47);
  if (v40)
  {
LABEL_16:
    sub_10003D89C(v53, &qword_1001D5ED0);
    unint64_t v64 = sub_100059E4C();
    uint64_t v65 = sub_100010EA0((uint64_t)&type metadata for PARNetworkRequestFactory.NetworkRequestError, v64);
    sub_10005A0C4(v65, v66);
    goto LABEL_17;
  }

  uint64_t v54 = v117;
  uint64_t v55 = sub_10005A868();
  ((void (*)(uint64_t))v46)(v55);
  uint64_t v56 = v125;
  sub_100052E10();
  sub_10005A204();
  uint64_t v57 = (uint64_t)v116;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v116, v54, v47);
  uint64_t v58 = v124;
  uint64_t v59 = sub_1000D9978(v57);
  if (v58)
  {
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v54, v47);
LABEL_17:
    sub_10002716C();
    return;
  }

  uint64_t v67 = v59;
  uint64_t v124 = v56[20];
  uint64_t v122 = v56[21];
  id v68 = sub_10003D808(v59, "flightQuery");
  uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
  uint64_t v70 = v67;
  uint64_t v72 = v71;

  uint64_t v73 = v70;
  sub_1000D9FB4(v124, v122, v69, v72);
  uint64_t v74 = sub_1000145F0();
  id v75 = sub_10003D808(v74, "date");
  if (!v75)
  {
    uint64_t v78 = v114;
    sub_100009654(v114, 1LL, 1LL, v115);
    goto LABEL_25;
  }

  uint64_t v76 = v75;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v77 = *(void (**)(uint64_t))(v111 + 32);
  uint64_t v78 = v114;
  uint64_t v79 = sub_10005A56C();
  uint64_t v80 = v115;
  v77(v79);
  sub_10005A584();
  sub_10005A148(v78, 1LL, v80);
  if (v40)
  {
LABEL_25:
    sub_100028CD0(v78, &qword_1001D32B0);
    goto LABEL_26;
  }

  uint64_t v81 = sub_10005A15C();
  uint64_t v82 = ((uint64_t (*)(uint64_t))v77)(v81);
  uint64_t v83 = v56[72];
  uint64_t v124 = v56[73];
  double v84 = Date.timeIntervalSince1970.getter(v82);
  if ((~*(void *)&v84 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }

  if (v84 <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  if (v84 < 9.22337204e18)
  {
    uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    sub_1000D9FB4(v83, v124, v85, v86);
    sub_1000110E0();
    (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v109, v115);
LABEL_26:
    sub_10005A814();
    sub_1000DA264(v87);
    sub_1000325E4();
    sub_100051810();
    sub_100051358();
    uint64_t v88 = sub_10001085C(v42, (SEL *)&selRef_clientName);
    uint64_t v89 = sub_100009B34(v88, &qword_1001D3170, &OBJC_CLASS___NSNumber_ptr);
    Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v89,  &protocol witness table for String);
    sub_10005A41C();
    sub_10001450C();
    sub_1000110E0();
    uint64_t v90 = sub_10005A1B4();
    double v91 = v121;
    sub_10005A7D4((uint64_t *)((char *)v121 + *(int *)(v90 + 80)));
    sub_1000518B0(v73, *v91, v91[1]);
    sub_1000518F0(v73, v91[11], v91[12]);
    sub_10005A120();
    sub_100090008(v126);
    sub_10005A180();
    sub_10005365C();
    sub_1000325E4();
    uint64_t v92 = sub_10005A578();
    sub_100053AC0(v92, v93);
    sub_10005A578();
    sub_100053C64();
    sub_10005A578();
    sub_100053CC4();
    sub_10005A3CC();
    sub_100053E48();
    sub_100053EAC();
    sub_10001085C(v42, (SEL *)&selRef_userAgent);
    sub_10005A180();
    sub_10005A2D0(v73, v94);
    sub_100009B3C();
    sub_100053F24(v73, (uint64_t)v91, (uint64_t)v42);
    uint64_t v95 = v126;
    [v126 scale];
    sub_10005A760(v96);
    sub_1000531F4();
    sub_100053010();
    sub_100051D50();
    uint64_t v97 = sub_10005A6F8();
    sub_1000DA3E0(v97, v98, v99, v100);
    id v101 = [v95 appBundleId];
    uint64_t v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v101);
    uint64_t v104 = v103;

    sub_1000DA09C(v56[50], v56[51], v102, v104);
    sub_10001450C();
    uint64_t v105 = v113;
    sub_1000D9BA4(v113);
    [v42 timeoutIntervalForRequest];
    sub_10005A5B4();
    URLRequest.assumesHTTP3Capable.setter([v42 assumesHTTP3Capable]);
    sub_10001106C();
    sub_10005A5BC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 32))(v119, v105, v108);
    goto LABEL_17;
  }

LABEL_29:
  __break(1u);
}

  uint64_t v110 = sub_1000272AC();
  sub_10000A65C(v110, v111);
  sub_100009AA0();
}

void sub_100055E24()
{
  id v101 = v5;
  uint64_t v104 = v0;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v97 = v10;
  uint64_t v98 = v11;
  sub_10000941C(&qword_1001D32B0);
  sub_100009B94();
  __chkstk_darwin(v12);
  sub_100009AEC();
  uint64_t v15 = v14 - v13;
  uint64_t v100 = type metadata accessor for Date(0LL);
  uint64_t v96 = *(void *)(v100 - 8);
  sub_100027160();
  __chkstk_darwin(v16);
  sub_10005A4B8();
  __chkstk_darwin(v17);
  sub_10005A2F8();
  uint64_t v95 = v18;
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  __chkstk_darwin(v19);
  uint64_t v20 = sub_10005A104();
  sub_10005A234();
  __chkstk_darwin(v21);
  sub_10005A4F0();
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v91 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  sub_10005A8C0(v26, v27, v28, v29, v30, v31, v32, v33, v91);
  uint64_t v99 = v9;
  id v35 = sub_10003D808(v34, "flightURL");
  if (!v35)
  {
    uint64_t v38 = sub_10005A3FC();
    goto LABEL_7;
  }

  uint64_t v36 = v35;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v35);

  uint64_t v37 = *(void (**)(uint64_t, char *, uint64_t))(v2 + 32);
  v37(v0, v25, v20);
  sub_100009654(v0, 0LL, 1LL, v20);
  uint64_t v38 = sub_10005A148(v0, 1LL, v20);
  if (v39)
  {
LABEL_7:
    sub_10003D89C(v38, &qword_1001D5ED0);
    unint64_t v46 = sub_100059E4C();
    uint64_t v47 = sub_100010EA0((uint64_t)&type metadata for PARNetworkRequestFactory.NetworkRequestError, v46);
    sub_10005A0C4(v47, v48);
    goto LABEL_8;
  }

  uint64_t v94 = v7;
  uint64_t v40 = v103;
  uint64_t v41 = sub_10005A56C();
  ((void (*)(uint64_t))v37)(v41);
  uint64_t v42 = v104;
  sub_100052E10();
  sub_10005A204();
  sub_10005A3B0(v3, v40, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  uint64_t v43 = sub_1000D9978(v3);
  if (v1)
  {
    uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
    uint64_t v45 = v40;
LABEL_5:
    sub_10005A26C(v45, v44);
LABEL_8:
    sub_10005A8AC();
    sub_10002716C();
    return;
  }

  uint64_t v49 = v43;
  uint64_t v93 = *(void *)(v42 + 160);
  uint64_t v50 = *(void *)(v42 + 168);
  uint64_t v91 = v2;
  uint64_t v92 = v50;
  id v51 = sub_1000145D8(v43, "flightQuery");
  uint64_t v102 = (void *)v49;
  id v52 = v51;
  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
  uint64_t v55 = v54;

  sub_1000D9FB4(v93, v92, v53, v55);
  uint64_t v56 = sub_1000110E0();
  id v57 = sub_1000145D8(v56, "date");
  if (!v57)
  {
    uint64_t v65 = sub_100009654(v15, 1LL, 1LL, v100);
    goto LABEL_16;
  }

  uint64_t v58 = v57;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v59 = v96;
  uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 32);
  uint64_t v61 = v100;
  v60(v15, v4, v100);
  sub_10005A680();
  sub_100009654(v62, v63, v64, v61);
  uint64_t v65 = sub_10005A148(v15, 1LL, v61);
  if (v39)
  {
LABEL_16:
    sub_10005A6D8(v65, &qword_1001D32B0);
    uint64_t v70 = v99;
    goto LABEL_17;
  }

  uint64_t v66 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v60)(v95, v15, v61);
  uint64_t v67 = *(void *)(v104 + 576);
  uint64_t v68 = *(void *)(v104 + 584);
  double v69 = Date.timeIntervalSince1970.getter(v66);
  if ((~*(void *)&v69 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v70 = v99;
  if (v69 <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (v69 < 9.22337204e18)
  {
    uint64_t v71 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    sub_1000D9FB4(v67, v68, v71, v72);
    sub_10003B8E8();
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v95, v61);
LABEL_17:
    uint64_t v73 = v104;
    uint64_t v74 = v102;
    sub_100051810();
    uint64_t v75 = sub_100051358();
    sub_10005A31C(v75, (SEL *)&selRef_clientName);
    sub_10005A3F0();
    uint64_t v77 = sub_100009B34(v76, &qword_1001D3170, &OBJC_CLASS___NSNumber_ptr);
    Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v77,  &protocol witness table for String);
    sub_10005A41C();
    sub_10001450C();
    sub_1000110E0();
    uint64_t v78 = sub_10005A1B4();
    uint64_t v79 = v97;
    sub_100051D0C( (uint64_t)v74,  *(uint64_t *)((char *)v97 + *(int *)(v78 + 80)),  *(uint64_t *)((char *)v97 + *(int *)(v78 + 80) + 8));
    sub_1000518B0((uint64_t)v74, *v79, v79[1]);
    sub_1000518F0((uint64_t)v74, v79[11], v79[12]);
    sub_10005A120();
    sub_100053EAC();
    sub_10005A31C(v80, (SEL *)&selRef_userAgent);
    sub_10005A180();
    sub_10005A2D0((uint64_t)v74, v81);
    sub_100009B3C();
    sub_100051D50();
    uint64_t v82 = sub_10005A6F8();
    sub_1000DA3E0(v82, v83, v84, v85);
    uint64_t v86 = sub_10005A614((uint64_t)[v101 appBundleId]);
    uint64_t v88 = v87;

    sub_1000DA09C(*(void *)(v73 + 400), *(void *)(v73 + 408), v86, v88);
    sub_1000110E0();
    uint64_t v89 = sub_1000D9BA4(v98);
    id v90 = sub_10005A6E0(v89, "timeoutIntervalForRequest");
    URLRequest.timeoutInterval.setter(v90);
    URLRequest.assumesHTTP3Capable.setter([v70 assumesHTTP3Capable]);
    swift_release();
    uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t))(v91 + 8);
    uint64_t v45 = v103;
    goto LABEL_5;
  }

void sub_100056378()
{
  uint64_t v28 = v3;
  uint64_t v23 = v4;
  uint64_t v24 = v5;
  uint64_t v26 = type metadata accessor for Requestor(0LL);
  uint64_t v6 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  sub_10000BEB8();
  uint64_t v27 = type metadata accessor for UserAgent(0LL);
  uint64_t v25 = *(void *)(v27 - 8);
  sub_100027160();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10005A18C();
  sub_10005A368();
  __chkstk_darwin(v10);
  sub_100009B54();
  sub_10005A204();
  uint64_t v11 = sub_10005A464();
  sub_10005A6F0(v11, v12, v13);
  uint64_t v14 = sub_1000D9978(v1);
  if (!v0)
  {
    uint64_t v15 = v14;
    uint64_t v16 = v24;
    sub_100051358();
    (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v2, enum case for Requestor.parsecd(_:), v26);
    uint64_t v17 = UserAgent.init(_:requestor:)(2LL, v2);
    uint64_t v18 = UserAgent.fullString.getter(v17);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v27);
    sub_100051DAC(v15, v18);
    sub_10001450C();
    if (v28) {
      sub_10005652C();
    }
    sub_100051D50();
    sub_1000D9BA4(v16);
    type metadata accessor for URLRequest(0LL);
    sub_10005A680();
    sub_100009654(v19, v20, v21, v22);
    sub_10005A8E0();
  }

  sub_10002716C();
}

void sub_10005652C()
{
  if (v2 || (sub_10005A1F8(), !v3))
  {
    if ((sub_10005A048(v1) & 1) == 0) {
      sub_10005A778(*(void *)(v0 + 640), *(void *)(v0 + 648), v1);
    }
  }

  sub_1000110D4();
}

uint64_t sub_100056570()
{
  return v0;
}

uint64_t sub_10005674C()
{
  return swift_deallocClassInstance(v0, 928LL, 7LL);
}

uint64_t type metadata accessor for PARNetworkRequestFactory()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd24PARNetworkRequestFactory);
}

uint64_t sub_10005678C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0LL;
  }
  sub_10005A784();
  char v3 = (void *)objc_opt_self(&OBJC_CLASS___NSLinguisticTagger);
  NSString v4 = sub_10005A79C();
  id v5 = [v3 dominantLanguageForString:v4];

  if (!v5)
  {
LABEL_11:
    uint64_t v10 = (__CFString *)sub_10005A79C();
    sub_10005A624();
    uint64_t v11 = sub_10005A790();
    CFIndex v12 = String.UTF16View.count.getter(v11);
    sub_1000325E4();
    v15.location = 0LL;
    v15.length = v12;
    uint64_t v13 = (__CFString *)CFStringTokenizerCopyBestStringLanguage(v10, v15);

    if (v13)
    {
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);

      return v6;
    }

    return 0LL;
  }

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  BOOL v9 = v6 == 6581877 && v8 == 0xE300000000000000LL;
  if (v9 || (sub_10005A06C(v6, v8, 6581877LL, 0xE300000000000000LL) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }

  return v6;
}

uint64_t sub_1000568C4()
{
  return sub_10005A790();
}

uint64_t sub_100056928(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRetain(a1);
  sub_100050B54(a2, (void (*)(uint64_t, uint64_t, id))sub_100059D5C);
  return a1;
}

uint64_t sub_1000569B8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 16);
  if (v4)
  {
    uint64_t v7 = result;
    swift_bridgeObjectRetain(a4);
    while (1)
    {
      uint64_t v8 = String.init(cString:)("SnippetModernization");
      if (v8 == v7 && v9 == a2) {
        break;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v7, a2, 0LL);
      swift_bridgeObjectRelease();
      if ((v11 & 1) != 0) {
        goto LABEL_11;
      }
      if (!--v4) {
        return swift_bridgeObjectRelease();
      }
    }

    swift_bridgeObjectRelease();
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v28 = &unk_1001B3238;
    unint64_t v29 = sub_100059D64();
    sub_100019BC4(&v27, (uint64_t)v30);
    CFIndex v12 = (void *)PARFeatureFlagOverrideDisable;
    sub_100009788(0LL, &qword_1001D3170, &OBJC_CLASS___NSNumber_ptr);
    id v13 = v12;
    char v14 = static NSObject.== infix(_:_:)(v13, a3);

    if ((v14 & 1) != 0)
    {
      uint64_t v15 = v31;
      uint64_t v16 = v32;
      sub_100019AFC(v30, v31);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 24))(v15, v16);
      if (v18)
      {
        sub_1000593B4(v17, v18);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      uint64_t v19 = v31;
      uint64_t v20 = v32;
      sub_100019AFC(v30, v31);
      uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 32))(v19, v20);
    }

    else
    {
      id v23 = PARFeatureFlagOverrideEnable;
      char v24 = static NSObject.== infix(_:_:)(v23, a3);

      if ((v24 & 1) == 0) {
        return sub_1000108B8(v30);
      }
      uint64_t v25 = v31;
      uint64_t v26 = v32;
      sub_100019AFC(v30, v31);
      uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 24))(v25, v26);
    }

    if (v22)
    {
      sub_100057B4C((uint64_t *)&v27, v21, v22);
      swift_bridgeObjectRelease();
    }

    return sub_1000108B8(v30);
  }

  return result;
}

uint64_t sub_100056BC8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v158 = type metadata accessor for Apple_Parsec_Search_LocalCompletionInfo(0LL);
  uint64_t v155 = *(void *)(v158 - 8);
  sub_100027160();
  __chkstk_darwin(v3);
  sub_100014428();
  uint64_t v156 = v4;
  Apple_Parsec_Search_LocalCompletionInfo.init()();
  uint64_t v174 = _swiftEmptySetSingleton;
  unint64_t v173 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v5 = (unint64_t)&selRef_fbr;
  uint64_t v159 = a1;
  id v6 = [a1 engagedSuggestion];
  if (!v6) {
    goto LABEL_4;
  }
  uint64_t v7 = (uint64_t)v6;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  unint64_t v9 = *(void *)((v173 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v8 = *(void *)((v173 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v9 < v8 >> 1) {
    goto LABEL_3;
  }
LABEL_105:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1);
LABEL_3:
  uint64_t v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
  specialized Array._endMutation()(v10);

LABEL_4:
  id v11 = [v159 *(SEL *)(v5 + 1408)];
  if (v11 && sub_100059C20(v11)) {
    sub_10005A8B8();
  }
  if (sub_100059BB4(v159)) {
    sub_10005A8B8();
  }
  sub_10008FF98(v159);
  if (v12) {
    sub_10005A8B8();
  }
  uint64_t v13 = v173;
  if (v173 >> 62) {
    goto LABEL_44;
  }
  uint64_t v7 = *(void *)((v173 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v7)
  {
    while (1)
    {
      if (v7 < 1)
      {
        __break(1u);
LABEL_107:
        swift_once(&qword_1001D0510, sub_100034468);
        goto LABEL_97;
      }

      uint64_t v14 = 0LL;
      unint64_t v15 = v13 & 0xC000000000000001LL;
      uint64_t v16 = &_swiftEmptyDictionarySingleton;
      uint64_t v167 = v7;
      uint64_t v169 = v13;
      unint64_t v165 = v13 & 0xC000000000000001LL;
      while (1)
      {
        if (v15)
        {
          uint64_t v17 = sub_10005A56C();
          id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v18);
        }

        else
        {
          id v19 = *(id *)(v13 + 8 * v14 + 32);
        }

        uint64_t v20 = v19;
        uint64_t v21 = sub_10001085C(v19, (SEL *)&selRef_suggestion);
        if (v22) {
          break;
        }

LABEL_40:
        if (v7 == ++v14)
        {
          sub_100009B3C();
          uint64_t v62 = v174;
          goto LABEL_49;
        }
      }

      unint64_t v5 = v21;
      uint64_t v23 = v22;
      uint64_t v24 = sub_100057668();
      if (!v25) {
        break;
      }
      uint64_t v26 = v24;
      uint64_t v27 = v25;
      uint64_t v28 = sub_10000941C(&qword_1001D0C10);
      uint64_t v29 = sub_10005A72C(v28);
      *(_OWORD *)(v29 + sub_10000BDD4(v0 + 16) = xmmword_10015C7F0;
      [v20 score];
      uint64_t v31 = v30;
      *(void *)(v29 + sub_10000BDD4(v0 + 56) = &type metadata for CGFloat;
      *(void *)(v29 + 64) = sub_100059DD4();
      *(void *)(v29 + swift_unknownObjectWeakDestroy(v0 + 32) = v31;
      uint64_t v32 = sub_10005A70C(0x66322E3025LL);
      uint64_t v34 = v33;
      sub_10005A5AC();
      sub_100057B4C((uint64_t *)&v171, v5, v23);
      swift_bridgeObjectRelease();
      if (v16[2])
      {
        sub_10005A5AC();
        unint64_t v35 = sub_10000EC64(v5, v23);
        if ((v36 & 1) != 0)
        {
          uint64_t v37 = *(void *)(v16[7] + 8 * v35);
          sub_100047294();
          sub_100019F4C(v23);
          uint64_t v38 = v16;
          if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
          {
            sub_10005A194();
            sub_1000317A4();
            uint64_t v37 = v60;
          }

          unint64_t v40 = *(void *)(v37 + 16);
          unint64_t v39 = *(void *)(v37 + 24);
          unint64_t v5 = v40 + 1;
          if (v40 >= v39 >> 1)
          {
            sub_10005A354(v39);
            sub_1000317A4();
            uint64_t v37 = v61;
          }

          *(void *)(v37 + sub_10000BDD4(v0 + 16) = v5;
          uint64_t v41 = (void *)(v37 + 32 * v40);
          v41[4] = v26;
          v41[5] = v27;
          v41[6] = v32;
          v41[7] = v34;
          sub_100009B3C();

          uint64_t v16 = v38;
LABEL_39:
          uint64_t v7 = v167;
          uint64_t v13 = v169;
          unint64_t v15 = v165;
          goto LABEL_40;
        }

        sub_10005A1BC();
      }

      uint64_t v42 = sub_10000941C(&qword_1001D2468);
      uint64_t v13 = (uint64_t)v16;
      uint64_t v43 = swift_allocObject(v42, 64LL, 7LL);
      *(_OWORD *)(v43 + sub_10000BDD4(v0 + 16) = xmmword_10015C7F0;
      *(void *)(v43 + swift_unknownObjectWeakDestroy(v0 + 32) = v26;
      *(void *)(v43 + 40) = v27;
      *(void *)(v43 + 48) = v32;
      *(void *)(v43 + sub_10000BDD4(v0 + 56) = v34;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
      uint64_t v171 = (void *)v13;
      unint64_t v45 = sub_10005A85C();
      uint64_t v47 = *(void *)(v13 + 16);
      BOOL v48 = (v46 & 1) == 0;
      Swift::Int v49 = v47 + v48;
      if (!__OFADD__(v47, v48))
      {
        unint64_t v50 = v45;
        char v51 = v46;
        sub_10000941C(&qword_1001D3D98);
        uint64_t v13 = (uint64_t)&v171;
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v49))
        {
          uint64_t v13 = (uint64_t)v171;
          unint64_t v52 = sub_10005A85C();
          if ((v51 & 1) != (v53 & 1))
          {
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
            __break(1u);
            return result;
          }

          unint64_t v50 = v52;
        }

        uint64_t v54 = v171;
        if ((v51 & 1) != 0)
        {
          uint64_t v55 = v171[7];
          swift_bridgeObjectRelease();
          *(void *)(v55 + 8 * v50) = v43;
          uint64_t v16 = v54;
        }

        else
        {
          v171[(v50 >> 6) + 8] |= 1LL << v50;
          uint64_t v56 = (unint64_t *)(v54[6] + 16 * v50);
          *uint64_t v56 = v5;
          v56[1] = v23;
          *(void *)(v54[7] + 8 * v50) = v43;
          uint64_t v57 = v54[2];
          BOOL v58 = __OFADD__(v57, 1LL);
          uint64_t v59 = v57 + 1;
          if (v58) {
            goto LABEL_43;
          }
          uint64_t v16 = v54;
          v54[2] = v59;
          sub_10005A5AC();
        }

        sub_10005A1BC();
        swift_bridgeObjectRelease();
        goto LABEL_39;
      }

      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      if (v13 < 0) {
        uint64_t v63 = v13;
      }
      else {
        uint64_t v63 = v13 & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_100047294();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v63);
      sub_100009B3C();
      if (!v7) {
        goto LABEL_48;
      }
    }

    sub_10005A1BC();
    goto LABEL_40;
  }

LABEL_48:
  sub_100009B3C();
  uint64_t v16 = &_swiftEmptyDictionarySingleton;
  uint64_t v62 = _swiftEmptySetSingleton;
LABEL_49:
  if (!v62[2])
  {
    sub_10005A1BC();
    if (qword_1001D0510 != -1) {
      swift_once(&qword_1001D0510, sub_100034468);
    }
    uint64_t v135 = sub_100010ED4();
    uint64_t v136 = sub_1000093D0(v135, (uint64_t)qword_1001EDC00);
    uint64_t v137 = (os_log_s *)Logger.logObject.getter(v136);
    os_log_type_t v138 = static os_log_type_t.debug.getter();
    if (sub_100047154(v138))
    {
      uint64_t v139 = (_WORD *)sub_100009B20(2LL);
      *uint64_t v139 = 0;
      sub_10005A550((void *)&_mh_execute_header, v140, v141, "No ECC suggestions to add to request");
      sub_100010C34((uint64_t)v139);
    }

    goto LABEL_100;
  }

  uint64_t v160 = v62 + 7;
  sub_10005A480();
  unint64_t v66 = v65 & v64;
  int64_t v161 = (unint64_t)(v67 + 63) >> 6;
  sub_10005A5AC();
  unint64_t v9 = 0LL;
  uint64_t v68 = _swiftEmptyArrayStorage;
  double v69 = _swiftEmptyArrayStorage;
  uint64_t v162 = v62;
  uint64_t v163 = v16;
  if (v66)
  {
LABEL_51:
    unint64_t v70 = __clz(__rbit64(v66));
    uint64_t v71 = (v66 - 1) & v66;
    unint64_t v72 = v70 | (v9 << 6);
    goto LABEL_66;
  }

  while (1)
  {
    unint64_t v8 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_104;
    }

    ++v9;
    if (!v160[v8])
    {
      unint64_t v9 = v8 + 1;
      if (!v160[v9])
      {
        unint64_t v9 = v8 + 2;
        if (!v160[v9])
        {
          v8 += 3LL;
          if ((uint64_t)v8 >= v161)
          {
LABEL_102:
            sub_100043584();
            sub_1000DBDB0();
            uint64_t v154 = v153;
            sub_10005A1BC();
            Apple_Parsec_Search_LocalCompletionInfo.completions.setter(v154);
            Apple_Parsec_Search_LocalCompletionInfo.scores.setter(v69);
            Apple_Parsec_Search_LocalCompletionInfo.origins.setter(v68);

            sub_1000110E0();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v155 + 32))(a2, v156, v158);
            uint64_t v151 = 0LL;
            return sub_100009654(a2, v151, 1LL, v158);
          }

          if (v160[v8])
          {
            unint64_t v9 = v8;
            goto LABEL_65;
          }

          while (1)
          {
            unint64_t v9 = v8 + 1;
            if (__OFADD__(v8, 1LL)) {
              break;
            }
            ++v8;
            if (v160[v9]) {
              goto LABEL_65;
            }
          }

LABEL_104:
          __break(1u);
          goto LABEL_105;
        }
      }
    }

LABEL_65:
    sub_10005A27C();
    uint64_t v71 = v74 & v73;
    unint64_t v72 = v75 + (v9 << 6);
LABEL_66:
    unint64_t v5 = *(void *)(v62[6] + 16 * v72 + 8);
    uint64_t v76 = v16[2];
    sub_1000145E8();
    if (!v76) {
      goto LABEL_96;
    }
    sub_1000145E8();
    uint64_t v77 = sub_10005A464();
    unint64_t v79 = sub_10000EC64(v77, v78);
    if ((v80 & 1) == 0) {
      break;
    }
    unint64_t v164 = v71;
    unint64_t v166 = v9;
    uint64_t v168 = (uint64_t)v68;
    uint64_t v170 = (uint64_t)v69;
    uint64_t v81 = *(void *)(v16[7] + 8 * v79);
    sub_10005A624();
    sub_100019F4C(v5);
    uint64_t v82 = *(void *)(v81 + 16);
    if (v82)
    {
      uint64_t v83 = (void *)(v81 + 56);
      uint64_t v84 = _swiftEmptyArrayStorage;
      uint64_t v85 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v87 = *(v83 - 3);
        uint64_t v86 = *(v83 - 2);
        uint64_t v89 = *(v83 - 1);
        uint64_t v88 = *v83;
        swift_bridgeObjectRetain_n(*v83, 2LL);
        sub_10005A624();
        if ((swift_isUniquelyReferenced_nonNull_native(v85) & 1) == 0)
        {
          char v96 = sub_10005A194();
          sub_1000313E4(v96, v97, v98, (uint64_t)v85);
          uint64_t v85 = v99;
        }

        unint64_t v91 = v85[2];
        unint64_t v90 = v85[3];
        if (v91 >= v90 >> 1)
        {
          sub_1000313E4(v90 > 1, v91 + 1, 1, (uint64_t)v85);
          uint64_t v85 = v100;
        }

        v85[2] = v91 + 1;
        uint64_t v92 = &v85[2 * v91];
        v92[4] = v89;
        v92[5] = v88;
        sub_1000110A8();
        if ((swift_isUniquelyReferenced_nonNull_native(v84) & 1) == 0)
        {
          char v101 = sub_10005A194();
          sub_1000313E4(v101, v102, v103, (uint64_t)v84);
          uint64_t v84 = v104;
        }

        unint64_t v94 = v84[2];
        unint64_t v93 = v84[3];
        if (v94 >= v93 >> 1)
        {
          char v105 = sub_10005A740(v93);
          sub_1000313E4(v105, v106, v107, (uint64_t)v84);
          uint64_t v84 = v108;
        }

        v83 += 4;
        v84[2] = v94 + 1;
        uint64_t v95 = &v84[2 * v94];
        v95[4] = v87;
        v95[5] = v86;
        --v82;
      }

      while (v82);
    }

    else
    {
      uint64_t v84 = _swiftEmptyArrayStorage;
      uint64_t v85 = _swiftEmptyArrayStorage;
    }

    swift_bridgeObjectRelease();
    uint64_t v171 = v84;
    sub_1000271C4();
    sub_100059DA0(qword_1001D1468, &qword_1001D1460);
    uint64_t v109 = sub_10005A3D4();
    uint64_t v111 = v110;
    sub_10001460C();
    uint64_t v171 = v85;
    uint64_t v7 = sub_10005A3D4();
    uint64_t v113 = v112;
    sub_10001450C();
    uint64_t v68 = (void *)v168;
    if ((swift_isUniquelyReferenced_nonNull_native(v168) & 1) == 0)
    {
      char v119 = sub_10005A194();
      sub_1000313E4(v119, v120, v121, v168);
      uint64_t v68 = v122;
    }

    uint64_t v62 = v162;
    double v69 = (void *)v170;
    unint64_t v115 = v68[2];
    unint64_t v114 = v68[3];
    if (v115 >= v114 >> 1)
    {
      char v123 = sub_10005A354(v114);
      sub_1000313E4(v123, v124, v125, (uint64_t)v68);
      uint64_t v68 = v126;
    }

    unint64_t v66 = v164;
    void v68[2] = v115 + 1;
    uint64_t v116 = &v68[2 * v115];
    v116[4] = v109;
    v116[5] = v111;
    if ((swift_isUniquelyReferenced_nonNull_native(v170) & 1) == 0)
    {
      char v127 = sub_10005A194();
      sub_1000313E4(v127, v128, v129, v170);
      double v69 = v130;
    }

    uint64_t v16 = v163;
    unint64_t v5 = v69[2];
    unint64_t v117 = v69[3];
    if (v5 >= v117 >> 1)
    {
      char v131 = sub_10005A740(v117);
      sub_1000313E4(v131, v132, v133, (uint64_t)v69);
      double v69 = v134;
    }

    v69[2] = v5 + 1;
    uint64_t v118 = &v69[2 * v5];
    v118[4] = v7;
    v118[5] = v113;
    unint64_t v9 = v166;
    if (v164) {
      goto LABEL_51;
    }
  }

  sub_100010C70();
LABEL_96:
  sub_100010C70();
  sub_1000145F0();
  sub_10005A1BC();
  if (qword_1001D0510 != -1) {
    goto LABEL_107;
  }
LABEL_97:
  uint64_t v142 = sub_100010ED4();
  sub_1000093D0(v142, (uint64_t)qword_1001EDC00);
  uint64_t v143 = sub_1000145E8();
  uint64_t v137 = (os_log_s *)Logger.logObject.getter(v143);
  os_log_type_t v145 = static os_log_type_t.error.getter(v137, v144);
  if (os_log_type_enabled(v137, v145))
  {
    uint64_t v146 = (uint8_t *)sub_100009B20(12LL);
    uint64_t v147 = sub_100009B20(32LL);
    uint64_t v171 = (void *)v147;
    *(_DWORD *)uint64_t v146 = 136315138;
    sub_1000145E8();
    uint64_t v148 = sub_10005A464();
    uint64_t v172 = sub_1000307E0(v148, v149, v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v146 + 4);
    swift_bridgeObjectRelease_n(v5, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v137,  v145,  "Can't add ECC suggestion to request, no suggestions for: %s",  v146,  0xCu);
    swift_arrayDestroy(v147, 1LL);
    sub_100010C34(v147);
    sub_100010C34((uint64_t)v146);
    sub_100043584();
  }

  else
  {
    sub_100043584();
    sub_100019F4C(v5);
  }

LABEL_100:
  (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v156, v158);
  sub_1000110E0();
  uint64_t v151 = 1LL;
  return sub_100009654(a2, v151, 1LL, v158);
}

uint64_t sub_100057668()
{
  uint64_t v36 = v3;
  uint64_t v37 = v4;
  id v6 = v5;
  uint64_t v7 = sub_100010ED4();
  sub_100010F98();
  __chkstk_darwin(v8);
  sub_100019EB4();
  if (sub_10005A76C() != 5
    || (uint64_t v9 = sub_10001085C(v6, (SEL *)&selRef_topicIdentifier), v1 = (id)v10, sub_10005A738(v9, v10), v1))
  {
    unsigned int v11 = sub_10005A76C();
    uint64_t result = 0LL;
    switch(v11)
    {
      case 1u:
        return 25971LL;
      case 5u:
        uint64_t v24 = sub_10000941C(&qword_1001D0C10);
        uint64_t v25 = sub_10005A72C(v24);
        *(_OWORD *)(v25 + sub_10000BDD4(v0 + 16) = xmmword_10015C7F0;
        uint64_t v26 = sub_10001085C(v6, (SEL *)&selRef_topicIdentifier);
        if (v27)
        {
          uint64_t v28 = v26;
          uint64_t v29 = v27;
          *(void *)(v25 + sub_10000BDD4(v0 + 56) = &type metadata for String;
          *(void *)(v25 + 64) = sub_100042FE8();
          *(void *)(v25 + swift_unknownObjectWeakDestroy(v0 + 32) = v28;
          *(void *)(v25 + 40) = v29;
          return sub_10005A70C(0x40252D7373LL);
        }

        __break(1u);
        break;
      case 6u:
        return 29813LL;
      case 7u:
        return 28515LL;
      case 8u:
        return 25651LL;
      case 9u:
        return 28261LL;
      default:
        return result;
    }

uint64_t sub_100057A20(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }

  return result;
}

void sub_100057A3C()
{
  uint64_t v5 = sub_10005A6BC();
  type metadata accessor for Trialpb_TrialExperiment(v5);
  sub_100047200();
  __chkstk_darwin(v6);
  sub_10005A390();
  sub_100059F08(&qword_1001D3D78, v7);
  sub_100010DFC();
  sub_10005A444();
  sub_10005A1CC();
  if ((v9 & 1) != 0)
  {
    sub_10005A5CC(v8);
    while (1)
    {
      sub_10005A244(v10);
      sub_100059F08( &qword_1001D3D80,  (uint64_t (*)(uint64_t))&type metadata accessor for Trialpb_TrialExperiment);
      sub_10005A2E8(v3, v12, v13, v11);
      sub_10005A33C();
      if ((v0 & 1) != 0) {
        break;
      }
      uint64_t v10 = sub_10005A20C();
      if ((v14 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v4 = v19;
        uint64_t v1 = v20;
        uint64_t v15 = v21;
        goto LABEL_7;
      }
    }

    sub_10005A1BC();
    sub_10005A808();
    sub_10005A304();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = v2;
LABEL_7:
    swift_isUniquelyReferenced_nonNull_native(*v4);
    sub_10005A324();
    uint64_t v16 = sub_10005A2AC();
    sub_100058380(v16, v17, v18);
    sub_10005A69C();
    sub_10005A274(v1, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 32));
  }

  sub_100009AA0();
}

uint64_t sub_100057B4C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v27, *(void *)(*v3 + 40LL));
  sub_1000145F8();
  String.hash(into:)(v27, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  sub_10005A8F0();
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = *(void *)(v7 + 48);
    uint64_t v13 = (uint64_t *)(v12 + 16 * v10);
    uint64_t v14 = v13[1];
    BOOL v15 = *v13 == a2 && v14 == a3;
    if (v15 || (sub_10005A06C(*v13, v14, a2, a3) & 1) != 0)
    {
LABEL_7:
      sub_10001450C();
      sub_1000145F0();
      uint64_t v16 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v17 = v16[1];
      *a1 = *v16;
      a1[1] = v17;
      swift_bridgeObjectRetain(v17);
      return 0LL;
    }

    uint64_t v19 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v19;
      sub_10005A8F0();
      if ((v20 & 1) == 0) {
        break;
      }
      uint64_t v21 = (uint64_t *)(v12 + 16 * v10);
      uint64_t v22 = v21[1];
      BOOL v23 = *v21 == a2 && v22 == a3;
      if (v23 || (sub_10005A06C(*v21, v22, a2, a3) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  sub_1000145F0();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v27[0] = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  sub_1000145E8();
  uint64_t v25 = sub_10005A464();
  sub_1000585D4(v25, v26, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v27[0];
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

void sub_100057CC0()
{
  uint64_t v5 = sub_10005A6BC();
  type metadata accessor for UUID(v5);
  sub_100047200();
  __chkstk_darwin(v6);
  sub_10005A390();
  sub_100059F08(&qword_1001D1120, v7);
  sub_100010DFC();
  sub_10005A444();
  sub_10005A1CC();
  if ((v9 & 1) != 0)
  {
    sub_10005A5CC(v8);
    while (1)
    {
      sub_10005A244(v10);
      sub_100059F08(&qword_1001D3D68, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      sub_10005A2E8(v3, v12, v13, v11);
      sub_10005A33C();
      if ((v0 & 1) != 0) {
        break;
      }
      uint64_t v10 = sub_10005A20C();
      if ((v14 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v4 = v19;
        uint64_t v1 = v20;
        uint64_t v15 = v21;
        goto LABEL_7;
      }
    }

    sub_10005A1BC();
    sub_10005A808();
    sub_10005A304();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = v2;
LABEL_7:
    swift_isUniquelyReferenced_nonNull_native(*v4);
    sub_10005A324();
    uint64_t v16 = sub_10005A2AC();
    sub_10005876C(v16, v17, v18);
    sub_10005A69C();
    sub_10005A274(v1, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 32));
  }

  sub_100009AA0();
}

Swift::Int sub_100057DD0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_10000941C(&qword_1001D3D58);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v32 = v2;
    os_log_type_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    if (!v9) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      uint64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v20, v21);
      Swift::Int result = Hasher._finalize()();
      uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          BOOL v28 = v24 == v27;
          if (v24 == v27) {
            unint64_t v24 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v11 + 8 * v24);
          if (v29 != -1)
          {
            unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
      uint64_t v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
      *uint64_t v30 = v20;
      v30[1] = v21;
      ++*(void *)(v6 + 16);
      if (v9) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_41;
      }
      if (v16 >= v10) {
        goto LABEL_35;
      }
      unint64_t v17 = v33[v16];
      ++v13;
      if (!v17)
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v10) {
          goto LABEL_35;
        }
        unint64_t v17 = v33[v13];
        if (!v17)
        {
          int64_t v13 = v16 + 2;
          if (v16 + 2 >= v10) {
            goto LABEL_35;
          }
          unint64_t v17 = v33[v13];
          if (!v17)
          {
            int64_t v18 = v16 + 3;
            if (v18 >= v10)
            {
LABEL_35:
              swift_release();
              uint64_t v2 = v32;
              uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
              if (v31 > 63) {
                sub_100057A20(0LL, (unint64_t)(v31 + 63) >> 6, v33);
              }
              else {
                *os_log_type_t v33 = -1LL << v31;
              }
              *(void *)(v3 + sub_10000BDD4(v0 + 16) = 0LL;
              break;
            }

            unint64_t v17 = v33[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v13 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_42;
                }
                if (v13 >= v10) {
                  goto LABEL_35;
                }
                unint64_t v17 = v33[v13];
                ++v18;
                if (v17) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v13 = v18;
          }
        }
      }

void sub_1000580A8()
{
  uint64_t v48 = v1;
  uint64_t v49 = v2;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v8 = sub_10005A604(v6, v7);
  uint64_t v47 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  int64_t v10 = (char *)&v43 - v9;
  uint64_t v11 = (void *)*v0;
  sub_10000941C(v4);
  uint64_t v12 = (void *)static _SetStorage.resize(original:capacity:move:)(v11, v0, 1LL);
  if (!v11[2]) {
    goto LABEL_35;
  }
  sub_10005A598();
  char v46 = v11 + 7;
  sub_10005A898();
  unint64_t v15 = v14 & v13;
  uint64_t v44 = v5;
  int64_t v45 = (unint64_t)(v16 + 63) >> 6;
  unint64_t v17 = v12 + 7;
  swift_retain(v11);
  int64_t v18 = 0LL;
  if (!v15) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v19 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v19 | (v18 << 6); ; unint64_t i = v27 + (v18 << 6))
  {
    BOOL v28 = v11;
    uint64_t v29 = v11[6];
    uint64_t v30 = *(void *)(v47 + 72);
    uint64_t v31 = *(void (**)(char *, unint64_t, uint64_t))(v47 + 32);
    v31(v10, v29 + v30 * i, v8);
    uint64_t v32 = v12[5];
    sub_10005A830();
    dispatch thunk of Hashable._rawHashValue(seed:)(v32, v8, v33);
    sub_10005A81C();
    if (((v36 << v35) & ~v17[v34]) == 0)
    {
      sub_10005A7E0();
      while (++v39 != v40 || (v38 & 1) == 0)
      {
        BOOL v41 = v39 == v40;
        if (v39 == v40) {
          uint64_t v39 = 0LL;
        }
        v38 |= v41;
        if (v17[v39] != -1LL)
        {
          sub_10005A7C0();
          goto LABEL_29;
        }
      }

      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      return;
    }

    sub_10005A7F4();
LABEL_29:
    *(void *)((char *)v17 + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v37;
    v31((char *)(v12[6] + v37 * v30), (unint64_t)v10, v8);
    ++v12[2];
    uint64_t v11 = v28;
    if (v15) {
      goto LABEL_5;
    }
LABEL_6:
    if (__OFADD__(v18, 1LL)) {
      goto LABEL_37;
    }
    if (v18 + 1 >= v45) {
      goto LABEL_31;
    }
    sub_10005A880();
    int64_t v18 = v21;
    if (!v22)
    {
      int64_t v18 = v21 + 1;
      if (v21 + 1 >= v45) {
        goto LABEL_31;
      }
      if (!v46[v18])
      {
        int64_t v18 = v21 + 2;
        if (v21 + 2 >= v45) {
          goto LABEL_31;
        }
        if (!v46[v18]) {
          break;
        }
      }
    }

uint64_t sub_100058380(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v29 = a1;
  uint64_t v6 = type metadata accessor for Trialpb_TrialExperiment(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  BOOL v28 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if ((a3 & 1) != 0)
  {
    sub_1000580A8();
  }

  else
  {
    if (v11 > v10)
    {
      sub_100058B70();
      goto LABEL_12;
    }

    sub_10005900C();
  }

  uint64_t v12 = *v3;
  uint64_t v13 = *(void *)(*v3 + 40);
  sub_100059F08(&qword_1001D3D78, (uint64_t (*)(uint64_t))&type metadata accessor for Trialpb_TrialExperiment);
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v6, v14);
  uint64_t v16 = -1LL << *(_BYTE *)(v12 + 32);
  a2 = v15 & ~v16;
  if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v17 = ~v16;
    uint64_t v18 = *(void *)(v7 + 72);
    unint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v19(v9, *(void *)(v12 + 48) + v18 * a2, v6);
      sub_100059F08( &qword_1001D3D80,  (uint64_t (*)(uint64_t))&type metadata accessor for Trialpb_TrialExperiment);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v29, v6, v20);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v21 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }

    while (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(*v28 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v23 + 48) + *(void *)(v7 + 72) * a2,  v22,  v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + sub_10000BDD4(v0 + 16) = v27;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(*v28 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v23 + 48) + *(void *)(v7 + 72) * a2,  v22,  v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + sub_10000BDD4(v0 + 16) = v27;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  sub_10006B494();
}

    uint64_t v8 = 1;
    goto LABEL_13;
  }

  uint64_t v8 = 1;
  return v8 & 1;
}

      uint64_t v23 = v163;
      if ((v184 & 1) != 0)
      {
        if (v25 < v22) {
          goto LABEL_142;
        }
        if (v22 < v25)
        {
          uint64_t v172 = v24;
          uint64_t v56 = 0LL;
          uint64_t v57 = v42 * (v25 - 1);
          BOOL v58 = v25 * v42;
          uint64_t v59 = v22;
          uint64_t v60 = v22 * v42;
          do
          {
            if (v59 != v25 + v56 - 1)
            {
              uint64_t v61 = v25;
              uint64_t v62 = v164;
              if (!v164) {
                goto LABEL_148;
              }
              uint64_t v63 = v164 + v60;
              uint64_t v184 = v164 + v57;
              sub_1000DE160(v164 + v60, v165);
              if (v60 < v57 || v63 >= v62 + v58)
              {
                uint64_t v65 = v62 + v60;
                unint64_t v66 = v184;
                swift_arrayInitWithTakeFrontToBack(v65, v184, 1LL, v181);
              }

              else
              {
                unint64_t v66 = v184;
                if (v60 != v57) {
                  swift_arrayInitWithTakeBackToFront(v63, v184, 1LL, v181);
                }
              }

              sub_1000DE160(v165, v66);
              uint64_t v25 = v61;
              uint64_t v42 = v185;
            }

            ++v59;
            --v56;
            v57 -= v42;
            v58 -= v42;
            v60 += v42;
          }

          while (v59 < v25 + v56);
          a1 = v186;
          uint64_t v23 = v163;
          uint64_t v22 = v166;
          uint64_t v24 = v172;
        }
      }
    }

    if (v25 < v24)
    {
      uint64_t v111 = __OFSUB__(v25, v22);
      uint64_t v67 = v25 - v22;
      if (v111) {
        goto LABEL_140;
      }
      if (v67 < v160)
      {
        if (__OFADD__(v166, v160)) {
          goto LABEL_143;
        }
        if (v166 + v160 >= v24) {
          uint64_t v68 = v24;
        }
        else {
          uint64_t v68 = v166 + v160;
        }
        if (v68 < v166) {
          goto LABEL_144;
        }
        if (v25 == v68)
        {
          uint64_t v22 = v166;
          goto LABEL_49;
        }

        uint64_t v159 = v2;
        double v69 = *(void *)(v167 + 72);
        unint64_t v70 = v69 * (v25 - 1);
        uint64_t v170 = v69;
        uint64_t v71 = v25 * v69;
        unint64_t v164 = v68;
        do
        {
          unint64_t v72 = 0LL;
          uint64_t v73 = v166;
          uint64_t v180 = (char *)v25;
          uint64_t v171 = v71;
          uint64_t v172 = v70;
          while (1)
          {
            uint64_t v185 = v73;
            uint64_t v74 = *v186;
            uint64_t v184 = v71 + v72;
            uint64_t v75 = v179;
            sub_1000DF8E8(v71 + v72 + v74, (uint64_t)v179);
            uint64_t v183 = (void (*)(char *, uint64_t, uint64_t))(v70 + v72);
            uint64_t v76 = v70 + v72 + v74;
            uint64_t v77 = v173;
            sub_1000DF8E8(v76, (uint64_t)v173);
            uint64_t v78 = v181;
            unint64_t v79 = *(int *)(v181 + 48);
            char v80 = (uint64_t)v174 + v79;
            void *v174 = *v75;
            sub_10006D0D4((uint64_t)v75 + v79, v80);
            uint64_t v81 = v169;
            uint64_t v82 = *(void (**)(char *, uint64_t, uint64_t))(v169 + 16);
            uint64_t v83 = v176;
            uint64_t v84 = v178;
            v82(v176, v80, v178);
            sub_10006D098(v80);
            uint64_t v85 = *(int *)(v78 + 48);
            uint64_t v86 = (uint64_t)v175 + v85;
            *uint64_t v175 = *v77;
            sub_10006D0D4((uint64_t)v77 + v85, v86);
            uint64_t v87 = v177;
            v82(v177, v86, v84);
            sub_10006D098(v86);
            LOBYTE(v86) = static Date.< infix(_:_:)(v83, v87);
            uint64_t v88 = *(void (**)(char *, uint64_t))(v81 + 8);
            v88(v87, v84);
            v88(v83, v84);
            sub_1000DF930((uint64_t)v77);
            sub_1000DF930((uint64_t)v75);
            if ((v86 & 1) == 0) {
              break;
            }
            uint64_t v89 = *v186;
            if (!*v186) {
              goto LABEL_146;
            }
            uint64_t v71 = v171;
            unint64_t v70 = v172;
            unint64_t v90 = v89 + v171 + v72;
            unint64_t v91 = v89 + v172 + v72;
            sub_1000DE160(v90, v182);
            swift_arrayInitWithTakeFrontToBack(v90, v91, 1LL, v181);
            sub_1000DE160(v182, v91);
            v72 -= v170;
            uint64_t v73 = v185 + 1;
            uint64_t v92 = v180;
          }

          uint64_t v92 = v180;
          uint64_t v71 = v171;
          unint64_t v70 = v172;
LABEL_46:
          uint64_t v25 = (uint64_t)(v92 + 1);
          v70 += v170;
          v71 += v170;
        }

        while (v25 != v164);
        uint64_t v25 = v164;
        uint64_t v2 = v159;
        a1 = v186;
        uint64_t v23 = v163;
      }

      uint64_t v22 = v166;
    }

    sub_100116374();
    sub_10011633C(v70);
    goto LABEL_15;
  }

  if (v53 <= 31) {
    goto LABEL_12;
  }
  a10 = 0x7FFFFFFF;
  sub_1001165C4(v67, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 32));
  uint64_t v57 = sub_100111F38();
  sub_100116398((uint64_t)&a10, (uint64_t)&type metadata for Int32, v57);
  uint64_t v55 = sub_1001163E8(v64, v67);
  sub_10011633C(v64);
  uint64_t v56 = v67;
LABEL_14:
  sub_10011633C(v56);
  if ((v55 & 1) == 0)
  {
LABEL_15:
    BOOL v58 = sub_100116374();
    sub_10011633C(v23);
    if (sqlite3_bind_int(v65, v69, v58))
    {
      uint64_t v59 = sub_1000E4274();
      uint64_t v60 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v59);
      sub_100116828(v60, v61);
      sub_1001163A8(v62, (uint64_t)"Failed to bind Int");
    }

    sub_100116374();
    sub_10011633C(v69);
    goto LABEL_15;
  }

  if (v52 <= 63) {
    goto LABEL_12;
  }
  unint64_t v70 = 0x7FFFFFFFFFFFFFFFLL;
  sub_1001165C4(v66, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 32));
  uint64_t v56 = sub_100111F74();
  sub_100116398((uint64_t)&v70, (uint64_t)&type metadata for Int64, v56);
  uint64_t v54 = sub_1001163E8(v63, v66);
  sub_10011633C(v63);
  uint64_t v55 = v66;
LABEL_14:
  sub_10011633C(v55);
  if ((v54 & 1) == 0)
  {
LABEL_15:
    uint64_t v57 = sub_100116374();
    sub_10011633C(v22);
    if (sqlite3_bind_int64(v64, v68, v57))
    {
      BOOL v58 = sub_1000E4274();
      uint64_t v59 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v58);
      sub_100116828(v59, v60);
      sub_1001163A8(v61, (uint64_t)"Failed to bind Int");
    }

      __break(1u);
      goto LABEL_13;
    }

    __break(1u);
    goto LABEL_12;
  }

  return result;
}

  __break(1u);
  return result;
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  if (v8 > 1)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_12;
  }

  *a1 = *a2;
  uint64_t v9 = a2[1];
  a1[1] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_1000585D4(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100057DD0(v11);
  }

  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_1000589C0();
      goto LABEL_22;
    }

    sub_100058D64(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v28, *(void *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  uint64_t result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    uint64_t v16 = (void *)(v15 + 16 * a3);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v8 && v17 == a2;
    if (v18 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0LL), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

LABEL_22:
  uint64_t v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  uint64_t v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  *uint64_t v24 = v8;
  v24[1] = a2;
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + sub_10000BDD4(v0 + 16) = v27;
  }
  return result;
}

  sub_100009AA0();
}

    __break(1u);
  }

    uint64_t v4 = (v8 - 1) & v8;
    uint64_t v6 = __clz(__rbit64(v8)) + (v7 << 6);
    uint64_t v39 = v7;
  }

  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
  return result;
}

  __break(1u);
}

  ;
}

  unint64_t v50 = v80;

  swift_bridgeObjectRelease_n(v3, 2LL);
  char v51 = [v50 data];
  if (!v51)
  {
    uint64_t v63 = sub_10014B4E4();
    sub_100010EA0((uint64_t)&type metadata for BiomeReadError, v63);
    *uint64_t v64 = 258;
    sub_1000C5DB8();
    uint64_t v62 = v79;
    goto LABEL_26;
  }

  Class isa = (Class)v51;
  sub_1000F211C(isa);
  unint64_t v52 = objc_allocWithZone((Class)sub_10014BBF8());
  char v53 = sub_1000A1F68();
  RawPayload.init(with:)(v53, v54);
  uint64_t v55 = v81;
  uint64_t v56 = *(void *)(v81 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_sessionId + 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))( v86,  v81 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_type,  v84);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 16))(v82, v75, v78);
  uint64_t v57 = v55 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_closingDate;
  sub_1000A14F8(v55 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_closingDate, (uint64_t)v87);
  sub_100026490(v57, (uint64_t)v76);
  BOOL v58 = type metadata accessor for SessionFeedback(0LL);
  uint64_t v59 = swift_allocObject(v58, *(unsigned int *)(v58 + 48), *(unsigned __int16 *)(v58 + 52));
  swift_bridgeObjectRetain(v56);
  sub_1000A1F68();
  uint64_t v3 = v59;
  uint64_t v60 = v77;
  uint64_t v61 = SessionFeedback.init(session:sessionId:type:creationDate:closingDate:)();
  if (v60)
  {

    uint64_t v62 = isa;
LABEL_26:

    return v3;
  }

  uint64_t v3 = v61;
  unint64_t v66 = isa;
  if ((v49 & 1) != 0)
  {
    uint64_t v67 = 1LL;
    uint64_t v68 = (uint64_t)v73;
  }

  else
  {
    uint64_t v68 = (uint64_t)v73;
    Date.init(timeIntervalSinceReferenceDate:)(v41);
    uint64_t v67 = 0LL;
  }

  double v69 = v72;
  sub_100009654(v68, v67, 1LL, v78);
  sub_100153344(v69, v68);

  sub_100014358(v68, &qword_1001D32B0);
  return v3;
}

uint64_t sub_10005876C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v29 = a1;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  BOOL v28 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if ((a3 & 1) != 0)
  {
    sub_1000580A8();
  }

  else
  {
    if (v11 > v10)
    {
      sub_100058B70();
      goto LABEL_12;
    }

    sub_10005900C();
  }

  uint64_t v12 = *v3;
  uint64_t v13 = *(void *)(*v3 + 40);
  sub_100059F08(&qword_1001D1120, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v6, v14);
  uint64_t v16 = -1LL << *(_BYTE *)(v12 + 32);
  a2 = v15 & ~v16;
  if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v17 = ~v16;
    uint64_t v18 = *(void *)(v7 + 72);
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v19(v9, *(void *)(v12 + 48) + v18 * a2, v6);
      sub_100059F08(&qword_1001D3D68, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v29, v6, v20);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v21 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }

    while (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

void *sub_1000589C0()
{
  uint64_t v1 = v0;
  sub_10000941C(&qword_1001D3D58);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + sub_10000BDD4(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1LL;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    *uint64_t v22 = *v20;
    v22[1] = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain(v21);
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }

void sub_100058B70()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v5 = v4(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v30 - v7;
  sub_10000941C(v2);
  int64_t v9 = (void *)*v0;
  uint64_t v10 = static _SetStorage.copy(original:)(*v0);
  if (!v9[2])
  {
    swift_release();
LABEL_30:
    *uint64_t v3 = v10;
    sub_100009AA0();
    return;
  }

  uint64_t v31 = v3;
  sub_10005A598();
  uint64_t v12 = v9 + 7;
  unint64_t v14 = (unint64_t)(v13 + 63) >> 6;
  if ((void *)v10 != v9 || v11 >= &v9[v14 + 7]) {
    memmove(v11, v9 + 7, 8 * v14);
  }
  int64_t v16 = 0LL;
  *(void *)(v10 + sub_10000BDD4(v0 + 16) = v9[2];
  sub_10005A598();
  uint64_t v18 = v9[7];
  uint64_t v19 = -1LL;
  if (v17 < 64) {
    uint64_t v19 = ~(-1LL << v17);
  }
  unint64_t v20 = v19 & v18;
  int64_t v21 = (unint64_t)(v17 + 63) >> 6;
  if ((v19 & v18) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v22 = __clz(__rbit64(v20));
  v20 &= v20 - 1;
  for (unint64_t i = v22 | (v16 << 6); ; unint64_t i = v28 + (v16 << 6))
  {
    unint64_t v29 = *(void *)(v6 + 72) * i;
    sub_10005A274((uint64_t)v8, v9[6] + v29, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
    sub_10005A274( *(void *)(v10 + 48) + v29,  (uint64_t)v8,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32));
    if (v20) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v24 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v24 >= v21) {
      goto LABEL_28;
    }
    ++v16;
    if (!v12[v24])
    {
      int64_t v16 = v24 + 1;
      if (v24 + 1 >= v21) {
        goto LABEL_28;
      }
      if (!v12[v16])
      {
        int64_t v16 = v24 + 2;
        if (v24 + 2 >= v21) {
          goto LABEL_28;
        }
        if (!v12[v16]) {
          break;
        }
      }
    }

LABEL_32:
  __break(1u);
}

    __break(1u);
    goto LABEL_33;
  }

  unint64_t v115 = v247;
  uint64_t v116 = v243;
  unint64_t v117 = *(void **)(v243 + 16);
  uint64_t v118 = v224;
  sub_1000A26C4((uint64_t)v224, v71);
  char v119 = v20;
  uint64_t v221 = v115;
  unint64_t v225 = v117;
  if (!v115)
  {
    uint64_t v175 = (void (*)(uint64_t, uint64_t, uint64_t))v117;
    char v131 = *(void (**)(uint64_t, uint64_t))(v116 + 8);
    uint64_t v134 = sub_1000F9668((uint64_t)v118);
    uint64_t v176 = v240;
    char v123 = (uint64_t)v242;
    unint64_t v177 = v233;
LABEL_21:
    sub_1000F98AC(v134, *v119);
    v175(v177, v123, v26);
    sub_1000F987C();
    sub_1000A22A0(v178);
    uint64_t v179 = v231;
    sub_1000F96E0((uint64_t)v231);
    uint64_t v180 = v230;
    sub_1000F98D0((uint64_t)&unk_100165198);
    uint64_t v181 = v226;
    uint64_t v182 = v26;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v180, v26, v179);
    uint64_t v183 = v232;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v177, v181, v26, *(void *)(v227 + 8));
    sub_1000F9668(v181);
    sub_1000F9668(v177);
    sub_1000F9848();
    uint64_t v184 = v244;
    LOBYTE(v179) = dispatch thunk of static Equatable.== infix(_:_:)(v183, v244, v26, v185);
    uint64_t v186 = sub_1000F9668(v183);
    uint64_t v187 = v131;
    if ((v179 & 1) == 0)
    {
      if ((sub_1000F9670(v184, v184) & 1) != 0)
      {
        uint64_t v198 = v184;
        id v199 = TupleTypeMetadata2;
        uint64_t v200 = v234;
        uint64_t v201 = v234 + *(int *)(TupleTypeMetadata2 + 48);
        sub_1000F96D0(v234, v198);
        sub_1000F96D0(v201, v198);
        uint64_t v202 = v236;
        uint64_t v203 = v236 + *(int *)(v199 + 48);
        sub_1000F96D0(v236, v200);
        sub_1000F96D0(v203, v201);
        uint64_t v204 = v237;
        sub_1000F96D0(v237, v202);
        v187(v203, v26);
        double v205 = v202 + *(int *)(v199 + 48);
        sub_1000F96D0(v202, v200);
        sub_1000F96D0(v205, v201);
        sub_1000F96D0(v204 + *(int *)(v176 + 36), v205);
        v187(v202, v26);
        uint64_t v206 = sub_1000F9868();
        v207(v206, v204, v176);
        Array.insert(_:at:)(v201, v221, v235);
        goto LABEL_29;
      }

      goto LABEL_37;
    }

    uint64_t v188 = v237;
    sub_1000F98AC(v186, *v241);
    sub_1000F97E0(v183, v188 + *(int *)(v176 + 36));
    v224(v188, v176);
    if ((sub_1000F9670(v184, v183) & 1) == 0)
    {
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    uint64_t v189 = v184;
    uint64_t v190 = TupleTypeMetadata2;
    uint64_t v191 = v234;
    uint64_t v192 = v234 + *(int *)(TupleTypeMetadata2 + 48);
    sub_1000F96C8(v234, v189);
    unint64_t v193 = *(void *)(v243 + 32);
    sub_1000F9644(v192, v183);
    sub_1000F964C();
    sub_1000F96C8(v182, v192);
    uint64_t v194 = (uint64_t)v222;
    sub_1000F9644((uint64_t)v222, v183);
    uint64_t v195 = sub_1000A2380();
    ((void (*)(uint64_t))v187)(v195);
    uint64_t v196 = v183 + *(int *)(v190 + 48);
    sub_1000F9644(v183, v191);
    sub_1000F9644(v196, v192);
    sub_1000F9644(v194 + *(int *)(v176 + 36), v196);
    sub_1000F98B8();
    sub_1000F96FC();
    sub_1000F9788();
    uint64_t v197 = &a11;
LABEL_28:
    uint64_t v213 = *(v197 - 32);
    Swift::String v214 = sub_1000F9718();
    sub_1000F95A8(v214, v215, v216);
    sub_1000F97C8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v193 + 40))(v217 + v218 * v213, v190, v176);
    goto LABEL_29;
  }

  uint64_t v120 = v240;
  char v121 = v233;
  if (__OFSUB__(v115, 1LL))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  uint64_t v122 = *v20;
  char v123 = (uint64_t)v242;
  uint64_t v220 = v115 - 1;
  Array.subscript.getter(v115 - 1, v122, v240);
  sub_1000A26C4(v121, v123 + *(int *)(v120 + 36));
  sub_1000F987C();
  sub_1000A22A0(v124);
  char v125 = v231;
  uint64_t v126 = sub_1000F96E0((uint64_t)v231);
  char v127 = v230;
  v219[1] = v126;
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_100165198, 512LL, &v246);
  uint64_t v128 = v226;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v127, v26, v125);
  char v129 = *(void *)(v227 + 8);
  uint64_t v130 = v232;
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)(v121, v128, v26, v129);
  char v131 = *(void (**)(uint64_t, uint64_t))(v116 + 8);
  sub_1000F9668(v128);
  sub_1000F9668(v121);
  uint64_t v132 = v224;
  char v133 = sub_1000F98E8(v130, (uint64_t)v224);
  sub_1000F9668(v130);
  uint64_t v134 = sub_1000F9668((uint64_t)v132);
  if ((v133 & 1) == 0)
  {
    uint64_t v175 = (void (*)(uint64_t, uint64_t, uint64_t))v225;
    unint64_t v177 = v233;
    uint64_t v176 = v240;
    goto LABEL_21;
  }

  uint64_t v135 = v240;
  Array.subscript.getter(v221, *v119, v240);
  uint64_t v136 = v233;
  ((void (*)(unint64_t, uint64_t, uint64_t))v225)(v233, v123, v26);
  sub_1000F96F0();
  uint64_t v137 = v230;
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_100165198,  512LL,  AssociatedTypeWitness);
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v137, v26, v231);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v136, v128, v26, v129);
  sub_1000F9668(v128);
  sub_1000F9668(v136);
  os_log_type_t v138 = v244;
  LOBYTE(v137) = sub_1000F98E8(v130, v244);
  uint64_t v231 = v131;
  uint64_t v139 = ((uint64_t (*)(uint64_t, uint64_t))v131)(v130, v26);
  uint64_t v140 = v241;
  uint64_t v141 = v237;
  sub_1000F9834(v139, *v241);
  sub_1000F97E0(v130, v141);
  uint64_t v142 = sub_1000F96F0();
  uint64_t v143 = v130;
  if ((v137 & 1) != 0)
  {
    uint64_t v144 = (uint64_t)v222;
    sub_1000F9834(v142, *v140);
    os_log_type_t v145 = v233;
    sub_1000A26C4(v233, v144 + *(int *)(v135 + 36));
    sub_1000F96F0();
    if ((sub_1000F9670(v130, v145) & 1) != 0)
    {
      uint64_t v146 = v26;
      uint64_t v147 = TupleTypeMetadata2;
      uint64_t v148 = v234;
      unint64_t v149 = v234 + *(int *)(TupleTypeMetadata2 + 48);
      sub_1000F9644(v234, v143);
      sub_1000F9644(v149, v233);
      sub_1000F964C();
      sub_1000F96C8(v144, v149);
      uint64_t v150 = v223;
      sub_1000F9644(v223, v138);
      uint64_t v151 = sub_1000A2380();
      uint64_t v152 = v231;
      ((void (*)(uint64_t))v231)(v151);
      uint64_t v153 = v138 + *(int *)(v147 + 48);
      sub_1000F9644(v138, v148);
      sub_1000F9644(v153, v149);
      uint64_t v154 = v240;
      sub_1000F9644(v150 + *(int *)(v240 + 36), v153);
      v152(v138, v146);
      uint64_t v155 = v245;
      uint64_t v156 = (uint64_t)v242;
      sub_1000770AC((uint64_t)v242, v150, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v245 + 32));
      uint64_t v157 = v235;
      uint64_t v158 = v241;
      Array._makeMutableAndUnique()();
      uint64_t v159 = v220;
      sub_1000F95A8(v220, *v158, v154);
      sub_1000F97C8();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v155 + 40))(v160 + v161 * v159, v156, v154);
      Array.remove(at:)(v221, v157);
      sub_1000F96F0();
      goto LABEL_29;
    }

    goto LABEL_38;
  }

  if ((sub_1000F9670(v130, v138) & 1) != 0)
  {
    uint64_t v190 = TupleTypeMetadata2;
    uint64_t v208 = v234;
    uint64_t v209 = v234 + *(int *)(TupleTypeMetadata2 + 48);
    unint64_t v193 = *(void *)(v243 + 32);
    sub_1000F9644(v234, v130);
    sub_1000F96C8(v209, v138);
    sub_1000F964C();
    sub_1000F96C8(v141, v209);
    char v210 = (uint64_t)v222;
    sub_1000F9644((uint64_t)v222, v138);
    uint64_t v211 = sub_1000A2380();
    ((void (*)(uint64_t))v231)(v211);
    uint64_t v212 = v138 + *(int *)(v190 + 48);
    sub_1000F9644(v138, v208);
    sub_1000F9644(v212, v209);
    uint64_t v176 = v240;
    sub_1000F9644(v210 + *(int *)(v240 + 36), v212);
    sub_1000F98B8();
    sub_1000F96FC();
    sub_1000F9788();
    uint64_t v197 = &a9;
    goto LABEL_28;
  }

          swift_release();
          swift_release();
          return (uint64_t)a1;
        }
      }
    }

          swift_release();
          swift_release();
          return (uint64_t)a1;
        }
      }
    }

uint64_t sub_100058D64(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_10000941C(&qword_1001D3D58);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release();
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  uint64_t result = swift_retain(v3);
  int64_t v13 = 0LL;
  if (!v10) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    uint64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v21);
    String.hash(into:)(v33, v20, v21);
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v24);
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    uint64_t v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
    *uint64_t v30 = v20;
    v30[1] = v21;
    ++*(void *)(v6 + 16);
    if (v10) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_39;
    }
    if (v16 >= v32) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v32) {
        goto LABEL_35;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v16 + 2;
        if (v16 + 2 >= v32) {
          goto LABEL_35;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v13);
        if (!v17) {
          break;
        }
      }
    }

LABEL_40:
  __break(1u);
  return result;
}

                  __break(1u);
LABEL_41:
                  __break(1u);
                  return;
                }
              }
            }

            uint64_t v33 = v42;
          }

  sub_100019F5C();
  uint64_t v42 = "Range requires lowerBound <= upperBound";
  uint64_t v43 = "Swift/Range.swift";
  uint64_t v44 = 39LL;
  int64_t v45 = 17LL;
LABEL_42:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v42, v44, 2LL, v43, v45);
  __break(1u);
  return result;
}

          swift_release();
          swift_bridgeObjectRelease();
          *(void *)(v35 + 80) = v2;
          sub_1000145F8();
          swift_bridgeObjectRelease();
          return (uint64_t)v2;
        }
      }
    }

void sub_10005900C()
{
  uint64_t v45 = v1;
  uint64_t v46 = v2;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v8 = sub_10005A604(v6, v7);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v42 - v10;
  uint64_t v12 = *v0;
  sub_10000941C(v4);
  uint64_t v13 = sub_10005A56C();
  unint64_t v15 = (void *)static _SetStorage.resize(original:capacity:move:)(v13, v14, 0LL);
  if (!*(void *)(v12 + 16))
  {
    swift_release();
LABEL_31:
    *uint64_t v5 = v15;
    sub_100009AA0();
    return;
  }

  sub_10005A598();
  uint64_t v42 = v0;
  uint64_t v43 = v12 + 56;
  sub_10005A898();
  unint64_t v18 = v17 & v16;
  int64_t v44 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v20 = v15 + 7;
  swift_retain(v12);
  int64_t v21 = 0LL;
  if (!v18) {
    goto LABEL_4;
  }
LABEL_3:
  unint64_t v22 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (unint64_t i = v22 | (v21 << 6); ; unint64_t i = v30 + (v21 << 6))
  {
    uint64_t v31 = *(void *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, *(void *)(v12 + 48) + v31 * i, v8);
    uint64_t v32 = v15[5];
    sub_10005A830();
    dispatch thunk of Hashable._rawHashValue(seed:)(v32, v8, v33);
    sub_10005A81C();
    if (((v36 << v35) & ~v20[v34]) == 0)
    {
      sub_10005A7E0();
      while (++v39 != v40 || (v38 & 1) == 0)
      {
        BOOL v41 = v39 == v40;
        if (v39 == v40) {
          uint64_t v39 = 0LL;
        }
        v38 |= v41;
        if (v20[v39] != -1LL)
        {
          sub_10005A7C0();
          goto LABEL_27;
        }
      }

      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }

    sub_10005A7F4();
LABEL_27:
    *(void *)((char *)v20 + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v37;
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v15[6] + v37 * v31, v11, v8);
    ++v15[2];
    if (v18) {
      goto LABEL_3;
    }
LABEL_4:
    if (__OFADD__(v21, 1LL)) {
      goto LABEL_33;
    }
    if (v21 + 1 >= v44) {
      goto LABEL_29;
    }
    sub_10005A880();
    int64_t v21 = v24;
    if (!v25)
    {
      int64_t v21 = v24 + 1;
      if (v24 + 1 >= v44) {
        goto LABEL_29;
      }
      if (!*(void *)(v43 + 8 * v21))
      {
        int64_t v21 = v24 + 2;
        if (v24 + 2 >= v44) {
          goto LABEL_29;
        }
        if (!*(void *)(v43 + 8 * v21)) {
          break;
        }
      }
    }

char *sub_1000592A0(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (((unint64_t)result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v8 = result;
  uint64_t v9 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v10 = 1 - v9;
  if (__OFSUB__(1LL, v9))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v11 = v7 + v10;
  if (__OFADD__(v7, v10))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  if (!isUniquelyReferenced_nonNull_native || v11 > *(void *)(v6 + 24) >> 1)
  {
    if (v7 <= v11) {
      uint64_t v15 = v7 + v10;
    }
    else {
      uint64_t v15 = v7;
    }
    sub_1000313E4(isUniquelyReferenced_nonNull_native, v15, 1, v6);
    uint64_t v6 = v16;
  }

  uint64_t v17 = v6 + 32 + 16LL * (void)v8;
  uint64_t result = (char *)swift_arrayDestroy(v17, v9);
  if (!v10) {
    goto LABEL_16;
  }
  uint64_t v18 = *(void *)(v6 + 16);
  if (__OFSUB__(v18, a2)) {
    goto LABEL_22;
  }
  uint64_t result = sub_1000DAB2C((char *)(v6 + 32 + 16 * a2), v18 - a2, (char *)(v17 + 16));
  uint64_t v19 = *(void *)(v6 + 16);
  BOOL v20 = __OFADD__(v19, v10);
  uint64_t v21 = v19 + v10;
  if (!v20)
  {
    *(void *)(v6 + sub_10000BDD4(v0 + 16) = v21;
LABEL_16:
    *(void *)uint64_t v17 = a3;
    *(void *)(v17 + 8) = a4;
    *uint64_t v4 = v6;
    return result;
  }

uint64_t sub_1000593B4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v21, *(void *)(*v2 + 40LL));
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v21, a1, a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  uint64_t v11 = v10[1];
  BOOL v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
  {
    uint64_t v16 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v16;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v17 = (void *)(v9 + 16 * v8);
      uint64_t v18 = v17[1];
      BOOL v19 = *v17 == a1 && v18 == a2;
    }

    while (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) == 0);
  }

  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v14 = *v2;
  v21[0] = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000589C0();
    uint64_t v14 = v21[0];
  }

  uint64_t v15 = *(void *)(*(void *)(v14 + 48) + 16 * v8);
  sub_100059728(v8);
  *uint64_t v2 = v21[0];
  swift_bridgeObjectRelease();
  return v15;
}

void sub_100059540()
{
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  sub_10005A368();
  __chkstk_darwin(v6);
  sub_100009AD4();
  uint64_t v7 = *v0;
  uint64_t v8 = *(void *)(*v0 + 40LL);
  sub_100059F08(&qword_1001D1120, v9);
  uint64_t v11 = v10;
  sub_1000145F8();
  uint64_t v12 = dispatch thunk of Hashable._rawHashValue(seed:)(v8, v5, v11);
  uint64_t v13 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v14 = v12 & ~v13;
  if (((*(void *)(v7 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) != 0)
  {
    int64_t v26 = v0;
    uint64_t v27 = v4;
    uint64_t v15 = ~v13;
    uint64_t v16 = *(void *)(v2 + 72);
    uint64_t v28 = v2;
    uint64_t v17 = *(void (**)(uint64_t, unint64_t, uint64_t))(v2 + 16);
    while (1)
    {
      unint64_t v18 = v16 * v14;
      v17(v1, *(void *)(v7 + 48) + v16 * v14, v5);
      sub_100059F08(&qword_1001D3D68, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      char v22 = sub_10005A2E8(v1, v20, v21, v19);
      sub_10004729C(v1, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
      if ((v22 & 1) != 0) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v15;
      if (((*(void *)(v7 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) == 0)
      {
        sub_1000145F0();
        uint64_t v23 = 1LL;
        uint64_t v4 = v27;
        goto LABEL_10;
      }
    }

    sub_1000145F0();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v26);
    uint64_t v25 = *v26;
    uint64_t v29 = *v26;
    void *v26 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100058B70();
      uint64_t v25 = v29;
    }

    uint64_t v4 = v27;
    sub_10005A274(v27, *(void *)(v25 + 48) + v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 32));
    sub_1000598E0(v14);
    void *v26 = v29;
    swift_bridgeObjectRelease();
    uint64_t v23 = 0LL;
  }

  else
  {
    sub_1000145F0();
    uint64_t v23 = 1LL;
  }

LABEL_10:
  sub_100009654(v4, v23, 1LL, v5);
  sub_100009AA0();
}

  sub_100009AA0();
}

  swift_bridgeObjectRelease();
}

  uint64_t v32 = [v7 response];
  if (v32)
  {
    uint64_t v106 = v32;
    uint64_t v33 = objc_opt_self(&OBJC_CLASS___NSHTTPURLResponse);
    if (!swift_dynamicCastObjCClass(v106, v33)
      || (uint64_t v34 = v5,
          char v35 = &v105[OBJC_IVAR____TtC7parsecd15DownloadManager_assembly],
          (uint64_t Strong = swift_unknownObjectWeakLoadStrong(&v105[OBJC_IVAR____TtC7parsecd15DownloadManager_assembly])) == 0))
    {

      return;
    }

    unint64_t v37 = Strong;
    uint64_t v100 = *((void *)v35 + 1);
    char v38 = [v7 originalRequest];
    if (v38)
    {
      uint64_t v39 = v38;
      static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v38);

      char isEscapingClosureAtFileLocation = sub_1000772E0();
      BOOL v41 = v1;
      uint64_t v42 = 0LL;
    }

    else
    {
      char isEscapingClosureAtFileLocation = type metadata accessor for URLRequest(0LL);
      BOOL v41 = v1;
      uint64_t v42 = 1LL;
    }

    sub_100009654(v41, v42, 1LL, isEscapingClosureAtFileLocation);
    sub_1000773B8(v1, &qword_1001D5380, (uint64_t)&v115);
    sub_1000772E0();
    uint64_t v43 = sub_10005A148(v0, 1LL, isEscapingClosureAtFileLocation);
    if (v29)
    {
      sub_1000773EC(v43, &qword_1001D5380);
      sub_1000772BC();
      sub_100009654(v44, v45, v46, v104);
    }

    else
    {
      URLRequest.url.getter(v43);
      sub_10007704C( v0,  *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(isEscapingClosureAtFileLocation - 8) + 8LL));
      uint64_t v47 = v104;
      sub_10005A148(v14, 1LL, v104);
      if (!v48)
      {
        uint64_t v54 = v102;
        uint64_t v55 = *(uint64_t (**)(uint64_t))(v102 + 32);
        uint64_t v56 = sub_100077430();
        uint64_t v57 = v55(v56);
        if ((char *)sub_100047258(v57, "statusCode") - 200 > (char *)0xC7)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(kPARErrorDomain);
          uint64_t v76 = sub_10000941C(&qword_1001D10D0);
          uint64_t v77 = v18;
          uint64_t inited = swift_initStackObject(v76, &v114);
          sub_1000770C0((__n128 *)inited, (__n128)xmmword_10015C7F0);
          _StringGuts.grow(_:)(24LL);
          unint64_t v79 = swift_bridgeObjectRelease();
          strcpy((char *)&v108, "status code ");
          BYTE13(v108) = 0;
          HIWORD(v108) = -5120;
          uint64_t v113 = sub_100047258(v79, "statusCode");
          v120._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
          sub_1000770B4(v120);
          sub_1000325E4();
          sub_10007710C();
          v121._uint64_t countAndFlagsBits = URL.absoluteString.getter(v80);
          sub_1000770B4(v121);
          sub_1000325E4();
          uint64_t v82 = *((void *)&v108 + 1);
          uint64_t v81 = v108;
          *(void *)(inited + 72) = &type metadata for String;
          *(_OWORD *)(inited + 48) = __PAIR128__(v82, v81);
          Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
          uint64_t v83 = objc_allocWithZone(&OBJC_CLASS___NSError);
          uint64_t v84 = (void *)sub_100077124();
          sub_10004A694();
          sub_10007725C();

          sub_100077064();
          uint64_t v74 = *(void (**)(char *, uint64_t))(v54 + 8);
          uint64_t v75 = v77;
          goto LABEL_30;
        }

        if (v34)
        {
          BOOL v58 = (void *)_convertErrorToNSError(_:)(v34);
          static String._unconditionallyBridgeFromObjectiveC(_:)(kPARErrorDomain);
          uint64_t v59 = sub_10000941C(&qword_1001D10D0);
          uint64_t v60 = v18;
          uint64_t v61 = swift_initStackObject(v59, &v107);
          sub_1000770C0((__n128 *)v61, (__n128)xmmword_10015C7F0);
          _StringGuts.grow(_:)(30LL);
          uint64_t v62 = swift_bridgeObjectRelease();
          *(void *)&uint64_t v108 = 0x64616F6C6E776F64LL;
          *((void *)&v108 + 1) = 0xEF20726F72726520LL;
          uint64_t v63 = sub_100047258(v62, "domain");
          uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
          unint64_t v66 = v65;

          v67._uint64_t countAndFlagsBits = v64;
          v67._object = v66;
          String.append(_:)(v67);
          swift_bridgeObjectRelease();
          sub_1000773D0(32LL);
          uint64_t v113 = sub_100047258(v68, "code");
          v118._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
          sub_1000770B4(v118);
          sub_1000325E4();
          sub_10007710C();
          v119._uint64_t countAndFlagsBits = URL.absoluteString.getter(v69);
          sub_1000770B4(v119);
          sub_1000325E4();
          uint64_t v71 = *((void *)&v108 + 1);
          unint64_t v70 = v108;
          *(void *)(v61 + 72) = &type metadata for String;
          *(_OWORD *)(v61 + 48) = __PAIR128__(v71, v70);
          Dictionary.init(dictionaryLiteral:)( v61,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
          unint64_t v72 = objc_allocWithZone(&OBJC_CLASS___NSError);
          uint64_t v73 = (void *)sub_100077124();
          sub_10004A694();
          sub_1000771CC();

          sub_100077064();
          sub_100077284();
          uint64_t v75 = v60;
LABEL_30:
          v74(v75, v104);
          goto LABEL_31;
        }

        uint64_t v85 = v105;
        sub_10006DE94();
        uint64_t v99 = *(dispatch_queue_t *)&v85[OBJC_IVAR____TtC7parsecd15DownloadManager_queue];
        uint64_t v86 = v102;
        uint64_t v87 = v101;
        (*(void (**)(uint64_t, char *, uint64_t))(v102 + 16))(v101, v18, v47);
        uint64_t v88 = *(unsigned __int8 *)(v86 + 80);
        uint64_t v89 = v47;
        unint64_t v90 = (v88 + 32) & ~v88;
        char v103 = v18;
        unint64_t v91 = (v15 + v90 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        char v0 = swift_allocObject(&unk_1001B4A00, v91 + 16, v88 | 7);
        *(void *)(v0 + sub_10000BDD4(v0 + 16) = v7;
        *(void *)(v0 + sub_10000BDD4(v0 + 24) = v85;
        ((void (*)(uint64_t, uint64_t, uint64_t))v55)(v0 + v90, v87, v89);
        uint64_t v92 = (uint64_t *)(v0 + v91);
        unint64_t v93 = v100;
        *uint64_t v92 = v37;
        v92[1] = v93;
        unint64_t v94 = sub_100019E00((uint64_t)&unk_1001B4A28);
        *(void *)(v94 + sub_10000BDD4(v0 + 16) = sub_1000767AC;
        *(void *)(v94 + sub_10000BDD4(v0 + 24) = v0;
        uint64_t v111 = sub_10001B040;
        uint64_t v112 = v94;
        *(void *)&uint64_t v108 = _NSConcreteStackBlock;
        *((void *)&v108 + 1) = 1107296256LL;
        uint64_t v109 = sub_10007B5C8;
        uint64_t v110 = &unk_1001B4A40;
        uint64_t v95 = _Block_copy(&v108);
        char v96 = v7;
        uint64_t v97 = v85;
        swift_unknownObjectRetain(v37);
        swift_retain(v94);
        swift_release();
        dispatch_sync(v99, v95);
        _Block_release(v95);
        sub_10007725C();
        sub_100077064();
        sub_100077284();
        sub_10003D850((uint64_t)v103, v98);
        char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v94, "", 86LL, 472LL, 20LL, 1LL);
        swift_release();
        swift_release();
        if ((isEscapingClosureAtFileLocation & 1) == 0) {
          goto LABEL_31;
        }
        __break(1u);
LABEL_34:
        swift_once(&qword_1001D0520, sub_1000344B0);
LABEL_23:
        uint64_t v49 = sub_100010ED4();
        sub_1000093D0(v49, (uint64_t)qword_1001EDC30);
        unint64_t v50 = sub_10004ED90();
        unint64_t v52 = sub_100047278(v50, v51);
        if (sub_100047154(v52))
        {
          char v53 = (uint8_t *)sub_100009B20(2LL);
          *(_WORD *)char v53 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)isEscapingClosureAtFileLocation,  (os_log_type_t)v0,  "task completed with nil url",  v53,  2u);
          sub_100010C34((uint64_t)v53);
          sub_10007725C();

          sub_100077064();
        }

        else
        {

          sub_100077064();
          sub_10007725C();
        }

        goto LABEL_31;
      }
    }

    sub_100019C1C(v14, &qword_1001D5ED0);
    if (qword_1001D0520 == -1) {
      goto LABEL_23;
    }
    goto LABEL_34;
  }

  result.value._object = v4;
  result.value._uint64_t countAndFlagsBits = (uint64_t)v3;
  return result;
}

      __break(1u);
      return result;
    }

    __break(1u);
    goto LABEL_10;
  }

  return result;
}

  __break(1u);
}

  __break(1u);
}

  sub_10002716C();
}

unint64_t sub_100059728(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v24, *(void *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v24, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        Swift::Int v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v2 >= v14)
          {
LABEL_15:
            uint64_t v17 = *(void *)(v3 + 48);
            unint64_t v18 = (_OWORD *)(v17 + 16 * v2);
            uint64_t v19 = (_OWORD *)(v17 + 16 * v6);
            BOOL v20 = v2 != v6 || v18 >= v19 + 1;
            int64_t v2 = v6;
            if (v20)
            {
              *unint64_t v18 = *v19;
              int64_t v2 = v6;
            }
          }
        }

        else if (v14 >= v9 || v2 >= v14)
        {
          goto LABEL_15;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v21 = *(void *)(v3 + 16);
  BOOL v22 = __OFSUB__(v21, 1LL);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + sub_10000BDD4(v0 + 16) = v23;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

uint64_t sub_1000598E0(int64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v35 = *(void *)(v3 - 8);
  uint64_t result = __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  uint64_t v8 = *v1 + 56;
  uint64_t v9 = -1LL << *(_BYTE *)(*v1 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v32 = v1;
    uint64_t v11 = ~v9;
    swift_retain(v7);
    uint64_t v12 = _HashTable.previousHole(before:)(a1, v8, v11);
    uint64_t v34 = v8;
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v13 = (v12 + 1) & v11;
      uint64_t v14 = *(void *)(v35 + 72);
      uint64_t v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      while (1)
      {
        int64_t v15 = v14 * v10;
        v33(v6, *(void *)(v7 + 48) + v14 * v10, v3);
        uint64_t v16 = *(void *)(v7 + 40);
        sub_100059F08(&qword_1001D1120, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v3, v17);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v3);
        unint64_t v19 = v18 & v11;
        if (a1 >= (uint64_t)v13)
        {
        }

        else if (v19 < v13 && a1 < (uint64_t)v19)
        {
          goto LABEL_24;
        }

        uint64_t v22 = *(void *)(v7 + 48);
        int64_t v23 = v14 * a1;
        unint64_t v24 = v22 + v14 * a1;
        uint64_t v25 = v22 + v15;
        unint64_t v26 = v22 + v15 + v14;
        if (v14 * a1 < v15 || v24 >= v26) {
          break;
        }
        a1 = v10;
        if (v23 != v15)
        {
          swift_arrayInitWithTakeBackToFront(v24, v25, 1LL, v3);
          goto LABEL_23;
        }

uint64_t sub_100059B54(void *a1)
{
  id v1 = [a1 replayHeaderItems];
  if (!v1) {
    return 0LL;
  }
  int64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);

  return v3;
}

uint64_t sub_100059BB4(void *a1)
{
  id v1 = [a1 localContextualSuggestions];
  if (!v1) {
    return 0LL;
  }
  int64_t v2 = v1;
  uint64_t v3 = sub_100009788(0LL, (unint64_t *)&qword_1001D5470, &OBJC_CLASS___SFSearchSuggestion_ptr);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

uint64_t sub_100059C20(void *a1)
{
  id v2 = [a1 duplicateSuggestions];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = sub_100009788(0LL, (unint64_t *)&qword_1001D5470, &OBJC_CLASS___SFSearchSuggestion_ptr);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

uint64_t sub_100059C94(void *a1)
{
  id v1 = [a1 skuUploadWhitelist];
  if (!v1) {
    return 0LL;
  }
  id v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String);

  return v3;
}

void sub_100059CE8(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = sub_100009788(0LL, &qword_1001D3170, &OBJC_CLASS___NSNumber_ptr);
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v3,  &type metadata for String,  v4,  &protocol witness table for String);
  }

  sub_100009A90();
}

uint64_t sub_100059D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000569B8(a1, a2, a3, *(void *)(v3 + 16));
}

unint64_t sub_100059D64()
{
  unint64_t result = qword_1001D3D60;
  if (!qword_1001D3D60)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015ECA0, &unk_1001B3238);
    atomic_store(result, (unint64_t *)&qword_1001D3D60);
  }

  return result;
}

void sub_100059DA0(unint64_t *a1, uint64_t *a2)
{
  if (!*a1)
  {
    uint64_t v3 = sub_1000094A0(a2);
    atomic_store(sub_100009C10(v3), a1);
  }

  sub_100009A90();
}

unint64_t sub_100059DD4()
{
  unint64_t result = qword_1001D3D90;
  if (!qword_1001D3D90)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_1001D3D90);
  }

  return result;
}

unint64_t sub_100059E10()
{
  unint64_t result = qword_1001D3DA0;
  if (!qword_1001D3DA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100163EDC, &type metadata for ParsecURLRequestBuilder.URLError);
    atomic_store(result, (unint64_t *)&qword_1001D3DA0);
  }

  return result;
}

unint64_t sub_100059E4C()
{
  unint64_t result = qword_1001D3DB0;
  if (!qword_1001D3DB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015FD9C, &type metadata for PARNetworkRequestFactory.NetworkRequestError);
    atomic_store(result, (unint64_t *)&qword_1001D3DB0);
  }

  return result;
}

uint64_t sub_100059E88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PegasusContext(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_100059ECC()
{
  uint64_t v3 = sub_10000941C(v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(v0, v1, v3);
  sub_100009A90();
}

void sub_100059F08(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v3 = a2(255LL);
    atomic_store(sub_100009C10(v3), a1);
  }

  sub_100009A90();
}

uint64_t storeEnumTagSinglePayload for PARNetworkRequestFactory.NetworkRequestError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100059F88 + 4 * byte_10015FB19[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100059FBC + 4 * byte_10015FB14[v4]))();
}

uint64_t sub_100059FBC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100059FC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100059FCCLL);
  }
  return result;
}

uint64_t sub_100059FD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100059FE0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100059FE4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100059FEC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PARNetworkRequestFactory.NetworkRequestError()
{
  return &type metadata for PARNetworkRequestFactory.NetworkRequestError;
}

unint64_t sub_10005A00C()
{
  unint64_t result = qword_1001D3DD8;
  if (!qword_1001D3DD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015FD74, &type metadata for PARNetworkRequestFactory.NetworkRequestError);
    atomic_store(result, (unint64_t *)&qword_1001D3DD8);
  }

  return result;
}

uint64_t sub_10005A048(uint64_t a1)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0LL, 0xE000000000000000LL, 0LL);
}

uint64_t sub_10005A05C(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0LL, 0xE000000000000000LL, 0LL);
}

uint64_t sub_10005A06C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
}

uint64_t sub_10005A074(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

  ;
}

void sub_10005A098(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10005A0A8()
{
  return v0;
}

  ;
}

uint64_t sub_10005A0C4(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
  return swift_willThrow();
}

uint64_t sub_10005A0D4(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_10005A0E4(uint64_t a1, uint64_t a2)
{
  return sub_1000DA3E0(a1, a2, v3, v2);
}

void sub_10005A0F4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10005A104()
{
  return type metadata accessor for URL(0LL);
}

void sub_10005A120()
{
}

uint64_t sub_10005A12C(uint64_t a1, uint64_t a2)
{
  return sub_1000DA3E0(v2, v3, a1, a2);
}

uint64_t sub_10005A148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100010708(a1, a2, a3);
}

uint64_t sub_10005A15C()
{
  return v0;
}

uint64_t sub_10005A168()
{
  return BidirectionalCollection<>.joined(separator:)(58LL, 0xE100000000000000LL, v1, v0);
}

  ;
}

uint64_t sub_10005A18C()
{
  return type metadata accessor for URL(0LL);
}

uint64_t sub_10005A194()
{
  return 0LL;
}

uint64_t sub_10005A1A4()
{
  return type metadata accessor for PegasusContext(0LL);
}

uint64_t sub_10005A1B4()
{
  return type metadata accessor for PegasusContext(0LL);
}

uint64_t sub_10005A1BC()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_10005A1C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10005A1CC()
{
  return v0;
}

  ;
}

uint64_t sub_10005A204()
{
  return type metadata accessor for ParsecURLRequestBuilder(0LL);
}

uint64_t sub_10005A20C()
{
  return v0;
}

  ;
}

uint64_t sub_10005A244(uint64_t a1)
{
  return v2(v4, *(void *)(a1 + 48) + v1 * v5, v3);
}

void sub_10005A264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10005A26C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_10005A274@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

  ;
}

void sub_10005A28C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10005A2AC()
{
  *(void *)(v2 - 88) = *v1;
  *uint64_t v1 = 0x8000000000000000LL;
  return v0;
}

void sub_10005A2D0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_10005A2DC()
{
  return v0;
}

uint64_t sub_10005A2E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, *(void *)(v5 - 96), v4, a4);
}

  ;
}

uint64_t sub_10005A304()
{
  return v2(*(void *)(v3 - 120), *(void *)(**(void **)(v3 - 128) + 48LL) + v1, v0);
}

uint64_t sub_10005A31C(uint64_t a1, SEL *a2)
{
  return sub_10001085C(v2, a2);
}

uint64_t sub_10005A324()
{
  return v0(v2, *(void *)(v3 - 96), v1);
}

uint64_t sub_10005A33C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 104) + 8LL))(v1, v0);
}

BOOL sub_10005A354@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

  ;
}

void sub_10005A378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

  ;
}

  ;
}

uint64_t sub_10005A3B0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_10005A3B8()
{
  return v0;
}

uint64_t sub_10005A3C4()
{
  return type metadata accessor for PegasusClientName(0LL);
}

uint64_t sub_10005A3CC()
{
  return type metadata accessor for SessionTokens(0LL);
}

uint64_t sub_10005A3D4()
{
  return BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v0, v1);
}

void sub_10005A3E8(uint64_t a1)
{
}

  ;
}

uint64_t sub_10005A3FC()
{
  return sub_100009654(v0, 1LL, 1LL, v1);
}

void sub_10005A410(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_10005A41C()
{
}

  ;
}

uint64_t sub_10005A444()
{
  *(void *)(v4 - 96) = v1;
  return dispatch thunk of Hashable._rawHashValue(seed:)(v0, v2, v3);
}

uint64_t sub_10005A458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.contains<A>(_:)(a1, a2, a3, v3, v3);
}

uint64_t sub_10005A464()
{
  return v0;
}

void sub_10005A470(uint64_t a1)
{
}

uint64_t sub_10005A478(uint64_t a1, SEL *a2)
{
  return sub_10001085C(v2, a2);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

void sub_10005A50C(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 200) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_10005A528()
{
  return 0LL;
}

uint64_t sub_10005A544()
{
  return v0;
}

void sub_10005A550(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_10005A564(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_10005A56C()
{
  return v0;
}

uint64_t sub_10005A578()
{
  return v0;
}

uint64_t sub_10005A584()
{
  return sub_100009654(v1, 0LL, 1LL, v0);
}

  ;
}

void sub_10005A5A4(uint64_t a1)
{
}

uint64_t sub_10005A5AC()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10005A5B4()
{
  return URLRequest.timeoutInterval.setter();
}

uint64_t sub_10005A5BC()
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(v1 - 160) + 8LL))(*(void *)(v1 - 168), v0);
}

void sub_10005A5CC(uint64_t a1@<X8>)
{
  *(void *)(v4 - 128) = v3;
  *(void *)(v4 - 120) = v1;
  *(void *)(v4 - 112) = ~a1;
  *(void *)(v4 - 104) = v2;
}

id sub_10005A5E4()
{
  return objc_msgSend(v1, *(SEL *)(v2 + 1400), v0);
}

uint64_t sub_10005A5F4()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 120) + 8LL))( *(void *)(v0 - 232),  *(void *)(v0 - 112));
}

uint64_t sub_10005A604(uint64_t a1, uint64_t (*a2)(void))
{
  *(void *)(v2 - 104) = a2;
  return a2(0LL);
}

uint64_t sub_10005A614(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_10005A61C()
{
  return swift_unknownObjectWeakLoadStrong(v0 + 16);
}

uint64_t sub_10005A624()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10005A62C()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

uint64_t sub_10005A644()
{
  return v0;
}

  ;
}

uint64_t sub_10005A660()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 176) + 8LL))( *(void *)(v0 - 184),  *(void *)(v0 - 96));
}

  ;
}

  ;
}

uint64_t sub_10005A68C()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 96, v0, v1);
}

uint64_t sub_10005A69C()
{
  uint64_t v2 = *v0;
  uint64_t *v0 = *(void *)(v1 - 88);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10005A6AC(uint64_t a1, SEL *a2)
{
  return sub_10001085C(v2, a2);
}

id sub_10005A6B4(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_10005A6BC()
{
  return 0LL;
}

uint64_t sub_10005A6D0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

void sub_10005A6D8(uint64_t a1, uint64_t *a2)
{
}

id sub_10005A6E0(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_10005A6E8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000D9BA4(a1);
}

uint64_t sub_10005A6F0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_10005A6F8()
{
  return *(void *)(v0 + 880);
}

uint64_t sub_10005A70C(uint64_t a1)
{
  return String.init(format:_:)(a1, 0xE500000000000000LL);
}

void sub_10005A718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10005A720(uint64_t a1)
{
  return swift_dynamicCastObjCClass(v1, a1);
}

uint64_t sub_10005A72C(uint64_t a1)
{
  return swift_allocObject(a1, 72LL, 7LL);
}

uint64_t sub_10005A738(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

BOOL sub_10005A740@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void sub_10005A754(uint64_t a1, uint64_t a2)
{
}

float sub_10005A760(double a1)
{
  float v1 = a1;
  sub_100053FD0(v1);
  return result;
}

id sub_10005A76C()
{
  return [v0 *(SEL *)(v1 + 4032)];
}

uint64_t sub_10005A778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000DA3E0(a1, a2, a3, v3);
}

  ;
}

uint64_t sub_10005A790()
{
  return v0;
}

NSString sub_10005A79C()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10005A7A8()
{
  return v0;
}

uint64_t sub_10005A7B4()
{
  return v0;
}

  ;
}

void sub_10005A7D4(uint64_t *a1@<X8>)
{
}

  ;
}

  ;
}

uint64_t sub_10005A808()
{
  return v1(*(void *)(v2 - 96), v0);
}

void sub_10005A814()
{
}

  ;
}

void sub_10005A830()
{
}

void sub_10005A83C()
{
}

void sub_10005A848(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_10005A850()
{
  return sub_10001085C(v0, v1);
}

unint64_t sub_10005A85C()
{
  return sub_10000EC64(v0, v1);
}

uint64_t sub_10005A868()
{
  return v0;
}

uint64_t sub_10005A874()
{
  return v0;
}

  ;
}

  ;
}

  ;
}

  ;
}

void sub_10005A8B8()
{
}

void sub_10005A8C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 96) = (char *)&a9 - v9;
}

void sub_10005A8D4(uint64_t a1)
{
}

uint64_t sub_10005A8E0()
{
  return swift_release(v0);
}

void sub_10005A8E8()
{
}

  ;
}

uint64_t sub_10005A904()
{
  return sub_100010A30(v1, v0);
}

uint64_t sub_10005A910()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t variable initialization expression of ByteBuffer.readerIndex()
{
  return 0LL;
}

uint64_t sub_10005A920@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (qword_1001D05A8 != -1) {
    swift_once(&qword_1001D05A8, sub_10005AE80);
  }
  uint64_t v9 = unk_1001D3E20;
  swift_retain(qword_1001D3E28 & 0x1FFFFFFFFFFFFFFFLL);
  swift_bridgeObjectRetain(v9);
  AvroArray.init(schema:)();
  uint64_t v36 = v10;
  uint64_t v37 = v11;
  uint64_t v38 = v12;
  uint64_t v39 = v13;
  uint64_t v14 = swift_bridgeObjectRetain(a3);
  sub_1000DBB4C( v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21,  v35.schema.type._countAndFlagsBits,  (uint64_t)v35.schema.type._object,  v35.schema.name._countAndFlagsBits,  (uint64_t)v35.schema.name._object,  v35.schema.namespace.value._countAndFlagsBits,  (uint64_t)v35.schema.namespace.value._object,  (uint64_t)v35.schema.fields._rawValue,  (uint64_t)v35.fields._rawValue,  v36,  v37,  v38,  v39,  v40[0],  v40[1],  v40[2],  v40[3],  v40[4],  v40[5]);
  uint64_t v23 = v22;
  sub_100010C70();
  v35.schema.type._uint64_t countAndFlagsBits = v23;
  swift_retain(v23);
  sub_10005B56C(&v35.schema.type._countAndFlagsBits);
  if (v4)
  {
    uint64_t result = swift_release();
    __break(1u);
  }

  else
  {
    sub_100010C70();
    swift_release();
    uint64_t countAndFlagsBits = v35.schema.type._countAndFlagsBits;
    uint64_t v25 = *(void *)(v35.schema.type._countAndFlagsBits + 16);
    if (v25)
    {
      uint64_t v43 = a1;
      uint64_t v26 = a4;
      uint64_t v27 = *(void *)(type metadata accessor for Trialpb_TrialExperiment(0LL) - 8);
      unint64_t v28 = countAndFlagsBits
          + ((*(unsigned __int8 *)(v27 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
      uint64_t v29 = *(void *)(v27 + 72);
      swift_retain(countAndFlagsBits);
      do
      {
        sub_10005B264();
        v28 += v29;
        --v25;
      }

      while (v25);
      sub_10005CC80();
      a4 = v26;
      a1 = v43;
    }

    else
    {
      swift_release();
    }

    if (qword_1001D05A0 != -1) {
      swift_once(&qword_1001D05A0, sub_10005AD3C);
    }
    SwiftAvro::AvroRecordSchema schema = *(SwiftAvro::AvroRecordSchema *)byte_1001D3DE0;
    sub_10005B5EC(&schema);
    AvroRecord.init(schema:)(&v35, &schema);
    static AvroValue.string(_:)(a1, a2, (uint64_t)v40);
    sub_100009B3C();
    AvroRecord.set(_:forField:)((uint64_t)v40, 0x6553686372616573LL, 0xEF64496E6F697373LL);
    sub_10005B0F4((uint64_t)v40);
    static AvroValue.array(_:)(v36, v37, v38, v39, (uint64_t)v41);
    AvroRecord.set(_:forField:)((uint64_t)v41, 0xD000000000000011LL, 0x800000010016FB20LL);
    sub_10005B0F4((uint64_t)v41);
    sub_1000145F0();
    sub_1000110E0();
    uint64_t result = sub_10005CC8C();
    uint64_t v31 = v35.schema.name._countAndFlagsBits;
    object = v35.schema.name._object;
    Swift::String_optional v34 = v35.schema.namespace;
    __int128 v33 = *(_OWORD *)&v35.schema.fields._rawValue;
    *(Swift::String *)a4 = v35.schema.type;
    *(void *)(a4 + sub_10000BDD4(v0 + 16) = v31;
    *(void *)(a4 + sub_10000BDD4(v0 + 24) = object;
    *(Swift::String_optional *)(a4 + swift_unknownObjectWeakDestroy(v0 + 32) = v34;
    *(_OWORD *)(a4 + 48) = v33;
  }

  return result;
}

uint64_t sub_10005AC64()
{
  if (qword_1001D05B8 != -1) {
    swift_once(&qword_1001D05B8, sub_10005B0CC);
  }
  ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)qword_1001D3E68);
  if (qword_1001D05C0 != -1) {
    swift_once(&qword_1001D05C0, sub_10005B0E0);
  }
  ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)qword_1001D3E70);
  __int128 v1 = v0[1];
  v5[0] = *v0;
  v5[1] = v1;
  __int128 v2 = v0[3];
  void v5[2] = v0[2];
  void v5[3] = v2;
  static AvroValue.record(_:)(v5, (uint64_t)v4);
  ByteBuffer.writeAvroValue(_:)(v4);
  sub_10005B0F4((uint64_t)v4);
  return 0LL;
}

uint64_t sub_10005AD3C()
{
  uint64_t v0 = sub_10000941C(&qword_1001D3E78);
  uint64_t v1 = swift_allocObject(v0, 80LL, 7LL);
  *(_OWORD *)(v1 + sub_10000BDD4(v0 + 16) = xmmword_10015D580;
  uint64_t v2 = *AvroSchema.string.unsafeMutableAddressor();
  swift_retain(v2 & 0x1FFFFFFFFFFFFFFFLL);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 32) = AvroRecordSchema.Field.init(name:type:optional:)( 0x6553686372616573LL,  0xEF64496E6F697373LL,  v2);
  *(void *)(v1 + 40) = v3;
  *(void *)(v1 + 48) = v4;
  if (qword_1001D05A8 != -1) {
    swift_once(&qword_1001D05A8, sub_10005AE80);
  }
  static AvroSchema.array(schema:)();
  uint64_t result = AvroRecordSchema.Field.init(name:type:optional:)(0xD000000000000011LL, 0x800000010016FB20LL, v5);
  *(void *)(v1 + sub_10000BDD4(v0 + 56) = result;
  *(void *)(v1 + 64) = v7;
  *(void *)(v1 + 72) = v8;
  *(void *)&xmmword_1001D3DE0 = 0x64726F636572LL;
  *((void *)&xmmword_1001D3DE0 + 1) = 0xE600000000000000LL;
  qword_1001D3DF0 = 0xD000000000000013LL;
  unk_1001D3DF8 = 0x800000010015FDE0LL;
  *(void *)&xmmword_1001D3E00 = 0xD000000000000032LL;
  *((void *)&xmmword_1001D3E00 + 1) = 0x800000010016FB40LL;
  qword_1001D3E10 = v1;
  return result;
}

void sub_10005AE80()
{
  if (qword_1001D05B0 != -1) {
    swift_once(&qword_1001D05B0, sub_10005AF08);
  }
  v1[0] = xmmword_1001D3E30;
  v1[1] = *(_OWORD *)&qword_1001D3E40;
  v1[2] = xmmword_1001D3E50;
  uint64_t v2 = qword_1001D3E60;
  static AvroSchema.record(schema:)((uint64_t)v1);
  qword_1001D3E18 = 0x7961727261LL;
  unk_1001D3E20 = 0xE500000000000000LL;
  qword_1001D3E28 = v0;
}

uint64_t sub_10005AF08()
{
  uint64_t v0 = sub_10000941C(&qword_1001D3E78);
  uint64_t v1 = swift_allocObject(v0, 152LL, 7LL);
  *(_OWORD *)(v1 + sub_10000BDD4(v0 + 16) = xmmword_10015E970;
  uint64_t v2 = AvroSchema.string.unsafeMutableAddressor();
  uint64_t v3 = *v2;
  swift_retain(*v2 & 0x1FFFFFFFFFFFFFFFLL);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 32) = AvroRecordSchema.Field.init(name:type:optional:)( 0xD000000000000013LL,  0x800000010016FB80LL,  v3);
  *(void *)(v1 + 40) = v4;
  *(void *)(v1 + 48) = v5;
  uint64_t v6 = *v2;
  swift_retain(*v2 & 0x1FFFFFFFFFFFFFFFLL);
  *(void *)(v1 + sub_10000BDD4(v0 + 56) = AvroRecordSchema.Field.init(name:type:optional:)( 0x656D697265707865LL,  0xEC0000006449746ELL,  v6);
  *(void *)(v1 + 64) = v7;
  *(void *)(v1 + 72) = v8;
  uint64_t v9 = *v2;
  swift_retain(v9 & 0x1FFFFFFFFFFFFFFFLL);
  *(void *)(v1 + 80) = AvroRecordSchema.Field.init(name:type:optional:)( 0x6E656D7461657274LL,  0xEB00000000644974LL,  v9);
  *(void *)(v1 + 88) = v10;
  *(void *)(v1 + 96) = v11;
  uint64_t v12 = AvroSchema.int.unsafeMutableAddressor();
  uint64_t v13 = *v12;
  swift_retain(*v12 & 0x1FFFFFFFFFFFFFFFLL);
  *(void *)(v1 + 104) = AvroRecordSchema.Field.init(name:type:optional:)( 0x656D796F6C706564LL,  0xEC0000006449746ELL,  v13);
  *(void *)(v1 + 112) = v14;
  *(void *)(v1 + 120) = v15;
  uint64_t v16 = *v12;
  swift_retain(v16 & 0x1FFFFFFFFFFFFFFFLL);
  uint64_t result = AvroRecordSchema.Field.init(name:type:optional:)(0xD000000000000014LL, 0x800000010016FBA0LL, v16);
  *(void *)(v1 + 128) = result;
  *(void *)(v1 + 136) = v18;
  *(void *)(v1 + 144) = v19;
  *(void *)&xmmword_1001D3E30 = 0x64726F636572LL;
  *((void *)&xmmword_1001D3E30 + 1) = 0xE600000000000000LL;
  strcpy((char *)&qword_1001D3E40, "ExperimentInfo");
  unk_1001D3E4F = -18;
  xmmword_1001D3E50 = 0uLL;
  qword_1001D3E60 = v1;
  return result;
}

void sub_10005B0CC()
{
  qword_1001D3E68 = (uint64_t)&off_1001B0518;
}

void sub_10005B0E0()
{
  qword_1001D3E70 = (uint64_t)&off_1001B0540;
}

uint64_t sub_10005B0F4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10005B13C( uint64_t result, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  switch(a9)
  {
    case 0:
      uint64_t result = sub_10005B218(result, a2, a3, a4);
      break;
    case 1:
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_3;
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 4:
LABEL_3:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_10005B218(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 6) {
    return sub_10005B23C(result, a2);
  }
  if (a4 == 5) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10005B23C(uint64_t result, unint64_t a2)
{
  uint64_t v2 = (a2 >> 60) & 3;
  if ((_DWORD)v2 == 2 || (_DWORD)v2 == 1) {
    return sub_100010A30(result, a2 & 0xCFFFFFFFFFFFFFFFLL);
  }
  if (!(_DWORD)v2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10005B264()
{
  if (qword_1001D05B0 != -1) {
    swift_once(&qword_1001D05B0, sub_10005AF08);
  }
  SwiftAvro::AvroRecordSchema schema = *(SwiftAvro::AvroRecordSchema *)byte_1001D3E30;
  sub_10005B5EC(&schema);
  AvroRecord.init(schema:)(&v14, &schema);
  uint64_t v2 = Trialpb_TrialExperiment.experimentNamespace.getter(v1);
  static AvroValue.string(_:)(v2, v3, (uint64_t)v15);
  swift_bridgeObjectRelease();
  AvroRecord.set(_:forField:)((uint64_t)v15, 0xD000000000000013LL, 0x800000010016FB80LL);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = v15;
    return sub_10005B0F4((uint64_t)v13);
  }

  uint64_t v4 = sub_10005B0F4((uint64_t)v15);
  uint64_t v5 = Trialpb_TrialExperiment.experimentID.getter(v4);
  static AvroValue.string(_:)(v5, v6, (uint64_t)v16);
  swift_bridgeObjectRelease();
  AvroRecord.set(_:forField:)((uint64_t)v16, 0x656D697265707865LL, 0xEC0000006449746ELL);
  uint64_t v7 = sub_10005B0F4((uint64_t)v16);
  uint64_t v8 = Trialpb_TrialExperiment.treatmentID.getter(v7);
  static AvroValue.string(_:)(v8, v9, (uint64_t)v17);
  swift_bridgeObjectRelease();
  AvroRecord.set(_:forField:)((uint64_t)v17, 0x6E656D7461657274LL, 0xEB00000000644974LL);
  uint64_t v10 = sub_10005B0F4((uint64_t)v17);
  uint64_t result = Trialpb_TrialExperiment.deploymentID.getter(v10);
  if (result < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_11;
  }

  if (result > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  AvroValue.init(_:)(v18, result);
  AvroRecord.set(_:forField:)((uint64_t)v18, 0x656D796F6C706564LL, 0xEC0000006449746ELL);
  uint64_t v12 = sub_10005B0F4((uint64_t)v18);
  uint64_t result = Trialpb_TrialExperiment.compatibilityVersion.getter(v12);
  if ((result & 0x80000000) == 0)
  {
    AvroValue.init(_:)(v19, result);
    AvroRecord.set(_:forField:)((uint64_t)v19, 0xD000000000000014LL, 0x800000010016FBA0LL);
    sub_10005B0F4((uint64_t)v19);
    SwiftAvro::AvroRecord v21 = v14;
    static AvroValue.record(_:)((__int128 *)&v21.schema.type._countAndFlagsBits, (uint64_t)v20);
    sub_10005B640(&v21);
    AvroArray.append(_:)(v20);
    uint64_t v13 = v20;
    return sub_10005B0F4((uint64_t)v13);
  }

void sub_10005B56C(uint64_t *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for Trialpb_TrialExperiment(0LL) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_1000DE100(v3, v4, v5);
    uint64_t v3 = v6;
  }

  uint64_t v7 = *(void *)(v3 + 16);
  v8[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v8[1] = v7;
  sub_10005B6A4(v8);
  *a1 = v3;
}

void *sub_10005B5EC(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[6];
  swift_bridgeObjectRetain(a1[5]);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

void *sub_10005B640(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  return a1;
}

void sub_10005B6A4(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Trialpb_TrialExperiment(0LL);
  uint64_t v183 = *(void **)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v167 = (char *)&v158 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v179 = (char *)&v158 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v158 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  SwiftAvro::AvroRecord v14 = (char *)&v158 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v171 = (char *)&v158 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v170 = (char *)&v158 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v164 = (char *)&v158 - v20;
  __chkstk_darwin(v19);
  uint64_t v163 = (char *)&v158 - v21;
  uint64_t v182 = a1;
  Swift::Int v22 = a1[1];
  Swift::Int v23 = _minimumMergeRunLength(_:)(v22);
  if (v23 >= v22)
  {
    if ((v22 & 0x8000000000000000LL) == 0)
    {
      if (v22) {
        sub_10005C208(0LL, v22, 1LL, v182);
      }
      return;
    }

    goto LABEL_157;
  }

  Swift::Int v24 = v23;
  uint64_t v160 = sub_1000AF8EC(v22 / 2);
  uint64_t v161 = v22;
  unint64_t v169 = v25;
  if (v22 <= 0)
  {
LABEL_121:
    uint64_t v27 = (char *)_swiftEmptyArrayStorage;
    unint64_t v95 = _swiftEmptyArrayStorage[2];
LABEL_122:
    if (v95 < 2)
    {
LABEL_133:
      swift_bridgeObjectRelease();
      if (v161 >= -1) {
        goto LABEL_134;
      }
      goto LABEL_161;
    }

    uint64_t v148 = *v182;
    unint64_t v149 = v169;
    while (1)
    {
      unint64_t v150 = v95 - 2;
      if (v95 < 2) {
        break;
      }
      if (!v148) {
        goto LABEL_165;
      }
      uint64_t v151 = (uint64_t)v27;
      uint64_t v152 = v27 + 32;
      uint64_t v153 = *(void *)&v27[16 * v150 + 32];
      uint64_t v154 = *(void *)&v27[16 * v95 + 24];
      sub_10005C4DC(v148 + v183[9] * v153, v148 + v183[9] * v152[2 * v95 - 2], v148 + v183[9] * v154, v149);
      if (v2) {
        goto LABEL_119;
      }
      if (v154 < v153) {
        goto LABEL_152;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v151) & 1) == 0)
      {
        sub_1000DD478(v151);
        uint64_t v151 = v157;
      }

      if (v150 >= *(void *)(v151 + 16)) {
        goto LABEL_153;
      }
      uint64_t v155 = (void *)(v151 + 32 + 16 * v150);
      *uint64_t v155 = v153;
      v155[1] = v154;
      unint64_t v156 = *(void *)(v151 + 16);
      if (v95 > v156) {
        goto LABEL_154;
      }
      uint64_t v27 = (char *)v151;
      memmove((void *)(v151 + 32 + 16 * (v95 - 1)), (const void *)(v151 + 32 + 16 * v95), 16 * (v156 - v95));
      *(void *)(v151 + sub_10000BDD4(v0 + 16) = v156 - 1;
      unint64_t v95 = v156 - 1;
      if (v156 <= 2) {
        goto LABEL_133;
      }
    }

LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
    return;
  }

  Swift::Int v159 = v24;
  uint64_t v174 = v11;
  uint64_t v177 = v4;
  uint64_t v26 = 0LL;
  uint64_t v27 = (char *)_swiftEmptyArrayStorage;
  uint64_t v28 = v22;
  unint64_t v165 = v14;
  while (1)
  {
    uint64_t v29 = (uint64_t)v26;
    BOOL v30 = v26 + 1;
    uint64_t v168 = v26;
    if ((uint64_t)(v26 + 1) >= v28)
    {
      uint64_t v42 = (uint64_t)(v26 + 1);
      uint64_t v43 = v177;
    }

    else
    {
      uint64_t v180 = v28;
      uint64_t v162 = v27;
      uint64_t v31 = *v182;
      uint64_t v32 = v183[9];
      __int128 v33 = (void (*)(char *, uint64_t, uint64_t))v183[2];
      uint64_t v34 = v177;
      v33(v163, *v182 + v32 * (void)v30, v177);
      uint64_t v175 = v31;
      uint64_t v181 = v32;
      uint64_t v35 = ((uint64_t (*)(char *, uint64_t, uint64_t))v33)(v164, v31 + v32 * v29, v34);
      uint64_t v36 = Trialpb_TrialExperiment.experimentNamespace.getter(v35);
      uint64_t v38 = v37;
      uint64_t v39 = Trialpb_TrialExperiment.experimentNamespace.getter(v36);
      if (v36 == v39 && v38 == v40) {
        LODWORD(v178) = 0;
      }
      else {
        LODWORD(v178) = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v39, v40, 1LL);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int64_t v44 = (void (*)(char *, uint64_t))v183[1];
      uint64_t v43 = v177;
      v44(v164, v177);
      v44(v163, v43);
      uint64_t v29 = (uint64_t)v168;
      uint64_t v42 = (uint64_t)(v168 + 2);
      if ((uint64_t)(v168 + 2) < v180)
      {
        uint64_t v172 = v2;
        uint64_t v176 = v181 * (void)v30;
        uint64_t v45 = v175;
        uint64_t v46 = v181 * v42;
        while (1)
        {
          uint64_t v47 = v42;
          v33(v170, v45 + v46, v43);
          uint64_t v48 = ((uint64_t (*)(char *, uint64_t, uint64_t))v33)(v171, v45 + v176, v43);
          uint64_t v49 = Trialpb_TrialExperiment.experimentNamespace.getter(v48);
          uint64_t v51 = v50;
          uint64_t v52 = Trialpb_TrialExperiment.experimentNamespace.getter(v49);
          BOOL v54 = v49 == v52 && v51 == v53;
          int v55 = v54 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)(v49, v51, v52, v53, 1LL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v43 = v177;
          v44(v171, v177);
          v44(v170, v43);
          ++v42;
          v45 += v181;
          if (v47 + 1 >= v180)
          {
            uint64_t v28 = v180;
            uint64_t v42 = v180;
            uint64_t v2 = v172;
            SwiftAvro::AvroRecord v14 = v165;
            uint64_t v29 = (uint64_t)v168;
            goto LABEL_25;
          }
        }

        uint64_t v2 = v172;
        SwiftAvro::AvroRecord v14 = v165;
        uint64_t v29 = (uint64_t)v168;
      }

      uint64_t v28 = v180;
LABEL_25:
      uint64_t v27 = v162;
      if ((v178 & 1) != 0)
      {
        if (v42 < v29) {
          goto LABEL_158;
        }
        if (v29 < v42)
        {
          uint64_t v172 = v2;
          uint64_t v56 = 0LL;
          uint64_t v57 = v181 * (v42 - 1);
          uint64_t v58 = v29;
          uint64_t v59 = v42 * v181;
          uint64_t v60 = v58;
          uint64_t v61 = v58 * v181;
          do
          {
            if (v60 != v42 + v56 - 1)
            {
              uint64_t v62 = v175;
              if (!v175) {
                goto LABEL_164;
              }
              unint64_t v63 = v175 + v61;
              uint64_t v176 = v175 + v57;
              uint64_t v43 = v177;
              int v178 = (char *)v183[4];
              ((void (*)(char *, uint64_t, uint64_t))v178)(v167, v175 + v61, v177);
              if (v61 < v57 || v63 >= v62 + v59)
              {
                uint64_t v65 = v62 + v61;
                uint64_t v66 = v176;
                swift_arrayInitWithTakeFrontToBack(v65, v176, 1LL, v43);
              }

              else
              {
                uint64_t v66 = v176;
                if (v61 != v57) {
                  swift_arrayInitWithTakeBackToFront(v63, v176, 1LL, v43);
                }
              }

              ((void (*)(uint64_t, char *, uint64_t))v178)(v66, v167, v43);
              SwiftAvro::AvroRecord v14 = v165;
            }

            ++v60;
            --v56;
            v57 -= v181;
            v59 -= v181;
            v61 += v181;
          }

          while (v60 < v42 + v56);
          uint64_t v27 = v162;
          uint64_t v2 = v172;
          uint64_t v29 = (uint64_t)v168;
          uint64_t v28 = v180;
        }
      }
    }

    if (v42 < v28)
    {
      if (__OFSUB__(v42, v29)) {
        goto LABEL_156;
      }
      if (v42 - v29 < v159)
      {
        if (__OFADD__(v29, v159)) {
          goto LABEL_159;
        }
        if (v29 + v159 >= v28) {
          uint64_t v67 = v28;
        }
        else {
          uint64_t v67 = v29 + v159;
        }
        if (v67 < v29) {
          goto LABEL_160;
        }
        if (v42 != v67)
        {
          uint64_t v162 = v27;
          uint64_t v68 = v183[9];
          double v69 = (uint64_t (*)(char *, uint64_t, uint64_t))v183[2];
          uint64_t v172 = v2;
          unint64_t v173 = v69;
          uint64_t v70 = v68 * (v42 - 1);
          uint64_t v175 = v68;
          uint64_t v181 = v42 * v68;
          uint64_t v166 = v67;
          do
          {
            uint64_t v71 = 0LL;
            int v178 = (char *)v42;
            uint64_t v176 = v70;
            while (1)
            {
              uint64_t v180 = v29;
              uint64_t v72 = *v182;
              uint64_t v73 = v173;
              v173(v14, v181 + v71 + *v182, v43);
              uint64_t v74 = v70 + v71 + v72;
              uint64_t v75 = v14;
              uint64_t v76 = v174;
              uint64_t v77 = v73(v174, v74, v43);
              uint64_t v78 = Trialpb_TrialExperiment.experimentNamespace.getter(v77);
              uint64_t v80 = v79;
              uint64_t v81 = Trialpb_TrialExperiment.experimentNamespace.getter(v78);
              if (v78 == v81 && v80 == v82) {
                break;
              }
              char v84 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, v80, v81, v82, 1LL);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v85 = (void (*)(char *, uint64_t))v183[1];
              v85(v76, v43);
              v85(v75, v43);
              SwiftAvro::AvroRecord v14 = v75;
              if ((v84 & 1) == 0) {
                goto LABEL_62;
              }
              uint64_t v86 = *v182;
              uint64_t v70 = v176;
              if (!*v182) {
                goto LABEL_162;
              }
              uint64_t v87 = v86 + v181 + v71;
              uint64_t v88 = (char *)(v86 + v176 + v71);
              uint64_t v89 = (void (*)(char *, uint64_t, uint64_t))v183[4];
              uint64_t v90 = v177;
              v89(v179, v87, v177);
              swift_arrayInitWithTakeFrontToBack(v87, v88, 1LL, v90);
              v89(v88, (uint64_t)v179, v90);
              v71 -= v175;
              uint64_t v29 = v180 + 1;
              unint64_t v91 = v178;
              uint64_t v43 = v90;
            }

            swift_bridgeObjectRelease_n(v80, 2LL);
            uint64_t v92 = (void (*)(char *, uint64_t))v183[1];
            v92(v76, v43);
            v92(v75, v43);
            SwiftAvro::AvroRecord v14 = v75;
LABEL_62:
            unint64_t v91 = v178;
            uint64_t v70 = v176;
LABEL_63:
            uint64_t v42 = (uint64_t)(v91 + 1);
            v70 += v175;
            v181 += v175;
            uint64_t v29 = (uint64_t)v168;
          }

          while (v42 != v166);
          uint64_t v42 = v166;
          uint64_t v2 = v172;
          uint64_t v27 = v162;
        }
      }
    }

    if (v42 < v29) {
      goto LABEL_155;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
    {
      sub_1000DD3BC(0, *((void *)v27 + 2) + 1LL, 1, v27);
      uint64_t v27 = v146;
    }

    unint64_t v94 = *((void *)v27 + 2);
    unint64_t v93 = *((void *)v27 + 3);
    unint64_t v95 = v94 + 1;
    uint64_t v172 = v2;
    int v178 = (char *)v42;
    if (v94 >= v93 >> 1)
    {
      sub_1000DD3BC(v93 > 1, v94 + 1, 1, v27);
      uint64_t v27 = v147;
    }

    *((void *)v27 + 2) = v95;
    char v96 = v27 + 32;
    uint64_t v97 = &v27[16 * v94 + 32];
    char v98 = v178;
    *(void *)uint64_t v97 = v29;
    *((void *)v97 + 1) = v98;
    if (v94) {
      break;
    }
    unint64_t v95 = 1LL;
LABEL_113:
    uint64_t v28 = v182[1];
    uint64_t v26 = v178;
    uint64_t v2 = v172;
  }

  while (1)
  {
    unint64_t v99 = v95 - 1;
    if (v95 >= 4)
    {
      uint64_t v104 = &v96[2 * v95];
      uint64_t v105 = *(v104 - 8);
      uint64_t v106 = *(v104 - 7);
      BOOL v110 = __OFSUB__(v106, v105);
      uint64_t v107 = v106 - v105;
      if (v110) {
        goto LABEL_140;
      }
      uint64_t v109 = *(v104 - 6);
      uint64_t v108 = *(v104 - 5);
      BOOL v110 = __OFSUB__(v108, v109);
      uint64_t v102 = v108 - v109;
      char v103 = v110;
      if (v110) {
        goto LABEL_141;
      }
      unint64_t v111 = v95 - 2;
      uint64_t v112 = &v96[2 * v95 - 4];
      uint64_t v114 = *v112;
      uint64_t v113 = v112[1];
      BOOL v110 = __OFSUB__(v113, v114);
      uint64_t v115 = v113 - v114;
      if (v110) {
        goto LABEL_142;
      }
      BOOL v110 = __OFADD__(v102, v115);
      uint64_t v116 = v102 + v115;
      if (v110) {
        goto LABEL_144;
      }
      if (v116 >= v107)
      {
        uint64_t v134 = &v96[2 * v99];
        uint64_t v136 = *v134;
        uint64_t v135 = v134[1];
        BOOL v110 = __OFSUB__(v135, v136);
        uint64_t v137 = v135 - v136;
        if (v110) {
          goto LABEL_150;
        }
        BOOL v127 = v102 < v137;
        goto LABEL_102;
      }
    }

    else
    {
      if (v95 != 3)
      {
        uint64_t v128 = *((void *)v27 + 4);
        uint64_t v129 = *((void *)v27 + 5);
        BOOL v110 = __OFSUB__(v129, v128);
        uint64_t v121 = v129 - v128;
        char v122 = v110;
        goto LABEL_96;
      }

      uint64_t v101 = *((void *)v27 + 4);
      uint64_t v100 = *((void *)v27 + 5);
      BOOL v110 = __OFSUB__(v100, v101);
      uint64_t v102 = v100 - v101;
      char v103 = v110;
    }

    if ((v103 & 1) != 0) {
      goto LABEL_143;
    }
    unint64_t v111 = v95 - 2;
    unint64_t v117 = &v96[2 * v95 - 4];
    uint64_t v119 = *v117;
    uint64_t v118 = v117[1];
    BOOL v120 = __OFSUB__(v118, v119);
    uint64_t v121 = v118 - v119;
    char v122 = v120;
    if (v120) {
      goto LABEL_145;
    }
    char v123 = &v96[2 * v99];
    uint64_t v125 = *v123;
    uint64_t v124 = v123[1];
    BOOL v110 = __OFSUB__(v124, v125);
    uint64_t v126 = v124 - v125;
    if (v110) {
      goto LABEL_147;
    }
    if (__OFADD__(v121, v126)) {
      goto LABEL_149;
    }
    if (v121 + v126 >= v102)
    {
      BOOL v127 = v102 < v126;
LABEL_102:
      if (v127) {
        unint64_t v99 = v111;
      }
      goto LABEL_104;
    }

    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
    return;
  }

  Swift::Int v159 = v24;
  uint64_t v174 = v11;
  uint64_t v177 = v4;
  uint64_t v26 = 0LL;
  uint64_t v27 = (char *)_swiftEmptyArrayStorage;
  uint64_t v28 = v22;
  unint64_t v165 = v14;
  while (1)
  {
    uint64_t v29 = (uint64_t)v26;
    BOOL v30 = v26 + 1;
    uint64_t v168 = v26;
    if ((uint64_t)(v26 + 1) >= v28)
    {
      uint64_t v42 = (uint64_t)(v26 + 1);
      uint64_t v43 = v177;
    }

    else
    {
      uint64_t v180 = v28;
      uint64_t v162 = v27;
      uint64_t v31 = *v182;
      uint64_t v32 = v183[9];
      __int128 v33 = (void (*)(char *, uint64_t, uint64_t))v183[2];
      uint64_t v34 = v177;
      v33(v163, *v182 + v32 * (void)v30, v177);
      uint64_t v175 = v31;
      uint64_t v181 = v32;
      uint64_t v35 = ((uint64_t (*)(char *, uint64_t, uint64_t))v33)(v164, v31 + v32 * v29, v34);
      uint64_t v36 = URLQueryItem.name.getter(v35);
      uint64_t v38 = v37;
      uint64_t v39 = URLQueryItem.name.getter(v36);
      if (v36 == v39 && v38 == v40) {
        LODWORD(v178) = 0;
      }
      else {
        LODWORD(v178) = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v39, v40, 1LL);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int64_t v44 = (void (*)(char *, uint64_t))v183[1];
      uint64_t v43 = v177;
      v44(v164, v177);
      v44(v163, v43);
      uint64_t v29 = (uint64_t)v168;
      uint64_t v42 = (uint64_t)(v168 + 2);
      if ((uint64_t)(v168 + 2) < v180)
      {
        uint64_t v172 = v2;
        uint64_t v176 = v181 * (void)v30;
        uint64_t v45 = v175;
        uint64_t v46 = v181 * v42;
        while (1)
        {
          uint64_t v47 = v42;
          v33(v170, v45 + v46, v43);
          uint64_t v48 = ((uint64_t (*)(char *, uint64_t, uint64_t))v33)(v171, v45 + v176, v43);
          uint64_t v49 = URLQueryItem.name.getter(v48);
          uint64_t v51 = v50;
          uint64_t v52 = URLQueryItem.name.getter(v49);
          BOOL v54 = v49 == v52 && v51 == v53;
          int v55 = v54 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)(v49, v51, v52, v53, 1LL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v43 = v177;
          v44(v171, v177);
          v44(v170, v43);
          ++v42;
          v45 += v181;
          if (v47 + 1 >= v180)
          {
            uint64_t v28 = v180;
            uint64_t v42 = v180;
            uint64_t v2 = v172;
            SwiftAvro::AvroRecord v14 = v165;
            uint64_t v29 = (uint64_t)v168;
            goto LABEL_25;
          }
        }

        uint64_t v2 = v172;
        SwiftAvro::AvroRecord v14 = v165;
        uint64_t v29 = (uint64_t)v168;
      }

      uint64_t v28 = v180;
LABEL_25:
      uint64_t v27 = v162;
      if ((v178 & 1) != 0)
      {
        if (v42 < v29) {
          goto LABEL_158;
        }
        if (v29 < v42)
        {
          uint64_t v172 = v2;
          uint64_t v56 = 0LL;
          uint64_t v57 = v181 * (v42 - 1);
          uint64_t v58 = v29;
          uint64_t v59 = v42 * v181;
          uint64_t v60 = v58;
          uint64_t v61 = v58 * v181;
          do
          {
            if (v60 != v42 + v56 - 1)
            {
              uint64_t v62 = v175;
              if (!v175) {
                goto LABEL_164;
              }
              unint64_t v63 = v175 + v61;
              uint64_t v176 = v175 + v57;
              uint64_t v43 = v177;
              int v178 = (char *)v183[4];
              ((void (*)(char *, uint64_t, uint64_t))v178)(v167, v175 + v61, v177);
              if (v61 < v57 || v63 >= v62 + v59)
              {
                uint64_t v65 = v62 + v61;
                uint64_t v66 = v176;
                swift_arrayInitWithTakeFrontToBack(v65, v176, 1LL, v43);
              }

              else
              {
                uint64_t v66 = v176;
                if (v61 != v57) {
                  swift_arrayInitWithTakeBackToFront(v63, v176, 1LL, v43);
                }
              }

              ((void (*)(uint64_t, char *, uint64_t))v178)(v66, v167, v43);
              SwiftAvro::AvroRecord v14 = v165;
            }

            ++v60;
            --v56;
            v57 -= v181;
            v59 -= v181;
            v61 += v181;
          }

          while (v60 < v42 + v56);
          uint64_t v27 = v162;
          uint64_t v2 = v172;
          uint64_t v29 = (uint64_t)v168;
          uint64_t v28 = v180;
        }
      }
    }

    if (v42 < v28)
    {
      if (__OFSUB__(v42, v29)) {
        goto LABEL_156;
      }
      if (v42 - v29 < v159)
      {
        if (__OFADD__(v29, v159)) {
          goto LABEL_159;
        }
        if (v29 + v159 >= v28) {
          uint64_t v67 = v28;
        }
        else {
          uint64_t v67 = v29 + v159;
        }
        if (v67 < v29) {
          goto LABEL_160;
        }
        if (v42 != v67)
        {
          uint64_t v162 = v27;
          uint64_t v68 = v183[9];
          double v69 = (uint64_t (*)(char *, uint64_t, uint64_t))v183[2];
          uint64_t v172 = v2;
          unint64_t v173 = v69;
          uint64_t v70 = v68 * (v42 - 1);
          uint64_t v175 = v68;
          uint64_t v181 = v42 * v68;
          uint64_t v166 = v67;
          do
          {
            uint64_t v71 = 0LL;
            int v178 = (char *)v42;
            uint64_t v176 = v70;
            while (1)
            {
              uint64_t v180 = v29;
              uint64_t v72 = *v182;
              uint64_t v73 = v173;
              v173(v14, v181 + v71 + *v182, v43);
              uint64_t v74 = v70 + v71 + v72;
              uint64_t v75 = v14;
              uint64_t v76 = v174;
              uint64_t v77 = v73(v174, v74, v43);
              uint64_t v78 = URLQueryItem.name.getter(v77);
              uint64_t v80 = v79;
              uint64_t v81 = URLQueryItem.name.getter(v78);
              if (v78 == v81 && v80 == v82) {
                break;
              }
              char v84 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, v80, v81, v82, 1LL);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v85 = (void (*)(char *, uint64_t))v183[1];
              v85(v76, v43);
              v85(v75, v43);
              SwiftAvro::AvroRecord v14 = v75;
              if ((v84 & 1) == 0) {
                goto LABEL_62;
              }
              uint64_t v86 = *v182;
              uint64_t v70 = v176;
              if (!*v182) {
                goto LABEL_162;
              }
              uint64_t v87 = v86 + v181 + v71;
              uint64_t v88 = (char *)(v86 + v176 + v71);
              uint64_t v89 = (void (*)(char *, uint64_t, uint64_t))v183[4];
              uint64_t v90 = v177;
              v89(v179, v87, v177);
              swift_arrayInitWithTakeFrontToBack(v87, v88, 1LL, v90);
              v89(v88, (uint64_t)v179, v90);
              v71 -= v175;
              uint64_t v29 = v180 + 1;
              unint64_t v91 = v178;
              uint64_t v43 = v90;
            }

            swift_bridgeObjectRelease_n(v80, 2LL);
            uint64_t v92 = (void (*)(char *, uint64_t))v183[1];
            v92(v76, v43);
            v92(v75, v43);
            SwiftAvro::AvroRecord v14 = v75;
LABEL_62:
            unint64_t v91 = v178;
            uint64_t v70 = v176;
LABEL_63:
            uint64_t v42 = (uint64_t)(v91 + 1);
            v70 += v175;
            v181 += v175;
            uint64_t v29 = (uint64_t)v168;
          }

          while (v42 != v166);
          uint64_t v42 = v166;
          uint64_t v2 = v172;
          uint64_t v27 = v162;
        }
      }
    }

    if (v42 < v29) {
      goto LABEL_155;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
    {
      sub_1000DD3BC(0, *((void *)v27 + 2) + 1LL, 1, v27);
      uint64_t v27 = v146;
    }

    unint64_t v94 = *((void *)v27 + 2);
    unint64_t v93 = *((void *)v27 + 3);
    unint64_t v95 = v94 + 1;
    uint64_t v172 = v2;
    int v178 = (char *)v42;
    if (v94 >= v93 >> 1)
    {
      sub_1000DD3BC(v93 > 1, v94 + 1, 1, v27);
      uint64_t v27 = v147;
    }

    *((void *)v27 + 2) = v95;
    char v96 = v27 + 32;
    uint64_t v97 = &v27[16 * v94 + 32];
    char v98 = v178;
    *(void *)uint64_t v97 = v29;
    *((void *)v97 + 1) = v98;
    if (v94) {
      break;
    }
    unint64_t v95 = 1LL;
LABEL_113:
    uint64_t v28 = v182[1];
    uint64_t v26 = v178;
    uint64_t v2 = v172;
  }

  while (1)
  {
    unint64_t v99 = v95 - 1;
    if (v95 >= 4)
    {
      uint64_t v104 = &v96[2 * v95];
      uint64_t v105 = *(v104 - 8);
      uint64_t v106 = *(v104 - 7);
      BOOL v110 = __OFSUB__(v106, v105);
      uint64_t v107 = v106 - v105;
      if (v110) {
        goto LABEL_140;
      }
      uint64_t v109 = *(v104 - 6);
      uint64_t v108 = *(v104 - 5);
      BOOL v110 = __OFSUB__(v108, v109);
      uint64_t v102 = v108 - v109;
      char v103 = v110;
      if (v110) {
        goto LABEL_141;
      }
      unint64_t v111 = v95 - 2;
      uint64_t v112 = &v96[2 * v95 - 4];
      uint64_t v114 = *v112;
      uint64_t v113 = v112[1];
      BOOL v110 = __OFSUB__(v113, v114);
      uint64_t v115 = v113 - v114;
      if (v110) {
        goto LABEL_142;
      }
      BOOL v110 = __OFADD__(v102, v115);
      uint64_t v116 = v102 + v115;
      if (v110) {
        goto LABEL_144;
      }
      if (v116 >= v107)
      {
        uint64_t v134 = &v96[2 * v99];
        uint64_t v136 = *v134;
        uint64_t v135 = v134[1];
        BOOL v110 = __OFSUB__(v135, v136);
        uint64_t v137 = v135 - v136;
        if (v110) {
          goto LABEL_150;
        }
        BOOL v127 = v102 < v137;
        goto LABEL_102;
      }
    }

    else
    {
      if (v95 != 3)
      {
        uint64_t v128 = *((void *)v27 + 4);
        uint64_t v129 = *((void *)v27 + 5);
        BOOL v110 = __OFSUB__(v129, v128);
        uint64_t v121 = v129 - v128;
        char v122 = v110;
        goto LABEL_96;
      }

      uint64_t v101 = *((void *)v27 + 4);
      uint64_t v100 = *((void *)v27 + 5);
      BOOL v110 = __OFSUB__(v100, v101);
      uint64_t v102 = v100 - v101;
      char v103 = v110;
    }

    if ((v103 & 1) != 0) {
      goto LABEL_143;
    }
    unint64_t v111 = v95 - 2;
    unint64_t v117 = &v96[2 * v95 - 4];
    uint64_t v119 = *v117;
    uint64_t v118 = v117[1];
    BOOL v120 = __OFSUB__(v118, v119);
    uint64_t v121 = v118 - v119;
    char v122 = v120;
    if (v120) {
      goto LABEL_145;
    }
    char v123 = &v96[2 * v99];
    uint64_t v125 = *v123;
    uint64_t v124 = v123[1];
    BOOL v110 = __OFSUB__(v124, v125);
    uint64_t v126 = v124 - v125;
    if (v110) {
      goto LABEL_147;
    }
    if (__OFADD__(v121, v126)) {
      goto LABEL_149;
    }
    if (v121 + v126 >= v102)
    {
      BOOL v127 = v102 < v126;
LABEL_102:
      if (v127) {
        unint64_t v99 = v111;
      }
      goto LABEL_104;
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

LABEL_96:
    if ((v122 & 1) != 0) {
      goto LABEL_146;
    }
    uint64_t v130 = &v96[2 * v99];
    uint64_t v132 = *v130;
    uint64_t v131 = v130[1];
    BOOL v110 = __OFSUB__(v131, v132);
    uint64_t v133 = v131 - v132;
    if (v110) {
      goto LABEL_148;
    }
    if (v133 < v121) {
      goto LABEL_113;
    }
LABEL_104:
    unint64_t v138 = v99 - 1;
    if (v99 - 1 >= v95)
    {
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
      goto LABEL_151;
    }

    if (!*v182) {
      goto LABEL_163;
    }
    uint64_t v139 = v27;
    uint64_t v140 = &v96[2 * v138];
    uint64_t v141 = *v140;
    uint64_t v142 = &v96[2 * v99];
    uint64_t v143 = v142[1];
    uint64_t v144 = v172;
    sub_10005C4DC(*v182 + v183[9] * *v140, *v182 + v183[9] * *v142, *v182 + v183[9] * v143, v169);
    uint64_t v172 = v144;
    if (v144) {
      break;
    }
    if (v143 < v141) {
      goto LABEL_137;
    }
    if (v99 > *((void *)v139 + 2)) {
      goto LABEL_138;
    }
    *uint64_t v140 = v141;
    v96[2 * v138 + 1] = v143;
    unint64_t v145 = *((void *)v139 + 2);
    if (v99 >= v145) {
      goto LABEL_139;
    }
    uint64_t v27 = v139;
    unint64_t v95 = v145 - 1;
    memmove(&v96[2 * v99], v142 + 2, 16 * (v145 - 1 - v99));
    *((void *)v139 + 2) = v145 - 1;
    if (v145 <= 2) {
      goto LABEL_113;
    }
  }

  uint64_t v2 = v172;
LABEL_119:
  swift_bridgeObjectRelease();
  if (v161 < -1)
  {
    __break(1u);
    goto LABEL_121;
  }

    if ((v122 & 1) != 0) {
      goto LABEL_146;
    }
    uint64_t v130 = &v96[2 * v99];
    uint64_t v132 = *v130;
    uint64_t v131 = v130[1];
    BOOL v110 = __OFSUB__(v131, v132);
    uint64_t v133 = v131 - v132;
    if (v110) {
      goto LABEL_148;
    }
    if (v133 < v121) {
      goto LABEL_113;
    }
LABEL_104:
    unint64_t v138 = v99 - 1;
    if (v99 - 1 >= v95)
    {
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
      goto LABEL_151;
    }

    if (!*v182) {
      goto LABEL_163;
    }
    uint64_t v139 = v27;
    uint64_t v140 = &v96[2 * v138];
    uint64_t v141 = *v140;
    uint64_t v142 = &v96[2 * v99];
    uint64_t v143 = v142[1];
    uint64_t v144 = v172;
    sub_1000DCE8C(*v182 + v183[9] * *v140, *v182 + v183[9] * *v142, *v182 + v183[9] * v143, v169);
    uint64_t v172 = v144;
    if (v144) {
      break;
    }
    if (v143 < v141) {
      goto LABEL_137;
    }
    if (v99 > *((void *)v139 + 2)) {
      goto LABEL_138;
    }
    *uint64_t v140 = v141;
    v96[2 * v138 + 1] = v143;
    unint64_t v145 = *((void *)v139 + 2);
    if (v99 >= v145) {
      goto LABEL_139;
    }
    uint64_t v27 = v139;
    unint64_t v95 = v145 - 1;
    memmove(&v96[2 * v99], v142 + 2, 16 * (v145 - 1 - v99));
    *((void *)v139 + 2) = v145 - 1;
    if (v145 <= 2) {
      goto LABEL_113;
    }
  }

  uint64_t v2 = v172;
LABEL_119:
  swift_bridgeObjectRelease();
  if (v161 < -1)
  {
    __break(1u);
    goto LABEL_121;
  }

LABEL_134:
  *(void *)(v160 + sub_10000BDD4(v0 + 16) = 0LL;
  swift_bridgeObjectRelease();
}

  *(void *)(v160 + sub_10000BDD4(v0 + 16) = 0LL;
  swift_bridgeObjectRelease();
}

    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
    return;
  }

  uint64_t v128 = v13;
  uint64_t v15 = 0LL;
  uint64_t v16 = (char *)_swiftEmptyArrayStorage;
  uint64_t v17 = v11;
  uint64_t v131 = v11;
  while (1)
  {
    uint64_t v18 = v15;
    uint64_t v19 = v15 + 1;
    if (v15 + 1 >= v17)
    {
      ++v15;
      uint64_t v20 = v141;
    }

    else
    {
      uint64_t v137 = v2;
      uint64_t v20 = v141;
      uint64_t v21 = *v141;
      Swift::Int v22 = *(void *)(v136 + 72);
      Swift::Int v23 = v139;
      sub_10014B420(*v141 + v22 * v19, v139);
      Swift::Int v24 = v140;
      sub_10014B420(v21 + v22 * v15, v140);
      unint64_t v25 = *(int *)(v142 + 28);
      uint64_t v26 = *(double *)(v23 + v25);
      uint64_t v27 = *(double *)(v24 + v25);
      sub_10014B464(v24);
      uint64_t v28 = v23;
      uint64_t v18 = v15;
      sub_10014B464(v28);
      v15 += 2LL;
      uint64_t v132 = v21;
      uint64_t v144 = v22;
      if (v15 >= v17)
      {
        uint64_t v2 = v137;
      }

      else
      {
        uint64_t v134 = v18;
        uint64_t v130 = v16;
        unint64_t v138 = v22 * v19;
        uint64_t v29 = v21;
        BOOL v30 = v15;
        uint64_t v31 = v22 * v15;
        while (1)
        {
          uint64_t v32 = v17;
          __int128 v33 = v139;
          sub_10014B420(v29 + v31, v139);
          uint64_t v34 = v140;
          sub_10014B420(v29 + v138, v140);
          uint64_t v35 = *(double *)(v33 + *(int *)(v142 + 28)) >= *(double *)(v34 + *(int *)(v142 + 28));
          sub_10014B464(v34);
          sub_10014B464(v33);
          if (v26 < v27 == v35) {
            break;
          }
          v29 += v144;
          ++v30;
          uint64_t v17 = v32;
          if (v30 >= v32)
          {
            uint64_t v15 = v32;
            uint64_t v16 = v130;
            uint64_t v2 = v137;
            uint64_t v18 = v134;
            goto LABEL_13;
          }
        }

        uint64_t v16 = v130;
        uint64_t v15 = v30;
        uint64_t v2 = v137;
        uint64_t v18 = v134;
        uint64_t v17 = v32;
      }

uint64_t sub_10005C208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v45 = a4;
  uint64_t v38 = a1;
  uint64_t v41 = type metadata accessor for Trialpb_TrialExperiment(0LL);
  uint64_t v46 = *(void **)(v41 - 8);
  uint64_t v6 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v43 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v36 - v12;
  uint64_t v42 = a3;
  uint64_t v37 = a2;
  if (a3 != a2)
  {
    uint64_t v14 = v46[9];
    uint64_t v39 = (uint64_t (*)(char *, uint64_t, uint64_t))v46[2];
    uint64_t v40 = v14;
    uint64_t v48 = v14 * (v42 - 1);
    uint64_t v47 = v14 * v42;
    while (2)
    {
      uint64_t v15 = 0LL;
      uint64_t v16 = v38;
      uint64_t v17 = v41;
      while (1)
      {
        uint64_t v18 = *v45;
        uint64_t v44 = v47 + v15;
        uint64_t v19 = v39;
        v39(v13, v47 + v15 + v18, v17);
        uint64_t v20 = v19(v10, v48 + v15 + v18, v17);
        uint64_t v21 = Trialpb_TrialExperiment.experimentNamespace.getter(v20);
        Swift::Int v22 = v10;
        uint64_t v24 = v23;
        uint64_t v25 = Trialpb_TrialExperiment.experimentNamespace.getter(v21);
        if (v21 == v25 && v24 == v26) {
          break;
        }
        uint64_t v28 = v26;
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v24, v25, v26, 1LL);
        swift_bridgeObjectRelease(v24);
        swift_bridgeObjectRelease(v28);
        BOOL v30 = (void (*)(char *, uint64_t))v46[1];
        v30(v22, v17);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v30)(v13, v17);
        uint64_t v10 = v22;
        if ((v29 & 1) != 0)
        {
          uint64_t v31 = *v45;
          if (!*v45)
          {
            __break(1u);
            return result;
          }

          uint64_t v32 = v31 + v47 + v15;
          uint64_t v33 = v31 + v48 + v15;
          uint64_t v34 = (void (*)(char *, uint64_t, uint64_t))v46[4];
          uint64_t v17 = v41;
          v34(v43, v32, v41);
          swift_arrayInitWithTakeFrontToBack(v32, v33, 1LL, v17);
          uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v34)(v33, v43, v17);
          v15 -= v40;
          ++v16;
          uint64_t v10 = v22;
          if (v42 != v16) {
            continue;
          }
        }

        goto LABEL_13;
      }

      swift_bridgeObjectRelease_n(v24, 2LL);
      uint64_t v35 = (void (*)(char *, uint64_t))v46[1];
      v35(v22, v17);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v35)(v13, v17);
      uint64_t v10 = v22;
LABEL_13:
      v48 += v40;
      v47 += v40;
      if (++v42 != v37) {
        continue;
      }
      break;
    }
  }

  return result;
}

void sub_10005C4DC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for Trialpb_TrialExperiment(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v77 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v76 = (char *)&v69 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v69 - v15;
  uint64_t v78 = v17;
  uint64_t v18 = *(void *)(v17 + 72);
  if (!v18)
  {
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }

  int64_t v19 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000LL && v18 == -1) {
    goto LABEL_91;
  }
  int64_t v21 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000LL && v18 == -1) {
    goto LABEL_92;
  }
  uint64_t v74 = v14;
  uint64_t v75 = v18;
  uint64_t v23 = v19 / v18;
  uint64_t v24 = v21 / v18;
  if (v19 / v18 >= v21 / v18)
  {
    sub_1000DAB84(a2, v21 / v18, a4);
    unint64_t v25 = a4 + v24 * v18;
    if (v24 * v18 < 1 || a1 >= a2) {
      goto LABEL_22;
    }
    uint64_t v74 = -v18;
    uint64_t v50 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v78 + 16);
    unint64_t v70 = a4;
    uint64_t v71 = v50;
    unint64_t v72 = a1;
    while (1)
    {
      unint64_t v51 = a3;
      unint64_t v79 = v25;
      uint64_t v52 = v74;
      unint64_t v73 = v25 + v74;
      uint64_t v53 = v71;
      ((void (*)(char *))v71)(v76);
      unint64_t v54 = a2 + v52;
      uint64_t v55 = v53(v77, a2 + v52, v8);
      uint64_t v56 = Trialpb_TrialExperiment.experimentNamespace.getter(v55);
      uint64_t v58 = v57;
      uint64_t v60 = Trialpb_TrialExperiment.experimentNamespace.getter(v56);
      if (v56 == v60 && v58 == v59) {
        char v62 = 0;
      }
      else {
        char v62 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v58, v60, v59, 1LL);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a3 = v51 + v74;
      unint64_t v63 = *(void (**)(char *, uint64_t))(v78 + 8);
      v63(v77, v8);
      v63(v76, v8);
      unint64_t v64 = v72;
      if ((v62 & 1) != 0)
      {
        BOOL v65 = v51 < a2 || a3 >= a2;
        uint64_t v18 = v75;
        if (v65)
        {
          swift_arrayInitWithTakeFrontToBack(a3, v54, 1LL, v8);
        }

        else if (v51 != a2)
        {
          swift_arrayInitWithTakeBackToFront(a3, v54, 1LL, v8);
        }

        a2 = v54;
        a4 = v70;
        unint64_t v25 = v79;
        goto LABEL_84;
      }

      BOOL v66 = v51 < v79 || a3 >= v79;
      uint64_t v18 = v75;
      if (v66)
      {
        unint64_t v67 = v73;
        swift_arrayInitWithTakeFrontToBack(a3, v73, 1LL, v8);
      }

      else
      {
        if (v51 == v79)
        {
          unint64_t v25 = v73;
          goto LABEL_83;
        }

        unint64_t v67 = v73;
        swift_arrayInitWithTakeBackToFront(a3, v73, 1LL, v8);
      }

      unint64_t v25 = v67;
LABEL_83:
      a4 = v70;
LABEL_84:
      if (v25 <= a4 || a2 <= v64) {
        goto LABEL_22;
      }
    }
  }

  sub_1000DAB84(a1, v19 / v18, a4);
  unint64_t v25 = a4 + v23 * v18;
  if (v23 * v18 >= 1 && a2 < a3)
  {
    uint64_t v76 = *(char **)(v78 + 16);
    uint64_t v77 = v16;
    uint64_t v30 = v74;
    unint64_t v79 = a4 + v23 * v18;
    unint64_t v73 = a3;
    while (1)
    {
      uint64_t v31 = (uint64_t (*)(uint64_t, unint64_t, uint64_t))v76;
      ((void (*)(char *, unint64_t, uint64_t))v76)(v16, a2, v8);
      uint64_t v32 = v31(v30, a4, v8);
      uint64_t v33 = v8;
      uint64_t v34 = Trialpb_TrialExperiment.experimentNamespace.getter(v32);
      uint64_t v36 = v35;
      uint64_t v37 = Trialpb_TrialExperiment.experimentNamespace.getter(v34);
      if (v34 == v37 && v36 == v38) {
        break;
      }
      char v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v36, v37, v38, 1LL);
      uint64_t v41 = v30;
      char v42 = v40;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
      v43(v41, v33);
      v43((uint64_t)v16, v33);
      uint64_t v8 = v33;
      if ((v42 & 1) == 0) {
        goto LABEL_39;
      }
      uint64_t v18 = v75;
      unint64_t v44 = a2 + v75;
      BOOL v45 = a1 < a2 || a1 >= v44;
      unint64_t v46 = v73;
      if (!v45)
      {
        uint64_t v30 = v74;
        if (a1 != a2) {
          swift_arrayInitWithTakeBackToFront(a1, a2, 1LL, v8);
        }
        unint64_t v25 = v79;
        goto LABEL_49;
      }

      swift_arrayInitWithTakeFrontToBack(a1, a2, 1LL, v8);
LABEL_48:
      unint64_t v25 = v79;
      uint64_t v30 = v74;
LABEL_49:
      a1 += v18;
      BOOL v49 = a4 >= v25 || v44 >= v46;
      a2 = v44;
      if (v49) {
        goto LABEL_16;
      }
    }

    swift_bridgeObjectRelease_n(v36, 2LL);
    uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
    v47(v30, v33);
    v47((uint64_t)v16, v33);
    uint64_t v8 = v33;
LABEL_39:
    uint64_t v18 = v75;
    BOOL v48 = a1 < a4 || a1 >= a4 + v75;
    unint64_t v46 = v73;
    if (v48)
    {
      swift_arrayInitWithTakeFrontToBack(a1, a4, 1LL, v8);
    }

    else if (a1 != a4)
    {
      swift_arrayInitWithTakeBackToFront(a1, a4, 1LL, v8);
    }

    unint64_t v44 = a2;
    a4 += v18;
    goto LABEL_48;
  }

LABEL_93:
  __break(1u);
}

  __break(1u);
}

uint64_t destroy for AvroRecord(void *a1)
{
  return swift_bridgeObjectRelease(a1[7]);
}

void *initializeWithCopy for AvroRecord(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[6];
  uint64_t v7 = a2[7];
  a1[6] = v6;
  a1[7] = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

void *assignWithCopy for AvroRecord(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[6];
  uint64_t v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a2[7];
  uint64_t v13 = a1[7];
  a1[7] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

void *assignWithTake for AvroRecord(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = a1[3];
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  a1[4] = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(a1[5]);
  uint64_t v8 = a1[6];
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a1[7];
  a1[7] = *(void *)(a2 + 56);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AvroRecord(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AvroRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + sub_10000BDD4(v0 + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + sub_10000BDD4(v0 + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ExperimentsMetadata()
{
  return &type metadata for ExperimentsMetadata;
}

uint64_t sub_10005CC80()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_10005CC8C()
{
  return swift_release(v0 & 0x1FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10005CC94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = type metadata accessor for OSSignpostID(0LL);
  __chkstk_darwin(v7);
  *(void *)(v3 + sub_10000BDD4(v0 + 16) = 0LL;
  uint64_t v8 = v3 + 24;
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 32) = 0LL;
  uint64_t v9 = swift_unknownObjectWeakInit(v3 + 24, 0LL);
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + sub_10000BDD4(v0 + 56) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  uint64_t v10 = static os_signpost_type_t.begin.getter(v9);
  if (qword_1001D0560 != -1) {
    swift_once(&qword_1001D0560, sub_1000346C4);
  }
  uint64_t v11 = qword_1001EDCC0;
  static OSSignpostID.exclusive.getter();
  sub_10005D61C(v10, (uint64_t)&_mh_execute_header, v11, (uint64_t)"lifetimeSpanInit");
  sub_10005D64C();
  uint64_t v12 = sub_10000941C(qword_1001D3F60);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  swift_retain(a3);
  sub_10000DE34();
  uint64_t v13 = *(void *)(v4 + 16);
  *(void *)(v4 + sub_10000BDD4(v0 + 16) = v14;
  uint64_t v15 = swift_release(v13);
  uint64_t v16 = static os_signpost_type_t.end.getter(v15);
  uint64_t v17 = qword_1001EDCC0;
  static OSSignpostID.exclusive.getter();
  sub_10005D61C(v16, (uint64_t)&_mh_execute_header, v17, (uint64_t)"lifetimeSpanInit");
  swift_release(a3);
  sub_10005D64C();
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 32) = a2;
  swift_unknownObjectWeakAssign(v8, a1);
  swift_unknownObjectRelease(a1);
  return v4;
}

uint64_t sub_10005CE50()
{
  uint64_t v1 = objc_autoreleasePoolPush();
  *(void *)(v0 + sub_10000BDD4(v0 + 16) = 0LL;
  swift_release();
  objc_autoreleasePoolPop(v1);
  swift_release();
  sub_10000BDD4(v0 + 24);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_10005CED0()
{
  return swift_deallocClassInstance(v0, 152LL, 7LL);
}

void sub_10005CEF0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v0 + 3);
  if (Strong)
  {
    uint64_t v7 = Strong;
    uint64_t v8 = v0[4];
    uint64_t v9 = static os_signpost_type_t.begin.getter(Strong);
    if (qword_1001D0560 != -1) {
      swift_once(&qword_1001D0560, sub_1000346C4);
    }
    uint64_t v10 = qword_1001EDCC0;
    sub_10005D600();
    sub_10005D5E8(v9, (uint64_t)&_mh_execute_header, v10, (uint64_t)"localStateManager", 17LL);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v11 = type metadata accessor for LocalStateManager();
    sub_100009ACC(v11, 84LL);
    uint64_t v12 = sub_10005D608();
    uint64_t v85 = v8;
    uint64_t v13 = sub_10004F088(v12, v8);
    uint64_t v14 = v1[7];
    v1[7] = v13;
    v1[8] = &off_1001B3D08;
    uint64_t v15 = sub_10005D614(v14);
    uint64_t v16 = static os_signpost_type_t.end.getter(v15);
    uint64_t v86 = v2;
    uint64_t v17 = qword_1001EDCC0;
    sub_10005D600();
    sub_10005D5E8(v16, (uint64_t)&_mh_execute_header, v17, (uint64_t)"localStateManager", 17LL);
    sub_10005D5F4();
    sub_100048630();
    uint64_t v18 = v1[5];
    v1[5] = v19;
    v1[6] = v20;
    uint64_t v21 = sub_10005D614(v18);
    uint64_t v22 = static os_signpost_type_t.begin.getter(v21);
    uint64_t v23 = qword_1001EDCC0;
    sub_10005D600();
    sub_10005D5E8(v22, (uint64_t)&_mh_execute_header, v23, (uint64_t)"motionManager", 13LL);
    sub_10005D5F4();
    uint64_t v24 = type metadata accessor for MotionManager();
    uint64_t v25 = sub_100009ACC(v24, 16LL);
    uint64_t v26 = v1[9];
    void v1[9] = v25;
    v1[10] = &off_1001B6B28;
    uint64_t v27 = sub_10005D614(v26);
    uint64_t v28 = static os_signpost_type_t.end.getter(v27);
    uint64_t v29 = qword_1001EDCC0;
    sub_10005D600();
    sub_10005D5E8(v28, (uint64_t)&_mh_execute_header, v29, (uint64_t)"motionManager", 13LL);
    uint64_t v30 = sub_10005D5F4();
    uint64_t v31 = static os_signpost_type_t.begin.getter(v30);
    uint64_t v32 = qword_1001EDCC0;
    sub_10005D600();
    sub_10005D5E8(v31, (uint64_t)&_mh_execute_header, v32, (uint64_t)"restrictionsManager", 19LL);
    sub_10005D5F4();
    uint64_t v33 = type metadata accessor for DeviceRestrictionsManager();
    sub_100009ACC(v33, 48LL);
    uint64_t v34 = sub_10005D608();
    uint64_t v35 = v85;
    uint64_t v36 = sub_10002805C(v34, v85);
    uint64_t v37 = v1[11];
    v1[11] = v36;
    v1[12] = &off_1001B2870;
    uint64_t v38 = sub_10005D614(v37);
    uint64_t v39 = static os_signpost_type_t.end.getter(v38);
    uint64_t v40 = qword_1001EDCC0;
    sub_10005D600();
    sub_10005D5E8(v39, (uint64_t)&_mh_execute_header, v40, (uint64_t)"restrictionsManager", 19LL);
    uint64_t v41 = sub_10005D5F4();
    static os_signpost_type_t.begin.getter(v41);
    sub_10005D600();
    uint64_t v42 = sub_10005D62C();
    sub_10005D5E8(v42, v43, v44, v45, 17LL);
    sub_10005D5F4();
    uint64_t v46 = type metadata accessor for SilhouetteContextProvider();
    sub_100009ACC(v46, 56LL);
    uint64_t v47 = sub_10005D608();
    BOOL v48 = sub_1000A4848(v47, v35);
    uint64_t v49 = v1[13];
    v1[13] = v48;
    v1[14] = &off_1001B6B08;
    uint64_t v50 = sub_10005D614(v49);
    uint64_t v51 = static os_signpost_type_t.end.getter(v50);
    uint64_t v52 = qword_1001EDCC0;
    sub_10005D600();
    sub_10005D5E8(v51, (uint64_t)&_mh_execute_header, v52, (uint64_t)"silhouetteManager", 17LL);
    uint64_t v53 = sub_10005D5F4();
    uint64_t v54 = static os_signpost_type_t.begin.getter(v53);
    uint64_t v55 = qword_1001EDCC0;
    sub_10005D600();
    sub_10005D5E8(v54, (uint64_t)&_mh_execute_header, v55, (uint64_t)"userDefaultsManager", 19LL);
    sub_10005D5F4();
    id v56 = objc_allocWithZone((Class)type metadata accessor for UserDefaultsManager());
    uint64_t v57 = sub_10005D608();
    id v58 = sub_100033610(v57, v35);
    uint64_t v59 = v1[15];
    v1[15] = v58;
    v1[16] = &off_1001B30A0;
    uint64_t v60 = sub_10005D614(v59);
    uint64_t v61 = static os_signpost_type_t.end.getter(v60);
    uint64_t v62 = qword_1001EDCC0;
    sub_10005D600();
    sub_10005D5E8(v61, (uint64_t)&_mh_execute_header, v62, (uint64_t)"userDefaultsManager", 19LL);
    uint64_t v63 = sub_10005D5F4();
    static os_signpost_type_t.begin.getter(v63);
    sub_10005D600();
    uint64_t v64 = sub_10005D62C();
    sub_10005D5E8(v64, v65, v66, v67, 19LL);
    sub_10005D5F4();
    uint64_t v68 = type metadata accessor for SiriSettingsManager();
    sub_100009ACC(v68, 72LL);
    uint64_t v69 = sub_10005D608();
    uint64_t v84 = v7;
    uint64_t v70 = sub_10001B278(v69, v35);
    uint64_t v71 = v1[17];
    v1[17] = v70;
    v1[18] = &off_1001B1F98;
    uint64_t v72 = sub_10005D614(v71);
    uint64_t v73 = static os_signpost_type_t.end.getter(v72);
    uint64_t v74 = qword_1001EDCC0;
    sub_10005D600();
    sub_10005D5E8(v73, (uint64_t)&_mh_execute_header, v74, (uint64_t)"siriSettingsManager", 19LL);
    uint64_t v75 = sub_10005D5F4();
    uint64_t v76 = static os_signpost_type_t.begin.getter(v75);
    uint64_t v77 = qword_1001EDCC0;
    sub_10005D600();
    sub_10005D5E8(v76, (uint64_t)&_mh_execute_header, v77, (uint64_t)"locationManager.update()", 24LL);
    uint64_t v78 = sub_10005D640();
    uint64_t v79 = v1[5];
    if (v79)
    {
      swift_unknownObjectRetain(v1[5]);
      sub_100045840();
      uint64_t v78 = swift_unknownObjectRelease(v79);
    }

    uint64_t v80 = static os_signpost_type_t.end.getter(v78);
    uint64_t v81 = qword_1001EDCC0;
    sub_10005D600();
    sub_10005D5E8(v80, (uint64_t)&_mh_execute_header, v81, (uint64_t)"locationManager.update()", 24LL);
    sub_10005D640();
    id v82 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    [v82 addObserver:v1 selector:"searchPerformedNotification:" name:@"com.apple.parsecd.performedSearch" object:0];
    swift_unknownObjectRelease(v84);
  }

void sub_10005D430()
{
  uint64_t v1 = v0;
  if (qword_1001D0540 != -1) {
    swift_once(&qword_1001D0540, sub_100034544);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_1000093D0(v2, (uint64_t)qword_1001EDC90);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Received search performed notification, requesting location if allowed",  v6,  2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  if (*(void *)(v1 + 40))
  {
    swift_unknownObjectRetain(*(void *)(v1 + 40));
    sub_100044A90();
    swift_unknownObjectRelease();
  }

uint64_t type metadata accessor for ContextProviderInterface()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd24ContextProviderInterface);
}

uint64_t sub_10005D5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return os_signpost(_:dso:log:name:signpostID:)(a1, a2, a3, a4, a5, 2LL, v5);
}

uint64_t sub_10005D5F4()
{
  return v0(v1, *(void *)(v2 - 88));
}

uint64_t sub_10005D600()
{
  return static OSSignpostID.exclusive.getter();
}

uint64_t sub_10005D608()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_10005D614@<X0>(uint64_t a1@<X8>)
{
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_10005D61C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return os_signpost(_:dso:log:name:signpostID:)(a1, a2, a3, a4, 16LL, 2LL, v4);
}

uint64_t sub_10005D62C()
{
  return v0;
}

uint64_t sub_10005D640()
{
  return v1(v2, v0);
}

uint64_t sub_10005D64C()
{
  return v2(v1, v0);
}

uint64_t sub_10005D658(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  void v2[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[3] = (char *)&value witness table for Builtin.Int8 + 64;
  v2[4] = &unk_10015FEE8;
  return swift_initClassMetadata2(a1, 0LL, 5LL, v2, a1 + 88);
}

uint64_t sub_10005D6C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = swift_retain(a1);
  return sub_10005D6E8(v4, v5, a3, v6);
}

uint64_t sub_10005D6E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return sub_10005D938();
  }
  return a1;
}

uint64_t sub_10005D738@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_10005D6C4(*v2, v2[1], *(void *)(a1 + 16));
  uint64_t v6 = v5;
  uint64_t result = swift_release();
  *a2 = v4;
  a2[1] = v6;
  return result;
}

uint64_t static AvroPrimitiveSchema.int.getter()
{
  return 2LL;
}

uint64_t sub_10005D794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

void sub_10005D7B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = String.utf8CString.getter(a1, a2);
  sub_10005D8C8(1LL, v2);
  int64_t v6 = v5 >> 1;
  uint64_t v7 = (v5 >> 1) - v4;
  if (__OFSUB__(v5 >> 1, v4))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (!v7)
  {
LABEL_8:
    swift_unknownObjectRelease();
    return;
  }

  uint64_t v8 = v3;
  uint64_t v9 = v4;
  sub_1000AFA6C(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000LL) == 0)
  {
    while (v9 < v6)
    {
      char v10 = *(_BYTE *)(v8 + v9);
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        sub_1000AFA6C(v11 > 1, v12 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v12 + 1;
      *((_BYTE *)&_swiftEmptyArrayStorage[4] + v12) = v10;
      if (v6 == ++v9) {
        goto LABEL_8;
      }
    }

    __break(1u);
    goto LABEL_11;
  }

uint64_t sub_10005D8C8(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  unint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_100050610(0LL, (v3 - result) & ~((uint64_t)(v3 - result) >> 63), v3);
  if ((v4 & 1) != 0) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = result;
  }
  if ((v5 & 0x8000000000000000LL) != 0) {
    goto LABEL_9;
  }
  if (v3 >= v5) {
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_10005D938()
{
  return sub_10005DAE4();
}

uint64_t sub_10005D968()
{
  return v0;
}

uint64_t sub_10005D98C()
{
  uint64_t v0 = sub_10005D968();
  return swift_deallocClassInstance(v0, 42LL, 7LL);
}

uint64_t type metadata accessor for Critbit.Internal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Critbit.Internal);
}

uint64_t sub_10005D9B4(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 2LL, v4, a1 + 88);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

char *sub_10005DA34()
{
  uint64_t v1 = *(void *)v0;
  swift_bridgeObjectRelease(*((void *)v0 + 2));
  (*(void (**)(char *))(*(void *)(*(void *)(v1 + 80) - 8LL) + 8LL))(&v0[*(void *)(*(void *)v0 + 96LL)]);
  return v0;
}

uint64_t sub_10005DA78()
{
  uint64_t v0 = sub_10005DA34();
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for Critbit.External(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Critbit.External);
}

uint64_t sub_10005DAA4(uint64_t a1)
{
  v2[0] = "\b";
  v2[1] = "\b";
  return swift_initClassMetadata2(a1, 0LL, 2LL, v2, a1 + 88);
}

uint64_t sub_10005DAE4()
{
  *(void *)(v0 + sub_10000BDD4(v0 + 16) = 0LL;
  *(void *)(v0 + sub_10000BDD4(v0 + 24) = 0LL;
  swift_release(0LL);
  return v0;
}

uint64_t sub_10005DB04()
{
  uint64_t v0 = sub_10005D968();
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for Critbit.Node(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Critbit.Node);
}

uint64_t sub_10005DB2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16LL);
}

uint64_t *sub_10005DB34(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  return a1;
}

uint64_t sub_10005DB60(void *a1)
{
  return swift_release(*a1);
}

uint64_t *sub_10005DB68(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  return a1;
}

uint64_t *sub_10005DBB4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  return a1;
}

uint64_t sub_10005DBF0(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      uint64_t v3 = *a1;
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10005DC44(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + sub_10000BDD4(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + sub_10000BDD4(v0 + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }

  return result;
}

uint64_t type metadata accessor for Critbit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Critbit);
}

uint64_t sub_10005DCA0(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100160050, a1);
}

uint64_t sub_10005DCB0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v6);
  char v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)(*v2 + 16);
  if (v11)
  {
    uint64_t v12 = type metadata accessor for Critbit.Node(255LL, *(void *)(a1 + 16), v7, v8);
    uint64_t v13 = type metadata accessor for Array(0LL, v12);
    do
    {
      uint64_t v37 = *(void *)(v11 + 24);
      sub_10005E31C();
      sub_10005E314();
      Array.append(_:)(&v37, v13);
      uint64_t v14 = *(void *)(v11 + 16);
      sub_10005E314();
      swift_release();
      swift_release();
      *int v2 = v14;
      uint64_t v11 = *(void *)(v14 + 16);
    }

    while (v11);
  }

  else
  {
    uint64_t v14 = *v2;
  }

  uint64_t v15 = *(char **)(v14 + 24);
  if (!v15)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2( 0LL,  &type metadata for String,  *(void *)(a1 + 16),  "key value ",  0LL);
    uint64_t v33 = (uint64_t)a2;
    uint64_t v34 = 1LL;
    return sub_100009654(v33, v34, 1LL, TupleTypeMetadata2);
  }

  uint64_t v37 = *((void *)v15 + 2);
  swift_bridgeObjectRetain(v37);
  uint64_t v16 = sub_10005E31C();
  static String.Encoding.utf8.getter(v16);
  uint64_t v17 = sub_10000941C(&qword_1001D4168);
  unint64_t v18 = sub_10005DFB8();
  uint64_t v36 = String.init<A>(bytes:encoding:)(&v37, v10, v17, v18);
  uint64_t v20 = v19;
  uint64_t result = swift_bridgeObjectRelease();
  if (v20)
  {
    uint64_t v24 = *(void *)(a1 + 16);
    uint64_t v25 = type metadata accessor for Critbit.Node(255LL, v24, v22, v23);
    uint64_t v26 = type metadata accessor for Array(0LL, v25);
    uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v26);
    uint64_t v28 = swift_getWitnessTable(&protocol conformance descriptor for [A], v26);
    RangeReplaceableCollection<>.popLast()(&v37, v26, WitnessTable, v28);
    uint64_t v29 = v37;
    if (!v37) {
      uint64_t v29 = sub_10005D938();
    }
    sub_100011030();
    uint64_t v30 = v36;
    *uint64_t v3 = v29;
    uint64_t v31 = swift_getTupleTypeMetadata2(0LL, &type metadata for String, v24, "key value ", 0LL);
    uint64_t v32 = (char *)a2 + *(int *)(v31 + 48);
    *a2 = v30;
    a2[1] = v20;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16LL))( v32,  &v15[*(void *)(*(void *)v15 + 96LL)],  v24);
    swift_release();
    uint64_t v33 = (uint64_t)a2;
    uint64_t v34 = 0LL;
    TupleTypeMetadata2 = v31;
    return sub_100009654(v33, v34, 1LL, TupleTypeMetadata2);
  }

  __break(1u);
  return result;
}

uint64_t sub_10005DF28(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t sub_10005DF5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = sub_10005DF28(*v1, v1[1]);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = v5;
  return result;
}

unint64_t sub_10005DFB8()
{
  unint64_t result = qword_1001D4170[0];
  if (!qword_1001D4170[0])
  {
    uint64_t v1 = sub_1000094A0(&qword_1001D4168);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, qword_1001D4170);
  }

  return result;
}

uint64_t sub_10005DFFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v6 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a1) {
    goto LABEL_9;
  }
  if (*(void *)(a1 + 16))
  {
    swift_retain(*(void *)(a1 + 16));
    uint64_t v9 = sub_10005E314();
    char v10 = sub_10005E300(v9);
    sub_100011030();
    if ((v10 & 1) == 0)
    {
      swift_release();
LABEL_11:
      char v22 = 0;
      return v22 & 1;
    }

    uint64_t v11 = sub_10005E314();
    char v12 = sub_10005E300(v11);
    sub_100011030();
    swift_release();
    if ((v12 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }

  uint64_t v13 = *(void *)(a1 + 24);
  if (!v13)
  {
LABEL_9:
    char v22 = 1;
    return v22 & 1;
  }

  uint64_t v14 = *(void *)(v13 + 24);
  uint64_t v24 = *(void *)(v13 + 16);
  sub_10005E31C();
  uint64_t v15 = swift_retain(v13);
  static String.Encoding.utf8.getter(v15);
  uint64_t v16 = sub_10000941C(&qword_1001D4168);
  unint64_t v17 = sub_10005DFB8();
  uint64_t result = String.init<A>(bytes:encoding:)(&v24, v8, v16, v17);
  if (v19)
  {
    uint64_t v20 = result;
    uint64_t v21 = v19;
    uint64_t v24 = v14;
    sub_10005E31C();
    char v22 = a4(v20, v21, &v24);
    swift_release();
    swift_release_n(v14, 2LL);
    swift_bridgeObjectRelease();
    return v22 & 1;
  }

  __break(1u);
  return result;
}

uint64_t sub_10005E180(void *a1)
{
  return swift_bridgeObjectRelease(a1[1]);
}

uint64_t *sub_10005E1A8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *sub_10005E1DC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *sub_10005E238(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SchemaStoreModel(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SchemaStoreModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + sub_10000BDD4(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + sub_10000BDD4(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for Critbit.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Critbit.Iterator);
}

uint64_t sub_10005E300(uint64_t a1)
{
  return sub_10005DFFC(a1, v4, v3, v1, v2);
}

uint64_t sub_10005E314()
{
  return swift_retain(v0);
}

uint64_t sub_10005E31C()
{
  return swift_retain(v0);
}

Swift::Void __swiftcall NSFileManager.createRequiredCacheSubdirectories()()
{
  uint64_t v4 = v2 - v3;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v35 - v7;
  __chkstk_darwin(v6);
  char v10 = (char *)&v35 - v9;
  uint64_t v11 = sub_10005A18C();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_10005F878();
  uint64_t v15 = v13 - v14;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v35 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  char v22 = (char *)&v35 - v21;
  NSFileManager.parsecdAssetsDirectoryURL.getter(v20);
  if (sub_100010708((uint64_t)v10, 1LL, v11) == 1)
  {
    sub_100010AE8((uint64_t)v10);
    if (qword_1001D0618 != -1) {
      swift_once(&qword_1001D0618, sub_1000AD1F4);
    }
    uint64_t v23 = sub_100010ED4();
    sub_100010E78(v23, (uint64_t)qword_1001EDE48);
    os_log_type_t v24 = sub_10005F8D4();
    if (os_log_type_enabled((os_log_t)&SessionFilename, v24))
    {
      uint64_t v25 = (uint8_t *)sub_10001441C();
      *(_WORD *)uint64_t v25 = 0;
      sub_10001447C( (void *)&_mh_execute_header,  (os_log_s *)&SessionFilename,  v24,  "unable to obtain cache assets directory",  v25);
      sub_100010C34((uint64_t)v25);
    }
  }

  else
  {
    sub_10005F8E4((uint64_t)v22, (uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32));
    NSFileManager.createRequiredCohortsSubdirectories(cachesURL:)();
    uint64_t v26 = sub_100009BC8((uint64_t)v22, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
  }

  NSFileManager.parsecdCustomFBDirectoryURL.getter(v26);
  if (sub_100010708((uint64_t)v8, 1LL, v11) == 1)
  {
    sub_100010AE8((uint64_t)v8);
    if (qword_1001D0618 != -1) {
      swift_once(&qword_1001D0618, sub_1000AD1F4);
    }
    uint64_t v27 = sub_100010ED4();
    sub_100010E78(v27, (uint64_t)qword_1001EDE48);
    os_log_type_t v28 = sub_10005F8D4();
    if (os_log_type_enabled(v0, v28))
    {
      uint64_t v29 = (uint8_t *)sub_10001441C();
      *(_WORD *)uint64_t v29 = 0;
      sub_10001447C((void *)&_mh_execute_header, v0, v28, "unable to obtain cache custom feedback directory", v29);
      sub_100010C34((uint64_t)v29);
    }
  }

  else
  {
    sub_10005F8E4((uint64_t)v19, (uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32));
    sub_10005F410();
    NSFileManager.createRequiredFLSubdirectories()();
    uint64_t v30 = sub_100009BC8((uint64_t)v19, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
  }

  NSFileManager.parsecdSessionFBDirectoryURL.getter(v30);
  if (sub_100010708(v4, 1LL, v11) == 1)
  {
    sub_10005F8EC();
    if (qword_1001D0618 != -1) {
      swift_once(&qword_1001D0618, sub_1000AD1F4);
    }
    uint64_t v31 = sub_100010ED4();
    uint64_t v32 = (os_log_s *)sub_100010E78(v31, (uint64_t)qword_1001EDE48);
    os_log_type_t v33 = static os_log_type_t.fault.getter(v32);
    if (sub_100047154(v33))
    {
      uint64_t v34 = (uint8_t *)sub_10001441C();
      *(_WORD *)uint64_t v34 = 0;
      sub_10001447C( (void *)&_mh_execute_header,  v32,  (os_log_type_t)v0,  "unable to obtain cache session feedback directory",  v34);
      sub_100010C34((uint64_t)v34);
    }
  }

  else
  {
    sub_10005F8E4(v15, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32));
    _sSo13NSFileManagerC7parsecdE34createRequiredSessionFBDirectories3urly10Foundation3URLV_tF_0(v15);
    sub_100009BC8(v15, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
  }

  sub_100009AA0();
}

void _sSo13NSFileManagerC7parsecdE34createRequiredSessionFBDirectories3urly10Foundation3URLV_tF_0( uint64_t a1)
{
  uint64_t v2 = v1;
  URL.path.getter(a1);
  uint64_t v3 = sub_10000941C(qword_1001D41F8);
  uint64_t inited = swift_initStackObject(v3, v39);
  *(_OWORD *)(inited + sub_10000BDD4(v0 + 16) = xmmword_10015C7F0;
  *(void *)(inited + 64) = &type metadata for Int;
  *(void *)(inited + swift_unknownObjectWeakDestroy(v0 + 32) = NSFilePosixPermissions;
  *(void *)(inited + 40) = 448LL;
  type metadata accessor for FileAttributeKey(0LL);
  uint64_t v6 = v5;
  sub_10005F76C();
  uint64_t v7 = NSFilePosixPermissions;
  sub_10005F8FC(inited, v6, (uint64_t)&type metadata for Any + 8);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v38 = 0LL;
  LODWORD(inited) = [v1 setAttributes:isa ofItemAtPath:v9 error:&v38];

  id v10 = v38;
  if ((_DWORD)inited)
  {
    id v11 = v38;
  }

  else
  {
    id v13 = v38;
    uint64_t v14 = _convertNSErrorToError(_:)(v10);

    swift_willThrow(v15);
    swift_errorRelease(v14);
  }

  URL._bridgeToObjectiveC()(v12);
  uint64_t v17 = v16;
  uint64_t v18 = swift_initStackObject(v3, v37);
  *(_OWORD *)(v18 + sub_10000BDD4(v0 + 16) = xmmword_10015C7F0;
  *(void *)(v18 + 64) = &type metadata for Int;
  *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 32) = v7;
  *(void *)(v18 + 40) = 448LL;
  uint64_t v19 = v7;
  uint64_t v20 = sub_10005F8FC(v18, v6, (uint64_t)&type metadata for Any + 8);
  id v38 = 0LL;
  unsigned __int8 v21 = sub_10005F7AC((uint64_t)v17, 1, v20, (uint64_t)&v38, v2);

  if ((v21 & 1) != 0)
  {
    id v22 = v38;
  }

  else
  {
    id v34 = v38;
    id v23 = v38;
    uint64_t v24 = _convertNSErrorToError(_:)(v34);

    swift_willThrow(v25);
    if (qword_1001D0618 != -1) {
      swift_once(&qword_1001D0618, sub_1000AD1F4);
    }
    uint64_t v26 = sub_100010ED4();
    sub_1000093D0(v26, (uint64_t)qword_1001EDE48);
    swift_errorRetain(v24);
    uint64_t v27 = swift_errorRetain(v24);
    os_log_type_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.fault.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)sub_100009B20(12LL);
      uint64_t v31 = (void *)sub_100009B20(32LL);
      id v38 = v31;
      *(_DWORD *)uint64_t v30 = 136315138;
      swift_getErrorValue(v24);
      uint64_t v32 = Error.localizedDescription.getter(v36[1], v36[2]);
      uint64_t v35 = sub_1000307E0(v32, v33, (uint64_t *)&v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v30 + 4);
      sub_100009B3C();
      sub_100014530();
      sub_100014530();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Error making parsecd caches subdir: %s", v30, 0xCu);
      swift_arrayDestroy(v31, 1LL);
      sub_100010C34((uint64_t)v31);
      sub_100010C34((uint64_t)v30);

      sub_100014530();
    }

    else
    {
      sub_100014530();
      sub_100014530();
      sub_100014530();
    }
  }

Swift::Void __swiftcall NSFileManager.validateCacheSubdirectories()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v80 = *(void *)(v2 - 8);
  uint64_t v81 = v2;
  __chkstk_darwin(v2);
  uint64_t v79 = (char *)v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  __chkstk_darwin(v4);
  sub_10005F878();
  uint64_t v7 = v5 - v6;
  uint64_t v9 = __chkstk_darwin(v8);
  id v11 = (char *)v78 - v10;
  __chkstk_darwin(v9);
  id v13 = (char *)v78 - v12;
  uint64_t v14 = sub_10005A18C();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_10005F878();
  uint64_t v82 = v16 - v17;
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (uint64_t)v78 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (uint64_t)v78 - v23;
  NSFileManager.parsecdAssetsDirectoryURL.getter(v22);
  if (sub_100010708((uint64_t)v13, 1LL, v14) == 1)
  {
    sub_10005F8EC();
    if (qword_1001D0618 != -1) {
      swift_once(&qword_1001D0618, sub_1000AD1F4);
    }
    uint64_t v25 = sub_100010ED4();
    sub_100010E78(v25, (uint64_t)qword_1001EDE48);
    os_log_type_t v26 = sub_10005F8D4();
    if (sub_100010DE4(v26))
    {
      uint64_t v27 = (uint8_t *)sub_10001441C();
      *(_WORD *)uint64_t v27 = 0;
      sub_10001447C( (void *)&_mh_execute_header,  (os_log_s *)&SessionFilename,  (os_log_type_t)v13,  "unable to obtain cache assets directory",  v27);
      sub_100010C34((uint64_t)v27);
    }
  }

  else
  {
    uint64_t v29 = sub_10005A3B0(v24, (uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 32));
    URL.path.getter(v29);
    LOBYTE(v13) = sub_10005F8BC();
    sub_100009B3C();
    sub_10005F868();
    sub_10005087C();
    if ((v24 & 1) == 0)
    {
      v78[3] = static os_signpost_type_t.event.getter(v30);
      if (qword_1001D0610 != -1) {
        swift_once(&qword_1001D0610, sub_1000AC220);
      }
      LOBYTE(v13) = qword_1001D5D60;
      uint64_t v31 = sub_10000941C(&qword_1001D0C10);
      uint64_t v32 = sub_10005A72C(v31);
      *(_OWORD *)(v32 + sub_10000BDD4(v0 + 16) = xmmword_10015C7F0;
      unint64_t v33 = sub_10005F8F4(v32, (uint64_t)&type metadata for String);
      sub_10005F8AC(v33);
      sub_10005F89C(v34);
      uint64_t v35 = v79;
      static OSSignpostID.exclusive.getter();
      sub_10005F84C();
      sub_10005F8C4();
      os_signpost(_:dso:log:name:signpostID:_:_:)(v36, v37, v38, v39, v40, v41, v35);
      sub_10005F890();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v35, v81);
      sub_10005F8DC();
    }

    uint64_t v28 = sub_10005A26C(v24, *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
  }

  NSFileManager.parsecdCustomFBDirectoryURL.getter(v28);
  if (sub_100010708((uint64_t)v11, 1LL, v14) == 1)
  {
    sub_100010AE8((uint64_t)v11);
    if (qword_1001D0618 != -1) {
      swift_once(&qword_1001D0618, sub_1000AD1F4);
    }
    uint64_t v42 = sub_100010ED4();
    sub_100010E78(v42, (uint64_t)qword_1001EDE48);
    os_log_type_t v43 = sub_10005F8D4();
    if (sub_100010DE4(v43))
    {
      uint64_t v44 = (uint8_t *)sub_10001441C();
      *(_WORD *)uint64_t v44 = 0;
      sub_10001447C( (void *)&_mh_execute_header,  v1,  (os_log_type_t)v13,  "unable to obtain cache custom feedback directory",  v44);
      sub_100010C34((uint64_t)v44);
    }
  }

  else
  {
    uint64_t v46 = sub_10005A3B0(v21, (uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 32));
    URL.path.getter(v46);
    sub_10005F8BC();
    sub_100009B3C();
    sub_10005F868();
    sub_10005087C();
    if ((v21 & 1) == 0)
    {
      static os_signpost_type_t.event.getter(v47);
      if (qword_1001D0610 != -1) {
        swift_once(&qword_1001D0610, sub_1000AC220);
      }
      uint64_t v48 = sub_10000941C(&qword_1001D0C10);
      uint64_t v49 = sub_10005A72C(v48);
      *(_OWORD *)(v49 + sub_10000BDD4(v0 + 16) = xmmword_10015C7F0;
      unint64_t v50 = sub_10005F8F4(v49, (uint64_t)&type metadata for String);
      sub_10005F8AC(v50);
      sub_10005F89C(v51);
      uint64_t v52 = v79;
      static OSSignpostID.exclusive.getter();
      sub_10005F84C();
      sub_10005F8C4();
      os_signpost(_:dso:log:name:signpostID:_:_:)(v53, v54, v55, v56, v57, v58, v52);
      sub_10005F890();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v52, v81);
      sub_10005F8DC();
    }

    uint64_t v45 = sub_10005A26C(v21, *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
  }

  os_log_type_t v59 = v1;
  NSFileManager.parsecdSessionFBDirectoryURL.getter(v45);
  if (sub_100010708(v7, 1LL, v14) == 1)
  {
    sub_100010AE8(v7);
    if (qword_1001D0618 != -1) {
      swift_once(&qword_1001D0618, sub_1000AD1F4);
    }
    uint64_t v60 = sub_100010ED4();
    uint64_t v61 = (os_log_s *)sub_100010E78(v60, (uint64_t)qword_1001EDE48);
    os_log_type_t v62 = static os_log_type_t.fault.getter(v61);
    if (sub_100047154(v62))
    {
      uint64_t v63 = (uint8_t *)sub_10001441C();
      *(_WORD *)uint64_t v63 = 0;
      sub_10001447C((void *)&_mh_execute_header, v61, v59, "unable to obtain cache session feedback directory", v63);
      sub_100010C34((uint64_t)v63);
    }
  }

  else
  {
    char v64 = v82;
    uint64_t v65 = sub_10005A3B0(v82, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 32));
    URL.path.getter(v65);
    sub_10005F8BC();
    sub_100009B3C();
    sub_10005F868();
    sub_10005087C();
    if ((v64 & 1) == 0)
    {
      static os_signpost_type_t.event.getter(v66);
      if (qword_1001D0610 != -1) {
        swift_once(&qword_1001D0610, sub_1000AC220);
      }
      uint64_t v67 = sub_10000941C(&qword_1001D0C10);
      uint64_t v68 = sub_10005A72C(v67);
      *(_OWORD *)(v68 + sub_10000BDD4(v0 + 16) = xmmword_10015C7F0;
      unint64_t v69 = sub_10005F8F4(v68, (uint64_t)&type metadata for String);
      sub_10005F8AC(v69);
      sub_10005F89C(v70);
      uint64_t v71 = v79;
      static OSSignpostID.exclusive.getter();
      sub_10005F84C();
      sub_10005F8C4();
      os_signpost(_:dso:log:name:signpostID:_:_:)(v72, v73, v74, v75, v76, v77, v71);
      sub_10005F890();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v71, v81);
      sub_10005F8DC();
    }

    sub_10005A26C(v82, *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
  }

  sub_100009AA0();
}

void NSFileManager.createRequiredCohortsSubdirectories(cachesURL:)()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_10005A18C();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100010FCC();
  URL.appendingPathComponent(_:isDirectory:)(0x7374726F686F43LL, 0xE700000000000000LL, 1LL);
  _sSo13NSFileManagerC7parsecdE34createRequiredSessionFBDirectories3urly10Foundation3URLV_tF_0(v1);
  uint64_t v5 = sub_10000941C(qword_1001D41F8);
  uint64_t inited = swift_initStackObject(v5, v32);
  *(_OWORD *)(inited + sub_10000BDD4(v0 + 16) = xmmword_10015C7F0;
  *(void *)(inited + swift_unknownObjectWeakDestroy(v0 + 32) = NSFileProtectionKey;
  type metadata accessor for FileProtectionType(0LL);
  *(void *)(inited + 64) = v7;
  *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
  type metadata accessor for FileAttributeKey(0LL);
  uint64_t v9 = v8;
  sub_10005F76C();
  uint64_t v10 = NSFileProtectionKey;
  id v11 = NSFileProtectionCompleteUntilFirstUserAuthentication;
  sub_10005F8FC(inited, v9, (uint64_t)&type metadata for Any + 8);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  uint64_t v13 = sub_100009B3C();
  URL.path.getter(v13);
  NSString v14 = sub_10005F8BC();
  sub_100009B3C();
  id v31 = 0LL;
  LODWORD(v2) = [v2 setAttributes:isa ofItemAtPath:v14 error:&v31];

  id v15 = v31;
  if ((_DWORD)v2)
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    id v17 = v31;
    v16(v1, v3);
  }

  else
  {
    id v18 = v31;
    uint64_t v19 = _convertNSErrorToError(_:)(v15);

    swift_willThrow(v20);
    if (qword_1001D0618 != -1) {
      swift_once(&qword_1001D0618, sub_1000AD1F4);
    }
    uint64_t v21 = sub_100010ED4();
    sub_1000093D0(v21, (uint64_t)qword_1001EDE48);
    swift_errorRetain(v19);
    uint64_t v22 = swift_errorRetain(v19);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.fault.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)sub_100009B20(12LL);
      os_log_type_t v26 = (void *)sub_100009B20(32LL);
      id v31 = v26;
      *(_DWORD *)uint64_t v25 = 136315138;
      swift_getErrorValue(v19);
      uint64_t v27 = Error.localizedDescription.getter(v30[1], v30[2]);
      uint64_t v29 = sub_1000307E0(v27, v28, (uint64_t *)&v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v25 + 4);
      sub_100009B3C();
      sub_10005F888();
      sub_10005F888();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "error setting protection key: %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1LL);
      sub_100010C34((uint64_t)v26);
      sub_100010C34((uint64_t)v25);

      sub_10005F888();
    }

    else
    {

      sub_10005F888();
      sub_10005F888();
      sub_10005F888();
    }

    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  }

  sub_100009AA0();
}

uint64_t sub_10005F410()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = static _CPKnownFeedbackType.allCustomFeedbackDirectories.getter();
  uint64_t v5 = v4[2];
  if (v5)
  {
    uint64_t v6 = v4 + 5;
    do
    {
      uint64_t v7 = *(v6 - 1);
      uint64_t v8 = *v6;
      swift_bridgeObjectRetain(*v6);
      URL.appendingPathComponent(_:isDirectory:)(v7, v8, 1LL);
      swift_bridgeObjectRelease();
      _sSo13NSFileManagerC7parsecdE34createRequiredSessionFBDirectories3urly10Foundation3URLV_tF_0((uint64_t)v3);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      v6 += 2;
      --v5;
    }

    while (v5);
  }

  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall NSFileManager.createRequiredFLSubdirectories()()
{
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_10005A18C();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100010FCC();
  NSFileManager.feedbackLoggerCacheDirectoryURL.getter((uint64_t)v3);
  if (sub_100010708((uint64_t)v3, 1LL, v4) == 1)
  {
    sub_10005F8EC();
  }

  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v0, v3, v4);
    _sSo13NSFileManagerC7parsecdE34createRequiredSessionFBDirectories3urly10Foundation3URLV_tF_0(v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0, v4);
  }

id NSFileManager.saveInCache(file:from:)()
{
  uint64_t v1 = v0;
  NSFileManager.validateCacheSubdirectories()();
  URL.path.getter(v2);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v4 = [v0 fileExistsAtPath:v3];

  URL._bridgeToObjectiveC()(v5);
  if (v4)
  {
    uint64_t v8 = v6;
    URL._bridgeToObjectiveC()(v7);
    uint64_t v10 = v9;
    id v18 = 0LL;
    unsigned int v11 = [v1 replaceItemAtURL:v8 withItemAtURL:v9 backupItemName:0 options:1 resultingItemURL:0 error:&v18];
  }

  else
  {
    uint64_t v12 = v6;
    URL._bridgeToObjectiveC()(v7);
    uint64_t v10 = v13;
    id v18 = 0LL;
    unsigned int v11 = [v1 moveItemAtURL:v12 toURL:v13 error:&v18];
  }

  id v14 = v18;
  if (v11) {
    return v18;
  }
  id v16 = v18;
  _convertNSErrorToError(_:)(v14);

  return (id)swift_willThrow(v17);
}

unint64_t sub_10005F76C()
{
  unint64_t result = qword_1001D0B98;
  if (!qword_1001D0B98)
  {
    type metadata accessor for FileAttributeKey(255LL);
    unint64_t result = swift_getWitnessTable(&unk_10015D13C, v1);
    atomic_store(result, (unint64_t *)&qword_1001D0B98);
  }

  return result;
}

id sub_10005F7AC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v10 = [a5 createDirectoryAtURL:a1 withIntermediateDirectories:a2 & 1 attributes:isa error:a4];

  return v10;
}

  ;
}

id sub_10005F868()
{
  return objc_msgSend(v0, *(SEL *)(v2 + 200), v1);
}

  ;
}

uint64_t sub_10005F888()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10005F890()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_10005F89C(uint64_t a1@<X8>)
{
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 32) = a1;
  *(void *)(v2 + 40) = (v1 - 32) | 0x8000000000000000LL;
}

uint64_t sub_10005F8AC(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

NSString sub_10005F8BC()
{
  return String._bridgeToObjectiveC()();
}

  ;
}

uint64_t sub_10005F8D4()
{
  return static os_log_type_t.fault.getter();
}

void sub_10005F8DC()
{
}

uint64_t sub_10005F8E4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_10005F8EC()
{
  return sub_100010AE8(v0);
}

unint64_t sub_10005F8F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + sub_10000BDD4(v0 + 56) = a2;
  return sub_100042FE8();
}

uint64_t sub_10005F8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Dictionary.init(dictionaryLiteral:)(a1, a2, a3, v3);
}

uint64_t sub_10005F904(uint64_t a1)
{
  return swift_initClassMetadata2(a1, 0LL, 0LL, v2, a1 + 464);
}

uint64_t sub_10005F938(uint64_t a1)
{
  uint64_t v2 = a1;
  swift_getMetatypeMetadata();
  return String.init<A>(describing:)(&v2);
}

BOOL sub_10005F964(uint64_t a1)
{
  return a1 != 0;
}

uint64_t sub_10005F970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1001601FC, a3);
  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for UInt);
}

uint64_t sub_10005F9C4(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1001601FC, a1);
  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for UInt);
}

uint64_t sub_10005FA10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1001601FC, a2);
  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for UInt);
}

uint64_t sub_10005FA60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1001601FC, a2);
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for UInt);
}

BOOL sub_10005FAB0@<W0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = sub_10005F964(*a1);
  *a2 = result;
  return result;
}

void sub_10005FAE0(void *a1@<X8>)
{
  *a1 = 0LL;
}

unint64_t sub_10005FAE8()
{
  return 0xD000000000000010LL;
}

uint64_t sub_10005FB04(uint64_t a1)
{
  return sub_10005F938(*(void *)(a1 + 16));
}

const char *sub_10005FB0C()
{
  return "lifetime";
}

uint64_t sub_10005FB20()
{
  uint64_t v0 = sub_1000BEBA0();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t type metadata accessor for LifetimeSpanPrototype(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LifetimeSpanPrototype);
}

uint64_t sub_10005FB4C(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10005FB8C + 4 * byte_100160120[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10005FBAC + 4 * byte_100160125[v4]))();
  }
}

_BYTE *sub_10005FB8C(_BYTE *result, char a2)
{
  *BOOL result = a2;
  return result;
}

_BYTE *sub_10005FBAC(_BYTE *result)
{
  *BOOL result = 0;
  return result;
}

_DWORD *sub_10005FBB4(_DWORD *result, int a2)
{
  *BOOL result = a2;
  return result;
}

_WORD *sub_10005FBBC(_WORD *result, __int16 a2)
{
  *BOOL result = a2;
  return result;
}

_WORD *sub_10005FBC4(_WORD *result)
{
  *BOOL result = 0;
  return result;
}

_DWORD *sub_10005FBCC(_DWORD *result)
{
  *BOOL result = 0;
  return result;
}

uint64_t type metadata accessor for LifetimeTrackingActivity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LifetimeTrackingActivity);
}

uint64_t sub_10005FBE4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = swift_getWitnessTable(&unk_100160234, a2);
  uint64_t result = swift_getWitnessTable(&unk_1001601FC, a2);
  *(void *)(a1 + sub_10000BDD4(v0 + 16) = result;
  return result;
}

uint64_t sub_10005FC28(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100160274, a1);
}

void sub_10005FC38(char a1)
{
  uint64_t v3 = type metadata accessor for Lock();
  sub_10006B2D0(v3);
  *(void *)(v1 + sub_10000BDD4(v0 + 16) = sub_10006B694();
  *(_BYTE *)(v1 + sub_10000BDD4(v0 + 24) = a1;
  sub_1000110D4();
}

void sub_10005FC74()
{
  uint64_t v2 = sub_10006B430();
  sub_10006B2D0(v2);
  v0[2] = sub_10006B694();
  sub_10006AAFC(v1, (uint64_t)v0 + *(void *)(*v0 + 96LL), (uint64_t *)&unk_1001D5D20);
  sub_1000110D4();
}

void sub_10005FCBC()
{
  uint64_t v1 = sub_10006B430();
  sub_10006B2D0(v1);
  *(void *)(v0 + sub_10000BDD4(v0 + 16) = sub_10006B694();
  sub_100019F9C();
  uint64_t v2 = sub_10006B66C();
  v3(v2);
  sub_1000110D4();
}

void sub_10005FD10()
{
  uint64_t v2 = sub_10006B430();
  sub_10006B2D0(v2);
  *(void *)(v0 + sub_10000BDD4(v0 + 16) = sub_10006B694();
  *(void *)(v0 + sub_10000BDD4(v0 + 24) = v1;
  sub_1000110D4();
}

void sub_10005FD3C(uint64_t a1)
{
  uint64_t v2 = sub_10000941C(&qword_1001D4520);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v20[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000D1AEC(v20);
  uint64_t v5 = v20[0];
  uint64_t v6 = v20[1];
  int64_t v7 = v20[3];
  unint64_t v8 = v20[4];
  int64_t v9 = (unint64_t)(v20[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a1);
  if (!v8) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v11 = v10 | (v7 << 6);
  while (1)
  {
    uint64_t v16 = *(void *)(v5 + 48);
    uint64_t v17 = type metadata accessor for CancellableStoreKey(0LL);
    sub_10006AD08( v16 + *(void *)(*(void *)(v17 - 8) + 72LL) * v11,  (uint64_t)v4,  type metadata accessor for CancellableStoreKey);
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
    *(void *)&v4[*(int *)(v2 + 48)] = v18;
    swift_retain(v18);
    AnyCancellable.cancel()();
    sub_100019C1C((uint64_t)v4, &qword_1001D4520);
    if (v8) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v12 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_21;
    }
    unint64_t v13 = *(void *)(v6 + 8 * v12);
    int64_t v14 = v7 + 1;
    if (!v13)
    {
      int64_t v14 = v7 + 2;
      if (v7 + 2 >= v9) {
        goto LABEL_21;
      }
      unint64_t v13 = *(void *)(v6 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v7 + 3;
        if (v7 + 3 >= v9) {
          goto LABEL_21;
        }
        unint64_t v13 = *(void *)(v6 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v7 + 4;
          if (v7 + 4 >= v9) {
            goto LABEL_21;
          }
          unint64_t v13 = *(void *)(v6 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v7 + 5;
            if (v7 + 5 >= v9) {
              goto LABEL_21;
            }
            unint64_t v13 = *(void *)(v6 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v7 + 6;
              while (v15 < v9)
              {
                unint64_t v13 = *(void *)(v6 + 8 * v15++);
                if (v13)
                {
                  int64_t v14 = v15 - 1;
                  goto LABEL_18;
                }
              }

void sub_10005FF10()
{
  uint64_t v0 = sub_10000C4AC();
  sub_1000C170C(v0);
  sub_10001683C();
  sub_100009A90();
}

uint64_t sub_10005FF44(uint64_t a1)
{
  uint64_t v2 = sub_10000C4AC();
  uint64_t v3 = sub_1000C170C(v2);
  sub_10001683C();
  if (v3)
  {
    if (a1 && v3 == a1) {
      goto LABEL_7;
    }
    sub_10006B4EC();
    sub_1000A907C();
    sub_100010CA0();
  }

  if (a1)
  {
    swift_unknownObjectRetain(*(void *)(a1 + 64));
    sub_1000A8FB0();
    sub_10006B644();
  }

char *sub_10006000C()
{
  uint64_t v106 = v2;
  uint64_t v107 = v3;
  uint64_t v5 = v4;
  uint64_t v101 = v7;
  uint64_t v102 = v6;
  uint64_t v99 = v8;
  uint64_t v100 = (objc_class *)sub_100010E3C();
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10006B604();
  unint64_t v11 = &v0[OBJC_IVAR____TtC7parsecd16ClientConnection_assembly];
  *((void *)v11 + 1) = 0LL;
  swift_unknownObjectWeakInit(v11, 0LL);
  uint64_t v12 = OBJC_IVAR____TtC7parsecd16ClientConnection_transactionOpen;
  uint64_t v13 = sub_10000941C(&qword_1001D43B0);
  uint64_t v14 = sub_10006B2D0(v13);
  int64_t v15 = v0;
  *(void *)(v14 + sub_10000BDD4(v0 + 16) = sub_100006414(0);
  *(void *)&v0[v12] = v14;
  v15[OBJC_IVAR____TtC7parsecd16ClientConnection_isActiveListener] = 0;
  uint64_t v16 = OBJC_IVAR____TtC7parsecd16ClientConnection_transaction;
  uint64_t v17 = sub_10000941C(&qword_1001D43B8);
  sub_100009ACC(v17, 32LL);
  sub_10006B87C();
  *(void *)&v15[v16] = v18;
  uint64_t v19 = OBJC_IVAR____TtC7parsecd16ClientConnection_cancellableLock;
  uint64_t v20 = type metadata accessor for Locker();
  uint64_t v21 = sub_10006B2D0(v20);
  uint64_t v22 = (_DWORD *)sub_100009B20(4LL);
  *(void *)(v21 + sub_10000BDD4(v0 + 16) = v22;
  *uint64_t v22 = 0;
  *(void *)&v15[v19] = v21;
  uint64_t v23 = OBJC_IVAR____TtC7parsecd16ClientConnection_cancellables;
  uint64_t v24 = type metadata accessor for CancellableStoreKey(0LL);
  uint64_t v25 = ((uint64_t (*)(void))type metadata accessor for AnyCancellable)(0LL);
  sub_100008FF4(&qword_1001D43C0, type metadata accessor for CancellableStoreKey);
  *(void *)&v15[v23] = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v24, v25, v26);
  v15[OBJC_IVAR____TtC7parsecd16ClientConnection_parClientRequiresStateChangeNotifications] = 0;
  uint64_t v27 = OBJC_IVAR____TtC7parsecd16ClientConnection__lastState;
  uint64_t v28 = sub_10000941C(&qword_1001D43C8);
  sub_100009ACC(v28, 32LL);
  sub_10006B87C();
  *(void *)&v15[v27] = v29;
  *((void *)v11 + 1) = v99;
  uint64_t v30 = swift_unknownObjectWeakAssign(v11, v102);
  UUID.init()(v30);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))( &v15[OBJC_IVAR____TtC7parsecd16ClientConnection_connectionID],  v1,  v9);
  sub_100047A50();
  id v31 = (uint64_t *)&v15[OBJC_IVAR____TtC7parsecd16ClientConnection_clientStateManager];
  uint64_t *v31 = v32;
  v31[1] = v33;
  uint64_t v34 = v101;
  *(void *)&v15[OBJC_IVAR____TtC7parsecd16ClientConnection_remoteObject] = v101;
  *(void *)&v15[OBJC_IVAR____TtC7parsecd16ClientConnection_connection] = v5;
  sub_100009B34(v32, (unint64_t *)&qword_1001D43D0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  type metadata accessor for DispatchQoS(0LL);
  sub_100009B94();
  __chkstk_darwin(v35);
  sub_100009AD4();
  swift_unknownObjectRetain(v34);
  id v36 = v5;
  static DispatchQoS.background.getter(v36);
  uint64_t v37 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  sub_100009B94();
  __chkstk_darwin(v38);
  sub_100027240();
  v104[0] = 0LL;
  sub_100008FF4((unint64_t *)&qword_1001D0BB0, v39);
  dispatch thunk of OptionSet.init(rawValue:)(v104, v37, v40);
  uint64_t v41 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  __chkstk_darwin(v41);
  os_log_type_t v43 = (char *)&v94 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void))(v44 + 104))( v43,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  uint64_t v45 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000031LL,  0x800000010016FFC0LL,  v9,  v34,  v43,  0LL);
  *(void *)&v15[OBJC_IVAR____TtC7parsecd16ClientConnection_backgroundQueue] = v45;
  sub_100009B34(v45, &qword_1001D43E0, &OBJC_CLASS___OS_dispatch_source_ptr);
  uint64_t v46 = ((uint64_t (*)(void))type metadata accessor for OS_dispatch_source.TimerFlags)(0LL);
  uint64_t v47 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  sub_100009AD4();
  v104[0] = 0LL;
  sub_100008FF4(&qword_1001D43E8, v48);
  dispatch thunk of OptionSet.init(rawValue:)(v104, v46, v49);
  uint64_t v50 = ((uint64_t (*)(uint64_t, uint64_t))static OS_dispatch_source.makeTimerSource(flags:queue:))(v9, v45);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v9, v46);
  *(void *)&v15[OBJC_IVAR____TtC7parsecd16ClientConnection_timer] = v50;

  v105.receiver = v15;
  v105.super_class = v100;
  uint64_t v51 = (char *)objc_msgSendSuper2(&v105, "init");
  uint64_t v52 = *(void **)&v51[OBJC_IVAR____TtC7parsecd16ClientConnection_connection];
  uint64_t v53 = v51;
  [v52 setDelegate:v53];
  id v54 = [(id)objc_opt_self(NSFileManager) defaultManager];
  NSFileManager.validateCacheSubdirectories()();

  uint64_t v55 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
  id v56 = [v55 defaultCenter];
  sub_10006B5B8( v56,  v57,  v58,  (uint64_t)"fileDownloadNotificationWithNotification:",  (uint64_t)@"PARFileDownloadCompletedNotification");

  id v59 = [v55 defaultCenter];
  sub_10006B5B8( v59,  v60,  v61,  (uint64_t)"fileDeleteNotificationWithNotification:",  (uint64_t)@"PARFileDeletedNotification");

  uint64_t v62 = *(void *)&v53[OBJC_IVAR____TtC7parsecd16ClientConnection_timer];
  uint64_t v63 = OBJC_IVAR____TtC7parsecd16ClientConnection_timer;
  uint64_t v99 = OBJC_IVAR____TtC7parsecd16ClientConnection_timer;
  uint64_t ObjectType = swift_getObjectType(v62);
  uint64_t v65 = sub_10006B2D0((uint64_t)&unk_1001B4468);
  char v98 = v53;
  swift_unknownObjectWeakInit(v65 + 16, v53);
  uint64_t v66 = sub_100009ACC((uint64_t)&unk_1001B4490, 32LL);
  *(void *)(v66 + sub_10000BDD4(v0 + 16) = v65;
  *(void *)(v66 + sub_10000BDD4(v0 + 24) = v36;
  v104[4] = sub_100069D08;
  v104[5] = v66;
  v104[0] = _NSConcreteStackBlock;
  v104[1] = 1107296256LL;
  v104[2] = sub_1000BCFEC;
  v104[3] = &unk_1001B44A8;
  uint64_t v67 = _Block_copy(v104);
  uint64_t v68 = type metadata accessor for DispatchWorkItemFlags(0LL);
  sub_100009B94();
  __chkstk_darwin(v69);
  sub_100027240();
  char v103 = _swiftEmptyArrayStorage;
  sub_100008FF4((unint64_t *)&qword_1001D2B80, v70);
  uint64_t v72 = v71;
  uint64_t v100 = (objc_class *)v36;
  swift_unknownObjectRetain(v62);
  swift_retain(v65);
  uint64_t v73 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
  unint64_t v74 = sub_10000945C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v103, v73, v74, v68, v72);
  uint64_t v75 = ((uint64_t (*)(void))type metadata accessor for DispatchWorkItem)(0LL);
  swift_allocObject(v75, *(unsigned int *)(v75 + 48), *(unsigned __int16 *)(v75 + 52));
  uint64_t v76 = ((uint64_t (*)(id, void *))DispatchWorkItem.init(flags:block:))(v59, v67);
  swift_release();
  sub_10001683C();
  ((void (*)(uint64_t, uint64_t))OS_dispatch_source.setEventHandler(handler:))(v76, ObjectType);
  sub_10005A910();
  sub_100010D00();
  uint64_t v97 = *(void *)&v53[v63];
  uint64_t v96 = swift_getObjectType(v97);
  uint64_t v77 = sub_10006B8D4();
  uint64_t v94 = *(void *)(v77 - 8);
  uint64_t v95 = v77;
  __chkstk_darwin(v77);
  sub_10005F878();
  uint64_t v80 = v78 - v79;
  uint64_t v82 = __chkstk_darwin(v81);
  uint64_t v84 = (char *)&v94 - v83;
  static DispatchTime.now()(v82);
  uint64_t v85 = sub_10006B8CC();
  uint64_t v86 = *(void *)(*(void *)(v85 - 8) + 64LL);
  __chkstk_darwin(v85);
  unint64_t v87 = (v86 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  *(uint64_t *)((char *)&v94 - v87) = 60LL;
  uint64_t v88 = enum case for DispatchTimeInterval.seconds(_:);
  sub_10006B7F4((uint64_t)&v94 - v87, enum case for DispatchTimeInterval.seconds(_:));
  + infix(_:_:)(v84, (char *)&v94 - v87);
  sub_10006B7E0((uint64_t)&v94 - v87);
  uint64_t v89 = v95;
  uint64_t v94 = *(void *)(v94 + 8);
  uint64_t v90 = ((uint64_t (*)(char *, uint64_t))v94)(v84, v95);
  __chkstk_darwin(v90);
  uint64_t v91 = sub_10006B7F4((uint64_t)&v94 - v87, enum case for DispatchTimeInterval.never(_:));
  __chkstk_darwin(v91);
  *(uint64_t *)((char *)&v94 - v87) = 60LL;
  sub_10006B7F4((uint64_t)&v94 - v87, v88);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v80, (char *)&v94 - v87, (char *)&v94 - v87, v96);
  sub_10006B7E0((uint64_t)&v94 - v87);
  sub_10006B7E0((uint64_t)&v94 - v87);
  ((void (*)(uint64_t, uint64_t))v94)(v80, v89);
  uint64_t v92 = v98;
  sub_100010E3C();
  sub_10006B4EC();
  OS_dispatch_source.activate()();
  sub_100010CA0();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return v92;
}

void sub_10006081C(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v22, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    if (qword_1001D0518 != -1) {
      swift_once(&qword_1001D0518, sub_100034490);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_1000093D0(v6, (uint64_t)qword_1001EDC18);
    id v7 = v5;
    id v8 = a2;
    id v9 = v7;
    id v10 = v8;
    unint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc(18LL, -1LL);
      uint64_t v14 = swift_slowAlloc(32LL, -1LL);
      uint64_t v21 = v14;
      *(_DWORD *)uint64_t v13 = 136315394;
      uint64_t v15 = type metadata accessor for UUID(0LL);
      sub_100008FF4( (unint64_t *)&qword_1001D1690,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v15, v16);
      uint64_t v20 = sub_1000307E0(v17, v18, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v13 + 4);

      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 1024;
      unsigned int v19 = [v10 processIdentifier];

      LODWORD(v20) = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, (char *)&v20 + 4, v13 + 14);

      _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "timing out idle xpc transaction: %s from %d",  (uint8_t *)v13,  0x12u);
      swift_arrayDestroy(v14, 1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    else
    {
    }

    sub_100060A7C();
  }

void sub_100060A7C()
{
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC7parsecd16ClientConnection_isActiveListener) & 1) == 0)
  {
    uint64_t v2 = v0;
    if (sub_10006B788(*(void *)(v0 + OBJC_IVAR____TtC7parsecd16ClientConnection_transactionOpen)))
    {
      sub_10005FF10();
      if (v3)
      {
        if (*(void *)(*(void *)(v3 + 64) + 32LL))
        {
          sub_10000C4AC();
          sub_1000B1BAC();
          sub_10001683C();
        }

        sub_100010D00();
      }

      uint64_t v35 = *(void *)(v0 + OBJC_IVAR____TtC7parsecd16ClientConnection_backgroundQueue);
      uint64_t v4 = sub_10006B8D4();
      id v36 = v31;
      uint64_t v5 = *(void *)(v4 - 8);
      uint64_t v34 = v4;
      __chkstk_darwin(v4);
      sub_10005F878();
      uint64_t v8 = v6 - v7;
      uint64_t v32 = v31;
      uint64_t v10 = __chkstk_darwin(v9);
      os_log_type_t v12 = (char *)v31 - v11;
      static DispatchTime.now()(v10);
      uint64_t v13 = sub_10006B8CC();
      uint64_t v14 = *(void *)(v13 - 8);
      __chkstk_darwin(v13);
      sub_1000270AC();
      *uint64_t v1 = 60LL;
      (*(void (**)(void *, void, uint64_t))(v14 + 104))( v1,  enum case for DispatchTimeInterval.seconds(_:),  v13);
      + infix(_:_:)(v12, v1);
      (*(void (**)(void *, uint64_t))(v14 + 8))(v1, v13);
      uint64_t v33 = *(void (**)(void *, uint64_t))(v5 + 8);
      uint64_t v15 = sub_10006B66C();
      v16(v15);
      uint64_t v17 = sub_10006B2D0((uint64_t)&unk_1001B4468);
      swift_unknownObjectWeakInit(v17 + 16, v2);
      v38[4] = sub_100069FA0;
      v38[5] = v17;
      v38[0] = _NSConcreteStackBlock;
      v38[1] = 1107296256LL;
      void v38[2] = sub_1000D2F18;
      v38[3] = &unk_1001B44D0;
      unint64_t v18 = _Block_copy(v38);
      uint64_t v19 = type metadata accessor for DispatchQoS(0LL);
      v31[1] = v31;
      uint64_t v20 = *(void *)(v19 - 8);
      __chkstk_darwin(v19);
      uint64_t v21 = sub_10006B550();
      uint64_t v22 = swift_retain(v21);
      static DispatchQoS.unspecified.getter(v22);
      uint64_t v23 = type metadata accessor for DispatchWorkItemFlags(0LL);
      v31[0] = v31;
      sub_100009B84();
      __chkstk_darwin(v24);
      sub_10006B604();
      uint64_t v37 = _swiftEmptyArrayStorage;
      sub_100008FF4((unint64_t *)&qword_1001D2B80, v25);
      uint64_t v27 = v26;
      uint64_t v28 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
      unint64_t v29 = sub_10000945C();
      dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v28, v29, v23, v27);
      uint64_t v30 = v32;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v32, v31, v8, v18);
      _Block_release(v18);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v23);
      (*(void (**)(void *, uint64_t))(v20 + 8))(v31, v19);
      v33(v30, v34);
      sub_100011030();
      sub_100010D00();
    }
  }

  sub_100009AA0();
}

id sub_100060D84()
{
  uint64_t v1 = (objc_class *)sub_100010E3C();
  sub_100010E3C();
  sub_10006B4EC();
  OS_dispatch_source.cancel()();
  sub_100010CA0();
  if (sub_10006B788(*(void *)&v0[OBJC_IVAR____TtC7parsecd16ClientConnection_transactionOpen]))
  {
    sub_10006B734();
    if (v2)
    {
      if (*(void *)(*(void *)(v2 + 64) + 32LL))
      {
        sub_10000C4AC();
        sub_1000B1BAC();
        sub_10001683C();
      }

      swift_release();
    }
  }

  sub_10006B72C(0LL);
  sub_100060E3C();
  v4.receiver = v0;
  v4.super_class = v1;
  return objc_msgSendSuper2(&v4, "dealloc");
}

void sub_100060E3C()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + OBJC_IVAR____TtC7parsecd16ClientConnection_cancellableLock) + 16LL);
  os_unfair_lock_lock(v1);
  uint64_t v2 = (void *)(v0 + OBJC_IVAR____TtC7parsecd16ClientConnection_cancellables);
  sub_10006B2F0(v3, (uint64_t)v5);
  uint64_t v4 = swift_bridgeObjectRetain(*v2);
  sub_10005FD3C(v4);
  sub_100009B3C();
  os_unfair_lock_unlock(v1);
  sub_100014A40();
}

uint64_t sub_100060FA0()
{
  return type metadata accessor for ClientConnection(0LL);
}

uint64_t type metadata accessor for ClientConnection(uint64_t a1)
{
  return sub_100018ABC(a1, (uint64_t *)&unk_1001D43A0, (uint64_t)&nominal type descriptor for ClientConnection);
}

void sub_100060FBC()
{
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)(v1 + OBJC_IVAR____TtC7parsecd16ClientConnection_cancellableLock) + 16LL);
  os_unfair_lock_lock(v2);
  swift_beginAccess(v1 + OBJC_IVAR____TtC7parsecd16ClientConnection_cancellables, v11, 33LL, 0LL);
  uint64_t v3 = sub_10004EC38();
  sub_10000F5D0(v3, v0, v4, v5, v6, v7, v8, v9, v10, v11[0]);
  swift_endAccess(v11);
  os_unfair_lock_unlock(v2);
  sub_100014A40();
}

uint64_t sub_100061030()
{
  sub_1000A5A34((void (*)(uint64_t *__return_ptr))sub_10006AB28);
  return swift_release();
}

uint64_t sub_100061078@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = sub_10007FF00(a2);
  return swift_endAccess(v6);
}

void sub_1000610DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v21;
  a20 = v22;
  if (qword_1001D0518 != -1) {
    swift_once(&qword_1001D0518, sub_100034490);
  }
  uint64_t v23 = sub_100010ED4();
  sub_1000093D0(v23, (uint64_t)qword_1001EDC18);
  uint64_t v24 = (char *)sub_10006B860();
  Logger.logObject.getter(v24);
  os_log_type_t v25 = sub_10006B8B0();
  if (sub_100010DE4(v25))
  {
    uint64_t v26 = (uint8_t *)sub_100009B20(8LL);
    *(_DWORD *)uint64_t v26 = 67109120;
    unsigned int v56 = [*(id *)&v24[OBJC_IVAR____TtC7parsecd16ClientConnection_connection] processIdentifier];
    sub_10006B6DC((uint64_t)&v56, (uint64_t)&a9, (uint64_t)(v26 + 4));

    sub_10006B768();
    _os_log_impl(v27, v28, v29, v30, v26, 8u);
    sub_100010C34((uint64_t)v26);
  }

  else
  {
  }

  uint64_t v53 = *(void *)&v24[OBJC_IVAR____TtC7parsecd16ClientConnection_timer];
  uint64_t ObjectType = swift_getObjectType(v53);
  uint64_t v51 = sub_10006B8D4();
  id v54 = &v49;
  uint64_t v31 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  sub_10005F878();
  uint64_t v34 = (char *)(v32 - v33);
  uint64_t v50 = &v49;
  uint64_t v36 = __chkstk_darwin(v35);
  uint64_t v38 = (char *)&v49 - v37;
  static DispatchTime.now()(v36);
  uint64_t v39 = sub_10006B8CC();
  uint64_t v49 = (uint64_t)&v49;
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v55 = v24;
  uint64_t v41 = *(void *)(v40 + 64);
  __chkstk_darwin(v39);
  unint64_t v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  *(uint64_t *)((char *)&v49 - v42) = 60LL;
  uint64_t v43 = enum case for DispatchTimeInterval.seconds(_:);
  sub_10006B774((uint64_t)&v49 - v42, enum case for DispatchTimeInterval.seconds(_:));
  + infix(_:_:)(v38, (char *)&v49 - v42);
  sub_10006B8B8((uint64_t)&v49 - v42);
  uint64_t v44 = *(void (**)(char *, uint64_t))(v31 + 8);
  uint64_t v45 = v51;
  v44(v38, v51);
  sub_10006B73C();
  uint64_t v50 = &v49;
  __chkstk_darwin(v46);
  uint64_t v47 = sub_10006B774((uint64_t)&v49 - v42, enum case for DispatchTimeInterval.never(_:));
  uint64_t v49 = (uint64_t)&v49;
  __chkstk_darwin(v47);
  *(uint64_t *)((char *)&v49 - v42) = 60LL;
  sub_10006B774((uint64_t)&v49 - v42, v43);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v34, (char *)&v49 - v42, (char *)&v49 - v42, ObjectType);
  uint64_t v48 = v55;
  sub_10006B8B8((uint64_t)&v49 - v42);
  sub_10006B8B8((uint64_t)&v49 - v42);
  v44(v34, v45);
  sub_10006B73C();
  if ((sub_10000649C( *(unsigned __int8 **)(*(void *)&v48[OBJC_IVAR____TtC7parsecd16ClientConnection_transactionOpen] + 16LL),  1u) & 1) == 0)
  {
    sub_10000C4AC();
    os_transaction_create("Open Client connection transaction");
    sub_1000C179C();
    sub_10001449C();
    sub_10001683C();
  }

  sub_100009AA0();
}

void sub_1000613EC(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v14, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = (char *)Strong;
    if ((sub_1000064B4(*(_BYTE **)(*(void *)(Strong + OBJC_IVAR____TtC7parsecd16ClientConnection_transactionOpen)
                                  + 16LL)) & 1) != 0)
    {
      if (qword_1001D0518 != -1) {
        swift_once(&qword_1001D0518, sub_100034490);
      }
      uint64_t v4 = type metadata accessor for Logger(0LL);
      uint64_t v5 = sub_1000093D0(v4, (uint64_t)qword_1001EDC18);
      uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
      os_log_type_t v7 = static os_log_type_t.default.getter(v6);
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v8 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Timed out client reconnected, leaving connection intact.",  v8,  2u);
        swift_slowDealloc(v8, -1LL, -1LL);
      }

      else
      {

        uint64_t v6 = (os_log_s *)v3;
      }
    }

    else
    {
      swift_retain(*(void *)&v3[OBJC_IVAR____TtC7parsecd16ClientConnection_transaction]);
      sub_1000C179C();
      swift_release();
      if (qword_1001D0518 != -1) {
        swift_once(&qword_1001D0518, sub_100034490);
      }
      uint64_t v9 = type metadata accessor for Logger(0LL);
      sub_1000093D0(v9, (uint64_t)qword_1001EDC18);
      uint64_t v6 = v3;
      uint64_t v10 = (os_log_s *)Logger.logObject.getter(v6);
      os_log_type_t v11 = static os_log_type_t.default.getter(v10);
      if (os_log_type_enabled(v10, v11))
      {
        os_log_type_t v12 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)os_log_type_t v12 = 67109120;
        unsigned int v13 = [*(id *)((char *)v6 + OBJC_IVAR____TtC7parsecd16ClientConnection_connection) processIdentifier];
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, v14, v12 + 4);

        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Invalidating inactive connection from pid %d", v12, 8u);
        swift_slowDealloc(v12, -1LL, -1LL);
      }

      else
      {

        uint64_t v10 = v6;
      }

      [*(id *)((char *)v6 + OBJC_IVAR____TtC7parsecd16ClientConnection_connection) invalidate];
    }
  }

void sub_1000616A0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10006B428();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v29[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000941C((uint64_t *)&unk_1001D5D20);
  sub_100009B94();
  __chkstk_darwin(v9);
  sub_100009B54();
  if (*(_BYTE *)(v3 + OBJC_IVAR____TtC7parsecd16ClientConnection_parClientRequiresStateChangeNotifications) != 1) {
    return;
  }
  sub_10008FF34(a1);
  if (!v10)
  {
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    goto LABEL_9;
  }

  uint64_t v11 = v10;
  v29[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"bag");
  v29[1] = v12;
  AnyHashable.init<A>(_:)(v29);
  sub_10000BEF0((uint64_t)v30, v11, &v31);
  sub_100009B3C();
  uint64_t v13 = sub_10000BD34((uint64_t)v30);
  if (!*((void *)&v32 + 1))
  {
LABEL_9:
    uint64_t v17 = (uint64_t *)&unk_1001D32C0;
    unint64_t v18 = &v31;
    goto LABEL_10;
  }

  uint64_t v14 = sub_100009B34(v13, (unint64_t *)&qword_1001D47F0, &OBJC_CLASS___PARBag_ptr);
  uint64_t v15 = (void *)v30[0];
  sub_10006B734();
  if (!v16)
  {

    return;
  }

  sub_100082F58();
  if (sub_100010708(v2, 1LL, v5))
  {

    sub_100011030();
    uint64_t v17 = (uint64_t *)&unk_1001D5D20;
    unint64_t v18 = (__int128 *)v2;
LABEL_10:
    sub_100019C1C((uint64_t)v18, v17);
    return;
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2, v5);
  sub_100019C1C(v2, (uint64_t *)&unk_1001D5D20);
  uint64_t v19 = UserAgent.fullString.getter();
  uint64_t v21 = v20;
  uint64_t v22 = sub_100019F90();
  v23(v22);
  objc_allocWithZone(&OBJC_CLASS___PARBag);
  id v24 = v15;
  sub_1000C4C48(v24, v19, v21);
  uint64_t v26 = v25;
  uint64_t v27 = *(void **)(v3 + OBJC_IVAR____TtC7parsecd16ClientConnection_remoteObject);
  if (v27)
  {
    [v27 bagDidLoad:v26 error:0];

    sub_100011030();
  }

  else
  {
    sub_100011030();
  }
}

void sub_10006194C(void *a1)
{
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC7parsecd16ClientConnection_parClientRequiresStateChangeNotifications) != 1) {
    goto LABEL_14;
  }
  sub_10008FF34(a1);
  if (!v2)
  {
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    goto LABEL_11;
  }

  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"identifier");
  uint64_t v28 = v3;
  uint64_t v4 = sub_10006B7A8(v26, &type metadata for String, &protocol witness table for String);
  sub_10006B634(v4, v5, v6, v7, v8, v9, v10, v11, v24, v26, v28, v30, v31, v32, v33, v34, v35);
  sub_1000325E4();
  sub_10000BD34((uint64_t)&v30);
  if (!*((void *)&v36 + 1))
  {
LABEL_11:
    sub_100019C1C((uint64_t)&v35, (uint64_t *)&unk_1001D32C0);
    goto LABEL_14;
  }

  if ((sub_10006B578((uint64_t)&type metadata for String, (uint64_t)&type metadata for Any, v25, v27, v29) & 1) != 0)
  {
    uint64_t v13 = v30;
    uint64_t v12 = v31;
    uint64_t v14 = *(void **)(v1 + OBJC_IVAR____TtC7parsecd16ClientConnection_remoteObject);
    if (v14)
    {
      NSString v15 = String._bridgeToObjectiveC()();
      [v14 didDownloadResource:v15];
    }

    if (v13 == 0xD00000000000001BLL && v12 == 0x8000000100170130LL)
    {
      uint64_t v16 = swift_bridgeObjectRelease();
LABEL_13:
      sub_100009B34(v16, (unint64_t *)&unk_1001D4510, &OBJC_CLASS___NSXPCConnection_ptr);
      sub_10004B488(0xD000000000000014LL, 0x800000010016EC30LL, 0LL);
      uint64_t v19 = v18;
      id v20 = objc_allocWithZone((Class)type metadata accessor for FlusherClient());
      id v21 = FlusherClient.init(connection:)(v19);
      uint64_t v22 = _s7SQLiter18SQLiteBaseFunctionC4nameSSSgvpfi_0();
      v23(v22);

      goto LABEL_14;
    }

    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v12, 0xD00000000000001BLL, 0x8000000100170130LL, 0LL);
    uint64_t v16 = sub_1000325E4();
    if ((v17 & 1) != 0) {
      goto LABEL_13;
    }
  }

LABEL_14:
  sub_10006B494();
}

    __break(1u);
    return result;
  }

  sub_1000C0168((uint64_t)v13, v20, v21);
  sub_1000C0120();
  sub_10004344C(v1, (uint64_t)v6);
  uint64_t v25 = type metadata accessor for OSSignpostID(0LL);
  uint64_t result = sub_100010708((uint64_t)v6, 1LL, v25);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v26 = sub_1000C0140();
  sub_1000BF804(v26, v16, v10, v18);
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v10);
  (*(void (**)(_BYTE *, uint64_t))(*(void *)(v25 - 8) + 8LL))(v6, v25);
LABEL_7:
  uint64_t Strong = swift_weakLoadStrong(v1 + 16);
  if (Strong)
  {
    uint64_t v29 = Strong;
    uint64_t v30 = type metadata accessor for ActivitySpan(0LL, v10, v18, v28);
    sub_1000812A4(v1, v29, v30, (uint64_t (**)(void, void))&off_1001B7B30);
    uint64_t v45 = 1;
    *(void *)&v44[14] = 0LL;
    *(void *)&v44[6] = 0LL;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    sub_10003B8E8();
    sub_10001450C();
    swift_release();
    uint64_t v31 = v38;
    *uint64_t v38 = 0LL;
    v31[1] = 0LL;
    *((_BYTE *)v31 + sub_10000BDD4(v0 + 16) = 0;
    *(_BYTE *)(v1 + 41) = v45;
    *(_OWORD *)(v1 + 42) = *(_OWORD *)v44;
    *(void *)(v1 + sub_10000BDD4(v0 + 56) = *(void *)&v44[14];
    *(void *)(v1 + 64) = _swiftEmptyArrayStorage;
    *(void *)(v1 + 72) = 0LL;
    swift_bridgeObjectRelease();
    sub_1000110A8();
    sub_10001450C();
    swift_unknownObjectRelease();
    *(_BYTE *)(v1 + *(void *)(*(void *)v1 + 120LL)) = 1;
    return swift_weakAssign(v1 + 16, 0LL);
  }

  else
  {
    uint64_t v32 = sub_1000BF190(0LL);
    if ((v32 & 1) != 0)
    {
      uint64_t v33 = static os_log_type_t.fault.getter(v32);
      os_log(_:dso:log:type:_:)( "ActivityMonitor is deallocated before ActivitySpan's end() method is invoked. Activity's bookkeeping could be inaccurate.",  121LL,  2LL,  &_mh_execute_header,  v16,  v33,  _swiftEmptyArrayStorage);
    }

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    sub_10003B8E8();
    return sub_10001450C();
  }

  if ((a4 & 1) == 0)
  {
LABEL_5:
    if ((a5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

    __break(1u);
  }

    uint64_t v10 = (v14 - 1) & v14;
    uint64_t v12 = __clz(__rbit64(v14)) + (v13 << 6);
    uint64_t v9 = v13;
LABEL_15:
    uint64_t v16 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v12);
    unint64_t v18 = *v16;
    char v17 = v16[1];
    swift_bridgeObjectRetain(v17);
    ProtoSchemaStore.messageSchema(withName:)();
    if (v4)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }

    uint64_t v19 = sub_10000941C(&qword_1001D8660);
    id v20 = type metadata accessor for ProtoMessageSchema();
    if ((swift_dynamicCast(&v44, v42, v19, v20, 6LL) & 1) != 0)
    {
      __int128 v36 = a1;
      id v21 = v44;
      uint64_t v22 = *(void *)(v44 + 32);
      swift_bridgeObjectRetain(v17);
      uint64_t v37 = v21;
      swift_retain(v21);
      swift_bridgeObjectRetain(v22);
      uint64_t v34 = a3;
      uint64_t v24 = sub_1000EC4E8(v23);
      swift_bridgeObjectRelease();
      swift_beginAccess(v21 + 88, v41, 0LL, 0LL);
      uint64_t v25 = *(void *)(v21 + 88);
      __int128 v35 = v24;
      swift_retain(v24);
      swift_bridgeObjectRetain(v25);
      uint64_t v26 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for OneOfModel,  &protocol witness table for String);
      swift_retain(v37);
      sub_1000FDF14(v26, v25, v37);
      uint64_t v28 = v27;
      swift_bridgeObjectRelease();
      swift_beginAccess(v37 + 72, v40, 0LL, 0LL);
      uint64_t v29 = *(void *)(v37 + 72);
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v29);
      uint64_t v30 = (void *)Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for PropertyModel,  &protocol witness table for String);
      swift_retain(v37);
      uint64_t v33 = sub_1000FE208(v30, v29);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v36);
      v42[0] = v36;
      sub_100103118(v35, v33, v28, v18, v17, isUniquelyReferenced_nonNull_native);
      a1 = v42[0];
      swift_release();
      swift_bridgeObjectRelease_n(v17, 2LL);
      swift_bridgeObjectRelease();
      a3 = v34;
    }

    else
    {
      swift_bridgeObjectRelease();
    }
  }

  __break(1u);
}

    *(v6 - 1) = v5;
    uint64_t v9 = a2;
    uint64_t v10 = a5;
    swift_once(&qword_1001DA908, sub_10010B754);
    uint64_t v5 = (const void *)*(v6 - 1);
    a2 = v9;
    a5 = v10;
    goto LABEL_10;
  }

  uint64_t v8 = &_sqlite3_free;
LABEL_11:
  sqlite3_result_blob(a2, v5, a5, (void (__cdecl *)(void *))v8);
}

  sub_10002716C();
}

void sub_100061B6C(void *a1)
{
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC7parsecd16ClientConnection_parClientRequiresStateChangeNotifications) != 1) {
    goto LABEL_9;
  }
  sub_10008FF34(a1);
  if (!v2)
  {
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    goto LABEL_8;
  }

  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"identifier");
  uint64_t v18 = v3;
  uint64_t v4 = sub_10006B7A8(v16, &type metadata for String, &protocol witness table for String);
  sub_10006B634(v4, v5, v6, v7, v8, v9, v10, v11, v14, v16, v18, v20[0], v20[1], v20[2], v20[3], v20[4], v21);
  sub_1000325E4();
  sub_10000BD34((uint64_t)v20);
  if (!*((void *)&v22 + 1))
  {
LABEL_8:
    sub_100019C1C((uint64_t)&v21, (uint64_t *)&unk_1001D32C0);
    goto LABEL_9;
  }

  if ((sub_10006B578((uint64_t)&type metadata for String, (uint64_t)&type metadata for Any, v15, v17, v19) & 1) != 0)
  {
    uint64_t v12 = *(void **)(v1 + OBJC_IVAR____TtC7parsecd16ClientConnection_remoteObject);
    if (v12)
    {
      NSString v13 = String._bridgeToObjectiveC()();
      sub_1000325E4();
      [v12 didDeleteResource:v13];
    }

    else
    {
      sub_1000325E4();
    }
  }

void sub_100061CC0(void *a1, char a2)
{
  if (a1)
  {
    id v4 = a1;
    sub_1000D0FEC(v4);
    unint64_t v6 = v5;
    if (v5 >= 2)
    {
      if ((a2 & 1) != 0)
      {
        uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC7parsecd16ClientConnection_assembly);
        sub_10004EC38();
        if (Strong)
        {
          sub_100049824();
          sub_100010CA0();
          sub_1000BAB84();
          sub_10006B644();
        }
      }

      else
      {
        sub_10004EC38();
      }

      uint64_t v8 = sub_10004EC38();
      sub_10006B72C(v8);

      sub_100040904(v6);
    }

    else
    {
      sub_10006B72C(0LL);
    }
  }

  else
  {
    sub_10006B734();
  }

void sub_100061D90()
{
  uint64_t v3 = v0;
  uint64_t v20 = v5;
  uint64_t v21 = v4;
  uint64_t v7 = v6;
  sub_100019F9C();
  sub_100009B84();
  __chkstk_darwin(v8);
  sub_10006B61C();
  sub_10000941C((uint64_t *)&unk_1001D5D20);
  sub_100009B94();
  __chkstk_darwin(v9);
  uint64_t v10 = sub_10006B3FC();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_1000270AC();
  sub_100061CC0(v7, 1);
  if (v12 < 2) {
    goto LABEL_2;
  }
  sub_10006B750();
  if (sub_100010708(v2, 1LL, v10) == 1)
  {
    sub_10006B5D4();
    sub_100019C1C(v2, (uint64_t *)&unk_1001D5D20);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v1, v2, v10);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(&v3[OBJC_IVAR____TtC7parsecd16ClientConnection_assembly]);
    if (!Strong)
    {
      sub_10006B3EC();
LABEL_2:
      sub_10006B5D4();
      goto LABEL_8;
    }

    uint64_t v14 = Strong;
    uint64_t v15 = sub_10006B75C();
    uint64_t v16 = Client.type.getter(v15);
    sub_10006B8C0();
    sub_10006B664();
    if (v16 != sub_10006B888())
    {
      v3[OBJC_IVAR____TtC7parsecd16ClientConnection_parClientRequiresStateChangeNotifications] = 1;
      uint64_t v19 = sub_10006B75C();
      Client.type.getter(v19);
      sub_10006B8C0();
      swift_unknownObjectRetain(v14);
      v3;
      sub_100026250(v21, v20);
      sub_10008309C();
      sub_10006B5D4();
      sub_10006B3EC();
      swift_unknownObjectRelease();
      goto LABEL_10;
    }

    sub_10006B3EC();
    sub_10006B5D4();
    swift_unknownObjectRelease();
  }

LABEL_8:
  if (v21)
  {
    uint64_t v17 = _s7SQLiter18SQLiteBaseFunctionC4nameSSSgvpfi_0();
    v18(v17);
  }

    uint64_t v4 = (unsigned int *)&enum case for Apple_Parsec_Search_V2_Location.Source.unknown(_:);
    goto LABEL_9;
  }

  uint64_t v4 = (unsigned int *)&enum case for Apple_Parsec_Search_V2_Location.Source.wiFi(_:);
LABEL_9:
  uint64_t v5 = *v4;
  unint64_t v6 = type metadata accessor for Apple_Parsec_Search_V2_Location.Source(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104LL))(a1, v5, v6);
}

    uint64_t v40 = sub_100111F38();
    sub_100116658(v40, (uint64_t)&type metadata for Int32, v40);
LABEL_9:
    swift_release();
LABEL_10:
    sub_10002716C();
    return;
  }

  __break(1u);
}

    a10 = v34;
    uint64_t v39 = sub_100111F74();
    sub_100116658(v39, (uint64_t)&type metadata for Int64, v39);
LABEL_9:
    swift_release();
LABEL_10:
    sub_10002716C();
    return;
  }

  __break(1u);
}

  *(void *)a4 = v12;
  *(void *)(a4 + 8) = v5;
  *(void *)(a4 + sub_10000BDD4(v0 + 16) = v13;
  *(void *)(a4 + sub_10000BDD4(v0 + 24) = v14;
  *(void *)(a4 + swift_unknownObjectWeakDestroy(v0 + 32) = v15;
  *(void *)(a4 + 40) = v16;
  *(void *)(a4 + 48) = v17;
  *(void *)(a4 + sub_10000BDD4(v0 + 56) = v18;
  *(_BYTE *)(a4 + 64) = v19;
  return result;
}

void sub_100061F7C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v12 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  [v12 addObserver:a5 selector:"bagChangeNotificationWithNotification:" name:@"PARBagChangeNotification" object:0];

  if (a1)
  {
    id v13 = a1;
    sub_10006A374(v13, (SEL *)&selRef_version);
    if (v15) {
      uint64_t v16 = v14;
    }
    else {
      uint64_t v16 = 0LL;
    }
    uint64_t v37 = v16;
    if (v15) {
      unint64_t v17 = v15;
    }
    else {
      unint64_t v17 = 0xE000000000000000LL;
    }
    if (([v13 feedbackEnabled] & 1) == 0)
    {
      if (qword_1001D04F8 != -1) {
        swift_once(&qword_1001D04F8, sub_1000343F4);
      }
      uint64_t v18 = sub_100010ED4();
      sub_100010E78(v18, (uint64_t)qword_1001EDBB8);
      os_log_type_t v19 = sub_10006B8B0();
      if (sub_100010DE4(v19))
      {
        uint64_t v20 = (uint8_t *)sub_100009B20(12LL);
        *(_DWORD *)uint64_t v20 = 134349056;
        uint64_t v40 = ClientType.rawValue.getter(a8);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v20 + 4);
        sub_10006B768();
        sub_100014564(v21, v22, v23, v24, v20);
        sub_100010C34((uint64_t)v20);
      }
    }

    if (qword_1001D04E8 != -1) {
      swift_once(&qword_1001D04E8, sub_1000343B4);
    }
    uint64_t v25 = sub_100010ED4();
    uint64_t v26 = (void *)sub_1000093D0(v25, (uint64_t)qword_1001EDB88);
    uint64_t v27 = swift_bridgeObjectRetain(v17);
    Logger.logObject.getter(v27);
    os_log_type_t v28 = sub_10006B8B0();
    if (sub_100010DE4(v28))
    {
      uint64_t v29 = sub_100009B20(22LL);
      uint64_t v30 = sub_100009B20(32LL);
      uint64_t v40 = v30;
      *(_DWORD *)uint64_t v29 = 136315394;
      swift_bridgeObjectRetain(v17);
      uint64_t v39 = sub_1000307E0(v37, v17, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v29 + 4);
      sub_100019FA4(v17);
      *(_WORD *)(v29 + 12) = 2050;
      uint64_t v39 = ClientType.rawValue.getter(a8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v29 + 14);
      sub_10006B768();
      _os_log_impl(v31, v32, v33, v34, (uint8_t *)v29, 0x16u);
      sub_100030F9C(v30);
      sub_100010C34(v30);
      sub_100010C34(v29);

      if (!a6) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }

    sub_100019F4C(v17);
    if (a6)
    {
LABEL_22:
      uint64_t v36 = sub_1000C5FB0(a2);
      sub_10006B81C((uint64_t)a1);
      swift_errorRelease(v36);
    }
  }

  else if (a6)
  {
    uint64_t v35 = sub_1000C5FB0(a2);
    sub_10006B81C(0LL);
    swift_errorRelease(v35);
    return;
  }

void sub_100062390(void *a1, uint64_t a2, void (**a3)(void, void, void))
{
  uint64_t v6 = sub_10000941C((uint64_t *)&unk_1001D0BD0);
  __chkstk_darwin(v6);
  uint64_t v49 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t BagTask = type metadata accessor for ForceFetchBagTask(0LL);
  uint64_t v8 = *(void *)(BagTask - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(BagTask);
  __chkstk_darwin(v10);
  id v12 = (unint64_t *)((char *)&v43 - v11);
  uint64_t v13 = sub_10000941C((uint64_t *)&unk_1001D5D20);
  __chkstk_darwin(v13);
  unint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = type metadata accessor for UserAgent(0LL);
  uint64_t v16 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = swift_allocObject(&unk_1001B4800, 24LL, 7LL);
  uint64_t v51 = a3;
  uint64_t v52 = v19;
  *(void *)(v19 + sub_10000BDD4(v0 + 16) = a3;
  _Block_copy(a3);
  sub_100061CC0(a1, 1);
  unint64_t v21 = v20;
  if (v20 < 2)
  {
    sub_100040904(v20);
LABEL_5:
    uint64_t v25 = v51;
    goto LABEL_6;
  }

  uint64_t v46 = (uint64_t)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = a2;
  uint64_t v44 = v9;
  uint64_t v45 = v8;
  uint64_t v23 = BagTask;
  uint64_t v22 = (uint64_t)v49;
  sub_100082F58();
  uint64_t v24 = v50;
  if (sub_100010708((uint64_t)v15, 1LL, v50) == 1)
  {
    sub_100040904(v21);
    sub_100019C1C((uint64_t)v15, (uint64_t *)&unk_1001D5D20);
    goto LABEL_5;
  }

  uint64_t v26 = v16;
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  os_log_type_t v28 = v18;
  v27(v18, v15, v24);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v47 + OBJC_IVAR____TtC7parsecd16ClientConnection_assembly);
  uint64_t v25 = v51;
  if (Strong)
  {
    swift_unknownObjectRelease();
    uint64_t v30 = v24;
    uint64_t v31 = (uint64_t)v12;
    os_log_t v32 = (char *)v12 + *(int *)(v23 + 20);
    uint64_t v43 = v26;
    os_log_type_t v33 = *(void (**)(char *, char *))(v26 + 16);
    uint64_t v34 = v30;
    v33(v32, v18);
    *id v12 = v21;
    uint64_t v35 = (unint64_t *)((char *)v12 + *(int *)(v23 + 24));
    uint64_t v36 = v52;
    void *v35 = sub_10006B200;
    v35[1] = v36;
    uint64_t v37 = type metadata accessor for TaskPriority(0LL);
    sub_100009654(v22, 1LL, 1LL, v37);
    uint64_t v38 = (uint64_t)v12;
    uint64_t v39 = v46;
    sub_10006AD08(v38, v46, type metadata accessor for ForceFetchBagTask);
    uint64_t v40 = *(unsigned __int8 *)(v45 + 80);
    uint64_t BagTask = (uint64_t)v28;
    uint64_t v41 = (v40 + 32) & ~v40;
    uint64_t v42 = swift_allocObject(&unk_1001B4828, v41 + v44, v40 | 7);
    *(void *)(v42 + sub_10000BDD4(v0 + 16) = 0LL;
    *(void *)(v42 + sub_10000BDD4(v0 + 24) = 0LL;
    sub_10006ABD8(v39, v42 + v41, type metadata accessor for ForceFetchBagTask);
    sub_10006AC6C(v21);
    swift_retain(v36);
    sub_100069B14(v22, (uint64_t)&unk_1001D44F8, v42);
    swift_release();
    sub_100040904(v21);
    sub_10004D784(v31, type metadata accessor for ForceFetchBagTask);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(BagTask, v34);
    goto LABEL_7;
  }

  (*(void (**)(char *, uint64_t))(v26 + 8))(v18, v24);
  sub_100040904(v21);
LABEL_6:
  v25[2](v25, 0LL, 0LL);
LABEL_7:
  swift_release();
  _Block_release(v25);
}

void sub_100062778(void *a1, void *a2, uint64_t a3, void (**a4)(void, void, void, void))
{
  uint64_t v8 = type metadata accessor for Client(0LL);
  uint64_t v64 = *(void *)(v8 - 8);
  uint64_t v65 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UserAgent(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_10000941C((uint64_t *)&unk_1001D5D20);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  _Block_copy(a4);
  _Block_copy(a4);
  _Block_copy(a4);
  _Block_copy(a4);
  _Block_copy(a4);
  _Block_copy(a4);
  _Block_copy(a4);
  _Block_copy(a4);
  _Block_copy(a4);
  _Block_copy(a4);
  uint64_t v18 = a3;
  sub_100061CC0(a1, 1);
  unint64_t v20 = (os_log_s *)v19;
  if (v19 >= 2)
  {
    sub_100082F58();
    if (sub_100010708((uint64_t)v17, 1LL, v11))
    {
      sub_100019C1C((uint64_t)v17, (uint64_t *)&unk_1001D5D20);
      NSString v21 = 0LL;
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v17, v11);
      sub_100019C1C((uint64_t)v17, (uint64_t *)&unk_1001D5D20);
      UserAgent.client.getter(v22);
      uint64_t v23 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      Client.name.getter(v23);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v10, v65);
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }

    uint64_t v24 = a2;
    objc_msgSend(a2, "setClientShortName:", v21, v64, v65);

    uint64_t v25 = objc_opt_self(&OBJC_CLASS___PARSearchRequest);
    uint64_t v26 = swift_dynamicCastObjCClass(a2, v25);
    if (v26)
    {
      uint64_t v27 = (void *)v26;
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v18 + OBJC_IVAR____TtC7parsecd16ClientConnection_assembly);
      id v29 = v24;
      char v30 = sub_100062D48((uint64_t)v27, Strong);
      swift_unknownObjectRelease();
      _Block_copy(a4);
      if ((v30 & 1) != 0) {
        sub_10006A5A4(v27, v20, v18, v18, a4);
      }
      else {
        sub_10009035C();
      }

      goto LABEL_13;
    }

    uint64_t v31 = objc_opt_self(&OBJC_CLASS___PARMoreResultsRequest);
    if (swift_dynamicCastObjCClass(a2, v31))
    {
      _Block_copy(a4);
      id v32 = a2;
      sub_100092D5C();
    }

    else
    {
      uint64_t v33 = objc_opt_self(&OBJC_CLASS___PARCardRequest);
      if (swift_dynamicCastObjCClass(a2, v33))
      {
        _Block_copy(a4);
        id v32 = a2;
        sub_100094190();
      }

      else
      {
        uint64_t v34 = objc_opt_self(&OBJC_CLASS___PARZeroKeywordRequest);
        uint64_t v35 = swift_dynamicCastObjCClass(a2, v34);
        if (v35)
        {
          uint64_t v36 = v35;
          _Block_copy(a4);
          id v32 = a2;
          sub_1000954CC( v36,  v18,  (uint64_t)v20,  (uint64_t)a4,  v37,  v38,  v39,  v40,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75);
        }

        else
        {
          uint64_t v41 = objc_opt_self(&OBJC_CLASS___PARLookupRequest);
          uint64_t v42 = swift_dynamicCastObjCClass(a2, v41);
          if (v42)
          {
            uint64_t v43 = v42;
            _Block_copy(a4);
            id v32 = a2;
            sub_100097238( v43,  v18,  (uint64_t)v20,  (uint64_t)a4,  v44,  v45,  v46,  v47,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75);
          }

          else
          {
            uint64_t v48 = objc_opt_self(&OBJC_CLASS___PARFlightSearchRequest);
            uint64_t v49 = swift_dynamicCastObjCClass(a2, v48);
            if (v49)
            {
              uint64_t v50 = v49;
              _Block_copy(a4);
              id v32 = a2;
              sub_1000994D0( v50,  v18,  (uint64_t)v20,  (uint64_t)a4,  v51,  v52,  v53,  v54,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75);
            }

            else
            {
              uint64_t v55 = objc_opt_self(&OBJC_CLASS___PARTopicRequest);
              uint64_t v56 = swift_dynamicCastObjCClass(a2, v55);
              if (v56)
              {
                uint64_t v57 = v56;
                _Block_copy(a4);
                id v32 = a2;
                sub_10009B164( v57,  v18,  (uint64_t)v20,  (uint64_t)a4,  v58,  v59,  v60,  v61,  v64,  v65,  v66,  v67,  v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75);
              }

              else
              {
                uint64_t v62 = objc_opt_self(&OBJC_CLASS___PARSafariSummarizationPrefetchRequest);
                if (swift_dynamicCastObjCClass(a2, v62))
                {
                  _Block_copy(a4);
                  id v32 = a2;
                  sub_10009C66C();
                }

                else
                {
                  uint64_t v63 = objc_opt_self(&OBJC_CLASS___PARSafariSummarizationSummarizeRequest);
                  if (!swift_dynamicCastObjCClass(a2, v63))
                  {
                    ((void (**)(void, id, void, void))a4)[2](a4, [a2 queryId], 0, 0);
LABEL_13:
                    sub_100040904((unint64_t)v20);
                    goto LABEL_29;
                  }

                  _Block_copy(a4);
                  id v32 = a2;
                  sub_10009C9E0();
                }
              }
            }
          }
        }
      }
    }

    sub_100040904((unint64_t)v20);

    goto LABEL_29;
  }

  sub_100040904(v19);
  ((void (**)(void, id, void, void))a4)[2](a4, [a2 queryId], 0, 0);
LABEL_29:
  _Block_release(a4);
  _Block_release(a4);
  _Block_release(a4);
  _Block_release(a4);
  _Block_release(a4);
  _Block_release(a4);
  _Block_release(a4);
  _Block_release(a4);
  _Block_release(a4);
  _Block_release(a4);
  _Block_release(a4);
}

uint64_t sub_100062D48(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  sub_1000478B0();
  uint64_t v3 = _s7SQLiter18SQLiteBaseFunctionC4nameSSSgvpfi_0();
  sub_1000C20C4(v3, v4);
  sub_1000C27CC();
  uint64_t v6 = v5;
  sub_100010CA0();
  if (!v6) {
    return 0LL;
  }
  uint64_t v7 = (uint64_t)[v6 engagementCardGrpcDisabled];
  if ((v7 & 1) != 0) {
    goto LABEL_19;
  }
  id v8 = sub_100047258(v7, "queryCommand");
  if (!v8) {
    goto LABEL_19;
  }
  id v9 = v8;
  uint64_t v10 = objc_opt_self(&OBJC_CLASS___SFPerformEntityQueryCommand);
  if (!sub_100032C70(v10))
  {
    uint64_t v16 = objc_opt_self(&OBJC_CLASS___SFShowSFCardCommand);
    if (sub_100032C70(v16))
    {
      id v9 = sub_10006B860();
      id v17 = sub_100047258((uint64_t)v9, "card");
      if (v17)
      {
        uint64_t v18 = v17;
        id v13 = [v17 drilldownMetadata];

        if (v13)
        {
          id v20 = sub_100047258(v19, "jsonData");

          if (v20)
          {
            static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
            sub_10006B854();

            goto LABEL_16;
          }
        }
      }
    }

LABEL_19:
    return 0LL;
  }

  id v11 = sub_10006B860();
  id v12 = sub_100047258((uint64_t)v11, "drilldownMetadata");
  if (v12)
  {
    id v13 = v12;
    id v14 = [v12 jsonData];

    if (v14)
    {
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v14);
      sub_10006B854();

LABEL_16:
      sub_100010A30((uint64_t)v13, v2);
      return 1LL;
    }
  }

  return 0LL;
}

void sub_100062F98()
{
  if (v0) {
    _convertErrorToNSError(_:)(v0);
  }
  uint64_t v1 = sub_10006B66C();
  uint64_t v4 = v2;
  v3(v1);
  sub_10006B3DC(v4);
}

void sub_100062FEC()
{
  uint64_t v46 = v1;
  uint64_t v7 = v6;
  uint64_t v44 = v8;
  uint64_t v45 = type metadata accessor for SessionLookupKey(0LL);
  sub_100009B94();
  __chkstk_darwin(v9);
  sub_10006B61C();
  uint64_t v10 = type metadata accessor for Requestor(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100009B54();
  sub_100019F9C();
  sub_100009B94();
  __chkstk_darwin(v12);
  sub_100027240();
  uint64_t v13 = sub_10006B428();
  sub_100009B84();
  __chkstk_darwin(v14);
  uint64_t v15 = sub_10006B550();
  swift_bridgeObjectRetain(v15);
  Client.init(_:)(v7);
  (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v3, enum case for Requestor.parsecd(_:), v10);
  uint64_t v16 = v0;
  uint64_t v17 = v2;
  UserAgent.init(_:requestor:)(v16, v3);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v46 + OBJC_IVAR____TtC7parsecd16ClientConnection_assembly);
  if (Strong
    && (uint64_t v7 = (void *)Strong,
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v5, v4, v13),
        swift_storeEnumTagMultiPayload(v5, v45, 1LL),
        uint64_t v19 = sub_10004AAEC(),
        sub_100010CA0(),
        sub_10004D784(v5, type metadata accessor for SessionLookupKey),
        v19))
  {
    id v20 = (os_log_s *)objc_allocWithZone(&OBJC_CLASS____CPFeedbackPayload);
    uint64_t v21 = sub_100019F90();
    sub_100014244(v21, v22);
    uint64_t v23 = sub_100019F90();
    sub_100069C58(v23, v24);
    if (v25)
    {
      uint64_t v26 = v25;
      sub_1000A5CB4();
      sub_10006B7B4();

LABEL_11:
      uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
      uint64_t v36 = v4;
      goto LABEL_12;
    }

    uint64_t v30 = v4;
    if (qword_1001D04F8 != -1) {
      swift_once(&qword_1001D04F8, sub_1000343F4);
    }
    uint64_t v37 = sub_100010ED4();
    sub_1000093D0(v37, (uint64_t)qword_1001EDBB8);
    uint64_t v38 = sub_10006B594();
    Logger.logObject.getter(v38);
    os_log_type_t v39 = sub_100010EC4();
    if (os_log_type_enabled(v20, v39))
    {
      uint64_t v40 = (uint8_t *)sub_100009B20(12LL);
      uint64_t v48 = sub_100009B20(32LL);
      *(_DWORD *)uint64_t v40 = 136315138;
      sub_1000145E8();
      uint64_t v41 = sub_10006B64C();
      uint64_t v42 = sub_10006B808(v41);
      sub_10006B6DC(v42, v43, (uint64_t)(v40 + 4));
      sub_100019FA4(v44);
      sub_100014564((void *)&_mh_execute_header, v20, v39, "Could not construct feedback payload data from '%s'", v40);
      sub_100030F9C(v48);
      sub_100010C34(v48);
      sub_100010C34((uint64_t)v40);
    }

    else
    {
      sub_100019F4C(v44);
    }

    sub_10006B7B4();

    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  }

  else
  {
    if (qword_1001D0518 != -1) {
      swift_once(&qword_1001D0518, sub_100034490);
    }
    uint64_t v27 = sub_100010ED4();
    sub_1000093D0(v27, (uint64_t)qword_1001EDC18);
    uint64_t v28 = sub_10006B594();
    Logger.logObject.getter(v28);
    os_log_type_t v29 = sub_100010EC4();
    if (!sub_10006B418(v29))
    {
      sub_100019F4C(v10);

      goto LABEL_11;
    }

    uint64_t v30 = v4;
    uint64_t v31 = (uint8_t *)sub_100009B20(12LL);
    uint64_t v47 = sub_100009B20(32LL);
    *(_DWORD *)uint64_t v31 = 136315138;
    sub_1000145E8();
    uint64_t v32 = sub_10006B64C();
    uint64_t v33 = sub_10006B808(v32);
    sub_10006B6DC(v33, v34, (uint64_t)(v31 + 4));
    sub_100019FA4(v10);
    sub_100014564( (void *)&_mh_execute_header,  (os_log_s *)v7,  (os_log_type_t)v11,  "Could not find session for Connection from '%s'",  v31);
    sub_100030F9C(v47);
    sub_100010C34(v47);
    sub_100010C34((uint64_t)v31);

    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  }

  uint64_t v36 = v30;
LABEL_12:
  v35(v36, v13);
  sub_100009AA0();
}

void sub_100063470(void *a1, uint8_t *a2)
{
  uint64_t v4 = sub_1000471D8(OBJC_IVAR____TtC7parsecd16ClientConnection_assembly);
  if (v4)
  {
    uint64_t v5 = (os_log_s *)v4;
    sub_100061CC0(a1, 0);
    if (v6)
    {
      unint64_t v7 = v6;
      if (v6 == 1)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(kPARErrorDomain);
        uint64_t v8 = sub_10000941C(&qword_1001D10D0);
        uint64_t v16 = (__n128 *)sub_10006B5DC(v8, v9, v10, v11, v12, v13, v14, v15, v29);
        uint64_t v17 = sub_10006B254(v16, (__n128)xmmword_10015C7F0);
        v17[4].n128_u64[1] = (unint64_t)&type metadata for String;
        uint64_t v18 = sub_10006B3C0((uint64_t)v17, 0xD000000000000010LL);
        uint64_t v20 = Dictionary.init(dictionaryLiteral:)( v18,  v19,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
        id v21 = objc_allocWithZone(&OBJC_CLASS___NSError);
        uint64_t v22 = sub_10006B794();
        uint64_t v25 = (void *)sub_10006B3A4(v22, v23, v24, v20);
        sub_10004A79C((uint64_t)v25);
        if (qword_1001D0500 != -1) {
          swift_once(&qword_1001D0500, sub_100034420);
        }
        uint64_t v26 = sub_100010ED4();
        sub_100010E78(v26, (uint64_t)qword_1001EDBD0);
        os_log_type_t v27 = sub_100010EC4();
        if (sub_10003EFD0(v27))
        {
          uint64_t v28 = (_WORD *)sub_100009B20(2LL);
          sub_10006B5C8(v28);
          sub_10001447C((void *)&_mh_execute_header, v5, (os_log_type_t)v20, "state must not be nil", a2);
          sub_100010C34((uint64_t)a2);
          sub_10001449C();
        }

        else
        {

          sub_10001449C();
        }

        goto LABEL_12;
      }

      sub_100063628();
      sub_100040904(v7);
    }

    sub_10006B3AC((uint64_t)v5);
    return;
  }

void sub_100063628()
{
  id v4 = v3;
  unint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  sub_10000941C((uint64_t *)&unk_1001D5D20);
  sub_100009B94();
  __chkstk_darwin(v11);
  uint64_t v12 = sub_10006B3FC();
  uint64_t v171 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_100009B54();
  uint64_t v13 = sub_1000471D8(OBJC_IVAR____TtC7parsecd16ClientConnection_assembly);
  if (v13)
  {
    uint64_t v14 = (os_log_s *)v13;
    sub_10006B750();
    if (sub_100010708(v2, 1LL, v12) == 1)
    {
      sub_100019C1C(v2, (uint64_t *)&unk_1001D5D20);
      static String._unconditionallyBridgeFromObjectiveC(_:)(kPARErrorDomain);
      sub_10006B69C();
      uint64_t v15 = sub_10000941C(&qword_1001D10D0);
      uint64_t inited = swift_initStackObject(v15, &v179);
      *(_OWORD *)(inited + sub_10000BDD4(v0 + 16) = xmmword_10015C7F0;
      *(void *)(inited + swift_unknownObjectWeakDestroy(v0 + 32) = 0x6E6F73616572LL;
      *(void *)(inited + 40) = 0xE600000000000000LL;
      *(void *)(inited + 72) = &type metadata for String;
      strcpy((char *)(inited + 48), "user agent nil");
      *(_BYTE *)(inited + 63) = -18;
      uint64_t v17 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
      id v18 = objc_allocWithZone(&OBJC_CLASS___NSError);
      uint64_t v19 = (void *)sub_10006B3A4(v0, v12, 500LL, v17);
      sub_10004A79C((uint64_t)v19);
      if (qword_1001D0500 != -1) {
        swift_once(&qword_1001D0500, sub_100034420);
      }
      uint64_t v20 = sub_100010ED4();
      sub_100010E78(v20, (uint64_t)qword_1001EDBD0);
      os_log_type_t v21 = sub_100010EC4();
      if (sub_10006B5F4(v21))
      {
        uint64_t v22 = (uint8_t *)sub_100009B20(2LL);
        *(_WORD *)uint64_t v22 = 0;
        sub_10001447C((void *)&_mh_execute_header, v14, (os_log_type_t)v17, "user agent must not be nil", v22);
        sub_100010C34((uint64_t)v22);
        sub_1000471D0();

        goto LABEL_160;
      }

LABEL_17:
      sub_1000471D0();
      goto LABEL_160;
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v171 + 32))(v1, v2, v12);
    if (Data.count.getter(v8, v6) < 1)
    {
      sub_10006B56C(*(uint64_t (**)(uint64_t, uint64_t))(v171 + 8));
      goto LABEL_17;
    }

    uint64_t v23 = (os_log_s *)objc_allocWithZone(&OBJC_CLASS____CPFeedbackPayload);
    sub_100014244(v8, v6);
    sub_100069C58(v8, v6);
    if (!v24)
    {
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(kPARErrorDomain);
      uint64_t v36 = v35;
      uint64_t v37 = sub_10000941C(&qword_1001D10D0);
      uint64_t v38 = (__n128 *)swift_initStackObject(v37, &v178);
      os_log_type_t v39 = sub_10006B254(v38, (__n128)xmmword_10015C7F0);
      v39[4].n128_u64[1] = (unint64_t)&type metadata for String;
      uint64_t v40 = sub_10006B3C0((uint64_t)v39, 0xD000000000000026LL);
      uint64_t v42 = Dictionary.init(dictionaryLiteral:)( v40,  v41,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
      id v43 = objc_allocWithZone(&OBJC_CLASS___NSError);
      uint64_t v44 = (void *)sub_10006B3A4(v34, v36, 500LL, v42);
      sub_10004A79C((uint64_t)v44);
      if (qword_1001D0500 != -1) {
        swift_once(&qword_1001D0500, sub_100034420);
      }
      uint64_t v45 = sub_100010ED4();
      sub_100010E78(v45, (uint64_t)qword_1001EDBD0);
      os_log_type_t v46 = sub_100010EC4();
      if (sub_10006B418(v46))
      {
        uint64_t v47 = (uint8_t *)sub_100009B20(2LL);
        *(_WORD *)uint64_t v47 = 0;
        sub_10001447C( (void *)&_mh_execute_header,  v14,  (os_log_type_t)v42,  "Failed deserializing _CPFeedbackPayload.",  v47);
        sub_100010C34((uint64_t)v47);
      }

      sub_1000471D0();
      goto LABEL_159;
    }

    uint64_t v25 = v24;
    uint64_t v26 = (char **)[v24 codable];
    if (!v26)
    {
      if (qword_1001D0500 != -1) {
        swift_once(&qword_1001D0500, sub_100034420);
      }
      uint64_t v48 = sub_100010ED4();
      sub_100010E78(v48, (uint64_t)qword_1001EDBD0);
      os_log_type_t v49 = sub_100010EC4();
      if (sub_10006B418(v49))
      {
        uint64_t v50 = (uint8_t *)sub_100009B20(2LL);
        *(_WORD *)uint64_t v50 = 0;
        sub_10001447C((void *)&_mh_execute_header, v23, (os_log_type_t)v4, "payload.codable", v50);
        sub_100010C34((uint64_t)v50);
      }

      sub_1000471D0();

      goto LABEL_159;
    }

    os_log_type_t v27 = v26;
    uint64_t v169 = (uint64_t)v4;
    uint64_t ObjectType = swift_getObjectType(v26);
    if ((sub_1000BA988() & 1) != 0)
    {
      sub_1000838A0();
      sub_100049824();
      sub_1000BAB84();
      sub_100010CA0();
    }

    uint64_t v170 = v10;
    unsigned int v29 = [v25 type];
    sub_10006B488();
    uint64_t v31 = &_ss24UnkeyedEncodingContainerPsE6encode10contentsOfyqd___tKSTRd__s6UInt32V7ElementRtd__lF_ptr;
    uint64_t v32 = &selRef_fbr;
    switch(v29)
    {
      case 0u:
      case 1u:
      case 2u:
      case 4u:
      case 5u:
      case 6u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xDu:
      case 0xFu:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x15u:
      case 0x16u:
      case 0x19u:
      case 0x1Bu:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
      case 0x29u:
      case 0x2Bu:
      case 0x2Cu:
      case 0x64u:
      case 0x65u:
      case 0x66u:
        goto LABEL_147;
      case 3u:
        uint64_t v83 = objc_opt_self(&OBJC_CLASS____CPRankingFeedback);
        if (!sub_10006B270(v83)) {
          goto LABEL_89;
        }
        id v61 = sub_10006B3D0(v27);
        sub_100080500(v27);
        if (!v84) {
          goto LABEL_104;
        }
        sub_10006B394();
        if (v86)
        {
          if (!sub_10006B2E4(v85)) {
            goto LABEL_143;
          }
        }

        else if (!*(void *)(v85 + 16))
        {
          goto LABEL_143;
        }

        unint64_t v87 = sub_10006B460();
        sub_100030F20(v87, v88, v89);
        if (ObjectType) {
          uint64_t v90 = sub_10006B330();
        }
        else {
          uint64_t v90 = (uint64_t)sub_10006B440();
        }
        uint64_t v91 = (void *)v90;
        sub_10003B8E8();
        if (!sub_10006A300(v91)) {
          goto LABEL_104;
        }
        sub_10006B394();
        if (v93)
        {
          if (!sub_10006B2E4(v92)) {
            goto LABEL_143;
          }
        }

        else if (!*(void *)(v92 + 16))
        {
          goto LABEL_143;
        }

        unint64_t v94 = sub_10006B460();
        sub_100030F20(v94, v95, v96);
        if (v91) {
          uint64_t v97 = sub_10006B330();
        }
        else {
          uint64_t v97 = (uint64_t)sub_10006B440();
        }
        char v98 = (void *)v97;
        uint64_t v168 = v61;
        uint64_t v99 = sub_10003B8E8();
        id v100 = sub_10005A6E0(v99, "result");

        if (v100)
        {
          id v4 = sub_10006B65C(v101, "queryId");

          goto LABEL_88;
        }

        goto LABEL_144;
      case 7u:
        uint64_t v32 = v27;
        uint64_t v102 = objc_opt_self(&OBJC_CLASS____CPResultEngagementFeedback);
        if (sub_10006B530(v102)) {
          goto LABEL_71;
        }
        goto LABEL_144;
      case 8u:
        uint64_t v106 = objc_opt_self(&OBJC_CLASS____CPVisibleResultsFeedback);
        uint64_t v107 = sub_10006B270(v106);
        if (!v107) {
          goto LABEL_99;
        }
        uint64_t v108 = (void *)v107;
        unint64_t v165 = v27;
        v27;
        sub_10008051C(v108);
        if (!v109)
        {
          id v167 = 0LL;
          char v166 = 1;
LABEL_103:
          uint64_t v111 = v170;
          goto LABEL_115;
        }

        sub_10006B394();
        uint64_t v111 = v170;
        if (v112)
        {
          if (sub_10006B2E4(v110)) {
            goto LABEL_77;
          }
        }

        else if (*(void *)(v110 + 16))
        {
LABEL_77:
          sub_10006B33C();
          if (ObjectType) {
            uint64_t v113 = sub_10006B330();
          }
          else {
            uint64_t v113 = (uint64_t)sub_10006B440();
          }
          uint64_t v114 = (void *)v113;
          uint64_t v115 = sub_10003B8E8();
          id v167 = sub_10005A6E0(v115, "queryId");

          char v166 = 0;
          goto LABEL_103;
        }

        sub_10003B8E8();
        id v167 = 0LL;
        char v166 = 1;
LABEL_115:
        sub_10008051C(v108);
        if (v136)
        {
          uint64_t v161 = v136;
          uint64_t v137 = v111 + OBJC_IVAR____TtC7parsecd11ClientState_engagedSuggestionController;
          sub_10006B2F0(v136, (uint64_t)&v174);
          sub_10006A3EC(v137, (uint64_t)&v172);
          if (v173)
          {
            sub_100019BC4(&v172, (uint64_t)v175);
            id v61 = (id)v161;
            uint64_t v32 = &selRef_fbr;
            if ((unint64_t)v161 >> 62)
            {
              if (v161 >= 0) {
                uint64_t v143 = v161 & 0xFFFFFFFFFFFFFF8LL;
              }
              else {
                uint64_t v143 = v161;
              }
              uint64_t v138 = _CocoaArrayWrapper.endIndex.getter(v143);
              if (v138) {
                goto LABEL_119;
              }
            }

            else
            {
              uint64_t v138 = *(void *)((v161 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              if (v138)
              {
LABEL_119:
                if (v138 >= 1)
                {
                  uint64_t v139 = 0LL;
                  uint64_t v163 = v138;
                  do
                  {
                    if ((v161 & 0xC000000000000001LL) != 0) {
                      id v140 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v139, v61);
                    }
                    else {
                      id v140 = sub_10006B830((uint64_t)v61 + 8 * v139);
                    }
                    uint64_t v141 = v140;
                    if ([v140 type] == 1)
                    {
                      uint64_t v142 = v177;
                      uint64_t v162 = v176;
                      sub_10006B6C8(v175, v176);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v142 + 80))(v141, 0LL, v162, v142);
                      id v61 = (id)v161;
                    }

                    ++v139;
                  }

                  while (v163 != v139);
                  goto LABEL_127;
                }

                __break(1u);
LABEL_162:
                uint64_t v78 = v61;
                uint64_t v79 = sub_10006B330();
LABEL_54:
                uint64_t v80 = (void *)v79;
                uint64_t v81 = sub_10003B8E8();
                id v4 = sub_10006B65C(v81, "queryId");

LABEL_88:
                char v30 = 0;
LABEL_145:
                os_log_type_t v27 = v32;
                uint64_t v32 = &selRef_fbr;
LABEL_146:
                uint64_t v31 = &_ss24UnkeyedEncodingContainerPsE6encode10contentsOfyqd___tKSTRd__s6UInt32V7ElementRtd__lF_ptr;
                goto LABEL_147;
              }
            }

LABEL_127:
            sub_10006B84C();
            sub_100009B3C();
            sub_1000108B8(v175);
            os_log_type_t v27 = v165;
            goto LABEL_36;
          }

          swift_bridgeObjectRelease();
          sub_10006B84C();
          sub_100019C1C((uint64_t)&v172, (uint64_t *)&unk_1001D44A0);
        }

        else
        {
          sub_10006B84C();
        }

          *(_BYTE *)(a3 + 57) = v62;
          return;
        }

        if (v6 - 2 >= 4)
        {
          if (v6 == 1)
          {
            if (*(void *)(a1 + OBJC_IVAR___PBDataReader__pos) > 0xFFFFFFFFFFFFFFF7LL
              || (sub_1000F0F38(), !v91 && v33))
            {
              unint64_t v94 = 0LL;
              *(_BYTE *)(a1 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              unint64_t v94 = *(void *)(*(void *)(a1 + OBJC_IVAR___PBDataReader__bytes) + v49);
              *(void *)(a1 + v48) = v50;
            }

            *(void *)a3 = v94;
          }

          else
          {
            uint64_t v83 = 0;
            uint64_t v84 = 0LL;
            while (1)
            {
              uint64_t v85 = *(void *)(a1 + OBJC_IVAR___PBDataReader__pos);
              uint64_t v86 = v85 + 1;
              if (v85 == -1 || v86 > *(void *)(a1 + OBJC_IVAR___PBDataReader__length))
              {
                unint64_t v87 = 0;
                *(_BYTE *)(a1 + OBJC_IVAR___PBDataReader__error) = 1;
              }

              else
              {
                unint64_t v87 = *(_BYTE *)(*(void *)(a1 + OBJC_IVAR___PBDataReader__bytes) + v85);
                *(void *)(a1 + OBJC_IVAR___PBDataReader__pos) = v86;
              }

              v84 |= (unint64_t)(v87 & 0x7F) << v83;
              if ((v87 & 0x80) == 0) {
                break;
              }
              v83 += 7;
              unsigned __int8 v33 = v6++ >= 9;
              if (v33)
              {
                uint64_t v84 = 0LL;
                goto LABEL_114;
              }
            }

            if (*(_BYTE *)(a1 + OBJC_IVAR___PBDataReader__error)) {
              uint64_t v84 = 0LL;
            }
LABEL_114:
            *(void *)a3 = v84;
          }

          uint64_t v62 = 3;
          goto LABEL_127;
        }
      }

      else if (v6 - 1 >= 4)
      {
        if (v6 == 5)
        {
          if (*(void *)(a1 + OBJC_IVAR___PBDataReader__pos) > 0xFFFFFFFFFFFFFFFBLL || (sub_1000F0F38(), !v91 && v33))
          {
            uint64_t v82 = 0;
            *(_BYTE *)(a1 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            uint64_t v82 = *(_DWORD *)(*(void *)(a1 + OBJC_IVAR___PBDataReader__bytes) + v31);
            *(void *)(a1 + v30) = v32;
          }

          *(_DWORD *)a3 = v82;
        }

        else
        {
          uint64_t v66 = 0;
          uint64_t v67 = 0LL;
          while (1)
          {
            uint64_t v68 = *(void *)(a1 + OBJC_IVAR___PBDataReader__pos);
            uint64_t v69 = v68 + 1;
            if (v68 == -1 || v69 > *(void *)(a1 + OBJC_IVAR___PBDataReader__length))
            {
              unint64_t v70 = 0;
              *(_BYTE *)(a1 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              unint64_t v70 = *(_BYTE *)(*(void *)(a1 + OBJC_IVAR___PBDataReader__bytes) + v68);
              *(void *)(a1 + OBJC_IVAR___PBDataReader__pos) = v69;
            }

            v67 |= (unint64_t)(v70 & 0x7F) << v66;
            if ((v70 & 0x80) == 0) {
              break;
            }
            v66 += 7;
            unsigned __int8 v33 = v6++ >= 9;
            if (v33)
            {
              LODWORD(v67) = 0;
              goto LABEL_85;
            }
          }

          if (*(_BYTE *)(a1 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v67) = 0;
          }
LABEL_85:
          *(_DWORD *)a3 = v67;
        }

        uint64_t v62 = 1;
        goto LABEL_127;
      }

LABEL_143:
          sub_10003B8E8();
        }

        else
        {
LABEL_104:
        }

        uint64_t v16 = 0;
        uint64_t v17 = 1;
        goto LABEL_144;
      }

      goto LABEL_150;
    }

    if (v7 != 45)
    {
      if (v6)
      {
        uint64_t v40 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v41 = a3 + 55;
        }

        else
        {
          uint64_t v40 = 97;
          uint64_t v41 = 65;
        }

        if (a3 <= 10) {
          uint64_t v42 = a3 + 48;
        }
        else {
          uint64_t v42 = 58;
        }
        if (result)
        {
          LOBYTE(v43) = 0;
          do
          {
            uint64_t v44 = *(unsigned __int8 *)result;
            if (v44 < 0x30 || v44 >= v42)
            {
              if (v44 < 0x41 || v44 >= v41)
              {
                uint64_t v16 = 0;
                uint64_t v17 = 1;
                if (v44 < 0x61 || v44 >= v40) {
                  goto LABEL_144;
                }
                uint64_t v45 = -87;
              }

              else
              {
                uint64_t v45 = -55;
              }
            }

            else
            {
              uint64_t v45 = -48;
            }

            os_log_type_t v46 = (char)v43 * (char)a3;
            uint64_t v47 = v46;
            id v43 = (char)v46 + (char)(v44 + v45);
            ++result;
            --v6;
          }

          while (v6);
          uint64_t v17 = 0;
          uint64_t v16 = v43;
          goto LABEL_144;
        }

        goto LABEL_99;
      }

      goto LABEL_143;
    }

    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        uint64_t v9 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v10 = a3 + 55;
        }

        else
        {
          uint64_t v9 = 97;
          uint64_t v10 = 65;
        }

        if (a3 <= 10) {
          uint64_t v11 = a3 + 48;
        }
        else {
          uint64_t v11 = 58;
        }
        if (result)
        {
          LOBYTE(v12) = 0;
          uint64_t v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            uint64_t v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                uint64_t v16 = 0;
                uint64_t v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                uint64_t v15 = -87;
              }

              else
              {
                uint64_t v15 = -55;
              }
            }

            else
            {
              uint64_t v15 = -48;
            }

            id v18 = (char)v12 * (char)a3;
            uint64_t v19 = v18;
            uint64_t v12 = (char)v18 - (char)(v14 + v15);
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }

        uint64_t v16 = 0;
        uint64_t v17 = 1;
        goto LABEL_144;
      }

      goto LABEL_150;
    }

    if (v7 != 45)
    {
      if (v6)
      {
        uint64_t v40 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v41 = a3 + 55;
        }

        else
        {
          uint64_t v40 = 97;
          uint64_t v41 = 65;
        }

        if (a3 <= 10) {
          uint64_t v42 = a3 + 48;
        }
        else {
          uint64_t v42 = 58;
        }
        if (result)
        {
          LOWORD(v43) = 0;
          do
          {
            uint64_t v44 = *(unsigned __int8 *)result;
            if (v44 < 0x30 || v44 >= v42)
            {
              if (v44 < 0x41 || v44 >= v41)
              {
                uint64_t v16 = 0;
                uint64_t v17 = 1;
                if (v44 < 0x61 || v44 >= v40) {
                  goto LABEL_144;
                }
                uint64_t v45 = -87;
              }

              else
              {
                uint64_t v45 = -55;
              }
            }

            else
            {
              uint64_t v45 = -48;
            }

            os_log_type_t v46 = (__int16)v43 * (__int16)a3;
            uint64_t v47 = v46;
            id v43 = (__int16)v46 + (v44 + v45);
            ++result;
            --v6;
          }

          while (v6);
          uint64_t v17 = 0;
          uint64_t v16 = v43;
          goto LABEL_144;
        }

        goto LABEL_99;
      }

      goto LABEL_143;
    }

    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        uint64_t v9 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v10 = a3 + 55;
        }

        else
        {
          uint64_t v9 = 97;
          uint64_t v10 = 65;
        }

        if (a3 <= 10) {
          uint64_t v11 = a3 + 48;
        }
        else {
          uint64_t v11 = 58;
        }
        if (result)
        {
          LOWORD(v12) = 0;
          uint64_t v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            uint64_t v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                uint64_t v16 = 0;
                uint64_t v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                uint64_t v15 = -87;
              }

              else
              {
                uint64_t v15 = -55;
              }
            }

            else
            {
              uint64_t v15 = -48;
            }

            id v18 = (__int16)v12 * (__int16)a3;
            uint64_t v19 = v18;
            uint64_t v12 = (__int16)v18 - (v14 + v15);
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }

        uint64_t v16 = 0;
        uint64_t v17 = 1;
        goto LABEL_144;
      }

      goto LABEL_150;
    }

    if (v7 != 45)
    {
      if (v6)
      {
        uint64_t v40 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v41 = a3 + 55;
        }

        else
        {
          uint64_t v40 = 97;
          uint64_t v41 = 65;
        }

        if (a3 <= 10) {
          uint64_t v42 = a3 + 48;
        }
        else {
          uint64_t v42 = 58;
        }
        if (result)
        {
          id v43 = 0;
          do
          {
            uint64_t v44 = *(unsigned __int8 *)result;
            if (v44 < 0x30 || v44 >= v42)
            {
              if (v44 < 0x41 || v44 >= v41)
              {
                uint64_t v16 = 0;
                uint64_t v17 = 1;
                if (v44 < 0x61 || v44 >= v40) {
                  goto LABEL_144;
                }
                uint64_t v45 = -87;
              }

              else
              {
                uint64_t v45 = -55;
              }
            }

            else
            {
              uint64_t v45 = -48;
            }

            os_log_type_t v46 = (int)v43 * (uint64_t)(int)a3;
            uint64_t v47 = v44 + v45;
            id v43 = v46 + v47;
            if (__OFADD__((_DWORD)v46, v47)) {
              goto LABEL_143;
            }
            ++result;
            --v6;
          }

          while (v6);
          uint64_t v17 = 0;
          uint64_t v16 = v43;
          goto LABEL_144;
        }

        goto LABEL_99;
      }

      goto LABEL_143;
    }

    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        uint64_t v9 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v10 = a3 + 55;
        }

        else
        {
          uint64_t v9 = 97;
          uint64_t v10 = 65;
        }

        if (a3 <= 10) {
          uint64_t v11 = a3 + 48;
        }
        else {
          uint64_t v11 = 58;
        }
        if (result)
        {
          uint64_t v12 = 0;
          uint64_t v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            uint64_t v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                uint64_t v16 = 0;
                uint64_t v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                uint64_t v15 = -87;
              }

              else
              {
                uint64_t v15 = -55;
              }
            }

            else
            {
              uint64_t v15 = -48;
            }

            id v18 = (int)v12 * (uint64_t)(int)a3;
            uint64_t v19 = v14 + v15;
            uint64_t v12 = v18 - v19;
            if (__OFSUB__((_DWORD)v18, v19)) {
              goto LABEL_143;
            }
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }

        uint64_t v16 = 0;
        uint64_t v17 = 1;
        goto LABEL_144;
      }

      goto LABEL_150;
    }

    if (v7 != 45)
    {
      if (v6)
      {
        uint64_t v34 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v35 = a3 + 55;
        }

        else
        {
          uint64_t v34 = 97;
          uint64_t v35 = 65;
        }

        if (a3 <= 10) {
          uint64_t v36 = a3 + 48;
        }
        else {
          uint64_t v36 = 58;
        }
        if (result)
        {
          LOBYTE(v37) = 0;
          do
          {
            uint64_t v38 = *(unsigned __int8 *)result;
            if (v38 < 0x30 || v38 >= v36)
            {
              if (v38 < 0x41 || v38 >= v35)
              {
                uint64_t v16 = 0;
                uint64_t v17 = 1;
                if (v38 < 0x61 || v38 >= v34) {
                  goto LABEL_144;
                }
                os_log_type_t v39 = -87;
              }

              else
              {
                os_log_type_t v39 = -55;
              }
            }

            else
            {
              os_log_type_t v39 = -48;
            }

            uint64_t v37 = (v37 * a3) + (v38 + v39);
            if (((v37 >> 8) & 1) != 0) {
              goto LABEL_143;
            }
            ++result;
            --v6;
          }

          while (v6);
          uint64_t v17 = 0;
          uint64_t v16 = v37;
          goto LABEL_144;
        }

        goto LABEL_99;
      }

      goto LABEL_143;
    }

    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        uint64_t v9 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v10 = a3 + 55;
        }

        else
        {
          uint64_t v9 = 97;
          uint64_t v10 = 65;
        }

        if (a3 <= 10) {
          uint64_t v11 = a3 + 48;
        }
        else {
          uint64_t v11 = 58;
        }
        if (result)
        {
          LOBYTE(v12) = 0;
          uint64_t v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            uint64_t v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                uint64_t v16 = 0;
                uint64_t v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                uint64_t v15 = -87;
              }

              else
              {
                uint64_t v15 = -55;
              }
            }

            else
            {
              uint64_t v15 = -48;
            }

            uint64_t v12 = (v12 * a3) - (v14 + v15);
            if ((v12 & 0xFFFFFF00) != 0) {
              goto LABEL_143;
            }
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }

        uint64_t v16 = 0;
        uint64_t v17 = 1;
        goto LABEL_144;
      }

      goto LABEL_150;
    }

    if (v7 != 45)
    {
      if (v6)
      {
        uint64_t v34 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v35 = a3 + 55;
        }

        else
        {
          uint64_t v34 = 97;
          uint64_t v35 = 65;
        }

        if (a3 <= 10) {
          uint64_t v36 = a3 + 48;
        }
        else {
          uint64_t v36 = 58;
        }
        if (result)
        {
          LOWORD(v37) = 0;
          do
          {
            uint64_t v38 = *(unsigned __int8 *)result;
            if (v38 < 0x30 || v38 >= v36)
            {
              if (v38 < 0x41 || v38 >= v35)
              {
                uint64_t v16 = 0;
                uint64_t v17 = 1;
                if (v38 < 0x61 || v38 >= v34) {
                  goto LABEL_144;
                }
                os_log_type_t v39 = -87;
              }

              else
              {
                os_log_type_t v39 = -55;
              }
            }

            else
            {
              os_log_type_t v39 = -48;
            }

            uint64_t v37 = (unsigned __int16)(v37 * a3) + (v38 + v39);
            if ((v37 & 0x10000) != 0) {
              goto LABEL_143;
            }
            ++result;
            --v6;
          }

          while (v6);
          uint64_t v17 = 0;
          uint64_t v16 = v37;
          goto LABEL_144;
        }

        goto LABEL_99;
      }

      goto LABEL_143;
    }

    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        uint64_t v9 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v10 = a3 + 55;
        }

        else
        {
          uint64_t v9 = 97;
          uint64_t v10 = 65;
        }

        if (a3 <= 10) {
          uint64_t v11 = a3 + 48;
        }
        else {
          uint64_t v11 = 58;
        }
        if (result)
        {
          LOWORD(v12) = 0;
          uint64_t v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            uint64_t v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                uint64_t v16 = 0;
                uint64_t v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                uint64_t v15 = -87;
              }

              else
              {
                uint64_t v15 = -55;
              }
            }

            else
            {
              uint64_t v15 = -48;
            }

            uint64_t v12 = (unsigned __int16)(v12 * a3) - (v14 + v15);
            if ((v12 & 0xFFFF0000) != 0) {
              goto LABEL_143;
            }
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }

        uint64_t v16 = 0;
        uint64_t v17 = 1;
        goto LABEL_144;
      }

      goto LABEL_150;
    }

    if (v7 != 45)
    {
      if (v6)
      {
        uint64_t v40 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v41 = a3 + 55;
        }

        else
        {
          uint64_t v40 = 97;
          uint64_t v41 = 65;
        }

        if (a3 <= 10) {
          uint64_t v42 = a3 + 48;
        }
        else {
          uint64_t v42 = 58;
        }
        if (result)
        {
          id v43 = 0;
          do
          {
            uint64_t v44 = *(unsigned __int8 *)result;
            if (v44 < 0x30 || v44 >= v42)
            {
              if (v44 < 0x41 || v44 >= v41)
              {
                uint64_t v16 = 0;
                uint64_t v17 = 1;
                if (v44 < 0x61 || v44 >= v40) {
                  goto LABEL_144;
                }
                uint64_t v45 = -87;
              }

              else
              {
                uint64_t v45 = -55;
              }
            }

            else
            {
              uint64_t v45 = -48;
            }

            os_log_type_t v46 = v43 * (unint64_t)a3;
            if ((v46 & 0xFFFFFFFF00000000LL) != 0) {
              goto LABEL_143;
            }
            uint64_t v47 = v44 + v45;
            id v43 = v46 + v47;
            if (__CFADD__((_DWORD)v46, v47)) {
              goto LABEL_143;
            }
            ++result;
            --v6;
          }

          while (v6);
          uint64_t v17 = 0;
          uint64_t v16 = v43;
          goto LABEL_144;
        }

        goto LABEL_99;
      }

      goto LABEL_143;
    }

    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        uint64_t v9 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v10 = a3 + 55;
        }

        else
        {
          uint64_t v9 = 97;
          uint64_t v10 = 65;
        }

        if (a3 <= 10) {
          uint64_t v11 = a3 + 48;
        }
        else {
          uint64_t v11 = 58;
        }
        if (result)
        {
          uint64_t v12 = 0;
          uint64_t v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            uint64_t v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                uint64_t v16 = 0;
                uint64_t v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                uint64_t v15 = -87;
              }

              else
              {
                uint64_t v15 = -55;
              }
            }

            else
            {
              uint64_t v15 = -48;
            }

            id v18 = v12 * (unint64_t)a3;
            if ((v18 & 0xFFFFFFFF00000000LL) != 0) {
              goto LABEL_143;
            }
            uint64_t v19 = v14 + v15;
            uint64_t v12 = v18 - v19;
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }

LABEL_144:
        sub_10006B488();
        goto LABEL_145;
      case 0x1Cu:
        uint64_t v65 = &OBJC_CLASS____CPDidGoToSiteFeedback;
        goto LABEL_97;
      case 0x1Du:
        uint64_t v65 = &OBJC_CLASS____CPDidGoToSearchFeedback;
LABEL_97:
        uint64_t v128 = objc_opt_self(v65);
        uint64_t v129 = sub_10006B270(v128);
        if (v129)
        {
          uint64_t v130 = (void *)v129;
          uint64_t v131 = v27;
          uint64_t v132 = *(void *)(v170 + 64);
          id v4 = v25;
          uint64_t v133 = v131;
          swift_unknownObjectRetain(v132);
          sub_10006A374(v130, (SEL *)&selRef_input);
          sub_1000A5B20(v134, v135);

          os_log_type_t v27 = v131;
          swift_unknownObjectRelease();
        }

LABEL_99:
        sub_10006B488();
        goto LABEL_146;
      case 0x2Au:
        uint64_t v32 = v27;
        uint64_t v82 = objc_opt_self(&OBJC_CLASS____CPCommandEngagementFeedback);
        if (!sub_10006B530(v82)) {
          goto LABEL_144;
        }
LABEL_71:
        id v4 = sub_10006B380();
        uint64_t v103 = sub_10006B4EC();
        id v104 = sub_10005A6E0(v103, "result");
        if (v104)
        {
          objc_super v105 = &selRef_completedQuery;
LABEL_94:
          sub_10006A2A4(v104, (SEL *)v105);
        }

        else
        {
LABEL_100:
          uint64_t v127 = 0LL;
        }

        uint64_t v32 = &selRef_fbr;
        sub_1000A5B20((uint64_t)v104, v127);

        sub_100010CA0();
        sub_10006B488();
        os_log_type_t v27 = v164;
        goto LABEL_146;
      default:
        type metadata accessor for _CPFeedbackType(0LL);
        LODWORD(v175[0]) = v29;
        _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v160, v175, v160, &type metadata for Int32);
        __break(1u);
        JUMPOUT(0x1000643E0LL);
    }
  }

        uint64_t v16 = 0;
        uint64_t v17 = 0;
LABEL_144:
        uint64_t v66 = v17;
LABEL_145:
        LOBYTE(v65[0]) = (a2 & 0x1000000000000000LL) != 0;
        return v16 | (v66 << 8) | (LOBYTE(v65[0]) << 16);
      }

      goto LABEL_143;
    }

    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }

  uint64_t v20 = HIBYTE(a2) & 0xF;
  v65[0] = result;
  v65[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v20)
      {
        LOBYTE(v22) = 0;
        uint64_t v57 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v58 = a3 + 55;
        }

        else
        {
          uint64_t v57 = 97;
          uint64_t v58 = 65;
        }

        if (a3 <= 10) {
          uint64_t v59 = a3 + 48;
        }
        else {
          uint64_t v59 = 58;
        }
        uint64_t v60 = (unsigned __int8 *)v65;
        while (1)
        {
          id v61 = *v60;
          if (v61 < 0x30 || v61 >= v59)
          {
            if (v61 < 0x41 || v61 >= v58)
            {
              uint64_t v16 = 0;
              uint64_t v17 = 1;
              if (v61 < 0x61 || v61 >= v57) {
                goto LABEL_144;
              }
              uint64_t v62 = -87;
            }

            else
            {
              uint64_t v62 = -55;
            }
          }

          else
          {
            uint64_t v62 = -48;
          }

          uint64_t v63 = (char)v22 * (char)a3;
          uint64_t v64 = v63;
          uint64_t v22 = (char)v63 + (char)(v61 + v62);
          ++v60;
          if (!--v20) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    if (v20)
    {
      os_log_type_t v21 = v20 - 1;
      if (v21)
      {
        LOBYTE(v22) = 0;
        uint64_t v23 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v24 = a3 + 55;
        }

        else
        {
          uint64_t v23 = 97;
          uint64_t v24 = 65;
        }

        if (a3 <= 10) {
          uint64_t v25 = a3 + 48;
        }
        else {
          uint64_t v25 = 58;
        }
        uint64_t v26 = (unsigned __int8 *)v65 + 1;
        while (1)
        {
          os_log_type_t v27 = *v26;
          if (v27 < 0x30 || v27 >= v25)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v16 = 0;
              uint64_t v17 = 1;
              if (v27 < 0x61 || v27 >= v23) {
                goto LABEL_144;
              }
              uint64_t v28 = -87;
            }

            else
            {
              uint64_t v28 = -55;
            }
          }

          else
          {
            uint64_t v28 = -48;
          }

          unsigned int v29 = (char)v22 * (char)a3;
          char v30 = v29;
          uint64_t v22 = (char)v29 - (char)(v27 + v28);
          ++v26;
          if (!--v21) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    goto LABEL_149;
  }

  if (v20)
  {
    uint64_t v48 = v20 - 1;
    if (v48)
    {
      LOBYTE(v22) = 0;
      os_log_type_t v49 = a3 + 87;
      if (a3 > 10)
      {
        uint64_t v50 = a3 + 55;
      }

      else
      {
        os_log_type_t v49 = 97;
        uint64_t v50 = 65;
      }

      if (a3 <= 10) {
        uint64_t v51 = a3 + 48;
      }
      else {
        uint64_t v51 = 58;
      }
      uint64_t v52 = (unsigned __int8 *)v65 + 1;
      do
      {
        uint64_t v53 = *v52;
        if (v53 < 0x30 || v53 >= v51)
        {
          if (v53 < 0x41 || v53 >= v50)
          {
            uint64_t v16 = 0;
            uint64_t v17 = 1;
            if (v53 < 0x61 || v53 >= v49) {
              goto LABEL_144;
            }
            uint64_t v54 = -87;
          }

          else
          {
            uint64_t v54 = -55;
          }
        }

        else
        {
          uint64_t v54 = -48;
        }

        uint64_t v55 = (char)v22 * (char)a3;
        uint64_t v56 = v55;
        uint64_t v22 = (char)v55 + (char)(v53 + v54);
        ++v52;
        --v48;
      }

      while (v48);
LABEL_142:
      uint64_t v17 = 0;
      uint64_t v16 = v22;
      goto LABEL_144;
    }

    goto LABEL_143;
  }

        uint64_t v16 = 0;
        uint64_t v17 = 0;
LABEL_144:
        uint64_t v66 = v17;
LABEL_145:
        LOBYTE(v65[0]) = (a2 & 0x1000000000000000LL) != 0;
        return v16 | (v66 << 16) | (LOBYTE(v65[0]) << 24);
      }

      goto LABEL_143;
    }

    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }

  uint64_t v20 = HIBYTE(a2) & 0xF;
  v65[0] = result;
  v65[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v20)
      {
        LOWORD(v22) = 0;
        uint64_t v57 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v58 = a3 + 55;
        }

        else
        {
          uint64_t v57 = 97;
          uint64_t v58 = 65;
        }

        if (a3 <= 10) {
          uint64_t v59 = a3 + 48;
        }
        else {
          uint64_t v59 = 58;
        }
        uint64_t v60 = (unsigned __int8 *)v65;
        while (1)
        {
          id v61 = *v60;
          if (v61 < 0x30 || v61 >= v59)
          {
            if (v61 < 0x41 || v61 >= v58)
            {
              uint64_t v16 = 0;
              uint64_t v17 = 1;
              if (v61 < 0x61 || v61 >= v57) {
                goto LABEL_144;
              }
              uint64_t v62 = -87;
            }

            else
            {
              uint64_t v62 = -55;
            }
          }

          else
          {
            uint64_t v62 = -48;
          }

          uint64_t v63 = (__int16)v22 * (__int16)a3;
          uint64_t v64 = v63;
          uint64_t v22 = (__int16)v63 + (v61 + v62);
          ++v60;
          if (!--v20) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    if (v20)
    {
      os_log_type_t v21 = v20 - 1;
      if (v21)
      {
        LOWORD(v22) = 0;
        uint64_t v23 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v24 = a3 + 55;
        }

        else
        {
          uint64_t v23 = 97;
          uint64_t v24 = 65;
        }

        if (a3 <= 10) {
          uint64_t v25 = a3 + 48;
        }
        else {
          uint64_t v25 = 58;
        }
        uint64_t v26 = (unsigned __int8 *)v65 + 1;
        while (1)
        {
          os_log_type_t v27 = *v26;
          if (v27 < 0x30 || v27 >= v25)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v16 = 0;
              uint64_t v17 = 1;
              if (v27 < 0x61 || v27 >= v23) {
                goto LABEL_144;
              }
              uint64_t v28 = -87;
            }

            else
            {
              uint64_t v28 = -55;
            }
          }

          else
          {
            uint64_t v28 = -48;
          }

          unsigned int v29 = (__int16)v22 * (__int16)a3;
          char v30 = v29;
          uint64_t v22 = (__int16)v29 - (v27 + v28);
          ++v26;
          if (!--v21) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    goto LABEL_149;
  }

  if (v20)
  {
    uint64_t v48 = v20 - 1;
    if (v48)
    {
      LOWORD(v22) = 0;
      os_log_type_t v49 = a3 + 87;
      if (a3 > 10)
      {
        uint64_t v50 = a3 + 55;
      }

      else
      {
        os_log_type_t v49 = 97;
        uint64_t v50 = 65;
      }

      if (a3 <= 10) {
        uint64_t v51 = a3 + 48;
      }
      else {
        uint64_t v51 = 58;
      }
      uint64_t v52 = (unsigned __int8 *)v65 + 1;
      do
      {
        uint64_t v53 = *v52;
        if (v53 < 0x30 || v53 >= v51)
        {
          if (v53 < 0x41 || v53 >= v50)
          {
            uint64_t v16 = 0;
            uint64_t v17 = 1;
            if (v53 < 0x61 || v53 >= v49) {
              goto LABEL_144;
            }
            uint64_t v54 = -87;
          }

          else
          {
            uint64_t v54 = -55;
          }
        }

        else
        {
          uint64_t v54 = -48;
        }

        uint64_t v55 = (__int16)v22 * (__int16)a3;
        uint64_t v56 = v55;
        uint64_t v22 = (__int16)v55 + (v53 + v54);
        ++v52;
        --v48;
      }

      while (v48);
LABEL_142:
      uint64_t v17 = 0;
      uint64_t v16 = v22;
      goto LABEL_144;
    }

    goto LABEL_143;
  }

        uint64_t v16 = 0;
        uint64_t v17 = 0;
LABEL_144:
        uint64_t v66 = v17;
        return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
      }

      goto LABEL_143;
    }

    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }

  uint64_t v20 = HIBYTE(a2) & 0xF;
  v65[0] = result;
  v65[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v20)
      {
        uint64_t v22 = 0;
        uint64_t v57 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v58 = a3 + 55;
        }

        else
        {
          uint64_t v57 = 97;
          uint64_t v58 = 65;
        }

        if (a3 <= 10) {
          uint64_t v59 = a3 + 48;
        }
        else {
          uint64_t v59 = 58;
        }
        uint64_t v60 = (unsigned __int8 *)v65;
        while (1)
        {
          id v61 = *v60;
          if (v61 < 0x30 || v61 >= v59)
          {
            if (v61 < 0x41 || v61 >= v58)
            {
              uint64_t v16 = 0;
              uint64_t v17 = 1;
              if (v61 < 0x61 || v61 >= v57) {
                goto LABEL_144;
              }
              uint64_t v62 = -87;
            }

            else
            {
              uint64_t v62 = -55;
            }
          }

          else
          {
            uint64_t v62 = -48;
          }

          uint64_t v63 = (int)v22 * (uint64_t)(int)a3;
          uint64_t v64 = v61 + v62;
          uint64_t v22 = v63 + v64;
          if (__OFADD__((_DWORD)v63, v64)) {
            goto LABEL_143;
          }
          ++v60;
          if (!--v20) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    if (v20)
    {
      os_log_type_t v21 = v20 - 1;
      if (v21)
      {
        uint64_t v22 = 0;
        uint64_t v23 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v24 = a3 + 55;
        }

        else
        {
          uint64_t v23 = 97;
          uint64_t v24 = 65;
        }

        if (a3 <= 10) {
          uint64_t v25 = a3 + 48;
        }
        else {
          uint64_t v25 = 58;
        }
        uint64_t v26 = (unsigned __int8 *)v65 + 1;
        while (1)
        {
          os_log_type_t v27 = *v26;
          if (v27 < 0x30 || v27 >= v25)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v16 = 0;
              uint64_t v17 = 1;
              if (v27 < 0x61 || v27 >= v23) {
                goto LABEL_144;
              }
              uint64_t v28 = -87;
            }

            else
            {
              uint64_t v28 = -55;
            }
          }

          else
          {
            uint64_t v28 = -48;
          }

          unsigned int v29 = (int)v22 * (uint64_t)(int)a3;
          char v30 = v27 + v28;
          uint64_t v22 = v29 - v30;
          if (__OFSUB__((_DWORD)v29, v30)) {
            goto LABEL_143;
          }
          ++v26;
          if (!--v21) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    goto LABEL_149;
  }

  if (v20)
  {
    uint64_t v48 = v20 - 1;
    if (v48)
    {
      uint64_t v22 = 0;
      os_log_type_t v49 = a3 + 87;
      if (a3 > 10)
      {
        uint64_t v50 = a3 + 55;
      }

      else
      {
        os_log_type_t v49 = 97;
        uint64_t v50 = 65;
      }

      if (a3 <= 10) {
        uint64_t v51 = a3 + 48;
      }
      else {
        uint64_t v51 = 58;
      }
      uint64_t v52 = (unsigned __int8 *)v65 + 1;
      do
      {
        uint64_t v53 = *v52;
        if (v53 < 0x30 || v53 >= v51)
        {
          if (v53 < 0x41 || v53 >= v50)
          {
            uint64_t v16 = 0;
            uint64_t v17 = 1;
            if (v53 < 0x61 || v53 >= v49) {
              goto LABEL_144;
            }
            uint64_t v54 = -87;
          }

          else
          {
            uint64_t v54 = -55;
          }
        }

        else
        {
          uint64_t v54 = -48;
        }

        uint64_t v55 = (int)v22 * (uint64_t)(int)a3;
        uint64_t v56 = v53 + v54;
        uint64_t v22 = v55 + v56;
        if (__OFADD__((_DWORD)v55, v56)) {
          goto LABEL_143;
        }
        ++v52;
        --v48;
      }

      while (v48);
LABEL_142:
      uint64_t v17 = 0;
      uint64_t v16 = v22;
      goto LABEL_144;
    }

    goto LABEL_143;
  }

        uint64_t v16 = 0;
        uint64_t v17 = 0;
LABEL_144:
        uint64_t v54 = v17;
LABEL_145:
        LOBYTE(v53[0]) = (a2 & 0x1000000000000000LL) != 0;
        return v16 | (v54 << 8) | (LOBYTE(v53[0]) << 16);
      }

      goto LABEL_143;
    }

    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }

  id v18 = HIBYTE(a2) & 0xF;
  v53[0] = result;
  v53[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v18)
      {
        LOBYTE(v20) = 0;
        uint64_t v47 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v48 = a3 + 55;
        }

        else
        {
          uint64_t v47 = 97;
          uint64_t v48 = 65;
        }

        if (a3 <= 10) {
          os_log_type_t v49 = a3 + 48;
        }
        else {
          os_log_type_t v49 = 58;
        }
        uint64_t v50 = (unsigned __int8 *)v53;
        while (1)
        {
          uint64_t v51 = *v50;
          if (v51 < 0x30 || v51 >= v49)
          {
            if (v51 < 0x41 || v51 >= v48)
            {
              uint64_t v16 = 0;
              uint64_t v17 = 1;
              if (v51 < 0x61 || v51 >= v47) {
                goto LABEL_144;
              }
              uint64_t v52 = -87;
            }

            else
            {
              uint64_t v52 = -55;
            }
          }

          else
          {
            uint64_t v52 = -48;
          }

          uint64_t v20 = (v20 * a3) + (v51 + v52);
          if (((v20 >> 8) & 1) != 0) {
            goto LABEL_143;
          }
          ++v50;
          if (!--v18) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    if (v18)
    {
      uint64_t v19 = v18 - 1;
      if (v19)
      {
        LOBYTE(v20) = 0;
        os_log_type_t v21 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v22 = a3 + 55;
        }

        else
        {
          os_log_type_t v21 = 97;
          uint64_t v22 = 65;
        }

        if (a3 <= 10) {
          uint64_t v23 = a3 + 48;
        }
        else {
          uint64_t v23 = 58;
        }
        uint64_t v24 = (unsigned __int8 *)v53 + 1;
        while (1)
        {
          uint64_t v25 = *v24;
          if (v25 < 0x30 || v25 >= v23)
          {
            if (v25 < 0x41 || v25 >= v22)
            {
              uint64_t v16 = 0;
              uint64_t v17 = 1;
              if (v25 < 0x61 || v25 >= v21) {
                goto LABEL_144;
              }
              uint64_t v26 = -87;
            }

            else
            {
              uint64_t v26 = -55;
            }
          }

          else
          {
            uint64_t v26 = -48;
          }

          uint64_t v20 = (v20 * a3) - (v25 + v26);
          if ((v20 & 0xFFFFFF00) != 0) {
            goto LABEL_143;
          }
          ++v24;
          if (!--v19) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    goto LABEL_149;
  }

  if (v18)
  {
    uint64_t v40 = v18 - 1;
    if (v40)
    {
      LOBYTE(v20) = 0;
      uint64_t v41 = a3 + 87;
      if (a3 > 10)
      {
        uint64_t v42 = a3 + 55;
      }

      else
      {
        uint64_t v41 = 97;
        uint64_t v42 = 65;
      }

      if (a3 <= 10) {
        id v43 = a3 + 48;
      }
      else {
        id v43 = 58;
      }
      uint64_t v44 = (unsigned __int8 *)v53 + 1;
      do
      {
        uint64_t v45 = *v44;
        if (v45 < 0x30 || v45 >= v43)
        {
          if (v45 < 0x41 || v45 >= v42)
          {
            uint64_t v16 = 0;
            uint64_t v17 = 1;
            if (v45 < 0x61 || v45 >= v41) {
              goto LABEL_144;
            }
            os_log_type_t v46 = -87;
          }

          else
          {
            os_log_type_t v46 = -55;
          }
        }

        else
        {
          os_log_type_t v46 = -48;
        }

        uint64_t v20 = (v20 * a3) + (v45 + v46);
        if (((v20 >> 8) & 1) != 0) {
          goto LABEL_143;
        }
        ++v44;
        --v40;
      }

      while (v40);
LABEL_142:
      uint64_t v17 = 0;
      uint64_t v16 = v20;
      goto LABEL_144;
    }

    goto LABEL_143;
  }

        uint64_t v16 = 0;
        uint64_t v17 = 0;
LABEL_144:
        uint64_t v54 = v17;
LABEL_145:
        LOBYTE(v53[0]) = (a2 & 0x1000000000000000LL) != 0;
        return v16 | (v54 << 16) | (LOBYTE(v53[0]) << 24);
      }

      goto LABEL_143;
    }

    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }

  id v18 = HIBYTE(a2) & 0xF;
  v53[0] = result;
  v53[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v18)
      {
        LOWORD(v20) = 0;
        uint64_t v47 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v48 = a3 + 55;
        }

        else
        {
          uint64_t v47 = 97;
          uint64_t v48 = 65;
        }

        if (a3 <= 10) {
          os_log_type_t v49 = a3 + 48;
        }
        else {
          os_log_type_t v49 = 58;
        }
        uint64_t v50 = (unsigned __int8 *)v53;
        while (1)
        {
          uint64_t v51 = *v50;
          if (v51 < 0x30 || v51 >= v49)
          {
            if (v51 < 0x41 || v51 >= v48)
            {
              uint64_t v16 = 0;
              uint64_t v17 = 1;
              if (v51 < 0x61 || v51 >= v47) {
                goto LABEL_144;
              }
              uint64_t v52 = -87;
            }

            else
            {
              uint64_t v52 = -55;
            }
          }

          else
          {
            uint64_t v52 = -48;
          }

          uint64_t v20 = (unsigned __int16)(v20 * a3) + (v51 + v52);
          if ((v20 & 0x10000) != 0) {
            goto LABEL_143;
          }
          ++v50;
          if (!--v18) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    if (v18)
    {
      uint64_t v19 = v18 - 1;
      if (v19)
      {
        LOWORD(v20) = 0;
        os_log_type_t v21 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v22 = a3 + 55;
        }

        else
        {
          os_log_type_t v21 = 97;
          uint64_t v22 = 65;
        }

        if (a3 <= 10) {
          uint64_t v23 = a3 + 48;
        }
        else {
          uint64_t v23 = 58;
        }
        uint64_t v24 = (unsigned __int8 *)v53 + 1;
        while (1)
        {
          uint64_t v25 = *v24;
          if (v25 < 0x30 || v25 >= v23)
          {
            if (v25 < 0x41 || v25 >= v22)
            {
              uint64_t v16 = 0;
              uint64_t v17 = 1;
              if (v25 < 0x61 || v25 >= v21) {
                goto LABEL_144;
              }
              uint64_t v26 = -87;
            }

            else
            {
              uint64_t v26 = -55;
            }
          }

          else
          {
            uint64_t v26 = -48;
          }

          uint64_t v20 = (unsigned __int16)(v20 * a3) - (v25 + v26);
          if ((v20 & 0xFFFF0000) != 0) {
            goto LABEL_143;
          }
          ++v24;
          if (!--v19) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    goto LABEL_149;
  }

  if (v18)
  {
    uint64_t v40 = v18 - 1;
    if (v40)
    {
      LOWORD(v20) = 0;
      uint64_t v41 = a3 + 87;
      if (a3 > 10)
      {
        uint64_t v42 = a3 + 55;
      }

      else
      {
        uint64_t v41 = 97;
        uint64_t v42 = 65;
      }

      if (a3 <= 10) {
        id v43 = a3 + 48;
      }
      else {
        id v43 = 58;
      }
      uint64_t v44 = (unsigned __int8 *)v53 + 1;
      do
      {
        uint64_t v45 = *v44;
        if (v45 < 0x30 || v45 >= v43)
        {
          if (v45 < 0x41 || v45 >= v42)
          {
            uint64_t v16 = 0;
            uint64_t v17 = 1;
            if (v45 < 0x61 || v45 >= v41) {
              goto LABEL_144;
            }
            os_log_type_t v46 = -87;
          }

          else
          {
            os_log_type_t v46 = -55;
          }
        }

        else
        {
          os_log_type_t v46 = -48;
        }

        uint64_t v20 = (unsigned __int16)(v20 * a3) + (v45 + v46);
        if ((v20 & 0x10000) != 0) {
          goto LABEL_143;
        }
        ++v44;
        --v40;
      }

      while (v40);
LABEL_142:
      uint64_t v17 = 0;
      uint64_t v16 = v20;
      goto LABEL_144;
    }

    goto LABEL_143;
  }

        uint64_t v16 = 0;
        uint64_t v17 = 0;
LABEL_144:
        uint64_t v66 = v17;
        return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
      }

      goto LABEL_143;
    }

    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }

  uint64_t v20 = HIBYTE(a2) & 0xF;
  v65[0] = result;
  v65[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v20)
      {
        uint64_t v22 = 0;
        uint64_t v57 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v58 = a3 + 55;
        }

        else
        {
          uint64_t v57 = 97;
          uint64_t v58 = 65;
        }

        if (a3 <= 10) {
          uint64_t v59 = a3 + 48;
        }
        else {
          uint64_t v59 = 58;
        }
        uint64_t v60 = (unsigned __int8 *)v65;
        while (1)
        {
          id v61 = *v60;
          if (v61 < 0x30 || v61 >= v59)
          {
            if (v61 < 0x41 || v61 >= v58)
            {
              uint64_t v16 = 0;
              uint64_t v17 = 1;
              if (v61 < 0x61 || v61 >= v57) {
                goto LABEL_144;
              }
              uint64_t v62 = -87;
            }

            else
            {
              uint64_t v62 = -55;
            }
          }

          else
          {
            uint64_t v62 = -48;
          }

          uint64_t v63 = v22 * (unint64_t)a3;
          if ((v63 & 0xFFFFFFFF00000000LL) != 0) {
            goto LABEL_143;
          }
          uint64_t v64 = v61 + v62;
          uint64_t v22 = v63 + v64;
          if (__CFADD__((_DWORD)v63, v64)) {
            goto LABEL_143;
          }
          ++v60;
          if (!--v20) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    if (v20)
    {
      os_log_type_t v21 = v20 - 1;
      if (v21)
      {
        uint64_t v22 = 0;
        uint64_t v23 = a3 + 87;
        if (a3 > 10)
        {
          uint64_t v24 = a3 + 55;
        }

        else
        {
          uint64_t v23 = 97;
          uint64_t v24 = 65;
        }

        if (a3 <= 10) {
          uint64_t v25 = a3 + 48;
        }
        else {
          uint64_t v25 = 58;
        }
        uint64_t v26 = (unsigned __int8 *)v65 + 1;
        while (1)
        {
          os_log_type_t v27 = *v26;
          if (v27 < 0x30 || v27 >= v25)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v16 = 0;
              uint64_t v17 = 1;
              if (v27 < 0x61 || v27 >= v23) {
                goto LABEL_144;
              }
              uint64_t v28 = -87;
            }

            else
            {
              uint64_t v28 = -55;
            }
          }

          else
          {
            uint64_t v28 = -48;
          }

          unsigned int v29 = v22 * (unint64_t)a3;
          if ((v29 & 0xFFFFFFFF00000000LL) != 0) {
            goto LABEL_143;
          }
          char v30 = v27 + v28;
          uint64_t v22 = v29 - v30;
          ++v26;
          if (!--v21) {
            goto LABEL_142;
          }
        }
      }

      goto LABEL_143;
    }

    goto LABEL_149;
  }

  if (v20)
  {
    uint64_t v48 = v20 - 1;
    if (v48)
    {
      uint64_t v22 = 0;
      os_log_type_t v49 = a3 + 87;
      if (a3 > 10)
      {
        uint64_t v50 = a3 + 55;
      }

      else
      {
        os_log_type_t v49 = 97;
        uint64_t v50 = 65;
      }

      if (a3 <= 10) {
        uint64_t v51 = a3 + 48;
      }
      else {
        uint64_t v51 = 58;
      }
      uint64_t v52 = (unsigned __int8 *)v65 + 1;
      do
      {
        uint64_t v53 = *v52;
        if (v53 < 0x30 || v53 >= v51)
        {
          if (v53 < 0x41 || v53 >= v50)
          {
            uint64_t v16 = 0;
            uint64_t v17 = 1;
            if (v53 < 0x61 || v53 >= v49) {
              goto LABEL_144;
            }
            uint64_t v54 = -87;
          }

          else
          {
            uint64_t v54 = -55;
          }
        }

        else
        {
          uint64_t v54 = -48;
        }

        uint64_t v55 = v22 * (unint64_t)a3;
        if ((v55 & 0xFFFFFFFF00000000LL) != 0) {
          goto LABEL_143;
        }
        uint64_t v56 = v53 + v54;
        uint64_t v22 = v55 + v56;
        if (__CFADD__((_DWORD)v55, v56)) {
          goto LABEL_143;
        }
        ++v52;
        --v48;
      }

      while (v48);
LABEL_142:
      uint64_t v17 = 0;
      uint64_t v16 = v22;
      goto LABEL_144;
    }

    goto LABEL_143;
  }

LABEL_160:
  sub_100009AA0();
}

uint64_t sub_10006461C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + OBJC_IVAR____TtC7parsecd11ClientState_engagedSuggestionController;
  uint64_t result = sub_10006B2F0(a1, (uint64_t)v17);
  if (*(void *)(v3 + 24))
  {
    sub_10006B6F0(result, v5, v6, v7, v8, v9, v10, v11, v14[0]);
    uint64_t v12 = v15;
    uint64_t v13 = v16;
    sub_10006B6C8(v14, v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 72))(a1, v12, v13);
    return sub_1000108B8(v14);
  }

  return result;
}

void sub_100064698()
{
  uint64_t v2 = sub_1000471D8(OBJC_IVAR____TtC7parsecd16ClientConnection_assembly);
  if (v2)
  {
    uint64_t v3 = v2;
    if (qword_1001D04F8 != -1) {
      swift_once(&qword_1001D04F8, sub_1000343F4);
    }
    uint64_t v4 = sub_100010ED4();
    sub_100010E78(v4, (uint64_t)qword_1001EDBB8);
    os_log_type_t v5 = sub_100014588();
    if (os_log_type_enabled(v1, v5))
    {
      uint64_t v6 = (uint8_t *)sub_100009B20(2LL);
      *(_WORD *)uint64_t v6 = 0;
      sub_10001447C((void *)&_mh_execute_header, v1, v5, "registering new receiving listener", v6);
      sub_100010C34((uint64_t)v6);
    }

    *((_BYTE *)v1 + OBJC_IVAR____TtC7parsecd16ClientConnection_isActiveListener) = 1;
    uint64_t v7 = *(void *)((char *)v1 + OBJC_IVAR____TtC7parsecd16ClientConnection_remoteObject);
    *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 32) = v7;
    swift_unknownObjectRetain(v7);
    sub_10006B644();
    sub_100010CA0();
    if (v0) {
      sub_10006B2DC();
    }
  }

  else
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(kPARErrorDomain);
    sub_10006B69C();
    uint64_t v8 = sub_10000941C(&qword_1001D10D0);
    uint64_t v16 = (__n128 *)sub_10006B5DC(v8, v9, v10, v11, v12, v13, v14, v15, v27);
    uint64_t v17 = sub_10006B254(v16, (__n128)xmmword_10015C7F0);
    v17[4].n128_u64[1] = (unint64_t)&type metadata for String;
    uint64_t v18 = sub_10006B3C0((uint64_t)v17, 0xD00000000000002FLL);
    uint64_t v20 = Dictionary.init(dictionaryLiteral:)( v18,  v19,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    id v21 = objc_allocWithZone(&OBJC_CLASS___NSError);
    uint64_t v22 = (void *)sub_10006B3A4((uint64_t)v1, (uint64_t)v1, 99LL, v20);
    if (qword_1001D04F8 != -1) {
      swift_once(&qword_1001D04F8, sub_1000343F4);
    }
    uint64_t v23 = sub_100010ED4();
    sub_100010E78(v23, (uint64_t)qword_1001EDBB8);
    os_log_type_t v24 = sub_100010EC4();
    if (sub_10006B5F4(v24))
    {
      uint64_t v25 = (uint8_t *)sub_100009B20(2LL);
      *(_WORD *)uint64_t v25 = 0;
      sub_10001447C( (void *)&_mh_execute_header,  v1,  (os_log_type_t)v20,  "assembly was missing at teeFeedback time",  v25);
      sub_100010C34((uint64_t)v25);
    }

    if (v0)
    {
      swift_errorRetain(v22);
      uint64_t v26 = sub_1000C5FB0((uint64_t)v22);

      sub_10006B2DC();
      swift_errorRelease(v26);
    }
  }

  sub_10006B4D4();
}

void sub_100064980(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)(a1);
  }
  else {
    uint64_t v3 = 0LL;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

void sub_1000649CC()
{
  uint64_t v3 = sub_1000471D8(OBJC_IVAR____TtC7parsecd16ClientConnection_assembly);
  if (v3)
  {
    uint64_t v4 = v3;
    sub_10004A9F4();
    if (v0) {
      sub_10006B2DC();
    }
    sub_10006B3AC(v4);
  }

  else
  {
    if (v0)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(kPARErrorDomain);
      sub_10006B69C();
      uint64_t v5 = sub_10000941C(&qword_1001D10D0);
      uint64_t v13 = (__n128 *)sub_10006B5DC(v5, v6, v7, v8, v9, v10, v11, v12, v20);
      uint64_t v14 = sub_10006B254(v13, (__n128)xmmword_10015C7F0);
      v14[4].n128_u64[1] = (unint64_t)&type metadata for String;
      uint64_t v15 = sub_10006B3C0((uint64_t)v14, 0xD000000000000018LL);
      uint64_t v17 = Dictionary.init(dictionaryLiteral:)( v15,  v16,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
      id v18 = objc_allocWithZone(&OBJC_CLASS___NSError);
      uint64_t v19 = (void *)sub_10006B3A4(v1, v2, 99LL, v17);
      sub_10006B2DC();
    }

    sub_10006B494();
  }

void sub_100064B68()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_100019F9C();
  os_log_type_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100009B54();
  sub_10005FF10();
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = sub_100082F6C();
    uint64_t v9 = Client.type.getter(v8);
    sub_10006B56C(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    sub_10006B664();
    if (v9 == sub_10006B888()) {
      goto LABEL_10;
    }
    sub_100083C5C();
    if (*(_BYTE *)(v2 + OBJC_IVAR____TtC7parsecd16ClientConnection_isActiveListener) != 1) {
      goto LABEL_10;
    }
    if (qword_1001D04F8 != -1) {
      swift_once(&qword_1001D04F8, sub_1000343F4);
    }
    uint64_t v10 = sub_100010ED4();
    sub_100010E78(v10, (uint64_t)qword_1001EDBB8);
    os_log_type_t v11 = sub_100014588();
    if (sub_10003EFD0(v11))
    {
      uint64_t v12 = (_WORD *)sub_100009B20(2LL);
      sub_10006B5C8(v12);
      sub_10001447C( (void *)&_mh_execute_header,  v7,  v4,  "cleaning up receiving listener after connection was interrupted",  v1);
      sub_100010C34((uint64_t)v1);
    }

    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC7parsecd16ClientConnection_assembly);
    if (Strong)
    {
      *(void *)(Strong + swift_unknownObjectWeakDestroy(v0 + 32) = 0LL;
      swift_unknownObjectRelease();
      sub_100010D00();
      sub_100010CA0();
    }

    else
    {
LABEL_10:
      sub_100010D00();
    }
  }

  sub_100019F1C();
}

void sub_100064CB4(uint64_t a1)
{
  if (a1)
  {
    sub_10006B7C8();
    sub_1000D16E8();
    sub_10006B2DC();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_1000110D4();
  }

void sub_100064D98(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    sub_10000941C((uint64_t *)&unk_1001D44D0);
    v3.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }

  else
  {
    v3.super.Class isa = 0LL;
  }

  Class isa = v3.super.isa;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

void sub_100064DFC(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (sub_1000471D8(OBJC_IVAR____TtC7parsecd16ClientConnection_assembly))
  {
    id v13 = [objc_allocWithZone(NSDictionary) init];
    sub_100048680();
    sub_1000718CC();
    uint64_t v7 = v6;
    sub_100010CA0();
    if (a3)
    {
      id v8 = v13;
      static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

      ((void (*)(void *, void, void))a3)(v7, 0LL, 0LL);
      sub_1000145E0();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_1000145E0();
    }
  }

  else if (a3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(kPARErrorDomain);
    sub_10006B69C();
    id v9 = objc_allocWithZone(&OBJC_CLASS___NSError);
    sub_10006B3A4(v3, v4, 500LL, 0LL);
    uint64_t v10 = _s7SQLiter18SQLiteBaseFunctionC4nameSSSgvpfi_0();
    id v12 = v11;
    a3(v10);
  }

void sub_100065070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    v7.super.Class isa = 0LL;
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v8 = 0LL;
    goto LABEL_6;
  }

  v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (!a3) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v8 = _convertErrorToNSError(_:)(a3);
LABEL_6:
  id v9 = (id)v8;
  (*(void (**)(uint64_t, uint64_t, Class))(a4 + 16))(a4, a1, v7.super.isa);
}

uint64_t sub_100065114()
{
  if (!sub_1000471D8(OBJC_IVAR____TtC7parsecd16ClientConnection_assembly))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(kPARErrorDomain);
    id v6 = objc_allocWithZone(&OBJC_CLASS___NSError);
    uint64_t v7 = sub_10006B794();
    uint64_t v4 = sub_10006B3A4(v7, v8, v9, 0LL);
    swift_willThrow(v4);
    uint64_t v3 = 0LL;
    if (v0) {
      goto LABEL_3;
    }
LABEL_5:

    return swift_errorRelease(v4);
  }

  id v2 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v3 = sub_100077894(v1);
  uint64_t v4 = 0LL;
  sub_10005A910();

  if (!v0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v5 = sub_1000C5FB0(v4);
  v0(v3, v5);

  swift_errorRelease(v4);
  uint64_t v4 = v5;
  return swift_errorRelease(v4);
}

void sub_1000652C8(uint64_t a1, uint64_t a2)
{
  if (a2) {
    _convertErrorToNSError(_:)(a2);
  }
  uint64_t v2 = sub_10006B688();
  id v5 = v3;
  v4(v2);
}

void sub_10006531C()
{
  if (v0)
  {
    uint64_t v1 = v0 + OBJC_IVAR____TtC7parsecd11ClientState_engagedSuggestionController;
    uint64_t v2 = sub_10006B2F0(v0, (uint64_t)v13);
    if (*(void *)(v1 + 24))
    {
      sub_10006B6F0(v2, v3, v4, v5, v6, v7, v8, v9, v12[0]);
      sub_10006B6C8(v12, v12[3]);
      uint64_t v10 = sub_100019F90();
      v11(v10);
      sub_100010D00();
      sub_1000108B8(v12);
    }

    else
    {
      sub_100010D00();
    }
  }

void sub_100065494(uint64_t a1, uint64_t a2, void *a3)
{
  if (v4)
  {
    uint64_t v5 = v4 + OBJC_IVAR____TtC7parsecd11ClientState_engagedSuggestionController;
    sub_10006B2F0(v4, (uint64_t)v9);
    if (*(void *)(v5 + 24))
    {
      sub_100019B20(v5, (uint64_t)v8);
      sub_10006B6C8(v8, v8[3]);
      if (a3) {
        [a3 intValue];
      }
      uint64_t v6 = sub_100019F90();
      v7(v6);
      sub_100010D00();
      sub_1000108B8(v8);
    }

    else
    {
      sub_100010D00();
    }
  }

  sub_10006B4D4();
}

void sub_1000655CC(void *a1, void *a2)
{
}

void sub_1000655DC(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1001D04E0 != -1) {
      swift_once(&qword_1001D04E0, sub_10003438C);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    sub_1000093D0(v2, (uint64_t)qword_1001EDB70);
    swift_errorRetain(a1);
    uint64_t v3 = swift_errorRetain(a1);
    oslog = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.error.getter(oslog, v4);
    if (os_log_type_enabled(oslog, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v7 = swift_slowAlloc(32LL, -1LL);
      uint64_t v13 = v7;
      *(_DWORD *)uint64_t v6 = 136315138;
      swift_getErrorValue(a1);
      uint64_t v8 = Error.localizedDescription.getter(v12[1], v12[2]);
      uint64_t v11 = sub_1000307E0(v8, v9, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, v12, v6 + 4);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "ECC: Failed to add engagedResult %s", v6, 0xCu);
      swift_arrayDestroy(v7, 1LL);
      swift_slowDealloc(v7, -1LL, -1LL);
      swift_slowDealloc(v6, -1LL, -1LL);

      swift_errorRelease(a1);
    }

    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }
  }

void sub_1000657CC(void *a1, void *a2, uint64_t a3)
{
  if (v19)
  {
    uint64_t v5 = sub_100019BC4(&v18, (uint64_t)v20);
    if (a1) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = _swiftEmptyArrayStorage;
    }
    *(void *)&__int128 v18 = _swiftEmptyArrayStorage;
    uint64_t v7 = v6[2];
    if (v7)
    {
      sub_100009B34(v5, &qword_1001D44B0, &OBJC_CLASS___PAREngagedResult_ptr);
      sub_10003EF98();
      sub_1000145E8();
      uint64_t v8 = v6 + 5;
      do
      {
        sub_10006B5E4();
        uint64_t v9 = sub_10006B678();
        if (v9)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v9);
          unint64_t v10 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= v10 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1);
          }
          uint64_t v11 = sub_10006B6BC();
          specialized Array._endMutation()(v11);
        }

        v8 += 2;
        --v7;
      }

      while (v7);
      sub_10001450C();
      unint64_t v12 = v18;
    }

    else
    {
      sub_10003EF98();
      unint64_t v12 = (unint64_t)_swiftEmptyArrayStorage;
    }

    sub_10001450C();
    if (v12 >> 62)
    {
      sub_10006B53C();
      uint64_t v17 = sub_10006B828();
      sub_10001460C();
      if (v17) {
        goto LABEL_18;
      }
    }

    else if (*(void *)((v12 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_18:
      uint64_t v16 = v20[4];
      sub_10006B6C8(v20, v20[3]);
      sub_10006B49C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 48));
      sub_10001460C();
LABEL_22:
      sub_1000108B8(v20);
      return;
    }

    sub_10001460C();
    if (a3) {
      sub_10006B2DC();
    }
    goto LABEL_22;
  }

  sub_100019C1C((uint64_t)&v18, (uint64_t *)&unk_1001D44A0);
  if (a3)
  {
    unint64_t v13 = sub_10006A16C();
    uint64_t v14 = sub_100010EA0((uint64_t)&_s5ErrorON, v13);
    *uint64_t v15 = 1;
    sub_10006B2DC();
    swift_errorRelease(v14);
  }

double sub_100065A10@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = v3;
  if (v3 >= 2)
  {
    uint64_t v5 = v3 + OBJC_IVAR____TtC7parsecd11ClientState_engagedSuggestionController;
    swift_beginAccess(v3 + OBJC_IVAR____TtC7parsecd11ClientState_engagedSuggestionController, v15, 0LL, 0LL);
    sub_10006A3EC(v5, (uint64_t)&v13);
    sub_100040904(v4);
    if (v14)
    {
      sub_100019BC4(&v13, a2);
      return result;
    }

    sub_100019C1C((uint64_t)&v13, (uint64_t *)&unk_1001D44A0);
  }

  else
  {
    sub_100040904(v3);
  }

  if (qword_1001D0518 != -1) {
    swift_once(&qword_1001D0518, sub_100034490);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = sub_1000093D0(v7, (uint64_t)qword_1001EDC18);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v11 = static os_log_type_t.error.getter(v9, v10);
  if (os_log_type_enabled(v9, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v11, "State is not ready", v12, 2u);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 32) = 0LL;
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + sub_10000BDD4(v0 + 16) = 0u;
  return result;
}

uint64_t sub_100065C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[15] = a4;
  v5[16] = v4;
  v5[13] = a2;
  v5[14] = a3;
  v5[12] = a1;
  return sub_10006B27C((uint64_t)sub_100065C50);
}

void sub_100065C50()
{
  uint64_t v1 = v0;
  sub_100065A10(*(void **)(v0 + 120), v0 + 56);
  if (*(void *)(v0 + 80))
  {
    uint64_t v41 = (void *)(v0 + 16);
    sub_100019BC4((__int128 *)(v0 + 56), v0 + 16);
    if (qword_1001D0518 != -1) {
      swift_once(&qword_1001D0518, sub_100034490);
    }
    uint64_t v2 = sub_100010ED4();
    unint64_t v3 = (void *)sub_1000093D0(v2, (uint64_t)qword_1001EDC18);
    Logger.logObject.getter(v3);
    os_log_type_t v4 = sub_100014588();
    uint64_t v5 = &unk_10015D000;
    if (sub_100010DE4(v4))
    {
      uint64_t v6 = *(void *)(v0 + 112);
      uint64_t v7 = (uint8_t *)sub_100009B20(12LL);
      *(_DWORD *)uint64_t v7 = 134217984;
      *(void *)(v0 + sub_10000BDD4(v0 + 56) = v6;
      sub_10006B6E4((uint64_t)v7, v8, (uint64_t)(v7 + 4));
      sub_10006B768();
      sub_100014564(v9, v10, v11, v12, v7);
      sub_100010C34((uint64_t)v7);
    }

    uint64_t v13 = *(void *)(v0 + 112);

    uint64_t v14 = *(void *)(v0 + 40);
    uint64_t v15 = *(void *)(v0 + 48);
    sub_100019AFC(v41, v14);
    if (v13 < 0)
    {
      sub_100010FA8();
      sub_10006B518( (uint64_t)"Fatal error",  v32,  v33,  (uint64_t)"Negative value is not representable",  v34,  v35,  (uint64_t)"Swift/Integers.swift",  v36,  v38,  v39,  v40);
      sub_10006B494();
      return;
    }

    uint64_t v16 = (*(uint64_t (**)(void, void, void, uint64_t, uint64_t))(v15 + 24))( *(void *)(v0 + 96),  *(void *)(v0 + 104),  *(void *)(v0 + 112),  v14,  v15);
    uint64_t v17 = swift_bridgeObjectRetain_n(v16, 2LL);
    __int128 v18 = (os_log_s *)v3;
    Logger.logObject.getter(v17);
    os_log_type_t v19 = sub_100014588();
    unint64_t v20 = (unint64_t)v16 >> 62;
    if (!os_log_type_enabled(v18, v19))
    {
      sub_100019F4C(v16);
      goto LABEL_13;
    }

    uint64_t v15 = sub_100009B20(12LL);
    *(_DWORD *)uint64_t v15 = 134217984;
    if (v20) {
      goto LABEL_33;
    }
    uint64_t v5 = *(void **)((v16 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    while (1)
    {
      uint64_t v21 = sub_1000110A8();
      *(void *)(v1 + sub_10000BDD4(v0 + 56) = v5;
      sub_10006B6E4(v21, v22, v15 + 4);
      sub_1000110A8();
      sub_100014564((void *)&_mh_execute_header, v18, v19, "Fetched %ld recent results", (uint8_t *)v15);
      sub_100010C34(v15);
LABEL_13:

      if (v20)
      {
        if (v16 < 0) {
          __int128 v18 = (os_log_s *)v16;
        }
        else {
          __int128 v18 = (os_log_s *)(v16 & 0xFFFFFFFFFFFFFF8LL);
        }
        sub_100010E2C();
        uint64_t v25 = sub_10006B828();
        uint64_t v24 = sub_1000110A8();
        if (!v25)
        {
LABEL_29:
          sub_1000110A8();
          uint64_t v23 = _swiftEmptyArrayStorage;
          goto LABEL_30;
        }
      }

      else
      {
        uint64_t v25 = *(void *)((v16 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (!v25) {
          goto LABEL_29;
        }
      }

      sub_10006B5A8(v24, v25 & ~(v25 >> 63));
      if ((v25 & 0x8000000000000000LL) == 0) {
        break;
      }
      __break(1u);
LABEL_33:
      if (v16 < 0) {
        uint64_t v37 = v16;
      }
      else {
        uint64_t v37 = v16 & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_100010E2C();
      uint64_t v5 = (void *)_CocoaArrayWrapper.endIndex.getter(v37);
      sub_1000110A8();
    }

    uint64_t v26 = 0LL;
    uint64_t v23 = _swiftEmptyArrayStorage;
    unint64_t v27 = v16 & 0xC000000000000001LL;
    uint64_t v28 = v16;
    do
    {
      if (v27) {
        specialized _ArrayBuffer._getElementSlowPath(_:)(v26, v16);
      }
      else {
        sub_10006B830(v16 + 8 * v26);
      }
      PAREngagedResult.encoded()();
      sub_10006B77C();
      unint64_t v30 = _swiftEmptyArrayStorage[2];
      unint64_t v29 = _swiftEmptyArrayStorage[3];
      if (v30 >= v29 >> 1) {
        sub_10006B448(v29);
      }
      ++v26;
      _swiftEmptyArrayStorage[2] = v30 + 1;
      uint64_t v31 = &_swiftEmptyArrayStorage[2 * v30];
      v31[4] = v5;
      v31[5] = v20;
      uint64_t v16 = v28;
    }

    while (v25 != v26);
    sub_1000110A8();
LABEL_30:
    sub_1000108B8(v41);
  }

  else
  {
    sub_100019C1C(v0 + 56, (uint64_t *)&unk_1001D44A0);
    uint64_t v23 = 0LL;
  }

  (*(void (**)(void *))(v1 + 8))(v23);
}

uint64_t sub_100066028(uint64_t a1, uint64_t a2, void *a3, void *aBlock, void *a5)
{
  void v5[2] = a3;
  void v5[3] = a5;
  __int128 v5[4] = _Block_copy(aBlock);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v12 = v11;
  v5[5] = v11;
  uint64_t v13 = dword_1001D44CC;
  id v14 = a3;
  a5;
  uint64_t v15 = (void *)swift_task_alloc(v13);
  v5[6] = v15;
  *uint64_t v15 = v5;
  v15[1] = sub_1000660D4;
  return sub_100065C38(v10, v12, a2, (uint64_t)v14);
}

uint64_t sub_1000660D4()
{
  os_log_type_t v4 = (void *)v1[3];
  uint64_t v3 = v1[4];
  uint64_t v5 = (void *)v1[2];
  sub_10006B7FC(v1[6], v6);
  sub_1000325E4();

  if (v3)
  {
    if (v0)
    {
      v7.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      sub_100009B3C();
    }

    else
    {
      v7.super.Class isa = 0LL;
    }

    uint64_t v8 = (void (**)(void, void))v1[4];
    ((void (**)(void, Class))v8)[2](v8, v7.super.isa);
    _Block_release(v8);
  }

  else
  {
    sub_100009B3C();
  }

  return sub_10006B364(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100066178(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C((uint64_t *)&unk_1001D0BD0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for TaskPriority(0LL);
  sub_100009654((uint64_t)v6, 1LL, 1LL, v7);
  uint64_t v8 = (void *)swift_allocObject(&unk_1001B4530, 48LL, 7LL);
  uint64_t v8[2] = 0LL;
  v8[3] = 0LL;
  void v8[4] = a1;
  v8[5] = a2;
  uint64_t v9 = (void *)swift_allocObject(&unk_1001B4558, 48LL, 7LL);
  v9[2] = 0LL;
  v9[3] = 0LL;
  v9[4] = &unk_1001D4410;
  v9[5] = v8;
  sub_100069DD0((uint64_t)v6, (uint64_t)&unk_1001D4420, (uint64_t)v9);
  return swift_release();
}

void sub_100066254(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  if (v29)
  {
    sub_100019BC4(&v28, (uint64_t)v30);
    uint64_t v10 = v31;
    uint64_t v11 = v32;
    sub_100019AFC(v30, v31);
    if ((a3 & 0x8000000000000000LL) == 0)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 32))(a1, a2, a3, v10, v11);
      uint64_t v13 = v12;
      if (!a5) {
        goto LABEL_22;
      }
      if ((unint64_t)v12 >> 62)
      {
        if (v12 >= 0) {
          v12 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v12);
        uint64_t v14 = v12;
        if (!v12) {
          goto LABEL_21;
        }
      }

      else
      {
        uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (!v14)
        {
LABEL_21:
          sub_10001450C();
          sub_10006B2DC();
LABEL_22:
          swift_bridgeObjectRelease();
          sub_1000108B8(v30);
          return;
        }
      }

      *(void *)&__int128 v28 = _swiftEmptyArrayStorage;
      sub_10006B5A8(v12, v14 & ~(v14 >> 63));
      if ((v14 & 0x8000000000000000LL) == 0)
      {
        uint64_t v15 = 0LL;
        uint64_t v16 = v28;
        do
        {
          if ((v13 & 0xC000000000000001LL) != 0) {
            specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v13);
          }
          else {
            sub_10006B830(v13 + 8 * v15);
          }
          PAREngagedResult.encoded()();
          sub_10006B77C();
          *(void *)&__int128 v28 = v16;
          unint64_t v18 = *(void *)(v16 + 16);
          unint64_t v17 = *(void *)(v16 + 24);
          if (v18 >= v17 >> 1)
          {
            sub_10006B448(v17);
            uint64_t v16 = v28;
          }

          ++v15;
          *(void *)(v16 + sub_10000BDD4(v0 + 16) = v18 + 1;
          uint64_t v19 = v16 + 16 * v18;
          *(void *)(v19 + swift_unknownObjectWeakDestroy(v0 + 32) = v11;
          *(void *)(v19 + 40) = v5;
        }

        while (v14 != v15);
        goto LABEL_21;
      }

      __break(1u);
    }

    sub_100010FA8();
    sub_10006B518( (uint64_t)"Fatal error",  v20,  v21,  (uint64_t)"Negative value is not representable",  v22,  v23,  (uint64_t)"Swift/Integers.swift",  v24,  v25,  v26,  v27);
    __break(1u);
    return;
  }

  sub_100019C1C((uint64_t)&v28, (uint64_t *)&unk_1001D44A0);
  if (a5) {
    sub_10006B2DC();
  }
}

void sub_100066510(uint64_t a1, uint64_t a2)
{
  if (a1) {
    v3.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else {
    v3.super.Class isa = 0LL;
  }
  Class isa = v3.super.isa;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

void sub_100066564(void *a1, void *a2, uint64_t a3)
{
  if (v34)
  {
    uint64_t v7 = sub_100019BC4(&v33, (uint64_t)v35);
    if (a1) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = _swiftEmptyArrayStorage;
    }
    *(void *)&__int128 v33 = _swiftEmptyArrayStorage;
    uint64_t v9 = v8[2];
    if (v9)
    {
      sub_100009B34(v7, &qword_1001D44B0, &OBJC_CLASS___PAREngagedResult_ptr);
      sub_10003EF98();
      sub_1000145E8();
      uint64_t v10 = v8 + 5;
      do
      {
        sub_10006B5E4();
        uint64_t v11 = sub_10006B678();
        if (v11)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
          unint64_t v12 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= v12 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1);
          }
          uint64_t v13 = sub_10006B6BC();
          specialized Array._endMutation()(v13);
        }

        v10 += 2;
        --v9;
      }

      while (v9);
      sub_10001450C();
      unint64_t v14 = v33;
    }

    else
    {
      sub_10003EF98();
      unint64_t v14 = (unint64_t)_swiftEmptyArrayStorage;
    }

    sub_10001450C();
    if (v14 >> 62)
    {
      sub_10006B53C();
      uint64_t v31 = sub_10006B828();
      sub_10001460C();
      if (v31) {
        goto LABEL_18;
      }
    }

    else if (*(void *)((v14 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_18:
      uint64_t v30 = v35[4];
      sub_10006B6C8(v35, v35[3]);
      sub_10006B49C(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56));
      sub_10001460C();
LABEL_22:
      sub_1000108B8(v35);
      return;
    }

    sub_10001460C();
    if (a3) {
      sub_10006B2DC();
    }
    goto LABEL_22;
  }

  sub_100019C1C((uint64_t)&v33, (uint64_t *)&unk_1001D44A0);
  if (a3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(kPARErrorDomain);
    sub_10006B69C();
    uint64_t v15 = sub_10000941C(&qword_1001D10D0);
    uint64_t v23 = (__n128 *)sub_10006B5DC(v15, v16, v17, v18, v19, v20, v21, v22, v32);
    uint64_t v24 = sub_10006B254(v23, (__n128)xmmword_10015C7F0);
    v24[4].n128_u64[1] = (unint64_t)&type metadata for String;
    uint64_t v25 = sub_10006B3C0((uint64_t)v24, 0xD000000000000022LL);
    uint64_t v27 = Dictionary.init(dictionaryLiteral:)( v25,  v26,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    id v28 = objc_allocWithZone(&OBJC_CLASS___NSError);
    uint64_t v29 = (void *)sub_10006B3A4(v3, v4, 500LL, v27);
    sub_10006B2DC();
  }

void sub_10006686C()
{
  if (sub_1000471D8(OBJC_IVAR____TtC7parsecd16ClientConnection_assembly) && (uint64_t v2 = sub_100047900(), sub_1000145E0(), v2))
  {
    sub_10001ED08(v1, v0);
    swift_unknownObjectRelease();
  }

  else
  {
    sub_1000110D4();
  }

void sub_100066938()
{
  if (sub_1000471D8(OBJC_IVAR____TtC7parsecd16ClientConnection_assembly))
  {
    if (v0)
    {
      sub_1000478B0();
      uint64_t v1 = _s7SQLiter18SQLiteBaseFunctionC4nameSSSgvpfi_0();
      sub_1000C20C4(v1, v2);
      sub_1000C27CC();
      uint64_t v4 = v3;
      uint64_t v5 = sub_10006B644();
      if (v4)
      {
        id v6 = sub_10006B65C(v5, "resources");

        if (v6)
        {
          static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v6,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
        }
      }

      sub_10006B2DC();
      sub_1000145E0();
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_unknownObjectRelease();
    }
  }

  else
  {
    if (v0) {
      sub_10006B2DC();
    }
    sub_100019F1C();
  }

void sub_100066AC4()
{
}

void sub_100066AF0(uint64_t a1, uint64_t a2)
{
  if (a1) {
    v3.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  else {
    v3.super.Class isa = 0LL;
  }
  Class isa = v3.super.isa;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_100066B5C(uint64_t a1)
{
  v4[0] = &unk_1001602D8;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = &unk_1001602F0;
    v4[4] = &unk_100160308;
    void v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v4[6] = &unk_100160320;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    void v4[8] = &unk_100160338;
    void v4[9] = (char *)&value witness table for Builtin.NativeObject + 64;
    void v4[10] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[12] = &unk_100160338;
    v4[13] = (char *)&value witness table for Builtin.NativeObject + 64;
    return swift_updateClassMetadata2(a1, 256LL, 14LL, v4, a1 + 80);
  }

  return result;
}

void sub_100066C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v85 = a3;
  uint64_t v5 = type metadata accessor for PegasusContext(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext(0LL);
  uint64_t v82 = *(void *)(Context - 8);
  __chkstk_darwin(Context);
  uint64_t v10 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001D0518 != -1) {
    swift_once(&qword_1001D0518, sub_100034490);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = sub_1000093D0(v11, (uint64_t)qword_1001EDC18);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = ((uint64_t (*)(void))static os_log_type_t.debug.getter)();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v83 = v10;
  uint64_t v84 = Context;
  if (v15)
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v16 = 134217984;
    uint64_t v90 = ClientType.rawValue.getter(a1);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v16 + 4);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Received QueryContext request for %lu", v16, 0xCu);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  uint64_t v17 = ClientType.rawValue.getter(a1);
  if (v17 == ClientType.rawValue.getter(13LL)
    && swift_unknownObjectWeakLoadStrong(a2 + OBJC_IVAR____TtC7parsecd16ClientConnection_assembly))
  {
    sub_100048630();
    BOOL v18 = sub_100043E7C();
    swift_unknownObjectRelease();
    if (v18)
    {
      uint64_t v19 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
      uint64_t v20 = @"com.apple.parsecd.contextCacheUpdate";
      id v21 = [v19 defaultCenter];
      uint64_t v22 = type metadata accessor for NotificationBarrier();
      swift_allocObject(v22, 24LL, 7LL);
      uint64_t v86 = sub_100009E2C(v20, v21, (uint64_t)sub_10006780C, 0LL);
      swift_unknownObjectRelease();
      goto LABEL_11;
    }

    swift_unknownObjectRelease();
  }

  uint64_t v86 = 0LL;
LABEL_11:
  uint64_t v23 = a2 + OBJC_IVAR____TtC7parsecd16ClientConnection_assembly;
  if (swift_unknownObjectWeakLoadStrong(a2 + OBJC_IVAR____TtC7parsecd16ClientConnection_assembly))
  {
    id v24 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    swift_unknownObjectRelease();
    [v24 postNotificationName:@"com.apple.parsecd.performedSearch" object:0];
  }

  uint64_t v25 = *(void **)(a2 + OBJC_IVAR____TtC7parsecd16ClientConnection_connection);
  NSString v26 = String._bridgeToObjectiveC()();
  id v27 = [v25 valueForEntitlement:v26];

  if (v27)
  {
    _bridgeAnyObjectToAny(_:)(v27);
    swift_unknownObjectRelease();
  }

  else
  {
    __int128 v88 = 0u;
    __int128 v89 = 0u;
  }

  sub_10006AAFC((uint64_t)&v88, (uint64_t)&v90, (uint64_t *)&unk_1001D32C0);
  if (!v92)
  {
    sub_100019C1C((uint64_t)&v90, (uint64_t *)&unk_1001D32C0);
    goto LABEL_21;
  }

  uint64_t v28 = swift_dynamicCast(v87, &v90, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
  if ((v28 & 1) == 0)
  {
LABEL_21:
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v34 = static os_log_type_t.error.getter(v32, v33);
    if (os_log_type_enabled(v32, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  v34,  "Found no suitable value for application identifier entitlement",  v35,  2u);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    unint64_t v36 = sub_10006A16C();
    uint64_t v37 = swift_allocError(&_s5ErrorON, v36, 0LL, 0LL);
    *int v38 = 2;
    uint64_t v39 = (void *)_convertErrorToNSError(_:)(v37);
    int v40 = (void (**)(void, void, void))v85;
    goto LABEL_38;
  }

  unint64_t v29 = v87[1];
  uint64_t v81 = v87[0];
  NSString v30 = String._bridgeToObjectiveC()();
  id v31 = [v25 valueForEntitlement:v30];

  if (v31)
  {
    _bridgeAnyObjectToAny(_:)(v31);
    swift_unknownObjectRelease();
  }

  else
  {
    __int128 v88 = 0u;
    __int128 v89 = 0u;
  }

  sub_10006AAFC((uint64_t)&v88, (uint64_t)&v90, (uint64_t *)&unk_1001D32C0);
  if (!v92)
  {
    sub_100019C1C((uint64_t)&v90, (uint64_t *)&unk_1001D32C0);
    goto LABEL_33;
  }

  if ((swift_dynamicCast(v87, &v90, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL) & 1) == 0
    || (v87[0] & 1) == 0)
  {
LABEL_33:
    uint64_t v52 = swift_bridgeObjectRetain(v29);
    os_log_type_t v46 = (os_log_s *)Logger.logObject.getter(v52);
    os_log_type_t v48 = static os_log_type_t.error.getter(v46, v53);
    if (os_log_type_enabled(v46, v48))
    {
      os_log_type_t v49 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v50 = swift_slowAlloc(32LL, -1LL);
      uint64_t v90 = v50;
      *(_DWORD *)os_log_type_t v49 = 136315138;
      swift_bridgeObjectRetain(v29);
      *(void *)&__int128 v88 = sub_1000307E0(v81, v29, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, (char *)&v88 + 8, v49 + 4);
      swift_bridgeObjectRelease_n(v29, 3LL);
      uint64_t v51 = "QueryContext Request denied for unauthorized client %s: missing context entitlement";
      goto LABEL_35;
    }

LABEL_36:
    swift_bridgeObjectRelease_n(v29, 2LL);
    goto LABEL_37;
  }

  swift_bridgeObjectRetain(v29);
  uint64_t v41 = sub_100027630(v81, v29);
  char v43 = v42;
  swift_bridgeObjectRelease();
  if ((v43 & 1) != 0 || (uint64_t v44 = ClientType.rawValue.getter(v41), v44 == ClientType.rawValue.getter(0LL)))
  {
    uint64_t v45 = swift_bridgeObjectRetain(v29);
    os_log_type_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v48 = static os_log_type_t.error.getter(v46, v47);
    if (os_log_type_enabled(v46, v48))
    {
      os_log_type_t v49 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v50 = swift_slowAlloc(32LL, -1LL);
      uint64_t v90 = v50;
      *(_DWORD *)os_log_type_t v49 = 136315138;
      swift_bridgeObjectRetain(v29);
      *(void *)&__int128 v88 = sub_1000307E0(v81, v29, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, (char *)&v88 + 8, v49 + 4);
      swift_bridgeObjectRelease_n(v29, 3LL);
      uint64_t v51 = "Request for QueryContext denied for unrecognized client: %s";
LABEL_35:
      _os_log_impl((void *)&_mh_execute_header, v46, v48, v51, v49, 0xCu);
      swift_arrayDestroy(v50, 1LL);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v49, -1LL, -1LL);

LABEL_37:
      int v40 = (void (**)(void, void, void))v85;
      unint64_t v54 = sub_10006A16C();
      uint64_t v37 = swift_allocError(&_s5ErrorON, v54, 0LL, 0LL);
      *uint64_t v55 = 2;
      uint64_t v39 = (void *)_convertErrorToNSError(_:)(v37);
LABEL_38:
      ((void (**)(void, void, void *))v40)[2](v40, 0LL, v39);

      swift_errorRelease(v37);
      swift_release();
      goto LABEL_39;
    }

    goto LABEL_36;
  }

  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v23);
  if (Strong)
  {
    uint64_t v57 = Strong;
    uint64_t v80 = *(void *)(v23 + 8);
    if (v86)
    {
      swift_retain(v86);
      sub_100009EE4(100LL);
      swift_release();
    }

    uint64_t v58 = ClientType.rawValue.getter(v41);
    if (v58 == ClientType.rawValue.getter(8LL)) {
      uint64_t v59 = a1;
    }
    else {
      uint64_t v59 = v41;
    }
    sub_10004A274((uint64_t)v7);
    uint64_t v60 = (uint64_t)v83;
    sub_1000B5FCC(v59, v57, (uint64_t)v83);
    sub_10004D784((uint64_t)v7, type metadata accessor for PegasusContext);
    sub_100008FF4( &qword_1001D4488,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Search_PegasusQueryContext);
    uint64_t v61 = v84;
    uint64_t v71 = Message.serializedData(partial:)(0LL, v84, v62);
    unint64_t v73 = v72;
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v60, v61);
    uint64_t v74 = swift_bridgeObjectRetain(v29);
    uint64_t v75 = (os_log_s *)Logger.logObject.getter(v74);
    os_log_type_t v76 = static os_log_type_t.debug.getter(v75);
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v78 = swift_slowAlloc(32LL, -1LL);
      uint64_t v90 = v78;
      *(_DWORD *)uint64_t v77 = 136315138;
      swift_bridgeObjectRetain(v29);
      *(void *)&__int128 v88 = sub_1000307E0(v81, v29, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, (char *)&v88 + 8, v77 + 4);
      swift_bridgeObjectRelease_n(v29, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Sending QueryContext data to %s", v77, 0xCu);
      swift_arrayDestroy(v78, 1LL);
      swift_slowDealloc(v78, -1LL, -1LL);
      swift_slowDealloc(v77, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v29, 2LL);
    }

    int v40 = (void (**)(void, void, void))v85;
    sub_100014244(v71, v73);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    ((void (**)(void, Class, void))v40)[2](v40, isa, 0LL);

    swift_release();
    sub_100010A30(v71, v73);
    sub_100010A30(v71, v73);
    swift_unknownObjectRelease();
  }

  else
  {
    uint64_t v63 = swift_bridgeObjectRelease();
    uint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
    os_log_type_t v65 = ((uint64_t (*)(void))static os_log_type_t.debug.getter)();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Couldn't retain assembly", v66, 2u);
      swift_slowDealloc(v66, -1LL, -1LL);
    }

    unint64_t v67 = sub_10006A16C();
    uint64_t v68 = swift_allocError(&_s5ErrorON, v67, 0LL, 0LL);
    *uint64_t v69 = 1;
    unint64_t v70 = (void *)_convertErrorToNSError(_:)(v68);
    int v40 = (void (**)(void, void, void))v85;
    (*(void (**)(uint64_t, void, void *))(v85 + 16))(v85, 0LL, v70);

    swift_release();
    swift_errorRelease(v68);
  }

                v162 += v108;
                if (!--v160)
                {
                  sub_1000110E0();
                  uint64_t v173 = 0LL;
                  goto LABEL_47;
                }
              }
            }

            sub_100009B3C();
            uint64_t v173 = 0LL;
            id v151 = v301;
LABEL_39:
            uint64_t v176 = v313;
            goto LABEL_40;
          }
        }

        uint64_t v173 = 0LL;
        goto LABEL_39;
      }

      uint64_t v114 = sub_1000A1484(0LL, "queryId");
      uint64_t v97 = (uint64_t)v316;
      sub_1000A1354((uint64_t)v316, (uint64_t)v114, v316[2]);
      sub_1000A1360(qword_1001D2E88);
      sub_10001683C();

      uint64_t v112 = *(uint64_t (**)(uint64_t, uint64_t))(v99 + 8);
      uint64_t v113 = v313;
    }

    else
    {
      uint64_t v111 = [v292 queryId];
      uint64_t v97 = (uint64_t)v316;
      sub_1000A1354((uint64_t)v316, (uint64_t)v111, v316[2]);
      sub_1000A1360(qword_1001D2E88);
      sub_10001683C();
      uint64_t v112 = *(uint64_t (**)(uint64_t, uint64_t))(v99 + 8);
      uint64_t v113 = v98;
    }

    sub_1000A1A98(v113, v112);
    sub_1000A2030();
  }

  swift_release();
  uint64_t v115 = (const void *)v97;
LABEL_11:
  _Block_release(v115);
  sub_100009AA0();
}

  int v38 = swift_release();
  sub_100136124(v38, v39, v40, (uint64_t)_swiftEmptyArrayStorage);
  sub_100136C84();
  if (v42) {
    sub_1001364A0(v41);
  }
  char v43 = sub_100136734();
  sub_1000325E4();
  uint64_t v2 = v8 + v43;
  if (__OFADD__(v8, v43))
  {
    __break(1u);
LABEL_41:
    sub_100136124(v2, v3, v4, (uint64_t)_swiftEmptyArrayStorage);
    sub_100136C84();
    if (v42) {
      sub_1001364A0(v44);
    }
    sub_100136734();
    sub_1000325E4();
  }

  sub_100009AA0();
}

  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  uint64_t v41 = _swiftEmptyArrayStorage;
  if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0)
  {
LABEL_45:
    sub_100143FBC( 0,  v1[2] + 1LL,  1,  (uint64_t)v1,  &qword_1001D2440,  (void (*)(uint64_t, uint64_t, char *))sub_1000DABEC);
    uint64_t v41 = v46;
  }

  char v43 = v41[2];
  char v42 = v41[3];
  if (v43 >= v42 >> 1)
  {
    sub_100143FBC( v42 > 1,  v43 + 1,  1,  (uint64_t)v41,  &qword_1001D2440,  (void (*)(uint64_t, uint64_t, char *))sub_1000DABEC);
    uint64_t v41 = v47;
  }

  v41[2] = v43 + 1;
  *((_BYTE *)v41 + v43 + swift_unknownObjectWeakDestroy(v0 + 32) = 0;
  swift_bridgeObjectRelease();
  uint64_t v44 = v2[2];
  sub_1000110A8();
  sub_1000DB1B8((char *)v41 + 32, v44 + 1, v3);
  swift_bridgeObjectRelease();
  uint64_t result = 1LL;
  *(_DWORD *)(v4 + sub_10000BDD4(v0 + 56) = 1;
  return result;
}

  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  int v40 = _swiftEmptyArrayStorage;
  if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
  {
LABEL_46:
    sub_100031B20(0LL, v1[2] + 1LL, 1LL, (uint64_t)v1);
    int v40 = v45;
  }

  char v42 = v40[2];
  uint64_t v41 = v40[3];
  if (v42 >= v41 >> 1)
  {
    sub_100031B20(v41 > 1, v42 + 1, 1LL, (uint64_t)v40);
    int v40 = v46;
  }

  _OWORD v40[2] = v42 + 1;
  *((_BYTE *)v40 + v42 + swift_unknownObjectWeakDestroy(v0 + 32) = 0;
  swift_bridgeObjectRelease();
  char v43 = v2[2];
  sub_1000110A8();
  sub_1000DB1B8((char *)v40 + 32, v43 + 1, v3);
  swift_bridgeObjectRelease();
  uint64_t result = 1LL;
  *((_DWORD *)v4 + 14) = 1;
  return result;
}

LABEL_39:
  _Block_release(v40);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

BOOL sub_10006780C()
{
  uint64_t v0 = sub_10000941C((uint64_t *)&unk_1001D4490);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v17[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for ContextUpdate(0LL);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v17[-1] - v8;
  uint64_t v10 = Notification.userInfo.getter(v7);
  if (!v10)
  {
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    goto LABEL_6;
  }

  uint64_t v11 = v10;
  v17[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"context");
  v17[1] = v12;
  AnyHashable.init<A>(_:)(v17);
  sub_10000BEF0((uint64_t)v18, v11, &v19);
  swift_bridgeObjectRelease();
  sub_10000BD34((uint64_t)v18);
  if (!*((void *)&v20 + 1))
  {
LABEL_6:
    sub_100019C1C((uint64_t)&v19, (uint64_t *)&unk_1001D32C0);
    sub_100009654((uint64_t)v2, 1LL, 1LL, v3);
    goto LABEL_7;
  }

  int v13 = swift_dynamicCast(v2, &v19, (char *)&type metadata for Any + 8, v3, 6LL);
  sub_100009654((uint64_t)v2, v13 ^ 1u, 1LL, v3);
  if (sub_100010708((uint64_t)v2, 1LL, v3) == 1)
  {
LABEL_7:
    sub_100019C1C((uint64_t)v2, (uint64_t *)&unk_1001D4490);
    return 0LL;
  }

  sub_10006ABD8((uint64_t)v2, (uint64_t)v9, type metadata accessor for ContextUpdate);
  sub_10006ABD8((uint64_t)v9, (uint64_t)v6, type metadata accessor for ContextUpdate);
  BOOL v14 = swift_getEnumCaseMultiPayload(v6, v3) == 2;
  sub_10004D784((uint64_t)v6, type metadata accessor for ContextUpdate);
  return v14;
}

void sub_100067A70(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 >> 60 != 15)
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v7 = 0LL;
    goto LABEL_6;
  }

  Class isa = 0LL;
  if (!a3) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v7 = _convertErrorToNSError(_:)(a3);
LABEL_6:
  id v8 = (id)v7;
  (*(void (**)(uint64_t, Class))(a4 + 16))(a4, isa);
}

void sub_100067AF0(uint64_t a1, void (**a2)(void, void, void))
{
  uint64_t v4 = swift_allocObject(&unk_1001B45F8, 24LL, 7LL);
  *(void *)(v4 + sub_10000BDD4(v0 + 16) = a2;
  _Block_copy(a2);
  if (qword_1001D0518 != -1) {
    swift_once(&qword_1001D0518, sub_100034490);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = sub_1000093D0(v5, (uint64_t)qword_1001EDC18);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.debug.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Received request for Bag data", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  uint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtC7parsecd16ClientConnection_connection);
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v10 valueForEntitlement:v11];

  if (v12)
  {
    _bridgeAnyObjectToAny(_:)(v12);
    swift_unknownObjectRelease();
  }

  else
  {
    __int128 v39 = 0u;
    __int128 v40 = 0u;
  }

  sub_10006AAFC((uint64_t)&v39, (uint64_t)&v41, (uint64_t *)&unk_1001D32C0);
  if (v43)
  {
    int v13 = swift_dynamicCast(v38, &v41, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
    if (v13) {
      uint64_t v14 = v38[0];
    }
    else {
      uint64_t v14 = 0LL;
    }
    if (v13) {
      uint64_t v15 = v38[1];
    }
    else {
      uint64_t v15 = 0LL;
    }
  }

  else
  {
    sub_100019C1C((uint64_t)&v41, (uint64_t *)&unk_1001D32C0);
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
  }

  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [v10 valueForEntitlement:v16];

  if (v17)
  {
    _bridgeAnyObjectToAny(_:)(v17);
    swift_unknownObjectRelease();
  }

  else
  {
    __int128 v39 = 0u;
    __int128 v40 = 0u;
  }

  sub_10006AAFC((uint64_t)&v39, (uint64_t)&v41, (uint64_t *)&unk_1001D32C0);
  if (!v43)
  {
    sub_100019C1C((uint64_t)&v41, (uint64_t *)&unk_1001D32C0);
    goto LABEL_25;
  }

  if ((swift_dynamicCast(v38, &v41, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL) & 1) == 0
    || (v38[0] & 1) == 0)
  {
LABEL_25:
    uint64_t v20 = swift_bridgeObjectRetain(v15);
    id v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v23 = static os_log_type_t.error.getter(v21, v22);
    if (os_log_type_enabled(v21, v23))
    {
      id v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v25 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v39 = v25;
      *(_DWORD *)id v24 = 136315138;
      uint64_t v41 = v14;
      uint64_t v42 = v15;
      swift_bridgeObjectRetain(v15);
      sub_10000941C(&qword_1001D4480);
      uint64_t v26 = String.init<A>(describing:)(&v41);
      uint64_t v41 = sub_1000307E0(v26, v27, (uint64_t *)&v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v24 + 4);
      swift_bridgeObjectRelease_n(v15, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v21,  v23,  "Bag Data Request denied for unauthorized client %s: missing context entitlement",  v24,  0xCu);
      swift_arrayDestroy(v25, 1LL);
      swift_slowDealloc(v25, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v15, 2LL);
    }

    unint64_t v28 = sub_10006A16C();
    uint64_t v29 = swift_allocError(&_s5ErrorON, v28, 0LL, 0LL);
    uint64_t v31 = v29;
    char v32 = 2;
LABEL_29:
    *NSString v30 = v32;
    uint64_t v33 = (void *)_convertErrorToNSError(_:)(v29);
    ((void (**)(void, void, void *))a2)[2](a2, 0LL, v33);

    swift_errorRelease(v31);
    goto LABEL_30;
  }

  swift_bridgeObjectRelease();
  if (!swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC7parsecd16ClientConnection_assembly))
  {
    os_log_type_t v34 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v35 = static os_log_type_t.debug.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      unint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Couldn't retain assembly", v36, 2u);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    unint64_t v37 = sub_10006A16C();
    uint64_t v29 = swift_allocError(&_s5ErrorON, v37, 0LL, 0LL);
    uint64_t v31 = v29;
    char v32 = 1;
    goto LABEL_29;
  }

  sub_1000478B0();
  uint64_t v18 = swift_allocObject(&unk_1001B4620, 32LL, 7LL);
  *(void *)(v18 + sub_10000BDD4(v0 + 16) = sub_10006A3C4;
  *(void *)(v18 + sub_10000BDD4(v0 + 24) = v4;
  uint64_t v19 = swift_allocObject(&unk_1001B4648, 32LL, 7LL);
  *(void *)(v19 + sub_10000BDD4(v0 + 16) = sub_10006A3C4;
  *(void *)(v19 + sub_10000BDD4(v0 + 24) = v4;
  swift_retain_n(v4, 2LL);
  sub_1000C2844(0, (void (*)(id))sub_10006A3CC, v18, (uint64_t)sub_10006A3D4, v19);
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
LABEL_30:
  swift_release();
  _Block_release(a2);
}

uint64_t sub_100068098(void *a1, void (*a2)(uint64_t, unint64_t, uint64_t))
{
  if (v4 >> 60 == 15)
  {
    if (qword_1001D0518 != -1) {
      swift_once(&qword_1001D0518, sub_100034490);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    uint64_t v6 = sub_1000093D0(v5, (uint64_t)qword_1001EDC18);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.debug.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Couldn't construct bag data", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    unint64_t v10 = sub_10006A16C();
    uint64_t v11 = swift_allocError(&_s5ErrorON, v10, 0LL, 0LL);
    *id v12 = 3;
    a2(0LL, 0xF000000000000000LL, v11);
    return swift_errorRelease(v11);
  }

  else
  {
    uint64_t v14 = v3;
    unint64_t v15 = v4;
    if (qword_1001D0518 != -1) {
      swift_once(&qword_1001D0518, sub_100034490);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    uint64_t v17 = sub_1000093D0(v16, (uint64_t)qword_1001EDC18);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.debug.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Sending Bag data", v20, 2u);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    sub_100014244(v14, v15);
    a2(v14, v15, 0LL);
    sub_100010A1C(v14, v15);
    return sub_100010A1C(v14, v15);
  }

uint64_t sub_1000682C4(uint64_t a1, void (*a2)(void, unint64_t, uint64_t))
{
  if (qword_1001D0518 != -1) {
    swift_once(&qword_1001D0518, sub_100034490);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_1000093D0(v4, (uint64_t)qword_1001EDC18);
  swift_errorRetain(a1);
  uint64_t v5 = swift_errorRetain(a1);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v8 = static os_log_type_t.error.getter(v6, v7);
  if (os_log_type_enabled(v6, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v19 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_getErrorValue(a1);
    uint64_t v11 = Error.localizedDescription.getter(v18[1], v18[2]);
    uint64_t v17 = sub_1000307E0(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v9 + 4);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v6, v8, "failed to vend bag: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  unint64_t v13 = sub_10006A16C();
  uint64_t v14 = swift_allocError(&_s5ErrorON, v13, 0LL, 0LL);
  *unint64_t v15 = 1;
  a2(0LL, 0xF000000000000000LL, v14);
  return swift_errorRelease(v14);
}

void sub_1000684DC(uint64_t a1, void (**a2)(void, void, void))
{
  if (qword_1001D0518 != -1) {
    swift_once(&qword_1001D0518, sub_100034490);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = sub_1000093D0(v4, (uint64_t)qword_1001EDC18);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.debug.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Received request for Device Setup State", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  uint64_t v9 = *(void **)(a1 + OBJC_IVAR____TtC7parsecd16ClientConnection_connection);
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v9 valueForEntitlement:v10];

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)(v11);
    swift_unknownObjectRelease();
  }

  else
  {
    __int128 v43 = 0u;
    __int128 v44 = 0u;
  }

  sub_10006AAFC((uint64_t)&v43, (uint64_t)&v45, (uint64_t *)&unk_1001D32C0);
  if (v47)
  {
    int v12 = swift_dynamicCast(v42, &v45, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
    if (v12) {
      uint64_t v13 = v42[0];
    }
    else {
      uint64_t v13 = 0LL;
    }
    if (v12) {
      uint64_t v14 = v42[1];
    }
    else {
      uint64_t v14 = 0LL;
    }
  }

  else
  {
    sub_100019C1C((uint64_t)&v45, (uint64_t *)&unk_1001D32C0);
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
  }

  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v9 valueForEntitlement:v15];

  if (v16)
  {
    _bridgeAnyObjectToAny(_:)(v16);
    swift_unknownObjectRelease();
  }

  else
  {
    __int128 v43 = 0u;
    __int128 v44 = 0u;
  }

  sub_10006AAFC((uint64_t)&v43, (uint64_t)&v45, (uint64_t *)&unk_1001D32C0);
  if (!v47)
  {
    sub_100019C1C((uint64_t)&v45, (uint64_t *)&unk_1001D32C0);
    goto LABEL_30;
  }

  if ((swift_dynamicCast(v42, &v45, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL) & 1) == 0
    || (v42[0] & 1) == 0)
  {
LABEL_30:
    uint64_t v23 = swift_bridgeObjectRetain(v14);
    id v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v26 = static os_log_type_t.error.getter(v24, v25);
    if (os_log_type_enabled(v24, v26))
    {
      unint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v43 = v28;
      *(_DWORD *)unint64_t v27 = 136315138;
      uint64_t v45 = v13;
      uint64_t v46 = v14;
      swift_bridgeObjectRetain(v14);
      sub_10000941C(&qword_1001D4480);
      uint64_t v29 = String.init<A>(describing:)(&v45);
      uint64_t v45 = sub_1000307E0(v29, v30, (uint64_t *)&v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v27 + 4);
      swift_bridgeObjectRelease_n(v14, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v26,  "Request for device setup state denied for unauthorized client %s: missing context entitlement",  v27,  0xCu);
      swift_arrayDestroy(v28, 1LL);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v14, 2LL);
    }

    unint64_t v31 = sub_10006A16C();
    uint64_t v32 = swift_allocError(&_s5ErrorON, v31, 0LL, 0LL);
    uint64_t v34 = v32;
    char v35 = 2;
LABEL_34:
    *uint64_t v33 = v35;
    unint64_t v36 = (void *)_convertErrorToNSError(_:)(v32);
    ((void (**)(void, void, void *))a2)[2](a2, 0LL, v36);

    swift_errorRelease(v34);
    goto LABEL_35;
  }

  swift_bridgeObjectRelease();
  if (!swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC7parsecd16ClientConnection_assembly))
  {
    unint64_t v37 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v39 = static os_log_type_t.error.getter(v37, v38);
    if (os_log_type_enabled(v37, v39))
    {
      __int128 v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)__int128 v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v39, "Device setup state failed on assembly access", v40, 2u);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    unint64_t v41 = sub_10006A16C();
    uint64_t v32 = swift_allocError(&_s5ErrorON, v41, 0LL, 0LL);
    uint64_t v34 = v32;
    char v35 = 1;
    goto LABEL_34;
  }

  uint64_t v17 = sub_1000348EC();
  char v18 = v17;
  if ((v17 & 1) != 0) {
    uint64_t v19 = 2LL;
  }
  else {
    uint64_t v19 = 1LL;
  }
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v21 = static os_log_type_t.debug.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v22 = 67109120;
    LODWORD(v45) = v18 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, (char *)&v45 + 4, v22 + 4);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Sending Device Setup State: %{BOOL}d", v22, 8u);
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  a2[2](a2, v19, 0LL);
  swift_unknownObjectRelease();
LABEL_35:
  _Block_release(a2);
}

void sub_100068A9C(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  uint64_t v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4();
  _Block_release(v6);
  sub_10006B3DC(v7);
}

uint64_t sub_100068AEC(void *a1)
{
  uint64_t v3 = v2;
  if (swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC7parsecd16ClientConnection_assembly))
  {
    sub_100048BD8();
    swift_unknownObjectRelease();
    sub_100019BC4(&v37, (uint64_t)v38);
    id v5 = [a1 channelItem];
    sub_10006A374(v5, (SEL *)&selRef_channelIdentifier);
    if (v7)
    {
      uint64_t v8 = v6;
      uint64_t v9 = v7;
      sub_10006A374(v5, (SEL *)&selRef_pushTopic);
      if (v11)
      {
        uint64_t v12 = v10;
        uint64_t v13 = v11;
        sub_100019AFC(v38, v38[3]);
        sub_10003BB48(v8, v9, v12, v13);
        if (!v2)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v3 = (uint64_t)[objc_allocWithZone(PARSubscriptionStatus) init];
          [(id)v3 setIsSubscribed:1];

          sub_1000108B8(v38);
          return v3;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }

      swift_bridgeObjectRelease();
      if (qword_1001D0518 != -1) {
        swift_once(&qword_1001D0518, sub_100034490);
      }
      uint64_t v29 = type metadata accessor for Logger(0LL);
      uint64_t v30 = sub_1000093D0(v29, (uint64_t)qword_1001EDC18);
      id v24 = (void *)Logger.logObject.getter(v30);
      os_log_type_t v32 = static os_log_type_t.error.getter(v24, v31);
      uint64_t v3 = v32;
      if (!os_log_type_enabled((os_log_t)v24, v32))
      {
LABEL_20:

        unint64_t v33 = sub_10006A16C();
        uint64_t v34 = swift_allocError(&_s5ErrorON, v33, 0LL, 0LL);
        _BYTE *v35 = 3;
        swift_willThrow(v34);

LABEL_21:
        sub_1000108B8(v38);
        return v3;
      }

      unint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v27 = 0;
      uint64_t v28 = "Invalid pushTopic for subscribe command";
    }

    else
    {
      if (qword_1001D0518 != -1) {
        swift_once(&qword_1001D0518, sub_100034490);
      }
      uint64_t v22 = type metadata accessor for Logger(0LL);
      uint64_t v23 = sub_1000093D0(v22, (uint64_t)qword_1001EDC18);
      id v24 = (void *)Logger.logObject.getter(v23);
      os_log_type_t v26 = static os_log_type_t.error.getter(v24, v25);
      uint64_t v3 = v26;
      if (!os_log_type_enabled((os_log_t)v24, v26)) {
        goto LABEL_20;
      }
      unint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v27 = 0;
      uint64_t v28 = "Invalid ChannelId for subscribe command";
    }

    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v24, (os_log_type_t)v3, v28, v27, 2u);
    swift_slowDealloc(v27, -1LL, -1LL);
    goto LABEL_20;
  }

  if (qword_1001D0518 != -1) {
    swift_once(&qword_1001D0518, sub_100034490);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = sub_1000093D0(v14, (uint64_t)qword_1001EDC18);
  id v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v18 = static os_log_type_t.error.getter(v16, v17);
  if (os_log_type_enabled(v16, v18))
  {
    uint64_t v3 = swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  v18,  "Cannot create a valid cloud channel connection",  (uint8_t *)v3,  2u);
    swift_slowDealloc(v3, -1LL, -1LL);
  }

  unint64_t v19 = sub_10006A16C();
  uint64_t v20 = swift_allocError(&_s5ErrorON, v19, 0LL, 0LL);
  *os_log_type_t v21 = 1;
  swift_willThrow(v20);
  return v3;
}

uint64_t sub_100068EA4(uint64_t a1)
{
  *(void *)(v2 + sub_10000BDD4(v0 + 16) = a1;
  *(void *)(v2 + sub_10000BDD4(v0 + 24) = v1;
  return sub_10006B27C((uint64_t)sub_100068EB4);
}

uint64_t sub_100068EB4()
{
  if (qword_1001D0518 != -1) {
    swift_once(&qword_1001D0518, sub_100034490);
  }
  uint64_t v3 = sub_100010ED4();
  uint64_t v4 = (os_log_s *)sub_100010E78(v3, (uint64_t)qword_1001EDC18);
  os_log_type_t v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (_WORD *)sub_100009B20(2LL);
    sub_10006B5C8(v6);
    sub_10001447C((void *)&_mh_execute_header, v4, v5, "Subscribing to channel", v2);
    sub_100010C34((uint64_t)v2);
  }

  uint64_t v7 = *(void *)(v1 + 16);

  if (v7
    && (uint64_t v9 = *(void **)(v1 + 16),
        uint64_t v10 = objc_opt_self(&OBJC_CLASS___PARCloudSubscriptionChannel),
        (uint64_t v8 = swift_dynamicCastObjCClass(v9, v10)) != 0))
  {
    uint64_t v11 = (void *)v8;
    id v12 = v9;
    uint64_t v13 = sub_100068AEC(v11);

    return sub_10006B288(v13, *(uint64_t (**)(void))(v1 + 8));
  }

  else
  {
    Logger.logObject.getter(v8);
    os_log_type_t v15 = sub_100010EC4();
    if (os_log_type_enabled(v0, v15))
    {
      id v16 = (uint8_t *)sub_100009B20(2LL);
      *(_WORD *)id v16 = 0;
      sub_10001447C( (void *)&_mh_execute_header,  v0,  v15,  "Invalid PARSubscriptionChannel type for subscribe command",  v16);
      sub_100010C34((uint64_t)v16);
    }

    unint64_t v17 = sub_10006A16C();
    uint64_t v18 = sub_100010EA0((uint64_t)&_s5ErrorON, v17);
    sub_10006B36C(v18, v19);
    return sub_10006B29C(*(uint64_t (**)(void))(v1 + 8));
  }

uint64_t sub_100069050(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_1001D4474;
  id v7 = a1;
  a3;
  uint64_t v8 = (void *)swift_task_alloc(v6);
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_10006B250;
  return sub_100068EA4((uint64_t)a1);
}

uint64_t sub_1000690C8(uint64_t a1)
{
  *(void *)(v1 + sub_10000BDD4(v0 + 16) = a1;
  return sub_10006B27C((uint64_t)sub_1000690D8);
}

uint64_t sub_1000690D8()
{
  uint64_t v3 = *(void **)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = (os_log_s *)qword_1001D0518;
    id v5 = v3;
    if (v4 != (os_log_s *)-1LL) {
      swift_once(&qword_1001D0518, sub_100034490);
    }
    uint64_t v6 = sub_100010ED4();
    sub_100010E78(v6, (uint64_t)qword_1001EDC18);
    os_log_type_t v7 = sub_100014588();
    if (sub_100010DE4(v7))
    {
      uint64_t v8 = (_WORD *)sub_100009B20(2LL);
      sub_10006B5C8(v8);
      sub_10001447C((void *)&_mh_execute_header, v4, v0, "Unsubscribing from channel", v2);
      sub_100010C34((uint64_t)v2);
    }

    [objc_allocWithZone(PARSubscriptionStatus) init];
    sub_10006B894();
    return sub_10006B288((uint64_t)v4, *(uint64_t (**)(void))(v1 + 8));
  }

  else
  {
    unint64_t v10 = sub_10006A16C();
    uint64_t v11 = sub_100010EA0((uint64_t)&_s5ErrorON, v10);
    sub_10006B36C(v11, v12);
    return sub_10006B29C(*(uint64_t (**)(void))(v1 + 8));
  }

uint64_t sub_1000691E8(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_1001D445C;
  id v7 = a1;
  id v8 = a3;
  uint64_t v9 = (void *)swift_task_alloc(v6);
  v3[5] = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_10006925C;
  return sub_1000690C8((uint64_t)a1);
}

uint64_t sub_10006925C()
{
  uint64_t v3 = v0;
  sub_10006B89C();
  uint64_t v4 = v1[4];
  uint64_t v6 = (void *)v1[2];
  id v5 = (void *)v1[3];
  sub_10006B7FC(v1[5], v7);

  if (v0)
  {
    if (v4)
    {
      id v8 = (void (**)(void, void, void))v1[4];
      uint64_t v9 = (void *)_convertErrorToNSError(_:)(v3);
      sub_100014530();
      ((void (**)(void, void, void *))v8)[2](v8, 0LL, v9);
      _Block_release(v8);
    }

    else
    {
      sub_100014530();
    }
  }

  else if (v4)
  {
    unint64_t v10 = (const void *)v1[4];
    uint64_t v11 = sub_10006B688();
    v12(v11);

    _Block_release(v10);
  }

  else
  {
  }

  return sub_10006B364(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_100069320(uint64_t a1)
{
  *(void *)(v1 + sub_10000BDD4(v0 + 16) = a1;
  return sub_10006B27C((uint64_t)sub_100069330);
}

uint64_t sub_100069330()
{
  uint64_t v3 = *(void **)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = (os_log_s *)qword_1001D0518;
    id v5 = v3;
    if (v4 != (os_log_s *)-1LL) {
      swift_once(&qword_1001D0518, sub_100034490);
    }
    uint64_t v6 = sub_100010ED4();
    sub_100010E78(v6, (uint64_t)qword_1001EDC18);
    os_log_type_t v7 = sub_100014588();
    if (sub_100010DE4(v7))
    {
      id v8 = (_WORD *)sub_100009B20(2LL);
      sub_10006B5C8(v8);
      sub_10001447C((void *)&_mh_execute_header, v4, v0, "Getting channel subscription status", v2);
      sub_100010C34((uint64_t)v2);
    }

    [objc_allocWithZone(PARSubscriptionStatus) init];
    sub_10006B894();
    return sub_10006B288((uint64_t)v4, *(uint64_t (**)(void))(v1 + 8));
  }

  else
  {
    unint64_t v10 = sub_10006A16C();
    uint64_t v11 = sub_100010EA0((uint64_t)&_s5ErrorON, v10);
    sub_10006B36C(v11, v12);
    return sub_10006B29C(*(uint64_t (**)(void))(v1 + 8));
  }

uint64_t sub_100069440(void *a1, int a2, void *a3, void *aBlock, uint64_t a5)
{
  id v8 = _Block_copy(aBlock);
  uint64_t v9 = (void *)sub_100009ACC(a5, 40LL);
  v9[2] = a3;
  v9[3] = v8;
  v9[4] = a1;
  id v10 = a3;
  id v11 = a1;
  uint64_t v12 = sub_10006B688();
  return sub_100066178(v12, v13);
}

uint64_t sub_1000694A8(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_1001D443C;
  id v7 = a1;
  id v8 = a3;
  uint64_t v9 = (void *)swift_task_alloc(v6);
  v3[5] = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_10006B250;
  return sub_100069320((uint64_t)a1);
}

uint64_t sub_10006951C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1001D450C);
  *(void *)(v0 + sub_10000BDD4(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10006B20C;
  return sub_100069564();
}

uint64_t sub_100069564()
{
  v1[5] = v0;
  uint64_t v2 = type metadata accessor for Client(0LL);
  v1[6] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[7] = v3;
  v1[8] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t BagTask = type metadata accessor for ForceFetchBagTask(0LL);
  void v1[9] = BagTask;
  unint64_t v5 = (*(void *)(*(void *)(BagTask - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[10] = swift_task_alloc(v5);
  v1[11] = swift_task_alloc(v5);
  return swift_task_switch(sub_1000695F8, 0LL, 0LL);
}

uint64_t sub_1000695F8()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1001D55D4);
  *(void *)(v0 + 96) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100069654;
  return sub_100083D74();
}

uint64_t sub_100069654(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 96);
  *(void *)(v3 + 104) = a1;
  *(void *)(v3 + 112) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    unint64_t v5 = sub_100069A98;
  }
  else {
    unint64_t v5 = sub_1000696C0;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_1000696C0()
{
  uint64_t v1 = v0 + 32;
  id v2 = *(id *)(v0 + 104);
  sub_10006A374(v2, (SEL *)&selRef_version);
  if (v4) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v40 = v5;
  if (v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = 0xE000000000000000LL;
  }
  if (([v2 feedbackEnabled] & 1) == 0)
  {
    if (qword_1001D04F8 != -1) {
      swift_once(&qword_1001D04F8, sub_1000343F4);
    }
    uint64_t v7 = *(void *)(v0 + 40);
    uint64_t v8 = *(void *)(v0 + 88);
    uint64_t v9 = sub_100010ED4();
    sub_1000093D0(v9, (uint64_t)qword_1001EDBB8);
    sub_10006AD08(v7, v8, type metadata accessor for ForceFetchBagTask);
    id v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.default.getter(v11);
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = *(void *)(v0 + 88);
    if (v13)
    {
      uint64_t v15 = *(void *)(v0 + 64);
      uint64_t v37 = *(void *)(v0 + 56);
      uint64_t v38 = *(void *)(v0 + 48);
      id v16 = (uint8_t *)sub_100009B20(12LL);
      *(_DWORD *)id v16 = 134349056;
      uint64_t v17 = sub_100082F6C();
      Client.type.getter(v17);
      uint64_t v18 = v15;
      uint64_t v1 = v0 + 32;
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v18, v38);
      uint64_t v19 = sub_10006B664();
      sub_10004D784(v14, type metadata accessor for ForceFetchBagTask);
      *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 32) = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v16 + 4);
      sub_100014564( (void *)&_mh_execute_header,  v11,  v12,  "feedback collection disabled in bag for client %{public}lu",  v16);
      sub_100010C34((uint64_t)v16);
    }

    else
    {
      sub_10004D784(*(void *)(v0 + 88), type metadata accessor for ForceFetchBagTask);
    }
  }

  if (qword_1001D04E8 != -1) {
    swift_once(&qword_1001D04E8, sub_1000343B4);
  }
  uint64_t v20 = sub_100010ED4();
  sub_1000093D0(v20, (uint64_t)qword_1001EDB88);
  uint64_t v21 = sub_10006B688();
  sub_10006AD08(v21, v22, v23);
  uint64_t v24 = sub_100010E2C();
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.default.getter(v25);
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v28 = *(void *)(v0 + 80);
  if (v27)
  {
    uint64_t v39 = *(void *)(v0 + 56);
    uint64_t v41 = v1;
    uint64_t v29 = sub_100009B20(22LL);
    uint64_t v30 = sub_100009B20(32LL);
    uint64_t v42 = v30;
    *(_DWORD *)uint64_t v29 = 136315394;
    sub_100010E2C();
    *(void *)(v0 + sub_10000BDD4(v0 + 16) = sub_1000307E0(v40, v6, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v29 + 4);
    sub_100019FA4(v6);
    *(_WORD *)(v29 + 12) = 2050;
    uint64_t v31 = sub_100082F6C();
    Client.type.getter(v31);
    sub_10006B7D4(v39);
    uint64_t v32 = sub_10006B664();
    sub_10004D784(v28, type metadata accessor for ForceFetchBagTask);
    *(void *)(v0 + sub_10000BDD4(v0 + 24) = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v41, v29 + 14);
    _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "sending bag with version: %s to client: %{public}lu",  (uint8_t *)v29,  0x16u);
    sub_100030F9C(v30);
    sub_100010C34(v30);
    sub_100010C34(v29);
  }

  else
  {
    sub_10004D784(*(void *)(v0 + 80), type metadata accessor for ForceFetchBagTask);
    sub_100019F4C(v6);
  }

  unint64_t v33 = *(void **)(v0 + 104);
  sub_10006B838();
  uint64_t v35 = *(void *)(v34 + 8);
  (*(void (**)(void *, void))v34)(v33, 0LL);

  sub_10006B8DC();
  swift_task_dealloc(v35);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100069A98()
{
  uint64_t v1 = *(void *)(v0 + 112);
  sub_10006B838();
  unint64_t v4 = *(void (**)(void, uint64_t))v2;
  uint64_t v3 = *(void *)(v2 + 8);
  swift_errorRetain(v1);
  uint64_t v5 = sub_1000C5FB0(v1);
  sub_100014530();
  v4(0LL, v5);
  swift_errorRelease(v5);
  sub_100014530();
  sub_10006B8DC();
  swift_task_dealloc(v3);
  swift_task_dealloc(v1);
  return sub_10006B364(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100069B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  if (sub_100010708(a1, 1LL, v6) == 1)
  {
    sub_100019C1C(a1, (uint64_t *)&unk_1001D0BD0);
    uint64_t v7 = 7168LL;
  }

  else
  {
    unsigned __int8 v8 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v7 = v8 | 0x1C00LL;
  }

  uint64_t v9 = *(void *)(a3 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v9);
    uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
    uint64_t v14 = v13;
    swift_unknownObjectRelease();
  }

  else
  {
    uint64_t v12 = 0LL;
    uint64_t v14 = 0LL;
  }

  uint64_t v15 = swift_allocObject(&unk_1001B4850, 32LL, 7LL);
  *(void *)(v15 + sub_10000BDD4(v0 + 16) = a2;
  *(void *)(v15 + sub_10000BDD4(v0 + 24) = a3;
  if (v14 | v12)
  {
    v18[0] = 0LL;
    v18[1] = 0LL;
    id v16 = v18;
    _OWORD v18[2] = v12;
    void v18[3] = v14;
  }

  else
  {
    id v16 = 0LL;
  }

  return swift_task_create(v7, v16, (char *)&type metadata for () + 8, &unk_1001D4500, v15);
}

void sub_100069C58(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
    Class isa = 0LL;
  }

  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v4 = sub_100019F90();
    sub_100010A1C(v4, v5);
  }

  [v2 initWithData:isa];
  sub_10006B894();
  sub_1000110D4();
}

uint64_t sub_100069CB8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100069CDC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100069D08()
{
}

uint64_t sub_100069D10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100069D20(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100069D28(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10006B20C;
  return v6();
}

uint64_t sub_100069D7C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  unint64_t v5 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *unint64_t v5 = v4;
  v5[1] = sub_10006B20C;
  return v7();
}

uint64_t sub_100069DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  if (sub_100010708(a1, 1LL, v6) == 1)
  {
    sub_100019C1C(a1, (uint64_t *)&unk_1001D0BD0);
    uint64_t v7 = 7168LL;
  }

  else
  {
    unsigned __int8 v8 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v7 = v8 | 0x1C00LL;
  }

  uint64_t v9 = *(void *)(a3 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v9);
    uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
    uint64_t v14 = v13;
    swift_unknownObjectRelease();
  }

  else
  {
    uint64_t v12 = 0LL;
    uint64_t v14 = 0LL;
  }

  uint64_t v15 = swift_allocObject(&unk_1001B4580, 32LL, 7LL);
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v15 + sub_10000BDD4(v0 + 24) = a3;
  if (v14 | v12)
  {
    v18[0] = 0LL;
    v18[1] = 0LL;
    id v16 = v18;
    _OWORD v18[2] = v12;
    void v18[3] = v14;
  }

  else
  {
    id v16 = 0LL;
  }

  return swift_task_create(v7, v16, (char *)&type metadata for () + 8, &unk_1001D4430, v15);
}

uint64_t sub_100069F14(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100069F78;
  return v6(a1);
}

uint64_t sub_100069F78()
{
  return sub_10006B50C(*(uint64_t (**)(void))(v0 + 8));
}

void sub_100069FA0()
{
}

uint64_t sub_100069FAC()
{
  uint64_t v1 = (void *)sub_10006B58C();
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  uint64_t v2 = sub_10006B310(v1, (uint64_t)sub_10006B20C);
  return sub_10006B300(v2, v3, v4, v5);
}

uint64_t sub_100069FF4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1001D440C);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10006B20C;
  uint64_t v2 = sub_10006B718();
  return v3(v2);
}

uint64_t sub_10006A064()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10006A090()
{
  uint64_t v1 = swift_task_alloc(dword_1001D441C);
  uint64_t v2 = (void *)sub_10006B7E8(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_10006B20C;
  uint64_t v3 = sub_10006B868();
  return v4(v3);
}

uint64_t sub_10006A104()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10006A128()
{
  uint64_t v0 = sub_10006B58C();
  uint64_t v1 = (void *)sub_10006B7E8(v0);
  uint64_t v2 = sub_10006B4B4(v1);
  return sub_10006B300(v2, v3, v4, v5);
}

unint64_t sub_10006A16C()
{
  unint64_t result = qword_1001D4440;
  if (!qword_1001D4440)
  {
    unint64_t result = swift_getWitnessTable(&unk_100162618, &_s5ErrorON);
    atomic_store(result, (unint64_t *)&qword_1001D4440);
  }

  return result;
}

uint64_t sub_10006A1AC()
{
  uint64_t v1 = (void *)sub_10006B58C();
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  uint64_t v2 = sub_10006B310(v1, (uint64_t)sub_10006A1F0);
  return sub_10006B300(v2, v3, v4, v5);
}

uint64_t sub_10006A1F0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006A220()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10006A254()
{
  uint64_t v1 = (void *)sub_10006B58C();
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  uint64_t v2 = sub_10006B310(v1, (uint64_t)sub_10006B20C);
  return sub_10006B300(v2, v3, v4, v5);
}

void sub_10006A298(void *a1)
{
}

void sub_10006A2A4(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];

  if (v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  }

  sub_10006B66C();
  sub_1000110D4();
}

uint64_t sub_10006A300(void *a1)
{
  id v2 = [a1 results];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = sub_100009788(0LL, (unint64_t *)&unk_1001D44E0, &OBJC_CLASS____CPResultRankingFeedback_ptr);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

void sub_10006A374(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  }

  sub_10006B688();
  sub_1000110D4();
}

void sub_10006A3C4(uint64_t a1, unint64_t a2, uint64_t a3)
{
}

uint64_t sub_10006A3CC(void *a1)
{
  return sub_100068098(a1, *(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 16));
}

uint64_t sub_10006A3D4(uint64_t a1)
{
  return sub_1000682C4(a1, *(void (**)(void, unint64_t, uint64_t))(v1 + 16));
}

void sub_10006A3DC(uint64_t a1)
{
}

void sub_10006A3E4(uint64_t a1)
{
}

uint64_t sub_10006A3EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C((uint64_t *)&unk_1001D44A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void sub_10006A434(uint64_t a1)
{
}

uint64_t sub_10006A43C()
{
  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10006A478()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1001D44BC);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10006B20C;
  uint64_t v2 = sub_10006B718();
  return v3(v2);
}

void sub_10006A4EC(uint64_t a1, uint64_t a2)
{
}

void sub_10006A504(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10006A50C(uint64_t a1)
{
}

void sub_10006A514()
{
  uint64_t v1 = sub_10006B350();
  uint64_t v2 = sub_10006B474((uint64_t)v1);
  sub_1000902D4(v2, v3);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 32) = v4;
  sub_1000110D4();
}

void sub_10006A548()
{
  uint64_t v1 = sub_10006B350();
  uint64_t v2 = sub_10006B474((uint64_t)v1);
  sub_10009031C(v2, v3);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 32) = v4;
  sub_1000110D4();
}

void sub_10006A578(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

void sub_10006A5A4(void *a1, os_log_s *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v9 = sub_10000941C(&qword_1001D5ED0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v64 - v13;
  _Block_copy(a5);
  _Block_copy(a5);
  id v15 = [a1 queryCommand];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = objc_opt_self(&OBJC_CLASS___SFPerformEntityQueryCommand);
    uint64_t v18 = swift_dynamicCastObjCClass(v16, v17);
    if (v18)
    {
      uint64_t v19 = (void *)v18;
      uint64_t v20 = qword_1001D0518;
      id v21 = v16;
      if (v20 != -1) {
        swift_once(&qword_1001D0518, sub_100034490);
      }
      uint64_t v22 = type metadata accessor for Logger(0LL);
      sub_1000093D0(v22, (uint64_t)qword_1001EDC18);
      id v23 = v21;
      uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
      os_log_type_t v25 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v24, v25))
      {
        os_log_t v67 = a2;
        os_log_type_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v27 = swift_slowAlloc(32LL, -1LL);
        uint64_t v68 = a1;
        uint64_t v28 = v27;
        uint64_t v71 = v27;
        *(_DWORD *)os_log_type_t v26 = 136315138;
        sub_10006A374(v19, (SEL *)&selRef_entityIdentifier);
        uint64_t v69 = v29;
        uint64_t v70 = v30;
        sub_10000941C(&qword_1001D4480);
        uint64_t v31 = String.init<A>(describing:)(&v69);
        uint64_t v69 = sub_1000307E0(v31, v32, &v71);
        a2 = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v26 + 4);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "performing entity query command: %s", v26, 0xCu);
        swift_arrayDestroy(v28, 1LL);
        uint64_t v33 = v28;
        a1 = v68;
        swift_slowDealloc(v33, -1LL, -1LL);
        swift_slowDealloc(v26, -1LL, -1LL);
      }

      else
      {
      }

      _Block_copy(a5);
      sub_10009DC74( (uint64_t)a1,  a3,  (uint64_t)a2,  (uint64_t)a5,  v49,  v50,  v51,  v52,  v64,  v65,  (uint64_t)v66,  (uint64_t)v67,  (uint64_t)v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75);
    }

    else
    {
      uint64_t v68 = a1;
      uint64_t v34 = objc_opt_self(&OBJC_CLASS___SFShowSFCardCommand);
      uint64_t v35 = swift_dynamicCastObjCClass(v16, v34);
      if (v35)
      {
        unint64_t v36 = (void *)v35;
        uint64_t v37 = qword_1001D0518;
        id v38 = v16;
        if (v37 != -1) {
          swift_once(&qword_1001D0518, sub_100034490);
        }
        uint64_t v39 = type metadata accessor for Logger(0LL);
        sub_1000093D0(v39, (uint64_t)qword_1001EDC18);
        id v40 = v38;
        uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
        int v42 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v41, (os_log_type_t)v42))
        {
          HIDWORD(v65) = v42;
          __int128 v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v64 = swift_slowAlloc(32LL, -1LL);
          uint64_t v69 = v64;
          uint64_t v66 = v43;
          *(_DWORD *)__int128 v43 = 136315138;
          id v44 = [v36 card];
          os_log_t v67 = v41;
          if (v44)
          {
            uint64_t v45 = v44;
            id v46 = [v44 urlValue];

            if (v46)
            {
              static URL._unconditionallyBridgeFromObjectiveC(_:)(v46);

              uint64_t v47 = type metadata accessor for URL(0LL);
              uint64_t v48 = 0LL;
            }

            else
            {
              uint64_t v47 = type metadata accessor for URL(0LL);
              uint64_t v48 = 1LL;
            }

            uint64_t v53 = (uint64_t)v68;
            sub_100009654((uint64_t)v12, v48, 1LL, v47);
            sub_10006AAFC((uint64_t)v12, (uint64_t)v14, &qword_1001D5ED0);
          }

          else
          {
            uint64_t v54 = type metadata accessor for URL(0LL);
            sub_100009654((uint64_t)v14, 1LL, 1LL, v54);
            uint64_t v53 = (uint64_t)v68;
          }

          uint64_t v55 = v66;
          uint64_t v56 = String.init<A>(describing:)(v14);
          uint64_t v71 = sub_1000307E0(v56, v57, &v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v55 + 4);

          swift_bridgeObjectRelease();
          os_log_t v58 = v67;
          _os_log_impl((void *)&_mh_execute_header, v67, BYTE4(v65), "performing show card command: %s", v55, 0xCu);
          uint64_t v59 = v64;
          swift_arrayDestroy(v64, 1LL);
          swift_slowDealloc(v59, -1LL, -1LL);
          swift_slowDealloc(v55, -1LL, -1LL);
        }

        else
        {

          uint64_t v53 = (uint64_t)v68;
        }

        _Block_copy(a5);
        sub_10009DC74( v53,  a3,  (uint64_t)a2,  (uint64_t)a5,  v60,  v61,  v62,  v63,  v64,  v65,  (uint64_t)v66,  (uint64_t)v67,  (uint64_t)v68,  v69,  v70,  v71,  v72,  v73,  v74,  v75);
      }

      else
      {
      }
    }
  }

  _Block_release(a5);
  _Block_release(a5);
  _Block_release(a5);
}

void sub_10006AAFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_10000941C(a3);
  sub_10006B4F4(v3);
  sub_100009A90();
}

uint64_t sub_10006AB28@<X0>(void *a1@<X8>)
{
  return sub_100061078(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t type metadata accessor for ForceFetchBagTask(uint64_t a1)
{
  return sub_100018ABC(a1, qword_1001D4580, (uint64_t)&nominal type descriptor for ForceFetchBagTask);
}

uint64_t sub_10006AB44()
{
  uint64_t v0 = *(unsigned __int8 *)(*(void *)(type metadata accessor for ForceFetchBagTask(0LL) - 8) + 80LL) | 7LL;
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v1 = sub_10006B428();
  sub_10006B7D4(*(void *)(v1 - 8));
  swift_release();
  uint64_t v2 = sub_10006B66C();
  return swift_deallocObject(v2, v3, v0);
}

void sub_10006ABD8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_10004EC40(a1, a2, a3);
  sub_10006B4F4(v3);
  sub_100009A90();
}

uint64_t sub_10006ABF8()
{
  uint64_t v1 = swift_task_alloc(dword_1001D44F4);
  uint64_t v2 = (void *)sub_10006B7E8(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_10006B20C;
  sub_10006B868();
  return sub_10006951C();
}

unint64_t sub_10006AC6C(unint64_t result)
{
  if (result >= 2) {
    return swift_retain(result);
  }
  return result;
}

uint64_t sub_10006AC7C()
{
  uint64_t v0 = sub_10006B58C();
  uint64_t v1 = (void *)sub_10006B7E8(v0);
  uint64_t v2 = sub_10006B4B4(v1);
  return sub_10006B300(v2, v3, v4, v5);
}

uint64_t sub_10006ACC0()
{
  return sub_10006B50C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10006ACE4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10006AD08(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = sub_10004EC40(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(v3, v4, v5);
  sub_100009A90();
}

uint64_t *sub_10006AD3C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UserAgent(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_retain(v4);
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (uint64_t *)((char *)v7 + v13);
    id v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v4 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v4;
  }

  swift_retain(v4);
  return v7;
}

uint64_t sub_10006ADF8(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UserAgent(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  return swift_release(*(void *)((char *)a1 + *(int *)(a2 + 24) + 8));
}

uint64_t *sub_10006AE58(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UserAgent(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_retain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (uint64_t *)((char *)a1 + v12);
  uint64_t v14 = (uint64_t *)((char *)a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_retain(v15);
  return a1;
}

uint64_t *sub_10006AEF0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UserAgent(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (uint64_t *)((char *)a1 + v12);
  uint64_t v14 = (uint64_t *)((char *)a2 + v12);
  uint64_t v15 = v14[1];
  uint64_t v16 = v13[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_retain(v15);
  swift_release(v16);
  return a1;
}

void *sub_10006AF90(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UserAgent(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + swift_release(*(void *)(v0 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t *sub_10006B008(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UserAgent(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = *(uint64_t *)((char *)a1 + v11 + 8);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  swift_release(v12);
  return a1;
}

uint64_t sub_10006B094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006B0A0);
}

uint64_t sub_10006B0A0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_10006B428();
    return sub_100010708((uint64_t)a1 + *(int *)(a3 + 20), a2, v8);
  }

uint64_t sub_10006B110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006B11C);
}

void sub_10006B11C(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *a1 = (a2 - 1);
    sub_1000110D4();
  }

  else
  {
    uint64_t v7 = sub_10006B428();
    sub_100009654((uint64_t)a1 + *(int *)(a4 + 20), a2, a2, v7);
  }

uint64_t sub_10006B17C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for UserAgent(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

__n128 *sub_10006B254(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x6E6F73616572LL;
  result[2].n128_u64[1] = 0xE600000000000000LL;
  return result;
}

uint64_t sub_10006B270(uint64_t a1)
{
  return swift_dynamicCastObjCClass(v1, a1);
}

uint64_t sub_10006B27C(uint64_t a1)
{
  return swift_task_switch(a1, 0LL, 0LL);
}

uint64_t sub_10006B288(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10006B29C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10006B2B0()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - 8) = *v0;
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v1 - 8) = *v0;
  return swift_task_dealloc(v3);
}

uint64_t sub_10006B2D0(uint64_t a1)
{
  return swift_allocObject(a1, 24LL, 7LL);
}

uint64_t sub_10006B2DC()
{
  return v0();
}

uint64_t sub_10006B2E4@<X0>(uint64_t a1@<X8>)
{
  if (v1 >= 0) {
    return _CocoaArrayWrapper.endIndex.getter(a1);
  }
  else {
    return _CocoaArrayWrapper.endIndex.getter(v1);
  }
}

uint64_t sub_10006B2F0(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(v2, a2, 0LL, 0LL);
}

uint64_t sub_10006B300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_10006B310@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_10006B330()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v0);
}

unint64_t sub_10006B33C()
{
  return sub_100030F20(0LL, (v0 & 0xC000000000000001LL) == 0, v0);
}

void *sub_10006B350()
{
  return malloc(0x28uLL);
}

uint64_t sub_10006B364(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10006B36C(uint64_t a1, _BYTE *a2)
{
  *a2 = 3;
  return swift_willThrow();
}

id sub_10006B380()
{
  *(void *)(v0 + 40) = v1;
  return v1;
}

  ;
}

uint64_t sub_10006B3A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000765BC(a1, a2, a3, a4);
}

uint64_t sub_10006B3AC(uint64_t a1)
{
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_10006B3C0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(result + 48) = a2;
  *(void *)(result + sub_10000BDD4(v0 + 56) = (v2 - 32) | 0x8000000000000000LL;
  return result;
}

id sub_10006B3D0@<X0>(void *a1@<X8>)
{
  return a1;
}

void sub_10006B3DC(id a1)
{
}

uint64_t sub_10006B3EC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_10006B3FC()
{
  return type metadata accessor for UserAgent(0LL);
}

BOOL sub_10006B418(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10006B428()
{
  return type metadata accessor for UserAgent(0LL);
}

uint64_t sub_10006B430()
{
  return type metadata accessor for Lock();
}

id sub_10006B440()
{
  return *(id *)(v0 + 32);
}

void sub_10006B448(unint64_t a1@<X8>)
{
}

uint64_t sub_10006B460()
{
  return 0LL;
}

uint64_t sub_10006B474(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

  ;
}

  ;
}

uint64_t sub_10006B49C@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v4, v1, v2, v3, v5);
}

uint64_t sub_10006B4B4(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

  ;
}

uint64_t sub_10006B4EC()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_10006B4F4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32LL))(v1, v2, a1);
}

uint64_t sub_10006B50C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10006B518( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 35LL, 2LL, a7, 20LL, a9, a10, a11);
}

uint64_t sub_10006B530(uint64_t a1)
{
  return swift_dynamicCastObjCClass(v1, a1);
}

uint64_t sub_10006B53C()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10006B550()
{
  return v0;
}

uint64_t sub_10006B56C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_10006B578@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  return swift_dynamicCast((uint64_t *)va, va1, a2 + 8, a1, 6LL);
}

uint64_t sub_10006B58C()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_10006B594()
{
  return swift_bridgeObjectRetain_n(*(void *)(v0 - 112), 2LL);
}

void sub_10006B5A8(uint64_t a1, uint64_t a2)
{
}

id sub_10006B5B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend(a1, *(SEL *)(v6 + 3760), v5, a4, a5, 0);
}

_WORD *sub_10006B5C8(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

unint64_t sub_10006B5D4()
{
  return sub_100040904(v0);
}

uint64_t sub_10006B5DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_initStackObject(a1, &a9);
}

uint64_t sub_10006B5E4()
{
  return sub_100014244(*(v0 - 1), *v0);
}

BOOL sub_10006B5F4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

  ;
}

double sub_10006B634( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17)
{
  return sub_10000BEF0((uint64_t)&a12, v17, &a17);
}

uint64_t sub_10006B644()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_10006B64C()
{
  return sub_1000307E0(*(void *)(v1 - 144), v0, (uint64_t *)(v1 - 88));
}

id sub_10006B65C(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_10006B664()
{
  return ClientType.rawValue.getter(v0);
}

uint64_t sub_10006B66C()
{
  return v0;
}

uint64_t sub_10006B678()
{
  return PAREngagedResult.init(encoded:)(v0, v1);
}

uint64_t sub_10006B688()
{
  return v0;
}

uint64_t sub_10006B694()
{
  return Lock.init()();
}

  ;
}

void sub_10006B6A8()
{
  *(void *)(v0 + sub_10000BDD4(v0 + 56) = v1;
}

uint64_t sub_10006B6BC()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v1, v0);
}

void *sub_10006B6C8(void *a1, uint64_t a2)
{
  return sub_100019AFC(a1, a2);
}

uint64_t sub_10006B6DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3);
}

uint64_t sub_10006B6E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, v4 + 64, a3);
}

uint64_t sub_10006B6F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100019B20(v9, (uint64_t)&a9);
}

  ;
}

uint64_t sub_10006B708@<X0>(uint64_t a1@<X8>)
{
  return swift_unknownObjectRelease(*(void *)(v1 + a1));
}

uint64_t sub_10006B710@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(void *)(v1 + a1));
}

uint64_t sub_10006B718()
{
  return v0;
}

uint64_t sub_10006B72C(uint64_t a1)
{
  return sub_10005FF44(a1);
}

void sub_10006B734()
{
}

  ;
}

uint64_t sub_10006B750()
{
  return sub_100082F58();
}

uint64_t sub_10006B75C()
{
  return sub_100082F6C();
}

  ;
}

uint64_t sub_10006B774(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

void sub_10006B77C()
{
}

uint64_t sub_10006B788@<X0>(uint64_t a1@<X8>)
{
  return sub_10000649C(*(unsigned __int8 **)(a1 + 16), 0);
}

uint64_t sub_10006B794()
{
  return v0;
}

uint64_t sub_10006B7A8(uint64_t a1, ...)
{
  return AnyHashable.init<A>(_:)(va);
}

uint64_t sub_10006B7B4()
{
  return swift_unknownObjectRelease(v0);
}

void sub_10006B7BC()
{
}

  ;
}

uint64_t sub_10006B7D4@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_10006B7E0(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_10006B7E8(uint64_t result)
{
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = result;
  return result;
}

uint64_t sub_10006B7F4(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_10006B7FC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_10006B808(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t sub_10006B81C(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_10006B828()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

id sub_10006B830@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(a1 + 32);
}

  ;
}

void sub_10006B84C()
{
}

void sub_10006B854()
{
}

id sub_10006B860()
{
  return v0;
}

uint64_t sub_10006B868()
{
  return v0;
}

void sub_10006B87C()
{
}

uint64_t sub_10006B888()
{
  return ClientType.rawValue.getter(0LL);
}

void sub_10006B894()
{
}

void sub_10006B89C()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_10006B8B0()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_10006B8B8(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_10006B8C0()
{
  return v0(v2, v1);
}

uint64_t sub_10006B8CC()
{
  return type metadata accessor for DispatchTimeInterval(0LL);
}

uint64_t sub_10006B8D4()
{
  return type metadata accessor for DispatchTime(0LL);
}

uint64_t sub_10006B8DC()
{
  return swift_task_dealloc(*(void *)(v0 + 88));
}

char *sub_10006B8E8()
{
  if (qword_1001D05C8 != -1) {
    swift_once(&qword_1001D05C8, sub_10006B928);
  }
  return &byte_1001EDD88;
}

uint64_t sub_10006B928()
{
  uint64_t result = sub_10006B94C(5u);
  byte_1001EDD88 = result & 1;
  return result;
}

uint64_t sub_10006B94C(unsigned __int8 a1)
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v2 = MGCopyAnswer(v1, 0LL);

  if (!v2) {
    return 0LL;
  }
  uint64_t v5 = v2;
  uint64_t result = swift_dynamicCast(&v4, &v5, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Bool, 6LL);
  if ((_DWORD)result) {
    return v4;
  }
  return result;
}

uint64_t sub_10006B9D4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10006BA10 + 4 * a8[a1]))( 0x726556646C697542LL,  0xEC0000006E6F6973LL);
}

uint64_t sub_10006BA10()
{
  return 0x4E746375646F7250LL;
}

uint64_t sub_10006BA30()
{
  return 0x54746375646F7250LL;
}

uint64_t sub_10006BA54()
{
  return 0x56746375646F7250LL;
}

uint64_t sub_10006BA78()
{
  return 0x6F436E6F69676552LL;
}

uint64_t sub_10006BA94()
{
  return 0x6C616E7265746E49LL;
}

unint64_t sub_10006BAB8()
{
  return 0xD000000000000015LL;
}

uint64_t sub_10006BAD4()
{
  return 0x48746375646F7250LL;
}

ValueMetadata *type metadata accessor for OSVariant()
{
  return &type metadata for OSVariant;
}

uint64_t sub_10006BB04()
{
  return byte_1001EDD88;
}

void *sub_10006BB20(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Locker();
  uint64_t v6 = swift_allocObject(v5, 24LL, 7LL);
  uint64_t v7 = (_DWORD *)sub_100009B20(4LL);
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  _DWORD *v7 = 0;
  void v2[2] = v6;
  uint64_t v8 = type metadata accessor for TopicCacheInMemoryImpl();
  uint64_t v9 = swift_allocObject(v8, 32LL, 7LL);
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = 20LL;
  unint64_t v10 = sub_10006D170();
  uint64_t v11 = type metadata accessor for TopicCacheEntry(0LL);
  unint64_t v12 = sub_10006D1AC();
  *(void *)(v9 + sub_10000BDD4(v0 + 24) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v10, v11, v12);
  _BYTE v2[8] = v8;
  void v2[9] = &off_1001B91D8;
  v2[4] = a2;
  void v2[5] = v9;
  v2[10] = 0LL;
  v2[3] = a1;
  if (a1)
  {
    uint64_t v13 = qword_1001D05E0;
    swift_retain(a2);
    id v14 = a1;
    swift_retain(v2);
    if (v13 != -1) {
      swift_once(&qword_1001D05E0, sub_10007B15C);
    }
    [v14 addObserver:v2 selector:"clearCache" name:qword_1001EDDA8 object:0];

    sub_10001683C();
    swift_release();
  }

  return v2;
}

void sub_10006BC7C()
{
  NSString v1 = *(os_unfair_lock_s **)(v0[2] + 16LL);
  os_unfair_lock_lock(v1);
  sub_10006BCB4(v0);
  os_unfair_lock_unlock(v1);
}

void sub_10006BCB4(void *a1)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v47 = *(void *)(v2 - 8);
  uint64_t v48 = v2;
  __chkstk_darwin(v2);
  uint64_t v49 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_10000941C(&qword_1001D4680);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v45 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v43 - v7;
  uint64_t v54 = type metadata accessor for TopicCacheEntry(0LL);
  uint64_t v9 = __chkstk_darwin(v54);
  uint64_t v11 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  id v14 = (char *)&v43 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v43 - v15;
  uint64_t v17 = a1 + 5;
  sub_100019AFC(a1 + 5, a1[8]);
  unint64_t v18 = (unint64_t)sub_1000DF3B8();
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = v18 & 0xFFFFFFFFFFFFFF8LL;
    if (v18 >> 62) {
      goto LABEL_19;
    }
    uint64_t v21 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v18);
    for (; v21; uint64_t v21 = _CocoaArrayWrapper.endIndex.getter(v32))
    {
      uint64_t v44 = v11;
      uint64_t v52 = v21;
      unint64_t v53 = v19 & 0xC000000000000001LL;
      uint64_t v11 = 4LL;
      uint64_t v50 = v14;
      uint64_t v51 = v16;
      id v46 = v8;
      while (1)
      {
        id v22 = v53
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v19)
            : *(id *)(v19 + 8 * v11);
        id v23 = v22;
        uint64_t v24 = v11 - 3;
        if (__OFADD__(v11 - 4, 1LL)) {
          break;
        }
        sub_100019AFC(v17, a1[8]);
        sub_1000DF5AC(v23, (uint64_t)v8);
        if (sub_100010708((uint64_t)v8, 1LL, v54) == 1)
        {

          swift_bridgeObjectRelease();
          sub_10006CEFC((uint64_t)v8);
LABEL_17:
          uint64_t v11 = v44;
          uint64_t v21 = v52;
          goto LABEL_24;
        }

        sub_10006D028((uint64_t)v8, (uint64_t)v16);
        sub_100019AFC(v17, a1[8]);
        BOOL v25 = sub_1000DF574();
        uint64_t v26 = sub_10006D0D4((uint64_t)v16, (uint64_t)v14);
        if (v25)
        {
          sub_10006D098((uint64_t)v14);
        }

        else
        {
          uint64_t v27 = a1;
          uint64_t v28 = v49;
          Date.init()(v26);
          sub_10006D118();
          uint64_t v29 = v48;
          char v30 = dispatch thunk of static Comparable.< infix(_:_:)(v28, v14);
          uint64_t v31 = v28;
          a1 = v27;
          uint64_t v8 = v46;
          (*(void (**)(char *, uint64_t))(v47 + 8))(v31, v29);
          sub_10006D098((uint64_t)v14);
          if ((v30 & 1) != 0)
          {

            sub_10006D098((uint64_t)v51);
            swift_bridgeObjectRelease();
            goto LABEL_17;
          }
        }

        sub_100019AFC(v17, a1[8]);
        sub_1000DF718(v23);

        uint64_t v16 = v51;
        sub_10006D098((uint64_t)v51);
        ++v11;
        uint64_t v21 = v52;
        id v14 = v50;
        if (v24 == v52)
        {
          swift_bridgeObjectRelease();
          uint64_t v11 = v44;
          goto LABEL_24;
        }
      }

      __break(1u);
LABEL_19:
      if (v19 >= 0) {
        uint64_t v32 = v20;
      }
      else {
        uint64_t v32 = v19;
      }
      swift_bridgeObjectRetain(v19);
    }

    swift_bridgeObjectRelease();
LABEL_24:
    uint64_t v33 = (void *)a1[10];
    uint64_t v34 = (uint64_t)v45;
    if (v33) {
      [v33 invalidate];
    }
    if (v21)
    {
      sub_100030F20(0LL, (v19 & 0xC000000000000001LL) == 0, v19);
      if ((v19 & 0xC000000000000001LL) != 0) {
        id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v19);
      }
      else {
        id v35 = *(id *)(v19 + 32);
      }
      unint64_t v36 = v35;
      swift_bridgeObjectRelease();
      sub_100019AFC(v17, a1[8]);
      sub_1000DF5AC(v36, v34);
      if (sub_100010708(v34, 1LL, v54) == 1)
      {

        sub_10006CEFC(v34);
      }

      else
      {
        sub_10006D028(v34, v11);
        uint64_t v37 = (uint64_t)v49;
        (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v49, v11, v48);
        uint64_t v38 = v11;
        uint64_t v39 = swift_allocObject(&unk_1001B48F8, 24LL, 7LL);
        swift_weakInit(v39 + 16, a1);
        id v40 = objc_allocWithZone(&OBJC_CLASS___NSTimer);
        swift_retain(v39);
        id v41 = sub_10006CF3C(v37, 0, (uint64_t)sub_10006D090, v39, 0.0);

        sub_10006D098(v38);
        swift_release();
        int v42 = (void *)a1[10];
        a1[10] = v41;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
    }
  }

uint64_t sub_10006C148(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v2);
  if (result)
  {
    sub_10006BC7C();
    return swift_release();
  }

  return result;
}

void sub_10006C19C(void *a1, uint64_t a2)
{
  uint64_t v5 = *(os_unfair_lock_s **)(*(void *)(v2 + 16) + 16LL);
  os_unfair_lock_lock(v5);
  sub_10006C1EC(a2, v2, a1);
  os_unfair_lock_unlock(v5);
  sub_10006BC7C();
}

uint64_t sub_10006C1EC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for TopicCacheEntry(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = swift_bridgeObjectRetain(a1);
  sub_1000B4EEC(v9, (uint64_t)v8);
  sub_100019AFC((void *)(a2 + 40), *(void *)(a2 + 64));
  sub_1000DF678(a3, (uint64_t)v8);
  if (qword_1001D04E0 != -1) {
    swift_once(&qword_1001D04E0, sub_10003438C);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_1000093D0(v10, (uint64_t)qword_1001EDB70);
  id v11 = a3;
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v17 = static os_log_type_t.info.getter(v12, v13, v14, v15, v16);
  if (os_log_type_enabled(v12, v17))
  {
    unint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    v27[0] = v19;
    *(_DWORD *)unint64_t v18 = 136642819;
    BOOL v25 = v18 + 4;
    id v20 = [v11 description];
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    unint64_t v23 = v22;

    uint64_t v26 = sub_1000307E0(v21, v23, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v25);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v17, "Adding result for topic: %{sensitive}s", v18, 0xCu);
    swift_arrayDestroy(v19, 1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {
  }

  return sub_10006D098((uint64_t)v8);
}

void sub_10006C668(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100009AEC();
  uint64_t v10 = v9 - v8;
  sub_10000941C(&qword_1001D4680);
  sub_100009B94();
  __chkstk_darwin(v11);
  sub_100009AEC();
  uint64_t v70 = (void *)(v13 - v12);
  uint64_t v78 = type metadata accessor for TopicCacheEntry(0LL);
  sub_100009B94();
  __chkstk_darwin(v14);
  sub_100009AEC();
  uint64_t v17 = v16 - v15;
  type metadata accessor for Client(0LL);
  sub_100009B94();
  __chkstk_darwin(v18);
  sub_100009AEC();
  uint64_t v21 = v20 - v19;
  unint64_t v22 = (void *)a1[4];
  uint64_t v23 = swift_retain(v22);
  static Client.parsecd.getter(v23);
  uint64_t v24 = type metadata accessor for ResourceAccessSpan(0LL);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  uint64_t v25 = sub_100041728(v22, 20, v21, 0LL, 1);
  uint64_t v80 = _swiftEmptyArrayStorage;
  if (!((unint64_t)a2 >> 62))
  {
    uint64_t v26 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a2);
    if (v26) {
      goto LABEL_3;
    }
LABEL_34:
    sub_10001460C();
    uint64_t v64 = _swiftEmptyArrayStorage;
LABEL_35:
    *(_BYTE *)(v25 + qword_1001D2E88) = 1;
    sub_100042D10();
    sub_10001683C();
    goto LABEL_36;
  }

void sub_10006CDC4()
{
  NSString v1 = *(os_unfair_lock_s **)(v0[2] + 16LL);
  os_unfair_lock_lock(v1);
  sub_100019AFC(v0 + 5, v0[8]);
  sub_1000DF7A8();
  uint64_t v2 = (void *)v0[10];
  if (v2)
  {
    [v2 invalidate];
    uint64_t v3 = (void *)v0[10];
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  v0[10] = 0LL;

  os_unfair_lock_unlock(v1);
}

uint64_t sub_10006CE64()
{
  NSString v1 = *(void **)(v0 + 24);
  if (v1) {
    [v1 removeObserver:v0];
  }
  swift_release();

  swift_release();
  sub_1000108B8((void *)(v0 + 40));

  return v0;
}

uint64_t sub_10006CEBC()
{
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t type metadata accessor for TopicCacheController()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd20TopicCacheController);
}

uint64_t sub_10006CEFC(uint64_t a1)
{
  uint64_t v2 = sub_10000941C(&qword_1001D4680);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

id sub_10006CF3C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v6 = v5;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  v17[4] = a3;
  void v17[5] = a4;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256LL;
  void v17[2] = sub_1000197E4;
  v17[3] = &unk_1001B4910;
  uint64_t v13 = _Block_copy(v17);
  id v14 = [v6 initWithFireDate:isa interval:a2 & 1 repeats:v13 block:a5];
  _Block_release(v13);

  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(a1, v15);
  swift_release();
  return v14;
}

uint64_t sub_10006D028(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TopicCacheEntry(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006D06C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10006D090(uint64_t a1)
{
  return sub_10006C148(a1, v1);
}

uint64_t sub_10006D098(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TopicCacheEntry(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10006D0D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TopicCacheEntry(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10006D118()
{
  unint64_t result = qword_1001D5EE0;
  if (!qword_1001D5EE0)
  {
    uint64_t v1 = type metadata accessor for Date(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_1001D5EE0);
  }

  return result;
}

uint64_t sub_10006D158(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10006D168(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_10006D170()
{
  unint64_t result = qword_1001D10B8;
  if (!qword_1001D10B8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___SFTopic);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001D10B8);
  }

  return result;
}

unint64_t sub_10006D1AC()
{
  unint64_t result = qword_1001D4688;
  if (!qword_1001D4688)
  {
    unint64_t v1 = sub_10006D170();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1001D4688);
  }

  return result;
}