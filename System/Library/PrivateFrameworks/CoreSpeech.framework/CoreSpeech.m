LABEL_12:
}
}

      v14 = (void *)objc_claimAutoreleasedReturnValue([v10 inputFeats]);
      if (!v14)
      {
        v29 = (os_log_s *)CSLogCategorySDSD;
        if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v37 = 136315138;
          *(void *)&v37[4] = "-[CSAttSiriUresNode attSiriNode:didUpdateWithSpeakerInfo:forReqId:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "%s Input origin not set, Abort !",  v37,  0xCu);
        }

        goto LABEL_30;
      }

      v15 = kSSRSpeakerRecognitionKnownUserScoresKey;
      v16 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 48) objectForKeyedSubscript:kSSRSpeakerRecognitionKnownUserScoresKey]);
      v17 = (void *)objc_claimAutoreleasedReturnValue([v16 allValues]);
      v18 = (void *)objc_claimAutoreleasedReturnValue([v17 firstObject]);
      [v18 floatValue];
      v20 = v19;

      v21 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 48) objectForKeyedSubscript:kSSRSpeakerRecognitionAudioProcessedDurationKey]);
      [v21 doubleValue];
      objc_msgSend(v10, "setSpkrIdAudioProcessedDuration:");

      v22 = (void *)objc_claimAutoreleasedReturnValue([v16 allValues]);
      v23 = [v22 count];

      if (!v23)
      {
        v30 = (void *)CSLogCategorySDSD;
        if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
        {
          v31 = *(void **)(a1 + 48);
          v32 = v30;
          v33 = (void *)objc_claimAutoreleasedReturnValue([v31 objectForKeyedSubscript:v15]);
          *(_DWORD *)v37 = 136315394;
          *(void *)&v37[4] = "-[CSAttSiriUresNode attSiriNode:didUpdateWithSpeakerInfo:forReqId:]_block_invoke";
          *(_WORD *)&v37[12] = 2114;
          *(void *)&v37[14] = v33;
          _os_log_error_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "%s ERR: Failed to retrieve Speaker score, letting trigger through - %{public}@",  v37,  0x16u);
        }

        goto LABEL_29;
      }

      v24 = (os_log_s *)CSLogCategorySDSD;
      v25 = os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT);
      if (v20 >= 0.56)
      {
        if (v25)
        {
          *(_DWORD *)v37 = 136315650;
          *(void *)&v37[4] = "-[CSAttSiriUresNode attSiriNode:didUpdateWithSpeakerInfo:forReqId:]_block_invoke";
          *(_WORD *)&v37[12] = 2050;
          *(double *)&v37[14] = v20;
          *(_WORD *)&v37[22] = 2050;
          v38 = 0x3FE1EB8520000000LL;
          v26 = "%s SPKR Accept: Score %{public}.3f Threshold %{public}f \n";
          goto LABEL_25;
        }
      }

      else if (v25)
      {
        *(_DWORD *)v37 = 136315650;
        *(void *)&v37[4] = "-[CSAttSiriUresNode attSiriNode:didUpdateWithSpeakerInfo:forReqId:]_block_invoke";
        *(_WORD *)&v37[12] = 2050;
        *(double *)&v37[14] = v20;
        *(_WORD *)&v37[22] = 2050;
        v38 = 0x3FE1EB8520000000LL;
        v26 = "%s SPKR Reject: Score %{public}.3f Threshold %{public}f \n";
LABEL_25:
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v26, v37, 0x20u);
      }

      v34 = (os_log_s *)CSLogCategorySDSD;
      if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v37 = 136315394;
        *(void *)&v37[4] = "-[CSAttSiriUresNode attSiriNode:didUpdateWithSpeakerInfo:forReqId:]_block_invoke";
        *(_WORD *)&v37[12] = 2048;
        *(double *)&v37[14] = v20;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%s AttSignal: ssrScore: %.3f", v37, 0x16u);
      }

      *(float *)&v35 = v20;
      v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithFloat:]( &OBJC_CLASS___NSNumber,  "numberWithFloat:",  v35,  *(_OWORD *)v37,  *(void *)&v37[16],  v38));
      [v14 setSpeakerIDScore:v36];

LABEL_29:
LABEL_30:

      return;
    }
  }

  v27 = (os_log_s *)CSLogCategorySDSD;
  if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
  {
    v28 = *(void *)(a1 + 40);
    *(_DWORD *)v37 = 136315394;
    *(void *)&v37[4] = "-[CSAttSiriUresNode attSiriNode:didUpdateWithSpeakerInfo:forReqId:]_block_invoke";
    *(_WORD *)&v37[12] = 2112;
    *(void *)&v37[14] = v28;
    _os_log_error_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "%s ReqId: %@ not found, not updating SpkrId",  v37,  0x16u);
  }
}
}

void sub_100004B88(id a1, NSError *a2)
{
  v2 = a2;
  v3 = (os_log_s *)qword_10027FBA0;
  if (os_log_type_enabled((os_log_t)qword_10027FBA0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    v6 = @"com.apple.corespeech.speechmodeltraining.xpc";
    __int16 v7 = 2112;
    v8 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Received an error while accessing %@ service: %@",  buf,  0x16u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSError description](v2, "description"));
  NSLog(@"Received Error %@", v4);
}

void sub_100004C64(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4 = (os_log_s *)qword_10027FBA0;
  if (os_log_type_enabled((os_log_t)qword_10027FBA0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    v8 = @"com.apple.corespeech.speechmodeltraining.xpc";
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Received an error while accessing %@ service: %@",  buf,  0x16u);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue([v3 description]);
  NSLog(@"Received Error %@", v5);

  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0LL, v3);
  }
}

void sub_100004D64(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4 = (os_log_s *)qword_10027FBA0;
  if (os_log_type_enabled((os_log_t)qword_10027FBA0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    v8 = @"com.apple.corespeech.speechmodeltraining.xpc";
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Received an error while accessing %@ service: %@",  buf,  0x16u);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue([v3 description]);
  NSLog(@"Received Error %@", v5);

  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0LL, v3);
  }
}

void sub_100004E64(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4 = (os_log_s *)qword_10027FBA0;
  if (os_log_type_enabled((os_log_t)qword_10027FBA0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    v8 = @"com.apple.corespeech.speechmodeltraining.xpc";
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Received an error while accessing %@ service: %@",  buf,  0x16u);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue([v3 description]);
  NSLog(@"Received Error %@", v5);

  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0LL, v3);
  }
}

uint64_t sub_100004F64(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100004F78(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4 = (os_log_s *)qword_10027FBA0;
  if (os_log_type_enabled((os_log_t)qword_10027FBA0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    uint64_t v6 = @"com.apple.corespeech.speechmodeltraining.xpc";
    __int16 v7 = 2112;
    id v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Received an error while accessing %@ service: %@",  buf,  0x16u);
  }

  NSLog(@"Received Error %@", v3);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100005060(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4 = (os_log_s *)qword_10027FBA0;
  if (os_log_type_enabled((os_log_t)qword_10027FBA0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    id v8 = @"com.apple.corespeech.speechmodeltraining.xpc";
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Received an error while accessing %@ service: %@",  buf,  0x16u);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue([v3 description]);
  NSLog(@"Received Error %@", v5);

  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v3);
  }
}

uint64_t sub_10000515C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100005170(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4 = (os_log_s *)qword_10027FBA0;
  if (os_log_type_enabled((os_log_t)qword_10027FBA0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    uint64_t v6 = @"com.apple.corespeech.speechmodeltraining.xpc";
    __int16 v7 = 2112;
    id v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Received an error while accessing %@ service: %@",  buf,  0x16u);
  }

  NSLog(@"Received Error %@", v3);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100005258(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100005264(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100005278(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4 = (os_log_s *)qword_10027FBA0;
  if (os_log_type_enabled((os_log_t)qword_10027FBA0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    uint64_t v6 = @"com.apple.corespeech.speechmodeltraining.xpc";
    __int16 v7 = 2112;
    id v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Received an error while accessing %@ service: %@",  buf,  0x16u);
  }

  NSLog(@"Received Error %@", v3);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100005360(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10000536C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100005380(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100005394(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000053A4(id a1)
{
  v1 = (os_log_s *)qword_10027FBA0;
  if (os_log_type_enabled((os_log_t)qword_10027FBA0, OS_LOG_TYPE_INFO))
  {
    int v2 = 138412290;
    id v3 = @"com.apple.corespeech.speechmodeltraining.xpc";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "%@ Invalidated", (uint8_t *)&v2, 0xCu);
  }
}

void sub_100005444(id a1)
{
  v1 = (os_log_s *)qword_10027FBA0;
  if (os_log_type_enabled((os_log_t)qword_10027FBA0, OS_LOG_TYPE_INFO))
  {
    int v2 = 138412290;
    id v3 = @"com.apple.corespeech.speechmodeltraining.xpc";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "%@ Interrupted", (uint8_t *)&v2, 0xCu);
  }

id sub_1000059A4(uint64_t a1)
{
  v8[0] = @"didMatch";
  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 44)));
  uint64_t v3 = *(void *)(a1 + 32);
  v9[0] = v2;
  v9[1] = v3;
  v8[1] = @"adName";
  v8[2] = @"timeToMatch";
  LODWORD(v4) = *(_DWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v4));
  v9[2] = v5;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v9,  v8,  3LL));

  return v6;
}

void *sub_100005A80(void *result)
{
  v1 = (_BYTE *)result[4];
  if (!v1[8])
  {
    int v2 = result;
    uint64_t v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = v2[5];
      uint64_t v5 = v2[6];
      uint64_t v6 = v2[7];
      int v7 = *((unsigned __int8 *)v2 + 68);
      int v8 = 136316162;
      __int16 v9 = "-[CSAdBlockerLogger emitAdblockerLoggingWithDismissalType:withAdName:withAssetVersion:fromEndpoint:withReques"
           "tMHUUID:]_block_invoke";
      __int16 v10 = 2112;
      uint64_t v11 = v4;
      __int16 v12 = 2112;
      uint64_t v13 = v5;
      __int16 v14 = 2112;
      uint64_t v15 = v6;
      __int16 v16 = 1024;
      int v17 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Adblocker logging with reqeust mhUUID: %@ adName: %@ assetVersion: %@ fromEndpoint: %d",  (uint8_t *)&v8,  0x30u);
      v1 = (_BYTE *)v2[4];
    }

    [v1 _logStartAdBlockerEventWithRequestMHUUID:v2[5] withAssetVersion:v2[7]];
    uint64_t result = [(id)v2[4] _logStopAdBlockerEventWithDissmissalType:*((unsigned int *)v2 + 16) withAdName:v2[6] withRequestMHUUID:v2[5] fromEndpoint:*((unsigned __int8 *)v2 + 68)];
    *(_BYTE *)(v2[4] + 8LL) = 1;
  }

  return result;
}

BOOL sub_100006094(id a1)
{
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSHomePodSettingsMonitor sharedInstance](&OBJC_CLASS___CSHomePodSettingsMonitor, "sharedInstance"));
  unsigned __int8 v2 = [v1 shouldAudioMonitoringRecording];

  if ((v2 & 1) == 0)
  {
    uint64_t v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[CSSelfTriggerDetectorEnabledPolicyHomePod _addSelfTriggerDetectorEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s SelfTriggerDetector cannot be resumed since we should not monitor audio",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

BOOL sub_100006160(id a1)
{
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriEnabledMonitor sharedInstance](&OBJC_CLASS___CSSiriEnabledMonitor, "sharedInstance"));
  unsigned __int8 v2 = [v1 isEnabled];

  if ((v2 & 1) == 0)
  {
    uint64_t v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[CSSelfTriggerDetectorEnabledPolicyHomePod _addSelfTriggerDetectorEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s SelfTriggerDetector cannot be turned on since Siri is disabled",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

void sub_1000065A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location, id a22)
{
}

uint64_t sub_100006A8C(uint64_t a1)
{
  unsigned __int8 v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v6 = 136315394;
    int v7 = "-[CSAttendingUsecaseProxy speechStartDetectedWithEventInfo:]_block_invoke";
    __int16 v8 = 2112;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s %@", (uint8_t *)&v6, 0x16u);
  }

  [*(id *)(*(void *)(a1 + 40) + 56) speechStartDetectedWithEventInfo:*(void *)(a1 + 32)];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 8LL));
  [WeakRetained speechStartDetectedWithEventInfo:*(void *)(a1 + 32)];

  uint64_t result = objc_opt_respondsToSelector(*(void *)(*(void *)(a1 + 40) + 64LL), "speechStartDetectedWithEventInfo:");
  if ((result & 1) != 0) {
    return (uint64_t)[*(id *)(*(void *)(a1 + 40) + 64) speechStartDetectedWithEventInfo:*(void *)(a1 + 32)];
  }
  return result;
}

void sub_100006B90(uint64_t a1)
{
  unsigned __int8 v2 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = v2;
    else {
      int v5 = *(&off_10022BD50 + v3 - 1);
    }
    int v6 = v5;
    int v8 = 136315394;
    uint64_t v9 = "-[CSAttendingUsecaseProxy attendingStoppedWithReason:]_block_invoke";
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s [reason = %@]", (uint8_t *)&v8, 0x16u);
  }

  [*(id *)(*(void *)(a1 + 32) + 56) attendingStoppedWithReason:*(void *)(a1 + 40)];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
  [WeakRetained attendingStoppedWithReason:*(void *)(a1 + 40)];
}

id sub_100006CB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 48);
  *(void *)(v2 + 48) = 0LL;

  return [*(id *)(a1 + 32) _invokeHandler];
}

id sub_100006CE4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    int v5 = "-[CSAttendingUsecaseProxy stopAttendingWithReason:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  return [*(id *)(*(void *)(a1 + 32) + 48) stopAttendingWithReason:*(void *)(a1 + 40)];
}

void sub_100006D98(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));
  uint64_t v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "usecaseForType:", objc_msgSend(*(id *)(a1 + 40), "attendingType")));
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(void **)(v4 + 48);
  *(void *)(v4 + 48) = v3;

  if ([*(id *)(a1 + 40) attendingType] == (id)6) {
    [*(id *)(*(void *)(a1 + 32) + 64) setDelegate:*(void *)(*(void *)(a1 + 32) + 72)];
  }
  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 48), "setDelegate:");
  int v6 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = *(void **)(a1 + 40);
    uint64_t v9 = *(void *)(v7 + 48);
    uint64_t v10 = *(void *)(v7 + 24);
    uint64_t v11 = v6;
    __int16 v12 = (char *)[v8 attendingType];
    else {
      uint64_t v13 = *(&off_10022C170 + (void)(v12 - 1));
    }
    __int16 v14 = v13;
    *(_DWORD *)buf = 136315906;
    v21 = "-[CSAttendingUsecaseProxy startAttendingWithOptions:completion:]_block_invoke";
    __int16 v22 = 2112;
    uint64_t v23 = v9;
    __int16 v24 = 2112;
    uint64_t v25 = v10;
    __int16 v26 = 2112;
    v27 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s Created [controller = %@] for [connection = %@] [attendingType = %@]",  buf,  0x2Au);
  }

  uint64_t v15 = *(void **)(a1 + 40);
  __int16 v16 = *(void **)(*(void *)(a1 + 32) + 48LL);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_100006F8C;
  v17[3] = &unk_10022E6A0;
  id v18 = v15;
  id v19 = *(id *)(a1 + 48);
  [v16 startAttendingWithOptions:v18 completion:v17];
}

void sub_100006F8C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2) {
    +[CSAttendingSelfLogger emitAttendingContextStartedEventWithAttendingOptions:withMHUUID:]( &OBJC_CLASS___CSAttendingSelfLogger,  "emitAttendingContextStartedEventWithAttendingOptions:withMHUUID:",  *(void *)(a1 + 32),  0LL);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100006FEC(uint64_t a1)
{
  id v2 = objc_retainBlock(*(id *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 32);
  *(void *)(v3 + 32) = v2;
}

void sub_10000701C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = v3;
    id v5 = objc_loadWeakRetained((id *)(a1 + 40));
    id v6 = v5;
    *(_DWORD *)buf = 136315650;
    __int16 v14 = "-[CSAttendingUsecaseProxy setupConnectionErrorHandler:]_block_invoke_2";
    __int16 v15 = 2114;
    id v16 = v5;
    __int16 v17 = 1026;
    unsigned int v18 = [v6 processIdentifier];
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Attending Connection Interruption Handler: %{public}@, client PID: %{public}d)",  buf,  0x1Cu);
  }

  id v7 = objc_loadWeakRetained((id *)(a1 + 40));
  int v8 = v7;
  if (WeakRetained && v7)
  {
    uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100007340;
    v10[3] = &unk_10022EFD0;
    id v11 = v8;
    id v12 = WeakRetained;
    dispatch_async(v9, v10);
  }
}

void sub_1000071A0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = v3;
    id v5 = objc_loadWeakRetained((id *)(a1 + 40));
    id v6 = v5;
    *(_DWORD *)buf = 136315650;
    id v12 = "-[CSAttendingUsecaseProxy setupConnectionErrorHandler:]_block_invoke_2";
    __int16 v13 = 2114;
    id v14 = v5;
    __int16 v15 = 1026;
    unsigned int v16 = [v6 processIdentifier];
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Attending Connection Invalidation Handler: %{public}@, client PID: %{public}d exited",  buf,  0x1Cu);
  }

  id v7 = objc_loadWeakRetained((id *)(a1 + 40));
  int v8 = v7;
  if (WeakRetained && v7)
  {
    uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100007314;
    block[3] = &unk_10022F100;
    block[4] = WeakRetained;
    dispatch_async(v9, block);
  }
}

id sub_100007314(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invokeHandler];
}

id sub_100007340(uint64_t a1)
{
  return [*(id *)(a1 + 40) _invokeHandler];
}

void sub_100007374(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 56LL);
    int v4 = 136315394;
    id v5 = "-[CSAttendingUsecaseProxy setupListenerDelegate:]_block_invoke";
    __int16 v6 = 2112;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s _listenerDelegate = %@",  (uint8_t *)&v4,  0x16u);
  }

BOOL sub_10000833C(id a1)
{
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSHomePodSettingsMonitor sharedInstance](&OBJC_CLASS___CSHomePodSettingsMonitor, "sharedInstance"));
  unsigned __int8 v2 = [v1 shouldAudioMonitoringRecording];

  if ((v2 & 1) == 0)
  {
    uint64_t v3 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      __int16 v6 = "-[CSSmartSiriVolumeRunPolicyHomePod _addSmartSiriVolumeEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolume cannot be resumed since we should not monitor audio",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

void sub_100008724(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) isEqualToString:*(void *)(a1 + 40)])
  {
    double v2 = *(double *)(a1 + 48);
    uint64_t v3 = *(void *)(a1 + 32);
    if (v2 > *(float *)(v3 + 8) && *(float *)(a1 + 56) == -2.0)
    {
      int v4 = (os_log_s *)CSLogCategorySDSD;
      if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(v3 + 16);
        int v9 = 136315906;
        uint64_t v10 = "-[CSAttSiriEagerMitigator attSiriUresNode:tcuGeneratedForRequestId:withNldaScore:withProcessedAudioDuratio"
              "n:]_block_invoke";
        __int16 v11 = 2112;
        uint64_t v12 = v5;
        __int16 v13 = 2048;
        unint64_t v14 = 0xC000000000000000LL;
        __int16 v15 = 2048;
        double v16 = v2;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Trigger early mitigation for requestId: %@ with NLDA score: %f audioDuration: %f",  (uint8_t *)&v9,  0x2Au);
      }

      __int16 v6 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriLauncher sharedLauncher](&OBJC_CLASS___CSSiriLauncher, "sharedLauncher"));
      [v6 deactivateSiriActivationConnectionWithReason:19 withOptions:0 withContext:0];

      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = *(void **)(v7 + 16);
      *(void *)(v7 + 16) = 0LL;
    }
  }

void sub_100008874(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) isEqualToString:*(void *)(a1 + 40)])
  {
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = *(void **)(v2 + 16);
    *(void *)(v2 + 16) = 0LL;
  }

double sub_1000088B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 16);
  if (v3)
  {
    int v4 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_INFO))
    {
      int v11 = 136315394;
      uint64_t v12 = "-[CSAttSiriEagerMitigator requestStartedWithId:forRecordContext:]_block_invoke";
      __int16 v13 = 2112;
      unint64_t v14 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Stale reqId %@ found, clearing",  (uint8_t *)&v11,  0x16u);
      uint64_t v2 = *(void *)(a1 + 32);
      uint64_t v3 = *(void **)(v2 + 16);
    }

    *(void *)(v2 + 16) = 0LL;
  }

  if ([*(id *)(a1 + 40) isVoiceTriggered])
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 16LL), *(id *)(a1 + 48));
    [*(id *)(*(void *)(a1 + 32) + 32) eagerMitigationDurationThreshold];
    *(_DWORD *)(*(void *)(a1 + 32) + 8LL) = v6;
    uint64_t v7 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = *(void **)(v8 + 16);
      double v10 = *(float *)(v8 + 8);
      int v11 = 136315650;
      uint64_t v12 = "-[CSAttSiriEagerMitigator requestStartedWithId:forRecordContext:]_block_invoke";
      __int16 v13 = 2112;
      unint64_t v14 = v9;
      __int16 v15 = 2048;
      double v16 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s Currently tracking reqId: %@ for early mitigation with eager mitigattion trigger duration: %f",  (uint8_t *)&v11,  0x20u);
    }
  }

  return result;
}

void sub_100008A40(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategorySDSD;
  if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v4 = 136315394;
    uint64_t v5 = "-[CSAttSiriEagerMitigator setPrefetchedAsset:]_block_invoke";
    __int16 v6 = 2112;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s setting prefetched asset %@",  (uint8_t *)&v4,  0x16u);
  }

id sub_100008BC8(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 16) isEqualToString:*(void *)(a1 + 40)];
  if ((_DWORD)result)
  {
    LODWORD(v3) = *(_DWORD *)(a1 + 64);
    return [*(id *)(a1 + 32) attSiriUresNode:*(void *)(a1 + 48) tcuGeneratedForRequestId:*(void *)(a1 + 40) withNldaScore:v3 withProcessedAudioDuration:*(double *)(a1 + 56)];
  }

  return result;
}

uint64_t sub_100009214(uint64_t result)
{
  if (!*(void *)(*(void *)(result + 32) + 16LL)) {
    *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = 0LL;
  }
  return result;
}

void sub_10000923C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) notifyObserver:v3];
  if ((objc_opt_respondsToSelector(v3, "CSSystemUserActivityMonitor:activeStateChanged:") & 1) != 0) {
    objc_msgSend(v3, "CSSystemUserActivityMonitor:activeStateChanged:");
  }
}

void sub_1000092AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v1 + 8) == -1)
  {
    id v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      double v10 = "-[CSSystemUserActivityMonitor _startMonitoringWithQueue:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%s ", buf, 0xCu);
      uint64_t v1 = *(void *)(a1 + 32);
    }

    int v4 = *(dispatch_queue_s **)(a1 + 40);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_100009434;
    handler[3] = &unk_10022EA50;
    handler[4] = v1;
    uint32_t v5 = notify_register_dispatch("com.apple.system.powermanagement.useractivity", (int *)(v1 + 8), v4, handler);
    __int16 v6 = *(_DWORD **)(a1 + 32);
    if (v5)
    {
      v6[2] = -1;
      uint64_t v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        double v10 = "-[CSSystemUserActivityMonitor _startMonitoringWithQueue:]_block_invoke_2";
        _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Failed to register for user activity state",  buf,  0xCu);
      }
    }

    else
    {
      [v6 _fetchSystemUserActivityState];
    }
  }

void sub_100009434(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v7 = "-[CSSystemUserActivityMonitor _startMonitoringWithQueue:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Received user activity notification",  buf,  0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(dispatch_queue_s **)(v3 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100009524;
  block[3] = &unk_10022F100;
  block[4] = v3;
  dispatch_async(v4, block);
}

id sub_100009524(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fetchSystemUserActivityState];
}

uint64_t sub_10000952C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = *(unsigned int *)(v1 + 8);
  if ((_DWORD)result != -1)
  {
    *(_DWORD *)(v1 + 8) = -1;
    return notify_cancel(result);
  }

  return result;
}

void sub_100009594(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSSystemUserActivityMonitor);
  uint64_t v2 = (void *)qword_10027FBA8;
  qword_10027FBA8 = (uint64_t)v1;
}

id sub_100009924(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _notifyObserver:a2];
}

id sub_100009930(uint64_t a1)
{
  return [*(id *)(a1 + 32) _didReceiveSpeakerRecognitionAssetMetaData];
}

void sub_100009978(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSSpeakerRecognitionAssetMetaUpdateMonitor);
  uint64_t v2 = (void *)qword_10027FBB8;
  qword_10027FBB8 = (uint64_t)v1;
}

void sub_100009A94(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSXPCClientFactory);
  uint64_t v2 = (void *)qword_10027FBD0;
  qword_10027FBD0 = (uint64_t)v1;
}

void *sub_100009FCC(void *result, void *a2)
{
  if (result[4]) {
    return objc_msgSend(a2, "setSiriIntendedInfo:");
  }
  return result;
}

id sub_100009FE0(uint64_t a1, void *a2)
{
  return [a2 setSiriIntendedInfo:*(void *)(a1 + 32)];
}

id sub_100009FEC(uint64_t a1, void *a2)
{
  return [a2 setTcuList:*(void *)(a1 + 32)];
}

void sub_10000A2D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10000A3B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 16);
  *(void *)(v2 + 16) = 0LL;
}

uint64_t sub_10000A3E4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10000A3F4(uint64_t a1)
{
}

void sub_10000A3FC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioRecorder]);

  if (v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioRecorder]);
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id obj = *(id *)(v5 + 40);
    unsigned __int8 v6 = [v3 deactivateAudioSession:v4 error:&obj];
    objc_storeStrong((id *)(v5 + 40), obj);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v6;
  }

  else
  {
    uint64_t v7 = (os_log_s *)CSLogCategoryAudio;
    if (os_log_type_enabled(CSLogCategoryAudio, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      double v10 = "-[CSFallbackAudioSessionReleaseProvider fallbackDeactivateAudioSession:error:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s Cannot deactivateAudioSession since audio recorder doesn't exist",  buf,  0xCu);
    }
  }

void sub_10000A510(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioRecorder]);
  [v2 registerObserver:*(void *)(a1 + 32)];
}

void sub_10000A638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000A6A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS___CSAudioTapProvider;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10000A720( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

LABEL_19:
    uint64_t v5 = 0;
LABEL_20:

    goto LABEL_21;
  }

  unsigned __int8 v6 = (os_log_s *)CSLogCategoryAudio;
  if (os_log_type_enabled(CSLogCategoryAudio, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v27 = "-[CSAudioTapProvider _setupRecordingAudioQueueIfNeededWithOption:]";
    _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Failed to create AudioQueue input!",  buf,  0xCu);
  }

  if (outAQ) {
    AudioQueueDispose(outAQ, 1u);
  }
  uint64_t v5 = 0;
LABEL_21:

  return v5;
}

  v30 = (os_log_s *)CSLogCategoryEP;
  if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
  {
    v31 = self->_endpointTimeInMs;
    v32 = self->_userSpeakingEndedTimeInMs;
    v33 = self->_userSpeakingEndedHostTime;
    v34 = *(double *)&self->_stopRecordingHostTime;
    *(_DWORD *)buf = 136316162;
    v58 = "-[CSEndpointDelayReporter reportEndpointDelayIfNeed]";
    v59 = 2050;
    v60 = *(const char **)&v31;
    v61 = 2050;
    v62 = *(const char **)&v32;
    v63 = 2050;
    v64 = *(double *)&v33;
    v65 = 2050;
    v66 = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "%s endpointTimeInMs %{public}f, userSpeakingEndedTime: %{public}f, _userSpeakingEndedMachAbsTime: %{public}llu, st opRecordingMachAbsTime: %{public}llu",  buf,  0x34u);
  }

        v59 = 0LL;
        v57 = 0u;
        v58 = 0u;
        __int16 v13 = 0.0;
LABEL_20:
        v21 = (unint64_t)(v11 * v13);
        outBuffer = 0LL;
        __int16 v22 = AudioQueueAllocateBuffer(*(AudioQueueRef *)(v4 + 24), v21, &outBuffer);
        if (v22)
        {
          uint64_t v23 = v22;
          __int16 v17 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR)) {
            return;
          }
          buf.mNumberBuffers = 136315394;
          *(void *)(&buf.mNumberBuffers + 1) = "-[CSAudioInjectionProviderExclave _readAudioBufferAndFeedIntoAudioQueue]_block_invoke";
          LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
          *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = v23;
          unsigned int v18 = "%s Failed to feed audio into exclave, unable to alloc AudioQueue AudioBuffer with OSStatus: %d";
          goto LABEL_23;
        }

        memset(outBuffer->mAudioData, 1, v21);
        buf.mNumberBuffers = 1;
        __int16 v26 = *(void *)(a1 + 32);
        v27 = *(void **)(v26 + 40);
        if (v27)
        {
          [v27 outASBD];
          v28 = HIDWORD(v54);
          __int16 v26 = *(void *)(a1 + 32);
          v27 = *(void **)(v26 + 40);
        }

        else
        {
          v28 = 0;
          v55 = 0LL;
          v53 = 0u;
          v54 = 0u;
        }

        buf.mBuffers[0].mNumberChannels = v28;
        buf.mBuffers[0].mDataByteSize = v21;
        buf.mBuffers[0].mData = outBuffer->mAudioData;
        v29 = *(double *)(v26 + 32);
        if (v27)
        {
          [v27 outASBD];
          v30 = v51;
          v27 = *(void **)(*(void *)(a1 + 32) + 40LL);
        }

        else
        {
          v30 = 0.0;
        }

        ioNumberFrames = (v29 * v30);
        v31 = ExtAudioFileRead((ExtAudioFileRef)[v27 fFile], &ioNumberFrames, &buf);
        v32 = *(void **)(*(void *)(a1 + 32) + 40LL);
        if (v32)
        {
          v33 = ioNumberFrames;
          [v32 outASBD];
          v34 = *(void **)(*(void *)(a1 + 32) + 40LL);
          v35 = v50 * v33;
          if (v34)
          {
            [v34 outASBD];
            v36 = HIDWORD(v48);
            goto LABEL_36;
          }
        }

        else
        {
          v35 = 0;
        }

        v36 = 0;
        v49 = 0LL;
        v47 = 0u;
        v48 = 0u;
LABEL_36:
        outBuffer->mAudioDataByteSize = v35 * v36;
        if (v31 || !ioNumberFrames)
        {
          if (v31)
          {
            v37 = (os_log_s *)CSLogContextFacilityCoreSpeech;
            if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v66 = 136315394;
              v67 = "-[CSAudioInjectionProviderExclave _readAudioBufferAndFeedIntoAudioQueue]_block_invoke";
              v68 = 1024;
              LODWORD(v69) = v31;
              _os_log_error_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "%s ::: Error reading data from audio file : %d",  v66,  0x12u);
            }
          }

          ExtAudioFileDispose((ExtAudioFileRef)objc_msgSend( *(id *)(*(void *)(a1 + 32) + 40),  "fFile",  v47,  v48,  v49));
          [*(id *)(*(void *)(a1 + 32) + 40) setFFile:0];
          v38 = *(void *)(a1 + 32);
          v39 = *(void **)(v38 + 40);
          *(void *)(v38 + 40) = 0LL;

          outBuffer = (AudioQueueBufferRef)[*(id *)(a1 + 32) _defaultBufferRef];
          *(void *)(*(void *)(a1 + 32) + 64LL) = mach_absolute_time();
          v40 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
          {
            v41 = *(void *)(*(void *)(a1 + 32) + 64LL);
            *(_DWORD *)v66 = 136315394;
            v67 = "-[CSAudioInjectionProviderExclave _readAudioBufferAndFeedIntoAudioQueue]_block_invoke";
            v68 = 2048;
            v69 = v41;
            _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "%s injection is ended at time: %llu",  v66,  0x16u);
          }

          v42 = *(void **)(a1 + 32);
          v43 = v42[6];
          if (v43) {
            (*(void (**)(uint64_t, uint64_t, void, void, void))(v43 + 16))(v43, 1LL, 0LL, v42[7], v42[8]);
          }
        }

        v44 = *(OpaqueAudioQueue **)(*(void *)(a1 + 32) + 24LL);
        if (v44 && outBuffer)
        {
          v45 = AudioQueueEnqueueBuffer(v44, outBuffer, 0, 0LL);
          if (v45)
          {
            v46 = v45;
            __int16 v17 = (os_log_s *)CSLogContextFacilityCoreSpeech;
            if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v66 = 136315394;
              v67 = "-[CSAudioInjectionProviderExclave _readAudioBufferAndFeedIntoAudioQueue]_block_invoke";
              v68 = 1024;
              LODWORD(v69) = v46;
              unsigned int v18 = "%s Failed to feed audio into exclave, unable to enqueue AQ buffer with OSStatus: %d";
              p_buf = v66;
              goto LABEL_24;
            }
          }

          return;
        }

        id v19 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR)) {
          return;
        }
        *(_DWORD *)v66 = 136315138;
        v67 = "-[CSAudioInjectionProviderExclave _readAudioBufferAndFeedIntoAudioQueue]_block_invoke";
        unsigned int v18 = "%s Failed to feed audio into exclave, AQ or AQBuffer is invalid";
        p_buf = v66;
LABEL_52:
        __int16 v24 = v19;
        uint64_t v25 = 12;
        goto LABEL_53;
      }
    }

    else
    {
      v65 = 0LL;
      v63 = 0u;
      v64 = 0u;
      uint64_t v8 = v5 * 0.0;
    }

    v62 = 0LL;
    v60 = 0u;
    v61 = 0u;
    int v11 = v8 * 0.0;
    goto LABEL_19;
  }

  unint64_t v14 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    buf.mNumberBuffers = 136315138;
    *(void *)(&buf.mNumberBuffers + 1) = "-[CSAudioInjectionProviderExclave _readAudioBufferAndFeedIntoAudioQueue]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%s AudioQueue call back is asking for audio, injected file is not available, injecting digital 1s",  (uint8_t *)&buf,  0xCu);
  }

  __int16 v15 = AudioQueueEnqueueBuffer( *(AudioQueueRef *)(*(void *)(a1 + 32) + 24),  (AudioQueueBufferRef)[*(id *)(a1 + 32) _defaultBufferRef],  0,  0);
  if (v15)
  {
    double v16 = v15;
    __int16 v17 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      buf.mNumberBuffers = 136315394;
      *(void *)(&buf.mNumberBuffers + 1) = "-[CSAudioInjectionProviderExclave _readAudioBufferAndFeedIntoAudioQueue]_block_invoke";
      LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = v16;
      unsigned int v18 = "%s Failed to feed audio into exclave, unable to enqueue AQ buffer with OSStatus: %d";
LABEL_23:
      p_buf = (uint8_t *)&buf;
LABEL_24:
      __int16 v24 = v17;
      uint64_t v25 = 18;
LABEL_53:
      _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, v18, p_buf, v25);
    }
  }
}

void sub_10000ABFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000B378( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10000B75C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000B860( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10000B8FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10000B968( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10000BB84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10000BD1C(void *a1)
{
  id v2 = (os_log_s *)CSLogCategoryAudio;
  if (os_log_type_enabled(CSLogCategoryAudio, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[6];
    uint64_t v4 = a1[7];
    int v6 = 136315650;
    uint64_t v7 = "-[CSAudioTapProvider _saveRecordingBufferFrom:to:toURL:]_block_invoke";
    __int16 v8 = 2050;
    uint64_t v9 = v3;
    __int16 v10 = 2050;
    uint64_t v11 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Saving circular buffer from %{public}lu to %{public}lu",  (uint8_t *)&v6,  0x20u);
  }

  return +[CSPlainAudioFileWriter saveAudioChunck:toURL:]( &OBJC_CLASS___CSPlainAudioFileWriter,  "saveAudioChunck:toURL:",  a1[4],  a1[5]);
}

id sub_10000BDEC(void *a1)
{
  id v2 = (void *)a1[4];
  id result = (id)v2[11];
  if (result) {
    return objc_msgSend(v2, "_saveRecordingBufferFrom:to:toURL:", a1[6], objc_msgSend(result, "sampleCount"), a1[5]);
  }
  return result;
}

id sub_10000BE44(uint64_t a1)
{
  return [*(id *)(a1 + 32) _saveRecordingBufferFrom:*(void *)(a1 + 48) to:*(void *)(a1 + 56) toURL:*(void *)(a1 + 40)];
}

id sub_10000BE54(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAudioStream:*(void *)(a1 + 40)];
}

void sub_10000BE60(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 32) + 88LL))
  {
    id v2 = (os_log_s *)CSLogCategoryAudio;
    if (os_log_type_enabled(CSLogCategoryAudio, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 136315138;
      __int16 v13 = "-[CSAudioTapProvider audioStreamWithRequest:streamName:error:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Create circular buffer",  (uint8_t *)&v12,  0xCu);
    }

    uint64_t v3 = objc_alloc(&OBJC_CLASS___CSAudioCircularBuffer);
    +[CSConfig inputRecordingDurationInSecs](&OBJC_CLASS___CSConfig, "inputRecordingDurationInSecs");
    int v5 = v4;
    +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
    LODWORD(v7) = v6;
    LODWORD(v_Block_object_dispose((const void *)(v9 - 96), 8) = v5;
    uint64_t v9 = -[CSAudioCircularBuffer initWithNumChannels:recordingDuration:samplingRate:audioTimeConverter:]( v3,  "initWithNumChannels:recordingDuration:samplingRate:audioTimeConverter:",  1LL,  0LL,  v8,  v7);
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void **)(v10 + 88);
    *(void *)(v10 + 8_Block_object_dispose((const void *)(v9 - 96), 8) = v9;
  }

id sub_10000BF74(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAudioStream:*(void *)(a1 + 40)];
}

id sub_10000BF9C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioStream]);
  [v2 audioStreamProvider:*(void *)(a1 + 32) didStopStreamUnexpectedly:-11785];

  return [*(id *)(a1 + 32) _releaseTransactionForStopListeningIfNeeded];
}

void sub_10000BFE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

OpaqueAudioQueue *sub_10000BFF4(uint64_t a1)
{
  id result = *(OpaqueAudioQueue **)(*(void *)(a1 + 32) + 40LL);
  if (result)
  {
    id result = (OpaqueAudioQueue *)sub_10000C030(result, 0LL);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = (_BYTE)result;
  }

  return result;
}

BOOL sub_10000C030(OpaqueAudioQueue *a1, void *a2)
{
  UInt32 ioDataSize = 4;
  int outData = 0;
  OSStatus Property = AudioQueueGetProperty(a1, 0x6171726Eu, &outData, &ioDataSize);
  if (Property)
  {
    OSStatus v4 = Property;
    int v5 = (os_log_s *)CSLogCategoryAudio;
    if (os_log_type_enabled(CSLogCategoryAudio, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v10 = "isAudioQueueRecording";
      __int16 v11 = 1024;
      OSStatus v12 = v4;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Error reading AudioQueue property : %d",  buf,  0x12u);
      if (!a2) {
        return outData == 1;
      }
      goto LABEL_4;
    }

    if (a2) {
LABEL_4:
    }
      *a2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v4,  0LL));
  }

  return outData == 1;
}

void sub_10000C154(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  [*(id *)(a1 + 32) _releaseTransactionForStopListeningIfNeeded];
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t, id))(v5 + 16))(v5, a2, v6);
  }
}

void sub_10000C1A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

id sub_10000C1BC(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategoryAudio;
  if (os_log_type_enabled(CSLogCategoryAudio, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[CSAudioTapProvider stopAudioStream:option:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  return [*(id *)(a1 + 32) _stopRecordingAudioQueueIfNeededWithCompletion:*(void *)(a1 + 40)];
}

void sub_10000C26C(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  if ((a2 & 1) == 0) {
    [*(id *)(a1 + 32) _releaseTransactionForStopListeningIfNeeded];
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t, id))(v5 + 16))(v5, a2, v6);
  }
}

void sub_10000C2C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10000C2D8(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategoryAudio;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
    int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localizedDescription]);
    LODWORD(buf.mSampleTime) = 136315650;
    *(void *)((char *)&buf.mSampleTime + 4) = "-[CSAudioTapProvider startAudioStream:option:completion:]_block_invoke_2";
    WORD2(buf.mHostTime) = 2114;
    *(UInt64 *)((char *)&buf.mHostTime + 6) = (UInt64)v3;
    HIWORD(buf.mRateScalar) = 2114;
    buf.mWordClockTime = (UInt64)v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s stream: %{public}@, option: %{public}@",  (uint8_t *)&buf,  0x20u);
  }

  [*(id *)(a1 + 48) _holdTransactionForStartListening];
  if (![*(id *)(a1 + 48) _setupRecordingAudioQueueIfNeededWithOption:*(void *)(a1 + 40)])
  {
    uint64_t v11 = *(void *)(a1 + 56);
    OSStatus v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  2051LL,  0LL));
    (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0LL, v12);

    return;
  }

  for (uint64_t i = 8LL; i != 40; i += 8LL)
    AudioQueueEnqueueBuffer( (AudioQueueRef)[*(id *)(a1 + 48) recordingAudioQueue],  *(AudioQueueBufferRef *)(*(void *)(a1 + 48) + i),  0,  0);
  id v6 = (id)mach_absolute_time();
  buf.mSampleTime = 0.0;
  memset(&buf.mRateScalar, 0, 40);
  buf.mHostTime = (UInt64)v6;
  *(void *)&buf.mFlags = 2LL;
  OSStatus v7 = AudioQueueStart((AudioQueueRef)[*(id *)(a1 + 48) recordingAudioQueue], &buf);
  if (v7)
  {
    double v8 = (os_log_s *)CSLogCategoryAudio;
    if (os_log_type_enabled(CSLogCategoryAudio, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      __int16 v17 = "-[CSAudioTapProvider startAudioStream:option:completion:]_block_invoke";
      __int16 v18 = 1024;
      OSStatus v19 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Failed to start Audio Queue! %d",  (uint8_t *)&v16,  0x12u);
    }

    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v7,  0LL));
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0LL, v10);
  }

  else
  {
    __int16 v13 = *(void **)(a1 + 64);
    if (!v13) {
      return;
    }
    id v14 = objc_retainBlock(v13);
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v10 = *(void **)(v15 + 64);
    *(void *)(v15 + 64) = v14;
  }
}

void sub_10000C584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000C5C0(void *a1, uint64_t a2, int a3)
{
  id v6 = (os_log_s *)CSLogCategoryAudio;
  if (os_log_type_enabled(CSLogCategoryAudio, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315138;
    __int16 v26 = "isRunningListenerCallback";
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Received isRunningListenerCallback from Audio Queue",  buf,  0xCu);
  }

  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_10000C7D8;
  v23[3] = &unk_10022E408;
  id v7 = a1;
  id v24 = v7;
  double v8 = objc_retainBlock(v23);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_10000C880;
  v21[3] = &unk_10022E408;
  id v9 = v7;
  id v22 = v9;
  uint64_t v10 = objc_retainBlock(v21);
  uint64_t v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v9 queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10000C92C;
  block[3] = &unk_10022A120;
  int v20 = a3;
  id v18 = v10;
  uint64_t v19 = a2;
  id v16 = v9;
  id v17 = v8;
  id v12 = v9;
  __int16 v13 = v10;
  id v14 = v8;
  dispatch_async(v11, block);
}

void sub_10000C7A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28)
{
  _Unwind_Resume(a1);
}

void sub_10000C7D8(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (v5) {
    [*(id *)(a1 + 32) _releaseTransactionForStopListeningIfNeeded];
  }
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) aqStartCompletion]);

  if (v3)
  {
    int v4 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) aqStartCompletion]);
    ((void (**)(void, BOOL))v4)[2](v4, v5 == 0LL);

    [*(id *)(a1 + 32) setAqStartCompletion:0];
  }
}

void sub_10000C860( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10000C880(uint64_t a1, void *a2)
{
  id v5 = a2;
  [*(id *)(a1 + 32) _reset];
  [*(id *)(a1 + 32) _releaseTransactionForStopListeningIfNeeded];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) aqStopCompletion]);

  if (v3)
  {
    int v4 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) aqStopCompletion]);
    ((void (**)(void, BOOL))v4)[2](v4, v5 == 0LL);

    [*(id *)(a1 + 32) setAqStopCompletion:0];
  }
}

void sub_10000C90C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10000C92C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 1634824814)
  {
    uint64_t v3 = *(OpaqueAudioQueue **)(a1 + 56);
    id v12 = 0LL;
    BOOL v4 = sub_10000C030(v3, &v12);
    id v5 = v12;
    if (v5)
    {
      id v6 = v5;
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }

    else
    {
      double v8 = (os_log_s *)CSLogCategoryAudio;
      if (os_log_type_enabled(CSLogCategoryAudio, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = @"NO";
        if (v4) {
          id v9 = @"YES";
        }
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        id v14 = "isRunningListenerCallback_block_invoke";
        __int16 v15 = 2114;
        id v16 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s isRecording: %{public}@", buf, 0x16u);
      }

      if ([*(id *)(a1 + 32) recordingAudioQueue])
      {
        uint64_t v10 = 48LL;
        if (v4) {
          uint64_t v10 = 40LL;
        }
        id v6 = 0LL;
        (*(void (**)(void))(*(void *)(a1 + v10) + 16LL))();
      }

      else
      {
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  2061LL,  0LL));
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
        (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();

        id v6 = 0LL;
      }
    }
  }

  else
  {
    id v7 = (os_log_s *)CSLogCategoryAudio;
    if (os_log_type_enabled(CSLogCategoryAudio, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      id v14 = "isRunningListenerCallback_block_invoke_3";
      __int16 v15 = 1024;
      LODWORD(v16) = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s AudioQueue listener property %d not match",  buf,  0x12u);
    }

    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  2056LL,  0LL));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_10000CBA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10000CBC0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
  {
    int v2 = (os_log_s *)CSLogCategoryAudio;
    if (os_log_type_enabled(CSLogCategoryAudio, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      id v6 = "-[CSAudioTapProvider destroyRecordingAudioQueue]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Stopping current audio queue before destroying",  (uint8_t *)&v5,  0xCu);
    }

    [*(id *)(a1 + 32) _stopRecordingAudioQueueIfNeededWithCompletion:0];
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioStream]);
    [v3 audioStreamProvider:*(void *)(a1 + 32) didStopStreamUnexpectedly:8];
  }

  return [*(id *)(a1 + 32) _destroyRecordingAudioQueue];
}

void sub_10000CCB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000CCC8(void *a1, uint64_t a2, AudioQueueBuffer *a3, uint64_t a4)
{
  id v6 = a1;
  if (a3 && a3->mAudioData && a3->mAudioDataByteSize)
  {
    id v7 = -[NSData initWithBytes:length:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBytes:length:",  a3->mAudioData,  a3->mAudioDataByteSize);
    uint64_t v8 = *(void *)(a4 + 8);
    id v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v6 queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10000CE9C;
    block[3] = &unk_10022E7F8;
    uint64_t v10 = v7;
    id v14 = v10;
    id v11 = v6;
    id v15 = v11;
    uint64_t v16 = v8;
    dispatch_async(v9, block);

    AudioQueueEnqueueBuffer((AudioQueueRef)[v11 recordingAudioQueue], a3, 0, 0);
  }

  else
  {
    id v12 = (os_log_s *)CSLogCategoryAudio;
    if (os_log_type_enabled(CSLogCategoryAudio, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315138;
      id v18 = "handleInputBuffer";
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s Received invalid Audio Queue buffer, ignore",  buf,  0xCu);
    }
  }
}

void sub_10000CE60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000CE9C(uint64_t a1)
{
  unint64_t v2 = (unint64_t)[*(id *)(a1 + 32) length];
  unint64_t v3 = v2
     / +[CSConfig inputRecordingSampleByteDepth](&OBJC_CLASS___CSConfig, "inputRecordingSampleByteDepth");
  BOOL v4 = (char *)[*(id *)(a1 + 40) processedSampleCount];
  int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) circularBuffer]);

  if (v5)
  {
    id v12 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) circularBuffer]);
    objc_msgSend( v12, "addSamples:numSamples:atHostTime:", objc_msgSend(*(id *)(a1 + 32), "bytes"), v3, *(void *)(a1 + 48));
  }

  id v6 = objc_alloc(&OBJC_CLASS___CSAudioChunk);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = +[CSConfig inputRecordingSampleByteDepth](&OBJC_CLASS___CSConfig, "inputRecordingSampleByteDepth");
  uint64_t v9 = *(void *)(a1 + 48);
  LOBYTE(v11) = +[CSConfig inputRecordingIsFloat](&OBJC_CLASS___CSConfig, "inputRecordingIsFloat");
  id v13 = [v6 initWithData:v7 numChannels:1 numSamples:v3 sampleByteDepth:v8 startSampleCount:v4 hostTime:v9 remoteVAD:0 isFloat:v11];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) audioStream]);
  [v10 audioStreamProvider:*(void *)(a1 + 40) audioBufferAvailable:v13];

  [*(id *)(a1 + 40) setProcessedSampleCount:&v4[v3]];
}

void sub_10000CFDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_10000D000(void *a1)
{
}

LABEL_53:
}

_BYTE *sub_10000F3A4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 96LL));
  [WeakRetained destroyRecordingAudioQueue];

  id result = *(_BYTE **)(a1 + 32);
  if (result[10]) {
    return [result _startListenPolling];
  }
  return result;
}

void sub_10000F3F0(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  if (v2[13] == 1 && [v2 _isTelephonyTapAvailable])
  {
    unint64_t v3 = (os_log_s *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      int v9 = 136315394;
      uint64_t v10 = "-[CSSelfTriggerDetector CSPhoneCallStateMonitor:didRecievePhoneCallStateChange:]_block_invoke";
      __int16 v11 = 2050;
      uint64_t v12 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s phoneCall state : %{public}lu",  (uint8_t *)&v9,  0x16u);
    }

    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 112LL);
    if (*(void *)(a1 + 40) == 3LL)
    {
      if (v5 == 1) {
        return;
      }
      id v6 = (os_log_s *)CSLogCategoryVT;
      if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 136315138;
        uint64_t v10 = "-[CSSelfTriggerDetector CSPhoneCallStateMonitor:didRecievePhoneCallStateChange:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Transit to telephony audio tap mode",  (uint8_t *)&v9,  0xCu);
      }

      uint64_t v7 = 1LL;
    }

    else
    {
      if (!v5) {
        return;
      }
      uint64_t v8 = (os_log_s *)CSLogCategoryVT;
      if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 136315138;
        uint64_t v10 = "-[CSSelfTriggerDetector CSPhoneCallStateMonitor:didRecievePhoneCallStateChange:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s Transit to default mode",  (uint8_t *)&v9,  0xCu);
      }

      uint64_t v7 = 0LL;
    }

    *(void *)(*(void *)(a1 + 32) + 112LL) = v7;
    [*(id *)(a1 + 32) _hardStopAndRestartAudioQueueIfNeeded];
  }

_BYTE *sub_10000F5A0(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[CSSelfTriggerDetector CSAudioServerCrashMonitorDidReceiveServerRestart:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  id result = *(_BYTE **)(a1 + 32);
  if (result[10]) {
    return [result _startListenPolling];
  }
  return result;
}

void sub_10000F658(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    int v4 = "-[CSSelfTriggerDetector siriClientBehaviorMonitor:willStopStream:reason:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Siri Client will stop listening, resume selfTrigger listen",  (uint8_t *)&v3,  0xCu);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 0;
}

void sub_10000F708(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    int v4 = "-[CSSelfTriggerDetector siriClientBehaviorMonitor:didStopStream:withEventUUID:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Siri Client stops listening now, selfTrigger can listen now",  (uint8_t *)&v3,  0xCu);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 0;
}

void sub_10000F7B8(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    int v4 = "-[CSSelfTriggerDetector siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Siri Client starts listening now, selfTrigger shouldn't listen now",  (uint8_t *)&v3,  0xCu);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 1;
}

void sub_10000F86C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 40))
  {
    if (*(_BYTE *)(v2 + 10))
    {
      int v3 = *(void **)(v2 + 160);
      id v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) data]);
      objc_msgSend( v3,  "addSamples:numSamples:",  objc_msgSend(v4, "bytes"),  objc_msgSend(*(id *)(a1 + 40), "numSamples"));

      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 48) getAnalyzedResultsFromAudioChunk:*(void *)(a1 + 40)]);
      *(void *)(*(void *)(a1 + 32) + 152) += [*(id *)(a1 + 40) numSamples];
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      id v6 = v5;
      id v7 = [v6 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v7)
      {
        id v8 = v7;
        uint64_t v9 = *(void *)v19;
        do
        {
          uint64_t v10 = 0LL;
          do
          {
            if (*(void *)v19 != v9) {
              objc_enumerationMutation(v6);
            }
            __int16 v11 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)v10);
            uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 88), "voiceTriggerPhIds", (void)v18));
            id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v11 phId]));
            unsigned int v14 = [v12 containsObject:v13];

            if (v14) {
              objc_msgSend( *(id *)(a1 + 32),  "_keywordAnalyzerNDAPI:hasResultAvailable:forChannel:",  *(void *)(*(void *)(a1 + 32) + 48),  v11,  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 48), "activeChannel"));
            }
            uint64_t v10 = (char *)v10 + 1;
          }

          while (v8 != v10);
          id v8 = [v6 countByEnumeratingWithState:&v18 objects:v22 count:16];
        }

        while (v8);
      }
    }

    else
    {
      uint64_t v16 = qword_10027FBD8;
      if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * qword_10027FBD8, 1) <= 0x1999999999999999uLL)
      {
        id v17 = (os_log_s *)CSLogCategoryVT;
        if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          id v24 = "-[CSSelfTriggerDetector audioStreamProvider:audioBufferAvailable:]_block_invoke";
          __int16 v25 = 2050;
          uint64_t v26 = v16;
          _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%s enablePolicy is NO, we shouldn't receive audio here, heartbeat = %{public}lld",  buf,  0x16u);
          uint64_t v16 = qword_10027FBD8;
        }
      }

      qword_10027FBD8 = v16 + 1;
    }
  }

  else
  {
    id v15 = (os_log_s *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315138;
      id v24 = "-[CSSelfTriggerDetector audioStreamProvider:audioBufferAvailable:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%s Could not find Assets. Cannot process Audio",  buf,  0xCu);
    }
  }

id sub_10000FB80(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _reset];
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 != -11785 && v3 != 8) {
    return [*(id *)(a1 + 32) _startListenPolling];
  }
  return result;
}

void sub_10000FBDC(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = (void *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
    {
      __int16 v11 = v6;
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      __int128 v18 = "-[CSSelfTriggerDetector _stopListeningWithCompletion:]_block_invoke";
      __int16 v19 = 2114;
      __int128 v20 = v12;
      _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%s Cannot stop listening : %{public}@",  buf,  0x16u);
    }
  }

  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  uint64_t v9 = *(dispatch_queue_s **)(v7 + 16);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10000FD40;
  v13[3] = &unk_10022E678;
  v13[4] = v7;
  char v16 = a2;
  id v14 = v5;
  id v15 = v8;
  id v10 = v5;
  dispatch_async(v9, v13);
}

uint64_t sub_10000FD40(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(unsigned __int8 *)(a1 + 56),  *(void *)(a1 + 40));
  }
  return result;
}

id sub_10000FD90(uint64_t a1)
{
  uint64_t v2 = (void *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    id v4 = v2;
    int v6 = 136315394;
    uint64_t v7 = "-[CSSelfTriggerDetector stopAnalyzeWithCompletion:]_block_invoke";
    __int16 v8 = 2048;
    id v9 = [v3 audioSourceType];
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s audioSourceType : %lu",  (uint8_t *)&v6,  0x16u);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 10LL) = 0;
  return [*(id *)(a1 + 32) _stopListeningWithCompletion:*(void *)(a1 + 40)];
}

uint64_t sub_10000FE74(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10000FE88(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(a1 + 40);
  __int16 v8 = *(dispatch_queue_s **)(v6 + 16);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10000FF2C;
  v10[3] = &unk_10022E678;
  char v13 = a2;
  void v10[4] = v6;
  id v11 = v5;
  id v12 = v7;
  id v9 = v5;
  dispatch_async(v8, v10);
}

uint64_t sub_10000FF2C(uint64_t a1)
{
  uint64_t v2 = *(_BYTE **)(a1 + 32);
  if (*(_BYTE *)(a1 + 56))
  {
    if (v2[10])
    {
      [*(id *)(a1 + 32) _transitCurrentStateTo:2];
    }

    else
    {
      uint64_t v3 = (os_log_s *)CSLogCategoryVT;
      if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315138;
        uint64_t v6 = "-[CSSelfTriggerDetector _startListenWithCompletion:]_block_invoke_2";
        _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Received didStartRecording when enablePolicy is off",  (uint8_t *)&v5,  0xCu);
        uint64_t v2 = *(_BYTE **)(a1 + 32);
      }

      [v2 _stopListeningWithCompletion:0];
    }
  }

  else
  {
    [*(id *)(a1 + 32) _unloadCurrentAssetToAnalyzer];
    [*(id *)(a1 + 32) _transitCurrentStateTo:0];
    [*(id *)(a1 + 32) _stopAudioFileWriter];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100010044(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      (*(void (**)(uint64_t, uint64_t, void))(v6 + 16))(v6, 1LL, 0LL);
    }
  }

  else
  {
    uint64_t v7 = (void *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
    {
      id v10 = v7;
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
      *(_DWORD *)location = 136315394;
      *(void *)&location[4] = "-[CSSelfTriggerDetector _startListenPollingWithInterval:completion:]_block_invoke";
      __int16 v16 = 2114;
      id v17 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s listen polling has failed : %{public}@",  location,  0x16u);
    }

    objc_initWeak((id *)location, *(id *)(a1 + 32));
    dispatch_time_t v8 = dispatch_time(0LL, (uint64_t)(*(double *)(a1 + 48) * 1000000000.0));
    id v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10001020C;
    block[3] = &unk_10022E600;
    objc_copyWeak(v14, (id *)location);
    v14[1] = *(id *)(a1 + 48);
    id v13 = *(id *)(a1 + 40);
    dispatch_after(v8, v9, block);

    objc_destroyWeak(v14);
    objc_destroyWeak((id *)location);
  }
}

void sub_10001020C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _startListenPollingWithInterval:*(void *)(a1 + 32) completion:*(double *)(a1 + 48)];
}

uint64_t sub_10001024C(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 11LL) = 0;
  return result;
}

id sub_100010258(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 10LL) = 1;
  return [*(id *)(a1 + 32) _startListenPolling];
}

id sub_10001026C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) removeObject:*(void *)(a1 + 40)];
}

id sub_100010278(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) addObject:*(void *)(a1 + 40)];
}

uint64_t sub_100010284(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 120LL);
  return result;
}

id sub_100010298(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setAsset:*(void *)(a1 + 40)];
}

id sub_1000102A4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reset];
}

void sub_1000102AC(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 10LL) = 0;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[CSSiriClientBehaviorMonitor sharedInstance]( &OBJC_CLASS___CSSiriClientBehaviorMonitor,  "sharedInstance"));
  [v2 registerObserver:*(void *)(a1 + 32)];

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[CSAudioServerCrashMonitor sharedInstance](&OBJC_CLASS___CSAudioServerCrashMonitor, "sharedInstance"));
  [v3 addObserver:*(void *)(a1 + 32)];

  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[CSPhoneCallStateMonitorFactory phoneCallStateMonitor]( &OBJC_CLASS___CSPhoneCallStateMonitorFactory,  "phoneCallStateMonitor"));
  [v4 addObserver:*(void *)(a1 + 32)];

  if ([*(id *)(a1 + 32) _isTelephonyTapAvailable])
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[CSPhoneCallStateMonitorFactory phoneCallStateMonitor]( &OBJC_CLASS___CSPhoneCallStateMonitorFactory,  "phoneCallStateMonitor"));
    BOOL v6 = [v5 phoneCallState] == (id)3;

    *(void *)(*(void *)(a1 + 32) + 112LL) = v6;
  }

LABEL_9:
}

  id v13 = *(void **)(a1 + 32);
  if (v13[2]) {
    [v13 _closeAudioFile];
  }
LABEL_15:
  *(_DWORD *)(*(void *)(a1 + 32) + 72LL) = 0;
}
}

    id v9 = 0LL;
    return v9;
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[CSSiriClientBehaviorMonitor sharedInstance]( &OBJC_CLASS___CSSiriClientBehaviorMonitor,  "sharedInstance"));
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([v5 recordRoute]);
  uint64_t v7 = +[CSUtils isDoAPAudioRouteWithRecordRoute:]( &OBJC_CLASS___CSUtils,  "isDoAPAudioRouteWithRecordRoute:",  v6);

  if (!v7) {
    goto LABEL_9;
  }
  dispatch_time_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[CSSiriClientBehaviorMonitor sharedInstance]( &OBJC_CLASS___CSSiriClientBehaviorMonitor,  "sharedInstance"));
  id v9 = (id)objc_claimAutoreleasedReturnValue([v8 deviceId]);
LABEL_6:

  return v9;
}
}
}

    -[CSAttSiriUresNode _holdTransactionForUresProcessing](self, "_holdTransactionForUresProcessing");
    goto LABEL_10;
  }

  if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
  {
    id v12 = v11;
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v9 localizedDescription]);
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    __int16 v16 = "-[CSAttSiriUresNode _createMitigatorModelWithConfig:]";
    id v17 = 2114;
    __int128 v18 = v13;
    _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%s Unable to create Ures mitigator with err: %{public}@",  buf,  0x16u);
  }

LABEL_10:
}
}
}
}

  id v15 = 0LL;
  v6->_opusConverter = 0LL;
LABEL_13:

  return v15;
}

void sub_100011248(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(v2 + 9);
  int v4 = *(unsigned __int8 *)(a1 + 56);
  id v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  BOOL v6 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
  if (v3 == v4)
  {
    if (v6)
    {
      uint64_t v7 = @"bypassed";
      if (!v3) {
        uint64_t v7 = @"NOT bypassed";
      }
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      v29 = "-[CSVoiceTriggerXPCServiceProxy setRaiseToSpeakBypassing:timeout:]_block_invoke_2";
      __int16 v30 = 2114;
      v31 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s ::: Ignore request as raiseToSpeak already %{public}@",  buf,  0x16u);
    }
  }

  else
  {
    if (v6)
    {
      dispatch_time_t v8 = @"bypassed";
      uint64_t v9 = *(void *)(a1 + 48);
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      v29 = "-[CSVoiceTriggerXPCServiceProxy setRaiseToSpeakBypassing:timeout:]_block_invoke";
      if (!v4) {
        dispatch_time_t v8 = @"NOT bypassed";
      }
      __int16 v30 = 2114;
      v31 = v8;
      __int16 v32 = 2050;
      uint64_t v33 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s ::: Asserting that raiseToSpeak should be %{public}@, timeout: %{public}f",  buf,  0x20u);
      LOBYTE(v4) = *(_BYTE *)(a1 + 56);
      uint64_t v2 = *(void *)(a1 + 32);
    }

    *(_BYTE *)(v2 + 9) = v4;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    id v10 = *(id *)(*(void *)(a1 + 32) + 24LL);
    id v11 = [v10 countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v24;
      do
      {
        for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v24 != v13) {
            objc_enumerationMutation(v10);
          }
          [*(id *)(*((void *)&v23 + 1) + 8 * (void)i) CSVoiceTriggerXPCServiceProxy:*(void *)(a1 + 32) bypassRaiseToSpeak:*(unsigned __int8 *)(a1 + 56)];
        }

        id v12 = [v10 countByEnumeratingWithState:&v23 objects:v27 count:16];
      }

      while (v12);
    }

    if (qword_10027FC40)
    {
      dispatch_source_cancel((dispatch_source_t)qword_10027FC40);
      id v15 = (void *)qword_10027FC40;
      qword_10027FC40 = 0LL;
    }

    if (*(_BYTE *)(a1 + 56) && *(double *)(a1 + 48) > 0.0)
    {
      dispatch_source_t v16 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  (dispatch_queue_t)qword_10027FC38);
      id v17 = (void *)qword_10027FC40;
      qword_10027FC40 = (uint64_t)v16;

      __int128 v18 = (dispatch_source_s *)qword_10027FC40;
      dispatch_time_t v19 = dispatch_time(0LL, (uint64_t)(*(double *)(a1 + 48) * 1000000000.0));
      dispatch_source_set_timer(v18, v19, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
      __int128 v20 = (dispatch_source_s *)qword_10027FC40;
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472LL;
      handler[2] = sub_100011550;
      handler[3] = &unk_10022E920;
      objc_copyWeak(&v22, (id *)(a1 + 40));
      dispatch_source_set_event_handler(v20, handler);
      dispatch_resume((dispatch_object_t)qword_10027FC40);
      objc_destroyWeak(&v22);
    }
  }

void sub_100011550(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315138;
      id v14 = "-[CSVoiceTriggerXPCServiceProxy setRaiseToSpeakBypassing:timeout:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s ::: Timeout!! raiseToSpeak should be NOT bypassed",  buf,  0xCu);
    }

    *((_BYTE *)WeakRetained + 9) = 0;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    __int128 v8 = 0u;
    __int128 v9 = 0u;
    id v3 = *((id *)WeakRetained + 3);
    id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v9;
      do
      {
        uint64_t v7 = 0LL;
        do
        {
          if (*(void *)v9 != v6) {
            objc_enumerationMutation(v3);
          }
          objc_msgSend( *(id *)(*((void *)&v8 + 1) + 8 * (void)v7),  "CSVoiceTriggerXPCServiceProxy:bypassRaiseToSpeak:",  WeakRetained,  0,  (void)v8);
          uint64_t v7 = (char *)v7 + 1;
        }

        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      }

      while (v5);
    }
  }
}

void sub_1000116B0(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("raise-to-speak assertion queue", 0LL);
  uint64_t v2 = (void *)qword_10027FC38;
  qword_10027FC38 = (uint64_t)v1;
}

void sub_1000116DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(v2 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 56);
  id v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  BOOL v6 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
  if (v3 == v4)
  {
    if (v6)
    {
      uint64_t v7 = @"bypassed";
      if (!v3) {
        uint64_t v7 = @"NOT bypassed";
      }
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      v29 = "-[CSVoiceTriggerXPCServiceProxy setPhraseSpotterBypassing:timeout:]_block_invoke_2";
      __int16 v30 = 2114;
      v31 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s ::: Ignore request as phraseSpotter already %{public}@",  buf,  0x16u);
    }
  }

  else
  {
    if (v6)
    {
      __int128 v8 = @"bypassed";
      uint64_t v9 = *(void *)(a1 + 48);
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      v29 = "-[CSVoiceTriggerXPCServiceProxy setPhraseSpotterBypassing:timeout:]_block_invoke";
      if (!v4) {
        __int128 v8 = @"NOT bypassed";
      }
      __int16 v30 = 2114;
      v31 = v8;
      __int16 v32 = 2050;
      uint64_t v33 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s ::: Asserting that PhraseSpotter should be %{public}@, timeout: %{public}f",  buf,  0x20u);
      LOBYTE(v4) = *(_BYTE *)(a1 + 56);
      uint64_t v2 = *(void *)(a1 + 32);
    }

    *(_BYTE *)(v2 + _Block_object_dispose((const void *)(v9 - 96), 8) = v4;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    id v10 = *(id *)(*(void *)(a1 + 32) + 24LL);
    id v11 = [v10 countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v24;
      do
      {
        for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v24 != v13) {
            objc_enumerationMutation(v10);
          }
          [*(id *)(*((void *)&v23 + 1) + 8 * (void)i) CSVoiceTriggerXPCServiceProxy:*(void *)(a1 + 32) bypassPhraseSpotter:*(unsigned __int8 *)(a1 + 56)];
        }

        id v12 = [v10 countByEnumeratingWithState:&v23 objects:v27 count:16];
      }

      while (v12);
    }

    if (qword_10027FC28)
    {
      dispatch_source_cancel((dispatch_source_t)qword_10027FC28);
      id v15 = (void *)qword_10027FC28;
      qword_10027FC28 = 0LL;
    }

    if (*(_BYTE *)(a1 + 56) && *(double *)(a1 + 48) > 0.0)
    {
      dispatch_source_t v16 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  (dispatch_queue_t)qword_10027FC20);
      id v17 = (void *)qword_10027FC28;
      qword_10027FC28 = (uint64_t)v16;

      __int128 v18 = (dispatch_source_s *)qword_10027FC28;
      dispatch_time_t v19 = dispatch_time(0LL, (uint64_t)(*(double *)(a1 + 48) * 1000000000.0));
      dispatch_source_set_timer(v18, v19, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
      __int128 v20 = (dispatch_source_s *)qword_10027FC28;
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472LL;
      handler[2] = sub_1000119E4;
      handler[3] = &unk_10022E920;
      objc_copyWeak(&v22, (id *)(a1 + 40));
      dispatch_source_set_event_handler(v20, handler);
      dispatch_resume((dispatch_object_t)qword_10027FC28);
      objc_destroyWeak(&v22);
    }
  }

void sub_1000119E4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315138;
      id v14 = "-[CSVoiceTriggerXPCServiceProxy setPhraseSpotterBypassing:timeout:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s ::: Timeout!! PhraseSpotter should be NOT bypassed",  buf,  0xCu);
    }

    *((_BYTE *)WeakRetained + _Block_object_dispose((const void *)(v9 - 96), 8) = 0;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    __int128 v8 = 0u;
    __int128 v9 = 0u;
    id v3 = *((id *)WeakRetained + 3);
    id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v9;
      do
      {
        uint64_t v7 = 0LL;
        do
        {
          if (*(void *)v9 != v6) {
            objc_enumerationMutation(v3);
          }
          objc_msgSend( *(id *)(*((void *)&v8 + 1) + 8 * (void)v7),  "CSVoiceTriggerXPCServiceProxy:bypassPhraseSpotter:",  WeakRetained,  0,  (void)v8);
          uint64_t v7 = (char *)v7 + 1;
        }

        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      }

      while (v5);
    }
  }
}

void sub_100011B44(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("phrasespotter assertion queue", 0LL);
  uint64_t v2 = (void *)qword_10027FC20;
  qword_10027FC20 = (uint64_t)v1;
}

void sub_100011B70(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_10027FC08 objectForKey:*(void *)(a1 + 32)]);
  id v3 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
  {
    if (*(_BYTE *)(a1 + 56)) {
      id v4 = @"Enabled";
    }
    else {
      id v4 = @"Disabled";
    }
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = (void *)qword_10027FC00;
    uint64_t v7 = v3;
    id v8 = [v6 count];
    uint64_t v9 = *(void *)(a1 + 48);
    int v17 = 136316674;
    __int128 v18 = "-[CSVoiceTriggerXPCServiceProxy enableVoiceTrigger:withAssertion:timestamp:]_block_invoke";
    __int16 v19 = 2114;
    __int128 v20 = v4;
    __int16 v21 = 2114;
    uint64_t v22 = v5;
    __int16 v23 = 2050;
    id v24 = v8;
    __int16 v25 = 2114;
    uint64_t v26 = qword_10027FC00;
    __int16 v27 = 2114;
    v28 = v2;
    __int16 v29 = 2050;
    uint64_t v30 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s ::: Asserting that VoiceTrigger should be %{public}@ with reason: %{public}@. Existing assertions (%{public}lu) : %{public}@; times: %{public}@ vs %{public}f",
      (uint8_t *)&v17,
      0x48u);
  }

  [v2 doubleValue];
  if (v10 < *(double *)(a1 + 48))
  {
    __int128 v11 = (void *)qword_10027FC08;
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v11 setObject:v12 forKey:*(void *)(a1 + 32)];

    if (*(_BYTE *)(a1 + 56))
    {
      id v13 = [(id)qword_10027FC00 count];
      [(id)qword_10027FC00 addObject:*(void *)(a1 + 32)];
      [*(id *)(*(void *)(a1 + 40) + 16) addObject:*(void *)(a1 + 32)];
      if (v13) {
        goto LABEL_15;
      }
      id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _fetchAssertionMonitor]);
      [v14 enableAssertionReceived];
    }

    else
    {
      [(id)qword_10027FC00 removeObject:*(void *)(a1 + 32)];
      [*(id *)(*(void *)(a1 + 40) + 16) removeObject:*(void *)(a1 + 32)];
      if ([(id)qword_10027FC00 count]) {
        goto LABEL_15;
      }
      id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _fetchAssertionMonitor]);
      [v14 disableAssertionReceived];
    }

LABEL_15:
    if ([@"Backlight turned on" isEqualToString:*(void *)(a1 + 32)])
    {
      dispatch_source_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _fetchAssertionMonitor]);
      [v16 backlightOnAssertionReceived:*(unsigned __int8 *)(a1 + 56) atHostTime:mach_absolute_time()];
    }

    goto LABEL_17;
  }

  id v15 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = 136315138;
    __int128 v18 = "-[CSVoiceTriggerXPCServiceProxy enableVoiceTrigger:withAssertion:timestamp:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%s Ignoring request to enable/disable voice trigger - time order violation.",  (uint8_t *)&v17,  0xCu);
  }

LABEL_17:
}
}

  return v18;
}

        dispatch_source_t v16 = *((_BYTE *)v223 + 24) != 0;
        goto LABEL_18;
      }
    }

    *id v15 = 0;
    goto LABEL_17;
  }

  uint64_t v6 = (os_log_s *)CSLogCategoryEP;
  if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(float *)(a1 + 112);
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    *(void *)&uint8_t buf[4] = "-[CSHybridEndpointer processOSDFeatures:withFrameDurationMs:withMHID:]_block_invoke_2";
    *(_WORD *)&buf[12] = 2050;
    *(double *)&buf[14] = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Already communicated end-pt: Not Invoking hybridClassifier for silposnf=%{public}f",  buf,  0x16u);
  }

  kdebug_trace(722472244LL, 0LL, 0LL, 0LL, 0LL);
}

  if (CSIsIOS(a1, a2))
  {
    if (*((void *)v2 + 9) != 2LL) {
      goto LABEL_28;
    }
    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[CSOtherAppRecordingStateMonitor sharedInstance]( &OBJC_CLASS___CSOtherAppRecordingStateMonitor,  "sharedInstance"));
    id v14 = [v13 isOtherNonEligibleAppRecording];

    if ((v14 & 1) == 0) {
      goto LABEL_28;
    }
LABEL_25:
    id v8 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_48;
    }
    *(_DWORD *)AudioTimeStamp buf = 136315138;
    v48 = "-[CSVoiceTriggerEventsCoordinator _notifyRemoteTriggerEvent:myriadHash:remoteTriggerType:remoteDeviceId:isTrig"
          "geredFromFullWake:completion:]_block_invoke";
    uint64_t v9 = "%s Other non eligible app is recording, ignore trigger from Darwin device";
LABEL_27:
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v9, buf, 0xCu);
LABEL_48:
    v36 = *((void *)v2 + 8);
    if (v36) {
      (*(void (**)(void))(v36 + 16))();
    }
    return;
  }

  if (CSIsAppleSiliconMac())
  {
    if (+[CSUtils shouldBlockVoiceTriggerWhenOtherAppRecording]( &OBJC_CLASS___CSUtils,  "shouldBlockVoiceTriggerWhenOtherAppRecording"))
    {
      if (*((void *)v2 + 9) == 2LL)
      {
        id v15 = (void *)objc_claimAutoreleasedReturnValue( +[CSOtherAppRecordingStateMonitorASMac sharedInstance]( &OBJC_CLASS___CSOtherAppRecordingStateMonitorASMac,  "sharedInstance"));
        dispatch_source_t v16 = [v15 isOtherNonEligibleAppRecording];

        if (v16) {
          goto LABEL_25;
        }
      }
    }
  }

void sub_100011E28(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  uint64_t v2 = (void *)qword_10027FC00;
  qword_10027FC00 = v1;

  uint64_t v3 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v4 = (void *)qword_10027FC08;
  qword_10027FC08 = v3;

  dispatch_queue_t v5 = dispatch_queue_create("voicetrigger assertion queue", 0LL);
  uint64_t v6 = (void *)qword_10027FC10;
  qword_10027FC10 = (uint64_t)v5;
}

void sub_100011ED4(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSVoiceTriggerXPCServiceProxy);
  uint64_t v2 = (void *)qword_10027FBE8;
  qword_10027FBE8 = (uint64_t)v1;
}

BOOL sub_100011FB0(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSHomePodSettingsMonitor sharedInstance](&OBJC_CLASS___CSHomePodSettingsMonitor, "sharedInstance"));
  unsigned __int8 v2 = [v1 shouldAudioMonitoringRecording];

  if ((v2 & 1) == 0)
  {
    uint64_t v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[CSAdBlockerEnabledPolicyHomePod _addContinuousAudioFingerprintEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s ContinuousAudioFingerprint cannot be resumed since we should not monitor audio",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

void sub_1000152EC(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = a1[4];
  id v9 = v5;
  if (!*(_BYTE *)(v6 + 8))
  {
    switch(*(void *)(v6 + 40))
    {
      case 1LL:
        if ([(id)v6 _isHubRequest])
        {
          uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[CSSiriClientBehaviorMonitor sharedInstance]( &OBJC_CLASS___CSSiriClientBehaviorMonitor,  "sharedInstance"));
          [v7 notifyDidStopStream:a1[5] withEventUUID:*(void *)(a1[4] + 64)];
        }

        else
        {
          uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[CSAccessorySiriClientBehaviorMonitor sharedInstance]( &OBJC_CLASS___CSAccessorySiriClientBehaviorMonitor,  "sharedInstance"));
          [v7 notifyDidStopStream:0 reason:0 withEventUUID:*(void *)(a1[4] + 64) forAccessory:*(void *)(a1[4] + 72)];
        }

        goto LABEL_10;
      case 2LL:
        id v8 = &OBJC_CLASS___CSOpportuneSpeakBehaviorMonitor;
        goto LABEL_8;
      case 3LL:
        id v8 = &OBJC_CLASS___CSCommandControlBehaviorMonitor;
LABEL_8:
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[__objc2_class sharedInstance](v8, "sharedInstance"));
        [v7 notifyDidStopStream:0];
        goto LABEL_10;
      case 4LL:
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[CSIntuitiveConvAudioCaptureMonitor sharedInstance]( &OBJC_CLASS___CSIntuitiveConvAudioCaptureMonitor,  "sharedInstance"));
        [v7 notifyDidStopAudioCaptureWithOption:a1[5] eventUUID:*(void *)(a1[4] + 64) error:v9];
LABEL_10:

        uint64_t v6 = a1[4];
        id v5 = v9;
        break;
      default:
        break;
    }
  }

  [(id)v6 _sendReply:a1[6] client:a1[7] result:a2 error:v5];
}

void sub_100015424(uint64_t a1, uint64_t a2, void *a3)
{
  id v13 = a3;
  if ((_DWORD)a2) {
    [*(id *)(a1 + 32) _setAllowMixableAudioWhileRecordingIfNeeded:0];
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v5 + 8))
  {
    switch(*(void *)(v5 + 40))
    {
      case 1LL:
        if ([(id)v5 _isHubRequest])
        {
          uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[CSSiriClientBehaviorMonitor sharedInstance]( &OBJC_CLASS___CSSiriClientBehaviorMonitor,  "sharedInstance"));
          [v6 notifyDidStartStreamWithContext:*(void *)(*(void *)(a1 + 32) + 56) successfully:a2 option:*(void *)(a1 + 40) withEventUUID:*(void *)(*(void *)(a1 + 32) + 64)];
        }

        else
        {
          uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[CSAccessorySiriClientBehaviorMonitor sharedInstance]( &OBJC_CLASS___CSAccessorySiriClientBehaviorMonitor,  "sharedInstance"));
          [v6 notifyDidStartStreamWithContext:*(void *)(*(void *)(a1 + 32) + 56) successfully:a2 option:*(void *)(a1 + 40) withEventUUID:*(void *)(*(void *)(a1 + 32) + 64) forAccessory:*(void *)(*(void *)(a1 + 32) + 72)];
        }

        goto LABEL_12;
      case 2LL:
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[CSOpportuneSpeakBehaviorMonitor sharedInstance]( &OBJC_CLASS___CSOpportuneSpeakBehaviorMonitor,  "sharedInstance"));
        id v9 = *(void **)(a1 + 32);
        uint64_t v10 = v9[7];
        id v8 = (id)objc_claimAutoreleasedReturnValue([v9 audioStreamProviding]);
        __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v8 UUID]);
        id v12 = [*(id *)(a1 + 40) copy];
        [v6 notifyDidStartStreamWithContext:v10 audioProviderUUID:v11 successfully:a2 option:v12];

        goto LABEL_10;
      case 3LL:
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[CSCommandControlBehaviorMonitor sharedInstance]( &OBJC_CLASS___CSCommandControlBehaviorMonitor,  "sharedInstance"));
        uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 56LL);
        id v8 = [*(id *)(a1 + 40) copy];
        [v6 notifyDidStartStreamWithContext:v7 successfully:a2 option:v8];
LABEL_10:

        goto LABEL_12;
      case 4LL:
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[CSIntuitiveConvAudioCaptureMonitor sharedInstance]( &OBJC_CLASS___CSIntuitiveConvAudioCaptureMonitor,  "sharedInstance"));
        [v6 notifyDidStartAudioCaptureSuccessfully:a2 eventUUID:*(void *)(*(void *)(a1 + 32) + 64)];
LABEL_12:

        uint64_t v5 = *(void *)(a1 + 32);
        break;
      default:
        break;
    }
  }

  [(id)v5 _sendReply:*(void *)(a1 + 48) client:*(void *)(a1 + 56) result:a2 error:v13];
}

void sub_1000155F0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (!*(_BYTE *)(a1 + 48))
  {
    uint64_t v5 = *(void **)(a1 + 32);
    id v8 = v4;
    switch(v5[5])
    {
      case 1LL:
        if ([v5 _isHubRequest])
        {
          uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[CSSiriClientBehaviorMonitor sharedInstance]( &OBJC_CLASS___CSSiriClientBehaviorMonitor,  "sharedInstance"));
          [v6 notifyDidStopStream:*(void *)(a1 + 40) withEventUUID:*(void *)(*(void *)(a1 + 32) + 64)];
        }

        else
        {
          uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[CSAccessorySiriClientBehaviorMonitor sharedInstance]( &OBJC_CLASS___CSAccessorySiriClientBehaviorMonitor,  "sharedInstance"));
          [v6 notifyDidStopStream:0 reason:1 withEventUUID:*(void *)(*(void *)(a1 + 32) + 64) forAccessory:*(void *)(*(void *)(a1 + 32) + 72)];
        }

        goto LABEL_10;
      case 2LL:
        uint64_t v7 = &OBJC_CLASS___CSOpportuneSpeakBehaviorMonitor;
        goto LABEL_8;
      case 3LL:
        uint64_t v7 = &OBJC_CLASS___CSCommandControlBehaviorMonitor;
LABEL_8:
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[__objc2_class sharedInstance](v7, "sharedInstance"));
        [v6 notifyDidStopStream:0];
        goto LABEL_10;
      case 4LL:
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[CSIntuitiveConvAudioCaptureMonitor sharedInstance]( &OBJC_CLASS___CSIntuitiveConvAudioCaptureMonitor,  "sharedInstance"));
        [v6 notifyDidStopAudioCaptureWithOption:*(void *)(a1 + 40) eventUUID:*(void *)(*(void *)(a1 + 32) + 64) error:v8];
LABEL_10:

        id v4 = v8;
        break;
      default:
        break;
    }
  }
}

void sub_10001642C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSAudioPowerProvider sharedInstance](&OBJC_CLASS___CSAudioPowerProvider, "sharedInstance"));
  [v2 processAudioChunk:*(void *)(a1 + 32)];

  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 40) + 56LL);
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        objc_msgSend( *(id *)(*((void *)&v8 + 1) + 8 * (void)v7),  "attSiriAudioSrcNodeLPCMRecordBufferAvailable:audioChunk:",  *(void *)(a1 + 40),  *(void *)(a1 + 32),  (void)v8);
        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v5);
  }
}

id sub_100016548(uint64_t a1)
{
  unsigned __int8 v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    id v5 = "-[CSAttSiriAttendingAudioSrcNode audioStreamProvider:didStopStreamUnexpectedly:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s attSiriAttendingAudioSrcNode didstopStreamUnexpectedly",  (uint8_t *)&v4,  0xCu);
  }

  return [*(id *)(a1 + 32) _handleDidStopStreamUnexpectedly];
}

id sub_1000165F8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 56) removeObject:*(void *)(a1 + 40)];
}

void sub_10001660C(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 56) containsObject:*(void *)(a1 + 40)] & 1) == 0)
  {
    if ([*(id *)(a1 + 40) conformsToProtocol:&OBJC_PROTOCOL___CSAttSiriAudioDataReceiver])
    {
      [*(id *)(*(void *)(a1 + 32) + 56) addObject:*(void *)(a1 + 40)];
    }

    else
    {
      unsigned __int8 v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
      {
        uint64_t v3 = *(void *)(a1 + 40);
        int v4 = 136315394;
        id v5 = "-[CSAttSiriAttendingAudioSrcNode addReceiver:]_block_invoke";
        __int16 v6 = 2112;
        uint64_t v7 = v3;
        _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Unsupported receiver: %@",  (uint8_t *)&v4,  0x16u);
      }
    }
  }

void sub_100016724(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(a1 + 40);
  __int128 v8 = *(dispatch_queue_s **)(v6 + 64);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000167D0;
  v10[3] = &unk_10022E678;
  void v10[4] = v6;
  char v13 = a2;
  id v11 = v5;
  id v12 = v7;
  id v9 = v5;
  dispatch_async(v8, v10);
}

uint64_t sub_1000167D0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(unsigned __int8 *)(a1 + 56),  *(void *)(a1 + 40));
  }
  return result;
}

void sub_100016814(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(a1 + 40);
  __int128 v8 = *(dispatch_queue_s **)(v6 + 64);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000168C0;
  v10[3] = &unk_10022E678;
  char v13 = a2;
  void v10[4] = v6;
  id v11 = v5;
  id v12 = v7;
  id v9 = v5;
  dispatch_async(v8, v10);
}

uint64_t sub_1000168C0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 56))
  {
    unsigned __int8 v2 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v4 = *(void **)(a1 + 40);
      id v5 = v2;
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 localizedDescription]);
      int v7 = 136315394;
      __int128 v8 = "-[CSAttSiriAttendingAudioSrcNode startAudioStreamWithOption:completion:]_block_invoke_2";
      __int16 v9 = 2114;
      __int128 v10 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Failed to start audio data source: %{public}@",  (uint8_t *)&v7,  0x16u);
    }
  }

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(unsigned __int8 *)(a1 + 56),  *(void *)(a1 + 40));
  }
  return result;
}

void sub_1000169D4(const char *a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (a2)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100016A74;
    v7[3] = &unk_10022D360;
    id v8 = v5;
    id v9 = 0LL;
    xpc_activity_register(a1, a2, v7);
  }

  else
  {
    xpc_activity_unregister(a1);
  }
}

void sub_100016A74(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (state)
  {
    if (state == 2 && *(void *)(a1 + 32))
    {
      if (!xpc_activity_set_state(v3, 4LL))
      {
        id v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315138;
          id v11 = "_RegisterXPCActivity_block_invoke";
          _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Failed setting activity state to continue",  buf,  0xCu);
        }
      }

      uint64_t v6 = *(void *)(a1 + 32);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      v8[2] = sub_100016BC8;
      void v8[3] = &unk_10022F100;
      id v9 = v3;
      (*(void (**)(uint64_t, _xpc_activity_s *, void *))(v6 + 16))(v6, v9, v8);
    }
  }

  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7) {
      (*(void (**)(uint64_t, _xpc_activity_s *))(v7 + 16))(v7, v3);
    }
  }
}

void sub_100016BC8(uint64_t a1)
{
  if (xpc_activity_should_defer(*(xpc_activity_t *)(a1 + 32)))
  {
    if (xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 3LL)) {
      return;
    }
    unsigned __int8 v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315138;
      id v5 = "_RegisterXPCActivity_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Tried to defer activity but failed",  (uint8_t *)&v4,  0xCu);
    }
  }

  if (!xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5LL))
  {
    uint64_t v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315138;
      id v5 = "_RegisterXPCActivity_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Failed setting activity state to done",  (uint8_t *)&v4,  0xCu);
    }
  }

void sub_100016CFC(id a1, OS_xpc_object *a2, id a3)
{
  id v3 = a3;
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[CSPDispatcher sharedDispatcher](&OBJC_CLASS___CSPDispatcher, "sharedDispatcher"));
  [v4 runMigration:v3];
}

void sub_100016D4C(id a1, OS_xpc_object *a2, id a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[CSPDispatcher sharedDispatcher](&OBJC_CLASS___CSPDispatcher, "sharedDispatcher"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100016DFC;
  void v8[3] = &unk_10022A5A0;
  id v9 = v4;
  uint64_t v7 = v4;
  [v6 runMaintenanceWithShouldDefer:v8 completion:v5];
}

BOOL sub_100016DFC(uint64_t a1)
{
  return xpc_activity_should_defer(*(xpc_activity_t *)(a1 + 32));
}

void sub_100017480(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
  id v4 = (id)objc_claimAutoreleasedReturnValue([v1 baseDir]);

  uint64_t v2 = objc_claimAutoreleasedReturnValue([v4 stringByAppendingPathComponent:@"Logs/CrashReporter/CoreSpeech/audio/"]);
  id v3 = (void *)qword_10027FC58;
  qword_10027FC58 = v2;
}

id sub_1000174EC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryAudio;
  if (os_log_type_enabled(CSLogCategoryAudio, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(v3 + 64);
    LODWORD(v3) = *(_DWORD *)(v3 + 72);
    int v6 = 136315650;
    uint64_t v7 = "-[CSAudioFileLog stopRecording]_block_invoke";
    __int16 v8 = 2114;
    uint64_t v9 = v4;
    __int16 v10 = 1026;
    int v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Closing file at URL %{public}@, audio size: %{public}u",  (uint8_t *)&v6,  0x1Cu);
  }

  return [*(id *)(a1 + 32) _closeAudioFile];
}

void sub_1000175C0(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 16LL))
  {
    unsigned int v2 = [*(id *)(a1 + 40) length];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v3 = *(void **)(a1 + 40);
    unsigned int v5 = *(_DWORD *)(v4 + 48);
    LODWORD(v4) = *(_DWORD *)(v4 + 52);
    ioData.mNumberBuffers = 1;
    ioData.mBuffers[0].mNumberChannels = v4;
    UInt32 v6 = v2 / v5 / v4;
    ioData.mBuffers[0].mDataByteSize = [v3 length];
    ioData.mBuffers[0].mData = [*(id *)(a1 + 40) bytes];
    OSStatus v7 = ExtAudioFileWrite(*(ExtAudioFileRef *)(*(void *)(a1 + 32) + 16LL), v6, &ioData);
    if (v7)
    {
      OSStatus v8 = v7;
      uint64_t v9 = (os_log_s *)CSLogCategoryAudio;
      if (os_log_type_enabled(CSLogCategoryAudio, OS_LOG_TYPE_ERROR))
      {
        int v11 = 136315394;
        id v12 = "-[CSAudioFileLog appendAudioData:]_block_invoke";
        __int16 v13 = 1026;
        OSStatus v14 = v8;
        _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s Failed writing audio file %{public}d",  (uint8_t *)&v11,  0x12u);
      }
    }

    *(_DWORD *)(*(void *)(a1 + 32) + 72) += [*(id *)(a1 + 40) length];
  }

  else
  {
    __int16 v10 = (os_log_s *)CSLogCategoryAudio;
    if (os_log_type_enabled(CSLogCategoryAudio, OS_LOG_TYPE_ERROR))
    {
      ioData.mNumberBuffers = 136315138;
      *(void *)(&ioData.mNumberBuffers + 1) = "-[CSAudioFileLog appendAudioData:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s No audio file to append data",  (uint8_t *)&ioData,  0xCu);
    }
  }

void sub_100017760(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 32);
  if (v2[2])
  {
    uint64_t v3 = (os_log_s *)CSLogCategoryAudio;
    if (os_log_type_enabled(CSLogCategoryAudio, OS_LOG_TYPE_ERROR))
    {
      int v23 = 136315138;
      id v24 = "-[CSAudioFileLog startRecording]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Audio file already configured, closing first",  (uint8_t *)&v23,  0xCu);
      unsigned int v2 = *(void **)(a1 + 32);
    }

    [v2 _closeAudioFile];
    unsigned int v2 = *(void **)(a1 + 32);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( [v2 _makeTimestampedAudioLogFilenameWithPrefix:&stru_10022F858 suffix:@"-input.wav"]);
  uint64_t v5 = objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:isDirectory:](&OBJC_CLASS___NSURL, "fileURLWithPath:isDirectory:", v4, 0LL));
  uint64_t v6 = *(void *)(a1 + 32);
  OSStatus v7 = *(void **)(v6 + 64);
  *(void *)(v6 + 64) = v5;

  OSStatus v8 = (os_log_s *)CSLogCategoryAudio;
  if (os_log_type_enabled(CSLogCategoryAudio, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 64LL);
    int v23 = 136315394;
    id v24 = "-[CSAudioFileLog startRecording]_block_invoke";
    __int16 v25 = 2114;
    uint64_t v26 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s Creating audio file at URL %{public}@",  (uint8_t *)&v23,  0x16u);
  }

  OSStatus v10 = ExtAudioFileCreateWithURL( *(CFURLRef *)(*(void *)(a1 + 32) + 64LL),  0x57415645u,  (const AudioStreamBasicDescription *)(*(void *)(a1 + 32) + 24LL),  0LL,  1u,  (ExtAudioFileRef *)(*(void *)(a1 + 32) + 16LL));
  if (v10)
  {
    OSStatus v11 = v10;
    id v12 = (os_log_s *)CSLogCategoryAudio;
    if (!os_log_type_enabled(CSLogCategoryAudio, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    uint64_t v22 = *(void *)(*(void *)(a1 + 32) + 64LL);
    int v23 = 136315650;
    id v24 = "-[CSAudioFileLog startRecording]_block_invoke";
    __int16 v25 = 2114;
    uint64_t v26 = v22;
    __int16 v27 = 1026;
    OSStatus v28 = v11;
    __int16 v19 = "%s Failed creating audio file at url %{public}@ %{public}d";
    __int128 v20 = v12;
    uint32_t v21 = 28;
    goto LABEL_17;
  }

  uint64_t v14 = *(void *)(a1 + 32);
  id v15 = *(OpaqueExtAudioFile **)(v14 + 16);
  if (!v15) {
    goto LABEL_15;
  }
  OSStatus v16 = ExtAudioFileSetProperty(v15, 0x63666D74u, 0x28u, (const void *)(v14 + 24));
  if (!v16) {
    goto LABEL_15;
  }
  OSStatus v17 = v16;
  __int128 v18 = (os_log_s *)CSLogCategoryAudio;
  if (os_log_type_enabled(CSLogCategoryAudio, OS_LOG_TYPE_ERROR))
  {
    int v23 = 136315394;
    id v24 = "-[CSAudioFileLog startRecording]_block_invoke";
    __int16 v25 = 1026;
    LODWORD(v26) = v17;
    __int16 v19 = "%s Error setting input format %{public}d";
    __int128 v20 = v18;
    uint32_t v21 = 18;
LABEL_17:
    _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&v23, v21);
  }

void sub_100017A68(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSAudioFileLog);
  unsigned int v2 = (void *)qword_10027FC48;
  qword_10027FC48 = (uint64_t)v1;
}

void sub_1000183F8(uint64_t a1)
{
  unsigned int v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315138;
    __int128 v20 = "-[CSAudioSessionInfoProvider _audioRouteChanged:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", buf, 0xCu);
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 description]);

  OSStatus v17 = @"RouteChangeNotificationInfo";
  __int128 v18 = v4;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v18,  &v17,  1LL));
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v6 = *(id *)(*(void *)(a1 + 40) + 16LL);
  id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v13;
    do
    {
      for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v9) {
          objc_enumerationMutation(v6);
        }
        OSStatus v11 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v11,  "audioSessionInfoProvider:didReceiveAudioSessionRouteChangeNotificationWithUserInfo:") & 1) != 0) {
          objc_msgSend( v11,  "audioSessionInfoProvider:didReceiveAudioSessionRouteChangeNotificationWithUserInfo:",  *(void *)(a1 + 40),  v5,  (void)v12);
        }
      }

      id v8 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v8);
  }
}

void sub_1000185C8(uint64_t a1)
{
  unsigned int v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315138;
    OSStatus v17 = "-[CSAudioSessionInfoProvider _handleInterruption:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", buf, 0xCu);
  }

  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v11 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v8,  "audioSessionInfoProvider:didReceiveAudioSessionInterruptionNotificationWithUserInfo:") & 1) != 0)
        {
          uint64_t v9 = *(void *)(a1 + 32);
          OSStatus v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "userInfo", (void)v11));
          [v8 audioSessionInfoProvider:v9 didReceiveAudioSessionInterruptionNotificationWithUserInfo:v10];
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v5);
  }
}

void sub_100018758(uint64_t a1)
{
  unsigned int v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315138;
    __int128 v15 = "-[CSAudioSessionInfoProvider CSAudioServerCrashMonitorDidReceiveServerRestart:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s audiomxd/bridgeaudiod recovered from crash",  buf,  0xCu);
  }

  [*(id *)(a1 + 32) _registerAudioSessionNotifications];
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v9 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v8,  "audioSessionInfoProvider:didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:") & 1) != 0) {
          objc_msgSend( v8,  "audioSessionInfoProvider:didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:",  *(void *)(a1 + 32),  0,  (void)v9);
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v5);
  }
}

void sub_1000188DC(uint64_t a1)
{
  unsigned int v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315138;
    __int128 v15 = "-[CSAudioSessionInfoProvider CSAudioServerCrashMonitorDidReceiveServerCrash:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s audiomxd/bridgeaudiod crashed",  buf,  0xCu);
  }

  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v9 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v8,  "audioSessionInfoProvider:didReceiveAudioSessionMediaServicesWereLostNotificationWithUserInfo:") & 1) != 0) {
          objc_msgSend( v8,  "audioSessionInfoProvider:didReceiveAudioSessionMediaServicesWereLostNotificationWithUserInfo:",  *(void *)(a1 + 32),  0,  (void)v9);
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v5);
  }
}

id sub_100018A5C(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 16) count];
  if (!result) {
    return [*(id *)(a1 + 32) _stopMonitoring];
  }
  return result;
}

id sub_100018AA4(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 16) count];
  if (result == (id)1) {
    return [*(id *)(a1 + 32) _startMonitoring];
  }
  return result;
}

void sub_100018B30(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSAudioSessionInfoProvider);
  unsigned int v2 = (void *)qword_10027FC70;
  qword_10027FC70 = (uint64_t)v1;
}

void sub_100019140( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10001941C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10001953C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000195EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100019EA8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    if (v3 == 5)
    {
      if (*(void *)(a1 + 32))
      {
        id v8 = WeakRetained;
        id v4 = objc_alloc_init(&OBJC_CLASS___CSPreMyriadVoiceTriggerMetaData);
        -[CSPreMyriadVoiceTriggerMetaData setIsSecondPassRunning:](v4, "setIsSecondPassRunning:", 1LL);
        -[CSPreMyriadVoiceTriggerMetaData setDeviceId:](v4, "setDeviceId:", *(void *)(a1 + 32));
        double v6 = *(double *)(a1 + 56);
        *(float *)&double v6 = v6;
        -[CSPreMyriadVoiceTriggerMetaData setFirstPassMyriadGoodnessScore:](v4, "setFirstPassMyriadGoodnessScore:", v6);
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v8 accessoryVoiceTriggerMetaDataByDeviceId]);
        [v7 setObject:v4 forKey:*(void *)(a1 + 32)];

        goto LABEL_7;
      }
    }

    else if (v3 == 1)
    {
      id v8 = WeakRetained;
      id v4 = objc_alloc_init(&OBJC_CLASS___CSPreMyriadVoiceTriggerMetaData);
      -[CSPreMyriadVoiceTriggerMetaData setIsSecondPassRunning:](v4, "setIsSecondPassRunning:", 1LL);
      -[CSPreMyriadVoiceTriggerMetaData setDeviceId:](v4, "setDeviceId:", 0LL);
      double v5 = *(double *)(a1 + 56);
      *(float *)&double v5 = v5;
      -[CSPreMyriadVoiceTriggerMetaData setFirstPassMyriadGoodnessScore:](v4, "setFirstPassMyriadGoodnessScore:", v5);
      [v8 setBuiltInVoiceTriggerMetaData:v4];
LABEL_7:

      id WeakRetained = v8;
    }
  }
}

void sub_100019FA4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    if (v3 == 5)
    {
      if (*(void *)(a1 + 32))
      {
        id v5 = WeakRetained;
        id v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained accessoryVoiceTriggerMetaDataByDeviceId]);
        [v4 removeObjectForKey:*(void *)(a1 + 32)];

        goto LABEL_7;
      }
    }

    else if (v3 == 1)
    {
      id v5 = WeakRetained;
      [WeakRetained setBuiltInVoiceTriggerMetaData:0];
LABEL_7:
      id WeakRetained = v5;
    }
  }
}

void sub_10001A020(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) isBultInVoiceTriggerEvent:*(void *)(a1 + 40)];
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2)
  {
    [v3 _clearPendingRemoraVoiceTrigger];
  }

  else if ([v3 isRemoraVoiceTriggerEvent:*(void *)(a1 + 40)])
  {
    [*(id *)(a1 + 32) _clearPendingBuiltInVoiceTrigger];
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
  [WeakRetained voiceTriggerDidDetectKeyword:*(void *)(a1 + 40) deviceId:*(void *)(a1 + 48)];
}

void sub_10001A094(id *a1)
{
  if (+[CSUtils supportHomeKitAccessory](&OBJC_CLASS___CSUtils, "supportHomeKitAccessory"))
  {
    id WeakRetained = (id *)objc_loadWeakRetained(a1 + 8);
    uint64_t v3 = WeakRetained;
    if (WeakRetained)
    {
      if ([WeakRetained isBultInVoiceTriggerEvent:a1[4]])
      {
        id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 remoraSecondPassProgressProvider]);

        if (v4)
        {
          unsigned int v5 = [v3 _isRemoraSecondPassRunning];
          double v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "-[CSPreMyriadCoordinator voiceTriggerDidDetectKeyword:deviceId:completion:]_block_invoke";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v5;
            _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Remora second pass running: %d",  buf,  0x12u);
          }

          if (v5)
          {
            uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 builtInVoiceTriggerMetaData]);
            [v7 firstPassMyriadGoodnessScore];
            float v9 = v8;

            uint64_t v45 = 0LL;
            v46 = (double *)&v45;
            uint64_t v47 = 0x2020000000LL;
            *(void *)AudioTimeStamp buf = 0LL;
            *(void *)&buf[8] = buf;
            *(void *)&buf[16] = 0x3032000000LL;
            v55 = sub_10001A694;
            v56 = sub_10001A6A4;
            id v57 = 0LL;
            v44[0] = _NSConcreteStackBlock;
            v44[1] = 3221225472LL;
            v44[2] = sub_10001A6AC;
            v44[3] = &unk_10022A3A8;
            v44[4] = &v45;
            v44[5] = buf;
            [v3 _getHighestRemoraFirstPassGoodnessScore:v44];
            double v10 = v9;
            uint64_t v11 = (os_log_s *)CSLogContextFacilityCoreSpeech;
            if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v12 = *((void *)v46 + 3);
              *(_DWORD *)v48 = 136315651;
              v49 = "-[CSPreMyriadCoordinator voiceTriggerDidDetectKeyword:deviceId:completion:]_block_invoke_2";
              __int16 v50 = 2049;
              double v51 = v10;
              __int16 v52 = 2049;
              uint64_t v53 = v12;
              _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s Built-in first pass signal estimate: %{private}f, accessory signal estimate: %{private}f",  v48,  0x20u);
            }

            id v13 = v3[9];
            if (v13)
            {
              uint64_t v14 = *(void *)(*(void *)&buf[8] + 40LL);
              double v15 = v46[3];
              v40[0] = _NSConcreteStackBlock;
              v40[1] = 3221225472LL;
              v40[2] = sub_10001A6C8;
              v40[3] = &unk_10022A3D0;
              v40[4] = v3;
              id v41 = a1[4];
              id v42 = a1[5];
              id v43 = a1[7];
              [v13 shouldCancelSecondPassOnAccessory:v14 accessoryFirstPassScore:0 includeBoostForAccessory:1 buildInFirstPassScore :v40 includeBoostForBuiltIn:v15 completion:v10];
            }

            else
            {
              id v30 = objc_loadWeakRetained(v3 + 1);
              [v30 voiceTriggerDidDetectKeyword:a1[4] deviceId:a1[5] completion:a1[7]];
            }

            _Block_object_dispose(buf, 8);

            _Block_object_dispose(&v45, 8);
          }

          else
          {
            [v3 _clearPendingRemoraVoiceTrigger];
            id v27 = objc_loadWeakRetained(v3 + 1);
            [v27 voiceTriggerDidDetectKeyword:a1[4] deviceId:a1[5] completion:a1[7]];
          }

          goto LABEL_32;
        }

        goto LABEL_21;
      }

      if ([a1[6] isRemoraVoiceTriggerEvent:a1[4]])
      {
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v3 builtInSeconPassProgressProvider]);

        if (v16)
        {
          uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v3 builtInVoiceTriggerMetaData]);
          unsigned int v18 = [v17 isSecondPassRunning];

          __int16 v19 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "-[CSPreMyriadCoordinator voiceTriggerDidDetectKeyword:deviceId:completion:]_block_invoke";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v18;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "%s Built-in second pass running: %d",  buf,  0x12u);
          }

          if ((v18 & 1) != 0)
          {
            __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v3 builtInVoiceTriggerMetaData]);
            [v20 firstPassMyriadGoodnessScore];
            float v22 = v21;

            int v23 = (void *)objc_claimAutoreleasedReturnValue([v3 accessoryVoiceTriggerMetaDataByDeviceId]);
            id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKey:a1[5]]);

            if (v24)
            {
              [v24 firstPassMyriadGoodnessScore];
              double v26 = v25;
            }

            else
            {
              double v26 = -1.0;
            }

            double v31 = v22;
            __int16 v32 = (os_log_s *)CSLogContextFacilityCoreSpeech;
            if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)AudioTimeStamp buf = 136315651;
              *(void *)&uint8_t buf[4] = "-[CSPreMyriadCoordinator voiceTriggerDidDetectKeyword:deviceId:completion:]_block_invoke";
              *(_WORD *)&buf[12] = 2049;
              *(double *)&buf[14] = v31;
              *(_WORD *)&buf[22] = 2049;
              v55 = *(uint64_t (**)(uint64_t, uint64_t))&v26;
              _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "%s Built-in first pass signal estimate: %{private}f, accessory signal estimate: %{private}f",  buf,  0x20u);
            }

            id v33 = v3[9];
            if (v33)
            {
              v36[0] = _NSConcreteStackBlock;
              v36[1] = 3221225472LL;
              v36[2] = sub_10001A88C;
              v36[3] = &unk_10022A3D0;
              v36[4] = v3;
              id v34 = a1[5];
              id v37 = a1[4];
              id v38 = a1[5];
              id v39 = a1[7];
              [v33 shouldCancelBuiltInSecondPassWithBuiltInFirstPassScore:1 includeBoostForBuiltIn:0 accessoryFirstPassScore:v34 in cludeBoostForAccessory:v36 accessoryId:v31 completion:v26];
            }

            else
            {
              id v35 = objc_loadWeakRetained(v3 + 1);
              [v35 voiceTriggerDidDetectKeyword:a1[4] deviceId:a1[5] completion:a1[7]];
            }
          }

          else
          {
            [v3 _clearPendingBuiltInVoiceTrigger];
            id v29 = objc_loadWeakRetained(v3 + 1);
            [v29 voiceTriggerDidDetectKeyword:a1[4] deviceId:a1[5] completion:a1[7]];
          }

          goto LABEL_32;
        }

LABEL_21:
        OSStatus v28 = (void *)objc_claimAutoreleasedReturnValue([v3 delegate]);
        [v28 voiceTriggerDidDetectKeyword:a1[4] deviceId:a1[5] completion:a1[7]];
      }
    }
}
}

  uint64_t v16 = *(void **)(a1 + 32);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_1000B1BD0;
  v17[3] = &unk_10022EB30;
  void v17[4] = v16;
  unsigned int v18 = (char)v6;
  [v16 enumerateObserversInQueue:v17];
}
}

  return v7;
}

LABEL_32:
  }

void sub_10001A668( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

uint64_t sub_10001A694(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10001A6A4(uint64_t a1)
{
}

void sub_10001A6AC(uint64_t a1, void *a2, double a3)
{
  *(double *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a3;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
}

void sub_10001A6C8(uint64_t a1, int a2, int a3)
{
  id v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (a3)
  {
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315138;
      uint64_t v12 = "-[CSPreMyriadCoordinator voiceTriggerDidDetectKeyword:deviceId:completion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Accessory second pass cancellation query failed",  (uint8_t *)&v11,  0xCu);
    }

LABEL_8:
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
    [WeakRetained voiceTriggerDidDetectKeyword:*(void *)(a1 + 40) deviceId:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];

    return;
  }

  BOOL v6 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v6)
    {
      int v11 = 136315138;
      uint64_t v12 = "-[CSPreMyriadCoordinator voiceTriggerDidDetectKeyword:deviceId:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Cancelling homekit accessory voice trigger second pass",  (uint8_t *)&v11,  0xCu);
    }

    id v7 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24LL));
    [v7 cancelSecondPassRunning];

    goto LABEL_8;
  }

  if (v6)
  {
    int v11 = 136315138;
    uint64_t v12 = "-[CSPreMyriadCoordinator voiceTriggerDidDetectKeyword:deviceId:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Waiting for homekit accessory voice trigger second pass completion",  (uint8_t *)&v11,  0xCu);
  }

  float v9 = *(void **)(a1 + 32);
  id v10 = [*(id *)(a1 + 40) copy];
  [v9 setPendingBuiltInVoiceTriggerResult:v10];

  [*(id *)(a1 + 32) setPendingBuiltInVoiceTriggerCompletionBlk:*(void *)(a1 + 56)];
  [*(id *)(a1 + 32) setPendingBuiltInVoiceTriggerDetectedTime:mach_absolute_time()];
}

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
    [WeakRetained voiceTriggerDidDetectKeyword:*(void *)(a1 + 40) deviceId:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];

    return;
  }

  BOOL v6 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v6)
    {
      id v13 = 136315138;
      uint64_t v14 = "-[CSPreMyriadCoordinator voiceTriggerDidDetectKeyword:deviceId:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Cancelling built-in voice trigger second pass",  (uint8_t *)&v13,  0xCu);
    }

    id v7 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
    [v7 cancelSecondPassRunning];

    goto LABEL_8;
  }

  if (v6)
  {
    id v13 = 136315138;
    uint64_t v14 = "-[CSPreMyriadCoordinator voiceTriggerDidDetectKeyword:deviceId:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Waiting for built-in voice trigger second pass completion",  (uint8_t *)&v13,  0xCu);
  }

  float v9 = *(void **)(a1 + 32);
  id v10 = [*(id *)(a1 + 40) copy];
  [v9 setPendingRemoraVoiceTriggerResult:v10];

  int v11 = *(void **)(a1 + 32);
  uint64_t v12 = [*(id *)(a1 + 48) copy];
  [v11 setPendingRemoraVoiceTriggerDeviceId:v12];

  [*(id *)(a1 + 32) setPendingRemoraVoiceTriggerCompletionBlk:*(void *)(a1 + 56)];
  [*(id *)(a1 + 32) setPendingRemoraVoiceTriggerDetectedTime:mach_absolute_time()];
}
}

  _Block_object_dispose(&v27, 8);
}

void sub_10001A88C(uint64_t a1, int a2, int a3)
{
  id v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (a3)
  {
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315138;
      uint64_t v14 = "-[CSPreMyriadCoordinator voiceTriggerDidDetectKeyword:deviceId:completion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Built in second pass cancellation query failed",  (uint8_t *)&v13,  0xCu);
    }

id sub_10001AA70(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id result = [a3 isSecondPassRunning];
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }

  return result;
}

void sub_10001AAB0(uint64_t a1, uint64_t a2, void *a3)
{
  id v10 = a3;
  if ([v10 isSecondPassRunning])
  {
    [v10 firstPassMyriadGoodnessScore];
    double v5 = v4;
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
    if (*(double *)(v6 + 24) < v5)
    {
      *(double *)(v6 + 24) = v5;
      uint64_t v7 = objc_claimAutoreleasedReturnValue([v10 deviceId]);
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
      float v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v7;
    }
  }
}

id sub_10001AB2C(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_10001AB54(uint64_t a1)
{
}

id sub_10001AB5C(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  double TimeInterval = CSMachAbsoluteTimeGetTimeInterval(v2 - *(void *)(*(void *)(a1 + 32) + 96LL));
  if (TimeInterval <= 2.0)
  {
    double v5 = *(void **)(*(void *)(a1 + 32) + 80LL);
    if (v5)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v5);
      id v6 = objc_retainBlock(*(id *)(*(void *)(a1 + 32) + 88LL));
      uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
      uint64_t v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v6;
    }
  }

  else
  {
    float v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      int v11 = "-[CSPreMyriadCoordinator handlePendingBuiltInVoiceTriggerIfNeeded]_block_invoke";
      __int16 v12 = 2048;
      double v13 = TimeInterval;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Time since last pending builtin voice trigger %f. Ignoring.",  (uint8_t *)&v10,  0x16u);
    }
  }

  return [*(id *)(a1 + 32) _clearPendingBuiltInVoiceTrigger];
}

id sub_10001AC84(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  double TimeInterval = CSMachAbsoluteTimeGetTimeInterval(v2 - *(void *)(*(void *)(a1 + 32) + 64LL));
  if (TimeInterval <= 2.0)
  {
    double v5 = *(void **)(*(void *)(a1 + 32) + 40LL);
    if (v5)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v5);
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), *(id *)(*(void *)(a1 + 32) + 48LL));
      id v6 = objc_retainBlock(*(id *)(*(void *)(a1 + 32) + 56LL));
      uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8LL);
      uint64_t v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v6;
    }
  }

  else
  {
    float v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      int v11 = "-[CSPreMyriadCoordinator handlePendingRemoraVoiceTriggerIfNeeded]_block_invoke";
      __int16 v12 = 2048;
      double v13 = TimeInterval;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Time since last pending remora voice trigger %f. Ignoring.",  (uint8_t *)&v10,  0x16u);
    }
  }

  return [*(id *)(a1 + 32) _clearPendingRemoraVoiceTrigger];
}

BOOL sub_10001AE70(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerEnabledMonitor sharedInstance]( &OBJC_CLASS___CSVoiceTriggerEnabledMonitor,  "sharedInstance"));
  unsigned __int8 v2 = [v1 isEnabled];

  if ((v2 & 1) == 0)
  {
    uint64_t v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      id v6 = "-[CSVoiceTriggerEnabledPolicyDarwin _addVoiceTriggerEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger cannot be turned on since VoiceTrigger is disabled",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

void sub_10001B30C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10001B5C8(id a1, NSError *a2)
{
  unsigned __int8 v2 = a2;
  if (v2)
  {
    uint64_t v3 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      float v4 = v3;
      int v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSError localizedDescription](v2, "localizedDescription"));
      int v6 = 136315394;
      uint64_t v7 = "-[CSBluetoothSpeakerStateMonitor CSAudioServerCrashMonitorDidReceiveServerRestart:]_block_invoke";
      __int16 v8 = 2114;
      float v9 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Failed to enable ListeningOnPorts: %{public}@",  (uint8_t *)&v6,  0x16u);
    }
  }
}

id sub_10001B6B4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) notifyObserver:a2];
}

void sub_10001B6C0(id a1, NSError *a2)
{
  unsigned __int8 v2 = a2;
  if (v2)
  {
    uint64_t v3 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      float v4 = v3;
      int v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSError localizedDescription](v2, "localizedDescription"));
      int v6 = 136315394;
      uint64_t v7 = "-[CSBluetoothSpeakerStateMonitor _stopMonitoring]_block_invoke";
      __int16 v8 = 2114;
      float v9 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Failed to disable ListeningOnPorts: %{public}@",  (uint8_t *)&v6,  0x16u);
    }
  }
}

void sub_10001B7AC(id *a1, void *a2)
{
  id v3 = a2;
  a1 += 4;
  id WeakRetained = objc_loadWeakRetained(a1);
  int v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10001B964;
  v7[3] = &unk_10022F0D8;
  id v8 = v3;
  id v6 = v3;
  objc_copyWeak(&v9, a1);
  dispatch_async(v5, v7);

  objc_destroyWeak(&v9);
}

void sub_10001B878(id a1, NSError *a2)
{
  unsigned __int8 v2 = a2;
  if (v2)
  {
    id v3 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      float v4 = v3;
      int v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSError localizedDescription](v2, "localizedDescription"));
      int v6 = 136315394;
      uint64_t v7 = "-[CSBluetoothSpeakerStateMonitor _startMonitoringWithQueue:]_block_invoke";
      __int16 v8 = 2114;
      id v9 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Failed to enable ListeningOnPorts: %{public}@",  (uint8_t *)&v6,  0x16u);
    }
  }
}

void sub_10001B964(uint64_t a1)
{
  unsigned __int8 v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v9 = 136315394;
    int v10 = "-[CSBluetoothSpeakerStateMonitor _startMonitoringWithQueue:]_block_invoke_2";
    __int16 v11 = 2114;
    uint64_t v12 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s BT Speaker state changed : %{public}@",  (uint8_t *)&v9,  0x16u);
  }

  float v4 = *(void **)(a1 + 32);
  if (v4
    && (int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"AVVoiceTriggerPort_BluetoothSpeaker"]),
        v5,
        v5))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectForKeyedSubscript:@"AVVoiceTriggerPort_BluetoothSpeaker"]);
    objc_msgSend(WeakRetained, "_didReceiveBluetoothSpeakerStateChangeNotification:", objc_msgSend(v7, "BOOLValue"));
  }

  else
  {
    __int16 v8 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315138;
      int v10 = "-[CSBluetoothSpeakerStateMonitor _startMonitoringWithQueue:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Failed to get BT speaker state from AVVC, default to inactive",  (uint8_t *)&v9,  0xCu);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    [WeakRetained _didReceiveBluetoothSpeakerStateChangeNotification:0];
  }
}

uint64_t sub_10001BAF0(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 8LL);
  return result;
}

void sub_10001BB0C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  __int16 v8 = *(dispatch_queue_s **)(v7 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10001BC80;
  block[3] = &unk_10022EA98;
  id v12 = v5;
  id v13 = v6;
  uint64_t v14 = v7;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

id sub_10001BBC8(uint64_t a1)
{
  unsigned __int8 v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315138;
    id v5 = "-[CSBluetoothSpeakerStateMonitor _fetchSpeakerStateActiveInfo]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Timed-out for fetching speaker state active info, setting speakerStateActive = NO",  (uint8_t *)&v4,  0xCu);
  }

  return [*(id *)(a1 + 32) _didReceiveBluetoothSpeakerStateChangeNotification:0];
}

void sub_10001BC80(uint64_t a1)
{
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectForKeyedSubscript:@"AVVoiceTriggerPort_BluetoothSpeaker"]);
  uint64_t v3 = v2;
  int v4 = *(void **)(a1 + 40);
  if (v4) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v2 == 0LL;
  }
  if (v5)
  {
    id v6 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      __int16 v11 = v6;
      id v12 = (__CFString *)objc_claimAutoreleasedReturnValue([v4 localizedDescription]);
      int v13 = 136315394;
      uint64_t v14 = "-[CSBluetoothSpeakerStateMonitor _fetchSpeakerStateActiveInfo]_block_invoke_2";
      __int16 v15 = 2114;
      uint64_t v16 = v12;
      _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%s Failed to fetch BT speaker active state, error : %{public}@",  (uint8_t *)&v13,  0x16u);
    }

    id v7 = 0LL;
  }

  else
  {
    id v7 = [v2 BOOLValue];
    __int16 v8 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = @"inactive";
      if ((_DWORD)v7) {
        id v10 = @"active";
      }
      int v13 = 136315394;
      uint64_t v14 = "-[CSBluetoothSpeakerStateMonitor _fetchSpeakerStateActiveInfo]_block_invoke";
      __int16 v15 = 2114;
      uint64_t v16 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s Queried built-in speaker state as %{public}@",  (uint8_t *)&v13,  0x16u);
    }
  }

  [*(id *)(a1 + 48) _didReceiveBluetoothSpeakerStateChangeNotification:v7];
}

void sub_10001BE68(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSBluetoothSpeakerStateMonitor);
  unsigned __int8 v2 = (void *)qword_10027FC78;
  qword_10027FC78 = (uint64_t)v1;

  [(id)qword_10027FC78 start];
}

void sub_10001C048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001C1B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10001C83C(_Unwind_Exception *a1)
{
}

void sub_10001CA3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001CDA0(_Unwind_Exception *a1)
{
}

void sub_10001D08C(_Unwind_Exception *a1)
{
}

void sub_10001D3AC(_Unwind_Exception *a1)
{
}

void sub_10001D550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001D7EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_33:
    operator delete[](v9);
    return v18;
  }

  if (a3 == 1)
  {
    BOOL v5 = 41LL;
    goto LABEL_5;
  }

  uint64_t v17 = (os_log_s *)CSLogCategoryASV;
  unsigned int v18 = 0.0;
  if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)id v29 = 136315394;
    *(void *)&v29[4] = "-[CSSmartSiriVolumeSentinel getMeanBufferStrengthForSoundType:]";
    id v30 = 2050;
    uint64_t v31 = a3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%s CSSmartSiriVolumeSentinel Unknown Sound Type: %{public}ld",  v29,  0x16u);
  }

  return v18;
}
}

void sub_10001DD68(_Unwind_Exception *a1)
{
}

void sub_10001DF1C(void *__p)
{
  unsigned __int8 v2 = (void *)__p[6];
  if (v2)
  {
    __p[7] = v2;
    operator delete(v2);
  }

  uint64_t v3 = (void *)__p[5];
  __p[5] = 0LL;
  if (v3) {
    operator delete[](v3);
  }
  operator delete(__p);
}

void sub_10001DF5C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned __int8 v2 = (os_log_s *)CSLogCategoryASV;
  if (*(void *)(v1 + 280))
  {
    if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(unsigned __int8 *)(a1 + 40);
      *(_DWORD *)float v22 = 136315394;
      *(void *)&v22[4] = "-[CSSmartSiriVolumeSentinel notifySiriSessionStateTTSOngoing:]_block_invoke";
      __int16 v23 = 1024;
      int v24 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s TTS ongoing: %d", v22, 0x12u);
      uint64_t v1 = *(void *)(a1 + 32);
    }

    if (*(_BYTE *)(a1 + 40))
    {
      *(void *)(v1 + 376) = *(void *)(v1 + 384);
      *(_BYTE *)(*(void *)(a1 + 32) + 392LL) = 1;
    }

    else
    {
      if (*(_BYTE *)(v1 + 392))
      {
        unint64_t v5 = *(void *)(v1 + 384);
        unint64_t v6 = *(void *)(v1 + 320);
        if (v6 >> 60) {
          size_t v7 = -1LL;
        }
        else {
          size_t v7 = 16 * v6;
        }
        __int16 v8 = (char *)operator new[](v7);
        id v9 = v8;
        if (v6)
        {
          id v10 = v8;
          do
          {
            *(void *)id v10 = 0LL;
            *((_DWORD *)v10 + 2) = 0;
            v10 += 16;
          }

          while (v10 != &v8[16 * v6]);
        }

        __int16 v11 = *(uint64_t **)(v1 + 280);
        unint64_t v12 = v11[4];
        unint64_t v13 = v11[2];
        BOOL v14 = v12 >= v13;
        unint64_t v15 = v12 - v13;
        if (v14) {
          unint64_t v16 = v15;
        }
        else {
          unint64_t v16 = 0LL;
        }
        sub_10001E1A8(v22, v11, v16, v11[4]);
        uint64_t v17 = *(char **)v22;
        operator delete[](v9);
        if (v12 != v16)
        {
          if (v12 - v16 <= 1) {
            uint64_t v18 = 1LL;
          }
          else {
            uint64_t v18 = v12 - v16;
          }
          __int16 v19 = v17 + 8;
          do
          {
            unint64_t v20 = *((void *)v19 - 1);
            if (v20 > *(void *)(*(void *)(a1 + 32) + 376LL) && v20 <= v5) {
              *__int16 v19 = 0;
            }
            v19 += 4;
            --v18;
          }

          while (v18);
        }

        sub_10001E3C0(*(unint64_t **)(*(void *)(a1 + 32) + 280LL), v17, v12 - v16);
        if (v17) {
          operator delete[](v17);
        }
      }

      *(_BYTE *)(*(void *)(a1 + 32) + 392LL) = 0;
    }
  }

  else if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)float v22 = 136315138;
    *(void *)&v22[4] = "-[CSSmartSiriVolumeSentinel notifySiriSessionStateTTSOngoing:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s CSSmartSiriVolumeSentinel noiseBuffer not allocated",  v22,  0xCu);
  }

void sub_10001E18C(_Unwind_Exception *a1)
{
}

void sub_10001E1A8(void *a1, uint64_t *a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = a2[2];
  unint64_t v8 = a2[4];
  if (v8 >= v7) {
    unint64_t v9 = v8 - v7;
  }
  else {
    unint64_t v9 = 0LL;
  }
  if (v9 > a3 || a4 <= a3 || v8 < a4 || v8 <= a3 || v9 >= a4)
  {
    BOOL v14 = (os_log_s *)CSLogCategoryAudio;
    if (os_log_type_enabled(CSLogCategoryAudio, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 136316162;
      id v34 = "copySamples";
      __int16 v35 = 2050;
      unint64_t v36 = a3;
      __int16 v37 = 2050;
      unint64_t v38 = a4;
      __int16 v39 = 2050;
      unint64_t v40 = v9;
      __int16 v41 = 2050;
      unint64_t v42 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%s Invalid request: reqStartSample=%{public}lu, reqEndSample=%{public}lu, oldestSampleInBuffer: %{public}lu, lat estSampleInBuffer=%{public}lu",  buf,  0x34u);
    }

    *a1 = 0LL;
  }

  else
  {
    uint64_t v16 = *a2;
    unint64_t v31 = a4 - a3;
    unint64_t v17 = *a2 * (a4 - a3);
    if (v17 >> 60) {
      size_t v18 = -1LL;
    }
    else {
      size_t v18 = 16 * v17;
    }
    __dst = (char *)operator new[](v18);
    if (v17)
    {
      __int16 v19 = __dst;
      do
      {
        *(void *)__int16 v19 = 0LL;
        *((_DWORD *)v19 + 2) = 0;
        v19 += 16;
      }

      while (v19 != &__dst[16 * v17]);
    }

    *a1 = __dst;
    if (v16)
    {
      uint64_t v20 = 0LL;
      unint64_t v21 = a3 % v7;
      unint64_t v22 = a4 % v7;
      __int16 v23 = (const void **)a2[6];
      unint64_t v24 = v7 - a3 % v7;
      uint64_t v25 = 16 * a4 - 16 * a3;
      double v26 = __dst;
      do
      {
        id v27 = (char *)*v23;
        OSStatus v28 = (char *)*v23 + 16 * v21;
        if (v21 >= v22)
        {
          memcpy(v26, v28, 16 * v24);
          id v29 = &__dst[16 * v20 * v31 + 16 * v24];
          OSStatus v28 = v27;
          size_t v30 = 16 * (v31 - v24);
        }

        else
        {
          id v29 = v26;
          size_t v30 = 16 * v31;
        }

        memcpy(v29, v28, v30);
        ++v20;
        ++v23;
        v26 += v25;
        --v16;
      }

      while (v16);
    }
  }

unint64_t *sub_10001E3C0(unint64_t *result, char *__src, unint64_t a3)
{
  int v4 = result;
  unint64_t v5 = result[2];
  if (*result)
  {
    unint64_t v6 = 0LL;
    uint64_t v7 = 16 * a3;
    unint64_t v16 = a3 - v5;
    unint64_t v8 = __src;
    unint64_t v9 = &__src[16 * a3];
    do
    {
      unint64_t v10 = v4[3];
      __int16 v11 = *(char **)(v4[6] + 8 * v6);
      unint64_t v12 = a3 - (v5 - v10);
      if (a3 <= v5 - v10)
      {
        id result = (unint64_t *)memcpy(&v11[16 * v10], v8, 16 * a3);
        unint64_t v12 = v10 + a3;
      }

      else
      {
        if (a3 >= v5)
        {
          unint64_t v12 = (v10 + v16) % v5;
          memcpy(&v11[16 * v12], &v9[-16 * v5], 16 * (v5 - v12));
          size_t v14 = 16 * v12;
          unint64_t v13 = &__src[16 * v6 * a3 + 16 * v16 + 16 * (v5 - v12)];
        }

        else
        {
          memcpy(&v11[16 * v10], v8, 16 * (v5 - v10));
          unint64_t v13 = &v8[16 * v5 - 16 * v10];
          size_t v14 = 16 * v12;
        }

        id result = (unint64_t *)memcpy(v11, v13, v14);
      }

      ++v6;
      v9 += v7;
      v8 += v7;
    }

    while (v6 < *v4);
  }

  else
  {
    unint64_t v12 = result[3];
  }

  unint64_t v15 = v4[4] + a3;
  v4[3] = v12 % v5;
  v4[4] = v15;
  return result;
}

void sub_10001E514(uint64_t a1)
{
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithString:](&OBJC_CLASS___NSString, "stringWithString:", v2));

  *(void *)(*(void *)(a1 + 40) + 128LL) = 0LL;
  [*(id *)(a1 + 32) confidence];
  if (v4 <= *(double *)(*(void *)(a1 + 40) + 368LL))
  {
    unint64_t v5 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = [v3 UTF8String];
      [*(id *)(a1 + 32) confidence];
      int v12 = 136315650;
      unint64_t v13 = "-[CSSmartSiriVolumeSentinel request:didProduceResult:]_block_invoke";
      __int16 v14 = 2082;
      id v15 = v6;
      __int16 v16 = 2050;
      uint64_t v17 = v7;
      unint64_t v8 = "%s CSSmartSiriVolumeSentinel not predicting distance because voice classified as: %{public}s with confidence: %{public}f";
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v12, 0x20u);
    }
  }

  else
  {
    if ([v3 isEqualToString:@"near"])
    {
      *(void *)(*(void *)(a1 + 40) + 128LL) = 0LL;
    }

    else
    {
      else {
        uint64_t v9 = 2LL;
      }
      *(void *)(*(void *)(a1 + 40) + 128LL) = v9;
    }

    unint64_t v5 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [v3 UTF8String];
      [*(id *)(a1 + 32) confidence];
      int v12 = 136315650;
      unint64_t v13 = "-[CSSmartSiriVolumeSentinel request:didProduceResult:]_block_invoke";
      __int16 v14 = 2082;
      id v15 = v10;
      __int16 v16 = 2050;
      uint64_t v17 = v11;
      unint64_t v8 = "%s CSSmartSiriVolumeSentinel Voice Trigger classified as: %{public}s with confidence: %{public}f";
      goto LABEL_14;
    }
  }

  *(void *)(*(void *)(a1 + 40) + 96LL) = mach_absolute_time();
}

void sub_10001E740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001E774(uint64_t a1)
{
  float v3 = v2;
  double v4 = (os_log_s *)CSLogCategoryASV;
  if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 136315394;
    __int16 v14 = "-[CSSmartSiriVolumeSentinel getDistanceForLastVoiceTrigger]_block_invoke";
    __int16 v15 = 2050;
    double v16 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s CSSmartSiriVolumeContextAware speaker distance was updated: %{public}f seconds ago",  (uint8_t *)&v13,  0x16u);
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v3 >= *(float *)(v5 + 364))
  {
    uint64_t v11 = (os_log_s *)CSLogCategoryASV;
    if (!os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_INFO)) {
      return;
    }
    double v12 = *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    int v13 = 136315394;
    __int16 v14 = "-[CSSmartSiriVolumeSentinel getDistanceForLastVoiceTrigger]_block_invoke";
    __int16 v15 = 2050;
    double v16 = v12;
    unint64_t v8 = "%s CSSmartSiriVolumeContextAware Distance estimation did NOT complete on time. Using default distance: %{public}ld";
    uint64_t v9 = v11;
    os_log_type_t v10 = OS_LOG_TYPE_INFO;
  }

  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = *(void *)(v5 + 128);
    id v6 = (os_log_s *)CSLogCategoryASV;
    if (!os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    double v7 = *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    int v13 = 136315394;
    __int16 v14 = "-[CSSmartSiriVolumeSentinel getDistanceForLastVoiceTrigger]_block_invoke";
    __int16 v15 = 2050;
    double v16 = v7;
    unint64_t v8 = "%s CSSmartSiriVolumeContextAware predicted speaker distance: %{public}ld ";
    uint64_t v9 = v6;
    os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
  }

  _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v13, 0x16u);
}

void sub_10001E948()
{
}

void *sub_10001E95C(unint64_t a1)
{
  if (a1 >> 62) {
    sub_10001E990();
  }
  return operator new(4 * a1);
}

void sub_10001E990()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void sub_10001E9B8(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_10001EA08(exception, a1);
}

void sub_10001E9F4(_Unwind_Exception *a1)
{
}

std::logic_error *sub_10001EA08(std::logic_error *a1, const char *a2)
{
  id result = std::logic_error::logic_error(a1, a2);
  return result;
}

id sub_10001EA2C(uint64_t a1)
{
  float v2 = *(float **)(a1 + 32);
  float v3 = (float)*(unint64_t *)(a1 + 48);
  float v4 = v2[89];
  +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
  [v2 _updateSpeechStrengthForVoiceTriggerStartingAtSample:(unint64_t)(float)(v3 + (float)(v4 * v5)) andEndingAtSample:*(void *)(a1 + 56)];
  [*(id *)(a1 + 32) _updateNoiseActivityForVoiceTriggerStartingAtSample:*(void *)(a1 + 48)];
  id v6 = *(float **)(a1 + 32);
  float v7 = (float)*(unint64_t *)(a1 + 48);
  float v8 = v6[89];
  +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
  return [v6 _updateMusicStrengthForVoiceTriggerStartingAtSample:(unint64_t)(float)(v7 + (float)(v8 * v9)) andEndingAtSample:*(void *)(a1 + 56)];
}

void sub_10001EAC8(char **a1, unint64_t a2)
{
  float v3 = *a1;
  float v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    __int16 v19 = &v3[8 * a2];
    goto LABEL_15;
  }

  unint64_t v6 = a2 - v5;
  float v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    __int16 v19 = &v4[8 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }

  if (a2 >> 61) {
    sub_10001E948();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 <= a2) {
    uint64_t v9 = a2;
  }
  else {
    unint64_t v10 = v9;
  }
  uint64_t v11 = (char *)sub_10001EC7C(v10);
  double v12 = *a1;
  int v13 = a1[1];
  __int16 v14 = &v11[8 * v5];
  double v16 = &v11[8 * v15];
  bzero(v14, 8 * v6);
  uint64_t v17 = &v14[8 * v6];
  while (v13 != v12)
  {
    uint64_t v18 = *((void *)v13 - 1);
    v13 -= 8;
    *((void *)v14 - 1) = v18;
    v14 -= 8;
  }

  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12) {
    operator delete(v12);
  }
}

uint64_t sub_10001EBC8(uint64_t a1, float a2)
{
  *(void *)a1 = 1LL;
  *(float *)(a1 + _Block_object_dispose((const void *)(v31 - 160), 8) = a2;
  *(_DWORD *)(a1 + 12) = 1065353216;
  unint64_t v3 = (unint64_t)a2;
  else {
    size_t v4 = 16 * (unint64_t)a2;
  }
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 16) = v3;
  unint64_t v5 = (char *)operator new[](v4);
  unint64_t v6 = v5;
  if (v3)
  {
    float v7 = v5;
    do
    {
      *(void *)float v7 = 0LL;
      *((_DWORD *)v7 + 2) = 0;
      v7 += 16;
    }

    while (v7 != &v5[16 * v3]);
  }

  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v31 - 160), 8) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  uint64_t v8 = operator new(8uLL);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v31 - 160), 8) = v8;
  *v8++ = v6;
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v8;
  return a1;
}

void sub_10001EC64(_Unwind_Exception *a1)
{
  *(void *)(v1 + 40) = 0LL;
  operator delete[](v2);
  _Unwind_Resume(a1);
}

void *sub_10001EC7C(unint64_t a1)
{
  if (a1 >> 61) {
    sub_10001E990();
  }
  return operator new(8 * a1);
}

id sub_10001ECB0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reset];
}

id sub_10001ECFC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _resetDistance];
}

id sub_10001ED28(uint64_t a1)
{
  return [*(id *)(a1 + 32) resetParameters];
}

id sub_10001ED30(uint64_t a1)
{
  return [*(id *)(a1 + 32) resetDistanceParameters];
}

void sub_100020C5C(uint64_t a1)
{
  float v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) endpointerListener]);
  char v3 = objc_opt_respondsToSelector(v2, "notifyClientsWithBlock:");

  if ((v3 & 1) != 0)
  {
    size_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) endpointerListener]);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_100020D00;
    v5[3] = &unk_10022EEF0;
    v5[4] = *(void *)(a1 + 40);
    [v4 notifyClientsWithBlock:v5];
  }

id sub_100020D00(uint64_t a1, void *a2)
{
  return [a2 didDetectTwoShotAtTime:*(double *)(a1 + 32)];
}

void sub_100020D0C(uint64_t a1)
{
  uint64_t v1 = (os_log_s *)CSLogCategoryEP;
  if (*(void *)(*(void *)(a1 + 32) + 40LL))
  {
    if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 136315138;
      __int16 v14 = "-[CSAttSiriEndpointerNode _emitStoppedListeningForSpeechContinuationWithTrpId:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "%s Emitting StoppedListeningForSpeechContinuation Event",  (uint8_t *)&v13,  0xCu);
    }

    id v3 = objc_alloc_init(&OBJC_CLASS___MHSchemaMHStoppedListeningForSpeechContinuation);
    id v4 = objc_alloc(&OBJC_CLASS___SISchemaUUID);
    unint64_t v5 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", *(void *)(a1 + 40));
    id v6 = [v4 initWithNSUUID:v5];
    [v3 setTrpId:v6];

    id v7 = objc_alloc_init(&OBJC_CLASS___MHSchemaMHClientEvent);
    id v8 = objc_alloc_init(&OBJC_CLASS___MHSchemaMHClientEventMetadata);
    id v9 = objc_alloc(&OBJC_CLASS___SISchemaUUID);
    unint64_t v10 = -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  *(void *)(*(void *)(a1 + 32) + 40LL));
    id v11 = [v9 initWithNSUUID:v10];
    [v8 setMhId:v11];

    [v7 setEventMetadata:v8];
    [v7 setStoppedListeningForSpeechContinuation:v3];
    double v12 = (void *)objc_claimAutoreleasedReturnValue(+[AssistantSiriAnalytics sharedStream](&OBJC_CLASS___AssistantSiriAnalytics, "sharedStream"));
    [v12 emitMessage:v7];
  }

  else if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_ERROR))
  {
    int v13 = 136315138;
    __int16 v14 = "-[CSAttSiriEndpointerNode _emitStoppedListeningForSpeechContinuationWithTrpId:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_ERROR,  "%s MHID not set, skipping SELF Logging",  (uint8_t *)&v13,  0xCu);
  }

id sub_100020F2C(uint64_t a1, void *a2)
{
  return [a2 didDetectHardEndpointAtTime:*(void *)(a1 + 32) withMetrics:*(double *)(a1 + 40)];
}

void sub_100020F3C(uint64_t a1)
{
  float v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) endpointerListener]);
  char v3 = objc_opt_respondsToSelector(v2, "notifyClientsWithBlock:");

  if ((v3 & 1) != 0)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) endpointerListener]);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_1000210CC;
    v15[3] = &unk_10022EEF0;
    v15[4] = *(void *)(a1 + 40);
    [v4 notifyClientsWithBlock:v15];
  }

  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v5 attSiriNode:*(void *)(a1 + 32) didDetectStartpointAtTime:*(double *)(a1 + 40)];

  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "receivers", 0));
  id v7 = [v6 countByEnumeratingWithState:&v11 objects:v16 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      unint64_t v10 = 0LL;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(v6);
        }
        [*(id *)(*((void *)&v11 + 1) + 8 * (void)v10) attSiriNode:*(void *)(a1 + 32) didDetectStartpointAtTime:*(double *)(a1 + 40)];
        unint64_t v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v11 objects:v16 count:16];
    }

    while (v8);
  }
}

id sub_1000210CC(uint64_t a1, void *a2)
{
  return [a2 didDetectStartpointAtTime:*(double *)(a1 + 32)];
}

void sub_1000210D8(uint64_t a1)
{
  float v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) metricsCopyWithRequestId:*(void *)(*(void *)(a1 + 40) + 120) lastAudioChunkHostTime:*(void *)(*(void *)(a1 + 40) + 128)]);
  uint64_t v3 = *(void *)(a1 + 48);
  switch(v3)
  {
    case 2LL:
      id v4 = v2;
      [*(id *)(a1 + 40) _sendEndpointEventDelegateAtTime:2 eventType:v2 endpointerMetrics:*(double *)(a1 + 56)];
      [*(id *)(a1 + 40) _reportHardEndpointToXPCClientWithTime:v4 endpointerMetrics:*(double *)(a1 + 56)];
      [*(id *)(a1 + 40) _emitStoppedListeningForSpeechContinuationWithTrpId:0];
      goto LABEL_7;
    case 1LL:
      id v4 = v2;
      [*(id *)(a1 + 40) _sendEndpointEventDelegateAtTime:1 eventType:v2 endpointerMetrics:*(double *)(a1 + 56)];
      goto LABEL_7;
    case 0LL:
      id v4 = v2;
      [*(id *)(a1 + 40) _reportHardEndpointToXPCClientWithTime:v2 endpointerMetrics:*(double *)(a1 + 56)];
LABEL_7:
      float v2 = v4;
      break;
  }
}

id sub_100021198(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reportHardEndpointToXPCClientWithTime:*(void *)(a1 + 40) endpointerMetrics:*(double *)(a1 + 48)];
}

void sub_1000211A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 104);
  *(void *)(v2 + 104) = 0LL;
}

id sub_1000211DC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) wasBuffered];
  if ((result & 1) == 0)
  {
    uint64_t v3 = *(void **)(*(void *)(a1 + 40) + 104LL);
    id v4 = [*(id *)(a1 + 32) hostTime];
    id v5 = [*(id *)(a1 + 32) arrivalHostTimeToAudioRecorder];
    uint64_t v6 = mach_absolute_time();
    return [v3 addPktInfoWithTimestamp:v4 arrivalTimestamp:v5 currentMachTime:v6];
  }

  return result;
}

id sub_10002124C(uint64_t a1)
{
  id result = [*(id *)(a1 + 40) hostTime];
  *(void *)(*(void *)(a1 + 32) + 128LL) = result;
  return result;
}

void sub_100021278(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 112);
  *(void *)(v1 + 112) = 0LL;
}

void sub_100021288(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 128LL) = 0LL;
  id v2 = [*(id *)(a1 + 40) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 112);
  *(void *)(v3 + 112) = v2;

  uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) siriSessionUUID]);
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 120);
  *(void *)(v6 + 120) = v5;
}

void sub_1000212DC(uint64_t a1)
{
  id v2 = objc_alloc(&OBJC_CLASS___CSEndpointLatencyInfo);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestMHUUID]);
  id v4 = -[CSEndpointLatencyInfo initWithRequestMHUUID:](v2, "initWithRequestMHUUID:", v3);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 104);
  *(void *)(v5 + 104) = v4;

  if ([*(id *)(a1 + 48) isVoiceTriggered])
  {
    id v7 = *(void **)(a1 + 56);
    if (v7)
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:kVTEItriggerEndMachTime]);

      if (v8)
      {
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:kVTEItriggerFireMachTime]);
        id v10 = [v9 unsignedLongLongValue];

        uint64_t v11 = mach_absolute_time();
        float v12 = CSMachAbsoluteTimeGetTimeInterval(v11 - (void)v10) * 1000.0;
        __int128 v13 = (os_log_s *)CSLogCategoryEP;
        double v14 = v12;
        if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = 136315394;
          double v16 = "-[CSAttSiriEndpointerNode resetForNewRequestWithSampleRate:recordContext:recordOption:voiceTriggerInfo:]_block_invoke_2";
          __int16 v17 = 2050;
          double v18 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%s %{public}.2f ms after vtEnd",  (uint8_t *)&v15,  0x16u);
        }

        [*(id *)(*(void *)(a1 + 32) + 104) setFirstPktLatency:v14];
      }
    }
  }

void sub_10002146C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) receivers]);
  [v2 removeObject:*(void *)(a1 + 40)];

  uint64_t v3 = (os_log_s *)CSLogCategoryEP;
  if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 136315394;
    uint64_t v6 = "-[CSAttSiriEndpointerNode removeReceiver:]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s EndpointerNode removed receiver: %@",  (uint8_t *)&v5,  0x16u);
  }

void sub_100021540(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) receivers]);
  unsigned __int8 v3 = [v2 containsObject:*(void *)(a1 + 40)];

  if ((v3 & 1) == 0)
  {
    if ([*(id *)(a1 + 40) conformsToProtocol:&OBJC_PROTOCOL___CSAttSiriEndpointerNodeDelegate])
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) receivers]);
      [v4 addObject:*(void *)(a1 + 40)];

      int v5 = (os_log_s *)CSLogCategoryEP;
      if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)(a1 + 40);
        int v9 = 136315394;
        id v10 = "-[CSAttSiriEndpointerNode addReceiver:]_block_invoke";
        __int16 v11 = 2112;
        uint64_t v12 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s EndpointerNode added receiver: %@",  (uint8_t *)&v9,  0x16u);
      }
    }

    else
    {
      __int16 v7 = (os_log_s *)CSLogCategoryEP;
      if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = *(void *)(a1 + 40);
        int v9 = 136315394;
        id v10 = "-[CSAttSiriEndpointerNode addReceiver:]_block_invoke";
        __int16 v11 = 2112;
        uint64_t v12 = v8;
        _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Unsupported receiver: %@",  (uint8_t *)&v9,  0x16u);
      }
    }
  }

uint64_t sub_100021A3C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[CSOpportuneSpeakEventMonitor sharedInstance]( &OBJC_CLASS___CSOpportuneSpeakEventMonitor,  "sharedInstance"));
  unsigned __int8 v3 = [v2 isStreaming];

  int v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  BOOL v6 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v6)
  {
    int v7 = 136315138;
    uint64_t v8 = "-[CSVoiceTriggerHearstAPEnabledPolicy _addVoiceTriggerHearstAPEnabledPolicy]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger HearstAP cannot be turned on since OpportuneListener is not listening or no other streams active on DoAP route",  (uint8_t *)&v7,  0xCu);
    return 0LL;
  }

  return result;
}

BOOL sub_100021B30(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[CSOtherAppRecordingStateMonitor sharedInstance]( &OBJC_CLASS___CSOtherAppRecordingStateMonitor,  "sharedInstance"));
  unsigned int v2 = [v1 isOtherNonEligibleAppRecording];

  if (v2)
  {
    unsigned __int8 v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      BOOL v6 = "-[CSVoiceTriggerHearstAPEnabledPolicy _addVoiceTriggerHearstAPEnabledPolicy]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger HearstAP cannot be turned on since other non-eligible App is recording",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2 ^ 1;
}

BOOL sub_100021BFC(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[CSPhoneCallStateMonitorFactory phoneCallStateMonitor]( &OBJC_CLASS___CSPhoneCallStateMonitorFactory,  "phoneCallStateMonitor"));
  if ([v1 phoneCallState] == (id)2)
  {
    unsigned int v2 = +[CSUtils supportRingtoneA2DP](&OBJC_CLASS___CSUtils, "supportRingtoneA2DP");

    if (!v2) {
      goto LABEL_11;
    }
  }

  else
  {
    unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue(+[CSMXRingtoneMonitor sharedInstance](&OBJC_CLASS___CSMXRingtoneMonitor, "sharedInstance"));
    if ([v3 isAnyRingtoneCurrentlyPlaying])
    {
      unsigned __int8 v4 = +[CSUtils supportRingtoneA2DP](&OBJC_CLASS___CSUtils, "supportRingtoneA2DP");

      if ((v4 & 1) == 0) {
        goto LABEL_11;
      }
    }

    else
    {
    }
  }

  int v5 = (void *)objc_claimAutoreleasedReturnValue( +[CSPhoneCallStateMonitorFactory phoneCallStateMonitor]( &OBJC_CLASS___CSPhoneCallStateMonitorFactory,  "phoneCallStateMonitor"));
  if ([v5 phoneCallState] == (id)3)
  {
  }

  else
  {
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue( +[CSPhoneCallStateMonitorFactory phoneCallStateMonitor]( &OBJC_CLASS___CSPhoneCallStateMonitorFactory,  "phoneCallStateMonitor"));
    id v7 = [v6 phoneCallState];

    if (v7 != (id)4) {
      return 1;
    }
  }

LABEL_11:
  uint64_t v8 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  BOOL v9 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
  BOOL result = 0;
  if (v9)
  {
    int v11 = 136315138;
    uint64_t v12 = "-[CSVoiceTriggerHearstAPEnabledPolicy _addVoiceTriggerHearstAPEnabledPolicy]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger HearstAP cannot be turned on since we are inside of an invalid phone call state.",  (uint8_t *)&v11,  0xCu);
    return 0;
  }

  return result;
}
}
}
}

    LODWORD(v5) = *(_DWORD *)(a1 + 80);
    [*(id *)(a1 + 40) _startActivationAtHostTime:*(void *)(a1 + 56) sampleCount:*(void *)(a1 + 48) amountOfSpeechInMs:v5];
    return;
  }

  if (v18)
  {
    unint64_t v21 = *(void *)(a1 + 48);
    unint64_t v22 = *(void *)(a1 + 72);
    __int16 v23 = 136316674;
    unint64_t v24 = "-[CSAttendingSpeechDetectionController attSiriSignalProvider:silenceFramesCountMs:silenceProbability:silenceDu"
          "rationMs:processedAudioMs:deviceHasBoronEnabled:latestBoronActiveSampleCount:]_block_invoke";
    uint64_t v25 = 2048;
    double v26 = v21;
    id v27 = 2048;
    OSStatus v28 = v8;
    id v29 = 2048;
    size_t v30 = v22;
    unint64_t v31 = 2048;
    __int16 v32 = v10;
    id v33 = 2048;
    id v34 = v11;
    __int16 v35 = 2048;
    unint64_t v36 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%s #Boron check FAIL. StartSampleCount: %llu. PrependSamples: %llu. LatestBoronSampleCount: %lld. LastAudioSampleC ount: %lld. Diff: %lld Thresh: %lld",  (uint8_t *)&v23,  0x48u);
  }
}
}

  AOPVTTriggerLength = self->_timeBasedEstimatedTriggerLength;
LABEL_12:
  id v29 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"trigger-config-blob"]);

  if (v29)
  {
    size_t v30 = objc_alloc(&OBJC_CLASS___CSKeywordAnalyzerNDEAPIResult);
    unint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"trigger-config-blob"]);
    uint64_t v25 = -[CSKeywordAnalyzerNDEAPIResult initWithBlob:isEarlyDetected:](v30, "initWithBlob:isEarlyDetected:", v31, 0LL);

    +[CSFTimeUtils hostTimeToSeconds:]( &OBJC_CLASS___CSFTimeUtils,  "hostTimeToSeconds:",  mach_absolute_time() - (void)v16);
    id v33 = v32;
    id v34 = -[os_log_s samplesFed](v25, "samplesFed");
    __int16 v35 = (float)(unint64_t)(v34 - (_BYTE *)-[os_log_s bestStart](v25, "bestStart"));
    +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
    __int16 v37 = v33 - (float)(v35 / v36);
    double v14 = &AFBTProductIDSupportsAnnounce_ptr;
    double v26 = (void *)objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerStatAggregator sharedAggregator]( &OBJC_CLASS___CSVoiceTriggerStatAggregator,  "sharedAggregator"));
    *(float *)&unint64_t v38 = v37;
    [v26 logAOPFirstPassTriggerWakeupLatency:v38];
LABEL_14:

    goto LABEL_16;
  }

  double v14 = &AFBTProductIDSupportsAnnounce_ptr;
LABEL_16:
  __int16 v39 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"trigger-length"]);

  if (v39)
  {
    unint64_t v40 = (id)objc_claimAutoreleasedReturnValue([v14[340] sharedAggregator]);
    [v40 logTimeBasedTriggerLengthSampleCountStatistics:self->_timeBasedEstimatedTriggerLength withAOPVTTriggerLengthSampleCount:self->_AOPVTTriggerLength];
LABEL_18:

    goto LABEL_20;
  }

  unint64_t v42 = (void *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
  {
    unint64_t v40 = v42;
    v46 = (void *)objc_claimAutoreleasedReturnValue(-[CSVoiceTriggerSecondPass UUID](self, "UUID"));
    uint64_t v47 = 136315394;
    v48 = "-[CSVoiceTriggerSecondPass _calculateRecordingTimeForAOPTriggerFromFirstPassInfo:completion:]";
    v49 = 2114;
    __int16 v50 = v46;
    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v40,  OS_LOG_TYPE_ERROR,  "%s CSVoiceTriggerSecondPass[%{public}@]:Failed to get AOP trigger-length",  (uint8_t *)&v47,  0x16u);

    goto LABEL_18;
  }

  self->_shouldRefreshScores = v11;
}

    uint64_t v20 = 0;
    goto LABEL_12;
  }

  -[NSXPCListener setExportedInterface:](v7, "setExportedInterface:", self->_exportedInterface);
  -[NSXPCListener setRemoteObjectInterface:](v7, "setRemoteObjectInterface:", self->_remoteInterface);
  __int128 v13 = objc_alloc(&OBJC_CLASS___CSAttendingUsecaseProxy);
  id WeakRetained = objc_loadWeakRetained((id *)&self->_attendingUsecaseManager);
  int v15 = objc_loadWeakRetained((id *)&self->_attendingStatesProvidingProxy);
  double v16 = -[CSAttendingUsecaseProxy initWithConnection:usecaseManager:attendingStatesProvidingProxy:]( v13,  "initWithConnection:usecaseManager:attendingStatesProvidingProxy:",  v7,  WeakRetained,  v15);

  __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(-[NSXPCListener remoteObjectProxy](v7, "remoteObjectProxy"));
  -[CSAttendingUsecaseProxy setupListenerDelegate:](v16, "setupListenerDelegate:", v17);

  -[NSXPCListener setExportedObject:](v7, "setExportedObject:", v16);
  objc_initWeak((id *)buf, v16);
  objc_initWeak(&location, self);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  v25[2] = sub_1000FCC24;
  v25[3] = &unk_10022DF50;
  objc_copyWeak(&v26, (id *)buf);
  objc_copyWeak(&v27, &location);
  -[CSAttendingUsecaseProxy setupConnectionErrorHandler:](v16, "setupConnectionErrorHandler:", v25);
  double v18 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(-[CSAttendingServiceListener queue](self, "queue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000FCCCC;
  block[3] = &unk_10022EFD0;
  void block[4] = self;
  __int16 v19 = v16;
  unint64_t v24 = v19;
  dispatch_async(v18, block);

  -[NSXPCListener resume](v7, "resume");
  objc_destroyWeak(&v27);
  objc_destroyWeak(&v26);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)buf);

  uint64_t v20 = 1;
LABEL_12:

  return v20;
}

    __int16 v19 = 0;
    goto LABEL_12;
  }

  XPCInterface = LBAttendingStatesServiceGetXPCInterface();
  double v14 = (void *)objc_claimAutoreleasedReturnValue(XPCInterface);
  -[NSXPCListener setExportedInterface:](v7, "setExportedInterface:", v14);

  int v15 = LBAttendingStatesServiceDelegateGetXPCInterface();
  double v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  -[NSXPCListener setRemoteObjectInterface:](v7, "setRemoteObjectInterface:", v16);

  queue = (dispatch_queue_s *)self->_queue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100103294;
  block[3] = &unk_10022EFD0;
  double v18 = v7;
  size_t v30 = v18;
  unint64_t v31 = self;
  dispatch_sync(queue, block);
  objc_initWeak((id *)buf, self);
  objc_initWeak(&location, v18);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  v25[2] = sub_100103360;
  v25[3] = &unk_10022DF50;
  objc_copyWeak(&v26, (id *)buf);
  objc_copyWeak(&v27, &location);
  -[NSXPCListener setInterruptionHandler:](v18, "setInterruptionHandler:", v25);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_1001034FC;
  v22[3] = &unk_10022DF50;
  objc_copyWeak(&v23, (id *)buf);
  objc_copyWeak(&v24, &location);
  -[NSXPCListener setInvalidationHandler:](v18, "setInvalidationHandler:", v22);
  -[NSXPCListener resume](v18, "resume");
  objc_destroyWeak(&v24);
  objc_destroyWeak(&v23);
  objc_destroyWeak(&v27);
  objc_destroyWeak(&v26);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)buf);

  __int16 v19 = 1;
LABEL_12:

  return v19;
}

  self = self;
  __int16 v19 = self;
LABEL_15:

  return v19;
}

    double v16 = 0;
    goto LABEL_12;
  }

  [v7 setExportedInterface:self->_exportedInterface];
  [v7 setExportedObject:self->_proxyObject];
  [v7 setRemoteObjectInterface:self->_remoteInterface];
  objc_initWeak((id *)buf, self);
  objc_initWeak(&location, v7);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_1001289D0;
  v23[3] = &unk_10022DF50;
  objc_copyWeak(&v24, (id *)buf);
  objc_copyWeak(&v25, &location);
  [v7 setInterruptionHandler:v23];
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_100128B60;
  v20[3] = &unk_10022DF50;
  objc_copyWeak(&v21, (id *)buf);
  objc_copyWeak(&v22, &location);
  [v7 setInvalidationHandler:v20];
  int v15 = (void *)objc_claimAutoreleasedReturnValue(-[CSConnectionListener clientConnections](self, "clientConnections"));
  [v15 addObject:v7];

  [v7 resume];
  objc_destroyWeak(&v22);
  objc_destroyWeak(&v21);
  objc_destroyWeak(&v25);
  objc_destroyWeak(&v24);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)buf);
  double v16 = 1;
LABEL_12:

  return v16;
}

        return;
      }
    }

    int v15 = 0LL;
    BOOL v9 = [@"KeepAlive" writeToFile:v3 atomically:0 encoding:4 error:&v15];
    uint64_t v8 = v15;
    id v10 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (v9)
    {
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        double v18 = "-[CSCoreSpeechDKeepAliveHandler _enableCoreSpeechDaemonKeepAlive]";
        __int16 v19 = 2112;
        uint64_t v20 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s Successfully make CoreSpeechDaemon as KeepAlive, created keepAlive file at %@",  buf,  0x16u);
      }

      goto LABEL_11;
    }

    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v11 = v10;
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v8 localizedDescription]);
      __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v8 localizedRecoverySuggestion]);
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      double v18 = "-[CSCoreSpeechDKeepAliveHandler _enableCoreSpeechDaemonKeepAlive]";
      __int16 v19 = 2114;
      uint64_t v20 = v3;
      unint64_t v21 = 2114;
      unint64_t v22 = v12;
      __int16 v23 = 2114;
      unint64_t v24 = v13;
      _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%s Failed to make CoreSpeechDaemon as KeepAlive : Cannot create file at %{public}@, error : %{public}@, %{public}@",  buf,  0x2Au);

LABEL_14:
      goto LABEL_11;
    }

    goto LABEL_11;
  }

    return 1LL;
  }

  if ([v9 isBuiltInVoiceTriggered])
  {
    int v15 = (void *)objc_claimAutoreleasedReturnValue(+[AVAudioSession sharedInstance](&OBJC_CLASS___AVAudioSession, "sharedInstance"));
    double v16 = (void *)objc_claimAutoreleasedReturnValue([v15 pickedRoute]);

    __int16 v17 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = 136315394;
      double v26 = "-[CSVoiceTriggerAPModeSuspendPolicyIOS _addConditionsForIOSBargeIn]_block_invoke";
      id v27 = 2114;
      OSStatus v28 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%s hypotheticalRoute = %{public}@",  (uint8_t *)&v25,  0x16u);
    }

    if (v16)
    {
      double v18 = objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:@"BTDetails_IsHFPRoute"]);
      if (v18)
      {
        __int16 v19 = (void *)v18;
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:@"BTDetails_IsHFPRoute"]);
        unint64_t v21 = [v20 BOOLValue];

        if (v21)
        {
          unint64_t v22 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v25 = 136315138;
            double v26 = "-[CSVoiceTriggerAPModeSuspendPolicyIOS _addConditionsForIOSBargeIn]_block_invoke";
            _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "%s Audio route changing to HFP is expected",  (uint8_t *)&v25,  0xCu);
          }

          goto LABEL_11;
        }
      }
    }
  }

  __int16 v23 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  unint64_t v24 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
  BOOL result = 0LL;
  if (v24)
  {
    uint64_t v25 = 136315138;
    double v26 = "-[CSVoiceTriggerAPModeSuspendPolicyIOS _addConditionsForIOSBargeIn]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger AOP mode cannot be turned on since Siri client is recording",  (uint8_t *)&v25,  0xCu);
    return 0LL;
  }

  return result;
}

BOOL sub_100021D88(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerEnabledMonitor sharedInstance]( &OBJC_CLASS___CSVoiceTriggerEnabledMonitor,  "sharedInstance"));
  unsigned __int8 v2 = [v1 isEnabled];

  if ((v2 & 1) == 0)
  {
    unsigned __int8 v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      BOOL v6 = "-[CSVoiceTriggerHearstAPEnabledPolicy _addVoiceTriggerHearstAPEnabledPolicy]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger HearstAP cannot be turned on since VoiceTrigger is disabled",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

void sub_100021E94(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSVoiceTriggerHearstAPEnabledPolicy);
  unsigned __int8 v2 = (void *)qword_10027FC88;
  qword_10027FC88 = (uint64_t)v1;
}

BOOL sub_100021FA0(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSAudioSessionMonitor sharedInstance](&OBJC_CLASS___CSAudioSessionMonitor, "sharedInstance"));
  id v2 = [v1 getAudioSessionState];

  if (v2 == (id)1)
  {
    unsigned __int8 v3 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      BOOL v6 = "-[CSSmartSiriVolumeEnablePolicy _addSmartSiriVolumeEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolume cannot be resumed since Siri is speaking",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2 != (id)1;
}

LABEL_23:
    goto LABEL_24;
  }

  unint64_t v36 = 0LL;
  id v29 = -[SSRSpeakerRecognitionController initWithContext:withDelegate:error:]( objc_alloc(&OBJC_CLASS___SSRSpeakerRecognitionController),  "initWithContext:withDelegate:error:",  v26,  self,  &v36);
  OSStatus v28 = v36;
  ssrController = self->_ssrController;
  self->_ssrController = v29;

  if (!self->_ssrController || v28)
  {
    unint64_t v31 = (void *)CSLogCategorySpkrId;
    if (os_log_type_enabled(CSLogCategorySpkrId, OS_LOG_TYPE_ERROR))
    {
      __int16 v32 = v31;
      id v33 = (__CFString *)objc_claimAutoreleasedReturnValue([v28 localizedDescription]);
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      __int16 v41 = "-[CSAttSiriSSRNode _setupSpeakerRecognitionForProfiles:WithVTEventInfo:WithLocale:]";
      unint64_t v42 = 2112;
      id v43 = v33;
      id v34 = "%s ERR: Failed to create SSR controller with error %@";
LABEL_26:
      _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, v34, buf, 0x16u);

      goto LABEL_23;
    }

    goto LABEL_23;
  }
}

  __int16 v23 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
  if (([v23 useSiriActivationSPIForHomePod] & 1) == 0)
  {
    unint64_t v24 = +[CSUtils isLocalVoiceTriggerAvailable]( &OBJC_CLASS___CSUtils,  "isLocalVoiceTriggerAvailable");

    if ((v24 & 1) != 0) {
      goto LABEL_26;
    }
    notify_post("com.apple.voicetrigger.EarlyDetect");
    OSStatus v28 = (void *)CSLogCategoryVT;
    if (!os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_36;
    }
    unint64_t v22 = v28;
    id v29 = (void *)objc_claimAutoreleasedReturnValue(-[CSVoiceTriggerSecondPass UUID](self, "UUID"));
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    v49 = "-[CSVoiceTriggerSecondPass _voiceTriggerFirstPassDidDetectKeywordFrom:completion:]";
    __int16 v50 = 2114;
    double v51 = (unint64_t)v29;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v22,  OS_LOG_TYPE_DEFAULT,  "%s CSVoiceTriggerSecondPass[%{public}@]:Use legacy early detection notification",  buf,  0x16u);

    goto LABEL_35;
  }

LABEL_26:
  uint64_t v25 = -[CSVoiceTriggerSecondPass _isFirstPassSourceExclave:](self, "_isFirstPassSourceExclave:", v8);
  double v26 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriLauncher sharedLauncher](&OBJC_CLASS___CSSiriLauncher, "sharedLauncher"));
  id v27 = v26;
  if (v25) {
    [v26 notifyBuiltInVoiceTriggerPrewarmExclave:v11 completion:0];
  }
  else {
    [v26 notifyBuiltInVoiceTriggerPrewarm:v11 completion:0];
  }

LABEL_36:
  queue = (dispatch_queue_s *)self->_queue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000A28D4;
  block[3] = &unk_10022BF78;
  void block[4] = self;
  __int16 v39 = v11;
  id v43 = v7;
  v44 = v8;
  unint64_t v40 = v6;
  __int16 v41 = v9;
  uint64_t v45 = v37;
  unint64_t v42 = v10;
  unint64_t v31 = v10;
  __int16 v32 = v9;
  id v33 = v7;
  id v34 = v6;
  __int16 v35 = v11;
  dispatch_async(queue, block);
  unint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(+[CSVoiceTriggerStatistics sharedInstance](&OBJC_CLASS___CSVoiceTriggerStatistics, "sharedInstance"));
  [v36 incrementFirstPassTriggerCount];
}

  __int16 v32 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    id v33 = v32;
    id v34 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"CSP2P_VoiceProfileData_Key"]);
    __int16 v35 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue( [v9 objectForKeyedSubscript:@"CSP2P_VoiceProfileFileName_Key"]);
    unint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"CSP2P_VoiceProfileSpeakerName_Key"]);
    __int16 v37 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"CSP2P_VoiceProfileLocale_Key"]);
    unint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"CSP2P_VoiceProfileDataType_Key"]);
    __int16 v39 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"CSP2P_VoiceProfileTotalSegments_Key"]);
    unint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"CSP2P_VoiceProfileSegment_Key"]);
    *(_DWORD *)AudioTimeStamp buf = 136316930;
    *(void *)&uint8_t buf[4] = "-[CSP2PService _receiveVoiceProfileFromPeerId:voiceProfileInfo:withReply:]";
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v34;
    *(_WORD *)&buf[22] = 2112;
    v131 = v35;
    *(_WORD *)v132 = 2112;
    *(void *)&v132[2] = v36;
    *(_WORD *)&v132[10] = 2112;
    *(void *)&v132[12] = v37;
    v133 = 2112;
    v134 = v38;
    v135 = 2112;
    v136 = v39;
    v137 = 2112;
    v138 = v40;
    _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "%s CSP2P_VoiceProfileTransferCmd: received malformed command: CSP2P_VoiceProfileData_Key: %@CSP2P_VoiceProfileFile Name_Key: %@CSP2P_VoiceProfileSpeakerName_Key: %@CSP2P_VoiceProfileLocale_Key: %@CSP2P_VoiceProfileDataType_Key: % @CSP2P_VoiceProfileTotalSegments_Key: %@CSP2P_VoiceProfileSegment_Key: %@",  buf,  0x52u);
  }

  if (v10)
  {
LABEL_26:
    __int16 v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"CoreSpeech",  3LL,  0LL));
    (*((void (**)(id, void, void *))v10 + 2))(v10, 0LL, v41);
LABEL_27:
  }

          goto LABEL_24;
        }

        *(_DWORD *)__int16 v32 = 136315394;
        *(void *)&v32[4] = "-[CSP2PService _processFetchVoiceProfileCommandFromPeerId:requestInfo:withReply:]";
        *(_WORD *)&v32[12] = 2112;
        *(void *)&v32[14] = v9;
        id v27 = "%s ERR: received malformed command with profileId nil - %@";
      }

      else
      {
        double v26 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR)) {
          goto LABEL_31;
        }
        *(_DWORD *)__int16 v32 = 136315394;
        *(void *)&v32[4] = "-[CSP2PService _processFetchVoiceProfileCommandFromPeerId:requestInfo:withReply:]";
        *(_WORD *)&v32[12] = 2112;
        *(void *)&v32[14] = v9;
        id v27 = "%s ERR: received malformed command with locale nil - %@";
      }

      _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, v27, v32, 0x16u);
      if (!v10) {
        goto LABEL_23;
      }
      goto LABEL_32;
    }

    unint64_t v24 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      size_t v30 = v24;
      unint64_t v31 = objc_retainBlock(v10);
      *(_DWORD *)__int16 v32 = 136315906;
      *(void *)&v32[4] = "-[CSP2PService _processFetchVoiceProfileCommandFromPeerId:requestInfo:withReply:]";
      *(_WORD *)&v32[12] = 2112;
      *(void *)&v32[14] = v8;
      *(_WORD *)&v32[22] = 2112;
      id v33 = v31;
      id v34 = 2112;
      __int16 v35 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "%s ERR: unknown IDS peer with passed Identifier %@, %@ %@",  v32,  0x2Au);

      if (v10) {
        goto LABEL_27;
      }
    }

    else if (v10)
    {
LABEL_27:
      uint64_t v25 = 2LL;
LABEL_33:
      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"CoreSpeech",  v25,  0LL,  *(_OWORD *)v32,  *(void *)&v32[16]));
      v10[2](v10, 0LL, v17);
LABEL_40:

      goto LABEL_23;
    }

    double v14 = 0LL;
    goto LABEL_23;
  }

  __int16 v23 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int16 v32 = 136315650;
    *(void *)&v32[4] = "-[CSP2PService _processFetchVoiceProfileCommandFromPeerId:requestInfo:withReply:]";
    *(_WORD *)&v32[12] = 2112;
    *(void *)&v32[14] = v8;
    *(_WORD *)&v32[22] = 2112;
    id v33 = v9;
    _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "%s ERR: received malformed command - %@ %@",  v32,  0x20u);
    if (!v10) {
      goto LABEL_24;
    }
    goto LABEL_21;
  }

  if (v10)
  {
LABEL_21:
    unint64_t v21 = 3LL;
    goto LABEL_22;
  }

LABEL_24:
}
}
}

LABEL_25:
  if ([v12 isSecondChanceCandidate]) {
    __int16 v37 = -[CSVoiceTriggerSecondChanceContext initWithWindowStartTime:]( objc_alloc(&OBJC_CLASS___CSVoiceTriggerSecondChanceContext),  "initWithWindowStartTime:",  mach_absolute_time());
  }
  else {
    __int16 v37 = 0LL;
  }
  [v13 setSecondChanceContext:v37];
  queue = (dispatch_queue_s *)self->_queue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10011D344;
  block[3] = &unk_10022DD28;
  void block[4] = self;
  uint64_t v45 = v14;
  v46 = v13;
  uint64_t v47 = v17;
  v48 = v43;
  dispatch_async(queue, block);
  if (v16) {
    v16[2](v16, 1LL, 0LL);
  }

LABEL_31:
}

void sub_1000246C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id location)
{
}

uint64_t sub_1000253C0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000253D0(uint64_t a1)
{
}

void sub_1000253D8(uint64_t a1)
{
}

void sub_1000253EC(uint64_t a1)
{
  id v2 = *(id **)(a1 + 32);
  id v5 = (id)objc_claimAutoreleasedReturnValue([v2[15] configVersion]);
  LODWORD(v3) = *(_DWORD *)(a1 + 48);
  LODWORD(v4) = 0;
  [v2 _logSpeakerFalseTriggerMitigationScore:v5 withSpeakerMatchScore:1 withSpeakerScoreThreshold:v3 withAudioDuration:v4 withSuccess:*(double *)(a1 + 40)];
}

void sub_100025444(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataForChannel:0]);
  id v2 = v5;
  if (+[CSConfig inputRecordingIsFloat](&OBJC_CLASS___CSConfig, "inputRecordingIsFloat"))
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue( +[CSFLPCMTypeConverter convertToShortLPCMBufFromFloatLPCMBuf:]( &OBJC_CLASS___CSFLPCMTypeConverter,  "convertToShortLPCMBufFromFloatLPCMBuf:",  v5));
  }

  objc_msgSend( *(id *)(*(void *)(a1 + 40) + 72),  "processAudio:withNumberOfSamples:",  v2,  objc_msgSend(*(id *)(a1 + 32), "numSamples"));
  double v3 = *(void **)(*(void *)(a1 + 40) + 104LL);
  id v4 = v2;
  objc_msgSend(v3, "addSamples:numSamples:", objc_msgSend(v4, "bytes"), objc_msgSend(*(id *)(a1 + 32), "numSamples"));
}

id sub_100025514(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategorySpkrId;
  if (os_log_type_enabled(CSLogCategorySpkrId, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    id v5 = "-[CSAttSiriSSRNode attSiriAudioSrcNodeDidStop:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  return [*(id *)(a1 + 32) _stopProcessing];
}

void sub_1000255C4(void *a1)
{
  id v2 = (void *)a1[4];
  double v3 = (void *)a1[5];
  int v4 = (void *)v2[9];
  if (v4 == v3)
  {
    if (v2[7])
    {
      uint64_t v6 = objc_claimAutoreleasedReturnValue([v2 _processSpeakerRecognitionResult:a1[6]]);
      uint64_t v7 = a1[4];
      uint64_t v8 = *(void **)(v7 + 168);
      *(void *)(v7 + 16_Block_object_dispose((const void *)(v31 - 160), 8) = v6;

      BOOL v9 = *(void **)(a1[4] + 168LL);
      if (v9)
      {
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"userIdentityClassification"]);
        unsigned int v11 = [v10 unsignedIntValue];

        uint64_t v12 = (void *)CSLogCategorySpkrId;
        if (os_log_type_enabled(CSLogCategorySpkrId, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v13 = v11;
          double v14 = v12;
          int v15 = (void *)objc_claimAutoreleasedReturnValue( +[CSUserIdentityClassifier stringFromClassificationCategory:]( &OBJC_CLASS___CSUserIdentityClassifier,  "stringFromClassificationCategory:",  v13));
          double v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 168) objectForKeyedSubscript:@"userClassified"]);
          __int16 v17 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 168) objectForKeyedSubscript:kSSRSpeakerRecognitionKnownUserScoresKey]);
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          unint64_t v38 = "-[CSAttSiriSSRNode speakerRecognitionFinishedProcessing:withFinalSpeakerInfo:]_block_invoke";
          __int16 v39 = 2114;
          unint64_t v40 = v15;
          __int16 v41 = 2114;
          unint64_t v42 = v16;
          __int16 v43 = 2114;
          v44 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%s UserClassification: %{public}@ UserIdentified: %{public}@ Scores: %{public}@",  buf,  0x2Au);
        }

        if ((objc_opt_respondsToSelector(*(void *)(a1[4] + 56LL), "notifyClientsWithBlock:") & 1) != 0)
        {
          id v18 = [*(id *)(a1[4] + 168) copy];
          __int16 v19 = *(void **)(a1[4] + 56LL);
          v34[0] = _NSConcreteStackBlock;
          v34[1] = 3221225472LL;
          v34[2] = sub_100025988;
          v34[3] = &unk_10022EED0;
          id v35 = v18;
          id v20 = v18;
          [v19 notifyClientsWithBlock:v34];
        }

        else
        {
          unint64_t v21 = (os_log_s *)CSLogCategorySpkrId;
          if (os_log_type_enabled(CSLogCategorySpkrId, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315138;
            unint64_t v38 = "-[CSAttSiriSSRNode speakerRecognitionFinishedProcessing:withFinalSpeakerInfo:]_block_invoke";
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "%s ERR: Discarded reporting final ScoreCard!!",  buf,  0xCu);
          }
        }
      }
    }

    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    id v22 = *(id *)(a1[4] + 176LL);
    id v23 = [v22 countByEnumeratingWithState:&v30 objects:v36 count:16];
    if (v23)
    {
      id v24 = v23;
      uint64_t v25 = *(void *)v31;
      do
      {
        for (uint64_t i = 0LL; i != v24; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v31 != v25) {
            objc_enumerationMutation(v22);
          }
          id v27 = *(void **)(*((void *)&v30 + 1) + 8LL * (void)i);
          if ((objc_opt_respondsToSelector(v27, "attSiriNode:ssrFinishedProcessingWithSpeakerInfo:") & 1) != 0) {
            objc_msgSend( v27,  "attSiriNode:ssrFinishedProcessingWithSpeakerInfo:",  a1[4],  *(void *)(a1[4] + 168),  (void)v30);
          }
        }

        id v24 = [v22 countByEnumeratingWithState:&v30 objects:v36 count:16];
      }

      while (v24);
    }

    uint64_t v28 = a1[4];
    id v29 = *(void **)(v28 + 136);
    *(void *)(v28 + 136) = 0LL;
  }

  else
  {
    id v5 = (os_log_s *)CSLogCategorySpkrId;
    if (os_log_type_enabled(CSLogCategorySpkrId, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      unint64_t v38 = "-[CSAttSiriSSRNode speakerRecognitionFinishedProcessing:withFinalSpeakerInfo:]_block_invoke";
      __int16 v39 = 2114;
      unint64_t v40 = v4;
      __int16 v41 = 2114;
      unint64_t v42 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s SpeakerIdInfo from incorrect SpeakerRecognizer: expected: %{public}@, spkrRecognizer: %{public}@",  buf,  0x20u);
    }
  }

void sub_100025988(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (os_log_s *)CSLogCategorySpkrId;
  if (os_log_type_enabled(CSLogCategorySpkrId, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 136315394;
    uint64_t v7 = "-[CSAttSiriSSRNode speakerRecognitionFinishedProcessing:withFinalSpeakerInfo:]_block_invoke";
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s _speakerRecognitionScores:%@",  (uint8_t *)&v6,  0x16u);
  }

  [v3 didFinishSpeakerRecognition:*(void *)(a1 + 32)];
}

id sub_100025A60(uint64_t a1)
{
  return [*(id *)(a1 + 32) _refreshSpeakerRecognitionAssets];
}

void sub_100025A68(void *a1)
{
  id v2 = (void *)a1[4];
  id v3 = (void *)a1[5];
  int v4 = (void *)v2[9];
  if (v4 == v3)
  {
    if (v2[7] || CSIsCommunalDevice() && (id v2 = (void *)a1[4], v2[8]))
    {
      uint64_t v6 = objc_claimAutoreleasedReturnValue([v2 _processSpeakerRecognitionResult:a1[6]]);
      uint64_t v7 = a1[4];
      __int16 v8 = *(void **)(v7 + 168);
      *(void *)(v7 + 16_Block_object_dispose((const void *)(v31 - 160), 8) = v6;

      uint64_t v9 = *(void **)(a1[4] + 168LL);
      if (v9)
      {
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"userIdentityClassification"]);
        unsigned int v11 = [v10 unsignedIntValue];

        uint64_t v12 = (void *)CSLogCategorySpkrId;
        if (os_log_type_enabled(CSLogCategorySpkrId, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v13 = v11;
          double v14 = v12;
          int v15 = (void *)objc_claimAutoreleasedReturnValue( +[CSUserIdentityClassifier stringFromClassificationCategory:]( &OBJC_CLASS___CSUserIdentityClassifier,  "stringFromClassificationCategory:",  v13));
          double v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 168) objectForKeyedSubscript:@"userClassified"]);
          __int16 v17 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 168) objectForKeyedSubscript:kSSRSpeakerRecognitionKnownUserScoresKey]);
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          v46 = "-[CSAttSiriSSRNode speakerRecognitionController:hasSpeakerInfo:]_block_invoke";
          __int16 v47 = 2114;
          id v48 = v15;
          __int16 v49 = 2114;
          __int16 v50 = v16;
          __int16 v51 = 2114;
          __int16 v52 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%s UserClassification: %{public}@ UserIdentified: %{public}@ Scores: %{public}@",  buf,  0x2Au);
        }

        if ((objc_opt_respondsToSelector(*(void *)(a1[4] + 56LL), "notifyClientsWithBlock:") & 1) != 0)
        {
          id v18 = [*(id *)(a1[4] + 168) copy];
          __int16 v19 = *(void **)(a1[4] + 56LL);
          v42[0] = _NSConcreteStackBlock;
          v42[1] = 3221225472LL;
          v42[2] = sub_100025F88;
          v42[3] = &unk_10022EED0;
          id v43 = v18;
          id v20 = v18;
          [v19 notifyClientsWithBlock:v42];
        }

        if (CSIsCommunalDevice()
          && (objc_opt_respondsToSelector(*(void *)(a1[4] + 64LL), "notifyClientsWithBlock:") & 1) != 0)
        {
          id v21 = [*(id *)(a1[4] + 168) mutableCopy];
          id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKey:@"userIdentityClassification"]);
          uint64_t Name = AFUserIdentityClassficationGetName([v22 unsignedIntValue]);
          id v24 = (void *)objc_claimAutoreleasedReturnValue(Name);
          [v21 setObject:v24 forKey:@"userIdentityClassification"];

          id v25 = [[AFVoiceIdScoreCard alloc] initWithDictionaryRepresentation:v21];
          double v26 = (os_log_s *)CSLogCategorySpkrId;
          if (os_log_type_enabled(CSLogCategorySpkrId, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            v46 = "-[CSAttSiriSSRNode speakerRecognitionController:hasSpeakerInfo:]_block_invoke";
            __int16 v47 = 2112;
            id v48 = v25;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%s voiceIdScoreCard: %@", buf, 0x16u);
          }

          id v27 = *(void **)(a1[4] + 64LL);
          v40[0] = _NSConcreteStackBlock;
          v40[1] = 3221225472LL;
          v40[2] = sub_100026060;
          v40[3] = &unk_10022EED0;
          id v41 = v25;
          id v28 = v25;
          [v27 notifyClientsWithBlock:v40];
        }
      }

      else
      {
        id v29 = (os_log_s *)CSLogCategorySpkrId;
        if (os_log_type_enabled(CSLogCategorySpkrId, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315138;
          v46 = "-[CSAttSiriSSRNode speakerRecognitionController:hasSpeakerInfo:]_block_invoke_2";
          _os_log_error_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "%s _speakerRecognitionScores is nil!",  buf,  0xCu);
        }
      }
    }

    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    id v30 = *(id *)(a1[4] + 176LL);
    id v31 = [v30 countByEnumeratingWithState:&v36 objects:v44 count:16];
    if (v31)
    {
      id v32 = v31;
      uint64_t v33 = *(void *)v37;
      do
      {
        for (uint64_t i = 0LL; i != v32; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v37 != v33) {
            objc_enumerationMutation(v30);
          }
          id v35 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)i);
          if ((objc_opt_respondsToSelector(v35, "attSiriNode:didUpdateWithSpeakerInfo:forReqId:") & 1) != 0) {
            objc_msgSend( v35,  "attSiriNode:didUpdateWithSpeakerInfo:forReqId:",  a1[4],  a1[6],  *(void *)(a1[4] + 160),  (void)v36);
          }
        }

        id v32 = [v30 countByEnumeratingWithState:&v36 objects:v44 count:16];
      }

      while (v32);
    }
  }

  else
  {
    uint64_t v5 = (os_log_s *)CSLogCategorySpkrId;
    if (os_log_type_enabled(CSLogCategorySpkrId, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      v46 = "-[CSAttSiriSSRNode speakerRecognitionController:hasSpeakerInfo:]_block_invoke";
      __int16 v47 = 2114;
      id v48 = v4;
      __int16 v49 = 2114;
      __int16 v50 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s SpeakerIdInfo from incorrect SpeakerRecognizer: expected: %{public}@, spkrRecognizer: %{public}@",  buf,  0x20u);
    }
  }

void sub_100025F88(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (os_log_s *)CSLogCategorySpkrId;
  if (os_log_type_enabled(CSLogCategorySpkrId, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 136315394;
    uint64_t v7 = "-[CSAttSiriSSRNode speakerRecognitionController:hasSpeakerInfo:]_block_invoke";
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s _speakerRecognitionScores:%@",  (uint8_t *)&v6,  0x16u);
  }

  [v3 didReceiveSpeakerRecognitionScoreCard:*(void *)(a1 + 32)];
}

id sub_100026060(uint64_t a1, void *a2)
{
  return [a2 localSpeechServiceDidReceivedVoiceIdScoreCard:*(void *)(a1 + 32)];
}

void sub_10002606C(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategorySpkrId;
  if (os_log_type_enabled(CSLogCategorySpkrId, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 128LL);
    int v4 = 136315394;
    uint64_t v5 = "-[CSAttSiriSSRNode CSSpeakerRecognitionAssetDownloadMonitor:didInstallNewAsset:assetProviderType:]_block_invoke";
    __int16 v6 = 2114;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Received SSR asset download notification, updated asset cache to %{public}@",  (uint8_t *)&v4,  0x16u);
  }

void sub_100026130(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained ccProfile]);

  __int16 v6 = (os_log_s *)CSLogCategorySpkrId;
  uint64_t v7 = v6;
  if (v3)
  {
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_11;
    }
    __int16 v8 = v5 ? (void *)objc_claimAutoreleasedReturnValue([v5 profileID]) : 0;
    int v9 = 136315650;
    id v10 = "-[CSAttSiriSSRNode _stopProcessing]_block_invoke";
    __int16 v11 = 2114;
    uint64_t v12 = v8;
    __int16 v13 = 2114;
    id v14 = v3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s ERR: Failed to add profileID %{public}@ with error %{public}@",  (uint8_t *)&v9,  0x20u);
    if (!v5) {
      goto LABEL_11;
    }
LABEL_10:

    goto LABEL_11;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v8 = v5 ? (void *)objc_claimAutoreleasedReturnValue([v5 profileID]) : 0;
    int v9 = 136315394;
    id v10 = "-[CSAttSiriSSRNode _stopProcessing]_block_invoke";
    __int16 v11 = 2114;
    uint64_t v12 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s Created Continuous Conversation profile %{public}@",  (uint8_t *)&v9,  0x16u);
    if (v5) {
      goto LABEL_10;
    }
  }

void sub_1000262C8(id a1, NSError *a2)
{
  id v2 = a2;
  if (v2)
  {
    id v3 = (os_log_s *)CSLogCategorySpkrId;
    if (os_log_type_enabled(CSLogCategorySpkrId, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      uint64_t v5 = "-[CSAttSiriSSRNode _stopProcessing]_block_invoke";
      __int16 v6 = 2114;
      uint64_t v7 = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s ERR: Failed VoiceProfile Cleanup with error %{public}@",  (uint8_t *)&v4,  0x16u);
    }
  }
}

void sub_10002638C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1[4] + 136LL);
  if (v7 && ![v7 containsObject:v5])
  {
    int v9 = (os_log_s *)CSLogCategorySpkrId;
    if (os_log_type_enabled(CSLogCategorySpkrId, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315650;
      __int16 v11 = "-[CSAttSiriSSRNode _mapScoresToSharedSiriId:]_block_invoke";
      __int16 v12 = 2112;
      id v13 = v5;
      __int16 v14 = 2112;
      id v15 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Dropping id: [%@, %@]",  (uint8_t *)&v10,  0x20u);
    }

    __int16 v8 = (void *)a1[6];
  }

  else
  {
    __int16 v8 = (void *)a1[5];
  }

  [v8 setObject:v6 forKey:v5];
}

void sub_10002649C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  __int16 v8 = *(dispatch_queue_s **)(v7 + 112);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10002654C;
  block[3] = &unk_10022EA98;
  id v12 = v6;
  id v13 = v5;
  uint64_t v14 = v7;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void sub_10002654C(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1 || (int v4 = (void *)a1[5]) == 0LL)
  {
    id v2 = (os_log_s *)CSLogCategorySpkrId;
    if (os_log_type_enabled(CSLogCategorySpkrId, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      id v12 = "-[CSAttSiriSSRNode _refreshSpeakerRecognitionAssets]_block_invoke_2";
      __int16 v13 = 2114;
      uint64_t v14 = v1;
      _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Failed to get asset with %{public}@",  buf,  0x16u);
    }
  }

  else if ([v4 assetProvider] == (id)2)
  {
    uint64_t v10 = a1[5];
    uint64_t v5 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v10, 1LL));
    uint64_t v6 = a1[6];
    uint64_t v7 = *(void **)(v6 + 128);
    *(void *)(v6 + 12_Block_object_dispose((const void *)(v31 - 160), 8) = v5;

    __int16 v8 = (os_log_s *)CSLogCategorySpkrId;
    if (os_log_type_enabled(CSLogCategorySpkrId, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1[6] + 128LL);
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      id v12 = "-[CSAttSiriSSRNode _refreshSpeakerRecognitionAssets]_block_invoke";
      __int16 v13 = 2114;
      uint64_t v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s Asset Vers (VT): %{public}@", buf, 0x16u);
    }
  }

void sub_1000266C0(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategorySpkrId;
  if (os_log_type_enabled(CSLogCategorySpkrId, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315138;
    id v12 = "-[CSAttSiriSSRNode handleSiriSessionEnd]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", buf, 0xCu);
  }

  [*(id *)(*(void *)(a1 + 32) + 80) deleteAllVoiceProfilesForAppDomain:SSRSpeakerRecognitionSiriCCAppDomain];
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  unsigned int v4 = [v3 fileExistsAtPath:*(void *)(*(void *)(a1 + 32) + 96)];

  if (v4)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 96LL);
    id v10 = 0LL;
    [v5 removeItemAtPath:v6 error:&v10];
    id v7 = v10;

    if (v7)
    {
      __int16 v8 = (os_log_s *)CSLogCategorySpkrId;
      if (os_log_type_enabled(CSLogCategorySpkrId, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 104LL);
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        id v12 = "-[CSAttSiriSSRNode handleSiriSessionEnd]_block_invoke";
        __int16 v13 = 2112;
        uint64_t v14 = v9;
        __int16 v15 = 2112;
        id v16 = v7;
        _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Failed to delete leading utterance log file at: %@ with error:%@",  buf,  0x20u);
      }
    }
  }

id sub_100026868(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategorySpkrId;
  if (os_log_type_enabled(CSLogCategorySpkrId, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[CSAttSiriSSRNode setUpSpeakerProfileForFlexibleFollowup]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  return [*(id *)(a1 + 32) _setupLeadingUtteranceLogger];
}

void sub_100026918(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 168) objectForKeyedSubscript:kSSRSpeakerRecognitionKnownUserScoresKey]);
  id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v4 = *(id *)(a1 + 40);
  id v5 = [v4 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v18;
    do
    {
      for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v17 + 1) + 8LL * (void)i);
        uint64_t v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", v9, (void)v17));
        __int16 v11 = (void *)v10;
        if (v10) {
          id v12 = (_UNKNOWN **)v10;
        }
        else {
          id v12 = &off_100238418;
        }
        -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v12, v9);
      }

      id v6 = [v4 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }

    while (v6);
  }

  __int16 v13 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary keysSortedByValueUsingComparator:]( v3,  "keysSortedByValueUsingComparator:",  &stru_10022A660));
  uint64_t v14 = objc_claimAutoreleasedReturnValue([v13 firstObject]);
  uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v14;
}

int64_t sub_100026AB4(id a1, id a2, id a3)
{
  return (int64_t)[a3 compare:a2];
}

void sub_100026AC0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 valueForKeyPath:@"@distinctUnionOfObjects.sharedUserId"]);
    if (v3)
    {
      uint64_t v7 = v3;
      uint64_t v4 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v3));
      uint64_t v5 = *(void *)(a1 + 40);
      id v6 = *(void **)(v5 + 136);
      *(void *)(v5 + 136) = v4;

      id v3 = v7;
    }
  }

BOOL sub_100026B40(id a1, SSRVoiceProfile *a2, NSDictionary *a3)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[SSRVoiceProfile siriProfileId](a2, "siriProfileId", a3));
  BOOL v4 = v3 != 0LL;

  return v4;
}

void sub_100026B74(uint64_t a1)
{
  if ((CSIsIOS(v2, v3) & 1) != 0 || CSIsAppleSiliconMac())
  {
    if (*(void *)(*(void *)(a1 + 32) + 48LL))
    {
      uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 48LL);
      uint64_t v4 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v13, 1LL));
      uint64_t v5 = *(void *)(a1 + 32);
      id v6 = *(void **)(v5 + 128);
      *(void *)(v5 + 12_Block_object_dispose((const void *)(v31 - 160), 8) = v4;

      uint64_t v7 = (os_log_s *)CSLogCategorySpkrId;
      if (os_log_type_enabled(CSLogCategorySpkrId, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 128LL);
        int v9 = 136315394;
        uint64_t v10 = "-[CSAttSiriSSRNode setPrefetchedAsset:]_block_invoke";
        __int16 v11 = 2114;
        uint64_t v12 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s Prefetched Asset Vers (VT): %{public}@",  (uint8_t *)&v9,  0x16u);
      }
    }
  }

void sub_100026C84(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) receivers]);
  [v2 removeObject:*(void *)(a1 + 40)];
}

void sub_100026CC4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) receivers]);
  unsigned __int8 v3 = [v2 containsObject:*(void *)(a1 + 40)];

  if ((v3 & 1) == 0)
  {
    if ([*(id *)(a1 + 40) conformsToProtocol:&OBJC_PROTOCOL___CSAttSiriSSRNodeDelegate])
    {
      id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) receivers]);
      [v6 addObject:*(void *)(a1 + 40)];
    }

    else
    {
      uint64_t v4 = (os_log_s *)CSLogCategorySpkrId;
      if (os_log_type_enabled(CSLogCategorySpkrId, OS_LOG_TYPE_ERROR))
      {
        uint64_t v5 = *(void *)(a1 + 40);
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        uint64_t v8 = "-[CSAttSiriSSRNode addReceiver:]_block_invoke";
        __int16 v9 = 2112;
        uint64_t v10 = v5;
        _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Unsupported receiver: %@",  buf,  0x16u);
      }
    }
  }

void sub_100026E08(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategorySpkrId;
  if (os_log_type_enabled(CSLogCategorySpkrId, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    id v6 = "-[CSAttSiriSSRNode stop]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v5, 0xCu);
  }

  [*(id *)(a1 + 32) _stopProcessing];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 72);
  *(void *)(v3 + 72) = 0LL;
}

void sub_100026EC8(id *a1)
{
  id v2 = a1[4];
  uint64_t v3 = (void *)v2[13];
  v2[13] = 0LL;

  uint64_t v4 = a1[4];
  int v5 = (void *)v4[17];
  v4[17] = 0LL;

  *((_BYTE *)a1[4] + 9) = 0;
  [a1[4] _setupSSRControllerWithAudioContext:a1[5] withVoiceTriggerEventInfo:a1[6]];
  objc_storeStrong((id *)a1[4] + 20, a1[7]);
}

id sub_100026F40(uint64_t a1)
{
  return [*(id *)(a1 + 32) _refreshSpeakerRecognitionAssets];
}

void sub_100027150( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100027168(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100027178(uint64_t a1)
{
}

void sub_100027180(uint64_t a1, void *a2)
{
  id v4 = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (v5)
  {
    id v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      __int16 v9 = "-[CSPostBuildInstallService _performPostBuildInstallWithCompletion:]_block_invoke";
      __int16 v10 = 2114;
      uint64_t v11 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s ERR: Failed SSR post build install chores with error %{public}@",  (uint8_t *)&v8,  0x16u);
    }
  }

  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, void))(v7 + 16))(v7, *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
  }
}

void sub_100027290(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  uint64_t v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    id v29 = "-[CSPostBuildInstallService registerPostBuildInstallService]_block_invoke";
    __int16 v30 = 2112;
    id v31 = v3;
    __int16 v32 = 2048;
    xpc_activity_state_t v33 = state;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s Received event for XPC activity: %@ in state: %ld",  buf,  0x20u);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[CSFirstUnlockMonitor sharedInstance](&OBJC_CLASS___CSFirstUnlockMonitor, "sharedInstance"));
  unsigned int v7 = [v6 isFirstUnlocked];

  BOOL should_defer = xpc_activity_should_defer(v3);
  if (should_defer || (v7 & 1) == 0 && CSIsIOS(should_defer, v9))
  {
    BOOL v10 = xpc_activity_set_state(v3, 3LL);
    uint64_t v11 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = @"No";
      id v29 = "-[CSPostBuildInstallService registerPostBuildInstallService]_block_invoke";
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      if (v10) {
        uint64_t v13 = @"Yes";
      }
      else {
        uint64_t v13 = @"No";
      }
      __int16 v30 = 2112;
      id v31 = v3;
      __int16 v32 = 2112;
      if (v7) {
        uint64_t v12 = @"Yes";
      }
      xpc_activity_state_t v33 = (xpc_activity_state_t)v13;
      __int16 v34 = 2112;
      id v35 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s XPC activity: %@ deferred: %@ firstUnlock: %@",  buf,  0x2Au);
    }

    goto LABEL_28;
  }

  uint64_t v14 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  BOOL v15 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
  if (state == 2)
  {
    if (v15)
    {
      *(_DWORD *)AudioTimeStamp buf = 136315138;
      id v29 = "-[CSPostBuildInstallService registerPostBuildInstallService]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%s Registered XPC activity got triggered...",  buf,  0xCu);
    }

    if (CSIsTV())
    {
      id v16 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315138;
        id v29 = "-[CSPostBuildInstallService registerPostBuildInstallService]_block_invoke";
        __int128 v17 = "%s Skipping post build activity on ATV";
LABEL_26:
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v17, buf, 0xCu);
        goto LABEL_27;
      }

      goto LABEL_27;
    }

    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerEnabledMonitor sharedInstance]( &OBJC_CLASS___CSVoiceTriggerEnabledMonitor,  "sharedInstance"));
    unsigned __int8 v21 = [v20 isEnabled];

    if ((v21 & 1) == 0)
    {
      id v16 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315138;
        id v29 = "-[CSPostBuildInstallService registerPostBuildInstallService]_block_invoke";
        __int128 v17 = "%s VT is disabled, skipping post build activity !";
        goto LABEL_26;
      }

LABEL_27:
      xpc_activity_set_state(v3, 5LL);
      goto LABEL_28;
    }

    if (xpc_activity_set_state(v3, 4LL))
    {
      id v22 = (void *)os_transaction_create("com.apple.cs.postinstall");
      id v23 = *(void **)(a1 + 32);
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472LL;
      v25[2] = sub_10002766C;
      v25[3] = &unk_10022B6A8;
      double v26 = v3;
      id v27 = v22;
      id v24 = v22;
      [v23 _performPostBuildInstallWithCompletion:v25];
    }
  }

  else if (v15)
  {
    __int128 v18 = v14;
    __int128 v19 = (_xpc_activity_s *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", state));
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    id v29 = "-[CSPostBuildInstallService registerPostBuildInstallService]_block_invoke";
    __int16 v30 = 2112;
    id v31 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%s Registered XPC activity complete. State: %@.",  buf,  0x16u);
  }

      v44 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        v83 = "-[CSP2PService _receiveParallelRecordingFromPeerId:recordingInfo:withReply:]";
        v84 = 2112;
        v85 = (size_t)v9;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "%s CSP2P_VoiceProfileParallelRecordingTransferCmd: received malformed command - %@",  buf,  0x16u);
      }

      if (!v10) {
        goto LABEL_33;
      }
      id v43 = 3LL;
      goto LABEL_31;
    }

    unint64_t v40 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      id v41 = v40;
      unint64_t v42 = objc_retainBlock(v10);
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      v83 = "-[CSP2PService _receiveParallelRecordingFromPeerId:recordingInfo:withReply:]";
      v84 = 2112;
      v85 = (size_t)v8;
      v86 = 2112;
      v87 = v9;
      v88 = 2112;
      v89 = v42;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "%s CSP2P_VoiceProfileParallelRecordingTransferCmd: unknown IDS peer with passed Identifier %@, %@ %@",  buf,  0x2Au);
    }

    if (v10)
    {
      id v43 = 2LL;
LABEL_31:
      unsigned __int8 v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"CoreSpeech",  v43,  0LL));
      v10[2](v10, 0LL, v21);
LABEL_32:

      goto LABEL_33;
    }

    uint64_t v11 = 0LL;
LABEL_33:

    goto LABEL_34;
  }

  __int128 v37 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v38 = v37;
    __int128 v39 = objc_retainBlock(v10);
    *(_DWORD *)AudioTimeStamp buf = 136315906;
    v83 = "-[CSP2PService _receiveParallelRecordingFromPeerId:recordingInfo:withReply:]";
    v84 = 2112;
    v85 = (size_t)v9;
    v86 = 2112;
    v87 = v8;
    v88 = 2112;
    v89 = v39;
    _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "%s CSP2P_VoiceProfileParallelRecordingTransferCmd: received malformed command - %@ %@ %@",  buf,  0x2Au);
  }

  if (v10)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"CoreSpeech",  3LL,  0LL));
    v10[2](v10, 0LL, v11);
    goto LABEL_33;
  }

  id v27 = (NSArray *)v92;
LABEL_31:

  v62 = [v21 mutableCopy];
  [v15 remoteMicVADScore];
  v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:"));
  [v62 setObject:v63 forKey:kVTEIRemoteMicVADScore];

  *(float *)&v64 = self->_remoteMicVADThreshold;
  v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v64));
  [v62 setObject:v65 forKey:kVTEIRemoteMicVADThreshold];

  *(float *)&v66 = self->_remoteMicVADMyriadThreshold;
  v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v66));
  [v62 setObject:v67 forKey:kVTEIRemoteMicVADMyriadThreshold];

  switch(v86)
  {
    case 1LL:
      id WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
      v69 = objc_opt_respondsToSelector(WeakRetained, "voiceTriggerDidDetectKeyword:deviceId:");

      if ((v69 & 1) != 0)
      {
        v70 = objc_loadWeakRetained((id *)&self->_delegate);
        [v70 voiceTriggerDidDetectKeyword:v62 deviceId:v16];
        goto LABEL_42;
      }

      break;
    case 2LL:
      v71 = objc_loadWeakRetained((id *)&self->_delegate);
      v72 = objc_opt_respondsToSelector(v71, "voiceTriggerDidRejected:deviceId:");

      if ((v72 & 1) != 0)
      {
        v70 = objc_loadWeakRetained((id *)&self->_delegate);
        [v70 voiceTriggerDidRejected:v62 deviceId:v16];
        goto LABEL_42;
      }

      break;
    case 3LL:
      v73 = objc_loadWeakRetained((id *)&self->_delegate);
      v74 = objc_opt_respondsToSelector(v73, "voiceTriggerDidDetectNearMiss:deviceId:");

      if ((v74 & 1) != 0)
      {
        v70 = objc_loadWeakRetained((id *)&self->_delegate);
        [v70 voiceTriggerDidDetectNearMiss:v62 deviceId:v16];
        goto LABEL_42;
      }

      break;
    case 9LL:
      v77 = objc_loadWeakRetained((id *)&self->_delegate);
      v78 = objc_opt_respondsToSelector(v77, "voiceTriggerDidDetectSpeakerReject:");

      if ((v78 & 1) != 0)
      {
        v70 = objc_loadWeakRetained((id *)&self->_delegate);
        [v70 voiceTriggerDidDetectSpeakerReject:v21];
        goto LABEL_42;
      }

      break;
    default:
      v75 = (void *)CSLogCategoryVT;
      if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
      {
        v70 = v75;
        v76 = (void *)objc_claimAutoreleasedReturnValue([v85 localizedDescription]);
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        v100 = "-[CSVoiceTriggerFirstPassHearst _handleSecondPassResult:secondPassRequest:deviceId:requestOption:error:completion:]";
        v101 = 2114;
        *(void *)v102 = v76;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v70,  OS_LOG_TYPE_ERROR,  "%s VoiceTrigger Second Pass has failed : %{public}@",  buf,  0x16u);

LABEL_42:
      }

      break;
  }

  if ([v14 isSecondChanceCandidate]) {
    v79 = -[CSVoiceTriggerSecondChanceContext initWithWindowStartTime:]( objc_alloc(&OBJC_CLASS___CSVoiceTriggerSecondChanceContext),  "initWithWindowStartTime:",  mach_absolute_time());
  }
  else {
    v79 = 0LL;
  }
  __int128 v19 = v84;
  [v15 setSecondChanceContext:v79];
  queue = (dispatch_queue_s *)self->_queue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000E7CE8;
  block[3] = &unk_10022E7F8;
  v89 = self;
  v90 = v86;
  v88 = v15;
  dispatch_async(queue, block);
  if (v84) {
    v84[2](v84, 1LL, 0LL);
  }

  __int128 v18 = v85;
LABEL_49:
}

LABEL_28:
}
  }

  else
  {
    id v24 = (os_log_s *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315138;
      id v35 = "-[CSAdBlockerStoreManager _populateAdBlockerWithSignaturesWithAsset:]";
      _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%s Fails to create adblocker asset decoder",  buf,  0xCu);
    }
  }
}
}

  v44 = 0u;
  uint64_t v45 = 0u;
  unint64_t v42 = 0u;
  id v43 = 0u;
  __int128 v17 = *(id *)(*((void *)v2 + 4) + 8LL);
  __int128 v18 = [v17 countByEnumeratingWithState:&v42 objects:v46 count:16];
  if (v18)
  {
    __int128 v19 = v18;
    __int128 v20 = *(void *)v43;
    do
    {
      for (uint64_t i = 0LL; i != v19; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v43 != v20) {
          objc_enumerationMutation(v17);
        }
        objc_msgSend( *(id *)(*((void *)&v42 + 1) + 8 * (void)i),  "voiceTriggerDidDetectKeyword:deviceId:",  *((void *)v2 + 5),  *((void *)v2 + 6),  (void)v42);
      }

      __int128 v19 = [v17 countByEnumeratingWithState:&v42 objects:v46 count:16];
    }

    while (v19);
  }

  kdebug_trace(722472304LL, 0LL, 0LL, 0LL, 0LL);
  kdebug_trace(722469268LL, 0LL, 0LL, 0LL, 0LL);
  id v22 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    id v23 = (void *)*((void *)v2 + 4);
    id v24 = *((void *)v2 + 5);
    id v25 = v22;
    double v26 = (void *)objc_claimAutoreleasedReturnValue([v23 _createVoiceTriggerEventInfoString:v24]);
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    id v48 = "-[CSVoiceTriggerEventsCoordinator _notifyRemoteTriggerEvent:myriadHash:remoteTriggerType:remoteDeviceId:isTrig"
          "geredFromFullWake:completion:]_block_invoke";
    __int16 v49 = 2114;
    __int16 v50 = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%s %{public}@", buf, 0x16u);
  }

  objc_msgSend(*((id *)v2 + 4), "_printVoiceTriggerMetricsString:", *((void *)v2 + 5), (void)v42);
  id v27 = (void *)*((void *)v2 + 9);
  if (v27 == (void *)2)
  {
    __int16 v30 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    id v31 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
    if (v31)
    {
      *(_DWORD *)AudioTimeStamp buf = 136315138;
      id v48 = "-[CSVoiceTriggerEventsCoordinator _notifyRemoteTriggerEvent:myriadHash:remoteTriggerType:remoteDeviceId:isTr"
            "iggeredFromFullWake:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "%s Notifying Darwin VoiceTrigger Trigger!!!!",  buf,  0xCu);
    }

    if (CSIsOSX(v31, v32))
    {
      xpc_activity_state_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[CSMyriadPHash decodeWithMyriadPHash:]( &OBJC_CLASS___CSMyriadPHash,  "decodeWithMyriadPHash:",  *((void *)v2 + 7)));
      __int16 v34 = AFMachAbsoluteTimeAddTimeInterval([v33 absTime], 5.0);
    }

    else
    {
      __int16 v34 = 0LL;
    }

    __int128 v37 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriLauncher sharedLauncher](&OBJC_CLASS___CSSiriLauncher, "sharedLauncher"));
    __int128 v38 = *((void *)v2 + 5);
    __int128 v39 = *((void *)v2 + 6);
    unint64_t v40 = *((void *)v2 + 7);
    id v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v34));
    [v37 notifyDarwinVoiceTrigger:v38 deviceId:v39 myriadPHash:v40 myriadLateActivationExpirationTime:v41 completion:*((void *)v2 + 8)];
  }

  else
  {
    if (v27 != (void *)1)
    {
      id v35 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        id v48 = "-[CSVoiceTriggerEventsCoordinator _notifyRemoteTriggerEvent:myriadHash:remoteTriggerType:remoteDeviceId:is"
              "TriggeredFromFullWake:completion:]_block_invoke";
        __int16 v49 = 2050;
        __int16 v50 = v27;
        _os_log_error_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "%s Unsupported trigger type : %{public}lu",  buf,  0x16u);
      }

      goto LABEL_48;
    }

    id v28 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315138;
      id v48 = "-[CSVoiceTriggerEventsCoordinator _notifyRemoteTriggerEvent:myriadHash:remoteTriggerType:remoteDeviceId:isTr"
            "iggeredFromFullWake:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "%s Notifying Gibraltar VoiceTrigger Trigger!!!!",  buf,  0xCu);
    }

    id v29 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriLauncher sharedLauncher](&OBJC_CLASS___CSSiriLauncher, "sharedLauncher"));
    [v29 notifyBuiltInVoiceTrigger:*((void *)v2 + 5) myriadPHash:*((void *)v2 + 7) completion:*((void *)v2 + 8)];
  }

void sub_10002766C(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5LL);
  id v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    id v6 = "-[CSPostBuildInstallService registerPostBuildInstallService]_block_invoke";
    __int16 v7 = 2114;
    id v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Post build install/first unlock tasks got completed with error - %{public}@",  (uint8_t *)&v5,  0x16u);
  }
}

void sub_100027794(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSPostBuildInstallService);
  id v2 = (void *)qword_10027FC98;
  qword_10027FC98 = (uint64_t)v1;
}

BOOL sub_10002786C(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriEnabledMonitor sharedInstance](&OBJC_CLASS___CSSiriEnabledMonitor, "sharedInstance"));
  unsigned __int8 v2 = [v1 isEnabled];

  if ((v2 & 1) == 0)
  {
    id v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      id v6 = "-[CSAdBlockerEnabledPolicy _addContinuousAudioFingerprintEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s ContinuousAudioFingerprint cannot be turned on since Siri is disabled",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

void sub_100027DF0(const char *a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = v8;
  if (a2)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100027EA8;
    v10[3] = &unk_10022D360;
    id v11 = v8;
    id v12 = v7;
    xpc_activity_register(a1, a2, v10);
  }

  else
  {
    xpc_activity_unregister(a1);
  }
}

void sub_100027EA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (state)
  {
    if (state == 2)
    {
      if (!*(void *)(a1 + 32)) {
        goto LABEL_15;
      }
      if (!xpc_activity_set_state(v3, 4LL))
      {
        int v5 = (os_log_s *)AFSiriLogContextSpeech;
        if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315138;
          uint64_t v14 = "_RegisterXPCActivity_block_invoke";
          _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Failed setting activity state to continue",  buf,  0xCu);
        }
      }

      uint64_t v6 = *(void *)(a1 + 32);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      v11[2] = sub_10002809C;
      v11[3] = &unk_10022F100;
      id v12 = v3;
      (*(void (**)(uint64_t, _xpc_activity_s *, void *))(v6 + 16))(v6, v12, v11);
    }
  }

  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7) {
      (*(void (**)(uint64_t, _xpc_activity_s *))(v7 + 16))(v7, v3);
    }
  }

  if (xpc_activity_should_defer(v3))
  {
    BOOL v8 = xpc_activity_set_state(v3, 3LL);
    uint64_t v9 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      BOOL v10 = @"No";
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v14 = "_RegisterXPCActivity_block_invoke";
      __int16 v15 = 2112;
      id v16 = v3;
      if (v8) {
        BOOL v10 = @"Yes";
      }
      __int16 v17 = 2112;
      __int128 v18 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s Deferring activity:%@ deferred:%@",  buf,  0x20u);
    }
  }

LABEL_15:
}
}

  return v22;
}

    _Block_object_dispose(buf, 8);
    goto LABEL_16;
  }

  queue = (dispatch_queue_s *)self->_queue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000D25D4;
  block[3] = &unk_10022CDE0;
  void block[4] = self;
  __int128 v36 = v14;
  unint64_t v40 = a3;
  __int128 v37 = v15;
  id v41 = v20;
  __int128 v38 = v16;
  __int128 v39 = v17;
  dispatch_async(queue, block);

LABEL_16:
}
}

  return v16;
}

void sub_10002809C(uint64_t a1)
{
  if (!xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5LL))
  {
    uint64_t v1 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      int v2 = 136315138;
      id v3 = "_RegisterXPCActivity_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_ERROR,  "%s Failed setting activity state to done",  (uint8_t *)&v2,  0xCu);
    }
  }

void sub_100028154(id a1, OS_xpc_object *a2, id a3)
{
  id v3 = (void (**)(void))a3;
  id v4 = [[CoreEmbeddedSpeechRecognizer alloc] initWithDelegate:0 instanceUUID:&CoreEmbeddedSpeechRecognizerInstanceUUIDInteractive];
  [v4 preheatSpeechRecognizerWithSilence];
  [v4 invalidate];
  int v5 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 136315138;
    uint64_t v7 = "_RegisterPeriodicPreheatActivity_block_invoke_2";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%s On-Device ASR: XPC: Done triggering preheating with silence",  (uint8_t *)&v6,  0xCu);
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  if (v3) {
LABEL_3:
  }
    v3[2](v3);
LABEL_4:
}

void sub_100028254(id a1, OS_xpc_object *a2)
{
  int v2 = a2;
  xpc_object_t v3 = xpc_activity_copy_criteria(v2);
  if (!v3)
  {
    xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
    double v5 = _AFPreferencesDoubleForKeyWithDefault(@"ASR Periodic Preheat Interval", 0.0);
    int v6 = (os_log_s *)AFSiriLogContextSpeech;
    if (v5 <= 0.0)
    {
      if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
      {
        int v7 = 136315394;
        BOOL v8 = "_PeriodicPreheatActivityCriteria";
        __int16 v9 = 2048;
        double v10 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s On-Device ASR: XPC: Invalid Periodic preheat interval: %lf. Using default value of 1 hour.",  (uint8_t *)&v7,  0x16u);
        int v6 = (os_log_s *)AFSiriLogContextSpeech;
      }

      double v5 = (double)XPC_ACTIVITY_INTERVAL_1_HOUR;
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 136315394;
      BOOL v8 = "_PeriodicPreheatActivityCriteria";
      __int16 v9 = 2048;
      double v10 = v5;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "%s On-Device ASR: XPC: Periodic preheat interval: %lf seconds.",  (uint8_t *)&v7,  0x16u);
    }

    xpc_dictionary_set_int64(v4, XPC_ACTIVITY_INTERVAL, (uint64_t)v5);
    xpc_dictionary_set_int64(v4, XPC_ACTIVITY_GRACE_PERIOD, 0LL);
    xpc_dictionary_set_BOOL(v4, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v4, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v4, XPC_ACTIVITY_ALLOW_BATTERY, 0);
    xpc_dictionary_set_BOOL(v4, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 0);
    xpc_dictionary_set_BOOL(v4, XPC_ACTIVITY_REQUIRE_SCREEN_SLEEP, 1);
    xpc_activity_set_criteria(v2, v4);
  }
}

void sub_100028494(id a1, OS_xpc_object *a2, id a3)
{
  xpc_object_t v3 = (void (**)(void))a3;
  +[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  3LL,  &stru_10022A878);
  xpc_object_t v4 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315138;
    int v6 = "_RegisterDailyANECompilationActivity_block_invoke_2";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s On-Device ASR: XPC: Done triggering daily ANE compilation",  (uint8_t *)&v5,  0xCu);
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  if (v3) {
LABEL_3:
  }
    v3[2](v3);
LABEL_4:
}

void sub_100028574(id a1, BOOL a2, NSError *a3)
{
  xpc_object_t v4 = a3;
  if (a2 || !+[CESRUtilities isEARError:](&OBJC_CLASS___CESRUtilities, "isEARError:", v4))
  {
    +[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL,  0LL);
    +[CoreEmbeddedSpeechAnalyzer resetCache](&OBJC_CLASS___CoreEmbeddedSpeechAnalyzer, "resetCache");
  }

  else
  {
    int v5 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      int v7 = "_RegisterDailyANECompilationActivity_block_invoke_3";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s On-Device ASR: Compilation failed, possibly due to insufficient disk space. Attempting to purge space as needed...",  (uint8_t *)&v6,  0xCu);
    }

    +[CESRUtilities purgeSpaceForModelCompilationAsNeeded:completion:]( &OBJC_CLASS___CESRUtilities,  "purgeSpaceForModelCompilationAsNeeded:completion:",  700LL,  &stru_10022A8B8);
  }
}

void sub_100028680(id a1, BOOL a2)
{
  int v2 = (os_log_s *)AFSiriLogContextSpeech;
  if (a2)
  {
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315138;
      xpc_object_t v4 = "_RegisterDailyANECompilationActivity_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s On-Device ASR: Attempting to compile the primary Assistant asset...",  (uint8_t *)&v3,  0xCu);
    }

    +[CoreEmbeddedSpeechRecognizer compilePrimaryAssistantAssetWithCompletion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compilePrimaryAssistantAssetWithCompletion:",  &stru_10022A8D8);
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315138;
      xpc_object_t v4 = "_RegisterDailyANECompilationActivity_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s On-Device ASR: Failed to purge sufficient disk space via CacheDelete.",  (uint8_t *)&v3,  0xCu);
    }

    +[CoreEmbeddedSpeechAnalyzer resetCache](&OBJC_CLASS___CoreEmbeddedSpeechAnalyzer, "resetCache");
  }

void sub_100028798(id a1, BOOL a2, NSError *a3)
{
}

void sub_1000287A4(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_SCREEN_SLEEP, 1);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100028884(id a1, OS_xpc_object *a2, id a3)
{
  xpc_object_t v3 = (void (**)(void))a3;
  +[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  3LL,  &stru_10022A818);
  xpc_object_t v4 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315138;
    int v6 = "_RegisterPostUpgradeANECompilationActivity_block_invoke_2";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s On-Device ASR: XPC: Done triggering post-upgrade ANE compilation",  (uint8_t *)&v5,  0xCu);
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  if (v3) {
LABEL_3:
  }
    v3[2](v3);
LABEL_4:
}

void sub_100028964(id a1, BOOL a2, NSError *a3)
{
}

void sub_100028990(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_POST_INSTALL, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100028A20(id a1, OS_xpc_object *a2, id a3)
{
  xpc_object_t v3 = (void (**)(void))a3;
  +[CoreEmbeddedSpeechRecognizer cleanupUnusedSubscriptions]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "cleanupUnusedSubscriptions");
  xpc_object_t v4 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315138;
    int v6 = "_RegisterDailySubscriptionCleanupActivity_block_invoke_2";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s On-Device ASR: XPC: Done triggering daily subscription cleanup",  (uint8_t *)&v5,  0xCu);
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  if (v3) {
LABEL_3:
  }
    v3[2](v3);
LABEL_4:
}

void sub_100028AF4(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_SCREEN_SLEEP, 1);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100028BBC(id a1, OS_xpc_object *a2, id a3)
{
  xpc_object_t v3 = (void (**)(void))a3;
  +[CoreEmbeddedSpeechRecognizer handlePostUpgradeSubscriptions]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "handlePostUpgradeSubscriptions");
  xpc_object_t v4 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315138;
    int v6 = "_RegisterPostUpgradeSubscriptionActivity_block_invoke_2";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s On-Device ASR: XPC: Done triggering post-upgrade subscriptions",  (uint8_t *)&v5,  0xCu);
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  if (v3) {
LABEL_3:
  }
    v3[2](v3);
LABEL_4:
}

void sub_100028C90(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_POST_INSTALL, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100029978(uint64_t a1)
{
  xpc_object_t v2 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  -[NSDateFormatter setDateFormat:](v2, "setDateFormat:", @"yyyy-MM-dd HH:mm:ss");
  xpc_object_t v3 = (void *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 40)) {
      xpc_object_t v4 = @"enable";
    }
    else {
      xpc_object_t v4 = @"disable";
    }
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 24LL);
    int v6 = v3;
    int v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSDateFormatter stringFromDate:](v2, "stringFromDate:", v5));
    BOOL v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSDateFormatter stringFromDate:](v2, "stringFromDate:", *(void *)(*(void *)(a1 + 32) + 32LL)));
    int v15 = 136315906;
    id v16 = "-[CSVoiceTriggerDataCollector CSVoiceTriggerEnabledMonitor:didReceiveEnabled:]_block_invoke";
    __int16 v17 = 2112;
    __int128 v18 = v4;
    __int16 v19 = 2112;
    __int128 v20 = v7;
    __int16 v21 = 2112;
    id v22 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Got VT event with status %@, last VT enable time: %@, last VT disable time %@",  (uint8_t *)&v15,  0x2Au);
  }

  __int16 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  double v10 = *(void **)(a1 + 32);
  id v11 = (void *)v10[4];
  if (*(_BYTE *)(a1 + 40))
  {
    if (v11)
    {
      if (v10[3])
      {
        objc_msgSend(v9, "timeIntervalSinceDate:");
        double v10 = *(void **)(a1 + 32);
        if (v12 <= 86400.0)
        {
          [v10 _submitToggleReport];
          double v10 = *(void **)(a1 + 32);
        }
      }
    }

    uint64_t v14 = (void *)v10[3];
    uint64_t v13 = v10 + 3;
    id v11 = v14;
  }

  else
  {
    uint64_t v13 = v10 + 4;
  }

  *uint64_t v13 = v9;
}

void sub_100029B3C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    if ([*(id *)(a1 + 32) type] != (id)6)
    {
      xpc_object_t v2 = *(void **)(a1 + 40);
      id v3 = (id)objc_claimAutoreleasedReturnValue( +[CSAudioRecordContext recordTypeString:]( CSAudioRecordContext,  "recordTypeString:",  [*(id *)(a1 + 32) type]));
      [v2 _createAndSubmitRejectLoggingDictWithSource:v3 withPHSAcceptInfo:0];
    }
  }

void sub_100029BCC(uint64_t a1)
{
  xpc_object_t v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[CSAudioRecordContext recordTypeString:](&OBJC_CLASS___CSAudioRecordContext, "recordTypeString:", 6LL));
  [v2 _createAndSubmitRejectLoggingDictWithSource:v3 withPHSAcceptInfo:*(void *)(a1 + 40)];
}

void sub_100029C20(uint64_t a1)
{
  uint64_t v2 = kVTEItriggerEndMachTime;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEItriggerEndMachTime]);
  id v4 = [v3 unsignedIntegerValue];

  id v5 = [*(id *)(a1 + 32) mutableCopy];
  if (*(_BYTE *)(a1 + 48))
  {
    int v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    int v7 = *(void **)(a1 + 32);
    BOOL v8 = *(void **)(*(void *)(a1 + 40) + 40LL);
    uint64_t v13 = _NSConcreteStackBlock;
    uint64_t v14 = 3221225472LL;
    int v15 = sub_100029E14;
    id v16 = &unk_10022A960;
    id v17 = v7;
    id v9 = v6;
    id v18 = v9;
    [v8 enumerateObjectsUsingBlock:&v13];
    id v10 = v9;

    id v5 = v10;
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v2, v13, v14, v15, v16));
  [v5 setObject:v11 forKey:@"dcTriggerEndMachTime"];

  [*(id *)(*(void *)(a1 + 40) + 8) addObject:v5];
  double v12 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    __int128 v20 = "-[CSVoiceTriggerDataCollector addVTRejectEntry:truncateData:]_block_invoke";
    __int16 v21 = 2048;
    id v22 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s Received VT/PHS reject event at time: %llu",  buf,  0x16u);
  }
}

void sub_100029E14(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v7 = v3;
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v3]);

    id v3 = v7;
    if (v4)
    {
      id v5 = *(void **)(a1 + 40);
      int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v7]);
      [v5 setObject:v6 forKey:v7];

      id v3 = v7;
    }
  }
}

uint64_t sub_100029E94(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100029EA4(uint64_t a1)
{
}

void sub_100029EAC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[SSRVoiceProfileManager sharedInstance](&OBJC_CLASS___SSRVoiceProfileManager, "sharedInstance"));
  uint64_t v3 = SSRSpeakerRecognitionSiriAppDomain;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[CSUtils getSiriLanguageWithFallback:]( &OBJC_CLASS___CSUtils,  "getSiriLanguageWithFallback:",  @"en-US"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 getVoiceProfileAnalyticsForAppDomain:v3 withLocale:v4]);
  id v27 = (id)objc_claimAutoreleasedReturnValue([v5 firstObject]);

  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  uint64_t v7 = kSSRSpeakerRecognitionNumImplicitUtt;
  BOOL v8 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKeyedSubscript:kSSRSpeakerRecognitionNumImplicitUtt]);

  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKeyedSubscript:v7]);
    [v6 setObject:v9 forKey:@"numImplicitUtt"];
  }

  uint64_t v10 = kSSRSpeakerRecognitionNumExplicitUtt;
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKeyedSubscript:kSSRSpeakerRecognitionNumExplicitUtt]);

  if (v11)
  {
    double v12 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKeyedSubscript:v10]);
    [v6 setObject:v12 forKey:@"numExplicitUtt"];
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[CSVoiceTriggerStatistics sharedInstance](&OBJC_CLASS___CSVoiceTriggerStatistics, "sharedInstance"));
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v13 firstPassTriggerCount]));
  [v6 setObject:v14 forKey:@"numFirstPassTriggersPerDay"];

  if (CSIsHorseman(v15, v16))
  {
    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[CSVoiceTriggerStatistics sharedInstance](&OBJC_CLASS___CSVoiceTriggerStatistics, "sharedInstance"));
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 getVoiceTriggerStatistics]);

    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(+[CSVoiceTriggerStatistics sharedInstance](&OBJC_CLASS___CSVoiceTriggerStatistics, "sharedInstance"));
    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 getVoiceTriggerDailyMetadata]);

    [v6 setObject:v18 forKey:@"vtStatistics"];
    [v6 setObject:v20 forKey:@"firstPassDailyMetadata"];
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue(+[CSVoiceTriggerStatistics sharedInstance](&OBJC_CLASS___CSVoiceTriggerStatistics, "sharedInstance"));
    [v21 resetVTEstimationStatistics];
  }

  id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  +[CSUtils supportMph](&OBJC_CLASS___CSUtils, "supportMph")));
  [v6 setObject:v22 forKey:@"isJSEnabled"];

  uint64_t v23 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v24 = *(void **)(v23 + 40);
  *(void *)(v23 + 40) = v6;
  id v25 = v6;

  double v26 = (void *)objc_claimAutoreleasedReturnValue(+[CSVoiceTriggerStatistics sharedInstance](&OBJC_CLASS___CSVoiceTriggerStatistics, "sharedInstance"));
  [v26 clearFirstPassTriggerCount];
}

void sub_10002A1A8(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSVoiceTriggerDataCollector);
  uint64_t v2 = (void *)qword_10027FCB0;
  qword_10027FCB0 = (uint64_t)v1;
}

void sub_10002B138(uint64_t *a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryAsset;
  if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136315138;
    uint64_t v10 = "-[CSVoiceTriggerAssetHandlerMac mapAssetToExclaveKit:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v9, 0xCu);
  }

  if (![(id)a1[4] assetType])
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = *(void **)(a1[5] + 88);
    uint64_t v8 = a1[6];
    id v5 = v7;
    [v5 mapAssetToExclaveKit:v6 completion:v8];
    goto LABEL_9;
  }

  uint64_t v3 = (os_log_s *)CSLogCategoryAsset;
  if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_ERROR))
  {
    int v9 = 136315138;
    uint64_t v10 = "-[CSVoiceTriggerAssetHandlerMac mapAssetToExclaveKit:completion:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s UAFAssetManager is nil. This is an error",  (uint8_t *)&v9,  0xCu);
  }

  uint64_t v4 = a1[6];
  if (v4)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  2152LL,  &off_1002392F0));
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
LABEL_9:
  }

void sub_10002B2BC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cachedAsset]);

  uint64_t v3 = &selRef_setLogDirectory_;
  uint64_t v4 = (os_log_t *)&CSLogCategoryAsset;
  if (v2)
  {
    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = (void *)v5[12];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 cachedAsset]);
    id v38 = 0LL;
    [v6 compileAndUpdateDeviceCachesWithAsset:v7 assetType:0 endpointId:0 errOut:&v38];
    id v8 = v38;

    int v9 = (os_log_s *)CSLogCategoryAsset;
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      unint64_t v40 = "-[CSVoiceTriggerAssetHandlerMac CSVoiceTriggerEnabledMonitor:didReceiveEnabled:]_block_invoke";
      __int16 v41 = 2112;
      id v42 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger is enabled, recompiling assets completed with error: %@",  buf,  0x16u);
    }
  }

  else
  {
    uint64_t v10 = (os_log_s *)CSLogCategoryAsset;
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315138;
      unint64_t v40 = "-[CSVoiceTriggerAssetHandlerMac CSVoiceTriggerEnabledMonitor:didReceiveEnabled:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s asset is not cached, skip compilation",  buf,  0xCu);
    }
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cachedEndpointAssets]);

  if (v11)
  {
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    double v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cachedEndpointAssets]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 allKeys]);

    id obj = v13;
    id v14 = [v13 countByEnumeratingWithState:&v34 objects:v45 count:16];
    if (v14)
    {
      id v16 = v14;
      uint64_t v17 = *(void *)v35;
      *(void *)&__int128 v15 = 136315650LL;
      __int128 v31 = v15;
      do
      {
        id v18 = 0LL;
        do
        {
          if (*(void *)v35 != v17) {
            objc_enumerationMutation(obj);
          }
          __int16 v19 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)v18);
          __int128 v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cachedEndpointAssets", v31));
          __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:v19]);

          if (v21)
          {
            id v22 = *(char **)(a1 + 32);
            uint64_t v23 = v3;
            id v24 = *(void **)&v22[*((int *)v3 + 367)];
            id v25 = (void *)objc_claimAutoreleasedReturnValue([v22 cachedEndpointAssets]);
            double v26 = v4;
            id v27 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:v19]);
            id v33 = 0LL;
            [v24 compileAndUpdateDeviceCachesWithAsset:v27 assetType:0 endpointId:0 errOut:&v33];
            id v28 = v33;

            uint64_t v4 = v26;
            id v29 = *v26;
            if (os_log_type_enabled(*v26, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)AudioTimeStamp buf = v31;
              unint64_t v40 = "-[CSVoiceTriggerAssetHandlerMac CSVoiceTriggerEnabledMonitor:didReceiveEnabled:]_block_invoke";
              __int16 v41 = 2112;
              id v42 = v19;
              __int16 v43 = 2112;
              id v44 = v28;
              _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger is enabled, recompiling assets for endpointId: %@ completed with error: %@",  buf,  0x20u);
            }

            uint64_t v3 = v23;
          }

          id v18 = (char *)v18 + 1;
        }

        while (v16 != v18);
        id v16 = [obj countByEnumeratingWithState:&v34 objects:v45 count:16];
      }

      while (v16);
    }
  }

  else
  {
    __int16 v30 = (os_log_s *)CSLogCategoryAsset;
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315138;
      unint64_t v40 = "-[CSVoiceTriggerAssetHandlerMac CSVoiceTriggerEnabledMonitor:didReceiveEnabled:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "%s endpoint asset is not cached, skip compilation",  buf,  0xCu);
    }
  }

void sub_10002B660(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cachedAsset]);
  id v3 = [v2 assetProvider];

  if (v3 == (id)2)
  {
    *(void *)&__int128 buf = 0LL;
    *((void *)&buf + 1) = &buf;
    uint64_t v16 = 0x3032000000LL;
    uint64_t v17 = sub_10002B868;
    id v18 = sub_10002B878;
    __int16 v19 = -[CSOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CSOSTransaction),  "initWithDescription:",  @"VTAssetRefresh");
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cachedAsset]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 configVersion]);

    uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 88LL);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[CSUtils getSiriLanguageWithFallback:]( &OBJC_CLASS___CSUtils,  "getSiriLanguageWithFallback:",  @"en-US"));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_10002B880;
    v11[3] = &unk_10022AFB8;
    id v8 = v5;
    uint64_t v9 = *(void *)(a1 + 32);
    id v12 = v8;
    uint64_t v13 = v9;
    p___int128 buf = &buf;
    [v6 getInstalledAssetofType:0 forLocale:v7 completion:v11];

    _Block_object_dispose(&buf, 8);
  }

  else
  {
    uint64_t v10 = (os_log_s *)CSLogCategoryAsset;
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "-[CSVoiceTriggerAssetHandlerMac triggerAssetRefresh]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s Nothing to do", (uint8_t *)&buf, 0xCu);
    }
  }

void sub_10002B848( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10002B868(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10002B878(uint64_t a1)
{
}

void sub_10002B880(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (v5 && !a3)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 configVersion]);
    id v8 = v7;
    if (v7 && ([v7 isEqualToString:*(void *)(a1 + 32)] & 1) == 0)
    {
      uint64_t v9 = (os_log_s *)CSLogCategoryAsset;
      if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        int v14 = 136315650;
        __int128 v15 = "-[CSVoiceTriggerAssetHandlerMac triggerAssetRefresh]_block_invoke";
        __int16 v16 = 2112;
        uint64_t v17 = v10;
        __int16 v18 = 2112;
        __int16 v19 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Triggering ABC for asset sync mismatch, before asset version: %@ after refresh asset version: %@",  (uint8_t *)&v14,  0x20u);
      }

      id v11 = (void *)objc_claimAutoreleasedReturnValue(+[CSDiagnosticReporter sharedInstance](&OBJC_CLASS___CSDiagnosticReporter, "sharedInstance"));
      [v11 submitTrialIssueReport:kCSDiagnosticReporterTrialAssetSyncMismatch];

      [*(id *)(a1 + 40) setCachedAsset:v6];
    }
  }

  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = 0LL;
}

void sub_10002B9D0(uint64_t a1)
{
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) allKeys]);
  id v2 = [obj countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v12;
    do
    {
      for (uint64_t i = 0LL; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void *)(*((void *)&v11 + 1) + 8LL * (void)i);
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[CSUtils getSiriLanguageWithEndpointId:fallbackLanguage:]( &OBJC_CLASS___CSUtils,  "getSiriLanguageWithEndpointId:fallbackLanguage:",  v6,  @"en-US"));
        id v8 = *(void **)(a1 + 32);
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472LL;
        v10[2] = sub_10002BB4C;
        v10[3] = &unk_10022E390;
        void v10[4] = v8;
        void v10[5] = v6;
        [v8 _getVoiceTriggerAssetFromAssetManagerWithLocale:v7 completion:v10];
      }

      id v3 = [obj countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v3);
  }
}

void sub_10002BB4C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10002BC08;
  v10[3] = &unk_10022E368;
  id v11 = v6;
  id v12 = v5;
  __int128 v13 = *(_OWORD *)(a1 + 32);
  id v8 = v5;
  id v9 = v6;
  dispatch_async(v7, v10);
}

void sub_10002BC08(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    id v3 = (void *)CSLogCategoryAsset;
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_ERROR))
    {
      id v27 = v3;
      id v28 = (void *)objc_claimAutoreleasedReturnValue([v2 localizedDescription]);
      *(_DWORD *)__int128 buf = 136315394;
      __int128 v31 = "-[CSVoiceTriggerAssetHandlerMac _checkNewAssetAvailabilityForEndpoint]_block_invoke_3";
      __int16 v32 = 2114;
      id v33 = v28;
      _os_log_error_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "%s Asset Query failed : %{public}@",  buf,  0x16u);
    }
  }

  if (*(void *)(a1 + 40))
  {
    uint64_t v4 = (void *)CSLogCategoryAsset;
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = *(void **)(a1 + 48);
      id v6 = v4;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 cachedEndpointAssets]);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:*(void *)(a1 + 56)]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 path]);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) path]);
      *(_DWORD *)__int128 buf = 136315650;
      __int128 v31 = "-[CSVoiceTriggerAssetHandlerMac _checkNewAssetAvailabilityForEndpoint]_block_invoke";
      __int16 v32 = 2114;
      id v33 = v9;
      __int16 v34 = 2114;
      __int128 v35 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s cached asset:%{public}@, new asset:%{public}@",  buf,  0x20u);
    }

    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) cachedEndpointAssets]);
    uint64_t v12 = objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:*(void *)(a1 + 56)]);
    if (v12)
    {
      __int128 v13 = (void *)v12;
      __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) cachedEndpointAssets]);
      __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:*(void *)(a1 + 56)]);
      unsigned int v16 = [v15 isEqualAsset:*(void *)(a1 + 40)];

      if (v16)
      {
        uint64_t v17 = (os_log_s *)CSLogCategoryAsset;
        if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 136315138;
          __int128 v31 = "-[CSVoiceTriggerAssetHandlerMac _checkNewAssetAvailabilityForEndpoint]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%s New asset is same as cached asset, ignore notification",  buf,  0xCu);
        }

        return;
      }
    }

    else
    {
    }

    __int16 v18 = *(void **)(a1 + 48);
    __int16 v19 = (void *)v18[12];
    if (v19)
    {
      uint64_t v20 = *(void *)(a1 + 40);
      uint64_t v21 = *(void *)(a1 + 56);
      id v29 = 0LL;
      [v19 compileAndUpdateDeviceCachesWithAsset:v20 assetType:0 endpointId:v21 errOut:&v29];
      id v22 = v29;
      uint64_t v23 = (os_log_s *)CSLogCategoryAsset;
      if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 136315394;
        __int128 v31 = "-[CSVoiceTriggerAssetHandlerMac _checkNewAssetAvailabilityForEndpoint]_block_invoke";
        __int16 v32 = 2112;
        id v33 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "%s Compile cached asset to onDevice CacheIr with error: %@",  buf,  0x16u);
      }

      __int16 v18 = *(void **)(a1 + 48);
    }

    else
    {
      id v22 = 0LL;
    }

    uint64_t v24 = *(void *)(a1 + 40);
    id v25 = (void *)objc_claimAutoreleasedReturnValue([v18 cachedEndpointAssets]);
    [v25 setObject:v24 forKeyedSubscript:*(void *)(a1 + 56)];

    [*(id *)(a1 + 48) notifyObservers:*(void *)(a1 + 40) endpointId:*(void *)(a1 + 56)];
    double v26 = (os_log_s *)CSLogCategoryAsset;
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int128 v31 = "-[CSVoiceTriggerAssetHandlerMac _checkNewAssetAvailabilityForEndpoint]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "%s New asset is different from cached one. Updating cached asset",  buf,  0xCu);
    }
  }

void sub_10002BFA8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6 && (uint64_t v7 = (void *)CSLogCategoryAsset, os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_ERROR)))
  {
    id v22 = v7;
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
    *(_DWORD *)__int128 buf = 136315394;
    double v26 = "-[CSVoiceTriggerAssetHandlerMac _checkNewAssetAvailability]_block_invoke";
    __int16 v27 = 2114;
    id v28 = v23;
    _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "%s Asset Query failed : %{public}@",  buf,  0x16u);

    if (!v5) {
      goto LABEL_17;
    }
  }

  else if (!v5)
  {
    goto LABEL_17;
  }

  id v8 = (void *)CSLogCategoryAsset;
  if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = *(void **)(a1 + 32);
    uint64_t v10 = v8;
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 cachedAsset]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 path]);
    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v5 path]);
    *(_DWORD *)__int128 buf = 136315650;
    double v26 = "-[CSVoiceTriggerAssetHandlerMac _checkNewAssetAvailability]_block_invoke";
    __int16 v27 = 2114;
    id v28 = v12;
    __int16 v29 = 2114;
    __int16 v30 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s cached asset:%{public}@, new asset:%{public}@",  buf,  0x20u);
  }

  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cachedAsset]);
  unsigned int v15 = [v14 isEqualAsset:v5];

  if (v15)
  {
    unsigned int v16 = (os_log_s *)CSLogCategoryAsset;
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      double v26 = "-[CSVoiceTriggerAssetHandlerMac _checkNewAssetAvailability]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%s New asset is same as cached asset, ignore notification",  buf,  0xCu);
    }
  }

  else
  {
    uint64_t v17 = *(void **)(a1 + 32);
    __int16 v18 = (void *)v17[12];
    if (v18)
    {
      id v24 = 0LL;
      [v18 compileAndUpdateDeviceCachesWithAsset:v5 assetType:0 endpointId:0 errOut:&v24];
      id v19 = v24;
      uint64_t v20 = (os_log_s *)CSLogCategoryAsset;
      if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 136315394;
        double v26 = "-[CSVoiceTriggerAssetHandlerMac _checkNewAssetAvailability]_block_invoke";
        __int16 v27 = 2112;
        id v28 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%s Compile cached asset to onDevice CacheIr with error: %@",  buf,  0x16u);
      }

      uint64_t v17 = *(void **)(a1 + 32);
    }

    else
    {
      id v19 = 0LL;
    }

    [v17 setCachedAsset:v5];
    [*(id *)(a1 + 32) notifyObservers:v5 endpointId:0];
    uint64_t v21 = (os_log_s *)CSLogCategoryAsset;
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      double v26 = "-[CSVoiceTriggerAssetHandlerMac _checkNewAssetAvailability]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "%s New asset is different from cached one. Updating cached asset",  buf,  0xCu);
    }
  }

void sub_10002C2F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (os_log_s *)CSLogCategoryAsset;
  if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v10 = 136315650;
    id v11 = "-[CSVoiceTriggerAssetHandlerMac _getVoiceTriggerAssetFromAssetManagerWithLocale:bundleIdentifier:completion:]_block_invoke";
    __int16 v12 = 2114;
    uint64_t v13 = v8;
    __int16 v14 = 2114;
    id v15 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s CSVoiceTriggerAsset (%{public}@) found: %{public}@",  (uint8_t *)&v10,  0x20u);
  }

  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v5, v6);
  }
}

void sub_10002C3F0(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 80LL);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10002C570;
  v5[3] = &unk_10022E1A8;
  id v6 = v3;
  [v4 assetOfType:0 language:a2 completion:v5];
}

void sub_10002C474(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v8 = (os_log_s *)CSLogCategoryAsset;
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315138;
      int v10 = "-[CSVoiceTriggerAssetHandlerMac _getVoiceTriggerAssetFromAssetManagerWithLocale:bundleIdentifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s UAF assets not available, fallback to MA assets",  (uint8_t *)&v9,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_10002C570(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = (void *)CSLogCategoryAsset;
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = v7;
      int v9 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
      int v10 = 136315394;
      id v11 = "-[CSVoiceTriggerAssetHandlerMac _getVoiceTriggerAssetFromAssetManagerWithLocale:bundleIdentifier:completion:"
            "]_block_invoke_2";
      __int16 v12 = 2114;
      uint64_t v13 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Cannot get a VoiceTrigger mobile asset : %{public}@",  (uint8_t *)&v10,  0x16u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_10002C68C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleEndpointVoiceTriggerAsset:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_10002C69C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  int v9 = *(dispatch_queue_s **)(v7 + 24);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10002C774;
  block[3] = &unk_10022B7D0;
  block[1] = 3221225472LL;
  void block[4] = v7;
  id v14 = v5;
  id v15 = v8;
  id v10 = *(id *)(a1 + 48);
  id v16 = v6;
  id v17 = v10;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v9, block);
}

void sub_10002C774(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) defaultFallbackModelIfNil:*(void *)(a1 + 40)]);
  if (v2
    && ([*(id *)(*(void *)(a1 + 32) + 48) setObject:v2 forKeyedSubscript:*(void *)(a1 + 48)],
        (id v3 = *(void **)(*(void *)(a1 + 32) + 96LL)) != 0LL))
  {
    uint64_t v4 = *(void *)(a1 + 48);
    id v9 = 0LL;
    [v3 compileAndUpdateDeviceCachesWithAsset:v2 assetType:0 endpointId:v4 errOut:&v9];
    id v5 = v9;
    id v6 = (os_log_s *)CSLogCategoryAsset;
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v11 = "-[CSVoiceTriggerAssetHandlerMac _handleEndpointVoiceTriggerAsset:completion:]_block_invoke_2";
      __int16 v12 = 2112;
      id v13 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Compile cached asset to onDevice CacheIr with error: %@",  buf,  0x16u);
    }
  }

  else
  {
    id v5 = 0LL;
  }

  uint64_t v7 = *(void *)(a1 + 64);
  if (v7)
  {
    if (*(void *)(a1 + 56) || !v5)
    {
      (*(void (**)(void, void *))(v7 + 16))(*(void *)(a1 + 64), v2);
    }

    else
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) defaultFallbackModelIfNil:0]);
      (*(void (**)(uint64_t, void *, id))(v7 + 16))(v7, v8, v5);
    }
  }
}

void sub_10002C900(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) defaultFallbackModelIfNil:a2]);
  if (v6
    && ([*(id *)(a1 + 32) setCachedAsset:v6], (uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 96)) != 0))
  {
    id v12 = 0LL;
    [v7 compileAndUpdateDeviceCachesWithAsset:v6 assetType:0 endpointId:0 errOut:&v12];
    id v8 = v12;
    id v9 = (os_log_s *)CSLogCategoryAsset;
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v14 = "-[CSVoiceTriggerAssetHandlerMac _handleVoiceTriggerAssetWithCompletion:]_block_invoke";
      __int16 v15 = 2112;
      id v16 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Compile cached asset to onDevice CacheIr with error: %@",  buf,  0x16u);
    }
  }

  else
  {
    id v8 = 0LL;
  }

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10)
  {
    if (v5 || !v8)
    {
      (*(void (**)(void, void *, id))(v10 + 16))(*(void *)(a1 + 40), v6, v5);
    }

    else
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) defaultFallbackModelIfNil:0]);
      (*(void (**)(uint64_t, void *, id))(v10 + 16))(v10, v11, v8);
    }
  }
}

id *sub_10002D1B0(id *result)
{
  if (*((_BYTE *)result[4] + 10))
  {
    uint64_t v1 = result;
    [result[5] processedAudioMs];
    if (v2 > 10000.0)
    {
      id v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = 136315138;
        id v13 = "-[CSAttSiriSpeechDetectionNode attSiriNode:didUpdateOSDFeatures:withFrameDurationMs:withMHID:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%s Timeout!", (uint8_t *)&v12, 0xCu);
      }

      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v1[4] delegate]);
      [v4 attSiriNodeDidNotDetectSpeechWithTimeout];
    }

    BOOL result = (id *)[v1[5] silenceFramesCountMs];
    id v5 = (double *)v1[4];
    if (v6 <= 0.0)
    {
      double v7 = v5[12];
      BOOL result = (id *)[v1[5] processedAudioMs];
      id v9 = (double *)v1[4];
      if (v7 >= 0.0)
      {
        float v10 = v8 - v9[12];
        if (v10 >= 50.0)
        {
          id v11 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
          {
            int v12 = 136315138;
            id v13 = "-[CSAttSiriSpeechDetectionNode attSiriNode:didUpdateOSDFeatures:withFrameDurationMs:withMHID:]_block_invoke";
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s start Activation",  (uint8_t *)&v12,  0xCu);
            id v9 = (double *)v1[4];
          }

          return (id *)[v9 _startActivation];
        }
      }

      else
      {
        v9[12] = v8;
      }
    }

    else
    {
      v5[12] = -1.0;
    }
  }

  return result;
}

uint64_t sub_10002D364(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 1+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0;
  return result;
}

uint64_t sub_10002D370(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 9LL) = 0;
  *(_BYTE *)(*(void *)(result + 32) + 1+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 1;
  *(void *)(*(void *)(result + 32) + 96LL) = 0xBFF0000000000000LL;
  return result;
}

id sub_10002D394(uint64_t a1)
{
  return objc_storeWeak((id *)(*(void *)(a1 + 32) + 72LL), *(id *)(a1 + 40));
}

void sub_10002DC58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10002DDC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10002E0F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location)
{
}

void sub_10002E894( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location)
{
}

void sub_10002E9B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10002EB64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, char a18)
{
}

uint64_t sub_10002EB94(uint64_t a1)
{
  double v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    id v5 = "+[CSCoreSpeechServices getFirstPassRunningMode]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s CSCoreSpeechServices Invalidated",  (uint8_t *)&v4,  0xCu);
  }

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_10002EC44(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a2;
  id v3 = (id *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained setInvalidationHandler:0];

  id v5 = objc_loadWeakRetained(v3);
  [v5 invalidate];

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10002ECA8(uint64_t a1, int a2)
{
  int v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  BOOL v5 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v5)
    {
      int v10 = 136315138;
      id v11 = "+[CSCoreSpeechServices requestUpdatedSATAudio]_block_invoke";
      double v6 = "%s Request updated SAT audio succeed.";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v10, 0xCu);
    }
  }

  else if (v5)
  {
    int v10 = 136315138;
    id v11 = "+[CSCoreSpeechServices requestUpdatedSATAudio]_block_invoke";
    double v6 = "%s Request updated SAT audio failed.";
    goto LABEL_6;
  }

  double v7 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained(v7);
  [WeakRetained setInvalidationHandler:0];

  id v9 = objc_loadWeakRetained(v7);
  [v9 invalidate];
}

void sub_10002EDC0(id a1)
{
  uint64_t v1 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    id v3 = "+[CSCoreSpeechServices requestUpdatedSATAudio]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "%s CSCoreSpeechServices Invalidated",  (uint8_t *)&v2,  0xCu);
  }

void sub_10002EE64(uint64_t a1)
{
  int v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    double v6 = "+[CSCoreSpeechServices voiceTriggerJarvisLanguageList:jarvisSelectedLanguage:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s CoreSpeechXPCConnection Invalidated",  (uint8_t *)&v5,  0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    int v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  402LL,  &off_1002393B8));
    (*(void (**)(uint64_t, void, void *))(v3 + 16))(v3, 0LL, v4);
  }

void sub_10002EF58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  uint64_t v3 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained setInvalidationHandler:0];

  id v5 = objc_loadWeakRetained(v3);
  [v5 invalidate];
}

void sub_10002EFBC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v29 = a3;
  double v6 = (void *)objc_claimAutoreleasedReturnValue([v5 siriLocale]);
  double v7 = v6;
  if (v6)
  {
    double v8 = v6;
  }

  else
  {
    id v9 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      __int16 v27 = v9;
      id v28 = (void *)objc_claimAutoreleasedReturnValue([v29 localizedDescription]);
      *(_DWORD *)__int128 buf = 136315394;
      __int16 v43 = "+[CSCoreSpeechServices _voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:accessoryInfo:endpoi"
            "ntId:downloadedModels:preinstalledModels:completion:]_block_invoke";
      __int16 v44 = 2114;
      *(void *)uint64_t v45 = v28;
      _os_log_error_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "%s Cannot get Current VoiceTrigger Locale, falling back to en-US : %{public}@",  buf,  0x16u);
    }

    double v8 = @"en-US";
  }

  int v10 = objc_alloc(&OBJC_CLASS___CSVoiceTriggerRTModelRequestOptions);
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472LL;
  v35[2] = sub_10002F46C;
  v35[3] = &unk_10022AAC8;
  __int128 v40 = *(_OWORD *)(a1 + 80);
  id v11 = *(id *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 96);
  id v36 = v11;
  uint64_t v41 = v12;
  id v37 = *(id *)(a1 + 40);
  id v38 = *(id *)(a1 + 48);
  id v13 = v8;
  __int128 v39 = v13;
  id v14 = -[CSVoiceTriggerRTModelRequestOptions initWithCSRTModelRequestOptions:builder:]( v10,  "initWithCSRTModelRequestOptions:builder:",  v5,  v35);
  __int16 v15 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *(void *)(a1 + 80);
    uint64_t v17 = *(void *)(a1 + 88);
    *(_DWORD *)__int128 buf = 136315650;
    __int16 v43 = "+[CSCoreSpeechServices _voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:accessoryInfo:endpoint"
          "Id:downloadedModels:preinstalledModels:completion:]_block_invoke";
    __int16 v44 = 1026;
    *(_DWORD *)uint64_t v45 = v16;
    *(_WORD *)&v45[4] = 1026;
    *(_DWORD *)&v45[6] = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%s Asking current VoiceTrigger asset for %{public}d.%{public}d",  buf,  0x18u);
    __int16 v15 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  }

  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315394;
    __int16 v43 = "+[CSCoreSpeechServices _voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:accessoryInfo:endpoint"
          "Id:downloadedModels:preinstalledModels:completion:]_block_invoke";
    __int16 v44 = 2112;
    *(void *)uint64_t v45 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%s Voicetrigger RT model request options: %@",  buf,  0x16u);
  }

  __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 104) getCoreSpeechXPCConnection]);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472LL;
  v33[2] = sub_10002F5D0;
  v33[3] = &unk_10022C280;
  id v34 = *(id *)(a1 + 72);
  [v18 setInvalidationHandler:v33];
  [v18 resume];
  id v19 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = *(void *)(a1 + 80);
    uint64_t v21 = *(void *)(a1 + 88);
    *(_DWORD *)__int128 buf = 136315650;
    __int16 v43 = "+[CSCoreSpeechServices _voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:accessoryInfo:endpoint"
          "Id:downloadedModels:preinstalledModels:completion:]_block_invoke";
    __int16 v44 = 1026;
    *(_DWORD *)uint64_t v45 = v20;
    *(_WORD *)&v45[4] = 1026;
    *(_DWORD *)&v45[6] = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "%s Asking current VoiceTrigger aset for %{public}d.%{public}d",  buf,  0x18u);
  }

  id v22 = (void *)objc_claimAutoreleasedReturnValue([v18 remoteObjectProxy]);
  if (v22)
  {
    objc_initWeak((id *)buf, v18);
    uint64_t v23 = *(void *)(a1 + 56);
    uint64_t v24 = *(void *)(a1 + 64);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_10002F6C8;
    v30[3] = &unk_10022AAF0;
    id v31 = *(id *)(a1 + 72);
    objc_copyWeak(&v32, (id *)buf);
    [v22 voiceTriggerRTModelWithRequestOptions:v14 downloadedModels:v23 preinstalledModels:v24 completion:v30];
    objc_destroyWeak(&v32);

    objc_destroyWeak((id *)buf);
  }

  else
  {
    uint64_t v25 = *(void *)(a1 + 72);
    if (v25)
    {
      double v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  402LL,  &off_100239390));
      (*(void (**)(uint64_t, void, void, void *))(v25 + 16))(v25, 0LL, 0LL, v26);
    }

    [v18 setInvalidationHandler:0];
    [v18 invalidate];
  }
}

void sub_10002F448(_Unwind_Exception *a1)
{
}

void sub_10002F46C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 64)));
  [v3 setEngineMajorVersion:v4];

  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 72)));
  [v3 setEngineMinorVersion:v5];

  [v3 setEndpointId:*(void *)(a1 + 32)];
  double v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 80)));
  [v3 setAccessoryModelType:v6];

  if (*(void *)(a1 + 40))
  {
    double v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315138;
      id v9 = "+[CSCoreSpeechServices _voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:accessoryInfo:endpoin"
           "tId:downloadedModels:preinstalledModels:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s Force disabling multiphrase on remora",  (uint8_t *)&v8,  0xCu);
    }

    [*(id *)(a1 + 48) setSupportsJustSiri:0];
  }

  [v3 setCSCoreSpeechServicesAccessoryInfo:*(void *)(a1 + 48)];
  [v3 setSiriLocale:*(void *)(a1 + 56)];
}

void sub_10002F5D0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    double v6 = "+[CSCoreSpeechServices _voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:accessoryInfo:endpointI"
         "d:downloadedModels:preinstalledModels:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s CoreSpeechXPCConnection Invalidated",  (uint8_t *)&v5,  0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    int v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  402LL,  &off_100239368));
    (*(void (**)(uint64_t, void, void, void *))(v3 + 16))(v3, 0LL, 0LL, v4);
  }

void sub_10002F6C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  uint64_t v3 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained setInvalidationHandler:0];

  id v5 = objc_loadWeakRetained(v3);
  [v5 invalidate];
}

uint64_t sub_10002F72C(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 32) + 16))( *(void *)(a1 + 32),  [a2 BOOLValue]);
}

void sub_10002F75C(uint64_t a1)
{
  id v1 = *(id *)(a1 + 32);
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315394;
    int v4 = "+[CSCoreSpeechServices supportsMultiPhraseVoiceTriggerForEngineVersion:engineMinorVersion:accessoryRTModelType:"
         "completion:]_block_invoke_2";
    __int16 v5 = 2048;
    id v6 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Invalidating Connection %p",  (uint8_t *)&v3,  0x16u);
  }

  if (v1)
  {
    [v1 setInvalidationHandler:0];
    [v1 invalidate];
  }

void sub_10002F834(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    __int16 v5 = "+[CSCoreSpeechServices supportsMultiPhraseVoiceTriggerForEngineVersion:engineMinorVersion:accessoryRTModelType:"
         "completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Connection invalidated",  (uint8_t *)&v4,  0xCu);
  }

  id v3 = *(id *)(a1 + 32);
  if (v3) {
}
  }

void sub_10002F8EC(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a1 + 32);
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
  [v4 invokeWithValue:v5];
}

uint64_t sub_10002F94C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10002F960(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315394;
    id v9 = "+[CSCoreSpeechServices getCSVoiceTriggerRTModelRequestOptions:completion:]_block_invoke";
    __int16 v10 = 2114;
    id v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Current VoiceTrigger request options = %{public}@",  (uint8_t *)&v8,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  id v5 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained(v5);
  [WeakRetained setInvalidationHandler:0];

  id v7 = objc_loadWeakRetained(v5);
  [v7 invalidate];
}

void sub_10002FA6C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = a3;
    id v6 = (id)objc_claimAutoreleasedReturnValue([a2 siriLocale]);
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v6, v5);
  }

void sub_10002FAE8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    id v6 = "+[CSCoreSpeechServices fetchRemoteVoiceTriggerAssetForLanguageCode:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s CoreSpeechXPCConnection Invalidated",  (uint8_t *)&v5,  0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    int v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  402LL,  &off_100239340));
    (*(void (**)(uint64_t, void, void, void *))(v3 + 16))(v3, 0LL, 0LL, v4);
  }

void sub_10002FBE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  uint64_t v3 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained setInvalidationHandler:0];

  id v5 = objc_loadWeakRetained(v3);
  [v5 invalidate];
}

void sub_10002FC44(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    id v6 = "+[CSCoreSpeechServices installedVoiceTriggerAssetForLanguageCode:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s CoreSpeechXPCConnection Invalidated",  (uint8_t *)&v5,  0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    int v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  402LL,  &off_100239318));
    (*(void (**)(uint64_t, void, void, void *))(v3 + 16))(v3, 0LL, 0LL, v4);
  }

void sub_10002FD3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  uint64_t v3 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained setInvalidationHandler:0];

  id v5 = objc_loadWeakRetained(v3);
  [v5 invalidate];
}

void sub_10002FEC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10002FF38(uint64_t a1)
{
  id v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained delegate]);
  id v3 = objc_loadWeakRetained(v1);
  [v2 assetChangeMonitorDidDetectAssetChange:v3];
}

void sub_10002FFD8(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___CSVoiceTriggerAssetChangeMonitor);
  uint64_t v2 = (void *)qword_10027FCC0;
  qword_10027FCC0 = (uint64_t)v1;
}

uint64_t sub_10003358C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10003359C(uint64_t a1)
{
}

void sub_1000335A4(uint64_t a1)
{
}

id sub_1000335B8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    id v5 = "-[CSIntuitiveConvRequestHandler attSiriAudioSrcNodeDidStopUnexpectedly:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  return [*(id *)(a1 + 32) _handleStopProcessingForRequestId:*(void *)(*(void *)(a1 + 32) + 304)];
}

void sub_10003366C(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (!(_DWORD)a2)
  {
    id v7 = (void *)CSLogCategoryRequest;
    if (v5)
    {
      if (!os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_ERROR)) {
        goto LABEL_10;
      }
      int v8 = (void *)a1[4];
      id v9 = v7;
      id v10 = [v8 type];
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
      int v16 = 136315650;
      uint64_t v17 = "-[CSIntuitiveConvRequestHandler _handleStartProcessingWithRecordContext:withAudioStartStreamOptions:completi"
            "on:]_block_invoke";
      __int16 v18 = 2048;
      id v19 = v10;
      __int16 v20 = 2114;
      uint64_t v21 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s AFTM did not start for recordType:%llu, with error: %{public}@",  (uint8_t *)&v16,  0x20u);
    }

    else
    {
      if (!os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_10;
      }
      uint64_t v12 = (void *)a1[4];
      id v9 = v7;
      int v16 = 136315394;
      uint64_t v17 = "-[CSIntuitiveConvRequestHandler _handleStartProcessingWithRecordContext:withAudioStartStreamOptions:completi"
            "on:]_block_invoke";
      __int16 v18 = 2048;
      id v19 = [v12 type];
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s AFTM not enabled for recordType:%llu",  (uint8_t *)&v16,  0x16u);
    }

    goto LABEL_10;
  }

  id v6 = (os_log_s *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 136315138;
    uint64_t v17 = "-[CSIntuitiveConvRequestHandler _handleStartProcessingWithRecordContext:withAudioStartStreamOptions:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s AFTM started for siri request status!",  (uint8_t *)&v16,  0xCu);
  }

LABEL_10:
  id v13 = (void *)a1[6];
  id v14 = *(void **)(a1[5] + 216LL);
  __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v13 siriSessionUUID]);
  [v14 updateAFTMOperationalStatus:a2 forRequestId:v15];
}

  __int16 v18 = (os_log_s *)CSLogCategoryASV;
  if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315138;
    id v28 = "-[CSSmartSiriVolumeContextAware didDetectKeywordWithResult:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%s SmartSiriVolumeContextAware got empty VT event on distance processing queue!",  buf,  0xCu);
  }
}

    id v11 = 0;
  }
}
}

void sub_10003386C(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  id v5 = (void *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = v5;
    id v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSError localizedDescription](a3, "localizedDescription"));
    int v8 = 136315650;
    id v9 = "-[CSIntuitiveConvRequestHandler _setupAudioSrcNodeWithSiriClientStream:]_block_invoke";
    __int16 v10 = 1024;
    BOOL v11 = v4;
    __int16 v12 = 2112;
    id v13 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Attached to siri client stream with result: %d error:%@",  (uint8_t *)&v8,  0x1Cu);
  }

void sub_100033958(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(dispatch_queue_s **)(v7 + 96);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100033A04;
  block[3] = &unk_10022EA98;
  id v12 = v5;
  uint64_t v13 = v7;
  id v14 = v6;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

void sub_100033A04(uint64_t a1)
{
  if ([*(id *)(a1 + 32) assetProvider] == (id)2)
  {
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 168LL), *(id *)(a1 + 32));
    uint64_t v2 = (void *)CSLogCategoryAsset;
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      BOOL v4 = *(void **)(a1 + 48);
      uint64_t v5 = *(void *)(v3 + 168);
      id v6 = v2;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 localizedDescription]);
      int v10 = 136315650;
      BOOL v11 = "-[CSIntuitiveConvRequestHandler _fetchVoiceTriggerAssets]_block_invoke_2";
      __int16 v12 = 2112;
      uint64_t v13 = v5;
      __int16 v14 = 2112;
      __int16 v15 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "KeyLog - %s Updating VT asset to %@, with err %@",  (uint8_t *)&v10,  0x20u);
    }
  }

  else
  {
    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = *(void **)(v8 + 168);
    *(void *)(v8 + 16_Block_object_dispose(va, 8) = 0LL;
  }

void sub_100033B44(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(dispatch_queue_s **)(v7 + 96);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100033BF0;
  block[3] = &unk_10022EA98;
  void block[4] = v7;
  id v12 = v5;
  id v13 = v6;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

void sub_100033BF0(uint64_t a1)
{
  uint64_t v2 = (void *)CSLogCategoryAsset;
  if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 160LL);
    BOOL v4 = *(void **)(a1 + 48);
    id v5 = v2;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 localizedDescription]);
    int v7 = 136315650;
    uint64_t v8 = "-[CSIntuitiveConvRequestHandler _fetchMitigationAssets]_block_invoke_2";
    __int16 v9 = 2112;
    uint64_t v10 = v3;
    __int16 v11 = 2112;
    id v12 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "KeyLog - %s Updating mitigation asset to %@, with err %@",  (uint8_t *)&v7,  0x20u);
  }

void sub_100033CEC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(a1 + 32);
  __int16 v11 = *(dispatch_queue_s **)(v10 + 96);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_100033DB8;
  v15[3] = &unk_10022E368;
  id v16 = v7;
  id v17 = v8;
  uint64_t v18 = v10;
  id v19 = v9;
  id v12 = v9;
  id v13 = v8;
  id v14 = v7;
  dispatch_async(v11, v15);
}

void sub_100033DB8(void *a1)
{
  uint64_t v2 = a1[4];
  if (!v2)
  {
    uint64_t v3 = (os_log_s *)CSLogCategoryRequest;
    if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = a1[5];
      int v6 = 136315394;
      id v7 = "-[CSIntuitiveConvRequestHandler audioSessionInfoProvider:didReceiveAudioSessionRouteChangeNotificationWithUse"
           "rInfo:]_block_invoke_2";
      __int16 v8 = 2114;
      uint64_t v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s recordRoute is nil, playback route: %{public}@",  (uint8_t *)&v6,  0x16u);
    }

    goto LABEL_6;
  }

  if (([*(id *)(a1[6] + 320) isMagusSupportedWithAudioRecordContext:*(void *)(a1[6] + 112) recordRoute:v2 playbackRoute:a1[5] audioSessionId:0 recordDeviceInfo:a1[7]] & 1) == 0)
  {
LABEL_6:
    id v5 = -[CSAttendingStopHintInfo initWithOrigin:reason:]( objc_alloc(&OBJC_CLASS___CSAttendingStopHintInfo),  "initWithOrigin:reason:",  1LL,  6LL);
    [*(id *)(a1[6] + 24) postAttendingStopHintWithInfo:v5];
  }

void sub_100033EC8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    uint64_t v4 = "-[CSIntuitiveConvRequestHandler siriPromptWillStart]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v3, 0xCu);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 1+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 1;
}

void sub_100033F7C(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 1+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0;
  uint64_t v2 = -[CSAttendingStopHintInfo initWithOrigin:reason:]( objc_alloc(&OBJC_CLASS___CSAttendingStopHintInfo),  "initWithOrigin:reason:",  1LL,  5LL);
  [*(id *)(*(void *)(a1 + 32) + 24) postAttendingStopHintWithInfo:v2];
}

id sub_100033FD8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _attendingDismissalAndBlockHelper];
}

id sub_100033FE0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _attendingDismissalAndBlockHelper];
}

id sub_100033FE8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    id v5 = "-[CSIntuitiveConvRequestHandler attSiriNode:didDetectHardEndpointAtTime:withMetrics:usesAutomaticEndPointing:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  return [*(id *)(*(void *)(a1 + 32) + 56) stop];
}

id *sub_10003409C(id *result)
{
  if (!*((_BYTE *)result + 40)) {
    return (id *)[result[4] _handleStopProcessingForRequestId:*((void *)result[4] + 38)];
  }
  return result;
}

void sub_1000340B4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(a1 + 32);
  __int16 v11 = *(dispatch_queue_s **)(v10 + 96);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_100034180;
  v15[3] = &unk_10022E368;
  void v15[4] = v10;
  id v16 = v7;
  id v17 = v8;
  id v18 = v9;
  id v12 = v9;
  id v13 = v8;
  id v14 = v7;
  dispatch_async(v11, v15);
}

void sub_100034180(void *a1)
{
  if ([*(id *)(a1[4] + 320) isMagusSupportedWithAudioRecordContext:*(void *)(a1[4] + 112) recordRoute:a1[5] playbackRoute:a1[6] audioSessionId:0 recordDeviceInfo:a1[7]])
  {
    if (([*(id *)(a1[4] + 112) isVoiceTriggered] & 1) != 0
      || ([*(id *)(a1[4] + 112) isiOSButtonPress] & 1) != 0
      || [*(id *)(a1[4] + 112) isTriggerlessAnnounce])
    {
      [*(id *)(a1[4] + 88) setUpSpeakerProfileForFlexibleFollowup];
    }

    uint64_t v2 = -[CSAttendingWillStartHintInfo initWithOrigin:rootRequestId:]( objc_alloc(&OBJC_CLASS___CSAttendingWillStartHintInfo),  "initWithOrigin:rootRequestId:",  1LL,  *(void *)(a1[4] + 304LL));
    [*(id *)(a1[4] + 24) postAttendingWillStartHintWithInfo:v2];
  }

id sub_100034240(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleClientPreparedAudioStream:*(void *)(a1 + 40) successfully:*(unsigned __int8 *)(a1 + 48)];
}

id sub_100034250(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleClientPreparedAudioStream:*(void *)(a1 + 40) successfully:*(unsigned __int8 *)(a1 + 48)];
}

id sub_100034260(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 312) isEqualToString:*(void *)(a1 + 40)];
  return result;
}

id sub_1000342A0(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 312) isEqualToString:*(void *)(a1 + 40)];
  if ((result & 1) == 0) {
    return [*(id *)(a1 + 32) _handleClientWillStopStreamWithReason:*(void *)(a1 + 56) stopStreamOption:*(void *)(a1 + 48)];
  }
  return result;
}

id sub_1000342E0(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 312) isEqualToString:*(void *)(a1 + 40)];
  if ((result & 1) == 0) {
    return [*(id *)(a1 + 32) _handleClientDidStartStreamWithOption:*(void *)(a1 + 48) successfully:*(unsigned __int8 *)(a1 + 56)];
  }
  return result;
}

void sub_100034324(id *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] siriSessionUUID]);
  int v3 = v2;
  if (*((void *)a1[5] + 38)) {
    BOOL v4 = v2 == 0LL;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || !objc_msgSend(v2, "isEqualToString:"))
  {
    [a1[5] _handleClientWillStartStreamWithContext:a1[7] option:a1[4]];
    [a1[5] _startMonitoringAudioSession];
  }

  else
  {
    id v5 = (os_log_s *)CSLogCategoryRequest;
    if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = a1[6];
      int v7 = 136315394;
      id v8 = "-[CSIntuitiveConvRequestHandler siriClientBehaviorMonitor:willStartStreamWithContext:option:withEventUUID:]_block_invoke";
      __int16 v9 = 2112;
      id v10 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s Ignore handling for event (%@) as it is already in process / processed",  (uint8_t *)&v7,  0x16u);
    }

    objc_storeStrong((id *)a1[5] + 39, a1[6]);
  }
}

id sub_100034450(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleClientPreparedAudioStream:*(void *)(a1 + 40) successfully:*(unsigned __int8 *)(a1 + 48)];
}

id sub_100034460(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleClientDidStopWithOption:*(void *)(a1 + 40)];
}

id sub_10003446C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleClientWillStopStreamWithReason:*(void *)(a1 + 40) stopStreamOption:0];
}

id sub_10003447C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    int v6 = 136315650;
    int v7 = "-[CSIntuitiveConvRequestHandler intuitiveConvAudioCaptureMonitor:didStartAudioCaptureSuccessfully:option:eventU"
         "UID:]_block_invoke";
    __int16 v8 = 1024;
    int v9 = v3;
    __int16 v10 = 2112;
    uint64_t v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s flag:%u option:%@", (uint8_t *)&v6, 0x1Cu);
  }

  return [*(id *)(a1 + 40) _handleClientDidStartStreamWithOption:*(void *)(a1 + 32) successfully:*(unsigned __int8 *)(a1 + 48)];
}

id sub_100034550(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleClientWillStartStreamWithContext:*(void *)(a1 + 40) option:*(void *)(a1 + 48)];
}

void sub_100034560(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16LL);
    int v4 = 136315394;
    id v5 = "-[CSIntuitiveConvRequestHandler setRequestHandlerDelegate:]_block_invoke";
    __int16 v6 = 2112;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s requestHandlerDelegate = %@",  (uint8_t *)&v4,  0x16u);
  }

id sub_100034628(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fetchRequiredAssetsForRecordContext:0];
}

void sub_100034A0C(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___CSOtherAppRecordingStateMonitorASMac);
  uint64_t v2 = (void *)qword_10027FCC8;
  qword_10027FCC8 = (uint64_t)v1;
}

void sub_100036970( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100036D4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10003737C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

LABEL_26:
        ((void (*)(void *, void *, void *))v8[2])(v8, v19, v22);
LABEL_27:

        _Block_object_dispose(&buf, 8);
        goto LABEL_28;
      }
    }

    else
    {
      if ([v6 isVoiceTriggered])
      {
        uint64_t v25 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 v35 = 136315138;
          id v36 = "-[CSXPCClient triggerInfoForContext:completion:]";
          _os_log_error_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "%s Failed to parse VoiceTriggerInfo from raw data",  v35,  0xCu);
        }
      }

      id v19 = 0LL;
      if (v17) {
        goto LABEL_10;
      }
    }

    if ([v6 isRTSTriggered])
    {
      double v26 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 v35 = 136315138;
        id v36 = "-[CSXPCClient triggerInfoForContext:completion:]";
        _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "%s Failed to parse rtsTriggerInfo from raw data",  v35,  0xCu);
      }
    }

    id v22 = 0LL;
    goto LABEL_26;
  }

  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "-[CSXPCClient triggerInfoForContext:completion:]";
    _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%s Message not valid",  (uint8_t *)&buf,  0xCu);
  }

  ((void (*)(void *, void, void))v8[2])(v8, 0LL, 0LL);
LABEL_28:

  for (uint64_t i = 1LL; i != -1; --i)
  for (j = 1LL; j != -1; --j)
}
}

    uint64_t v11 = v23;
  }

  else
  {
    if (v13)
    {
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = "-[CSVoiceProfileRetrainManager _runVoiceProfileRetrainerWithAsset:withLanguageCode:]";
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s No voice profiles found, trigger a download",  buf,  0xCu);
    }

    [v10 triggerVoiceProfileDownload];
  }

  objc_autoreleasePoolPop(context);
LABEL_28:

  _Block_object_dispose(v37, 8);
}

void sub_10003816C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_100038380( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

LABEL_5:
    uint64_t v10 = 0LL;
  }

    uint64_t v10 = 0LL;
  }

  id v17 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:kVTEIfirstPassDetectedChannel]);
  self->_activeChannel = (unint64_t)[v17 unsignedIntegerValue];

  -[CSPhraseDetector setActiveChannel:](self->_phraseDetector, "setActiveChannel:", self->_activeChannel);
  id v18 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:kVTEIearlyDetectFiredMachTime]);
  self->_earlyDetectFiredMachTime = (unint64_t)[v18 unsignedLongLongValue];

  id v19 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:kVTEIfirstPassStartSampleCount]);
  self->_firstPassTriggerStartSampleCount = (unint64_t)[v19 unsignedIntegerValue];

  __int16 v20 = (void *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = v20;
    id v22 = (void *)objc_claimAutoreleasedReturnValue(-[CSVoiceTriggerSecondPass UUID](self, "UUID"));
    activeChannel = self->_activeChannel;
    firstPassTriggerStartSampleCount = self->_firstPassTriggerStartSampleCount;
    *(_DWORD *)__int128 buf = 136315906;
    v63 = "-[CSVoiceTriggerSecondPass _handleVoiceTriggerFirstPassFromJarvis:deviceId:audioProviderUUID:firstPassInfo:completion:]";
    v64 = 2114;
    v65 = v22;
    v66 = 2050;
    v67 = *(double *)&activeChannel;
    v68 = 2050;
    v69 = *(double *)&firstPassTriggerStartSampleCount;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "%s CSVoiceTriggerSecondPass[%{public}@]:Received first pass Jarvis triggered in channel: %{public}tu with trigger start: %{public}tu",  buf,  0x2Au);
  }

  uint64_t v25 = self->_firstPassTriggerStartSampleCount;
  if (self->_analyzerPrependingSamples >= v25) {
    analyzerPrependingSamples = self->_firstPassTriggerStartSampleCount;
  }
  else {
    analyzerPrependingSamples = self->_analyzerPrependingSamples;
  }
  __int16 v27 = v25 - analyzerPrependingSamples;
  +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
  id v29 = (unint64_t)(float)(v28 * 0.5);
  __int16 v30 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:kVTEIfirstPassEndSampleCount]);
  id v31 = (char *)[v30 unsignedIntegerValue] + v29;

  self->_secondPassTimeout = (unint64_t)&v31[-v27];
  +[CSConfig inputRecordingDurationInSecs](&OBJC_CLASS___CSConfig, "inputRecordingDurationInSecs");
  id v33 = v32;
  +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
  if ((float)(v33 * v34) < (float)(unint64_t)&v31[-v27])
  {
    __int128 v35 = (void *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
    {
      log = v35;
      v56 = (void *)objc_claimAutoreleasedReturnValue(-[CSVoiceTriggerSecondPass UUID](self, "UUID"));
      secondPassTimeout = (float)self->_secondPassTimeout;
      +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
      *(_DWORD *)__int128 buf = 136315650;
      v63 = "-[CSVoiceTriggerSecondPass _handleVoiceTriggerFirstPassFromJarvis:deviceId:audioProviderUUID:firstPassInfo:completion:]";
      v64 = 2114;
      v65 = v56;
      v66 = 2050;
      v67 = (float)(secondPassTimeout / v55);
      _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "%s CSVoiceTriggerSecondPass[%{public}@]:Second pass timeout (%{public}.2fs) should not exceed the ring buffer si ze, set to ring buffer size",  buf,  0x20u);
    }

    +[CSConfig inputRecordingDurationInSecs](&OBJC_CLASS___CSConfig, "inputRecordingDurationInSecs");
    id v37 = v36;
    +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
    self->_secondPassTimeout = (unint64_t)(float)(v37 * v38);
  }

  __int128 v39 = (void *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v40 = v39;
    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(-[CSVoiceTriggerSecondPass UUID](self, "UUID"));
    id v42 = v29;
    __int16 v43 = analyzerPrependingSamples;
    __int16 v44 = v12;
    uint64_t v45 = v13;
    v46 = self->_secondPassTimeout;
    __int16 v47 = (float)v46;
    +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
    *(_DWORD *)__int128 buf = 136316930;
    v63 = "-[CSVoiceTriggerSecondPass _handleVoiceTriggerFirstPassFromJarvis:deviceId:audioProviderUUID:firstPassInfo:completion:]";
    v64 = 2114;
    v65 = v41;
    v66 = 2050;
    v67 = *(double *)&v46;
    uint64_t v13 = v45;
    uint64_t v12 = v44;
    v68 = 2050;
    v69 = (float)(v47 / v48);
    v70 = 2050;
    v71 = v27;
    v72 = 2050;
    v73 = v31;
    v74 = 2050;
    v75 = v43;
    v76 = 2050;
    v77 = v42;
    _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "%s CSVoiceTriggerSecondPass[%{public}@]:Second pass set to analyze %{public}tu samples (%{public}.2fs) from %{publ ic}tu to %{public}tu, with prepending samples %{public}tu, trailing samples %{public}tu",  buf,  0x52u);
  }

  __int16 v49 = (void *)objc_claimAutoreleasedReturnValue( +[CSAudioRecordContext contextForJarvisWithDeviceId:]( &OBJC_CLASS___CSAudioRecordContext,  "contextForJarvisWithDeviceId:",  v59));
  __int16 v50 = (void *)objc_claimAutoreleasedReturnValue(+[CSAudioStartStreamOption noAlertOption](&OBJC_CLASS___CSAudioStartStreamOption, "noAlertOption"));
  [v50 setRequestHistoricalAudioDataSampleCount:1];
  [v50 setStartRecordingSampleCount:v27];
  v60[0] = _NSConcreteStackBlock;
  v60[1] = 3221225472LL;
  v60[2] = sub_1000A31E8;
  v60[3] = &unk_10022E650;
  v61 = v13;
  __int16 v51 = v13;
  -[CSVoiceTriggerSecondPass _requestStartAudioStreamWitContext:audioProviderUUID:startStreamOption:completion:]( self,  "_requestStartAudioStreamWitContext:audioProviderUUID:startStreamOption:completion:",  v49,  v58,  v50,  v60);
  -[CSVoiceTriggerSecondPass setResultCompletion:](self, "setResultCompletion:", v51);
}

  uint64_t v7 = [*(id *)(a1 + 32) shouldTransferVoiceTriggerLogFileWithURL:v3];
LABEL_8:

  return v7;
}

LABEL_6:
  _Block_object_dispose(&v19, 8);
  for (uint64_t i = 1LL; i != -1; --i)

  return v10;
}

  _Block_object_dispose(&v20, 8);
  for (uint64_t i = 1LL; i != -1; --i)

  return v10;
}
}
}

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 40) + 48LL));
}

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 40) + 48LL));
}

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 40) + 48LL));
}

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 40) + 48LL));
}

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 40) + 48LL));
}

void sub_100038598( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100038954( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100038B24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100038D2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100039820( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100039AEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100039DB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10003C030(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10003C040(uint64_t a1)
{
}

void sub_10003C048(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2 && (uint64_t v3 = *(_xpc_connection_s **)(*(void *)(a1 + 40) + 48LL)) != 0LL)
  {
    xpc_object_t v4 = xpc_connection_send_message_with_reply_sync(v3, v2);
    xpc_object_t v11 = v4;
    if (v4)
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = xpc_dictionary_get_BOOL(v4, "result");
      uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _decodeError:v11]);
    }

    else
    {
      uint64_t v5 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  1251LL,  0LL));
    }

    uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v5;

    __int16 v8 = v11;
  }

  else
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  1252LL,  0LL));
    uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8LL);
    __int16 v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
}

void sub_10003C12C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v8 = v3;
    BOOL v4 = xpc_dictionary_get_BOOL(v3, "result");
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _decodeError:v8]);
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      (*(void (**)(uint64_t, BOOL, void *))(v6 + 16))(v6, v4, v5);
    }
    goto LABEL_6;
  }

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7)
  {
    id v8 = 0LL;
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  1251LL,  0LL));
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v5);
LABEL_6:

    id v3 = v8;
  }
}

id sub_10003C1EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _sendMessageAsync:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_10003C1FC(uint64_t a1)
{
  uint64_t v2 = *(_xpc_connection_s **)(*(void *)(a1 + 32) + 48LL);
  if (v2)
  {
    xpc_object_t v3 = xpc_connection_send_message_with_reply_sync(v2, *(xpc_object_t *)(a1 + 40));
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
    {
      uint64_t v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
      {
        uint64_t v7 = *(void *)(a1 + 56);
        int v12 = 136315394;
        uint64_t v13 = "-[CSXPCClient sampleCountFromHostTime:]_block_invoke";
        __int16 v14 = 2050;
        uint64_t v15 = v7;
        id v8 = "%s No reply for sampleCountFromHostTime request with hostTime %{public}llu";
        uint64_t v9 = v6;
        uint32_t v10 = 22;
LABEL_8:
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v12, v10);
      }
    }
  }

  else
  {
    xpc_object_t v11 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315138;
      uint64_t v13 = "-[CSXPCClient sampleCountFromHostTime:]_block_invoke";
      id v8 = "%s xpcConnection not existing";
      uint64_t v9 = v11;
      uint32_t v10 = 12;
      goto LABEL_8;
    }
  }

void sub_10003C348(uint64_t a1)
{
  uint64_t v2 = *(_xpc_connection_s **)(*(void *)(a1 + 32) + 48LL);
  if (v2)
  {
    xpc_object_t v3 = xpc_connection_send_message_with_reply_sync(v2, *(xpc_object_t *)(a1 + 40));
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
    {
      uint64_t v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
      {
        uint64_t v7 = *(void *)(a1 + 56);
        int v12 = 136315394;
        uint64_t v13 = "-[CSXPCClient hostTimeFromSampleCount:]_block_invoke";
        __int16 v14 = 2050;
        uint64_t v15 = v7;
        id v8 = "%s No reply for hostTimeFromSampleCount request with sampleCount %{public}llu";
        uint64_t v9 = v6;
        uint32_t v10 = 22;
LABEL_8:
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v12, v10);
      }
    }
  }

  else
  {
    xpc_object_t v11 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315138;
      uint64_t v13 = "-[CSXPCClient hostTimeFromSampleCount:]_block_invoke";
      id v8 = "%s xpcConnection not existing";
      uint64_t v9 = v11;
      uint32_t v10 = 12;
      goto LABEL_8;
    }
  }

void sub_10003C494(uint64_t a1)
{
  uint64_t v2 = *(_xpc_connection_s **)(*(void *)(a1 + 32) + 48LL);
  if (v2)
  {
    xpc_object_t v3 = xpc_connection_send_message_with_reply_sync(v2, *(xpc_object_t *)(a1 + 40));
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }

void sub_10003C4E0(void *a1)
{
  id v1 = (void *)a1[4];
  if (v1)
  {
    xpc_object_t v3 = *(_xpc_connection_s **)(a1[5] + 48LL);
    if (v3)
    {
      xpc_object_t v4 = xpc_connection_send_message_with_reply_sync(v3, v1);
      uint64_t v5 = *(void *)(a1[6] + 8LL);
      uint64_t v6 = *(void **)(v5 + 40);
      *(void *)(v5 + 40) = v4;
    }
  }

void sub_10003C530(void *a1)
{
  id v1 = (void *)a1[4];
  if (v1)
  {
    xpc_object_t v3 = *(_xpc_connection_s **)(a1[5] + 48LL);
    if (v3)
    {
      xpc_object_t v4 = xpc_connection_send_message_with_reply_sync(v3, v1);
      uint64_t v5 = *(void *)(a1[6] + 8LL);
      uint64_t v6 = *(void **)(v5 + 40);
      *(void *)(v5 + 40) = v4;
    }
  }

void sub_10003C580(void *a1)
{
  id v1 = (void *)a1[4];
  if (v1)
  {
    xpc_object_t v3 = *(_xpc_connection_s **)(a1[5] + 48LL);
    if (v3)
    {
      xpc_object_t v4 = xpc_connection_send_message_with_reply_sync(v3, v1);
      uint64_t v5 = *(void *)(a1[6] + 8LL);
      uint64_t v6 = *(void **)(v5 + 40);
      *(void *)(v5 + 40) = v4;
    }
  }

void sub_10003C5D0(void *a1)
{
  id v1 = (void *)a1[4];
  if (v1)
  {
    xpc_object_t v3 = *(_xpc_connection_s **)(a1[5] + 48LL);
    if (v3)
    {
      xpc_object_t v4 = xpc_connection_send_message_with_reply_sync(v3, v1);
      if (v4)
      {
        xpc_object_t xdict = v4;
        xpc_object_t value = xpc_dictionary_get_value(v4, "audioDeviceInfo");
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(value);

        xpc_object_t v4 = xdict;
        if (v6)
        {
          xpc_object_t v7 = xpc_dictionary_get_value(xdict, "audioDeviceInfo");
          id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
          if (v8)
          {
            uint64_t v9 = -[CSFAudioDeviceInfo initWithXPCObject:]( objc_alloc(&OBJC_CLASS___CSFAudioDeviceInfo),  "initWithXPCObject:",  v8);
            uint64_t v10 = *(void *)(a1[6] + 8LL);
            xpc_object_t v11 = *(void **)(v10 + 40);
            *(void *)(v10 + 40) = v9;
          }

          xpc_object_t v4 = xdict;
        }
      }
    }
  }

void sub_10003C68C(void *a1)
{
  id v1 = (void *)a1[4];
  if (v1)
  {
    xpc_object_t v3 = *(_xpc_connection_s **)(a1[5] + 48LL);
    if (v3)
    {
      xpc_object_t v4 = xpc_connection_send_message_with_reply_sync(v3, v1);
      uint64_t v5 = *(void *)(a1[6] + 8LL);
      uint64_t v6 = *(void **)(v5 + 40);
      *(void *)(v5 + 40) = v4;
    }
  }

void sub_10003C6DC(void *a1)
{
  id v1 = (void *)a1[4];
  if (v1)
  {
    xpc_object_t v3 = *(_xpc_connection_s **)(a1[5] + 48LL);
    if (v3)
    {
      xpc_object_t v4 = xpc_connection_send_message_with_reply_sync(v3, v1);
      uint64_t v5 = *(void *)(a1[6] + 8LL);
      uint64_t v6 = *(void **)(v5 + 40);
      *(void *)(v5 + 40) = v4;
    }
  }

uint64_t sub_10003C72C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10003C740(uint64_t a1)
{
  uint64_t v2 = *(_xpc_connection_s **)(*(void *)(a1 + 32) + 48LL);
  if (v2)
  {
    xpc_object_t v3 = xpc_connection_send_message_with_reply_sync(v2, *(xpc_object_t *)(a1 + 40));
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }

uint64_t sub_10003C78C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10003C7A0(uint64_t a1)
{
  uint64_t v2 = *(_xpc_connection_s **)(*(void *)(a1 + 32) + 48LL);
  if (v2)
  {
    xpc_object_t v3 = *(void **)(a1 + 40);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_10003C8E0;
    v5[3] = &unk_10022AE98;
    id v7 = *(id *)(a1 + 56);
    id v6 = *(id *)(a1 + 48);
    xpc_connection_send_message_with_reply(v2, v3, 0LL, v5);
  }

  else
  {
    uint64_t v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v9 = "-[CSXPCClient acousticSLResultForContext:completion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s xpcConnection not exist", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

void sub_10003C8E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (xpc_dictionary_get_BOOL(v3, "result"))
    {
      xpc_object_t dictionary = xpc_dictionary_get_dictionary(v4, "acousticSLResult");
      id v6 = (void *)objc_claimAutoreleasedReturnValue(dictionary);
      if (v6)
      {
        id v7 = objc_alloc(&OBJC_CLASS___NSDictionary);
        id v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary _cs_initWithXPCObject:](v7, "_cs_initWithXPCObject:", v6));

        uint64_t v9 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = 136315394;
          uint64_t v13 = "-[CSXPCClient acousticSLResultForContext:completion:]_block_invoke";
          __int16 v14 = 2114;
          uint64_t v15 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Received AcousticSLResult %{public}@",  (uint8_t *)&v12,  0x16u);
        }
      }

      else
      {
        if ([*(id *)(a1 + 32) isVoiceTriggered])
        {
          xpc_object_t v11 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
          {
            int v12 = 136315138;
            uint64_t v13 = "-[CSXPCClient acousticSLResultForContext:completion:]_block_invoke";
            _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%s Failed to parse AcousticSLResult from raw data",  (uint8_t *)&v12,  0xCu);
          }
        }

        id v8 = 0LL;
      }

      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }

    else
    {
      uint64_t v10 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
      {
        int v12 = 136315138;
        uint64_t v13 = "-[CSXPCClient acousticSLResultForContext:completion:]_block_invoke_2";
        _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Failed to get AcousticSLResult reply",  (uint8_t *)&v12,  0xCu);
      }

      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }
  }
}

uint64_t sub_10003CB00(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10003CB14(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10003CB28(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10003CB3C(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (!v2 || (id v3 = *(_xpc_connection_s **)(a1[5] + 48LL)) == 0LL)
  {
    uint64_t v7 = CSErrorDomain;
    uint64_t v8 = 1252LL;
LABEL_7:
    uint64_t v9 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v7,  v8,  0LL));
    uint64_t v10 = *(void *)(a1[7] + 8LL);
    xpc_object_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    return;
  }

  xpc_object_t v4 = xpc_connection_send_message_with_reply_sync(v3, v2);
  uint64_t v5 = *(void *)(a1[6] + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  if (!*(void *)(*(void *)(a1[6] + 8LL) + 40LL))
  {
    uint64_t v7 = CSErrorDomain;
    uint64_t v8 = 1251LL;
    goto LABEL_7;
  }

uint64_t sub_10003CBF0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10003CC04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(_xpc_connection_s **)(v2 + 48);
  if (v3)
  {
    xpc_object_t v4 = *(dispatch_queue_s **)(v2 + 56);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_10003CD90;
    void v9[3] = &unk_10022ADB0;
    v9[4] = v2;
    uint64_t v5 = *(void **)(a1 + 40);
    id v10 = *(id *)(a1 + 48);
    id v11 = *(id *)(a1 + 56);
    id v12 = *(id *)(a1 + 64);
    xpc_connection_send_message_with_reply(v3, v5, v4, v9);
  }

  else
  {
    id v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int16 v14 = "-[CSXPCClient audioStreamWithRequest:streamName:completion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%s xpcConnection not exist", buf, 0xCu);
    }

    uint64_t v7 = *(void *)(a1 + 64);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  1252LL,  0LL));
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v8);
  }

void sub_10003CD90(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v11 = v3;
  if (v3)
  {
    BOOL v4 = xpc_dictionary_get_BOOL(v3, "result");
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _decodeError:v11]);
    if (v4)
    {
      id v6 = -[CSAudioStream initWithAudioStreamProvider:streamName:streamRequest:]( objc_alloc(&OBJC_CLASS___CSAudioStream),  "initWithAudioStreamProvider:streamName:streamRequest:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48));
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = *(void **)(v7 + 72);
      *(void *)(v7 + 72) = v6;
    }

    uint64_t v9 = *(void (**)(void))(*(void *)(a1 + 56) + 16LL);
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  1251LL,  0LL));
    uint64_t v9 = *(void (**)(void))(v10 + 16);
  }

  v9();
}

void sub_10003CE80(uint64_t a1)
{
  uint64_t v2 = *(_xpc_connection_s **)(*(void *)(a1 + 32) + 48LL);
  if (!v2)
  {
    uint64_t v6 = CSErrorDomain;
    uint64_t v7 = 1252LL;
LABEL_6:
    uint64_t v8 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v6,  v7,  0LL));
    uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    return;
  }

  xpc_object_t v3 = xpc_connection_send_message_with_reply_sync(v2, *(xpc_object_t *)(a1 + 40));
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
  {
    uint64_t v6 = CSErrorDomain;
    uint64_t v7 = 1251LL;
    goto LABEL_6;
  }

void sub_10003CF30(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (!v2 || (xpc_object_t v3 = *(_xpc_connection_s **)(a1[5] + 48LL)) == 0LL)
  {
    uint64_t v7 = CSErrorDomain;
    uint64_t v8 = 1252LL;
LABEL_7:
    uint64_t v9 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v7,  v8,  0LL));
    uint64_t v10 = *(void *)(a1[7] + 8LL);
    id v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    return;
  }

  xpc_object_t v4 = xpc_connection_send_message_with_reply_sync(v3, v2);
  uint64_t v5 = *(void *)(a1[6] + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  if (!*(void *)(*(void *)(a1[6] + 8LL) + 40LL))
  {
    uint64_t v7 = CSErrorDomain;
    uint64_t v8 = 1251LL;
    goto LABEL_7;
  }

void sub_10003CFE4(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2 && (xpc_object_t v3 = *(_xpc_connection_s **)(a1[5] + 48LL)) != 0LL)
  {
    xpc_object_t v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 136315138;
      uint64_t v21 = "-[CSXPCClient audioMetric]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Sending audioMetric request",  (uint8_t *)&v20,  0xCu);
      uint64_t v2 = (void *)a1[4];
      xpc_object_t v3 = *(_xpc_connection_s **)(a1[5] + 48LL);
    }

    xpc_object_t v5 = xpc_connection_send_message_with_reply_sync(v3, v2);
    uint64_t v6 = v5;
    if (v5 && xpc_dictionary_get_BOOL(v5, "result"))
    {
      xpc_object_t dictionary = xpc_dictionary_get_dictionary(v6, "audioMetric");
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(dictionary);
      if (v8)
      {
        uint64_t v9 = objc_alloc(&OBJC_CLASS___NSDictionary);
        uint64_t v10 = objc_claimAutoreleasedReturnValue(-[NSDictionary _cs_initWithXPCObject:](v9, "_cs_initWithXPCObject:", v8));

        id v11 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
        {
          int v20 = 136315394;
          uint64_t v21 = "-[CSXPCClient audioMetric]_block_invoke";
          __int16 v22 = 2114;
          uint64_t v23 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s audioMetric : %{public}@",  (uint8_t *)&v20,  0x16u);
        }

        uint64_t v12 = *(void *)(a1[6] + 8LL);
        uint64_t v13 = *(void **)(v12 + 40);
        *(void *)(v12 + 40) = v10;
      }

      else
      {
        id v18 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
        {
          int v20 = 136315138;
          uint64_t v21 = "-[CSXPCClient audioMetric]_block_invoke";
          _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%s Received invalid audioMetric",  (uint8_t *)&v20,  0xCu);
        }

        uint64_t v19 = *(void *)(a1[6] + 8LL);
        uint64_t v13 = *(void **)(v19 + 40);
        *(void *)(v19 + 40) = 0LL;
      }
    }

    else
    {
      uint64_t v16 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
      {
        int v20 = 136315138;
        uint64_t v21 = "-[CSXPCClient audioMetric]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s Failed to get audioMetric reply",  (uint8_t *)&v20,  0xCu);
      }

      uint64_t v17 = *(void *)(a1[6] + 8LL);
      uint64_t v8 = *(void **)(v17 + 40);
      *(void *)(v17 + 40) = 0LL;
    }
  }

  else
  {
    __int16 v14 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v20 = 136315138;
      uint64_t v21 = "-[CSXPCClient audioMetric]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s Error creating message",  (uint8_t *)&v20,  0xCu);
    }

    uint64_t v15 = *(void *)(a1[6] + 8LL);
    uint64_t v6 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = 0LL;
  }
}

double sub_10003D2D8(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    xpc_object_t v3 = *(_xpc_connection_s **)(a1[5] + 48LL);
    if (v3)
    {
      xpc_object_t v4 = xpc_connection_send_message_with_reply_sync(v3, v2);
      xpc_object_t v5 = v4;
      if (v4 && xpc_dictionary_get_BOOL(v4, "result"))
      {
        float v6 = xpc_dictionary_get_double(v5, "power");
        *(float *)(*(void *)(a1[6] + 8LL) + 24LL) = v6;
      }

      else
      {
        uint64_t v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
        {
          int v11 = 136315138;
          uint64_t v12 = "-[CSXPCClient averagePowerForChannel:]_block_invoke";
          _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Failed to get reply result correctly",  (uint8_t *)&v11,  0xCu);
        }
      }
    }
  }

  uint64_t v8 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    double v10 = *(float *)(*(void *)(a1[6] + 8LL) + 24LL);
    int v11 = 136315394;
    uint64_t v12 = "-[CSXPCClient averagePowerForChannel:]_block_invoke";
    __int16 v13 = 2050;
    double v14 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s Received averagePower = %{public}f",  (uint8_t *)&v11,  0x16u);
  }

  return result;
}

double sub_10003D454(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    xpc_object_t v3 = *(_xpc_connection_s **)(a1[5] + 48LL);
    if (v3)
    {
      xpc_object_t v4 = xpc_connection_send_message_with_reply_sync(v3, v2);
      xpc_object_t v5 = v4;
      if (v4 && xpc_dictionary_get_BOOL(v4, "result"))
      {
        float v6 = xpc_dictionary_get_double(v5, "power");
        *(float *)(*(void *)(a1[6] + 8LL) + 24LL) = v6;
      }

      else
      {
        uint64_t v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
        {
          int v11 = 136315138;
          uint64_t v12 = "-[CSXPCClient peakPowerForChannel:]_block_invoke";
          _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Failed to get reply result correctly",  (uint8_t *)&v11,  0xCu);
        }
      }
    }
  }

  uint64_t v8 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    double v10 = *(float *)(*(void *)(a1[6] + 8LL) + 24LL);
    int v11 = 136315394;
    uint64_t v12 = "-[CSXPCClient peakPowerForChannel:]_block_invoke";
    __int16 v13 = 2050;
    double v14 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s Received peakPower = %{public}f",  (uint8_t *)&v11,  0x16u);
  }

  return result;
}

void sub_10003D5D0(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    xpc_object_t v3 = *(_xpc_connection_s **)(a1[5] + 48LL);
    if (v3)
    {
      xpc_object_t v4 = xpc_connection_send_message_with_reply_sync(v3, v2);
      xpc_object_t v5 = v4;
      if (v4 && xpc_dictionary_get_BOOL(v4, "result"))
      {
        *(void *)(*(void *)(a1[6] + 8LL) + 24LL) = xpc_dictionary_get_uint64(v5, "alertStartTime");
      }

      else
      {
        float v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
        {
          int v9 = 136315138;
          double v10 = "-[CSXPCClient alertStartTime]_block_invoke";
          _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Failed to get reply result correctly",  (uint8_t *)&v9,  0xCu);
        }
      }
    }
  }

  uint64_t v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(*(void *)(a1[6] + 8LL) + 24LL);
    int v9 = 136315394;
    double v10 = "-[CSXPCClient alertStartTime]_block_invoke";
    __int16 v11 = 2050;
    uint64_t v12 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s Received alertStartTime = %{public}llu",  (uint8_t *)&v9,  0x16u);
  }

uint64_t sub_10003D744(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_10003D75C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _disconnect];
}

void sub_10003D764(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 32) + 48LL))
  {
    uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      double v10 = "-[CSXPCClient connect]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s Initializing new xpcConnection", buf, 0xCu);
    }

    xpc_connection_t mach_service = xpc_connection_create_mach_service("com.apple.corespeech.corespeechd.xpc", 0LL, 0LL);
    uint64_t v4 = *(void *)(a1 + 32);
    xpc_object_t v5 = *(void **)(v4 + 48);
    *(void *)(v4 + 4_Block_object_dispose(va, 8) = mach_service;

    objc_initWeak((id *)buf, *(id *)(a1 + 32));
    float v6 = *(_xpc_connection_s **)(*(void *)(a1 + 32) + 48LL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_10003D8F4;
    handler[3] = &unk_10022E2F8;
    objc_copyWeak(&v8, (id *)buf);
    xpc_connection_set_event_handler(v6, handler);
    xpc_connection_activate(*(xpc_connection_t *)(*(void *)(a1 + 32) + 48LL));
    [*(id *)(a1 + 32) _sendXPCClientType];
    objc_destroyWeak(&v8);
    objc_destroyWeak((id *)buf);
  }

void sub_10003D8CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10003D8F4(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _handleListenerEvent:v3];
}

uint64_t sub_10003D93C(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 48LL) != 0LL;
  return result;
}

void sub_10003E1D4(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  xpc_object_t v5 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    float v6 = v5;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSError localizedDescription](a3, "localizedDescription"));
    int v8 = 136315650;
    int v9 = "-[CSOpportuneSpeakListnerTestService receiveOpportuneSpeakListenerStop]_block_invoke";
    __int16 v10 = 1026;
    BOOL v11 = v4;
    __int16 v12 = 2114;
    __int16 v13 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s stopListenWithCompletion : %{public}d, %{public}@",  (uint8_t *)&v8,  0x1Cu);
  }

void sub_10003E2C0(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  xpc_object_t v5 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    float v6 = v5;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSError localizedDescription](a3, "localizedDescription"));
    int v8 = 136315650;
    int v9 = "-[CSOpportuneSpeakListnerTestService receiveOpportuneSpeakListenerStart]_block_invoke";
    __int16 v10 = 1026;
    BOOL v11 = v4;
    __int16 v12 = 2114;
    __int16 v13 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s startListenWithOption : %{public}d, %{public}@",  (uint8_t *)&v8,  0x1Cu);
  }

id sub_10003E3AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) receiveOpportuneSpeakListenerStart];
}

id sub_10003E3B4(uint64_t a1)
{
  return [*(id *)(a1 + 32) receiveOpportuneSpeakListenerStop];
}

id sub_10003EAA0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleClientDidStopIfNeeded];
}

id sub_10003EAA8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleClientDidStopIfNeeded];
}

void sub_10003EAB0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
  {
    uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315138;
      BOOL v4 = "-[CSAttSiriAudioCoordinator attSiriNode:didDetectHardEndpointAtTime:withMetrics:usesAutomaticEndPointing:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Detected endpoint, we will skip delivering audio to all nodes",  (uint8_t *)&v3,  0xCu);
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 8LL) = 1;
  }

void sub_10003EB6C(void *a1)
{
  uint64_t v1 = a1[4];
  if (!*(_BYTE *)(v1 + 8))
  {
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    __int128 v8 = 0u;
    __int128 v9 = 0u;
    id v3 = *(id *)(v1 + 24);
    id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v9;
      do
      {
        uint64_t v7 = 0LL;
        do
        {
          if (*(void *)v9 != v6) {
            objc_enumerationMutation(v3);
          }
          objc_msgSend( *(id *)(*((void *)&v8 + 1) + 8 * (void)v7),  "attSiriAudioSrcNodeLPCMRecordBufferAvailable:audioChunk:",  a1[5],  a1[6],  (void)v8);
          uint64_t v7 = (char *)v7 + 1;
        }

        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      }

      while (v5);
    }

    uint64_t v1 = a1[4];
  }

  if (!*(_BYTE *)(v1 + 9)) {
    *(_BYTE *)(v1 + 9) = 1;
  }
}

void sub_10003EC7C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    double v14 = "-[CSAttSiriAudioCoordinator attSiriAudioSrcNodeDidStop:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", buf, 0xCu);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 8LL) = 0;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 24LL);
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        objc_msgSend( *(id *)(*((void *)&v8 + 1) + 8 * (void)v7),  "attSiriAudioSrcNodeDidStop:",  *(void *)(a1 + 40),  (void)v8);
        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v5);
  }
}

void sub_10003EDD0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    double v14 = "-[CSAttSiriAudioCoordinator attSiriAudioSrcNodeDidStartRecording:successfully:error:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", buf, 0xCu);
  }

  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 24LL);
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        objc_msgSend( *(id *)(*((void *)&v8 + 1) + 8 * (void)v7),  "attSiriAudioSrcNodeDidStartRecording:successfully:error:",  *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 56),  *(void *)(a1 + 48),  (void)v8);
        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v5);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 1;
}

void sub_10003EF2C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    id v4 = "-[CSAttSiriAudioCoordinator reset]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v3, 0xCu);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 8LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 0;
}

id sub_10003EFE4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) removeObject:*(void *)(a1 + 40)];
}

void sub_10003EFF0(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 24) containsObject:*(void *)(a1 + 40)] & 1) == 0)
  {
    if ([*(id *)(a1 + 40) conformsToProtocol:&OBJC_PROTOCOL___CSAttSiriAudioDataReceiver])
    {
      [*(id *)(*(void *)(a1 + 32) + 24) addObject:*(void *)(a1 + 40)];
    }

    else
    {
      uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
      {
        uint64_t v3 = *(void *)(a1 + 40);
        int v4 = 136315394;
        id v5 = "-[CSAttSiriAudioCoordinator addReceiver:]_block_invoke";
        __int16 v6 = 2112;
        uint64_t v7 = v3;
        _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Unsupported receiver: %@",  (uint8_t *)&v4,  0x16u);
      }
    }
  }

void sub_10003F44C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

LABEL_14:
  return (char)v9;
}
}
}

  if ([v8 isSecondChanceCandidate])
  {
    uint64_t v24 = -[CSVoiceTriggerSecondChanceContext initWithWindowStartTime:]( objc_alloc(&OBJC_CLASS___CSVoiceTriggerSecondChanceContext),  "initWithWindowStartTime:",  mach_absolute_time());
    secondChanceContext = self->_secondChanceContext;
    self->_secondChanceContext = v24;
  }

  else
  {
    secondChanceContext = self->_secondChanceContext;
    self->_secondChanceContext = 0LL;
  }

  if (v11 != (id)1) {
    -[CSVoiceTriggerFirstPassJarvisAP _cancelLastAudioStreamHold](self, "_cancelLastAudioStreamHold");
  }
  -[CSVoiceTriggerFirstPassJarvisAP _reset](self, "_reset");
}
}

    uint64_t v19 = 0LL;
    goto LABEL_15;
  }
  }

  else
  {
    __int128 v9 = 0;
  }

  return v9;
}

void sub_10003F7A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

uint64_t sub_10003FC5C(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 8LL);
  return result;
}

id sub_10003FC78(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _notifyObserver:a2 timerIsFiringState:0];
}

id sub_10003FC88(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _notifyObserver:a2 timerIsFiringState:2];
}

id sub_10003FC98(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _notifyObserver:a2 timerIsFiringState:1];
}

uint64_t sub_10003FCA8()
{
  uint64_t v3 = 0LL;
  if (!qword_10027FCF0)
  {
    __int128 v4 = off_10022AF38;
    uint64_t v5 = 0LL;
    qword_10027FCF0 = _sl_dlopen(&v4, &v3);
    uint64_t v1 = v3;
    uint64_t v0 = qword_10027FCF0;
    if (qword_10027FCF0)
    {
      if (!v3) {
        return v0;
      }
    }

    else
    {
      uint64_t v1 = (char *)abort_report_np("%s", v3);
    }

    free(v1);
    return v0;
  }

  return qword_10027FCF0;
}

id sub_10003FD68()
{
  uint64_t v5 = 0LL;
  __int16 v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  uint64_t v0 = (id *)qword_10027FCF8;
  uint64_t v8 = qword_10027FCF8;
  if (!qword_10027FCF8)
  {
    uint64_t v1 = (void *)sub_10003FCA8();
    uint64_t v0 = (id *)dlsym(v1, "MTTimerManagerTimerFired");
    v6[3] = (uint64_t)v0;
    qword_10027FCF8 = (uint64_t)v0;
  }

  _Block_object_dispose(&v5, 8);
  if (!v0)
  {
    uint64_t v3 = dlerror();
    __int128 v4 = (_Unwind_Exception *)abort_report_np("%s", v3);
    _Block_object_dispose(&v5, 8);
    _Unwind_Resume(v4);
  }

  return *v0;
}

id sub_10003FE0C()
{
  uint64_t v5 = 0LL;
  __int16 v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  uint64_t v0 = (id *)qword_10027FD00;
  uint64_t v8 = qword_10027FD00;
  if (!qword_10027FD00)
  {
    uint64_t v1 = (void *)sub_10003FCA8();
    uint64_t v0 = (id *)dlsym(v1, "MTTimerManagerFiringTimerDismissed");
    v6[3] = (uint64_t)v0;
    qword_10027FD00 = (uint64_t)v0;
  }

  _Block_object_dispose(&v5, 8);
  if (!v0)
  {
    uint64_t v3 = dlerror();
    __int128 v4 = (_Unwind_Exception *)abort_report_np("%s", v3);
    _Block_object_dispose(&v5, 8);
    _Unwind_Resume(v4);
  }

  return *v0;
}

id sub_10003FEB0()
{
  uint64_t v5 = 0LL;
  __int16 v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  uint64_t v0 = (id *)qword_10027FD08;
  uint64_t v8 = qword_10027FD08;
  if (!qword_10027FD08)
  {
    uint64_t v1 = (void *)sub_10003FCA8();
    uint64_t v0 = (id *)dlsym(v1, "MTTimerManagerStateReset");
    v6[3] = (uint64_t)v0;
    qword_10027FD08 = (uint64_t)v0;
  }

  _Block_object_dispose(&v5, 8);
  if (!v0)
  {
    uint64_t v3 = dlerror();
    __int128 v4 = (_Unwind_Exception *)abort_report_np("%s", v3);
    _Block_object_dispose(&v5, 8);
    _Unwind_Resume(v4);
  }

  return *v0;
}

void sub_10003FF54(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = objc_getClass("MTTimerManager");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10027FCE8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v2 = abort_report_np("Unable to find class %s", "MTTimerManager");
    sub_10003FFC0(v2, v3);
  }

void sub_10003FFC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v24 = "-[CSTimerMonitor initializeTimerState]_block_invoke";
    __int16 v25 = 2112;
    id v26 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s Fetched timer uint64_t result = %@", buf, 0x16u);
  }

  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v19;
    while (2)
    {
      for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v19 != v7) {
          objc_enumerationMutation(v5);
        }
        id v9 = *(id *)(*((void *)&v18 + 1) + 8LL * (void)i);
        uint64_t v10 = objc_claimAutoreleasedReturnValue([v9 firedDate]);
        if (v10)
        {
          __int128 v11 = (void *)v10;
          uint64_t v12 = objc_claimAutoreleasedReturnValue([v9 dismissedDate]);
          if (!v12)
          {

LABEL_17:
            LOBYTE(v6) = 1;
            goto LABEL_18;
          }

          __int16 v13 = (void *)v12;
          id v14 = [v11 compare:v12];

          if (v14 == (id)1) {
            goto LABEL_17;
          }
        }

        else
        {
        }
      }

      id v6 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

LABEL_18:
  uint64_t v15 = *(void **)(a1 + 32);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_100040290;
  v16[3] = &unk_10022EB30;
  v16[4] = v15;
  char v17 = (char)v6;
  [v15 enumerateObserversInQueue:v16];
}

  return v9;
}
}
}

          uint64_t v10 = 0LL;
          goto LABEL_19;
        }
      }

      else
      {
        __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:@"triggerScoreJS"]);
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:@"keywordThresholdJS"]);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:@"tdSpeakerRecognizerCombinedThresholdJS"]);
        uint64_t v16 = (double)v9;
        char v17 = (void *)objc_claimAutoreleasedReturnValue( -[CSVoiceTriggerRejectReporter _checkForRejectWithScore:threshold:eventType:deltaTime:]( self,  "_checkForRejectWithScore:threshold:eventType:deltaTime:",  v13,  v14,  1LL,  (double)v9));
        if (!v17)
        {
          __int128 v18 = self;
          __int128 v19 = v12;
          __int128 v20 = v15;
          __int128 v21 = 3LL;
          goto LABEL_13;
        }
      }

      uint64_t v10 = v17;
      __int16 v22 = 1;
      goto LABEL_17;
    }
  }

  uint64_t v10 = 0LL;
LABEL_21:

  return v10;
}

  uint64_t v23 = 0LL;
LABEL_23:

  return v23;
}

void sub_1000401D0(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    id v5 = "-[CSTimerMonitor initializeTimerState]_block_invoke_2";
    __int16 v6 = 2112;
    uint64_t v7 = v2;
    _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Fetching timer error = %@",  (uint8_t *)&v4,  0x16u);
  }
}

id sub_100040290(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 40)) {
    uint64_t v2 = 1LL;
  }
  else {
    uint64_t v2 = 2LL;
  }
  return [*(id *)(a1 + 32) _notifyObserver:a2 timerIsFiringState:v2];
}

void sub_1000402F0(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSTimerMonitor);
  uint64_t v2 = (void *)qword_10027FCD8;
  qword_10027FCD8 = (uint64_t)v1;
}

void sub_1000409E0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) UUIDString]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 40) UUIDString]);
  unsigned int v4 = [v2 isEqualToString:v3];

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (*(_BYTE *)(v5 + 8))
    {
      *(_BYTE *)(v5 + _Block_object_dispose(va, 8) = 0;
      __int16 v6 = *(void **)(a1 + 40);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472LL;
      v7[2] = sub_100040AA8;
      v7[3] = &unk_10022EED0;
      void v7[4] = v6;
      [v6 enumerateObserversInQueue:v7];
    }
  }

void sub_100040AA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) notifyObserver:v3];
  if ((objc_opt_respondsToSelector(v3, "opportuneSpeakEventMonitor:didStreamStateChanged:") & 1) != 0) {
    [v3 opportuneSpeakEventMonitor:*(void *)(a1 + 32) didStreamStateChanged:1];
  }
}

id sub_100040B08(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
  {
    *(_BYTE *)(*(void *)(a1 + 32) + 8LL) = 1;
    id v2 = [*(id *)(a1 + 40) copy];
    uint64_t v3 = *(void *)(a1 + 32);
    unsigned int v4 = *(void **)(v3 + 24);
    *(void *)(v3 + 24) = v2;

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 32LL), *(id *)(a1 + 48));
    uint64_t v5 = objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }

  uint64_t v8 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100040BE4;
  v10[3] = &unk_10022EED0;
  void v10[4] = v8;
  return [v8 enumerateObserversInQueue:v10];
}

void sub_100040BE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) notifyObserver:v3];
  if ((objc_opt_respondsToSelector(v3, "opportuneSpeakEventMonitor:didStreamStateChanged:") & 1) != 0) {
    [v3 opportuneSpeakEventMonitor:*(void *)(a1 + 32) didStreamStateChanged:1];
  }
}

uint64_t sub_100040C44(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100040C54(uint64_t a1)
{
}

void sub_100040C5C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 32) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  unsigned int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100040C9C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  unsigned int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

uint64_t sub_100040CDC(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 8LL);
  return result;
}

uint64_t sub_100040CF8(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 8LL) = 0;
  return result;
}

uint64_t sub_100040D0C(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 8LL) = 0;
  return result;
}

void sub_100040D60(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSOpportuneSpeakEventMonitor);
  id v2 = (void *)qword_10027FD18;
  qword_10027FD18 = (uint64_t)v1;
}

void sub_100041FEC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void **)(v1 + 80);
    id v7 = 0LL;
    [v3 compileAndUpdateDeviceCachesWithAsset:v2 assetType:6 endpointId:0 errOut:&v7];
    id v4 = v7;
    uint64_t v5 = (os_log_s *)CSLogCategoryAsset;
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v9 = "-[CSAttSiriMitigationAssetHandler CSVoiceTriggerEnabledMonitor:didReceiveEnabled:]_block_invoke";
      __int16 v10 = 2112;
      id v11 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger is enabled, recompile the mitigation asset with error: %@",  buf,  0x16u);
    }
  }

  else
  {
    uint64_t v6 = (os_log_s *)CSLogCategoryAsset;
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v9 = "-[CSAttSiriMitigationAssetHandler CSVoiceTriggerEnabledMonitor:didReceiveEnabled:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s mitigation cached assets are not set, skip recompilation",  buf,  0xCu);
    }
  }

uint64_t sub_10004212C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100042140(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)CSLogCategoryAsset;
  if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    id v9 = "-[CSAttSiriMitigationAssetHandler CSLanguageCodeUpdateMonitor:didReceiveLanguageCodeChanged:]_block_invoke";
    __int16 v10 = 2112;
    id v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Received asset with err: %@",  (uint8_t *)&v8,  0x16u);
  }

  [*(id *)(a1 + 32) _receivedNewAssetUpdate:v5];
}

void sub_100042224(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[CSUtils getSiriLanguageWithFallback:]( &OBJC_CLASS___CSUtils,  "getSiriLanguageWithFallback:",  @"en-US"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000422C0;
  v4[3] = &unk_10022E340;
  v4[4] = *(void *)(a1 + 32);
  [v2 getInstalledAssetofType:6 forLocale:v3 completion:v4];
}

void sub_1000422C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)CSLogCategoryAsset;
  if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    id v9 = "-[CSAttSiriMitigationAssetHandler assetDownloadMonitorDelegate:assetType:]_block_invoke_2";
    __int16 v10 = 2112;
    id v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Received asset with err: %@",  (uint8_t *)&v8,  0x16u);
  }

  [*(id *)(a1 + 32) _receivedNewAssetUpdate:v5];
}

void sub_1000423A4(uint64_t a1)
{
  v12[0] = 0LL;
  v12[1] = v12;
  v12[2] = 0x3032000000LL;
  v12[3] = sub_1000424EC;
  v12[4] = sub_1000424FC;
  __int16 v13 = -[CSOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CSOSTransaction),  "initWithDescription:",  @"MitigationAssetRefresh");
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cachedAsset]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 configVersion]);

  id v4 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[CSUtils getSiriLanguageWithFallback:]( &OBJC_CLASS___CSUtils,  "getSiriLanguageWithFallback:",  @"en-US"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100042504;
  void v8[3] = &unk_10022AFB8;
  id v6 = v3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v9 = v6;
  uint64_t v10 = v7;
  id v11 = v12;
  [v4 getInstalledAssetofType:6 forLocale:v5 completion:v8];

  _Block_object_dispose(v12, 8);
}

void sub_1000424D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1000424EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000424FC(uint64_t a1)
{
}

void sub_100042504(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (v5 && !a3)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 configVersion]);
    int v8 = v7;
    if (v7 && ([v7 isEqualToString:*(void *)(a1 + 32)] & 1) == 0)
    {
      id v9 = (os_log_s *)CSLogCategoryAsset;
      if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        int v14 = 136315650;
        uint64_t v15 = "-[CSAttSiriMitigationAssetHandler triggerAssetRefresh]_block_invoke";
        __int16 v16 = 2112;
        uint64_t v17 = v10;
        __int16 v18 = 2112;
        __int128 v19 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Triggering ABC for asset sync mismatch, before asset version: %@ after refresh asset version: %@",  (uint8_t *)&v14,  0x20u);
      }

      id v11 = (void *)objc_claimAutoreleasedReturnValue(+[CSDiagnosticReporter sharedInstance](&OBJC_CLASS___CSDiagnosticReporter, "sharedInstance"));
      [v11 submitTrialIssueReport:kCSDiagnosticReporterTrialAssetSyncMismatch];

      [*(id *)(a1 + 40) setCachedAssetWithOverride:v6];
    }
  }

  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8LL);
  __int16 v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = 0LL;
}

uint64_t sub_100042654(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100042668(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v8 = v5;
  if (!v5 || a3)
  {
    id v6 = objc_alloc(&OBJC_CLASS___NSError);
    uint64_t v7 = -[NSError initWithDomain:code:userInfo:](v6, "initWithDomain:code:userInfo:", CSErrorDomain, 1601LL, 0LL);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    [*(id *)(a1 + 32) setCachedAssetWithOverride:v5];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

id sub_100042708(uint64_t a1)
{
  return [*(id *)(a1 + 32) _getMitigationAssetWithEndpointId:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_100042718(void *a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(a1[4] + 72LL);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

id sub_10004283C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 72) removeObject:*(void *)(a1 + 40)];
}

id sub_100042848(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 72) addObject:*(void *)(a1 + 40)];
}

void sub_1000428D4(id a1)
{
  uint64_t v1 = -[CSAttSiriMitigationAssetHandler initWithDisableOnDeviceCompilation]( objc_alloc(&OBJC_CLASS___CSAttSiriMitigationAssetHandler),  "initWithDisableOnDeviceCompilation");
  id v2 = (void *)qword_10027FD38;
  qword_10027FD38 = (uint64_t)v1;
}

void sub_100042900(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSAttSiriMitigationAssetHandler);
  id v2 = (void *)qword_10027FD28;
  qword_10027FD28 = (uint64_t)v1;
}

void sub_100042A04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100042CB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100042F94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1000432AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1000434A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000439E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100043C98(_Unwind_Exception *a1)
{
  v2[5] = 0LL;
  operator delete[](v3);
  operator delete(v2);

  _Unwind_Resume(a1);
}

void sub_100043F5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10004459C(_Unwind_Exception *exception_object)
{
}

void sub_1000446A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100044844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100044B5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100045294(_Unwind_Exception *a1)
{
}

void sub_1000457C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  uint64_t v14 = v11;

  _Unwind_Resume(a1);
}

void sub_1000458E8(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

double sub_100045A30(uint64_t a1)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 152LL) = *(_DWORD *)(a1 + 40);
  id v2 = (os_log_s *)CSLogCategoryASV;
  if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
  {
    double v4 = *(float *)(*(void *)(a1 + 32) + 152LL);
    int v5 = 136315394;
    id v6 = "-[CSSmartSiriVolumeContextAware didReceiveMusicVolumeChanged:]_block_invoke";
    __int16 v7 = 2050;
    double v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s System volume has been changed to %{public}f",  (uint8_t *)&v5,  0x16u);
  }

  return result;
}

id sub_100045AFC(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategoryASV;
  if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    int v13 = 136315394;
    uint64_t v14 = "-[CSSmartSiriVolumeContextAware setPermanentVolumeOffsetWithDirection:]_block_invoke";
    __int16 v15 = 1026;
    int v16 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Received notification to enable permanent volume offset with direction: %{public}d",  (uint8_t *)&v13,  0x12u);
  }

  if ([*(id *)(*(void *)(a1 + 32) + 120) permanentOffsetIsEnabled])
  {
    int v4 = *(unsigned __int8 *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 120);
    [v6 permanentOffsetFactor];
    float v8 = *(float *)(v5 + 416);
    if (v4) {
      *(float *)&double v7 = *(float *)&v7 + v8;
    }
    else {
      *(float *)&double v7 = *(float *)&v7 - v8;
    }
    uint64_t v10 = v6;
  }

  else
  {
    [*(id *)(*(void *)(a1 + 32) + 120) setPermanentOffsetIsEnabled:1];
    [*(id *)(*(void *)(a1 + 32) + 120) setUserIntentTime:0x8000000000000000];
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void **)(v9 + 120);
    if (*(_BYTE *)(a1 + 40)) {
      LODWORD(v7) = *(_DWORD *)(v9 + 408);
    }
    else {
      LODWORD(v7) = *(_DWORD *)(v9 + 412);
    }
  }

  [v10 setPermanentOffsetFactor:v7];
  [*(id *)(*(void *)(a1 + 32) + 120) permanentOffsetFactor];
  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 120), "applyLowerAndUpperBoundsToVolumeOffset:");
  *(float *)&double v11 = v11;
  [*(id *)(*(void *)(a1 + 32) + 120) setPermanentOffsetFactor:v11];
  return [*(id *)(*(void *)(a1 + 32) + 120) storeASVStateInformation];
}

id sub_100045C70(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 120) permanentOffsetIsEnabled])
  {
    [*(id *)(*(void *)(a1 + 32) + 120) permanentOffsetFactor];
    uint64_t v3 = *(void *)(a1 + 32);
    float v4 = *(float *)(v3 + 416);
    if (!*(_BYTE *)(a1 + 40)) {
      float v4 = -v4;
    }
    *(float *)&double v2 = *(float *)&v2 + v4;
    [*(id *)(v3 + 120) applyLowerAndUpperBoundsToVolumeOffset:v2];
    *(float *)&double v5 = v5;
    [*(id *)(*(void *)(a1 + 32) + 120) setPermanentOffsetFactor:v5];
    id v6 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      [*(id *)(*(void *)(a1 + 32) + 120) permanentOffsetFactor];
      int v13 = 136315394;
      uint64_t v14 = "-[CSSmartSiriVolumeContextAware setSmartSiriVolumeDirection:]_block_invoke";
      __int16 v15 = 2050;
      double v16 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Permanent volume offset is enabled. Updated offset factor to %{public}f",  (uint8_t *)&v13,  0x16u);
    }
  }

  else
  {
    int v8 = *(unsigned __int8 *)(a1 + 40);
    uint64_t v9 = (os_log_s *)CSLogCategoryASV;
    BOOL v10 = os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      if (v10)
      {
        int v13 = 136315138;
        uint64_t v14 = "-[CSSmartSiriVolumeContextAware setSmartSiriVolumeDirection:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Received user intent to increase Siri Volume",  (uint8_t *)&v13,  0xCu);
      }

      [*(id *)(*(void *)(a1 + 32) + 120) setUserIntentType:2];
      [*(id *)(*(void *)(a1 + 32) + 120) increaseSiriVolumeBasedOnUserIntent];
    }

    else
    {
      if (v10)
      {
        int v13 = 136315138;
        uint64_t v14 = "-[CSSmartSiriVolumeContextAware setSmartSiriVolumeDirection:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Received user intent to decrease Siri Volume",  (uint8_t *)&v13,  0xCu);
      }

      [*(id *)(*(void *)(a1 + 32) + 120) setUserIntentType:3];
      [*(id *)(*(void *)(a1 + 32) + 120) decreaseSiriVolumeBasedOnUserIntent];
    }

    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 120), "setUserIntentVolume:");
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    -[os_log_s timeIntervalSince1970](v6, "timeIntervalSince1970");
    [*(id *)(*(void *)(a1 + 32) + 120) setUserIntentTime:(uint64_t)v11];
  }

  return [*(id *)(*(void *)(a1 + 32) + 120) storeASVStateInformation];
}

void sub_100045EBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100045EE0(uint64_t a1)
{
  double v2 = (os_log_s *)CSLogCategoryASV;
  if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
  {
    double v4 = *(float *)(a1 + 48);
    int v10 = 136315394;
    double v11 = "-[CSSmartSiriVolumeContextAware setSmartSiriVolumePercentage:]_block_invoke";
    __int16 v12 = 2050;
    double v13 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s CSSmartSiriVolumeContextAware received user intent to set Siri volume to : %{public}f",  (uint8_t *)&v10,  0x16u);
  }

  LODWORD(v3) = *(_DWORD *)(a1 + 48);
  [*(id *)(*(void *)(a1 + 32) + 120) applyLowerAndUpperBoundsToVolume:v3];
  *(float *)&double v5 = v5;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = LODWORD(v5);
  [*(id *)(*(void *)(a1 + 32) + 120) setUserIntentType:1];
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v6 timeIntervalSince1970];
  [*(id *)(*(void *)(a1 + 32) + 120) setUserIntentTime:(uint64_t)v7];

  LODWORD(v_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  [*(id *)(*(void *)(a1 + 32) + 120) setUserIntentVolume:v8];
  return [*(id *)(*(void *)(a1 + 32) + 120) storeASVStateInformation];
}

void sub_10004601C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100046034(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100046044(uint64_t a1)
{
}

void sub_10004604C(uint64_t a1)
{
  double v2 = (os_log_s *)CSLogCategoryASV;
  if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    v111 = "-[CSSmartSiriVolumeContextAware getVolumeForTTSType:withOverrideMediaVolume:WithRequestTime:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolumeContextAware received call to send latest SSV volume",  buf,  0xCu);
  }

  double v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  v107 = (void *)objc_claimAutoreleasedReturnValue([v3 UUIDString]);

  double v4 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 getSSVLogFilePathWithSessionIdentifier:v107]);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  double v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  uint64_t v8 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v8 + 106))
  {
    if (*(void *)(a1 + 72) == 3LL)
    {
      uint64_t v9 = (os_log_s *)CSLogCategoryASV;
      if (!os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_10;
      }
      *(_DWORD *)__int128 buf = 136315138;
      v111 = "-[CSSmartSiriVolumeContextAware getVolumeForTTSType:withOverrideMediaVolume:WithRequestTime:]_block_invoke";
      double v11 = "%s SmartSiriVolumeContextAware device in OOBE mode";
      goto LABEL_9;
    }

    unsigned int v29 = [(id)v8 _isUserIntentValid:*(void *)(v8 + 120)];
    __int16 v30 = (os_log_s *)CSLogCategoryASV;
    BOOL v31 = os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT);
    if (v29)
    {
      if (v31)
      {
        *(_DWORD *)__int128 buf = 136315138;
        v111 = "-[CSSmartSiriVolumeContextAware getVolumeForTTSType:withOverrideMediaVolume:WithRequestTime:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolumeContextAware intent based volume is valid",  buf,  0xCu);
      }

      [*(id *)(*(void *)(a1 + 32) + 120) userIntentVolume];
      *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v32;
      id v33 = (os_log_s *)CSLogCategoryASV;
      if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
      {
        double v34 = *(float *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
        *(_DWORD *)__int128 buf = 136315394;
        v111 = "-[CSSmartSiriVolumeContextAware getVolumeForTTSType:withOverrideMediaVolume:WithRequestTime:]_block_invoke";
        __int16 v112 = 2050;
        double v113 = v34;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolumeContextAware intent based volume: %{public}f",  buf,  0x16u);
      }

      __int128 v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v35 timeIntervalSince1970];
      [*(id *)(*(void *)(a1 + 32) + 120) setLatestVolumeTime:(uint64_t)v36];

      LODWORD(v37) = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
      [*(id *)(*(void *)(a1 + 32) + 120) setLatestVolume:v37];
      id v38 = objc_alloc(&OBJC_CLASS___CSSmartSiriVolumeEstimate);
      LODWORD(v39) = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
      __int128 v40 = -[CSSmartSiriVolumeEstimate initWithVolumeEstimate:debugLogFile:]( v38,  "initWithVolumeEstimate:debugLogFile:",  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  v39);
      uint64_t v41 = *(void *)(*(void *)(a1 + 56) + 8LL);
      id v42 = *(void **)(v41 + 40);
      *(void *)(v41 + 40) = v40;

      v130 = @"TTSVolume";
      LODWORD(v43) = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
      __int16 v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v43));
      v131 = v44;
      id v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v131,  &v130,  1LL));

      uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
      [v45 logEventWithType:4702 context:v26];

      v46 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
      LODWORD(v44) = [v46 smartSiriVolumeContextAwareLoggingEnabled];

      if ((_DWORD)v44) {
        goto LABEL_13;
      }
      goto LABEL_14;
    }

    if (v31)
    {
      *(_DWORD *)__int128 buf = 136315138;
      v111 = "-[CSSmartSiriVolumeContextAware getVolumeForTTSType:withOverrideMediaVolume:WithRequestTime:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolumeContextAware proceeding with volume computation as user intent not valid",  buf,  0xCu);
    }

    uint64_t v47 = *(void *)(a1 + 72);
    if (v47 == 4 || v47 == 1)
    {
      uint64_t v48 = *(void *)(a1 + 32);
      __int16 v49 = *(void **)(v48 + 96);
      if (*(_BYTE *)(v48 + 105))
      {
        [v49 getMeanBufferStrengthForSoundType:1];
        float v53 = *(float *)&v50;
        id v54 = 0LL;
        id v55 = 0LL;
        uint64_t v56 = 0LL;
        id v57 = 0LL;
LABEL_28:
        float v58 = 0.0;
LABEL_34:
        float v62 = 0.0;
LABEL_35:
        *(float *)&double v50 = v62;
        *(float *)&double v51 = v53;
        *(float *)&double v52 = v58;
        [*(id *)(a1 + 32) _computeTTSVolumeForSpeechLevel:v55 andMusicLevel:v54 andSpeakerDistance:v56 andNoiseActivityLevel:v50 andNoiseActivityCount:v51 wasVoiceTrigger:v52];
        *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v63;
        v64 = (os_log_s *)CSLogCategoryASV;
        if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
        {
          double v65 = *(float *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
          *(_DWORD *)__int128 buf = 136315394;
          v111 = "-[CSSmartSiriVolumeContextAware getVolumeForTTSType:withOverrideMediaVolume:WithRequestTime:]_block_invoke";
          __int16 v112 = 2050;
          double v113 = v65;
          _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "%s CSSmartSiriVolumeContextAware instantaneous volume is: %{public}f",  buf,  0x16u);
        }

        v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v66 timeIntervalSince1970];
        [*(id *)(*(void *)(a1 + 32) + 120) setLatestVolumeTime:(uint64_t)v67];

        v68 = *(id **)(a1 + 32);
        int v69 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
        id v70 = [v68[15] latestVolumeTime];
        LODWORD(v71) = v69;
        [v68 _applyTemporalSmoothingToSiriVolume:v70 ArrivedAt:v71];
        *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = LODWORD(v72);
        if (*(void *)(a1 + 72) == 5LL)
        {
          LODWORD(v72) = *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
          [*(id *)(a1 + 32) _applyDropInCallAnnouncementBounds:v72];
          *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = v73;
        }

        if ([*(id *)(*(void *)(a1 + 32) + 120) permanentOffsetIsEnabled])
        {
          float v75 = *(float *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
          [*(id *)(*(void *)(a1 + 32) + 120) permanentOffsetFactor];
          *(float *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = v75 * *(float *)&v74;
        }

        LODWORD(v74) = *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
        [*(id *)(*(void *)(a1 + 32) + 120) applyLowerAndUpperBoundsToVolume:v74];
        *(float *)&double v76 = v76;
        *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = LODWORD(v76);
        v77 = (os_log_s *)CSLogCategoryASV;
        if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
        {
          double v79 = *(float *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
          *(_DWORD *)__int128 buf = 136315394;
          v111 = "-[CSSmartSiriVolumeContextAware getVolumeForTTSType:withOverrideMediaVolume:WithRequestTime:]_block_invoke";
          __int16 v112 = 2050;
          double v113 = v79;
          _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEFAULT,  "%s CSSmartSiriVolumeContextAware temporally smoothed (final) volume is: %{public}f",  buf,  0x16u);
        }

        LODWORD(v7_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
        [*(id *)(*(void *)(a1 + 32) + 120) setLatestVolume:v78];
        v80 = (os_log_s *)CSLogCategoryASV;
        if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
        {
          float v81 = *(float *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
          unsigned int v82 = [*(id *)(*(void *)(a1 + 32) + 120) permanentOffsetIsEnabled];
          [*(id *)(*(void *)(a1 + 32) + 120) permanentOffsetFactor];
          *(_DWORD *)__int128 buf = 136317442;
          v111 = "-[CSSmartSiriVolumeContextAware getVolumeForTTSType:withOverrideMediaVolume:WithRequestTime:]_block_invoke";
          __int16 v112 = 2050;
          double v113 = v81;
          __int16 v114 = 2050;
          double v115 = v62;
          __int16 v116 = 2050;
          double v117 = v53;
          __int16 v118 = 2050;
          id v119 = v55;
          __int16 v120 = 2050;
          double v121 = v58;
          __int16 v122 = 2050;
          id v123 = v54;
          __int16 v124 = 1026;
          int v125 = v56;
          __int16 v126 = 1026;
          unsigned int v127 = v82;
          __int16 v128 = 2050;
          double v129 = v83;
          _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolumeContextAware TTS: %{public}f - SpeechRMS: %{public}f MusicRMS: %{public}f SpeakerDistance: %{public}ld noiseActivity: %{public}f noiseActivityCount: %{public}llu isVoiceTrigger: %{public}d permanent OffsetIsEnabled: %{public}d permanentOffsetFactor: %{public}f",  buf,  0x5Eu);
        }

        v84 = objc_alloc(&OBJC_CLASS___CSSmartSiriVolumeEstimate);
        LODWORD(v85) = *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
        v86 = -[CSSmartSiriVolumeEstimate initWithVolumeEstimate:debugLogFile:]( v84,  "initWithVolumeEstimate:debugLogFile:",  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  v85);
        uint64_t v87 = *(void *)(*(void *)(a1 + 56) + 8LL);
        v88 = *(void **)(v87 + 40);
        *(void *)(v87 + 40) = v86;

        v108[0] = @"TTSVolume";
        LODWORD(v89) = *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
        v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v89));
        v109[0] = v106;
        v108[1] = @"speechSignalLevel";
        *(float *)&double v90 = v62;
        v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v90));
        v109[1] = v91;
        v108[2] = @"musicSignalLevel";
        *(float *)&double v92 = v53;
        v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v92));
        v109[2] = v93;
        v108[3] = @"speakerDist";
        v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v55));
        v109[3] = v94;
        v108[4] = @"noiseActivityLevel";
        *(float *)&double v95 = v58;
        v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v95));
        v109[4] = v96;
        v108[5] = @"noiseActivityCount";
        v97 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v54));
        v109[5] = v97;
        v108[6] = @"voiceTriggerRequestUID";
        v98 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v57));
        v109[6] = v98;
        v108[7] = @"isVoiceTrigger";
        v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v56));
        v109[7] = v99;
        v108[8] = @"timeStamp";
        v100 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _timeStampString]);
        v109[8] = v100;
        id v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v109,  v108,  9LL));

        v101 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
        [v101 logEventWithType:4702 context:v26];

        v102 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
        LODWORD(v97) = [v102 smartSiriVolumeContextAwareLoggingEnabled];

        if ((_DWORD)v97) {
          [*(id *)(a1 + 32) _logSSVMetrics:v26 toPath:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
        }
        goto LABEL_14;
      }

      [v49 getMeanBufferStrengthForSoundType:0];
      float v58 = *(float *)&v50;
      id v54 = 0LL;
      id v55 = 0LL;
      uint64_t v56 = 0LL;
      id v57 = 0LL;
    }

    else
    {
      id v57 = [*(id *)(*(void *)(a1 + 32) + 96) getVoiceTriggerTimeForLastVoiceTrigger];
      +[CSFTimeUtils hostTimeToSeconds:]( &OBJC_CLASS___CSFTimeUtils,  "hostTimeToSeconds:",  *(void *)(a1 + 80) - (void)v57);
      uint64_t v59 = *(void *)(a1 + 32);
      v60 = *(void **)(v59 + 96);
      if (v61 <= *(float *)(v59 + 176))
      {
        if (*(_BYTE *)(v59 + 105))
        {
          [v60 getMusicLevelForLastVoiceTrigger];
          float v53 = v103;
          id v54 = 0LL;
          float v58 = 0.0;
        }

        else
        {
          id v54 = [v60 getNoiseActivityForLastVoiceTrigger];
          float v58 = v104;
          float v53 = 0.0;
        }

        [*(id *)(*(void *)(a1 + 32) + 96) getSpeechLevelForLastVoiceTrigger];
        float v62 = v105;
        id v55 = [*(id *)(*(void *)(a1 + 32) + 96) getDistanceForLastVoiceTrigger];
        uint64_t v56 = 1LL;
        goto LABEL_35;
      }

      if (*(_BYTE *)(v59 + 105))
      {
        [v60 getMeanBufferStrengthForSoundType:1];
        float v53 = *(float *)&v50;
        id v54 = 0LL;
        id v55 = 0LL;
        uint64_t v56 = 0LL;
        goto LABEL_28;
      }

      [v60 getMeanBufferStrengthForSoundType:0];
      float v58 = *(float *)&v50;
      id v54 = 0LL;
      id v55 = 0LL;
      uint64_t v56 = 0LL;
    }

    float v53 = 0.0;
    goto LABEL_34;
  }

  uint64_t v9 = (os_log_s *)CSLogCategoryASV;
  if (!os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_10;
  }
  *(_DWORD *)__int128 buf = 136315138;
  v111 = "-[CSSmartSiriVolumeContextAware getVolumeForTTSType:withOverrideMediaVolume:WithRequestTime:]_block_invoke";
  double v11 = "%s SmartSiriVolumeContextAware has been disabled by user";
LABEL_9:
  _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v11, buf, 0xCu);
LABEL_10:
  __int16 v12 = *(_DWORD **)(a1 + 32);
  LODWORD(v10) = v12[38];
  [v12 lowerBoundTTSVolumeWhenAdaptiveVolumeDisabled:v10];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v13;
  uint64_t v14 = (os_log_s *)CSLogCategoryASV;
  if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
  {
    double v15 = *(float *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    *(_DWORD *)__int128 buf = 136315394;
    v111 = "-[CSSmartSiriVolumeContextAware getVolumeForTTSType:withOverrideMediaVolume:WithRequestTime:]_block_invoke";
    __int16 v112 = 2050;
    double v113 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolumeContextAware set Siri TTS volume to : %{public}f",  buf,  0x16u);
  }

  double v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v16 timeIntervalSince1970];
  [*(id *)(*(void *)(a1 + 32) + 120) setLatestVolumeTime:(uint64_t)v17];

  LODWORD(v1_Block_object_dispose(va, 8) = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  [*(id *)(*(void *)(a1 + 32) + 120) setLatestVolume:v18];
  __int128 v19 = objc_alloc(&OBJC_CLASS___CSSmartSiriVolumeEstimate);
  LODWORD(v20) = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  __int128 v21 = -[CSSmartSiriVolumeEstimate initWithVolumeEstimate:debugLogFile:]( v19,  "initWithVolumeEstimate:debugLogFile:",  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL),  v20);
  uint64_t v22 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v23 = *(void **)(v22 + 40);
  *(void *)(v22 + 40) = v21;

  v132 = @"TTSVolume";
  LODWORD(v24) = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  __int16 v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v24));
  v133 = v25;
  id v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v133,  &v132,  1LL));

  __int16 v27 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
  [v27 logEventWithType:4702 context:v26];

  id v28 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
  LODWORD(v25) = [v28 smartSiriVolumeContextAwareLoggingEnabled];

  if ((_DWORD)v25) {
LABEL_13:
  }
    [*(id *)(a1 + 32) _logSSVMetrics:v26 toPath:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
LABEL_14:
}

void sub_100046C8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_100046DF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v2 + 106) && [(id)v2 _isUserIntentValid:*(void *)(v2 + 120)])
  {
    double v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v3 timeIntervalSince1970];
    [*(id *)(*(void *)(a1 + 32) + 120) setUserIntentTime:(uint64_t)v4];

    uint64_t v5 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      double v7 = "-[CSSmartSiriVolumeContextAware siriClientBehaviorMonitorReleasedAudioSession:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolumeContextAware resetting intent timer. User interaction happened while intent was valid",  (uint8_t *)&v6,  0xCu);
    }
  }

void sub_100046EE0(_Unwind_Exception *exception_object)
{
}

void sub_100046EF8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) enablePolicy]);
  unsigned int v3 = [v2 isEnabled];

  if (v3) {
    [*(id *)(a1 + 32) _startListenPolling];
  }
}

void sub_100046F50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100046F60(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1 == 2)
  {
    *(_BYTE *)(*(void *)(a1 + 32) + 105LL) = 0;
    [*(id *)(*(void *)(a1 + 32) + 96) resetMusicBuffer];
  }

  else if (v1 == 1)
  {
    *(_BYTE *)(*(void *)(a1 + 32) + 105LL) = 1;
  }

  else
  {
    *(_BYTE *)(*(void *)(a1 + 32) + 105LL) = 1;
    uint64_t v2 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315138;
      double v4 = "-[CSSmartSiriVolumeContextAware CSMediaPlayingMonitor:didReceiveMediaPlayingChanged:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s SmartSiriVolumeContextAware received unknown media playing state, let's assume media is playing.",  (uint8_t *)&v3,  0xCu);
    }
  }

void sub_100047070(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 106LL) = *(_BYTE *)(a1 + 40);
  uint64_t v2 = (os_log_s *)CSLogCategoryASV;
  if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 106LL);
    int v4 = 136315394;
    uint64_t v5 = "-[CSSmartSiriVolumeContextAware CSAutomaticVolumeEnabledMonitor:didReceiveEnabled:]_block_invoke";
    __int16 v6 = 1026;
    int v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolumeContextAware Smart Volume Button changed. Adaptive Volume Enabled: %{public}d",  (uint8_t *)&v4,  0x12u);
  }

  if (!*(_BYTE *)(a1 + 40))
  {
    [*(id *)(*(void *)(a1 + 32) + 120) setPermanentOffsetIsEnabled:0];
    [*(id *)(*(void *)(a1 + 32) + 120) storeASVStateInformation];
  }

void sub_10004715C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (!v2) {
    goto LABEL_10;
  }
  uint64_t v3 = kVTEItriggerStartSampleCount;
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:kVTEItriggerStartSampleCount]);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEItriggerEndSampleCount]);
  if (!v5)
  {
LABEL_9:

    goto LABEL_10;
  }

  __int16 v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEIAudioProviderUUID]);
  if (!v6)
  {

    goto LABEL_9;
  }

  uint64_t v7 = kVTEIextraSamplesAtStart;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEIextraSamplesAtStart]);

  if (v8)
  {
    +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
    *(void *)(*(void *)(a1 + 40) + 168LL) = (uint64_t)v9;
    double v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v3]);
    double v11 = (char *)[v10 unsignedIntegerValue];
    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v7]);
    id v13 = [v12 unsignedIntegerValue];

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v7]);
    id v15 = [v14 unsignedIntegerValue];
    unint64_t v16 = *(void *)(*(void *)(a1 + 40) + 392LL);

    if ((unint64_t)v15 <= v16)
    {
      __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v7]);
      double v17 = (char *)[v19 unsignedIntegerValue];
    }

    else
    {
      double v17 = *(char **)(*(void *)(a1 + 40) + 392LL);
    }

    double v20 = objc_alloc_init(&OBJC_CLASS___CSAudioStartStreamOption);
    -[CSAudioStartStreamOption setRequestHistoricalAudioDataSampleCount:]( v20,  "setRequestHistoricalAudioDataSampleCount:",  1LL);
    int64_t v21 = &v11[(void)v13] - v17;
    -[CSAudioStartStreamOption setStartRecordingSampleCount:](v20, "setStartRecordingSampleCount:", v21);
    [*(id *)(*(void *)(a1 + 40) + 96) setupDistanceAudioStreamAnalyzer];
    uint64_t v22 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v28 = "-[CSSmartSiriVolumeContextAware didDetectKeywordWithResult:]_block_invoke";
      __int16 v29 = 2050;
      int64_t v30 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolumeContextAware starting distance processing historical audio stream with startSampleCount: %{public}lu",  buf,  0x16u);
    }

    uint64_t v23 = *(void **)(*(void *)(a1 + 40) + 480LL);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_100047714;
    v25[3] = &unk_10022E730;
    double v24 = v20;
    id v26 = v24;
    [v23 startAudioStreamWithOption:v24 completion:v25];

    return;
  }

void sub_100047474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000474E8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = kVTEItriggerStartSampleCount;
    uint64_t v4 = objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:kVTEItriggerStartSampleCount]);
    if (v4)
    {
      id v15 = (id)v4;
      uint64_t v5 = kVTEItriggerEndSampleCount;
      __int16 v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEItriggerEndSampleCount]);
      if (v6)
      {
        uint64_t v7 = kVTEItriggerStartMachTime;
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEItriggerStartMachTime]);

        if (v8)
        {
          float v9 = *(void **)(*(void *)(a1 + 40) + 96LL);
          id v16 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v3]);
          id v10 = [v16 unsignedIntegerValue];
          double v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v5]);
          id v12 = [v11 unsignedIntegerValue];
          id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v7]);
          objc_msgSend( v9,  "updateSpeechAndMusicStrengthsForVoiceTriggerStartingAtSample:andEndingAtSample:andVoiceTriggerMachTime:",  v10,  v12,  objc_msgSend(v13, "unsignedIntegerValue"));

          return;
        }
      }

      else
      {
      }
    }
  }

  uint64_t v14 = (os_log_s *)CSLogCategoryASV;
  if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315138;
    double v18 = "-[CSSmartSiriVolumeContextAware didDetectKeywordWithResult:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s SmartSiriVolumeContextAware got empty VT event!",  buf,  0xCu);
  }

void sub_1000476D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100047714(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    __int16 v6 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [*(id *)(a1 + 32) startRecordingSampleCount];
      int v8 = 136315906;
      float v9 = "-[CSSmartSiriVolumeContextAware didDetectKeywordWithResult:]_block_invoke";
      __int16 v10 = 2114;
      double v11 = @"NO";
      __int16 v12 = 2114;
      id v13 = v5;
      __int16 v14 = 2050;
      id v15 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Start audio stream successfully ? %{public}@, error : %{public}@, startRecordingSampleCount=%{public}lu",  (uint8_t *)&v8,  0x2Au);
    }
  }
}

void sub_100047810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004782C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) enablePolicy]);
  unsigned int v3 = [v2 isEnabled];

  if (v3) {
    [*(id *)(a1 + 32) _startListenPolling];
  }
}

void sub_100047884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100047894(id result)
{
  uint64_t v1 = *((void *)result + 4);
  uint64_t v2 = *(void *)(v1 + 168);
  if ((v2 & 0x8000000000000000LL) == 0)
  {
    *(void *)(v1 + 16_Block_object_dispose(va, 8) = v2 - *((void *)result + 6);
    return objc_msgSend( *((id *)result + 4),  "_subChunkAndProcessAudioChunk:maxSamplesToHandle:ofType:",  *((void *)result + 5),  objc_msgSend(*((id *)result + 5), "numSamples"),  2);
  }

  return result;
}

id sub_1000478EC(uint64_t a1)
{
  id result = objc_msgSend( *(id *)(a1 + 32),  "_subChunkAndProcessAudioChunk:maxSamplesToHandle:ofType:",  *(void *)(a1 + 40),  objc_msgSend(*(id *)(a1 + 40), "numSamples"),  0);
  unsigned int v3 = *(_BYTE **)(a1 + 32);
  if (v3[105]) {
    return objc_msgSend( v3,  "_subChunkAndProcessAudioChunk:maxSamplesToHandle:ofType:",  *(void *)(a1 + 40),  objc_msgSend(*(id *)(a1 + 40), "numSamples"),  1);
  }
  return result;
}

void *sub_100047968(void *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[7];
  if (v3)
  {
    id result = memmove( (void *)(*(void *)(*(void *)(result[4] + 8LL) + 24LL)
                      + 4LL * *(unsigned int *)(*(void *)(result[5] + 8LL) + 24LL)),
               (const void *)(result[6] + 4 * v3 * a2),
               4 * v3);
    LODWORD(v3) = *((_DWORD *)v2 + 14);
  }

  *(_DWORD *)(*(void *)(v2[5] + 8LL) + 24LL) += v3;
  return result;
}

void sub_1000479D0(char **a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    __int128 v19 = &v3[4 * a2];
    goto LABEL_15;
  }

  unint64_t v6 = a2 - v5;
  id v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 2)
  {
    bzero(a1[1], 4 * v6);
    __int128 v19 = &v4[4 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }

  if (a2 >> 62) {
    sub_10001E948();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 1;
  if (v8 >> 1 <= a2) {
    uint64_t v9 = a2;
  }
  else {
    unint64_t v10 = v9;
  }
  double v11 = (char *)sub_10001E95C(v10);
  __int16 v12 = *a1;
  id v13 = a1[1];
  __int16 v14 = &v11[4 * v5];
  id v16 = &v11[4 * v15];
  bzero(v14, 4 * v6);
  double v17 = &v14[4 * v6];
  while (v13 != v12)
  {
    int v18 = *((_DWORD *)v13 - 1);
    v13 -= 4;
    *((_DWORD *)v14 - 1) = v18;
    v14 -= 4;
  }

  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12) {
    operator delete(v12);
  }
}

id sub_100047AD0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 96) setAsset:*(void *)(a1 + 40)];
}

id sub_100047B08(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 144) = [*(id *)(a1 + 40) SSVDistanceChannelBitset];
  [*(id *)(a1 + 32) _resetDistance];
  return [*(id *)(*(void *)(a1 + 32) + 96) setDistanceAsset:*(void *)(a1 + 40)];
}

void sub_100047B44(id a1, BOOL a2, NSError *a3)
{
  uint64_t v4 = a3;
  if (!a2)
  {
    unint64_t v5 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSError description](v4, "description"));
      int v7 = 136315394;
      uint64_t v8 = "-[CSSmartSiriVolumeContextAware _stopListening]_block_invoke";
      __int16 v9 = 2114;
      unint64_t v10 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Failed to stop audio stream : %{public}@",  (uint8_t *)&v7,  0x16u);
    }
  }
}

void sub_100047C30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100047C4C(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t, id))(v5 + 16))(v5, a2, v6);
  }
}

void sub_100047C98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100047CAC(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(v6 + 8);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100047D50;
  v10[3] = &unk_10022E678;
  char v14 = a2;
  id v11 = v5;
  uint64_t v12 = v6;
  id v13 = v7;
  id v9 = v5;
  dispatch_async(v8, v10);
}

uint64_t sub_100047D50(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryASV;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 56);
    uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) description]);
    id v5 = (void *)v4;
    uint64_t v6 = @"YES";
    *(_DWORD *)id v11 = 136315650;
    *(void *)&void v11[4] = "-[CSSmartSiriVolumeContextAware _startListenWithCompletion:]_block_invoke_3";
    *(_WORD *)&v11[12] = 2114;
    if (!v3) {
      uint64_t v6 = @"NO";
    }
    *(void *)&v11[14] = v6;
    __int16 v12 = 2114;
    uint64_t v13 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Start audio stream successfully ? %{public}@, error : %{public}@",  v11,  0x20u);
  }

  int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) enablePolicy]);
  unsigned __int8 v8 = [v7 isEnabled];

  if ((v8 & 1) == 0)
  {
    id v9 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)id v11 = 136315138;
      *(void *)&void v11[4] = "-[CSSmartSiriVolumeContextAware _startListenWithCompletion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s Received didStartRecording when Siri is off",  v11,  0xCu);
    }

    objc_msgSend(*(id *)(a1 + 40), "_stopListening", *(_OWORD *)v11);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100047EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100047F08(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      (*(void (**)(uint64_t, uint64_t, void))(v6 + 16))(v6, 1LL, 0LL);
    }
  }

  else
  {
    int v7 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
      *(_DWORD *)location = 136315394;
      *(void *)&location[4] = "-[CSSmartSiriVolumeContextAware _startListenPollingWithInterval:completion:]_block_invoke";
      __int16 v15 = 2114;
      id v16 = v10;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s listen polling has failed : %{public}@",  location,  0x16u);
    }

    objc_initWeak((id *)location, *(id *)(a1 + 32));
    dispatch_time_t v8 = dispatch_time(0LL, (uint64_t)(*(double *)(a1 + 48) * 1000000000.0));
    id v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000480F8;
    block[3] = &unk_10022E600;
    objc_copyWeak(v13, (id *)location);
    v13[1] = *(id *)(a1 + 48);
    id v12 = *(id *)(a1 + 40);
    dispatch_after(v8, v9, block);

    objc_destroyWeak(v13);
    objc_destroyWeak((id *)location);
  }
}

void sub_1000480D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000480F8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _startListenPollingWithInterval:*(void *)(a1 + 32) completion:*(double *)(a1 + 48)];
}

void sub_100048138( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t sub_10004814C(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 104LL) = 0;
  return result;
}

void sub_100048158(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 105LL) = *(void *)(a1 + 40) == 1LL;
  uint64_t v2 = (os_log_s *)CSLogCategoryASV;
  if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(*(void *)(a1 + 32) + 105LL)) {
      int v3 = @"playing";
    }
    else {
      int v3 = @"NOT playing";
    }
    int v4 = 136315394;
    id v5 = "-[CSSmartSiriVolumeContextAware _initializeMediaPlaybackState]_block_invoke";
    __int16 v6 = 2114;
    int v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolumeContextAware received MediaRemote initial state as %{public}@",  (uint8_t *)&v4,  0x16u);
  }

id sub_10004823C(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v2 = *(void **)(a1 + 32);
  if (v1) {
    return [v2 _startListenPolling];
  }
  else {
    return [v2 _stopListening];
  }
}

void sub_100048250(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[CSSmartSiriVolumeRunPolicyFactory smartSiriVolumeRunPolicy]( &OBJC_CLASS___CSSmartSiriVolumeRunPolicyFactory,  "smartSiriVolumeRunPolicy"));
  [*(id *)(a1 + 32) setEnablePolicy:v2];

  int v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) enablePolicy]);
  unsigned int v4 = [v3 isEnabled];

  if (v4) {
    [*(id *)(a1 + 32) _startListenPolling];
  }
  objc_initWeak(&location, *(id *)(a1 + 32));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) enablePolicy]);
  id v9 = _NSConcreteStackBlock;
  uint64_t v10 = 3221225472LL;
  id v11 = sub_100048408;
  id v12 = &unk_10022E430;
  objc_copyWeak(&v13, &location);
  [v5 setCallback:&v9];

  __int16 v6 = (void *)objc_claimAutoreleasedReturnValue( +[CSAudioServerCrashMonitor sharedInstance]( &OBJC_CLASS___CSAudioServerCrashMonitor,  "sharedInstance",  v9,  v10,  v11,  v12));
  [v6 addObserver:*(void *)(a1 + 32)];

  int v7 = (void *)objc_claimAutoreleasedReturnValue( +[CSSiriClientBehaviorMonitor sharedInstance]( &OBJC_CLASS___CSSiriClientBehaviorMonitor,  "sharedInstance"));
  [v7 registerObserver:*(void *)(a1 + 32)];

  dispatch_time_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[CSAutomaticVolumeEnabledMonitor sharedInstance]( &OBJC_CLASS___CSAutomaticVolumeEnabledMonitor,  "sharedInstance"));
  [v8 addObserver:*(void *)(a1 + 32)];

  [*(id *)(a1 + 32) _initializeMediaPlaybackState];
  objc_destroyWeak(&v13);
  objc_destroyWeak(&location);
}

void sub_1000483AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100048408(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleEnablePolicyEvent:a2];
}

void sub_100048444( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10004908C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observerAndOptions]);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v2 keyEnumerator]);

  uint64_t v3 = objc_claimAutoreleasedReturnValue([v6 nextObject]);
  if (v3)
  {
    unsigned int v4 = (void *)v3;
    do
    {
      if ((objc_opt_respondsToSelector( v4,  "attSiriSignalProvider:silenceFramesCountMs:silenceProbability:silenceDurationMs:processedAudioMs:deviceHas BoronEnabled:latestBoronActiveSampleCount:") & 1) != 0) {
        [v4 attSiriSignalProvider:*(void *)(a1 + 32) silenceFramesCountMs:*(unsigned __int8 *)(a1 + 80) silenceProbability:*(void *)(a1 + 72) silenceDurationMs:*(double *)(a1 + 40) processedAudioMs:*(double *)(a1 + 48) deviceHasBoro nEnabled:*(double *)(a1 + 56) latestBoronActiveSampleCount:*(double *)(a1 + 64)];
      }
      uint64_t v5 = objc_claimAutoreleasedReturnValue([v6 nextObject]);

      unsigned int v4 = (void *)v5;
    }

    while (v5);
  }
}

void sub_100049140(id a1)
{
  int v1 = (os_log_s *)CSLogCategoryAttending;
  if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    uint64_t v3 = "-[CSAttSiriSignalProvider audioStreamProvider:audioChunkForTVAvailable:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v2, 0xCu);
  }

void sub_1000491E4(uint64_t a1)
{
  unint64_t v2 = qword_10027FD68;
  if (!(v2 % +[CSUtils loggingHeartbeatRate](&OBJC_CLASS___CSUtils, "loggingHeartbeatRate")))
  {
    uint64_t v3 = (void *)CSLogCategoryAttending;
    if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v4 = *(void **)(a1 + 32);
      uint64_t v5 = v3;
      int v11 = 136315650;
      id v12 = "-[CSAttSiriSignalProvider audioStreamProvider:audioBufferAvailable:]_block_invoke";
      __int16 v13 = 2050;
      id v14 = [v4 startSampleCount];
      __int16 v15 = 2050;
      uint64_t v16 = qword_10027FD68;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s Received audio buffer with startSampleCount %{public}llu, heartbeat = %{public}llu",  (uint8_t *)&v11,  0x20u);
    }
  }

  ++qword_10027FD68;
  [*(id *)(*(void *)(a1 + 40) + 24) addAudio:*(void *)(a1 + 32)];
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) observerAndOptions]);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 keyEnumerator]);

  uint64_t v8 = objc_claimAutoreleasedReturnValue([v7 nextObject]);
  if (v8)
  {
    id v9 = (void *)v8;
    do
    {
      if ((objc_opt_respondsToSelector(v9, "attSiriSignalProvider:audioBufferAvailable:") & 1) != 0) {
        [v9 attSiriSignalProvider:*(void *)(a1 + 40) audioBufferAvailable:*(void *)(a1 + 32)];
      }
      uint64_t v10 = objc_claimAutoreleasedReturnValue([v7 nextObject]);

      id v9 = (void *)v10;
    }

    while (v10);
  }
}

id sub_100049380(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)CSLogCategoryAttending;
  if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[CSAttSiriSignalProvider audioStreamProvider:didStopStreamUnexpectedly:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  [*(id *)(a1 + 32) _deliverSignalProviderDidStopUnexpectedly];
  [*(id *)(a1 + 32) _stopAllAnalyzers];
  return [*(id *)(a1 + 32) _resetAudioStreamObserverContext];
}

id sub_100049440(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cancelAudioStreamHold];
}

void sub_100049448(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = *(void **)(v1 + 24);
  double v3 = *(double *)(a1 + 48);
  if (*(_BYTE *)(a1 + 72))
  {
    double v4 = *(double *)(a1 + 56);
    uint64_t v5 = *(void *)(a1 + 64);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100049550;
    void v9[3] = &unk_10022B0C0;
    v9[4] = v1;
    id v6 = &v10;
    id v10 = *(id *)(a1 + 40);
    [v2 getStartSpeechInfoForProcessedAudio:v5 prependedAudio:v9 speechDetectionSamples:v3 completion:v4];
  }

  else
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1000495CC;
    v7[3] = &unk_10022B0E8;
    void v7[4] = v1;
    id v6 = &v8;
    id v8 = *(id *)(a1 + 40);
    [v2 getSampleCountByProcessedAudioInMs:v7 completion:v3];
  }
}

void sub_100049550(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  double v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(dispatch_queue_s **)(v3 + 16);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000496E4;
  v6[3] = &unk_10022B098;
  char v9 = a3;
  v6[4] = v3;
  uint64_t v8 = a2;
  id v7 = v4;
  dispatch_async(v5, v6);
}

void sub_1000495CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  double v4 = *(dispatch_queue_s **)(v2 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100049644;
  block[3] = &unk_10022C878;
  void block[4] = v2;
  uint64_t v7 = a2;
  id v6 = v3;
  dispatch_async(v4, block);
}

void sub_100049644(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 32) streamProvider]);
  id v3 = [v2 audioStreamId];

  double v4 = (void *)objc_claimAutoreleasedReturnValue(+[CSAudioTimeConverterPool sharedInstance](&OBJC_CLASS___CSAudioTimeConverterPool, "sharedInstance"));
  id v7 = (id)objc_claimAutoreleasedReturnValue([v4 converterForAudioStreamId:v3]);

  id v5 = [v7 hostTimeFromSampleCount:a1[6]];
  uint64_t v6 = a1[5];
  if (v6) {
    (*(void (**)(uint64_t, id, void, void))(v6 + 16))(v6, v5, a1[6], 0LL);
  }
}

void sub_1000496E4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryAttending;
  if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 56);
    int v10 = 136315394;
    int v11 = "-[CSAttSiriSignalProvider fetchStartSpeechWithOwnVoiceVadByProcessedAudioInMs:fetchOwnVoiceVADSignal:prependAu"
          "dioDuration:speechDetectSampleCountThreshold:completion:]_block_invoke_3";
    __int16 v12 = 1024;
    int v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ownVVADHasSpeech:%u", (uint8_t *)&v10, 0x12u);
  }

  double v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) streamProvider]);
  id v5 = [v4 audioStreamId];

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[CSAudioTimeConverterPool sharedInstance](&OBJC_CLASS___CSAudioTimeConverterPool, "sharedInstance"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 converterForAudioStreamId:v5]);

  id v8 = [v7 hostTimeFromSampleCount:*(void *)(a1 + 48)];
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, id, void, void))(v9 + 16))( v9,  v8,  *(void *)(a1 + 48),  *(unsigned __int8 *)(a1 + 56));
  }
}

void sub_100049818(uint64_t a1)
{
  if (!*(void *)(a1 + 32))
  {
    uint64_t v16 = (os_log_s *)CSLogCategoryAttending;
    if (!os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v25 = 136315138;
    id v26 = "-[CSAttSiriSignalProvider stopWithObserver:holdAudioStream:]_block_invoke";
    double v17 = "%s Observer is nil";
    int v18 = v16;
    uint32_t v19 = 12;
    goto LABEL_22;
  }

  if ([*(id *)(a1 + 40) _observersCount])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) observerAndOptions]);
    int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:*(void *)(a1 + 32)]);

    if (v3)
    {
      double v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) observerAndOptions]);
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:*(void *)(a1 + 32)]);

      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) observerAndOptions]);
      [v6 removeObjectForKey:*(void *)(a1 + 32)];

      if (v5)
      {
        id v7 = [*(id *)(a1 + 40) _observersCount];
        id v8 = (os_log_s *)CSLogCategoryAttending;
        if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v9 = *(void *)(a1 + 32);
          int v25 = 136315650;
          id v26 = "-[CSAttSiriSignalProvider stopWithObserver:holdAudioStream:]_block_invoke";
          __int16 v27 = 2112;
          uint64_t v28 = v9;
          __int16 v29 = 2048;
          id v30 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s Stop providing signal to %@, total observers: %ld",  (uint8_t *)&v25,  0x20u);
        }

        int v10 = (void *)objc_claimAutoreleasedReturnValue([v5 attendingOptions]);
        unsigned int v11 = [v10 useVAD];

        if (v11) {
          [*(id *)(*(void *)(a1 + 40) + 24) stop];
        }
        if (v7) {
          goto LABEL_24;
        }
        *(_BYTE *)(*(void *)(a1 + 40) + 8LL) = 0;
        __int16 v12 = (os_log_s *)CSLogCategoryAttending;
        if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
        {
          int v25 = 136315138;
          id v26 = "-[CSAttSiriSignalProvider stopWithObserver:holdAudioStream:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s Stop streaming",  (uint8_t *)&v25,  0xCu);
        }

        if (*(_BYTE *)(a1 + 48))
        {
          int v13 = *(void **)(a1 + 40);
          id v14 = (void *)objc_claimAutoreleasedReturnValue([v5 attendingOptions]);
          [v14 audioStreamHoldingDurationInSec];
          objc_msgSend(v13, "_holdAudioStreamWithTimeout:");
        }

        __int16 v15 = *(void **)(*(void *)(a1 + 40) + 32LL);
        if (v15)
        {
          [v15 stopAudioStreamWithOption:0 completion:0];
LABEL_24:

          return;
        }

        uint64_t v23 = (os_log_s *)CSLogCategoryAttending;
        if (!os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_ERROR)) {
          goto LABEL_24;
        }
        int v25 = 136315138;
        id v26 = "-[CSAttSiriSignalProvider stopWithObserver:holdAudioStream:]_block_invoke";
        double v24 = "%s Audio stream not existing!";
      }

      else
      {
        uint64_t v23 = (os_log_s *)CSLogCategoryAttending;
        if (!os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_ERROR)) {
          goto LABEL_24;
        }
        int v25 = 136315138;
        id v26 = "-[CSAttSiriSignalProvider stopWithObserver:holdAudioStream:]_block_invoke";
        double v24 = "%s options is nil";
      }

      _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&v25, 0xCu);
      goto LABEL_24;
    }

    int64_t v21 = (os_log_s *)CSLogCategoryAttending;
    if (!os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_ERROR)) {
      return;
    }
    uint64_t v22 = *(void *)(a1 + 32);
    int v25 = 136315394;
    id v26 = "-[CSAttSiriSignalProvider stopWithObserver:holdAudioStream:]_block_invoke";
    __int16 v27 = 2112;
    uint64_t v28 = v22;
    double v17 = "%s Unknown observer: %@";
    int v18 = v21;
    uint32_t v19 = 22;
LABEL_22:
    _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v25, v19);
    return;
  }

  double v20 = (os_log_s *)CSLogCategoryAttending;
  if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_INFO))
  {
    int v25 = 136315138;
    id v26 = "-[CSAttSiriSignalProvider stopWithObserver:holdAudioStream:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "%s No observers in the table!",  (uint8_t *)&v25,  0xCu);
  }

void sub_100049C0C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = (os_log_s *)CSLogCategoryAttending;
    if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315138;
      uint64_t v9 = "-[CSAttSiriSignalProvider _startAudioStreamingWithSignalOptions:completion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Start failed, removing all observers",  (uint8_t *)&v8,  0xCu);
    }

    [*(id *)(a1 + 32) _resetAudioStreamObserverContext];
  }

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, uint64_t, id))(v7 + 16))(v7, a2, v5);
  }
}

void sub_100049CF4(uint64_t a1)
{
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  v24[2] = sub_100049FF8;
  v24[3] = &unk_10022E8A8;
  id v25 = *(id *)(a1 + 56);
  uint64_t v2 = objc_retainBlock(v24);
  int v3 = (void (**)(void, void))v2;
  if (*(void *)(a1 + 32))
  {
    if (*(void *)(a1 + 40))
    {
      double v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) observerAndOptions]);
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:*(void *)(a1 + 40)]);

      if (v5)
      {
        v3[2](v3, 2103LL);
      }

      else
      {
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) observerAndOptions]);
        [v6 setObject:*(void *)(a1 + 32) forKey:*(void *)(a1 + 40)];

        uint64_t v7 = (void *)CSLogCategoryAttending;
        if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v9 = *(void *)(a1 + 32);
          uint64_t v8 = *(void *)(a1 + 40);
          int v10 = *(void **)(a1 + 48);
          unsigned int v11 = v7;
          id v12 = [v10 _observersCount];
          *(_DWORD *)__int128 buf = 136315906;
          __int16 v27 = "-[CSAttSiriSignalProvider startWithSignalOptions:observer:completion:]_block_invoke";
          __int16 v28 = 2112;
          uint64_t v29 = v8;
          __int16 v30 = 2112;
          uint64_t v31 = v9;
          __int16 v32 = 2048;
          id v33 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s Start providing signal to %@ with option %@, total observers: %ld",  buf,  0x2Au);
        }

        int v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) attendingOptions]);
        unsigned int v14 = [v13 useVAD];

        if (v14)
        {
          __int16 v15 = *(void **)(*(void *)(a1 + 48) + 24LL);
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) attendingOptions]);
          id v17 = [v16 useBoron];
          int v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) attendingOptions]);
          id v19 = [v18 useOwnVoiceVAD];
          v23[0] = _NSConcreteStackBlock;
          v23[1] = 3221225472LL;
          v23[2] = sub_10004A104;
          v23[3] = &unk_10022E730;
          void v23[4] = *(void *)(a1 + 48);
          [v15 start:v17 useOwnVoiceVAD:v19 completion:v23];
        }

        uint64_t v20 = *(void *)(a1 + 48);
        if (*(_BYTE *)(v20 + 8))
        {
          uint64_t v21 = *(void *)(a1 + 56);
          if (v21) {
            (*(void (**)(uint64_t, uint64_t, void))(v21 + 16))(v21, 1LL, 0LL);
          }
        }

        else
        {
          uint64_t v22 = (os_log_s *)CSLogCategoryAttending;
          if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 136315138;
            __int16 v27 = "-[CSAttSiriSignalProvider startWithSignalOptions:observer:completion:]_block_invoke_3";
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%s Start streaming", buf, 0xCu);
            uint64_t v20 = *(void *)(a1 + 48);
          }

          *(_BYTE *)(v20 + _Block_object_dispose(va, 8) = 1;
          [*(id *)(a1 + 48) _startAudioStreamingWithSignalOptions:*(void *)(a1 + 32) completion:*(void *)(a1 + 56)];
        }
      }
    }

    else
    {
      ((void (*)(void *, uint64_t))v2[2])(v2, 2102LL);
    }
  }

  else
  {
    ((void (*)(void *, uint64_t))v2[2])(v2, 2105LL);
  }
}

void sub_100049FF8(uint64_t a1, uint64_t a2)
{
  double v4 = (os_log_s *)CSLogCategoryAttending;
  if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_ERROR))
  {
    int v7 = 136315394;
    uint64_t v8 = "-[CSAttSiriSignalProvider startWithSignalOptions:observer:completion:]_block_invoke_2";
    __int16 v9 = 2048;
    uint64_t v10 = a2;
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s start failed due to error: %lu",  (uint8_t *)&v7,  0x16u);
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  a2,  0LL));
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v6);
  }

void sub_10004A104(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(dispatch_queue_s **)(v2 + 16);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10004A160;
  v4[3] = &unk_10022EFA8;
  char v5 = a2;
  v4[4] = v2;
  dispatch_async(v3, v4);
}

id *sub_10004A160(id *result)
{
  if (!*((_BYTE *)result + 40))
  {
    uint64_t v1 = result;
    [result[4] _deliverSignalProviderDidStopUnexpectedly];
    return (id *)[v1[4] _stopAllAnalyzers];
  }

  return result;
}

void sub_10004A1DC(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSAttSiriSignalProvider);
  uint64_t v2 = (void *)qword_10027FD58;
  qword_10027FD58 = (uint64_t)v1;
}

id sub_10004A59C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _notifyObserver:a2 withEnabled:*(unsigned __int8 *)(a1 + 40)];
}

id sub_10004A5B0(uint64_t a1, void *a2)
{
  return [a2 _phraseSpotterEnabledDidChange];
}

void sub_10004A5F8(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSPhraseSpotterEnabledMonitor);
  uint64_t v2 = (void *)qword_10027FD70;
  qword_10027FD70 = (uint64_t)v1;
}

void sub_10004A9A8(void *a1)
{
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(a1[4] + 16LL);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v17 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        int v7 = *(void **)(*((void *)&v9 + 1) + 8LL * (void)i);
        uint64_t v8 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 136315394;
          unsigned int v14 = "-[CSVoiceTriggerAssetHandler notifyObservers:endpointId:]_block_invoke";
          __int16 v15 = 2112;
          uint64_t v16 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTriggerAssetHandlerDelegate: %@",  buf,  0x16u);
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v17 count:16];
    }

    while (v4);
  }
}

id sub_10004AB3C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) removeObject:*(void *)(a1 + 40)];
}

id sub_10004AB48(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) addObject:*(void *)(a1 + 40)];
}

void sub_10004AC40(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerAssetHandler assetHandlerFactoryWithDisableOnDeviceCompilation:]( &OBJC_CLASS___CSVoiceTriggerAssetHandler,  "assetHandlerFactoryWithDisableOnDeviceCompilation:",  1LL));
  id v2 = (void *)qword_10027FD90;
  qword_10027FD90 = v1;
}

void sub_10004AC70(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerAssetHandler assetHandlerFactoryWithDisableOnDeviceCompilation:]( &OBJC_CLASS___CSVoiceTriggerAssetHandler,  "assetHandlerFactoryWithDisableOnDeviceCompilation:",  0LL));
  id v2 = (void *)qword_10027FD80;
  qword_10027FD80 = v1;
}

LABEL_13:
    __int16 v122 = 0;
    goto LABEL_14;
  }

  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "-[CSBenchmarkXPCListener listener:shouldAcceptNewConnection:]";
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s CSBenchmarkXPCListener start listening",  (uint8_t *)&buf,  0xCu);
  }

  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___CSBenchmarkXPCProtocol,  self));
  *(void *)&__int128 buf = objc_opt_class(&OBJC_CLASS___NSString, v10);
  *((void *)&buf + 1) = objc_opt_class(&OBJC_CLASS___NSString, v11);
  v155 = objc_opt_class(&OBJC_CLASS___NSURL, v12);
  int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &buf, 3LL));
  unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v13));
  [v9 setClasses:v14 forSelector:"runVTSecondPassModelWithConfig:locale:withUrl:completion:" argumentIndex:0 ofReply:0];

  v153[0] = objc_opt_class(&OBJC_CLASS___NSString, v15);
  v153[1] = objc_opt_class(&OBJC_CLASS___NSString, v16);
  v153[2] = objc_opt_class(&OBJC_CLASS___NSURL, v17);
  int v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v153, 3LL));
  id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v18));
  [v9 setClasses:v19 forSelector:"runVTSecondPassModelWithConfig:locale:withUrl:completion:" argumentIndex:1 ofReply:0];

  v152[0] = objc_opt_class(&OBJC_CLASS___NSString, v20);
  v152[1] = objc_opt_class(&OBJC_CLASS___NSString, v21);
  v152[2] = objc_opt_class(&OBJC_CLASS___NSURL, v22);
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v152, 3LL));
  double v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v23));
  [v9 setClasses:v24 forSelector:"runVTSecondPassModelWithConfig:locale:withUrl:completion:" argumentIndex:2 ofReply:0];

  v151[0] = objc_opt_class(&OBJC_CLASS___NSError, v25);
  v151[1] = objc_opt_class(&OBJC_CLASS___NSString, v26);
  v151[2] = objc_opt_class(&OBJC_CLASS___NSURL, v27);
  __int16 v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v151, 3LL));
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v28));
  [v9 setClasses:v29 forSelector:"runVTSecondPassModelWithConfig:locale:withUrl:completion:" argumentIndex:0 ofReply:1];

  v150[0] = objc_opt_class(&OBJC_CLASS___NSError, v30);
  v150[1] = objc_opt_class(&OBJC_CLASS___NSString, v31);
  v150[2] = objc_opt_class(&OBJC_CLASS___NSURL, v32);
  id v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v150, 3LL));
  double v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v33));
  [v9 setClasses:v34 forSelector:"runVTSecondPassModelWithConfig:locale:withUrl:completion:" argumentIndex:1 ofReply:1];

  v149[0] = objc_opt_class(&OBJC_CLASS___NSString, v35);
  v149[1] = objc_opt_class(&OBJC_CLASS___NSURL, v36);
  double v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v149, 2LL));
  id v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v37));
  [v9 setClasses:v38 forSelector:"runLstmPhsModelWithConfig:withUrl:withConfigRoot:completion:" argumentIndex:0 ofReply:0];

  v148[0] = objc_opt_class(&OBJC_CLASS___NSString, v39);
  v148[1] = objc_opt_class(&OBJC_CLASS___NSURL, v40);
  uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v148, 2LL));
  id v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v41));
  [v9 setClasses:v42 forSelector:"runLstmPhsModelWithConfig:withUrl:withConfigRoot:completion:" argumentIndex:1 ofReply:0];

  v147[0] = objc_opt_class(&OBJC_CLASS___NSString, v43);
  v147[1] = objc_opt_class(&OBJC_CLASS___NSURL, v44);
  uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v147, 2LL));
  v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v45));
  [v9 setClasses:v46 forSelector:"runLstmPhsModelWithConfig:withUrl:withConfigRoot:completion:" argumentIndex:2 ofReply:0];

  v146[0] = objc_opt_class(&OBJC_CLASS___NSError, v47);
  v146[1] = objc_opt_class(&OBJC_CLASS___NSURL, v48);
  __int16 v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v146, 2LL));
  double v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v49));
  [v9 setClasses:v50 forSelector:"runLstmPhsModelWithConfig:withUrl:withConfigRoot:completion:" argumentIndex:0 ofReply:1];

  v145[0] = objc_opt_class(&OBJC_CLASS___NSError, v51);
  v145[1] = objc_opt_class(&OBJC_CLASS___NSURL, v52);
  float v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v145, 2LL));
  id v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v53));
  [v9 setClasses:v54 forSelector:"runLstmPhsModelWithConfig:withUrl:withConfigRoot:completion:" argumentIndex:1 ofReply:1];

  v144[0] = objc_opt_class(&OBJC_CLASS___NSString, v55);
  v144[1] = objc_opt_class(&OBJC_CLASS___NSURL, v56);
  id v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v144, 2LL));
  float v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v57));
  [v9 setClasses:v58 forSelector:"runOSDAnalyzerWithConfig:withUrl:completion:" argumentIndex:0 ofReply:0];

  v143[0] = objc_opt_class(&OBJC_CLASS___NSString, v59);
  v143[1] = objc_opt_class(&OBJC_CLASS___NSURL, v60);
  float v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v143, 2LL));
  float v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v61));
  [v9 setClasses:v62 forSelector:"runOSDAnalyzerWithConfig:withUrl:completion:" argumentIndex:1 ofReply:0];

  v142[0] = objc_opt_class(&OBJC_CLASS___NSError, v63);
  v142[1] = objc_opt_class(&OBJC_CLASS___NSURL, v64);
  double v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v142, 2LL));
  v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v65));
  [v9 setClasses:v66 forSelector:"runOSDAnalyzerWithConfig:withUrl:completion:" argumentIndex:0 ofReply:1];

  v141[0] = objc_opt_class(&OBJC_CLASS___NSError, v67);
  v141[1] = objc_opt_class(&OBJC_CLASS___NSURL, v68);
  int v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v141, 2LL));
  id v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v69));
  [v9 setClasses:v70 forSelector:"runOSDAnalyzerWithConfig:withUrl:completion:" argumentIndex:1 ofReply:1];

  v140 = objc_opt_class(&OBJC_CLASS___NSString, v71);
  double v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v140, 1LL));
  int v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v72));
  [v9 setClasses:v73 forSelector:"pingpong:completion:" argumentIndex:0 ofReply:0];

  v139 = objc_opt_class(&OBJC_CLASS___NSString, v74);
  float v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v139, 1LL));
  double v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v75));
  [v9 setClasses:v76 forSelector:"pingpong:completion:" argumentIndex:0 ofReply:1];

  v138 = objc_opt_class(&OBJC_CLASS___NSString, v77);
  double v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v138, 1LL));
  double v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v78));
  [v9 setClasses:v79 forSelector:"runODLDModelWithConfig:locale:inputText:completion:" argumentIndex:0 ofReply:0];

  v137 = objc_opt_class(&OBJC_CLASS___NSString, v80);
  float v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v137, 1LL));
  unsigned int v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v81));
  [v9 setClasses:v82 forSelector:"runODLDModelWithConfig:locale:inputText:completion:" argumentIndex:1 ofReply:0];

  v136 = objc_opt_class(&OBJC_CLASS___NSString, v83);
  v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v136, 1LL));
  double v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v84));
  [v9 setClasses:v85 forSelector:"runODLDModelWithConfig:locale:inputText:completion:" argumentIndex:2 ofReply:0];

  v135 = objc_opt_class(&OBJC_CLASS___NSError, v86);
  uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v135, 1LL));
  v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v87));
  [v9 setClasses:v88 forSelector:"runODLDModelWithConfig:locale:inputText:completion:" argumentIndex:0 ofReply:1];

  v134 = objc_opt_class(&OBJC_CLASS___NSURL, v89);
  double v90 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v134, 1LL));
  v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v90));
  [v9 setClasses:v91 forSelector:"runAudioInjectionOnly:completion:" argumentIndex:0 ofReply:0];

  v133 = objc_opt_class(&OBJC_CLASS___NSError, v92);
  v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v133, 1LL));
  v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v93));
  [v9 setClasses:v94 forSelector:"runAudioInjectionOnly:completion:" argumentIndex:0 ofReply:1];

  v132[0] = objc_opt_class(&OBJC_CLASS___NSString, v95);
  v132[1] = objc_opt_class(&OBJC_CLASS___NSURL, v96);
  v97 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v132, 2LL));
  v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v97));
  [v9 setClasses:v98 forSelector:"runNovDetectorWithConfig:configRoot:withUrl:completion:" argumentIndex:0 ofReply:0];

  v131[0] = objc_opt_class(&OBJC_CLASS___NSString, v99);
  v131[1] = objc_opt_class(&OBJC_CLASS___NSURL, v100);
  v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v131, 2LL));
  v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v101));
  [v9 setClasses:v102 forSelector:"runNovDetectorWithConfig:configRoot:withUrl:completion:" argumentIndex:1 ofReply:0];

  v130[0] = objc_opt_class(&OBJC_CLASS___NSString, v103);
  v130[1] = objc_opt_class(&OBJC_CLASS___NSURL, v104);
  float v105 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v130, 2LL));
  v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v105));
  [v9 setClasses:v106 forSelector:"runNovDetectorWithConfig:configRoot:withUrl:completion:" argumentIndex:2 ofReply:0];

  double v129 = objc_opt_class(&OBJC_CLASS___NSError, v107);
  v108 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v129, 1LL));
  v109 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v108));
  [v9 setClasses:v109 forSelector:"runNovDetectorWithConfig:configRoot:withUrl:completion:" argumentIndex:0 ofReply:1];

  __int16 v128 = objc_opt_class(&OBJC_CLASS___NSError, v110);
  v111 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v128, 1LL));
  __int16 v112 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v111));
  [v9 setClasses:v112 forSelector:"benchmarkOnDeviceCompilationCleanup:" argumentIndex:0 ofReply:1];

  unsigned int v127 = objc_opt_class(&OBJC_CLASS___NSString, v113);
  __int16 v114 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v127, 1LL));
  double v115 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v114));
  [v9 setClasses:v115 forSelector:"runNCModelWithConfig:completion:" argumentIndex:0 ofReply:0];

  __int16 v126 = objc_opt_class(&OBJC_CLASS___NSError, v116);
  double v117 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v126, 1LL));
  __int16 v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v117));
  [v9 setClasses:v118 forSelector:"runNCModelWithConfig:completion:" argumentIndex:0 ofReply:1];

  [v7 setExportedInterface:v9];
  if ((+[CSUtils xpcConnection:hasEntitlement:]( &OBJC_CLASS___CSUtils,  "xpcConnection:hasEntitlement:",  v7,  @"corespeech.benchmark.xpc") & 1) == 0)
  {
    id v123 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "-[CSBenchmarkXPCListener listener:shouldAcceptNewConnection:]";
      _os_log_impl( (void *)&_mh_execute_header,  v123,  OS_LOG_TYPE_DEFAULT,  "%s CSBenchmarkXPCListener does not have entitlement",  (uint8_t *)&buf,  0xCu);
    }

    [v7 invalidate];
    goto LABEL_13;
  }

  id v119 = *(void *)(v125 + 16);
  if (!v119)
  {
    __int16 v120 = objc_opt_new(&OBJC_CLASS___CSModelBenchmarker);
    double v121 = *(void **)(v125 + 16);
    *(void *)(v125 + 16) = v120;

    id v119 = *(void *)(v125 + 16);
  }

  [v7 setExportedObject:v119];
  [v7 resume];
  __int16 v122 = 1;
LABEL_14:

  return v122;
}
}

  __int128 v12 = 1;
LABEL_16:

  return v12;
}
}

uint64_t sub_10004D134(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10004D144(uint64_t a1)
{
}

id sub_10004D14C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEItriggerEndSampleCount]);
  id v3 = (char *)[v2 unsignedIntegerValue];

  uint64_t v59 = v3;
  else {
    id v4 = 0LL;
  }
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEItriggerStartSampleCount]);
  id v6 = [v5 unsignedIntegerValue];

  int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEIextraSamplesAtStart]);
  uint64_t v8 = (char *)[v7 unsignedIntegerValue];

  __int128 v9 = &v8[(void)v6];
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEIactiveChannel]);
  id v11 = [v10 unsignedIntegerValue];

  __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEItriggerEndMachTime]);
  id v13 = [v12 unsignedLongLongValue];

  unsigned int v14 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315650;
    float v61 = "-[CSMyriadPHash generatePHashFromVoiceTriggerInfo:writeFile:]_block_invoke";
    __int16 v62 = 2048;
    id v63 = v13;
    __int16 v64 = 2048;
    id v65 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s trigger end machAbsoluteTime: %llu hex: %llx",  buf,  0x20u);
  }

  id v58 = v13;
  __int16 v15 = v4;
  id v57 = v9 + 1600;
  if ((unint64_t)v11 >= +[CSConfig inputRecordingNumberOfChannels]( &OBJC_CLASS___CSConfig,  "inputRecordingNumberOfChannels"))
  {
    uint64_t v16 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      id v55 = v16;
      id v56 = +[CSConfig channelForProcessedInput](&OBJC_CLASS___CSConfig, "channelForProcessedInput");
      *(_DWORD *)__int128 buf = 136315650;
      float v61 = "-[CSMyriadPHash generatePHashFromVoiceTriggerInfo:writeFile:]_block_invoke";
      __int16 v62 = 2050;
      id v63 = v11;
      __int16 v64 = 2050;
      id v65 = v56;
      _os_log_error_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_ERROR,  "%s Invalid active channel in VTEI: %{public}tu, defaulting to master channel: %{public}tu",  buf,  0x20u);
    }

    id v11 = +[CSConfig channelForProcessedInput](&OBJC_CLASS___CSConfig, "channelForProcessedInput");
  }

  id v17 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
  unsigned __int8 v18 = [v17 myriadFileLoggingEnabled];

  if ((v18 & 1) != 0)
  {
    id v19 = objc_alloc_init(&OBJC_CLASS___NSDate);
    uint64_t v20 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSLocale localeWithLocaleIdentifier:]( &OBJC_CLASS___NSLocale,  "localeWithLocaleIdentifier:",  @"en_US_POSIX"));
    -[NSDateFormatter setLocale:](v20, "setLocale:", v21);

    -[NSDateFormatter setDateFormat:](v20, "setDateFormat:", @"yyyy_MM_dd-HHmmss.SSS");
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _audioLogDirectory]);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(-[NSDateFormatter stringFromDate:](v20, "stringFromDate:", v19));
    double v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@/%@%@.wav",  v22,  @"Myriad-",  v23));

    id v25 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315394;
      float v61 = "-[CSMyriadPHash generatePHashFromVoiceTriggerInfo:writeFile:]_block_invoke";
      __int16 v62 = 2114;
      id v63 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "%s Logging audio file into : %{public}@",  buf,  0x16u);
    }

    id v26 = (void *)objc_claimAutoreleasedReturnValue( +[CSSpeechManager sharedManagerForCoreSpeechDaemon]( &OBJC_CLASS___CSSpeechManager,  "sharedManagerForCoreSpeechDaemon"));
    uint64_t v27 = kVTEIAudioProviderUUID;
    __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEIAudioProviderUUID]);
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v26 audioProviderWithUUID:v28]);

    __int16 v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v24));
    [v29 saveRecordingBufferToEndFrom:v15 toURL:v30];
  }

  else
  {
    uint64_t v27 = kVTEIAudioProviderUUID;
  }

  uint64_t v31 = *(unsigned __int8 *)(a1 + 56);
  __int16 v32 = *(void **)(a1 + 40);
  id v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEItriggerScore]);
  [v33 floatValue];
  int v35 = v34;
  uint64_t v36 = kVTEIfirstPassTriggerSource;
  double v37 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEIfirstPassTriggerSource]);
  id v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v27]);
  LODWORD(v39) = v35;
  uint64_t v40 = objc_claimAutoreleasedReturnValue( [v32 _generateMyriadInfo:v15 hsStart:v57 triggerEnd:v59 writeFile:v31 score:v37 triggerSource:v11 channel:v39 audioProviderUUID:v38 absoluteTime:v58]);
  uint64_t v41 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v42 = *(void **)(v41 + 40);
  *(void *)(v41 + 40) = v40;

  double v43 = *(void **)(a1 + 32);
  if (v43)
  {
    uint64_t v44 = objc_claimAutoreleasedReturnValue([v43 objectForKeyedSubscript:v36]);
    if (v44)
    {
      uint64_t v45 = (void *)v44;
      v46 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v36]);
      unsigned int v47 = [v46 isEqualToString:kVTEIFirstPassTriggeredFromRemora];

      if (v47)
      {
        uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEIFirstPassRemoraTriggerEndTime]);
        [v48 doubleValue];
        double v50 = v49;

        uint64_t v51 = objc_claimAutoreleasedReturnValue( +[CSMyriadPHash createRemoraHashResultFromPHash:firstPassTriggerEndTime:]( &OBJC_CLASS___CSMyriadPHash,  "createRemoraHashResultFromPHash:firstPassTriggerEndTime:",  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL),  v50));
        uint64_t v52 = *(void *)(*(void *)(a1 + 48) + 8LL);
        float v53 = *(void **)(v52 + 40);
        *(void *)(v52 + 40) = v51;
      }
    }
  }

  return +[CSMyriadPHash setLastHash:]( &OBJC_CLASS___CSMyriadPHash,  "setLastHash:",  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
}

void sub_10004D6F4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
  id v6 = (id)objc_claimAutoreleasedReturnValue([v2 myriadHashFilePath]);

  uint64_t v3 = objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfFile:](&OBJC_CLASS___NSData, "dataWithContentsOfFile:", v6));
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void *sub_10004D768(int a1, void *a2)
{
  id v3 = a2;
  size_t v4 = (4 * a1);
  uint64_t v5 = malloc(v4);
  id v6 = v5;
  if (v5)
  {
    bzero(v5, v4);
  }

  else
  {
    int v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315650;
      __int128 v10 = "createFloatArray";
      __int16 v11 = 1026;
      int v12 = v4;
      __int16 v13 = 2114;
      id v14 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s could not allocate %{public}d bytes for %{public}@",  (uint8_t *)&v9,  0x1Cu);
    }
  }

  return v6;
}

void sub_10004E688( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10004EB80(void *a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    int v4 = 136315394;
    uint64_t v5 = "-[CSVoiceTriggerXPCListener CSClientXPCConnectionReceivedClientError:clientError:client:]_block_invoke";
    __int16 v6 = 2050;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Client connection disconnected, removing %{public}p from client connection pool",  (uint8_t *)&v4,  0x16u);
  }

  if (a1[5]) {
    objc_msgSend(*(id *)(a1[6] + 24), "removeObject:");
  }
}

void sub_10004EC4C(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _handleListenerEvent:v3];
}

void sub_10004EF44(_Unwind_Exception *a1)
{
}

id sub_10004F380(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) startAnalyze];
}

id sub_10004F38C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 32) startAnalyze];
}

void sub_10004F398(uint64_t a1)
{
  id obj = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", 2LL));
  [obj addObject:&__kCFBooleanFalse];
  [obj addObject:&__kCFBooleanFalse];
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 == 1)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(*(void *)(a1 + 32) + 8) isEnabled]));
    [obj setObject:v5 atIndexedSubscript:0];

    id v4 = (id)*(unsigned __int8 *)(a1 + 48);
  }

  else
  {
    if (v2) {
      goto LABEL_6;
    }
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
    [obj setObject:v3 atIndexedSubscript:0];

    id v4 = [*(id *)(*(void *)(a1 + 32) + 16) isEnabled];
  }

  __int16 v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v4));
  [obj setObject:v6 atIndexedSubscript:1];

LABEL_6:
  if (([*(id *)(*(void *)(a1 + 32) + 40) isEqualToArray:obj] & 1) == 0)
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 40LL), obj);
    [*(id *)(a1 + 32) _handleEnabledStatesUpdate:*(void *)(*(void *)(a1 + 32) + 40)];
  }
}

void sub_10004F4E8(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleEnabledPolicyEventForAudioSourceType:0 enabled:a2];
}

void sub_10004F528(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleEnabledPolicyEventForAudioSourceType:1 enabled:a2];
}

id sub_10004F568(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(*(void *)(a1 + 32) + 8) isEnabled]));
  [*(id *)(*(void *)(a1 + 32) + 40) setObject:v2 atIndexedSubscript:0];

  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(*(void *)(a1 + 32) + 16) isEnabled]));
  [*(id *)(*(void *)(a1 + 32) + 40) setObject:v3 atIndexedSubscript:1];

  return [*(id *)(a1 + 32) _handleEnabledStatesUpdate:*(void *)(*(void *)(a1 + 32) + 40)];
}

void sub_100050170(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[CSUtils getSiriLanguageWithEndpointId:fallbackLanguage:]( &OBJC_CLASS___CSUtils,  "getSiriLanguageWithEndpointId:fallbackLanguage:",  *(void *)(a1 + 32),  @"en-US"));
  if (*(void *)(a1 + 32)) {
    id v3 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", *(void *)(a1 + 32));
  }
  else {
    id v3 = 0LL;
  }
  id v4 = objc_alloc(&OBJC_CLASS___CSVoiceTriggerRTModelRequestOptions);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100050278;
  void v9[3] = &unk_10022D0F0;
  uint64_t v5 = v3;
  __int128 v10 = v5;
  id v6 = v2;
  id v11 = v6;
  uint64_t v7 = -[CSVoiceTriggerRTModelRequestOptions initWithMutableBuilder:](v4, "initWithMutableBuilder:", v9);
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    (*(void (**)(uint64_t, CSVoiceTriggerRTModelRequestOptions *))(v8 + 16))(v8, v7);
  }
}

void sub_100050278(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = -[CSVoiceTriggerUserSelectedPhrase initWithEndpointId:]( objc_alloc(&OBJC_CLASS___CSVoiceTriggerUserSelectedPhrase),  "initWithEndpointId:",  *(void *)(a1 + 32));
  unsigned int v5 = +[CSUtils supportMph](&OBJC_CLASS___CSUtils, "supportMph");
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[VTPreferences sharedPreferences](&OBJC_CLASS___VTPreferences, "sharedPreferences"));
  unsigned int v7 = [v6 isCompactVoiceTriggerAvailableForLanguageCode:*(void *)(a1 + 40)];

  unsigned int v8 = -[CSVoiceTriggerUserSelectedPhrase multiPhraseSelected](v4, "multiPhraseSelected");
  int v9 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 136316162;
    int v12 = "-[CSCoreSpeechServicesListener getVoiceTriggerRTModelRequestOptionsWithEndpointId:completion:]_block_invoke_2";
    __int16 v13 = 1024;
    int v14 = v5 & v7 & v8;
    __int16 v15 = 1024;
    unsigned int v16 = v5;
    __int16 v17 = 1024;
    unsigned int v18 = v7;
    __int16 v19 = 1024;
    unsigned int v20 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s allowMph:%d (deviceSupportsMph:%d, localeSupportsMph:%d, userPreferMph:%d",  (uint8_t *)&v11,  0x24u);
  }

  [v3 setAllowMph:v5 & v7 & v8];
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  -[CSVoiceTriggerUserSelectedPhrase userSelectedPhraseType](v4, "userSelectedPhraseType")));
  [v3 setUserSelectedPhraseType:v10];

  [v3 setSiriLocale:*(void *)(a1 + 40)];
  if (*(void *)(a1 + 32)) {
    objc_msgSend(v3, "setEndpointId:");
  }
}

void sub_100050428(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue( +[CSUtils getSiriLanguageWithEndpointId:fallbackLanguage:]( &OBJC_CLASS___CSUtils,  "getSiriLanguageWithEndpointId:fallbackLanguage:",  *(void *)(a1 + 32),  @"en-US"));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

void sub_1000562A4(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315394;
    unsigned int v5 = "+[CSSiriDebugConnection launchSiriDebugAppWithMessage:]_block_invoke";
    __int16 v6 = 2112;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s %@ task delivered.", (uint8_t *)&v4, 0x16u);
  }

void sub_10005635C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 136315906;
    __int128 v10 = "+[CSSiriDebugConnection launchSiriDebugAppWithMessage:]_block_invoke";
    __int16 v11 = 2112;
    uint64_t v12 = v8;
    __int16 v13 = 2112;
    id v14 = v5;
    __int16 v15 = 2112;
    id v16 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s %@ completed with response %@ and error %@.",  (uint8_t *)&v9,  0x2Au);
  }
}

void sub_100056C34( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100057020(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[CSAttSiriSignalProvider sharedProvider](&OBJC_CLASS___CSAttSiriSignalProvider, "sharedProvider"));
  [v1 cancelAudioStreamHoldingIfNeeded];
}

void sub_100057054(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
  if (WeakRetained)
  {
    uint64_t v3 = WeakRetained;
    id v4 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
    char v5 = objc_opt_respondsToSelector(v4, "attendingStoppedWithReason:");

    if ((v5 & 1) != 0)
    {
      id v6 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
      [v6 attendingStoppedWithReason:2];
    }
  }

  id v7 = (id)objc_claimAutoreleasedReturnValue(+[CSAttSiriSignalProvider sharedProvider](&OBJC_CLASS___CSAttSiriSignalProvider, "sharedProvider"));
  [v7 stopWithObserver:*(void *)(a1 + 32) holdAudioStream:0];
}

void sub_100057100(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategoryAttending;
  if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    char v5 = "-[CSAttendingSpeechDetectionController _setupSpeechDetectionTimerForDuration:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s speech detection timer fired",  (uint8_t *)&v4,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleSpeechDetectionTimeout];
}

void sub_1000571BC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) attendingOptions]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(double *)(a1 + 40) <= 0.0)
  {
    double v9 = *(double *)(v4 + 32);
    if (v9 < 0.0)
    {
      *(void *)(v4 + 32) = *(void *)(a1 + 48);
      double v9 = *(double *)(*(void *)(a1 + 32) + 32LL);
    }

    float v10 = *(double *)(a1 + 48) - v9;
    [v2 startOfSpeechThresholdInMs];
    if (v11 <= v10)
    {
      *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 0;
      [v3 prependAudioDuration];
      double v14 = v13;
      double v15 = *(double *)(*(void *)(a1 + 32) + 32LL) - v13;
      if (v15 >= 0.0) {
        double v16 = v15;
      }
      else {
        double v16 = 0.0;
      }
      if ([v3 useOwnVoiceVAD])
      {
        [v3 startOfSpeechThresholdInMs];
        double v18 = v17 / 1000.0;
        +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
        unint64_t v20 = (unint64_t)(v18 * v19);
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[CSAttSiriSignalProvider sharedProvider]( &OBJC_CLASS___CSAttSiriSignalProvider,  "sharedProvider"));
        v29[0] = _NSConcreteStackBlock;
        v29[1] = 3221225472LL;
        v29[2] = sub_1000574C0;
        v29[3] = &unk_10022B2E8;
        v29[4] = *(void *)(a1 + 32);
        float v30 = v10;
        *(double *)&v29[5] = v14;
        v29[6] = v20;
        [v21 fetchStartSpeechWithOwnVoiceVadByProcessedAudioInMs:1 fetchOwnVoiceVADSignal:v20 prependAudioDuration:v29 speechDetectSa mpleCountThreshold:v16 completion:v14];
      }

      else
      {
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[CSAttSiriSignalProvider sharedProvider]( &OBJC_CLASS___CSAttSiriSignalProvider,  "sharedProvider"));
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472LL;
        v23[2] = sub_10005753C;
        v23[3] = &unk_10022B338;
        void v23[4] = *(void *)(a1 + 32);
        id v24 = v3;
        char v28 = *(_BYTE *)(a1 + 64);
        float v27 = v10;
        double v25 = v14;
        uint64_t v26 = *(void *)(a1 + 56);
        [v22 fetchStartSpeechWithOwnVoiceVadByProcessedAudioInMs:0 fetchOwnVoiceVADSignal:0 prependAudioDuration:v23 speechDetectSa mpleCountThreshold:v16 completion:0.0];
      }
    }

    else
    {
      [v3 startOfSpeechNearMissThresholdInMs];
    }
  }

  else
  {
    *(void *)(v4 + 32) = 0xBFF0000000000000LL;
    uint64_t v5 = *(void *)(a1 + 32);
    if (*(_BYTE *)(v5 + 9))
    {
      id v6 = (void *)CSLogCategoryAttending;
      if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
      {
        id v7 = v6;
        [v3 startOfSpeechNearMissThresholdInMs];
        *(_DWORD *)__int128 buf = 136315394;
        __int16 v32 = "-[CSAttendingSpeechDetectionController attSiriSignalProvider:silenceFramesCountMs:silenceProbability:silen"
              "ceDurationMs:processedAudioMs:deviceHasBoronEnabled:latestBoronActiveSampleCount:]_block_invoke";
        __int16 v33 = 2048;
        uint64_t v34 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s NearMiss: amountOfSpeech detected greater than startOfSpeechNearMissThresholdInMs:%f",  buf,  0x16u);

        uint64_t v5 = *(void *)(a1 + 32);
      }

      *(_BYTE *)(v5 + 9) = 0;
    }
  }
}

void sub_1000574C0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(dispatch_queue_s **)(v4 + 24);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100057874;
  v6[3] = &unk_10022B2C0;
  int v7 = *(_DWORD *)(a1 + 56);
  void v6[5] = a3;
  v6[6] = a2;
  char v8 = a4;
  v6[4] = v4;
  v6[7] = *(void *)(a1 + 40);
  v6[8] = *(void *)(a1 + 48);
  dispatch_async(v5, v6);
}

void sub_10005753C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  block[0] = _NSConcreteStackBlock;
  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
  block[2] = sub_1000575D8;
  block[3] = &unk_10022B310;
  block[1] = 3221225472LL;
  uint64_t v11 = a3;
  uint64_t v12 = a2;
  id v6 = v4;
  char v16 = *(_BYTE *)(a1 + 68);
  uint64_t v7 = *(void *)(a1 + 32);
  id v9 = v6;
  uint64_t v10 = v7;
  int v15 = *(_DWORD *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 56);
  dispatch_async(v5, block);
}

void sub_1000575D8(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategoryAttending;
  if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 56);
    int v23 = 136315650;
    id v24 = "-[CSAttendingSpeechDetectionController attSiriSignalProvider:silenceFramesCountMs:silenceProbability:silenceDu"
          "rationMs:processedAudioMs:deviceHasBoronEnabled:latestBoronActiveSampleCount:]_block_invoke_2";
    __int16 v25 = 2048;
    uint64_t v26 = v3;
    __int16 v27 = 2048;
    uint64_t v28 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s startSampleCount: %llu, startHostTime: %llu",  (uint8_t *)&v23,  0x20u);
  }

  double v6 = *(double *)(a1 + 64) / 1000.0;
  +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
  uint64_t v8 = (uint64_t)(v6 * v7);
  *(float *)&double v6 = *(float *)(a1 + 80) / 1000.0;
  +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
  uint64_t v10 = (uint64_t)(float)((float)(unint64_t)(*(void *)(a1 + 48) + v8) + (float)(*(float *)&v6 * v9));
  uint64_t v11 = *(void *)(a1 + 72) - v10;
  [*(id *)(a1 + 32) startOfSpeechThresholdInMs];
  double v13 = v12 / 1000.0;
  +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
  uint64_t v15 = (uint64_t)(v13 * v14);
  if (v11 >= 0) {
    uint64_t v16 = v11;
  }
  else {
    uint64_t v16 = -v11;
  }
  double v17 = (os_log_s *)CSLogCategoryAttending;
  BOOL v18 = os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT);
  if (v16 < v15)
  {
    if (v18)
    {
      uint64_t v19 = *(void *)(a1 + 48);
      uint64_t v20 = *(void *)(a1 + 72);
      int v23 = 136316674;
      id v24 = "-[CSAttendingSpeechDetectionController attSiriSignalProvider:silenceFramesCountMs:silenceProbability:silence"
            "DurationMs:processedAudioMs:deviceHasBoronEnabled:latestBoronActiveSampleCount:]_block_invoke";
      __int16 v25 = 2048;
      uint64_t v26 = v19;
      __int16 v27 = 2048;
      uint64_t v28 = v8;
      __int16 v29 = 2048;
      uint64_t v30 = v20;
      __int16 v31 = 2048;
      uint64_t v32 = v10;
      __int16 v33 = 2048;
      uint64_t v34 = v11;
      __int16 v35 = 2048;
      uint64_t v36 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%s #Boron check SUCCESS. StartSampleCount: %llu. PrependSamples: %llu. LatestBoronSampleCount: %lld. LastAudioSa mpleCount: %lld. Diff: %lld Thresh: %lld",  (uint8_t *)&v23,  0x48u);
    }

void sub_100057874(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategoryAttending;
  if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
  {
    double v4 = *(float *)(a1 + 72);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    int v7 = *(unsigned __int8 *)(a1 + 76);
    int v12 = 136316162;
    double v13 = "-[CSAttendingSpeechDetectionController attSiriSignalProvider:silenceFramesCountMs:silenceProbability:silenceDu"
          "rationMs:processedAudioMs:deviceHasBoronEnabled:latestBoronActiveSampleCount:]_block_invoke_2";
    __int16 v14 = 2048;
    double v15 = v4;
    __int16 v16 = 2048;
    uint64_t v17 = v5;
    __int16 v18 = 2048;
    uint64_t v19 = v6;
    __int16 v20 = 1024;
    int v21 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s amountOfSpeechInMs:%f startSampleCount: %llu, startHostTime: %llu ownVoiceVADSignalPresent: %u",  (uint8_t *)&v12,  0x30u);
  }

  if (*(_BYTE *)(a1 + 76))
  {
    LODWORD(v3) = *(_DWORD *)(a1 + 72);
    [*(id *)(a1 + 32) _startActivationAtHostTime:*(void *)(a1 + 48) sampleCount:*(void *)(a1 + 40) amountOfSpeechInMs:v3];
  }

  else
  {
    uint64_t v8 = (os_log_s *)CSLogCategoryAttending;
    if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
    {
      double v9 = *(double *)(a1 + 40);
      uint64_t v10 = *(void *)(a1 + 56);
      uint64_t v11 = *(void *)(a1 + 64);
      int v12 = 136315906;
      double v13 = "-[CSAttendingSpeechDetectionController attSiriSignalProvider:silenceFramesCountMs:silenceProbability:silence"
            "DurationMs:processedAudioMs:deviceHasBoronEnabled:latestBoronActiveSampleCount:]_block_invoke";
      __int16 v14 = 2048;
      double v15 = v9;
      __int16 v16 = 2048;
      uint64_t v17 = v10;
      __int16 v18 = 2048;
      uint64_t v19 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s #OwnVoiceVAD check FAIL. StartSampleCount: %llu. prependAudioDuration: %f. speechDetectionSampleCountTotalThreshold: %llu. ",  (uint8_t *)&v12,  0x2Au);
    }
  }

void sub_1000579EC(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategoryAttending;
  if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136315138;
    uint64_t v10 = "-[CSAttendingSpeechDetectionController attSiriSignalProviderDidStopUnexpectedly]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v9, 0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
  if (WeakRetained)
  {
    double v4 = WeakRetained;
    id v5 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
    char v6 = objc_opt_respondsToSelector(v5, "attendingStoppedWithReason:");

    if ((v6 & 1) != 0)
    {
      id v7 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
      [v7 attendingStoppedWithReason:3];
    }
  }

  [*(id *)(a1 + 32) _cancelSpeechDetectionTimer];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[CSAttSiriSignalProvider sharedProvider](&OBJC_CLASS___CSAttSiriSignalProvider, "sharedProvider"));
  [v8 stopWithObserver:*(void *)(a1 + 32) holdAudioStream:0];

  *(_BYTE *)(*(void *)(a1 + 32) + 1+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0;
}

void sub_100057B2C(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategoryAttending;
  if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v17 = 136315394;
    __int16 v18 = "-[CSAttendingSpeechDetectionController stopAttendingWithReason:]_block_invoke";
    __int16 v19 = 2048;
    uint64_t v20 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Stop attending for reason %lu",  (uint8_t *)&v17,  0x16u);
  }

  [*(id *)(a1 + 32) _cancelSpeechDetectionTimer];
  double v4 = (void *)objc_claimAutoreleasedReturnValue(+[CSAttSiriSignalProvider sharedProvider](&OBJC_CLASS___CSAttSiriSignalProvider, "sharedProvider"));
  [v4 stopWithObserver:*(void *)(a1 + 32) holdAudioStream:0];

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
  if (WeakRetained)
  {
    char v6 = WeakRetained;
    id v7 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
    char v8 = objc_opt_respondsToSelector(v7, "attendingStoppedWithReason:");

    if ((v8 & 1) != 0)
    {
      id v9 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
      [v9 attendingStoppedWithReason:*(void *)(a1 + 40)];
    }
  }

  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10 == 1) {
    goto LABEL_13;
  }
  if (*(_BYTE *)(v11 + 9))
  {
    int v12 = (void *)CSLogCategoryAttending;
    if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
    {
      double v13 = *(void **)(v11 + 40);
      __int16 v14 = v12;
      double v15 = (void *)objc_claimAutoreleasedReturnValue([v13 attendingOptions]);
      [v15 startOfSpeechNearMissThresholdInMs];
      int v17 = 136315394;
      __int16 v18 = "-[CSAttendingSpeechDetectionController stopAttendingWithReason:]_block_invoke";
      __int16 v19 = 2048;
      uint64_t v20 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%s NearMiss: amountOfSpeech detected greater than startOfSpeechNearMissThresholdInMs:%f",  (uint8_t *)&v17,  0x16u);

      uint64_t v11 = *(void *)(a1 + 32);
    }

    *(_BYTE *)(v11 + 9) = 0;
    uint64_t v10 = *(void *)(a1 + 40);
  }

  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 32);
LABEL_13:
    *(_BYTE *)(v11 + 10) = 0;
  }

void sub_100057D2C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _updateAttendingOptionsForAnnounce:*(void *)(a1 + 40)]);
  uint64_t v3 = (os_log_s *)CSLogCategoryAttending;
  if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315394;
    double v15 = "-[CSAttendingSpeechDetectionController startAttendingWithOptions:completion:]_block_invoke";
    __int16 v16 = 2112;
    int v17 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%s %@", buf, 0x16u);
  }

  *(void *)(*(void *)(a1 + 32) + 32LL) = 0LL;
  *(_BYTE *)(*(void *)(a1 + 32) + 8LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 0;
  double v4 = -[CSAttSiriSignalOptions initWithAttendingOptions:audioStreamRequest:]( objc_alloc(&OBJC_CLASS___CSAttSiriSignalOptions),  "initWithAttendingOptions:audioStreamRequest:",  v2,  0LL);
  uint64_t v5 = *(void *)(a1 + 32);
  char v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSAttSiriSignalProvider sharedProvider](&OBJC_CLASS___CSAttSiriSignalProvider, "sharedProvider"));
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(v8 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100057ED0;
  v11[3] = &unk_10022B298;
  void v11[4] = v8;
  id v12 = v2;
  id v13 = *(id *)(a1 + 48);
  id v10 = v2;
  [v7 startWithSignalOptions:v9 observer:v8 completion:v11];
}

void sub_100057ED0(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  char v6 = *(void **)(a1 + 40);
  id v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100057F88;
  block[3] = &unk_10022B270;
  id v8 = v6;
  char v17 = a2;
  uint64_t v9 = *(void *)(a1 + 32);
  id v13 = v8;
  uint64_t v14 = v9;
  id v10 = *(id *)(a1 + 48);
  id v15 = v5;
  id v16 = v10;
  id v11 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_100057F88(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64) && v2 > 0.0) {
    objc_msgSend(*(id *)(a1 + 40), "_setupSpeechDetectionTimerForDuration:");
  }
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(unsigned __int8 *)(a1 + 64),  *(void *)(a1 + 48));
  }
  return result;
}

void sub_100059244( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, id location)
{
}

void sub_100059D8C(uint64_t a1)
{
  double v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    double v4 = "-[CSVoiceTriggerFirstPassHearstAP siriClientBehaviorMonitor:willStopStream:reason:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Siri Client will stop listening, resume FirstPassHearstAP listen",  (uint8_t *)&v3,  0xCu);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 0;
}

id sub_100059E3C(uint64_t a1)
{
  double v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    id v5 = "-[CSVoiceTriggerFirstPassHearstAP siriClientBehaviorMonitor:didStopStream:withEventUUID:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Siri Client stops listening now, FirstPassHearstAP can listen now",  (uint8_t *)&v4,  0xCu);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 0;
  return [*(id *)(a1 + 32) _reset];
}

void sub_100059EF4(uint64_t a1)
{
  double v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    int v4 = "-[CSVoiceTriggerFirstPassHearstAP siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withE"
         "ventUUID:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Siri Client starts listening now, FirstPassHearstAP shouldn't listen now",  (uint8_t *)&v3,  0xCu);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 1;
}

void sub_100059FA8(uint64_t a1)
{
}

void *sub_100059FB4(void *result)
{
  uint64_t v1 = result[4];
  int v2 = *((unsigned __int8 *)result + 40);
  if (*(unsigned __int8 *)(v1 + 8) != v2)
  {
    *(_BYTE *)(v1 + _Block_object_dispose(va, 8) = v2;
    uint64_t v3 = result[4];
    if (*(_BYTE *)(v3 + 8)) {
      return [(id)v3 _startListenWithAudioProviderUUID:*(void *)(v3 + 96) completion:0];
    }
    else {
      return [(id)v3 _stopListening];
    }
  }

  return result;
}

void sub_100059FEC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 multiPhraseSelectedStatus]);
  objc_msgSend(v4, "setAllowMph:", objc_msgSend(v5, "multiPhraseSelected"));

  char v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) multiPhraseSelectedStatus]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v6 userSelectedPhraseType]));
  [v4 setUserSelectedPhraseType:v7];

  id v8 = objc_alloc(&OBJC_CLASS___NSUUID);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceId]);
  id v10 = -[NSUUID initWithUUIDString:](v8, "initWithUUIDString:", v9);
  [v4 setEndpointId:v10];

  [v4 setAccessoryModelType:&off_100238670];
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[CSBluetoothManager sharedInstance](&OBJC_CLASS___CSBluetoothManager, "sharedInstance"));
  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceId]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 getBluetoothDeviceInfoForDeviceWithId:v12]);
  id v14 = [v13 supportMph];

  id v15 = objc_alloc_init(&OBJC_CLASS___CSCoreSpeechServicesAccessoryInfo);
  -[CSCoreSpeechServicesAccessoryInfo setSupportsJustSiri:](v15, "setSupportsJustSiri:", v14);
  [v4 setCSCoreSpeechServicesAccessoryInfo:v15];
}

void sub_10005A160(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (id *)(a1 + 32);
  id WeakRetained = (dispatch_queue_s **)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v9 = WeakRetained;
  if (WeakRetained)
  {
    id v10 = WeakRetained[3];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10005A240;
    block[3] = &unk_10022F0B0;
    objc_copyWeak(&v14, v7);
    id v12 = v5;
    id v13 = v6;
    dispatch_async(v10, block);

    objc_destroyWeak(&v14);
  }
}

void sub_10005A240(uint64_t a1)
{
  int v2 = (id *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = WeakRetained;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 deviceId]);
  [v5 _handleSecondPassResult:v4 deviceId:v6 error:*(void *)(a1 + 40)];

  id v7 = objc_loadWeakRetained(v2);
  [v7 _teardownSecondPass];
}

uint64_t sub_10005A2CC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  if (v1) {
    return (*(uint64_t (**)(uint64_t, id))(v1 + 16))( v1,  [*(id *)(result + 32) _shouldProcessAudio]);
  }
  return result;
}

void sub_10005A30C(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  if (v2[4])
  {
    if ([v2 _shouldProcessAudio])
    {
      id v11 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 40) getBestAnalyzedResultsFromAudioChunk:*(void *)(a1 + 40)]);
      objc_msgSend( *(id *)(a1 + 32),  "_keywordAnalyzerNDAPI:hasResultAvailable:forChannel:",  *(void *)(*(void *)(a1 + 32) + 40),  v11,  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 40), "activeChannel"));
      uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 168LL);
      if (v3)
      {
        uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) remoteVAD]);
        objc_msgSend(v3, "feedRemoteVAD:startSampleCount:", v4, objc_msgSend(*(id *)(a1 + 40), "startSampleCount"));
      }
    }

    else
    {
      uint64_t v6 = qword_10027FDB0;
      if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * qword_10027FDB0, 1) <= 0x1999999999999999uLL)
      {
        id v7 = (os_log_s *)CSLogCategoryVT;
        if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
        {
          id v8 = *(unsigned __int8 **)(a1 + 32);
          int v9 = v8[9];
          int v10 = v8[10];
          LODWORD(v_Block_object_dispose(va, 8) = v8[8];
          *(_DWORD *)__int128 buf = 136315906;
          id v13 = "-[CSVoiceTriggerFirstPassHearstAP audioStreamProvider:audioBufferAvailable:]_block_invoke";
          __int16 v14 = 1024;
          int v15 = v9;
          __int16 v16 = 1024;
          int v17 = v10;
          __int16 v18 = 1024;
          int v19 = (int)v8;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s Bypass audio here because isSecondPassRunning = %d, isSiriClientListening = %d, _isAPHearstFirstPassEnabled = %d",  buf,  0x1Eu);
          uint64_t v6 = qword_10027FDB0;
        }
      }

      qword_10027FDB0 = v6 + 1;
    }
  }

  else
  {
    id v5 = (os_log_s *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v13 = "-[CSVoiceTriggerFirstPassHearstAP audioStreamProvider:audioBufferAvailable:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s Could not find Assets. Cannot process Audio",  buf,  0xCu);
    }
  }

id sub_10005A52C(uint64_t a1)
{
  int v2 = objc_autoreleasePoolPush();
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0LL;

  objc_autoreleasePoolPop(v2);
  return [*(id *)(a1 + 32) _cancelLastAudioStreamHold];
}

void sub_10005A56C(uint64_t a1)
{
  int v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    id v5 = "-[CSVoiceTriggerFirstPassHearstAP _stopListening]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Scheduled stopAudioStream after waiting for recordingWillStartGroup",  (uint8_t *)&v4,  0xCu);
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioStream]);
  [v3 stopAudioStreamWithOption:0 completion:&stru_10022B378];
}

void sub_10005A638(id a1, BOOL a2, NSError *a3)
{
  uint64_t v3 = a3;
  if (v3)
  {
    int v4 = (void *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
    {
      id v5 = v4;
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSError localizedDescription](v3, "localizedDescription"));
      int v7 = 136315394;
      id v8 = "-[CSVoiceTriggerFirstPassHearstAP _stopListening]_block_invoke";
      __int16 v9 = 2114;
      int v10 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Cannot stop listening : %{public}@",  (uint8_t *)&v7,  0x16u);
    }
  }
}

void sub_10005A724(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v10 = v5;
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = objc_autoreleasePoolPush();
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = *(void **)(v7 + 168);
    *(void *)(v7 + 16_Block_object_dispose(va, 8) = 0LL;

    objc_autoreleasePoolPop(v6);
    id v5 = v10;
  }

  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t, id))(v9 + 16))(v9, a2, v10);
    id v5 = v10;
  }
}

void sub_10005A7A4(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(v6 + 24);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10005A848;
  v10[3] = &unk_10022E678;
  void v10[4] = v6;
  char v13 = a2;
  id v11 = v5;
  id v12 = v7;
  id v9 = v5;
  dispatch_async(v8, v10);
}

uint64_t sub_10005A848(uint64_t a1)
{
  int v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315138;
    uint64_t v7 = "-[CSVoiceTriggerFirstPassHearstAP _startListenWithAudioProviderUUID:completion:]_block_invoke_2";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Leaving recordWillStartGroup",  (uint8_t *)&v6,  0xCu);
  }

  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 56LL));
  if (*(_BYTE *)(a1 + 56))
  {
    uint64_t v3 = *(_BYTE **)(a1 + 32);
    if (!v3[8])
    {
      int v4 = (os_log_s *)CSLogCategoryVT;
      if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 136315138;
        uint64_t v7 = "-[CSVoiceTriggerFirstPassHearstAP _startListenWithAudioProviderUUID:completion:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s didStartRecording received when CSVoiceTriggerFirstPassHearstAP is turned off",  (uint8_t *)&v6,  0xCu);
        uint64_t v3 = *(_BYTE **)(a1 + 32);
      }

      [v3 _stopListening];
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

id sub_10005A99C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setAsset:*(void *)(a1 + 40)];
}

void sub_10005A9A8(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 8LL) = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(void *)(v2 + 144))
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerHearstAPEnabledPolicy sharedInstance]( &OBJC_CLASS___CSVoiceTriggerHearstAPEnabledPolicy,  "sharedInstance"));
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 144);
    *(void *)(v4 + 144) = v3;

    uint64_t v2 = *(void *)(a1 + 32);
  }

  int v6 = *(void **)(v2 + 112);
  if (!v6)
  {
    uint64_t v7 = objc_claimAutoreleasedReturnValue(+[CSSiriClientBehaviorMonitor sharedInstance](&OBJC_CLASS___CSSiriClientBehaviorMonitor, "sharedInstance"));
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(void **)(v8 + 112);
    *(void *)(v8 + 112) = v7;

    int v6 = *(void **)(*(void *)(a1 + 32) + 112LL);
  }

  objc_msgSend(v6, "registerObserver:");
  id v10 = *(void **)(a1 + 32);
  if (!v10[16])
  {
    uint64_t v11 = objc_claimAutoreleasedReturnValue(+[CSOpportuneSpeakEventMonitor sharedInstance](&OBJC_CLASS___CSOpportuneSpeakEventMonitor, "sharedInstance"));
    uint64_t v12 = *(void *)(a1 + 32);
    char v13 = *(void **)(v12 + 128);
    *(void *)(v12 + 12_Block_object_dispose(va, 8) = v11;

    id v10 = *(void **)(a1 + 32);
  }

  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v10 multiPhraseSelectedStatus]);

  if (!v14)
  {
    int v15 = *(void **)(a1 + 32);
    __int16 v16 = -[CSVoiceTriggerUserSelectedPhrase initWithEndpointId:]( objc_alloc(&OBJC_CLASS___CSVoiceTriggerUserSelectedPhrase),  "initWithEndpointId:",  0LL);
    [v15 setMultiPhraseSelectedStatus:v16];
  }

  objc_initWeak(&location, *(id *)(a1 + 32));
  int v17 = *(void **)(*(void *)(a1 + 32) + 144LL);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_10005AB58;
  v18[3] = &unk_10022E430;
  objc_copyWeak(&v19, &location);
  [v17 setCallback:v18];
  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);
}

void sub_10005AB3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10005AB58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = @"STOPPED";
    if ((_DWORD)a2) {
      id v5 = @"RUNNING";
    }
    int v7 = 136315394;
    uint64_t v8 = "-[CSVoiceTriggerFirstPassHearstAP start]_block_invoke_2";
    __int16 v9 = 2114;
    id v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger HearstAP start policy changed : %{public}@",  (uint8_t *)&v7,  0x16u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _transitHearstAPEnable:a2];
}

void sub_10005AE54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

id sub_10005B30C()
{
  uint64_t v5 = 0LL;
  int v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  uint64_t v0 = (id *)qword_10027FDE0;
  uint64_t v8 = qword_10027FDE0;
  if (!qword_10027FDE0)
  {
    uint64_t v1 = (void *)sub_10005B454();
    uint64_t v0 = (id *)dlsym(v1, "HPSKeyPathVoiceTriggerAssertion");
    v6[3] = (uint64_t)v0;
    qword_10027FDE0 = (uint64_t)v0;
  }

  _Block_object_dispose(&v5, 8);
  if (!v0)
  {
    uint64_t v3 = dlerror();
    uint64_t v4 = (_Unwind_Exception *)abort_report_np("%s", v3);
    _Block_object_dispose(&v5, 8);
    _Unwind_Resume(v4);
  }

  return *v0;
}

id sub_10005B3B0()
{
  uint64_t v5 = 0LL;
  int v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  uint64_t v0 = (id *)qword_10027FDE8;
  uint64_t v8 = qword_10027FDE8;
  if (!qword_10027FDE8)
  {
    uint64_t v1 = (void *)sub_10005B454();
    uint64_t v0 = (id *)dlsym(v1, "HPSKeyPathDisableAssistantAssertion");
    v6[3] = (uint64_t)v0;
    qword_10027FDE8 = (uint64_t)v0;
  }

  _Block_object_dispose(&v5, 8);
  if (!v0)
  {
    uint64_t v3 = dlerror();
    uint64_t v4 = (_Unwind_Exception *)abort_report_np("%s", v3);
    _Block_object_dispose(&v5, 8);
    _Unwind_Resume(v4);
  }

  return *v0;
}

uint64_t sub_10005B454()
{
  uint64_t v3 = 0LL;
  if (!qword_10027FDD8)
  {
    __int128 v4 = off_10022B408;
    uint64_t v5 = 0LL;
    qword_10027FDD8 = _sl_dlopen(&v4, &v3);
    uint64_t v1 = v3;
    uint64_t v0 = qword_10027FDD8;
    if (qword_10027FDD8)
    {
      if (!v3) {
        return v0;
      }
    }

    else
    {
      uint64_t v1 = (char *)abort_report_np("%s", v3);
    }

    free(v1);
    return v0;
  }

  return qword_10027FDD8;
}

id sub_10005B514(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) notifyObserver:a2];
}

id sub_10005B520(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) notifyObserver:a2];
}

Class sub_10005B52C(uint64_t a1)
{
  Class result = objc_getClass("HPSAccessorySettingService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10027FDD0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = abort_report_np("Unable to find class %s", "HPSAccessorySettingService");
    return (Class)sub_10005B598(v3);
  }

  return result;
}

void sub_10005B598(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = v7;
    id v9 = sub_10005B30C();
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    int v13 = 136315906;
    __int16 v14 = "-[CSHomePodSettingsMonitor _startMonitoringWithQueue:]_block_invoke";
    __int16 v15 = 2112;
    __int16 v16 = v10;
    __int16 v17 = 2112;
    id v18 = v5;
    __int16 v19 = 2112;
    id v20 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s HomePod %@ %@, error %@",  (uint8_t *)&v13,  0x2Au);
  }

  id v11 = v5;
  uint64_t v12 = v11;
  if (v11 && !v6) {
    objc_msgSend(*(id *)(a1 + 32), "setVoiceTriggerAssertion:", objc_msgSend(v11, "BOOLeanValue"));
  }
}

void sub_10005B6CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = v7;
    id v9 = sub_10005B3B0();
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    int v13 = 136315906;
    __int16 v14 = "-[CSHomePodSettingsMonitor _startMonitoringWithQueue:]_block_invoke";
    __int16 v15 = 2112;
    __int16 v16 = v10;
    __int16 v17 = 2112;
    id v18 = v5;
    __int16 v19 = 2112;
    id v20 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s HomePod %@ %@, error %@",  (uint8_t *)&v13,  0x2Au);
  }

  id v11 = v5;
  uint64_t v12 = v11;
  if (v11 && !v6) {
    objc_msgSend(*(id *)(a1 + 32), "setDisableAssistantAssertion:", objc_msgSend(v11, "BOOLeanValue"));
  }
}

void sub_10005B840(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSHomePodSettingsMonitor);
  uint64_t v2 = (void *)qword_10027FDC0;
  qword_10027FDC0 = (uint64_t)v1;
}

BOOL sub_10005BBC4(id a1)
{
  return +[CSVoiceTriggerEnabledPolicyHelper siriInCallPolicy]( &OBJC_CLASS___CSVoiceTriggerEnabledPolicyHelper,  "siriInCallPolicy");
}

BOOL sub_10005BBD0(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[CSSoftwareUpdateCheckingMonitor sharedInstance]( &OBJC_CLASS___CSSoftwareUpdateCheckingMonitor,  "sharedInstance"));
  unsigned int v2 = [v1 isSoftwareUpdateCheckingRunning];

  if (v2)
  {
    uint64_t v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      id v6 = "-[CSVoiceTriggerEnabledPolicyNonAOP _addVoiceTriggerEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger cannot be turned on since Software Update Checking is running",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2 ^ 1;
}

BOOL sub_10005BC9C(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSScreenLockMonitor sharedInstance](&OBJC_CLASS___CSScreenLockMonitor, "sharedInstance"));
  unsigned int v2 = [v1 isScreenLocked];

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[CSSiriRestrictionOnLockScreenMonitor sharedInstance]( &OBJC_CLASS___CSSiriRestrictionOnLockScreenMonitor,  "sharedInstance"));
  unsigned int v4 = [v3 isRestricted];

  if (!v2) {
    return 1;
  }
  if (v4)
  {
    int v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      uint64_t v8 = "-[CSVoiceTriggerEnabledPolicyNonAOP _addVoiceTriggerEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger cannot be turned on since Siri is restricted on lock screen",  (uint8_t *)&v7,  0xCu);
    }
  }

  return v4 ^ 1;
}

BOOL sub_10005BD9C(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriAssertionMonitor sharedInstance](&OBJC_CLASS___CSSiriAssertionMonitor, "sharedInstance"));
  unsigned __int8 v2 = [v1 isEnabled];

  if ((v2 & 1) != 0) {
    return 1;
  }
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[CSBatteryMonitor sharedInstance](&OBJC_CLASS___CSBatteryMonitor, "sharedInstance"));
  unsigned int v4 = [v3 batteryState];

  if (v4 != 2) {
    return 1;
  }
  int v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  BOOL v6 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
  BOOL result = 0;
  if (v6)
  {
    int v8 = 136315138;
    id v9 = "-[CSVoiceTriggerEnabledPolicyNonAOP _addVoiceTriggerEnabledConditions]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger cannot be turned on since device is on battery",  (uint8_t *)&v8,  0xCu);
    return 0;
  }

  return result;
}

BOOL sub_10005BEA0(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSFirstUnlockMonitor sharedInstance](&OBJC_CLASS___CSFirstUnlockMonitor, "sharedInstance"));
  unsigned __int8 v2 = [v1 isFirstUnlocked];

  if ((v2 & 1) == 0)
  {
    uint64_t v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      BOOL v6 = "-[CSVoiceTriggerEnabledPolicyNonAOP _addVoiceTriggerEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger cannot be turned on since device is not unlocked after restart",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

BOOL sub_10005BF6C(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[CSSystemShellStartMonitorFactory defaultShellStartMonitor]( &OBJC_CLASS___CSSystemShellStartMonitorFactory,  "defaultShellStartMonitor"));
  unsigned __int8 v2 = [v1 isSystemShellStarted];

  if ((v2 & 1) == 0)
  {
    uint64_t v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      BOOL v6 = "-[CSVoiceTriggerEnabledPolicyNonAOP _addVoiceTriggerEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger cannot be turned on since system shell is not started yet",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

BOOL sub_10005C038(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriEnabledMonitor sharedInstance](&OBJC_CLASS___CSSiriEnabledMonitor, "sharedInstance"));
  unsigned __int8 v2 = [v1 isEnabled];

  if ((v2 & 1) == 0)
  {
    uint64_t v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      BOOL v6 = "-[CSVoiceTriggerEnabledPolicyNonAOP _addVoiceTriggerEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger cannot be turned on since Siri is disabled",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

BOOL sub_10005C104(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerEnabledMonitor sharedInstance]( &OBJC_CLASS___CSVoiceTriggerEnabledMonitor,  "sharedInstance"));
  unsigned __int8 v2 = [v1 isEnabled];

  if ((v2 & 1) == 0)
  {
    uint64_t v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      BOOL v6 = "-[CSVoiceTriggerEnabledPolicyNonAOP _addVoiceTriggerEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger cannot be turned on since VoiceTrigger is disabled",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

BOOL sub_10005C1D0(id a1)
{
  unsigned __int8 v1 = +[CSUtils isLocalVoiceTriggerAvailable](&OBJC_CLASS___CSUtils, "isLocalVoiceTriggerAvailable");
  if ((v1 & 1) == 0)
  {
    unsigned __int8 v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      int v5 = "-[CSVoiceTriggerEnabledPolicyNonAOP _addVoiceTriggerEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger cannot be turned on since voiceTriggerInCoreSpeech is NO",  (uint8_t *)&v4,  0xCu);
    }
  }

  return v1;
}

BOOL sub_10005C28C(id a1)
{
  if (+[CSUtils supportHangUp](&OBJC_CLASS___CSUtils, "supportHangUp"))
  {
    unsigned __int8 v1 = (void *)objc_claimAutoreleasedReturnValue( +[CSPhoneCallStateMonitorFactory phoneCallStateMonitor]( &OBJC_CLASS___CSPhoneCallStateMonitorFactory,  "phoneCallStateMonitor"));
    if ([v1 phoneCallState] == (id)3)
    {
      BOOL v2 = 1;
    }

    else
    {
      uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[CSPhoneCallStateMonitorFactory phoneCallStateMonitor]( &OBJC_CLASS___CSPhoneCallStateMonitorFactory,  "phoneCallStateMonitor"));
      BOOL v2 = [v3 phoneCallState] == (id)4;
    }
  }

  else
  {
    BOOL v2 = 0;
  }

  int v4 = (void *)objc_claimAutoreleasedReturnValue( +[CSOtherAppRecordingStateMonitor sharedInstance]( &OBJC_CLASS___CSOtherAppRecordingStateMonitor,  "sharedInstance"));
  unsigned __int8 v5 = [v4 isOtherNonEligibleAppRecording];

  char v6 = v5 ^ 1 | v2;
  if ((v6 & 1) == 0)
  {
    int v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315138;
      id v10 = "-[CSVoiceTriggerEnabledPolicyNonAOP _addVoiceTriggerEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger cannot be turned on since there is other app recording that is not eligible and we are not in a connected or outgoing call",  (uint8_t *)&v9,  0xCu);
    }
  }

  return v6;
}

BOOL sub_10005C3CC(id a1)
{
  unsigned __int8 v1 = (void *)objc_claimAutoreleasedReturnValue( +[CSSpeechDetectionDevicePresentMonitor sharedInstance]( &OBJC_CLASS___CSSpeechDetectionDevicePresentMonitor,  "sharedInstance"));
  unsigned __int8 v2 = [v1 isPresent];

  if ((v2 & 1) == 0)
  {
    uint64_t v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      char v6 = "-[CSVoiceTriggerEnabledPolicyNonAOP _addVoiceTriggerEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger cannot be turned on since SpeechDetectionVAD is not present",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

double sub_10005DF14(uint64_t a1)
{
  double result = *(double *)(a1 + 40);
  *(double *)(*(void *)(a1 + 32) + 48LL) = result;
  return result;
}

double sub_10005DF24(uint64_t a1)
{
  double result = *(double *)(a1 + 40);
  *(double *)(*(void *)(a1 + 32) + 4+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = result;
  return result;
}

double sub_10005DF34(uint64_t a1)
{
  double result = *(double *)(a1 + 40);
  *(double *)(*(void *)(a1 + 32) + 56LL) = result;
  return result;
}

void sub_10005DF44(uint64_t a1)
{
  unsigned __int8 v2 = *(void **)(a1 + 32);
  if (v2)
  {
    [v2 timeRange];
    if (v6 >= 1)
    {
      uint64_t v3 = *(void **)(a1 + 40);
      uint64_t v4 = v3[17];
      switch(v4)
      {
        case 2LL:
          int v5 = (os_log_s *)CSLogCategoryEP;
          if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 136315138;
            int v8 = "-[CSNNVADEndpointAnalyzer request:didProduceResult:]_block_invoke";
            _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%s Processing finished. Ignoring",  buf,  0xCu);
          }

          break;
        case 1LL:
          [v3 _checkSNObservationForEndpoint:*(void *)(a1 + 32)];
          break;
        case 0LL:
          [v3 _checkSNObservationForStartpoint:*(void *)(a1 + 32)];
          break;
      }
    }
  }

id sub_10005E03C(uint64_t a1)
{
  unsigned __int8 v2 = (os_log_s *)CSLogCategoryEP;
  if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v7 = 136315394;
    int v8 = "-[CSNNVADEndpointAnalyzer recordingStoppedForReason:]_block_invoke";
    __int16 v9 = 2050;
    uint64_t v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Recording Stopped For Reason: %{public}ld",  (uint8_t *)&v7,  0x16u);
  }

  *(void *)(*(void *)(a1 + 32) + 136LL) = 2LL;
  [*(id *)(*(void *)(a1 + 32) + 224) endAudio];
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(void **)(v4 + 224);
  *(void *)(v4 + 224) = 0LL;

  return [*(id *)(a1 + 32) _reportAudioFirstBufferInfoIfNecessary];
}

id sub_10005E124(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 224);
  *(void *)(v2 + 224) = 0LL;

  return [*(id *)(a1 + 32) _reportAudioFirstBufferInfoIfNecessary];
}

void sub_10005E160(uint64_t a1)
{
  unsigned __int8 v1 = *(void **)(a1 + 32);
  if (v1[17] == 2LL)
  {
    uint64_t v2 = (os_log_s *)CSLogCategoryEP;
    if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v18 = "-[CSNNVADEndpointAnalyzer processAudioSamplesAsynchronously:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s Processing Done. Returning", buf, 0xCu);
    }
  }

  else
  {
    if ((v1[30] & 0x8000000000000000LL) != 0)
    {
      *(double *)(*(void *)(a1 + 32) + 232) = (double)(unint64_t)[*(id *)(a1 + 40) hostTime];
      *(void *)(*(void *)(a1 + 32) + 24+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7, 0) = [*(id *)(a1 + 40) startSampleCount];
      uint64_t v4 = (os_log_s *)CSLogCategoryEP;
      if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = *(void **)(a1 + 32);
        uint64_t v6 = v5[30];
        uint64_t v7 = v5[18];
        uint64_t v8 = v5[24];
        *(_DWORD *)__int128 buf = 136315906;
        id v18 = "-[CSNNVADEndpointAnalyzer processAudioSamplesAsynchronously:]_block_invoke";
        __int16 v19 = 2050;
        uint64_t v20 = v6;
        __int16 v21 = 2050;
        uint64_t v22 = v7;
        __int16 v23 = 2050;
        uint64_t v24 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Rx first sample: %{public}ld, _numSamplesReceived=%{public}lu, _vtEndInSampleCount=%{public}lu",  buf,  0x2Au);
      }

      unsigned __int8 v1 = *(void **)(a1 + 32);
    }

    v1[19] = v1[18];
    *(void *)(*(void *)(a1 + 32) + 16+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7, 0) = [*(id *)(a1 + 40) hostTime];
    *(_BYTE *)(*(void *)(a1 + 32) + 9) = [*(id *)(a1 + 40) wasBuffered];
    uint64_t v10 = *(void *)(a1 + 32);
    __int16 v9 = *(void **)(a1 + 40);
    uint64_t v11 = *(void *)(v10 + 144);
    uint64_t v12 = *(void *)(v10 + 192);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_10005E3A0;
    v16[3] = &unk_10022B860;
    v16[4] = v10;
    [v9 skipSamplesAtStartSuchThatNumSamplesReceivedSoFar:v11 reachesACountOf:v12 completionHandler:v16];
    *(void *)(*(void *)(a1 + 32) + 144) += [*(id *)(a1 + 40) numSamples];
    int v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataForChannel:*(void *)(*(void *)(a1 + 32) + 32)]);
    __int16 v14 = *(void **)(*(void *)(a1 + 32) + 224LL);
    id v15 = v13;
    objc_msgSend( v14,  "addSamples:numSamples:",  objc_msgSend(v15, "bytes"),  objc_msgSend(*(id *)(a1 + 40), "numSamples"));
  }

void sub_10005E3A0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  *(void *)(*(void *)(a1 + 32) + 248LL) += a3;
  uint64_t v6 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v6 + 14) && *(void *)(v6 + 248) >= *(void *)(v6 + 192))
  {
    *(_BYTE *)(v6 + 14) = 1;
    uint64_t v7 = (os_log_s *)CSLogCategoryEP;
    if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(v8 + 248);
      LODWORD(v_Block_object_dispose(va, 8) = *(unsigned __int8 *)(v8 + 14);
      int v11 = 136315650;
      uint64_t v12 = "-[CSNNVADEndpointAnalyzer processAudioSamplesAsynchronously:]_block_invoke";
      __int16 v13 = 2050;
      uint64_t v14 = v9;
      __int16 v15 = 1026;
      int v16 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s _numSamplesSkippedForVT=%{public}lu, _finishedSkippingSamplesForVT=%{public}d",  (uint8_t *)&v11,  0x1Cu);
    }
  }

  if ([v5 numSamples])
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _pcmBufferForAudioChunk:v5]);
    [*(id *)(*(void *)(a1 + 32) + 120) analyzeAudioBuffer:v10 atAudioFramePosition:*(void *)(*(void *)(a1 + 32) + 128)];
    *(void *)(*(void *)(a1 + 32) + 128) += [v10 frameLength];
  }
}

void sub_10005E504(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEItriggerEndSampleCount]);
  uint64_t v3 = [v2 unsignedIntegerValue];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEIclientStartSampleCount]);
  unint64_t v5 = v3 - (_BYTE *)[v4 unsignedIntegerValue];

  +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
  *(double *)(*(void *)(a1 + 40) + 184LL) = (double)v5 / v6;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEIextraSamplesAtStart]);
  id v8 = [v7 unsignedIntegerValue];

  *(void *)(*(void *)(a1 + 40) + 192LL) = (unint64_t)(*(double *)(*(void *)(a1 + 40) + 184LL)
  *(double *)(*(void *)(a1 + 40) + 20+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = (float)((float)((float)(unint64_t)v8
  uint64_t v9 = (os_log_s *)CSLogCategoryEP;
  if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v12 = *(void *)(v10 + 184);
    uint64_t v13 = *(void *)(v10 + 192);
    unint64_t v14 = (unint64_t)*(double *)(v10 + 200);
    uint64_t v15 = *(void *)(v10 + 208);
    uint64_t v16 = *(void *)(v10 + 248);
    LODWORD(v10) = *(unsigned __int8 *)(v10 + 14);
    int v17 = 136316930;
    id v18 = "-[CSNNVADEndpointAnalyzer handleVoiceTriggerWithActivationInfo:]_block_invoke";
    __int16 v19 = 2050;
    uint64_t v20 = v12;
    __int16 v21 = 2050;
    uint64_t v22 = v13;
    __int16 v23 = 2050;
    unint64_t v24 = v14;
    __int16 v25 = 2050;
    uint64_t v26 = v15;
    __int16 v27 = 2050;
    uint64_t v28 = v16;
    __int16 v29 = 1026;
    int v30 = v10;
    __int16 v31 = 2114;
    uint64_t v32 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s triggerEndSeconds: %{public}f, _vtEndInSampleCount: %{public}lu, _vtExtraAudioAtStartInMs: %{public}lu,  _nnvad AudioOriginInMs: %{public}f, _numSamplesSkippedForVT: %{public}lu, _finishedSkippingSamplesForVT: %{public}d, voic eTriggerInfo: %{public}@,",  (uint8_t *)&v17,  0x4Eu);
  }

void sub_10005E714(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryEP;
  if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315650;
    __int16 v23 = "-[CSNNVADEndpointAnalyzer resetForNewRequestWithSampleRate:recordContext:disableRCSelection:]_block_invoke";
    __int16 v24 = 2048;
    __int16 v25 = v3;
    __int16 v26 = 2112;
    uint64_t v27 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s NewReq: sampleRate: %lu, recordContext: %@",  buf,  0x20u);
  }

  *(_BYTE *)(*(void *)(a1 + 40) + 12LL) = 0;
  unsigned __int8 v5 = +[CSUtils supportCSTwoShotDecision](&OBJC_CLASS___CSUtils, "supportCSTwoShotDecision");
  *(_BYTE *)(*(void *)(a1 + 40) + 11) = [*(id *)(a1 + 32) isVoiceTriggered] & (v5 ^ 1);
  *(void *)(*(void *)(a1 + 40) + 232LL) = 0LL;
  *(_BYTE *)(*(void *)(a1 + 40) + 13LL) = 0;
  *(void *)(*(void *)(a1 + 40) + 24+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = -1LL;
  *(void *)(*(void *)(a1 + 40) + 152LL) = 0LL;
  *(void *)(*(void *)(a1 + 40) + 16+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0LL;
  *(_BYTE *)(*(void *)(a1 + 40) + 9LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 40) + 1+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0;
  *(void *)(*(void *)(a1 + 40) + 168LL) = *(void *)(a1 + 48);
  *(void *)(*(void *)(a1 + 40) + 4+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0x4014000000000000LL;
  *(void *)(*(void *)(a1 + 40) + 48LL) = 0x3FE8A3D70A3D70A4LL;
  *(void *)(*(void *)(a1 + 40) + 128LL) = 0LL;
  *(void *)(*(void *)(a1 + 40) + 136LL) = 0LL;
  *(void *)(*(void *)(a1 + 40) + 144LL) = 0LL;
  *(void *)(*(void *)(a1 + 40) + 184LL) = 0LL;
  *(void *)(*(void *)(a1 + 40) + 192LL) = 0LL;
  *(void *)(*(void *)(a1 + 40) + 208LL) = 0LL;
  *(void *)(*(void *)(a1 + 40) + 20+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0LL;
  *(void *)(*(void *)(a1 + 40) + 248LL) = 0LL;
  *(void *)(*(void *)(a1 + 40) + 56LL) = 0LL;
  *(_BYTE *)(*(void *)(a1 + 40) + 14LL) = 0;
  float v6 = objc_alloc(&OBJC_CLASS___AVAudioFormat);
  else {
    uint64_t v7 = 3LL;
  }
  id v8 = -[AVAudioFormat initWithCommonFormat:sampleRate:channels:interleaved:]( v6,  "initWithCommonFormat:sampleRate:channels:interleaved:",  v7,  1LL,  0LL,  (double)*(unint64_t *)(*(void *)(a1 + 40) + 168LL));
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void **)(v9 + 176);
  *(void *)(v9 + 176) = v8;

  uint64_t v11 = -[SNAudioStreamAnalyzer initWithFormat:]( objc_alloc(&OBJC_CLASS___SNAudioStreamAnalyzer),  "initWithFormat:",  *(void *)(*(void *)(a1 + 40) + 176LL));
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void **)(v12 + 120);
  *(void *)(v12 + 120) = v11;

  id v14 = [[SNDetectSpeechUtteranceRequest alloc] initWithRequestType:0];
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = *(void **)(v15 + 120);
  id v21 = 0LL;
  unsigned int v17 = [v16 addRequest:v14 withObserver:v15 error:&v21];
  id v18 = v21;
  __int16 v19 = v18;
  if (!v17 || v18)
  {
    uint64_t v20 = (os_log_s *)CSLogCategoryEP;
    if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315394;
      __int16 v23 = "-[CSNNVADEndpointAnalyzer resetForNewRequestWithSampleRate:recordContext:disableRCSelection:]_block_invoke";
      __int16 v24 = 2112;
      __int16 v25 = v19;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%s Err: %@", buf, 0x16u);
    }
  }
}

void sub_10005FEB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10006010C(_Unwind_Exception *a1)
{
}

void sub_100060474( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

id sub_1000606E0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 56) attSiriSvcListener]);
  [v2 notifyClientsWithBlock:&stru_10022B5D0];

  return [*(id *)(a1 + 32) _stopAttendingForRequestId:*(void *)(*(void *)(a1 + 32) + 64) isReqCC:0 forceStop:1];
}

void sub_100060730(id a1, id a2)
{
}

void sub_100060738(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    unsigned __int8 v5 = "-[CSAttSiriContConvController _setupAttendingTimer]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s attending timer fired", (uint8_t *)&v4, 0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleAttendingTimeout];
}

void sub_1000607F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      id v8 = v7;
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v15 = "-[CSAttSiriContConvController _configureAttendingTimeout]_block_invoke";
      __int16 v16 = 2114;
      unsigned int v17 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s getMitigationAsset error : %{public}@",  buf,  0x16u);
    }
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(dispatch_queue_s **)(v10 + 48);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100060948;
    v12[3] = &unk_10022EFD0;
    v12[4] = v10;
    id v13 = v5;
    dispatch_async(v11, v12);
  }
}

double sub_100060948(uint64_t a1)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 12LL) = v2;
  uint64_t v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = *(float *)(*(void *)(a1 + 32) + 12LL);
    int v6 = 136315394;
    uint64_t v7 = "-[CSAttSiriContConvController _configureAttendingTimeout]_block_invoke";
    __int16 v8 = 2048;
    double v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Setting attending timeout[asset] to %f secs",  (uint8_t *)&v6,  0x16u);
  }

  return result;
}

void sub_100060A18(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      __int16 v8 = v7;
      double v9 = (__CFString *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
      int v16 = 136315394;
      unsigned int v17 = "-[CSAttSiriContConvController _applyGazeSignalMandate]_block_invoke";
      __int16 v18 = 2114;
      __int16 v19 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s getMitigationAsset error : %{public}@",  (uint8_t *)&v16,  0x16u);
    }
  }

  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    if ([v5 useGazeSignal])
    {
      uint64_t v11 = 1LL;
    }

    else
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
      uint64_t v11 = (uint64_t)[v12 isGazeSignalEnabled];
    }

    id v13 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      id v14 = @"NO";
      if ((_DWORD)v11) {
        id v14 = @"YES";
      }
      int v16 = 136315394;
      unsigned int v17 = "-[CSAttSiriContConvController _applyGazeSignalMandate]_block_invoke";
      __int16 v18 = 2112;
      __int16 v19 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%s Setting _useGazeSignal to %@",  (uint8_t *)&v16,  0x16u);
    }

    [WeakRetained setUseGazeSignal:v11];
    uint64_t v15 = *(void *)(a1 + 32);
    if (*(_BYTE *)(v15 + 9)) {
      [WeakRetained _setupGazeNodeWithAttSiriController:*(void *)(v15 + 56)];
    }
  }
}

void sub_100060C04(uint64_t a1)
{
  int v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    id v5 = "-[CSAttSiriContConvController _setupClientPendingTimer]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s _clientPendingTimer fired",  (uint8_t *)&v4,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleAttendingTimeout];
}

void sub_100060CC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 40);
    int v6 = 136315394;
    uint64_t v7 = "-[CSAttSiriContConvController _startAttendingWithAudioRecordContext:withRequestId:shouldStartTimer:]_block_invoke";
    __int16 v8 = 1024;
    int v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s --useLegacyGazeModel--:%u",  (uint8_t *)&v6,  0x12u);
  }

  [v3 attSiriDidStartAttending:*(unsigned __int8 *)(*(void *)(a1 + 32) + 9) useLegacyModel:*(unsigned __int8 *)(a1 + 40)];
}

id sub_100060DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16LL);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___CSAttSiriIOSGazeNode, a2);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) == 0) {
    __assert_rtn( "-[CSAttSiriContConvController updateSiriOrbLocation:]_block_invoke",  "CSAttSiriContConvController.m",  298,  "NO");
  }
  return objc_msgSend( *(id *)(*(void *)(a1 + 32) + 16),  "addAreaOfInterestForSiriOrb:",  *(double *)(a1 + 40),  *(double *)(a1 + 48),  *(double *)(a1 + 56),  *(double *)(a1 + 64));
}

id sub_100060E10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16LL);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___CSAttSiriIOSGazeNode, a2);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) == 0) {
    __assert_rtn( "-[CSAttSiriContConvController relayGazeEstimates:landmarks:]_block_invoke",  "CSAttSiriContConvController.m",  287,  "NO");
  }
  return objc_msgSend( *(id *)(*(void *)(a1 + 32) + 16),  "gazeEstimate:landmarks:",  *(void *)(a1 + 40),  *(double *)(a1 + 48),  *(double *)(a1 + 56));
}

id sub_100060E7C(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1[4] + 16LL);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___CSAttSiriIOSGazeNode, a2);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) == 0) {
    __assert_rtn( "-[CSAttSiriContConvController gazeTrackerFaceTrackingMetaDataUpdate:atMachAbsTime:]_block_invoke",  "CSAttSiriContConvController.m",  276,  "NO");
  }
  return [*(id *)(a1[4] + 16) gazeTrackerFaceTrackingMetaDataUpdate:a1[5] atMachAbsTime:a1[6]];
}

id sub_100060EE8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 56) startSpeechProcessing:*(void *)(a1 + 40)];
}

id sub_100060EF4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 80) start];
}

id sub_100060F00(uint64_t a1)
{
  int v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(unsigned __int8 *)(a1 + 48);
    int v5 = *(unsigned __int8 *)(a1 + 49);
    int v7 = 136315906;
    __int16 v8 = "-[CSAttSiriContConvController stopAttendingForRequestId:isReqCC:forceStop:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v3;
    __int16 v11 = 1024;
    int v12 = v4;
    __int16 v13 = 1024;
    int v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Request stop attending with request Id:%@ CCReq: %d forceStop: %d",  (uint8_t *)&v7,  0x22u);
  }

  return [*(id *)(a1 + 40) _stopAttendingForRequestId:*(void *)(a1 + 32) isReqCC:*(unsigned __int8 *)(a1 + 48) forceStop:*(unsigned __int8 *)(a1 + 49)];
}

id sub_100060FE4(uint64_t a1)
{
  int v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 56);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    int v7 = 136315906;
    __int16 v8 = "-[CSAttSiriContConvController startAttendingWithAudioRecordContext:attendingSiriRequestContext:withRequestId:sh"
         "ouldStartTimer:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    __int16 v11 = 1024;
    int v12 = v3;
    __int16 v13 = 2112;
    uint64_t v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Request start attending with requestId:%@ startTimer: %d recordContext:%@",  (uint8_t *)&v7,  0x26u);
  }

  return [*(id *)(a1 + 48) _startAttendingWithAudioRecordContext:*(void *)(a1 + 40) withRequestId:*(void *)(a1 + 32) shouldStartTimer:*(unsigned __int8 *)(a1 + 56)];
}

void sub_100062068( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100062C74( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
}

void sub_1000636B0(uint64_t a1)
{
  int v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    uint64_t v4 = "-[CSVoiceTriggerFirstPassJarvis siriClientBehaviorMonitor:willStopStream:reason:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Siri Client will stop listening, resume FirstPassJarvis listen",  (uint8_t *)&v3,  0xCu);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 11LL) = 0;
}

id sub_100063760(uint64_t a1)
{
  int v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[CSVoiceTriggerFirstPassJarvis siriClientBehaviorMonitor:didStopStream:withEventUUID:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Siri Client stops listening now, FirstPassJarvis can listen now",  (uint8_t *)&v4,  0xCu);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 11LL) = 0;
  return [*(id *)(a1 + 32) _reset];
}

void sub_100063818(uint64_t a1)
{
  int v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    int v4 = "-[CSVoiceTriggerFirstPassJarvis siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEve"
         "ntUUID:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Siri Client starts listening now, FirstPassJarvis shouldn't listen now",  (uint8_t *)&v3,  0xCu);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 11LL) = 1;
}

void sub_1000638CC(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 1+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0;
  [*(id *)(a1 + 32) _reset];
  int v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    int v6 = "-[CSVoiceTriggerFirstPassJarvis _handleSecondPassResult:deviceId:error:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Stopping firstpass Jarvis audio as second-pass made decision",  buf,  0xCu);
  }

  int v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioStream]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000639EC;
  v4[3] = &unk_10022E730;
  v4[4] = *(void *)(a1 + 32);
  [v3 stopAudioStreamWithOption:0 completion:v4];

  if (*(void *)(a1 + 40) != 1LL) {
    [*(id *)(a1 + 32) _cancelAudioStreamHold];
  }
}

void sub_1000639EC(uint64_t a1, int a2, void *a3)
{
  int v6 = (void *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      int v7 = @"YES";
    }
    else {
      int v7 = @"NO";
    }
    __int16 v8 = v6;
    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([a3 localizedDescription]);
    *(_DWORD *)__int128 buf = 136315650;
    uint64_t v14 = "-[CSVoiceTriggerFirstPassJarvis _handleSecondPassResult:deviceId:error:]_block_invoke";
    __int16 v15 = 2114;
    int v16 = v7;
    __int16 v17 = 2114;
    __int16 v18 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s FirstPassJarvis stopped audio stream successfully? %{public}@, error : %{public}@",  buf,  0x20u);
  }

  uint64_t v10 = *(void *)(a1 + 32);
  __int16 v11 = *(dispatch_queue_s **)(v10 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100063B38;
  block[3] = &unk_10022F100;
  void block[4] = v10;
  dispatch_async(v11, block);
}

id sub_100063B38(uint64_t a1)
{
  return [*(id *)(a1 + 32) _didStopAudioStream];
}

uint64_t sub_100063B40(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100063B50(uint64_t a1)
{
}

void sub_100063B58(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 voiceTriggerEventInfo]);
  id v8 = [v7 mutableCopy];

  [v8 setValue:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) forKey:kVTEIFirstPassJarvisTriggerMode];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained _handleSecondPassResult:v6 deviceId:*(void *)(*(void *)(a1 + 32) + 128) error:v5];

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerStatAggregator sharedAggregator]( &OBJC_CLASS___CSVoiceTriggerStatAggregator,  "sharedAggregator"));
  id v11 = [v6 result];

  [v10 logSecondPassResult:v11 eventInfo:v8 triggerAPWakeUp:0];
  uint64_t v12 = *(void *)(a1 + 32);
  __int16 v13 = *(dispatch_queue_s **)(v12 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100063C80;
  block[3] = &unk_10022F100;
  void block[4] = v12;
  dispatch_async(v13, block);
}

id sub_100063C80(uint64_t a1)
{
  return [*(id *)(a1 + 32) _teardownSecondPass];
}

void sub_100063C88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(dispatch_queue_s **)(v1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100063CE0;
  block[3] = &unk_10022F100;
  void block[4] = v1;
  dispatch_async(v2, block);
}

id sub_100063CE0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _didStopAudioStream];
}

void sub_100063CE8(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(a1 + 32) + 9LL))
  {
    int v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  505LL,  0LL));
    int v3 = (os_log_s *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315138;
      uint64_t v14 = "-[CSVoiceTriggerFirstPassJarvis _didDetectKeywordFromDeviceId:activationInfo:triggerHostTime:completion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Ignoring external Jarvis trigger since we are already handling a trigger candidate",  (uint8_t *)&v13,  0xCu);
    }

    uint64_t v4 = *(void *)(a1 + 56);
    if (v4) {
      (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v2);
    }
  }

  else
  {
    id v5 = (os_log_s *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 136315138;
      uint64_t v14 = "-[CSVoiceTriggerFirstPassJarvis _didDetectKeywordFromDeviceId:activationInfo:triggerHostTime:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s Sending early detect notification upon first pass trigger",  (uint8_t *)&v13,  0xCu);
    }

    *(void *)(*(void *)(a1 + 32) + 104LL) = mach_absolute_time();
    kdebug_trace(722469264LL, 0LL, 0LL, 0LL, 0LL);
    uint64_t v6 = objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerFirstPassMetrics CSVoiceTriggerFirstPassMetricsWithFirstPassInfoGeneratedTime:firstPassInfoProcessedTime:]( &OBJC_CLASS___CSVoiceTriggerFirstPassMetrics,  "CSVoiceTriggerFirstPassMetricsWithFirstPassInfoGeneratedTime:firstPassInfoProcessedTime:",  *(void *)(a1 + 64),  *(void *)(*(void *)(a1 + 32) + 104LL)));
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = *(void **)(v7 + 176);
    *(void *)(v7 + 176) = v6;

    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriLauncher sharedLauncher](&OBJC_CLASS___CSSiriLauncher, "sharedLauncher"));
    [v9 notifyCarPlayVoiceTriggerPrewarm:*(void *)(a1 + 40) deviceId:*(void *)(a1 + 48) completion:0];

    uint64_t v10 = objc_autoreleasePoolPush();
    [*(id *)(*(void *)(a1 + 32) + 120) setDelegate:0];
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void **)(v11 + 120);
    *(void *)(v11 + 120) = 0LL;

    objc_autoreleasePoolPop(v10);
    *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 1;
    *(void *)(*(void *)(a1 + 32) + 72LL) = 0LL;
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 128LL), *(id *)(a1 + 48));
    [*(id *)(a1 + 32) _handleJarvisVoiceTriggerFromDeviceId:*(void *)(a1 + 48) activationInfo:*(void *)(a1 + 40) triggerHostTime:*(void *)(a1 + 64) completion:*(void *)(a1 + 56)];
  }

uint64_t sub_100063F24(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100063F38(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(dispatch_queue_s **)(v4 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100063FCC;
  block[3] = &unk_10022F100;
  void block[4] = v4;
  id v6 = a3;
  dispatch_async(v5, block);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_100063FCC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _didStartAudioStream];
}

void sub_100063FD4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    if ((_DWORD)a2) {
      uint64_t v7 = @"YES";
    }
    else {
      uint64_t v7 = @"NO";
    }
    id v8 = v6;
    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
    int v11 = 136315650;
    uint64_t v12 = "-[CSVoiceTriggerFirstPassJarvis _handleJarvisVoiceTriggerFromDeviceId:activationInfo:triggerHostTime:completio"
          "n:]_block_invoke";
    __int16 v13 = 2112;
    uint64_t v14 = v7;
    __int16 v15 = 2114;
    int v16 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s uint64_t result = %@, error = %{public}@",  (uint8_t *)&v11,  0x20u);
  }

  uint64_t v10 = *(void *)(a1 + 32);
  if (v10) {
    (*(void (**)(uint64_t, uint64_t, id))(v10 + 16))(v10, a2, v5);
  }
}

void sub_100064104(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(v6 + 24);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000641A8;
  v10[3] = &unk_10022E678;
  char v13 = a2;
  void v10[4] = v6;
  id v11 = v5;
  id v12 = v7;
  id v9 = v5;
  dispatch_async(v8, v10);
}

uint64_t sub_1000641A8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56)) {
    [*(id *)(a1 + 32) _holdAudioStreamWithTimeout:5.0];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000641F4(uint64_t a1)
{
  int v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    uint64_t v4 = "-[CSVoiceTriggerFirstPassJarvis spgEndpointAnalyzerDidDetectEndpoint:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s FirstPass Jarvis received endpoint detected notification.",  (uint8_t *)&v3,  0xCu);
  }

  *(void *)(*(void *)(a1 + 32) + 8+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = *(void *)(*(void *)(a1 + 32) + 72LL);
}

void sub_1000642A8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  id v10 = v5;
  if ((a2 & 1) == 0)
  {
    id v7 = [v5 code];
    uint64_t v6 = v10;
    if (v7 != (id)505)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
      [WeakRetained _clearTriggerCandidate];

      uint64_t v6 = v10;
    }
  }

  uint64_t v9 = *(void *)(a1 + 32);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t, id))(v9 + 16))(v9, a2, v10);
    uint64_t v6 = v10;
  }
}

id sub_100064330(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(void **)(v2 + 168);
  if (!*(_BYTE *)(v2 + 12)) {
    return [v3 addObject:*(void *)(a1 + 40)];
  }
  if ([v3 count])
  {
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    id v4 = *(id *)(*(void *)(a1 + 32) + 168LL);
    id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v11;
      do
      {
        id v8 = 0LL;
        do
        {
          if (*(void *)v11 != v7) {
            objc_enumerationMutation(v4);
          }
          objc_msgSend( *(id *)(a1 + 32),  "_handleAudioChunk:",  *(void *)(*((void *)&v10 + 1) + 8 * (void)v8),  (void)v10);
          id v8 = (char *)v8 + 1;
        }

        while (v6 != v8);
        id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }

      while (v6);
    }

    [*(id *)(*(void *)(a1 + 32) + 168) removeAllObjects];
  }

  return objc_msgSend(*(id *)(a1 + 32), "_handleAudioChunk:", *(void *)(a1 + 40), (void)v10);
}

id sub_100064484(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v5 = 136315394;
    id v6 = "-[CSVoiceTriggerFirstPassJarvis audioStreamProvider:didStopStreamUnexpectedly:]_block_invoke";
    __int16 v7 = 2048;
    uint64_t v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s record stop unexpectedly with reason : %ld",  (uint8_t *)&v5,  0x16u);
  }

  return [*(id *)(a1 + 32) _didStopAudioStream];
}

id sub_100064544(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setAsset:*(void *)(a1 + 40)];
}

id sub_100064550(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reset];
}

void sub_100064558(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) voiceTriggerSecondPass]);
  [v2 start];

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[CSSiriClientBehaviorMonitor sharedInstance]( &OBJC_CLASS___CSSiriClientBehaviorMonitor,  "sharedInstance"));
  [v3 registerObserver:*(void *)(a1 + 32)];

  id v4 = *(void **)(a1 + 32);
  int v5 = -[CSVoiceTriggerUserSelectedPhrase initWithEndpointId:]( objc_alloc(&OBJC_CLASS___CSVoiceTriggerUserSelectedPhrase),  "initWithEndpointId:",  0LL);
  [v4 setMultiPhraseSelectedStatus:v5];
}

void sub_100064D20(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) idleUsecases]);
    [v2 addObject:*(void *)(a1 + 32)];

    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) activeUsecases]);
    [v3 removeObject:*(void *)(a1 + 32)];
  }

  id v4 = *(void **)(a1 + 40);
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 idleUsecases]);
  [v4 _cleanupUsecases:v5];

  id v6 = *(void **)(a1 + 40);
  id v7 = (id)objc_claimAutoreleasedReturnValue([v6 activeUsecases]);
  [v6 _cleanupUsecases:v7];
}

uint64_t sub_100064DD4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100064DE8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idleUsecases]);
  unsigned __int8 v3 = [v2 containsObject:*(void *)(a1 + 40)];

  if ((v3 & 1) == 0)
  {
    id v6 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
    goto LABEL_5;
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeUsecases]);
  unsigned int v5 = [v4 containsObject:*(void *)(a1 + 40)];

  if (v5)
  {
    id v6 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
LABEL_5:
    v6();
    return;
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idleUsecases]);
  [v7 removeObject:*(void *)(a1 + 40)];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeUsecases]);
  [v8 addObject:*(void *)(a1 + 40)];

  uint64_t v9 = *(void **)(a1 + 32);
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([v9 idleUsecases]);
  [v9 _cleanupUsecases:v10];

  __int128 v11 = *(void **)(a1 + 32);
  id v12 = (id)objc_claimAutoreleasedReturnValue([v11 activeUsecases]);
  [v11 _cleanupUsecases:v12];
}

void sub_100064F10(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idleUsecases]);
  [v2 addObject:*(void *)(a1 + 40)];
}

int64_t sub_100066988(id a1, NSDictionary *a2, NSDictionary *a3)
{
  id v4 = a2;
  unsigned int v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", @"majorVersion"));
  unsigned int v7 = [v6 unsignedIntValue];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", @"majorVersion"));
  unsigned int v9 = [v8 unsignedIntValue];

  if (v7 > v9) {
    goto LABEL_5;
  }
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", @"majorVersion"));
  unsigned int v11 = [v10 unsignedIntValue];
  id v12 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", @"majorVersion"));
  unsigned int v13 = [v12 unsignedIntValue];

  if (v11 < v13)
  {
    int64_t v14 = 1LL;
    goto LABEL_6;
  }

  __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", @"minorVersion"));
  unsigned int v16 = [v15 unsignedIntValue];
  __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", @"minorVersion"));
  unsigned int v18 = [v17 unsignedIntValue];

  if (v16 > v18)
  {
LABEL_5:
    int64_t v14 = -1LL;
    goto LABEL_6;
  }

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", @"minorVersion"));
  unsigned int v21 = [v20 unsignedIntValue];
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", @"minorVersion"));
  unsigned int v23 = [v22 unsignedIntValue];

  if (v21 < v23) {
    int64_t v14 = 1LL;
  }
  else {
    int64_t v14 = -1LL;
  }
LABEL_6:

  return v14;
}

void sub_100066B24(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v3));
  [v4 setEngineMajorVersion:v5];

  id v6 = (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 40)));
  [v4 setEngineMinorVersion:v6];
}

id sub_100067110(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _setupAdamMetricsManagerIfNeeded];
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 64LL);
  if (v3)
  {
    id v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) data]);
    objc_msgSend( v3,  "addSamples:numSamples:atHostTime:",  objc_msgSend(v4, "bytes"),  objc_msgSend(*(id *)(a1 + 40), "numSamples"),  objc_msgSend(*(id *)(a1 + 40), "hostTime"));

    while (1)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      unint64_t v6 = *(void *)(v5 + 72) + *(unsigned int *)(v5 + 12);
      id result = [*(id *)(v5 + 64) sampleCount];
      id v7 = [*(id *)(*(void *)(a1 + 32) + 64) copySamplesFrom:*(void *)(*(void *)(a1 + 32) + 72) to:*(void *)(*(void *)(a1 + 32) + 72) + *(unsigned int *)(*(void *)(a1 + 32) + 12)];
      [v7 numSamples];
      uint64_t v8 = *(void **)(a1 + 32);
      if (v8 && ([v8 _defaultASBD], (unsigned int v9 = *(void **)(a1 + 32)) != 0))
      {
        [v9 _defaultASBD];
      }

      else
      {
        uint64_t v13 = 0LL;
        __int128 v11 = 0u;
        __int128 v12 = 0u;
      }

      id v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "data", v11, v12, v13));
      [v10 bytes];

      *(void *)(*(void *)(a1 + 32) + 72LL) += *(unsigned int *)(*(void *)(a1 + 32) + 12LL);
    }
  }

  return result;
}

id sub_10006724C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleDidStop];
}

id sub_100067254(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setupAdamMetricsManagerIfNeeded];
}

void sub_100067AE8(_Unwind_Exception *a1)
{
}

void sub_100067DCC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(dispatch_queue_s **)(v7 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100067E7C;
  block[3] = &unk_10022EA98;
  id v12 = v6;
  id v13 = v5;
  uint64_t v14 = v7;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void sub_100067E7C(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  if (v1 || (id v4 = (void *)a1[5]) == 0LL)
  {
    id v2 = (os_log_s *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      id v12 = "-[CSAdBlockerStoreManager CSAdBlockerAssetDownloadMonitor:didInstallNewAsset:assetProviderType:]_block_invoke_2";
      __int16 v13 = 2114;
      uint64_t v14 = v1;
      _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Failed to get AdBlocker asset: %{public}@",  (uint8_t *)&v11,  0x16u);
    }
  }

  else
  {
    objc_storeStrong((id *)(a1[6] + 24LL), v4);
    id v5 = (void *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = *(void **)(a1[6] + 24LL);
      uint64_t v7 = v5;
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 path]);
      int v11 = 136315650;
      id v12 = "-[CSAdBlockerStoreManager CSAdBlockerAssetDownloadMonitor:didInstallNewAsset:assetProviderType:]_block_invoke";
      __int16 v13 = 2114;
      uint64_t v14 = v6;
      __int16 v15 = 2114;
      unsigned int v16 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s AdBlocker Asset: %{public}@, path: %{public}@",  (uint8_t *)&v11,  0x20u);
    }

    id v9 = (id *)a1[6];
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9[3] path]);
    [v9 _populateAdBlockerWithSignaturesWithAsset:v10];
  }

void sub_100068010(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(dispatch_queue_s **)(v7 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000680C0;
  block[3] = &unk_10022EA98;
  id v12 = v6;
  id v13 = v5;
  uint64_t v14 = v7;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void sub_1000680C0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1 || (id v4 = *(void **)(a1 + 40)) == 0LL)
  {
    id v2 = (os_log_s *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v22 = "-[CSAdBlockerStoreManager assetDownloadMonitorDelegate:assetType:]_block_invoke_2";
      __int16 v23 = 2114;
      __int16 v24 = v1;
      id v12 = "%s Failed to get AdBlocker asset: %{public}@";
      id v13 = v2;
      uint32_t v14 = 22;
      goto LABEL_14;
    }
  }

  else
  {
    objc_storeStrong((id *)(*(void *)(a1 + 48) + 24LL), v4);
    id v5 = (void *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = *(void **)(*(void *)(a1 + 48) + 24LL);
      uint64_t v7 = v5;
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 path]);
      *(_DWORD *)__int128 buf = 136315650;
      uint64_t v22 = "-[CSAdBlockerStoreManager assetDownloadMonitorDelegate:assetType:]_block_invoke";
      __int16 v23 = 2114;
      __int16 v24 = v6;
      __int16 v25 = 2114;
      __int16 v26 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s AdBlocker Asset: %{public}@, path: %{public}@",  buf,  0x20u);
    }

    if (!+[CSUtils isExclaveHardware](&OBJC_CLASS___CSUtils, "isExclaveHardware"))
    {
      __int16 v15 = *(id **)(a1 + 48);
      unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue([v15[3] path]);
      [v15 _populateAdBlockerWithSignaturesWithAsset:v16];

      return;
    }

    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) configVersion]);
    unsigned int v10 = [v9 isEqual:@"defaultFallbackAdBlocker"];

    if (!v10)
    {
      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(+[CSUAFAssetManager sharedInstance](&OBJC_CLASS___CSUAFAssetManager, "sharedInstance"));
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472LL;
      v19[2] = sub_10006835C;
      v19[3] = &unk_10022B6A8;
      uint64_t v18 = *(void *)(a1 + 40);
      v19[4] = *(void *)(a1 + 48);
      id v20 = *(id *)(a1 + 32);
      [v17 mapAssetToExclaveKit:v18 completion:v19];

      return;
    }

    int v11 = (os_log_s *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v22 = "-[CSAdBlockerStoreManager assetDownloadMonitorDelegate:assetType:]_block_invoke";
      id v12 = "%s Skip mapping because the asset is default fallback";
      id v13 = v11;
      uint32_t v14 = 12;
LABEL_14:
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, v12, buf, v14);
    }
  }

void sub_10006835C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = (os_log_s *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v8 = 136315394;
      id v9 = "-[CSAdBlockerStoreManager assetDownloadMonitorDelegate:assetType:]_block_invoke";
      __int16 v10 = 2114;
      uint64_t v11 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Failed to map adblocker asset: %{public}@",  (uint8_t *)&v8,  0x16u);
    }
  }

  else
  {
    id v6 = *(id **)(a1 + 32);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6[3] path]);
    [v6 _populateAdBlockerWithSignaturesWithAsset:v7];
  }
}

void sub_100068454(uint64_t a1)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100068660;
  void v9[3] = &unk_10022E340;
  void v9[4] = *(void *)(a1 + 32);
  id v2 = objc_retainBlock(v9);
  if (+[CSUtils isExclaveHardware](&OBJC_CLASS___CSUtils, "isExclaveHardware"))
  {
    id v3 = (os_log_s *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v11 = "-[CSAdBlockerStoreManager start]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s AdBlocker fetching asset from UAF",  buf,  0xCu);
    }

    id v4 = (CSAssetDownloadingOption *)objc_claimAutoreleasedReturnValue( +[CSUAFAssetManager sharedInstance]( &OBJC_CLASS___CSUAFAssetManager,  "sharedInstance"));
    -[CSAssetDownloadingOption getInstalledAssetofType:forLocale:completion:]( v4,  "getInstalledAssetofType:forLocale:completion:",  4LL,  @"generic",  v2);
  }

  else
  {
    id v4 = objc_alloc_init(&OBJC_CLASS___CSAssetDownloadingOption);
    -[CSAssetDownloadingOption setAllowAdBlockerAssetDownloading:](v4, "setAllowAdBlockerAssetDownloading:", 1LL);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[CSAssetManager sharedManager](&OBJC_CLASS___CSAssetManager, "sharedManager"));
    [v5 setAssetDownloadingOption:v4];

    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[CSAdBlockerAssetDownloadMonitor sharedInstance]( &OBJC_CLASS___CSAdBlockerAssetDownloadMonitor,  "sharedInstance"));
    [v6 addObserver:*(void *)(a1 + 32)];

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSAssetManager sharedManager](&OBJC_CLASS___CSAssetManager, "sharedManager"));
    [v7 assetOfType:4 providerType:1 language:*(void *)(a1 + 40) completion:v2];
  }

  int v8 = (os_log_s *)CSLogCategoryAdBlocker;
  if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v11 = "-[CSAdBlockerStoreManager start]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s AdBlocker finished initialization",  buf,  0xCu);
  }
}

void sub_100068660(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(dispatch_queue_s **)(v7 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100068710;
  block[3] = &unk_10022EA98;
  id v12 = v6;
  id v13 = v5;
  uint64_t v14 = v7;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void sub_100068710(uint64_t a1)
{
  if (*(void *)(a1 + 32)
    || (__int16 v15 = *(void **)(a1 + 40)) == 0LL
    || (unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue([v15 configVersion]),
        unsigned int v17 = [v16 isEqualToString:@"1.1T"],
        v16,
        v17))
  {
    id v2 = (os_log_s *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = *(void **)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315394;
      __int16 v26 = "-[CSAdBlockerStoreManager start]_block_invoke_3";
      __int16 v27 = 2114;
      uint64_t v28 = v22;
      _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Failed to get AdBlocker asset using default fallback asset: %{public}@",  buf,  0x16u);
    }

    uint64_t v3 = objc_claimAutoreleasedReturnValue(+[CSAsset defaultFallBackAssetForAdBlocker](&OBJC_CLASS___CSAsset, "defaultFallBackAssetForAdBlocker"));
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = v3;
  }

  else
  {
    objc_storeStrong((id *)(*(void *)(a1 + 48) + 24LL), *(id *)(a1 + 40));
  }

  id v6 = *(void **)(*(void *)(a1 + 48) + 24LL);
  uint64_t v7 = (os_log_s *)CSLogCategoryAdBlocker;
  if (!v6)
  {
    if (!os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)__int128 buf = 136315138;
    __int16 v26 = "-[CSAdBlockerStoreManager start]_block_invoke";
    id v13 = "%s Default adBlockerPayload does not exist.";
    uint64_t v14 = v7;
    goto LABEL_17;
  }

  if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = v7;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 path]);
    *(_DWORD *)__int128 buf = 136315650;
    __int16 v26 = "-[CSAdBlockerStoreManager start]_block_invoke";
    __int16 v27 = 2114;
    uint64_t v28 = v6;
    __int16 v29 = 2114;
    int v30 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s AdBlocker Asset: %{public}@, path: %{public}@",  buf,  0x20u);
  }

  if (+[CSUtils isExclaveHardware](&OBJC_CLASS___CSUtils, "isExclaveHardware"))
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) configVersion]);
    unsigned int v11 = [v10 isEqual:@"defaultFallbackAdBlocker"];

    if (v11)
    {
      id v12 = (os_log_s *)CSLogCategoryAdBlocker;
      if (!os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_ERROR)) {
        return;
      }
      *(_DWORD *)__int128 buf = 136315138;
      __int16 v26 = "-[CSAdBlockerStoreManager start]_block_invoke";
      id v13 = "%s Skip mapping because the asset is default fallback";
      uint64_t v14 = v12;
LABEL_17:
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, v13, buf, 0xCu);
      return;
    }

    id v20 = (void *)objc_claimAutoreleasedReturnValue(+[CSUAFAssetManager sharedInstance](&OBJC_CLASS___CSUAFAssetManager, "sharedInstance"));
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    v23[2] = sub_100068A34;
    v23[3] = &unk_10022B6A8;
    uint64_t v21 = *(void *)(a1 + 40);
    void v23[4] = *(void *)(a1 + 48);
    id v24 = *(id *)(a1 + 32);
    [v20 mapAssetToExclaveKit:v21 completion:v23];
  }

  else
  {
    uint64_t v18 = *(id **)(a1 + 48);
    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v18[3] path]);
    [v18 _populateAdBlockerWithSignaturesWithAsset:v19];
  }

void sub_100068A34(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = (os_log_s *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v8 = 136315394;
      id v9 = "-[CSAdBlockerStoreManager start]_block_invoke";
      __int16 v10 = 2114;
      uint64_t v11 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Failed to map adblocker asset: %{public}@",  (uint8_t *)&v8,  0x16u);
    }
  }

  else
  {
    id v6 = *(id **)(a1 + 32);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6[3] path]);
    [v6 _populateAdBlockerWithSignaturesWithAsset:v7];
  }
}

void sub_100068B2C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  unsigned int v3 = [v2 containsObject:*(void *)(a1 + 40)];

  if (v3)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
    [v4 removeObject:*(void *)(a1 + 40)];
  }

void sub_100068BAC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  unsigned __int8 v3 = [v2 containsObject:*(void *)(a1 + 40)];

  if ((v3 & 1) == 0)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
    [v4 addObject:*(void *)(a1 + 40)];
  }

void sub_100069D78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id sub_100069F58(uint64_t a1)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) _shouldReportBoron];
  id result = [*(id *)(a1 + 32) _popRemoteVADSignal];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

id sub_100069F9C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _addRemoteVADSignal:*(unsigned __int8 *)(a1 + 40)];
}

void sub_100069FAC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = v6;
    int v8 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
    int v10 = 136315650;
    uint64_t v11 = "-[CSOpportuneSpeakListener stopListenWithStateReset:completion:]_block_invoke";
    __int16 v12 = 1026;
    int v13 = a2;
    __int16 v14 = 2114;
    __int16 v15 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s CSOpportuneSpeakListener received didStop : %{public}d, %{public}@",  (uint8_t *)&v10,  0x1Cu);
  }

  [*(id *)(*(void *)(a1 + 32) + 88) endAudio];
  *(void *)(*(void *)(a1 + 32) + 96LL) = 0LL;
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, uint64_t, id))(v9 + 16))(v9, a2, v5);
  }
}

void sub_10006A0D8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v5 = a3;
  [v4 stop];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10006A138(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = v6;
    int v8 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
    int v10 = 136315650;
    uint64_t v11 = "-[CSOpportuneSpeakListener _startRequestWithCompletion:]_block_invoke";
    __int16 v12 = 1026;
    int v13 = a2;
    __int16 v14 = 2114;
    __int16 v15 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s CSOpportuneSpeakListener received didStart : %{public}d, %{public}@",  (uint8_t *)&v10,  0x1Cu);
  }

  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    (*(void (**)(uint64_t, uint64_t, id))(v9 + 16))(v9, a2, v5);
  }
}

void sub_10006A250(uint64_t a1, int a2, void *a3)
{
  id v7 = a3;
  if (a2)
  {
    if (+[CSUtils supportsUnderstandingOnDevice](&OBJC_CLASS___CSUtils, "supportsUnderstandingOnDevice"))
    {
      id v5 = [[LBLocalSpeechRecognizerClient alloc] initWithDelegate:0];
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[CSUtils getSiriLanguageWithFallback:]( &OBJC_CLASS___CSUtils,  "getSiriLanguageWithFallback:",  @"en-US"));
      [v5 preheatLocalSpeechRecognitionWithLanguage:v6 source:3];
    }
  }

  else
  {
    [*(id *)(*(void *)(a1 + 32) + 32) stop];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_10006A30C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_10006A320(uint64_t a1)
{
  return [*(id *)(a1 + 32) _resetAlignBuffer];
}

BOOL sub_10006A3DC(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSHomePodSettingsMonitor sharedInstance](&OBJC_CLASS___CSHomePodSettingsMonitor, "sharedInstance"));
  unsigned __int8 v2 = [v1 shouldAudioMonitoringRecording];

  if ((v2 & 1) == 0)
  {
    unsigned __int8 v3 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      id v6 = "-[CSSmartSiriVolumeEnablePolicyHomePod _addSmartSiriVolumeEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolume cannot be resumed since we should not monitor audio",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

id sub_10006B1B4(void *a1)
{
  return [*(id *)(a1[4] + 8) speechRecognizerReadyForNewTurnWithSpeechStartDetectedAtHostTime:a1[6] audioRecordType:a1[7] audioRecordDeviceId:a1[5]];
}

id sub_10006B1C8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) speechStartDetectedWithShouldDuckTTS:*(unsigned __int8 *)(a1 + 40)];
}

id sub_10006B1DC(void *a1)
{
  return [*(id *)(a1[4] + 8) speechStartDetectedWithHostTime:a1[6] audioRecordType:a1[7] audioRecordDeviceId:a1[5]];
}

id sub_10006B1F0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) localAttendingStopped];
}

id sub_10006B1FC(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) localAttendingStoppedUnexpectedlyWithError:*(void *)(a1 + 40)];
}

id sub_10006B208(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) localAttendingStartedWithRootRequestId:*(void *)(a1 + 40)];
}

id sub_10006B214(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) localAttendingWillStartWithRootRequestId:*(void *)(a1 + 40)];
}

void sub_10006B220(uint64_t a1)
{
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  id v1 = *(id *)(*(void *)(a1 + 32) + 32LL);
  id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v8;
    do
    {
      for (uint64_t i = 0LL; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v1);
        }
        id v6 = *(void **)(*((void *)&v7 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v6, "siriUIDismissed") & 1) != 0) {
          objc_msgSend(v6, "siriUIDismissed", (void)v7);
        }
      }

      id v3 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v3);
  }
}

void sub_10006B330(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    __int16 v15 = "-[CSAttendingStatesProvidingProxy dismissAttending]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Sending Siri UI dismissal updates to listeners",  buf,  0xCu);
  }

  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 32LL);
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        __int128 v8 = *(void **)(*((void *)&v9 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v8, "dismissAttendingRequested") & 1) != 0) {
          objc_msgSend(v8, "dismissAttendingRequested", (void)v9);
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v5);
  }
}

void sub_10006B49C(uint64_t a1)
{
  id v3 = -[CSAttendingJarvisHintInfo initWithOrigin:deviceId:]( objc_alloc(&OBJC_CLASS___CSAttendingJarvisHintInfo),  "initWithOrigin:deviceId:",  2LL,  *(void *)(a1 + 32));
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 24LL));
  [WeakRetained postAttendingJarvisHintWithInfo:v3];
}

void sub_10006B4FC(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    unsigned int v17 = "-[CSAttendingStatesProvidingProxy siriDidPromptWithRootRequestId:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Sending Siri TTS Prompt Done updates to listeners",  buf,  0xCu);
  }

  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 40LL);
  id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        __int128 v8 = *(void **)(*((void *)&v11 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v8, "siriPromptDone") & 1) != 0) {
          objc_msgSend(v8, "siriPromptDone", (void)v11);
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v5);
  }

  __int128 v9 = -[CSAttendingTriggerForSiriPromptHintInfo initWithOrigin:reason:rootRequestId:]( objc_alloc(&OBJC_CLASS___CSAttendingTriggerForSiriPromptHintInfo),  "initWithOrigin:reason:rootRequestId:",  2LL,  1LL,  *(void *)(a1 + 40));
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24LL));
  [WeakRetained postAttendingTriggerForSiriPromptHintWithInfo:v9];
}

void sub_10006B6B0(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    __int16 v15 = "-[CSAttendingStatesProvidingProxy siriPromptWillStartWithRootRequestId:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Sending Siri TTS Prompt Start updates to listeners",  buf,  0xCu);
  }

  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 40LL);
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        __int128 v8 = *(void **)(*((void *)&v9 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v8, "siriPromptWillStart") & 1) != 0) {
          objc_msgSend(v8, "siriPromptWillStart", (void)v9);
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v5);
  }
}

void sub_10006B81C(uint64_t a1)
{
  id v2 = -[CSAttendingStopHintInfo initWithOrigin:reason:]( objc_alloc(&OBJC_CLASS___CSAttendingStopHintInfo),  "initWithOrigin:reason:",  2LL,  2LL);
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24LL));
  [WeakRetained postAttendingStopHintWithInfo:v2];

  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v4 = *(id *)(*(void *)(a1 + 32) + 32LL);
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        __int128 v9 = *(void **)(*((void *)&v10 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v9, "attendingXpcDisconnection") & 1) != 0) {
          objc_msgSend(v9, "attendingXpcDisconnection", (void)v10);
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v6);
  }
}

id sub_10006B974(uint64_t a1)
{
  return objc_storeWeak((id *)(*(void *)(a1 + 32) + 24LL), *(id *)(a1 + 40));
}

id sub_10006B980(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) removeObject:*(void *)(a1 + 40)];
}

id sub_10006B98C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) addObject:*(void *)(a1 + 40)];
}

id sub_10006B998(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 32) removeObject:*(void *)(a1 + 40)];
}

id sub_10006B9A4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 32) addObject:*(void *)(a1 + 40)];
}

void sub_10006B9B0(uint64_t a1)
{
}

id sub_10006C288(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) notifyObserver:a2];
}

void sub_10006C294(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue( +[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:]( &OBJC_CLASS___NSTimer,  "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:",  *(void *)(a1 + 32),  "_timerCallback",  0LL,  0LL,  30.0));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 8);
  *(void *)(v3 + _Block_object_dispose(va, 8) = v2;
}

id sub_10006C2EC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    id v5 = "-[CSMXRingtoneMonitor _timerCallback]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s _timerCallback: Safety timeout. Reset isRingtone",  (uint8_t *)&v4,  0xCu);
  }

  [*(id *)(a1 + 32) setIsAnyRingtoneCurrentlyPlaying:0];
  return [*(id *)(a1 + 32) _notifyObserversOfRingtoneChange];
}

void sub_10006C3A8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:kMXSessionProperty_AudioCategory]);
    int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kMXSessionProperty_IsActive]);
    unsigned int v5 = [v4 BOOLValue];

    if ([v3 isEqualToString:kMXSessionAudioCategory_Ringtone])
    {
      id v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      BOOL v7 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
      if (v5)
      {
        if (v7)
        {
          int v9 = 136315138;
          __int128 v10 = "-[CSMXRingtoneMonitor mxSessionMonitorSomeClientWentActive:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Some audio session with Ringtone category went Active.",  (uint8_t *)&v9,  0xCu);
        }

        [*(id *)(a1 + 40) _handleStartRingtone];
      }

      else
      {
        if (v7)
        {
          int v9 = 136315138;
          __int128 v10 = "-[CSMXRingtoneMonitor mxSessionMonitorSomeClientWentActive:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Some audio session with Ringtone category went Inactive.",  (uint8_t *)&v9,  0xCu);
        }

        [*(id *)(a1 + 40) _handleEndRingtone];
      }
    }
  }

  else
  {
    __int128 v8 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315138;
      __int128 v10 = "-[CSMXRingtoneMonitor mxSessionMonitorSomeClientWentActive:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s Received nil notification. Resetting ringtone activity.",  (uint8_t *)&v9,  0xCu);
    }

    [*(id *)(a1 + 40) _handleEndRingtone];
  }

void sub_10006C5B8(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___CSMXRingtoneMonitor);
  uint64_t v2 = (void *)qword_10027FE00;
  qword_10027FE00 = (uint64_t)v1;
}

void sub_10006CD38(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
  if (WeakRetained)
  {
    uint64_t v3 = WeakRetained;
    id v4 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
    char v5 = objc_opt_respondsToSelector( v4,  "osdProvider:silenceFramesCountMs:silenceProbability:silenceDurationMs:processedAudioMs:deviceHasBoronEnabled: latestBoronActiveSampleCount:");

    if ((v5 & 1) != 0)
    {
      id v14 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
      uint64_t v6 = *(void *)(a1 + 32);
      [*(id *)(a1 + 40) silenceFramesCountMs];
      double v8 = v7;
      [*(id *)(a1 + 40) silenceProbability];
      double v10 = v9;
      [*(id *)(a1 + 40) silenceDurationMs];
      double v12 = v11;
      [*(id *)(a1 + 40) processedAudioMs];
      [v14 osdProvider:v6 silenceFramesCountMs:*(unsigned __int8 *)(*(void *)(a1 + 32) + 10) silenceProbability:*(void *)(*(void *)(a1 + 32) + 80) silenceDurationMs:v8 processedAudioMs:v10 deviceHasBoronEnabled:v12 lat estBoronActiveSampleCount:v13];
    }
  }

void sub_10006CE38(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 72))
  {
    if (!*(_BYTE *)(v1 + 8))
    {
      *(_BYTE *)(v1 + _Block_object_dispose(va, 8) = 1;
      *(void *)(*(void *)(a1 + 32) + 64) = [*(id *)(a1 + 40) startSampleCount];
      uint64_t v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 64LL);
        int v17 = 136315394;
        uint64_t v18 = "-[CSAttSiriOSDProvider addAudio:]_block_invoke";
        __int16 v19 = 2048;
        uint64_t v20 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s firstAudioStartSampleCount: %llu",  (uint8_t *)&v17,  0x16u);
      }

      uint64_t v1 = *(void *)(a1 + 32);
    }

    ++*(void *)(v1 + 56);
    char v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) osdAnalyzer]);

    if (v5)
    {
      uint64_t v6 = (uint64_t)[*(id *)(a1 + 40) numSamples];
      if (v6 >= 1)
      {
        uint64_t v7 = v6;
        uint64_t v8 = 0LL;
        do
        {
          if (v7 >= 640) {
            uint64_t v9 = 640LL;
          }
          else {
            uint64_t v9 = v7;
          }
          double v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) subChunkFrom:v8 numSamples:v9 forChannel:0]);
          double v11 = (void *)objc_claimAutoreleasedReturnValue([v10 data]);
          if (+[CSConfig inputRecordingIsFloat](&OBJC_CLASS___CSConfig, "inputRecordingIsFloat"))
          {
            double v12 = (void *)objc_claimAutoreleasedReturnValue([v10 data]);
            uint64_t v13 = objc_claimAutoreleasedReturnValue( +[CSFLPCMTypeConverter convertToShortLPCMBufFromFloatLPCMBuf:]( &OBJC_CLASS___CSFLPCMTypeConverter,  "convertToShortLPCMBufFromFloatLPCMBuf:",  v12));

            double v11 = (void *)v13;
          }

          id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) osdAnalyzer]);
          objc_msgSend(v14, "addAudio:numSamples:", v11, objc_msgSend(v10, "numSamples"));

          v7 -= v9;
          v8 += v9;
          objc_msgSend( *(id *)(a1 + 32),  "setNumSamplesProcessed:",  (char *)objc_msgSend(*(id *)(a1 + 32), "numSamplesProcessed") + v9);
        }

        while (v7 > 0);
      }

      *(_BYTE *)(*(void *)(a1 + 32) + 1+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7, 0) = [*(id *)(a1 + 40) remoteVADAvailable];
      __int16 v15 = *(_BYTE **)(a1 + 32);
      if (v15[9])
      {
        if (v15[10]) {
          [v15 _processBoron:*(void *)(a1 + 40)];
        }
      }
    }

    else if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * *(void *)(*(void *)(a1 + 32) + 56LL), 2) <= 0xCCCCCCCCCCCCCCCuLL)
    {
      unsigned int v16 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
      {
        int v17 = 136315138;
        uint64_t v18 = "-[CSAttSiriOSDProvider addAudio:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s skip audio since osdAnalyzer is nil",  (uint8_t *)&v17,  0xCu);
      }
    }
  }

uint64_t sub_10006D10C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _getSampleCountByProcessedAudioInMs:*(double *)(a1 + 48)];
  uint64_t v3 = (char *)[*(id *)(a1 + 32) _getSampleCountByProcessedAudioInMs:*(double *)(a1 + 48) + *(double *)(a1 + 56)];
  id v4 = [*(id *)(a1 + 32) _ownVADHasSpeechDetectedFromStartSampleCount:v3 toEndSampleCount:&v3[*(void *)(a1 + 64)]];
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, id, id))(result + 16))(result, v2, v4);
  }
  return result;
}

uint64_t sub_10006D17C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _getSampleCountByProcessedAudioInMs:*(double *)(a1 + 48)];
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, id))(result + 16))(result, v2);
  }
  return result;
}

id sub_10006D1C0(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    uint64_t v6 = "-[CSAttSiriOSDProvider stopAnalysisAndReset]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v5, 0xCu);
  }

  *(void *)(*(void *)(a1 + 32) + 72LL) = 0LL;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) osdAnalyzer]);
  [v3 endAudio];

  return [*(id *)(a1 + 32) setOsdAnalyzer:0];
}

void sub_10006D294(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 72);
  if (v2)
  {
    *(void *)(v1 + 72) = v2 - 1;
    id v4 = *(void **)(a1 + 32);
    uint64_t v5 = v4[9];
    uint64_t v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    BOOL v7 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (v7)
      {
        int v9 = 136315394;
        double v10 = "-[CSAttSiriOSDProvider stop]_block_invoke";
        __int16 v11 = 2048;
        uint64_t v12 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s OSD cannot stop, total streaming count now: %lu",  (uint8_t *)&v9,  0x16u);
      }
    }

    else
    {
      if (v7)
      {
        int v9 = 136315138;
        double v10 = "-[CSAttSiriOSDProvider stop]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s stop streaming", (uint8_t *)&v9, 0xCu);
        id v4 = *(void **)(a1 + 32);
      }

      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 osdAnalyzer]);
      [v8 endAudio];

      [*(id *)(a1 + 32) setOsdAnalyzer:0];
      *(_WORD *)(*(void *)(a1 + 32) + 12LL) = 0;
      *(void *)(*(void *)(a1 + 32) + 8+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = -1LL;
    }
  }

void sub_10006D3F0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    uint64_t v6 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = v6;
      int v9 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
      int v10 = 136315394;
      __int16 v11 = "-[CSAttSiriOSDProvider start:useOwnVoiceVAD:completion:]_block_invoke";
      __int16 v12 = 2114;
      uint64_t v13 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s OSD provider failed to start with error : %{public}@",  (uint8_t *)&v10,  0x16u);
    }
  }

  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, uint64_t, id))(v7 + 16))(v7, a2, v5);
  }
}

void sub_10006D504(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = *(_BYTE *)(a1 + 48);
  [*(id *)(a1 + 32) _resetBoron];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 72);
  if (v3)
  {
    *(void *)(v2 + 72) = v3 + 1;
    id v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 72LL);
      int v16 = 136315394;
      int v17 = "-[CSAttSiriOSDProvider start:useOwnVoiceVAD:completion:]_block_invoke";
      __int16 v18 = 2048;
      uint64_t v19 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s OSD is already streaming, total streaming count now: %lu",  (uint8_t *)&v16,  0x16u);
    }
  }

  else
  {
    uint64_t v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315138;
      int v17 = "-[CSAttSiriOSDProvider start:useOwnVoiceVAD:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s start streaming", (uint8_t *)&v16, 0xCu);
      uint64_t v2 = *(void *)(a1 + 32);
    }

    *(void *)(v2 + 72) = 1LL;
    *(void *)(*(void *)(a1 + 32) + 48LL) = 0LL;
    *(void *)(*(void *)(a1 + 32) + 56LL) = 0LL;
    *(void *)(*(void *)(a1 + 32) + 64LL) = 0LL;
    *(_BYTE *)(*(void *)(a1 + 32) + 8LL) = 0;
    uint64_t v7 = objc_alloc(&OBJC_CLASS___OSDAnalyzer);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[CSEndpointerAssetManager sharedManager](&OBJC_CLASS___CSEndpointerAssetManager, "sharedManager"));
    int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 getCurrentOSDAsset]);
    int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 path]);
    +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
    __int16 v12 = -[OSDAnalyzer initWithConfigFile:sampleRate:context:queue:delegate:]( v7,  "initWithConfigFile:sampleRate:context:queue:delegate:",  v10,  (unint64_t)v11,  0LL,  *(void *)(*(void *)(a1 + 32) + 32LL));
    [*(id *)(a1 + 32) setOsdAnalyzer:v12];
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) osdAnalyzer]);

  uint64_t v14 = *(void *)(a1 + 40);
  if (v13)
  {
    (*(void (**)(uint64_t, uint64_t, void))(v14 + 16))(v14, 1LL, 0LL);
  }

  else
  {
    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  2109LL,  0LL));
    (*(void (**)(uint64_t, void, void *))(v14 + 16))(v14, 0LL, v15);
  }

LABEL_63:
      if (self->_onDeviceDictationSampled)
      {
        v94 = objc_alloc(&OBJC_CLASS___CSUncompressedAudioLogging);
        v88 = (CSUncompressedAudioLogging *)objc_claimAutoreleasedReturnValue([v60 UUIDString]);
        double v95 = self->_language;
        v96 = (void *)objc_claimAutoreleasedReturnValue([v61 task]);
        v97 = -[CSUncompressedAudioLogging initWithDictationInteractionId:asrId:languageCode:task:]( v94,  "initWithDictationInteractionId:asrId:languageCode:task:",  v136,  v88,  v95,  v96);
        v98 = self->_audioLogging;
        self->_audioLogging = v97;
      }

      else
      {
        __int16 v112 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 136315138;
          v153 = "-[CSAttSiriSpeechRecognitionNode _startLocalSpeechRecognizerIfNeeded]";
          _os_log_impl( (void *)&_mh_execute_header,  v112,  OS_LOG_TYPE_DEFAULT,  "%s Request was not selected for sampling. Disabling audio logging.",  buf,  0xCu);
        }

        v88 = self->_audioLogging;
        self->_audioLogging = 0LL;
      }

      goto LABEL_65;
    }

    int v30 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      v93 = self->_localSpeechRecognizerTaskString;
      *(_DWORD *)__int128 buf = 136315650;
      v153 = "-[CSAttSiriSpeechRecognitionNode _startLocalSpeechRecognizerIfNeeded]";
      v154 = 2114;
      v155 = *(double *)&v24;
      v156 = 2114;
      v157 = (const char *)v93;
      _os_log_error_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "%s Local speech recognizer can't started : locale(%{public}@), taskName(%{public}@)",  buf,  0x20u);
    }

    -[CSAttSiriSpeechRecognitionNode _setLocalSpeechRecognizerState:](self, "_setLocalSpeechRecognizerState:", 3LL);
    -[CSAttSiriSpeechRecognitionNode _clearAudioProcessWaitingBufferIfNeeded]( self,  "_clearAudioProcessWaitingBufferIfNeeded");
  }

double sub_1000736C4(uint64_t a1)
{
  double result = *(double *)(*(void *)(a1 + 32) + 160LL);
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1000736D8(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 10LL);
  return result;
}

uint64_t sub_1000736EC(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 144LL);
  return result;
}

void sub_100073700(double *a1)
{
  uint64_t v1 = (_BYTE *)*((void *)a1 + 4);
  if (!v1[10])
  {
    uint64_t v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *((void *)a1 + 7);
      uint64_t v5 = *((void *)a1 + 8);
      uint64_t v7 = *((void *)a1 + 5);
      uint64_t v6 = *((void *)a1 + 6);
      uint64_t v8 = *((void *)a1 + 9);
      uint64_t v9 = *((void *)a1 + 10);
      uint64_t v10 = *((void *)a1 + 11);
      *(_DWORD *)__int128 buf = 136316930;
      __int16 v29 = "-[CSAttSiriSpeechRecognitionNode localSpeechRecognizer:didProduceEndpointFeaturesWithWordCount:trailingSilen"
            "ceDuration:eosLikelihood:pauseCounts:silencePosterior:processedAudioDurationInMilliseconds:acousticEndpointe"
            "rScore:]_block_invoke";
      __int16 v30 = 2048;
      uint64_t v31 = v6;
      __int16 v32 = 2048;
      uint64_t v33 = v4;
      __int16 v34 = 2048;
      uint64_t v35 = v5;
      __int16 v36 = 2112;
      uint64_t v37 = v7;
      __int16 v38 = 2048;
      uint64_t v39 = v8;
      __int16 v40 = 2048;
      uint64_t v41 = v9;
      __int16 v42 = 2048;
      uint64_t v43 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s wordCount = %ld, trailingSilenceDuration = %ld, eosLikelihood = %f, pauseCounts = %@, silencePosterior = %f, processedAudioDurationInMilliseconds = %ld, acousticEndpointerScore = %f",  buf,  0x52u);
      uint64_t v1 = (_BYTE *)*((void *)a1 + 4);
    }

    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue([v1 endpointFeatureReceivers]);
    id v11 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v24;
      do
      {
        uint64_t v14 = 0LL;
        do
        {
          if (*(void *)v24 != v13) {
            objc_enumerationMutation(obj);
          }
          __int16 v15 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)v14);
          uint64_t v16 = *((void *)a1 + 6);
          uint64_t v17 = *((void *)a1 + 7);
          double v18 = a1[8];
          double v19 = a1[9];
          uint64_t v20 = *((void *)a1 + 5);
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[LBLocalSpeechRecognitionSettings getTaskStringFromSpeechRecognitionSettings:]( &OBJC_CLASS___LBLocalSpeechRecognitionSettings,  "getTaskStringFromSpeechRecognitionSettings:",  *(void *)(*((void *)a1 + 4) + 192LL)));
          [v15 didReceiveAsrFeaturesWithWordCount:v16 trailingSilenceDuration:v17 eosLikelihood:v20 pauseCounts:v21 silencePosterior:*((void *)a1 + 10) taskNa me:0 processedAudioDurationInMilliseconds:v18 fromServer:v19 acousticEndpointerScore:a1[11]];

          uint64_t v14 = (char *)v14 + 1;
        }

        while (v12 != v14);
        id v12 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
      }

      while (v12);
    }
  }

void sub_100073918(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 120LL) == *(void *)(a1 + 40))
  {
    double v3 = *(double *)(a1 + 48);
    uint64_t v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (v3 != 0.0 && os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      v46 = "-[CSAttSiriSpeechRecognitionNode localSpeechRecognizer:didCompletionRecognitionWithStatistics:error:]_block_invoke";
      __int16 v47 = 2114;
      double v48 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Speech recognition encountered error: %{public}@",  buf,  0x16u);
      uint64_t v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      v46 = "-[CSAttSiriSpeechRecognitionNode localSpeechRecognizer:didCompletionRecognitionWithStatistics:error:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Invalidating local speech recognizer for finish",  buf,  0xCu);
    }

    id v5 = *(id *)(*(void *)(a1 + 32) + 176LL);
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v7 = v6[26];
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 recognitionTaskCompletionReceivers]);
    id v9 = [v8 countByEnumeratingWithState:&v41 objects:v53 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v42;
      do
      {
        for (uint64_t i = 0LL; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v42 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = *(void **)(*((void *)&v41 + 1) + 8LL * (void)i);
          if ((objc_opt_respondsToSelector( v13,  "didCompleteRecognitionTaskWithStatistics:requestId:endpointMode:error:") & 1) != 0) {
            [v13 didCompleteRecognitionTaskWithStatistics:*(void *)(a1 + 56) requestId:v5 endpointMode:v7 error:*(void *)(a1 + 48)];
          }
        }

        id v10 = [v8 countByEnumeratingWithState:&v41 objects:v53 count:16];
      }

      while (v10);
    }

    [*(id *)(a1 + 32) _invalidateLocalSpeechRecognizer];
    id v14 = *(id *)(*(void *)(a1 + 32) + 352LL);
    __int16 v15 = *(void **)(*(void *)(a1 + 32) + 344LL);
    uint64_t v35 = _NSConcreteStackBlock;
    uint64_t v36 = 3221225472LL;
    uint64_t v37 = sub_100073E58;
    __int16 v38 = &unk_10022EFF8;
    id v16 = v14;
    id v39 = v16;
    id v17 = v5;
    id v40 = v17;
    [v15 endAudioWithCancellation:0 completion:&v35];
    uint64_t v18 = *(void *)(a1 + 32);
    if (*(_BYTE *)(v18 + 12))
    {
      double v19 = (void *)objc_claimAutoreleasedReturnValue( +[CESRDictationOnDeviceSampling sharedManager]( &OBJC_CLASS___CESRDictationOnDeviceSampling,  "sharedManager",  v35,  v36,  v37,  v38,  v39));
      [v19 incrementSampledRequestCount];

      uint64_t v18 = *(void *)(a1 + 32);
    }

    id v20 = objc_msgSend(*(id *)(v18 + 304), "estimatedUserSpeakingEndedHostTime", v35, v36, v37, v38);
    uint64_t v21 = *(void *)(a1 + 32);
    if (!*(_BYTE *)(v21 + 11))
    {
      uint64_t v22 = *(void *)(v21 + 296);
      if (v22)
      {
        id v23 = v20;
        if (v20)
        {
          uint64_t v24 = mach_continuous_time();
          +[CSFTimeUtils hostTimeToTimeInterval:]( &OBJC_CLASS___CSFTimeUtils,  "hostTimeToTimeInterval:",  v22 - v24 - (void)v23 + mach_absolute_time());
          double v26 = v25;
          __int16 v27 = (const char *)+[CSFTimeUtils absoluteHostTimeToContinuousHostTime:]( &OBJC_CLASS___CSFTimeUtils,  "absoluteHostTimeToContinuousHostTime:",  v23);
          os_signpost_id_t v28 = os_signpost_id_generate(CSLogContextFacilityCoreSpeech);
          __int16 v29 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          __int16 v30 = v29;
          if (v28 - 1 > 0xFFFFFFFFFFFFFFFDLL)
          {

            uint64_t v31 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          }

          else
          {
            if (os_signpost_enabled(v29))
            {
              *(_DWORD *)__int128 buf = 134349570;
              v46 = v27;
              __int16 v47 = 2080;
              double v48 = COERCE_DOUBLE("SiriX");
              __int16 v49 = 2080;
              double v50 = "enableTelemetry=YES";
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v30,  OS_SIGNPOST_INTERVAL_BEGIN,  v28,  "ondevice_EagerCPL",  "%{public, signpost.description:begin_time}llu, %s %s",  buf,  0x20u);
            }

            uint64_t v31 = (os_log_s *)CSLogContextFacilityCoreSpeech;
            if (os_signpost_enabled(v31))
            {
              __int16 v32 = *(const char **)(*(void *)(a1 + 32) + 296LL);
              *(_DWORD *)__int128 buf = 134349570;
              v46 = v32;
              __int16 v47 = 2080;
              double v48 = COERCE_DOUBLE("SiriX");
              __int16 v49 = 2080;
              double v50 = "enableTelemetry=YES";
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v31,  OS_SIGNPOST_INTERVAL_END,  v28,  "ondevice_EagerCPL",  "%{public, signpost.description:end_time}llu, %s %s",  buf,  0x20u);
            }
          }

          uint64_t v33 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v34 = *(void *)(*(void *)(a1 + 32) + 296LL);
            *(_DWORD *)__int128 buf = 136315906;
            v46 = "-[CSAttSiriSpeechRecognitionNode localSpeechRecognizer:didCompletionRecognitionWithStatistics:error:]_block_invoke";
            __int16 v47 = 2050;
            double v48 = v26 * 1000.0;
            __int16 v49 = 2050;
            double v50 = v27;
            __int16 v51 = 2050;
            uint64_t v52 = v34;
            _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "%s eagerCPL time interval: %{public}f, userSpeakingEndedHostTime: %{public}llu, lastEndpointEagerResultTime: %{public}llu",  buf,  0x2Au);
          }
        }
      }
    }
  }

  else
  {
    uint64_t v1 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      v46 = "-[CSAttSiriSpeechRecognitionNode localSpeechRecognizer:didCompletionRecognitionWithStatistics:error:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "%s Ignoring completion from previous recognizer!",  buf,  0xCu);
    }
  }

id sub_100073E58(uint64_t a1, int a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) logSamplingEventStatus:a2 ^ 1u requestId:*(void *)(a1 + 40) error:a3];
}

void sub_100073E6C(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 120LL) == *(void *)(a1 + 40))
  {
    double v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) sharedUserIdSpeechPackageMap]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 allKeys]);

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 72LL));
    uint64_t v6 = (__CFString *)objc_claimAutoreleasedReturnValue([WeakRetained getSharedUserIdWithHighestVoiceIdScore:v4]);

    uint64_t v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (v6)
    {
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = 136315650;
        double v19 = "-[CSAttSiriSpeechRecognitionNode localSpeechRecognizer:didRecognizeMultiUserSpeechPackage:]_block_invoke";
        __int16 v20 = 2112;
        uint64_t v21 = v6;
        __int16 v22 = 2112;
        id v23 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s Picked up top user: %@, from resultPackage: %@",  (uint8_t *)&v18,  0x20u);
      }

      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) sharedUserIdSpeechPackageMap]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:v6]);
    }

    else
    {
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
      {
        int v18 = 136315138;
        double v19 = "-[CSAttSiriSpeechRecognitionNode localSpeechRecognizer:didRecognizeMultiUserSpeechPackage:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s No top user - using first (random) speech package",  (uint8_t *)&v18,  0xCu);
      }

      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) sharedUserIdSpeechPackageMap]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 allValues]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v10 firstObject]);
    }

    unsigned int v11 = [v9 isFinal];
    id v12 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = @"NO";
      if (v11) {
        uint64_t v13 = @"YES";
      }
      int v18 = 136315394;
      double v19 = "-[CSAttSiriSpeechRecognitionNode localSpeechRecognizer:didRecognizeMultiUserSpeechPackage:]_block_invoke";
      __int16 v20 = 2114;
      uint64_t v21 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s MultiUser: isFinal package : %{public}@",  (uint8_t *)&v18,  0x16u);
    }

    if (!*(void *)(*(void *)(a1 + 32) + 320LL)) {
      *(void *)(*(void *)(a1 + 32) + 32+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = mach_continuous_time();
    }
    +[CSAttSiriSpeechPackageHelper getFirstTokenSilenceStartFromSpeechPackage:]( &OBJC_CLASS___CSAttSiriSpeechPackageHelper,  "getFirstTokenSilenceStartFromSpeechPackage:",  v9);
    *(void *)(*(void *)(a1 + 32) + 328LL) = v14;
    __int16 v15 = *(void **)(a1 + 32);
    uint64_t v16 = *(void *)(a1 + 48);
    uint64_t v17 = v15[22];
    if (v11)
    {
      [v15 _handleDidRecognizedFinalSpeechPackage:v9 multiUserSpeechPackage:v16 requestId:v17 metadata:0];
    }

    else
    {
      [v15 _handleDidRecognizedSpeechPackageForEagerRecognitionCandidate:v9 multiUserSpeechPackage:v16 requestId:v17 rcId:v15[23] metadata:0];
      ++*(void *)(*(void *)(a1 + 32) + 184LL);
    }
  }

  else
  {
    uint64_t v1 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      int v18 = 136315138;
      double v19 = "-[CSAttSiriSpeechRecognitionNode localSpeechRecognizer:didRecognizeMultiUserSpeechPackage:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "%s MultiUser: Ignoring completion from previous recognizer!",  (uint8_t *)&v18,  0xCu);
    }
  }

void sub_100074190(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 120) != *(void *)(a1 + 40))
  {
    uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO)) {
      return;
    }
    int v11 = 136315138;
    id v12 = "-[CSAttSiriSpeechRecognitionNode localSpeechRecognizer:didRecognizePackage:withMetadata:]_block_invoke";
    double v3 = "%s Ignoring completion from previous recognizer!";
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, v3, (uint8_t *)&v11, 0xCu);
    return;
  }

  if (([*(id *)(v1 + 192) enableVoiceCommands] & 1) == 0)
  {
    uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO)) {
      return;
    }
    int v11 = 136315138;
    id v12 = "-[CSAttSiriSpeechRecognitionNode localSpeechRecognizer:didRecognizePackage:withMetadata:]_block_invoke";
    double v3 = "%s Ignoring completion with metadatapackage as enable condition not satisfied!";
    goto LABEL_13;
  }

  unsigned int v5 = [*(id *)(a1 + 48) isFinal];
  uint64_t v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = @"NO";
    if (v5) {
      uint64_t v7 = @"YES";
    }
    int v11 = 136315394;
    id v12 = "-[CSAttSiriSpeechRecognitionNode localSpeechRecognizer:didRecognizePackage:withMetadata:]_block_invoke";
    __int16 v13 = 2114;
    uint64_t v14 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s isFinal package : %{public}@",  (uint8_t *)&v11,  0x16u);
  }

  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = v8[22];
  if (v5)
  {
    [v8 _handleDidRecognizedFinalSpeechPackage:v9 multiUserSpeechPackage:0 requestId:v10 metadata:*(void *)(a1 + 56)];
  }

  else
  {
    [v8 _handleDidRecognizedSpeechPackageForEagerRecognitionCandidate:v9 multiUserSpeechPackage:0 requestId:v10 rcId:v8[23] metadata:*(void *)(a1 + 56)];
    ++*(void *)(*(void *)(a1 + 32) + 184LL);
  }

void sub_100074370(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 120LL) == *(void *)(a1 + 40))
  {
    unsigned int v3 = [*(id *)(a1 + 48) isFinal];
    uint64_t v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v5 = @"NO";
      if (v3) {
        unsigned int v5 = @"YES";
      }
      int v10 = 136315394;
      int v11 = "-[CSAttSiriSpeechRecognitionNode localSpeechRecognizer:didRecognizePackage:]_block_invoke";
      __int16 v12 = 2114;
      __int16 v13 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s isFinal package : %{public}@",  (uint8_t *)&v10,  0x16u);
    }

    if (!*(void *)(*(void *)(a1 + 32) + 320LL)) {
      *(void *)(*(void *)(a1 + 32) + 32+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = mach_continuous_time();
    }
    +[CSAttSiriSpeechPackageHelper getFirstTokenSilenceStartFromSpeechPackage:]( &OBJC_CLASS___CSAttSiriSpeechPackageHelper,  "getFirstTokenSilenceStartFromSpeechPackage:",  *(void *)(a1 + 48));
    *(void *)(*(void *)(a1 + 32) + 328LL) = v6;
    uint64_t v7 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = v7[22];
    if (v3)
    {
      [v7 _handleDidRecognizedFinalSpeechPackage:v8 multiUserSpeechPackage:0 requestId:v9 metadata:0];
    }

    else
    {
      [v7 _handleDidRecognizedSpeechPackageForEagerRecognitionCandidate:v8 multiUserSpeechPackage:0 requestId:v9 rcId:v7[23] metadata:0];
      ++*(void *)(*(void *)(a1 + 32) + 184LL);
    }
  }

  else
  {
    uint64_t v1 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315138;
      int v11 = "-[CSAttSiriSpeechRecognitionNode localSpeechRecognizer:didRecognizePackage:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "%s Ignoring completion from previous recognizer!",  (uint8_t *)&v10,  0xCu);
    }
  }

void sub_10007452C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 120) == *(void *)(a1 + 40))
  {
    if (*(void *)(v1 + 144) == 2LL)
    {
      id v4 = *(id *)(v1 + 176);
      __int128 v11 = 0u;
      __int128 v12 = 0u;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resultCandidateReceivers", 0));
      id v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v6)
      {
        id v7 = v6;
        uint64_t v8 = *(void *)v12;
        do
        {
          for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v12 != v8) {
              objc_enumerationMutation(v5);
            }
            int v10 = *(void **)(*((void *)&v11 + 1) + 8LL * (void)i);
            if ((objc_opt_respondsToSelector(v10, "didReceiveFinalResultCandidateWithRequestId:speechPackage:") & 1) != 0) {
              [v10 didReceiveFinalResultCandidateWithRequestId:v4 speechPackage:*(void *)(a1 + 48)];
            }
          }

          id v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
        }

        while (v7);
      }
    }
  }

  else
  {
    uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v17 = "-[CSAttSiriSpeechRecognitionNode localSpeechRecognizer:didRecognizeFinalResultCandidatePackage:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Ignoring completion from previous recognizer!",  buf,  0xCu);
    }
  }

void sub_1000746D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 120) == *(void *)(a1 + 40))
  {
    if (*(void *)(v1 + 144) == 2LL)
    {
      id v4 = *(id *)(v1 + 176);
      __int128 v11 = 0u;
      __int128 v12 = 0u;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resultCandidateReceivers", 0));
      id v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v6)
      {
        id v7 = v6;
        uint64_t v8 = *(void *)v12;
        do
        {
          for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v12 != v8) {
              objc_enumerationMutation(v5);
            }
            int v10 = *(void **)(*((void *)&v11 + 1) + 8LL * (void)i);
            if ((objc_opt_respondsToSelector( v10,  "didReceiveVoiceCommandCandidateWithRequestId:speechPackage:metadata:") & 1) != 0) {
              [v10 didReceiveVoiceCommandCandidateWithRequestId:v4 speechPackage:*(void *)(a1 + 48) metadata:*(void *)(a1 + 56)];
            }
          }

          id v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
        }

        while (v7);
      }
    }
  }

  else
  {
    uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v17 = "-[CSAttSiriSpeechRecognitionNode localSpeechRecognizer:didRecognizeVoiceCommandCandidatePackage:withMetadata:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Ignoring completion from previous recognizer!",  buf,  0xCu);
    }
  }

void sub_100074884(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 120) == *(void *)(a1 + 40))
  {
    [*(id *)(v1 + 192) maximumRecognitionDuration];
    if (v4 > 0.0)
    {
      double v5 = v4;
      double v6 = *(double *)(a1 + 48);
      if (v6 >= v4)
      {
        id v7 = *(_BYTE **)(a1 + 32);
        if (v7[9])
        {
          uint64_t v8 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
          {
            int v9 = 136315650;
            int v10 = "-[CSAttSiriSpeechRecognitionNode localSpeechRecognizer:didProcessAudioDuration:]_block_invoke";
            __int16 v11 = 2050;
            double v12 = v5;
            __int16 v13 = 2050;
            double v14 = v6;
            _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s Exceeding max local speech recognition duration (%{public}f) : %{public}f, force endbooking the ASR task",  (uint8_t *)&v9,  0x20u);
            id v7 = *(_BYTE **)(a1 + 32);
          }

          [v7 _handleStopSpeechRecognitionTaskIfNeeded:0];
        }
      }
    }
  }

  else
  {
    uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315138;
      int v10 = "-[CSAttSiriSpeechRecognitionNode localSpeechRecognizer:didProcessAudioDuration:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Ignoring completion from previous recognizer!",  (uint8_t *)&v9,  0xCu);
    }
  }

void sub_1000749F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 120) != *(void *)(a1 + 40))
  {
    uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_DWORD *)__int128 buf = 136315138;
    __int16 v20 = "-[CSAttSiriSpeechRecognitionNode localSpeechRecognizer:didRecognizePartialPackage:withMetadata:]_block_invoke";
    unsigned int v3 = "%s Ignoring completion from previous recognizer!";
LABEL_18:
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, v3, buf, 0xCu);
    return;
  }

  if (([*(id *)(v1 + 192) enableVoiceCommands] & 1) == 0)
  {
    uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_DWORD *)__int128 buf = 136315138;
    __int16 v20 = "-[CSAttSiriSpeechRecognitionNode localSpeechRecognizer:didRecognizePartialPackage:withMetadata:]_block_invoke";
    unsigned int v3 = "%s Ignoring completion with metadatapackage as enable condition not satisfied!";
    goto LABEL_18;
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (*(void *)(v5 + 144) == 2LL)
  {
    id v6 = *(id *)(v5 + 176);
    id v7 = *(id *)(*(void *)(a1 + 32) + 168LL);
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "speechRecognitionReceivers", 0));
    id v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v15;
      do
      {
        for (uint64_t i = 0LL; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v15 != v11) {
            objc_enumerationMutation(v8);
          }
          __int16 v13 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
          if ((objc_opt_respondsToSelector(v13, "didReceivePartialResultWithRequestId:language:tokens:metadata:") & 1) != 0) {
            [v13 didReceivePartialResultPackageWithRequestId:v6 language:v7 package:*(void *)(a1 + 48) metadata:*(void *)(a1 + 56)];
          }
        }

        id v10 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }

      while (v10);
    }
  }

void sub_100074C18(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 120) != *(void *)(a1 + 40))
  {
    uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_DWORD *)__int128 buf = 136315138;
    __int16 v20 = "-[CSAttSiriSpeechRecognitionNode localSpeechRecognizer:didRecognizeTokens:withMetadata:]_block_invoke";
    unsigned int v3 = "%s Ignoring completion from previous recognizer!";
LABEL_18:
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, v3, buf, 0xCu);
    return;
  }

  if (([*(id *)(v1 + 192) enableVoiceCommands] & 1) == 0)
  {
    uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_DWORD *)__int128 buf = 136315138;
    __int16 v20 = "-[CSAttSiriSpeechRecognitionNode localSpeechRecognizer:didRecognizeTokens:withMetadata:]_block_invoke";
    unsigned int v3 = "%s Ignoring completion with metadatapackage as enable condition not satisfied!";
    goto LABEL_18;
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (*(void *)(v5 + 144) == 2LL)
  {
    id v6 = *(id *)(v5 + 176);
    id v7 = *(id *)(*(void *)(a1 + 32) + 168LL);
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "speechRecognitionReceivers", 0));
    id v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v15;
      do
      {
        for (uint64_t i = 0LL; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v15 != v11) {
            objc_enumerationMutation(v8);
          }
          __int16 v13 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
          if ((objc_opt_respondsToSelector(v13, "didReceivePartialResultWithRequestId:language:tokens:metadata:") & 1) != 0) {
            [v13 didReceivePartialResultWithRequestId:v6 language:v7 tokens:*(void *)(a1 + 48) metadata:*(void *)(a1 + 56)];
          }
        }

        id v10 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }

      while (v10);
    }
  }

void sub_100074E38(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 120) == *(void *)(a1 + 40))
  {
    if (!*(void *)(v1 + 320))
    {
      *(void *)(*(void *)(a1 + 32) + 32+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = mach_continuous_time();
      uint64_t v1 = *(void *)(a1 + 32);
    }

    if (*(void *)(v1 + 144) == 2LL)
    {
      id v4 = *(id *)(v1 + 176);
      id v5 = *(id *)(*(void *)(a1 + 32) + 168LL);
      __int128 v12 = 0u;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "speechRecognitionReceivers", 0));
      id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v7)
      {
        id v8 = v7;
        uint64_t v9 = *(void *)v13;
        do
        {
          for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v13 != v9) {
              objc_enumerationMutation(v6);
            }
            uint64_t v11 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)i);
            if ((objc_opt_respondsToSelector(v11, "didReceivePartialResultWithRequestId:language:tokens:") & 1) != 0) {
              [v11 didReceivePartialResultWithRequestId:v4 language:v5 tokens:*(void *)(a1 + 48)];
            }
          }

          id v8 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
        }

        while (v8);
      }
    }
  }

  else
  {
    uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      int v18 = "-[CSAttSiriSpeechRecognitionNode localSpeechRecognizer:didRecognizeTokens:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Ignoring completion from previous recognizer!",  buf,  0xCu);
    }
  }

void sub_100075014(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _releaseRecordingTransactionIfNeededWithToken:*(void *)(a1 + 32)];
}

id sub_100075050(uint64_t a1, void *a2)
{
  return [a2 setAsrId:*(void *)(a1 + 32)];
}

id *sub_10007505C(id *result, char a2, uint64_t a3)
{
  if ((a2 & 1) == 0) {
    return (id *)[result[4] logSamplingEventStatus:1 requestId:*((void *)result[5] + 22) error:a3];
  }
  return result;
}

void sub_10007507C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = v7;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 description]);
    *(_DWORD *)__int128 buf = 136315650;
    uint64_t v21 = "-[CSAttSiriSpeechRecognitionNode _startLocalSpeechRecognizerIfNeeded]_block_invoke";
    __int16 v22 = 2112;
    id v23 = v9;
    __int16 v24 = 2112;
    double v25 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s didStart local speech recognition with error :%@, model properties : %@",  buf,  0x20u);
  }

  if (v6)
  {
    uint64_t v11 = *(void *)(a1 + 32);
    __int128 v12 = *(dispatch_queue_s **)(v11 + 80);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100075234;
    block[3] = &unk_10022F100;
    void block[4] = v11;
    dispatch_async(v12, block);
  }

  __int128 v13 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localSpeechRecognizerQueue]);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_100075314;
  v16[3] = &unk_10022EFD0;
  uint64_t v14 = *(void *)(a1 + 32);
  id v17 = v6;
  uint64_t v18 = v14;
  id v15 = v6;
  dispatch_async(v13, v16);
}

id sub_100075234(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315138;
    id v5 = "-[CSAttSiriSpeechRecognitionNode _startLocalSpeechRecognizerIfNeeded]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Setting local speech recognizer state to [Idle] as not able to start local ASR",  (uint8_t *)&v4,  0xCu);
  }

  [*(id *)(a1 + 32) _setLocalSpeechRecognizerState:0];
  [*(id *)(a1 + 32) _clearAudioProcessWaitingBufferIfNeeded];
  [*(id *)(*(void *)(a1 + 32) + 256) endAudio];
  return [*(id *)(*(void *)(a1 + 32) + 344) endAudioWithCancellation:1 completion:0];
}

void sub_100075314(uint64_t a1)
{
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "speechRecognitionReceivers", 0));
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v9 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v8, "didStartRecognitionRequest:successfully:isRecognitionModeClassic:error:") & 1) != 0) {
          objc_msgSend( v8,  "didStartRecognitionRequest:successfully:isRecognitionModeClassic:error:",  *(void *)(*(void *)(a1 + 40) + 176),  v2 == 0,  objc_msgSend(*(id *)(a1 + 40), "speechRecognitionMode") == (id)1,  *(void *)(a1 + 32));
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v5);
  }
}

void sub_100075454(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = *(void **)(v2 + 120);
  *(void *)(v2 + 120) = 0LL;

  *(void *)(*(void *)(a1 + 32) + 16+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0LL;
  uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) siriSessionUUID]);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 232);
  *(void *)(v5 + 232) = v4;

  [*(id *)(a1 + 32) _stopPreviousRecognitionTaskIfNeededWithNewRequestId:*(void *)(*(void *)(a1 + 32) + 232)];
  *(_BYTE *)(*(void *)(a1 + 32) + 11) = [*(id *)(a1 + 40) disableEndpointer];
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 200LL), *(id *)(a1 + 48));
  [*(id *)(a1 + 32) _setRecordingStartTimeWithStartStreamOption:*(void *)(a1 + 40) audioRecordContext:*(void *)(a1 + 48) voiceTriggerInfo:*(void *)(a1 + 56)];
  unsigned int v7 = [*(id *)(a1 + 32) _shouldDisableLocalSpeechRecognizerWithOption:*(void *)(a1 + 40) audioRecordContext:*(void *)(a1 + 48)];
  id v8 = *(void **)(a1 + 32);
  if (v7)
  {
    [v8 _setLocalSpeechRecognizerState:3];
  }

  else if (v8[18] == 3LL)
  {
    __int128 v9 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      double v26 = "-[CSAttSiriSpeechRecognitionNode prepareToStartSpeechRequestWithStartStreamOption:audioRecordContext:voiceTr"
            "iggerInfo:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s Local speech recognizer disabled, ignore prepare",  buf,  0xCu);
    }
  }

  else if (([*(id *)(a1 + 40) disablePrewarmLocalAsrAtStartRecording] & 1) == 0)
  {
    [*(id *)(a1 + 32) _preheatWithLanguage:0 preheatSource:0];
  }

  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "speechRecognitionReceivers", 0));
  id v11 = [v10 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v21;
    do
    {
      for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v21 != v13) {
          objc_enumerationMutation(v10);
        }
        id v15 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v15, "didPrepareRecognitionWithAudioContext:requestId:mhId:voiceTriggerInfo:") & 1) != 0)
        {
          uint64_t v16 = *(void *)(a1 + 32);
          uint64_t v17 = *(void *)(v16 + 200);
          uint64_t v18 = *(void *)(v16 + 232);
          double v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestMHUUID]);
          [v15 didPrepareRecognitionWithAudioContext:v17 requestId:v18 mhId:v19 voiceTriggerInfo:*(void *)(a1 + 56)];
        }
      }

      id v12 = [v10 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }

    while (v12);
  }
}

id sub_1000756D4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _preheatWithLanguage:*(void *)(a1 + 40) preheatSource:*(void *)(a1 + 48) shouldDownloadMissingAsset:*(unsigned __int8 *)(a1 + 56)];
}

id sub_1000756E8(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 16+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0LL;
  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 1;
  *(void *)(*(void *)(a1 + 32) + 208LL) = 0LL;
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 240);
  *(void *)(v3 + 240) = v2;

  uint64_t v5 = -[CSOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CSOSTransaction),  "initWithDescription:",  @"ASRNode Recording Transaction");
  uint64_t v6 = *(void *)(a1 + 32);
  unsigned int v7 = *(void **)(v6 + 224);
  *(void *)(v6 + 224) = v5;

  if (([*(id *)(*(void *)(a1 + 32) + 200) isVoiceTriggered] & 1) == 0)
  {
    *(void *)(*(void *)(a1 + 32) + 272LL) = 0LL;
    *(void *)(*(void *)(a1 + 32) + 28+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0LL;
    id v8 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      __int128 v9 = *(void **)(*(void *)(a1 + 32) + 200LL);
      __int128 v10 = v8;
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 description]);
      int v20 = 136315394;
      __int128 v21 = "-[CSAttSiriSpeechRecognitionNode start]_block_invoke";
      __int16 v22 = 2114;
      __int128 v23 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s Reset endpointStart and audioSampleCountToSkip since recordContext is %{public}@",  (uint8_t *)&v20,  0x16u);
    }
  }

  [*(id *)(a1 + 32) _clearAudioProcessWaitingBufferIfNeeded];
  uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 144LL);
  uint64_t v13 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = 136315394;
    __int128 v21 = "-[CSAttSiriSpeechRecognitionNode start]_block_invoke";
    __int16 v22 = 1024;
    LODWORD(v23) = (v12 & 0xFFFFFFFFFFFFFFFBLL) == 0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%s shouldResetWaitingBuffer:%u",  (uint8_t *)&v20,  0x12u);
  }

  if ((v12 | 4) != 4) {
    return [*(id *)(a1 + 32) _startLocalSpeechRecognizerIfNeeded];
  }
  uint64_t v14 = objc_alloc(&OBJC_CLASS___CSAudioProcessWaitingBuffer);
  LODWORD(v15) = 1114636288;
  uint64_t v16 = -[CSAudioProcessWaitingBuffer initWithUUID:waitingBufferMaxLengthInSec:]( v14,  "initWithUUID:waitingBufferMaxLengthInSec:",  *(void *)(*(void *)(a1 + 32) + 232LL),  v15);
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(void **)(v17 + 152);
  *(void *)(v17 + 152) = v16;

  return [*(id *)(a1 + 32) _setLocalSpeechRecognizerState:1];
}

void sub_100075918(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 == 2)
  {
    *(_BYTE *)(*(void *)(a1 + 32) + 1+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 1;
  }

  else if (v2 == 1)
  {
    uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 288LL);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 48)));
    [v3 addObject:v4];

    uint64_t v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 288LL);
      int v9 = 136315650;
      __int128 v10 = "-[CSAttSiriSpeechRecognitionNode attSiriNode:didDetectEndpointEventAtTime:eventType:withMetrics:useEndpointe"
            "rSignal:]_block_invoke";
      __int16 v11 = 2048;
      uint64_t v12 = v6;
      __int16 v13 = 2112;
      uint64_t v14 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s Got def EP fire at time %f, adding to list: %@",  (uint8_t *)&v9,  0x20u);
    }
  }

  else
  {
    id v8 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_FAULT))
    {
      int v9 = 136315138;
      __int128 v10 = "-[CSAttSiriSpeechRecognitionNode attSiriNode:didDetectEndpointEventAtTime:eventType:withMetrics:useEndpointe"
            "rSignal:]_block_invoke";
      _os_log_fault_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "%s didDetectEndpointEventAtTime should only be called from Default or Relaxed endpoint type",  (uint8_t *)&v9,  0xCu);
    }
  }

int64_t sub_100075AA0(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 1+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 1;
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 304LL);
  [*(id *)(a1 + 40) totalAudioRecorded];
  objc_msgSend(v2, "setEndpointTimeInMs:");
  int64_t result = (int64_t)objc_msgSend( *(id *)(*(void *)(a1 + 32) + 304),  "setEndpointBufferHostTime:",  objc_msgSend(*(id *)(a1 + 40), "endpointBufferHostTime"));
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(void *)(a1 + 40)) {
      int64_t result = +[CSAttSiriSpeechRecognitionNode endpointModeFromEndpointMetrics:]( &OBJC_CLASS___CSAttSiriSpeechRecognitionNode,  "endpointModeFromEndpointMetrics:");
    }
    else {
      int64_t result = 1LL;
    }
    *(void *)(*(void *)(a1 + 32) + 208LL) = result;
  }

  return result;
}

id sub_100075B20(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[CSAttSiriSpeechRecognitionNode attSiriAudioSrcNodeDidStop:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  return [*(id *)(a1 + 32) _handleStopSpeechRecognitionTaskIfNeeded:0];
}

void sub_100075BD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 9))
  {
    uint64_t v3 = *(void *)(v1 + 144);
    if (v3 == 2)
    {
      uint64_t v9 = *(void *)(a1 + 40);
      __int128 v10 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  mach_continuous_time());
      id v11 = (id)objc_claimAutoreleasedReturnValue(v10);
      objc_msgSend((id)v1, "_processAudioChunk:withReadyTimestamp:", v9);
    }

    else if (v3 == 1)
    {
      int v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        __int16 v13 = "-[CSAttSiriSpeechRecognitionNode attSiriAudioSrcNodeLPCMRecordBufferAvailable:audioChunk:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Request Dispatcher hasn't asked to start local ASR yet, cache the audio",  buf,  0xCu);
        uint64_t v1 = *(void *)(a1 + 32);
      }

      uint64_t v5 = *(void **)(v1 + 152);
      uint64_t v6 = *(void *)(a1 + 40);
      uint64_t v7 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  mach_continuous_time());
      id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      [v5 addAudioChunk:v6 withBufferedTimestamp:v8];
    }
  }

void *sub_100075D48(void *result)
{
  uint64_t v1 = result;
  if (!*(void *)(result[4] + 312LL))
  {
    int64_t result = (void *)mach_continuous_time();
    *(void *)(v1[4] + 312LL) = result;
  }

  if (!*((_BYTE *)v1 + 40)) {
    return [(id)v1[4] _handleStopSpeechRecognitionTaskIfNeeded:0];
  }
  return result;
}

void sub_100075D98(void *a1)
{
  if (+[CSUtils isASRViaSpeechAPIEnabled](&OBJC_CLASS___CSUtils, "isASRViaSpeechAPIEnabled"))
  {
    if (a1[4])
    {
      if (a1[5]) {
        +[CoreEmbeddedSpeechAnalyzer sendSpeechCorrectionInfo:interactionIdentifier:]( &OBJC_CLASS___CoreEmbeddedSpeechAnalyzer,  "sendSpeechCorrectionInfo:interactionIdentifier:");
      }
    }
  }

  else
  {
    id v2 = [[CoreEmbeddedSpeechRecognizer alloc] initWithDelegate:a1[6] instanceUUID:&CoreEmbeddedSpeechRecognizerInstanceUUIDInteractive];
    [v2 sendSpeechCorrectionInfo:a1[4] interactionIdentifier:a1[5]];
    [v2 invalidate];
  }

void sub_100075E38(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _interactiveLocalSpeechRecognizer]);
  [v2 updateVoiceCommandContextWithPrefixText:*(void *)(a1 + 40) postfixText:*(void *)(a1 + 48) selectedText:*(void *)(a1 + 56) disambiguationActive:*(void *)(a1 + 64) cursorInVisibleText:*(void *)(a1 + 72) favorComma ndSuppression:*(void *)(a1 + 80) abortCommandSuppression:*(void *)(a1 + 88) undoEvent:*(void *)(a1 + 96)];
}

void sub_100075E88(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _interactiveLocalSpeechRecognizer]);
  [v2 resumeRecognitionWithPrefixText:*(void *)(a1 + 40) postfixText:*(void *)(a1 + 48) selectedText:*(void *)(a1 + 56)];
}

void sub_100075ECC(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _interactiveLocalSpeechRecognizer]);
  [v1 pauseRecognition];
}

id sub_100075EFC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _disableLocalSpeechRecognitionForRequestId:*(void *)(a1 + 40) force:0];
}

id sub_100075F0C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _stopSpeechRecognitionWithReason:*(void *)(a1 + 48) requestId:*(void *)(a1 + 40)];
}

void sub_100075F1C(uint64_t a1)
{
  id v2 = -[CSOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CSOSTransaction),  "initWithDescription:",  @"SRD ASR Result Delivery Transaction");
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(void **)(v3 + 216);
  *(void *)(v3 + 216) = v2;

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestId]);
  [*(id *)(a1 + 32) _stopPreviousRecognitionTaskIfNeededWithNewRequestId:v5];
  uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestId]);
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(v7 + 176);
  *(void *)(v7 + 176) = v6;

  if (!*(void *)(*(void *)(a1 + 32) + 176LL))
  {
    uint64_t v9 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int128 v42 = "-[CSAttSiriSpeechRecognitionNode startSpeechRecognitionResultsWithSettings:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s Received nill requestId, generate requestId under corespeechd",  buf,  0xCu);
    }

    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
    uint64_t v11 = objc_claimAutoreleasedReturnValue([v10 UUIDString]);
    uint64_t v12 = *(void *)(a1 + 32);
    __int16 v13 = *(void **)(v12 + 176);
    *(void *)(v12 + 176) = v11;

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[CSDiagnosticReporter sharedInstance](&OBJC_CLASS___CSDiagnosticReporter, "sharedInstance"));
    [v14 submitASRIssueReport:kCSDiagnosticReporterReceivedInvalidRequestId];
  }

  double v15 = (void *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *(void **)(a1 + 40);
    uint64_t v17 = v15;
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v16 description]);
    *(_DWORD *)__int128 buf = 136315394;
    __int128 v42 = "-[CSAttSiriSpeechRecognitionNode startSpeechRecognitionResultsWithSettings:]_block_invoke";
    __int16 v43 = 2114;
    __int128 v44 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "KeyLog - %s Settings : %{public}@", buf, 0x16u);
  }

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 192LL), *(id *)(a1 + 40));
  id v19 = [*(id *)(*(void *)(a1 + 32) + 192) speechRecognitionTask];
  id v20 = v19;
  if ((unint64_t)v19 >= 0xB)
  {
    __int16 v22 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      __int128 v42 = "-[CSAttSiriSpeechRecognitionNode startSpeechRecognitionResultsWithSettings:]_block_invoke";
      __int16 v43 = 2050;
      __int128 v44 = v20;
      _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "%s Unsupported speech recognizer task : %{public}lu",  buf,  0x16u);
    }

    __int128 v21 = (id *)&CoreEmbeddedSpeechRecognizerTaskSearchOrMessaging;
  }

  else
  {
    __int128 v21 = (id *)*(&off_10022F148 + (void)v19);
  }

  uint64_t v23 = *(void *)(a1 + 32);
  id v24 = *v21;
  double v25 = *(void **)(v23 + 136);
  *(void *)(v23 + 136) = v24;

  double v26 = *(char **)(a1 + 48);
  if ((unint64_t)(v26 - 1) <= 1)
  {
    __int16 v27 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315394;
      __int128 v42 = "-[CSAttSiriSpeechRecognitionNode startSpeechRecognitionResultsWithSettings:]_block_invoke";
      __int16 v43 = 2048;
      __int128 v44 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "%s speechRecognitionMode = %lu; Force disabling local speech recognition",
        buf,
        0x16u);
    }

    os_signpost_id_t v28 = *(void **)(a1 + 32);
    __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestId]);
    [v28 _disableLocalSpeechRecognitionForRequestId:v29 force:1];

    double v26 = *(char **)(a1 + 48);
  }

  if ((unint64_t)(v26 - 1) >= 2)
  {
    if (!v26) {
      [*(id *)(a1 + 32) _startDeliverLocalSpeechRecognitionResultsWithRequestId:*(void *)(*(void *)(a1 + 32) + 176)];
    }
  }

  else
  {
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int16 v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "speechRecognitionReceivers", 0));
    id v31 = [v30 countByEnumeratingWithState:&v36 objects:v40 count:16];
    if (v31)
    {
      id v32 = v31;
      uint64_t v33 = *(void *)v37;
      do
      {
        for (uint64_t i = 0LL; i != v32; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v37 != v33) {
            objc_enumerationMutation(v30);
          }
          uint64_t v35 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)i);
          if ((objc_opt_respondsToSelector( v35,  "didStartRecognitionRequest:successfully:isRecognitionModeClassic:error:") & 1) != 0) {
            objc_msgSend( v35,  "didStartRecognitionRequest:successfully:isRecognitionModeClassic:error:",  *(void *)(*(void *)(a1 + 32) + 176),  1,  objc_msgSend(*(id *)(a1 + 32), "speechRecognitionMode") == (id)1,  0);
          }
        }

        id v32 = [v30 countByEnumeratingWithState:&v36 objects:v40 count:16];
      }

      while (v32);
    }
  }
}

id sub_100076370(uint64_t a1)
{
  return objc_storeWeak((id *)(*(void *)(a1 + 32) + 72LL), *(id *)(a1 + 40));
}

id sub_10007637C(uint64_t a1)
{
  return objc_storeWeak((id *)(*(void *)(a1 + 32) + 64LL), *(id *)(a1 + 40));
}

id sub_100076388(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 112) addObject:*(void *)(a1 + 40)];
}

id sub_100076394(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 104) addObject:*(void *)(a1 + 40)];
}

id sub_1000763A0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 88) addObject:*(void *)(a1 + 40)];
}

id sub_1000763AC(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 96) addObject:*(void *)(a1 + 40)];
}

id sub_1000763B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2 == 1)
  {
    int v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315138;
      id v8 = "-[CSAttSiriSpeechRecognitionNode stopWithReason:stopStreamOption:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Received xpc disconnection",  (uint8_t *)&v7,  0xCu);
    }

    [*(id *)(a1 + 32) _handleStopDeliverLocalSpeechRecognitionWithRequestId:*(void *)(*(void *)(a1 + 32) + 176) reason:2];
  }

  else if (!v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (!*(void *)(v3 + 208)) {
      *(void *)(v3 + 20_Block_object_dispose(va, 8) = 2LL;
    }
  }

  id result = [*(id *)(a1 + 40) stopRecordingReason];
  if (result == (id)3)
  {
    id result = [*(id *)(a1 + 32) localSpeechRecognizerState];
    if (result == (id)1)
    {
      uint64_t v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 136315138;
        id v8 = "-[CSAttSiriSpeechRecognitionNode stopWithReason:stopStreamOption:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Received request cancelled during CSLocalSRStateWaitForStartDeliverMessage state, stop ASR",  (uint8_t *)&v7,  0xCu);
      }

      [*(id *)(a1 + 32) _handleStopSpeechRecognitionTaskIfNeeded:0];
      return [*(id *)(a1 + 32) _stopSpeechRecognitionWithReason:1 requestId:*(void *)(*(void *)(a1 + 32) + 176)];
    }
  }

  return result;
}

BOOL sub_100076530(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
  unsigned __int8 v2 = [v1 fileLoggingIsEnabled];

  return v2;
}

void sub_100077094( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_1000778B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned __int8 v2 = *(dispatch_queue_s **)(v1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000779B4;
  block[3] = &unk_10022F100;
  void block[4] = v1;
  dispatch_async(v2, block);
}

void sub_100077910(id a1, unint64_t a2)
{
  unsigned __int8 v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    int v4 = "-[CSModelBenchmarker _setupAudioInjectionEngineWithAudioURL:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s Audio file read start", (uint8_t *)&v3, 0xCu);
  }

id sub_1000779B4(uint64_t a1)
{
  unsigned __int8 v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[CSModelBenchmarker _setupAudioInjectionEngineWithAudioURL:]_block_invoke_2";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s Audio file read end", (uint8_t *)&v4, 0xCu);
  }

  [*(id *)(*(void *)(a1 + 32) + 64) stopAudioStream];
  return [*(id *)(*(void *)(a1 + 32) + 64) stop];
}

void sub_100077A74(uint64_t a1)
{
  unsigned __int8 v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v27 = 136315138;
    os_signpost_id_t v28 = "-[CSModelBenchmarker audioEngineDidStopRecord:audioStreamHandleId:reason:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s stopRecording", (uint8_t *)&v27, 0xCu);
  }

  int v3 = *(void **)(a1 + 32);
  uint64_t v4 = v3[11];
  if (v3[2])
  {
    uint64_t v5 = mach_absolute_time();
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) getResultsFromFlushedAudio]);
    *(void *)(*(void *)(a1 + 32) + 80LL) += mach_absolute_time() - v5;
    BOOL v7 = v6 != 0LL;

    int v3 = *(void **)(a1 + 32);
  }

  else
  {
    BOOL v7 = 1;
  }

  id v8 = (void *)v3[3];
  if (v8)
  {
    [v8 endAudio];
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) getLatestSuperVector]);
    *(void *)(*(void *)(a1 + 32) + 8+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7, 0) = [*(id *)(*(void *)(a1 + 32) + 24) getAccmulatedProcessingTime];
    if (!v9) {
      BOOL v7 = 0;
    }
    double v10 = (double)(unint64_t)[*(id *)(*(void *)(a1 + 32) + 24) getProcessedAudioDurationMs];

    int v3 = *(void **)(a1 + 32);
  }

  else
  {
    double v10 = (double)v4 * 1000.0 / 16000.0;
  }

  uint64_t v11 = (void *)v3[4];
  if (v11)
  {
    [v11 endAudio];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) getCurrentOSDFeatures]);
    *(void *)(*(void *)(a1 + 32) + 8+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7, 0) = [v12 inferenceTime];

    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) getCurrentOSDFeatures]);
    [v13 processedAudioMs];
    double v10 = v14;

    int v3 = *(void **)(a1 + 32);
  }

  if (v3[6] && !nd_getresults()) {
    BOOL v7 = 0;
  }
  uint64_t v15 = mach_absolute_time();
  os_signpost_id_t v16 = os_signpost_id_generate(CSLogContextFacilityCoreSpeech);
  uint64_t v17 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  uint64_t v18 = v17;
  if (v16 - 1 > 0xFFFFFFFFFFFFFFFDLL)
  {

    id v19 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  }

  else
  {
    if (os_signpost_enabled(v17))
    {
      int v27 = 134349570;
      os_signpost_id_t v28 = (const char *)v15;
      __int16 v29 = 2080;
      __int16 v30 = "SiriX";
      __int16 v31 = 2080;
      id v32 = "enableTelemetry=YES";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v18,  OS_SIGNPOST_INTERVAL_BEGIN,  v16,  "allFramesProcessingLatency",  "%{public, signpost.description:begin_time}llu, %s %s",  (uint8_t *)&v27,  0x20u);
    }

    id v19 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_signpost_enabled(v19))
    {
      id v20 = (const char *)(*(void *)(*(void *)(a1 + 32) + 80LL) + v15);
      int v27 = 134349570;
      os_signpost_id_t v28 = v20;
      __int16 v29 = 2080;
      __int16 v30 = "SiriX";
      __int16 v31 = 2080;
      id v32 = "enableTelemetry=YES";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v19,  OS_SIGNPOST_INTERVAL_END,  v16,  "allFramesProcessingLatency",  "%{public, signpost.description:end_time}llu, %s %s",  (uint8_t *)&v27,  0x20u);
    }
  }

  [*(id *)(a1 + 32) setAllProcessorsAsNil];
  *(void *)(*(void *)(a1 + 32) + 8+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0LL;
  *(void *)(*(void *)(a1 + 32) + 88LL) = 0LL;
  uint64_t v21 = *(void *)(a1 + 32);
  uint64_t v22 = *(void *)(v21 + 56);
  if (v22)
  {
    unint64_t v23 = vcvtpd_s64_f64(v10 / (double)*(uint64_t *)(v21 + 96));
    if (v7)
    {
      (*(void (**)(uint64_t, void, unint64_t, double))(v22 + 16))(v22, 0LL, v23, v10);
    }

    else
    {
      id v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  2002LL,  0LL));
      (*(void (**)(uint64_t, void *, unint64_t, double))(v22 + 16))(v22, v24, v23, v10);
    }

    uint64_t v25 = *(void *)(a1 + 32);
    double v26 = *(void **)(v25 + 56);
    *(void *)(v25 + 56) = 0LL;
  }

void sub_100077E4C(uint64_t a1)
{
  unint64_t v2 = (unint64_t)[*(id *)(a1 + 32) length];
  unint64_t v3 = v2
     / +[CSConfig inputRecordingSampleByteDepth](&OBJC_CLASS___CSConfig, "inputRecordingSampleByteDepth");
  double v4 = (double)v3 * 1000.0 / 16000.0;
  NSLog(@"each batch duration: %d", (int)v4);
  *(void *)(*(void *)(a1 + 40) + 88LL) += v3;
  id v5 = objc_alloc(&OBJC_CLASS___CSAudioChunk);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = +[CSConfig inputRecordingSampleByteDepth](&OBJC_CLASS___CSConfig, "inputRecordingSampleByteDepth");
  LOBYTE(v17) = +[CSConfig inputRecordingIsFloat](&OBJC_CLASS___CSConfig, "inputRecordingIsFloat");
  id v18 = [v5 initWithData:v6 numChannels:1 numSamples:v3 sampleByteDepth:v7 startSampleCount:0 hostTime:0 remoteVAD:0 isFloat:v17];
  uint64_t v8 = *(void *)(a1 + 40);
  if ((*(void *)(v8 + 96) & 0x8000000000000000LL) != 0)
  {
    *(void *)(v8 + 96) = (uint64_t)v4;
    uint64_t v8 = *(void *)(a1 + 40);
  }

  if (*(void *)(v8 + 16))
  {
    uint64_t v9 = mach_absolute_time();
    id v10 = [*(id *)(*(void *)(a1 + 40) + 16) getAnalyzedResultsFromAudioChunk:v18];
    *(void *)(*(void *)(a1 + 40) + 80LL) += mach_absolute_time() - v9;
  }

  id v11 = *(id *)(a1 + 32);
  if (+[CSConfig inputRecordingIsFloat](&OBJC_CLASS___CSConfig, "inputRecordingIsFloat"))
  {
    uint64_t v12 = objc_claimAutoreleasedReturnValue( +[CSFLPCMTypeConverter convertToShortLPCMBufFromFloatLPCMBuf:]( &OBJC_CLASS___CSFLPCMTypeConverter,  "convertToShortLPCMBufFromFloatLPCMBuf:",  *(void *)(a1 + 32)));

    id v11 = (id)v12;
  }

  __int16 v13 = *(void **)(a1 + 40);
  double v14 = (void *)v13[3];
  if (v14)
  {
    [v14 addAudio:v11];
    __int16 v13 = *(void **)(a1 + 40);
  }

  uint64_t v15 = (void *)v13[4];
  if (v15)
  {
    [v15 addAudio:v11 numSamples:v3];
    __int16 v13 = *(void **)(a1 + 40);
  }

  if (v13[6])
  {
    uint64_t v16 = mach_absolute_time();
    nd_wavedata(*(void *)(*(void *)(a1 + 40) + 48), [v11 bytes], v3);
    *(void *)(*(void *)(a1 + 40) + 80LL) += mach_absolute_time() - v16;
  }
}

void sub_100078050(id a1)
{
  uint64_t v1 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    unint64_t v3 = "-[CSModelBenchmarker audioEngineDidStartRecord:audioStreamHandleId:successfully:error:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "%s startRecording", (uint8_t *)&v2, 0xCu);
  }

void sub_1000780F4(uint64_t a1)
{
  int v2 = -[CSAudioInjectionEngine initWithStreamHandleId:withInputRecordingNumberOfChannels:]( objc_alloc(&OBJC_CLASS___CSAudioInjectionEngine),  "initWithStreamHandleId:withInputRecordingNumberOfChannels:",  1LL,  1LL);
  uint64_t v3 = *(void *)(a1 + 32);
  double v4 = *(void **)(v3 + 64);
  *(void *)(v3 + 64) = v2;

  *(void *)(*(void *)(a1 + 32) + 96LL) = 1LL;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 32);
  *(void *)(v5 + 32) = 0LL;

  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(v7 + 24);
  *(void *)(v7 + 24) = 0LL;

  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = *(void **)(v9 + 16);
  *(void *)(v9 + 16) = 0LL;

  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = 0LL;

  id v13 = objc_retainBlock(*(id *)(a1 + 48));
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void **)(v14 + 56);
  *(void *)(v14 + 56) = v13;

  *(void *)(*(void *)(a1 + 32) + 88LL) = 0LL;
  *(void *)(*(void *)(a1 + 32) + 96LL) = 0LL;
  if (([*(id *)(a1 + 32) _setupAudioInjectionEngineWithAudioURL:*(void *)(a1 + 40)] & 1) == 0)
  {
    uint64_t v16 = *(void *)(a1 + 48);
    id v17 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  2005LL,  0LL));
    (*(void (**)(uint64_t, id, uint64_t, double))(v16 + 16))(v16, v17, -1LL, 0.0);
  }

void sub_100078218(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 96LL) = 10LL;
  int v2 = -[CSAudioInjectionEngine initWithStreamHandleId:withInputRecordingNumberOfChannels:]( objc_alloc(&OBJC_CLASS___CSAudioInjectionEngine),  "initWithStreamHandleId:withInputRecordingNumberOfChannels:",  1LL,  1LL);
  uint64_t v3 = *(void *)(a1 + 32);
  double v4 = *(void **)(v3 + 64);
  *(void *)(v3 + 64) = v2;

  *(void *)(*(void *)(a1 + 32) + 48LL) = nd_create();
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = v5[6];
  if (!v6)
  {
    [v5 reset];
    uint64_t v14 = *(void *)(a1 + 64);
    uint64_t v15 = CSErrorDomain;
    uint64_t v16 = 2001LL;
LABEL_9:
    id v20 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v15,  v16,  0LL));
    (*(void (**)(uint64_t, double))(v14 + 16))(v14, 0.0);

    return;
  }

  int v7 = nd_initialize( v6, [*(id *)(a1 + 40) UTF8String], objc_msgSend(*(id *)(a1 + 48), "UTF8String"));
  if (!v7)
  {
    id v17 = objc_retainBlock(*(id *)(a1 + 64));
    uint64_t v18 = *(void *)(a1 + 32);
    id v19 = *(void **)(v18 + 56);
    *(void *)(v18 + 56) = v17;

    [*(id *)(a1 + 32) reset];
    uint64_t v14 = *(void *)(a1 + 64);
    uint64_t v15 = CSErrorDomain;
    uint64_t v16 = 2005LL;
    goto LABEL_9;
  }

  int v8 = v7;
  uint64_t v9 = (void *)CSLogCategorySpkrId;
  if (os_log_type_enabled(CSLogCategorySpkrId, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 48LL);
    uint64_t v11 = v9;
    *(_DWORD *)__int128 buf = 136315650;
    uint64_t v22 = "-[CSModelBenchmarker runNovDetectorWithConfig:configRoot:withUrl:completion:]_block_invoke";
    __int16 v23 = 1026;
    int v24 = v8;
    __int16 v25 = 2082;
    uint64_t v26 = nd_error(v10);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s ERR: Failed to initialize _novDetect: err=[%{public}d]:%{public}s",  buf,  0x1Cu);
  }

  [*(id *)(a1 + 32) reset];
  uint64_t v12 = *(void *)(a1 + 64);
  id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  2001LL,  0LL));
  (*(void (**)(uint64_t, void *, uint64_t, double))(v12 + 16))(v12, v13, -1LL, 0.0);
}

uint64_t sub_1000784A0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000784B0(uint64_t a1)
{
}

void sub_1000784B8(uint64_t a1, void *a2)
{
}

void sub_1000784C8(uint64_t a1)
{
  int v2 = objc_alloc(&OBJC_CLASS___SLODLDProcessor);
  uint64_t v3 = *(void *)(a1 + 40);
  id v22 = 0LL;
  double v4 = -[SLODLDProcessor initWithConfigFile:error:](v2, "initWithConfigFile:error:", v3, &v22);
  id v5 = v22;
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v4;

  int v8 = *(void **)(a1 + 32);
  if (v8[5])
  {
    uint64_t v9 = -[SLODLDInputContext initWithInputOrigin:inputAnchor:prevTokens:prevEmb:]( objc_alloc(&OBJC_CLASS___SLODLDInputContext),  "initWithInputOrigin:inputAnchor:prevTokens:prevEmb:",  &off_100238748,  &off_100238760,  0LL,  0LL);
    -[SLODLDInputContext updateWithInputUtt:](v9, "updateWithInputUtt:", *(void *)(a1 + 48));
    uint64_t v10 = mach_absolute_time();
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) processInputContext:v9]);
    uint64_t v12 = mach_absolute_time();
    os_signpost_id_t v13 = os_signpost_id_generate(CSLogContextFacilityCoreSpeech);
    uint64_t v14 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    uint64_t v15 = v14;
    if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
    {
      *(_DWORD *)__int128 buf = 134349570;
      uint64_t v24 = v10;
      __int16 v25 = 2080;
      uint64_t v26 = "SiriX";
      __int16 v27 = 2080;
      os_signpost_id_t v28 = "enableTelemetry=YES";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v15,  OS_SIGNPOST_INTERVAL_BEGIN,  v13,  "allFramesProcessingLatency",  "%{public, signpost.description:begin_time}llu, %s %s",  buf,  0x20u);
    }

    *(void *)(*(void *)(a1 + 32) + 80LL) += v12 - v10;
    uint64_t v16 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    id v17 = v16;
    if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
    {
      uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 80LL) + v10;
      *(_DWORD *)__int128 buf = 134349570;
      uint64_t v24 = v18;
      __int16 v25 = 2080;
      uint64_t v26 = "SiriX";
      __int16 v27 = 2080;
      os_signpost_id_t v28 = "enableTelemetry=YES";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v17,  OS_SIGNPOST_INTERVAL_END,  v13,  "allFramesProcessingLatency",  "%{public, signpost.description:end_time}llu, %s %s",  buf,  0x20u);
    }

    [*(id *)(a1 + 32) reset];
    uint64_t v19 = *(void *)(a1 + 56);
    if (v11)
    {
      (*(void (**)(uint64_t, void))(v19 + 16))(v19, 0LL);
    }

    else
    {
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  2002LL,  0LL));
      (*(void (**)(uint64_t, void *))(v19 + 16))(v19, v21);
    }
  }

  else
  {
    [v8 reset];
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v9 = (SLODLDInputContext *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  2001LL,  0LL));
    (*(void (**)(uint64_t, SLODLDInputContext *))(v20 + 16))(v20, v9);
  }
}

void sub_1000787F0(uint64_t a1)
{
  int v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = sub_10014853C(v2);
    double v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    id v5 = v4;
    if (v4)
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"spg"]);
      int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"nnet-forward-skip"]);
      int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"skip-frames"]);
      unsigned int v9 = [v8 intValue];

      if (v9 <= 1) {
        int v10 = 1;
      }
      else {
        int v10 = v9;
      }
      uint64_t v11 = v10;
    }

    else
    {
      uint64_t v11 = -1LL;
    }
  }

  else
  {
    uint64_t v11 = -1LL;
  }

  *(void *)(*(void *)(a1 + 32) + 96LL) = (uint64_t)((double)v11 * 10.0);
  uint64_t v12 = -[CSAudioInjectionEngine initWithStreamHandleId:withInputRecordingNumberOfChannels:]( objc_alloc(&OBJC_CLASS___CSAudioInjectionEngine),  "initWithStreamHandleId:withInputRecordingNumberOfChannels:",  1LL,  1LL);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void **)(v13 + 64);
  *(void *)(v13 + 64) = v12;

  uint64_t v15 = objc_alloc(&OBJC_CLASS___OSDAnalyzer);
  uint64_t v16 = *(void *)(a1 + 40);
  +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
  uint64_t v18 = -[OSDAnalyzer initWithConfigFile:sampleRate:context:queue:delegate:]( v15,  "initWithConfigFile:sampleRate:context:queue:delegate:",  v16,  (unint64_t)v17,  0LL,  *(void *)(*(void *)(a1 + 32) + 72LL),  0LL);
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v20 = *(void **)(v19 + 32);
  *(void *)(v19 + 32) = v18;

  id v21 = objc_retainBlock(*(id *)(a1 + 56));
  uint64_t v22 = *(void *)(a1 + 32);
  __int16 v23 = *(void **)(v22 + 56);
  *(void *)(v22 + 56) = v21;

  uint64_t v24 = *(void **)(a1 + 32);
  if (!v24[4])
  {
    [v24 reset];
    uint64_t v25 = *(void *)(a1 + 56);
    uint64_t v26 = CSErrorDomain;
    uint64_t v27 = 2001LL;
LABEL_15:
    id v28 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v26,  v27,  0LL));
    (*(void (**)(uint64_t, id, uint64_t, double))(v25 + 16))(v25, v28, -1LL, 0.0);

    return;
  }

  if (([v24 _setupAudioInjectionEngineWithAudioURL:*(void *)(a1 + 48)] & 1) == 0)
  {
    [*(id *)(a1 + 32) reset];
    uint64_t v25 = *(void *)(a1 + 56);
    uint64_t v26 = CSErrorDomain;
    uint64_t v27 = 2005LL;
    goto LABEL_15;
  }

void sub_100078A04(uint64_t a1)
{
  int v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = sub_10014853C(v2);
    double v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    id v5 = v4;
    if (!v4) {
      goto LABEL_9;
    }
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"frontends"]);
    int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"dnn"]);
    int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"nnet-forward"]);
    unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"strict-batch-size"]);
    unsigned int v10 = [v9 intValue];

    if (v10)
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"frontends"]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:@"dnn"]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:@"subsample"]);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:@"stride"]);
      unsigned int v15 = [v14 intValue];

      if (v15 <= 1) {
        int v16 = 1;
      }
      else {
        int v16 = v15;
      }
      uint64_t v17 = (int)(v16 * v10);
    }

    else
    {
LABEL_9:
      uint64_t v17 = -1LL;
    }
  }

  else
  {
    uint64_t v17 = -1LL;
  }

  *(void *)(*(void *)(a1 + 32) + 96LL) = (uint64_t)((double)v17 * 10.0);
  uint64_t v18 = -[CSAudioInjectionEngine initWithStreamHandleId:withInputRecordingNumberOfChannels:]( objc_alloc(&OBJC_CLASS___CSAudioInjectionEngine),  "initWithStreamHandleId:withInputRecordingNumberOfChannels:",  1LL,  1LL);
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v20 = *(void **)(v19 + 64);
  *(void *)(v19 + 64) = v18;

  id v21 = objc_alloc(&OBJC_CLASS___CSSyncKeywordAnalyzerQuasar);
  __int16 v23 = -[CSSyncKeywordAnalyzerQuasar initWithConfigPath:triggerTokensArray:preventDuplicatedReset:memoryLock:]( v21,  "initWithConfigPath:triggerTokensArray:preventDuplicatedReset:memoryLock:",  *(void *)(a1 + 40),  &off_100239218,  CSIsHorseman(v21, v22),  0LL);
  uint64_t v24 = *(void *)(a1 + 32);
  uint64_t v25 = *(void **)(v24 + 16);
  *(void *)(v24 + 16) = v23;

  [*(id *)(*(void *)(a1 + 32) + 16) setActiveChannel:0];
  [*(id *)(*(void *)(a1 + 32) + 16) reset];
  id v26 = objc_retainBlock(*(id *)(a1 + 64));
  uint64_t v27 = *(void *)(a1 + 32);
  id v28 = *(void **)(v27 + 56);
  *(void *)(v27 + 56) = v26;

  __int16 v29 = *(void **)(a1 + 32);
  if (!v29[2])
  {
    [v29 reset];
    uint64_t v30 = *(void *)(a1 + 64);
    uint64_t v31 = CSErrorDomain;
    uint64_t v32 = 2001LL;
LABEL_16:
    id v33 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v31,  v32,  0LL));
    (*(void (**)(uint64_t, double))(v30 + 16))(v30, 0.0);

    return;
  }

  if (([v29 _setupAudioInjectionEngineWithAudioURL:*(void *)(a1 + 56)] & 1) == 0)
  {
    [*(id *)(a1 + 32) reset];
    uint64_t v30 = *(void *)(a1 + 64);
    uint64_t v31 = CSErrorDomain;
    uint64_t v32 = 2005LL;
    goto LABEL_16;
  }

void sub_100078CD0(uint64_t a1)
{
  int v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = sub_10014853C(v2);
    double v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    id v5 = v4;
    if (v4)
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"sr"]);

      if (v6) {
        int v7 = @"sr";
      }
      else {
        int v7 = @"spid";
      }
      int v8 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:v7]);
      unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"subsample"]);
      unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"stride"]);
      unsigned int v11 = [v10 intValue];

      if (v11 <= 1) {
        int v12 = 1;
      }
      else {
        int v12 = v11;
      }
      uint64_t v13 = v12;
    }

    else
    {
      uint64_t v13 = -1LL;
    }
  }

  else
  {
    uint64_t v13 = -1LL;
  }

  *(void *)(*(void *)(a1 + 32) + 96LL) = (uint64_t)((double)v13 * 10.0);
  uint64_t v14 = -[CSAudioInjectionEngine initWithStreamHandleId:withInputRecordingNumberOfChannels:]( objc_alloc(&OBJC_CLASS___CSAudioInjectionEngine),  "initWithStreamHandleId:withInputRecordingNumberOfChannels:",  1LL,  1LL);
  uint64_t v15 = *(void *)(a1 + 32);
  int v16 = *(void **)(v15 + 64);
  *(void *)(v15 + 64) = v14;

  dispatch_queue_t v17 = dispatch_queue_create("Model benchmark Queue", 0LL);
  uint64_t v18 = *(void *)(a1 + 32);
  uint64_t v19 = *(void **)(v18 + 72);
  *(void *)(v18 + 72) = v17;

  uint64_t v20 = objc_alloc(&OBJC_CLASS___EARSyncPSRAudioProcessor);
  uint64_t v21 = *(void *)(a1 + 40);
  uint64_t v22 = *(void *)(a1 + 48);
  +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
  uint64_t v24 = -[EARSyncPSRAudioProcessor initWithConfigFile:configRoot:sampleRate:delegate:queue:]( v20,  "initWithConfigFile:configRoot:sampleRate:delegate:queue:",  v21,  v22,  (unint64_t)v23,  0LL,  *(void *)(*(void *)(a1 + 32) + 72LL));
  uint64_t v25 = *(void *)(a1 + 32);
  id v26 = *(void **)(v25 + 24);
  *(void *)(v25 + 24) = v24;

  [*(id *)(*(void *)(a1 + 32) + 24) resetForNewRequest];
  id v27 = objc_retainBlock(*(id *)(a1 + 64));
  uint64_t v28 = *(void *)(a1 + 32);
  __int16 v29 = *(void **)(v28 + 56);
  *(void *)(v28 + 56) = v27;

  uint64_t v30 = *(void **)(a1 + 32);
  if (!v30[3])
  {
    [v30 reset];
    uint64_t v31 = *(void *)(a1 + 64);
    uint64_t v32 = CSErrorDomain;
    uint64_t v33 = 2001LL;
LABEL_18:
    id v34 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v32,  v33,  0LL));
    (*(void (**)(uint64_t, id, uint64_t, double))(v31 + 16))(v31, v34, -1LL, 0.0);

    return;
  }

  if (([v30 _setupAudioInjectionEngineWithAudioURL:*(void *)(a1 + 56)] & 1) == 0)
  {
    [*(id *)(a1 + 32) reset];
    uint64_t v31 = *(void *)(a1 + 64);
    uint64_t v32 = CSErrorDomain;
    uint64_t v33 = 2005LL;
    goto LABEL_18;
  }

void sub_10007B920(uint64_t a1)
{
  v8[0] = @"timestamp";
  int v2 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  mach_absolute_time());
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v9[0] = v3;
  v8[1] = @"timeWindowStart";
  double v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 40)));
  v9[1] = v4;
  v8[2] = @"timeWindowEnd";
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 48)));
  v9[2] = v5;
  void v8[3] = @"visual-speech";
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 56)));
  void v9[3] = v6;
  int v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v9,  v8,  4LL));

  [*(id *)(*(void *)(a1 + 32) + 136) addObject:v7];
}

void sub_10007BA60(uint64_t a1)
{
  v8[0] = @"timestamp";
  int v2 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  mach_absolute_time());
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v9[0] = v3;
  v8[1] = @"timeWindowStart";
  double v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 40)));
  v9[1] = v4;
  v8[2] = @"timeWindowEnd";
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 48)));
  v9[2] = v5;
  void v8[3] = @"visual-speech-probability";
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 56)));
  void v9[3] = v6;
  int v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v9,  v8,  4LL));

  [*(id *)(*(void *)(a1 + 32) + 128) addObject:v7];
}

void sub_10007BBA0(uint64_t a1)
{
  v6[0] = @"timestamp";
  int v2 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  mach_absolute_time());
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v6[1] = @"attentionState";
  v7[0] = v3;
  double v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 40)));
  v7[1] = v4;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v7,  v6,  2LL));

  [*(id *)(*(void *)(a1 + 32) + 120) addObject:v5];
}

void sub_10007BC84(void *a1)
{
  v4[0] = @"timestamp";
  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a1[6]));
  v4[1] = @"visualSpeechSignal";
  v5[0] = v2;
  v5[1] = a1[4];
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v5,  v4,  2LL));

  [*(id *)(a1[5] + 144) addObject:v3];
}

void sub_10007BD4C(uint64_t a1)
{
  v11[0] = @"timestamp";
  int v2 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  mach_absolute_time());
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v12[0] = v3;
  v11[1] = @"hadGazeAttention";
  double v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 56)));
  v12[1] = v4;
  v11[2] = @"attentionInterval";
  v9[0] = @"startTime";
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 40)));
  v9[1] = @"endTs";
  v10[0] = v5;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 48)));
  v10[1] = v6;
  int v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v10,  v9,  2LL));
  v12[2] = v7;
  int v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v12,  v11,  3LL));

  [*(id *)(*(void *)(a1 + 32) + 112) addObject:v8];
}

void sub_10007BEC0(uint64_t a1)
{
  v24[0] = @"timestamp";
  int v2 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  mach_absolute_time());
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v25[0] = v15;
  v24[1] = @"gazeInAoI";
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 88)));
  v25[1] = v14;
  v24[2] = @"gazePoint";
  v22[0] = @"x";
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 40)));
  v22[1] = @"y";
  v23[0] = v13;
  int v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 48)));
  v23[1] = v12;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v23,  v22,  2LL));
  v25[2] = v3;
  v24[3] = @"AoI";
  v20[0] = @"origin";
  v18[0] = @"x";
  double v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 56)));
  v18[1] = @"y";
  v19[0] = v4;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 64)));
  v19[1] = v5;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v19,  v18,  2LL));
  v20[1] = @"size";
  v21[0] = v6;
  v16[0] = @"height";
  int v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 80)));
  v16[1] = @"width";
  v17[0] = v7;
  int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 72)));
  v17[1] = v8;
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v17,  v16,  2LL));
  v21[1] = v9;
  unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v21,  v20,  2LL));
  v25[3] = v10;
  unsigned int v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v25,  v24,  4LL));

  [*(id *)(*(void *)(a1 + 32) + 104) addObject:v11];
}

id sub_10007C160(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 96) addObject:*(void *)(a1 + 40)];
}

void sub_10007C16C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) startSampleCount];
  if (v2 >= [*(id *)(a1 + 40) previousLoggedSampleCount])
  {
    [*(id *)(a1 + 40) _writeAudioChunk:*(void *)(a1 + 32)];
  }

  else
  {
    id v3 = [*(id *)(a1 + 32) startSampleCount];
    if (v3 >= [*(id *)(a1 + 40) previousLoggedSampleCount]
      || (double v4 = (char *)[*(id *)(a1 + 32) startSampleCount],
          &v4[(void)[*(id *)(a1 + 32) numSamples]] <= (char *)*(void *)(*(void *)(a1 + 40) + 80)))
    {
      int v8 = (void *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
      {
        unsigned int v9 = *(void **)(a1 + 32);
        unsigned int v10 = v8;
        id v11 = [v9 numSamples];
        id v12 = [*(id *)(a1 + 32) startSampleCount];
        id v13 = [*(id *)(a1 + 40) previousLoggedSampleCount];
        *(_DWORD *)__int128 buf = 136315906;
        int v16 = "-[CSAttSiriMagusLoggingNode attSiriAudioSrcNodeLPCMRecordBufferAvailable:audioChunk:]_block_invoke";
        __int16 v17 = 2048;
        id v18 = v11;
        __int16 v19 = 2048;
        id v20 = v12;
        __int16 v21 = 2048;
        id v22 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s Skip duplicated audio chunk: chunk.numSamples = %lu, chunk.startSampleCount = %llu, previousLoggedSampleCount = %llu",  buf,  0x2Au);
      }
    }

    else
    {
      id v5 = *(void **)(a1 + 32);
      id v6 = [v5 startSampleCount];
      id v7 = [*(id *)(a1 + 40) previousLoggedSampleCount];
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      id v14[2] = sub_10007C35C;
      v14[3] = &unk_10022B860;
      v14[4] = *(void *)(a1 + 40);
      [v5 skipSamplesAtStartSuchThatNumSamplesReceivedSoFar:v6 reachesACountOf:v7 completionHandler:v14];
    }
  }

id sub_10007C35C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _writeAudioChunk:a2];
}

void sub_10007C368(uint64_t a1)
{
}

void sub_10007C374(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  double v4 = *(void **)(v3 + 56);
  *(void *)(v3 + 56) = v2;
}

void sub_10007C3A4(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    id v5 = "-[CSAttSiriMagusLoggingNode stop]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v3 + 9))
  {
    *(_BYTE *)(v3 + 9) = 1;
    [*(id *)(a1 + 32) _handleMagusStopLogging];
  }

void sub_10007C468(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v32 = 136315138;
    uint64_t v33 = "-[CSAttSiriMagusLoggingNode start]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v32, 0xCu);
  }

  uint64_t v3 = *(_BYTE **)(a1 + 32);
  if (!v3[9])
  {
    v3[9] = 1;
    [*(id *)(a1 + 32) _handleMagusStopLogging];
    uint64_t v3 = *(_BYTE **)(a1 + 32);
  }

  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 _timeStampString]);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 152);
  *(void *)(v5 + 152) = v4;

  *(void *)(*(void *)(a1 + 32) + 192LL) = mach_absolute_time();
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(void **)(v7 + 48);
  *(void *)(v7 + 4_Block_object_dispose(va, 8) = 0LL;

  uint64_t v9 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(void **)(v10 + 96);
  *(void *)(v10 + 96) = v9;

  *(void *)(*(void *)(a1 + 32) + 168LL) = 0LL;
  *(void *)(*(void *)(a1 + 32) + 176LL) = 0LL;
  *(void *)(*(void *)(a1 + 32) + 184LL) = 0LL;
  uint64_t v12 = *(void *)(a1 + 32);
  id v13 = *(void **)(v12 + 56);
  *(void *)(v12 + 56) = 0LL;

  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 0;
  [*(id *)(a1 + 32) _startAudioLogging];
  uint64_t v14 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v15 = *(void *)(a1 + 32);
  int v16 = *(void **)(v15 + 104);
  *(void *)(v15 + 104) = v14;

  uint64_t v17 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v18 = *(void *)(a1 + 32);
  __int16 v19 = *(void **)(v18 + 112);
  *(void *)(v18 + 112) = v17;

  uint64_t v20 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v21 = *(void *)(a1 + 32);
  id v22 = *(void **)(v21 + 120);
  *(void *)(v21 + 120) = v20;

  uint64_t v23 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v24 = *(void *)(a1 + 32);
  uint64_t v25 = *(void **)(v24 + 128);
  *(void *)(v24 + 12_Block_object_dispose(va, 8) = v23;

  uint64_t v26 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v27 = *(void *)(a1 + 32);
  uint64_t v28 = *(void **)(v27 + 136);
  *(void *)(v27 + 136) = v26;

  uint64_t v29 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v30 = *(void *)(a1 + 32);
  uint64_t v31 = *(void **)(v30 + 144);
  *(void *)(v30 + 144) = v29;
}

LABEL_22:
  __int16 v51 = v13;
  uint64_t v24 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    isAssetMagusSupported = self->_isAssetMagusSupported;
    *(_DWORD *)__int128 buf = 136316418;
    id v58 = "-[CSAttSiriMagusSupportedPolicy _isMagusSupportedWithRecordRoute:playbackRoute:isInSplitterMode:isInActiveCall"
          ":isSupportedRequestType:audioSessionId:recordDeviceInfo:]";
    uint64_t v59 = 2112;
    v60 = v11;
    float v61 = 2112;
    __int16 v62 = v12;
    id v63 = 1024;
    *(_DWORD *)__int16 v64 = v14;
    *(_WORD *)&v64[4] = 1024;
    *(_DWORD *)&v64[6] = isAssetMagusSupported;
    LOWORD(v65) = 1024;
    *(_DWORD *)((char *)&v65 + 2) = v53;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "%s recordRoute : %@, playbackRoute : %@, isSupportedRoute : %d, isAssetMagusSupported : %d, isInSplitterMode : %d",  buf,  0x32u);
  }

  uint64_t v52 = v12;
  uint64_t v26 = v11;
  uint64_t v27 = +[CSUtils isContinuousConversationSupported]( &OBJC_CLASS___CSUtils,  "isContinuousConversationSupported");
  uint64_t v28 = +[CSUtils isContinuousConversationEnabled]( &OBJC_CLASS___CSUtils,  "isContinuousConversationEnabled");
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
  uint64_t v30 = [v29 isFlexibleFollowupsUserDisabled];

  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[CSUtils getSiriLanguageWithFallback:](&OBJC_CLASS___CSUtils, "getSiriLanguageWithFallback:", 0LL));
  int v32 = +[CSUtils isMagusDisabledForLanguageCode:]( &OBJC_CLASS___CSUtils,  "isMagusDisabledForLanguageCode:",  v31);

  uint64_t v33 = +[AFSystemAssistantExperienceStatusManager isSAEEnabled]( &OBJC_CLASS___AFSystemAssistantExperienceStatusManager,  "isSAEEnabled");
  uint64_t v20 = 0;
  id v34 = AFPreferencesTypeToSiriEnabled() & (v33 ^ 1);
  if (v27)
  {
    if (v28)
    {
      if ((v30 & 1) == 0 && v56 && ((v14 ^ 1) & 1) == 0)
      {
        uint64_t v20 = 0;
        if (self->_isAssetMagusSupported && !v54 && !v53) {
          uint64_t v20 = (v34 | v32) ^ 1;
        }
      }
    }
  }

  uint64_t v35 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v36 = @"NO";
    if (v20) {
      __int128 v37 = @"YES";
    }
    else {
      __int128 v37 = @"NO";
    }
    *(_DWORD *)__int128 buf = 136317442;
    id v58 = "-[CSAttSiriMagusSupportedPolicy _isMagusSupportedWithRecordRoute:playbackRoute:isInSplitterMode:isInActiveCall"
          ":isSupportedRequestType:audioSessionId:recordDeviceInfo:]";
    if (v54) {
      __int128 v38 = @"YES";
    }
    else {
      __int128 v38 = @"NO";
    }
    uint64_t v59 = 2112;
    v60 = v37;
    if (v27) {
      __int128 v39 = @"YES";
    }
    else {
      __int128 v39 = @"NO";
    }
    float v61 = 2112;
    __int16 v62 = v38;
    if (v28) {
      id v40 = @"YES";
    }
    else {
      id v40 = @"NO";
    }
    id v63 = 2112;
    *(void *)__int16 v64 = v39;
    if (v56) {
      __int128 v41 = @"YES";
    }
    else {
      __int128 v41 = @"NO";
    }
    *(_WORD *)&v64[8] = 2112;
    if (v30) {
      __int128 v42 = @"YES";
    }
    else {
      __int128 v42 = @"NO";
    }
    id v65 = v40;
    if (v34) {
      __int16 v43 = @"YES";
    }
    else {
      __int16 v43 = @"NO";
    }
    v66 = 2112;
    if (v32) {
      __int128 v44 = @"YES";
    }
    else {
      __int128 v44 = @"NO";
    }
    double v67 = v41;
    if (v33) {
      __int128 v36 = @"YES";
    }
    v68 = 2112;
    int v69 = v42;
    id v70 = 2112;
    double v71 = v43;
    double v72 = 2112;
    int v73 = v44;
    double v74 = 2112;
    float v75 = v36;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "%s isSupported=%@: Is request during active call? %@, isDeviceSupported: %@, isFFEnabledOnDevice: %@, isSupportedR equestType: %@, isFFUserDisabled: %@, isTypeToSiriEnabled: %@, isLocaleInDenyList:%@, isSAEEnabled:%@",  buf,  0x66u);
  }

  if ((v27 & 1) == 0)
  {
    __int16 v47 = (os_log_s *)CSLogCategoryRequest;
    if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v58 = "-[CSAttSiriMagusSupportedPolicy _isMagusSupportedWithRecordRoute:playbackRoute:isInSplitterMode:isInActiveCa"
            "ll:isSupportedRequestType:audioSessionId:recordDeviceInfo:]";
      _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "%s Magus is not supported since it's not a FF-capable device",  buf,  0xCu);
    }

    id v11 = v26;
    goto LABEL_71;
  }

  if ((v28 & 1) == 0)
  {
    double v48 = (os_log_s *)CSLogCategoryRequest;
    id v11 = v26;
    if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v58 = "-[CSAttSiriMagusSupportedPolicy _isMagusSupportedWithRecordRoute:playbackRoute:isInSplitterMode:isInActiveCa"
            "ll:isSupportedRequestType:audioSessionId:recordDeviceInfo:]";
      _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "%s Magus is not supported since Flexible Followup is not enabled on device",  buf,  0xCu);
    }

LABEL_71:
    uint64_t v12 = v52;
    goto LABEL_72;
  }

  id v11 = v26;
  if (v30)
  {
    uint64_t v45 = (os_log_s *)CSLogCategoryRequest;
    uint64_t v12 = v52;
    if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v58 = "-[CSAttSiriMagusSupportedPolicy _isMagusSupportedWithRecordRoute:playbackRoute:isInSplitterMode:isInActiveCa"
            "ll:isSupportedRequestType:audioSessionId:recordDeviceInfo:]";
      v46 = "%s Magus is not supported since user disabled switch";
LABEL_92:
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, v46, buf, 0xCu);
      goto LABEL_72;
    }

    goto LABEL_72;
  }

  uint64_t v12 = v52;
  if (!v56)
  {
    uint64_t v45 = (os_log_s *)CSLogCategoryRequest;
    if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v58 = "-[CSAttSiriMagusSupportedPolicy _isMagusSupportedWithRecordRoute:playbackRoute:isInSplitterMode:isInActiveCa"
            "ll:isSupportedRequestType:audioSessionId:recordDeviceInfo:]";
      v46 = "%s Magus is not supported since request type is ineligible";
      goto LABEL_92;
    }

    goto LABEL_72;
  }

  if ((v14 & 1) == 0)
  {
    uint64_t v45 = (os_log_s *)CSLogCategoryRequest;
    if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v58 = "-[CSAttSiriMagusSupportedPolicy _isMagusSupportedWithRecordRoute:playbackRoute:isInSplitterMode:isInActiveCa"
            "ll:isSupportedRequestType:audioSessionId:recordDeviceInfo:]";
      v46 = "%s Magus is not supported since audio route is ineligible";
      goto LABEL_92;
    }

    goto LABEL_72;
  }

  if (!self->_isAssetMagusSupported)
  {
    uint64_t v45 = (os_log_s *)CSLogCategoryRequest;
    if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v58 = "-[CSAttSiriMagusSupportedPolicy _isMagusSupportedWithRecordRoute:playbackRoute:isInSplitterMode:isInActiveCa"
            "ll:isSupportedRequestType:audioSessionId:recordDeviceInfo:]";
      v46 = "%s Magus is not supported since assets are ineligible";
      goto LABEL_92;
    }

    goto LABEL_72;
  }

  if (v54)
  {
    uint64_t v45 = (os_log_s *)CSLogCategoryRequest;
    if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v58 = "-[CSAttSiriMagusSupportedPolicy _isMagusSupportedWithRecordRoute:playbackRoute:isInSplitterMode:isInActiveCa"
            "ll:isSupportedRequestType:audioSessionId:recordDeviceInfo:]";
      v46 = "%s Magus is not supported since device is in active call";
      goto LABEL_92;
    }
}

LABEL_72:
    id v13 = v51;
    goto LABEL_73;
  }

  if (v53)
  {
    uint64_t v45 = (os_log_s *)CSLogCategoryRequest;
    if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v58 = "-[CSAttSiriMagusSupportedPolicy _isMagusSupportedWithRecordRoute:playbackRoute:isInSplitterMode:isInActiveCa"
            "ll:isSupportedRequestType:audioSessionId:recordDeviceInfo:]";
      v46 = "%s Magus is not supported since device is in splitter mode";
      goto LABEL_92;
    }

    goto LABEL_72;
  }

  if (v34)
  {
    uint64_t v45 = (os_log_s *)CSLogCategoryRequest;
    if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v58 = "-[CSAttSiriMagusSupportedPolicy _isMagusSupportedWithRecordRoute:playbackRoute:isInSplitterMode:isInActiveCa"
            "ll:isSupportedRequestType:audioSessionId:recordDeviceInfo:]";
      v46 = "%s Magus is not supported since Type-To-Siri is enabled";
      goto LABEL_92;
    }

    goto LABEL_72;
  }

  if (!v32) {
    goto LABEL_72;
  }
  double v50 = (os_log_s *)CSLogCategoryRequest;
  id v13 = v51;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    id v58 = "-[CSAttSiriMagusSupportedPolicy _isMagusSupportedWithRecordRoute:playbackRoute:isInSplitterMode:isInActiveCall"
          ":isSupportedRequestType:audioSessionId:recordDeviceInfo:]";
    _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "%s Magus is not supported since locale is ineligible",  buf,  0xCu);
  }

LABEL_73:
  return v20;
}

id *sub_10007DB0C(id *result, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (!a3) {
      return (id *)[result[4] _updateWithAsset:a2];
    }
  }

  return result;
}

void sub_10007DD78(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSAttSiriMagusSupportedPolicy);
  id v2 = (void *)qword_10027FE10;
  qword_10027FE10 = (uint64_t)v1;

  [(id)qword_10027FE10 start];
}

void sub_10007DEA0(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___CSSmartSiriVolumeService));
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___CSSmartSiriVolumeServiceDelegate));
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___CSSmartSiriVolumeServiceProxy);
  uint64_t v4 = -[CSConnectionListener initWithMachService:withServiceInterface:withServiceObject:withDelegateInterface:]( objc_alloc(&OBJC_CLASS___CSConnectionListener),  "initWithMachService:withServiceInterface:withServiceObject:withDelegateInterface:",  @"com.apple.corespeech.corespeechd.ssv.service",  v1,  v3,  v2);
  uint64_t v5 = (void *)qword_10027FE20;
  qword_10027FE20 = (uint64_t)v4;

  -[CSSmartSiriVolumeServiceProxy setListenerDelegate:](v3, "setListenerDelegate:", qword_10027FE20);
  [(id)qword_10027FE20 resumeConnection];
  id v6 = (os_log_s *)CSLogCategoryASV;
  if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315138;
    int v8 = "+[CSConnectionListener(SmartSiriVolume) createSmartSiriVolumeListener]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolume connection started listening",  (uint8_t *)&v7,  0xCu);
  }
}

void sub_10007EDF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100080748(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 48)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 48)));
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:v5]);
    [v6 removeObject:*(void *)(a1 + 40)];
  }

void sub_10008082C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 48)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (!v4)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSHashTable weakObjectsHashTable](&OBJC_CLASS___NSHashTable, "weakObjectsHashTable"));
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 48)));
    [v6 setObject:v5 forKeyedSubscript:v7];
  }

  id v10 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  int v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 48)));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v8]);
  [v9 addObject:*(void *)(a1 + 40)];
}

void sub_10008094C(uint64_t a1, void *a2)
{
  id v6 = a2;
  [v6 expectedTimeRemaining];
  if (v3 <= 0.0)
  {
    [*(id *)(a1 + 32) attachProgressCallBack:0];
  }

  else
  {
    double v4 = (double)(uint64_t)[v6 totalWritten];
    if (v4 / (float)(uint64_t)[v6 totalExpected] > 0.0)
    {
      uint64_t v5 = *(void *)(a1 + 40);
      if (v5) {
        (*(void (**)(void))(v5 + 16))();
      }
    }
  }
}

void sub_1000809D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    if (v2)
    {
      id v3 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  804LL,  0LL));
      (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
    }
  }

  else if (v2)
  {
    (*(void (**)(void, void))(v2 + 16))(*(void *)(a1 + 32), 0LL);
  }

void sub_100080A70(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = (void *)CSLogCategoryAsset;
  if (v3)
  {
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void **)(a1 + 32);
      id v6 = v4;
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 assetServerUrl]);
      int v8 = (void *)objc_claimAutoreleasedReturnValue([v3 localizedDescription]);
      int v13 = 136315650;
      uint64_t v14 = "-[CSAssetController _downloadAsset:withComplete:]_block_invoke";
      __int16 v15 = 2114;
      int v16 = v7;
      __int16 v17 = 2114;
      uint64_t v18 = v8;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s ::: Error downloading from %{public}@ with error %{public}@",  (uint8_t *)&v13,  0x20u);
    }
  }

  else
  {
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void **)(a1 + 32);
      id v10 = v4;
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 assetServerUrl]);
      int v13 = 136315394;
      uint64_t v14 = "-[CSAssetController _downloadAsset:withComplete:]_block_invoke";
      __int16 v15 = 2114;
      int v16 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s ::: download completed successfully from %{public}@.",  (uint8_t *)&v13,  0x16u);
    }

    uint64_t v12 = *(void *)(a1 + 40);
    if (v12) {
      (*(void (**)(void))(v12 + 16))();
    }
  }
}

void sub_100080C0C(id a1, double a2)
{
  id v3 = (os_log_s *)CSLogCategoryAsset;
  if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315394;
    uint64_t v5 = "-[CSAssetController _downloadAsset:withComplete:]_block_invoke";
    __int16 v6 = 2050;
    double v7 = a2 * 100.0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s ::: download progress: %{public}3.0f%%",  (uint8_t *)&v4,  0x16u);
  }

void sub_100080CD4(uint64_t a1)
{
  uint64_t v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100080D64;
  block[3] = &unk_10022C878;
  id v3 = *(id *)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v5 = v3;
  uint64_t v6 = *(void *)(a1 + 48);
  dispatch_async(v2, block);
}

void sub_100080D64(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t, void))(v2 + 16))(v2, 0LL);
  }
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  int v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 48)));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v4]);

  if (v5)
  {
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers", 0));
    double v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 48)));
    int v8 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:v7]);

    id v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v15;
      do
      {
        for (uint64_t i = 0LL; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v15 != v11) {
            objc_enumerationMutation(v8);
          }
          int v13 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
          if ((objc_opt_respondsToSelector(v13, "CSAssetController:didDownloadNewAssetForType:") & 1) != 0) {
            [v13 CSAssetController:*(void *)(a1 + 32) didDownloadNewAssetForType:*(void *)(a1 + 48)];
          }
        }

        id v10 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }

      while (v10);
    }
  }

void sub_100080F1C(uint64_t a1, uint64_t a2)
{
  int v4 = (os_log_s *)CSLogCategoryAsset;
  if (a2)
  {
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 48);
      int v9 = 136315650;
      id v10 = "-[CSAssetController _downloadAssetCatalogForAssetType:complete:]_block_invoke";
      __int16 v11 = 2050;
      uint64_t v12 = v8;
      __int16 v13 = 2050;
      uint64_t v14 = a2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Failed to download meta data for assetType %{public}lu with error %{public}lu",  (uint8_t *)&v9,  0x20u);
    }

    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  804LL,  0LL));
  }

  else
  {
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      int v9 = 136315394;
      id v10 = "-[CSAssetController _downloadAssetCatalogForAssetType:complete:]_block_invoke";
      __int16 v11 = 2050;
      uint64_t v12 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Meta data downloaded successfully for assetType %{public}lu",  (uint8_t *)&v9,  0x16u);
    }

    id v5 = 0LL;
  }

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, void *, id))(v7 + 16))( v7,  v5,  [*(id *)(a1 + 32) _isRetryRecommendedWithResult:a2]);
  }
}

void sub_1000810A0(uint64_t a1, uint64_t a2)
{
  int v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_100081168;
  void v9[3] = &unk_10022CB40;
  uint64_t v14 = a2;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 64);
  id v10 = v5;
  uint64_t v15 = v6;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 32);
  id v11 = v7;
  uint64_t v12 = v8;
  id v13 = *(id *)(a1 + 56);
  dispatch_async(v4, v9);
}

void sub_100081168(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (!v2)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) results]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[CSAssetController filteredAssetsForAssets:assetType:language:]( &OBJC_CLASS___CSAssetController,  "filteredAssetsForAssets:assetType:language:",  v6,  *(void *)(a1 + 72),  *(void *)(a1 + 40)));

    id v7 = (void *)CSLogCategoryAsset;
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = v7;
      id v9 = [v5 count];
      uint64_t v10 = *(void *)(a1 + 72);
      int v12 = 136315650;
      id v13 = "-[CSAssetController _fetchRemoteAssetOfType:withLanguage:query:completion:]_block_invoke_2";
      __int16 v14 = 2050;
      id v15 = v9;
      __int16 v16 = 2050;
      uint64_t v17 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s ::: found %{public}lu assets for assetType %{public}lu",  (uint8_t *)&v12,  0x20u);
    }

    [*(id *)(a1 + 48) _updateFromRemoteToLocalAssets:v5 forAssetType:*(void *)(a1 + 72) completion:*(void *)(a1 + 56)];
    goto LABEL_9;
  }

  id v3 = (os_log_s *)CSLogCategoryAsset;
  if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_ERROR))
  {
    id v11 = *(void **)(a1 + 72);
    int v12 = 136315650;
    id v13 = "-[CSAssetController _fetchRemoteAssetOfType:withLanguage:query:completion:]_block_invoke";
    __int16 v14 = 2050;
    id v15 = v11;
    __int16 v16 = 2050;
    uint64_t v17 = v2;
    _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Failed to finish query for assetType %{public}lu with error %{public}lu",  (uint8_t *)&v12,  0x20u);
  }

  uint64_t v4 = *(void *)(a1 + 56);
  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  802LL,  0LL));
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
LABEL_9:
  }

void sub_100081350(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if (v5)
  {
    if (*(_BYTE *)(a1 + 48)) {
      BOOL v6 = a3 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      id v7 = (os_log_s *)CSLogCategoryAsset;
      if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 136315394;
        __int16 v14 = "-[CSAssetController fetchRemoteMetaOfType:allowRetry:]_block_invoke";
        __int16 v15 = 2050;
        uint64_t v16 = 0x4072C00000000000LL;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s Fetching remote meta data failed, scheduled retry after %{public}f seconds",  buf,  0x16u);
      }

      objc_initWeak((id *)buf, *(id *)(a1 + 32));
      dispatch_time_t v8 = dispatch_time(0LL, 0x45D9648000LL);
      id v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      v11[2] = sub_1000814FC;
      void v11[3] = &unk_10022BEB0;
      objc_copyWeak(v12, (id *)buf);
      v12[1] = *(id *)(a1 + 40);
      dispatch_after(v8, v9, v11);
      objc_destroyWeak(v12);
      objc_destroyWeak((id *)buf);
    }
  }

  else
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _assetQueryForAssetType:*(void *)(a1 + 40)]);
    [*(id *)(a1 + 32) _runAssetQuery:v10 completion:0];
  }
}

void sub_1000814FC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained fetchRemoteMetaOfType:*(void *)(a1 + 40) allowRetry:0];
}

void sub_10008153C(uint64_t a1, void *a2)
{
  if (a2
    || (id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) results]),
        id v8 = [v7 count],
        v7,
        !v8))
  {
    uint64_t v4 = (os_log_s *)CSLogCategoryAsset;
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      __int16 v15 = "-[CSAssetController _runAssetQuery:completion:]_block_invoke";
      __int16 v16 = 2050;
      id v17 = a2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Error running asset query: error %{public}lu, or result is empty",  (uint8_t *)&v14,  0x16u);
    }

    uint64_t v5 = *(void *)(a1 + 40);
    if (v5)
    {
      BOOL v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  802LL,  0LL));
      (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v6);
LABEL_11:
    }
  }

  else
  {
    id v9 = (void *)CSLogCategoryAsset;
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void **)(a1 + 32);
      id v11 = v9;
      int v12 = (void *)objc_claimAutoreleasedReturnValue([v10 results]);
      int v14 = 136315394;
      __int16 v15 = "-[CSAssetController _runAssetQuery:completion:]_block_invoke";
      __int16 v16 = 2050;
      id v17 = [v12 count];
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s Found %{public}lu assets",  (uint8_t *)&v14,  0x16u);
    }

    uint64_t v13 = *(void *)(a1 + 40);
    if (v13)
    {
      BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) results]);
      (*(void (**)(uint64_t, void *, void))(v13 + 16))(v13, v6, 0LL);
      goto LABEL_11;
    }
  }

void sub_100081724(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFFFFFFFFFFFFFDLL) == 0)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) results]);
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue( +[CSAssetController filteredAssetsForAssets:assetType:language:]( &OBJC_CLASS___CSAssetController,  "filteredAssetsForAssets:assetType:language:",  v7,  *(void *)(a1 + 64),  *(void *)(a1 + 40)));

    id v8 = (void *)CSLogCategoryAsset;
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = v8;
      id v10 = [v6 count];
      uint64_t v11 = *(void *)(a1 + 64);
      int v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queryParams]);
      int v18 = 136315906;
      __int16 v19 = "-[CSAssetController _installedAssetOfType:query:withLanguage:completion:]_block_invoke";
      __int16 v20 = 2050;
      id v21 = v10;
      __int16 v22 = 2050;
      uint64_t v23 = v11;
      __int16 v24 = 2114;
      unint64_t v25 = (unint64_t)v12;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s ::: found %{public}lu assets for assetType=%{public}lu, matching query: %{public}@",  (uint8_t *)&v18,  0x2Au);
    }

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _findLatestInstalledAsset:v6]);
    uint64_t v14 = *(void *)(a1 + 56);
    if (v13)
    {
      if (v14) {
        (*(void (**)(uint64_t, void *, void))(v14 + 16))(v14, v13, 0LL);
      }
    }

    else if (v14)
    {
      __int16 v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  802LL,  0LL));
      (*(void (**)(uint64_t, void, void *))(v14 + 16))(v14, 0LL, v15);
    }

    goto LABEL_14;
  }

  uint64_t v4 = (os_log_s *)CSLogCategoryAsset;
  if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_ERROR))
  {
    __int16 v16 = *(void **)(a1 + 64);
    uint64_t v17 = *(void *)(a1 + 32);
    int v18 = 136315906;
    __int16 v19 = "-[CSAssetController _installedAssetOfType:query:withLanguage:completion:]_block_invoke";
    __int16 v20 = 2050;
    id v21 = v16;
    __int16 v22 = 2114;
    uint64_t v23 = v17;
    __int16 v24 = 2050;
    unint64_t v25 = a2;
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Error running asset-query for assetType:%{public}lu, query: %{public}@, error: %{public}lu",  (uint8_t *)&v18,  0x2Au);
  }

  uint64_t v5 = *(void *)(a1 + 56);
  if (v5)
  {
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  803LL,  0LL));
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v6);
LABEL_14:
  }

void sub_1000819C0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100081A48;
  v7[3] = &unk_10022B9C8;
  uint64_t v4 = *(void *)(a1 + 56);
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  id v8 = v5;
  uint64_t v9 = v6;
  [v2 _installedAssetOfType:v4 withLanguage:v3 completion:v7];
}

void sub_100081A48(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = a3;
    id v7 = (id)objc_claimAutoreleasedReturnValue([a2 getCSAssetOfType:v5]);
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v7, v6);
  }

uint64_t sub_100081ACC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100081ADC(uint64_t a1)
{
}

void sub_100081AE4(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _installedAssetOfType:*(void *)(a1 + 56) withLanguage:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100081B24(uint64_t a1)
{
  id v2 = objc_alloc(&OBJC_CLASS___MAAssetQuery);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 24LL);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 56)));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v4]);
  id v6 = [v2 initWithType:v5];

  if (*(void *)(a1 + 56) == 5LL)
  {
    uint64_t v7 = ASAttributeCompatibilityVersion;
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%lu",  *(void *)(a1 + 64)));
    [v6 addKeyValuePair:v7 with:v8];
  }

  else
  {
    id v18 = v6;
    +[CSAssetController addKeyValuePairForQuery:assetType:]( &OBJC_CLASS___CSAssetController,  "addKeyValuePairForQuery:assetType:",  &v18);
    id v9 = v18;

    id v6 = v9;
  }

  id v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_100081CA8;
  v15[3] = &unk_10022B9C8;
  uint64_t v12 = *(void *)(a1 + 56);
  id v13 = *(id *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 56);
  id v16 = v13;
  uint64_t v17 = v14;
  [v10 _installedAssetOfType:v12 query:v6 withLanguage:v11 completion:v15];
  [*(id *)(a1 + 32) _fetchRemoteAssetOfType:*(void *)(a1 + 56) withLanguage:*(void *)(a1 + 40) query:v6 completion:0];
}

void sub_100081CA8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = a3;
    id v7 = (id)objc_claimAutoreleasedReturnValue([a2 getCSAssetOfType:v5]);
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v7, v6);
  }

id sub_100081D2C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fetchRemoteAssetOfType:*(void *)(a1 + 48) withLanguage:*(void *)(a1 + 40) completion:0];
}

void sub_100081D40(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ([v5 state] == (id)2
    || [v5 state] == (id)3
    || [v5 state] == (id)5
    || [v5 state] == (id)6)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v5 getCSAssetOfType:*(void *)(a1 + 40)]);
    [v3 addObject:v4];
  }
}

int64_t sub_100081DD0(id a1, MAAsset *a2, MAAsset *a3)
{
  else {
    return 1LL;
  }
}

id sub_100081DF4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fetchRemoteAssetOfType:*(void *)(a1 + 48) withLanguage:*(void *)(a1 + 40) completion:0];
}

id sub_100081E08(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cleanUpMobileAssetV1Directory];
}

void sub_100081EFC(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSAssetController);
  id v2 = (void *)qword_10027FE30;
  qword_10027FE30 = (uint64_t)v1;
}

void sub_1000830A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_10008351C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, char a38)
{
}

void sub_100083BA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39)
{
}

void sub_100084280(_Unwind_Exception *a1)
{
}

void sub_100084D58(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSAssetManager sharedManager](&OBJC_CLASS___CSAssetManager, "sharedManager"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 assetOfType:1 language:*(void *)(a1 + 32)]);

  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = *(void **)(v4 + 120);
  *(void *)(v4 + 120) = 0LL;

  objc_storeStrong((id *)(*(void *)(a1 + 40) + 120LL), v3);
  id v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 120LL);
    int v8 = 136315394;
    id v9 = "-[CSHybridEndpointAnalyzer _updateAssetWithLanguage:]_block_invoke";
    __int16 v10 = 2114;
    uint64_t v11 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s _currentAsset changed to : %{public}@",  (uint8_t *)&v8,  0x16u);
  }

  [*(id *)(a1 + 40) _readParametersFromHEPAsset:*(void *)(*(void *)(a1 + 40) + 120)];
}

void sub_100084E78(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getCSHybridEndpointerConfigForAsset:*(void *)(a1 + 40)]);
  uint64_t v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 136315394;
    uint64_t v14 = "-[CSHybridEndpointAnalyzer _readParametersFromHEPAsset:]_block_invoke";
    __int16 v15 = 2114;
    id v16 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s csHepConfig: %{public}@",  (uint8_t *)&v13,  0x16u);
  }

  if (v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"ClientLagThresholdMsKey"]);
    [v4 floatValue];
    *(double *)(*(void *)(a1 + 32) + 248LL) = v5;

    id v6 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"ClampedSFLatencyMsForClientLag"]);
    [v6 floatValue];
    *(double *)(*(void *)(a1 + 32) + 256LL) = v7;

    int v8 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"UseDefaultServerFeaturesOnClientLag"]);
    *(_BYTE *)(*(void *)(a1 + 32) + 15) = [v8 BOOLValue];
  }

  else
  {
    *(void *)(*(void *)(a1 + 32) + 248LL) = 0xC0F5F90000000000LL;
    *(void *)(*(void *)(a1 + 32) + 256LL) = 0LL;
    *(_BYTE *)(*(void *)(a1 + 32) + 15LL) = 1;
  }

  id v9 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void **)(v10 + 248);
    uint64_t v12 = *(void *)(v10 + 256);
    LODWORD(v10) = *(unsigned __int8 *)(v10 + 15);
    int v13 = 136315906;
    uint64_t v14 = "-[CSHybridEndpointAnalyzer _readParametersFromHEPAsset:]_block_invoke";
    __int16 v15 = 2050;
    id v16 = v11;
    __int16 v17 = 2050;
    uint64_t v18 = v12;
    __int16 v19 = 1026;
    int v20 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s _clientHepConfig: %{public}f, _clampedASRFeatureLatencyMsForClientLag: %{public}f, _useDefaultASRFeaturesOnClie ntLag: %{public}d",  (uint8_t *)&v13,  0x26u);
  }
}

uint64_t sub_100085074(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100085084(uint64_t a1)
{
}

void sub_10008508C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 336);
  *(void *)(v3 + 336) = v2;

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), *(id *)(*(void *)(a1 + 32) + 120LL));
}

void sub_1000850D4(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 136LL) = 0LL;
  *(void *)(*(void *)(a1 + 32) + 144LL) = 0LL;
  *(void *)(*(void *)(a1 + 32) + 152LL) = 0LL;
  *(_BYTE *)(*(void *)(a1 + 32) + 1+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 32) + 12LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 32) + 17LL) = 0;
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
  {
    kdebug_trace(722472380LL, 0LL, 0LL, 0LL, 0LL);
    id v2 = objc_alloc(&OBJC_CLASS___OSDAnalyzer);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) path]);
    +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
    float v5 = -[OSDAnalyzer initWithConfigFile:sampleRate:context:queue:delegate:]( v2,  "initWithConfigFile:sampleRate:context:queue:delegate:",  v3,  (unint64_t)v4,  0LL,  *(void *)(*(void *)(a1 + 32) + 360LL));
    uint64_t v6 = *(void *)(a1 + 32);
    float v7 = *(void **)(v6 + 160);
    *(void *)(v6 + 160) = v5;

    kdebug_trace(722472384LL, 0LL, 0LL, 0LL, 0LL);
    int v8 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 160LL);
      int v12 = 136315394;
      int v13 = "-[CSHybridEndpointAnalyzer resetForNewRequestWithSampleRate:recordContext:disableRCSelection:]_block_invoke";
      __int16 v14 = 2114;
      uint64_t v15 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s Created OSDAnalyzer: %{public}@",  (uint8_t *)&v12,  0x16u);
    }
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void **)(v10 + 160);
    *(void *)(v10 + 160) = 0LL;
  }

void sub_1000852B0(void *a1)
{
  *(void *)(a1[4] + 28+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0LL;
  *(void *)(a1[4] + 272LL) = 0LL;
  *(_DWORD *)(a1[4] + 24LL) = 0;
  *(_BYTE *)(a1[4] + 11LL) = 0;
  id v2 = -[OSDFeatures initWithSilenceFramesCountMs:silenceProbability:silenceDurationMs:processedAudioMs:]( objc_alloc(&OBJC_CLASS___OSDFeatures),  "initWithSilenceFramesCountMs:silenceProbability:silenceDurationMs:processedAudioMs:",  0.0,  0.0,  0.0,  0.0);
  uint64_t v3 = a1[4];
  float v4 = *(void **)(v3 + 168);
  *(void *)(v3 + 16_Block_object_dispose((const void *)(v1 - 176), 8) = v2;

  objc_storeStrong((id *)(a1[4] + 208LL), *(id *)(a1[4] + 168LL));
  if (*(void *)(*(void *)(a1[5] + 8LL) + 40LL))
  {
    kdebug_trace(722472388LL, 0LL, 0LL, 0LL, 0LL);
    float v5 = objc_alloc(&OBJC_CLASS____EAREndpointer);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[5] + 8) + 40) path]);
    id v32 = 0LL;
    float v7 = -[_EAREndpointer initWithConfiguration:modelVersion:](v5, "initWithConfiguration:modelVersion:", v6, &v32);
    id v8 = v32;
    uint64_t v9 = a1[4];
    uint64_t v10 = *(void **)(v9 + 176);
    *(void *)(v9 + 176) = v7;

    kdebug_trace(722472392LL, 0LL, 0LL, 0LL, 0LL);
    uint64_t v11 = a1[4];
    int v12 = *(void **)(v11 + 184);
    *(void *)(v11 + 184) = v8;
    id v13 = v8;

    uint64_t v14 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 176) defaultServerEndpointFeatures]);
    uint64_t v15 = *(void *)(a1[6] + 8LL);
    id v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;
  }

  else
  {
    uint64_t v17 = a1[4];
    uint64_t v18 = *(void **)(v17 + 176);
    *(void *)(v17 + 176) = 0LL;

    uint64_t v19 = a1[4];
    int v20 = *(void **)(v19 + 184);
    *(void *)(v19 + 184) = 0LL;
  }

  unsigned int v21 = +[CSUtils supportHybridEndpointer](&OBJC_CLASS___CSUtils, "supportHybridEndpointer");
  if (v21)
  {
    if (*(void *)(*(void *)(a1[5] + 8LL) + 40LL)) {
      LOBYTE(v21) = [*(id *)(a1[4] + 176) requestSupportedWithSamplingRate:a1[7]];
    }
    else {
      LOBYTE(v21) = 0;
    }
  }

  *(_BYTE *)(a1[4] + 9LL) = v21;
  __int16 v22 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v23 = a1[4];
    uint64_t v24 = *(void *)(v23 + 176);
    int v25 = *(unsigned __int8 *)(v23 + 9);
    uint64_t v26 = a1[7];
    uint64_t v27 = v22;
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[CSAssetManager sharedManager](&OBJC_CLASS___CSAssetManager, "sharedManager"));
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 currentLanguageCode]);
    uint64_t v30 = *(void *)(a1[4] + 184LL);
    *(_DWORD *)__int128 buf = 136316418;
    id v34 = "-[CSHybridEndpointAnalyzer resetForNewRequestWithSampleRate:recordContext:disableRCSelection:]_block_invoke";
    __int16 v35 = 2114;
    uint64_t v36 = v24;
    __int16 v37 = 1026;
    int v38 = v25;
    __int16 v39 = 2050;
    uint64_t v40 = v26;
    __int16 v41 = 2114;
    __int128 v42 = v29;
    __int16 v43 = 2114;
    uint64_t v44 = v30;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "%s Created HybridClassifier(%{public}@); canProcessCurrentRequest after reset: %{public}d,for sampleRate: %{public"
      "}lu, lang=%{public}@, version=%{public}@",
      buf,
      0x3Au);
  }

  if (*(_BYTE *)(a1[4] + 9LL))
  {
    uint64_t v31 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v34 = "-[CSHybridEndpointAnalyzer resetForNewRequestWithSampleRate:recordContext:disableRCSelection:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "%s HEP.logs.hdr: [ServerASR_trailingSilenceDuration,ClientSPG_SilenceFramesCountMs,ServerASR_endOfSentenceLikeli hood,ServerASR_wordCount,ServerFeaturesLatency,ClientSPG_SilenceProbabilityHMMFiltered] & [ServerASR_pauseCounts ,ServerASR_silencePosterior,ClientSPG_silenceProbailitySPGRaw] @ effectiveClientProcessedAudioMs : [HEPPosterior Out,HEPDecision]",  buf,  0xCu);
    }
  }

void sub_100085600(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  uint64_t v3 = objc_alloc(&OBJC_CLASS___CSASRFeatures);
  float v4 = v3;
  if (v2)
  {
    id v5 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) wordCount];
    id v6 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) trailingSilenceDuration];
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) endOfSentenceLikelihood];
    double v8 = v7;
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) silencePosterior];
    double v10 = v9;
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) acousticEndpointerScore];
    double v12 = v11;
    uint64_t v3 = v4;
    id v13 = v5;
    id v14 = v6;
    double v15 = v8;
    double v16 = v10;
  }

  else
  {
    double v15 = 8.98999977;
    double v16 = 0.997685015;
    double v12 = 0.0;
    id v13 = 0LL;
    id v14 = 0LL;
  }

  uint64_t v17 = -[CSASRFeatures initWithWordCount:trailingSilenceDuration:eosLikelihood:pauseCounts:silencePosterior:taskName:processedAudioDurationInMilliseconds:acousticEndpointerScore:]( v3,  "initWithWordCount:trailingSilenceDuration:eosLikelihood:pauseCounts:silencePosterior:taskName:processedAudioDu rationInMilliseconds:acousticEndpointerScore:",  v13,  v14,  &__NSArray0__struct,  @"SearchOrMessaging",  0LL,  v15,  v16,  v12);
  uint64_t v18 = *(void *)(a1 + 32);
  uint64_t v19 = *(void **)(v18 + 200);
  *(void *)(v18 + 200) = v17;

  uint64_t v20 = objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v21 = *(void *)(a1 + 32);
  __int16 v22 = *(void **)(v21 + 240);
  *(void *)(v21 + 240) = v20;

  uint64_t v23 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v24 = *(void *)(a1 + 32);
  int v25 = *(void **)(v24 + 216);
  *(void *)(v24 + 216) = v23;

  *(void *)(*(void *)(a1 + 32) + 232LL) = 0xFFF0000000000000LL;
  *(void *)(*(void *)(a1 + 32) + 224LL) = 0xBF847AE147AE147BLL;
  *(_BYTE *)(*(void *)(a1 + 32) + 13LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 32) + 14LL) = 0;
}

void sub_100085794(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(_BYTE *)(*(void *)(a1 + 32) + 16LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 32) + 18LL) = 0;
  *(void *)(*(void *)(a1 + 32) + 296LL) = v2;
  *(void *)(*(void *)(a1 + 32) + 312LL) = 0LL;
  *(void *)(*(void *)(a1 + 32) + 304LL) = 0LL;
  *(void *)(*(void *)(a1 + 32) + 32+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0LL;
  uint64_t v3 = *(void *)(a1 + 32);
  float v4 = *(void **)(v3 + 344);
  *(void *)(v3 + 344) = 0LL;

  *(void *)(*(void *)(a1 + 32) + 352LL) = 0LL;
  *(_BYTE *)(*(void *)(a1 + 32) + 19LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 32) + 21LL) = 0;
  *(void *)(*(void *)(a1 + 32) + 368LL) = 0LL;
}

void sub_100085810(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 160);
  *(void *)(v1 + 160) = 0LL;
}

void sub_100085820(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEItriggerEndSampleCount]);
  uint64_t v3 = [v2 unsignedIntegerValue];
  float v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEIclientStartSampleCount]);
  unint64_t v5 = v3 - (_BYTE *)[v4 unsignedIntegerValue];

  +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
  double v7 = (double)v5 / v6;
  double v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEIextraSamplesAtStart]);
  id v9 = [v8 unsignedIntegerValue];

  *(void *)(*(void *)(a1 + 40) + 312LL) = (unint64_t)(v7
  *(double *)(*(void *)(a1 + 40) + 304LL) = (float)((float)((float)(unint64_t)v9
  *(double *)(*(void *)(a1 + 40) + 32+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = -(*(double *)(*(void *)(a1 + 40) + 304LL) - v7 * 1000.0);
  double v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEItwoShotAudibleFeedbackDelay]);
  [v10 doubleValue];
  *(double *)(*(void *)(a1 + 40) + 328LL) = v11 * 1000.0;

  double v12 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    unint64_t v15 = (unint64_t)*(double *)(v13 + 304);
    uint64_t v16 = *(void *)(v13 + 312);
    uint64_t v17 = *(void *)(v13 + 320);
    uint64_t v18 = *(void *)(v13 + 328);
    int v19 = 136316674;
    uint64_t v20 = "-[CSHybridEndpointAnalyzer handleVoiceTriggerWithActivationInfo:]_block_invoke";
    __int16 v21 = 2050;
    double v22 = v7;
    __int16 v23 = 2050;
    uint64_t v24 = v16;
    __int16 v25 = 2050;
    unint64_t v26 = v15;
    __int16 v27 = 2050;
    uint64_t v28 = v17;
    __int16 v29 = 2050;
    uint64_t v30 = v18;
    __int16 v31 = 2114;
    uint64_t v32 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s triggerEndSeconds: %{public}f, _vtEndInSampleCount: %{public}lu, _vtExtraAudioAtStartInMs: %{public}lu,  _hepAu dioOriginInMs: %{public}f, twoShotSilenceThresholdInMs: %{public}f, voiceTriggerInfo: %{public}@,",  (uint8_t *)&v19,  0x48u);
  }

void sub_100085A3C(uint64_t a1)
{
  v26[0] = 0LL;
  v26[1] = v26;
  v26[2] = 0x3032000000LL;
  v26[3] = sub_100085074;
  v26[4] = sub_100085084;
  id v27 = 0LL;
  v24[0] = 0LL;
  v24[1] = v24;
  v24[2] = 0x2020000000LL;
  char v25 = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(dispatch_queue_s **)(v2 + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100085CE4;
  block[3] = &unk_10022CCA8;
  void block[4] = v2;
  void block[5] = v26;
  block[6] = v24;
  dispatch_async_and_wait(v3, block);
  v21[0] = 0LL;
  v21[1] = v21;
  void v21[2] = 0x3032000000LL;
  v21[3] = sub_100085074;
  void v21[4] = sub_100085084;
  id v22 = 0LL;
  v20[0] = 0LL;
  v20[1] = v20;
  void v20[2] = 0x2020000000LL;
  v20[3] = 0xBF847AE147AE147BLL;
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = *(dispatch_queue_s **)(v4 + 192);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  void v19[2] = sub_100085D28;
  v19[3] = &unk_10022CCA8;
  v19[4] = v4;
  void v19[5] = v21;
  v19[6] = v20;
  dispatch_async_and_wait(v5, v19);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  id v12[2] = sub_100085D78;
  void v12[3] = &unk_10022CD20;
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 32);
  id v13 = v7;
  uint64_t v14 = v8;
  unint64_t v15 = v21;
  uint64_t v16 = v20;
  uint64_t v17 = v26;
  uint64_t v18 = v24;
  AnalyticsSendEventLazy(v6, v12);
  id v9 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    *(_DWORD *)__int128 buf = 136315650;
    __int16 v29 = "-[CSHybridEndpointAnalyzer logFeaturesWithEvent:locale:]_block_invoke";
    __int16 v30 = 2114;
    uint64_t v31 = v10;
    __int16 v32 = 2114;
    uint64_t v33 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Log hybrid endpointer features for event: %{public}@, and locale: %{public}@",  buf,  0x20u);
  }

  _Block_object_dispose(v20, 8);
  _Block_object_dispose(v21, 8);

  _Block_object_dispose(v24, 8);
  _Block_object_dispose(v26, 8);
}

void sub_100085CA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
}

void sub_100085CE4(void *a1)
{
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = *(_BYTE *)(a1[4] + 13LL);
}

double sub_100085D28(void *a1)
{
  double result = *(double *)(a1[4] + 224LL) * 1000.0;
  *(double *)(*(void *)(a1[6] + 8LL) + 24LL) = result;
  return result;
}

id sub_100085D78(void *a1)
{
  uint64_t v2 = @"nil";
  v13[0] = @"locale";
  v13[1] = @"endpointerModelVersion";
  uint64_t v3 = (const __CFString *)a1[4];
  if (!v3) {
    uint64_t v3 = @"nil";
  }
  if (*(void *)(a1[5] + 184LL)) {
    uint64_t v2 = *(const __CFString **)(a1[5] + 184LL);
  }
  v14[0] = v3;
  v14[1] = v2;
  id v13[2] = @"wordCount";
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*(id *)(*(void *)(a1[6] + 8) + 40) wordCount]));
  id v14[2] = v4;
  v13[3] = @"eosLikelihood";
  [*(id *)(*(void *)(a1[6] + 8) + 40) eosLikelihood];
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  v14[3] = v5;
  v13[4] = @"trailingSilenceDuration";
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*(id *)(*(void *)(a1[6] + 8) + 40) trailingSilenceDuration]));
  v14[4] = v6;
  void v13[5] = @"asrFeatureLatency";
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1[7] + 8LL) + 24LL)));
  void v14[5] = v7;
  v13[6] = @"clientSilenceProbability";
  [*(id *)(*(void *)(a1[8] + 8) + 40) silenceProbability];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  v14[6] = v8;
  v13[7] = @"clientSilenceFramesCountMs";
  [*(id *)(*(void *)(a1[8] + 8) + 40) silenceFramesCountMs];
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  v14[7] = v9;
  v13[8] = @"endpointResult";
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1[9] + 8LL) + 24LL)));
  v14[8] = v10;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v14,  v13,  9LL));

  return v11;
}

double sub_100085FC0(void *a1)
{
  *(void *)(*(void *)(a1[6] + 8LL) + 24LL) = (unint64_t)*(double *)(a1[4] + 352LL);
  *(void *)(*(void *)(a1[7] + 8LL) + 24LL) = *(void *)(a1[4] + 320LL);
  double result = *(double *)(a1[4] + 304LL);
  *(double *)(*(void *)(a1[8] + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_100086030(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 10LL);
  return result;
}

void sub_100086044(uint64_t a1)
{
}

double sub_100086050(uint64_t a1)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(a1 + 32) + 16LL);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(a1 + 32) + 18LL);
  double result = *(double *)(*(void *)(a1 + 32) + 320LL) + *(float *)(a1 + 64);
  *(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = result;
  return result;
}

id sub_100086098(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _shouldProvideTwoShotFeedbackWithRecordContext];
  if ((_DWORD)result) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }
  return result;
}

void sub_1000860D0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    int v4 = 136315394;
    unint64_t v5 = "-[CSHybridEndpointAnalyzer osdAnalyzer:didUpdateOSDFeatures:]_block_invoke_3";
    __int16 v6 = 2050;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Detected speech start at %{public}f of effectiveClientProcessedAudioMs",  (uint8_t *)&v4,  0x16u);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 21LL) = 1;
  *(void *)(*(void *)(a1 + 32) + 368LL) = 0LL;
}

void sub_1000861A4(uint64_t a1)
{
  *(double *)(*(void *)(a1 + 32) + 368LL) = *(float *)(a1 + 40);
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 17))
  {
    double v2 = *(double *)(v1 + 368);
    double v3 = *(double *)(v1 + 328);
    if (v2 > v3)
    {
      unint64_t v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 136315650;
        uint64_t v8 = "-[CSHybridEndpointAnalyzer osdAnalyzer:didUpdateOSDFeatures:]_block_invoke";
        __int16 v9 = 2050;
        double v10 = v2;
        __int16 v11 = 2048;
        double v12 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s Detected sufficient silence to fire two shot with %{public}fms silence, %f threshold",  (uint8_t *)&v7,  0x20u);
        uint64_t v1 = *(void *)(a1 + 32);
      }

      *(_BYTE *)(v1 + 17) = 1;
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));
      objc_msgSend( WeakRetained,  "endpointer:detectedTwoShotAtTime:",  *(double *)(*(void *)(a1 + 32) + 368) / 1000.0);
    }
  }

void sub_1000862D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 20))
  {
    double v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = "-[CSHybridEndpointAnalyzer osdAnalyzer:didUpdateOSDFeatures:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s HEP::RecordingDidStop: Ignoring silenceScoreEstimateAvailable",  buf,  0xCu);
    }
  }

  else
  {
    uint64_t v4 = qword_10027FE58;
    if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * qword_10027FE58, 1) <= 0x888888888888888uLL)
    {
      kdebug_trace(722472240LL, 0LL, 0LL, 0LL, 0LL);
      uint64_t v4 = qword_10027FE58;
      uint64_t v1 = *(void *)(a1 + 32);
    }

    qword_10027FE58 = v4 + 1;
    unint64_t v5 = *(dispatch_queue_s **)(v1 + 288);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100086FBC;
    block[3] = &unk_10022EF80;
    void block[5] = *(void *)(a1 + 48);
    void block[4] = v1;
    dispatch_async_and_wait(v5, block);
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
    {
      __int16 v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
        double v7 = *(float *)(a1 + 72);
        *(_DWORD *)__int128 buf = 136315394;
        *(void *)&uint8_t buf[4] = "-[CSHybridEndpointAnalyzer osdAnalyzer:didUpdateOSDFeatures:]_block_invoke_2";
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Already communicated end-pt: Not Invoking hybridClassifier for silposnf=%{public}f",  buf,  0x16u);
      }

      kdebug_trace(722472244LL, 0LL, 0LL, 0LL, 0LL);
    }

    else
    {
      objc_storeStrong((id *)(*(void *)(a1 + 32) + 208LL), *(id *)(a1 + 40));
      uint64_t v102 = 0LL;
      float v103 = &v102;
      uint64_t v104 = 0x3032000000LL;
      float v105 = sub_100085074;
      v106 = sub_100085084;
      id v107 = 0LL;
      v100[0] = 0LL;
      v100[1] = v100;
      v100[2] = 0x3032000000LL;
      v100[3] = sub_100085074;
      v100[4] = sub_100085084;
      v101 = @"SearchOrMessaging";
      uint64_t v8 = *(void *)(a1 + 32);
      __int16 v9 = *(dispatch_queue_s **)(v8 + 192);
      v95[0] = _NSConcreteStackBlock;
      v95[1] = 3221225472LL;
      v95[2] = sub_100086FD0;
      v95[3] = &unk_10022CC30;
      uint64_t v97 = *(void *)(a1 + 56);
      v98 = &v102;
      v95[4] = v8;
      id v96 = *(id *)(a1 + 40);
      v99 = v100;
      dispatch_async_and_wait(v9, v95);
      uint64_t v10 = v103[5];
      if (v10)
      {
        id v93 = 0LL;
        uint64_t v94 = 0LL;
        unsigned int v11 = [*(id *)(*(void *)(a1 + 32) + 176) didEndpointWithFeatures:v10 audioTimestamp:&v93 featuresToLog:(char *)&v94 + 4 endpointPosterior:&v94 extraDelayMs:*(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)];
        id v12 = v93;
        id v13 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          id v14 = [(id)v103[5] trailingSilenceDuration];
          [(id)v103[5] clientSilenceFramesCountMs];
          uint64_t v16 = v15;
          [(id)v103[5] endOfSentenceLikelihood];
          uint64_t v18 = v17;
          id v19 = [(id)v103[5] wordCount];
          [(id)v103[5] serverFeaturesLatency];
          float v21 = v20;
          [(id)v103[5] clientSilenceProbability];
          uint64_t v23 = v22;
          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([(id)v103[5] pauseCounts]);
          id v25 = (id)objc_claimAutoreleasedReturnValue([v24 componentsJoinedByString:@","]);
          [(id)v103[5] silencePosterior];
          unint64_t v26 = (unint64_t)*(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
          *(_DWORD *)__int128 buf = 136317954;
          *(void *)&uint8_t buf[4] = "-[CSHybridEndpointAnalyzer osdAnalyzer:didUpdateOSDFeatures:]_block_invoke";
          *(_WORD *)&buf[12] = 2050;
          *(void *)&buf[14] = v14;
          *(_WORD *)&buf[22] = 2050;
          __int16 v122 = v16;
          *(_WORD *)id v123 = 2050;
          *(void *)&v123[2] = v18;
          *(_WORD *)&v123[10] = 2050;
          *(void *)&v123[12] = v19;
          __int16 v124 = 2050;
          double v125 = v21;
          __int16 v126 = 2050;
          uint64_t v127 = v23;
          __int16 v128 = 2114;
          id v129 = v25;
          __int16 v130 = 2050;
          uint64_t v131 = v27;
          __int16 v132 = 2050;
          unint64_t v133 = v26;
          __int16 v134 = 2050;
          double v135 = *((float *)&v94 + 1);
          __int16 v136 = 1026;
          unsigned int v137 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%s HEP.feats: [%{public}ld,%{public}f,%{public}f,%{public}ld,%{public}f,%{public}f] & [(%{public}@),%{public }f] @ %{public}lu [%{public}f, %{public}d]",  buf,  0x76u);
        }

        if (v11 && !*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL))
        {
          *(_BYTE *)(*(void *)(a1 + 32) + 13LL) = 1;
          *(void *)__int128 buf = 0LL;
          *(void *)&buf[8] = buf;
          *(void *)&buf[16] = 0x3032000000LL;
          __int16 v122 = sub_100085074;
          *(void *)id v123 = sub_100085084;
          *(void *)&v123[8] = 0LL;
          uint64_t v89 = 0LL;
          double v90 = &v89;
          uint64_t v91 = 0x2020000000LL;
          uint64_t v92 = 0LL;
          uint64_t v28 = *(void *)(a1 + 32);
          __int16 v29 = *(dispatch_queue_s **)(v28 + 288);
          v87[0] = _NSConcreteStackBlock;
          v87[1] = 3221225472LL;
          v87[2] = sub_100087594;
          v87[3] = &unk_10022BB70;
          char v88 = *(_BYTE *)(a1 + 76);
          v87[4] = v28;
          v87[5] = buf;
          v87[6] = &v89;
          dispatch_async_and_wait(v29, v87);
          uint64_t v83 = 0LL;
          v84 = &v83;
          uint64_t v85 = 0x2020000000LL;
          char v86 = 0;
          uint64_t v79 = 0LL;
          v80 = &v79;
          uint64_t v81 = 0x2020000000LL;
          uint64_t v82 = 0LL;
          uint64_t v75 = 0LL;
          double v76 = &v75;
          uint64_t v77 = 0x2020000000LL;
          uint64_t v78 = 0LL;
          uint64_t v71 = 0LL;
          double v72 = &v71;
          uint64_t v73 = 0x2020000000LL;
          uint64_t v74 = 0LL;
          uint64_t v30 = *(void *)(a1 + 32);
          uint64_t v31 = *(dispatch_queue_s **)(v30 + 128);
          v70[0] = _NSConcreteStackBlock;
          v70[1] = 3221225472LL;
          v70[2] = sub_1000875FC;
          v70[3] = &unk_10022CBB8;
          v70[4] = v30;
          v70[5] = &v83;
          v70[6] = &v79;
          v70[7] = &v75;
          v70[8] = &v71;
          dispatch_async_and_wait(v31, v70);
          double v32 = *(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
          double v33 = *(double *)(*(void *)(a1 + 32) + 304LL);
          +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
          float v35 = v34;
          uint64_t v36 = v76[3];
          uint64_t v37 = v80[3];
          +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
          int v38 = (uint64_t (*)(uint64_t, uint64_t))+[CSFTimeUtils hostTimeFromSampleCount:anchorHostTime:anchorSampleCount:sampleRate:]( &OBJC_CLASS___CSFTimeUtils,  "hostTimeFromSampleCount:anchorHostTime:anchorSampleCount:sampleRate:",  (unint64_t)((v32 + v33) / 1000.0 * v35),  v36,  v37);
          __int16 v39 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
          {
            int v40 = *((unsigned __int8 *)v84 + 24);
            *(_DWORD *)double v117 = 136315906;
            *(void *)&v117[4] = "-[CSHybridEndpointAnalyzer osdAnalyzer:didUpdateOSDFeatures:]_block_invoke_3";
            *(_WORD *)&v117[12] = 2050;
            *(double *)&v117[14] = *((float *)&v94 + 1);
            *(_WORD *)&v117[22] = 2050;
            __int16 v118 = v38;
            LOWORD(v119) = 1026;
            *(_DWORD *)((char *)&v119 + 2) = v40;
            _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "%s HEP.posterior=%{public}f, result=1, endpointedBuffer.hostTime=%{public}llu, isAnchorTimeBuffered=%{public}d",  v117,  0x26u);
          }

          id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));
          if (WeakRetained)
          {
            id v43 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));
            char v44 = objc_opt_respondsToSelector(v43, "endpointer:reportEndpointBufferHostTime:firstBufferHostTime:");

            if ((v44 & 1) != 0)
            {
              id v45 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));
              [v45 endpointer:*(void *)(a1 + 32) reportEndpointBufferHostTime:v38 firstBufferHostTime:v90[3]];
            }
          }

          LODWORD(v42) = HIDWORD(v94);
          if (*((float *)&v94 + 1) == 0.0 && objc_msgSend(v12, "count", v42) == (id)2)
          {
            v46 = (os_log_s *)CSLogContextFacilityCoreSpeech;
            if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)double v117 = 136315394;
              *(void *)&v117[4] = "-[CSHybridEndpointAnalyzer osdAnalyzer:didUpdateOSDFeatures:]_block_invoke";
              *(_WORD *)&v117[12] = 2114;
              *(void *)&v117[14] = v12;
              _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "%s request timeout with features %{public}@",  v117,  0x16u);
            }

            *(_BYTE *)(*(void *)(a1 + 32) + 11LL) = 1;
          }

          *(void *)(*(void *)(a1 + 32) + 272LL) = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
          objc_storeStrong((id *)(*(void *)(a1 + 32) + 168LL), *(id *)(a1 + 40));
          __int16 v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
          [v47 timeIntervalSinceDate:*(void *)(*(void *)&buf[8] + 40)];
          double v49 = v48;
          double v50 = *(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
          uint64_t v51 = v72[3];
          *(void *)double v117 = 0LL;
          *(void *)&v117[8] = v117;
          *(void *)&v117[16] = 0x3032000000LL;
          __int16 v118 = sub_100085074;
          id v119 = sub_100085084;
          id v120 = 0LL;
          uint64_t v52 = *(void *)(a1 + 32);
          float v53 = *(dispatch_queue_s **)(v52 + 192);
          v69[0] = _NSConcreteStackBlock;
          v69[1] = 3221225472LL;
          v69[2] = sub_100087668;
          v69[3] = &unk_10022EF80;
          v69[4] = v52;
          v69[5] = v117;
          dispatch_async_and_wait(v53, v69);
          v115[0] = @"ExtraDelayMs";
          id v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v94));
          double v55 = v49 / (v50 / 1000.0) * (float)((float)v51 / 1000.0) * 1000.0;
          v116[0] = v54;
          v115[1] = @"EndpointerDecisionLagMs";
          id v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v55));
          v116[1] = v56;
          id v57 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v116,  v115,  2LL));

          id v58 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
          {
            double v59 = *(double *)(*(void *)&v117[8] + 40LL);
            *(_DWORD *)v109 = 136315650;
            v110 = "-[CSHybridEndpointAnalyzer osdAnalyzer:didUpdateOSDFeatures:]_block_invoke_2";
            __int16 v111 = 2114;
            double v112 = v59;
            __int16 v113 = 2114;
            __int16 v114 = v57;
            _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "%s ASRFeaturesLatencyDistribution: %{public}@ additionalMetrics: %{public}@",  v109,  0x20u);
          }

          [*(id *)(a1 + 40) silenceFramesCountMs];
          double v61 = v60;
          __int16 v62 = objc_alloc(&OBJC_CLASS___CSEndpointerMetrics);
          id v63 = -[CSEndpointerMetrics initWithTotalAudioRecorded:endpointBufferHostTime:featuresAtEndpoint:endpointerType:asrFeatureLatencyDistribution:additionalMetrics:trailingSilenceDurationAtEndpoint:requestId:]( v62,  "initWithTotalAudioRecorded:endpointBufferHostTime:featuresAtEndpoint:endpointerType:asrFeatureLatencyD istribution:additionalMetrics:trailingSilenceDurationAtEndpoint:requestId:",  v38,  v12,  1LL,  *(void *)(*(void *)&v117[8] + 40LL),  v57,  0LL,  *(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL),  v61 / 1000.0);
          if (*(_BYTE *)(a1 + 76))
          {
            __int16 v64 = (os_log_s *)CSLogContextFacilityCoreSpeech;
            if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEBUG))
            {
              double v65 = *(double *)(*(void *)(a1 + 32) + 272LL) / 1000.0;
              *(_DWORD *)v109 = 136315394;
              v110 = "-[CSHybridEndpointAnalyzer osdAnalyzer:didUpdateOSDFeatures:]_block_invoke";
              __int16 v111 = 2050;
              double v112 = v65;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEBUG,  "%s MMEP:: HEP detected at %{public}f but will continue running for MMEP.",  v109,  0x16u);
            }
          }

          else
          {
            id v67 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32LL));
            [v67 endpointer:*(void *)(a1 + 32) didDetectHardEndpointAtTime:v63 withMetrics:*(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) / 1000.0];

            [*(id *)(a1 + 32) _emitEndpointDetectedEventWithEndpointTimeMs:v38 endpointBufferHostTime:v103[5] endpointerFeatures:(int)v94 endpointerDecisionL agInNs:*(void *)(*(void *)&v117[8] + 40) extraDelayMs:*(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) endpointScore:v55 asrFeaturesLatencies:*((float *)&v94 + 1)];
          }

          _Block_object_dispose(v117, 8);
          _Block_object_dispose(&v71, 8);
          _Block_object_dispose(&v75, 8);
          _Block_object_dispose(&v79, 8);
          _Block_object_dispose(&v83, 8);
          _Block_object_dispose(&v89, 8);
          _Block_object_dispose(buf, 8);
        }

        *(_DWORD *)(*(void *)(a1 + 32) + 24LL) = HIDWORD(v94);
        *(double *)(*(void *)(a1 + 32) + 28+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = *(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) / 1000.0;
        uint64_t v68 = qword_10027FE60;
        if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * qword_10027FE60, 1) <= 0x888888888888888uLL)
        {
          kdebug_trace(722472248LL, 0LL, 0LL, 0LL, 0LL);
          uint64_t v68 = qword_10027FE60;
        }

        qword_10027FE60 = v68 + 1;
      }

      else
      {
        v66 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 136315138;
          *(void *)&uint8_t buf[4] = "-[CSHybridEndpointAnalyzer osdAnalyzer:didUpdateOSDFeatures:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "%s ClientLag: Not Invoking HybridClassifier as serverProcessedAudioMs > effectiveClientProcessedAudioMs",  buf,  0xCu);
        }

        kdebug_trace(722472244LL, 0LL, 0LL, 0LL, 0LL);
      }

      _Block_object_dispose(v100, 8);
      _Block_object_dispose(&v102, 8);
    }
  }

void sub_100086F10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, char a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

uint64_t sub_100086FBC(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 16LL);
  return result;
}

void sub_100086FD0(uint64_t a1)
{
  double v2 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  if (v2 >= (double)(uint64_t)[*(id *)(*(void *)(a1 + 32) + 200) processedAudioDurationInMilliseconds])
  {
    [*(id *)(a1 + 40) processedAudioMs];
    uint64_t v14 = *(void *)(a1 + 32);
    if (*(_BYTE *)(v14 + 14))
    {
      double v15 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
      double v16 = v15 - (double)(uint64_t)[*(id *)(v14 + 200) processedAudioDurationInMilliseconds];
    }

    else
    {
      double v16 = v13;
    }

    id v43 = objc_alloc(&OBJC_CLASS____EAREndpointFeatures);
    id v44 = [*(id *)(*(void *)(a1 + 32) + 200) wordCount];
    id v45 = [*(id *)(*(void *)(a1 + 32) + 200) trailingSilenceDuration];
    [*(id *)(*(void *)(a1 + 32) + 200) eosLikelihood];
    double v47 = v46;
    [*(id *)(*(void *)(a1 + 32) + 200) acousticEndpointerScore];
    double v49 = v48;
    double v50 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 200) pauseCounts]);
    [*(id *)(*(void *)(a1 + 32) + 200) silencePosterior];
    double v52 = v51;
    [*(id *)(a1 + 40) silenceFramesCountMs];
    double v54 = v53;
    [*(id *)(a1 + 40) silenceProbability];
    double v56 = v55;
    [*(id *)(a1 + 40) silenceDurationMs];
    *(float *)&double v58 = v57;
    *(float *)&double v59 = v16;
    id v60 = [v43 initWithWordCount:v44 trailingSilenceDuration:v45 endOfSentenceLikelihood:v50 acousticEndpointerScore:0 pauseCounts:v47 silenc ePosterior:v49 clientSilenceFramesCountMs:v52 clientSilenceProbability:v54 silencePosteriorNF:v56 serverFeaturesLatency:v58 eagerResultEndTime:v59];
    uint64_t v61 = *(void *)(*(void *)(a1 + 56) + 8LL);
    __int16 v62 = *(void **)(v61 + 40);
    *(void *)(v61 + 40) = v60;

    uint64_t v63 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 200) taskName]);
    uint64_t v64 = *(void *)(*(void *)(a1 + 64) + 8LL);
    double v65 = *(void **)(v64 + 40);
    *(void *)(v64 + 40) = v63;
  }

  else
  {
    double v3 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 200LL);
      unint64_t v5 = v3;
      double v6 = COERCE_DOUBLE([v4 processedAudioDurationInMilliseconds]);
      double v7 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
      int v87 = 136315650;
      char v88 = "-[CSHybridEndpointAnalyzer osdAnalyzer:didUpdateOSDFeatures:]_block_invoke";
      __int16 v89 = 2050;
      double v90 = v6;
      __int16 v91 = 2050;
      double v92 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s ClientLag: asrProcessedAudioMs(%{public}ld) > effectiveClientProcessedAudioMs(%{public}f)",  (uint8_t *)&v87,  0x20u);
    }

    double v8 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    double v9 = v8
       - (double)(uint64_t)[*(id *)(*(void *)(a1 + 32) + 200) processedAudioDurationInMilliseconds];
    uint64_t v10 = *(void *)(a1 + 32);
    double v11 = *(double *)(v10 + 248);
    if (v9 <= v11)
    {
      int v17 = *(unsigned __int8 *)(v10 + 15);
      uint64_t v18 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      BOOL v19 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
      if (v17)
      {
        if (v19)
        {
          double v20 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
          int v87 = 136315394;
          char v88 = "-[CSHybridEndpointAnalyzer osdAnalyzer:didUpdateOSDFeatures:]_block_invoke";
          __int16 v89 = 2050;
          double v90 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%s ClientLag: Using DefaultASRFeatures with disconnected-state asrFeatureLatency: %{public}f",  (uint8_t *)&v87,  0x16u);
          uint64_t v10 = *(void *)(a1 + 32);
        }

        float v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v10 + 176) defaultServerEndpointFeatures]);
        id v22 = objc_alloc(&OBJC_CLASS____EAREndpointFeatures);
        id v23 = [v21 wordCount];
        id v24 = [v21 trailingSilenceDuration];
        [v21 endOfSentenceLikelihood];
        double v26 = v25;
        [v21 acousticEndpointerScore];
        double v28 = v27;
        [v21 silencePosterior];
        double v30 = v29;
        [*(id *)(a1 + 40) silenceFramesCountMs];
        double v32 = v31;
        [*(id *)(a1 + 40) silenceProbability];
        double v34 = v33;
        [*(id *)(a1 + 40) silenceDurationMs];
        float v36 = v35;
        [*(id *)(a1 + 40) processedAudioMs];
        *(float *)&double v38 = v37;
        *(float *)&double v39 = v36;
        id v40 = [v22 initWithWordCount:v23 trailingSilenceDuration:v24 endOfSentenceLikelihood:&__NSArray0__struct acousticEndpointerScore:0 pauseCounts:v26 si lencePosterior:v28 clientSilenceFramesCountMs:v30 clientSilenceProbability:v32 silencePosteriorNF:v34 serverFeaturesLate ncy:v39 eagerResultEndTime:v38];
        uint64_t v41 = *(void *)(*(void *)(a1 + 56) + 8LL);
        double v42 = *(void **)(v41 + 40);
        *(void *)(v41 + 40) = v40;
      }

      else
      {
        if (v19)
        {
          double v66 = *(double *)(v10 + 256);
          int v87 = 136315394;
          char v88 = "-[CSHybridEndpointAnalyzer osdAnalyzer:didUpdateOSDFeatures:]_block_invoke";
          __int16 v89 = 2050;
          double v90 = v66;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%s ClientLag: Using ASRFeatures with ClampedASRFeatureLatency: %{public}f",  (uint8_t *)&v87,  0x16u);
        }

        id v67 = objc_alloc(&OBJC_CLASS____EAREndpointFeatures);
        id v68 = [*(id *)(*(void *)(a1 + 32) + 200) wordCount];
        id v69 = [*(id *)(*(void *)(a1 + 32) + 200) trailingSilenceDuration];
        [*(id *)(*(void *)(a1 + 32) + 200) eosLikelihood];
        double v71 = v70;
        [*(id *)(*(void *)(a1 + 32) + 200) acousticEndpointerScore];
        double v73 = v72;
        uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 200) pauseCounts]);
        [*(id *)(*(void *)(a1 + 32) + 200) silencePosterior];
        double v76 = v75;
        [*(id *)(a1 + 40) silenceFramesCountMs];
        double v78 = v77;
        [*(id *)(a1 + 40) silenceProbability];
        double v80 = v79;
        [*(id *)(a1 + 40) silenceDurationMs];
        *(float *)&double v82 = v81;
        *(float *)&double v83 = *(double *)(*(void *)(a1 + 32) + 256LL);
        id v84 = [v67 initWithWordCount:v68 trailingSilenceDuration:v69 endOfSentenceLikelihood:v74 acousticEndpointerScore:0 pauseCounts:v71 si lencePosterior:v73 clientSilenceFramesCountMs:v76 clientSilenceProbability:v78 silencePosteriorNF:v80 serverFeaturesLate ncy:v82 eagerResultEndTime:v83];
        uint64_t v85 = *(void *)(*(void *)(a1 + 56) + 8LL);
        char v86 = *(void **)(v85 + 40);
        *(void *)(v85 + 40) = v84;
      }
    }

    else
    {
      id v12 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
        int v87 = 136315650;
        char v88 = "-[CSHybridEndpointAnalyzer osdAnalyzer:didUpdateOSDFeatures:]_block_invoke";
        __int16 v89 = 2050;
        double v90 = v9;
        __int16 v91 = 2050;
        double v92 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s ClientLag: Not invoking HybridClassifier: asrFeatureLatency > clientLagThreshold: %{public}f > %{public}f",  (uint8_t *)&v87,  0x20u);
      }
    }
  }

double sub_100087594(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 56)) {
    *(_BYTE *)(*(void *)(a1 + 32) + 16LL) = 1;
  }
  *(_BYTE *)(*(void *)(a1 + 32) + 18LL) = 1;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), *(id *)(*(void *)(a1 + 32) + 344LL));
  double result = *(double *)(*(void *)(a1 + 32) + 352LL);
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = (unint64_t)result;
  return result;
}

id sub_1000875FC(void *a1)
{
  *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = *(_BYTE *)(a1[4] + 10LL);
  *(void *)(*(void *)(a1[6] + 8LL) + 24LL) = *(void *)(a1[4] + 144LL);
  *(void *)(*(void *)(a1[7] + 8LL) + 24LL) = *(void *)(a1[4] + 152LL);
  id result = [*(id *)(a1[4] + 160) getFrameDurationMs];
  *(void *)(*(void *)(a1[8] + 8LL) + 24LL) = result;
  return result;
}

void sub_100087668(uint64_t a1)
{
  double v2 = (void *)objc_claimAutoreleasedReturnValue( +[CSUtils distributionDictionary:]( &OBJC_CLASS___CSUtils,  "distributionDictionary:",  *(void *)(*(void *)(a1 + 32) + 216LL)));
  id v3 = [v2 mutableCopy];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  unint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  id v6 = (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 232LL)));
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v6 forKeyedSubscript:@"Warmup"];
}

void sub_100087700(uint64_t a1)
{
  uint64_t v38 = 0LL;
  double v39 = &v38;
  uint64_t v40 = 0x3032000000LL;
  uint64_t v41 = sub_100085074;
  double v42 = sub_100085084;
  id v43 = 0LL;
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(dispatch_queue_s **)(v2 + 192);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100087BE8;
  block[3] = &unk_10022EF80;
  void block[4] = v2;
  void block[5] = &v38;
  dispatch_async_and_wait(v3, block);
  double v4 = *(double *)(*(void *)(a1 + 32) + 272LL);
  double v5 = v4 - (double)(uint64_t)[(id)v39[5] processedAudioDurationInMilliseconds];
  double v6 = *(double *)(*(void *)(a1 + 32) + 272LL);
  double v7 = *(double *)(a1 + 48);
  double v8 = v6 - v7;
  if (v6 - v7 < 0.0)
  {
    double v9 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136316162;
      double v47 = "-[CSHybridEndpointAnalyzer shouldAcceptEagerResultForDuration:resultsCompletionHandler:]_block_invoke_2";
      __int16 v48 = 2050;
      double v49 = v7;
      __int16 v50 = 2050;
      double v51 = v6;
      __int16 v52 = 2050;
      double v53 = v5;
      __int16 v54 = 2050;
      double v55 = v6 - v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Accepting RC: RCTime < 0: ASR's processedAudioDuration(%{public}f) > _lastReportedEndpointTimeMs(%{public}f): asrFeatureLatency: %{public}f, rcTimeMs: %{public}f",  buf,  0x34u);
      double v7 = *(double *)(a1 + 48);
    }

    uint64_t v10 = *(void *)(a1 + 40);
    id v11 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v7));
    v45[0] = v11;
    id v12 = (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 272LL)));
    v45[1] = v12;
    double v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v45, 2LL));
    (*(void (**)(uint64_t, uint64_t, void *))(v10 + 16))(v10, 1LL, v13);
LABEL_9:

    goto LABEL_13;
  }

  if (v5 < 0.0)
  {
    uint64_t v14 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136316162;
      double v47 = "-[CSHybridEndpointAnalyzer shouldAcceptEagerResultForDuration:resultsCompletionHandler:]_block_invoke";
      __int16 v48 = 2050;
      double v49 = v7;
      __int16 v50 = 2050;
      double v51 = v6;
      __int16 v52 = 2050;
      double v53 = v5;
      __int16 v54 = 2050;
      double v55 = v6 - v7;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%s Rejecting RC: ASRFeatureLatency < 0: ASR's processedAudioDuration(%{public}f): _lastReportedEndpointTimeMs(%{ public}f): asrFeatureLatency: %{public}f, rcTimeMs: %{public}f",  buf,  0x34u);
      double v7 = *(double *)(a1 + 48);
    }

    uint64_t v15 = *(void *)(a1 + 40);
    id v11 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v7));
    v44[0] = v11;
    id v12 = (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 272LL)));
    v44[1] = v12;
    double v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v44, 2LL));
    (*(void (**)(uint64_t, void, void *))(v15 + 16))(v15, 0LL, v13);
    goto LABEL_9;
  }

  id v16 = objc_alloc(&OBJC_CLASS____EAREndpointFeatures);
  id v17 = [(id)v39[5] wordCount];
  id v18 = [(id)v39[5] trailingSilenceDuration];
  [(id)v39[5] eosLikelihood];
  double v20 = v19;
  [(id)v39[5] acousticEndpointerScore];
  double v22 = v21;
  id v23 = (void *)objc_claimAutoreleasedReturnValue([(id)v39[5] pauseCounts]);
  [(id)v39[5] silencePosterior];
  double v25 = v24;
  [*(id *)(*(void *)(a1 + 32) + 168) silenceFramesCountMs];
  double v27 = v26;
  [*(id *)(*(void *)(a1 + 32) + 168) silenceProbability];
  double v29 = v28;
  [*(id *)(*(void *)(a1 + 32) + 168) silenceDurationMs];
  *(float *)&double v31 = v30;
  *(float *)&double v32 = v5;
  id v11 = [v16 initWithWordCount:v17 trailingSilenceDuration:v18 endOfSentenceLikelihood:v23 acousticEndpointerScore:(uint64_t)v8 pauseCounts:v20 silenceP osterior:v22 clientSilenceFramesCountMs:v25 clientSilenceProbability:v27 silencePosteriorNF:v29 serverFeaturesLatency:v31 eagerResultEndTime:v32];

  double v33 = *(void **)(*(void *)(a1 + 32) + 176LL);
  id v36 = 0LL;
  unsigned int v34 = [v33 acceptEagerResultWithFeatures:v11 featuresToLog:&v36];
  id v12 = v36;
  double v35 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315650;
    double v47 = "-[CSHybridEndpointAnalyzer shouldAcceptEagerResultForDuration:resultsCompletionHandler:]_block_invoke";
    __int16 v48 = 2114;
    double v49 = *(double *)&v11;
    __int16 v50 = 1026;
    LODWORD(v51) = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "%s rcEpFeatures: %{public}@ shouldAccept: %{public}d",  buf,  0x1Cu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_13:

  _Block_object_dispose(&v38, 8);
}

void sub_100087BBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100087BE8(uint64_t a1)
{
}

double sub_100087BFC(uint64_t a1)
{
  double result = *(double *)(*(void *)(a1 + 32) + 320LL);
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_100087C10(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 14LL) = 1;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 200LL), *(id *)(a1 + 40));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v2 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 240)];
  *(void *)(*(void *)(a1 + 32) + 224LL) = v3;
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(double *)(v4 + 232) >= 0.0)
  {
    double v5 = *(void **)(v4 + 216);
    double v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v5 addObject:v6];
  }

  else
  {
    *(void *)(v4 + 232) = v3;
  }

  uint64_t v7 = *(void *)(a1 + 32);
  double v8 = *(void **)(v7 + 240);
  *(void *)(v7 + 240) = v2;
}

void sub_100087CC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 19))
  {
    *(_BYTE *)(v1 + 19) = 1;
    uint64_t v3 = objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    uint64_t v4 = *(void *)(a1 + 32);
    double v5 = *(void **)(v4 + 344);
    *(void *)(v4 + 344) = v3;

    *(double *)(*(void *)(a1 + 32) + 352) = (double)(unint64_t)[*(id *)(a1 + 40) hostTime];
    double v6 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void **)(a1 + 40);
      double v8 = v6;
      int v9 = 136315394;
      uint64_t v10 = "-[CSHybridEndpointAnalyzer processAudioSamplesAsynchronously:]_block_invoke";
      __int16 v11 = 2050;
      id v12 = [v7 hostTime];
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s first audio buffer host time: %{public}llu",  (uint8_t *)&v9,  0x16u);
    }
  }

uint64_t sub_100087DD4(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 312LL);
  return result;
}

void sub_100087DE8(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(a1 + 32) + 20LL))
  {
    uint64_t v1 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      double v20 = "-[CSHybridEndpointAnalyzer processAudioSamplesAsynchronously:]_block_invoke_2";
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "%s HEP::RecordingDidStop: Ignoring processAudioSamplesAsynchronously",  buf,  0xCu);
    }
  }

  else
  {
    uint64_t v3 = qword_10027FE40;
    if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * qword_10027FE40, 1) <= 0x888888888888888uLL)
    {
      kdebug_trace(722472228LL, 0LL, 0LL, 0LL, 0LL);
      uint64_t v3 = qword_10027FE40;
    }

    qword_10027FE40 = v3 + 1;
    uint64_t v4 = (uint64_t)[*(id *)(a1 + 40) numSamples];
    *(void *)(*(void *)(a1 + 32) + 144LL) = *(void *)(*(void *)(a1 + 32) + 136LL);
    *(void *)(*(void *)(a1 + 32) + 152) = [*(id *)(a1 + 40) hostTime];
    *(_BYTE *)(*(void *)(a1 + 32) + 1+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7, 0) = [*(id *)(a1 + 40) wasBuffered];
    if (v4 >= 1)
    {
      uint64_t v6 = 0LL;
      *(void *)&__int128 v5 = 136315394LL;
      __int128 v18 = v5;
      do
      {
        if (v4 >= 640) {
          uint64_t v7 = 640LL;
        }
        else {
          uint64_t v7 = v4;
        }
        uint64_t v8 = *(void *)(a1 + 32);
        unint64_t v9 = *(void *)(v8 + 136);
        if (v9 >= *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
        {
          if (!*(_BYTE *)(v8 + 12))
          {
            *(_BYTE *)(v8 + 12) = 1;
            uint64_t v10 = (os_log_s *)CSLogContextFacilityCoreSpeech;
            if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 136LL);
              *(_DWORD *)__int128 buf = v18;
              double v20 = "-[CSHybridEndpointAnalyzer processAudioSamplesAsynchronously:]_block_invoke";
              __int16 v21 = 2050;
              uint64_t v22 = v11;
              _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s addAudio first sample offset: %{public}lu",  buf,  0x16u);
            }

            uint64_t v8 = *(void *)(a1 + 32);
          }

          id v12 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 40),  "subChunkFrom:numSamples:forChannel:",  v6,  v7,  *(void *)(v8 + 48),  v18));
          double v13 = (void *)objc_claimAutoreleasedReturnValue([v12 data]);
          if (+[CSConfig inputRecordingIsFloat](&OBJC_CLASS___CSConfig, "inputRecordingIsFloat"))
          {
            uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 data]);
            uint64_t v15 = objc_claimAutoreleasedReturnValue( +[CSFLPCMTypeConverter convertToShortLPCMBufFromFloatLPCMBuf:]( &OBJC_CLASS___CSFLPCMTypeConverter,  "convertToShortLPCMBufFromFloatLPCMBuf:",  v14));

            double v13 = (void *)v15;
          }

          objc_msgSend( *(id *)(*(void *)(a1 + 32) + 160),  "addAudio:numSamples:",  v13,  objc_msgSend(v12, "numSamples"));

          uint64_t v8 = *(void *)(a1 + 32);
          unint64_t v9 = *(void *)(v8 + 136);
        }

        v6 += v7;
        *(void *)(v8 + 136) = v9 + v7;
        BOOL v16 = v4 <= v7;
        v4 -= v7;
      }

      while (!v16);
    }

    uint64_t v17 = qword_10027FE48;
    if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * qword_10027FE48, 1) <= 0x888888888888888uLL)
    {
      kdebug_trace(722472232LL, 0LL, 0LL, 0LL, 0LL);
      uint64_t v17 = qword_10027FE48;
    }

    qword_10027FE48 = v17 + 1;
  }

id sub_10008810C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _loadAndSetupEndpointerAssetIfNecessary];
}

id sub_100088114(uint64_t a1)
{
  return [*(id *)(a1 + 32) _loadAndSetupEndpointerAssetIfNecessary];
}

void sub_1000894F8(void *a1)
{
  uint64_t v2 = *(void **)(a1[4] + 8LL);
  if (v2
    && (uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:a1[5]]), v3, v3))
  {
    id v9 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 8) objectForKey:a1[5]]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[CSAudioInjectionProvider defaultInjectionProvider]( &OBJC_CLASS___CSAudioInjectionProvider,  "defaultInjectionProvider"));
    [v4 disconnectDevice:v9];

    uint64_t v5 = a1[6];
    if (v5) {
      (*(void (**)(uint64_t, uint64_t, void))(v5 + 16))(v5, 1LL, 0LL);
    }
  }

  else
  {
    uint64_t v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[5];
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v11 = "-[CSAudioInjectionXPC disconnectDeviceWithUUID:completion:]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s deviceUUID %@ not existing in deviceDictionary, already disconnected",  buf,  0x16u);
    }

    uint64_t v8 = a1[6];
    if (v8) {
      (*(void (**)(uint64_t, uint64_t, void))(v8 + 16))(v8, 1LL, 0LL);
    }
  }

void sub_100089664(void *a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 8) objectForKey:a1[5]]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[CSAudioInjectionProvider defaultInjectionProvider]( &OBJC_CLASS___CSAudioInjectionProvider,  "defaultInjectionProvider"));
  [v2 connectDevice:v4];

  uint64_t v3 = a1[6];
  if (v3) {
    (*(void (**)(uint64_t, uint64_t, void))(v3 + 16))(v3, 1LL, 0LL);
  }
}

void sub_1000896D8(uint64_t a1)
{
  unsigned int v2 = +[CSUtils isExclaveHardware](&OBJC_CLASS___CSUtils, "isExclaveHardware");
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2)
  {
    [*(id *)(v3 + 24) speakAudioInExclave:*(void *)(a1 + 40) withCompletion:*(void *)(a1 + 64)];
  }

  else
  {
    id v4 = *(void **)(v3 + 8);
    if (v4
      && (uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:*(void *)(a1 + 48)]),
          v5,
          v5))
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 48)]);
      *(void *)__int128 buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      uint64_t v23 = 0LL;
      uint64_t v7 = *(void *)(a1 + 40);
      int v8 = *(_DWORD *)(a1 + 72);
      id v9 = *(void **)(a1 + 32);
      if (v9)
      {
        [v9 _outASBDWithNumChannels:*(unsigned int *)(a1 + 76)];
      }

      else
      {
        uint64_t v21 = 0LL;
        memset(v20, 0, sizeof(v20));
      }

      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472LL;
      void v19[2] = sub_100089994;
      v19[3] = &unk_10022BBE8;
      v19[4] = buf;
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472LL;
      void v16[2] = sub_1000899A4;
      v16[3] = &unk_10022BC10;
      __int128 v18 = buf;
      uint64_t v13 = *(void *)(a1 + 56);
      id v17 = *(id *)(a1 + 64);
      LODWORD(v14) = v8;
      [v6 speakAudio:v7 withScaleFactor:v20 outASBD:v19 playbackStarted:v13 userIntentOptions:v16 completion:v14];

      _Block_object_dispose(buf, 8);
    }

    else
    {
      uint64_t v10 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 136315394;
        *(void *)&uint8_t buf[4] = "-[CSAudioInjectionXPC injectAudio:toDeviceWithUUID:withScaleFactor:withNumChannels:withUser"
                             "IntentOptions:completion:]_block_invoke";
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v15;
        _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Can't find device with uuid %@",  buf,  0x16u);
      }

      uint64_t v11 = *(void *)(a1 + 64);
      if (v11)
      {
        __int16 v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  114LL,  0LL));
        (*(void (**)(uint64_t, void, void *, void, void))(v11 + 16))(v11, 0LL, v12, 0LL, 0LL);
      }
    }
  }

void sub_100089974(_Unwind_Exception *a1)
{
}

uint64_t sub_100089994(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = a2;
  return result;
}

uint64_t sub_1000899A4(uint64_t a1, uint64_t a2)
{
  id v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    int v7 = 136315650;
    int v8 = "-[CSAudioInjectionXPC injectAudio:toDeviceWithUUID:withScaleFactor:withNumChannels:withUserIntentOptions:comple"
         "tion:]_block_invoke_2";
    __int16 v9 = 2048;
    uint64_t v10 = v5;
    __int16 v11 = 2048;
    uint64_t v12 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Device speak audio with startTime = %llu, stopTime = %llu",  (uint8_t *)&v7,  0x20u);
  }

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t))(result + 16))( result,  1LL,  0LL,  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL),  a2);
  }
  return result;
}

void sub_100089AA0(uint64_t a1)
{
  unsigned int v2 = *(void **)(*(void *)(a1 + 32) + 8LL);
  if (v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:*(void *)(a1 + 40)]);

    if (v3)
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 40)]);
      *(void *)__int128 buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      uint64_t v16 = 0LL;
      int v5 = *(_DWORD *)(a1 + 64);
      uint64_t v13 = buf;
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      id v14[2] = sub_100089CBC;
      v14[3] = &unk_10022BBE8;
      v14[4] = buf;
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      v11[2] = sub_100089CCC;
      void v11[3] = &unk_10022BC10;
      uint64_t v6 = *(void *)(a1 + 48);
      id v12 = *(id *)(a1 + 56);
      LODWORD(v7) = v5;
      [v4 speakAudio:v6 withScaleFactor:v14 playbackStarted:v11 completion:v7];

      _Block_object_dispose(buf, 8);
LABEL_8:

      return;
    }
  }

  int v8 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 136315394;
    *(void *)&uint8_t buf[4] = "-[CSAudioInjectionXPC injectAudio:toDeviceWithUUID:withScaleFactor:completion:]_block_invoke";
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v10;
    _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Can't find device with uuid %@",  buf,  0x16u);
  }

  uint64_t v9 = *(void *)(a1 + 56);
  if (v9)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  114LL,  0LL));
    (*(void (**)(uint64_t, void, void *, void, void))(v9 + 16))(v9, 0LL, v4, 0LL, 0LL);
    goto LABEL_8;
  }

void sub_100089C9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_100089CBC(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = a2;
  return result;
}

uint64_t sub_100089CCC(uint64_t a1, uint64_t a2)
{
  id v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    int v7 = 136315650;
    int v8 = "-[CSAudioInjectionXPC injectAudio:toDeviceWithUUID:withScaleFactor:completion:]_block_invoke_2";
    __int16 v9 = 2048;
    uint64_t v10 = v5;
    __int16 v11 = 2048;
    uint64_t v12 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Device speak audio with startTime = %llu, stopTime = %llu",  (uint8_t *)&v7,  0x20u);
  }

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t))(result + 16))( result,  1LL,  0LL,  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL),  a2);
  }
  return result;
}

void sub_100089DC8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  unsigned int v2 = *(void **)(*(void *)(a1 + 32) + 8LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue([v1 deviceUID]);
  [v2 setObject:v1 forKey:v3];
}

void sub_10008A134(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008A364(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_10008A698( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_10008A9B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24)
{
  _Unwind_Resume(a1);
}

void sub_10008ABB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008ACF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008ADA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008AE48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008B200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008B56C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10008BDF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008C18C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008C520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008C640(void **a1, void *a2)
{
  unsigned int v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    id v3 = (vDSP_biquadm_SetupStruct *)*((void *)v2 + 19);
    if (v3) {
      vDSP_biquadm_DestroySetup(v3);
    }
    uint64_t v4 = (void *)*((void *)v2 + 20);
    if (v4)
    {
      *((void *)v2 + 21) = v4;
      operator delete(v4);
    }

    uint64_t v5 = (void *)*((void *)v2 + 9);
    if (v5)
    {
      *((void *)v2 + 10) = v5;
      operator delete(v5);
    }

    uint64_t v6 = (void *)*((void *)v2 + 6);
    if (v6)
    {
      *((void *)v2 + 7) = v6;
      operator delete(v6);
    }

    int v7 = (void *)*((void *)v2 + 3);
    if (v7)
    {
      *((void *)v2 + 4) = v7;
      operator delete(v7);
    }

    int v8 = *(void **)v2;
    if (*(void *)v2)
    {
      *((void *)v2 + 1) = v8;
      operator delete(v8);
    }

    operator delete(v2);
  }

void sub_10008C6D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 100))
  {
    *(_BYTE *)(v1 + 100) = 0;
    id v3 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[CSSmartSiriVolume siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolume dismiss alarm firing as Siri client is recording.",  (uint8_t *)&v5,  0xCu);
    }

    uint64_t v1 = *(void *)(a1 + 32);
  }

  if (*(_BYTE *)(v1 + 101))
  {
    *(_BYTE *)(v1 + 101) = 0;
    uint64_t v4 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[CSSmartSiriVolume siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolume dismiss timer firing as Siri client is recording.",  (uint8_t *)&v5,  0xCu);
    }
  }

void sub_10008C7F4(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) enablePolicy]);
  unsigned int v3 = [v2 isEnabled];

  if (v3) {
    [*(id *)(a1 + 32) _startListenPolling];
  }
}

void sub_10008C84C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float sub_10008C85C(uint64_t a1)
{
  float result = *(float *)(a1 + 40);
  *(float *)(*(void *)(a1 + 32) + 116LL) = result;
  return result;
}

id sub_10008C86C(uint64_t a1, double a2)
{
  LODWORD(a2) = *(_DWORD *)(a1 + 40);
  id result = [*(id *)(a1 + 32) _getDevicedBFSForInputLinearVolume:a2];
  *(_DWORD *)(*(void *)(a1 + 32) + 112LL) = v4;
  return result;
}

void sub_10008C89C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = v1 == 1;
    if (*(unsigned __int8 *)(v3 + 101) != v4)
    {
      *(_BYTE *)(v3 + 101) = v4;
      int v5 = (os_log_s *)CSLogCategoryASV;
      if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
      {
        if (*(_BYTE *)(*(void *)(a1 + 32) + 101LL)) {
          uint64_t v6 = @"YES";
        }
        else {
          uint64_t v6 = @"NO";
        }
        int v9 = 136315394;
        uint64_t v10 = "-[CSSmartSiriVolume didReceiveTimerChanged:]_block_invoke";
        __int16 v11 = 2112;
        uint64_t v12 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolume: timer firing status = %@ according to MobileTimer notification.",  (uint8_t *)&v9,  0x16u);
      }
    }
  }

  else
  {
    int v7 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315138;
      uint64_t v10 = "-[CSSmartSiriVolume didReceiveTimerChanged:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s SmartSiriVolume received unknown timer state, let's reset timer state.",  (uint8_t *)&v9,  0xCu);
    }

    int v8 = (void *)objc_claimAutoreleasedReturnValue(+[CSTimerMonitor sharedInstance](&OBJC_CLASS___CSTimerMonitor, "sharedInstance"));
    [v8 initializeTimerState];
  }

void sub_10008CA10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008CA28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = v1 == 1;
    if (*(unsigned __int8 *)(v3 + 100) != v4)
    {
      *(_BYTE *)(v3 + 100) = v4;
      int v5 = (os_log_s *)CSLogCategoryASV;
      if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
      {
        if (*(_BYTE *)(*(void *)(a1 + 32) + 100LL)) {
          uint64_t v6 = @"YES";
        }
        else {
          uint64_t v6 = @"NO";
        }
        int v9 = 136315394;
        uint64_t v10 = "-[CSSmartSiriVolume didReceiveAlarmChanged:]_block_invoke";
        __int16 v11 = 2112;
        uint64_t v12 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolume: alarm firing status = %@ according to MobileTimer notification.",  (uint8_t *)&v9,  0x16u);
      }
    }
  }

  else
  {
    int v7 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315138;
      uint64_t v10 = "-[CSSmartSiriVolume didReceiveAlarmChanged:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s SmartSiriVolume received unknown alarm state, let's reset alarm state.",  (uint8_t *)&v9,  0xCu);
    }

    int v8 = (void *)objc_claimAutoreleasedReturnValue(+[CSAlarmMonitor sharedInstance](&OBJC_CLASS___CSAlarmMonitor, "sharedInstance"));
    [v8 initializeAlarmState];
  }

void sub_10008CB9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008CBB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if ((unint64_t)(v2 - 1) > 1)
  {
    int v7 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315138;
      int v9 = "-[CSSmartSiriVolume CSMediaPlayingMonitor:didReceiveMediaPlayingChanged:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s SmartSiriVolume received unknown media playing state, let's assume media is playing.",  (uint8_t *)&v8,  0xCu);
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 99LL) = 0;
    *(_BYTE *)(*(void *)(a1 + 32) + 102LL) = 1;
  }

  else
  {
    *(_BYTE *)(*(void *)(a1 + 32) + 99LL) = v2 == 2;
    *(_BYTE *)(*(void *)(a1 + 32) + 102LL) = v2 == 1;
    int v3 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 99LL);
    int v4 = (os_log_s *)CSLogCategoryASV;
    BOOL v5 = os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (!v5) {
        return;
      }
      int v8 = 136315138;
      int v9 = "-[CSSmartSiriVolume CSMediaPlayingMonitor:didReceiveMediaPlayingChanged:]_block_invoke";
      uint64_t v6 = "%s SmartSiriVolume: pause LKFS calculation according to MediaRemote notification.";
    }

    else
    {
      if (!v5) {
        return;
      }
      int v8 = 136315138;
      int v9 = "-[CSSmartSiriVolume CSMediaPlayingMonitor:didReceiveMediaPlayingChanged:]_block_invoke";
      uint64_t v6 = "%s SmartSiriVolume: resume LKFS calculation according to MediaRemote notification.";
    }

    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v8, 0xCu);
  }

void sub_10008CD3C(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  int v9 = *(_DWORD **)(a1 + 32);
  LODWORD(a2) = *(_DWORD *)(a1 + 64);
  LODWORD(a5) = v9[44];
  LODWORD(a6) = v9[45];
  LODWORD(a7) = v9[46];
  LODWORD(a_Block_object_dispose(va, 8) = v9[47];
  LODWORD(a4) = 1119092736;
  LODWORD(a3) = 20.0;
  [v9 _estimatedTTSVolume:a2 lowerLimit:a3 upperLimit:a4 TTSmappingInputRangeLow:a5 TTSmappingInputRangeHigh:a6 TTSmappingOutputRangeLow:a7  TTSmappingOutputRangeHigh:a8];
  int v17 = LODWORD(v10);
  uint64_t v18 = *(void *)(a1 + 32);
  int v19 = *(_DWORD *)(v18 + 200);
  if (!*(_BYTE *)(v18 + 99))
  {
    LODWORD(v10) = *(_DWORD *)(a1 + 68);
    LODWORD(v13) = *(_DWORD *)(v18 + 192);
    LODWORD(v14) = *(_DWORD *)(v18 + 196);
    LODWORD(v16) = *(_DWORD *)(v18 + 204);
    LODWORD(v11) = -1037434880;
    LODWORD(v12) = 1104936960;
    LODWORD(v15) = *(_DWORD *)(v18 + 200);
    [(id)v18 _estimatedTTSVolume:v10 lowerLimit:v11 upperLimit:v12 TTSmappingInputRangeLow:v13 TTSmappingInputRangeHigh:v14 TTSmappingOutputRangeLo w:v15 TTSmappingOutputRangeHigh:v16];
    int v19 = v20;
  }

  unint64_t v21 = +[CSAsset getSSVDeviceType](&OBJC_CLASS___CSAsset, "getSSVDeviceType");
  double v28 = *(_DWORD **)(a1 + 32);
  LODWORD(v29) = v28[28];
  if (v21 == 2) {
    [v28 _getUserOffsetFromMusicVolumeDB:v29];
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = LODWORD(v29);
  double v30 = *(_DWORD **)(a1 + 32);
  LODWORD(v29) = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  LODWORD(v24) = v30[52];
  LODWORD(v25) = v30[53];
  LODWORD(v26) = v30[54];
  LODWORD(v27) = v30[55];
  LODWORD(v22) = -1032847360;
  LODWORD(v23) = 0;
  [v30 _estimatedTTSVolume:v29 lowerLimit:v22 upperLimit:v23 TTSmappingInputRangeLow:v24 TTSmappingInputRangeHigh:v25 TTSmappingOutputRangeLow:v26  TTSmappingOutputRangeHigh:v27];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v31;
  LODWORD(v32) = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  LODWORD(v33) = v17;
  LODWORD(v34) = v19;
  [*(id *)(a1 + 32) _combineResultsWithOptimalFromNoise:v33 andOptimalFromLkfs:v34 withUserOffset:v32];
  uint64_t v36 = *(void *)(a1 + 32);
  else {
    float v37 = v35;
  }
  uint64_t v38 = (os_log_s *)CSLogCategoryASV;
  if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315394;
    id v67 = "-[CSSmartSiriVolume estimatedTTSVolumeForNoiseLevelAndLKFS:LKFS:]_block_invoke";
    __int16 v68 = 2050;
    double v69 = v37;
    _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolume: final estimated TTS volume in dB %{public}f",  buf,  0x16u);
  }

  if ((id)+[CSAsset getSSVDeviceType](&OBJC_CLASS___CSAsset, "getSSVDeviceType") == (id)2)
  {
    *(float *)&double v39 = v37;
    [*(id *)(a1 + 32) _getDeviceSimpleOutputLinearVolumeFordBFSValue:v39];
  }

  else
  {
    if (v37 <= -30.0)
    {
      LODWORD(v40) = -1032847360;
      LODWORD(v43) = 1045220557;
      LODWORD(v41) = -30.0;
      LODWORD(v42) = 0;
    }

    else
    {
      LODWORD(v42) = 1045220557;
      LODWORD(v40) = -30.0;
      LODWORD(v41) = 0;
      LODWORD(v43) = 1.0;
    }

    *(float *)&double v39 = v37;
    [*(id *)(a1 + 32) _scaleInputWithInRangeOutRange:v39 minIn:v40 maxIn:v41 minOut:v42 maxOut:v43];
  }

  *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = LODWORD(v44);
  uint64_t v45 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v45 + 100) || *(_BYTE *)(v45 + 101))
  {
    double v46 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v67 = "-[CSSmartSiriVolume estimatedTTSVolumeForNoiseLevelAndLKFS:LKFS:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolume: adjust TTS volume since alarm/timer is firing.",  buf,  0xCu);
      uint64_t v45 = *(void *)(a1 + 32);
    }

    float v47 = *(float *)(v45 + 116);
    uint64_t v48 = *(void *)(*(void *)(a1 + 56) + 8LL);
    *(float *)(v48 + 24) = v47;
  }

  v64[0] = @"noiseLevelDB";
  LODWORD(v44) = *(_DWORD *)(a1 + 64);
  double v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v44));
  v65[0] = v49;
  v64[1] = @"musicLevelDB";
  LODWORD(v50) = *(_DWORD *)(a1 + 68);
  double v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v50));
  v65[1] = v51;
  v64[2] = @"musicPlaybackVolumeDB";
  LODWORD(v52) = *(_DWORD *)(*(void *)(a1 + 32) + 112LL);
  double v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v52));
  v65[2] = v53;
  v64[3] = @"alarmVolume";
  LODWORD(v54) = *(_DWORD *)(*(void *)(a1 + 32) + 116LL);
  double v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v54));
  v65[3] = v55;
  v64[4] = @"finalTTSVolume";
  LODWORD(v56) = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
  double v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v56));
  v65[4] = v57;
  v64[5] = @"isMediaPlaying";
  double v58 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 102LL)));
  v65[5] = v58;
  v64[6] = @"isAlarmPlaying";
  double v59 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 100LL)));
  v65[6] = v59;
  v64[7] = @"isTimerPlaying";
  id v60 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 101LL)));
  v65[7] = v60;
  v64[8] = @"isLKFSProcessPaused";
  uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1 + 32) + 99LL)));
  v65[8] = v61;
  __int16 v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v65,  v64,  9LL));

  uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
  [v63 logEventWithType:4702 context:v62];
}

void sub_10008D1E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_10008D270(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void *)(v3 + 72);
    uint64_t v5 = *(void *)(v3 + 80);
    uint64_t v6 = kVTEItriggerStartSampleCount;
    int v7 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:kVTEItriggerStartSampleCount]);
    unint64_t v8 = v5 + v4 - (void)[v7 unsignedIntegerValue];

    if (v8 >= *(void *)(*(void *)(a1 + 40) + 88LL)) {
      unint64_t v8 = *(void *)(*(void *)(a1 + 40) + 88LL);
    }
    int v9 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v12 = *(void *)(v10 + 72);
      uint64_t v11 = *(void *)(v10 + 80);
      double v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v6]);
      int v19 = 136316162;
      int v20 = "-[CSSmartSiriVolume didDetectKeywordWithResult:]_block_invoke";
      __int16 v21 = 2050;
      uint64_t v22 = v8;
      __int16 v23 = 2050;
      uint64_t v24 = v12;
      __int16 v25 = 2050;
      uint64_t v26 = v11;
      __int16 v27 = 2050;
      id v28 = [v13 unsignedIntegerValue];
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolume remove samples from VT utterances by %{public}llu, with startAnalyzeSampleCount = %{public}ll u, samplesFed = %{public}llu, triggerStartSampleCount = %{public}llu",  (uint8_t *)&v19,  0x34u);
    }

    if (v8 > 0x17700)
    {
      double v14 = (os_log_s *)CSLogCategoryASV;
      if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_ERROR))
      {
        int v19 = 136315394;
        int v20 = "-[CSSmartSiriVolume didDetectKeywordWithResult:]_block_invoke";
        __int16 v21 = 2050;
        uint64_t v22 = 96000LL;
        _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s SmartSiriVolume trying to delete too many VT samples, set triggerDurationToDelete to be limited max: %{public}llu",  (uint8_t *)&v19,  0x16u);
      }

      unint64_t v8 = 96000LL;
    }

    sub_10008D594(*(void *)(*(void *)(a1 + 40) + 16LL), 0LL, v8);
  }

  else
  {
    double v15 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315138;
      int v20 = "-[CSSmartSiriVolume didDetectKeywordWithResult:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%s SmartSiriVolume got empty VT event!",  (uint8_t *)&v19,  0xCu);
    }
  }

  uint64_t v16 = *(void *)(a1 + 40);
  if (*(_BYTE *)(v16 + 100))
  {
    *(_BYTE *)(v16 + 100) = 0;
    int v17 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 136315138;
      int v20 = "-[CSSmartSiriVolume didDetectKeywordWithResult:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolume dismiss alarm firing as VoiceTrigger detected.",  (uint8_t *)&v19,  0xCu);
    }

    uint64_t v16 = *(void *)(a1 + 40);
  }

  if (*(_BYTE *)(v16 + 101))
  {
    *(_BYTE *)(v16 + 101) = 0;
    uint64_t v18 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 136315138;
      int v20 = "-[CSSmartSiriVolume didDetectKeywordWithResult:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolume dismiss timer firing as VoiceTrigger detected.",  (uint8_t *)&v19,  0xCu);
    }
  }

void sub_10008D56C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008D594(uint64_t a1, unint64_t a2, unint64_t a3)
{
  float v4 = (float)*(unsigned int *)(a1 + 100);
  unint64_t v5 = (unint64_t)(float)((float)a3 / v4);
  if (!v5)
  {
    unint64_t v8 = (uint64_t)(*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 3;
LABEL_17:
    if (v8 < v5)
    {
      uint64_t v16 = (os_log_s *)CSLogCategoryASV;
      if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_ERROR))
      {
        int v18 = 136315138;
        int v19 = "removeVoiceTriggerSamples";
        _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s SmartSiriVolume: number of elements to delete exceeds energy buffer size, ignore.",  (uint8_t *)&v18,  0xCu);
      }

      unint64_t v5 = 0LL;
    }

    goto LABEL_24;
  }

  uint64_t v6 = *(void *)(a1 + 160);
  uint64_t v7 = *(void *)(a1 + 168);
  unint64_t v8 = (v7 - v6) >> 3;
  if (v8 < v5) {
    goto LABEL_17;
  }
  if (v7 != v6)
  {
    uint64_t v9 = 0LL;
    int v10 = 0;
    unsigned int v11 = 0;
    unint64_t v12 = (unint64_t)(float)((float)((float)*(unsigned int *)(a1 + 112) - (float)((float)a2 / v4))
    unint64_t v13 = v12 - v5;
    while (1)
    {
      unint64_t v14 = *(unsigned int *)(v6 + 8 * v9 + 4);
      if (v12 >= v5)
      {
        if (v12 < v14 || v13 >= v14) {
          goto LABEL_14;
        }
      }

      else if (v12 < v14 && v13 + *(unsigned int *)(a1 + 108) >= v14)
      {
        goto LABEL_14;
      }

      sub_10008D7D8(a1 + 160, (char *)(v6 + 8 * v9), (char *)(v6 + 8 * v9 + 8));
      ++v10;
      --v11;
      uint64_t v6 = *(void *)(a1 + 160);
      uint64_t v7 = *(void *)(a1 + 168);
LABEL_14:
      uint64_t v9 = ++v11;
    }
  }

  int v10 = 0;
LABEL_22:
  int v17 = (os_log_s *)CSLogCategoryASV;
  if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = 136315394;
    int v19 = "removeVoiceTriggerSamples";
    __int16 v20 = 1026;
    int v21 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolume: deleted %{public}u elements in energy buffer.",  (uint8_t *)&v18,  0x12u);
  }

uint64_t sub_10008D7D8(uint64_t result, char *a2, char *a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = *(char **)(result + 8);
    if (a3 != v3)
    {
      uint64_t v4 = 8 * ((a3 - a2) >> 3);
      do
      {
        *(_DWORD *)a2 = *(_DWORD *)&a2[v4];
        *((_DWORD *)a2 + 1) = *(_DWORD *)&a2[v4 + 4];
        a2 += 8;
      }

      while (&a2[v4] != v3);
    }

    *(void *)(result + _Block_object_dispose(va, 8) = a2;
  }

  return result;
}

void sub_10008D828(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) enablePolicy]);
  unsigned int v3 = [v2 isEnabled];

  if (v3) {
    [*(id *)(a1 + 32) _startListenPolling];
  }
}

void sub_10008D880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008D890(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) enablePolicy]);
  unsigned __int8 v3 = [v2 isEnabled];

  if ((v3 & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "_setStartAnalyzeTime:", objc_msgSend(*(id *)(a1 + 40), "startSampleCount"));
    *(void *)(*(void *)(a1 + 32) + 80) += [*(id *)(a1 + 40) numSamples];
    if (!*(_BYTE *)(*(void *)(a1 + 32) + 98LL))
    {
      uint64_t v4 = [*(id *)(a1 + 40) numSamples];
      *(void *)(*(void *)(a1 + 32) + 88) += [*(id *)(a1 + 40) numSamples];
      if (v4)
      {
        uint64_t v5 = 0LL;
        do
        {
          uint64_t v6 = objc_autoreleasePoolPush();
          else {
            uint64_t v7 = (uint64_t)v4;
          }
          unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) subChunkFrom:v5 numSamples:v7]);
          uint64_t v9 = (uint64_t)[v8 numSamples];
          id v10 = [v8 numSamples];
          [*(id *)(a1 + 32) _processAudioChunk:v8 soundType:0];
          unsigned int v11 = *(_BYTE **)(a1 + 32);
          if (!v11[99]) {
            [v11 _processAudioChunk:v8 soundType:1];
          }
          v4 -= v9;
          v5 += (uint64_t)v10;

          objc_autoreleasePoolPop(v6);
        }

        while (v4);
      }
    }
  }

  else
  {
    uint64_t v12 = qword_10027FE70;
    if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * qword_10027FE70, 1) <= 0x1999999999999999uLL)
    {
      unint64_t v13 = (os_log_s *)CSLogCategoryASV;
      if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_ERROR))
      {
        int v14 = 136315394;
        double v15 = "-[CSSmartSiriVolume audioStreamProvider:audioBufferAvailable:]_block_invoke";
        __int16 v16 = 2050;
        uint64_t v17 = v12;
        _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%s Siri is disabled, we shouldn't receive audio here, heartbeat = %{public}lld",  (uint8_t *)&v14,  0x16u);
        uint64_t v12 = qword_10027FE70;
      }
    }

    qword_10027FE70 = v12 + 1;
  }

void sub_10008DA98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10008DAB4(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 98LL) = 0;
  sub_10008DAF4(*(void *)(*(void *)(a1 + 32) + 16LL));
  *(float *)&double v2 = sub_10008DAF4(*(void *)(*(void *)(a1 + 32) + 24LL));
  return objc_msgSend(*(id *)(a1 + 32), "_resetStartAnalyzeTime", v2);
}

float sub_10008DAF4(uint64_t a1)
{
  *(_DWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  double v2 = *(void **)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56) - (void)v2;
  if (v3 >= 1) {
    bzero(v2, 4 * (((unint64_t)v3 >> 2) - ((unint64_t)v3 > 3)) + 4);
  }
  uint64_t v5 = *(vDSP_biquadm_SetupStruct **)(a1 + 152);
  if (v5) {
    vDSP_biquadm_ResetState(v5);
  }
  uint64_t v6 = *(void *)(a1 + 160);
  unint64_t v7 = *(void *)(a1 + 168) - v6;
  if ((v7 & 0x7FFFFFFF8LL) != 0)
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = (v7 >> 3);
    id v10 = (float *)(v6 + 4);
    do
    {
      float result = *(float *)(a1 + 124);
      *(v10 - 1) = result;
      *(_DWORD *)id v10 = v8;
      v10 += 2;
      ++v8;
    }

    while (v9 != v8);
  }

  return result;
}

void *sub_10008DB88(void *result)
{
  uint64_t v1 = result[4];
  if (*(_BYTE *)(v1 + 98))
  {
    double v2 = result;
    uint64_t v3 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      uint64_t v5 = "-[CSSmartSiriVolume _resumeSSVProcessing]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolume: resume SSV calculation.",  (uint8_t *)&v4,  0xCu);
      uint64_t v1 = v2[4];
    }

    *(_BYTE *)(v1 + 9_Block_object_dispose(va, 8) = 0;
    return [(id)v2[4] _resetStartAnalyzeTime];
  }

  return result;
}

void sub_10008DC54(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 98))
  {
    uint64_t v3 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      uint64_t v5 = "-[CSSmartSiriVolume _pauseSSVProcessing]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolume: pause SSV calculation.",  (uint8_t *)&v4,  0xCu);
      uint64_t v1 = *(void *)(a1 + 32);
    }

    *(_BYTE *)(v1 + 9_Block_object_dispose(va, 8) = 1;
    *(void *)(*(void *)(a1 + 32) + 88LL) = 0LL;
  }

void sub_10008DD24(void *a1)
{
  uint64_t v2 = a1[6];
  if (!v2)
  {
    uint64_t v6 = *(void *)(a1[4] + 16LL);
    if (!v6) {
      return;
    }
    *(float *)(*(void *)(a1[5] + 8LL) + 24LL) = sub_10008DEB0(v6);
    unint64_t v7 = (os_log_s *)CSLogCategoryASV;
    if (!os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    double v8 = *(float *)(*(void *)(a1[5] + 8LL) + 24LL);
    int v9 = 136315394;
    id v10 = "-[CSSmartSiriVolume estimateSoundLevelbySoundType:]_block_invoke";
    __int16 v11 = 2050;
    double v12 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolume: estimated noise level %{public}f",  (uint8_t *)&v9,  0x16u);
    uint64_t v2 = a1[6];
  }

  if (v2 == 1)
  {
    uint64_t v3 = *(void *)(a1[4] + 24LL);
    if (v3)
    {
      *(float *)(*(void *)(a1[5] + 8LL) + 24LL) = sub_10008DEB0(v3);
      int v4 = (os_log_s *)CSLogCategoryASV;
      if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
      {
        double v5 = *(float *)(*(void *)(a1[5] + 8LL) + 24LL);
        int v9 = 136315394;
        id v10 = "-[CSSmartSiriVolume estimateSoundLevelbySoundType:]_block_invoke";
        __int16 v11 = 2050;
        double v12 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolume: estimated LKFS %{public}f",  (uint8_t *)&v9,  0x16u);
      }
    }
  }

float sub_10008DEB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 160);
  uint64_t v2 = *(void *)(a1 + 168);
  if (v1 == v2) {
    return -1000.0;
  }
  unint64_t v3 = v2 - v1;
  unint64_t v4 = v3 >> 3;
  unsigned int v5 = *(_DWORD *)(a1 + 132) * (v3 >> 3) / 0x64;
  unsigned int v6 = (v3 >> 3) - 1;
  if (v5 >= v6) {
    unsigned int v5 = (v3 >> 3) - 1;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 136) * (int)v4 / 0x64u;
  if (v7 >= v6) {
    unsigned int v7 = (v3 >> 3) - 1;
  }
  if ((_DWORD)v4)
  {
    float v8 = *(float *)(v1 + 8LL * v5);
    float v9 = *(float *)(v1 + 8LL * v7);
    id v10 = (float *)(v1 + 4);
    float v11 = 0.0;
    float v12 = 0.0;
    uint64_t v13 = (v3 >> 3);
    do
    {
      float v14 = *(v10 - 1);
      if (v14 >= v8 && v14 <= v9)
      {
        float v16 = *(float *)(*(void *)(a1 + 48)
                       + 4LL
        float v12 = v12 + (float)(v14 * v16);
        float v11 = v11 + v16;
      }

      v10 += 2;
      --v13;
    }

    while (v13);
  }

  else
  {
    float v12 = 0.0;
    float v11 = 0.0;
  }

  if (v11 <= 1.17549e-38) {
    return -1000.0;
  }
  else {
    return *(float *)(a1 + 140) + log10(fmax((float)(v12 / v11), 1.17549e-38)) * 20.0;
  }
}

void sub_10008DFD0(uint64_t a1, uint64_t a2)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataForChannel:a2]);
  unint64_t v3 = (unint64_t)[v7 length];
  unsigned int v4 = +[CSConfig inputRecordingSampleByteDepth](&OBJC_CLASS___CSConfig, "inputRecordingSampleByteDepth");
  id v5 = [*(id *)(a1 + 40) _getFloatBufferData:v7];
  unint64_t v6 = v3 / v4;
  if ((_DWORD)v6) {
    memmove( (void *)(*(void *)(*(void *)(a1 + 40) + 32LL)
  }
             + 4LL * *(unsigned int *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)),
      v5,
      4LL * v6);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) += v6;
}

void sub_10008E07C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10008E094(uint64_t a1)
{
  unint64_t v2 = (unint64_t)[*(id *)(a1 + 32) length];
  unint64_t v3 = v2
     / +[CSConfig inputRecordingSampleByteDepth](&OBJC_CLASS___CSConfig, "inputRecordingSampleByteDepth");
  id v4 = [*(id *)(a1 + 40) _getFloatBufferData:*(void *)(a1 + 32)];
  if ((_DWORD)v3) {
    memmove(*(void **)(*(void *)(a1 + 40) + 32LL), v4, 4LL * v3);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 48))
  {
    LODWORD(v5) = *(_DWORD *)(v6 + 112);
    [(id)v6 _convertDB2Mag:v5];
    sub_10008E1A4(*(void *)(*(void *)(a1 + 40) + 24LL), *(void *)(*(void *)(a1 + 40) + 32LL), v3);
    id v7 = *(uint64_t **)(*(void *)(a1 + 40) + 24LL);
    sub_10008E2B0(v7);
    sub_10008E428((uint64_t)v7, v8);
  }

  else
  {
    sub_10008E1A4(*(void *)(v6 + 16), *(void *)(v6 + 32), v3);
    float v9 = *(uint64_t **)(*(void *)(a1 + 40) + 16LL);
    sub_10008E2B0(v9);
    sub_10008E428((uint64_t)v9, v10);
    if (*(_BYTE *)(a1 + 72)) {
      sub_10008D594( *(void *)(*(void *)(a1 + 40) + 16LL),  *(void *)(a1 + 56),  *(void *)(a1 + 56) - *(void *)(a1 + 64));
    }
  }

void sub_10008E1A4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 96);
    *(_DWORD *)(a1 + 100) = a3 / v4;
    if (a3 / v4 <= *(_DWORD *)(a1 + 104))
    {
      if (v4)
      {
        unsigned int v6 = 0;
        do
        {
          int v7 = *(_DWORD *)(a1 + 100);
          unsigned int v8 = v7 * v6++;
          unsigned int v9 = v7 * v6;
          if (v9 != v8)
          {
            memmove((void *)(*(void *)a1 + 4LL * v8), (const void *)(a2 + 4LL * v8), 4LL * v9 - 4LL * v8);
            unsigned int v4 = *(_DWORD *)(a1 + 96);
          }
        }

        while (v6 < v4);
      }

      if (!*(_BYTE *)(a1 + 144))
      {
        float v10 = (float)*(unsigned int *)(a1 + 100) / (float)*(unsigned int *)(a1 + 116);
        unsigned int v11 = vcvtas_u32_f32(20.0 / v10);
        uint64_t v12 = *(unsigned int *)(a1 + 108);
        unsigned int v13 = (v12 - v11) & ~((int)(v12 - v11) >> 31);
        if (v13 < v12)
        {
          uint64_t v14 = v12 - v13;
          double v15 = (float *)(*(void *)(a1 + 48) + 4LL * v13);
          unsigned int v16 = ~v13 + v12;
          do
          {
            *v15++ = expf((float)-(float)((float)v16-- * v10) / *(float *)(a1 + 128));
            --v14;
          }

          while (v14);
        }

        *(_BYTE *)(a1 + 144) = 1;
      }
    }
  }

void sub_10008E2B0(uint64_t *a1)
{
  HIDWORD(v15) = 0;
  if (a1[19])
  {
    __chkstk_darwin();
    uint64_t v2 = __chkstk_darwin();
    unsigned int v6 = (float **)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFF0LL));
    vDSP_Length v7 = *(unsigned int *)(v2 + 100);
    if ((_DWORD)v4)
    {
      unsigned int v8 = 0;
      uint64_t v9 = *a1;
      uint64_t v10 = a1[3];
      unsigned int v11 = v3;
      uint64_t v12 = v6;
      do
      {
        *v11++ = (const float *)(v9 + 4LL * v8);
        *v12++ = (float *)(v10 + 4LL * v8);
        v8 += v7;
        --v4;
      }

      while (v4);
    }

    vDSP_biquadm((vDSP_biquadm_Setup)a1[19], v3, 1LL, v6, 1LL, v7);
    if (*((_DWORD *)a1 + 24))
    {
      unint64_t v13 = 0LL;
      float v14 = 0.0;
      do
      {
        vDSP_rmsqv(v6[v13], 1LL, (float *)&v15 + 1, *((unsigned int *)a1 + 25));
        float v14 = v14 + *((float *)&v15 + 1);
        ++v13;
      }

      while (v13 < *((unsigned int *)a1 + 24));
    }
  }

void sub_10008E428(uint64_t a1, float a2)
{
  uint64_t v4 = *(void *)(a1 + 160);
  unint64_t v6 = *(void *)(a1 + 168);
  uint64_t v5 = (void **)(a1 + 160);
  uint64_t v7 = v6 - v4;
  if (((v6 - v4) & 0x7FFFFFFF8LL) != 0)
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = 4LL;
    while (*(_DWORD *)(v4 + v9) != *(_DWORD *)(a1 + 112))
    {
      ++v8;
      v9 += 8LL;
    }

    sub_10008D7D8(a1 + 160, (char *)(v4 + 8 * v8), (char *)(v4 + 8 * v8 + 8));
    uint64_t v4 = *(void *)(a1 + 160);
    unint64_t v6 = *(void *)(a1 + 168);
  }

LABEL_7:
  if (v4 == v6 || *(float *)(v4 + 8LL * ((v7 >> 3) - 1)) < a2)
  {
    unint64_t v10 = LODWORD(a2) | ((unint64_t)*(unsigned int *)(a1 + 112) << 32);
    unint64_t v11 = *(void *)(a1 + 176);
    if (v6 < v11)
    {
      *(void *)unint64_t v6 = v10;
      uint64_t v12 = (void *)(v6 + 8);
LABEL_38:
      *(void *)(a1 + 16_Block_object_dispose(va, 8) = v12;
      goto LABEL_39;
    }

    uint64_t v13 = (uint64_t)(v6 - v4) >> 3;
    if (!((unint64_t)(v13 + 1) >> 61))
    {
      uint64_t v14 = v11 - v4;
      uint64_t v15 = v14 >> 2;
      else {
        unint64_t v16 = v15;
      }
      if (v16) {
        unint64_t v16 = (unint64_t)sub_10001EC7C(v16);
      }
      else {
        uint64_t v17 = 0LL;
      }
      double v32 = (unint64_t *)(v16 + 8 * v13);
      unint64_t v33 = v16 + 8 * v17;
      *double v32 = v10;
      uint64_t v12 = v32 + 1;
      float v35 = *(char **)(a1 + 160);
      double v34 = *(char **)(a1 + 168);
      if (v34 != v35)
      {
        do
        {
          unint64_t v36 = *((void *)v34 - 1);
          v34 -= 8;
          *--double v32 = v36;
        }

        while (v34 != v35);
        double v34 = (char *)*v5;
      }

      *(void *)(a1 + 160) = v32;
      *(void *)(a1 + 16_Block_object_dispose(va, 8) = v12;
      *(void *)(a1 + 176) = v33;
      if (v34) {
        operator delete(v34);
      }
      goto LABEL_38;
    }

    uint64_t v7 = 0LL;
    goto LABEL_8;
  }
}

LABEL_62:
    sub_10001E948();
  }

  uint64_t v18 = 0LL;
  unsigned int v19 = 0;
  unint64_t v20 = (uint64_t)(v6 - v4) >> 3;
  while (*(float *)(v4 + 8 * v18) < a2)
  {
    uint64_t v18 = ++v19;
    if (v20 <= v19) {
      goto LABEL_39;
    }
  }

  int v21 = (float *)(v4 + 8 * v18);
  int v22 = *(_DWORD *)(a1 + 112);
  unint64_t v23 = *(void *)(a1 + 176);
  if (v6 >= v23)
  {
    unint64_t v37 = v20 + 1;
    if ((v20 + 1) >> 61) {
      goto LABEL_62;
    }
    uint64_t v38 = v23 - v4;
    if (v38 >> 2 > v37) {
      unint64_t v37 = v38 >> 2;
    }
    else {
      unint64_t v39 = v37;
    }
    if (v39)
    {
      double v41 = (char *)sub_10001EC7C(v39);
    }

    else
    {
      double v41 = 0LL;
      uint64_t v40 = 0LL;
    }

    double v42 = &v41[8 * v18];
    double v43 = &v41[8 * v40];
    if (v18 == v40)
    {
      if (v18)
      {
        v42 -= (4 * v18 + 4) & 0xFFFFFFFFFFFFFFF8LL;
      }

      else
      {
        double v42 = (char *)sub_10001EC7C(1uLL);
        double v43 = &v42[8 * v44];
        if (v41) {
          operator delete(v41);
        }
      }
    }

    *(float *)double v42 = a2;
    *((_DWORD *)v42 + 1) = v22;
    uint64_t v45 = v42 + 8;
    double v46 = (float *)*v5;
    if (*v5 != v21)
    {
      float v47 = v21;
      do
      {
        uint64_t v48 = *((void *)v47 - 1);
        v47 -= 2;
        *((void *)v42 - 1) = v48;
        v42 -= 8;
      }

      while (v47 != v46);
    }

    for (uint64_t i = *(float **)(a1 + 168); v21 != i; ++v45)
    {
      uint64_t v50 = *(void *)v21;
      v21 += 2;
      *uint64_t v45 = v50;
    }

    double v51 = *(void **)(a1 + 160);
    *(void *)(a1 + 160) = v42;
    *(void *)(a1 + 16_Block_object_dispose(va, 8) = v45;
    *(void *)(a1 + 176) = v43;
    if (v51) {
      operator delete(v51);
    }
  }

  else if (v21 == (float *)v6)
  {
    *(float *)unint64_t v6 = a2;
    *(_DWORD *)(v6 + 4) = v22;
    *(void *)(a1 + 16_Block_object_dispose(va, 8) = v6 + 8;
  }

  else
  {
    uint64_t v24 = v21 + 2;
    __int16 v25 = (uint64_t *)(v6 - 8);
    uint64_t v26 = (void *)v6;
    if (v6 >= 8)
    {
      uint64_t v26 = (void *)v6;
      do
      {
        uint64_t v27 = *v25++;
        *v26++ = v27;
      }

      while ((unint64_t)v25 < v6);
    }

    *(void *)(a1 + 16_Block_object_dispose(va, 8) = v26;
    if ((void *)v6 != v24)
    {
      uint64_t v28 = (uint64_t)(v6 - (void)v24) >> 3;
      double v29 = (_DWORD *)(v6 - 4);
      uint64_t v30 = v4 + 8LL * v19;
      uint64_t v31 = 8 * v28;
      do
      {
        *(v29 - 1) = *(_DWORD *)(v30 + v31 - 8);
        _DWORD *v29 = *(_DWORD *)(v30 + v31 - 4);
        v29 -= 2;
        v31 -= 8LL;
      }

      while (v31);
    }

    float *v21 = a2;
    *(_DWORD *)(v4 + 8 * v18 + 4) = v22;
  }

LABEL_39:
  *(_DWORD *)(a1 + 112) = (*(_DWORD *)(a1 + 112) + 1) % *(_DWORD *)(a1 + 108);
}

          if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL))
          {
            *(_BYTE *)(*(void *)(a1 + 32) + 1+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 1;
            v198 = 0LL;
            v199 = (float *)&v198;
            v200 = 0x3032000000LL;
            v201 = sub_1000CA7E8;
            v202 = sub_1000CA7F8;
            v203 = 0LL;
            v194 = 0LL;
            v195 = &v194;
            v196 = 0x2020000000LL;
            v197 = 0LL;
            v188 = 0LL;
            v189 = (float *)&v188;
            v190 = 0x3032000000LL;
            v191 = sub_1000CA7E8;
            v192 = sub_1000CA7F8;
            v193 = 0LL;
            v184 = 0LL;
            v185 = (double *)&v184;
            v186 = 0x2020000000LL;
            v187 = 0LL;
            v180 = 0LL;
            v181 = (double *)&v180;
            v182 = 0x2020000000LL;
            v183 = 0LL;
            id v107 = *(void *)(a1 + 32);
            v108 = *(dispatch_queue_s **)(v107 + 280);
            v178[0] = _NSConcreteStackBlock;
            v178[1] = 3221225472LL;
            v178[2] = sub_1000CD908;
            v178[3] = &unk_10022CC80;
            v178[4] = v107;
            v178[5] = &v222;
            v179 = *(_BYTE *)(a1 + 116);
            v178[6] = &v198;
            v178[7] = &v194;
            v178[8] = &v188;
            v178[9] = &v184;
            v178[10] = &v180;
            dispatch_async_and_wait(v108, v178);
            v109 = *(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
            v110 = v181[3];
            +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
            double v112 = v111;
            __int16 v113 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
            __int16 v114 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL);
            +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
            double v115 = (uint64_t (*)(uint64_t, uint64_t))+[CSFTimeUtils hostTimeFromSampleCount:anchorHostTime:anchorSampleCount:sampleRate:]( &OBJC_CLASS___CSFTimeUtils,  "hostTimeFromSampleCount:anchorHostTime:anchorSampleCount:sampleRate:",  (unint64_t)((v109 + v110) / 1000.0 * v112),  v113,  v114);
            __int16 v116 = (os_log_s *)CSLogCategoryEP;
            if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
            {
              double v117 = v231[6];
              __int16 v118 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
              id v119 = *(double *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL);
              id v120 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL);
              *(_DWORD *)__int128 buf = 136316674;
              *(void *)&uint8_t buf[4] = "-[CSHybridEndpointer processOSDFeatures:withFrameDurationMs:withMHID:]_block_invoke_2";
              *(_WORD *)&buf[12] = 2050;
              *(double *)&buf[14] = v117;
              *(_WORD *)&buf[22] = 2050;
              v261 = v115;
              *(_WORD *)v262 = 2050;
              *(void *)&v262[2] = v118;
              *(_WORD *)&v262[10] = 2050;
              *(void *)&v262[12] = (unint64_t)((v109 + v110) / 1000.0 * v112);
              v263 = 2050;
              v264 = v119;
              v265 = 1026;
              LODWORD(v266) = v120;
              _os_log_impl( (void *)&_mh_execute_header,  v116,  OS_LOG_TYPE_DEFAULT,  "%s HEP.posterior=%{public}f, result=1, endpointedBuffer.hostTime=%{public}llu, anchorhostTime=%{public}l lu, endpointSampleCount=%{public}llu, numSamplesProcessedBeforeAnchorTime=%{public}lu, isAnchorTimeBuffered=%{public}d",  buf,  0x44u);
            }

            id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));
            if (WeakRetained)
            {
              __int16 v122 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));
              id v123 = objc_opt_respondsToSelector(v122, "endpointer:reportEndpointBufferHostTime:firstBufferHostTime:");

              if ((v123 & 1) != 0)
              {
                __int16 v124 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));
                [v124 endpointer:*(void *)(a1 + 32) reportEndpointBufferHostTime:v115 firstBufferHostTime:v195[3]];
              }
            }

            if (v231[6] == 0.0 && [v170 count] == (id)2 || *((_BYTE *)v211 + 24))
            {
              double v125 = (os_log_s *)CSLogCategoryEP;
              if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 136315394;
                *(void *)&uint8_t buf[4] = "-[CSHybridEndpointer processOSDFeatures:withFrameDurationMs:withMHID:]_block_invoke";
                *(_WORD *)&buf[12] = 2114;
                *(void *)&buf[14] = v170;
                _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_DEFAULT,  "%s Request timeout with features %{public}@",  buf,  0x16u);
              }

              *(_BYTE *)(*(void *)(a1 + 32) + 18LL) = 1;
            }

            *(void *)(*(void *)(a1 + 32) + 264LL) = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
            objc_storeStrong((id *)(*(void *)(a1 + 32) + 128LL), *(id *)(a1 + 40));
            v160 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
            [v160 timeIntervalSinceDate:*((void *)v199 + 5)];
            uint64_t v127 = v126;
            __int16 v128 = *(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
            id v129 = *(double *)(a1 + 104);
            *(void *)__int128 buf = 0LL;
            *(void *)&buf[8] = buf;
            *(void *)&buf[16] = 0x3032000000LL;
            v261 = sub_1000CA7E8;
            *(void *)v262 = sub_1000CA7F8;
            *(void *)&v262[8] = 0LL;
            v172 = 0LL;
            v173 = &v172;
            v174 = 0x3032000000LL;
            v175 = sub_1000CA7E8;
            v176 = sub_1000CA7F8;
            v177 = 0LL;
            __int16 v130 = *(void *)(a1 + 32);
            uint64_t v131 = *(dispatch_queue_s **)(v130 + 152);
            v171[0] = _NSConcreteStackBlock;
            v171[1] = 3221225472LL;
            v171[2] = sub_1000CD9D4;
            v171[3] = &unk_10022CCA8;
            v171[4] = v130;
            v171[5] = buf;
            v171[6] = &v172;
            dispatch_async_and_wait(v131, v171);
            v258[0] = @"ExtraDelayMs";
            __int16 v132 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *((unsigned int *)v227 + 6)));
            v259[0] = v132;
            v258[1] = @"EndpointerDecisionLagMs";
            unint64_t v133 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  v127 / (v128 / 1000.0) * (v129 / 1000.0) * 1000.0));
            v259[1] = v133;
            v169 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v259,  v258,  2LL));

            __int16 v134 = (os_log_s *)CSLogCategoryEP;
            if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
            {
              double v135 = *(double *)(*(void *)&buf[8] + 40LL);
              *(_DWORD *)v252 = 136315650;
              v253 = "-[CSHybridEndpointer processOSDFeatures:withFrameDurationMs:withMHID:]_block_invoke_2";
              v254 = 2114;
              v255 = v135;
              v256 = 2114;
              v257 = v169;
              _os_log_impl( (void *)&_mh_execute_header,  v134,  OS_LOG_TYPE_DEFAULT,  "%s ASRFeaturesLatencyDistribution: %{public}@ additionalMetrics: %{public}@",  v252,  0x20u);
            }

            [*(id *)(a1 + 40) silenceFramesCountMs];
            unsigned int v137 = v136;
            if (v207[3] == 1 && [*((id *)v189 + 5) assetProvider] == (id)1) {
              v207[3] = 2LL;
            }
            v166 = v115;
            v163 = objc_alloc(&OBJC_CLASS___CSEndpointerMetrics);
            v138 = *(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
            v139 = v207[3];
            v140 = *(void *)(*(void *)&buf[8] + 40LL);
            v141 = v173[5];
            v142 = *(void *)(a1 + 40);
            v143 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 18LL);
            v144 = (void *)objc_claimAutoreleasedReturnValue([*((id *)v189 + 5) configVersion]);
            LOBYTE(v159) = *(_BYTE *)(*(void *)(a1 + 32) + 17LL) != 0;
            LOBYTE(v15_Block_object_dispose(va, 8) = v143 != 0;
            v145 = -[CSEndpointerMetrics initWithTotalAudioRecorded:endpointBufferHostTime:featuresAtEndpoint:endpointerType:asrFeatureLatencyDistribution:additionalMetrics:trailingSilenceDurationAtEndpoint:requestId:osdFeatures:asrFeatures:isRequestTimeOut:assetConfigVersion:blkHepAudioOrigin:vtExtraAudioAtStartInMs:firstAudioSampleSensorTimestamp:isAnchorTimeBuffered:endpointHostTime:audioDeliveryHostTimeDelta:]( v163,  "initWithTotalAudioRecorded:endpointBufferHostTime:featuresAtEndpoint:endpointerType:asrFeatureLaten cyDistribution:additionalMetrics:trailingSilenceDurationAtEndpoint:requestId:osdFeatures:asrFeature s:isRequestTimeOut:assetConfigVersion:blkHepAudioOrigin:vtExtraAudioAtStartInMs:firstAudioSampleSen sorTimestamp:isAnchorTimeBuffered:endpointHostTime:audioDeliveryHostTimeDelta:",  v166,  v170,  v139,  v140,  v169,  0LL,  v138,  v137 / 1000.0,  v185[3],  v181[3],  v142,  v141,  v158,  v144,  v195[3],  v159,  mach_absolute_time(),  *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 24LL));

            if (*(_BYTE *)(a1 + 116))
            {
              v146 = (os_log_s *)CSLogCategoryEP;
              if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEBUG))
              {
                v147 = *(double *)(*(void *)(a1 + 32) + 264LL) / 1000.0;
                *(_DWORD *)v252 = 136315394;
                v253 = "-[CSHybridEndpointer processOSDFeatures:withFrameDurationMs:withMHID:]_block_invoke";
                v254 = 2050;
                v255 = v147;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v146,  OS_LOG_TYPE_DEBUG,  "%s MMEP:: HEP detected at %{public}f but will continue running for MMEP.",  v252,  0x16u);
              }
            }

            else
            {
              v149 = *(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) / 1000.0;
              if (+[CSUtils isMedocFeatureEnabled](&OBJC_CLASS___CSUtils, "isMedocFeatureEnabled"))
              {
                if (*((_BYTE *)v219 + 24)
                  || ([*(id *)(a1 + 32) _useEnhancedEndpointer] & 1) == 0)
                {
                  v150 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32LL));
                  [v150 endpointer:*(void *)(a1 + 32) didDetectHardEndpointAtTime:v145 withMetrics:1 endpointerModelType:v149];
                }

                if (*((_BYTE *)v223 + 24)
                  || ![*(id *)(a1 + 32) _useEnhancedEndpointer]
                  || (+[CSUtils isFlexibleEndpointingEnabled]( &OBJC_CLASS___CSUtils,  "isFlexibleEndpointingEnabled") & 1) == 0)
                {
                  v151 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32LL));
                  [v151 endpointer:*(void *)(a1 + 32) didDetectHardEndpointAtTime:v145 withMetrics:2 endpointerModelType:v149];
                }
              }

              else
              {
                v152 = [*(id *)(a1 + 32) _useEnhancedEndpointer];
                v153 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32LL));
                v154 = v153;
                v155 = *(void *)(a1 + 32);
                if (v152)
                {
                  v156 = 2LL;
                  [v153 endpointer:v155 didDetectHardEndpointAtTime:v145 withMetrics:2 endpointerModelType:v149];
                }

                else
                {
                  [v153 endpointer:v155 didDetectHardEndpointAtTime:v145 withMetrics:0 endpointerModelType:v149];
                  v156 = 0LL;
                }

                +[CSEndpointDetectedSelfLogger emitEndpointDetectedEventWithEndpointerMetrics:withEndpointerModelType:withTrpId:withMhID:]( &OBJC_CLASS___CSEndpointDetectedSelfLogger,  "emitEndpointDetectedEventWithEndpointerMetrics:withEndpointerModelType:withTrpId:withMhID:",  v145,  v156,  0LL,  *(void *)(*(void *)(a1 + 32) + 56LL));
              }
            }

            _Block_object_dispose(&v172, 8);
            _Block_object_dispose(buf, 8);

            _Block_object_dispose(&v180, 8);
            _Block_object_dispose(&v184, 8);
            _Block_object_dispose(&v188, 8);

            _Block_object_dispose(&v194, 8);
            _Block_object_dispose(&v198, 8);
          }

          goto LABEL_76;
        }

void sub_10008E760(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

id sub_10008E778(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setAsset:*(void *)(a1 + 40)];
}

id sub_10008E784(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  [*(id *)(a1 + 40) musicVolume];
  objc_msgSend(v2, "_getDevicedBFSForInputLinearVolume:");
  *(_DWORD *)(*(void *)(a1 + 32) + 112LL) = v3;
  id result = [*(id *)(a1 + 40) alarmVolume];
  *(_DWORD *)(*(void *)(a1 + 32) + 116LL) = v5;
  return result;
}

void sub_10008E7C8(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 101LL) = *(void *)(a1 + 40) == 1LL;
  uint64_t v2 = (os_log_s *)CSLogCategoryASV;
  if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(*(void *)(a1 + 32) + 101LL)) {
      int v3 = @"firing";
    }
    else {
      int v3 = @"NOT firing";
    }
    int v4 = 136315394;
    int v5 = "-[CSSmartSiriVolume initializeTimerState]_block_invoke";
    __int16 v6 = 2114;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolume received timer initial state as %{public}@",  (uint8_t *)&v4,  0x16u);
  }

void sub_10008E8AC(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 10+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = *(void *)(a1 + 40) == 1LL;
  uint64_t v2 = (os_log_s *)CSLogCategoryASV;
  if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(*(void *)(a1 + 32) + 100LL)) {
      int v3 = @"firing";
    }
    else {
      int v3 = @"NOT firing";
    }
    int v4 = 136315394;
    int v5 = "-[CSSmartSiriVolume initializeAlarmState]_block_invoke";
    __int16 v6 = 2114;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolume received alarm initial state as %{public}@",  (uint8_t *)&v4,  0x16u);
  }

void sub_10008E990(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(_BYTE *)(*(void *)(a1 + 32) + 99LL) = v2 == 2;
  *(_BYTE *)(*(void *)(a1 + 32) + 102LL) = v2 == 1;
  int v3 = (os_log_s *)CSLogCategoryASV;
  if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(*(void *)(a1 + 32) + 102LL)) {
      int v4 = @"playing";
    }
    else {
      int v4 = @"NOT playing";
    }
    int v5 = 136315394;
    __int16 v6 = "-[CSSmartSiriVolume initializeMediaPlayingState]_block_invoke";
    __int16 v7 = 2114;
    uint64_t v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolume received MediaRemote initial state as %{public}@",  (uint8_t *)&v5,  0x16u);
  }

void sub_10008EA84(id a1, BOOL a2, NSError *a3)
{
  int v4 = a3;
  if (!a2)
  {
    int v5 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      __int16 v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSError description](v4, "description"));
      int v7 = 136315394;
      uint64_t v8 = "-[CSSmartSiriVolume _stopListening]_block_invoke";
      __int16 v9 = 2114;
      unint64_t v10 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Failed to stop audio stream : %{public}@",  (uint8_t *)&v7,  0x16u);
    }
  }
}

void sub_10008EB70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008EB8C(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t, id))(v5 + 16))(v5, a2, v6);
  }
}

void sub_10008EBD8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10008EBEC(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(v6 + 8);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_10008EC90;
  v10[3] = &unk_10022E678;
  char v14 = a2;
  id v11 = v5;
  uint64_t v12 = v6;
  id v13 = v7;
  id v9 = v5;
  dispatch_async(v8, v10);
}

uint64_t sub_10008EC90(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryASV;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 56);
    uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) description]);
    id v5 = (void *)v4;
    uint64_t v6 = @"YES";
    *(_DWORD *)id v11 = 136315650;
    *(void *)&void v11[4] = "-[CSSmartSiriVolume _startListenWithCompletion:]_block_invoke_3";
    *(_WORD *)&v11[12] = 2114;
    if (!v3) {
      uint64_t v6 = @"NO";
    }
    *(void *)&v11[14] = v6;
    __int16 v12 = 2114;
    uint64_t v13 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Start audio stream successfully ? %{public}@, error : %{public}@",  v11,  0x20u);
  }

  int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) enablePolicy]);
  unsigned __int8 v8 = [v7 isEnabled];

  if ((v8 & 1) == 0)
  {
    id v9 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)id v11 = 136315138;
      *(void *)&void v11[4] = "-[CSSmartSiriVolume _startListenWithCompletion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s Received didStartRecording when Siri is off",  v11,  0xCu);
    }

    objc_msgSend(*(id *)(a1 + 40), "_stopListening", *(_OWORD *)v11);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10008EE24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008EE48(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      (*(void (**)(uint64_t, uint64_t, void))(v6 + 16))(v6, 1LL, 0LL);
    }
  }

  else
  {
    int v7 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
      *(_DWORD *)id location = 136315394;
      *(void *)&location[4] = "-[CSSmartSiriVolume _startListenPollingWithInterval:completion:]_block_invoke";
      __int16 v15 = 2114;
      unint64_t v16 = v10;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s listen polling has failed : %{public}@",  location,  0x16u);
    }

    objc_initWeak((id *)location, *(id *)(a1 + 32));
    dispatch_time_t v8 = dispatch_time(0LL, (uint64_t)(*(double *)(a1 + 48) * 1000000000.0));
    id v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10008F038;
    block[3] = &unk_10022E600;
    objc_copyWeak(v13, (id *)location);
    v13[1] = *(id *)(a1 + 48);
    id v12 = *(id *)(a1 + 40);
    dispatch_after(v8, v9, block);

    objc_destroyWeak(v13);
    objc_destroyWeak((id *)location);
  }
}

void sub_10008F014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008F038(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _startListenPollingWithInterval:*(void *)(a1 + 32) completion:*(double *)(a1 + 48)];
}

void sub_10008F078( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

uint64_t sub_10008F08C(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 97LL) = 0;
  return result;
}

void sub_10008F098(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)CSLogCategoryASV;
  if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = @"PAUSED";
    if (a2) {
      id v5 = @"RUNNING";
    }
    int v8 = 136315394;
    id v9 = "-[CSSmartSiriVolume startSmartSiriVolume]_block_invoke";
    __int16 v10 = 2114;
    id v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolume enable policy changed : %{public}@",  (uint8_t *)&v8,  0x16u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v7 = WeakRetained;
  if (a2) {
    [WeakRetained _resumeSSVProcessing];
  }
  else {
    [WeakRetained _pauseSSVProcessing];
  }
}

void sub_10008F198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008F1B4(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (a2) {
    [WeakRetained _startListenPolling];
  }
  else {
    [WeakRetained _stopListening];
  }
}

void sub_10008F1F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

id sub_10008F210(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startListenPolling];
}

float sub_10008F218(uint64_t a1, int a2, int a3, int a4, int a5, int a6, float a7, float a8, float a9)
{
  *(_DWORD *)(a1 + 96) = a3;
  *(_DWORD *)(a1 + 104) = 1024;
  *(_DWORD *)(a1 + 10_Block_object_dispose(va, 8) = a4;
  *(_DWORD *)(a1 + 132) = a5;
  *(_DWORD *)(a1 + 136) = a6;
  *(float *)(a1 + 140) = a9;
  *(float *)(a1 + 124) = a7;
  *(float *)(a1 + 12_Block_object_dispose(va, 8) = a8;
  *(_DWORD *)(a1 + 116) = a2;
  *(_DWORD *)(a1 + 120) = a3 << 10;
  sub_1000479D0((char **)a1, (a3 << 10));
  sub_1000479D0((char **)(a1 + 24), *(unsigned int *)(a1 + 120));
  sub_1000479D0((char **)(a1 + 48), *(unsigned int *)(a1 + 108));
  unint64_t v10 = *(unsigned int *)(a1 + 108);
  uint64_t v11 = *(void *)(a1 + 160);
  uint64_t v12 = *(void *)(a1 + 168);
  unint64_t v13 = (v12 - v11) >> 3;
  if (v10 <= v13)
  {
    if (v10 >= v13) {
      goto LABEL_17;
    }
    uint64_t v26 = v11 + 8 * v10;
    goto LABEL_16;
  }

  unint64_t v14 = v10 - v13;
  uint64_t v15 = *(void *)(a1 + 176);
  if (v10 - v13 <= (v15 - v12) >> 3)
  {
    bzero(*(void **)(a1 + 168), 8 * v14);
    uint64_t v26 = v12 + 8 * v14;
LABEL_16:
    *(void *)(a1 + 16_Block_object_dispose(va, 8) = v26;
    goto LABEL_17;
  }

  uint64_t v16 = v15 - v11;
  if (v16 >> 2 > v10) {
    unint64_t v10 = v16 >> 2;
  }
  else {
    unint64_t v17 = v10;
  }
  uint64_t v18 = (char *)sub_10001EC7C(v17);
  unsigned int v19 = &v18[8 * v13];
  int v21 = &v18[8 * v20];
  bzero(v19, 8 * v14);
  int v22 = &v19[8 * v14];
  uint64_t v24 = *(char **)(a1 + 160);
  unint64_t v23 = *(char **)(a1 + 168);
  if (v23 != v24)
  {
    do
    {
      uint64_t v25 = *((void *)v23 - 1);
      v23 -= 8;
      *((void *)v19 - 1) = v25;
      v19 -= 8;
    }

    while (v23 != v24);
    unint64_t v23 = *(char **)(a1 + 160);
  }

  *(void *)(a1 + 160) = v19;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = v22;
  *(void *)(a1 + 176) = v21;
  if (v23) {
    operator delete(v23);
  }
LABEL_17:
  sub_10001EAC8((char **)(a1 + 72), (5 * *(_DWORD *)(a1 + 96)));
  if (*(_DWORD *)(a1 + 96))
  {
    uint64_t v27 = 0LL;
    vDSP_Length v28 = 0LL;
    do
    {
      uint64_t v29 = *(void *)(a1 + 72) + 8LL * v27;
      *(_OWORD *)uint64_t v29 = xmmword_10018B220;
      *(_OWORD *)(v29 + 16) = unk_10018B230;
      *(void *)(v29 + 32) = 0LL;
      ++v28;
      vDSP_Length v30 = *(unsigned int *)(a1 + 96);
      v27 += 5LL;
    }

    while (v28 < v30);
  }

  else
  {
    vDSP_Length v30 = 0LL;
  }

  *(void *)(a1 + 152) = vDSP_biquadm_CreateSetup(*(const double **)(a1 + 72), 1uLL, v30);
  uint64_t v32 = *(void *)(a1 + 160);
  unint64_t v33 = *(void *)(a1 + 168) - v32;
  if ((v33 & 0x7FFFFFFF8LL) != 0)
  {
    uint64_t v34 = 0LL;
    uint64_t v35 = (v33 >> 3);
    unint64_t v36 = (float *)(v32 + 4);
    do
    {
      float result = *(float *)(a1 + 124);
      *(v36 - 1) = result;
      *(_DWORD *)unint64_t v36 = v34;
      v36 += 2;
      ++v34;
    }

    while (v35 != v34);
  }

  return result;
}

void sub_10008FDEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000900D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_100090288( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100090394( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100091214(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        int v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "audioRecorderBufferAvailable:audioStreamHandleId:buffer:") & 1) != 0) {
          objc_msgSend( v7,  "audioRecorderBufferAvailable:audioStreamHandleId:buffer:",  *(void *)(a1 + 32),  objc_msgSend(*(id *)(a1 + 40), "streamHandleID", (void)v8),  *(void *)(a1 + 40));
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_10009134C(void *a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(a1[4] + 16LL);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        int v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "audioRecorderDidStopRecord:audioStreamHandleId:reason:") & 1) != 0) {
          objc_msgSend(v7, "audioRecorderDidStopRecord:audioStreamHandleId:reason:", a1[4], a1[5], a1[6], (void)v8);
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_100091478(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 8))
  {
    if (!*(_BYTE *)(a1 + 72)) {
      return;
    }
    *(_BYTE *)(v2 + _Block_object_dispose(va, 8) = 1;
    uint64_t v2 = *(void *)(a1 + 32);
  }

  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id obj = *(id *)(v2 + 16);
  id v3 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v19;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v19 != v5) {
          objc_enumerationMutation(obj);
        }
        int v7 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v7,  "audioRecorderBufferAvailable:audioStreamHandleId:buffer:remoteVAD:atTime:arrivalTimestampToAudioRecorder :numberOfChannels:") & 1) != 0)
        {
          id v8 = v4;
          uint64_t v9 = v5;
          uint64_t v10 = *(void *)(a1 + 32);
          uint64_t v11 = *(void *)(a1 + 40);
          uint64_t v13 = *(void *)(a1 + 48);
          uint64_t v12 = *(void *)(a1 + 56);
          uint64_t v14 = *(void *)(a1 + 64);
          LODWORD(v16) = +[CSConfig inputRecordingNumberOfChannels]( &OBJC_CLASS___CSConfig,  "inputRecordingNumberOfChannels");
          uint64_t v15 = v10;
          uint64_t v5 = v9;
          id v4 = v8;
          [v7 audioRecorderBufferAvailable:v15 audioStreamHandleId:v12 buffer:v11 remoteVAD:v13 atTime:v14 arrivalTimestampToAudioRecorder:0 numberOfChannels:v16];
        }
      }

      id v4 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
    }

    while (v4);
  }
}

void sub_100091610(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        int v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "audioRecorderDidStartRecord:audioStreamHandleId:successfully:error:") & 1) != 0) {
          objc_msgSend( v7,  "audioRecorderDidStartRecord:audioStreamHandleId:successfully:error:",  *(void *)(a1 + 32),  *(void *)(a1 + 48),  *(unsigned __int8 *)(a1 + 56),  *(void *)(a1 + 40),  (void)v8);
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

uint64_t sub_100091740(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100091750(uint64_t a1)
{
}

void sub_100091758(void *a1)
{
  id v2 = *(void **)(a1[4] + 72LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a1[6]));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v5 = *(id *)(a1[4] + 40LL);
  id v6 = [v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v21;
    while (2)
    {
      for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v21 != v8) {
          objc_enumerationMutation(v5);
        }
        __int128 v10 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
        __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "injectionEngine", (void)v20));

        if (v11 == v4)
        {
          uint64_t v12 = objc_alloc(&OBJC_CLASS___CSFAudioRecordDeviceInfo);
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v10 deviceName]);
          id v14 = [v10 isPluginDevice];
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v10 deviceUID]);
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v10 productIdentifier]);
          unint64_t v17 = -[CSFAudioRecordDeviceInfo initWithRoute:isRemoteDevice:remoteDeviceUID:remoteDeviceProductIdentifier:]( v12,  "initWithRoute:isRemoteDevice:remoteDeviceUID:remoteDeviceProductIdentifier:",  v13,  v14,  v15,  v16);
          uint64_t v18 = *(void *)(a1[5] + 8LL);
          __int128 v19 = *(void **)(v18 + 40);
          *(void *)(v18 + 40) = v17;

          goto LABEL_11;
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }

void sub_100091944(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 72LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 40) streamHandleId]));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v5 = *(id *)(*(void *)(a1 + 32) + 40LL);
  id v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v16;
    while (2)
    {
      for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v8) {
          objc_enumerationMutation(v5);
        }
        __int128 v10 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)i);
        __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "injectionEngine", (void)v15));

        if (v11 == v4)
        {
          uint64_t v12 = objc_claimAutoreleasedReturnValue([v10 deviceName]);
          uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8LL);
          id v14 = *(void **)(v13 + 40);
          *(void *)(v13 + 40) = v12;

          goto LABEL_11;
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }

void sub_100091AD4(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 72LL);
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 40) streamHandleId]));
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v6]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100091B58(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 72LL);
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 40) streamHandleId]));
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v6]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100091BDC(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  BOOL v3 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(v5 + 32);
    uint64_t v7 = *(void *)(v5 + 128);
    uint64_t v8 = *(const __CFString **)(a1 + 32);
    int v19 = 136315906;
    __int128 v20 = "-[CSAudioInjectionProvider startAudioStreamWithOption:recordDeviceIndicator:error:]_block_invoke";
    __int16 v21 = 2112;
    __int128 v22 = v8;
    __int16 v23 = 2112;
    uint64_t v24 = v6;
    __int16 v25 = 2112;
    uint64_t v26 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Calling start audio stream : %@ %@, context: %@",  (uint8_t *)&v19,  0x2Au);
  }

  if (CSIsIOS(v3, v4)
    && (uint64_t v9 = a1 + 40, (v10 = *(void **)(*(void *)(a1 + 40) + 128LL)) != 0LL)
    && ![v10 isVoiceTriggered])
  {
    char v11 = 0;
  }

  else
  {
    uint64_t v9 = a1 + 40;
    char v11 = 1;
  }

  *(_BYTE *)(*(void *)v9 + 8LL) = v11;
  uint64_t v12 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(*(void *)(a1 + 40) + 8LL)) {
      uint64_t v13 = @"YES";
    }
    else {
      uint64_t v13 = @"NO";
    }
    int v19 = 136315394;
    __int128 v20 = "-[CSAudioInjectionProvider startAudioStreamWithOption:recordDeviceIndicator:error:]_block_invoke";
    __int16 v21 = 2112;
    __int128 v22 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s allowZeroInjection : %@",  (uint8_t *)&v19,  0x16u);
  }

  id v14 = *(void **)(*(void *)(a1 + 40) + 72LL);
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 48) streamHandleId]));
  uint64_t v16 = objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:v15]);
  uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8LL);
  __int128 v18 = *(void **)(v17 + 40);
  *(void *)(v17 + 40) = v16;
}

id sub_100091DE0(uint64_t a1)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) startAudioStreamWithOption:*(void *)(a1 + 32)];
}

void sub_100091DF0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recordContext]);
  id v2 = [v3 copy];
  [v1 setAudioRecordContext:v2];
}

void sub_100091E3C(uint64_t a1)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 40LL);
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v13;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)i);
        if (objc_msgSend(v7, "isPluginDevice", (void)v12))
        {
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 deviceID]);
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deviceId]);
          unsigned int v10 = [v8 isEqualToString:v9];

          if (v10)
          {
            char v11 = (void *)objc_claimAutoreleasedReturnValue([v7 injectionEngine]);
            *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v11 audioStreamHandleId];
          }
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v4);
  }
}

id sub_100091FAC(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) removeObject:*(void *)(a1 + 40)];
}

id sub_100091FC0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) addObject:*(void *)(a1 + 40)];
}

void sub_100091FD4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) injectionEngine]);
  id v3 = v2;
  if (v2)
  {
    id v4 = [v2 audioStreamHandleId];
    [v3 stop];
    [v3 setDelegate:0];
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    id v5 = *(id *)(*(void *)(a1 + 40) + 16LL);
    id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v14;
      do
      {
        for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v14 != v8) {
            objc_enumerationMutation(v5);
          }
          unsigned int v10 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
          if ((objc_opt_respondsToSelector(v10, "audioRecorderStreamHandleIdInvalidated:") & 1) != 0) {
            objc_msgSend(v10, "audioRecorderStreamHandleIdInvalidated:", v4, (void)v13);
          }
        }

        id v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }

      while (v7);
    }

    char v11 = *(void **)(*(void *)(a1 + 40) + 72LL);
    __int128 v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v4));
    [v11 removeObjectForKey:v12];
  }

  objc_msgSend(*(id *)(*(void *)(a1 + 40) + 40), "removeObject:", *(void *)(a1 + 32), (void)v13);
  if ([*(id *)(a1 + 32) deviceType] == (id)6) {
    [*(id *)(a1 + 40) _createSpeechDetectionVADIfNeeded];
  }
}

id sub_100092198(uint64_t a1)
{
  id result = [*(id *)(a1 + 40) deviceType];
  if (result == (id)6) {
    return [*(id *)(a1 + 32) _tearDownSpeechDetectionVADIfNeeded];
  }
  return result;
}

void sub_1000921FC(uint64_t a1)
{
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 72LL);
  id v3 = [v2 countByEnumeratingWithState:&v28 objects:v34 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v29;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v29 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 72) objectForKeyedSubscript:*(void *)(*((void *)&v28 + 1) + 8 * (void)i)]);
        [v7 stop];
      }

      id v4 = [v2 countByEnumeratingWithState:&v28 objects:v34 count:16];
    }

    while (v4);
  }

  [*(id *)(*(void *)(a1 + 32) + 72) removeAllObjects];
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id v8 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v9 = [v8 countByEnumeratingWithState:&v24 objects:v33 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v25;
    do
    {
      for (j = 0LL; j != v10; j = (char *)j + 1)
      {
        if (*(void *)v25 != v11) {
          objc_enumerationMutation(v8);
        }
        __int128 v13 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)j);
        if ((objc_opt_respondsToSelector(v13, "audioRecorderStreamHandleIdInvalidated:") & 1) != 0) {
          [v13 audioRecorderStreamHandleIdInvalidated:1];
        }
      }

      id v10 = [v8 countByEnumeratingWithState:&v24 objects:v33 count:16];
    }

    while (v10);
  }

  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v14 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v15 = [v14 countByEnumeratingWithState:&v20 objects:v32 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v21;
    do
    {
      for (k = 0LL; k != v16; k = (char *)k + 1)
      {
        if (*(void *)v21 != v17) {
          objc_enumerationMutation(v14);
        }
        int v19 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)k);
        if ((objc_opt_respondsToSelector(v19, "audioRecorderWillBeDestroyed:") & 1) != 0) {
          objc_msgSend(v19, "audioRecorderWillBeDestroyed:", *(void *)(a1 + 32), (void)v20);
        }
      }

      id v16 = [v14 countByEnumeratingWithState:&v20 objects:v32 count:16];
    }

    while (v16);
  }
}

void sub_100092490(uint64_t a1)
{
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 40LL);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    char v5 = 0;
    uint64_t v6 = *(void *)v10;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v2);
        }
        id v8 = *(void **)(*((void *)&v9 + 1) + 8LL * (void)i);
        if (objc_msgSend(v8, "deviceType", (void)v9) == (id)1)
        {
          [*(id *)(a1 + 32) _createSpeechDetectionVADIfNeeded];
        }

        else if ([v8 isPluginDevice])
        {
          [*(id *)(a1 + 32) _connectPluginDevice:v8];
          char v5 = 1;
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v4);

    if ((v5 & 1) != 0) {
      [*(id *)(a1 + 32) _tearDownSpeechDetectionVADIfNeeded];
    }
  }

  else
  {
  }

void sub_100092620(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSAudioInjectionProvider);
  id v2 = (void *)qword_10027FE80;
  qword_10027FE80 = (uint64_t)v1;
}

LABEL_31:
    unint64_t v37 = 0LL;
    double v49 = 0;
    goto LABEL_34;
  }

  relaxedEndpointerCache = self->_relaxedEndpointerCache;
  unint64_t v36 = (os_log_s *)CSLogCategoryRequest;
  if (!relaxedEndpointerCache)
  {
    if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      double v56 = "-[CSTrpTcuMapper processTRPWithId:withSpeechPackage:enforceTrpSelection:]";
      _os_log_error_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_ERROR,  "%s Got final TCU package before relaxEP fire !",  buf,  0xCu);
    }

    goto LABEL_31;
  }

  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315394;
    double v56 = "-[CSTrpTcuMapper processTRPWithId:withSpeechPackage:enforceTrpSelection:]";
    double v57 = 2112;
    *(void *)double v58 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "%s Associating RelaxEP with trpId: %@",  buf,  0x16u);
    relaxedEndpointerCache = self->_relaxedEndpointerCache;
  }

  -[CSAttSiriCachedEndpointInfo setTrpID:](relaxedEndpointerCache, "setTrpID:", v8);
  unint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(-[CSAttSiriCachedEndpointInfo endpointerMetrics](self->_relaxedEndpointerCache, "endpointerMetrics"));
  double v49 = 1;
LABEL_34:
  double v43 = *v12;
  if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315650;
    double v56 = "-[CSTrpTcuMapper processTRPWithId:withSpeechPackage:enforceTrpSelection:]";
    double v57 = 1024;
    *(_DWORD *)double v58 = v49 & 1;
    *(_WORD *)&v58[4] = 2112;
    *(void *)&v58[6] = v37;
    _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "%s foundEndpoint:%u, matchingEndpointerMetrics:%@",  buf,  0x1Cu);
  }

  return v37;
}

int64_t sub_100093A50(id a1, id a2, id a3)
{
  id v4 = a3;
  +[CSAttSiriSpeechPackageHelper getLastTokenEndTimeFromSpeechPackage:]( &OBJC_CLASS___CSAttSiriSpeechPackageHelper,  "getLastTokenEndTimeFromSpeechPackage:",  a2);
  char v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  +[CSAttSiriSpeechPackageHelper getLastTokenEndTimeFromSpeechPackage:]( &OBJC_CLASS___CSAttSiriSpeechPackageHelper,  "getLastTokenEndTimeFromSpeechPackage:",  v4);
  double v7 = v6;

  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v7));
  id v9 = [v8 compare:v5];

  return (int64_t)v9;
}

id sub_100093D04(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 136315394;
    id v8 = "-[CSAttSiriStateMonitor updateState:]_block_invoke";
    __int16 v9 = 2048;
    uint64_t v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s Updating attSiri state to: %lu", buf, 0x16u);
  }

  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100093E00;
  v6[3] = &unk_10022EED0;
  v6[4] = v4;
  return [v4 enumerateObserversInQueue:v6];
}

void sub_100093E00(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) notifyObserver:v3];
  if ((objc_opt_respondsToSelector(v3, "attSiriStateMonitor:didRecieveAttSiriStateChange:") & 1) != 0) {
    objc_msgSend( v3,  "attSiriStateMonitor:didRecieveAttSiriStateChange:",  *(void *)(a1 + 32),  objc_msgSend(*(id *)(a1 + 32), "attendingState"));
  }
}

id sub_100093E6C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) attendingState];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_100093EDC(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSAttSiriStateMonitor);
  id v2 = (void *)qword_10027FE88;
  qword_10027FE88 = (uint64_t)v1;
}

uint64_t sub_10009418C(int a1, char *a2, int a3, unsigned int a4)
{
  uint64_t v5 = open(a2, a3, a4);
  uint64_t v6 = v5;
  if ((v5 & 0x80000000) == 0)
  {
    if (fcntl(v5, 68, 1LL) < 0)
    {
      double v7 = (void *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
      {
        __int128 v11 = v7;
        __int128 v12 = __error();
        __int128 v13 = strerror(*v12);
        *(_DWORD *)__int128 buf = 136315650;
        __int128 v21 = "immutableOpen";
        __int16 v22 = 2080;
        __int128 v23 = a2;
        __int16 v24 = 2082;
        __int128 v25 = v13;
        _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%s Could not mark %s static: %{public}s",  buf,  0x20u);
      }
    }

    if (fcntl(v6, 48, 1LL) < 0)
    {
      id v8 = (void *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
      {
        id v14 = v8;
        id v15 = __error();
        id v16 = strerror(*v15);
        *(_DWORD *)__int128 buf = 136315650;
        __int128 v21 = "immutableOpen";
        __int16 v22 = 2082;
        __int128 v23 = a2;
        __int16 v24 = 2082;
        __int128 v25 = v16;
        _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s Unable to set F_NOCACHE accessing file %{public}s %{public}s",  buf,  0x20u);
      }
    }

    if (fcntl(v6, 76, 1LL) < 0)
    {
      __int16 v9 = (void *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = v9;
        __int128 v18 = __error();
        int v19 = strerror(*v18);
        *(_DWORD *)__int128 buf = 136315650;
        __int128 v21 = "immutableOpen";
        __int16 v22 = 2082;
        __int128 v23 = a2;
        __int16 v24 = 2082;
        __int128 v25 = v19;
        _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%s Unable to set F_SINGLE_WRITER on %{public}s %{public}s",  buf,  0x20u);
      }
    }
  }

  return v6;
}

uint64_t sub_1000943E8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = BOMCopierUserData();
  if (v5)
  {
    *(_DWORD *)uint64_t v5 = a3;
    *(_BYTE *)(v5 + 4) = 1;
  }

  uint64_t v6 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
  {
    id v8 = v6;
    int v9 = 136315650;
    uint64_t v10 = "bomFileErrorHandler";
    __int16 v11 = 2082;
    uint64_t v12 = a2;
    __int16 v13 = 2082;
    id v14 = strerror(a3);
    _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s BOMCopier signaled file error on %{public}s : %{public}s",  (uint8_t *)&v9,  0x20u);
  }

  return 2LL;
}

void sub_1000944E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = BOMCopierUserData();
  if (v3) {
    *(_BYTE *)(v3 + 4) = 1;
  }
  id v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
  {
    int v5 = 136315394;
    uint64_t v6 = "bomFatalErrorHandler";
    __int16 v7 = 2080;
    uint64_t v8 = a2;
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s BOMCopier signaled fatal error: %s",  (uint8_t *)&v5,  0x16u);
  }

void sub_1000945A8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = BOMCopierUserData();
  if (v5)
  {
    *(_DWORD *)uint64_t v5 = a3;
    *(_BYTE *)(v5 + 4) = 1;
  }

  uint64_t v6 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
  {
    __int16 v7 = v6;
    int v8 = 136315650;
    int v9 = "bomFatalFileErrorHandler";
    __int16 v10 = 2082;
    uint64_t v11 = a2;
    __int16 v12 = 2082;
    __int16 v13 = strerror(a3);
    _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s BOMCopier signaled fatal file error on %{public}s : %{public}s",  (uint8_t *)&v8,  0x20u);
  }

BOOL sub_10009491C(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[CSPhoneCallStateMonitorFactory phoneCallStateMonitor]( &OBJC_CLASS___CSPhoneCallStateMonitorFactory,  "phoneCallStateMonitor"));
  id v2 = (char *)[v1 phoneCallState];

  unsigned __int8 v3 = +[CSUtils supportRingtoneA2DP](&OBJC_CLASS___CSUtils, "supportRingtoneA2DP");
  else {
    char v4 = 1;
  }
  if ((v4 & 1) == 0 || (unint64_t)(v2 - 5) >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      int v8 = "-[CSListeningEnabledPolicyWatch _addListeningEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s Listening on watch cant be turned on because we are in a ringtone with A2DP, connected or outgoing call",  (uint8_t *)&v7,  0xCu);
    }
  }

  else {
    return v4 & (v2 != (char *)3);
  }
}

BOOL sub_100094A20(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
  unsigned int v2 = [v1 audioInjectionEnabled];

  if (v2)
  {
    unsigned __int8 v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[CSListeningEnabledPolicyWatch _addListeningEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Listening on watch cannot be turned on since audioInjection is enabled",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2 ^ 1;
}

BOOL sub_100094AEC(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[CSPhraseSpotterEnabledMonitor sharedInstance]( &OBJC_CLASS___CSPhraseSpotterEnabledMonitor,  "sharedInstance"));
  unsigned int v2 = [v1 isEnabled];

  if (!+[CSUtils supportHandsFree](&OBJC_CLASS___CSUtils, "supportHandsFree"))
  {
LABEL_9:
    LOBYTE(v6) = 0;
    goto LABEL_12;
  }

  unsigned __int8 v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  BOOL v4 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
  if (!v2)
  {
    if (v4)
    {
      int v11 = 136315138;
      __int16 v12 = "-[CSListeningEnabledPolicyWatch _addListeningEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Hey Siri is disabled. Not checking if we are in a call.",  (uint8_t *)&v11,  0xCu);
    }

    goto LABEL_9;
  }

  if (v4)
  {
    int v11 = 136315138;
    __int16 v12 = "-[CSListeningEnabledPolicyWatch _addListeningEnabledConditions]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Hey Siri is enabled. Checking if we are in a call.",  (uint8_t *)&v11,  0xCu);
  }

  int v5 = (void *)objc_claimAutoreleasedReturnValue( +[CSPhoneCallStateMonitorFactory phoneCallStateMonitor]( &OBJC_CLASS___CSPhoneCallStateMonitorFactory,  "phoneCallStateMonitor"));
  if ([v5 phoneCallState] == (id)2) {
    unsigned int v6 = +[CSUtils supportRingtoneA2DP](&OBJC_CLASS___CSUtils, "supportRingtoneA2DP") ^ 1;
  }
  else {
    LOBYTE(v6) = 0;
  }

LABEL_12:
  int v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriAssertionMonitor sharedInstance](&OBJC_CLASS___CSSiriAssertionMonitor, "sharedInstance"));
  unsigned __int8 v8 = [v7 isEnabled];

  if ((v8 & 1) == 0 && (v6 & 1) == 0)
  {
    int v9 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315138;
      __int16 v12 = "-[CSListeningEnabledPolicyWatch _addListeningEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Listening on watch cannot be turned on since Siri assertion is disabled and or its not in a ringtone hfp state",  (uint8_t *)&v11,  0xCu);
    }
  }

  return v8 | v2 & v6;
}

BOOL sub_100094CD4(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSFirstUnlockMonitor sharedInstance](&OBJC_CLASS___CSFirstUnlockMonitor, "sharedInstance"));
  unsigned __int8 v2 = [v1 isFirstUnlocked];

  if ((v2 & 1) == 0)
  {
    unsigned __int8 v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      unsigned int v6 = "-[CSListeningEnabledPolicyWatch _addListeningEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Listening on watch cannot be turned on since device is not unlocked after restart",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

BOOL sub_100094DA0(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[CSSystemShellStartMonitorFactory defaultShellStartMonitor]( &OBJC_CLASS___CSSystemShellStartMonitorFactory,  "defaultShellStartMonitor"));
  unsigned __int8 v2 = [v1 isSystemShellStarted];

  if ((v2 & 1) == 0)
  {
    unsigned __int8 v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      unsigned int v6 = "-[CSListeningEnabledPolicyWatch _addListeningEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Listening on watch cannot be turned on since system shell is not started",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

BOOL sub_100094E6C(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriEnabledMonitor sharedInstance](&OBJC_CLASS___CSSiriEnabledMonitor, "sharedInstance"));
  unsigned __int8 v2 = [v1 isEnabled];

  if ((v2 & 1) == 0)
  {
    unsigned __int8 v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      unsigned int v6 = "-[CSListeningEnabledPolicyWatch _addListeningEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Listening on watch cannot be turned on since Siri is disabled",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

BOOL sub_100094F38(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[CSPhraseSpotterEnabledMonitor sharedInstance]( &OBJC_CLASS___CSPhraseSpotterEnabledMonitor,  "sharedInstance"));
  unsigned __int8 v2 = [v1 isEnabled];

  if ((v2 & 1) == 0)
  {
    unsigned __int8 v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      unsigned int v6 = "-[CSListeningEnabledPolicyWatch _addListeningEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Listening on watch cannot be turned on since HS and RTS disabled",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

BOOL sub_100095004(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[CSSpeechDetectionDevicePresentMonitor sharedInstance]( &OBJC_CLASS___CSSpeechDetectionDevicePresentMonitor,  "sharedInstance"));
  unsigned __int8 v2 = [v1 isPresent];

  if ((v2 & 1) == 0)
  {
    unsigned __int8 v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      unsigned int v6 = "-[CSListeningEnabledPolicyWatch _addListeningEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Listening on watch cannot be turned on since speech detection VAD is disabled",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

void sub_100095530(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _checkCanUseVoiceTriggerDuringCallEnabled];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(unsigned __int8 *)(v3 + 12);
  if (v4 == v2)
  {
    int v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      unsigned int v6 = @"ON";
      if (!v4) {
        unsigned int v6 = @"OFF";
      }
      int v7 = 136315394;
      unsigned __int8 v8 = "-[CSHangUpEnabledMonitor _voiceTriggerDuringCallEnabledDidChange]_block_invoke";
      __int16 v9 = 2114;
      __int16 v10 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Siri Hangup is already %{public}@, received duplicated notification!",  (uint8_t *)&v7,  0x16u);
    }
  }

  else
  {
    *(_BYTE *)(v3 + 12) = v2;
    [*(id *)(a1 + 32) _didReceiveCanUseVoiceTriggerDuringCallSettingChangedInQueue:*(unsigned __int8 *)(*(void *)(a1 + 32) + 12)];
  }

id sub_100095654(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _notifyObserver:a2 withEnabled:*(unsigned __int8 *)(a1 + 40)];
}

id sub_100095668(uint64_t a1, void *a2)
{
  return [a2 _voiceTriggerDuringCallEnabledDidChange];
}

void sub_1000956B0(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSHangUpEnabledMonitor);
  unsigned int v2 = (void *)qword_10027FE98;
  qword_10027FE98 = (uint64_t)v1;
}

LABEL_57:
}

void sub_100097690( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, id a30)
{
}

void sub_100097D0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10009DF94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

LABEL_20:
  *(float *)&double v41 = self->_secondPassPrependingSec;
  double v43 = +[CSFTimeUtils secondsToHostTime:](&OBJC_CLASS___CSFTimeUtils, "secondsToHostTime:", v41);
  secondPassPrependingSec = self->_secondPassPrependingSec;
  +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
  if (v7) {
    v7[2]( v7,  v16 - v43,  (unint64_t)(float)((float)((float)AOPVTTriggerLength + (float)(secondPassPrependingSec * v45))
  }
                              + (float)self->_analyzerTrailingSamples));
}

    double v41 = 0LL;
    goto LABEL_21;
  }

  __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndex:0]);
  [v9 floatValue];
  __int16 v10 = +[CSFTimeUtils millisecondsToNs:](&OBJC_CLASS___CSFTimeUtils, "millisecondsToNs:");

  int v11 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndex:1]);
  [v11 floatValue];
  __int16 v12 = +[CSFTimeUtils millisecondsToNs:](&OBJC_CLASS___CSFTimeUtils, "millisecondsToNs:");

  __int16 v13 = 0;
  if (v7 < 6)
  {
    uint64_t v32 = 0LL;
    __int128 v25 = 0LL;
    __int128 v30 = 0LL;
    uint64_t v18 = 0LL;
    __int128 v20 = 0LL;
    uint64_t v35 = 0;
    __int128 v28 = 0;
    uint64_t v16 = 0;
    __int128 v23 = 0;
    goto LABEL_16;
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndex:2]);
  [v14 floatValue];
  uint64_t v16 = v15;

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndex:3]);
  uint64_t v18 = [v17 intValue];

  int v19 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndex:4]);
  [v19 floatValue];
  __int128 v20 = +[CSFTimeUtils millisecondsToNs:](&OBJC_CLASS___CSFTimeUtils, "millisecondsToNs:");

  __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndex:5]);
  [v21 floatValue];
  __int128 v23 = v22;

  if (v7 < 0xB)
  {
    uint64_t v32 = 0LL;
    __int128 v25 = 0LL;
    __int128 v30 = 0LL;
    uint64_t v35 = 0;
    __int128 v28 = 0;
    goto LABEL_16;
  }

  __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndex:6]);
  [v24 floatValue];
  __int128 v25 = +[CSFTimeUtils millisecondsToNs:](&OBJC_CLASS___CSFTimeUtils, "millisecondsToNs:");

  __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndex:7]);
  [v26 floatValue];
  __int128 v28 = v27;

  __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndex:8]);
  __int128 v30 = [v29 intValue];

  __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndex:9]);
  [v31 floatValue];
  uint64_t v32 = +[CSFTimeUtils millisecondsToNs:](&OBJC_CLASS___CSFTimeUtils, "millisecondsToNs:");

  unint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndex:10]);
  [v33 floatValue];
  uint64_t v35 = v34;

  if (v7 != 13)
  {
LABEL_16:
    uint64_t v40 = 0;
    goto LABEL_17;
  }

  unint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndex:11]);
  [v36 floatValue];
  __int16 v13 = v37;

  uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndex:12]);
  [v38 floatValue];
  uint64_t v40 = v39;

LABEL_17:
  double v41 = objc_alloc_init(&OBJC_CLASS___MHSchemaMHEndpointFeaturesAtEndpoint);
  [v41 setWordCount:v18];
  [v41 setTrailingSilenceDurationInNs:v10];
  LODWORD(v42) = v16;
  [v41 setEndOfSentenceLikelihood:v42];
  [v41 setClientSilenceFramesCountInNs:v12];
  [v41 setServerFeaturesLatencyInNs:v20];
  LODWORD(v43) = v23;
  [v41 setClientSilenceProbability:v43];
  [v41 setRcTrailingSilenceDuration:v25];
  LODWORD(v44) = v28;
  [v41 setRcEndOfSentenceLikelihood:v44];
  [v41 setRcWordCount:v30];
  [v41 setRcServerFeaturesLatency:v32];
  LODWORD(v45) = v35;
  [v41 setSilencePosterior:v45];
  LODWORD(v46) = v13;
  [v41 setAcousticEndpointerScore:v46];
  LODWORD(v47) = v40;
  [v41 setSilencePosteriorFrameCountInNs:v47];
LABEL_21:

  return v41;
}

  id v93 = 0LL;
  __int16 v91 = 0u;
  double v92 = 0u;
  id v15 = 0.0;
LABEL_21:
  uint64_t v32 = (unint64_t)(v13 * v15);
  unint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](&OBJC_CLASS___NSMutableData, "dataWithLength:", v32));
  *(_DWORD *)AudioBufferList ioData = 1;
  uint64_t v34 = self->_fileOption;
  if (v34)
  {
    -[CSAudioInjectionFileOption outASBD](v34, "outASBD");
    uint64_t v35 = HIDWORD(v89);
  }

  else
  {
    uint64_t v35 = 0;
    double v90 = 0LL;
    char v88 = 0u;
    __int16 v89 = 0u;
  }

  *(_DWORD *)&ioData[8] = v35;
  *(_DWORD *)&ioData[12] = v32;
  unint64_t v36 = v33;
  *(void *)&ioData[16] = [v36 bytes];
  uint64_t v16 = v36;
  memset([v16 bytes], 1, v32);
  LODWORD(outExtAudioFile) = v32;
  unint64_t v37 = ExtAudioFileRead( -[CSAudioInjectionFileOption fFile](self->_fileOption, "fFile"),  (UInt32 *)&outExtAudioFile,  (AudioBufferList *)ioData);
  if (!self->_didSetScaleFactor)
  {
    -[CSAudioInjectionFileOption scaleFactor](self->_fileOption, "scaleFactor");
    self->_scaleFactor = v38;
    self->_didSetScaleFactor = 1;
  }

  if (v37) {
    unint64_t v39 = 0;
  }
  else {
    unint64_t v39 = v7 == outExtAudioFile;
  }
  uint64_t v40 = v39;
  if (v37 || !(_DWORD)outExtAudioFile)
  {
    if (v37)
    {
      uint64_t v44 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315394;
        *(void *)&uint8_t buf[4] = "-[CSAudioInjectionEngine _readAudioBufferAndFeed]";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v37;
        _os_log_error_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_ERROR,  "%s ::: Error reading data from audio file : %d",  buf,  0x12u);
      }
    }

    ExtAudioFileDispose(-[CSAudioInjectionFileOption fFile](self->_fileOption, "fFile"));
    -[CSAudioInjectionFileOption setFFile:](self->_fileOption, "setFFile:", 0LL);
    uint64_t v45 = self->_fileOption;
    self->_fileOption = 0LL;

    double v46 = (void (**)(void, void))objc_claimAutoreleasedReturnValue( -[NSMutableArray objectAtIndex:]( self->_injectionCompletionNotifyBlocks,  "objectAtIndex:",  0LL));
    -[NSMutableArray removeObjectAtIndex:](self->_injectionCompletionNotifyBlocks, "removeObjectAtIndex:", 0LL);
    self->_didSetScaleFactor = 0;
    self->_scaleFactor = 0.01;
    float v47 = mach_absolute_time();
    v46[2](v46, v47);
LABEL_64:

    goto LABEL_71;
  }

  if (self->_isRecording)
  {
    double v41 = (void *)objc_claimAutoreleasedReturnValue(-[CSAudioInjectionEngine _deinterleaveBufferIfNeeded:](self, "_deinterleaveBufferIfNeeded:", ioData));
    double v42 = self->_fileOption;
    if (v42)
    {
      -[CSAudioInjectionFileOption outASBD](v42, "outASBD");
      double v43 = HIDWORD(v86);
    }

    else
    {
      double v43 = 0LL;
      int v87 = 0LL;
      uint64_t v85 = 0u;
      char v86 = 0u;
    }

    double v46 = (void (**)(void, void))objc_claimAutoreleasedReturnValue( -[CSAudioInjectionEngine _compensateChannelDataIfNeeded:receivedNumChannels:]( self,  "_compensateChannelDataIfNeeded:receivedNumChannels:",  v41,  v43));

    uint64_t v48 = -[NSMutableData initWithData:](objc_alloc(&OBJC_CLASS___NSMutableData), "initWithData:", v46);
    double v49 = (unint64_t)[v46 length];
    uint64_t v50 = self->_fileOption;
    double v71 = v40;
    double v72 = v48;
    if (v50)
    {
      -[CSAudioInjectionFileOption outASBD](v50, "outASBD");
      double v51 = HIDWORD(v83);
    }

    else
    {
      double v51 = 0LL;
      id v84 = 0LL;
      double v82 = 0u;
      double v83 = 0u;
    }

    if (self->_scaleFactor < 1.0)
    {
      double v73 = (__int16 *)-[NSMutableData bytes](v48, "bytes");
      if (v49 >> 1 >= v51)
      {
        double v52 = 0LL;
        double v53 = (v49 >> 1) / v51;
        while (1)
        {
          double v54 = 0LL;
          do
          {
            for (uint64_t i = 0LL; ; ++i)
            {
              double v56 = self->_fileOption;
              if (v56)
              {
                -[CSAudioInjectionFileOption outASBD](v56, "outASBD");
                double v57 = HIDWORD(v80);
              }

              else
              {
                double v57 = 0LL;
                double v81 = 0LL;
                double v79 = 0u;
                double v80 = 0u;
              }

              if (i >= v57) {
                break;
              }
              v73[v52 + v54 + i * v53] = (int)(float)(self->_scaleFactor * (float)v73[v52 + v54 + i * v53]);
            }

            double v58 = v54 >= 6;
            v54 += 2LL;
          }

          while (!v58);
          scaleFactor = self->_scaleFactor;
          -[CSAudioInjectionFileOption scaleFactor](self->_fileOption, "scaleFactor");
          -[CSAudioInjectionFileOption scaleFactor](self->_fileOption, "scaleFactor");
          self->_scaleFactor = v61 + self->_scaleFactor;
          v52 += 16LL;
          if (v52 >= v53) {
            goto LABEL_61;
          }
        }

        self->_scaleFactor = 1.0;
      }
    }

    objc_msgSend(v16, "replaceBytesInRange:withBytes:length:", 0, *((int *)v52 + 6), 0, 0);
    __int128 v29 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v36 = *((_DWORD *)v52 + 6);
      unint64_t v37 = [v16 length];
      *(_DWORD *)__int128 buf = 136315650;
      double v56 = "-[CSAudioConverter _convertBufferedLPCM:allowPartial:timestamp:arrivalTimestampToAudioRecorder:]";
      double v57 = 1026;
      double v58 = v36;
      double v59 = 1026;
      id v60 = v37;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "%s %{public}d bytesConsumed from opus coverter, remains %{public}d bytes",  buf,  0x18u);
    }

    *((_DWORD *)v52 + 6) = 0;
    if ([v6 count])
    {
      p_delegate = (id *)&v44->_delegate;
      id WeakRetained = objc_loadWeakRetained((id *)&v44->_delegate);
      uint64_t v32 = WeakRetained == 0LL;

      if (!v32)
      {
        unint64_t v33 = objc_loadWeakRetained(p_delegate);
        uint64_t v34 = v44->_outPacketSizeInSec;
        *(float *)&uint64_t v35 = v34 * (float)(unint64_t)[v6 count];
        [v33 audioConverterDidConvertPackets:v44 packets:v6 durationInSec:v38 timestamp:v39 arrivalTimestampToAudioRecorder:v35];
      }
    }
  }

  else
  {
    __int128 v27 = (os_log_s *)CSLogCategoryAudio;
    if (os_log_type_enabled(CSLogCategoryAudio, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      double v56 = "-[CSAudioConverter _convertBufferedLPCM:allowPartial:timestamp:arrivalTimestampToAudioRecorder:]";
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "%s There is not audio buffer to convert. Skip this.",  buf,  0xCu);
    }
  }

  _Block_object_dispose(&v51, 8);
}

void sub_1000A039C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000A109C(uint64_t a1, void *a2, unsigned int a3, unsigned int a4, unsigned int a5, void *a6)
{
  id v11 = a2;
  id v12 = a6;
  __int16 v13 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 136315906;
    uint64_t v16 = "-[CSVoiceTriggerSecondPass _syncVoiceProfileEmbeddingsToExclave]_block_invoke";
    __int16 v17 = 1024;
    unsigned int v18 = a3;
    __int16 v19 = 1024;
    unsigned int v20 = a4;
    __int16 v21 = 2112;
    id v22 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%s PSR Profile Embedding extract : %d * %d with error %@",  (uint8_t *)&v15,  0x22u);
  }

  if (v11)
  {
    [*(id *)(*(void *)(a1 + 32) + 488) setSpeakerProfile:v11 numEmbeddings:a3 dimension:a4 speakerRecognizerType:a5];
  }

  else
  {
    uint64_t v14 = (os_log_s *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315138;
      uint64_t v16 = "-[CSVoiceTriggerSecondPass _syncVoiceProfileEmbeddingsToExclave]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s PSR Profile embedding is nil, not sending embedding to Exclave",  (uint8_t *)&v15,  0xCu);
    }
  }
}

void sub_1000A121C(uint64_t a1, void *a2, unsigned int a3, unsigned int a4, unsigned int a5, void *a6)
{
  id v11 = a2;
  id v12 = a6;
  __int16 v13 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 136315906;
    uint64_t v16 = "-[CSVoiceTriggerSecondPass _syncVoiceProfileEmbeddingsToExclave]_block_invoke";
    __int16 v17 = 1024;
    unsigned int v18 = a3;
    __int16 v19 = 1024;
    unsigned int v20 = a4;
    __int16 v21 = 2112;
    id v22 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%s SAT Profile Embedding extract : %d * %d  with error %@",  (uint8_t *)&v15,  0x22u);
  }

  if (v11)
  {
    [*(id *)(*(void *)(a1 + 32) + 488) setSpeakerProfile:v11 numEmbeddings:a3 dimension:a4 speakerRecognizerType:a5];
  }

  else
  {
    uint64_t v14 = (os_log_s *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315138;
      uint64_t v16 = "-[CSVoiceTriggerSecondPass _syncVoiceProfileEmbeddingsToExclave]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s SAT Profile embedding is nil, not sending embedding to Exclave",  (uint8_t *)&v15,  0xCu);
    }
  }
}

void sub_1000A139C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _scheduleDidStartSecondPassCompletionWatchDogWithToken:*(void *)(a1 + 32)];
}

float sub_1000A13D8(uint64_t a1)
{
  float result = *(float *)(a1 + 40);
  *(float *)(*(void *)(a1 + 32) + 48LL) = result;
  return result;
}

uint64_t sub_1000A13E8(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 376LL) = *(void *)(result + 40);
  return result;
}

id sub_1000A13F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reset];
}

id sub_1000A13FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _clearTriggerCandidate];
}

uint64_t sub_1000A1404(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = a2;
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = a3;
  return result;
}

void sub_1000A1420(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      id v8 = v5;
      int v7 = -[CSVoiceTriggerSecondPassResultHolder initWithResult:voiceTriggerEventInfo:isSecondChanceCandidate:]( objc_alloc(&OBJC_CLASS___CSVoiceTriggerSecondPassResultHolder),  "initWithResult:voiceTriggerEventInfo:isSecondChanceCandidate:",  4LL,  0LL,  0LL);
      (*(void (**)(uint64_t, CSVoiceTriggerSecondPassResultHolder *, id))(v6 + 16))(v6, v7, v8);

      id v5 = v8;
    }
  }
}

id sub_1000A1498(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _logUptimeWithVTSwitchChanged:1 VTEnabled:*(unsigned __int8 *)(a1 + 40)];
  if (!*(_BYTE *)(a1 + 40)) {
    return +[CSAudioFileManager pruneNumberOfLogFilesTo:]( &OBJC_CLASS___CSAudioFileManager,  "pruneNumberOfLogFilesTo:",  0LL);
  }
  return result;
}

id sub_1000A14E4(uint64_t a1)
{
  uint64_t v2 = qword_10027FEA8;
  if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * qword_10027FEA8, 1) <= 0x888888888888888uLL)
  {
    kdebug_trace(722472276LL, 0LL, 0LL, 0LL, 0LL);
    uint64_t v2 = qword_10027FEA8;
  }

  qword_10027FEA8 = v2 + 1;
  uint64_t v3 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v3 + 13)) {
    return [*(id *)(v3 + 392) addObject:*(void *)(a1 + 40)];
  }
  uint64_t v4 = *(void *)(v3 + 448);
  if ([*(id *)(v3 + 392) count])
  {
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    id v5 = *(id *)(*(void *)(a1 + 32) + 392LL);
    id v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v12;
      do
      {
        __int16 v9 = 0LL;
        do
        {
          if (*(void *)v12 != v8) {
            objc_enumerationMutation(v5);
          }
          objc_msgSend( *(id *)(a1 + 32),  "_handleAudioChunk:shouldPreprocessedByZeroFilter:",  *(void *)(*((void *)&v11 + 1) + 8 * (void)v9),  v4 != 0,  (void)v11);
          __int16 v9 = (char *)v9 + 1;
        }

        while (v7 != v9);
        id v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }

      while (v7);
    }

    [*(id *)(*(void *)(a1 + 32) + 392) removeAllObjects];
  }

  return [*(id *)(a1 + 32) _handleAudioChunk:*(void *)(a1 + 40) shouldPreprocessedByZeroFilter:v4 != 0];
}

void sub_1000A16AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, float a8, float a9, float a10)
{
  if (a2)
  {
    if (*(_BYTE *)(a1 + 48))
    {
      [*(id *)(*(void *)(a1 + 32) + 488) stopSecondPassVoiceTrigger];
      [*(id *)(a1 + 32) _notifySecondPassReject:0 result:2 isSecondChanceCandidate:0];
      *(void *)(*(void *)(a1 + 32) + 168LL) = 0LL;
      if (a2 == 3)
      {
LABEL_11:
        __int128 v26 = (void *)CSLogCategoryVT;
        if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
        {
          __int128 v27 = *(void **)(a1 + 32);
          __int128 v28 = v26;
          __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([v27 UUID]);
          *(_DWORD *)__int128 buf = 136315394;
          uint64_t v34 = "-[CSVoiceTriggerSecondPass _processSecondPassInExclave:]_block_invoke";
          __int16 v35 = 2114;
          unint64_t v36 = v29;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "%s CSVoiceTriggerSecondPass[%{public}@]:Skip increasing _numAnalyzedSamples since Exclave didn't process audio chunk",  buf,  0x16u);
        }

        return;
      }
    }

    else
    {
      if (a2 == 3) {
        goto LABEL_11;
      }
      if (a2 == 1)
      {
        uint64_t v21 = *(void *)(a1 + 32);
        id v22 = *(void **)(a1 + 40);
        __int128 v23 = *(dispatch_queue_s **)(v21 + 88);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_1000A1920;
        block[3] = &unk_10022EB58;
        void block[4] = v21;
        id v32 = v22;
        dispatch_async(v23, block);
      }
    }

    uint64_t v24 = *(void *)(a1 + 32);
    __int128 v25 = *(dispatch_queue_s **)(v24 + 88);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_1000A192C;
    v30[3] = &unk_10022F100;
    void v30[4] = v24;
    dispatch_async(v25, v30);
    return;
  }

  [*(id *)(*(void *)(a1 + 32) + 488) stopSecondPassVoiceTrigger];
  uint64_t v20 = *(void *)(a1 + 40);
  if (v20) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, float, float, float))(v20 + 16))( v20,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10);
  }
}

id sub_1000A1920(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processSecondPassInExclave:*(void *)(a1 + 40)];
}

id sub_1000A192C(uint64_t a1)
{
  id result = +[CSConfig exclaveRecordingNumSamples](&OBJC_CLASS___CSConfig, "exclaveRecordingNumSamples");
  *(void *)(*(void *)(a1 + 32) + 184LL) += result;
  return result;
}

void sub_1000A1964( uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, double a6, float a7, float a8, float a9)
{
  unsigned int v18 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315394;
    double v92 = "-[CSVoiceTriggerSecondPass audioStreamProvider:numSamplesAvailableInExclave:hostTime:arrivalHostTimeToAudioRec"
          "order:exclaveSampleCount:]_block_invoke";
    __int16 v93 = 2050;
    uint64_t v94 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%s Detected 2nd-pass trigger at %{public}llu",  buf,  0x16u);
  }

  int v87 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 128) phraseDetectorInfoFromPhId:a3]);
  double v82 = (void *)objc_claimAutoreleasedReturnValue([v87 phraseConfig]);
  char v88 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _getFirstPassTriggerSourceAsString:*(void *)(*(void *)(a1 + 32) + 336)]);
  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(+[CSBatteryMonitor sharedInstance](&OBJC_CLASS___CSBatteryMonitor, "sharedInstance"));
  BOOL v20 = [v19 batteryState] == 2;

  uint64_t v21 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _fetchSiriLocale]);
  uint64_t v22 = *(void *)(*(void *)(a1 + 32) + 184LL) + *(void *)(*(void *)(a1 + 32) + 288LL);
  double v23 = (double)a4;
  +[CSUtils systemUpTime](&OBJC_CLASS___CSUtils, "systemUpTime");
  double v25 = v24;
  __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getExclaveAudioTimeConverter]);
  id v79 = [v26 hostTimeFromSampleCount:a4];

  __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getExclaveAudioTimeConverter]);
  id v78 = [v27 hostTimeFromSampleCount:a5];

  uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 304LL)));
  id v84 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1 + 32) + 312LL)));
  float v28 = (float)(unint64_t)(*(void *)(a1 + 40) - a2);
  +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
  double v30 = (float)(v28 / v29);
  v90[0] = @"exclave-built-in";
  v89[0] = kVTEIconfigVersion;
  v89[1] = kVTEIbuildVersion;
  double v83 = (void *)objc_claimAutoreleasedReturnValue(+[CSUtils deviceBuildVersion](&OBJC_CLASS___CSUtils, "deviceBuildVersion"));
  v90[1] = v83;
  v90[2] = @"N/A";
  v89[2] = kVTEIconfigPath;
  v89[3] = kVTEIConfigDataHash;
  v90[3] = @"N/A";
  v89[4] = kVTEIOnBatteryPower;
  double v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v20));
  v90[4] = v81;
  v90[5] = &__kCFBooleanFalse;
  v89[5] = kVTEISatBeingTrained;
  v89[6] = kVTEIisSecondChance;
  v90[6] = &__kCFBooleanFalse;
  v89[7] = kVTEIhardwareSamplerate;
  +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
  double v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:"));
  v90[7] = v80;
  v89[8] = kVTEItriggerStartSampleCount;
  double v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a2));
  v90[8] = v77;
  v89[9] = kVTEIclientStartSampleCount;
  double v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a2));
  v90[9] = v76;
  v89[10] = kVTEIsecondPassAnalyzerEndSampleCount;
  double v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v22));
  v90[10] = v75;
  v89[11] = kVTEIsecondPassAnalyzerStartSampleCount;
  uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(*(void *)(a1 + 32) + 288LL)));
  v90[11] = v74;
  v90[12] = &off_1002382D0;
  v89[12] = kVTEItriggerStartSeconds;
  v89[13] = kVTEItriggerEndSeconds;
  double v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v30));
  v90[13] = v73;
  v89[14] = kVTEItriggerStartTime;
  double v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v23));
  v90[14] = v72;
  v89[15] = kVTEItriggerEndTime;
  double v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", (double)a5));
  v90[15] = v71;
  v89[16] = kVTEItriggerDuration;
  double v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", (double)a5 - v23));
  v90[16] = v70;
  v89[17] = kVTEItriggerFiredTime;
  double v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v25));
  v90[17] = v69;
  v90[18] = &__kCFBooleanFalse;
  v89[18] = kVTEIisContinuous;
  v89[19] = kVTEItriggerEndSampleCount;
  __int16 v68 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 40)));
  v90[19] = v68;
  v89[20] = kVTEItriggerFireSampleCount;
  id v67 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 40)));
  v90[20] = v67;
  v89[21] = kVTEIactiveChannel;
  double v66 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(*(void *)(a1 + 32) + 224LL)));
  v90[21] = v66;
  v89[22] = kVTEItriggerScore;
  *(float *)&double v31 = a7;
  double v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v31));
  v90[22] = v65;
  v89[23] = kVTEITriggeredPhId;
  uint64_t v32 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a3));
  uint64_t v64 = (void *)v32;
  unint64_t v33 = &__kCFBooleanTrue;
  if (a8 <= 0.0) {
    unint64_t v33 = &__kCFBooleanFalse;
  }
  v90[23] = v32;
  v90[24] = v33;
  v89[24] = kVTEIsatTriggered;
  v89[25] = kVTEILanguageCode;
  char v86 = (void *)v21;
  v90[25] = v21;
  v90[26] = v88;
  v89[26] = kVTEIfirstPassTriggerSource;
  v89[27] = kVTEIExclaveSignalIntensity;
  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a6));
  v90[27] = v34;
  v89[28] = kVTEItotalSamplesAtEndOfCapture;
  __int16 v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(*(void *)(a1 + 32) + 184LL)));
  v90[28] = v35;
  v89[29] = kVTEItdsrCombinedScore;
  *(float *)&double v36 = a8;
  unint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v36));
  v90[29] = v37;
  v89[30] = kVTEIrecognizerScore;
  *(float *)&double v38 = a9;
  unint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v38));
  v90[30] = v39;
  v89[31] = kVTEIearlyDetectFiredMachTime;
  uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(*(void *)(a1 + 32) + 216LL)));
  v90[31] = v40;
  v89[32] = kVTEItriggerStartMachTime;
  double v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v79));
  v90[32] = v41;
  v89[33] = kVTEItriggerEndMachTime;
  double v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v78));
  v90[33] = v42;
  double v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v90,  v89,  34LL));

  id v44 = [v43 mutableCopy];
  uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v82 name]);

  if (v45)
  {
    double v46 = (void *)objc_claimAutoreleasedReturnValue([v82 name]);
    [v44 setObject:v46 forKey:kVTEITriggeredPh];
  }

  [v85 doubleValue];
  float v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  [v44 setObject:v47 forKey:kVTEIuptime];

  [v84 doubleValue];
  uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  [v44 setObject:v48 forKey:kVTEIdowntime];

  if ([*(id *)(a1 + 32) _shouldLogMediaplayState:*(void *)(*(void *)(a1 + 32) + 336)])
  {
    uint64_t v49 = *(void *)(*(void *)(a1 + 32) + 376LL);
    uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v49 == 1));
    [v44 setObject:v50 forKey:kVTEIisMediaPlaying];

    if (v49 == 1)
    {
      LODWORD(v51) = *(_DWORD *)(*(void *)(a1 + 32) + 48LL);
      double v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v51));
      [v44 setObject:v52 forKey:kVTEImediaVolume];
    }
  }

  double v53 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioProviderUUID]);

  if (v53)
  {
    double v54 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioProviderUUID]);
    [v44 setObject:v54 forKey:kVTEIAudioProviderUUID];
  }

  double v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  double v56 = (void *)objc_claimAutoreleasedReturnValue([v55 UUIDString]);
  [v44 setObject:v56 forKey:kVTEISelfLoggingUUID];

  double v57 = *(id **)(a1 + 32);
  if (v57[55])
  {
    double v58 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  +[CSFTimeUtils hostTimeToNs:]( CSFTimeUtils,  "hostTimeToNs:",  [v57[55] secondPassAudioStreamStartTime])));
    [v44 setObject:v58 forKey:kVTEISecondPassAudioStreamStartTime];

    double v59 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  +[CSFTimeUtils hostTimeToNs:]( CSFTimeUtils,  "hostTimeToNs:",  [*(id *)(*(void *)(a1 + 32) + 440) secondPassAudioStreamReadyTime])));
    [v44 setObject:v59 forKey:kVTEISecondPassAudioStreamReadyTime];

    id v60 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  +[CSFTimeUtils hostTimeToNs:]( CSFTimeUtils,  "hostTimeToNs:",  [*(id *)(*(void *)(a1 + 32) + 440) secondPassFirstAudioPacketReceptionTime])));
    [v44 setObject:v60 forKey:kVTEISecondPassFirstAudioPacketReceptionTime];

    uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  +[CSFTimeUtils hostTimeToNs:]( CSFTimeUtils,  "hostTimeToNs:",  [*(id *)(*(void *)(a1 + 32) + 440) secondPassLastAudioPacketReceptionTime])));
    [v44 setObject:v61 forKey:kVTEISecondPassLastAudioPacketReceptionTime];

    __int16 v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  +[CSFTimeUtils hostTimeToNs:]( CSFTimeUtils,  "hostTimeToNs:",  [*(id *)(*(void *)(a1 + 32) + 440) secondPassCheckerModelKeywordDetectionStartTime])));
    [v44 setObject:v62 forKey:kVTEISecondPassCheckerModelKeywordDetectionStartTime];

    uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  +[CSFTimeUtils hostTimeToNs:]( CSFTimeUtils,  "hostTimeToNs:",  [*(id *)(*(void *)(a1 + 32) + 440) secondPassCheckerModelKeywordDetectionEndTime])));
    [v44 setObject:v63 forKey:kVTEISecondPassCheckerModelKeywordDetectionEndTime];

    double v57 = *(id **)(a1 + 32);
  }

  [v57 _handleSecondPassSuccess:v44];
}

id sub_1000A2524(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processSecondPassInExclave:*(void *)(a1 + 40)];
}

id sub_1000A2550(uint64_t a1)
{
  return [*(id *)(a1 + 32) _didStopAudioStream];
}

void sub_1000A2558(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(dispatch_queue_s **)(v2 + 88);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000A25E0;
  v6[3] = &unk_10022BFA0;
  uint64_t v5 = *(void *)(a1 + 48);
  v6[4] = v2;
  uint64_t v8 = v5;
  id v7 = v3;
  char v9 = *(_BYTE *)(a1 + 56);
  dispatch_async(v4, v6);
}

id sub_1000A25E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleResultCompletion:*(void *)(a1 + 48) voiceTriggerInfo:*(void *)(a1 + 40) isSecondChanceCandidate:*(unsigned __int8 *)(a1 + 56) error:0];
}

void sub_1000A2614(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)CSLogCategoryVT;
  if ((a2 & 1) == 0)
  {
    if (!os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR)) {
      goto LABEL_6;
    }
    __int16 v10 = *(void **)(a1 + 32);
    uint64_t v8 = v6;
    char v9 = (void *)objc_claimAutoreleasedReturnValue([v10 UUID]);
    __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
    int v12 = 136315650;
    __int128 v13 = "-[CSVoiceTriggerSecondPass _voiceTriggerFirstPassDidDetectKeywordFrom:completion:]_block_invoke";
    __int16 v14 = 2114;
    int v15 = v9;
    __int16 v16 = 2114;
    __int16 v17 = v11;
    _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s CSVoiceTriggerSecondPass[%{public}@]:AFSiriActivationBluetoothDeviceVoiceTriggerPrewarm failed : %{public}@",  (uint8_t *)&v12,  0x20u);

    goto LABEL_4;
  }

  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = *(void **)(a1 + 32);
    uint64_t v8 = v6;
    char v9 = (void *)objc_claimAutoreleasedReturnValue([v7 UUID]);
    int v12 = 136315394;
    __int128 v13 = "-[CSVoiceTriggerSecondPass _voiceTriggerFirstPassDidDetectKeywordFrom:completion:]_block_invoke";
    __int16 v14 = 2114;
    int v15 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s CSVoiceTriggerSecondPass[%{public}@]:AFSiriActivationBluetoothDeviceVoiceTriggerPrewarm success",  (uint8_t *)&v12,  0x16u);
LABEL_4:
  }

void sub_1000A279C(uint64_t a1, int a2, void *a3)
{
  id v6 = (void *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = *(void **)(a1 + 32);
    uint64_t v8 = v6;
    id v9 = a3;
    __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([v7 UUID]);
    if (a2) {
      __int128 v11 = @"YES";
    }
    else {
      __int128 v11 = @"NO";
    }
    int v12 = (void *)objc_claimAutoreleasedReturnValue([v9 localizedDescription]);

    int v13 = 136315906;
    __int16 v14 = "-[CSVoiceTriggerSecondPass _voiceTriggerFirstPassDidDetectKeywordFrom:completion:]_block_invoke";
    __int16 v15 = 2114;
    __int16 v16 = v10;
    __int16 v17 = 2114;
    unsigned int v18 = v11;
    __int16 v19 = 2114;
    BOOL v20 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s CSVoiceTriggerSecondPass[%{public}@]:Finished prewarming Remora : %{public}@, error : %{public}@",  (uint8_t *)&v13,  0x2Au);
  }

void sub_1000A28D4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) mutableCopy];
  uint64_t v4 = a1 + 32;
  uint64_t v3 = *(void *)(a1 + 32);
  id v5 = *(void **)(v3 + 416);
  *(void *)(v3 + 416) = v2;

  uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) rejectionMHUUID]);
  id v7 = *(void **)(*(void *)(a1 + 32) + 424LL);
  *(void *)(*(void *)v4 + 424LL) = v6;

  *(_BYTE *)(*(void *)v4 + 14LL) = 0;
  uint64_t v8 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) firstpassMetrics]);
  id v9 = *(void **)(*(void *)(a1 + 32) + 432LL);
  *(void *)(*(void *)v4 + 432LL) = v8;

  objc_initWeak(&location, *(id *)(a1 + 32));
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472LL;
  v29[2] = sub_1000A2EE4;
  v29[3] = &unk_10022BF50;
  objc_copyWeak(&v31, &location);
  id v30 = *(id *)(a1 + 72);
  __int16 v10 = objc_retainBlock(v29);
  if (*(_BYTE *)(*(void *)(a1 + 32) + 10LL))
  {
    __int128 v11 = (CSVoiceTriggerSecondPassResultHolder *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  502LL,  0LL));
    int v12 = (os_log_s *)CSLogCategoryVT;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      double v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) UUID]);
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v34 = "-[CSVoiceTriggerSecondPass _voiceTriggerFirstPassDidDetectKeywordFrom:completion:]_block_invoke";
      __int16 v35 = 2114;
      id v36 = v23;
      _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%s CSVoiceTriggerSecondPass[%{public}@]:Ignoring first pass trigger since we are already performing second pass on a trigger candidate",  buf,  0x16u);
    }

    int v13 = -[CSVoiceTriggerSecondPassResultHolder initWithResult:voiceTriggerEventInfo:isSecondChanceCandidate:]( objc_alloc(&OBJC_CLASS___CSVoiceTriggerSecondPassResultHolder),  "initWithResult:voiceTriggerEventInfo:isSecondChanceCandidate:",  8LL,  0LL,  0LL);
    ((void (*)(void *, CSVoiceTriggerSecondPassResultHolder *, CSVoiceTriggerSecondPassResultHolder *))v10[2])( v10,  v13,  v11);
  }

  else
  {
    [*(id *)(a1 + 32) _scheduleSecondPassCompletionWatchDog];
    [*(id *)(a1 + 32) _reset];
    *(_BYTE *)(*(void *)(a1 + 32) + 1+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 1;
    *(_BYTE *)(*(void *)(a1 + 32) + 12LL) = 0;
    *(void *)(*(void *)(a1 + 32) + 48+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0LL;
    *(void *)(*(void *)(a1 + 32) + 472LL) = 0LL;
    *(void *)(*(void *)(a1 + 32) + 176LL) = 0LL;
    *(void *)(*(void *)(a1 + 32) + 184LL) = 0LL;
    *(void *)(*(void *)(a1 + 32) + 336LL) = *(void *)(a1 + 80);
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 344LL), *(id *)(a1 + 56));
    [*(id *)(a1 + 32) _getDidWakeAP:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _resetStartAnalyzeTime];
    [*(id *)(*(void *)(a1 + 32) + 128) setRunAsSecondChance:*(unsigned __int8 *)(a1 + 88)];
    id v14 = [*(id *)(a1 + 32) setZeroFilter:0];
    switch(*(void *)(a1 + 80))
    {
      case 1LL:
      case 5LL:
      case 8LL:
      case 9LL:
        [*(id *)(a1 + 32) _handleVoiceTriggerFirstPassFromAP:*(void *)(a1 + 40) audioProviderUUID:*(void *)(a1 + 64) completion:v10];
        goto LABEL_7;
      case 2LL:
        if (CSHasAOP(v14))
        {
          [*(id *)(a1 + 32) _handleVoiceTriggerFirstPassFromAOP:*(void *)(a1 + 40) audioProviderUUID:*(void *)(a1 + 64) completion:v10];
          goto LABEL_7;
        }

        double v25 = (os_log_s *)CSLogCategoryVT;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          float v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) UUID]);
          *(_DWORD *)__int128 buf = 136315394;
          uint64_t v34 = "-[CSVoiceTriggerSecondPass _voiceTriggerFirstPassDidDetectKeywordFrom:completion:]_block_invoke";
          __int16 v35 = 2114;
          id v36 = v28;
          _os_log_error_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "%s CSVoiceTriggerSecondPass[%{public}@]:Unable to handle VoiceTrigger AOP first pass on this platform",  buf,  0x16u);
        }

        __int128 v11 = -[CSVoiceTriggerSecondPassResultHolder initWithResult:voiceTriggerEventInfo:isSecondChanceCandidate:]( objc_alloc(&OBJC_CLASS___CSVoiceTriggerSecondPassResultHolder),  "initWithResult:voiceTriggerEventInfo:isSecondChanceCandidate:",  4LL,  0LL,  0LL);
        int v13 = (CSVoiceTriggerSecondPassResultHolder *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  114LL,  0LL));
        ((void (*)(void *, CSVoiceTriggerSecondPassResultHolder *, CSVoiceTriggerSecondPassResultHolder *))v10[2])( v10,  v11,  v13);
        break;
      case 3LL:
        uint64_t v16 = *(void *)(a1 + 56);
        uint64_t v15 = *(void *)(a1 + 64);
        unsigned int v18 = *(void **)(a1 + 32);
        uint64_t v17 = *(void *)(a1 + 40);
        __int128 v11 = (CSVoiceTriggerSecondPassResultHolder *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) rtModelRequestOptions]);
        [v18 _handleVoiceTriggerFirstPassFromHearst:3 deviceId:v16 audioProviderUUID:v15 firstPassInfo:v17 rtModelRequestOptions:v11 completion:v10];
        goto LABEL_6;
      case 4LL:
        [*(id *)(a1 + 32) _handleVoiceTriggerFirstPassFromJarvis:4 deviceId:*(void *)(a1 + 56) audioProviderUUID:*(void *)(a1 + 64) firstPassInfo:*(void *)(a1 + 40) completion:v10];
        goto LABEL_7;
      case 6LL:
        uint64_t v20 = *(void *)(a1 + 56);
        uint64_t v19 = *(void *)(a1 + 64);
        uint64_t v22 = *(void **)(a1 + 32);
        uint64_t v21 = *(void *)(a1 + 40);
        __int128 v11 = (CSVoiceTriggerSecondPassResultHolder *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) rtModelRequestOptions]);
        [v22 _handleVoiceTriggerFirstPassFromHearstAP:6 deviceId:v20 audioProviderUUID:v19 firstPassInfo:v21 rtModelRequestOptions:v11 completion:v10];
        goto LABEL_6;
      case 7LL:
        [*(id *)(a1 + 32) _handleVoiceTriggerFirstPassFromRemora:7 deviceId:*(void *)(a1 + 56) audioProviderUUID:*(void *)(a1 + 64) firstPassInfo:*(void *)(a1 + 40) completion:v10];
        goto LABEL_7;
      default:
        if (objc_msgSend(*(id *)(a1 + 32), "_isFirstPassSourceExclave:"))
        {
          [*(id *)(a1 + 32) _handleVoiceTriggerFirstPassFromExclave:*(void *)(a1 + 40) audioProviderUUID:*(void *)(a1 + 64) completion:v10];
          goto LABEL_7;
        }

        __int128 v11 = (CSVoiceTriggerSecondPassResultHolder *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  501LL,  0LL));
        double v24 = (os_log_s *)CSLogCategoryVT;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          id v26 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) UUID]);
          __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(-[CSVoiceTriggerSecondPassResultHolder localizedDescription](v11, "localizedDescription"));
          *(_DWORD *)__int128 buf = 136315650;
          uint64_t v34 = "-[CSVoiceTriggerSecondPass _voiceTriggerFirstPassDidDetectKeywordFrom:completion:]_block_invoke";
          __int16 v35 = 2114;
          id v36 = v26;
          __int16 v37 = 2114;
          double v38 = v27;
          _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%s CSVoiceTriggerSecondPass[%{public}@]:Unable to handle VoiceTrigger first pass : %{public}@",  buf,  0x20u);
        }

        int v13 = -[CSVoiceTriggerSecondPassResultHolder initWithResult:voiceTriggerEventInfo:isSecondChanceCandidate:]( objc_alloc(&OBJC_CLASS___CSVoiceTriggerSecondPassResultHolder),  "initWithResult:voiceTriggerEventInfo:isSecondChanceCandidate:",  4LL,  0LL,  0LL);
        ((void (*)(void *, CSVoiceTriggerSecondPassResultHolder *, CSVoiceTriggerSecondPassResultHolder *))v10[2])( v10,  v13,  v11);
        break;
    }
  }

LABEL_6:
LABEL_7:

  objc_destroyWeak(&v31);
  objc_destroyWeak(&location);
}

void sub_1000A2EAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000A2EE4(uint64_t a1, void *a2, void *a3)
{
  id v16 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v8 = WeakRetained;
  if (WeakRetained)
  {
    id v9 = (void *)WeakRetained[43];
    WeakRetained[42] = 0LL;
    WeakRetained[43] = 0LL;

    id WeakRetained = [v16 result];
    if (WeakRetained != (void *)8)
    {
      [v8 _clearTriggerCandidate];
      [v8 _clearSecondPassCompletionWatchDog];
      __int16 v10 = (void *)v8[17];
      v8[17] = 0LL;
    }
  }

  uint64_t v11 = CSIsHorseman(WeakRetained, v7);
  if ((v11 & 1) != 0 || (CSIsIOS(v11, v12) & 1) != 0 || CSIsAppleSiliconMac())
  {
    int v13 = (void *)objc_claimAutoreleasedReturnValue(+[CSVoiceTriggerStatistics sharedInstance](&OBJC_CLASS___CSVoiceTriggerStatistics, "sharedInstance"));
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v16 voiceTriggerEventInfo]);
    [v13 updateVTEstimationStatistics:v14];
  }

  uint64_t v15 = *(void *)(a1 + 32);
  if (v15) {
    (*(void (**)(uint64_t, id, id))(v15 + 16))(v15, v16, v5);
  }
}

id sub_1000A2FE8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioStream]);

  if (v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioStream]);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    id v14[2] = sub_1000A3158;
    v14[3] = &unk_10022E730;
    v14[4] = *(void *)(a1 + 32);
    [v3 stopAudioStreamWithOption:0 completion:v14];
  }

  uint64_t v4 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v4 + 14))
  {
    int v5 = CSIsInternalBuild();
    uint64_t v4 = *(void *)(a1 + 32);
    if (v5)
    {
      uint64_t v6 = *(void **)(v4 + 416);
      if (!v6)
      {
        uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        uint64_t v8 = *(void *)(a1 + 32);
        id v9 = *(void **)(v8 + 416);
        *(void *)(v8 + 416) = v7;

        uint64_t v4 = *(void *)(a1 + 32);
        uint64_t v6 = *(void **)(v4 + 416);
      }

      __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([(id)v4 _getFirstPassTriggerSourceAsString:*(void *)(v4 + 336)]);
      [v6 setObject:v10 forKey:kVTEIfirstPassTriggerSource];

      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[CSFVoiceTriggerEventInfoSelfLogger sharedLogger]( &OBJC_CLASS___CSFVoiceTriggerEventInfoSelfLogger,  "sharedLogger"));
      [v11 logStartEventWithFirstPassStartedInfo:*(void *)(*(void *)(a1 + 32) + 416) withMHUUID:*(void *)(*(void *)(a1 + 32) + 424)];

      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[CSFVoiceTriggerEventInfoSelfLogger sharedLogger]( &OBJC_CLASS___CSFVoiceTriggerEventInfoSelfLogger,  "sharedLogger"));
      [v12 logCancelledEventWithMHUUID:*(void *)(*(void *)(a1 + 32) + 424)];

      *(_BYTE *)(*(void *)(a1 + 32) + 14LL) = 1;
      uint64_t v4 = *(void *)(a1 + 32);
    }
  }

  return [(id)v4 _resetVoiceTriggerLatencyMetrics];
}

void sub_1000A3158(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(dispatch_queue_s **)(v1 + 88);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000A31B0;
  block[3] = &unk_10022F100;
  void block[4] = v1;
  dispatch_async(v2, block);
}

id sub_1000A31B0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleResultCompletion:6 voiceTriggerInfo:0 isSecondChanceCandidate:0 error:0];
}

void sub_1000A31E8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      id v8 = v5;
      uint64_t v7 = -[CSVoiceTriggerSecondPassResultHolder initWithResult:voiceTriggerEventInfo:isSecondChanceCandidate:]( objc_alloc(&OBJC_CLASS___CSVoiceTriggerSecondPassResultHolder),  "initWithResult:voiceTriggerEventInfo:isSecondChanceCandidate:",  4LL,  0LL,  0LL);
      (*(void (**)(uint64_t, CSVoiceTriggerSecondPassResultHolder *, id))(v6 + 16))(v6, v7, v8);

      id v5 = v8;
    }
  }
}

void sub_1000A3260(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v8 = v5;
    [*(id *)(a1 + 32) setResultCompletion:*(void *)(a1 + 40)];
LABEL_5:
    id v5 = v8;
    goto LABEL_6;
  }

  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    id v8 = v5;
    uint64_t v7 = -[CSVoiceTriggerSecondPassResultHolder initWithResult:voiceTriggerEventInfo:isSecondChanceCandidate:]( objc_alloc(&OBJC_CLASS___CSVoiceTriggerSecondPassResultHolder),  "initWithResult:voiceTriggerEventInfo:isSecondChanceCandidate:",  4LL,  0LL,  0LL);
    (*(void (**)(uint64_t, CSVoiceTriggerSecondPassResultHolder *, id))(v6 + 16))(v6, v7, v8);

    goto LABEL_5;
  }

void sub_1000A32E8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      id v8 = v5;
      uint64_t v7 = -[CSVoiceTriggerSecondPassResultHolder initWithResult:voiceTriggerEventInfo:isSecondChanceCandidate:]( objc_alloc(&OBJC_CLASS___CSVoiceTriggerSecondPassResultHolder),  "initWithResult:voiceTriggerEventInfo:isSecondChanceCandidate:",  4LL,  0LL,  0LL);
      (*(void (**)(uint64_t, CSVoiceTriggerSecondPassResultHolder *, id))(v6 + 16))(v6, v7, v8);

      id v5 = v8;
    }
  }
}

void sub_1000A3360(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      id v8 = v5;
      uint64_t v7 = -[CSVoiceTriggerSecondPassResultHolder initWithResult:voiceTriggerEventInfo:isSecondChanceCandidate:]( objc_alloc(&OBJC_CLASS___CSVoiceTriggerSecondPassResultHolder),  "initWithResult:voiceTriggerEventInfo:isSecondChanceCandidate:",  4LL,  0LL,  0LL);
      (*(void (**)(uint64_t, CSVoiceTriggerSecondPassResultHolder *, id))(v6 + 16))(v6, v7, v8);

      id v5 = v8;
    }
  }
}

void sub_1000A33D8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      id v8 = v5;
      uint64_t v7 = -[CSVoiceTriggerSecondPassResultHolder initWithResult:voiceTriggerEventInfo:isSecondChanceCandidate:]( objc_alloc(&OBJC_CLASS___CSVoiceTriggerSecondPassResultHolder),  "initWithResult:voiceTriggerEventInfo:isSecondChanceCandidate:",  4LL,  0LL,  0LL);
      (*(void (**)(uint64_t, CSVoiceTriggerSecondPassResultHolder *, id))(v6 + 16))(v6, v7, v8);

      id v5 = v8;
    }
  }
}

uint64_t sub_1000A3450(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = a2;
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = a3;
  return result;
}

void sub_1000A346C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      id v8 = v5;
      uint64_t v7 = -[CSVoiceTriggerSecondPassResultHolder initWithResult:voiceTriggerEventInfo:isSecondChanceCandidate:]( objc_alloc(&OBJC_CLASS___CSVoiceTriggerSecondPassResultHolder),  "initWithResult:voiceTriggerEventInfo:isSecondChanceCandidate:",  4LL,  0LL,  0LL);
      (*(void (**)(uint64_t, CSVoiceTriggerSecondPassResultHolder *, id))(v6 + 16))(v6, v7, v8);

      id v5 = v8;
    }
  }
}

void sub_1000A34E4(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _voiceTriggerSecondPassLatencyMetrics]);
  [v6 setSecondPassAudioStreamReadyTime:mach_absolute_time()];

  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, uint64_t, id))(v7 + 16))(v7, a2, v8);
  }
}

void sub_1000A3568(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(v6 + 88);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1000A360C;
  v10[3] = &unk_10022E678;
  void v10[4] = v6;
  char v13 = a2;
  id v11 = v5;
  id v12 = v7;
  id v9 = v5;
  dispatch_async(v8, v10);
}

uint64_t sub_1000A360C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000A3640(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(dispatch_queue_s **)(v2 + 88);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1000A3704;
  v4[3] = &unk_10022F020;
  v4[4] = v2;
  void v4[5] = a2;
  dispatch_async(v3, v4);
}

void sub_1000A3698(uint64_t a1, float a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(dispatch_queue_s **)(v2 + 88);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1000A36F4;
  v4[3] = &unk_10022E8F8;
  v4[4] = v2;
  float v5 = a2;
  dispatch_async(v3, v4);
}

float sub_1000A36F4(uint64_t a1)
{
  float result = *(float *)(a1 + 40);
  *(float *)(*(void *)(a1 + 32) + 48LL) = result;
  return result;
}

uint64_t sub_1000A3704(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 376LL) = *(void *)(result + 40);
  return result;
}

id sub_1000A3710(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setAsset:*(void *)(a1 + 40)];
}

id sub_1000A371C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reset];
}

void sub_1000A3724(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained) {
    WeakRetained[44] = *(void *)(a1 + 40);
  }
}

void sub_1000A3754(uint64_t a1)
{
}

uint64_t sub_1000A3760(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 336LL) = *(void *)(result + 40);
  return result;
}

void sub_1000A376C(uint64_t a1, uint64_t a2)
{
  if (CSIsHorseman(a1, a2))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (*(void *)(v3 + 464))
    {
      if (*(void *)(v3 + 456))
      {
        uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v3 + 104) configPathRecognizer]);
        id v5 = (id)objc_claimAutoreleasedReturnValue( +[CSMil2BnnsUtils readBnnsIrFromModelConfig:modelType:]( &OBJC_CLASS___CSMil2BnnsUtils,  "readBnnsIrFromModelConfig:modelType:",  v4,  1LL));

        +[CSUtils faultPagesWithVaddr:mmapedSize:filePath:]( &OBJC_CLASS___CSUtils,  "faultPagesWithVaddr:mmapedSize:filePath:",  *(void *)(*(void *)(a1 + 32) + 464LL),  *(void *)(*(void *)(a1 + 32) + 456LL),  v5);
      }
    }
  }

void sub_1000A3818(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _fetchSiriLocale]);
  unsigned int v3 = +[CSUtils supportsMphForLanguageCode:](&OBJC_CLASS___CSUtils, "supportsMphForLanguageCode:", v2);
  uint64_t v4 = (os_log_s *)CSLogCategoryVT;
  BOOL v5 = os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      int v6 = *(unsigned __int8 *)(a1 + 40);
      int v8 = 136315650;
      id v9 = "-[CSVoiceTriggerSecondPass setSupportsMultiPhraseDetection:]_block_invoke";
      __int16 v10 = 2112;
      id v11 = v2;
      __int16 v12 = 1024;
      int v13 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s User choose multiphrase detection for locale %@? : %d",  (uint8_t *)&v8,  0x1Cu);
    }

    char v7 = *(_BYTE *)(a1 + 40);
  }

  else
  {
    if (v5)
    {
      int v8 = 136315395;
      id v9 = "-[CSVoiceTriggerSecondPass setSupportsMultiPhraseDetection:]_block_invoke";
      __int16 v10 = 2113;
      id v11 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Device or locale(%{private}@) is not capable of supporting multiphrase",  (uint8_t *)&v8,  0x16u);
    }

    char v7 = 0;
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 15LL) = v7;
}

void sub_1000A3970(uint64_t a1)
{
}

id sub_1000A3EE4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
  *(_BYTE *)(*(void *)(a1 + 32) + 8) = [v2 smartSiriVolumeContextAwareEnabled];

  unsigned int v3 = objc_alloc(&OBJC_CLASS___NSUserDefaults);
  uint64_t v4 = -[NSUserDefaults initWithSuiteName:](v3, "initWithSuiteName:", kCSPreferencesDomain);
  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(void **)(v5 + 16);
  *(void *)(v5 + 16) = v4;

  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "addObserver:forKeyPath:options:context:");
}

id sub_1000A3F78(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _notifyObserver:a2 withEnabled:*(unsigned __int8 *)(a1 + 40)];
}

void sub_1000A3F8C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isEqual:@"Adaptive Siri Volume Disabled"])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
    *(_BYTE *)(*(void *)(a1 + 40) + 8) = [v2 smartSiriVolumeContextAwareEnabled];

    [*(id *)(a1 + 40) _didReceiveAutomaticVolumeToggled:*(unsigned __int8 *)(*(void *)(a1 + 40) + 8)];
    unsigned int v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(unsigned __int8 *)(*(void *)(a1 + 40) + 8LL);
      int v5 = 136315394;
      int v6 = "-[CSAutomaticVolumeEnabledMonitor observeValueForKeyPath:ofObject:change:context:]_block_invoke";
      __int16 v7 = 1026;
      int v8 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Automatic Volume Toggled. Automatic Volume Enabled: %{public}d",  (uint8_t *)&v5,  0x12u);
    }
  }

void sub_1000A40DC(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSAutomaticVolumeEnabledMonitor);
  uint64_t v2 = (void *)qword_10027FEB8;
  qword_10027FEB8 = (uint64_t)v1;
}

void sub_1000A4958(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers", 0));
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        __int16 v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v7,  "intuitiveConvAudioCaptureMonitorDidStopAudioCapture:stopStreamOption:eventUUID:") & 1) != 0) {
          [v7 intuitiveConvAudioCaptureMonitorDidStopAudioCapture:*(void *)(a1 + 32) stopStreamOption:*(void *)(a1 + 40) eventUUID:*(void *)(a1 + 48)];
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_1000A4A7C(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers", 0));
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        __int16 v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "intuitiveConvAudioCaptureMonitor:willStopAudioCaptureReason:") & 1) != 0) {
          [v7 intuitiveConvAudioCaptureMonitor:*(void *)(a1 + 32) willStopAudioCaptureReason:*(void *)(a1 + 40)];
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_1000A4B9C(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers", 0));
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        __int16 v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v7,  "intuitiveConvAudioCaptureMonitor:didStartAudioCaptureSuccessfully:option:eventUUID:") & 1) != 0) {
          [v7 intuitiveConvAudioCaptureMonitor:*(void *)(a1 + 32) didStartAudioCaptureSuccessfully:*(unsigned __int8 *)(a1 + 48) option:*(void *)(*(void *)(a1 + 32) + 24) eventUUID:*(void *)(a1 + 40)];
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_1000A4CC4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 24);
  *(void *)(v3 + 24) = v2;

  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers", 0));
  id v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v12;
    do
    {
      for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v5);
        }
        __int128 v10 = *(void **)(*((void *)&v11 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v10,  "intuitiveConvAudioCaptureMonitor:willStartAudioCaptureWithContext:option:") & 1) != 0) {
          [v10 intuitiveConvAudioCaptureMonitor:*(void *)(a1 + 32) willStartAudioCaptureWithContext:*(void *)(a1 + 48) option:*(void *)(a1 + 40)];
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v7);
  }
}

void sub_1000A4E00(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers", 0));
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "intuitiveConvAudioCaptureMonitor:fetchedAudioStream:successfully:") & 1) != 0) {
          [v7 intuitiveConvAudioCaptureMonitor:*(void *)(a1 + 32) fetchedAudioStream:*(void *)(a1 + 40) successfully:*(unsigned __int8 *)(a1 + 48)];
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_1000A4F24(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  [v2 removeObject:*(void *)(a1 + 40)];
}

void sub_1000A4F64(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_1000A4FE4(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSIntuitiveConvAudioCaptureMonitor);
  id v2 = (void *)qword_10027FEC8;
  qword_10027FEC8 = (uint64_t)v1;
}

void sub_1000A77B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, id location)
{
}

void sub_1000A81A0(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    id v4 = "-[CSVoiceTriggerFirstPassJarvisAP siriClientBehaviorMonitor:willStopStream:reason:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Siri Client will stop listening, resume FirstPassJarvisAP listen",  (uint8_t *)&v3,  0xCu);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 0;
}

id sub_1000A8250(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[CSVoiceTriggerFirstPassJarvisAP siriClientBehaviorMonitor:didStopStream:withEventUUID:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Siri Client stops listening now, FirstPassJarvisAP can listen now",  (uint8_t *)&v4,  0xCu);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 0;
  return [*(id *)(a1 + 32) _reset];
}

void sub_1000A8308(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    int v4 = "-[CSVoiceTriggerFirstPassJarvisAP siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withE"
         "ventUUID:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Siri Client starts listening now, FirstPassJarvisAP shouldn't listen now",  (uint8_t *)&v3,  0xCu);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 1;
}

void *sub_1000A83BC(void *result)
{
  uint64_t v1 = result[4];
  int v2 = *((unsigned __int8 *)result + 40);
  if (*(unsigned __int8 *)(v1 + 8) != v2)
  {
    *(_BYTE *)(v1 + _Block_object_dispose(va, 8) = v2;
    int v3 = (_BYTE *)result[4];
    if (v3[8]) {
      return [v3 _startListenWithCompletion:0];
    }
    else {
      return [v3 _stopListening];
    }
  }

  return result;
}

void sub_1000A83F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (id *)(a1 + 32);
  id WeakRetained = (dispatch_queue_s **)objc_loadWeakRetained((id *)(a1 + 32));
  __int128 v9 = WeakRetained;
  if (WeakRetained)
  {
    __int128 v10 = WeakRetained[3];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000A84D0;
    block[3] = &unk_10022F0B0;
    objc_copyWeak(&v14, v7);
    id v12 = v5;
    id v13 = v6;
    dispatch_async(v10, block);

    objc_destroyWeak(&v14);
  }
}

void sub_1000A84D0(uint64_t a1)
{
  int v2 = (id *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = WeakRetained;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 deviceId]);
  [v5 _handleSecondPassResult:v4 deviceId:v6 error:*(void *)(a1 + 40)];

  id v7 = objc_loadWeakRetained(v2);
  [v7 _teardownSecondPass];
}

uint64_t sub_1000A855C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  if (v1) {
    return (*(uint64_t (**)(uint64_t, id))(v1 + 16))( v1,  [*(id *)(result + 32) _shouldProcessAudio]);
  }
  return result;
}

void sub_1000A859C(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  if (v2[4])
  {
    if ([v2 _shouldProcessAudio])
    {
      id v9 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 40) getBestAnalyzedResultsFromAudioChunk:*(void *)(a1 + 40)]);
      objc_msgSend( *(id *)(a1 + 32),  "_keywordAnalyzerNDAPI:hasResultAvailable:forChannel:",  *(void *)(*(void *)(a1 + 32) + 40),  v9,  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 40), "activeChannel"));
    }

    else
    {
      uint64_t v4 = qword_10027FEE8;
      if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * qword_10027FEE8, 1) <= 0x1999999999999999uLL)
      {
        id v5 = (os_log_s *)CSLogCategoryVT;
        if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
        {
          id v6 = *(unsigned __int8 **)(a1 + 32);
          int v7 = v6[9];
          int v8 = v6[10];
          LODWORD(v6) = v6[8];
          *(_DWORD *)__int128 buf = 136315906;
          __int128 v11 = "-[CSVoiceTriggerFirstPassJarvisAP audioStreamProvider:audioBufferAvailable:]_block_invoke";
          __int16 v12 = 1024;
          int v13 = v7;
          __int16 v14 = 1024;
          int v15 = v8;
          __int16 v16 = 1024;
          int v17 = (int)v6;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s Bypass audio here because isSecondPassRunning = %d, isSiriClientListening = %d, _isAPJarvisFirstPassEnabled = %d",  buf,  0x1Eu);
          uint64_t v4 = qword_10027FEE8;
        }
      }

      qword_10027FEE8 = v4 + 1;
    }
  }

  else
  {
    int v3 = (os_log_s *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int128 v11 = "-[CSVoiceTriggerFirstPassJarvisAP audioStreamProvider:audioBufferAvailable:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Could not find Assets. Cannot process Audio",  buf,  0xCu);
    }
  }

id sub_1000A8784(uint64_t a1)
{
  int v2 = objc_autoreleasePoolPush();
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0LL;

  objc_autoreleasePoolPop(v2);
  return [*(id *)(a1 + 32) _cancelLastAudioStreamHold];
}

void sub_1000A87C4(uint64_t a1)
{
  int v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    id v5 = "-[CSVoiceTriggerFirstPassJarvisAP _stopListening]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Scheduled stopAudioStream after waiting for recordingWillStartGroup",  (uint8_t *)&v4,  0xCu);
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioStream]);
  [v3 stopAudioStreamWithOption:0 completion:&stru_10022C1A8];
}

void sub_1000A8890(id a1, BOOL a2, NSError *a3)
{
  uint64_t v3 = a3;
  if (v3)
  {
    int v4 = (void *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
    {
      id v5 = v4;
      id v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSError localizedDescription](v3, "localizedDescription"));
      int v7 = 136315394;
      int v8 = "-[CSVoiceTriggerFirstPassJarvisAP _stopListening]_block_invoke";
      __int16 v9 = 2114;
      __int128 v10 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Cannot stop listening : %{public}@",  (uint8_t *)&v7,  0x16u);
    }
  }
}

uint64_t sub_1000A897C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000A8990(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(void **)(a1 + 40);
  int v8 = *(dispatch_queue_s **)(v6 + 24);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1000A8A34;
  v10[3] = &unk_10022E678;
  void v10[4] = v6;
  char v13 = a2;
  id v11 = v5;
  id v12 = v7;
  id v9 = v5;
  dispatch_async(v8, v10);
}

uint64_t sub_1000A8A34(uint64_t a1)
{
  int v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315138;
    int v7 = "-[CSVoiceTriggerFirstPassJarvisAP _startListenWithCompletion:]_block_invoke_2";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Leaving recordWillStartGroup",  (uint8_t *)&v6,  0xCu);
  }

  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 56LL));
  if (*(_BYTE *)(a1 + 56))
  {
    uint64_t v3 = *(_BYTE **)(a1 + 32);
    if (!v3[8])
    {
      int v4 = (os_log_s *)CSLogCategoryVT;
      if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 136315138;
        int v7 = "-[CSVoiceTriggerFirstPassJarvisAP _startListenWithCompletion:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s didStartRecording received when CSVoiceTriggerFirstPassJarvisAP is turned off",  (uint8_t *)&v6,  0xCu);
        uint64_t v3 = *(_BYTE **)(a1 + 32);
      }

      [v3 _stopListening];
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

id sub_1000A8B88(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setAsset:*(void *)(a1 + 40)];
}

void sub_1000A8B94(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 8LL) = 0;
  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 104), "registerObserver:");
  objc_initWeak(&location, *(id *)(a1 + 32));
  int v2 = *(void **)(*(void *)(a1 + 32) + 120LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1000A8C74;
  v3[3] = &unk_10022E430;
  objc_copyWeak(&v4, &location);
  [v2 setCallback:v3];
  objc_destroyWeak(&v4);
  objc_destroyWeak(&location);
}

void sub_1000A8C58(_Unwind_Exception *a1)
{
}

void sub_1000A8C74(uint64_t a1, uint64_t a2)
{
  id v4 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = @"STOPPED";
    if ((_DWORD)a2) {
      id v5 = @"RUNNING";
    }
    int v7 = 136315394;
    int v8 = "-[CSVoiceTriggerFirstPassJarvisAP start]_block_invoke_2";
    __int16 v9 = 2114;
    __int128 v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger JarvisAP start policy changed : %{public}@",  (uint8_t *)&v7,  0x16u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _transitJarvisAPEnable:a2];
}

void sub_1000A9F3C(uint64_t a1)
{
}

void sub_1000A9F48(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) osdAnalyzer]);
  [v2 addFaceTrackingData:*(void *)(a1 + 40) atMachAbsTime:*(void *)(a1 + 48)];
}

void sub_1000A9F88(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "receivers", 0));
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        int v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "attSiriNode:didDetectEndOfSpeechAt:") & 1) != 0) {
          [v7 attSiriNode:*(void *)(a1 + 32) didDetectEndOfSpeechAt:*(double *)(a1 + 40)];
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_1000AA0AC(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "receivers", 0));
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        int v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "attSiriNode:didDetectStartOfSpeechAt:") & 1) != 0) {
          [v7 attSiriNode:*(void *)(a1 + 32) didDetectStartOfSpeechAt:*(double *)(a1 + 40)];
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_1000AA1D0(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "receivers", 0));
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        int v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "attSiriNode:didUpdateOSDFeatures:withFrameDurationMs:withMHID:") & 1) != 0) {
          [v7 attSiriNode:*(void *)(a1 + 32) didUpdateOSDFeatures:*(void *)(a1 + 40) withFrameDurationMs:*(void *)(*(void *)(a1 + 32) + 40) withMHID:*(double *)(*(void *)(a1 + 32) + 160)];
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

id sub_1000AA2F8(uint64_t a1)
{
  return [*(id *)(a1 + 32) setCurrentAsset:*(void *)(a1 + 40)];
}

uint64_t sub_1000AA300(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 192LL);
  return result;
}

uint64_t sub_1000AA314(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 152LL);
  return result;
}

void sub_1000AA328(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2 && [v2 disableEndpointer])
  {
    id v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)__int128 buf = 136315138;
    float v29 = "-[CSAttSiriOSDNode resetForNewRequestWithRecordContext:endpointerSettings:voiceTriggerInfo:osdMode:]_block_invoke";
    id v4 = "%s Skip since endpointer is disabled";
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v4, buf, 0xCu);
    return;
  }

  uint64_t v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
  {
    int v6 = *(void **)(a1 + 48);
    *(_DWORD *)__int128 buf = 136315394;
    float v29 = "-[CSAttSiriOSDNode resetForNewRequestWithRecordContext:endpointerSettings:voiceTriggerInfo:osdMode:]_block_invoke";
    __int16 v30 = 2048;
    id v31 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Updating osdMode to %lu", buf, 0x16u);
  }

  [*(id *)(a1 + 40) setOsdMode:*(void *)(a1 + 48)];
  [*(id *)(a1 + 40) setNumSamplesProcessed:0];
  [*(id *)(a1 + 40) setNumOfChunksReceived:0];
  [*(id *)(a1 + 40) setDidAddAudio:0];
  [*(id *)(a1 + 40) setDidTimestampFirstAudioPacket:0];
  [*(id *)(a1 + 40) setCountOfConsecutiveBoron:0];
  [*(id *)(a1 + 40) setLastKnownConsecutiveBoronStartSampleCount:0];
  +[CSFAudioStreamBasicDescriptionFactory utteranceFileASBD]( &OBJC_CLASS___CSFAudioStreamBasicDescriptionFactory,  "utteranceFileASBD");
  +[CSFAudioStreamBasicDescriptionFactory lpcmInt16ASBD]( &OBJC_CLASS___CSFAudioStreamBasicDescriptionFactory,  "lpcmInt16ASBD");
  int v7 = (void *)objc_claimAutoreleasedReturnValue( +[CSAudioFileManager createAudioFileWriterForOSDWithInputFormat:outputFormat:]( &OBJC_CLASS___CSAudioFileManager,  "createAudioFileWriterForOSDWithInputFormat:outputFormat:",  v27,  v26));
  [*(id *)(a1 + 40) setAudioFileWriter:v7];

  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) currentAsset]);
  if (!v8)
  {
    [*(id *)(a1 + 40) setOsdAnalyzer:0];
    id v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)__int128 buf = 136315138;
    float v29 = "-[CSAttSiriOSDNode resetForNewRequestWithRecordContext:endpointerSettings:voiceTriggerInfo:osdMode:]_block_invoke_2";
    id v4 = "%s Cannot create OSDAnalyzer";
    goto LABEL_16;
  }

  __int128 v9 = objc_alloc(&OBJC_CLASS___OSDAnalyzer);
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) currentAsset]);
  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 path]);
  id v12 = [*(id *)(a1 + 40) currentRequestSampleRate];
  char v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) osdQueue]);
  __int16 v14 = -[OSDAnalyzer initWithConfigFile:sampleRate:context:queue:delegate:]( v9,  "initWithConfigFile:sampleRate:context:queue:delegate:",  v11,  v12,  0LL,  v13,  *(void *)(a1 + 40));
  [*(id *)(a1 + 40) setOsdAnalyzer:v14];

  int v15 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v16 = *(void **)(a1 + 40);
    int v17 = v15;
    unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue([v16 osdAnalyzer]);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) currentAsset]);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 path]);
    *(_DWORD *)__int128 buf = 136315650;
    float v29 = "-[CSAttSiriOSDNode resetForNewRequestWithRecordContext:endpointerSettings:voiceTriggerInfo:osdMode:]_block_invoke";
    __int16 v30 = 2114;
    id v31 = v18;
    __int16 v32 = 2114;
    unint64_t v33 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%s Created OSDAnalyzer: %{public}@ model path: %{public}@",  buf,  0x20u);
  }

  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) osdAnalyzer]);
  objc_msgSend(*(id *)(a1 + 40), "setFrameDurationMs:", (double)(uint64_t)objc_msgSend(v21, "getFrameDurationMs"));

  if (+[CSUtils isContinuousConversationSupported]( &OBJC_CLASS___CSUtils,  "isContinuousConversationSupported"))
  {
    objc_initWeak((id *)buf, *(id *)(a1 + 40));
    if (*(void *)(*(void *)(a1 + 40) + 48LL))
    {
      id WeakRetained = objc_loadWeakRetained((id *)buf);
      double v23 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained apQueue]);
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472LL;
      v24[2] = sub_1000AA848;
      void v24[3] = &unk_10022F0D8;
      objc_copyWeak(&v25, (id *)buf);
      void v24[4] = *(void *)(a1 + 40);
      dispatch_async(v23, v24);

      objc_destroyWeak(&v25);
    }

    objc_destroyWeak((id *)buf);
  }

void sub_1000AA77C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, id location)
{
}

void sub_1000AA798(id *a1)
{
  if ([a1[4] isVoiceTriggered] && (id v2 = a1[5]) != 0)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:kVTEItriggerEndSampleCount]);
    id v3 = [v5 unsignedIntegerValue];
    id v4 = (void *)objc_claimAutoreleasedReturnValue([a1[5] objectForKeyedSubscript:kVTEIclientStartSampleCount]);
    objc_msgSend(a1[6], "setVtEndInSampleCount:", v3 - (_BYTE *)objc_msgSend(v4, "unsignedIntegerValue"));
  }

  else
  {
    [a1[6] setVtEndInSampleCount:0];
  }

void sub_1000AA848(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 48) numOfConsecutiveBoronActivationThreshold];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained setNumOfConsecutiveBoronActivationThreshold:v2];
}

id sub_1000AA894(uint64_t a1)
{
  id v2 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = v2;
    id v5 = [v3 numOfChunksReceived];
    id v6 = [*(id *)(a1 + 32) numSamplesProcessed];
    int v10 = 136315650;
    __int128 v11 = "-[CSAttSiriOSDNode attSiriAudioSrcNodeDidStop:]_block_invoke";
    __int16 v12 = 2048;
    id v13 = v5;
    __int16 v14 = 2048;
    id v15 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s total chunks received: %lu, samples processed: %lu",  (uint8_t *)&v10,  0x20u);
  }

  int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) osdAnalyzer]);
  [v7 endAudio];

  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioFileWriter]);
  [v8 endAudio];

  return [*(id *)(a1 + 32) setAudioFileWriter:0];
}

void sub_1000AA9B8(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = *(void *)(*(void *)(a1 + 32) + 120LL);
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 10))
  {
    *(_BYTE *)(v1 + 10) = 1;
    uint64_t v3 = objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 136);
    *(void *)(v4 + 136) = v3;

    *(double *)(*(void *)(a1 + 32) + 144) = (double)(unint64_t)[*(id *)(a1 + 40) hostTime];
    *(void *)(*(void *)(a1 + 32) + 152) = [*(id *)(a1 + 40) startSampleCount];
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id v6 = *(id *)(*(void *)(a1 + 32) + 64LL);
    id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v13;
      do
      {
        for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v13 != v9) {
            objc_enumerationMutation(v6);
          }
          __int128 v11 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)i);
          if ((objc_opt_respondsToSelector( v11,  "attSiriNode:didUpdateFirstAudioPacketTimestamp:firstAudioSampleSensorTimestamp:firstAudioStartSampleCount:") & 1) != 0) {
            objc_msgSend( v11,  "attSiriNode:didUpdateFirstAudioPacketTimestamp:firstAudioSampleSensorTimestamp:firstAudioStartSampleCount:",  *(void *)(a1 + 32),  *(void *)(*(void *)(a1 + 32) + 136),  (unint64_t)*(double *)(*(void *)(a1 + 32) + 144),  *(void *)(*(void *)(a1 + 32) + 152),  (void)v12);
          }
        }

        id v8 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }

      while (v8);
    }
  }

void sub_1000AAB54(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) osdAnalyzer]);

  if (v2)
  {
    uint64_t v3 = mach_absolute_time();
    uint64_t v4 = v3 - (void)[*(id *)(a1 + 40) hostTime];
    if (([*(id *)(a1 + 40) wasBuffered] & 1) != 0
      || __ROR8__(0xCCCCCCCCCCCCCCCDLL * (void)[*(id *)(a1 + 32) numOfChunksReceived], 2) < 0xCCCCCCCCCCCCCCDuLL
      || (id v5 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences")),
          unsigned int v6 = [v5 isEndpointEnhancedLoggingEnabled],
          v5,
          v6))
    {
      id v7 = (void *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
        id v8 = *(void **)(a1 + 40);
        uint64_t v9 = *(void **)(a1 + 48);
        int v10 = v7;
        id v11 = [v8 hostTime];
        id v12 = [*(id *)(a1 + 40) startSampleCount];
        id v13 = [*(id *)(a1 + 40) numSamples];
        unsigned int v14 = [*(id *)(a1 + 40) wasBuffered];
        *(_DWORD *)__int128 buf = 136316930;
        double v46 = "-[CSAttSiriOSDNode attSiriAudioSrcNodeLPCMRecordBufferAvailable:audioChunk:]_block_invoke";
        __int16 v47 = 2112;
        id v48 = v9;
        __int16 v49 = 2048;
        id v50 = v11;
        __int16 v51 = 2048;
        id v52 = v12;
        __int16 v53 = 2048;
        id v54 = v13;
        __int16 v55 = 2048;
        uint64_t v56 = v14;
        __int16 v57 = 2048;
        uint64_t v58 = v3;
        __int16 v59 = 2048;
        uint64_t v60 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s Received audio chunk from %@ with hostTime: %llu, startSampleCount: %llu, numSamples: %lu, wasBuffered: %lu , atTime: %llu, audioDeliveryHostTimeDelta: %llu",  buf,  0x52u);
      }
    }

    objc_msgSend( *(id *)(a1 + 32),  "setNumOfChunksReceived:",  (char *)objc_msgSend(*(id *)(a1 + 32), "numOfChunksReceived") + 1);
    uint64_t v15 = (uint64_t)[*(id *)(a1 + 40) numSamples];
    id v16 = [*(id *)(a1 + 32) numSamplesProcessed];
    int v17 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
    block = _NSConcreteStackBlock;
    uint64_t v38 = 3221225472LL;
    unint64_t v39 = sub_1000AB054;
    uint64_t v40 = &unk_10022C3E8;
    unsigned int v18 = *(void **)(a1 + 40);
    uint64_t v41 = *(void *)(a1 + 32);
    id v42 = v18;
    id v43 = v16;
    uint64_t v44 = v4;
    dispatch_async(v17, &block);

    if (v15 >= 1)
    {
      uint64_t v20 = 0LL;
      *(void *)&__int128 v19 = 136315394LL;
      __int128 v36 = v19;
      do
      {
        if (v15 >= 640) {
          uint64_t v21 = 640LL;
        }
        else {
          uint64_t v21 = v15;
        }
        if ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "numSamplesProcessed", v36, block, v38, v39, v40, v41) >= *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
        {
          if (([*(id *)(a1 + 32) didAddAudio] & 1) == 0)
          {
            [*(id *)(a1 + 32) setDidAddAudio:1];
            uint64_t v22 = (void *)CSLogContextFacilityCoreSpeech;
            if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
            {
              double v23 = *(void **)(a1 + 32);
              double v24 = v22;
              id v25 = [v23 numSamplesProcessed];
              *(_DWORD *)__int128 buf = v36;
              double v46 = "-[CSAttSiriOSDNode attSiriAudioSrcNodeLPCMRecordBufferAvailable:audioChunk:]_block_invoke_2";
              __int16 v47 = 2050;
              id v48 = v25;
              _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "%s addAudio first sample offset: %{public}lu",  buf,  0x16u);
            }
          }

          id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) subChunkFrom:v20 numSamples:v21 forChannel:0]);
          __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v26 data]);
          float v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioFileWriter]);
          id v29 = v27;
          objc_msgSend(v28, "addSamples:numSamples:", objc_msgSend(v29, "bytes"), objc_msgSend(v26, "numSamples"));

          if (+[CSConfig inputRecordingIsFloat](&OBJC_CLASS___CSConfig, "inputRecordingIsFloat"))
          {
            __int16 v30 = (void *)objc_claimAutoreleasedReturnValue([v26 data]);
            uint64_t v31 = objc_claimAutoreleasedReturnValue( +[CSFLPCMTypeConverter convertToShortLPCMBufFromFloatLPCMBuf:]( &OBJC_CLASS___CSFLPCMTypeConverter,  "convertToShortLPCMBufFromFloatLPCMBuf:",  v30));

            id v29 = (id)v31;
          }

          __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) osdAnalyzer]);
          objc_msgSend(v32, "addAudio:numSamples:", v29, objc_msgSend(v26, "numSamples"));
        }

        v15 -= v21;
        v20 += v21;
        objc_msgSend( *(id *)(a1 + 32),  "setNumSamplesProcessed:",  (char *)objc_msgSend(*(id *)(a1 + 32), "numSamplesProcessed") + v21);
      }

      while (v15 > 0);
    }

    if ([*(id *)(a1 + 32) didAddAudio])
    {
      unint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) remoteVAD]);

      if (v33) {
        [*(id *)(a1 + 32) checkConsecutiveBoronSignalWithAudioChunk:*(void *)(a1 + 40)];
      }
    }
  }

  else
  {
    uint64_t v34 = qword_10027FEF8;
    if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * qword_10027FEF8, 1) <= 0x1999999999999999uLL)
    {
      __int16 v35 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 136315138;
        double v46 = "-[CSAttSiriOSDNode attSiriAudioSrcNodeLPCMRecordBufferAvailable:audioChunk:]_block_invoke_2";
        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "%s skip audio packet since osdAnalyzer is nil",  buf,  0xCu);
        uint64_t v34 = qword_10027FEF8;
      }
    }

    qword_10027FEF8 = v34 + 1;
  }

void sub_1000AB054(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "receivers", 0));
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v7,  "attSiriNode:didUpdateAnchorMachAbsTime:numSamplesProcessedBeforeAnchorTime:isAnchorTimeBuffered:audioDel iveryHostTimeDelta:") & 1) != 0) {
          objc_msgSend( v7,  "attSiriNode:didUpdateAnchorMachAbsTime:numSamplesProcessedBeforeAnchorTime:isAnchorTimeBuffered:audioDeliveryHostTimeDelta:",  *(void *)(a1 + 32),  objc_msgSend(*(id *)(a1 + 40), "hostTime"),  *(void *)(a1 + 48),  objc_msgSend(*(id *)(a1 + 40), "wasBuffered"),  *(void *)(a1 + 56));
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_1000AB198(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v4 = 136315394;
    uint64_t v5 = "-[CSAttSiriOSDNode setPrefetchedAsset:]_block_invoke";
    __int16 v6 = 2112;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s setting prefetched asset %@",  (uint8_t *)&v4,  0x16u);
  }

id sub_1000AB25C(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[CSAttSiriOSDNode stop]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  return [*(id *)(a1 + 32) setOsdAnalyzer:0];
}

void sub_1000AB310(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) receivers]);
  [v2 removeObject:*(void *)(a1 + 40)];

  uint64_t v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 136315394;
    __int16 v6 = "-[CSAttSiriOSDNode removeReceiver:]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s OSDNode removed receiver: %@",  (uint8_t *)&v5,  0x16u);
  }

void sub_1000AB3E4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) receivers]);
  unsigned __int8 v3 = [v2 containsObject:*(void *)(a1 + 40)];

  if ((v3 & 1) == 0)
  {
    if ([*(id *)(a1 + 40) conformsToProtocol:&OBJC_PROTOCOL___CSAttSiriOSDNodeDelegate])
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) receivers]);
      [v4 addObject:*(void *)(a1 + 40)];

      int v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 40);
        int v9 = 136315394;
        __int128 v10 = "-[CSAttSiriOSDNode addReceiver:]_block_invoke";
        __int16 v11 = 2112;
        uint64_t v12 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s OSDNode added receiver: %@",  (uint8_t *)&v9,  0x16u);
      }
    }

    else
    {
      __int16 v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = *(void *)(a1 + 40);
        int v9 = 136315394;
        __int128 v10 = "-[CSAttSiriOSDNode addReceiver:]_block_invoke";
        __int16 v11 = 2112;
        uint64_t v12 = v8;
        _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Unsupported receiver: %@",  (uint8_t *)&v9,  0x16u);
      }
    }
  }

void sub_1000AB568(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSEndpointerAssetManager sharedManager](&OBJC_CLASS___CSEndpointerAssetManager, "sharedManager"));
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 getCurrentOSDAsset]);
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(void **)(v4 + 56);
  *(void *)(v4 + 56) = v3;

  id v6 = (id)objc_claimAutoreleasedReturnValue(+[CSEndpointerAssetManager sharedManager](&OBJC_CLASS___CSEndpointerAssetManager, "sharedManager"));
  [v6 addObserver:*(void *)(a1 + 32)];
}

void sub_1000AC0B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, id a32)
{
}

void sub_1000ACD78(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[SFEntitledAssetManager sharedInstance](&OBJC_CLASS___SFEntitledAssetManager, "sharedInstance"));
  [v2 switchToNewAssetsForAssetType:3];

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateEndpointerAssetsIfNeeded];
}

uint64_t sub_1000ACDD0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1000ACDE0(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    int v5 = "-[CSEndpointerAssetManager CSAssetManagerDidDownloadNewAsset:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s New hybrid endpoint asset downloaded",  (uint8_t *)&v4,  0xCu);
  }

  return [*(id *)(a1 + 32) _updateAssetWithCurrentLanguageForAssetType:1];
}

id sub_1000ACE94(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 136315394;
    id v6 = "-[CSEndpointerAssetManager CSLanguageCodeUpdateMonitor:didReceiveLanguageCodeChanged:]_block_invoke";
    __int16 v7 = 2114;
    uint64_t v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Language changed to: %{public}@",  (uint8_t *)&v5,  0x16u);
  }

  [*(id *)(a1 + 40) _updateAssetWithLanguage:*(void *)(a1 + 32) assetType:0];
  return [*(id *)(a1 + 40) _updateAssetWithLanguage:*(void *)(a1 + 32) assetType:1];
}

void sub_1000ACF64(id a1, NSString *a2, NSNumber *a3, BOOL *a4)
{
  int v5 = a2;
  int v6 = -[NSNumber intValue](a3, "intValue");
  if (v6 != -1)
  {
    uint32_t v7 = notify_cancel(v6);
    if (v7)
    {
      uint32_t v8 = v7;
      int v9 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
      {
        int v10 = 136315650;
        __int16 v11 = "-[CSEndpointerAssetManager dealloc]_block_invoke";
        __int16 v12 = 2112;
        id v13 = v5;
        __int16 v14 = 1024;
        uint32_t v15 = v8;
        _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s Failed to cancel notification (%@), status: %u",  (uint8_t *)&v10,  0x1Cu);
      }
    }
  }
}

uint64_t sub_1000AD058(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000AD068(uint64_t a1)
{
}

void sub_1000AD070(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2[3])
  {
    unsigned int v3 = objc_msgSend(v2, "_isOSDIncludedInAsset:");
    id v2 = *(void **)(a1 + 32);
    if (v3)
    {
      int v4 = (void *)v2[3];
      int v5 = (void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
LABEL_6:
      id v11 = v4;
      __int16 v12 = *v5;
      NSString *v5 = v11;

      return;
    }
  }

  uint64_t v6 = objc_claimAutoreleasedReturnValue([v2 _getCurrentHEPAsset]);
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint32_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v10 = *(void *)(v9 + 40);
  int v5 = (void **)(v9 + 40);
  if (v10)
  {
    int v4 = *(void **)(*(void *)(a1 + 32) + 24LL);
    if (v4) {
      goto LABEL_6;
    }
  }

void sub_1000AD10C(uint64_t a1)
{
  id v2 = *(id **)(a1 + 32);
  if (v2[3] && (unsigned int v3 = objc_msgSend(v2, "_isOSDIncludedInAsset:"), v2 = *(id **)(a1 + 32), v3))
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v5 = v2[3];
    uint64_t v6 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v5;
  }

  else
  {
    uint64_t v7 = objc_claimAutoreleasedReturnValue([v2 _getCurrentHEPAsset]);
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v6 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }
}

void sub_1000AD178(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  [v2 removeObject:*(void *)(a1 + 40)];
}

id sub_1000AD1B8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  [v2 addObject:*(void *)(a1 + 40)];

  return [*(id *)(a1 + 32) _notifyAssetsUpdateForObserver:*(void *)(a1 + 40)];
}

void sub_1000AD960(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSEndpointerAssetManager);
  id v2 = (void *)qword_10027FF00;
  qword_10027FF00 = (uint64_t)v1;
}

void sub_1000AE594(uint64_t a1)
{
  unint64_t v2 = (unint64_t)[*(id *)(a1 + 32) length];
  unint64_t v3 = v2
     / +[CSConfig inputRecordingNumberOfChannels]( &OBJC_CLASS___CSConfig,  "inputRecordingNumberOfChannels");
  v79[0] = @"SampleCount";
  unint64_t v4 = v3
     / +[CSConfig inputRecordingSampleByteDepth](&OBJC_CLASS___CSConfig, "inputRecordingSampleByteDepth");
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(*(void *)(a1 + 40) + 192) sampleCount]));
  v80[0] = v5;
  v79[1] = @"HostTime";
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 48)));
  v80[1] = v6;
  uint64_t v7 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v80,  v79,  2LL));

  double v66 = (void *)v7;
  [*(id *)(*(void *)(a1 + 40) + 208) addObject:v7];
  objc_msgSend( *(id *)(*(void *)(a1 + 40) + 192), "addSamples:numSamples:", objc_msgSend(*(id *)(a1 + 32), "bytes"), v4);
  if (*(_BYTE *)(*(void *)(a1 + 40) + 160LL))
  {
    unsigned int v8 = +[CSConfig inputRecordingIsFloat](&OBJC_CLASS___CSConfig, "inputRecordingIsFloat");
    unsigned __int8 v9 = +[CSUtils isIOSDeviceSupportingBargeIn](&OBJC_CLASS___CSUtils, "isIOSDeviceSupportingBargeIn");
    uint64_t v10 = *(void *)(a1 + 32);
    if (v8)
    {
      if ((v9 & 1) != 0) {
        +[CSFLPCMTypeConverter applyNegative20dBGainToFloatBuffer:]( &OBJC_CLASS___CSFLPCMTypeConverter,  "applyNegative20dBGainToFloatBuffer:",  v10);
      }
      else {
        +[CSFLPCMTypeConverter applyNegative32dBGainToFloatBuffer:]( &OBJC_CLASS___CSFLPCMTypeConverter,  "applyNegative32dBGainToFloatBuffer:",  v10);
      }
    }

    else if ((v9 & 1) != 0)
    {
      +[CSFLPCMTypeConverter applyNegative20dBGainToShortBuffer:]( &OBJC_CLASS___CSFLPCMTypeConverter,  "applyNegative20dBGainToShortBuffer:",  v10);
    }

    else
    {
      +[CSFLPCMTypeConverter applyNegative32dBGainToShortBuffer:]( &OBJC_CLASS___CSFLPCMTypeConverter,  "applyNegative32dBGainToShortBuffer:",  v10);
    }

    id v11 = objc_alloc(&OBJC_CLASS___CSAudioChunk);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = +[CSConfig inputRecordingNumberOfChannels]( &OBJC_CLASS___CSConfig,  "inputRecordingNumberOfChannels");
    unint64_t v14 = (unint64_t)[*(id *)(a1 + 32) length] >> 2;
    unint64_t v15 = v14
        / +[CSConfig inputRecordingNumberOfChannels]( &OBJC_CLASS___CSConfig,  "inputRecordingNumberOfChannels");
    LOBYTE(v64) = +[CSConfig inputRecordingIsFloat](&OBJC_CLASS___CSConfig, "inputRecordingIsFloat");
    id v16 = [v11 initWithData:v12 numChannels:v13 numSamples:v15 sampleByteDepth:4 startSampleCount:0 hostTime:0 remoteVAD:0 isFloat:v64];
    int v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 184) processAudioChunk:v16]);
    unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
    LODWORD(v15) = [v18 firstPassDebuggingEnabled];

    if ((_DWORD)v15)
    {
      __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 184) getLastResult]);
      if (v19)
      {
        uint64_t v20 = (void *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = v20;
          [v19 bestScore];
          *(_DWORD *)__int128 buf = 136315906;
          double v72 = "-[CSAudioInjectionBuiltInEngine audioEngineBufferAvailable:audioStreamHandleId:buffer:remoteVAD:atTime:i"
                "sFileLoadedBuffer:]_block_invoke";
          __int16 v73 = 2048;
          double v74 = v22;
          __int16 v75 = 2048;
          id v76 = [v19 bestStart];
          __int16 v77 = 2048;
          id v78 = [v19 bestEnd];
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "%s First Pass Score : %f, First Pass Best Start : %llu, First Pass Best End : %llu",  buf,  0x2Au);
        }
      }
    }

    if (v17 && ([v17 isEarlyDetect] & 1) == 0)
    {
      double v23 = [v17 bestEnd];
      double v24 = [v17 bestStart];
      uint64_t v25 = *(void *)(a1 + 48);
      float v26 = (float)(unint64_t)(v23 - v24);
      +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
      *(float *)&double v28 = v26 / v27;
      uint64_t v29 = v25 - (void)+[CSFTimeUtils secondsToHostTime:](&OBJC_CLASS___CSFTimeUtils, "secondsToHostTime:", v28);
      [*(id *)(*(void *)(a1 + 40) + 184) reset];
      id v30 =  +[CSSpeechManager sharedManagerForCoreSpeechDaemon]( &OBJC_CLASS___CSSpeechManager,  "sharedManagerForCoreSpeechDaemon");
      double v69 = @"trigger-time";
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v29));
      double v70 = v31;
      __int16 v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v70,  &v69,  1LL));

      uint64_t v33 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) userIntentOptions]);
      if (v33)
      {
        uint64_t v34 = (void *)v33;
        uint64_t v65 = v29;
        __int16 v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) userIntentOptions]);
        __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v35 objectForKeyedSubscript:@"bypassVoiceTrigger"]);
        unsigned int v37 = [v36 isEqual:&__kCFBooleanTrue];

        if (v37)
        {
          v67[0] = @"trigger-time";
          uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v65));
          v67[1] = @"bypassVoiceTrigger";
          v68[0] = v38;
          v68[1] = &__kCFBooleanTrue;
          uint64_t v39 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v68,  v67,  2LL));

          __int16 v32 = (void *)v39;
        }
      }

      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue( +[CSDeviceActivationEventNotificationHandler sharedInstance]( &OBJC_CLASS___CSDeviceActivationEventNotificationHandler,  "sharedInstance"));
      id v41 = +[CSDeviceActivationEvent builtInMicVoiceTriggerEvent:hostTime:]( &OBJC_CLASS___CSDeviceActivationEvent,  "builtInMicVoiceTriggerEvent:hostTime:",  v32,  mach_absolute_time());
      id v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
      [v40 notifyActivationEvent:v42 completion:0];
    }
  }

  while (1)
  {
    double v43 = (double)*(unint64_t *)(*(void *)(a1 + 40) + 200LL);
    +[CSConfig inputRecordingBufferDuration](&OBJC_CLASS___CSConfig, "inputRecordingBufferDuration");
    double v45 = v44;
    +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
    double v47 = v43 + v45 * v46;
    double v48 = (double)(unint64_t)[*(id *)(*(void *)(a1 + 40) + 192) sampleCount];
    __int16 v49 = *(void **)(a1 + 40);
    if (v47 >= v48) {
      break;
    }
    id v50 = (void *)v49[24];
    unint64_t v51 = v49[25];
    +[CSConfig inputRecordingBufferDuration](&OBJC_CLASS___CSConfig, "inputRecordingBufferDuration");
    double v53 = v52;
    +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
    __int16 v55 = (void *)objc_claimAutoreleasedReturnValue([v50 copybufferFrom:v51 to:(unint64_t)((double)v51 + v53 * v54)]);
    +[CSConfig inputRecordingBufferDuration](&OBJC_CLASS___CSConfig, "inputRecordingBufferDuration");
    double v57 = v56;
    +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
    *(void *)(*(void *)(a1 + 40) + 20+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = (unint64_t)((double)*(unint64_t *)(*(void *)(a1 + 40)
                                                                                               + 200LL)
                                                                 + v57 * v58);
    uint64_t v59 = *(void *)(a1 + 40);
    if (*(_BYTE *)(v59 + 161))
    {
      id WeakRetained = objc_loadWeakRetained((id *)(v59 + 176));
      char v61 = objc_opt_respondsToSelector( WeakRetained,  "audioEngineBufferAvailable:audioStreamHandleId:buffer:remoteVAD:atTime:isFileLoadedBuffer:");

      if ((v61 & 1) != 0)
      {
        id v62 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 176LL));
        [v62 audioEngineBufferAvailable:*(void *)(a1 + 40) audioStreamHandleId:*(void *)(a1 + 56) buffer:v55 remoteVAD:0 atTime:*(void *)(a1 + 48) isFileLoadedBuffer:*(unsigned __int8 *)(a1 + 64)];
      }
    }
  }

  uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue([v49 userIntentOptions]);

  if (v63) {
    [*(id *)(a1 + 40) setUserIntentOptions:0];
  }
}

void sub_1000AEC30(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 161LL) = 0;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 176LL));
  char v3 = objc_opt_respondsToSelector(WeakRetained, "audioEngineDidStopRecord:audioStreamHandleId:reason:");

  if ((v3 & 1) != 0)
  {
    id v4 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 176LL));
    objc_msgSend( v4,  "audioEngineDidStopRecord:audioStreamHandleId:reason:",  *(void *)(a1 + 32),  objc_msgSend(*(id *)(a1 + 32), "audioStreamHandleId"),  0);
  }

void sub_1000AECE4(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 20+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7, 0) = [*(id *)(a1 + 32) getBestSampleCountWithOption:*(void *)(a1 + 40)];
  *(_BYTE *)(*(void *)(a1 + 32) + 161LL) = 1;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 176LL));
  char v3 = objc_opt_respondsToSelector(WeakRetained, "audioEngineDidStartRecord:audioStreamHandleId:successfully:error:");

  if ((v3 & 1) != 0)
  {
    id v4 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 176LL));
    objc_msgSend( v4,  "audioEngineDidStartRecord:audioStreamHandleId:successfully:error:",  *(void *)(a1 + 32),  objc_msgSend(*(id *)(a1 + 32), "audioStreamHandleId"),  1,  0);
  }

uint64_t sub_1000AEDBC(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 161LL);
  return result;
}

id sub_1000AEDD8(uint64_t a1)
{
  v4.receiver = *(id *)(a1 + 32);
  v4.super_class = (Class)&OBJC_CLASS___CSAudioInjectionBuiltInEngine;
  objc_msgSendSuper2(&v4, "stopAudioStream");
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)&OBJC_CLASS___CSAudioInjectionBuiltInEngine;
  objc_msgSendSuper2(&v3, "stop");
  return [*(id *)(*(void *)(a1 + 32) + 192) reset];
}

void sub_1000AEE4C(uint64_t a1)
{
  v29.receiver = *(id *)(a1 + 32);
  v29.super_class = (Class)&OBJC_CLASS___CSAudioInjectionBuiltInEngine;
  objc_msgSendSuper2(&v29, "start");
  unint64_t v2 = dispatch_group_create();
  uint64_t v23 = 0LL;
  double v24 = &v23;
  uint64_t v25 = 0x3032000000LL;
  float v26 = sub_1000AF1EC;
  float v27 = sub_1000AF1FC;
  id v28 = 0LL;
  dispatch_group_enter(v2);
  objc_super v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v31 = "-[CSAudioInjectionBuiltInEngine start]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Entering assets query for AOP model in audio injection",  buf,  0xCu);
  }

  objc_super v4 = (void *)objc_claimAutoreleasedReturnValue(+[CSVoiceTriggerAssetHandler sharedHandler](&OBJC_CLASS___CSVoiceTriggerAssetHandler, "sharedHandler"));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  _OWORD v20[2] = sub_1000AF204;
  v20[3] = &unk_10022C2A8;
  float v22 = &v23;
  id v5 = v2;
  uint64_t v21 = v5;
  [v4 getVoiceTriggerAssetWithEndpointId:0 completion:v20];

  dispatch_group_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v31 = "-[CSAudioInjectionBuiltInEngine start]_block_invoke_2";
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Done with assets query for AOP model in audio injection",  buf,  0xCu);
  }

  uint64_t v7 = (void *)v24[5];
  if (v7)
  {
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 RTModelWithFallbackLanguage:@"en-US"]);
    unsigned __int8 v9 = objc_alloc(&OBJC_CLASS___CSKeywordAnalyzerNDEAPI);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 modelData]);
    id v11 = -[CSKeywordAnalyzerNDEAPI initWithBlob:](v9, "initWithBlob:", v10);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void **)(v12 + 184);
    *(void *)(v12 + 184) = v11;

    unint64_t v14 = *(void **)(*(void *)(a1 + 32) + 184LL);
    if (!v14)
    {
      unint64_t v15 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int128 buf = 136315138;
        uint64_t v31 = "-[CSAudioInjectionBuiltInEngine start]_block_invoke";
        _os_log_fault_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "%s Failed to create NDAPI", buf, 0xCu);
        unint64_t v14 = *(void **)(*(void *)(a1 + 32) + 184LL);
      }

      else
      {
        unint64_t v14 = 0LL;
      }
    }

    [v14 setActiveChannel:0];
  }

  else
  {
    id v16 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v31 = "-[CSAudioInjectionBuiltInEngine start]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%s Error : Model is missing", buf, 0xCu);
    }
  }

  int v17 = *(void **)(a1 + 32);
  unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue(+[CSAudioStartStreamOption noAlertOption](&OBJC_CLASS___CSAudioStartStreamOption, "noAlertOption"));
  v19.receiver = v17;
  v19.super_class = (Class)&OBJC_CLASS___CSAudioInjectionBuiltInEngine;
  objc_msgSendSuper2(&v19, "startAudioStreamWithOption:", v18);

  _Block_object_dispose(&v23, 8);
}

void sub_1000AF1C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1000AF1EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000AF1FC(uint64_t a1)
{
}

void sub_1000AF204(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1000AF250(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 160LL);
  return result;
}

uint64_t sub_1000AF26C(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 16+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = *(_BYTE *)(result + 40);
  return result;
}

void sub_1000AF514(_Unwind_Exception *a1)
{
}

void sub_1000AF940(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 setSiriLocale:v3];
  [v4 setAllowMph:*(unsigned __int8 *)(a1 + 88)];
  [v4 setUserSelectedPhraseType:*(void *)(a1 + 40)];
  [v4 setEndpointId:*(void *)(a1 + 48)];
  [v4 setEngineMajorVersion:*(void *)(a1 + 56)];
  [v4 setEngineMinorVersion:*(void *)(a1 + 64)];
  [v4 setAccessoryModelType:*(void *)(a1 + 72)];
  [v4 setCSCoreSpeechServicesAccessoryInfo:*(void *)(a1 + 80)];
}

void sub_1000AF9D0(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained siriLocale]);
  [v3 setSiriLocale:v5];

  id v6 = objc_loadWeakRetained(v2);
  objc_msgSend(v3, "setAllowMph:", objc_msgSend(v6, "allowMph"));

  id v7 = objc_loadWeakRetained(v2);
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 userSelectedPhraseType]);
  [v3 setUserSelectedPhraseType:v8];

  id v9 = objc_loadWeakRetained(v2);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 endpointId]);
  [v3 setEndpointId:v10];

  id v11 = objc_loadWeakRetained(v2);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 engineMajorVersion]);
  [v3 setEngineMajorVersion:v12];

  id v13 = objc_loadWeakRetained(v2);
  unint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 engineMinorVersion]);
  [v3 setEngineMinorVersion:v14];

  id v15 = objc_loadWeakRetained(v2);
  id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 accessoryModelType]);
  [v3 setAccessoryModelType:v16];

  id v18 = objc_loadWeakRetained(v2);
  int v17 = (void *)objc_claimAutoreleasedReturnValue([v18 accessoryInfo]);
  [v3 setCSCoreSpeechServicesAccessoryInfo:v17];
}

void sub_1000AFB5C(uint64_t a1, void *a2)
{
  id v11 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) siriLocale]);
  [v11 setSiriLocale:v3];

  objc_msgSend(v11, "setAllowMph:", objc_msgSend(*(id *)(a1 + 32), "allowMph"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userSelectedPhraseType]);
  [v11 setUserSelectedPhraseType:v4];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) endpointId]);
  [v11 setEndpointId:v5];

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineMajorVersion]);
  [v11 setEngineMajorVersion:v6];

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) engineMinorVersion]);
  [v11 setEngineMinorVersion:v7];

  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accessoryModelType]);
  [v11 setAccessoryModelType:v8];

  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accessoryInfo]);
  [v11 setCSCoreSpeechServicesAccessoryInfo:v9];

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(uint64_t, id))(v10 + 16))(v10, v11);
  }
}

void sub_1000B0F00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1000B1530(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 8LL);
  return result;
}

id sub_1000B154C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _notifyObserver:a2 alarmIsFiringState:0];
}

id sub_1000B155C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _notifyObserver:a2 alarmIsFiringState:2];
}

id sub_1000B156C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _notifyObserver:a2 alarmIsFiringState:1];
}

id sub_1000B157C()
{
  uint64_t v5 = 0LL;
  id v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  uint64_t v0 = (id *)qword_10027FF30;
  uint64_t v8 = qword_10027FF30;
  if (!qword_10027FF30)
  {
    uint64_t v1 = (void *)sub_1000B1768();
    uint64_t v0 = (id *)dlsym(v1, "MTAlarmManagerAlarmFired");
    v6[3] = (uint64_t)v0;
    qword_10027FF30 = (uint64_t)v0;
  }

  _Block_object_dispose(&v5, 8);
  if (!v0)
  {
    id v3 = dlerror();
    id v4 = (_Unwind_Exception *)abort_report_np("%s", v3);
    _Block_object_dispose(&v5, 8);
    _Unwind_Resume(v4);
  }

  return *v0;
}

id sub_1000B1620()
{
  uint64_t v5 = 0LL;
  id v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  uint64_t v0 = (id *)qword_10027FF38;
  uint64_t v8 = qword_10027FF38;
  if (!qword_10027FF38)
  {
    uint64_t v1 = (void *)sub_1000B1768();
    uint64_t v0 = (id *)dlsym(v1, "MTAlarmManagerFiringAlarmDismissed");
    v6[3] = (uint64_t)v0;
    qword_10027FF38 = (uint64_t)v0;
  }

  _Block_object_dispose(&v5, 8);
  if (!v0)
  {
    id v3 = dlerror();
    id v4 = (_Unwind_Exception *)abort_report_np("%s", v3);
    _Block_object_dispose(&v5, 8);
    _Unwind_Resume(v4);
  }

  return *v0;
}

id sub_1000B16C4()
{
  uint64_t v5 = 0LL;
  id v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  uint64_t v0 = (id *)qword_10027FF40;
  uint64_t v8 = qword_10027FF40;
  if (!qword_10027FF40)
  {
    uint64_t v1 = (void *)sub_1000B1768();
    uint64_t v0 = (id *)dlsym(v1, "MTAlarmManagerStateReset");
    v6[3] = (uint64_t)v0;
    qword_10027FF40 = (uint64_t)v0;
  }

  _Block_object_dispose(&v5, 8);
  if (!v0)
  {
    id v3 = dlerror();
    id v4 = (_Unwind_Exception *)abort_report_np("%s", v3);
    _Block_object_dispose(&v5, 8);
    _Unwind_Resume(v4);
  }

  return *v0;
}

uint64_t sub_1000B1768()
{
  id v3 = 0LL;
  if (!qword_10027FF28)
  {
    __int128 v4 = off_10022C3C8;
    uint64_t v5 = 0LL;
    qword_10027FF28 = _sl_dlopen(&v4, &v3);
    uint64_t v1 = v3;
    uint64_t v0 = qword_10027FF28;
    if (qword_10027FF28)
    {
      if (!v3) {
        return v0;
      }
    }

    else
    {
      uint64_t v1 = (char *)abort_report_np("%s", v3);
    }

    free(v1);
    return v0;
  }

  return qword_10027FF28;
}

void sub_1000B1828(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = objc_getClass("MTAlarmManager");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_10027FF20 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v2 = abort_report_np("Unable to find class %s", "MTAlarmManager");
    sub_1000B1894(v2, v3);
  }

void sub_1000B1894(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v25 = "-[CSAlarmMonitor initializeAlarmState]_block_invoke";
    __int16 v26 = 2112;
    id v27 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s Fetched alarm uint64_t result = %@", buf, 0x16u);
  }

  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v20;
    while (2)
    {
      for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v7) {
          objc_enumerationMutation(v5);
        }
        id v9 = *(id *)(*((void *)&v19 + 1) + 8LL * (void)i);
        if ([v9 isEnabled]
          && (uint64_t v10 = objc_claimAutoreleasedReturnValue([v9 firedDate])) != 0)
        {
          id v11 = (void *)v10;
          uint64_t v12 = objc_claimAutoreleasedReturnValue([v9 dismissedDate]);
          if (!v12)
          {

LABEL_18:
            id v15 = (os_log_s *)CSLogContextFacilityCoreSpeech;
            if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 136315394;
              uint64_t v25 = "-[CSAlarmMonitor initializeAlarmState]_block_invoke";
              __int16 v26 = 2112;
              id v27 = v9;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%s Alarm %@ is firing", buf, 0x16u);
            }

            LOBYTE(v6) = 1;
            goto LABEL_21;
          }

          id v13 = (void *)v12;
          id v14 = [v11 compare:v12];

          if (v14 == (id)1) {
            goto LABEL_18;
          }
        }

        else
        {
        }
      }

      id v6 = [v5 countByEnumeratingWithState:&v19 objects:v23 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

void sub_1000B1B10(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    id v5 = "-[CSAlarmMonitor initializeAlarmState]_block_invoke_2";
    __int16 v6 = 2112;
    uint64_t v7 = v2;
    _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Fetching alarm error = %@",  (uint8_t *)&v4,  0x16u);
  }
}

id sub_1000B1BD0(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 40)) {
    uint64_t v2 = 1LL;
  }
  else {
    uint64_t v2 = 2LL;
  }
  return [*(id *)(a1 + 32) _notifyObserver:a2 alarmIsFiringState:v2];
}

void sub_1000B1C30(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSAlarmMonitor);
  uint64_t v2 = (void *)qword_10027FF10;
  qword_10027FF10 = (uint64_t)v1;
}

id sub_1000B23C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleSpeechRecognitionTaskDidStop];
}

id sub_1000B23CC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v6 = 136315394;
    uint64_t v7 = "-[CSAttendingStatesMessageHandler didReceiveStopRecognitionRequest:stopReason:]_block_invoke";
    __int16 v8 = 2050;
    uint64_t v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s stopReason: %{public}lu",  (uint8_t *)&v6,  0x16u);
  }

  int v4 = *(void **)(a1 + 32);
  if ((*(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL) == 2) {
    return [v4 _resetCachedState];
  }
  else {
    return [v4 _handleSpeechRecognitionTaskDidStop];
  }
}

uint64_t sub_1000B24A0(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 8LL) = 1;
  return result;
}

void sub_1000B24B0(uint64_t a1)
{
  uint64_t v2 = -[CSSpeechStartDetectedMetaData initWithHostTime:audioRecordType:audioRecordDeviceId:]( objc_alloc(&OBJC_CLASS___CSSpeechStartDetectedMetaData),  "initWithHostTime:audioRecordType:audioRecordDeviceId:",  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(void **)(v3 + 32);
  *(void *)(v3 + 32) = v2;

  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 0;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
  char v6 = objc_opt_respondsToSelector(WeakRetained, "speechStartDetectedWithHostTime:audioRecordType:audioRecordDeviceId:");

  if ((v6 & 1) != 0)
  {
    id v7 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
    [v7 speechStartDetectedWithHostTime:*(void *)(a1 + 48) audioRecordType:*(void *)(a1 + 56) audioRecordDeviceId:*(void *)(a1 + 40)];
  }

  id v8 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
  char v9 = objc_opt_respondsToSelector(v8, "speechStartDetectedWithShouldDuckTTS:");

  if ((v9 & 1) != 0)
  {
    id v10 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
    objc_msgSend( v10,  "speechStartDetectedWithShouldDuckTTS:",  objc_msgSend(*(id *)(a1 + 32), "_shouldDuckTTSAtSpeechStartDetected:", *(void *)(a1 + 56)));
  }

  uint64_t v11 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v11 + 8))
  {
    uint64_t v12 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      int v17 = "-[CSAttendingStatesMessageHandler speechStartDetectedWithHostTime:audioRecordType:audioRecordDeviceId:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s ASR is running, deliver [speechRecognizerReadyForNextTurn] until it finishes",  buf,  0xCu);
      uint64_t v11 = *(void *)(a1 + 32);
    }

    *(_BYTE *)(v11 + 9) = 1;
  }

  else
  {
    id v13 = objc_loadWeakRetained((id *)(v11 + 16));
    char v14 = objc_opt_respondsToSelector( v13,  "speechRecognizerReadyForNewTurnWithSpeechStartDetectedAtHostTime:audioRecordType:audioRecordDeviceId:");

    if ((v14 & 1) != 0)
    {
      id v15 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
      [v15 speechRecognizerReadyForNewTurnWithSpeechStartDetectedAtHostTime:*(void *)(a1 + 48) audioRecordType:*(void *)(a1 + 56) audioRecordDeviceId:*(void *)(a1 + 40)];
    }
  }

void sub_1000B26B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
  char v3 = objc_opt_respondsToSelector(WeakRetained, "localAttendingStopped");

  if ((v3 & 1) != 0)
  {
    id v4 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
    [v4 localAttendingStopped];
  }

void sub_1000B2738(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 0;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
  [WeakRetained localAttendingStoppedUnexpectedlyWithError:*(void *)(a1 + 40)];
}

void sub_1000B2780(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 0;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
  char v3 = objc_opt_respondsToSelector(WeakRetained, "localAttendingStartedWithRootRequestId:");

  if ((v3 & 1) != 0)
  {
    id v4 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
    [v4 localAttendingStartedWithRootRequestId:*(void *)(a1 + 40)];
  }

void sub_1000B280C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
  char v3 = objc_opt_respondsToSelector(WeakRetained, "localAttendingWillStartWithRootRequestId:");

  if ((v3 & 1) != 0)
  {
    id v4 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
    [v4 localAttendingWillStartWithRootRequestId:*(void *)(a1 + 40)];
  }

void sub_1000B35C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000B36A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000B428C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSAudioPowerProvider sharedInstance](&OBJC_CLASS___CSAudioPowerProvider, "sharedInstance"));
  [v2 processAudioChunkForTV:*(void *)(a1 + 32)];

  id v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_fetchAudioDecoderForTV:", objc_msgSend(*(id *)(a1 + 32), "audioFormat")));
  char v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) packets]);
  id v4 = [*(id *)(a1 + 32) streamHandleID];
  id v5 = [*(id *)(a1 + 32) timeStamp];
  id v6 = [*(id *)(a1 + 32) timeStamp];
  LODWORD(v7) = [*(id *)(a1 + 32) numChannels];
  [v8 addPackets:v3 audioStreamHandleId:v4 remoteVAD:0 timestamp:v5 arrivalTimestampToAudioRecorder:v6 wasBuffered:0 receivedNumChannels:v7];
}

void sub_1000B4364(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSAudioPowerProvider sharedInstance](&OBJC_CLASS___CSAudioPowerProvider, "sharedInstance"));
  [v2 processAudioChunk:*(void *)(a1 + 32)];

  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 40) + 64LL);
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        objc_msgSend( *(id *)(*((void *)&v8 + 1) + 8 * (void)v7),  "attSiriAudioSrcNodeLPCMRecordBufferAvailable:audioChunk:",  *(void *)(a1 + 40),  *(void *)(a1 + 32),  (void)v8);
        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v5);
  }
}

id sub_1000B4478(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 != 7)
  {
    id v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      uint64_t v7 = "-[CSAttSiriAudioSrcNode audioStreamProvider:didStopStreamUnexpectedly:]_block_invoke";
      __int16 v8 = 2048;
      uint64_t v9 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Tandem stream stopped unexpectedly for reason: %ld",  (uint8_t *)&v6,  0x16u);
    }

    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
    [v4 attSiriAudioSrcNodeDidStopUnexpectedly:*(void *)(a1 + 32)];
  }

  return [*(id *)(a1 + 32) _handleDidStop];
}

id sub_1000B4564(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 64) removeObject:*(void *)(a1 + 40)];
}

void sub_1000B4570(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 64) containsObject:*(void *)(a1 + 40)] & 1) == 0)
  {
    if ([*(id *)(a1 + 40) conformsToProtocol:&OBJC_PROTOCOL___CSAttSiriAudioDataReceiver])
    {
      [*(id *)(*(void *)(a1 + 32) + 64) addObject:*(void *)(a1 + 40)];
    }

    else
    {
      uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
      {
        uint64_t v3 = *(void *)(a1 + 40);
        int v4 = 136315394;
        id v5 = "-[CSAttSiriAudioSrcNode addReceiver:]_block_invoke";
        __int16 v6 = 2112;
        uint64_t v7 = v3;
        _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Unsupported receiver: %@",  (uint8_t *)&v4,  0x16u);
      }
    }
  }

void sub_1000B4680(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) tandemStream]);
  id v7 = (id)objc_claimAutoreleasedReturnValue([v2 streamProvider]);

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v7 recordRoute]);
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v7 playbackRoute]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v7 recordDeviceInfo]);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, void *, void *, void *))(v6 + 16))(v6, v3, v4, v5);
  }
}

uint64_t sub_1000B4728(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000B4738(uint64_t a1)
{
}

void sub_1000B4740(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) tandemStream]);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v2 streamProvider]);

  uint64_t v3 = objc_claimAutoreleasedReturnValue([v6 recordRoute]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1000B47A8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) tandemStream]);
  id v9 = (id)objc_claimAutoreleasedReturnValue([v2 streamProvider]);

  uint64_t v3 = objc_claimAutoreleasedReturnValue([v9 recordRoute]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  uint64_t v6 = objc_claimAutoreleasedReturnValue([v9 playbackRoute]);
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
  __int16 v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

uint64_t sub_1000B4830(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_1000B4844(uint64_t a1)
{
  return [*(id *)(a1 + 40) attachToPrimaryStreamWithCompletion:*(void *)(a1 + 48)];
}

void sub_1000B605C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    id v15 = "-[CSCommandControlBehaviorMonitor notifyDidStopStream:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", buf, 0xCu);
  }

  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers", 0));
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        __int16 v8 = *(void **)(*((void *)&v9 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v8, "commandControlBehaviorMonitor:didStopStream:") & 1) != 0) {
          [v8 commandControlBehaviorMonitor:*(void *)(a1 + 32) didStopStream:*(void *)(a1 + 40)];
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v5);
  }
}

void sub_1000B61D4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    id v15 = "-[CSCommandControlBehaviorMonitor notifyWillStopStream:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", buf, 0xCu);
  }

  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers", 0));
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        __int16 v8 = *(void **)(*((void *)&v9 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v8, "commandControlBehaviorMonitor:willStopStream:") & 1) != 0) {
          [v8 commandControlBehaviorMonitor:*(void *)(a1 + 32) willStopStream:*(void *)(a1 + 40)];
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v5);
  }
}

void sub_1000B634C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    id v15 = "-[CSCommandControlBehaviorMonitor notifyDidStartStreamWithContext:successfully:option:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", buf, 0xCu);
  }

  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers", 0));
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        __int16 v8 = *(void **)(*((void *)&v9 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v8,  "commandControlBehaviorMonitor:didStartStreamWithContext:successfully:option:") & 1) != 0) {
          [v8 commandControlBehaviorMonitor:*(void *)(a1 + 32) didStartStreamWithContext:*(void *)(a1 + 40) successfully:*(unsigned __int8 *)(a1 + 56) option:*(void *)(a1 + 48)];
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v5);
  }
}

void sub_1000B64CC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    id v15 = "-[CSCommandControlBehaviorMonitor notifyWillStartStreamWithContext:option:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", buf, 0xCu);
  }

  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers", 0));
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        __int16 v8 = *(void **)(*((void *)&v9 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v8, "commandControlBehaviorMonitor:willStartStreamWithContext:option:") & 1) != 0) {
          [v8 commandControlBehaviorMonitor:*(void *)(a1 + 32) willStartStreamWithContext:*(void *)(a1 + 40) option:*(void *)(a1 + 48)];
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v5);
  }
}

void sub_1000B6648(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  [v2 removeObject:*(void *)(a1 + 40)];
}

void sub_1000B6688(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_1000B6708(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSCommandControlBehaviorMonitor);
  id v2 = (void *)qword_10027FF48;
  qword_10027FF48 = (uint64_t)v1;
}

BOOL sub_1000B6814(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriEnabledMonitor sharedInstance](&OBJC_CLASS___CSSiriEnabledMonitor, "sharedInstance"));
  unsigned __int8 v2 = [v1 isEnabled];

  if ((v2 & 1) == 0)
  {
    uint64_t v3 = (os_log_s *)CSLogCategoryASV;
    if (os_log_type_enabled(CSLogCategoryASV, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[CSSmartSiriVolumeRunPolicy _addSmartSiriVolumeEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s SmartSiriVolume cannot be resumed because Siri is not enabled",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

void sub_1000B7B98(uint64_t a1, void *a2)
{
  id v4 = a2;
  [v4 setTimestamp:mach_absolute_time()];
  id v3 = [[SCDAPerceptualAudioHash alloc] initWithData:*(void *)(a1 + 32)];
  [v4 setPerceptualAudioHash:v3];

  [v4 setActivationSource:14];
  objc_msgSend(v4, "setActivationExpirationTime:", objc_msgSend(*(id *)(a1 + 40), "unsignedLongLongValue"));
}

void sub_1000B7C20(uint64_t a1, void *a2)
{
  id v4 = a2;
  [v4 setTimestamp:mach_absolute_time()];
  id v3 = [[AFMyriadPerceptualAudioHash alloc] initWithData:*(void *)(a1 + 32)];
  [v4 setPerceptualAudioHash:v3];

  [v4 setActivationSource:14];
  objc_msgSend(v4, "setActivationExpirationTime:", objc_msgSend(*(id *)(a1 + 40), "unsignedLongLongValue"));
}

void sub_1000B7CA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  int v5 = (void *)CSLogContextFacilityCoreSpeech;
  if (v4)
  {
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR)) {
      goto LABEL_8;
    }
    uint64_t v6 = v5;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([v7 localizedDescription]);
    int v11 = 136315394;
    __int128 v12 = "-[CSSiriLauncher notifyDarwinVoiceTrigger:deviceId:myriadPHash:myriadLateActivationExpirationTime:completion:]_block_invoke";
    __int16 v13 = 2114;
    char v14 = v8;
    _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Cannot invoke Siri client for voice trigger from Darwin : %{public}@",  (uint8_t *)&v11,  0x16u);
  }

  else
  {
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315138;
      __int128 v12 = "-[CSSiriLauncher notifyDarwinVoiceTrigger:deviceId:myriadPHash:myriadLateActivationExpirationTime:completion"
            ":]_block_invoke_3";
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v5,  OS_LOG_TYPE_DEFAULT,  "%s Invoked Siri client for voice trigger from Darwin",  (uint8_t *)&v11,  0xCu);
    }

    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
    -[os_log_s setVoiceTriggerEverUsed](v6, "setVoiceTriggerEverUsed");
  }

LABEL_8:
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue( +[CSFVoiceTriggerEventInfoSelfLogger sharedLogger]( &OBJC_CLASS___CSFVoiceTriggerEventInfoSelfLogger,  "sharedLogger"));
  [v9 logSiriLaunchCompletedWithVoiceTriggerEventInfo:*(void *)(a1 + 32)];

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(void))(v10 + 16))();
  }
}

void sub_1000B7E50(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v6 error]);

  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v6 error]);
    (*(void (**)(uint64_t, BOOL, void *))(v4 + 16))(v4, v3 == 0LL, v5);
  }
}

void sub_1000B7ED0(uint64_t a1)
{
  unsigned __int8 v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315394;
    int v5 = "-[CSSiriLauncher deactivateSiriActivationConnectionWithReason:withOptions:withContext:]_block_invoke";
    __int16 v6 = 2048;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s SiriActivationConnection deactivated due to %ld",  (uint8_t *)&v4,  0x16u);
  }

void sub_1000B7F88(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 32))
  {
    id v3 = a2;
    int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    BOOL v5 = v4 == 0LL;

    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = (id)objc_claimAutoreleasedReturnValue([v3 error]);

    (*(void (**)(uint64_t, BOOL, id))(v6 + 16))(v6, v5, v7);
  }

void sub_1000B801C(id a1, AFSiriActivationResult *a2)
{
  unsigned __int8 v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[AFSiriActivationResult error](v2, "error"));

  if (v3)
  {
    int v4 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      BOOL v5 = v4;
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[AFSiriActivationResult error](v2, "error"));
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
      int v8 = 136315394;
      __int128 v9 = "-[CSSiriLauncher notifyWakeKeywordSpokenRemora:deviceId:]_block_invoke";
      __int16 v10 = 2114;
      int v11 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Error during AFSiriActivationVoiceKeywordDetected : %{public}@",  (uint8_t *)&v8,  0x16u);
    }
  }
}

void sub_1000B8128(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setTimestamp:mach_absolute_time()];
  id v4 = [[SCDAPerceptualAudioHash alloc] initWithData:*(void *)(a1 + 32)];
  [v3 setPerceptualAudioHash:v4];
}

void sub_1000B8190(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setTimestamp:mach_absolute_time()];
  id v4 = [[AFMyriadPerceptualAudioHash alloc] initWithData:*(void *)(a1 + 32)];
  [v3 setPerceptualAudioHash:v4];
}

void sub_1000B81F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  BOOL v5 = (void *)CSLogContextFacilityCoreSpeech;
  if (v4)
  {
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR)) {
      goto LABEL_8;
    }
    uint64_t v6 = v5;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 localizedDescription]);
    int v11 = 136315394;
    __int128 v12 = "-[CSSiriLauncher notifyRemoraVoiceTrigger:myriadPHash:deviceId:completion:]_block_invoke";
    __int16 v13 = 2114;
    char v14 = v8;
    _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Cannot invoke Siri Client: %{public}@",  (uint8_t *)&v11,  0x16u);
  }

  else
  {
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315138;
      __int128 v12 = "-[CSSiriLauncher notifyRemoraVoiceTrigger:myriadPHash:deviceId:completion:]_block_invoke_3";
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v5,  OS_LOG_TYPE_DEFAULT,  "%s Invoked Siri Client",  (uint8_t *)&v11,  0xCu);
    }

    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
    -[os_log_s setVoiceTriggerEverUsed](v6, "setVoiceTriggerEverUsed");
  }

LABEL_8:
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue( +[CSFVoiceTriggerEventInfoSelfLogger sharedLogger]( &OBJC_CLASS___CSFVoiceTriggerEventInfoSelfLogger,  "sharedLogger"));
  [v9 logSiriLaunchCompletedWithVoiceTriggerEventInfo:*(void *)(a1 + 32)];

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(void))(v10 + 16))();
  }
}

void sub_1000B83A0(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 32))
  {
    id v3 = a2;
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    BOOL v5 = v4 == 0LL;

    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = (id)objc_claimAutoreleasedReturnValue([v3 error]);

    (*(void (**)(uint64_t, BOOL, id))(v6 + 16))(v6, v5, v7);
  }

void sub_1000B8434(id a1, AFSiriActivationResult *a2)
{
  unsigned __int8 v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[AFSiriActivationResult error](v2, "error"));

  if (v3)
  {
    id v4 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      BOOL v5 = v4;
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[AFSiriActivationResult error](v2, "error"));
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
      int v8 = 136315394;
      __int128 v9 = "-[CSSiriLauncher notifyWakeKeywordSpokenBluetoothDevice:deviceId:]_block_invoke";
      __int16 v10 = 2114;
      int v11 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Cannot notify wake keyword spoken event : %{public}@",  (uint8_t *)&v8,  0x16u);
    }
  }
}

void sub_1000B8540(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  BOOL v5 = (void *)CSLogContextFacilityCoreSpeech;
  if (v4)
  {
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR)) {
      goto LABEL_8;
    }
    uint64_t v6 = v5;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 localizedDescription]);
    int v11 = 136315394;
    __int128 v12 = "-[CSSiriLauncher notifyBluetoothDeviceVoiceTrigger:deviceId:completion:]_block_invoke";
    __int16 v13 = 2114;
    char v14 = v8;
    _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Cannot invoke Siri client : %{public}@",  (uint8_t *)&v11,  0x16u);
  }

  else
  {
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315138;
      __int128 v12 = "-[CSSiriLauncher notifyBluetoothDeviceVoiceTrigger:deviceId:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v5,  OS_LOG_TYPE_DEFAULT,  "%s Invoked Siri client",  (uint8_t *)&v11,  0xCu);
    }

    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
    -[os_log_s setVoiceTriggerEverUsed](v6, "setVoiceTriggerEverUsed");
  }

LABEL_8:
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue( +[CSFVoiceTriggerEventInfoSelfLogger sharedLogger]( &OBJC_CLASS___CSFVoiceTriggerEventInfoSelfLogger,  "sharedLogger"));
  [v9 logSiriLaunchCompletedWithVoiceTriggerEventInfo:*(void *)(a1 + 32)];

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(void))(v10 + 16))();
  }
}

void sub_1000B86E8(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v6 error]);

  uint64_t v4 = *(void *)(a1 + 32);
  if (v3)
  {
    if (v4)
    {
      BOOL v5 = (void *)objc_claimAutoreleasedReturnValue([v6 error]);
      (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v5);
    }
  }

  else if (v4)
  {
    (*(void (**)(uint64_t, uint64_t, void))(v4 + 16))(v4, 1LL, 0LL);
  }
}

void sub_1000B8778(id a1, AFSiriActivationResult *a2)
{
  unsigned __int8 v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[AFSiriActivationResult error](v2, "error"));

  if (v3)
  {
    uint64_t v4 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      BOOL v5 = v4;
      id v6 = (void *)objc_claimAutoreleasedReturnValue(-[AFSiriActivationResult error](v2, "error"));
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
      int v8 = 136315394;
      __int128 v9 = "-[CSSiriLauncher notifyWakeKeywordSpokenCarPlay:deviceId:]_block_invoke";
      __int16 v10 = 2114;
      int v11 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Cannot notify wake keyword spoken event : %{public}@",  (uint8_t *)&v8,  0x16u);
    }
  }
}

void sub_1000B8884(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setTimestamp:mach_absolute_time()];
  id v4 = [[SCDAPerceptualAudioHash alloc] initWithData:*(void *)(a1 + 32)];
  [v3 setPerceptualAudioHash:v4];
}

void sub_1000B88EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setTimestamp:mach_absolute_time()];
  id v4 = [[AFMyriadPerceptualAudioHash alloc] initWithData:*(void *)(a1 + 32)];
  [v3 setPerceptualAudioHash:v4];
}

void sub_1000B8954(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  BOOL v5 = (void *)CSLogContextFacilityCoreSpeech;
  if (v4)
  {
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR)) {
      goto LABEL_8;
    }
    id v6 = v5;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 localizedDescription]);
    int v11 = 136315394;
    __int128 v12 = "-[CSSiriLauncher notifyCarPlayVoiceTrigger:deviceId:myriadPHash:completion:]_block_invoke";
    __int16 v13 = 2114;
    char v14 = v8;
    _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Cannot invoke Siri client for voice trigger from Jarvis : %{public}@",  (uint8_t *)&v11,  0x16u);
  }

  else
  {
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315138;
      __int128 v12 = "-[CSSiriLauncher notifyCarPlayVoiceTrigger:deviceId:myriadPHash:completion:]_block_invoke_3";
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v5,  OS_LOG_TYPE_DEFAULT,  "%s Invoked Siri client for voice trigger from Jarvis",  (uint8_t *)&v11,  0xCu);
    }

    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
    -[os_log_s setVoiceTriggerEverUsed](v6, "setVoiceTriggerEverUsed");
  }

LABEL_8:
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue( +[CSFVoiceTriggerEventInfoSelfLogger sharedLogger]( &OBJC_CLASS___CSFVoiceTriggerEventInfoSelfLogger,  "sharedLogger"));
  [v9 logSiriLaunchCompletedWithVoiceTriggerEventInfo:*(void *)(a1 + 32)];

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(void))(v10 + 16))();
  }
}

void sub_1000B8AFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  BOOL v5 = (void *)CSLogContextFacilityCoreSpeech;
  if (v4)
  {
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      id v6 = v5;
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 localizedDescription]);
      int v10 = 136315394;
      int v11 = "-[CSSiriLauncher notifyCarPlayVoiceTriggerPrewarm:deviceId:completion:]_block_invoke";
      __int16 v12 = 2114;
      __int16 v13 = v8;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s AFSiriActivationCarPlayDeviceVoiceTriggerPrewarm failed : %{public}@",  (uint8_t *)&v10,  0x16u);
    }
  }

  else if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 136315138;
    int v11 = "-[CSSiriLauncher notifyCarPlayVoiceTriggerPrewarm:deviceId:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v5,  OS_LOG_TYPE_DEFAULT,  "%s AFSiriActivationCarPlayDeviceVoiceTriggerPrewarm success",  (uint8_t *)&v10,  0xCu);
  }

  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    (*(void (**)(void))(v9 + 16))();
  }
}

void sub_1000B8C6C(id a1, AFSiriActivationResult *a2)
{
  unsigned __int8 v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[AFSiriActivationResult error](v2, "error"));

  if (v3)
  {
    id v4 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      BOOL v5 = v4;
      id v6 = (void *)objc_claimAutoreleasedReturnValue(-[AFSiriActivationResult error](v2, "error"));
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
      int v8 = 136315394;
      uint64_t v9 = "-[CSSiriLauncher notifyWakeKeywordSpokenInBuiltInMic:]_block_invoke";
      __int16 v10 = 2114;
      int v11 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Cannot notify wake keyword spoken event : %{public}@",  (uint8_t *)&v8,  0x16u);
    }
  }
}

void sub_1000B8D78(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setTimestamp:mach_absolute_time()];
  id v4 = [[SCDAPerceptualAudioHash alloc] initWithData:*(void *)(a1 + 32)];
  [v3 setPerceptualAudioHash:v4];

  if (*(_BYTE *)(a1 + 40))
  {
    BOOL v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      int v8 = "-[CSSiriLauncher notifyBuiltInVoiceTrigger:myriadPHash:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s Overriding Myriad state as request was made during a ringtone",  (uint8_t *)&v7,  0xCu);
    }

    id v6 = [[SCDAGoodnessScoreOverrideState alloc] initWithOverrideOption:1 reason:@"Trigger was during a ringtone"];
    [v3 setOverrideState:v6];
  }
}

void sub_1000B8EA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setTimestamp:mach_absolute_time()];
  id v4 = [[AFMyriadPerceptualAudioHash alloc] initWithData:*(void *)(a1 + 32)];
  [v3 setPerceptualAudioHash:v4];

  if (*(_BYTE *)(a1 + 40))
  {
    BOOL v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      int v8 = "-[CSSiriLauncher notifyBuiltInVoiceTrigger:myriadPHash:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s Overriding Myriad state as request was made during a ringtone",  (uint8_t *)&v7,  0xCu);
    }

    id v6 = [[AFMyriadGoodnessScoreOverrideState alloc] initWithOverrideOption:1 reason:@"Trigger was during a ringtone"];
    [v3 setOverrideState:v6];
  }
}

void sub_1000B8FD0(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  BOOL v5 = (void *)CSLogContextFacilityCoreSpeech;
  if (v4)
  {
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR)) {
      goto LABEL_8;
    }
    id v6 = v5;
    int v7 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 localizedDescription]);
    int v12 = 136315394;
    __int16 v13 = "-[CSSiriLauncher notifyBuiltInVoiceTrigger:myriadPHash:completion:]_block_invoke";
    __int16 v14 = 2114;
    id v15 = v8;
    _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Cannot invoke Siri client : %{public}@",  (uint8_t *)&v12,  0x16u);
  }

  else
  {
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = (void *)a1[6];
      int v12 = 136315394;
      __int16 v13 = "-[CSSiriLauncher notifyBuiltInVoiceTrigger:myriadPHash:completion:]_block_invoke";
      __int16 v14 = 2048;
      id v15 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v5,  OS_LOG_TYPE_DEFAULT,  "%s Invoked Siri client successfully with activationSource: %ld",  (uint8_t *)&v12,  0x16u);
    }

    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
    -[os_log_s setVoiceTriggerEverUsed](v6, "setVoiceTriggerEverUsed");
  }

LABEL_8:
  __int16 v10 = (void *)objc_claimAutoreleasedReturnValue( +[CSFVoiceTriggerEventInfoSelfLogger sharedLogger]( &OBJC_CLASS___CSFVoiceTriggerEventInfoSelfLogger,  "sharedLogger"));
  [v10 logSiriLaunchCompletedWithVoiceTriggerEventInfo:a1[4]];

  uint64_t v11 = a1[5];
  if (v11) {
    (*(void (**)(void))(v11 + 16))();
  }
}

void sub_1000B9188(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  BOOL v5 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = v5;
    int v8 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    int v11 = 136315650;
    int v12 = "-[CSSiriLauncher _notifyBuiltInVoiceTriggerPrewarm:activationSource:completion:]_block_invoke";
    __int16 v13 = 2048;
    uint64_t v14 = v6;
    __int16 v15 = 2112;
    id v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTriggerPrewarm completed for activation source:%ld with error:%@",  (uint8_t *)&v11,  0x20u);
  }

  uint64_t v9 = *(void *)(a1 + 32);
  if (v9)
  {
    __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    (*(void (**)(uint64_t, BOOL, void *))(v9 + 16))(v9, v4 == 0LL, v10);
  }
}

void sub_1000B932C(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSSiriLauncher);
  unsigned __int8 v2 = (void *)qword_10027FF58;
  qword_10027FF58 = (uint64_t)v1;
}

void sub_1000BAD64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

LABEL_56:
      if (self->_onDeviceDictationSampled)
      {
        double v92 = objc_alloc(&OBJC_CLASS___CSUncompressedAudioLogging);
        char v86 = (CSUncompressedAudioLogging *)objc_claimAutoreleasedReturnValue([v58 UUIDString]);
        __int16 v93 = self->_language;
        uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue([v59 task]);
        double v95 = -[CSUncompressedAudioLogging initWithDictationInteractionId:asrId:languageCode:task:]( v92,  "initWithDictationInteractionId:asrId:languageCode:task:",  v134,  v86,  v93,  v94);
        id v96 = self->_audioLogging;
        self->_audioLogging = v95;
      }

      else
      {
        uint64_t v97 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 136315138;
          v147 = "-[CSAttSiriAsrNode _startLocalSpeechRecognizerIfNeeded]";
          _os_log_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_DEFAULT,  "%s Request was not selected for sampling. Disabling audio logging.",  buf,  0xCu);
        }

        char v86 = self->_audioLogging;
        self->_audioLogging = 0LL;
      }

      goto LABEL_61;
    }

    uint64_t v23 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      __int16 v91 = self->_localSpeechRecognizerTaskString;
      *(_DWORD *)__int128 buf = 136315650;
      v147 = "-[CSAttSiriAsrNode _startLocalSpeechRecognizerIfNeeded]";
      v148 = 2114;
      v149 = *(double *)&v15;
      v150 = 2114;
      v151 = (const char *)v91;
      _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "%s Local speech recognizer can't started : locale(%{public}@), taskName(%{public}@)",  buf,  0x20u);
    }

    -[CSAttSiriAsrNode _setLocalSpeechRecognizerState:](self, "_setLocalSpeechRecognizerState:", 3LL);
    -[CSAttSiriAsrNode _clearAudioProcessWaitingBufferIfNeeded](self, "_clearAudioProcessWaitingBufferIfNeeded");
  }

void sub_1000BD134( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

double sub_1000BEEFC(uint64_t a1)
{
  double result = *(double *)(*(void *)(a1 + 32) + 264LL);
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

double sub_1000BEF10(uint64_t a1)
{
  double result = *(double *)(*(void *)(a1 + 32) + 144LL);
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1000BEF24(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 13LL);
  return result;
}

uint64_t sub_1000BEF38(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 12LL);
  return result;
}

uint64_t sub_1000BEF4C(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 128LL);
  return result;
}

void sub_1000BEF60(double *a1)
{
  uint64_t v1 = *((void *)a1 + 4);
  if (!*(_BYTE *)(v1 + 12))
  {
    id v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *((void *)a1 + 7);
      uint64_t v5 = *((void *)a1 + 8);
      uint64_t v7 = *((void *)a1 + 5);
      uint64_t v6 = *((void *)a1 + 6);
      uint64_t v8 = *((void *)a1 + 9);
      uint64_t v9 = *((void *)a1 + 10);
      uint64_t v10 = *((void *)a1 + 11);
      int v20 = 136316930;
      __int128 v21 = "-[CSAttSiriAsrNode localSpeechRecognizer:didProduceEndpointFeaturesWithWordCount:trailingSilenceDuration:eos"
            "Likelihood:pauseCounts:silencePosterior:processedAudioDurationInMilliseconds:acousticEndpointerScore:]_block_invoke";
      __int16 v22 = 2048;
      uint64_t v23 = v6;
      __int16 v24 = 2048;
      uint64_t v25 = v4;
      __int16 v26 = 2048;
      uint64_t v27 = v5;
      __int16 v28 = 2112;
      uint64_t v29 = v7;
      __int16 v30 = 2048;
      uint64_t v31 = v8;
      __int16 v32 = 2048;
      uint64_t v33 = v9;
      __int16 v34 = 2048;
      uint64_t v35 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s wordCount = %ld, trailingSilenceDuration = %ld, eosLikelihood = %f, pauseCounts = %@, silencePosterior = %f, processedAudioDurationInMilliseconds = %ld, acousticEndpointerScore = %f",  (uint8_t *)&v20,  0x52u);
      uint64_t v1 = *((void *)a1 + 4);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(v1 + 72));
    uint64_t v12 = *((void *)a1 + 6);
    uint64_t v13 = *((void *)a1 + 7);
    double v14 = a1[8];
    double v15 = a1[9];
    uint64_t v16 = *((void *)a1 + 5);
    int v17 = (void *)objc_claimAutoreleasedReturnValue( +[LBLocalSpeechRecognitionSettings getTaskStringFromSpeechRecognitionSettings:]( &OBJC_CLASS___LBLocalSpeechRecognitionSettings,  "getTaskStringFromSpeechRecognitionSettings:",  *(void *)(*((void *)a1 + 4) + 176LL)));
    [WeakRetained processASRFeaturesWithWordCount:v12 trailingSilenceDuration:v13 eosLikelihood:v16 pauseCounts:v17 silencePosterior:*((void *)a1 + 10) taskName:0 proces sedAudioDurationInMilliseconds:v14 acousticEndpointerScore:v15 fromServer:a1[11]];

    id v18 = objc_loadWeakRetained((id *)(*((void *)a1 + 4) + 80LL));
    double v19 = a1[8];
    *(float *)&double v19 = v19;
    [v18 setEndpointerFeatureEoS:v19];
  }

void sub_1000BF104(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 104LL) != *(void *)(a1 + 40))
  {
    uint64_t v1 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v41 = "-[CSAttSiriAsrNode localSpeechRecognizer:didCompletionRecognitionWithStatistics:error:]_block_invoke";
      unsigned __int8 v2 = "%s Ignoring completion from previous recognizer!";
      id v3 = v1;
      os_log_type_t v4 = OS_LOG_TYPE_INFO;
      uint32_t v5 = 12;
LABEL_4:
      _os_log_impl((void *)&_mh_execute_header, v3, v4, v2, buf, v5);
      return;
    }

    return;
  }

  double v7 = *(double *)(a1 + 48);
  uint64_t v8 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (v7 != 0.0 && os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315394;
    id v41 = "-[CSAttSiriAsrNode localSpeechRecognizer:didCompletionRecognitionWithStatistics:error:]_block_invoke";
    __int16 v42 = 2114;
    double v43 = v7;
    _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Speech recognition encountered error: %{public}@",  buf,  0x16u);
    uint64_t v8 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    id v41 = "-[CSAttSiriAsrNode localSpeechRecognizer:didCompletionRecognitionWithStatistics:error:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s Invalidating local speech recognizer for finish",  buf,  0xCu);
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localSRBridgeListener]);

  uint64_t v10 = *(id **)(a1 + 32);
  if (v9)
  {
    id v11 = v10[20];
    uint64_t v12 = *(void **)(a1 + 32);
    uint64_t v13 = v12[24];
    double v14 = (void *)objc_claimAutoreleasedReturnValue([v12 localSRBridgeListener]);
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472LL;
    v34[2] = sub_1000BF5B0;
    v34[3] = &unk_10022C800;
    id v35 = *(id *)(a1 + 56);
    id v36 = v11;
    uint64_t v39 = v13;
    id v15 = *(id *)(a1 + 48);
    uint64_t v16 = *(void *)(a1 + 32);
    id v37 = v15;
    uint64_t v38 = v16;
    id v17 = v11;
    [v14 notifyClientsWithBlock:v34];
  }

  else
  {
    [v10 _invalidateLocalSpeechRecognizer];
    [*(id *)(*(void *)(a1 + 32) + 344) endAudioWithCancellation:0 completion:0];
    uint64_t v18 = *(void *)(a1 + 32);
    if (!*(_BYTE *)(v18 + 15)) {
      goto LABEL_15;
    }
    id v17 = (id)objc_claimAutoreleasedReturnValue( +[CESRDictationOnDeviceSampling sharedManager]( &OBJC_CLASS___CESRDictationOnDeviceSampling,  "sharedManager"));
    [v17 incrementSampledRequestCount];
  }

  uint64_t v18 = *(void *)(a1 + 32);
LABEL_15:
  id v19 = [*(id *)(v18 + 304) estimatedUserSpeakingEndedHostTime];
  uint64_t v20 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v20 + 14))
  {
    uint64_t v21 = *(void *)(v20 + 288);
    if (v21)
    {
      id v22 = v19;
      if (v19)
      {
        uint64_t v23 = mach_continuous_time();
        +[CSFTimeUtils hostTimeToTimeInterval:]( &OBJC_CLASS___CSFTimeUtils,  "hostTimeToTimeInterval:",  v21 - v23 - (void)v22 + mach_absolute_time());
        double v25 = v24;
        __int16 v26 = (const char *)+[CSFTimeUtils absoluteHostTimeToContinuousHostTime:]( &OBJC_CLASS___CSFTimeUtils,  "absoluteHostTimeToContinuousHostTime:",  v22);
        os_signpost_id_t v27 = os_signpost_id_generate(CSLogContextFacilityCoreSpeech);
        __int16 v28 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        uint64_t v29 = v28;
        if (v27 - 1 > 0xFFFFFFFFFFFFFFFDLL)
        {

          __int16 v30 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        }

        else
        {
          if (os_signpost_enabled(v28))
          {
            *(_DWORD *)__int128 buf = 134349570;
            id v41 = v26;
            __int16 v42 = 2080;
            double v43 = COERCE_DOUBLE("SiriX");
            __int16 v44 = 2080;
            double v45 = "enableTelemetry=YES";
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v29,  OS_SIGNPOST_INTERVAL_BEGIN,  v27,  "ondevice_EagerCPL",  "%{public, signpost.description:begin_time}llu, %s %s",  buf,  0x20u);
          }

          __int16 v30 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          if (os_signpost_enabled(v30))
          {
            uint64_t v31 = *(const char **)(*(void *)(a1 + 32) + 288LL);
            *(_DWORD *)__int128 buf = 134349570;
            id v41 = v31;
            __int16 v42 = 2080;
            double v43 = COERCE_DOUBLE("SiriX");
            __int16 v44 = 2080;
            double v45 = "enableTelemetry=YES";
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v30,  OS_SIGNPOST_INTERVAL_END,  v27,  "ondevice_EagerCPL",  "%{public, signpost.description:end_time}llu, %s %s",  buf,  0x20u);
          }
        }

        __int16 v32 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v33 = *(void *)(*(void *)(a1 + 32) + 288LL);
          *(_DWORD *)__int128 buf = 136315906;
          id v41 = "-[CSAttSiriAsrNode localSpeechRecognizer:didCompletionRecognitionWithStatistics:error:]_block_invoke";
          __int16 v42 = 2050;
          double v43 = v25 * 1000.0;
          __int16 v44 = 2050;
          double v45 = v26;
          __int16 v46 = 2050;
          uint64_t v47 = v33;
          unsigned __int8 v2 = "%s eagerCPL time interval: %{public}f, userSpeakingEndedHostTime: %{public}llu, lastEndpointEagerResultTi"
               "me: %{public}llu";
          id v3 = v32;
          os_log_type_t v4 = OS_LOG_TYPE_DEFAULT;
          uint32_t v5 = 42;
          goto LABEL_4;
        }
      }
    }
  }

void sub_1000BF5B0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 56);
  os_log_type_t v4 = *(dispatch_queue_s **)(v3 + 96);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_1000BF640;
  v5[3] = &unk_10022EFD0;
  void v5[4] = v3;
  id v6 = *(id *)(a1 + 40);
  dispatch_async(v4, v5);
}

void sub_1000BF640(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 352LL);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 344LL);
  id v6 = _NSConcreteStackBlock;
  uint64_t v7 = 3221225472LL;
  uint64_t v8 = sub_1000BF718;
  uint64_t v9 = &unk_10022EFF8;
  id v4 = v2;
  id v10 = v4;
  id v11 = *(id *)(a1 + 40);
  [v3 endAudioWithCancellation:0 completion:&v6];
  if (*(_BYTE *)(*(void *)(a1 + 32) + 15LL))
  {
    uint32_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[CESRDictationOnDeviceSampling sharedManager]( &OBJC_CLASS___CESRDictationOnDeviceSampling,  "sharedManager",  v6,  v7,  v8,  v9,  v10));
    [v5 incrementSampledRequestCount];
  }
}

id sub_1000BF718(uint64_t a1, int a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) logSamplingEventStatus:a2 ^ 1u requestId:*(void *)(a1 + 40) error:a3];
}

void sub_1000BF72C(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ([*(id *)(*(void *)(a1 + 32) + 176) enableVoiceCommands])
  {
    [v5 localSpeechServiceDidReceivedEagerRecognitionCandidateWithRequestId:*(void *)(a1 + 40) rcId:*(void *)(a1 + 72) speechPackage:*(void *)(a1 + 48) duration:*(void *)(a1 + 56) metadata:*(double *)(a1 + 80)];
  }

  else
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 72);
    if (*(void *)(a1 + 64)) {
      objc_msgSend( v5,  "localSpeechServiceDidReceivedEagerRecognitionCandidateWithRequestId:rcId:multiUserSpeechPackage:duration:",  v3,  v4,  *(double *)(a1 + 80));
    }
    else {
      [v5 localSpeechServiceDidReceivedEagerRecognitionCandidateWithRequestId:v3 rcId:v4 speechPackage:*(void *)(a1 + 48) duration:*(double *)(a1 + 80)];
    }
  }
}

void sub_1000BF7B0(void *a1, void *a2)
{
  id v4 = a2;
  if ([*(id *)(a1[4] + 176) enableVoiceCommands])
  {
    [v4 localSpeechServiceDidReceivedFinalResultWithRequestId:a1[5] speechPackage:a1[6] metadata:a1[7]];
  }

  else
  {
    uint64_t v3 = a1[5];
    if (a1[8]) {
      objc_msgSend(v4, "localSpeechServiceDidReceivedFinalResultWithRequestId:multiUserSpeechPackage:", v3);
    }
    else {
      [v4 localSpeechServiceDidReceivedFinalResultWithRequestId:v3 speechPackage:a1[6]];
    }
  }
}

void sub_1000BF824(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 104LL) == *(void *)(a1 + 40))
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) sharedUserIdSpeechPackageMap]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 allKeys]);

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 88LL));
    id v6 = (__CFString *)objc_claimAutoreleasedReturnValue([WeakRetained getSharedUserIdWithHighestVoiceIdScore:v4]);

    uint64_t v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (v6)
    {
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
        int v19 = 136315650;
        uint64_t v20 = "-[CSAttSiriAsrNode localSpeechRecognizer:didRecognizeMultiUserSpeechPackage:]_block_invoke";
        __int16 v21 = 2112;
        id v22 = v6;
        __int16 v23 = 2112;
        double v24 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s Picked up top user: %@, from resultPackage: %@",  (uint8_t *)&v19,  0x20u);
      }

      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) sharedUserIdSpeechPackageMap]);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:v6]);
    }

    else
    {
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
      {
        int v19 = 136315138;
        uint64_t v20 = "-[CSAttSiriAsrNode localSpeechRecognizer:didRecognizeMultiUserSpeechPackage:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s No top user - using first (random) speech package",  (uint8_t *)&v19,  0xCu);
      }

      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) sharedUserIdSpeechPackageMap]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 allValues]);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v10 firstObject]);
    }

    unsigned int v11 = [v9 isFinal];
    uint64_t v12 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = @"NO";
      if (v11) {
        uint64_t v13 = @"YES";
      }
      int v19 = 136315394;
      uint64_t v20 = "-[CSAttSiriAsrNode localSpeechRecognizer:didRecognizeMultiUserSpeechPackage:]_block_invoke";
      __int16 v21 = 2114;
      id v22 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s MultiUser: isFinal package : %{public}@",  (uint8_t *)&v19,  0x16u);
    }

    if (!*(void *)(*(void *)(a1 + 32) + 320LL)) {
      *(void *)(*(void *)(a1 + 32) + 32+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = mach_continuous_time();
    }
    +[CSAttSiriSpeechPackageHelper getFirstTokenLeadingSilenceFromSpeechPackage:]( &OBJC_CLASS___CSAttSiriSpeechPackageHelper,  "getFirstTokenLeadingSilenceFromSpeechPackage:",  v9);
    *(void *)(*(void *)(a1 + 32) + 336LL) = v14;
    +[CSAttSiriSpeechPackageHelper getFirstTokenDurationFromSpeechPackage:]( &OBJC_CLASS___CSAttSiriSpeechPackageHelper,  "getFirstTokenDurationFromSpeechPackage:",  v9);
    *(void *)(*(void *)(a1 + 32) + 328LL) = v15;
    uint64_t v16 = *(void **)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 48);
    uint64_t v18 = v16[20];
    if (v11)
    {
      [v16 _handleDidRecognizedFinalSpeechPackage:v9 multiUserSpeechPackage:v17 requestId:v18 metadata:0];
    }

    else
    {
      [v16 _handleDidRecognizedSpeechPackageForEagerRecognitionCandidate:v9 multiUserSpeechPackage:v17 requestId:v18 rcId:v16[21] metadata:0];
      ++*(void *)(*(void *)(a1 + 32) + 168LL);
    }
  }

  else
  {
    uint64_t v1 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      int v19 = 136315138;
      uint64_t v20 = "-[CSAttSiriAsrNode localSpeechRecognizer:didRecognizeMultiUserSpeechPackage:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "%s MultiUser: Ignoring completion from previous recognizer!",  (uint8_t *)&v19,  0xCu);
    }
  }

void sub_1000BFB5C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 104) != *(void *)(a1 + 40))
  {
    id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO)) {
      return;
    }
    int v11 = 136315138;
    uint64_t v12 = "-[CSAttSiriAsrNode localSpeechRecognizer:didRecognizePackage:withMetadata:]_block_invoke";
    uint64_t v3 = "%s Ignoring completion from previous recognizer!";
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, v3, (uint8_t *)&v11, 0xCu);
    return;
  }

  if (([*(id *)(v1 + 176) enableVoiceCommands] & 1) == 0)
  {
    id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO)) {
      return;
    }
    int v11 = 136315138;
    uint64_t v12 = "-[CSAttSiriAsrNode localSpeechRecognizer:didRecognizePackage:withMetadata:]_block_invoke";
    uint64_t v3 = "%s Ignoring completion with metadatapackage as enable condition not satisfied!";
    goto LABEL_13;
  }

  unsigned int v5 = [*(id *)(a1 + 48) isFinal];
  id v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = @"NO";
    if (v5) {
      uint64_t v7 = @"YES";
    }
    int v11 = 136315394;
    uint64_t v12 = "-[CSAttSiriAsrNode localSpeechRecognizer:didRecognizePackage:withMetadata:]_block_invoke";
    __int16 v13 = 2114;
    uint64_t v14 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s isFinal package : %{public}@",  (uint8_t *)&v11,  0x16u);
  }

  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = v8[20];
  if (v5)
  {
    [v8 _handleDidRecognizedFinalSpeechPackage:v9 multiUserSpeechPackage:0 requestId:v10 metadata:*(void *)(a1 + 56)];
  }

  else
  {
    [v8 _handleDidRecognizedSpeechPackageForEagerRecognitionCandidate:v9 multiUserSpeechPackage:0 requestId:v10 rcId:v8[21] metadata:*(void *)(a1 + 56)];
    ++*(void *)(*(void *)(a1 + 32) + 168LL);
  }

void sub_1000BFD3C(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 104LL) == *(void *)(a1 + 40))
  {
    unsigned int v3 = [*(id *)(a1 + 48) isFinal];
    id v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v5 = @"NO";
      if (v3) {
        unsigned int v5 = @"YES";
      }
      int v11 = 136315394;
      uint64_t v12 = "-[CSAttSiriAsrNode localSpeechRecognizer:didRecognizePackage:]_block_invoke";
      __int16 v13 = 2114;
      uint64_t v14 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s isFinal package : %{public}@",  (uint8_t *)&v11,  0x16u);
    }

    if (!*(void *)(*(void *)(a1 + 32) + 320LL)) {
      *(void *)(*(void *)(a1 + 32) + 32+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = mach_continuous_time();
    }
    +[CSAttSiriSpeechPackageHelper getFirstTokenLeadingSilenceFromSpeechPackage:]( &OBJC_CLASS___CSAttSiriSpeechPackageHelper,  "getFirstTokenLeadingSilenceFromSpeechPackage:",  *(void *)(a1 + 48));
    *(void *)(*(void *)(a1 + 32) + 336LL) = v6;
    +[CSAttSiriSpeechPackageHelper getFirstTokenDurationFromSpeechPackage:]( &OBJC_CLASS___CSAttSiriSpeechPackageHelper,  "getFirstTokenDurationFromSpeechPackage:",  *(void *)(a1 + 48));
    *(void *)(*(void *)(a1 + 32) + 328LL) = v7;
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = v8[20];
    if (v3)
    {
      [v8 _handleDidRecognizedFinalSpeechPackage:v9 multiUserSpeechPackage:0 requestId:v10 metadata:0];
    }

    else
    {
      [v8 _handleDidRecognizedSpeechPackageForEagerRecognitionCandidate:v9 multiUserSpeechPackage:0 requestId:v10 rcId:v8[21] metadata:0];
      ++*(void *)(*(void *)(a1 + 32) + 168LL);
    }
  }

  else
  {
    uint64_t v1 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      int v11 = 136315138;
      uint64_t v12 = "-[CSAttSiriAsrNode localSpeechRecognizer:didRecognizePackage:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "%s Ignoring completion from previous recognizer!",  (uint8_t *)&v11,  0xCu);
    }
  }

void sub_1000BFF0C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 104) == *(void *)(a1 + 40))
  {
    if (*(void *)(v1 + 128) == 2LL)
    {
      id v4 = *(id *)(v1 + 160);
      unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localSRBridgeListener]);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472LL;
      void v7[2] = sub_1000C0074;
      v7[3] = &unk_10022EE30;
      id v8 = v4;
      id v9 = *(id *)(a1 + 48);
      id v10 = *(id *)(a1 + 56);
      id v6 = v4;
      [v5 notifyClientsWithBlock:v7];
    }
  }

  else
  {
    id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v12 = "-[CSAttSiriAsrNode localSpeechRecognizer:didRecognizeVoiceCommandCandidatePackage:withMetadata:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Ignoring completion from previous recognizer!",  buf,  0xCu);
    }
  }

id sub_1000C0074(void *a1, void *a2)
{
  return [a2 localSpeechServiceDidReceivedVoiceCommandCandidateWithRequestId:a1[4] speechPackage:a1[5] metadata:a1[6]];
}

void sub_1000C0084(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 104) == *(void *)(a1 + 40))
  {
    if (*(void *)(v1 + 128) == 2LL)
    {
      id v4 = *(id *)(v1 + 160);
      unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localSRBridgeListener]);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472LL;
      void v7[2] = sub_1000C01D8;
      v7[3] = &unk_10022EE58;
      id v8 = v4;
      id v9 = *(id *)(a1 + 48);
      id v6 = v4;
      [v5 notifyClientsWithBlock:v7];
    }
  }

  else
  {
    id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      int v11 = "-[CSAttSiriAsrNode localSpeechRecognizer:didRecognizeFinalResultCandidatePackage:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Ignoring completion from previous recognizer!",  buf,  0xCu);
    }
  }

id sub_1000C01D8(uint64_t a1, void *a2)
{
  return [a2 localSpeechServiceDidReceivedFinalResultCandidateWithRequestId:*(void *)(a1 + 32) speechPackage:*(void *)(a1 + 40)];
}

void sub_1000C01E4(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 72);
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 272LL);
    int v7 = 136315906;
    id v8 = "-[CSAttSiriAsrNode _handleShouldAcceptEagerResultWithRequestId:rcId:duration:shouldAccept:featuresToLog:]_block_invoke";
    __int16 v9 = 1026;
    int v10 = v3;
    __int16 v11 = 2050;
    uint64_t v12 = v4;
    __int16 v13 = 2050;
    uint64_t v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Eager results accepted: %{public}d. Duration: %{public}lf last duration: %{public}lf",  (uint8_t *)&v7,  0x26u);
  }

  if ((+[CSFTimeUtils isReceivedTimeInterval:matchCurrentTimeInterval:]( &OBJC_CLASS___CSFTimeUtils,  "isReceivedTimeInterval:matchCurrentTimeInterval:",  *(double *)(a1 + 56),  *(double *)(*(void *)(a1 + 32) + 272LL)) & 1) != 0)
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 296LL), *(id *)(a1 + 40));
    if (*(_BYTE *)(a1 + 72)) {
      [*(id *)(a1 + 32) _enforceEndpointHintWithRequestId:*(void *)(a1 + 48) rcId:*(void *)(a1 + 64) shouldAccept:1 featuresToLog:*(void *)(a1 + 40)];
    }
  }

  else
  {
    id v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315138;
      id v8 = "-[CSAttSiriAsrNode _handleShouldAcceptEagerResultWithRequestId:rcId:duration:shouldAccept:featuresToLog:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Received duration not matching last duration",  (uint8_t *)&v7,  0xCu);
    }
  }

void sub_1000C0360(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (id *)(a1 + 40);
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(v5);
  [WeakRetained _handleShouldAcceptEagerResultWithRequestId:*(void *)(a1 + 32) rcId:*(void *)(a1 + 48) duration:a2 shouldAccept:v6 featuresToLog:*(double *)(a1 + 56)];
}

void sub_1000C03C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 104) == *(void *)(a1 + 40))
  {
    [*(id *)(v1 + 176) maximumRecognitionDuration];
    if (v4 > 0.0)
    {
      double v5 = v4;
      double v6 = *(double *)(a1 + 48);
      if (v6 >= v4)
      {
        int v7 = *(_BYTE **)(a1 + 32);
        if (v7[10])
        {
          id v8 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
          {
            int v9 = 136315650;
            int v10 = "-[CSAttSiriAsrNode localSpeechRecognizer:didProcessAudioDuration:]_block_invoke";
            __int16 v11 = 2050;
            double v12 = v5;
            __int16 v13 = 2050;
            double v14 = v6;
            _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s Exceeding max local speech recognition duration (%{public}f) : %{public}f, force endbooking the ASR task",  (uint8_t *)&v9,  0x20u);
            int v7 = *(_BYTE **)(a1 + 32);
          }

          [v7 _handleStopSpeechRecognitionTaskIfNeeded:0];
        }
      }
    }
  }

  else
  {
    id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315138;
      int v10 = "-[CSAttSiriAsrNode localSpeechRecognizer:didProcessAudioDuration:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Ignoring completion from previous recognizer!",  (uint8_t *)&v9,  0xCu);
    }
  }

void sub_1000C053C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 104) != *(void *)(a1 + 40))
  {
    id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v17 = "-[CSAttSiriAsrNode localSpeechRecognizer:didRecognizeTokens:withMetadata:]_block_invoke";
    int v3 = "%s Ignoring completion from previous recognizer!";
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, v3, buf, 0xCu);
    return;
  }

  if (([*(id *)(v1 + 176) enableVoiceCommands] & 1) == 0)
  {
    id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v17 = "-[CSAttSiriAsrNode localSpeechRecognizer:didRecognizeTokens:withMetadata:]_block_invoke";
    int v3 = "%s Ignoring completion with metadatapackage as enable condition not satisfied!";
    goto LABEL_9;
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (*(void *)(v5 + 128) == 2LL)
  {
    id v6 = *(id *)(v5 + 160);
    id v7 = *(id *)(*(void *)(a1 + 32) + 152LL);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localSRBridgeListener]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_1000C0720;
    void v11[3] = &unk_10022EE80;
    id v12 = v6;
    id v13 = v7;
    id v14 = *(id *)(a1 + 48);
    id v15 = *(id *)(a1 + 56);
    id v9 = v7;
    id v10 = v6;
    [v8 notifyClientsWithBlock:v11];
  }

id sub_1000C0720(void *a1, void *a2)
{
  return [a2 localSpeechServiceDidReceivedPartialResultWithRequestId:a1[4] language:a1[5] tokens:a1[6] metadata:a1[7]];
}

void sub_1000C0730(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 104) != *(void *)(a1 + 40))
  {
    id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v17 = "-[CSAttSiriAsrNode localSpeechRecognizer:didRecognizePartialPackage:withMetadata:]_block_invoke";
    int v3 = "%s Ignoring completion from previous recognizer!";
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, v3, buf, 0xCu);
    return;
  }

  if (([*(id *)(v1 + 176) enableVoiceCommands] & 1) == 0)
  {
    id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v17 = "-[CSAttSiriAsrNode localSpeechRecognizer:didRecognizePartialPackage:withMetadata:]_block_invoke";
    int v3 = "%s Ignoring completion with metadatapackage as enable condition not satisfied!";
    goto LABEL_9;
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (*(void *)(v5 + 128) == 2LL)
  {
    id v6 = *(id *)(v5 + 160);
    id v7 = *(id *)(*(void *)(a1 + 32) + 152LL);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localSRBridgeListener]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_1000C0914;
    void v11[3] = &unk_10022EE80;
    id v12 = v6;
    id v13 = v7;
    id v14 = *(id *)(a1 + 48);
    id v15 = *(id *)(a1 + 56);
    id v9 = v7;
    id v10 = v6;
    [v8 notifyClientsWithBlock:v11];
  }

id sub_1000C0914(void *a1, void *a2)
{
  return [a2 localSpeechServiceDidReceivedPartialResultWithRequestId:a1[4] language:a1[5] speechPackage:a1[6] metadata:a1[7]];
}

void sub_1000C0924(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 104) == *(void *)(a1 + 40))
  {
    if (!*(void *)(v1 + 320))
    {
      *(void *)(*(void *)(a1 + 32) + 32+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = mach_continuous_time();
      uint64_t v1 = *(void *)(a1 + 32);
    }

    if (*(void *)(v1 + 128) == 2LL)
    {
      id v4 = *(id *)(v1 + 160);
      id v5 = *(id *)(*(void *)(a1 + 32) + 152LL);
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localSRBridgeListener]);
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      void v9[2] = sub_1000C0AB4;
      void v9[3] = &unk_10022EE30;
      id v10 = v4;
      id v11 = v5;
      id v12 = *(id *)(a1 + 48);
      id v7 = v5;
      id v8 = v4;
      [v6 notifyClientsWithBlock:v9];
    }
  }

  else
  {
    id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v14 = "-[CSAttSiriAsrNode localSpeechRecognizer:didRecognizeTokens:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Ignoring completion from previous recognizer!",  buf,  0xCu);
    }
  }

id sub_1000C0AB4(void *a1, void *a2)
{
  return [a2 localSpeechServiceDidReceivedPartialResultWithRequestId:a1[4] language:a1[5] tokens:a1[6]];
}

void sub_1000C0AC4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _releaseRecordingTransactionIfNeededWithToken:*(void *)(a1 + 32)];
}

id sub_1000C0B00(uint64_t a1, void *a2)
{
  return [a2 setAsrId:*(void *)(a1 + 32)];
}

id *sub_1000C0B0C(id *result, char a2, uint64_t a3)
{
  if ((a2 & 1) == 0) {
    return (id *)[result[4] logSamplingEventStatus:1 requestId:*((void *)result[5] + 20) error:a3];
  }
  return result;
}

void sub_1000C0B2C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = v7;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 description]);
    *(_DWORD *)__int128 buf = 136315650;
    uint64_t v17 = "-[CSAttSiriAsrNode _startLocalSpeechRecognizerIfNeeded]_block_invoke";
    __int16 v18 = 2112;
    int v19 = v9;
    __int16 v20 = 2112;
    __int16 v21 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s didStart local speech recognition with error :%@, model properties : %@",  buf,  0x20u);
  }

  uint64_t v11 = *(void *)(a1 + 32);
  if (v6)
  {
    id v12 = *(dispatch_queue_s **)(v11 + 96);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    id v14[2] = sub_1000C0CC4;
    v14[3] = &unk_10022EFD0;
    v14[4] = v11;
    id v15 = v6;
    dispatch_async(v12, v14);
  }

  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v11 + 80));
    [WeakRetained asrStartedForRequestId:*(void *)(*(void *)(a1 + 32) + 160) isRecognitionModeClassic:0];
  }
}

void sub_1000C0CC4(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315138;
    id v8 = "-[CSAttSiriAsrNode _startLocalSpeechRecognizerIfNeeded]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Setting local speech recognizer state to [Idle] as not able to start local ASR",  buf,  0xCu);
  }

  [*(id *)(a1 + 32) _setLocalSpeechRecognizerState:0];
  [*(id *)(a1 + 32) _clearAudioProcessWaitingBufferIfNeeded];
  [*(id *)(*(void *)(a1 + 32) + 240) endAudio];
  [*(id *)(*(void *)(a1 + 32) + 344) endAudioWithCancellation:1 completion:0];
  int v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localSRBridgeListener]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_1000C0E08;
  v5[3] = &unk_10022EE58;
  id v4 = *(void **)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [v3 notifyClientsWithBlock:v5];
}

id sub_1000C0E08(uint64_t a1, void *a2)
{
  return [a2 localSpeechServiceDidCompletionRecognitionWithStatistics:0 requestId:*(void *)(*(void *)(a1 + 32) + 160) endpointMode:*(void *)(*(void *)(a1 + 32) + 192) error:*(void *)(a1 + 40)];
}

void sub_1000C0E20(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(void **)(v2 + 104);
  *(void *)(v2 + 104) = 0LL;

  *(void *)(*(void *)(a1 + 32) + 144LL) = 0LL;
  *(_BYTE *)(*(void *)(a1 + 32) + 13LL) = 0;
  uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) siriSessionUUID]);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 216);
  *(void *)(v5 + 216) = v4;

  [*(id *)(a1 + 32) _stopPreviousRecognitionTaskIfNeededWithNewRequestId:*(void *)(*(void *)(a1 + 32) + 216) stopUresProcessing:0];
  *(_BYTE *)(*(void *)(a1 + 32) + 14) = [*(id *)(a1 + 40) disableEndpointer];
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 184LL), *(id *)(a1 + 48));
  [*(id *)(a1 + 32) _setRecordingStartTimeWithStartStreamOption:*(void *)(a1 + 40) audioRecordContext:*(void *)(a1 + 48) voiceTriggerInfo:*(void *)(a1 + 56)];
  unsigned int v7 = [*(id *)(a1 + 32) _shouldDisableLocalSpeechRecognizerWithOption:*(void *)(a1 + 40) audioRecordContext:*(void *)(a1 + 48)];
  id v8 = *(void **)(a1 + 32);
  if (v7)
  {
    [v8 _setLocalSpeechRecognizerState:3];
  }

  else if (v8[16] == 3LL)
  {
    id v9 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      int v15 = 136315138;
      uint64_t v16 = "-[CSAttSiriAsrNode prepareToStartSpeechRequestWithStartStreamOption:audioRecordContext:voiceTriggerInfo:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s Local speech recognizer disabled, ignore prepare",  (uint8_t *)&v15,  0xCu);
    }
  }

  else if (([*(id *)(a1 + 40) disablePrewarmLocalAsrAtStartRecording] & 1) == 0)
  {
    [*(id *)(a1 + 32) _preheatWithLanguage:0 preheatSource:0];
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 80LL));
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(v11 + 184);
  uint64_t v13 = *(void *)(v11 + 216);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestMHUUID]);
  [WeakRetained startUresRequestWithAudioRecordContext:v12 forRequestId:v13 mhId:v14 voiceTriggerInfo:*(void *)(a1 + 56)];
}

id sub_1000C100C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _preheatWithLanguage:*(void *)(a1 + 40) preheatSource:0 shouldDownloadMissingAsset:*(unsigned __int8 *)(a1 + 48)];
}

id sub_1000C1020(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 144LL) = 0LL;
  *(_BYTE *)(*(void *)(a1 + 32) + 13LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 32) + 1+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 1;
  *(void *)(*(void *)(a1 + 32) + 192LL) = 0LL;
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 224);
  *(void *)(v3 + 224) = v2;

  uint64_t v5 = -[CSOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CSOSTransaction),  "initWithDescription:",  @"ASRNode Recording Transaction");
  uint64_t v6 = *(void *)(a1 + 32);
  unsigned int v7 = *(void **)(v6 + 208);
  *(void *)(v6 + 20_Block_object_dispose(va, 8) = v5;

  if (([*(id *)(*(void *)(a1 + 32) + 184) isVoiceTriggered] & 1) == 0)
  {
    *(void *)(*(void *)(a1 + 32) + 248LL) = 0LL;
    *(void *)(*(void *)(a1 + 32) + 256LL) = 0LL;
    id v8 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      id v9 = *(void **)(*(void *)(a1 + 32) + 184LL);
      id v10 = v8;
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 description]);
      int v20 = 136315394;
      __int16 v21 = "-[CSAttSiriAsrNode start]_block_invoke";
      __int16 v22 = 2114;
      __int16 v23 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s Reset endpointStart and audioSampleCountToSkip since recordContext is %{public}@",  (uint8_t *)&v20,  0x16u);
    }
  }

  [*(id *)(a1 + 32) _clearAudioProcessWaitingBufferIfNeeded];
  uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 128LL);
  uint64_t v13 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = 136315394;
    __int16 v21 = "-[CSAttSiriAsrNode start]_block_invoke";
    __int16 v22 = 1024;
    LODWORD(v23) = (v12 & 0xFFFFFFFFFFFFFFFBLL) == 0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%s shouldResetWaitingBuffer:%u",  (uint8_t *)&v20,  0x12u);
  }

  if ((v12 | 4) != 4) {
    return [*(id *)(a1 + 32) _startLocalSpeechRecognizerIfNeeded];
  }
  id v14 = objc_alloc(&OBJC_CLASS___CSAudioProcessWaitingBuffer);
  LODWORD(v15) = 1114636288;
  uint64_t v16 = -[CSAudioProcessWaitingBuffer initWithUUID:waitingBufferMaxLengthInSec:]( v14,  "initWithUUID:waitingBufferMaxLengthInSec:",  *(void *)(*(void *)(a1 + 32) + 216LL),  v15);
  uint64_t v17 = *(void *)(a1 + 32);
  __int16 v18 = *(void **)(v17 + 136);
  *(void *)(v17 + 136) = v16;

  return [*(id *)(a1 + 32) _setLocalSpeechRecognizerState:1];
}

void sub_1000C1258(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 56);
    int v6 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    int v7 = *(unsigned __int8 *)(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 136316162;
    id v10 = "-[CSAttSiriAsrNode _enforceEndpointHintWithRequestId:rcId:shouldAccept:featuresToLog:]_block_invoke";
    __int16 v11 = 2050;
    uint64_t v12 = v5;
    __int16 v13 = 1026;
    int v14 = v6;
    __int16 v15 = 1026;
    int v16 = v7;
    __int16 v17 = 2112;
    uint64_t v18 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Sending RC selection delegate with parameters, RcId: %{public}lu mitigationSignal: %{public}d shouldAccept %{pu blic}d requestId:%@",  (uint8_t *)&v9,  0x2Cu);
  }

  [v3 localSpeechServiceDidReceivedEagerResultWithRequestId:*(void *)(a1 + 32) rcId:*(void *)(a1 + 56) shouldAccept:*(unsigned __int8 *)(a1 + 64) mitigationSignal:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) featuresToLog:*(void *)(a1 + 40)];
}

id sub_1000C1370(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 12LL) = 1;
  *(void *)(*(void *)(a1 + 32) + 264LL) = *(void *)(a1 + 48);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 304LL);
  [*(id *)(a1 + 40) totalAudioRecorded];
  objc_msgSend(v2, "setEndpointTimeInMs:");
  objc_msgSend( *(id *)(*(void *)(a1 + 32) + 304),  "setEndpointBufferHostTime:",  objc_msgSend(*(id *)(a1 + 40), "endpointBufferHostTime"));
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 72LL));
  unsigned int v4 = [WeakRetained getUsesAutomaticEndpointing];

  uint64_t v5 = *(void *)(a1 + 32);
  if (v4)
  {
    *(_BYTE *)(v5 + 13) = 1;
    if (*(void *)(a1 + 40)) {
      *(void *)(*(void *)(a1 + 32) + 192LL) = +[CSAttSiriAsrNode endpointModeFromEndpointMetrics:]( &OBJC_CLASS___CSAttSiriAsrNode,  "endpointModeFromEndpointMetrics:");
    }
    else {
      *(void *)(*(void *)(a1 + 32) + 192LL) = 1LL;
    }
  }

  else
  {
    *(_BYTE *)(v5 + 13) = 0;
  }

  int v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 272LL);
    int v9 = 136315394;
    id v10 = "-[CSAttSiriAsrNode attSiriNode:didDetectHardEndpointAtTime:withMetrics:usesAutomaticEndPointing:]_block_invoke";
    __int16 v11 = 2048;
    uint64_t v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s %lf", (uint8_t *)&v9, 0x16u);
  }

  id result = *(id *)(a1 + 32);
  if (*((double *)result + 34) > 2.22044605e-16) {
    return objc_msgSend( result,  "_queryShouldAcceptEagerResultForDuration:requestId:rcId:",  *((void *)result + 20),  *((void *)result + 35));
  }
  return result;
}

id sub_1000C14F8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[CSAttSiriAsrNode attSiriAudioSrcNodeDidStop:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  return [*(id *)(a1 + 32) _handleStopSpeechRecognitionTaskIfNeeded:0];
}

void sub_1000C15AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 10))
  {
    uint64_t v3 = *(void *)(v1 + 128);
    if (v3 == 2)
    {
      if (*(_BYTE *)(v1 + 12) && *(_BYTE *)(v1 + 13) && *(double *)(v1 + 144) >= *(double *)(v1 + 264))
      {
        __int16 v11 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 136315138;
          int v14 = "-[CSAttSiriAsrNode attSiriAudioSrcNodeLPCMRecordBufferAvailable:audioChunk:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s ASR already process enough audio until endpoint, stop processing it",  buf,  0xCu);
        }
      }

      else
      {
        uint64_t v9 = *(void *)(a1 + 40);
        id v10 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  mach_continuous_time());
        id v12 = (id)objc_claimAutoreleasedReturnValue(v10);
        objc_msgSend((id)v1, "_processAudioChunk:withReadyTimestamp:", v9);
      }
    }

    else if (v3 == 1)
    {
      int v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        int v14 = "-[CSAttSiriAsrNode attSiriAudioSrcNodeLPCMRecordBufferAvailable:audioChunk:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Request Dispatcher hasn't asked to start local ASR yet, cache the audio",  buf,  0xCu);
        uint64_t v1 = *(void *)(a1 + 32);
      }

      uint64_t v5 = *(void **)(v1 + 136);
      uint64_t v6 = *(void *)(a1 + 40);
      uint64_t v7 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  mach_continuous_time());
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      [v5 addAudioChunk:v6 withBufferedTimestamp:v8];
    }
  }

void *sub_1000C179C(void *result)
{
  uint64_t v1 = result;
  if (!*(void *)(result[4] + 312LL))
  {
    id result = (void *)mach_continuous_time();
    *(void *)(v1[4] + 312LL) = result;
  }

  if (!*((_BYTE *)v1 + 40)) {
    return [(id)v1[4] _handleStopSpeechRecognitionTaskIfNeeded:0];
  }
  return result;
}

void sub_1000C17EC(void *a1)
{
  if (+[CSUtils isASRViaSpeechAPIEnabled](&OBJC_CLASS___CSUtils, "isASRViaSpeechAPIEnabled"))
  {
    if (a1[4])
    {
      if (a1[5]) {
        +[CoreEmbeddedSpeechAnalyzer sendSpeechCorrectionInfo:interactionIdentifier:]( &OBJC_CLASS___CoreEmbeddedSpeechAnalyzer,  "sendSpeechCorrectionInfo:interactionIdentifier:");
      }
    }
  }

  else
  {
    id v2 = [[CoreEmbeddedSpeechRecognizer alloc] initWithDelegate:a1[6] instanceUUID:&CoreEmbeddedSpeechRecognizerInstanceUUIDInteractive];
    [v2 sendSpeechCorrectionInfo:a1[4] interactionIdentifier:a1[5]];
    [v2 invalidate];
  }

void sub_1000C188C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _interactiveLocalSpeechRecognizer]);
  [v2 updateVoiceCommandContextWithPrefixText:*(void *)(a1 + 40) postfixText:*(void *)(a1 + 48) selectedText:*(void *)(a1 + 56) disambiguationActive:*(void *)(a1 + 64) cursorInVisibleText:*(void *)(a1 + 72) favorComma ndSuppression:*(void *)(a1 + 80) abortCommandSuppression:*(void *)(a1 + 88) undoEvent:*(void *)(a1 + 96)];
}

void sub_1000C18DC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _interactiveLocalSpeechRecognizer]);
  [v2 resumeRecognitionWithPrefixText:*(void *)(a1 + 40) postfixText:*(void *)(a1 + 48) selectedText:*(void *)(a1 + 56)];
}

void sub_1000C1920(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _interactiveLocalSpeechRecognizer]);
  [v1 pauseRecognition];
}

id sub_1000C1950(uint64_t a1)
{
  return [*(id *)(a1 + 32) _disableLocalSpeechRecognitionForRequestId:*(void *)(a1 + 40) force:0];
}

void sub_1000C1960(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2 && ![v2 isEqualToString:*(void *)(*(void *)(a1 + 40) + 160)])
  {
    uint64_t v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 160LL);
      int v7 = 136315394;
      uint64_t v8 = "-[CSAttSiriAsrNode stopSpeechRecognitionWithReason:requestId:]_block_invoke";
      __int16 v9 = 2112;
      uint64_t v10 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s requestId doesn't match current one (%@), ignore",  (uint8_t *)&v7,  0x16u);
    }
  }

  else
  {
    [*(id *)(a1 + 40) _handleStopDeliverLocalSpeechRecognitionWithStopUresProcessing:1];
    uint64_t v3 = *(void *)(a1 + 40);
    int v4 = *(void **)(v3 + 200);
    *(void *)(v3 + 200) = 0LL;

    if (*(void *)(a1 + 48) == 1LL) {
      [*(id *)(a1 + 40) _invalidateLocalSpeechRecognizer];
    }
  }

void sub_1000C1A88(uint64_t a1)
{
  id v2 = -[CSOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CSOSTransaction),  "initWithDescription:",  @"SRD ASR Result Delivery Transaction");
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(void **)(v3 + 200);
  *(void *)(v3 + 200) = v2;

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestId]);
  [*(id *)(a1 + 32) _stopPreviousRecognitionTaskIfNeededWithNewRequestId:v5 stopUresProcessing:1];
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 160LL), v5);
  if (!*(void *)(*(void *)(a1 + 32) + 160LL))
  {
    uint64_t v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v27 = 136315138;
      __int16 v28 = "-[CSAttSiriAsrNode startSpeechRecognitionResultsWithSettings:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Received nill requestId, generate requestId under corespeechd",  (uint8_t *)&v27,  0xCu);
    }

    int v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
    uint64_t v8 = objc_claimAutoreleasedReturnValue([v7 UUIDString]);
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void **)(v9 + 160);
    *(void *)(v9 + 160) = v8;
  }

  __int16 v11 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    id v12 = *(void **)(a1 + 40);
    __int16 v13 = v11;
    int v14 = (char *)objc_claimAutoreleasedReturnValue([v12 description]);
    int v27 = 136315394;
    __int16 v28 = "-[CSAttSiriAsrNode startSpeechRecognitionResultsWithSettings:]_block_invoke";
    __int16 v29 = 2114;
    __int16 v30 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%s Settings : %{public}@",  (uint8_t *)&v27,  0x16u);
  }

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 176LL), *(id *)(a1 + 40));
  __int16 v15 = (char *)[*(id *)(*(void *)(a1 + 32) + 176) speechRecognitionTask];
  int v16 = v15;
  if ((unint64_t)v15 >= 0xB)
  {
    uint64_t v18 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v27 = 136315394;
      __int16 v28 = "-[CSAttSiriAsrNode startSpeechRecognitionResultsWithSettings:]_block_invoke";
      __int16 v29 = 2050;
      __int16 v30 = v16;
      _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%s Unsupported speech recognizer task : %{public}lu",  (uint8_t *)&v27,  0x16u);
    }

    __int16 v17 = (id *)&CoreEmbeddedSpeechRecognizerTaskSearchOrMessaging;
  }

  else
  {
    __int16 v17 = (id *)*(&off_10022F1A0 + (void)v15);
  }

  uint64_t v19 = *(void *)(a1 + 32);
  id v20 = *v17;
  __int16 v21 = *(void **)(v19 + 120);
  *(void *)(v19 + 120) = v20;

  __int16 v22 = *(char **)(a1 + 48);
  if ((unint64_t)(v22 - 1) <= 1)
  {
    __int16 v23 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = 136315394;
      __int16 v28 = "-[CSAttSiriAsrNode startSpeechRecognitionResultsWithSettings:]_block_invoke";
      __int16 v29 = 2048;
      __int16 v30 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "%s speechRecognitionMode = %lu; Force disabling local speech recognition",
        (uint8_t *)&v27,
        0x16u);
    }

    double v24 = *(void **)(a1 + 32);
    double v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestId]);
    [v24 _disableLocalSpeechRecognitionForRequestId:v25 force:1];

    __int16 v22 = *(char **)(a1 + 48);
  }

  if (v22)
  {
    if (v22 == (char *)2)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 80LL));
      [WeakRetained asrStartedForRequestId:*(void *)(*(void *)(a1 + 32) + 160) isRecognitionModeClassic:0];
    }
  }

  else
  {
    [*(id *)(a1 + 32) _startDeliverLocalSpeechRecognitionResultsWithRequestId:*(void *)(*(void *)(a1 + 32) + 160)];
  }
}

id sub_1000C1DE4(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[CSAttSiriAsrNode preheatLocalSpeechRecognitionWithLanguage:source:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Preheat LocalSpeechRecognition now",  (uint8_t *)&v4,  0xCu);
  }

  return [*(id *)(a1 + 32) _preheatWithLanguage:*(void *)(a1 + 40) preheatSource:*(void *)(a1 + 48) shouldDownloadMissingAsset:0];
}

id sub_1000C1E9C(uint64_t a1)
{
  return objc_storeWeak((id *)(*(void *)(a1 + 32) + 88LL), *(id *)(a1 + 40));
}

id sub_1000C1EA8(uint64_t a1)
{
  return objc_storeWeak((id *)(*(void *)(a1 + 32) + 80LL), *(id *)(a1 + 40));
}

id sub_1000C1EB4(uint64_t a1)
{
  return objc_storeWeak((id *)(*(void *)(a1 + 32) + 72LL), *(id *)(a1 + 40));
}

void *sub_1000C1EC0(void *result)
{
  id v1 = result;
  uint64_t v2 = result[5];
  if (v2 == 1)
  {
    int v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[CSAttSiriAsrNode stopWithReason:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Received xpc disconnection",  (uint8_t *)&v5,  0xCu);
    }

    return [(id)v1[4] _handleStopDeliverLocalSpeechRecognitionWithStopUresProcessing:1];
  }

  else if (!v2)
  {
    uint64_t v3 = result[4];
    if (!*(void *)(v3 + 192)) {
      *(void *)(v3 + 192) = 2LL;
    }
  }

  return result;
}

void sub_1000C21AC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315138;
    int v7 = "-[CSAttSiriTimer cancelTimer]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Cancelling pending timer...",  (uint8_t *)&v6,  0xCu);
  }

  uint64_t v3 = *(dispatch_source_s **)(*(void *)(a1 + 32) + 8LL);
  if (v3)
  {
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 8);
    *(void *)(v4 + _Block_object_dispose(va, 8) = 0LL;
  }

void sub_1000C2274(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 8LL))
  {
    id v1 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int16 v17 = "-[CSAttSiriTimer setTimerForSecs:completionBlock:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "%s Timer already running. Cannot schedule another task",  buf,  0xCu);
    }
  }

  else
  {
    id v3 = objc_retainBlock(*(id *)(a1 + 40));
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = v3;

    dispatch_source_t v6 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(*(void *)(a1 + 32) + 16LL));
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(v7 + 8);
    *(void *)(v7 + _Block_object_dispose(va, 8) = v6;

    uint64_t v9 = *(dispatch_source_s **)(*(void *)(a1 + 32) + 8LL);
    dispatch_time_t v10 = dispatch_time(0LL, (uint64_t)(*(double *)(a1 + 48) * 1000000000.0));
    dispatch_source_set_timer(v9, v10, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    objc_initWeak(&location, *(id *)(a1 + 32));
    __int16 v11 = *(dispatch_source_s **)(*(void *)(a1 + 32) + 8LL);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    id v13[2] = sub_1000C2484;
    v13[3] = &unk_10022E920;
    objc_copyWeak(&v14, &location);
    dispatch_source_set_event_handler(v11, v13);
    id v12 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int16 v17 = "-[CSAttSiriTimer setTimerForSecs:completionBlock:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%s Starting CSAttSiriTimer...", buf, 0xCu);
    }

    dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 32) + 8LL));
    objc_destroyWeak(&v14);
    objc_destroyWeak(&location);
  }

void sub_1000C2484(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    dispatch_source_t v6 = "-[CSAttSiriTimer setTimerForSecs:completionBlock:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s CSAttSiriTimer fired: event-handler called",  (uint8_t *)&v5,  0xCu);
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained completionBlock]);

  if (v3)
  {
    uint64_t v4 = (void (**)(void))objc_claimAutoreleasedReturnValue([WeakRetained completionBlock]);
    v4[2]();
  }

  [WeakRetained setTimer:0];
}

id sub_1000C2C4C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _notifyObserver:a2];
}

id sub_1000C2C58(uint64_t a1)
{
  return [*(id *)(a1 + 32) _didReceiveNewVoiceTriggerAssetMetaData];
}

id sub_1000C2C60(uint64_t a1)
{
  return [*(id *)(a1 + 32) _didReceiveNewVoiceTriggerAssetMetaData];
}

id sub_1000C2C68(uint64_t a1)
{
  return [*(id *)(a1 + 32) _didReceiveNewVoiceTriggerAssetMetaData];
}

void sub_1000C2CB0(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___CSVoiceTriggerAssetMetaUpdateMonitor);
  uint64_t v2 = (void *)qword_10027FF68;
  qword_10027FF68 = (uint64_t)v1;
}

void sub_1000C32C0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315395;
    __int16 v15 = "-[CSAccessorySiriClientBehaviorMonitor notifyDidStopStream:reason:withEventUUID:forAccessory:]_block_invoke";
    __int16 v16 = 2113;
    uint64_t v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s accessoryId %{private}@", buf, 0x16u);
  }

  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "observers", 0));
  id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        [*(id *)(*((void *)&v9 + 1) + 8 * (void)v8) accessorySiriClientBehaviorMonitor:*(void *)(a1 + 40) didStopStream:*(void *)(a1 + 48) reason:*(void *)(a1 + 64) withEventUUID:*(void *)(a1 + 56) forAccessory:*(void *)(a1 + 32)];
        uint64_t v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v6);
  }
}

void sub_1000C3428(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315395;
    __int16 v15 = "-[CSAccessorySiriClientBehaviorMonitor notifyWillStopStream:reason:forAccessory:]_block_invoke";
    __int16 v16 = 2113;
    uint64_t v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s accessoryId %{private}@", buf, 0x16u);
  }

  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "observers", 0));
  id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        [*(id *)(*((void *)&v9 + 1) + 8 * (void)v8) accessorySiriClientBehaviorMonitor:*(void *)(a1 + 40) willStopStream:*(void *)(a1 + 48) reason:*(void *)(a1 + 56) forAccessory:*(void *)(a1 + 32)];
        uint64_t v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v6);
  }
}

void sub_1000C358C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315395;
    __int16 v15 = "-[CSAccessorySiriClientBehaviorMonitor notifyDidStartStreamWithContext:successfully:option:withEventUUID:forAc"
          "cessory:]_block_invoke";
    __int16 v16 = 2113;
    uint64_t v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s accessoryId %{private}@", buf, 0x16u);
  }

  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "observers", 0));
  id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        [*(id *)(*((void *)&v9 + 1) + 8 * (void)v8) accessorySiriClientBehaviorMonitor:*(void *)(a1 + 40) didStartStreamWithContext:*(void *)(a1 + 48) successfully:*(unsigned __int8 *)(a1 + 72) option:*(void *)(a1 + 56) withEventUUID:*(void *)(a1 + 64) forAccessory:*(void *)(a1 + 32)];
        uint64_t v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v6);
  }
}

void sub_1000C36F8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315395;
    __int16 v15 = "-[CSAccessorySiriClientBehaviorMonitor notifyWillStartStreamWithContext:option:forAccessory:]_block_invoke";
    __int16 v16 = 2113;
    uint64_t v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s accessoryId %{private}@", buf, 0x16u);
  }

  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "observers", 0));
  id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        [*(id *)(*((void *)&v9 + 1) + 8 * (void)v8) accessorySiriClientBehaviorMonitor:*(void *)(a1 + 40) willStartStreamWithContext:*(void *)(a1 + 48) option:*(void *)(a1 + 56) forAccessory:*(void *)(a1 + 32)];
        uint64_t v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v6);
  }
}

void sub_1000C385C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  [v2 removeObject:*(void *)(a1 + 40)];
}

void sub_1000C389C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_1000C391C(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___CSAccessorySiriClientBehaviorMonitor);
  id v2 = (void *)qword_10027FF78;
  qword_10027FF78 = (uint64_t)v1;
}

id sub_1000C3F9C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _notifyObserver:a2];
}

id sub_1000C3FA8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _didReceiveNewSpeechEndpointAssetMetaData];
}

void sub_1000C3FF0(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___CSSpeechEndpointAssetMetaUpdateMonitor);
  id v2 = (void *)qword_10027FF88;
  qword_10027FF88 = (uint64_t)v1;
}

void sub_1000C41F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000C4C84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (v5)
  {
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315394;
      __int16 v21 = "-[CSVoiceIdXPCConnection _handleClientMessage:client:]_block_invoke";
      __int16 v22 = 2112;
      id v23 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s Fetched latest VT asset %@ for retraining",  buf,  0x16u);
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[SSRVoiceProfileManager sharedInstance](&OBJC_CLASS___SSRVoiceProfileManager, "sharedInstance"));
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", *(void *)(a1 + 32)));
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    v17[0] = _NSConcreteStackBlock;
    void v17[2] = sub_1000C4EB0;
    v17[3] = &unk_10022C950;
    __int128 v12 = *(void **)(a1 + 80);
    void v17[4] = *(void *)(a1 + 72);
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v14 = *(void *)(a1 + 64);
    v17[1] = 3221225472LL;
    id v18 = v12;
    id v19 = *(id *)(a1 + 88);
    [v8 notifyImplicitTrainingUtteranceAvailable:v9 forVoiceProfileId:0 withRecordDeviceInfo:v10 withRecordCtxt:v11 withVoiceTriggerCtx t:v13 withOtherCtxt:v14 assetToUse:v5 withCompletion:v17];
  }

  else if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
  {
    __int16 v15 = v7;
    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
    *(_DWORD *)__int128 buf = 136315394;
    __int16 v21 = "-[CSVoiceIdXPCConnection _handleClientMessage:client:]_block_invoke";
    __int16 v22 = 2112;
    id v23 = v16;
    _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%s Cannot retrain since we cannot look-up SSR asset with error %@",  buf,  0x16u);
  }
}

void sub_1000C4EB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 8);
  v8[2] = sub_1000C4F60;
  void v8[3] = &unk_10022E368;
  v8[1] = 3221225472LL;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v12 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v6, v8);
}

id sub_1000C4F60(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 136315394;
    id v6 = "-[CSVoiceIdXPCConnection _handleClientMessage:client:]_block_invoke_2";
    __int16 v7 = 2114;
    uint64_t v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Implicit utterance processing done with error %{public}@",  (uint8_t *)&v5,  0x16u);
  }

  return objc_msgSend(*(id *)(a1 + 40), "_sendReplyMessageWithResult:error:event:client:", *(void *)(a1 + 32) != 0);
}

void sub_1000C502C(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _handleClientEvent:v3];
}

BOOL sub_1000C5300(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriEnabledMonitor sharedInstance](&OBJC_CLASS___CSSiriEnabledMonitor, "sharedInstance"));
  unsigned int v2 = [v1 isEnabled];

  if (v2) {
    return +[CSVoiceTriggerEnabledPolicyHelper siriInCallPolicy]( &OBJC_CLASS___CSVoiceTriggerEnabledPolicyHelper,  "siriInCallPolicy");
  }
  else {
    return 1;
  }
}

BOOL sub_1000C5354(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSScreenLockMonitor sharedInstance](&OBJC_CLASS___CSScreenLockMonitor, "sharedInstance"));
  unsigned int v2 = [v1 isScreenLocked];

  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[CSSiriRestrictionOnLockScreenMonitor sharedInstance]( &OBJC_CLASS___CSSiriRestrictionOnLockScreenMonitor,  "sharedInstance"));
  unsigned int v4 = [v3 isRestricted];

  if (!v2) {
    return 1;
  }
  if (v4)
  {
    int v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      uint64_t v8 = "-[CSVoiceTriggerEnabledPolicyAOP _addVoiceTriggerEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger cannot be turned on since Siri is restricted on lock screen",  (uint8_t *)&v7,  0xCu);
    }
  }

  return v4 ^ 1;
}

BOOL sub_1000C5454(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSFirstUnlockMonitor sharedInstance](&OBJC_CLASS___CSFirstUnlockMonitor, "sharedInstance"));
  unsigned __int8 v2 = [v1 isFirstUnlocked];

  if ((v2 & 1) == 0)
  {
    id v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      id v6 = "-[CSVoiceTriggerEnabledPolicyAOP _addVoiceTriggerEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger cannot be turned on since device is not unlocked after restart",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

BOOL sub_1000C5520(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue( +[CSSystemShellStartMonitorFactory defaultShellStartMonitor]( &OBJC_CLASS___CSSystemShellStartMonitorFactory,  "defaultShellStartMonitor"));
  unsigned __int8 v2 = [v1 isSystemShellStarted];

  if ((v2 & 1) == 0)
  {
    id v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      id v6 = "-[CSVoiceTriggerEnabledPolicyAOP _addVoiceTriggerEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger cannot be turned on since system shell is not started yet",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

BOOL sub_1000C55EC(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerEnabledMonitor sharedInstance]( &OBJC_CLASS___CSVoiceTriggerEnabledMonitor,  "sharedInstance"));
  if ([v1 isEnabled])
  {
    unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriEnabledMonitor sharedInstance](&OBJC_CLASS___CSSiriEnabledMonitor, "sharedInstance"));
    unsigned __int8 v3 = [v2 isEnabled];

    if ((v3 & 1) != 0) {
      return 1;
    }
  }

  else
  {
  }

  int v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  BOOL v6 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
  BOOL result = 0;
  if (v6)
  {
    int v7 = 136315394;
    uint64_t v8 = "-[CSVoiceTriggerEnabledPolicyAOP _addVoiceTriggerEnabledConditions]_block_invoke";
    __int16 v9 = 1024;
    int v10 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger cannot be turned on since Siri VT (%d) is not enabled",  (uint8_t *)&v7,  0x12u);
    return 0;
  }

  return result;
}

BOOL sub_1000C5700(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerEnabledMonitor sharedInstance]( &OBJC_CLASS___CSVoiceTriggerEnabledMonitor,  "sharedInstance"));
  unsigned int v2 = [v1 isEnabled];

  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    BOOL v4 = 0;
  }

  else
  {
    int v5 = (void *)objc_claimAutoreleasedReturnValue( +[CSPhoneCallStateMonitorFactory phoneCallStateMonitor]( &OBJC_CLASS___CSPhoneCallStateMonitorFactory,  "phoneCallStateMonitor"));
    if ([v5 phoneCallState] == (id)3)
    {
      BOOL v4 = 1;
    }

    else
    {
      BOOL v6 = (void *)objc_claimAutoreleasedReturnValue( +[CSPhoneCallStateMonitorFactory phoneCallStateMonitor]( &OBJC_CLASS___CSPhoneCallStateMonitorFactory,  "phoneCallStateMonitor"));
      BOOL v4 = [v6 phoneCallState] == (id)4;
    }
  }

  int v7 = (void *)objc_claimAutoreleasedReturnValue( +[CSOtherAppRecordingStateMonitor sharedInstance]( &OBJC_CLASS___CSOtherAppRecordingStateMonitor,  "sharedInstance"));
  unsigned __int8 v8 = [v7 isOtherNonEligibleAppRecording];

  char v9 = v8 ^ 1 | v4;
  if ((v9 & 1) == 0)
  {
    int v10 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 136315138;
      uint64_t v13 = "-[CSVoiceTriggerEnabledPolicyAOP _addVoiceTriggerEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger cannot be turned on since there is other app recording that is not eligible and we are not in a connected or outgoing call",  (uint8_t *)&v12,  0xCu);
    }
  }

  return v9;
}

BOOL sub_1000C5868(id a1)
{
  unsigned __int8 v1 = +[CSUtils isLocalVoiceTriggerAvailable](&OBJC_CLASS___CSUtils, "isLocalVoiceTriggerAvailable");
  if ((v1 & 1) == 0)
  {
    unsigned int v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      int v5 = "-[CSVoiceTriggerEnabledPolicyAOP _addVoiceTriggerEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger cannot be turned on since voiceTriggerInCoreSpeech is NO",  (uint8_t *)&v4,  0xCu);
    }
  }

  return v1;
}

uint64_t sub_1000C5E4C(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 8LL) = *(_BYTE *)(result + 48);
  if (*(_BYTE *)(result + 48)) {
    *(void *)(*(void *)(result + 32) + 24LL) = *(void *)(result + 40);
  }
  return result;
}

id sub_1000C5E6C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleDidStartStreamWithContext:*(void *)(a1 + 40) withOption:*(void *)(a1 + 48) successfully:*(unsigned __int8 *)(a1 + 56)];
}

void sub_1000C5E80(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue( +[CSSiriClientBehaviorMonitor sharedInstance]( &OBJC_CLASS___CSSiriClientBehaviorMonitor,  "sharedInstance"));
  [v2 registerObserver:*(void *)(a1 + 32)];

  id v3 = (id)objc_claimAutoreleasedReturnValue(+[CSSiriAssertionMonitor sharedInstance](&OBJC_CLASS___CSSiriAssertionMonitor, "sharedInstance"));
  [v3 addObserver:*(void *)(a1 + 32)];
}

BOOL sub_1000C6004(id a1)
{
  unsigned __int8 v1 = (void *)objc_claimAutoreleasedReturnValue( +[CSNetworkAvailabilityMonitor sharedInstance]( &OBJC_CLASS___CSNetworkAvailabilityMonitor,  "sharedInstance"));
  unsigned __int8 v2 = [v1 isAvailable];

  if ((v2 & 1) == 0)
  {
    id v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      BOOL v6 = "-[CSAssetManagerEnablePolicy _addAssetManagerEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s AssetManager cannot be turned on since network is not available",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

void sub_1000C62C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000C67BC(void *a1)
{
  unsigned __int8 v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    int v4 = 136315394;
    int v5 = "-[CSXPCListener CSClientXPCConnectionReceivedClientError:clientError:client:]_block_invoke";
    __int16 v6 = 2050;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Client connection disconnected, removing %{public}p from client connection pool",  (uint8_t *)&v4,  0x16u);
  }

  if (a1[5]) {
    objc_msgSend(*(id *)(a1[6] + 24), "removeObject:");
  }
}

void sub_1000C6888(uint64_t a1, void *a2)
{
  unsigned __int8 v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _handleListenerEvent:v3];
}

void sub_1000C7058( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000C7500( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_1000C77FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void sub_1000C7C18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1000C8A3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

void sub_1000C995C(_Unwind_Exception *a1)
{
}

id sub_1000CA3C4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _useEnhancedEndpointer];
  if ((_DWORD)result)
  {
    id v3 = (os_log_s *)CSLogCategoryEP;
    if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      int v6 = 136315394;
      uint64_t v7 = "-[CSHybridEndpointer processRCFeatures:]_block_invoke";
      __int16 v8 = 2114;
      uint64_t v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s EnhancedEndpointer - CSASRFeatures: %{public}@",  (uint8_t *)&v6,  0x16u);
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 23LL) = 1;
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 176LL), *(id *)(a1 + 40));
    double v5 = *(double *)(*(void *)(a1 + 32) + 272LL);
    id result = [*(id *)(a1 + 40) processedAudioDurationInMilliseconds];
    *(double *)(*(void *)(a1 + 32) + 20+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = -((double)(uint64_t)result - v5 * 1000.0);
  }

  return result;
}

id sub_1000CA4D4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateCurrentAsset:*(void *)(a1 + 40)];
}

void sub_1000CA4E0(uint64_t a1)
{
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getCSHybridEndpointerConfigForAsset:*(void *)(a1 + 40)]);
  id v3 = (os_log_s *)CSLogCategoryEP;
  if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
  {
    int v29 = 136315394;
    __int16 v30 = "-[CSHybridEndpointer _readParametersFromHEPAsset:]_block_invoke";
    __int16 v31 = 2114;
    __int16 v32 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s csHepConfig: %{public}@",  (uint8_t *)&v29,  0x16u);
  }

  if (v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"ClientLagThresholdMsKey"]);
    [v4 floatValue];
    *(double *)(*(void *)(a1 + 32) + 224LL) = v5;

    int v6 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"ClampedSFLatencyMsForClientLag"]);
    [v6 floatValue];
    *(double *)(*(void *)(a1 + 32) + 232LL) = v7;

    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"UseDefaultServerFeaturesOnClientLag"]);
    *(_BYTE *)(*(void *)(a1 + 32) + 12) = [v8 BOOLValue];

    *(void *)(*(void *)(a1 + 32) + 24+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 1000LL;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"extra-delay-frequency"]);

    if (v9)
    {
      int v10 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"extra-delay-frequency"]);
      *(void *)(*(void *)(a1 + 32) + 24+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7, 0) = [v10 unsignedIntValue];
    }

    uint64_t v11 = *(void *)(a1 + 32);
    int v12 = *(void **)(v11 + 248);
    *(void *)(v11 + 24_Block_object_dispose((const void *)(v1 - 176), 8) = 0LL;

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"endpoint-threshold"]);
    if (v13)
    {
      uint64_t v14 = objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"endpoint-threshold"]);
      uint64_t v15 = *(void *)(a1 + 32);
      __int16 v16 = *(void **)(v15 + 248);
      *(void *)(v15 + 24_Block_object_dispose((const void *)(v1 - 176), 8) = v14;
    }

    uint64_t v17 = objc_claimAutoreleasedReturnValue([v2 objectForKey:@"enhanced-endpointer-thresholds"]);
    uint64_t v18 = *(void *)(a1 + 32);
    id v19 = *(void **)(v18 + 408);
    *(void *)(v18 + 40_Block_object_dispose((const void *)(v1 - 176), 8) = v17;
  }

  else
  {
    *(void *)(*(void *)(a1 + 32) + 224LL) = 0xC0F5F90000000000LL;
    *(void *)(*(void *)(a1 + 32) + 232LL) = 0LL;
    *(_BYTE *)(*(void *)(a1 + 32) + 12LL) = 1;
    *(void *)(*(void *)(a1 + 32) + 24+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 1000LL;
    uint64_t v20 = *(void *)(a1 + 32);
    id v19 = *(void **)(v20 + 248);
    *(void *)(v20 + 24_Block_object_dispose((const void *)(v1 - 176), 8) = 0LL;
  }

  __int16 v21 = (os_log_s *)CSLogCategoryEP;
  if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = *(void *)(a1 + 32);
    id v23 = *(void **)(v22 + 224);
    uint64_t v24 = *(void *)(v22 + 232);
    int v25 = *(unsigned __int8 *)(v22 + 12);
    uint64_t v26 = *(void *)(v22 + 240);
    uint64_t v27 = *(void *)(v22 + 248);
    uint64_t v28 = *(void *)(v22 + 408);
    int v29 = 136316674;
    __int16 v30 = "-[CSHybridEndpointer _readParametersFromHEPAsset:]_block_invoke";
    __int16 v31 = 2050;
    __int16 v32 = v23;
    __int16 v33 = 2050;
    uint64_t v34 = v24;
    __int16 v35 = 1026;
    int v36 = v25;
    __int16 v37 = 2050;
    uint64_t v38 = v26;
    __int16 v39 = 2114;
    uint64_t v40 = v27;
    __int16 v41 = 2114;
    uint64_t v42 = v28;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "%s _clientHepConfig: %{public}f, _clampedASRFeatureLatencyMsForClientLag: %{public}f, _useDefaultASRFeaturesOnClie ntLag: %{public}d, _extraDelayFrequency: %{public}lu, _taskThresholdMap: %{public}@, _enhancedEndpointerTaskThresh oldMap: %{public}@",  (uint8_t *)&v29,  0x44u);
  }
}

uint64_t sub_1000CA7E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000CA7F8(uint64_t a1)
{
}

void sub_1000CA800(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 328);
  *(void *)(v3 + 32_Block_object_dispose((const void *)(v1 - 176), 8) = v2;

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), *(id *)(*(void *)(a1 + 32) + 120LL));
}

void sub_1000CA848(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 272LL) = 0LL;
  *(void *)(*(void *)(a1 + 32) + 264LL) = 0LL;
  *(_DWORD *)(*(void *)(a1 + 32) + 28LL) = 0;
  *(void *)(*(void *)(a1 + 32) + 352LL) = 0LL;
  *(void *)(*(void *)(a1 + 32) + 36+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0LL;
  *(_BYTE *)(*(void *)(a1 + 32) + 17LL) = 0;
  *(void *)(*(void *)(a1 + 32) + 368LL) = 0LL;
  *(_BYTE *)(*(void *)(a1 + 32) + 18LL) = 0;
  id v2 = -[OSDFeatures initWithSilenceFramesCountMs:silenceProbability:silenceDurationMs:processedAudioMs:]( objc_alloc(&OBJC_CLASS___OSDFeatures),  "initWithSilenceFramesCountMs:silenceProbability:silenceDurationMs:processedAudioMs:",  0.0,  0.0,  0.0,  0.0);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 128);
  *(void *)(v3 + 12_Block_object_dispose((const void *)(v1 - 176), 8) = v2;

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 168LL), *(id *)(*(void *)(a1 + 32) + 128LL));
  *(_BYTE *)(*(void *)(a1 + 32) + 14LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 32) + 24LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 32) + 25LL) = *(_BYTE *)(a1 + 64);
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
  {
    kdebug_trace(722472388LL, 0LL, 0LL, 0LL, 0LL);
    float v5 = objc_alloc(&OBJC_CLASS____EAREndpointer);
    int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) path]);
    id v84 = 0LL;
    float v7 = -[_EAREndpointer initWithConfiguration:modelVersion:](v5, "initWithConfiguration:modelVersion:", v6, &v84);
    id v8 = v84;
    id v9 = v84;
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void **)(v10 + 136);
    *(void *)(v10 + 136) = v7;

    kdebug_trace(722472392LL, 0LL, 0LL, 0LL, 0LL);
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 144LL), v8);
    uint64_t v12 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 136) defaultServerEndpointFeatures]);
    uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;

    unsigned int v15 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) getBoolForKey:@"is-enhanced-endpointer-enabled" category:@"enhanced-endpointer" default:0];
    if (v15)
    {
      __int16 v16 = (os_log_s *)CSLogCategoryEP;
      if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 136315138;
        char v86 = "-[CSHybridEndpointer resetForNewRequestWithSampleRate:recordContext:disableRCSelection:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%s Using enhanced endpointer", buf, 0xCu);
      }

      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) getNumberForKey:@"default-threshold-partial" category:@"enhanced-endpointer" default:&off_100238300]);
      [v18 floatValue];
      int v20 = v19;

      __int16 v21 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) getNumberForKey:@"default-threshold-rc" category:@"enhanced-endpointer" default:&off_100238300]);
      [v21 floatValue];
      int v23 = v22;

      uint64_t v24 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
      LODWORD(v25) = v20;
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v25));
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( [v24 getNumberForKey:@"relaxed-threshold-partial" category:@"enhanced-endpointer" default:v26]);
      [v27 floatValue];
      int v29 = v28;

      __int16 v30 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
      LODWORD(v31) = v23;
      __int16 v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v31));
      __int16 v33 = (void *)objc_claimAutoreleasedReturnValue( [v30 getNumberForKey:@"relaxed-threshold-rc" category:@"enhanced-endpointer" default:v32]);
      [v33 floatValue];
      int v35 = v34;

      int v36 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) getNumberForKey:@"extra-delay-ms" category:@"enhanced-endpointer" default:&off_100238A90]);
      LODWORD(v33) = [v36 intValue];

      __int16 v37 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) getNumberForKey:@"continuity-window-duration" category:@"enhanced-endpointer" default:&off_100238A90]);
      LODWORD(v36) = [v37 intValue];

      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) getNumberForKey:@"speech-detected-threshold" category:@"enhanced-endpointer" default:&off_100238300]);
      [v38 floatValue];
      int v40 = v39;

      __int16 v41 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) getValueForKey:@"model-files" category:@"enhanced-endpointer"]);
      double v70 = _NSConcreteStackBlock;
      uint64_t v71 = 3221225472LL;
      double v72 = sub_1000CB208;
      __int16 v73 = &unk_10022CD48;
      uint64_t v76 = *(void *)(a1 + 40);
      int v77 = v20;
      int v78 = v23;
      int v79 = v29;
      int v80 = v35;
      int v81 = (int)v33;
      int v82 = (int)v36;
      int v83 = v40;
      id v42 = v17;
      uint64_t v43 = *(void *)(a1 + 32);
      id v74 = v42;
      uint64_t v75 = v43;
      [v41 enumerateKeysAndObjectsUsingBlock:&v70];
      if (!*(void *)(*(void *)(a1 + 32) + 392LL))
      {
        __int16 v44 = (os_log_s *)CSLogCategoryEP;
        if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)__int128 buf = 136315394;
          char v86 = "-[CSHybridEndpointer resetForNewRequestWithSampleRate:recordContext:disableRCSelection:]_block_invoke";
          __int16 v87 = 2114;
          char v88 = @"SearchOrMessaging";
          _os_log_fault_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_FAULT,  "%s Unable to find endpointer model for default task type %{public}@",  buf,  0x16u);
        }
      }

      id v45 = objc_msgSend(v42, "copy", v70, v71, v72, v73);
      uint64_t v46 = *(void *)(a1 + 32);
      uint64_t v47 = *(void **)(v46 + 400);
      *(void *)(v46 + 400) = v45;
    }
  }

  else
  {
    uint64_t v48 = *(void *)(a1 + 32);
    __int16 v49 = *(void **)(v48 + 136);
    *(void *)(v48 + 136) = 0LL;

    uint64_t v50 = *(void *)(a1 + 32);
    unint64_t v51 = *(void **)(v50 + 144);
    *(void *)(v50 + 144) = 0LL;

    uint64_t v52 = *(void *)(a1 + 32);
    double v53 = *(void **)(v52 + 392);
    *(void *)(v52 + 392) = 0LL;

    uint64_t v54 = *(void *)(a1 + 32);
    __int16 v55 = *(void **)(v54 + 400);
    *(void *)(v54 + 400) = 0LL;

    unsigned int v15 = 0;
  }

  if ((+[CSUtils supportHybridEndpointer](&OBJC_CLASS___CSUtils, "supportHybridEndpointer") & 1) != 0)
  {
    uint64_t v56 = *(void *)(a1 + 32);
    if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
    {
      unsigned int v57 = [*(id *)(v56 + 136) requestSupportedWithSamplingRate:*(void *)(a1 + 56)];
      uint64_t v56 = *(void *)(a1 + 32);
      if ((v15 & v57) == 1) {
        LOBYTE(v57) = *(void *)(v56 + 392) != 0LL;
      }
    }

    else
    {
      LOBYTE(v57) = 0;
    }
  }

  else
  {
    LOBYTE(v57) = 0;
    uint64_t v56 = *(void *)(a1 + 32);
  }

  *(_BYTE *)(v56 + 9) = v57;
  float v58 = (void *)CSLogCategoryEP;
  if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v59 = *(void *)(a1 + 32);
    uint64_t v60 = *(const __CFString **)(v59 + 136);
    int v61 = *(unsigned __int8 *)(v59 + 9);
    uint64_t v62 = *(void *)(a1 + 56);
    uint64_t v63 = v58;
    uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(+[CSAssetManager sharedManager](&OBJC_CLASS___CSAssetManager, "sharedManager"));
    uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue([v64 currentLanguageCode]);
    uint64_t v66 = *(void *)(*(void *)(a1 + 32) + 144LL);
    *(_DWORD *)__int128 buf = 136316418;
    char v86 = "-[CSHybridEndpointer resetForNewRequestWithSampleRate:recordContext:disableRCSelection:]_block_invoke";
    __int16 v87 = 2114;
    char v88 = v60;
    __int16 v89 = 1026;
    int v90 = v61;
    __int16 v91 = 2050;
    uint64_t v92 = v62;
    __int16 v93 = 2114;
    uint64_t v94 = v65;
    __int16 v95 = 2114;
    uint64_t v96 = v66;
    _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "KeyLog - %s Created HybridClassifier(%{public}@); canProcessCurrentRequest after reset: %{public}d,for sampleRate:"
      " %{public}lu, lang=%{public}@, version=%{public}@",
      buf,
      0x3Au);
  }

  if (*(_BYTE *)(*(void *)(a1 + 32) + 9LL))
  {
    id v67 = (os_log_s *)CSLogCategoryEP;
    BOOL v68 = os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT);
    if (v15)
    {
      if (!v68) {
        return;
      }
      *(_DWORD *)__int128 buf = 136315138;
      char v86 = "-[CSHybridEndpointer resetForNewRequestWithSampleRate:recordContext:disableRCSelection:]_block_invoke";
      double v69 = "%s Legend - EEP Features: [trailingSilenceDuration (ASR), clientSilenceFramesCount (SPG), endOfSentenceLikel"
            "ihood (ASR), wordCount (ASR), serverFeaturesLatency, clientSilenceProbability (SPG), rcTrailingSilenceDurati"
            "on (ASR), rcEndOfSentenceLikelihood (ASR), rcWordCount (ASR), rcServerFeaturesLatency (ASR), silencePosterio"
            "r (ASR), acousticEndpointerScore (ASR), silencePosteriorNF (ASR)] @ effectiveClientProcessedAudioMs, Scores:"
            " [Partial, RC], Results: [Overall Decision, Default Decision, Relaxed Decision, Endpoint Posterior]";
    }

    else
    {
      if (!v68) {
        return;
      }
      *(_DWORD *)__int128 buf = 136315138;
      char v86 = "-[CSHybridEndpointer resetForNewRequestWithSampleRate:recordContext:disableRCSelection:]_block_invoke";
      double v69 = "%s HEP.logs.hdr: [ServerASR_trailingSilenceDuration,ClientSPG_SilenceFramesCountMs,ServerASR_endOfSentenceLi"
            "kelihood,ServerASR_wordCount,ServerFeaturesLatency,ClientSPG_SilenceProbabilityHMMFiltered] & [ServerASR_pau"
            "seCounts,ServerASR_silencePosterior,ClientSPG_silenceProbailitySPGRaw] @ effectiveClientProcessedAudioMs : ["
            "HEPPosteriorOut,HEPDecision]";
    }

    _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, v69, buf, 0xCu);
  }

void sub_1000CAFD4(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
  {
    id v2 = objc_alloc(&OBJC_CLASS___CSASRFeatures);
    id v3 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) wordCount];
    id v4 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) trailingSilenceDuration];
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) endOfSentenceLikelihood];
    double v6 = v5;
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) silencePosterior];
    double v8 = v7;
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) acousticEndpointerScore];
    uint64_t v10 = -[CSASRFeatures initWithWordCount:trailingSilenceDuration:eosLikelihood:pauseCounts:silencePosterior:taskName:processedAudioDurationInMilliseconds:acousticEndpointerScore:]( v2,  "initWithWordCount:trailingSilenceDuration:eosLikelihood:pauseCounts:silencePosterior:taskName:processedAudio DurationInMilliseconds:acousticEndpointerScore:",  v3,  v4,  &__NSArray0__struct,  @"SearchOrMessaging",  0LL,  v6,  v8,  v9);
  }

  else
  {
    uint64_t v10 = (CSASRFeatures *)objc_claimAutoreleasedReturnValue(+[CSASRFeatures initialASRFeatures](&OBJC_CLASS___CSASRFeatures, "initialASRFeatures"));
  }

  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void **)(v11 + 160);
  *(void *)(v11 + 160) = v10;

  uint64_t v13 = objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v14 = *(void *)(a1 + 32);
  unsigned int v15 = *(void **)(v14 + 216);
  *(void *)(v14 + 216) = v13;

  uint64_t v16 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(void **)(v17 + 184);
  *(void *)(v17 + 184) = v16;

  *(void *)(*(void *)(a1 + 32) + 208LL) = 0xFFF0000000000000LL;
  *(void *)(*(void *)(a1 + 32) + 192LL) = 0xBF847AE147AE147BLL;
  *(void *)(*(void *)(a1 + 32) + 20+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0xBF847AE147AE147BLL;
  *(_BYTE *)(*(void *)(a1 + 32) + 1+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 32) + 11LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 32) + 23LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 32) + 19LL) = 1;
  uint64_t v19 = objc_claimAutoreleasedReturnValue(+[CSASRFeatures initialResultCandidateFeatures](&OBJC_CLASS___CSASRFeatures, "initialResultCandidateFeatures"));
  uint64_t v20 = *(void *)(a1 + 32);
  __int16 v21 = *(void **)(v20 + 176);
  *(void *)(v20 + 176) = v19;
}

void sub_1000CB17C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(_BYTE *)(*(void *)(a1 + 32) + 13LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 32) + 15LL) = 0;
  *(void *)(*(void *)(a1 + 32) + 288LL) = v2;
  *(void *)(*(void *)(a1 + 32) + 304LL) = 0LL;
  *(void *)(*(void *)(a1 + 32) + 296LL) = 0LL;
  *(void *)(*(void *)(a1 + 32) + 312LL) = 0LL;
  *(void *)(*(void *)(a1 + 32) + 32+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0LL;
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 336);
  *(void *)(v3 + 336) = 0LL;

  *(void *)(*(void *)(a1 + 32) + 344LL) = 0LL;
  *(_BYTE *)(*(void *)(a1 + 32) + 16LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 32) + 21LL) = 0;
  *(void *)(*(void *)(a1 + 32) + 376LL) = 0LL;
  *(_BYTE *)(*(void *)(a1 + 32) + 22LL) = 0;
}

void sub_1000CB208(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  float v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) path]);
  double v8 = (void *)objc_claimAutoreleasedReturnValue([v7 stringByDeletingLastPathComponent]);
  float v9 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingPathComponent:v6]);

  uint64_t v10 = objc_alloc(&OBJC_CLASS___CSEnhancedEndpointer);
  LODWORD(v11) = *(_DWORD *)(a1 + 56);
  LODWORD(v12) = *(_DWORD *)(a1 + 60);
  LODWORD(v13) = *(_DWORD *)(a1 + 64);
  LODWORD(v14) = *(_DWORD *)(a1 + 68);
  LODWORD(v15) = *(_DWORD *)(a1 + 80);
  uint64_t v16 = -[CSEnhancedEndpointer initWithModelFile:defaultThresholdPartial:defaultThresholdRC:relaxedThresholdPartial:relaxedThresholdRC:extraDelayMs:continuityWindowDuration:speechDetectedThreshold:]( v10,  "initWithModelFile:defaultThresholdPartial:defaultThresholdRC:relaxedThresholdPartial:relaxedThresholdRC:extraD elayMs:continuityWindowDuration:speechDetectedThreshold:",  v9,  *(unsigned int *)(a1 + 72),  *(unsigned int *)(a1 + 76),  v11,  v12,  v13,  v14,  v15);
  if (v16)
  {
    [*(id *)(a1 + 32) setObject:v16 forKey:v5];
    uint64_t v17 = (void *)CSLogCategoryEP;
    if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = v17;
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(-[CSEnhancedEndpointer modelType](v16, "modelType"));
      int v29 = 136315906;
      __int16 v30 = "-[CSHybridEndpointer resetForNewRequestWithSampleRate:recordContext:disableRCSelection:]_block_invoke";
      __int16 v31 = 2114;
      id v32 = v5;
      __int16 v33 = 2114;
      id v34 = v19;
      __int16 v35 = 2114;
      double v36 = *(double *)&v6;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%s Loaded enhanced endpointer model for task %{public}@ with model type %{public}@. Model file name: %{public}@",  (uint8_t *)&v29,  0x2Au);
    }

    if ([v5 isEqualToString:@"SearchOrMessaging"])
    {
      objc_storeStrong((id *)(*(void *)(a1 + 40) + 392LL), v16);
      uint64_t v20 = (os_log_s *)CSLogCategoryEP;
      if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
      {
        double v21 = *(float *)(a1 + 56);
        double v22 = *(float *)(a1 + 60);
        double v23 = *(float *)(a1 + 64);
        double v24 = *(float *)(a1 + 68);
        int v25 = *(_DWORD *)(a1 + 72);
        int v26 = *(_DWORD *)(a1 + 76);
        double v27 = *(float *)(a1 + 80);
        int v29 = 136317442;
        __int16 v30 = "-[CSHybridEndpointer resetForNewRequestWithSampleRate:recordContext:disableRCSelection:]_block_invoke";
        __int16 v31 = 2114;
        id v32 = v6;
        __int16 v33 = 2114;
        id v34 = v5;
        __int16 v35 = 2050;
        double v36 = v21;
        __int16 v37 = 2050;
        double v38 = v22;
        __int16 v39 = 2050;
        double v40 = v23;
        __int16 v41 = 2050;
        double v42 = v24;
        __int16 v43 = 1026;
        int v44 = v25;
        __int16 v45 = 1026;
        int v46 = v26;
        __int16 v47 = 2050;
        double v48 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%s Setting default enhanced endpointer model to %{public}@ for task %{public}@, with defaultThresholdPartial: %{public}f, defaultThresholdRC: %{public}f, relaxedThresholdPartial: %{public}f, relaxedThresholdRC: %{public} f, extraDelayMs: %{public}d, continuityWindowDuration: %{public}d, speechDetectedThreshold: %{public}f",  (uint8_t *)&v29,  0x5Eu);
      }
    }
  }

  else
  {
    int v28 = (os_log_s *)CSLogCategoryEP;
    if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_ERROR))
    {
      int v29 = 136315650;
      __int16 v30 = "-[CSHybridEndpointer resetForNewRequestWithSampleRate:recordContext:disableRCSelection:]_block_invoke";
      __int16 v31 = 2114;
      id v32 = v6;
      __int16 v33 = 2114;
      id v34 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "%s Enhanced endpointer for model %{public}@ and task %{public}@ was nil after initialization",  (uint8_t *)&v29,  0x20u);
    }
  }
}

void sub_1000CB500(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 392);
  *(void *)(v2 + 392) = 0LL;

  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 400);
  *(void *)(v4 + 400) = 0LL;
}

void sub_1000CB538(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEItriggerEndSampleCount]);
  uint64_t v3 = [v2 unsignedIntegerValue];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEIclientStartSampleCount]);
  unint64_t v5 = v3 - (_BYTE *)[v4 unsignedIntegerValue];

  +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
  double v7 = (double)v5 / v6;
  double v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEIextraSamplesAtStart]);
  id v9 = [v8 unsignedIntegerValue];

  *(void *)(*(void *)(a1 + 40) + 304LL) = (unint64_t)(v7
  *(double *)(*(void *)(a1 + 40) + 296LL) = (float)((float)((float)(unint64_t)v9
  *(double *)(*(void *)(a1 + 40) + 312LL) = -(*(double *)(*(void *)(a1 + 40) + 296LL) - v7 * 1000.0);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEItwoShotAudibleFeedbackDelay]);
  [v10 doubleValue];
  *(double *)(*(void *)(a1 + 40) + 32+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = v11 * 1000.0;

  double v12 = (os_log_s *)CSLogCategoryEP;
  if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    unint64_t v15 = (unint64_t)*(double *)(v13 + 296);
    uint64_t v16 = *(void *)(v13 + 304);
    uint64_t v17 = *(void *)(v13 + 312);
    uint64_t v18 = *(void *)(v13 + 320);
    int v19 = 136316674;
    uint64_t v20 = "-[CSHybridEndpointer handleVoiceTriggerWithActivationInfo:]_block_invoke";
    __int16 v21 = 2050;
    double v22 = v7;
    __int16 v23 = 2050;
    uint64_t v24 = v16;
    __int16 v25 = 2050;
    unint64_t v26 = v15;
    __int16 v27 = 2050;
    uint64_t v28 = v17;
    __int16 v29 = 2050;
    uint64_t v30 = v18;
    __int16 v31 = 2114;
    uint64_t v32 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s triggerEndSeconds: %{public}f, _vtEndInSampleCount: %{public}lu, _vtExtraAudioAtStartInMs: %{public}lu,  _hepAu dioOriginInMs: %{public}f, _twoShotSilenceThresholdInMs: %{public}f, voiceTriggerInfo: %{public}@,",  (uint8_t *)&v19,  0x48u);
  }

void sub_1000CB754(uint64_t a1)
{
  v26[0] = 0LL;
  v26[1] = v26;
  v26[2] = 0x3032000000LL;
  v26[3] = sub_1000CA7E8;
  v26[4] = sub_1000CA7F8;
  id v27 = 0LL;
  v24[0] = 0LL;
  v24[1] = v24;
  v24[2] = 0x2020000000LL;
  char v25 = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(dispatch_queue_s **)(v2 + 256);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000CB9FC;
  block[3] = &unk_10022CCA8;
  void block[4] = v2;
  void block[5] = v26;
  void block[6] = v24;
  dispatch_sync(v3, block);
  v21[0] = 0LL;
  v21[1] = v21;
  void v21[2] = 0x3032000000LL;
  v21[3] = sub_1000CA7E8;
  void v21[4] = sub_1000CA7F8;
  id v22 = 0LL;
  v20[0] = 0LL;
  v20[1] = v20;
  _OWORD v20[2] = 0x2020000000LL;
  v20[3] = 0xBF847AE147AE147BLL;
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = *(dispatch_queue_s **)(v4 + 152);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  void v19[2] = sub_1000CBA40;
  v19[3] = &unk_10022CCA8;
  v19[4] = v4;
  void v19[5] = v21;
  v19[6] = v20;
  dispatch_async_and_wait(v5, v19);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  id v12[2] = sub_1000CBA90;
  void v12[3] = &unk_10022CD20;
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 32);
  id v13 = v7;
  uint64_t v14 = v8;
  unint64_t v15 = v21;
  uint64_t v16 = v20;
  uint64_t v17 = v26;
  uint64_t v18 = v24;
  AnalyticsSendEventLazy(v6, v12);
  id v9 = (os_log_s *)CSLogCategoryEP;
  if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    *(_DWORD *)__int128 buf = 136315650;
    __int16 v29 = "-[CSHybridEndpointer logFeaturesWithEvent:locale:]_block_invoke";
    __int16 v30 = 2114;
    uint64_t v31 = v10;
    __int16 v32 = 2114;
    uint64_t v33 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Log hybrid endpointer features for event: %{public}@, and locale: %{public}@",  buf,  0x20u);
  }

  _Block_object_dispose(v20, 8);
  _Block_object_dispose(v21, 8);

  _Block_object_dispose(v24, 8);
  _Block_object_dispose(v26, 8);
}

void sub_1000CB9B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, char a30)
{
}

void sub_1000CB9FC(void *a1)
{
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = *(_BYTE *)(a1[4] + 10LL);
}

double sub_1000CBA40(void *a1)
{
  double result = *(double *)(a1[4] + 192LL) * 1000.0;
  *(double *)(*(void *)(a1[6] + 8LL) + 24LL) = result;
  return result;
}

id sub_1000CBA90(void *a1)
{
  uint64_t v2 = @"nil";
  v13[0] = @"locale";
  v13[1] = @"endpointerModelVersion";
  uint64_t v3 = (const __CFString *)a1[4];
  if (!v3) {
    uint64_t v3 = @"nil";
  }
  if (*(void *)(a1[5] + 144LL)) {
    uint64_t v2 = *(const __CFString **)(a1[5] + 144LL);
  }
  v14[0] = v3;
  v14[1] = v2;
  id v13[2] = @"wordCount";
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*(id *)(*(void *)(a1[6] + 8) + 40) wordCount]));
  id v14[2] = v4;
  v13[3] = @"eosLikelihood";
  [*(id *)(*(void *)(a1[6] + 8) + 40) eosLikelihood];
  unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  v14[3] = v5;
  void v13[4] = @"trailingSilenceDuration";
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*(id *)(*(void *)(a1[6] + 8) + 40) trailingSilenceDuration]));
  v14[4] = v6;
  void v13[5] = @"serverFeaturesLatency";
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(*(void *)(a1[7] + 8LL) + 24LL)));
  void v14[5] = v7;
  v13[6] = @"clientSilenceProbability";
  [*(id *)(*(void *)(a1[8] + 8) + 40) silenceProbability];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  v14[6] = v8;
  v13[7] = @"clientSilenceFramesCountMs";
  [*(id *)(*(void *)(a1[8] + 8) + 40) silenceFramesCountMs];
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  v14[7] = v9;
  v13[8] = @"endpointResult";
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(*(void *)(a1[9] + 8LL) + 24LL)));
  v14[8] = v10;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v14,  v13,  9LL));

  return v11;
}

id sub_1000CBCD8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateEndpointerDelayedTriggerByMhId:*(void *)(a1 + 40)];
}

uint64_t sub_1000CBD04(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000CBD18(uint64_t a1)
{
}

void *sub_1000CBD2C(void *result)
{
  *(void *)(*(void *)(result[5] + 8LL) + 24LL) = *(void *)(result[4] + 360LL);
  *(void *)(*(void *)(result[6] + 8LL) + 24LL) = *(void *)(result[4] + 352LL);
  *(_BYTE *)(*(void *)(result[7] + 8LL) + 24LL) = *(_BYTE *)(result[4] + 17LL);
  *(void *)(*(void *)(result[8] + 8LL) + 24LL) = *(void *)(result[4] + 368LL);
  return result;
}

double sub_1000CBD7C(uint64_t a1)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(a1 + 32) + 13LL);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(a1 + 32) + 15LL);
  double result = *(double *)(*(void *)(a1 + 32) + 312LL) + *(float *)(a1 + 64);
  *(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = result;
  return result;
}

id sub_1000CBDC4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _shouldProvideTwoShotFeedbackWithRecordContext];
  if ((_DWORD)result) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }
  return result;
}

void sub_1000CBDFC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryEP;
  if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    int v4 = 136315394;
    unint64_t v5 = "-[CSHybridEndpointer processOSDFeatures:withFrameDurationMs:withMHID:]_block_invoke_4";
    __int16 v6 = 2050;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Detected speech start at %{public}f of effectiveClientProcessedAudioMs",  (uint8_t *)&v4,  0x16u);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 21LL) = 1;
  *(void *)(*(void *)(a1 + 32) + 376LL) = 0LL;
}

void sub_1000CBED0(uint64_t a1)
{
  *(double *)(*(void *)(a1 + 32) + 376LL) = *(float *)(a1 + 40);
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 14))
  {
    double v2 = *(double *)(v1 + 376);
    double v3 = *(double *)(v1 + 320);
    if (v2 > v3)
    {
      unint64_t v5 = (os_log_s *)CSLogCategoryEP;
      if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 136315650;
        uint64_t v8 = "-[CSHybridEndpointer processOSDFeatures:withFrameDurationMs:withMHID:]_block_invoke";
        __int16 v9 = 2050;
        double v10 = v2;
        __int16 v11 = 2048;
        double v12 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s Detected sufficient silence to fire two shot with %{public}fms silence, %f threshold",  (uint8_t *)&v7,  0x20u);
        uint64_t v1 = *(void *)(a1 + 32);
      }

      *(_BYTE *)(v1 + 14) = 1;
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));
      objc_msgSend( WeakRetained,  "endpointer:detectedTwoShotAtTime:",  *(double *)(*(void *)(a1 + 32) + 376) / 1000.0);
    }
  }

void sub_1000CC004(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 20))
  {
    double v2 = (os_log_s *)CSLogCategoryEP;
    if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315394;
      *(void *)&uint8_t buf[4] = "-[CSHybridEndpointer processOSDFeatures:withFrameDurationMs:withMHID:]_block_invoke";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "Second check, don't process OSD features";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s Recording stopped: %s", buf, 0x16u);
    }

    return;
  }

  uint64_t v4 = qword_10027FFA0;
  if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * qword_10027FFA0, 1) <= 0x888888888888888uLL)
  {
    kdebug_trace(722472240LL, 0LL, 0LL, 0LL, 0LL);
    uint64_t v4 = qword_10027FFA0;
    uint64_t v1 = *(void *)(a1 + 32);
  }

  qword_10027FFA0 = v4 + 1;
  unint64_t v5 = *(dispatch_queue_s **)(v1 + 280);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000CD7A8;
  block[3] = &unk_10022EF80;
  void block[5] = *(void *)(a1 + 48);
  void block[4] = v1;
  dispatch_async_and_wait(v5, block);
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 168LL), *(id *)(a1 + 40));
    uint64_t v245 = 0LL;
    v246 = &v245;
    uint64_t v247 = 0x3032000000LL;
    v248 = sub_1000CA7E8;
    v249 = sub_1000CA7F8;
    id v250 = 0LL;
    uint64_t v239 = 0LL;
    v240 = &v239;
    uint64_t v241 = 0x3032000000LL;
    v242 = sub_1000CA7E8;
    v243 = sub_1000CA7F8;
    id v244 = 0LL;
    uint64_t v8 = *(void *)(a1 + 32);
    __int16 v9 = *(dispatch_queue_s **)(v8 + 152);
    v234[0] = _NSConcreteStackBlock;
    v234[1] = 3221225472LL;
    v234[2] = sub_1000CD7BC;
    v234[3] = &unk_10022CC30;
    uint64_t v10 = *(void *)(a1 + 56);
    v234[4] = v8;
    uint64_t v236 = v10;
    id v235 = *(id *)(a1 + 40);
    v237 = &v245;
    v238 = &v239;
    dispatch_async_and_wait(v9, v234);
    if (!v246[5] && !v240[5])
    {
      int v82 = (os_log_s *)CSLogCategoryEP;
      if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 136315138;
        *(void *)&uint8_t buf[4] = "-[CSHybridEndpointer processOSDFeatures:withFrameDurationMs:withMHID:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_DEFAULT,  "%s ClientLag: Not Invoking HybridClassifier as ASR's ProcessedAudioMs > effectiveClientProcessedAudioMs",  buf,  0xCu);
      }

      kdebug_trace(722472244LL, 0LL, 0LL, 0LL, 0LL);
      goto LABEL_79;
    }

    uint64_t v230 = 0LL;
    v231 = (float *)&v230;
    uint64_t v232 = 0x2020000000LL;
    int v233 = 0;
    uint64_t v226 = 0LL;
    v227 = &v226;
    uint64_t v228 = 0x2020000000LL;
    int v229 = 0;
    uint64_t v222 = 0LL;
    v223 = &v222;
    uint64_t v224 = 0x2020000000LL;
    char v225 = 0;
    uint64_t v218 = 0LL;
    v219 = &v218;
    uint64_t v220 = 0x2020000000LL;
    char v221 = 0;
    uint64_t v214 = 0LL;
    v215 = &v214;
    uint64_t v216 = 0x2020000000LL;
    char v217 = 0;
    uint64_t v210 = 0LL;
    v211 = &v210;
    uint64_t v212 = 0x2020000000LL;
    char v213 = 0;
    uint64_t v206 = 0LL;
    v207 = &v206;
    uint64_t v208 = 0x2020000000LL;
    uint64_t v209 = 1LL;
    if (![*(id *)(a1 + 32) _useEnhancedEndpointer] || (uint64_t v11 = v240[5]) == 0)
    {
      uint64_t v45 = v246[5];
      if (!v45)
      {
        uint64_t v66 = (os_log_s *)CSLogCategoryEP;
        if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)__int128 buf = 136315138;
          *(void *)&uint8_t buf[4] = "-[CSHybridEndpointer processOSDFeatures:withFrameDurationMs:withMHID:]_block_invoke";
          _os_log_fault_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_FAULT,  "%s hybridEPFeatures and enhancedEPFeatures should not both be nil",  buf,  0xCu);
        }

        id v170 = 0LL;
        goto LABEL_76;
      }

      int v46 = *(void **)(*(void *)(a1 + 32) + 136LL);
      double v47 = *(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
      id v204 = 0LL;
      unsigned int v48 = [v46 didEndpointWithFeatures:v45 audioTimestamp:&v204 featuresToLog:v231 + 6 endpointPosterior:v227 + 3 extraDelayMs:v47];
      id v170 = v204;
      __int16 v49 = (os_log_s *)CSLogCategoryEP;
      uint64_t v50 = v49;
      if (!v48)
      {
        if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
        {
          id v67 = [(id)v246[5] trailingSilenceDuration];
          [(id)v246[5] clientSilenceFramesCountMs];
          double v69 = v68;
          [(id)v246[5] endOfSentenceLikelihood];
          uint64_t v71 = v70;
          id v72 = [(id)v246[5] wordCount];
          [(id)v246[5] serverFeaturesLatency];
          float v74 = v73;
          [(id)v246[5] clientSilenceProbability];
          uint64_t v76 = v75;
          int v77 = (void *)objc_claimAutoreleasedReturnValue([(id)v246[5] pauseCounts]);
          id v78 = (id)objc_claimAutoreleasedReturnValue([v77 componentsJoinedByString:@","]);
          [(id)v246[5] silencePosterior];
          unint64_t v79 = (unint64_t)*(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
          double v80 = v231[6];
          *(_DWORD *)__int128 buf = 136317954;
          *(void *)&uint8_t buf[4] = "-[CSHybridEndpointer processOSDFeatures:withFrameDurationMs:withMHID:]_block_invoke";
          *(_WORD *)&buf[12] = 2050;
          *(void *)&buf[14] = v67;
          *(_WORD *)&buf[22] = 2050;
          v261 = v69;
          *(_WORD *)v262 = 2050;
          *(void *)&v262[2] = v71;
          *(_WORD *)&v262[10] = 2050;
          *(void *)&v262[12] = v72;
          __int16 v263 = 2050;
          double v264 = v74;
          __int16 v265 = 2050;
          uint64_t v266 = v76;
          __int16 v267 = 2114;
          id v268 = v78;
          __int16 v269 = 2050;
          uint64_t v270 = v81;
          __int16 v271 = 2050;
          unint64_t v272 = v79;
          __int16 v273 = 2050;
          double v274 = v80;
          __int16 v275 = 1026;
          LODWORD(v276) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_INFO,  "%s HEP.feats: [%{public}ld,%{public}f,%{public}f,%{public}ld,%{public}f,%{public}f] & [(%{public}@),%{public }f] @ %{public}lu [%{public}f, %{public}d]",  buf,  0x76u);
        }

        goto LABEL_76;
      }

      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        id v51 = [(id)v246[5] trailingSilenceDuration];
        [(id)v246[5] clientSilenceFramesCountMs];
        double v53 = v52;
        [(id)v246[5] endOfSentenceLikelihood];
        uint64_t v55 = v54;
        id v56 = [(id)v246[5] wordCount];
        [(id)v246[5] serverFeaturesLatency];
        float v58 = v57;
        [(id)v246[5] clientSilenceProbability];
        uint64_t v60 = v59;
        int v61 = (void *)objc_claimAutoreleasedReturnValue([(id)v246[5] pauseCounts]);
        id v62 = (id)objc_claimAutoreleasedReturnValue([v61 componentsJoinedByString:@","]);
        [(id)v246[5] silencePosterior];
        unint64_t v63 = (unint64_t)*(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
        double v64 = v231[6];
        *(_DWORD *)__int128 buf = 136317954;
        *(void *)&uint8_t buf[4] = "-[CSHybridEndpointer processOSDFeatures:withFrameDurationMs:withMHID:]_block_invoke";
        *(_WORD *)&buf[12] = 2050;
        *(void *)&buf[14] = v51;
        *(_WORD *)&buf[22] = 2050;
        v261 = v53;
        *(_WORD *)v262 = 2050;
        *(void *)&v262[2] = v55;
        *(_WORD *)&v262[10] = 2050;
        *(void *)&v262[12] = v56;
        __int16 v263 = 2050;
        double v264 = v58;
        __int16 v265 = 2050;
        uint64_t v266 = v60;
        __int16 v267 = 2114;
        id v268 = v62;
        __int16 v269 = 2050;
        uint64_t v270 = v65;
        __int16 v271 = 2050;
        unint64_t v272 = v63;
        __int16 v273 = 2050;
        double v274 = v64;
        __int16 v275 = 1026;
        LODWORD(v276) = 1;
        _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "%s HEP.feats: [%{public}ld,%{public}f,%{public}f,%{public}ld,%{public}f,%{public}f] & [(%{public}@),%{public}f ] @ %{public}lu [%{public}f, %{public}d]",  buf,  0x76u);
      }

      goto LABEL_39;
    }

    uint64_t v198 = 0LL;
    v199 = (float *)&v198;
    uint64_t v200 = 0x2020000000LL;
    LODWORD(v201) = 0;
    uint64_t v188 = 0LL;
    v189 = (float *)&v188;
    uint64_t v190 = 0x2020000000LL;
    LODWORD(v191) = 0;
    double v12 = *(void **)(*(void *)(a1 + 32) + 392LL);
    double v13 = *(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
    v205[0] = _NSConcreteStackBlock;
    v205[1] = 3221225472LL;
    v205[2] = sub_1000CD824;
    v205[3] = &unk_10022CC58;
    v205[4] = &v222;
    v205[5] = &v218;
    v205[6] = &v226;
    v205[7] = &v230;
    v205[8] = &v214;
    v205[9] = &v210;
    v205[10] = &v198;
    v205[11] = &v188;
    v205[12] = &v206;
    [v12 didEndpointWithFeatures:v11 audioTimestampMs:v205 completion:v13];
    uint64_t v14 = v219;
    if (*((_BYTE *)v215 + 24) || (unint64_t v15 = v219 + 3, !*((_BYTE *)v219 + 24)))
    {
      *(_BYTE *)(*(void *)(a1 + 32) + 22LL) = 0;
      unint64_t v15 = v14 + 3;
    }

    else
    {
      uint64_t v148 = *(void *)(a1 + 32);
      if (!*(_BYTE *)(v148 + 22))
      {
        BOOL v16 = 1;
        *(_BYTE *)(v148 + 22) = 1;
        if (*v15)
        {
LABEL_18:
          id v170 = (id)objc_claimAutoreleasedReturnValue([(id)v240[5] toFeatureArray]);
          uint64_t v17 = (os_log_s *)CSLogCategoryEP;
          uint64_t v18 = v17;
          if (v16)
          {
            if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_38;
            }
            id v19 = [(id)v240[5] trailingSilenceDuration];
            [(id)v240[5] clientSilenceFramesCount];
            v167 = v20;
            [(id)v240[5] endOfSentenceLikelihood];
            uint64_t v164 = v21;
            id v22 = [(id)v240[5] wordCount];
            [(id)v240[5] serverFeaturesLatency];
            double v161 = v23;
            [(id)v240[5] clientSilenceProbability];
            uint64_t v25 = v24;
            id v26 = [(id)v240[5] rcTrailingSilenceDuration];
            [(id)v240[5] rcEndOfSentenceLikelihood];
            uint64_t v28 = v27;
            id v29 = [(id)v240[5] rcWordCount];
            [(id)v240[5] rcServerFeaturesLatency];
            double v31 = v30;
            [(id)v240[5] silencePosterior];
            uint64_t v33 = v32;
            [(id)v240[5] acousticEndpointerScore];
            uint64_t v35 = v34;
            [(id)v240[5] silencePosteriorNF];
            uint64_t v36 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
            double v37 = v199[6];
            double v38 = v189[6];
            int v39 = *((unsigned __int8 *)v219 + 24);
            int v40 = *((unsigned __int8 *)v223 + 24);
            double v41 = v231[6];
            *(_DWORD *)__int128 buf = 136320258;
            *(void *)&uint8_t buf[4] = "-[CSHybridEndpointer processOSDFeatures:withFrameDurationMs:withMHID:]_block_invoke_2";
            *(_WORD *)&buf[12] = 2050;
            *(void *)&buf[14] = v19;
            *(_WORD *)&buf[22] = 2050;
            v261 = v167;
            *(_WORD *)v262 = 2050;
            *(void *)&v262[2] = v164;
            *(_WORD *)&v262[10] = 2050;
            *(void *)&v262[12] = v22;
            __int16 v263 = 2050;
            double v264 = v161;
            __int16 v265 = 2050;
            uint64_t v266 = v25;
            __int16 v267 = 2050;
            id v268 = v26;
            __int16 v269 = 2050;
            uint64_t v270 = v28;
            __int16 v271 = 2050;
            unint64_t v272 = (unint64_t)v29;
            __int16 v273 = 2050;
            double v274 = v31;
            __int16 v275 = 2050;
            uint64_t v276 = v33;
            __int16 v277 = 2050;
            uint64_t v278 = v35;
            __int16 v279 = 2050;
            double v280 = v42;
            __int16 v281 = 2050;
            uint64_t v282 = v36;
            __int16 v283 = 2050;
            double v284 = v37;
            __int16 v285 = 2050;
            double v286 = v38;
            __int16 v287 = 1026;
            int v288 = 1;
            __int16 v289 = 1026;
            int v290 = v39;
            __int16 v291 = 1026;
            int v292 = v40;
            __int16 v293 = 2050;
            double v294 = v41;
            __int16 v43 = v18;
            os_log_type_t v44 = OS_LOG_TYPE_DEFAULT;
          }

          else
          {
            if (!os_log_type_enabled(v17, OS_LOG_TYPE_INFO)) {
              goto LABEL_38;
            }
            id v83 = [(id)v240[5] trailingSilenceDuration];
            [(id)v240[5] clientSilenceFramesCount];
            v168 = v84;
            [(id)v240[5] endOfSentenceLikelihood];
            uint64_t v165 = v85;
            id v86 = [(id)v240[5] wordCount];
            [(id)v240[5] serverFeaturesLatency];
            double v162 = v87;
            [(id)v240[5] clientSilenceProbability];
            uint64_t v89 = v88;
            id v90 = [(id)v240[5] rcTrailingSilenceDuration];
            [(id)v240[5] rcEndOfSentenceLikelihood];
            uint64_t v92 = v91;
            id v93 = [(id)v240[5] rcWordCount];
            [(id)v240[5] rcServerFeaturesLatency];
            double v95 = v94;
            [(id)v240[5] silencePosterior];
            uint64_t v97 = v96;
            [(id)v240[5] acousticEndpointerScore];
            uint64_t v99 = v98;
            [(id)v240[5] silencePosteriorNF];
            uint64_t v100 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
            double v101 = v199[6];
            double v102 = v189[6];
            int v103 = *((unsigned __int8 *)v219 + 24);
            int v104 = *((unsigned __int8 *)v223 + 24);
            double v105 = v231[6];
            *(_DWORD *)__int128 buf = 136320258;
            *(void *)&uint8_t buf[4] = "-[CSHybridEndpointer processOSDFeatures:withFrameDurationMs:withMHID:]_block_invoke";
            *(_WORD *)&buf[12] = 2050;
            *(void *)&buf[14] = v83;
            *(_WORD *)&buf[22] = 2050;
            v261 = v168;
            *(_WORD *)v262 = 2050;
            *(void *)&v262[2] = v165;
            *(_WORD *)&v262[10] = 2050;
            *(void *)&v262[12] = v86;
            __int16 v263 = 2050;
            double v264 = v162;
            __int16 v265 = 2050;
            uint64_t v266 = v89;
            __int16 v267 = 2050;
            id v268 = v90;
            __int16 v269 = 2050;
            uint64_t v270 = v92;
            __int16 v271 = 2050;
            unint64_t v272 = (unint64_t)v93;
            __int16 v273 = 2050;
            double v274 = v95;
            __int16 v275 = 2050;
            uint64_t v276 = v97;
            __int16 v277 = 2050;
            uint64_t v278 = v99;
            __int16 v279 = 2050;
            double v280 = v106;
            __int16 v281 = 2050;
            uint64_t v282 = v100;
            __int16 v283 = 2050;
            double v284 = v101;
            __int16 v285 = 2050;
            double v286 = v102;
            __int16 v287 = 1026;
            int v288 = 0;
            __int16 v289 = 1026;
            int v290 = v103;
            __int16 v291 = 1026;
            int v292 = v104;
            __int16 v293 = 2050;
            double v294 = v105;
            __int16 v43 = v18;
            os_log_type_t v44 = OS_LOG_TYPE_INFO;
          }

          _os_log_impl( (void *)&_mh_execute_header,  v43,  v44,  "%s EEP Features: [%{public}ld, %{public}.2f, %{public}f, %{public}ld, %{public}.2f, %{public}f, %{public}ld, %{public}f, %{public}ld, %{public}.2f, %{public}f, %{public}f, %{public}f] @ %{public}.0f, Scores: [%{publi c}f, %{public}f], Results: [%{public}d, %{public}d, %{public}d, %{public}f]",  buf,  0xC8u);
LABEL_38:

          _Block_object_dispose(&v188, 8);
          _Block_object_dispose(&v198, 8);
          if (!v16)
          {
LABEL_76:
            *(float *)(*(void *)(a1 + 32) + 28LL) = v231[6];
            uint64_t v157 = qword_10027FFA8;
            if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * qword_10027FFA8, 1) <= 0x888888888888888uLL)
            {
              kdebug_trace(722472248LL, 0LL, 0LL, 0LL, 0LL);
              uint64_t v157 = qword_10027FFA8;
            }

            qword_10027FFA8 = v157 + 1;
            _Block_object_dispose(&v206, 8);
            _Block_object_dispose(&v210, 8);
            _Block_object_dispose(&v214, 8);
            _Block_object_dispose(&v218, 8);
            _Block_object_dispose(&v222, 8);
            _Block_object_dispose(&v226, 8);
            _Block_object_dispose(&v230, 8);

LABEL_79:
            _Block_object_dispose(&v239, 8);

            _Block_object_dispose(&v245, 8);
            return;
          }

void sub_1000CD688( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, char a48, uint64_t a49, uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
}

uint64_t sub_1000CD7A8(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 13LL);
  return result;
}

id sub_1000CD7BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  double v2 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  double v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_1000CDA78;
  v5[3] = &unk_10022CC08;
  __int128 v6 = *(_OWORD *)(a1 + 56);
  return [v3 _generateEndpointerFeaturesWithEffectiveClientProcessedAudioMs:v1 osdFeatures:v5 completion:v2];
}

void sub_1000CD824(void *a1, void *a2)
{
  id v3 = a2;
  *(_BYTE *)(*(void *)(a1[4] + 8) + 24) = [v3 didRelaxedEndpointerFire];
  *(_BYTE *)(*(void *)(a1[5] + 8) + 24) = [v3 didDefaultEndpointerFire];
  *(_DWORD *)(*(void *)(a1[6] + 8) + 24) = [v3 extraDelayMs];
  [v3 endpointPosterior];
  *(_DWORD *)(*(void *)(a1[7] + 8LL) + 24LL) = v4;
  *(_BYTE *)(*(void *)(a1[8] + 8) + 24) = [v3 speechArrivalDetected];
  *(_BYTE *)(*(void *)(a1[9] + 8) + 24) = [v3 didForceEndpoint];
  [v3 partialScore];
  *(_DWORD *)(*(void *)(a1[10] + 8LL) + 24LL) = v5;
  [v3 rcScore];
  *(_DWORD *)(*(void *)(a1[11] + 8LL) + 24LL) = v6;
  id v7 = [v3 endpointerType];

  *(void *)(*(void *)(a1[12] + 8LL) + 24LL) = v7;
}

double sub_1000CD908(uint64_t a1)
{
  else {
    BOOL v2 = 1;
  }
  if (!*(_BYTE *)(a1 + 88)) {
    *(_BYTE *)(*(void *)(a1 + 32) + 13LL) = v2;
  }
  *(_BYTE *)(*(void *)(a1 + 32) + 15LL) = v2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), *(id *)(*(void *)(a1 + 32) + 336LL));
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), *(id *)(*(void *)(a1 + 32) + 120LL));
  *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = *(void *)(*(void *)(a1 + 32) + 312LL);
  double result = *(double *)(*(void *)(a1 + 32) + 296LL);
  *(double *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = result;
  return result;
}

void sub_1000CD9D4(void *a1)
{
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue( +[CSUtils distributionDictionary:]( &OBJC_CLASS___CSUtils,  "distributionDictionary:",  *(void *)(a1[4] + 184LL)));
  id v3 = [v2 mutableCopy];
  uint64_t v4 = *(void *)(a1[5] + 8LL);
  int v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1[4] + 208LL)));
  [*(id *)(*(void *)(a1[5] + 8) + 40) setObject:v6 forKeyedSubscript:@"Warmup"];

  objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), *(id *)(a1[4] + 160LL));
}

void sub_1000CDA78(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    uint64_t v10 = (void *)CSLogCategoryEP;
    if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = v10;
      double v12 = (void *)objc_claimAutoreleasedReturnValue([v7 localizedDescription]);
      int v13 = 136315394;
      uint64_t v14 = "-[CSHybridEndpointer processOSDFeatures:withFrameDurationMs:withMHID:]_block_invoke_2";
      __int16 v15 = 2112;
      BOOL v16 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s Endpoint feature generation error: %@",  (uint8_t *)&v13,  0x16u);
    }
  }

  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a3);
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a4);
  }
}

void sub_1000CDBB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 16))
  {
    *(_BYTE *)(v1 + 16) = 1;
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 336LL), *(id *)(a1 + 40));
    unint64_t v3 = *(void *)(a1 + 48);
    *(double *)(*(void *)(a1 + 32) + 344LL) = (double)v3;
    uint64_t v4 = (os_log_s *)CSLogCategoryEP;
    if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315394;
      int v6 = "-[CSHybridEndpointer processFirstAudioPacketTimestamp:firstAudioSampleSensorTimestamp:]_block_invoke";
      __int16 v7 = 2050;
      unint64_t v8 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s first audio buffer host time: %{public}llu",  (uint8_t *)&v5,  0x16u);
    }
  }

uint64_t sub_1000CDC9C(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 36+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = *(void *)(result + 40);
  uint64_t v1 = *(void *)(result + 56);
  *(void *)(*(void *)(result + 32) + 352LL) = *(void *)(result + 48);
  *(_BYTE *)(*(void *)(result + 32) + 17LL) = *(_BYTE *)(result + 64);
  *(void *)(*(void *)(result + 32) + 368LL) = v1;
  return result;
}

void sub_1000CDCC8(uint64_t a1)
{
}

id sub_1000CDCDC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _shouldAcceptEagerResultForDuration:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) asrFeatures:*(void *)(*(void *)(a1 + 32) + 128) lastReportedEndpointTimeMs:*(void *)(a1 + 40) osdFeatures:*(double *)(a1 + 56) resultsCompletionHandler:*(double *)(*(void *)(a1 + 32) + 264)];
}

id sub_1000CDD00(uint64_t a1)
{
  return [*(id *)(a1 + 32) _shouldAcceptEagerResultForDuration:*(void *)(a1 + 40) asrFeatures:*(void *)(a1 + 48) lastReportedEndpointTimeMs:*(void *)(a1 + 56) osdFeatures:*(double *)(a1 + 64) resultsCompletionHandler:*(double *)(a1 + 72)];
}

id sub_1000CDD14(double *a1)
{
  BOOL v2 = (void *)*((void *)a1 + 4);
  uint64_t v1 = *((void *)a1 + 5);
  double v3 = a1[8];
  double v4 = a1[9];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1000CDD74;
  v7[3] = &unk_10022CAF0;
  uint64_t v5 = *((void *)a1 + 6);
  *(double *)&void v7[4] = a1[7];
  return [v2 _shouldAcceptEagerResultForDuration:v1 asrFeatures:v5 lastReportedEndpointTimeMs:v7 osdFeatures:v3 resultsCompletionHandler:v4];
}

uint64_t sub_1000CDD74(uint64_t result, int a2)
{
  if (a2) {
    *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  }
  return result;
}

void sub_1000CDD8C(void *a1)
{
  BOOL v2 = *(void **)(a1[4] + 408LL);
  if (v2)
  {
    double v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:a1[5]]);
    if (v3)
    {
      id v17 = v3;
      double v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:@"default-threshold-partial"]);
      [v4 floatValue];
      *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL) = v5;

      int v6 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKey:@"default-threshold-rc"]);
      [v6 floatValue];
      *(_DWORD *)(*(void *)(a1[7] + 8LL) + 24LL) = v7;

      unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKey:@"relaxed-threshold-partial"]);
      [v8 floatValue];
      *(_DWORD *)(*(void *)(a1[8] + 8LL) + 24LL) = v9;

      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKey:@"relaxed-threshold-rc"]);
      [v10 floatValue];
      *(_DWORD *)(*(void *)(a1[9] + 8LL) + 24LL) = v11;

      float v12 = *(float *)(*(void *)(a1[6] + 8LL) + 24LL);
      if (v12 > 0.0)
      {
        uint64_t v13 = *(void *)(a1[8] + 8LL);
      }

      float v14 = *(float *)(*(void *)(a1[7] + 8LL) + 24LL);
      double v3 = v17;
      if (v14 > 0.0)
      {
        uint64_t v15 = *(void *)(a1[9] + 8LL);
      }
    }
  }

  else
  {
    BOOL v16 = (os_log_s *)CSLogCategoryEP;
    if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v19 = "-[CSHybridEndpointer _processEnhancedEndpointerTaskString:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s No enhancedEndpointerTaskThresholdMap was found in csHepConfig",  buf,  0xCu);
    }
  }

void sub_1000CDF88(uint64_t a1)
{
  BOOL v2 = (os_log_s *)CSLogCategoryEP;
  if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315394;
    *(void *)&uint8_t buf[4] = "-[CSHybridEndpointer processTaskString:]_block_invoke";
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s %{public}@", buf, 0x16u);
  }

  if (*(void *)(a1 + 32))
  {
    if ([*(id *)(a1 + 40) _useEnhancedEndpointer])
    {
      [*(id *)(a1 + 40) _processEnhancedEndpointerTaskString:*(void *)(a1 + 32)];
    }

    else
    {
      *(void *)__int128 buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000LL;
      int v22 = 0;
      block[0] = _NSConcreteStackBlock;
      block[2] = sub_1000CE1E4;
      block[3] = &unk_10022D958;
      int v5 = *(void **)(a1 + 32);
      uint64_t v4 = *(void *)(a1 + 40);
      int v6 = *(dispatch_queue_s **)(v4 + 152);
      block[1] = 3221225472LL;
      void block[4] = v4;
      id v13 = v5;
      float v14 = buf;
      dispatch_async_and_wait(v6, block);
      if (*(float *)(*(void *)&buf[8] + 24LL) > 0.0)
      {
        objc_msgSend(*(id *)(a1 + 40), "updateEndpointerThreshold:");
        int v7 = (os_log_s *)CSLogCategoryEP;
        if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
        {
          double v8 = *(float *)(*(void *)&buf[8] + 24LL);
          uint64_t v9 = *(void *)(a1 + 32);
          *(_DWORD *)uint64_t v15 = 136315650;
          BOOL v16 = "-[CSHybridEndpointer processTaskString:]_block_invoke_2";
          __int16 v17 = 2050;
          double v18 = v8;
          __int16 v19 = 2114;
          uint64_t v20 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s update endpointer threshold to %{public}f for task %{public}@",  v15,  0x20u);
        }
      }

      _Block_object_dispose(buf, 8);
    }

    if (([*(id *)(a1 + 32) isEqualToString:@"accessible-maximum"] & 1) != 0
      || [*(id *)(a1 + 32) isEqualToString:@"accessible-extended"])
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) mhId]);
      +[CSEndpointLoggingHelper reportMHEndpointerAccessibleContextEventWithThresholdType:MhId:]( &OBJC_CLASS___CSEndpointLoggingHelper,  "reportMHEndpointerAccessibleContextEventWithThresholdType:MhId:",  v10,  v11);
    }
  }

void sub_1000CE1C4(_Unwind_Exception *a1)
{
}

void sub_1000CE1E4(void *a1)
{
  BOOL v2 = *(void **)(a1[4] + 248LL);
  if (v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:a1[5]]);

    if (v3)
    {
      id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 248) objectForKeyedSubscript:a1[5]]);
      [v5 floatValue];
      *(_DWORD *)(*(void *)(a1[6] + 8LL) + 24LL) = v4;
    }
  }

double sub_1000CE264(uint64_t a1)
{
  double result = *(double *)(*(void *)(a1 + 32) + 312LL);
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_1000CE278(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 19LL) = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(*(void *)(a1 + 32) + 11LL) = 1;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 160LL), *(id *)(a1 + 40));
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v2 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 216)];
  *(void *)(*(void *)(a1 + 32) + 192LL) = v3;
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(double *)(v4 + 208) >= 0.0)
  {
    int v7 = *(void **)(v4 + 184);
    double v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v7 addObject:v8];
  }

  else
  {
    *(void *)(v4 + 20_Block_object_dispose((const void *)(v1 - 80), 8) = v3;
    id v5 = (os_log_s *)CSLogCategoryEP;
    if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 19LL);
      int v11 = 136315394;
      float v12 = "-[CSHybridEndpointer processASRFeatures:fromServer:]_block_invoke_2";
      __int16 v13 = 1026;
      int v14 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s isASRFeatureFromServer = %{public}d",  (uint8_t *)&v11,  0x12u);
    }
  }

  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void **)(v9 + 216);
  *(void *)(v9 + 216) = v2;
}

void sub_1000CE3D8(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = *(void *)(*(void *)(a1 + 32) + 384LL);
  BOOL v2 = (void *)CSLogCategoryEP;
  if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    uint64_t v4 = v2;
    uint64_t Name = AFSpeechEndpointerOperationModeGetName(v3);
    int v6 = (void *)objc_claimAutoreleasedReturnValue(Name);
    int v7 = 136315394;
    double v8 = "-[CSHybridEndpointer fetchCurrentEndpointerOperationMode]_block_invoke";
    __int16 v9 = 2114;
    uint64_t v10 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s current EndpointerOperationMode : %{public}@",  (uint8_t *)&v7,  0x16u);
  }

void sub_1000CE4C8(uint64_t a1)
{
  uint64_t Name = AFSpeechEndpointerOperationModeGetName(*(void *)(a1 + 40));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(Name);
  uint64_t v4 = (os_log_s *)CSLogCategoryEP;
  if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315394;
    int v7 = "-[CSHybridEndpointer setEndpointerOperationMode:]_block_invoke";
    __int16 v8 = 2114;
    __int16 v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s setEndpointerOperationMode : %{public}@",  (uint8_t *)&v6,  0x16u);
  }

  *(void *)(*(void *)(a1 + 32) + 384LL) = *(void *)(a1 + 40);
  if (*(void *)(a1 + 40) == 1LL)
  {
    id v5 = (os_log_s *)CSLogCategoryEP;
    if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      int v7 = "-[CSHybridEndpointer setEndpointerOperationMode:]_block_invoke";
      __int16 v8 = 2112;
      __int16 v9 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s endpointerOperationMode has been set to %@, stopping endpointer",  (uint8_t *)&v6,  0x16u);
    }

    [*(id *)(a1 + 32) stopEndpointer];
  }
}

void sub_1000CE610(uint64_t a1)
{
  BOOL v2 = (os_log_s *)CSLogCategoryEP;
  if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    int v4 = 136315394;
    id v5 = "-[CSHybridEndpointer updateEndpointerDelayedTrigger:]_block_invoke";
    __int16 v6 = 1026;
    int v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Updated endpointer delayed trigger: %{public}d",  (uint8_t *)&v4,  0x12u);
  }

uint64_t sub_1000CE6F4(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 240LL);
  return result;
}

double sub_1000CE708(uint64_t a1, double a2, double a3, double a4, double a5)
{
  LODWORD(a2) = *(_DWORD *)(a1 + 40);
  LODWORD(a3) = *(_DWORD *)(a1 + 44);
  LODWORD(a4) = *(_DWORD *)(a1 + 48);
  LODWORD(a5) = *(_DWORD *)(a1 + 52);
  [*(id *)(*(void *)(a1 + 32) + 392) updateDefaultThresholdPartial:a2 defaultThresholdRC:a3 relaxedThresholdPartial:a4 relaxedThresholdRC:a5];
  __int16 v6 = (os_log_s *)CSLogCategoryEP;
  if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
  {
    double v8 = *(float *)(a1 + 40);
    double v9 = *(float *)(a1 + 44);
    double v10 = *(float *)(a1 + 48);
    double v11 = *(float *)(a1 + 52);
    int v12 = 136316162;
    __int16 v13 = "-[CSHybridEndpointer updateEnhancedEndpointerDefaultThresholdPartial:defaultThresholdRC:relaxedThresholdPartia"
          "l:relaxedThresholdRC:]_block_invoke";
    __int16 v14 = 2050;
    double v15 = v8;
    __int16 v16 = 2050;
    double v17 = v9;
    __int16 v18 = 2050;
    double v19 = v10;
    __int16 v20 = 2050;
    double v21 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Updated enhanced endpointer defaultThresholdPartial: %{public}f, defaultThresholdRC: %{public}f, relaxedThresho ldPartial: %{public}f, relaxedThresholdRC: %{public}f",  (uint8_t *)&v12,  0x34u);
  }

  return result;
}

double sub_1000CE800(uint64_t a1, double a2)
{
  LODWORD(a2) = *(_DWORD *)(a1 + 40);
  [*(id *)(*(void *)(a1 + 32) + 136) updateEndpointerThresholdWithValue:a2];
  int v3 = (os_log_s *)CSLogCategoryEP;
  if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = *(float *)(a1 + 40);
    int v6 = 136315394;
    int v7 = "-[CSHybridEndpointer updateEndpointerThreshold:]_block_invoke";
    __int16 v8 = 2050;
    double v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Updated endpointer threshold: %{public}f",  (uint8_t *)&v6,  0x16u);
  }

  return result;
}

void sub_1000CE8CC(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 32);
  if (v2[15]
    || (int v3 = (void *)objc_claimAutoreleasedReturnValue( +[CSEndpointerAssetManager sharedManager]( CSEndpointerAssetManager,  "sharedManager")),  v4 = (void *)objc_claimAutoreleasedReturnValue([v3 getCurrentEndpointerAsset]),  objc_msgSend(v2, "_updateCurrentAsset:", v4),  v4,  v3,  *(void *)(*(void *)(a1 + 32) + 120)))
  {
    double v5 = objc_alloc(&OBJC_CLASS____EAREndpointer);
    int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) path]);
    id v13 = 0LL;
    int v7 = -[_EAREndpointer initWithConfiguration:modelVersion:](v5, "initWithConfiguration:modelVersion:", v6, &v13);
    id v8 = v13;

    if (!v8)
    {
      double v9 = (void *)objc_claimAutoreleasedReturnValue(+[CSDiagnosticReporter sharedInstance](&OBJC_CLASS___CSDiagnosticReporter, "sharedInstance"));
      [v9 submitEndpointerIssueReport:kCSDiagnosticReporterEndpointerModelVersionIsNil];

      double v10 = (os_log_s *)CSLogCategoryEP;
      if (os_log_type_enabled(CSLogCategoryEP, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int128 buf = 136315138;
        double v15 = "-[CSHybridEndpointer endpointerModelVersion]_block_invoke";
        _os_log_fault_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_FAULT,  "%s endpointerModelVersion is still nil after fetching it from EAREndpointer",  buf,  0xCu);
      }
    }

    uint64_t v11 = *(void *)(a1 + 32);
    int v12 = *(void **)(v11 + 144);
    *(void *)(v11 + 144) = v8;
  }

void sub_1000CEA58(uint64_t a1)
{
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSEndpointerAssetManager sharedManager](&OBJC_CLASS___CSEndpointerAssetManager, "sharedManager"));
  [v2 addObserver:*(void *)(a1 + 32)];

  if (+[CSUtils isMedocFeatureEnabled](&OBJC_CLASS___CSUtils, "isMedocFeatureEnabled"))
  {
    int v3 = *(void **)(a1 + 32);
    id v5 = (id)objc_claimAutoreleasedReturnValue(+[CSEndpointerAssetManager sharedManager](&OBJC_CLASS___CSEndpointerAssetManager, "sharedManager"));
    int v4 = (void *)objc_claimAutoreleasedReturnValue([v5 getCurrentEndpointerAsset]);
    [v3 _updateCurrentAsset:v4];
  }

void sub_1000CFA48(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        int v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "audioRecorderDidStopRecord:audioStreamHandleId:reason:") & 1) != 0) {
          objc_msgSend( v7,  "audioRecorderDidStopRecord:audioStreamHandleId:reason:",  *(void *)(a1 + 32),  1,  1,  (void)v8);
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_1000CFB78(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 32LL) = fopen("/var/mobile/darwin_test.wav", "rb");
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(FILE **)(v2 + 32);
  if (v3)
  {
    fseek(v3, 44LL, 0);
    uint64_t v2 = *(void *)(a1 + 32);
  }

  dispatch_source_t v4 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(v2 + 8));
  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(void **)(v5 + 24);
  *(void *)(v5 + 24) = v4;

  dispatch_source_set_timer(*(dispatch_source_t *)(*(void *)(a1 + 32) + 24LL), 0LL, 0x2625A00uLL, 0x5F5E100uLL);
  objc_initWeak(&location, *(id *)(a1 + 32));
  int v7 = *(dispatch_source_s **)(*(void *)(a1 + 32) + 24LL);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_1000CFDF0;
  handler[3] = &unk_10022E920;
  objc_copyWeak(&v18, &location);
  dispatch_source_set_event_handler(v7, handler);
  dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 32) + 24LL));
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v8 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v9 = [v8 countByEnumeratingWithState:&v13 objects:v20 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v14;
    do
    {
      for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v10) {
          objc_enumerationMutation(v8);
        }
        int v12 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v12, "audioRecorderDidStartRecord:audioStreamHandleId:successfully:error:") & 1) != 0) {
          objc_msgSend( v12,  "audioRecorderDidStartRecord:audioStreamHandleId:successfully:error:",  *(void *)(a1 + 32),  1,  1,  0,  (void)v13);
        }
      }

      id v9 = [v8 countByEnumeratingWithState:&v13 objects:v20 count:16];
    }

    while (v9);
  }

  objc_destroyWeak(&v18);
  objc_destroyWeak(&location);
}

void sub_1000CFDC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id location)
{
}

void sub_1000CFDF0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _readAudioBufferAndFeed];
}

id sub_1000CFE1C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) removeObject:*(void *)(a1 + 40)];
}

id sub_1000CFE30(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) addObject:*(void *)(a1 + 40)];
}

void sub_1000D0898( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1000D0FD4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2[5])
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _speechProfileSiteManager]);
    uint64_t v5 = objc_opt_class(&OBJC_CLASS___CESRSpeechProfileSiteResolver, v4);
    char isKindOfClass = objc_opt_isKindOfClass(v3, v5);

    if ((isKindOfClass & 1) != 0)
    {
      id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechProfileSiteManager]);
      [v7 handleSiteUnavailableSoonForPersona:*(void *)(a1 + 40)];
    }
  }

void sub_1000D106C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2[5])
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _speechProfileSiteManager]);
    uint64_t v5 = objc_opt_class(&OBJC_CLASS___CESRSpeechProfileSiteResolver, v4);
    char isKindOfClass = objc_opt_isKindOfClass(v3, v5);

    if ((isKindOfClass & 1) != 0)
    {
      id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechProfileSiteManager]);
      [v7 handleSiteUnavailableForPersona:*(void *)(a1 + 40)];
    }
  }

void sub_1000D1104(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechProfileSiteManager]);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___CESRSpeechProfileSiteResolver, v3);
  char isKindOfClass = objc_opt_isKindOfClass(v2, v4);

  if ((isKindOfClass & 1) != 0)
  {
    id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechProfileSiteManager]);
    [v6 handleSiteAvailableForPersona:*(void *)(a1 + 40)];
  }

uint64_t sub_1000D1194(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315138;
    id v6 = "-[CSPDispatcher runMigration:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Performing post-upgrade speech profile migration.",  (uint8_t *)&v5,  0xCu);
  }

  +[CESRSpeechProfileBuilder deleteLegacyProfiles](&OBJC_CLASS___CESRSpeechProfileBuilder, "deleteLegacyProfiles");
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechProfileSiteManager]);
  [v3 performMaintenance:0];

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1000D1274(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315138;
    id v6 = "-[CSPDispatcher runMaintenanceWithShouldDefer:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Performing daily speech profile maintenance.",  (uint8_t *)&v5,  0xCu);
  }

  +[CESRSpeechProfileBuilder deleteInactiveSites](&OBJC_CLASS___CESRSpeechProfileBuilder, "deleteInactiveSites");
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechProfileSiteManager]);
  [v3 performMaintenance:*(void *)(a1 + 48)];

  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000D1354(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechProfileSiteManager]);
  [v1 handleSettingsChange];
}

void sub_1000D1384(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechProfileSiteManager]);
  [v1 handleAssetUpdate];
}

void sub_1000D13B4(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechProfileSiteManager]);
  [v1 handleSysdiagnoseStarted];
}

void sub_1000D13E4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 136315394;
    id v6 = "-[CSPDispatcher handleDarwinNotificationEventWithName:]_block_invoke_4";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Performing maintenance due to notification: %@",  (uint8_t *)&v5,  0x16u);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _speechProfileSiteManager]);
  [v4 performMaintenance:0];
}

uint64_t sub_1000D14B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000D14C8(uint64_t a1)
{
}

void sub_1000D14D0(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _adminServiceProvider]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000D1508(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechProfileSiteManager]);
  [v2 handleUpdatedSets:*(void *)(a1 + 40)];
}

void sub_1000D1548(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315394;
    uint64_t v8 = "-[CSPDispatcher setupXPCListeners]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Received Cascade change notification for sets: %@",  (uint8_t *)&v7,  0x16u);
  }

  int v5 = *(void **)(a1 + 32);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 allObjects]);
  [v5 _notifyChangeToSets:v6];
}

void sub_1000D16A8(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
  {
    int v15 = 136315138;
    __int128 v16 = "+[CSPDispatcher sharedDispatcher]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Starting up...", (uint8_t *)&v15, 0xCu);
  }

  uint64_t v4 = (objc_class *)objc_opt_class(*(void *)(a1 + 32), v3);
  int v5 = NSStringFromClass(v4);
  id v6 = objc_claimAutoreleasedReturnValue(v5);
  int v7 = (const char *)[v6 cStringUsingEncoding:4];
  dispatch_queue_attr_t v8 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  __int16 v9 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v8);
  dispatch_queue_attr_t v10 = dispatch_queue_attr_make_with_qos_class(v9, QOS_CLASS_UTILITY, 0);
  __int128 v11 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v10);
  dispatch_queue_t v12 = dispatch_queue_create(v7, v11);

  id v13 = -[CSPDispatcher _initWithQueue:](objc_alloc(&OBJC_CLASS___CSPDispatcher), "_initWithQueue:", v12);
  __int128 v14 = (void *)qword_10027FFB8;
  qword_10027FFB8 = (uint64_t)v13;
}

void sub_1000D23D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_1000D25D4(uint64_t a1)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 48LL);
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v20 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v13;
    *(void *)&__int128 v4 = 136315394LL;
    __int128 v11 = v4;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v2);
        }
        dispatch_queue_attr_t v8 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v8,  "didReceiveResultCandidateWithRequestId:rcId:inputOrigin:speechPackage:duration:taskName:") & 1) != 0)
        {
          __int16 v9 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = v11;
            double v17 = "-[CSAttSiriRCHandler processRCWithId:requestId:speechPackage:taskId:forceAccept:completionHandler:]_block_invoke";
            __int16 v18 = 2112;
            double v19 = v8;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Sending result candidate to receiver: %@",  buf,  0x16u);
          }

          objc_msgSend( v8,  "didReceiveResultCandidateWithRequestId:rcId:inputOrigin:speechPackage:duration:taskName:",  *(void *)(a1 + 40),  *(void *)(a1 + 72),  0,  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(double *)(a1 + 80),  v11,  (void)v12);
        }
      }

      id v5 = [v2 countByEnumeratingWithState:&v12 objects:v20 count:16];
    }

    while (v5);
  }

  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, void))(result + 16))(result, 0LL, 0LL, 0LL);
  }
  return result;
}

void sub_1000D2790(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if ((_DWORD)a2
    && (+[CSUtils isMedocFeatureEnabled](&OBJC_CLASS___CSUtils, "isMedocFeatureEnabled") & 1) == 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 32LL));
    *(_BYTE *)(*(void *)(a1[7] + 8) + 24) = [WeakRetained getMitigationDecisionForRCId:a1[8] forRequestId:a1[5]];
  }

  int v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(*(void *)(a1[7] + 8LL) + 24LL);
    int v10 = 136315650;
    __int128 v11 = "-[CSAttSiriRCHandler processRCWithId:requestId:speechPackage:taskId:forceAccept:completionHandler:]_block_invoke";
    __int16 v12 = 1024;
    int v13 = a2;
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s shouldAccept = %d, isMitigated = %d",  (uint8_t *)&v10,  0x18u);
  }

  uint64_t v9 = a1[6];
  if (v9) {
    (*(void (**)(uint64_t, uint64_t, void, id))(v9 + 16))( v9,  a2,  *(unsigned __int8 *)(*(void *)(a1[7] + 8LL) + 24LL),  v5);
  }
}

id sub_1000D28D4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 48) addObject:*(void *)(a1 + 40)];
}

LABEL_36:
}

void sub_1000D5060(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  if ((void *)v2[12] == v3)
  {
    [v2 _handleAFTMResults:*(void *)(a1 + 48)];
    id v5 = (void *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void **)(a1 + 48);
      int v7 = v5;
      id v8 = [v6 analyzedSamples];
      [*(id *)(a1 + 48) score];
      int v10 = 136315650;
      __int128 v11 = "-[CSAttSiriAFTMNode analyzer:hasPartialResult:]_block_invoke";
      __int16 v12 = 2048;
      id v13 = v8;
      __int16 v14 = 2048;
      double v15 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s PARTIAL: Analyzed samples: %lu, score: %f",  (uint8_t *)&v10,  0x20u);
    }
  }

  else
  {
    __int128 v4 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315394;
      __int128 v11 = "-[CSAttSiriAFTMNode analyzer:hasPartialResult:]_block_invoke";
      __int16 v12 = 2114;
      id v13 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Invalid Analyzer: %{public}@",  (uint8_t *)&v10,  0x16u);
    }
  }

void sub_1000D51D0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  if ((void *)v2[12] == v3)
  {
    [v2 _handleAFTMResults:*(void *)(a1 + 48)];
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void **)(v5 + 96);
    *(void *)(v5 + 96) = 0LL;

    int v7 = (void *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = *(void **)(a1 + 48);
      float v9 = v7;
      id v10 = [v8 analyzedSamples];
      [*(id *)(a1 + 48) score];
      int v12 = 136315650;
      id v13 = "-[CSAttSiriAFTMNode analyzer:hasFinalResult:]_block_invoke";
      __int16 v14 = 2048;
      id v15 = v10;
      __int16 v16 = 2048;
      double v17 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s FINAL: Analyzed samples: %lu, score: %f",  (uint8_t *)&v12,  0x20u);
    }
  }

  else
  {
    __int128 v4 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_INFO))
    {
      int v12 = 136315394;
      id v13 = "-[CSAttSiriAFTMNode analyzer:hasFinalResult:]_block_invoke";
      __int16 v14 = 2114;
      id v15 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Invalid Analyzer: %{public}@",  (uint8_t *)&v12,  0x16u);
    }
  }

id sub_1000D5350(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reset];
}

id sub_1000D5358(uint64_t a1)
{
  return [*(id *)(a1 + 32) _addAudio:*(void *)(a1 + 40)];
}

id sub_1000D5364(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reset];
}

id sub_1000D536C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _addAudio:*(void *)(a1 + 40)];
}

void sub_1000D5378(void *a1)
{
  id v2 = (void *)a1[4];
  if (v2[6])
  {
    objc_msgSend(v2, "_startRequestWithContext:withVtei:withVTAssets:taskType:withRequestId:completion:", a1[5], a1[6]);
  }

  else
  {
    id v3 = objc_alloc(&OBJC_CLASS___NSError);
    __int128 v4 = -[NSError initWithDomain:code:userInfo:](v3, "initWithDomain:code:userInfo:", CSErrorDomain, 1601LL, 0LL);
    uint64_t v5 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315138;
      int v7 = "-[CSAttSiriAFTMNode startRequestWithContext:withVtei:taskType:withRequestId:completion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Prefetched asset not set",  (uint8_t *)&v6,  0xCu);
    }

    (*(void (**)(void))(a1[9] + 16LL))();
  }

id sub_1000D54B0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startRequestWithContext:*(void *)(a1 + 40) withVtei:*(void *)(a1 + 48) withVTAssets:*(void *)(a1 + 56) taskType:*(void *)(a1 + 64) withRequestId:*(void *)(a1 + 72) completion:*(void *)(a1 + 80)];
}

void sub_1000D54C8(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategorySDSD;
  if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v4 = 136315394;
    uint64_t v5 = "-[CSAttSiriAFTMNode setPrefetchedAsset:]_block_invoke";
    __int16 v6 = 2112;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s setting prefetched asset %@",  (uint8_t *)&v4,  0x16u);
  }

id sub_1000D558C(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategorySDSD;
  if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[CSAttSiriAFTMNode stop]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  return [*(id *)(a1 + 32) _reset];
}

id sub_1000D563C()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___CSCoreSpeechServiceListenerDelegate));
  v14[0] = objc_opt_class(&OBJC_CLASS___NSArray, v1);
  v14[1] = objc_opt_class(&OBJC_CLASS___NSURL, v2);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v14, 2LL));
  int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v3));
  [v0 setClasses:v4 forSelector:"setDelayInterstitialSounds:level:completion:" argumentIndex:0 ofReply:0];

  uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSString, v5);
  __int16 v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v13, 1LL));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v6));
  [v0 setClasses:v7 forSelector:"getVoiceTriggerRTModelRequestOptionsWithEndpointId:completion:" argumentIndex:0 ofReply:0];

  uint64_t v12 = objc_opt_class(&OBJC_CLASS___CSVoiceTriggerRTModelRequestOptions, v8);
  float v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v12, 1LL));
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v9));
  [v0 setClasses:v10 forSelector:"getVoiceTriggerRTModelRequestOptionsWithEndpointId:completion:" argumentIndex:0 ofReply:1];

  return v0;
}

uint64_t sub_1000D63A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000D63B8(uint64_t a1)
{
}

void sub_1000D63C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v2 + 73))
  {
    [*(id *)(v2 + 64) removeAllObjects];
    *(_BYTE *)(*(void *)(a1 + 32) + 73LL) = 0;
    uint64_t v2 = *(void *)(a1 + 32);
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), *(id *)(v2 + 64));
}

void sub_1000D640C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v2 + 72))
  {
    [*(id *)(v2 + 56) removeAllObjects];
    *(_BYTE *)(*(void *)(a1 + 32) + 72LL) = 0;
    uint64_t v2 = *(void *)(a1 + 32);
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), *(id *)(v2 + 56));
}

uint64_t sub_1000D6458(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 72LL) = 1;
  *(_BYTE *)(*(void *)(result + 32) + 73LL) = 1;
  return result;
}

void sub_1000D6470(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v2 + 72))
  {
    [*(id *)(v2 + 56) removeAllObjects];
    *(_BYTE *)(*(void *)(a1 + 32) + 72LL) = 0;
    uint64_t v2 = *(void *)(a1 + 32);
  }

  if (*(_BYTE *)(v2 + 73))
  {
    [*(id *)(v2 + 64) removeAllObjects];
    *(_BYTE *)(*(void *)(a1 + 32) + 73LL) = 0;
  }

  if (*(void *)(a1 + 40) && (unint64_t)[*(id *)(*(void *)(a1 + 32) + 56) count] <= 0xC7)
  {
    uint64_t v3 = kVTEIrecognizerScore;
    int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:kVTEIrecognizerScore]);
    if (v4)
    {
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v3]);
      [v5 floatValue];
      int v7 = v6;
    }

    else
    {
      int v7 = -998637568;
    }

    uint64_t v8 = kVTEItriggerScore;
    float v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:kVTEItriggerScore]);
    if (v9)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v8]);
      [v10 floatValue];
      int v12 = v11;
    }

    else
    {
      int v12 = -998637568;
    }

    uint64_t v13 = kVTEIthreshold;
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:kVTEIthreshold]);
    if (v14)
    {
      id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v13]);
      [v15 floatValue];
      int v17 = v16;
    }

    else
    {
      int v17 = -998637568;
    }

    uint64_t v18 = kVTEItdsrCombinedThreshold;
    double v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:kVTEItdsrCombinedThreshold]);
    if (v19)
    {
      __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v18]);
      [v20 floatValue];
      int v22 = v21;
    }

    else
    {
      int v22 = -998637568;
    }

    uint64_t v23 = kVTEIfirstPassChannelSelectionScores;
    uint64_t v24 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:kVTEIfirstPassChannelSelectionScores]);
    uint64_t v114 = v8;
    if (v24
      && (uint64_t v25 = (void *)v24,
          id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v23]),
          v25,
          v26))
    {
      uint64_t v27 = kVTEIfirstPassMasterChannelScoreBoost;
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:kVTEIfirstPassMasterChannelScoreBoost]);
      if (v28)
      {
        id v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v27]);
        [v29 floatValue];
        float v31 = v30;
      }

      else
      {
        float v31 = 0.0;
      }

      uint64_t v33 = kVTEIactiveChannel;
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:kVTEIactiveChannel]);
      if (v34)
      {
        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v33]);
        id v36 = [v35 unsignedIntegerValue];
      }

      else
      {
        id v36 = 0LL;
      }

      double v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"ch%tu", v36));
      double v38 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKeyedSubscript:v37]);
      if (v38)
      {
        int v39 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKeyedSubscript:v37]);
        [v39 floatValue];
        float v41 = v40;
      }

      else
      {
        float v41 = -1000.0;
      }

      float v42 = 0.0;
      if (!v36) {
        float v42 = v31;
      }
      float v32 = v41 - v42;
    }

    else
    {
      float v32 = -1000.0;
    }

    __int16 v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:kVTEILosingPhraseScores]);
    os_log_type_t v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:kVTEITriggeredPhId]);
    id v45 = [v44 integerValue];

    LODWORD(v46) = v7;
    double v47 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v46));
    LODWORD(v4_Block_object_dispose(va, 8) = v12;
    __int16 v49 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v48));
    LODWORD(v50) = v17;
    uint64_t v51 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v50));
    LODWORD(v52) = v22;
    __int16 v116 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v52));
    int v54 = CSIsHorseman(v116, v53);
    double v105 = v43;
    if (v45)
    {
      if (v54)
      {
        *(float *)&double v55 = v32;
        float v111 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v55));
        if (v43)
        {
LABEL_37:
          if ([v43 count]) {
            id v56 = (void *)objc_claimAutoreleasedReturnValue([v43 objectAtIndex:0]);
          }
          else {
            id v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionary](&OBJC_CLASS___NSDictionary, "dictionary"));
          }
          uint64_t v60 = v56;
          int v61 = (void *)objc_claimAutoreleasedReturnValue([v56 objectForKeyedSubscript:v3]);
          if (v61) {
            id v62 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue([v60 objectForKeyedSubscript:v3]);
          }
          else {
            id v62 = &off_1002398E0;
          }

          unint64_t v63 = (void *)objc_claimAutoreleasedReturnValue([v60 objectForKeyedSubscript:v114]);
          if (v63)
          {
            uint64_t v59 = &off_1002398E0;
            v108 = v49;
            double v109 = v116;
            uint64_t v107 = (_UNKNOWN **)v51;
            double v110 = v47;
            __int16 v116 = &off_1002398E0;
            float v112 = &off_1002398E0;
            __int16 v49 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue([v60 objectForKeyedSubscript:v114]);
          }

          else
          {
            v108 = v49;
            double v109 = v116;
            uint64_t v107 = (_UNKNOWN **)v51;
            double v110 = v47;
            __int16 v116 = &off_1002398E0;
            uint64_t v59 = &off_1002398E0;
            float v112 = &off_1002398E0;
            __int16 v49 = &off_1002398E0;
          }

          double v47 = v62;
          float v58 = &off_100238AF0;
LABEL_63:

          goto LABEL_64;
        }
      }

      else
      {
        float v111 = &off_1002398E0;
        if (v43) {
          goto LABEL_37;
        }
      }

      float v58 = &off_100238AF0;
      v108 = v49;
      double v109 = v116;
      uint64_t v107 = (_UNKNOWN **)v51;
      double v110 = v47;
      __int16 v116 = &off_1002398E0;
      uint64_t v59 = &off_1002398E0;
      __int16 v49 = &off_1002398E0;
      float v112 = &off_1002398E0;
      double v47 = &off_1002398E0;
LABEL_64:
      double v115 = v47;
      uint64_t v65 = kVTEIfirstPassTriggerSource;
      uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:kVTEIfirstPassTriggerSource]);
      uint64_t v113 = v49;
      if (v66)
      {
        id v67 = *(void **)(a1 + 32);
        BOOL v68 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v65]);
        id v69 = [v67 _convertToFirstPassSource:v68];
      }

      else
      {
        id v69 = 0LL;
      }

      float v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v69));
      uint64_t v70 = kVTEItdsrCombinedScore;
      uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:kVTEItdsrCombinedScore]);
      if (v71)
      {
        id v72 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v70]);
        [v72 floatValue];
        int v74 = v73;
      }

      else
      {
        int v74 = -998637568;
      }

      uint64_t v77 = CSIsIOS(v75, v76);
      if ((v77 & 1) != 0 || CSIsASMacWithAOP(v77, v78))
      {
        LODWORD(v79) = v74;
        double v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v79));
      }

      else
      {
        double v80 = 0LL;
      }

      uint64_t v81 = kVTEIconfigVersion;
      int v82 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:kVTEIconfigVersion]);
      if (v82) {
        id v83 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v81]);
      }
      else {
        id v83 = &stru_10022F858;
      }

      uint64_t v84 = kVTEIhardwareSamplerate;
      uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:kVTEIhardwareSamplerate]);
      if (v85)
      {
        id v86 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v84]);
        [v86 floatValue];
        int v88 = v87;
      }

      else
      {
        int v88 = 1182400512;
      }

      LODWORD(v89) = v88;
      id v90 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v89));
      id v91 = objc_alloc(&OBJC_CLASS___BMSiriVoiceTriggerStatistics);
      uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      id v93 = v59;
      id v94 = [v91 initWithAbsoluteTimestamp:v92 firstPassPeakScoreHS:v112 firstPassPeakScoreJS:v111 firstPassTriggerSource:v106 recognizerScore HS:v115 recognizerScoreJS:v110 triggerScoreHS:v113 triggerScoreJS:v108 mitigationScore:0 invocationTypeID:v58 repetitionSimilaritySc ore:0 tdSpeakerRecognizerCombinedScore:v80 hwSampleRate:v90 configVersion:v83 keywordThresholdHS:v59 keywordThresholdJS:v107 tdSp eakerRecognizerCombinedThresholdHS:v116 tdSpeakerRecognizerCombinedThresholdJS:v109];

      uint64_t v95 = BiomeLibrary();
      uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue(v95);
      uint64_t v97 = (void *)objc_claimAutoreleasedReturnValue([v96 Siri]);
      uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue([v97 VoiceTriggerStatistics]);

      uint64_t v99 = (void *)objc_claimAutoreleasedReturnValue([v98 source]);
      uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v99 sendEvent:v94];
      double v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      double v102 = (void *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
        int v103 = v102;
        [v101 timeIntervalSinceDate:v100];
        *(_DWORD *)__int128 buf = 136315394;
        uint64_t v118 = "-[CSVoiceTriggerStatistics updateVTEstimationStatistics:]_block_invoke";
        __int16 v119 = 2050;
        uint64_t v120 = v104;
        _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEFAULT,  "%s BMSource sentEvent elapsed time = %{public}lf",  buf,  0x16u);
      }

      return;
    }

    if (v54)
    {
      *(float *)&double v55 = v32;
      float v112 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v55));
      if (v43)
      {
LABEL_41:
        else {
          float v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionary](&OBJC_CLASS___NSDictionary, "dictionary"));
        }
        uint64_t v60 = v57;
        double v64 = (void *)objc_claimAutoreleasedReturnValue([v57 objectForKeyedSubscript:v3]);
        if (v64) {
          double v110 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue([v60 objectForKeyedSubscript:v3]);
        }
        else {
          double v110 = &off_1002398E0;
        }
        uint64_t v59 = (_UNKNOWN **)v51;

        unint64_t v63 = (void *)objc_claimAutoreleasedReturnValue([v60 objectForKeyedSubscript:v114]);
        if (v63)
        {
          float v58 = &off_100238AD8;
          uint64_t v107 = &off_1002398E0;
          v108 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue([v60 objectForKeyedSubscript:v114]);
        }

        else
        {
          float v58 = &off_100238AD8;
          uint64_t v107 = &off_1002398E0;
          v108 = &off_1002398E0;
        }

        double v109 = &off_1002398E0;
        float v111 = &off_1002398E0;
        goto LABEL_63;
      }
    }

    else
    {
      float v112 = &off_1002398E0;
      if (v43) {
        goto LABEL_41;
      }
    }

    float v58 = &off_100238AD8;
    uint64_t v107 = &off_1002398E0;
    v108 = &off_1002398E0;
    double v109 = &off_1002398E0;
    double v110 = &off_1002398E0;
    float v111 = &off_1002398E0;
    uint64_t v59 = (_UNKNOWN **)v51;
    goto LABEL_64;
  }

uint64_t sub_1000D6EB0(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 32LL);
  return result;
}

uint64_t sub_1000D6EC4(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 32LL) = 0LL;
  return result;
}

uint64_t sub_1000D6ED0(uint64_t result)
{
  return result;
}

uint64_t sub_1000D6EE4(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 24LL);
  return result;
}

uint64_t sub_1000D6EF8(uint64_t result)
{
  return result;
}

uint64_t sub_1000D6F0C(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = *(void *)(*(void *)(result + 32) + 8LL);
  return result;
}

uint64_t sub_1000D6F20(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 8LL) = 0LL;
  return result;
}

uint64_t sub_1000D6F2C(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + ++*(void *)(*(void *)(result + 32) + 24LL) = 0LL;
  return result;
}

uint64_t sub_1000D6F48(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 4+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0LL;
  return result;
}

void sub_1000D6F54(uint64_t a1)
{
  if (++*(void *)(*(void *)(a1 + 32) + 40LL) >= 0x12CuLL)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSDiagnosticReporter sharedInstance](&OBJC_CLASS___CSDiagnosticReporter, "sharedInstance"));
    [v2 submitSiriPowerIssueReport:kCSDiagnosticReporterConsectiveFalseFirstPassTriggers];

    *(void *)(*(void *)(a1 + 32) + 4+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0LL;
  }

void sub_1000D6FC0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[CSVoiceTriggerStatistics init]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Hour power timer fired",  (uint8_t *)&v4,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained clearFalseFirstPassTriggersPerHour];
}

void sub_1000D70BC(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSVoiceTriggerStatistics);
  uint64_t v2 = (void *)qword_10027FFC8;
  qword_10027FFC8 = (uint64_t)v1;
}

id sub_1000D7898(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[CSEndpointDetectedSelfLogger siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEven"
         "tUUID:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  id result = [*(id *)(a1 + 40) disableLocalSpeechRecognizer];
  *(_BYTE *)(*(void *)(a1 + 32) + ++*(void *)(*(void *)(result + 32) + 8LL) = (_BYTE)result;
  return result;
}

id sub_1000D7950(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[CSEndpointDetectedSelfLogger siriClientBehaviorMonitor:willStartStreamWithContext:option:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  id result = [*(id *)(a1 + 40) disableLocalSpeechRecognizer];
  *(_BYTE *)(*(void *)(a1 + 32) + ++*(void *)(*(void *)(result + 32) + 8LL) = (_BYTE)result;
  return result;
}

void sub_1000D7A08(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[CSEndpointDetectedSelfLogger didCompleteRecognitionTaskWithStatistics:requestId:endpointMode:error:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(v3 + 48))
  {
    if (!*(_BYTE *)(v3 + 9)) {
      +[CSEndpointDetectedSelfLogger emitEndpointDetectedEventWithEndpointerMetrics:withEndpointerModelType:withTrpId:withMhID:]( &OBJC_CLASS___CSEndpointDetectedSelfLogger,  "emitEndpointDetectedEventWithEndpointerMetrics:withEndpointerModelType:withTrpId:withMhID:");
    }
  }

void sub_1000D7ADC(void *a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[CSEndpointDetectedSelfLogger attSiriNode:selectedTRPId:withMetrics:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  uint64_t v3 = a1[4];
  if (!*(_BYTE *)(v3 + 9))
  {
    *(_BYTE *)(v3 + 9) = 1;
    +[CSEndpointDetectedSelfLogger emitEndpointDetectedEventWithEndpointerMetrics:withEndpointerModelType:withTrpId:withMhID:]( &OBJC_CLASS___CSEndpointDetectedSelfLogger,  "emitEndpointDetectedEventWithEndpointerMetrics:withEndpointerModelType:withTrpId:withMhID:",  a1[5],  1LL,  a1[6],  *(void *)(a1[4] + 16LL));
  }

void sub_1000D7BB4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    int v4 = "-[CSEndpointDetectedSelfLogger attSiriNode:didDetectEndpointEventAtTime:eventType:withMetrics:useEndpointerSign"
         "al:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v3, 0xCu);
  }

  if (*(void *)(a1 + 48) == 2LL) {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 48LL), *(id *)(a1 + 40));
  }
}

void sub_1000D7C74(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[CSEndpointDetectedSelfLogger attSiriNode:didDetectHardEndpointAtTime:withMetrics:usesAutomaticEndPointing:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v3 + 8)) {
    +[CSEndpointDetectedSelfLogger emitEndpointDetectedEventWithEndpointerMetrics:withEndpointerModelType:withTrpId:withMhID:]( &OBJC_CLASS___CSEndpointDetectedSelfLogger,  "emitEndpointDetectedEventWithEndpointerMetrics:withEndpointerModelType:withTrpId:withMhID:",  *(void *)(a1 + 40),  1LL,  0LL,  *(void *)(v3 + 16));
  }
}

void sub_1000D7D44(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    int v6 = "-[CSEndpointDetectedSelfLogger reset]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v5, 0xCu);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 0;
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(void **)(v3 + 48);
  *(void *)(v3 + 4_Block_object_dispose(va, 8) = 0LL;
}

id sub_1000D7E04(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    int v5 = "-[CSEndpointDetectedSelfLogger registerEndpointerNode:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  return objc_storeWeak((id *)(*(void *)(a1 + 32) + 24LL), *(id *)(a1 + 40));
}

id sub_1000D7EB8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 40), "registerObserver:");
}

void sub_1000D8E38(id a1, CSAsset *a2, NSError *a3)
{
  int v4 = a3;
  int v5 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = v5;
    int v7 = (void *)objc_claimAutoreleasedReturnValue(-[CSAsset resourcePath](a2, "resourcePath"));
    int v8 = 136315650;
    float v9 = "-[CSOnDeviceCompilationRemoraConnectionHandler _addEndpointToCache:]_block_invoke";
    __int16 v10 = 2112;
    int v11 = v7;
    __int16 v12 = 2112;
    uint64_t v13 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s getting Remora asset at resource path %@ with error %@",  (uint8_t *)&v8,  0x20u);
  }
}

void sub_1000D9A14(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 40LL);
  if (v2 && [v2 fFile])
  {
    uint64_t v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      buf.mNumberBuffers = 136315138;
      *(void *)(&buf.mNumberBuffers + 1) = "-[CSAudioInjectionProviderExclave _readAudioBufferAndFeedIntoAudioQueue]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s AudioQueue call back is asking for audio, injected file has been found",  (uint8_t *)&buf,  0xCu);
    }

    uint64_t v4 = *(void *)(a1 + 32);
    if (!*(void *)(v4 + 24))
    {
      double v19 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR)) {
        return;
      }
      buf.mNumberBuffers = 136315138;
      *(void *)(&buf.mNumberBuffers + 1) = "-[CSAudioInjectionProviderExclave _readAudioBufferAndFeedIntoAudioQueue]_block_invoke";
      uint64_t v18 = "%s Failed to feed audio into exclave, unable to locate available audio queue";
      p_AudioBufferList buf = (uint8_t *)&buf;
      goto LABEL_52;
    }

    double v5 = *(double *)(v4 + 32);
    int v6 = *(void **)(v4 + 40);
    if (v6)
    {
      [v6 outASBD];
      uint64_t v4 = *(void *)(a1 + 32);
      int v7 = *(void **)(v4 + 40);
      double v8 = v5 * *(double *)&v63;
      if (v7)
      {
        [v7 outASBD];
        uint64_t v4 = *(void *)(a1 + 32);
        float v9 = *(void **)(v4 + 40);
        LODWORD(v10) = DWORD2(v61);
        double v11 = v8 * (double)v10;
        if (v9)
        {
          [v9 outASBD];
          uint64_t v4 = *(void *)(a1 + 32);
          LODWORD(v12) = HIDWORD(v58);
          double v13 = (double)v12;
          goto LABEL_20;
        }

void sub_1000DA034(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 56LL) = mach_absolute_time();
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 56LL);
    *(_DWORD *)AudioBufferList buf = 136315650;
    *(void *)&uint8_t buf[4] = "-[CSAudioInjectionProviderExclave speakAudioInExclave:withCompletion:]_block_invoke";
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v3;
    *(_WORD *)&buf[22] = 2048;
    *(void *)&_BYTE buf[24] = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Client request to speak audio into exclave with URL: %@ at time: %llu",  buf,  0x20u);
  }

  double v5 = objc_alloc(&OBJC_CLASS___CSAudioInjectionFileOption);
  int v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  if (v6)
  {
    [v6 _defaultOutASBD];
  }

  else
  {
    uint64_t v22 = 0LL;
    HIDWORD(v_Block_object_dispose(va, 8) = 0;
    memset(v21, 0, sizeof(v21));
  }

  LODWORD(v_Block_object_dispose(va, 8) = 1.0;
  float v9 = -[CSAudioInjectionFileOption initWithAudioURL:withScaleFactor:outASBD:]( v5,  "initWithAudioURL:withScaleFactor:outASBD:",  v7,  v21,  v8);
  unint64_t v10 = (const __CFURL *)objc_claimAutoreleasedReturnValue(-[CSAudioInjectionFileOption audioURL](v9, "audioURL"));
  OSStatus v11 = ExtAudioFileOpenURL(v10, &outExtAudioFile);

  if (v11)
  {
    unint64_t v12 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      double v13 = v12;
      __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(-[CSAudioInjectionFileOption audioURL](v9, "audioURL"));
      *(_DWORD *)AudioBufferList buf = 136315650;
      *(void *)&uint8_t buf[4] = "-[CSAudioInjectionProviderExclave speakAudioInExclave:withCompletion:]_block_invoke";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v14;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&_BYTE buf[24] = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%s Failed to open audio file %@, error : %d",  buf,  0x1Cu);

      if (v9) {
        goto LABEL_9;
      }
LABEL_11:
      uint64_t v24 = 0LL;
      memset(buf, 0, sizeof(buf));
      goto LABEL_12;
    }
  }

  if (!v9) {
    goto LABEL_11;
  }
LABEL_9:
  -[CSAudioInjectionFileOption outASBD](v9, "outASBD");
LABEL_12:
  ExtAudioFileSetProperty(outExtAudioFile, 0x63666D74u, 0x28u, buf);
  v18[0] = *(_OWORD *)buf;
  v18[1] = *(_OWORD *)&buf[16];
  uint64_t v19 = v24;
  -[CSAudioInjectionFileOption setOutASBD:](v9, "setOutASBD:", v18);
  -[CSAudioInjectionFileOption setFFile:](v9, "setFFile:", outExtAudioFile);
  [*(id *)(a1 + 32) setFileOption:v9];
  id v15 = objc_retainBlock(*(id *)(a1 + 48));
  uint64_t v16 = *(void *)(a1 + 32);
  int v17 = *(void **)(v16 + 48);
  *(void *)(v16 + 4_Block_object_dispose(va, 8) = v15;
}

id sub_1000DA294(uint64_t a1)
{
  return [*(id *)(a1 + 32) _prepareAndStartAudioQueue];
}

void sub_1000DA2FC(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSAudioInjectionProviderExclave);
  uint64_t v2 = (void *)qword_10027FFE0;
  qword_10027FFE0 = (uint64_t)v1;
}

LABEL_34:
      uint64_t v16 = (char *)v16 + 1;
      int v17 = v12;
      if (v46 == v16)
      {
        id v15 = [obj countByEnumeratingWithState:&v49 objects:v63 count:16];
        if (!v15) {
          goto LABEL_36;
        }
        goto LABEL_12;
      }
    }
  }

  double v13 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioBufferList buf = 136315650;
    *(void *)&uint8_t buf[4] = "-[CSP2PService _compressFilesInDirectory:matchingPredicate:sortedByCreationDate:compressedFileAvailable:]";
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v42;
    *(_WORD *)&buf[22] = 2112;
    uint64_t v65 = (uint64_t (*)(uint64_t, uint64_t))v12;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%s Cannot read contents of directory: %@, err: %@",  buf,  0x20u);
  }
}

LABEL_37:
}

void sub_1000DB058(_Unwind_Exception *a1)
{
}

LABEL_70:
}

void sub_1000DE278(_Unwind_Exception *a1)
{
}

void sub_1000DF050( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

LABEL_46:
            uint64_t v43 = v71;
            os_log_type_t v44 = v72;
            if (!v10)
            {
LABEL_73:

              UInt32 v23 = v73;
              goto LABEL_74;
            }

            OSStatus v45 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"CoreSpeech",  4LL,  0LL));
            (*((void (**)(id, void, id))v10 + 2))(v10, 0LL, v45);
LABEL_72:

            goto LABEL_73;
          }

          float v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
          UInt32 v33 = [v32 fileExistsAtPath:v29];

          uint64_t v34 = v29;
          if (v33)
          {
            int v35 = (os_log_s *)CSLogContextFacilityCoreSpeech;
            int v36 = v75;
            if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)AudioBufferList buf = 136315650;
              uint64_t v85 = "-[CSP2PService _processReverseTransferVoiceProfileCommandFromPeerId:requestInfo:withReply:]";
              id v86 = 2112;
              int v87 = (size_t)v34;
              int v88 = 2112;
              double v89 = v14;
              double v37 = "%s Ignoring sync of existing file %@ from %@";
              uint64_t v38 = v35;
              int v39 = 32;
LABEL_45:
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, v37, buf, v39);
              goto LABEL_46;
            }

            goto LABEL_46;
          }

          OSStatus v46 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"CSP2P_IsDataCompressed_Key"]);
          __int128 v47 = [v46 BOOLValue];

          __int128 v48 = v75;
          if ((v47 & 1) != 0)
          {
            os_log_type_t v44 = v72;
            uint64_t v49 = (size_t)[v72 length];
            src_buffer = (uint8_t *)[v72 bytes];
            int v50 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"CSP2P_UncompressedDataSize_Key"]);

            double v51 = v34;
            if (v50)
            {
              double v52 = v49;
              __int128 v53 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"CSP2P_UncompressedDataSize_Key"]);
              __int128 v54 = (size_t)[v53 integerValue];

              uint64_t v49 = v52;
            }

            else
            {
              __int128 v54 = 3 * v49;
            }

            __int128 v60 = (uint8_t *)malloc(v54);
            if (!v60)
            {
              __int16 v68 = (os_log_s *)CSLogContextFacilityCoreSpeech;
              if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioBufferList buf = 136315394;
                uint64_t v85 = "-[CSP2PService _processReverseTransferVoiceProfileCommandFromPeerId:requestInfo:withReply:]";
                id v86 = 2048;
                int v87 = v54;
                _os_log_error_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_ERROR,  "%s ERR: Failed to allocate buffer of size %zu, bailing out",  buf,  0x16u);
              }

              uint64_t v43 = v71;
              if (!v10)
              {
                OSStatus v45 = 0LL;
                goto LABEL_70;
              }

              int v82 = @"CSP2P_VoiceProfileStatus_Key";
              id v83 = &off_100238B50;
              id v67 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v83,  &v82,  1LL));
              uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"CoreSpeech",  10LL,  0LL));
              (*((void (**)(id, void *, void *))v10 + 2))(v10, v67, v69);

              OSStatus v45 = 0LL;
LABEL_69:

LABEL_70:
              uint64_t v34 = v51;
              int v36 = v75;
              goto LABEL_72;
            }

            __int128 v61 = v60;
            uint64_t v62 = +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v60,  compression_decode_buffer(v60, v54, src_buffer, v49, 0LL, COMPRESSION_LZFSE));
            OSStatus v45 = (id)objc_claimAutoreleasedReturnValue(v62);
            free(v61);
            uint64_t v34 = v51;
            __int128 v48 = v75;
          }

          else
          {
            __int128 v57 = (void *)CSLogContextFacilityCoreSpeech;
            os_log_type_t v44 = v72;
            if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
            {
              __int128 v58 = v57;
              uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"CSP2P_PeerIdentifier_Key"]);
              *(_DWORD *)AudioBufferList buf = 136315650;
              uint64_t v85 = "-[CSP2PService _processReverseTransferVoiceProfileCommandFromPeerId:requestInfo:withReply:]";
              id v86 = 2112;
              int v87 = (size_t)v34;
              int v88 = 2112;
              double v89 = v59;
              _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "%s Uncompressed file %@ sent by peer %@",  buf,  0x20u);
            }

            OSStatus v45 = v72;
          }

          uint64_t v76 = v48;
          __int128 v63 = [v45 writeToFile:v34 options:0 error:&v76];
          uint64_t v75 = v76;

          if ((v63 & 1) != 0)
          {
            if (v10)
            {
              double v51 = v34;
              uint64_t v78 = @"CSP2P_VoiceProfileStatus_Key";
              double v79 = &off_100238B38;
              __int128 v64 = &v79;
              uint64_t v65 = &v78;
LABEL_68:
              id v67 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v64,  v65,  1LL));
              (*((void (**)(id, void *, id))v10 + 2))(v10, v67, v75);
              uint64_t v43 = v71;
              goto LABEL_69;
            }
          }

          else
          {
            uint64_t v66 = (os_log_s *)CSLogContextFacilityCoreSpeech;
            if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)AudioBufferList buf = 136315650;
              uint64_t v85 = "-[CSP2PService _processReverseTransferVoiceProfileCommandFromPeerId:requestInfo:withReply:]";
              id v86 = 2112;
              int v87 = (size_t)v34;
              int v88 = 2112;
              double v89 = v75;
              _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "%s Writing to file(%@) failed!. Err=%@",  buf,  0x20u);
            }

            if (v10)
            {
              double v51 = v34;
              double v80 = @"CSP2P_VoiceProfileStatus_Key";
              uint64_t v81 = &off_100238B50;
              __int128 v64 = &v81;
              uint64_t v65 = &v80;
              goto LABEL_68;
            }
          }

          int v36 = v75;
          uint64_t v43 = v71;
          goto LABEL_72;
        }

        __int16 v20 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR)) {
          goto LABEL_19;
        }
        *(_DWORD *)AudioBufferList buf = 136315394;
        uint64_t v85 = "-[CSP2PService _processReverseTransferVoiceProfileCommandFromPeerId:requestInfo:withReply:]";
        id v86 = 2112;
        int v87 = (size_t)v9;
        uint64_t v41 = "%s ERR: received malformed command with profileId nil - %@";
      }

      else
      {
        __int16 v20 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
        {
LABEL_19:
          if (!v10) {
            goto LABEL_76;
          }
          uint64_t v19 = 3LL;
          goto LABEL_21;
        }

        *(_DWORD *)AudioBufferList buf = 136315394;
        uint64_t v85 = "-[CSP2PService _processReverseTransferVoiceProfileCommandFromPeerId:requestInfo:withReply:]";
        id v86 = 2112;
        int v87 = (size_t)v9;
        uint64_t v41 = "%s ERR: received malformed command with locale nil - %@";
      }

      _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, v41, buf, 0x16u);
      goto LABEL_19;
    }

    uint64_t v18 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      uint64_t v55 = v18;
      id v56 = objc_retainBlock(v10);
      *(_DWORD *)AudioBufferList buf = 136315906;
      uint64_t v85 = "-[CSP2PService _processReverseTransferVoiceProfileCommandFromPeerId:requestInfo:withReply:]";
      id v86 = 2112;
      int v87 = (size_t)v8;
      int v88 = 2112;
      double v89 = v56;
      id v90 = 2112;
      id v91 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_ERROR,  "%s ERR: unknown IDS peer with passed Identifier %@, %@ %@",  buf,  0x2Au);

      if (v10) {
        goto LABEL_17;
      }
    }

    else if (v10)
    {
LABEL_17:
      uint64_t v19 = 2LL;
LABEL_21:
      unint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"CoreSpeech",  v19,  0LL));
      (*((void (**)(id, void, void *))v10 + 2))(v10, 0LL, v21);
LABEL_75:

      goto LABEL_76;
    }

    __int16 v14 = 0LL;
    goto LABEL_76;
  }

  unint64_t v12 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioBufferList buf = 136315394;
    uint64_t v85 = "-[CSP2PService _processReverseTransferVoiceProfileCommandFromPeerId:requestInfo:withReply:]";
    id v86 = 2112;
    int v87 = (size_t)v8;
    _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%s ERR: Rejecting command %@ sent to Horseman device",  buf,  0x16u);
    if (!v10) {
      goto LABEL_77;
    }
    goto LABEL_4;
  }

  if (v10)
  {
LABEL_4:
    double v13 = 2LL;
LABEL_14:
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"CoreSpeech",  v13,  0LL));
    (*((void (**)(id, void, void *))v10 + 2))(v10, 0LL, v14);
LABEL_76:
  }

LABEL_77:
}

LABEL_3:
  float v9 = 0LL;
LABEL_6:

  return v9;
}

void sub_1000E1BD8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 URLsForDirectory:9 inDomains:1]);
  id v7 = (id)objc_claimAutoreleasedReturnValue([v3 lastObject]);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v7 path]);
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 stringByAppendingPathComponent:@"Logs/CoreSpeech/spid/grading"]);
  int v6 = (void *)qword_100280000;
  qword_100280000 = v5;

  [*(id *)(a1 + 32) _createDirectoryIfDoesNotExist:qword_100280000];
}

uint64_t sub_1000E1C84(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 path]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [v4 stringByReplacingOccurrencesOfString:@"-SL.json" withString:&stru_10022F858]);

  int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 lastPathComponent]);
  unsigned __int8 v7 = [v6 containsString:kCSAudioSyncedFileSuffix];

  if ((v7 & 1) != 0) {
    goto LABEL_2;
  }
  float v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 stringByAppendingString:@"-synced.wav"]);
  if ([v9 fileExistsAtPath:v10])
  {
  }

  else
  {
    OSStatus v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v5 stringByAppendingString:@".wav"]);
    unsigned int v13 = [v11 fileExistsAtPath:v12];

    if (!v13) {
      goto LABEL_2;
    }
  }

  if (([*(id *)(a1 + 32) isInternalWithoutProfile] & 1) != 0
    || (__int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v3 pathExtension]),
        unsigned __int8 v15 = [v14 isEqualToString:@"wav"],
        v14,
        (v15 & 1) != 0))
  {
    uint64_t v8 = 1LL;
    goto LABEL_9;
  }

LABEL_2:
  uint64_t v8 = 0LL;
LABEL_9:

  return v8;
}

    unsigned __int8 v7 = 0LL;
    goto LABEL_21;
  }

  float v9 = (void *)objc_claimAutoreleasedReturnValue([v3 pathExtension]);
  if ([v9 isEqualToString:@"spx"])
  {

    goto LABEL_13;
  }

  unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 pathExtension]);
  OSStatus v11 = [v10 isEqualToString:@"opx"];

  if ((v11 & 1) == 0) {
    goto LABEL_2;
  }
LABEL_13:
  unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v3 pathExtension]);
  unsigned int v13 = [v12 isEqualToString:@"json"];

  if (v13)
  {
    unsigned __int8 v7 = (uint64_t)[*(id *)(a1 + 32) isInternalWithoutProfile];
  }

  else
  {
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v3 pathExtension]);
    unsigned __int8 v15 = [v14 isEqualToString:@"wav"];

    if ((v15 & 1) != 0)
    {
      unsigned __int8 v7 = 1LL;
    }

    else
    {
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v3 pathExtension]);
      if ([v16 isEqualToString:@"spx"])
      {
        unsigned __int8 v7 = 1LL;
      }

      else
      {
        int v17 = (void *)objc_claimAutoreleasedReturnValue([v3 pathExtension]);
        unsigned __int8 v7 = (uint64_t)[v17 isEqualToString:@"opx"];
      }
    }
  }

void sub_1000E1DF8(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v13 = a2;
  id v14 = a3;
  unsigned __int8 v15 = a7;
  if (v15)
  {
    uint64_t v16 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315650;
      int v36 = "-[CSP2PService _sendAcousticGradingDataToPeerId:]_block_invoke_2";
      __int16 v37 = 2114;
      uint64_t v38 = (uint64_t)v13;
      __int16 v39 = 2114;
      float v40 = v15;
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s Failed in compressing %{public}@ with errror %{public}@ - Bailing out",  buf,  0x20u);
    }
  }

  else
  {
    int v17 = *(dispatch_semaphore_s **)(a1[4] + 48LL);
    dispatch_time_t v18 = dispatch_time(0LL, 60000000000LL);
    dispatch_semaphore_wait(v17, v18);
    uint64_t v19 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v20 = v19;
      uint64_t v21 = objc_claimAutoreleasedReturnValue([v13 lastPathComponent]);
      uint64_t v22 = (void *)v21;
      uint64_t v23 = a1[5];
      int v36 = "-[CSP2PService _sendAcousticGradingDataToPeerId:]_block_invoke";
      uint64_t v24 = @"OFF";
      __int16 v37 = 2112;
      *(_DWORD *)AudioBufferList buf = 136316162;
      if ((_DWORD)a6) {
        uint64_t v24 = @"ON";
      }
      uint64_t v38 = v21;
      __int16 v39 = 2114;
      float v40 = v24;
      __int16 v41 = 2048;
      uint64_t v42 = a5;
      __int16 v43 = 2114;
      uint64_t v44 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%s Transfering grading file %@ withCompression %{public}@ and size %ld in batch %{public}@",  buf,  0x34u);
    }

    uint64_t v26 = a1[5];
    uint64_t v25 = a1[6];
    uint64_t v27 = (void *)a1[4];
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_1000E2080;
    v32[3] = &unk_10022CF48;
    id v28 = v13;
    uint64_t v29 = a1[4];
    id v33 = v28;
    uint64_t v34 = v29;
    LOBYTE(v31) = 1;
    id v30 =  [v27 _sendGradingData:v14 withFileName:v28 toPeerId:v25 withCompressedFlag:a6 withUncompressedDataSize:a4 withBatchId:v26 withRetainF ileFlag:v31 withFilePrefix:&stru_10022F858 withCompletion:v32];
  }
}

void sub_1000E2080(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned __int8 v7 = (void *)CSLogContextFacilityCoreSpeech;
  if (!v6)
  {
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR)) {
      goto LABEL_6;
    }
    OSStatus v11 = *(void **)(a1 + 32);
    float v9 = v7;
    unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v11 lastPathComponent]);
    int v12 = 136315650;
    id v13 = "-[CSP2PService _sendAcousticGradingDataToPeerId:]_block_invoke";
    __int16 v14 = 2112;
    unsigned __int8 v15 = v10;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s Grading log file failed to transfer for file %@ in task %@",  (uint8_t *)&v12,  0x20u);
    goto LABEL_4;
  }

  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void **)(a1 + 32);
    float v9 = v7;
    unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 lastPathComponent]);
    int v12 = 136315650;
    id v13 = "-[CSP2PService _sendAcousticGradingDataToPeerId:]_block_invoke";
    __int16 v14 = 2112;
    unsigned __int8 v15 = v10;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Grading log file successfully transfered for file %@ in task %@",  (uint8_t *)&v12,  0x20u);
LABEL_4:
  }

void sub_1000E2220(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    unsigned __int8 v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 136315650;
      unint64_t v10 = "-[CSP2PService _sendVoiceProfileUpdateTriggerToPeerId:forLocale:]_block_invoke";
      __int16 v11 = 2112;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      id v14 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s Failed in sending trigger for Voice profile update to peer %@ with error %@",  (uint8_t *)&v9,  0x20u);
    }
  }
}

uint64_t sub_1000E2308(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [*(id *)(a1 + 32) isInternalWithoutProfile];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 pathExtension]);
  unsigned int v6 = [v5 isEqualToString:@"wav"];
  char v7 = v6;
  if (!v4)
  {

    if ((v7 & 1) != 0) {
      goto LABEL_5;
    }
LABEL_7:
    uint64_t v8 = 0LL;
    goto LABEL_8;
  }

  if (!v6)
  {
    int v9 = (void *)objc_claimAutoreleasedReturnValue([v3 pathExtension]);
    unsigned __int8 v10 = [v9 isEqualToString:@"json"];

    if ((v10 & 1) != 0) {
      goto LABEL_5;
    }
    goto LABEL_7;
  }

LABEL_5:
  uint64_t v8 = 1LL;
LABEL_8:

  return v8;
}

void sub_1000E23B8(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v13 = a2;
  id v14 = a3;
  id v15 = a7;
  __int16 v16 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (v15)
  {
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315650;
      int v50 = "-[CSP2PService _sendVoiceProfile:toPeerId:]_block_invoke";
      __int16 v51 = 2114;
      id v52 = v13;
      __int16 v53 = 2114;
      *(void *)__int128 v54 = v15;
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s Failed in compressing %{public}@ with errror %{public}@ - Bailing out",  buf,  0x20u);
    }
  }

  else
  {
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioBufferList buf = 136316162;
      int v50 = "-[CSP2PService _sendVoiceProfile:toPeerId:]_block_invoke";
      __int16 v51 = 2112;
      id v52 = v13;
      __int16 v53 = 1024;
      *(_DWORD *)__int128 v54 = a6;
      *(_WORD *)&v54[4] = 2048;
      *(void *)&v54[6] = a5;
      __int16 v55 = 2112;
      uint64_t v56 = 0LL;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%s CSP2P_VoiceProfileFetchCmd: File %@ isCompressed: %d, compressedSize: %ld, err: %@",  buf,  0x30u);
    }

    id v43 = v14;
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v13 lastPathComponent]);
    dispatch_time_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stringByDeletingLastPathComponent]);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 lastPathComponent]);

    uint64_t v44 = v17;
    uint64_t v42 = v19;
    if (([v17 isEqualToString:@"meta_version.json"] & 1) != 0
      || [v17 isEqualToString:@"enrollment_version.json"])
    {
      id v20 = v17;
    }

    else
    {
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v19 stringByAppendingPathComponent:@"audio"]);
      id v20 = (id)objc_claimAutoreleasedReturnValue([v21 stringByAppendingPathComponent:v17]);
    }

    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v13 stringByDeletingLastPathComponent]);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 lastPathComponent]);
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) profileID]);
    unsigned int v25 = [v23 isEqualToString:v24];

    if (v25)
    {
      id v26 = v44;

      id v20 = v26;
    }

    uint64_t v27 = objc_alloc(&OBJC_CLASS___NSMutableDictionary);
    id v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a6));
    uint64_t v29 = *(void *)(a1 + 48);
    id v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", a4));
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) locale]);
    uint64_t v41 = v29;
    id v14 = v43;
    float v32 = -[NSMutableDictionary initWithObjectsAndKeys:]( v27,  "initWithObjectsAndKeys:",  v20,  @"CSP2P_VoiceProfileRelativeFilePath_Key",  v28,  @"CSP2P_IsDataCompressed_Key",  v43,  @"CSP2P_VoiceProfileData_Key",  v41,  @"CSP2P_PeerIdentifier_Key",  v30,  @"CSP2P_UncompressedDataSize_Key",  v31,  @"CSP2P_VoiceProfileLocale_Key",  0LL);

    v47[0] = @"CSP2P_CommandType_Key";
    v47[1] = @"CSP2P_CommandDict_Key";
    v48[0] = @"com.apple.siridebug.command.reverse.transfer.voiceprofile";
    v48[1] = v32;
    v47[2] = @"type";
    v48[2] = @"corespeech";
    id v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v48,  v47,  3LL));
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) siriProfileId]);

    if (v34)
    {
      int v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) siriProfileId]);
      -[NSMutableDictionary setObject:forKey:]( v32,  "setObject:forKey:",  v35,  @"CSP2P_VoiceProfileSiriProfileId_Key");
    }

    int v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) locale]);

    if (v36)
    {
      __int16 v37 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) locale]);
      -[NSMutableDictionary setObject:forKey:](v32, "setObject:forKey:", v37, @"CSP2P_VoiceProfileLocale_Key");
    }

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 56) + 8LL));
    uint64_t v39 = *(void *)(a1 + 48);
    v45[0] = _NSConcreteStackBlock;
    v45[1] = 3221225472LL;
    void v45[2] = sub_1000E29D0;
    v45[3] = &unk_10022D0A0;
    id v46 = v20;
    id v40 = v20;
    [WeakRetained sendMessageWithPayload:v33 toPeer:v39 withReply:v45];
  }
}

void sub_1000E2860(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  char v7 = (void *)CSLogContextFacilityCoreSpeech;
  BOOL v8 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      int v9 = *(void **)(a1 + 32);
      unsigned __int8 v10 = v7;
      __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v9 profileID]);
      int v16 = 136315650;
      id v17 = "-[CSP2PService _sendVoiceProfile:toPeerId:]_block_invoke";
      __int16 v18 = 2112;
      uint64_t v19 = v11;
      __int16 v20 = 2112;
      id v21 = v6;
      uint64_t v12 = "%s CSP2P_VoiceProfileReverseTransferCmd: Failed transferring voice profile %@ with error %@";
      id v13 = v10;
      uint32_t v14 = 32;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v16, v14);
    }
  }

  else if (v8)
  {
    id v15 = *(void **)(a1 + 32);
    unsigned __int8 v10 = v7;
    __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v15 profileID]);
    int v16 = 136315394;
    id v17 = "-[CSP2PService _sendVoiceProfile:toPeerId:]_block_invoke";
    __int16 v18 = 2112;
    uint64_t v19 = v11;
    uint64_t v12 = "%s CSP2P_VoiceProfileReverseTransferCmd: Successfully transferred voice profile %@";
    id v13 = v10;
    uint32_t v14 = 22;
    goto LABEL_6;
  }
}

void sub_1000E29D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  char v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  BOOL v8 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      int v13 = 136315650;
      uint32_t v14 = "-[CSP2PService _sendVoiceProfile:toPeerId:]_block_invoke";
      __int16 v15 = 2112;
      id v16 = v5;
      __int16 v17 = 2112;
      id v18 = v6;
      int v9 = "%s CSP2P_VoiceProfileReverseTransferCmd: Failed VoiceProfileTransfer: %@, error %@";
      unsigned __int8 v10 = v7;
      uint32_t v11 = 32;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v13, v11);
    }
  }

  else if (v8)
  {
    uint64_t v12 = *(void **)(a1 + 32);
    int v13 = 136315394;
    uint32_t v14 = "-[CSP2PService _sendVoiceProfile:toPeerId:]_block_invoke";
    __int16 v15 = 2112;
    id v16 = v12;
    int v9 = "%s CSP2P_VoiceProfileReverseTransferCmd: Successfully transferred %@";
    unsigned __int8 v10 = v7;
    uint32_t v11 = 22;
    goto LABEL_6;
  }
}

uint64_t sub_1000E2B04(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000E2B14(uint64_t a1)
{
}

void sub_1000E2B1C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = *(id *)(a1 + 32);
  if (v7)
  {
    int v9 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      int v15 = 136315651;
      id v16 = "-[CSP2PService _getHomeUserIdForSharedSiriId:withCompletion:]_block_invoke";
      __int16 v17 = 2114;
      uint64_t v18 = v10;
      __int16 v19 = 2113;
      id v20 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s ERR: Home User Id erred %{public}@ for Siri Profile Id %{private}@",  (uint8_t *)&v15,  0x20u);
    }
  }

  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), a2);
    uint32_t v11 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 40);
      int v13 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
      int v15 = 136315650;
      id v16 = "-[CSP2PService _getHomeUserIdForSharedSiriId:withCompletion:]_block_invoke";
      __int16 v17 = 2114;
      uint64_t v18 = v12;
      __int16 v19 = 2114;
      id v20 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s siriProfileId %{public}@ maps to homeUserId %{public}@",  (uint8_t *)&v15,  0x20u);
    }
  }

  [*(id *)(a1 + 48) leave];
  uint64_t v14 = *(void *)(a1 + 56);
  if (v14) {
    (*(void (**)(uint64_t, void, id))(v14 + 16))( v14,  *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL),  v7);
  }
}

id *sub_1000E2CE0(id *result, uint64_t a2)
{
  if (a2) {
    return (id *)[result[4] setObject:a2 forKeyedSubscript:@"CSP2P_VoiceProfileHomeUserId_Key"];
  }
  return result;
}

void sub_1000E2CFC(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2 && *(void *)(a1 + 40) && *(void *)(a1 + 48))
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"CSP2P_VoiceProfileProfileId_Key"]);
    if (v3)
    {
      unsigned int v4 = (void *)v3;
      id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 32) objectForKeyedSubscript:@"CSP2P_VoiceProfileLocale_Key"]);

      if (v5)
      {
        id v6 = (void *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
        {
          id v7 = *(void **)(v1 + 32);
          id v8 = v6;
          int v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"CSP2P_VoiceProfileProfileId_Key"]);
          uint64_t v10 = *(void *)(v1 + 40);
          *(_DWORD *)AudioBufferList buf = 136315650;
          uint64_t v49 = "-[CSP2PService _processVoiceProfileDeleteCommandWithRequest:fromSenderID:withReply:]_block_invoke";
          __int16 v50 = 2112;
          __int16 v51 = v9;
          __int16 v52 = 2112;
          uint64_t v53 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s Received request to delete VoiceProfile %@ from peerId %@",  buf,  0x20u);
        }

        uint32_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[SSRVoiceProfileManager sharedInstance](&OBJC_CLASS___SSRVoiceProfileManager, "sharedInstance"));
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(v1 + 32) objectForKeyedSubscript:@"CSP2P_VoiceProfileLocale_Key"]);
        int v13 = (void *)objc_claimAutoreleasedReturnValue([v11 provisionedVoiceProfilesForLocale:v12]);

        __int128 v45 = 0u;
        __int128 v46 = 0u;
        __int128 v43 = 0u;
        __int128 v44 = 0u;
        id v14 = v13;
        id v15 = [v14 countByEnumeratingWithState:&v43 objects:v47 count:16];
        if (!v15)
        {
          uint64_t v27 = 0LL;
          uint64_t v29 = v14;
          goto LABEL_32;
        }

        id v16 = v15;
        id v40 = v11;
        id v42 = 0LL;
        uint64_t v17 = *(void *)v44;
        uint64_t v18 = SSRSpeakerRecognitionSiriDebugAppDomain;
        uint64_t v41 = SSRSpeakerRecognitionSiriDebugAppDomain;
        while (1)
        {
          for (uint64_t i = 0LL; i != v16; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v44 != v17) {
              objc_enumerationMutation(v14);
            }
            id v20 = *(void **)(*((void *)&v43 + 1) + 8LL * (void)i);
            id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 appDomain]);
            uint64_t v22 = v17;
            uint64_t v23 = v1;
            uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(v1 + 32) objectForKeyedSubscript:@"CSP2P_VoiceProfileProfileId_Key"]);
            unsigned int v25 = (void *)objc_claimAutoreleasedReturnValue([v20 profileId]);
            unsigned int v26 = [v24 isEqualToString:v25];

            if (v26)
            {
              uint64_t v18 = v41;
              id v21 = v42;
              id v42 = v20;
              uint64_t v1 = v23;
              uint64_t v17 = v22;
LABEL_16:

              continue;
            }

            uint64_t v1 = v23;
            uint64_t v17 = v22;
            uint64_t v18 = v41;
          }

          id v16 = [v14 countByEnumeratingWithState:&v43 objects:v47 count:16];
          if (!v16)
          {

            uint64_t v27 = v42;
            if (v42)
            {
              id v28 = (void *)objc_claimAutoreleasedReturnValue([v42 profileId]);
              uint32_t v11 = v40;
              uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v40 voiceProfileForId:v28]);

              if (v29) {
                id v30 = [v40 deleteUserVoiceProfile:v29];
              }
LABEL_32:
            }

            else
            {
              uint32_t v11 = v40;
            }

            notify_post("com.apple.siri.corespeech.voiceprofilelist.change");
            uint64_t v39 = *(void *)(v1 + 48);
            if (v39) {
              (*(void (**)(uint64_t, void, void))(v39 + 16))(v39, 0LL, 0LL);
            }

LABEL_27:
            return;
          }
        }
      }
    }

    __int16 v37 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v38 = *(void **)(v1 + 32);
      *(_DWORD *)AudioBufferList buf = 136315394;
      uint64_t v49 = "-[CSP2PService _processVoiceProfileDeleteCommandWithRequest:fromSenderID:withReply:]_block_invoke";
      __int16 v50 = 2112;
      __int16 v51 = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "%s received malformed command - %@",  buf,  0x16u);
    }
  }

  else
  {
    uint64_t v31 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = *(void *)(v1 + 40);
      float v32 = *(void **)(v1 + 48);
      uint64_t v34 = v31;
      id v35 = objc_retainBlock(v32);
      *(_DWORD *)AudioBufferList buf = 136315906;
      uint64_t v49 = "-[CSP2PService _processVoiceProfileDeleteCommandWithRequest:fromSenderID:withReply:]_block_invoke";
      __int16 v50 = 2112;
      __int16 v51 = v2;
      __int16 v52 = 2112;
      uint64_t v53 = v33;
      __int16 v54 = 2112;
      id v55 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "%s received malformed command - %@ %@ %@",  buf,  0x2Au);
    }
  }

  uint64_t v36 = *(void *)(v1 + 48);
  if (v36)
  {
    uint32_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"CoreSpeech",  3LL,  0LL));
    (*(void (**)(uint64_t, void, void *))(v36 + 16))(v36, 0LL, v11);
    goto LABEL_27;
  }

void sub_1000E31B0(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000E31FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)AudioBufferList buf = 136315906;
      uint64_t v29 = "-[CSP2PService _sendGradingData:withFileName:toPeerId:withCompressedFlag:withUncompressedDataSize:withBatchI"
            "d:withRetainFileFlag:withFilePrefix:withCompletion:]_block_invoke";
      __int16 v30 = 2112;
      uint64_t v31 = v8;
      __int16 v32 = 2112;
      id v33 = v5;
      __int16 v34 = 2112;
      id v35 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s Failed in transporting Voice file %@ with reponse: %@, error %@",  buf,  0x2Au);
    }

    id v9 = v6;
  }

  else
  {
    if (*(_BYTE *)(a1 + 64))
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) pathExtension]);
      uint32_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) stringByDeletingPathExtension]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 stringByAppendingString:kCSAudioSyncedFileSuffix]);
      int v13 = (void *)objc_claimAutoreleasedReturnValue([v12 stringByAppendingPathExtension:v10]);

      id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      uint64_t v15 = *(void *)(a1 + 40);
      id v26 = 0LL;
      unsigned __int8 v16 = [v14 moveItemAtPath:v15 toPath:v13 error:&v26];
      id v17 = v26;

      id v9 = 0LL;
      if ((v16 & 1) == 0)
      {
        uint64_t v18 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v19 = *(void *)(a1 + 40);
          *(_DWORD *)AudioBufferList buf = 136315906;
          uint64_t v29 = "-[CSP2PService _sendGradingData:withFileName:toPeerId:withCompressedFlag:withUncompressedDataSize:withBa"
                "tchId:withRetainFileFlag:withFilePrefix:withCompletion:]_block_invoke";
          __int16 v30 = 2112;
          uint64_t v31 = v19;
          __int16 v32 = 2112;
          id v33 = v13;
          __int16 v34 = 2112;
          id v35 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%s Failed to move the file %@ to %@ with error %@",  buf,  0x2Au);
        }

        id v9 = v17;
      }
    }

    else
    {
      id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      uint64_t v21 = *(void *)(a1 + 40);
      id v27 = 0LL;
      unsigned __int8 v22 = [v20 removeItemAtPath:v21 error:&v27];
      id v17 = v27;

      if ((v22 & 1) != 0)
      {
        id v9 = 0LL;
      }

      else
      {
        uint64_t v23 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v24 = *(void *)(a1 + 40);
          *(_DWORD *)AudioBufferList buf = 136315650;
          uint64_t v29 = "-[CSP2PService _sendGradingData:withFileName:toPeerId:withCompressedFlag:withUncompressedDataSize:withBa"
                "tchId:withRetainFileFlag:withFilePrefix:withCompletion:]_block_invoke";
          __int16 v30 = 2112;
          uint64_t v31 = v24;
          __int16 v32 = 2112;
          id v33 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "%s Failed to remove the file %@ with error %@",  buf,  0x20u);
        }

        id v17 = v17;
        id v9 = v17;
      }
    }
  }

  uint64_t v25 = *(void *)(a1 + 56);
  if (v25) {
    (*(void (**)(uint64_t, void, id))(v25 + 16))(v25, *(void *)(a1 + 48), v9);
  }
}

void sub_1000E3518(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v13 = a2;
  id v14 = a3;
  uint64_t v15 = a7;
  if (v15)
  {
    unsigned __int8 v16 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315650;
      uint64_t v36 = "-[CSP2PService _sendCoreSpeechMagusGradingDataToPeerId:]_block_invoke_2";
      __int16 v37 = 2114;
      uint64_t v38 = (uint64_t)v13;
      __int16 v39 = 2114;
      id v40 = v15;
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s Failed in compressing %{public}@ with errror %{public}@ - Bailing out",  buf,  0x20u);
    }
  }

  else
  {
    id v17 = *(dispatch_semaphore_s **)(a1[4] + 48LL);
    dispatch_time_t v18 = dispatch_time(0LL, 60000000000LL);
    dispatch_semaphore_wait(v17, v18);
    uint64_t v19 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = v19;
      uint64_t v21 = objc_claimAutoreleasedReturnValue([v13 lastPathComponent]);
      unsigned __int8 v22 = (void *)v21;
      uint64_t v23 = a1[5];
      uint64_t v36 = "-[CSP2PService _sendCoreSpeechMagusGradingDataToPeerId:]_block_invoke";
      uint64_t v24 = @"OFF";
      __int16 v37 = 2112;
      *(_DWORD *)AudioBufferList buf = 136316162;
      if ((_DWORD)a6) {
        uint64_t v24 = @"ON";
      }
      uint64_t v38 = v21;
      __int16 v39 = 2114;
      id v40 = v24;
      __int16 v41 = 2048;
      uint64_t v42 = a5;
      __int16 v43 = 2114;
      uint64_t v44 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%s Transfering grading file %@ withCompression %{public}@ and size %ld in batch %{public}@",  buf,  0x34u);
    }

    uint64_t v26 = a1[5];
    uint64_t v25 = a1[6];
    id v27 = (void *)a1[4];
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_1000E37A0;
    v32[3] = &unk_10022CF48;
    id v28 = v13;
    uint64_t v29 = a1[4];
    id v33 = v28;
    uint64_t v34 = v29;
    LOBYTE(v31) = 1;
    id v30 =  [v27 _sendGradingData:v14 withFileName:v28 toPeerId:v25 withCompressedFlag:a6 withUncompressedDataSize:a4 withBatchId:v26 withRetainF ileFlag:v31 withFilePrefix:&stru_10022F858 withCompletion:v32];
  }
}

void sub_1000E37A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)CSLogContextFacilityCoreSpeech;
  if (!v6)
  {
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR)) {
      goto LABEL_6;
    }
    uint32_t v11 = *(void **)(a1 + 32);
    id v9 = v7;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v11 lastPathComponent]);
    int v12 = 136315650;
    id v13 = "-[CSP2PService _sendCoreSpeechMagusGradingDataToPeerId:]_block_invoke";
    __int16 v14 = 2112;
    uint64_t v15 = v10;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s Grading log file failed to transfer for file %@ in task %@",  (uint8_t *)&v12,  0x20u);
    goto LABEL_4;
  }

  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = v7;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 lastPathComponent]);
    int v12 = 136315650;
    id v13 = "-[CSP2PService _sendCoreSpeechMagusGradingDataToPeerId:]_block_invoke";
    __int16 v14 = 2112;
    uint64_t v15 = v10;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Grading log file successfully transfered for file %@ in task %@",  (uint8_t *)&v12,  0x20u);
LABEL_4:
  }

BOOL sub_1000E3940(id a1, NSURL *a2, NSDictionary *a3)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[NSURL URLByDeletingPathExtension](a2, "URLByDeletingPathExtension", a3));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 lastPathComponent]);
  unsigned __int8 v5 = [v4 containsString:kCSAudioSyncedFileSuffix];

  if ((v5 & 1) != 0)
  {
    unsigned __int8 v6 = 0;
  }

  else
  {
    uint64_t v28 = 0LL;
    id v7 = -[NSRegularExpression initWithPattern:options:error:]( objc_alloc(&OBJC_CLASS___NSRegularExpression),  "initWithPattern:options:error:",  @"[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",  1LL,  &v28);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 lastPathComponent]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 lastPathComponent]);
    id v10 = -[NSRegularExpression rangeOfFirstMatchInString:options:range:]( v7,  "rangeOfFirstMatchInString:options:range:",  v8,  16,  0,  [v9 length]);
    uint64_t v12 = v11;

    if (v10 == (id)0x7FFFFFFFFFFFFFFFLL && v12 == 0)
    {
      unsigned __int8 v6 = 0;
    }

    else
    {
      __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v3 path]);
      __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 stringByAppendingString:@".wav"]);
      if ([v14 fileExistsAtPath:v16])
      {
        unsigned __int8 v6 = 1;
      }

      else
      {
        id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
        dispatch_time_t v18 = (void *)objc_claimAutoreleasedReturnValue([v3 path]);
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 stringByAppendingString:@"-synced.wav"]);
        if ([v17 fileExistsAtPath:v19])
        {
          unsigned __int8 v6 = 1;
        }

        else
        {
          id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
          id v27 = (void *)objc_claimAutoreleasedReturnValue([v3 path]);
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v27 stringByAppendingString:@".json"]);
          if (objc_msgSend(v20, "fileExistsAtPath:"))
          {
            unsigned __int8 v6 = 1;
          }

          else
          {
            uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
            uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v3 path]);
            uint64_t v25 = v20;
            uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v24 stringByAppendingString:@"-synced.json"]);
            unsigned __int8 v6 = [v23 fileExistsAtPath:v21];

            id v20 = v25;
          }
        }
      }
    }
  }

  return v6;
}

id sub_1000E3BCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 lastPathComponent]);
  else {
    id v5 = [*(id *)(a1 + 32) shouldTransferVoiceTriggerLogFileWithURL:v3];
  }

  return v5;
}

void sub_1000E3C3C(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v13 = a2;
  id v14 = a3;
  uint64_t v15 = a7;
  if (v15)
  {
    __int16 v16 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315650;
      uint64_t v36 = "-[CSP2PService _sendGeckoSpeechLogsToPeerId:]_block_invoke_2";
      __int16 v37 = 2114;
      uint64_t v38 = (uint64_t)v13;
      __int16 v39 = 2114;
      id v40 = v15;
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s Failed in compressing %{public}@ with errror %{public}@ - Bailing out",  buf,  0x20u);
    }
  }

  else
  {
    id v17 = *(dispatch_semaphore_s **)(a1[4] + 48LL);
    dispatch_time_t v18 = dispatch_time(0LL, 60000000000LL);
    dispatch_semaphore_wait(v17, v18);
    uint64_t v19 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = v19;
      uint64_t v21 = objc_claimAutoreleasedReturnValue([v13 lastPathComponent]);
      unsigned __int8 v22 = (void *)v21;
      uint64_t v23 = a1[5];
      uint64_t v36 = "-[CSP2PService _sendGeckoSpeechLogsToPeerId:]_block_invoke";
      uint64_t v24 = @"OFF";
      __int16 v37 = 2112;
      *(_DWORD *)AudioBufferList buf = 136316162;
      if ((_DWORD)a6) {
        uint64_t v24 = @"ON";
      }
      uint64_t v38 = v21;
      __int16 v39 = 2114;
      id v40 = v24;
      __int16 v41 = 2048;
      uint64_t v42 = a5;
      __int16 v43 = 2114;
      uint64_t v44 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%s Transfering grading file %@ withCompression %{public}@ and size %ld in batch %{public}@",  buf,  0x34u);
    }

    uint64_t v26 = a1[5];
    uint64_t v25 = a1[6];
    id v27 = (void *)a1[4];
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_1000E3EC0;
    v32[3] = &unk_10022CF48;
    id v28 = v13;
    uint64_t v29 = a1[4];
    id v33 = v28;
    uint64_t v34 = v29;
    LOBYTE(v31) = 0;
    id v30 =  [v27 _sendGradingData:v14 withFileName:v28 toPeerId:v25 withCompressedFlag:a6 withUncompressedDataSize:a4 withBatchId:v26 withRetainF ileFlag:v31 withFilePrefix:@"Gecko-" withCompletion:v32];
  }
}

void sub_1000E3EC0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)CSLogContextFacilityCoreSpeech;
  if (!v6)
  {
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR)) {
      goto LABEL_6;
    }
    uint64_t v11 = *(void **)(a1 + 32);
    id v9 = v7;
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v11 lastPathComponent]);
    int v12 = 136315650;
    id v13 = "-[CSP2PService _sendGeckoSpeechLogsToPeerId:]_block_invoke";
    __int16 v14 = 2112;
    uint64_t v15 = v10;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s Grading log file failed to transfer for file %@ in task %@",  (uint8_t *)&v12,  0x20u);
    goto LABEL_4;
  }

  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = v7;
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 lastPathComponent]);
    int v12 = 136315650;
    id v13 = "-[CSP2PService _sendGeckoSpeechLogsToPeerId:]_block_invoke";
    __int16 v14 = 2112;
    uint64_t v15 = v10;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Grading log file successfully transfered for file %@ in task %@",  (uint8_t *)&v12,  0x20u);
LABEL_4:
  }

uint64_t sub_1000E4060(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 URLByDeletingPathExtension]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 lastPathComponent]);
  unsigned __int8 v6 = [v5 containsString:kCSAudioSyncedFileSuffix];

  if ((v6 & 1) != 0) {
    goto LABEL_2;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8 == 3)
  {
    goto LABEL_2;
  }

  if (v8 != 2)
  {
    if (v8 != 1
      || ([*(id *)(a1 + 32) fileURL:v3 matchesFileNamePattern:@"^CS-.+"] & 1) != 0)
    {
      goto LABEL_13;
    }

void sub_1000E423C(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v13 = a2;
  id v14 = a3;
  unsigned __int8 v15 = a7;
  if (v15)
  {
    __int16 v16 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315650;
      uint64_t v36 = "-[CSP2PService _sendCoreSpeechGradingDataToPeerId:forLogType:]_block_invoke_2";
      __int16 v37 = 2114;
      uint64_t v38 = (uint64_t)v13;
      __int16 v39 = 2114;
      id v40 = v15;
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s Failed in compressing %{public}@ with errror %{public}@ - Bailing out",  buf,  0x20u);
    }
  }

  else
  {
    id v17 = *(dispatch_semaphore_s **)(a1[4] + 48LL);
    dispatch_time_t v18 = dispatch_time(0LL, 60000000000LL);
    dispatch_semaphore_wait(v17, v18);
    uint64_t v19 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = v19;
      uint64_t v21 = objc_claimAutoreleasedReturnValue([v13 lastPathComponent]);
      unsigned __int8 v22 = (void *)v21;
      uint64_t v23 = a1[5];
      uint64_t v36 = "-[CSP2PService _sendCoreSpeechGradingDataToPeerId:forLogType:]_block_invoke";
      uint64_t v24 = @"OFF";
      __int16 v37 = 2112;
      *(_DWORD *)AudioBufferList buf = 136316162;
      if ((_DWORD)a6) {
        uint64_t v24 = @"ON";
      }
      uint64_t v38 = v21;
      __int16 v39 = 2114;
      id v40 = v24;
      __int16 v41 = 2048;
      uint64_t v42 = a5;
      __int16 v43 = 2114;
      uint64_t v44 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%s Transfering grading file %@ withCompression %{public}@ and size %ld in batch %{public}@",  buf,  0x34u);
    }

    uint64_t v26 = a1[5];
    uint64_t v25 = a1[6];
    id v27 = (void *)a1[4];
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_1000E44C4;
    v32[3] = &unk_10022CF48;
    id v28 = v13;
    uint64_t v29 = a1[4];
    id v33 = v28;
    uint64_t v34 = v29;
    LOBYTE(v31) = 1;
    id v30 =  [v27 _sendGradingData:v14 withFileName:v28 toPeerId:v25 withCompressedFlag:a6 withUncompressedDataSize:a4 withBatchId:v26 withRetainF ileFlag:v31 withFilePrefix:&stru_10022F858 withCompletion:v32];
  }
}

void sub_1000E44C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)CSLogContextFacilityCoreSpeech;
  if (!v6)
  {
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR)) {
      goto LABEL_6;
    }
    unsigned __int8 v11 = *(void **)(a1 + 32);
    id v9 = v7;
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v11 lastPathComponent]);
    int v12 = 136315650;
    id v13 = "-[CSP2PService _sendCoreSpeechGradingDataToPeerId:forLogType:]_block_invoke";
    __int16 v14 = 2112;
    unsigned __int8 v15 = v10;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s Grading log file failed to transfer for file %@ in task %@",  (uint8_t *)&v12,  0x20u);
    goto LABEL_4;
  }

  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = v7;
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 lastPathComponent]);
    int v12 = 136315650;
    id v13 = "-[CSP2PService _sendCoreSpeechGradingDataToPeerId:forLogType:]_block_invoke";
    __int16 v14 = 2112;
    unsigned __int8 v15 = v10;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Grading log file successfully transfered for file %@ in task %@",  (uint8_t *)&v12,  0x20u);
LABEL_4:
  }

id sub_1000E4664(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 lastPathComponent]);
  if (([v4 containsString:@"-almost"] & 1) == 0)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
    if ([v5 companionSyncVoiceTriggerUtterancesEnabled])
    {
      unsigned int v6 = [v4 containsString:@"-triggered"];

      if (v6) {
        goto LABEL_5;
      }
    }

    else
    {
    }

void sub_1000E472C(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v13 = a2;
  id v14 = a3;
  unsigned __int8 v15 = a7;
  if (v15)
  {
    __int16 v16 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315650;
      uint64_t v36 = "-[CSP2PService _sendVoiceTriggerGradingDataToPeerId:]_block_invoke_2";
      __int16 v37 = 2114;
      uint64_t v38 = (uint64_t)v13;
      __int16 v39 = 2114;
      id v40 = v15;
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s Failed in compressing %{public}@ with errror %{public}@ - Bailing out",  buf,  0x20u);
    }
  }

  else
  {
    id v17 = *(dispatch_semaphore_s **)(a1[4] + 48LL);
    dispatch_time_t v18 = dispatch_time(0LL, 60000000000LL);
    dispatch_semaphore_wait(v17, v18);
    uint64_t v19 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = v19;
      uint64_t v21 = objc_claimAutoreleasedReturnValue([v13 lastPathComponent]);
      unsigned __int8 v22 = (void *)v21;
      uint64_t v23 = a1[5];
      uint64_t v36 = "-[CSP2PService _sendVoiceTriggerGradingDataToPeerId:]_block_invoke";
      uint64_t v24 = @"OFF";
      __int16 v37 = 2112;
      *(_DWORD *)AudioBufferList buf = 136316162;
      if ((_DWORD)a6) {
        uint64_t v24 = @"ON";
      }
      uint64_t v38 = v21;
      __int16 v39 = 2114;
      id v40 = v24;
      __int16 v41 = 2048;
      uint64_t v42 = a5;
      __int16 v43 = 2114;
      uint64_t v44 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%s Transfering NearMiss file %@ withCompression %{public}@ and size %ld in batch %{public}@",  buf,  0x34u);
    }

    uint64_t v26 = a1[5];
    uint64_t v25 = a1[6];
    id v27 = (void *)a1[4];
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_1000E49B4;
    v32[3] = &unk_10022CF48;
    id v28 = v13;
    uint64_t v29 = a1[4];
    id v33 = v28;
    uint64_t v34 = v29;
    LOBYTE(v31) = 1;
    id v30 =  [v27 _sendGradingData:v14 withFileName:v28 toPeerId:v25 withCompressedFlag:a6 withUncompressedDataSize:a4 withBatchId:v26 withRetainF ileFlag:v31 withFilePrefix:&stru_10022F858 withCompletion:v32];
  }
}

void sub_1000E49B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)CSLogContextFacilityCoreSpeech;
  if (!v6)
  {
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR)) {
      goto LABEL_6;
    }
    unsigned __int8 v11 = *(void **)(a1 + 32);
    id v9 = v7;
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v11 lastPathComponent]);
    int v12 = 136315650;
    id v13 = "-[CSP2PService _sendVoiceTriggerGradingDataToPeerId:]_block_invoke";
    __int16 v14 = 2112;
    unsigned __int8 v15 = v10;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s Grading log file failed to transfer for file %@ in task %@",  (uint8_t *)&v12,  0x20u);
    goto LABEL_4;
  }

  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = v7;
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 lastPathComponent]);
    int v12 = 136315650;
    id v13 = "-[CSP2PService _sendVoiceTriggerGradingDataToPeerId:]_block_invoke";
    __int16 v14 = 2112;
    unsigned __int8 v15 = v10;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Grading log file successfully transfered for file %@ in task %@",  (uint8_t *)&v12,  0x20u);
LABEL_4:
  }

id sub_1000E4B54(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id obj = 0LL;
  id v22 = 0LL;
  id v7 = (id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  unsigned __int8 v8 = [v5 getResourceValue:&v22 forKey:NSURLCreationDateKey error:&obj];
  id v9 = v22;
  objc_storeStrong(v7, obj);
  if ((v8 & 1) == 0)
  {
    __int16 v14 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
      *(_DWORD *)AudioBufferList buf = 136315906;
      uint64_t v24 = "-[CSP2PService _compressFilesInDirectory:matchingPredicate:sortedByCreationDate:compressedFileAvailable:]_block_invoke";
      __int16 v25 = 2112;
      NSURLResourceKey v26 = NSURLCreationDateKey;
      __int16 v27 = 2112;
      id v28 = v5;
      __int16 v29 = 2112;
      uint64_t v30 = v15;
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s Unable to get %@ for file at %@: %@",  buf,  0x2Au);
    }

    goto LABEL_9;
  }

  id v19 = 0LL;
  id v20 = 0LL;
  id v10 = (id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  unsigned __int8 v11 = [v6 getResourceValue:&v20 forKey:NSURLCreationDateKey error:&v19];
  id v12 = v20;
  objc_storeStrong(v10, v19);
  if ((v11 & 1) == 0)
  {
    __int16 v16 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
      *(_DWORD *)AudioBufferList buf = 136315906;
      uint64_t v24 = "-[CSP2PService _compressFilesInDirectory:matchingPredicate:sortedByCreationDate:compressedFileAvailable:]_block_invoke";
      __int16 v25 = 2112;
      NSURLResourceKey v26 = NSURLCreationDateKey;
      __int16 v27 = 2112;
      id v28 = v6;
      __int16 v29 = 2112;
      uint64_t v30 = v18;
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s Unable to get %@ for file at %@: %@",  buf,  0x2Au);
    }

LABEL_9:
    id v13 = 0LL;
    goto LABEL_10;
  }

  id v13 = [v9 compare:v12];

LABEL_10:
  return v13;
}

id sub_1000E4D9C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 24LL);
    int v5 = 136315394;
    id v6 = "-[CSP2PService sendGeckoSpeechLogsToCompanion]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Triggering gecko sync with peer - %@",  (uint8_t *)&v5,  0x16u);
  }

  return [*(id *)(a1 + 32) _sendGeckoSpeechLogsToPeerId:*(void *)(*(void *)(a1 + 32) + 24)];
}

id sub_1000E4E64(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 24LL);
    int v5 = 136315394;
    id v6 = "-[CSP2PService sendAcousticGradingDataToNearbyPeer]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Triggering acoustic data sync with peer - %@",  (uint8_t *)&v5,  0x16u);
  }

  return [*(id *)(a1 + 32) _sendAcousticGradingDataToPeerId:*(void *)(*(void *)(a1 + 32) + 24)];
}

void *sub_1000E4F2C(void *result, uint64_t a2)
{
  if (*(void *)(result[4] + 24LL))
  {
    uint64_t v2 = result;
    id result = (void *)CSIsHorseman(result, a2);
    if ((_DWORD)result)
    {
      id result = [(id)v2[4] isHeadlessDeviceDataCollectionModeEnabled];
      if ((_DWORD)result)
      {
        uint64_t v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v4 = *(void *)(v2[4] + 24LL);
          int v5 = 136315394;
          id v6 = "-[CSP2PService sendVoiceProfileUpdatedMessageToNearbyPeerForLocale:]_block_invoke";
          __int16 v7 = 2112;
          uint64_t v8 = v4;
          _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Triggering voice profile sync with peer - %@",  (uint8_t *)&v5,  0x16u);
        }

        return [(id)v2[4] _sendVoiceProfileUpdateTriggerToPeerId:*(void *)(v2[4] + 24) forLocale:v2[5]];
      }
    }
  }

  return result;
}

id sub_1000E5014(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 24LL);
    int v5 = 136315394;
    id v6 = "-[CSP2PService sendVTNearMissGradingDataToCompanion]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Triggering nearmiss sync with peer - %@",  (uint8_t *)&v5,  0x16u);
  }

  return [*(id *)(a1 + 32) _sendVoiceTriggerGradingDataToPeerId:*(void *)(*(void *)(a1 + 32) + 24)];
}

id sub_1000E50DC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 24LL);
    int v5 = 136315394;
    id v6 = "-[CSP2PService sendCoreSpeechGradingDataToNearbyPeer]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Triggering sync with peer - %@",  (uint8_t *)&v5,  0x16u);
  }

  return [*(id *)(a1 + 32) _sendCoreSpeechGradingDataToPeerId:*(void *)(*(void *)(a1 + 32) + 24)];
}

void sub_1000E51A4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isHeadlessDeviceDataCollectionModeEnabled])
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (v3 && *(void *)(a1 + 48))
    {
      uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSDictionary, v2);
      if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
      {
        int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:@"CSP2P_CommandType_Key"]);
        id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:@"CSP2P_CommandDict_Key"]);
        if (v5)
        {
          objc_storeStrong((id *)(*(void *)(a1 + 32) + 24LL), *(id *)(a1 + 48));
          __int16 v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v8 = *(void *)(a1 + 48);
            *(_DWORD *)uint64_t v31 = 136315650;
            *(void *)&v31[4] = "-[CSP2PService processRemoteCommandWithPayload:fromPeer:withReply:]_block_invoke";
            *(_WORD *)&v31[12] = 2112;
            *(void *)&v31[14] = v5;
            *(_WORD *)&v31[22] = 2112;
            uint64_t v32 = v8;
            _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s Command %@ received from peerId %@",  v31,  0x20u);
          }

          if ([v5 isEqualToString:@"com.apple.siridebug.command.remote.heysiri"])
          {
            [*(id *)(a1 + 32) _processRemoteHeySiriCommandWithRequest:v6 fromSenderID:*(void *)(a1 + 48) withReply:*(void *)(a1 + 56)];
LABEL_64:

            goto LABEL_22;
          }

          if ([v5 isEqualToString:@"com.apple.siridebug.command.parallel.recording"])
          {
            [*(id *)(a1 + 32) _processParallelRecordingCommandWithRequest:v6 fromSenderID:*(void *)(a1 + 48) withReply:*(void *)(a1 + 56)];
            goto LABEL_64;
          }

          if ([v5 isEqualToString:@"com.apple.siridebug.command.transfer.parallelrecording"])
          {
            [*(id *)(a1 + 32) _receiveParallelRecordingFromPeerId:*(void *)(a1 + 48) recordingInfo:v6 withReply:*(void *)(a1 + 56)];
            goto LABEL_64;
          }

          if ([v5 isEqualToString:@"com.apple.siridebug.command.transfer.voiceprofile"])
          {
            [*(id *)(a1 + 32) _receiveVoiceProfileFromPeerId:*(void *)(a1 + 48) voiceProfileInfo:v6 withReply:*(void *)(a1 + 56)];
            goto LABEL_64;
          }

          if ([v5 isEqualToString:@"com.apple.siridebug.command.fetch.voicegradingdata"])
          {
            [*(id *)(a1 + 32) _processGradingDataFetchCommandWithRequest:v6 fromSenderID:*(void *)(a1 + 48) withReply:*(void *)(a1 + 56)];
            goto LABEL_64;
          }

          if ([v5 isEqualToString:@"com.apple.siridebug.command.delete.voiceprofile"])
          {
            [*(id *)(a1 + 32) _processVoiceProfileDeleteCommandWithRequest:v6 fromSenderID:*(void *)(a1 + 48) withReply:*(void *)(a1 + 56)];
            goto LABEL_64;
          }

          if ([v5 isEqualToString:@"com.apple.siridebug.command.transfer.voicegradingdata"])
          {
            [*(id *)(a1 + 32) _receiveVoiceGradingDataFromPeerId:*(void *)(a1 + 48) requestInfo:v6 withReply:*(void *)(a1 + 56)];
            goto LABEL_64;
          }

          if ([v5 isEqualToString:@"com.apple.siridebug.command.query.voiceprofile"])
          {
            [*(id *)(a1 + 32) _processVoiceProfileListQueryCommandFromPeerId:*(void *)(a1 + 48) requestInfo:v6 withReply:*(void *)(a1 + 56)];
            goto LABEL_64;
          }

          if ([v5 isEqualToString:@"com.apple.siridebug.command.fetch.voiceprofile"])
          {
            [*(id *)(a1 + 32) _processFetchVoiceProfileCommandFromPeerId:*(void *)(a1 + 48) requestInfo:v6 withReply:*(void *)(a1 + 56)];
            goto LABEL_64;
          }

          if ([v5 isEqualToString:@"com.apple.siridebug.command.reverse.transfer.voiceprofile"])
          {
            [*(id *)(a1 + 32) _processReverseTransferVoiceProfileCommandFromPeerId:*(void *)(a1 + 48) requestInfo:v6 withReply:*(void *)(a1 + 56)];
            goto LABEL_64;
          }

          if ([v5 isEqualToString:@"com.apple.siridebug.command.voiceprofile.update.trigger"])
          {
            [*(id *)(a1 + 32) _processVoiceProfileUpdateTriggerFromPeerId:*(void *)(a1 + 48) requestInfo:v6 withReply:*(void *)(a1 + 56)];
            goto LABEL_64;
          }

          if ([v5 isEqualToString:@"com.apple.siridebug.command.fetch.voicegradingdata.voicetriggerlogs"])
          {
            __int16 v25 = *(void **)(a1 + 32);
            uint64_t v26 = *(void *)(a1 + 48);
            uint64_t v27 = *(void *)(a1 + 56);
            id v28 = v6;
            uint64_t v29 = 1LL;
LABEL_63:
            [v25 _processGradingDataFetchCommandWithRequest:v28 ofLogType:v29 fromSenderID:v26 withReply:v27];
            goto LABEL_64;
          }

          if ([v5 isEqualToString:@"com.apple.siridebug.command.fetch.voicegradingdata.speechlogs"])
          {
            __int16 v25 = *(void **)(a1 + 32);
            uint64_t v26 = *(void *)(a1 + 48);
            uint64_t v27 = *(void *)(a1 + 56);
            id v28 = v6;
            uint64_t v29 = 2LL;
            goto LABEL_63;
          }

          if ([v5 isEqualToString:@"com.apple.siridebug.command.fetch.voicegradingdata.maguslogs"])
          {
            __int16 v25 = *(void **)(a1 + 32);
            uint64_t v26 = *(void *)(a1 + 48);
            uint64_t v27 = *(void *)(a1 + 56);
            id v28 = v6;
            uint64_t v29 = 3LL;
            goto LABEL_63;
          }

          if ([v5 isEqualToString:@"com.apple.siridebug.command.fetch.voicegradingdata.csaudio"])
          {
            __int16 v25 = *(void **)(a1 + 32);
            uint64_t v26 = *(void *)(a1 + 48);
            uint64_t v27 = *(void *)(a1 + 56);
            id v28 = v6;
            uint64_t v29 = 6LL;
            goto LABEL_63;
          }

          if ([v5 isEqualToString:@"com.apple.siridebug.command.fetch.voicegradingdata.compressedaudio"])
          {
            __int16 v25 = *(void **)(a1 + 32);
            uint64_t v26 = *(void *)(a1 + 48);
            uint64_t v27 = *(void *)(a1 + 56);
            id v28 = v6;
            uint64_t v29 = 7LL;
            goto LABEL_63;
          }

          if ([v5 isEqualToString:@"com.apple.siridebug.command.fetch.voicegradingdata.pcmaudio"])
          {
            __int16 v25 = *(void **)(a1 + 32);
            uint64_t v26 = *(void *)(a1 + 48);
            uint64_t v27 = *(void *)(a1 + 56);
            id v28 = v6;
            uint64_t v29 = 8LL;
            goto LABEL_63;
          }

          if ([v5 isEqualToString:@"com.apple.siridebug.command.fetch.voicegradingdata.triggerstudylogs"])
          {
            __int16 v25 = *(void **)(a1 + 32);
            uint64_t v26 = *(void *)(a1 + 48);
            uint64_t v27 = *(void *)(a1 + 56);
            id v28 = v6;
            uint64_t v29 = 9LL;
            goto LABEL_63;
          }

          uint64_t v30 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v31 = 136315394;
            *(void *)&v31[4] = "-[CSP2PService processRemoteCommandWithPayload:fromPeer:withReply:]_block_invoke";
            *(_WORD *)&v31[12] = 2112;
            *(void *)&v31[14] = v5;
            _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "%s Unknown Command: (%@) - Ignoring",  v31,  0x16u);
          }

          uint64_t v22 = *(void *)(a1 + 56);
          if (!v22) {
            goto LABEL_64;
          }
          uint64_t v23 = 6LL;
        }

        else
        {
          id v20 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v21 = *(void *)(a1 + 48);
            *(_DWORD *)uint64_t v31 = 136315650;
            *(void *)&v31[4] = "-[CSP2PService processRemoteCommandWithPayload:fromPeer:withReply:]_block_invoke";
            *(_WORD *)&v31[12] = 2112;
            *(void *)&v31[14] = 0LL;
            *(_WORD *)&v31[22] = 2112;
            uint64_t v32 = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%s Received Malformed command %@ from peerId %@ - Bailing out!",  v31,  0x20u);
          }

          uint64_t v22 = *(void *)(a1 + 56);
          if (!v22) {
            goto LABEL_64;
          }
          uint64_t v23 = 3LL;
        }

        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"CoreSpeech",  v23,  0LL));
        (*(void (**)(uint64_t, void, void *))(v22 + 16))(v22, 0LL, v24);

        goto LABEL_64;
      }

      id v17 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_19;
      }
      uint64_t v18 = *(void *)(a1 + 40);
      uint64_t v19 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t v31 = 136315650;
      *(void *)&v31[4] = "-[CSP2PService processRemoteCommandWithPayload:fromPeer:withReply:]_block_invoke";
      *(_WORD *)&v31[12] = 2112;
      *(void *)&v31[14] = v18;
      *(_WORD *)&v31[22] = 2112;
      uint64_t v32 = v19;
      __int16 v16 = v17;
    }

    else
    {
      __int16 v14 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
LABEL_19:
        uint64_t v12 = *(void *)(a1 + 56);
        if (!v12) {
          return;
        }
        uint64_t v13 = 3LL;
        goto LABEL_21;
      }

      uint64_t v15 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t v31 = 136315650;
      *(void *)&v31[4] = "-[CSP2PService processRemoteCommandWithPayload:fromPeer:withReply:]_block_invoke";
      *(_WORD *)&v31[12] = 2112;
      *(void *)&v31[14] = v3;
      *(_WORD *)&v31[22] = 2112;
      uint64_t v32 = v15;
      __int16 v16 = v14;
    }

    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%s Received Malformed command %@ from peerId %@ - Bailing out!",  v31,  0x20u);
    goto LABEL_19;
  }

  id v9 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t v31 = 136315650;
    *(void *)&v31[4] = "-[CSP2PService processRemoteCommandWithPayload:fromPeer:withReply:]_block_invoke";
    *(_WORD *)&v31[12] = 2112;
    *(void *)&v31[14] = v10;
    *(_WORD *)&v31[22] = 2112;
    uint64_t v32 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Non internal build, Ignoring command %@ from peerId %@ - Bailing out!",  v31,  0x20u);
  }

  uint64_t v12 = *(void *)(a1 + 56);
  if (v12)
  {
    uint64_t v13 = 2LL;
LABEL_21:
    int v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"CoreSpeech",  v13,  0LL,  *(_OWORD *)v31,  *(void *)&v31[16],  v32));
    (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0LL, v5);
LABEL_22:
  }

void sub_1000E58E8(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSP2PService);
  uint64_t v2 = (void *)qword_10027FFF0;
  qword_10027FFF0 = (uint64_t)v1;
}

void sub_1000E6B68(_Unwind_Exception *a1)
{
}

uint64_t sub_1000E7AF4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1000E7B08(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t v10 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 136315138;
    __int16 v14 = "-[CSVoiceTriggerFirstPassHearst _handleSecondPassResult:secondPassRequest:deviceId:requestOption:error:complet"
          "ion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s gateWithRemoteMicVadAndShadowMicBlk",  (uint8_t *)&v13,  0xCu);
  }

  double v11 = *(double *)(a1 + 40);
  if (v11 >= 0.0)
  {
    else {
      return 0LL;
    }
  }

  else
  {
    LODWORD(result) = (*(uint64_t (**)(float, float))(*(void *)(a1 + 32) + 16LL))(a2, a3);
    if (a4 >= a5) {
      return result;
    }
    else {
      return 0LL;
    }
  }

BOOL sub_1000E7C24(id a1, float a2, float a3)
{
  int v5 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315138;
    uint64_t v8 = "-[CSVoiceTriggerFirstPassHearst _handleSecondPassResult:secondPassRequest:deviceId:requestOption:error:completi"
         "on:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s gateWithRemoteMicVadOnlyBlk",  (uint8_t *)&v7,  0xCu);
  }

  return a2 < a3 && a2 >= 0.0;
}

void sub_1000E7CE8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (*(void *)(a1 + 48) == 1LL)
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 audioStreamHolding]);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = *(void **)(v4 + 72);
    *(void *)(v4 + 72) = v3;

    uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioProvider]);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void **)(v7 + 80);
    *(void *)(v7 + 80) = v6;
  }

  else
  {
    [v2 cancelAudioStreamHold];
  }

void sub_1000E7D64(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    uint64_t v6 = *(void **)(a1 + 40);
    uint64_t v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 32LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000E826C;
    block[3] = &unk_10022F100;
    id v12 = v6;
    dispatch_async(v7, block);
  }

  else
  {
    uint64_t v8 = (void *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
    {
      id v9 = v8;
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
      *(_DWORD *)AudioBufferList buf = 136315394;
      __int16 v14 = "-[CSVoiceTriggerFirstPassHearst _handleRemoteMicVoiceTriggerEvent:secondPassRequest:completion:]_block_invoke";
      __int16 v15 = 2114;
      __int16 v16 = v10;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s Failed to start audio stream error : %{public}@",  buf,  0x16u);
    }
  }
}

void sub_1000E7EAC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 multiPhraseEnabledStatus]);
  objc_msgSend(v4, "setAllowMph:", objc_msgSend(v5, "multiPhraseSelected"));

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) multiPhraseEnabledStatus]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v6 userSelectedPhraseType]));
  [v4 setUserSelectedPhraseType:v7];

  uint64_t v8 = objc_alloc(&OBJC_CLASS___NSUUID);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deviceId]);
  uint64_t v10 = -[NSUUID initWithUUIDString:](v8, "initWithUUIDString:", v9);
  [v4 setEndpointId:v10];

  [v4 setAccessoryModelType:&off_100238B80];
  double v11 = (void *)objc_claimAutoreleasedReturnValue(+[CSBluetoothManager sharedInstance](&OBJC_CLASS___CSBluetoothManager, "sharedInstance"));
  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deviceId]);
  int v13 = (void *)objc_claimAutoreleasedReturnValue([v11 getBluetoothDeviceInfoForDeviceWithId:v12]);
  id v14 = [v13 supportMph];

  __int16 v15 = objc_alloc_init(&OBJC_CLASS___CSCoreSpeechServicesAccessoryInfo);
  -[CSCoreSpeechServicesAccessoryInfo setSupportsJustSiri:](v15, "setSupportsJustSiri:", v14);
  -[CSCoreSpeechServicesAccessoryInfo setSupportsAlwaysOnAccelerometer:](v15, "setSupportsAlwaysOnAccelerometer:", v14);
  [v4 setCSCoreSpeechServicesAccessoryInfo:v15];
}

void sub_1000E802C(uint64_t a1, void *a2, void *a3)
{
  id v5 = (id *)(a1 + 72);
  id v6 = a3;
  id v7 = a2;
  id WeakRetained = objc_loadWeakRetained(v5);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deviceId]);
  [WeakRetained _handleSecondPassResult:v7 secondPassRequest:v9 deviceId:v10 requestOption:*(void *)(a1 + 48) error:v6 completion:*(void *)(a1 + 64)];

  double v11 = (void *)objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerStatAggregator sharedAggregator]( &OBJC_CLASS___CSVoiceTriggerStatAggregator,  "sharedAggregator"));
  id v12 = [v7 result];
  int v13 = (void *)objc_claimAutoreleasedReturnValue([v7 voiceTriggerEventInfo]);

  [v11 logSecondPassResult:v12 eventInfo:v13 triggerAPWakeUp:0];
  id v14 = *(dispatch_queue_s **)(*(void *)(a1 + 56) + 32LL);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_1000E8168;
  v17[3] = &unk_10022EFD0;
  id v15 = *(id *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 56);
  id v18 = v15;
  uint64_t v19 = v16;
  dispatch_async(v14, v17);
}

void sub_1000E8168(uint64_t a1)
{
  uint64_t v2 = (void *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    id v4 = v2;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceId]);
    int v9 = 136315394;
    uint64_t v10 = "-[CSVoiceTriggerFirstPassHearst _handleRemoteMicVoiceTriggerEvent:secondPassRequest:completion:]_block_invoke_2";
    __int16 v11 = 2114;
    id v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Teardown hearst second pass request for device id : %{public}@",  (uint8_t *)&v9,  0x16u);
  }

  id v6 = *(void **)(a1 + 32);
  id v7 = *(void **)(*(void *)(a1 + 40) + 40LL);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 deviceId]);
  [v7 removeObjectForKey:v8];
}

id sub_1000E826C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    id v5 = "-[CSVoiceTriggerFirstPassHearst _handleRemoteMicVoiceTriggerEvent:secondPassRequest:completion:]_block_invoke_2";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s Audio stream started", (uint8_t *)&v4, 0xCu);
  }

  return [*(id *)(a1 + 32) holdAudioStreamWithTimeout:5.0];
}

id sub_1000E8320(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    id v5 = "-[CSVoiceTriggerFirstPassHearst siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEve"
         "ntUUID:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Siri Client start listening now, CSVoiceTriggerFirstPassHearst can stop listening now",  (uint8_t *)&v4,  0xCu);
  }

  return [*(id *)(a1 + 32) _cancelAllAudioStreamHoldings];
}

id sub_1000E83D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) setPhoneCallState:*(void *)(a1 + 40)];
}

void sub_1000E83D8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) type] == (id)2)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
    unsigned int v3 = [v2 voiceTriggerEnabled];

    if (v3)
    {
      if (!CSIsWatch(v4, v5)
        || (id v6 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences")),
            unsigned __int8 v7 = [v6 phraseSpotterEnabled],
            v6,
            (v7 & 1) != 0))
      {
        uint64_t v8 = *(void *)(a1 + 40);
        uint64_t v9 = *(void *)(v8 + 104);
        if (v9 == 2)
        {
          if (!+[CSUtils supportRingtoneA2DP](&OBJC_CLASS___CSUtils, "supportRingtoneA2DP"))
          {
            id v33 = (os_log_s *)CSLogContextFacilityCoreSpeech;
            if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v34 = *(void **)(a1 + 32);
              *(_DWORD *)AudioBufferList buf = 136315394;
              __int16 v68 = "-[CSVoiceTriggerFirstPassHearst activationEventNotificationHandler:event:completion:]_block_invoke";
              __int16 v69 = 2114;
              uint64_t v70 = v34;
              _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "%s Ignore %{public}@ since Siri client is currently in a ringtone and does not support A2DP",  buf,  0x16u);
            }

            uint64_t v12 = 606LL;
            goto LABEL_43;
          }

          uint64_t v8 = *(void *)(a1 + 40);
          uint64_t v9 = *(void *)(v8 + 104);
        }

        if (v9 == 4)
        {
          uint64_t v31 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v32 = *(void **)(a1 + 32);
            *(_DWORD *)AudioBufferList buf = 136315394;
            __int16 v68 = "-[CSVoiceTriggerFirstPassHearst activationEventNotificationHandler:event:completion:]_block_invoke";
            __int16 v69 = 2114;
            uint64_t v70 = v32;
            _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "%s Ignore %{public}@ since Siri client is currently in an outgoing call",  buf,  0x16u);
          }

          uint64_t v12 = 608LL;
          goto LABEL_43;
        }

        if (v9 == 3)
        {
          uint64_t v10 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v11 = *(void **)(a1 + 32);
            *(_DWORD *)AudioBufferList buf = 136315394;
            __int16 v68 = "-[CSVoiceTriggerFirstPassHearst activationEventNotificationHandler:event:completion:]_block_invoke";
            __int16 v69 = 2114;
            uint64_t v70 = v11;
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s Ignore %{public}@ since Siri client is currently in a connected call",  buf,  0x16u);
          }

          uint64_t v12 = 607LL;
        }

        else if ([*(id *)(v8 + 112) isOtherNonEligibleAppRecording])
        {
          id v35 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v36 = *(void **)(a1 + 32);
            *(_DWORD *)AudioBufferList buf = 136315394;
            __int16 v68 = "-[CSVoiceTriggerFirstPassHearst activationEventNotificationHandler:event:completion:]_block_invoke";
            __int16 v69 = 2114;
            uint64_t v70 = v36;
            _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "%s Ignore %{public}@ since there is an other non eligible app recording",  buf,  0x16u);
          }

          uint64_t v12 = 609LL;
        }

        else
        {
          if (![*(id *)(*(void *)(a1 + 40) + 120) isStreaming])
          {
            __int16 v41 = (void *)objc_claimAutoreleasedReturnValue( +[CSSiriRestrictionOnLockScreenMonitor sharedInstance]( &OBJC_CLASS___CSSiriRestrictionOnLockScreenMonitor,  "sharedInstance"));
            if ([v41 isRestricted])
            {
              uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(+[CSScreenLockMonitor sharedInstance](&OBJC_CLASS___CSScreenLockMonitor, "sharedInstance"));
              unsigned int v43 = [v42 isScreenLocked];

              if (v43)
              {
                uint64_t v44 = (void *)CSLogContextFacilityCoreSpeech;
                if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
                {
                  __int128 v45 = *(void **)(a1 + 32);
                  __int128 v46 = v44;
                  __int128 v47 = (void *)objc_claimAutoreleasedReturnValue([v45 localizedDescription]);
                  *(_DWORD *)AudioBufferList buf = 136315394;
                  __int16 v68 = "-[CSVoiceTriggerFirstPassHearst activationEventNotificationHandler:event:completion:]_block_invoke";
                  __int16 v69 = 2114;
                  uint64_t v70 = v47;
                  _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "%s Ignore %{public}@ since screen is locked and Siri is restricted on lock screen",  buf,  0x16u);
                }

                uint64_t v12 = 612LL;
                goto LABEL_43;
              }
            }

            else
            {
            }

            __int128 v48 = *(void **)(*(void *)(a1 + 40) + 40LL);
            uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceId]);
            __int16 v50 = (void *)objc_claimAutoreleasedReturnValue([v48 objectForKey:v49]);

            __int16 v51 = (void *)CSLogCategoryVT;
            BOOL v52 = os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT);
            if (v50)
            {
              if (v52)
              {
                uint64_t v53 = *(void **)(a1 + 32);
                __int16 v54 = v51;
                id v55 = (void *)objc_claimAutoreleasedReturnValue([v53 deviceId]);
                *(_DWORD *)AudioBufferList buf = 136315394;
                __int16 v68 = "-[CSVoiceTriggerFirstPassHearst activationEventNotificationHandler:event:completion:]_block_invoke";
                __int16 v69 = 2114;
                uint64_t v70 = v55;
                _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "%s We already have matched hearst second pass request : %{public}@",  buf,  0x16u);
              }

              uint64_t v56 = *(void **)(*(void *)(a1 + 40) + 40LL);
              __int128 v57 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceId]);
              __int128 v58 = (CSHearstSecondPassRequest *)objc_claimAutoreleasedReturnValue([v56 objectForKey:v57]);
            }

            else
            {
              if (v52)
              {
                uint64_t v59 = *(void **)(a1 + 32);
                __int128 v60 = v51;
                __int128 v61 = (void *)objc_claimAutoreleasedReturnValue([v59 deviceId]);
                *(_DWORD *)AudioBufferList buf = 136315394;
                __int16 v68 = "-[CSVoiceTriggerFirstPassHearst activationEventNotificationHandler:event:completion:]_block_invoke";
                __int16 v69 = 2114;
                uint64_t v70 = v61;
                _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "%s There is no matched hearst second pass request, creating new one : %{public}@",  buf,  0x16u);
              }

              uint64_t v62 = objc_alloc(&OBJC_CLASS___CSHearstSecondPassRequest);
              __int128 v63 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceId]);
              __int128 v58 = -[CSHearstSecondPassRequest initWithDeviceID:speechManager:]( v62,  "initWithDeviceID:speechManager:",  v63,  *(void *)(*(void *)(a1 + 40) + 88LL));

              __int128 v64 = *(void **)(*(void *)(a1 + 40) + 40LL);
              uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceId]);
              [v64 setObject:v58 forKey:v65];

              -[CSHearstSecondPassRequest setAsset:](v58, "setAsset:", *(void *)(*(void *)(a1 + 40) + 48LL));
              -[CSHearstSecondPassRequest start](v58, "start");
            }

            [*(id *)(a1 + 40) _handleRemoteMicVoiceTriggerEvent:*(void *)(a1 + 32) secondPassRequest:v58 completion:*(void *)(a1 + 48)];

            uint64_t v27 = 0LL;
            goto LABEL_45;
          }

          __int16 v37 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v38 = *(void **)(a1 + 32);
            *(_DWORD *)AudioBufferList buf = 136315394;
            __int16 v68 = "-[CSVoiceTriggerFirstPassHearst activationEventNotificationHandler:event:completion:]_block_invoke";
            __int16 v69 = 2114;
            uint64_t v70 = v38;
            _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "%s Ignore %{public}@ since Siri client is current listening",  buf,  0x16u);
          }

          uint64_t v12 = 603LL;
        }

LABEL_43:
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  v12,  0LL));
        uint64_t v39 = *(void *)(a1 + 48);
        if (v39) {
          (*(void (**)(uint64_t, void, void *))(v39 + 16))(v39, 0LL, v27);
        }
        goto LABEL_45;
      }
    }

    __int16 v25 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      id v40 = *(void **)(a1 + 32);
      *(_DWORD *)AudioBufferList buf = 136315394;
      __int16 v68 = "-[CSVoiceTriggerFirstPassHearst activationEventNotificationHandler:event:completion:]_block_invoke";
      __int16 v69 = 2114;
      uint64_t v70 = v40;
      _os_log_error_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "%s Ignore %{public}@ since VoiceTrigger was turned off",  buf,  0x16u);
    }

    uint64_t v26 = *(void *)(a1 + 48);
    if (v26)
    {
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  604LL,  0LL));
      (*(void (**)(uint64_t, void, void *))(v26 + 16))(v26, 0LL, v27);
LABEL_45:
    }
  }

  else if ([*(id *)(a1 + 32) type] == (id)3)
  {
    int v13 = (void *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
    {
      id v14 = *(void **)(a1 + 32);
      id v15 = v13;
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v14 deviceId]);
      [*(id *)(a1 + 32) vadScore];
      double v17 = *(float *)(*(void *)(a1 + 40) + 8LL);
      *(_DWORD *)AudioBufferList buf = 136315906;
      __int16 v68 = "-[CSVoiceTriggerFirstPassHearst activationEventNotificationHandler:event:completion:]_block_invoke";
      __int16 v69 = 2114;
      uint64_t v70 = v16;
      __int16 v71 = 2050;
      double v72 = v18;
      __int16 v73 = 2050;
      double v74 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%s deviceID = %{public}@, RemoteMicVADScore = %{public}f, Threshold = %{public}f",  buf,  0x2Au);
    }

    uint64_t v19 = *(void **)(*(void *)(a1 + 40) + 40LL);
    id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceId]);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKey:v20]);

    if (v21
      && (uint64_t v22 = *(void **)(*(void *)(a1 + 40) + 40LL),
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceId]),
          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v22 objectForKey:v23]),
          v23,
          v24))
    {
      [*(id *)(a1 + 32) vadScore];
      objc_msgSend(v24, "setRemoteMicVADScore:");
      [*(id *)(a1 + 40) _handleRemoteMicVADEventWithSecondPassRequest:v24];
    }

    else
    {
      uint64_t v29 = (os_log_s *)CSLogCategoryVT;
      if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioBufferList buf = 136315138;
        __int16 v68 = "-[CSVoiceTriggerFirstPassHearst activationEventNotificationHandler:event:completion:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "%s RemoteMicVAD event will be ignored since firstPassSource:Hearst, device id does not match",  buf,  0xCu);
      }
    }

    uint64_t v30 = *(void *)(a1 + 48);
    if (v30) {
      (*(void (**)(uint64_t, uint64_t, void))(v30 + 16))(v30, 1LL, 0LL);
    }
  }

  else
  {
    uint64_t v28 = *(void *)(a1 + 48);
    if (v28)
    {
      id v66 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  114LL,  0LL));
      (*(void (**)(uint64_t, void))(v28 + 16))(v28, 0LL);
    }
  }

id sub_1000E8CEC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setAsset:*(void *)(a1 + 40)];
}

id sub_1000E8CF8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reset];
}

id sub_1000E8D00(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[CSVoiceTriggerFirstPassHearst start]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 120), "registerObserver:");
}

id sub_1000E8DB4(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 96) phoneCallState];
  *(void *)(*(void *)(a1 + 32) + 104LL) = result;
  return result;
}

LABEL_25:
        uint64_t v9 = (char *)v9 + 1;
      }

      while (v9 != v7);
      unsigned __int8 v7 = -[NSMapTable countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v30,  v39,  16LL);
    }

    while (v7);
  }
}

void sub_1000ED138(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v5 = 136315394;
    id v6 = "-[CSAttSiriController CSAudioRouteChangeMonitor:didReceiveAudioRouteChangeEvent:]_block_invoke";
    __int16 v7 = 1026;
    int v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Received audio route change monitor event : %{public}d",  (uint8_t *)&v5,  0x12u);
  }

  unint64_t v4 = *(void *)(a1 + 40) - 2LL;
  if (v4 <= 4 && ((0x1Bu >> v4) & 1) != 0) {
    [*(id *)(a1 + 32) _receivedHearstRoutedEvent:qword_10018B288[v4]];
  }
}

uint64_t sub_1000ED220(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000ED230(uint64_t a1)
{
}

void sub_1000ED238(uint64_t a1)
{
}

uint64_t sub_1000ED24C(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 9LL);
  return result;
}

id sub_1000ED260(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 128);
  *(void *)(v2 + 12_Block_object_dispose(va, 8) = 0LL;

  return [*(id *)(a1 + 32) startAttendingWithContext:*(void *)(a1 + 40)];
}

void sub_1000ED290(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 88);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000ED324;
  block[3] = &unk_10022EA98;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

void sub_1000ED324(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      uint64_t v4 = "-[CSAttSiriController _startProcessingContinuousConversationRequest:]_block_invoke_2";
      __int16 v5 = 2112;
      uint64_t v6 = v1;
      _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s error in startProcessing :%@",  (uint8_t *)&v3,  0x16u);
    }
  }

  else
  {
    [*(id *)(a1 + 40) _startAudioStreamForContinuousConversation:*(void *)(*(void *)(a1 + 40) + 104) withStartStreamOption:*(void *)(a1 + 48)];
  }

id sub_1000ED414(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(v3 + 232);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1000ED4B4;
  void v9[3] = &unk_10022E730;
  void v9[4] = v3;
  [v4 startAudioStreamWithOption:v2 completion:v9];
  uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestMHUUID]);
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 128);
  *(void *)(v6 + 12_Block_object_dispose(va, 8) = v5;

  [*(id *)(*(void *)(a1 + 32) + 184) setMhId:*(void *)(*(void *)(a1 + 32) + 128)];
  return [*(id *)(*(void *)(a1 + 32) + 80) setMhId:*(void *)(*(void *)(a1 + 32) + 128)];
}

void sub_1000ED4B4(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    [*(id *)(a1 + 32) _setPendingActivationStatus:0];
    uint64_t v6 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      id v7 = v6;
      int v8 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
      int v9 = 136315394;
      uint64_t v10 = "-[CSAttSiriController _startAudioStreamForContinuousConversation:withStartStreamOption:]_block_invoke_2";
      __int16 v11 = 2114;
      uint64_t v12 = v8;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Failed to start audioSrcNode : %{public}@",  (uint8_t *)&v9,  0x16u);
    }
  }
}

void sub_1000ED5B4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315138;
    int v9 = "-[CSAttSiriController startSpeechProcessing:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v8, 0xCu);
  }

  uint64_t v3 = *(_BYTE **)(a1 + 32);
  if (v3[10])
  {
    [v3 _setPendingActivationStatus:1];
    *(void *)(*(void *)(a1 + 32) + 24+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = *(void *)(a1 + 40);
    uint64_t v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 128LL);
      int v8 = 136315650;
      int v9 = "-[CSAttSiriController startSpeechProcessing:]_block_invoke";
      __int16 v10 = 2048;
      uint64_t v11 = v5;
      __int16 v12 = 2112;
      uint64_t v13 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s startSampleId:%llu _requestMHUUID:%@",  (uint8_t *)&v8,  0x20u);
    }

    [*(id *)(a1 + 32) _startProcessingContinuousConversationRequest:*(void *)(a1 + 40)];
  }

  else
  {
    id v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315138;
      int v9 = "-[CSAttSiriController startSpeechProcessing:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s deferredActivation not enabled. bail-out!",  (uint8_t *)&v8,  0xCu);
    }
  }

id sub_1000ED750(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)AudioBufferList buf = 136315394;
    uint64_t v13 = "-[CSAttSiriController handleEndOfAttendingForRequestId:]_block_invoke";
    __int16 v14 = 2114;
    uint64_t v15 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Stop audio stream for Id: %{public}@",  buf,  0x16u);
  }

  [*(id *)(a1 + 40) _reconfigureRequiredNodes:0 enforceAttendingAudioNode:0];
  uint64_t v4 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void **)(*(void *)(a1 + 40) + 232LL);
    uint64_t v6 = v4;
    unsigned int v7 = [v5 isStreaming];
    *(_DWORD *)AudioBufferList buf = 136315394;
    uint64_t v13 = "-[CSAttSiriController handleEndOfAttendingForRequestId:]_block_invoke";
    __int16 v14 = 1024;
    LODWORD(v15) = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s _attendingAudioNode streaming :%u",  buf,  0x12u);
  }

  id result = [*(id *)(*(void *)(a1 + 40) + 232) isStreaming];
  if ((_DWORD)result)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    __int16 v10 = *(void **)(v9 + 232);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_1000ED8E8;
    void v11[3] = &unk_10022E730;
    void v11[4] = v9;
    return [v10 stopAudioStreamWithOption:0 completion:v11];
  }

  return result;
}

void sub_1000ED8E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(dispatch_queue_s **)(v1 + 88);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000ED940;
  block[3] = &unk_10022F100;
  void block[4] = v1;
  dispatch_async(v2, block);
}

id sub_1000ED940(uint64_t a1)
{
  return [*(id *)(a1 + 32) _releaseAttSiriTransactionIfNeeded];
}

void sub_1000ED948(id a1, id a2)
{
}

void sub_1000ED950(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSAttSiriStateMonitor sharedInstance](&OBJC_CLASS___CSAttSiriStateMonitor, "sharedInstance"));
    unsigned __int8 v3 = [v2 isAttending];

    if ((v3 & 1) != 0)
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[CSAttSiriStateMonitor sharedInstance](&OBJC_CLASS___CSAttSiriStateMonitor, "sharedInstance"));
      [v4 updateState:0];

      [*(id *)(a1 + 40) _reconfigureRequiredNodes:0 enforceAttendingAudioNode:0];
      if (![*(id *)(a1 + 32) reqSrc])
      {
        [*(id *)(a1 + 40) _setPendingActivationStatus:0];
        [*(id *)(*(void *)(a1 + 40) + 224) stopAttendingForRequestId:*(void *)(*(void *)(a1 + 40) + 128) isReqCC:0 forceStop:1];
      }
    }

    else
    {
      uint64_t v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 136315138;
        unsigned int v7 = "-[CSAttSiriController stopAttendingWithContext:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s skip since isAttending = NO",  (uint8_t *)&v6,  0xCu);
      }
    }
  }

void sub_1000EDAB0(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSAttSiriStateMonitor sharedInstance](&OBJC_CLASS___CSAttSiriStateMonitor, "sharedInstance"));
    unsigned int v3 = [v2 isAttending];

    if (v3)
    {
      uint64_t v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v16 = 136315138;
      double v17 = "-[CSAttSiriController startAttendingWithContext:]_block_invoke";
      uint64_t v5 = "%s skip since isAttending = YES";
      goto LABEL_8;
    }

    if ([*(id *)(*(void *)(a1 + 40) + 104) isRequestDuringActiveCall])
    {
      uint64_t v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v16 = 136315138;
      double v17 = "-[CSAttSiriController startAttendingWithContext:]_block_invoke";
      uint64_t v5 = "%s skip since isRequestDuringActiveCall = YES";
      goto LABEL_8;
    }

    int v6 = (void *)objc_claimAutoreleasedReturnValue(+[CSAttSiriStateMonitor sharedInstance](&OBJC_CLASS___CSAttSiriStateMonitor, "sharedInstance"));
    [v6 updateState:1];

    if (![*(id *)(a1 + 32) reqSrc])
    {
      id v7 = +[CSUtils isContinuousConversationSupported](&OBJC_CLASS___CSUtils, "isContinuousConversationSupported");
      if ((v7 & 1) != 0)
      {
        uint64_t v9 = *(void *)(a1 + 40);
        if (*(_BYTE *)(v9 + 10))
        {
          unsigned int v10 = [*(id *)(v9 + 64) getLastMitigationResultForRequestId:*(void *)(v9 + 128)];
          uint64_t v11 = v10 ^ 1;
          __int16 v12 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          id v7 = (id)os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v7)
          {
            uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 128LL);
            int v16 = 136315650;
            double v17 = "-[CSAttSiriController startAttendingWithContext:]_block_invoke";
            __int16 v18 = 2112;
            uint64_t v19 = v13;
            __int16 v20 = 1024;
            unsigned int v21 = v10;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s _requestMHUUID:%@, cached MitigationResult:%u",  (uint8_t *)&v16,  0x1Cu);
          }
        }

        else
        {
          uint64_t v11 = 0LL;
        }

        uint64_t v14 = CSIsWatch(v7, v8);
        [*(id *)(*(void *)(a1 + 40) + 224) startAttendingWithAudioRecordContext:*(void *)(*(void *)(a1 + 40) + 104) withRequestId:*(void *)(*(void *)(a1 + 40) + 128) shouldStartTimer:v11];
      }

      else
      {
        uint64_t v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
        {
          int v16 = 136315138;
          double v17 = "-[CSAttSiriController startAttendingWithContext:]_block_invoke";
          uint64_t v5 = "%s Unsupported XPC call when CC is disabled, do nothing";
LABEL_8:
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v16, 0xCu);
        }
      }
    }
  }

id sub_1000EDD34(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[CSAttSiriController attSiriAudioSrcNodeDidStopUnexpectedly:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  return [*(id *)(a1 + 32) _handleStopProcessing];
}

id sub_1000EDDE4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[CSAttSiriController attSiriAttendingAudioSrcNodeDidStopUnexpectedly:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  return [*(id *)(*(void *)(a1 + 32) + 224) stopAttendingForRequestId:*(void *)(*(void *)(a1 + 32) + 128) isReqCC:1 forceStop:1];
}

void sub_1000EDEA4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(dispatch_queue_s **)(v1 + 88);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000EDEFC;
  block[3] = &unk_10022F100;
  void block[4] = v1;
  dispatch_async(v2, block);
}

id sub_1000EDEFC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _releaseAttSiriTransactionIfNeeded];
}

void sub_1000EDF04(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  uint64_t v5 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = v5;
    id v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSError localizedDescription](a3, "localizedDescription"));
    int v8 = 136315650;
    uint64_t v9 = "-[CSAttSiriController _handleStartProcessingWithRecordContext:withAudioStartStreamOptions:completion:]_block_invoke";
    __int16 v10 = 1026;
    BOOL v11 = v4;
    __int16 v12 = 2114;
    uint64_t v13 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s AFTM started for siri request status: %{public}d with error: %{public}@",  (uint8_t *)&v8,  0x1Cu);
  }

void sub_1000EDFF0(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  uint64_t v5 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = v5;
    id v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSError localizedDescription](a3, "localizedDescription"));
    int v8 = 136315650;
    uint64_t v9 = "-[CSAttSiriController _setupAudioSrcNodeWithSiriClientStream:]_block_invoke";
    __int16 v10 = 1024;
    BOOL v11 = v4;
    __int16 v12 = 2112;
    uint64_t v13 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Attached to siri client stream with result: %d error:%@",  (uint8_t *)&v8,  0x1Cu);
  }

void sub_1000EE0DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(dispatch_queue_s **)(v7 + 88);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000EE18C;
  block[3] = &unk_10022EA98;
  id v12 = v6;
  id v13 = v5;
  uint64_t v14 = v7;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void sub_1000EE18C(uint64_t a1)
{
  if (!*(void *)(a1 + 32) && (uint64_t v7 = *(void **)(a1 + 40)) != 0 && [v7 assetProvider] == (id)2)
  {
    objc_storeStrong((id *)(*(void *)(a1 + 48) + 160LL), *(id *)(a1 + 40));
    int v8 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = *(void **)(*(void *)(a1 + 48) + 160LL);
      int v10 = 136315394;
      BOOL v11 = "-[CSAttSiriController _fetchVoiceTriggerAssets]_block_invoke_2";
      __int16 v12 = 2112;
      id v13 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s Updating VT asset to %@",  (uint8_t *)&v10,  0x16u);
    }
  }

  else
  {
    uint64_t v2 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v3 = *(void **)(a1 + 32);
      BOOL v4 = v2;
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 localizedDescription]);
      uint64_t v6 = *(void *)(a1 + 40);
      int v10 = 136315650;
      BOOL v11 = "-[CSAttSiriController _fetchVoiceTriggerAssets]_block_invoke";
      __int16 v12 = 2112;
      id v13 = v5;
      __int16 v14 = 2114;
      uint64_t v15 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Unable to get UAF VT assets with err: %@, asset: %{public}@",  (uint8_t *)&v10,  0x20u);
    }
  }

void sub_1000EE314(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[CSAttSiriMitigationAssetHandler sharedHandler]( &OBJC_CLASS___CSAttSiriMitigationAssetHandler,  "sharedHandler"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1000EE390;
  v3[3] = &unk_10022E340;
  void v3[4] = *(void *)(a1 + 32);
  [v2 getMitigationAssetWithEndpointId:0 completion:v3];
}

void sub_1000EE390(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(dispatch_queue_s **)(v7 + 88);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000EE440;
  block[3] = &unk_10022EA98;
  id v12 = v6;
  id v13 = v5;
  uint64_t v14 = v7;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void sub_1000EE440(void *a1)
{
  if (a1[4] || (id v9 = (void *)a1[5]) == 0LL)
  {
    uint64_t v2 = a1[6];
    unsigned int v3 = *(void **)(v2 + 152);
    *(void *)(v2 + 152) = 0LL;

    BOOL v4 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = (void *)a1[4];
      id v6 = v4;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
      uint64_t v8 = a1[5];
      int v12 = 136315650;
      id v13 = "-[CSAttSiriController _fetchMitigationAssets]_block_invoke";
      __int16 v14 = 2112;
      uint64_t v15 = v7;
      __int16 v16 = 2114;
      uint64_t v17 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Unable to get Trial mitigation assets with err: %@, asset: %{public}@",  (uint8_t *)&v12,  0x20u);
    }
  }

  else
  {
    objc_storeStrong((id *)(a1[6] + 152LL), v9);
    id v10 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v11 = *(void **)(a1[6] + 152LL);
      int v12 = 136315394;
      id v13 = "-[CSAttSiriController _fetchMitigationAssets]_block_invoke_3";
      __int16 v14 = 2112;
      uint64_t v15 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s Updating mitigation asset to %@",  (uint8_t *)&v12,  0x16u);
    }
  }

void sub_1000EE5CC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    int v4 = 136315394;
    id v5 = "-[CSAttSiriController notifySiriSessionStateChange:]_block_invoke";
    __int16 v6 = 1024;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s startAttending:%u", (uint8_t *)&v4, 0x12u);
  }

  if (*(_BYTE *)(a1 + 40)) {
    [*(id *)(*(void *)(a1 + 32) + 224) startAttendingWithAudioRecordContext:*(void *)(*(void *)(a1 + 32) + 104) withRequestId:*(void *)(*(void *)(a1 + 32) + 128) shouldStartTimer:1];
  }
}

void sub_1000EE6A4(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) attSiriSvcListener]);
  [v1 notifyClientsWithBlock:&stru_10022D1E8];
}

void sub_1000EE6DC(id a1, id a2)
{
}

void sub_1000EE6E4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) attSiriSvcListener]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1000EE768;
  v3[3] = &unk_10022EED0;
  id v4 = *(id *)(a1 + 40);
  [v2 notifyClientsWithBlock:v3];
}

id sub_1000EE768(uint64_t a1, void *a2)
{
  return [a2 attSiriDidDetectAttendingTrigger:*(void *)(a1 + 32)];
}

id sub_1000EE774(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 48) stop];
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v3 + 10)) {
    return [*(id *)(v3 + 104) isContinuousConversation];
  }
  return result;
}

id sub_1000EE7B8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _triggerSiriActivation];
}

id *sub_1000EE7C0(id *result)
{
  if (!*((_BYTE *)result + 40)) {
    return (id *)[result[4] _handleStopProcessing];
  }
  return result;
}

void sub_1000EE7D4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 144LL), *(id *)(a1 + 40));
    uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      uint64_t v8 = "-[CSAttSiriController siriClientBehaviorMonitor:preparedSiriClientAudioStream:successfully:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Cached siri client stream, attach after nodes start",  (uint8_t *)&v7,  0xCu);
    }

    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 144) streamRequest]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 recordContext]);
    unsigned __int8 v5 = [v4 isDictation];

    if ((v5 & 1) == 0) {
      [*(id *)(a1 + 32) _fetchRequiredAssets];
    }
  }

  else
  {
    __int16 v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315138;
      uint64_t v8 = "-[CSAttSiriController siriClientBehaviorMonitor:preparedSiriClientAudioStream:successfully:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Skip asking audioSrcNode to prepare since Siri client failed to prepare audio",  (uint8_t *)&v7,  0xCu);
    }
  }

void sub_1000EE930(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 144LL), *(id *)(a1 + 40));
    uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      uint64_t v8 = "-[CSAttSiriController siriClientBehaviorMonitor:fetchedSiriClientAudioStream:successfully:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Cached siri client stream, attach after nodes start",  (uint8_t *)&v7,  0xCu);
    }

    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 144) streamRequest]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 recordContext]);
    unsigned __int8 v5 = [v4 isDictation];

    if ((v5 & 1) == 0) {
      [*(id *)(a1 + 32) _fetchRequiredAssets];
    }
  }

  else
  {
    __int16 v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315138;
      uint64_t v8 = "-[CSAttSiriController siriClientBehaviorMonitor:fetchedSiriClientAudioStream:successfully:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Skip asking audioSrcNode to prepare since Siri client failed to prepare audio",  (uint8_t *)&v7,  0xCu);
    }
  }

id sub_1000EEA8C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    unsigned __int8 v5 = "-[CSAttSiriController siriClientBehaviorMonitor:didStopStream:withEventUUID:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  return [*(id *)(a1 + 32) _handleStopProcessing];
}

id sub_1000EEB3C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 56) stopWithReason:*(void *)(a1 + 40)];
}

void sub_1000EEB48(uint64_t a1)
{
  uint64_t v2 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 40);
    int v4 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 9LL);
    unsigned __int8 v5 = v2;
    int v23 = 136315650;
    uint64_t v24 = "-[CSAttSiriController siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:]_block_invoke";
    __int16 v25 = 1024;
    *(_DWORD *)uint64_t v26 = v4;
    *(_WORD *)&v26[4] = 1024;
    *(_DWORD *)&v26[6] = [v3 isContinuousConversation];
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s pendingActivation:%u isContextCC:%u",  (uint8_t *)&v23,  0x18u);
  }

  __int16 v6 = *(_BYTE **)(a1 + 32);
  if (v6[9])
  {
    if ([*(id *)(a1 + 40) isContinuousConversation])
    {
      int v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v23 = 136315138;
      uint64_t v24 = "-[CSAttSiriController siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:]_block_invoke";
      uint64_t v8 = "%s _pendingActivationProcessing - bail-out";
      id v9 = v7;
      os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v23, 0xCu);
      return;
    }

    __int16 v6 = *(_BYTE **)(a1 + 32);
  }

  [v6 _setPendingActivationStatus:0];
  BOOL v11 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = *(unsigned __int8 *)(a1 + 64);
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 48);
    uint64_t v15 = *(void *)(a1 + 56);
    int v23 = 136316162;
    uint64_t v24 = "-[CSAttSiriController siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:]_block_invoke";
    __int16 v25 = 2112;
    *(void *)uint64_t v26 = v13;
    *(_WORD *)&v26[8] = 1024;
    int v27 = v12;
    __int16 v28 = 2112;
    uint64_t v29 = v14;
    __int16 v30 = 2112;
    uint64_t v31 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s context:%@, flag:%u option:%@, eventUUID:%@",  (uint8_t *)&v23,  0x30u);
  }

  if (!*(_BYTE *)(a1 + 64))
  {
    [*(id *)(a1 + 32) _handleStopProcessing];
    uint64_t v22 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO)) {
      return;
    }
    int v23 = 136315138;
    uint64_t v24 = "-[CSAttSiriController siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:]_block_invoke";
    uint64_t v8 = "%s Skip asking audioSrcNode to record since Siri client failed to start audio";
    id v9 = v22;
    os_log_type_t v10 = OS_LOG_TYPE_INFO;
    goto LABEL_18;
  }

  uint64_t v16 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requestMHUUID]);
  uint64_t v17 = *(void *)(a1 + 32);
  __int16 v18 = *(void **)(v17 + 128);
  *(void *)(v17 + 12_Block_object_dispose(va, 8) = v16;

  uint64_t v19 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 128LL);
    int v23 = 136315394;
    uint64_t v24 = "-[CSAttSiriController siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:]_block_invoke";
    __int16 v25 = 2112;
    *(void *)uint64_t v26 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "%s _requestMHUUID set to :%@",  (uint8_t *)&v23,  0x16u);
  }

  [*(id *)(*(void *)(a1 + 32) + 184) setMhId:*(void *)(*(void *)(a1 + 32) + 128)];
  [*(id *)(*(void *)(a1 + 32) + 80) setMhId:*(void *)(*(void *)(a1 + 32) + 128)];
  [*(id *)(*(void *)(a1 + 32) + 56) setMhId:*(void *)(*(void *)(a1 + 32) + 128)];
  [*(id *)(*(void *)(a1 + 32) + 232) cancelAudioStreamHold];
  if (+[CSUtils isContinuousConversationSupported]( &OBJC_CLASS___CSUtils,  "isContinuousConversationSupported"))
  {
    if ([*(id *)(*(void *)(a1 + 32) + 224) shouldRunCCForAudioRecordContext:*(void *)(a1 + 40)])
    {
      id v21 = -[CSAudioStartStreamOption initTandemWithOption:]( objc_alloc(&OBJC_CLASS___CSAudioStartStreamOption),  "initTandemWithOption:",  *(void *)(a1 + 48));
      [v21 setRequireSingleChannelLookup:1];
      [*(id *)(*(void *)(a1 + 32) + 232) startAudioStreamWithOption:v21 completion:&stru_10022D1C8];
    }
  }

void sub_1000EEEA0(id a1, BOOL a2, NSError *a3)
{
  int v4 = a3;
  if (!a2)
  {
    unsigned __int8 v5 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      __int16 v6 = v5;
      int v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSError localizedDescription](v4, "localizedDescription"));
      int v8 = 136315394;
      id v9 = "-[CSAttSiriController siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:]_block_invoke";
      __int16 v10 = 2114;
      BOOL v11 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Failed to start attending audioSrcNode : %{public}@",  (uint8_t *)&v8,  0x16u);
    }
  }
}

void sub_1000EEF90(id *a1)
{
  uint64_t v2 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = a1[5];
    int v4 = *((unsigned __int8 *)a1[4] + 9);
    unsigned __int8 v5 = v2;
    int v17 = 136315650;
    __int16 v18 = "-[CSAttSiriController siriClientBehaviorMonitor:willStartStreamWithContext:option:]_block_invoke";
    __int16 v19 = 1024;
    int v20 = v4;
    __int16 v21 = 1024;
    unsigned int v22 = [v3 isContinuousConversation];
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s pendingActivation:%u isContextCC:%u",  (uint8_t *)&v17,  0x18u);
  }

  __int16 v6 = a1[4];
  if (v6[9])
  {
    if ([a1[5] isContinuousConversation])
    {
      int v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = 136315138;
        __int16 v18 = "-[CSAttSiriController siriClientBehaviorMonitor:willStartStreamWithContext:option:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s _pendingActivationProcessing - bail-out",  (uint8_t *)&v17,  0xCu);
      }

      return;
    }

    __int16 v6 = a1[4];
  }

  [v6 _setPendingActivationStatus:0];
  id v8 = [a1[5] copy];
  id v9 = a1[4];
  __int16 v10 = (void *)v9[13];
  v9[13] = v8;

  objc_storeStrong((id *)a1[4] + 14, a1[6]);
  [a1[4] _handleStartProcessingWithRecordContext:*((void *)a1[4] + 13) withAudioStartStreamOptions:*((void *)a1[4] + 14) completion:0];
  BOOL v11 = a1[4];
  if (v11[18])
  {
    objc_msgSend(v11, "_setupAudioSrcNodeWithSiriClientStream:");
    if (+[CSUtils isContinuousConversationSupported]( &OBJC_CLASS___CSUtils,  "isContinuousConversationSupported"))
    {
      if ([*((id *)a1[4] + 28) shouldRunCCForAudioRecordContext:a1[5]])
      {
        int v12 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
        {
          int v17 = 136315138;
          __int16 v18 = "-[CSAttSiriController siriClientBehaviorMonitor:willStartStreamWithContext:option:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s Create new strong stream for attending audio src",  (uint8_t *)&v17,  0xCu);
        }

        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*((id *)a1[4] + 18) streamRequest]);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*((id *)a1[4] + 18) streamProvider]);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 UUID]);

        id v16 = -[CSAudioStreamRequest initTandemWithRequest:]( objc_alloc(&OBJC_CLASS___CSAudioStreamRequest),  "initTandemWithRequest:",  v13);
        [v16 setRequestListeningMicIndicatorLock:1];
        [a1[4] _prepareAttendingAudioSrcNodeWithStreamRequest:v16 audioProviderUUID:v15];
      }
    }
  }

id sub_1000EF21C(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 104) isContinuousConversation];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = (_BYTE)result;
  return result;
}

uint64_t sub_1000EF250(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 10LL);
  return result;
}

void sub_1000EF264(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 216) = [*(id *)(*(void *)(a1 + 32) + 208) hearstRouteStatus];
  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 208), "addObserver:");
  [*(id *)(*(void *)(a1 + 32) + 56) preheatWithLanguage:0 shouldDownloadMissingAsset:1];
  [*(id *)(a1 + 32) _fetchRequiredAssets];
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[CSPhoneCallStateMonitorFactory phoneCallStateMonitor]( &OBJC_CLASS___CSPhoneCallStateMonitorFactory,  "phoneCallStateMonitor"));
  [v2 addObserver:*(void *)(a1 + 32)];
}

void sub_1000EF2FC(void *a1)
{
  id v2 = *(void **)(a1[4] + 32LL);
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a1[6]));
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 objectForKey:v6]);
  uint64_t v4 = *(void *)(a1[5] + 8LL);
  unsigned __int8 v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id sub_1000EF368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(*(void *)(a1 + 32) + 32) setObject:a3 forKey:a2];
}

void sub_1000EF78C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_1000F0AA8(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategoryAsset;
  if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    unsigned __int8 v5 = "-[CSAssetManager _createPeriodicalDownloadTimer]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Trying to start download meta data",  (uint8_t *)&v4,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _fetchRemoteMetaData];
}

void sub_1000F0B64(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 40)));
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    unsigned __int8 v5 = *(void **)(*(void *)(a1 + 32) + 32LL);
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 40),  0LL));
    int v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:v6]);

    id v8 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v14;
      do
      {
        for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v14 != v10) {
            objc_enumerationMutation(v7);
          }
          int v12 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
          if ((objc_opt_respondsToSelector(v12, "CSAssetManagerDidDownloadNewAsset:") & 1) != 0) {
            [v12 CSAssetManagerDidDownloadNewAsset:*(void *)(a1 + 32)];
          }
        }

        id v9 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }

      while (v9);
    }
  }

id sub_1000F0CE4(uint64_t a1)
{
  return [*(id *)(a1 + 32) assetForCurrentLanguageOfType:1 completion:0];
}

id sub_1000F0CF4(uint64_t a1)
{
  return [*(id *)(a1 + 32) assetForCurrentLanguageOfType:3 completion:0];
}

id sub_1000F0D04(uint64_t a1)
{
  return [*(id *)(a1 + 32) assetForCurrentLanguageOfType:4 completion:0];
}

void sub_1000F0D14(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _canFetchRemoteAsset:0])
  {
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(-32768LL, 0LL);
    uint64_t v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000F0D9C;
    block[3] = &unk_10022F100;
    void block[4] = *(void *)(a1 + 32);
    dispatch_async(v3, block);
  }

id sub_1000F0D9C(uint64_t a1)
{
  return [*(id *)(a1 + 32) assetForCurrentLanguageOfType:0 completion:0];
}

void sub_1000F0DAC(void *a1)
{
  id v2 = *(void **)(a1[4] + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a1[6]));
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    unsigned __int8 v5 = *(void **)(a1[4] + 32LL);
    id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a1[6]));
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:v7]);
    [v6 removeObject:a1[5]];
  }

void sub_1000F0E6C(void *a1)
{
  id v2 = *(void **)(a1[4] + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a1[6]));
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (!v4)
  {
    unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSHashTable weakObjectsHashTable](&OBJC_CLASS___NSHashTable, "weakObjectsHashTable"));
    id v6 = *(void **)(a1[4] + 32LL);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a1[6]));
    [v6 setObject:v5 forKeyedSubscript:v7];
  }

  id v8 = *(void **)(a1[4] + 32LL);
  id v10 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a1[6]));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v10]);
  [v9 addObject:a1[5]];
}

void sub_1000F0F68(uint64_t a1)
{
  if ([*(id *)(a1 + 32) allowVoiceTriggerAssetDownloading])
  {
    unsigned int v2 = [*(id *)(*(void *)(a1 + 40) + 24) allowVoiceTriggerAssetDownloading] ^ 1;
    [*(id *)(*(void *)(a1 + 40) + 24) setAllowVoiceTriggerAssetDownloading:1];
  }

  else
  {
    unsigned int v2 = 0;
  }

  if ([*(id *)(a1 + 32) allowEndpointAssetDownloading])
  {
    v2 |= [*(id *)(*(void *)(a1 + 40) + 24) allowEndpointAssetDownloading] ^ 1;
    [*(id *)(*(void *)(a1 + 40) + 24) setAllowEndpointAssetDownloading:1];
  }

  if ([*(id *)(a1 + 32) allowLanguageDetectorAssetDownloading])
  {
    v2 |= [*(id *)(*(void *)(a1 + 40) + 24) allowLanguageDetectorAssetDownloading] ^ 1;
    [*(id *)(*(void *)(a1 + 40) + 24) setAllowLanguageDetectorAssetDownloading:1];
  }

  if ([*(id *)(a1 + 32) allowAdBlockerAssetDownloading])
  {
    v2 |= [*(id *)(*(void *)(a1 + 40) + 24) allowAdBlockerAssetDownloading] ^ 1;
    [*(id *)(*(void *)(a1 + 40) + 24) setAllowAdBlockerAssetDownloading:1];
  }

  if ([*(id *)(a1 + 32) allowSpeakerRecognitionAssetDownloading])
  {
    v2 |= [*(id *)(*(void *)(a1 + 40) + 24) allowSpeakerRecognitionAssetDownloading] ^ 1;
    [*(id *)(*(void *)(a1 + 40) + 24) setAllowSpeakerRecognitionAssetDownloading:1];
  }

  if ([*(id *)(a1 + 32) allowVoiceTriggerAccessoryAssetDownloading])
  {
    v2 |= [*(id *)(*(void *)(a1 + 40) + 24) allowVoiceTriggerAccessoryAssetDownloading] ^ 1;
    [*(id *)(*(void *)(a1 + 40) + 24) setAllowVoiceTriggerAccessoryAssetDownloading:1];
  }

  if ([*(id *)(a1 + 32) allowGibraltarVoiceTriggerAssetDownloading])
  {
    LOBYTE(v2) = [*(id *)(*(void *)(a1 + 40) + 24) allowGibraltarVoiceTriggerAssetDownloading] ^ 1 | v2;
    [*(id *)(*(void *)(a1 + 40) + 24) setAllowGibraltarVoiceTriggerAssetDownloading:1];
  }

  uint64_t v3 = (void *)CSLogCategoryAsset;
  if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(void **)(*(void *)(a1 + 40) + 24LL);
    unsigned __int8 v5 = v3;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 description]);
    int v9 = 136315394;
    id v10 = "-[CSAssetManager setAssetDownloadingOption:]_block_invoke";
    __int16 v11 = 2112;
    int v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%s %@", (uint8_t *)&v9, 0x16u);
  }

  if ((v2 & 1) != 0)
  {
    unsigned int v7 = [*(id *)(*(void *)(a1 + 40) + 8) isEnabled];
    id v8 = (os_log_s *)CSLogCategoryAsset;
    if (v7)
    {
      if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 136315138;
        id v10 = "-[CSAssetManager setAssetDownloadingOption:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s Need to fetch remote meta now, since we have new asset need to be downloaded",  (uint8_t *)&v9,  0xCu);
      }

      [*(id *)(a1 + 40) _fetchRemoteMetaData];
      return;
    }
  }

  else
  {
    id v8 = (os_log_s *)CSLogCategoryAsset;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136315138;
    id v10 = "-[CSAssetManager setAssetDownloadingOption:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s Does not need to fetch remote meta now",  (uint8_t *)&v9,  0xCu);
  }

void sub_1000F1268(uint64_t a1, int a2)
{
  int v4 = (os_log_s *)CSLogCategoryAsset;
  if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
  {
    unsigned __int8 v5 = @"DISABLED";
    if (a2) {
      unsigned __int8 v5 = @"ENABLED";
    }
    *(_DWORD *)AudioBufferList buf = 136315394;
    __int128 v13 = "-[CSAssetManager initWithDownloadOption:]_block_invoke";
    __int16 v14 = 2114;
    __int128 v15 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Asset Manager Policy has been %{public}@",  buf,  0x16u);
  }

  id v6 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained(v6);
  id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1000F13CC;
  void v9[3] = &unk_10022D2B8;
  objc_copyWeak(&v10, v6);
  char v11 = a2;
  dispatch_async(v8, v9);

  objc_destroyWeak(&v10);
}

id sub_1000F13C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startPeriodicalDownload];
}

void sub_1000F13CC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = WeakRetained;
  if (*(_BYTE *)(a1 + 40)) {
    [WeakRetained _startPeriodicalDownload];
  }
  else {
    [WeakRetained _stopPeriodicalDownload];
  }
}

void sub_1000F1454(id a1)
{
  id v3 = objc_alloc_init(&OBJC_CLASS___CSAssetDownloadingOption);
  id v1 = -[CSAssetManager initWithDownloadOption:]( objc_alloc(&OBJC_CLASS___CSAssetManager),  "initWithDownloadOption:",  v3);
  unsigned int v2 = (void *)qword_100280010;
  qword_100280010 = (uint64_t)v1;
}

void sub_1000F1540(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (state)
  {
    if (state == 2)
    {
      if (!*(void *)(a1 + 32)) {
        goto LABEL_15;
      }
      if (!xpc_activity_set_state(v3, 4LL))
      {
        unsigned __int8 v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioBufferList buf = 136315138;
          __int16 v14 = "_RegisterXPCActivity_block_invoke";
          _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Failed setting activity state to continue",  buf,  0xCu);
        }
      }

      uint64_t v6 = *(void *)(a1 + 32);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      v11[2] = sub_1000F1734;
      void v11[3] = &unk_10022F100;
      int v12 = v3;
      (*(void (**)(uint64_t, _xpc_activity_s *, void *))(v6 + 16))(v6, v12, v11);
    }
  }

  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7) {
      (*(void (**)(uint64_t, _xpc_activity_s *))(v7 + 16))(v7, v3);
    }
  }

  if (xpc_activity_should_defer(v3))
  {
    BOOL v8 = xpc_activity_set_state(v3, 3LL);
    int v9 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = @"No";
      *(_DWORD *)AudioBufferList buf = 136315650;
      __int16 v14 = "_RegisterXPCActivity_block_invoke";
      __int16 v15 = 2112;
      __int128 v16 = v3;
      if (v8) {
        id v10 = @"Yes";
      }
      __int16 v17 = 2112;
      __int16 v18 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Deferring activity:%@ deferred:%@",  buf,  0x20u);
    }
  }

void sub_1000F1734(uint64_t a1)
{
  if (!xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5LL))
  {
    id v1 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v2 = 136315138;
      id v3 = "_RegisterXPCActivity_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_ERROR,  "%s Failed setting activity state to done",  (uint8_t *)&v2,  0xCu);
    }
  }

void sub_1000F17EC(id a1, OS_xpc_object *a2, id a3)
{
  id v11 = a3;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[CSPowerLogger sharedPowerLogger](&OBJC_CLASS___CSPowerLogger, "sharedPowerLogger"));
  int v4 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
  id v5 = [v4 voiceTriggerEnabled];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 powerLoggingCurrentLanguage]);
  BOOL v8 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
  int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 powerLoggingCurrentAssetConfigVersion]);
  [v3 powerLogSiriConfigWithVoiceTriggerEnabled:v5 withLanguage:v7 withModelVersion:v9];

  id v10 = v11;
  if (v11)
  {
    (*((void (**)(id))v11 + 2))(v11);
    id v10 = v11;
  }
}

void sub_1000F18D8(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_8_HOURS + XPC_ACTIVITY_INTERVAL_4_HOURS);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_GRACE_PERIOD, 0LL);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_ALLOW_BATTERY, 0);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 0);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_SCREEN_SLEEP, 0);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_1000F1DA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000F1F3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000F23E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1000F27FC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000F280C(uint64_t a1)
{
}

void sub_1000F2814(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (os_log_s *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 136315650;
    __int16 v14 = "-[CSAttSiriTCUCache cleanUpTCUCache:]_block_invoke";
    __int16 v15 = 2112;
    id v16 = v5;
    __int16 v17 = 2112;
    id v18 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s TCUID:%@, TCUCachedObject:%@",  (uint8_t *)&v13,  0x20u);
    uint64_t v7 = (os_log_s *)CSLogCategoryRequest;
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v8 = *(void **)(a1 + 32);
    int v9 = v7;
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 firstTRPId]);
    int v13 = 136315650;
    __int16 v14 = "-[CSAttSiriTCUCache cleanUpTCUCache:]_block_invoke";
    __int16 v15 = 2112;
    id v16 = v8;
    __int16 v17 = 2112;
    id v18 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s _firstTRPIdForSegment:%@, firstTRPId:%@",  (uint8_t *)&v13,  0x20u);
  }

  id v11 = *(void **)(a1 + 32);
  int v12 = (void *)objc_claimAutoreleasedReturnValue([v6 firstTRPId]);
  LODWORD(v11) = [v11 isEqual:v12];

  if ((_DWORD)v11) {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v5];
  }
}

void sub_1000F29C0(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  BOOL v8 = (os_log_s *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioBufferList buf = 136315650;
    int v20 = "-[CSAttSiriTCUCache updateTcuState:]_block_invoke";
    __int16 v21 = 2112;
    id v22 = v6;
    __int16 v23 = 2048;
    id v24 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s TCUID:%@ TCUState:%ld", buf, 0x20u);
  }

  unsigned int v9 = [v7 unsignedIntValue];
  if (v6)
  {
    unsigned int v10 = v9;
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) objectForKeyedSubscript:v6]);
    int v12 = v11;
    if (v11)
    {
      if (v10 == 4)
      {
        int v13 = (os_log_s *)CSLogCategoryRequest;
        if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioBufferList buf = 136315138;
          int v20 = "-[CSAttSiriTCUCache updateTcuState:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%s TCU is moved to -Final- state, hence dropped",  buf,  0xCu);
        }

        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
      }

      else
      {
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v11 TCUPackage]);
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472LL;
        _OWORD v18[2] = sub_1000F2C74;
        v18[3] = &unk_10022D3A8;
        void v18[4] = v10;
        __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 mutatedCopyWithMutator:v18]);
        [v12 setTCUPackage:v17];
      }
    }

    else
    {
      __int16 v15 = (os_log_s *)CSLogCategoryRequest;
      if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        int v20 = "-[CSAttSiriTCUCache updateTcuState:]_block_invoke_2";
        __int16 v21 = 2112;
        id v22 = v6;
        _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%s TCU Object for ID:%@ not found",  buf,  0x16u);
      }
    }
  }

  else
  {
    __int16 v14 = (os_log_s *)CSLogCategoryRequest;
    if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      int v20 = "-[CSAttSiriTCUCache updateTcuState:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%s TCUID is nil!", buf, 0xCu);
    }
  }
}

id sub_1000F2C74(uint64_t a1, void *a2)
{
  return [a2 setTcuState:*(void *)(a1 + 32)];
}

void sub_1000F2C80(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v8 lastTRPId]);
  if ([*(id *)(a1 + 32) isEqualToString:v4])
  {
    uint64_t v5 = objc_claimAutoreleasedReturnValue([v8 TCUPackage]);
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
}

void sub_1000F3C9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47)
{
}

void sub_1000F4C78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1000F6960(void *a1)
{
  id v1 = (os_log_s *)CSLogCategoryRequest;
  if (*(void *)(a1[4] + 56LL))
  {
    if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = a1[5];
      uint64_t v4 = a1[6];
      int v15 = 136315650;
      id v16 = "-[CSAttSiriTCUGenerator _emitSpeechStopDetectedWithTrpId:withHostTime:]_block_invoke";
      __int16 v17 = 2112;
      uint64_t v18 = v3;
      __int16 v19 = 2048;
      uint64_t v20 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "%s Emitting SpeechStopDetected with trpId: %@, hostTime: %llu",  (uint8_t *)&v15,  0x20u);
    }

    id v5 = objc_alloc_init(&OBJC_CLASS___MHSchemaMHSpeechStopDetected);
    id v6 = objc_alloc(&OBJC_CLASS___SISchemaUUID);
    id v7 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", a1[5]);
    id v8 = [v6 initWithNSUUID:v7];
    [v5 setTrpId:v8];

    id v9 = objc_alloc_init(&OBJC_CLASS___MHSchemaMHClientEvent);
    id v10 = objc_alloc_init(&OBJC_CLASS___MHSchemaMHClientEventMetadata);
    id v11 = objc_alloc(&OBJC_CLASS___SISchemaUUID);
    int v12 = -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  *(void *)(a1[4] + 56LL));
    id v13 = [v11 initWithNSUUID:v12];
    [v10 setMhId:v13];

    [v9 setEventMetadata:v10];
    [v9 setSpeechStopDetected:v5];
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(+[AssistantSiriAnalytics sharedStream](&OBJC_CLASS___AssistantSiriAnalytics, "sharedStream"));
    [v14 emitMessage:v9 timestamp:a1[6]];
  }

  else if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_ERROR))
  {
    int v15 = 136315138;
    id v16 = "-[CSAttSiriTCUGenerator _emitSpeechStopDetectedWithTrpId:withHostTime:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_ERROR,  "%s MHID not set, skipping SELF Logging",  (uint8_t *)&v15,  0xCu);
  }

void sub_1000F6BA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = (os_log_s *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = *(unsigned __int8 *)(v4 + 11);
    int v7 = *(unsigned __int8 *)(v4 + 9);
    uint64_t v8 = *(void *)(v4 + 152);
    *(_DWORD *)AudioBufferList buf = 136316418;
    __int16 v23 = "-[CSAttSiriTCUGenerator didCompleteRecognitionTaskWithStatistics:requestId:endpointMode:error:]_block_invoke";
    __int16 v24 = 1024;
    int v25 = v6;
    __int16 v26 = 1024;
    int v27 = v7;
    __int16 v28 = 1024;
    BOOL v29 = v2 == 2;
    __int16 v30 = 2114;
    uint64_t v31 = v8;
    __int16 v32 = 2112;
    uint64_t v33 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s _trpDetectDelivered:%u _trpCandidateDelivered:%u usesManualEndpointing:%u _endpointerMetrics:%{public}@ error:%@",  buf,  0x32u);
  }

  if (v2 == 2)
  {
    id v9 = *(_BYTE **)(a1 + 32);
    if (v9[9])
    {
      if (!v9[11])
      {
        v9[12] = 0;
        [*(id *)(a1 + 32) _deliverTRPDetected:*(void *)(*(void *)(a1 + 32) + 152) withTRPId:*(void *)(*(void *)(a1 + 32) + 80)];
      }
    }
  }

  uint64_t v10 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v10 + 16) && *(void *)(v10 + 184) && *(void *)(a1 + 48))
  {
    objc_msgSend(*(id *)(v10 + 184), "removeObjectForKey:");
    uint64_t v10 = *(void *)(a1 + 32);
  }

  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v10, "recognitionTaskCompletionReceivers", 0));
  id v12 = [v11 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v18;
    do
    {
      for (uint64_t i = 0LL; i != v13; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v14) {
          objc_enumerationMutation(v11);
        }
        id v16 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v16, "didCompleteRecognitionTaskWithStatistics:requestId:endpointMode:error:") & 1) != 0) {
          [v16 didCompleteRecognitionTaskWithStatistics:*(void *)(a1 + 56) requestId:*(void *)(a1 + 48) endpointMode:*(void *)(a1 + 64) error:*(void *)(a1 + 40)];
        }
      }

      id v13 = [v11 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }

    while (v13);
  }
}

void sub_1000F6DC4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v7 = 136315650;
    uint64_t v8 = "-[CSAttSiriTCUGenerator didReceiveFinalResultWithRequestId:multiUserSpeechPackage:taskName:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v3;
    __int16 v11 = 2112;
    uint64_t v12 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Multiuser speechPackage:%@ taskName:%@",  (uint8_t *)&v7,  0x20u);
  }

  uint64_t v5 = *(void **)(a1 + 48);
  int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedUserIdSpeechPackageMap]);
  [v5 _processMultiUserResultCandidate:v6 withId:*(void *)(a1 + 56) isScoreRefreshAllowed:0];
}

void sub_1000F6EB8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v6 = 136315394;
    int v7 = "-[CSAttSiriTCUGenerator didReceiveResultCandidateWithRequestId:rcId:multiUserSpeechPackage:topUserSpeechPackage"
         ":duration:taskName:]_block_invoke";
    __int16 v8 = 2112;
    uint64_t v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Multiuser speechPackage:%@",  (uint8_t *)&v6,  0x16u);
  }

  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedUserIdSpeechPackageMap]);
  [v4 _processMultiUserResultCandidate:v5 withId:*(void *)(a1 + 48) isScoreRefreshAllowed:0];
}

id sub_1000F6FA0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 136315394;
    int v6 = "-[CSAttSiriTCUGenerator didReceiveFinalResultWithRequestId:speechPackage:taskName:]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "KeyLog - %s taskName:%@", (uint8_t *)&v5, 0x16u);
  }

  id result = [*(id *)(a1 + 40) _shouldProcessResultCandidateForTask:*(void *)(a1 + 32)];
  if ((_DWORD)result) {
    return [*(id *)(a1 + 40) _processResultCandidate:*(void *)(a1 + 48) withId:*(void *)(a1 + 56) uresInvocationType:*(void *)(*(void *)(a1 + 40) + 192) isScoreRefreshAllowed:0];
  }
  return result;
}

id sub_1000F7078(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 136315394;
    int v6 = "-[CSAttSiriTCUGenerator didReceiveResultCandidateWithRequestId:rcId:inputOrigin:speechPackage:duration:taskName:]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "KeyLog - %s taskName:%@", (uint8_t *)&v5, 0x16u);
  }

  id result = [*(id *)(a1 + 40) _shouldProcessResultCandidateForTask:*(void *)(a1 + 32)];
  if ((_DWORD)result) {
    return [*(id *)(a1 + 40) _processResultCandidate:*(void *)(a1 + 48) withId:*(void *)(a1 + 56) uresInvocationType:*(void *)(*(void *)(a1 + 40) + 192) isScoreRefreshAllowed:1];
  }
  return result;
}

void sub_1000F7150(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 15LL) = *(_BYTE *)(a1 + 64);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 160) getSelectedTrpIdForEndpointEvent:*(void *)(a1 + 40) withMetrics:*(void *)(a1 + 56) OfType:*(double *)(a1 + 48)]);
  uint64_t v3 = (os_log_s *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    int v11 = 136315650;
    uint64_t v12 = "-[CSAttSiriTCUGenerator attSiriNode:didDetectEndpointEventAtTime:eventType:withMetrics:useEndpointerSignal:]_block_invoke";
    __int16 v13 = 2112;
    uint64_t v14 = v2;
    __int16 v15 = 2048;
    uint64_t v16 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s selectedTrpId:%@ endpointerEvent:%ld",  (uint8_t *)&v11,  0x20u);
  }

  int v5 = *(_BYTE **)(a1 + 32);
  if (!v5[11])
  {
    uint64_t v10 = (os_log_s *)CSLogCategoryRequest;
    if (v2)
    {
      if (v5[15])
      {
        if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = 136315394;
          uint64_t v12 = "-[CSAttSiriTCUGenerator attSiriNode:didDetectEndpointEventAtTime:eventType:withMetrics:useEndpointerSign"
                "al:]_block_invoke";
          __int16 v13 = 2112;
          uint64_t v14 = v2;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s Received selected trpId: %@ sending TRPDetect msg",  (uint8_t *)&v11,  0x16u);
          int v5 = *(_BYTE **)(a1 + 32);
        }

        [v5 _deliverTRPDetected:*(void *)(a1 + 40) withTRPId:v2];
        goto LABEL_18;
      }
    }

    else if (v5[15])
    {
      if (!os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_18;
      }
      int v11 = 136315138;
      uint64_t v12 = "-[CSAttSiriTCUGenerator attSiriNode:didDetectEndpointEventAtTime:eventType:withMetrics:useEndpointerSignal:]_block_invoke";
      __int16 v7 = "%s Bail out since no TRP was selected";
LABEL_16:
      uint64_t v8 = v10;
      uint32_t v9 = 12;
      goto LABEL_17;
    }

    if (!os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_18;
    }
    int v11 = 136315138;
    uint64_t v12 = "-[CSAttSiriTCUGenerator attSiriNode:didDetectEndpointEventAtTime:eventType:withMetrics:useEndpointerSignal:]_block_invoke";
    __int16 v7 = "%s Bail out since we're in manual endpointing mode";
    goto LABEL_16;
  }

  int v6 = (os_log_s *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 136315394;
    uint64_t v12 = "-[CSAttSiriTCUGenerator attSiriNode:didDetectEndpointEventAtTime:eventType:withMetrics:useEndpointerSignal:]_block_invoke";
    __int16 v13 = 2112;
    uint64_t v14 = v2;
    __int16 v7 = "%s Ignore TRP selection for trpId: %@, since TRPDetect is already sent";
    uint64_t v8 = v6;
    uint32_t v9 = 22;
LABEL_17:
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v11, v9);
  }

void sub_1000F73C4(void *a1)
{
  uint64_t v2 = (unsigned __int8 *)a1[4];
  int v3 = v2[11];
  uint64_t v4 = (os_log_s *)CSLogCategoryRequest;
  BOOL v5 = os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      uint64_t v6 = a1[5];
      int v8 = 136315394;
      uint32_t v9 = "-[CSAttSiriTCUGenerator attSiriNode:selectedTRPId:withMetrics:]_block_invoke";
      __int16 v10 = 2112;
      uint64_t v11 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Ignore TRP selection for trpId: %@, since TRPDetect is already sent",  (uint8_t *)&v8,  0x16u);
    }
  }

  else
  {
    if (v5)
    {
      uint64_t v7 = a1[5];
      int v8 = 136315394;
      uint32_t v9 = "-[CSAttSiriTCUGenerator attSiriNode:selectedTRPId:withMetrics:]_block_invoke";
      __int16 v10 = 2112;
      uint64_t v11 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Received selected trpId: %@ sending TRPDetect msg",  (uint8_t *)&v8,  0x16u);
      uint64_t v2 = (unsigned __int8 *)a1[4];
    }

    [v2 _deliverTRPDetected:a1[6] withTRPId:a1[5]];
  }

id sub_1000F74F4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 160) registerEndpointerProxy:*(void *)(a1 + 40)];
}

void sub_1000F7500(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_INFO))
  {
    int v3 = 136315138;
    uint64_t v4 = "-[CSAttSiriTCUGenerator attSiriNode:didDetectHardEndpointAtTime:withMetrics:usesAutomaticEndPointing:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Caching endpointer metrics",  (uint8_t *)&v3,  0xCu);
  }

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 152LL), *(id *)(a1 + 40));
}

void sub_1000F75B4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 112) getTCUPackageWithTrpId:*(void *)(a1 + 40)]);
  int v3 = v2;
  if (v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 requestId]);
    BOOL v5 = *(void **)(a1 + 32);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 speechPackage]);
    [v5 _processResultCandidate:v6 withId:v4 uresInvocationType:*(void *)(*(void *)(a1 + 32) + 192) isScoreRefreshAllowed:0];
  }

  else
  {
    uint64_t v7 = (os_log_s *)CSLogCategoryRequest;
    if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315138;
      uint32_t v9 = "-[CSAttSiriTCUGenerator _generateTCUCandidateWithRefershedScoresForTrpIdAsync:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Cached TCU Package found is nil!",  (uint8_t *)&v8,  0xCu);
    }
  }
}

id sub_1000F76D8()
{
  uint64_t v4 = 0LL;
  BOOL v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_100280040;
  uint64_t v7 = qword_100280040;
  if (!qword_100280040)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1000F778C;
    v3[3] = &unk_10022E990;
    void v3[4] = &v4;
    sub_1000F778C((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000F7774( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000F778C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = objc_getClass("SMTTCUPackage");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_100280040 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    abort_report_np("Unable to find class %s", "SMTTCUPackage");
    sub_1000F77F8();
  }

void sub_1000F77F8()
{
  id v1 = 0LL;
  if (!qword_100280028)
  {
    __int128 v2 = off_10022D518;
    uint64_t v3 = 0LL;
    qword_100280028 = _sl_dlopen(&v2, &v1);
    uint64_t v0 = v1;
    if (qword_100280028)
    {
      if (!v1) {
        return;
      }
    }

    else
    {
      uint64_t v0 = (char *)abort_report_np("%s", v1);
    }

    free(v0);
  }

void sub_1000F78B4(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = objc_getClass("SMTTRPDetected");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_100280038 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v2 = abort_report_np("Unable to find class %s", "SMTTRPDetected");
    sub_1000F7920(v2, v3);
  }

void sub_1000F7920(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 80LL);
    int v6 = 136315650;
    uint64_t v7 = "-[CSAttSiriTCUGenerator _updateTcuCache:]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s TCUObj: %@ lastTRPId:%@",  (uint8_t *)&v6,  0x20u);
  }

  if (v3) {
    [*(id *)(*(void *)(a1 + 32) + 112) addTCU:v3 firstTRPId:*(void *)(*(void *)(a1 + 32) + 72) lastTRPId:*(void *)(*(void *)(a1 + 32) + 80)];
  }
}

id sub_1000F7A10()
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_100280020;
  uint64_t v7 = qword_100280020;
  if (!qword_100280020)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1000F7C10;
    v3[3] = &unk_10022E990;
    void v3[4] = &v4;
    sub_1000F7C10((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000F7AAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000F7AC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 136315138;
    uint64_t v11 = "-[CSAttSiriTCUGenerator _processResultCandidate:withId:uresInvocationType:isScoreRefreshAllowed:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s TCU Pruning Step", (uint8_t *)&v10, 0xCu);
  }

  [*(id *)(a1 + 32) _deliverTRPCandidatePackage:v3];
  [*(id *)(a1 + 32) _updateTcuCache:v3];
  [*(id *)(a1 + 32) _emitTRPRequestLinkEventWithTRPId:*(void *)(*(void *)(a1 + 32) + 80) withRequestId:*(void *)(a1 + 40)];
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = v5[10];
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 48)));
  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([v7 stringValue]);
  [v5 _emitTRPCreatedEventWithTRPId:v6 withResultCandidateId:v8 withRequestId:*(void *)(a1 + 40)];

  id v9 = *(_BYTE **)(a1 + 32);
  if (*(_BYTE *)(a1 + 56)) {
    [v9 _updateRefreshScoresForPackage:v3];
  }
  else {
    v9[12] = 0;
  }
}

Class sub_1000F7C10(uint64_t a1)
{
  Class result = objc_getClass("SMTTRPCandidate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_100280020 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = abort_report_np("Unable to find class %s", "SMTTRPCandidate");
    return (Class)sub_1000F7C7C(v3);
  }

  return result;
}

void sub_1000F7C7C(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = (os_log_s *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioBufferList buf = 136315650;
    id v22 = "-[CSAttSiriTCUGenerator _processMultiUserResultCandidate:withId:isScoreRefreshAllowed:]_block_invoke";
    __int16 v23 = 2112;
    id v24 = v7;
    __int16 v25 = 2112;
    id v26 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%s userId:%@, speechPackage:%@", buf, 0x20u);
  }

  if ([v8 isFinal] {
    && (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = 1,
  }
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), a3),
        [*(id *)(*(void *)(a1 + 32) + 176) count])
    && (int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 176) lastObject]),
        v10,
        v10))
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = 1;
    uint64_t v11 = (os_log_s *)CSLogCategoryRequest;
    if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      id v22 = "-[CSAttSiriTCUGenerator _processMultiUserResultCandidate:withId:isScoreRefreshAllowed:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s force last eager trp candidate",  buf,  0xCu);
    }

    *a4 = 1;
  }

  else
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _generateSingleTCU:v8 withRequestID:*(void *)(a1 + 40) uresInvocationType:*(void *)(*(void *)(a1 + 32) + 192)]);
    __int16 v13 = (os_log_s *)CSLogCategoryRequest;
    if (v12)
    {
      if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(void **)(*(void *)(a1 + 32) + 80LL);
        *(_DWORD *)AudioBufferList buf = 136315650;
        id v22 = "-[CSAttSiriTCUGenerator _processMultiUserResultCandidate:withId:isScoreRefreshAllowed:]_block_invoke";
        __int16 v23 = 2112;
        id v24 = v14;
        __int16 v25 = 2112;
        id v26 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%s TRPId:%@ TCUPackage:%@", buf, 0x20u);
      }

      __int16 v15 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 96) processTCUPackage:v12 requestId:*(void *)(a1 + 40)]);
      if (v15)
      {
        uint64_t v16 = -[NSArray initWithObjects:](objc_alloc(&OBJC_CLASS___NSArray), "initWithObjects:", v15, 0LL);
        __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _generateNewTRPId]);
        id v18 = [objc_alloc((Class)sub_1000F7A10()) initWithTrpCandidateId:v17 requestId:*(void *)(*(void *)(a1 + 32) + 88) tcuList:v16 userId:v7];
        __int128 v19 = (os_log_s *)CSLogCategoryRequest;
        if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioBufferList buf = 136315394;
          id v22 = "-[CSAttSiriTCUGenerator _processMultiUserResultCandidate:withId:isScoreRefreshAllowed:]_block_invoke";
          __int16 v23 = 2112;
          id v24 = v18;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%s trpCandidate:%@", buf, 0x16u);
        }

        [*(id *)(a1 + 48) addObject:v18];
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), a3);
      }

      else
      {
        __int128 v20 = (os_log_s *)CSLogCategoryRequest;
        if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioBufferList buf = 136315138;
          id v22 = "-[CSAttSiriTCUGenerator _processMultiUserResultCandidate:withId:isScoreRefreshAllowed:]_block_invoke";
          _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "%s updatedTCUPackage is nil!",  buf,  0xCu);
        }
      }
    }

    else if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      id v22 = "-[CSAttSiriTCUGenerator _processMultiUserResultCandidate:withId:isScoreRefreshAllowed:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%s TCUPackage is nil!", buf, 0xCu);
    }
  }
}

Class sub_1000F8068(uint64_t a1)
{
  Class result = objc_getClass("SMTMultiUserTRPCandidate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_100280030 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = abort_report_np("Unable to find class %s", "SMTMultiUserTRPCandidate");
    return (Class)sub_1000F80D4(v3);
  }

  return result;
}

void sub_1000F80D4(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  [v4 setMultiUserTrpCandidateId:v3];
  [v4 setRequestId:a1[5]];
  [v4 setTrpCandidateList:a1[6]];
}

void sub_1000F8128(id a1)
{
  id v1 = (os_log_s *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_INFO))
  {
    int v2 = 136315138;
    uint64_t v3 = "-[CSAttSiriTCUGenerator processReadyForExecutionForRequestId:withTrpId:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v2, 0xCu);
  }

void sub_1000F81CC(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    int v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 112), "updateTcuState:"));
    if (v2)
    {
      uint64_t v3 = (os_log_s *)CSLogCategoryRequest;
      if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        int v10 = "-[CSAttSiriTCUGenerator processTCUUpdateMessage:]_block_invoke";
        __int16 v11 = 2112;
        uint64_t v12 = v2;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%s finalizedTRPId:%@", buf, 0x16u);
      }

      [*(id *)(*(void *)(a1 + 40) + 160) processTCUFinalizedForTrpId:v2 withCompletion:&stru_10022D410];
    }

    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_1000F8374;
    v7[3] = &unk_10022D438;
    id v4 = *(void **)(a1 + 32);
    void v7[4] = *(void *)(a1 + 40);
    id v8 = v2;
    id v5 = v2;
    [v4 enumerateKeysAndObjectsUsingBlock:v7];
  }

  else
  {
    uint64_t v6 = (os_log_s *)CSLogCategoryRequest;
    if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      int v10 = "-[CSAttSiriTCUGenerator processTCUUpdateMessage:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s TCU State Update blob is nil!",  buf,  0xCu);
    }
  }

void sub_1000F8374(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 112) getRequestIdForTCUId:v7]);
  if (v6) {
    objc_msgSend( *(id *)(a1 + 32),  "_deliverTCUUpdateForTCUId:withTCUAccepted:forRequestId:isFinal:",  v7,  objc_msgSend(v5, "unsignedIntValue") != 3,  v6,  *(void *)(a1 + 40) != 0);
  }
}

void sub_1000F8404(id a1, BOOL a2, double a3, CSEndpointerMetrics *a4)
{
  BOOL v4 = a2;
  id v5 = (os_log_s *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315394;
    id v7 = "-[CSAttSiriTCUGenerator processTCUUpdateMessage:]_block_invoke";
    __int16 v8 = 1024;
    BOOL v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%s foundMatchingTcu:%u", (uint8_t *)&v6, 0x12u);
  }

void sub_1000F84B8(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recognitionTaskCompletionReceivers]);
    unsigned __int8 v3 = [v2 containsObject:*(void *)(a1 + 32)];

    if ((v3 & 1) == 0)
    {
      id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recognitionTaskCompletionReceivers]);
      [v4 addObject:*(void *)(a1 + 32)];
    }
  }

void sub_1000F8540(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) executionStateReceivers]);
    unsigned __int8 v3 = [v2 containsObject:*(void *)(a1 + 32)];

    if ((v3 & 1) == 0)
    {
      id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) executionStateReceivers]);
      [v4 addObject:*(void *)(a1 + 32)];
    }
  }

void sub_1000F85C8(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) tcuReceivers]);
    unsigned __int8 v3 = [v2 containsObject:*(void *)(a1 + 32)];

    if ((v3 & 1) == 0)
    {
      id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) tcuReceivers]);
      [v5 addObject:*(void *)(a1 + 32)];
    }
  }

  else
  {
    id v4 = (os_log_s *)CSLogCategoryRequest;
    if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      id v7 = "-[CSAttSiriTCUGenerator addTCUReceiver:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s receiver is nil!", buf, 0xCu);
    }
  }

void sub_1000F86F0(void *a1)
{
  uint64_t v2 = a1[4];
  id v1 = (void *)a1[5];
  uint64_t v3 = v1[11];
  id v4 = (os_log_s *)CSLogCategoryRequest;
  if (v2 == v3)
  {
    if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = a1[6];
      int v7 = 136315394;
      __int16 v8 = "-[CSAttSiriTCUGenerator updateInvocationType:forRequestId:]_block_invoke";
      __int16 v9 = 2112;
      uint64_t v10 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s configure invocationType to:%@",  (uint8_t *)&v7,  0x16u);
      id v1 = (void *)a1[5];
    }

    [v1 setRequestInvocationType:a1[6]];
  }

  else if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_ERROR))
  {
    int v7 = 136315650;
    __int16 v8 = "-[CSAttSiriTCUGenerator updateInvocationType:forRequestId:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v2;
    __int16 v11 = 2112;
    uint64_t v12 = v3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s received requestId :%@ mismatch with currentRequestId:%@",  (uint8_t *)&v7,  0x20u);
  }

void sub_1000F883C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(v2 + 88);
  id v4 = (os_log_s *)CSLogCategoryRequest;
  if (v1 == v3)
  {
    if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(unsigned __int8 *)(a1 + 48);
      int v7 = 136315394;
      __int16 v8 = "-[CSAttSiriTCUGenerator updateAFTMOperationalStatus:forRequestId:]_block_invoke";
      __int16 v9 = 1024;
      LODWORD(v10) = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s aftmOperational status(%u) received",  (uint8_t *)&v7,  0x12u);
      uint64_t v2 = *(void *)(a1 + 40);
    }

    *(_BYTE *)(v2 + 14) = *(_BYTE *)(a1 + 48);
  }

  else if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_ERROR))
  {
    int v7 = 136315650;
    __int16 v8 = "-[CSAttSiriTCUGenerator updateAFTMOperationalStatus:forRequestId:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v1;
    __int16 v11 = 2112;
    uint64_t v12 = v3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s aftm Status update requestId(%@) did not match currentRequestId:(%@)!",  (uint8_t *)&v7,  0x20u);
  }

void sub_1000F8984(uint64_t a1)
{
  uint64_t v2 = -[CSEndpointDelayReporter initWithRequestMHUUID:turnIdentifier:withMedocEnabled:]( objc_alloc(&OBJC_CLASS___CSEndpointDelayReporter),  "initWithRequestMHUUID:turnIdentifier:withMedocEnabled:",  *(void *)(*(void *)(a1 + 32) + 56LL),  *(void *)(*(void *)(a1 + 32) + 168LL),  1LL);
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 144);
  *(void *)(v3 + 144) = v2;
}

void sub_1000F89D8(id *a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_INFO))
  {
    int v11 = 136315138;
    uint64_t v12 = "-[CSAttSiriTCUGenerator startWithRecordContext:withRequestId:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v11, 0xCu);
  }

  [a1[4] _reset];
  uint64_t v3 = objc_claimAutoreleasedReturnValue([a1[4] _generateNewTRPId]);
  id v4 = a1[4];
  id v5 = (void *)v4[9];
  v4[9] = v3;

  objc_storeStrong((id *)a1[4] + 10, *((id *)a1[4] + 9));
  objc_storeStrong((id *)a1[4] + 11, a1[5]);
  *((void *)a1[4] + 13) = [a1[6] speechEvent];
  int v6 = objc_alloc(&OBJC_CLASS___NSUUID);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([a1[6] turnIdentifier]);
  __int16 v8 = -[NSUUID initWithUUIDString:](v6, "initWithUUIDString:", v7);
  __int16 v9 = a1[4];
  uint64_t v10 = (void *)v9[21];
  v9[21] = v8;
}

id sub_1000F8B18(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    id v5 = "-[CSAttSiriTCUGenerator registerUresNode:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v4, 0xCu);
  }

  objc_storeWeak((id *)(*(void *)(a1 + 32) + 40LL), *(id *)(a1 + 40));
  id result = *(id *)(*(void *)(a1 + 32) + 96LL);
  if (result) {
    return [result registerInfoProviderNode:*(void *)(a1 + 40)];
  }
  return result;
}

id sub_1000F8BE0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryRequest;
  if (os_log_type_enabled(CSLogCategoryRequest, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    id v5 = "-[CSAttSiriTCUGenerator reset]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  return [*(id *)(a1 + 32) _reset];
}

id sub_1000F9180(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_1000F91D8;
  v5[3] = &unk_10022DFC0;
  void v5[4] = v3;
  void v5[5] = a2;
  char v6 = a3;
  return [v3 enumerateObserversInQueue:v5];
}

id sub_1000F91D8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _notifyObserver:a2 splitterState:*(void *)(a1 + 40) shouldDisableSpeakerVerificationInSplitterMode:*(unsigned __int8 *)(a1 + 48)];
}

uint64_t sub_1000FA508(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 4++*(void *)(*(void *)(result + 32) + 8LL) = *(void *)(result + 40);
  return result;
}

uint64_t sub_1000FA514(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  return result;
}

void sub_1000FA534(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 8LL);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        int v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "voiceTriggerGotSuperVector:") & 1) != 0) {
          objc_msgSend(v7, "voiceTriggerGotSuperVector:", *(void *)(a1 + 40), (void)v8);
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_1000FA654(uint64_t a1)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v1 = *(id *)(*(void *)(a1 + 32) + 8LL);
  id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v8;
    do
    {
      for (uint64_t i = 0LL; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v1);
        }
        char v6 = *(void **)(*((void *)&v7 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v6, "keywordDetectorDidDetectKeyword") & 1) != 0) {
          objc_msgSend(v6, "keywordDetectorDidDetectKeyword", (void)v7);
        }
      }

      id v3 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v3);
  }
}

void sub_1000FA764(void *a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(a1[4] + 8LL);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        __int128 v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "voiceTriggerDidRejected:deviceId:") & 1) != 0) {
          objc_msgSend(v7, "voiceTriggerDidRejected:deviceId:", a1[5], a1[6], (void)v8);
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_1000FA884(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 8LL);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        __int128 v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "voiceTriggerDidDetectSpeakerReject:") & 1) != 0) {
          objc_msgSend(v7, "voiceTriggerDidDetectSpeakerReject:", *(void *)(a1 + 40), (void)v8);
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_1000FA9A4(void *a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(a1[4] + 8LL);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        __int128 v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "voiceTriggerDidDetectNearMiss:deviceId:") & 1) != 0) {
          objc_msgSend(v7, "voiceTriggerDidDetectNearMiss:deviceId:", a1[5], a1[6], (void)v8);
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_1000FAAC4(id a1, uint64_t a2)
{
  id v2 = (unsigned __int8 *)a1;
  if (*((_BYTE *)a1 + 80))
  {
    id v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    a1 = (id)os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)a1)
    {
      uint64_t v4 = *((void *)v2 + 4);
      uint64_t v5 = *(void **)(v4 + 32);
      uint64_t v6 = *(void *)(v4 + 48);
      *(_DWORD *)AudioBufferList buf = 136315650;
      __int128 v48 = "-[CSVoiceTriggerEventsCoordinator _notifyRemoteTriggerEvent:myriadHash:remoteTriggerType:remoteDeviceId:isTr"
            "iggeredFromFullWake:completion:]_block_invoke";
      __int16 v49 = 2048;
      __int16 v50 = v5;
      __int16 v51 = 2050;
      uint64_t v52 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Hearst Route Status=%ld, splitterState = %{public}lu",  buf,  0x20u);
    }

    uint64_t v7 = *((void *)v2 + 4);
    if ((*(void *)(v7 + 48) & 0xFFFFFFFFFFFFFFFELL) != 2 && *(void *)(v7 + 32) == 1LL)
    {
      __int128 v8 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_48;
      }
      *(_DWORD *)AudioBufferList buf = 136315138;
      __int128 v48 = "-[CSVoiceTriggerEventsCoordinator _notifyRemoteTriggerEvent:myriadHash:remoteTriggerType:remoteDeviceId:isTr"
            "iggeredFromFullWake:completion:]_block_invoke";
      __int128 v9 = "%s Hearst is routed. Ignore voice trigger notification from other remote devices.";
      goto LABEL_27;
    }
  }

  if (*((void *)v2 + 9) == 1LL)
  {
    a1 = +[CSUtils supportRemoteDarwinVoiceTrigger](&OBJC_CLASS___CSUtils, "supportRemoteDarwinVoiceTrigger");
    if ((_DWORD)a1)
    {
      __int128 v10 = (void *)objc_claimAutoreleasedReturnValue( +[CSRemoteDarwinDeviceInfo sharedInstance]( &OBJC_CLASS___CSRemoteDarwinDeviceInfo,  "sharedInstance"));
      if ([v10 hasDarwinDeviceConnected])
      {
        __int128 v11 = (void *)objc_claimAutoreleasedReturnValue( +[CSRemoteDarwinDeviceInfo sharedInstance]( &OBJC_CLASS___CSRemoteDarwinDeviceInfo,  "sharedInstance"));
        if ([v11 hasDarwinDeviceHandleVoiceTrigger])
        {
          int v12 = v2[80];

          if (v12)
          {
            __int128 v8 = (os_log_s *)CSLogContextFacilityCoreSpeech;
            if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_48;
            }
            *(_DWORD *)AudioBufferList buf = 136315138;
            __int128 v48 = "-[CSVoiceTriggerEventsCoordinator _notifyRemoteTriggerEvent:myriadHash:remoteTriggerType:remoteDeviceI"
                  "d:isTriggeredFromFullWake:completion:]_block_invoke";
            __int128 v9 = "%s Darwin device connected, ignore trigger from Gibraltar machine";
            goto LABEL_27;
          }

          goto LABEL_17;
        }
      }
    }
  }

void sub_1000FB0D4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _shouldIgnoreVoiceTriggerEvent:*(void *)(a1 + 40)])
  {
    uint64_t v2 = *(void *)(a1 + 56);
    if (v2) {
      (*(void (**)(void))(v2 + 16))();
    }
    return;
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerEventInfoProvider sharedInstance]( &OBJC_CLASS___CSVoiceTriggerEventInfoProvider,  "sharedInstance"));
  [v3 setVoiceTriggerInfo:*(void *)(a1 + 40) deviceId:*(void *)(a1 + 48)];

  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  id v4 = *(id *)(*(void *)(a1 + 32) + 8LL);
  id v5 = [v4 countByEnumeratingWithState:&v37 objects:v45 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v38;
    do
    {
      for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v38 != v7) {
          objc_enumerationMutation(v4);
        }
        objc_msgSend( *(id *)(*((void *)&v37 + 1) + 8 * (void)i),  "voiceTriggerDidDetectKeyword:deviceId:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  (void)v37);
      }

      id v6 = [v4 countByEnumeratingWithState:&v37 objects:v45 count:16];
    }

    while (v6);
  }

  __int128 v9 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    __int128 v42 = "-[CSVoiceTriggerEventsCoordinator _notifyTriggerEvent:deviceId:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Notifying VoiceTrigger Trigger!!!!",  buf,  0xCu);
    __int128 v9 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v10 = *(void **)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    int v12 = v9;
    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v10 _createVoiceTriggerEventInfoString:v11]);
    *(_DWORD *)AudioBufferList buf = 136315394;
    __int128 v42 = "-[CSVoiceTriggerEventsCoordinator _notifyTriggerEvent:deviceId:completion:]_block_invoke";
    __int16 v43 = 2114;
    __int128 v44 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%s %{public}@", buf, 0x16u);
  }

  objc_msgSend(*(id *)(a1 + 32), "_printVoiceTriggerMetricsString:", *(void *)(a1 + 40), (void)v37);
  kdebug_trace(722472304LL, 0LL, 0LL, 0LL, 0LL);
  uint64_t v14 = kdebug_trace(722469268LL, 0LL, 0LL, 0LL, 0LL);
  if (!CSIsHorseman(v14, v15)
    || ([*(id *)(a1 + 32) _isVoiceTriggerFromRemora:*(void *)(a1 + 40)] & 1) != 0)
  {
    if (+[CSUtils supportHomeKitAccessory](&OBJC_CLASS___CSUtils, "supportHomeKitAccessory")
      && [*(id *)(a1 + 32) _isVoiceTriggerFromRemora:*(void *)(a1 + 40)])
    {
      unsigned int v16 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioBufferList buf = 136315138;
        __int128 v42 = "-[CSVoiceTriggerEventsCoordinator _notifyTriggerEvent:deviceId:completion:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%s Activating Siri on Homekit accessory",  buf,  0xCu);
      }

      id v17 = (CSMyriadPHash *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _myriadPhashFromVoiceTriggerInfo:*(void *)(a1 + 40)]);
      id v18 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriLauncher sharedLauncher](&OBJC_CLASS___CSSiriLauncher, "sharedLauncher"));
      [v18 notifyRemoraVoiceTrigger:*(void *)(a1 + 40) myriadPHash:v17 deviceId:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
      goto LABEL_47;
    }

    id v19 = *(void **)(a1 + 40);
    if (v19)
    {
      uint64_t v20 = kVTEIfirstPassTriggerSource;
      uint64_t v21 = objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:kVTEIfirstPassTriggerSource]);
      if (v21)
      {
        id v22 = (void *)v21;
        __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v20]);
        unsigned int v24 = [v23 isEqualToString:kVTEIFirstPassTriggeredFromJarvis];

        if (v24)
        {
          uint64_t v25 = kVTEItriggerEndMachTime;
          id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:kVTEItriggerEndMachTime]);

          if (v26)
          {
            int v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v25]);
            id v28 = [v27 unsignedIntegerValue];

            id v17 = (CSMyriadPHash *)objc_claimAutoreleasedReturnValue( +[CSMyriadPHash generateEmptyPHash:writeFile:]( &OBJC_CLASS___CSMyriadPHash,  "generateEmptyPHash:writeFile:",  v28,  0LL));
          }

          else
          {
            uint64_t v36 = (os_log_s *)CSLogContextFacilityCoreSpeech;
            if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioBufferList buf = 136315138;
              __int128 v42 = "-[CSVoiceTriggerEventsCoordinator _notifyTriggerEvent:deviceId:completion:]_block_invoke";
              _os_log_error_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_ERROR,  "%s Jarvis VoiceTrigger result doesn't have trigger end mach time",  buf,  0xCu);
            }

            id v17 = 0LL;
          }

          id v18 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriLauncher sharedLauncher](&OBJC_CLASS___CSSiriLauncher, "sharedLauncher"));
          [v18 notifyCarPlayVoiceTrigger:*(void *)(a1 + 40) deviceId:*(void *)(a1 + 48) myriadPHash:v17 completion:*(void *)(a1 + 56)];
          goto LABEL_47;
        }
      }

      uint64_t v31 = *(void *)(a1 + 40);
      if (v31)
      {
        if ((+[CSUtils isVoiceTriggerFromExclaveWithVTEI:]( &OBJC_CLASS___CSUtils,  "isVoiceTriggerFromExclaveWithVTEI:") & 1) != 0)
        {
          id v17 = objc_alloc_init(&OBJC_CLASS___CSMyriadPHash);
          id v18 = (void *)objc_claimAutoreleasedReturnValue( -[CSMyriadPHash generatePHashFromExclaveVoiceTriggerInfo:writeFile:]( v17,  "generatePHashFromExclaveVoiceTriggerInfo:writeFile:",  *(void *)(a1 + 40),  0LL));
          uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriLauncher sharedLauncher](&OBJC_CLASS___CSSiriLauncher, "sharedLauncher"));
          [v32 notifyBuiltInVoiceTrigger:*(void *)(a1 + 40) myriadPHash:v18 completion:*(void *)(a1 + 56)];

          uint64_t v33 = (os_log_s *)CSLogContextFacilityCoreSpeech;
          if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
          {
LABEL_42:
            notify_post("com.apple.coreaudio.borealisTrigger");
            goto LABEL_47;
          }

          *(_DWORD *)AudioBufferList buf = 136315138;
          __int128 v42 = "-[CSVoiceTriggerEventsCoordinator _notifyTriggerEvent:deviceId:completion:]_block_invoke";
LABEL_41:
          _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "%s notifying built-in VT trigger by notify_post",  buf,  0xCu);
          goto LABEL_42;
        }

        uint64_t v31 = *(void *)(a1 + 40);
      }
    }

    else
    {
      uint64_t v31 = 0LL;
    }

    if ([*(id *)(a1 + 32) _isVoiceTriggerFromHearst:v31])
    {
      id v17 = (CSMyriadPHash *)objc_claimAutoreleasedReturnValue(+[CSSiriLauncher sharedLauncher](&OBJC_CLASS___CSSiriLauncher, "sharedLauncher"));
      -[CSMyriadPHash notifyBluetoothDeviceVoiceTrigger:deviceId:completion:]( v17,  "notifyBluetoothDeviceVoiceTrigger:deviceId:completion:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56));
LABEL_48:

      return;
    }

    id v17 = objc_alloc_init(&OBJC_CLASS___CSMyriadPHash);
    id v18 = (void *)objc_claimAutoreleasedReturnValue( -[CSMyriadPHash generatePHashFromVoiceTriggerInfo:writeFile:]( v17,  "generatePHashFromVoiceTriggerInfo:writeFile:",  *(void *)(a1 + 40),  0LL));
    id v35 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriLauncher sharedLauncher](&OBJC_CLASS___CSSiriLauncher, "sharedLauncher"));
    [v35 notifyBuiltInVoiceTrigger:*(void *)(a1 + 40) myriadPHash:v18 completion:*(void *)(a1 + 56)];

    uint64_t v33 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_42;
    }
    *(_DWORD *)AudioBufferList buf = 136315138;
    __int128 v42 = "-[CSVoiceTriggerEventsCoordinator _notifyTriggerEvent:deviceId:completion:]_block_invoke";
    goto LABEL_41;
  }

  BOOL v29 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
  unsigned int v30 = [v29 useSiriActivationSPIForHomePod];

  if (v30)
  {
    id v17 = (CSMyriadPHash *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _myriadPhashFromVoiceTriggerInfo:*(void *)(a1 + 40)]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriLauncher sharedLauncher](&OBJC_CLASS___CSSiriLauncher, "sharedLauncher"));
    [v18 notifyBuiltInVoiceTrigger:*(void *)(a1 + 40) myriadPHash:v17 completion:*(void *)(a1 + 56)];
LABEL_47:

    goto LABEL_48;
  }

  notify_post("com.apple.coreaudio.borealisTrigger");
  uint64_t v34 = *(void *)(a1 + 56);
  if (v34) {
    (*(void (**)(void))(v34 + 16))();
  }
}

void sub_1000FB764(id a1)
{
  v3[0] = kVTEISecondPassAudioStreamStartTime;
  v3[1] = kVTEISecondPassAudioStreamReadyTime;
  v3[2] = kVTEISecondPassFirstAudioPacketReceptionTime;
  v3[3] = kVTEISecondPassLastAudioPacketReceptionTime;
  void v3[4] = kVTEISecondPassCheckerModelKeywordDetectionStartTime;
  void v3[5] = kVTEISecondPassCheckerModelKeywordDetectionEndTime;
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v3, 6LL));
  uint64_t v2 = (void *)qword_100280068;
  qword_100280068 = v1;
}

void sub_1000FB824(id a1)
{
  v3[0] = kVTEIconfigVersion;
  v3[1] = kVTEIeffectiveThreshold;
  v3[2] = kVTEItriggerScore;
  v3[3] = kVTEIrecognizerScore;
  void v3[4] = kVTEIrecognizerScaleFactor;
  void v3[5] = kVTEIactiveChannel;
  void v3[6] = kVTEIfirstPassStartSampleCount;
  v3[7] = kVTEIfirstPassFireSampleCount;
  v3[8] = kVTEItriggerStartSampleCount;
  v3[9] = kVTEItriggerEndSampleCount;
  v3[10] = kVTEItriggerFireSampleCount;
  v3[11] = kVTEItriggerStartSeconds;
  v3[12] = kVTEItriggerEndSeconds;
  v3[13] = kVTEItriggerFireSeconds;
  v3[14] = kVTEItriggerStartMachTime;
  v3[15] = kVTEItriggerEndMachTime;
  v3[16] = kVTEItriggerFireMachTime;
  v3[17] = kVTEIearlyDetectFiredMachTime;
  v3[18] = kVTEIextraSamplesAtStart;
  v3[19] = kVTEIanalyzerPrependingSamples;
  v3[20] = kVTEIanalyzerTrailingSamples;
  v3[21] = kVTEIuptime;
  v3[22] = kVTEIdowntime;
  v3[23] = kVTEIfirstPassTriggerSource;
  v3[24] = kVTEIisMediaPlaying;
  v3[25] = kVTEImediaVolume;
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v3, 26LL));
  uint64_t v2 = (void *)qword_100280058;
  qword_100280058 = v1;
}

void *sub_1000FB9FC(void *result)
{
  if (result[4]) {
    return objc_msgSend(*(id *)(result[5] + 8), "removeObject:");
  }
  return result;
}

void *sub_1000FBA14(void *result)
{
  if (result[4]) {
    return objc_msgSend(*(id *)(result[5] + 8), "addObject:");
  }
  return result;
}

void sub_1000FBA2C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 40))
  {
    id v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      uint64_t v11 = "-[CSVoiceTriggerEventsCoordinator start]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%s ", buf, 0xCu);
      uint64_t v1 = *(void *)(a1 + 32);
    }

    *(_BYTE *)(v1 + 40) = 1;
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[CSAudioRouteChangeMonitor sharedInstance]( &OBJC_CLASS___CSAudioRouteChangeMonitor,  "sharedInstance"));
    [v4 addObserver:*(void *)(a1 + 32)];

    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[CSAudioRouteChangeMonitor sharedInstance]( &OBJC_CLASS___CSAudioRouteChangeMonitor,  "sharedInstance"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    void v9[2] = sub_1000FBBCC;
    void v9[3] = &unk_10022E4A8;
    void v9[4] = *(void *)(a1 + 32);
    [v5 getHearstRouteStatus:v9];

    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[CSBluetoothWirelessSplitterMonitor sharedInstance]( &OBJC_CLASS___CSBluetoothWirelessSplitterMonitor,  "sharedInstance"));
    [v6 addObserver:*(void *)(a1 + 32)];

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[CSBluetoothWirelessSplitterMonitor sharedInstance]( &OBJC_CLASS___CSBluetoothWirelessSplitterMonitor,  "sharedInstance"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1000FBC24;
    void v8[3] = &unk_10022E480;
    void v8[4] = *(void *)(a1 + 32);
    [v7 splitterState:v8];
  }

void sub_1000FBBCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(dispatch_queue_s **)(v2 + 16);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1000FBC88;
  v4[3] = &unk_10022F020;
  v4[4] = v2;
  void v4[5] = a2;
  dispatch_async(v3, v4);
}

void sub_1000FBC24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(dispatch_queue_s **)(v2 + 16);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_1000FBC7C;
  v4[3] = &unk_10022F020;
  v4[4] = v2;
  void v4[5] = a2;
  dispatch_async(v3, v4);
}

uint64_t sub_1000FBC7C(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 4++*(void *)(*(void *)(result + 32) + 8LL) = *(void *)(result + 40);
  return result;
}

uint64_t sub_1000FBC88(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + ++*(void *)(*(void *)(result + 32) + 32LL) = *(void *)(result + 40);
  return result;
}

void sub_1000FBCD4(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSVoiceTriggerEventsCoordinator);
  uint64_t v2 = (void *)qword_100280048;
  qword_100280048 = (uint64_t)v1;
}

void sub_1000FCA04( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id location, id a23)
{
}

id sub_1000FCC18(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 32) resume];
}

void sub_1000FCC24(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v3 queue]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000FCD0C;
  v6[3] = &unk_10022EFD0;
  v6[4] = v3;
  id v7 = WeakRetained;
  id v5 = WeakRetained;
  dispatch_async(v4, v6);
}

void sub_1000FCCCC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) proxies]);
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_1000FCD0C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) proxies]);
  [v2 removeObject:*(void *)(a1 + 40)];
}

void sub_1000FE848( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000FF790(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isEqualToString:*(void *)(*(void *)(a1 + 40) + 104)])
  {
    if ([*(id *)(a1 + 40) _shouldCreateODLDProcessor:*(void *)(*(void *)(a1 + 40) + 88)])
    {
      id v2 = *(id **)(a1 + 40);
      id v3 = (void *)objc_claimAutoreleasedReturnValue([v2[17] configVersion]);
      [*(id *)(*(void *)(a1 + 40) + 136) odldScore];
      int v5 = v4;
      [*(id *)(*(void *)(a1 + 40) + 136) outputAnchor];
      int v7 = v6;
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void *)(v8 + 72);
      [*(id *)(v8 + 112) floatValue];
      int v11 = v10;
      uint64_t v12 = *(void *)(a1 + 40);
      uint64_t v13 = *(void *)(v12 + 144);
      [*(id *)(v12 + 136) conversationalScore];
      LODWORD(v15) = v14;
      LODWORD(v16) = 0;
      LODWORD(v17) = v5;
      LODWORD(v1_Block_object_dispose(va, 8) = v7;
      LODWORD(v19) = v11;
      [v2 _logMHOdldFalseTriggerMitigationScores:v3 withOdldScores:v9 withOdldScoreThreshold:v13 withSocialScore:1 withAnchorRequestId :v17 withAnchorSocialScore:v16 withPrevRequestId:v18 withConversationalScore:v19 withSuccess:v15];

      [*(id *)(a1 + 40) _saveContextForMitigationDecision:*(unsigned __int8 *)(a1 + 48) forRequestId:*(void *)(a1 + 32) isFinal:*(unsigned __int8 *)(a1 + 49)];
    }
  }

  else
  {
    uint64_t v20 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = *(void *)(*(void *)(a1 + 40) + 104LL);
      int v22 = 136315394;
      __int16 v23 = "-[CSAttSiriNLDAClassifierNode informMitigationDecision:forRequestId:isFinal:]_block_invoke";
      __int16 v24 = 2112;
      uint64_t v25 = v21;
      _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "%s Request id doesn't match current request id %@, do not save mitigation result",  (uint8_t *)&v22,  0x16u);
    }
  }

uint64_t sub_1000FF95C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000FF96C(uint64_t a1)
{
}

void sub_1000FF974(uint64_t a1)
{
  if (([*(id *)(a1 + 32) _shouldCreateODLDProcessor:*(void *)(*(void *)(a1 + 32) + 88)] & 1) == 0)
  {
    double v15 = (os_log_s *)CSLogCategorySDSD;
    if (!os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v17 = 136315138;
    double v18 = "-[CSAttSiriNLDAClassifierNode processSpeechPackageSync:]_block_invoke";
    double v16 = "%s Not running ODLD for BP";
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v17, 0xCu);
    return;
  }

  id v2 = *(void **)(*(void *)(a1 + 32) + 96LL);
  if (!v2)
  {
    double v15 = (os_log_s *)CSLogCategorySDSD;
    if (!os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v17 = 136315138;
    double v18 = "-[CSAttSiriNLDAClassifierNode processSpeechPackageSync:]_block_invoke";
    double v16 = "%s Input ctx not found, nothing to do";
    goto LABEL_12;
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recognition]);
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 oneBestTranscript]);
  [v2 updateWithInputUtt:v4];

  int v5 = (os_log_s *)CSLogCategorySDSD;
  if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
  {
    double v6 = *(double *)(*(void *)(a1 + 32) + 96LL);
    int v17 = 136315394;
    double v18 = "-[CSAttSiriNLDAClassifierNode processSpeechPackageSync:]_block_invoke";
    __int16 v19 = 2112;
    double v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%s Input Context %@", (uint8_t *)&v17, 0x16u);
  }

  uint64_t v7 = mach_absolute_time();
  uint64_t v8 = objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 80) processInputContext:*(void *)(*(void *)(a1 + 32) + 96)]);
  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
  int v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  uint64_t v11 = mach_absolute_time();
  uint64_t v12 = (void *)CSLogCategorySDSD;
  if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = v12;
    +[CSFTimeUtils hostTimeToSeconds:](&OBJC_CLASS___CSFTimeUtils, "hostTimeToSeconds:", v11 - v7);
    int v17 = 136315394;
    double v18 = "-[CSAttSiriNLDAClassifierNode processSpeechPackageSync:]_block_invoke";
    __int16 v19 = 2048;
    double v20 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%s NLDA inference took: %.3f seconds",  (uint8_t *)&v17,  0x16u);
  }

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 136LL), *(id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
}

void sub_1000FFC00(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategorySDSD;
  if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v4 = 136315394;
    int v5 = "-[CSAttSiriNLDAClassifierNode setPrefetchedAsset:]_block_invoke";
    __int16 v6 = 2112;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s setting prefetched asset %@",  (uint8_t *)&v4,  0x16u);
  }

void sub_1000FFCC4(uint64_t a1)
{
}

id sub_1000FFCD0(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategorySDSD;
  if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315138;
    uint64_t v7 = "-[CSAttSiriNLDAClassifierNode stop]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v6, 0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(void **)(v3 + 80);
  *(void *)(v3 + 80) = 0LL;

  return [*(id *)(a1 + 32) _releaseNldaProcessingTransaction];
}

void sub_1000FFD90(id *a1)
{
  id v2 = (void *)*((void *)a1[4] + 6);
  if (v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 getCategoryKeyWithRecordCtx:a1[5]]);
    int v4 = (void *)objc_claimAutoreleasedReturnValue([*((id *)a1[4] + 6) nldaConfigFileForCategory:v3]);
    objc_storeStrong((id *)a1[4] + 11, a1[5]);
    objc_storeStrong((id *)a1[4] + 13, a1[6]);
    [a1[4] _holdTransactionForNldaProcessing];
    if ([a1[4] _shouldCreateODLDProcessor:a1[5]])
    {
      uint64_t v5 = mach_absolute_time();
      id v22 = 0LL;
      int v6 = -[SLODLDProcessor initWithConfigFile:error:]( objc_alloc(&OBJC_CLASS___SLODLDProcessor),  "initWithConfigFile:error:",  v4,  &v22);
      id v7 = v22;
      uint64_t v8 = a1[4];
      uint64_t v9 = (void *)v8[10];
      v8[10] = v6;

      uint64_t v10 = mach_absolute_time();
      uint64_t v11 = (void *)CSLogCategorySDSD;
      if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = v11;
        +[CSFTimeUtils hostTimeToSeconds:](&OBJC_CLASS___CSFTimeUtils, "hostTimeToSeconds:", v10 - v5);
        *(_DWORD *)AudioBufferList buf = 136315394;
        __int16 v24 = "-[CSAttSiriNLDAClassifierNode startWithRecordContext:withRequestId:]_block_invoke";
        __int16 v25 = 2048;
        double v26 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s NLDA loadtime took: %.3f seconds",  buf,  0x16u);
      }

      if (v7)
      {
        float v14 = (void *)CSLogCategorySDSD;
        if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
        {
          double v20 = v14;
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v7 localizedDescription]);
          *(_DWORD *)AudioBufferList buf = 136315394;
          __int16 v24 = "-[CSAttSiriNLDAClassifierNode startWithRecordContext:withRequestId:]_block_invoke";
          __int16 v25 = 2114;
          double v26 = *(double *)&v21;
          _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "%s Unable to create ODLD model with error: %{public}@",  buf,  0x16u);
        }

        [a1[4] _releaseNldaProcessingTransaction];
      }

      else
      {
        uint64_t v18 = objc_claimAutoreleasedReturnValue([a1[4] _createInputContextForRecordCtx:a1[5]]);
        __int16 v19 = a1[4];
        id v7 = (id)v19[12];
        v19[12] = v18;
      }
    }

    else
    {
      double v16 = (os_log_s *)CSLogCategorySDSD;
      if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioBufferList buf = 136315138;
        __int16 v24 = "-[CSAttSiriNLDAClassifierNode startWithRecordContext:withRequestId:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%s ODLD is disabled given record ctx",  buf,  0xCu);
      }

      int v17 = a1[4];
      id v7 = (id)v17[10];
      v17[10] = 0LL;
    }
  }

  else
  {
    double v15 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      __int16 v24 = "-[CSAttSiriNLDAClassifierNode startWithRecordContext:withRequestId:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%s Prefetched asset not set", buf, 0xCu);
    }
  }

id sub_1001000B4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _clearContextForNewTurn];
}

id sub_1001009D0(uint64_t a1)
{
  unint64_t v2 = (unint64_t)[*(id *)(a1 + 32) length];
  unint64_t v3 = v2
     / +[CSConfig inputRecordingNumberOfChannels]( &OBJC_CLASS___CSConfig,  "inputRecordingNumberOfChannels");
  unint64_t v4 = v3
     / +[CSConfig inputRecordingSampleByteDepth](&OBJC_CLASS___CSConfig, "inputRecordingSampleByteDepth");
  objc_msgSend( *(id *)(*(void *)(a1 + 40) + 192), "addSamples:numSamples:", objc_msgSend(*(id *)(a1 + 32), "bytes"), v4);
  uint64_t v5 = *(void *)(a1 + 40);
  if (*(_BYTE *)(v5 + 160) && !*(_BYTE *)(v5 + 161))
  {
    id v6 = objc_alloc(&OBJC_CLASS___CSAudioChunk);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = +[CSConfig inputRecordingNumberOfChannels]( &OBJC_CLASS___CSConfig,  "inputRecordingNumberOfChannels");
    uint64_t v9 = +[CSConfig inputRecordingSampleByteDepth]( &OBJC_CLASS___CSConfig,  "inputRecordingSampleByteDepth");
    LOBYTE(v41) = +[CSConfig inputRecordingIsFloat](&OBJC_CLASS___CSConfig, "inputRecordingIsFloat");
    id v10 = [v6 initWithData:v7 numChannels:v8 numSamples:v4 sampleByteDepth:v9 startSampleCount:0 hostTime:0 remoteVAD:0 isFloat:v41];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 184) getBestAnalyzedResultsFromAudioChunk:v10]);
    [v11 bestScore];
    float v13 = v12;
    [*(id *)(*(void *)(a1 + 40) + 184) getThreshold];
    if (v13 >= v14)
    {
      *(void *)(*(void *)(a1 + 40) + 20+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7, 0) = [v11 bestStart];
      [*(id *)(*(void *)(a1 + 40) + 184) reset];
      id v15 =  +[CSSpeechManager sharedManagerForCoreSpeechDaemon]( &OBJC_CLASS___CSSpeechManager,  "sharedManagerForCoreSpeechDaemon");
      double v16 = (void *)objc_claimAutoreleasedReturnValue( +[CSDeviceActivationEventNotificationHandler sharedInstance]( &OBJC_CLASS___CSDeviceActivationEventNotificationHandler,  "sharedInstance"));
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 216LL));
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deviceID]);
      id v19 = +[CSDeviceActivationEvent remoteMicVoiceTriggerEvent:activationInfo:hostTime:]( &OBJC_CLASS___CSDeviceActivationEvent,  "remoteMicVoiceTriggerEvent:activationInfo:hostTime:",  v18,  0LL,  mach_absolute_time());
      double v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      [v16 notifyActivationEvent:v20 completion:&stru_10022D5B8];
    }
  }

  while (1)
  {
    double v21 = (double)*(unint64_t *)(*(void *)(a1 + 40) + 208LL);
    +[CSConfig inputRecordingBufferDuration](&OBJC_CLASS___CSConfig, "inputRecordingBufferDuration");
    double v23 = v22;
    +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
    double v25 = v21 + v23 * v24;
    id result = [*(id *)(*(void *)(a1 + 40) + 192) sampleCount];
    uint64_t v27 = *(void *)(a1 + 40);
    id v28 = *(void **)(v27 + 192);
    unint64_t v29 = *(void *)(v27 + 208);
    +[CSConfig inputRecordingBufferDuration](&OBJC_CLASS___CSConfig, "inputRecordingBufferDuration");
    double v31 = v30;
    +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v28 copybufferFrom:v29 to:(unint64_t)((double)v29 + v31 * v32)]);
    +[CSConfig inputRecordingBufferDuration](&OBJC_CLASS___CSConfig, "inputRecordingBufferDuration");
    double v35 = v34;
    +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
    *(void *)(*(void *)(a1 + 40) + 20++*(void *)(*(void *)(result + 32) + 8LL) = (unint64_t)((double)*(unint64_t *)(*(void *)(a1 + 40)
                                                                                               + 208LL)
                                                                 + v35 * v36);
    uint64_t v37 = *(void *)(a1 + 40);
    if (*(_BYTE *)(v37 + 161))
    {
      id v38 = objc_loadWeakRetained((id *)(v37 + 176));
      char v39 = objc_opt_respondsToSelector( v38,  "audioEngineBufferAvailable:audioStreamHandleId:buffer:remoteVAD:atTime:isFileLoadedBuffer:");

      if ((v39 & 1) != 0)
      {
        id v40 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 176LL));
        [v40 audioEngineBufferAvailable:*(void *)(a1 + 40) audioStreamHandleId:*(void *)(a1 + 48) buffer:v33 remoteVAD:0 atTime:*(void *)(a1 + 56) isFileLoadedBuffer:*(unsigned __int8 *)(a1 + 64)];
      }
    }
  }

  return result;
}

void sub_100100D30(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 161LL) = 0;
  *(void *)(*(void *)(a1 + 32) + 20+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0LL;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 176LL));
  char v3 = objc_opt_respondsToSelector(WeakRetained, "audioEngineDidStopRecord:audioStreamHandleId:reason:");

  if ((v3 & 1) != 0)
  {
    id v4 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 176LL));
    objc_msgSend( v4,  "audioEngineDidStopRecord:audioStreamHandleId:reason:",  *(void *)(a1 + 32),  objc_msgSend(*(id *)(a1 + 32), "audioStreamHandleId"),  0);
  }

void sub_100100DF4(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 161LL) = 1;
  *(void *)(*(void *)(a1 + 32) + 20++*(void *)(*(void *)(result + 32) + 8) = [*(id *)(*(void *)(a1 + 32) + 192) sampleCount];
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(v2 + 200);
  if (v3)
  {
    if (v3 >> 6 <= 0x7C) {
      unint64_t v4 = 0LL;
    }
    else {
      unint64_t v4 = v3 - 8000;
    }
    *(void *)(v2 + 20_Block_object_dispose(va, 8) = v4;
    uint64_t v2 = *(void *)(a1 + 32);
  }

  [*(id *)(v2 + 184) reset];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 176LL));
  char v6 = objc_opt_respondsToSelector(WeakRetained, "audioEngineDidStartRecord:audioStreamHandleId:successfully:error:");

  if ((v6 & 1) != 0)
  {
    id v7 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 176LL));
    objc_msgSend( v7,  "audioEngineDidStartRecord:audioStreamHandleId:successfully:error:",  *(void *)(a1 + 32),  objc_msgSend(*(id *)(a1 + 32), "audioStreamHandleId"),  1,  0);
  }

uint64_t sub_100100F14(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 161LL);
  return result;
}

id sub_100100F30(uint64_t a1)
{
  v4.receiver = *(id *)(a1 + 32);
  v4.super_class = (Class)&OBJC_CLASS___CSAudioInjectionHearstEngine;
  objc_msgSendSuper2(&v4, "stopAudioStream");
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)&OBJC_CLASS___CSAudioInjectionHearstEngine;
  objc_msgSendSuper2(&v3, "stop");
  return [*(id *)(*(void *)(a1 + 32) + 192) reset];
}

void sub_100100FA4(uint64_t a1)
{
  v15.receiver = *(id *)(a1 + 32);
  v15.super_class = (Class)&OBJC_CLASS___CSAudioInjectionHearstEngine;
  objc_msgSendSuper2(&v15, "start");
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[CSAsset defaultFallBackAssetForVoiceTrigger]( &OBJC_CLASS___CSAsset,  "defaultFallBackAssetForVoiceTrigger"));
  objc_super v3 = (void *)objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerFirstPassConfigDecoder decodeConfigFrom:]( &OBJC_CLASS___CSVoiceTriggerFirstPassConfigDecoder,  "decodeConfigFrom:",  v2));
  objc_super v4 = objc_alloc(&OBJC_CLASS___CSKeywordAnalyzerNDAPI);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 configPathNDAPI]);
  char v6 = (void *)objc_claimAutoreleasedReturnValue([v2 resourcePath]);
  id v7 = -[CSKeywordAnalyzerNDAPI initWithConfigPath:resourcePath:](v4, "initWithConfigPath:resourcePath:", v5, v6);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(v8 + 184);
  *(void *)(v8 + 184) = v7;

  id v10 = *(void **)(*(void *)(a1 + 32) + 184LL);
  if (!v10)
  {
    uint64_t v11 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      int v17 = "-[CSAudioInjectionHearstEngine start]_block_invoke";
      _os_log_fault_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "%s Failed to create NDAPI", buf, 0xCu);
      id v10 = *(void **)(*(void *)(a1 + 32) + 184LL);
    }

    else
    {
      id v10 = 0LL;
    }
  }

  [v10 setActiveChannel:0];
  float v12 = *(void **)(a1 + 32);
  float v13 = (void *)objc_claimAutoreleasedReturnValue(+[CSAudioStartStreamOption noAlertOption](&OBJC_CLASS___CSAudioStartStreamOption, "noAlertOption"));
  v14.receiver = v12;
  v14.super_class = (Class)&OBJC_CLASS___CSAudioInjectionHearstEngine;
  objc_msgSendSuper2(&v14, "startAudioStreamWithOption:", v13);
}

uint64_t sub_100101174(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 160LL);
  return result;
}

uint64_t sub_100101190(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 16+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = *(_BYTE *)(result + 40);
  return result;
}

void sub_1001015A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_super v4 = (void *)CSLogContextFacilityCoreSpeech;
  if (v3)
  {
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = v4;
      uint64_t v9 = (__CFString *)objc_claimAutoreleasedReturnValue([v3 localizedDescription]);
      *(_DWORD *)AudioBufferList buf = 136315394;
      float v13 = "-[CSAggressiveECModeHandler _configureAggressiveEchoCancellationParams:]_block_invoke";
      __int16 v14 = 2114;
      objc_super v15 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Failed to set Aggressive EC mode : %{public}@",  buf,  0x16u);
    }

    if (*(_BYTE *)(a1 + 40)) {
      *(void *)(*(void *)(a1 + 32) + ++*(void *)(*(void *)(result + 32) + 32LL) = 0LL;
    }
  }

  else
  {
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = @"applied";
      if (!*(_BYTE *)(a1 + 40)) {
        uint64_t v5 = @"removed";
      }
      *(_DWORD *)AudioBufferList buf = 136315394;
      float v13 = "-[CSAggressiveECModeHandler _configureAggressiveEchoCancellationParams:]_block_invoke";
      __int16 v14 = 2112;
      objc_super v15 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v4,  OS_LOG_TYPE_DEFAULT,  "%s Aggressive EC mode %@ successfully",  buf,  0x16u);
    }

    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(dispatch_queue_s **)(v6 + 16);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_100101768;
    v10[3] = &unk_10022EFA8;
    void v10[4] = v6;
    char v11 = *(_BYTE *)(a1 + 40);
    dispatch_async(v7, v10);
  }
}

uint64_t sub_100101768(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 1+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = *(_BYTE *)(result + 40);
  if (!*(_BYTE *)(result + 40)) {
    *(void *)(*(void *)(result + 32) + ++*(void *)(*(void *)(result + 32) + 32LL) = 0LL;
  }
  return result;
}

id sub_10010178C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    int v6 = 136315394;
    id v7 = "-[CSAggressiveECModeHandler notifySiriSessionStateTTSOngoing:]_block_invoke";
    __int16 v8 = 1024;
    int v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s isSpeaking:%u", (uint8_t *)&v6, 0x12u);
  }

  int v4 = *(unsigned __int8 *)(a1 + 40);
  if (*(_BYTE *)(a1 + 40)) {
    *(void *)(*(void *)(a1 + 32) + ++*(void *)(*(void *)(result + 32) + 32LL) = 1LL;
  }
  return [*(id *)(a1 + 32) _configureAggressiveEchoCancellationParams:v4 != 0];
}

id sub_100101868(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[CSAggressiveECModeHandler siriDismissed]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  return [*(id *)(a1 + 32) _configureAggressiveEchoCancellationParams:0];
}

void sub_10010191C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v23 = 136315394;
    float v24 = "-[CSAggressiveECModeHandler setAudioSessionState:]_block_invoke";
    __int16 v25 = 2112;
    *(void *)double v26 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s sessionInfo:%@", (uint8_t *)&v23, 0x16u);
  }

  int v4 = *(void **)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"AudioCategory"]);
    int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"AudioMode"]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"AudioSessionID"]);
    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"IsActive"]);
    unsigned __int8 v9 = [v8 BOOLValue];

    id v10 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315906;
      float v24 = "-[CSAggressiveECModeHandler setAudioSessionState:]_block_invoke";
      __int16 v25 = 2112;
      *(void *)double v26 = v7;
      *(_WORD *)&v26[8] = 2112;
      uint64_t v27 = v5;
      __int16 v28 = 2112;
      unint64_t v29 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s audioSessionId:%@, audioSessionCategory:%@ audioMode:%@",  (uint8_t *)&v23,  0x2Au);
    }

    else {
      unsigned int v11 = 0;
    }
    unsigned int v13 = [v5 isEqualToString:kMXSessionAudioCategory_VoiceOver];
    __int16 v14 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 136315650;
      float v24 = "-[CSAggressiveECModeHandler setAudioSessionState:]_block_invoke";
      __int16 v25 = 1024;
      *(_DWORD *)double v26 = v11;
      *(_WORD *)&v26[4] = 1024;
      *(_DWORD *)&v26[6] = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%s isReadThisAudioSession:(%u), isVoiceOver:(%u)",  (uint8_t *)&v23,  0x18u);
    }

    if ((v11 | v13) != 1)
    {
      double v22 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315138;
        float v24 = "-[CSAggressiveECModeHandler setAudioSessionState:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "%s Not a ReadThis or voiceOver audioSession - bail out!",  (uint8_t *)&v23,  0xCu);
      }

      goto LABEL_28;
    }

    *(_BYTE *)(*(void *)(a1 + 40) + ++*(void *)(*(void *)(result + 32) + 8LL) = v9;
    objc_super v15 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      double v16 = *(unsigned __int8 **)(a1 + 40);
      int v17 = v16[8];
      int v18 = v16[10];
      LODWORD(v16) = v16[9];
      int v23 = 136315906;
      float v24 = "-[CSAggressiveECModeHandler setAudioSessionState:]_block_invoke";
      __int16 v25 = 1024;
      *(_DWORD *)double v26 = v17;
      *(_WORD *)&v26[4] = 1024;
      *(_DWORD *)&v26[6] = v18;
      LOWORD(v27) = 1024;
      *(_DWORD *)((char *)&v27 + 2) = (_DWORD)v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%s readThisOrVoiceOverSessionActive:(%u) aggressiveEchoCancellationApplied:(%u) inAttendingWindow:(%u)",  (uint8_t *)&v23,  0x1Eu);
    }

    uint64_t v19 = *(void *)(a1 + 40);
    if (*(_BYTE *)(v19 + 8))
    {
      if (*(_BYTE *)(v19 + 10) || !*(_BYTE *)(v19 + 9)) {
        goto LABEL_28;
      }
      uint64_t v20 = 2LL;
      if (v11) {
        uint64_t v20 = 3LL;
      }
      *(void *)(v19 + 32) = v20;
      uint64_t v19 = *(void *)(a1 + 40);
      uint64_t v21 = 1LL;
    }

    else
    {
      if (!*(_BYTE *)(v19 + 10) || (*(void *)(v19 + 32) & 0xFFFFFFFFFFFFFFFELL) != 2) {
        goto LABEL_28;
      }
      uint64_t v21 = 0LL;
    }

    [(id)v19 _configureAggressiveEchoCancellationParams:v21];
LABEL_28:

    return;
  }

  float v12 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
  {
    int v23 = 136315138;
    float v24 = "-[CSAggressiveECModeHandler setAudioSessionState:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%s audio session info is nil - bail out!",  (uint8_t *)&v23,  0xCu);
  }

void sub_100101D1C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    int v4 = *(unsigned __int8 **)(a1 + 32);
    int v5 = v4[8];
    int v6 = v4[10];
    LODWORD(v4) = v4[9];
    int v9 = 136316162;
    id v10 = "-[CSAggressiveECModeHandler setAttendingState:]_block_invoke";
    __int16 v11 = 1024;
    int v12 = v3;
    __int16 v13 = 1024;
    int v14 = v5;
    __int16 v15 = 1024;
    int v16 = v6;
    __int16 v17 = 1024;
    int v18 = (int)v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s attendingStateStart:(%u) readThisOrVoiceOverSessionActive:(%u) aggressiveECParamsApplied:(%u) inAttendingWindow:(%u)",  (uint8_t *)&v9,  0x24u);
  }

  if (*(_BYTE *)(a1 + 40))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (!*(_BYTE *)(v7 + 9))
    {
      *(_BYTE *)(v7 + 9) = 1;
      __int16 v8 = *(_BYTE **)(a1 + 32);
      if (v8[8])
      {
        if (!v8[10]) {
          [v8 _configureAggressiveEchoCancellationParams:1];
        }
      }
    }
  }

id sub_100102220(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _notifyObserver:a2 withEnabled:*(unsigned __int8 *)(a1 + 40)];
}

void sub_100102274(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSSelfTriggerEnabledMonitorAccessory);
  uint64_t v2 = (void *)qword_100280078;
  qword_100280078 = (uint64_t)v1;
}

void sub_1001031AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id location)
{
}

void sub_100103294(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 8LL));
  [*(id *)(a1 + 32) setExportedObject:WeakRetained];

  id v3 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 8LL));
  int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteObjectProxy]);
  [v3 setRemoteObjectProxy:v4];

  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) activeConnection]);
  if (v5)
  {
    [v5 setInvalidationHandler:0];
    [v5 setInterruptionHandler:0];
    [*(id *)(a1 + 40) setActiveConnection:0];
    [v5 invalidate];
  }

  [*(id *)(a1 + 40) setActiveConnection:*(void *)(a1 + 32)];
}

void sub_100103360(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = LBAttendingStatesServiceName;
    id v5 = v3;
    id v6 = objc_loadWeakRetained((id *)(a1 + 40));
    id v7 = v6;
    *(_DWORD *)AudioBufferList buf = 136315906;
    int v14 = "-[CSAttendingStatesServiceListener listener:shouldAcceptNewConnection:]_block_invoke_2";
    __int16 v15 = 2114;
    uint64_t v16 = v4;
    __int16 v17 = 2114;
    id v18 = v6;
    __int16 v19 = 1026;
    unsigned int v20 = [v7 processIdentifier];
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s [Service:%{public}@] Listener Interruption Handler: %{public}@, client PID: %{public}d)",  buf,  0x26u);
  }

  id v8 = objc_loadWeakRetained((id *)(a1 + 40));
  int v9 = v8;
  if (WeakRetained && v8)
  {
    id v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_1001036A8;
    void v11[3] = &unk_10022EFD0;
    void v11[4] = WeakRetained;
    id v12 = v9;
    dispatch_async(v10, v11);
  }
}

void sub_1001034FC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = LBAttendingStatesServiceName;
    id v5 = v3;
    id v6 = objc_loadWeakRetained((id *)(a1 + 40));
    id v7 = v6;
    *(_DWORD *)AudioBufferList buf = 136315906;
    int v14 = "-[CSAttendingStatesServiceListener listener:shouldAcceptNewConnection:]_block_invoke_2";
    __int16 v15 = 2114;
    uint64_t v16 = v4;
    __int16 v17 = 2114;
    id v18 = v6;
    __int16 v19 = 1026;
    unsigned int v20 = [v7 processIdentifier];
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s [Service:%{public}@] Listener Invalidation Handler: %{public}@, client PID: %{public}d exited",  buf,  0x26u);
  }

  id v8 = objc_loadWeakRetained((id *)(a1 + 40));
  int v9 = v8;
  if (WeakRetained && v8)
  {
    id v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100103698;
    void v11[3] = &unk_10022EFD0;
    void v11[4] = WeakRetained;
    id v12 = v9;
    dispatch_async(v10, v11);
  }
}

id sub_100103698(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cleanupConnection:*(void *)(a1 + 40) shouldInvalidate:0];
}

id sub_1001036A8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cleanupConnection:*(void *)(a1 + 40) shouldInvalidate:1];
}

id sub_1001036B8(uint64_t a1)
{
  return objc_storeWeak((id *)(*(void *)(a1 + 32) + 8LL), *(id *)(a1 + 40));
}

void sub_1001045E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_100104710(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = v2;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained attendingConnection]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained attendingConnection]);
    *(_DWORD *)AudioBufferList buf = 136315650;
    id v10 = "-[CSAttendingServiceClient _createClientConnection]_block_invoke";
    __int16 v11 = 2114;
    id v12 = v4;
    __int16 v13 = 1026;
    unsigned int v14 = [v5 processIdentifier];
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Client Interruption Handler: %{public}@, client PID: %{public}d)",  buf,  0x1Cu);
  }

  if (WeakRetained)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained attendingConnection]);

    if (v6)
    {
      id v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained xpcConnectionQueue]);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100104A28;
      block[3] = &unk_10022F100;
      void block[4] = WeakRetained;
      dispatch_async(v7, block);
    }
  }
}

void sub_100104884(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = v2;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained attendingConnection]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained attendingConnection]);
    *(_DWORD *)AudioBufferList buf = 136315650;
    id v10 = "-[CSAttendingServiceClient _createClientConnection]_block_invoke_2";
    __int16 v11 = 2114;
    id v12 = v4;
    __int16 v13 = 1026;
    unsigned int v14 = [v5 processIdentifier];
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Client Invalidation Handler: %{public}@, client PID: %{public}d exited",  buf,  0x1Cu);
  }

  if (WeakRetained)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained attendingConnection]);

    if (v6)
    {
      id v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained xpcConnectionQueue]);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1001049F8;
      block[3] = &unk_10022F100;
      void block[4] = WeakRetained;
      dispatch_async(v7, block);
    }
  }
}

id sub_1001049F8(uint64_t a1)
{
  return [*(id *)(a1 + 32) setRemoteObjectProxy:0];
}

id sub_100104A28(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) attendingConnection]);
  [v2 invalidate];

  [*(id *)(a1 + 32) setAttendingConnection:0];
  return [*(id *)(a1 + 32) setRemoteObjectProxy:0];
}

void sub_100104A70(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      id v7 = v4;
      id v8 = [v3 code];
      int v9 = (void *)objc_claimAutoreleasedReturnValue([v3 localizedDescription]);
      int v10 = 136315650;
      __int16 v11 = "-[CSAttendingServiceClient _setupRemoteServiceProxyObject]_block_invoke";
      __int16 v12 = 2050;
      id v13 = v8;
      __int16 v14 = 2114;
      __int16 v15 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s ERR: Attending Remote Object Proxy returned error : %{public}ld (%{public}@)",  (uint8_t *)&v10,  0x20u);
    }

    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 24);
    *(void *)(v5 + 24) = 0LL;
  }
}

void sub_100106618(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSOpportuneSpeakListenerDeviceManager);
  uint64_t v2 = (void *)qword_100280088;
  qword_100280088 = (uint64_t)v1;
}

void sub_100106E84( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, int a10, __int16 a11, __int16 a12, uint64_t a13)
{
  if (a2 == 1)
  {
    id v14 = objc_begin_catch(exception_object);
    __int16 v15 = (os_log_s *)*v13;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
    {
      id v16 = (id)objc_claimAutoreleasedReturnValue([v14 name]);
      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v14 reason]);
      LODWORD(va_start(va, a9) = 136315650;
      *(void *)((char *)&a9 + 4) = "-[CSRemoraAdBlocker _reset]";
      WORD6(va_start(va, a9) = 2114;
      *(void *)((char *)&a9 + 14) = v16;
      a12 = 2114;
      a13 = (uint64_t)v17;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "%s Problem allocating fingerprintBuffer with name: %{public}@ and reason: %{public}@",  (uint8_t *)&a9,  0x20u);
    }

    objc_end_catch();
    JUMPOUT(0x100106E54LL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_100107C90(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100107CA0(uint64_t a1)
{
}

void sub_100107CA8(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100107CE0(uint64_t a1)
{
  uint64_t v2 = objc_alloc(&OBJC_CLASS___NSUUID);
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestMHUUID]);
  uint64_t v3 = -[NSUUID initWithUUIDString:](v2, "initWithUUIDString:", v6);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 16);
  *(void *)(v4 + 16) = v3;
}

void *sub_100107D44(void *result)
{
  if (result[4])
  {
    uint64_t v1 = result;
    uint64_t v2 = (os_log_s *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = v1[5];
      uint64_t v4 = *(void *)(v1[6] + 104LL);
      int v11 = 136315650;
      __int16 v12 = "-[CSRemoraAdBlocker adBlockerStoreHasUpdateWithCatalog:withResetDictionary:withMaxFingerprintBufferSize:with"
            "AssetVersion:]_block_invoke";
      __int16 v13 = 2112;
      uint64_t v14 = v3;
      __int16 v15 = 2112;
      uint64_t v16 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Received updated adblocker asset with version: %@ by remora adblocker %@",  (uint8_t *)&v11,  0x20u);
    }

    uint64_t v5 = -[SHSession initWithCatalog:](objc_alloc(&OBJC_CLASS___SHSession), "initWithCatalog:", v1[4]);
    uint64_t v6 = v1[6];
    id v7 = *(void **)(v6 + 24);
    *(void *)(v6 + 24) = v5;

    objc_storeStrong((id *)(v1[6] + 88LL), (id)v1[5]);
    id v8 = (void *)v1[6];
    int v9 = (void *)v8[3];
    if (v9)
    {
      objc_msgSend(v9, "setDelegate:");
      int v10 = (os_log_s *)CSLogCategoryAdBlocker;
      if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 136315138;
        __int16 v12 = "-[CSRemoraAdBlocker adBlockerStoreHasUpdateWithCatalog:withResetDictionary:withMaxFingerprintBufferSize:wi"
              "thAssetVersion:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s Remora adblocker has new recognition session",  (uint8_t *)&v11,  0xCu);
      }

      id v8 = (void *)v1[6];
    }

    return [v8 validateSessions];
  }

  return result;
}

void sub_100107EB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 8))
  {
    *(_BYTE *)(v1 + _Block_object_dispose(va, 8) = 1;
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) mediaItems]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 firstObject]);

    if (v4 && (uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 title]), v5, v5))
    {
      uint64_t v6 = (__CFString *)objc_claimAutoreleasedReturnValue([v4 title]);
      id v7 = (os_log_s *)CSLogCategoryAdBlocker;
      if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 88LL);
        *(_DWORD *)AudioBufferList buf = 136315650;
        double v31 = "-[CSRemoraAdBlocker session:didFindMatch:]_block_invoke";
        __int16 v32 = 2112;
        uint64_t v33 = v6;
        __int16 v34 = 2112;
        uint64_t v35 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s Matched for ad: %@ with asset %@",  buf,  0x20u);
      }

      uint64_t v9 = mach_absolute_time();
      unint64_t v10 = *(void *)(*(void *)(a1 + 32) + 40LL);
      if (v9 >= v10)
      {
        +[CSFTimeUtils hostTimeToSeconds:](&OBJC_CLASS___CSFTimeUtils, "hostTimeToSeconds:", v9 - v10);
        objc_msgSend( *(id *)(*(void *)(a1 + 32) + 96),  "sendAnalyticInformation:withAdName:withTimeForAdBlockerDecision:",  1,  v6);
      }

      else
      {
        uint64_t v11 = v9;
        __int16 v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  1801LL,  &off_1002393E0));
        __int16 v13 = (os_log_s *)CSLogCategoryAdBlocker;
        if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_ERROR))
        {
          uint64_t v24 = *(void *)(*(void *)(a1 + 32) + 40LL);
          *(_DWORD *)AudioBufferList buf = 136315906;
          double v31 = "-[CSRemoraAdBlocker session:didFindMatch:]_block_invoke";
          __int16 v32 = 2048;
          uint64_t v33 = (__CFString *)v11;
          __int16 v34 = 2048;
          uint64_t v35 = v24;
          __int16 v36 = 2112;
          uint64_t v37 = v12;
          _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%s Error remora adBlocker end time for match %llu greater than start time %llu with error %@",  buf,  0x2Au);
        }
      }
    }

    else
    {
      uint64_t v14 = (os_log_s *)CSLogCategoryAdBlocker;
      if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioBufferList buf = 136315138;
        double v31 = "-[CSRemoraAdBlocker session:didFindMatch:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%s No ad for matched audio.", buf, 0xCu);
      }

      uint64_t v6 = &stru_10022F858;
    }

    __int16 v15 = (os_log_s *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(__CFString **)(*(void *)(a1 + 32) + 80LL);
      *(_DWORD *)AudioBufferList buf = 136315394;
      double v31 = "-[CSRemoraAdBlocker session:didFindMatch:]_block_invoke";
      __int16 v32 = 2112;
      uint64_t v33 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%s Second pass has finished for Remora. We will deactive Siri with accessory ID: %@.",  buf,  0x16u);
    }

    id v17 = [[AFSiriActivationContext alloc] initWithTimestamp:mach_absolute_time() source:12 event:0 options:0 deviceID:*(void *)(*(void *)(a1 + 32) + 80) userInfo:0];
    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriLauncher sharedLauncher](&OBJC_CLASS___CSSiriLauncher, "sharedLauncher"));
    [v18 deactivateSiriActivationConnectionWithReason:3 withOptions:0 withContext:v17];

    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers", 0));
    id v20 = [v19 countByEnumeratingWithState:&v25 objects:v29 count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = *(void *)v26;
      do
      {
        for (uint64_t i = 0LL; i != v21; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v26 != v22) {
            objc_enumerationMutation(v19);
          }
          [*(id *)(*((void *)&v25 + 1) + 8 * (void)i) remoraAdBlockerHasMatch];
        }

        id v21 = [v19 countByEnumeratingWithState:&v25 objects:v29 count:16];
      }

      while (v21);
    }

    [*(id *)(*(void *)(a1 + 32) + 96) emitAdblockerLoggingWithDismissalType:3 withAdName:v6 withAssetVersion:*(void *)(*(void *)(a1 + 32) + 88) fromEndpoint:1 withRequestMHUUID:*(void *)(*(void *)(a1 + 32) + 16)];
    [*(id *)(a1 + 32) stopRemoraAdBlocker];
  }

void sub_1001082C8(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 56LL);
  uint64_t v4 = (id *)(a1 + 40);
  id v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataForChannel:0]);
  objc_msgSend(v3, "addSamples:numSamples:", objc_msgSend(v5, "bytes"), objc_msgSend(*v4, "numSamples"));

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*v2 fingerprintBuffer]);
  uint64_t v7 = *(void *)(a1 + 48);
  v20[0] = 0LL;
  unsigned int v8 = [v6 appendBuffer:v7 atTime:0 error:v20];
  id v9 = v20[0];

  if (v8)
  {
    unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fingerprintBuffer]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 dataRepresentation]);
    id v19 = v9;
    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue( +[SHSignature signatureWithDataRepresentation:error:]( &OBJC_CLASS___SHSignature,  "signatureWithDataRepresentation:error:",  v11,  &v19));
    id v13 = v19;

    uint64_t v14 = *(void *)(a1 + 32);
    __int16 v15 = *(dispatch_queue_s **)(v14 + 32);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_10010855C;
    v17[3] = &unk_10022EFD0;
    void v17[4] = v14;
    id v18 = v12;
    id v16 = v12;
    dispatch_async(v15, v17);

    id v9 = v13;
  }
}

void sub_100108468( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf, int a18, __int16 a19, __int16 a20, void *a21)
{
  if (a2 == 1)
  {
    id v21 = objc_begin_catch(a1);
    uint64_t v22 = (os_log_s *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      id v23 = (id)objc_claimAutoreleasedReturnValue([v21 name]);
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v21 reason]);
      LODWORD(buf) = 136315650;
      *(void *)((char *)&buf + 4) = "-[CSRemoraAdBlocker audioStreamProvider:audioBufferAvailable:]_block_invoke";
      WORD6(buf) = 2114;
      *(void *)((char *)&buf + 14) = v23;
      a20 = 2114;
      a21 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "%s Failed to extract fingerprint : %{public}@ with reason %{public}@",  (uint8_t *)&buf,  0x20u);
    }

    objc_end_catch();
    JUMPOUT(0x100108430LL);
  }

  _Unwind_Resume(a1);
}

void *sub_10010855C(void *result)
{
  uint64_t v1 = result[4];
  if (!*(_BYTE *)(v1 + 8))
  {
    uint64_t v2 = *(void **)(v1 + 24);
    if (v2) {
      return [v2 matchSignature:result[5]];
    }
  }

  return result;
}

void sub_1001085D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, int a10, __int16 a11, __int16 a12, uint64_t a13)
{
  if (a2 == 1)
  {
    id v13 = objc_begin_catch(exception_object);
    uint64_t v14 = (os_log_s *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      id v15 = (id)objc_claimAutoreleasedReturnValue([v13 name]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v13 reason]);
      LODWORD(va_start(va, a9) = 136315650;
      *(void *)((char *)&a9 + 4) = "-[CSRemoraAdBlocker audioStreamProvider:audioBufferAvailable:]_block_invoke_2";
      WORD6(va_start(va, a9) = 2114;
      *(void *)((char *)&a9 + 14) = v15;
      a12 = 2114;
      a13 = (uint64_t)v16;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%s Error trying to match signature with exceptionName: %{public}@ with reason: %{public}@",  (uint8_t *)&a9,  0x20u);
    }

    objc_end_catch();
    JUMPOUT(0x1001085A0LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_1001086C0(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 80LL))
  {
    uint64_t v2 = objc_alloc(&OBJC_CLASS___SHMutableSignature);
    +[CSConfig defaultContinuousFingerprintBufferDurationForRemora]( &OBJC_CLASS___CSConfig,  "defaultContinuousFingerprintBufferDurationForRemora");
    uint64_t v3 = -[SHMutableSignature initWithMaximumSeconds:clipStyle:](v2, "initWithMaximumSeconds:clipStyle:", 1LL);
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 72);
    *(void *)(v4 + 72) = v3;

    [*(id *)(*(void *)(a1 + 32) + 56) endAudio];
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void **)(v6 + 56);
    *(void *)(v6 + 56) = 0LL;

    [*(id *)(*(void *)(a1 + 32) + 96) emitAdblockerLoggingWithDismissalType:1 withAdName:0 withAssetVersion:*(void *)(*(void *)(a1 + 32) + 88) fromEndpoint:1 withRequestMHUUID:*(void *)(*(void *)(a1 + 32) + 16)];
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioStream]);

    if (v8)
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioStream]);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      v11[2] = sub_100108858;
      void v11[3] = &unk_10022E730;
      void v11[4] = *(void *)(a1 + 32);
      [v9 stopAudioStreamWithOption:0 completion:v11];
    }

    else
    {
      unint64_t v10 = (os_log_s *)CSLogCategoryAdBlocker;
      if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315138;
        id v13 = "-[CSRemoraAdBlocker stopRemoraAdBlocker]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s No audio stream to stop, we shouldn't hit this",  buf,  0xCu);
      }
    }
  }

void sub_100108858(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = (void *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = v6;
      unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v5 description]);
      int v9 = 136315394;
      unint64_t v10 = "-[CSRemoraAdBlocker stopRemoraAdBlocker]_block_invoke_2";
      __int16 v11 = 2114;
      __int16 v12 = v8;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Failed to stop audio stream : %{public}@",  (uint8_t *)&v9,  0x16u);
    }
  }

  [*(id *)(a1 + 32) _reset];
}

void sub_100108954(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(dispatch_queue_s **)(v6 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001089DC;
  block[3] = &unk_10022ECA8;
  char v12 = a2;
  id v10 = v5;
  uint64_t v11 = v6;
  id v8 = v5;
  dispatch_async(v7, block);
}

id sub_1001089DC(uint64_t a1)
{
  uint64_t v2 = (void *)CSLogCategoryAdBlocker;
  if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 48)) {
      uint64_t v3 = @"YES";
    }
    else {
      uint64_t v3 = @"NO";
    }
    uint64_t v4 = *(void **)(a1 + 32);
    id v5 = v2;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 description]);
    *(_DWORD *)AudioBufferList buf = 136315650;
    uint64_t v14 = "-[CSRemoraAdBlocker startRemoraAdBlockerWithAudioProvider:withAccessoryId:]_block_invoke_2";
    __int16 v15 = 2114;
    id v16 = v3;
    __int16 v17 = 2114;
    id v18 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s Start audio stream successfully ? %{public}@, error : %{public}@",  buf,  0x20u);
  }

  if (!*(_BYTE *)(a1 + 48)) {
    return [*(id *)(a1 + 40) stopRemoraAdBlocker];
  }
  +[CSFAudioStreamBasicDescriptionFactory utteranceFileASBD]( &OBJC_CLASS___CSFAudioStreamBasicDescriptionFactory,  "utteranceFileASBD");
  +[CSFAudioStreamBasicDescriptionFactory utteranceFileASBD]( &OBJC_CLASS___CSFAudioStreamBasicDescriptionFactory,  "utteranceFileASBD");
  uint64_t v7 = objc_claimAutoreleasedReturnValue( +[CSAudioFileManager createAudioFileWriterForAdBlockerWithInputFormat:outputFormat:withAccessoryID:]( &OBJC_CLASS___CSAudioFileManager,  "createAudioFileWriterForAdBlockerWithInputFormat:outputFormat:withAccessoryID:",  v12,  &v11,  *(void *)(*(void *)(a1 + 40) + 80LL)));
  uint64_t v8 = *(void *)(a1 + 40);
  int v9 = *(void **)(v8 + 56);
  *(void *)(v8 + 56) = v7;

  id result = (id)mach_absolute_time();
  *(void *)(*(void *)(a1 + 40) + 4+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = result;
  return result;
}

id sub_100108B50(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isEqualToString:*(void *)(*(void *)(a1 + 40) + 80)];
  if ((_DWORD)result)
  {
    uint64_t v3 = (os_log_s *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      id v5 = "-[CSRemoraAdBlocker voiceTriggerDidDetectNearMiss:deviceId:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Voice trigger near miss in remoraAdBlocker.",  (uint8_t *)&v4,  0xCu);
    }

    return [*(id *)(a1 + 40) stopRemoraAdBlocker];
  }

  return result;
}

id sub_100108C14(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isEqualToString:*(void *)(*(void *)(a1 + 40) + 80)];
  if ((_DWORD)result)
  {
    uint64_t v3 = (os_log_s *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      id v5 = "-[CSRemoraAdBlocker voiceTriggerDidRejected:deviceId:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Voice trigger rejected in remoraAdBlocker.",  (uint8_t *)&v4,  0xCu);
    }

    return [*(id *)(a1 + 40) stopRemoraAdBlocker];
  }

  return result;
}

void sub_100108CD8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  unsigned int v3 = [v2 containsObject:*(void *)(a1 + 40)];

  if (v3)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
    [v4 removeObject:*(void *)(a1 + 40)];
  }

void sub_100108D58(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  unsigned __int8 v3 = [v2 containsObject:*(void *)(a1 + 40)];

  if ((v3 & 1) == 0)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
    [v4 addObject:*(void *)(a1 + 40)];
  }

LABEL_29:
  id v21 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    isSpeaking = self->_isSpeaking;
    uint64_t v33 = 136315394;
    __int16 v34 = "-[CSAttSiriAudioSessionStateClient dispatchStateChangedFrom:to:]";
    uint64_t v35 = 1024;
    __int16 v36 = isSpeaking;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "%s SiriState - isSpeaking:%d",  (uint8_t *)&v33,  0x12u);
  }

  uint64_t v14 = isActiveSession;
LABEL_32:
  id v23 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v33 = 136315650;
    __int16 v34 = "-[CSAttSiriAudioSessionStateClient dispatchStateChangedFrom:to:]";
    uint64_t v35 = 1024;
    __int16 v36 = v14;
    uint64_t v37 = 1024;
    id v38 = v10 & 1;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "%s tts Finished:%u isRequestCompleted:%u",  (uint8_t *)&v33,  0x18u);
  }

  if (v14)
  {
    uint64_t v24 = objc_loadWeakRetained((id *)&self->_delegate);
    __int128 v25 = objc_opt_respondsToSelector(v24, "notifySiriSessionStateChange:");

    if ((v25 & 1) != 0)
    {
      __int128 v26 = objc_loadWeakRetained((id *)&self->_delegate);
      [v26 notifySiriSessionStateChange:1];
    }
  }

  if ((v10 & 1) != 0 && (self->_isSpeaking & ~v14) == 0)
  {
    p_delegate = &self->_delegate;
    __int128 v28 = objc_loadWeakRetained((id *)p_delegate);
    if (v28)
    {
      unint64_t v29 = v28;
      double v30 = objc_loadWeakRetained((id *)p_delegate);
      double v31 = objc_opt_respondsToSelector(v30, "notifyRequestCompletion");

      if ((v31 & 1) != 0)
      {
        __int16 v32 = objc_loadWeakRetained((id *)p_delegate);
        [v32 notifyRequestCompletion];
      }
    }
  }

void sub_10010A0E0(id a1, id a2)
{
}

void sub_10010A0EC(id a1, id a2)
{
}

void sub_10010A0F8(id a1, id a2)
{
}

void sub_10010A104(id a1, id a2)
{
}

void sub_10010A110(id a1, id a2)
{
}

void sub_10010A15C(id a1)
{
  int v2 = v1;
  unsigned __int8 v3 = objc_alloc(&OBJC_CLASS___CSSmartSiriVolumeManager);
  LODWORD(v4) = v2;
  id v5 = -[CSSmartSiriVolumeManager initWithSamplingRate:](v3, "initWithSamplingRate:", v4);
  uint64_t v6 = (void *)qword_1002800A0;
  qword_1002800A0 = (uint64_t)v5;
}

void sub_10010A5BC(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _checkSiriInCallEnabled];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(unsigned __int8 *)(v3 + 12);
  if (v4 == v2)
  {
    id v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = @"ON";
      if (!v4) {
        uint64_t v6 = @"OFF";
      }
      int v7 = 136315394;
      uint64_t v8 = "-[CSSiriInCallEnabledMonitor _siriInCallEnabledDidChangeEnabledDidChange]_block_invoke";
      __int16 v9 = 2114;
      id v10 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Siri in Call is already %{public}@, received duplicated notification!",  (uint8_t *)&v7,  0x16u);
    }
  }

  else
  {
    *(_BYTE *)(v3 + 12) = v2;
    [*(id *)(a1 + 32) _didReceiveSiriInCallChangedInQueue:*(unsigned __int8 *)(*(void *)(a1 + 32) + 12)];
  }

id sub_10010A6E0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _notifyObserver:a2 withEnabled:*(unsigned __int8 *)(a1 + 40)];
}

id sub_10010A6F4(uint64_t a1, void *a2)
{
  return [a2 _siriInCallEnabledDidChangeEnabledDidChange];
}

void sub_10010A73C(id a1)
{
  int v1 = objc_alloc_init(&OBJC_CLASS___CSSiriInCallEnabledMonitor);
  unsigned int v2 = (void *)qword_1002800B0;
  qword_1002800B0 = (uint64_t)v1;
}

void sub_10010B8C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_10010CA18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10010E76C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10010E77C(uint64_t a1)
{
}

void sub_10010E784(void *a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 168) objectForKeyedSubscript:a1[5]]);
  uint64_t v2 = objc_claimAutoreleasedReturnValue([v5 inputFeats]);
  uint64_t v3 = *(void *)(a1[6] + 8LL);
  int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10010E7DC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategorySDSD;
  if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    BOOL v4 = *(_BYTE *)(a1 + 48) == 0;
    int v5 = *(unsigned __int8 *)(a1 + 49);
    int v11 = 136315906;
    char v12 = "-[CSAttSiriUresNode didReceiveTCUUpdateForTCUId:withTCUAccepted:forRequestId:isFinal:]_block_invoke";
    __int16 v13 = 2114;
    uint64_t v14 = v3;
    __int16 v15 = 1024;
    BOOL v16 = v4;
    __int16 v17 = 1024;
    int v18 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Receive TCU status update for requestId: %{public}@, didMitigate: %d, isFinal: %d",  (uint8_t *)&v11,  0x22u);
  }

  if (*(void *)(a1 + 32))
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 168), "objectForKeyedSubscript:"));
    if (!v6)
    {
      int v7 = (os_log_s *)CSLogCategorySDSD;
      if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        int v11 = 136315394;
        char v12 = "-[CSAttSiriUresNode didReceiveTCUUpdateForTCUId:withTCUAccepted:forRequestId:isFinal:]_block_invoke";
        __int16 v13 = 2114;
        uint64_t v14 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s Rcvd update for invalid requestId %{public}@",  (uint8_t *)&v11,  0x16u);
      }
    }

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 72LL));
    [WeakRetained informMitigationDecision:*(_BYTE *)(a1 + 48) == 0 forRequestId:*(void *)(a1 + 32) isFinal:*(unsigned __int8 *)(a1 + 49)];
  }

  else
  {
    id v10 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315138;
      char v12 = "-[CSAttSiriUresNode didReceiveTCUUpdateForTCUId:withTCUAccepted:forRequestId:isFinal:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s RequestId is nil, abort",  (uint8_t *)&v11,  0xCu);
    }
  }

void sub_10010E9C8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategorySDSD;
  if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    *(void *)&uint8_t buf[4] = "-[CSAttSiriUresNode constructTCUIntendedInfoForRequestId:withResultCandidate:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "KeyLog - %s Received RC from ASR, make UReS decision",  buf,  0xCu);
  }

  if (*(void *)(a1 + 32))
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 168), "objectForKeyedSubscript:"));
    BOOL v4 = v3;
    if (v3)
    {
      int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 inputFeats]);
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 inputOrigin]);
      BOOL v7 = v6 == 0LL;

      if (v7)
      {
        __int16 v34 = (os_log_s *)CSLogCategorySDSD;
        if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioBufferList buf = 136315138;
          *(void *)&uint8_t buf[4] = "-[CSAttSiriUresNode constructTCUIntendedInfoForRequestId:withResultCandidate:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "%s Not running ODLD for nil inputOrigin",  buf,  0xCu);
        }
      }

      else
      {
        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 72LL));
        __int16 v71 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained processSpeechPackageSync:*(void *)(a1 + 48)]);

        if (v71)
        {
          __int16 v9 = (void *)CSLogCategorySDSD;
          if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
          {
            id v10 = v9;
            [v71 odldScore];
            float v12 = v11;
            [v71 outputAnchor];
            float v14 = v13;
            [v71 conversationalScore];
            *(_DWORD *)AudioBufferList buf = 136315906;
            *(void *)&uint8_t buf[4] = "-[CSAttSiriUresNode constructTCUIntendedInfoForRequestId:withResultCandidate:]_block_invoke";
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v12;
            *(_WORD *)&buf[22] = 2048;
            double v77 = v14;
            LOWORD(v78[0]) = 2048;
            *(double *)((char *)v78 + 2) = v15;
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s AttSignal: NLDA Score: %.3f Anchor Score: %.3f conversationalScore: %.3f",  buf,  0x2Au);
          }

          [v71 odldScore];
          float v17 = v16;
          [v71 conversationalScore];
          float v19 = v18;
          [v71 odldScore];
          id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:"));
          id v21 = (void *)objc_claimAutoreleasedReturnValue([v4 inputFeats]);
          [v21 setNldaScore:v20];

          [v71 conversationalScore];
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:"));
          id v23 = (void *)objc_claimAutoreleasedReturnValue([v4 inputFeats]);
          [v23 setConversationalNldaScore:v22];

          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v71 features]);
          __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v4 inputFeats]);
          [v25 setNldaMetaInfo:v24];

          [v71 odldScore];
          uint64_t v26 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:"));
          uint64_t v27 = *(void *)(*(void *)(a1 + 56) + 8LL);
          __int128 v28 = *(void **)(v27 + 40);
          *(void *)(v27 + 40) = v26;

          unint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) recognition]);
          [v29 processedAudioDuration];
          *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = v30;
        }

        else
        {
          float v19 = -1.0;
          float v17 = -1.0;
        }

        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v4 inputFeats]);
        uint64_t v72 = 0LL;
        __int16 v73 = &v72;
        uint64_t v74 = 0x2050000000LL;
        __int16 v36 = (void *)qword_1002800D0;
        uint64_t v75 = qword_1002800D0;
        if (!qword_1002800D0)
        {
          *(void *)AudioBufferList buf = _NSConcreteStackBlock;
          *(void *)&buf[8] = 3221225472LL;
          *(void *)&buf[16] = sub_10010F4BC;
          double v77 = COERCE_DOUBLE(&unk_10022E990);
          v78[0] = &v72;
          sub_10010F4BC((uint64_t)buf);
          __int16 v36 = (void *)v73[3];
        }

        uint64_t v37 = v36;
        _Block_object_dispose(&v72, 8);
        id v70 = objc_alloc(v37);
        id v38 = (void *)objc_claimAutoreleasedReturnValue([v35 acousticFTMScores]);
        [v38 floatValue];
        int v40 = v39;
        uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v35 speakerIDScore]);
        [v41 floatValue];
        int v43 = v42;
        +[CSAttSiriUresNode _extractLrnnScoreForResultCandidate:]( &OBJC_CLASS___CSAttSiriUresNode,  "_extractLrnnScoreForResultCandidate:",  *(void *)(a1 + 48));
        int v45 = v44;
        __int128 v46 = (void *)objc_claimAutoreleasedReturnValue([v35 checkerScore]);
        [v46 floatValue];
        int v48 = v47;
        __int16 v49 = (void *)objc_claimAutoreleasedReturnValue([v35 inputOrigin]);
        __int16 v50 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) latticeMitigatorResult]);
        [v50 threshold];
        int v52 = v51;
        uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) latticeMitigatorResult]);
        [v53 calibrationScale];
        int v55 = v54;
        uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) latticeMitigatorResult]);
        [v56 calibrationOffset];
        LODWORD(v5_Block_object_dispose(va, 8) = v57;
        *(float *)&uint64_t v69 = v19;
        *(float *)&double v59 = v17;
        LODWORD(v60) = v40;
        LODWORD(v61) = v43;
        LODWORD(v62) = v45;
        LODWORD(v63) = v48;
        LODWORD(v64) = v52;
        LODWORD(v65) = v55;
        id v66 = [v70 initWithOdldScore:v49 aftmScore:v59 spkrIdScore:v60 lrnnScore:v61 checkerScore:v62 invocationType:v63 lrnnThreshold:v64 lrnnScale:v65 lr nnOffset:v58 conversationalOdldScore:v69];
        uint64_t v67 = *(void *)(*(void *)(a1 + 72) + 8LL);
        __int16 v68 = *(void **)(v67 + 40);
        *(void *)(v67 + 40) = v66;
      }
    }

    else
    {
      __int16 v32 = (os_log_s *)CSLogCategorySDSD;
      if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = *(void *)(a1 + 32);
        *(_DWORD *)AudioBufferList buf = 136315394;
        *(void *)&uint8_t buf[4] = "-[CSAttSiriUresNode constructTCUIntendedInfoForRequestId:withResultCandidate:]_block_invoke";
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v33;
        _os_log_error_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "%s Rcvd RC for invalid requestId %{public}@",  buf,  0x16u);
      }
    }
  }

  else
  {
    double v31 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      *(void *)&uint8_t buf[4] = "-[CSAttSiriUresNode constructTCUIntendedInfoForRequestId:withResultCandidate:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%s RequestId is nil, abort", buf, 0xCu);
    }
  }

void sub_10010EFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_10010EFD0(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) && *(void *)(a1 + 32))
  {
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "receivers", 0));
    id v3 = [v2 countByEnumeratingWithState:&v44 objects:v52 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v45;
      do
      {
        for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v45 != v5) {
            objc_enumerationMutation(v2);
          }
          BOOL v7 = *(void **)(*((void *)&v44 + 1) + 8LL * (void)i);
          if ((objc_opt_respondsToSelector( v7,  "attSiriUresNode:tcuGeneratedForRequestId:withNldaScore:withProcessedAudioDuration:") & 1) != 0)
          {
            uint64_t v9 = *(void *)(a1 + 32);
            uint64_t v8 = *(void *)(a1 + 40);
            [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) floatValue];
            objc_msgSend( v7,  "attSiriUresNode:tcuGeneratedForRequestId:withNldaScore:withProcessedAudioDuration:",  v8,  v9);
          }
        }

        id v4 = [v2 countByEnumeratingWithState:&v44 objects:v52 count:16];
      }

      while (v4);
    }
  }

  if (*(void *)(a1 + 32)
    && (id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 168), "objectForKeyedSubscript:"))) != 0)
  {
    float v11 = v10;
    float v12 = (void *)objc_claimAutoreleasedReturnValue([v10 inputFeats]);
    float v13 = (void *)objc_claimAutoreleasedReturnValue([v12 inputOrigin]);

    if (v13)
    {
      float v14 = *(void **)(a1 + 48);
      if (v14
        && (float v15 = (void *)objc_claimAutoreleasedReturnValue([v14 latticeMitigatorResult]),
            v15,
            v15))
      {
        float v16 = *(void **)(a1 + 40);
        float v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) latticeMitigatorResult]);
        float v18 = (void *)objc_claimAutoreleasedReturnValue([v11 mhId]);
        [v16 _logLatticeRNNResults:v17 forMhId:v18];
      }

      else
      {
        id v21 = (os_log_s *)CSLogCategorySDSD;
        if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioBufferList buf = 136315138;
          __int16 v49 = "-[CSAttSiriUresNode constructTCUIntendedInfoForRequestId:withResultCandidate:]_block_invoke";
          _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%s Speech package not present or Speech package doesn't contain LRNN scores",  buf,  0xCu);
        }

        uint64_t v22 = *(void **)(a1 + 40);
        id v23 = (void *)objc_claimAutoreleasedReturnValue([v11 mhId]);
        [v22 _logLRNNFailMsgForMhId:v23];

        uint64_t v24 = *(void **)(a1 + 40);
        float v17 = (void *)objc_claimAutoreleasedReturnValue([v11 mhId]);
        [v24 _logURESFailureMsgInput:1902 forMhId:v17];
      }

      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 80LL));
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v11 inputFeats]);
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 speakerIDScore]);
      [v27 floatValue];
      int v29 = v28;
      [v11 spkrIdAudioProcessedDuration];
      double v31 = v30;
      LODWORD(v30) = v29;
      [WeakRetained logSpeakerFalseTriggerMitigationScore:v30 withAudioDuration:v31];

      uint64_t v32 = *(void *)(a1 + 48);
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v11 inputFeats]);
      [v33 setSpeechPackage:v32];

      __int16 v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) latticeMitigatorResult]);
      [v34 score];
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:"));
      __int16 v36 = (void *)objc_claimAutoreleasedReturnValue([v11 inputFeats]);
      [v36 setLrnnScore:v35];

      uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) latticeMitigatorResult]);
      [v37 threshold];
      id v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:"));
      int v39 = (void *)objc_claimAutoreleasedReturnValue([v11 inputFeats]);
      [v39 setLrnnThreshold:v38];

      int v40 = (void *)objc_claimAutoreleasedReturnValue([v11 inputFeats]);
      uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v11 mhId]);
      int v42 = (void *)objc_claimAutoreleasedReturnValue([v11 requestId]);
      +[CSUtils logMitigationFeatures:forTask:withModelOutput:forMHRequestId:forRequestId:]( &OBJC_CLASS___CSUtils,  "logMitigationFeatures:forTask:withModelOutput:forMHRequestId:forRequestId:",  v40,  @"Mitigation",  &off_100239408,  v41,  v42);
    }

    else
    {
      int v43 = (os_log_s *)CSLogCategorySDSD;
      if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioBufferList buf = 136315138;
        __int16 v49 = "-[CSAttSiriUresNode constructTCUIntendedInfoForRequestId:withResultCandidate:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "%s Not running SDSD for nil inputOrigin",  buf,  0xCu);
      }
    }
  }

  else
  {
    float v19 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)(a1 + 32);
      *(_DWORD *)AudioBufferList buf = 136315394;
      __int16 v49 = "-[CSAttSiriUresNode constructTCUIntendedInfoForRequestId:withResultCandidate:]_block_invoke";
      __int16 v50 = 2114;
      uint64_t v51 = v20;
      _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%s Rcvd RC for invalid requestId %{public}@",  buf,  0x16u);
    }
  }

Class sub_10010F4BC(uint64_t a1)
{
  uint64_t v5 = 0LL;
  uint64_t v2 = (const char *)&qword_100280000;
  if (!qword_1002800D8)
  {
    __int128 v6 = off_10022D868;
    uint64_t v7 = 0LL;
    qword_1002800D8 = _sl_dlopen(&v6, &v5);
    id v3 = v5;
    if (!qword_1002800D8)
    {
      abort_report_np("%s", v5);
      goto LABEL_7;
    }

    if (v5) {
      goto LABEL_8;
    }
  }

  while (1)
  {
    uint64_t v2 = "SMTSiriIntendedInfo";
    Class result = objc_getClass("SMTSiriIntendedInfo");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
      break;
    }
LABEL_7:
    id v3 = (char *)abort_report_np("Unable to find class %s", v2);
LABEL_8:
    free(v3);
  }

  qword_1002800D0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

void sub_10010F5C0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
  unsigned int v3 = [v2 bypassSpeakerIdForMitigation];

  if (v3)
  {
    id v4 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t v37 = 136315138;
      *(void *)&v37[4] = "-[CSAttSiriUresNode attSiriNode:didUpdateWithSpeakerInfo:forReqId:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Ignore SpkrId Score updates", v37, 0xCu);
    }

    return;
  }

  if ((unint64_t)[*(id *)(*(void *)(a1 + 32) + 168) count] < 2)
  {
    float v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 168) allValues]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v13 firstObject]);

    goto LABEL_12;
  }

  uint64_t v5 = (void *)CSLogCategorySDSD;
  if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_INFO))
  {
    __int128 v6 = *(void **)(*(void *)(a1 + 32) + 168LL);
    uint64_t v7 = v5;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 allKeys]);
    *(_DWORD *)uint64_t v37 = 136315394;
    *(void *)&v37[4] = "-[CSAttSiriUresNode attSiriNode:didUpdateWithSpeakerInfo:forReqId:]_block_invoke";
    *(_WORD *)&v37[12] = 2112;
    *(void *)&v37[14] = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Ignore update as multiple requests in progress - %@",  v37,  0x16u);
  }

  if (*(void *)(a1 + 40))
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 168), "objectForKey:"));

    if (v9)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 168) objectForKeyedSubscript:*(void *)(a1 + 40)]);
      float v11 = (os_log_s *)CSLogCategorySDSD;
      if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 40);
        *(_DWORD *)uint64_t v37 = 136315394;
        *(void *)&v37[4] = "-[CSAttSiriUresNode attSiriNode:didUpdateWithSpeakerInfo:forReqId:]_block_invoke";
        *(_WORD *)&v37[12] = 2112;
        *(void *)&v37[14] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%s Found entry for reqId: %@", v37, 0x16u);
      }

void sub_10010FB7C(void *a1)
{
  if ((unint64_t)[*(id *)(a1[4] + 168) count] < 2)
  {
    __int128 v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 168) allValues]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
    id v4 = (id)objc_claimAutoreleasedReturnValue([v7 inputFeats]);

    if (v4)
    {
      uint64_t v8 = qword_1002800C8;
      if (__ROR8__(0x8F5C28F5C28F5C29LL * qword_1002800C8, 1) <= 0x51EB851EB851EB8uLL)
      {
        uint64_t v9 = (os_log_s *)CSLogCategorySDSD;
        if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
        {
          id v10 = (void *)a1[5];
          uint64_t v11 = a1[6];
          int v13 = 136315650;
          float v14 = "-[CSAttSiriUresNode attSiriNode:didUpdateOSDFeatures:withFrameDurationMs:withMHID:]_block_invoke";
          __int16 v15 = 2114;
          float v16 = v10;
          __int16 v17 = 2048;
          uint64_t v18 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s AttSignal: osdActivity: %{public}@ for duration %.3f",  (uint8_t *)&v13,  0x20u);
          uint64_t v8 = qword_1002800C8;
        }
      }

      qword_1002800C8 = v8 + 1;
      [v4 setDidDetectSpeechActivity:1];
    }

    else
    {
      uint64_t v12 = (os_log_s *)CSLogCategorySDSD;
      if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315138;
        float v14 = "-[CSAttSiriUresNode attSiriNode:didUpdateOSDFeatures:withFrameDurationMs:withMHID:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s Input origin not set, Abort !",  (uint8_t *)&v13,  0xCu);
      }
    }
  }

  else
  {
    uint64_t v2 = (void *)CSLogCategorySDSD;
    if (!os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_INFO)) {
      return;
    }
    unsigned int v3 = *(void **)(a1[4] + 168LL);
    id v4 = v2;
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 allKeys]);
    int v13 = 136315394;
    float v14 = "-[CSAttSiriUresNode attSiriNode:didUpdateOSDFeatures:withFrameDurationMs:withMHID:]_block_invoke";
    __int16 v15 = 2112;
    float v16 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v4,  OS_LOG_TYPE_INFO,  "%s Ignore update as multiple requests in progress - %@",  (uint8_t *)&v13,  0x16u);
  }
}

void sub_10010FDD8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategorySDSD;
  if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
  {
    double v3 = *(float *)(a1 + 56);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    int v35 = 136315906;
    __int16 v36 = "-[CSAttSiriUresNode attSiriNode:didMitigate:withScore:forRequestId:taskType:]_block_invoke";
    __int16 v37 = 2050;
    double v38 = v3;
    __int16 v39 = 2114;
    uint64_t v40 = v4;
    __int16 v41 = 2114;
    uint64_t v42 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Received AFTM score: %{public}f for requestId: %{public}@ task: %{public}@",  (uint8_t *)&v35,  0x2Au);
  }

  if ((unint64_t)[*(id *)(*(void *)(a1 + 48) + 168) count] < 2)
  {
    float v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 168) allValues]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v14 firstObject]);

LABEL_11:
    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v11 inputFeats]);
    if (v15)
    {
      if ([v11 shouldUpdateMitigationResult])
      {
        uint64_t v16 = objc_claimAutoreleasedReturnValue([v15 acousticFTMScores]);
        if (!v16
          || (uint64_t v18 = (void *)v16,
              float v19 = (void *)objc_claimAutoreleasedReturnValue([v15 acousticFTMScores]),
              [v19 floatValue],
              float v21 = vabds_f32(v20, *(float *)(a1 + 56)),
              v19,
              v18,
              v21 > 2.2204e-16))
        {
          LODWORD(v17) = *(_DWORD *)(a1 + 56);
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v17));
          [v15 setAcousticFTMScores:v22];

          id v23 = [v11 lastRCId];
          uint64_t v24 = (void *)CSLogCategorySDSD;
          if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
          {
            BOOL v25 = v24;
            uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v15 confidenceScore]);
            [v26 doubleValue];
            int v35 = 136315394;
            __int16 v36 = "-[CSAttSiriUresNode attSiriNode:didMitigate:withScore:forRequestId:taskType:]_block_invoke";
            __int16 v37 = 2050;
            double v38 = v27;
            _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "%s NC Input Logging, ASR confidence score: %{public}.3f",  (uint8_t *)&v35,  0x16u);
          }

          [*(id *)(a1 + 48) _createModelAndRunInferenceForRcId:v23 withRequestContext:v11 withCompletion:0];
        }
      }

      uint64_t v28 = (os_log_s *)CSLogCategorySDSD;
      if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
      {
        double v30 = *(float *)(a1 + 56);
        int v35 = 136315394;
        __int16 v36 = "-[CSAttSiriUresNode attSiriNode:didMitigate:withScore:forRequestId:taskType:]_block_invoke";
        __int16 v37 = 2048;
        double v38 = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "%s AttSignal: aftmScore: %.3f",  (uint8_t *)&v35,  0x16u);
      }

      LODWORD(v29) = *(_DWORD *)(a1 + 56);
      double v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v29));
      [v15 setAcousticFTMScores:v31];
    }

    else
    {
      __int16 v34 = (os_log_s *)CSLogCategorySDSD;
      if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
      {
        int v35 = 136315138;
        __int16 v36 = "-[CSAttSiriUresNode attSiriNode:didMitigate:withScore:forRequestId:taskType:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "%s Input origin not set, Abort !",  (uint8_t *)&v35,  0xCu);
      }
    }

    return;
  }

  __int128 v6 = (void *)CSLogCategorySDSD;
  if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void **)(*(void *)(a1 + 48) + 168LL);
    uint64_t v8 = v6;
    double v9 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue([v7 allKeys]));
    int v35 = 136315394;
    __int16 v36 = "-[CSAttSiriUresNode attSiriNode:didMitigate:withScore:forRequestId:taskType:]_block_invoke";
    __int16 v37 = 2112;
    double v38 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s Ignore update as multiple requests in progress - %@",  (uint8_t *)&v35,  0x16u);
  }

  if (*(void *)(a1 + 32))
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 48) + 168), "objectForKey:"));

    if (v10)
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 168) objectForKeyedSubscript:*(void *)(a1 + 32)]);
      uint64_t v12 = (os_log_s *)CSLogCategorySDSD;
      if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
      {
        double v13 = *(double *)(a1 + 32);
        int v35 = 136315394;
        __int16 v36 = "-[CSAttSiriUresNode attSiriNode:didMitigate:withScore:forRequestId:taskType:]_block_invoke";
        __int16 v37 = 2112;
        double v38 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s Found entry for reqId: %@",  (uint8_t *)&v35,  0x16u);
      }

      goto LABEL_11;
    }
  }

  uint64_t v32 = (os_log_s *)CSLogCategorySDSD;
  if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
  {
    double v33 = *(double *)(a1 + 32);
    int v35 = 136315394;
    __int16 v36 = "-[CSAttSiriUresNode attSiriNode:didMitigate:withScore:forRequestId:taskType:]_block_invoke";
    __int16 v37 = 2112;
    double v38 = v33;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "%s ReqId: %@ not found, not updating aftm",  (uint8_t *)&v35,  0x16u);
  }

void sub_1001102A0(uint64_t a1)
{
  if ((unint64_t)[*(id *)(*(void *)(a1 + 32) + 168) count] < 2)
  {
    __int128 v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 168) allValues]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
    id v4 = (id)objc_claimAutoreleasedReturnValue([v7 inputFeats]);

    uint64_t v8 = (os_log_s *)CSLogCategorySDSD;
    BOOL v9 = os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v9)
      {
        id v10 = @"Lost";
        if (*(void *)(a1 + 40) == 1LL) {
          id v10 = @"Gain";
        }
        int v11 = 136315394;
        uint64_t v12 = "-[CSAttSiriUresNode attSiriNode:didUpdateAttentionState:]_block_invoke";
        __int16 v13 = 2114;
        float v14 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s AttSignal: attentionState: %{public}@",  (uint8_t *)&v11,  0x16u);
      }

      [v4 setDidDetectAttention:*(void *)(a1 + 40) != 0];
    }

    else if (v9)
    {
      int v11 = 136315138;
      uint64_t v12 = "-[CSAttSiriUresNode attSiriNode:didUpdateAttentionState:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s Input origin not set, Abort !",  (uint8_t *)&v11,  0xCu);
    }
  }

  else
  {
    uint64_t v2 = (void *)CSLogCategorySDSD;
    if (!os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_INFO)) {
      return;
    }
    double v3 = *(void **)(*(void *)(a1 + 32) + 168LL);
    id v4 = v2;
    uint64_t v5 = (__CFString *)objc_claimAutoreleasedReturnValue([v3 allKeys]);
    int v11 = 136315394;
    uint64_t v12 = "-[CSAttSiriUresNode attSiriNode:didUpdateAttentionState:]_block_invoke";
    __int16 v13 = 2112;
    float v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v4,  OS_LOG_TYPE_INFO,  "%s Ignore update as multiple requests in progress - %@",  (uint8_t *)&v11,  0x16u);
  }
}

void sub_1001104AC(uint64_t a1)
{
  if ((unint64_t)[*(id *)(*(void *)(a1 + 32) + 168) count] < 2)
  {
    __int128 v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 168) allValues]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
    id v4 = (id)objc_claimAutoreleasedReturnValue([v7 inputFeats]);

    if (!v4)
    {
      uint64_t v12 = (os_log_s *)CSLogCategorySDSD;
      if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 136315138;
        float v14 = "-[CSAttSiriUresNode setEndpointerFeatureEoS:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s Input origin not set, Abort !",  (uint8_t *)&v13,  0xCu);
      }

      goto LABEL_10;
    }

    uint64_t v9 = qword_1002800C0;
    if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * qword_1002800C0, 1) <= 0x1999999999999999uLL)
    {
      id v10 = (os_log_s *)CSLogCategorySDSD;
      if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
      {
        double v11 = *(float *)(a1 + 40);
        int v13 = 136315394;
        float v14 = "-[CSAttSiriUresNode setEndpointerFeatureEoS:]_block_invoke";
        __int16 v15 = 2050;
        double v16 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s AttSignal: EoS Likelihood %{public}f",  (uint8_t *)&v13,  0x16u);
        uint64_t v9 = qword_1002800C0;
      }
    }

    qword_1002800C0 = v9 + 1;
    LODWORD(v_Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 40);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v8));
    [v4 setEosLikelihood:v5];
  }

  else
  {
    uint64_t v2 = (void *)CSLogCategorySDSD;
    if (!os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_INFO)) {
      return;
    }
    double v3 = *(void **)(*(void *)(a1 + 32) + 168LL);
    id v4 = v2;
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 allKeys]);
    int v13 = 136315394;
    float v14 = "-[CSAttSiriUresNode setEndpointerFeatureEoS:]_block_invoke";
    __int16 v15 = 2112;
    double v16 = *(double *)&v5;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v4,  OS_LOG_TYPE_INFO,  "%s Ignore update as multiple requests in progress - %@",  (uint8_t *)&v13,  0x16u);
  }

LABEL_10:
}

void sub_100110708(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategorySDSD;
  if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
  {
    int v51 = 136315138;
    int v52 = "-[CSAttSiriUresNode processResultCandidate:forRCId:forTask:forRequestId:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Received RC from ASR, make UReS decision",  (uint8_t *)&v51,  0xCu);
  }

  double v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 168) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  id v4 = v3;
  if (v3)
  {
    [v3 setLastRCId:*(void *)(a1 + 72)];
    if ([*(id *)(a1 + 32) _shouldRunMitigationForRequestContext:v4 forTask:*(void *)(a1 + 48)])
    {
      uint64_t v5 = *(void **)(a1 + 56);
      if (!v5
        || (uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 latticeMitigatorResult])) == 0
        || (uint64_t v7 = (void *)v6,
            double v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) latticeMitigatorResult]),
            [v8 score],
            float v10 = v9,
            v8,
            v7,
            v10 == 0.0))
      {
        double v11 = (os_log_s *)CSLogCategorySDSD;
        if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
        {
          int v51 = 136315138;
          int v52 = "-[CSAttSiriUresNode processResultCandidate:forRCId:forTask:forRequestId:completion:]_block_invoke";
          _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%s Speech package not present or Speech package doesn't contain LRNN scores, don't run URES mitigator",  (uint8_t *)&v51,  0xCu);
        }

        [*(id *)(a1 + 32) _storeMitigationDecision:0 forRCId:*(void *)(a1 + 72) requestContext:v4];
        uint64_t v12 = *(void *)(a1 + 64);
        if (v12) {
          (*(void (**)(uint64_t, void))(v12 + 16))(v12, 0LL);
        }
        int v13 = *(void **)(a1 + 32);
        float v14 = (void *)objc_claimAutoreleasedReturnValue([v4 mhId]);
        [v13 _logLRNNFailMsgForMhId:v14];

        __int16 v15 = *(void **)(a1 + 32);
        double v16 = (void *)objc_claimAutoreleasedReturnValue([v4 mhId]);
        [v15 _logURESFailureMsgInput:1902 forMhId:v16];
LABEL_13:

        goto LABEL_21;
      }

      id v23 = *(void **)(a1 + 32);
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) recognition]);
      BOOL v25 = (void *)objc_claimAutoreleasedReturnValue([v4 inputFeats]);
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 inputOrigin]);
      LODWORD(v23) = [v23 _shouldApplyAllowListOverride:v24 withInputOrigin:v26];

      if (!(_DWORD)v23)
      {
        uint64_t v28 = *(void **)(a1 + 32);
        if (!v28[6] && [v28 _supportsHybridSDSD])
        {
          [*(id *)(a1 + 32) _runLRNNOnlyMitigationForRCId:*(void *)(a1 + 72) speechPackage:*(void *)(a1 + 56) requestId:*(void *)(a1 + 40) completion:*(void *)(a1 + 64)];
          goto LABEL_21;
        }

        double v16 = (void *)objc_claimAutoreleasedReturnValue([v4 inputFeats]);
        [v16 setDecisionStage:2];
        [v16 setSpeechPackage:*(void *)(a1 + 56)];
        double v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) latticeMitigatorResult]);
        [v29 score];
        double v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:"));
        [v16 setLrnnScore:v30];

        double v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) latticeMitigatorResult]);
        [v31 threshold];
        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:"));
        [v16 setLrnnThreshold:v32];

        double v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) recognition]);
        __int16 v34 = (void *)objc_claimAutoreleasedReturnValue([v33 utterances]);
        int v35 = (void *)objc_claimAutoreleasedReturnValue([v34 firstObject]);

        if (v35)
        {
          __int16 v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) recognition]);
          __int16 v37 = (void *)objc_claimAutoreleasedReturnValue([v36 utterances]);
          double v38 = (void *)objc_claimAutoreleasedReturnValue([v37 firstObject]);
          __int16 v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v38 confidenceScore]));
          [v16 setConfidenceScore:v39];
        }

        uint64_t v40 = mach_absolute_time();
        [*(id *)(a1 + 32) _updateInputFeats:v16 forSignalsFrom:CSMachAbsoluteTimeSubtractTimeInterval(0.5) to:v40];
        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 72LL));
        uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained processSpeechPackageSync:*(void *)(a1 + 56)]);

        if (v42)
        {
          [v42 odldScore];
          int v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:"));
          [v16 setNldaScore:v43];

          __int128 v44 = (void *)objc_claimAutoreleasedReturnValue([v42 features]);
          [v16 setNldaMetaInfo:v44];

          __int128 v45 = (void *)CSLogCategorySDSD;
          if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
          {
            __int128 v46 = v45;
            [v42 odldScore];
            int v51 = 136315394;
            int v52 = "-[CSAttSiriUresNode processResultCandidate:forRCId:forTask:forRequestId:completion:]_block_invoke";
            __int16 v53 = 2048;
            double v54 = v47;
            _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "%s AttSignal: NLDA Score: %.3f",  (uint8_t *)&v51,  0x16u);
          }
        }

        [*(id *)(a1 + 32) _createModelAndRunInferenceForRcId:*(void *)(a1 + 72) withRequestContext:v4 withCompletion:*(void *)(a1 + 64)];
        int v48 = *(void **)(a1 + 32);
        __int16 v49 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) latticeMitigatorResult]);
        __int16 v50 = (void *)objc_claimAutoreleasedReturnValue([v4 mhId]);
        [v48 _logLatticeRNNResults:v49 forMhId:v50];

        goto LABEL_13;
      }

      double v27 = (os_log_s *)CSLogCategorySDSD;
      if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
      {
        int v51 = 136315138;
        int v52 = "-[CSAttSiriUresNode processResultCandidate:forRCId:forTask:forRequestId:completion:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "%s Applying override rule, don't mitigate",  (uint8_t *)&v51,  0xCu);
      }

      [*(id *)(a1 + 32) _storeMitigationDecision:0 forRCId:*(void *)(a1 + 72) requestContext:v4];
      [v4 setShouldUpdateMitigationResult:0];
    }

    else
    {
      float v19 = (void *)CSLogCategorySDSD;
      if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
      {
        float v20 = v19;
        double v21 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue([v4 recordCtx]));
        int v51 = 136315394;
        int v52 = "-[CSAttSiriUresNode processResultCandidate:forRCId:forTask:forRequestId:completion:]_block_invoke";
        __int16 v53 = 2114;
        double v54 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%s Mitigation not supported for ctx: %{public}@",  (uint8_t *)&v51,  0x16u);
      }

      [*(id *)(a1 + 32) _storeMitigationDecision:0 forRCId:*(void *)(a1 + 72) requestContext:v4];
    }
  }

  else
  {
    double v17 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
    {
      double v18 = *(double *)(a1 + 40);
      int v51 = 136315394;
      int v52 = "-[CSAttSiriUresNode processResultCandidate:forRCId:forTask:forRequestId:completion:]_block_invoke";
      __int16 v53 = 2114;
      double v54 = v18;
      _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%s Rcvd RC for invalid requestId %{public}@",  (uint8_t *)&v51,  0x16u);
    }
  }

  uint64_t v22 = *(void *)(a1 + 64);
  if (v22) {
    (*(void (**)(uint64_t, void))(v22 + 16))(v22, 0LL);
  }
LABEL_21:
}

void sub_100110DB0(uint64_t a1, void *a2)
{
  id v4 = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), a2);
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
    unsigned int v6 = [v5 forceMitigateForHybridSDSD];

    uint64_t v7 = a1 + 32;
    if (v6)
    {
      [*(id *)(a1 + 32) _storeMitigationDecision:1 forRCId:*(void *)(a1 + 64) requestContext:*(void *)(a1 + 40)];
      double v8 = (os_log_s *)CSLogCategorySDSD;
      if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
      {
        int v32 = 136315138;
        double v33 = "-[CSAttSiriUresNode _createModelAndRunInferenceForRcId:withRequestContext:withCompletion:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s Overriding mitigation decision from preferences",  (uint8_t *)&v32,  0xCu);
      }
    }

    else
    {
      objc_msgSend( *(id *)(a1 + 32),  "_storeMitigationDecision:forRCId:requestContext:",  objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), "didMitigate"),  *(void *)(a1 + 64),  *(void *)(a1 + 40));
    }

    __int16 v15 = (void *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
    {
      double v16 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      double v17 = v15;
      double v18 = (void *)objc_claimAutoreleasedReturnValue([v16 detailedResult]);
      uint64_t v19 = *(void *)(a1 + 64);
      int v32 = 136315650;
      double v33 = "-[CSAttSiriUresNode _createModelAndRunInferenceForRcId:withRequestContext:withCompletion:]_block_invoke";
      __int16 v34 = 2114;
      int v35 = v18;
      __int16 v36 = 2050;
      uint64_t v37 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%s Final mitigation result: %{public}@ for RCId: %{public}lu",  (uint8_t *)&v32,  0x20u);
    }

    uint64_t v20 = *(void *)(a1 + 48);
    if (v20) {
      (*(void (**)(uint64_t, id))(v20 + 16))( v20,  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) didMitigate]);
    }
    double v21 = *(void **)(a1 + 32);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) inputFeats]);
    uint64_t v23 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) mhId]);
    [v21 _logURESResultsForInput:v22 withOutput:v23 forMhId:v24];

    LODWORD(v24) = +[CSUtils isMedocFeatureEnabled](&OBJC_CLASS___CSUtils, "isMedocFeatureEnabled");
    float v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) inputFeats]);
    BOOL v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) detailedResult]);
    uint64_t v26 = *(void **)(a1 + 40);
    if ((_DWORD)v24)
    {
      double v27 = (void *)objc_claimAutoreleasedReturnValue([v26 requestId]);
      uint64_t v28 = v14;
      double v29 = v25;
      double v30 = 0LL;
      double v31 = v27;
    }

    else
    {
      double v27 = (void *)objc_claimAutoreleasedReturnValue([v26 mhId]);
      uint64_t v28 = v14;
      double v29 = v25;
      double v30 = v27;
      double v31 = 0LL;
    }

    +[CSUtils logMitigationFeatures:forTask:withModelOutput:forMHRequestId:forRequestId:]( &OBJC_CLASS___CSUtils,  "logMitigationFeatures:forTask:withModelOutput:forMHRequestId:forRequestId:",  v28,  @"Mitigation",  v29,  v30,  v31);

    uint64_t v11 = v7;
  }

  else
  {
    float v9 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
    {
      int v32 = 136315138;
      double v33 = "-[CSAttSiriUresNode _createModelAndRunInferenceForRcId:withRequestContext:withCompletion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s Failed to get result from UReS, don't mitigate",  (uint8_t *)&v32,  0xCu);
    }

    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void))(v10 + 16))(v10, 0LL);
    }
    uint64_t v12 = *(void **)(a1 + 32);
    uint64_t v11 = a1 + 32;
    [v12 _storeMitigationDecision:0 forRCId:*(void *)(v11 + 32) requestContext:*(void *)(v11 + 8)];
    id v13 = *(id *)v11;
    float v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v11 + 8) mhId]);
    [v13 _logURESFailureMsgInput:1903 forMhId:v14];
  }

  [*(id *)v11 _releaseUresProcessingTransaction];
}

void sub_100111170(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getRequestCtxForRequestId:*(void *)(a1 + 40)]);
  double v3 = v2;
  if (v2)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 mitigationDecisions]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 56)));
    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v5]);

    if (v6)
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(result + 32) + 24) = [v6 BOOLValue];
      uint64_t v7 = (os_log_s *)CSLogCategorySDSD;
      if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 56);
        int v9 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
        int v15 = 136315650;
        double v16 = "-[CSAttSiriUresNode getMitigationDecisionForRCId:forRequestId:]_block_invoke";
        __int16 v17 = 1026;
        LODWORD(v18[0]) = v9;
        WORD2(v18[0]) = 2050;
        *(void *)((char *)v18 + 6) = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s Got mitigation result: %{public}d for RCId: %{public}lu",  (uint8_t *)&v15,  0x1Cu);
      }
    }

    else
    {
      uint64_t v12 = (os_log_s *)CSLogCategorySDSD;
      if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = *(void *)(a1 + 56);
        int v15 = 136315394;
        double v16 = "-[CSAttSiriUresNode getMitigationDecisionForRCId:forRequestId:]_block_invoke";
        __int16 v17 = 2050;
        v18[0] = v14;
        _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%s Mitigation signal for RCId: %{public}lu not found",  (uint8_t *)&v15,  0x16u);
      }

      id v13 = (void *)objc_claimAutoreleasedReturnValue(+[CSDiagnosticReporter sharedInstance](&OBJC_CLASS___CSDiagnosticReporter, "sharedInstance"));
      [v13 submitAudioIssueReport:kCSDiagnosticReporterUresRCUnavailable];
    }
  }

  else
  {
    uint64_t v10 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      int v15 = 136315394;
      double v16 = "-[CSAttSiriUresNode getMitigationDecisionForRCId:forRequestId:]_block_invoke";
      __int16 v17 = 2112;
      v18[0] = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Unable to find context for requestId: %@",  (uint8_t *)&v15,  0x16u);
    }
  }
}

void sub_1001113CC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getRequestCtxForRequestId:*(void *)(a1 + 40)]);
  double v3 = v2;
  if (v2)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 mitigationDecisions]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 56)));
    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v5]);

    if (v6)
    {
      uint64_t v7 = *(void **)(a1 + 32);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 mitigationDecisions]);
      int v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 56)));
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:v9]);
      id v11 = [v10 BOOLValue];
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v3 mhId]);
      [v7 _logFinalMitigationDecisionToSelf:v11 forMhId:v12];
    }

    id v13 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
    {
      int v28 = 136315138;
      double v29 = "-[CSAttSiriUresNode getMitigationDecisionForRCId:forRequestId:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%s ASR node fetched mitigation signal, unload NLDA model",  (uint8_t *)&v28,  0xCu);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 72LL));
    [WeakRetained informMitigationDecision:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) forRequestId:*(void *)(a1 + 40) isFinal:1];

    id v15 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 72LL));
    [v15 stop];

    id v16 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 80LL));
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v3 inputFeats]);
    double v18 = (void *)objc_claimAutoreleasedReturnValue([v17 speakerIDScore]);
    [v18 floatValue];
    int v20 = v19;
    [v3 spkrIdAudioProcessedDuration];
    double v22 = v21;
    LODWORD(v21) = v20;
    [v16 logSpeakerFalseTriggerMitigationScore:v21 withAudioDuration:v22];

    uint64_t v23 = *(_BYTE **)(a1 + 32);
    if (!v23[11])
    {
      int v24 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
      BOOL v25 = (void *)objc_claimAutoreleasedReturnValue([v23 mitigatorDelegate]);
      [v25 siriMitigator:*(void *)(a1 + 32) mitigationDecision:v24 != 0];
    }
  }

  else
  {
    uint64_t v26 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = *(void *)(a1 + 40);
      int v28 = 136315394;
      double v29 = "-[CSAttSiriUresNode getMitigationDecisionForRCId:forRequestId:]_block_invoke";
      __int16 v30 = 2112;
      uint64_t v31 = v27;
      _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "%s Unable to find context for requestId: %@",  (uint8_t *)&v28,  0x16u);
    }
  }
}

void sub_1001116B4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getRequestCtxForRequestId:*(void *)(a1 + 40)]);
  double v3 = v2;
  if (!v2)
  {
    id v11 = (os_log_s *)CSLogCategorySDSD;
    if (!os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    uint64_t v12 = *(void *)(a1 + 40);
    int v17 = 136315394;
    double v18 = "-[CSAttSiriUresNode getLastMitigationResultForRequestId:]_block_invoke";
    __int16 v19 = 2112;
    v20[0] = v12;
    id v13 = "%s Unable to find context for requestId: %@";
LABEL_10:
    _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v17, 0x16u);
    goto LABEL_15;
  }

  unint64_t v4 = (unint64_t)[v2 lastRCId];
  if ((v4 & 0x8000000000000000LL) != 0)
  {
    id v11 = (os_log_s *)CSLogCategorySDSD;
    if (!os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    uint64_t v14 = *(void *)(a1 + 40);
    int v17 = 136315394;
    double v18 = "-[CSAttSiriUresNode getLastMitigationResultForRequestId:]_block_invoke";
    __int16 v19 = 2112;
    v20[0] = v14;
    id v13 = "%s No RCs for reqId %@";
    goto LABEL_10;
  }

  unint64_t v5 = v4;
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v3 mitigationDecisions]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v5));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:v7]);

  if (v8)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(result + 32) + 24) = [v8 BOOLValue];
    int v9 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
      int v17 = 136315650;
      double v18 = "-[CSAttSiriUresNode getLastMitigationResultForRequestId:]_block_invoke";
      __int16 v19 = 1026;
      LODWORD(v20[0]) = v10;
      WORD2(v20[0]) = 2050;
      *(void *)((char *)v20 + 6) = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Got mitigation result: %{public}d for RCId: %{public}lu",  (uint8_t *)&v17,  0x1Cu);
    }
  }

  else
  {
    id v15 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
    {
      int v17 = 136315394;
      double v18 = "-[CSAttSiriUresNode getLastMitigationResultForRequestId:]_block_invoke";
      __int16 v19 = 2050;
      v20[0] = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%s Mitigation signal for RCId: %{public}lu not found",  (uint8_t *)&v17,  0x16u);
    }

    id v16 = (void *)objc_claimAutoreleasedReturnValue(+[CSDiagnosticReporter sharedInstance](&OBJC_CLASS___CSDiagnosticReporter, "sharedInstance"));
    [v16 submitAudioIssueReport:kCSDiagnosticReporterUresRCUnavailable];
  }

LABEL_15:
}

void sub_100111974(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 32) + 48LL))
  {
    uint64_t v2 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315138;
      uint64_t v7 = "-[CSAttSiriUresNode setASRModelRootDirectory:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Prefetched asset not set, using assets from ASR",  (uint8_t *)&v6,  0xCu);
    }

    double v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) stringByAppendingPathComponent:@"mitigation/ouresModel/ouresConfig.json"]);
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 128LL), v3);
    unint64_t v4 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 128LL);
      int v6 = 136315394;
      uint64_t v7 = "-[CSAttSiriUresNode setASRModelRootDirectory:]_block_invoke";
      __int16 v8 = 2114;
      uint64_t v9 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Using config file at : %{public}@",  (uint8_t *)&v6,  0x16u);
    }

    [*(id *)(a1 + 32) _updateSupportedInputOrigins];
  }

void sub_100111ACC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategorySDSD;
  if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v8 = 136315394;
    uint64_t v9 = "-[CSAttSiriUresNode stopUresProcessingForRequest:]_block_invoke";
    __int16 v10 = 2112;
    uint64_t v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Remove ctx for reqId %@",  (uint8_t *)&v8,  0x16u);
  }

  if (*(void *)(a1 + 32))
  {
    unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 168), "objectForKey:"));

    if (v4) {
      [*(id *)(*(void *)(a1 + 40) + 168) removeObjectForKey:*(void *)(a1 + 32)];
    }
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 72LL));
  [WeakRetained stop];

  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void **)(v6 + 104);
  *(void *)(v6 + 104) = 0LL;
}

void sub_100111BDC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategorySDSD;
  if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 136315138;
    int v17 = "-[CSAttSiriUresNode asrStartedForRequestId:isRecognitionModeClassic:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v16, 0xCu);
  }

  if (*(void *)(a1 + 32))
  {
    uint64_t v3 = *(id **)(a1 + 40);
    if (*(_BYTE *)(a1 + 48))
    {
      unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3[21], "objectForKey:"));

      if (v4)
      {
        uint64_t v5 = (os_log_s *)CSLogCategorySDSD;
        if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v6 = *(void *)(a1 + 32);
          int v16 = 136315394;
          int v17 = "-[CSAttSiriUresNode asrStartedForRequestId:isRecognitionModeClassic:]_block_invoke";
          __int16 v18 = 2112;
          uint64_t v19 = v6;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s Removing requestId: %@ from ures map since recognition is classic",  (uint8_t *)&v16,  0x16u);
        }

        [*(id *)(*(void *)(a1 + 40) + 168) removeObjectForKey:*(void *)(a1 + 32)];
      }
    }

    else
    {
      uint64_t v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_getRequestCtxForRequestId:"));
      if (v8)
      {
        uint64_t v9 = (CSUresNodeRequestContext *)v8;
        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 72LL));
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[CSUresNodeRequestContext recordCtx](v9, "recordCtx"));
        [WeakRetained startWithRecordContext:v11 withRequestId:*(void *)(a1 + 32)];

        id v12 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 72LL));
        id v13 = (void *)objc_claimAutoreleasedReturnValue(-[CSUresNodeRequestContext mhId](v9, "mhId"));
        [v12 setMhId:v13];
      }

      else
      {
        uint64_t v14 = (os_log_s *)CSLogCategorySDSD;
        if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v15 = *(void *)(a1 + 32);
          int v16 = 136315394;
          int v17 = "-[CSAttSiriUresNode asrStartedForRequestId:isRecognitionModeClassic:]_block_invoke";
          __int16 v18 = 2112;
          uint64_t v19 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%s Unable to find context for requestId: %@, Creating an empty mapping",  (uint8_t *)&v16,  0x16u);
        }

        uint64_t v9 = objc_alloc_init(&OBJC_CLASS___CSUresNodeRequestContext);
        -[CSUresNodeRequestContext setRequestId:](v9, "setRequestId:", *(void *)(a1 + 32));
        [*(id *)(*(void *)(a1 + 40) + 168) setObject:v9 forKey:*(void *)(a1 + 32)];
      }
    }
  }

  else
  {
    uint64_t v7 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315138;
      int v17 = "-[CSAttSiriUresNode asrStartedForRequestId:isRecognitionModeClassic:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Ignoring request with nil requestId",  (uint8_t *)&v16,  0xCu);
    }
  }

void sub_100111E88(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategorySDSD;
  if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(CSUresNodeRequestContext **)(a1 + 32);
    unint64_t v4 = *(SLUresMitigatorIpFeats **)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    int v50 = 136316162;
    int v51 = "-[CSAttSiriUresNode startUresRequestWithAudioRecordContext:forRequestId:mhId:voiceTriggerInfo:]_block_invoke";
    __int16 v52 = 2112;
    __int16 v53 = v3;
    __int16 v54 = 2112;
    int v55 = v4;
    __int16 v56 = 2112;
    uint64_t v57 = v5;
    __int16 v58 = 2112;
    uint64_t v59 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s requestId:%@, mhId:%@ recordCtx:%@ voiceTriggerInfo:%@",  (uint8_t *)&v50,  0x34u);
  }

  if (*(void *)(a1 + 32))
  {
    uint64_t v7 = (CSUresNodeRequestContext *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 64) + 168), "objectForKeyedSubscript:"));
    if (v7)
    {
      uint64_t v8 = (os_log_s *)CSLogCategorySDSD;
      if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(CSUresNodeRequestContext **)(a1 + 32);
        int v50 = 136315394;
        int v51 = "-[CSAttSiriUresNode startUresRequestWithAudioRecordContext:forRequestId:mhId:voiceTriggerInfo:]_block_invoke";
        __int16 v52 = 2112;
        __int16 v53 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s RequestCtx already exists for requestId: %@",  (uint8_t *)&v50,  0x16u);
      }
    }

    if ([*(id *)(a1 + 48) isDictation])
    {
      __int16 v10 = (os_log_s *)CSLogCategorySDSD;
      if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
      {
        int v50 = 136315138;
        int v51 = "-[CSAttSiriUresNode startUresRequestWithAudioRecordContext:forRequestId:mhId:voiceTriggerInfo:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s Don't run mitigation for dictation requests",  (uint8_t *)&v50,  0xCu);
      }

      [*(id *)(*(void *)(a1 + 64) + 168) removeObjectForKey:*(void *)(a1 + 32)];
    }

    else
    {
      id v12 = (CSUresNodeRequestContext *)objc_claimAutoreleasedReturnValue( +[CSUtils getInputoriginFromRecordType:withAsset:]( &OBJC_CLASS___CSUtils,  "getInputoriginFromRecordType:withAsset:",  *(void *)(a1 + 48),  *(void *)(*(void *)(a1 + 64) + 48LL)));
      id v13 = (os_log_s *)CSLogCategorySDSD;
      if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
      {
        int v50 = 136315394;
        int v51 = "-[CSAttSiriUresNode startUresRequestWithAudioRecordContext:forRequestId:mhId:voiceTriggerInfo:]_block_invoke";
        __int16 v52 = 2112;
        __int16 v53 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%s Set input origin to: %@",  (uint8_t *)&v50,  0x16u);
      }

      uint64_t v14 = -[SLUresMitigatorIpFeats initWithDefaults]( objc_alloc(&OBJC_CLASS___SLUresMitigatorIpFeats),  "initWithDefaults");
      -[SLUresMitigatorIpFeats setInputOrigin:](v14, "setInputOrigin:", v12);
      uint64_t v15 = *(void **)(a1 + 56);
      if (v15)
      {
        uint64_t v16 = kVTEIrecognizerScore;
        int v17 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKey:kVTEIrecognizerScore]);

        if (v17)
        {
          __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:v16]);
          [v18 floatValue];
          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:"));
          -[SLUresMitigatorIpFeats setCheckerScore:](v14, "setCheckerScore:", v19);
        }

        int v20 = *(void **)(a1 + 56);
        if (v20)
        {
          uint64_t v21 = kVTEItdsrCombinedScore;
          double v22 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKey:kVTEItdsrCombinedScore]);

          if (v22)
          {
            uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:v21]);
            [v23 floatValue];
            int v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:"));
            -[SLUresMitigatorIpFeats setPhsScore:](v14, "setPhsScore:", v24);
          }
        }
      }

      [*(id *)(a1 + 64) _fetchMitigationConfigForRecordCtx:*(void *)(a1 + 48)];
      BOOL v25 = *(void **)(*(void *)(a1 + 64) + 48LL);
      if (v25)
      {
        [v25 mitigationModelDefaultAFTMScore];
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:"));
        -[SLUresMitigatorIpFeats setAcousticFTMScores:](v14, "setAcousticFTMScores:", v26);

        [*(id *)(*(void *)(a1 + 64) + 48) mitigationModelDefaultELFusionScore];
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:"));
        -[SLUresMitigatorIpFeats setEmbeddingScore:](v14, "setEmbeddingScore:", v27);

        [*(id *)(*(void *)(a1 + 64) + 48) mitigationModelDefaultNLDAScore];
        int v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:"));
        -[SLUresMitigatorIpFeats setNldaScore:](v14, "setNldaScore:", v28);
      }

      double v29 = v7;
      if (!v7)
      {
        double v29 = objc_alloc_init(&OBJC_CLASS___CSUresNodeRequestContext);
        -[CSUresNodeRequestContext setRequestId:](v29, "setRequestId:", *(void *)(a1 + 32));
      }

      -[CSUresNodeRequestContext setInputFeats:](v29, "setInputFeats:", v14);
      __int16 v30 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      -[CSUresNodeRequestContext setMitigationDecisions:](v29, "setMitigationDecisions:", v30);

      -[CSUresNodeRequestContext setShouldUpdateMitigationResult:](v29, "setShouldUpdateMitigationResult:", 0LL);
      -[CSUresNodeRequestContext setRecordCtx:](v29, "setRecordCtx:", *(void *)(a1 + 48));
      -[CSUresNodeRequestContext setMhId:](v29, "setMhId:", *(void *)(a1 + 40));
      -[CSUresNodeRequestContext setLastRCId:](v29, "setLastRCId:", -1LL);
      -[CSUresNodeRequestContext setSpkrIdAudioProcessedDuration:](v29, "setSpkrIdAudioProcessedDuration:", 0.0);
      [*(id *)(*(void *)(a1 + 64) + 168) setObject:v29 forKey:*(void *)(a1 + 32)];
      uint64_t v31 = (os_log_s *)CSLogCategorySDSD;
      BOOL v32 = os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT);
      if (v32)
      {
        uint64_t v35 = *(void *)(a1 + 32);
        uint64_t v34 = *(void *)(a1 + 40);
        int v50 = 136316162;
        int v51 = "-[CSAttSiriUresNode startUresRequestWithAudioRecordContext:forRequestId:mhId:voiceTriggerInfo:]_block_invoke";
        __int16 v52 = 2112;
        __int16 v53 = v29;
        __int16 v54 = 2112;
        int v55 = v14;
        __int16 v56 = 2112;
        uint64_t v57 = v34;
        __int16 v58 = 2112;
        uint64_t v59 = v35;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "%s Added requestCtx %@ inputFeats %@ mhId %@ requstId %@",  (uint8_t *)&v50,  0x34u);
      }

      if (v7)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 64) + 72LL));
        uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(-[CSUresNodeRequestContext recordCtx](v29, "recordCtx"));
        [WeakRetained startWithRecordContext:v37 withRequestId:*(void *)(a1 + 32)];

        id v38 = objc_loadWeakRetained((id *)(*(void *)(a1 + 64) + 72LL));
        __int16 v39 = (void *)objc_claimAutoreleasedReturnValue(-[CSUresNodeRequestContext mhId](v29, "mhId"));
        [v38 setMhId:v39];
      }

      if (CSIsWatch(v32, v33))
      {
        uint64_t v40 = *(void **)(a1 + 64);
        __int16 v41 = (void *)objc_claimAutoreleasedReturnValue(-[CSUresNodeRequestContext recordCtx](v29, "recordCtx"));
        LODWORD(v40) = [v40 _shouldRunMitigationForContext:v41];

        if ((_DWORD)v40) {
          [*(id *)(a1 + 64) _createMitigatorModelWithConfig:*(void *)(*(void *)(a1 + 64) + 128)];
        }
      }

      id v42 = objc_loadWeakRetained((id *)(*(void *)(a1 + 64) + 96LL));
      [v42 updateInvocationType:v12 forRequestId:*(void *)(a1 + 32)];

      int v43 = (void *)CSLogCategorySDSD;
      if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v44 = v43;
        __int128 v45 = (void *)objc_claimAutoreleasedReturnValue(-[SLUresMitigatorIpFeats checkerScore](v14, "checkerScore"));
        [v45 doubleValue];
        float v47 = v46;
        int v48 = (void *)objc_claimAutoreleasedReturnValue(-[SLUresMitigatorIpFeats phsScore](v14, "phsScore"));
        [v48 doubleValue];
        int v50 = 136315650;
        int v51 = "-[CSAttSiriUresNode startUresRequestWithAudioRecordContext:forRequestId:mhId:voiceTriggerInfo:]_block_invoke";
        __int16 v52 = 2050;
        __int16 v53 = v47;
        __int16 v54 = 2050;
        int v55 = v49;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "%s NC Input Logging, checker score: %{public}.3f, Phs score: %{public}.3f",  (uint8_t *)&v50,  0x20u);
      }

      uint64_t v7 = v29;
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
    {
      int v50 = 136315138;
      int v51 = "-[CSAttSiriUresNode startUresRequestWithAudioRecordContext:forRequestId:mhId:voiceTriggerInfo:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%s Ignoring request with nil requestId",  (uint8_t *)&v50,  0xCu);
    }
  }

void sub_10011256C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getRequestCtxForRequestId:*(void *)(a1 + 40)]);
  uint64_t v3 = v2;
  if (v2)
  {
    unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 inputFeats]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 inputOrigin]);
  }

  else
  {
    uint64_t v6 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      int v9 = 136315394;
      __int16 v10 = "-[CSAttSiriUresNode getUresInvocationTypeForRequestId:withCompletion:]_block_invoke";
      __int16 v11 = 2112;
      uint64_t v12 = v8;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Unable to find context for requestId: %@",  (uint8_t *)&v9,  0x16u);
    }

    uint64_t v5 = 0LL;
  }

  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v5);
  }
}

void sub_10011268C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getRequestCtxForRequestId:*(void *)(a1 + 40)]);
  uint64_t v3 = v2;
  if (v2)
  {
    unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 inputFeats]);
    uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 inputOrigin]);
    uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }

  else
  {
    uint64_t v8 = (os_log_s *)CSLogCategorySDSD;
    if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      int v10 = 136315394;
      __int16 v11 = "-[CSAttSiriUresNode getUresInvocationTypeForRequestId:]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Unable to find context for requestId: %@",  (uint8_t *)&v10,  0x16u);
    }
  }
}

void sub_1001127A0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 72LL));
  [WeakRetained setPrefetchedAsset:*(void *)(a1 + 40)];

  uint64_t v3 = (os_log_s *)CSLogCategorySDSD;
  if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 136315394;
    uint64_t v6 = "-[CSAttSiriUresNode setPrefetchedAsset:]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s setting prefetched asset %@",  (uint8_t *)&v5,  0x16u);
  }

id sub_100112880(uint64_t a1)
{
  return objc_storeWeak((id *)(*(void *)(a1 + 32) + 96LL), *(id *)(a1 + 40));
}

id sub_10011288C(uint64_t a1)
{
  return objc_storeWeak((id *)(*(void *)(a1 + 32) + 80LL), *(id *)(a1 + 40));
}

id sub_100112898(uint64_t a1)
{
  return objc_storeWeak((id *)(*(void *)(a1 + 32) + 72LL), *(id *)(a1 + 40));
}

id sub_1001128A4(uint64_t a1)
{
  return objc_storeWeak((id *)(*(void *)(a1 + 32) + 64LL), *(id *)(a1 + 40));
}

id sub_1001128B0(uint64_t a1)
{
  return objc_storeWeak((id *)(*(void *)(a1 + 32) + 56LL), *(id *)(a1 + 40));
}

void sub_1001128BC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategorySDSD;
  if (os_log_type_enabled(CSLogCategorySDSD, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    int v5 = "-[CSAttSiriUresNode stop]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s Unload NLDA model", (uint8_t *)&v4, 0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 72LL));
  [WeakRetained stop];
}

id sub_1001138AC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _notifyObserver:a2];
}

id sub_1001138B8(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 16LL) = 0LL;
  return [*(id *)(a1 + 32) _didInstalledNewAdBlockerAsset];
}

void sub_100113910(id a1)
{
  int v1 = objc_alloc_init(&OBJC_CLASS___CSAdBlockerAssetDownloadMonitor);
  uint64_t v2 = (void *)qword_1002800E0;
  qword_1002800E0 = (uint64_t)v1;
}

void sub_100113B2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100113F6C(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _handleListenerEvent:v3];
}

void sub_100116DD0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  objc_initWeak(&location, *(id *)(a1 + 32));
  int v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100116E8C;
  block[3] = &unk_10022F0D8;
  objc_copyWeak(&v9, &location);
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, block);

  objc_destroyWeak(&v9);
  objc_destroyWeak(&location);
}

void sub_100116E8C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _updateBuiltInTriggerForPreMyriadIfNeeded:*(void *)(a1 + 32)];
}

void sub_100116EC8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    uint64_t v2 = *(void **)(a1 + 32);
    id v3 = (void *)v2[21];
    if (v3)
    {
      [v3 opportuneSpeakEventMonitor:*(void *)(a1 + 40) didStreamStateChanged:1];
    }

    else
    {
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 3221225472LL;
      void v4[2] = sub_100116F70;
      v4[3] = &unk_10022DBA0;
      v4[4] = v2;
      id v5 = *(id *)(a1 + 40);
      char v6 = *(_BYTE *)(a1 + 48);
      [v2 _getVoiceTriggerAssetIfNeeded:v4];
    }
  }

void sub_100116F70(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  char v6 = *(dispatch_queue_s **)(v4 + 16);
  v8[2] = sub_100117014;
  void v8[3] = &unk_10022DB78;
  v8[1] = 3221225472LL;
  void v8[4] = v4;
  id v9 = v3;
  id v10 = v5;
  char v11 = *(_BYTE *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v6, v8);
}

id sub_100117014(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___CSVoiceTriggerFirstPassHearstAP);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 168);
  *(void *)(v3 + 16_Block_object_dispose(va, 8) = v2;

  [*(id *)(*(void *)(a1 + 32) + 168) start];
  [*(id *)(*(void *)(a1 + 32) + 168) setAsset:*(void *)(a1 + 40)];
  id v5 = *(void **)(a1 + 32);
  char v6 = (void *)v5[21];
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 _voiceTriggerEventNotifierCreateIfNeeded:1]);
  [v6 setDelegate:v7];

  return [*(id *)(*(void *)(a1 + 32) + 168) opportuneSpeakEventMonitor:*(void *)(a1 + 48) didStreamStateChanged:*(unsigned __int8 *)(a1 + 56)];
}

void sub_1001170A4(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = a1[4];
  id v5 = (void *)a1[5];
  char v6 = *(dispatch_queue_s **)(v4 + 16);
  v8[0] = _NSConcreteStackBlock;
  v8[2] = sub_100117148;
  void v8[3] = &unk_10022DB28;
  v8[1] = 3221225472LL;
  uint64_t v11 = a1[6];
  void v8[4] = v4;
  id v9 = v3;
  id v10 = v5;
  id v7 = v3;
  dispatch_async(v6, v8);
}

uint64_t sub_100117148(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10011718C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 16);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  id v12[2] = sub_10011724C;
  void v12[3] = &unk_10022E288;
  void v12[4] = v7;
  id v13 = v5;
  id v14 = v6;
  id v15 = v8;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v9, v12);
}

uint64_t sub_10011724C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_100117298(uint64_t a1)
{
  id result = +[CSUtils supportBluetoothDeviceVoiceTrigger](&OBJC_CLASS___CSUtils, "supportBluetoothDeviceVoiceTrigger");
  if ((_DWORD)result)
  {
    if ((unint64_t)(*(void *)(a1 + 40) - 2LL) < 4) {
      return [*(id *)(a1 + 32) _setupForHearstIfNeededWithPrepareCompletion:0 completion:&stru_10022DAB8];
    }
    id result = (id)CSIsWatch(result, v3);
    uint64_t v4 = *(void *)(a1 + 40);
    if ((_DWORD)result && v4 == 2)
    {
      return [*(id *)(a1 + 32) _setupForHearstIfNeededWithPrepareCompletion:0 completion:&stru_10022DAB8];
    }

    else if (v4 == 6)
    {
      return [*(id *)(a1 + 32) _teardownForBluetoothDevice];
    }

    else if (!v4)
    {
      return [*(id *)(a1 + 32) _setupForJarvisIfNeededWithPrepareCompletion:0 completion:&stru_10022DAD8];
    }
  }

  return result;
}

void sub_10011733C(id a1)
{
  int v1 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    uint64_t v3 = "-[CSSpeechManager CSAudioRouteChangeMonitor:didReceiveAudioRouteChangeEvent:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "%s Setup for Jarvis completed",  (uint8_t *)&v2,  0xCu);
  }

void sub_1001173E0(id a1)
{
  int v1 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    uint64_t v3 = "-[CSSpeechManager CSAudioRouteChangeMonitor:didReceiveAudioRouteChangeEvent:]_block_invoke_2";
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "%s Setup for Hearst completed",  (uint8_t *)&v2,  0xCu);
  }

void sub_100117484(uint64_t a1)
{
  if ([*(id *)(a1 + 32) type] == (id)6)
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    void v16[2] = sub_10011764C;
    v16[3] = &unk_10022E288;
    int v2 = *(void **)(a1 + 48);
    id v17 = *(id *)(a1 + 40);
    uint64_t v3 = &v18;
    id v18 = v2;
    uint64_t v4 = &v19;
    id v19 = *(id *)(a1 + 32);
    id v5 = &v20;
    id v20 = *(id *)(a1 + 56);
    [v17 _setupForJarvisIfNeededWithPrepareCompletion:0 completion:v16];
  }

  else
  {
    id v6 = [*(id *)(a1 + 32) type];
    uint64_t v7 = *(void **)(a1 + 40);
    if (v6 == (id)8)
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      id v12[2] = sub_1001176D8;
      void v12[3] = &unk_10022E288;
      void v12[4] = v7;
      uint64_t v3 = &v13;
      id v13 = *(id *)(a1 + 48);
      uint64_t v4 = &v14;
      id v14 = *(id *)(a1 + 32);
      id v5 = &v15;
      id v15 = *(id *)(a1 + 56);
      [v7 _setupForRemoraIfNeededWithCompletion:v12];
    }

    else
    {
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      v8[2] = sub_100117764;
      void v8[3] = &unk_10022E288;
      void v8[4] = v7;
      uint64_t v3 = &v9;
      id v9 = *(id *)(a1 + 48);
      uint64_t v4 = &v10;
      id v10 = *(id *)(a1 + 32);
      id v5 = &v11;
      id v11 = *(id *)(a1 + 56);
      [v7 _setupForHearstIfNeededWithPrepareCompletion:v8 completion:0];
    }
  }
}

void sub_10011764C(void *a1)
{
  if (*(void *)(a1[4] + 144LL))
  {
    [*(id *)(a1[4] + 144) activationEventNotificationHandler:a1[5] event:a1[6] completion:a1[7]];
  }

  else
  {
    uint64_t v1 = a1[7];
    id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  602LL,  0LL));
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
  }

void sub_1001176D8(void *a1)
{
  if (*(void *)(a1[4] + 176LL))
  {
    [*(id *)(a1[4] + 176) activationEventNotificationHandler:a1[5] event:a1[6] completion:a1[7]];
  }

  else
  {
    uint64_t v1 = a1[7];
    id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  602LL,  0LL));
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
  }

void sub_100117764(void *a1)
{
  if (*(void *)(a1[4] + 160LL))
  {
    [*(id *)(a1[4] + 160) activationEventNotificationHandler:a1[5] event:a1[6] completion:a1[7]];
  }

  else
  {
    uint64_t v1 = a1[7];
    id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  602LL,  0LL));
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
  }

id sub_1001177F0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleClearLoggingFileTimer];
}

id sub_1001177F8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 32) + 176) setConnectedDeviceIds:a2];
}

void sub_100117808(void *a1, void *a2)
{
  id v4 = a2;
  [*(id *)(a1[4] + 80) setAsset:a1[5] forceExclaveToUsePreInstalledAsset:1];
  uint64_t v3 = a1[6];
  if (v3) {
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
  }
}

void sub_10011785C(void *a1, void *a2)
{
  id v4 = a2;
  [*(id *)(a1[4] + 80) setAsset:a1[5]];
  uint64_t v3 = a1[6];
  if (v3) {
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
  }
}

void sub_1001178AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10011795C;
  block[3] = &unk_10022DA48;
  id v8 = v3;
  id v9 = v4;
  id v10 = *(id *)(a1 + 48);
  id v6 = v3;
  dispatch_async(v5, block);
}

uint64_t sub_10011795C(void *a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    int v6 = 136315394;
    uint64_t v7 = "-[CSSpeechManager _setAssetForBuiltInVoiceTrigger:completion:]_block_invoke_4";
    __int16 v8 = 2112;
    uint64_t v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Mapping asset to EK completed with error %@",  (uint8_t *)&v6,  0x16u);
  }

  if (a1[4]) {
    uint64_t v4 = a1[5];
  }
  else {
    uint64_t v4 = a1[6];
  }
  return (*(uint64_t (**)(void))(v4 + 16))();
}

void sub_100117A30(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100117AD4;
  v3[3] = &unk_10022D9F8;
  objc_copyWeak(&v4, v1);
  [WeakRetained _getVoiceTriggerAssetIfNeeded:v3];

  objc_destroyWeak(&v4);
}

void sub_100117AC0(_Unwind_Exception *a1)
{
}

void sub_100117AD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id *)(a1 + 32);
  id WeakRetained = (dispatch_queue_s **)objc_loadWeakRetained((id *)(a1 + 32));
  int v6 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v7 = WeakRetained[2];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_100117B94;
    void v8[3] = &unk_10022F0D8;
    objc_copyWeak(&v10, v4);
    id v9 = v3;
    dispatch_async(v7, v8);

    objc_destroyWeak(&v10);
  }
}

void sub_100117B94(uint64_t a1)
{
  id v2 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _reinitializeVoiceTriggerWithAsset:*(void *)(a1 + 32)];

  id v4 = objc_loadWeakRetained(v2);
  [v4 _setupSpeakerRecognitionWithVTAsset:*(void *)(a1 + 32)];
}

void sub_100117BF4(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    int v6 = "-[CSSpeechManager audioRecorderWillBeDestroyed:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v5, 0xCu);
  }

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "unregisterObserver:");
  [*(id *)(*(void *)(a1 + 32) + 32) setAudioSessionEventDelegate:0];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 32);
  *(void *)(v3 + 32) = 0LL;
}

void sub_100117CC8(uint64_t a1)
{
  id v2 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    id v4 = v2;
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 UUID]);
    uint64_t v6 = *(void *)(a1 + 48);
    int v14 = 136315650;
    id v15 = "-[CSSpeechManager audioProviderInvalidated:streamHandleId:]_block_invoke";
    __int16 v16 = 2114;
    id v17 = v5;
    __int16 v18 = 2050;
    uint64_t v19 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s audioProvider[%{public}@] invalidated with streamHandleId : %{public}llu",  (uint8_t *)&v14,  0x20u);
  }

  [*(id *)(a1 + 32) setAudioProviderDelegate:0];
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) audioProviders]);
  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 48)));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:v8]);

  if (v9)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) audioProviders]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 48)));
    [v10 removeObjectForKey:v11];
  }

  else
  {
    __int16 v12 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = *(void **)(a1 + 48);
      int v14 = 136315394;
      id v15 = "-[CSSpeechManager audioProviderInvalidated:streamHandleId:]_block_invoke";
      __int16 v16 = 2050;
      id v17 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s No matched audioProvider found for streamHandleId : %{public}llu",  (uint8_t *)&v14,  0x16u);
    }
  }

uint64_t sub_100117EB4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100117EC4(uint64_t a1)
{
}

void sub_100117ECC(uint64_t a1)
{
  id v2 = -[CSFallbackAudioSessionReleaseProvider initWithAudioRecorder:]( objc_alloc(&OBJC_CLASS___CSFallbackAudioSessionReleaseProvider),  "initWithAudioRecorder:",  *(void *)(*(void *)(a1 + 32) + 32LL));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 56);
  *(void *)(v3 + 56) = v2;

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), *(id *)(*(void *)(a1 + 32) + 56LL));
}

void sub_100117F20(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2[4])
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 audioProviders]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 48)));
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:v4]);

    uint64_t v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    BOOL v7 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (v7)
      {
        __int16 v8 = *(void **)(a1 + 48);
        int v21 = 136315394;
        double v22 = "-[CSSpeechManager audioProviderWithStreamID:]_block_invoke";
        __int16 v23 = 2048;
        id v24 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s have matched audioProvider with stream handle id : %llu",  (uint8_t *)&v21,  0x16u);
      }

      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioProviders]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 48)));
      uint64_t v11 = objc_claimAutoreleasedReturnValue([v9 objectForKey:v10]);
      uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8LL);
      id v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;

      id v14 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) audioStreamId];
      if (v14 != *(id *)(a1 + 48))
      {
        id v15 = v14;
        __int16 v16 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
        {
          int v21 = 136315394;
          double v22 = "-[CSSpeechManager audioProviderWithStreamID:]_block_invoke";
          __int16 v23 = 2048;
          id v24 = v15;
          _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s provider's streamId(%tu) is invalid, return nil",  (uint8_t *)&v21,  0x16u);
        }

        uint64_t v17 = *(void *)(*(void *)(a1 + 40) + 8LL);
        __int16 v18 = *(void **)(v17 + 40);
        *(void *)(v17 + 40) = 0LL;
      }
    }

    else if (v7)
    {
      id v20 = *(void **)(a1 + 48);
      int v21 = 136315394;
      double v22 = "-[CSSpeechManager audioProviderWithStreamID:]_block_invoke";
      __int16 v23 = 2048;
      id v24 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s don't have matched audioProvider with stream handle id : %llu, need to create one later",  (uint8_t *)&v21,  0x16u);
    }
  }

  else
  {
    uint64_t v19 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315138;
      double v22 = "-[CSSpeechManager audioProviderWithStreamID:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%s No audioRecorder available, return nil for audioProvider",  (uint8_t *)&v21,  0xCu);
    }
  }

void sub_1001181D0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id obj = *(id *)(v3 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 _getAudioRecorderWithError:&obj]);
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    *(void *)__int128 v44 = 0LL;
    *(void *)&v44[8] = v44;
    *(void *)&v44[16] = 0x2020000000LL;
    uint64_t v45 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v34 = &v33;
    uint64_t v35 = 0x2020000000LL;
    uint64_t v36 = 0LL;
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_1001186D8;
    v32[3] = &unk_10022D980;
    void v32[4] = v44;
    v32[5] = &v33;
    uint64_t v5 = *(void *)(a1 + 40);
    v32[6] = *(void *)(a1 + 48);
    [v4 setContext:v5 completion:v32];
    uint64_t v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v7 = *(void **)(a1 + 40);
      uint64_t v8 = *(void *)(*(void *)&v44[8] + 24LL);
      *(_DWORD *)AudioBufferList buf = 136315650;
      __int16 v39 = "-[CSSpeechManager audioProviderWithContext:error:]_block_invoke_2";
      __int16 v40 = 2114;
      __int16 v41 = v7;
      __int16 v42 = 2048;
      uint64_t v43 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s For Context : %{public}@, audioStreamId(%llu) has allocated",  buf,  0x20u);
    }

    if (*(void *)(*(void *)&v44[8] + 24LL))
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioProviders]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(*(void *)&v44[8] + 24LL)));
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:v10]);

      uint64_t v12 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      BOOL v13 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
      if (v11)
      {
        if (v13)
        {
          id v14 = *(void **)(*(void *)&v44[8] + 24LL);
          *(_DWORD *)AudioBufferList buf = 136315394;
          __int16 v39 = "-[CSSpeechManager audioProviderWithContext:error:]_block_invoke";
          __int16 v40 = 2048;
          __int16 v41 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s has match with audio stream handle id : %llu",  buf,  0x16u);
        }

        id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioProviders]);
        __int16 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(*(void *)&v44[8] + 24LL)));
        uint64_t v17 = objc_claimAutoreleasedReturnValue([v15 objectForKey:v16]);
        uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8LL);
        uint64_t v19 = *(void **)(v18 + 40);
        *(void *)(v18 + 40) = v17;

        [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setLatestRecordContext:*(void *)(a1 + 40) streamType:v34[3]];
        goto LABEL_17;
      }

      if (v13)
      {
        uint64_t v26 = *(void **)(*(void *)&v44[8] + 24LL);
        *(_DWORD *)AudioBufferList buf = 136315394;
        __int16 v39 = "-[CSSpeechManager audioProviderWithContext:error:]_block_invoke";
        __int16 v40 = 2048;
        __int16 v41 = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s does not match with audio stream handle id(%llu), creating new audio provider",  buf,  0x16u);
      }

      uint64_t v27 = objc_alloc(&OBJC_CLASS___CSAudioProvider);
      int v28 = -[CSAudioProvider initWithAudioStreamHandleId:audioStreamType:audioRecordContext:audioRecorder:]( v27,  "initWithAudioStreamHandleId:audioStreamType:audioRecordContext:audioRecorder:",  *(void *)(*(void *)&v44[8] + 24LL),  v34[3],  *(void *)(a1 + 40),  v4);
      -[CSAudioProvider start](v28, "start");
      -[CSAudioProvider setAudioProviderDelegate:](v28, "setAudioProviderDelegate:", *(void *)(a1 + 32));
      double v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioProviders]);
      __int16 v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(*(void *)&v44[8] + 24LL)));
      [v29 setObject:v28 forKey:v30];

      uint64_t v31 = *(void *)(*(void *)(a1 + 56) + 8LL);
      id v24 = *(os_log_s **)(v31 + 40);
      *(void *)(v31 + 40) = v28;
    }

    else
    {
      id v24 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        __int16 v39 = "-[CSSpeechManager audioProviderWithContext:error:]_block_invoke";
        __int16 v40 = 2112;
        __int16 v41 = v25;
        _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%s Failed to get audio stream handle ID : %{publid}@",  buf,  0x16u);
      }
    }

LABEL_17:
    _Block_object_dispose(&v33, 8);
    _Block_object_dispose(v44, 8);
    goto LABEL_18;
  }

  id v20 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
  {
    int v21 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    double v22 = v20;
    __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v21 localizedDescription]);
    *(_DWORD *)__int128 v44 = 136315394;
    *(void *)&v44[4] = "-[CSSpeechManager audioProviderWithContext:error:]_block_invoke";
    *(_WORD *)&v44[12] = 2114;
    *(void *)&v44[14] = v23;
    _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "%s Failed to create audio recorder : %{public}@",  v44,  0x16u);
  }

void sub_1001186A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_1001186D8(void *a1, uint64_t a2, uint64_t a3, id obj)
{
  *(void *)(*(void *)(a1[4] + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = a2;
  *(void *)(*(void *)(a1[5] + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = a3;
  objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), obj);
}

void sub_100118704(void *a1)
{
  id v2 = (void *)a1[5];
  uint64_t v3 = *(void **)(a1[4] + 40LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100118778;
  v6[3] = &unk_10022D930;
  id v4 = v2;
  uint64_t v5 = a1[6];
  id v7 = v4;
  uint64_t v8 = v5;
  [v3 enumerateKeysAndObjectsUsingBlock:v6];
}

void sub_100118778(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v9 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v9 UUID]);
  unsigned int v8 = [v7 isEqualToString:*(void *)(a1 + 32)];

  if (v8)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
    *a4 = 1;
  }
}

void sub_1001187FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = v7;
      BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
      *(_DWORD *)AudioBufferList buf = 136315394;
      uint64_t v19 = "-[CSSpeechManager _setupVoiceTriggerWithCompletion:]_block_invoke";
      __int16 v20 = 2114;
      int v21 = v13;
      _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%s getVoiceTriggerAsset error : %{public}@",  buf,  0x16u);
    }
  }

  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  id v10 = *(dispatch_queue_s **)(v8 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100118968;
  block[3] = &unk_10022E7D0;
  id v15 = v5;
  uint64_t v16 = v8;
  id v17 = v9;
  id v11 = v5;
  dispatch_async(v10, block);
}

uint64_t sub_100118968(uint64_t a1)
{
  id v2 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    id v4 = v2;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 resourcePath]);
    *(_DWORD *)AudioBufferList buf = 136315394;
    __int16 v39 = "-[CSSpeechManager _setupVoiceTriggerWithCompletion:]_block_invoke";
    __int16 v40 = 2112;
    __int16 v41 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger initialization resourcePath: %@",  buf,  0x16u);
  }

  if (+[CSUtils supportSmartVolume](&OBJC_CLASS___CSUtils, "supportSmartVolume"))
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue(+[CSSmartSiriVolumeManager sharedInstance](&OBJC_CLASS___CSSmartSiriVolumeManager, "sharedInstance"));
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void **)(v7 + 256);
    *(void *)(v7 + 256) = v6;

    [*(id *)(a1 + 40) _reinitializeSmartSiriVolumeWithAsset:*(void *)(a1 + 32)];
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _voiceTriggerEventNotifierCreateIfNeeded:1]);
    [v9 registerObserver:*(void *)(*(void *)(a1 + 40) + 256)];
  }

  if ([*(id *)(a1 + 40) _shouldSetupSelfTrigger])
  {
    if (+[CSUtils supportAudioTappingSelfTrigger]( &OBJC_CLASS___CSUtils,  "supportAudioTappingSelfTrigger"))
    {
      id v11 = objc_alloc_init(&OBJC_CLASS___CSAudioTapProvider);
      uint64_t v12 = *(void *)(a1 + 40);
      BOOL v13 = *(void **)(v12 + 48);
      *(void *)(v12 + 4_Block_object_dispose((const void *)(v8 - 112), 8) = v11;

      [*(id *)(*(void *)(a1 + 40) + 48) setup];
    }

    id v14 = -[CSSelfTriggerController initWithTargetQueue:audioTapProvider:avvcRefChannelAvailable:]( [CSSelfTriggerController alloc],  "initWithTargetQueue:audioTapProvider:avvcRefChannelAvailable:",  *(void *)(*(void *)(a1 + 40) + 72),  *(void *)(*(void *)(a1 + 40) + 48),  [*(id *)(a1 + 40) _isAVVCRefChannelAvailable]);
    uint64_t v15 = *(void *)(a1 + 40);
    uint64_t v16 = *(void **)(v15 + 112);
    *(void *)(v15 + 112) = v14;

    [*(id *)(*(void *)(a1 + 40) + 112) setAsset:*(void *)(a1 + 32)];
    id v17 = *(void **)(a1 + 40);
    uint64_t v18 = (void *)v17[14];
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v17 _myriadSelfTriggerCoordinatorIfNeeded:1]);
    [v18 registerObserver:v19];

    __int16 v20 = *(void **)(a1 + 40);
    int v21 = (void *)v20[14];
    double v22 = (void *)objc_claimAutoreleasedReturnValue([v20 _voiceTriggerFileLoggerCreateIfNeeded:1]);
    [v21 registerObserver:v22];

    uint64_t v23 = *(void *)(a1 + 40);
    if (*(void *)(v23 + 80)) {
      objc_msgSend(*(id *)(v23 + 112), "registerObserver:");
    }
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 64LL));

  if (WeakRetained)
  {
    BOOL v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _voiceTriggerEventNotifierCreateIfNeeded:0]);
    id v26 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 64LL));
    [v25 registerObserver:v26];
  }

  if ((+[CSUtils supportHearstVoiceTrigger](&OBJC_CLASS___CSUtils, "supportHearstVoiceTrigger") & 1) != 0
    || (+[CSUtils supportRemoraVoiceTrigger](&OBJC_CLASS___CSUtils, "supportRemoraVoiceTrigger") & 1) != 0
    || (id v27 = +[CSUtils supportJarvisVoiceTrigger](&OBJC_CLASS___CSUtils, "supportJarvisVoiceTrigger"), (_DWORD)v27))
  {
    double v29 = (void *)objc_claimAutoreleasedReturnValue( +[CSAudioRouteChangeMonitor sharedInstance]( &OBJC_CLASS___CSAudioRouteChangeMonitor,  "sharedInstance"));
    [v29 addObserver:*(void *)(a1 + 40)];

    __int16 v30 = (void *)objc_claimAutoreleasedReturnValue( +[CSAudioRouteChangeMonitor sharedInstance]( &OBJC_CLASS___CSAudioRouteChangeMonitor,  "sharedInstance"));
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472LL;
    v37[2] = sub_100118D48;
    v37[3] = &unk_10022E4A8;
    v37[4] = *(void *)(a1 + 40);
    [v30 getHearstRouteStatus:v37];

    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[CSAudioRouteChangeMonitor sharedInstance]( &OBJC_CLASS___CSAudioRouteChangeMonitor,  "sharedInstance"));
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472LL;
    v36[2] = sub_100118E48;
    v36[3] = &unk_10022E4D0;
    v36[4] = *(void *)(a1 + 40);
    [v31 getJarvisConnected:v36];
  }

  if ((CSIsCommunalDevice(v27, v28) & 1) == 0)
  {
    uint64_t v32 = objc_claimAutoreleasedReturnValue(+[CSVoiceProfileRetrainManager sharedInstance](&OBJC_CLASS___CSVoiceProfileRetrainManager, "sharedInstance"));
    uint64_t v33 = *(void *)(a1 + 40);
    uint64_t v34 = *(void **)(v33 + 184);
    *(void *)(v33 + 184) = v32;

    [*(id *)(*(void *)(a1 + 40) + 184) triggerVoiceProfileRetrainingWithAsset:*(void *)(a1 + 32)];
  }

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100118D48(uint64_t a1, uint64_t a2)
{
  id v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioBufferList buf = 136315394;
    id v9 = "-[CSSpeechManager _setupVoiceTriggerWithCompletion:]_block_invoke";
    __int16 v10 = 2050;
    uint64_t v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s Hearst status: %{public}ld", buf, 0x16u);
  }

  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(dispatch_queue_s **)(v5 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100119028;
  v7[3] = &unk_10022F020;
  void v7[4] = v5;
  void v7[5] = a2;
  dispatch_async(v6, v7);
}

void sub_100118E48(uint64_t a1, int a2)
{
  id v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = @"NO";
    if (a2) {
      uint64_t v5 = @"YES";
    }
    *(_DWORD *)AudioBufferList buf = 136315394;
    uint64_t v11 = "-[CSSpeechManager _setupVoiceTriggerWithCompletion:]_block_invoke";
    __int16 v12 = 2114;
    BOOL v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s Jarvis connected ? %{public}@", buf, 0x16u);
  }

  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(dispatch_queue_s **)(v6 + 16);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100118F64;
  void v8[3] = &unk_10022EFA8;
  char v9 = a2;
  void v8[4] = v6;
  dispatch_async(v7, v8);
}

id *sub_100118F64(id *result)
{
  if (*((_BYTE *)result + 40)) {
    return (id *)[result[4] _setupForJarvisIfNeededWithPrepareCompletion:0 completion:&stru_10022D8E0];
  }
  return result;
}

void sub_100118F84(id a1)
{
  uint64_t v1 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    uint64_t v3 = "-[CSSpeechManager _setupVoiceTriggerWithCompletion:]_block_invoke_2";
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "%s Setup for Jarvis completed",  (uint8_t *)&v2,  0xCu);
  }

id sub_100119028(id result)
{
  uint64_t v1 = *((void *)result + 5);
  if (v1) {
    BOOL v2 = v1 == 5;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2) {
    return [*((id *)result + 4) _setupForHearstIfNeededWithPrepareCompletion:0 completion:&stru_10022D8C0];
  }
  return result;
}

void sub_100119050(id a1)
{
  uint64_t v1 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    uint64_t v3 = "-[CSSpeechManager _setupVoiceTriggerWithCompletion:]_block_invoke_2";
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "%s Setup for Hearst completed",  (uint8_t *)&v2,  0xCu);
  }

void sub_1001190F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      char v9 = "-[CSSpeechManager _setupSpeakerRecognitionWithVTAsset:]_block_invoke";
      __int16 v10 = 2114;
      id v11 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s ERR: Failed to get SpeakerRecognition assets with error %{public}@",  (uint8_t *)&v8,  0x16u);
    }
  }

  else
  {
    [*(id *)(*(void *)(a1 + 32) + 184) triggerVoiceProfileRetrainingWithAsset:v5];
  }
}

uint64_t sub_1001191E4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_1001191F8(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue( +[CSOnDeviceCachedIrPurgingHandler sharedHandler]( &OBJC_CLASS___CSOnDeviceCachedIrPurgingHandler,  "sharedHandler"));
  [v2 cleanUpCachedIrDir];

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[CSOnDeviceCachedIrPurgingHandler sharedHandler]( &OBJC_CLASS___CSOnDeviceCachedIrPurgingHandler,  "sharedHandler"));
  [v3 startRegistration];

  id v4 = objc_alloc_init(&OBJC_CLASS___CSOpportuneSpeakListnerTestService);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 208);
  *(void *)(v5 + 20_Block_object_dispose((const void *)(v8 - 112), 8) = v4;

  [*(id *)(*(void *)(a1 + 32) + 208) start];
  if (+[CSUtils supportAdBlocker](&OBJC_CLASS___CSUtils, "supportAdBlocker"))
  {
    uint64_t v7 = objc_alloc_init(&OBJC_CLASS___CSAdBlockerStoreManager);
    uint64_t v8 = *(void *)(a1 + 32);
    char v9 = *(void **)(v8 + 232);
    *(void *)(v8 + 232) = v7;

    if (CSIsHorseman(v10, v11))
    {
      __int16 v12 = objc_alloc_init(&OBJC_CLASS___CSContinuousAudioFingerprintProvider);
      uint64_t v13 = *(void *)(a1 + 32);
      id v14 = *(void **)(v13 + 240);
      *(void *)(v13 + 240) = v12;

      uint64_t v15 = objc_alloc_init(&OBJC_CLASS___CSAdBlockerHorseMan);
      uint64_t v16 = *(void *)(a1 + 32);
      id v17 = *(void **)(v16 + 216);
      *(void *)(v16 + 216) = v15;
    }

    if (_os_feature_enabled_impl("Siri", "mini_block"))
    {
      uint64_t v18 = objc_alloc_init(&OBJC_CLASS___CSRemoraAdBlocker);
      uint64_t v19 = *(void *)(a1 + 32);
      __int16 v20 = *(void **)(v19 + 224);
      *(void *)(v19 + 224) = v18;

      [*(id *)(*(void *)(a1 + 32) + 232) registerObserver:*(void *)(*(void *)(a1 + 32) + 224)];
      int v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _voiceTriggerEventNotifierCreateIfNeeded:1]);
      [v21 registerObserver:*(void *)(*(void *)(a1 + 32) + 224)];
    }

    [*(id *)(*(void *)(a1 + 32) + 232) registerObserver:*(void *)(*(void *)(a1 + 32) + 216)];
    double v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _voiceTriggerEventNotifierCreateIfNeeded:1]);
    [v22 registerObserver:*(void *)(*(void *)(a1 + 32) + 216)];
  }

  uint64_t v23 = *(void **)(a1 + 32);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_1001193D4;
  v27[3] = &unk_10022F100;
  v27[4] = v23;
  id v24 = [v23 _setupVoiceTriggerWithCompletion:v27];
  id result = (id)CSIsCommunalDevice(v24, v25);
  if ((_DWORD)result) {
    return [*(id *)(a1 + 32) _setupSpeakerRecognitionWithVTAsset:0];
  }
  return result;
}

void sub_1001193D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(dispatch_queue_s **)(v1 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10011942C;
  block[3] = &unk_10022F100;
  void block[4] = v1;
  dispatch_async(v2, block);
}

id sub_10011942C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startAllClients];
}

void sub_10011947C(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSSpeechManager);
  int v2 = (void *)qword_1002800F0;
  qword_1002800F0 = (uint64_t)v1;
}

void sub_1001195B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

uint64_t sub_100119ECC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100119EE0(uint64_t a1, void *a2)
{
  int v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _handleListenerEvent:v3];
}

void sub_10011A044(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  [*(id *)(a1 + 32) disconnect];
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t, id))(v5 + 16))(v5, a2, v6);
  }
}

void sub_10011A500(uint64_t a1)
{
  int v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    id v14 = "-[CSOpportuneSpeakBehaviorMonitor notifyDidStopStream:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", buf, 0xCu);
  }

  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers", 0));
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(*((void *)&v8 + 1) + 8 * (void)v7) opportuneSpeakBehaviorMonitor:*(void *)(a1 + 32) didStopStream:*(void *)(a1 + 40)];
        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v5);
  }
}

void sub_10011A64C(uint64_t a1)
{
  int v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    id v14 = "-[CSOpportuneSpeakBehaviorMonitor notifyWillStopStream:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", buf, 0xCu);
  }

  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers", 0));
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(*((void *)&v8 + 1) + 8 * (void)v7) opportuneSpeakBehaviorMonitor:*(void *)(a1 + 32) willStopStream:*(void *)(a1 + 40)];
        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v5);
  }
}

void sub_10011A798(uint64_t a1)
{
  int v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    id v14 = "-[CSOpportuneSpeakBehaviorMonitor notifyDidStartStreamWithContext:audioProviderUUID:successfully:option:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", buf, 0xCu);
  }

  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers", 0));
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(*((void *)&v8 + 1) + 8 * (void)v7) opportuneSpeakBehaviorMonitor:*(void *)(a1 + 32) didStartStreamWithContext:*(void *)(a1 + 40) audioProviderUUID:*(void *)(a1 + 48) successfully:*(unsigned __int8 *)(a1 + 64) option:*(void *)(a1 + 56)];
        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v5);
  }
}

void sub_10011A8EC(uint64_t a1)
{
  int v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    id v14 = "-[CSOpportuneSpeakBehaviorMonitor notifyWillStartStreamWithContext:audioProviderUUID:option:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", buf, 0xCu);
  }

  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers", 0));
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(*((void *)&v8 + 1) + 8 * (void)v7) opportuneSpeakBehaviorMonitor:*(void *)(a1 + 32) willStartStreamWithContext:*(void *)(a1 + 40) audioProviderUUID:*(void *)(a1 + 48) option:*(void *)(a1 + 56)];
        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v5);
  }
}

void sub_10011AA3C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  [v2 removeObject:*(void *)(a1 + 40)];
}

void sub_10011AA7C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_10011AAFC(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSOpportuneSpeakBehaviorMonitor);
  id v2 = (void *)qword_100280100;
  qword_100280100 = (uint64_t)v1;
}

void sub_10011C344(_Unwind_Exception *a1)
{
}

id sub_10011CF10(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    uint64_t v6 = "-[CSVoiceTriggerFirstPassRemora adBlockerHasMatchWithVoiceTrigger:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Built in adblocker has match will cancel others",  (uint8_t *)&v5,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 80LL));
  [WeakRetained stopRemoraAdBlocker];

  [*(id *)(a1 + 32) cancelSecondPassRunning];
  return [*(id *)(a1 + 32) _cancelAllAudioStreamHoldings];
}

id sub_10011CFE0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    int v5 = "-[CSVoiceTriggerFirstPassRemora remoraAdBlockerHasMatch]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Remora adblocker has match will cancel others",  (uint8_t *)&v4,  0xCu);
  }

  [*(id *)(a1 + 32) cancelSecondPassRunning];
  return [*(id *)(a1 + 32) _cancelAllAudioStreamHoldings];
}

void sub_10011D098(uint64_t a1)
{
  if (*(void *)(a1 + 48) == 5LL && *(void *)(a1 + 32))
  {
    objc_msgSend(*(id *)(a1 + 40), "_cancelAudioStreamHoldingForAccessoryWithId:");
    uint64_t v2 = (os_log_s *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      int v5 = "-[CSVoiceTriggerFirstPassRemora pendingSecondPassTriggerWasClearedForClient:deviceId:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Stopping Remora adblocker because request was cancelled",  (uint8_t *)&v4,  0xCu);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 80LL));
    [WeakRetained stopRemoraAdBlocker];
  }

void sub_10011D174(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    uint64_t v16 = "-[CSVoiceTriggerFirstPassRemora cancelSecondPassRunning]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Trying to cancel all 2nd pass in Remora",  buf,  0xCu);
  }

  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "objectEnumerator", 0));
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(*((void *)&v10 + 1) + 8 * (void)v7) cancelRequest];
        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v5);
  }

  __int128 v8 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    uint64_t v16 = "-[CSVoiceTriggerFirstPassRemora cancelSecondPassRunning]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s Stopping Remora adblocker because request was cancelled",  buf,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 80LL));
  [WeakRetained stopRemoraAdBlocker];
}

uint64_t sub_10011D330(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10011D344(uint64_t a1)
{
  if (*(void *)(a1 + 56) == 1LL && !*(_BYTE *)(a1 + 64))
  {
    id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) audioStreamHolding]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) audioProvider]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) firstPassDeviceID]);
    if (v5 && v8 && v4)
    {
      uint64_t v6 = objc_alloc_init(&OBJC_CLASS___CSRemoraSecondPassAudioStreamHoldingContext);
      -[CSRemoraSecondPassAudioStreamHoldingContext setAudioProvider:](v6, "setAudioProvider:", v4);
      -[CSRemoraSecondPassAudioStreamHoldingContext setAudioStreamHolding:](v6, "setAudioStreamHolding:", v8);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) triggeredAudioStreamHoldingByAccessoryId]);
      [v7 setObject:v6 forKey:v5];
    }
  }

  else
  {
    [*(id *)(a1 + 48) cancelAudioStreamHold];
    uint64_t v2 = (os_log_s *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      __int128 v10 = "-[CSVoiceTriggerFirstPassRemora _handleSecondPassResult:secondPassRequest:deviceId:error:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Stopping Remora adblocker because request was cancelled",  buf,  0xCu);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 80LL));
    [WeakRetained stopRemoraAdBlocker];
  }

void sub_10011D500(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (os_log_s *)CSLogCategoryVT;
  if (a2)
  {
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315138;
      __int128 v10 = "-[CSVoiceTriggerFirstPassRemora _handleRemoraTriggerEvent:secondPassRequest:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Audio provider available",  (uint8_t *)&v9,  0xCu);
    }

    [*(id *)(a1 + 32) holdAudioStreamWithTimeout:5.0];
  }

  else if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = v6;
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
    int v9 = 136315394;
    __int128 v10 = "-[CSVoiceTriggerFirstPassRemora _handleRemoraTriggerEvent:secondPassRequest:completion:]_block_invoke";
    __int16 v11 = 2114;
    __int128 v12 = v8;
    _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Failed to fetch audio audio provider with error : %{public}@",  (uint8_t *)&v9,  0x16u);
  }
}

void sub_10011D64C(uint64_t a1, void *a2, void *a3)
{
  id v5 = (id *)(a1 + 64);
  id v6 = a3;
  id v7 = a2;
  id WeakRetained = objc_loadWeakRetained(v5);
  uint64_t v9 = *(void *)(a1 + 32);
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deviceId]);
  [WeakRetained _handleSecondPassResult:v7 secondPassRequest:v9 deviceId:v10 error:v6 completion:*(void *)(a1 + 56)];

  __int16 v11 = (void *)objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerStatAggregator sharedAggregator]( &OBJC_CLASS___CSVoiceTriggerStatAggregator,  "sharedAggregator"));
  id v12 = [v7 result];
  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v7 voiceTriggerEventInfo]);

  [v11 logSecondPassResult:v12 eventInfo:v13 triggerAPWakeUp:0];
  id v14 = *(void **)(a1 + 40);
  uint64_t v15 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 24LL);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  _OWORD v18[2] = sub_10011D780;
  void v18[3] = &unk_10022EFD0;
  id v16 = v14;
  uint64_t v17 = *(void *)(a1 + 48);
  id v19 = v16;
  uint64_t v20 = v17;
  dispatch_async(v15, v18);
}

void sub_10011D780(uint64_t a1)
{
  uint64_t v2 = (void *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = v2;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceId]);
    int v9 = 136315394;
    __int128 v10 = "-[CSVoiceTriggerFirstPassRemora _handleRemoraTriggerEvent:secondPassRequest:completion:]_block_invoke_2";
    __int16 v11 = 2114;
    id v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Teardown remora second pass request for device id : %{public}@",  (uint8_t *)&v9,  0x16u);
  }

  id v6 = *(void **)(a1 + 32);
  id v7 = *(void **)(*(void *)(a1 + 40) + 32LL);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 deviceId]);
  [v7 removeObjectForKey:v8];
}

void *sub_10011D884(void *result)
{
  uint64_t v1 = result[4];
  if (v1)
  {
    uint64_t v2 = result;
    id v3 = (os_log_s *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315395;
      id v5 = "-[CSVoiceTriggerFirstPassRemora accessorySiriClientBehaviorMonitor:didStartStreamWithContext:successfully:opt"
           "ion:withEventUUID:forAccessory:]_block_invoke";
      __int16 v6 = 2113;
      uint64_t v7 = v1;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Siri Client (Remora: accessoryId: %{private}@) start listening now, CSVoiceTriggerFirstPassRemora can stop listening now",  (uint8_t *)&v4,  0x16u);
      uint64_t v1 = v2[4];
    }

    return [(id)v2[5] _cancelAudioStreamHoldingForAccessoryWithId:v1];
  }

  return result;
}

CSRemoraSecondPassRequest *sub_10011D958(uint64_t a1)
{
  uint64_t v2 = objc_alloc(&OBJC_CLASS___CSRemoraSecondPassRequest);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceId]);
  int v4 = -[CSRemoraSecondPassRequest initWithDeviceID:](v2, "initWithDeviceID:", v3);

  -[CSRemoraSecondPassRequest setTimestamp:](v4, "setTimestamp:", [*(id *)(a1 + 32) hosttime]);
  uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activationInfo]);
  if (v5)
  {
    __int16 v6 = (void *)v5;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activationInfo]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"firstPassGoodness"]);

    if (v8)
    {
      double v9 = *(double *)(a1 + 40);
      *(float *)&double v9 = v9;
      -[CSRemoraSecondPassRequest setGoodnessScore:](v4, "setGoodnessScore:", v9);
    }
  }

  uint64_t v10 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activationInfo]);
  if (v10)
  {
    __int16 v11 = (void *)v10;
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activationInfo]);
    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:@"vtEndTime"]);

    if (v13)
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activationInfo]);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKey:@"vtEndTime"]);
      [v15 doubleValue];
      -[CSRemoraSecondPassRequest setFirstPassTriggerEndTime:](v4, "setFirstPassTriggerEndTime:");
    }
  }

  return v4;
}

void sub_10011DAA8(id *a1)
{
  if ([a1[4] type] == (id)8)
  {
    uint64_t v2 = objc_alloc(&OBJC_CLASS___NSUUID);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([a1[4] deviceId]);
    int v4 = -[NSUUID initWithUUIDString:](v2, "initWithUUIDString:", v3);

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[VTPreferences sharedPreferences](&OBJC_CLASS___VTPreferences, "sharedPreferences"));
    unsigned __int8 v6 = [v5 voiceTriggerEnabledForEndpointId:v4];

    if ((v6 & 1) != 0)
    {
      uint64_t v7 = (void *)*((void *)a1[5] + 4);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([a1[4] deviceId]);
      double v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:v8]);

      if (v9)
      {
        uint64_t v10 = (void *)CSLogCategoryVT;
        if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
        {
          id v11 = a1[4];
          id v12 = v10;
          __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v11 deviceId]);
          *(_DWORD *)AudioBufferList buf = 136315394;
          *(void *)&uint8_t buf[4] = "-[CSVoiceTriggerFirstPassRemora activationEventNotificationHandler:event:completion:]_block_invoke";
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s We already have matched Remora second pass request : %{public}@",  buf,  0x16u);
        }

        id v14 = (void *)*((void *)a1[5] + 4);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([a1[4] deviceId]);
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKey:v15]);

        [a1[5] _handleRemoraTriggerEvent:a1[4] secondPassRequest:v16 completion:a1[6]];
      }

      else
      {
        *(void *)AudioBufferList buf = 0LL;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x3032000000LL;
        __int16 v30 = sub_10011DE80;
        uint64_t v31 = sub_10011DE90;
        id v32 = 0LL;
        id v21 = a1[4];
        id v22 = a1[5];
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3221225472LL;
        v24[2] = sub_10011DE98;
        void v24[3] = &unk_10022DCB0;
        id v25 = v21;
        id v27 = a1[6];
        uint64_t v28 = buf;
        id v26 = a1[5];
        [v22 _createSecondPassRequestIfNecessaryForActivationEvent:v25 completion:v24];

        _Block_object_dispose(buf, 8);
      }
    }

    else
    {
      uint64_t v18 = (os_log_s *)CSLogCategoryVT;
      if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315138;
        *(void *)&uint8_t buf[4] = "-[CSVoiceTriggerFirstPassRemora activationEventNotificationHandler:event:completion:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%s Cannot handle remora VoiceTrigger request since VoiceTrigger is disabled",  buf,  0xCu);
      }

      id v19 = (void (**)(id, void, void *))a1[6];
      if (v19)
      {
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  604LL,  0LL));
        v19[2](v19, 0LL, v20);
      }
    }
  }

  else
  {
    uint64_t v17 = (void (**)(id, void))a1[6];
    if (v17)
    {
      id v23 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  114LL,  0LL));
      v17[2](v17, 0LL);
    }
  }

void sub_10011DE60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10011DE80(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10011DE90(uint64_t a1)
{
}

void sub_10011DE98(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = (void *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = *(void **)(a1 + 32);
      double v9 = v7;
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 deviceId]);
      *(_DWORD *)AudioBufferList buf = 136315650;
      id v26 = "-[CSVoiceTriggerFirstPassRemora activationEventNotificationHandler:event:completion:]_block_invoke";
      __int16 v27 = 2114;
      uint64_t v28 = v10;
      __int16 v29 = 2114;
      id v30 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Remora second pass request is prune out from PreMyriad : %{public}@, error: %{public}@",  buf,  0x20u);
    }

    uint64_t v11 = *(void *)(a1 + 48);
    if (v11) {
      (*(void (**)(uint64_t, void, id))(v11 + 16))(v11, 0LL, v5);
    }
  }

  else
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceId]);
    __int128 v13 = (os_log_s *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      id v26 = "-[CSVoiceTriggerFirstPassRemora activationEventNotificationHandler:event:completion:]_block_invoke";
      __int16 v27 = 2114;
      uint64_t v28 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%s There is no matched remora second pass request, creating new one : %{public}@",  buf,  0x16u);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), a3);
    if (v12 && *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL))
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accessoryFirstPassGoodnessScores]);
      [v14 removeObjectForKey:v12];

      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accessoryFirstPassGoodnessScores]);
      [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) goodnessScore];
      id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:"));
      [v15 setObject:v16 forKey:v12];
    }

    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerAssetHandler sharedHandler]( &OBJC_CLASS___CSVoiceTriggerAssetHandler,  "sharedHandler"));
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceId]);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    _OWORD v21[2] = sub_10011E178;
    v21[3] = &unk_10022DC88;
    uint64_t v24 = *(void *)(a1 + 56);
    int8x16_t v20 = *(int8x16_t *)(a1 + 32);
    id v19 = (id)v20.i64[0];
    int8x16_t v22 = vextq_s8(v20, v20, 8uLL);
    id v23 = *(id *)(a1 + 48);
    [v17 getVoiceTriggerAssetWithEndpointId:v18 completion:v21];
  }
}

void sub_10011E178(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10011E31C;
    block[3] = &unk_10022DC60;
    uint64_t v20 = *(void *)(a1 + 56);
    id v8 = v5;
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void **)(a1 + 40);
    id v16 = v8;
    uint64_t v17 = v9;
    id v18 = v10;
    id v19 = *(id *)(a1 + 48);
    dispatch_async(v7, block);
  }

  else
  {
    uint64_t v11 = (void *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
    {
      __int128 v13 = v11;
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
      *(_DWORD *)AudioBufferList buf = 136315394;
      int8x16_t v22 = "-[CSVoiceTriggerFirstPassRemora activationEventNotificationHandler:event:completion:]_block_invoke";
      __int16 v23 = 2112;
      uint64_t v24 = v14;
      _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%s Failed to create voiceTriggerSecondPass remora since asset is nil : %@",  buf,  0x16u);
    }

    uint64_t v12 = *(void *)(a1 + 48);
    if (v12) {
      (*(void (**)(uint64_t, void, id))(v12 + 16))(v12, 0LL, v6);
    }
  }
}

void sub_10011E31C(uint64_t a1)
{
  if ([*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) isCancelled])
  {
    uint64_t v2 = *(void *)(a1 + 56);
    if (v2)
    {
      id v3 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  605LL,  0LL));
      (*(void (**)(uint64_t, void, id))(v2 + 16))(v2, 0LL, v3);
    }
  }

  else
  {
    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setAsset:*(void *)(a1 + 32)];
    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) start];
    [*(id *)(a1 + 40) _handleRemoraTriggerEvent:*(void *)(a1 + 48) secondPassRequest:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) completion:*(void *)(a1 + 56)];
  }

void sub_10011E3F0(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (v5)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:*(void *)(a1 + 40)]);
    int v4 = v3;
    if (v3)
    {
      [v3 setAsset:v5];
      [v4 reset];
    }
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_10011E45C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 88LL));
  [WeakRetained registerObserver:*(void *)(a1 + 32)];
}

void sub_10011E4A8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 80LL));
  [WeakRetained registerObserver:*(void *)(a1 + 32)];
}

id sub_10011E4F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setDeviceIds:*(void *)(a1 + 40)];
}

id sub_10011E500(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reset];
}

void sub_10011E508(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    id v5 = "-[CSVoiceTriggerFirstPassRemora start]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[CSAccessorySiriClientBehaviorMonitor sharedInstance]( &OBJC_CLASS___CSAccessorySiriClientBehaviorMonitor,  "sharedInstance"));
  [v3 registerObserver:*(void *)(a1 + 32)];
}

void sub_10011E7C0(_Unwind_Exception *a1)
{
}

uint64_t sub_10011E90C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[CSAudioStreamActivityMonitor sharedInstance]( &OBJC_CLASS___CSAudioStreamActivityMonitor,  "sharedInstance"));
  unsigned int v3 = [v2 hasNonVoiceTriggerStreamsOrStreamHoldersActive];

  int v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ([WeakRetained isPlaybackAudioSessionActive])
  {
    id v6 = objc_loadWeakRetained(v4);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 clientRecordRoute]);
    unsigned int v8 = +[CSUtils isJarvisAudioRouteWithRecordRoute:]( &OBJC_CLASS___CSUtils,  "isJarvisAudioRouteWithRecordRoute:",  v7);
  }

  else
  {
    unsigned int v8 = 0;
  }

  uint64_t v9 = v3 | v8;
  if ((v9 & 1) == 0)
  {
    uint64_t v10 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 136315650;
      __int128 v13 = "-[CSVoiceTriggerJarvisAPEnabledPolicy _addVoiceTriggerHearstAPEnabledPolicy]_block_invoke";
      __int16 v14 = 1024;
      int v15 = 0;
      __int16 v16 = 1024;
      int v17 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger JarvisAP cannot be turned on since there is no other stream active (%d) and playback session not active (%d)",  (uint8_t *)&v12,  0x18u);
    }
  }

  return v9;
}

BOOL sub_10011EA60(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSAudioRouteChangeMonitor sharedInstance](&OBJC_CLASS___CSAudioRouteChangeMonitor, "sharedInstance"));
  unsigned __int8 v2 = [v1 jarvisConnected];

  if ((v2 & 1) == 0)
  {
    unsigned int v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      id v6 = "-[CSVoiceTriggerJarvisAPEnabledPolicy _addVoiceTriggerHearstAPEnabledPolicy]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger JarvisAP cannot be turned on since Jarvis is not connected",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

BOOL sub_10011EB2C(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[CSOtherAppRecordingStateMonitor sharedInstance]( &OBJC_CLASS___CSOtherAppRecordingStateMonitor,  "sharedInstance"));
  unsigned int v2 = [v1 isOtherNonEligibleAppRecording];

  if (v2)
  {
    unsigned int v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      id v6 = "-[CSVoiceTriggerJarvisAPEnabledPolicy _addVoiceTriggerHearstAPEnabledPolicy]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger JarvisAP cannot be turned on since other non-eligible App is recording",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2 ^ 1;
}

BOOL sub_10011EBF8(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerEnabledMonitor sharedInstance]( &OBJC_CLASS___CSVoiceTriggerEnabledMonitor,  "sharedInstance"));
  unsigned __int8 v2 = [v1 isEnabled];

  if ((v2 & 1) == 0)
  {
    unsigned int v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      id v6 = "-[CSVoiceTriggerJarvisAPEnabledPolicy _addVoiceTriggerHearstAPEnabledPolicy]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger JarvisAP cannot be turned on since VoiceTrigger is disabled",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

void sub_10011ED04(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSVoiceTriggerJarvisAPEnabledPolicy);
  unsigned __int8 v2 = (void *)qword_100280110;
  qword_100280110 = (uint64_t)v1;
}

int64_t sub_10011F144(id a1, id a2, id a3)
{
  id v4 = a3;
  [a2 doubleValue];
  double v6 = v5;
  [v4 doubleValue];
  double v8 = v7;

  if (v6 < v8) {
    return -1LL;
  }
  else {
    return v6 > v8;
  }
}

void sub_10011F588( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100120534(uint64_t a1)
{
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);

  if (v2)
  {
    id v4 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
    xpc_connection_send_message(v4, *(xpc_object_t *)(a1 + 40));
  }

  else
  {
    unsigned int v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      double v6 = "-[CSClientXPCConnection sendMessageToClient:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Unable to send message to client since there is no connection",  buf,  0xCu);
    }
  }

void sub_10012063C(uint64_t a1, void *a2)
{
  unsigned __int8 v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _handleClientEvent:v3];
}

void sub_100121AD4(uint64_t a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, _xpc_event_key_name);
  if (!string) {
    return;
  }
  id v4 = string;
  double v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 136315394;
    __int128 v13 = "-[CSHostDaemon _setupNotifyHandlers]_block_invoke";
    __int16 v14 = 2080;
    int v15 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s Got xpc event for notification %s",  (uint8_t *)&v12,  0x16u);
  }

  double v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v4));
  id v7 = [v6 isEqualToString:@"AFLanguageCodeDidChangeDarwinNotification"];
  if ((_DWORD)v7)
  {
    if ((CSIsHorseman(v7, v8) & 1) != 0) {
      goto LABEL_10;
    }
  }

  else
  {
    if ([v6 isEqualToString:@"VT Phrase Type changed"])
    {
LABEL_10:
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerAssetChangeMonitor sharedMonitor]( &OBJC_CLASS___CSVoiceTriggerAssetChangeMonitor,  "sharedMonitor"));
      [v11 notifyVoiceTriggerAssetChanged];

      goto LABEL_11;
    }

    if (![v6 isEqualToString:@"com.apple.mobile.keybagd.first_unlock"])
    {
      if ([v6 isEqualToString:@"com.apple.coreaudio.BorealisToggled"]) {
        +[SSRVoiceProfileManager clearVTEnableAfterProfileSyncFlag]( &OBJC_CLASS___SSRVoiceProfileManager,  "clearVTEnableAfterProfileSyncFlag");
      }
      goto LABEL_11;
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
  unsigned int v10 = [v9 voiceTriggerEnabled];

  if (v10) {
    goto LABEL_10;
  }
LABEL_11:
  if ([v6 isEqualToString:@"com.apple.siri.uaf.com.apple.siri.understanding"]) {
    +[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  3LL,  &stru_10022DE48);
  }
  if ([v6 isEqualToString:@"com.apple.siri.uaf.com.apple.speech.automaticspeechrecognition"]) {
    +[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL,  0LL);
  }
  [*(id *)(*(void *)(a1 + 32) + 160) handleDarwinNotificationEventWithName:v6];
}

void sub_100121CD4(id a1, BOOL a2, NSError *a3)
{
}

void sub_100121CE0(id a1)
{
  uint64_t v1 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    id v3 = "-[CSHostDaemon init]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "%s Received SIGTERM. Exiting",  (uint8_t *)&v2,  0xCu);
  }

  exit(0);
}

void sub_100121DA0(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSHostDaemon);
  int v2 = (void *)qword_100280120;
  qword_100280120 = (uint64_t)v1;
}

void sub_1001234C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, int a10, __int16 a11, __int16 a12, uint64_t a13)
{
  if (a2 == 1)
  {
    id v14 = objc_begin_catch(exception_object);
    int v15 = (os_log_s *)*v13;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
    {
      id v16 = (id)objc_claimAutoreleasedReturnValue([v14 name]);
      int v17 = (void *)objc_claimAutoreleasedReturnValue([v14 reason]);
      LODWORD(va_start(va, a9) = 136315650;
      *(void *)((char *)&a9 + 4) = "-[CSContinuousAudioFingerprintProvider _reset]";
      WORD6(va_start(va, a9) = 2114;
      *(void *)((char *)&a9 + 14) = v16;
      a12 = 2114;
      a13 = (uint64_t)v17;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "%s Problem allocating fingerprintBuffer with name: %{public}@ and reason: %{public}@",  (uint8_t *)&a9,  0x20u);
    }

    objc_end_catch();
    JUMPOUT(0x100123490LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_100124444(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) enablePolicy]);
  unsigned int v3 = [v2 isEnabled];

  if (v3) {
    [*(id *)(a1 + 32) _startListenPolling];
  }
}

void sub_10012449C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = *(void **)(v2 + 48);
  if (v3)
  {
    id v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataForChannel:0]);
    objc_msgSend(v3, "addSamples:numSamples:", objc_msgSend(v4, "bytes"), objc_msgSend(*(id *)(a1 + 40), "numSamples"));

    uint64_t v2 = *(void *)(a1 + 32);
  }

  double v5 = *(void **)(v2 + 56);
  id v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataForChannel:0]);
  objc_msgSend(v5, "addSamples:numSamples:", objc_msgSend(v6, "bytes"), objc_msgSend(*(id *)(a1 + 40), "numSamples"));

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fingerprintBuffer]);
  uint64_t v8 = *(void *)(a1 + 48);
  v26[0] = 0LL;
  unsigned int v9 = [v7 appendBuffer:v8 atTime:0 error:v26];
  id v10 = v26[0];

  if (v9)
  {
    id v11 = [*(id *)(a1 + 32) frameSkipCounter];
    if (v11 >= [*(id *)(a1 + 32) frameSkipRate])
    {
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      id v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers", 0));
      id v15 = [v14 countByEnumeratingWithState:&v22 objects:v27 count:16];
      if (v15)
      {
        uint64_t v16 = *(void *)v23;
        do
        {
          for (uint64_t i = 0LL; i != v15; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v23 != v16) {
              objc_enumerationMutation(v14);
            }
            id v18 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)i);
            id v19 = *(void **)(a1 + 32);
            uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 fingerprintBuffer]);
            id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 dataRepresentation]);
            [v18 continuousAudioFingerprintProvider:v19 hasNewFingerprintBuffer:v21];
          }

          id v15 = [v14 countByEnumeratingWithState:&v22 objects:v27 count:16];
        }

        while (v15);
      }

      __int128 v13 = 0LL;
      int v12 = *(void **)(a1 + 32);
    }

    else
    {
      int v12 = *(void **)(a1 + 32);
      __int128 v13 = (char *)[v12 frameSkipCounter] + 1;
    }

    [v12 setFrameSkipCounter:v13];
  }
}

void sub_1001246EC( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 buf, int a20, __int16 a21, __int16 a22, void *a23)
{
  if (a2 == 1)
  {
    id v23 = objc_begin_catch(a1);
    __int128 v24 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
    {
      id v25 = (id)objc_claimAutoreleasedReturnValue([v23 name]);
      id v26 = (void *)objc_claimAutoreleasedReturnValue([v23 reason]);
      LODWORD(buf) = 136315650;
      *(void *)((char *)&buf + 4) = "-[CSContinuousAudioFingerprintProvider audioStreamProvider:audioBufferAvailable:]_block_invoke";
      WORD6(buf) = 2114;
      *(void *)((char *)&buf + 14) = v25;
      a22 = 2114;
      a23 = v26;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_FAULT,  "%s Failed to extract fingerprint : %{public}@ with reason %{public}@",  (uint8_t *)&buf,  0x20u);
    }

    objc_end_catch();
    JUMPOUT(0x1001246ACLL);
  }

  _Unwind_Resume(a1);
}

void sub_1001247E4(uint64_t a1)
{
  if (*(void *)(a1 + 40) != -11785LL)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) enablePolicy]);
    unsigned int v3 = [v2 isEnabled];

    if (v3) {
      [*(id *)(a1 + 32) _startListenPolling];
    }
  }

id sub_100124854(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40) && [*(id *)(*(void *)(a1 + 32) + 64) count]) {
    return [*(id *)(a1 + 32) _startListenPolling];
  }
  else {
    return [*(id *)(a1 + 32) _stopListening];
  }
}

void sub_10012489C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    id v6 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      id v7 = v6;
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 description]);
      int v9 = 136315394;
      id v10 = "-[CSContinuousAudioFingerprintProvider _stopListening]_block_invoke";
      __int16 v11 = 2114;
      int v12 = v8;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Failed to stop audio stream : %{public}@",  (uint8_t *)&v9,  0x16u);
    }
  }

  [*(id *)(a1 + 32) _reset];
}

uint64_t sub_100124998(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + ++*(void *)(*(void *)(result + 32) + 8LL) = 0;
  return result;
}

uint64_t sub_1001249A4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001249B8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(v6 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_100124A5C;
  v10[3] = &unk_10022E678;
  char v14 = a2;
  id v11 = v5;
  uint64_t v12 = v6;
  id v13 = v7;
  id v9 = v5;
  dispatch_async(v8, v10);
}

uint64_t sub_100124A5C(uint64_t a1)
{
  uint64_t v2 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 56)) {
      unsigned int v3 = @"YES";
    }
    else {
      unsigned int v3 = @"NO";
    }
    id v4 = *(void **)(a1 + 32);
    id v5 = v2;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 description]);
    int v11 = 136315650;
    uint64_t v12 = "-[CSContinuousAudioFingerprintProvider _startListenWithCompletion:]_block_invoke_3";
    __int16 v13 = 2114;
    char v14 = v3;
    __int16 v15 = 2114;
    uint64_t v16 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s Start audio stream successfully ? %{public}@, error : %{public}@",  (uint8_t *)&v11,  0x20u);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) enablePolicy]);
  unsigned __int8 v8 = [v7 isEnabled];

  if ((v8 & 1) == 0)
  {
    id v9 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315138;
      uint64_t v12 = "-[CSContinuousAudioFingerprintProvider _startListenWithCompletion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s Received didStartRecording when Siri is off",  (uint8_t *)&v11,  0xCu);
    }

    [*(id *)(a1 + 40) _stopListening];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100124BF8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      (*(void (**)(uint64_t, uint64_t, void))(v6 + 16))(v6, 1LL, 0LL);
    }
  }

  else
  {
    id v7 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      id v10 = v7;
      int v11 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
      *(_DWORD *)id location = 136315394;
      *(void *)&location[4] = "-[CSContinuousAudioFingerprintProvider _startListenPollingWithInterval:completion:]_block_invoke";
      __int16 v16 = 2114;
      int v17 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s listen polling has failed : %{public}@",  location,  0x16u);
    }

    objc_initWeak((id *)location, *(id *)(a1 + 32));
    dispatch_time_t v8 = dispatch_time(0LL, (uint64_t)(*(double *)(a1 + 48) * 1000000000.0));
    id v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100124DF0;
    block[3] = &unk_10022E600;
    objc_copyWeak(v14, (id *)location);
    v14[1] = *(id *)(a1 + 48);
    id v13 = *(id *)(a1 + 40);
    dispatch_after(v8, v9, block);

    objc_destroyWeak(v14);
    objc_destroyWeak((id *)location);
  }
}

void sub_100124DD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_100124DF0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _startListenPollingWithInterval:*(void *)(a1 + 32) completion:*(double *)(a1 + 48)];
}

id sub_100124E30(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reset];
}

void sub_100124E38(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  unsigned int v3 = [v2 containsObject:*(void *)(a1 + 40)];

  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
    [v4 removeObject:*(void *)(a1 + 40)];
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  id v6 = [v5 count];

  if (!v6)
  {
    [*(id *)(*(void *)(a1 + 32) + 56) endAudio];
    uint64_t v7 = *(void *)(a1 + 32);
    dispatch_time_t v8 = *(void **)(v7 + 56);
    *(void *)(v7 + 56) = 0LL;
  }

void sub_100124EE4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  unsigned __int8 v3 = [v2 containsObject:*(void *)(a1 + 40)];

  if ((v3 & 1) == 0)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
    [v4 addObject:*(void *)(a1 + 40)];

    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
    id v6 = [v5 count];

    if (v6 == (id)1)
    {
      +[CSFAudioStreamBasicDescriptionFactory utteranceFileASBD]( &OBJC_CLASS___CSFAudioStreamBasicDescriptionFactory,  "utteranceFileASBD");
      +[CSFAudioStreamBasicDescriptionFactory utteranceFileASBD]( &OBJC_CLASS___CSFAudioStreamBasicDescriptionFactory,  "utteranceFileASBD");
      uint64_t v7 = objc_claimAutoreleasedReturnValue( +[CSAudioFileManager createAudioFileWriterForAdBlockerWithInputFormat:outputFormat:withAccessoryID:]( &OBJC_CLASS___CSAudioFileManager,  "createAudioFileWriterForAdBlockerWithInputFormat:outputFormat:withAccessoryID:",  v16,  v15,  0LL));
      uint64_t v8 = *(void *)(a1 + 32);
      id v9 = *(void **)(v8 + 56);
      *(void *)(v8 + 56) = v7;

      uint64_t v14 = 0LL;
      id v10 = [*(id *)(*(void *)(a1 + 32) + 48) copyBufferWithNumSamplesCopiedIn:&v14];
      int v11 = v10;
      if (v10)
      {
        uint64_t v12 = *(void **)(*(void *)(a1 + 32) + 56LL);
        id v13 = [v10 bytes];
        [v12 addSamples:v13 numSamples:v14];
      }
    }
  }

void sub_100125004(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 64LL);
  if (v1)
  {
    unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) UUIDString]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v3]);

    if (v4)
    {
      id v5 = *(void **)(*(void *)(a1 + 32) + 64LL);
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) UUIDString]);
      [v5 removeObjectForKey:v6];

      uint64_t v7 = (void *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 64LL);
        id v9 = v7;
        int v12 = 136315394;
        id v13 = "-[CSContinuousAudioFingerprintProvider stopWithUUID:]_block_invoke";
        __int16 v14 = 2048;
        id v15 = [v8 count];
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Updated in use services for fingerprintProvider. %lu services remaining",  (uint8_t *)&v12,  0x16u);
      }

      if ([*(id *)(*(void *)(a1 + 32) + 64) count])
      {
        [*(id *)(a1 + 32) _setMaximumBufferSizeFromInUseServices];
        [*(id *)(a1 + 32) _reset];
      }

      else
      {
        id v10 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = 136315138;
          id v13 = "-[CSContinuousAudioFingerprintProvider stopWithUUID:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s Stopping continuousFingerprintProvider",  (uint8_t *)&v12,  0xCu);
        }

        int v11 = (void *)objc_claimAutoreleasedReturnValue( +[CSAudioServerCrashMonitor sharedInstance]( &OBJC_CLASS___CSAudioServerCrashMonitor,  "sharedInstance"));
        [v11 removeObserver:*(void *)(a1 + 32)];

        [*(id *)(a1 + 32) _stopListening];
        [*(id *)(a1 + 32) setEnablePolicy:0];
      }
    }
  }

void sub_1001251E4(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 64LL);
  unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) UUIDString]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:v3]);

  if (!v4)
  {
    id v6 = *(void **)(*(void *)(a1 + 32) + 64LL);
    LODWORD(v5) = *(_DWORD *)(a1 + 48);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v5));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) UUIDString]);
    [v6 setValue:v7 forKey:v8];

    id v9 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = *(void **)(*(void *)(a1 + 32) + 64LL);
      int v11 = v9;
      *(_DWORD *)AudioBufferList buf = 136315394;
      id v25 = "-[CSContinuousAudioFingerprintProvider startWithUUID:withMaximumBufferSize:]_block_invoke";
      __int16 v26 = 2048;
      id v27 = [v10 count];
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s Updated in use services for fingerprintProvider. %lu services in use",  buf,  0x16u);
    }

    [*(id *)(a1 + 32) _setMaximumBufferSizeFromInUseServices];
    [*(id *)(a1 + 32) _reset];
    if ((unint64_t)[*(id *)(*(void *)(a1 + 32) + 64) count] <= 1)
    {
      int v12 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioBufferList buf = 136315138;
        id v25 = "-[CSContinuousAudioFingerprintProvider startWithUUID:withMaximumBufferSize:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s Starting continuousFingerprintProvider",  buf,  0xCu);
      }

      id v13 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
      objc_msgSend(*(id *)(a1 + 32), "setFrameSkipRate:", objc_msgSend(v13, "overridingFrameSkipRate"));

      if (![*(id *)(a1 + 32) frameSkipRate]) {
        [*(id *)(a1 + 32) setFrameSkipRate:0];
      }
      [*(id *)(a1 + 32) setFrameSkipCounter:0];
      __int16 v14 = (void *)objc_claimAutoreleasedReturnValue( +[CSAdBlockerEnabledPolicyFactory adBlockerEnabledPolicy]( &OBJC_CLASS___CSAdBlockerEnabledPolicyFactory,  "adBlockerEnabledPolicy"));
      [*(id *)(a1 + 32) setEnablePolicy:v14];

      objc_initWeak((id *)buf, *(id *)(a1 + 32));
      id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) enablePolicy]);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472LL;
      void v22[2] = sub_100125560;
      v22[3] = &unk_10022E430;
      objc_copyWeak(&v23, (id *)buf);
      [v15 setCallback:v22];

      __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) enablePolicy]);
      unsigned int v17 = [v16 isEnabled];

      if (v17)
      {
        uint64_t v18 = *(void *)(a1 + 32);
        id v19 = *(dispatch_queue_s **)(v18 + 40);
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3221225472LL;
        _OWORD v21[2] = sub_10012559C;
        v21[3] = &unk_10022F100;
        void v21[4] = v18;
        dispatch_async(v19, v21);
      }

      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[CSAudioServerCrashMonitor sharedInstance]( &OBJC_CLASS___CSAudioServerCrashMonitor,  "sharedInstance"));
      [v20 addObserver:*(void *)(a1 + 32)];

      objc_destroyWeak(&v23);
      objc_destroyWeak((id *)buf);
    }
  }

void sub_100125524( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
}

void sub_100125560(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleEnablePolicyEvent:a2];
}

id sub_10012559C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startListenPolling];
}

void sub_100126628( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100126CDC(uint64_t a1)
{
  return 1LL;
}

void sub_100126CF8(uint64_t a1)
{
  uint64_t v2 = -[CSOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CSOSTransaction),  "initWithDescription:",  @"CSVoiceTriggerRejectReporter");
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _readEventFromBiome]);
  if ([v4 count])
  {
    unsigned __int8 v3 = (CSOSTransaction *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) constructSELFEventFromEvents:v4 withMhid:*(void *)(a1 + 40)]);
    if (v3) {
      [*(id *)(a1 + 32) _emitEvent:v3];
    }
  }

  else
  {
    unsigned __int8 v3 = v2;
  }
}

void sub_100126DD0(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSVoiceTriggerRejectReporter);
  uint64_t v2 = (void *)qword_100280138;
  qword_100280138 = (uint64_t)v1;
}

void sub_100127448(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(result + 32) + 24) = [WeakRetained mphSelected];
}

uint64_t sub_10012748C(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = *(void *)(*(void *)(result + 32) + 40LL);
  return result;
}

id sub_1001274A0(uint64_t a1, void *a2)
{
  return [a2 vtPhraseTypeDidChangeNotificationReceived];
}

void sub_1001274A8(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 32);
  id v2 = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(v2, "setUSelectedPhraseType:", objc_msgSend(v2, "_fetchUserSelectedPhraseType"));

  id WeakRetained = objc_loadWeakRetained(v1);
  unsigned int v4 = [WeakRetained mphSelected];

  id v5 = objc_loadWeakRetained(v1);
  id v6 = objc_msgSend(v5, "_isMultiPhrase:", objc_msgSend(v5, "uSelectedPhraseType"));

  if (v4 != (_DWORD)v6)
  {
    uint64_t v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 136315650;
      id v15 = "-[CSVoiceTriggerUserSelectedPhrase vtPhraseTypeDidChangeNotificationReceived]_block_invoke";
      __int16 v16 = 1024;
      unsigned int v17 = v4;
      __int16 v18 = 1024;
      int v19 = (int)v6;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s User multi-phrase selection change from %d -> %d",  (uint8_t *)&v14,  0x18u);
    }

    id v8 = objc_loadWeakRetained(v1);
    [v8 setMphSelected:v6];

    id v9 = objc_loadWeakRetained(v1);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 delegate]);

    if (v10)
    {
      id v11 = objc_loadWeakRetained(v1);
      int v12 = (void *)objc_claimAutoreleasedReturnValue([v11 delegate]);
      id v13 = objc_loadWeakRetained(v1);
      objc_msgSend(v12, "CSVoiceTriggerUserSelectedPhraseDidChange:", objc_msgSend(v13, "mphSelected"));
    }
  }

id sub_100127664(uint64_t a1)
{
  return objc_storeWeak((id *)(*(void *)(a1 + 32) + 16LL), *(id *)(a1 + 40));
}

id sub_100127AF0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _notifyObserver:a2 withDaemonState:*(void *)(a1 + 40)];
}

id sub_100127B00(uint64_t a1)
{
  return [*(id *)(a1 + 32) _didReceiveDaemonStateChanged:1];
}

void sub_100127B4C(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSCoreSpeechDaemonStateMonitor);
  id v2 = (void *)qword_100280148;
  qword_100280148 = (uint64_t)v1;
}

void sub_100128414( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id location, id a23)
{
}

id sub_1001286B8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) resume];
}

void sub_1001286C4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  unsigned __int8 v3 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = (void *)WeakRetained[7];
    id v5 = v3;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained clientConnections]);
    *(_DWORD *)AudioBufferList buf = 136315650;
    uint64_t v31 = "-[CSConnectionListener notifyClientsWithBlock:]_block_invoke";
    __int16 v32 = 2112;
    uint64_t v33 = v4;
    __int16 v34 = 2048;
    id v35 = [v6 count];
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s machServiceName(%@) with clientConnCount:%lu ",  buf,  0x20u);
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained clientConnections]);
  id v8 = [v7 count];

  if (v8)
  {
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v24 = WeakRetained;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained clientConnections]);
    id v10 = [v9 countByEnumeratingWithState:&v25 objects:v29 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v26;
      do
      {
        for (uint64_t i = 0LL; i != v11; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v26 != v12) {
            objc_enumerationMutation(v9);
          }
          int v14 = *(void **)(*((void *)&v25 + 1) + 8LL * (void)i);
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 remoteObjectProxy]);

          if (v15)
          {
            uint64_t v16 = *(void *)(a1 + 32);
            if (v16)
            {
              unsigned int v17 = (void *)CSLogContextFacilityCoreSpeech;
              if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
              {
                __int16 v18 = v17;
                int v19 = (void *)objc_claimAutoreleasedReturnValue([v14 remoteObjectProxy]);
                *(_DWORD *)AudioBufferList buf = 136315394;
                uint64_t v31 = "-[CSConnectionListener notifyClientsWithBlock:]_block_invoke";
                __int16 v32 = 2112;
                uint64_t v33 = v19;
                _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%s Sending message to remote object: %@",  buf,  0x16u);

                uint64_t v16 = *(void *)(a1 + 32);
              }

              uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v14 remoteObjectProxy]);
              (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v20);
            }
          }

          else
          {
            id v21 = (void *)CSLogContextFacilityCoreSpeech;
            if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
            {
              __int128 v22 = v21;
              unsigned int v23 = [v14 processIdentifier];
              *(_DWORD *)AudioBufferList buf = 136315394;
              uint64_t v31 = "-[CSConnectionListener notifyClientsWithBlock:]_block_invoke";
              __int16 v32 = 1026;
              LODWORD(v33) = v23;
              _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "%s RemoteObjectProxy is nil for client PID (%{public}d)",  buf,  0x12u);
            }
          }
        }

        id v11 = [v9 countByEnumeratingWithState:&v25 objects:v29 count:16];
      }

      while (v11);
    }

    id WeakRetained = v24;
  }
}

void sub_1001289D0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned __int8 v3 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = WeakRetained[7];
    id v5 = v3;
    id v6 = objc_loadWeakRetained((id *)(a1 + 40));
    id v7 = v6;
    *(_DWORD *)AudioBufferList buf = 136315906;
    id v15 = "-[CSConnectionListener listener:shouldAcceptNewConnection:]_block_invoke";
    __int16 v16 = 2114;
    uint64_t v17 = v4;
    __int16 v18 = 2114;
    id v19 = v6;
    __int16 v20 = 1026;
    unsigned int v21 = [v7 processIdentifier];
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s [Service:%{public}@] Listener Interruption Handler: %{public}@, client PID: %{public}d)",  buf,  0x26u);
  }

  id v8 = objc_loadWeakRetained((id *)(a1 + 40));
  id v9 = v8;
  if (WeakRetained && v8)
  {
    id v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100128D34;
    void v11[3] = &unk_10022EFD0;
    id v12 = v9;
    id v13 = WeakRetained;
    dispatch_async(v10, v11);
  }
}

void sub_100128B60(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned __int8 v3 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = WeakRetained[7];
    id v5 = v3;
    id v6 = objc_loadWeakRetained((id *)(a1 + 40));
    id v7 = v6;
    *(_DWORD *)AudioBufferList buf = 136315906;
    int v14 = "-[CSConnectionListener listener:shouldAcceptNewConnection:]_block_invoke_2";
    __int16 v15 = 2114;
    uint64_t v16 = v4;
    __int16 v17 = 2114;
    id v18 = v6;
    __int16 v19 = 1026;
    unsigned int v20 = [v7 processIdentifier];
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s [Service:%{public}@] Listener Invalidation Handler: %{public}@, client PID: %{public}d exited",  buf,  0x26u);
  }

  id v8 = objc_loadWeakRetained((id *)(a1 + 40));
  id v9 = v8;
  if (WeakRetained && v8)
  {
    id v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100128CF4;
    void v11[3] = &unk_10022EFD0;
    void v11[4] = WeakRetained;
    id v12 = v9;
    dispatch_async(v10, v11);
  }
}

void sub_100128CF4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientConnections]);
  [v2 removeObject:*(void *)(a1 + 40)];
}

void sub_100128D34(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientConnections]);
  [v2 removeObject:*(void *)(a1 + 32)];
}

void sub_100129608(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "CSSiriAssertionMonitor:didReceiveBacklightOnEnabled:atHostTime:") & 1) != 0) {
    [v3 CSSiriAssertionMonitor:*(void *)(a1 + 32) didReceiveBacklightOnEnabled:*(unsigned __int8 *)(a1 + 48) atHostTime:*(void *)(a1 + 40)];
  }
}

void sub_100129658(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) notifyObserver:v3];
  if ((objc_opt_respondsToSelector(v3, "CSSiriAssertionMonitor:didReceiveEnabled:") & 1) != 0) {
    [v3 CSSiriAssertionMonitor:*(void *)(a1 + 32) didReceiveEnabled:*(unsigned __int8 *)(a1 + 40)];
  }
}

void sub_1001296B8(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    id v5 = "-[CSSiriAssertionMonitor disableAssertionReceived]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s did receive disable assertion",  (uint8_t *)&v4,  0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v3 + 8) != 1)
  {
    *(_BYTE *)(v3 + _Block_object_dispose(va, 8) = 1;
    objc_msgSend(*(id *)(a1 + 32), "_notifyObserver:", objc_msgSend(*(id *)(a1 + 32), "isEnabled"));
  }

void sub_100129798(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    id v5 = "-[CSSiriAssertionMonitor enableAssertionReceived]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s did receive enable assertion",  (uint8_t *)&v4,  0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v3 + 8) != 2)
  {
    *(_BYTE *)(v3 + _Block_object_dispose(va, 8) = 2;
    objc_msgSend(*(id *)(a1 + 32), "_notifyObserver:", objc_msgSend(*(id *)(a1 + 32), "isEnabled"));
  }

void sub_1001298B8(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSSiriAssertionMonitor);
  id v2 = (void *)qword_100280158;
  qword_100280158 = (uint64_t)v1;
}

void sub_10012B778(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSAudioPowerProvider);
  id v2 = (void *)qword_100280168;
  qword_100280168 = (uint64_t)v1;
}

id sub_10012C0A8(uint64_t a1)
{
  unint64_t v2 = (unint64_t)[*(id *)(a1 + 32) length];
  unint64_t v3 = v2
     / +[CSConfig inputRecordingNumberOfChannels]( &OBJC_CLASS___CSConfig,  "inputRecordingNumberOfChannels");
  unint64_t v4 = v3
     / +[CSConfig inputRecordingSampleByteDepth](&OBJC_CLASS___CSConfig, "inputRecordingSampleByteDepth");
  objc_msgSend( *(id *)(*(void *)(a1 + 40) + 192), "addSamples:numSamples:", objc_msgSend(*(id *)(a1 + 32), "bytes"), v4);
  uint64_t v5 = *(void *)(a1 + 40);
  if (*(_BYTE *)(v5 + 160) && !*(_BYTE *)(v5 + 161))
  {
    id v6 = objc_alloc(&OBJC_CLASS___CSAudioChunk);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = +[CSConfig inputRecordingNumberOfChannels]( &OBJC_CLASS___CSConfig,  "inputRecordingNumberOfChannels");
    uint64_t v9 = +[CSConfig inputRecordingSampleByteDepth]( &OBJC_CLASS___CSConfig,  "inputRecordingSampleByteDepth");
    LOBYTE(v41) = +[CSConfig inputRecordingIsFloat](&OBJC_CLASS___CSConfig, "inputRecordingIsFloat");
    id v10 = [v6 initWithData:v7 numChannels:v8 numSamples:v4 sampleByteDepth:v9 startSampleCount:0 hostTime:0 remoteVAD:0 isFloat:v41];
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 184) getBestAnalyzedResultsFromAudioChunk:v10]);
    [v11 bestScore];
    float v13 = v12;
    [*(id *)(*(void *)(a1 + 40) + 184) getThreshold];
    if (v13 >= v14)
    {
      *(void *)(*(void *)(a1 + 40) + 20+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7, 0) = [v11 bestStart];
      [*(id *)(*(void *)(a1 + 40) + 184) reset];
      id v15 =  +[CSSpeechManager sharedManagerForCoreSpeechDaemon]( &OBJC_CLASS___CSSpeechManager,  "sharedManagerForCoreSpeechDaemon");
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[CSDeviceActivationEventNotificationHandler sharedInstance]( &OBJC_CLASS___CSDeviceActivationEventNotificationHandler,  "sharedInstance"));
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 216LL));
      id v18 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deviceID]);
      id v19 = +[CSDeviceActivationEvent remoraVoiceTriggerEvent:activationInfo:hostTime:]( &OBJC_CLASS___CSDeviceActivationEvent,  "remoraVoiceTriggerEvent:activationInfo:hostTime:",  v18,  0LL,  mach_absolute_time());
      unsigned int v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      [v16 notifyActivationEvent:v20 completion:&stru_10022E020];
    }
  }

  while (1)
  {
    double v21 = (double)*(unint64_t *)(*(void *)(a1 + 40) + 208LL);
    +[CSConfig inputRecordingBufferDuration](&OBJC_CLASS___CSConfig, "inputRecordingBufferDuration");
    double v23 = v22;
    +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
    double v25 = v21 + v23 * v24;
    id result = [*(id *)(*(void *)(a1 + 40) + 192) sampleCount];
    uint64_t v27 = *(void *)(a1 + 40);
    __int128 v28 = *(void **)(v27 + 192);
    unint64_t v29 = *(void *)(v27 + 208);
    +[CSConfig inputRecordingBufferDuration](&OBJC_CLASS___CSConfig, "inputRecordingBufferDuration");
    double v31 = v30;
    +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v28 copybufferFrom:v29 to:(unint64_t)((double)v29 + v31 * v32)]);
    +[CSConfig inputRecordingBufferDuration](&OBJC_CLASS___CSConfig, "inputRecordingBufferDuration");
    double v35 = v34;
    +[CSConfig inputRecordingSampleRate](&OBJC_CLASS___CSConfig, "inputRecordingSampleRate");
    *(void *)(*(void *)(a1 + 40) + 20++*(void *)(*(void *)(result + 32) + 8LL) = (unint64_t)((double)*(unint64_t *)(*(void *)(a1 + 40)
                                                                                               + 208LL)
                                                                 + v35 * v36);
    uint64_t v37 = *(void *)(a1 + 40);
    if (*(_BYTE *)(v37 + 161))
    {
      id v38 = objc_loadWeakRetained((id *)(v37 + 176));
      char v39 = objc_opt_respondsToSelector( v38,  "audioEngineBufferAvailable:audioStreamHandleId:buffer:remoteVAD:atTime:isFileLoadedBuffer:");

      if ((v39 & 1) != 0)
      {
        id v40 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 176LL));
        [v40 audioEngineBufferAvailable:*(void *)(a1 + 40) audioStreamHandleId:*(void *)(a1 + 48) buffer:v33 remoteVAD:0 atTime:*(void *)(a1 + 56) isFileLoadedBuffer:*(unsigned __int8 *)(a1 + 64)];
      }
    }
  }

  return result;
}

void sub_10012C408(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 161LL) = 0;
  *(void *)(*(void *)(a1 + 32) + 20+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0LL;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 176LL));
  char v3 = objc_opt_respondsToSelector(WeakRetained, "audioEngineDidStopRecord:audioStreamHandleId:reason:");

  if ((v3 & 1) != 0)
  {
    id v4 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 176LL));
    objc_msgSend( v4,  "audioEngineDidStopRecord:audioStreamHandleId:reason:",  *(void *)(a1 + 32),  objc_msgSend(*(id *)(a1 + 32), "audioStreamHandleId"),  0);
  }

void sub_10012C4CC(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 161LL) = 1;
  *(void *)(*(void *)(a1 + 32) + 20++*(void *)(*(void *)(result + 32) + 8) = [*(id *)(*(void *)(a1 + 32) + 192) sampleCount];
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(v2 + 200);
  if (v3)
  {
    if (v3 >> 6 <= 0x7C) {
      unint64_t v4 = 0LL;
    }
    else {
      unint64_t v4 = v3 - 8000;
    }
    *(void *)(v2 + 20_Block_object_dispose(va, 8) = v4;
    uint64_t v2 = *(void *)(a1 + 32);
  }

  [*(id *)(v2 + 184) reset];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 176LL));
  char v6 = objc_opt_respondsToSelector(WeakRetained, "audioEngineDidStartRecord:audioStreamHandleId:successfully:error:");

  if ((v6 & 1) != 0)
  {
    id v7 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 176LL));
    objc_msgSend( v7,  "audioEngineDidStartRecord:audioStreamHandleId:successfully:error:",  *(void *)(a1 + 32),  objc_msgSend(*(id *)(a1 + 32), "audioStreamHandleId"),  1,  0);
  }

uint64_t sub_10012C5EC(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 161LL);
  return result;
}

id sub_10012C608(uint64_t a1)
{
  v4.receiver = *(id *)(a1 + 32);
  v4.super_class = (Class)&OBJC_CLASS___CSAudioInjectionRemoraEngine;
  objc_msgSendSuper2(&v4, "stopAudioStream");
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)&OBJC_CLASS___CSAudioInjectionRemoraEngine;
  objc_msgSendSuper2(&v3, "stop");
  return [*(id *)(*(void *)(a1 + 32) + 192) reset];
}

void sub_10012C67C(uint64_t a1)
{
  v15.receiver = *(id *)(a1 + 32);
  v15.super_class = (Class)&OBJC_CLASS___CSAudioInjectionRemoraEngine;
  objc_msgSendSuper2(&v15, "start");
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[CSAsset defaultFallBackAssetForVoiceTrigger]( &OBJC_CLASS___CSAsset,  "defaultFallBackAssetForVoiceTrigger"));
  objc_super v3 = (void *)objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerFirstPassConfigDecoder decodeConfigFrom:]( &OBJC_CLASS___CSVoiceTriggerFirstPassConfigDecoder,  "decodeConfigFrom:",  v2));
  objc_super v4 = objc_alloc(&OBJC_CLASS___CSKeywordAnalyzerNDAPI);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 configPathNDAPI]);
  char v6 = (void *)objc_claimAutoreleasedReturnValue([v2 resourcePath]);
  id v7 = -[CSKeywordAnalyzerNDAPI initWithConfigPath:resourcePath:](v4, "initWithConfigPath:resourcePath:", v5, v6);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(v8 + 184);
  *(void *)(v8 + 184) = v7;

  id v10 = *(void **)(*(void *)(a1 + 32) + 184LL);
  if (!v10)
  {
    id v11 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      __int16 v17 = "-[CSAudioInjectionRemoraEngine start]_block_invoke";
      _os_log_fault_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "%s Failed to create NDAPI", buf, 0xCu);
      id v10 = *(void **)(*(void *)(a1 + 32) + 184LL);
    }

    else
    {
      id v10 = 0LL;
    }
  }

  [v10 setActiveChannel:0];
  float v12 = *(void **)(a1 + 32);
  float v13 = (void *)objc_claimAutoreleasedReturnValue(+[CSAudioStartStreamOption noAlertOption](&OBJC_CLASS___CSAudioStartStreamOption, "noAlertOption"));
  v14.receiver = v12;
  v14.super_class = (Class)&OBJC_CLASS___CSAudioInjectionRemoraEngine;
  objc_msgSendSuper2(&v14, "startAudioStreamWithOption:", v13);
}

uint64_t sub_10012C84C(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 160LL);
  return result;
}

uint64_t sub_10012C868(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 16+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = *(_BYTE *)(result + 40);
  return result;
}

id sub_10012CAF4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) notifyObserver:a2];
}

id sub_10012CB00(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) notifyObserver:a2];
}

void sub_10012CB4C(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSCommandControlStreamEventMonitor);
  uint64_t v2 = (void *)qword_100280178;
  qword_100280178 = (uint64_t)v1;
}

void sub_10012DE84(uint64_t a1)
{
  uint64_t v2 = kVTEIAudioProviderType;
  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEIAudioProviderType]);
  if (v3
    && (objc_super v4 = (void *)v3,
        uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v2]),
        id v6 = [v5 unsignedIntegerValue],
        v5,
        v4,
        v6 == (id)1))
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) speechManager]);
    uint64_t v8 = objc_claimAutoreleasedReturnValue([v7 audioTapProvider]);
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) speechManager]);
    uint64_t v8 = objc_claimAutoreleasedReturnValue([v7 audioProviderWithUUID:*(void *)(a1 + 48)]);
  }

  id v12 = (id)v8;

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:kVTEItriggerStartSampleCount]);
  id v10 = [v9 unsignedIntegerValue];
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", *(void *)(a1 + 56)));
  [v12 saveRecordingBufferToEndFrom:v10 toURL:v11];

  [*(id *)(a1 + 40) _writeDictionary:*(void *)(a1 + 32) toPath:*(void *)(a1 + 64)];
}

void sub_10012DFA4(id a1)
{
  uint64_t v1 = CSIsIOS(a1);
  if ((v1 & 1) != 0 || CSIsHorseman(v1, v2))
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[CSP2PService sharedInstance](&OBJC_CLASS___CSP2PService, "sharedInstance"));
    [v3 sendVTNearMissGradingDataToCompanion];
  }

void sub_10012DFF4(id a1)
{
  uint64_t v1 = CSIsIOS(a1);
  if ((v1 & 1) != 0 || CSIsHorseman(v1, v2))
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[CSP2PService sharedInstance](&OBJC_CLASS___CSP2PService, "sharedInstance"));
    [v3 sendGeckoSpeechLogsToCompanion];
  }

void sub_10012E044(id a1)
{
  uint64_t v1 = CSIsIOS(a1);
  if ((v1 & 1) != 0 || CSIsHorseman(v1, v2))
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[CSP2PService sharedInstance](&OBJC_CLASS___CSP2PService, "sharedInstance"));
    [v3 sendVTNearMissGradingDataToCompanion];
  }

void sub_10012E094(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) speechManager]);
  id v9 = (id)objc_claimAutoreleasedReturnValue([v2 audioProviderWithUUID:*(void *)(a1 + 40)]);

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:kVTEIsecondPassAnalyzerStartSampleCount]);
  id v4 = [v3 unsignedIntegerValue];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:kVTEIsecondPassAnalyzerEndSampleCount]);
  id v6 = [v5 unsignedIntegerValue];
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", *(void *)(a1 + 56)));
  [v9 saveRecordingBufferFrom:v4 to:v6 toURL:v7];

  [*(id *)(a1 + 32) _writeDictionary:*(void *)(a1 + 48) toPath:*(void *)(a1 + 64)];
  uint64_t v8 = *(void *)(a1 + 72);
  if (v8) {
    (*(void (**)(void))(v8 + 16))();
  }
}

void sub_10012E190(id a1)
{
  uint64_t v1 = CSIsIOS(a1);
  if ((v1 & 1) != 0 || CSIsHorseman(v1, v2))
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[CSP2PService sharedInstance](&OBJC_CLASS___CSP2PService, "sharedInstance"));
    [v3 sendVTNearMissGradingDataToCompanion];
  }

void sub_10012E594(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 8) objectForKeyedSubscript:v4]);
  [v5 refresh];
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 levelForFactor:@"AssetData" withNamespaceName:v4]);
  id v7 = v6;
  if (v6
    && (uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 fileValue]),
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 path]),
        v9,
        v8,
        v9))
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 fileValue]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 path]);

    id v12 = (void *)objc_claimAutoreleasedReturnValue([v5 levelForFactor:@"isAssetArchived" withNamespaceName:v4]);
    if (v12 && [v12 BOOLeanValue])
    {
      float v13 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
      objc_super v14 = (void *)objc_claimAutoreleasedReturnValue([v13 trialBaseAssetDirectory]);

      objc_super v15 = (void *)objc_claimAutoreleasedReturnValue( +[CSAssetController getAssetTypeStringForType:]( &OBJC_CLASS___CSAssetController,  "getAssetTypeStringForType:",  a1[6]));
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v14 stringByAppendingPathComponent:v15]);

      id v11 = (void *)objc_claimAutoreleasedReturnValue([v16 stringByAppendingPathComponent:@"TrialAssetData"]);
    }

    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 levelForFactor:@"AssetVersion" withNamespaceName:v4]);

    uint64_t v17 = a1[6];
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v7 stringValue]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue( +[CSAsset assetForAssetType:resourcePath:configVersion:assetProvider:]( &OBJC_CLASS___CSAsset,  "assetForAssetType:resourcePath:configVersion:assetProvider:",  v17,  v11,  v18,  1LL));

    if (v19)
    {
      unsigned int v20 = 0LL;
    }

    else
    {
      __int128 v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to get Trial asset from path: %@",  v11));
      uint64_t v27 = (os_log_s *)CSLogCategoryAsset;
      if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        float v36 = "-[CSTrialAssetManager getInstalledAssetofType:forLocale:completion:]_block_invoke";
        __int16 v37 = 2112;
        id v38 = v26;
        _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%s %@", buf, 0x16u);
      }

      uint64_t v28 = CSErrorDomain;
      double v31 = @"reason";
      float v32 = v26;
      unint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v32,  &v31,  1LL));
      unsigned int v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v28,  1601LL,  v29));
    }

    uint64_t v30 = a1[5];
    if (v30) {
      (*(void (**)(uint64_t, void *, void *))(v30 + 16))(v30, v19, v20);
    }
  }

  else
  {
    double v21 = (void *)objc_claimAutoreleasedReturnValue([v7 fileValue]);
    double v22 = (void *)objc_claimAutoreleasedReturnValue([v21 path]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to get Trial asset from path: %@",  v22));

    double v23 = (os_log_s *)CSLogCategoryAsset;
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      float v36 = "-[CSTrialAssetManager getInstalledAssetofType:forLocale:completion:]_block_invoke";
      __int16 v37 = 2112;
      id v38 = v19;
      _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%s %@", buf, 0x16u);
    }

    uint64_t v24 = CSErrorDomain;
    uint64_t v33 = @"reason";
    double v34 = v19;
    double v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v34,  &v33,  1LL));
    unsigned int v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v24,  1601LL,  v25));

    (*(void (**)(void))(a1[5] + 16LL))();
  }
}

void sub_10012E9E8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = *(void **)(*(void *)(a1 + 32) + 8LL);
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v5]);
  [v6 refresh];
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = @"com.apple.siri.sp.mitigation";
  if (v7 != 6) {
    uint64_t v8 = 0LL;
  }
  if (v7) {
    id v9 = v8;
  }
  else {
    id v9 = @"com.apple.siri.sp.invocation";
  }
  id v10 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) stringByReplacingOccurrencesOfString:@"_" withString:@"-"]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v6 UAFLevelForFactor:v9 withNamespaceName:v5 withLanguage:v10]);

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 directoryValue]);
  float v13 = (void *)objc_claimAutoreleasedReturnValue([v12 path]);

  objc_super v14 = (void *)objc_claimAutoreleasedReturnValue([v11 metadata]);
  objc_super v15 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKey:@"version"]);

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v11 metadata]);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKey:@"locale"]);

  id v18 = (os_log_s *)CSLogCategoryAsset;
  if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = *(void *)(a1 + 56);
    *(_DWORD *)AudioBufferList buf = 136315906;
    id v38 = "-[CSTrialAssetManager _getSiriAttAssetsForType:forLocale:completion:]_block_invoke";
    __int16 v39 = 2048;
    uint64_t v40 = v19;
    __int16 v41 = 2112;
    __int16 v42 = v17;
    __int16 v43 = 2112;
    __int128 v44 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%s Got Trial rollout for assetType: %lu for locale: %@ version: %@",  buf,  0x2Au);
  }

  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472LL;
  v29[2] = sub_10012EDF8;
  v29[3] = &unk_10022E1A8;
  id v30 = *(id *)(a1 + 48);
  unsigned int v20 = objc_retainBlock(v29);
  if (v13 && v15 && v17)
  {
    if ([*(id *)(a1 + 40) isEqualToString:v17])
    {
      double v21 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
      unsigned int v22 = [v21 bypassTrialAssets];

      if (!v22)
      {
        double v23 = (void *)objc_claimAutoreleasedReturnValue( +[CSAsset assetForAssetType:resourcePath:configVersion:assetProvider:]( &OBJC_CLASS___CSAsset,  "assetForAssetType:resourcePath:configVersion:assetProvider:",  *(void *)(a1 + 56),  v13,  v15,  1LL));
        ((void (*)(void *, void *, void))v20[2])(v20, v23, 0LL);
        goto LABEL_17;
      }

      double v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Trial asset bypass is set"));
      uint64_t v24 = CSErrorDomain;
      double v31 = @"reason";
      float v32 = v23;
      double v25 = &v32;
      __int128 v26 = &v31;
    }

    else
    {
      double v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Mismatch between Current locale: %@ & Trial rollout locale: %@",  *(void *)(a1 + 40),  v17));
      uint64_t v24 = CSErrorDomain;
      uint64_t v33 = @"reason";
      double v34 = v23;
      double v25 = &v34;
      __int128 v26 = &v33;
    }
  }

  else
  {
    double v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to get Trial factor: %@",  v9));
    uint64_t v24 = CSErrorDomain;
    double v35 = @"reason";
    float v36 = v23;
    double v25 = &v36;
    __int128 v26 = &v35;
  }

  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v25,  v26,  1LL));
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v24,  1601LL,  v27));

  ((void (*)(void *, void, void *))v20[2])(v20, 0LL, v28);
LABEL_17:
}

void sub_10012EDF8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = (void *)CSLogCategoryAsset;
    if (os_log_type_enabled(CSLogCategoryAsset, OS_LOG_TYPE_ERROR))
    {
      id v9 = v7;
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
      int v12 = 136315650;
      float v13 = "-[CSTrialAssetManager _getSiriAttAssetsForType:forLocale:completion:]_block_invoke";
      __int16 v14 = 2112;
      objc_super v15 = v10;
      __int16 v16 = 2112;
      uint64_t v17 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%s %@ - %@", (uint8_t *)&v12, 0x20u);
    }
  }

  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v5, v6);
  }
}

void sub_10012EF34(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[TRIClient clientWithIdentifier:](&OBJC_CLASS___TRIClient, "clientWithIdentifier:", a2));
  if (v5) {
    [*(id *)(a1 + 32) setObject:v5 forKey:v6];
  }
}

void sub_10012EFD8(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSTrialAssetManager);
  uint64_t v2 = (void *)qword_100280188;
  qword_100280188 = (uint64_t)v1;
}

void sub_10012F5AC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[AVSystemController sharedAVSystemController]( &OBJC_CLASS___AVSystemController,  "sharedAVSystemController"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 attributeForKey:AVSystemController_CurrentlyActiveCategoryAttribute]);

  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[AVSystemController sharedAVSystemController]( &OBJC_CLASS___AVSystemController,  "sharedAVSystemController"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 attributeForKey:AVSystemController_CurrentlyActiveModeAttribute]);

  if (v3) {
    BOOL v6 = v5 == 0LL;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioBufferList buf = 136315650;
      float v13 = "-[CSMXSessionMonitor _querySomeClientIsActive]_block_invoke";
      __int16 v14 = 2112;
      objc_super v15 = v3;
      __int16 v16 = 2112;
      uint64_t v17 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s CurrentlyActiveCategory: %@. CurrentlyActiveMode: %@",  buf,  0x20u);
    }

    uint64_t v8 = *(void **)(a1 + 32);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    void v9[2] = sub_10012F73C;
    void v9[3] = &unk_10022EE58;
    id v10 = v3;
    id v11 = v5;
    [v8 enumerateObserversInQueue:v9];
  }
}

void sub_10012F73C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "mxSessionMonitorSomeClientWentActive:") & 1) != 0)
  {
    v6[0] = kMXSessionProperty_AudioCategory;
    v6[1] = kMXSessionProperty_AudioMode;
    uint64_t v4 = *(void *)(a1 + 40);
    v7[0] = *(void *)(a1 + 32);
    v7[1] = v4;
    void v6[2] = kMXSession_RouteChangeDescriptionKey_AudioSessionID;
    v6[3] = kMXSessionProperty_IsActive;
    void v7[2] = &off_100238E80;
    v7[3] = &__kCFBooleanTrue;
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v7,  v6,  4LL));
    [v3 mxSessionMonitorSomeClientWentActive:v5];
  }
}

void sub_10012F82C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)AudioBufferList buf = 136315394;
    uint64_t v8 = "-[CSMXSessionMonitor _handleSomeClientIsActiveDidChangeNotification:]_block_invoke";
    __int16 v9 = 2114;
    uint64_t v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s handleSomeClientIsActiveDidChangeNotification = %{public}@",  buf,  0x16u);
  }

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_10012F930;
  v5[3] = &unk_10022EED0;
  uint64_t v4 = *(void **)(a1 + 40);
  id v6 = *(id *)(a1 + 32);
  [v4 enumerateObserversInQueue:v5];
}

void sub_10012F930(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ((objc_opt_respondsToSelector(v5, "mxSessionMonitorSomeClientWentActive:") & 1) != 0)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 userInfo]);
      [v5 mxSessionMonitorSomeClientWentActive:v4];
    }

    else
    {
      [v5 mxSessionMonitorSomeClientWentActive:0];
    }
  }
}

void sub_10012FA7C(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSMXSessionMonitor);
  uint64_t v2 = (void *)qword_100280198;
  qword_100280198 = (uint64_t)v1;
}

void sub_100130B04(uint64_t a1, BOOL a2, uint64_t a3)
{
  xpc_object_t xdict = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
  xpc_dictionary_set_BOOL(xdict, "result", a2);
  xpc_dictionary_set_uint64(xdict, "alertStartTime", a3);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 40), xdict);
}

void sub_10013179C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

id sub_100131AB4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 32) appendAudioChunk:*(void *)(a1 + 40)];
}

void sub_100131AC0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    id v6 = "-[CSSiriAudioMessageRequestHandler attSiriAudioSrcNodeDidStop:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Ending feeding audio to currentSiriAudioMessageFile",  (uint8_t *)&v5,  0xCu);
  }

  [*(id *)(*(void *)(a1 + 32) + 32) endAudio];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 32);
  if (v4)
  {
    *(void *)(v3 + 32) = 0LL;

    dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 40LL));
  }

void sub_100131B94(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioMessageAudioFiles]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) requestUUID]);
  [v2 removeObjectForKey:v3];

  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(void **)(v4 + 32);
  if (v5)
  {
    *(void *)(v4 + 32) = 0LL;

    dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 40LL));
  }

id sub_100131C28(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) removeObjectForKey:*(void *)(a1 + 40)];
}

void sub_100131C34(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a3 requestId]);
  unsigned int v5 = [v4 isEqualToString:*(void *)(a1 + 32)];

  if (v5) {
    ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  }
}

id sub_100131C90(uint64_t a1)
{
  return [*(id *)(a1 + 32) _releaseRetainIfNeeded];
}

id sub_100131CBC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)AudioBufferList buf = 136315394;
    double v23 = "-[CSSiriAudioMessageRequestHandler releaseAudioMessageRetainLockFromRequestId:]_block_invoke";
    __int16 v24 = 2112;
    uint64_t v25 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Releasing audio message retain lock from requestId : %@",  buf,  0x16u);
  }

  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "audioMessageFileRetainLocks", 0));
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 allKeys]);

  id v6 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v18;
    do
    {
      __int16 v9 = 0LL;
      do
      {
        if (*(void *)v18 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v17 + 1) + 8LL * (void)v9);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) audioMessageFileRetainLocks]);
        int v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:v10]);
        float v13 = (void *)objc_claimAutoreleasedReturnValue([v12 requestId]);
        unsigned int v14 = [v13 isEqualToString:*(void *)(a1 + 32)];

        if (v14)
        {
          objc_super v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) audioMessageFileRetainLocks]);
          [v15 removeObjectForKey:v10];
        }

        __int16 v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }

    while (v7);
  }

  return [*(id *)(a1 + 40) _releaseRetainIfNeeded];
}

void sub_100131EA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(dispatch_group_s **)(v2 + 40);
  unsigned int v5 = *(dispatch_queue_s **)(v2 + 8);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100131F54;
  void v8[3] = &unk_10022E288;
  id v6 = v3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v9 = v6;
  uint64_t v10 = v7;
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  dispatch_group_notify(v4, v5, v8);
}

void sub_100131F54(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    int v16 = 136315394;
    __int128 v17 = "-[CSSiriAudioMessageRequestHandler getAudioFileWithRequestId:completion:]_block_invoke_2";
    __int16 v18 = 2112;
    __int128 v19 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Scheduled fetching Audio File with RequestID : %@",  (uint8_t *)&v16,  0x16u);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) audioMessageAudioFiles]);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:*(void *)(a1 + 32)]);

  if (v5)
  {
    id v6 = *(void **)(a1 + 48);
    uint64_t v7 = *(void **)(*(void *)(a1 + 40) + 24LL);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 UUIDString]);
    [v7 setObject:v6 forKey:v8];

    id v9 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = v9;
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 recordedAudioFileURL]);
      int v16 = 136315394;
      __int128 v17 = "-[CSSiriAudioMessageRequestHandler getAudioFileWithRequestId:completion:]_block_invoke";
      __int16 v18 = 2112;
      __int128 v19 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s Returing _recordedAudioFileURL = %@",  (uint8_t *)&v16,  0x16u);
    }

    uint64_t v12 = *(void *)(a1 + 56);
    if (v12)
    {
      float v13 = (void *)objc_claimAutoreleasedReturnValue([v5 recordedAudioFileURL]);
      (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v13);
    }
  }

  else
  {
    unsigned int v14 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315138;
      __int128 v17 = "-[CSSiriAudioMessageRequestHandler getAudioFileWithRequestId:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%s Unable to find recordAudioFileURL, passing nil",  (uint8_t *)&v16,  0xCu);
    }

    uint64_t v15 = *(void *)(a1 + 56);
    if (v15) {
      (*(void (**)(uint64_t, void))(v15 + 16))(v15, 0LL);
    }
  }
}

void sub_100132184(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) isContinuousConversation];
  else {
    BOOL v3 = v2 == 0;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    unsigned int v5 = *(void **)(v4 + 32);
    *(void *)(v4 + 32) = 0LL;

    id v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 136315138;
      unsigned int v14 = "-[CSSiriAudioMessageRequestHandler startLoggingWithRequestId:recordContext:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Not start audio message request logging, use audio logging in the legacy path",  (uint8_t *)&v13,  0xCu);
    }
  }

  else
  {
    uint64_t v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      int v13 = 136315394;
      unsigned int v14 = "-[CSSiriAudioMessageRequestHandler startLoggingWithRequestId:recordContext:]_block_invoke";
      __int16 v15 = 2112;
      uint64_t v16 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s Start audio message handling logging, for the CC : %@",  (uint8_t *)&v13,  0x16u);
    }

    uint64_t v10 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _createAudioMessageFile:*(void *)(a1 + 40)]);
    uint64_t v11 = *(void *)(a1 + 48);
    uint64_t v12 = *(void **)(v11 + 32);
    *(void *)(v11 + 32) = v10;

    [*(id *)(*(void *)(a1 + 48) + 32) prepareFile];
    dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 48) + 40LL));
  }

void sub_100132760(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSAVCallConnectedMonitor);
  unsigned int v2 = (void *)qword_1002801A8;
  qword_1002801A8 = (uint64_t)v1;
}

void sub_1001328E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1001334A8(uint64_t a1, void *a2)
{
  unsigned int v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _handleClientEvent:v3];
}

void sub_1001341A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
}

void sub_100134444(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = *(void **)(a1 + 32);
    id v6 = v4;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 profileID]);
    int v8 = 136315650;
    uint64_t v9 = "-[CSVoiceProfileRetrainManager _retrainingVoiceProfile:voiceProfile:asset:]_block_invoke";
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Retraining done for profile %@ with error %@",  (uint8_t *)&v8,  0x20u);
  }
}

uint64_t sub_100134538(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100134548(uint64_t a1)
{
}

void sub_100134550(uint64_t a1)
{
  unsigned int v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "-[CSVoiceProfileRetrainManager _runVoiceProfileRetrainerWithAsset:withLanguageCode:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Triggered migration if needed...",  (uint8_t *)&buf,  0xCu);
  }

  id v3 = objc_autoreleasePoolPush();
  *(void *)&__int128 buf = 0LL;
  *((void *)&buf + 1) = &buf;
  uint64_t v8 = 0x3032000000LL;
  uint64_t v9 = sub_100134538;
  __int16 v10 = sub_100134548;
  uint64_t v11 = -[CSOSTransaction initWithDescription:]( objc_alloc(&OBJC_CLASS___CSOSTransaction),  "initWithDescription:",  @"VoiceProfile Migration");
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100134874;
  v6[3] = &unk_10022E3B8;
  uint64_t v4 = *(void **)(a1 + 32);
  void v6[4] = *(void *)(a1 + 40);
  void v6[5] = &buf;
  [v4 triggerVoiceProfileMigrationWithCompletion:v6];
  _Block_object_dispose(&buf, 8);

  objc_autoreleasePoolPop(v3);
  unsigned int v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "-[CSVoiceProfileRetrainManager _runVoiceProfileRetrainerWithAsset:withLanguageCode:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s Completed one-time migration...",  (uint8_t *)&buf,  0xCu);
  }

void sub_1001346FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10013471C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  BOOL v9 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
  if (!v6 || v7)
  {
    if (v9)
    {
      int v10 = 136315138;
      uint64_t v11 = "-[CSVoiceProfileRetrainManager _runVoiceProfileRetrainerWithAsset:withLanguageCode:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s Speaker recognition asset not found",  (uint8_t *)&v10,  0xCu);
    }
  }

  else
  {
    if (v9)
    {
      int v10 = 136315394;
      uint64_t v11 = "-[CSVoiceProfileRetrainManager _runVoiceProfileRetrainerWithAsset:withLanguageCode:]_block_invoke";
      __int16 v12 = 2112;
      id v13 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s Found speaker recognition asset:%@",  (uint8_t *)&v10,  0x16u);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), a2);
  }

  [*(id *)(a1 + 32) _retrainingVoiceProfile:*(void *)(a1 + 40) voiceProfile:*(void *)(a1 + 48) asset:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
}

void sub_100134874(uint64_t a1, void *a2)
{
  id v4 = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a2);
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  if (v5)
  {
    id v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      int v10 = "-[CSVoiceProfileRetrainManager _runVoiceProfileRetrainerWithAsset:withLanguageCode:]_block_invoke";
      __int16 v11 = 2114;
      uint64_t v12 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s ERR: Failed voice profile migration with error %{public}@",  (uint8_t *)&v9,  0x16u);
    }
  }

  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = 0LL;
}

void sub_10013497C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  int v9 = *(dispatch_queue_s **)(v7 + 8);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  id v12[2] = sub_100134A38;
  void v12[3] = &unk_10022E368;
  id v13 = v5;
  uint64_t v14 = v7;
  id v15 = v8;
  id v16 = v6;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v9, v12);
}

void sub_100134A38(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 32);
  id v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (v2)
  {
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      uint64_t v8 = "-[CSVoiceProfileRetrainManager _speakerRecognitionCleanupDuplicatedProfilesCallback]_block_invoke_2";
      __int16 v9 = 2112;
      id v10 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Fetched latest VT asset %@ for retraining",  (uint8_t *)&v7,  0x16u);
      unsigned int v2 = *(void **)(a1 + 32);
    }

    [*(id *)(a1 + 40) _runVoiceProfileRetrainerWithAsset:v2 withLanguageCode:*(void *)(a1 + 48)];
  }

  else if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
  {
    id v4 = *(void **)(a1 + 56);
    id v5 = v3;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 localizedDescription]);
    int v7 = 136315394;
    uint64_t v8 = "-[CSVoiceProfileRetrainManager _speakerRecognitionCleanupDuplicatedProfilesCallback]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v6;
    _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Cannot retrain since we cannot look-up SSR asset with error %@",  (uint8_t *)&v7,  0x16u);
  }

void sub_100134B8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  __int16 v9 = *(dispatch_queue_s **)(v7 + 8);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  id v12[2] = sub_100134C48;
  void v12[3] = &unk_10022E368;
  id v13 = v5;
  uint64_t v14 = v7;
  id v15 = v8;
  id v16 = v6;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v9, v12);
}

void sub_100134C48(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 32);
  id v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (v2)
  {
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      uint64_t v8 = "-[CSVoiceProfileRetrainManager _speakerRecognitionModelRetrainCallback]_block_invoke_2";
      __int16 v9 = 2112;
      id v10 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Fetched latest SSR asset %@ for retraining",  (uint8_t *)&v7,  0x16u);
      unsigned int v2 = *(void **)(a1 + 32);
    }

    [*(id *)(a1 + 40) _runVoiceProfileRetrainerWithAsset:v2 withLanguageCode:*(void *)(a1 + 48)];
  }

  else if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
  {
    id v4 = *(void **)(a1 + 56);
    id v5 = v3;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 localizedDescription]);
    int v7 = 136315394;
    uint64_t v8 = "-[CSVoiceProfileRetrainManager _speakerRecognitionModelRetrainCallback]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v6;
    _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Cannot retrain since we cannot look-up SSR asset with error %@",  (uint8_t *)&v7,  0x16u);
  }

void sub_100134D9C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  __int16 v9 = *(dispatch_queue_s **)(v7 + 8);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  id v12[2] = sub_100134E58;
  void v12[3] = &unk_10022E368;
  id v13 = v5;
  uint64_t v14 = v7;
  id v15 = v8;
  id v16 = v6;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v9, v12);
}

void sub_100134E58(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 32);
  id v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (v2)
  {
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      uint64_t v8 = "-[CSVoiceProfileRetrainManager CSSpeakerRecognitionAssetDownloadMonitor:didInstallNewAsset:assetProviderType:"
           "]_block_invoke_2";
      __int16 v9 = 2112;
      id v10 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Fetched latest SSR asset %@ for retraining",  (uint8_t *)&v7,  0x16u);
      unsigned int v2 = *(void **)(a1 + 32);
    }

    [*(id *)(a1 + 40) _runVoiceProfileRetrainerWithAsset:v2 withLanguageCode:*(void *)(a1 + 48)];
  }

  else if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
  {
    id v4 = *(void **)(a1 + 56);
    id v5 = v3;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 localizedDescription]);
    int v7 = 136315394;
    uint64_t v8 = "-[CSVoiceProfileRetrainManager CSSpeakerRecognitionAssetDownloadMonitor:didInstallNewAsset:assetProviderType:]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v6;
    _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Cannot retrain since we cannot look-up SSR asset with error %@",  (uint8_t *)&v7,  0x16u);
  }

void sub_100134FAC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  __int16 v9 = *(dispatch_queue_s **)(v7 + 8);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  id v12[2] = sub_100135068;
  void v12[3] = &unk_10022E368;
  id v13 = v5;
  uint64_t v14 = v7;
  id v15 = v8;
  id v16 = v6;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v9, v12);
}

void sub_100135068(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 32);
  id v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (v2)
  {
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      uint64_t v8 = "-[CSVoiceProfileRetrainManager CSLanguageCodeUpdateMonitor:didReceiveLanguageCodeChanged:]_block_invoke_2";
      __int16 v9 = 2112;
      id v10 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Fetched latest assets %@ for retraining",  (uint8_t *)&v7,  0x16u);
      unsigned int v2 = *(void **)(a1 + 32);
    }

    [*(id *)(a1 + 40) _runVoiceProfileRetrainerWithAsset:v2 withLanguageCode:*(void *)(a1 + 48)];
  }

  else if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
  {
    id v4 = *(void **)(a1 + 56);
    id v5 = v3;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 localizedDescription]);
    int v7 = 136315394;
    uint64_t v8 = "-[CSVoiceProfileRetrainManager CSLanguageCodeUpdateMonitor:didReceiveLanguageCodeChanged:]_block_invoke";
    __int16 v9 = 2114;
    id v10 = v6;
    _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Cannot retrain since we cannot look-up VoiceTrigger asset : %{public}@",  (uint8_t *)&v7,  0x16u);
  }

void sub_1001351BC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
  {
    unsigned int v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v6 = "-[CSVoiceProfileRetrainManager CSVoiceTriggerEnabledMonitor:didReceiveEnabled:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger is enabled, trigger retraining if needed!",  buf,  0xCu);
    }

    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerAssetHandler sharedHandler]( &OBJC_CLASS___CSVoiceTriggerAssetHandler,  "sharedHandler"));
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    void v4[2] = sub_1001352C4;
    v4[3] = &unk_10022E340;
    v4[4] = *(void *)(a1 + 32);
    [v3 getVoiceTriggerAssetWithEndpointId:0 completion:v4];
  }

void sub_1001352C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(dispatch_queue_s **)(v7 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100135370;
  block[3] = &unk_10022EA98;
  id v12 = v5;
  uint64_t v13 = v7;
  id v14 = v6;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

void sub_100135370(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 32);
  id v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (v2)
  {
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315394;
      id v9 = "-[CSVoiceProfileRetrainManager CSVoiceTriggerEnabledMonitor:didReceiveEnabled:]_block_invoke_2";
      __int16 v10 = 2112;
      id v11 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Fetched latest assets %@ for retraining",  (uint8_t *)&v8,  0x16u);
    }

    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[CSUtils getSiriLanguageWithFallback:]( &OBJC_CLASS___CSUtils,  "getSiriLanguageWithFallback:",  0LL));
    if (v4)
    {
      [*(id *)(a1 + 40) _runVoiceProfileRetrainerWithAsset:*(void *)(a1 + 32) withLanguageCode:v4];
    }

    else
    {
      uint64_t v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 136315138;
        id v9 = "-[CSVoiceProfileRetrainManager CSVoiceTriggerEnabledMonitor:didReceiveEnabled:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s LanguageCode is nil - Bailing out",  (uint8_t *)&v8,  0xCu);
      }
    }
  }

  else
  {
    if (!os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR)) {
      return;
    }
    id v5 = *(void **)(a1 + 48);
    id v4 = v3;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
    int v8 = 136315394;
    id v9 = "-[CSVoiceProfileRetrainManager CSVoiceTriggerEnabledMonitor:didReceiveEnabled:]_block_invoke";
    __int16 v10 = 2114;
    id v11 = v6;
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Cannot retrain since we cannot look-up VoiceTrigger asset : %{public}@",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_10013552C(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSUtils getSiriLanguageWithFallback:](&OBJC_CLASS___CSUtils, "getSiriLanguageWithFallback:", 0LL));
  id v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  BOOL v4 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 136315650;
      uint64_t v7 = "-[CSVoiceProfileRetrainManager triggerVoiceProfileRetrainingWithAsset:]_block_invoke";
      __int16 v8 = 2114;
      id v9 = v2;
      __int16 v10 = 2114;
      uint64_t v11 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Retraining on %{public}@ with asset %{public}@",  (uint8_t *)&v6,  0x20u);
    }

    [*(id *)(a1 + 40) _runVoiceProfileRetrainerWithAsset:*(void *)(a1 + 32) withLanguageCode:v2];
  }

  else if (v4)
  {
    int v6 = 136315138;
    uint64_t v7 = "-[CSVoiceProfileRetrainManager triggerVoiceProfileRetrainingWithAsset:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s LanguageCode is nil - Bailing out",  (uint8_t *)&v6,  0xCu);
  }
}

void sub_100135664(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerEnabledMonitor sharedInstance]( &OBJC_CLASS___CSVoiceTriggerEnabledMonitor,  "sharedInstance"));
  [v2 addObserver:*(void *)(a1 + 32)];

  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[CSLanguageCodeUpdateMonitor sharedInstance]( &OBJC_CLASS___CSLanguageCodeUpdateMonitor,  "sharedInstance"));
  [v3 addObserver:*(void *)(a1 + 32)];

  id v4 = +[CSUtils supportsSpeakerRecognitionAssets](&OBJC_CLASS___CSUtils, "supportsSpeakerRecognitionAssets");
  if ((_DWORD)v4)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
    unsigned int v6 = [v5 isSpeakerRecognitionAvailable];

    if (v6)
    {
      uint64_t v7 = objc_alloc_init(&OBJC_CLASS___CSAssetDownloadingOption);
      -[CSAssetDownloadingOption setAllowSpeakerRecognitionAssetDownloading:]( v7,  "setAllowSpeakerRecognitionAssetDownloading:",  1LL);
      __int16 v8 = (void *)objc_claimAutoreleasedReturnValue(+[CSAssetManager sharedManager](&OBJC_CLASS___CSAssetManager, "sharedManager"));
      [v8 setAssetDownloadingOption:v7];

      id v9 = (void *)objc_claimAutoreleasedReturnValue( +[CSSpeakerRecognitionAssetDownloadMonitor sharedInstance]( &OBJC_CLASS___CSSpeakerRecognitionAssetDownloadMonitor,  "sharedInstance"));
      [v9 addObserver:*(void *)(a1 + 32)];

      __int16 v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter"));
      [v10 addObserver:*(void *)(a1 + 32) selector:"_speakerRecognitionModelRetrainCallback" name:kSSRSpeakerModelRetrainRequired object:0];
    }
  }

  if (CSIsIOS(v4))
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter"));
    [v11 addObserver:*(void *)(a1 + 32) selector:"_speakerRecognitionCleanupDuplicatedProfilesCallback" name:kSSRSpeakerVoiceProfileSync object:0];

    id v12 = (id)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter"));
    [v12 addObserver:*(void *)(a1 + 32) selector:"_migrateTDVoiceProfileCallback" name:kSSRVoiceProfileMigrateTDProfileKey object:0];
  }

void sub_100135860(id a1)
{
  if (((CSIsIOS(a1) & 1) != 0
     || (id v1 = +[CSUtils supportsSpeakerRecognitionAssets](&OBJC_CLASS___CSUtils, "supportsSpeakerRecognitionAssets"),
         (v1 & 1) != 0)
     || CSIsASMacWithAOP(v1, v2))
    && (+[CSUtils isDarwinOS](&OBJC_CLASS___CSUtils, "isDarwinOS") & 1) == 0)
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___CSVoiceProfileRetrainManager);
  }

  else
  {
    id v3 = 0LL;
  }

  id v4 = (void *)qword_1002801B8;
  qword_1002801B8 = (uint64_t)v3;
}

void sub_10013604C(_Unwind_Exception *a1)
{
  uint64_t v5 = v2;
  objc_destroyWeak(v5);
  objc_destroyWeak(v3);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 112));
  _Unwind_Resume(a1);
}

void sub_100137814( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100137A10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10013995C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id location)
{
}

id sub_10013BF44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (char *)[*(id *)(*(void *)(a1 + 32) + 104) bestEnd];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 112);
  uint64_t v7 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_INFO))
  {
    int v11 = 136315651;
    id v12 = "-[CSBuiltInVoiceTrigger _firstPassVoiceTriggerSignalEstimate]_block_invoke";
    __int16 v13 = 1025;
    *(_DWORD *)id v14 = (_DWORD)v4;
    *(_WORD *)&v14[4] = 1025;
    *(_DWORD *)&v14[6] = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s bestEnd = %{private}d, bestChannel = %{private}d",  (uint8_t *)&v11,  0x18u);
    uint64_t v5 = *(void *)(a1 + 32);
  }

  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v5 + 168) audioChunkFrom:&v4[-a2] to:v4 channelIdx:v6]);
  id v9 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_INFO))
  {
    int v11 = 136315395;
    id v12 = "-[CSBuiltInVoiceTrigger _firstPassVoiceTriggerSignalEstimate]_block_invoke";
    __int16 v13 = 2113;
    *(void *)id v14 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s audio chunk: %{private}@",  (uint8_t *)&v11,  0x16u);
  }

  return v8;
}

id sub_10013C0AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startAPVoiceTriggerWithCompletion:0];
}

id sub_10013C0B8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startAPVoiceTriggerWithCompletion:0];
}

void sub_10013C0C4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v4 = 136315394;
    uint64_t v5 = "-[CSBuiltInVoiceTrigger attSiriStateMonitor:didRecieveAttSiriStateChange:]_block_invoke";
    __int16 v6 = 2048;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Updated attSiri state to: %lu",  (uint8_t *)&v4,  0x16u);
  }

id sub_10013C184(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 200) isEnabled];
  if ((result & 1) == 0)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (*(_BYTE *)(v3 + 8)) {
      return [*(id *)(v3 + 168) setAnnounceCallsEnabled:(unint64_t)(*(void *)(a1 + 40) - 2) < 3 withStreamHandleID:1];
    }
  }

  return result;
}

void sub_10013C1E8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v8 = 136315394;
    id v9 = "-[CSBuiltInVoiceTrigger CSAudioRouteChangeMonitor:didReceiveAudioRouteChangeEvent:]_block_invoke";
    __int16 v10 = 1026;
    int v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Received audio route change monitor event : %{public}d",  (uint8_t *)&v8,  0x12u);
  }

  switch(*(void *)(a1 + 40))
  {
    case 0LL:
      int v4 = *(void **)(a1 + 32);
      uint64_t v5 = 1LL;
      goto LABEL_9;
    case 1LL:
      int v4 = *(void **)(a1 + 32);
      uint64_t v5 = 0LL;
LABEL_9:
      [v4 _receivedJarvisConnectionEvent:v5];
      return;
    case 2LL:
      __int16 v6 = *(void **)(a1 + 32);
      uint64_t v7 = 1LL;
      goto LABEL_12;
    case 3LL:
      __int16 v6 = *(void **)(a1 + 32);
      uint64_t v7 = 2LL;
      goto LABEL_12;
    case 4LL:
      __int16 v6 = *(void **)(a1 + 32);
      uint64_t v7 = 3LL;
      goto LABEL_12;
    case 5LL:
      __int16 v6 = *(void **)(a1 + 32);
      uint64_t v7 = 4LL;
      goto LABEL_12;
    case 6LL:
      __int16 v6 = *(void **)(a1 + 32);
      uint64_t v7 = 5LL;
LABEL_12:
      [v6 _receivedHearstRoutedEvent:v7];
      break;
    default:
      return;
  }

id sub_10013C31C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateCurrentSplitterState:*(void *)(a1 + 40) shouldDisableSpeakerVerificationInSplitterMode:*(unsigned __int8 *)(a1 + 48)];
}

id *sub_10013C32C(id *result)
{
  if (result[6] == (id)1 && !result[4]) {
    return (id *)[result[5] _cancelLastAudioStreamHold];
  }
  return result;
}

void sub_10013C34C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[CSBuiltInVoiceTrigger cancelSecondPassRunning]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Requested cancelling 2nd pass trigger",  (uint8_t *)&v4,  0xCu);
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) voiceTriggerSecondPass]);
  [v3 forceCancelSecondPassTrigger];
}

void sub_10013C40C(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _isBuiltInAOPVoiceTriggerEvent:*(void *)(a1 + 40)];
  uint64_t v3 = *(void **)(a1 + 32);
  if (!v2)
  {
    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) activationInfo]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:@"VoiceTriggerEnabledKey"]);
    id v15 = [v14 BOOLValue];

    [*(id *)(a1 + 32) _transitVoiceTriggerStatus:v15 force:0];
    uint64_t v16 = *(void *)(a1 + 48);
    if (!v16) {
      return;
    }
    __int128 v17 = *(void (**)(void))(v16 + 16);
LABEL_13:
    v17();
    return;
  }

  if (![v3 _shouldHandleAOPVoiceTrigger])
  {
    uint64_t v18 = *(void *)(a1 + 48);
    if (!v18) {
      return;
    }
    __int128 v17 = *(void (**)(void))(v18 + 16);
    goto LABEL_13;
  }

  else {
    uint64_t v4 = 2LL;
  }
  [*(id *)(a1 + 32) _createSecondPassIfNeededWithFirstPassSource:v4];
  uint64_t v5 = *(void **)(a1 + 32);
  __int16 v6 = (void *)objc_claimAutoreleasedReturnValue( +[CSAudioRecordContext contextForBuiltInVoiceTrigger]( &OBJC_CLASS___CSAudioRecordContext,  "contextForBuiltInVoiceTrigger"));
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472LL;
  v26[2] = sub_10013C648;
  v26[3] = &unk_10022E730;
  v26[4] = *(void *)(a1 + 32);
  [v5 _requestStartAudioStreamWithSource:v4 context:v6 completion:v26];

  unsigned int v7 = +[CSUtils isExclaveHardware](&OBJC_CLASS___CSUtils, "isExclaveHardware");
  int v8 = *(void **)(a1 + 32);
  if (v7)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) exclaveClient]);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    void v22[2] = sub_10013C780;
    v22[3] = &unk_10022E7A8;
    id v10 = *(id *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 32);
    id v23 = v10;
    uint64_t v24 = v11;
    uint64_t v25 = v4;
    [v9 fetchAOPVoiceTriggerResult:v22];

    id v12 = v23;
  }

  else
  {
    uint64_t v19 = *(void *)(a1 + 40);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioProvider]);
    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v12 UUID]);
    double v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) activationInfo]);
    [v8 _handleVoiceTriggerSecondPassWithSource:v4 deviceId:0 event:v19 audioProviderUUID:v20 firstPassInfo:v21];
  }
}

void sub_10013C648(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    unsigned int v7 = *(dispatch_queue_s **)(v6 + 56);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10013C8E4;
    block[3] = &unk_10022F100;
    void block[4] = v6;
    dispatch_async(v7, block);
  }

  else
  {
    int v8 = (void *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
    {
      id v9 = v8;
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
      *(_DWORD *)__int128 buf = 136315394;
      __int16 v13 = "-[CSBuiltInVoiceTrigger activationEventNotificationHandler:event:completion:]_block_invoke_2";
      __int16 v14 = 2114;
      id v15 = v10;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s Failed to start audio stream error : %{public}@",  buf,  0x16u);
    }
  }
}

void sub_10013C780(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activationInfo]);
  id v5 = [v4 mutableCopy];

  if (a2)
  {
    uint64_t v6 = (os_log_s *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 136315394;
      __int16 v14 = "-[CSBuiltInVoiceTrigger activationEventNotificationHandler:event:completion:]_block_invoke";
      __int16 v15 = 2050;
      uint64_t v16 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s trigger-length : %{public}llu",  (uint8_t *)&v13,  0x16u);
    }

    unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a2));
    [v5 setObject:v7 forKey:@"trigger-length"];
  }

  id v9 = *(void **)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 audioProvider]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 UUID]);
  [v9 _handleVoiceTriggerSecondPassWithSource:v8 deviceId:0 event:v10 audioProviderUUID:v12 firstPassInfo:v5];
}

id sub_10013C8E4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _addAudioStreamHold:@"AOPVoiceTrigger"];
}

uint64_t sub_10013C8F4(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 13LL) = *(_BYTE *)(result + 40);
  return result;
}

id sub_10013C904(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _shouldEnableAPVoiceTrigger];
  if ((_DWORD)result) {
    return [*(id *)(a1 + 32) _startAPVoiceTriggerWithCompletion:0];
  }
  return result;
}

void sub_10013C954(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isSecondPassRunning])
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) voiceTriggerSecondPass]);
    [v2 cancelCurrentRequest];
  }

void sub_10013C9B4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isSecondPassRunning])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) voiceTriggerSecondPass]);
    [v2 cancelCurrentRequest];
  }

  uint64_t v3 = *(void **)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = kVTEItriggerStartMachTime;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:kVTEItriggerStartMachTime]);

    if (v5)
    {
      uint64_t v6 = *(void **)(a1 + 32);
      id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v4]);
      objc_msgSend(v6, "setLastSelfTriggerDetectedStartMachTime:", objc_msgSend(v7, "unsignedLongLongValue"));
    }
  }

void sub_10013CA74(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    uint64_t v4 = "-[CSBuiltInVoiceTrigger siriClientBehaviorMonitor:willStopStream:reason:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Siri Client will stop listening, resume VoiceTrigger listen",  (uint8_t *)&v3,  0xCu);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 11LL) = 0;
}

id sub_10013CB24(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    id v5 = "-[CSBuiltInVoiceTrigger siriClientBehaviorMonitor:didStopStream:withEventUUID:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Siri Client stops listening now, VoiceTrigger can listen now",  (uint8_t *)&v4,  0xCu);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 11LL) = 0;
  return [*(id *)(a1 + 32) _reset];
}

id sub_10013CBDC(uint64_t a1)
{
  id v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    id v5 = "-[CSBuiltInVoiceTrigger siriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Siri Client starts listening now, VoiceTrigger shouldn't listen now",  (uint8_t *)&v4,  0xCu);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 11LL) = 1;
  return [*(id *)(a1 + 32) _cancelAllAudioStreamHold];
}

id sub_10013CC98(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _reset];
  if (*(void *)(a1 + 40) != 1LL) {
    return [*(id *)(a1 + 32) _cancelLastAudioStreamHold];
  }
  return result;
}

void sub_10013CCE4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 64);
  BOOL v8 = v7 == 12 || v7 == 2;
  if (v8 && (id v9 = *(void **)(a1 + 32)) != 0LL)
  {
    id v10 = (id)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"trigger-woke-ap"]);

    if (v10)
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"trigger-woke-ap"]);
      id v10 = [v11 BOOLValue];

      if ((id)-[CSVoiceTriggerSecondPassResultHolder result](v5, "result") != (id)1)
      {
        id v12 = (void *)objc_claimAutoreleasedReturnValue(-[CSVoiceTriggerSecondPassResultHolder voiceTriggerEventInfo](v5, "voiceTriggerEventInfo"));
        int v13 = v12;
        if (v12
          && (uint64_t v14 = kVTEITriggeredPh,
              __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:kVTEITriggeredPh]),
              v15,
              v15))
        {
          uint64_t v16 = (__CFString *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:v14]);
        }

        else
        {
          uint64_t v16 = @"unknown";
        }

        float v32 = (void *)objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerStatAggregator sharedAggregator]( &OBJC_CLASS___CSVoiceTriggerStatAggregator,  "sharedAggregator"));
        [v32 logFalseWakeUp:v10 withPhrase:v16];
      }
    }
  }

  else
  {
    id v10 = 0LL;
  }

  __int128 v17 = (void *)CSLogCategoryVT;
  BOOL v18 = os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT);
  if (v18)
  {
    uint64_t v19 = v17;
    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue(-[CSVoiceTriggerSecondPassResultHolder description](v5, "description"));
    *(_DWORD *)__int128 buf = 136315394;
    double v35 = "-[CSBuiltInVoiceTrigger _handleVoiceTriggerSecondPassWithSource:deviceId:event:audioProviderUUID:firstPassInfo:]_block_invoke";
    __int16 v36 = 2112;
    __int16 v37 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%s %@", buf, 0x16u);
  }

  if (CSIsInternalBuild(v18))
  {
    double v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"bypassVoiceTrigger"]);
    unsigned int v22 = [v21 BOOLValue];

    if (v22)
    {
      id v23 = objc_alloc(&OBJC_CLASS___CSVoiceTriggerSecondPassResultHolder);
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(-[CSVoiceTriggerSecondPassResultHolder voiceTriggerEventInfo](v5, "voiceTriggerEventInfo"));
      uint64_t v25 = -[CSVoiceTriggerSecondPassResultHolder initWithResult:voiceTriggerEventInfo:isSecondChanceCandidate:]( v23,  "initWithResult:voiceTriggerEventInfo:isSecondChanceCandidate:",  1LL,  v24,  0LL);

      id v5 = v25;
    }
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  [WeakRetained _handleSecondPassResult:v5 deviceId:*(void *)(a1 + 40) error:v6];

  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerStatAggregator sharedAggregator]( &OBJC_CLASS___CSVoiceTriggerStatAggregator,  "sharedAggregator"));
  id v28 = -[CSVoiceTriggerSecondPassResultHolder result](v5, "result");
  unint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[CSVoiceTriggerSecondPassResultHolder voiceTriggerEventInfo](v5, "voiceTriggerEventInfo"));
  [v27 logSecondPassResult:v28 eventInfo:v29 triggerAPWakeUp:v10];

  uint64_t v30 = *(void *)(a1 + 48);
  double v31 = *(dispatch_queue_s **)(v30 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013D000;
  block[3] = &unk_10022F100;
  void block[4] = v30;
  dispatch_async(v31, block);
}

id sub_10013D000(uint64_t a1)
{
  return [*(id *)(a1 + 32) _teardownSecondPassIfNeeded];
}

uint64_t sub_10013D008(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v3 + 15))
  {
    if ([*(id *)(v3 + 248) count])
    {
      __int128 v12 = 0u;
      __int128 v13 = 0u;
      __int128 v10 = 0u;
      __int128 v11 = 0u;
      id v4 = *(id *)(*(void *)(a1 + 32) + 248LL);
      id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v5)
      {
        id v6 = v5;
        uint64_t v7 = *(void *)v11;
        do
        {
          BOOL v8 = 0LL;
          do
          {
            if (*(void *)v11 != v7) {
              objc_enumerationMutation(v4);
            }
            objc_msgSend( *(id *)(a1 + 32),  "_handleAudioChunk:",  *(void *)(*((void *)&v10 + 1) + 8 * (void)v8),  (void)v10);
            BOOL v8 = (char *)v8 + 1;
          }

          while (v6 != v8);
          id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
        }

        while (v6);
      }

      [*(id *)(*(void *)(a1 + 32) + 248) removeAllObjects];
    }

    return (uint64_t)objc_msgSend(*(id *)(a1 + 32), "_handleAudioChunk:", *(void *)(a1 + 40), (void)v10);
  }

  else
  {
    uint64_t result = CSIsHorseman(a1, a2);
    if ((result & 1) == 0) {
      return (uint64_t)[*(id *)(*(void *)(a1 + 32) + 248) addObject:*(void *)(a1 + 40)];
    }
  }

  return result;
}

void sub_10013D16C(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _shouldSkipAudioChunkHandling];
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2)
  {
    [(id)v3 _resetFirstExclaveAudioBufferMarkerIfNeeded];
  }

  else
  {
    if (*(_BYTE *)(v3 + 18))
    {
      [(id)v3 setIsFirstExclaveAudioBuffer:0];
      uint64_t v3 = *(void *)(a1 + 32);
      id v4 = *(void **)(v3 + 352);
      if (v4)
      {
        id v5 = (os_log_s *)CSLogCategoryVT;
        if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 136315138;
          __int128 v10 = "-[CSBuiltInVoiceTrigger audioStreamProvider:numSamplesAvailableInExclave:hostTime:arrivalHostTimeToAudio"
                "Recorder:exclaveSampleCount:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s Reset first-pass VoiceTrigger in Exclave",  buf,  0xCu);
          id v4 = *(void **)(*(void *)(a1 + 32) + 352LL);
        }

        [v4 resetFirstPassVoiceTrigger];
        uint64_t v3 = *(void *)(a1 + 32);
      }
    }

    id v6 = (void *)objc_claimAutoreleasedReturnValue([(id)v3 exclaveClient]);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10013D2D8;
    void v8[3] = &unk_10022E758;
    uint64_t v7 = *(void *)(a1 + 40);
    void v8[4] = *(void *)(a1 + 32);
    void v8[5] = v7;
    [v6 processBargeInVoiceTriggerWithResult:v8];
  }

void sub_10013D2D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    uint64_t v7 = (os_log_s *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 136315650;
      unsigned int v22 = "-[CSBuiltInVoiceTrigger audioStreamProvider:numSamplesAvailableInExclave:hostTime:arrivalHostTimeToAudioReco"
            "rder:exclaveSampleCount:]_block_invoke";
      __int16 v23 = 2048;
      uint64_t v24 = v8;
      __int16 v25 = 1024;
      int v26 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s FirstPass detected VoiceTrigger at exclaveSampleCount = %llu for channel %d",  buf,  0x1Cu);
    }

    v19[0] = kVTEIfirstPassDetectedChannel;
    BOOL v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a4));
    v20[0] = v18;
    v20[1] = &off_1002398F0;
    v19[1] = kVTEIfirstPassScore;
    void v19[2] = kVTEIfirstPassStartSampleCount;
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a3));
    _OWORD v20[2] = v9;
    v19[3] = kVTEIfirstPassEndSampleCount;
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 40)));
    void v20[3] = v10;
    v19[4] = kVTEIfirstPassFireSampleCount;
    __int128 v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 40)));
    void v20[4] = v11;
    void v19[5] = kVTEIfirstPassChannelSelectionScores;
    __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) channelSelectionScores]);
    v20[5] = v12;
    v19[6] = kVTEIfirstPassChannelSelectionDelaySeconds;
    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) firstPassConfig]);
    [v13 delaySecondsForChannelSelection];
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:"));
    id v20[6] = v14;
    void v19[7] = kVTEIfirstPassMasterChannelScoreBoost;
    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) firstPassConfig]);
    [v15 masterChannelScoreBoost];
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:"));
    v20[7] = v16;
    v20[8] = &off_100238E98;
    v19[8] = kVTEIfirstPassOnsetChannel;
    v19[9] = kVTEIfirstPassOnsetScore;
    v20[9] = &off_1002398F0;
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v20,  v19,  10LL));

    [*(id *)(a1 + 32) _reportVoiceTriggerFirstPassFireFromAPWithSource:11 voiceTriggerFirstPassInfo:v17];
  }

id sub_10013D5A0(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _reset];
  if (*(void *)(a1 + 40) != -11785LL)
  {
    id result = [*(id *)(a1 + 32) _shouldEnableAPVoiceTrigger];
    if ((_DWORD)result) {
      return [*(id *)(a1 + 32) _startAPVoiceTriggerWithCompletion:0];
    }
  }

  return result;
}

void sub_10013D5F4(uint64_t a1)
{
  unsigned int v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    id v6 = "-[CSBuiltInVoiceTrigger _stopAPVoiceTrigger]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Scheduled stopAudioStream after waiting for recordingWillStartGroup",  buf,  0xCu);
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioStream]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_10013D6F0;
  v4[3] = &unk_10022E730;
  v4[4] = *(void *)(a1 + 32);
  [v3 stopAudioStreamWithOption:0 completion:v4];
}

void sub_10013D6F0(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(dispatch_queue_s **)(v6 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013D824;
  block[3] = &unk_10022F100;
  void block[4] = v6;
  dispatch_async(v7, block);
  if ((a2 & 1) == 0)
  {
    uint64_t v8 = (void *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
    {
      id v9 = v8;
      __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
      *(_DWORD *)__int128 buf = 136315394;
      __int128 v13 = "-[CSBuiltInVoiceTrigger _stopAPVoiceTrigger]_block_invoke";
      __int16 v14 = 2114;
      __int16 v15 = v10;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s Failed to stop audio stream : %{public}@",  buf,  0x16u);
    }
  }
}

id sub_10013D824(uint64_t a1)
{
  return [*(id *)(a1 + 32) _teardownSecondPassIfNeeded];
}

void sub_10013D82C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013D8B8;
  block[3] = &unk_10022F100;
  id v5 = WeakRetained;
  id v3 = WeakRetained;
  dispatch_async(v2, block);
}

void sub_10013D8B8(uint64_t a1)
{
  id v5 = -[CSPreventSystemSleepPowerAssertion initWithTimeOut:]( objc_alloc(&OBJC_CLASS___CSPreventSystemSleepPowerAssertion),  "initWithTimeOut:",  5.0);
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) exclaveClient]);
  [v2 configAOPVoiceTrigger];

  -[CSPreventSystemSleepPowerAssertion invalidate](v5, "invalidate");
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) alwaysOnProcessorController]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentAsset]);
  [v3 enableVoiceTriggerOnAlwaysOnProcessorWithAsset:v4 completion:0];
}

void sub_10013D950(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained voiceTriggerAPModeSuspendPolicy]);
  unsigned int v3 = [v2 isEnabled];

  id v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained voiceTriggerStartPolicy]);
  unsigned int v5 = [v4 isEnabled];

  id v6 = [WeakRetained _currentState];
  uint64_t v7 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 136315906;
    __int128 v11 = "-[CSBuiltInVoiceTrigger _APModeValidationTimerFired]_block_invoke";
    __int16 v12 = 1024;
    unsigned int v13 = v5;
    __int16 v14 = 1024;
    unsigned int v15 = v3;
    __int16 v16 = 1024;
    int v17 = (int)v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s APModeValidationTimer fired : VoiceTriggerEnabled(%d), shouldBeAOPMode(%d), currentState(%d)",  (uint8_t *)&v10,  0x1Eu);
  }

  if (v5)
  {
    if (v3)
    {
      if (v6)
      {
        [WeakRetained _notifyEvent:1];
        uint64_t v8 = &kCSDiagnosticReporterVoiceTriggerAPLeak;
LABEL_9:
        id v9 = (void *)objc_claimAutoreleasedReturnValue(+[CSDiagnosticReporter sharedInstance](&OBJC_CLASS___CSDiagnosticReporter, "sharedInstance"));
        [v9 submitVoiceTriggerIssueReport:*v8];
      }
    }

    else if (v6 == (id)2)
    {
      uint64_t v8 = &kCSDiagnosticReporterVoiceTriggerAPStuckInTransition;
      goto LABEL_9;
    }
  }
}

void sub_10013DAC4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _APModeValidationTimerFired];
}

void sub_10013DAF0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    id v6 = (void *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = v6;
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
      int v10 = 136315394;
      __int128 v11 = "-[CSBuiltInVoiceTrigger _startVoiceTriggerWithCompletion:]_block_invoke";
      __int16 v12 = 2114;
      unsigned int v13 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Cannot startListenPolling : %{public}@",  (uint8_t *)&v10,  0x16u);
    }
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 12LL) = 0;
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v7, a2);
  }
}

void sub_10013DC08(uint64_t a1)
{
  unsigned int v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    id v5 = "-[CSBuiltInVoiceTrigger _stopListening]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Scheduled stopAudioStream after waiting for recordingWillStartGroup",  (uint8_t *)&v4,  0xCu);
  }

  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioStream]);
  [v3 stopAudioStreamWithOption:0 completion:&stru_10022E6E0];
}

void sub_10013DCD4(id a1, BOOL a2, NSError *a3)
{
  unsigned int v3 = a3;
  if (v3)
  {
    int v4 = (void *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
    {
      id v5 = v4;
      id v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSError localizedDescription](v3, "localizedDescription"));
      int v7 = 136315394;
      uint64_t v8 = "-[CSBuiltInVoiceTrigger _stopListening]_block_invoke";
      __int16 v9 = 2114;
      int v10 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Cannot stop listening : %{public}@",  (uint8_t *)&v7,  0x16u);
    }
  }
}

uint64_t sub_10013DDC0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10013DDD4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10013DDE8(uint64_t a1, int a2)
{
  if (a2)
  {
    unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue(+[CSAudioStartStreamOption noAlertOption](&OBJC_CLASS___CSAudioStartStreamOption, "noAlertOption"));
    [*(id *)(a1 + 32) _reset];
    int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioStream]);

    if (v4)
    {
      id v5 = (os_log_s *)CSLogCategoryVT;
      if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 136315138;
        unsigned int v13 = "-[CSBuiltInVoiceTrigger _startListenWithCompletion:]_block_invoke_2";
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s Entering recordWillStartGroup",  buf,  0xCu);
      }

      dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 32) + 224LL));
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioStream]);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472LL;
      void v10[2] = sub_10013DFC8;
      v10[3] = &unk_10022E6A0;
      int v7 = *(void **)(a1 + 40);
      void v10[4] = *(void *)(a1 + 32);
      id v11 = v7;
      [v6 startAudioStreamWithOption:v3 completion:v10];
    }

    else
    {
      uint64_t v8 = *(void *)(a1 + 40);
      __int16 v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  960LL,  0LL));
      (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0LL, v9);
    }
  }

  else
  {
    (*(void (**)(void, void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), 0LL);
  }

void sub_10013DFC8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(v6 + 56);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_10013E06C;
  v10[3] = &unk_10022E678;
  void v10[4] = v6;
  char v13 = a2;
  id v11 = v5;
  id v12 = v7;
  id v9 = v5;
  dispatch_async(v8, v10);
}

uint64_t sub_10013E06C(uint64_t a1)
{
  unsigned int v2 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315138;
    uint64_t v8 = "-[CSBuiltInVoiceTrigger _startListenWithCompletion:]_block_invoke_2";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Leaving recordWillStartGroup",  (uint8_t *)&v7,  0xCu);
  }

  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 224LL));
  if (*(_BYTE *)(a1 + 56))
  {
    unsigned int v3 = *(_BYTE **)(a1 + 32);
    if (v3[8])
    {
      int v4 = (void *)objc_claimAutoreleasedReturnValue(+[CSVoiceTriggerInfo sharedInstance](&OBJC_CLASS___CSVoiceTriggerInfo, "sharedInstance"));
      [v4 setFirstPassRunningMode:1];

      [*(id *)(a1 + 32) _notifyEvent:3];
    }

    else
    {
      id v5 = (os_log_s *)CSLogCategoryVT;
      if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
      {
        int v7 = 136315138;
        uint64_t v8 = "-[CSBuiltInVoiceTrigger _startListenWithCompletion:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s didStartRecording received when VoiceTrigger is turned-off",  (uint8_t *)&v7,  0xCu);
        unsigned int v3 = *(_BYTE **)(a1 + 32);
      }

      [v3 _stopAPVoiceTrigger];
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10013E1DC(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      (*(void (**)(uint64_t, uint64_t, void))(v6 + 16))(v6, 1LL, 0LL);
    }
  }

  else
  {
    int v7 = (void *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
    {
      int v10 = v7;
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
      *(_DWORD *)id location = 136315394;
      *(void *)&location[4] = "-[CSBuiltInVoiceTrigger _startListenPollingWithInterval:completion:]_block_invoke";
      __int16 v16 = 2114;
      int v17 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s listen polling has failed : %{public}@",  location,  0x16u);
    }

    objc_initWeak((id *)location, *(id *)(a1 + 32));
    dispatch_time_t v8 = dispatch_time(0LL, (uint64_t)(*(double *)(a1 + 48) * 1000000000.0));
    id v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 56LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10013E3A4;
    block[3] = &unk_10022E600;
    objc_copyWeak(v14, (id *)location);
    v14[1] = *(id *)(a1 + 48);
    id v13 = *(id *)(a1 + 40);
    dispatch_after(v8, v9, block);

    objc_destroyWeak(v14);
    objc_destroyWeak((id *)location);
  }
}

void sub_10013E3A4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _startListenPollingWithInterval:*(void *)(a1 + 32) completion:*(double *)(a1 + 48)];
}

id sub_10013E3E4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _transitAOPModeIfNeeded:*(unsigned __int8 *)(a1 + 40)];
}

id sub_10013E3F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _transitAOPModeIfNeeded:*(unsigned __int8 *)(a1 + 40)];
}

void sub_10013E404(uint64_t a1)
{
  unsigned int v2 = (void *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 40)) {
      unsigned int v3 = @"en";
    }
    else {
      unsigned int v3 = @"dis";
    }
    int v4 = *(void **)(a1 + 32);
    id v5 = v2;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_stateName:", objc_msgSend(v4, "_currentState")));
    int v17 = 136315650;
    BOOL v18 = "-[CSBuiltInVoiceTrigger _transitVoiceTriggerStatus:force:]_block_invoke";
    __int16 v19 = 2114;
    __int128 v20 = v3;
    __int16 v21 = 2114;
    unsigned int v22 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s Received VoiceTrigger %{public}@abled at state %{public}@",  (uint8_t *)&v17,  0x20u);
  }

  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v7 + 8) != v8 || *(_BYTE *)(a1 + 41))
  {
    *(_BYTE *)(v7 + _Block_object_dispose(va, 8) = v8;
    id v9 = (os_log_s *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(*(void *)(a1 + 32) + 8LL)) {
        int v10 = @"YES";
      }
      else {
        int v10 = @"NO";
      }
      int v17 = 136315394;
      BOOL v18 = "-[CSBuiltInVoiceTrigger _transitVoiceTriggerStatus:force:]_block_invoke";
      __int16 v19 = 2114;
      __int128 v20 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s _voiceTriggerEnabled = %{public}@",  (uint8_t *)&v17,  0x16u);
    }

    int v11 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 8LL);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[CSPowerLogger sharedPowerLogger](&OBJC_CLASS___CSPowerLogger, "sharedPowerLogger"));
    id v13 = v12;
    if (v11) {
      [v12 powerLogVoiceTriggerStart];
    }
    else {
      [v12 powerLogVoiceTriggerStop];
    }

    __int16 v14 = *(id **)(a1 + 32);
    if (*(_BYTE *)(a1 + 40))
    {
      unsigned int v15 = [v14[25] isEnabled];
      __int16 v14 = *(id **)(a1 + 32);
      uint64_t v16 = v15 != 0;
    }

    else
    {
      uint64_t v16 = 4LL;
    }

    [v14 _notifyEvent:v16];
  }

id sub_10013E620(uint64_t a1, uint64_t a2)
{
  int v4 = (char *)[*(id *)(*(void *)(a1 + 32) + 104) bestEnd];
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 112LL);
  uint64_t v6 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_INFO))
  {
    int v10 = 136315651;
    int v11 = "-[CSBuiltInVoiceTrigger _setIsSecondPassRunning:]_block_invoke";
    __int16 v12 = 1025;
    *(_DWORD *)id v13 = (_DWORD)v4;
    *(_WORD *)&void v13[4] = 1025;
    *(_DWORD *)&v13[6] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s bestEnd = %{private}d, bestChannel = %{private}d",  (uint8_t *)&v10,  0x18u);
  }

  else {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 168) audioChunkFrom:&v4[-a2] to:v4 channelIdx:v5]);
  }
  int v8 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_INFO))
  {
    int v10 = 136315395;
    int v11 = "-[CSBuiltInVoiceTrigger _setIsSecondPassRunning:]_block_invoke";
    __int16 v12 = 2113;
    *(void *)id v13 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s audio chunk: %{private}@",  (uint8_t *)&v10,  0x16u);
  }

  return v7;
}

void sub_10013E794(void *a1, unint64_t a2)
{
  int v4 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[4];
    int v16 = 136315650;
    int v17 = "-[CSBuiltInVoiceTrigger _setAsset:forceExclaveToUsePreInstalledAsset:]_block_invoke";
    __int16 v18 = 2050;
    unint64_t v19 = a2;
    __int16 v20 = 2114;
    uint64_t v21 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Initializing first pass Corealis for channel : %{public}tu, with configPath : %{public}@",  (uint8_t *)&v16,  0x20u);
  }

  if (+[CSConfig inputRecordingNumberOfChannels]( &OBJC_CLASS___CSConfig,  "inputRecordingNumberOfChannels") <= a2)
  {
    uint64_t v6 = (os_log_s *)CSLogCategoryVT;
    if (!os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_FAULT)) {
      return;
    }
    uint64_t v9 = a1[4];
    int v16 = 136315650;
    int v17 = "-[CSBuiltInVoiceTrigger _setAsset:forceExclaveToUsePreInstalledAsset:]_block_invoke";
    __int16 v18 = 2048;
    unint64_t v19 = a2;
    __int16 v20 = 2114;
    uint64_t v21 = v9;
    int v8 = "%s Trying to access out-of-bound channel (index = %tu), asset configPath: %{public}@";
    goto LABEL_10;
  }

  if ((+[CSUtils supportVoiceTriggerChannelSelection]( CSUtils,  "supportVoiceTriggerChannelSelection") & 1) == 0 && [*(id *)(a1[5] + 72) count])
  {
    uint64_t v6 = (os_log_s *)CSLogCategoryVT;
    if (!os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_FAULT)) {
      return;
    }
    uint64_t v7 = a1[4];
    int v16 = 136315650;
    int v17 = "-[CSBuiltInVoiceTrigger _setAsset:forceExclaveToUsePreInstalledAsset:]_block_invoke";
    __int16 v18 = 2048;
    unint64_t v19 = a2;
    __int16 v20 = 2114;
    uint64_t v21 = v7;
    int v8 = "%s Trying to have multiple NDAPIs on platform not supporting channel selection, for channel: %tu, asset configPath: %{public}@";
LABEL_10:
    _os_log_fault_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, v8, (uint8_t *)&v16, 0x20u);
    return;
  }

  int v10 = -[CSKeywordAnalyzerNDAPI initWithConfigPath:resourcePath:]( objc_alloc(&OBJC_CLASS___CSKeywordAnalyzerNDAPI),  "initWithConfigPath:resourcePath:",  a1[4],  a1[6]);
  -[CSKeywordAnalyzerNDAPI setActiveChannel:](v10, "setActiveChannel:", a2);
  if (v10)
  {
    [*(id *)(a1[5] + 72) addObject:v10];
  }

  else
  {
    int v11 = (os_log_s *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315138;
      int v17 = "-[CSBuiltInVoiceTrigger _setAsset:forceExclaveToUsePreInstalledAsset:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%s Failed to create keyword analyzer",  (uint8_t *)&v16,  0xCu);
    }
  }

  __int16 v12 = (void *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    id v13 = *(void **)(a1[5] + 72LL);
    __int16 v14 = v12;
    id v15 = [v13 count];
    int v16 = 136315394;
    int v17 = "-[CSBuiltInVoiceTrigger _setAsset:forceExclaveToUsePreInstalledAsset:]_block_invoke";
    __int16 v18 = 2048;
    unint64_t v19 = (unint64_t)v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%s %tu first pass Corealis were created",  (uint8_t *)&v16,  0x16u);
  }
}

void sub_10013EA74(id a1, unint64_t a2)
{
  if (a2)
  {
    int v2 = a2;
    unsigned int v3 = (os_log_s *)CSLogCategoryVT;
    if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      uint64_t v5 = "-[CSBuiltInVoiceTrigger _setAsset:forceExclaveToUsePreInstalledAsset:]_block_invoke";
      __int16 v6 = 1024;
      int v7 = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Setting asset on exclave hardware failed with error %u",  (uint8_t *)&v4,  0x12u);
    }
  }

id sub_10013EB30(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setAsset:*(void *)(a1 + 40) forceExclaveToUsePreInstalledAsset:*(unsigned __int8 *)(a1 + 48)];
}

void sub_10013EB40(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    unsigned int v3 = WeakRetained;
    objc_storeWeak(WeakRetained + 4, *(id *)(a1 + 32));
    id WeakRetained = v3;
  }
}

id sub_10013EB84(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reset];
}

void sub_10013EB8C(uint64_t a1, uint64_t a2, char a3)
{
  __int16 v6 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = @"STOPPED";
    if ((_DWORD)a2) {
      int v7 = @"RUNNING";
    }
    int v9 = 136315394;
    int v10 = "-[CSBuiltInVoiceTrigger start]_block_invoke";
    __int16 v11 = 2114;
    __int16 v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger start policy changed : %{public}@",  (uint8_t *)&v9,  0x16u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _transitVoiceTriggerStatus:a2 force:a3 & 1];
}

id sub_10013EC88(uint64_t a1)
{
  return [*(id *)(a1 + 32) _stopAOPVoiceTrigger];
}

void sub_10013EC90(uint64_t a1, uint64_t a2)
{
  int v4 = (os_log_s *)CSLogCategoryVT;
  if (os_log_type_enabled(CSLogCategoryVT, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = @"RUNNING";
    if ((_DWORD)a2) {
      uint64_t v5 = @"SUSPENDING";
    }
    int v7 = 136315394;
    int v8 = "-[CSBuiltInVoiceTrigger start]_block_invoke_2";
    __int16 v9 = 2114;
    int v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger AP mode suspend policy changed : %{public}@",  (uint8_t *)&v7,  0x16u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _transitAOPModeIfNeededAsync:a2];
}

void sub_10013ED80(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue( +[CSPhoneCallStateMonitorFactory phoneCallStateMonitor]( &OBJC_CLASS___CSPhoneCallStateMonitorFactory,  "phoneCallStateMonitor"));
  *(void *)(*(void *)(a1 + 32) + 272) = [v2 phoneCallState];

  id v3 = (id)objc_claimAutoreleasedReturnValue(+[CSAttSiriStateMonitor sharedInstance](&OBJC_CLASS___CSAttSiriStateMonitor, "sharedInstance"));
  *(void *)(*(void *)(a1 + 32) + 28+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7, 0) = [v3 getAttendingState];
}

void sub_10013EDEC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(dispatch_queue_s **)(v3 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013F1CC;
  block[3] = &unk_10022E458;
  void block[4] = v3;
  void block[5] = a2;
  char v6 = a3;
  dispatch_async(v4, block);
}

void sub_10013EE48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(dispatch_queue_s **)(v2 + 56);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_10013F1C0;
  v4[3] = &unk_10022F020;
  v4[4] = v2;
  void v4[5] = a2;
  dispatch_async(v3, v4);
}

void sub_10013EEA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(dispatch_queue_s **)(v2 + 56);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_10013F1B4;
  v4[3] = &unk_10022F020;
  v4[4] = v2;
  void v4[5] = a2;
  dispatch_async(v3, v4);
}

void sub_10013EEF8(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(dispatch_queue_s **)(v2 + 56);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  void v4[2] = sub_10013F198;
  v4[3] = &unk_10022EFA8;
  v4[4] = v2;
  char v5 = a2;
  dispatch_async(v3, v4);
}

id sub_10013EF54(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v10[0] = 0LL;
  v10[1] = v10;
  void v10[2] = 0x2020000000LL;
  v10[3] = 3LL;
  uint64_t v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013F074;
  block[3] = &unk_10022EF80;
  __int16 v9 = v10;
  id v3 = WeakRetained;
  id v8 = v3;
  dispatch_sync(v2, block);

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10013F0A4;
  v6[3] = &unk_10022E4F8;
  void v6[4] = v10;
  id v4 = [[CSStateCaptureOptions alloc] initWithMutableBuilder:v6];

  _Block_object_dispose(v10, 8);
  return v4;
}

void sub_10013F05C(_Unwind_Exception *a1)
{
}

id sub_10013F074(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _currentState];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = result;
  return result;
}

void sub_10013F0A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)));
  [v7 setValue:v4 forKey:@"FirstPassState"];

  char v5 = (void *)objc_claimAutoreleasedReturnValue( +[CSBuiltinSpeakerStateMonitor sharedInstance]( &OBJC_CLASS___CSBuiltinSpeakerStateMonitor,  "sharedInstance"));
  char v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v5 currentBuiltinSpeakerState]));
  [v7 setValue:v6 forKey:@"BuiltInSpeakerState"];

  [v3 setStateData:v7];
  [v3 setStateDataTitle:@"CoreSpeech-FirstPassStateCapture"];
}

id sub_10013F198(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 16LL) = *(_BYTE *)(a1 + 40);
  return [*(id *)(a1 + 32) _forceUpdateCarPlayEndpointWithJarvisConnected:*(unsigned __int8 *)(a1 + 40)];
}

uint64_t sub_10013F1B4(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 192LL) = *(void *)(result + 40);
  return result;
}

id sub_10013F1C0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _receivedHearstRoutedEvent:*(void *)(a1 + 40)];
}

id sub_10013F1CC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateCurrentSplitterState:*(void *)(a1 + 40) shouldDisableSpeakerVerificationInSplitterMode:*(unsigned __int8 *)(a1 + 48)];
}

id sub_10013F710(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _notifyObserver:a2];
}

id sub_10013F71C(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 16LL) = 0LL;
  return [*(id *)(a1 + 32) _didInstalledNewAsset];
}

void sub_10013F774(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSSpeakerRecognitionAssetDownloadMonitor);
  uint64_t v2 = (void *)qword_1002801E8;
  qword_1002801E8 = (uint64_t)v1;
}

uint64_t start()
{
  uint64_t v0 = objc_autoreleasePoolPush();
  if ((_set_user_dir_suffix("com.apple.corespeechd") & 1) == 0)
  {
    char v5 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      char v6 = v5;
      int v7 = *__error();
      int v8 = 136315394;
      __int16 v9 = "main";
      __int16 v10 = 1024;
      int v11 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s _set_user_dir_suffix failed: %{darwin.errno}d",  (uint8_t *)&v8,  0x12u);
    }

    exit(1);
  }

  id v1 = NSTemporaryDirectory();
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSHostDaemon sharedDaemon](&OBJC_CLASS___CSHostDaemon, "sharedDaemon"));
  [v2 didLaunch];
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](&OBJC_CLASS___NSRunLoop, "mainRunLoop"));
  [v3 run];

  objc_autoreleasePoolPop(v0);
  return 0LL;
}

id sub_10013FCB4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _notifyObserver:a2];
}

id sub_10013FCC0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _didReceiveNewAdBlockerAssetMetaData];
}

void sub_10013FD08(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___CSAdBlockerAssetMetaUpdateMonitor);
  uint64_t v2 = (void *)qword_1002801F8;
  qword_1002801F8 = (uint64_t)v1;
}

void sub_100140A48(void *a1, void *a2)
{
  id v3 = (void *)a1[4];
  id v4 = a2;
  BOOL v5 = [v3 allowMph]
  char v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = a1[5];
    uint64_t v8 = a1[6];
    int v9 = 136315907;
    __int16 v10 = "-[CSPhraseNDEAPIScorer _rtModelFromAsset:requestOptions:forSiriLanguage:withPhraseCount:]_block_invoke";
    __int16 v11 = 2113;
    uint64_t v12 = v7;
    __int16 v13 = 1024;
    BOOL v14 = v5;
    __int16 v15 = 2048;
    uint64_t v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Device and locale:%{private}@ supports multiphrase detection:%d with unique phrase count:%lu)",  (uint8_t *)&v9,  0x26u);
  }

  [v4 setAllowMph:v5];
  [v4 setSiriLocale:a1[5]];
}

LABEL_61:
    double v62 = objc_loadWeakRetained((id *)&self->_delegate);
    double v63 = objc_opt_respondsToSelector( v62,  "audioEngineBufferAvailable:audioStreamHandleId:buffer:remoteVAD:atTime:isFileLoadedBuffer:");

    if ((v63 & 1) != 0)
    {
      double v64 = objc_loadWeakRetained((id *)&self->_delegate);
      objc_msgSend( v64,  "audioEngineBufferAvailable:audioStreamHandleId:buffer:remoteVAD:atTime:isFileLoadedBuffer:",  self,  -[CSAudioInjectionEngine audioStreamHandleId](self, "audioStreamHandleId"),  v72,  0,  mach_absolute_time(),  v71);
    }

    goto LABEL_64;
  }

void sub_100142364(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315138;
    uint64_t v7 = "-[CSAudioInjectionEngine stopAudioStream]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Calling stopAudioStream",  (uint8_t *)&v6,  0xCu);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + ++*(void *)(*(void *)(result + 32) + 8LL) = 0;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));
  char v4 = objc_opt_respondsToSelector(WeakRetained, "audioEngineDidStopRecord:audioStreamHandleId:reason:");

  if ((v4 & 1) != 0)
  {
    id v5 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));
    objc_msgSend( v5,  "audioEngineDidStopRecord:audioStreamHandleId:reason:",  *(void *)(a1 + 32),  objc_msgSend(*(id *)(a1 + 32), "audioStreamHandleId"),  0);
  }

void sub_100142478(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + ++*(void *)(*(void *)(result + 32) + 8LL) = 1;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));
  char v3 = objc_opt_respondsToSelector(WeakRetained, "audioEngineDidStartRecord:audioStreamHandleId:successfully:error:");

  if ((v3 & 1) != 0)
  {
    id v4 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));
    objc_msgSend( v4,  "audioEngineDidStartRecord:audioStreamHandleId:successfully:error:",  *(void *)(a1 + 32),  objc_msgSend(*(id *)(a1 + 32), "audioStreamHandleId"),  1,  0);
  }

uint64_t sub_100142524(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 8LL);
  return result;
}

uint64_t sub_100142538(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10014254C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100142560(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 80LL);
  id v3 = objc_retainBlock(*(id *)(a1 + 48));
  [v2 addObject:v3];

  id v4 = *(void **)(*(void *)(a1 + 32) + 88LL);
  id v5 = objc_retainBlock(*(id *)(a1 + 56));
  [v4 addObject:v5];
}

void sub_1001425E0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _readAudioBufferAndFeed];
}

void sub_10014260C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 96LL);
    int v8 = 136315394;
    int v9 = "-[CSAudioInjectionEngine stop]_block_invoke";
    __int16 v10 = 2112;
    uint64_t v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Stopping AudioInjectionEngine : %@",  (uint8_t *)&v8,  0x16u);
  }

  dispatch_source_cancel(*(dispatch_source_t *)(*(void *)(a1 + 32) + 56LL));
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v4 + 8))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v4 + 40));
    char v6 = objc_opt_respondsToSelector(WeakRetained, "audioEngineDidStopRecord:audioStreamHandleId:reason:");

    uint64_t v4 = *(void *)(a1 + 32);
    if ((v6 & 1) != 0)
    {
      id v7 = objc_loadWeakRetained((id *)(v4 + 40));
      objc_msgSend( v7,  "audioEngineDidStopRecord:audioStreamHandleId:reason:",  *(void *)(a1 + 32),  objc_msgSend(*(id *)(a1 + 32), "audioStreamHandleId"),  3);

      uint64_t v4 = *(void *)(a1 + 32);
    }
  }

  *(_BYTE *)(v4 + _Block_object_dispose((const void *)(v1 - 80), 8) = 0;
}

id sub_100142748(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startAudioFeedingTimer];
}

void sub_100142EC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100143168( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_1001435F0(void *a1)
{
  uint64_t v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = a1[5];
    int v5 = *(unsigned __int8 *)(v3 + 10);
    LODWORD(v3) = *(unsigned __int8 *)(v3 + 8);
    int v13 = 136315906;
    BOOL v14 = "-[CSAttSiriContinuityEndDetector didCompleteRecognitionTaskWithStatistics:requestId:endpointMode:error:]_block_invoke";
    __int16 v15 = 1024;
    *(_DWORD *)uint64_t v16 = v5;
    *(_WORD *)&void v16[4] = 1024;
    *(_DWORD *)&v16[6] = v3;
    __int16 v17 = 2112;
    uint64_t v18 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s ContinuityEndDelivered:%u continuityEndDeliveryNeeded:%u RecognitionError:%@",  (uint8_t *)&v13,  0x22u);
  }

  char v6 = (_BYTE *)a1[4];
  if (v6[8]) {
    BOOL v7 = a1[5] == 0LL;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7 && !v6[10])
  {
    int v8 = -[CSAttSiriRecognitionCompletionCachedInfo initWithRequestId:completionStatistics:endpointMode:completionError:]( objc_alloc(&OBJC_CLASS___CSAttSiriRecognitionCompletionCachedInfo),  "initWithRequestId:completionStatistics:endpointMode:completionError:",  a1[7],  a1[6],  a1[8],  a1[5]);
    uint64_t v9 = a1[4];
    __int16 v10 = *(void **)(v9 + 64);
    *(void *)(v9 + 64) = v8;

    uint64_t v11 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1[4] + 64LL);
      int v13 = 136315394;
      BOOL v14 = "-[CSAttSiriContinuityEndDetector didCompleteRecognitionTaskWithStatistics:requestId:endpointMode:error:]_block_invoke";
      __int16 v15 = 2112;
      *(void *)uint64_t v16 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s _cachedRecognitionCompletionInfo:%@",  (uint8_t *)&v13,  0x16u);
    }
  }

  else
  {
    objc_msgSend(v6, "_deliverRecognitionCompletionWithStatistics:requestId:endpointMode:error:", a1[6], a1[7], a1[8]);
  }

void sub_100143788(id a1)
{
  id v1 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    uint64_t v3 = "-[CSAttSiriContinuityEndDetector didReceiveTRPCandidateExecutionReady:withTrpId:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v2, 0xCu);
  }

void sub_10014382C(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) lastTRPCandidateId]);
  [v2 setCachedTRPId:v3];

  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestId]);
  [v4 setRequestId:v5];
}

Class sub_100143898(uint64_t a1)
{
  id v5 = 0LL;
  int v2 = (const char *)&qword_100280000;
  if (!qword_100280218)
  {
    __int128 v6 = off_10022E9B0;
    uint64_t v7 = 0LL;
    qword_100280218 = _sl_dlopen(&v6, &v5);
    uint64_t v3 = v5;
    if (!qword_100280218)
    {
      abort_report_np("%s", v5);
      goto LABEL_7;
    }

    if (v5) {
      goto LABEL_8;
    }
  }

  while (1)
  {
    int v2 = "SMTContinuityEnd";
    Class result = objc_getClass("SMTContinuityEnd");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
      break;
    }
LABEL_7:
    uint64_t v3 = (char *)abort_report_np("Unable to find class %s", v2);
LABEL_8:
    free(v3);
  }

  qword_100280210 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

void sub_10014399C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    uint64_t v4 = "-[CSAttSiriContinuityEndDetector _setupContinuityDetectorTimer]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Continuity detector timer fired",  (uint8_t *)&v3,  0xCu);
  }

  [WeakRetained _handleContinuityDetectorTimeout];
}

void sub_100143A58(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recognitionTaskCompletionReceivers]);
    unsigned __int8 v3 = [v2 containsObject:*(void *)(a1 + 32)];

    if ((v3 & 1) == 0)
    {
      id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recognitionTaskCompletionReceivers]);
      [v4 addObject:*(void *)(a1 + 32)];
    }
  }

void sub_100143AE0(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) continuityDetectionReceivers]);
    unsigned __int8 v3 = [v2 containsObject:*(void *)(a1 + 32)];

    if ((v3 & 1) == 0)
    {
      id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) continuityDetectionReceivers]);
      [v4 addObject:*(void *)(a1 + 32)];
    }
  }

void sub_100143B68(uint64_t a1)
{
  int v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    int v13 = 136315394;
    BOOL v14 = "-[CSAttSiriContinuityEndDetector setUpWithContinuityEndUsage:]_block_invoke";
    __int16 v15 = 1024;
    int v16 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s continuityEndMessageNeeded:%u",  (uint8_t *)&v13,  0x12u);
  }

  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 24);
  if (v5)
  {
    [v5 cancelTimer];
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void **)(v6 + 24);
    *(void *)(v6 + 24) = 0LL;

    uint64_t v4 = *(void *)(a1 + 32);
  }

  int v8 = *(void **)(v4 + 64);
  *(void *)(v4 + 64) = 0LL;

  *(_BYTE *)(*(void *)(a1 + 32) + 1+[CoreEmbeddedSpeechRecognizer compileAllAssetsWithType:completion:]( &OBJC_CLASS___CoreEmbeddedSpeechRecognizer,  "compileAllAssetsWithType:completion:",  7LL, 0LL) = 0;
  uint64_t v9 = *(void *)(a1 + 32);
  __int16 v10 = *(void **)(v9 + 56);
  *(void *)(v9 + 56) = 0LL;

  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void **)(v11 + 48);
  *(void *)(v11 + 4_Block_object_dispose(va, 8) = 0LL;

  *(_BYTE *)(*(void *)(a1 + 32) + ++*(void *)(*(void *)(result + 32) + 8LL) = *(_BYTE *)(a1 + 40);
}

id sub_100143C84(uint64_t a1)
{
  int v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 9LL);
    int v6 = 136315394;
    uint64_t v7 = "-[CSAttSiriContinuityEndDetector start]_block_invoke";
    __int16 v8 = 1024;
    int v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s configureContinuityWindowTimeout :%u",  (uint8_t *)&v6,  0x12u);
  }

  uint64_t v4 = *(_BYTE **)(a1 + 32);
  if (v4[9]) {
    return [v4 _setupContinuityDetectorTimer];
  }
  else {
    return [v4 _notifyContinuityEnd];
  }
}

void sub_100143D58(uint64_t a1)
{
  int v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136315138;
    __int16 v10 = "-[CSAttSiriContinuityEndDetector configureTimeout:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v9, 0xCu);
  }

  float v3 = *(float *)(a1 + 40);
  if (v3 >= 0.0 && v3 <= 3.0)
  {
    *(float *)(*(void *)(a1 + 32) + 12LL) = v3;
    int v6 = -[CSAttSiriTimer initWithQueue:](objc_alloc(&OBJC_CLASS___CSAttSiriTimer), "initWithQueue:", 0LL);
    uint64_t v7 = *(void *)(a1 + 32);
    __int16 v8 = *(void **)(v7 + 24);
    *(void *)(v7 + 24) = v6;

    *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 1;
  }

  else
  {
    id v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      __int16 v10 = "-[CSAttSiriContinuityEndDetector configureTimeout:]_block_invoke";
      __int16 v11 = 2048;
      double v12 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Invalid timeout duration :%f",  (uint8_t *)&v9,  0x16u);
    }
  }

BOOL sub_100143FC8(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSHomePodSettingsMonitor sharedInstance](&OBJC_CLASS___CSHomePodSettingsMonitor, "sharedInstance"));
  unsigned __int8 v2 = [v1 shouldVoiceTriggerRun];

  if ((v2 & 1) == 0)
  {
    float v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      int v6 = "-[CSVoiceTriggerEnabledPolicyHorseman _addVoiceTriggerEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s HomePodSettings have turned off VoiceTrigger",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

BOOL sub_100144094(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue( +[CSVoiceTriggerEnabledMonitor sharedInstance]( &OBJC_CLASS___CSVoiceTriggerEnabledMonitor,  "sharedInstance"));
  unsigned __int8 v2 = [v1 isEnabled];

  if ((v2 & 1) == 0)
  {
    float v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      int v6 = "-[CSVoiceTriggerEnabledPolicyHorseman _addVoiceTriggerEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Non-AOP VoiceTrigger cannot be turned on since VoiceTrigger is disabled",  (uint8_t *)&v5,  0xCu);
    }
  }

  return v2;
}

BOOL sub_100144160(id a1)
{
  unsigned __int8 v1 = +[CSUtils isLocalVoiceTriggerAvailable](&OBJC_CLASS___CSUtils, "isLocalVoiceTriggerAvailable");
  if ((v1 & 1) == 0)
  {
    unsigned __int8 v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      int v5 = "-[CSVoiceTriggerEnabledPolicyHorseman _addVoiceTriggerEnabledConditions]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Non-AOP VoiceTrigger cannot be turned on since voiceTriggerInCoreSpeech is NO",  (uint8_t *)&v4,  0xCu);
    }
  }

  return v1;
}

id sub_10014470C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _notifyObserver:a2 withSoftwareUpdateCheckingRunning:*(unsigned __int8 *)(a1 + 40)];
}

id sub_100144720(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _notifyObserver:a2 withSoftwareUpdateCheckingRunning:*(unsigned __int8 *)(a1 + 40)];
}

id sub_100144734(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 12) = [*(id *)(a1 + 32) _checkSoftwareUpdateCheckingState];
  return [*(id *)(a1 + 32) _didReceiveSoftwareUpdateCheckingStateChanged:*(unsigned __int8 *)(*(void *)(a1 + 32) + 12)];
}

void sub_1001447B0(id a1)
{
  unsigned __int8 v1 = objc_alloc_init(&OBJC_CLASS___CSSoftwareUpdateCheckingMonitor);
  unsigned __int8 v2 = (void *)qword_100280220;
  qword_100280220 = (uint64_t)v1;
}

id sub_100145624(uint64_t a1)
{
  return [*(id *)(a1 + 32) _logAudioMetaData:*(void *)(a1 + 40)];
}

id sub_100145630(uint64_t a1)
{
  return [*(id *)(a1 + 32) stop];
}

void sub_100145638(uint64_t a1)
{
  unsigned __int8 v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315394;
    int v5 = "-[CSIntuitiveConversationLogger setMhId:]_block_invoke";
    __int16 v6 = 2112;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s setMhId:%@", (uint8_t *)&v4, 0x16u);
  }

  objc_storeStrong((id *)(*(void *)(a1 + 40) + 48LL), *(id *)(a1 + 32));
}

void sub_1001456FC(id *a1)
{
  unsigned __int8 v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136315138;
    __int16 v10 = "-[CSIntuitiveConversationLogger startLoggingWithAudioRecordContext:requestId:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v9, 0xCu);
  }

  uint64_t v3 = a1[4];
  if (!v3[9])
  {
    v3[9] = 1;
    [a1[4] _handleStopLogging];
    uint64_t v3 = a1[4];
  }

  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 _timeStampString]);
  int v5 = a1[4];
  __int16 v6 = (void *)v5[13];
  v5[13] = v4;

  *((void *)a1[4] + 17) = mach_absolute_time();
  uint64_t v7 = a1[4];
  __int16 v8 = (void *)v7[6];
  void v7[6] = 0LL;

  *((void *)a1[4] + 15) = 0LL;
  *((void *)a1[4] + 16) = 0LL;
  objc_storeStrong((id *)a1[4] + 7, a1[5]);
  objc_storeStrong((id *)a1[4] + 12, a1[6]);
  *((_BYTE *)a1[4] + 9) = 0;
  *((void *)a1[4] + 10) = 0LL;
}

void sub_100145834(uint64_t a1)
{
  unsigned __int8 v2 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    int v5 = "-[CSIntuitiveConversationLogger stop]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v4, 0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v3 + 9))
  {
    *(_BYTE *)(v3 + 9) = 1;
    [*(id *)(a1 + 32) _handleStopLogging];
  }

void sub_1001458F8(id a1)
{
  unsigned __int8 v1 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    uint64_t v3 = "-[CSIntuitiveConversationLogger start]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "%s ", (uint8_t *)&v2, 0xCu);
  }

void sub_100145CA8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
  char v3 = objc_opt_respondsToSelector(WeakRetained, "speechStartDetectedWithHostTime:audioRecordType:audioRecordDeviceId:");

  if ((v3 & 1) != 0)
  {
    id v4 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
    id v5 = [*(id *)(a1 + 40) triggerMachTime];
    id v6 = [*(id *)(a1 + 40) audioRecordType];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deviceId]);
    [v4 speechStartDetectedWithHostTime:v5 audioRecordType:v6 audioRecordDeviceId:v7];
  }

  id v8 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
  char v9 = objc_opt_respondsToSelector(v8, "speechStartDetectedWithShouldDuckTTS:");

  if ((v9 & 1) != 0)
  {
    id v10 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
    objc_msgSend( v10,  "speechStartDetectedWithShouldDuckTTS:",  objc_msgSend( *(id *)(a1 + 32),  "_shouldDuckTTSAtSpeechStartDetected:",  objc_msgSend(*(id *)(a1 + 40), "audioRecordType")));
  }

  id v11 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
  char v12 = objc_opt_respondsToSelector( v11,  "speechRecognizerReadyForNewTurnWithSpeechStartDetectedAtHostTime:audioRecordType:audioRecordDeviceId:");

  if ((v12 & 1) != 0)
  {
    id v16 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
    id v13 = [*(id *)(a1 + 40) triggerMachTime];
    id v14 = [*(id *)(a1 + 40) audioRecordType];
    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deviceId]);
    [v16 speechRecognizerReadyForNewTurnWithSpeechStartDetectedAtHostTime:v13 audioRecordType:v14 audioRecordDeviceId:v15];
  }

void sub_100145E48(uint64_t a1)
{
  int v2 = (void *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    id v4 = v2;
    else {
      id v5 = *(&off_10022BD50 + v3 - 1);
    }
    id v6 = v5;
    int v9 = 136315394;
    id v10 = "-[CSAttendingAnnounceHandler attendingStoppedWithReason:]_block_invoke";
    __int16 v11 = 2112;
    char v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s [reason = %@]", (uint8_t *)&v9, 0x16u);
  }

  if ((unint64_t)(*(void *)(a1 + 40) - 3LL) <= 2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  2107LL,  0LL));
    [WeakRetained localAttendingStoppedUnexpectedlyWithError:v8];
  }

void sub_100146830(_Unwind_Exception *a1)
{
}

uint64_t sub_100146E68(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v7 = v6 >> 1;
  id v8 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v15 = *a2;
    int v16 = 136315650;
    __int16 v17 = "-[CSAudioConverter _convertBufferedLPCM:allowPartial:timestamp:arrivalTimestampToAudioRecorder:]_block_invoke";
    __int16 v18 = 1026;
    unsigned int v19 = v15;
    __int16 v20 = 1026;
    unsigned int v21 = v6 >> 1;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%s Got asked for %{public}u packets, have %{public}u",  (uint8_t *)&v16,  0x18u);
  }

  *(_DWORD *)(a3 + _Block_object_dispose((const void *)(v1 - 192), 8) = 1;
  if (v6 >= 2 && ((unsigned int v9 = *a2, *(_BYTE *)(a1 + 48)) || v7 >= v9))
  {
    if (v7 >= v9)
    {
      id v14 = (char *)[*(id *)(a1 + 32) mutableBytes];
      uint64_t result = 0LL;
      *(void *)(a3 + 16) = &v14[*(int *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)];
      LODWORD(v14) = *a2;
      *(_DWORD *)(a3 + 12) = 2 * *a2;
      uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8LL);
      unsigned int v13 = *(_DWORD *)(v12 + 24) + 2 * (_DWORD)v14;
    }

    else
    {
      *a2 = v7;
      __int16 v11 = (char *)[*(id *)(a1 + 32) mutableBytes];
      uint64_t result = 0LL;
      *(void *)(a3 + 16) = &v11[*(int *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)];
      *(_DWORD *)(a3 + 12) = v6 & 0xFFFFFFFE;
      uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8LL);
      unsigned int v13 = *(_DWORD *)(v12 + 24) + (v6 & 0xFFFFFFFE);
    }

    *(_DWORD *)(v12 + 24) = v13;
  }

  else
  {
    *a2 = 0;
    *(void *)(a3 + 16) = 0LL;
    uint64_t result = 1836086393LL;
    *(_DWORD *)(a3 + 12) = 0;
  }

  return result;
}

uint64_t sub_100147034(int a1, uint64_t a2, uint64_t a3, uint64_t a4, id a5)
{
  id v8 = (uint64_t (**)(id, uint64_t, uint64_t, uint64_t))objc_retainBlock(a5);
  uint64_t v9 = v8[2](v8, a2, a3, a4);

  return v9;
}

uint64_t sub_100147750(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(*(void *)(a1 + 32) + 8LL));
}

uint64_t sub_10014776C(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = *(void *)(*(void *)(result + 32) + 8LL);
  return result;
}

id sub_100147788(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 40)) {
    uint64_t v2 = 1LL;
  }
  else {
    uint64_t v2 = 2LL;
  }
  return [*(id *)(a1 + 32) _notifyObserver:a2 mediaIsPlayingState:v2];
}

void sub_1001477A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 16LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100147860;
  v3[3] = &unk_10022EB08;
  objc_copyWeak(&v4, &location);
  MRMediaRemoteGetNowPlayingApplicationPlaybackState(v2, v3);
  objc_destroyWeak(&v4);
  objc_destroyWeak(&location);
}

void sub_100147844(_Unwind_Exception *a1)
{
}

void sub_100147860(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (a2 == 1) {
    uint64_t v5 = 1LL;
  }
  else {
    uint64_t v5 = 2LL;
  }
  *((void *)WeakRetained + 1) = v5;
  unsigned int v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v9 = "-[CSMediaPlayingMonitor initializeMediaPlayingState]_block_invoke_2";
    __int16 v10 = 2050;
    uint64_t v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Get initial state from MediaRemote: media is on playing state %{public}ld.",  buf,  0x16u);
  }

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100147980;
  v7[3] = &unk_10022EED0;
  void v7[4] = v4;
  [v4 enumerateObserversInQueue:v7];
}

id sub_100147980(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _notifyObserver:a2 mediaIsPlayingState:*(void *)(*(void *)(a1 + 32) + 8)];
}

void sub_1001479F4(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSMediaPlayingMonitor);
  uint64_t v2 = (void *)qword_100280230;
  qword_100280230 = (uint64_t)v1;
}

void sub_100148268(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v3 getOnDeviceCompilationCacheDirectory]);
  +[CSFOnDeviceCachedIrPurgingUtils purgeCachedIrForTrialAssetExcludingCurrentAsset:baseCachedIrDir:]( &OBJC_CLASS___CSFOnDeviceCachedIrPurgingUtils,  "purgeCachedIrForTrialAssetExcludingCurrentAsset:baseCachedIrDir:",  v1,  v2);
}

void sub_1001482D4(id a1)
{
}

void sub_1001482E0(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
  id v4 = (id)objc_claimAutoreleasedReturnValue([v1 getOnDeviceCompilationCacheDirectory]);

  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 getLegacyOnDeviceCompilationCacheDirectory]);

  +[CSFOnDeviceCachedIrPurgingUtils cleanUpPreviousBuildBnnsIrInCachedIrDir:]( &OBJC_CLASS___CSFOnDeviceCachedIrPurgingUtils,  "cleanUpPreviousBuildBnnsIrInCachedIrDir:",  v4);
  +[CSFOnDeviceCachedIrPurgingUtils cleanUpLegacyCachedIrDir:]( &OBJC_CLASS___CSFOnDeviceCachedIrPurgingUtils,  "cleanUpLegacyCachedIrDir:",  v3);
}

void sub_1001483A8(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CSOnDeviceCachedIrPurgingHandler);
  uint64_t v2 = (void *)qword_100280240;
  qword_100280240 = (uint64_t)v1;
}

id sub_10014853C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  if ([v2 fileExistsAtPath:v1])
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfFile:](&OBJC_CLASS___NSData, "dataWithContentsOfFile:", v1));
    if (v3)
    {
      id v8 = 0LL;
      id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  v3,  0LL,  &v8));
      id v5 = v8;
      if (!v5)
      {

        goto LABEL_8;
      }

      unsigned int v6 = v5;
      NSLog(@"Cannot parse to JSON");
    }
  }

  else
  {
    NSLog(@"Cannot find the file");
  }

  id v4 = 0LL;
LABEL_8:

  return v4;
}

void sub_100149340(_Unwind_Exception *a1)
{
}

void sub_100149520(_Unwind_Exception *a1)
{
}

id sub_100149E44(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleClientRecordStateDidChange:*(unsigned __int8 *)(a1 + 48) eventUUID:*(void *)(a1 + 40)];
}

id sub_100149E54(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleClientRecordStateDidChange:0 eventUUID:*(void *)(a1 + 40)];
}

id *sub_100149E64(id *result)
{
  if (*((_BYTE *)result + 48)) {
    return (id *)[result[4] _handleClientRecordStateDidChange:1 eventUUID:result[5]];
  }
  return result;
}

void sub_100149E80(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained pendingRecordingStopUUID]);
  unsigned int v5 = [v4 isEqualToString:*(void *)(a1 + 32)];

  if (v5)
  {
    id v6 = objc_loadWeakRetained(v2);
    [v6 setIsAssistantClientConsideredAsRecord:0];

    id v7 = objc_loadWeakRetained(v2);
    [v7 notifyCallbackWithOption:0];

    id v8 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = v8;
      id v10 = objc_loadWeakRetained(v2);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 pendingRecordingStopUUID]);
      int v17 = 136315394;
      __int16 v18 = "-[CSVoiceTriggerAPModeSuspendPolicyIOS _handleClientRecordStateDidChange:eventUUID:]_block_invoke";
      __int16 v19 = 2114;
      __int16 v20 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s Notifying Siri Client record state change to STOPPED, eventUUID = %{public}@",  (uint8_t *)&v17,  0x16u);
    }
  }

  else
  {
    uint64_t v12 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v13 = v12;
      id v14 = objc_loadWeakRetained(v2);
      unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue([v14 pendingRecordingStopUUID]);
      uint64_t v16 = *(void *)(a1 + 32);
      int v17 = 136315650;
      __int16 v18 = "-[CSVoiceTriggerAPModeSuspendPolicyIOS _handleClientRecordStateDidChange:eventUUID:]_block_invoke";
      __int16 v19 = 2114;
      __int16 v20 = v15;
      __int16 v21 = 2114;
      uint64_t v22 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%s There is no pending event to timeout : pendingRecordingStopUUID = %{public}@, timeoutTargetUUID = %{public}@",  (uint8_t *)&v17,  0x20u);
    }
  }

uint64_t sub_10014A074(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriEnabledMonitor sharedInstance](&OBJC_CLASS___CSSiriEnabledMonitor, "sharedInstance"));
  unsigned int v3 = [v2 isEnabled];

  if (!v3) {
    return 1LL;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v5 = [WeakRetained _isInPhoneCallStateWithHSPhoneCallCapableRoute];

  if (!v5) {
    return 1LL;
  }
  id v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  BOOL v7 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v7)
  {
    int v9 = 136315138;
    id v10 = "-[CSVoiceTriggerAPModeSuspendPolicyIOS _addConditionsForIOSAOP]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Turn on AP mode since device is hands free state with HS phone-call capable route connected",  (uint8_t *)&v9,  0xCu);
    return 0LL;
  }

  return result;
}

uint64_t sub_10014A178(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[CSAlwaysOnProcessorStateMonitor sharedInstance]( &OBJC_CLASS___CSAlwaysOnProcessorStateMonitor,  "sharedInstance"));
  unsigned int v3 = [v2 isEnabled];

  if ((v3 & 1) == 0)
  {
    id v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315138;
      int v9 = "-[CSVoiceTriggerAPModeSuspendPolicyIOS _addConditionsForIOSAOP]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s AOP Listening is disabled",  (uint8_t *)&v8,  0xCu);
    }
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v6 = [WeakRetained _isAudioRouteIneligibleForAP];

  return v6 | v3;
}

uint64_t sub_10014A268(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v2 = [WeakRetained _isAudioRouteIneligibleForAP];

  if (v2)
  {
    unsigned int v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315138;
      id v10 = "-[CSVoiceTriggerAPModeSuspendPolicyIOS _addConditionsForIOSAOP]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Audio route ineligible for AP, we should remain in AOP mode",  (uint8_t *)&v9,  0xCu);
    }

    return 1LL;
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[CSAttSiriStateMonitor sharedInstance](&OBJC_CLASS___CSAttSiriStateMonitor, "sharedInstance"));
  unsigned int v5 = [v4 isAttending];

  if (!v5) {
    return 1LL;
  }
  unsigned int v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  BOOL v7 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v7)
  {
    int v9 = 136315138;
    id v10 = "-[CSVoiceTriggerAPModeSuspendPolicyIOS _addConditionsForIOSAOP]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Turn on AP mode since siri is in attending state",  (uint8_t *)&v9,  0xCu);
    return 0LL;
  }

  return result;
}

uint64_t sub_10014A3BC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned __int8 v2 = [WeakRetained _isAudioRouteIneligibleForAP];

  if ((v2 & 1) != 0) {
    return 1LL;
  }
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue(+[CSAudioRouteChangeMonitor sharedInstance](&OBJC_CLASS___CSAudioRouteChangeMonitor, "sharedInstance"));
  unsigned int v4 = [v3 jarvisConnected];

  if (v4)
  {
    unsigned int v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315138;
      uint64_t v11 = "-[CSVoiceTriggerAPModeSuspendPolicyIOS _addConditionsForIOSAOP]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger AOP mode is turned on since jarvis is connected",  (uint8_t *)&v10,  0xCu);
    }

    return 1LL;
  }

  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue( +[CSAudioStreamActivityMonitor sharedInstance]( &OBJC_CLASS___CSAudioStreamActivityMonitor,  "sharedInstance"));
  unsigned int v8 = [v7 hasNonVoiceTriggerStreamsOrStreamHoldersActive];

  if (v8)
  {
    int v9 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315138;
      uint64_t v11 = "-[CSVoiceTriggerAPModeSuspendPolicyIOS _addConditionsForIOSAOP]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger AOP mode cannot be turned on since other non-built-in VoiceTrigger clients are running",  (uint8_t *)&v10,  0xCu);
    }
  }

  return v8 ^ 1;
}

BOOL sub_10014A528(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue( +[CSCommandControlStreamEventMonitor sharedInstance]( &OBJC_CLASS___CSCommandControlStreamEventMonitor,  "sharedInstance"));
  unsigned int v2 = [v1 isStreaming];

  unsigned int v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315394;
    BOOL v7 = "-[CSVoiceTriggerAPModeSuspendPolicyIOS _addConditionsForIOSAOP]_block_invoke";
    __int16 v8 = 1026;
    unsigned int v9 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s CommandControl Streaming = %{public}d",  (uint8_t *)&v6,  0x12u);
  }

  if (v2)
  {
    unsigned int v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      BOOL v7 = "-[CSVoiceTriggerAPModeSuspendPolicyIOS _addConditionsForIOSAOP]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Turn on AP mode since command control is streaming",  (uint8_t *)&v6,  0xCu);
    }
  }

  return v2 ^ 1;
}

uint64_t sub_10014A658(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriEnabledMonitor sharedInstance](&OBJC_CLASS___CSSiriEnabledMonitor, "sharedInstance"));
  unsigned int v3 = [v2 isEnabled];

  if (!v3) {
    return 1LL;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v5 = [WeakRetained _isInPhoneCallStateWithHSPhoneCallCapableRoute];

  if (!v5) {
    return 1LL;
  }
  int v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  BOOL v7 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v7)
  {
    int v9 = 136315138;
    int v10 = "-[CSVoiceTriggerAPModeSuspendPolicyIOS _addConditionsForIOSBargeIn]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s Turn on AP mode since device is hands free state with HS phone-call capable route connected",  (uint8_t *)&v9,  0xCu);
    return 0LL;
  }

  return result;
}

uint64_t sub_10014A75C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v2 = [WeakRetained _isAudioRouteIneligibleForAP];

  if (v2)
  {
    unsigned int v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 136315138;
      unsigned int v13 = "-[CSVoiceTriggerAPModeSuspendPolicyIOS _addConditionsForIOSBargeIn]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Audio route ineligible for AP, we should remain in AOP mode",  (uint8_t *)&v12,  0xCu);
    }

    return 1LL;
  }

  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue( +[CSBuiltinSpeakerStateMonitor sharedInstance]( &OBJC_CLASS___CSBuiltinSpeakerStateMonitor,  "sharedInstance"));
  id v5 = [v4 currentBuiltinSpeakerState];

  int v6 = (void *)objc_claimAutoreleasedReturnValue( +[CSPlaybackVolumeStatusMonitor sharedInstance]( &OBJC_CLASS___CSPlaybackVolumeStatusMonitor,  "sharedInstance"));
  id v7 = [v6 playbackVolumeStatus];

  if (v5 != (id)1 || v7 != 0LL) {
    return 1LL;
  }
  int v10 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  BOOL v11 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v11)
  {
    int v12 = 136315138;
    unsigned int v13 = "-[CSVoiceTriggerAPModeSuspendPolicyIOS _addConditionsForIOSBargeIn]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger AOP mode cannot be turned on since builtIn speaker is active and playback volume is high",  (uint8_t *)&v12,  0xCu);
    return 0LL;
  }

  return result;
}

uint64_t sub_10014A8E0(uint64_t a1)
{
  id v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned __int8 v3 = [WeakRetained _isAudioRouteIneligibleForAP];

  if ((v3 & 1) != 0) {
    return 1LL;
  }
  id v4 = objc_loadWeakRetained(v1);
  unsigned int v5 = [v4 isAssistantClientConsideredAsRecord];

  if (!v5) {
    return 1LL;
  }
  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriEnabledMonitor sharedInstance](&OBJC_CLASS___CSSiriEnabledMonitor, "sharedInstance"));
  unsigned int v7 = [v6 isEnabled];

  if (v7)
  {
    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue( +[CSSiriClientBehaviorMonitor sharedInstance]( &OBJC_CLASS___CSSiriClientBehaviorMonitor,  "sharedInstance"));
    int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 audioRecordContext]);
  }

  else
  {
    int v9 = 0LL;
  }

  int v10 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v25 = 136315394;
    int v26 = "-[CSVoiceTriggerAPModeSuspendPolicyIOS _addConditionsForIOSBargeIn]_block_invoke";
    __int16 v27 = 2114;
    id v28 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s AudioRecordContext = %{public}@, recordState = RECORDING",  (uint8_t *)&v25,  0x16u);
  }

  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue(+[CSAudioRouteChangeMonitor sharedInstance](&OBJC_CLASS___CSAudioRouteChangeMonitor, "sharedInstance"));
  unsigned int v12 = [v11 carPlayConnected];

  if (v12)
  {
    unsigned int v13 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v25 = 136315138;
      int v26 = "-[CSVoiceTriggerAPModeSuspendPolicyIOS _addConditionsForIOSBargeIn]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%s CarPlay is connected, we will still run AOP mode",  (uint8_t *)&v25,  0xCu);
    }

uint64_t sub_10014AC40(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue( +[CSAlwaysOnProcessorStateMonitor sharedInstance]( &OBJC_CLASS___CSAlwaysOnProcessorStateMonitor,  "sharedInstance"));
  unsigned int v3 = [v2 isEnabled];

  if ((v3 & 1) == 0)
  {
    id v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315138;
      int v9 = "-[CSVoiceTriggerAPModeSuspendPolicyIOS _addConditionsForIOSBargeIn]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s AOP Listening is disabled",  (uint8_t *)&v8,  0xCu);
    }
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v6 = [WeakRetained _isAudioRouteIneligibleForAP];

  return v6 | v3;
}

uint64_t sub_10014AD30(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned __int8 v2 = [WeakRetained _isAudioRouteIneligibleForAP];

  if ((v2 & 1) != 0) {
    return 1LL;
  }
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue(+[CSAttSiriStateMonitor sharedInstance](&OBJC_CLASS___CSAttSiriStateMonitor, "sharedInstance"));
  unsigned int v4 = [v3 isAttending];

  if (!v4) {
    return 1LL;
  }
  unsigned int v5 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  BOOL v6 = os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0LL;
  if (v6)
  {
    int v8 = 136315138;
    int v9 = "-[CSVoiceTriggerAPModeSuspendPolicyIOS _addConditionsForIOSBargeIn]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s Turn on AP mode since siri is in attending state",  (uint8_t *)&v8,  0xCu);
    return 0LL;
  }

  return result;
}

uint64_t sub_10014AE28(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned __int8 v2 = [WeakRetained _isAudioRouteIneligibleForAP];

  if ((v2 & 1) != 0) {
    return 1LL;
  }
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue( +[CSAudioStreamActivityMonitor sharedInstance]( &OBJC_CLASS___CSAudioStreamActivityMonitor,  "sharedInstance"));
  unsigned int v5 = [v4 hasNonVoiceTriggerStreamsOrStreamHoldersActive];

  if (v5)
  {
    BOOL v6 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      int v8 = "-[CSVoiceTriggerAPModeSuspendPolicyIOS _addConditionsForIOSBargeIn]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s VoiceTrigger AOP mode cannot be turned on since other non-built-in VoiceTrigger clients are running",  (uint8_t *)&v7,  0xCu);
    }
  }

  return v5 ^ 1;
}

BOOL sub_10014AF18(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue( +[CSCommandControlStreamEventMonitor sharedInstance]( &OBJC_CLASS___CSCommandControlStreamEventMonitor,  "sharedInstance"));
  unsigned int v2 = [v1 isStreaming];

  unsigned int v3 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315394;
    int v7 = "-[CSVoiceTriggerAPModeSuspendPolicyIOS _addConditionsForIOSBargeIn]_block_invoke";
    __int16 v8 = 1026;
    unsigned int v9 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s CommandControl Streaming = %{public}d",  (uint8_t *)&v6,  0x12u);
  }

  if (v2)
  {
    unsigned int v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      int v7 = "-[CSVoiceTriggerAPModeSuspendPolicyIOS _addConditionsForIOSBargeIn]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s Turn on AP mode since command control is streaming",  (uint8_t *)&v6,  0xCu);
    }
  }

  return v2 ^ 1;
}

BOOL sub_10014B048(id a1)
{
  return 0;
}

BOOL sub_10014B050(id a1)
{
  return 0;
}

void sub_10014B2FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, id location)
{
}

void sub_10014B7A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10014BA4C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v18[0] = 0LL;
  v18[1] = v18;
  _OWORD v18[2] = 0x3032000000LL;
  void v18[3] = sub_10014BC90;
  void v18[4] = sub_10014BCA0;
  id v19 = 0LL;
  uint64_t v7 = *(void *)(a1 + 40);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_10014BCA8;
  v17[3] = &unk_10022ED68;
  void v17[4] = v18;
  +[CSUtils getTrialIdsForAssetType:withCompletion:]( &OBJC_CLASS___CSUtils,  "getTrialIdsForAssetType:withCompletion:",  v7,  v17);
  if (v6)
  {
    __int16 v8 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 136315394;
      unsigned int v21 = "-[CSTrialAssetDownloadMonitor _validateDownloadedAssetForAssetType:]_block_invoke_2";
      __int16 v22 = 2048;
      uint64_t v23 = v12;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s ERR: failed to fetch asset for asset type %lu, posting to ABC ...",  buf,  0x16u);
    }

    unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue(+[CSDiagnosticReporter sharedInstance](&OBJC_CLASS___CSDiagnosticReporter, "sharedInstance"));
    [v9 submitTrialIssueReport:kCSDiagnosticReporterTrialAssetFetchFailed];

    int v10 = @"n/a";
  }

  else
  {
    int v10 = (__CFString *)objc_claimAutoreleasedReturnValue([v5 configVersion]);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = 1;
  }

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  id v13[2] = sub_10014BCBC;
  v13[3] = &unk_10022ED90;
  BOOL v16 = v6 == 0LL;
  unsigned int v15 = v18;
  BOOL v11 = v10;
  id v14 = v11;
  AnalyticsSendEventLazy(@"com.apple.corespeech.trialAssetUpdate", v13);

  _Block_object_dispose(v18, 8);
}

void sub_10014BC70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_10014BC90(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10014BCA0(uint64_t a1)
{
}

void sub_10014BCA8(uint64_t a1, int a2, id obj)
{
}

id sub_10014BCBC(uint64_t a1)
{
  v8[0] = &__kCFBooleanTrue;
  v7[0] = @"updateReceived";
  v7[1] = @"updateSuccess";
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
  v8[1] = v2;
  void v7[2] = @"namespace";
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  v7[3] = @"assetVersion";
  v8[2] = v4;
  void v8[3] = v3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v8,  v7,  4LL));

  return v5;
}

void sub_10014BD98(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "trialAssetDownloadMonitorDelegate:didInstallNewAsset:assetType:") & 1) != 0) {
    [v3 trialAssetDownloadMonitorDelegate:*(void *)(a1 + 32) didInstallNewAsset:1 assetType:*(void *)(a1 + 40)];
  }
}

void sub_10014BDE8(uint64_t a1)
{
  unint64_t v2 = +[CSUtils getAssetTypeForNamespace:](&OBJC_CLASS___CSUtils, "getAssetTypeForNamespace:", *(void *)(a1 + 32));
  id v3 = *(id **)(a1 + 40);
  if (!v2)
  {
    [v3 _handleSiriAttAssetTrailDownloadForNamespace:*(void *)(a1 + 32)];
    return;
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3[1] objectForKeyedSubscript:*(void *)(a1 + 32)]);
  [v4 refresh];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 levelForFactor:@"AssetData" withNamespaceName:*(void *)(a1 + 32)]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 fileValue]);
  uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue([v6 path]);

  if (v7)
  {
    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([v4 levelForFactor:@"isAssetArchived" withNamespaceName:*(void *)(a1 + 32)]);

    if (v8 && [v8 BOOLeanValue])
    {
      unsigned int v9 = *(void **)(a1 + 40);
      int v10 = (void *)objc_claimAutoreleasedReturnValue( +[CSAssetController getAssetTypeStringForType:]( &OBJC_CLASS___CSAssetController,  "getAssetTypeStringForType:",  v2));
      BOOL v11 = (__CFString *)objc_claimAutoreleasedReturnValue([v9 _trailStageDirectoryForAsset:v10]);

      uint64_t v12 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315650;
        __int16 v27 = "-[CSTrialAssetDownloadMonitor downloadAndNotifyTrialAssetsUpdateForNamespace:onQueue:]_block_invoke";
        __int16 v28 = 2114;
        unint64_t v29 = v7;
        __int16 v30 = 2114;
        double v31 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s Downloaded asset, now extracting from %{public}@ to %{public}@",  buf,  0x20u);
      }

      if (!+[CSUtils extractArchiveFromDirectory:toDir:]( &OBJC_CLASS___CSUtils,  "extractArchiveFromDirectory:toDir:",  v7,  v11))
      {
        uint64_t v18 = (os_log_s *)CSLogContextFacilityCoreSpeech;
        if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 136315394;
          __int16 v27 = "-[CSTrialAssetDownloadMonitor downloadAndNotifyTrialAssetsUpdateForNamespace:onQueue:]_block_invoke";
          __int16 v28 = 2114;
          unint64_t v29 = v7;
          _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%s ERR: Unable to unzip asset file %{public}@",  buf,  0x16u);
        }

        id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
        id v25 = 0LL;
        [v19 removeItemAtPath:v11 error:&v25];
        id v20 = v25;

        if (v20)
        {
          unsigned int v21 = (void *)CSLogContextFacilityCoreSpeech;
          if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
          {
            uint64_t v23 = v21;
            BOOL v24 = (__CFString *)objc_claimAutoreleasedReturnValue([v20 localizedDescription]);
            *(_DWORD *)__int128 buf = 136315650;
            __int16 v27 = "-[CSTrialAssetDownloadMonitor downloadAndNotifyTrialAssetsUpdateForNamespace:onQueue:]_block_invoke";
            __int16 v28 = 2112;
            unint64_t v29 = v11;
            __int16 v30 = 2114;
            double v31 = v24;
            _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "%s Failed to delete dir at %@ with err: %{public}@",  buf,  0x20u);
          }
        }

        __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(+[CSDiagnosticReporter sharedInstance](&OBJC_CLASS___CSDiagnosticReporter, "sharedInstance"));
        [v22 submitTrialIssueReport:kCSDiagnosticReporterTrialDownloadFailed];

        goto LABEL_18;
      }
    }

    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 levelForFactor:@"AssetVersion" withNamespaceName:*(void *)(a1 + 32)]);

    unsigned int v13 = (void *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      id v14 = v13;
      unsigned int v15 = (__CFString *)objc_claimAutoreleasedReturnValue([v5 stringValue]);
      *(_DWORD *)__int128 buf = 136315650;
      __int16 v27 = "-[CSTrialAssetDownloadMonitor downloadAndNotifyTrialAssetsUpdateForNamespace:onQueue:]_block_invoke";
      __int16 v28 = 2050;
      unint64_t v29 = (const __CFString *)v2;
      __int16 v30 = 2114;
      double v31 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%s Downloaded trial asset type %{public}lu with version %{public}@",  buf,  0x20u);
    }
  }

  else
  {
    BOOL v16 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      __int16 v27 = "-[CSTrialAssetDownloadMonitor downloadAndNotifyTrialAssetsUpdateForNamespace:onQueue:]_block_invoke";
      __int16 v28 = 2114;
      unint64_t v29 = @"AssetData";
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s ERR: null file download path for factor: %{public}@",  buf,  0x16u);
    }

    int v17 = (void *)objc_claimAutoreleasedReturnValue(+[CSDiagnosticReporter sharedInstance](&OBJC_CLASS___CSDiagnosticReporter, "sharedInstance"));
    [v17 submitTrialIssueReport:kCSDiagnosticReporterTrialDownloadFailed];
  }

  __int16 v8 = v5;
LABEL_18:
}

void sub_10014C2B8(id *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[TRIClient clientWithIdentifier:](&OBJC_CLASS___TRIClient, "clientWithIdentifier:", a2));
  if (v6)
  {
    [a1[4] setObject:v6 forKey:v5];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    void v9[2] = sub_10014C444;
    void v9[3] = &unk_10022ECF0;
    objc_copyWeak(&v11, a1 + 6);
    id v10 = a1[5];
    id v7 = [v6 addUpdateHandlerForNamespaceName:v5 usingBlock:v9];
    __int16 v8 = (os_log_s *)CSLogContextFacilityCoreSpeech;
    if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315394;
      unsigned int v13 = "-[CSTrialAssetDownloadMonitor _startMonitoringWithQueue:]_block_invoke";
      __int16 v14 = 2112;
      id v15 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s Adding client with namespace: %@ to asset manager",  buf,  0x16u);
    }

    objc_destroyWeak(&v11);
  }
}

void sub_10014C428(_Unwind_Exception *a1)
{
}

void sub_10014C444(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)CSLogContextFacilityCoreSpeech;
  if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315394;
    __int16 v8 = "-[CSTrialAssetDownloadMonitor _startMonitoringWithQueue:]_block_invoke_2";
    __int16 v9 = 2114;
    id v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s New trial asset for %{public}@ received, begin download",  (uint8_t *)&v7,  0x16u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 namespaceName]);
  [WeakRetained downloadAndNotifyTrialAssetsUpdateForNamespace:v6 onQueue:*(void *)(a1 + 32)];
}

void sub_10014C580(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___CSTrialAssetDownloadMonitor);
  unint64_t v2 = (void *)qword_100280258;
  qword_100280258 = (uint64_t)v1;
}

void sub_10014EAA0(id a1, id a2)
{
}

id sub_10014EAA8(uint64_t a1, void *a2)
{
  return [a2 localSpeechServiceDidDetectedFinalEndpointAtTime:*(double *)(a1 + 32)];
}

id sub_10014EAB4(uint64_t a1, void *a2)
{
  return [a2 localSpeechServiceDidReceiveContinuityEndDetected:*(void *)(a1 + 32)];
}

id sub_10014EAC0(uint64_t a1, void *a2)
{
  return [a2 localSpeechServiceDidReceiveMultiUserTRPCandidatePackage:*(void *)(a1 + 32)];
}

id sub_10014EACC(uint64_t a1, void *a2)
{
  return [a2 localSpeechServiceDidReceiveTRPDetected:*(void *)(a1 + 32)];
}

id sub_10014EAD8(uint64_t a1, void *a2)
{
  return [a2 localSpeechServiceDidReceiveTRPCandidatePackage:*(void *)(a1 + 32)];
}

id sub_10014EAE4(void *a1, void *a2)
{
  return [a2 localSpeechServiceDidCompletionRecognitionWithStatistics:a1[4] requestId:a1[5] endpointMode:a1[7] error:a1[6]];
}

id sub_10014EAF4(void *a1, void *a2)
{
  return [a2 localSpeechServiceDidReceivedPartialResultWithRequestId:a1[4] language:a1[5] speechPackage:a1[6] metadata:a1[7]];
}

id sub_10014EB04(void *a1, void *a2)
{
  return [a2 localSpeechServiceDidReceivedPartialResultWithRequestId:a1[4] language:a1[5] tokens:a1[6] metadata:a1[7]];
}

id sub_10014EB14(void *a1, void *a2)
{
  return [a2 localSpeechServiceDidReceivedPartialResultWithRequestId:a1[4] language:a1[5] tokens:a1[6]];
}

id sub_10014EB24(uint64_t a1, void *a2)
{
  return [a2 localSpeechServiceDidReceivedFinalResultWithRequestId:*(void *)(a1 + 32) multiUserSpeechPackage:*(void *)(a1 + 40)];
}

id sub_10014EB30(void *a1, void *a2)
{
  return [a2 localSpeechServiceDidReceivedFinalResultWithRequestId:a1[4] speechPackage:a1[5] metadata:a1[6]];
}

id sub_10014EB40(uint64_t a1, void *a2)
{
  return [a2 localSpeechServiceDidReceivedFinalResultWithRequestId:*(void *)(a1 + 32) speechPackage:*(void *)(a1 + 40)];
}

id sub_10014EB4C(uint64_t a1, void *a2)
{
  return [a2 localSpeechServiceDidReceivedFinalResultCandidateWithRequestId:*(void *)(a1 + 32) speechPackage:*(void *)(a1 + 40)];
}

id sub_10014EB58(void *a1, void *a2)
{
  return [a2 localSpeechServiceDidReceivedVoiceCommandCandidateWithRequestId:a1[4] speechPackage:a1[5] metadata:a1[6]];
}

id sub_10014EB68(uint64_t a1, void *a2)
{
  return [a2 localSpeechServiceDidReceivedEagerRecognitionCandidateWithRequestId:*(void *)(a1 + 32) rcId:*(void *)(a1 + 48) multiUserSpeechPackage:*(void *)(a1 + 40) duration:*(double *)(a1 + 56)];
}

id sub_10014EB7C(uint64_t a1, void *a2)
{
  return [a2 localSpeechServiceDidReceivedEagerRecognitionCandidateWithRequestId:*(void *)(a1 + 32) rcId:*(void *)(a1 + 56) speechPackage:*(void *)(a1 + 40) duration:*(void *)(a1 + 48) metadata:*(double *)(a1 + 64)];
}

id sub_10014EB90(uint64_t a1, void *a2)
{
  return [a2 localSpeechServiceDidReceivedEagerRecognitionCandidateWithRequestId:*(void *)(a1 + 32) rcId:*(void *)(a1 + 48) speechPackage:*(void *)(a1 + 40) duration:*(double *)(a1 + 56)];
}

uint64_t sub_10014F728(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10014F738(uint64_t a1)
{
}

void sub_10014F740(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_10014F778(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryAdBlocker;
  if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 56LL);
    int v12 = 136315650;
    unsigned int v13 = "-[CSAdBlockerHorseMan adBlockerStoreHasUpdateWithCatalog:withResetDictionary:withMaxFingerprintBufferSize:with"
          "AssetVersion:]_block_invoke";
    __int16 v14 = 2112;
    uint64_t v15 = v3;
    __int16 v16 = 2112;
    uint64_t v17 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Received updated adblocker asset with version: %@ by adblocker %@",  (uint8_t *)&v12,  0x20u);
  }

  id v5 = -[SHSession initWithCatalog:](objc_alloc(&OBJC_CLASS___SHSession), "initWithCatalog:", *(void *)(a1 + 48));
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(void **)(v6 + 24);
  *(void *)(v6 + 24) = v5;

  objc_storeStrong((id *)(*(void *)(a1 + 40) + 80LL), *(id *)(a1 + 56));
  objc_storeStrong((id *)(*(void *)(a1 + 40) + 96LL), *(id *)(a1 + 32));
  *(_DWORD *)(*(void *)(a1 + 40) + 12LL) = *(_DWORD *)(a1 + 64);
  __int16 v8 = *(void **)(a1 + 40);
  __int16 v9 = (void *)v8[3];
  if (v9)
  {
    objc_msgSend(v9, "setDelegate:");
    id v10 = (os_log_s *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 136315138;
      unsigned int v13 = "-[CSAdBlockerHorseMan adBlockerStoreHasUpdateWithCatalog:withResetDictionary:withMaxFingerprintBufferSize:wi"
            "thAssetVersion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s Adblocker has new recognition session",  (uint8_t *)&v12,  0xCu);
    }

    __int16 v8 = *(void **)(a1 + 40);
  }

  return [v8 validateSession];
}

void *sub_10014F8FC(void *result)
{
  uint64_t v1 = result[4];
  if (!*(_BYTE *)(v1 + 8))
  {
    uint64_t v2 = *(void **)(v1 + 24);
    if (v2) {
      return [v2 matchSignature:result[5]];
    }
  }

  return result;
}

void sub_10014F970( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, int a10, __int16 a11, __int16 a12, uint64_t a13)
{
  if (a2 == 1)
  {
    id v13 = objc_begin_catch(exception_object);
    __int16 v14 = (os_log_s *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      id v15 = (id)objc_claimAutoreleasedReturnValue([v13 name]);
      __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v13 reason]);
      LODWORD(va_start(va, a9) = 136315650;
      *(void *)((char *)&a9 + 4) = "-[CSAdBlockerHorseMan continuousAudioFingerprintProvider:hasNewFingerprintBuffer:]_block_invoke";
      WORD6(va_start(va, a9) = 2114;
      *(void *)((char *)&a9 + 14) = v15;
      a12 = 2114;
      a13 = (uint64_t)v16;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_FAULT,  "%s Error trying to match signature with exceptionName: %{public}@ with reason: %{public}@",  (uint8_t *)&a9,  0x20u);
    }

    objc_end_catch();
    JUMPOUT(0x10014F940LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_10014FA60(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  unint64_t v3 = *(void *)(*(void *)(a1 + 32) + 72LL);
  if (v2 >= v3)
  {
    +[CSFTimeUtils hostTimeToSeconds:](&OBJC_CLASS___CSFTimeUtils, "hostTimeToSeconds:", v2 - v3);
    objc_msgSend( *(id *)(*(void *)(a1 + 32) + 104),  "sendAnalyticInformation:withAdName:withTimeForAdBlockerDecision:",  0,  &stru_10022F858);
  }

  else
  {
    uint64_t v4 = v2;
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  1802LL,  &off_100239458));
    uint64_t v6 = (os_log_s *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 72LL);
      int v10 = 136315906;
      id v11 = "-[CSAdBlockerHorseMan siriClientBehaviorMonitor:willStopStream:reason:]_block_invoke";
      __int16 v12 = 2048;
      uint64_t v13 = v4;
      __int16 v14 = 2048;
      uint64_t v15 = v9;
      __int16 v16 = 2112;
      uint64_t v17 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Error adBlocker end time for no match %llu greater than start time %llu with error %@",  (uint8_t *)&v10,  0x2Au);
    }
  }

  int v7 = (os_log_s *)CSLogCategoryAdBlocker;
  if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 136315138;
    id v11 = "-[CSAdBlockerHorseMan siriClientBehaviorMonitor:willStopStream:reason:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s adBlocker did not find match",  (uint8_t *)&v10,  0xCu);
  }

  [*(id *)(*(void *)(a1 + 32) + 104) emitAdblockerLoggingWithDismissalType:1 withAdName:0 withAssetVersion:*(void *)(*(void *)(a1 + 32) + 96) fromEndpoint:0 withRequestMHUUID:*(void *)(*(void *)(a1 + 32) + 16)];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));
  [WeakRetained unregisterObserver:*(void *)(a1 + 32)];
}

void sub_10014FC3C(uint64_t a1)
{
  uint64_t v2 = objc_alloc(&OBJC_CLASS___NSUUID);
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestMHUUID]);
  unint64_t v3 = -[NSUUID initWithUUIDString:](v2, "initWithUUIDString:", v6);
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 16);
  *(void *)(v4 + 16) = v3;
}

void sub_10014FCA0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));

  if (WeakRetained)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (!*(_BYTE *)(v3 + 8))
    {
      if (!*(void *)(v3 + 80))
      {
        id v4 = objc_loadWeakRetained((id *)(v3 + 40));
        [v4 reset];

        uint64_t v3 = *(void *)(a1 + 32);
      }

      id v5 = objc_loadWeakRetained((id *)(v3 + 40));
      [v5 unregisterObserver:*(void *)(a1 + 32)];

      *(_BYTE *)(*(void *)(a1 + 32) + ++*(void *)(*(void *)(result + 32) + 8LL) = 1;
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) mediaItems]);
      int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);

      if (v7 && (__int16 v8 = (void *)objc_claimAutoreleasedReturnValue([v7 title]), v8, v8))
      {
        uint64_t v9 = (__CFString *)objc_claimAutoreleasedReturnValue([v7 title]);
        int v10 = *(void **)(*(void *)(a1 + 32) + 80LL);
        if (v10)
        {
          id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 valueForKey:v9]);
          unsigned int v12 = [v11 BOOLValue];

          if (v12)
          {
            id v13 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));
            [v13 reset];
          }
        }

        __int16 v14 = (os_log_s *)CSLogCategoryAdBlocker;
        if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 96LL);
          *(_DWORD *)__int128 buf = 136315650;
          __int16 v39 = "-[CSAdBlockerHorseMan session:didFindMatch:]_block_invoke";
          __int16 v40 = 2112;
          __int16 v41 = v9;
          __int16 v42 = 2112;
          uint64_t v43 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%s Matched for ad: %@ with asset %@",  buf,  0x20u);
        }

        uint64_t v16 = mach_absolute_time();
        unint64_t v17 = *(void *)(*(void *)(a1 + 32) + 72LL);
        if (v16 >= v17)
        {
          +[CSFTimeUtils hostTimeToSeconds:](&OBJC_CLASS___CSFTimeUtils, "hostTimeToSeconds:", v16 - v17);
          objc_msgSend( *(id *)(*(void *)(a1 + 32) + 104),  "sendAnalyticInformation:withAdName:withTimeForAdBlockerDecision:",  1,  v9);
        }

        else
        {
          uint64_t v18 = v16;
          id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  1801LL,  &off_100239430));
          id v20 = (os_log_s *)CSLogCategoryAdBlocker;
          if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_ERROR))
          {
            uint64_t v32 = *(void *)(*(void *)(a1 + 32) + 72LL);
            *(_DWORD *)__int128 buf = 136315906;
            __int16 v39 = "-[CSAdBlockerHorseMan session:didFindMatch:]_block_invoke";
            __int16 v40 = 2048;
            __int16 v41 = (__CFString *)v18;
            __int16 v42 = 2048;
            uint64_t v43 = v32;
            __int16 v44 = 2112;
            uint64_t v45 = v19;
            _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "%s Error adBlocker end time for match %llu greater than start time %llu with error %@",  buf,  0x2Au);
          }
        }
      }

      else
      {
        __int16 v22 = (os_log_s *)CSLogCategoryAdBlocker;
        if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 136315138;
          __int16 v39 = "-[CSAdBlockerHorseMan session:didFindMatch:]_block_invoke";
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%s No ad for matched audio.", buf, 0xCu);
        }

        uint64_t v9 = &stru_10022F858;
      }

      uint64_t v23 = *(_BYTE **)(a1 + 32);
      if (v23[9])
      {
        BOOL v24 = (os_log_s *)CSLogCategoryAdBlocker;
        if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 136315138;
          __int16 v39 = "-[CSAdBlockerHorseMan session:didFindMatch:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "%s Second pass has finished. We will deactive Siri.",  buf,  0xCu);
        }

        id v25 = (void *)objc_claimAutoreleasedReturnValue(+[CSSiriLauncher sharedLauncher](&OBJC_CLASS___CSSiriLauncher, "sharedLauncher"));
        uint64_t v26 = 3LL;
        [v25 deactivateSiriActivationConnectionWithReason:3 withOptions:0 withContext:0];

        uint64_t v23 = *(_BYTE **)(a1 + 32);
      }

      else
      {
        uint64_t v26 = 2LL;
      }

      __int128 v35 = 0u;
      __int128 v36 = 0u;
      __int128 v33 = 0u;
      __int128 v34 = 0u;
      __int16 v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "observers", 0));
      id v28 = [v27 countByEnumeratingWithState:&v33 objects:v37 count:16];
      if (v28)
      {
        id v29 = v28;
        uint64_t v30 = *(void *)v34;
        do
        {
          for (uint64_t i = 0LL; i != v29; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v34 != v30) {
              objc_enumerationMutation(v27);
            }
            [*(id *)(*((void *)&v33 + 1) + 8 * (void)i) adBlockerHasMatchWithVoiceTrigger:*(unsigned __int8 *)(*(void *)(a1 + 32) + 9)];
          }

          id v29 = [v27 countByEnumeratingWithState:&v33 objects:v37 count:16];
        }

        while (v29);
      }

      [*(id *)(*(void *)(a1 + 32) + 104) emitAdblockerLoggingWithDismissalType:v26 withAdName:v9 withAssetVersion:*(void *)(*(void *)(a1 + 32) + 96) fromEndpoint:0 withRequestMHUUID:*(void *)(*(void *)(a1 + 32) + 16)];
    }
  }

  else
  {
    unsigned int v21 = (os_log_s *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int16 v39 = "-[CSAdBlockerHorseMan session:didFindMatch:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%s fingerprintProvider is already nil",  buf,  0xCu);
    }
  }

void *sub_10015016C(void *result)
{
  if (!result[4])
  {
    uint64_t v1 = result;
    uint64_t v2 = (os_log_s *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315138;
      id v4 = "-[CSAdBlockerHorseMan voiceTriggerDidDetectNearMiss:deviceId:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Voice trigger near miss in adblocker.",  (uint8_t *)&v3,  0xCu);
    }

    [(id)v1[5] stopAdBlockerMatching];
    return [*(id *)(v1[5] + 104) emitAdblockerLoggingWithDismissalType:1 withAdName:0 withAssetVersion:*(void *)(v1[5] + 96) fromEndpoint:0 withRequestMHUUID:*(void *)(v1[5] + 16)];
  }

  return result;
}

void *sub_100150240(void *result)
{
  if (!result[4])
  {
    uint64_t v1 = result;
    uint64_t v2 = (os_log_s *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315138;
      id v4 = "-[CSAdBlockerHorseMan voiceTriggerDidRejected:deviceId:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Voice trigger rejected in adblocker.",  (uint8_t *)&v3,  0xCu);
    }

    [(id)v1[5] stopAdBlockerMatching];
    return [*(id *)(v1[5] + 104) emitAdblockerLoggingWithDismissalType:1 withAdName:0 withAssetVersion:*(void *)(v1[5] + 96) fromEndpoint:0 withRequestMHUUID:*(void *)(v1[5] + 16)];
  }

  return result;
}

void sub_100150314(uint64_t a1)
{
  if (!*(void *)(a1 + 32))
  {
    uint64_t v2 = (os_log_s *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315138;
      id v4 = "-[CSAdBlockerHorseMan voiceTriggerDidDetectKeyword:deviceId:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Voice triggered in adblocker.",  (uint8_t *)&v3,  0xCu);
    }

    *(_BYTE *)(*(void *)(a1 + 40) + 9LL) = 1;
  }

void sub_1001503D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 24))
  {
    int v3 = (os_log_s *)CSLogCategoryAdBlocker;
    if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315138;
      id v11 = "-[CSAdBlockerHorseMan startAdBlockerMatching]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s Adblocker started processing",  (uint8_t *)&v10,  0xCu);
      uint64_t v1 = *(void *)(a1 + 32);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(v1 + 40));

    if (!WeakRetained)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue( +[CSSpeechManager sharedManagerForCoreSpeechDaemon]( &OBJC_CLASS___CSSpeechManager,  "sharedManagerForCoreSpeechDaemon"));
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 audioFingerprintProvider]);
      objc_storeWeak((id *)(*(void *)(a1 + 32) + 40LL), v6);
    }

    id v7 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));

    if (v7)
    {
      *(_BYTE *)(*(void *)(a1 + 32) + ++*(void *)(*(void *)(result + 32) + 8LL) = 0;
      *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 0;
      [*(id *)(*(void *)(a1 + 32) + 104) setHasLogged:0];
      id v8 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));
      [v8 registerObserver:*(void *)(a1 + 32)];

      *(void *)(*(void *)(a1 + 32) + 72LL) = mach_absolute_time();
    }

    else
    {
      uint64_t v9 = (os_log_s *)CSLogCategoryAdBlocker;
      if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_ERROR))
      {
        int v10 = 136315138;
        id v11 = "-[CSAdBlockerHorseMan startAdBlockerMatching]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s Failed to initialize fingerprintProvider",  (uint8_t *)&v10,  0xCu);
      }
    }
  }

void sub_100150594(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryAdBlocker;
  if (os_log_type_enabled(CSLogCategoryAdBlocker, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    id v6 = "-[CSAdBlockerHorseMan stopAdBlockerMatching]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s Adblocker stopping processing",  (uint8_t *)&v5,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));

  if (WeakRetained)
  {
    id v4 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));
    [v4 unregisterObserver:*(void *)(a1 + 32)];
  }

void sub_100150670(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  unsigned int v3 = [v2 containsObject:*(void *)(a1 + 40)];

  if (v3)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
    [v4 removeObject:*(void *)(a1 + 40)];
  }

void sub_1001506F0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  unsigned __int8 v3 = [v2 containsObject:*(void *)(a1 + 40)];

  if ((v3 & 1) == 0)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
    [v4 addObject:*(void *)(a1 + 40)];
  }

id sub_100151BC8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleClientAudioDidStartMessage];
}

id sub_100151BD0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleClientAudioDidStartMessage];
}

void sub_100151BD8(uint64_t a1)
{
  uint64_t v2 = *(_BYTE **)(a1 + 32);
  if (v2[9])
  {
    unsigned __int8 v3 = (os_log_s *)CSLogCategoryAttending;
    if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      id v7 = "-[CSLocalAttendingInitiator speechStartDetectedWithEventInfo:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%s SiriUI dismissal in progress. Ignoring speechStartDetected",  (uint8_t *)&v6,  0xCu);
    }
  }

  else
  {
    [v2 _handleSpeechStartDetectedWithEventInfo:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _emitSpeechStartDetectedEventWithAttendingTriggerInfo:*(void *)(a1 + 40)];
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 56);
    *(void *)(v4 + 56) = 0LL;
  }

void sub_100151CD0(uint64_t a1)
{
  uint64_t v2 = (void *)CSLogCategoryAttending;
  if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = v2;
    else {
      int v5 = *(&off_10022BD50 + v3 - 1);
    }
    int v6 = v5;
    int v16 = 136315394;
    unint64_t v17 = "-[CSLocalAttendingInitiator attendingStoppedWithReason:]_block_invoke";
    __int16 v18 = 2112;
    id v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s [reason = %@]", (uint8_t *)&v16, 0x16u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
  if (WeakRetained)
  {
    id v8 = WeakRetained;
    id v9 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
    char v10 = objc_opt_respondsToSelector(v9, "localAttendingStopped");

    if ((v10 & 1) != 0)
    {
      id v11 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
      [v11 localAttendingStopped];
    }
  }

  unsigned int v12 = *(void **)(a1 + 32);
  if (v12[10] != v12[12])
  {
    +[CSAttendingSelfLogger emitAttendingContextEndedEventWithStopReason:withMHUUID:]( &OBJC_CLASS___CSAttendingSelfLogger,  "emitAttendingContextEndedEventWithStopReason:withMHUUID:",  *(void *)(a1 + 40));
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 96LL), *(id *)(*(void *)(a1 + 32) + 80LL));
    unsigned int v12 = *(void **)(a1 + 32);
  }

  [v12 _reset];
  uint64_t v13 = *(void *)(a1 + 40);
  if (v13 == 6)
  {
    [*(id *)(a1 + 32) _resetIsStoppingForSiriUIDismissal];
    return;
  }

  if (v13 == 8)
  {
LABEL_14:
    id v14 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  2107LL,  0LL));
    [v14 localAttendingStoppedUnexpectedlyWithError:v15];
  }

id sub_100151ED8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryAttending;
  if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 136315394;
    int v6 = "-[CSLocalAttendingInitiator receivedAttendingJarvisHintWithInfo:]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s %@", (uint8_t *)&v5, 0x16u);
  }

  return [*(id *)(a1 + 40) _startAttendingForJarvisAnnounceMessageWithInfo:*(void *)(a1 + 32)];
}

void sub_100151F98(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryAttending;
  if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v10 = 136315394;
    id v11 = "-[CSLocalAttendingInitiator receivedAttendingMagusNotSupportedHintWithInfo:]_block_invoke";
    __int16 v12 = 2112;
    uint64_t v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s %@", (uint8_t *)&v10, 0x16u);
  }

  uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rootRequestId]);
  uint64_t v5 = *(void *)(a1 + 40);
  int v6 = *(void **)(v5 + 48);
  *(void *)(v5 + 4_Block_object_dispose(va, 8) = v4;

  uint64_t v7 = *(void *)(a1 + 40);
  if (*(void *)(v7 + 48))
  {
    if (objc_msgSend(*(id *)(v7 + 64), "isEqualToString:"))
    {
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 16LL));
      id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  CSErrorDomain,  2108LL,  0LL));
      [WeakRetained localAttendingStoppedUnexpectedlyWithError:v9];
    }
  }

void sub_1001520D0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryAttending;
  if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(unsigned __int8 *)(*(void *)(a1 + 40) + 8LL);
    int v15 = 136315650;
    int v16 = "-[CSLocalAttendingInitiator receivedAttendingTriggerForSiriPromptHintWithInfo:]_block_invoke";
    __int16 v17 = 2112;
    uint64_t v18 = v3;
    __int16 v19 = 1024;
    int v20 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s %@ attending:%u", (uint8_t *)&v15, 0x1Cu);
  }

  uint64_t v5 = *(_BYTE **)(a1 + 40);
  if (v5[8])
  {
    int v6 = (void *)objc_claimAutoreleasedReturnValue( +[CSAttendingTriggerInfo triggerInfoForServerInvoke]( &OBJC_CLASS___CSAttendingTriggerInfo,  "triggerInfoForServerInvoke"));
    [v5 _handleSpeechStartDetectedWithEventInfo:v6];

    [*(id *)(a1 + 40) _stopAttendingWithReason:3];
  }

  else
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSCarKitUtils sharedInstance](&OBJC_CLASS___CSCarKitUtils, "sharedInstance"));
    if ([v7 isBargeInDisabledForConnectedVehicle])
    {
      unsigned int v8 = 1;
    }

    else
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
      unsigned int v8 = [v9 isBargeInSupportEnabled] ^ 1;
    }

    int v10 = *(void **)(*(void *)(a1 + 40) + 48LL);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rootRequestId]);
    LOBYTE(v10) = [v10 isEqualToString:v11];

    if ((v10 & 1) != 0 || v8)
    {
      uint64_t v13 = *(void **)(a1 + 40);
      id v14 = (void *)objc_claimAutoreleasedReturnValue( +[CSAttendingTriggerInfo triggerInfoForServerInvoke]( &OBJC_CLASS___CSAttendingTriggerInfo,  "triggerInfoForServerInvoke"));
      [v13 _handleSpeechStartDetectedWithEventInfo:v14];
    }

    else
    {
      __int16 v12 = (os_log_s *)CSLogCategoryAttending;
      if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_INFO))
      {
        int v15 = 136315138;
        int v16 = "-[CSLocalAttendingInitiator receivedAttendingTriggerForSiriPromptHintWithInfo:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s Skip handling SiriPrompted since initiator already stopped attending",  (uint8_t *)&v15,  0xCu);
      }
    }
  }

id sub_1001522DC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryAttending;
  if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 136315394;
    int v6 = "-[CSLocalAttendingInitiator receivedAttendingStopHintWithInfo:]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s %@", (uint8_t *)&v5, 0x16u);
  }

  return objc_msgSend(*(id *)(a1 + 40), "_stopAttendingWithReason:", objc_msgSend(*(id *)(a1 + 32), "reason"));
}

id sub_1001523A8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryAttending;
  if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 136315394;
    int v6 = "-[CSLocalAttendingInitiator receivedAttendingStartHintWithInfo:]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s %@", (uint8_t *)&v5, 0x16u);
  }

  return [*(id *)(a1 + 40) _startAttendingWithInfo:*(void *)(a1 + 32)];
}

void sub_100152468(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryAttending;
  if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v10 = 136315394;
    id v11 = "-[CSLocalAttendingInitiator receivedAttendingWillStartHintWithInfo:]_block_invoke";
    __int16 v12 = 2112;
    uint64_t v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s %@", (uint8_t *)&v10, 0x16u);
  }

  uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rootRequestId]);
  uint64_t v5 = *(void *)(a1 + 40);
  int v6 = *(void **)(v5 + 64);
  *(void *)(v5 + 64) = v4;

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 16LL));
  char v8 = objc_opt_respondsToSelector(WeakRetained, "localAttendingWillStartWithRootRequestId:");

  if ((v8 & 1) != 0)
  {
    id v9 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 16LL));
    [v9 localAttendingWillStartWithRootRequestId:*(void *)(*(void *)(a1 + 40) + 64)];
  }

void sub_10015258C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  int v6 = v5;
  if ((a2 & 1) != 0)
  {
    __int16 v7 = (os_log_s *)CSLogCategoryAttending;
    if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v30 = "-[CSLocalAttendingInitiator _startAttendingWithOptions:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%s start attending successfully", buf, 0xCu);
    }

    char v8 = *(void **)(a1 + 40);
    id v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10015299C;
    block[3] = &unk_10022EFD0;
    id v10 = v8;
    uint64_t v11 = *(void *)(a1 + 32);
    id v24 = v10;
    uint64_t v25 = v11;
    dispatch_async(v9, block);
    __int16 v12 = (os_log_s *)CSLogCategoryAttending;
    if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v30 = "-[CSLocalAttendingInitiator _startAttendingWithOptions:]_block_invoke_2";
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%s AttendingSuccess: dispatch group leave attendingStartTransitionGroup",  buf,  0xCu);
    }

    dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 88LL));
  }

  else
  {
    id v13 = [v5 code];
    id v14 = (os_log_s *)CSLogCategoryAttending;
    BOOL v15 = os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT);
    if (v13 == (id)2103)
    {
      if (v15)
      {
        *(_DWORD *)__int128 buf = 136315138;
        uint64_t v30 = "-[CSLocalAttendingInitiator _startAttendingWithOptions:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%s Duplicate Attending Request", buf, 0xCu);
      }

      uint64_t v16 = *(void *)(a1 + 32);
      __int16 v17 = *(dispatch_queue_s **)(v16 + 24);
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472LL;
      v28[2] = sub_1001528DC;
      v28[3] = &unk_10022F100;
      v28[4] = v16;
      dispatch_async(v17, v28);
    }

    else
    {
      if (v15)
      {
        uint64_t v18 = v14;
        __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v6 description]);
        *(_DWORD *)__int128 buf = 136315394;
        uint64_t v30 = "-[CSLocalAttendingInitiator _startAttendingWithOptions:]_block_invoke_2";
        __int16 v31 = 2112;
        uint64_t v32 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%s Failed to start attending : %@",  buf,  0x16u);
      }

      uint64_t v20 = *(void *)(a1 + 32);
      unsigned int v21 = *(dispatch_queue_s **)(v20 + 24);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472LL;
      v26[2] = sub_10015295C;
      v26[3] = &unk_10022EFD0;
      v26[4] = v20;
      id v27 = v6;
      dispatch_async(v21, v26);
    }

    __int16 v22 = (os_log_s *)CSLogCategoryAttending;
    if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v30 = "-[CSLocalAttendingInitiator _startAttendingWithOptions:]_block_invoke_2";
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "%s AttendingFailed: dispatch group leave attendingStartTransitionGroup",  buf,  0xCu);
    }

    dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 88LL));
  }
}

void sub_1001528DC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
  char v3 = objc_opt_respondsToSelector(WeakRetained, "localAttendingAlreadyStarted");

  if ((v3 & 1) != 0)
  {
    id v4 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
    [v4 localAttendingAlreadyStarted];
  }

void sub_10015295C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
  [WeakRetained localAttendingStoppedUnexpectedlyWithError:*(void *)(a1 + 40)];
}

id sub_10015299C(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 40) + ++*(void *)(*(void *)(result + 32) + 8LL) = 1;
  id result = [*(id *)(a1 + 32) startAttendingHostTime];
  *(void *)(*(void *)(a1 + 40) + 72LL) = result;
  return result;
}

void sub_1001529E8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)CSLogCategoryAttending;
  if (os_log_type_enabled(CSLogCategoryAttending, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    int v4 = 136315394;
    id v5 = "-[CSLocalAttendingInitiator setAttendingState:]_block_invoke";
    __int16 v6 = 1024;
    int v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s [Test] set attending state to : %d",  (uint8_t *)&v4,  0x12u);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + ++*(void *)(*(void *)(result + 32) + 8LL) = *(_BYTE *)(a1 + 40);
}

uint64_t sub_100152AAC(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 8LL);
  return result;
}

void sub_1001534E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100153D34(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  int v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _accessoryGoodnessScoreEvaluator]);
  id v5 = (id)objc_claimAutoreleasedReturnValue([v3 objectForKey:*(void *)(a1 + 32)]);

  int v4 = v5;
  if (v5)
  {
    [v5 preheat];
    int v4 = v5;
  }
}

void sub_100153DA4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
  [v2 clearMyriadSettingsOnAccessory:*(void *)(a1 + 32)];
}

void sub_100153DE8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  int v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _accessoryGoodnessScoreEvaluator]);
  [v3 removeObjectForKey:*(void *)(a1 + 32)];

  id v4 = (id)objc_claimAutoreleasedReturnValue(+[CSFPreferences sharedPreferences](&OBJC_CLASS___CSFPreferences, "sharedPreferences"));
  [v4 clearMyriadSettingsOnAccessory:*(void *)(a1 + 32)];
}

void sub_100153E5C(uint64_t a1)
{
  id v2 = (id *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v11 = (id)objc_claimAutoreleasedReturnValue([WeakRetained _accessoryGoodnessScoreEvaluator]);

  id v4 = v11;
  if (v11)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:*(void *)(a1 + 32)]);

    id v4 = v11;
    if (!v5)
    {
      __int16 v6 = (void *)objc_claimAutoreleasedReturnValue(+[CSHomeHubManager sharedManager](&OBJC_CLASS___CSHomeHubManager, "sharedManager"));
      int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 getAFInstanceContextForDeviceId:*(void *)(a1 + 40)]);

      char v8 = -[CSMyriadGoodnessScoreEvaluator initWithInstanceContext:]( objc_alloc(&OBJC_CLASS___CSMyriadGoodnessScoreEvaluator),  "initWithInstanceContext:",  v7);
      id v9 = objc_loadWeakRetained(v2);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 _accessoryGoodnessScoreEvaluator]);
      [v10 setObject:v8 forKey:*(void *)(a1 + 32)];

      id v4 = v11;
    }
  }
}

void sub_100153F50(void *a1)
{
  uint64_t v2 = a1[5];
  if (a1[4])
  {
    int v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 8), "objectForKey:"));
    id v4 = v3;
    if (v3)
    {
      [v3 bumpForGoodnessScoreContext:a1[6]];
      *(void *)(*(void *)(a1[7] + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = v5;
    }

    else
    {
      int v7 = (os_log_s *)CSLogContextFacilityCoreSpeech;
      if (os_log_type_enabled(CSLogContextFacilityCoreSpeech, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = a1[4];
        int v9 = 136315395;
        id v10 = "-[CSMyriadDeviceManager myriadBoostScoreForAccessoryWithId:]_block_invoke";
        __int16 v11 = 2113;
        uint64_t v12 = v8;
        _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Error finding goodness score evaluator for accessory with id %{private}@",  (uint8_t *)&v9,  0x16u);
      }
    }
  }

  else
  {
    [*(id *)(v2 + 16) bumpForGoodnessScoreContext:a1[6]];
    *(void *)(*(void *)(a1[7] + 8LL) + ++*(void *)(*(void *)(result + 32) + 24LL) = v6;
  }

void sub_1001540AC(id a1)
{
  id v1 = -[CSMyriadDeviceManager _init](objc_alloc(&OBJC_CLASS___CSMyriadDeviceManager), "_init");
  uint64_t v2 = (void *)qword_100280268;
  qword_100280268 = (uint64_t)v1;
}

void sub_1001548F4(uint64_t a1, BOOL a2, float a3)
{
  xpc_object_t xdict = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
  xpc_dictionary_set_BOOL(xdict, "result", a2);
  xpc_dictionary_set_double(xdict, "power", a3);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 40), xdict);
}

void operator delete[](void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

id objc_msgSend_CSBluetoothWirelessSplitterMonitor_didReceiveSplitterStateChange_shouldDisableSpeakerVerificationInSplitterMode_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "CSBluetoothWirelessSplitterMonitor:didReceiveSplitterStateChange:shouldDisableSpeakerVerificationInSplitterMode:");
}

id objc_msgSend_CSSpeakerRecognitionAssetDownloadMonitor_didInstallNewAsset_assetProviderType_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CSSpeakerRecognitionAssetDownloadMonitor:didInstallNewAsset:assetProviderType:");
}

id objc_msgSend_CSSpeakerRecognitionAssetMetaUpdateMonitor_didReceiveNewSpeakerRecognitionAssetMetaData_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CSSpeakerRecognitionAssetMetaUpdateMonitor:didReceiveNewSpeakerRecognitionAssetMetaData:");
}

id objc_msgSend_CSSpeechEndpointAssetMetaUpdateMonitor_didReceiveNewSpeechEndpointAssetMetaData_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CSSpeechEndpointAssetMetaUpdateMonitor:didReceiveNewSpeechEndpointAssetMetaData:");
}

id objc_msgSend_CSVoiceTriggerAssetMetaUpdateMonitor_didReceiveNewVoiceTriggerAssetMetaData_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CSVoiceTriggerAssetMetaUpdateMonitor:didReceiveNewVoiceTriggerAssetMetaData:");
}

id objc_msgSend_CSVoiceTriggerFirstPassMetricsWithFirstPassInfoGeneratedTime_firstPassInfoProcessedTime_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "CSVoiceTriggerFirstPassMetricsWithFirstPassInfoGeneratedTime:firstPassInfoProcessedTime:");
}

id objc_msgSend__compressFilesInDirectory_matchingPredicate_sortedByCreationDate_compressedFileAvailable_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_compressFilesInDirectory:matchingPredicate:sortedByCreationDate:compressedFileAvailable:");
}

id objc_msgSend__computeTTSVolumeForSpeechLevel_andMusicLevel_andSpeakerDistance_andNoiseActivityLevel_andNoiseActivityCount_wasVoiceTrigger_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_computeTTSVolumeForSpeechLevel:andMusicLevel:andSpeakerDistance:andNoiseActivityLevel:andNoiseActivityCount: wasVoiceTrigger:");
}

id objc_msgSend__convertBufferedLPCM_allowPartial_timestamp_arrivalTimestampToAudioRecorder_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_convertBufferedLPCM:allowPartial:timestamp:arrivalTimestampToAudioRecorder:");
}

id objc_msgSend__deliverRecognitionCompletionWithStatistics_requestId_endpointMode_error_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_deliverRecognitionCompletionWithStatistics:requestId:endpointMode:error:");
}

id objc_msgSend__emitEndpointDetectedEventWithEndpointTimeMs_endpointBufferHostTime_endpointerFeatures_endpointerDecisionLagInNs_extraDelayMs_endpointScore_asrFeaturesLatencies_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_emitEndpointDetectedEventWithEndpointTimeMs:endpointBufferHostTime:endpointerFeatures:endpointerDecisionLagI nNs:extraDelayMs:endpointScore:asrFeaturesLatencies:");
}

id objc_msgSend__estimatedTTSVolume_lowerLimit_upperLimit_TTSmappingInputRangeLow_TTSmappingInputRangeHigh_TTSmappingOutputRangeLow_TTSmappingOutputRangeHigh_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_estimatedTTSVolume:lowerLimit:upperLimit:TTSmappingInputRangeLow:TTSmappingInputRangeHigh:TTSmappingOutputRa ngeLow:TTSmappingOutputRangeHigh:");
}

id objc_msgSend__fetchRecognizerLanguageWithSiriLanguage_UILanguage_taskString_asrLocale_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_fetchRecognizerLanguageWithSiriLanguage:UILanguage:taskString:asrLocale:");
}

id objc_msgSend__generateEndpointerFeaturesWithEffectiveClientProcessedAudioMs_osdFeatures_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_generateEndpointerFeaturesWithEffectiveClientProcessedAudioMs:osdFeatures:completion:");
}

id objc_msgSend__generateMyriadInfo_hsStart_triggerEnd_writeFile_score_triggerSource_channel_audioProviderUUID_absoluteTime_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_generateMyriadInfo:hsStart:triggerEnd:writeFile:score:triggerSource:channel:audioProviderUUID:absoluteTime:");
}

id objc_msgSend__getFilteredAccessoryRTBlobListForRequestOptions_accessoryBlobs_forceSkipEngineVersionCheck_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_getFilteredAccessoryRTBlobListForRequestOptions:accessoryBlobs:forceSkipEngineVersionCheck:");
}

id objc_msgSend__handleAlertProvidingRequestTypeAlertStartTimeMessage_messageBody_client_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleAlertProvidingRequestTypeAlertStartTimeMessage:messageBody:client:");
}

id objc_msgSend__handleAlertProvidingRequestTypeConfigureAlertBehavior_messageBody_client_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleAlertProvidingRequestTypeConfigureAlertBehavior:messageBody:client:");
}

id objc_msgSend__handleAlertProvidingRequestTypePlayAlertSoundMessage_messageBody_client_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleAlertProvidingRequestTypePlayAlertSoundMessage:messageBody:client:");
}

id objc_msgSend__handleAlertProvidingRequestTypePlayRecordStartingAlertAndResetEndpointerMessage_messageBody_client_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_handleAlertProvidingRequestTypePlayRecordStartingAlertAndResetEndpointerMessage:messageBody:client:");
}

id objc_msgSend__handleDidRecognizedFinalSpeechPackage_multiUserSpeechPackage_requestId_metadata_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleDidRecognizedFinalSpeechPackage:multiUserSpeechPackage:requestId:metadata:");
}

id objc_msgSend__handleDidRecognizedSpeechPackageForEagerRecognitionCandidate_multiUserSpeechPackage_requestId_rcId_metadata_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_handleDidRecognizedSpeechPackageForEagerRecognitionCandidate:multiUserSpeechPackage:requestId:rcId:metadata:");
}

id objc_msgSend__handleJarvisVoiceTriggerFromDeviceId_activationInfo_triggerHostTime_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleJarvisVoiceTriggerFromDeviceId:activationInfo:triggerHostTime:completion:");
}

id objc_msgSend__handleMeterProvidingRequestTypePowerMessage_messageBody_client_powerType_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleMeterProvidingRequestTypePowerMessage:messageBody:client:powerType:");
}

id objc_msgSend__handleMeterProvidingRequestTypeSetMeteringEnabledMessage_messageBody_client_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleMeterProvidingRequestTypeSetMeteringEnabledMessage:messageBody:client:");
}

id objc_msgSend__handleSecondPassResult_secondPassRequest_deviceId_requestOption_error_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleSecondPassResult:secondPassRequest:deviceId:requestOption:error:completion:");
}

id objc_msgSend__handleSessionProvidingRequestTypeDuckDefaultOutputAudioDevice_messageBody_client_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleSessionProvidingRequestTypeDuckDefaultOutputAudioDevice:messageBody:client:");
}

id objc_msgSend__handleSessionProvidingRequestTypeEnableSmartRoutingConsideration_messageBody_client_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleSessionProvidingRequestTypeEnableSmartRoutingConsideration:messageBody:client:");
}

id objc_msgSend__handleSessionProvidingRequestTypeSetDuckOthersOption_messageBody_client_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleSessionProvidingRequestTypeSetDuckOthersOption:messageBody:client:");
}

id objc_msgSend__handleShouldAcceptEagerResultWithRequestId_rcId_duration_shouldAccept_featuresToLog_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleShouldAcceptEagerResultWithRequestId:rcId:duration:shouldAccept:featuresToLog:");
}

id objc_msgSend__handleStartProcessingWithRecordContext_withAudioStartStreamOptions_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleStartProcessingWithRecordContext:withAudioStartStreamOptions:completion:");
}

id objc_msgSend__handleVoiceTriggerFirstPassFromHearst_deviceId_audioProviderUUID_firstPassInfo_rtModelRequestOptions_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_handleVoiceTriggerFirstPassFromHearst:deviceId:audioProviderUUID:firstPassInfo:rtModelRequestOptions:completion:");
}

id objc_msgSend__handleVoiceTriggerFirstPassFromHearstAP_deviceId_audioProviderUUID_firstPassInfo_rtModelRequestOptions_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_handleVoiceTriggerFirstPassFromHearstAP:deviceId:audioProviderUUID:firstPassInfo:rtModelRequestOptions:completion:");
}

id objc_msgSend__handleVoiceTriggerFirstPassFromJarvis_deviceId_audioProviderUUID_firstPassInfo_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleVoiceTriggerFirstPassFromJarvis:deviceId:audioProviderUUID:firstPassInfo:completion:");
}

id objc_msgSend__handleVoiceTriggerFirstPassFromRemora_deviceId_audioProviderUUID_firstPassInfo_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleVoiceTriggerFirstPassFromRemora:deviceId:audioProviderUUID:firstPassInfo:completion:");
}

id objc_msgSend__handleVoiceTriggerSecondPassWithSource_deviceId_event_audioProviderUUID_firstPassInfo_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_handleVoiceTriggerSecondPassWithSource:deviceId:event:audioProviderUUID:firstPassInfo:");
}

id objc_msgSend__handleXPCTimeConvertProvidingTypeHostTimeFromSampleCountMessage_messageBody_client_streamHandleId_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_handleXPCTimeConvertProvidingTypeHostTimeFromSampleCountMessage:messageBody:client:streamHandleId:");
}

id objc_msgSend__handleXPCTimeConvertProvidingTypeSampleCountFromHostTimeMessage_messageBody_client_streamHandleId_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_handleXPCTimeConvertProvidingTypeSampleCountFromHostTimeMessage:messageBody:client:streamHandleId:");
}

id objc_msgSend__isMagusSupportedWithRecordRoute_playbackRoute_isInSplitterMode_isInActiveCall_isSupportedRequestType_audioSessionId_recordDeviceInfo_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_isMagusSupportedWithRecordRoute:playbackRoute:isInSplitterMode:isInActiveCall:isSupportedRequestType:audioSe ssionId:recordDeviceInfo:");
}

id objc_msgSend__logMHOdldFalseTriggerMitigationScores_withOdldScores_withOdldScoreThreshold_withSocialScore_withAnchorRequestId_withAnchorSocialScore_withPrevRequestId_withConversationalScore_withSuccess_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_logMHOdldFalseTriggerMitigationScores:withOdldScores:withOdldScoreThreshold:withSocialScore:withAnchorReques tId:withAnchorSocialScore:withPrevRequestId:withConversationalScore:withSuccess:");
}

id objc_msgSend__logSpeakerFalseTriggerMitigationScore_withSpeakerMatchScore_withSpeakerScoreThreshold_withAudioDuration_withSuccess_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_logSpeakerFalseTriggerMitigationScore:withSpeakerMatchScore:withSpeakerScoreThreshold:withAudioDuration:withSuccess:");
}

id objc_msgSend__logStopAdBlockerEventWithDissmissalType_withAdName_withRequestMHUUID_fromEndpoint_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_logStopAdBlockerEventWithDissmissalType:withAdName:withRequestMHUUID:fromEndpoint:");
}

id objc_msgSend__logURESEndMessageWithScore_threshold_spkrIDThreshold_assetVersion_withMhId_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_logURESEndMessageWithScore:threshold:spkrIDThreshold:assetVersion:withMhId:");
}

id objc_msgSend__notifyImplicitUtterance_audioDeviceType_audioRecordType_voiceTriggerEventInfo_otherCtxt_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_notifyImplicitUtterance:audioDeviceType:audioRecordType:voiceTriggerEventInfo:otherCtxt:completion:");
}

id objc_msgSend__processFloatAudioBuffer_numSamples_numChannels_startSampleCount_soundType_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_processFloatAudioBuffer:numSamples:numChannels:startSampleCount:soundType:");
}

id objc_msgSend__processGradingDataFetchCommandWithRequest_ofLogType_fromSenderID_withReply_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_processGradingDataFetchCommandWithRequest:ofLogType:fromSenderID:withReply:");
}

id objc_msgSend__processReverseTransferVoiceProfileCommandFromPeerId_requestInfo_withReply_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_processReverseTransferVoiceProfileCommandFromPeerId:requestInfo:withReply:");
}

id objc_msgSend__reportVoiceTriggerFirstPassFireFromAPWithSource_voiceTriggerFirstPassInfo_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_reportVoiceTriggerFirstPassFireFromAPWithSource:voiceTriggerFirstPassInfo:");
}

id objc_msgSend__requestStartAudioStreamProviderWithContext_secondPassRequest_startStreamOption_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_requestStartAudioStreamProviderWithContext:secondPassRequest:startStreamOption:completion:");
}

id objc_msgSend__requestStartAudioStreamWitContext_audioProviderUUID_startStreamOption_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_requestStartAudioStreamWitContext:audioProviderUUID:startStreamOption:completion:");
}

id objc_msgSend__requestStartAudioStreamWitContext_secondPassRequest_startStreamOption_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_requestStartAudioStreamWitContext:secondPassRequest:startStreamOption:completion:");
}

id objc_msgSend__sendGradingData_withFileName_toPeerId_withCompressedFlag_withUncompressedDataSize_withBatchId_withRetainFileFlag_withFilePrefix_withCompletion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_sendGradingData:withFileName:toPeerId:withCompressedFlag:withUncompressedDataSize:withBatchId:withRetainFile Flag:withFilePrefix:withCompletion:");
}

id objc_msgSend__setKeywordDetectorStartMachTime_detectorEndMachTime_lastAudioPacketAnalyzedMachTime_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setKeywordDetectorStartMachTime:detectorEndMachTime:lastAudioPacketAnalyzedMachTime:");
}

id objc_msgSend__setRecordingStartTimeWithStartStreamOption_audioRecordContext_voiceTriggerInfo_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setRecordingStartTimeWithStartStreamOption:audioRecordContext:voiceTriggerInfo:");
}

id objc_msgSend__setupForBluetoothDeviceIfNeededWithDeviceType_prepareCompletion_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_setupForBluetoothDeviceIfNeededWithDeviceType:prepareCompletion:completion:");
}

id objc_msgSend__shouldAcceptEagerResultForDuration_asrFeatures_lastReportedEndpointTimeMs_osdFeatures_resultsCompletionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_shouldAcceptEagerResultForDuration:asrFeatures:lastReportedEndpointTimeMs:osdFeatures:resultsCompletionHandler:");
}

id objc_msgSend__voiceTriggerRTModelForVersion_minorVersion_accessoryRTModelType_accessoryInfo_endpointId_downloadedModels_preinstalledModels_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:accessoryInfo:endpointId:downloadedModels:pr einstalledModels:completion:");
}

id objc_msgSend_accessorySiriClientBehaviorMonitor_didStartStreamWithContext_successfully_option_withEventUUID_forAccessory_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "accessorySiriClientBehaviorMonitor:didStartStreamWithContext:successfully:option:withEventUUID:forAccessory:");
}

id objc_msgSend_accessorySiriClientBehaviorMonitor_didStopStream_reason_withEventUUID_forAccessory_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessorySiriClientBehaviorMonitor:didStopStream:reason:withEventUUID:forAccessory:");
}

id objc_msgSend_accessorySiriClientBehaviorMonitor_willStartStreamWithContext_option_forAccessory_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessorySiriClientBehaviorMonitor:willStartStreamWithContext:option:forAccessory:");
}

id objc_msgSend_adBlockerStoreHasUpdateWithCatalog_withResetDictionary_withMaxFingerprintBufferSize_withAssetVersion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "adBlockerStoreHasUpdateWithCatalog:withResetDictionary:withMaxFingerprintBufferSize:withAssetVersion:");
}

id objc_msgSend_addPackets_audioStreamHandleId_remoteVAD_timestamp_arrivalTimestampToAudioRecorder_wasBuffered_receivedNumChannels_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "addPackets:audioStreamHandleId:remoteVAD:timestamp:arrivalTimestampToAudioRecorder:wasBuffered:receivedNumChannels:");
}

id objc_msgSend_attSiriNode_didDetectEndpointEventAtTime_eventType_withMetrics_useEndpointerSignal_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "attSiriNode:didDetectEndpointEventAtTime:eventType:withMetrics:useEndpointerSignal:");
}

id objc_msgSend_attSiriNode_didDetectHardEndpointAtTime_withMetrics_usesAutomaticEndPointing_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "attSiriNode:didDetectHardEndpointAtTime:withMetrics:usesAutomaticEndPointing:");
}

id objc_msgSend_attSiriNode_didUpdateAnchorMachAbsTime_numSamplesProcessedBeforeAnchorTime_isAnchorTimeBuffered_audioDeliveryHostTimeDelta_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "attSiriNode:didUpdateAnchorMachAbsTime:numSamplesProcessedBeforeAnchorTime:isAnchorTimeBuffered:audioDeliveryHostTimeDelta:");
}

id objc_msgSend_attSiriNode_didUpdateFirstAudioPacketTimestamp_firstAudioSampleSensorTimestamp_firstAudioStartSampleCount_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "attSiriNode:didUpdateFirstAudioPacketTimestamp:firstAudioSampleSensorTimestamp:firstAudioStartSampleCount:");
}

id objc_msgSend_attSiriSignalProvider_silenceFramesCountMs_silenceProbability_silenceDurationMs_processedAudioMs_deviceHasBoronEnabled_latestBoronActiveSampleCount_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "attSiriSignalProvider:silenceFramesCountMs:silenceProbability:silenceDurationMs:processedAudioMs:deviceHasBor onEnabled:latestBoronActiveSampleCount:");
}

id objc_msgSend_attSiriUresNode_tcuGeneratedForRequestId_withNldaScore_withProcessedAudioDuration_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "attSiriUresNode:tcuGeneratedForRequestId:withNldaScore:withProcessedAudioDuration:");
}

id objc_msgSend_audioConverterDidConvertPackets_packets_durationInSec_timestamp_arrivalTimestampToAudioRecorder_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "audioConverterDidConvertPackets:packets:durationInSec:timestamp:arrivalTimestampToAudioRecorder:");
}

id objc_msgSend_audioEngineBufferAvailable_audioStreamHandleId_buffer_remoteVAD_atTime_isFileLoadedBuffer_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "audioEngineBufferAvailable:audioStreamHandleId:buffer:remoteVAD:atTime:isFileLoadedBuffer:");
}

id objc_msgSend_audioRecorderBufferAvailable_audioStreamHandleId_buffer_remoteVAD_atTime_arrivalTimestampToAudioRecorder_numberOfChannels_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "audioRecorderBufferAvailable:audioStreamHandleId:buffer:remoteVAD:atTime:arrivalTimestampToAudioRecorder:numberOfChannels:");
}

id objc_msgSend_audioSessionInfoProvider_didReceiveAudioSessionInterruptionNotificationWithUserInfo_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "audioSessionInfoProvider:didReceiveAudioSessionInterruptionNotificationWithUserInfo:");
}

id objc_msgSend_audioSessionInfoProvider_didReceiveAudioSessionMediaServicesWereLostNotificationWithUserInfo_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "audioSessionInfoProvider:didReceiveAudioSessionMediaServicesWereLostNotificationWithUserInfo:");
}

id objc_msgSend_audioSessionInfoProvider_didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "audioSessionInfoProvider:didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:");
}

id objc_msgSend_audioSessionInfoProvider_didReceiveAudioSessionRouteChangeNotificationWithUserInfo_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "audioSessionInfoProvider:didReceiveAudioSessionRouteChangeNotificationWithUserInfo:");
}

id objc_msgSend_classifyUserIdentityFor_withScores_lowScoreThreshold_highScoreThreshold_confidentThreshold_scoreDiffThreshold_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "classifyUserIdentityFor:withScores:lowScoreThreshold:highScoreThreshold:confidentThreshold:scoreDiffThreshold:");
}

id objc_msgSend_commandControlBehaviorMonitor_didStartStreamWithContext_successfully_option_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commandControlBehaviorMonitor:didStartStreamWithContext:successfully:option:");
}

id objc_msgSend_createAudioFileWriterForAdBlockerWithInputFormat_outputFormat_withAccessoryID_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createAudioFileWriterForAdBlockerWithInputFormat:outputFormat:withAccessoryID:");
}

id objc_msgSend_createAudioFileWriterForOpportuneSpeakListenerWithInputFormat_outputFormat_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createAudioFileWriterForOpportuneSpeakListenerWithInputFormat:outputFormat:");
}

id objc_msgSend_didEndpointWithFeatures_audioTimestamp_featuresToLog_endpointPosterior_extraDelayMs_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didEndpointWithFeatures:audioTimestamp:featuresToLog:endpointPosterior:extraDelayMs:");
}

id objc_msgSend_didReceiveAsrFeaturesWithWordCount_trailingSilenceDuration_eosLikelihood_pauseCounts_silencePosterior_taskName_processedAudioDurationInMilliseconds_fromServer_acousticEndpointerScore_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "didReceiveAsrFeaturesWithWordCount:trailingSilenceDuration:eosLikelihood:pauseCounts:silencePosterior:taskNam e:processedAudioDurationInMilliseconds:fromServer:acousticEndpointerScore:");
}

id objc_msgSend_didReceiveResultCandidateWithRequestId_rcId_inputOrigin_speechPackage_duration_taskName_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didReceiveResultCandidateWithRequestId:rcId:inputOrigin:speechPackage:duration:taskName:");
}

id objc_msgSend_didReceiveResultCandidateWithRequestId_rcId_multiUserSpeechPackage_topUserSpeechPackage_duration_taskName_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "didReceiveResultCandidateWithRequestId:rcId:multiUserSpeechPackage:topUserSpeechPackage:duration:taskName:");
}

id objc_msgSend_didReceiveResultCandidateWithRequestId_rcId_speechPackage_duration_metadata_taskName_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didReceiveResultCandidateWithRequestId:rcId:speechPackage:duration:metadata:taskName:");
}

id objc_msgSend_emitAdblockerLoggingWithDismissalType_withAdName_withAssetVersion_fromEndpoint_withRequestMHUUID_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "emitAdblockerLoggingWithDismissalType:withAdName:withAssetVersion:fromEndpoint:withRequestMHUUID:");
}

id objc_msgSend_emitEndpointDetectedEventWithEndpointerMetrics_withEndpointerModelType_withTrpId_withMhID_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "emitEndpointDetectedEventWithEndpointerMetrics:withEndpointerModelType:withTrpId:withMhID:");
}

id objc_msgSend_fetchStartSpeechWithOwnVoiceVadByProcessedAudioInMs_fetchOwnVoiceVADSignal_prependAudioDuration_speechDetectSampleCountThreshold_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "fetchStartSpeechWithOwnVoiceVadByProcessedAudioInMs:fetchOwnVoiceVADSignal:prependAudioDuration:speechDetectS ampleCountThreshold:completion:");
}

id objc_msgSend_fetchVoiceTriggerInfoWithAudioContext_resultVoiceTriggerInfo_resultRTSTriggerInfo_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchVoiceTriggerInfoWithAudioContext:resultVoiceTriggerInfo:resultRTSTriggerInfo:");
}

id objc_msgSend_generateConfusionPairsWithUUID_parameters_language_task_samplingRate_recognizedNbest_recognizedText_correctedText_selectedAlternatives_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "generateConfusionPairsWithUUID:parameters:language:task:samplingRate:recognizedNbest:recognizedText:corrected Text:selectedAlternatives:completion:");
}

id objc_msgSend_generateConfusionPairsWithUUID_parameters_language_task_samplingRate_recognizedTokens_recognizedText_correctedText_selectedAlternatives_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "generateConfusionPairsWithUUID:parameters:language:task:samplingRate:recognizedTokens:recognizedText:correcte dText:selectedAlternatives:completion:");
}

id objc_msgSend_getStartSpeechInfoForProcessedAudio_prependedAudio_speechDetectionSamples_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getStartSpeechInfoForProcessedAudio:prependedAudio:speechDetectionSamples:completion:");
}

id objc_msgSend_initWithAbsoluteTimestamp_firstPassPeakScoreHS_firstPassPeakScoreJS_firstPassTriggerSource_recognizerScoreHS_recognizerScoreJS_triggerScoreHS_triggerScoreJS_mitigationScore_invocationTypeID_repetitionSimilarityScore_tdSpeakerRecognizerCombinedScore_hwSampleRate_configVersion_keywordThresholdHS_keywordThresholdJS_tdSpeakerRecognizerCombinedThresholdHS_tdSpeakerRecognizerCombinedThresholdJS_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithAbsoluteTimestamp:firstPassPeakScoreHS:firstPassPeakScoreJS:firstPassTriggerSource:recognizerScoreHS: recognizerScoreJS:triggerScoreHS:triggerScoreJS:mitigationScore:invocationTypeID:repetitionSimilarityScore:td SpeakerRecognizerCombinedScore:hwSampleRate:configVersion:keywordThresholdHS:keywordThresholdJS:tdSpeakerReco gnizerCombinedThresholdHS:tdSpeakerRecognizerCombinedThresholdJS:");
}

id objc_msgSend_initWithAsset_assetConfig_firstPassSource_activeChannel_siriLanguage_shouldEnableShadowMicScore_rtmodelRequestOptions_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithAsset:assetConfig:firstPassSource:activeChannel:siriLanguage:shouldEnableShadowMicScore:rtmodelRequestOptions:");
}

id objc_msgSend_initWithAssetManager_withUAFAssetManager_withUAFDownloadMonitor_withLanguageCodeUpdateMonitor_withAssetOverrideFlag_withOverrideAssetPath_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithAssetManager:withUAFAssetManager:withUAFDownloadMonitor:withLanguageCodeUpdateMonitor:withAssetOverri deFlag:withOverrideAssetPath:");
}

id objc_msgSend_initWithAssetManager_withUAFAssetManager_withUAFDownloadMonitor_withLanguageCodeUpdateMonitor_withAssetOverrideFlag_withOverrideAssetPath_disableOnDeviceCompilation_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithAssetManager:withUAFAssetManager:withUAFDownloadMonitor:withLanguageCodeUpdateMonitor:withAssetOverri deFlag:withOverrideAssetPath:disableOnDeviceCompilation:");
}

id objc_msgSend_initWithAttSiriController_icRequestHandler_attendingUsecaseManager_attendingServiceListener_attendingStatesServiceListener_attendingConnectionManager_attendingStatesProvidingProxy_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithAttSiriController:icRequestHandler:attendingUsecaseManager:attendingServiceListener:attendingStatesSe rviceListener:attendingConnectionManager:attendingStatesProvidingProxy:");
}

id objc_msgSend_initWithAttendingType_detectedToken_triggerMachTime_triggerAbsStartSampleId_audioRecordType_audioRecordDeviceId_amountOfSpeechDetectedInMs_triggerThresholdInMs_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithAttendingType:detectedToken:triggerMachTime:triggerAbsStartSampleId:audioRecordType:audioRecordDevice Id:amountOfSpeechDetectedInMs:triggerThresholdInMs:");
}

id objc_msgSend_initWithAttendingType_startAttendingHostTime_useVAD_useOwnVoiceVAD_useBoron_startOfSpeechThresholdInMs_prependAudioDuration_timeoutThresholdInSec_triggerType_audioStreamHoldingDurationInSec_audioRecordType_deviceId_attendingListeningType_pauseDurationThreshold_maxPauseDelay_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithAttendingType:startAttendingHostTime:useVAD:useOwnVoiceVAD:useBoron:startOfSpeechThresholdInMs:prepen dAudioDuration:timeoutThresholdInSec:triggerType:audioStreamHoldingDurationInSec:audioRecordType:deviceId:att endingListeningType:pauseDurationThreshold:maxPauseDelay:");
}

id objc_msgSend_initWithAudioSrcNode_endpointerNode_osdNode_ssrNode_speechRecognitionNode_uresNode_needsSSRNode_aFtmNode_speechManager_siriEnabledMonitor_siriClientBehaviorMonitor_intuitiveConvAudioCaptureMonitor_rcHandler_tcuGenerator_continuityEndDetector_bridgeMessageHandler_audioCoordinator_magusSupportedPolicy_supportsAcousticProgressiveChecker_supportsUnderstandingOnDevice_requireASROnDevice_supportsHybridUnderstandingOnDevice_supportsLogger_supportTCU_audioSessionInfoProvider_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithAudioSrcNode:endpointerNode:osdNode:ssrNode:speechRecognitionNode:uresNode:needsSSRNode:aFtmNode:spee chManager:siriEnabledMonitor:siriClientBehaviorMonitor:intuitiveConvAudioCaptureMonitor:rcHandler:tcuGenerato r:continuityEndDetector:bridgeMessageHandler:audioCoordinator:magusSupportedPolicy:supportsAcousticProgressiv eChecker:supportsUnderstandingOnDevice:requireASROnDevice:supportsHybridUnderstandingOnDevice:supportsLogger: supportTCU:audioSessionInfoProvider:");
}

id objc_msgSend_initWithAudioStreamHandleId_audioStreamType_audioRecordContext_audioRecorder_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAudioStreamHandleId:audioStreamType:audioRecordContext:audioRecorder:");
}

id objc_msgSend_initWithCatalog_withMaxFingerprintBufferSize_shouldResetAdsDic_withAssetVersion_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCatalog:withMaxFingerprintBufferSize:shouldResetAdsDic:withAssetVersion:");
}

id objc_msgSend_initWithData_numChannels_numSamples_sampleByteDepth_startSampleCount_hostTime_arrivalHostTimeToAudioRecorder_wasBuffered_remoteVAD_isFloat_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithData:numChannels:numSamples:sampleByteDepth:startSampleCount:hostTime:arrivalHostTimeToAudioRecorder: wasBuffered:remoteVAD:isFloat:");
}

id objc_msgSend_initWithData_numChannels_numSamples_sampleByteDepth_startSampleCount_hostTime_remoteVAD_isFloat_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithData:numChannels:numSamples:sampleByteDepth:startSampleCount:hostTime:remoteVAD:isFloat:");
}

id objc_msgSend_initWithEndpointerNode_osdNode_ssrNode_asrNode_uresNode_needsSSRNode_aFtmNode_speechDetectionNode_ccController_isContinuousConverationEnabled_speechManager_siriEnabledMonitor_siriClientBehaviorMonitor_rcHandler_supportsAcousticProgressiveChecker_supportsUnderstandingOnDevice_requireASROnDevice_supportsHybridUnderstandingOnDevice_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithEndpointerNode:osdNode:ssrNode:asrNode:uresNode:needsSSRNode:aFtmNode:speechDetectionNode:ccControlle r:isContinuousConverationEnabled:speechManager:siriEnabledMonitor:siriClientBehaviorMonitor:rcHandler:support sAcousticProgressiveChecker:supportsUnderstandingOnDevice:requireASROnDevice:supportsHybridUnderstandingOnDevice:");
}

id objc_msgSend_initWithFirstPassSource_deviceId_audioProviderUUID_firstPassInfo_rejectionMHUUID_isSecondChanceRun_firstpassMetrics_rtModelRequestOptions_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithFirstPassSource:deviceId:audioProviderUUID:firstPassInfo:rejectionMHUUID:isSecondChanceRun:firstpassM etrics:rtModelRequestOptions:");
}

id objc_msgSend_initWithGeneratedHostTime_lastTRPCandidateId_trpDetectedAudioTimeStamp_requestId_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithGeneratedHostTime:lastTRPCandidateId:trpDetectedAudioTimeStamp:requestId:");
}

id objc_msgSend_initWithHasCancelled_withFingerprintBuffer_withAccessoryId_withAdBlockerLogger_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithHasCancelled:withFingerprintBuffer:withAccessoryId:withAdBlockerLogger:");
}

id objc_msgSend_initWithLanguage_requestIdentifier_dictationUIInteractionIdentifier_task_loggingContext_applicationName_profile_overrides_modelOverrideURL_originalAudioFileURL_codec_narrowband_detectUtterances_censorSpeech_farField_secureOfflineOnly_shouldStoreAudioOnDevice_continuousListening_shouldHandleCapitalization_isSpeechAPIRequest_maximumRecognitionDuration_endpointStart_inputOrigin_location_jitGrammar_deliverEagerPackage_disableDeliveringAsrFeatures_enableEmojiRecognition_enableAutoPunctuation_enableVoiceCommands_sharedUserInfos_prefixText_postfixText_selectedText_powerContext_recognitionStart_shouldGenerateVoiceCommandCandidates_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithLanguage:requestIdentifier:dictationUIInteractionIdentifier:task:loggingContext:applicationName:profi le:overrides:modelOverrideURL:originalAudioFileURL:codec:narrowband:detectUtterances:censorSpeech:farField:se cureOfflineOnly:shouldStoreAudioOnDevice:continuousListening:shouldHandleCapitalization:isSpeechAPIRequest:ma ximumRecognitionDuration:endpointStart:inputOrigin:location:jitGrammar:deliverEagerPackage:disableDeliveringA srFeatures:enableEmojiRecognition:enableAutoPunctuation:enableVoiceCommands:sharedUserInfos:prefixText:postfi xText:selectedText:powerContext:recognitionStart:shouldGenerateVoiceCommandCandidates:");
}

id objc_msgSend_initWithMachService_withServiceInterface_withServiceObject_withDelegateInterface_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMachService:withServiceInterface:withServiceObject:withDelegateInterface:");
}

id objc_msgSend_initWithMachService_withServiceInterface_withServiceObject_withDelegateInterface_queue_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMachService:withServiceInterface:withServiceObject:withDelegateInterface:queue:");
}

id objc_msgSend_initWithModelFile_defaultThresholdPartial_defaultThresholdRC_relaxedThresholdPartial_relaxedThresholdRC_extraDelayMs_continuityWindowDuration_speechDetectedThreshold_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithModelFile:defaultThresholdPartial:defaultThresholdRC:relaxedThresholdPartial:relaxedThresholdRC:extra DelayMs:continuityWindowDuration:speechDetectedThreshold:");
}

id objc_msgSend_initWithOdldScore_aftmScore_spkrIdScore_lrnnScore_checkerScore_invocationType_lrnnThreshold_lrnnScale_lrnnOffset_conversationalOdldScore_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithOdldScore:aftmScore:spkrIdScore:lrnnScore:checkerScore:invocationType:lrnnThreshold:lrnnScale:lrnnOff set:conversationalOdldScore:");
}

id objc_msgSend_initWithProtocolVersion_buildVersion_deviceProductVersion_deviceProductType_deviceCategory_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithProtocolVersion:buildVersion:deviceProductVersion:deviceProductType:deviceCategory:");
}

id objc_msgSend_initWithRoute_isRemoteDevice_remoteDeviceUID_remoteDeviceProductIdentifier_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithRoute:isRemoteDevice:remoteDeviceUID:remoteDeviceProductIdentifier:");
}

id objc_msgSend_initWithSilenceFramesCountMs_silenceProbability_silenceDurationMs_processedAudioMs_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSilenceFramesCountMs:silenceProbability:silenceDurationMs:processedAudioMs:");
}

id objc_msgSend_initWithSpeechManager_voiceTriggerEnabledMonitor_siriClientBehaviorMonitor_opportuneSpeakEventMonitor_phoneCallStateMonitor_otherAppRecordingStateMonitor_voiceTriggerHearstAPEnabledPolicy_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithSpeechManager:voiceTriggerEnabledMonitor:siriClientBehaviorMonitor:opportuneSpeakEventMonitor:phoneCa llStateMonitor:otherAppRecordingStateMonitor:voiceTriggerHearstAPEnabledPolicy:");
}

id objc_msgSend_initWithStopRecordingReason_expectedStopHostTime_trailingSilenceDurationAtEndpoint_holdRequest_supportsMagus_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithStopRecordingReason:expectedStopHostTime:trailingSilenceDurationAtEndpoint:holdRequest:supportsMagus:");
}

id objc_msgSend_initWithTcuId_requestId_tcuState_speechEvent_voiceTriggerPhraseType_siriIntendedInfo_prevTCUIds_startAudioTimeStampInMs_endAudioTimeStampInMs_speechPackage_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithTcuId:requestId:tcuState:speechEvent:voiceTriggerPhraseType:siriIntendedInfo:prevTCUIds:startAudioTim eStampInMs:endAudioTimeStampInMs:speechPackage:");
}

id objc_msgSend_initWithTimeout_clientIdentity_requireRecordModeLock_requireListeningMicIndicatorLock_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithTimeout:clientIdentity:requireRecordModeLock:requireListeningMicIndicatorLock:");
}

id objc_msgSend_initWithTotalAudioRecorded_endpointBufferHostTime_featuresAtEndpoint_endpointerType_asrFeatureLatencyDistribution_additionalMetrics_trailingSilenceDurationAtEndpoint_requestId_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithTotalAudioRecorded:endpointBufferHostTime:featuresAtEndpoint:endpointerType:asrFeatureLatencyDistribu tion:additionalMetrics:trailingSilenceDurationAtEndpoint:requestId:");
}

id objc_msgSend_initWithTotalAudioRecorded_endpointBufferHostTime_featuresAtEndpoint_endpointerType_asrFeatureLatencyDistribution_additionalMetrics_trailingSilenceDurationAtEndpoint_requestId_osdFeatures_asrFeatures_isRequestTimeOut_assetConfigVersion_blkHepAudioOrigin_vtExtraAudioAtStartInMs_firstAudioSampleSensorTimestamp_isAnchorTimeBuffered_endpointHostTime_audioDeliveryHostTimeDelta_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithTotalAudioRecorded:endpointBufferHostTime:featuresAtEndpoint:endpointerType:asrFeatureLatencyDistribu tion:additionalMetrics:trailingSilenceDurationAtEndpoint:requestId:osdFeatures:asrFeatures:isRequestTimeOut:a ssetConfigVersion:blkHepAudioOrigin:vtExtraAudioAtStartInMs:firstAudioSampleSensorTimestamp:isAnchorTimeBuffe red:endpointHostTime:audioDeliveryHostTimeDelta:");
}

id objc_msgSend_initWithTrailingSilenceDuration_clientSilenceFramesCount_endOfSentenceLikelihood_wordCount_serverFeaturesLatency_clientSilenceProbability_rcTrailingSilenceDuration_rcEndOfSentenceLikelihood_rcWordCount_rcServerFeaturesLatency_silencePosterior_acousticEndpointerScore_silencePosteriorNF_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithTrailingSilenceDuration:clientSilenceFramesCount:endOfSentenceLikelihood:wordCount:serverFeaturesLate ncy:clientSilenceProbability:rcTrailingSilenceDuration:rcEndOfSentenceLikelihood:rcWordCount:rcServerFeatures Latency:silencePosterior:acousticEndpointerScore:silencePosteriorNF:");
}

id objc_msgSend_initWithWordCount_trailingSilenceDuration_endOfSentenceLikelihood_acousticEndpointerScore_pauseCounts_silencePosterior_clientSilenceFramesCountMs_clientSilenceProbability_silencePosteriorNF_serverFeaturesLatency_eagerResultEndTime_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithWordCount:trailingSilenceDuration:endOfSentenceLikelihood:acousticEndpointerScore:pauseCounts:silence Posterior:clientSilenceFramesCountMs:clientSilenceProbability:silencePosteriorNF:serverFeaturesLatency:eagerResultEndTime:");
}

id objc_msgSend_initWithWordCount_trailingSilenceDuration_eosLikelihood_pauseCounts_silencePosterior_taskName_processedAudioDurationInMilliseconds_acousticEndpointerScore_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithWordCount:trailingSilenceDuration:eosLikelihood:pauseCounts:silencePosterior:taskName:processedAudioD urationInMilliseconds:acousticEndpointerScore:");
}

id objc_msgSend_initWithXpcListener_withMachService_withServiceInterface_withServiceObject_withDelegateInterface_queue_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithXpcListener:withMachService:withServiceInterface:withServiceObject:withDelegateInterface:queue:");
}

id objc_msgSend_intuitiveConvAudioCaptureMonitor_didStartAudioCaptureSuccessfully_option_eventUUID_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intuitiveConvAudioCaptureMonitor:didStartAudioCaptureSuccessfully:option:eventUUID:");
}

id objc_msgSend_intuitiveConvAudioCaptureMonitor_willStartAudioCaptureWithContext_option_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intuitiveConvAudioCaptureMonitor:willStartAudioCaptureWithContext:option:");
}

id objc_msgSend_intuitiveConvAudioCaptureMonitorDidStopAudioCapture_stopStreamOption_eventUUID_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intuitiveConvAudioCaptureMonitorDidStopAudioCapture:stopStreamOption:eventUUID:");
}

id objc_msgSend_isMagusSupportedWithAudioRecordContext_recordRoute_playbackRoute_audioSessionId_recordDeviceInfo_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "isMagusSupportedWithAudioRecordContext:recordRoute:playbackRoute:audioSessionId:recordDeviceInfo:");
}

id objc_msgSend_localSpeechServiceDidCompletionRecognitionWithStatistics_requestId_endpointMode_error_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localSpeechServiceDidCompletionRecognitionWithStatistics:requestId:endpointMode:error:");
}

id objc_msgSend_localSpeechServiceDidReceivedEagerRecognitionCandidateWithRequestId_rcId_multiUserSpeechPackage_duration_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "localSpeechServiceDidReceivedEagerRecognitionCandidateWithRequestId:rcId:multiUserSpeechPackage:duration:");
}

id objc_msgSend_localSpeechServiceDidReceivedEagerRecognitionCandidateWithRequestId_rcId_speechPackage_duration_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "localSpeechServiceDidReceivedEagerRecognitionCandidateWithRequestId:rcId:speechPackage:duration:");
}

id objc_msgSend_localSpeechServiceDidReceivedEagerRecognitionCandidateWithRequestId_rcId_speechPackage_duration_metadata_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "localSpeechServiceDidReceivedEagerRecognitionCandidateWithRequestId:rcId:speechPackage:duration:metadata:");
}

id objc_msgSend_localSpeechServiceDidReceivedEagerResultWithRequestId_rcId_shouldAccept_mitigationSignal_featuresToLog_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "localSpeechServiceDidReceivedEagerResultWithRequestId:rcId:shouldAccept:mitigationSignal:featuresToLog:");
}

id objc_msgSend_localSpeechServiceDidReceivedFinalResultWithRequestId_multiUserSpeechPackage_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localSpeechServiceDidReceivedFinalResultWithRequestId:multiUserSpeechPackage:");
}

id objc_msgSend_localSpeechServiceDidReceivedFinalResultWithRequestId_speechPackage_metadata_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localSpeechServiceDidReceivedFinalResultWithRequestId:speechPackage:metadata:");
}

id objc_msgSend_logMitigationFeatures_forTask_withModelOutput_forMHRequestId_forRequestId_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logMitigationFeatures:forTask:withModelOutput:forMHRequestId:forRequestId:");
}

id objc_msgSend_logTimeBasedTriggerLengthSampleCountStatistics_withAOPVTTriggerLengthSampleCount_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "logTimeBasedTriggerLengthSampleCountStatistics:withAOPVTTriggerLengthSampleCount:");
}

id objc_msgSend_notifyDarwinVoiceTrigger_deviceId_myriadPHash_myriadLateActivationExpirationTime_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "notifyDarwinVoiceTrigger:deviceId:myriadPHash:myriadLateActivationExpirationTime:completion:");
}

id objc_msgSend_notifyDidStartStreamWithContext_successfully_option_withEventUUID_forAccessory_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "notifyDidStartStreamWithContext:successfully:option:withEventUUID:forAccessory:");
}

id objc_msgSend_notifyImplicitTrainingUtteranceAvailable_forVoiceProfileId_withRecordDeviceInfo_withRecordCtxt_withVoiceTriggerCtxt_withOtherCtxt_assetToUse_withCompletion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "notifyImplicitTrainingUtteranceAvailable:forVoiceProfileId:withRecordDeviceInfo:withRecordCtxt:withVoiceTrigg erCtxt:withOtherCtxt:assetToUse:withCompletion:");
}

id objc_msgSend_opportuneSpeakBehaviorMonitor_didStartStreamWithContext_audioProviderUUID_successfully_option_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "opportuneSpeakBehaviorMonitor:didStartStreamWithContext:audioProviderUUID:successfully:option:");
}

id objc_msgSend_opportuneSpeakBehaviorMonitor_willStartStreamWithContext_audioProviderUUID_option_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "opportuneSpeakBehaviorMonitor:willStartStreamWithContext:audioProviderUUID:option:");
}

id objc_msgSend_osdProvider_silenceFramesCountMs_silenceProbability_silenceDurationMs_processedAudioMs_deviceHasBoronEnabled_latestBoronActiveSampleCount_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "osdProvider:silenceFramesCountMs:silenceProbability:silenceDurationMs:processedAudioMs:deviceHasBoronEnabled: latestBoronActiveSampleCount:");
}

id objc_msgSend_powerLogSelfTriggerSuppressionDetectedWithSpeakerType_withAudioSource_atTime_isPhoneCall_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "powerLogSelfTriggerSuppressionDetectedWithSpeakerType:withAudioSource:atTime:isPhoneCall:");
}

id objc_msgSend_powerLogSelfTriggerSuppressionStartWithSpeakerType_withAudioSource_atTime_isPhoneCall_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "powerLogSelfTriggerSuppressionStartWithSpeakerType:withAudioSource:atTime:isPhoneCall:");
}

id objc_msgSend_prepareToStartSpeechRequestWithStartStreamOption_audioRecordContext_voiceTriggerInfo_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prepareToStartSpeechRequestWithStartStreamOption:audioRecordContext:voiceTriggerInfo:");
}

id objc_msgSend_processASRFeaturesWithWordCount_trailingSilenceDuration_eosLikelihood_pauseCounts_silencePosterior_taskName_processedAudioDurationInMilliseconds_acousticEndpointerScore_fromServer_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "processASRFeaturesWithWordCount:trailingSilenceDuration:eosLikelihood:pauseCounts:silencePosterior:taskName:p rocessedAudioDurationInMilliseconds:acousticEndpointerScore:fromServer:");
}

id objc_msgSend_resetForNewRequestWithRecordContext_endpointerSettings_voiceTriggerInfo_osdMode_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetForNewRequestWithRecordContext:endpointerSettings:voiceTriggerInfo:osdMode:");
}

id objc_msgSend_resetForNewRequestWithSampleRate_recordContext_recordOption_voiceTriggerInfo_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetForNewRequestWithSampleRate:recordContext:recordOption:voiceTriggerInfo:");
}

id objc_msgSend_setupLocalSpeechRecognitionListenerWithXPCListener_machService_asrNode_ssrNode_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupLocalSpeechRecognitionListenerWithXPCListener:machService:asrNode:ssrNode:");
}

id objc_msgSend_shouldCancelBuiltInSecondPassWithBuiltInFirstPassScore_includeBoostForBuiltIn_accessoryFirstPassScore_includeBoostForAccessory_accessoryId_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "shouldCancelBuiltInSecondPassWithBuiltInFirstPassScore:includeBoostForBuiltIn:accessoryFirstPassScore:include BoostForAccessory:accessoryId:completion:");
}

id objc_msgSend_shouldCancelSecondPassOnAccessory_accessoryFirstPassScore_includeBoostForAccessory_buildInFirstPassScore_includeBoostForBuiltIn_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "shouldCancelSecondPassOnAccessory:accessoryFirstPassScore:includeBoostForAccessory:buildInFirstPassScore:incl udeBoostForBuiltIn:completion:");
}

id objc_msgSend_skipSamplesAtStartSuchThatNumSamplesReceivedSoFar_reachesACountOf_completionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "skipSamplesAtStartSuchThatNumSamplesReceivedSoFar:reachesACountOf:completionHandler:");
}

id objc_msgSend_speakAudio_withScaleFactor_outASBD_playbackStarted_userIntentOptions_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "speakAudio:withScaleFactor:outASBD:playbackStarted:userIntentOptions:completion:");
}

id objc_msgSend_speechRecognizerReadyForNewTurnWithSpeechStartDetectedAtHostTime_audioRecordType_audioRecordDeviceId_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "speechRecognizerReadyForNewTurnWithSpeechStartDetectedAtHostTime:audioRecordType:audioRecordDeviceId:");
}

id objc_msgSend_startSecondPassVoiceTriggerWithFirstPassSource_enablePHS_supportMultiPhrase_activeChannel_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startSecondPassVoiceTriggerWithFirstPassSource:enablePHS:supportMultiPhrase:activeChannel:");
}

id objc_msgSend_startUresRequestWithAudioRecordContext_forRequestId_mhId_voiceTriggerInfo_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startUresRequestWithAudioRecordContext:forRequestId:mhId:voiceTriggerInfo:");
}

id objc_msgSend_supportsMultiPhraseVoiceTriggerForEngineVersion_engineMinorVersion_accessoryRTModelType_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "supportsMultiPhraseVoiceTriggerForEngineVersion:engineMinorVersion:accessoryRTModelType:completion:");
}

id objc_msgSend_trainPersonalizedLMWithLanguage_configuration_asset_fides_activity_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trainPersonalizedLMWithLanguage:configuration:asset:fides:activity:completion:");
}

id objc_msgSend_triggerInvalidSiriProfileCleanupFromPersonalDevicesForLanguage_appDomain_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggerInvalidSiriProfileCleanupFromPersonalDevicesForLanguage:appDomain:");
}

id objc_msgSend_updateDefaultThresholdPartial_defaultThresholdRC_relaxedThresholdPartial_relaxedThresholdRC_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "updateDefaultThresholdPartial:defaultThresholdRC:relaxedThresholdPartial:relaxedThresholdRC:");
}

id objc_msgSend_updateEnhancedEndpointerDefaultThresholdPartial_defaultThresholdRC_relaxedThresholdPartial_relaxedThresholdRC_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "updateEnhancedEndpointerDefaultThresholdPartial:defaultThresholdRC:relaxedThresholdPartial:relaxedThresholdRC:");
}

id objc_msgSend_updateSpeechAndMusicStrengthsForVoiceTriggerStartingAtSample_andEndingAtSample_andVoiceTriggerMachTime_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "updateSpeechAndMusicStrengthsForVoiceTriggerStartingAtSample:andEndingAtSample:andVoiceTriggerMachTime:");
}

id objc_msgSend_updateVoiceCommandContextWithPrefixText_postfixText_selectedText_disambiguationActive_cursorInVisibleText_favorCommandSuppression_abortCommandSuppression_undoEvent_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "updateVoiceCommandContextWithPrefixText:postfixText:selectedText:disambiguationActive:cursorInVisibleText:fav orCommandSuppression:abortCommandSuppression:undoEvent:");
}

id objc_msgSend_updateVoiceCommandContextWithRequestId_prefixText_postfixText_selectedText_disambiguationActive_cursorInVisibleText_favorCommandSuppression_abortCommandSuppression_undoEvent_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "updateVoiceCommandContextWithRequestId:prefixText:postfixText:selectedText:disambiguationActive:cursorInVisib leText:favorCommandSuppression:abortCommandSuppression:undoEvent:");
}

id objc_msgSend_voiceTriggerPhraseNDEAPIScorerDidDetectedKeyword_bestStartSampleCount_bestEndSampleCount_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "voiceTriggerPhraseNDEAPIScorerDidDetectedKeyword:bestStartSampleCount:bestEndSampleCount:");
}

id objc_msgSend_voiceTriggerRTModelForVersion_minorVersion_accessoryRTModelType_accessoryInfo_endpointId_downloadedModels_preinstalledModels_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:accessoryInfo:endpointId:downloadedModels:pre installedModels:completion:");
}

id objc_msgSend_voiceTriggerRTModelForVersion_minorVersion_accessoryRTModelType_endpointId_downloadedModels_preinstalledModels_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "voiceTriggerRTModelForVersion:minorVersion:accessoryRTModelType:endpointId:downloadedModels:preinstalledModels:completion:");
}

id objc_msgSend_voiceTriggerRTModelWithRequestOptions_downloadedModels_preinstalledModels_completion_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "voiceTriggerRTModelWithRequestOptions:downloadedModels:preinstalledModels:completion:");
}

id objc_msgSend_xpcObject(void *a1, const char *a2, ...)
{
  return [a1 xpcObject];
}