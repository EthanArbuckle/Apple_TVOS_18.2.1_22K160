int main(int argc, const char **argv, const char **envp)
{
  qword_1000798B0 = (uint64_t)[objc_allocWithZone((Class)type metadata accessor for Daemon()) init];
  Daemon.startup()();
  return 0;
}

uint64_t variable initialization expression of Future._isCancelled()
{
  return 0LL;
}

uint64_t variable initialization expression of Future._resultValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56LL))(a2, 1LL, 1LL);
}

uint64_t variable initialization expression of Future._completionBlocks()
{
  return 0LL;
}

uint64_t variable initialization expression of Future.accessQueue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100005310();
  static DispatchQoS.unspecified.getter();
  v15 = &_swiftEmptyArrayStorage;
  unint64_t v10 = sub_10000534C();
  uint64_t v11 = sub_100005394((uint64_t *)&unk_100078770);
  unint64_t v12 = sub_1000053D4();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v11, v12, v4, v10);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v3,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001BLL,  0x8000000100055C20LL,  v9,  v6,  v3,  0LL);
}

uint64_t variable initialization expression of DeviceDiscoveryAutomationDevice.name()
{
  return 0LL;
}

uint64_t variable initialization expression of Daemon.xpcManager()
{
  if (qword_100076AF0 != -1) {
    swift_once(&qword_100076AF0, sub_10000558C);
  }
  return swift_retain(qword_1000798B8);
}

unint64_t sub_100005310()
{
  unint64_t result = qword_100078760;
  if (!qword_100078760)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100078760);
  }

  return result;
}

unint64_t sub_10000534C()
{
  unint64_t result = qword_100076B38;
  if (!qword_100076B38)
  {
    uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_100076B38);
  }

  return result;
}

uint64_t sub_100005394(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_1000053D4()
{
  unint64_t result = qword_100076B40;
  if (!qword_100076B40)
  {
    uint64_t v1 = sub_100005420((uint64_t *)&unk_100078770);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100076B40);
  }

  return result;
}

uint64_t sub_100005420(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

BOOL sub_100005464(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

uint64_t initializeBufferWithCopyOfBuffer for FMIPSearchRequestDevice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 sub_1000054C8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000054D4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000054F4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for audit_token_t(uint64_t a1)
{
}

void type metadata accessor for AuthChallengeDisposition(uint64_t a1)
{
}

void sub_100005548(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_10000558C()
{
  uint64_t v0 = type metadata accessor for XPCSessionManager();
  uint64_t result = swift_allocObject(v0, 24LL, 7LL);
  *(void *)(result + 16) = &_swiftEmptyDictionarySingleton;
  qword_1000798B8 = result;
  return result;
}

void sub_1000055C0(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_100005818();
  uint64_t v4 = (void *)static OS_os_log.default.getter();
  uint64_t v5 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)( "XPCSessionManager: Registering mach services",  44LL,  2LL,  &_mh_execute_header,  v4,  v5,  &_swiftEmptyArrayStorage);

  v6 = (uint64_t *)Constants.FMClientXPCServiceName.unsafeMutableAddressor();
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  id v9 = objc_allocWithZone(&OBJC_CLASS___NSXPCListener);
  swift_bridgeObjectRetain_n(v7, 2LL);
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v9 initWithMachServiceName:v10];

  [v11 setDelegate:a1];
  swift_beginAccess(v2 + 16, v20, 33LL, 0LL);
  swift_bridgeObjectRetain(v7);
  id v12 = v11;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + 16));
  uint64_t v19 = *(void *)(v2 + 16);
  *(void *)(v2 + 16) = 0x8000000000000000LL;
  sub_100048C18((uint64_t)v12, v8, v7, isUniquelyReferenced_nonNull_native);
  uint64_t v14 = *(void *)(v2 + 16);
  *(void *)(v2 + 16) = v19;
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v14);
  swift_endAccess(v20);
  [v12 resume];
  uint64_t v15 = sub_100005394(&qword_100079660);
  uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
  *(_OWORD *)(v16 + 16) = xmmword_10005B2C0;
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = sub_100005854();
  *(void *)(v16 + 32) = v8;
  *(void *)(v16 + 40) = v7;
  v17 = (void *)static OS_os_log.default.getter();
  uint64_t v18 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)("XPCSessionManager: Service registered %@", 40LL, 2LL, &_mh_execute_header, v17, v18, v16);
  swift_bridgeObjectRelease(v7);

  swift_bridgeObjectRelease(v16);
}

uint64_t sub_1000057D4()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for XPCSessionManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC20FMIPClientXPCService17XPCSessionManager);
}

unint64_t sub_100005818()
{
  unint64_t result = qword_100076C18;
  if (!qword_100076C18)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_os_log);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100076C18);
  }

  return result;
}

unint64_t sub_100005854()
{
  unint64_t result = qword_100078790;
  if (!qword_100078790)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100078790);
  }

  return result;
}

uint64_t sub_100005898()
{
  id v1 = [v0 idsDeviceIdentifier];
  if (!v1) {
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v5 = v4;

  Hasher.init(_seed:)(v30, *((void *)&_swiftEmptySetSingleton + 5));
  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
  String.hash(into:)(v30, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *((_BYTE *)&_swiftEmptySetSingleton + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)((char *)&_swiftEmptySetSingleton + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v8) & 1) != 0)
  {
    uint64_t v9 = ~v7;
    uint64_t v10 = *((void *)&_swiftEmptySetSingleton + 6);
    while (1)
    {
      uint64_t v11 = v10 + 24 * v8;
      if (*(_BYTE *)(v11 + 16) == 1)
      {
        uint64_t v12 = *(void *)(v11 + 8);
        BOOL v13 = *(void *)v11 == v3 && v12 == v5;
        if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v11, v12, v3, v5, 0LL) & 1) != 0) {
          break;
        }
      }

      unint64_t v8 = (v8 + 1) & v9;
    }

    swift_bridgeObjectRelease(v5);
    uint64_t v14 = &_swiftEmptySetSingleton;
    goto LABEL_30;
  }

LABEL_12:
  swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptySetSingleton);
  unint64_t v17 = *((void *)&_swiftEmptySetSingleton + 2);
  unint64_t v16 = *((void *)&_swiftEmptySetSingleton + 3);
  uint64_t result = swift_bridgeObjectRetain(v5);
  if (v16 <= v17)
  {
    uint64_t v19 = v17 + 1;
    if (isUniquelyReferenced_nonNull_native) {
      sub_100035DE8(v19);
    }
    else {
      sub_10003764C(v19);
    }
    Hasher.init(_seed:)(v30, *((void *)&_swiftEmptySetSingleton + 5));
    Hasher._combine(_:)(2uLL);
    String.hash(into:)(v30, v3, v5);
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1LL << *((_BYTE *)&_swiftEmptySetSingleton + 32);
    unint64_t v8 = result & ~v20;
    if (((*(void *)((char *)&_swiftEmptySetSingleton + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v8) & 1) != 0)
    {
      uint64_t v21 = ~v20;
      uint64_t v22 = *((void *)&_swiftEmptySetSingleton + 6);
      while (1)
      {
        uint64_t v23 = v22 + 24 * v8;
        if (*(_BYTE *)(v23 + 16) == 1)
        {
          uint64_t v24 = *(void *)(v23 + 8);
          if (*(void *)v23 == v3 && v24 == v5) {
            break;
          }
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v23, v24, v3, v5, 0LL);
          if ((result & 1) != 0) {
            break;
          }
        }

        unint64_t v8 = (v8 + 1) & v21;
      }

      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for TransportAddress);
      __break(1u);
    }
  }

  else if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100037150();
  }

LABEL_28:
  *(void *)((char *)&_swiftEmptySetSingleton + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8LL) + 56) |= 1LL << v8;
  uint64_t v26 = *((void *)&_swiftEmptySetSingleton + 6) + 24 * v8;
  *(void *)uint64_t v26 = v3;
  *(void *)(v26 + 8) = v5;
  *(_BYTE *)(v26 + 16) = 1;
  uint64_t v27 = *((void *)&_swiftEmptySetSingleton + 2);
  BOOL v28 = __OFADD__(v27, 1LL);
  uint64_t v29 = v27 + 1;
  if (!v28)
  {
    *((void *)&_swiftEmptySetSingleton + 2) = v29;
    swift_bridgeObjectRelease(v5);
    uint64_t v14 = (void *)0x8000000000000000LL;
LABEL_30:
    swift_bridgeObjectRelease(v14);
    return (uint64_t)&_swiftEmptySetSingleton;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_100005B68()
{
  id v1 = [*v0 name];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100005BCC()
{
  return sub_100005898();
}

BOOL sub_100005BEC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100005C00()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100005C44()
{
}

Swift::Int sub_100005C6C(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_100005CBC(uint64_t a1)
{
  Swift::UInt v2 = (void *)v1;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 56));
  if (a1)
  {
    v32[0] = a1;
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    uint64_t v4 = sub_100005394(&qword_100076D70);
    uint64_t v5 = swift_dynamicCast(&v31, v32, v4, &type metadata for RapportDiscovery.DiscoveryError, 0LL);
    if ((_DWORD)v5)
    {
      if (v31)
      {
        swift_errorRelease(a1);
      }

      else
      {
        uint64_t v21 = static os_log_type_t.error.getter(v5);
        uint64_t v22 = sub_100005394(&qword_100079660);
        uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
        *(_OWORD *)(v23 + 16) = xmmword_10005B2C0;
        uint64_t v30 = a1;
        swift_errorRetain(a1);
        uint64_t v24 = String.init<A>(describing:)(&v30, v4);
        uint64_t v26 = v25;
        *(void *)(v23 + 56) = &type metadata for String;
        *(void *)(v23 + 64) = sub_100005854();
        *(void *)(v23 + 32) = v24;
        *(void *)(v23 + 40) = v26;
        sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
        uint64_t v27 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:type:_:)( "Companion Link Discovery stopping with error: %@",  48LL,  2LL,  &_mh_execute_header,  v27,  v21,  v23);
        swift_errorRelease(a1);
        swift_bridgeObjectRelease(v23);
      }

      swift_errorRelease(v32[0]);
      uint64_t v15 = (void *)v2[2];
      if (!v15) {
        goto LABEL_13;
      }
      goto LABEL_8;
    }

    uint64_t v8 = swift_errorRelease(v32[0]);
    uint64_t v9 = static os_log_type_t.error.getter(v8);
    uint64_t v10 = sub_100005394(&qword_100079660);
    uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
    *(_OWORD *)(v11 + 16) = xmmword_10005B2C0;
    v32[0] = a1;
    swift_errorRetain(a1);
    uint64_t v12 = String.init<A>(describing:)(v32, v4);
    uint64_t v14 = v13;
    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 64) = sub_100005854();
    *(void *)(v11 + 32) = v12;
    *(void *)(v11 + 40) = v14;
    sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    Swift::Int v6 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)( "Companion Link Discovery stopping with error: %@",  48LL,  2LL,  &_mh_execute_header,  v6,  v9,  v11);
    swift_errorRelease(a1);
    swift_bridgeObjectRelease(v11);
  }

  else
  {
    sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    Swift::Int v6 = (void *)static OS_os_log.default.getter();
    uint64_t v7 = static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)( "Companion Link Discovery stopping",  33LL,  2LL,  &_mh_execute_header,  v6,  v7,  &_swiftEmptyArrayStorage);
  }

  uint64_t v15 = (void *)v2[2];
  if (!v15)
  {
LABEL_13:
    sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    BOOL v28 = (void *)static OS_os_log.default.getter();
    uint64_t v29 = static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)( "Companion Link Discovery was nil already.",  41LL,  2LL,  &_mh_execute_header,  v28,  v29,  &_swiftEmptyArrayStorage);

    return;
  }

LABEL_8:
  v2[2] = 0LL;
  uint64_t v16 = v2[8];
  v2[8] = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v16);
  [v15 invalidate];
  sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  unint64_t v17 = (void *)static OS_os_log.default.getter();
  uint64_t v18 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)( "Companion Link Discovery calling discoveryStoppedHandler",  56LL,  2LL,  &_mh_execute_header,  v17,  v18,  &_swiftEmptyArrayStorage);

  uint64_t v19 = (void (*)(void *, uint64_t))v2[5];
  if (v19)
  {
    uint64_t v20 = v2[6];
    v32[3] = type metadata accessor for RapportDiscovery();
    v32[4] = &off_100069680;
    v32[0] = v2;
    sub_100007A18((uint64_t)v19, v20);
    swift_retain(v2);
    v19(v32, a1);
    sub_10000787C((uint64_t)v19, v20);

    sub_100007A28(v32);
  }

  else
  {
  }

  v2[2] = 0LL;
  uint64_t v18 = v2[7];
  v2[7] = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v18);
  [v17 invalidate];
  uint64_t v19 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v20 = (void *)static OS_os_log.default.getter(v19);
  uint64_t v21 = static os_log_type_t.default.getter(v20);
  os_log(_:dso:log:type:_:)( "Discovery calling discoveryStoppedHandler",  41LL,  2LL,  &_mh_execute_header,  v20,  v21,  _swiftEmptyArrayStorage);

  uint64_t v22 = (void (*)(void *, uint64_t))v2[5];
  if (v22)
  {
    uint64_t v23 = v2[6];
    v37[3] = type metadata accessor for DeviceDiscovery();
    v37[4] = &off_10006C5F0;
    v37[0] = v2;
    sub_100007A18((uint64_t)v22, v23);
    swift_retain(v2);
    v22(v37, a1);
    sub_10000787C((uint64_t)v22, v23);

    sub_100007A28(v37);
  }

  else
  {
  }

void sub_10000609C()
{
  uint64_t v1 = v0;
  Swift::UInt v2 = *(dispatch_queue_s **)(v0 + 56);
  dispatch_assert_queue_V2(v2);
  sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v3 = (void *)static OS_os_log.default.getter();
  uint64_t v4 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)( "Companion Link Discovery startDiscovery called",  46LL,  2LL,  &_mh_execute_header,  v3,  v4,  &_swiftEmptyArrayStorage);

  if (*(void *)(v0 + 16))
  {
    id v19 = (id)static OS_os_log.default.getter();
    uint64_t v5 = static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)( "Companion Link Discovery already started - nothing to do.",  57LL,  2LL,  &_mh_execute_header,  v19,  v5,  &_swiftEmptyArrayStorage);
  }

  else
  {
    id v6 = [objc_allocWithZone(RPCompanionLinkClient) init];
    [v6 setFlags:1];
    [v6 setDispatchQueue:v2];
    uint64_t v7 = swift_allocObject(&unk_1000696B0, 24LL, 7LL);
    swift_weakInit(v7 + 16, v0);
    uint64_t v24 = sub_100007978;
    uint64_t v25 = v7;
    aBlock = _NSConcreteStackBlock;
    uint64_t v21 = 1107296256LL;
    uint64_t v22 = (void (*)(uint64_t, void *))sub_10004DB74;
    uint64_t v23 = &unk_1000697B8;
    uint64_t v8 = _Block_copy(&aBlock);
    swift_release(v25);
    [v6 setInvalidationHandler:v8];
    _Block_release(v8);
    uint64_t v9 = swift_allocObject(&unk_1000696B0, 24LL, 7LL);
    swift_weakInit(v9 + 16, v0);
    uint64_t v24 = sub_10000799C;
    uint64_t v25 = v9;
    aBlock = _NSConcreteStackBlock;
    uint64_t v21 = 1107296256LL;
    uint64_t v22 = (void (*)(uint64_t, void *))sub_10004DB74;
    uint64_t v23 = &unk_1000697E0;
    uint64_t v10 = _Block_copy(&aBlock);
    swift_release(v25);
    [v6 setInterruptionHandler:v10];
    _Block_release(v10);
    uint64_t v11 = swift_allocObject(&unk_1000696B0, 24LL, 7LL);
    swift_weakInit(v11 + 16, v1);
    uint64_t v24 = sub_1000079C0;
    uint64_t v25 = v11;
    aBlock = _NSConcreteStackBlock;
    uint64_t v21 = 1107296256LL;
    uint64_t v22 = sub_100006800;
    uint64_t v23 = &unk_100069808;
    uint64_t v12 = _Block_copy(&aBlock);
    swift_release(v25);
    [v6 setDeviceFoundHandler:v12];
    _Block_release(v12);
    uint64_t v24 = sub_100006850;
    uint64_t v25 = 0LL;
    aBlock = _NSConcreteStackBlock;
    uint64_t v21 = 1107296256LL;
    uint64_t v22 = sub_100039988;
    uint64_t v23 = &unk_100069830;
    uint64_t v13 = _Block_copy(&aBlock);
    [v6 activateWithCompletion:v13];
    _Block_release(v13);
    id v14 = [v6 activeDevices];
    uint64_t v15 = sub_1000079C8(0LL, &qword_100076D60, &OBJC_CLASS___RPCompanionLinkDevice_ptr);
    uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

    unint64_t v17 = sub_1000069A0(v16);
    swift_bridgeObjectRelease(v16);
    sub_100006CBC(v17);
    uint64_t v18 = *(void **)(v1 + 16);
    *(void *)(v1 + 16) = v6;
  }

uint64_t sub_100006418(uint64_t a1, const char *a2, char a3)
{
  uint64_t v5 = a1 + 16;
  sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  id v6 = (void *)static OS_os_log.default.getter();
  uint64_t v7 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)(a2, 36LL, 2LL, &_mh_execute_header, v6, v7, &_swiftEmptyArrayStorage);

  swift_beginAccess(v5, v13, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    uint64_t v9 = result;
    unint64_t v10 = sub_100007A48();
    uint64_t v11 = swift_allocError(&type metadata for RapportDiscovery.DiscoveryError, v10, 0LL, 0LL);
    *uint64_t v12 = a3;
    sub_100005CBC(v11);
    swift_errorRelease(v11);
    return swift_release(v9);
  }

  return result;
}

uint64_t sub_1000064FC(void *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  uint64_t v4 = static os_log_type_t.info.getter();
  uint64_t v5 = sub_100005394(&qword_100079660);
  uint64_t v6 = swift_allocObject(v5, 112LL, 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_10005B320;
  id v7 = [a1 name];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v11 = v10;
  }

  else
  {
    uint64_t v9 = 0LL;
    uint64_t v11 = 0LL;
  }

  *(void *)&__int128 v38 = v9;
  *((void *)&v38 + 1) = v11;
  uint64_t v12 = sub_100005394(&qword_100076D78);
  uint64_t v13 = String.init<A>(describing:)(&v38, v12);
  uint64_t v15 = v14;
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v16 = sub_100005854();
  *(void *)(v6 + 64) = v16;
  *(void *)(v6 + 32) = v13;
  *(void *)(v6 + 40) = v15;
  id v17 = [a1 idsDeviceIdentifier];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v21 = v20;
  }

  else
  {
    uint64_t v19 = 0LL;
    uint64_t v21 = 0LL;
  }

  *(void *)&__int128 v38 = v19;
  *((void *)&v38 + 1) = v21;
  uint64_t v22 = String.init<A>(describing:)(&v38, v12);
  *(void *)(v6 + 96) = &type metadata for String;
  *(void *)(v6 + 104) = v16;
  *(void *)(v6 + 72) = v22;
  *(void *)(v6 + 80) = v23;
  sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v24 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:type:_:)("Companion Link Discovery found device: %@ %@", 44LL, 2LL, &_mh_execute_header, v24, v4, v6);
  swift_bridgeObjectRelease(v6);

  swift_beginAccess(v3, v41, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    uint64_t v26 = Strong;
    uint64_t v27 = *(void **)(Strong + 64);
    id v28 = a1;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v27);
    *(void *)(v26 + 64) = v27;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v27 = sub_10002F804(0LL, v27[2] + 1LL, 1, v27);
      *(void *)(v26 + 64) = v27;
    }

    unint64_t v31 = v27[2];
    unint64_t v30 = v27[3];
    if (v31 >= v30 >> 1)
    {
      uint64_t v27 = sub_10002F804((void *)(v30 > 1), v31 + 1, 1, v27);
      *(void *)(v26 + 64) = v27;
    }

    uint64_t v39 = sub_1000079C8(0LL, &qword_100076D60, &OBJC_CLASS___RPCompanionLinkDevice_ptr);
    v40 = &off_100069668;
    *(void *)&__int128 v38 = v28;
    v27[2] = v31 + 1;
    sub_100007A00(&v38, (uint64_t)&v27[5 * v31 + 4]);
    swift_release(v26);
  }

  swift_beginAccess(v3, v37, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v33 = result;
    v35 = *(void (**)(__int128 *))(result + 24);
    uint64_t v34 = *(void *)(result + 32);
    sub_100007A18((uint64_t)v35, v34);
    uint64_t result = swift_release(v33);
    if (v35)
    {
      uint64_t v39 = sub_1000079C8(0LL, &qword_100076D60, &OBJC_CLASS___RPCompanionLinkDevice_ptr);
      v40 = &off_100069668;
      *(void *)&__int128 v38 = a1;
      id v36 = a1;
      v35(&v38);
      sub_10000787C((uint64_t)v35, v34);
      return sub_100007A28(&v38);
    }
  }

  return result;
}

void sub_100006800(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

void sub_100006850(uint64_t a1)
{
  Swift::UInt v2 = (void *)static OS_os_log.default.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)( "Companion Link Discovery activate completion",  44LL,  2LL,  &_mh_execute_header,  v2,  v3,  &_swiftEmptyArrayStorage);

  if (a1)
  {
    uint64_t v4 = swift_errorRetain(a1);
    uint64_t v5 = static os_log_type_t.error.getter(v4);
    uint64_t v6 = sub_100005394(&qword_100079660);
    uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
    *(_OWORD *)(v7 + 16) = xmmword_10005B2C0;
    uint64_t v13 = a1;
    swift_errorRetain(a1);
    uint64_t v8 = sub_100005394(&qword_100076D70);
    uint64_t v9 = String.init<A>(describing:)(&v13, v8);
    uint64_t v11 = v10;
    *(void *)(v7 + 56) = &type metadata for String;
    *(void *)(v7 + 64) = sub_100005854();
    *(void *)(v7 + 32) = v9;
    *(void *)(v7 + 40) = v11;
    uint64_t v12 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)( "Companion Link Discovery activate error: %@",  43LL,  2LL,  &_mh_execute_header,  v12,  v5,  v7);
    swift_bridgeObjectRelease(v7);

    swift_errorRelease(a1);
  }

unint64_t *sub_1000069A0(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v3 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (!v2) {
    return v3;
  }
  uint64_t v18 = (unint64_t *)&_swiftEmptyArrayStorage;
  uint64_t result = sub_1000494AC(0LL, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000LL) == 0)
  {
    uint64_t v3 = v18;
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      uint64_t v5 = 0LL;
      do
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        uint64_t v18 = v3;
        unint64_t v8 = v3[2];
        unint64_t v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_1000494AC((void *)(v7 > 1), v8 + 1, 1);
          uint64_t v3 = v18;
        }

        ++v5;
        uint64_t v16 = sub_1000079C8(0LL, &qword_100076D60, &OBJC_CLASS___RPCompanionLinkDevice_ptr);
        id v17 = &off_100069668;
        *(void *)&__int128 v15 = v6;
        v3[2] = v8 + 1;
        sub_100007A00(&v15, (uint64_t)&v3[5 * v8 + 4]);
      }

      while (v2 != v5);
    }

    else
    {
      uint64_t v9 = (void **)(a1 + 32);
      do
      {
        uint64_t v10 = *v9;
        uint64_t v18 = v3;
        unint64_t v12 = v3[2];
        unint64_t v11 = v3[3];
        id v13 = v10;
        if (v12 >= v11 >> 1)
        {
          sub_1000494AC((void *)(v11 > 1), v12 + 1, 1);
          uint64_t v3 = v18;
        }

        uint64_t v16 = sub_1000079C8(0LL, &qword_100076D60, &OBJC_CLASS___RPCompanionLinkDevice_ptr);
        id v17 = &off_100069668;
        *(void *)&__int128 v15 = v13;
        v3[2] = v12 + 1;
        sub_100007A00(&v15, (uint64_t)&v3[5 * v12 + 4]);
        ++v9;
        --v2;
      }

      while (v2);
    }

    return v3;
  }

  __break(1u);
  return result;
}

void *sub_100006B90(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    id v13 = _swiftEmptyArrayStorage;
    sub_10004951C(0LL, v1, 0);
    uint64_t v4 = (uint64_t *)(a1 + 32);
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v11 = *v4;
      uint64_t v5 = sub_100005394(&qword_100076D88);
      uint64_t v6 = sub_100005394(&qword_1000796A0);
      swift_dynamicCast(&v12, &v11, v5, v6, 7LL);
      uint64_t v7 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_10004951C(0LL, v2[2] + 1LL, 1);
        uint64_t v2 = v13;
      }

      unint64_t v9 = v2[2];
      unint64_t v8 = v2[3];
      if (v9 >= v8 >> 1)
      {
        sub_10004951C((char *)(v8 > 1), v9 + 1, 1);
        uint64_t v2 = v13;
      }

      v2[2] = v9 + 1;
      v2[v9 + 4] = v7;
      ++v4;
      --v1;
    }

    while (v1);
  }

  return v2;
}

void *sub_100006CBC(void *result)
{
  uint64_t v2 = result[2];
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = result;
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (v6[2]) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  if (v4 <= v5) {
    int64_t v13 = v4 + v2;
  }
  else {
    int64_t v13 = v4;
  }
  uint64_t result = sub_10002F804(result, v13, 1, v3);
  uint64_t v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

LABEL_5:
  uint64_t v7 = v3[2];
  if ((v3[3] >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v8 = (uint64_t)&v3[5 * v7 + 4];
  uint64_t v9 = sub_100005394(&qword_100076D68);
  uint64_t result = (void *)swift_arrayInitWithCopy(v8, v6 + 4, v2, v9);
  if (!v2)
  {
LABEL_14:
    uint64_t result = (void *)swift_bridgeObjectRelease(v6);
    *int64_t v1 = v3;
    return result;
  }

  uint64_t v10 = v3[2];
  BOOL v11 = __OFADD__(v10, v2);
  uint64_t v12 = v10 + v2;
  if (!v11)
  {
    v3[2] = v12;
    goto LABEL_14;
  }

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v18 = *(void *)(v3 + 16);
  uint64_t v19 = __OFSUB__(v18, 1LL);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v18 = *(void *)(v3 + 16);
  uint64_t v19 = __OFSUB__(v18, 1LL);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1LL << result) - 1;
  }

  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  uint64_t v23 = __OFSUB__(v22, 1LL);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_100006DB8()
{
  sub_10000787C(*(void *)(v0 + 24), *(void *)(v0 + 32));
  sub_10000787C(*(void *)(v0 + 40), *(void *)(v0 + 48));

  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t type metadata accessor for RapportDiscovery()
{
  return objc_opt_self(&OBJC_CLASS____TtC20FMIPClientXPCService16RapportDiscovery);
}

uint64_t sub_100006E1C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  BOOL v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_1000079C8(0LL, (unint64_t *)&qword_100078760, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v17 = v12;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(void *)(v1 + 48) = 0LL;
  static DispatchQoS.unspecified.getter(v12);
  uint64_t v18 = &_swiftEmptyArrayStorage;
  uint64_t v13 = sub_1000078F8( (unint64_t *)&qword_100076B38,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v14 = sub_100005394((uint64_t *)&unk_100078770);
  uint64_t v15 = sub_100007938((unint64_t *)&qword_100076B40, (uint64_t *)&unk_100078770);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v6, v13);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v2);
  *(void *)(v1 + 56) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002BLL,  0x8000000100055F60LL,  v11,  v8,  v5,  0LL);
  *(void *)(v1 + 64) = &_swiftEmptyArrayStorage;
  return v1;
}

uint64_t sub_100007004()
{
  uint64_t v1 = v0;
  BOOL v11 = &_swiftEmptyArrayStorage;
  uint64_t v2 = *(dispatch_queue_s **)(v0 + 56);
  uint64_t v3 = swift_allocObject(&unk_100069750, 32LL, 7LL);
  *(void *)(v3 + 16) = &v11;
  *(void *)(v3 + 24) = v0;
  uint64_t v4 = swift_allocObject(&unk_100069778, 32LL, 7LL);
  *(void *)(v4 + 16) = sub_1000078B0;
  *(void *)(v4 + 24) = v3;
  aBlock[4] = sub_1000078F0;
  uint64_t v10 = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10003CE54;
  aBlock[3] = &unk_100069790;
  int64_t v5 = _Block_copy(aBlock);
  uint64_t v6 = v10;
  swift_retain(v1);
  swift_retain(v4);
  swift_release(v6);
  dispatch_sync(v2, v5);
  _Block_release(v5);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation(v4, "", 108LL, 114LL, 31LL, 1LL);
  uint64_t result = swift_release(v4);
  if ((v2 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = v11;
    swift_release(v3);
    return (uint64_t)v8;
  }

  return result;
}

uint64_t sub_100007144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v29 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v14 = (void *)static OS_os_log.default.getter();
  uint64_t v15 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)( "Rapport Discovery startDiscovering",  34LL,  2LL,  &_mh_execute_header,  v14,  v15,  &_swiftEmptyArrayStorage);

  v26[1] = *(void *)(v4 + 56);
  uint64_t v16 = swift_allocObject(&unk_1000696B0, 24LL, 7LL);
  swift_weakInit(v16 + 16, v4);
  uint64_t v17 = (void *)swift_allocObject(&unk_100069700, 56LL, 7LL);
  v17[2] = v16;
  v17[3] = a1;
  uint64_t v18 = v27;
  v17[4] = a2;
  v17[5] = v18;
  v17[6] = a4;
  aBlock[4] = sub_10000786C;
  v32 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  aBlock[3] = &unk_100069718;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain(v16);
  swift_retain(a2);
  uint64_t v20 = swift_retain(a4);
  static DispatchQoS.unspecified.getter(v20);
  unint64_t v30 = &_swiftEmptyArrayStorage;
  uint64_t v21 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v22 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v23 = sub_100007938(&qword_100076D58, (uint64_t *)&unk_100078740);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v22, v23, v8, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v28);
  uint64_t v24 = v32;
  swift_release(v16);
  return swift_release(v24);
}

uint64_t sub_1000073DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1 + 16;
  swift_beginAccess(a1 + 16, v22, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v9);
  if (Strong)
  {
    uint64_t v11 = Strong;
    uint64_t v12 = *(void *)(Strong + 24);
    uint64_t v13 = *(void *)(Strong + 32);
    *(void *)(Strong + 24) = a2;
    *(void *)(Strong + 32) = a3;
    swift_retain(a3);
    sub_10000787C(v12, v13);
    swift_release(v11);
  }

  swift_beginAccess(v9, v21, 0LL, 0LL);
  uint64_t v14 = swift_weakLoadStrong(v9);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)(v14 + 40);
    uint64_t v17 = *(void *)(v14 + 48);
    *(void *)(v14 + 40) = a4;
    *(void *)(v14 + 48) = a5;
    swift_retain(a5);
    sub_10000787C(v16, v17);
    swift_release(v15);
  }

  swift_beginAccess(v9, v20, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v9);
  if (result)
  {
    uint64_t v19 = result;
    sub_10000609C();
    return swift_release(v19);
  }

  return result;
}

uint64_t sub_1000074E8()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v19 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v4 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v7 = (void *)static OS_os_log.default.getter();
  uint64_t v8 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)( "Discovery stopDiscovering",  25LL,  2LL,  &_mh_execute_header,  v7,  v8,  &_swiftEmptyArrayStorage);

  uint64_t v9 = swift_allocObject(&unk_1000696B0, 24LL, 7LL);
  swift_weakInit(v9 + 16, v0);
  aBlock[4] = sub_100007818;
  uint64_t v22 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  aBlock[3] = &unk_1000696C8;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = swift_retain(v9);
  static DispatchQoS.unspecified.getter(v11);
  uint64_t v20 = &_swiftEmptyArrayStorage;
  uint64_t v12 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v13 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v14 = sub_100007938(&qword_100076D58, (uint64_t *)&unk_100078740);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v13, v14, v1, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v6, v3, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v18);
  uint64_t v15 = v22;
  swift_release(v9);
  return swift_release(v15);
}

uint64_t sub_10000773C(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    uint64_t v3 = result;
    sub_100005CBC(0LL);
    return swift_release(v3);
  }

  return result;
}

uint64_t sub_100007794()
{
  return sub_100007004();
}

uint64_t sub_1000077B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100007144(a1, a2, a3, a4);
}

uint64_t sub_1000077D4()
{
  return sub_1000074E8();
}

uint64_t sub_1000077F4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100007818()
{
  return sub_10000773C(v0);
}

uint64_t sub_100007820(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100007830(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100007838()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10000786C()
{
  return sub_1000073DC(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_10000787C(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_10000788C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000078B0()
{
  uint64_t v1 = *(uint64_t **)(v0 + 16);
  uint64_t v2 = *v1;
  *uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 64LL);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_1000078E0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000078F0()
{
  return sub_10003CE34(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000078F8(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100007938(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_100005420(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100007978()
{
  return sub_100006418(v0, "Companion Link Discovery Invalidated", 2);
}

uint64_t sub_10000799C()
{
  return sub_100006418(v0, "Companion Link Discovery Interrupted", 1);
}

uint64_t sub_1000079C0(void *a1)
{
  return sub_1000064FC(a1, v1);
}

uint64_t sub_1000079C8(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_100007A00(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v3;
  return a2;
}

uint64_t sub_100007A18(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_retain(a2);
  }
  return result;
}

uint64_t sub_100007A28(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t sub_100007A48()
{
  unint64_t result = qword_100076D80;
  if (!qword_100076D80)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005B45C, &type metadata for RapportDiscovery.DiscoveryError);
    atomic_store(result, (unint64_t *)&qword_100076D80);
  }

  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for RapportDiscovery.DiscoveryError(_BYTE *result, _BYTE *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for RapportDiscovery.DiscoveryError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}
}

uint64_t storeEnumTagSinglePayload for RapportDiscovery.DiscoveryError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100007B74 + 4 * byte_10005B345[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100007BA8 + 4 * byte_10005B340[v4]))();
}

uint64_t sub_100007BA8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100007BB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100007BB8LL);
  }
  return result;
}

uint64_t sub_100007BC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100007BCCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100007BD0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100007BD8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100007BE4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100007BF0(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for RapportDiscovery.DiscoveryError()
{
  return &type metadata for RapportDiscovery.DiscoveryError;
}

unint64_t sub_100007C0C()
{
  unint64_t result = qword_100076D90;
  if (!qword_100076D90)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005B434, &type metadata for RapportDiscovery.DiscoveryError);
    atomic_store(result, (unint64_t *)&qword_100076D90);
  }

  return result;
}

uint64_t sub_100007C80(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  v18[0] = a1;
  unint64_t v6 = sub_100007DE8();
  uint64_t v7 = ResponseSerializable.dictionaryValue.getter(&type metadata for DeviceSearchRequestBody, v6);
  swift_bridgeObjectRelease(a1);
  sub_100007E2C((uint64_t)a2, (uint64_t)v18);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = sub_10003A018((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v3 + 24) = v7;
  int v8 = (unint64_t *)(v3 + 16);
  sub_100007E2C((uint64_t)v18, (uint64_t)v17);
  uint64_t v9 = sub_10001B81C(v17);
  uint64_t v11 = v10;
  sub_100007A28(v17);
  v17[0] = v9;
  v17[1] = v11;
  unint64_t v12 = sub_100008510();
  uint64_t v13 = ResponseSerializable.dictionaryValue.getter(&type metadata for UserAgentHeader, v12);
  swift_bridgeObjectRelease(v11);
  unint64_t v14 = sub_1000081A0(v13);
  swift_bridgeObjectRelease(v13);
  sub_100007A28(v18);
  if (v14)
  {
    swift_beginAccess(v3 + 16, v17, 1LL, 0LL);
    unint64_t v15 = *v8;
    *int v8 = v14;
    swift_bridgeObjectRelease(v15);
  }

  sub_100007A28(a2);
  return v3;
}

uint64_t sub_100007D9C()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for DeviceSearchListRequestContent()
{
  return objc_opt_self(&OBJC_CLASS____TtC20FMIPClientXPCService30DeviceSearchListRequestContent);
}

unint64_t sub_100007DE8()
{
  unint64_t result = qword_100076E78;
  if (!qword_100076E78)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005B558, &type metadata for DeviceSearchRequestBody);
    atomic_store(result, (unint64_t *)&qword_100076E78);
  }

  return result;
}

uint64_t sub_100007E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t static FutureError.__derived_enum_equals(_:_:)()
{
  return 1LL;
}

Swift::Int FutureError.hashValue.getter()
{
  return Hasher._finalize()();
}

void FutureError.hash(into:)()
{
}

Swift::Int sub_100007EDC(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100007F18()
{
  return 0x73656369766564LL;
}

uint64_t sub_100007F30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x73656369766564LL && a2 == 0xE700000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE700000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73656369766564LL, 0xE700000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100007FC4()
{
  return 0LL;
}

void sub_100007FD0(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100007FDC(uint64_t a1)
{
  unint64_t v2 = sub_100008804();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100008004(uint64_t a1)
{
  unint64_t v2 = sub_100008804();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10000802C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100005394(&qword_100076ED0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_1000087E0(a1, v8);
  unint64_t v10 = sub_100008804();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for DeviceSearchRequestBody.CodingKeys,  &type metadata for DeviceSearchRequestBody.CodingKeys,  v10,  v8,  v9);
  uint64_t v13 = a2;
  sub_100005394(&qword_100076EB8);
  sub_10000888C(&qword_100076ED8, (void (*)(void))sub_1000088F4, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v13);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100008148()
{
  return static ResponseSerializable.decode(dictionary:)();
}

void *sub_100008160@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10000869C(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100008188(void *a1)
{
  return sub_10000802C(a1, *v1);
}

unint64_t sub_1000081A0(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100005394(&qword_100076E88);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v34 = v1 + 64;
  uint64_t v4 = -1LL;
  uint64_t v5 = -1LL << *(_BYTE *)(v1 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v5);
  }
  unint64_t v6 = v4 & *(void *)(v1 + 64);
  uint64_t v7 = &v41;
  int64_t v33 = (unint64_t)(63 - v5) >> 6;
  unint64_t result = swift_bridgeObjectRetain(v1);
  int64_t v9 = 0LL;
  unint64_t v10 = (char *)&type metadata for Any + 8;
  while (1)
  {
    if (v6)
    {
      uint64_t v36 = (v6 - 1) & v6;
      unint64_t v17 = __clz(__rbit64(v6)) | (v9 << 6);
      int64_t v18 = v9;
    }

    else
    {
      int64_t v19 = v9 + 1;
      if (__OFADD__(v9, 1LL)) {
        goto LABEL_37;
      }
      if (v19 >= v33)
      {
LABEL_33:
        sub_1000085D0(v1);
        return (unint64_t)v3;
      }

      unint64_t v20 = *(void *)(v34 + 8 * v19);
      int64_t v18 = v9 + 1;
      if (!v20)
      {
        int64_t v18 = v9 + 2;
        if (v9 + 2 >= v33) {
          goto LABEL_33;
        }
        unint64_t v20 = *(void *)(v34 + 8 * v18);
        if (!v20)
        {
          int64_t v18 = v9 + 3;
          if (v9 + 3 >= v33) {
            goto LABEL_33;
          }
          unint64_t v20 = *(void *)(v34 + 8 * v18);
          if (!v20)
          {
            int64_t v18 = v9 + 4;
            if (v9 + 4 >= v33) {
              goto LABEL_33;
            }
            unint64_t v20 = *(void *)(v34 + 8 * v18);
            if (!v20)
            {
              int64_t v21 = v9 + 5;
              if (v9 + 5 >= v33) {
                goto LABEL_33;
              }
              unint64_t v20 = *(void *)(v34 + 8 * v21);
              if (!v20)
              {
                while (1)
                {
                  int64_t v18 = v21 + 1;
                  if (__OFADD__(v21, 1LL)) {
                    goto LABEL_38;
                  }
                  if (v18 >= v33) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = *(void *)(v34 + 8 * v18);
                  ++v21;
                  if (v20) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v18 = v9 + 5;
            }
          }
        }
      }

LABEL_26:
      uint64_t v36 = (v20 - 1) & v20;
      unint64_t v17 = __clz(__rbit64(v20)) + (v18 << 6);
    }

    uint64_t v22 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v17);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    sub_100008554(*(void *)(v1 + 56) + 32 * v17, (uint64_t)v7);
    v40[0] = v23;
    v40[1] = v24;
    sub_100008554((uint64_t)v7, (uint64_t)v39);
    swift_bridgeObjectRetain_n(v24, 2LL);
    sub_100008590((uint64_t)v40);
    if (!swift_dynamicCast(&v37, v39, v10, &type metadata for String, 6LL))
    {
      uint64_t v37 = 0LL;
      uint64_t v38 = 0LL;
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v38);
      sub_1000085D0(v1);
      swift_release(v3);
      return 0LL;
    }

    int64_t v35 = v18;
    uint64_t v26 = v37;
    uint64_t v25 = v38;
    unint64_t result = sub_100048378(v23, v24);
    if ((v27 & 1) != 0)
    {
      uint64_t v11 = v10;
      uint64_t v12 = 16 * result;
      uint64_t v13 = v7;
      uint64_t v14 = v1;
      unint64_t v15 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease(v15[1]);
      uint64_t *v15 = v23;
      v15[1] = v24;
      uint64_t v16 = (void *)(v3[7] + v12);
      unint64_t v10 = v11;
      unint64_t result = swift_bridgeObjectRelease(v16[1]);
      *uint64_t v16 = v26;
      v16[1] = v25;
      uint64_t v1 = v14;
      uint64_t v7 = v13;
      goto LABEL_8;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v28 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v28 = v23;
    v28[1] = v24;
    uint64_t v29 = (void *)(v3[7] + 16 * result);
    *uint64_t v29 = v26;
    v29[1] = v25;
    uint64_t v30 = v3[2];
    BOOL v31 = __OFADD__(v30, 1LL);
    uint64_t v32 = v30 + 1;
    if (v31) {
      goto LABEL_36;
    }
    v3[2] = v32;
LABEL_8:
    int64_t v9 = v35;
    unint64_t v6 = v36;
  }

  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

        int64_t v9 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }

      unint64_t v20 = v3;
      int64_t v21 = *(void *)(v3 + 48) + 24 * v16;
      uint64_t v22 = *(void *)v21;
      uint64_t v23 = *(void *)(v21 + 8);
      uint64_t v24 = *(unsigned __int8 *)(v21 + 16);
      Hasher.init(_seed:)(v37, *(void *)(v6 + 40));
      if (!v24) {
        break;
      }
      if (v24 == 1)
      {
        uint64_t v25 = 2LL;
LABEL_31:
        Hasher._combine(_:)(v25);
        String.hash(into:)(v37, v22, v23);
        goto LABEL_33;
      }

      Hasher._combine(_:)(0LL);
LABEL_33:
      unint64_t result = Hasher._finalize()();
      uint64_t v26 = -1LL << *(_BYTE *)(v6 + 32);
      char v27 = result & ~v26;
      uint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v10 + 8 * (v27 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v10 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_47;
          }

          BOOL v31 = v28 == v30;
          if (v28 == v30) {
            uint64_t v28 = 0LL;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v10 + 8 * v28);
        }

        while (v32 == -1);
        uint64_t v13 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      uint64_t v14 = *(void *)(v6 + 48) + 24 * v13;
      *(void *)uint64_t v14 = v22;
      *(void *)(v14 + 8) = v23;
      *(_BYTE *)(v14 + swift_weakDestroy(v0 + 16) = v24;
      ++*(void *)(v6 + 16);
      uint64_t v3 = v20;
    }

    uint64_t v25 = 1LL;
    goto LABEL_31;
  }

        int64_t v9 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
      }

      unint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v32, *(void *)(v6 + 40));
      int64_t v21 = type metadata accessor for UUID(0LL);
      uint64_t v22 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of Hashable.hash(into:)(v32, v21, v22);
      unint64_t result = Hasher._finalize()();
      uint64_t v23 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v24 = result & ~v23;
      uint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v11 + 8 * (v24 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v26 = 0;
        char v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v28 = v25 == v27;
          if (v25 == v27) {
            uint64_t v25 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v11 + 8 * v25);
        }

        while (v29 == -1);
        uint64_t v14 = __clz(__rbit64(~v29)) + (v25 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  unint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

        uint64_t v11 = (v20 - 1) & v20;
        int64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }

      uint64_t v22 = *(void *)(*(void *)(v4 + 48) + 8 * v18);
      unint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
      uint64_t v23 = -1LL << *(_BYTE *)(v7 + 32);
      uint64_t v24 = result & ~v23;
      uint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v26 = 0;
        char v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v28 = v25 == v27;
          if (v25 == v27) {
            uint64_t v25 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v13 + 8 * v25);
        }

        while (v29 == -1);
        uint64_t v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }

      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * vswift_weakDestroy(v0 + 16) = v22;
      ++*(void *)(v7 + 16);
    }
  }

  unint64_t result = swift_release(v4);
  void *v3 = v7;
  return result;
}

        unint64_t v10 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
      }

      unint64_t v20 = *(void *)(*(void *)(v4 + 48) + 8 * v16);
      Hasher.init(_seed:)(v33, *(void *)(v7 + 40));
      int64_t v21 = type metadata accessor for UUID(0LL);
      uint64_t v22 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of Hashable.hash(into:)(v33, v21, v22);
      unint64_t result = Hasher._finalize()();
      uint64_t v23 = -1LL << *(_BYTE *)(v7 + 32);
      uint64_t v24 = result & ~v23;
      uint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v11 + 8 * (v24 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v26 = 0;
        char v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v28 = v25 == v27;
          if (v25 == v27) {
            uint64_t v25 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v11 + 8 * v25);
        }

        while (v29 == -1);
        uint64_t v14 = __clz(__rbit64(~v29)) + (v25 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(void *)(*(void *)(v7 + 48) + 8 * v14) = v20;
      ++*(void *)(v7 + 16);
    }
  }

  unint64_t result = swift_release(v4);
  void *v3 = v7;
  return result;
}

    int64_t v9 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    unint64_t v20 = *(void *)(v3 + 48) + 24 * v16;
    int64_t v21 = *(void *)v20;
    uint64_t v22 = *(void *)(v20 + 8);
    uint64_t v23 = *(unsigned __int8 *)(v20 + 16);
    Hasher.init(_seed:)(v35, *(void *)(v6 + 40));
    if (!v23)
    {
      uint64_t v24 = 1LL;
      goto LABEL_31;
    }

    if (v23 == 1)
    {
      uint64_t v24 = 2LL;
LABEL_31:
      Hasher._combine(_:)(v24);
      swift_bridgeObjectRetain(v22);
      String.hash(into:)(v35, v21, v22);
      goto LABEL_33;
    }

    Hasher._combine(_:)(0LL);
LABEL_33:
    unint64_t result = Hasher._finalize()();
    uint64_t v25 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v26 = result & ~v25;
    char v27 = v26 >> 6;
    if (((-1LL << v26) & ~*(void *)(v10 + 8 * (v26 >> 6))) != 0)
    {
      uint64_t v13 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        uint64_t v30 = v27 == v29;
        if (v27 == v29) {
          char v27 = 0LL;
        }
        v28 |= v30;
        BOOL v31 = *(void *)(v10 + 8 * v27);
      }

      while (v31 == -1);
      uint64_t v13 = __clz(__rbit64(~v31)) + (v27 << 6);
    }

    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
    uint64_t v14 = *(void *)(v6 + 48) + 24 * v13;
    *(void *)uint64_t v14 = v21;
    *(void *)(v14 + 8) = v22;
    *(_BYTE *)(v14 + swift_weakDestroy(v0 + 16) = v23;
    ++*(void *)(v6 + 16);
  }

  int64_t v19 = v17 + 3;
  if (v19 >= v34)
  {
LABEL_42:
    unint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v32;
    goto LABEL_44;
  }

  int64_t v18 = *(void *)(v33 + 8 * v19);
  if (v18)
  {
    uint64_t v12 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v12 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v12 >= v34) {
      goto LABEL_42;
    }
    int64_t v18 = *(void *)(v33 + 8 * v12);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

    int64_t v9 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_27:
    int64_t v19 = *(void *)(*(void *)(v3 + 48) + 8 * v15);
    Hasher.init(_seed:)(v32, *(void *)(v6 + 40));
    unint64_t v20 = type metadata accessor for UUID(0LL);
    int64_t v21 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    swift_retain(v19);
    dispatch thunk of Hashable.hash(into:)(v32, v20, v21);
    unint64_t result = Hasher._finalize()();
    uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v23 = result & ~v22;
    uint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      uint64_t v13 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        char v27 = v24 == v26;
        if (v24 == v26) {
          uint64_t v24 = 0LL;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v10 + 8 * v24);
      }

      while (v28 == -1);
      uint64_t v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }

    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
    *(void *)(*(void *)(v6 + 48) + 8 * v13) = v19;
    ++*(void *)(v6 + 16);
  }

  int64_t v18 = v16 + 3;
  if (v18 >= v31)
  {
LABEL_36:
    unint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v29;
    goto LABEL_38;
  }

  unint64_t v17 = *(void *)(v30 + 8 * v18);
  if (v17)
  {
    uint64_t v12 = v18;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v12 >= v31) {
      goto LABEL_36;
    }
    unint64_t v17 = *(void *)(v30 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_26;
    }
  }

    uint64_t v11 = (v20 - 1) & v20;
    int64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_27:
    uint64_t v22 = *(void *)(v7 + 40);
    uint64_t v23 = *(id *)(*(void *)(v4 + 48) + 8 * v18);
    unint64_t result = NSObject._rawHashValue(seed:)(v22);
    uint64_t v24 = -1LL << *(_BYTE *)(v7 + 32);
    uint64_t v25 = result & ~v24;
    uint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v13 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v16 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v29 = v26 == v28;
        if (v26 == v28) {
          uint64_t v26 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v16 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    *(void *)(*(void *)(v7 + 48) + 8 * vswift_weakDestroy(v0 + 16) = v23;
    ++*(void *)(v7 + 16);
  }

  int64_t v21 = v19 + 3;
  if (v21 >= v12)
  {
LABEL_36:
    unint64_t result = swift_release_n(v4, 2LL);
    uint64_t v3 = v31;
    goto LABEL_38;
  }

  unint64_t v20 = *(void *)(v9 + 8 * v21);
  if (v20)
  {
    unint64_t v15 = v21;
    goto LABEL_26;
  }

  while (1)
  {
    unint64_t v15 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v15 >= v12) {
      goto LABEL_36;
    }
    unint64_t v20 = *(void *)(v9 + 8 * v15);
    ++v21;
    if (v20) {
      goto LABEL_26;
    }
  }

    unint64_t v10 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
LABEL_27:
    unint64_t v20 = *(void *)(*(void *)(v4 + 48) + 8 * v16);
    Hasher.init(_seed:)(v33, *(void *)(v7 + 40));
    int64_t v21 = type metadata accessor for UUID(0LL);
    uint64_t v22 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    swift_retain(v20);
    dispatch thunk of Hashable.hash(into:)(v33, v21, v22);
    unint64_t result = Hasher._finalize()();
    uint64_t v23 = -1LL << *(_BYTE *)(v7 + 32);
    uint64_t v24 = result & ~v23;
    uint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v11 + 8 * (v24 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      char v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v28 = v25 == v27;
        if (v25 == v27) {
          uint64_t v25 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v25);
      }

      while (v29 == -1);
      uint64_t v14 = __clz(__rbit64(~v29)) + (v25 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(void *)(*(void *)(v7 + 48) + 8 * v14) = v20;
    ++*(void *)(v7 + 16);
  }

  int64_t v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_36:
    unint64_t result = swift_release_n(v4, 2LL);
    uint64_t v3 = v30;
    goto LABEL_38;
  }

  int64_t v18 = *(void *)(v31 + 8 * v19);
  if (v18)
  {
    uint64_t v13 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v13 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    int64_t v18 = *(void *)(v31 + 8 * v13);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

        uint64_t v24 = (v26 - 1) & v26;
        uint64_t v25 = __clz(__rbit64(v26)) + (v23 << 6);
      }

      uint64_t v22 = *(void *)(*(void *)(v5 + 48) + 8 * v25);
      swift_retain(v22);
    }
  }

  uint64_t v29 = v5;
  return (void *)sub_1000085D0(v29);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

unint64_t sub_100008510()
{
  unint64_t result = qword_100076E80;
  if (!qword_100076E80)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005CBBC, &type metadata for UserAgentHeader);
    atomic_store(result, (unint64_t *)&qword_100076E80);
  }

  return result;
}

uint64_t sub_100008554(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100008590(uint64_t a1)
{
  uint64_t v2 = sub_100005394(&qword_100076E90);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000085D0(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

ValueMetadata *type metadata accessor for DeviceSearchRequestBody()
{
  return &type metadata for DeviceSearchRequestBody;
}

unint64_t sub_1000085E8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100008614();
  unint64_t result = sub_100008658();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_100008614()
{
  unint64_t result = qword_100076E98;
  if (!qword_100076E98)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005B530, &type metadata for DeviceSearchRequestBody);
    atomic_store(result, (unint64_t *)&qword_100076E98);
  }

  return result;
}

unint64_t sub_100008658()
{
  unint64_t result = qword_100076EA0;
  if (!qword_100076EA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005B508, &type metadata for DeviceSearchRequestBody);
    atomic_store(result, (unint64_t *)&qword_100076EA0);
  }

  return result;
}

void *sub_10000869C(void *a1)
{
  uint64_t v3 = sub_100005394(&qword_100076EA8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  int64_t v9 = sub_1000087E0(a1, v7);
  unint64_t v10 = sub_100008804();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for DeviceSearchRequestBody.CodingKeys,  &type metadata for DeviceSearchRequestBody.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    sub_100007A28(a1);
  }

  else
  {
    uint64_t v11 = sub_100005394(&qword_100076EB8);
    sub_10000888C( &qword_100076EC0,  (void (*)(void))sub_100008848,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    int64_t v9 = v14;
    sub_100007A28(a1);
  }

  return v9;
}

void *sub_1000087E0(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

unint64_t sub_100008804()
{
  unint64_t result = qword_100076EB0;
  if (!qword_100076EB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005B638, &type metadata for DeviceSearchRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100076EB0);
  }

  return result;
}

unint64_t sub_100008848()
{
  unint64_t result = qword_100076EC8;
  if (!qword_100076EC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005C960, &type metadata for FMIPSearchRequestDevice);
    atomic_store(result, (unint64_t *)&qword_100076EC8);
  }

  return result;
}

uint64_t sub_10000888C(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_100005420(&qword_100076EB8);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1000088F4()
{
  unint64_t result = qword_100076EE0;
  if (!qword_100076EE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005C938, &type metadata for FMIPSearchRequestDevice);
    atomic_store(result, (unint64_t *)&qword_100076EE0);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for DeviceSearchRequestBody.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for DeviceSearchRequestBody.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000089CC + 4 * byte_10005B4A0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000089EC + 4 * byte_10005B4A5[v4]))();
  }
}

_BYTE *sub_1000089CC(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000089EC(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000089F4(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000089FC(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100008A04(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100008A0C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DeviceSearchRequestBody.CodingKeys()
{
  return &type metadata for DeviceSearchRequestBody.CodingKeys;
}

unint64_t sub_100008A2C()
{
  unint64_t result = qword_100076EE8;
  if (!qword_100076EE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005B610, &type metadata for DeviceSearchRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100076EE8);
  }

  return result;
}

unint64_t sub_100008A74()
{
  unint64_t result = qword_100076EF0;
  if (!qword_100076EF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005B580, &type metadata for DeviceSearchRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100076EF0);
  }

  return result;
}

unint64_t sub_100008ABC()
{
  unint64_t result = qword_100076EF8;
  if (!qword_100076EF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005B5A8, &type metadata for DeviceSearchRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100076EF8);
  }

  return result;
}

__n128 initializeWithCopy for ConfigurationResponseContent(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DefaultResponseContent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 26)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 25);
  if (v3 >= 2) {
    int v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v4 = -2;
  }
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultResponseContent( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(_WORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 26) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 26) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 25) = a2 + 3;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DefaultResponseContent()
{
  return &type metadata for DefaultResponseContent;
}

uint64_t sub_100008BD4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v18 = a5;
  uint64_t v9 = sub_100005394(&qword_100076F28);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_1000087E0(a1, v14);
  unint64_t v15 = sub_10000936C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for DefaultResponseContent.CodingKeys,  &type metadata for DefaultResponseContent.CodingKeys,  v15,  v14,  v13);
  v19[0] = a2;
  v19[1] = a3;
  v19[2] = a4;
  __int16 v20 = v18;
  sub_1000093F4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

unint64_t sub_100008CEC(char a1)
{
  unint64_t result = 0xD00000000000001CLL;
  if (!a1) {
    return 0xD000000000000014LL;
  }
  return result;
}

uint64_t sub_100008D44()
{
  return 0x72756769666E6F63LL;
}

uint64_t sub_100008D68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x72756769666E6F63LL && a2 == 0xED00006E6F697461LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xED00006E6F697461LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x72756769666E6F63LL, 0xED00006E6F697461LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100008E20(uint64_t a1)
{
  unint64_t v2 = sub_10000936C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100008E48(uint64_t a1)
{
  unint64_t v2 = sub_10000936C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100008E70@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100009238(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + swift_weakDestroy(v0 + 16) = v6;
    *(_WORD *)(a2 + 24) = v7;
  }

  return result;
}

uint64_t sub_100008EA0(void *a1)
{
  return sub_100008BD4(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(unsigned __int16 *)(v1 + 24));
}

uint64_t sub_100008EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000095A0(a1, a2, a3, (uint64_t (*)(void))sub_100008ED4, (uint64_t (*)(void))sub_100008F18);
}

unint64_t sub_100008ED4()
{
  unint64_t result = qword_100076F00;
  if (!qword_100076F00)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005B710, &type metadata for DefaultResponseContent);
    atomic_store(result, (unint64_t *)&qword_100076F00);
  }

  return result;
}

unint64_t sub_100008F18()
{
  unint64_t result = qword_100076F08;
  if (!qword_100076F08)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005B6E8, &type metadata for DefaultResponseContent);
    atomic_store(result, (unint64_t *)&qword_100076F08);
  }

  return result;
}

uint64_t sub_100008F5C(char *a1, unsigned __int8 *a2)
{
  return sub_100051640(*a1, *a2);
}

Swift::Int sub_100008F68()
{
  return sub_10001A5CC(*v0);
}

uint64_t sub_100008F70(uint64_t a1)
{
  return sub_100051DC8(a1, *v1);
}

Swift::Int sub_100008F78(uint64_t a1)
{
  return sub_100052110(a1, *v1);
}

uint64_t sub_100008F80(void *a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  int v20 = a5;
  uint64_t v19 = a4;
  uint64_t v8 = a3 & 1;
  uint64_t v9 = sub_100005394(&qword_100076F60);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_1000087E0(a1, v14);
  unint64_t v15 = sub_100009890();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ConfigurationResponseContent.CodingKeys,  &type metadata for ConfigurationResponseContent.CodingKeys,  v15,  v14,  v13);
  char v23 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a2, v8, &v23, v9);
  if (!v5)
  {
    char v22 = 1;
    unsigned __int8 v16 = BYTE1(v20);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20 & 1, &v22, v9);
    char v21 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, &v21, v9);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

unint64_t sub_1000090DC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000096A8(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100009108@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100008CEC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100009130()
{
  return sub_100008CEC(*v0);
}

unint64_t sub_100009138@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000096A8(a1);
  *a2 = result;
  return result;
}

void sub_10000915C(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_100009168(uint64_t a1)
{
  unint64_t v2 = sub_100009890();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100009190(uint64_t a1)
{
  unint64_t v2 = sub_100009890();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000091B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000096F0(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5 & 1;
    *(void *)(a2 + swift_weakDestroy(v0 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7 & 1;
    *(_BYTE *)(a2 + 25) = HIBYTE(v7);
  }

  return result;
}

uint64_t sub_1000091FC(void *a1)
{
  return sub_100008F80( a1,  *(void *)v1,  *(_BYTE *)(v1 + 8),  *(void *)(v1 + 16),  *(unsigned __int8 *)(v1 + 24) | (*(unsigned __int8 *)(v1 + 25) << 8));
}

void *sub_100009238(void *a1)
{
  uint64_t v3 = sub_100005394(&qword_100076F10);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_1000087E0(a1, v7);
  unint64_t v10 = sub_10000936C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for DefaultResponseContent.CodingKeys,  &type metadata for DefaultResponseContent.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    sub_100007A28(a1);
  }

  else
  {
    sub_1000093B0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = v12;
    sub_100007A28(a1);
  }

  return v9;
}

unint64_t sub_10000936C()
{
  unint64_t result = qword_100076F18;
  if (!qword_100076F18)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005B8A4, &type metadata for DefaultResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100076F18);
  }

  return result;
}

unint64_t sub_1000093B0()
{
  unint64_t result = qword_100076F20;
  if (!qword_100076F20)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005B87C, &type metadata for ConfigurationResponseContent);
    atomic_store(result, (unint64_t *)&qword_100076F20);
  }

  return result;
}

unint64_t sub_1000093F4()
{
  unint64_t result = qword_100076F30;
  if (!qword_100076F30)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005B854, &type metadata for ConfigurationResponseContent);
    atomic_store(result, (unint64_t *)&qword_100076F30);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for DefaultResponseContent.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100009478 + 4 * byte_10005B690[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100009498 + 4 * byte_10005B695[v4]))();
  }
}

_BYTE *sub_100009478(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100009498(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000094A0(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000094A8(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000094B0(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000094B8(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DefaultResponseContent.CodingKeys()
{
  return &type metadata for DefaultResponseContent.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ConfigurationResponseContent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 26)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 25);
  if (v3 >= 2) {
    int v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v4 = -2;
  }
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfigurationResponseContent( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(_WORD *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 26) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 26) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 25) = a2 + 2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ConfigurationResponseContent()
{
  return &type metadata for ConfigurationResponseContent;
}

uint64_t sub_10000958C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000095A0(a1, a2, a3, (uint64_t (*)(void))sub_1000093B0, (uint64_t (*)(void))sub_1000093F4);
}

uint64_t sub_1000095A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  *(void *)(a1 + 8) = a4();
  uint64_t result = a5();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1000095D4()
{
  unint64_t result = qword_100076F38;
  if (!qword_100076F38)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005B82C, &type metadata for DefaultResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100076F38);
  }

  return result;
}

unint64_t sub_10000961C()
{
  unint64_t result = qword_100076F40;
  if (!qword_100076F40)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005B79C, &type metadata for DefaultResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100076F40);
  }

  return result;
}

unint64_t sub_100009664()
{
  unint64_t result = qword_100076F48;
  if (!qword_100076F48)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005B7C4, &type metadata for DefaultResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100076F48);
  }

  return result;
}

unint64_t sub_1000096A8(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000690E0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000096F0(void *a1)
{
  uint64_t v3 = sub_100005394(&qword_100076F50);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_1000087E0(a1, v7);
  unint64_t v9 = sub_100009890();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ConfigurationResponseContent.CodingKeys,  &type metadata for ConfigurationResponseContent.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    sub_100007A28(a1);
  }

  else
  {
    char v19 = 0;
    uint64_t v7 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v19, v3);
    char v11 = v10;
    char v18 = 1;
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v18, v3);
    HIDWORD(v14) = v13;
    char v17 = 2;
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v17, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100007A28(a1);
    char v16 = v11 & 1;
    char v15 = BYTE4(v14) & 1;
  }

  return v7;
}

unint64_t sub_100009890()
{
  unint64_t result = qword_100076F58;
  if (!qword_100076F58)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005B9E4, &type metadata for ConfigurationResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100076F58);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for ConfigurationResponseContent.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100009920 + 4 * byte_10005B69F[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100009954 + 4 * byte_10005B69A[v4]))();
}

uint64_t sub_100009954(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000995C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100009964LL);
  }
  return result;
}

uint64_t sub_100009970(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100009978LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10000997C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100009984(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConfigurationResponseContent.CodingKeys()
{
  return &type metadata for ConfigurationResponseContent.CodingKeys;
}

unint64_t sub_1000099A4()
{
  unint64_t result = qword_100076F68;
  if (!qword_100076F68)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005B9BC, &type metadata for ConfigurationResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100076F68);
  }

  return result;
}

unint64_t sub_1000099EC()
{
  unint64_t result = qword_100076F70;
  if (!qword_100076F70)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005B8F4, &type metadata for ConfigurationResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100076F70);
  }

  return result;
}

unint64_t sub_100009A34()
{
  unint64_t result = qword_100076F78;
  if (!qword_100076F78)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005B91C, &type metadata for ConfigurationResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100076F78);
  }

  return result;
}

uint64_t sub_100009A7C()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000002FLL,  0x8000000100056250LL,  0x616E656369766564LL,  0xEE00636E7973656DLL);
  qword_1000798C0 = result;
  return result;
}

uint64_t sub_100009AE4()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000002FLL,  0x8000000100056250LL,  0x66666F646E6168LL,  0xE700000000000000LL);
  qword_1000798C8 = result;
  return result;
}

uint64_t destroy for FMIPPlaySoundDevice(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

uint64_t initializeWithCopy for FMIPPlaySoundDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  ((void (*)(void))swift_bridgeObjectRetain)();
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for FMIPPlaySoundDevice(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for FMIPPlaySoundDevice(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  return result;
}

uint64_t assignWithTake for FMIPPlaySoundDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPPlaySoundDevice(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPPlaySoundDevice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for FMIPPlaySoundDevice()
{
  return &type metadata for FMIPPlaySoundDevice;
}

uint64_t sub_100009D1C(void *a1)
{
  __int128 v3 = v1;
  uint64_t v5 = sub_100005394(&qword_100076FA0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000087E0(a1, v9);
  unint64_t v11 = sub_10000A504();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for FMIPPlaySoundDevice.CodingKeys,  &type metadata for FMIPPlaySoundDevice.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v21, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v20 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v20, v5);
    uint64_t v16 = *((unsigned __int8 *)v3 + 32);
    char v19 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v19, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100009E58(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100051CB0(*a1, *a2);
}

Swift::Int sub_100009E64()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v7, 0LL);
  unint64_t v2 = 0xE800000000000000LL;
  unint64_t v3 = 0x7974696C61636F6CLL;
  if (v1 != 1)
  {
    unint64_t v3 = 0xD00000000000001ALL;
    unint64_t v2 = 0x8000000100055B00LL;
  }

  if (v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x6449726576726573LL;
  }
  if (v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xE800000000000000LL;
  }
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_100009F08(uint64_t a1)
{
  unint64_t v2 = 0xE800000000000000LL;
  unint64_t v3 = 0x7974696C61636F6CLL;
  if (*v1 != 1)
  {
    unint64_t v3 = 0xD00000000000001ALL;
    unint64_t v2 = 0x8000000100055B00LL;
  }

  if (*v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x6449726576726573LL;
  }
  if (*v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xE800000000000000LL;
  }
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100009F88(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  unint64_t v3 = 0xE800000000000000LL;
  unint64_t v4 = 0x7974696C61636F6CLL;
  if (v2 != 1)
  {
    unint64_t v4 = 0xD00000000000001ALL;
    unint64_t v3 = 0x8000000100055B00LL;
  }

  if (v2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0x6449726576726573LL;
  }
  if (v2) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = 0xE800000000000000LL;
  }
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_10000A028@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10000A298(*a1);
  *a2 = result;
  return result;
}

void sub_10000A054(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE800000000000000LL;
  unint64_t v4 = 0xE800000000000000LL;
  unint64_t v5 = 0x7974696C61636F6CLL;
  if (v2 != 1)
  {
    unint64_t v5 = 0xD00000000000001ALL;
    unint64_t v4 = 0x8000000100055B00LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6449726576726573LL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_10000A0B8()
{
  unint64_t v1 = 0x7974696C61636F6CLL;
  if (*v0 != 1) {
    unint64_t v1 = 0xD00000000000001ALL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6449726576726573LL;
  }
}

unint64_t sub_10000A118@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10000A298(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10000A13C(uint64_t a1)
{
  unint64_t v2 = sub_10000A504();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000A164(uint64_t a1)
{
  unint64_t v2 = sub_10000A504();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10000A18C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    double result = *(double *)v6;
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v5;
    *(_BYTE *)(a2 + 32) = v7;
  }

  return result;
}

uint64_t sub_10000A1D0(void *a1)
{
  return sub_100009D1C(a1);
}

unint64_t sub_10000A1E4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10000A210();
  unint64_t result = sub_10000A254();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_10000A210()
{
  unint64_t result = qword_100076F80;
  if (!qword_100076F80)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005BAAC, &type metadata for FMIPPlaySoundDevice);
    atomic_store(result, (unint64_t *)&qword_100076F80);
  }

  return result;
}

unint64_t sub_10000A254()
{
  unint64_t result = qword_100076F88;
  if (!qword_100076F88)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005BA84, &type metadata for FMIPPlaySoundDevice);
    atomic_store(result, (unint64_t *)&qword_100076F88);
  }

  return result;
}

unint64_t sub_10000A298(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100069148, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10000A2E0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100005394(&qword_100076F90);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000087E0(a1, v9);
  unint64_t v11 = sub_10000A504();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for FMIPPlaySoundDevice.CodingKeys,  &type metadata for FMIPPlaySoundDevice.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100007A28(a1);
  }
  char v26 = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v26, v5);
  uint64_t v14 = v13;
  uint64_t v23 = v12;
  char v25 = 1;
  swift_bridgeObjectRetain(v13);
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)(&v25, v5);
  uint64_t v17 = v16;
  uint64_t v21 = v15;
  char v24 = 2;
  swift_bridgeObjectRetain(v16);
  uint64_t v22 = v17;
  LOBYTE(v17) = KeyedDecodingContainer.decode(_:forKey:)(&v24, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_100007A28(a1);
  uint64_t v18 = v22;
  swift_bridgeObjectRelease(v22);
  uint64_t result = swift_bridgeObjectRelease(v14);
  *(void *)a2 = v23;
  *(void *)(a2 + 8) = v14;
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = v21;
  *(void *)(a2 + 24) = v18;
  *(_BYTE *)(a2 + 32) = v17 & 1;
  return result;
}

unint64_t sub_10000A504()
{
  unint64_t result = qword_100076F98;
  if (!qword_100076F98)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005BBEC, &type metadata for FMIPPlaySoundDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100076F98);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPPlaySoundDevice.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10000A594 + 4 * byte_10005BA45[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10000A5C8 + 4 * byte_10005BA40[v4]))();
}

uint64_t sub_10000A5C8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000A5D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10000A5D8LL);
  }
  return result;
}

uint64_t sub_10000A5E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10000A5ECLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10000A5F0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000A5F8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPPlaySoundDevice.CodingKeys()
{
  return &type metadata for FMIPPlaySoundDevice.CodingKeys;
}

unint64_t sub_10000A618()
{
  unint64_t result = qword_100076FA8;
  if (!qword_100076FA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005BBC4, &type metadata for FMIPPlaySoundDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100076FA8);
  }

  return result;
}

unint64_t sub_10000A660()
{
  unint64_t result = qword_100076FB0;
  if (!qword_100076FB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005BAFC, &type metadata for FMIPPlaySoundDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100076FB0);
  }

  return result;
}

unint64_t sub_10000A6A8()
{
  unint64_t result = qword_100076FB8;
  if (!qword_100076FB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005BB24, &type metadata for FMIPPlaySoundDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100076FB8);
  }

  return result;
}

unint64_t sub_10000A6EC()
{
  uint64_t v1 = type metadata accessor for String.Encoding(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v25[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  unint64_t v5 = v0[5];
  uint64_t v26 = v0[4];
  unint64_t v27 = v5;
  swift_bridgeObjectRetain(v5);
  v6._countAndFlagsBits = 58LL;
  v6._object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  uint64_t v8 = v0[2];
  uint64_t v7 = (void *)v0[3];
  swift_bridgeObjectRetain(v7);
  v9._countAndFlagsBits = v8;
  v9._object = v7;
  String.append(_:)(v9);
  uint64_t v10 = swift_bridgeObjectRelease(v7);
  uint64_t v11 = v26;
  unint64_t v12 = v27;
  static String.Encoding.utf8.getter(v10);
  uint64_t v13 = String.data(using:allowLossyConversion:)(v4, 0LL, v11, v12);
  unint64_t v15 = v14;
  swift_bridgeObjectRelease(v12);
  uint64_t v16 = (*(uint64_t (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  if (v15 >> 60 == 15)
  {
    uint64_t v17 = static os_log_type_t.error.getter(v16);
    sub_100005818();
    uint64_t v18 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)( "Missing Authorization Headers",  29LL,  2LL,  &_mh_execute_header,  v18,  v17,  &_swiftEmptyArrayStorage);

    inited = &_swiftEmptyArrayStorage;
  }

  else
  {
    Swift::String v20 = Data.base64EncodedString(options:)(0LL);
    sub_10000AAC8(v13, v15);
    uint64_t v26 = 0x206369736142LL;
    unint64_t v27 = 0xE600000000000000LL;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(v20._object);
    uint64_t v21 = v26;
    unint64_t v22 = v27;
    uint64_t v23 = sub_100005394(&qword_1000770C8);
    inited = (void *)swift_initStackObject(v23, v25);
    *((_OWORD *)inited + 1) = xmmword_10005B2C0;
    strcpy((char *)inited + 32, "Authorization");
    *((_WORD *)inited + 23) = -4864;
    *((void *)inited + 6) = v21;
    *((void *)inited + 7) = v22;
  }

  return sub_10003A018((uint64_t)inited);
}

unint64_t sub_10000A8D8()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = (void *)v0[5];
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 0x203A74736F6820LL;
  v4._object = (void *)0xE700000000000000LL;
  String.append(_:)(v4);
  uint64_t v6 = v0[6];
  unint64_t v5 = (void *)v0[7];
  swift_bridgeObjectRetain(v5);
  v7._countAndFlagsBits = v6;
  v7._object = v5;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v5);
  return 0xD000000000000017LL;
}

uint64_t sub_10000A9A4()
{
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

uint64_t type metadata accessor for FMIPRequestCredential()
{
  return objc_opt_self(&OBJC_CLASS____TtC20FMIPClientXPCService21FMIPRequestCredential);
}

uint64_t sub_10000A9F8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 24LL));
  return v1;
}

uint64_t sub_10000AA28()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32LL);
  swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 40LL));
  return v1;
}

unint64_t sub_10000AA58()
{
  return sub_10000A6EC();
}

uint64_t sub_10000AA78()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 56LL));
  return v1;
}

unint64_t sub_10000AAA8()
{
  return sub_10000A8D8();
}

uint64_t sub_10000AAC8(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10000AADC(result, a2);
  }
  return result;
}

uint64_t sub_10000AADC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10000AB20(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10000AB60 + 4 * byte_10005BCD0[a1]))( 0x72694672656E776FLL,  0xEE00656D614E7473LL);
}

uint64_t sub_10000AB60()
{
  return 0x73614C72656E776FLL;
}

uint64_t sub_10000AB84()
{
  return 0x49534472656E776FLL;
}

uint64_t sub_10000ABA0()
{
  return 0x6449726576726573LL;
}

uint64_t sub_10000ABB8()
{
  return 0x614E656369766564LL;
}

uint64_t sub_10000ABD8()
{
  return 0x6C43656369766564LL;
}

unint64_t sub_10000ABF8()
{
  return 0xD000000000000012LL;
}

uint64_t sub_10000AC18()
{
  return 0x54746375646F7270LL;
}

unint64_t sub_10000AC38()
{
  return 0xD000000000000011LL;
}

uint64_t sub_10000AC54()
{
  return 0x6976654473696874LL;
}

uint64_t sub_10000AC70()
{
  return 0x666153736465656ELL;
}

uint64_t sub_10000AC90()
{
  return 0x6544646572696170LL;
}

uint64_t sub_10000ACB4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10000ACF4 + 4 * byte_10005BCDC[a1]))( 0x72694672656E776FLL,  0xEE00656D614E7473LL);
}

uint64_t sub_10000ACF4()
{
  return 0x73614C72656E776FLL;
}

uint64_t sub_10000AD18()
{
  return 0x49534472656E776FLL;
}

uint64_t sub_10000AD34()
{
  return 0x6449726576726573LL;
}

uint64_t sub_10000AD4C()
{
  return 0x614E656369766564LL;
}

uint64_t sub_10000AD6C()
{
  return 0x6C43656369766564LL;
}

unint64_t sub_10000AD8C()
{
  return 0xD000000000000012LL;
}

uint64_t sub_10000ADAC()
{
  return 0x54746375646F7270LL;
}

unint64_t sub_10000ADCC()
{
  return 0xD000000000000011LL;
}

uint64_t sub_10000ADE8()
{
  return 0x6976654473696874LL;
}

uint64_t sub_10000AE04()
{
  return 0x666153736465656ELL;
}

uint64_t sub_10000AE24()
{
  return 0x6544646572696170LL;
}

uint64_t sub_10000AE48(void *a1)
{
  Swift::String v3 = v1;
  uint64_t v5 = sub_100005394(&qword_100077100);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v33[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000087E0(a1, v9);
  unint64_t v11 = sub_10000C5F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for FMIPSearchResponseDevice.CodingKeys,  &type metadata for FMIPSearchResponseDevice.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = v3[10];
  uint64_t v13 = v3[11];
  v34[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v34, v5);
  if (!v2)
  {
    uint64_t v14 = v3[12];
    uint64_t v15 = v3[13];
    v34[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, v34, v5);
    uint64_t v16 = v3[14];
    uint64_t v17 = v3[15];
    v34[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, v34, v5);
    uint64_t v18 = *v3;
    uint64_t v19 = v3[1];
    v34[0] = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, v34, v5);
    uint64_t v20 = v3[2];
    uint64_t v21 = v3[3];
    v34[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, v34, v5);
    uint64_t v22 = v3[4];
    uint64_t v23 = v3[5];
    v34[0] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, v34, v5);
    uint64_t v24 = v3[6];
    uint64_t v25 = v3[7];
    v34[0] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, v34, v5);
    uint64_t v26 = v3[8];
    uint64_t v27 = v3[9];
    v34[0] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, v34, v5);
    uint64_t v28 = v3[16];
    uint64_t v29 = v3[17];
    v34[0] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, v34, v5);
    uint64_t v30 = *((unsigned __int8 *)v3 + 144);
    v34[0] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30, v34, v5);
    uint64_t v31 = *((unsigned __int8 *)v3 + 145);
    v34[0] = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v31, v34, v5);
    sub_10000C634((uint64_t)(v3 + 19), (uint64_t)v35);
    sub_10000C634((uint64_t)v35, (uint64_t)v34);
    v33[15] = 11;
    sub_100005394(&qword_1000770F0);
    sub_10000C67C( &qword_100077110,  (void (*)(void))sub_10000BCD0,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v34);
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10000B138(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = sub_10000AB20(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_10000AB20(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_10000B1C0()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = sub_10000AB20(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10000B220(uint64_t a1)
{
  uint64_t v3 = sub_10000AB20(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10000B260(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = sub_10000AB20(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_10000B2BC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10000BD14(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10000B2E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10000AB20(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10000B310()
{
  return sub_10000ACB4(*v0);
}

unint64_t sub_10000B318@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10000BD14(a1);
  *a2 = result;
  return result;
}

void sub_10000B33C(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_10000B348(uint64_t a1)
{
  unint64_t v2 = sub_10000C5F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000B370(uint64_t a1)
{
  unint64_t v2 = sub_10000C5F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10000B398@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v10[7];
    a2[6] = v10[6];
    a2[7] = v5;
    __int128 v6 = v10[9];
    a2[8] = v10[8];
    a2[9] = v6;
    __int128 v7 = v10[3];
    a2[2] = v10[2];
    a2[3] = v7;
    __int128 v8 = v10[5];
    a2[4] = v10[4];
    a2[5] = v8;
    double result = *(double *)v10;
    __int128 v9 = v10[1];
    *a2 = v10[0];
    a2[1] = v9;
  }

  return result;
}

uint64_t sub_10000B3F0(void *a1)
{
  return sub_10000AE48(a1);
}

void *sub_10000B440()
{
  uint64_t v28 = *(void *)(v0 + 152);
  if (!v28) {
    return 0LL;
  }
  uint64_t v1 = *(void *)(v28 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    swift_bridgeObjectRetain(v28);
    specialized ContiguousArray.reserveCapacity(_:)(v1);
    uint64_t v3 = 32LL;
    do
    {
      __int128 v4 = *(_OWORD *)(v28 + v3 + 16);
      __int128 v43 = *(_OWORD *)(v28 + v3);
      __int128 v44 = v4;
      __int128 v5 = *(_OWORD *)(v28 + v3 + 32);
      __int128 v6 = *(_OWORD *)(v28 + v3 + 48);
      __int128 v7 = *(_OWORD *)(v28 + v3 + 80);
      __int128 v47 = *(_OWORD *)(v28 + v3 + 64);
      __int128 v48 = v7;
      __int128 v45 = v5;
      __int128 v46 = v6;
      __int128 v8 = *(_OWORD *)(v28 + v3 + 96);
      __int128 v9 = *(_OWORD *)(v28 + v3 + 112);
      __int128 v10 = *(_OWORD *)(v28 + v3 + 144);
      __int128 v51 = *(_OWORD *)(v28 + v3 + 128);
      __int128 v52 = v10;
      __int128 v49 = v8;
      __int128 v50 = v9;
      char v38 = v10;
      char v36 = BYTE1(v10);
      uint64_t v11 = *((void *)&v9 + 1);
      uint64_t v29 = *((void *)&v51 + 1);
      uint64_t v30 = *((void *)&v9 + 1);
      uint64_t v12 = *((void *)&v8 + 1);
      uint64_t v13 = *((void *)&v48 + 1);
      uint64_t v41 = v8;
      uint64_t v42 = v9;
      uint64_t v14 = *((void *)&v47 + 1);
      uint64_t v39 = v51;
      uint64_t v40 = v48;
      uint64_t v15 = *((void *)&v46 + 1);
      uint64_t v31 = *((void *)&v8 + 1);
      uint64_t v32 = v47;
      uint64_t v16 = *((void *)&v45 + 1);
      uint64_t v17 = *((void *)&v44 + 1);
      uint64_t v34 = v45;
      uint64_t v35 = v46;
      uint64_t v18 = *((void *)&v43 + 1);
      uint64_t v33 = v44;
      uint64_t v37 = v43;
      sub_10000B678(&v43);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v15);
      uint64_t v19 = swift_bridgeObjectRetain(v29);
      uint64_t v20 = sub_10000B440(v19);
      id v21 = objc_allocWithZone((Class)type metadata accessor for SearchResultDevice(0LL));
      BYTE1(v27) = v36 & 1;
      LOBYTE(v27) = v38 & 1;
      uint64_t v22 = SearchResultDevice.init(firstName:lastName:ownerDsid:serverId:deviceName:deviceClass:productName:discoveryId:productType:thisDevice:needsSafety:pairedDevices:)( v40,  v13,  v41,  v31,  v42,  v30,  v37,  v18,  v33,  v17,  v34,  v16,  v35,  v15,  v39,  v29,  v32,  v14,  v27,  v20);
      uint64_t v23 = sub_10000B72C(&v43);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v23);
      uint64_t v24 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
      uint64_t v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v22);
      specialized ContiguousArray._endMutation()(v25);
      v3 += 160LL;
      --v1;
    }

    while (v1);
    uint64_t v2 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v28);
  }

  return v2;
}

void *sub_10000B678(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[9];
  uint64_t v7 = a1[11];
  uint64_t v8 = a1[13];
  uint64_t v9 = a1[15];
  uint64_t v10 = a1[17];
  swift_bridgeObjectRetain(a1[19]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

void *sub_10000B72C(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[9];
  uint64_t v6 = a1[11];
  uint64_t v7 = a1[13];
  uint64_t v8 = a1[15];
  uint64_t v9 = a1[17];
  uint64_t v10 = a1[19];
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t destroy for FMIPSearchResponseDevice(void *a1)
{
  return swift_bridgeObjectRelease(a1[19]);
}

uint64_t initializeWithCopy for FMIPSearchResponseDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  uint64_t v11 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v11;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  uint64_t v12 = *(void *)(a2 + 152);
  *(void *)(a1 + 152) = v12;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t assignWithCopy for FMIPSearchResponseDevice(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 88);
  uint64_t v15 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v16 = *(void *)(a2 + 104);
  uint64_t v17 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  uint64_t v18 = *(void *)(a2 + 120);
  uint64_t v19 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  uint64_t v20 = *(void *)(a2 + 136);
  uint64_t v21 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  uint64_t v22 = *(void *)(a1 + 152);
  uint64_t v23 = *(void *)(a2 + 152);
  *(void *)(a1 + 152) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v22);
  return a1;
}

__n128 initializeWithTake for FMIPSearchResponseDevice(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for FMIPSearchResponseDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 88);
  uint64_t v15 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v14;
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(void *)(a2 + 104);
  uint64_t v17 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v16;
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = *(void *)(a2 + 120);
  uint64_t v19 = *(void *)(a1 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v18;
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = *(void *)(a2 + 136);
  uint64_t v21 = *(void *)(a1 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v20;
  swift_bridgeObjectRelease(v21);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  uint64_t v22 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease(v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPSearchResponseDevice(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 160)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPSearchResponseDevice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0LL;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 160) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 160) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for FMIPSearchResponseDevice()
{
  return &type metadata for FMIPSearchResponseDevice;
}

unint64_t sub_10000BC60(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10000BC8C();
  unint64_t result = sub_10000BCD0();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_10000BC8C()
{
  unint64_t result = qword_1000770D0;
  if (!qword_1000770D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005BD64, &type metadata for FMIPSearchResponseDevice);
    atomic_store(result, (unint64_t *)&qword_1000770D0);
  }

  return result;
}

unint64_t sub_10000BCD0()
{
  unint64_t result = qword_1000770D8;
  if (!qword_1000770D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005BD3C, &type metadata for FMIPSearchResponseDevice);
    atomic_store(result, (unint64_t *)&qword_1000770D8);
  }

  return result;
}

unint64_t sub_10000BD14(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000691B0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xC) {
    return 12LL;
  }
  else {
    return v3;
  }
}

void *sub_10000BD5C@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = sub_100005394(&qword_1000770E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  v87 = a1;
  sub_1000087E0(a1, v9);
  unint64_t v11 = sub_10000C5F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for FMIPSearchResponseDevice.CodingKeys,  &type metadata for FMIPSearchResponseDevice.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return (void *)sub_100007A28(v87);
  }
  LOBYTE(v77[0]) = 0;
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v77, v5);
  uint64_t v14 = v13;
  LOBYTE(v77[0]) = 1;
  swift_bridgeObjectRetain(v13);
  uint64_t v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v77, v5);
  uint64_t v63 = v12;
  LOBYTE(v77[0]) = 2;
  uint64_t v16 = v15;
  swift_bridgeObjectRetain(v15);
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v77, v5);
  uint64_t v66 = v16;
  uint64_t v61 = v17;
  LOBYTE(v77[0]) = 3;
  uint64_t v19 = v18;
  swift_bridgeObjectRetain(v18);
  uint64_t v59 = KeyedDecodingContainer.decode(_:forKey:)(v77, v5);
  uint64_t v60 = v19;
  LOBYTE(v77[0]) = 4;
  uint64_t v21 = v20;
  swift_bridgeObjectRetain(v20);
  uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v77, v5);
  uint64_t v65 = v21;
  uint64_t v58 = v22;
  LOBYTE(v77[0]) = 5;
  uint64_t v24 = v23;
  swift_bridgeObjectRetain(v23);
  uint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v77, v5);
  uint64_t v64 = v24;
  uint64_t v56 = v25;
  uint64_t v57 = v26;
  LOBYTE(v77[0]) = 6;
  swift_bridgeObjectRetain(v26);
  uint64_t v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v77, v5);
  uint64_t v27 = v57;
  LOBYTE(v77[0]) = 7;
  uint64_t v55 = v28;
  swift_bridgeObjectRetain(v28);
  uint64_t v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v77, v5);
  LOBYTE(v77[0]) = 8;
  uint64_t v54 = v29;
  swift_bridgeObjectRetain(v29);
  uint64_t v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v77, v5);
  uint64_t v53 = v30;
  LOBYTE(v77[0]) = 9;
  swift_bridgeObjectRetain(v30);
  uint64_t v49 = 0LL;
  int v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v77, v5);
  LOBYTE(v77[0]) = 10;
  int v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v77, v5);
  sub_100005394(&qword_1000770F0);
  char v83 = 11;
  sub_10000C67C(&qword_1000770F8, (void (*)(void))sub_10000BC8C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v84);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v49 = v84;
  uint64_t v31 = v64;
  uint64_t v32 = v65;
  *(void *)&__int128 v67 = v59;
  *((void *)&v67 + 1) = v65;
  *(void *)&__int128 v68 = v58;
  *((void *)&v68 + 1) = v64;
  uint64_t v33 = v55;
  *(void *)&__int128 v69 = v56;
  *((void *)&v69 + 1) = v27;
  *(void *)&__int128 v70 = v52;
  *((void *)&v70 + 1) = v55;
  uint64_t v34 = v54;
  *(void *)&__int128 v71 = v51;
  *((void *)&v71 + 1) = v54;
  *(void *)&__int128 v72 = v63;
  *((void *)&v72 + 1) = v14;
  uint64_t v35 = v66;
  *(void *)&__int128 v73 = v62;
  *((void *)&v73 + 1) = v66;
  *(void *)&__int128 v74 = v61;
  *((void *)&v74 + 1) = v60;
  *(void *)&__int128 v75 = v50;
  *((void *)&v75 + 1) = v53;
  LOBYTE(v76) = v48;
  BYTE1(v76) = v47;
  *((void *)&v76 + 1) = v84;
  sub_10000B678(&v67);
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v31);
  uint64_t v36 = v57;
  swift_bridgeObjectRelease(v57);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v14);
  uint64_t v37 = v35;
  swift_bridgeObjectRelease(v35);
  uint64_t v38 = v60;
  swift_bridgeObjectRelease(v60);
  uint64_t v39 = v53;
  swift_bridgeObjectRelease(v53);
  sub_100007A28(v87);
  v77[0] = v59;
  v77[1] = v65;
  v77[2] = v58;
  v77[3] = v64;
  v77[4] = v56;
  v77[5] = v36;
  v77[6] = v52;
  v77[7] = v55;
  v77[8] = v51;
  v77[9] = v34;
  v77[10] = v63;
  v77[11] = v14;
  v77[12] = v62;
  v77[13] = v37;
  v77[14] = v61;
  v77[15] = v38;
  v77[16] = v50;
  v77[17] = v39;
  char v78 = v48;
  char v79 = v47;
  int v80 = v85;
  __int16 v81 = v86;
  uint64_t v82 = v49;
  unint64_t result = sub_10000B72C(v77);
  __int128 v41 = v74;
  a2[6] = v73;
  a2[7] = v41;
  __int128 v42 = v76;
  a2[8] = v75;
  a2[9] = v42;
  __int128 v43 = v70;
  a2[2] = v69;
  a2[3] = v43;
  __int128 v44 = v72;
  a2[4] = v71;
  a2[5] = v44;
  __int128 v45 = v68;
  *a2 = v67;
  a2[1] = v45;
  return result;
}

unint64_t sub_10000C5F0()
{
  unint64_t result = qword_1000770E8;
  if (!qword_1000770E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005BEA4, &type metadata for FMIPSearchResponseDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000770E8);
  }

  return result;
}

uint64_t sub_10000C634(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005394(&qword_100077108);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000C67C(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_100005420(&qword_1000770F0);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for FMIPSearchResponseDevice.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }

uint64_t storeEnumTagSinglePayload for FMIPSearchResponseDevice.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF4) {
    return ((uint64_t (*)(void))((char *)&loc_10000C7C0 + 4 * byte_10005BCED[v4]))();
  }
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_10000C7F4 + 4 * byte_10005BCE8[v4]))();
}

uint64_t sub_10000C7F4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000C7FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10000C804LL);
  }
  return result;
}

uint64_t sub_10000C810(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10000C818LL);
  }
  *(_BYTE *)uint64_t result = a2 + 11;
  return result;
}

uint64_t sub_10000C81C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000C824(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPSearchResponseDevice.CodingKeys()
{
  return &type metadata for FMIPSearchResponseDevice.CodingKeys;
}

unint64_t sub_10000C844()
{
  unint64_t result = qword_100077118;
  if (!qword_100077118)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005BE7C, &type metadata for FMIPSearchResponseDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100077118);
  }

  return result;
}

unint64_t sub_10000C88C()
{
  unint64_t result = qword_100077120;
  if (!qword_100077120)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005BDB4, &type metadata for FMIPSearchResponseDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100077120);
  }

  return result;
}

unint64_t sub_10000C8D4()
{
  unint64_t result = qword_100077128;
  if (!qword_100077128)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005BDDC, &type metadata for FMIPSearchResponseDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100077128);
  }

  return result;
}

uint64_t sub_10000C918()
{
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t sub_10000C980()
{
  return type metadata accessor for ServerInteractionController(0LL);
}

uint64_t type metadata accessor for ServerInteractionController(uint64_t a1)
{
  uint64_t result = qword_100077158;
  if (!qword_100077158) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ServerInteractionController);
  }
  return result;
}

void sub_10000C9C4(uint64_t a1)
{
  v4[0] = "(";
  sub_10000CA50(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    v4[2] = &unk_10005BF78;
    v4[3] = &unk_10005BF90;
    swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
  }

void sub_10000CA50(uint64_t a1)
{
  if (!qword_100077168)
  {
    uint64_t v2 = type metadata accessor for ClientConfigurationCache(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100077168);
    }
  }

uint64_t sub_10000CAA4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v32 = a3;
  uint64_t v15 = *(void *)(a8 - 8);
  __chkstk_darwin(a1);
  uint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v15 + 16))(v17);
  v49[3] = a9;
  v49[4] = a11;
  uint64_t v18 = sub_10000CD88(v49);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a9 - 8) + 16LL))(v18, a2, a9);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a10 + 8))(&v43, a8, a10);
  if (*((void *)&v44 + 1))
  {
    sub_100007A00(&v43, (uint64_t)&v50);
    sub_100007E2C((uint64_t)&v50, (uint64_t)&v43);
    sub_100027DCC(&v43, (uint64_t)&v35);
    sub_10000CE10((uint64_t)&v35, (uint64_t)&v43);
    if ((void)v43)
    {
      sub_10000CE58((uint64_t)&v43, (uint64_t)&v35);
      sub_100028010();
      sub_10000CE94((uint64_t)&v35);
    }

    sub_100007A28(&v50);
  }

  else
  {
    sub_10000D20C((uint64_t)&v43, &qword_100077228);
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    uint64_t v48 = 0LL;
  }

  swift_bridgeObjectRetain(a4);
  uint64_t v19 = sub_1000291F8();
  uint64_t v21 = v20;
  sub_100007E2C(a7 + 16, (uint64_t)&v41);
  unint64_t v22 = sub_10003A018((uint64_t)_swiftEmptyArrayStorage);
  sub_100007E2C((uint64_t)&v41, (uint64_t)&v35);
  sub_1000122E4(v32, a4, v19, v21, &v35, (uint64_t *)&v50);
  __int128 v35 = v50;
  uint64_t v36 = v51;
  uint64_t v37 = v52;
  uint64_t v38 = v53;
  __int128 v39 = v54;
  __int128 v40 = v55;
  uint64_t v23 = sub_100005394(&qword_100077230);
  unint64_t v24 = sub_10000CDC4();
  uint64_t v25 = ResponseSerializable.dictionaryValue.getter(v23, v24);
  sub_100007A28(&v41);
  uint64_t v26 = *((void *)&v35 + 1);
  uint64_t v27 = *((void *)&v39 + 1);
  swift_bridgeObjectRelease(v37);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v27);
  unint64_t v41 = v22;
  uint64_t v42 = v25;
  RequestContentRepresentable.merging(content:)(v49, &type metadata for ClientContextRequestContent, &off_10006AD38);
  uint64_t v28 = v41;
  uint64_t v29 = v42;
  sub_10000D1A4((uint64_t)&v43, (uint64_t)&v35, &qword_100077240);
  sub_10002B978((uint64_t)v17, v28, v29, (uint64_t)&v35, v33, v34, 0LL, a7, a8, a10);
  sub_10000D20C((uint64_t)&v35, &qword_100077240);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v28);
  sub_10000D20C((uint64_t)&v43, &qword_100077240);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a8);
  return sub_100007A28(v49);
}

void *sub_10000CD88(void *a1)
{
  __int16 v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

unint64_t sub_10000CDC4()
{
  unint64_t result = qword_100077238;
  if (!qword_100077238)
  {
    uint64_t v1 = sub_100005420(&qword_100077230);
    unint64_t result = swift_getWitnessTable(&unk_10005C52C, v1);
    atomic_store(result, (unint64_t *)&qword_100077238);
  }

  return result;
}

uint64_t sub_10000CE10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005394(&qword_100077240);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000CE58(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10000CE94(uint64_t a1)
{
  return a1;
}

uint64_t sub_10000CEC8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t), void *a7)
{
  v41[3] = type metadata accessor for DevicePlaySoundRequestContent();
  v41[4] = &off_10006BB08;
  v41[0] = a2;
  swift_beginAccess(a1 + 16, v34, 0LL, 0LL);
  sub_10000D1A4(a1 + 16, (uint64_t)&v35, &qword_100077228);
  if (*((void *)&v36 + 1))
  {
    sub_100007A00(&v35, (uint64_t)&v42);
    sub_100007E2C((uint64_t)&v42, (uint64_t)&v35);
    swift_retain(a7);
    swift_retain(a1);
    swift_retain(a2);
    sub_100027DCC(&v35, (uint64_t)&v26);
    sub_10000CE10((uint64_t)&v26, (uint64_t)&v35);
    if ((void)v35)
    {
      sub_10000CE58((uint64_t)&v35, (uint64_t)&v26);
      sub_100028010();
      sub_10000CE94((uint64_t)&v26);
    }

    sub_100007A28(&v42);
  }

  else
  {
    swift_retain(a7);
    swift_retain(a1);
    swift_retain(a2);
    sub_10000D20C((uint64_t)&v35, &qword_100077228);
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    uint64_t v40 = 0LL;
  }

  swift_bridgeObjectRetain(a4);
  uint64_t v14 = sub_1000291F8();
  uint64_t v16 = v15;
  sub_100007E2C(a5 + 16, (uint64_t)&v32);
  unint64_t v17 = sub_10003A018((uint64_t)_swiftEmptyArrayStorage);
  sub_100007E2C((uint64_t)&v32, (uint64_t)&v26);
  sub_1000122E4(a3, a4, v14, v16, &v26, (uint64_t *)&v42);
  __int128 v26 = v42;
  uint64_t v27 = v43;
  uint64_t v28 = v44;
  uint64_t v29 = v45;
  __int128 v30 = v46;
  __int128 v31 = v47;
  uint64_t v18 = sub_100005394(&qword_100077230);
  unint64_t v19 = sub_10000CDC4();
  uint64_t v20 = ResponseSerializable.dictionaryValue.getter(v18, v19);
  sub_100007A28(&v32);
  uint64_t v21 = *((void *)&v26 + 1);
  uint64_t v22 = *((void *)&v30 + 1);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v22);
  unint64_t v32 = v17;
  uint64_t v33 = v20;
  RequestContentRepresentable.merging(content:)(v41, &type metadata for ClientContextRequestContent, &off_10006AD38);
  uint64_t v23 = v32;
  uint64_t v24 = v33;
  sub_10000D1A4((uint64_t)&v35, (uint64_t)&v26, &qword_100077240);
  swift_retain(a7);
  sub_10002C940(a1, v23, v24, (uint64_t)&v26, 0LL, a5, a6, a7);
  swift_release(a7);
  sub_10000D20C((uint64_t)&v26, &qword_100077240);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v23);
  sub_10000D20C((uint64_t)&v35, &qword_100077240);
  swift_release(a1);
  sub_100007A28(v41);
  return swift_release(a7);
}

uint64_t sub_10000D1A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100005394(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000D1E8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10000D20C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100005394(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerInteractionController.ServerInteractionError( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

uint64_t storeEnumTagSinglePayload for ServerInteractionController.ServerInteractionError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_10000D324 + 4 * byte_10005BF05[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10000D358 + 4 * byte_10005BF00[v4]))();
}

uint64_t sub_10000D358(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000D360(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10000D368LL);
  }
  return result;
}

uint64_t sub_10000D374(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10000D37CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_10000D380(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000D388(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ServerInteractionController.ServerInteractionError()
{
  return &type metadata for ServerInteractionController.ServerInteractionError;
}

unint64_t sub_10000D3A8()
{
  unint64_t result = qword_100077258;
  if (!qword_100077258)
  {
    unint64_t result = swift_getWitnessTable( &unk_10005C008,  &type metadata for ServerInteractionController.ServerInteractionError);
    atomic_store(result, (unint64_t *)&qword_100077258);
  }

  return result;
}

uint64_t sub_10000D3EC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v24 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v23[1] = *(void *)(v3 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_dispatchQueue);
  uint64_t v14 = swift_allocObject(&unk_10006A3E0, 24LL, 7LL);
  swift_weakInit(v14 + 16, v3);
  uint64_t v15 = swift_allocObject(&unk_10006A8B8, 48LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = v14;
  *(double *)(v15 + 24) = a3;
  *(void *)(v15 + 3sub_100007A28(v0 + 2) = a1;
  *(void *)(v15 + 40) = a2;
  aBlock[4] = sub_100010DEC;
  uint64_t v27 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  aBlock[3] = &unk_10006A8D0;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain(v14);
  uint64_t v17 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v17);
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v19 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v20 = sub_100007938(&qword_100076D58, (uint64_t *)&unk_100078740);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v19, v20, v7, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v21 = v27;
  swift_release(v14);
  return swift_release(v21);
}

uint64_t sub_10000D634(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, double a4)
{
  uint64_t v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v7);
  if (result)
  {
    uint64_t v9 = result;
    sub_10000E358(a2, a3, a4);
    return swift_release(v9);
  }

  return result;
}

uint64_t sub_10000D6B4(uint64_t a1, void (*a2)(uint64_t, void), uint64_t a3)
{
  uint64_t v7 = swift_allocObject(&unk_10006A3E0, 24LL, 7LL);
  uint64_t v48 = v7 + 16;
  uint64_t v49 = v3;
  swift_weakInit(v7 + 16, v3);
  uint64_t v8 = (void *)swift_allocObject(&unk_10006A660, 40LL, 7LL);
  v8[2] = v7;
  v8[3] = a2;
  uint64_t v51 = a2;
  v8[4] = a3;
  uint64_t v9 = swift_allocObject(&unk_10006A688, 32LL, 7LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = sub_100010C80;
  *(void *)(v9 + 24) = v8;
  uint64_t v61 = 0LL;
  uint64_t v60 = 0LL;
  char v59 = 0;
  uint64_t v10 = *(dispatch_queue_s **)(a1 + 48);
  uint64_t v11 = (void *)swift_allocObject(&unk_10006A6B0, 64LL, 7LL);
  v11[2] = &v61;
  v11[3] = a1;
  v11[4] = &v60;
  v11[5] = &v59;
  v11[6] = sub_100010CB0;
  v11[7] = v9;
  uint64_t v12 = swift_allocObject(&unk_10006A6D8, 32LL, 7LL);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = sub_100010CBC;
  *(void *)(v12 + 24) = v11;
  uint64_t v57 = sub_1000078F0;
  uint64_t v58 = v12;
  aBlock = _NSConcreteStackBlock;
  uint64_t v54 = 1107296256LL;
  __int128 v55 = sub_10003CE54;
  uint64_t v56 = &unk_10006A6F0;
  uint64_t v13 = _Block_copy(&aBlock);
  uint64_t v14 = v58;
  swift_retain_n(a3, 2LL);
  swift_retain_n(v8, 2LL);
  swift_retain(v7);
  swift_retain(a1);
  swift_retain(v9);
  swift_retain(v12);
  swift_release(v14);
  queue = v10;
  dispatch_sync(v10, v13);
  _Block_release(v13);
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation(v12, "", 90LL, 149LL, 26LL, 1LL);
  uint64_t result = swift_release(v12);
  if ((v13 & 1) != 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }

  if (v59 == 1)
  {
    uint64_t v16 = v61;
    if (v61)
    {
      uint64_t v17 = v60;
      swift_errorRetain(v60);
      uint64_t v18 = swift_bridgeObjectRetain(v16);
      uint64_t v19 = static os_log_type_t.default.getter(v18);
      uint64_t v20 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
      uint64_t v21 = (void *)static OS_os_log.default.getter(v20);
      os_log(_:dso:log:type:_:)( "Device scan success.",  20LL,  2LL,  &_mh_execute_header,  v21,  v19,  &_swiftEmptyArrayStorage);

      swift_beginAccess(v48, v52, 0LL, 0LL);
      uint64_t Strong = swift_weakLoadStrong(v48);
      if (Strong)
      {
        uint64_t v23 = Strong;
        sub_10000EF84();
        swift_release(v23);
      }

      v51(v16, 0LL);
      swift_errorRelease(v17);
      swift_bridgeObjectRelease(v16);
    }
  }

  uint64_t v24 = v60;
  swift_retain(a1);
  swift_errorRelease(v24);
  uint64_t v25 = v61;
  swift_release(a1);
  swift_release(a3);
  swift_release(v7);
  swift_release_n(v8, 2LL);
  swift_release(v9);
  swift_release(v11);
  swift_bridgeObjectRelease(v25);
  uint64_t v26 = swift_allocObject(&unk_10006A3E0, 24LL, 7LL);
  swift_weakInit(v26 + 16, v49);
  uint64_t v27 = (void *)swift_allocObject(&unk_10006A728, 40LL, 7LL);
  v27[2] = v26;
  v27[3] = v51;
  v27[4] = a3;
  uint64_t v28 = swift_allocObject(&unk_10006A750, 32LL, 7LL);
  *(void *)(v28 + swift_weakDestroy(v0 + 16) = sub_100010D00;
  *(void *)(v28 + 24) = v27;
  uint64_t v61 = 0LL;
  uint64_t v60 = 0LL;
  char v59 = 0;
  uint64_t v29 = (void *)swift_allocObject(&unk_10006A778, 64LL, 7LL);
  v29[2] = &v61;
  v29[3] = a1;
  v29[4] = &v60;
  v29[5] = &v59;
  v29[6] = sub_100010D0C;
  v29[7] = v28;
  uint64_t v30 = swift_allocObject(&unk_10006A7A0, 32LL, 7LL);
  *(void *)(v30 + swift_weakDestroy(v0 + 16) = sub_100010CBC;
  *(void *)(v30 + 24) = v29;
  uint64_t v57 = sub_100010FA0;
  uint64_t v58 = v30;
  aBlock = _NSConcreteStackBlock;
  uint64_t v54 = 1107296256LL;
  __int128 v55 = sub_10003CE54;
  uint64_t v56 = &unk_10006A7B8;
  __int128 v31 = _Block_copy(&aBlock);
  uint64_t v32 = v58;
  swift_retain_n(a3, 2LL);
  swift_retain_n(v26, 2LL);
  swift_retain_n(v27, 2LL);
  swift_retain(a1);
  swift_retain(v28);
  swift_retain(v30);
  swift_release(v32);
  dispatch_sync(queue, v31);
  _Block_release(v31);
  LOBYTE(v31) = swift_isEscapingClosureAtFileLocation(v30, "", 90LL, 149LL, 26LL, 1LL);
  uint64_t result = swift_release(v30);
  uint64_t v33 = v60;
  if (v59 == 1 && v60 && !v61)
  {
    swift_errorRetain(v60);
    sub_10000DEF8(v33, v26, (uint64_t)v51, a3);
    swift_errorRelease(v33);
    uint64_t v33 = v60;
  }

  swift_retain(a1);
  swift_errorRelease(v33);
  uint64_t v34 = v61;
  swift_release(a1);
  swift_release(a3);
  swift_release_n(v26, 2LL);
  swift_release_n(v27, 2LL);
  swift_release(v28);
  swift_release(v29);
  swift_bridgeObjectRelease(v34);
  uint64_t v35 = swift_allocObject(&unk_10006A3E0, 24LL, 7LL);
  uint64_t v36 = v35 + 16;
  swift_weakInit(v35 + 16, v49);
  uint64_t v61 = 0LL;
  uint64_t v60 = 0LL;
  char v59 = 0;
  __int128 v37 = (void *)swift_allocObject(&unk_10006A7F0, 64LL, 7LL);
  v37[2] = &v61;
  v37[3] = a1;
  v37[4] = &v60;
  v37[5] = &v59;
  v37[6] = sub_100010D28;
  v37[7] = v35;
  uint64_t v38 = swift_allocObject(&unk_10006A818, 32LL, 7LL);
  *(void *)(v38 + swift_weakDestroy(v0 + 16) = sub_100010CBC;
  *(void *)(v38 + 24) = v37;
  uint64_t v57 = sub_100010FA0;
  uint64_t v58 = v38;
  aBlock = _NSConcreteStackBlock;
  uint64_t v54 = 1107296256LL;
  __int128 v55 = sub_10003CE54;
  uint64_t v56 = &unk_10006A830;
  __int128 v39 = _Block_copy(&aBlock);
  uint64_t v40 = v58;
  swift_retain(a1);
  swift_retain_n(v35, 2LL);
  swift_retain(v38);
  swift_release(v40);
  dispatch_sync(queue, v39);
  _Block_release(v39);
  LOBYTE(v39) = swift_isEscapingClosureAtFileLocation(v38, "", 90LL, 149LL, 26LL, 1LL);
  uint64_t result = swift_release(v38);
  if (v59 == 1)
  {
    uint64_t v41 = v61;
    uint64_t v42 = v60;
    swift_beginAccess(v36, &aBlock, 0LL, 0LL);
    uint64_t v43 = swift_weakLoadStrong(v36);
    if (v43)
    {
      uint64_t v44 = v43;
      uint64_t v45 = *(void **)(v43 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_shortTimeoutTimer);
      swift_bridgeObjectRetain(v41);
      swift_errorRetain(v42);
      [v45 invalidate];
      swift_release(v44);
      swift_errorRelease(v42);
      swift_bridgeObjectRelease(v41);
    }
  }

  uint64_t v46 = v60;
  swift_retain(a1);
  swift_errorRelease(v46);
  uint64_t v47 = v61;
  swift_release(a1);
  swift_release_n(v35, 2LL);
  swift_release(v37);
  return swift_bridgeObjectRelease(v47);
}

uint64_t sub_10000DE1C(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, void))
{
  uint64_t v4 = *a1;
  uint64_t v5 = a2 + 16;
  uint64_t v6 = static os_log_type_t.default.getter(a1);
  uint64_t v7 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v8 = (void *)static OS_os_log.default.getter(v7);
  os_log(_:dso:log:type:_:)("Device scan success.", 20LL, 2LL, &_mh_execute_header, v8, v6, &_swiftEmptyArrayStorage);

  swift_beginAccess(v5, v12, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    uint64_t v10 = Strong;
    sub_10000EF84();
    swift_release(v10);
  }

  return a3(v4, 0LL);
}

uint64_t sub_10000DEF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v36 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v34 = *(void *)(v9 - 8);
  uint64_t v35 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = static os_log_type_t.error.getter(v10);
  uint64_t v14 = sub_100005394(&qword_100079660);
  uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
  swift_getErrorValue(a1, v42, v41);
  uint64_t v16 = Error.localizedDescription.getter(v41[1], v41[2]);
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_100005854();
  *(void *)(v15 + 3sub_100007A28(v0 + 2) = v16;
  *(void *)(v15 + 40) = v18;
  uint64_t v19 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v20 = (void *)static OS_os_log.default.getter(v19);
  os_log(_:dso:log:type:_:)("Device scan error %@", 20LL, 2LL, &_mh_execute_header, v20, v13, v15);
  swift_bridgeObjectRelease(v15);

  swift_beginAccess(a2 + 16, v40, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2 + 16);
  if (result)
  {
    uint64_t v22 = result;
    id v23 = *(id *)(result + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_dispatchQueue);
    swift_release(v22);
    uint64_t v24 = (void *)swift_allocObject(&unk_10006A868, 48LL, 7LL);
    uint64_t v25 = v32;
    uint64_t v26 = v33;
    v24[2] = a2;
    v24[3] = v25;
    v24[4] = v26;
    v24[5] = a1;
    aBlock[4] = sub_100010DB4;
    __int128 v39 = v24;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_10004DB74;
    aBlock[3] = &unk_10006A880;
    uint64_t v27 = _Block_copy(aBlock);
    swift_retain(a2);
    swift_retain(v26);
    uint64_t v28 = swift_errorRetain(a1);
    static DispatchQoS.unspecified.getter(v28);
    __int128 v37 = &_swiftEmptyArrayStorage;
    uint64_t v29 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v30 = sub_100005394((uint64_t *)&unk_100078740);
    uint64_t v31 = sub_100007938(&qword_100076D58, (uint64_t *)&unk_100078740);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v30, v31, v6, v29);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v27);
    _Block_release(v27);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v8, v6);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v35);
    return swift_release(v39);
  }

  return result;
}

uint64_t sub_10000E204(uint64_t a1, void (*a2)(void *, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v16, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v6);
  if (Strong)
  {
    uint64_t v8 = Strong;
    uint64_t v9 = (void **)(Strong + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_discoveredDevices);
    swift_beginAccess( Strong + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_discoveredDevices,  v15,  0LL,  0LL);
    uint64_t v10 = *v9;
    swift_bridgeObjectRetain(v10);
    swift_release(v8);
  }

  else
  {
    uint64_t v10 = &_swiftEmptySetSingleton;
  }

  swift_beginAccess(v6, v14, 0LL, 0LL);
  uint64_t v11 = swift_weakLoadStrong(v6);
  if (v11)
  {
    uint64_t v12 = v11;
    sub_10000EF84();
    swift_release(v12);
  }

  a2(v10, a4);
  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_10000E2F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + 16;
  swift_beginAccess(a3 + 16, v6, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    [*(id *)(result + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_shortTimeoutTimer) invalidate];
    return swift_release(v5);
  }

  return result;
}

uint64_t sub_10000E358(void (*a1)(uint64_t, uint64_t), uint64_t a2, double a3)
{
  uint64_t v90 = a2;
  v96 = a1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v93 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v94 = *(void *)(v7 - 8);
  uint64_t v95 = v7;
  __chkstk_darwin(v7);
  v97 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v82 - v14;
  __int16 v86 = (_BYTE *)sub_100005394(&qword_100079660);
  uint64_t v16 = swift_allocObject(v86, 72LL, 7LL);
  __int128 v84 = xmmword_10005B2C0;
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
  *(void *)(v16 + 56) = &type metadata for String;
  uint64_t v87 = sub_100005854();
  *(void *)(v16 + 64) = v87;
  *(void *)(v16 + 3sub_100007A28(v0 + 2) = 0xD000000000000020LL;
  *(void *)(v16 + 40) = 0x80000001000565C0LL;
  uint64_t v17 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v18 = (void *)static OS_os_log.default.getter(v17);
  uint64_t v19 = static os_log_type_t.default.getter(v18);
  os_log(_:dso:log:type:_:)("%{public}@", 10LL, 2LL, &_mh_execute_header, v18, v19, v16);
  swift_bridgeObjectRelease(v16);

  if (a3 >= 0.0)
  {
    uint64_t v92 = v4;
    uint64_t v27 = v89;
    uint64_t v28 = v89 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_scanStartDate;
    swift_beginAccess(v89 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_scanStartDate, v114, 0LL, 0LL);
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    uint64_t v88 = v28;
    v29(v15, v28, v9);
    uint64_t v30 = v27 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_scanStopDate;
    swift_beginAccess(v30, v113, 0LL, 0LL);
    v29(v13, v30, v9);
    LOBYTE(v30) = static Date.> infix(_:_:)(v15, v13);
    uint64_t v31 = v15;
    uint64_t v32 = *(void (**)(char *, uint64_t))(v10 + 8);
    v32(v13, v9);
    uint64_t v33 = ((uint64_t (*)(char *, uint64_t))v32)(v31, v9);
    if ((v30 & 1) != 0)
    {
      uint64_t v34 = static os_log_type_t.error.getter(v33);
      uint64_t v35 = v31;
      uint64_t v36 = swift_allocObject(v86, 72LL, 7LL);
      *(_OWORD *)(v36 + swift_weakDestroy(v0 + 16) = v84;
      v29(v35, v88, v9);
      uint64_t v37 = sub_1000078F8( &qword_100077430,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter(v9, v37);
      uint64_t v40 = v39;
      uint64_t v41 = ((uint64_t (*)(char *, uint64_t))v32)(v35, v9);
      uint64_t v42 = v87;
      *(void *)(v36 + 56) = &type metadata for String;
      *(void *)(v36 + 64) = v42;
      *(void *)(v36 + 3sub_100007A28(v0 + 2) = v38;
      *(void *)(v36 + 40) = v40;
      uint64_t v43 = (void *)static OS_os_log.default.getter(v41);
      os_log(_:dso:log:type:_:)("Device scan already started %@", 30LL, 2LL, &_mh_execute_header, v43, v34, v36);
      swift_bridgeObjectRelease(v36);

      unint64_t v44 = sub_100010A38();
      uint64_t v45 = swift_allocError(&type metadata for NearbyDeviceFinder.FinderError, v44, 0LL, 0LL);
      *uint64_t v46 = 1;
      v96((uint64_t)&_swiftEmptySetSingleton, v45);
      return swift_errorRelease(v45);
    }

    else
    {
      uint64_t v82 = v10;
      uint64_t v47 = sub_100005394(&qword_100077420);
      swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
      uint64_t v87 = sub_100032F70();
      uint64_t v48 = v89;
      sub_10000D6B4(v87, v96, v90);
      type metadata accessor for DeviceDiscoveryFactory();
      sub_100044A74(1, v112, a3);
      sub_100044A74(0, v111, a3);
      sub_100044A74(2, v110, a3);
      __int128 v106 = xmmword_10005C070;
      __int16 v86 = v107;
      sub_100007E2C((uint64_t)v112, (uint64_t)v107);
      sub_100007E2C((uint64_t)v111, (uint64_t)&v108);
      uint64_t result = sub_100007E2C((uint64_t)v110, (uint64_t)&v109);
      unint64_t v49 = 0LL;
      *(void *)&__int128 v84 = OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_dispatchQueue;
      uint64_t v83 = v9;
      int v85 = v31;
      uint64_t v91 = v5;
      while (v49 < (unint64_t)v106)
      {
        uint64_t v90 = v49;
        sub_100007E2C((uint64_t)&v86[40 * v49], (uint64_t)v103);
        uint64_t v52 = v104;
        uint64_t v53 = v105;
        sub_1000087E0(v103, v104);
        uint64_t v54 = swift_allocObject(&unk_10006A570, 32LL, 7LL);
        uint64_t v55 = v87;
        *(void *)(v54 + swift_weakDestroy(v0 + 16) = v48;
        *(void *)(v54 + 24) = v55;
        uint64_t v56 = v48;
        uint64_t v57 = swift_allocObject(&unk_10006A598, 32LL, 7LL);
        *(void *)(v57 + swift_weakDestroy(v0 + 16) = v55;
        *(void *)(v57 + 24) = v56;
        uint64_t v58 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v53 + 16);
        swift_retain_n(v56, 2LL);
        swift_retain_n(v55, 2LL);
        v58(sub_100010B10, v54, sub_100010B4C, v57, v52, v53);
        swift_release(v54);
        swift_release(v57);
        uint64_t v59 = v104;
        uint64_t v60 = v105;
        sub_1000087E0(v103, v104);
        uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 8))(v59, v60);
        uint64_t v62 = *(void *)(v61 + 16);
        if (v62)
        {
          v96 = *(void (**)(uint64_t, uint64_t))(v56 + v84);
          uint64_t v89 = v61;
          uint64_t v63 = v61 + 32;
          uint64_t v48 = v56;
          do
          {
            sub_100007E2C(v63, (uint64_t)v102);
            uint64_t v64 = swift_allocObject(&unk_10006A3E0, 24LL, 7LL);
            swift_weakInit(v64 + 16, v48);
            sub_100007E2C((uint64_t)v102, (uint64_t)v101);
            uint64_t v65 = swift_allocObject(&unk_10006A5C0, 64LL, 7LL);
            sub_100007A00(v101, v65 + 16);
            *(void *)(v65 + 56) = v64;
            v99[4] = sub_100011000;
            uint64_t v100 = v65;
            v99[0] = _NSConcreteStackBlock;
            v99[1] = 1107296256LL;
            v99[2] = sub_10004DB74;
            v99[3] = &unk_10006A5D8;
            uint64_t v66 = v48;
            __int128 v67 = _Block_copy(v99);
            uint64_t v68 = swift_retain(v64);
            static DispatchQoS.unspecified.getter(v68);
            v98 = _swiftEmptyArrayStorage;
            uint64_t v69 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            uint64_t v70 = sub_100005394((uint64_t *)&unk_100078740);
            uint64_t v71 = sub_100007938(&qword_100076D58, (uint64_t *)&unk_100078740);
            uint64_t v72 = v92;
            __int128 v73 = v93;
            uint64_t v74 = v69;
            __int128 v75 = v97;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v98, v70, v71, v92, v74);
            OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v75, v73, v67);
            __int128 v76 = v67;
            uint64_t v48 = v66;
            uint64_t v77 = v91;
            _Block_release(v76);
            (*(void (**)(char *, uint64_t))(v77 + 8))(v73, v72);
            (*(void (**)(char *, uint64_t))(v94 + 8))(v75, v95);
            uint64_t v78 = v100;
            swift_release(v64);
            swift_release(v78);
            sub_100007A28(v102);
            v63 += 40LL;
            --v62;
          }

          while (v62);
          swift_bridgeObjectRelease(v89);
        }

        else
        {
          swift_bridgeObjectRelease(v61);
          uint64_t v48 = v56;
        }

        unint64_t v49 = v90 + 1;
        uint64_t result = sub_100007A28(v103);
        __int128 v50 = v85;
        uint64_t v51 = v88;
        if (v49 == 3)
        {
          uint64_t v79 = v106;
          uint64_t v80 = sub_100005394(&qword_100077428);
          uint64_t v81 = swift_arrayDestroy(v86, v79, v80);
          Date.init()(v81);
          swift_release(v87);
          sub_100007A28(v110);
          sub_100007A28(v111);
          sub_100007A28(v112);
          swift_beginAccess(v51, v99, 33LL, 0LL);
          (*(void (**)(uint64_t, char *, uint64_t))(v82 + 40))(v51, v50, v83);
          return swift_endAccess(v99);
        }
      }

      __break(1u);
    }
  }

  else
  {
    uint64_t v21 = (void *)static OS_os_log.default.getter(v20);
    uint64_t v22 = static os_log_type_t.default.getter(v21);
    os_log(_:dso:log:type:_:)( "Device scan disabled by configuration (-1).",  43LL,  2LL,  &_mh_execute_header,  v21,  v22,  _swiftEmptyArrayStorage);

    unint64_t v23 = sub_100010A38();
    uint64_t v24 = swift_allocError(&type metadata for NearbyDeviceFinder.FinderError, v23, 0LL, 0LL);
    *uint64_t v25 = 4;
    v96((uint64_t)&_swiftEmptySetSingleton, v24);
    return swift_errorRelease(v24);
  }

  return result;
}

uint64_t sub_10000EBE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v15 = (void *)static OS_os_log.default.getter(v14);
  uint64_t v16 = static os_log_type_t.default.getter(v15);
  os_log(_:dso:log:type:_:)( "NearbyDeviceFinder discoveryStoppedHandler",  42LL,  2LL,  &_mh_execute_header,  v15,  v16,  &_swiftEmptyArrayStorage);

  if (a2)
  {
    swift_errorRetain(a2);
    sub_1000229A0(0LL, a2);
    return swift_errorRelease(a2);
  }

  else
  {
    v27[1] = *(void *)(a4 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_dispatchQueue);
    uint64_t v18 = swift_allocObject(&unk_10006A3E0, 24LL, 7LL);
    swift_weakInit(v18 + 16, a4);
    uint64_t v19 = swift_allocObject(&unk_10006A610, 32LL, 7LL);
    *(void *)(v19 + swift_weakDestroy(v0 + 16) = v18;
    *(void *)(v19 + 24) = a3;
    aBlock[4] = sub_100010BB4;
    uint64_t v31 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_10004DB74;
    aBlock[3] = &unk_10006A628;
    uint64_t v20 = _Block_copy(aBlock);
    swift_retain(v18);
    uint64_t v21 = swift_retain(a3);
    static DispatchQoS.unspecified.getter(v21);
    uint64_t v29 = &_swiftEmptyArrayStorage;
    uint64_t v22 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v23 = v8;
    uint64_t v24 = sub_100005394((uint64_t *)&unk_100078740);
    uint64_t v25 = sub_100007938(&qword_100076D58, (uint64_t *)&unk_100078740);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v24, v25, v7, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v20);
    _Block_release(v20);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v7);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v28);
    uint64_t v26 = v31;
    swift_release(v18);
    return swift_release(v26);
  }

uint64_t sub_10000EEA0(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = Strong;
    uint64_t v4 = (uint64_t *)(Strong + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_discoveredDevices);
    swift_beginAccess( Strong + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_discoveredDevices,  &v10,  0LL,  0LL);
    uint64_t v5 = *v4;
    swift_bridgeObjectRetain_n(v5, 2LL);
    swift_release(v3);
    sub_1000229A0(v5, 0LL);
    return swift_bridgeObjectRelease_n(v5, 2LL);
  }

  else
  {
    unint64_t v7 = sub_100010A38();
    uint64_t v8 = swift_allocError(&type metadata for NearbyDeviceFinder.FinderError, v7, 0LL, 0LL);
    _BYTE *v9 = 3;
    sub_1000229A0(0LL, v8);
    return swift_errorRelease(v8);
  }

uint64_t sub_10000EF84()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v17 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v16[1] = *(void *)(v0 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_dispatchQueue);
  uint64_t v8 = swift_allocObject(&unk_10006A3E0, 24LL, 7LL);
  swift_weakInit(v8 + 16, v0);
  aBlock[4] = sub_100010A7C;
  uint64_t v20 = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  aBlock[3] = &unk_10006A538;
  uint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = swift_retain(v8);
  static DispatchQoS.unspecified.getter(v10);
  uint64_t v18 = &_swiftEmptyArrayStorage;
  uint64_t v11 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v12 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v13 = sub_100007938(&qword_100076D58, (uint64_t *)&unk_100078740);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v3, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v14 = v20;
  swift_release(v8);
  return swift_release(v14);
}

uint64_t sub_10000F190(uint64_t a1)
{
  uint64_t v2 = sub_100005394(&qword_100077418);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = &v42[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = &v42[-v7];
  __chkstk_darwin(v6);
  uint64_t v10 = &v42[-v9];
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = &v42[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v15 = a1 + 16;
  swift_beginAccess(v15, v48, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v15);
  if (Strong)
  {
    uint64_t v17 = Strong;
    Date.init()(Strong);
    uint64_t v18 = v17 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_scanStopDate;
    swift_beginAccess(v17 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_scanStopDate, v47, 33LL, 0LL);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v12 + 40))(v18, v14, v11);
    swift_endAccess(v47);
    swift_release(v17);
  }

  swift_beginAccess(v15, v47, 0LL, 0LL);
  uint64_t v19 = swift_weakLoadStrong(v15);
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = v19 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_scanStartDate;
    swift_beginAccess(v19 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_scanStartDate, v46, 0LL, 0LL);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v10, v21, v11);
    swift_release(v20);
    uint64_t v22 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v22(v10, 0LL, 1LL, v11);
  }

  else
  {
    uint64_t v22 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v22(v10, 1LL, 1LL, v11);
  }

  swift_beginAccess(v15, v45, 0LL, 0LL);
  uint64_t v23 = swift_weakLoadStrong(v15);
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = v23 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_scanStopDate;
    swift_beginAccess(v23 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_scanStopDate, v44, 0LL, 0LL);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v8, v25, v11);
    swift_release(v24);
    uint64_t v26 = 0LL;
  }

  else
  {
    uint64_t v26 = 1LL;
  }

  v22(v8, v26, 1LL, v11);
  uint64_t v27 = sub_100005394(&qword_100079660);
  uint64_t v28 = swift_allocObject(v27, 112LL, 7LL);
  *(_OWORD *)(v28 + swift_weakDestroy(v0 + 16) = xmmword_10005B320;
  sub_100010A84((uint64_t)v10, (uint64_t)v5);
  uint64_t v29 = String.init<A>(describing:)(v5, v2);
  uint64_t v31 = v30;
  *(void *)(v28 + 56) = &type metadata for String;
  unint64_t v32 = sub_100005854();
  *(void *)(v28 + 64) = v32;
  *(void *)(v28 + 3sub_100007A28(v0 + 2) = v29;
  *(void *)(v28 + 40) = v31;
  sub_100010A84((uint64_t)v8, (uint64_t)v5);
  uint64_t v33 = String.init<A>(describing:)(v5, v2);
  *(void *)(v28 + 96) = &type metadata for String;
  *(void *)(v28 + 104) = v32;
  *(void *)(v28 + 7sub_100007A28(v0 + 2) = v33;
  *(void *)(v28 + 80) = v34;
  uint64_t v35 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v36 = (void *)static OS_os_log.default.getter(v35);
  uint64_t v37 = static os_log_type_t.default.getter(v36);
  os_log(_:dso:log:type:_:)( "Resetting NearbyDeviceFinder startTime: %@ stopTime: %@",  55LL,  2LL,  &_mh_execute_header,  v36,  v37,  v28);
  swift_bridgeObjectRelease(v28);

  swift_beginAccess(v15, v43, 0LL, 0LL);
  uint64_t v38 = swift_weakLoadStrong(v15);
  sub_100010ACC((uint64_t)v8);
  uint64_t result = sub_100010ACC((uint64_t)v10);
  if (v38)
  {
    uint64_t v40 = (uint64_t *)(v38 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_discoveredDevices);
    swift_beginAccess(v38 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_discoveredDevices, v42, 1LL, 0LL);
    uint64_t v41 = *v40;
    *uint64_t v40 = (uint64_t)&_swiftEmptySetSingleton;
    swift_release(v38);
    return swift_bridgeObjectRelease(v41);
  }

  return result;
}

uint64_t sub_10000F54C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v22 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000079C8(0LL, (unint64_t *)&qword_100078760, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v11 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v12 = swift_allocObject(&unk_10006A3E0, 24LL, 7LL);
  swift_weakInit(v12 + 16, v2);
  uint64_t v13 = (void *)swift_allocObject(&unk_10006A458, 40LL, 7LL);
  v13[2] = v12;
  v13[3] = 0x3FF0000000000000LL;
  v13[4] = a1;
  aBlock[4] = sub_100010A10;
  uint64_t v24 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  aBlock[3] = &unk_10006A470;
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = v24;
  swift_retain(a1);
  uint64_t v16 = swift_release(v15);
  static DispatchQoS.unspecified.getter(v16);
  aBlock[0] = &_swiftEmptyArrayStorage;
  uint64_t v17 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v19 = sub_100007938(&qword_100076D58, (uint64_t *)&unk_100078740);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v19, v4, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void sub_10000F78C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v21, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v6);
  if (Strong)
  {
    uint64_t v8 = Strong;
    id v9 = *(id *)(Strong + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_shortTimeoutTimer);
    swift_release(v8);
    [v9 invalidate];
  }

  swift_beginAccess(v6, v20, 0LL, 0LL);
  uint64_t v10 = swift_weakLoadStrong(v6);
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = (void *)objc_opt_self(&OBJC_CLASS___NSTimer);
    uint64_t v13 = swift_allocObject(&unk_10006A4A8, 32LL, 7LL);
    *(void *)(v13 + swift_weakDestroy(v0 + 16) = a1;
    *(void *)(v13 + 24) = a2;
    v18[4] = sub_100010A24;
    uint64_t v19 = v13;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 1107296256LL;
    v18[2] = sub_100006800;
    v18[3] = &unk_10006A4C0;
    uint64_t v14 = _Block_copy(v18);
    uint64_t v15 = v19;
    swift_retain(a1);
    swift_retain(a2);
    swift_release(v15);
    id v16 = [v12 scheduledTimerWithTimeInterval:0 repeats:v14 block:a3];
    _Block_release(v14);
    uint64_t v17 = *(void **)(v11 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_shortTimeoutTimer);
    *(void *)(v11 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_shortTimeoutTimer) = v16;
    swift_release(v11);
  }

uint64_t sub_10000F924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v25 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v24 - 8);
  uint64_t v9 = __chkstk_darwin(v24);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = static os_log_type_t.default.getter(v9);
  uint64_t v13 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v14 = (void *)static OS_os_log.default.getter(v13);
  os_log(_:dso:log:type:_:)( "Device scan shortTimeoutTimer fired",  35LL,  2LL,  &_mh_execute_header,  v14,  v12,  &_swiftEmptyArrayStorage);

  swift_beginAccess(a2 + 16, v29, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2 + 16);
  if (result)
  {
    uint64_t v16 = result;
    id v17 = *(id *)(result + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_dispatchQueue);
    swift_release(v16);
    uint64_t v18 = swift_allocObject(&unk_10006A4F8, 32LL, 7LL);
    *(void *)(v18 + swift_weakDestroy(v0 + 16) = a3;
    *(void *)(v18 + 24) = a2;
    aBlock[4] = sub_100010A30;
    uint64_t v28 = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_10004DB74;
    aBlock[3] = &unk_10006A510;
    uint64_t v19 = _Block_copy(aBlock);
    swift_retain(a3);
    uint64_t v20 = swift_retain(a2);
    static DispatchQoS.unspecified.getter(v20);
    uint64_t v26 = &_swiftEmptyArrayStorage;
    uint64_t v21 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v22 = sub_100005394((uint64_t *)&unk_100078740);
    uint64_t v23 = sub_100007938(&qword_100076D58, (uint64_t *)&unk_100078740);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v22, v23, v5, v21);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v7, v19);
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v5);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v24);
    return swift_release(v28);
  }

  return result;
}

uint64_t sub_10000FBB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v12, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    uint64_t v4 = Strong;
    uint64_t v5 = (uint64_t *)(Strong + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_discoveredDevices);
    swift_beginAccess( Strong + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_discoveredDevices,  &v11,  0LL,  0LL);
    uint64_t v6 = *v5;
    swift_bridgeObjectRetain_n(v6, 2LL);
    swift_release(v4);
    sub_1000229A0(v6, 0LL);
    return swift_bridgeObjectRelease_n(v6, 2LL);
  }

  else
  {
    unint64_t v8 = sub_100010A38();
    uint64_t v9 = swift_allocError(&type metadata for NearbyDeviceFinder.FinderError, v8, 0LL, 0LL);
    *uint64_t v10 = 2;
    sub_1000229A0(0LL, v9);
    return swift_errorRelease(v9);
  }

uint64_t sub_10000FC94(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v20 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(void *)(v1 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_dispatchQueue);
  uint64_t v10 = swift_allocObject(&unk_10006A3E0, 24LL, 7LL);
  swift_weakInit(v10 + 16, v1);
  sub_100007E2C(a1, (uint64_t)v24);
  uint64_t v11 = swift_allocObject(&unk_10006A408, 64LL, 7LL);
  sub_100007A00(v24, v11 + 16);
  *(void *)(v11 + 56) = v10;
  aBlock[4] = sub_100010820;
  uint64_t v23 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  aBlock[3] = &unk_10006A420;
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = swift_retain(v10);
  static DispatchQoS.unspecified.getter(v13);
  uint64_t v21 = &_swiftEmptyArrayStorage;
  uint64_t v14 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v16 = sub_100007938(&qword_100076D58, (uint64_t *)&unk_100078740);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v15, v16, v3, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v5, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v17 = v23;
  swift_release(v10);
  return swift_release(v17);
}

void sub_10000FED8(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_1000087E0(a1, v3);
  uint64_t v5 = sub_1000100F0(v3, v4);
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    uint64_t v7 = a2 + 16;
    uint64_t v8 = sub_100005394(&qword_100079660);
    uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
    *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
    id v10 = [v6 debugDescription];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v13 = v12;

    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = sub_100005854();
    *(void *)(v9 + 3sub_100007A28(v0 + 2) = v11;
    *(void *)(v9 + 40) = v13;
    uint64_t v14 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v15 = (void *)static OS_os_log.default.getter(v14);
    uint64_t v16 = static os_log_type_t.default.getter(v15);
    os_log(_:dso:log:type:_:)("Device scan found %@", 20LL, 2LL, &_mh_execute_header, v15, v16, v9);
    swift_bridgeObjectRelease(v9);

    swift_beginAccess(v7, v24, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v7);
    if (Strong)
    {
      uint64_t v18 = Strong;
      swift_beginAccess( Strong + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_discoveredDevices,  v23,  33LL,  0LL);
      id v19 = v6;
      sub_100034E90((Swift::Int *)&v25, v19);
      swift_endAccess(v23);
      swift_release(v18);
    }

    else
    {
    }
  }

  else
  {
    uint64_t v20 = static os_log_type_t.debug.getter(0LL);
    uint64_t v21 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    id v22 = (id)static OS_os_log.default.getter(v21);
    os_log(_:dso:log:type:_:)( "Device scan ignoring unknown device.",  36LL,  2LL,  &_mh_execute_header,  v22,  v20,  &_swiftEmptyArrayStorage);
  }

uint64_t sub_1000100F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  uint64_t v6 = v5;
  uint64_t v7 = sub_100010844(a1, a2);
  return DiscoveredDevice.__allocating_init(deviceName:discoveryId:)(v4, v6, v7, v8);
}

uint64_t sub_100010248()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_uuid;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);

  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_discoveredDevices));
  uint64_t v3 = v0 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_scanStartDate;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v5(v3, v4);
  v5(v0 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_scanStopDate, v4);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100010310()
{
  return type metadata accessor for NearbyDeviceFinder(0LL);
}

uint64_t type metadata accessor for NearbyDeviceFinder(uint64_t a1)
{
  uint64_t result = qword_1000772B8;
  if (!qword_1000772B8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NearbyDeviceFinder);
  }
  return result;
}

uint64_t sub_100010354(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[2] = "\b";
    v5[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      uint64_t v6 = *(void *)(result - 8) + 64LL;
      uint64_t v7 = v6;
      uint64_t result = swift_updateClassMetadata2(a1, 256LL, 7LL, v5, a1 + 80);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_100010410()
{
  uint64_t v1 = v0;
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v2 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  unint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v8);
  id v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  _s20FMIPClientXPCService6FutureC4uuid33_40B9CAF5474C2AE132CCEC7BECE26906LL10Foundation4UUIDVvpfi_0();
  *(void *)(v1 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_shortTimoutDuration) = 0x3FF0000000000000LL;
  *(void *)(v1 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_shortTimeoutTimer) = 0LL;
  *(void *)(v1 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_discoveredDevices) = &_swiftEmptySetSingleton;
  uint64_t v19 = OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_dispatchQueue;
  uint64_t v11 = sub_1000079C8(0LL, (unint64_t *)&qword_100078760, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v11);
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v12 = sub_1000078F8( (unint64_t *)&qword_100076B38,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v13 = sub_100005394((uint64_t *)&unk_100078770);
  uint64_t v14 = sub_100007938((unint64_t *)&qword_100076B40, (uint64_t *)&unk_100078770);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v13, v14, v5, v12);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))( v4,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v20);
  uint64_t v15 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000017LL,  0x8000000100056480LL,  v10,  v7,  v4,  0LL);
  *(void *)(v1 + v19) = v15;
  uint64_t v16 = static Date.distantPast.getter(v15);
  Date.init()(v16);
  return v1;
}

Swift::Int sub_100010650()
{
  uint64_t v0 = type metadata accessor for UUID(0LL);
  uint64_t v1 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_1000106CC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

Swift::Int sub_100010738(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1000107B0(void *a1, void *a2)
{
  return static UUID.== infix(_:_:)( *a1 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_uuid,  *a2 + OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_uuid);
}

uint64_t sub_1000107CC()
{
  return sub_1000078F8(&qword_100077408, type metadata accessor for NearbyDeviceFinder, (uint64_t)&unk_10005C0E0);
}

uint64_t sub_1000107F8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100010820()
{
}

uint64_t sub_10001082C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100007A28(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001083C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100010844(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(a2 + 16))();
  uint64_t v3 = result;
  uint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v6 = 0LL;
  int64_t v7 = 0LL;
  uint64_t v8 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  uint64_t v10 = result + 56;
  unint64_t v11 = v9 & *(void *)(result + 56);
  int64_t v12 = (unint64_t)(v8 + 63) >> 6;
  while (v11)
  {
    unint64_t v13 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v14 = v13 | (v7 << 6);
LABEL_5:
    uint64_t v15 = *(void *)(v3 + 48) + 24 * v14;
    if (*(_BYTE *)(v15 + 16) != 2)
    {
      if (*(_BYTE *)(v15 + 16))
      {
        uint64_t v4 = *(void *)v15;
        uint64_t v20 = *(void *)(v15 + 8);
        swift_bridgeObjectRetain(v20);
        uint64_t result = swift_bridgeObjectRelease(v5);
        uint64_t v5 = v20;
      }

      else
      {
        uint64_t v19 = *(void *)(v15 + 8);
        uint64_t v21 = *(void *)v15;
        swift_bridgeObjectRetain(v19);
        uint64_t result = swift_bridgeObjectRelease(v6);
        uint64_t v6 = v19;
      }
    }
  }

  int64_t v16 = v7 + 1;
  if (__OFADD__(v7, 1LL))
  {
    __break(1u);
LABEL_29:
    __break(1u);
    return result;
  }

  if (v16 >= v12) {
    goto LABEL_24;
  }
  unint64_t v17 = *(void *)(v10 + 8 * v16);
  ++v7;
  if (v17) {
    goto LABEL_20;
  }
  int64_t v7 = v16 + 1;
  if (v16 + 1 >= v12) {
    goto LABEL_24;
  }
  unint64_t v17 = *(void *)(v10 + 8 * v7);
  if (v17) {
    goto LABEL_20;
  }
  int64_t v7 = v16 + 2;
  if (v16 + 2 >= v12) {
    goto LABEL_24;
  }
  unint64_t v17 = *(void *)(v10 + 8 * v7);
  if (v17)
  {
LABEL_20:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v7 << 6);
    goto LABEL_5;
  }

  int64_t v18 = v16 + 3;
  if (v18 < v12)
  {
    unint64_t v17 = *(void *)(v10 + 8 * v18);
    if (!v17)
    {
      while (1)
      {
        int64_t v7 = v18 + 1;
        if (__OFADD__(v18, 1LL)) {
          goto LABEL_29;
        }
        if (v7 >= v12) {
          goto LABEL_24;
        }
        unint64_t v17 = *(void *)(v10 + 8 * v7);
        ++v18;
        if (v17) {
          goto LABEL_20;
        }
      }
    }

    int64_t v7 = v18;
    goto LABEL_20;
  }

LABEL_24:
  swift_release(v3);
  if (!v5) {
    return v21;
  }
  swift_bridgeObjectRelease(v6);
  return v4;
}

    uint64_t v8 = (v17 - 1) & v17;
    unint64_t v13 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_5:
    sub_100007E2C(*(void *)(v4 + 56) + 40 * v13, (uint64_t)v22);
    sub_100007A00(v22, (uint64_t)v19);
    unint64_t v14 = v20;
    uint64_t v15 = v21;
    sub_1000087E0(v19, v20);
    (*(void (**)(uint64_t, uint64_t))(v15 + 24))(v14, v15);
    uint64_t result = sub_100007A28(v19);
  }

  int64_t v18 = v16 + 5;
  if (v18 >= v9)
  {
LABEL_25:
    swift_release(v4);
    return swift_bridgeObjectRelease(v4);
  }

  unint64_t v17 = *(void *)(v5 + 8 * v18);
  if (v17)
  {
    unint64_t v11 = v18;
    goto LABEL_24;
  }

  while (1)
  {
    unint64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v11 >= v9) {
      goto LABEL_25;
    }
    unint64_t v17 = *(void *)(v5 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_24;
    }
  }

    unint64_t v17 = (v23 - 1) & v23;
    uint64_t v21 = __clz(__rbit64(v23)) + (v19 << 6);
LABEL_25:
    sub_100007E2C(*(void *)(v55 + 56) + 40 * v21, (uint64_t)v68);
    sub_100007A00(v68, (uint64_t)v65);
    id v25 = v66;
    uint64_t v26 = v67;
    sub_1000087E0(v65, v66);
    uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v25, v26);
    uint64_t v28 = *(void *)(v27 + 16);
    if (v28)
    {
      uint64_t v57 = v17;
      uint64_t v58 = v19;
      uint64_t v29 = *(_BYTE *)(a2 + 24);
      uint64_t v30 = *(double *)(a2 + 16);
      uint64_t v56 = v27;
      uint64_t v31 = v27 + 32;
      do
      {
        unint64_t v32 = sub_100007E2C(v31, (uint64_t)v64);
        uint64_t v33 = static os_log_type_t.debug.getter(v32);
        uint64_t v34 = swift_allocObject(v60, 112LL, 7LL);
        *(_OWORD *)(v34 + swift_weakDestroy(v0 + 16) = xmmword_10005B320;
        uint64_t v61 = 0LL;
        uint64_t v62 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(33LL);
        v35._countAndFlagsBits = 0xD000000000000012LL;
        v35._object = (void *)0x8000000100057720LL;
        String.append(_:)(v35);
        v36._countAndFlagsBits = UUID.uuidString.getter();
        object = v36._object;
        String.append(_:)(v36);
        swift_bridgeObjectRelease(object);
        v38._countAndFlagsBits = 0x203A6D203ELL;
        v38._object = (void *)0xE500000000000000LL;
        String.append(_:)(v38);
        uint64_t v63 = v29;
        _print_unlocked<A, B>(_:_:)( &v63,  &v61,  &type metadata for DeviceDiscoveryConfiguration.DiscoveryMode,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
        v39._countAndFlagsBits = 540697632LL;
        v39._object = (void *)0xE400000000000000LL;
        String.append(_:)(v39);
        Double.write<A>(to:)( &v61,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation,  v30);
        uint64_t v40 = v61;
        uint64_t v41 = v62;
        *(void *)(v34 + 56) = &type metadata for String;
        *(void *)(v34 + 64) = v11;
        *(void *)(v34 + 3sub_100007A28(v0 + 2) = v40;
        *(void *)(v34 + 40) = v41;
        sub_100007E2C((uint64_t)v64, (uint64_t)&v61);
        uint64_t v42 = sub_100005394(&qword_100076D68);
        uint64_t v43 = String.init<A>(describing:)(&v61, v42);
        *(void *)(v34 + 96) = &type metadata for String;
        *(void *)(v34 + 104) = v11;
        *(void *)(v34 + 7sub_100007A28(v0 + 2) = v43;
        *(void *)(v34 + 80) = v44;
        uint64_t v45 = (void *)static OS_os_log.default.getter(v43);
        os_log(_:dso:log:type:_:)("%@ didDiscoverDevice %@", 23LL, 2LL, &_mh_execute_header, v45, v33, v34);
        swift_bridgeObjectRelease(v34);

        uint64_t v46 = *(void (**)(void *))v18;
        if (*(void *)v18)
        {
          uint64_t v47 = *(void *)(v18 + 8);
          swift_retain(v47);
          v46(v64);
          sub_10000787C((uint64_t)v46, v47);
        }

        sub_100007A28(v64);
        v31 += 40LL;
        --v28;
      }

      while (v28);
      swift_bridgeObjectRelease(v56);
      a2 = v53;
      unint64_t v17 = v57;
      uint64_t v19 = v58;
    }

    else
    {
      swift_bridgeObjectRelease(v27);
    }

    uint64_t result = sub_100007A28(v65);
  }

  uint64_t v24 = v22 + 4;
  if (v24 < v54)
  {
    uint64_t v23 = *(void *)(v52 + 8 * v24);
    if (!v23)
    {
      while (1)
      {
        uint64_t v19 = v24 + 1;
        if (__OFADD__(v24, 1LL)) {
          goto LABEL_36;
        }
        if (v19 >= v54) {
          goto LABEL_31;
        }
        uint64_t v23 = *(void *)(v52 + 8 * v19);
        ++v24;
        if (v23) {
          goto LABEL_24;
        }
      }
    }

    uint64_t v19 = v24;
    goto LABEL_24;
  }

        int64_t v12 = (v18 - 1) & v18;
        int64_t v16 = __clz(__rbit64(v18)) + (v9 << 6);
      }

      uint64_t v20 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v16);
      uint64_t v21 = (__int128 *)(*(void *)(v5 + 56) + 40 * v16);
      if ((a2 & 1) != 0) {
        sub_100007A00(v21, (uint64_t)v34);
      }
      else {
        sub_100007E2C((uint64_t)v21, (uint64_t)v34);
      }
      Hasher.init(_seed:)(v33, *(void *)(v8 + 40));
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      id v22 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v23 = result & ~v22;
      uint64_t v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }

          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            uint64_t v24 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }

        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(_BYTE *)(*(void *)(v8 + 48) + v14) = v20;
      uint64_t result = sub_100007A00(v34, *(void *)(v8 + 56) + 40 * v14);
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_44:
  char *v3 = v8;
  return result;
}

      uint64_t v9 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }

    unint64_t v17 = *(unsigned __int8 *)(*(void *)(v4 + 48) + v13);
    sub_100007E2C(*(void *)(v4 + 56) + 40 * v13, (uint64_t)v31);
    sub_100007A00(v31, (uint64_t)v30);
    Hasher.init(_seed:)(v29, *(void *)(v8 + 40));
    Hasher._combine(_:)(v17);
    uint64_t result = Hasher._finalize()();
    int64_t v18 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v19 = result & ~v18;
    uint64_t v20 = v19 >> 6;
    if (((-1LL << v19) & ~*(void *)(v11 + 8 * (v19 >> 6))) != 0)
    {
      uint64_t v21 = __clz(__rbit64((-1LL << v19) & ~*(void *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v22 = 0;
      uint64_t v23 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v24 = v20 == v23;
        if (v20 == v23) {
          uint64_t v20 = 0LL;
        }
        v22 |= v24;
        id v25 = *(void *)(v11 + 8 * v20);
      }

      while (v25 == -1);
      uint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
    }

    *(void *)(v11 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
    *(_BYTE *)(*(void *)(v8 + 48) + v21) = v17;
    uint64_t result = sub_100007A00(v30, *(void *)(v8 + 56) + 40 * v21);
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1LL)) {
      break;
    }
    if (!v5) {
      return v8;
    }
  }

      unint64_t v17 = v137;
      if ((v148 & 1) != 0)
      {
        if (v18 < v20) {
          goto LABEL_143;
        }
        if (v20 < v18)
        {
          uint64_t v42 = 0LL;
          uint64_t v43 = v40 * (v18 - 1);
          unint64_t v44 = v18 * v40;
          uint64_t v45 = v20;
          v140 = v20;
          uint64_t v46 = v20 * v40;
          do
          {
            if (v45 != v18 + v42 - 1)
            {
              v142 = v41;
              __int128 v50 = v144;
              if (!v144) {
                goto LABEL_148;
              }
              uint64_t v51 = v144 + v46;
              uint64_t v52 = v144 + v43;
              v148 = *(char **)(v154 + 32);
              ((void (*)(char *, uint64_t, uint64_t))v148)(v139, v144 + v46, v150);
              if (v46 < v43 || v51 >= v50 + v44)
              {
                uint64_t v47 = v50 + v46;
                uint64_t v48 = v50 + v43;
                unint64_t v49 = v150;
                swift_arrayInitWithTakeFrontToBack(v47, v48, 1LL, v150);
              }

              else
              {
                unint64_t v49 = v150;
                if (v46 != v43) {
                  swift_arrayInitWithTakeBackToFront(v51, v52);
                }
              }

              uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v148)(v52, v139, v49);
              a1 = v149;
              unint64_t v17 = v137;
              uint64_t v41 = v142;
              uint64_t v40 = v153;
            }

            ++v45;
            --v42;
            v43 -= v40;
            v44 -= v40;
            v46 += v40;
          }

          while (v45 < v18 + v42);
          unint64_t v14 = v136;
          unint64_t v11 = v152;
          uint64_t v20 = v140;
        }
      }
    }

    if (v18 < v11)
    {
      if (__OFSUB__(v18, v20)) {
        goto LABEL_140;
      }
      if (v18 - v20 < v14)
      {
        if (__OFADD__(v20, v14)) {
          goto LABEL_144;
        }
        if (v20 + v14 >= v11) {
          uint64_t v53 = v11;
        }
        else {
          uint64_t v53 = v20 + v14;
        }
        if (v53 < v20) {
          goto LABEL_145;
        }
        if (v18 != v53)
        {
          v140 = v20;
          uint64_t v54 = *(void *)(v154 + 72);
          uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t))(v154 + 16);
          v142 = v41;
          v143 = v55;
          v153 = v54 * (v18 - 1);
          v148 = (char *)v18;
          v144 = v54;
          uint64_t v56 = v18 * v54;
          uint64_t v57 = v150;
          v138 = (char *)v53;
          do
          {
            uint64_t v58 = 0LL;
            uint64_t v59 = v140;
            v145 = v56;
            while (1)
            {
              v152 = v59;
              uint64_t v60 = *a1;
              uint64_t v61 = v56 + v58 + *a1;
              uint64_t v62 = v146;
              uint64_t v63 = v143;
              v143(v146, v61, v57);
              uint64_t v64 = a1;
              uint64_t v65 = v147;
              v63(v147, v153 + v58 + v60, v57);
              LOBYTE(v63) = static Date.< infix(_:_:)(v62, v65);
              uint64_t v66 = *(void (**)(char *, uint64_t))(v154 + 8);
              v66(v65, v57);
              uint64_t result = ((uint64_t (*)(char *, uint64_t))v66)(v62, v57);
              __int128 v67 = *v64;
              if (!*v64) {
                goto LABEL_146;
              }
              uint64_t v56 = v145;
              uint64_t v68 = v67 + v145 + v58;
              uint64_t v69 = v67 + v153 + v58;
              uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t))(v154 + 32);
              uint64_t v57 = v150;
              v70(v151, v68, v150);
              swift_arrayInitWithTakeFrontToBack(v68, v69, 1LL, v57);
              uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v70)(v69, v151, v57);
              v58 -= v144;
              uint64_t v59 = v152 + 1;
              a1 = v149;
            }

            uint64_t v57 = v150;
            a1 = v64;
            uint64_t v56 = v145;
LABEL_49:
            v153 += v144;
            v56 += v144;
            ++v148;
          }

          while (v148 != v138);
          int64_t v18 = (Swift::Int)v138;
          uint64_t v41 = v142;
          unint64_t v17 = v137;
          uint64_t v20 = v140;
        }
      }
    }

    if (v18 < v20)
    {
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
      goto LABEL_141;
    }

    uint64_t v71 = v20;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v17);
    v142 = v41;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_10004AF20(0LL, v17[2] + 1LL, 1, (char *)v17);
      unint64_t v17 = (void *)result;
    }

    __int128 v73 = v17[2];
    uint64_t v72 = v17[3];
    uint64_t v19 = v73 + 1;
    if (v73 >= v72 >> 1)
    {
      uint64_t result = (uint64_t)sub_10004AF20((char *)(v72 > 1), v73 + 1, 1, (char *)v17);
      unint64_t v17 = (void *)result;
    }

    v17[2] = v19;
    uint64_t v74 = (char *)(v17 + 4);
    __int128 v75 = &v17[2 * v73 + 4];
    *__int128 v75 = v71;
    v75[1] = v18;
    if (v73) {
      break;
    }
    uint64_t v19 = 1LL;
LABEL_14:
    unint64_t v11 = a1[1];
    unint64_t v14 = v136;
    if (v18 >= v11) {
      goto LABEL_106;
    }
  }

  while (1)
  {
    __int128 v76 = v19 - 1;
    if (v19 >= 4)
    {
      uint64_t v81 = &v74[16 * v19];
      uint64_t v82 = *((void *)v81 - 8);
      uint64_t v83 = *((void *)v81 - 7);
      uint64_t v87 = __OFSUB__(v83, v82);
      __int128 v84 = v83 - v82;
      if (v87) {
        goto LABEL_124;
      }
      __int16 v86 = *((void *)v81 - 6);
      int v85 = *((void *)v81 - 5);
      uint64_t v87 = __OFSUB__(v85, v86);
      uint64_t v79 = v85 - v86;
      uint64_t v80 = v87;
      if (v87) {
        goto LABEL_125;
      }
      uint64_t v88 = v19 - 2;
      uint64_t v89 = &v74[16 * v19 - 32];
      uint64_t v91 = *(void *)v89;
      uint64_t v90 = *((void *)v89 + 1);
      uint64_t v87 = __OFSUB__(v90, v91);
      uint64_t v92 = v90 - v91;
      if (v87) {
        goto LABEL_126;
      }
      uint64_t v87 = __OFADD__(v79, v92);
      v93 = v79 + v92;
      if (v87) {
        goto LABEL_128;
      }
      if (v93 >= v84)
      {
        v111 = &v74[16 * v76];
        v113 = *(void *)v111;
        v112 = *((void *)v111 + 1);
        uint64_t v87 = __OFSUB__(v112, v113);
        v114 = v112 - v113;
        if (v87) {
          goto LABEL_134;
        }
        uint64_t v104 = v79 < v114;
        goto LABEL_93;
      }
    }

    else
    {
      if (v19 != 3)
      {
        uint64_t v105 = v17[4];
        __int128 v106 = v17[5];
        uint64_t v87 = __OFSUB__(v106, v105);
        v98 = v106 - v105;
        v99 = v87;
        goto LABEL_87;
      }

      uint64_t v78 = v17[4];
      uint64_t v77 = v17[5];
      uint64_t v87 = __OFSUB__(v77, v78);
      uint64_t v79 = v77 - v78;
      uint64_t v80 = v87;
    }

    if ((v80 & 1) != 0) {
      goto LABEL_127;
    }
    uint64_t v88 = v19 - 2;
    uint64_t v94 = &v74[16 * v19 - 32];
    v96 = *(void *)v94;
    uint64_t v95 = *((void *)v94 + 1);
    v97 = __OFSUB__(v95, v96);
    v98 = v95 - v96;
    v99 = v97;
    if (v97) {
      goto LABEL_129;
    }
    uint64_t v100 = &v74[16 * v76];
    v102 = *(void *)v100;
    v101 = *((void *)v100 + 1);
    uint64_t v87 = __OFSUB__(v101, v102);
    v103 = v101 - v102;
    if (v87) {
      goto LABEL_131;
    }
    if (__OFADD__(v98, v103)) {
      goto LABEL_133;
    }
    if (v98 + v103 >= v79)
    {
      uint64_t v104 = v79 < v103;
LABEL_93:
      if (v104) {
        __int128 v76 = v88;
      }
      goto LABEL_95;
    }

      __break(1u);
      goto LABEL_25;
    }

    __break(1u);
    goto LABEL_24;
  }

  if ((a3 & 1) != 0)
  {
    if (a4 < 0) {
      int64_t v7 = a4;
    }
    else {
      int64_t v7 = a4 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v8 = __CocoaSet.element(at:)(result, a2, v7);
    uint64_t v24 = v8;
    uint64_t v9 = type metadata accessor for DeviceDiscoverySession(0LL);
    swift_unknownObjectRetain(v8);
    swift_dynamicCast(v23, &v24, (char *)&type metadata for Swift.AnyObject + 8, v9, 7LL);
    uint64_t v10 = v23[0];
    swift_unknownObjectRelease(v8);
    return v10;
  }

void sub_100010A10()
{
}

uint64_t sub_100010A24(uint64_t a1)
{
  return sub_10000F924(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100010A30()
{
  return sub_10000FBB0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_100010A38()
{
  unint64_t result = qword_100077410;
  if (!qword_100077410)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005C1BC, &type metadata for NearbyDeviceFinder.FinderError);
    atomic_store(result, (unint64_t *)&qword_100077410);
  }

  return result;
}

uint64_t sub_100010A7C()
{
  return sub_10000F190(v0);
}

uint64_t sub_100010A84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005394(&qword_100077418);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100010ACC(uint64_t a1)
{
  uint64_t v2 = sub_100005394(&qword_100077418);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100010B10(uint64_t a1)
{
  return sub_10000FC94(a1);
}

uint64_t sub_100010B4C(uint64_t a1, uint64_t a2)
{
  return sub_10000EBE0(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100010B58()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100010B88()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100010BB4()
{
  return sub_10000EEA0(*(void *)(v0 + 16));
}

void *sub_100010BBC(void *result, uint64_t a2, void (*a3)(uint64_t))
{
  if (a2)
  {
    if (!*result)
    {
      swift_errorRetain(a2);
      a3(a2);
      return (void *)swift_errorRelease(a2);
    }
  }

  return result;
}

uint64_t *sub_100010C18(uint64_t *result, uint64_t a2, void (*a3)(uint64_t *))
{
  uint64_t v3 = *result;
  if (*result)
  {
    uint64_t v5 = *result;
    swift_bridgeObjectRetain(v3);
    a3(&v5);
    return (uint64_t *)swift_bridgeObjectRelease(v3);
  }

  return result;
}

uint64_t sub_100010C80(uint64_t *a1)
{
  return sub_10000DE1C(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t, void))(v1 + 24));
}

uint64_t sub_100010C8C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t *sub_100010CB0(uint64_t *a1, uint64_t a2)
{
  return sub_100010C18(a1, a2, *(void (**)(uint64_t *))(v2 + 16));
}

uint64_t sub_100010CC0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100010CD4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100010D00(uint64_t a1)
{
  return sub_10000DEF8(a1, v1[2], v1[3], v1[4]);
}

void *sub_100010D0C(void *a1, uint64_t a2)
{
  return sub_100010BBC(a1, a2, *(void (**)(uint64_t))(v2 + 16));
}

uint64_t sub_100010D18()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100010D28(uint64_t a1, uint64_t a2)
{
  return sub_10000E2F0(a1, a2, v2);
}

uint64_t sub_100010D34()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100010D60()
{
  return sub_100034710( *(uint64_t **)(v0 + 16),  *(void *)(v0 + 24),  *(uint64_t **)(v0 + 32),  *(_BYTE **)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56));
}

uint64_t sub_100010D70()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100010D80()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100010DB4()
{
  return sub_10000E204( *(void *)(v0 + 16),  *(void (**)(void *, uint64_t))(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40));
}

uint64_t sub_100010DC0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100010DEC()
{
  return sub_10000D634( *(void *)(v0 + 16),  *(void (**)(uint64_t, uint64_t))(v0 + 32),  *(void *)(v0 + 40),  *(double *)(v0 + 24));
}

uint64_t getEnumTagSinglePayload for NearbyDeviceFinder.FinderError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

uint64_t storeEnumTagSinglePayload for NearbyDeviceFinder.FinderError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100010ED8 + 4 * byte_10005C085[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100010F0C + 4 * byte_10005C080[v4]))();
}

uint64_t sub_100010F0C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100010F14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100010F1CLL);
  }
  return result;
}

uint64_t sub_100010F28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100010F30LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_100010F34(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100010F3C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NearbyDeviceFinder.FinderError()
{
  return &type metadata for NearbyDeviceFinder.FinderError;
}

unint64_t sub_100010F5C()
{
  unint64_t result = qword_100077438;
  if (!qword_100077438)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005C194, &type metadata for NearbyDeviceFinder.FinderError);
    atomic_store(result, (unint64_t *)&qword_100077438);
  }

  return result;
}

void *initializeWithCopy for RedirectedHost(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for RedirectedHost(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for RedirectedHost(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for RedirectedHost(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for RedirectedHost(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vsub_100007A28(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RedirectedHost(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 3sub_100007A28(v0 + 2) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 3sub_100007A28(v0 + 2) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RedirectedHost()
{
  return &type metadata for RedirectedHost;
}

uint64_t sub_100011194(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v9 = sub_100005394(&qword_100077450);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_1000087E0(a1, v14);
  unint64_t v15 = sub_10001165C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RedirectedHost.CodingKeys,  &type metadata for RedirectedHost.CodingKeys,  v15,  v14,  v13);
  char v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v20, v9);
  if (!v5)
  {
    char v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v19, v9);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

BOOL sub_1000112BC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1000112D4()
{
  if (*v0) {
    return 0x64496E6F73726570LL;
  }
  else {
    return 1953722216LL;
  }
}

uint64_t sub_100011308@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000113D0(a1, a2);
  *a3 = result;
  return result;
}

void sub_10001132C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100011338(uint64_t a1)
{
  unint64_t v2 = sub_10001165C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100011360(uint64_t a1)
{
  unint64_t v2 = sub_10001165C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100011388@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000114B0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

uint64_t sub_1000113B4(void *a1)
{
  return sub_100011194(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1000113D0(uint64_t a1, unint64_t a2)
{
  if (a1 == 1953722216 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1953722216LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x64496E6F73726570LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease(0xE800000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x64496E6F73726570LL, 0xE800000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1000114B0(void *a1)
{
  uint64_t v3 = sub_100005394(&qword_100077440);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_1000087E0(a1, v7);
  unint64_t v9 = sub_10001165C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RedirectedHost.CodingKeys,  &type metadata for RedirectedHost.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    sub_100007A28(a1);
  }

  else
  {
    char v17 = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
    uint64_t v12 = v11;
    char v16 = 1;
    swift_bridgeObjectRetain(v11);
    KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
    uint64_t v14 = v13;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain(v14);
    sub_100007A28(a1);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v12);
  }

  return v8;
}

unint64_t sub_10001165C()
{
  unint64_t result = qword_100077448;
  if (!qword_100077448)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005C348, &type metadata for RedirectedHost.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100077448);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for RedirectedHost.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for RedirectedHost.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10001177C + 4 * byte_10005C205[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000117B0 + 4 * byte_10005C200[v4]))();
}

uint64_t sub_1000117B0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000117B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000117C0LL);
  }
  return result;
}

uint64_t sub_1000117CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000117D4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000117D8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000117E0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1000117EC(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for RedirectedHost.CodingKeys()
{
  return &type metadata for RedirectedHost.CodingKeys;
}

unint64_t sub_10001180C()
{
  unint64_t result = qword_100077458;
  if (!qword_100077458)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005C320, &type metadata for RedirectedHost.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100077458);
  }

  return result;
}

unint64_t sub_100011854()
{
  unint64_t result = qword_100077460;
  if (!qword_100077460)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005C290, &type metadata for RedirectedHost.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100077460);
  }

  return result;
}

unint64_t sub_10001189C()
{
  unint64_t result = qword_100077468[0];
  if (!qword_100077468[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10005C2B8, &type metadata for RedirectedHost.CodingKeys);
    atomic_store(result, qword_100077468);
  }

  return result;
}

uint64_t sub_1000118E0()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 8));
}

uint64_t sub_1000118E8(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 8));
  *(void *)(v1 + 8) = a1;
  return result;
}

Swift::Void (__swiftcall *sub_100011910())()
{
  return Future.didCancel();
}

uint64_t VoiceAssistantSyncInfo.devices.getter()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_100011928(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*v1);
  *uint64_t v1 = a1;
  return result;
}

Swift::Void (__swiftcall *DeviceDiscoveryAutomationDevice.name.modify())()
{
  return Future.didCancel();
}

BOOL sub_100011960(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000692F0, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

uint64_t sub_1000119A4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a2 + 24);
  v15[0] = *(void *)(a2 + 16);
  uint64_t v6 = type metadata accessor for ClientContextRequestBody.CodingKeys(255LL, v15[0], v5, a4);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10005C710, v6);
  uint64_t v8 = type metadata accessor for KeyedEncodingContainer(0LL, v6, WitnessTable);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v15 - v10;
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_1000087E0(a1, v12);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v6, v6, WitnessTable, v12, v13);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v15[1]);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100011ABC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v30 = a4;
  uint64_t v34 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v35 = (uint64_t *)((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = type metadata accessor for ClientContextRequestBody.CodingKeys(255LL, v8, v9, v10);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10005C710, v11);
  uint64_t v36 = type metadata accessor for KeyedDecodingContainer(0LL, v11, WitnessTable);
  uint64_t v31 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v14 = (char *)&v29 - v13;
  uint64_t v32 = a2;
  uint64_t v33 = a3;
  uint64_t v16 = type metadata accessor for ClientContextRequestBody(0LL, a2, a3, v15);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  char v19 = (char *)&v29 - v18;
  uint64_t v21 = a1[3];
  uint64_t v20 = a1[4];
  sub_1000087E0(a1, v21);
  uint64_t v22 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v11, v11, WitnessTable, v21, v20);
  if (!v22)
  {
    uint64_t v23 = v19;
    uint64_t v29 = v17;
    uint64_t v37 = v16;
    uint64_t v24 = v31;
    uint64_t v25 = v32;
    uint64_t v26 = v34;
    uint64_t v27 = v35;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v35, v32);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v36);
    (*(void (**)(char *, void *, uint64_t))(v26 + 32))(v23, v27, v25);
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v30, v23, v37);
  }

  return sub_100007A28(a1);
}

uint64_t sub_100011CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10005C670, a3);
  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_100011D10(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10005C670, a1);
  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for String);
}

uint64_t sub_100011D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10005C670, a2);
  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_100011DAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10005C670, a2);
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

BOOL sub_100011DFC@<W0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::Int v3 = (void *)a1[1];
  v5._countAndFlagsBits = *a1;
  v5._object = v3;
  BOOL result = sub_100011960(v5);
  *a2 = result;
  return result;
}

void sub_100011E34(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_100011E5C()
{
  return 0x6F43746E65696C63LL;
}

BOOL sub_100011E80@<W0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  BOOL result = sub_100011960(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100011EB0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static FutureError.__derived_enum_equals(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100011EDC(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10005C710, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_100011F10(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10005C710, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t sub_100011F44@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100011ABC(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t sub_100011F60(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000119A4(a1, a2, a3, a4);
}

uint64_t sub_100011F74(void *a1)
{
  Swift::Int v3 = v1;
  uint64_t v5 = sub_100005394(qword_100077510);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000087E0(a1, v9);
  unint64_t v11 = sub_1000133B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ClientContextProperties.CodingKeys,  &type metadata for ClientContextProperties.CodingKeys,  v11,  v9,  v10);
  double v12 = *v3;
  uint64_t v13 = *((void *)v3 + 1);
  char v28 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(*(void *)&v12, v13, &v28, v5);
  if (!v2)
  {
    uint64_t v14 = *((void *)v3 + 2);
    uint64_t v15 = *((void *)v3 + 3);
    char v27 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v27, v5);
    double v16 = v3[4];
    char v26 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v26, v5, v16);
    uint64_t v17 = *((void *)v3 + 5);
    uint64_t v18 = *((void *)v3 + 6);
    char v25 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v25, v5);
    uint64_t v19 = *((void *)v3 + 7);
    char v24 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v24, v5);
    uint64_t v20 = *((void *)v3 + 8);
    char v23 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v20, &v23, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100012128()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100012150 + 4 * byte_10005C3A0[*v0]))( 1684628597LL,  0xE400000000000000LL);
}

uint64_t sub_100012150()
{
  return 0x656372756F73LL;
}

uint64_t sub_100012164()
{
  return 0x6D617473656D6974LL;
}

uint64_t sub_100012180()
{
  return 0x6E656B6F54737061LL;
}

uint64_t sub_100012198()
{
  return 0x74536B636F6C6E75LL;
}

unint64_t sub_1000121B8()
{
  return 0xD000000000000011LL;
}

uint64_t sub_1000121D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100012E1C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000121F8(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_100012204(uint64_t a1)
{
  unint64_t v2 = sub_1000133B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001222C(uint64_t a1)
{
  unint64_t v2 = sub_1000133B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_100012254@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[3];
    *(_OWORD *)(a2 + 3sub_100007A28(v0 + 2) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(void *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + swift_weakDestroy(v0 + 16) = result;
  }

  return result;
}

uint64_t sub_1000122A4(void *a1)
{
  return sub_100011F74(a1);
}

uint64_t sub_1000122E4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v30 = a2;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  double v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a5[3];
  uint64_t v14 = a5[4];
  sub_1000087E0(a5, v13);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
  if (v16)
  {
    uint64_t v17 = v15;
    uint64_t v18 = v16;
    Date.init()();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    id v20 = -[objc_class fm_epochObject](isa, "fm_epochObject");
    [v20 doubleValue];
    uint64_t v22 = v21;
    uint64_t v24 = a5[3];
    uint64_t v23 = a5[4];
    sub_1000087E0(a5, v24);
    unsigned __int8 v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 32))(v24, v23);

    uint64_t result = sub_100007A28(a5);
    *a6 = v17;
    a6[1] = v18;
    uint64_t v27 = v30;
    a6[2] = a1;
    a6[3] = v27;
    a6[4] = v22;
    uint64_t v28 = v32;
    a6[5] = v31;
    a6[6] = v28;
    a6[7] = v25;
    a6[8] = 1LL;
  }

  else
  {
    swift_bridgeObjectRelease(v32);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000031LL,  0x80000001000566F0LL,  "FMIPClientXPCService/ClientContextRequestContent.swift",  54LL,  2LL,  41LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t destroy for ClientContextRequestContent(void *a1)
{
  return swift_bridgeObjectRelease(a1[1]);
}

uint64_t *_s20FMIPClientXPCService27ClientContextRequestContentVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for ClientContextRequestContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for ClientContextRequestContent(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for ClientContextRequestContent(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClientContextRequestContent(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClientContextRequestContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ClientContextRequestContent()
{
  return &type metadata for ClientContextRequestContent;
}

uint64_t destroy for ClientContextProperties(void *a1)
{
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for ClientContextProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 3sub_100007A28(v0 + 2) = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for ClientContextProperties(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  a1[5] = a2[5];
  uint64_t v8 = a2[6];
  uint64_t v9 = a1[6];
  a1[6] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[7] = a2[7];
  a1[8] = a2[8];
  return a1;
}

__n128 initializeWithTake for ClientContextProperties(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 3sub_100007A28(v0 + 2) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

uint64_t assignWithTake for ClientContextProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 3sub_100007A28(v0 + 2) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClientContextProperties(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vsub_100007A28(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClientContextProperties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 7sub_100007A28(v0 + 2) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 7sub_100007A28(v0 + 2) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ClientContextProperties()
{
  return &type metadata for ClientContextProperties;
}

uint64_t sub_1000128B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24LL);
}

uint64_t sub_1000128BC(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 0LL, 1LL, &v4, a1 + 32);
    return 0LL;
  }

  return result;
}

uint64_t *sub_100012928(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(void *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }

  else
  {
    uint64_t v8 = *a2;
    uint64_t *v3 = *a2;
    unint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain(v8);
  }

  return v3;
}

uint64_t sub_100012998(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))();
}

uint64_t sub_1000129A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1000129D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_100012A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_100012A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_100012A68(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_100012B18 + 4 * byte_10005C3A6[(v7 - 1)]))();
}

void sub_100012B68(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = &dword_100000004;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = &_mh_execute_header.magic + 1;
    }
  }

  else
  {
    unsigned int v11 = 0;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + sub_100007A28(v0 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t type metadata accessor for ClientContextRequestBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100013400(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ClientContextRequestBody);
}

unint64_t sub_100012D24(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100012D50();
  unint64_t result = sub_100012D94();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_100012D50()
{
  unint64_t result = qword_1000774F0;
  if (!qword_1000774F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005C4D8, &type metadata for ClientContextProperties);
    atomic_store(result, (unint64_t *)&qword_1000774F0);
  }

  return result;
}

unint64_t sub_100012D94()
{
  unint64_t result = qword_1000774F8;
  if (!qword_1000774F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005C4B0, &type metadata for ClientContextProperties);
    atomic_store(result, (unint64_t *)&qword_1000774F8);
  }

  return result;
}

uint64_t sub_100012DD8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = swift_getWitnessTable(&unk_10005C488, a2);
  uint64_t result = swift_getWitnessTable(&unk_10005C460, a2);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

uint64_t sub_100012E1C(uint64_t a1, unint64_t a2)
{
  if (a1 == 1684628597 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684628597LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x656372756F73LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v7 = 0xE600000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x6D617473656D6974LL && a2 == 0xE900000000000070LL)
  {
    unint64_t v8 = 0xE900000000000070LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974LL, 0xE900000000000070LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x6E656B6F54737061LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v9 = 0xE800000000000000LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E656B6F54737061LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0x74536B636F6C6E75LL && a2 == 0xEB00000000657461LL)
  {
    unint64_t v10 = 0xEB00000000657461LL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74536B636F6C6E75LL, 0xEB00000000657461LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_32;
  }

  if (a1 == 0xD000000000000011LL && a2 == 0x8000000100056730LL)
  {
    swift_bridgeObjectRelease(0x8000000100056730LL);
    return 5LL;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000100056730LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t sub_1000130A4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100005394(&qword_100077500);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000087E0(a1, v9);
  unint64_t v11 = sub_1000133B0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ClientContextProperties.CodingKeys,  &type metadata for ClientContextProperties.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100007A28(a1);
  }
  char v35 = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v35, v5);
  uint64_t v14 = v13;
  uint64_t v29 = v12;
  char v34 = 1;
  swift_bridgeObjectRetain(v13);
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)(&v34, v5);
  uint64_t v30 = v16;
  uint64_t v27 = v15;
  char v33 = 2;
  swift_bridgeObjectRetain(v16);
  uint64_t v28 = 0LL;
  KeyedDecodingContainer.decode(_:forKey:)(&v33, v5);
  uint64_t v18 = v17;
  char v32 = 3;
  uint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v5);
  uint64_t v26 = v19;
  char v31 = 4;
  swift_bridgeObjectRetain(v19);
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)(&v31, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_100007A28(a1);
  uint64_t v21 = v26;
  swift_bridgeObjectRelease(v26);
  uint64_t v22 = v30;
  swift_bridgeObjectRelease(v30);
  uint64_t result = swift_bridgeObjectRelease(v14);
  *a2 = v29;
  a2[1] = v14;
  a2[2] = v27;
  a2[3] = v22;
  a2[4] = v18;
  a2[5] = v25;
  a2[6] = v21;
  a2[7] = v20;
  a2[8] = 1LL;
  return result;
}

unint64_t sub_1000133B0()
{
  unint64_t result = qword_100077508;
  if (!qword_100077508)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005C760, &type metadata for ClientContextProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100077508);
  }

  return result;
}

uint64_t type metadata accessor for ClientContextRequestBody.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100013400(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ClientContextRequestBody.CodingKeys);
}

uint64_t sub_100013400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  _OWORD v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_10001342C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16LL);
}

uint64_t sub_100013434(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100013474 + 4 * byte_10005C3B4[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100013494 + 4 * byte_10005C3B9[v4]))();
  }
}

_BYTE *sub_100013474(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100013494(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10001349C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000134A4(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000134AC(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000134B4(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t getEnumTagSinglePayload for ClientContextProperties.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

uint64_t storeEnumTagSinglePayload for ClientContextProperties.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10001359C + 4 * byte_10005C3C3[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000135D0 + 4 * byte_10005C3BE[v4]))();
}

uint64_t sub_1000135D0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000135D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000135E0LL);
  }
  return result;
}

uint64_t sub_1000135EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000135F4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1000135F8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100013600(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClientContextProperties.CodingKeys()
{
  return &type metadata for ClientContextProperties.CodingKeys;
}

unint64_t sub_100013620()
{
  unint64_t result = qword_100077598;
  if (!qword_100077598)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005C5F8, &type metadata for ClientContextProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100077598);
  }

  return result;
}

uint64_t sub_100013664(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10005C6E8, a1);
}

uint64_t sub_100013674(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10005C620, a1);
}

uint64_t sub_100013684(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10005C648, a1);
}

unint64_t sub_100013698()
{
  unint64_t result = qword_1000775A0;
  if (!qword_1000775A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005C568, &type metadata for ClientContextProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000775A0);
  }

  return result;
}

unint64_t sub_1000136E0()
{
  unint64_t result = qword_1000775A8;
  if (!qword_1000775A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005C590, &type metadata for ClientContextProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000775A8);
  }

  return result;
}

void sub_100013724(uint64_t a1)
{
  uint64_t v2 = static os_log_type_t.error.getter(a1);
  uint64_t v3 = sub_100005394(&qword_100079660);
  uint64_t v4 = swift_allocObject(v3, 72LL, 7LL);
  *(_OWORD *)(v4 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
  swift_getErrorValue(a1, v10, v9);
  uint64_t v5 = Error.localizedDescription.getter(v9[1], v9[2]);
  uint64_t v7 = v6;
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_100005854();
  *(void *)(v4 + 3sub_100007A28(v0 + 2) = v5;
  *(void *)(v4 + 40) = v7;
  sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  int v8 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:type:_:)("ServerSession: Error creating client proxy %@", 45LL, 2LL, &_mh_execute_header, v8, v2, v4);
  swift_bridgeObjectRelease(v4);
}

uint64_t sub_100013814()
{
  uint64_t v0 = type metadata accessor for ClientConfiguration(0LL);
  sub_100019F20(v0, qword_1000798F0);
  uint64_t v1 = sub_100019E38(v0, (uint64_t)qword_1000798F0);
  uint64_t v2 = v1 + *(int *)(v0 + 28);
  uint64_t v3 = type metadata accessor for DateComponents(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))( v2,  1LL,  1LL,  v3);
  *(void *)uint64_t v1 = 0x400C000000000000LL;
  *(_WORD *)(v1 + 8) = 257;
  *(_BYTE *)(v1 + *(int *)(v0 + swift_release(*(void *)(v0 + 32)) = 1;
  return result;
}

uint64_t sub_1000138A8()
{
  uint64_t v1 = sub_100005394(&qword_100077248);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession____lazy_storage___serverInteractionController;
  uint64_t v5 = *(void *)(v0
                 + OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession____lazy_storage___serverInteractionController);
  if (v5)
  {
    uint64_t v6 = *(void *)(v0
                   + OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession____lazy_storage___serverInteractionController);
  }

  else
  {
    sub_100007E2C(v0 + OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession_deviceInformationProvider, (uint64_t)v13);
    sub_10000D1A4( v0 + OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession_clientConfigurationCache,  (uint64_t)v3,  &qword_100077248);
    uint64_t v7 = type metadata accessor for ServerInteractionController(0LL);
    memset(v11, 0, sizeof(v11));
    uint64_t v12 = 0LL;
    uint64_t v6 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    uint64_t v8 = v6 + OBJC_IVAR____TtC20FMIPClientXPCService27ServerInteractionController_authenticationProvider;
    swift_unknownObjectWeakInit( v6 + OBJC_IVAR____TtC20FMIPClientXPCService27ServerInteractionController_authenticationProvider,  0LL);
    sub_100007A00(v13, v6 + 16);
    sub_100019FC4( (uint64_t)v3,  v6 + OBJC_IVAR____TtC20FMIPClientXPCService27ServerInteractionController_clientConfigurationCache,  &qword_100077248);
    swift_unknownObjectWeakAssign(v8, v0);
    sub_100019FC4( (uint64_t)v11,  v6 + OBJC_IVAR____TtC20FMIPClientXPCService27ServerInteractionController_apsTokenProvider,  &qword_100077250);
    uint64_t v9 = *(void *)(v0 + v4);
    *(void *)(v0 + v4) = v6;
    swift_retain(v6);
    swift_release(v9);
    uint64_t v5 = 0LL;
  }

  swift_retain(v5);
  return v6;
}

void sub_100013A14(void *a1, uint64_t a2, void (*a3)(void))
{
  if (a2)
  {
    uint64_t v5 = swift_errorRetain(a2);
    uint64_t v6 = static os_log_type_t.error.getter(v5);
    uint64_t v7 = sub_100005394(&qword_100079660);
    uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
    *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
    swift_getErrorValue(a2, v15, v14);
    uint64_t v9 = Error.localizedDescription.getter(v14[1], v14[2]);
    uint64_t v11 = v10;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_100005854();
    *(void *)(v8 + 3sub_100007A28(v0 + 2) = v9;
    *(void *)(v8 + 40) = v11;
    sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v12 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)("Unable to get sessionInfo from client %@", 40LL, 2LL, &_mh_execute_header, v12, v6, v8);
    swift_bridgeObjectRelease(v8);

    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x8000000100056D10LL,  "FMIPClientXPCService/ServerSession.swift",  40LL,  2LL,  85LL,  0);
  }

  else
  {
    if (a1)
    {
      id v13 = a1;
      a3();

      return;
    }

    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000028LL,  0x8000000100056D10LL,  "FMIPClientXPCService/ServerSession.swift",  40LL,  2LL,  89LL,  0);
  }

  __break(1u);
}

void sub_100013B84(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void (**)(void *, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v8 = a2;
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

id sub_100013BF8()
{
  uint64_t v1 = type metadata accessor for DispatchTime(0LL);
  uint64_t v28 = *(void *)(v1 - 8);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = &v29[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v2);
  uint64_t v6 = &v29[-v5 - 8];
  uint64_t v7 = swift_allocObject(&unk_10006B768, 24LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = 0LL;
  id v8 = (id *)(v7 + 16);
  uint64_t v9 = dispatch_group_create();
  dispatch_group_enter(v9);
  uint64_t v10 = swift_allocObject(&unk_10006B790, 32LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v7;
  *(void *)(v10 + 24) = v9;
  uint64_t v11 = *(void **)(v0 + OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession_sessionInfo);
  if (v11)
  {
    swift_beginAccess(v8, v29, 1LL, 0LL);
    uint64_t v12 = *(void **)(v7 + 16);
    *(void *)(v7 + swift_weakDestroy(v0 + 16) = v11;
    swift_retain_n(v7, 2LL);
    id v13 = v9;
    id v14 = v11;
    uint64_t v15 = v13;
    id v16 = v14;

    dispatch_group_leave(v15);
    swift_release(v7);
    swift_release(v10);
  }

  else
  {
    swift_retain_n(v7, 2LL);
    uint64_t v17 = v9;
    uint64_t v18 = (void *)sub_100018C14();
    uint64_t v19 = swift_allocObject(&unk_10006B7B8, 32LL, 7LL);
    *(void *)(v19 + swift_weakDestroy(v0 + 16) = sub_100019FB4;
    *(void *)(v19 + 24) = v10;
    aBlock[4] = sub_100019FBC;
    uint64_t v31 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_100013B84;
    aBlock[3] = &unk_10006B7D0;
    uint64_t v20 = _Block_copy(aBlock);
    uint64_t v21 = v31;
    swift_unknownObjectRetain(v18);
    swift_retain(v10);
    swift_release(v21);
    [v18 sessionInfoWithCompletion:v20];
    _Block_release(v20);
    swift_release(v7);
    swift_release(v10);
    swift_unknownObjectRelease(v18);
  }

  static DispatchTime.now()(v22);
  + infix(_:_:)(v4, 9.0);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v28 + 8);
  v23(v4, v1);
  char v24 = OS_dispatch_group.wait(timeout:)(v6);

  v23(v6, v1);
  if ((v24 & 1) != 0)
  {
    id v25 = 0LL;
  }

  else
  {
    swift_beginAccess(v8, aBlock, 0LL, 0LL);
    id v25 = *v8;
    id v26 = *v8;
  }

  swift_release(v7);
  return v25;
}

void sub_100013EA8(void *a1, uint64_t a2, dispatch_group_s *a3)
{
  uint64_t v6 = *(void **)(a2 + 16);
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = a1;

  id v7 = a1;
  dispatch_group_leave(a3);
}

uint64_t sub_100013F08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v144 = type metadata accessor for DispatchTime(0LL);
  uint64_t v142 = *(void *)(v144 - 8);
  uint64_t v3 = __chkstk_darwin(v144);
  v141 = &v115[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v3);
  v143 = &v115[-v5];
  uint64_t v6 = type metadata accessor for ClientConfiguration(0LL);
  uint64_t v137 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  v128 = &v115[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = __chkstk_darwin(v7);
  v130 = &v115[-v10];
  __chkstk_darwin(v9);
  uint64_t v12 = &v115[-v11];
  uint64_t v13 = sub_100005394(&qword_1000787D0);
  uint64_t v14 = __chkstk_darwin(v13);
  v131 = &v115[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v16 = __chkstk_darwin(v14);
  v132 = &v115[-v17];
  uint64_t v18 = __chkstk_darwin(v16);
  v134 = &v115[-v19];
  uint64_t v20 = __chkstk_darwin(v18);
  v136 = &v115[-v21];
  uint64_t v22 = __chkstk_darwin(v20);
  v138 = &v115[-v23];
  uint64_t v24 = __chkstk_darwin(v22);
  v135 = &v115[-v25];
  __chkstk_darwin(v24);
  uint64_t v27 = &v115[-v26];
  uint64_t v28 = sub_100005394(&qword_100077248);
  __chkstk_darwin(v28);
  uint64_t v30 = &v115[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v31 = type metadata accessor for ClientConfigurationCache(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  v140 = &v115[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  char v34 = (void *)swift_allocObject(&unk_10006B588, 56LL, 7LL);
  if (qword_100076B08 != -1) {
    swift_once(&qword_100076B08, sub_100013814);
  }
  uint64_t v35 = sub_100019E38(v6, (uint64_t)qword_1000798F0);
  uint64_t v36 = v6;
  uint64_t v37 = v35;
  v139 = (void *)v36;
  v34[5] = v36;
  v34[6] = &off_10006F828;
  v145 = v34 + 2;
  uint64_t v38 = sub_10000CD88(v34 + 2);
  sub_100019D94(v37, (uint64_t)v38);
  dispatch_group_t v39 = dispatch_group_create();
  sub_10000D1A4( v1 + OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession_clientConfigurationCache,  (uint64_t)v30,  &qword_100077248);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v32 + 48))(v30, 1LL, v31) == 1)
  {
    uint64_t v40 = sub_10000D20C((uint64_t)v30, &qword_100077248);
    uint64_t v41 = (uint64_t)v145;
    uint64_t v42 = a1;
LABEL_21:
    v111 = v141;
    static DispatchTime.now()(v40);
    v112 = v143;
    + infix(_:_:)(v111, 9.0);
    v113 = *(void (**)(_BYTE *, uint64_t))(v142 + 8);
    uint64_t v114 = v144;
    v113(v111, v144);
    OS_dispatch_group.wait(timeout:)(v112);

    v113(v112, v114);
    swift_beginAccess(v41, &aBlock, 0LL, 0LL);
    sub_100007E2C(v41, v42);
    return swift_release(v34);
  }

  v126 = v27;
  v125 = v12;
  uint64_t v129 = a1;
  sub_100019EDC((uint64_t)v30, (uint64_t)v140, type metadata accessor for ClientConfigurationCache);
  dispatch_group_enter(v39);
  uint64_t v43 = (_BYTE *)swift_allocObject(&unk_10006B5B0, 32LL, 7LL);
  *((void *)v43 + sub_100007A28(v0 + 2) = v34;
  *((void *)v43 + 3) = v39;
  uint64_t v44 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  swift_retain_n(v34, 3LL);
  uint64_t v45 = v39;
  uint64_t v46 = (void *)static OS_os_log.default.getter();
  uint64_t v47 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)( "Reading client configuration from disk.",  39LL,  2LL,  &_mh_execute_header,  v46,  v47,  &_swiftEmptyArrayStorage);

  uint64_t v48 = sub_10001D6BC();
  v127 = v39;
  dispatch_group_t v133 = v45;
  unint64_t v49 = v48;
  uint64_t v119 = v44;
  v120 = v34;
  uint64_t v50 = swift_allocObject(&unk_10006B5D8, 32LL, 7LL);
  *(void *)(v50 + swift_weakDestroy(v0 + 16) = sub_100019E54;
  *(void *)(v50 + 24) = v43;
  uint64_t v51 = swift_allocObject(&unk_10006B600, 32LL, 7LL);
  *(void *)(v51 + swift_weakDestroy(v0 + 16) = sub_100019E80;
  *(void *)(v51 + 24) = v50;
  uint64_t v52 = (uint64_t)v126;
  v124 = *(void (**)(_BYTE *, uint64_t, uint64_t, void *))(v137 + 56);
  v124(v126, 1LL, 1LL, v139);
  uint64_t v150 = 0LL;
  LOBYTE(v15sub_100007A28(v0 + 2) = 0;
  uint64_t v123 = *(void *)(*(void *)v49 + 128LL);
  uint64_t v53 = *(dispatch_queue_s **)((char *)v49 + v123);
  uint64_t v54 = (void *)swift_allocObject(&unk_10006B628, 64LL, 7LL);
  v54[2] = v52;
  v54[3] = v49;
  v54[4] = &v150;
  v54[5] = &v152;
  v54[6] = sub_100019E88;
  v54[7] = v51;
  uint64_t v55 = swift_allocObject(&unk_10006B650, 32LL, 7LL);
  *(void *)(v55 + swift_weakDestroy(v0 + 16) = sub_100019E94;
  *(void *)(v55 + 24) = v54;
  v156 = sub_100010FA0;
  uint64_t v157 = v55;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  v154 = sub_10003CE54;
  v155 = &unk_10006B668;
  uint64_t v56 = _Block_copy(&aBlock);
  uint64_t v57 = v157;
  swift_retain_n(v43, 2LL);
  uint64_t v122 = v50;
  swift_retain_n(v50, 2LL);
  swift_retain(v49);
  uint64_t v121 = v51;
  swift_retain(v51);
  swift_retain(v55);
  swift_release(v57);
  dispatch_sync(v53, v56);
  _Block_release(v56);
  LOBYTE(v53) = swift_isEscapingClosureAtFileLocation(v55, "", 90LL, 149LL, 26LL, 1LL);
  uint64_t result = swift_release(v55);
  if ((v53 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v59 = v49;
    uint64_t v60 = (uint64_t)v126;
    if (v152 == 1)
    {
      uint64_t v61 = v135;
      sub_10000D1A4((uint64_t)v126, (uint64_t)v135, &qword_1000787D0);
      uint64_t v62 = v150;
      if (v150 && (*(unsigned int (**)(_BYTE *, uint64_t, void *))(v137 + 48))(v61, 1LL, v139) == 1)
      {
        uint64_t v63 = swift_errorRetain(v62);
        unsigned int v116 = static os_log_type_t.debug.getter(v63);
        uint64_t v118 = sub_100005394(&qword_100079660);
        uint64_t v64 = swift_allocObject(v118, 72LL, 7LL);
        __int128 v117 = xmmword_10005B2C0;
        *(_OWORD *)(v64 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
        *(void *)&__int128 aBlock = v62;
        swift_errorRetain(v62);
        uint64_t v65 = sub_100005394(&qword_100076D70);
        uint64_t v66 = String.init<A>(describing:)(&aBlock, v65);
        uint64_t v68 = v67;
        *(void *)(v64 + 56) = &type metadata for String;
        unint64_t v69 = sub_100005854();
        *(void *)(v64 + 64) = v69;
        *(void *)(v64 + 3sub_100007A28(v0 + 2) = v66;
        *(void *)(v64 + 40) = v68;
        uint64_t v70 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:type:_:)( "Failed reading client configuration %@",  38LL,  2LL,  &_mh_execute_header,  v70,  v116,  v64);
        swift_bridgeObjectRelease(v64);

        uint64_t v71 = swift_errorRetain(v62);
        uint64_t v72 = static os_log_type_t.debug.getter(v71);
        uint64_t v73 = swift_allocObject(v118, 72LL, 7LL);
        *(_OWORD *)(v73 + swift_weakDestroy(v0 + 16) = v117;
        swift_getErrorValue(v62, v149, v146);
        uint64_t v74 = Error.localizedDescription.getter(v147, v148);
        *(void *)(v73 + 56) = &type metadata for String;
        *(void *)(v73 + 64) = v69;
        *(void *)(v73 + 3sub_100007A28(v0 + 2) = v74;
        *(void *)(v73 + 40) = v75;
        uint64_t v60 = (uint64_t)v126;
        __int128 v76 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:type:_:)( "Error reading cached configuration %@",  37LL,  2LL,  &_mh_execute_header,  v76,  v72,  v73);
        swift_bridgeObjectRelease(v73);

        uint64_t v61 = v135;
        swift_errorRelease(v62);
        dispatch_group_leave(v133);
        swift_errorRelease(v62);
      }

      sub_10000D20C((uint64_t)v61, &qword_1000787D0);
    }

    uint64_t v77 = v150;
    swift_retain(v59);
    swift_errorRelease(v77);
    sub_10000D20C(v60, &qword_1000787D0);
    swift_release(v59);
    swift_release(v43);
    swift_release_n(v122, 2LL);
    swift_release(v121);
    swift_release(v54);
    uint64_t v78 = swift_allocObject(&unk_10006B6A0, 32LL, 7LL);
    *(void *)(v78 + swift_weakDestroy(v0 + 16) = sub_100019E54;
    *(void *)(v78 + 24) = v43;
    uint64_t v79 = swift_allocObject(&unk_10006B6C8, 32LL, 7LL);
    *(void *)(v79 + swift_weakDestroy(v0 + 16) = sub_100019EA8;
    *(void *)(v79 + 24) = v78;
    uint64_t v80 = v138;
    v124(v138, 1LL, 1LL, v139);
    uint64_t v152 = 0LL;
    char v151 = 0;
    uint64_t v81 = *(dispatch_queue_s **)((char *)v59 + v123);
    uint64_t v82 = (void *)swift_allocObject(&unk_10006B6F0, 64LL, 7LL);
    v82[2] = v80;
    v82[3] = v59;
    v82[4] = &v152;
    v82[5] = &v151;
    v82[6] = sub_100019EB0;
    v82[7] = v79;
    uint64_t v83 = swift_allocObject(&unk_10006B718, 32LL, 7LL);
    *(void *)(v83 + swift_weakDestroy(v0 + 16) = sub_100019E94;
    *(void *)(v83 + 24) = v82;
    v156 = sub_100010FA0;
    uint64_t v157 = v83;
    *(void *)&__int128 aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256LL;
    v154 = sub_10003CE54;
    v155 = &unk_10006B730;
    __int128 v84 = _Block_copy(&aBlock);
    uint64_t v85 = v157;
    v135 = v43;
    swift_retain_n(v43, 2LL);
    v126 = (_BYTE *)v78;
    swift_retain_n(v78, 2LL);
    swift_retain(v59);
    swift_retain(v79);
    swift_retain(v83);
    swift_release(v85);
    dispatch_sync(v81, v84);
    _Block_release(v84);
    LOBYTE(v81) = swift_isEscapingClosureAtFileLocation(v83, "", 90LL, 149LL, 26LL, 1LL);
    uint64_t result = swift_release(v83);
    if ((v81 & 1) == 0)
    {
      uint64_t v42 = v129;
      if (v151 == 1)
      {
        uint64_t v86 = v129;
        uint64_t v87 = v136;
        sub_10000D1A4((uint64_t)v138, (uint64_t)v136, &qword_1000787D0);
        uint64_t v88 = v152;
        uint64_t v89 = (uint64_t)v87;
        uint64_t v90 = v134;
        sub_10000D1A4(v89, (uint64_t)v134, &qword_1000787D0);
        uint64_t v91 = *(unsigned int (**)(_BYTE *, uint64_t, void *))(v137 + 48);
        uint64_t v92 = v139;
        if (v91(v90, 1LL, v139) == 1)
        {
          sub_10000D20C((uint64_t)v90, &qword_1000787D0);
          uint64_t v42 = v86;
        }

        else
        {
          uint64_t v93 = (uint64_t)v125;
          sub_100019EDC((uint64_t)v90, (uint64_t)v125, type metadata accessor for ClientConfiguration);
          uint64_t v94 = sub_100005394(&qword_100079660);
          uint64_t v95 = swift_allocObject(v94, 72LL, 7LL);
          *(_OWORD *)(v95 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
          v96 = v130;
          sub_100019D94(v93, (uint64_t)v130);
          uint64_t v97 = v88;
          swift_errorRetain(v88);
          uint64_t v98 = String.init<A>(describing:)(v96, v92);
          uint64_t v100 = v99;
          *(void *)(v95 + 56) = &type metadata for String;
          *(void *)(v95 + 64) = sub_100005854();
          *(void *)(v95 + 3sub_100007A28(v0 + 2) = v98;
          *(void *)(v95 + 40) = v100;
          v101 = (void *)static OS_os_log.default.getter();
          uint64_t v102 = static os_log_type_t.default.getter();
          os_log(_:dso:log:type:_:)("Read client configuration %@", 28LL, 2LL, &_mh_execute_header, v101, v102, v95);
          swift_bridgeObjectRelease(v95);

          v103 = v132;
          sub_100019D94(v93, (uint64_t)v132);
          v124(v103, 0LL, 1LL, v92);
          uint64_t v104 = v131;
          sub_10000D1A4((uint64_t)v103, (uint64_t)v131, &qword_1000787D0);
          if (v91(v104, 1LL, v92) == 1)
          {
            sub_10000D20C((uint64_t)v104, &qword_1000787D0);
          }

          else
          {
            uint64_t v105 = (uint64_t)v104;
            __int128 v106 = v128;
            sub_100019EDC(v105, (uint64_t)v128, type metadata accessor for ClientConfiguration);
            v155 = v92;
            v156 = (uint64_t (*)())&off_10006F828;
            v107 = sub_10000CD88(&aBlock);
            sub_100019EDC((uint64_t)v106, (uint64_t)v107, type metadata accessor for ClientConfiguration);
            uint64_t v108 = v145;
            swift_beginAccess(v145, &v150, 1LL, 0LL);
            sub_100007A28(v108);
            sub_100007A00(&aBlock, (uint64_t)v108);
          }

          dispatch_group_leave(v133);
          sub_10000D20C((uint64_t)v103, &qword_1000787D0);
          sub_100019DD8((uint64_t)v125, type metadata accessor for ClientConfiguration);
          swift_errorRelease(v97);
          uint64_t v42 = v129;
        }

        sub_10000D20C((uint64_t)v136, &qword_1000787D0);
      }

      uint64_t v109 = v152;
      swift_retain(v59);
      swift_errorRelease(v109);
      sub_10000D20C((uint64_t)v138, &qword_1000787D0);
      char v34 = v120;
      swift_release(v120);
      swift_release_n(v59, 2LL);
      swift_release_n(v135, 2LL);
      swift_release_n(v126, 2LL);
      dispatch_group_t v110 = v133;
      swift_release(v79);
      swift_release(v82);
      swift_release(v34);

      uint64_t v40 = sub_100019DD8((uint64_t)v140, type metadata accessor for ClientConfigurationCache);
      uint64_t v41 = (uint64_t)v145;
      dispatch_group_t v39 = v127;
      goto LABEL_21;
    }
  }

  __break(1u);
  return result;
}

void sub_100014F64(uint64_t a1, uint64_t a2, uint64_t a3, dispatch_group_s *a4)
{
  uint64_t v8 = sub_100005394(&qword_1000787D0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for ClientConfiguration(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2)
  {
    uint64_t v15 = swift_errorRetain(a2);
    uint64_t v16 = static os_log_type_t.debug.getter(v15);
    uint64_t v17 = sub_100005394(&qword_100079660);
    uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
    *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
    swift_getErrorValue(a2, v26, v25);
    uint64_t v19 = Error.localizedDescription.getter(v25[1], v25[2]);
    uint64_t v21 = v20;
    *(void *)(v18 + 56) = &type metadata for String;
    *(void *)(v18 + 64) = sub_100005854();
    *(void *)(v18 + 3sub_100007A28(v0 + 2) = v19;
    *(void *)(v18 + 40) = v21;
    sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v22 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)("Error reading cached configuration %@", 37LL, 2LL, &_mh_execute_header, v22, v16, v18);
    swift_bridgeObjectRelease(v18);

    swift_errorRelease(a2);
  }

  else
  {
    sub_10000D1A4(a1, (uint64_t)v10, &qword_1000787D0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11) == 1)
    {
      sub_10000D20C((uint64_t)v10, &qword_1000787D0);
    }

    else
    {
      uint64_t v23 = (void *)(a3 + 16);
      sub_100019EDC((uint64_t)v10, (uint64_t)v14, type metadata accessor for ClientConfiguration);
      uint64_t v29 = v11;
      uint64_t v30 = &off_10006F828;
      uint64_t v24 = sub_10000CD88(&v28);
      sub_100019EDC((uint64_t)v14, (uint64_t)v24, type metadata accessor for ClientConfiguration);
      swift_beginAccess(v23, v27, 1LL, 0LL);
      sub_100007A28(v23);
      sub_100007A00(&v28, (uint64_t)v23);
    }
  }

  dispatch_group_leave(a4);
}

_BYTE *sub_1000151AC(_BYTE *a1)
{
  uint64_t v4 = sub_100005394(&qword_100077248);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v28[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ClientConfiguration(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v28[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    uint64_t v10 = *(void *)&a1[direct field offset for ClientConfiguration.nearbyScanDuration];
    char v11 = a1[direct field offset for ClientConfiguration.nearbyScanEnabled];
    char v12 = a1[direct field offset for ClientConfiguration.nearbyScanWhileAuthenticated];
    char v13 = a1[direct field offset for ClientConfiguration.deviceNameSyncEnabled];
    sub_10000D1A4( (uint64_t)&a1[direct field offset for ClientConfiguration.deviceNameSyncInterval],  (uint64_t)&v9[*(int *)(v7 + 28)],  &qword_100077670);
    *(void *)uint64_t v9 = v10;
    v9[8] = v11;
    v9[9] = v12;
    v9[*(int *)(v7 + 32)] = v13;
    sub_10000D1A4( v1 + OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession_clientConfigurationCache,  (uint64_t)v6,  &qword_100077248);
    uint64_t v14 = type metadata accessor for ClientConfigurationCache(0LL);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48LL))(v6, 1LL, v14) == 1)
    {
      uint64_t v15 = a1;
      sub_100019DD8((uint64_t)v9, type metadata accessor for ClientConfiguration);
      sub_10000D20C((uint64_t)v6, &qword_100077248);
    }

    else
    {
      uint64_t v31 = v7;
      uint64_t v32 = &off_10006F828;
      uint64_t v17 = sub_10000CD88(v30);
      sub_100019D94((uint64_t)v9, (uint64_t)v17);
      uint64_t v15 = a1;
      sub_10004CC54(v30);
      sub_100019DD8((uint64_t)v9, type metadata accessor for ClientConfiguration);
      sub_100007A28(v30);
      if (v2)
      {
        uint64_t v18 = sub_100019DD8((uint64_t)v6, type metadata accessor for ClientConfigurationCache);
        uint64_t v19 = static os_log_type_t.error.getter(v18);
        uint64_t v20 = sub_100005394(&qword_100079660);
        uint64_t v21 = swift_allocObject(v20, 72LL, 7LL);
        *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
        swift_getErrorValue(v2, v29, v28);
        uint64_t v22 = Error.localizedDescription.getter(v28[1], v28[2]);
        uint64_t v24 = v23;
        *(void *)(v21 + 56) = &type metadata for String;
        *(void *)(v21 + 64) = sub_100005854();
        *(void *)(v21 + 3sub_100007A28(v0 + 2) = v22;
        *(void *)(v21 + 40) = v24;
        sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
        uint64_t v25 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:type:_:)( "Failed to save configuration to disk %@",  39LL,  2LL,  &_mh_execute_header,  v25,  v19,  v21);
        swift_bridgeObjectRelease(v21);

        swift_willThrow();
      }

      else
      {
        sub_100019DD8((uint64_t)v6, type metadata accessor for ClientConfigurationCache);
      }
    }
  }

  else
  {
    sub_100013F08((uint64_t)v30);
    uint64_t v16 = sub_1000087E0(v30, v31);
    uint64_t v15 = (_BYTE *)sub_1000196B4((uint64_t)v16);
    sub_100007A28(v30);
  }

  return v15;
}

id sub_100015510()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ServerSession(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10001562C()
{
  return type metadata accessor for ServerSession(0LL);
}

uint64_t type metadata accessor for ServerSession(uint64_t a1)
{
  uint64_t result = qword_100077620;
  if (!qword_100077620) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ServerSession);
  }
  return result;
}

void sub_100015670(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  _OWORD v6[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t v2 = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    void v6[3] = *(void *)(v2 - 8) + 64LL;
    _OWORD v6[4] = "\b";
    v6[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    sub_10000CA50(319LL);
    if (v5 <= 0x3F)
    {
      v6[7] = *(void *)(v4 - 8) + 64LL;
      v6[8] = &unk_10005C800;
      void v6[9] = "\b";
      v6[10] = "\b";
      swift_updateClassMetadata2(a1, 256LL, 11LL, v6, a1 + 80);
    }
  }

uint64_t sub_100015734(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v22 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v21[1] = *(void *)&v3[OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession_concurrentQueue];
  uint64_t v14 = (void *)swift_allocObject(&unk_10006B538, 48LL, 7LL);
  v14[2] = v3;
  void v14[3] = a1;
  v14[4] = a2;
  v14[5] = a3;
  aBlock[4] = sub_100019D88;
  uint64_t v25 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  aBlock[3] = &unk_10006B550;
  uint64_t v15 = _Block_copy(aBlock);
  id v16 = a1;
  swift_retain(a3);
  static DispatchQoS.unspecified.getter(v3);
  uint64_t v23 = &_swiftEmptyArrayStorage;
  uint64_t v17 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v19 = sub_10001A008(&qword_100076D58, (uint64_t *)&unk_100078740, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v18, v19, v7, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v25);
}

void sub_100015944(uint64_t a1, _BYTE *a2, void (*a3)(_BYTE *, void))
{
  uint64_t v4 = sub_1000151AC(a2);
  a3(v4, 0LL);
}

uint64_t sub_100015A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v28 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100076AF8 != -1) {
    swift_once(&qword_100076AF8, sub_100009A7C);
  }
  uint64_t v12 = qword_1000798C0;
  uint64_t v13 = sub_100005394(&qword_100079660);
  uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
  *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v15 = sub_100005854();
  *(void *)(v14 + 64) = v15;
  *(void *)(v14 + 3sub_100007A28(v0 + 2) = 0xD00000000000001FLL;
  *(void *)(v14 + 40) = 0x8000000100056A00LL;
  uint64_t v16 = static os_log_type_t.default.getter(v15);
  os_log(_:dso:log:type:_:)("%{public}@", 10LL, 2LL, &_mh_execute_header, v12, v16, v14);
  swift_bridgeObjectRelease(v14);
  uint64_t v17 = swift_allocObject(&unk_10006AFE8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v17 + 16, v3);
  uint64_t v18 = (void *)swift_allocObject(&unk_10006B380, 40LL, 7LL);
  v18[2] = v17;
  v18[3] = a1;
  v18[4] = a2;
  aBlock[4] = sub_100019C3C;
  uint64_t v31 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  aBlock[3] = &unk_10006B398;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain(v17);
  uint64_t v20 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v20);
  uint64_t v29 = &_swiftEmptyArrayStorage;
  uint64_t v21 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v22 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v23 = sub_10001A008(&qword_100076D58, (uint64_t *)&unk_100078740, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v22, v23, v6, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v8, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v27);
  uint64_t v24 = v31;
  swift_release(v17);
  return swift_release(v24);
}

void sub_100015D80(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100005394(&qword_100077670);
  __chkstk_darwin(v5);
  uint64_t v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = (void *)swift_allocObject(&unk_10006B3D0, 40LL, 7LL);
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = v2;
  uint64_t v9 = type metadata accessor for VoiceAssistantSyncCache(0LL);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  id v10 = v2;
  swift_retain_n(a2, 2LL);
  id v11 = v10;
  uint64_t v12 = sub_10001BD48((uint64_t)v11);
  uint64_t v13 = (objc_class *)type metadata accessor for APSTokenProvider();
  id v14 = objc_allocWithZone(v13);
  swift_retain(v12);
  id v15 = sub_100031BA8(0xD000000000000028LL, 0x8000000100056910LL);
  uint64_t v23 = v13;
  uint64_t v24 = &off_10006D860;
  v22[0] = v15;
  sub_100019FC4((uint64_t)v22, (uint64_t)v21, &qword_100077250);
  swift_beginAccess(v12 + 32, v20, 33LL, 0LL);
  sub_100019C98((uint64_t)v21, v12 + 32, &qword_100077250);
  swift_endAccess(v20);
  sub_100013F08((uint64_t)v22);
  uint64_t v16 = sub_1000087E0(v22, (uint64_t)v23);
  uint64_t v17 = type metadata accessor for ClientConfiguration(0LL);
  sub_10000D1A4((uint64_t)v16 + *(int *)(v17 + 28), (uint64_t)v7, &qword_100077670);
  uint64_t v18 = v12 + OBJC_IVAR____TtC20FMIPClientXPCService23VoiceAssistantSyncCache_cacheValidity;
  swift_beginAccess(v12 + OBJC_IVAR____TtC20FMIPClientXPCService23VoiceAssistantSyncCache_cacheValidity, v21, 33LL, 0LL);
  sub_100019C98((uint64_t)v7, v18, &qword_100077670);
  swift_endAccess(v21);
  sub_100007A28(v22);
  uint64_t v19 = swift_allocObject(&unk_10006B3F8, 32LL, 7LL);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = sub_100019C8C;
  *(void *)(v19 + 24) = v8;
  swift_retain(v8);
  sub_10001D080((uint64_t)sub_100019CDC, v19);
  swift_release(a2);
  swift_release(v8);
  swift_release(v19);
  swift_release_n(v12, 2LL);
}

void sub_100016090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t sub_1000160E8( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, void *a5)
{
  if (!a1)
  {
    if (qword_100076AF8 != -1) {
      a1 = swift_once(&qword_100076AF8, sub_100009A7C);
    }
    uint64_t v13 = qword_1000798C0;
    uint64_t v14 = static os_log_type_t.default.getter(a1);
    os_log(_:dso:log:type:_:)( "Trying a server request for sync data.",  38LL,  2LL,  &_mh_execute_header,  v13,  v14,  &_swiftEmptyArrayStorage);
    uint64_t v15 = swift_allocObject(&unk_10006B420, 32LL, 7LL);
    *(void *)(v15 + swift_weakDestroy(v0 + 16) = a3;
    *(void *)(v15 + 24) = a4;
    uint64_t v16 = qword_1000798C0;
    uint64_t v17 = sub_100005394(&qword_100079660);
    uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
    *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
    *(void *)(v18 + 56) = &type metadata for String;
    uint64_t v19 = a4;
    unint64_t v20 = sub_100005854();
    *(void *)(v18 + 64) = v20;
    *(void *)(v18 + 3sub_100007A28(v0 + 2) = 0xD000000000000026LL;
    *(void *)(v18 + 40) = 0x8000000100056AE0LL;
    uint64_t v21 = swift_retain_n(v19, 2LL);
    uint64_t v22 = static os_log_type_t.default.getter(v21);
    os_log(_:dso:log:type:_:)("%{public}@", 10LL, 2LL, &_mh_execute_header, v16, v22, v18);
    swift_bridgeObjectRelease(v18);
    sub_100013F08((uint64_t)aBlock);
    uint64_t v23 = sub_1000087E0(aBlock, (uint64_t)v71);
    LODWORD(v23) = *((unsigned __int8 *)v23 + *(int *)(type metadata accessor for ClientConfiguration(0LL) + 32));
    sub_100007A28(aBlock);
    if ((_DWORD)v23 == 1)
    {
      uint64_t v69 = v19;
      uint64_t v24 = (char *)sub_100013BF8();
      if (v24)
      {
        uint64_t v25 = v24;
        uint64_t v27 = *(void *)&v24[direct field offset for SessionInfo.processName];
        uint64_t v26 = *(void *)&v24[direct field offset for SessionInfo.processName + 8];
        uint64_t v28 = v15;
        swift_bridgeObjectRetain(v26);

        id v29 = objc_allocWithZone((Class)type metadata accessor for APSTokenProvider());
        id v67 = sub_100031BA8(0xD000000000000028LL, 0x8000000100056910LL);
        uint64_t v30 = sub_1000315BC();
        uint64_t v31 = (void *)swift_allocObject(&unk_10006B448, 56LL, 7LL);
        v31[2] = a5;
        v31[3] = v27;
        uint64_t v65 = v27;
        v31[4] = v26;
        v31[5] = sub_100019CE4;
        v31[6] = v15;
        uint64_t v32 = swift_allocObject(&unk_10006B470, 32LL, 7LL);
        *(void *)(v32 + swift_weakDestroy(v0 + 16) = sub_100019D20;
        *(void *)(v32 + 24) = v31;
        uint64_t v76 = 0LL;
        uint64_t v77 = 0LL;
        uint64_t v75 = 0LL;
        char v74 = 0;
        queue = *(dispatch_queue_s **)(v30 + 56);
        uint64_t v33 = (void *)swift_allocObject(&unk_10006B498, 64LL, 7LL);
        v33[2] = &v76;
        v33[3] = v30;
        v33[4] = &v75;
        v33[5] = &v74;
        v33[6] = sub_10001A290;
        v33[7] = v32;
        uint64_t v34 = swift_allocObject(&unk_10006B4C0, 32LL, 7LL);
        *(void *)(v34 + swift_weakDestroy(v0 + 16) = sub_100018EB4;
        *(void *)(v34 + 24) = v33;
        uint64_t v72 = sub_100010FA0;
        uint64_t v73 = v34;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = sub_10003CE54;
        uint64_t v71 = &unk_10006B4D8;
        uint64_t v35 = _Block_copy(aBlock);
        uint64_t v36 = v73;
        id v37 = a5;
        uint64_t v66 = v28;
        swift_retain_n(v28, 2LL);
        swift_retain_n(v31, 2LL);
        swift_bridgeObjectRetain(v26);
        id v38 = v37;
        swift_retain(v30);
        swift_retain(v32);
        swift_retain(v34);
        swift_release(v36);
        dispatch_sync(queue, v35);
        _Block_release(v35);
        LOBYTE(v35) = swift_isEscapingClosureAtFileLocation(v34, "", 90LL, 149LL, 26LL, 1LL);
        uint64_t result = swift_release(v34);
        if ((v35 & 1) != 0)
        {
          __break(1u);
          return result;
        }

        if (v74 == 1)
        {
          uint64_t v39 = v77;
          if (v77)
          {
            uint64_t v41 = v75;
            uint64_t v40 = v76;
            swift_errorRetain(v75);
            swift_bridgeObjectRetain(v39);
            uint64_t v42 = sub_1000138A8();
            swift_retain(v66);
            sub_100041D94(v65, v26, v40, v39, v42, (uint64_t)sub_100019CE4, v66);
            swift_release(v42);
            swift_release(v66);
            swift_errorRelease(v41);
            swift_bridgeObjectRelease(v39);
          }
        }

        uint64_t v43 = v75;
        swift_retain(v30);
        swift_errorRelease(v43);
        uint64_t v44 = v77;
        swift_release(v30);
        swift_release(v66);
        swift_bridgeObjectRelease(v26);

        swift_release_n(v31, 2LL);
        swift_release(v32);
        swift_release(v33);
        swift_bridgeObjectRelease(v44);
        swift_release(v69);
        swift_release(v66);

        uint64_t v45 = v30;
        return swift_release(v45);
      }

      unint64_t v56 = sub_100018DF4();
      uint64_t v57 = swift_allocError(&type metadata for ServerSession.ServerSessionError, v56, 0LL, 0LL);
      *uint64_t v58 = 2;
      uint64_t v59 = qword_1000798C0;
      uint64_t v60 = swift_allocObject(v17, 72LL, 7LL);
      *(_OWORD *)(v60 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
      aBlock[0] = 0LL;
      uint64_t v61 = sub_100005394(&qword_100077680);
      uint64_t v62 = String.init<A>(describing:)(aBlock, v61);
      *(void *)(v60 + 56) = &type metadata for String;
      *(void *)(v60 + 64) = v20;
      *(void *)(v60 + 3sub_100007A28(v0 + 2) = v62;
      *(void *)(v60 + 40) = v63;
      uint64_t v64 = static os_log_type_t.default.getter(v62);
      os_log(_:dso:log:type:_:)("requestVoiceAssistantSync completed %@", 38LL, 2LL, &_mh_execute_header, v59, v64, v60);
      swift_bridgeObjectRelease(v60);
      a3(0LL, v57);
      swift_errorRelease(v57);
      uint64_t v55 = v19;
    }

    else
    {
      unint64_t v46 = sub_100018DF4();
      uint64_t v47 = swift_allocError(&type metadata for ServerSession.ServerSessionError, v46, 0LL, 0LL);
      *uint64_t v48 = 3;
      uint64_t v49 = qword_1000798C0;
      uint64_t v50 = swift_allocObject(v17, 72LL, 7LL);
      *(_OWORD *)(v50 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
      aBlock[0] = 0LL;
      uint64_t v51 = sub_100005394(&qword_100077680);
      uint64_t v52 = String.init<A>(describing:)(aBlock, v51);
      *(void *)(v50 + 56) = &type metadata for String;
      *(void *)(v50 + 64) = v20;
      *(void *)(v50 + 3sub_100007A28(v0 + 2) = v52;
      *(void *)(v50 + 40) = v53;
      uint64_t v54 = static os_log_type_t.default.getter(v52);
      os_log(_:dso:log:type:_:)("requestVoiceAssistantSync completed %@", 38LL, 2LL, &_mh_execute_header, v49, v54, v50);
      swift_bridgeObjectRelease(v50);
      a3(0LL, v47);
      swift_errorRelease(v47);
      uint64_t v55 = v19;
    }

    swift_release(v55);
    uint64_t v45 = v15;
    return swift_release(v45);
  }

  uint64_t v8 = a1;
  if (qword_100076AF8 != -1) {
    a1 = swift_once(&qword_100076AF8, sub_100009A7C);
  }
  uint64_t v9 = qword_1000798C0;
  uint64_t v10 = static os_log_type_t.default.getter(a1);
  os_log(_:dso:log:type:_:)( "Returning cached data to client.",  32LL,  2LL,  &_mh_execute_header,  v9,  v10,  &_swiftEmptyArrayStorage);
  return a3(v8, a2);
}

uint64_t sub_1000167C8(void *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t))
{
  if (qword_100076AF8 != -1) {
    swift_once(&qword_100076AF8, sub_100009A7C);
  }
  uint64_t v6 = qword_1000798C0;
  uint64_t v7 = sub_100005394(&qword_100079660);
  uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
  *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
  uint64_t v16 = a1;
  id v9 = a1;
  uint64_t v10 = sub_100005394(&qword_100077680);
  uint64_t v11 = String.init<A>(describing:)(&v16, v10);
  uint64_t v13 = v12;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_100005854();
  *(void *)(v8 + 3sub_100007A28(v0 + 2) = v11;
  *(void *)(v8 + 40) = v13;
  uint64_t v14 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)("requestVoiceAssistantSync completed %@", 38LL, 2LL, &_mh_execute_header, v6, v14, v8);
  swift_bridgeObjectRelease(v8);
  return a3(a1, a2);
}

uint64_t sub_1000168E8(uint64_t a1, uint64_t a2, void (*a3)(void, uint64_t))
{
  uint64_t v6 = sub_100005394(&qword_100077678);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CachedVoiceAssistantSyncInfo(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (a2)
  {
    uint64_t v13 = swift_errorRetain(a2);
    if (qword_100076AF8 != -1) {
      uint64_t v13 = swift_once(&qword_100076AF8, sub_100009A7C);
    }
    uint64_t v14 = qword_1000798C0;
    uint64_t v15 = static os_log_type_t.error.getter(v13);
    uint64_t v16 = sub_100005394(&qword_100079660);
    uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
    *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
    swift_getErrorValue(a2, v42, v41);
    uint64_t v18 = Error.localizedDescription.getter(v41[1], v41[2]);
    uint64_t v20 = v19;
    *(void *)(v17 + 56) = &type metadata for String;
    *(void *)(v17 + 64) = sub_100005854();
    *(void *)(v17 + 3sub_100007A28(v0 + 2) = v18;
    *(void *)(v17 + 40) = v20;
    os_log(_:dso:log:type:_:)("Error reading cached sync devices %@", 36LL, 2LL, &_mh_execute_header, v14, v15, v17);
    swift_bridgeObjectRelease(v17);
    swift_errorRetain(a2);
    a3(0LL, a2);
    swift_errorRelease(a2);
    return swift_errorRelease(a2);
  }

  else
  {
    sub_10000D1A4(a1, (uint64_t)v8, &qword_100077678);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
    {
      uint64_t v22 = sub_10000D20C((uint64_t)v8, &qword_100077678);
      if (qword_100076AF8 != -1) {
        uint64_t v22 = swift_once(&qword_100076AF8, sub_100009A7C);
      }
      uint64_t v23 = qword_1000798C0;
      uint64_t v24 = static os_log_type_t.default.getter(v22);
      os_log(_:dso:log:type:_:)( "Device name sync cache had no data",  34LL,  2LL,  &_mh_execute_header,  v23,  v24,  &_swiftEmptyArrayStorage);
      return ((uint64_t (*)(void, void))a3)(0LL, 0LL);
    }

    else
    {
      sub_100019EDC((uint64_t)v8, (uint64_t)v12, type metadata accessor for CachedVoiceAssistantSyncInfo);
      uint64_t v25 = *v12;
      uint64_t v26 = (uint64_t *)((char *)v12 + *(int *)(v9 + 24));
      uint64_t v27 = *v26;
      uint64_t v28 = v26[1];
      objc_allocWithZone((Class)type metadata accessor for VoiceAssistantSyncResult(0LL));
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v28);
      id v29 = (void *)VoiceAssistantSyncResult.init(devices:anchor:)(v25, v27, v28);
      if (qword_100076AF8 != -1) {
        swift_once(&qword_100076AF8, sub_100009A7C);
      }
      uint64_t v30 = qword_1000798C0;
      uint64_t v31 = sub_100005394(&qword_100079660);
      uint64_t v32 = swift_allocObject(v31, 72LL, 7LL);
      *(_OWORD *)(v32 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
      id v33 = v29;
      id v34 = [v33 description];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      uint64_t v37 = v36;

      *(void *)(v32 + 56) = &type metadata for String;
      unint64_t v38 = sub_100005854();
      *(void *)(v32 + 64) = v38;
      *(void *)(v32 + 3sub_100007A28(v0 + 2) = v35;
      *(void *)(v32 + 40) = v37;
      uint64_t v39 = static os_log_type_t.default.getter(v38);
      os_log(_:dso:log:type:_:)("Device name sync cache completed %@", 35LL, 2LL, &_mh_execute_header, v30, v39, v32);
      swift_bridgeObjectRelease(v32);
      id v40 = v33;
      a3(v33, 0LL);

      return sub_100019DD8((uint64_t)v12, type metadata accessor for CachedVoiceAssistantSyncInfo);
    }
  }

uint64_t sub_100016CC4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v12 = sub_1000138A8();
  swift_retain(a6);
  sub_100041D94(a3, a4, v10, v11, v12, a5, a6);
  swift_release(v12);
  return swift_release(a6);
}

void sub_100016D48(uint64_t a1, uint64_t a2, void (*a3)(void, void), uint64_t a4)
{
  uint64_t v8 = sub_100005394(&qword_100077678);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for CachedVoiceAssistantSyncInfo(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (a2)
  {
    uint64_t v29 = a1;
    uint64_t v30 = a4;
    uint64_t v31 = a3;
    uint64_t v15 = swift_errorRetain(a2);
    if (qword_100076AF8 != -1) {
      uint64_t v15 = swift_once(&qword_100076AF8, sub_100009A7C);
    }
    uint64_t v16 = qword_1000798C0;
    uint64_t v17 = static os_log_type_t.error.getter(v15);
    uint64_t v18 = sub_100005394(&qword_100079660);
    uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
    *(_OWORD *)(v19 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
    swift_getErrorValue(a2, v33, v32);
    uint64_t v20 = Error.localizedDescription.getter(v32[1], v32[2]);
    uint64_t v22 = v21;
    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = sub_100005854();
    *(void *)(v19 + 3sub_100007A28(v0 + 2) = v20;
    *(void *)(v19 + 40) = v22;
    os_log(_:dso:log:type:_:)("Error fetching sync data %@", 27LL, 2LL, &_mh_execute_header, v16, v17, v19);
    swift_bridgeObjectRelease(v19);
    swift_errorRelease(a2);
    a3 = v31;
    a1 = v29;
  }

  sub_10000D1A4(a1, (uint64_t)v10, &qword_100077678);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11) == 1)
  {
    sub_10000D20C((uint64_t)v10, &qword_100077678);
    uint64_t v23 = 0LL;
  }

  else
  {
    sub_100019EDC((uint64_t)v10, (uint64_t)v14, type metadata accessor for CachedVoiceAssistantSyncInfo);
    uint64_t v24 = *v14;
    uint64_t v25 = (uint64_t *)((char *)v14 + *(int *)(v11 + 24));
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    objc_allocWithZone((Class)type metadata accessor for VoiceAssistantSyncResult(0LL));
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v27);
    uint64_t v23 = (void *)VoiceAssistantSyncResult.init(devices:anchor:)(v24, v26, v27);
    sub_100019DD8((uint64_t)v14, type metadata accessor for CachedVoiceAssistantSyncInfo);
  }

  a3(v23, a2);
}

uint64_t sub_100016FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v28 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v29 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100005394(&qword_100079660);
  uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_100005854();
  *(void *)(v15 + 3sub_100007A28(v0 + 2) = 0xD000000000000021LL;
  *(void *)(v15 + 40) = 0x80000001000569D0LL;
  uint64_t v16 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v17 = (void *)static OS_os_log.default.getter(v16);
  uint64_t v18 = static os_log_type_t.default.getter(v17);
  os_log(_:dso:log:type:_:)("%{public}@", 10LL, 2LL, &_mh_execute_header, v17, v18, v15);
  swift_bridgeObjectRelease(v15);

  uint64_t v19 = (void *)swift_allocObject(&unk_10006B308, 48LL, 7LL);
  v19[2] = a1;
  void v19[3] = v4;
  v19[4] = v28;
  v19[5] = a3;
  aBlock[4] = sub_100019C24;
  uint64_t v32 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  void aBlock[3] = &unk_10006B320;
  uint64_t v20 = _Block_copy(aBlock);
  id v21 = v4;
  uint64_t v22 = swift_retain(a3);
  static DispatchQoS.unspecified.getter(v22);
  uint64_t v30 = &_swiftEmptyArrayStorage;
  uint64_t v23 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v24 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v25 = sub_10001A008(&qword_100076D58, (uint64_t *)&unk_100078740, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v24, v25, v7, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v32);
}

uint64_t sub_100017280(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  if (a1)
  {
    uint64_t v8 = a1;
    uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)( &type metadata for SyncCacheType,  &v8,  &type metadata for SyncCacheType,  &type metadata for Int);
    __break(1u);
  }

  else
  {
    uint64_t v5 = type metadata accessor for VoiceAssistantSyncCache(0LL);
    swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    uint64_t v6 = sub_10001BD48((uint64_t)a2);
    sub_10001EC28(v6);
    swift_release(v6);
    return a3(0LL);
  }

  return result;
}

void sub_1000173C8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = objc_autoreleasePoolPush();
  a1 += 16LL;
  swift_beginAccess(a1, v11, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    uint64_t v10 = (void *)Strong;
    a4(a2, a3);
  }

  objc_autoreleasePoolPop(v8);
}

uint64_t sub_100017454(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v32 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100005394(&qword_100079660);
  uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
  *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_100005854();
  *(void *)(v13 + 3sub_100007A28(v0 + 2) = 0xD000000000000023LL;
  *(void *)(v13 + 40) = 0x8000000100056960LL;
  uint64_t v14 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v15 = (void *)static OS_os_log.default.getter(v14);
  uint64_t v16 = static os_log_type_t.default.getter(v15);
  os_log(_:dso:log:type:_:)("%{public}@", 10LL, 2LL, &_mh_execute_header, v15, v16, v13);
  swift_bridgeObjectRelease(v13);

  uint64_t v17 = type metadata accessor for NearbyDeviceFinder(0LL);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  uint64_t v18 = sub_100010410();
  sub_100013F08((uint64_t)aBlock);
  double v19 = *(double *)sub_1000087E0(aBlock, (uint64_t)v35);
  uint64_t v20 = (void *)swift_allocObject(&unk_10006B218, 48LL, 7LL);
  v20[2] = v3;
  v20[3] = v18;
  v20[4] = a1;
  v20[5] = a2;
  id v21 = v3;
  swift_retain(v18);
  swift_retain(a2);
  sub_10000D3EC((uint64_t)sub_100019BA8, (uint64_t)v20, v19);
  swift_release(v20);
  sub_100007A28(aBlock);
  uint64_t v22 = swift_allocObject(&unk_10006B240, 32LL, 7LL);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = v21;
  *(void *)(v22 + 24) = v18;
  uint64_t v36 = sub_100019BB8;
  uint64_t v37 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  uint64_t v35 = &unk_10006B258;
  uint64_t v23 = _Block_copy(aBlock);
  id v24 = v21;
  uint64_t v25 = swift_retain(v18);
  static DispatchQoS.unspecified.getter(v25);
  id v33 = _swiftEmptyArrayStorage;
  uint64_t v26 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v27 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v28 = sub_10001A008(&qword_100076D58, (uint64_t *)&unk_100078740, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v27, v28, v6, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v8, v23);
  _Block_release(v23);
  swift_release(v18);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v31);
  return swift_release(v37);
}

void sub_10001780C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v6 = 0LL;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);
}

uint64_t sub_1000178B0( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v49 = a6;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v48 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = &v43[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v46 = *(void *)(v14 - 8);
  uint64_t v47 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = &v43[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v45 = a1;
  if (a2)
  {
    uint64_t v17 = swift_errorRetain(a2);
    unsigned int v44 = static os_log_type_t.error.getter(v17);
    uint64_t v18 = sub_100005394(&qword_100079660);
    uint64_t v19 = swift_allocObject(v18, 112LL, 7LL);
    *(_OWORD *)(v19 + swift_weakDestroy(v0 + 16) = xmmword_10005B320;
    *(void *)(v19 + 56) = &type metadata for String;
    uint64_t v20 = v16;
    id v21 = v13;
    uint64_t v22 = v11;
    uint64_t v23 = a3;
    uint64_t v24 = a4;
    unint64_t v25 = sub_100005854();
    *(void *)(v19 + 64) = v25;
    *(void *)(v19 + 3sub_100007A28(v0 + 2) = 0xD000000000000023LL;
    *(void *)(v19 + 40) = 0x8000000100056960LL;
    swift_getErrorValue(a2, v51, v50);
    uint64_t v26 = Error.localizedDescription.getter(v50[1], v50[2]);
    *(void *)(v19 + 96) = &type metadata for String;
    *(void *)(v19 + 104) = v25;
    a4 = v24;
    a3 = v23;
    uint64_t v11 = v22;
    uint64_t v13 = v21;
    uint64_t v16 = v20;
    *(void *)(v19 + 7sub_100007A28(v0 + 2) = v26;
    *(void *)(v19 + 80) = v27;
    uint64_t v28 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v29 = (void *)static OS_os_log.default.getter(v28);
    os_log(_:dso:log:type:_:)("Error during device scan %@", 27LL, 2LL, &_mh_execute_header, v29, v44, v19);
    swift_bridgeObjectRelease(v19);

    swift_errorRelease(a2);
  }

  else
  {
    uint64_t v30 = sub_100005394(&qword_100079660);
    uint64_t v31 = swift_allocObject(v30, 112LL, 7LL);
    *(_OWORD *)(v31 + swift_weakDestroy(v0 + 16) = xmmword_10005B320;
    *(void *)(v31 + 56) = &type metadata for String;
    *(void *)(v31 + 64) = sub_100005854();
    *(void *)(v31 + 3sub_100007A28(v0 + 2) = 0xD000000000000023LL;
    *(void *)(v31 + 40) = 0x8000000100056960LL;
    *(void *)(v31 + 96) = sub_100005394(&qword_100077660);
    *(void *)(v31 + 104) = sub_10001A008( &qword_100077668,  &qword_100077660,  (uint64_t)&protocol conformance descriptor for Set<A>);
    *(void *)(v31 + 7sub_100007A28(v0 + 2) = a1;
    sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v32 = swift_bridgeObjectRetain(a1);
    id v33 = (void *)static OS_os_log.default.getter(v32);
    uint64_t v34 = static os_log_type_t.default.getter(v33);
    os_log(_:dso:log:type:_:)("Completed device scan %@ %@", 27LL, 2LL, &_mh_execute_header, v33, v34, v31);
    swift_bridgeObjectRelease(v31);
  }

  uint64_t v35 = swift_allocObject(&unk_10006B290, 32LL, 7LL);
  *(void *)(v35 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v35 + 24) = a4;
  aBlock[4] = sub_100019BF0;
  uint64_t v54 = v35;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  void aBlock[3] = &unk_10006B2A8;
  uint64_t v36 = _Block_copy(aBlock);
  id v37 = a3;
  uint64_t v38 = swift_retain(a4);
  static DispatchQoS.unspecified.getter(v38);
  uint64_t v52 = _swiftEmptyArrayStorage;
  uint64_t v39 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v40 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v41 = sub_10001A008(&qword_100076D58, (uint64_t *)&unk_100078740, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v40, v41, v11, v39);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v16, v13, v36);
  _Block_release(v36);
  (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v13, v11);
  (*(void (**)(_BYTE *, uint64_t))(v46 + 8))(v16, v47);
  swift_release(v54);
  return a5(v45, a2);
}

uint64_t sub_100017CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1000381A8(a2);
  swift_endAccess(v5);
  return swift_release(v3);
}

uint64_t sub_100017D40(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v6;
  swift_endAccess(v5);
  return swift_release(v3);
}

uint64_t sub_100017DAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v24 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v23[1] = *(void *)(v3 + OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession_concurrentQueue);
  uint64_t v14 = swift_allocObject(&unk_10006AFE8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v14 + 16, v3);
  uint64_t v15 = (void *)swift_allocObject(&unk_10006B150, 48LL, 7LL);
  uint64_t v15[2] = v14;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = a3;
  aBlock[4] = sub_100018F04;
  uint64_t v27 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  void aBlock[3] = &unk_10006B168;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain(v14);
  swift_bridgeObjectRetain(a1);
  uint64_t v17 = swift_retain(a3);
  static DispatchQoS.unspecified.getter(v17);
  unint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v19 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v20 = sub_10001A008(&qword_100076D58, (uint64_t *)&unk_100078740, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v19, v20, v7, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  id v21 = v27;
  swift_release(v14);
  return swift_release(v21);
}

uint64_t sub_100017FF0(uint64_t a1, void (*a2)(uint64_t), void *a3)
{
  uint64_t v6 = sub_100005394(&qword_100079660);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_10005B320;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_100005854();
  *(void *)(v7 + 3sub_100007A28(v0 + 2) = 0xD000000000000019LL;
  *(void *)(v7 + 40) = 0x8000000100056940LL;
  *(void *)(v7 + 96) = sub_100005394(&qword_100077648);
  *(void *)(v7 + 104) = sub_10001A008( &qword_100077650,  &qword_100077648,  (uint64_t)&protocol conformance descriptor for [A]);
  *(void *)(v7 + 7sub_100007A28(v0 + 2) = a1;
  sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v8 = swift_bridgeObjectRetain(a1);
  uint64_t v9 = (void *)static OS_os_log.default.getter(v8);
  uint64_t v10 = static os_log_type_t.default.getter(v9);
  os_log(_:dso:log:type:_:)("%@ %@", 5LL, 2LL, &_mh_execute_header, v9, v10, v7);
  swift_bridgeObjectRelease(v7);

  uint64_t v11 = (char *)sub_100013BF8();
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)&v11[direct field offset for SessionInfo.processName];
    uint64_t v14 = *(void *)&v11[direct field offset for SessionInfo.processName + 8];
    swift_bridgeObjectRetain(v14);

    uint64_t v15 = sub_1000138A8();
    sub_10003C0D8(a1, v13, v14, a2, a3);
    swift_bridgeObjectRelease(v14);
    return swift_release(v15);
  }

  else
  {
    unint64_t v17 = sub_100018DF4();
    uint64_t v18 = swift_allocError(&type metadata for ServerSession.ServerSessionError, v17, 0LL, 0LL);
    *uint64_t v19 = 2;
    ((void (*)(void))a2)();
    return swift_errorRelease(v18);
  }

uint64_t sub_100018260(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v25 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v24[1] = *(void *)(v3 + OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession_concurrentQueue);
  uint64_t v14 = swift_allocObject(&unk_10006AFE8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v14 + 16, v3);
  uint64_t v15 = (void *)swift_allocObject(&unk_10006B010, 48LL, 7LL);
  uint64_t v15[2] = v14;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = a3;
  aBlock[4] = sub_100018DD0;
  uint64_t v28 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  void aBlock[3] = &unk_10006B028;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain(v14);
  id v17 = a1;
  uint64_t v18 = swift_retain(a3);
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v20 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v21 = sub_10001A008(&qword_100076D58, (uint64_t *)&unk_100078740, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v20, v21, v7, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v22 = v28;
  swift_release(v14);
  return swift_release(v22);
}

void sub_1000184A0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = objc_autoreleasePoolPush();
  a1 += 16LL;
  swift_beginAccess(a1, v13, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    uint64_t v12 = (void *)Strong;
    a5(a2, a3, a4);
  }

  objc_autoreleasePoolPop(v10);
}

void sub_100018534(void *a1, void (*a2)(id, uint64_t), uint64_t a3)
{
  uint64_t v6 = sub_100005394(&qword_100079660);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_10005B320;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_100005854();
  *(void *)(v7 + 3sub_100007A28(v0 + 2) = 0xD00000000000001CLL;
  *(void *)(v7 + 40) = 0x80000001000568F0LL;
  *(void *)(v7 + 96) = type metadata accessor for SearchFilter(0LL);
  *(void *)(v7 + 104) = sub_1000078F8( &qword_100077638,  (uint64_t (*)(uint64_t))&type metadata accessor for SearchFilter,  (uint64_t)&protocol conformance descriptor for NSObject);
  *(void *)(v7 + 7sub_100007A28(v0 + 2) = a1;
  sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  id v8 = a1;
  uint64_t v9 = (void *)static OS_os_log.default.getter(v8);
  uint64_t v10 = static os_log_type_t.default.getter(v9);
  os_log(_:dso:log:type:_:)("%@ %@", 5LL, 2LL, &_mh_execute_header, v9, v10, v7);
  swift_bridgeObjectRelease(v7);

  uint64_t v11 = (char *)sub_100013BF8();
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)&v11[direct field offset for SessionInfo.processName];
    uint64_t v38 = *(void *)&v11[direct field offset for SessionInfo.processName + 8];
    swift_bridgeObjectRetain(v38);

    uint64_t v14 = sub_1000138A8();
    id v15 = objc_allocWithZone((Class)type metadata accessor for APSTokenProvider());
    id v37 = sub_100031BA8(0xD000000000000028LL, 0x8000000100056910LL);
    uint64_t v16 = a3;
    uint64_t v17 = sub_1000315BC();
    uint64_t v18 = (void *)swift_allocObject(&unk_10006B060, 64LL, 7LL);
    v18[2] = v14;
    v18[3] = v8;
    uint64_t v35 = v13;
    uint64_t v36 = (uint64_t)a2;
    v18[4] = v13;
    void v18[5] = v38;
    v18[6] = a2;
    v18[7] = v16;
    uint64_t v19 = swift_allocObject(&unk_10006B088, 32LL, 7LL);
    *(void *)(v19 + swift_weakDestroy(v0 + 16) = sub_100018E74;
    *(void *)(v19 + 24) = v18;
    uint64_t v45 = 0LL;
    uint64_t v46 = 0LL;
    uint64_t v44 = 0LL;
    char v43 = 0;
    queue = *(dispatch_queue_s **)(v17 + 56);
    uint64_t v20 = (void *)swift_allocObject(&unk_10006B0B0, 64LL, 7LL);
    v20[2] = &v45;
    v20[3] = v17;
    v20[4] = &v44;
    v20[5] = &v43;
    v20[6] = sub_100018EA8;
    v20[7] = v19;
    uint64_t v21 = swift_allocObject(&unk_10006B0D8, 32LL, 7LL);
    *(void *)(v21 + swift_weakDestroy(v0 + 16) = sub_100018EB4;
    *(void *)(v21 + 24) = v20;
    aBlock[4] = sub_1000078F0;
    uint64_t v42 = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_10003CE54;
    void aBlock[3] = &unk_10006B0F0;
    uint64_t v22 = _Block_copy(aBlock);
    uint64_t v23 = v42;
    id v24 = v8;
    swift_retain_n(v14, 2LL);
    swift_retain_n(v16, 2LL);
    swift_retain_n(v18, 2LL);
    uint64_t v25 = v24;
    swift_bridgeObjectRetain(v38);
    swift_retain(v17);
    swift_retain(v19);
    swift_retain(v21);
    swift_release(v23);
    dispatch_sync(queue, v22);
    _Block_release(v22);
    LOBYTE(v2sub_100007A28(v0 + 2) = swift_isEscapingClosureAtFileLocation(v21, "", 90LL, 149LL, 26LL, 1LL);
    swift_release(v21);
    if ((v22 & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      if (v43 == 1)
      {
        uint64_t v26 = v46;
        if (v46)
        {
          uint64_t v27 = v44;
          uint64_t v28 = v45;
          swift_errorRetain(v44);
          swift_bridgeObjectRetain(v26);
          sub_10003A260(v25, v35, v38, v28, v26, v36, v16);
          swift_errorRelease(v27);
          swift_bridgeObjectRelease(v26);
        }
      }

      uint64_t v29 = v44;
      swift_retain(v17);
      swift_errorRelease(v29);
      uint64_t v30 = v46;
      swift_release(v16);
      swift_bridgeObjectRelease(v38);

      swift_release(v14);
      swift_release_n(v18, 2LL);
      swift_release(v19);
      swift_release(v20);
      swift_bridgeObjectRelease(v30);
      swift_release(v14);

      swift_release_n(v17, 2LL);
    }
  }

  else
  {
    id v31 = objc_allocWithZone((Class)type metadata accessor for SearchResult(0LL));
    id v40 = (id)SearchResult.init(_:resultCode:)(0LL, 5LL);
    unint64_t v32 = sub_100018DF4();
    uint64_t v33 = swift_allocError(&type metadata for ServerSession.ServerSessionError, v32, 0LL, 0LL);
    *uint64_t v34 = 2;
    a2(v40, v33);
    swift_errorRelease(v33);
  }

uint64_t sub_100018A74(uint64_t a1, uint64_t a2, void (*a3)(char *))
{
  uint64_t v5 = sub_100005394(&qword_1000787D0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for ClientConfiguration(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000D1A4(a1, (uint64_t)v7, &qword_1000787D0);
  sub_100019EDC((uint64_t)v7, (uint64_t)v11, type metadata accessor for ClientConfiguration);
  a3(v11);
  return sub_100019DD8((uint64_t)v11, type metadata accessor for ClientConfiguration);
}

uint64_t sub_100018B94(uint64_t result, uint64_t a2, void (*a3)(uint64_t))
{
  if (a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = type metadata accessor for ClientConfiguration(0LL);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(v5, 1LL, v6);
    if ((_DWORD)result == 1)
    {
      swift_errorRetain(a2);
      a3(a2);
      return swift_errorRelease(a2);
    }
  }

  return result;
}

uint64_t sub_100018C14()
{
  uint64_t v1 = OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession_clientProxyInstance;
  uint64_t result = *(void *)(v0 + OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession_clientProxyInstance);
  if (!result)
  {
    uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession_connection);
    aBlock[4] = sub_100013724;
    void aBlock[5] = 0LL;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_100006800;
    void aBlock[3] = &unk_10006AF88;
    uint64_t v4 = _Block_copy(aBlock);
    id v5 = [v3 remoteObjectProxyWithErrorHandler:v4];
    _Block_release(v4);
    _bridgeAnyObjectToAny(_:)(aBlock, v5);
    swift_unknownObjectRelease(v5);
    uint64_t v6 = sub_100005394(&qword_100077630);
    if ((swift_dynamicCast(&v8, aBlock, (char *)&type metadata for Any + 8, v6, 6LL) & 1) != 0)
    {
      uint64_t v7 = *(void *)(v0 + v1);
      *(void *)(v0 + v1) = v8;
      swift_unknownObjectRelease(v7);
    }

    uint64_t result = *(void *)(v0 + v1);
    if (!result) {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_100018D24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100007A28(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100018D34(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100018D3C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100018D60(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100018D78()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100018D9C()
{
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_100018DD0()
{
}

unint64_t sub_100018DF4()
{
  unint64_t result = qword_100077640;
  if (!qword_100077640)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005C89C, &type metadata for ServerSession.ServerSessionError);
    atomic_store(result, (unint64_t *)&qword_100077640);
  }

  return result;
}

uint64_t sub_100018E38()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

char *sub_100018E74(uint64_t *a1)
{
  return sub_10003A260( *(void **)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *a1,  a1[1],  *(void *)(v1 + 48),  *(void *)(v1 + 56));
}

void *sub_100018EA8(void *a1, uint64_t a2)
{
  return sub_1000230C0(a1, a2, *(void (**)(void *))(v2 + 16));
}

uint64_t sub_100018EB8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100018EC8(uint64_t a1)
{
}

uint64_t sub_100018ED0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_100018F04()
{
}

id sub_100018F28(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v70 = a2;
  uint64_t v71 = a3;
  id v72 = a1;
  uint64_t v64 = type metadata accessor for URL(0LL);
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v73 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for ClientConfigurationCache(0LL);
  uint64_t v74 = *(void *)(v6 - 8);
  uint64_t v75 = v6;
  __chkstk_darwin(v6);
  uint64_t v61 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100005394(&qword_100077248);
  __chkstk_darwin(v8);
  uint64_t v62 = (uint64_t)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v77 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v69 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v68 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v11);
  id v67 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v13);
  id v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession_concurrentQueue;
  uint64_t v76 = sub_1000079C8(0LL, (unint64_t *)&qword_100078760, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v17 + 104))( v19,  enum case for DispatchQoS.QoSClass.default(_:),  v16);
  uint64_t v21 = v3;
  uint64_t v22 = static OS_dispatch_queue.global(qos:)(v19);
  uint64_t v23 = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  *(void *)&v4[v20] = v22;
  uint64_t v66 = OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession_voiceAssistantCacheQueue;
  static DispatchQoS.unspecified.getter(v23);
  *(void *)&__int128 v79 = _swiftEmptyArrayStorage;
  uint64_t v24 = sub_1000078F8( (unint64_t *)&qword_100076B38,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v65 = v24;
  uint64_t v25 = sub_100005394((uint64_t *)&unk_100078770);
  uint64_t v26 = sub_10001A008( (unint64_t *)&qword_100076B40,  (uint64_t *)&unk_100078770,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v27 = v67;
  uint64_t v28 = v11;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v25, v26, v11, v24);
  uint64_t v29 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  uint64_t v30 = v68;
  id v31 = *(void (**)(char *, uint64_t, void))(v69 + 104);
  v31(v68, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v77);
  uint64_t v32 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000018LL,  0x8000000100056DA0LL,  v15,  v27,  v30,  0LL);
  *(void *)&v21[v66] = v32;
  uint64_t v33 = _s20FMIPClientXPCService6FutureC4uuid33_40B9CAF5474C2AE132CCEC7BECE26906LL10Foundation4UUIDVvpfi_0();
  *(void *)&v21[OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession_clientProxyInstance] = 0LL;
  uint64_t v69 = OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession_activeScanSerialQueue;
  static DispatchQoS.unspecified.getter(v33);
  *(void *)&__int128 v79 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v25, v26, v28, v65);
  v31(v30, v29, v77);
  uint64_t v34 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001CLL,  0x8000000100056DC0LL,  v15,  v27,  v30,  0LL);
  *(void *)&v21[v69] = v34;
  *(void *)&v21[OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession_activeDeviceScans] = &_swiftEmptySetSingleton;
  uint64_t v35 = &v21[OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession_deviceInformationProvider];
  uint64_t v36 = v21;
  id v37 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  *((void *)v35 + 3) = sub_1000079C8(0LL, &qword_100077688, &OBJC_CLASS___FMSystemInfo_ptr);
  *((void *)v35 + 4) = &off_10006E240;
  *(void *)uint64_t v35 = v37;
  *(void *)&v21[OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession____lazy_storage___serverInteractionController] = 0LL;
  *(void *)&v21[OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession_sessionInfo] = 0LL;
  uint64_t v38 = sub_100005394(&qword_100079660);
  uint64_t v39 = swift_allocObject(v38, 72LL, 7LL);
  __int128 v77 = xmmword_10005B2C0;
  *(_OWORD *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B2C0;
  *(void *)(v39 + 56) = &type metadata for String;
  unint64_t v40 = sub_100005854();
  *(void *)(v39 + 64) = v40;
  uint64_t v41 = v71;
  *(void *)(v39 + 3sub_100007A28(v0 + 2) = v70;
  *(void *)(v39 + 40) = v41;
  uint64_t v42 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  char v43 = (void *)static OS_os_log.default.getter(v42);
  uint64_t v44 = static os_log_type_t.default.getter(v43);
  os_log(_:dso:log:type:_:)( "ServerSession: Init with connection for service %@",  50LL,  2LL,  &_mh_execute_header,  v43,  v44,  v39);
  swift_bridgeObjectRelease(v39);

  uint64_t v45 = swift_allocObject(v38, 72LL, 7LL);
  *(_OWORD *)(v45 + swift_unknownObjectWeakDestroy(v0 + 16) = v77;
  id v46 = v72;
  [v72 auditToken];
  type metadata accessor for audit_token_t(0LL);
  uint64_t v48 = String.init<A>(describing:)(&v79, v47);
  *(void *)(v45 + 56) = &type metadata for String;
  *(void *)(v45 + 64) = v40;
  *(void *)(v45 + 3sub_100007A28(v0 + 2) = v48;
  *(void *)(v45 + 40) = v49;
  uint64_t v50 = (void *)static OS_os_log.default.getter(v48);
  uint64_t v51 = static os_log_type_t.default.getter(v50);
  os_log(_:dso:log:type:_:)("auditToken: %@", 14LL, 2LL, &_mh_execute_header, v50, v51, v45);
  uint64_t v52 = v45;
  uint64_t v53 = v73;
  swift_bridgeObjectRelease(v52);

  *(void *)&v36[OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession_connection] = v46;
  id v54 = v46;
  sub_10002E194();
  uint64_t v55 = sub_100005394(&qword_100077690);
  unint64_t v56 = v61;
  (*(void (**)(char *, char *, uint64_t))(v63 + 32))(&v61[*(int *)(v55 + 44)], v53, v64);
  *unint64_t v56 = 0xD000000000000029LL;
  v56[1] = 0x8000000100056E60LL;
  uint64_t v57 = (uint64_t)v56;
  uint64_t v58 = v62;
  sub_100019EDC(v57, v62, type metadata accessor for ClientConfigurationCache);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v74 + 56))(v58, 0LL, 1LL, v75);
  sub_100019FC4( v58,  (uint64_t)&v36[OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession_clientConfigurationCache],  &qword_100077248);

  uint64_t v59 = (objc_class *)type metadata accessor for ServerSession(0LL);
  v78.receiver = v36;
  v78.super_class = v59;
  return objc_msgSendSuper2(&v78, "init");
}

uint64_t sub_1000196B4(uint64_t a1)
{
  uint64_t v2 = sub_100005394(&qword_100077670);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for ClientConfiguration(0LL);
  v17[3] = v5;
  v17[4] = &off_10006F828;
  uint64_t v6 = sub_10000CD88(v17);
  sub_100019D94(a1, (uint64_t)v6);
  sub_100007E2C((uint64_t)v17, (uint64_t)v15);
  double v7 = *(double *)sub_1000087E0(v15, v16);
  uint64_t v8 = *((unsigned __int8 *)sub_1000087E0(v15, v16) + 8);
  uint64_t v9 = *((unsigned __int8 *)sub_1000087E0(v15, v16) + 9);
  uint64_t v10 = (char *)sub_1000087E0(v15, v16) + *(int *)(v5 + 28);
  uint64_t v11 = *((unsigned __int8 *)sub_1000087E0(v15, v16) + *(int *)(v5 + 32));
  sub_10000D1A4((uint64_t)v10, (uint64_t)v4, &qword_100077670);
  id v12 = objc_allocWithZone((Class)type metadata accessor for ClientConfiguration(0LL));
  uint64_t v13 = ClientConfiguration.init(nearbyScanDuration:nearbyScanEnabled:nearbyScanWhileAuthenticated:deviceNameSyncInterval:deviceNameSyncEnabled:)( v8,  v9,  v4,  v11,  v7);
  sub_100007A28(v15);
  sub_100007A28(v17);
  return v13;
}

uint64_t sub_10001980C(uint64_t a1, void (**a2)(void, void, void))
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  double v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = swift_allocObject(&unk_10006B1A0, 24LL, 7LL);
  *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  _Block_copy(a2);
  sub_100013F08((uint64_t)aBlock);
  int v13 = *((unsigned __int8 *)sub_1000087E0(aBlock, (uint64_t)v36) + 8);
  sub_100007A28(aBlock);
  if (v13 == 1)
  {
    uint64_t v33 = *(void *)(a1 + OBJC_IVAR____TtC20FMIPClientXPCService13ServerSession_concurrentQueue);
    uint64_t v14 = swift_allocObject(&unk_10006AFE8, 24LL, 7LL);
    swift_unknownObjectWeakInit(v14 + 16, a1);
    id v15 = (void *)swift_allocObject(&unk_10006B1C8, 40LL, 7LL);
    uint64_t v15[2] = v14;
    void v15[3] = sub_100019B44;
    v15[4] = v12;
    id v37 = sub_100019B50;
    uint64_t v38 = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_10004DB74;
    uint64_t v36 = &unk_10006B1E0;
    uint64_t v16 = _Block_copy(aBlock);
    uint64_t v32 = v5;
    uint64_t v17 = v16;
    swift_retain(v14);
    uint64_t v18 = swift_retain(v12);
    static DispatchQoS.unspecified.getter(v18);
    uint64_t v34 = _swiftEmptyArrayStorage;
    uint64_t v19 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v31 = v8;
    uint64_t v20 = v19;
    uint64_t v21 = sub_100005394((uint64_t *)&unk_100078740);
    uint64_t v22 = sub_10001A008(&qword_100076D58, (uint64_t *)&unk_100078740, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v21, v22, v4, v20);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v7, v17);
    _Block_release(v17);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v31);
    uint64_t v23 = v38;
    swift_release(v12);
    swift_release(v14);
    uint64_t v24 = (uint64_t)v23;
  }

  else
  {
    unint64_t v25 = sub_100018DF4();
    uint64_t v26 = swift_allocError(&type metadata for ServerSession.ServerSessionError, v25, 0LL, 0LL);
    *uint64_t v27 = 3;
    type metadata accessor for DiscoveredDevice(0LL);
    sub_1000078F8( &qword_100077658,  (uint64_t (*)(uint64_t))&type metadata accessor for DiscoveredDevice,  (uint64_t)&protocol conformance descriptor for NSObject);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    uint64_t v29 = (void *)_convertErrorToNSError(_:)(v26);
    ((void (**)(void, Class, void *))a2)[2](a2, isa, v29);

    swift_errorRelease(v26);
    uint64_t v24 = v12;
  }

  return swift_release(v24);
}

void sub_100019B44(uint64_t a1, uint64_t a2)
{
}

void sub_100019B50()
{
}

uint64_t sub_100019B74()
{
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100019BA8(uint64_t a1, uint64_t a2)
{
  return sub_1000178B0( a1,  a2,  *(void **)(v2 + 16),  *(void *)(v2 + 24),  *(uint64_t (**)(uint64_t, uint64_t))(v2 + 32),  *(void *)(v2 + 40));
}

uint64_t sub_100019BB8()
{
  return sub_100017D40(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100019BC4()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100019BF0()
{
  return sub_100017CE0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100019BF8()
{
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100019C24()
{
  return sub_100017280(*(void *)(v0 + 16), *(void **)(v0 + 24), *(uint64_t (**)(void))(v0 + 32));
}

void sub_100019C30(uint64_t a1, uint64_t a2)
{
}

void sub_100019C3C()
{
}

uint64_t sub_100019C60()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100019C8C(uint64_t a1, uint64_t a2)
{
  return sub_1000160E8( a1,  a2,  *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16),  *(void *)(v2 + 24),  *(void **)(v2 + 32));
}

uint64_t sub_100019C98(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100005394(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100019CDC(uint64_t a1, uint64_t a2)
{
  return sub_1000168E8(a1, a2, *(void (**)(void, uint64_t))(v2 + 16));
}

uint64_t sub_100019CE4(void *a1, uint64_t a2)
{
  return sub_1000167C8(a1, a2, *(uint64_t (**)(void *, uint64_t))(v2 + 16));
}

uint64_t sub_100019CEC()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100019D20(uint64_t *a1)
{
  return sub_100016CC4(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100019D34()
{
  return sub_1000343AC( *(void **)(v0 + 16),  *(void *)(v0 + 24),  *(uint64_t **)(v0 + 32),  *(_BYTE **)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56));
}

uint64_t sub_100019D44()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100019D54()
{
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_100019D88()
{
}

uint64_t sub_100019D94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClientConfiguration(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100019DD8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_100019E14()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100019E38(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

void sub_100019E54(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100019E5C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100019E80(uint64_t a1)
{
  return sub_10004D4B4(a1, *(void (**)(char *, uint64_t))(v1 + 16));
}

uint64_t sub_100019E88(uint64_t a1, uint64_t a2)
{
  return sub_100018B94(a1, a2, *(void (**)(uint64_t))(v2 + 16));
}

uint64_t sub_100019E98()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100019EA8(uint64_t a1)
{
  return sub_10004D638(a1, *(void (**)(char *, void))(v1 + 16));
}

uint64_t sub_100019EB0(uint64_t a1, uint64_t a2)
{
  return sub_100018A74(a1, a2, *(void (**)(char *))(v2 + 16));
}

uint64_t sub_100019EBC()
{
  return sub_100034890( *(void *)(v0 + 16),  *(_BYTE **)(v0 + 24),  *(uint64_t **)(v0 + 32),  *(_BYTE **)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56));
}

uint64_t sub_100019ECC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100019EDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t *sub_100019F20(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t sub_100019F60()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100019F88()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100019FB4(void *a1)
{
}

void sub_100019FBC(void *a1, uint64_t a2)
{
}

uint64_t sub_100019FC4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100005394(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10001A008(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100005420(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for ServerSession.ServerSessionError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for ServerSession.ServerSessionError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10001A124 + 4 * byte_10005C7B5[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10001A158 + 4 * byte_10005C7B0[v4]))();
}

uint64_t sub_10001A158(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001A160(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10001A168LL);
  }
  return result;
}

uint64_t sub_10001A174(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10001A17CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10001A180(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001A188(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ServerSession.ServerSessionError()
{
  return &type metadata for ServerSession.ServerSessionError;
}

unint64_t sub_10001A1A8()
{
  unint64_t result = qword_100077698;
  if (!qword_100077698)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005C874, &type metadata for ServerSession.ServerSessionError);
    atomic_store(result, (unint64_t *)&qword_100077698);
  }

  return result;
}

uint64_t destroy for FMIPSearchRequestDevice(void *a1)
{
  return swift_bridgeObjectRelease(a1[11]);
}

void *initializeWithCopy for FMIPSearchRequestDevice(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

void *assignWithCopy for FMIPSearchRequestDevice(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[8] = a2[8];
  uint64_t v12 = a2[9];
  uint64_t v13 = a1[9];
  a1[9] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[10] = a2[10];
  uint64_t v14 = a2[11];
  uint64_t v15 = a1[11];
  a1[11] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

__n128 initializeWithTake for FMIPSearchRequestDevice(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 3sub_100007A28(v0 + 2) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

void *assignWithTake for FMIPSearchRequestDevice(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[6] = a2[6];
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a2[9];
  uint64_t v13 = a1[9];
  a1[8] = a2[8];
  a1[9] = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a2[11];
  uint64_t v15 = a1[11];
  a1[10] = a2[10];
  a1[11] = v14;
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPSearchRequestDevice(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPSearchRequestDevice( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0LL;
    *(_OWORD *)(result + 7sub_100007A28(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 96) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 96) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for FMIPSearchRequestDevice()
{
  return &type metadata for FMIPSearchRequestDevice;
}

Swift::Int sub_10001A5CC(char a1)
{
  unint64_t v2 = 0xD00000000000001CLL;
  Hasher.init(_seed:)(v5, 0LL);
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v3 = 0x8000000100055AB0LL;
    }
    else {
      unint64_t v3 = 0x8000000100055AD0LL;
    }
  }

  else
  {
    unint64_t v2 = 0xD000000000000014LL;
    unint64_t v3 = 0x8000000100055A90LL;
  }

  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_10001A66C(char a1)
{
  __asm { BR              X10 }

Swift::Int sub_10001A6C8()
{
  return Hasher._finalize()();
}

uint64_t sub_10001A784(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_100005394(&qword_1000776B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000087E0(a1, v9);
  unint64_t v11 = sub_10001B080();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for FMIPSearchRequestDevice.CodingKeys,  &type metadata for FMIPSearchRequestDevice.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = v3[8];
  uint64_t v13 = v3[9];
  char v31 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v31, v5);
  if (!v2)
  {
    uint64_t v14 = v3[10];
    uint64_t v15 = v3[11];
    char v30 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v30, v5);
    uint64_t v16 = *v3;
    uint64_t v17 = v3[1];
    char v29 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v29, v5);
    uint64_t v18 = v3[2];
    uint64_t v19 = v3[3];
    char v28 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v28, v5);
    uint64_t v20 = v3[4];
    uint64_t v21 = v3[5];
    char v27 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v27, v5);
    uint64_t v22 = v3[6];
    uint64_t v23 = v3[7];
    char v26 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v26, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_10001A938(char *a1)
{
}

void sub_10001A944()
{
}

void sub_10001A94C(uint64_t a1)
{
}

void sub_10001A954(uint64_t a1)
{
}

unint64_t sub_10001A95C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10001AC38(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10001A988()
{
  return ((uint64_t (*)(void))((char *)sub_10001A9C4 + 4 * byte_10005C8E6[*v0]))();
}

void sub_10001A9C4(void *a1@<X8>)
{
  *a1 = 0x49534472656E776FLL;
  a1[1] = 0xE900000000000044LL;
}

void sub_10001A9E4(void *a1@<X8>)
{
  *a1 = 0x614E656369766564LL;
  a1[1] = 0xEA0000000000656DLL;
}

void sub_10001AA04(void *a1@<X8>)
{
  *a1 = 0x6C43656369766564LL;
  a1[1] = 0xEB00000000737361LL;
}

void sub_10001AA28(void *a1@<X8>)
{
  *a1 = 0xD000000000000012LL;
  a1[1] = 0x8000000100055B60LL;
}

void sub_10001AA48(void *a1@<X8>)
{
  *a1 = 0x54746375646F7270LL;
  a1[1] = 0xEB00000000657079LL;
}

uint64_t sub_10001AA6C()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10001AAA8 + 4 * byte_10005C8EC[*v0]))( 0x6D614E72656E776FLL,  0xE900000000000065LL);
}

uint64_t sub_10001AAA8()
{
  return 0x49534472656E776FLL;
}

uint64_t sub_10001AAC4()
{
  return 0x614E656369766564LL;
}

uint64_t sub_10001AAE0()
{
  return 0x6C43656369766564LL;
}

unint64_t sub_10001AB00()
{
  return 0xD000000000000012LL;
}

uint64_t sub_10001AB1C()
{
  return 0x54746375646F7270LL;
}

unint64_t sub_10001AB3C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10001AC38(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10001AB60(uint64_t a1)
{
  unint64_t v2 = sub_10001B080();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001AB88(uint64_t a1)
{
  unint64_t v2 = sub_10001B080();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10001ABB0@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    __int128 v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    double result = *(double *)v8;
    __int128 v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }

  return result;
}

uint64_t sub_10001ABF8(void *a1)
{
  return sub_10001A784(a1);
}

unint64_t sub_10001AC0C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100008848();
  unint64_t result = sub_1000088F4();
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_10001AC38(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000693F0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6) {
    return 6LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10001AC80@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100005394(&qword_1000776A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000087E0(a1, v9);
  unint64_t v11 = sub_10001B080();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for FMIPSearchRequestDevice.CodingKeys,  &type metadata for FMIPSearchRequestDevice.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100007A28(a1);
  }
  char v48 = 0;
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v48, v5);
  uint64_t v14 = v13;
  uint64_t v42 = v12;
  char v47 = 1;
  swift_bridgeObjectRetain(v13);
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v47, v5);
  uint64_t v17 = v16;
  uint64_t v41 = v15;
  char v46 = 2;
  swift_bridgeObjectRetain(v16);
  uint64_t v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v46, v5);
  uint64_t v40 = v17;
  char v45 = 3;
  uint64_t v19 = v18;
  swift_bridgeObjectRetain(v18);
  uint64_t v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v45, v5);
  uint64_t v38 = v19;
  char v44 = 4;
  uint64_t v21 = v20;
  swift_bridgeObjectRetain(v20);
  uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v44, v5);
  uint64_t v37 = v23;
  uint64_t v34 = v22;
  char v43 = 5;
  swift_bridgeObjectRetain(v23);
  uint64_t v35 = 0LL;
  uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v43, v5);
  uint64_t v26 = v25;
  char v27 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v35 = v24;
  v27(v8, v5);
  swift_bridgeObjectRetain(v26);
  sub_100007A28(a1);
  uint64_t v28 = v40;
  swift_bridgeObjectRelease(v40);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v26);
  uint64_t v29 = v37;
  swift_bridgeObjectRelease(v37);
  uint64_t v30 = v21;
  swift_bridgeObjectRelease(v21);
  uint64_t v31 = v38;
  uint64_t result = swift_bridgeObjectRelease(v38);
  *a2 = v39;
  a2[1] = v31;
  a2[2] = v36;
  a2[3] = v30;
  a2[4] = v34;
  a2[5] = v29;
  a2[6] = v35;
  a2[7] = v26;
  a2[8] = v42;
  a2[9] = v14;
  a2[10] = v41;
  a2[11] = v28;
  return result;
}

unint64_t sub_10001B080()
{
  unint64_t result = qword_1000776A8;
  if (!qword_1000776A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005CAA0, &type metadata for FMIPSearchRequestDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000776A8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPSearchRequestDevice.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10001B110 + 4 * byte_10005C8F7[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10001B144 + 4 * byte_10005C8F2[v4]))();
}

uint64_t sub_10001B144(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001B14C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10001B154LL);
  }
  return result;
}

uint64_t sub_10001B160(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10001B168LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_10001B16C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001B174(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPSearchRequestDevice.CodingKeys()
{
  return &type metadata for FMIPSearchRequestDevice.CodingKeys;
}

unint64_t sub_10001B194()
{
  unint64_t result = qword_1000776B8;
  if (!qword_1000776B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005CA78, &type metadata for FMIPSearchRequestDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000776B8);
  }

  return result;
}

unint64_t sub_10001B1DC()
{
  unint64_t result = qword_1000776C0;
  if (!qword_1000776C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005C9B0, &type metadata for FMIPSearchRequestDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000776C0);
  }

  return result;
}

unint64_t sub_10001B224()
{
  unint64_t result = qword_1000776C8;
  if (!qword_1000776C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005C9D8, &type metadata for FMIPSearchRequestDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000776C8);
  }

  return result;
}

uint64_t type metadata accessor for FMIPSiriBaseRequestContent()
{
  return objc_opt_self(&OBJC_CLASS____TtC20FMIPClientXPCService26FMIPSiriBaseRequestContent);
}

uint64_t sub_10001B288()
{
  uint64_t v1 = *v0;
  swift_beginAccess(*v0 + 24, v3, 0LL, 0LL);
  return swift_bridgeObjectRetain(*(void *)(v1 + 24));
}

uint64_t sub_10001B2C8(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_beginAccess(v3 + 24, v6, 1LL, 0LL);
  uint64_t v4 = *(void *)(v3 + 24);
  *(void *)(v3 + 24) = a1;
  return swift_bridgeObjectRelease(v4);
}

void *sub_10001B310(uint64_t a1)
{
  return &j__swift_endAccess;
}

uint64_t sub_10001B354()
{
  uint64_t v1 = *v0;
  swift_beginAccess(*v0 + 16, v3, 0LL, 0LL);
  return swift_bridgeObjectRetain(*(void *)(v1 + 16));
}

uint64_t sub_10001B394(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_beginAccess(v3 + 16, v6, 1LL, 0LL);
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  return swift_bridgeObjectRelease(v4);
}

void *sub_10001B3DC(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

Swift::Int sub_10001B41C()
{
  return Hasher._finalize()();
}

uint64_t sub_10001B470(uint64_t a1)
{
  return String.hash(into:)(a1, 0x6567412D72657355LL, 0xEA0000000000746ELL);
}

Swift::Int sub_10001B48C(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10001B4DC@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000694A0, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_10001B52C(void *a1@<X8>)
{
  *a1 = 0x6567412D72657355LL;
  a1[1] = 0xEA0000000000746ELL;
}

uint64_t sub_10001B54C()
{
  return 0x6567412D72657355LL;
}

uint64_t sub_10001B568@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000694D8, v3);
  uint64_t result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_10001B5BC(uint64_t a1)
{
  unint64_t v2 = sub_10001BB88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001B5E4(uint64_t a1)
{
  unint64_t v2 = sub_10001BB88();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001B60C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100005394(&qword_1000777B8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000087E0(a1, v9);
  unint64_t v11 = sub_10001BB88();
  uint64_t v12 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for UserAgentHeader.CodingKeys,  &type metadata for UserAgentHeader.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100007A28(a1);
  }
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  uint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_100007A28(a1);
  *a2 = v13;
  a2[1] = v15;
  return result;
}

uint64_t sub_10001B730(void *a1)
{
  uint64_t v3 = sub_100005394(&qword_1000777C8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  uint64_t v8 = v1[1];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000087E0(a1, v9);
  unint64_t v11 = sub_10001BB88();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for UserAgentHeader.CodingKeys,  &type metadata for UserAgentHeader.CodingKeys,  v11,  v9,  v10);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, v12, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10001B81C(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  sub_1000087E0(a1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  if (v5)
  {
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    uint64_t v8 = a1[3];
    uint64_t v9 = a1[4];
    sub_1000087E0(a1, v8);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
    if (v11)
    {
      uint64_t v12 = v10;
      uint64_t v13 = v11;
      _StringGuts.grow(_:)(23LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      v14._countAndFlagsBits = v6;
      v14._object = v7;
      String.append(_:)(v14);
      swift_bridgeObjectRelease(v7);
      v15._countAndFlagsBits = 47LL;
      v15._object = (void *)0xE100000000000000LL;
      String.append(_:)(v15);
      v16._countAndFlagsBits = v12;
      v16._object = v13;
      String.append(_:)(v16);
      swift_bridgeObjectRelease(v13);
      return 0xD000000000000012LL;
    }

    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000002FLL,  0x8000000100057160LL,  "FMIPClientXPCService/FMIPSiriBaseRequestContent.swift",  53LL,  2LL,  41LL,  0);
  }

  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000032LL,  0x8000000100057120LL,  "FMIPClientXPCService/FMIPSiriBaseRequestContent.swift",  53LL,  2LL,  38LL,  0);
  }

  __break(1u);
  return result;
}

void *initializeBufferWithCopyOfBuffer for UserAgentHeader(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for UserAgentHeader(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *assignWithCopy for UserAgentHeader(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

void *assignWithTake for UserAgentHeader(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for UserAgentHeader(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vsub_100007A28(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UserAgentHeader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for UserAgentHeader()
{
  return &type metadata for UserAgentHeader;
}

unint64_t sub_10001BAD4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10001BB00();
  unint64_t result = sub_10001BB44();
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_10001BB00()
{
  unint64_t result = qword_1000777A8;
  if (!qword_1000777A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005CB94, &type metadata for UserAgentHeader);
    atomic_store(result, (unint64_t *)&qword_1000777A8);
  }

  return result;
}

unint64_t sub_10001BB44()
{
  unint64_t result = qword_1000777B0;
  if (!qword_1000777B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005CB6C, &type metadata for UserAgentHeader);
    atomic_store(result, (unint64_t *)&qword_1000777B0);
  }

  return result;
}

unint64_t sub_10001BB88()
{
  unint64_t result = qword_1000777C0;
  if (!qword_1000777C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005CCD4, &type metadata for UserAgentHeader.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000777C0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for UserAgentHeader.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10001BC0C + 4 * byte_10005CAF0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10001BC2C + 4 * byte_10005CAF5[v4]))();
  }
}

_BYTE *sub_10001BC0C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10001BC2C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10001BC34(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10001BC3C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10001BC44(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10001BC4C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for UserAgentHeader.CodingKeys()
{
  return &type metadata for UserAgentHeader.CodingKeys;
}

unint64_t sub_10001BC6C()
{
  unint64_t result = qword_1000777D0;
  if (!qword_1000777D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005CCAC, &type metadata for UserAgentHeader.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000777D0);
  }

  return result;
}

unint64_t sub_10001BCB4()
{
  unint64_t result = qword_1000777D8;
  if (!qword_1000777D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005CBE4, &type metadata for UserAgentHeader.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000777D8);
  }

  return result;
}

unint64_t sub_10001BCFC()
{
  unint64_t result = qword_1000777E0;
  if (!qword_1000777E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005CC0C, &type metadata for UserAgentHeader.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000777E0);
  }

  return result;
}

uint64_t sub_10001BD48(uint64_t a1)
{
  uint64_t v39 = a1;
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v34 = *(void *)(v3 - 8);
  uint64_t v35 = v3;
  __chkstk_darwin(v3);
  uint64_t v38 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v5 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = sub_1000079C8(0LL, (unint64_t *)&qword_100078760, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v36);
  uint64_t v41 = &_swiftEmptyArrayStorage;
  uint64_t v14 = sub_1000078F8( (unint64_t *)&qword_100076B38,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v15 = sub_100005394((uint64_t *)&unk_100078770);
  uint64_t v16 = sub_10001A008( (unint64_t *)&qword_100076B40,  (uint64_t *)&unk_100078770,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v15, v16, v8, v14);
  uint64_t v17 = *(void (**)(char *, void, uint64_t))(v5 + 104);
  uint64_t v18 = v38;
  v17(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v37);
  uint64_t v19 = v7;
  uint64_t v20 = v39;
  uint64_t v21 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001CLL,  0x80000001000575D0LL,  v13,  v10,  v19,  0LL);
  *(_OWORD *)(v2 + 3sub_100007A28(v0 + 2) = 0u;
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v21;
  *(_OWORD *)(v2 + 48) = 0u;
  *(void *)(v2 + 64) = 0LL;
  uint64_t v22 = v2 + OBJC_IVAR____TtC20FMIPClientXPCService23VoiceAssistantSyncCache_cacheValidity;
  uint64_t v23 = type metadata accessor for DateComponents(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v22, 1LL, 1LL, v23);
  *(void *)(v2 + 24) = v20;
  swift_unknownObjectRetain(v20);
  uint64_t v24 = v40;
  sub_10002E194();
  if (v24)
  {
    swift_unknownObjectRelease(v20);

    swift_unknownObjectRelease(*(void *)(v2 + 24));
    sub_10000D20C(v2 + 32, &qword_100077250);
    sub_10000D20C(v2 + OBJC_IVAR____TtC20FMIPClientXPCService23VoiceAssistantSyncCache_cacheValidity, &qword_100077670);
    uint64_t v25 = type metadata accessor for VoiceAssistantSyncCache(0LL);
    swift_deallocPartialClassInstance( v2,  v25,  *(unsigned int *)(*(void *)v2 + 48LL),  *(unsigned __int16 *)(*(void *)v2 + 52LL));
  }

  else
  {
    uint64_t v26 = (char *)(v2 + OBJC_IVAR____TtC20FMIPClientXPCService23VoiceAssistantSyncCache_devicesDiskCache);
    uint64_t v27 = sub_100005394(&qword_100077C38);
    uint64_t v29 = v34;
    uint64_t v28 = v35;
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(&v26[*(int *)(v27 + 44)], v18, v35);
    *(void *)uint64_t v26 = 0xD000000000000028LL;
    *((void *)v26 + 1) = 0x8000000100056910LL;
    swift_unknownObjectRelease(v20);
    uint64_t v30 = (char *)(v2 + OBJC_IVAR____TtC20FMIPClientXPCService23VoiceAssistantSyncCache_invalidationDiskCache);
    uint64_t v31 = sub_100005394(&qword_100077BF8);
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(&v30[*(int *)(v31 + 44)], v18, v28);
    *(void *)uint64_t v30 = 0xD000000000000035LL;
    *((void *)v30 + 1) = 0x80000001000575F0LL;
  }

  return v2;
}

uint64_t sub_10001C0D0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10001C678(a2);
  if (v2)
  {
    if (qword_100076AF8 != -1) {
      uint64_t result = swift_once(&qword_100076AF8, sub_100009A7C);
    }
    uint64_t v4 = qword_1000798C0;
    uint64_t v5 = static os_log_type_t.error.getter(result);
    uint64_t v6 = os_log(_:dso:log:type:_:)( "Failed to save sync data to disk.",  33LL,  2LL,  &_mh_execute_header,  v4,  v5,  &_swiftEmptyArrayStorage);
    return swift_willThrow(v6);
  }

  return result;
}

uint64_t sub_10001C174(uint64_t a1)
{
  uint64_t v57 = a1;
  uint64_t v2 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v53 = *(void *)(v2 - 8);
  uint64_t v54 = v2;
  __chkstk_darwin(v2);
  uint64_t v55 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = sub_100005394(&qword_100077C60);
  __chkstk_darwin(v58);
  uint64_t v56 = (uint64_t)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100005394(&qword_100077BE8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v49 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v49 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v49 - v19;
  uint64_t v21 = sub_100005394(&qword_100077690);
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v22(v18, &v1[*(int *)(v21 + 44)], v8);
  URL.appendingPathComponent(_:isDirectory:)(*(void *)v1, *((void *)v1 + 1), 0LL);
  URL.appendingPathExtension(_:)(0x7473696C70LL, 0xE500000000000000LL);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v15, v8);
  v23(v18, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0LL, 1LL, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8) == 1)
  {
    uint64_t v24 = sub_10000D20C((uint64_t)v7, &qword_100077BE8);
    uint64_t v25 = static os_log_type_t.error.getter(v24);
    sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v26 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)( "Failed to generate preferences url.",  35LL,  2LL,  &_mh_execute_header,  v26,  v25,  &_swiftEmptyArrayStorage);

    uint64_t v27 = sub_100005394(&qword_100077C68);
    uint64_t v28 = sub_10001A008(&qword_100077C70, &qword_100077C68, (uint64_t)&unk_10005F600);
    swift_allocError(v27, v28, 0LL, 0LL);
    *uint64_t v29 = 1;
    return swift_willThrow();
  }

  else
  {
    uint64_t v50 = v22;
    uint64_t v51 = v12;
    uint64_t v52 = (uint64_t (*)(char *, uint64_t))v23;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v20, v7, v8);
    uint64_t v31 = v56;
    sub_100021174(v57, v56, type metadata accessor for ClientConfiguration);
    uint64_t v32 = type metadata accessor for PropertyListEncoder(0LL);
    swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    uint64_t v33 = PropertyListEncoder.init()();
    uint64_t v34 = sub_10001A008(&qword_100077C78, &qword_100077C60, (uint64_t)&unk_10005F5B0);
    uint64_t v35 = v59;
    uint64_t v36 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v31, v58, v34);
    uint64_t v38 = v20;
    if (v35)
    {
      sub_10000D20C(v31, &qword_100077C60);
      uint64_t v39 = swift_release(v33);
      uint64_t v46 = static os_log_type_t.error.getter(v39);
      sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
      char v47 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:type:_:)( "Failed to save data to disk.",  28LL,  2LL,  &_mh_execute_header,  v47,  v46,  &_swiftEmptyArrayStorage);

      swift_willThrow();
      return v52(v38, v8);
    }

    else
    {
      uint64_t v40 = v36;
      unint64_t v41 = v37;
      swift_release(v33);
      uint64_t v42 = Data.write(to:options:)(v20, 1073741825LL, v40, v41);
      char v43 = v55;
      URLResourceValues.init()(v42);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      char v44 = v51;
      v50(v51, v38, v8);
      URL.setResourceValues(_:)(v43);
      char v45 = v44;
      char v48 = v52;
      v52(v45, v8);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v43, v54);
      sub_10000AADC(v40, v41);
      sub_10000D20C(v31, &qword_100077C60);
      return v48(v38, v8);
    }
  }

uint64_t sub_10001C678(uint64_t a1)
{
  uint64_t v59 = a1;
  uint64_t v2 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v55 = *(void *)(v2 - 8);
  uint64_t v56 = v2;
  __chkstk_darwin(v2);
  uint64_t v57 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = sub_100005394(&qword_100077C28);
  __chkstk_darwin(v60);
  uint64_t v58 = (uint64_t)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100005394(&qword_100077BE8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v51 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v51 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v51 - v19;
  uint64_t v21 = sub_100005394(&qword_100077C38);
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v22(v18, &v1[*(int *)(v21 + 44)], v8);
  URL.appendingPathComponent(_:isDirectory:)(*(void *)v1, *((void *)v1 + 1), 0LL);
  URL.appendingPathExtension(_:)(0x7473696C70LL, 0xE500000000000000LL);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v15, v8);
  v23(v18, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0LL, 1LL, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8) == 1)
  {
    uint64_t v24 = sub_10000D20C((uint64_t)v7, &qword_100077BE8);
    uint64_t v25 = static os_log_type_t.error.getter(v24);
    uint64_t v26 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v27 = (void *)static OS_os_log.default.getter(v26);
    os_log(_:dso:log:type:_:)( "Failed to generate preferences url.",  35LL,  2LL,  &_mh_execute_header,  v27,  v25,  &_swiftEmptyArrayStorage);

    uint64_t v28 = sub_100005394(&qword_100077C40);
    uint64_t v29 = sub_10001A008(&qword_100077C48, &qword_100077C40, (uint64_t)&unk_10005F600);
    swift_allocError(v28, v29, 0LL, 0LL);
    *uint64_t v30 = 1;
    return swift_willThrow();
  }

  else
  {
    uint64_t v52 = v22;
    uint64_t v53 = v12;
    uint64_t v54 = (uint64_t (*)(char *, uint64_t))v23;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v20, v7, v8);
    uint64_t v32 = v58;
    sub_100021174(v59, v58, type metadata accessor for VoiceAssistantSyncInfo);
    uint64_t v33 = type metadata accessor for PropertyListEncoder(0LL);
    swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
    uint64_t v34 = PropertyListEncoder.init()();
    uint64_t v35 = sub_10001A008(&qword_100077C80, &qword_100077C28, (uint64_t)&unk_10005F5B0);
    uint64_t v36 = v61;
    uint64_t v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v32, v60, v35);
    uint64_t v39 = v20;
    if (v36)
    {
      sub_10000D20C(v32, &qword_100077C28);
      uint64_t v40 = swift_release(v34);
      uint64_t v47 = static os_log_type_t.error.getter(v40);
      uint64_t v48 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
      uint64_t v49 = (void *)static OS_os_log.default.getter(v48);
      os_log(_:dso:log:type:_:)( "Failed to save data to disk.",  28LL,  2LL,  &_mh_execute_header,  v49,  v47,  &_swiftEmptyArrayStorage);

      swift_willThrow();
      return v54(v39, v8);
    }

    else
    {
      uint64_t v41 = v37;
      unint64_t v42 = v38;
      swift_release(v34);
      uint64_t v43 = Data.write(to:options:)(v20, 1073741825LL, v41, v42);
      char v44 = v57;
      URLResourceValues.init()(v43);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      char v45 = v53;
      v52(v53, v39, v8);
      URL.setResourceValues(_:)(v44);
      uint64_t v46 = v45;
      uint64_t v50 = v54;
      v54(v46, v8);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v44, v56);
      sub_10000AADC(v41, v42);
      sub_10000D20C(v32, &qword_100077C28);
      return v50(v39, v8);
    }
  }

uint64_t sub_10001CB7C(uint64_t a1)
{
  uint64_t v61 = a1;
  uint64_t v2 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v57 = *(void *)(v2 - 8);
  uint64_t v58 = v2;
  __chkstk_darwin(v2);
  uint64_t v59 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v62 = sub_100005394(&qword_100077BE0);
  __chkstk_darwin(v62);
  uint64_t v60 = (uint64_t)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100005394(&qword_100077BE8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v53 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v53 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v53 - v19;
  uint64_t v21 = sub_100005394(&qword_100077BF8);
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v22(v18, &v1[*(int *)(v21 + 44)], v8);
  URL.appendingPathComponent(_:isDirectory:)(*(void *)v1, *((void *)v1 + 1), 0LL);
  URL.appendingPathExtension(_:)(0x7473696C70LL, 0xE500000000000000LL);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v15, v8);
  v23(v18, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0LL, 1LL, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8) == 1)
  {
    uint64_t v24 = sub_10000D20C((uint64_t)v7, &qword_100077BE8);
    uint64_t v25 = static os_log_type_t.error.getter(v24);
    uint64_t v26 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v27 = (void *)static OS_os_log.default.getter(v26);
    os_log(_:dso:log:type:_:)( "Failed to generate preferences url.",  35LL,  2LL,  &_mh_execute_header,  v27,  v25,  &_swiftEmptyArrayStorage);

    uint64_t v28 = sub_100005394(&qword_100077C00);
    uint64_t v29 = sub_10001A008(&qword_100077C08, &qword_100077C00, (uint64_t)&unk_10005F600);
    uint64_t v30 = swift_allocError(v28, v29, 0LL, 0LL);
    *uint64_t v31 = 1;
    return swift_willThrow(v30);
  }

  else
  {
    uint64_t v54 = v22;
    uint64_t v55 = v12;
    uint64_t v56 = (uint64_t (*)(char *, uint64_t))v23;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v20, v7, v8);
    uint64_t v33 = v60;
    sub_100021174(v61, v60, type metadata accessor for CacheInvalidationMarker);
    uint64_t v34 = type metadata accessor for PropertyListEncoder(0LL);
    swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
    uint64_t v35 = PropertyListEncoder.init()();
    uint64_t v36 = sub_10001A008(&qword_100077C18, &qword_100077BE0, (uint64_t)&unk_10005F5B0);
    uint64_t v37 = v63;
    uint64_t v38 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v33, v62, v36);
    uint64_t v40 = v20;
    if (v37)
    {
      sub_10000D20C(v33, &qword_100077BE0);
      uint64_t v41 = swift_release(v35);
      uint64_t v48 = static os_log_type_t.error.getter(v41);
      uint64_t v49 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
      uint64_t v50 = (void *)static OS_os_log.default.getter(v49);
      os_log(_:dso:log:type:_:)( "Failed to save data to disk.",  28LL,  2LL,  &_mh_execute_header,  v50,  v48,  &_swiftEmptyArrayStorage);

      swift_willThrow(v51);
      return v56(v40, v8);
    }

    else
    {
      uint64_t v42 = v38;
      unint64_t v43 = v39;
      swift_release(v35);
      uint64_t v44 = Data.write(to:options:)(v20, 1073741825LL, v42, v43);
      char v45 = v59;
      URLResourceValues.init()(v44);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      uint64_t v46 = v55;
      v54(v55, v40, v8);
      URL.setResourceValues(_:)(v45);
      uint64_t v47 = v46;
      uint64_t v52 = v56;
      v56(v47, v8);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v45, v58);
      sub_10000AADC(v42, v43);
      sub_10000D20C(v33, &qword_100077BE0);
      return v52(v40, v8);
    }
  }

uint64_t sub_10001D080(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v23 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100076AF8 != -1) {
    uint64_t v11 = swift_once(&qword_100076AF8, sub_100009A7C);
  }
  uint64_t v14 = qword_1000798C0;
  uint64_t v15 = static os_log_type_t.default.getter(v11);
  os_log(_:dso:log:type:_:)( "Retrieving sync device cache",  28LL,  2LL,  &_mh_execute_header,  v14,  v15,  &_swiftEmptyArrayStorage);
  uint64_t v16 = (void *)swift_allocObject(&unk_10006C168, 40LL, 7LL);
  void v16[2] = v3;
  v16[3] = a1;
  v16[4] = a2;
  aBlock[4] = sub_100023FA0;
  uint64_t v26 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  void aBlock[3] = &unk_10006C180;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain(v3);
  uint64_t v18 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v24 = &_swiftEmptyArrayStorage;
  uint64_t v19 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v20 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v21 = sub_10001A008(&qword_100076D58, (uint64_t *)&unk_100078740, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v20, v21, v6, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v8, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return swift_release(v26);
}

uint64_t sub_10001D2DC(uint64_t a1, void (*a2)(void, void), uint64_t a3)
{
  uint64_t v6 = sub_100005394(&qword_100077678);
  __chkstk_darwin(v6);
  uint64_t v7 = sub_100005394(&qword_100077C20);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v23 - v11;
  uint64_t v13 = sub_10001DC38();
  uint64_t v14 = (void *)swift_allocObject(&unk_10006C1B8, 40LL, 7LL);
  uint64_t v24 = a2;
  v14[2] = a2;
  void v14[3] = a3;
  v14[4] = a1;
  uint64_t v15 = type metadata accessor for VoiceAssistantSyncInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v12, 1LL, 1LL, v15);
  uint64_t v29 = 0LL;
  char v28 = 0;
  dispatch_queue_t v25 = *(dispatch_queue_t *)((char *)v13 + *(void *)(*(void *)v13 + 128LL));
  uint64_t v16 = (void *)swift_allocObject(&unk_10006C1E0, 64LL, 7LL);
  void v16[2] = v12;
  v16[3] = v13;
  v16[4] = &v29;
  v16[5] = &v28;
  v16[6] = sub_100023FD8;
  v16[7] = v14;
  uint64_t v17 = swift_allocObject(&unk_10006C208, 32LL, 7LL);
  *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100023FE8;
  *(void *)(v17 + 24) = v16;
  aBlock[4] = sub_100010FA0;
  uint64_t v27 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10003CE54;
  void aBlock[3] = &unk_10006C220;
  uint64_t v18 = _Block_copy(aBlock);
  uint64_t v19 = v27;
  swift_retain_n(a3, 2LL);
  swift_retain_n(a1, 2LL);
  swift_retain(v13);
  swift_retain(v14);
  swift_retain(v17);
  swift_release(v19);
  dispatch_sync(v25, v18);
  _Block_release(v18);
  LOBYTE(v18) = swift_isEscapingClosureAtFileLocation(v17, "", 90LL, 149LL, 26LL, 1LL);
  uint64_t result = swift_release(v17);
  if ((v18 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    if (v28 == 1)
    {
      sub_10000D1A4((uint64_t)v12, (uint64_t)v10, &qword_100077C20);
      uint64_t v21 = v29;
      swift_errorRetain(v29);
      sub_10001E730((uint64_t)v10, v21, v24, a3, a1);
      swift_errorRelease(v21);
      sub_10000D20C((uint64_t)v10, &qword_100077C20);
    }

    uint64_t v22 = v29;
    swift_retain(v13);
    swift_errorRelease(v22);
    sub_10000D20C((uint64_t)v12, &qword_100077C20);
    swift_release_n(v13, 2LL);
    swift_release(a1);
    swift_release(a3);
    swift_release(v14);
    return swift_release(v16);
  }

  return result;
}

_WORD *sub_10001D6BC()
{
  uint64_t v1 = sub_100005394(&qword_1000787D0);
  __chkstk_darwin(v1);
  uint64_t v52 = (uint64_t)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = sub_100005394(&qword_100077C60);
  __chkstk_darwin(v50);
  uint64_t v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100005394(&qword_100077BE8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v49 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v49 - v16;
  uint64_t v18 = sub_100005394(&qword_100077C88);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  uint64_t v53 = sub_100033164();
  uint64_t v19 = sub_100005394(&qword_100077690);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v15, &v0[*(int *)(v19 + 44)], v8);
  URL.appendingPathComponent(_:isDirectory:)(*(void *)v0, *((void *)v0 + 1), 0LL);
  URL.appendingPathExtension(_:)(0x7473696C70LL, 0xE500000000000000LL);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v12, v8);
  v20(v15, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0LL, 1LL, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8) == 1)
  {
    uint64_t v21 = sub_10000D20C((uint64_t)v7, &qword_100077BE8);
    uint64_t v22 = static os_log_type_t.error.getter(v21);
    sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v23 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)( "Failed to generate preferences url.",  35LL,  2LL,  &_mh_execute_header,  v23,  v22,  &_swiftEmptyArrayStorage);

    uint64_t v24 = sub_100005394(&qword_100077C68);
    uint64_t v25 = sub_10001A008(&qword_100077C70, &qword_100077C68, (uint64_t)&unk_10005F600);
    swift_allocError(v24, v25, 0LL, 0LL);
    *uint64_t v26 = 1;
    swift_willThrow();
    uint64_t v27 = v53;
    swift_release(v53);
  }

  else
  {
    char v28 = v53;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v17, v7, v8);
    uint64_t v49 = v17;
    uint64_t v29 = v51;
    uint64_t v30 = Data.init(contentsOf:options:)(v17, 0LL);
    if (v29)
    {
      uint64_t v27 = v28;
      uint64_t v37 = static os_log_type_t.debug.getter(v30);
      uint64_t v38 = sub_100005394(&qword_100079660);
      uint64_t v39 = swift_allocObject(v38, 72LL, 7LL);
      *(_OWORD *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B2C0;
      swift_getErrorValue(v29, v55, v54);
      uint64_t v40 = Error.localizedDescription.getter(v54[1], v54[2]);
      uint64_t v42 = v41;
      *(void *)(v39 + 56) = &type metadata for String;
      *(void *)(v39 + 64) = sub_100005854();
      *(void *)(v39 + 3sub_100007A28(v0 + 2) = v40;
      *(void *)(v39 + 40) = v42;
      sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
      unint64_t v43 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:type:_:)("Failed to read data from disk %@", 32LL, 2LL, &_mh_execute_header, v43, v37, v39);
      swift_bridgeObjectRelease(v39);

      uint64_t v44 = type metadata accessor for ClientConfiguration(0LL);
      uint64_t v45 = v52;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))(v52, 1LL, 1LL, v44);
      sub_100022B14(v45, v29);
      sub_10000D20C(v45, &qword_1000787D0);
      swift_errorRelease(v29);
    }

    else
    {
      uint64_t v32 = v30;
      unint64_t v33 = v31;
      uint64_t v34 = type metadata accessor for PropertyListDecoder(0LL);
      swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
      uint64_t v35 = PropertyListDecoder.init()();
      uint64_t v36 = sub_10001A008(&qword_100077C90, &qword_100077C60, (uint64_t)&unk_10005F5D8);
      unint64_t v51 = v33;
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v50, v32, v33, v50, v36);
      uint64_t v27 = v28;
      swift_release(v35);
      uint64_t v47 = v52;
      sub_100021174((uint64_t)v4, v52, type metadata accessor for ClientConfiguration);
      uint64_t v48 = type metadata accessor for ClientConfiguration(0LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56LL))(v47, 0LL, 1LL, v48);
      sub_100022B14(v47, 0LL);
      sub_10000D20C(v47, &qword_1000787D0);
      sub_10000AADC(v32, v51);
      sub_10000D20C((uint64_t)v4, &qword_100077C60);
    }

    v20(v49, v8);
  }

  return v27;
}

_WORD *sub_10001DC38()
{
  uint64_t v1 = sub_100005394(&qword_100077C20);
  __chkstk_darwin(v1);
  uint64_t v55 = (uint64_t)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = sub_100005394(&qword_100077C28);
  __chkstk_darwin(v53);
  uint64_t v4 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100005394(&qword_100077BE8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v52 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v52 - v16;
  uint64_t v18 = sub_100005394(&qword_100077C30);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  uint64_t v56 = sub_100033170();
  uint64_t v19 = sub_100005394(&qword_100077C38);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v15, &v0[*(int *)(v19 + 44)], v8);
  URL.appendingPathComponent(_:isDirectory:)(*(void *)v0, *((void *)v0 + 1), 0LL);
  URL.appendingPathExtension(_:)(0x7473696C70LL, 0xE500000000000000LL);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v12, v8);
  v20(v15, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0LL, 1LL, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8) == 1)
  {
    uint64_t v21 = sub_10000D20C((uint64_t)v7, &qword_100077BE8);
    uint64_t v22 = static os_log_type_t.error.getter(v21);
    uint64_t v23 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v24 = (void *)static OS_os_log.default.getter(v23);
    os_log(_:dso:log:type:_:)( "Failed to generate preferences url.",  35LL,  2LL,  &_mh_execute_header,  v24,  v22,  &_swiftEmptyArrayStorage);

    uint64_t v25 = sub_100005394(&qword_100077C40);
    uint64_t v26 = sub_10001A008(&qword_100077C48, &qword_100077C40, (uint64_t)&unk_10005F600);
    uint64_t v27 = swift_allocError(v25, v26, 0LL, 0LL);
    *char v28 = 1;
    swift_willThrow(v27);
    uint64_t v29 = v56;
    swift_release(v56);
  }

  else
  {
    uint64_t v30 = v56;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v17, v7, v8);
    uint64_t v52 = v17;
    uint64_t v31 = v54;
    uint64_t v32 = Data.init(contentsOf:options:)(v17, 0LL);
    if (v31)
    {
      uint64_t v29 = v30;
      uint64_t v39 = static os_log_type_t.debug.getter(v32);
      uint64_t v40 = sub_100005394(&qword_100079660);
      uint64_t v41 = swift_allocObject(v40, 72LL, 7LL);
      *(_OWORD *)(v41 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B2C0;
      swift_getErrorValue(v31, v58, v57);
      uint64_t v42 = Error.localizedDescription.getter(v57[1], v57[2]);
      uint64_t v44 = v43;
      *(void *)(v41 + 56) = &type metadata for String;
      *(void *)(v41 + 64) = sub_100005854();
      *(void *)(v41 + 3sub_100007A28(v0 + 2) = v42;
      *(void *)(v41 + 40) = v44;
      uint64_t v45 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
      uint64_t v46 = (void *)static OS_os_log.default.getter(v45);
      os_log(_:dso:log:type:_:)("Failed to read data from disk %@", 32LL, 2LL, &_mh_execute_header, v46, v39, v41);
      swift_bridgeObjectRelease(v41);

      uint64_t v47 = type metadata accessor for VoiceAssistantSyncInfo(0LL);
      uint64_t v48 = v55;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56LL))(v55, 1LL, 1LL, v47);
      sub_100022CF8(v48, v31);
      sub_10000D20C(v48, &qword_100077C20);
      swift_errorRelease(v31);
    }

    else
    {
      uint64_t v34 = v32;
      unint64_t v35 = v33;
      uint64_t v36 = type metadata accessor for PropertyListDecoder(0LL);
      swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
      uint64_t v37 = PropertyListDecoder.init()();
      uint64_t v38 = sub_10001A008(&qword_100077C50, &qword_100077C28, (uint64_t)&unk_10005F5D8);
      unint64_t v54 = v35;
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v53, v34, v35, v53, v38);
      uint64_t v29 = v30;
      swift_release(v37);
      uint64_t v50 = v55;
      sub_100021174((uint64_t)v4, v55, type metadata accessor for VoiceAssistantSyncInfo);
      uint64_t v51 = type metadata accessor for VoiceAssistantSyncInfo(0LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56LL))(v50, 0LL, 1LL, v51);
      sub_100022CF8(v50, 0LL);
      sub_10000D20C(v50, &qword_100077C20);
      sub_10000AADC(v34, v54);
      sub_10000D20C((uint64_t)v4, &qword_100077C28);
    }

    v20(v52, v8);
  }

  return v29;
}

_WORD *sub_10001E1B4()
{
  uint64_t v1 = sub_100005394((uint64_t *)&unk_1000787B0);
  __chkstk_darwin(v1);
  uint64_t v55 = (uint64_t)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = sub_100005394(&qword_100077BE0);
  __chkstk_darwin(v53);
  uint64_t v4 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100005394(&qword_100077BE8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v52 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v52 - v16;
  uint64_t v18 = sub_100005394(&qword_100077BF0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  uint64_t v56 = sub_1000333C4();
  uint64_t v19 = sub_100005394(&qword_100077BF8);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v15, &v0[*(int *)(v19 + 44)], v8);
  URL.appendingPathComponent(_:isDirectory:)(*(void *)v0, *((void *)v0 + 1), 0LL);
  URL.appendingPathExtension(_:)(0x7473696C70LL, 0xE500000000000000LL);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v12, v8);
  v20(v15, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0LL, 1LL, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8) == 1)
  {
    uint64_t v21 = sub_10000D20C((uint64_t)v7, &qword_100077BE8);
    uint64_t v22 = static os_log_type_t.error.getter(v21);
    uint64_t v23 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v24 = (void *)static OS_os_log.default.getter(v23);
    os_log(_:dso:log:type:_:)( "Failed to generate preferences url.",  35LL,  2LL,  &_mh_execute_header,  v24,  v22,  &_swiftEmptyArrayStorage);

    uint64_t v25 = sub_100005394(&qword_100077C00);
    uint64_t v26 = sub_10001A008(&qword_100077C08, &qword_100077C00, (uint64_t)&unk_10005F600);
    uint64_t v27 = swift_allocError(v25, v26, 0LL, 0LL);
    *char v28 = 1;
    swift_willThrow(v27);
    uint64_t v29 = v56;
    swift_release(v56);
  }

  else
  {
    uint64_t v30 = v56;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v17, v7, v8);
    uint64_t v52 = v17;
    uint64_t v31 = v54;
    uint64_t v32 = Data.init(contentsOf:options:)(v17, 0LL);
    if (v31)
    {
      uint64_t v29 = v30;
      uint64_t v39 = static os_log_type_t.debug.getter(v32);
      uint64_t v40 = sub_100005394(&qword_100079660);
      uint64_t v41 = swift_allocObject(v40, 72LL, 7LL);
      *(_OWORD *)(v41 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B2C0;
      swift_getErrorValue(v31, v58, v57);
      uint64_t v42 = Error.localizedDescription.getter(v57[1], v57[2]);
      uint64_t v44 = v43;
      *(void *)(v41 + 56) = &type metadata for String;
      *(void *)(v41 + 64) = sub_100005854();
      *(void *)(v41 + 3sub_100007A28(v0 + 2) = v42;
      *(void *)(v41 + 40) = v44;
      uint64_t v45 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
      uint64_t v46 = (void *)static OS_os_log.default.getter(v45);
      os_log(_:dso:log:type:_:)("Failed to read data from disk %@", 32LL, 2LL, &_mh_execute_header, v46, v39, v41);
      swift_bridgeObjectRelease(v41);

      uint64_t v47 = type metadata accessor for CacheInvalidationMarker(0LL);
      uint64_t v48 = v55;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56LL))(v55, 1LL, 1LL, v47);
      sub_100022EDC(v48, v31);
      sub_10000D20C(v48, (uint64_t *)&unk_1000787B0);
      swift_errorRelease(v31);
    }

    else
    {
      uint64_t v34 = v32;
      unint64_t v35 = v33;
      uint64_t v36 = type metadata accessor for PropertyListDecoder(0LL);
      swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
      uint64_t v37 = PropertyListDecoder.init()();
      uint64_t v38 = sub_10001A008(&qword_100077C10, &qword_100077BE0, (uint64_t)&unk_10005F5D8);
      unint64_t v54 = v35;
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v53, v34, v35, v53, v38);
      uint64_t v29 = v30;
      swift_release(v37);
      uint64_t v50 = v55;
      sub_100021174((uint64_t)v4, v55, type metadata accessor for CacheInvalidationMarker);
      uint64_t v51 = type metadata accessor for CacheInvalidationMarker(0LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56LL))(v50, 0LL, 1LL, v51);
      sub_100022EDC(v50, 0LL);
      sub_10000D20C(v50, (uint64_t *)&unk_1000787B0);
      sub_10000AADC(v34, v54);
      sub_10000D20C((uint64_t)v4, &qword_100077BE0);
    }

    v20(v52, v8);
  }

  return v29;
}

uint64_t sub_10001E730(uint64_t a1, uint64_t a2, void (*a3)(void, void), uint64_t a4, uint64_t a5)
{
  uint64_t v54 = a1;
  uint64_t v9 = sub_100005394(&qword_100077678);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for CachedVoiceAssistantSyncInfo(0LL);
  uint64_t v55 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v50 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100005394(&qword_100077C20);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for VoiceAssistantSyncInfo(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (uint64_t *)((char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (a2)
  {
    uint64_t v49 = a5;
    uint64_t v51 = v12;
    uint64_t v52 = a4;
    uint64_t v53 = a3;
    if (qword_100076AF8 != -1) {
      uint64_t v19 = swift_once(&qword_100076AF8, sub_100009A7C);
    }
    uint64_t v22 = qword_1000798C0;
    uint64_t v23 = static os_log_type_t.debug.getter(v19);
    uint64_t v24 = sub_100005394(&qword_100079660);
    uint64_t v25 = swift_allocObject(v24, 72LL, 7LL);
    *(_OWORD *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B2C0;
    uint64_t v56 = a2;
    swift_errorRetain(a2);
    uint64_t v26 = sub_100005394(&qword_100077BD8);
    uint64_t v27 = String.init<A>(describing:)(&v56, v26);
    uint64_t v29 = v28;
    *(void *)(v25 + 56) = &type metadata for String;
    *(void *)(v25 + 64) = sub_100005854();
    *(void *)(v25 + 3sub_100007A28(v0 + 2) = v27;
    *(void *)(v25 + 40) = v29;
    os_log(_:dso:log:type:_:)( "Could not find cached device names %@",  37LL,  2LL,  &_mh_execute_header,  v22,  v23,  v25,  v49);
    swift_bridgeObjectRelease(v25);
    a3 = v53;
    uint64_t v12 = v51;
  }

  sub_10000D1A4(v54, (uint64_t)v16, &qword_100077C20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17) == 1)
  {
    uint64_t v30 = sub_10000D20C((uint64_t)v16, &qword_100077C20);
    if (qword_100076AF8 != -1) {
      uint64_t v30 = swift_once(&qword_100076AF8, sub_100009A7C);
    }
    uint64_t v31 = qword_1000798C0;
    uint64_t v32 = static os_log_type_t.default.getter(v30);
    os_log(_:dso:log:type:_:)( "The device name sync cache was empty.",  37LL,  2LL,  &_mh_execute_header,  v31,  v32,  &_swiftEmptyArrayStorage);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v11, 1LL, 1LL, v12);
    a3(v11, 0LL);
    return sub_10000D20C((uint64_t)v11, &qword_100077678);
  }

  else
  {
    sub_100019EDC((uint64_t)v16, (uint64_t)v21, type metadata accessor for VoiceAssistantSyncInfo);
    uint64_t v34 = sub_10001EF04((uint64_t)v21);
    if ((v34 & 1) != 0)
    {
      if (qword_100076AF8 != -1) {
        uint64_t v34 = swift_once(&qword_100076AF8, sub_100009A7C);
      }
      uint64_t v35 = qword_1000798C0;
      uint64_t v36 = static os_log_type_t.default.getter(v34);
      os_log(_:dso:log:type:_:)( "The device name sync was valid.",  31LL,  2LL,  &_mh_execute_header,  v35,  v36,  &_swiftEmptyArrayStorage);
      uint64_t v37 = *v21;
      uint64_t v38 = (char *)v21 + *(int *)(v17 + 20);
      uint64_t v39 = v12;
      uint64_t v40 = v50;
      uint64_t v41 = &v50[*(int *)(v12 + 20)];
      uint64_t v42 = type metadata accessor for Date(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16LL))(v41, v38, v42);
      uint64_t v43 = (uint64_t *)((char *)v21 + *(int *)(v17 + 32));
      uint64_t v44 = *v43;
      uint64_t v45 = v43[1];
      *uint64_t v40 = v37;
      uint64_t v46 = (void *)((char *)v40 + *(int *)(v39 + 24));
      *uint64_t v46 = v44;
      v46[1] = v45;
      sub_100021174((uint64_t)v40, (uint64_t)v11, type metadata accessor for CachedVoiceAssistantSyncInfo);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v11, 0LL, 1LL, v39);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v45);
      a3(v11, 0LL);
      sub_10000D20C((uint64_t)v11, &qword_100077678);
      sub_100019DD8((uint64_t)v40, type metadata accessor for CachedVoiceAssistantSyncInfo);
    }

    else
    {
      if (qword_100076AF8 != -1) {
        uint64_t v34 = swift_once(&qword_100076AF8, sub_100009A7C);
      }
      uint64_t v47 = qword_1000798C0;
      uint64_t v48 = static os_log_type_t.default.getter(v34);
      os_log(_:dso:log:type:_:)( "The device name sync was invalid.",  33LL,  2LL,  &_mh_execute_header,  v47,  v48,  &_swiftEmptyArrayStorage);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v11, 1LL, 1LL, v12);
      a3(v11, 0LL);
      sub_10000D20C((uint64_t)v11, &qword_100077678);
    }

    return sub_100019DD8((uint64_t)v21, type metadata accessor for VoiceAssistantSyncInfo);
  }

uint64_t sub_10001EC28(uint64_t a1)
{
  if (qword_100076AF8 != -1) {
    a1 = swift_once(&qword_100076AF8, sub_100009A7C);
  }
  uint64_t v2 = qword_1000798C0;
  uint64_t v3 = static os_log_type_t.default.getter(a1);
  os_log(_:dso:log:type:_:)( "Invalidating sync device cache",  30LL,  2LL,  &_mh_execute_header,  v2,  v3,  &_swiftEmptyArrayStorage);
  uint64_t v4 = *(dispatch_queue_s **)(v1 + 16);
  uint64_t v5 = swift_allocObject(&unk_10006C118, 32LL, 7LL);
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100023F5C;
  *(void *)(v5 + 24) = v1;
  v9[4] = sub_100010FA0;
  uint64_t v10 = v5;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256LL;
  v9[2] = sub_10003CE54;
  void v9[3] = &unk_10006C130;
  uint64_t v6 = _Block_copy(v9);
  uint64_t v7 = v10;
  swift_retain(v1);
  swift_retain(v5);
  swift_release(v7);
  dispatch_sync(v4, v6);
  _Block_release(v6);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation(v5, "", 99LL, 94LL, 31LL, 1LL);
  swift_release(v1);
  uint64_t result = swift_release(v5);
  return result;
}

uint64_t sub_10001ED90()
{
  uint64_t v0 = type metadata accessor for CacheInvalidationMarker(0LL);
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Date.init()(v1);
  sub_10001CB7C((uint64_t)v3);
  return sub_100019DD8((uint64_t)v3, type metadata accessor for CacheInvalidationMarker);
}

uint64_t sub_10001EF04(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v133 = a1;
  uint64_t v115 = type metadata accessor for Calendar(0LL);
  uint64_t v114 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  v113 = (char *)&v107 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100005394(&qword_100077670);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DateComponents(0LL);
  uint64_t v123 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v107 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100005394(&qword_100077418);
  uint64_t v11 = __chkstk_darwin(v10);
  v112 = (char *)&v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v122 = (uint64_t)&v107 - v13;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v108 = (char *)&v107 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  dispatch_group_t v110 = (char *)&v107 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  v111 = (char *)&v107 - v21;
  __chkstk_darwin(v20);
  v132 = (char *)&v107 - v22;
  uint64_t v131 = type metadata accessor for DispatchTime(0LL);
  v120 = *(dispatch_group_s **)(v131 - 8);
  uint64_t v23 = __chkstk_darwin(v131);
  uint64_t v119 = (char *)&v107 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  v130 = (char *)&v107 - v25;
  uint64_t v26 = dispatch_group_create();
  uint64_t v27 = swift_allocBox(v10);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
  uint64_t v121 = v29;
  v28(v29, 1LL, 1LL, v14);
  dispatch_group_enter(v26);
  swift_retain(v27);
  uint64_t v30 = v26;
  sub_100023420(v2, v27, v30);

  uint64_t v125 = v27;
  swift_release(v27);
  uint64_t v31 = swift_allocObject(&unk_10006BE98, 32LL, 7LL);
  *(void *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  uint64_t v126 = v31 + 16;
  *(void *)(v31 + 24) = 0LL;
  swift_beginAccess(v2 + 32, v144, 0LL, 0LL);
  sub_10000D1A4(v2 + 32, (uint64_t)&aBlock, &qword_100077250);
  uint64_t v128 = v14;
  uint64_t v127 = v15;
  uint64_t v129 = v31;
  uint64_t v124 = v7;
  unsigned int v116 = v9;
  if (v141)
  {
    uint64_t v109 = v2;
    __int128 v117 = v6;
    sub_100007A00(&aBlock, (uint64_t)&v145);
    dispatch_group_enter(v30);
    uint64_t v32 = v146;
    uint64_t v33 = v147;
    sub_1000087E0(&v145, v146);
    uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v32, v33);
    uint64_t v35 = swift_allocObject(&unk_10006BF10, 32LL, 7LL);
    *(void *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = v31;
    *(void *)(v35 + 24) = v30;
    uint64_t v36 = v31;
    uint64_t v37 = swift_allocObject(&unk_10006BF38, 32LL, 7LL);
    *(void *)(v37 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100023DB8;
    *(void *)(v37 + 24) = v35;
    uint64_t v137 = 0LL;
    uint64_t v138 = 0LL;
    v136[0] = 0LL;
    char v135 = 0;
    uint64_t v118 = *(dispatch_queue_s **)(v34 + 56);
    uint64_t v38 = (void *)swift_allocObject(&unk_10006BF60, 64LL, 7LL);
    v38[2] = &v137;
    v38[3] = v34;
    v38[4] = v136;
    v38[5] = &v135;
    v38[6] = sub_100018EA8;
    v38[7] = v37;
    uint64_t v39 = swift_allocObject(&unk_10006BF88, 32LL, 7LL);
    *(void *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100019D34;
    *(void *)(v39 + 24) = v38;
    uint64_t v142 = sub_1000078F0;
    uint64_t v143 = v39;
    *(void *)&__int128 aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256LL;
    v140 = sub_10003CE54;
    v141 = &unk_10006BFA0;
    uint64_t v40 = _Block_copy(&aBlock);
    uint64_t v14 = v143;
    uint64_t v41 = v30;
    swift_retain_n(v36, 2LL);
    swift_retain_n(v35, 2LL);
    uint64_t v42 = v41;
    swift_retain(v34);
    swift_retain(v37);
    swift_retain(v39);
    swift_release(v14);
    dispatch_sync(v118, v40);
    _Block_release(v40);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v39, "", 90LL, 149LL, 26LL, 1LL);
    swift_release(v39);
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t v14 = v128;
      if (v135 != 1) {
        goto LABEL_7;
      }
      uint64_t isEscapingClosureAtFileLocation = v138;
      if (!v138) {
        goto LABEL_7;
      }
      uint64_t v118 = (dispatch_queue_s *)v42;
      uint64_t v39 = v136[0];
      uint64_t v44 = v137;
      swift_beginAccess(v126, v134, 1LL, 0LL);
      uint64_t v45 = v129;
      uint64_t v46 = *(void *)(v129 + 24);
      *(void *)(v129 + swift_unknownObjectWeakDestroy(v0 + 16) = v44;
      *(void *)(v45 + 24) = isEscapingClosureAtFileLocation;
      swift_bridgeObjectRetain_n(isEscapingClosureAtFileLocation, 2LL);
      swift_errorRetain(v39);
      uint64_t v47 = swift_bridgeObjectRelease(v46);
      if (qword_100076AF8 == -1)
      {
LABEL_6:
        uint64_t v48 = qword_1000798C0;
        uint64_t v49 = static os_log_type_t.default.getter(v47);
        os_log(_:dso:log:type:_:)( "Validating apsTokenProvider topicToken",  38LL,  2LL,  &_mh_execute_header,  v48,  v49,  &_swiftEmptyArrayStorage);
        uint64_t v42 = (dispatch_group_s *)v118;
        dispatch_group_leave((dispatch_group_t)v118);
        swift_errorRelease(v39);
        swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
LABEL_7:
        uint64_t v50 = v136[0];
        swift_retain(v34);
        swift_errorRelease(v50);
        uint64_t v51 = v138;
        swift_release_n(v34, 2LL);

        swift_release(v129);
        swift_release_n(v35, 2LL);
        swift_release(v37);
        swift_release(v38);
        swift_bridgeObjectRelease(v51);
        sub_100007A28(&v145);
        uint64_t v15 = v127;
        uint64_t v6 = v117;
        uint64_t v2 = v109;
        goto LABEL_9;
      }
    }

    uint64_t v47 = swift_once(&qword_100076AF8, sub_100009A7C);
    goto LABEL_6;
  }

  sub_10000D20C((uint64_t)&aBlock, &qword_100077250);
LABEL_9:
  uint64_t v52 = swift_allocObject(&unk_10006BE98, 32LL, 7LL);
  *(void *)(v52 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  __int128 v117 = (char *)(v52 + 16);
  *(void *)(v52 + 24) = 0LL;
  dispatch_group_enter(v30);
  uint64_t v53 = *(void **)(v2 + 24);
  uint64_t v54 = swift_allocObject(&unk_10006BEC0, 32LL, 7LL);
  *(void *)(v54 + swift_unknownObjectWeakDestroy(v0 + 16) = v52;
  *(void *)(v54 + 24) = v30;
  uint64_t v142 = sub_100023D94;
  uint64_t v143 = v54;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  v140 = sub_100013B84;
  v141 = &unk_10006BED8;
  uint64_t v55 = _Block_copy(&aBlock);
  uint64_t v56 = v143;
  uint64_t v57 = v30;
  uint64_t v118 = (dispatch_queue_s *)v52;
  swift_retain(v52);
  swift_release(v56);
  [v53 credentialWithCompletion:v55];
  _Block_release(v55);
  uint64_t v58 = v119;
  static DispatchTime.now()(v59);
  uint64_t v60 = v130;
  + infix(_:_:)(v58, 9.0);
  uint64_t v119 = (char *)*((void *)v120 + 1);
  ((void (*)(char *, uint64_t))v119)(v58, v131);
  v120 = v57;
  OS_dispatch_group.wait(timeout:)(v60);
  uint64_t v61 = (int *)type metadata accessor for VoiceAssistantSyncInfo(0LL);
  uint64_t v62 = v132;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v132, v133 + v61[5], v14);
  uint64_t v63 = v121;
  swift_beginAccess(v121, &aBlock, 0LL, 0LL);
  uint64_t v64 = v63;
  uint64_t v65 = v122;
  sub_10000D1A4(v64, v122, &qword_100077418);
  uint64_t v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v66(v65, 1LL, v14) == 1)
  {
    sub_10000D20C(v65, &qword_100077418);
    LODWORD(v12sub_100007A28(v0 + 2) = 1;
  }

  else
  {
    id v67 = v111;
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v111, v65, v14);
    LODWORD(v12sub_100007A28(v0 + 2) = static Date.> infix(_:_:)(v62, v67);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v67, v14);
  }

  uint64_t v68 = v124;
  uint64_t v69 = v2 + OBJC_IVAR____TtC20FMIPClientXPCService23VoiceAssistantSyncCache_cacheValidity;
  swift_beginAccess(v2 + OBJC_IVAR____TtC20FMIPClientXPCService23VoiceAssistantSyncCache_cacheValidity, &v145, 0LL, 0LL);
  sub_10000D1A4(v69, (uint64_t)v6, &qword_100077670);
  uint64_t v70 = v123;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v6, 1LL, v68) == 1)
  {
    uint64_t v71 = &qword_100077670;
LABEL_16:
    uint64_t v75 = sub_10000D20C((uint64_t)v6, v71);
LABEL_17:
    int v76 = 1;
    goto LABEL_18;
  }

  id v72 = v116;
  uint64_t v73 = (*(uint64_t (**)(char *, char *, uint64_t))(v70 + 32))(v116, v6, v68);
  uint64_t v74 = v113;
  static Calendar.current.getter(v73);
  uint64_t v6 = v112;
  Calendar.date(byAdding:to:wrappingComponents:)(v72, v62, 0LL);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v74, v115);
  if (v66((uint64_t)v6, 1LL, v14) == 1)
  {
    (*(void (**)(char *, uint64_t))(v70 + 8))(v72, v68);
    uint64_t v71 = &qword_100077418;
    goto LABEL_16;
  }

  v101 = v110;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v110, v6, v14);
  uint64_t v102 = static Date.> infix(_:_:)(v101, v62);
  if ((v102 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v101, v14);
    uint64_t v75 = (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v116, v68);
    goto LABEL_17;
  }

  v103 = v108;
  Date.init()(v102);
  int v76 = static Date.> infix(_:_:)(v101, v103);
  uint64_t v104 = v101;
  uint64_t v105 = v70;
  __int128 v106 = *(void (**)(char *, uint64_t))(v15 + 8);
  v106(v103, v14);
  v106(v104, v14);
  uint64_t v75 = (*(uint64_t (**)(char *, uint64_t))(v105 + 8))(v116, v68);
LABEL_18:
  __int128 v77 = v118;
  uint64_t v78 = v133;
  __int128 v79 = (uint64_t *)VoiceAssistantSyncResult.syncVersion.unsafeMutableAddressor(v75);
  uint64_t v81 = *v79;
  uint64_t v80 = (void *)v79[1];
  swift_bridgeObjectRetain(v80);
  v82._countAndFlagsBits = v81;
  v82._object = v80;
  Swift::Bool v83 = String.hasPrefix(_:)(v82);
  swift_bridgeObjectRelease(v80);
  __int128 v84 = (uint64_t *)(v78 + v61[6]);
  uint64_t v85 = *v84;
  uint64_t v86 = v84[1];
  swift_beginAccess(v117, &v137, 0LL, 0LL);
  uint64_t v87 = *((void *)v77 + 3);
  if (v87)
  {
    uint64_t v88 = *((void *)v77 + 2);
    uint64_t v89 = v129;
    if (v85 == v88 && v87 == v86) {
      int v90 = 1;
    }
    else {
      int v90 = _stringCompareWithSmolCheck(_:_:expecting:)(v85, v86, v88, v87, 0LL);
    }
  }

  else
  {
    int v90 = 0;
    uint64_t v89 = v129;
  }

  uint64_t v91 = (uint64_t *)(v133 + v61[7]);
  uint64_t v92 = *v91;
  uint64_t v93 = v91[1];
  swift_beginAccess(v126, v136, 0LL, 0LL);
  uint64_t v94 = *(void *)(v89 + 24);
  if (v94)
  {
    uint64_t v95 = *(void *)(v89 + 16);
    if (v92 == v95 && v94 == v93) {
      int v96 = 1;
    }
    else {
      int v96 = _stringCompareWithSmolCheck(_:_:expecting:)(v92, v93, v95, v94, 0LL);
    }
  }

  else
  {
    int v96 = 0;
  }

  if (qword_100076AF8 != -1) {
    swift_once(&qword_100076AF8, sub_100009A7C);
  }
  uint64_t v97 = sub_100005394(&qword_100079660);
  uint64_t v98 = swift_allocObject(v97, 232LL, 7LL);
  *(_OWORD *)(v98 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005CD30;
  *(void *)(v98 + 56) = &type metadata for Bool;
  *(void *)(v98 + 64) = &protocol witness table for Bool;
  int v99 = v122;
  *(_BYTE *)(v98 + 3sub_100007A28(v0 + 2) = v122 & 1;
  *(void *)(v98 + 96) = &type metadata for Bool;
  *(void *)(v98 + 104) = &protocol witness table for Bool;
  *(_BYTE *)(v98 + 7sub_100007A28(v0 + 2) = v90 & 1;
  *(void *)(v98 + 136) = &type metadata for Bool;
  *(void *)(v98 + 144) = &protocol witness table for Bool;
  *(_BYTE *)(v98 + 11sub_100007A28(v0 + 2) = v96 & 1;
  *(void *)(v98 + 176) = &type metadata for Bool;
  *(void *)(v98 + 184) = &protocol witness table for Bool;
  *(_BYTE *)(v98 + 15sub_100007A28(v0 + 2) = v76 & 1;
  *(void *)(v98 + 2swift_unknownObjectWeakDestroy(v0 + 16) = &type metadata for Bool;
  *(void *)(v98 + 224) = &protocol witness table for Bool;
  *(_BYTE *)(v98 + 19sub_100007A28(v0 + 2) = v83;
  static os_log_type_t.default.getter(v98);
  os_log(_:dso:log:type:_:)( "VoiceAssistantSyncCache validity was tombstone:%i personId:%i apsToken:%i serverInvalidation:%i version:%i",  v107,  (_DWORD)v108,  v109,  (_DWORD)v110,  (_DWORD)v111);

  swift_bridgeObjectRelease(v98);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v132, v128);
  ((void (*)(char *, uint64_t))v119)(v130, v131);
  swift_release(v125);
  swift_release(v89);
  swift_release(v77);
  return v83 & v96 & v76 & v99 & v90;
}

void sub_10001FC48(uint64_t a1, uint64_t a2, dispatch_group_s *a3)
{
  uint64_t v5 = swift_projectBox(a2);
  swift_beginAccess(v5, v9, 1LL, 0LL);
  uint64_t v6 = sub_100023E04(a1, v5);
  if (qword_100076AF8 != -1) {
    uint64_t v6 = swift_once(&qword_100076AF8, sub_100009A7C);
  }
  uint64_t v7 = qword_1000798C0;
  uint64_t v8 = static os_log_type_t.default.getter(v6);
  os_log(_:dso:log:type:_:)( "Validating cacheInvalidationDate",  32LL,  2LL,  &_mh_execute_header,  v7,  v8,  &_swiftEmptyArrayStorage);
  dispatch_group_leave(a3);
}

void sub_10001FD08(uint64_t *a1, uint64_t a2, dispatch_group_s *a3)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  swift_beginAccess(a2 + 16, v11, 1LL, 0LL);
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  *(void *)(a2 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  uint64_t v8 = swift_bridgeObjectRelease(v7);
  if (qword_100076AF8 != -1) {
    uint64_t v8 = swift_once(&qword_100076AF8, sub_100009A7C);
  }
  uint64_t v9 = qword_1000798C0;
  uint64_t v10 = static os_log_type_t.default.getter(v8);
  os_log(_:dso:log:type:_:)( "Validating apsTokenProvider topicToken",  38LL,  2LL,  &_mh_execute_header,  v9,  v10,  &_swiftEmptyArrayStorage);
  dispatch_group_leave(a3);
}

void sub_10001FDD8(uint64_t a1, uint64_t a2, uint64_t a3, dispatch_group_s *a4)
{
  uint64_t v6 = a3 + 16;
  if (a1)
  {
    uint64_t v8 = *(void *)(a1 + direct field offset for AuthenticationCredential.personId);
    uint64_t v7 = *(void *)(a1 + direct field offset for AuthenticationCredential.personId + 8);
    swift_bridgeObjectRetain(v7);
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v7 = 0LL;
  }

  swift_beginAccess(v6, v13, 1LL, 0LL);
  uint64_t v9 = *(void *)(a3 + 24);
  *(void *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *(void *)(a3 + 24) = v7;
  uint64_t v10 = swift_bridgeObjectRelease(v9);
  if (qword_100076AF8 != -1) {
    uint64_t v10 = swift_once(&qword_100076AF8, sub_100009A7C);
  }
  uint64_t v11 = qword_1000798C0;
  uint64_t v12 = static os_log_type_t.default.getter(v10);
  os_log(_:dso:log:type:_:)( "Validating authenticationProvider personId",  42LL,  2LL,  &_mh_execute_header,  v11,  v12,  &_swiftEmptyArrayStorage);
  dispatch_group_leave(a4);
}

uint64_t sub_10001FEC8(uint64_t a1, uint64_t a2, void (*a3)(char *))
{
  uint64_t v6 = sub_100005394((uint64_t *)&unk_1000787B0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100005394(&qword_100077418);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2)
  {
    if (qword_100076AF8 != -1) {
      uint64_t v10 = swift_once(&qword_100076AF8, sub_100009A7C);
    }
    uint64_t v13 = qword_1000798C0;
    uint64_t v14 = static os_log_type_t.debug.getter(v10);
    uint64_t v15 = sub_100005394(&qword_100079660);
    uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
    *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B2C0;
    uint64_t v27 = a2;
    swift_errorRetain(a2);
    uint64_t v17 = sub_100005394(&qword_100077BD8);
    uint64_t v18 = String.init<A>(describing:)(&v27, v17);
    uint64_t v20 = v19;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 64) = sub_100005854();
    *(void *)(v16 + 3sub_100007A28(v0 + 2) = v18;
    *(void *)(v16 + 40) = v20;
    os_log(_:dso:log:type:_:)("Could not find invalidation marker %@", 37LL, 2LL, &_mh_execute_header, v13, v14, v16);
    swift_bridgeObjectRelease(v16);
  }

  sub_10000D1A4(a1, (uint64_t)v8, (uint64_t *)&unk_1000787B0);
  uint64_t v21 = type metadata accessor for CacheInvalidationMarker(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48LL))(v8, 1LL, v21) == 1)
  {
    sub_10000D20C((uint64_t)v8, (uint64_t *)&unk_1000787B0);
    uint64_t v22 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v12, 1LL, 1LL, v22);
  }

  else
  {
    uint64_t v23 = type metadata accessor for Date(0LL);
    uint64_t v24 = *(void *)(v23 - 8);
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v12, v8, v23);
    sub_100019DD8((uint64_t)v8, type metadata accessor for CacheInvalidationMarker);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v12, 0LL, 1LL, v23);
  }

  a3(v12);
  return sub_10000D20C((uint64_t)v12, &qword_100077418);
}

uint64_t sub_100020134()
{
  swift_unknownObjectRelease(*(void *)(v0 + 24));
  sub_10000D20C(v0 + 32, &qword_100077250);
  sub_10000D20C(v0 + OBJC_IVAR____TtC20FMIPClientXPCService23VoiceAssistantSyncCache_cacheValidity, &qword_100077670);
  sub_10000D20C(v0 + OBJC_IVAR____TtC20FMIPClientXPCService23VoiceAssistantSyncCache_devicesDiskCache, &qword_100077C38);
  sub_10000D20C( v0 + OBJC_IVAR____TtC20FMIPClientXPCService23VoiceAssistantSyncCache_invalidationDiskCache,  &qword_100077BF8);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t CachedVoiceAssistantSyncInfo.createdDate.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000208AC(type metadata accessor for CachedVoiceAssistantSyncInfo, a1);
}

uint64_t type metadata accessor for CachedVoiceAssistantSyncInfo(uint64_t a1)
{
  return sub_10002163C(a1, qword_100077A20, (uint64_t)&nominal type descriptor for CachedVoiceAssistantSyncInfo);
}

uint64_t CachedVoiceAssistantSyncInfo.serverAnchor.getter()
{
  return sub_100020918(type metadata accessor for CachedVoiceAssistantSyncInfo);
}

uint64_t sub_1000201F0()
{
  uint64_t v1 = 0x4464657461657263LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E41726576726573LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x73656369766564LL;
  }
}

uint64_t sub_10002025C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100023910(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100020280(uint64_t a1)
{
  unint64_t v2 = sub_10002049C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000202A8(uint64_t a1)
{
  unint64_t v2 = sub_10002049C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CachedVoiceAssistantSyncInfo.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100005394(&qword_1000777E8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000087E0(a1, v9);
  unint64_t v11 = sub_10002049C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for CachedVoiceAssistantSyncInfo.CodingKeys,  &type metadata for CachedVoiceAssistantSyncInfo.CodingKeys,  v11,  v9,  v10);
  uint64_t v19 = *v3;
  HIBYTE(v18) = 0;
  sub_100005394(&qword_1000777F8);
  sub_1000207F4( &qword_100077800,  &qword_100077808,  (uint64_t)&protocol conformance descriptor for VoiceAssistantDeviceName,  (uint64_t)&protocol conformance descriptor for <> Set<A>);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19);
  if (!v2)
  {
    uint64_t v12 = type metadata accessor for CachedVoiceAssistantSyncInfo(0LL);
    uint64_t v13 = (char *)v3 + *(int *)(v12 + 20);
    BYTE6(v18) = 1;
    type metadata accessor for Date(0LL);
    sub_1000078F8( &qword_100077810,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13);
    uint64_t v14 = (uint64_t *)((char *)v3 + *(int *)(v12 + 24));
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    BYTE5(v18) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, (char *)&v18 + 5, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10002049C()
{
  unint64_t result = qword_1000777F0;
  if (!qword_1000777F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005D124, &type metadata for CachedVoiceAssistantSyncInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000777F0);
  }

  return result;
}

uint64_t CachedVoiceAssistantSyncInfo.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v28 = *(void *)(v3 - 8);
  uint64_t v29 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (uint64_t *)((char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v30 = sub_100005394(&qword_100077818);
  uint64_t v6 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CachedVoiceAssistantSyncInfo(0LL);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_1000087E0(a1, v12);
  unint64_t v14 = sub_10002049C();
  uint64_t v31 = v8;
  uint64_t v15 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for CachedVoiceAssistantSyncInfo.CodingKeys,  &type metadata for CachedVoiceAssistantSyncInfo.CodingKeys,  v14,  v12,  v13);
  if (v15) {
    return sub_100007A28(a1);
  }
  uint64_t v32 = v5;
  uint64_t v16 = v11;
  uint64_t v17 = v29;
  uint64_t v18 = sub_100005394(&qword_1000777F8);
  v33[2] = 0;
  sub_1000207F4( &qword_100077820,  &qword_100077828,  (uint64_t)&protocol conformance descriptor for VoiceAssistantDeviceName,  (uint64_t)&protocol conformance descriptor for <> Set<A>);
  uint64_t v19 = v30;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v34, v18);
  *(void *)uint64_t v16 = v34;
  v33[1] = 1;
  sub_1000078F8( &qword_100077830,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v20 = v32;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v32, v17);
  (*(void (**)(char *, void *, uint64_t))(v28 + 32))(&v16[*(int *)(v9 + 20)], v20, v17);
  v33[0] = 2;
  uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)(v33, v19);
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v31, v30);
  uint64_t v24 = (uint64_t *)&v16[*(int *)(v9 + 24)];
  *uint64_t v24 = v21;
  v24[1] = v23;
  sub_100021174((uint64_t)v16, v27, type metadata accessor for CachedVoiceAssistantSyncInfo);
  sub_100007A28(a1);
  return sub_100019DD8((uint64_t)v16, type metadata accessor for CachedVoiceAssistantSyncInfo);
}

uint64_t sub_1000207F4(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = sub_100005420(&qword_1000777F8);
    sub_1000078F8(a2, (uint64_t (*)(uint64_t))&type metadata accessor for VoiceAssistantDeviceName, a3);
    uint64_t result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100020878@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CachedVoiceAssistantSyncInfo.init(from:)(a1, a2);
}

uint64_t sub_10002088C(void *a1)
{
  return CachedVoiceAssistantSyncInfo.encode(to:)(a1);
}

uint64_t VoiceAssistantSyncInfo.createdDate.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000208AC(type metadata accessor for VoiceAssistantSyncInfo, a1);
}

uint64_t sub_1000208AC@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0LL) + 20);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t type metadata accessor for VoiceAssistantSyncInfo(uint64_t a1)
{
  return sub_10002163C(a1, qword_100077AB8, (uint64_t)&nominal type descriptor for VoiceAssistantSyncInfo);
}

uint64_t VoiceAssistantSyncInfo.ownerPersonId.getter()
{
  return sub_100020918(type metadata accessor for VoiceAssistantSyncInfo);
}

uint64_t sub_100020918(uint64_t (*a1)(void))
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1(0LL) + 24));
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t VoiceAssistantSyncInfo.ownerAPSToken.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for VoiceAssistantSyncInfo(0LL) + 28));
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t VoiceAssistantSyncInfo.serverAnchor.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for VoiceAssistantSyncInfo(0LL) + 32));
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_1000209D0()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100020A00 + 4 * byte_10005CD40[*v0]))( 0x73656369766564LL,  0xE700000000000000LL);
}

uint64_t sub_100020A00()
{
  return 0x4464657461657263LL;
}

uint64_t sub_100020A20()
{
  return 0x72655072656E776FLL;
}

uint64_t sub_100020A44()
{
  return 0x53504172656E776FLL;
}

uint64_t sub_100020A68()
{
  return 0x6E41726576726573LL;
}

uint64_t sub_100020A88@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100023A94(a1, a2);
  *a3 = result;
  return result;
}

void sub_100020AAC(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_100020AB8(uint64_t a1)
{
  unint64_t v2 = sub_100020D34();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100020AE0(uint64_t a1)
{
  unint64_t v2 = sub_100020D34();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t VoiceAssistantSyncInfo.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100005394(&qword_100077838);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000087E0(a1, v9);
  unint64_t v11 = sub_100020D34();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for VoiceAssistantSyncInfo.CodingKeys,  &type metadata for VoiceAssistantSyncInfo.CodingKeys,  v11,  v9,  v10);
  uint64_t v25 = *v3;
  HIBYTE(v24) = 0;
  sub_100005394(&qword_1000777F8);
  sub_1000207F4( &qword_100077800,  &qword_100077808,  (uint64_t)&protocol conformance descriptor for VoiceAssistantDeviceName,  (uint64_t)&protocol conformance descriptor for <> Set<A>);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v25);
  if (!v2)
  {
    uint64_t v12 = (int *)type metadata accessor for VoiceAssistantSyncInfo(0LL);
    uint64_t v13 = (char *)v3 + v12[5];
    BYTE6(v24) = 1;
    type metadata accessor for Date(0LL);
    sub_1000078F8( &qword_100077810,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13);
    unint64_t v14 = (uint64_t *)((char *)v3 + v12[6]);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    BYTE5(v24) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, (char *)&v24 + 5, v5);
    uint64_t v17 = (uint64_t *)((char *)v3 + v12[7]);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    BYTE4(v24) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, (char *)&v24 + 4, v5);
    uint64_t v20 = (uint64_t *)((char *)v3 + v12[8]);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    BYTE3(v24) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v22, (char *)&v24 + 3, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100020D34()
{
  unint64_t result = qword_100077840;
  if (!qword_100077840)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005D0D4, &type metadata for VoiceAssistantSyncInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100077840);
  }

  return result;
}

uint64_t VoiceAssistantSyncInfo.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v38 = *(void *)(v3 - 8);
  uint64_t v39 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = sub_100005394(&qword_100077848);
  uint64_t v6 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (int *)type metadata accessor for VoiceAssistantSyncInfo(0LL);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a1[3];
  uint64_t v12 = a1[4];
  sub_1000087E0(a1, v13);
  unint64_t v14 = sub_100020D34();
  uint64_t v40 = v8;
  uint64_t v15 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for VoiceAssistantSyncInfo.CodingKeys,  &type metadata for VoiceAssistantSyncInfo.CodingKeys,  v14,  v13,  v12);
  if (v15) {
    return sub_100007A28(a1);
  }
  uint64_t v16 = v5;
  uint64_t v42 = v6;
  uint64_t v36 = a1;
  uint64_t v17 = v38;
  uint64_t v18 = v39;
  uint64_t v19 = v11;
  uint64_t v20 = sub_100005394(&qword_1000777F8);
  v45[2] = 0;
  sub_1000207F4( &qword_100077820,  &qword_100077828,  (uint64_t)&protocol conformance descriptor for VoiceAssistantDeviceName,  (uint64_t)&protocol conformance descriptor for <> Set<A>);
  uint64_t v21 = v20;
  uint64_t v22 = v41;
  uint64_t v23 = v40;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v46, v21);
  *(void *)uint64_t v19 = v46;
  v45[1] = 1;
  sub_1000078F8( &qword_100077830,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v18);
  (*(void (**)(char *, void *, uint64_t))(v17 + 32))(&v19[v9[5]], v16, v18);
  v45[0] = 2;
  uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)(v45, v22);
  uint64_t v25 = (uint64_t *)&v19[v9[6]];
  *uint64_t v25 = v24;
  v25[1] = v26;
  char v44 = 3;
  uint64_t v27 = KeyedDecodingContainer.decode(_:forKey:)(&v44, v22);
  uint64_t v28 = (uint64_t *)&v19[v9[7]];
  *uint64_t v28 = v27;
  v28[1] = v29;
  char v43 = 4;
  uint64_t v30 = KeyedDecodingContainer.decode(_:forKey:)(&v43, v22);
  uint64_t v32 = v31;
  uint64_t v33 = v30;
  (*(void (**)(char *, uint64_t))(v42 + 8))(v23, v22);
  uint64_t v34 = (uint64_t *)&v19[v9[8]];
  *uint64_t v34 = v33;
  v34[1] = v32;
  sub_100021174((uint64_t)v19, v37, type metadata accessor for VoiceAssistantSyncInfo);
  sub_100007A28(v36);
  return sub_100019DD8((uint64_t)v19, type metadata accessor for VoiceAssistantSyncInfo);
}

uint64_t sub_100021174(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000211B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v20 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v19 = (uint64_t *)((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = sub_100005394(&qword_100077BC0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CacheInvalidationMarker(0LL);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_1000087E0(a1, v12);
  unint64_t v14 = sub_100023D28();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for CacheInvalidationMarker.CodingKeys,  &type metadata for CacheInvalidationMarker.CodingKeys,  v14,  v12,  v13);
  if (!v2)
  {
    sub_1000078F8( &qword_100077830,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v19, v20);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, void *, uint64_t))(v17 + 32))(v11, v19, v20);
    sub_100019EDC((uint64_t)v11, v18, type metadata accessor for CacheInvalidationMarker);
  }

  return sub_100007A28(a1);
}

uint64_t sub_100021384@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return VoiceAssistantSyncInfo.init(from:)(a1, a2);
}

uint64_t sub_100021398(void *a1)
{
  return VoiceAssistantSyncInfo.encode(to:)(a1);
}

uint64_t sub_1000213AC()
{
  return type metadata accessor for VoiceAssistantSyncCache(0LL);
}

uint64_t type metadata accessor for VoiceAssistantSyncCache(uint64_t a1)
{
  return sub_10002163C(a1, (uint64_t *)&unk_100077888, (uint64_t)&nominal type descriptor for VoiceAssistantSyncCache);
}

void sub_1000213C8(uint64_t a1)
{
  v8[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[1] = "\b";
  v8[2] = &unk_10005CE70;
  sub_10002148C(319LL);
  if (v3 <= 0x3F)
  {
    v8[3] = *(void *)(v2 - 8) + 64LL;
    sub_1000214E0(319LL);
    if (v5 <= 0x3F)
    {
      v8[4] = *(void *)(v4 - 8) + 64LL;
      sub_100021584(319LL);
      if (v7 <= 0x3F)
      {
        v8[5] = *(void *)(v6 - 8) + 64LL;
        swift_updateClassMetadata2(a1, 256LL, 6LL, v8, a1 + 80);
      }
    }
  }

void sub_10002148C(uint64_t a1)
{
  if (!qword_100077898)
  {
    uint64_t v2 = type metadata accessor for DateComponents(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100077898);
    }
  }

void sub_1000214E0(uint64_t a1)
{
  if (!qword_1000778A0)
  {
    uint64_t v2 = type metadata accessor for VoiceAssistantSyncInfo(255LL);
    uint64_t v3 = sub_1000078F8( &qword_1000778A8,  type metadata accessor for VoiceAssistantSyncInfo,  (uint64_t)&protocol conformance descriptor for VoiceAssistantSyncInfo);
    uint64_t v4 = sub_1000078F8( &qword_1000778B0,  type metadata accessor for VoiceAssistantSyncInfo,  (uint64_t)&protocol conformance descriptor for VoiceAssistantSyncInfo);
    unint64_t v5 = type metadata accessor for DiskCache(a1, v2, v3, v4);
    if (!v6) {
      atomic_store(v5, (unint64_t *)&qword_1000778A0);
    }
  }

void sub_100021584(uint64_t a1)
{
  if (!qword_1000778B8)
  {
    uint64_t v2 = type metadata accessor for CacheInvalidationMarker(255LL);
    uint64_t v3 = sub_1000078F8(&qword_1000778C0, type metadata accessor for CacheInvalidationMarker, (uint64_t)&unk_10005D0AC);
    uint64_t v4 = sub_1000078F8( (unint64_t *)&unk_1000778C8,  type metadata accessor for CacheInvalidationMarker,  (uint64_t)&unk_10005D084);
    unint64_t v5 = type metadata accessor for DiskCache(a1, v2, v3, v4);
    if (!v6) {
      atomic_store(v5, (unint64_t *)&qword_1000778B8);
    }
  }

uint64_t type metadata accessor for CacheInvalidationMarker(uint64_t a1)
{
  return sub_10002163C(a1, qword_100077B58, (uint64_t)&nominal type descriptor for CacheInvalidationMarker);
}

uint64_t sub_10002163C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CachedVoiceAssistantSyncInfo( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    unint64_t v7 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    unint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    unint64_t v14 = (uint64_t *)((char *)v7 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = v15[1];
    *unint64_t v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain(v16);
  }

  return v7;
}

uint64_t destroy for CachedVoiceAssistantSyncInfo(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  return swift_bridgeObjectRelease(*(void *)((char *)a1 + *(int *)(a2 + 24) + 8));
}

uint64_t *initializeWithCopy for CachedVoiceAssistantSyncInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (uint64_t *)((char *)a1 + v12);
  unint64_t v14 = (uint64_t *)((char *)a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t *assignWithCopy for CachedVoiceAssistantSyncInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (uint64_t *)((char *)a1 + v12);
  unint64_t v14 = (uint64_t *)((char *)a2 + v12);
  *uint64_t v13 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

void *initializeWithTake for CachedVoiceAssistantSyncInfo(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + swift_release(*(void *)(v0 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t *assignWithTake for CachedVoiceAssistantSyncInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (uint64_t *)((char *)a1 + v11);
  uint64_t v13 = (uint64_t *)((char *)a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  uint64_t v16 = v12[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CachedVoiceAssistantSyncInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000219E4);
}

uint64_t storeEnumTagSinglePayload for CachedVoiceAssistantSyncInfo( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000219F4);
}

uint64_t sub_1000219F8(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = &unk_10005CEB0;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for VoiceAssistantSyncInfo(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (uint64_t *)((char *)v7 + v13);
    uint64_t v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    void *v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = (uint64_t *)((char *)v7 + v14);
    uint64_t v19 = (uint64_t *)((char *)a2 + v14);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = a3[8];
    uint64_t v22 = (uint64_t *)((char *)v7 + v21);
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v24);
  }

  return v7;
}

uint64_t destroy for VoiceAssistantSyncInfo(void *a1, int *a2)
{
  uint64_t v4 = (char *)a1 + a2[5];
  uint64_t v5 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[7] + 8));
  return swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[8] + 8));
}

uint64_t *initializeWithCopy for VoiceAssistantSyncInfo(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (uint64_t *)((char *)a1 + v12);
  uint64_t v15 = (uint64_t *)((char *)a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (uint64_t *)((char *)a1 + v13);
  uint64_t v18 = (uint64_t *)((char *)a2 + v13);
  uint64_t v19 = v18[1];
  void *v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = a3[8];
  uint64_t v21 = (uint64_t *)((char *)a1 + v20);
  uint64_t v22 = (uint64_t *)((char *)a2 + v20);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v23);
  return a1;
}

uint64_t *assignWithCopy for VoiceAssistantSyncInfo(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (uint64_t *)((char *)a1 + v12);
  uint64_t v14 = (uint64_t *)((char *)a2 + v12);
  *uint64_t v13 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = a3[7];
  uint64_t v18 = (uint64_t *)((char *)a1 + v17);
  uint64_t v19 = (uint64_t *)((char *)a2 + v17);
  *uint64_t v18 = *v19;
  uint64_t v20 = v19[1];
  uint64_t v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = a3[8];
  uint64_t v23 = (uint64_t *)((char *)a1 + v22);
  uint64_t v24 = (uint64_t *)((char *)a2 + v22);
  *uint64_t v23 = *v24;
  uint64_t v25 = v24[1];
  uint64_t v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  return a1;
}

void *initializeWithTake for VoiceAssistantSyncInfo(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  return a1;
}

uint64_t *assignWithTake for VoiceAssistantSyncInfo(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (uint64_t *)((char *)a1 + v11);
  uint64_t v13 = (uint64_t *)((char *)a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  uint64_t v16 = v12[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = a3[7];
  uint64_t v18 = (uint64_t *)((char *)a1 + v17);
  uint64_t v19 = (uint64_t *)((char *)a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  uint64_t v22 = v18[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease(v22);
  uint64_t v23 = a3[8];
  uint64_t v24 = (uint64_t *)((char *)a1 + v23);
  uint64_t v25 = (uint64_t *)((char *)a2 + v23);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  uint64_t v28 = v24[1];
  *uint64_t v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease(v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for VoiceAssistantSyncInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100021F18);
}

uint64_t sub_100021F1C(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for VoiceAssistantSyncInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100021FA4);
}

char *sub_100021FA8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_10002201C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = &unk_10005CEB0;
    void v4[3] = &unk_10005CEB0;
    void v4[4] = &unk_10005CEB0;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1000220A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1000220DC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t sub_100022110(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_100022154(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_100022198(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000221DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_100022220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002222C);
}

uint64_t sub_10002222C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_100022268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100022274);
}

uint64_t sub_100022274(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t sub_1000222B4(uint64_t a1)
{
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for VoiceAssistantSyncInfo.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100022368 + 4 * byte_10005CD4A[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10002239C + 4 * byte_10005CD45[v4]))();
}

uint64_t sub_10002239C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000223A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000223ACLL);
  }
  return result;
}

uint64_t sub_1000223B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000223C0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1000223C4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000223CC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VoiceAssistantSyncInfo.CodingKeys()
{
  return &type metadata for VoiceAssistantSyncInfo.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for CachedVoiceAssistantSyncInfo.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100022434 + 4 * byte_10005CD54[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100022468 + 4 * byte_10005CD4F[v4]))();
}

uint64_t sub_100022468(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100022470(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100022478LL);
  }
  return result;
}

uint64_t sub_100022484(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10002248CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100022490(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100022498(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CachedVoiceAssistantSyncInfo.CodingKeys()
{
  return &type metadata for CachedVoiceAssistantSyncInfo.CodingKeys;
}

unint64_t sub_1000224B8()
{
  unint64_t result = qword_100077B90;
  if (!qword_100077B90)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005CFA4, &type metadata for CachedVoiceAssistantSyncInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100077B90);
  }

  return result;
}

unint64_t sub_100022500()
{
  unint64_t result = qword_100077B98;
  if (!qword_100077B98)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005D05C, &type metadata for VoiceAssistantSyncInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100077B98);
  }

  return result;
}

unint64_t sub_100022544()
{
  return 0xD000000000000010LL;
}

uint64_t sub_100022560@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100024518(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100022588(uint64_t a1)
{
  unint64_t v2 = sub_100023D28();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000225B0(uint64_t a1)
{
  unint64_t v2 = sub_100023D28();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000225D8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000211B8(a1, a2);
}

uint64_t sub_1000225EC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100005394(&qword_100077BD0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_1000087E0(a1, v8);
  unint64_t v10 = sub_100023D28();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for CacheInvalidationMarker.CodingKeys,  &type metadata for CacheInvalidationMarker.CodingKeys,  v10,  v8,  v9);
  type metadata accessor for Date(0LL);
  sub_1000078F8( &qword_100077810,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_100022700()
{
  unint64_t result = qword_100077BA0;
  if (!qword_100077BA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005CFCC, &type metadata for VoiceAssistantSyncInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100077BA0);
  }

  return result;
}

unint64_t sub_100022748()
{
  unint64_t result = qword_100077BA8;
  if (!qword_100077BA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005CFF4, &type metadata for VoiceAssistantSyncInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100077BA8);
  }

  return result;
}

unint64_t sub_100022790()
{
  unint64_t result = qword_100077BB0;
  if (!qword_100077BB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005CF14, &type metadata for CachedVoiceAssistantSyncInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100077BB0);
  }

  return result;
}

unint64_t sub_1000227D8()
{
  unint64_t result = qword_100077BB8;
  if (!qword_100077BB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005CF3C, &type metadata for CachedVoiceAssistantSyncInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100077BB8);
  }

  return result;
}

uint64_t sub_10002281C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v17 = 0;
  uint64_t v7 = *(dispatch_queue_s **)(v3 + 56);
  v16[0] = a1;
  v16[1] = a2;
  uint64_t v8 = (void *)swift_allocObject(&unk_10006C2D0, 56LL, 7LL);
  v8[2] = v3;
  sub_100019FC4((uint64_t)v16, (uint64_t)(v8 + 3), &qword_100077C58);
  v8[5] = a3;
  void v8[6] = &v17;
  uint64_t v9 = swift_allocObject(&unk_10006C2F8, 32LL, 7LL);
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100024190;
  *(void *)(v9 + 24) = v8;
  aBlock[4] = sub_100010FA0;
  uint64_t v15 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10003CE54;
  void aBlock[3] = &unk_10006C310;
  unint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = v15;
  sub_1000241B0(a1, a2);
  swift_retain(v3);
  swift_errorRetain(a3);
  swift_retain(v9);
  swift_release(v11);
  dispatch_sync(v7, v10);
  _Block_release(v10);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation(v9, "", 90LL, 123LL, 26LL, 1LL);
  uint64_t result = swift_release(v9);
  if ((v7 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    sub_1000333D0();
    uint64_t v13 = v17;
    swift_release(v8);
    return v13;
  }

  return result;
}

uint64_t sub_1000229A0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v15 = 0;
  uint64_t v5 = *(dispatch_queue_s **)(v2 + 48);
  uint64_t v14 = a1;
  uint64_t v6 = (void *)swift_allocObject(&unk_10006C3C0, 48LL, 7LL);
  _OWORD v6[2] = v2;
  sub_100019FC4((uint64_t)&v14, (uint64_t)(v6 + 3), &qword_100077C98);
  _OWORD v6[4] = a2;
  v6[5] = &v15;
  uint64_t v7 = swift_allocObject(&unk_10006C3E8, 32LL, 7LL);
  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100024388;
  *(void *)(v7 + 24) = v6;
  v12[4] = sub_100010FA0;
  uint64_t v13 = v7;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256LL;
  v12[2] = sub_10003CE54;
  v12[3] = &unk_10006C400;
  uint64_t v8 = _Block_copy(v12);
  uint64_t v9 = v13;
  swift_bridgeObjectRetain(a1);
  swift_retain(v2);
  swift_errorRetain(a2);
  swift_retain(v7);
  swift_release(v9);
  dispatch_sync(v5, v8);
  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v7, "", 90LL, 123LL, 26LL, 1LL);
  uint64_t result = swift_release(v7);
  if ((v5 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    sub_1000335CC();
    uint64_t v11 = v15;
    swift_release(v6);
    return v11;
  }

  return result;
}

uint64_t sub_100022B14(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100005394(&qword_1000787D0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&aBlock[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unsigned __int8 v23 = 0;
  uint64_t v9 = *(dispatch_queue_s **)(v2 + *(void *)(*(void *)v2 + 128LL));
  sub_10000D1A4(a1, (uint64_t)v8, &qword_1000787D0);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = (v10 + 24) & ~v10;
  unint64_t v12 = (v7 + v11 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v14 = swift_allocObject(&unk_10006C348, v13 + 8, v10 | 7);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  sub_100019FC4((uint64_t)v8, v14 + v11, &qword_1000787D0);
  *(void *)(v14 + v1sub_100007A28(v0 + 2) = a2;
  *(void *)(v14 + v13) = &v23;
  uint64_t v15 = swift_allocObject(&unk_10006C370, 32LL, 7LL);
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000242D4;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_100010FA0;
  uint64_t v22 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10003CE54;
  void aBlock[3] = &unk_10006C388;
  uint64_t v16 = _Block_copy(aBlock);
  uint64_t v17 = v22;
  swift_retain(v2);
  swift_errorRetain(a2);
  swift_retain(v15);
  swift_release(v17);
  dispatch_sync(v9, v16);
  _Block_release(v16);
  LOBYTE(asub_100007A28(v0 + 2) = swift_isEscapingClosureAtFileLocation(v15, "", 90LL, 123LL, 26LL, 1LL);
  uint64_t result = swift_release(v15);
  if ((a2 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    sub_1000337AC();
    uint64_t v19 = v23;
    swift_release(v14);
    return v19;
  }

  return result;
}

uint64_t sub_100022CF8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100005394(&qword_100077C20);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&aBlock[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unsigned __int8 v23 = 0;
  uint64_t v9 = *(dispatch_queue_s **)(v2 + *(void *)(*(void *)v2 + 128LL));
  sub_10000D1A4(a1, (uint64_t)v8, &qword_100077C20);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = (v10 + 24) & ~v10;
  unint64_t v12 = (v7 + v11 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v14 = swift_allocObject(&unk_10006C258, v13 + 8, v10 | 7);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  sub_100019FC4((uint64_t)v8, v14 + v11, &qword_100077C20);
  *(void *)(v14 + v1sub_100007A28(v0 + 2) = a2;
  *(void *)(v14 + v13) = &v23;
  uint64_t v15 = swift_allocObject(&unk_10006C280, 32LL, 7LL);
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100024128;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_100010FA0;
  uint64_t v22 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10003CE54;
  void aBlock[3] = &unk_10006C298;
  uint64_t v16 = _Block_copy(aBlock);
  uint64_t v17 = v22;
  swift_retain(v2);
  swift_errorRetain(a2);
  swift_retain(v15);
  swift_release(v17);
  dispatch_sync(v9, v16);
  _Block_release(v16);
  LOBYTE(asub_100007A28(v0 + 2) = swift_isEscapingClosureAtFileLocation(v15, "", 90LL, 123LL, 26LL, 1LL);
  uint64_t result = swift_release(v15);
  if ((a2 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    sub_100033A20();
    uint64_t v19 = v23;
    swift_release(v14);
    return v19;
  }

  return result;
}

uint64_t sub_100022EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100005394((uint64_t *)&unk_1000787B0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&aBlock[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unsigned __int8 v23 = 0;
  uint64_t v9 = *(dispatch_queue_s **)(v2 + *(void *)(*(void *)v2 + 128LL));
  sub_10000D1A4(a1, (uint64_t)v8, (uint64_t *)&unk_1000787B0);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = (v10 + 24) & ~v10;
  unint64_t v12 = (v7 + v11 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v14 = swift_allocObject(&unk_10006C0A0, v13 + 8, v10 | 7);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  sub_100019FC4((uint64_t)v8, v14 + v11, (uint64_t *)&unk_1000787B0);
  *(void *)(v14 + v1sub_100007A28(v0 + 2) = a2;
  *(void *)(v14 + v13) = &v23;
  uint64_t v15 = swift_allocObject(&unk_10006C0C8, 32LL, 7LL);
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100023F38;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_100010FA0;
  uint64_t v22 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10003CE54;
  void aBlock[3] = &unk_10006C0E0;
  uint64_t v16 = _Block_copy(aBlock);
  uint64_t v17 = v22;
  swift_retain(v2);
  swift_errorRetain(a2);
  swift_retain(v15);
  swift_release(v17);
  dispatch_sync(v9, v16);
  _Block_release(v16);
  LOBYTE(asub_100007A28(v0 + 2) = swift_isEscapingClosureAtFileLocation(v15, "", 90LL, 123LL, 26LL, 1LL);
  uint64_t result = swift_release(v15);
  if ((a2 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    sub_100033C94();
    uint64_t v19 = v23;
    swift_release(v14);
    return v19;
  }

  return result;
}

void *sub_1000230C0(void *result, uint64_t a2, void (*a3)(void *))
{
  uint64_t v3 = result[1];
  if (v3)
  {
    v5[0] = *result;
    v5[1] = v3;
    swift_bridgeObjectRetain(v3);
    a3(v5);
    return (void *)swift_bridgeObjectRelease(v3);
  }

  return result;
}

uint64_t sub_100023128(uint64_t a1, uint64_t a2, uint64_t a3, dispatch_group_s *a4)
{
  uint64_t v8 = sub_100005394((uint64_t *)&unk_1000787B0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v35[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100005394(&qword_100077418);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v35[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = &off_100079000;
  if (a2)
  {
    if (qword_100076AF8 != -1) {
      uint64_t v12 = swift_once(&qword_100076AF8, sub_100009A7C);
    }
    uint64_t v16 = qword_1000798C0;
    uint64_t v17 = static os_log_type_t.debug.getter(v12);
    uint64_t v18 = sub_100005394(&qword_100079660);
    uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
    *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B2C0;
    v35[0] = a2;
    swift_errorRetain(a2);
    uint64_t v20 = sub_100005394(&qword_100077BD8);
    uint64_t v21 = String.init<A>(describing:)(v35, v20);
    uint64_t v23 = v22;
    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = sub_100005854();
    *(void *)(v19 + 3sub_100007A28(v0 + 2) = v21;
    *(void *)(v19 + 40) = v23;
    uint64_t v24 = v16;
    uint64_t v15 = &off_100079000;
    os_log(_:dso:log:type:_:)("Could not find invalidation marker %@", 37LL, 2LL, &_mh_execute_header, v24, v17, v19);
    swift_bridgeObjectRelease(v19);
  }

  sub_10000D1A4(a1, (uint64_t)v10, (uint64_t *)&unk_1000787B0);
  uint64_t v25 = type metadata accessor for CacheInvalidationMarker(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48LL))(v10, 1LL, v25) == 1)
  {
    sub_10000D20C((uint64_t)v10, (uint64_t *)&unk_1000787B0);
    uint64_t v26 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v14, 1LL, 1LL, v26);
  }

  else
  {
    uint64_t v27 = type metadata accessor for Date(0LL);
    uint64_t v28 = *(void *)(v27 - 8);
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v14, v10, v27);
    sub_100019DD8((uint64_t)v10, type metadata accessor for CacheInvalidationMarker);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v14, 0LL, 1LL, v27);
  }

  uint64_t v29 = swift_projectBox(a3);
  swift_beginAccess(v29, v35, 1LL, 0LL);
  uint64_t v30 = sub_100023E04((uint64_t)v14, v29);
  if (qword_100076AF8 != -1) {
    uint64_t v30 = swift_once(&qword_100076AF8, sub_100009A7C);
  }
  uint64_t v31 = v15[280];
  uint64_t v32 = static os_log_type_t.default.getter(v30);
  os_log(_:dso:log:type:_:)( "Validating cacheInvalidationDate",  32LL,  2LL,  &_mh_execute_header,  v31,  v32,  &_swiftEmptyArrayStorage);
  dispatch_group_leave(a4);
  return sub_10000D20C((uint64_t)v14, &qword_100077418);
}

uint64_t sub_100023420(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = sub_100005394(&qword_100077418);
  __chkstk_darwin(v5);
  uint64_t v6 = sub_100005394((uint64_t *)&unk_1000787B0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = swift_allocObject(&unk_10006BFD8, 32LL, 7LL);
  *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  swift_retain_n(a2, 2LL);
  id v26 = a3;
  uint64_t v13 = sub_10001E1B4();
  uint64_t v14 = swift_allocObject(&unk_10006C000, 32LL, 7LL);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100023DFC;
  *(void *)(v14 + 24) = v12;
  uint64_t v15 = type metadata accessor for CacheInvalidationMarker(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v11, 1LL, 1LL, v15);
  uint64_t v30 = 0LL;
  char v29 = 0;
  dispatch_queue_t v25 = *(dispatch_queue_t *)((char *)v13 + *(void *)(*(void *)v13 + 128LL));
  uint64_t v16 = (void *)swift_allocObject(&unk_10006C028, 64LL, 7LL);
  void v16[2] = v11;
  v16[3] = v13;
  v16[4] = &v30;
  v16[5] = &v29;
  v16[6] = sub_100023E4C;
  v16[7] = v14;
  uint64_t v17 = swift_allocObject(&unk_10006C050, 32LL, 7LL);
  *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100023E58;
  *(void *)(v17 + 24) = v16;
  aBlock[4] = sub_100010FA0;
  uint64_t v28 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10003CE54;
  void aBlock[3] = &unk_10006C068;
  uint64_t v18 = _Block_copy(aBlock);
  uint64_t v19 = v28;
  swift_retain_n(v12, 2LL);
  swift_retain(v13);
  swift_retain(v14);
  swift_retain(v17);
  swift_release(v19);
  dispatch_sync(v25, v18);
  _Block_release(v18);
  LOBYTE(v18) = swift_isEscapingClosureAtFileLocation(v17, "", 90LL, 149LL, 26LL, 1LL);
  uint64_t result = swift_release(v17);
  if ((v18 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    if ((v29 & 1) != 0)
    {
      sub_10000D1A4((uint64_t)v11, (uint64_t)v9, (uint64_t *)&unk_1000787B0);
      uint64_t v21 = v30;
      swift_retain(a2);
      uint64_t v22 = (dispatch_group_s *)v26;
      swift_errorRetain(v21);
      sub_100023128((uint64_t)v9, v21, a2, v22);
      swift_release(a2);

      swift_errorRelease(v21);
      sub_10000D20C((uint64_t)v9, (uint64_t *)&unk_1000787B0);
    }

    uint64_t v23 = v30;
    swift_retain(v13);
    swift_errorRelease(v23);
    sub_10000D20C((uint64_t)v11, (uint64_t *)&unk_1000787B0);

    swift_release(a2);
    swift_release_n(v13, 2LL);
    swift_release_n(v12, 2LL);
    swift_release(v14);
    return swift_release(v16);
  }

  return result;
}

uint64_t sub_100023910(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x73656369766564LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v5 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73656369766564LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x4464657461657263LL && a2 == 0xEB00000000657461LL)
  {
    unint64_t v7 = 0xEB00000000657461LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4464657461657263LL, 0xEB00000000657461LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x6E41726576726573LL && a2 == 0xEC000000726F6863LL)
  {
    swift_bridgeObjectRelease(0xEC000000726F6863LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E41726576726573LL, 0xEC000000726F6863LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_100023A94(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x73656369766564LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v5 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73656369766564LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x4464657461657263LL && a2 == 0xEB00000000657461LL)
  {
    unint64_t v7 = 0xEB00000000657461LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4464657461657263LL, 0xEB00000000657461LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x72655072656E776FLL && a2 == 0xED000064496E6F73LL)
  {
    unint64_t v8 = 0xED000064496E6F73LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72655072656E776FLL, 0xED000064496E6F73LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x53504172656E776FLL && a2 == 0xED00006E656B6F54LL)
  {
    unint64_t v9 = 0xED00006E656B6F54LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x53504172656E776FLL, 0xED00006E656B6F54LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0x6E41726576726573LL && a2 == 0xEC000000726F6863LL)
  {
    swift_bridgeObjectRelease(0xEC000000726F6863LL);
    return 4LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E41726576726573LL, 0xEC000000726F6863LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

unint64_t sub_100023D28()
{
  unint64_t result = qword_100077BC8;
  if (!qword_100077BC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005D22C, &type metadata for CacheInvalidationMarker.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100077BC8);
  }

  return result;
}

uint64_t sub_100023D6C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100023D94(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100023D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100007A28(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100023DAC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_100023DB8(uint64_t *a1)
{
}

uint64_t sub_100023DC0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100023DE8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100023DFC(uint64_t a1)
{
}

uint64_t sub_100023E04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005394(&qword_100077418);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100023E4C(uint64_t a1, uint64_t a2)
{
  return sub_10001FEC8(a1, a2, *(void (**)(char *))(v2 + 16));
}

uint64_t sub_100023E58()
{
  return sub_100023FF4((uint64_t (*)(void, void, void, void, void, void))sub_100034AF4);
}

uint64_t sub_100023E64()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100023E74()
{
  uint64_t v1 = *(void *)(sub_100005394((uint64_t *)&unk_1000787B0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release(*(void *)(v0 + 16));
  uint64_t v5 = type metadata accessor for CacheInvalidationMarker(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v0 + v3, 1LL, v5))
  {
    uint64_t v6 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v0 + v3, v6);
  }

  unint64_t v7 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = ((v7 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_errorRelease(*(void *)(v0 + v7));
  return swift_deallocObject(v0, v8, v2 | 7);
}

uint64_t sub_100023F38()
{
  return sub_1000242E8( (uint64_t *)&unk_1000787B0,  (uint64_t (*)(void, unint64_t, void, void))sub_1000342FC);
}

uint64_t sub_100023F4C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100023F5C()
{
  return sub_10001ED90();
}

uint64_t sub_100023F64()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100023F74()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100023FA0()
{
  return sub_10001D2DC(*(void *)(v0 + 16), *(void (**)(void, void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100023FAC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100023FD8(uint64_t a1, uint64_t a2)
{
  return sub_10001E730( a1,  a2,  *(void (**)(void, void))(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32));
}

uint64_t sub_100023FE8()
{
  return sub_100023FF4((uint64_t (*)(void, void, void, void, void, void))sub_1000348D0);
}

uint64_t sub_100023FF4(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_100024008()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100024018()
{
  uint64_t v1 = *(void *)(sub_100005394(&qword_100077C20) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release(*(void *)(v0 + 16));
  uint64_t v5 = (void *)(v0 + v3);
  uint64_t v6 = (int *)type metadata accessor for VoiceAssistantSyncInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v6 - 1) + 48LL))(v0 + v3, 1LL, v6))
  {
    swift_bridgeObjectRelease(*v5);
    unint64_t v7 = (char *)v5 + v6[5];
    uint64_t v8 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
    swift_bridgeObjectRelease(*(void *)((char *)v5 + v6[6] + 8));
    swift_bridgeObjectRelease(*(void *)((char *)v5 + v6[7] + 8));
    swift_bridgeObjectRelease(*(void *)((char *)v5 + v6[8] + 8));
  }

  unint64_t v9 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v10 = ((v9 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_errorRelease(*(void *)(v0 + v9));
  return swift_deallocObject(v0, v10, v2 | 7);
}

uint64_t sub_100024128()
{
  return sub_1000242E8( &qword_100077C20,  (uint64_t (*)(void, unint64_t, void, void))sub_100034240);
}

uint64_t sub_10002413C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002414C()
{
  uint64_t v1 = v0[3];
  if (v1 != 1)
  {
    swift_bridgeObjectRelease(v1);
    swift_errorRelease(v0[4]);
  }

  swift_errorRelease(v0[5]);
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100024190()
{
  return sub_1000340F0( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(_BYTE **)(v0 + 48));
}

uint64_t sub_1000241A0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000241B0(uint64_t result, uint64_t a2)
{
  if (result != 1)
  {
    swift_bridgeObjectRetain(result);
    return swift_errorRetain(a2);
  }

  return result;
}

uint64_t sub_1000241E0()
{
  uint64_t v1 = *(void *)(sub_100005394(&qword_1000787D0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release(*(void *)(v0 + 16));
  uint64_t v5 = type metadata accessor for ClientConfiguration(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v0 + v3, 1LL, v5))
  {
    uint64_t v6 = v0 + v3 + *(int *)(v5 + 28);
    uint64_t v7 = type metadata accessor for DateComponents(0LL);
    uint64_t v8 = *(void *)(v7 - 8);
  }

  unint64_t v9 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v10 = ((v9 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_errorRelease(*(void *)(v0 + v9));
  return swift_deallocObject(v0, v10, v2 | 7);
}

uint64_t sub_1000242D4()
{
  return sub_1000242E8( &qword_1000787D0,  (uint64_t (*)(void, unint64_t, void, void))sub_100034234);
}

uint64_t sub_1000242E8(uint64_t *a1, uint64_t (*a2)(void, unint64_t, void, void))
{
  uint64_t v3 = *(void *)(sub_100005394(a1) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return a2(*(void *)(v2 + 16), v2 + v4, *(void *)(v2 + v5), *(void *)(v2 + ((v5 + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100024344()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100024354()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100024388()
{
  return sub_10003419C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(_BYTE **)(v0 + 40));
}

uint64_t sub_100024394()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t storeEnumTagSinglePayload for CacheInvalidationMarker.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000243E4 + 4 * byte_10005CD59[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100024404 + 4 * byte_10005CD5E[v4]))();
  }
}

_BYTE *sub_1000243E4(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100024404(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10002440C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100024414(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10002441C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100024424(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CacheInvalidationMarker.CodingKeys()
{
  return &type metadata for CacheInvalidationMarker.CodingKeys;
}

unint64_t sub_100024444()
{
  unint64_t result = qword_100077CA0;
  if (!qword_100077CA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005D204, &type metadata for CacheInvalidationMarker.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100077CA0);
  }

  return result;
}

unint64_t sub_10002448C()
{
  unint64_t result = qword_100077CA8;
  if (!qword_100077CA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005D174, &type metadata for CacheInvalidationMarker.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100077CA8);
  }

  return result;
}

unint64_t sub_1000244D4()
{
  unint64_t result = qword_100077CB0;
  if (!qword_100077CB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005D19C, &type metadata for CacheInvalidationMarker.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100077CB0);
  }

  return result;
}

uint64_t sub_100024518(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010LL && a2 == 0x8000000100057630LL)
  {
    swift_bridgeObjectRelease(0x8000000100057630LL);
    char v3 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100057630LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v3 = v4 ^ 1;
  }

  return v3 & 1;
}

uint64_t sub_100024604(char a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = _s20FMIPClientXPCService6FutureC4uuid33_40B9CAF5474C2AE132CCEC7BECE26906LL10Foundation4UUIDVvpfi_0();
  static Date.distantPast.getter(v6);
  uint64_t v7 = (void *)(v3 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_deviceDiscoveredHandler);
  *uint64_t v7 = 0LL;
  v7[1] = 0LL;
  uint64_t v8 = (void *)(v3 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_discoveryStoppedHandler);
  *uint64_t v8 = 0LL;
  v8[1] = 0LL;
  unint64_t v9 = (void *)(v3 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_requestStartHandler);
  void *v9 = 0LL;
  v9[1] = 0LL;
  unint64_t v10 = (void *)(v3 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_requestStopHandler);
  *unint64_t v10 = 0LL;
  v10[1] = 0LL;
  *(double *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(_BYTE *)(v3 + 24) = a1;
  uint64_t v11 = sub_100005394(&qword_100079660);
  uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B2C0;
  uint64_t v13 = sub_100024740();
  uint64_t v15 = v14;
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = sub_100005854();
  *(void *)(v12 + 3sub_100007A28(v0 + 2) = v13;
  *(void *)(v12 + 40) = v15;
  unint64_t v16 = sub_100005818();
  uint64_t v17 = (void *)static OS_os_log.default.getter(v16);
  uint64_t v18 = static os_log_type_t.default.getter(v17);
  os_log(_:dso:log:type:_:)("%@ created", 10LL, 2LL, &_mh_execute_header, v17, v18, v12);
  swift_bridgeObjectRelease(v12);

  return v3;
}

uint64_t sub_100024740()
{
  v8[0] = 0LL;
  v8[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(33LL);
  v1._object = (void *)0x8000000100057720LL;
  v1._countAndFlagsBits = 0xD000000000000012LL;
  String.append(_:)(v1);
  v2._countAndFlagsBits = UUID.uuidString.getter();
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 0x203A6D203ELL;
  v4._object = (void *)0xE500000000000000LL;
  String.append(_:)(v4);
  char v7 = *(_BYTE *)(v0 + 24);
  _print_unlocked<A, B>(_:_:)( &v7,  v8,  &type metadata for DeviceDiscoveryConfiguration.DiscoveryMode,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v5._countAndFlagsBits = 540697632LL;
  v5._object = (void *)0xE400000000000000LL;
  String.append(_:)(v5);
  Double.write<A>(to:)( v8,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation,  *(double *)(v0 + 16));
  return v8[0];
}

void sub_100024844(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = static os_log_type_t.debug.getter(a1);
  uint64_t v5 = sub_100005394(&qword_100079660);
  uint64_t v6 = swift_allocObject(v5, 112LL, 7LL);
  *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B320;
  uint64_t v7 = sub_100024740();
  uint64_t v9 = v8;
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v10 = sub_100005854();
  *(void *)(v6 + 64) = v10;
  *(void *)(v6 + 3sub_100007A28(v0 + 2) = v7;
  *(void *)(v6 + 40) = v9;
  sub_100007E2C(a1, (uint64_t)v19);
  uint64_t v11 = sub_100005394(&qword_100076D68);
  uint64_t v12 = String.init<A>(describing:)(v19, v11);
  *(void *)(v6 + 96) = &type metadata for String;
  *(void *)(v6 + 104) = v10;
  *(void *)(v6 + 7sub_100007A28(v0 + 2) = v12;
  *(void *)(v6 + 80) = v13;
  unint64_t v14 = sub_100005818();
  uint64_t v15 = (void *)static OS_os_log.default.getter(v14);
  os_log(_:dso:log:type:_:)("%@ didDiscoverDevice %@", 23LL, 2LL, &_mh_execute_header, v15, v4, v6);
  swift_bridgeObjectRelease(v6);

  uint64_t v16 = v2 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_deviceDiscoveredHandler;
  uint64_t v17 = *(void (**)(uint64_t))(v2
                                       + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_deviceDiscoveredHandler);
  if (v17)
  {
    uint64_t v18 = *(void *)(v16 + 8);
    swift_retain(v18);
    v17(a1);
    sub_10000787C((uint64_t)v17, v18);
  }

void sub_100024984(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100005394(&qword_100079660);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B2C0;
  uint64_t v8 = sub_100024740();
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v11 = sub_100005854();
  *(void *)(v7 + 64) = v11;
  *(void *)(v7 + 3sub_100007A28(v0 + 2) = v8;
  *(void *)(v7 + 40) = v10;
  unint64_t v12 = sub_100005818();
  uint64_t v13 = (void *)static OS_os_log.default.getter(v12);
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  os_log(_:dso:log:type:_:)("%@ discoveryDidStop", 19LL, 2LL, &_mh_execute_header, v13, v14, v7);
  swift_bridgeObjectRelease(v7);

  if (a2)
  {
    uint64_t v15 = swift_errorRetain(a2);
    uint64_t v16 = static os_log_type_t.error.getter(v15);
    uint64_t v17 = swift_allocObject(v6, 112LL, 7LL);
    *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B320;
    uint64_t v18 = sub_100024740();
    *(void *)(v17 + 56) = &type metadata for String;
    *(void *)(v17 + 64) = v11;
    *(void *)(v17 + 3sub_100007A28(v0 + 2) = v18;
    *(void *)(v17 + 40) = v19;
    swift_getErrorValue(a2, v27, v26);
    uint64_t v20 = Error.localizedDescription.getter(v26[1], v26[2]);
    *(void *)(v17 + 96) = &type metadata for String;
    *(void *)(v17 + 104) = v11;
    *(void *)(v17 + 7sub_100007A28(v0 + 2) = v20;
    *(void *)(v17 + 80) = v21;
    uint64_t v22 = (void *)static OS_os_log.default.getter(v20);
    os_log(_:dso:log:type:_:)("%@ discoveryDidStop %@", 22LL, 2LL, &_mh_execute_header, v22, v16, v17);
    swift_bridgeObjectRelease(v17);

    swift_errorRelease(a2);
  }

  uint64_t v23 = v3 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_discoveryStoppedHandler;
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v3
                                                + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_discoveryStoppedHandler);
  if (v24)
  {
    uint64_t v25 = *(void *)(v23 + 8);
    swift_retain(v25);
    v24(a1, a2);
    sub_10000787C((uint64_t)v24, v25);
  }

uint64_t sub_100024B5C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_uuid;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_discoveryStopDate;
  uint64_t v4 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  sub_10000787C( *(void *)(v0 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_deviceDiscoveredHandler),  *(void *)(v0 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_deviceDiscoveredHandler + 8));
  sub_10000787C( *(void *)(v0 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_discoveryStoppedHandler),  *(void *)(v0 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_discoveryStoppedHandler + 8));
  sub_10000787C( *(void *)(v0 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_requestStartHandler),  *(void *)(v0 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_requestStartHandler + 8));
  sub_10000787C( *(void *)(v0 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_requestStopHandler),  *(void *)(v0 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_requestStopHandler + 8));
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100024C24()
{
  return type metadata accessor for DeviceDiscoverySession(0LL);
}

uint64_t type metadata accessor for DeviceDiscoverySession(uint64_t a1)
{
  uint64_t result = qword_100077CE0;
  if (!qword_100077CE0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DeviceDiscoverySession);
  }
  return result;
}

uint64_t sub_100024C68(uint64_t a1)
{
  v5[0] = "\t";
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      void v5[2] = *(void *)(result - 8) + 64LL;
      v5[3] = &unk_10005D2E0;
      v5[4] = &unk_10005D2E0;
      void v5[5] = &unk_10005D2E0;
      v5[6] = &unk_10005D2E0;
      uint64_t result = swift_updateClassMetadata2(a1, 256LL, 7LL, v5, a1 + 80);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_100024D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v33 = a3;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = &v34[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = sub_100005394(&qword_100079660);
  uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
  *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B2C0;
  uint64_t v15 = sub_100024740();
  uint64_t v17 = v16;
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_100005854();
  *(void *)(v14 + 3sub_100007A28(v0 + 2) = v15;
  *(void *)(v14 + 40) = v17;
  unint64_t v18 = sub_100005818();
  uint64_t v19 = (void *)static OS_os_log.default.getter(v18);
  uint64_t v20 = static os_log_type_t.default.getter(v19);
  os_log(_:dso:log:type:_:)("%@ startDiscovering", 19LL, 2LL, &_mh_execute_header, v19, v20, v14);
  swift_bridgeObjectRelease(v14);

  Date.init(timeIntervalSinceNow:)(*(double *)(v5 + 16));
  uint64_t v21 = v5 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_discoveryStopDate;
  swift_beginAccess( v5 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_discoveryStopDate,  v34,  33LL,  0LL);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v10 + 40))(v21, v12, v9);
  swift_endAccess(v34);
  uint64_t v22 = (void *)(v5 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_deviceDiscoveredHandler);
  uint64_t v23 = *(void *)(v5 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_deviceDiscoveredHandler);
  uint64_t v24 = *(void *)(v5 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_deviceDiscoveredHandler + 8);
  *uint64_t v22 = a1;
  v22[1] = a2;
  swift_retain(a2);
  sub_10000787C(v23, v24);
  uint64_t v25 = (void *)(v5 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_discoveryStoppedHandler);
  uint64_t v26 = *(void *)(v5 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_discoveryStoppedHandler);
  uint64_t v27 = *(void *)(v5 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_discoveryStoppedHandler + 8);
  *uint64_t v25 = v33;
  v25[1] = a4;
  swift_retain(a4);
  uint64_t result = sub_10000787C(v26, v27);
  uint64_t v29 = v5 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_requestStartHandler;
  uint64_t v30 = *(void (**)(uint64_t))(v5
                                       + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_requestStartHandler);
  if (v30)
  {
    uint64_t v31 = *(void *)(v29 + 8);
    uint64_t v32 = swift_retain(v31);
    v30(v32);
    return sub_10000787C((uint64_t)v30, v31);
  }

  return result;
}

void sub_100024EFC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100005394(&qword_100079660);
  uint64_t v3 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B2C0;
  uint64_t v4 = sub_100024740();
  uint64_t v6 = v5;
  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = sub_100005854();
  *(void *)(v3 + 3sub_100007A28(v0 + 2) = v4;
  *(void *)(v3 + 40) = v6;
  unint64_t v7 = sub_100005818();
  uint64_t v8 = (void *)static OS_os_log.default.getter(v7);
  uint64_t v9 = static os_log_type_t.default.getter(v8);
  os_log(_:dso:log:type:_:)("%@ stopDiscovering", 18LL, 2LL, &_mh_execute_header, v8, v9, v3);
  swift_bridgeObjectRelease(v3);

  uint64_t v10 = v1 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_requestStopHandler;
  uint64_t v11 = *(void (**)(uint64_t))(v1
                                       + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_requestStopHandler);
  if (v11)
  {
    uint64_t v12 = *(void *)(v10 + 8);
    uint64_t v13 = swift_retain(v12);
    v11(v13);
    sub_10000787C((uint64_t)v11, v12);
  }

void *sub_100024FF4(uint64_t a1)
{
  uint64_t v1 = static os_log_type_t.default.getter(a1);
  unint64_t v2 = sub_100005818();
  uint64_t v3 = (void *)static OS_os_log.default.getter(v2);
  os_log(_:dso:log:type:_:)( "This is not implemented. Please rely on the deviceDiscoveredHandler.",  68LL,  2LL,  &_mh_execute_header,  v3,  v1,  _swiftEmptyArrayStorage);

  return _swiftEmptyArrayStorage;
}

uint64_t sub_100025068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100024D0C(a1, a2, a3, a4);
}

void sub_100025088()
{
}

Swift::Int sub_1000250A8()
{
  uint64_t v0 = type metadata accessor for UUID(0LL);
  uint64_t v1 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_100025124(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

Swift::Int sub_100025190(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_100025208(void *a1, void *a2)
{
  return static UUID.== infix(_:_:)( *a1 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_uuid,  *a2 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_uuid);
}

uint64_t sub_100025224()
{
  return sub_100024740();
}

uint64_t sub_100025244()
{
  return sub_1000078F8(&qword_100077E20, type metadata accessor for DeviceDiscoverySession, (uint64_t)&unk_10005D320);
}

uint64_t sub_100025270()
{
  uint64_t v1 = v0;
  id v2 = [v0 bleDevice];
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = [v2 bluetoothAddress];

    if (v4)
    {
      uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
      unint64_t v7 = v6;

      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10000AADC(v5, v7);
      id v9 = -[objc_class fm_MACAddressString](isa, "fm_MACAddressString");
      unint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      uint64_t v12 = v11;

      Hasher.init(_seed:)(v62, *((void *)&_swiftEmptySetSingleton + 5));
      Hasher._combine(_:)(1uLL);
      swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
      String.hash(into:)(v62, v10, v12);
      Swift::Int v13 = Hasher._finalize()();
      uint64_t v14 = -1LL << *((_BYTE *)&_swiftEmptySetSingleton + 32);
      unint64_t v15 = v13 & ~v14;
      if (((*(void *)((char *)&_swiftEmptySetSingleton + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v15) & 1) != 0)
      {
        uint64_t v16 = ~v14;
        uint64_t v17 = *((void *)&_swiftEmptySetSingleton + 6);
        while (1)
        {
          uint64_t v18 = v17 + 24 * v15;
          if (!*(_BYTE *)(v18 + 16))
          {
            uint64_t v19 = *(void *)(v18 + 8);
            BOOL v20 = *(void *)v18 == v10 && v19 == v12;
            if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v18, v19, v10, v12, 0LL) & 1) != 0) {
              break;
            }
          }

          unint64_t v15 = (v15 + 1) & v16;
        }

        swift_bridgeObjectRelease(v12);
        uint64_t v21 = &_swiftEmptySetSingleton;
      }

      else
      {
LABEL_14:
        swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptySetSingleton);
        uint64_t v61 = &_swiftEmptySetSingleton;
        unint64_t v24 = *((void *)&_swiftEmptySetSingleton + 2);
        unint64_t v23 = *((void *)&_swiftEmptySetSingleton + 3);
        uint64_t result = swift_bridgeObjectRetain(v12);
        if (v23 <= v24)
        {
          uint64_t v26 = v24 + 1;
          if (isUniquelyReferenced_nonNull_native) {
            sub_100035DE8(v26);
          }
          else {
            sub_10003764C(v26);
          }
          Hasher.init(_seed:)(v62, *((void *)&_swiftEmptySetSingleton + 5));
          Hasher._combine(_:)(1uLL);
          String.hash(into:)(v62, v10, v12);
          uint64_t result = Hasher._finalize()();
          uint64_t v27 = -1LL << *((_BYTE *)&_swiftEmptySetSingleton + 32);
          unint64_t v15 = result & ~v27;
          if (((*(void *)((char *)&_swiftEmptySetSingleton + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v15) & 1) != 0)
          {
            uint64_t v28 = ~v27;
            uint64_t v29 = *((void *)&_swiftEmptySetSingleton + 6);
            do
            {
              uint64_t v30 = v29 + 24 * v15;
              if (!*(_BYTE *)(v30 + 16))
              {
                uint64_t v31 = *(void *)(v30 + 8);
                if (*(void *)v30 == v10 && v31 == v12) {
                  goto LABEL_59;
                }
                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v30, v31, v10, v12, 0LL);
                if ((result & 1) != 0) {
                  goto LABEL_59;
                }
              }

              unint64_t v15 = (v15 + 1) & v28;
            }

            while (((*(void *)((char *)&_swiftEmptySetSingleton + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v15) & 1) != 0);
          }
        }

        else if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_100037150();
        }

        *(void *)((char *)&_swiftEmptySetSingleton + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8LL) + 56) |= 1LL << v15;
        uint64_t v33 = *((void *)&_swiftEmptySetSingleton + 6) + 24 * v15;
        *(void *)uint64_t v33 = v10;
        *(void *)(v33 + 8) = v12;
        *(_BYTE *)(v33 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
        uint64_t v34 = *((void *)&_swiftEmptySetSingleton + 2);
        BOOL v35 = __OFADD__(v34, 1LL);
        uint64_t v36 = v34 + 1;
        if (v35) {
          goto LABEL_65;
        }
        *((void *)&_swiftEmptySetSingleton + sub_100007A28(v0 + 2) = v36;
        swift_bridgeObjectRelease(v12);
        uint64_t v21 = (void *)0x8000000000000000LL;
      }

      swift_bridgeObjectRelease(v21);
    }
  }

  id v37 = objc_msgSend(v1, "idsIdentifier", v61);
  if (!v37) {
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  uint64_t v38 = v37;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  uint64_t v1 = v39;

  Hasher.init(_seed:)(v62, *((void *)&_swiftEmptySetSingleton + 5));
  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
  String.hash(into:)(v62, v12, v1);
  Swift::Int v40 = Hasher._finalize()();
  uint64_t v41 = -1LL << *((_BYTE *)&_swiftEmptySetSingleton + 32);
  unint64_t v10 = v40 & ~v41;
  if (((*(void *)((char *)&_swiftEmptySetSingleton + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v10) & 1) != 0)
  {
    uint64_t v42 = ~v41;
    uint64_t v43 = *((void *)&_swiftEmptySetSingleton + 6);
    while (1)
    {
      uint64_t v44 = v43 + 24 * v10;
      if (*(_BYTE *)(v44 + 16) == 1)
      {
        uint64_t v45 = *(void **)(v44 + 8);
        BOOL v46 = *(void *)v44 == v12 && v45 == v1;
        if (v46 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v44, v45, v12, v1, 0LL) & 1) != 0) {
          break;
        }
      }

      unint64_t v10 = (v10 + 1) & v42;
    }

    swift_bridgeObjectRelease(v1);
    uint64_t v47 = &_swiftEmptySetSingleton;
    goto LABEL_62;
  }

LABEL_44:
  swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
  int v48 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptySetSingleton);
  unint64_t v50 = *((void *)&_swiftEmptySetSingleton + 2);
  unint64_t v49 = *((void *)&_swiftEmptySetSingleton + 3);
  uint64_t result = swift_bridgeObjectRetain(v1);
  if (v49 > v50)
  {
    if ((v48 & 1) == 0) {
      uint64_t result = (uint64_t)sub_100037150();
    }
    goto LABEL_60;
  }

  uint64_t v51 = v50 + 1;
  if (v48) {
    sub_100035DE8(v51);
  }
  else {
    sub_10003764C(v51);
  }
  Hasher.init(_seed:)(v62, *((void *)&_swiftEmptySetSingleton + 5));
  Hasher._combine(_:)(2uLL);
  String.hash(into:)(v62, v12, v1);
  uint64_t result = Hasher._finalize()();
  uint64_t v52 = -1LL << *((_BYTE *)&_swiftEmptySetSingleton + 32);
  unint64_t v10 = result & ~v52;
  uint64_t v53 = ~v52;
  uint64_t v54 = *((void *)&_swiftEmptySetSingleton + 6);
  while (1)
  {
    uint64_t v55 = v54 + 24 * v10;
    if (*(_BYTE *)(v55 + 16) == 1)
    {
      uint64_t v56 = *(void **)(v55 + 8);
      if (*(void *)v55 == v12 && v56 == v1) {
        break;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v55, v56, v12, v1, 0LL);
      if ((result & 1) != 0) {
        break;
      }
    }

    unint64_t v10 = (v10 + 1) & v53;
  }

LABEL_59:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for TransportAddress);
  __break(1u);
LABEL_60:
  *(void *)((char *)&_swiftEmptySetSingleton + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8LL) + 56) |= 1LL << v10;
  uint64_t v58 = *((void *)&_swiftEmptySetSingleton + 6) + 24 * v10;
  *(void *)uint64_t v58 = v12;
  *(void *)(v58 + 8) = v1;
  *(_BYTE *)(v58 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
  uint64_t v59 = *((void *)&_swiftEmptySetSingleton + 2);
  BOOL v35 = __OFADD__(v59, 1LL);
  uint64_t v60 = v59 + 1;
  if (!v35)
  {
    *((void *)&_swiftEmptySetSingleton + sub_100007A28(v0 + 2) = v60;
    swift_bridgeObjectRelease(v1);
    uint64_t v47 = (void *)0x8000000000000000LL;
LABEL_62:
    swift_bridgeObjectRelease(v47);
    return (uint64_t)&_swiftEmptySetSingleton;
  }

  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

  *(void *)((char *)&_swiftEmptySetSingleton + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8LL) + 56) |= 1LL << v6;
  unint64_t v49 = *((void *)&_swiftEmptySetSingleton + 6) + 24 * v6;
  *(void *)unint64_t v49 = a1;
  *(void *)(v49 + 8) = a2;
  *(_BYTE *)(v49 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
  unint64_t v50 = *((void *)&_swiftEmptySetSingleton + 2);
  uint64_t v29 = __OFADD__(v50, 1LL);
  uint64_t v51 = v50 + 1;
  if (!v29)
  {
    *((void *)&_swiftEmptySetSingleton + sub_100007A28(v0 + 2) = v51;
    swift_bridgeObjectRelease(a2);
    uint64_t v38 = (void *)0x8000000000000000LL;
LABEL_61:
    swift_bridgeObjectRelease(v38);
    return (uint64_t)&_swiftEmptySetSingleton;
  }

uint64_t sub_10002582C()
{
  return sub_100025270();
}

uint64_t sub_10002584C(int a1)
{
  uint64_t v2 = v1;
  int v19 = a1;
  uint64_t v18 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_OWORD *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  *(_OWORD *)(v2 + 3sub_100007A28(v0 + 2) = 0u;
  *(void *)(v2 + 48) = 0LL;
  *(void *)(v2 + 56) = &_swiftEmptyArrayStorage;
  uint64_t v12 = sub_1000079C8(0LL, (unint64_t *)&qword_100078760, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v12);
  BOOL v20 = &_swiftEmptyArrayStorage;
  uint64_t v13 = sub_1000078F8( (unint64_t *)&qword_100076B38,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v14 = sub_100005394((uint64_t *)&unk_100078770);
  uint64_t v15 = sub_10001A008( (unint64_t *)&qword_100076B40,  (uint64_t *)&unk_100078770,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v14, v15, v6, v13);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v18);
  *(void *)(v2 + 64) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000014LL,  0x8000000100057880LL,  v11,  v8,  v5,  0LL);
  *(_BYTE *)(v2 + 7sub_100007A28(v0 + 2) = v19;
  return v2;
}

void sub_100025A3C(uint64_t a1)
{
  uint64_t v2 = (void *)v1;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 64));
  if (a1)
  {
    v37[0] = a1;
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    uint64_t v4 = sub_100005394(&qword_100076D70);
    uint64_t v5 = swift_dynamicCast(&v36, v37, v4, &type metadata for DeviceDiscovery.DiscoveryError, 0LL);
    if ((_DWORD)v5)
    {
      if (v36)
      {
        swift_errorRelease(a1);
      }

      else
      {
        uint64_t v24 = static os_log_type_t.error.getter(v5);
        uint64_t v25 = sub_100005394(&qword_100079660);
        uint64_t v26 = swift_allocObject(v25, 72LL, 7LL);
        *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B2C0;
        uint64_t v35 = a1;
        swift_errorRetain(a1);
        uint64_t v27 = String.init<A>(describing:)(&v35, v4);
        uint64_t v29 = v28;
        *(void *)(v26 + 56) = &type metadata for String;
        *(void *)(v26 + 64) = sub_100005854();
        *(void *)(v26 + 3sub_100007A28(v0 + 2) = v27;
        *(void *)(v26 + 40) = v29;
        uint64_t v30 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
        uint64_t v31 = (void *)static OS_os_log.default.getter(v30);
        os_log(_:dso:log:type:_:)("Discovery stopping with error: %@", 33LL, 2LL, &_mh_execute_header, v31, v24, v26);
        swift_errorRelease(a1);
        swift_bridgeObjectRelease(v26);
      }

      swift_errorRelease(v37[0]);
      uint64_t v17 = (void *)v2[2];
      if (!v17) {
        goto LABEL_13;
      }
      goto LABEL_8;
    }

    uint64_t v9 = swift_errorRelease(v37[0]);
    uint64_t v10 = static os_log_type_t.error.getter(v9);
    uint64_t v11 = sub_100005394(&qword_100079660);
    uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
    *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B2C0;
    v37[0] = a1;
    swift_errorRetain(a1);
    uint64_t v13 = String.init<A>(describing:)(v37, v4);
    uint64_t v15 = v14;
    *(void *)(v12 + 56) = &type metadata for String;
    *(void *)(v12 + 64) = sub_100005854();
    *(void *)(v12 + 3sub_100007A28(v0 + 2) = v13;
    *(void *)(v12 + 40) = v15;
    uint64_t v16 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v7 = (void *)static OS_os_log.default.getter(v16);
    os_log(_:dso:log:type:_:)("Discovery stopping with error: %@", 33LL, 2LL, &_mh_execute_header, v7, v10, v12);
    swift_errorRelease(a1);
    swift_bridgeObjectRelease(v12);
  }

  else
  {
    uint64_t v6 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v7 = (void *)static OS_os_log.default.getter(v6);
    uint64_t v8 = static os_log_type_t.default.getter(v7);
    os_log(_:dso:log:type:_:)("Discovery stopping", 18LL, 2LL, &_mh_execute_header, v7, v8, _swiftEmptyArrayStorage);
  }

  uint64_t v17 = (void *)v2[2];
  if (!v17)
  {
LABEL_13:
    uint64_t v32 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v33 = (void *)static OS_os_log.default.getter(v32);
    uint64_t v34 = static os_log_type_t.default.getter(v33);
    os_log(_:dso:log:type:_:)( "Discovery was nil already.",  26LL,  2LL,  &_mh_execute_header,  v33,  v34,  _swiftEmptyArrayStorage);

    return;
  }

void sub_100025E1C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(dispatch_queue_s **)(v0 + 64);
  dispatch_assert_queue_V2(v2);
  uint64_t v3 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v4 = (void *)static OS_os_log.default.getter(v3);
  uint64_t v5 = static os_log_type_t.default.getter(v4);
  os_log(_:dso:log:type:_:)( "Discovery startDiscovery called",  31LL,  2LL,  &_mh_execute_header,  v4,  v5,  _swiftEmptyArrayStorage);

  if (*(void *)(v0 + 16))
  {
    id v26 = (id)static OS_os_log.default.getter(v6);
    uint64_t v7 = static os_log_type_t.default.getter(v26);
    os_log(_:dso:log:type:_:)( "Discovery already started - nothing to do.",  42LL,  2LL,  &_mh_execute_header,  v26,  v7,  _swiftEmptyArrayStorage);
  }

  else
  {
    id v8 = [objc_allocWithZone(SFDeviceDiscovery) init];
    uint64_t v9 = v8;
    if (*(_BYTE *)(v0 + 72) == 1) {
      uint64_t v10 = 1LL;
    }
    else {
      uint64_t v10 = 2LL;
    }
    [v8 setDiscoveryFlags:v10];
    [v9 setRssiThreshold:-120];
    [v9 setChangeFlags:1];
    [v9 setScanRate:50];
    [v9 setOverrideScreenOff:1];
    [v9 setDispatchQueue:v2];
    uint64_t v11 = swift_allocObject(&unk_10006C620, 24LL, 7LL);
    swift_weakInit(v11 + 16, v0);
    uint64_t v31 = sub_100027358;
    uint64_t v32 = v11;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v28 = 1107296256LL;
    uint64_t v29 = (void (*)(uint64_t, void *))sub_10004DB74;
    uint64_t v30 = &unk_10006C728;
    uint64_t v12 = _Block_copy(&aBlock);
    swift_release(v32);
    [v9 setInterruptionHandler:v12];
    _Block_release(v12);
    uint64_t v13 = swift_allocObject(&unk_10006C620, 24LL, 7LL);
    swift_weakInit(v13 + 16, v0);
    uint64_t v31 = sub_10002737C;
    uint64_t v32 = v13;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v28 = 1107296256LL;
    uint64_t v29 = (void (*)(uint64_t, void *))sub_10004DB74;
    uint64_t v30 = &unk_10006C750;
    uint64_t v14 = _Block_copy(&aBlock);
    swift_release(v32);
    [v9 setInvalidationHandler:v14];
    _Block_release(v14);
    uint64_t v15 = swift_allocObject(&unk_10006C620, 24LL, 7LL);
    swift_weakInit(v15 + 16, v0);
    uint64_t v31 = sub_1000273A0;
    uint64_t v32 = v15;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v28 = 1107296256LL;
    uint64_t v29 = sub_100006800;
    uint64_t v30 = &unk_10006C778;
    uint64_t v16 = _Block_copy(&aBlock);
    swift_release(v32);
    [v9 setDeviceFoundHandler:v16];
    _Block_release(v16);
    uint64_t v31 = Future.didCancel();
    uint64_t v32 = 0LL;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v28 = 1107296256LL;
    uint64_t v29 = sub_100026768;
    uint64_t v30 = &unk_10006C7A0;
    uint64_t v17 = _Block_copy(&aBlock);
    [v9 setDeviceChangedHandler:v17];
    _Block_release(v17);
    uint64_t v31 = sub_1000267C4;
    uint64_t v32 = 0LL;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v28 = 1107296256LL;
    uint64_t v29 = sub_100006800;
    uint64_t v30 = &unk_10006C7C8;
    uint64_t v18 = _Block_copy(&aBlock);
    [v9 setDeviceLostHandler:v18];
    _Block_release(v18);
    uint64_t v19 = sub_100005394(&qword_100079660);
    uint64_t v20 = swift_allocObject(v19, 72LL, 7LL);
    *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B2C0;
    *(void *)(v20 + 56) = sub_1000079C8(0LL, &qword_100077F60, &OBJC_CLASS___SFDeviceDiscovery_ptr);
    *(void *)(v20 + 64) = sub_1000273A8(&qword_100077F68, &qword_100077F60, &OBJC_CLASS___SFDeviceDiscovery_ptr);
    *(void *)(v20 + 3sub_100007A28(v0 + 2) = v9;
    id v21 = v9;
    uint64_t v22 = (void *)static OS_os_log.default.getter(v21);
    uint64_t v23 = static os_log_type_t.default.getter(v22);
    os_log(_:dso:log:type:_:)("Discovery %@", 12LL, 2LL, &_mh_execute_header, v22, v23, v20);
    swift_bridgeObjectRelease(v20);

    uint64_t v31 = sub_1000268BC;
    uint64_t v32 = 0LL;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v28 = 1107296256LL;
    uint64_t v29 = sub_100039988;
    uint64_t v30 = &unk_10006C7F0;
    uint64_t v24 = _Block_copy(&aBlock);
    [v21 activateWithCompletion:v24];
    _Block_release(v24);
    uint64_t v25 = *(void **)(v1 + 16);
    *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v21;
  }

uint64_t sub_1000262DC(uint64_t a1, const char *a2, char a3)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v7 = (void *)static OS_os_log.default.getter(v6);
  uint64_t v8 = static os_log_type_t.default.getter(v7);
  os_log(_:dso:log:type:_:)(a2, 21LL, 2LL, &_mh_execute_header, v7, v8, _swiftEmptyArrayStorage);

  swift_beginAccess(v5, v14, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    uint64_t v10 = result;
    unint64_t v11 = sub_1000273E8();
    uint64_t v12 = swift_allocError(&type metadata for DeviceDiscovery.DiscoveryError, v11, 0LL, 0LL);
    *uint64_t v13 = a3;
    sub_100025A3C(v12);
    swift_errorRelease(v12);
    return swift_release(v10);
  }

  return result;
}

uint64_t sub_1000263C0(void *a1, uint64_t a2)
{
  id v4 = [a1 idsIdentifier];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    unint64_t v8 = v7;
  }

  else
  {
    uint64_t v6 = 0LL;
    unint64_t v8 = 0LL;
  }

  uint64_t v9 = a2 + 16;
  id v10 = [a1 bleDevice];
  if (v10
    && (unint64_t v11 = v10,
        id v12 = [v10 advertisementFields],
        v11,
        v12))
  {
    uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v12,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  uint64_t v14 = static os_log_type_t.info.getter();
  uint64_t v15 = sub_100005394(&qword_100079660);
  uint64_t v16 = swift_allocObject(v15, 152LL, 7LL);
  *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005C070;
  uint64_t v17 = sub_1000079C8(0LL, &qword_100077F70, &OBJC_CLASS___SFDevice_ptr);
  *(void *)(v16 + 56) = v17;
  *(void *)(v16 + 64) = sub_1000273A8(&qword_100077F78, &qword_100077F70, &OBJC_CLASS___SFDevice_ptr);
  *(void *)(v16 + 3sub_100007A28(v0 + 2) = a1;
  *(void *)(v16 + 96) = &type metadata for String;
  unint64_t v18 = sub_100005854();
  *(void *)(v16 + 104) = v18;
  uint64_t v19 = 0x6920736469206F6ELL;
  if (v8) {
    uint64_t v19 = v6;
  }
  unint64_t v20 = 0xE900000000000064LL;
  if (v8) {
    unint64_t v20 = v8;
  }
  *(void *)(v16 + 7sub_100007A28(v0 + 2) = v19;
  *(void *)(v16 + 80) = v20;
  if (v13)
  {
    uint64_t v39 = sub_100005394(&qword_100077F80);
    Swift::Int v40 = (_UNKNOWN **)sub_10001A008( &qword_100077F88,  &qword_100077F80,  (uint64_t)&protocol conformance descriptor for [A : B]);
    *(void *)&__int128 v38 = v13;
    sub_100007A00(&v38, v16 + 112);
  }

  else
  {
    *(void *)(v16 + 136) = &type metadata for String;
    *(void *)(v16 + 144) = v18;
    strcpy((char *)(v16 + 112), "no ble fields");
    *(_WORD *)(v16 + 126) = -4864;
  }

  id v21 = a1;
  uint64_t v22 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v23 = (void *)static OS_os_log.default.getter(v22);
  os_log(_:dso:log:type:_:)("Discovery device found: %@ %@ %@", 32LL, 2LL, &_mh_execute_header, v23, v14, v16);
  swift_bridgeObjectRelease(v16);

  swift_beginAccess(v9, v37, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v9);
  if (Strong)
  {
    uint64_t v25 = Strong;
    id v26 = *(void **)(Strong + 56);
    id v27 = a1;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
    *(void *)(v25 + 56) = v26;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      id v26 = sub_10002F804(0LL, v26[2] + 1LL, 1, v26);
      *(void *)(v25 + 56) = v26;
    }

    unint64_t v30 = v26[2];
    unint64_t v29 = v26[3];
    if (v30 >= v29 >> 1)
    {
      id v26 = sub_10002F804((void *)(v29 > 1), v30 + 1, 1, v26);
      *(void *)(v25 + 56) = v26;
    }

    uint64_t v39 = v17;
    Swift::Int v40 = &off_10006C5D8;
    *(void *)&__int128 v38 = v27;
    void v26[2] = v30 + 1;
    sub_100007A00(&v38, (uint64_t)&v26[5 * v30 + 4]);
    swift_release(v25);
  }

  swift_beginAccess(v9, v36, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v9);
  if (result)
  {
    uint64_t v32 = result;
    uint64_t v34 = *(void (**)(__int128 *))(result + 24);
    uint64_t v33 = *(void *)(result + 32);
    sub_100007A18((uint64_t)v34, v33);
    uint64_t result = swift_release(v32);
    if (v34)
    {
      uint64_t v39 = v17;
      Swift::Int v40 = &off_10006C5D8;
      *(void *)&__int128 v38 = a1;
      id v35 = a1;
      v34(&v38);
      sub_10000787C((uint64_t)v34, v33);
      return sub_100007A28(&v38);
    }
  }

  return result;
}

void sub_100026768(uint64_t a1, void *a2)
{
  id v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

void sub_1000267C4(void *a1)
{
  uint64_t v2 = sub_100005394(&qword_100079660);
  uint64_t v3 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B2C0;
  *(void *)(v3 + 56) = sub_1000079C8(0LL, &qword_100077F70, &OBJC_CLASS___SFDevice_ptr);
  *(void *)(v3 + 64) = sub_1000273A8(&qword_100077F78, &qword_100077F70, &OBJC_CLASS___SFDevice_ptr);
  *(void *)(v3 + 3sub_100007A28(v0 + 2) = a1;
  sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  id v5 = (id)static OS_os_log.default.getter(a1);
  uint64_t v4 = static os_log_type_t.default.getter(v5);
  os_log(_:dso:log:type:_:)("Discovery device lost: %@", 25LL, 2LL, &_mh_execute_header, v5, v4, v3);
  swift_bridgeObjectRelease(v3);
}

void sub_1000268BC(uint64_t a1)
{
  uint64_t v2 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v3 = (void *)static OS_os_log.default.getter(v2);
  uint64_t v4 = static os_log_type_t.default.getter(v3);
  os_log(_:dso:log:type:_:)( "Discovery activate completion",  29LL,  2LL,  &_mh_execute_header,  v3,  v4,  _swiftEmptyArrayStorage);

  if (a1)
  {
    uint64_t v5 = swift_errorRetain(a1);
    uint64_t v6 = static os_log_type_t.error.getter(v5);
    uint64_t v7 = sub_100005394(&qword_100079660);
    uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
    *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B2C0;
    swift_getErrorValue(a1, v15, v14);
    uint64_t v9 = Error.localizedDescription.getter(v14[1], v14[2]);
    uint64_t v11 = v10;
    *(void *)(v8 + 56) = &type metadata for String;
    unint64_t v12 = sub_100005854();
    *(void *)(v8 + 64) = v12;
    *(void *)(v8 + 3sub_100007A28(v0 + 2) = v9;
    *(void *)(v8 + 40) = v11;
    uint64_t v13 = (void *)static OS_os_log.default.getter(v12);
    os_log(_:dso:log:type:_:)("Discovery activate error: %@", 28LL, 2LL, &_mh_execute_header, v13, v6, v8);
    swift_bridgeObjectRelease(v8);

    swift_errorRelease(a1);
  }

uint64_t sub_100026A0C()
{
  sub_10000787C(*(void *)(v0 + 24), *(void *)(v0 + 32));
  sub_10000787C(*(void *)(v0 + 40), *(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));

  return swift_deallocClassInstance(v0, 73LL, 7LL);
}

uint64_t type metadata accessor for DeviceDiscovery()
{
  return objc_opt_self(&OBJC_CLASS____TtC20FMIPClientXPCService15DeviceDiscovery);
}

uint64_t sub_100026A70()
{
  uint64_t v1 = v0;
  uint64_t v11 = _swiftEmptyArrayStorage;
  uint64_t v2 = *(dispatch_queue_s **)(v0 + 64);
  uint64_t v3 = swift_allocObject(&unk_10006C6C0, 32LL, 7LL);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = &v11;
  *(void *)(v3 + 24) = v0;
  uint64_t v4 = swift_allocObject(&unk_10006C6E8, 32LL, 7LL);
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100027318;
  *(void *)(v4 + 24) = v3;
  aBlock[4] = sub_1000078F0;
  uint64_t v10 = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10003CE54;
  void aBlock[3] = &unk_10006C700;
  uint64_t v5 = _Block_copy(aBlock);
  uint64_t v6 = v10;
  swift_retain(v1);
  swift_retain(v4);
  swift_release(v6);
  dispatch_sync(v2, v5);
  _Block_release(v5);
  LOBYTE(vsub_100007A28(v0 + 2) = swift_isEscapingClosureAtFileLocation(v4, "", 107LL, 145LL, 31LL, 1LL);
  uint64_t result = swift_release(v4);
  if ((v2 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = v11;
    swift_release(v3);
    return (uint64_t)v8;
  }

  return result;
}

uint64_t sub_100026BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v30 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v28 = *(void *)(v12 - 8);
  uint64_t v29 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v16 = (void *)static OS_os_log.default.getter(v15);
  uint64_t v17 = static os_log_type_t.default.getter(v16);
  os_log(_:dso:log:type:_:)( "Discovery startDiscovering",  26LL,  2LL,  &_mh_execute_header,  v16,  v17,  _swiftEmptyArrayStorage);

  v27[1] = *(void *)(v4 + 64);
  uint64_t v18 = swift_allocObject(&unk_10006C620, 24LL, 7LL);
  swift_weakInit(v18 + 16, v4);
  uint64_t v19 = (void *)swift_allocObject(&unk_10006C670, 56LL, 7LL);
  v19[2] = v18;
  void v19[3] = a1;
  v19[4] = a2;
  v19[5] = a3;
  v19[6] = a4;
  aBlock[4] = sub_1000272E4;
  uint64_t v33 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  void aBlock[3] = &unk_10006C688;
  unint64_t v20 = _Block_copy(aBlock);
  swift_retain(v18);
  swift_retain(a2);
  uint64_t v21 = swift_retain(a4);
  static DispatchQoS.unspecified.getter(v21);
  uint64_t v31 = _swiftEmptyArrayStorage;
  uint64_t v22 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v23 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v24 = sub_10001A008(&qword_100076D58, (uint64_t *)&unk_100078740, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v23, v24, v9, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v11, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v29);
  uint64_t v25 = v33;
  swift_release(v18);
  return swift_release(v25);
}

uint64_t sub_100026E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1 + 16;
  swift_beginAccess(a1 + 16, v22, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v9);
  if (Strong)
  {
    uint64_t v11 = Strong;
    uint64_t v12 = *(void *)(Strong + 24);
    uint64_t v13 = *(void *)(Strong + 32);
    *(void *)(Strong + 24) = a2;
    *(void *)(Strong + 3sub_100007A28(v0 + 2) = a3;
    swift_retain(a3);
    sub_10000787C(v12, v13);
    swift_release(v11);
  }

  swift_beginAccess(v9, v21, 0LL, 0LL);
  uint64_t v14 = swift_weakLoadStrong(v9);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)(v14 + 40);
    uint64_t v17 = *(void *)(v14 + 48);
    *(void *)(v14 + 40) = a4;
    *(void *)(v14 + 48) = a5;
    swift_retain(a5);
    sub_10000787C(v16, v17);
    swift_release(v15);
  }

  swift_beginAccess(v9, v20, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v9);
  if (result)
  {
    uint64_t v19 = result;
    sub_100025E1C();
    return swift_release(v19);
  }

  return result;
}

uint64_t sub_100026F58()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v20 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v4 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v8 = (void *)static OS_os_log.default.getter(v7);
  uint64_t v9 = static os_log_type_t.default.getter(v8);
  os_log(_:dso:log:type:_:)( "Discovery stopDiscovering",  25LL,  2LL,  &_mh_execute_header,  v8,  v9,  _swiftEmptyArrayStorage);

  uint64_t v10 = swift_allocObject(&unk_10006C620, 24LL, 7LL);
  swift_weakInit(v10 + 16, v0);
  aBlock[4] = sub_100027290;
  uint64_t v23 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  void aBlock[3] = &unk_10006C638;
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = swift_retain(v10);
  static DispatchQoS.unspecified.getter(v12);
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v13 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v14 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v15 = sub_10001A008(&qword_100076D58, (uint64_t *)&unk_100078740, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v14, v15, v1, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v6, v3, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v19);
  uint64_t v16 = v23;
  swift_release(v10);
  return swift_release(v16);
}

uint64_t sub_1000271B4(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    uint64_t v3 = result;
    sub_100025A3C(0LL);
    return swift_release(v3);
  }

  return result;
}

uint64_t sub_10002720C()
{
  return sub_100026A70();
}

uint64_t sub_10002722C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100026BB0(a1, a2, a3, a4);
}

uint64_t sub_10002724C()
{
  return sub_100026F58();
}

uint64_t sub_10002726C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100027290()
{
  return sub_1000271B4(v0);
}

uint64_t sub_100027298(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100007A28(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000272A8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000272B0()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000272E4()
{
  return sub_100026E4C(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_1000272F4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100027318()
{
  uint64_t v1 = *(uint64_t **)(v0 + 16);
  uint64_t v2 = *(void *)(*(void *)(v0 + 24) + 56LL);
  uint64_t v3 = *v1;
  *uint64_t v1 = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_100027348()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100027358()
{
  return sub_1000262DC(v0, "Discovery Interrupted", 1);
}

uint64_t sub_10002737C()
{
  return sub_1000262DC(v0, "Discovery Invalidated", 2);
}

uint64_t sub_1000273A0(void *a1)
{
  return sub_1000263C0(a1, v1);
}

uint64_t sub_1000273A8(unint64_t *a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_1000079C8(255LL, a2, a3);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1000273E8()
{
  unint64_t result = qword_100077F90;
  if (!qword_100077F90)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005D4B0, &type metadata for DeviceDiscovery.DiscoveryError);
    atomic_store(result, (unint64_t *)&qword_100077F90);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for DeviceDiscovery.DiscoveryError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100027478 + 4 * byte_10005D3A5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000274AC + 4 * byte_10005D3A0[v4]))();
}

uint64_t sub_1000274AC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000274B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000274BCLL);
  }
  return result;
}

uint64_t sub_1000274C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000274D0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000274D4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000274DC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceDiscovery.DiscoveryError()
{
  return &type metadata for DeviceDiscovery.DiscoveryError;
}

unint64_t sub_1000274FC()
{
  unint64_t result = qword_100077F98;
  if (!qword_100077F98)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005D488, &type metadata for DeviceDiscovery.DiscoveryError);
    atomic_store(result, (unint64_t *)&qword_100077F98);
  }

  return result;
}

uint64_t sub_100027580()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URLComponents(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v19 = 0LL;
  unint64_t v20 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(28LL);
  swift_bridgeObjectRelease(v20);
  uint64_t v22 = 0x746E696F70646E45LL;
  unint64_t v23 = 0xEA0000000000203ALL;
  uint64_t v6 = v0 + OBJC_IVAR____TtC20FMIPClientXPCService25FMIPEndpointConfiguration_urlComponents;
  swift_beginAccess(v6, v21, 0LL, 0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  unint64_t v7 = sub_100027CF4();
  uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter(v2, v7);
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v10);
  v12._countAndFlagsBits = 0x6E6564657263202CLL;
  v12._object = (void *)0xEE00203A6C616974LL;
  String.append(_:)(v12);
  v1 += 16LL;
  swift_beginAccess(v1, v18, 0LL, 0LL);
  sub_100027C6C(v1, (uint64_t)&v19);
  uint64_t v13 = sub_100005394(&qword_100077228);
  v14._countAndFlagsBits = String.init<A>(describing:)(&v19, v13);
  object = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(object);
  return v22;
}

uint64_t sub_100027718()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC20FMIPClientXPCService25FMIPEndpointConfiguration_urlComponents;
  uint64_t v2 = type metadata accessor for URLComponents(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100027770()
{
  return type metadata accessor for FMIPEndpointConfiguration(0LL);
}

uint64_t type metadata accessor for FMIPEndpointConfiguration(uint64_t a1)
{
  return sub_10002163C(a1, qword_100077FC8, (uint64_t)&nominal type descriptor for FMIPEndpointConfiguration);
}

uint64_t sub_10002778C(uint64_t a1)
{
  v4[0] = "(";
  uint64_t result = type metadata accessor for URLComponents(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100027804@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + 16LL;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_100027C6C(v3, a1);
}

uint64_t sub_100027850@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC20FMIPClientXPCService25FMIPEndpointConfiguration_urlComponents;
  swift_beginAccess(v3, v6, 0LL, 0LL);
  uint64_t v4 = type metadata accessor for URLComponents(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_1000278B8()
{
  return sub_100027580();
}

uint64_t sub_1000278D8(void *a1)
{
  return sub_1000279A8(a1, 0x756F5379616C702FLL, 0xEA0000000000646ELL);
}

uint64_t sub_100027908()
{
  return type metadata accessor for PlaySoundEndpoint(0LL);
}

uint64_t type metadata accessor for PlaySoundEndpoint(uint64_t a1)
{
  return sub_10002163C(a1, qword_1000780B8, (uint64_t)&nominal type descriptor for PlaySoundEndpoint);
}

uint64_t sub_100027928(void *a1)
{
  return sub_1000279A8(a1, 0x446863726165732FLL, 0xED00006563697665LL);
}

uint64_t sub_10002795C()
{
  return type metadata accessor for SearchDeviceEndpoint(0LL);
}

uint64_t type metadata accessor for SearchDeviceEndpoint(uint64_t a1)
{
  return sub_10002163C(a1, qword_1000781B0, (uint64_t)&nominal type descriptor for SearchDeviceEndpoint);
}

uint64_t sub_100027978(void *a1)
{
  return sub_1000279A8(a1, 0x766544636E79732FLL, 0xEB00000000656369LL);
}

uint64_t sub_1000279A8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v4 = v3;
  uint64_t v6 = type metadata accessor for URLComponents(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = a1;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_1000087E0(a1, v10);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  uint64_t v14 = v13;
  *(_OWORD *)(v4 + 3sub_100007A28(v0 + 2) = 0u;
  *(void *)(v4 + 48) = 0LL;
  *(_OWORD *)(v4 + sub_100027CB4(v0 + 16) = 0u;
  URLComponents.init()();
  uint64_t v15 = v4 + OBJC_IVAR____TtC20FMIPClientXPCService25FMIPEndpointConfiguration_urlComponents;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))( v4 + OBJC_IVAR____TtC20FMIPClientXPCService25FMIPEndpointConfiguration_urlComponents,  v9,  v6);
  swift_beginAccess(v15, v29, 33LL, 0LL);
  URLComponents.scheme.setter(0x7370747468LL, 0xE500000000000000LL);
  URLComponents.host.setter(v12, v14);
  URLComponents.path.setter(0xD000000000000016LL, 0x8000000100057BB0LL);
  swift_endAccess(v29);
  sub_100007E2C((uint64_t)v30, (uint64_t)v29);
  sub_100027D3C((uint64_t)v29, (uint64_t)&v27);
  swift_beginAccess(v4 + 16, v26, 33LL, 0LL);
  swift_retain(v4);
  sub_100027D84((uint64_t)&v27, v4 + 16);
  swift_endAccess(v26);
  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v15, v6);
  uint64_t v17 = URLComponents.path.getter(v16);
  uint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v29[0] = v24;
  v29[1] = v25;
  uint64_t v27 = v17;
  uint64_t v28 = v19;
  swift_bridgeObjectRetain(v19);
  uint64_t v27 = String.init<A>(_:)( &v27,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v28 = v20;
  String.append<A>(contentsOf:)(v29, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v19);
  uint64_t v21 = v27;
  uint64_t v22 = v28;
  swift_beginAccess(v15, v29, 33LL, 0LL);
  URLComponents.path.setter(v21, v22);
  swift_endAccess(v29);
  swift_release(v4);
  sub_100007A28(v30);
  return v4;
}

uint64_t sub_100027C1C()
{
  return type metadata accessor for VoiceAssistantSyncDeviceEndpoint(0LL);
}

uint64_t type metadata accessor for VoiceAssistantSyncDeviceEndpoint(uint64_t a1)
{
  return sub_10002163C(a1, qword_1000782A8, (uint64_t)&nominal type descriptor for VoiceAssistantSyncDeviceEndpoint);
}

uint64_t sub_100027C38(uint64_t a1)
{
  return swift_updateClassMetadata2(a1, 256LL, 0LL, v2, a1 + 160);
}

uint64_t sub_100027C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005394(&qword_100077228);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100027CB4(uint64_t a1)
{
  uint64_t v2 = sub_100005394(&qword_100077228);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100027CF4()
{
  unint64_t result = qword_100078378;
  if (!qword_100078378)
  {
    uint64_t v1 = type metadata accessor for URLComponents(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for URLComponents, v1);
    atomic_store(result, (unint64_t *)&qword_100078378);
  }

  return result;
}

uint64_t sub_100027D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005394(&qword_100077228);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100027D84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005394(&qword_100077228);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100027DCC@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_1000079C8(0LL, (unint64_t *)&qword_100078760, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v20 = &_swiftEmptyArrayStorage;
  uint64_t v13 = sub_1000078F8( (unint64_t *)&qword_100076B38,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v14 = sub_100005394((uint64_t *)&unk_100078770);
  uint64_t v15 = sub_100007938((unint64_t *)&qword_100076B40, (uint64_t *)&unk_100078770);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v14, v15, v7, v13);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v3);
  *(void *)a2 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000018LL,  0x8000000100057C10LL,  v12,  v9,  v6,  0LL);
  *(void *)(a2 + 8) = [(id)objc_opt_self(FMKeychainManager) sharedInstance];
  *(void *)(a2 + sub_100027CB4(v0 + 16) = 0xD00000000000002ELL;
  *(void *)(a2 + 24) = 0x8000000100057C30LL;
  strcpy((char *)(a2 + 32), "RedirectedHost");
  *(_BYTE *)(a2 + 47) = -18;
  return sub_100007A00(v19, a2 + 48);
}

uint64_t sub_100028010()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *v0;
  sub_10000CE58((uint64_t)v0, (uint64_t)v21);
  uint64_t v9 = swift_allocObject(&unk_10006C958, 104LL, 7LL);
  __int128 v10 = v21[3];
  *(_OWORD *)(v9 + 48) = v21[2];
  *(_OWORD *)(v9 + 64) = v10;
  *(_OWORD *)(v9 + 80) = v21[4];
  *(void *)(v9 + 96) = v22;
  __int128 v11 = v21[1];
  *(_OWORD *)(v9 + sub_100027CB4(v0 + 16) = v21[0];
  *(_OWORD *)(v9 + 3sub_100007A28(v0 + 2) = v11;
  aBlock[4] = sub_100028454;
  uint64_t v20 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  void aBlock[3] = &unk_10006C970;
  uint64_t v12 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v12);
  uint64_t v18 = &_swiftEmptyArrayStorage;
  uint64_t v13 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v14 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v15 = sub_100007938(&qword_100076D58, (uint64_t *)&unk_100078740);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v1, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v4, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v20);
}

void sub_100028214(void *a1)
{
  id v2 = sub_100028474();
  if (v2)
  {
    id v3 = v2;
    sub_10002859C(v2);
    if (v4)
    {
      uint64_t v7 = v4;
      uint64_t v8 = v5;
      uint64_t v9 = v6;
      uint64_t v10 = a1[9];
      uint64_t v11 = a1[10];
      sub_1000087E0(a1 + 6, v10);
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
      uint64_t v14 = v13;
      if (v8 == v12 && v9 == v13)
      {
        swift_bridgeObjectRelease(v13);
        swift_bridgeObjectRelease(v9);
        swift_bridgeObjectRelease(v7);
      }

      else
      {
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v12, v13, 0LL);
        swift_bridgeObjectRelease(v14);
        swift_bridgeObjectRelease(v9);
        swift_bridgeObjectRelease(v7);
        if ((v16 & 1) == 0)
        {
          sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
          uint64_t v17 = (void *)static OS_os_log.default.getter();
          uint64_t v18 = static os_log_type_t.default.getter(v17);
          os_log(_:dso:log:type:_:)( "Removing keychain item from previous account.",  45LL,  2LL,  &_mh_execute_header,  v17,  v18,  &_swiftEmptyArrayStorage);

          uint64_t v19 = (void *)a1[1];
          uint64_t v20 = a1[3];
          uint64_t v21 = a1[5];
          id v22 = v19;
          swift_bridgeObjectRetain(v20);
          swift_bridgeObjectRetain(v21);
          NSString v23 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v20);
          id v24 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v21);
          [v22 deleteDataForAccount:v23 service:v24];
          swift_unknownObjectRelease(v3);

          return;
        }
      }
    }

    swift_unknownObjectRelease(v3);
  }

uint64_t sub_100028410()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  sub_100007A28((void *)(v0 + 64));
  return swift_deallocObject(v0, 104LL, 7LL);
}

void sub_100028454()
{
}

uint64_t sub_10002845C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100007A28(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002846C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

id sub_100028474()
{
  uint64_t v1 = (void *)v0[1];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[5];
  id v4 = v1;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  id v13 = 0LL;
  id v7 = [v4 itemForAccount:v5 service:v6 error:&v13];

  id v8 = v13;
  if (v7)
  {
    id v9 = v13;
  }

  else
  {
    id v10 = v13;
    uint64_t v11 = _convertNSErrorToError(_:)(v8);

    swift_willThrow();
    swift_errorRelease(v11);
  }

  return v7;
}

uint64_t sub_10002859C(void *a1)
{
  id v1 = [a1 rawData];
  uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v4 = v3;

  uint64_t v5 = type metadata accessor for JSONDecoder(0LL);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  uint64_t v6 = JSONDecoder.init()();
  unint64_t v7 = sub_100028684();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)( &v9,  &type metadata for RedirectedHost,  v2,  v4,  &type metadata for RedirectedHost,  v7);
  sub_10000AADC(v2, v4);
  swift_release(v6);
  return v9;
}

unint64_t sub_100028684()
{
  unint64_t result = qword_100078380;
  if (!qword_100078380)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005C25C, &type metadata for RedirectedHost);
    atomic_store(result, (unint64_t *)&qword_100078380);
  }

  return result;
}

id sub_1000286C8(void *a1, uint64_t *a2)
{
  id result = sub_100028474();
  if (result)
  {
    id v5 = result;
    uint64_t v6 = sub_10002859C(result);
    if (v7)
    {
      uint64_t v10 = v6;
      uint64_t v11 = v7;
      uint64_t v12 = v8;
      uint64_t v13 = v9;
      uint64_t v14 = a1[9];
      uint64_t v15 = a1[10];
      sub_1000087E0(a1 + 6, v14);
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15);
      uint64_t v18 = v17;
      if (v12 == v16 && v13 == v17)
      {
        swift_bridgeObjectRelease(v17);
        swift_unknownObjectRelease(v5);
      }

      else
      {
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v16, v17, 0LL);
        swift_bridgeObjectRelease(v18);
        swift_unknownObjectRelease(v5);
        if ((v20 & 1) == 0) {
          return (id)sub_10002882C(v10, v11, v12, v13);
        }
      }

      swift_bridgeObjectRetain(v11);
      sub_10002882C(v10, v11, v12, v13);
      uint64_t v21 = a2[1];
      *a2 = v10;
      a2[1] = v11;
      return (id)swift_bridgeObjectRelease(v21);
    }

    else
    {
      return (id)swift_unknownObjectRelease(v5);
    }
  }

  return result;
}

uint64_t sub_10002882C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }

  return result;
}

uint64_t sub_10002885C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = *v2;
  sub_10000CE58((uint64_t)v2, (uint64_t)v26);
  uint64_t v13 = swift_allocObject(&unk_10006C9A8, 120LL, 7LL);
  *(void *)(v13 + sub_100027CB4(v0 + 16) = a1;
  *(void *)(v13 + 24) = a2;
  __int128 v14 = v26[3];
  *(_OWORD *)(v13 + 64) = v26[2];
  *(_OWORD *)(v13 + 80) = v14;
  *(_OWORD *)(v13 + 96) = v26[4];
  *(void *)(v13 + 11sub_100007A28(v0 + 2) = v27;
  __int128 v15 = v26[1];
  *(_OWORD *)(v13 + 3sub_100007A28(v0 + 2) = v26[0];
  *(_OWORD *)(v13 + 48) = v15;
  aBlock[4] = sub_100028D78;
  uint64_t v25 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  void aBlock[3] = &unk_10006C9C0;
  uint64_t v16 = _Block_copy(aBlock);
  uint64_t v17 = swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v17);
  NSString v23 = &_swiftEmptyArrayStorage;
  uint64_t v18 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v19 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v20 = sub_100007938(&qword_100076D58, (uint64_t *)&unk_100078740);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v19, v20, v5, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v25);
}

uint64_t sub_100028A74(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a3[9];
  uint64_t v7 = a3[10];
  sub_1000087E0(a3 + 6, v6);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 16);
  swift_bridgeObjectRetain(a2);
  uint64_t v9 = v8(v6, v7);
  uint64_t v11 = v10;
  uint64_t v12 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v13 = JSONEncoder.init()();
  v31[0] = a1;
  v31[1] = a2;
  v31[2] = v9;
  v31[3] = v11;
  unint64_t v14 = sub_100028D84();
  uint64_t v15 = dispatch thunk of JSONEncoder.encode<A>(_:)(v31, &type metadata for RedirectedHost, v14);
  unint64_t v17 = v16;
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(a2);
  swift_release(v13);
  uint64_t v18 = (void *)a3[1];
  uint64_t v19 = a3[3];
  uint64_t v20 = a3[5];
  uint64_t v21 = sub_100005394(&qword_100079660);
  uint64_t v22 = swift_allocObject(v21, 72LL, 7LL);
  *(_OWORD *)(v22 + sub_100027CB4(v0 + 16) = xmmword_10005B2C0;
  *(void *)(v22 + 56) = &type metadata for String;
  *(void *)(v22 + 64) = sub_100005854();
  *(void *)(v22 + 3sub_100007A28(v0 + 2) = a1;
  *(void *)(v22 + 40) = a2;
  sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  swift_bridgeObjectRetain(a2);
  id v23 = v18;
  swift_bridgeObjectRetain(v19);
  uint64_t v24 = swift_bridgeObjectRetain(v20);
  uint64_t v25 = (void *)static OS_os_log.default.getter(v24);
  uint64_t v26 = static os_log_type_t.default.getter(v25);
  os_log(_:dso:log:type:_:)("Saving redirected host keychain item %@.", 40LL, 2LL, &_mh_execute_header, v25, v26, v22);
  swift_bridgeObjectRelease(v22);

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  [v23 setData:isa forAccount:v28 service:v29 synchronizable:0 dataProtectionClass:3 migratable:0];

  return sub_10000AADC(v15, v17);
}

uint64_t sub_100028D2C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  sub_100007A28((void *)(v0 + 80));
  return swift_deallocObject(v0, 120LL, 7LL);
}

uint64_t sub_100028D78()
{
  return sub_100028A74(v0[2], v0[3], v0 + 4);
}

unint64_t sub_100028D84()
{
  unint64_t result = qword_100078388;
  if (!qword_100078388)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005C234, &type metadata for RedirectedHost);
    atomic_store(result, (unint64_t *)&qword_100078388);
  }

  return result;
}

uint64_t destroy for RedirectedHostStore(uint64_t a1)
{
  return sub_100007A28((void *)(a1 + 48));
}

uint64_t initializeWithCopy for RedirectedHostStore(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  unint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + sub_100027CB4(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100007A28(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = a1 + 48;
  uint64_t v8 = a2 + 48;
  __int128 v9 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 7sub_100007A28(v0 + 2) = v9;
  uint64_t v10 = v9;
  uint64_t v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
  id v12 = v3;
  id v13 = v4;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v11(v7, v8, v10);
  return a1;
}

uint64_t assignWithCopy for RedirectedHostStore(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  *(void *)(a1 + sub_100027CB4(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 3sub_100007A28(v0 + 2) = *(void *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  sub_100028F3C((void *)(a1 + 48), (void *)(a2 + 48));
  return a1;
}

void *sub_100028F3C(void *result, void *a2)
{
  if (result != a2)
  {
    unint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        unint64_t result = (void *)swift_release(v11);
        void *v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          void *v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          void *v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

__n128 initializeWithTake for RedirectedHostStore(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + sub_100027CB4(v0 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 3sub_100007A28(v0 + 2) = result;
  return result;
}

uint64_t assignWithTake for RedirectedHostStore(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  __int128 v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + sub_100027CB4(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 3sub_100007A28(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  sub_100007A28((void *)(a1 + 48));
  __int128 v10 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v10;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for RedirectedHostStore(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RedirectedHostStore(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 7sub_100007A28(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 88) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RedirectedHostStore()
{
  return &type metadata for RedirectedHostStore;
}

uint64_t sub_1000291F8()
{
  uint64_t v1 = type metadata accessor for DispatchTime(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  __int128 v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v34 - v6;
  sub_10000D1A4( v0 + OBJC_IVAR____TtC20FMIPClientXPCService27ServerInteractionController_apsTokenProvider,  (uint64_t)aBlock,  &qword_100077250);
  uint64_t v8 = v41;
  if (!v41)
  {
    sub_10000D20C((uint64_t)aBlock, &qword_100077250);
    return (uint64_t)v8;
  }

  uint64_t v34 = v5;
  uint64_t v35 = v2;
  char v36 = v7;
  uint64_t v37 = v1;
  uint64_t v9 = v42;
  sub_1000087E0(aBlock, (uint64_t)v41);
  uint64_t v10 = (*((uint64_t (**)(void *, uint64_t (*)()))v9 + 1))(v8, v9);
  sub_100007A28(aBlock);
  uint64_t v11 = swift_allocObject(&unk_10006CF58, 32LL, 7LL);
  *(void *)(v11 + sub_100027CB4(v0 + 16) = 0LL;
  uint64_t v38 = v11 + 16;
  *(void *)(v11 + 24) = 0LL;
  uint64_t v12 = dispatch_group_create();
  dispatch_group_enter(v12);
  uint64_t v13 = swift_allocObject(&unk_10006CF80, 32LL, 7LL);
  *(void *)(v13 + sub_100027CB4(v0 + 16) = v11;
  *(void *)(v13 + 24) = v12;
  uint64_t v14 = swift_allocObject(&unk_10006CFA8, 32LL, 7LL);
  *(void *)(v14 + sub_100027CB4(v0 + 16) = sub_10002DF70;
  *(void *)(v14 + 24) = v13;
  uint64_t v46 = 0LL;
  uint64_t v47 = 0LL;
  uint64_t v45 = 0LL;
  char v44 = 0;
  uint64_t v15 = *(dispatch_queue_s **)(v10 + 56);
  unint64_t v16 = (void *)swift_allocObject(&unk_10006CFD0, 64LL, 7LL);
  void v16[2] = &v46;
  v16[3] = v10;
  v16[4] = &v45;
  v16[5] = &v44;
  v16[6] = sub_100018EA8;
  v16[7] = v14;
  uint64_t v17 = swift_allocObject(&unk_10006CFF8, 32LL, 7LL);
  *(void *)(v17 + sub_100027CB4(v0 + 16) = sub_10002DF7C;
  *(void *)(v17 + 24) = v16;
  uint64_t v42 = sub_100010FA0;
  uint64_t v43 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10003CE54;
  uint64_t v41 = &unk_10006D010;
  uint64_t v18 = _Block_copy(aBlock);
  uint64_t v19 = v43;
  swift_retain_n(v11, 2LL);
  uint64_t v20 = v12;
  swift_retain_n(v13, 2LL);
  uint64_t v21 = v20;
  swift_retain(v10);
  swift_retain(v14);
  swift_retain(v17);
  swift_release(v19);
  dispatch_sync(v15, v18);
  _Block_release(v18);
  LOBYTE(v18) = swift_isEscapingClosureAtFileLocation(v17, "", 90LL, 149LL, 26LL, 1LL);
  uint64_t result = swift_release(v17);
  if ((v18 & 1) == 0)
  {
    if (v44 == 1)
    {
      uint64_t v23 = v47;
      if (v47)
      {
        uint64_t v24 = v45;
        uint64_t v25 = v46;
        swift_beginAccess(v38, v39, 1LL, 0LL);
        uint64_t v26 = *(void *)(v11 + 24);
        *(void *)(v11 + sub_100027CB4(v0 + 16) = v25;
        *(void *)(v11 + 24) = v23;
        swift_bridgeObjectRetain_n(v23, 2LL);
        swift_errorRetain(v24);
        swift_bridgeObjectRelease(v26);
        dispatch_group_leave(v21);
        swift_errorRelease(v24);
        swift_bridgeObjectRelease(v23);
      }
    }

    uint64_t v27 = v45;
    swift_retain(v10);
    swift_errorRelease(v27);
    uint64_t v28 = v47;
    swift_release(v10);

    swift_release(v11);
    swift_release_n(v13, 2LL);
    swift_release(v14);
    swift_release(v16);
    uint64_t v29 = swift_bridgeObjectRelease(v28);
    uint64_t v30 = v34;
    static DispatchTime.now()(v29);
    uint64_t v31 = v36;
    + infix(_:_:)(v30, 9.0);
    uint64_t v32 = *(void (**)(char *, uint64_t))(v35 + 8);
    uint64_t v33 = v37;
    v32(v30, v37);
    OS_dispatch_group.wait(timeout:)(v31);

    swift_release(v10);
    v32(v31, v33);
    swift_beginAccess(v38, aBlock, 0LL, 0LL);
    uint64_t v8 = *(void **)(v11 + 16);
    swift_bridgeObjectRetain(*(void *)(v11 + 24));
    swift_release(v11);
    return (uint64_t)v8;
  }

  __break(1u);
  return result;
}

uint64_t sub_100029600(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = sub_100005394(&qword_100079660);
  uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
  *(_OWORD *)(v6 + sub_100027CB4(v0 + 16) = xmmword_10005B2C0;
  uint64_t v14 = v4;
  swift_errorRetain(v4);
  swift_errorRetain(v4);
  swift_bridgeObjectRetain(v3);
  uint64_t v7 = sub_100005394(&qword_100077BD8);
  uint64_t v8 = String.init<A>(describing:)(&v14, v7);
  uint64_t v10 = v9;
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_100005854();
  *(void *)(v6 + 3sub_100007A28(v0 + 2) = v8;
  *(void *)(v6 + 40) = v10;
  sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v11 = (void *)static OS_os_log.default.getter();
  uint64_t v12 = static os_log_type_t.default.getter(v11);
  os_log(_:dso:log:type:_:)( "Calling response handler's completion with error: %@.",  53LL,  2LL,  &_mh_execute_header,  v11,  v12,  v6);
  swift_bridgeObjectRelease(v6);

  a2(v3, v4);
  swift_errorRelease(v4);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10002973C(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(void))((swift_isaMask & *a3) + 0xE8LL))();
}

uint64_t sub_100029774(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = a4 + 16;
  swift_beginAccess(a4 + 16, v14, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v11);
  if (result)
  {
    uint64_t v13 = result;
    sub_100029804(a1, a2, a3 & 1, a5, a6);
    return swift_release(v13);
  }

  return result;
}

uint64_t sub_100029804(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v40 = a5;
  uint64_t v8 = type metadata accessor for DispatchTime(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v38 - v13;
  sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v15 = (void *)((uint64_t (*)(void))static OS_os_log.default.getter)();
  uint64_t v16 = static os_log_type_t.default.getter(v15);
  os_log(_:dso:log:type:_:)( "Will handle fetch response.",  27LL,  2LL,  &_mh_execute_header,  v15,  v16,  &_swiftEmptyArrayStorage);

  static DispatchTime.now()(v17);
  + infix(_:_:)(v12, 9.0);
  uint64_t v39 = *(void (**)(char *, uint64_t))(v9 + 8);
  v39(v12, v8);
  OS_dispatch_group.wait(timeout:)(v14);
  if ((a3 & 1) != 0)
  {
    swift_errorRetain(a2);
    uint64_t v23 = swift_bridgeObjectRetain(a1);
    uint64_t v24 = static os_log_type_t.error.getter(v23);
    uint64_t v25 = sub_100005394(&qword_100079660);
    uint64_t v26 = swift_allocObject(v25, 72LL, 7LL);
    *(_OWORD *)(v26 + sub_100027CB4(v0 + 16) = xmmword_10005B2C0;
    swift_getErrorValue(a2, v47, v46);
    uint64_t v27 = Error.localizedDescription.getter(v46[1], v46[2]);
    uint64_t v29 = v28;
    *(void *)(v26 + 56) = &type metadata for String;
    *(void *)(v26 + 64) = sub_100005854();
    *(void *)(v26 + 3sub_100007A28(v0 + 2) = v27;
    *(void *)(v26 + 40) = v29;
    uint64_t v30 = (void *)((uint64_t (*)(void))static OS_os_log.default.getter)();
    os_log(_:dso:log:type:_:)("Could not complete request %@", 29LL, 2LL, &_mh_execute_header, v30, v24, v26);
    swift_bridgeObjectRelease(v26);

    if (!a1) {
      goto LABEL_6;
    }
    swift_bridgeObjectRetain(a1);
  }

  else
  {
    uint64_t v18 = sub_100005394(&qword_100079660);
    uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
    *(_OWORD *)(v19 + sub_100027CB4(v0 + 16) = xmmword_10005B2C0;
    *(void *)(v19 + 56) = sub_100005394(&qword_1000783B0);
    *(void *)(v19 + 64) = sub_10002C8C8();
    *(void *)(v19 + 3sub_100007A28(v0 + 2) = a1;
    sub_10002C914(a1, a2, 0);
    uint64_t v20 = swift_bridgeObjectRetain(a1);
    uint64_t v21 = (void *)static OS_os_log.default.getter(v20);
    uint64_t v22 = static os_log_type_t.default.getter(v21);
    os_log(_:dso:log:type:_:)("Received response %@", 20LL, 2LL, &_mh_execute_header, v21, v22, v19);
    swift_bridgeObjectRelease(v19);

    swift_bridgeObjectRetain(a1);
    a2 = 0LL;
  }

  sub_10002C884();
  static ResponseSerializable.decode(dictionary:)(&v42, a1);
  uint64_t v31 = swift_bridgeObjectRelease(a1);
  int v32 = v45 & 0xFF00;
  if (v32 != 768)
  {
    uint64_t v35 = v42;
    LOBYTE(v4sub_100007A28(v0 + 2) = v43 & 1;
    char v41 = v45 & 1;
    sub_10002A4B0(v35, v43 & 1, v44, v32 | v45 & 1);
    goto LABEL_10;
  }

LABEL_6:
  if (qword_100076B00 != -1) {
    uint64_t v31 = swift_once(&qword_100076B00, sub_100009AE4);
  }
  uint64_t v33 = qword_1000798C8;
  uint64_t v34 = static os_log_type_t.default.getter(v31);
  os_log(_:dso:log:type:_:)( "No configuration data received",  30LL,  2LL,  &_mh_execute_header,  v33,  v34,  &_swiftEmptyArrayStorage);
LABEL_10:
  swift_errorRetain(a2);
  uint64_t v36 = swift_bridgeObjectRetain(a1);
  sub_10002281C(v36, a2, 0LL);
  swift_bridgeObjectRelease(a1);
  swift_errorRelease(a2);
  swift_bridgeObjectRelease(a1);
  swift_errorRelease(a2);
  return ((uint64_t (*)(char *, uint64_t))v39)(v14, v8);
}

void sub_100029CB8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, void *))
{
  uint64_t v7 = (uint64_t *)(a3 + 16);
  uint64_t v8 = (void **)(a4 + 16);
  if (a2 == 4 || a2 == 1)
  {
    swift_beginAccess(a3 + 16, v22, 1LL, 0LL);
    *uint64_t v7 = 0LL;
    id v10 = [objc_allocWithZone(NSURLCredential) initWithTrust:a1];
    swift_beginAccess(v8, v21, 1LL, 0LL);
    uint64_t v11 = *v8;
    *uint64_t v8 = v10;

    uint64_t v12 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v13 = (void *)static OS_os_log.default.getter(v12);
    uint64_t v14 = static os_log_type_t.default.getter(v13);
    os_log(_:dso:log:type:_:)( "AuthChallenge proceeding with credentials.",  42LL,  2LL,  &_mh_execute_header,  v13,  v14,  _swiftEmptyArrayStorage);
  }

  else
  {
    static os_log_type_t.error.getter(a1);
    uint64_t v15 = sub_100005394(&qword_100079660);
    uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
    *(_OWORD *)(v16 + sub_100027CB4(v0 + 16) = xmmword_10005B2C0;
    *(void *)(v16 + 56) = &type metadata for UInt32;
    *(void *)(v16 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v16 + 3sub_100007A28(v0 + 2) = a2;
    uint64_t v17 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v13 = (void *)static OS_os_log.default.getter(v17);
    os_log(_:dso:log:type:_:)("AuthChallenge evaluation resulted in %i. Cancelling request.", v21[0]);
    swift_bridgeObjectRelease(v16);
  }

  swift_beginAccess(v7, v24, 0LL, 0LL);
  uint64_t v18 = *v7;
  swift_beginAccess(v8, v23, 0LL, 0LL);
  uint64_t v19 = *v8;
  id v20 = v19;
  a5(v18, v19);
}

char *sub_100029EB4()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchTime(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  id v10 = (char *)v35 - v9;
  uint64_t v11 = static os_log_type_t.default.getter(v8);
  sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v12 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:type:_:)( "Requesting auth credentials from client session",  47LL,  2LL,  &_mh_execute_header,  v12,  v11,  &_swiftEmptyArrayStorage);

  uint64_t v13 = dispatch_group_create();
  uint64_t v14 = swift_allocObject(&unk_10006D048, 24LL, 7LL);
  *(void *)(v14 + sub_100027CB4(v0 + 16) = 0LL;
  uint64_t v15 = (void *)(v14 + 16);
  dispatch_group_enter(v13);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC20FMIPClientXPCService27ServerInteractionController_authenticationProvider);
  if (!Strong)
  {
    unint64_t v27 = sub_10002DFBC();
    swift_allocError(&type metadata for ServerInteractionController.ServerInteractionError, v27, 0LL, 0LL);
    *uint64_t v28 = 6;
    swift_willThrow();

LABEL_8:
    uint64_t v31 = v14;
    goto LABEL_9;
  }

  v35[1] = v1;
  uint64_t v17 = (void *)Strong;
  uint64_t v18 = swift_allocObject(&unk_10006D070, 32LL, 7LL);
  *(void *)(v18 + sub_100027CB4(v0 + 16) = v14;
  *(void *)(v18 + 24) = v13;
  aBlock[4] = sub_10002E004;
  uint64_t v39 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100013B84;
  void aBlock[3] = &unk_10006D088;
  uint64_t v19 = _Block_copy(aBlock);
  uint64_t v36 = v4;
  uint64_t v37 = v14;
  uint64_t v20 = v3;
  uint64_t v21 = v19;
  uint64_t v22 = v39;
  swift_retain(v14);
  uint64_t v23 = v13;
  swift_release(v22);
  uint64_t v40 = v17;
  [v17 credentialWithCompletion:v21];
  _Block_release(v21);
  static DispatchTime.now()(v24);
  + infix(_:_:)(v7, 9.0);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v36 + 8);
  v25(v7, v20);
  if ((OS_dispatch_group.wait(timeout:)(v10) & 1) != 0)
  {
    unint64_t v29 = sub_10002DFBC();
    swift_allocError(&type metadata for ServerInteractionController.ServerInteractionError, v29, 0LL, 0LL);
    *uint64_t v30 = 4;
    swift_willThrow();

    swift_unknownObjectRelease(v40);
    v25(v10, v20);
    uint64_t v31 = v37;
LABEL_9:
    swift_release(v31);
    return v7;
  }

  uint64_t v14 = v37;
  uint64_t v26 = v40;
  swift_beginAccess(v15, aBlock, 0LL, 0LL);
  uint64_t v7 = (char *)*v15;
  if (!*v15)
  {
    unint64_t v32 = sub_10002DFBC();
    swift_allocError(&type metadata for ServerInteractionController.ServerInteractionError, v32, 0LL, 0LL);
    *uint64_t v33 = 3;
    swift_willThrow();

    swift_unknownObjectRelease(v26);
    v25(v10, v20);
    goto LABEL_8;
  }

  swift_retain(*v15);
  v25(v10, v20);
  swift_release(v14);
  swift_unknownObjectRelease(v26);

  return v7;
}

void sub_10002A20C(uint64_t a1, uint64_t a2, uint64_t a3, dispatch_group_s *a4)
{
  if (!a2)
  {
    sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v26 = (void *)static OS_os_log.default.getter();
    uint64_t v27 = static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)( "Received credential for session.",  32LL,  2LL,  &_mh_execute_header,  v26,  v27,  &_swiftEmptyArrayStorage);

    if (!a1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v8 = swift_errorRetain(a2);
  uint64_t v9 = static os_log_type_t.error.getter(v8);
  uint64_t v10 = sub_100005394(&qword_100079660);
  uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
  *(_OWORD *)(v11 + sub_100027CB4(v0 + 16) = xmmword_10005B2C0;
  swift_getErrorValue(a2, v29, v28);
  uint64_t v12 = Error.localizedDescription.getter(v28[1], v28[2]);
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_100005854();
  *(void *)(v11 + 3sub_100007A28(v0 + 2) = v12;
  *(void *)(v11 + 40) = v14;
  sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v15 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:type:_:)( "Unable to get credential from client. Auth provider registered? %@",  66LL,  2LL,  &_mh_execute_header,  v15,  v9,  v11);
  swift_bridgeObjectRelease(v11);

  swift_errorRelease(a2);
  if (a1)
  {
LABEL_3:
    uint64_t v16 = (uint64_t *)(a3 + 16);
    uint64_t v18 = *(void *)(a1 + direct field offset for AuthenticationCredential.authToken);
    uint64_t v17 = *(void *)(a1 + direct field offset for AuthenticationCredential.authToken + 8);
    uint64_t v20 = *(void *)(a1 + direct field offset for AuthenticationCredential.personId);
    uint64_t v19 = *(void *)(a1 + direct field offset for AuthenticationCredential.personId + 8);
    uint64_t v22 = *(void *)(a1 + direct field offset for AuthenticationCredential.hostName);
    uint64_t v21 = *(void *)(a1 + direct field offset for AuthenticationCredential.hostName + 8);
    uint64_t v23 = type metadata accessor for FMIPRequestCredential();
    uint64_t v24 = (void *)swift_allocObject(v23, 64LL, 7LL);
    void v24[2] = v18;
    v24[3] = v17;
    v24[4] = v20;
    v24[5] = v19;
    v24[6] = v22;
    v24[7] = v21;
    swift_beginAccess(v16, v30, 1LL, 0LL);
    uint64_t v25 = *v16;
    *uint64_t v16 = (uint64_t)v24;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
    swift_release(v25);
  }

LABEL_4:
  dispatch_group_leave(a4);
}

void sub_10002A440(uint64_t *a1, uint64_t a2, dispatch_group_s *a3)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  swift_beginAccess(a2 + 16, v8, 1LL, 0LL);
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a2 + sub_100027CB4(v0 + 16) = v6;
  *(void *)(a2 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v7);
  dispatch_group_leave(a3);
}

void sub_10002A4B0(uint64_t a1, char a2, void *a3, int a4)
{
  id v43 = a3;
  LODWORD(v41) = a4;
  uint64_t v6 = sub_100005394(&qword_100077248);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for ClientConfiguration(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (double *)((char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = sub_100005394(&qword_1000783C0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100005394(&qword_1000783C8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100005394(&qword_100077670);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v22 = (void *)static OS_os_log.default.getter();
  uint64_t v23 = static os_log_type_t.default.getter(v22);
  os_log(_:dso:log:type:_:)( "Saving client configuration data",  32LL,  2LL,  &_mh_execute_header,  v22,  v23,  &_swiftEmptyArrayStorage);

  if ((a2 & 1) != 0)
  {
    uint64_t v34 = static os_log_type_t.error.getter(v24);
    id v43 = (id)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)( "Configuration missing mandatory nearbyScanDuration.",  51LL,  2LL,  &_mh_execute_header,  v43,  v34,  &_swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t v40 = v21;
    uint64_t v25 = v42;
    __int16 v26 = v41;
    double v27 = (double)a1 / 1000.0;
    uint64_t v28 = a1;
    if ((v41 & 1) != 0)
    {
      uint64_t v35 = type metadata accessor for DateComponents(0LL);
      BOOL v29 = 1;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))(v20, 1LL, 1LL, v35);
    }

    else
    {
      BOOL v29 = v43 != (id)-1LL;
      if (v43)
      {
        uint64_t v30 = type metadata accessor for Calendar(0LL);
        uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL);
        uint64_t v41 = v28;
        v31(v17, 1LL, 1LL, v30);
        uint64_t v32 = type metadata accessor for TimeZone(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))(v14, 1LL, 1LL, v32);
        uint64_t v28 = v41;
        DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( v17,  v14,  0LL,  1LL,  0LL,  1LL,  0LL,  1LL,  v43,  0,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  v40);
        uint64_t v33 = type metadata accessor for DateComponents(0LL);
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))(v20, 0LL, 1LL, v33);
      }

      else
      {
        uint64_t v36 = type metadata accessor for DateComponents(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))(v20, 1LL, 1LL, v36);
      }
    }

    if ((v26 & 0xFF00) == 0x200) {
      char v37 = 1;
    }
    else {
      char v37 = HIBYTE(v26) & 1;
    }
    sub_10000D1A4((uint64_t)v20, (uint64_t)v11 + *(int *)(v9 + 28), &qword_100077670);
    *uint64_t v11 = v27;
    *((_BYTE *)v11 + 8) = v28 != -1;
    *((_BYTE *)v11 + 9) = v37;
    *((_BYTE *)v11 + *(int *)(v9 + swift_release(*(void *)(v0 + 32)) = v29;
    sub_10000D1A4( v25 + OBJC_IVAR____TtC20FMIPClientXPCService27ServerInteractionController_clientConfigurationCache,  (uint64_t)v8,  &qword_100077248);
    uint64_t v38 = type metadata accessor for ClientConfigurationCache(0LL);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48LL))(v8, 1LL, v38) == 1)
    {
      sub_100019DD8((uint64_t)v11, type metadata accessor for ClientConfiguration);
      sub_10000D20C((uint64_t)v20, &qword_100077670);
      sub_10000D20C((uint64_t)v8, &qword_100077248);
    }

    else
    {
      v44[3] = v9;
      v44[4] = &off_10006F828;
      uint64_t v39 = sub_10000CD88(v44);
      sub_100019D94((uint64_t)v11, (uint64_t)v39);
      sub_10004CC54(v44);
      sub_100019DD8((uint64_t)v11, type metadata accessor for ClientConfiguration);
      sub_10000D20C((uint64_t)v20, &qword_100077670);
      sub_100007A28(v44);
      sub_100019DD8((uint64_t)v8, type metadata accessor for ClientConfigurationCache);
    }
  }

uint64_t sub_10002AA70(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  v24[3] = type metadata accessor for FMIPRequestCredential();
  v24[4] = &off_10006A068;
  v24[0] = a2;
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = type metadata accessor for FMIPEndpointConfiguration(0LL);
  uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  *(_OWORD *)(v11 + 3sub_100007A28(v0 + 2) = 0u;
  *(void *)(v11 + 48) = 0LL;
  *(_OWORD *)(v11 + sub_100027CB4(v0 + 16) = 0u;
  uint64_t v12 = v11 + OBJC_IVAR____TtC20FMIPClientXPCService25FMIPEndpointConfiguration_urlComponents;
  uint64_t v13 = swift_bridgeObjectRetain(v9);
  URLComponents.init()(v13);
  swift_beginAccess(v12, v23, 33LL, 0LL);
  URLComponents.scheme.setter(0x7370747468LL, 0xE500000000000000LL);
  URLComponents.host.setter(v8, v9);
  URLComponents.path.setter(0xD000000000000016LL, 0x8000000100057BB0LL);
  swift_endAccess(v23);
  sub_100007E2C((uint64_t)v24, (uint64_t)v23);
  swift_beginAccess(v11 + 16, v22, 33LL, 0LL);
  swift_retain(v11);
  sub_100027D84((uint64_t)v23, v11 + 16);
  swift_endAccess(v22);
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  sub_1000087E0(a1, v14);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15);
  uint64_t v17 = URLComponents.path.getter(v16);
  uint64_t v19 = v18;
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  swift_beginAccess(v12, v23, 33LL, 0LL);
  URLComponents.path.setter(v17, v19);
  swift_endAccess(v23);
  swift_release(v11);
  sub_100007A28(v24);
  sub_100007A28(a1);
  return v11;
}

uint64_t *sub_10002AC80(uint64_t *result, uint64_t a2, void (*a3)(void *))
{
  uint64_t v3 = *result;
  if (*result != 1)
  {
    uint64_t v5 = result[1];
    v6[0] = *result;
    v6[1] = v5;
    swift_bridgeObjectRetain(v3);
    swift_errorRetain(v5);
    a3(v6);
    swift_bridgeObjectRelease(v3);
    return (uint64_t *)swift_errorRelease(v5);
  }

  return result;
}

uint64_t sub_10002ACFC( uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v117[3] = a8;
  v117[4] = a9;
  uint64_t v15 = sub_10000CD88(v117);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a8 - 8) + 16LL))(v15, a2, a8);
  sub_100007E2C(a1, (uint64_t)v115);
  sub_100007E2C((uint64_t)v117, (uint64_t)v116);
  sub_100007E2C((uint64_t)v115, (uint64_t)&v100);
  sub_100007E2C((uint64_t)v116, (uint64_t)&v104);
  sub_100007A00(&v100, (uint64_t)v112);
  sub_100007A00(&v104, (uint64_t)v111);
  uint64_t v16 = v113;
  uint64_t v17 = v114;
  sub_1000087E0(v112, v113);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v17 + 8))(&v100, v16, v17);
  uint64_t v18 = &unk_10005B000;
  uint64_t v86 = (uint64_t)a3;
  uint64_t v87 = a6;
  uint64_t v85 = v116;
  if (!v102)
  {
    sub_10000D20C((uint64_t)&v100, &qword_100077228);
LABEL_10:
    sub_100007E2C((uint64_t)v112, (uint64_t)&v100);
    id v50 = objc_allocWithZone((Class)type metadata accessor for HttpClient(0LL));
    a3 = (void *)HttpClient.init(endpoint:)(&v100);
    uint64_t v51 = sub_100005394(&qword_100079660);
    uint64_t v52 = swift_allocObject(v51, 72LL, 7LL);
    *(_OWORD *)(v52 + sub_100027CB4(v0 + 16) = xmmword_10005B2C0;
    sub_100007E2C((uint64_t)v112, (uint64_t)&v100);
    uint64_t v53 = sub_100005394(&qword_100078390);
    uint64_t v54 = String.init<A>(describing:)(&v100, v53);
    uint64_t v56 = v55;
    *(void *)(v52 + 56) = &type metadata for String;
    *(void *)(v52 + 64) = sub_100005854();
    *(void *)(v52 + 3sub_100007A28(v0 + 2) = v54;
    *(void *)(v52 + 40) = v56;
    uint64_t v57 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v58 = (void *)static OS_os_log.default.getter(v57);
    uint64_t v59 = static os_log_type_t.default.getter(v58);
    os_log(_:dso:log:type:_:)("Created standard endpoint %@", 28LL, 2LL, &_mh_execute_header, v58, v59, v52, v116, v86);
    swift_bridgeObjectRelease(v52);

    goto LABEL_11;
  }

  sub_100007A00(&v100, (uint64_t)v108);
  sub_10000D1A4((uint64_t)a3, (uint64_t)&v100, &qword_100077240);
  uint64_t v19 = (dispatch_queue_s *)v100;
  if (!(void)v100)
  {
    sub_10000D20C((uint64_t)&v100, &qword_100077240);
LABEL_9:
    sub_100007A28(v108);
    goto LABEL_10;
  }

  uint64_t v91 = 0LL;
  uint64_t v92 = 0LL;
  sub_10000CE58((uint64_t)&v100, (uint64_t)v93);
  uint64_t v20 = swift_allocObject(&unk_10006CEE0, 112LL, 7LL);
  __int128 v21 = v93[3];
  *(_OWORD *)(v20 + 48) = v93[2];
  *(_OWORD *)(v20 + 64) = v21;
  *(_OWORD *)(v20 + 80) = v93[4];
  uint64_t v22 = v94;
  __int128 v23 = v93[1];
  *(_OWORD *)(v20 + sub_100027CB4(v0 + 16) = v93[0];
  *(_OWORD *)(v20 + 3sub_100007A28(v0 + 2) = v23;
  *(void *)(v20 + 96) = v22;
  *(void *)(v20 + 104) = &v91;
  uint64_t v24 = swift_allocObject(&unk_10006CF08, 32LL, 7LL);
  *(void *)(v24 + sub_100027CB4(v0 + 16) = sub_10002E18C;
  *(void *)(v24 + 24) = v20;
  uint64_t v98 = sub_100010FA0;
  *(void *)&v99[0] = v24;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  int v96 = sub_10003CE54;
  uint64_t v97 = &unk_10006CF20;
  uint64_t v25 = (dispatch_queue_s *)_Block_copy(&aBlock);
  uint64_t v26 = *(void *)&v99[0];
  swift_retain(v24);
  swift_release(v26);
  dispatch_sync(v19, v25);
  _Block_release(v25);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v24, "", 103LL, 45LL, 31LL, 1LL);
  swift_release(v24);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    goto LABEL_21;
  }
  uint64_t v29 = v91;
  uint64_t v28 = v92;
  swift_release(v20);
  sub_10000CE94((uint64_t)&v100);
  if (!v28) {
    goto LABEL_9;
  }
  uint64_t v30 = v109;
  uint64_t v31 = v110;
  sub_1000087E0(v108, v109);
  uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(v30, v31);
  uint64_t v34 = v33;
  uint64_t v35 = v109;
  uint64_t v36 = v110;
  sub_1000087E0(v108, v109);
  uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 16))(v35, v36);
  uint64_t v39 = v38;
  uint64_t v40 = type metadata accessor for FMIPRequestCredential();
  uint64_t isEscapingClosureAtFileLocation = swift_allocObject(v40, 64LL, 7LL);
  *(void *)(isEscapingClosureAtFileLocation + sub_100027CB4(v0 + 16) = v32;
  *(void *)(isEscapingClosureAtFileLocation + 24) = v34;
  *(void *)(isEscapingClosureAtFileLocation + 3sub_100007A28(v0 + 2) = v37;
  *(void *)(isEscapingClosureAtFileLocation + 40) = v39;
  *(void *)(isEscapingClosureAtFileLocation + 48) = v29;
  *(void *)(isEscapingClosureAtFileLocation + 56) = v28;
  sub_100007E2C((uint64_t)v112, (uint64_t)&v100);
  swift_retain(isEscapingClosureAtFileLocation);
  uint64_t v26 = sub_10002AA70(&v100, isEscapingClosureAtFileLocation);
  uint64_t v25 = (dispatch_queue_s *)type metadata accessor for FMIPEndpointConfiguration(0LL);
  uint64_t v102 = v25;
  v103 = (uint64_t (*)())&off_10006C918;
  *(void *)&__int128 v100 = v26;
  id v41 = objc_allocWithZone((Class)type metadata accessor for HttpClient(0LL));
  swift_retain(v26);
  a3 = (void *)HttpClient.init(endpoint:)(&v100);
  if (qword_100076B00 != -1) {
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v42 = qword_1000798C8;
    uint64_t v43 = sub_100005394(&qword_100079660);
    uint64_t v44 = swift_allocObject(v43, 72LL, 7LL);
    *(_OWORD *)(v44 + sub_100027CB4(v0 + 16) = xmmword_10005B2C0;
    *(void *)&__int128 v100 = v26;
    swift_retain(v26);
    uint64_t v45 = String.init<A>(describing:)(&v100, v25);
    uint64_t v47 = v46;
    *(void *)(v44 + 56) = &type metadata for String;
    unint64_t v48 = sub_100005854();
    *(void *)(v44 + 64) = v48;
    *(void *)(v44 + 3sub_100007A28(v0 + 2) = v45;
    *(void *)(v44 + 40) = v47;
    uint64_t v49 = static os_log_type_t.default.getter(v48);
    os_log(_:dso:log:type:_:)("Created redirected endpoint %@", 30LL, 2LL, &_mh_execute_header, v42, v49, v44);
    swift_release(isEscapingClosureAtFileLocation);
    swift_release(v26);
    swift_bridgeObjectRelease(v44);
    sub_100007A28(v108);
LABEL_11:
    uint64_t v60 = sub_100005394(&qword_100078398);
    swift_allocObject(v60, *(unsigned int *)(v60 + 48), *(unsigned __int16 *)(v60 + 52));
    uint64_t v26 = sub_100032D74();
    uint64_t v61 = swift_allocObject(&unk_10006CD50, 32LL, 7LL);
    uint64_t v89 = a4;
    *(void *)(v61 + sub_100027CB4(v0 + 16) = a4;
    a4 = a5;
    *(void *)(v61 + 24) = a5;
    uint64_t v62 = swift_allocObject(&unk_10006CD78, 32LL, 7LL);
    *(void *)(v62 + sub_100027CB4(v0 + 16) = sub_10002E190;
    *(void *)(v62 + 24) = v61;
    v93[0] = xmmword_10005D640;
    *(void *)&__int128 aBlock = 0LL;
    LOBYTE(v108[0]) = 0;
    uint64_t v25 = *(dispatch_queue_s **)(v26 + 56);
    uint64_t isEscapingClosureAtFileLocation = swift_allocObject(&unk_10006CDA0, 64LL, 7LL);
    *(void *)(isEscapingClosureAtFileLocation + sub_100027CB4(v0 + 16) = v93;
    *(void *)(isEscapingClosureAtFileLocation + 24) = v26;
    *(void *)(isEscapingClosureAtFileLocation + 3sub_100007A28(v0 + 2) = &aBlock;
    *(void *)(isEscapingClosureAtFileLocation + 40) = v108;
    *(void *)(isEscapingClosureAtFileLocation + 48) = sub_10002E188;
    *(void *)(isEscapingClosureAtFileLocation + 56) = v62;
    uint64_t v63 = swift_allocObject(&unk_10006CDC8, 32LL, 7LL);
    *(void *)(v63 + sub_100027CB4(v0 + 16) = sub_10002C758;
    *(void *)(v63 + 24) = isEscapingClosureAtFileLocation;
    v103 = sub_100010FA0;
    *(void *)&__int128 v104 = v63;
    *(void *)&__int128 v100 = _NSConcreteStackBlock;
    uint64_t v64 = v18[102];
    *((void *)&v100 + 1) = v64;
    v101 = sub_10003CE54;
    uint64_t v102 = (dispatch_queue_s *)&unk_10006CDE0;
    uint64_t v65 = _Block_copy(&v100);
    uint64_t v18 = (void *)v104;
    swift_retain_n(a5, 2LL);
    swift_retain_n(v61, 2LL);
    swift_retain(v26);
    swift_retain(v62);
    swift_retain(v63);
    swift_release(v18);
    dispatch_sync(v25, v65);
    _Block_release(v65);
    LOBYTE(v65) = swift_isEscapingClosureAtFileLocation(v63, "", 90LL, 149LL, 26LL, 1LL);
    swift_release(v63);
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    swift_once(&qword_100076B00, sub_100009AE4);
  }

  uint64_t v66 = aBlock;
  if (LOBYTE(v108[0]) == 1)
  {
    uint64_t v67 = *(void *)&v93[0];
    if (*(void *)&v93[0] != 1LL)
    {
      uint64_t v68 = *((void *)&v93[0] + 1);
      __int128 v100 = v93[0];
      swift_errorRetain(aBlock);
      sub_1000241B0(v67, v68);
      swift_bridgeObjectRetain(v67);
      swift_errorRetain(v68);
      sub_100029600((uint64_t *)&v100, v89);
      swift_bridgeObjectRelease(v67);
      swift_errorRelease(v68);
      swift_errorRelease(v66);
      sub_10002C78C(v67, v68);
      uint64_t v66 = aBlock;
    }
  }

  swift_retain(v26);
  swift_errorRelease(v66);
  sub_10002C78C(*(uint64_t *)&v93[0], *((uint64_t *)&v93[0] + 1));
  swift_release(v26);
  swift_release(a5);
  swift_release_n(v61, 2LL);
  swift_release(v62);
  swift_release(isEscapingClosureAtFileLocation);
  uint64_t isEscapingClosureAtFileLocation = swift_allocObject(&unk_10006CE18, 24LL, 7LL);
  *(void *)(isEscapingClosureAtFileLocation + sub_100027CB4(v0 + 16) = a3;
  v93[0] = xmmword_10005D640;
  *(void *)&__int128 aBlock = 0LL;
  LOBYTE(v108[0]) = 0;
  uint64_t v69 = *(dispatch_queue_s **)(v26 + 56);
  uint64_t v70 = (void *)swift_allocObject(&unk_10006CE40, 64LL, 7LL);
  v70[2] = v93;
  v70[3] = v26;
  v70[4] = &aBlock;
  v70[5] = v108;
  v70[6] = sub_10002C7E0;
  v70[7] = isEscapingClosureAtFileLocation;
  uint64_t v71 = swift_allocObject(&unk_10006CE68, 32LL, 7LL);
  *(void *)(v71 + sub_100027CB4(v0 + 16) = sub_10002C758;
  *(void *)(v71 + 24) = v70;
  v103 = sub_100010FA0;
  *(void *)&__int128 v104 = v71;
  *(void *)&__int128 v100 = _NSConcreteStackBlock;
  *((void *)&v100 + 1) = v64;
  v101 = sub_10003CE54;
  uint64_t v102 = (dispatch_queue_s *)&unk_10006CE80;
  id v72 = _Block_copy(&v100);
  uint64_t v25 = (dispatch_queue_s *)v104;
  uint64_t v18 = a3;
  swift_retain(v26);
  a3 = v18;
  swift_retain(isEscapingClosureAtFileLocation);
  swift_retain(v71);
  swift_release(v25);
  dispatch_sync(v69, v72);
  _Block_release(v72);
  LOBYTE(v7sub_100007A28(v0 + 2) = swift_isEscapingClosureAtFileLocation(v71, "", 90LL, 149LL, 26LL, 1LL);
  swift_release(v71);
  if (LOBYTE(v108[0]) == 1)
  {
    __int128 v73 = v93[0];
    uint64_t v74 = aBlock;
    uint64_t v75 = *(void (**)(uint64_t))((swift_isaMask & *a3) + 0xE8LL);
    sub_1000241B0(*(uint64_t *)&v93[0], *((uint64_t *)&v93[0] + 1));
    uint64_t v76 = swift_errorRetain(v74);
    v75(v76);
    swift_errorRelease(v74);
    sub_10002C78C(v73, *((uint64_t *)&v73 + 1));
  }

  uint64_t v77 = aBlock;
  swift_retain(v26);
  swift_errorRelease(v77);
  sub_10002C78C(*(uint64_t *)&v93[0], *((uint64_t *)&v93[0] + 1));
  swift_release(v26);

  swift_release(isEscapingClosureAtFileLocation);
  swift_release(v70);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a7 + OBJC_IVAR____TtC20FMIPClientXPCService27ServerInteractionController_authenticationProvider);
  sub_100007E2C((uint64_t)v115, (uint64_t)&aBlock);
  sub_100007E2C((uint64_t)v85, (uint64_t)v99);
  sub_10000D1A4(v86, (uint64_t)v93, &qword_100077240);
  swift_unknownObjectWeakInit(&v100, a3);
  *((void *)&v100 + 1) = Strong;
  sub_100007A00(&aBlock, (uint64_t)&v101);
  sub_100007A00(v99, (uint64_t)&v105);
  sub_10000CE10((uint64_t)v93, (uint64_t)&v106);
  swift_weakInit(v107, a7);
  v107[1] = v87;
  __int128 v79 = (void *)sub_10002FE10(v89, a5, v26);
  (*(void (**)(uint64_t (*)(), void))((swift_isaMask & *a3) + 0x98LL))(sub_100029CB4, 0LL);
  uint64_t v80 = swift_allocObject(&unk_10006CBE8, 24LL, 7LL);
  swift_weakInit(v80 + 16, a7);
  uint64_t v81 = (void *)swift_allocObject(&unk_10006CEB8, 40LL, 7LL);
  v81[2] = v80;
  v81[3] = v79;
  v81[4] = v26;
  swift_retain(v26);
  swift_retain(v80);
  id v83 = v79;
  v82(v111, sub_10002E104, v81);

  swift_release(v26);
  swift_release(v81);
  sub_10002C830((uint64_t)&v100);
  sub_100007A28(v111);
  sub_10000D20C((uint64_t)v115, &qword_1000783A0);
  swift_release(v80);
  sub_100007A28(v112);
  return sub_100007A28(v117);
}

uint64_t sub_10002B978( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, void (*a7)(uint64_t, uint64_t), uint64_t a8, uint64_t a9, uint64_t a10)
{
  void (*v20)(__int128 *__return_ptr, uint64_t, uint64_t);
  dispatch_queue_s *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  void *v26;
  void *v27;
  uint64_t v28;
  char isEscapingClosureAtFileLocation;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  dispatch_queue_s *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  dispatch_queue_s *v83;
  void *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  void (*v88)(uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t Strong;
  dispatch_group_t v92;
  uint64_t v93;
  void *v94;
  void (*v95)(void *, uint64_t (*)(uint64_t, uint64_t, char), void *);
  dispatch_group_s *v96;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t);
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  _OWORD v106[5];
  uint64_t v107;
  __int128 aBlock;
  uint64_t (*v109)(uint64_t);
  void *v110;
  uint64_t (*v111)();
  __int128 v112[2];
  __int128 v113;
  uint64_t (*v114)(uint64_t);
  void *v115;
  uint64_t (*v116)();
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  void v120[2];
  void v121[3];
  uint64_t v122;
  uint64_t v123;
  void v124[5];
  void v125[3];
  uint64_t v126;
  uint64_t v127;
  _BYTE v128[40];
  _BYTE v129[40];
  void v130[5];
  void v131[6];
  v131[3] = a9;
  v131[4] = a10;
  uint64_t v17 = sub_10000CD88(v131);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a9 - 8) + 16LL))(v17, a1, a9);
  v130[3] = &type metadata for ClientContextRequestContent;
  v130[4] = &off_10006AD38;
  v130[0] = a2;
  v130[1] = a3;
  sub_100007E2C((uint64_t)v131, (uint64_t)v128);
  sub_100007E2C((uint64_t)v130, (uint64_t)v129);
  sub_100007E2C((uint64_t)v128, (uint64_t)&v113);
  sub_100007E2C((uint64_t)v129, (uint64_t)&v117);
  sub_100007A00(&v113, (uint64_t)v125);
  sub_100007A00(&v117, (uint64_t)v124);
  uint64_t v18 = v126;
  uint64_t v19 = v127;
  sub_1000087E0(v125, v126);
  uint64_t v20 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v19 + 8);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  v20(&v113, v18, v19);
  __int128 v100 = a7;
  v101 = a8;
  int v99 = a4;
  if (!v115)
  {
    sub_10000D20C((uint64_t)&v113, &qword_100077228);
LABEL_10:
    sub_100007E2C((uint64_t)v125, (uint64_t)&v113);
    uint64_t v52 = objc_allocWithZone((Class)type metadata accessor for HttpClient(0LL));
    a7 = (void (*)(uint64_t, uint64_t))HttpClient.init(endpoint:)(&v113);
    uint64_t v53 = sub_100005394(&qword_100079660);
    uint64_t v54 = swift_allocObject(v53, 72LL, 7LL);
    *(_OWORD *)(v54 + sub_100027CB4(v0 + 16) = xmmword_10005B2C0;
    sub_100007E2C((uint64_t)v125, (uint64_t)&v113);
    uint64_t v55 = sub_100005394(&qword_100078390);
    uint64_t v56 = String.init<A>(describing:)(&v113, v55);
    uint64_t v58 = v57;
    *(void *)(v54 + 56) = &type metadata for String;
    *(void *)(v54 + 64) = sub_100005854();
    *(void *)(v54 + 3sub_100007A28(v0 + 2) = v56;
    *(void *)(v54 + 40) = v58;
    uint64_t v59 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v60 = (void *)static OS_os_log.default.getter(v59);
    uint64_t v61 = static os_log_type_t.default.getter(v60);
    os_log(_:dso:log:type:_:)("Created standard endpoint %@", 28LL, 2LL, &_mh_execute_header, v60, v61, v54);
    swift_bridgeObjectRelease(v54);

    goto LABEL_11;
  }

  sub_100007A00(&v113, (uint64_t)v121);
  sub_10000D1A4(a4, (uint64_t)&v113, &qword_100077240);
  __int128 v21 = (dispatch_queue_s *)v113;
  if (!(void)v113)
  {
    sub_10000D20C((uint64_t)&v113, &qword_100077240);
LABEL_9:
    sub_100007A28(v121);
    goto LABEL_10;
  }

  __int128 v104 = 0LL;
  uint64_t v105 = 0LL;
  sub_10000CE58((uint64_t)&v113, (uint64_t)v106);
  uint64_t v22 = swift_allocObject(&unk_10006CC38, 112LL, 7LL);
  __int128 v23 = v106[3];
  *(_OWORD *)(v22 + 48) = v106[2];
  *(_OWORD *)(v22 + 64) = v23;
  *(_OWORD *)(v22 + 80) = v106[4];
  uint64_t v24 = v107;
  uint64_t v25 = v106[1];
  *(_OWORD *)(v22 + sub_100027CB4(v0 + 16) = v106[0];
  *(_OWORD *)(v22 + 3sub_100007A28(v0 + 2) = v25;
  *(void *)(v22 + 96) = v24;
  *(void *)(v22 + 104) = &v104;
  uint64_t v26 = (void *)swift_allocObject(&unk_10006CC60, 32LL, 7LL);
  void v26[2] = sub_10002C868;
  void v26[3] = v22;
  v111 = sub_100010FA0;
  *(void *)&v112[0] = v26;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  uint64_t v109 = sub_10003CE54;
  uint64_t v110 = &unk_10006CC78;
  double v27 = _Block_copy(&aBlock);
  uint64_t v28 = *(void *)&v112[0];
  swift_retain(v26);
  swift_release(v28);
  dispatch_sync(v21, v27);
  _Block_release(v27);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v26, "", 103LL, 45LL, 31LL, 1LL);
  swift_release(v26);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    goto LABEL_21;
  }
  uint64_t v31 = v104;
  uint64_t v30 = v105;
  swift_release(v22);
  sub_10000CE94((uint64_t)&v113);
  if (!v30) {
    goto LABEL_9;
  }
  uint64_t v32 = v122;
  uint64_t v33 = v123;
  sub_1000087E0(v121, v122);
  uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v32, v33);
  uint64_t v36 = v35;
  uint64_t v37 = v122;
  uint64_t v38 = v123;
  sub_1000087E0(v121, v122);
  uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 16))(v37, v38);
  id v41 = v40;
  uint64_t v42 = type metadata accessor for FMIPRequestCredential();
  uint64_t v22 = swift_allocObject(v42, 64LL, 7LL);
  *(void *)(v22 + sub_100027CB4(v0 + 16) = v34;
  *(void *)(v22 + 24) = v36;
  *(void *)(v22 + 3sub_100007A28(v0 + 2) = v39;
  *(void *)(v22 + 40) = v41;
  *(void *)(v22 + 48) = v31;
  *(void *)(v22 + 56) = v30;
  sub_100007E2C((uint64_t)v125, (uint64_t)&v113);
  swift_retain(v22);
  double v27 = (void *)sub_10002AA70(&v113, v22);
  uint64_t v26 = (void *)type metadata accessor for FMIPEndpointConfiguration(0LL);
  uint64_t v115 = v26;
  unsigned int v116 = (uint64_t (*)())&off_10006C918;
  *(void *)&uint64_t v113 = v27;
  uint64_t v43 = objc_allocWithZone((Class)type metadata accessor for HttpClient(0LL));
  swift_retain(v27);
  a7 = (void (*)(uint64_t, uint64_t))HttpClient.init(endpoint:)(&v113);
  if (qword_100076B00 != -1) {
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v44 = qword_1000798C8;
    uint64_t v45 = sub_100005394(&qword_100079660);
    uint64_t v46 = swift_allocObject(v45, 72LL, 7LL);
    *(_OWORD *)(v46 + sub_100027CB4(v0 + 16) = xmmword_10005B2C0;
    *(void *)&uint64_t v113 = v27;
    swift_retain(v27);
    uint64_t v47 = String.init<A>(describing:)(&v113, v26);
    uint64_t v49 = v48;
    *(void *)(v46 + 56) = &type metadata for String;
    id v50 = sub_100005854();
    *(void *)(v46 + 64) = v50;
    *(void *)(v46 + 3sub_100007A28(v0 + 2) = v47;
    *(void *)(v46 + 40) = v49;
    uint64_t v51 = static os_log_type_t.default.getter(v50);
    os_log(_:dso:log:type:_:)("Created redirected endpoint %@", 30LL, 2LL, &_mh_execute_header, v44, v51, v46);
    swift_release(v22);
    swift_release(v27);
    swift_bridgeObjectRelease(v46);
    sub_100007A28(v121);
LABEL_11:
    uint64_t v62 = sub_100005394(&qword_100078398);
    swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
    uint64_t v63 = sub_100032D74();
    uint64_t v64 = swift_allocObject(&unk_10006CA80, 32LL, 7LL);
    uint64_t v102 = a5;
    *(void *)(v64 + sub_100027CB4(v0 + 16) = a5;
    a5 = (void (*)(uint64_t, uint64_t))a6;
    *(void *)(v64 + 24) = a6;
    uint64_t v65 = swift_allocObject(&unk_10006CAA8, 32LL, 7LL);
    *(void *)(v65 + sub_100027CB4(v0 + 16) = sub_10002C744;
    *(void *)(v65 + 24) = v64;
    v106[0] = xmmword_10005D640;
    *(void *)&__int128 aBlock = 0LL;
    LOBYTE(v121[0]) = 0;
    uint64_t v66 = *(dispatch_queue_s **)(v63 + 56);
    uint64_t v67 = (void *)swift_allocObject(&unk_10006CAD0, 64LL, 7LL);
    v67[2] = v106;
    v67[3] = v63;
    v67[4] = &aBlock;
    v67[5] = v121;
    v67[6] = sub_10002C74C;
    v67[7] = v65;
    uint64_t v68 = swift_allocObject(&unk_10006CAF8, 32LL, 7LL);
    *(void *)(v68 + sub_100027CB4(v0 + 16) = sub_10002C758;
    *(void *)(v68 + 24) = v67;
    unsigned int v116 = sub_1000078F0;
    *(void *)&__int128 v117 = v68;
    *(void *)&uint64_t v113 = _NSConcreteStackBlock;
    *((void *)&v113 + 1) = 1107296256LL;
    uint64_t v114 = sub_10003CE54;
    uint64_t v115 = &unk_10006CB10;
    uint64_t v26 = _Block_copy(&v113);
    double v27 = (void *)v117;
    swift_retain_n(a6, 2LL);
    swift_retain_n(v64, 2LL);
    swift_retain(v63);
    swift_retain(v65);
    swift_retain(v68);
    swift_release(v27);
    dispatch_sync(v66, v26);
    _Block_release(v26);
    uint64_t v22 = swift_isEscapingClosureAtFileLocation(v68, "", 90LL, 149LL, 26LL, 1LL);
    swift_release(v68);
    if ((v22 & 1) == 0) {
      break;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    swift_once(&qword_100076B00, sub_100009AE4);
  }

  if (LOBYTE(v121[0]) == 1)
  {
    uint64_t v69 = *(void *)&v106[0];
    if (*(void *)&v106[0] != 1LL)
    {
      uint64_t v70 = aBlock;
      uint64_t v98 = aBlock;
      uint64_t v71 = *((void *)&v106[0] + 1);
      id v72 = sub_100005394(&qword_100079660);
      __int128 v73 = swift_allocObject(v72, 72LL, 7LL);
      *(_OWORD *)(v73 + sub_100027CB4(v0 + 16) = xmmword_10005B2C0;
      *(void *)&uint64_t v113 = v71;
      swift_errorRetain(v71);
      swift_errorRetain(v71);
      swift_bridgeObjectRetain(v69);
      swift_errorRetain(v71);
      swift_bridgeObjectRetain(v69);
      swift_errorRetain(v70);
      sub_1000241B0(v69, v71);
      uint64_t v74 = sub_100005394(&qword_100077BD8);
      uint64_t v75 = String.init<A>(describing:)(&v113, v74);
      uint64_t v77 = v76;
      *(void *)(v73 + 56) = &type metadata for String;
      *(void *)(v73 + 64) = sub_100005854();
      *(void *)(v73 + 3sub_100007A28(v0 + 2) = v75;
      *(void *)(v73 + 40) = v77;
      uint64_t v78 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
      __int128 v79 = (void *)static OS_os_log.default.getter(v78);
      uint64_t v80 = static os_log_type_t.default.getter(v79);
      os_log(_:dso:log:type:_:)( "Calling response handler's completion with error: %@.",  53LL,  2LL,  &_mh_execute_header,  v79,  v80,  v73);
      swift_bridgeObjectRelease(v73);

      v102(v69, v71);
      swift_errorRelease(v71);
      swift_bridgeObjectRelease_n(v69, 2LL);
      swift_errorRelease(v71);
      swift_errorRelease(v98);
      sub_10002C78C(v69, v71);
    }
  }

  uint64_t v81 = aBlock;
  swift_retain(v63);
  swift_errorRelease(v81);
  sub_10002C78C(*(uint64_t *)&v106[0], *((uint64_t *)&v106[0] + 1));
  swift_release(v63);
  swift_release(a6);
  swift_release_n(v64, 2LL);
  swift_release(v65);
  swift_release(v67);
  Swift::String v82 = swift_allocObject(&unk_10006CB48, 24LL, 7LL);
  *(void *)(v82 + sub_100027CB4(v0 + 16) = a7;
  v106[0] = xmmword_10005D640;
  *(void *)&__int128 aBlock = 0LL;
  LOBYTE(v121[0]) = 0;
  id v83 = *(dispatch_queue_s **)(v63 + 56);
  __int128 v84 = (void *)swift_allocObject(&unk_10006CB70, 64LL, 7LL);
  v84[2] = v106;
  v84[3] = v63;
  v84[4] = &aBlock;
  v84[5] = v121;
  v84[6] = sub_10002C7E0;
  v84[7] = v82;
  uint64_t v85 = swift_allocObject(&unk_10006CB98, 32LL, 7LL);
  *(void *)(v85 + sub_100027CB4(v0 + 16) = sub_10002C758;
  *(void *)(v85 + 24) = v84;
  unsigned int v116 = sub_100010FA0;
  *(void *)&__int128 v117 = v85;
  *(void *)&uint64_t v113 = _NSConcreteStackBlock;
  *((void *)&v113 + 1) = 1107296256LL;
  uint64_t v114 = sub_10003CE54;
  uint64_t v115 = &unk_10006CBB0;
  uint64_t v26 = _Block_copy(&v113);
  double v27 = (void *)v117;
  a5 = a7;
  swift_retain(v63);
  a7 = a5;
  swift_retain(v82);
  swift_retain(v85);
  swift_release(v27);
  dispatch_sync(v83, v26);
  _Block_release(v26);
  uint64_t v22 = swift_isEscapingClosureAtFileLocation(v85, "", 90LL, 149LL, 26LL, 1LL);
  swift_release(v85);
  if ((v22 & 1) != 0) {
    goto LABEL_20;
  }
  if (LOBYTE(v121[0]) == 1)
  {
    uint64_t v86 = v106[0];
    uint64_t v87 = aBlock;
    uint64_t v88 = *(void (**)(uint64_t))((swift_isaMask & *(void *)a7) + 0xE8LL);
    sub_1000241B0(*(uint64_t *)&v106[0], *((uint64_t *)&v106[0] + 1));
    uint64_t v89 = swift_errorRetain(v87);
    v88(v89);
    swift_errorRelease(v87);
    sub_10002C78C(v86, *((uint64_t *)&v86 + 1));
  }

  int v90 = aBlock;
  swift_retain(v63);
  swift_errorRelease(v90);
  sub_10002C78C(*(uint64_t *)&v106[0], *((uint64_t *)&v106[0] + 1));
  swift_release(v63);

  swift_release(v82);
  swift_release(v84);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v101 + OBJC_IVAR____TtC20FMIPClientXPCService27ServerInteractionController_authenticationProvider);
  sub_100007E2C((uint64_t)v128, (uint64_t)&aBlock);
  sub_100007E2C((uint64_t)v129, (uint64_t)v112);
  sub_10000D1A4(v99, (uint64_t)v106, &qword_100077240);
  swift_unknownObjectWeakInit(&v113, a7);
  *((void *)&v113 + 1) = Strong;
  sub_100007A00(&aBlock, (uint64_t)&v114);
  sub_100007A00(v112, (uint64_t)&v118);
  sub_10000CE10((uint64_t)v106, (uint64_t)&v119);
  swift_weakInit(v120, v101);
  v120[1] = v100;
  uint64_t v92 = sub_10002FE10((uint64_t)v102, a6, v63);
  (*(void (**)(uint64_t (*)(), void))((swift_isaMask & *(void *)a7) + 0x98LL))( sub_100029CB4,  0LL);
  uint64_t v93 = swift_allocObject(&unk_10006CBE8, 24LL, 7LL);
  swift_weakInit(v93 + 16, v101);
  uint64_t v94 = (void *)swift_allocObject(&unk_10006CC10, 40LL, 7LL);
  v94[2] = v93;
  v94[3] = v92;
  v94[4] = v63;
  swift_retain(v63);
  swift_retain(v93);
  int v96 = v92;
  v95(v124, sub_10002C820, v94);

  swift_release(v63);
  swift_release(v94);
  sub_10002C830((uint64_t)&v113);
  sub_100007A28(v124);
  sub_10000D20C((uint64_t)v128, &qword_1000783A0);
  swift_release(v93);
  sub_100007A28(v125);
  sub_100007A28(v130);
  return sub_100007A28(v131);
}

uint64_t sub_10002C720()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002C744(uint64_t *a1)
{
  return sub_100029600(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16));
}

uint64_t *sub_10002C74C(uint64_t *a1, uint64_t a2)
{
  return sub_10002AC80(a1, a2, *(void (**)(void *))(v2 + 16));
}

uint64_t sub_10002C758()
{
  return sub_100023FF4((uint64_t (*)(void, void, void, void, void, void))sub_10003458C);
}

uint64_t sub_10002C764()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002C774(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100007A28(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002C784(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10002C78C(uint64_t result, uint64_t a2)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    return swift_errorRelease(a2);
  }

  return result;
}

uint64_t sub_10002C7BC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10002C7E8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002C7F8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10002C820(uint64_t a1, uint64_t a2, char a3)
{
  return sub_100029774(a1, a2, a3 & 1, v3[2], v3[3], v3[4]);
}

uint64_t sub_10002C830(uint64_t a1)
{
  return a1;
}

id sub_10002C868()
{
  return sub_1000286C8((void *)(v0 + 16), *(uint64_t **)(v0 + 104));
}

uint64_t sub_10002C874()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_10002C884()
{
  unint64_t result = qword_1000783A8;
  if (!qword_1000783A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005B738, &type metadata for DefaultResponseContent);
    atomic_store(result, (unint64_t *)&qword_1000783A8);
  }

  return result;
}

unint64_t sub_10002C8C8()
{
  unint64_t result = qword_1000783B8;
  if (!qword_1000783B8)
  {
    uint64_t v1 = sub_100005420(&qword_1000783B0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1000783B8);
  }

  return result;
}

uint64_t sub_10002C914(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    return swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRetain(a1);
  return swift_errorRetain(a2);
}

uint64_t sub_10002C940( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t), void *a8)
{
  void (*v17)(__int128 *__return_ptr, uint64_t, uint64_t);
  void *v18;
  dispatch_queue_s *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  dispatch_queue_s *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  dispatch_queue_s *v79;
  void *v80;
  uint64_t v81;
  id v82;
  void *v83;
  __int128 v84;
  uint64_t v85;
  void (*v86)(uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t Strong;
  dispatch_group_t v90;
  uint64_t v91;
  void *v92;
  void (*v93)(void *, uint64_t (*)(uint64_t, uint64_t, char), void *);
  dispatch_group_s *v94;
  uint64_t v96;
  void (*v97)(uint64_t);
  uint64_t v98;
  void *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD v106[5];
  uint64_t v107;
  __int128 aBlock;
  uint64_t (*v109)(uint64_t);
  void *v110;
  uint64_t (*v111)();
  __int128 v112[2];
  __int128 v113;
  uint64_t (*v114)(uint64_t);
  void *v115;
  uint64_t (*v116)();
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  void v120[2];
  void v121[3];
  uint64_t v122;
  uint64_t v123;
  void v124[5];
  void v125[3];
  uint64_t v126;
  uint64_t v127;
  _BYTE v128[40];
  _BYTE v129[40];
  void v130[5];
  void v131[3];
  uint64_t v132;
  _UNKNOWN **v133;
  uint64_t v14 = swift_allocObject(&unk_10006D0C0, 32LL, 7LL);
  uint64_t v97 = a7;
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = a7;
  *(void *)(v14 + 24) = a8;
  v132 = type metadata accessor for FMIPEndpointConfiguration(0LL);
  uint64_t v133 = &off_10006C918;
  uint64_t v102 = (void *)v132;
  v131[0] = a1;
  v130[3] = &type metadata for ClientContextRequestContent;
  v130[4] = &off_10006AD38;
  v130[0] = a2;
  v130[1] = a3;
  sub_100007E2C((uint64_t)v131, (uint64_t)v128);
  sub_100007E2C((uint64_t)v130, (uint64_t)v129);
  sub_100007E2C((uint64_t)v128, (uint64_t)&v113);
  sub_100007E2C((uint64_t)v129, (uint64_t)&v117);
  sub_100007A00(&v113, (uint64_t)v125);
  sub_100007A00(&v117, (uint64_t)v124);
  uint64_t v15 = v126;
  uint64_t v16 = v127;
  sub_1000087E0(v125, v126);
  uint64_t v17 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v16 + 8);
  swift_retain(a8);
  swift_retain(a1);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  v17(&v113, v15, v16);
  uint64_t v18 = &unk_10005B000;
  uint64_t v98 = a4;
  if (!v115)
  {
    sub_10000D20C((uint64_t)&v113, &qword_100077228);
LABEL_10:
    sub_100007E2C((uint64_t)v125, (uint64_t)&v113);
    id v50 = objc_allocWithZone((Class)type metadata accessor for HttpClient(0LL));
    v101 = (void *)HttpClient.init(endpoint:)(&v113);
    uint64_t v51 = sub_100005394(&qword_100079660);
    uint64_t v52 = swift_allocObject(v51, 72LL, 7LL);
    *(_OWORD *)(v52 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
    sub_100007E2C((uint64_t)v125, (uint64_t)&v113);
    uint64_t v53 = sub_100005394(&qword_100078390);
    uint64_t v54 = String.init<A>(describing:)(&v113, v53);
    uint64_t v56 = v55;
    *(void *)(v52 + 56) = &type metadata for String;
    *(void *)(v52 + 64) = sub_100005854();
    *(void *)(v52 + 3sub_100007A28(v0 + 2) = v54;
    *(void *)(v52 + 40) = v56;
    uint64_t v57 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v58 = (void *)static OS_os_log.default.getter(v57);
    uint64_t v59 = static os_log_type_t.default.getter(v58);
    os_log(_:dso:log:type:_:)("Created standard endpoint %@", 28LL, 2LL, &_mh_execute_header, v58, v59, v52);
    swift_bridgeObjectRelease(v52);

    goto LABEL_11;
  }

  sub_100007A00(&v113, (uint64_t)v121);
  sub_10000D1A4(a4, (uint64_t)&v113, &qword_100077240);
  uint64_t v19 = (dispatch_queue_s *)v113;
  if (!(void)v113)
  {
    sub_10000D20C((uint64_t)&v113, &qword_100077240);
LABEL_9:
    sub_100007A28(v121);
    uint64_t v18 = &unk_10005B000;
    goto LABEL_10;
  }

  __int128 v104 = 0LL;
  uint64_t v105 = 0LL;
  sub_10000CE58((uint64_t)&v113, (uint64_t)v106);
  uint64_t v20 = swift_allocObject(&unk_10006D278, 112LL, 7LL);
  __int128 v21 = v106[3];
  *(_OWORD *)(v20 + 48) = v106[2];
  *(_OWORD *)(v20 + 64) = v21;
  *(_OWORD *)(v20 + 80) = v106[4];
  uint64_t v22 = v107;
  __int128 v23 = v106[1];
  *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = v106[0];
  *(_OWORD *)(v20 + 3sub_100007A28(v0 + 2) = v23;
  *(void *)(v20 + 96) = v22;
  *(void *)(v20 + 104) = &v104;
  uint64_t v24 = swift_allocObject(&unk_10006D2A0, 32LL, 7LL);
  *(void *)(v24 + swift_weakDestroy(v0 + 16) = sub_10002E18C;
  *(void *)(v24 + 24) = v20;
  v111 = sub_100010FA0;
  *(void *)&v112[0] = v24;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  uint64_t v109 = sub_10003CE54;
  uint64_t v110 = &unk_10006D2B8;
  uint64_t v25 = _Block_copy(&aBlock);
  uint64_t v26 = *(void **)&v112[0];
  swift_retain(v24);
  swift_release(v26);
  dispatch_sync(v19, v25);
  _Block_release(v25);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v24, "", 103LL, 45LL, 31LL, 1LL);
  swift_release(v24);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    goto LABEL_21;
  }
  a8 = &unk_10005B000;
  uint64_t v29 = v104;
  uint64_t v28 = v105;
  swift_release(v20);
  sub_10000CE94((uint64_t)&v113);
  if (!v28) {
    goto LABEL_9;
  }
  uint64_t v30 = v122;
  uint64_t v31 = v123;
  sub_1000087E0(v121, v122);
  uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(v30, v31);
  uint64_t v34 = v33;
  uint64_t v35 = v122;
  uint64_t v36 = v123;
  sub_1000087E0(v121, v122);
  uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 16))(v35, v36);
  uint64_t v39 = v38;
  uint64_t v40 = type metadata accessor for FMIPRequestCredential();
  uint64_t isEscapingClosureAtFileLocation = swift_allocObject(v40, 64LL, 7LL);
  *(void *)(isEscapingClosureAtFileLocation + swift_weakDestroy(v0 + 16) = v32;
  *(void *)(isEscapingClosureAtFileLocation + 24) = v34;
  *(void *)(isEscapingClosureAtFileLocation + 3sub_100007A28(v0 + 2) = v37;
  *(void *)(isEscapingClosureAtFileLocation + 40) = v39;
  *(void *)(isEscapingClosureAtFileLocation + 48) = v29;
  *(void *)(isEscapingClosureAtFileLocation + 56) = v28;
  sub_100007E2C((uint64_t)v125, (uint64_t)&v113);
  swift_retain(isEscapingClosureAtFileLocation);
  uint64_t v24 = sub_10002AA70(&v113, isEscapingClosureAtFileLocation);
  uint64_t v26 = v102;
  uint64_t v115 = v102;
  unsigned int v116 = (uint64_t (*)())&off_10006C918;
  *(void *)&uint64_t v113 = v24;
  id v41 = objc_allocWithZone((Class)type metadata accessor for HttpClient(0LL));
  swift_retain(v24);
  v101 = (void *)HttpClient.init(endpoint:)(&v113);
  if (qword_100076B00 != -1) {
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v42 = qword_1000798C8;
    uint64_t v43 = sub_100005394(&qword_100079660);
    uint64_t v44 = swift_allocObject(v43, 72LL, 7LL);
    *(_OWORD *)(v44 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
    *(void *)&uint64_t v113 = v24;
    swift_retain(v24);
    uint64_t v45 = String.init<A>(describing:)(&v113, v26);
    uint64_t v47 = v46;
    *(void *)(v44 + 56) = &type metadata for String;
    unint64_t v48 = sub_100005854();
    *(void *)(v44 + 64) = v48;
    *(void *)(v44 + 3sub_100007A28(v0 + 2) = v45;
    *(void *)(v44 + 40) = v47;
    uint64_t v49 = static os_log_type_t.default.getter(v48);
    os_log(_:dso:log:type:_:)("Created redirected endpoint %@", 30LL, 2LL, &_mh_execute_header, v42, v49, v44);
    swift_release(isEscapingClosureAtFileLocation);
    swift_release(v24);
    swift_bridgeObjectRelease(v44);
    sub_100007A28(v121);
    uint64_t v18 = a8;
LABEL_11:
    uint64_t v60 = sub_100005394(&qword_100078398);
    swift_allocObject(v60, *(unsigned int *)(v60 + 48), *(unsigned __int16 *)(v60 + 52));
    a8 = (void *)sub_100032D74();
    uint64_t v24 = swift_allocObject(&unk_10006D0E8, 32LL, 7LL);
    *(void *)(v24 + swift_weakDestroy(v0 + 16) = sub_10002E00C;
    *(void *)(v24 + 24) = v14;
    uint64_t v61 = swift_allocObject(&unk_10006D110, 32LL, 7LL);
    *(void *)(v61 + swift_weakDestroy(v0 + 16) = sub_10002E190;
    *(void *)(v61 + 24) = v24;
    v106[0] = xmmword_10005D640;
    *(void *)&__int128 aBlock = 0LL;
    LOBYTE(v121[0]) = 0;
    uint64_t v62 = (dispatch_queue_s *)a8[7];
    uint64_t v63 = (void *)swift_allocObject(&unk_10006D138, 64LL, 7LL);
    v63[2] = v106;
    v63[3] = a8;
    v63[4] = &aBlock;
    v63[5] = v121;
    v63[6] = sub_10002E188;
    v63[7] = v61;
    uint64_t isEscapingClosureAtFileLocation = swift_allocObject(&unk_10006D160, 32LL, 7LL);
    *(void *)(isEscapingClosureAtFileLocation + swift_weakDestroy(v0 + 16) = sub_10002C758;
    *(void *)(isEscapingClosureAtFileLocation + 24) = v63;
    unsigned int v116 = sub_100010FA0;
    *(void *)&__int128 v117 = isEscapingClosureAtFileLocation;
    *(void *)&uint64_t v113 = _NSConcreteStackBlock;
    uint64_t v64 = v18[102];
    *((void *)&v113 + 1) = v64;
    uint64_t v114 = sub_10003CE54;
    uint64_t v115 = &unk_10006D178;
    uint64_t v26 = _Block_copy(&v113);
    uint64_t v65 = v117;
    swift_retain_n(v14, 2LL);
    swift_retain_n(v24, 2LL);
    swift_retain(a8);
    swift_retain(v61);
    swift_retain(isEscapingClosureAtFileLocation);
    swift_release(v65);
    dispatch_sync(v62, v26);
    _Block_release(v26);
    LOBYTE(v6sub_100007A28(v0 + 2) = swift_isEscapingClosureAtFileLocation(isEscapingClosureAtFileLocation, "", 90LL, 149LL, 26LL, 1LL);
    swift_release(isEscapingClosureAtFileLocation);
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    swift_once(&qword_100076B00, sub_100009AE4);
  }

  v103 = v14;
  if (LOBYTE(v121[0]) == 1)
  {
    uint64_t v66 = *(void *)&v106[0];
    if (*(void *)&v106[0] != 1LL)
    {
      uint64_t v67 = aBlock;
      int v96 = aBlock;
      uint64_t v68 = *((void *)&v106[0] + 1);
      uint64_t v69 = sub_100005394(&qword_100079660);
      uint64_t v70 = swift_allocObject(v69, 72LL, 7LL);
      *(_OWORD *)(v70 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
      *(void *)&uint64_t v113 = v68;
      swift_errorRetain(v68);
      swift_errorRetain(v68);
      swift_bridgeObjectRetain(v66);
      swift_errorRetain(v68);
      swift_bridgeObjectRetain(v66);
      swift_errorRetain(v67);
      sub_1000241B0(v66, v68);
      uint64_t v71 = sub_100005394(&qword_100077BD8);
      id v72 = String.init<A>(describing:)(&v113, v71);
      uint64_t v74 = v73;
      *(void *)(v70 + 56) = &type metadata for String;
      *(void *)(v70 + 64) = sub_100005854();
      *(void *)(v70 + 3sub_100007A28(v0 + 2) = v72;
      *(void *)(v70 + 40) = v74;
      uint64_t v75 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
      uint64_t v76 = (void *)static OS_os_log.default.getter(v75);
      uint64_t v77 = static os_log_type_t.default.getter(v76);
      os_log(_:dso:log:type:_:)( "Calling response handler's completion with error: %@.",  53LL,  2LL,  &_mh_execute_header,  v76,  v77,  v70);
      swift_bridgeObjectRelease(v70);

      sub_10003C4EC(v66, v68, v97);
      swift_errorRelease(v68);
      swift_bridgeObjectRelease_n(v66, 2LL);
      swift_errorRelease(v68);
      swift_errorRelease(v96);
      sub_10002C78C(v66, v68);
    }
  }

  uint64_t v78 = aBlock;
  swift_retain(a8);
  swift_errorRelease(v78);
  sub_10002C78C(*(uint64_t *)&v106[0], *((uint64_t *)&v106[0] + 1));
  swift_release(a8);
  swift_release(v14);
  swift_release_n(v24, 2LL);
  swift_release(v61);
  swift_release(v63);
  uint64_t v24 = swift_allocObject(&unk_10006D1B0, 24LL, 7LL);
  *(void *)(v24 + swift_weakDestroy(v0 + 16) = v101;
  v106[0] = xmmword_10005D640;
  *(void *)&__int128 aBlock = 0LL;
  LOBYTE(v121[0]) = 0;
  __int128 v79 = (dispatch_queue_s *)a8[7];
  uint64_t v80 = (void *)swift_allocObject(&unk_10006D1D8, 64LL, 7LL);
  v80[2] = v106;
  v80[3] = a8;
  v80[4] = &aBlock;
  v80[5] = v121;
  v80[6] = sub_10002C7E0;
  v80[7] = v24;
  uint64_t isEscapingClosureAtFileLocation = swift_allocObject(&unk_10006D200, 32LL, 7LL);
  *(void *)(isEscapingClosureAtFileLocation + swift_weakDestroy(v0 + 16) = sub_10002C758;
  *(void *)(isEscapingClosureAtFileLocation + 24) = v80;
  unsigned int v116 = sub_100010FA0;
  *(void *)&__int128 v117 = isEscapingClosureAtFileLocation;
  *(void *)&uint64_t v113 = _NSConcreteStackBlock;
  *((void *)&v113 + 1) = v64;
  uint64_t v114 = sub_10003CE54;
  uint64_t v115 = &unk_10006D218;
  uint64_t v26 = _Block_copy(&v113);
  uint64_t v81 = v117;
  Swift::String v82 = v101;
  swift_retain(a8);
  id v83 = v82;
  swift_retain(v24);
  swift_retain(isEscapingClosureAtFileLocation);
  swift_release(v81);
  dispatch_sync(v79, v26);
  _Block_release(v26);
  LOBYTE(v79) = swift_isEscapingClosureAtFileLocation(isEscapingClosureAtFileLocation, "", 90LL, 149LL, 26LL, 1LL);
  swift_release(isEscapingClosureAtFileLocation);
  if (LOBYTE(v121[0]) == 1)
  {
    __int128 v84 = v106[0];
    uint64_t v85 = aBlock;
    uint64_t v86 = *(void (**)(uint64_t))((swift_isaMask & *v83) + 0xE8LL);
    sub_1000241B0(*(uint64_t *)&v106[0], *((uint64_t *)&v106[0] + 1));
    uint64_t v87 = swift_errorRetain(v85);
    v86(v87);
    swift_errorRelease(v85);
    sub_10002C78C(v84, *((uint64_t *)&v84 + 1));
  }

  uint64_t v88 = aBlock;
  swift_retain(a8);
  swift_errorRelease(v88);
  sub_10002C78C(*(uint64_t *)&v106[0], *((uint64_t *)&v106[0] + 1));
  swift_release(a8);

  swift_release(v24);
  swift_release(v80);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a6 + OBJC_IVAR____TtC20FMIPClientXPCService27ServerInteractionController_authenticationProvider);
  sub_100007E2C((uint64_t)v128, (uint64_t)&aBlock);
  sub_100007E2C((uint64_t)v129, (uint64_t)v112);
  sub_10000D1A4(v98, (uint64_t)v106, &qword_100077240);
  swift_unknownObjectWeakInit(&v113, v83);
  *((void *)&v113 + 1) = Strong;
  sub_100007A00(&aBlock, (uint64_t)&v114);
  sub_100007A00(v112, (uint64_t)&v118);
  sub_10000CE10((uint64_t)v106, (uint64_t)&v119);
  swift_weakInit(v120, a6);
  v120[1] = a5;
  int v90 = sub_10002FE10((uint64_t)sub_10002E00C, v103, (uint64_t)a8);
  (*(void (**)(uint64_t (*)(), void))((swift_isaMask & *v83) + 0x98LL))(sub_100029CB4, 0LL);
  uint64_t v91 = swift_allocObject(&unk_10006CBE8, 24LL, 7LL);
  swift_weakInit(v91 + 16, a6);
  uint64_t v92 = (void *)swift_allocObject(&unk_10006D250, 40LL, 7LL);
  v92[2] = v91;
  v92[3] = v90;
  v92[4] = a8;
  swift_retain(a8);
  swift_retain(v91);
  uint64_t v94 = v90;
  v93(v124, sub_10002E104, v92);

  swift_release(a8);
  swift_release(v92);
  sub_10002C830((uint64_t)&v113);
  sub_100007A28(v124);
  sub_10000D20C((uint64_t)v128, &qword_1000783A0);
  swift_release(v91);
  sub_100007A28(v125);
  sub_100007A28(v130);
  sub_100007A28(v131);
  return swift_release(v103);
}

void sub_10002D730(void *a1, void (*a2)(uint64_t, void *), void *a3)
{
  uint64_t v74 = a2;
  uint64_t v5 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = swift_allocObject(&unk_10006CCB0, 24LL, 7LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = 1LL;
  uint64_t v10 = swift_allocObject(&unk_10006CCD8, 24LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = 0LL;
  id v11 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v12 = [v11 isInternalBuild];

  if (v12)
  {
    uint64_t v13 = objc_opt_self(&OBJC_CLASS___FMPreferencesUtil);
    NSString v14 = String._bridgeToObjectiveC()();
    NSString v15 = String._bridgeToObjectiveC()();
    LOBYTE(v13) = [(id)v13 BOOLForKey:v14 inDomain:v15];

    if ((v13 & 1) != 0)
    {
      uint64_t v16 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
      uint64_t v17 = (void *)static OS_os_log.default.getter(v16);
      uint64_t v18 = static os_log_type_t.default.getter(v17);
      os_log(_:dso:log:type:_:)( "AuthChallenge certificate pinning disabled. See Setting > Internal > FindMyiPhone > Disable Cert Pinning.",  105LL,  2LL,  &_mh_execute_header,  v17,  v18,  _swiftEmptyArrayStorage);

      uint64_t v19 = *(void *)(v9 + 16);
      uint64_t v20 = *(void **)(v10 + 16);
      id v73 = v20;
      v74(v19, v20);
      swift_release(v9);
      swift_release(v10);

      return;
    }
  }

  id v73 = a3;
  id v21 = [a1 protectionSpace];
  id v22 = [v21 authenticationMethod];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v25 = v24;

  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSURLAuthenticationMethodServerTrust);
  uint64_t v28 = v26;
  if (v23 == v27 && v25 == v26)
  {
    swift_bridgeObjectRelease_n(v25, 2LL);
  }

  else
  {
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v27, v26, 0LL);
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v28);
    if ((v29 & 1) == 0)
    {
      uint64_t v50 = sub_100005394(&qword_100079660);
      uint64_t v51 = swift_allocObject(v50, 72LL, 7LL);
      *(_OWORD *)(v51 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
      id v52 = [v21 authenticationMethod];
      uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
      uint64_t v55 = v54;

      *(void *)(v51 + 56) = &type metadata for String;
      *(void *)(v51 + 64) = sub_100005854();
      *(void *)(v51 + 3sub_100007A28(v0 + 2) = v53;
      *(void *)(v51 + 40) = v55;
      uint64_t v56 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
      uint64_t v57 = (void *)static OS_os_log.default.getter(v56);
      uint64_t v58 = static os_log_type_t.default.getter(v57);
      os_log(_:dso:log:type:_:)( "AuthChallenge method other than ServerTrust, performing default handling: %@",  76LL,  2LL,  &_mh_execute_header,  v57,  v58,  v51);
      swift_bridgeObjectRelease(v51);

      uint64_t v59 = *(void *)(v9 + 16);
      uint64_t v60 = *(void **)(v10 + 16);
      id v72 = v60;
      v74(v59, v60);
      swift_release(v9);
      swift_release(v10);

      goto LABEL_17;
    }
  }

  *(void *)(v9 + swift_weakDestroy(v0 + 16) = 2LL;
  NSString v30 = [v21 host];
  if (!v30)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v32 = v31;
    NSString v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v32);
  }

  uint64_t AppleFMiPService = SecPolicyCreateAppleFMiPService(v30, 0LL);
  if (AppleFMiPService)
  {
    uint64_t v34 = (void *)AppleFMiPService;
    uint64_t v35 = (__SecTrust *)[v21 serverTrust];
    if (v35)
    {
      uint64_t v36 = v35;
      uint64_t v37 = SecTrustSetPolicies(v35, v34);
      if (!(_DWORD)v37)
      {
        sub_1000079C8(0LL, (unint64_t *)&qword_100078760, &OBJC_CLASS___OS_dispatch_queue_ptr);
        (*(void (**)(char *, void, uint64_t))(v6 + 104))( v8,  enum case for DispatchQoS.QoSClass.default(_:),  v5);
        uint64_t v66 = (dispatch_queue_s *)static OS_dispatch_queue.global(qos:)(v8);
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        uint64_t v67 = (void *)swift_allocObject(&unk_10006CD00, 48LL, 7LL);
        v67[2] = v9;
        v67[3] = v10;
        id v68 = v73;
        v67[4] = v74;
        v67[5] = v68;
        aBlock[4] = sub_10002DEFC;
        uint64_t v76 = v67;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = sub_100026768;
        void aBlock[3] = &unk_10006CD18;
        uint64_t v69 = _Block_copy(aBlock);
        uint64_t v70 = v76;
        swift_retain(v9);
        swift_retain(v10);
        swift_retain(v68);
        swift_release(v70);
        SecTrustEvaluateAsync(v36, v66, v69);
        _Block_release(v69);
        swift_release(v9);
        swift_release(v10);

        return;
      }

      int v38 = v37;
      static os_log_type_t.error.getter(v37);
      uint64_t v39 = sub_100005394(&qword_100079660);
      uint64_t v40 = swift_allocObject(v39, 72LL, 7LL);
      *(_OWORD *)(v40 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
      *(void *)(v40 + 56) = &type metadata for Int32;
      *(void *)(v40 + 64) = &protocol witness table for Int32;
      *(_DWORD *)(v40 + 3sub_100007A28(v0 + 2) = v38;
      uint64_t v41 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
      uint64_t v42 = (void *)static OS_os_log.default.getter(v41);
      os_log(_:dso:log:type:_:)("AuthChallenge error setting trust policy %i.", v71);
      swift_bridgeObjectRelease(v40);

      uint64_t v43 = *(void *)(v9 + 16);
      uint64_t v44 = *(void **)(v10 + 16);
      id v72 = v44;
      v74(v43, v44);
      swift_release(v9);
      swift_release(v10);
    }

    else
    {
      uint64_t v61 = static os_log_type_t.error.getter(0LL);
      uint64_t v62 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
      uint64_t v63 = (void *)static OS_os_log.default.getter(v62);
      os_log(_:dso:log:type:_:)( "AuthChallenge missing trust.",  28LL,  2LL,  &_mh_execute_header,  v63,  v61,  _swiftEmptyArrayStorage);

      uint64_t v64 = *(void *)(v9 + 16);
      uint64_t v65 = *(void **)(v10 + 16);
      id v72 = v65;
      v74(v64, v65);
      swift_release(v9);
      swift_release(v10);
    }
  }

  else
  {
    uint64_t v45 = static os_log_type_t.error.getter(0LL);
    uint64_t v46 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v47 = (void *)static OS_os_log.default.getter(v46);
    os_log(_:dso:log:type:_:)( "AuthChallenge failed to create FMIP pinning policy.",  51LL,  2LL,  &_mh_execute_header,  v47,  v45,  _swiftEmptyArrayStorage);

    uint64_t v48 = *(void *)(v9 + 16);
    uint64_t v49 = *(void **)(v10 + 16);
    id v72 = v49;
    v74(v48, v49);
    swift_release(v9);
    swift_release(v10);
  }

uint64_t sub_10002DEB8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10002DEC8()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_10002DEFC(uint64_t a1, int a2)
{
}

uint64_t sub_10002DF0C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002DF20()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002DF38()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002DF48()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10002DF70(uint64_t *a1)
{
}

uint64_t sub_10002DF7C()
{
  return sub_100023FF4((uint64_t (*)(void, void, void, void, void, void))sub_1000343AC);
}

uint64_t sub_10002DF88()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002DF98()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

unint64_t sub_10002DFBC()
{
  unint64_t result = qword_1000783D0;
  if (!qword_1000783D0)
  {
    unint64_t result = swift_getWitnessTable( &unk_10005C030,  &type metadata for ServerInteractionController.ServerInteractionError);
    atomic_store(result, (unint64_t *)&qword_1000783D0);
  }

  return result;
}

void sub_10002E004(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10002E00C(uint64_t a1, uint64_t a2)
{
  return sub_10003C4EC(a1, a2, *(void (**)(uint64_t))(v2 + 16));
}

uint64_t sub_10002E018()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002E028()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0xE8LL))();
}

uint64_t sub_10002E064()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002E078()
{
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10002E0B0()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  sub_100007A28((void *)(v0 + 64));
  return swift_deallocObject(v0, 112LL, 7LL);
}

uint64_t sub_10002E0F4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002E194()
{
  uint64_t v0 = sub_100005394(&qword_100077BE8);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v7 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v8 = 1LL;
  id v9 = [v7 URLsForDirectory:5 inDomains:1];

  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v3);
  if (*(void *)(v10 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))( v2,  v10 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)),  v3);
    uint64_t v8 = 0LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, v8, 1LL, v3);
  swift_bridgeObjectRelease(v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1LL, v3) == 1)
  {
    sub_10002E398((uint64_t)v2);
    unint64_t v11 = sub_10002E3D8();
    swift_allocError(&_s20PreferencesPathErrorON, v11, 0LL, 0LL);
    return swift_willThrow();
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)(0x6E65726566657250LL, 0xEB00000000736563LL, 1LL);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

uint64_t sub_10002E398(uint64_t a1)
{
  uint64_t v2 = sub_100005394(&qword_100077BE8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_10002E3D8()
{
  unint64_t result = qword_1000783D8;
  if (!qword_1000783D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005D700, &_s20PreferencesPathErrorON);
    atomic_store(result, (unint64_t *)&qword_1000783D8);
  }

  return result;
}

uint64_t _s20PreferencesPathErrorOwst(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10002E45C + 4 * byte_10005D650[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10002E47C + 4 * byte_10005D655[v4]))();
  }
}

_BYTE *sub_10002E45C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10002E47C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10002E484(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10002E48C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10002E494(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10002E49C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *_s20PreferencesPathErrorOMa()
{
  return &_s20PreferencesPathErrorON;
}

unint64_t sub_10002E4BC()
{
  unint64_t result = qword_1000783E0;
  if (!qword_1000783E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005D6D8, &_s20PreferencesPathErrorON);
    atomic_store(result, (unint64_t *)&qword_1000783E0);
  }

  return result;
}

uint64_t sub_10002E500(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  v18[0] = a1;
  unint64_t v6 = sub_10002E63C();
  uint64_t v7 = ResponseSerializable.dictionaryValue.getter(&type metadata for PlaySoundRequestBody, v6);
  swift_bridgeObjectRelease(a1);
  sub_100007E2C((uint64_t)a2, (uint64_t)v18);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = sub_10003A018((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v3 + 24) = v7;
  uint64_t v8 = (unint64_t *)(v3 + 16);
  sub_100007E2C((uint64_t)v18, (uint64_t)v17);
  uint64_t v9 = sub_10001B81C(v17);
  uint64_t v11 = v10;
  sub_100007A28(v17);
  v17[0] = v9;
  v17[1] = v11;
  unint64_t v12 = sub_100008510();
  uint64_t v13 = ResponseSerializable.dictionaryValue.getter(&type metadata for UserAgentHeader, v12);
  swift_bridgeObjectRelease(v11);
  unint64_t v14 = sub_1000081A0(v13);
  swift_bridgeObjectRelease(v13);
  sub_100007A28(v18);
  if (v14)
  {
    swift_beginAccess(v3 + 16, v17, 1LL, 0LL);
    unint64_t v15 = *v8;
    *uint64_t v8 = v14;
    swift_bridgeObjectRelease(v15);
  }

  sub_100007A28(a2);
  return v3;
}

uint64_t type metadata accessor for DevicePlaySoundRequestContent()
{
  return objc_opt_self(&OBJC_CLASS____TtC20FMIPClientXPCService29DevicePlaySoundRequestContent);
}

unint64_t sub_10002E63C()
{
  unint64_t result = qword_1000784C8;
  if (!qword_1000784C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005D7F8, &type metadata for PlaySoundRequestBody);
    atomic_store(result, (unint64_t *)&qword_1000784C8);
  }

  return result;
}

uint64_t sub_10002E680(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100005394(&qword_100078500);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_1000087E0(a1, v8);
  unint64_t v10 = sub_10002EA34();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for PlaySoundRequestBody.CodingKeys,  &type metadata for PlaySoundRequestBody.CodingKeys,  v10,  v8,  v9);
  uint64_t v13 = a2;
  sub_100005394(&qword_1000784F0);
  sub_10002EA78(&qword_100078508, (void (*)(void))sub_10000A254, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v13);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10002E79C(uint64_t a1)
{
  unint64_t v2 = sub_10002EA34();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002E7C4(uint64_t a1)
{
  unint64_t v2 = sub_10002EA34();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10002E7EC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = sub_10002E8F0(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10002E814(void *a1)
{
  return sub_10002E680(a1, *v1);
}

ValueMetadata *type metadata accessor for PlaySoundRequestBody()
{
  return &type metadata for PlaySoundRequestBody;
}

unint64_t sub_10002E83C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10002E868();
  unint64_t result = sub_10002E8AC();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_10002E868()
{
  unint64_t result = qword_1000784D0;
  if (!qword_1000784D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005D7D0, &type metadata for PlaySoundRequestBody);
    atomic_store(result, (unint64_t *)&qword_1000784D0);
  }

  return result;
}

unint64_t sub_10002E8AC()
{
  unint64_t result = qword_1000784D8;
  if (!qword_1000784D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005D7A8, &type metadata for PlaySoundRequestBody);
    atomic_store(result, (unint64_t *)&qword_1000784D8);
  }

  return result;
}

void *sub_10002E8F0(void *a1)
{
  uint64_t v3 = sub_100005394(&qword_1000784E0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_1000087E0(a1, v7);
  unint64_t v10 = sub_10002EA34();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for PlaySoundRequestBody.CodingKeys,  &type metadata for PlaySoundRequestBody.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    sub_100007A28(a1);
  }

  else
  {
    uint64_t v11 = sub_100005394(&qword_1000784F0);
    sub_10002EA78( &qword_1000784F8,  (void (*)(void))sub_10000A210,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = v14;
    sub_100007A28(a1);
  }

  return v9;
}

unint64_t sub_10002EA34()
{
  unint64_t result = qword_1000784E8;
  if (!qword_1000784E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005D8D8, &type metadata for PlaySoundRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000784E8);
  }

  return result;
}

uint64_t sub_10002EA78(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_100005420(&qword_1000784F0);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for PlaySoundRequestBody.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10002EB20 + 4 * byte_10005D740[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10002EB40 + 4 * byte_10005D745[v4]))();
  }
}

_BYTE *sub_10002EB20(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_10002EB40(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10002EB48(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10002EB50(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10002EB58(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10002EB60(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PlaySoundRequestBody.CodingKeys()
{
  return &type metadata for PlaySoundRequestBody.CodingKeys;
}

unint64_t sub_10002EB80()
{
  unint64_t result = qword_100078510;
  if (!qword_100078510)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005D8B0, &type metadata for PlaySoundRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078510);
  }

  return result;
}

unint64_t sub_10002EBC8()
{
  unint64_t result = qword_100078518;
  if (!qword_100078518)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005D820, &type metadata for PlaySoundRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078518);
  }

  return result;
}

unint64_t sub_10002EC10()
{
  unint64_t result = qword_100078520;
  if (!qword_100078520)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005D848, &type metadata for PlaySoundRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078520);
  }

  return result;
}

uint64_t sub_10002EC54()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for DeviceDiscoveryAutomation()
{
  return objc_opt_self(&OBJC_CLASS____TtC20FMIPClientXPCService25DeviceDiscoveryAutomation);
}

uint64_t sub_10002ECA0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = &_swiftEmptyArrayStorage;
  uint64_t v16 = sub_1000079C8(0LL, (unint64_t *)&qword_100078760, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v17 = &_swiftEmptyArrayStorage;
  uint64_t v12 = sub_1000078F8( (unint64_t *)&qword_100076B38,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v13 = sub_100005394((uint64_t *)&unk_100078770);
  uint64_t v14 = sub_10001A008( (unint64_t *)&qword_100076B40,  (uint64_t *)&unk_100078770,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v6, v12);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v2);
  *(void *)(v1 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001ELL,  0x8000000100058370LL,  v11,  v8,  v5,  0LL);
  return v1;
}

uint64_t sub_10002EE7C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v3 = (void *)static OS_os_log.default.getter(v2);
  uint64_t v4 = static os_log_type_t.default.getter(v3);
  os_log(_:dso:log:type:_:)( "Automation Discovery discoveredDevices",  38LL,  2LL,  &_mh_execute_header,  v3,  v4,  _swiftEmptyArrayStorage);

  uint64_t v14 = _swiftEmptyArrayStorage;
  uint64_t v5 = *(dispatch_queue_s **)(v1 + 24);
  uint64_t v6 = swift_allocObject(&unk_10006D620, 32LL, 7LL);
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = v1;
  *(void *)(v6 + 24) = &v14;
  uint64_t v7 = swift_allocObject(&unk_10006D648, 32LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = sub_10002FDF0;
  *(void *)(v7 + 24) = v6;
  aBlock[4] = sub_1000078F0;
  uint64_t v13 = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10003CE54;
  void aBlock[3] = &unk_10006D660;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = v13;
  swift_retain(v1);
  swift_retain(v7);
  swift_release(v9);
  dispatch_sync(v5, v8);
  _Block_release(v8);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v7, "", 128LL, 37LL, 31LL, 1LL);
  uint64_t result = swift_release(v7);
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v11 = v14;
    swift_release(v6);
    return (uint64_t)v11;
  }

  return result;
}

uint64_t sub_10002F010(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_100005394(&qword_100079660);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(v5 + 56) = sub_100005394(&qword_100078610);
  *(void *)(v5 + 64) = sub_10001A008( &qword_100078618,  &qword_100078610,  (uint64_t)&protocol conformance descriptor for [A]);
  *(void *)(v5 + 3sub_100007A28(v0 + 2) = v6;
  sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v7 = swift_bridgeObjectRetain(v6);
  uint64_t v8 = (void *)static OS_os_log.default.getter(v7);
  uint64_t v9 = static os_log_type_t.default.getter(v8);
  os_log(_:dso:log:type:_:)("discoveredDevices: %@", 21LL, 2LL, &_mh_execute_header, v8, v9, v5);
  swift_bridgeObjectRelease(v5);

  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *a2;
  *a2 = v10;
  swift_bridgeObjectRetain(v10);
  return swift_bridgeObjectRelease(v11);
}

uint64_t sub_10002F11C(uint64_t a1, void (*a2)(__int128 *), uint64_t a3)
{
  uint64_t v32 = a2;
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v33 = *(void *)(v5 - 8);
  uint64_t v34 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = 0LL;
  unint64_t v37 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(20LL);
  swift_bridgeObjectRelease(v37);
  URL.init(fileURLWithPath:)(0xD000000000000038LL, 0x8000000100058240LL);
  uint64_t v8 = sub_100005394(&qword_100079660);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  __int128 v35 = xmmword_10005B2C0;
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
  uint64_t v10 = ((uint64_t (*)(void))URL.absoluteString.getter)();
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v13 = sub_100005854();
  *(void *)(v9 + 64) = v13;
  *(void *)(v9 + 3sub_100007A28(v0 + 2) = v10;
  *(void *)(v9 + 40) = v12;
  uint64_t v14 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  unint64_t v15 = (void *)static OS_os_log.default.getter(v14);
  uint64_t v16 = static os_log_type_t.default.getter(v15);
  os_log(_:dso:log:type:_:)( "Automation Discovery startDiscovering with url: %@",  50LL,  2LL,  &_mh_execute_header,  v15,  v16,  v9);
  swift_bridgeObjectRelease(v9);

  uint64_t v17 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = v35;
  swift_retain(a1);
  uint64_t v18 = swift_retain(a3);
  uint64_t v19 = URL.absoluteString.getter(v18);
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = v13;
  *(void *)(v17 + 3sub_100007A28(v0 + 2) = v19;
  *(void *)(v17 + 40) = v20;
  id v21 = (void *)static OS_os_log.default.getter(v19);
  uint64_t v22 = static os_log_type_t.default.getter(v21);
  os_log(_:dso:log:type:_:)("Load from url: %@", 17LL, 2LL, &_mh_execute_header, v21, v22, v17);
  swift_bridgeObjectRelease(v17);

  uint64_t v23 = Data.init(contentsOf:options:)(v7, 0LL);
  unint64_t v25 = v24;
  uint64_t v26 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  uint64_t v27 = PropertyListDecoder.init()();
  unint64_t v28 = sub_10002FD50();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( &type metadata for DeviceDiscoveryDeviceInput,  v23,  v25,  &type metadata for DeviceDiscoveryDeviceInput,  v28);
  swift_release(v27);
  uint64_t v30 = v36;
  sub_10002F49C(v36, a1, v32);
  swift_bridgeObjectRelease(v30);
  sub_10000AADC(v23, v25);
  swift_release(a3);
  swift_release(a1);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v7, v34);
}

void sub_10002F49C(uint64_t a1, uint64_t a2, void (*a3)(__int128 *))
{
  uint64_t v4 = sub_100005394(&qword_100079660);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
  *(void *)(v5 + 56) = sub_100005394(&qword_1000785F8);
  *(void *)(v5 + 64) = sub_10001A008( &qword_100078600,  &qword_1000785F8,  (uint64_t)&protocol conformance descriptor for [A]);
  *(void *)(v5 + 3sub_100007A28(v0 + 2) = a1;
  sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v6 = swift_bridgeObjectRetain(a1);
  uint64_t v7 = (void *)static OS_os_log.default.getter(v6);
  uint64_t v8 = static os_log_type_t.default.getter(v7);
  os_log(_:dso:log:type:_:)("Automation devices: %@", 22LL, 2LL, &_mh_execute_header, v7, v8, v5);
  swift_bridgeObjectRelease(v5);

  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain(a1);
    uint64_t v22 = a1;
    uint64_t v10 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v25 = v9;
      uint64_t v12 = *(v10 - 1);
      uint64_t v11 = *v10;
      uint64_t v14 = v10[1];
      uint64_t v13 = v10[2];
      uint64_t v15 = v10[3];
      uint64_t v16 = *(void **)(a2 + 16);
      uint64_t v26 = v10[4];
      swift_bridgeObjectRetain_n(v26, 2LL);
      swift_bridgeObjectRetain_n(v11, 2LL);
      swift_bridgeObjectRetain_n(v13, 2LL);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
      *(void *)(a2 + swift_weakDestroy(v0 + 16) = v16;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v16 = sub_10002F804(0LL, v16[2] + 1LL, 1, v16);
        *(void *)(a2 + swift_weakDestroy(v0 + 16) = v16;
      }

      unint64_t v19 = v16[2];
      unint64_t v18 = v16[3];
      if (v19 >= v18 >> 1)
      {
        uint64_t v16 = sub_10002F804((void *)(v18 > 1), v19 + 1, 1, v16);
        *(void *)(a2 + swift_weakDestroy(v0 + 16) = v16;
      }

      v10 += 6;
      unint64_t v28 = &type metadata for DeviceDiscoveryAutomationDevice;
      char v29 = &off_10006FE10;
      uint64_t v20 = (void *)swift_allocObject(&unk_10006D5F8, 64LL, 7LL);
      *(void *)&__int128 v27 = v20;
      v20[2] = v12;
      v20[3] = v11;
      v20[4] = v14;
      v20[5] = v13;
      v20[6] = v15;
      v20[7] = v26;
      void v16[2] = v19 + 1;
      sub_100007A00(&v27, (uint64_t)&v16[5 * v19 + 4]);
      unint64_t v28 = &type metadata for DeviceDiscoveryAutomationDevice;
      char v29 = &off_10006FE10;
      id v21 = (void *)swift_allocObject(&unk_10006D5F8, 64LL, 7LL);
      *(void *)&__int128 v27 = v21;
      void v21[2] = v12;
      v21[3] = v11;
      v21[4] = v14;
      _OWORD v21[5] = v13;
      _DWORD v21[6] = v15;
      v21[7] = v26;
      a3(&v27);
      sub_100007A28(&v27);
      uint64_t v9 = v25 - 1;
    }

    while (v25 != 1);
    swift_bridgeObjectRelease(v22);
  }

uint64_t sub_10002F74C()
{
  return sub_10002EE7C();
}

uint64_t sub_10002F76C(uint64_t a1, uint64_t a2)
{
  return sub_10002FAA8(a1, a2);
}

void sub_10002F78C()
{
  uint64_t v0 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  id v2 = (id)static OS_os_log.default.getter(v0);
  uint64_t v1 = static os_log_type_t.default.getter(v2);
  os_log(_:dso:log:type:_:)( "Automation Discovery stopDiscovering",  36LL,  2LL,  &_mh_execute_header,  v2,  v1,  _swiftEmptyArrayStorage);
}

void *sub_10002F804(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005394(&qword_100078608);
    uint64_t v11 = (void *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    _OWORD v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }

  else
  {
    uint64_t v11 = &_swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v11 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    uint64_t v14 = sub_100005394(&qword_100076D68);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v14);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_10002F938(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10002F98C(a1, a2, a3, a4, &qword_100078620);
}

void *sub_10002F944(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10002F98C(a1, a2, a3, a4, &qword_100078648);
}

void *sub_10002F950(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10002F98C(a1, a2, a3, a4, &qword_100078658);
}

void *sub_10002F95C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10002F98C(a1, a2, a3, a4, &qword_100078650);
}

void *sub_10002F968(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10002F98C(a1, a2, a3, a4, &qword_100078640);
}

void *sub_10002F974(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10002F98C(a1, a2, a3, a4, &qword_100078638);
}

void *sub_10002F980(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10002F98C(a1, a2, a3, a4, &qword_100078630);
}

void *sub_10002F98C(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v7 = a4[3];
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v8 = a2;
  }

  uint64_t v9 = a4[2];
  if (v8 <= v9) {
    uint64_t v10 = a4[2];
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    uint64_t v11 = sub_100005394(a5);
    size_t v12 = (void *)swift_allocObject(v11, 16 * v10 + 32, 7LL);
    int64_t v13 = j__malloc_size(v12);
    uint64_t v14 = v13 - 32;
    if (v13 < 32) {
      uint64_t v14 = v13 - 17;
    }
    v12[2] = v9;
    v12[3] = 2 * (v14 >> 4);
  }

  else
  {
    size_t v12 = &_swiftEmptyArrayStorage;
  }

  if ((v6 & 1) != 0)
  {
    if (v12 != a4 || v12 + 4 >= &a4[2 * v9 + 4]) {
      memmove(v12 + 4, a4 + 4, 16 * v9);
    }
    a4[2] = 0LL;
  }

  else
  {
    uint64_t v16 = sub_100005394(&qword_100078628);
    swift_arrayInitWithCopy(v12 + 4, a4 + 4, v9, v16);
  }

  swift_bridgeObjectRelease(a4);
  return v12;
}

uint64_t sub_10002FAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v23 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  size_t v12 = (void *)static OS_os_log.default.getter(v11);
  uint64_t v13 = static os_log_type_t.default.getter(v12);
  os_log(_:dso:log:type:_:)( "Automation Discovery startDiscovering",  37LL,  2LL,  &_mh_execute_header,  v12,  v13,  _swiftEmptyArrayStorage);

  uint64_t v14 = (void *)swift_allocObject(&unk_10006D5A8, 40LL, 7LL);
  v14[2] = v2;
  void v14[3] = a1;
  v14[4] = a2;
  aBlock[4] = sub_10002FD2C;
  uint64_t v26 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  void aBlock[3] = &unk_10006D5C0;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain(v2);
  uint64_t v16 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v16);
  unint64_t v24 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v19 = sub_10001A008(&qword_100076D58, (uint64_t *)&unk_100078740, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v18, v19, v5, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v7, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v22);
  return swift_release(v26);
}

uint64_t sub_10002FD00()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10002FD2C()
{
  return sub_10002F11C(*(void *)(v0 + 16), *(void (**)(__int128 *))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10002FD38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100007A28(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002FD48(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_10002FD50()
{
  unint64_t result = qword_1000785F0;
  if (!qword_1000785F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E5B4, &type metadata for DeviceDiscoveryDeviceInput);
    atomic_store(result, (unint64_t *)&qword_1000785F0);
  }

  return result;
}

uint64_t sub_10002FD94()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10002FDCC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002FDF0()
{
  return sub_10002F010(*(void *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_10002FDF8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

dispatch_group_t sub_10002FE10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  dispatch_group_t v8 = dispatch_group_create();
  sub_100007E2C(v3 + 16, (uint64_t)v38);
  sub_100007E2C(v3 + 56, (uint64_t)v39);
  sub_100007A00(v38, (uint64_t)v35);
  sub_100007A28(v39);
  sub_100007A00(v35, (uint64_t)v32);
  sub_100030520(v3, (uint64_t)v38);
  uint64_t v9 = swift_allocObject(&unk_10006D6A0, 264LL, 7LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v8;
  sub_100007A00(v32, v9 + 24);
  sub_1000305D4((uint64_t)v38, v9 + 64);
  sub_100007E2C(v3 + 16, (uint64_t)v36);
  sub_100007E2C(v3 + 56, (uint64_t)v37);
  sub_10000D1A4(v3 + 96, (uint64_t)v35, &qword_100077240);
  sub_100030520(v3, (uint64_t)v38);
  sub_100007A00(v36, (uint64_t)v33);
  sub_100007A00(v37, (uint64_t)v34 + 8);
  sub_10000CE10((uint64_t)v35, (uint64_t)v32);
  uint64_t v10 = swift_allocObject(&unk_10006D6C8, 416LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v8;
  sub_1000305D4((uint64_t)v38, v10 + 24);
  uint64_t v29 = a3;
  *(void *)(v10 + 224) = a3;
  __int128 v11 = v33[0];
  *(_OWORD *)(v10 + 248) = v33[1];
  __int128 v12 = v34[1];
  *(_OWORD *)(v10 + 264) = v34[0];
  *(_OWORD *)(v10 + 280) = v12;
  *(_OWORD *)(v10 + 296) = v34[2];
  *(_OWORD *)(v10 + 23sub_100007A28(v0 + 2) = v11;
  sub_10000CE10((uint64_t)v32, v10 + 312);
  *(void *)(v10 + 400) = a1;
  *(void *)(v10 + 408) = a2;
  uint64_t v13 = swift_allocObject(&unk_10006D6F0, 32LL, 7LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = sub_100030658;
  *(void *)(v13 + 24) = v9;
  v31[0] = 401LL;
  v31[1] = sub_100030C84;
  v31[2] = v13;
  uint64_t v14 = swift_allocObject(&unk_10006D718, 32LL, 7LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = sub_100030C4C;
  *(void *)(v14 + 24) = v10;
  v31[3] = 330LL;
  void v31[4] = sub_1000315B8;
  v31[5] = v14;
  uint64_t v15 = swift_allocObject(&unk_10006D740, 32LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = sub_100030C84;
  *(void *)(v15 + 24) = v13;
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v3);
  dispatch_group_t v30 = v8;
  if (Strong)
  {
    uint64_t v17 = Strong;
    dispatch_group_t v18 = v8;
    uint64_t v19 = *(void (**)(uint64_t, uint64_t (*)(), uint64_t))((swift_isaMask & *Strong) + 0xC8LL);
    uint64_t v20 = v18;
    swift_retain_n(v13, 2LL);
    uint64_t v21 = v20;
    swift_retain(v29);
    swift_retain(a2);
    swift_retain(v9);
    swift_retain(v10);
    v19(401LL, sub_100030CD0, v15);
    swift_release(v13);
  }

  else
  {
    uint64_t v22 = v8;
    swift_retain(v13);
    swift_retain(v29);
    swift_retain(a2);
    swift_retain(v9);
    swift_retain(v10);
  }

  swift_release(v15);
  uint64_t v23 = swift_allocObject(&unk_10006D768, 32LL, 7LL);
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = sub_1000315B8;
  *(void *)(v23 + 24) = v14;
  unint64_t v24 = (void *)swift_unknownObjectWeakLoadStrong(v4);
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = *(void (**)(uint64_t, uint64_t (*)(), uint64_t))((swift_isaMask & *v24) + 0xC8LL);
    swift_retain_n(v14, 2LL);
    v26(330LL, sub_100030CD0, v23);
    swift_release(v10);
    swift_release(v9);
    swift_release(v14);
  }

  else
  {
    swift_retain(v14);
    swift_release(v10);
    swift_release(v9);
  }

  swift_release(v23);
  uint64_t v27 = sub_100005394(&qword_100078660);
  swift_arrayDestroy(v31, 2LL, v27);
  return v30;
}

void sub_1000301F4(int a1, int a2, dispatch_group_t group, void *a4, uint64_t a5)
{
  unint64_t v8 = sub_100005818();
  uint64_t v9 = (void *)static OS_os_log.default.getter(v8);
  uint64_t v10 = static os_log_type_t.default.getter(v9);
  os_log(_:dso:log:type:_:)( "Renewing credentials because of 401",  35LL,  2LL,  &_mh_execute_header,  v9,  v10,  &_swiftEmptyArrayStorage);

  uint64_t v11 = a4[3];
  uint64_t v12 = a4[4];
  sub_1000087E0(a4, v11);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v12 + 8))(&aBlock, v11, v12);
  if (v48)
  {
    uint64_t v13 = sub_100007A00(&aBlock, (uint64_t)v51);
    uint64_t v14 = *(void **)(a5 + 8);
    if (v14)
    {
      uint64_t v15 = v52;
      uint64_t v16 = v53;
      sub_1000087E0(v51, v52);
      uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
      swift_unknownObjectRetain(v14);
      uint64_t v18 = v17(v15, v16);
      uint64_t v20 = v19;
      uint64_t v21 = v52;
      uint64_t v22 = v53;
      sub_1000087E0(v51, v52);
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 16))(v21, v22);
      uint64_t v25 = v24;
      uint64_t v26 = v52;
      uint64_t v27 = v53;
      sub_1000087E0(v51, v52);
      uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 32))(v26, v27);
      uint64_t v30 = v29;
      id v31 = objc_allocWithZone((Class)type metadata accessor for AuthenticationCredential(0LL));
      uint64_t v32 = (void *)AuthenticationCredential.init(authToken:personId:hostName:)(v18, v20, v23, v25, v28, v30);
      unint64_t v33 = sub_10002DFBC();
      uint64_t v34 = swift_allocError(&type metadata for ServerInteractionController.ServerInteractionError, v33, 0LL, 0LL);
      *__int128 v35 = 2;
      uint64_t v36 = (void *)_convertErrorToNSError(_:)(v34);
      swift_errorRelease(v34);
      uint64_t v37 = swift_allocObject(&unk_10006D790, 24LL, 7LL);
      *(void *)(v37 + swift_weakDestroy(v0 + 16) = group;
      uint64_t v49 = sub_100030FA8;
      uint64_t v50 = v37;
      *(void *)&__int128 aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256LL;
      uint64_t v47 = sub_100039988;
      uint64_t v48 = &unk_10006D7A8;
      int v38 = _Block_copy(&aBlock);
      uint64_t v39 = v50;
      uint64_t v40 = group;
      swift_release(v39);
      [v14 credentialDidFail:v32 error:v36 completion:v38];
      _Block_release(v38);
      swift_unknownObjectRelease(v14);
    }

    else
    {
      uint64_t v44 = (void *)static OS_os_log.default.getter(v13);
      uint64_t v45 = static os_log_type_t.default.getter(v44);
      os_log(_:dso:log:type:_:)( "Could not renew credentials - no authentication provider.",  57LL,  2LL,  &_mh_execute_header,  v44,  v45,  &_swiftEmptyArrayStorage);

      dispatch_group_leave(group);
    }

    sub_100007A28(v51);
  }

  else
  {
    uint64_t v41 = sub_10000D20C((uint64_t)&aBlock, &qword_100077228);
    uint64_t v42 = (void *)static OS_os_log.default.getter(v41);
    uint64_t v43 = static os_log_type_t.default.getter(v42);
    os_log(_:dso:log:type:_:)( "Could not renew credentials - no credentials.",  45LL,  2LL,  &_mh_execute_header,  v42,  v43,  &_swiftEmptyArrayStorage);

    dispatch_group_leave(group);
  }

uint64_t sub_100030520(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100030554()
{
  sub_100007A28((void *)(v0 + 24));
  swift_unknownObjectWeakDestroy(v0 + 64);
  swift_unknownObjectRelease(*(void *)(v0 + 72));
  sub_100007A28((void *)(v0 + 80));
  sub_100007A28((void *)(v0 + 120));
  uint64_t v1 = *(void **)(v0 + 160);
  if (v1)
  {

    swift_bridgeObjectRelease(*(void *)(v0 + 184));
    swift_bridgeObjectRelease(*(void *)(v0 + 200));
    sub_100007A28((void *)(v0 + 208));
  }

  swift_weakDestroy(v0 + 248);
  return swift_deallocObject(v0, 264LL, 7LL);
}

uint64_t sub_1000305D4(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  __int128 v4 = *(_OWORD *)(a1 + 80);
  __int128 v6 = *(_OWORD *)(a1 + 32);
  __int128 v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v4;
  *(_OWORD *)(a2 + 3sub_100007A28(v0 + 2) = v6;
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a1 + 16);
  __int128 v8 = *(_OWORD *)(a1 + 144);
  __int128 v7 = *(_OWORD *)(a1 + 160);
  __int128 v9 = *(_OWORD *)(a1 + 128);
  *(void *)(a2 + 176) = *(void *)(a1 + 176);
  *(_OWORD *)(a2 + 144) = v8;
  *(_OWORD *)(a2 + 160) = v7;
  *(_OWORD *)(a2 + 128) = v9;
  __int128 v10 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 11sub_100007A28(v0 + 2) = v10;
  swift_weakTakeInit(a2 + 184, a1 + 184);
  *(void *)(a2 + 19sub_100007A28(v0 + 2) = *(void *)(a1 + 192);
  return a2;
}

void sub_100030658(int a1, int a2)
{
}

void sub_100030668(uint64_t a1, dispatch_group_s *a2)
{
  uint64_t v4 = sub_100005394(&qword_100079660);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
  uint64_t v13 = a1;
  swift_errorRetain(a1);
  uint64_t v6 = sub_100005394(&qword_100077BD8);
  uint64_t v7 = String.init<A>(describing:)(&v13, v6);
  uint64_t v9 = v8;
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_100005854();
  *(void *)(v5 + 3sub_100007A28(v0 + 2) = v7;
  *(void *)(v5 + 40) = v9;
  unint64_t v10 = sub_100005818();
  uint64_t v11 = (void *)static OS_os_log.default.getter(v10);
  uint64_t v12 = static os_log_type_t.default.getter(v11);
  os_log(_:dso:log:type:_:)("Client completed credentialDidFail %@", 37LL, 2LL, &_mh_execute_header, v11, v12, v5);
  swift_bridgeObjectRelease(v5);

  dispatch_group_leave(a2);
}

uint64_t sub_100030758( int a1, uint64_t a2, dispatch_group_t group, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t), void (*a9)(uint64_t, uint64_t))
{
  *(void *)&__int128 v42 = 0xD000000000000010LL;
  *((void *)&v42 + 1) = 0x8000000100058390LL;
  AnyHashable.init<A>(_:)(v45, &v42, &type metadata for String, &protocol witness table for String);
  if (*(void *)(a2 + 16) && (unint64_t v15 = sub_1000483DC((uint64_t)v45), (v16 & 1) != 0))
  {
    sub_100008554(*(void *)(a2 + 56) + 32 * v15, (uint64_t)&v42);
  }

  else
  {
    __int128 v42 = 0u;
    __int128 v43 = 0u;
  }

  sub_100030F50((uint64_t)v45);
  dispatch_group_t v39 = group;
  uint64_t v38 = a7;
  if (*((void *)&v43 + 1))
  {
    if (swift_dynamicCast(v41, &v42, (char *)&type metadata for Any + 8, &type metadata for String, 6LL))
    {
      uint64_t v17 = v41[1];
      uint64_t v40 = v41[0];
      goto LABEL_10;
    }
  }

  else
  {
    sub_10000D20C((uint64_t)&v42, &qword_100078668);
  }

  uint64_t v40 = 0LL;
  uint64_t v17 = 0LL;
LABEL_10:
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  if (qword_100076B00 != -1) {
    swift_once(&qword_100076B00, sub_100009AE4);
  }
  uint64_t v20 = qword_1000798C8;
  uint64_t v21 = sub_100005394(&qword_100079660);
  uint64_t v22 = swift_allocObject(v21, 72LL, 7LL);
  *(_OWORD *)(v22 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
  v45[0] = v40;
  v45[1] = v17;
  swift_bridgeObjectRetain(v17);
  uint64_t v23 = sub_100005394(&qword_100076D78);
  uint64_t v24 = String.init<A>(describing:)(v45, v23);
  uint64_t v26 = v25;
  *(void *)(v22 + 56) = &type metadata for String;
  unint64_t v27 = sub_100005854();
  *(void *)(v22 + 64) = v27;
  *(void *)(v22 + 3sub_100007A28(v0 + 2) = v24;
  *(void *)(v22 + 40) = v26;
  uint64_t v28 = static os_log_type_t.default.getter(v27);
  os_log(_:dso:log:type:_:)("Request redirected to host %@.", 30LL, 2LL, &_mh_execute_header, v20, v28, v22);
  swift_bridgeObjectRelease(v22);
  sub_100007E2C(a6, (uint64_t)v46);
  sub_100007E2C(a6 + 40, (uint64_t)&v47);
  uint64_t v29 = v18;
  sub_100030520(v18, (uint64_t)v45);
  sub_10000D1A4((uint64_t)v46, (uint64_t)v44, &qword_1000783A0);
  sub_10000D1A4(v38, (uint64_t)&v42, &qword_100077240);
  swift_retain(v19);
  swift_retain(a9);
  uint64_t v30 = v39;
  uint64_t v31 = sub_10000D20C((uint64_t)v46, &qword_1000783A0);
  if (v17)
  {
    sub_10000D1A4(v29 + 96, (uint64_t)v41, &qword_100077240);
    if (v41[0])
    {
      sub_10002885C(v40, v17);
      sub_10000CE94((uint64_t)v41);
    }

    else
    {
      sub_10000D20C((uint64_t)v41, &qword_100077240);
    }

    sub_100030D08(*(void *)(v29 + 192) < 1LL, v19, (uint64_t)v45, (uint64_t)v44, &v42, a8, a9, v30);
    swift_release(v19);
    swift_bridgeObjectRelease(v17);
  }

  else
  {
    uint64_t v32 = static os_log_type_t.error.getter(v31);
    unint64_t v33 = sub_100005818();
    uint64_t v34 = (void *)static OS_os_log.default.getter(v33);
    os_log(_:dso:log:type:_:)( "Request redirected, no host name provided.",  42LL,  2LL,  &_mh_execute_header,  v34,  v32,  &_swiftEmptyArrayStorage);

    uint64_t v35 = swift_allocObject(v21, 72LL, 7LL);
    *(_OWORD *)(v35 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
    *(void *)(v35 + 56) = &type metadata for Bool;
    *(void *)(v35 + 64) = &protocol witness table for Bool;
    *(_BYTE *)(v35 + 3sub_100007A28(v0 + 2) = 0;
    static os_log_type_t.default.getter(v35);
    os_log(_:dso:log:type:_:)("Redirect determined we should retry %i", 1);
    swift_bridgeObjectRelease(v35);
    dispatch_group_leave(v30);
    swift_release(v19);
  }

  sub_10002C830((uint64_t)v45);
  sub_10000D20C((uint64_t)v44, &qword_1000783A0);
  sub_10000D20C((uint64_t)&v42, &qword_100077240);

  return swift_release(a9);
}

uint64_t sub_100030B88()
{
  swift_unknownObjectWeakDestroy(v0 + 24);
  swift_unknownObjectRelease(*(void *)(v0 + 32));
  sub_100007A28((void *)(v0 + 40));
  sub_100007A28((void *)(v0 + 80));
  uint64_t v1 = *(void **)(v0 + 120);
  if (v1)
  {

    swift_bridgeObjectRelease(*(void *)(v0 + 144));
    swift_bridgeObjectRelease(*(void *)(v0 + 160));
    sub_100007A28((void *)(v0 + 168));
  }

  swift_weakDestroy(v0 + 208);
  swift_release(*(void *)(v0 + 224));
  sub_100007A28((void *)(v0 + 232));
  sub_100007A28((void *)(v0 + 272));
  uint64_t v2 = *(void **)(v0 + 312);
  if (v2)
  {

    swift_bridgeObjectRelease(*(void *)(v0 + 336));
    swift_bridgeObjectRelease(*(void *)(v0 + 352));
    sub_100007A28((void *)(v0 + 360));
  }

  swift_release(*(void *)(v0 + 408));
  return swift_deallocObject(v0, 416LL, 7LL);
}

uint64_t sub_100030C4C(int a1, uint64_t a2)
{
  return sub_100030758( a1,  a2,  *(dispatch_group_t *)(v2 + 16),  v2 + 24,  *(void *)(v2 + 224),  v2 + 232,  v2 + 312,  *(void (**)(uint64_t, uint64_t))(v2 + 400),  *(void (**)(uint64_t, uint64_t))(v2 + 408));
}

uint64_t sub_100030C84(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

uint64_t sub_100030CAC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100030CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *, uint64_t *))(v2 + 16);
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  return v3(&v6, &v5);
}

void sub_100030D08( char a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (*a6)(uint64_t, uint64_t), void (*a7)(uint64_t, uint64_t), dispatch_group_s *a8)
{
  if (qword_100076B00 != -1) {
    swift_once(&qword_100076B00, sub_100009AE4);
  }
  uint64_t v15 = sub_100005394(&qword_100079660);
  uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
  *(void *)(v16 + 56) = &type metadata for Bool;
  *(void *)(v16 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v16 + 3sub_100007A28(v0 + 2) = a1 & 1;
  static os_log_type_t.default.getter(v16);
  os_log(_:dso:log:type:_:)("Redirect determined we should retry %i", v27);
  swift_bridgeObjectRelease(v16);
  if ((a1 & 1) == 0) {
    goto LABEL_7;
  }
  unint64_t v17 = sub_10002DFBC();
  uint64_t v18 = swift_allocError(&type metadata for ServerInteractionController.ServerInteractionError, v17, 0LL, 0LL);
  *uint64_t v19 = 5;
  sub_10002281C(1LL, 0LL, v18);
  swift_errorRelease(v18);
  uint64_t v20 = *(void *)(a3 + 192);
  uint64_t v21 = v20 + 1;
  if (!__OFADD__(v20, 1LL))
  {
    uint64_t Strong = swift_weakLoadStrong(a3 + 184);
    if (Strong)
    {
      uint64_t v23 = Strong;
      sub_100007E2C(a4, (uint64_t)v34);
      sub_100007E2C(a4 + 40, (uint64_t)v35);
      sub_100007E2C((uint64_t)v34, (uint64_t)v32);
      sub_100007E2C((uint64_t)v35, (uint64_t)v33);
      sub_100007E2C((uint64_t)v32, (uint64_t)v28);
      sub_100007E2C((uint64_t)v33, (uint64_t)v29);
      uint64_t v24 = v30;
      uint64_t v25 = v31;
      uint64_t v26 = sub_1000087E0(v29, v30);
      sub_10002ACFC((uint64_t)v28, (uint64_t)v26, a5, a6, a7, v21, v23, v24, v25);
      sub_10000D20C((uint64_t)v32, &qword_1000783A0);
      sub_100007A28(v29);
      sub_100007A28(v28);
      swift_release(v23);
      sub_100007A28(v35);
      sub_100007A28(v34);
    }

LABEL_7:
    dispatch_group_leave(a8);
    return;
  }

  __break(1u);
}

uint64_t sub_100030F50(uint64_t a1)
{
  return a1;
}

uint64_t sub_100030F84()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100030FA8(uint64_t a1)
{
}

uint64_t sub_100030FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100007A28(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100030FC0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t destroy for HTTPClientStatusCodeHandler(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {

    swift_bridgeObjectRelease(*(void *)(a1 + 120));
    swift_bridgeObjectRelease(*(void *)(a1 + 136));
    sub_100007A28((void *)(a1 + 144));
  }

  return swift_weakDestroy(a1 + 184);
}

uint64_t initializeWithCopy for HTTPClientStatusCodeHandler(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  __int128 v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v4;
  uint64_t v5 = v4;
  uint64_t v6 = **(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  swift_unknownObjectRetain();
  v6(a1 + 16, a2 + 16, v5);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 56, a2 + 56);
  uint64_t v8 = *(void **)(a2 + 96);
  if (v8)
  {
    unint64_t v10 = *(void **)(a2 + 104);
    uint64_t v9 = *(void *)(a2 + 112);
    *(void *)(a1 + 96) = v8;
    *(void *)(a1 + 104) = v10;
    uint64_t v12 = *(void *)(a2 + 120);
    uint64_t v11 = *(void *)(a2 + 128);
    *(void *)(a1 + 11sub_100007A28(v0 + 2) = v9;
    *(void *)(a1 + 120) = v12;
    uint64_t v13 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = v11;
    *(void *)(a1 + 136) = v13;
    __int128 v14 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 168) = v14;
    uint64_t v15 = v14;
    uint64_t v16 = **(void (***)(uint64_t, uint64_t, uint64_t))(v14 - 8);
    id v17 = v8;
    id v18 = v10;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    v16(a1 + 144, a2 + 144, v15);
  }

  else
  {
    __int128 v19 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v19;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    __int128 v20 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 11sub_100007A28(v0 + 2) = v20;
  }

  swift_weakCopyInit(a1 + 184, a2 + 184);
  *(void *)(a1 + 19sub_100007A28(v0 + 2) = *(void *)(a2 + 192);
  return a1;
}

uint64_t assignWithCopy for HTTPClientStatusCodeHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(swift_unknownObjectWeakCopyAssign() + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v5;
  swift_unknownObjectRetain(v5);
  swift_unknownObjectRelease(v4);
  sub_100028F3C((void *)(a1 + 16), (void *)(a2 + 16));
  sub_100028F3C((void *)(a1 + 56), (void *)(a2 + 56));
  uint64_t v6 = (_OWORD *)(a1 + 96);
  __int128 v7 = *(void **)(a1 + 96);
  uint64_t v9 = (_OWORD *)(a2 + 96);
  uint64_t v8 = *(void **)(a2 + 96);
  if (v7)
  {
    if (v8)
    {
      *(void *)(a1 + 96) = v8;
      id v10 = v8;

      uint64_t v11 = *(void **)(a2 + 104);
      uint64_t v12 = *(void **)(a1 + 104);
      *(void *)(a1 + 104) = v11;
      id v13 = v11;

      *(void *)(a1 + 11sub_100007A28(v0 + 2) = *(void *)(a2 + 112);
      uint64_t v14 = *(void *)(a2 + 120);
      uint64_t v15 = *(void *)(a1 + 120);
      *(void *)(a1 + 120) = v14;
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRelease(v15);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      uint64_t v16 = *(void *)(a2 + 136);
      uint64_t v17 = *(void *)(a1 + 136);
      *(void *)(a1 + 136) = v16;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v17);
      sub_100028F3C((void *)(a1 + 144), (void *)(a2 + 144));
    }

    else
    {
      sub_10000CE94(a1 + 96);
      __int128 v25 = *(_OWORD *)(a2 + 112);
      _OWORD *v6 = *v9;
      *(_OWORD *)(a1 + 11sub_100007A28(v0 + 2) = v25;
      __int128 v27 = *(_OWORD *)(a2 + 144);
      __int128 v26 = *(_OWORD *)(a2 + 160);
      __int128 v28 = *(_OWORD *)(a2 + 128);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      *(_OWORD *)(a1 + 144) = v27;
      *(_OWORD *)(a1 + 160) = v26;
      *(_OWORD *)(a1 + 128) = v28;
    }
  }

  else if (v8)
  {
    *(void *)(a1 + 96) = v8;
    id v18 = *(void **)(a2 + 104);
    *(void *)(a1 + 104) = v18;
    *(void *)(a1 + 11sub_100007A28(v0 + 2) = *(void *)(a2 + 112);
    uint64_t v19 = *(void *)(a2 + 120);
    *(void *)(a1 + 120) = v19;
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    uint64_t v20 = *(void *)(a2 + 136);
    *(void *)(a1 + 136) = v20;
    uint64_t v21 = *(void *)(a2 + 168);
    *(void *)(a1 + 168) = v21;
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    uint64_t v22 = **(void (***)(uint64_t, uint64_t, uint64_t))(v21 - 8);
    id v23 = v8;
    id v24 = v18;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    v22(a1 + 144, a2 + 144, v21);
  }

  else
  {
    __int128 v29 = *(_OWORD *)(a2 + 112);
    _OWORD *v6 = *v9;
    *(_OWORD *)(a1 + 11sub_100007A28(v0 + 2) = v29;
    __int128 v30 = *(_OWORD *)(a2 + 128);
    __int128 v31 = *(_OWORD *)(a2 + 144);
    __int128 v32 = *(_OWORD *)(a2 + 160);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(_OWORD *)(a1 + 144) = v31;
    *(_OWORD *)(a1 + 160) = v32;
    *(_OWORD *)(a1 + 128) = v30;
  }

  swift_weakCopyAssign(a1 + 184, a2 + 184);
  *(void *)(a1 + 19sub_100007A28(v0 + 2) = *(void *)(a2 + 192);
  return a1;
}

uint64_t initializeWithTake for HTTPClientStatusCodeHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_unknownObjectWeakTakeInit(a1, a2);
  *(void *)(v4 + 8) = *(void *)(a2 + 8);
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 64) = v5;
  __int128 v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v4 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 3sub_100007A28(v0 + 2) = v6;
  __int128 v7 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(v4 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v4 + 160) = v7;
  *(void *)(v4 + 176) = *(void *)(a2 + 176);
  __int128 v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v4 + 96) = v8;
  __int128 v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 11sub_100007A28(v0 + 2) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  swift_weakTakeInit(v4 + 184, a2 + 184);
  *(void *)(a1 + 19sub_100007A28(v0 + 2) = *(void *)(a2 + 192);
  return a1;
}

uint64_t assignWithTake for HTTPClientStatusCodeHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(swift_unknownObjectWeakTakeAssign() + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRelease(v4);
  sub_100007A28((void *)(a1 + 16));
  __int128 v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 3sub_100007A28(v0 + 2) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  sub_100007A28((void *)(a1 + 56));
  uint64_t v6 = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  __int128 v7 = *(void **)(a1 + 96);
  *(_OWORD *)(a1 + 7sub_100007A28(v0 + 2) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  if (!v7) {
    goto LABEL_5;
  }
  if (!v6)
  {
    sub_10000CE94(a1 + 96);
LABEL_5:
    __int128 v14 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v14;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    __int128 v15 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 11sub_100007A28(v0 + 2) = v15;
    goto LABEL_6;
  }

  *(void *)(a1 + 96) = v6;

  __int128 v8 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);

  uint64_t v9 = *(void *)(a2 + 120);
  uint64_t v10 = *(void *)(a1 + 120);
  *(void *)(a1 + 11sub_100007A28(v0 + 2) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a2 + 136);
  uint64_t v12 = *(void *)(a1 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v11;
  swift_bridgeObjectRelease(v12);
  sub_100007A28((void *)(a1 + 144));
  __int128 v13 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v13;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
LABEL_6:
  swift_weakTakeAssign(a1 + 184, a2 + 184);
  *(void *)(a1 + 19sub_100007A28(v0 + 2) = *(void *)(a2 + 192);
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPClientStatusCodeHandler(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 200)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vsub_100007A28(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPClientStatusCodeHandler(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 15sub_100007A28(v0 + 2) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7sub_100007A28(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 200) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 200) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for HTTPClientStatusCodeHandler()
{
  return &type metadata for HTTPClientStatusCodeHandler;
}

uint64_t sub_1000315BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v31 = *(void *)(v2 - 8);
  uint64_t v32 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v29 = *(void *)(v5 - 8);
  uint64_t v30 = v5;
  __chkstk_darwin(v5);
  __int128 v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000325AC();
  uint64_t v8 = sub_100005394((uint64_t *)&unk_100078730);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  uint64_t v9 = sub_100032B70();
  uint64_t v10 = swift_allocObject(&unk_10006D880, 32LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v1;
  *(void *)(v10 + 24) = v9;
  uint64_t v41 = 0LL;
  uint64_t v42 = 0LL;
  uint64_t v40 = 0LL;
  char v39 = 0;
  uint64_t v11 = *(dispatch_queue_s **)(v9 + 56);
  uint64_t v12 = (void *)swift_allocObject(&unk_10006D8A8, 64LL, 7LL);
  v12[2] = &v41;
  v12[3] = v9;
  v12[4] = &v40;
  void v12[5] = &v39;
  v12[6] = sub_100032D6C;
  v12[7] = v10;
  uint64_t v13 = swift_allocObject(&unk_10006D8D0, 32LL, 7LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = sub_100019D34;
  *(void *)(v13 + 24) = v12;
  uint64_t v37 = sub_1000078F0;
  uint64_t v38 = v13;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v34 = 1107296256LL;
  uint64_t v35 = sub_10003CE54;
  uint64_t v36 = &unk_10006D8E8;
  __int128 v14 = _Block_copy(&aBlock);
  uint64_t v15 = v38;
  swift_retain_n(v9, 3LL);
  uint64_t v16 = v1;
  swift_retain(v10);
  swift_retain(v13);
  swift_release(v15);
  dispatch_sync(v11, v14);
  _Block_release(v14);
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation(v13, "", 90LL, 149LL, 26LL, 1LL);
  uint64_t result = swift_release(v13);
  if ((v15 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    if (v39 == 1)
    {
      uint64_t v18 = v42;
      uint64_t v19 = v40;
      swift_bridgeObjectRetain(v42);
      swift_errorRetain(v19);
      sub_100038D7C((uint64_t)&aBlock, v16, v9);
      swift_errorRelease(v19);
      swift_bridgeObjectRelease(v18);
    }

    uint64_t v20 = v40;
    swift_retain(v9);
    swift_errorRelease(v20);
    uint64_t v21 = v42;
    swift_release_n(v9, 2LL);

    swift_release(v10);
    swift_release(v12);
    swift_bridgeObjectRelease(v21);
    uint64_t v22 = swift_allocObject(&unk_10006D920, 32LL, 7LL);
    *(void *)(v22 + swift_weakDestroy(v0 + 16) = v16;
    *(void *)(v22 + 24) = v9;
    uint64_t v37 = sub_100034584;
    uint64_t v38 = v22;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v34 = 1107296256LL;
    uint64_t v35 = (uint64_t (*)(uint64_t))sub_10004DB74;
    uint64_t v36 = &unk_10006D938;
    id v23 = _Block_copy(&aBlock);
    swift_retain(v9);
    static DispatchQoS.unspecified.getter(v16);
    uint64_t v41 = &_swiftEmptyArrayStorage;
    uint64_t v24 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v25 = sub_100005394((uint64_t *)&unk_100078740);
    uint64_t v26 = sub_10001A008(&qword_100076D58, (uint64_t *)&unk_100078740, (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v27 = v25;
    uint64_t v28 = v32;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v27, v26, v32, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v4, v23);
    _Block_release(v23);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v4, v28);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v30);
    swift_release(v38);
    return v9;
  }

  return result;
}

id sub_1000319AC()
{
  uint64_t v1 = OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider____lazy_storage___apsConnection;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider____lazy_storage___apsConnection);
  id v3 = v2;
  if (v2 == (void *)1)
  {
    swift_unknownObjectUnownedInit(v7, v0);
    id v3 = sub_100031A34((uint64_t)v7);
    swift_unknownObjectUnownedDestroy(v7);
    uint64_t v4 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v3;
    id v5 = v3;
    sub_1000396C8(v4);
  }

  sub_1000396D8(v2);
  return v3;
}

id sub_100031A34(uint64_t a1)
{
  uint64_t v2 = (char *)((uint64_t (*)(void))swift_unknownObjectUnownedLoadStrong)();
  id v3 = *(id *)&v2[OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider__apsConnection];
  id v4 = v3;

  if (!v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(APSEnvironmentProduction);
    uint64_t v6 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)(APSConnectionOverrideNamedDelegatePort);
    uint64_t v8 = v7;
    uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong(a1);
    id v10 = *(id *)&Strong[OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider_serialQueue];

    id v11 = objc_allocWithZone(&OBJC_CLASS___APSConnection);
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v8);
    id v3 = [v11 initWithEnvironmentName:v12 namedDelegatePort:v13 queue:v10];

    if (v3)
    {
      __int128 v14 = (void *)swift_unknownObjectUnownedLoadStrong(a1);
      id v15 = v3;
      [v15 setDelegate:v14];
    }

    uint64_t v16 = (char *)swift_unknownObjectUnownedLoadStrong(a1);
    uint64_t v17 = *(void **)&v16[OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider__apsConnection];
    *(void *)&v16[OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider__apsConnection] = v3;
    id v18 = v3;
  }

  return v3;
}

id sub_100031BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v25 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  id v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider_serialQueue;
  v23[1] = sub_1000079C8(0LL, (unint64_t *)&qword_100078760, &OBJC_CLASS___OS_dispatch_queue_ptr);
  NSString v12 = v2;
  static DispatchQoS.unspecified.getter(v12);
  uint64_t v29 = &_swiftEmptyArrayStorage;
  uint64_t v13 = sub_1000078F8( (unint64_t *)&qword_100076B38,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v14 = sub_100005394((uint64_t *)&unk_100078770);
  uint64_t v15 = sub_10001A008( (unint64_t *)&qword_100076B40,  (uint64_t *)&unk_100078770,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v14, v15, v6, v13);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v25);
  uint64_t v16 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000015LL,  0x8000000100058670LL,  v11,  v8,  v5,  0LL);
  *(void *)(v23[2] + v24) = v16;
  *(void *)&v12[OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider_pendingTopicTokenFutures] = &_swiftEmptySetSingleton;
  uint64_t v17 = &v12[OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider_topicAPSToken];
  *(void *)uint64_t v17 = 0LL;
  *((void *)v17 + 1) = 0LL;
  id v18 = &v12[OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider_publicAPSToken];
  *(void *)id v18 = 0LL;
  *((void *)v18 + 1) = 0LL;
  *(void *)&v12[OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider__apsConnection] = 0LL;
  *(void *)&v12[OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider____lazy_storage___apsConnection] = 1LL;
  uint64_t v19 = &v12[OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider_topic];
  uint64_t v20 = v27;
  *(void *)uint64_t v19 = v26;
  *((void *)v19 + 1) = v20;

  uint64_t v21 = (objc_class *)type metadata accessor for APSTokenProvider();
  v28.receiver = v12;
  v28.super_class = v21;
  return objc_msgSendSuper2(&v28, "init");
}

id sub_100031E20()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider__apsConnection];
  if (v1)
  {
    *(void *)&v0[OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider__apsConnection] = 0LL;
    [v1 shutdown];
  }

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for APSTokenProvider();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_100031F38()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void *)&v0[OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider_serialQueue];
  uint64_t v9 = swift_allocObject(&unk_10006DAD8, 24LL, 7LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v0;
  aBlock[4] = sub_100039608;
  uint64_t v18 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  void aBlock[3] = &unk_10006DAF0;
  uint64_t v10 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v0);
  uint64_t v16 = &_swiftEmptyArrayStorage;
  uint64_t v11 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v12 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v13 = sub_10001A008(&qword_100076D58, (uint64_t *)&unk_100078740, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v4, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v18);
}

void sub_100032124(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider_topicAPSToken + 8);
  if (v2)
  {
    uint64_t v36 = *(void *)(a1 + OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider_topicAPSToken);
    uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider_topicAPSToken + 8);
  }

  else
  {
    uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider_publicAPSToken + 8);
    if (!v3) {
      return;
    }
    uint64_t v36 = *(void *)(a1 + OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider_publicAPSToken);
    swift_bridgeObjectRetain(v3);
  }

  uint64_t v4 = (uint64_t *)(a1 + OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider_pendingTopicTokenFutures);
  swift_beginAccess( a1 + OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider_pendingTopicTokenFutures,  v42,  0LL,  0LL);
  uint64_t v5 = *v4;
  uint64_t v33 = a1;
  if ((*v4 & 0xC000000000000001LL) != 0)
  {
    if (v5 < 0) {
      uint64_t v6 = *v4;
    }
    else {
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRetain(v5);
    uint64_t v7 = __CocoaSet.makeIterator()(v6);
    uint64_t v8 = sub_100005394((uint64_t *)&unk_100078730);
    uint64_t v9 = sub_10001A008( (unint64_t *)&unk_1000787A0,  (uint64_t *)&unk_100078730,  (uint64_t)&protocol conformance descriptor for Future<A>);
    uint64_t v10 = Set.Iterator.init(_cocoa:)(v43, v7, v8, v9);
    uint64_t v5 = v43[0];
    uint64_t v35 = v43[1];
    uint64_t v11 = v43[2];
    uint64_t v12 = v43[3];
    unint64_t v13 = v43[4];
  }

  else
  {
    uint64_t v14 = -1LL << *(_BYTE *)(v5 + 32);
    uint64_t v35 = v5 + 56;
    uint64_t v11 = ~v14;
    uint64_t v15 = -v14;
    if (v15 < 64) {
      uint64_t v16 = ~(-1LL << v15);
    }
    else {
      uint64_t v16 = -1LL;
    }
    unint64_t v13 = v16 & *(void *)(v5 + 56);
    swift_bridgeObjectRetain(v2);
    uint64_t v10 = (void *)swift_bridgeObjectRetain(v5);
    uint64_t v12 = 0LL;
  }

  int64_t v34 = (unint64_t)(v11 + 64) >> 6;
  if (v5 < 0) {
    goto LABEL_17;
  }
LABEL_15:
  if (v13)
  {
    uint64_t v17 = (v13 - 1) & v13;
    unint64_t v18 = __clz(__rbit64(v13)) | (v12 << 6);
    uint64_t v19 = v12;
    goto LABEL_34;
  }

  int64_t v24 = v12 + 1;
  if (__OFADD__(v12, 1LL))
  {
LABEL_42:
    __break(1u);
    return;
  }

  if (v24 >= v34) {
    goto LABEL_38;
  }
  unint64_t v25 = *(void *)(v35 + 8 * v24);
  uint64_t v19 = v12 + 1;
  if (v25) {
    goto LABEL_33;
  }
  uint64_t v19 = v12 + 2;
  if (v12 + 2 < v34)
  {
    unint64_t v25 = *(void *)(v35 + 8 * v19);
    if (v25) {
      goto LABEL_33;
    }
    uint64_t v19 = v12 + 3;
    if (v12 + 3 < v34)
    {
      unint64_t v25 = *(void *)(v35 + 8 * v19);
      if (v25) {
        goto LABEL_33;
      }
      uint64_t v19 = v12 + 4;
      if (v12 + 4 < v34)
      {
        unint64_t v25 = *(void *)(v35 + 8 * v19);
        if (!v25)
        {
          uint64_t v26 = v12 + 5;
          while (v34 != v26)
          {
            unint64_t v25 = *(void *)(v35 + 8 * v26++);
            if (v25)
            {
              uint64_t v19 = v26 - 1;
              goto LABEL_33;
            }
          }

          goto LABEL_38;
        }

LABEL_33:
        uint64_t v17 = (v25 - 1) & v25;
        unint64_t v18 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_34:
        uint64_t v23 = *(void *)(*(void *)(v5 + 48) + 8 * v18);
        swift_retain(v23);
        if (v23)
        {
          while (1)
          {
            unint64_t v13 = v17;
            uint64_t v27 = v11;
            char v41 = 0;
            queue = *(dispatch_queue_s **)(v23 + 56);
            v40[0] = v36;
            v40[1] = v3;
            objc_super v28 = (void *)swift_allocObject(&unk_10006DB28, 56LL, 7LL);
            v28[2] = v23;
            sub_100039644((uint64_t)v40, (uint64_t)(v28 + 3));
            void v28[5] = 0LL;
            v28[6] = &v41;
            uint64_t v29 = swift_allocObject(&unk_10006DB50, 32LL, 7LL);
            *(void *)(v29 + swift_weakDestroy(v0 + 16) = sub_10003968C;
            *(void *)(v29 + 24) = v28;
            aBlock[4] = sub_100010FA0;
            uint64_t v39 = v29;
            aBlock[0] = _NSConcreteStackBlock;
            aBlock[1] = 1107296256LL;
            aBlock[2] = sub_10003CE54;
            void aBlock[3] = &unk_10006DB68;
            uint64_t v30 = _Block_copy(aBlock);
            uint64_t v31 = v39;
            swift_bridgeObjectRetain_n(v3, 2LL);
            swift_retain(v23);
            swift_retain(v29);
            swift_release(v31);
            dispatch_sync(queue, v30);
            _Block_release(v30);
            LOBYTE(v30) = swift_isEscapingClosureAtFileLocation(v29, "", 90LL, 123LL, 26LL, 1LL);
            swift_release(v29);
            sub_100033F08();
            swift_release(v23);
            swift_bridgeObjectRelease(v3);
            uint64_t v10 = (void *)swift_release(v28);
            uint64_t v12 = v19;
            uint64_t v11 = v27;
            if ((v5 & 0x8000000000000000LL) == 0) {
              goto LABEL_15;
            }
LABEL_17:
            uint64_t v20 = __CocoaSet.Iterator.next()(v10);
            if (v20)
            {
              uint64_t v21 = v20;
              v40[0] = v20;
              swift_unknownObjectRetain(v20);
              uint64_t v22 = sub_100005394((uint64_t *)&unk_100078730);
              swift_dynamicCast(aBlock, v40, (char *)&type metadata for Swift.AnyObject + 8, v22, 7LL);
              uint64_t v23 = aBlock[0];
              swift_unknownObjectRelease(v21);
              uint64_t v19 = v12;
              uint64_t v17 = v13;
              if (v23) {
                continue;
              }
            }

            goto LABEL_38;
          }

          __break(1u);
          goto LABEL_42;
        }
      }
    }
  }

    uint64_t v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      int64_t v34 = v33;
    }

    Hasher.init(_seed:)(v40, *(void *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        objc_super v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v35;
  }
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  void *v3 = v8;
  return result;
}

LABEL_38:
  sub_1000085D0(v5);
  swift_bridgeObjectRelease(v3);
  uint64_t v32 = *(void **)(v33 + OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider__apsConnection);
  if (v32)
  {
    *(void *)(v33 + OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider__apsConnection) = 0LL;
    [v32 shutdown];
  }

uint64_t sub_1000325AC()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)&v0[OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider_topic];
  uint64_t v10 = *(void *)&v0[OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider_topic + 8];
  uint64_t v17 = *(void *)&v0[OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider_serialQueue];
  uint64_t v11 = (void *)swift_allocObject(&unk_10006DA88, 40LL, 7LL);
  _OWORD v11[2] = v0;
  v11[3] = v9;
  v11[4] = v10;
  aBlock[4] = sub_1000395D8;
  uint64_t v20 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  void aBlock[3] = &unk_10006DAA0;
  uint64_t v12 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(v10);
  static DispatchQoS.unspecified.getter(v0);
  unint64_t v18 = &_swiftEmptyArrayStorage;
  uint64_t v13 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v14 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v15 = sub_10001A008(&qword_100076D58, (uint64_t *)&unk_100078740, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v1, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v4, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v20);
}

void sub_1000327B4()
{
  id v0 = sub_1000319AC();
  if (v0)
  {
    uint64_t v1 = v0;
    id v2 = String._bridgeToObjectiveC()();
    [v1 requestTokenForTopic:v2 identifier:0];
  }

uint64_t type metadata accessor for APSTokenProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC20FMIPClientXPCService16APSTokenProvider);
}

uint64_t sub_100032884(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1000381C4(a2);
  swift_endAccess(v5);
  return swift_release(v3);
}

uint64_t sub_1000328E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v6;
  swift_endAccess(v5);
  swift_release(v3);
  return sub_100031F38();
}

uint64_t sub_100032964()
{
  return sub_1000315BC();
}

uint64_t sub_100032A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)(a1 + OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider_topicAPSToken);
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider_topicAPSToken + 8);
  void *v3 = a2;
  v3[1] = a3;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v4);
  return sub_100031F38();
}

uint64_t sub_100032B70()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_WORD *)(v1 + swift_weakDestroy(v0 + 16) = 0;
  uint64_t v12 = sub_1000079C8(0LL, (unint64_t *)&qword_100078760, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v17 = v12;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  static DispatchQoS.unspecified.getter(v12);
  unint64_t v18 = &_swiftEmptyArrayStorage;
  uint64_t v13 = sub_1000078F8( (unint64_t *)&qword_100076B38,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v14 = sub_100005394((uint64_t *)&unk_100078770);
  uint64_t v15 = sub_10001A008( (unint64_t *)&qword_100076B40,  (uint64_t *)&unk_100078770,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v6, v13);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v2);
  *(void *)(v1 + 56) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001BLL,  0x8000000100055C20LL,  v11,  v8,  v5,  0LL);
  _s20FMIPClientXPCService6FutureC4uuid33_40B9CAF5474C2AE132CCEC7BECE26906LL10Foundation4UUIDVvpfi_0();
  return v1;
}

uint64_t sub_100032D6C(uint64_t a1)
{
  return sub_100038D7C(a1, *(char **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100032D74()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_WORD *)(v1 + swift_weakDestroy(v0 + 16) = 0;
  *(void *)(v1 + 24) = 1LL;
  uint64_t v12 = sub_1000079C8(0LL, (unint64_t *)&qword_100078760, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v17 = v12;
  *(void *)(v1 + 40) = 0LL;
  *(void *)(v1 + 48) = 0LL;
  *(void *)(v1 + 3sub_100007A28(v0 + 2) = 0LL;
  static DispatchQoS.unspecified.getter(v12);
  unint64_t v18 = &_swiftEmptyArrayStorage;
  uint64_t v13 = sub_1000078F8( (unint64_t *)&qword_100076B38,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v14 = sub_100005394((uint64_t *)&unk_100078770);
  uint64_t v15 = sub_10001A008( (unint64_t *)&qword_100076B40,  (uint64_t *)&unk_100078770,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v6, v13);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v2);
  *(void *)(v1 + 56) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001BLL,  0x8000000100055C20LL,  v11,  v8,  v5,  0LL);
  _s20FMIPClientXPCService6FutureC4uuid33_40B9CAF5474C2AE132CCEC7BECE26906LL10Foundation4UUIDVvpfi_0();
  return v1;
}

uint64_t sub_100032F70()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_WORD *)(v1 + swift_weakDestroy(v0 + 16) = 0;
  uint64_t v12 = sub_1000079C8(0LL, (unint64_t *)&qword_100078760, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v17 = v12;
  *(void *)(v1 + 3sub_100007A28(v0 + 2) = 0LL;
  *(void *)(v1 + 40) = 0LL;
  *(void *)(v1 + 24) = 0LL;
  static DispatchQoS.unspecified.getter(v12);
  unint64_t v18 = &_swiftEmptyArrayStorage;
  uint64_t v13 = sub_1000078F8( (unint64_t *)&qword_100076B38,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v14 = sub_100005394((uint64_t *)&unk_100078770);
  uint64_t v15 = sub_10001A008( (unint64_t *)&qword_100076B40,  (uint64_t *)&unk_100078770,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v6, v13);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v2);
  *(void *)(v1 + 48) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001BLL,  0x8000000100055C20LL,  v11,  v8,  v5,  0LL);
  _s20FMIPClientXPCService6FutureC4uuid33_40B9CAF5474C2AE132CCEC7BECE26906LL10Foundation4UUIDVvpfi_0();
  return v1;
}

_WORD *sub_100033164()
{
  return sub_10003317C(type metadata accessor for ClientConfiguration);
}

_WORD *sub_100033170()
{
  return sub_10003317C(type metadata accessor for VoiceAssistantSyncInfo);
}

_WORD *sub_10003317C(uint64_t (*a1)(void))
{
  uint64_t v3 = v1;
  uint64_t v23 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v4 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v3[8] = 0;
  uint64_t v13 = (char *)v3 + *(void *)(*(void *)v3 + 104LL);
  uint64_t v14 = a1(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  *(void *)((char *)v3 + *(void *)(*(void *)v3 + 112LL)) = 0LL;
  *(void *)((char *)v3 + *(void *)(*(void *)v3 + 120LL)) = 0LL;
  uint64_t v22 = *(void *)(*(void *)v3 + 128LL);
  uint64_t v15 = sub_1000079C8(0LL, (unint64_t *)&qword_100078760, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v15);
  int64_t v24 = &_swiftEmptyArrayStorage;
  uint64_t v16 = sub_1000078F8( (unint64_t *)&qword_100076B38,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v17 = sub_100005394((uint64_t *)&unk_100078770);
  uint64_t v18 = sub_10001A008( (unint64_t *)&qword_100076B40,  (uint64_t *)&unk_100078770,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v17, v18, v7, v16);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v23);
  uint64_t v19 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001BLL,  0x8000000100055C20LL,  v12,  v9,  v6,  0LL);
  *(void *)((char *)v3 + v2sub_100007A28(v0 + 2) = v19;
  _s20FMIPClientXPCService6FutureC4uuid33_40B9CAF5474C2AE132CCEC7BECE26906LL10Foundation4UUIDVvpfi_0();
  return v3;
}

_WORD *sub_1000333C4()
{
  return sub_10003317C(type metadata accessor for CacheInvalidationMarker);
}

uint64_t sub_1000333D0()
{
  uint64_t v1 = v0;
  __int128 v23 = xmmword_10005D640;
  uint64_t v21 = 0LL;
  uint64_t v22 = 0LL;
  uint64_t v2 = *(dispatch_queue_s **)(v0 + 56);
  uint64_t v3 = (void *)swift_allocObject(&unk_10006DD58, 48LL, 7LL);
  v3[2] = &v23;
  v3[3] = v1;
  v3[4] = &v22;
  v3[5] = &v21;
  uint64_t v4 = swift_allocObject(&unk_10006DD80, 32LL, 7LL);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = sub_100039750;
  *(void *)(v4 + 24) = v3;
  uint64_t v19 = sub_100010FA0;
  uint64_t v20 = v4;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  uint64_t v17 = sub_10003CE54;
  uint64_t v18 = &unk_10006DD98;
  uint64_t v5 = _Block_copy(&aBlock);
  uint64_t v6 = v20;
  swift_retain(v1);
  swift_retain(v4);
  swift_release(v6);
  dispatch_sync(v2, v5);
  _Block_release(v5);
  LOBYTE(vsub_100007A28(v0 + 2) = swift_isEscapingClosureAtFileLocation(v4, "", 90LL, 203LL, 26LL, 1LL);
  uint64_t result = swift_release(v4);
  if ((v2 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = v21;
    if (v21)
    {
      uint64_t v9 = *(void *)(v21 + 16);
      if (v9)
      {
        swift_bridgeObjectRetain(v21);
        uint64_t v10 = (uint64_t *)(v8 + 40);
        do
        {
          uint64_t v12 = (void (*)(__int128 *, uint64_t *))*(v10 - 1);
          uint64_t v11 = *v10;
          __int128 v13 = v23;
          __int128 aBlock = v23;
          uint64_t v14 = v22;
          uint64_t v15 = v22;
          swift_retain(v11);
          sub_1000241B0(v13, *((uint64_t *)&v13 + 1));
          swift_errorRetain(v14);
          v12(&aBlock, &v15);
          swift_release(v11);
          swift_errorRelease(v14);
          sub_10002C78C(v13, *((uint64_t *)&v13 + 1));
          v10 += 2;
          --v9;
        }

        while (v9);
        swift_bridgeObjectRelease(v8);
        uint64_t v8 = v21;
      }
    }

    swift_bridgeObjectRelease(v8);
    swift_errorRelease(v22);
    sub_10002C78C(v23, *((uint64_t *)&v23 + 1));
    return swift_release(v3);
  }

  return result;
}

uint64_t sub_1000335CC()
{
  uint64_t v1 = v0;
  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v19 = 0LL;
  uint64_t v2 = *(dispatch_queue_s **)(v0 + 48);
  uint64_t v3 = (void *)swift_allocObject(&unk_10006DE98, 48LL, 7LL);
  v3[2] = &v21;
  v3[3] = v1;
  v3[4] = &v20;
  v3[5] = &v19;
  uint64_t v4 = swift_allocObject(&unk_10006DEC0, 32LL, 7LL);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = sub_100039888;
  *(void *)(v4 + 24) = v3;
  aBlock[4] = sub_100010FA0;
  uint64_t v18 = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10003CE54;
  void aBlock[3] = &unk_10006DED8;
  uint64_t v5 = _Block_copy(aBlock);
  uint64_t v6 = v18;
  swift_retain(v1);
  swift_retain(v4);
  swift_release(v6);
  dispatch_sync(v2, v5);
  _Block_release(v5);
  LOBYTE(vsub_100007A28(v0 + 2) = swift_isEscapingClosureAtFileLocation(v4, "", 90LL, 203LL, 26LL, 1LL);
  uint64_t result = swift_release(v4);
  if ((v2 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = v19;
    if (v19)
    {
      uint64_t v9 = *(void *)(v19 + 16);
      if (v9)
      {
        swift_bridgeObjectRetain(v19);
        uint64_t v10 = (uint64_t *)(v8 + 40);
        do
        {
          uint64_t v12 = (void (*)(void *, uint64_t *))*(v10 - 1);
          uint64_t v11 = *v10;
          uint64_t v14 = v20;
          uint64_t v13 = v21;
          uint64_t v16 = v20;
          aBlock[0] = v21;
          swift_retain(v11);
          swift_bridgeObjectRetain(v13);
          swift_errorRetain(v14);
          v12(aBlock, &v16);
          swift_release(v11);
          swift_errorRelease(v14);
          swift_bridgeObjectRelease(v13);
          v10 += 2;
          --v9;
        }

        while (v9);
        swift_bridgeObjectRelease(v8);
        uint64_t v8 = v19;
      }
    }

    swift_bridgeObjectRelease(v8);
    swift_errorRelease(v20);
    uint64_t v15 = v21;
    swift_release(v3);
    return swift_bridgeObjectRelease(v15);
  }

  return result;
}

uint64_t sub_1000337AC()
{
  uint64_t v1 = sub_100005394(&qword_1000787D0);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)aBlock - v5;
  uint64_t v7 = type metadata accessor for ClientConfiguration(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v23 = 0LL;
  uint64_t v24 = 0LL;
  uint64_t v8 = *(dispatch_queue_s **)(v0 + *(void *)(*(void *)v0 + 128LL));
  uint64_t v9 = (void *)swift_allocObject(&unk_10006DE20, 48LL, 7LL);
  v9[2] = v6;
  void v9[3] = v0;
  v9[4] = &v24;
  void v9[5] = &v23;
  uint64_t v10 = swift_allocObject(&unk_10006DE48, 32LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = sub_100039810;
  *(void *)(v10 + 24) = v9;
  aBlock[4] = sub_100010FA0;
  uint64_t v22 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10003CE54;
  void aBlock[3] = &unk_10006DE60;
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = v22;
  swift_retain(v0);
  swift_retain(v10);
  swift_release(v12);
  dispatch_sync(v8, v11);
  _Block_release(v11);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 90LL, 203LL, 26LL, 1LL);
  uint64_t result = swift_release(v10);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v15 = v23;
    if (v23)
    {
      uint64_t v16 = *(void *)(v23 + 16);
      if (v16)
      {
        swift_bridgeObjectRetain(v23);
        uint64_t v17 = (uint64_t *)(v15 + 40);
        do
        {
          uint64_t v19 = (void (*)(char *, void *))*(v17 - 1);
          uint64_t v18 = *v17;
          sub_10000D1A4((uint64_t)v6, (uint64_t)v4, &qword_1000787D0);
          uint64_t v20 = v24;
          aBlock[0] = v24;
          swift_retain(v18);
          swift_errorRetain(v20);
          v19(v4, aBlock);
          swift_release(v18);
          swift_errorRelease(v20);
          sub_10000D20C((uint64_t)v4, &qword_1000787D0);
          v17 += 2;
          --v16;
        }

        while (v16);
        swift_bridgeObjectRelease(v15);
        uint64_t v15 = v23;
      }
    }

    swift_bridgeObjectRelease(v15);
    swift_errorRelease(v24);
    sub_10000D20C((uint64_t)v6, &qword_1000787D0);
    return swift_release(v9);
  }

  return result;
}

uint64_t sub_100033A20()
{
  uint64_t v1 = sub_100005394(&qword_100077C20);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)aBlock - v5;
  uint64_t v7 = type metadata accessor for VoiceAssistantSyncInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v23 = 0LL;
  uint64_t v24 = 0LL;
  uint64_t v8 = *(dispatch_queue_s **)(v0 + *(void *)(*(void *)v0 + 128LL));
  uint64_t v9 = (void *)swift_allocObject(&unk_10006DCE0, 48LL, 7LL);
  v9[2] = v6;
  void v9[3] = v0;
  v9[4] = &v24;
  void v9[5] = &v23;
  uint64_t v10 = swift_allocObject(&unk_10006DD08, 32LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = sub_10003971C;
  *(void *)(v10 + 24) = v9;
  aBlock[4] = sub_100010FA0;
  uint64_t v22 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10003CE54;
  void aBlock[3] = &unk_10006DD20;
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = v22;
  swift_retain(v0);
  swift_retain(v10);
  swift_release(v12);
  dispatch_sync(v8, v11);
  _Block_release(v11);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 90LL, 203LL, 26LL, 1LL);
  uint64_t result = swift_release(v10);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v15 = v23;
    if (v23)
    {
      uint64_t v16 = *(void *)(v23 + 16);
      if (v16)
      {
        swift_bridgeObjectRetain(v23);
        uint64_t v17 = (uint64_t *)(v15 + 40);
        do
        {
          uint64_t v19 = (void (*)(char *, void *))*(v17 - 1);
          uint64_t v18 = *v17;
          sub_10000D1A4((uint64_t)v6, (uint64_t)v4, &qword_100077C20);
          uint64_t v20 = v24;
          aBlock[0] = v24;
          swift_retain(v18);
          swift_errorRetain(v20);
          v19(v4, aBlock);
          swift_release(v18);
          swift_errorRelease(v20);
          sub_10000D20C((uint64_t)v4, &qword_100077C20);
          v17 += 2;
          --v16;
        }

        while (v16);
        swift_bridgeObjectRelease(v15);
        uint64_t v15 = v23;
      }
    }

    swift_bridgeObjectRelease(v15);
    swift_errorRelease(v24);
    sub_10000D20C((uint64_t)v6, &qword_100077C20);
    return swift_release(v9);
  }

  return result;
}

uint64_t sub_100033C94()
{
  uint64_t v1 = sub_100005394((uint64_t *)&unk_1000787B0);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)aBlock - v5;
  uint64_t v7 = type metadata accessor for CacheInvalidationMarker(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v23 = 0LL;
  uint64_t v24 = 0LL;
  uint64_t v8 = *(dispatch_queue_s **)(v0 + *(void *)(*(void *)v0 + 128LL));
  uint64_t v9 = (void *)swift_allocObject(&unk_10006DC40, 48LL, 7LL);
  v9[2] = v6;
  void v9[3] = v0;
  v9[4] = &v24;
  void v9[5] = &v23;
  uint64_t v10 = swift_allocObject(&unk_10006DC68, 32LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = sub_1000396E8;
  *(void *)(v10 + 24) = v9;
  aBlock[4] = sub_100010FA0;
  uint64_t v22 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10003CE54;
  void aBlock[3] = &unk_10006DC80;
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = v22;
  swift_retain(v0);
  swift_retain(v10);
  swift_release(v12);
  dispatch_sync(v8, v11);
  _Block_release(v11);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 90LL, 203LL, 26LL, 1LL);
  uint64_t result = swift_release(v10);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v15 = v23;
    if (v23)
    {
      uint64_t v16 = *(void *)(v23 + 16);
      if (v16)
      {
        swift_bridgeObjectRetain(v23);
        uint64_t v17 = (uint64_t *)(v15 + 40);
        do
        {
          uint64_t v19 = (void (*)(char *, void *))*(v17 - 1);
          uint64_t v18 = *v17;
          sub_10000D1A4((uint64_t)v6, (uint64_t)v4, (uint64_t *)&unk_1000787B0);
          uint64_t v20 = v24;
          aBlock[0] = v24;
          swift_retain(v18);
          swift_errorRetain(v20);
          v19(v4, aBlock);
          swift_release(v18);
          swift_errorRelease(v20);
          sub_10000D20C((uint64_t)v4, (uint64_t *)&unk_1000787B0);
          v17 += 2;
          --v16;
        }

        while (v16);
        swift_bridgeObjectRelease(v15);
        uint64_t v15 = v23;
      }
    }

    swift_bridgeObjectRelease(v15);
    swift_errorRelease(v24);
    sub_10000D20C((uint64_t)v6, (uint64_t *)&unk_1000787B0);
    return swift_release(v9);
  }

  return result;
}

uint64_t sub_100033F08()
{
  uint64_t v1 = v0;
  unint64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v24 = 0LL;
  uint64_t v2 = *(dispatch_queue_s **)(v0 + 56);
  uint64_t v3 = (void *)swift_allocObject(&unk_10006DBA0, 48LL, 7LL);
  v3[2] = &v25;
  v3[3] = v1;
  v3[4] = &v24;
  v3[5] = &v23;
  uint64_t v4 = swift_allocObject(&unk_10006DBC8, 32LL, 7LL);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = sub_1000396AC;
  *(void *)(v4 + 24) = v3;
  uint64_t v21 = sub_100010FA0;
  uint64_t v22 = v4;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v18 = 1107296256LL;
  uint64_t v19 = sub_10003CE54;
  uint64_t v20 = &unk_10006DBE0;
  uint64_t v5 = _Block_copy(&aBlock);
  uint64_t v6 = v22;
  swift_retain(v1);
  swift_retain(v4);
  swift_release(v6);
  dispatch_sync(v2, v5);
  _Block_release(v5);
  LOBYTE(vsub_100007A28(v0 + 2) = swift_isEscapingClosureAtFileLocation(v4, "", 90LL, 203LL, 26LL, 1LL);
  uint64_t result = swift_release(v4);
  if ((v2 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = v23;
    if (v23)
    {
      uint64_t v9 = *(void *)(v23 + 16);
      if (v9)
      {
        swift_bridgeObjectRetain(v23);
        uint64_t v10 = (uint64_t *)(v8 + 40);
        do
        {
          uint64_t v12 = (void (*)(void ***, uint64_t *))*(v10 - 1);
          uint64_t v11 = *v10;
          uint64_t v13 = v26;
          __int128 aBlock = v25;
          uint64_t v18 = v26;
          uint64_t v14 = v24;
          uint64_t v16 = v24;
          swift_retain(v11);
          swift_bridgeObjectRetain(v13);
          swift_errorRetain(v14);
          v12(&aBlock, &v16);
          swift_release(v11);
          swift_errorRelease(v14);
          swift_bridgeObjectRelease(v13);
          v10 += 2;
          --v9;
        }

        while (v9);
        swift_bridgeObjectRelease(v8);
        uint64_t v8 = v23;
      }
    }

    swift_bridgeObjectRelease(v8);
    swift_errorRelease(v24);
    uint64_t v15 = v26;
    swift_release(v3);
    return swift_bridgeObjectRelease(v15);
  }

  return result;
}

uint64_t sub_1000340F0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0)
  {
    uint64_t v9 = result;
    swift_beginAccess(result + 24, v13, 1LL, 0LL);
    uint64_t v10 = *(void *)(v9 + 24);
    uint64_t v11 = *(void *)(v9 + 32);
    *(void *)(v9 + 24) = a2;
    *(void *)(v9 + 3sub_100007A28(v0 + 2) = a3;
    sub_1000241B0(a2, a3);
    sub_10002C78C(v10, v11);
    uint64_t v12 = *(void *)(v9 + 40);
    *(void *)(v9 + 40) = a4;
    swift_errorRetain(a4);
    uint64_t result = swift_errorRelease(v12);
    *(_BYTE *)(v9 + swift_weakDestroy(v0 + 16) = 1;
    *a5 = 1;
  }

  return result;
}

uint64_t sub_10003419C(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0)
  {
    uint64_t v7 = result;
    swift_beginAccess(result + 24, v10, 1LL, 0LL);
    uint64_t v8 = *(void *)(v7 + 24);
    *(void *)(v7 + 24) = a2;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRelease(v8);
    uint64_t v9 = *(void *)(v7 + 32);
    *(void *)(v7 + 3sub_100007A28(v0 + 2) = a3;
    swift_errorRetain(a3);
    uint64_t result = swift_errorRelease(v9);
    *(_BYTE *)(v7 + swift_weakDestroy(v0 + 16) = 1;
    *a4 = 1;
  }

  return result;
}

_BYTE *sub_100034234(_BYTE *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  return sub_10003424C(a1, a2, a3, a4, &qword_1000787D0);
}

_BYTE *sub_100034240(_BYTE *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  return sub_10003424C(a1, a2, a3, a4, &qword_100077C20);
}

_BYTE *sub_10003424C(_BYTE *result, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t *a5)
{
  if ((result[16] & 1) == 0)
  {
    uint64_t v9 = result;
    uint64_t v10 = (uint64_t)&result[*(void *)(*(void *)result + 104LL)];
    swift_beginAccess(v10, v13, 33LL, 0LL);
    sub_100039844(a2, v10, a5);
    swift_endAccess(v13);
    uint64_t v11 = *(void *)(*(void *)v9 + 112LL);
    uint64_t v12 = *(void *)&v9[v11];
    *(void *)&v9[v11] = a3;
    swift_errorRetain(a3);
    uint64_t result = (_BYTE *)swift_errorRelease(v12);
    v9[16] = 1;
    *a4 = 1;
  }

  return result;
}

_BYTE *sub_1000342FC(_BYTE *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  return sub_10003424C(a1, a2, a3, a4, (uint64_t *)&unk_1000787B0);
}

uint64_t sub_100034308(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0)
  {
    uint64_t v9 = result;
    swift_beginAccess(result + 24, v12, 1LL, 0LL);
    uint64_t v10 = *(void *)(v9 + 32);
    *(void *)(v9 + 24) = a2;
    *(void *)(v9 + 3sub_100007A28(v0 + 2) = a3;
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRelease(v10);
    uint64_t v11 = *(void *)(v9 + 40);
    *(void *)(v9 + 40) = a4;
    swift_errorRetain(a4);
    uint64_t result = swift_errorRelease(v11);
    *(_BYTE *)(v9 + swift_weakDestroy(v0 + 16) = 1;
    *a5 = 1;
  }

  return result;
}

uint64_t sub_1000343AC(void *a1, uint64_t a2, uint64_t *a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v13 = a1[1];
  *a1 = *(void *)(a2 + 24);
  a1[1] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 40);
  uint64_t v15 = *a3;
  *a3 = v14;
  swift_errorRetain(v14);
  uint64_t result = swift_errorRelease(v15);
  char v17 = *(_BYTE *)(a2 + 16);
  *a4 = v17;
  if ((v17 & 1) == 0)
  {
    uint64_t v18 = (uint64_t *)(a2 + 48);
    swift_beginAccess(a2 + 48, &v24, 1LL, 0LL);
    if (!*(void *)(a2 + 48))
    {
      *uint64_t v18 = (uint64_t)&_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease(0LL);
    }

    uint64_t result = swift_allocObject(&unk_10006D9C0, 32LL, 7LL);
    *(void *)(result + swift_weakDestroy(v0 + 16) = a5;
    *(void *)(result + 24) = a6;
    uint64_t v19 = (void *)*v18;
    if (*v18)
    {
      uint64_t v20 = result;
      swift_retain(a6);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v19);
      *uint64_t v18 = (uint64_t)v19;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10002F938(0LL, v19[2] + 1LL, 1, v19);
        uint64_t v19 = (void *)result;
        *uint64_t v18 = result;
      }

      unint64_t v22 = v19[2];
      unint64_t v21 = v19[3];
      if (v22 >= v21 >> 1)
      {
        uint64_t result = (uint64_t)sub_10002F938((void *)(v21 > 1), v22 + 1, 1, v19);
        uint64_t v19 = (void *)result;
        *uint64_t v18 = result;
      }

      v19[2] = v22 + 1;
      uint64_t v23 = &v19[2 * v22];
      v23[4] = sub_100038F84;
      v23[5] = v20;
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_10003452C()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100034558()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100034568(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100007A28(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100034578(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100034584()
{
  return sub_1000328E4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10003458C(uint64_t *a1, uint64_t a2, uint64_t *a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(a2 + 32);
  uint64_t v14 = *a1;
  uint64_t v15 = a1[1];
  *a1 = v12;
  a1[1] = v13;
  sub_1000241B0(v12, v13);
  sub_10002C78C(v14, v15);
  uint64_t v16 = *(void *)(a2 + 40);
  uint64_t v17 = *a3;
  *a3 = v16;
  swift_errorRetain(v16);
  uint64_t result = swift_errorRelease(v17);
  char v19 = *(_BYTE *)(a2 + 16);
  *a4 = v19;
  if ((v19 & 1) == 0)
  {
    uint64_t v20 = (uint64_t *)(a2 + 48);
    swift_beginAccess(a2 + 48, &v26, 1LL, 0LL);
    if (!*(void *)(a2 + 48))
    {
      *uint64_t v20 = (uint64_t)&_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease(0LL);
    }

    uint64_t result = swift_allocObject(&unk_10006DDD0, 32LL, 7LL);
    *(void *)(result + swift_weakDestroy(v0 + 16) = a5;
    *(void *)(result + 24) = a6;
    unint64_t v21 = (void *)*v20;
    if (*v20)
    {
      uint64_t v22 = result;
      swift_retain(a6);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v21);
      *uint64_t v20 = (uint64_t)v21;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10002F944(0LL, v21[2] + 1LL, 1, v21);
        unint64_t v21 = (void *)result;
        *uint64_t v20 = result;
      }

      unint64_t v24 = v21[2];
      unint64_t v23 = v21[3];
      if (v24 >= v23 >> 1)
      {
        uint64_t result = (uint64_t)sub_10002F944((void *)(v23 > 1), v24 + 1, 1, v21);
        unint64_t v21 = (void *)result;
        *uint64_t v20 = result;
      }

      void v21[2] = v24 + 1;
      unint64_t v25 = &v21[2 * v24];
      v25[4] = sub_100038F84;
      v25[5] = v22;
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_100034710(uint64_t *a1, uint64_t a2, uint64_t *a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = *a1;
  *a1 = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 32);
  uint64_t v15 = *a3;
  *a3 = v14;
  swift_errorRetain(v14);
  uint64_t result = swift_errorRelease(v15);
  char v17 = *(_BYTE *)(a2 + 16);
  *a4 = v17;
  if ((v17 & 1) == 0)
  {
    uint64_t v18 = (uint64_t *)(a2 + 40);
    swift_beginAccess(a2 + 40, &v24, 1LL, 0LL);
    if (!*(void *)(a2 + 40))
    {
      *uint64_t v18 = (uint64_t)&_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease(0LL);
    }

    uint64_t result = swift_allocObject(&unk_10006DF10, 32LL, 7LL);
    *(void *)(result + swift_weakDestroy(v0 + 16) = a5;
    *(void *)(result + 24) = a6;
    char v19 = (void *)*v18;
    if (*v18)
    {
      uint64_t v20 = result;
      swift_retain(a6);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v19);
      *uint64_t v18 = (uint64_t)v19;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10002F950(0LL, v19[2] + 1LL, 1, v19);
        char v19 = (void *)result;
        *uint64_t v18 = result;
      }

      unint64_t v22 = v19[2];
      unint64_t v21 = v19[3];
      if (v22 >= v21 >> 1)
      {
        uint64_t result = (uint64_t)sub_10002F950((void *)(v21 > 1), v22 + 1, 1, v19);
        char v19 = (void *)result;
        *uint64_t v18 = result;
      }

      v19[2] = v22 + 1;
      unint64_t v23 = &v19[2 * v22];
      v23[4] = sub_1000398A4;
      v23[5] = v20;
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_100034890(uint64_t a1, _BYTE *a2, uint64_t *a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  return sub_100034910( a1,  a2,  a3,  a4,  a5,  a6,  &qword_1000787D0,  (uint64_t)&unk_10006DDF8,  (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_10002F95C,  (uint64_t)sub_1000397C8);
}

uint64_t sub_1000348D0(uint64_t a1, _BYTE *a2, uint64_t *a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  return sub_100034910( a1,  a2,  a3,  a4,  a5,  a6,  &qword_100077C20,  (uint64_t)&unk_10006DCB8,  (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_10002F968,  (uint64_t)sub_100039950);
}

uint64_t sub_100034910( uint64_t a1, _BYTE *a2, uint64_t *a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t (*a9)(BOOL, uint64_t, uint64_t, uint64_t), uint64_t a10)
{
  uint64_t v18 = sub_100005394(a7);
  __chkstk_darwin(v18);
  uint64_t v20 = &v32[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v21 = (uint64_t)&a2[*(void *)(*(void *)a2 + 104LL)];
  swift_beginAccess(v21, v33, 0LL, 0LL);
  sub_10000D1A4(v21, (uint64_t)v20, a7);
  sub_100019C98((uint64_t)v20, a1, a7);
  uint64_t v22 = *(void *)&a2[*(void *)(*(void *)a2 + 112LL)];
  uint64_t v23 = *a3;
  *a3 = v22;
  swift_errorRetain(v22);
  uint64_t result = swift_errorRelease(v23);
  char v25 = a2[16];
  *a4 = v25;
  if ((v25 & 1) == 0)
  {
    uint64_t v26 = (uint64_t *)&a2[*(void *)(*(void *)a2 + 120LL)];
    swift_beginAccess(v26, v32, 1LL, 0LL);
    if (!*v26)
    {
      *uint64_t v26 = (uint64_t)&_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease(0LL);
    }

    uint64_t result = swift_allocObject(a8, 32LL, 7LL);
    *(void *)(result + swift_weakDestroy(v0 + 16) = a5;
    *(void *)(result + 24) = a6;
    uint64_t v27 = *v26;
    if (*v26)
    {
      uint64_t v28 = result;
      swift_retain(a6);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v27);
      *uint64_t v26 = v27;
      if ((result & 1) == 0)
      {
        uint64_t result = a9(0, *(void *)(v27 + 16) + 1LL, 1LL, v27);
        uint64_t v27 = result;
        *uint64_t v26 = result;
      }

      unint64_t v30 = *(void *)(v27 + 16);
      unint64_t v29 = *(void *)(v27 + 24);
      if (v30 >= v29 >> 1)
      {
        uint64_t result = a9(v29 > 1, v30 + 1, 1LL, v27);
        uint64_t v27 = result;
        *uint64_t v26 = result;
      }

      *(void *)(v27 + swift_weakDestroy(v0 + 16) = v30 + 1;
      unint64_t v31 = v27 + 16 * v30;
      *(void *)(v31 + 3sub_100007A28(v0 + 2) = a10;
      *(void *)(v31 + 40) = v28;
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_100034AF4(uint64_t a1, _BYTE *a2, uint64_t *a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  return sub_100034910( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t *)&unk_1000787B0,  (uint64_t)&unk_10006DC18,  (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_10002F974,  (uint64_t)sub_100039950);
}

uint64_t sub_100034B34(uint64_t *a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  *a1 = v8;
  a1[1] = v9;
  sub_1000241B0(v8, v9);
  sub_10002C78C(v10, v11);
  uint64_t v12 = a2[5];
  uint64_t v13 = *a3;
  *a3 = v12;
  swift_errorRetain(v12);
  swift_errorRelease(v13);
  swift_beginAccess(a2 + 6, &v18, 1LL, 0LL);
  uint64_t v14 = a2[6];
  uint64_t v15 = *a4;
  *a4 = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = a2[6];
  a2[6] = 0LL;
  return swift_bridgeObjectRelease(v16);
}

uint64_t sub_100034BF4(uint64_t *a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = a2[3];
  uint64_t v9 = *a1;
  *a1 = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[4];
  uint64_t v11 = *a3;
  *a3 = v10;
  swift_errorRetain(v10);
  swift_errorRelease(v11);
  swift_beginAccess(a2 + 5, &v16, 1LL, 0LL);
  uint64_t v12 = a2[5];
  uint64_t v13 = *a4;
  *a4 = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a2[5];
  a2[5] = 0LL;
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_100034CB0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = sub_100005394(a5);
  __chkstk_darwin(v10);
  uint64_t v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = a2 + *(void *)(*(void *)a2 + 104LL);
  swift_beginAccess(v13, v22, 0LL, 0LL);
  sub_10000D1A4(v13, (uint64_t)v12, a5);
  sub_100019C98((uint64_t)v12, a1, a5);
  uint64_t v14 = *(void *)(a2 + *(void *)(*(void *)a2 + 112LL));
  uint64_t v15 = *a3;
  *a3 = v14;
  swift_errorRetain(v14);
  swift_errorRelease(v15);
  uint64_t v16 = (uint64_t *)(a2 + *(void *)(*(void *)a2 + 120LL));
  swift_beginAccess(v16, v21, 1LL, 0LL);
  uint64_t v17 = *v16;
  uint64_t v18 = *a4;
  *a4 = *v16;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = *v16;
  *uint64_t v16 = 0LL;
  return swift_bridgeObjectRelease(v19);
}

uint64_t sub_100034DD4(void *a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[1];
  *a1 = a2[3];
  a1[1] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[5];
  uint64_t v11 = *a3;
  *a3 = v10;
  swift_errorRetain(v10);
  swift_errorRelease(v11);
  swift_beginAccess(a2 + 6, &v16, 1LL, 0LL);
  uint64_t v12 = a2[6];
  uint64_t v13 = *a4;
  *a4 = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a2[6];
  a2[6] = 0LL;
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_100034E90(Swift::Int *a1, void *a2)
{
  return sub_100035170( a1,  a2,  (uint64_t (*)(void))&type metadata accessor for DiscoveredDevice,  &qword_1000787D8);
}

uint64_t sub_100034EA4(uint64_t *a1, uint64_t a2)
{
  return sub_100035438( a1,  a2,  &OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_uuid,  &qword_1000787C8,  type metadata accessor for NearbyDeviceFinder);
}

uint64_t sub_100034EC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v2);
    uint64_t v8 = swift_retain(a2);
    uint64_t v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release(a2);
    if (v9)
    {
      swift_bridgeObjectRelease(v6);
      swift_release(a2);
      uint64_t v28 = v9;
      swift_unknownObjectRetain(v9);
      uint64_t v10 = sub_100005394((uint64_t *)&unk_100078730);
      swift_dynamicCast(v27, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
      *a1 = v27[0];
      swift_unknownObjectRelease(v9);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v23 = sub_10003576C(v7, result + 1);
    v27[0] = v23;
    unint64_t v24 = *(void *)(v23 + 16);
    if (*(void *)(v23 + 24) <= v24)
    {
      uint64_t v26 = v24 + 1;
      swift_retain(a2);
      sub_100036120(v26);
      uint64_t v25 = v27[0];
    }

    else
    {
      uint64_t v25 = v23;
      swift_retain(a2);
    }

    sub_1000369F4(a2, v25);
    uint64_t v22 = *v3;
    uint64_t *v3 = v25;
  }

  else
  {
    Hasher.init(_seed:)(v27, *(void *)(v6 + 40));
    uint64_t v12 = type metadata accessor for UUID(0LL);
    uint64_t v13 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    swift_bridgeObjectRetain(v6);
    dispatch thunk of Hashable.hash(into:)(v27, v12, v13);
    Swift::Int v14 = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v16 = v14 & ~v15;
    if (((*(void *)(v6 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
    {
      uint64_t v17 = *(void *)(v6 + 48);
      if (*(void *)(v17 + 8 * v16) == a2)
      {
LABEL_12:
        swift_release(a2);
        swift_bridgeObjectRelease(v6);
        uint64_t v19 = *(void *)(*(void *)(*v2 + 48) + 8 * v16);
        *a1 = v19;
        swift_retain(v19);
        return 0LL;
      }

      uint64_t v18 = ~v15;
      while (1)
      {
        unint64_t v16 = (v16 + 1) & v18;
        if (((*(void *)(v6 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0) {
          break;
        }
        if (*(void *)(v17 + 8 * v16) == a2) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease(v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v27[0] = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    uint64_t v21 = swift_retain(a2);
    sub_100036C30(v21, v16, isUniquelyReferenced_nonNull_native);
    uint64_t v22 = *v2;
    *uint64_t v2 = v27[0];
  }

  swift_bridgeObjectRelease(v22);
  *a1 = a2;
  return 1LL;
}

uint64_t sub_10003515C(Swift::Int *a1, void *a2)
{
  return sub_100035170( a1,  a2,  (uint64_t (*)(void))&type metadata accessor for VoiceAssistantDeviceName,  &qword_1000787C0);
}

uint64_t sub_100035170(Swift::Int *a1, void *a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v7 = v4;
  uint64_t v10 = *v4;
  if ((*v4 & 0xC000000000000001LL) != 0)
  {
    if (v10 < 0) {
      uint64_t v11 = *v4;
    }
    else {
      uint64_t v11 = v10 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v4);
    id v12 = a2;
    uint64_t v13 = __CocoaSet.member(for:)();

    if (v13)
    {
      swift_bridgeObjectRelease(v10);

      uint64_t v39 = v13;
      uint64_t v14 = a3(0LL);
      swift_unknownObjectRetain(v13);
      swift_dynamicCast(&v40, &v39, (char *)&type metadata for Swift.AnyObject + 8, v14, 7LL);
      *a1 = v40;
      swift_unknownObjectRelease(v13);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v11);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v27 = sub_1000359A8(v11, result + 1, a4, a3);
    Swift::Int v40 = v27;
    unint64_t v28 = *(void *)(v27 + 16);
    if (*(void *)(v27 + 24) <= v28)
    {
      uint64_t v34 = v28 + 1;
      id v35 = v12;
      sub_100036428(v34, a4);
      uint64_t v29 = v40;
    }

    else
    {
      uint64_t v29 = v27;
      id v30 = v12;
    }

    sub_100036ACC((uint64_t)v12, v29);
    uint64_t v36 = *v7;
    *uint64_t v7 = v29;
    swift_bridgeObjectRelease(v36);
    *a1 = (Swift::Int)v12;
  }

  else
  {
    Swift::Int v16 = *(void *)(v10 + 40);
    swift_bridgeObjectRetain(v10);
    Swift::Int v17 = NSObject._rawHashValue(seed:)(v16);
    uint64_t v18 = -1LL << *(_BYTE *)(v10 + 32);
    unint64_t v19 = v17 & ~v18;
    if (((*(void *)(v10 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v19) & 1) != 0)
    {
      a3(0LL);
      id v20 = *(id *)(*(void *)(v10 + 48) + 8 * v19);
      char v21 = static NSObject.== infix(_:_:)(v20);

      if ((v21 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v10);
        uint64_t v25 = *(void **)(*(void *)(*v7 + 48) + 8 * v19);
        *a1 = (Swift::Int)v25;
        id v26 = v25;
        return 0LL;
      }

      uint64_t v22 = ~v18;
      while (1)
      {
        unint64_t v19 = (v19 + 1) & v22;
        if (((*(void *)(v10 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v19) & 1) == 0) {
          break;
        }
        id v23 = *(id *)(*(void *)(v10 + 48) + 8 * v19);
        char v24 = static NSObject.== infix(_:_:)(v23);

        if ((v24 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease(v10);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    Swift::Int v40 = *v7;
    *uint64_t v7 = 0x8000000000000000LL;
    id v32 = a2;
    sub_100036DC8((uint64_t)v32, v19, isUniquelyReferenced_nonNull_native, a4, a3);
    uint64_t v33 = *v7;
    *uint64_t v7 = v40;
    swift_bridgeObjectRelease(v33);
    *a1 = (Swift::Int)v32;
  }

  return 1LL;
}

uint64_t sub_10003541C(uint64_t *a1, uint64_t a2)
{
  return sub_100035438( a1,  a2,  &OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_uuid,  (uint64_t *)&unk_100078780,  type metadata accessor for DeviceDiscoverySession);
}

uint64_t sub_100035438(uint64_t *a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t (*a5)(void))
{
  uint64_t v9 = v5;
  uint64_t v12 = *v5;
  if ((*v5 & 0xC000000000000001LL) != 0)
  {
    if (v12 < 0) {
      uint64_t v13 = *v5;
    }
    else {
      uint64_t v13 = v12 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v5);
    uint64_t v14 = swift_retain(a2);
    uint64_t v15 = __CocoaSet.member(for:)(v14, v13);
    swift_release(a2);
    if (v15)
    {
      swift_bridgeObjectRelease(v12);
      swift_release(a2);
      uint64_t v42 = v15;
      uint64_t v16 = a5(0LL);
      swift_unknownObjectRetain(v15);
      swift_dynamicCast(v41, &v42, (char *)&type metadata for Swift.AnyObject + 8, v16, 7LL);
      *a1 = v41[0];
      swift_unknownObjectRelease(v15);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v13);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v30 = sub_100035B9C(v13, result + 1, a4, a5);
    v41[0] = v30;
    unint64_t v31 = *(void *)(v30 + 16);
    if (*(void *)(v30 + 24) <= v31)
    {
      uint64_t v36 = v31 + 1;
      swift_retain(a2);
      sub_1000366D4(v36, a4);
      uint64_t v32 = v41[0];
    }

    else
    {
      uint64_t v32 = v30;
      swift_retain(a2);
    }

    sub_100036B58(a2, v32);
    uint64_t v37 = *v9;
    uint64_t *v9 = v32;
    swift_bridgeObjectRelease(v37);
    *a1 = a2;
  }

  else
  {
    Hasher.init(_seed:)(v41, *(void *)(v12 + 40));
    uint64_t v18 = a2 + *a3;
    uint64_t v19 = type metadata accessor for UUID(0LL);
    uint64_t v20 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    swift_bridgeObjectRetain(v12);
    dispatch thunk of Hashable.hash(into:)(v41, v19, v20);
    Swift::Int v21 = Hasher._finalize()();
    uint64_t v22 = -1LL << *(_BYTE *)(v12 + 32);
    unint64_t v23 = v21 & ~v22;
    if (((*(void *)(v12 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v23) & 1) != 0)
    {
      uint64_t v24 = *(void *)(*(void *)(v12 + 48) + 8 * v23);
      uint64_t v25 = v24 + *a3;
      swift_retain(v24);
      LOBYTE(v25) = static UUID.== infix(_:_:)(v25, v18);
      swift_release(v24);
      if ((v25 & 1) != 0)
      {
LABEL_12:
        swift_release(a2);
        swift_bridgeObjectRelease(v12);
        uint64_t v29 = *(void *)(*(void *)(*v9 + 48) + 8 * v23);
        *a1 = v29;
        swift_retain(v29);
        return 0LL;
      }

      uint64_t v26 = ~v22;
      while (1)
      {
        unint64_t v23 = (v23 + 1) & v26;
        if (((*(void *)(v12 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v23) & 1) == 0) {
          break;
        }
        uint64_t v27 = *(void *)(*(void *)(v12 + 48) + 8 * v23);
        uint64_t v28 = v27 + *a3;
        swift_retain(v27);
        LOBYTE(v28) = static UUID.== infix(_:_:)(v28, v18);
        swift_release(v27);
        if ((v28 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease(v12);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
    v41[0] = *v9;
    uint64_t *v9 = 0x8000000000000000LL;
    uint64_t v34 = swift_retain(a2);
    sub_100036F4C(v34, v23, isUniquelyReferenced_nonNull_native, a4, a3, a5);
    uint64_t v35 = *v9;
    uint64_t *v9 = v41[0];
    swift_bridgeObjectRelease(v35);
    *a1 = a2;
  }

  return 1LL;
}

Swift::Int sub_10003576C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100005394(&qword_100078758);
    uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v24 = v4;
    uint64_t v5 = __CocoaSet.makeIterator()(a1);
    for (uint64_t i = __CocoaSet.Iterator.next()(); i; uint64_t i = __CocoaSet.Iterator.next()())
    {
      v22[0] = i;
      uint64_t v16 = sub_100005394((uint64_t *)&unk_100078730);
      swift_dynamicCast(&v23, v22, (char *)&type metadata for Swift.AnyObject + 8, v16, 7LL);
      uint64_t v4 = v24;
      unint64_t v17 = *(void *)(v24 + 16);
      if (*(void *)(v24 + 24) <= v17)
      {
        sub_100036120(v17 + 1);
        uint64_t v4 = v24;
      }

      uint64_t v7 = v23;
      Hasher.init(_seed:)(v22, *(void *)(v4 + 40));
      uint64_t v8 = type metadata accessor for UUID(0LL);
      uint64_t v9 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of Hashable.hash(into:)(v22, v8, v9);
      Swift::Int result = Hasher._finalize()();
      uint64_t v11 = v4 + 56;
      uint64_t v12 = -1LL << *(_BYTE *)(v4 + 32);
      unint64_t v13 = result & ~v12;
      unint64_t v14 = v13 >> 6;
      if (((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        char v18 = 0;
        unint64_t v19 = (unint64_t)(63 - v12) >> 6;
        do
        {
          if (++v14 == v19 && (v18 & 1) != 0)
          {
            __break(1u);
            return result;
          }

          BOOL v20 = v14 == v19;
          if (v14 == v19) {
            unint64_t v14 = 0LL;
          }
          v18 |= v20;
          uint64_t v21 = *(void *)(v11 + 8 * v14);
        }

        while (v21 == -1);
        unint64_t v15 = __clz(__rbit64(~v21)) + (v14 << 6);
      }

      *(void *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      *(void *)(*(void *)(v4 + 48) + 8 * v15) = v7;
      ++*(void *)(v4 + 16);
    }

    swift_release(v5);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v4;
}

Swift::Int sub_1000359A8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  if (a2)
  {
    sub_100005394(a3);
    uint64_t v8 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v27 = v8;
    uint64_t v9 = __CocoaSet.makeIterator()(a1);
    uint64_t v10 = __CocoaSet.Iterator.next()();
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = a4(0LL);
      do
      {
        uint64_t v25 = v11;
        swift_dynamicCast(&v26, &v25, (char *)&type metadata for Swift.AnyObject + 8, v12, 7LL);
        uint64_t v8 = v27;
        unint64_t v20 = *(void *)(v27 + 16);
        if (*(void *)(v27 + 24) <= v20)
        {
          sub_100036428(v20 + 1, a3);
          uint64_t v8 = v27;
        }

        uint64_t v13 = v26;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
        uint64_t v15 = v8 + 56;
        uint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
        unint64_t v17 = result & ~v16;
        unint64_t v18 = v17 >> 6;
        if (((-1LL << v17) & ~*(void *)(v8 + 56 + 8 * (v17 >> 6))) != 0)
        {
          unint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v8 + 56 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v21 = 0;
          unint64_t v22 = (unint64_t)(63 - v16) >> 6;
          do
          {
            if (++v18 == v22 && (v21 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v23 = v18 == v22;
            if (v18 == v22) {
              unint64_t v18 = 0LL;
            }
            v21 |= v23;
            uint64_t v24 = *(void *)(v15 + 8 * v18);
          }

          while (v24 == -1);
          unint64_t v19 = __clz(__rbit64(~v24)) + (v18 << 6);
        }

        *(void *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
        *(void *)(*(void *)(v8 + 48) + 8 * v19) = v13;
        ++*(void *)(v8 + 16);
        uint64_t v11 = __CocoaSet.Iterator.next()();
      }

      while (v11);
    }

    swift_release(v9);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v8;
}

Swift::Int sub_100035B9C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  if (a2)
  {
    sub_100005394(a3);
    uint64_t v8 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v30 = v8;
    uint64_t v9 = __CocoaSet.makeIterator()(a1);
    uint64_t v10 = __CocoaSet.Iterator.next()(v9);
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v27 = a3;
      uint64_t v12 = a4(0LL);
      do
      {
        v28[0] = v11;
        swift_dynamicCast(&v29, v28, (char *)&type metadata for Swift.AnyObject + 8, v12, 7LL);
        uint64_t v8 = v30;
        unint64_t v22 = *(void *)(v30 + 16);
        if (*(void *)(v30 + 24) <= v22)
        {
          sub_1000366D4(v22 + 1, v27);
          uint64_t v8 = v30;
        }

        uint64_t v13 = v29;
        Hasher.init(_seed:)(v28, *(void *)(v8 + 40));
        uint64_t v14 = type metadata accessor for UUID(0LL);
        uint64_t v15 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v28, v14, v15);
        Swift::Int result = Hasher._finalize()();
        uint64_t v17 = v8 + 56;
        uint64_t v18 = -1LL << *(_BYTE *)(v8 + 32);
        unint64_t v19 = result & ~v18;
        unint64_t v20 = v19 >> 6;
        if (((-1LL << v19) & ~*(void *)(v8 + 56 + 8 * (v19 >> 6))) != 0)
        {
          unint64_t v21 = __clz(__rbit64((-1LL << v19) & ~*(void *)(v8 + 56 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v23 = 0;
          unint64_t v24 = (unint64_t)(63 - v18) >> 6;
          do
          {
            if (++v20 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v25 = v20 == v24;
            if (v20 == v24) {
              unint64_t v20 = 0LL;
            }
            v23 |= v25;
            uint64_t v26 = *(void *)(v17 + 8 * v20);
          }

          while (v26 == -1);
          unint64_t v21 = __clz(__rbit64(~v26)) + (v20 << 6);
        }

        *(void *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
        *(void *)(*(void *)(v8 + 48) + 8 * v21) = v13;
        ++*(void *)(v8 + 16);
        uint64_t v11 = __CocoaSet.Iterator.next()(result);
      }

      while (v11);
    }

    swift_release(v9);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v8;
}

Swift::Int sub_100035DE8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005394((uint64_t *)&unk_1000787E0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v36 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    uint64_t v34 = v2;
    int64_t v35 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v12 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v16 = v15 | (v12 << 6);
      }

      else
      {
        int64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1LL))
        {
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          return result;
        }

        if (v17 >= v35) {
          goto LABEL_42;
        }
        unint64_t v18 = v36[v17];
        ++v12;
        if (!v18)
        {
          int64_t v12 = v17 + 1;
          if (v17 + 1 >= v35) {
            goto LABEL_42;
          }
          unint64_t v18 = v36[v12];
          if (!v18)
          {
            int64_t v12 = v17 + 2;
            if (v17 + 2 >= v35) {
              goto LABEL_42;
            }
            unint64_t v18 = v36[v12];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v35)
              {
LABEL_42:
                swift_release(v3);
                uint64_t v2 = v34;
                uint64_t v33 = 1LL << *(_BYTE *)(v3 + 32);
                if (v33 > 63) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v36 = -1LL << v33;
                }
                *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
                goto LABEL_46;
              }

              unint64_t v18 = v36[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v12 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_48;
                  }
                  if (v12 >= v35) {
                    goto LABEL_42;
                  }
                  unint64_t v18 = v36[v12];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v12 = v19;
            }
          }
        }

LABEL_46:
  Swift::Int result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

  __break(1u);
  return result;
}

Swift::Int sub_100036120(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005394(&qword_100078758);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    BOOL v31 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v16 = v15 | (v13 << 6);
      }

      else
      {
        int64_t v17 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v10) {
          goto LABEL_36;
        }
        unint64_t v18 = v31[v17];
        ++v13;
        if (!v18)
        {
          int64_t v13 = v17 + 1;
          if (v17 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v18 = v31[v13];
          if (!v18)
          {
            int64_t v13 = v17 + 2;
            if (v17 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v18 = v31[v13];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v30 = 1LL << *(_BYTE *)(v3 + 32);
                if (v30 > 63) {
                  bzero(v31, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *BOOL v31 = -1LL << v30;
                }
                *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v31[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v13 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v31[v13];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v19;
            }
          }
        }

Swift::Int sub_100036428(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)(*v2 + 24);
  }
  sub_100005394(a2);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1LL);
  uint64_t v7 = v6;
  if (*(void *)(v4 + 16))
  {
    BOOL v31 = v3;
    uint64_t v8 = 1LL << *(_BYTE *)(v4 + 32);
    unint64_t v9 = (void *)(v4 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1LL << v8);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v4 + 56);
    int64_t v12 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v13 = v6 + 56;
    Swift::Int result = swift_retain(v4);
    int64_t v15 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v15 << 6);
      }

      else
      {
        int64_t v19 = v15 + 1;
        if (__OFADD__(v15, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v19 >= v12) {
          goto LABEL_36;
        }
        unint64_t v20 = v9[v19];
        ++v15;
        if (!v20)
        {
          int64_t v15 = v19 + 1;
          if (v19 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v20 = v9[v15];
          if (!v20)
          {
            int64_t v15 = v19 + 2;
            if (v19 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v20 = v9[v15];
            if (!v20)
            {
              int64_t v21 = v19 + 3;
              if (v21 >= v12)
              {
LABEL_36:
                swift_release(v4);
                uint64_t v3 = v31;
                uint64_t v30 = 1LL << *(_BYTE *)(v4 + 32);
                if (v30 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v9 = -1LL << v30;
                }
                *(void *)(v4 + swift_weakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v20 = v9[v21];
              if (!v20)
              {
                while (1)
                {
                  int64_t v15 = v21 + 1;
                  if (__OFADD__(v21, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v15 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v20 = v9[v15];
                  ++v21;
                  if (v20) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v15 = v21;
            }
          }
        }

Swift::Int sub_1000366C0(uint64_t a1)
{
  return sub_1000366D4(a1, (uint64_t *)&unk_100078780);
}

Swift::Int sub_1000366D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)(*v2 + 24);
  }
  sub_100005394(a2);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1LL);
  uint64_t v7 = v6;
  if (*(void *)(v4 + 16))
  {
    uint64_t v8 = 1LL << *(_BYTE *)(v4 + 32);
    uint64_t v32 = (void *)(v4 + 56);
    if (v8 < 64) {
      uint64_t v9 = ~(-1LL << v8);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 56);
    int64_t v31 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 56;
    Swift::Int result = swift_retain(v4);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v10)
      {
        unint64_t v15 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v16 = v15 | (v13 << 6);
      }

      else
      {
        int64_t v17 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v31) {
          goto LABEL_36;
        }
        unint64_t v18 = v32[v17];
        ++v13;
        if (!v18)
        {
          int64_t v13 = v17 + 1;
          if (v17 + 1 >= v31) {
            goto LABEL_36;
          }
          unint64_t v18 = v32[v13];
          if (!v18)
          {
            int64_t v13 = v17 + 2;
            if (v17 + 2 >= v31) {
              goto LABEL_36;
            }
            unint64_t v18 = v32[v13];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v31)
              {
LABEL_36:
                swift_release(v4);
                uint64_t v30 = 1LL << *(_BYTE *)(v4 + 32);
                if (v30 > 63) {
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v32 = -1LL << v30;
                }
                *(void *)(v4 + swift_weakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v32[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v13 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v31) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v32[v13];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v19;
            }
          }
        }

unint64_t sub_1000369F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v8, v4, v5);
  Swift::Int v6 = Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v6 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_100036ACC(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40));
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_100036B4C(uint64_t a1, uint64_t a2)
{
  return sub_100036B58(a1, a2);
}

unint64_t sub_100036B58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v8, v4, v5);
  Swift::Int v6 = Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v6 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

uint64_t sub_100036C30(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100036120(v8);
  }

  else
  {
    if (v7 > v6)
    {
      unint64_t result = (uint64_t)sub_1000374AC(&qword_100078758);
      goto LABEL_14;
    }

    sub_10003794C(v8);
  }

  uint64_t v9 = *v3;
  Hasher.init(_seed:)(v20, *(void *)(*v3 + 40));
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v20, v10, v11);
  unint64_t result = Hasher._finalize()();
  uint64_t v12 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v12;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v13 = *(void *)(v9 + 48);
    if (*(void *)(v13 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t v15 = sub_100005394((uint64_t *)&unk_100078730);
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v15);
      __break(1u);
    }

    else
    {
      uint64_t v14 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v13 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }

LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * asub_100007A28(v0 + 2) = v5;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1LL);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + swift_weakDestroy(v0 + 16) = v19;
  }
  return result;
}

  uint64_t v22 = *v7;
  *(void *)(*v7 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v22 + 48) + 8 * asub_100007A28(v0 + 2) = a1;
  uint64_t v23 = *(void *)(v22 + 16);
  unint64_t v24 = __OFADD__(v23, 1LL);
  unint64_t v25 = v23 + 1;
  if (v24) {
    __break(1u);
  }
  else {
    *(void *)(v22 + swift_weakDestroy(v0 + 16) = v25;
  }
}

  unint64_t v25 = *v9;
  *(void *)(*v9 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v25 + 48) + 8 * asub_100007A28(v0 + 2) = v11;
  char v26 = *(void *)(v25 + 16);
  unint64_t v27 = __OFADD__(v26, 1LL);
  BOOL v28 = v26 + 1;
  if (v27) {
    __break(1u);
  }
  else {
    *(void *)(v25 + swift_weakDestroy(v0 + 16) = v28;
  }
  return result;
}

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptySetSingleton);
  BOOL v18 = *((void *)&_swiftEmptySetSingleton + 2);
  uint64_t v17 = *((void *)&_swiftEmptySetSingleton + 3);
  unint64_t result = swift_bridgeObjectRetain(v6);
  if (v17 <= v18)
  {
    uint64_t v20 = v18 + 1;
    if (isUniquelyReferenced_nonNull_native) {
      sub_100035DE8(v20);
    }
    else {
      sub_10003764C(v20);
    }
    Hasher.init(_seed:)(v52, *((void *)&_swiftEmptySetSingleton + 5));
    Hasher._combine(_:)(1uLL);
    String.hash(into:)(v52, a3, v6);
    unint64_t result = Hasher._finalize()();
    uint64_t v21 = -1LL << *((_BYTE *)&_swiftEmptySetSingleton + 32);
    uint64_t v10 = result & ~v21;
    if (((*(void *)((char *)&_swiftEmptySetSingleton + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v10) & 1) != 0)
    {
      uint64_t v22 = ~v21;
      uint64_t v23 = *((void *)&_swiftEmptySetSingleton + 6);
      do
      {
        unint64_t v24 = v23 + 24 * v10;
        if (!*(_BYTE *)(v24 + 16))
        {
          unint64_t v25 = *(void *)(v24 + 8);
          if (*(void *)v24 == a3 && v25 == v6) {
            goto LABEL_58;
          }
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v24, v25, a3, v6, 0LL);
          if ((result & 1) != 0) {
            goto LABEL_58;
          }
        }

        uint64_t v10 = (v10 + 1) & v22;
      }

      while (((*(void *)((char *)&_swiftEmptySetSingleton + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v10) & 1) != 0);
    }
  }

  else if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t result = (uint64_t)sub_100037150();
  }

  *(void *)((char *)&_swiftEmptySetSingleton + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8LL) + 56) |= 1LL << v10;
  unint64_t v27 = *((void *)&_swiftEmptySetSingleton + 6) + 24 * v10;
  *(void *)unint64_t v27 = a3;
  *(void *)(v27 + 8) = v6;
  *(_BYTE *)(v27 + swift_weakDestroy(v0 + 16) = 0;
  BOOL v28 = *((void *)&_swiftEmptySetSingleton + 2);
  uint64_t v29 = __OFADD__(v28, 1LL);
  uint64_t v30 = v28 + 1;
  if (v29)
  {
    __break(1u);
    goto LABEL_64;
  }

  *((void *)&_swiftEmptySetSingleton + sub_100007A28(v0 + 2) = v30;
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  if (!a2) {
    return (uint64_t)&_swiftEmptySetSingleton;
  }
LABEL_33:
  Hasher.init(_seed:)(v52, *((void *)&_swiftEmptySetSingleton + 5));
  Hasher._combine(_:)(2uLL);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
  String.hash(into:)(v52, a1, a2);
  int64_t v31 = Hasher._finalize()();
  uint64_t v32 = -1LL << *((_BYTE *)&_swiftEmptySetSingleton + 32);
  unint64_t v6 = v31 & ~v32;
  if (((*(void *)((char *)&_swiftEmptySetSingleton + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v6) & 1) != 0)
  {
    uint64_t v33 = ~v32;
    uint64_t v34 = *((void *)&_swiftEmptySetSingleton + 6);
    while (1)
    {
      int64_t v35 = v34 + 24 * v6;
      if (*(_BYTE *)(v35 + 16) == 1)
      {
        uint64_t v36 = *(void *)(v35 + 8);
        uint64_t v37 = *(void *)v35 == a1 && v36 == a2;
        if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v35, v36, a1, a2, 0LL) & 1) != 0) {
          break;
        }
      }

      unint64_t v6 = (v6 + 1) & v33;
    }

    swift_bridgeObjectRelease(a2);
    uint64_t v38 = &_swiftEmptySetSingleton;
    goto LABEL_61;
  }

void sub_100036DC8(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, uint64_t (*a5)(void))
{
  unint64_t v7 = v5;
  unint64_t v10 = *(void *)(*v5 + 16);
  unint64_t v11 = *(void *)(*v5 + 24);
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100036428(v12, a4);
  }

  else
  {
    if (v11 > v10)
    {
      sub_10003730C(a4);
      goto LABEL_14;
    }

    sub_100037C40(v12, a4);
  }

  uint64_t v13 = *v5;
  Swift::Int v14 = NSObject._rawHashValue(seed:)(*(void *)(*v5 + 40));
  uint64_t v15 = -1LL << *(_BYTE *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v16 = a5(0LL);
    id v17 = *(id *)(*(void *)(v13 + 48) + 8 * a2);
    char v18 = static NSObject.== infix(_:_:)();

    if ((v18 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v16);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v15;
      while (1)
      {
        a2 = (a2 + 1) & v19;
        if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        id v20 = *(id *)(*(void *)(v13 + 48) + 8 * a2);
        char v21 = static NSObject.== infix(_:_:)();

        if ((v21 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

uint64_t sub_100036F4C( uint64_t result, unint64_t a2, char a3, uint64_t *a4, void *a5, uint64_t (*a6)(void))
{
  uint64_t v9 = v6;
  uint64_t v11 = result;
  unint64_t v12 = *(void *)(*v6 + 16);
  unint64_t v13 = *(void *)(*v6 + 24);
  if (v13 > v12 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000366D4(v14, a4);
  }

  else
  {
    if (v13 > v12)
    {
      unint64_t result = (uint64_t)sub_1000374AC(a4);
      goto LABEL_14;
    }

    sub_100037EB4(v14, a4);
  }

  uint64_t v15 = *v6;
  Hasher.init(_seed:)(v30, *(void *)(*v6 + 40));
  uint64_t v16 = v11 + *a5;
  uint64_t v17 = type metadata accessor for UUID(0LL);
  uint64_t v18 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v30, v17, v18);
  unint64_t result = Hasher._finalize()();
  uint64_t v19 = -1LL << *(_BYTE *)(v15 + 32);
  a2 = result & ~v19;
  if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v29 = a6(0LL);
    uint64_t v20 = *(void *)(*(void *)(v15 + 48) + 8 * a2);
    uint64_t v21 = v20 + *a5;
    swift_retain(v20);
    LOBYTE(v21) = static UUID.== infix(_:_:)(v21, v16);
    unint64_t result = swift_release(v20);
    if ((v21 & 1) != 0)
    {
LABEL_13:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v29);
      __break(1u);
    }

    else
    {
      uint64_t v22 = ~v19;
      while (1)
      {
        a2 = (a2 + 1) & v22;
        if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        uint64_t v23 = *(void *)(*(void *)(v15 + 48) + 8 * a2);
        uint64_t v24 = v23 + *a5;
        swift_retain(v23);
        LOBYTE(v24) = static UUID.== infix(_:_:)(v24, v16);
        unint64_t result = swift_release(v23);
        if ((v24 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

void *sub_100037150()
{
  uint64_t v1 = v0;
  sub_100005394((uint64_t *)&unk_1000787E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23)
      {
        int64_t v9 = v22 + 2;
        if (v22 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v23 = *(void *)(v6 + 8 * v9);
        if (!v23) {
          break;
        }
      }
    }

LABEL_27:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v20 = *(void *)(v4 + 48) + v16;
    unsigned __int8 v21 = *(_BYTE *)(v17 + 16);
    *(void *)uint64_t v20 = *(void *)v17;
    *(void *)(v20 + 8) = v19;
    *(_BYTE *)(v20 + swift_weakDestroy(v0 + 16) = v21;
    unint64_t result = (void *)sub_1000398DC(v18, v19, v21);
  }

  int64_t v24 = v22 + 3;
  if (v24 >= v13) {
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }

    int64_t v13 = (v20 - 1) & v20;
    uint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    unint64_t result = v18;
  }

  unsigned __int8 v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  uint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    uint64_t v10 = v21;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    uint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }

    int64_t v13 = (v20 - 1) & v20;
    uint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void *)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    unint64_t result = (void *)swift_retain(v18);
  }

  unsigned __int8 v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  uint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    uint64_t v10 = v21;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    uint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }

  __break(1u);
  return result;
}

LABEL_30:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

id sub_10003730C(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100005394(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (id)swift_release(v3);
    *uint64_t v2 = v5;
    return result;
  }

  id result = (id)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }

void *sub_1000374AC(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100005394(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (void *)swift_release(v3);
    *uint64_t v2 = v5;
    return result;
  }

  id result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }

Swift::Int sub_10003764C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005394((uint64_t *)&unk_1000787E0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_44:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v32 = v2;
  uint64_t v33 = v3 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v34 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v12 = 0LL;
  while (1)
  {
    if (v9)
    {
      unint64_t v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }

    if (v17 >= v34) {
      goto LABEL_42;
    }
    unint64_t v18 = *(void *)(v33 + 8 * v17);
    ++v12;
    if (!v18)
    {
      int64_t v12 = v17 + 1;
      if (v17 + 1 >= v34) {
        goto LABEL_42;
      }
      unint64_t v18 = *(void *)(v33 + 8 * v12);
      if (!v18)
      {
        int64_t v12 = v17 + 2;
        if (v17 + 2 >= v34) {
          goto LABEL_42;
        }
        unint64_t v18 = *(void *)(v33 + 8 * v12);
        if (!v18) {
          break;
        }
      }
    }

Swift::Int sub_10003794C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100005394(&qword_100078758);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  unint64_t v29 = v2;
  uint64_t v30 = v3 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v31 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v12 = 0LL;
  while (1)
  {
    if (v9)
    {
      unint64_t v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_27;
    }

    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v16 >= v31) {
      goto LABEL_36;
    }
    unint64_t v17 = *(void *)(v30 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v31) {
        goto LABEL_36;
      }
      unint64_t v17 = *(void *)(v30 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v31) {
          goto LABEL_36;
        }
        unint64_t v17 = *(void *)(v30 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }

LABEL_40:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

Swift::Int sub_100037C40(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)(*v2 + 24);
  }
  sub_100005394(a2);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0LL);
  uint64_t v7 = v6;
  if (!*(void *)(v4 + 16))
  {
    Swift::Int result = swift_release(v4);
LABEL_38:
    uint64_t *v3 = v7;
    return result;
  }

  int64_t v31 = v3;
  uint64_t v8 = 1LL << *(_BYTE *)(v4 + 32);
  uint64_t v9 = v4 + 56;
  if (v8 < 64) {
    uint64_t v10 = ~(-1LL << v8);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v4 + 56);
  int64_t v12 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v13 = v6 + 56;
  Swift::Int result = swift_retain(v4);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v15 << 6);
      goto LABEL_27;
    }

    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v19 >= v12) {
      goto LABEL_36;
    }
    unint64_t v20 = *(void *)(v9 + 8 * v19);
    ++v15;
    if (!v20)
    {
      int64_t v15 = v19 + 1;
      if (v19 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v20 = *(void *)(v9 + 8 * v15);
      if (!v20)
      {
        int64_t v15 = v19 + 2;
        if (v19 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v20 = *(void *)(v9 + 8 * v15);
        if (!v20) {
          break;
        }
      }
    }

Swift::Int sub_100037EB4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)(*v2 + 24);
  }
  sub_100005394(a2);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0LL);
  uint64_t v7 = v6;
  if (!*(void *)(v4 + 16))
  {
    Swift::Int result = swift_release(v4);
LABEL_38:
    uint64_t *v3 = v7;
    return result;
  }

  uint64_t v8 = 1LL << *(_BYTE *)(v4 + 32);
  uint64_t v30 = v3;
  uint64_t v31 = v4 + 56;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v4 + 56);
  int64_t v32 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 56;
  Swift::Int result = swift_retain(v4);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v16 = v15 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v32) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v31 + 8 * v17);
    ++v13;
    if (!v18)
    {
      int64_t v13 = v17 + 1;
      if (v17 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v31 + 8 * v13);
      if (!v18)
      {
        int64_t v13 = v17 + 2;
        if (v17 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v31 + 8 * v13);
        if (!v18) {
          break;
        }
      }
    }

uint64_t sub_1000381A8(uint64_t a1)
{
  return sub_1000383B4( a1,  &OBJC_IVAR____TtC20FMIPClientXPCService18NearbyDeviceFinder_uuid,  &qword_1000787C8,  type metadata accessor for NearbyDeviceFinder);
}

uint64_t sub_1000381C4(uint64_t a1)
{
  uint64_t v3 = *v1;
  if ((*v1 & 0xC000000000000001LL) != 0)
  {
    if (v3 < 0) {
      uint64_t v4 = *v1;
    }
    else {
      uint64_t v4 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v3);
    uint64_t v5 = swift_retain(a1);
    char v6 = __CocoaSet.contains(_:)(v5, v4);
    swift_release(a1);
    if ((v6 & 1) != 0)
    {
      uint64_t v7 = sub_1000385FC(v4, a1);
      swift_bridgeObjectRelease(v3);
      return v7;
    }

LABEL_15:
    swift_bridgeObjectRelease(v3);
    return 0LL;
  }

  Hasher.init(_seed:)(v19, *(void *)(v3 + 40));
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v3);
  dispatch thunk of Hashable.hash(into:)(v19, v8, v9);
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v3 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v13 = *(void *)(v3 + 48);
  if (*(void *)(v13 + 8 * v12) != a1)
  {
    uint64_t v14 = ~v11;
    do
    {
      unint64_t v12 = (v12 + 1) & v14;
      if (((*(void *)(v3 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
        goto LABEL_15;
      }
    }

    while (*(void *)(v13 + 8 * v12) != a1);
  }

  swift_bridgeObjectRelease(v3);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  uint64_t v16 = *v1;
  v19[0] = *v1;
  *uint64_t v1 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000374AC(&qword_100078758);
    uint64_t v16 = v19[0];
  }

  uint64_t v7 = *(void *)(*(void *)(v16 + 48) + 8 * v12);
  sub_100038978(v12);
  uint64_t v17 = *v1;
  *uint64_t v1 = v19[0];
  swift_bridgeObjectRelease(v17);
  return v7;
}

    swift_bridgeObjectRelease(v9);
    return 0LL;
  }

  Hasher.init(_seed:)(v30, *(void *)(v9 + 40));
  unint64_t v15 = a1 + *a2;
  uint64_t v16 = type metadata accessor for UUID(0LL);
  uint64_t v17 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v9);
  dispatch thunk of Hashable.hash(into:)(v30, v16, v17);
  unint64_t v18 = Hasher._finalize()();
  int64_t v19 = -1LL << *(_BYTE *)(v9 + 32);
  uint64_t v20 = v18 & ~v19;
  if (((*(void *)(v9 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v20) & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v21 = *(void *)(*(void *)(v9 + 48) + 8 * v20);
  uint64_t v22 = v21 + *a2;
  swift_retain(v21);
  LOBYTE(v2sub_100007A28(v0 + 2) = static UUID.== infix(_:_:)(v22, v15);
  swift_release(v21);
  if ((v22 & 1) == 0)
  {
    uint64_t v23 = ~v19;
    do
    {
      uint64_t v20 = (v20 + 1) & v23;
      if (((*(void *)(v9 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v20) & 1) == 0) {
        goto LABEL_15;
      }
      unint64_t v24 = *(void *)(*(void *)(v9 + 48) + 8 * v20);
      unint64_t v25 = v24 + *a2;
      swift_retain(v24);
      LOBYTE(v25) = static UUID.== infix(_:_:)(v25, v15);
      swift_release(v24);
    }

    while ((v25 & 1) == 0);
  }

  swift_bridgeObjectRelease(v9);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
  unint64_t v27 = *v7;
  v30[0] = *v7;
  *uint64_t v7 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000374AC(a3);
    unint64_t v27 = v30[0];
  }

  uint64_t v14 = *(void *)(*(void *)(v27 + 48) + 8 * v20);
  sub_100038B78(v20);
  BOOL v28 = *v7;
  *uint64_t v7 = v30[0];
  swift_bridgeObjectRelease(v28);
  return v14;
}

  __break(1u);
  return result;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  if (v5 == v3 && v6 == v2)
  {
    uint64_t v8 = 1;
    uint64_t v2 = v6;
  }

  else
  {
    uint64_t v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0LL);
  }

  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

uint64_t sub_100038398(uint64_t a1)
{
  return sub_1000383B4( a1,  &OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_uuid,  (uint64_t *)&unk_100078780,  type metadata accessor for DeviceDiscoverySession);
}

uint64_t sub_1000383B4(uint64_t a1, void *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v7 = v4;
  uint64_t v9 = *v7;
  if ((*v7 & 0xC000000000000001LL) != 0)
  {
    if (v9 < 0) {
      uint64_t v11 = *v7;
    }
    else {
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v7);
    uint64_t v12 = swift_retain(a1);
    char v13 = __CocoaSet.contains(_:)(v12, v11);
    swift_release(a1);
    if ((v13 & 1) != 0)
    {
      uint64_t v14 = sub_100038778(v11, a1, a3, a4, a2);
      swift_bridgeObjectRelease(v9);
      return v14;
    }

uint64_t sub_1000385FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRelease(*v3);
  uint64_t v6 = __CocoaSet.count.getter(a1);
  uint64_t v7 = swift_unknownObjectRetain(a1);
  Swift::Int v8 = sub_10003576C(v7, v6);
  Swift::Int v18 = v8;
  Hasher.init(_seed:)(v17, *(void *)(v8 + 40));
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  swift_retain(v8);
  dispatch thunk of Hashable.hash(into:)(v17, v9, v10);
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1LL << *(_BYTE *)(v8 + 32);
  unint64_t v13 = v11 & ~v12;
  if (((*(void *)(v8 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0)
  {
    uint64_t v14 = *(void *)(v8 + 48);
    if (*(void *)(v14 + 8 * v13) == a2)
    {
LABEL_6:
      swift_release(v8);
      Swift::Int v8 = *(void *)(*(void *)(v8 + 48) + 8 * v13);
      sub_100038978(v13);
      if (v8 == a2)
      {
        Swift::Int *v3 = v18;
        return a2;
      }

      __break(1u);
    }

    else
    {
      uint64_t v15 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v15;
        if (((*(void *)(v8 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
          break;
        }
        if (*(void *)(v14 + 8 * v13) == a2) {
          goto LABEL_6;
        }
      }
    }

    swift_release(v8);
    __break(1u);
  }

  uint64_t result = swift_release(v8);
  __break(1u);
  return result;
}

uint64_t sub_100038778(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void), void *a5)
{
  uint64_t v9 = v5;
  swift_bridgeObjectRelease(*v9);
  uint64_t v12 = __CocoaSet.count.getter(a1);
  uint64_t v13 = swift_unknownObjectRetain(a1);
  Swift::Int v14 = sub_100035B9C(v13, v12, a3, a4);
  Swift::Int v28 = v14;
  Hasher.init(_seed:)(v27, *(void *)(v14 + 40));
  uint64_t v15 = a2 + *a5;
  uint64_t v16 = type metadata accessor for UUID(0LL);
  uint64_t v17 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  swift_retain(v14);
  dispatch thunk of Hashable.hash(into:)(v27, v16, v17);
  Swift::Int v18 = Hasher._finalize()();
  uint64_t v19 = -1LL << *(_BYTE *)(v14 + 32);
  unint64_t v20 = v18 & ~v19;
  if (((*(void *)(v14 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v20) & 1) != 0)
  {
    uint64_t v21 = *(void *)(*(void *)(v14 + 48) + 8 * v20);
    uint64_t v22 = v21 + *a5;
    swift_retain(v21);
    LOBYTE(v2sub_100007A28(v0 + 2) = static UUID.== infix(_:_:)(v22, v15);
    swift_release(v21);
    if ((v22 & 1) != 0)
    {
LABEL_6:
      swift_release(v14);
      Swift::Int v14 = *(void *)(*(void *)(v14 + 48) + 8 * v20);
      sub_100038B78(v20);
      if ((static UUID.== infix(_:_:)(v15, v14 + *a5) & 1) != 0)
      {
        Swift::Int *v9 = v28;
        return v14;
      }

      __break(1u);
    }

    else
    {
      uint64_t v23 = ~v19;
      while (1)
      {
        unint64_t v20 = (v20 + 1) & v23;
        if (((*(void *)(v14 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v20) & 1) == 0) {
          break;
        }
        uint64_t v24 = *(void *)(*(void *)(v14 + 48) + 8 * v20);
        uint64_t v25 = v24 + *a5;
        swift_retain(v24);
        LOBYTE(v25) = static UUID.== infix(_:_:)(v25, v15);
        swift_release(v24);
        if ((v25 & 1) != 0) {
          goto LABEL_6;
        }
      }
    }

    swift_release(v14);
    __break(1u);
  }

  uint64_t result = swift_release(v14);
  __break(1u);
  return result;
}

unint64_t sub_100038978(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)(v21, *(void *)(v3 + 40));
        uint64_t v11 = type metadata accessor for UUID(0LL);
        uint64_t v12 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        swift_retain(v10);
        dispatch thunk of Hashable.hash(into:)(v21, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        swift_release(v10);
        unint64_t v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v9)
        {
          goto LABEL_11;
        }

        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(v3 + 48);
          uint64_t v16 = (void *)(v15 + 8 * v2);
          uint64_t v17 = (void *)(v15 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v16 >= v17 + 1))
          {
            *uint64_t v16 = *v17;
            int64_t v2 = v6;
          }
        }

unint64_t sub_100038B78(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)(v21, *(void *)(v3 + 40));
        uint64_t v11 = type metadata accessor for UUID(0LL);
        uint64_t v12 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        swift_retain(v10);
        dispatch thunk of Hashable.hash(into:)(v21, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        swift_release(v10);
        unint64_t v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v9)
        {
          goto LABEL_11;
        }

        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(v3 + 48);
          uint64_t v16 = (void *)(v15 + 8 * v2);
          uint64_t v17 = (void *)(v15 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v16 >= v17 + 1))
          {
            *uint64_t v16 = *v17;
            int64_t v2 = v6;
          }
        }

uint64_t sub_100038D7C(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = *(void *)&a2[OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider_serialQueue];
  uint64_t v13 = swift_allocObject(&unk_10006D970, 32LL, 7LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  aBlock[4] = sub_100038F7C;
  uint64_t v24 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  void aBlock[3] = &unk_10006D988;
  unint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = a2;
  uint64_t v16 = swift_retain(a3);
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v22 = &_swiftEmptyArrayStorage;
  uint64_t v17 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v19 = sub_10001A008(&qword_100076D58, (uint64_t *)&unk_100078740, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v5, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v24);
}

uint64_t sub_100038F7C()
{
  return sub_100032884(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_100038F88(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = (void *)__chkstk_darwin(v8);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2 >> 60 == 15)
  {
    uint64_t v13 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    id v28 = (id)static OS_os_log.default.getter(v13);
    uint64_t v14 = static os_log_type_t.default.getter(v28);
    os_log(_:dso:log:type:_:)( "Public APS Token was nil.",  25LL,  2LL,  &_mh_execute_header,  v28,  v14,  _swiftEmptyArrayStorage);
  }

  else
  {
    id v28 = v10;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v16 = -[objc_class fm_hexString](isa, "fm_hexString");
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    uint64_t v27 = v5;
    uint64_t v18 = v17;
    uint64_t v20 = v19;

    uint64_t v21 = (void *)swift_allocObject(&unk_10006DA38, 40LL, 7LL);
    void v21[2] = v2;
    v21[3] = v18;
    v21[4] = v20;
    aBlock[4] = sub_10003956C;
    uint64_t v31 = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_10004DB74;
    void aBlock[3] = &unk_10006DA50;
    uint64_t v22 = _Block_copy(aBlock);
    static DispatchQoS.unspecified.getter(v2);
    uint64_t v29 = _swiftEmptyArrayStorage;
    uint64_t v23 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v24 = sub_100005394((uint64_t *)&unk_100078740);
    uint64_t v25 = sub_10001A008(&qword_100076D58, (uint64_t *)&unk_100078740, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v24, v25, v4, v23);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v7, v22);
    _Block_release(v22);

    (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v4);
    (*(void (**)(char *, id))(v9 + 8))(v12, v28);
    swift_release(v31);
  }

void sub_100039240(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = (void *)__chkstk_darwin(v8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2 >> 60 == 15)
  {
    uint64_t v13 = sub_100005394(&qword_100079660);
    uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
    *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
    uint64_t v16 = *(void *)&v2[OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider_topic];
    uint64_t v15 = *(void *)&v2[OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider_topic + 8];
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = sub_100005854();
    *(void *)(v14 + 3sub_100007A28(v0 + 2) = v16;
    *(void *)(v14 + 40) = v15;
    sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v17 = swift_bridgeObjectRetain(v15);
    id v32 = (id)static OS_os_log.default.getter(v17);
    uint64_t v18 = static os_log_type_t.default.getter(v32);
    os_log(_:dso:log:type:_:)("Topic APS Token was nil for %@.", 31LL, 2LL, &_mh_execute_header, v32, v18, v14);
    swift_bridgeObjectRelease(v14);
  }

  else
  {
    id v32 = v10;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v20 = -[objc_class fm_hexString](isa, "fm_hexString");
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    uint64_t v31 = v5;
    uint64_t v22 = v21;
    uint64_t v24 = v23;

    uint64_t v25 = (void *)swift_allocObject(&unk_10006D9E8, 40LL, 7LL);
    v25[2] = v2;
    void v25[3] = v22;
    v25[4] = v24;
    aBlock[4] = sub_10003955C;
    int64_t v35 = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_10004DB74;
    void aBlock[3] = &unk_10006DA00;
    uint64_t v26 = _Block_copy(aBlock);
    static DispatchQoS.unspecified.getter(v2);
    uint64_t v33 = _swiftEmptyArrayStorage;
    uint64_t v27 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v28 = sub_100005394((uint64_t *)&unk_100078740);
    uint64_t v29 = sub_10001A008(&qword_100076D58, (uint64_t *)&unk_100078740, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v28, v29, v4, v27);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v7, v26);
    _Block_release(v26);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v4);
    (*(void (**)(char *, id))(v9 + 8))(v12, v32);
    swift_release(v35);
  }

uint64_t sub_10003955C()
{
  return sub_100032A28(v0[2], v0[3], v0[4]);
}

uint64_t sub_10003956C()
{
  uint64_t v1 = v0[4];
  int64_t v2 = (void *)(v0[2] + OBJC_IVAR____TtC20FMIPClientXPCService16APSTokenProvider_publicAPSToken);
  uint64_t v3 = v2[1];
  *int64_t v2 = v0[3];
  v2[1] = v1;
  swift_bridgeObjectRetain(v1);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_1000395AC()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1000395D8()
{
}

uint64_t sub_1000395E4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100039608()
{
}

uint64_t sub_100039610()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100039644(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005394(&qword_100076D78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003968C()
{
  return sub_100034308( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(_BYTE **)(v0 + 48));
}

uint64_t sub_10003969C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000396AC()
{
  return sub_100034DD4(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1000396B8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000396C8(id a1)
{
  if (a1 != (id)1) {
}
  }

id sub_1000396D8(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

uint64_t sub_1000396E8()
{
  return sub_100034CB0( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(uint64_t **)(v0 + 32),  *(uint64_t **)(v0 + 40),  (uint64_t *)&unk_1000787B0);
}

uint64_t sub_10003970C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10003971C()
{
  return sub_100034CB0( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(uint64_t **)(v0 + 32),  *(uint64_t **)(v0 + 40),  &qword_100077C20);
}

uint64_t sub_100039740()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100039750()
{
  return sub_100034B34(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10003975C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10003976C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100039790(__int128 *a1, uint64_t *a2)
{
  uint64_t v3 = *(uint64_t (**)(__int128 *, uint64_t))(v2 + 16);
  uint64_t v4 = *a2;
  __int128 v6 = *a1;
  return v3(&v6, v4);
}

uint64_t sub_1000397C8(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(uint64_t, void))(v2 + 16))(a1, *a2);
}

uint64_t sub_1000397EC()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100039810()
{
  return sub_100034CB0( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(uint64_t **)(v0 + 32),  *(uint64_t **)(v0 + 40),  &qword_1000787D0);
}

uint64_t sub_100039834()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100039844(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100005394(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100039888()
{
  return sub_100034BF4(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100039894()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000398A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *, uint64_t))(v2 + 16);
  uint64_t v4 = *a2;
  uint64_t v6 = *a1;
  return v3(&v6, v4);
}

uint64_t sub_1000398DC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

void sub_100039988(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void *))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4(a2);
  swift_release(v3);
}

void sub_1000399DC(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)(a1);
  }
  else {
    uint64_t v3 = 0LL;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_100039A28(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (a2)
  {
    uint64_t v6 = swift_errorRetain(a2);
    uint64_t v7 = static os_log_type_t.error.getter(v6);
    uint64_t v8 = sub_100005394(&qword_100079660);
    uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
    *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
    swift_getErrorValue(a2, v20, v19);
    uint64_t v10 = Error.localizedDescription.getter(v19[1], v19[2]);
    uint64_t v12 = v11;
    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = sub_100005854();
    *(void *)(v9 + 3sub_100007A28(v0 + 2) = v10;
    *(void *)(v9 + 40) = v12;
    unint64_t v13 = sub_100005818();
    uint64_t v14 = (void *)static OS_os_log.default.getter(v13);
    os_log(_:dso:log:type:_:)( "Unable to get credential from client. Auth provider registered? %@",  66LL,  2LL,  &_mh_execute_header,  v14,  v7,  v9);
    swift_bridgeObjectRelease(v9);

    swift_errorRelease(a2);
  }

  else
  {
    unint64_t v15 = sub_100005818();
    uint64_t v16 = (void *)static OS_os_log.default.getter(v15);
    uint64_t v17 = static os_log_type_t.default.getter(v16);
    os_log(_:dso:log:type:_:)( "Received credential for session.",  32LL,  2LL,  &_mh_execute_header,  v16,  v17,  _swiftEmptyArrayStorage);
  }

  return a3(a1, a2);
}

void sub_100039CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_100005818();
  uint64_t v9 = (void *)static OS_os_log.default.getter(v8);
  uint64_t v10 = static os_log_type_t.default.getter(v9);
  os_log(_:dso:log:type:_:)( "Calling client proxy credentialNotAuthorized",  44LL,  2LL,  &_mh_execute_header,  v9,  v10,  _swiftEmptyArrayStorage);

  uint64_t v11 = (void *)sub_100018C14();
  swift_unknownObjectRetain(v11);
  uint64_t v12 = (void *)_convertErrorToNSError(_:)(a2);
  uint64_t v13 = swift_allocObject(&unk_10006DF60, 32LL, 7LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v13 + 24) = a4;
  v16[4] = sub_100039FE0;
  uint64_t v17 = v13;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256LL;
  void v16[2] = sub_100039988;
  v16[3] = &unk_10006DF78;
  uint64_t v14 = _Block_copy(v16);
  uint64_t v15 = v17;
  swift_retain(a4);
  swift_release(v15);
  [v11 credentialNotAuthorizedWithCredential:a1 error:v12 completion:v14];
  _Block_release(v14);
  swift_unknownObjectRelease(v11);
}

uint64_t sub_100039DFC(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = sub_100005394(&qword_100079660);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
  uint64_t v14 = a1;
  swift_errorRetain(a1);
  uint64_t v6 = sub_100005394(&qword_100077BD8);
  uint64_t v7 = String.init<A>(describing:)(&v14, v6);
  uint64_t v9 = v8;
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_100005854();
  *(void *)(v5 + 3sub_100007A28(v0 + 2) = v7;
  *(void *)(v5 + 40) = v9;
  unint64_t v10 = sub_100005818();
  uint64_t v11 = (void *)static OS_os_log.default.getter(v10);
  uint64_t v12 = static os_log_type_t.default.getter(v11);
  os_log(_:dso:log:type:_:)( "Client proxy returned credentialNotAuthorized %@",  48LL,  2LL,  &_mh_execute_header,  v11,  v12,  v5);
  swift_bridgeObjectRelease(v5);

  return a2(a1);
}

uint64_t sub_100039F98()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100039FBC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100039FE0(uint64_t a1)
{
  return sub_100039DFC(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_100039FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100007A28(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100039FF8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10003A000(uint64_t a1, uint64_t a2)
{
  return sub_100039A28(a1, a2, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16));
}

unint64_t sub_10003A018(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100005394(&qword_100076E88);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v7 = *(v6 - 3);
    uint64_t v8 = *(v6 - 2);
    uint64_t v10 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_100048378(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v13 = v7;
    v13[1] = v8;
    uint64_t v14 = (void *)(v4[7] + 16 * result);
    *uint64_t v14 = v10;
    v14[1] = v9;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v6 += 4;
    void v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10003A138(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100005394(&qword_100078870);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10003B6EC(v7, (uint64_t)&v16);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_100048378(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    char v12 = (uint64_t *)(v4[6] + 16 * result);
    *char v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_10003B734(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_10003A260(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v15 = sub_100029EB4();
  uint64_t v55 = a4;
  uint64_t v56 = a5;
  uint64_t v75 = type metadata accessor for FMIPRequestCredential();
  uint64_t v76 = &off_10006A068;
  *(void *)&__int128 v74 = v15;
  sub_100007A00(&v74, (uint64_t)v77);
  sub_100007E2C((uint64_t)v77, (uint64_t)&v74);
  uint64_t v16 = type metadata accessor for SearchDeviceEndpoint(0LL);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  uint64_t v17 = sub_100027928(&v74);
  __int128 v18 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0x68LL);
  uint64_t v19 = swift_retain(v17);
  uint64_t v20 = v18(v19);
  uint64_t v21 = v20;
  if ((unint64_t)v20 >> 62)
  {
    if (v20 >= 0) {
      v20 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v20);
  }

  else
  {
    uint64_t v22 = *(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v23 = v55;
  uint64_t v24 = v56;
  uint64_t v53 = a2;
  uint64_t v54 = a6;
  if (!v22)
  {
    swift_bridgeObjectRelease(v21);
    Swift::Int v40 = _swiftEmptyArrayStorage;
LABEL_14:
    swift_bridgeObjectRetain(v24);
    unint64_t v41 = sub_10003A018((uint64_t)_swiftEmptyArrayStorage);
    *(void *)&__int128 v74 = v23;
    *((void *)&v74 + 1) = v24;
    uint64_t v42 = sub_100005394(&qword_100078850);
    unint64_t v43 = sub_10003B50C();
    uint64_t v44 = ResponseSerializable.dictionaryValue.getter(v42, v43);
    swift_bridgeObjectRelease(v24);
    sub_100007E2C(v8 + 16, (uint64_t)&v74);
    uint64_t v45 = type metadata accessor for DeviceSearchListRequestContent();
    swift_allocObject(v45, 32LL, 7LL);
    uint64_t v46 = sub_100007C80((uint64_t)v40, &v74);
    uint64_t v75 = v45;
    uint64_t v76 = &off_10006BB08;
    *(void *)&__int128 v74 = v46;
    id v72 = &type metadata for VAClientContextRequestContent;
    id v73 = &off_100070120;
    v71[0] = v41;
    v71[1] = v44;
    sub_10003B558((uint64_t)&v74, v45);
    RequestContentRepresentable.merging(content:)(v71, v45, &off_10006BB08);
    sub_100007A28(v71);
    uint64_t v70 = v17;
    sub_100007E2C((uint64_t)&v74, (uint64_t)v71);
    sub_100007E2C((uint64_t)v77, (uint64_t)v69);
    uint64_t v47 = (void *)swift_allocObject(&unk_10006E028, 96LL, 7LL);
    v47[2] = v8;
    sub_100007A00(v69, (uint64_t)(v47 + 3));
    _BYTE v47[8] = v23;
    v47[9] = v24;
    v47[10] = v54;
    v47[11] = a7;
    uint64_t v48 = v72;
    uint64_t v49 = (uint64_t)v73;
    uint64_t v50 = sub_1000087E0(v71, (uint64_t)v72);
    uint64_t v51 = type metadata accessor for FMIPEndpointConfiguration(0LL);
    swift_bridgeObjectRetain(v24);
    swift_retain(v8);
    swift_retain(a7);
    sub_10000CAA4( (uint64_t)&v70,  (uint64_t)v50,  v53,  a3,  sub_10003B5BC,  (uint64_t)v47,  v8,  v51,  (uint64_t)v48,  (uint64_t)&off_10006C918,  v49);
    swift_release(v47);
    swift_release(v17);
    sub_100007A28(v71);
    sub_100007A28(v77);
    swift_release(v70);
    return (char *)sub_100007A28(&v74);
  }

  uint64_t v52 = v17;
  *(void *)&__int128 v74 = _swiftEmptyArrayStorage;
  unint64_t result = sub_1000494E4(0LL, v22 & ~(v22 >> 63), 0);
  if ((v22 & 0x8000000000000000LL) == 0)
  {
    uint64_t v26 = 0LL;
    uint64_t v27 = (void *)v74;
    unint64_t v58 = v21 & 0xC000000000000001LL;
    uint64_t v59 = v22;
    uint64_t v61 = a3;
    uint64_t v62 = v8;
    uint64_t v60 = v21;
    do
    {
      uint64_t v28 = v27;
      if (v58) {
        uint64_t v29 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v26, v21);
      }
      else {
        uint64_t v29 = (char *)*(id *)(v21 + 8 * v26 + 32);
      }
      uint64_t v30 = v29;
      uint64_t v31 = *(void *)&v29[direct field offset for SearchFilterDevice.deviceName + 8];
      uint64_t v68 = *(void *)&v29[direct field offset for SearchFilterDevice.deviceName];
      uint64_t v32 = *(void *)&v29[direct field offset for SearchFilterDevice.deviceClass + 8];
      uint64_t v67 = *(void *)&v29[direct field offset for SearchFilterDevice.deviceClass];
      uint64_t v33 = *(void *)&v29[direct field offset for SearchFilterDevice.productName + 8];
      uint64_t v66 = *(void *)&v29[direct field offset for SearchFilterDevice.productName];
      uint64_t v34 = *(void *)&v29[direct field offset for SearchFilterDevice.productType + 8];
      uint64_t v65 = *(void *)&v29[direct field offset for SearchFilterDevice.productType];
      uint64_t v35 = *(void *)&v29[direct field offset for SearchFilterDevice.ownerName + 8];
      uint64_t v64 = *(void *)&v29[direct field offset for SearchFilterDevice.ownerName];
      uint64_t v36 = *(void *)&v29[direct field offset for SearchFilterDevice.ownerDsid + 8];
      uint64_t v63 = *(void *)&v29[direct field offset for SearchFilterDevice.ownerDsid];
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRetain(v35);

      uint64_t v27 = v28;
      *(void *)&__int128 v74 = v28;
      unint64_t v37 = v28[2];
      unint64_t v38 = v27[3];
      if (v37 >= v38 >> 1)
      {
        sub_1000494E4((char *)(v38 > 1), v37 + 1, 1);
        uint64_t v27 = (void *)v74;
      }

      ++v26;
      void v27[2] = v37 + 1;
      uint64_t v39 = &v27[12 * v37];
      v39[4] = v68;
      v39[5] = v31;
      v39[6] = v67;
      v39[7] = v32;
      v39[8] = v66;
      v39[9] = v33;
      v39[10] = v65;
      v39[11] = v34;
      v39[12] = v64;
      v39[13] = v35;
      uint64_t v8 = v62;
      v39[14] = v63;
      v39[15] = v36;
      uint64_t v21 = v60;
      a3 = v61;
    }

    while (v59 != v26);
    Swift::Int v40 = v27;
    swift_bridgeObjectRelease(v60);
    uint64_t v23 = v55;
    uint64_t v24 = v56;
    uint64_t v17 = v52;
    goto LABEL_14;
  }

  __break(1u);
  return result;
}

uint64_t sub_10003A854(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v9 = sub_100005394(&qword_1000788A8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_1000087E0(a1, v14);
  unint64_t v15 = sub_10003BE3C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for DeviceSearchListResponseContent.CodingKeys,  &type metadata for DeviceSearchListResponseContent.CodingKeys,  v15,  v14,  v13);
  v20[0] = a2;
  char v21 = 0;
  sub_100005394(&qword_1000770F0);
  sub_10000C67C(&qword_100077110, (void (*)(void))sub_10000BCD0, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20);
  if (!v5)
  {
    v20[0] = a3;
    v20[1] = v18;
    v20[2] = v19;
    char v21 = 1;
    sub_10003BEF0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_10003A9D0()
{
  if (*v0) {
    return 0x614E656369766564LL;
  }
  else {
    return 0x73656369766564LL;
  }
}

uint64_t sub_10003AA18@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10003BB2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10003AA3C(uint64_t a1)
{
  unint64_t v2 = sub_10003BE3C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003AA64(uint64_t a1)
{
  unint64_t v2 = sub_10003BE3C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003AA8C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10003BC40(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

uint64_t sub_10003AAB8(void *a1)
{
  return sub_10003A854(a1, *v1, v1[1], v1[2], v1[3]);
}

void sub_10003AAD4( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void *, uint64_t), uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v16 = sub_100005394(&qword_100077678);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a5)
  {
    uint64_t v20 = a6;
    swift_errorRetain(a5);
    if (qword_100076B00 != -1) {
      swift_once(&qword_100076B00, sub_100009AE4);
    }
    uint64_t v21 = qword_1000798C8;
    uint64_t v22 = sub_100005394(&qword_100079660);
    uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
    *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
    swift_getErrorValue(a5, &v133, v132);
    uint64_t v24 = Error.localizedDescription.getter(v132[1], v132[2]);
    uint64_t v26 = v25;
    *(void *)(v23 + 56) = &type metadata for String;
    unint64_t v27 = sub_100005854();
    *(void *)(v23 + 64) = v27;
    *(void *)(v23 + 3sub_100007A28(v0 + 2) = v24;
    *(void *)(v23 + 40) = v26;
    uint64_t v28 = static os_log_type_t.default.getter(v27);
    os_log(_:dso:log:type:_:)("Search completed with error %@", 30LL, 2LL, &_mh_execute_header, v21, v28, v23);
    swift_bridgeObjectRelease(v23);
    id v29 = objc_allocWithZone((Class)type metadata accessor for SearchResult(0LL));
    uint64_t v30 = (void *)SearchResult.init(_:resultCode:)(0LL, 5LL);
    swift_errorRetain(a5);
    v20(v30, a5);
    swift_errorRelease(a5);

    swift_errorRelease(a5);
    return;
  }

  if (a4)
  {
    uint64_t v116 = a7;
    sub_10003B5F4();
    static ResponseSerializable.decode(dictionary:)(&v136, a4);
    uint64_t v128 = a2;
    uint64_t v129 = a3;
    uint64_t v130 = v8;
    uint64_t v131 = (char *)*((void *)&v136 + 1);
    uint64_t v31 = v136;
    __int128 v32 = v137;
    sub_10003B638();
    static ResponseSerializable.decode(dictionary:)(&v136, a4);
    uint64_t v127 = v32;
    uint64_t v117 = v31;
    uint64_t v39 = v137;
    uint64_t v112 = *((void *)&v136 + 1);
    unint64_t v40 = *((void *)&v137 + 1);
    if (qword_100076B00 != -1) {
      swift_once(&qword_100076B00, sub_100009AE4);
    }
    uint64_t v126 = qword_1000798C8;
    uint64_t v41 = sub_100005394(&qword_100079660);
    uint64_t v42 = swift_allocObject(v41, 72LL, 7LL);
    *(_OWORD *)(v42 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
    uint64_t v110 = a6;
    uint64_t v111 = v39;
    uint64_t v115 = v41;
    __int128 v114 = xmmword_10005B2C0;
    if (v40)
    {
      uint64_t v43 = HIBYTE(v40) & 0xF;
      if ((v40 & 0x2000000000000000LL) == 0) {
        uint64_t v43 = v39 & 0xFFFFFFFFFFFFLL;
      }
      if (v43)
      {
        swift_bridgeObjectRetain_n(v40, 2LL);
        v146._countAndFlagsBits = v39;
        v146._object = (void *)v40;
        unint64_t v44 = sub_1000527BC(v146);
        if (v44 != 7)
        {
          char v50 = v44;
          swift_bridgeObjectRelease(v40);
LABEL_19:
          LOBYTE(v136) = v50;
          uint64_t v51 = String.init<A>(describing:)(&v136, &type metadata for FMIPSearchResponseStatus.Status);
          uint64_t v53 = v52;
          *(void *)(v42 + 56) = &type metadata for String;
          unint64_t v54 = sub_100005854();
          unint64_t v113 = v54;
          *(void *)(v42 + 64) = v54;
          *(void *)(v42 + 3sub_100007A28(v0 + 2) = v51;
          *(void *)(v42 + 40) = v53;
          uint64_t v55 = static os_log_type_t.default.getter(v54);
          os_log(_:dso:log:type:_:)("Search response status %@", 25LL, 2LL, &_mh_execute_header, v126, v55, v42);
          uint64_t v56 = swift_bridgeObjectRelease(v42);
          uint64_t v57 = (uint64_t)v131;
          if (*((void *)&v32 + 1)
            && (swift_bridgeObjectRetain(v131),
                swift_bridgeObjectRetain(*((void *)&v32 + 1)),
                unint64_t v58 = (void *)sub_10003F7B8(v57, v127, *((void **)&v32 + 1)),
                swift_bridgeObjectRelease(*((void *)&v32 + 1)),
                uint64_t v56 = swift_bridgeObjectRelease(v57),
                v58))
          {
            uint64_t v59 = a1[3];
            uint64_t v60 = a1[4];
            sub_1000087E0(a1, v59);
            uint64_t v61 = *(uint64_t (**)(uint64_t, uint64_t))(v60 + 16);
            uint64_t v62 = v60;
            a6 = v110;
            uint64_t v63 = v61(v59, v62);
            uint64_t v65 = v64;
            sub_10003F9D4((uint64_t)v58, v63, v64, v128, v129, (uint64_t)v19);

            uint64_t v66 = v65;
            uint64_t v57 = (uint64_t)v131;
            swift_bridgeObjectRelease(v66);
            sub_10003B6AC((uint64_t)v19);
          }

          else
          {
            if (qword_100076AF8 != -1) {
              uint64_t v56 = swift_once(&qword_100076AF8, sub_100009A7C);
            }
            uint64_t v67 = qword_1000798C0;
            uint64_t v68 = static os_log_type_t.default.getter(v56);
            os_log(_:dso:log:type:_:)( "No sync data received.",  22LL,  2LL,  &_mh_execute_header,  v67,  v68,  _swiftEmptyArrayStorage);
          }

          uint64_t v69 = v117;
          sub_10003B67C(v57, v127, *((uint64_t *)&v32 + 1));
          if (v69)
          {
            uint64_t v70 = *(char **)(v69 + 16);
            if (v70)
            {
              unint64_t v109 = v40;
              char v135 = _swiftEmptyArrayStorage;
              specialized ContiguousArray.reserveCapacity(_:)(v70);
              uint64_t v71 = 32LL;
              do
              {
                uint64_t v130 = v71;
                uint64_t v131 = v70;
                __int128 v72 = *(_OWORD *)(v69 + v71 + 16);
                __int128 v136 = *(_OWORD *)(v69 + v71);
                __int128 v137 = v72;
                __int128 v73 = *(_OWORD *)(v69 + v71 + 32);
                __int128 v74 = *(_OWORD *)(v69 + v71 + 48);
                __int128 v75 = *(_OWORD *)(v69 + v71 + 80);
                __int128 v140 = *(_OWORD *)(v69 + v71 + 64);
                __int128 v141 = v75;
                __int128 v138 = v73;
                __int128 v139 = v74;
                __int128 v76 = *(_OWORD *)(v69 + v71 + 96);
                __int128 v77 = *(_OWORD *)(v69 + v71 + 112);
                __int128 v78 = *(_OWORD *)(v69 + v71 + 144);
                __int128 v144 = *(_OWORD *)(v69 + v71 + 128);
                __int128 v145 = v78;
                __int128 v142 = v76;
                __int128 v143 = v77;
                LODWORD(v129) = v78;
                uint64_t v79 = qword_1000798C8;
                uint64_t v80 = swift_allocObject(v115, 72LL, 7LL);
                *(_OWORD *)(v80 + swift_weakDestroy(v0 + 16) = v114;
                v134[6] = v142;
                v134[7] = v143;
                v134[8] = v144;
                v134[9] = v145;
                v134[2] = v138;
                v134[3] = v139;
                v134[4] = v140;
                v134[5] = v141;
                v134[0] = v136;
                v134[1] = v137;
                sub_10000B678(&v136);
                sub_10000B678(&v136);
                uint64_t v81 = String.init<A>(describing:)(v134, &type metadata for FMIPSearchResponseDevice);
                unint64_t v82 = v113;
                *(void *)(v80 + 56) = &type metadata for String;
                *(void *)(v80 + 64) = v82;
                *(void *)(v80 + 3sub_100007A28(v0 + 2) = v81;
                *(void *)(v80 + 40) = v83;
                uint64_t v84 = static os_log_type_t.default.getter(v81);
                os_log(_:dso:log:type:_:)("Server returned device %@", 25LL, 2LL, &_mh_execute_header, v79, v84, v80);
                swift_bridgeObjectRelease(v80);
                int v123 = BYTE1(v145);
                uint64_t v85 = *((void *)&v144 + 1);
                uint64_t v86 = *((void *)&v143 + 1);
                uint64_t v87 = *((void *)&v142 + 1);
                uint64_t v127 = v142;
                uint64_t v128 = v143;
                uint64_t v88 = *((void *)&v141 + 1);
                uint64_t v125 = v144;
                uint64_t v126 = v141;
                uint64_t v89 = *((void *)&v140 + 1);
                uint64_t v118 = *((void *)&v143 + 1);
                uint64_t v119 = v140;
                uint64_t v90 = *((void *)&v139 + 1);
                uint64_t v91 = *((void *)&v138 + 1);
                uint64_t v121 = v138;
                uint64_t v122 = v139;
                uint64_t v92 = *((void *)&v137 + 1);
                uint64_t v120 = v137;
                uint64_t v93 = *((void *)&v136 + 1);
                uint64_t v124 = v136;
                swift_bridgeObjectRetain(*((void *)&v140 + 1));
                swift_bridgeObjectRetain(v88);
                swift_bridgeObjectRetain(v87);
                swift_bridgeObjectRetain(v86);
                swift_bridgeObjectRetain(v93);
                swift_bridgeObjectRetain(v92);
                swift_bridgeObjectRetain(v91);
                swift_bridgeObjectRetain(v90);
                swift_bridgeObjectRetain(v85);
                uint64_t v94 = sub_10000B440();
                id v95 = objc_allocWithZone((Class)type metadata accessor for SearchResultDevice(0LL));
                BYTE1(v107) = v123 & 1;
                LOBYTE(v107) = v129 & 1;
                uint64_t v96 = SearchResultDevice.init(firstName:lastName:ownerDsid:serverId:deviceName:deviceClass:productName:discoveryId:productType:thisDevice:needsSafety:pairedDevices:)( v126,  v88,  v127,  v87,  v128,  v118,  v124,  v93,  v120,  v92,  v121,  v91,  v122,  v90,  v125,  v85,  v119,  v89,  v107,  v94);
                uint64_t v97 = sub_10000B72C(&v136);
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v97);
                uint64_t v98 = v135[2];
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v98);
                uint64_t v99 = v98;
                __int128 v100 = v131;
                uint64_t v101 = v96;
                uint64_t v69 = v117;
                uint64_t v102 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v99, v101);
                specialized ContiguousArray._endMutation()(v102);
                uint64_t v71 = v130 + 160;
                uint64_t v70 = v100 - 1;
              }

              while (v70);
              v103 = v135;
              swift_bridgeObjectRelease(v69);
              unint64_t v40 = v109;
              a6 = v110;
            }

            else
            {
              swift_bridgeObjectRelease(v69);
              v103 = _swiftEmptyArrayStorage;
            }
          }

          else
          {
            v103 = 0LL;
          }

          uint64_t v104 = sub_100052804(v111, v40);
          swift_bridgeObjectRelease(v112);
          swift_bridgeObjectRelease(v40);
          id v105 = objc_allocWithZone((Class)type metadata accessor for SearchResult(0LL));
          uint64_t v106 = (void *)SearchResult.init(_:resultCode:)(v103, v104);
          a6(v106, 0LL);

          return;
        }

        uint64_t v45 = static os_log_type_t.error.getter(v44);
        uint64_t v46 = swift_allocObject(v115, 72LL, 7LL);
        *(_OWORD *)(v46 + swift_weakDestroy(v0 + 16) = v114;
        *(void *)(v46 + 56) = &type metadata for String;
        *(void *)(v46 + 64) = sub_100005854();
        *(void *)(v46 + 3sub_100007A28(v0 + 2) = v39;
        *(void *)(v46 + 40) = v40;
        unint64_t v47 = sub_100005818();
        uint64_t v48 = (void *)static OS_os_log.default.getter(v47);
        os_log(_:dso:log:type:_:)( "FMIPSearchResponseStatus is not handled %@",  42LL,  2LL,  &_mh_execute_header,  v48,  v45,  v46);
        uint64_t v49 = v46;
        a6 = v110;
        swift_bridgeObjectRelease(v49);
      }
    }

    char v50 = 0;
    goto LABEL_19;
  }

  if (qword_100076B00 != -1) {
    uint64_t v17 = swift_once(&qword_100076B00, sub_100009AE4);
  }
  uint64_t v33 = qword_1000798C8;
  uint64_t v34 = static os_log_type_t.error.getter(v17);
  os_log(_:dso:log:type:_:)( "Search result had no error and no body.",  39LL,  2LL,  &_mh_execute_header,  v33,  v34,  _swiftEmptyArrayStorage);
  id v35 = objc_allocWithZone((Class)type metadata accessor for SearchResult(0LL));
  uint64_t v131 = (char *)SearchResult.init(_:resultCode:)(0LL, 5LL);
  unint64_t v36 = sub_10002DFBC();
  uint64_t v37 = swift_allocError(&type metadata for ServerInteractionController.ServerInteractionError, v36, 0LL, 0LL);
  *unint64_t v38 = 1;
  a6(v131, v37);
  swift_errorRelease(v37);
}

unint64_t sub_10003B50C()
{
  unint64_t result = qword_100078858;
  if (!qword_100078858)
  {
    uint64_t v1 = sub_100005420(&qword_100078850);
    unint64_t result = swift_getWitnessTable(&unk_10005C52C, v1);
    atomic_store(result, (unint64_t *)&qword_100078858);
  }

  return result;
}

uint64_t sub_10003B558(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t sub_10003B580()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

void sub_10003B5BC(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_10003B5F4()
{
  unint64_t result = qword_100078860;
  if (!qword_100078860)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005DAF0, &type metadata for DeviceSearchListResponseContent);
    atomic_store(result, (unint64_t *)&qword_100078860);
  }

  return result;
}

unint64_t sub_10003B638()
{
  unint64_t result = qword_100078868;
  if (!qword_100078868)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005F2CC, &type metadata for FMIPSearchResponseStatus);
    atomic_store(result, (unint64_t *)&qword_100078868);
  }

  return result;
}

uint64_t sub_10003B67C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v3);
  }

  return result;
}

uint64_t sub_10003B6AC(uint64_t a1)
{
  uint64_t v2 = sub_100005394(&qword_100077678);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10003B6EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005394(&qword_100078878);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

_OWORD *sub_10003B734(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t destroy for DeviceSearchListResponseContent(void *a1)
{
  uint64_t result = a1[3];
  if (result)
  {
    uint64_t v3 = a1[1];
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(v3);
  }

  return result;
}

void *initializeWithCopy for DeviceSearchListResponseContent(void *a1, void *a2)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = a2[3];
  swift_bridgeObjectRetain(v4);
  if (v5)
  {
    uint64_t v6 = a2[1];
    uint64_t v7 = a2[2];
    a1[1] = v6;
    a1[2] = v7;
    a1[3] = v5;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v5);
  }

  else
  {
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    a1[3] = a2[3];
  }

  return a1;
}

void *assignWithCopy for DeviceSearchListResponseContent(void *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  uint64_t v6 = a1 + 1;
  uint64_t v7 = a2 + 1;
  uint64_t v8 = a2[3];
  if (a1[3])
  {
    if (v8)
    {
      uint64_t v9 = a1[1];
      uint64_t v10 = a2[1];
      a1[1] = v10;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRelease(v9);
      a1[2] = a2[2];
      uint64_t v11 = a2[3];
      uint64_t v12 = a1[3];
      a1[3] = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v12);
    }

    else
    {
      sub_10003B8EC(a1 + 1);
      uint64_t v15 = a2[3];
      _OWORD *v6 = *v7;
      a1[3] = v15;
    }
  }

  else if (v8)
  {
    uint64_t v13 = a2[1];
    a1[1] = v13;
    a1[2] = a2[2];
    uint64_t v14 = a2[3];
    a1[3] = v14;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
  }

  else
  {
    __int128 v16 = *v7;
    a1[3] = a2[3];
    _OWORD *v6 = v16;
  }

  return a1;
}

void *sub_10003B8EC(void *a1)
{
  return a1;
}

void *assignWithTake for DeviceSearchListResponseContent(void *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a1[3];
  if (!v5) {
    goto LABEL_5;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  if (!v6)
  {
    sub_10003B8EC(a1 + 1);
LABEL_5:
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
    a1[3] = *(void *)(a2 + 24);
    return a1;
  }

  uint64_t v7 = a1[1];
  a1[1] = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(v7);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceSearchListResponseContent(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceSearchListResponseContent( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 3sub_100007A28(v0 + 2) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 3sub_100007A28(v0 + 2) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DeviceSearchListResponseContent()
{
  return &type metadata for DeviceSearchListResponseContent;
}

unint64_t sub_10003BA78(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10003BAA4();
  unint64_t result = sub_10003BAE8();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_10003BAA4()
{
  unint64_t result = qword_100078880;
  if (!qword_100078880)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005DAC8, &type metadata for DeviceSearchListResponseContent);
    atomic_store(result, (unint64_t *)&qword_100078880);
  }

  return result;
}

unint64_t sub_10003BAE8()
{
  unint64_t result = qword_100078888;
  if (!qword_100078888)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005DAA0, &type metadata for DeviceSearchListResponseContent);
    atomic_store(result, (unint64_t *)&qword_100078888);
  }

  return result;
}

uint64_t sub_10003BB2C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x73656369766564LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v5 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73656369766564LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x614E656369766564LL && a2 == 0xEE00636E7953656DLL)
  {
    swift_bridgeObjectRelease(0xEE00636E7953656DLL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x614E656369766564LL, 0xEE00636E7953656DLL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_10003BC40(void *a1)
{
  uint64_t v3 = sub_100005394(&qword_100078890);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_1000087E0(a1, v7);
  unint64_t v9 = sub_10003BE3C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for DeviceSearchListResponseContent.CodingKeys,  &type metadata for DeviceSearchListResponseContent.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    sub_100007A28(a1);
  }

  else
  {
    sub_100005394(&qword_1000770F0);
    char v17 = 0;
    sub_10000C67C( &qword_1000770F8,  (void (*)(void))sub_10000BC8C,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v14);
    uint64_t v7 = v14;
    char v17 = 1;
    sub_10003BE80();
    swift_bridgeObjectRetain(v7);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v14);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v11 = v14;
    uint64_t v12 = v15;
    uint64_t v13 = v16;
    sub_10003BEC4(v14, v15, v16);
    sub_100007A28(a1);
    swift_bridgeObjectRelease(v7);
    sub_10003B67C(v11, v12, v13);
  }

  return v7;
}

unint64_t sub_10003BE3C()
{
  unint64_t result = qword_100078898;
  if (!qword_100078898)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005DBD0, &type metadata for DeviceSearchListResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078898);
  }

  return result;
}

unint64_t sub_10003BE80()
{
  unint64_t result = qword_1000788A0;
  if (!qword_1000788A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E09C, &type metadata for VoiceAssistantSyncResponseContent);
    atomic_store(result, (unint64_t *)&qword_1000788A0);
  }

  return result;
}

uint64_t sub_10003BEC4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRetain(result);
    return swift_bridgeObjectRetain(a3);
  }

  return result;
}

unint64_t sub_10003BEF0()
{
  unint64_t result = qword_1000788B0;
  if (!qword_1000788B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E074, &type metadata for VoiceAssistantSyncResponseContent);
    atomic_store(result, (unint64_t *)&qword_1000788B0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for DeviceSearchListResponseContent.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10003BF80 + 4 * byte_10005DA55[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10003BFB4 + 4 * byte_10005DA50[v4]))();
}

uint64_t sub_10003BFB4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003BFBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10003BFC4LL);
  }
  return result;
}

uint64_t sub_10003BFD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003BFD8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10003BFDC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003BFE4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceSearchListResponseContent.CodingKeys()
{
  return &type metadata for DeviceSearchListResponseContent.CodingKeys;
}

unint64_t sub_10003C004()
{
  unint64_t result = qword_1000788B8;
  if (!qword_1000788B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005DBA8, &type metadata for DeviceSearchListResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000788B8);
  }

  return result;
}

unint64_t sub_10003C04C()
{
  unint64_t result = qword_1000788C0;
  if (!qword_1000788C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005DB18, &type metadata for DeviceSearchListResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000788C0);
  }

  return result;
}

unint64_t sub_10003C094()
{
  unint64_t result = qword_1000788C8;
  if (!qword_1000788C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005DB40, &type metadata for DeviceSearchListResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000788C8);
  }

  return result;
}

char *sub_10003C0D8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), void *a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = sub_100029EB4();
  v49[3] = type metadata accessor for FMIPRequestCredential();
  v49[4] = &off_10006A068;
  v49[0] = v12;
  uint64_t v13 = type metadata accessor for PlaySoundEndpoint(0LL);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v14 = sub_1000278D8(v49);
  uint64_t v15 = v14;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v40 = a1;
    }
    else {
      uint64_t v40 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_retain(v14);
    swift_bridgeObjectRetain(a1);
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v40);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v16 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_retain(v14);
  }

  char v17 = _swiftEmptyArrayStorage;
  if (!v16)
  {
LABEL_16:
    sub_100007E2C(v6 + 16, (uint64_t)v49);
    uint64_t v38 = type metadata accessor for DevicePlaySoundRequestContent();
    swift_allocObject(v38, 32LL, 7LL);
    uint64_t v39 = sub_10002E500((uint64_t)v17, v49);
    swift_retain(a5);
    sub_10000CEC8(v15, v39, a2, a3, v6, a4, a5);
    swift_release(v39);
    swift_release_n(v15, 2LL);
    return (char *)swift_release(a5);
  }

  v49[0] = _swiftEmptyArrayStorage;
  unint64_t result = sub_1000494C8(0LL, v16 & ~(v16 >> 63), 0);
  if ((v16 & 0x8000000000000000LL) == 0)
  {
    uint64_t v41 = v15;
    uint64_t v42 = a2;
    uint64_t v43 = a3;
    uint64_t v44 = v6;
    uint64_t v45 = a4;
    uint64_t v46 = a5;
    char v17 = (void *)v49[0];
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      uint64_t v19 = 0LL;
      uint64_t v47 = a1;
      do
      {
        uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(v19, a1);
        uint64_t v21 = *(void *)(v20 + direct field offset for PlaySoundDevice.serverId);
        uint64_t v22 = *(void *)(v20 + direct field offset for PlaySoundDevice.serverId + 8);
        uint64_t v23 = *(void *)(v20 + direct field offset for PlaySoundDevice.locality);
        uint64_t v24 = *(void *)(v20 + direct field offset for PlaySoundDevice.locality + 8);
        char v25 = *(_BYTE *)(v20 + direct field offset for PlaySoundDevice.safetyWarningConfirmed);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v24);
        swift_unknownObjectRelease(v20);
        v49[0] = v17;
        unint64_t v27 = v17[2];
        unint64_t v26 = v17[3];
        if (v27 >= v26 >> 1)
        {
          sub_1000494C8((char *)(v26 > 1), v27 + 1, 1);
          char v17 = (void *)v49[0];
        }

        ++v19;
        v17[2] = v27 + 1;
        uint64_t v28 = &v17[5 * v27];
        v28[4] = v21;
        void v28[5] = v22;
        v28[6] = v23;
        v28[7] = v24;
        *((_BYTE *)v28 + 64) = v25;
        a1 = v47;
      }

      while (v16 != v19);
    }

    else
    {
      id v29 = (void *)(a1 + 32);
      do
      {
        uint64_t v30 = (uint64_t *)(*v29 + direct field offset for PlaySoundDevice.serverId);
        uint64_t v31 = v30[1];
        uint64_t v48 = *v30;
        uint64_t v32 = *(void *)(*v29 + direct field offset for PlaySoundDevice.locality);
        uint64_t v33 = *(void *)(*v29 + direct field offset for PlaySoundDevice.locality + 8LL);
        char v34 = *(_BYTE *)(*v29 + direct field offset for PlaySoundDevice.safetyWarningConfirmed);
        v49[0] = v17;
        unint64_t v36 = v17[2];
        unint64_t v35 = v17[3];
        swift_bridgeObjectRetain(v31);
        swift_bridgeObjectRetain(v33);
        if (v36 >= v35 >> 1)
        {
          sub_1000494C8((char *)(v35 > 1), v36 + 1, 1);
          char v17 = (void *)v49[0];
        }

        v17[2] = v36 + 1;
        uint64_t v37 = &v17[5 * v36];
        v37[4] = v48;
        void v37[5] = v31;
        v37[6] = v32;
        v37[7] = v33;
        *((_BYTE *)v37 + 64) = v34;
        ++v29;
        --v16;
      }

      while (v16);
    }

    a4 = v45;
    a5 = v46;
    a3 = v43;
    uint64_t v6 = v44;
    uint64_t v15 = v41;
    a2 = v42;
    goto LABEL_16;
  }

  __break(1u);
  return result;
}

uint64_t sub_10003C4EC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_100076B00 != -1) {
      swift_once(&qword_100076B00, sub_100009AE4);
    }
    uint64_t v5 = qword_1000798C8;
    uint64_t v6 = sub_100005394(&qword_100079660);
    uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
    *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
    swift_getErrorValue(a2, v31, v30);
    uint64_t v8 = Error.localizedDescription.getter(v30[1], v30[2]);
    uint64_t v10 = v9;
    *(void *)(v7 + 56) = &type metadata for String;
    unint64_t v11 = sub_100005854();
    *(void *)(v7 + 64) = v11;
    *(void *)(v7 + 3sub_100007A28(v0 + 2) = v8;
    *(void *)(v7 + 40) = v10;
    uint64_t v12 = static os_log_type_t.default.getter(v11);
    os_log(_:dso:log:type:_:)("Play Sound completed with error %@", 34LL, 2LL, &_mh_execute_header, v5, v12, v7);
    swift_bridgeObjectRelease(v7);
    swift_errorRetain(a2);
    a3(a2);
    swift_errorRelease(a2);
    return swift_errorRelease(a2);
  }

  else
  {
    if (a1)
    {
      sub_10003B638();
      static ResponseSerializable.decode(dictionary:)(v32, a1);
      uint64_t v15 = v32[1];
      uint64_t v16 = v32[2];
      unint64_t v17 = v32[3];
      if (qword_100076B00 != -1) {
        swift_once(&qword_100076B00, sub_100009AE4);
      }
      uint64_t v18 = qword_1000798C8;
      uint64_t v19 = sub_100005394(&qword_100079660);
      uint64_t v20 = swift_allocObject(v19, 72LL, 7LL);
      *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
      uint64_t v21 = sub_100052804(v16, v17);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v17);
      v32[0] = v21;
      uint64_t v22 = String.init<A>(describing:)(v32, &type metadata for SearchResult.ResultCode);
      uint64_t v24 = v23;
      *(void *)(v20 + 56) = &type metadata for String;
      unint64_t v25 = sub_100005854();
      *(void *)(v20 + 64) = v25;
      *(void *)(v20 + 3sub_100007A28(v0 + 2) = v22;
      *(void *)(v20 + 40) = v24;
      uint64_t v26 = static os_log_type_t.default.getter(v25);
      os_log(_:dso:log:type:_:)("Play Sound response %@", 22LL, 2LL, &_mh_execute_header, v18, v26, v20);
      swift_bridgeObjectRelease(v20);
    }

    else
    {
      uint64_t v27 = static os_log_type_t.default.getter(0LL);
      unint64_t v28 = sub_100005818();
      id v29 = (void *)static OS_os_log.default.getter(v28);
      os_log(_:dso:log:type:_:)( "Play Sound completed",  20LL,  2LL,  &_mh_execute_header,  v29,  v27,  _swiftEmptyArrayStorage);
    }

    return ((uint64_t (*)(void))a3)(0LL);
  }

uint64_t type metadata accessor for VoiceAssistantSyncDeviceRequestContent()
{
  return objc_opt_self(&OBJC_CLASS____TtC20FMIPClientXPCService38VoiceAssistantSyncDeviceRequestContent);
}

uint64_t Scheduler.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

id sub_10003C7D0()
{
  id result = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  qword_1000789B0 = (uint64_t)result;
  return result;
}

uint64_t sub_10003C808(uint64_t a1, uint64_t a2)
{
  return sub_10003C82C(a1, a2, (SEL *)&selRef_productType);
}

uint64_t sub_10003C814(uint64_t a1, uint64_t a2)
{
  return sub_10003C82C(a1, a2, (SEL *)&selRef_osVersion);
}

uint64_t sub_10003C820(uint64_t a1, uint64_t a2)
{
  return sub_10003C82C(a1, a2, (SEL *)&selRef_deviceUDID);
}

uint64_t sub_10003C82C(uint64_t a1, uint64_t a2, SEL *a3)
{
  if (qword_100076B10 != -1) {
    swift_once(&qword_100076B10, sub_10003C7D0);
  }
  id v4 = [(id)qword_1000789B0 *a3];
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v6;
}

uint64_t type metadata accessor for DeviceInformationProviderFactory()
{
  return objc_opt_self(&OBJC_CLASS____TtC20FMIPClientXPCService32DeviceInformationProviderFactory);
}

void TransportAddress.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (!a4)
  {
    Swift::UInt v7 = 1LL;
    goto LABEL_5;
  }

  if (a4 == 1)
  {
    Swift::UInt v7 = 2LL;
LABEL_5:
    Hasher._combine(_:)(v7);
    String.hash(into:)(a1, a2, a3);
    return;
  }

  Hasher._combine(_:)(0LL);
}

Swift::Int TransportAddress.hashValue.getter(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    if (a3 != 1)
    {
      Hasher._combine(_:)(0LL);
      return Hasher._finalize()();
    }

    Swift::UInt v6 = 2LL;
  }

  else
  {
    Swift::UInt v6 = 1LL;
  }

  Hasher._combine(_:)(v6);
  String.hash(into:)(v8, a1, a2);
  return Hasher._finalize()();
}

uint64_t sub_10003C9DC(uint64_t a1, uint64_t a2)
{
  return _s20FMIPClientXPCService16TransportAddressO21__derived_enum_equalsySbAC_ACtFZ_0( *(void *)a1,  *(void *)(a1 + 8),  *(_BYTE *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(_BYTE *)(a2 + 16));
}

Swift::Int sub_10003C9F8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  int v3 = *((unsigned __int8 *)v0 + 16);
  Hasher.init(_seed:)(v6, 0LL);
  if (v3)
  {
    if (v3 != 1)
    {
      Hasher._combine(_:)(0LL);
      return Hasher._finalize()();
    }

    Swift::UInt v4 = 2LL;
  }

  else
  {
    Swift::UInt v4 = 1LL;
  }

  Hasher._combine(_:)(v4);
  String.hash(into:)(v6, v1, v2);
  return Hasher._finalize()();
}

void sub_10003CA80(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  if (!*((_BYTE *)v1 + 16))
  {
    Swift::UInt v5 = 1LL;
    goto LABEL_5;
  }

  if (*((_BYTE *)v1 + 16) == 1)
  {
    Swift::UInt v5 = 2LL;
LABEL_5:
    Hasher._combine(_:)(v5);
    String.hash(into:)(a1, v3, v4);
    return;
  }

  Hasher._combine(_:)(0LL);
}

Swift::Int sub_10003CAF4(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  int v4 = *((unsigned __int8 *)v1 + 16);
  Hasher.init(_seed:)(v7, a1);
  if (v4)
  {
    if (v4 != 1)
    {
      Hasher._combine(_:)(0LL);
      return Hasher._finalize()();
    }

    Swift::UInt v5 = 2LL;
  }

  else
  {
    Swift::UInt v5 = 1LL;
  }

  Hasher._combine(_:)(v5);
  String.hash(into:)(v7, v2, v3);
  return Hasher._finalize()();
}

uint64_t _s20FMIPClientXPCService16TransportAddressO21__derived_enum_equalsySbAC_ACtFZ_0( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (!a3)
  {
    if (!a6)
    {
      if (a1 == a4 && a2 == a5) {
        return 1LL;
      }
      return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0LL);
    }

    return 0LL;
  }

  if (a3 != 1) {
    return a6 == 2 && !(a5 | a4);
  }
  if (a6 != 1) {
    return 0LL;
  }
  if (a1 == a4 && a2 == a5) {
    return 1LL;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0LL);
}

unint64_t sub_10003CC04()
{
  unint64_t result = qword_100078A58;
  if (!qword_100078A58)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for TransportAddress,  &type metadata for TransportAddress);
    atomic_store(result, (unint64_t *)&qword_100078A58);
  }

  return result;
}

uint64_t destroy for TransportAddress(uint64_t a1)
{
  return sub_10003CC5C(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_10003CC5C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t _s20FMIPClientXPCService16TransportAddressOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  sub_1000398DC(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for TransportAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  sub_1000398DC(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  sub_10003CC5C(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for TransportAddress(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for TransportAddress(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  sub_10003CC5C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransportAddress(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TransportAddress(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10003CDF4(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10003CE0C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0LL;
    LOBYTE(asub_100007A28(v0 + 2) = 2;
  }

  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TransportAddress()
{
  return &type metadata for TransportAddress;
}

uint64_t sub_10003CE34(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10003CE54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t *Future.addSuccess(block:)(uint64_t a1, uint64_t a2)
{
  return sub_10003CE9C(a1, a2, (uint64_t)&unk_10006E340, (void (*)(char *, uint64_t))sub_10003E5C4);
}

uint64_t *Future.addFailure(block:)(uint64_t a1, uint64_t a2)
{
  return sub_10003CE9C(a1, a2, (uint64_t)&unk_10006E368, (void (*)(char *, uint64_t))sub_10003E644);
}

uint64_t *sub_10003CE9C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t))
{
  uint64_t v8 = *v4;
  uint64_t v9 = (void *)swift_allocObject(a3, 40LL, 7LL);
  v9[2] = *(void *)(v8 + 80);
  void v9[3] = a1;
  v9[4] = a2;
  swift_retain();
  Future.addCompletion(block:)(a4, (uint64_t)v9);
  swift_release(v9);
  return v4;
}

uint64_t Future.addCompletion(block:)(void (*a1)(char *, uint64_t), uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(*(void *)v3 + 80LL);
  uint64_t v7 = type metadata accessor for Optional(0LL, v6);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v22 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))( (char *)&v22 - v11,  1LL,  1LL,  v6);
  uint64_t v27 = 0LL;
  char v26 = 0;
  uint64_t v13 = *(dispatch_queue_s **)(v3 + *(void *)(*(void *)v3 + 128LL));
  uint64_t v14 = (void *)swift_allocObject(&unk_10006E390, 64LL, 7LL);
  v14[2] = v12;
  void v14[3] = v3;
  v14[4] = &v27;
  v14[5] = &v26;
  uint64_t v23 = a1;
  v14[6] = a1;
  v14[7] = a2;
  uint64_t v15 = swift_allocObject(&unk_10006E3B8, 32LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = sub_10003E67C;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_10003E69C;
  uint64_t v25 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10003CE54;
  void aBlock[3] = &unk_10006E3D0;
  uint64_t v16 = _Block_copy(aBlock);
  uint64_t v17 = v25;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release(v17);
  dispatch_sync(v13, v16);
  _Block_release(v16);
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation(v15, "", 90LL, 149LL, 26LL, 1LL);
  uint64_t result = swift_release(v15);
  if ((v17 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    if (v26 == 1)
    {
      uint64_t v19 = v22;
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v22, v12, v7);
      uint64_t v20 = v27;
      swift_errorRetain(v27);
      v23(v19, v20);
      swift_errorRelease(v20);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v19, v7);
    }

    uint64_t v21 = v27;
    swift_retain();
    swift_errorRelease(v21);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    swift_release(v14);
    return v3;
  }

  return result;
}

uint64_t Future.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  Future.init()();
  return v1;
}

uint64_t Future.finish(error:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80LL);
  uint64_t v4 = type metadata accessor for Optional(0LL, v3);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v9 - v6;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))( (char *)&v9 - v6,  1LL,  1LL,  v3);
  LOBYTE(a1) = Future.finish(result:error:)((uint64_t)v7, a1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a1 & 1;
}

uint64_t Future.finish(result:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80LL);
  uint64_t v4 = type metadata accessor for Optional(0LL, v3);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - v6;
  uint64_t v8 = *(void *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v10 - v6, a1, v3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v7, 0LL, 1LL, v3);
  LOBYTE(a1) = Future.finish(result:error:)((uint64_t)v7, 0LL);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a1 & 1;
}

uint64_t Future.isFinished.getter()
{
  uint64_t v1 = v0;
  unsigned __int8 v11 = 0;
  uint64_t v2 = *(dispatch_queue_s **)(v0 + *(void *)(*(void *)v0 + 128LL));
  uint64_t v3 = swift_allocObject(&unk_10006E408, 32LL, 7LL);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = &v11;
  *(void *)(v3 + 24) = v0;
  uint64_t v4 = swift_allocObject(&unk_10006E430, 32LL, 7LL);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = sub_10003E6F8;
  *(void *)(v4 + 24) = v3;
  aBlock[4] = sub_10003F780;
  uint64_t v10 = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10003CE54;
  void aBlock[3] = &unk_10006E448;
  uint64_t v5 = _Block_copy(aBlock);
  uint64_t v6 = v10;
  swift_retain(v1);
  swift_retain(v4);
  swift_release(v6);
  dispatch_sync(v2, v5);
  _Block_release(v5);
  LOBYTE(vsub_100007A28(v0 + 2) = swift_isEscapingClosureAtFileLocation(v4, "", 90LL, 37LL, 26LL, 1LL);
  uint64_t result = swift_release(v4);
  if ((v2 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = v11;
    swift_release(v3);
    return v8;
  }

  return result;
}

uint64_t Future.isCancelled.getter()
{
  uint64_t v1 = v0;
  unsigned __int8 v11 = 0;
  uint64_t v2 = *(dispatch_queue_s **)(v0 + *(void *)(*(void *)v0 + 128LL));
  uint64_t v3 = swift_allocObject(&unk_10006E480, 32LL, 7LL);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = &v11;
  *(void *)(v3 + 24) = v0;
  uint64_t v4 = swift_allocObject(&unk_10006E4A8, 32LL, 7LL);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = sub_10003E718;
  *(void *)(v4 + 24) = v3;
  aBlock[4] = sub_10003F780;
  uint64_t v10 = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10003CE54;
  void aBlock[3] = &unk_10006E4C0;
  uint64_t v5 = _Block_copy(aBlock);
  uint64_t v6 = v10;
  swift_retain(v1);
  swift_retain(v4);
  swift_release(v6);
  dispatch_sync(v2, v5);
  _Block_release(v5);
  LOBYTE(vsub_100007A28(v0 + 2) = swift_isEscapingClosureAtFileLocation(v4, "", 90LL, 47LL, 26LL, 1LL);
  uint64_t result = swift_release(v4);
  if ((v2 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = v11;
    swift_release(v3);
    return v8;
  }

  return result;
}

uint64_t static Future.futureWithResult(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for Promise(0LL, *(void *)(v4 + 80), a3, a4);
  uint64_t v10 = sub_10003D604(v6, v7, v8, v9);
  sub_10003EFEC(a1);
  uint64_t v11 = *(void *)(v10 + 16);
  swift_retain(v11);
  swift_release(v10);
  return v11;
}

uint64_t sub_10003D604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for Future(0LL, *(void *)(v4 + 80), a3, a4);
  uint64_t v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  Future.init()();
  uint64_t result = swift_allocObject(v5, 24LL, 7LL);
  *(void *)(result + swift_weakDestroy(v0 + 16) = v7;
  return result;
}

uint64_t static Future.futureWithError(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for Promise(0LL, *(void *)(v4 + 80), a3, a4);
  uint64_t v10 = sub_10003D604(v6, v7, v8, v9);
  sub_10003EFAC(a1);
  uint64_t v11 = *(void *)(v10 + 16);
  swift_retain(v11);
  swift_release(v10);
  return v11;
}

uint64_t static Future.future(scheduler:block:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v21)
  {
    sub_100007A00(&v20, (uint64_t)v22);
  }

  else
  {
    if (qword_100076B30 != -1) {
      swift_once(&qword_100076B30, sub_10004DF9C);
    }
    swift_beginAccess(&static Scheduler.mainThreadScheduler, v19, 0LL, 0LL);
    sub_100007E2C((uint64_t)&static Scheduler.mainThreadScheduler, (uint64_t)v22);
    sub_10003F104((uint64_t)&v20);
  }

  uint64_t v8 = type metadata accessor for Promise(0LL, *(void *)(v3 + 80), v6, v7);
  uint64_t v12 = sub_10003D604(v8, v9, v10, v11);
  uint64_t v13 = v23;
  uint64_t v14 = v24;
  sub_1000087E0(v22, v23);
  uint64_t v15 = (void *)swift_allocObject(&unk_10006E4F8, 40LL, 7LL);
  uint64_t v15[2] = a2;
  void v15[3] = a3;
  v15[4] = v12;
  uint64_t v16 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v14 + 8);
  swift_retain(a3);
  swift_retain(v12);
  v16(sub_10003F170, v15, v13, v14);
  swift_release(v15);
  uint64_t v17 = *(void *)(v12 + 16);
  swift_retain(v17);
  swift_release(v12);
  sub_100007A28(v22);
  return v17;
}

char *Future.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)v0;
  uint64_t v18 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *((_WORD *)v1 + 8) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(*(void *)(v2 + 80) - 8LL) + 56LL))( &v1[*(void *)(v2 + 104)],  1LL,  1LL);
  *(void *)&v1[*(void *)(*(void *)v1 + 112LL)] = 0LL;
  *(void *)&v1[*(void *)(*(void *)v1 + 120LL)] = 0LL;
  uint64_t v12 = *(void *)(*(void *)v1 + 128LL);
  unint64_t v13 = sub_100005310();
  static DispatchQoS.unspecified.getter(v13);
  uint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_1000078F8( (unint64_t *)&qword_100076B38,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v15 = sub_100005394((uint64_t *)&unk_100078770);
  unint64_t v16 = sub_1000053D4();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v15, v16, v6, v14);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v18);
  *(void *)&v1[v12] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001BLL,  0x8000000100055C20LL,  v11,  v8,  v5,  0LL);
  _s20FMIPClientXPCService6FutureC4uuid33_40B9CAF5474C2AE132CCEC7BECE26906LL10Foundation4UUIDVvpfi_0();
  return v1;
}

Swift::Bool __swiftcall Future.cancel()()
{
  Swift::Bool v10 = 0;
  uint64_t v1 = *(dispatch_queue_s **)(v0 + *(void *)(*(void *)v0 + 128LL));
  uint64_t v2 = swift_allocObject(&unk_10006E520, 32LL, 7LL);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v0;
  *(void *)(v2 + 24) = &v10;
  uint64_t v3 = swift_allocObject(&unk_10006E548, 32LL, 7LL);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = sub_10003F1BC;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_10003F780;
  uint64_t v9 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10003CE54;
  void aBlock[3] = &unk_10006E560;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v9;
  swift_retain();
  swift_retain();
  swift_release(v5);
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v3, "", 90LL, 82LL, 26LL, 1LL);
  Swift::Bool result = swift_release(v3);
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    if (v10)
    {
      sub_10003DBC8();
      Swift::Bool v7 = v10;
    }

    else
    {
      Swift::Bool v7 = 0;
    }

    swift_release(v2);
    return v7;
  }

  return result;
}

uint64_t sub_10003DB5C(uint64_t result, _BYTE *a2)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0)
  {
    uint64_t v3 = (_WORD *)result;
    unint64_t v4 = sub_10003F710();
    uint64_t v5 = swift_allocError(&type metadata for FutureError, v4, 0LL, 0LL);
    uint64_t v6 = *(void *)(*(void *)v3 + 112LL);
    uint64_t v7 = *(void *)((char *)v3 + v6);
    *(void *)((char *)v3 + v6) = v5;
    Swift::Bool result = swift_errorRelease(v7);
    v3[8] = 257;
    *a2 = 1;
  }

  return result;
}

uint64_t sub_10003DBC8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80LL);
  uint64_t v2 = type metadata accessor for Optional(0LL, v1);
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v31 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v29 - v5;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 56LL))( (char *)&v29 - v5,  1LL,  1LL,  v1);
  uint64_t v37 = 0LL;
  uint64_t v38 = 0LL;
  uint64_t v7 = *(dispatch_queue_s **)(v0 + *(void *)(*(void *)v0 + 128LL));
  uint64_t v8 = (void *)swift_allocObject(&unk_10006E900, 48LL, 7LL);
  uint64_t v32 = v6;
  void v8[2] = v6;
  v8[3] = v0;
  v8[4] = &v38;
  v8[5] = &v37;
  uint64_t v9 = swift_allocObject(&unk_10006E928, 32LL, 7LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = sub_10003F6F4;
  *(void *)(v9 + 24) = v8;
  aBlock[4] = sub_10003F780;
  uint64_t v36 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10003CE54;
  void aBlock[3] = &unk_10006E940;
  Swift::Bool v10 = _Block_copy(aBlock);
  uint64_t v11 = v36;
  swift_retain(v0);
  swift_retain(v9);
  swift_release(v11);
  dispatch_sync(v7, v10);
  _Block_release(v10);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v9, "", 90LL, 203LL, 26LL, 1LL);
  uint64_t result = swift_release(v9);
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    uint64_t v14 = v37;
    if (v37)
    {
      id v29 = v8;
      swift_bridgeObjectRetain(v37);
      uint64_t v15 = sub_100005420(&qword_100077BD8);
      FunctionTypeMetadata2 = swift_getFunctionTypeMetadata2(67108866LL, v34, v15, (char *)&type metadata for () + 8);
      if (Array.endIndex.getter(v14, FunctionTypeMetadata2))
      {
        uint64_t v17 = 0LL;
        uint64_t v18 = (void *)(v14 + 40);
        uint64_t v30 = v14;
        uint64_t v19 = v31;
        uint64_t v20 = v34;
        while (1)
        {
          Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
          Array._checkSubscript(_:wasNativeTypeChecked:)(v17, IsNativeType, v14, FunctionTypeMetadata2);
          if (!IsNativeType) {
            break;
          }
          uint64_t v23 = (void (*)(char *, void *))*(v18 - 1);
          uint64_t v22 = *v18;
          uint64_t v24 = v17 + 1;
          BOOL v25 = __OFADD__(v17, 1LL);
          uint64_t result = swift_retain(*v18);
          if (v25) {
            goto LABEL_14;
          }
          uint64_t v26 = v33;
          (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v19, v32, v20);
          uint64_t v27 = v38;
          aBlock[0] = v38;
          swift_errorRetain(v38);
          v23(v19, aBlock);
          swift_release(v22);
          swift_errorRelease(v27);
          unint64_t v28 = *(void (**)(char *, uint64_t))(v26 + 8);
          uint64_t v14 = v30;
          v28(v19, v20);
          ++v17;
          v18 += 2;
          if (v24 == Array.endIndex.getter(v14, FunctionTypeMetadata2)) {
            goto LABEL_11;
          }
        }

        uint64_t result = _ArrayBuffer._getElementSlowPath(_:)(v17, v14, FunctionTypeMetadata2);
        __break(1u);
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }

LABEL_11:
      swift_bridgeObjectRelease(v14);
      uint64_t v8 = v29;
    }

    swift_bridgeObjectRelease(v37);
    swift_errorRelease(v38);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v32, v34);
    return swift_release(v8);
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    uint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
    *uint64_t v22 = a2;
    v22[1] = a3;
    *(void *)(v18[7] + 8 * v1sub_100007A28(v0 + 2) = a1;
    uint64_t v23 = v18[2];
    uint64_t v24 = __OFADD__(v23, 1LL);
    BOOL v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_100048464(v15, a4 & 1);
  uint64_t v20 = sub_100048378(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    uint64_t v12 = v20;
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

uint64_t Future.deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 104LL);
  uint64_t v2 = type metadata accessor for Optional(0LL, *(void *)(*(void *)v0 + 80LL));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_errorRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 112LL)));
  swift_bridgeObjectRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 120LL)));

  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 136LL);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  return v0;
}

uint64_t Future.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t Future.finish(result:error:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 80);
  uint64_t v7 = type metadata accessor for Optional(0LL, v6);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&aBlock[-1] - v10;
  unsigned __int8 v25 = 0;
  dispatch_queue_t v22 = *(dispatch_queue_t *)((char *)v2 + *(void *)(v5 + 128));
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&aBlock[-1] - v10, a1, v7);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = (v12 + 32) & ~v12;
  unint64_t v14 = (v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v16 = swift_allocObject(&unk_10006E598, v15 + 8, v12 | 7);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(v16 + 24) = v2;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v16 + v13, v11, v7);
  *(void *)(v16 + v14) = a2;
  *(void *)(v16 + v15) = &v25;
  uint64_t v17 = swift_allocObject(&unk_10006E5C0, 32LL, 7LL);
  *(void *)(v17 + swift_weakDestroy(v0 + 16) = sub_10003F290;
  *(void *)(v17 + 24) = v16;
  aBlock[4] = sub_10003F780;
  uint64_t v24 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10003CE54;
  void aBlock[3] = &unk_10006E5D8;
  uint64_t v18 = _Block_copy(aBlock);
  uint64_t v19 = v24;
  swift_retain(v2);
  swift_errorRetain(a2);
  swift_retain(v17);
  swift_release(v19);
  dispatch_sync(v22, v18);
  _Block_release(v18);
  LOBYTE(asub_100007A28(v0 + 2) = swift_isEscapingClosureAtFileLocation(v17, "", 90LL, 123LL, 26LL, 1LL);
  uint64_t result = swift_release(v17);
  if ((a2 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    sub_10003DBC8();
    uint64_t v21 = v25;
    swift_release(v16);
    return v21;
  }

  return result;
}

_BYTE *sub_10003E1AC(_BYTE *result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  if ((result[16] & 1) == 0)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)result;
    uint64_t v9 = &result[*(void *)(*(void *)result + 104LL)];
    swift_beginAccess(v9, v13, 33LL, 0LL);
    uint64_t v10 = type metadata accessor for Optional(0LL, *(void *)(v8 + 80));
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24LL))(v9, a2, v10);
    swift_endAccess(v13);
    uint64_t v11 = *(void *)(*(void *)v7 + 112LL);
    uint64_t v12 = *(void *)&v7[v11];
    *(void *)&v7[v11] = a3;
    swift_errorRetain(a3);
    uint64_t result = (_BYTE *)swift_errorRelease(v12);
    v7[16] = 1;
    *a4 = 1;
  }

  return result;
}

uint64_t sub_10003E26C(uint64_t a1, _BYTE *a2, uint64_t *a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v32 = a5;
  uint64_t v11 = *(void *)a2;
  uint64_t v12 = *(void *)(*(void *)a2 + 80LL);
  uint64_t v13 = type metadata accessor for Optional(0LL, v12);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = &v33[-v15 - 8];
  uint64_t v17 = &a2[*(void *)(v11 + 104)];
  swift_beginAccess(v17, v36, 0LL, 0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 16))(v16, v17, v13);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v14 + 40))(a1, v16, v13);
  uint64_t v18 = *(void *)&a2[*(void *)(*(void *)a2 + 112LL)];
  uint64_t v19 = *a3;
  *a3 = v18;
  swift_errorRetain(v18);
  uint64_t result = swift_errorRelease(v19);
  char v21 = a2[16];
  *a4 = v21;
  if ((v21 & 1) == 0)
  {
    dispatch_queue_t v22 = (uint64_t *)&a2[*(void *)(*(void *)a2 + 120LL)];
    swift_beginAccess(v22, v35, 1LL, 0LL);
    if (!*v22)
    {
      uint64_t v23 = sub_100005420(&qword_100077BD8);
      FunctionTypeMetadata2 = swift_getFunctionTypeMetadata2(67108866LL, v13, v23, (char *)&type metadata for () + 8);
      uint64_t v25 = static Array._allocateUninitialized(_:)(0LL, FunctionTypeMetadata2);
      uint64_t v26 = *v22;
      *dispatch_queue_t v22 = v25;
      swift_bridgeObjectRelease(v26);
    }

    uint64_t v27 = (void *)swift_allocObject(&unk_10006E978, 40LL, 7LL);
    uint64_t v28 = v32;
    void v27[2] = v12;
    v27[3] = v28;
    v27[4] = a6;
    v34[0] = sub_10003F754;
    v34[1] = v27;
    uint64_t result = swift_beginAccess(v22, v33, 33LL, 0LL);
    if (*v22)
    {
      swift_retain();
      uint64_t v29 = sub_100005420(&qword_100077BD8);
      uint64_t v30 = swift_getFunctionTypeMetadata2(67108866LL, v13, v29, (char *)&type metadata for () + 8);
      uint64_t v31 = type metadata accessor for Array(0LL, v30);
      Array.append(_:)(v34, v31);
      return swift_endAccess(v33);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_10003E484(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for Optional(0LL, a5);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v12 = (char *)&v17 - v11;
  uint64_t v13 = *(void *)(a5 - 8);
  __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, a5);
  a3(v15);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, a5);
}

uint64_t sub_10003E5A0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10003E5C4(uint64_t a1, uint64_t a2)
{
  return sub_10003E484(a1, a2, *(void (**)(char *))(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 16));
}

uint64_t sub_10003E5D4(uint64_t result, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 48LL))(result, 1LL, a5);
    if ((_DWORD)result == 1)
    {
      swift_errorRetain(a2);
      a3(a2);
      return swift_errorRelease(a2);
    }
  }

  return result;
}

uint64_t sub_10003E644(uint64_t a1, uint64_t a2)
{
  return sub_10003E5D4(a1, a2, *(void (**)(uint64_t))(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 16));
}

uint64_t sub_10003E650()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10003E67C()
{
  return sub_10003E26C( *(void *)(v0 + 16),  *(_BYTE **)(v0 + 24),  *(uint64_t **)(v0 + 32),  *(_BYTE **)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56));
}

uint64_t sub_10003E68C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10003E69C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10003E6BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100007A28(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003E6CC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10003E6D4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10003E6F8()
{
  **(_BYTE **)(v0 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(*(void *)(v0 + 24) + 16LL);
}

uint64_t sub_10003E708()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10003E718()
{
  uint64_t v1 = *(_BYTE **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  if (*(_BYTE *)(v2 + 16) == 1) {
    *uint64_t v1 = *(_BYTE *)(v2 + 17);
  }
  else {
    *uint64_t v1 = 0;
  }
}

uint64_t sub_10003E73C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for Promise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100013400(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Promise);
}

uint64_t sub_10003E758(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  uint64_t v9 = type metadata accessor for Optional(0LL, *(void *)(*a2 + 80));
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v21[-v11];
  uint64_t v13 = (uint64_t)a2 + *(void *)(v8 + 104);
  swift_beginAccess(v13, v22, 0LL, 0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v10 + 40))(a1, v12, v9);
  uint64_t v14 = *(uint64_t *)((char *)a2 + *(void *)(*a2 + 112));
  uint64_t v15 = *a3;
  *a3 = v14;
  swift_errorRetain(v14);
  swift_errorRelease(v15);
  uint64_t v16 = (uint64_t *)((char *)a2 + *(void *)(*a2 + 120));
  swift_beginAccess(v16, v21, 1LL, 0LL);
  uint64_t v17 = *v16;
  uint64_t v18 = *a4;
  *a4 = *v16;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = *v16;
  *uint64_t v16 = 0LL;
  return swift_bridgeObjectRelease(v19);
}

uint64_t Future.flatMap(continuation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Promise(0LL, *(void *)(*(void *)v4 + 80LL), a3, a4);
  uint64_t v11 = sub_10003D604(v7, v8, v9, v10);
  uint64_t v12 = (void *)swift_allocObject(&unk_10006E610, 48LL, 7LL);
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = v4;
  void v12[5] = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)((uint64_t)sub_10003F2F8, (uint64_t)v12);
  swift_release(v4);
  swift_release(v12);
  swift_retain();
  Future.addFailure(block:)((uint64_t)sub_10003F77C, v11);
  swift_release(v4);
  swift_release(v11);
  uint64_t v13 = *(void *)(v11 + 16);
  swift_retain();
  swift_release(v11);
  return v13;
}

uint64_t sub_10003E970(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a2();
  swift_retain();
  Future.addSuccess(block:)((uint64_t)sub_10003F778, a5);
  swift_release(v6);
  swift_release(a5);
  swift_retain();
  Future.addFailure(block:)((uint64_t)sub_10003F77C, a5);
  swift_release_n(v6, 2LL);
  return swift_release(a5);
}

uint64_t Future.reschedule(scheduler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for Promise(0LL, *(void *)(*(void *)v4 + 80LL), a3, a4);
  uint64_t v10 = sub_10003D604(v6, v7, v8, v9);
  sub_100007E2C(a1, (uint64_t)v14);
  uint64_t v11 = swift_allocObject(&unk_10006E638, 64LL, 7LL);
  sub_100007A00(v14, v11 + 16);
  *(void *)(v11 + 56) = v10;
  swift_retain();
  Future.addCompletion(block:)((void (*)(char *, uint64_t))sub_10003F330, v11);
  swift_release(v11);
  swift_release(v4);
  uint64_t v12 = *(void *)(v10 + 16);
  swift_retain();
  swift_release(v10);
  return v12;
}

uint64_t sub_10003EAAC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v23 = a2;
  uint64_t v7 = *(void *)(*(void *)a4 + 80LL);
  uint64_t v8 = type metadata accessor for Optional(0LL, v7);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v22 - v11;
  uint64_t v13 = a3[3];
  uint64_t v14 = a3[4];
  dispatch_queue_t v22 = sub_1000087E0(a3, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  uint64_t v15 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = (v15 + 32) & ~v15;
  unint64_t v17 = (v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v18 = swift_allocObject(&unk_10006E8D8, v17 + 8, v15 | 7);
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = v7;
  *(void *)(v18 + 24) = a4;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v18 + v16, v12, v8);
  uint64_t v19 = v23;
  *(void *)(v18 + v17) = v23;
  uint64_t v20 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v14 + 8);
  swift_retain();
  swift_errorRetain(v19);
  v20(sub_10003F678, v18, v13, v14);
  return swift_release(v18);
}

uint64_t Future.recover(recovery:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Promise(0LL, *(void *)(*(void *)v4 + 80LL), a3, a4);
  uint64_t v11 = sub_10003D604(v7, v8, v9, v10);
  swift_retain();
  Future.addSuccess(block:)((uint64_t)sub_10003F778, v11);
  swift_release(v11);
  uint64_t v12 = (void *)swift_allocObject(&unk_10006E660, 48LL, 7LL);
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = v4;
  void v12[5] = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  Future.addFailure(block:)((uint64_t)sub_10003F374, (uint64_t)v12);
  swift_release_n(v4, 2LL);
  swift_release(v12);
  uint64_t v13 = *(void *)(v11 + 16);
  swift_retain();
  swift_release(v11);
  return v13;
}

uint64_t sub_10003ECD4(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a2();
  swift_retain();
  Future.addSuccess(block:)((uint64_t)sub_10003F5BC, a5);
  swift_release(v6);
  swift_release(a5);
  swift_retain();
  Future.addFailure(block:)((uint64_t)sub_10003F5C0, a5);
  swift_release_n(v6, 2LL);
  return swift_release(a5);
}

uint64_t Future.hash(into:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

Swift::Int Future.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_10003EDF0()
{
  return Future.hashValue.getter();
}

uint64_t sub_10003EE10(uint64_t a1)
{
  return Future.hash(into:)(a1);
}

Swift::Int sub_10003EE30(uint64_t a1)
{
  return Hasher._finalize()();
}

BOOL static Future.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL sub_10003EE78(uint64_t *a1, uint64_t *a2)
{
  return static Future.== infix(_:_:)(*a1, *a2);
}

uint64_t Future.debugDescription.getter()
{
  uint64_t v10 = 60LL;
  unint64_t v11 = 0xE100000000000000LL;
  v1._countAndFlagsBits = _typeName(_:qualified:)(*v0, 0LL);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._countAndFlagsBits = 2016419898LL;
  v3._object = (void *)0xE400000000000000LL;
  String.append(_:)(v3);
  uint64_t v9 = v0;
  unint64_t v4 = sub_10003F380();
  v5._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v9, 16LL, 0LL, &type metadata for Int, v4);
  uint64_t v6 = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v6);
  v7._countAndFlagsBits = 62LL;
  v7._object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  return v10;
}

uint64_t sub_10003EF50()
{
  return Future.debugDescription.getter();
}

uint64_t sub_10003EF70(uint64_t a1)
{
  uint64_t result = swift_allocObject(v1, 24LL, 7LL);
  *(void *)(result + swift_weakDestroy(v0 + 16) = a1;
  return result;
}

uint64_t sub_10003EFA0(uint64_t a1)
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = a1;
  return v1;
}

uint64_t sub_10003EFAC(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain(v3);
  LOBYTE(a1) = Future.finish(error:)(a1);
  swift_release(v3);
  return a1 & 1;
}

uint64_t sub_10003EFEC(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain(v3);
  LOBYTE(a1) = Future.finish(result:)(a1);
  swift_release(v3);
  return a1 & 1;
}

uint64_t sub_10003F02C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005394(&qword_100078A60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003F074(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  LOBYTE(asub_100007A28(v0 + 2) = Future.finish(result:error:)(a1, a2);
  swift_release(v5);
  return a2 & 1;
}

uint64_t Promise.deinit()
{
  return v0;
}

uint64_t Promise.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t sub_10003F104(uint64_t a1)
{
  uint64_t v2 = sub_100005394(&qword_100078A60);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10003F144()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10003F170()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t sub_10003F198()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10003F1BC()
{
  return sub_10003DB5C(*(void *)(v0 + 16), *(_BYTE **)(v0 + 24));
}

uint64_t sub_10003F1C4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10003F1D4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for Optional(0LL, v1) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release(*(void *)(v0 + 24));
  uint64_t v6 = *(void *)(v1 - 8);
  unint64_t v7 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = ((v7 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_errorRelease(*(void *)(v0 + v7));
  return swift_deallocObject(v0, v8, v3 | 7);
}

_BYTE *sub_10003F290()
{
  uint64_t v1 = *(void *)(type metadata accessor for Optional(0LL, *(void *)(v0 + 16)) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10003E1AC( *(_BYTE **)(v0 + 24),  v0 + v2,  *(void *)(v0 + v3),  *(_BYTE **)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10003F2E4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10003F2F8(uint64_t a1)
{
  return sub_10003E970( a1,  *(uint64_t (**)(void))(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40));
}

uint64_t sub_10003F304()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10003F330(uint64_t a1, uint64_t a2)
{
  return sub_10003EAAC(a1, a2, (void *)(v2 + 16), *(void *)(v2 + 56));
}

uint64_t sub_10003F340()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10003F374(uint64_t a1)
{
  return sub_10003ECD4( a1,  *(uint64_t (**)(void))(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40));
}

unint64_t sub_10003F380()
{
  unint64_t result = qword_100078A68;
  if (!qword_100078A68)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100078A68);
  }

  return result;
}

unint64_t sub_10003F3C8()
{
  unint64_t result = qword_100078A70;
  if (!qword_100078A70)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for FutureError, &type metadata for FutureError);
    atomic_store(result, (unint64_t *)&qword_100078A70);
  }

  return result;
}

uint64_t sub_10003F40C(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for Future<A>, a1);
}

uint64_t storeEnumTagSinglePayload for FutureError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10003F45C + 4 * asc_10005DDD0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10003F47C + 4 * byte_10005DDD5[v4]))();
  }
}

_BYTE *sub_10003F45C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10003F47C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10003F484(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10003F48C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10003F494(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10003F49C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FutureError()
{
  return &type metadata for FutureError;
}

uint64_t sub_10003F4BC(uint64_t a1)
{
  v5[0] = &unk_10005DFA8;
  v5[1] = &unk_10005DFA8;
  uint64_t result = type metadata accessor for Optional(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    void v5[2] = *(void *)(result - 8) + 64LL;
    v5[3] = &unk_10005DFC0;
    v5[4] = &unk_10005DFC0;
    void v5[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = type metadata accessor for UUID(319LL);
    if (v4 <= 0x3F)
    {
      v5[6] = *(void *)(result - 8) + 64LL;
      uint64_t result = swift_initClassMetadata2(a1, 0LL, 7LL, v5, a1 + 88);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t type metadata accessor for Future(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100013400(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Future);
}

uint64_t sub_10003F578(uint64_t a1)
{
  uint64_t v2 = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 1LL, &v2, a1 + 88);
}

uint64_t sub_10003F5C4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for Optional(0LL, v1) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release(*(void *)(v0 + 24));
  uint64_t v6 = *(void *)(v1 - 8);
  unint64_t v7 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = v7 + 8;
  swift_errorRelease(*(void *)(v0 + v7));
  return swift_deallocObject(v0, v8, v3 | 7);
}

uint64_t sub_10003F678()
{
  uint64_t v1 = *(void *)(type metadata accessor for Optional(0LL, *(void *)(v0 + 16)) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_10003F074(v0 + v2, *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10003F6D0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10003F6F4()
{
  return sub_10003E758(*(void *)(v0 + 16), *(uint64_t **)(v0 + 24), *(uint64_t **)(v0 + 32), *(uint64_t **)(v0 + 40));
}

uint64_t sub_10003F700()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_10003F710()
{
  unint64_t result = qword_100078BC8;
  if (!qword_100078BC8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for FutureError, &type metadata for FutureError);
    atomic_store(result, (unint64_t *)&qword_100078BC8);
  }

  return result;
}

uint64_t sub_10003F754(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(uint64_t, void))(v2 + 24))(a1, *a2);
}

uint64_t sub_10003F7B8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  if (a1)
  {
    uint64_t v32 = *(void *)(a1 + 16);
    if (v32)
    {
      uint64_t v31 = a1 + 32;
      swift_bridgeObjectRetain(a1);
      for (uint64_t i = 0LL; i != v32; ++i)
      {
        uint64_t v6 = (uint64_t *)(v31 + 40 * i);
        uint64_t v7 = v6[4];
        uint64_t v8 = *(void *)(v7 + 16);
        if (v8)
        {
          uint64_t v34 = i;
          uint64_t v10 = *v6;
          uint64_t v9 = v6[1];
          uint64_t v12 = v6[2];
          uint64_t v11 = v6[3];
          uint64_t v13 = (objc_class *)type metadata accessor for VoiceAssistantDeviceName(0LL);
          swift_bridgeObjectRetain(v9);
          swift_bridgeObjectRetain(v11);
          swift_bridgeObjectRetain(v7);
          uint64_t v33 = v7;
          uint64_t v14 = (uint64_t *)(v7 + 40);
          do
          {
            uint64_t v15 = *(v14 - 1);
            uint64_t v16 = *v14;
            id v17 = objc_allocWithZone(v13);
            swift_bridgeObjectRetain(v9);
            swift_bridgeObjectRetain(v11);
            swift_bridgeObjectRetain(v16);
            id v18 = (id)VoiceAssistantDeviceName.init(deviceName:ownerFirstName:ownerLastName:)( v15,  v16,  v10,  v9,  v12,  v11);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v18);
            unint64_t v20 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v19 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v20 >= v19 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1LL);
            }
            v14 += 2;
            uint64_t v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v18);
            specialized Array._endMutation()(v21);

            --v8;
          }

          while (v8);
          swift_bridgeObjectRelease(v11);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v33);
          uint64_t i = v34;
        }
      }

      swift_bridgeObjectRelease(a1);
      uint64_t v4 = a2;
      uint64_t v3 = a3;
    }
  }

  uint64_t v22 = sub_1000422C0((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v23 = swift_bridgeObjectRelease(&_swiftEmptyArrayStorage);
  uint64_t v24 = (uint64_t *)VoiceAssistantSyncResult.syncVersion.unsafeMutableAddressor(v23);
  uint64_t v35 = *v24;
  uint64_t v36 = v24[1];
  swift_bridgeObjectRetain(v36);
  v25._countAndFlagsBits = v4;
  v25._object = v3;
  String.append(_:)(v25);
  id v26 = objc_allocWithZone((Class)type metadata accessor for VoiceAssistantSyncResult(0LL));
  return VoiceAssistantSyncResult.init(devices:anchor:)(v22, v35, v36);
}

uint64_t sub_10003F9D4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v60 = a4;
  uint64_t v59 = a6;
  uint64_t v62 = type metadata accessor for CachedVoiceAssistantSyncInfo(0LL);
  uint64_t v58 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v57 = (char **)((char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = (int *)type metadata accessor for VoiceAssistantSyncInfo(0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100076AF8 != -1) {
    uint64_t v12 = swift_once(&qword_100076AF8, sub_100009A7C);
  }
  uint64_t v15 = qword_1000798C0;
  uint64_t v16 = static os_log_type_t.default.getter(v12);
  os_log(_:dso:log:type:_:)("Saving sync data", 16LL, 2LL, &_mh_execute_header, v15, v16, &_swiftEmptyArrayStorage);
  uint64_t v17 = *(void *)(a1 + direct field offset for VoiceAssistantSyncResult.devices);
  id v18 = &v14[v11[5]];
  uint64_t v19 = swift_bridgeObjectRetain(v17);
  uint64_t v56 = v18;
  Date.init()(v19);
  uint64_t v21 = *(void *)(a1 + direct field offset for VoiceAssistantSyncResult.anchor);
  uint64_t v20 = *(void *)(a1 + direct field offset for VoiceAssistantSyncResult.anchor + 8);
  *(void *)uint64_t v14 = v17;
  uint64_t v22 = &v14[v11[6]];
  *(void *)uint64_t v22 = a2;
  *((void *)v22 + 1) = a3;
  uint64_t v23 = (uint64_t *)&v14[v11[7]];
  *uint64_t v23 = v60;
  v23[1] = a5;
  uint64_t v24 = &v14[v11[8]];
  *(void *)uint64_t v24 = v21;
  *((void *)v24 + 1) = v20;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a5);
  uint64_t v25 = swift_bridgeObjectRetain(v20);
  uint64_t v26 = static os_log_type_t.default.getter(v25);
  uint64_t v60 = v15;
  os_log(_:dso:log:type:_:)("Requesting cache save", 21LL, 2LL, &_mh_execute_header, v15, v26, &_swiftEmptyArrayStorage);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v61 + OBJC_IVAR____TtC20FMIPClientXPCService27ServerInteractionController_authenticationProvider);
  if (Strong)
  {
    uint64_t v28 = Strong;
    uint64_t v29 = type metadata accessor for VoiceAssistantSyncCache(0LL);
    swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    uint64_t v30 = swift_unknownObjectRetain(v28);
    uint64_t v35 = sub_10001BD48(v30);
    uint64_t v36 = static os_log_type_t.default.getter(v35);
    os_log(_:dso:log:type:_:)( "Saving sync device cache",  24LL,  2LL,  &_mh_execute_header,  v60,  v36,  &_swiftEmptyArrayStorage);
    uint64_t v37 = v62;
    uint64_t v38 = v57;
    uint64_t v39 = (char *)v57 + *(int *)(v62 + 20);
    uint64_t v40 = type metadata accessor for Date(0LL);
    uint64_t v41 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16LL))(v39, v56, v40);
    *uint64_t v38 = v17;
    uint64_t v42 = (void *)((char *)v38 + *(int *)(v37 + 24));
    *uint64_t v42 = v21;
    v42[1] = v20;
    __chkstk_darwin(v41);
    uint64_t v61 = v35;
    *(&v56 - sub_100007A28(v0 + 2) = (char *)v35;
    *(&v56 - 1) = v14;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v20);
    uint64_t v43 = OS_dispatch_queue.sync<A>(execute:)(sub_10003FE94, &v56 - 4, (char *)&type metadata for () + 8);
    uint64_t v52 = static os_log_type_t.default.getter(v43);
    os_log(_:dso:log:type:_:)("Cache save success", 18LL, 2LL, &_mh_execute_header, v60, v52, &_swiftEmptyArrayStorage);
    swift_unknownObjectRelease(v28);
    swift_release(v61);
    sub_100019DD8((uint64_t)v14, type metadata accessor for VoiceAssistantSyncInfo);
    uint64_t v53 = v59;
    sub_10003FEAC((uint64_t)v57, v59);
    uint64_t v54 = 0LL;
    uint64_t v55 = v58;
  }

  else
  {
    unint64_t v31 = sub_10002DFBC();
    uint64_t v32 = swift_allocError(&type metadata for ServerInteractionController.ServerInteractionError, v31, 0LL, 0LL);
    *uint64_t v33 = 6;
    uint64_t v34 = swift_willThrow(v32);
    uint64_t v55 = v58;
    uint64_t v53 = v59;
    uint64_t v44 = qword_1000798C0;
    uint64_t v45 = static os_log_type_t.error.getter(v34);
    uint64_t v46 = sub_100005394(&qword_100079660);
    uint64_t v47 = swift_allocObject(v46, 72LL, 7LL);
    *(_OWORD *)(v47 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
    swift_getErrorValue(v32, v64, v63);
    uint64_t v48 = Error.localizedDescription.getter(v63[1], v63[2]);
    uint64_t v50 = v49;
    *(void *)(v47 + 56) = &type metadata for String;
    *(void *)(v47 + 64) = sub_100005854();
    *(void *)(v47 + 3sub_100007A28(v0 + 2) = v48;
    *(void *)(v47 + 40) = v50;
    os_log(_:dso:log:type:_:)("Failed to save synced device names %@", 37LL, 2LL, &_mh_execute_header, v44, v45, v47);
    swift_bridgeObjectRelease(v47);
    swift_errorRelease(v32);
    sub_100019DD8((uint64_t)v14, type metadata accessor for VoiceAssistantSyncInfo);
    uint64_t v54 = 1LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56))(v53, v54, 1LL, v62);
}

uint64_t sub_10003FE94()
{
  return sub_10001C0D0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10003FEAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CachedVoiceAssistantSyncInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003FEF0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100005394(&qword_100078C00);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v17[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_1000087E0(a1, v12);
  unint64_t v14 = sub_100042CB0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for VoiceAssistantResponseContent.CodingKeys,  &type metadata for VoiceAssistantResponseContent.CodingKeys,  v14,  v12,  v13);
  v17[0] = a2;
  v17[1] = a3;
  v17[2] = a4;
  sub_10003BEF0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v17);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10003FFFC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = a4;
  uint64_t v8 = sub_100005394(&qword_100078C30);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 2];
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_1000087E0(a1, v12);
  unint64_t v14 = sub_100042FC0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for VoiceAssistantSyncResponseContent.CodingKeys,  &type metadata for VoiceAssistantSyncResponseContent.CodingKeys,  v14,  v12,  v13);
  uint64_t v18 = a2;
  v17[1] = 0;
  sub_100005394(&qword_100078C18);
  sub_100043910( &qword_100078C38,  &qword_100078C18,  (void (*)(void))sub_100043048,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v18);
  if (!v4)
  {
    v17[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a3, v16, v17, v8);
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100040164(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100005394(&qword_100078CA0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000087E0(a1, v9);
  unint64_t v11 = sub_100043888();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for VoiceAssistantSyncObjects.CodingKeys,  &type metadata for VoiceAssistantSyncObjects.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v20, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v19, v5);
    uint64_t v18 = v3[4];
    v17[15] = 2;
    sub_100005394(&qword_100078C88);
    sub_100043910( &qword_100078CA8,  &qword_100078C88,  (void (*)(void))sub_100043974,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18);
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000402E4()
{
  return 0x614E656369766564LL;
}

uint64_t sub_100040308@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x614E656369766564LL && a2 == 0xEE00636E7953656DLL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xEE00636E7953656DLL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x614E656369766564LL, 0xEE00636E7953656DLL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1000403C0(uint64_t a1)
{
  unint64_t v2 = sub_100042CB0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000403E8(uint64_t a1)
{
  unint64_t v2 = sub_100042CB0();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100040410@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100042B84(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

uint64_t sub_10004043C(void *a1)
{
  return sub_10003FEF0(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100040458()
{
  if (*v0) {
    return 0x726F68636E61LL;
  }
  else {
    return 0x61746144636E7973LL;
  }
}

uint64_t sub_100040490@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100042CF4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000404B4(uint64_t a1)
{
  unint64_t v2 = sub_100042FC0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000404DC(uint64_t a1)
{
  unint64_t v2 = sub_100042FC0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100040504@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100042DDC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

uint64_t sub_100040530(void *a1)
{
  return sub_10003FFFC(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_10004054C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100051738(*a1, *a2);
}

Swift::Int sub_100040558()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v7, 0LL);
  unint64_t v2 = 0xED0000656D614E74LL;
  uint64_t v3 = 0x73614C72656E776FLL;
  if (v1 != 1)
  {
    uint64_t v3 = 0x73656369766564LL;
    unint64_t v2 = 0xE700000000000000LL;
  }

  if (v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x72694672656E776FLL;
  }
  if (v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xEE00656D614E7473LL;
  }
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_100040610(uint64_t a1)
{
  unint64_t v2 = 0xED0000656D614E74LL;
  uint64_t v3 = 0x73614C72656E776FLL;
  if (*v1 != 1)
  {
    uint64_t v3 = 0x73656369766564LL;
    unint64_t v2 = 0xE700000000000000LL;
  }

  if (*v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0x72694672656E776FLL;
  }
  if (*v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xEE00656D614E7473LL;
  }
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000406A4(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  unint64_t v3 = 0xED0000656D614E74LL;
  uint64_t v4 = 0x73614C72656E776FLL;
  if (v2 != 1)
  {
    uint64_t v4 = 0x73656369766564LL;
    unint64_t v3 = 0xE700000000000000LL;
  }

  if (v2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0x72694672656E776FLL;
  }
  if (v2) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = 0xEE00656D614E7473LL;
  }
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_100040758@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000435C8(*a1);
  *a2 = result;
  return result;
}

void sub_100040784(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEE00656D614E7473LL;
  unint64_t v4 = 0xED0000656D614E74LL;
  uint64_t v5 = 0x73614C72656E776FLL;
  if (v2 != 1)
  {
    uint64_t v5 = 0x73656369766564LL;
    unint64_t v4 = 0xE700000000000000LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x72694672656E776FLL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1000407FC()
{
  uint64_t v1 = 0x73614C72656E776FLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x73656369766564LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x72694672656E776FLL;
  }
}

unint64_t sub_100040870@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000435C8(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100040894(uint64_t a1)
{
  unint64_t v2 = sub_100043888();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000408BC(uint64_t a1)
{
  unint64_t v2 = sub_100043888();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000408E4@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    double result = *(double *)v6;
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v5;
    *(void *)(a2 + 3sub_100007A28(v0 + 2) = v7;
  }

  return result;
}

uint64_t sub_100040928(void *a1)
{
  return sub_100040164(a1);
}

uint64_t sub_10004093C( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void (*a7)(char *, uint64_t))
{
  uint64_t v12 = sub_100005394(&qword_100077678);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a1)
  {
    if (qword_100076AF8 != -1) {
      uint64_t v13 = swift_once(&qword_100076AF8, sub_100009A7C);
    }
    uint64_t v17 = qword_1000798C0;
    uint64_t v18 = static os_log_type_t.error.getter(v13);
    os_log(_:dso:log:type:_:)( "Device Name Sync result had no error and no body.",  49LL,  2LL,  &_mh_execute_header,  v17,  v18,  &_swiftEmptyArrayStorage);
    uint64_t v19 = type metadata accessor for CachedVoiceAssistantSyncInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v15, 1LL, 1LL, v19);
    unint64_t v20 = sub_10002DFBC();
    uint64_t v21 = swift_allocError(&type metadata for ServerInteractionController.ServerInteractionError, v20, 0LL, 0LL);
    *uint64_t v22 = 1;
    a7(v15, v21);
    goto LABEL_12;
  }

  sub_100042638();
  uint64_t v16 = static ResponseSerializable.decode(dictionary:)(v39, a1);
  uint64_t v38 = a7;
  uint64_t v23 = v40;
  if (!v40
    || (uint64_t v24 = v39[0],
        uint64_t v25 = (void *)sub_10003F7B8(v39[0], v39[1], v40),
        swift_bridgeObjectRelease(v23),
        uint64_t v16 = (void *)swift_bridgeObjectRelease(v24),
        !v25))
  {
    if (qword_100076AF8 != -1) {
      uint64_t v16 = (void *)swift_once(&qword_100076AF8, sub_100009A7C);
    }
    uint64_t v31 = qword_1000798C0;
    uint64_t v32 = static os_log_type_t.default.getter(v16);
    os_log(_:dso:log:type:_:)( "No sync data received.",  22LL,  2LL,  &_mh_execute_header,  v31,  v32,  &_swiftEmptyArrayStorage);
    uint64_t v33 = type metadata accessor for CachedVoiceAssistantSyncInfo(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))(v15, 1LL, 1LL, v33);
    unint64_t v34 = sub_10002DFBC();
    uint64_t v21 = swift_allocError(&type metadata for ServerInteractionController.ServerInteractionError, v34, 0LL, 0LL);
    *uint64_t v35 = 1;
    v38(v15, v21);
LABEL_12:
    swift_errorRelease(v21);
    return sub_10000D20C((uint64_t)v15, &qword_100077678);
  }

  uint64_t v27 = a4[3];
  uint64_t v26 = a4[4];
  sub_1000087E0(a4, v27);
  uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 16))(v27, v26);
  uint64_t v30 = v29;
  sub_10003F9D4((uint64_t)v25, v28, v29, a5, a6, (uint64_t)v15);
  swift_bridgeObjectRelease(v30);
  v38(v15, 0LL);

  return sub_10000D20C((uint64_t)v15, &qword_100077678);
}

uint64_t sub_100040D74( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t a7)
{
  void v41[3] = type metadata accessor for VoiceAssistantSyncDeviceRequestContent();
  v41[4] = &off_10006BB08;
  v41[0] = a2;
  swift_beginAccess(a1 + 16, v34, 0LL, 0LL);
  sub_10000D1A4(a1 + 16, (uint64_t)&v35, &qword_100077228);
  if (*((void *)&v36 + 1))
  {
    sub_100007A00(&v35, (uint64_t)&v42);
    sub_100007E2C((uint64_t)&v42, (uint64_t)&v35);
    swift_retain(a1);
    swift_retain(a2);
    sub_100027DCC(&v35, (uint64_t)&v26);
    sub_10000CE10((uint64_t)&v26, (uint64_t)&v35);
    if ((void)v35)
    {
      sub_10000CE58((uint64_t)&v35, (uint64_t)&v26);
      sub_100028010();
      sub_10000CE94((uint64_t)&v26);
    }

    sub_100007A28(&v42);
  }

  else
  {
    swift_retain(a1);
    swift_retain(a2);
    sub_10000D20C((uint64_t)&v35, &qword_100077228);
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    uint64_t v40 = 0LL;
  }

  swift_bridgeObjectRetain(a4);
  uint64_t v14 = sub_1000291F8();
  uint64_t v16 = v15;
  sub_100007E2C(a7 + 16, (uint64_t)&v32);
  unint64_t v17 = sub_10003A018((uint64_t)&_swiftEmptyArrayStorage);
  sub_100007E2C((uint64_t)&v32, (uint64_t)&v26);
  sub_1000122E4(a3, a4, v14, v16, &v26, (uint64_t *)&v42);
  __int128 v26 = v42;
  uint64_t v27 = v43;
  uint64_t v28 = v44;
  uint64_t v29 = v45;
  __int128 v30 = v46;
  __int128 v31 = v47;
  uint64_t v18 = sub_100005394(&qword_100077230);
  uint64_t v19 = sub_1000424CC((unint64_t *)&qword_100077238, &qword_100077230);
  uint64_t v20 = ResponseSerializable.dictionaryValue.getter(v18, v19);
  sub_100007A28(&v32);
  uint64_t v21 = *((void *)&v26 + 1);
  uint64_t v22 = *((void *)&v30 + 1);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v22);
  unint64_t v32 = v17;
  uint64_t v33 = v20;
  RequestContentRepresentable.merging(content:)(v41, &type metadata for ClientContextRequestContent, &off_10006AD38);
  uint64_t v23 = v32;
  uint64_t v24 = v33;
  sub_10000D1A4((uint64_t)&v35, (uint64_t)&v26, &qword_100077240);
  sub_100041038(a1, v23, v24, (uint64_t)&v26, a5, a6, 0LL, a7);
  sub_10000D20C((uint64_t)&v26, &qword_100077240);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v23);
  sub_10000D20C((uint64_t)&v35, &qword_100077240);
  swift_release(a1);
  return sub_100007A28(v41);
}

uint64_t sub_100041038( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v16)(__int128 *__return_ptr, uint64_t, uint64_t);
  void *v17;
  dispatch_queue_s *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char isEscapingClosureAtFileLocation;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  dispatch_queue_s *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  dispatch_queue_s *v81;
  void *v82;
  uint64_t v83;
  void *v84;
  void *v85;
  __int128 v86;
  uint64_t v87;
  void (*v88)(uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t Strong;
  dispatch_group_t v92;
  uint64_t v93;
  void *v94;
  void (*v95)(void *, uint64_t (*)(uint64_t, uint64_t, char), void *);
  dispatch_group_s *v96;
  uint64_t v98;
  uint64_t v100;
  void *v101;
  uint64_t v104;
  uint64_t v105;
  _OWORD v106[5];
  uint64_t v107;
  __int128 aBlock;
  uint64_t (*v109)(uint64_t);
  void *v110;
  uint64_t (*v111)();
  __int128 v112[2];
  __int128 v113;
  uint64_t (*v114)(uint64_t);
  void *v115;
  uint64_t (*v116)();
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  void v120[2];
  void v121[3];
  uint64_t v122;
  uint64_t v123;
  void v124[5];
  void v125[3];
  uint64_t v126;
  uint64_t v127;
  _BYTE v128[40];
  _BYTE v129[40];
  void v130[5];
  void v131[6];
  uint64_t v13 = type metadata accessor for FMIPEndpointConfiguration(0LL);
  v131[3] = v13;
  v131[4] = &off_10006C918;
  v131[0] = a1;
  v130[3] = &type metadata for ClientContextRequestContent;
  v130[4] = &off_10006AD38;
  v130[0] = a2;
  v130[1] = a3;
  sub_100007E2C((uint64_t)v131, (uint64_t)v128);
  sub_100007E2C((uint64_t)v130, (uint64_t)v129);
  sub_100007E2C((uint64_t)v128, (uint64_t)&v113);
  sub_100007E2C((uint64_t)v129, (uint64_t)&v117);
  sub_100007A00(&v113, (uint64_t)v125);
  sub_100007A00(&v117, (uint64_t)v124);
  uint64_t v14 = v126;
  uint64_t v15 = v127;
  sub_1000087E0(v125, v126);
  uint64_t v16 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v15 + 8);
  swift_retain(a1);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  v16(&v113, v14, v15);
  unint64_t v17 = &unk_10005B000;
  __int128 v100 = a8;
  uint64_t v98 = a4;
  if (!v115)
  {
    sub_10000D20C((uint64_t)&v113, &qword_100077228);
LABEL_10:
    sub_100007E2C((uint64_t)v125, (uint64_t)&v113);
    uint64_t v49 = objc_allocWithZone((Class)type metadata accessor for HttpClient(0LL));
    uint64_t v101 = (void *)HttpClient.init(endpoint:)(&v113);
    uint64_t v50 = sub_100005394(&qword_100079660);
    uint64_t v51 = swift_allocObject(v50, 72LL, 7LL);
    *(_OWORD *)(v51 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
    sub_100007E2C((uint64_t)v125, (uint64_t)&v113);
    uint64_t v52 = sub_100005394(&qword_100078390);
    uint64_t v53 = String.init<A>(describing:)(&v113, v52);
    uint64_t v55 = v54;
    *(void *)(v51 + 56) = &type metadata for String;
    *(void *)(v51 + 64) = sub_100005854();
    *(void *)(v51 + 3sub_100007A28(v0 + 2) = v53;
    *(void *)(v51 + 40) = v55;
    uint64_t v56 = sub_100005818();
    uint64_t v57 = (void *)static OS_os_log.default.getter(v56);
    uint64_t v58 = static os_log_type_t.default.getter(v57);
    os_log(_:dso:log:type:_:)("Created standard endpoint %@", 28LL, 2LL, &_mh_execute_header, v57, v58, v51);
    swift_bridgeObjectRelease(v51);

    goto LABEL_11;
  }

  sub_100007A00(&v113, (uint64_t)v121);
  sub_10000D1A4(a4, (uint64_t)&v113, &qword_100077240);
  uint64_t v18 = (dispatch_queue_s *)v113;
  if (!(void)v113)
  {
    sub_10000D20C((uint64_t)&v113, &qword_100077240);
LABEL_9:
    sub_100007A28(v121);
    goto LABEL_10;
  }

  uint64_t v104 = 0LL;
  id v105 = 0LL;
  sub_10000CE58((uint64_t)&v113, (uint64_t)v106);
  uint64_t v19 = swift_allocObject(&unk_10006EC18, 112LL, 7LL);
  uint64_t v20 = v106[3];
  *(_OWORD *)(v19 + 48) = v106[2];
  *(_OWORD *)(v19 + 64) = v20;
  *(_OWORD *)(v19 + 80) = v106[4];
  uint64_t v21 = v107;
  uint64_t v22 = v106[1];
  *(_OWORD *)(v19 + swift_weakDestroy(v0 + 16) = v106[0];
  *(_OWORD *)(v19 + 3sub_100007A28(v0 + 2) = v22;
  *(void *)(v19 + 96) = v21;
  *(void *)(v19 + 104) = &v104;
  uint64_t v23 = swift_allocObject(&unk_10006EC40, 32LL, 7LL);
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = sub_10002C868;
  *(void *)(v23 + 24) = v19;
  uint64_t v111 = sub_100010FA0;
  *(void *)&v112[0] = v23;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  unint64_t v109 = sub_10003CE54;
  uint64_t v110 = &unk_10006EC58;
  uint64_t v24 = _Block_copy(&aBlock);
  uint64_t v25 = *(void *)&v112[0];
  swift_retain(v23);
  swift_release(v25);
  dispatch_sync(v18, v24);
  _Block_release(v24);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v23, "", 103LL, 45LL, 31LL, 1LL);
  swift_release(v23);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    goto LABEL_21;
  }
  uint64_t v28 = v104;
  uint64_t v27 = v105;
  swift_release(v19);
  sub_10000CE94((uint64_t)&v113);
  if (!v27) {
    goto LABEL_9;
  }
  uint64_t v29 = v122;
  __int128 v30 = v123;
  sub_1000087E0(v121, v122);
  __int128 v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v29, v30);
  uint64_t v33 = v32;
  unint64_t v34 = v122;
  __int128 v35 = v123;
  sub_1000087E0(v121, v122);
  __int128 v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 16))(v34, v35);
  __int128 v38 = v37;
  __int128 v39 = type metadata accessor for FMIPRequestCredential();
  uint64_t v19 = swift_allocObject(v39, 64LL, 7LL);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = v31;
  *(void *)(v19 + 24) = v33;
  *(void *)(v19 + 3sub_100007A28(v0 + 2) = v36;
  *(void *)(v19 + 40) = v38;
  *(void *)(v19 + 48) = v28;
  *(void *)(v19 + 56) = v27;
  sub_100007E2C((uint64_t)v125, (uint64_t)&v113);
  swift_retain(v19);
  uint64_t v24 = (void *)sub_10002AA70(&v113, v19);
  uint64_t v115 = (void *)v13;
  uint64_t v116 = (uint64_t (*)())&off_10006C918;
  *(void *)&unint64_t v113 = v24;
  uint64_t v40 = objc_allocWithZone((Class)type metadata accessor for HttpClient(0LL));
  swift_retain(v24);
  uint64_t v101 = (void *)HttpClient.init(endpoint:)(&v113);
  if (qword_100076B00 != -1) {
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v41 = qword_1000798C8;
    __int128 v42 = sub_100005394(&qword_100079660);
    uint64_t v43 = swift_allocObject(v42, 72LL, 7LL);
    *(_OWORD *)(v43 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
    *(void *)&unint64_t v113 = v24;
    swift_retain(v24);
    uint64_t v44 = String.init<A>(describing:)(&v113, v13);
    __int128 v46 = v45;
    *(void *)(v43 + 56) = &type metadata for String;
    __int128 v47 = sub_100005854();
    *(void *)(v43 + 64) = v47;
    *(void *)(v43 + 3sub_100007A28(v0 + 2) = v44;
    *(void *)(v43 + 40) = v46;
    uint64_t v48 = static os_log_type_t.default.getter(v47);
    os_log(_:dso:log:type:_:)("Created redirected endpoint %@", 30LL, 2LL, &_mh_execute_header, v41, v48, v43);
    swift_release(v19);
    swift_release(v24);
    swift_bridgeObjectRelease(v43);
    sub_100007A28(v121);
LABEL_11:
    uint64_t v59 = sub_100005394(&qword_100078398);
    swift_allocObject(v59, *(unsigned int *)(v59 + 48), *(unsigned __int16 *)(v59 + 52));
    uint64_t v13 = sub_100032D74();
    uint64_t v60 = swift_allocObject(&unk_10006EA60, 32LL, 7LL);
    *(void *)(v60 + swift_weakDestroy(v0 + 16) = a5;
    *(void *)(v60 + 24) = a6;
    uint64_t v61 = swift_allocObject(&unk_10006EA88, 32LL, 7LL);
    *(void *)(v61 + swift_weakDestroy(v0 + 16) = sub_10002C744;
    *(void *)(v61 + 24) = v60;
    v106[0] = xmmword_10005D640;
    *(void *)&__int128 aBlock = 0LL;
    LOBYTE(v121[0]) = 0;
    uint64_t v62 = *(dispatch_queue_s **)(v13 + 56);
    uint64_t v63 = (void *)swift_allocObject(&unk_10006EAB0, 64LL, 7LL);
    v63[2] = v106;
    void v63[3] = v13;
    v63[4] = &aBlock;
    v63[5] = v121;
    v63[6] = sub_10002C74C;
    v63[7] = v61;
    uint64_t v64 = swift_allocObject(&unk_10006EAD8, 32LL, 7LL);
    *(void *)(v64 + swift_weakDestroy(v0 + 16) = sub_100042510;
    *(void *)(v64 + 24) = v63;
    uint64_t v116 = sub_1000078F0;
    *(void *)&uint64_t v117 = v64;
    *(void *)&unint64_t v113 = _NSConcreteStackBlock;
    uint64_t v65 = v17[102];
    *((void *)&v113 + 1) = v65;
    __int128 v114 = sub_10003CE54;
    uint64_t v115 = &unk_10006EAF0;
    uint64_t v66 = _Block_copy(&v113);
    uint64_t v24 = (void *)v117;
    swift_retain_n(a6, 2LL);
    swift_retain_n(v60, 2LL);
    swift_retain(v13);
    swift_retain(v61);
    swift_retain(v64);
    swift_release(v24);
    dispatch_sync(v62, v66);
    _Block_release(v66);
    uint64_t v19 = swift_isEscapingClosureAtFileLocation(v64, "", 90LL, 149LL, 26LL, 1LL);
    swift_release(v64);
    if ((v19 & 1) == 0) {
      break;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    swift_once(&qword_100076B00, sub_100009AE4);
  }

  if (LOBYTE(v121[0]) == 1)
  {
    uint64_t v67 = *(void *)&v106[0];
    if (*(void *)&v106[0] != 1LL)
    {
      uint64_t v68 = aBlock;
      uint64_t v69 = *((void *)&v106[0] + 1);
      uint64_t v70 = sub_100005394(&qword_100079660);
      uint64_t v71 = swift_allocObject(v70, 72LL, 7LL);
      *(_OWORD *)(v71 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
      *(void *)&unint64_t v113 = v69;
      swift_errorRetain(v69);
      swift_errorRetain(v69);
      swift_bridgeObjectRetain(v67);
      swift_errorRetain(v69);
      swift_bridgeObjectRetain(v67);
      swift_errorRetain(v68);
      sub_1000241B0(v67, v69);
      __int128 v72 = sub_100005394(&qword_100077BD8);
      __int128 v73 = String.init<A>(describing:)(&v113, v72);
      __int128 v75 = v74;
      *(void *)(v71 + 56) = &type metadata for String;
      *(void *)(v71 + 64) = sub_100005854();
      *(void *)(v71 + 3sub_100007A28(v0 + 2) = v73;
      *(void *)(v71 + 40) = v75;
      __int128 v76 = sub_100005818();
      __int128 v77 = (void *)static OS_os_log.default.getter(v76);
      __int128 v78 = static os_log_type_t.default.getter(v77);
      os_log(_:dso:log:type:_:)( "Calling response handler's completion with error: %@.",  53LL,  2LL,  &_mh_execute_header,  v77,  v78,  v71);
      swift_bridgeObjectRelease(v71);

      a5(v67, v69);
      swift_errorRelease(v69);
      swift_bridgeObjectRelease_n(v67, 2LL);
      swift_errorRelease(v69);
      swift_errorRelease(v68);
      sub_10002C78C(v67, v69);
    }
  }

  uint64_t v79 = aBlock;
  swift_retain(v13);
  swift_errorRelease(v79);
  sub_10002C78C(*(uint64_t *)&v106[0], *((uint64_t *)&v106[0] + 1));
  swift_release(v13);
  swift_release(a6);
  swift_release_n(v60, 2LL);
  swift_release(v61);
  swift_release(v63);
  uint64_t v80 = swift_allocObject(&unk_10006EB28, 24LL, 7LL);
  *(void *)(v80 + swift_weakDestroy(v0 + 16) = v101;
  v106[0] = xmmword_10005D640;
  *(void *)&__int128 aBlock = 0LL;
  LOBYTE(v121[0]) = 0;
  uint64_t v81 = *(dispatch_queue_s **)(v13 + 56);
  unint64_t v82 = (void *)swift_allocObject(&unk_10006EB50, 64LL, 7LL);
  v82[2] = v106;
  v82[3] = v13;
  v82[4] = &aBlock;
  v82[5] = v121;
  v82[6] = sub_100042560;
  v82[7] = v80;
  uint64_t v83 = swift_allocObject(&unk_10006EB78, 32LL, 7LL);
  *(void *)(v83 + swift_weakDestroy(v0 + 16) = sub_100042510;
  *(void *)(v83 + 24) = v82;
  uint64_t v116 = sub_100010FA0;
  *(void *)&uint64_t v117 = v83;
  *(void *)&unint64_t v113 = _NSConcreteStackBlock;
  *((void *)&v113 + 1) = v65;
  __int128 v114 = sub_10003CE54;
  uint64_t v115 = &unk_10006EB90;
  uint64_t v84 = _Block_copy(&v113);
  uint64_t v24 = (void *)v117;
  unint64_t v17 = v101;
  swift_retain(v13);
  uint64_t v85 = v17;
  swift_retain(v80);
  swift_retain(v83);
  swift_release(v24);
  dispatch_sync(v81, v84);
  _Block_release(v84);
  uint64_t v19 = swift_isEscapingClosureAtFileLocation(v83, "", 90LL, 149LL, 26LL, 1LL);
  swift_release(v83);
  if ((v19 & 1) != 0) {
    goto LABEL_20;
  }
  if (LOBYTE(v121[0]) == 1)
  {
    uint64_t v86 = v106[0];
    uint64_t v87 = aBlock;
    uint64_t v88 = *(void (**)(uint64_t))((swift_isaMask & *v85) + 0xE8LL);
    sub_1000241B0(*(uint64_t *)&v106[0], *((uint64_t *)&v106[0] + 1));
    uint64_t v89 = swift_errorRetain(v87);
    v88(v89);
    swift_errorRelease(v87);
    sub_10002C78C(v86, *((uint64_t *)&v86 + 1));
  }

  uint64_t v90 = aBlock;
  swift_retain(v13);
  swift_errorRelease(v90);
  sub_10002C78C(*(uint64_t *)&v106[0], *((uint64_t *)&v106[0] + 1));
  swift_release(v13);

  swift_release(v80);
  swift_release(v82);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v100 + OBJC_IVAR____TtC20FMIPClientXPCService27ServerInteractionController_authenticationProvider);
  sub_100007E2C((uint64_t)v128, (uint64_t)&aBlock);
  sub_100007E2C((uint64_t)v129, (uint64_t)v112);
  sub_10000D1A4(v98, (uint64_t)v106, &qword_100077240);
  swift_unknownObjectWeakInit(&v113, v85);
  *((void *)&v113 + 1) = Strong;
  sub_100007A00(&aBlock, (uint64_t)&v114);
  sub_100007A00(v112, (uint64_t)&v118);
  sub_10000CE10((uint64_t)v106, (uint64_t)&v119);
  swift_weakInit(v120, v100);
  v120[1] = a7;
  uint64_t v92 = sub_10002FE10((uint64_t)a5, a6, v13);
  (*(void (**)(uint64_t (*)(), void))((swift_isaMask & *v85) + 0x98LL))(sub_100029CB4, 0LL);
  uint64_t v93 = swift_allocObject(&unk_10006EBC8, 24LL, 7LL);
  swift_weakInit(v93 + 16, v100);
  uint64_t v94 = (void *)swift_allocObject(&unk_10006EBF0, 40LL, 7LL);
  v94[2] = v93;
  v94[3] = v92;
  v94[4] = v13;
  swift_retain(v13);
  swift_retain(v93);
  uint64_t v96 = v92;
  v95(v124, sub_10002C820, v94);

  swift_release(v13);
  swift_release(v94);
  sub_10002C830((uint64_t)&v113);
  sub_100007A28(v124);
  sub_10000D20C((uint64_t)v128, &qword_1000783A0);
  swift_release(v93);
  sub_100007A28(v125);
  sub_100007A28(v130);
  return sub_100007A28(v131);
}

uint64_t sub_100041D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = sub_100005394(&qword_100077678);
  __chkstk_darwin(v14);
  uint64_t v15 = swift_allocObject(&unk_10006EA10, 32LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a6;
  *(void *)(v15 + 24) = a7;
  uint64_t v39 = v15;
  swift_retain(a7);
  uint64_t v16 = sub_100029EB4();
  uint64_t v37 = a2;
  uint64_t v43 = (ValueMetadata *)type metadata accessor for FMIPRequestCredential();
  uint64_t v44 = &off_10006A068;
  *(void *)&__int128 v42 = v16;
  sub_100007A00(&v42, (uint64_t)v45);
  sub_100007E2C((uint64_t)v45, (uint64_t)&v42);
  uint64_t v17 = type metadata accessor for VoiceAssistantSyncDeviceEndpoint(0LL);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  uint64_t v36 = sub_100027978(&v42);
  swift_retain(v36);
  swift_bridgeObjectRetain(a4);
  unint64_t v38 = sub_10003A018((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v19 = a3;
  *(void *)&__int128 v42 = a3;
  *((void *)&v42 + 1) = a4;
  uint64_t v20 = sub_100005394(&qword_100078850);
  uint64_t v21 = sub_1000424CC((unint64_t *)&qword_100078858, &qword_100078850);
  uint64_t v35 = ResponseSerializable.dictionaryValue.getter(v20, v21);
  swift_bridgeObjectRelease(a4);
  sub_100007E2C(a5 + 16, (uint64_t)&v42);
  uint64_t v22 = type metadata accessor for VoiceAssistantSyncDeviceRequestContent();
  uint64_t v23 = swift_allocObject(v22, 32LL, 7LL);
  unint64_t v24 = sub_10003A138((uint64_t)&_swiftEmptyArrayStorage);
  sub_100007E2C((uint64_t)&v42, (uint64_t)v41);
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = sub_10003A018((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v25 = (unint64_t *)(v23 + 16);
  *(void *)(v23 + 24) = v24;
  sub_100007E2C((uint64_t)v41, (uint64_t)v40);
  uint64_t v26 = sub_10001B81C(v40);
  uint64_t v28 = v27;
  sub_100007A28(v40);
  v40[0] = v26;
  v40[1] = v28;
  unint64_t v29 = sub_100008510();
  uint64_t v30 = ResponseSerializable.dictionaryValue.getter(&type metadata for UserAgentHeader, v29);
  swift_bridgeObjectRelease(v28);
  unint64_t v31 = sub_1000081A0(v30);
  swift_bridgeObjectRelease(v30);
  sub_100007A28(v41);
  if (v31)
  {
    swift_beginAccess(v23 + 16, v40, 1LL, 0LL);
    unint64_t v32 = *v25;
    *uint64_t v25 = v31;
    swift_bridgeObjectRelease(v32);
  }

  sub_100007A28(&v42);
  v41[0] = v23;
  uint64_t v43 = &type metadata for VAClientContextRequestContent;
  uint64_t v44 = &off_100070120;
  *(void *)&__int128 v42 = v38;
  *((void *)&v42 + 1) = v35;
  RequestContentRepresentable.merging(content:)(&v42, v22, &off_10006BB08);
  sub_100007A28(&v42);
  uint64_t v33 = v41[0];
  sub_100007E2C((uint64_t)v45, (uint64_t)&v42);
  unint64_t v34 = (void *)swift_allocObject(&unk_10006EA38, 96LL, 7LL);
  void v34[2] = a5;
  sub_100007A00(&v42, (uint64_t)(v34 + 3));
  char v34[8] = v19;
  v34[9] = a4;
  v34[10] = sub_100042474;
  v34[11] = v39;
  swift_bridgeObjectRetain(a4);
  swift_retain(v33);
  swift_retain(a5);
  swift_retain(v39);
  sub_100040D74(v36, v33, a1, v37, (void (*)(uint64_t, uint64_t))sub_1000424B8, (uint64_t)v34, a5);
  swift_release(v34);
  swift_release(v36);
  swift_release(v41[0]);
  sub_100007A28(v45);
  swift_release(v39);
  swift_release(v36);
  return swift_release(v33);
}

uint64_t sub_1000422C0(uint64_t a1)
{
  unint64_t v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v13 = a1;
    }
    else {
      uint64_t v13 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v4 = type metadata accessor for VoiceAssistantDeviceName(0LL);
  unint64_t v5 = sub_100042408();
  uint64_t result = Set.init(minimumCapacity:)(v3, v4, v5);
  uint64_t v15 = result;
  if (v2)
  {
    if (a1 < 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v8);
    uint64_t result = swift_bridgeObjectRelease(a1);
    if (!v7) {
      return v15;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return v15;
    }
  }

  if (v7 >= 1)
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; i != v7; ++i)
      {
        uint64_t v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        sub_10003515C((Swift::Int *)&v14, v10);
      }
    }

    else
    {
      unint64_t v11 = (void **)(a1 + 32);
      do
      {
        uint64_t v12 = *v11++;
        sub_10003515C((Swift::Int *)&v14, v12);

        --v7;
      }

      while (v7);
    }

    return v15;
  }

  __break(1u);
  return result;
}

unint64_t sub_100042408()
{
  unint64_t result = qword_100078BD0;
  if (!qword_100078BD0)
  {
    uint64_t v1 = type metadata accessor for VoiceAssistantDeviceName(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100078BD0);
  }

  return result;
}

uint64_t sub_100042450()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100042474(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10004247C()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_1000424B8(uint64_t a1, uint64_t a2)
{
  return sub_10004093C( a1,  a2,  *(void *)(v2 + 16),  (void *)(v2 + 24),  *(void *)(v2 + 64),  *(void *)(v2 + 72),  *(void (**)(char *, uint64_t))(v2 + 80));
}

uint64_t sub_1000424CC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_100005420(a2);
    uint64_t result = swift_getWitnessTable(&unk_10005C52C, v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100042514()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100042524(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100007A28(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100042534(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10004253C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100042560(uint64_t a1, uint64_t a2)
{
  return sub_10002973C(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_10004256C()
{
  return sub_10003458C( *(uint64_t **)(v0 + 16),  *(void *)(v0 + 24),  *(uint64_t **)(v0 + 32),  *(_BYTE **)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56));
}

uint64_t sub_10004257C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004258C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000425B0()
{
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000425E4()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  sub_100007A28((void *)(v0 + 64));
  return swift_deallocObject(v0, 112LL, 7LL);
}

uint64_t sub_100042628()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_100042638()
{
  unint64_t result = qword_100078BD8;
  if (!qword_100078BD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E130, &type metadata for VoiceAssistantResponseContent);
    atomic_store(result, (unint64_t *)&qword_100078BD8);
  }

  return result;
}

uint64_t destroy for VoiceAssistantResponseContent(uint64_t *a1)
{
  uint64_t result = a1[2];
  if (result)
  {
    uint64_t v3 = *a1;
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(v3);
  }

  return result;
}

uint64_t *_s20FMIPClientXPCService29VoiceAssistantResponseContentVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a2[2];
  if (v3)
  {
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    a1[2] = v3;
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v3);
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
  }

  return a1;
}

uint64_t *assignWithCopy for VoiceAssistantResponseContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2[2];
  if (a1[2])
  {
    if (v4)
    {
      uint64_t v5 = *a1;
      uint64_t v6 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRelease(v5);
      a1[1] = a2[1];
      uint64_t v7 = a2[2];
      uint64_t v8 = a1[2];
      a1[2] = v7;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRelease(v8);
    }

    else
    {
      sub_10003B8EC(a1);
      uint64_t v11 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v11;
    }
  }

  else if (v4)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1[1] = a2[1];
    uint64_t v10 = a2[2];
    a1[2] = v10;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
  }

  else
  {
    __int128 v12 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v12;
  }

  return a1;
}

__n128 initializeWithTake for VoiceAssistantSyncResponseContent(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for VoiceAssistantResponseContent(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (!v5)
  {
    sub_10003B8EC(a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = *(void *)(a2 + 16);
    return a1;
  }

  uint64_t v6 = *a1;
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(v6);
  a1[1] = *(void *)(a2 + 8);
  a1[2] = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for VoiceAssistantResponseContent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(vsub_100007A28(v0 + 3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VoiceAssistantResponseContent( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + swift_weakDestroy(v0 + 16) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for VoiceAssistantResponseContent()
{
  return &type metadata for VoiceAssistantResponseContent;
}

uint64_t destroy for VoiceAssistantSyncResponseContent(void *a1)
{
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *_s20FMIPClientXPCService33VoiceAssistantSyncResponseContentVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[2];
  a1[2] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for VoiceAssistantSyncResponseContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t *assignWithTake for VoiceAssistantSyncResponseContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a2[2];
  uint64_t v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for VoiceAssistantSyncResponseContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vsub_100007A28(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VoiceAssistantSyncResponseContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + swift_weakDestroy(v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for VoiceAssistantSyncResponseContent()
{
  return &type metadata for VoiceAssistantSyncResponseContent;
}

uint64_t sub_100042AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000095A0(a1, a2, a3, (uint64_t (*)(void))sub_10003BE80, (uint64_t (*)(void))sub_10003BEF0);
}

uint64_t sub_100042AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000095A0(a1, a2, a3, (uint64_t (*)(void))sub_100042AFC, (uint64_t (*)(void))sub_100042B40);
}

unint64_t sub_100042AFC()
{
  unint64_t result = qword_100078BE0;
  if (!qword_100078BE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E108, &type metadata for VoiceAssistantResponseContent);
    atomic_store(result, (unint64_t *)&qword_100078BE0);
  }

  return result;
}

unint64_t sub_100042B40()
{
  unint64_t result = qword_100078BE8;
  if (!qword_100078BE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E0E0, &type metadata for VoiceAssistantResponseContent);
    atomic_store(result, (unint64_t *)&qword_100078BE8);
  }

  return result;
}

void *sub_100042B84(void *a1)
{
  uint64_t v3 = sub_100005394(&qword_100078BF0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_1000087E0(a1, v7);
  unint64_t v10 = sub_100042CB0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for VoiceAssistantResponseContent.CodingKeys,  &type metadata for VoiceAssistantResponseContent.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    sub_100007A28(a1);
  }

  else
  {
    sub_10003BE80();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = v13;
    sub_100007A28(a1);
  }

  return v9;
}

unint64_t sub_100042CB0()
{
  unint64_t result = qword_100078BF8;
  if (!qword_100078BF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E3A8, &type metadata for VoiceAssistantResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078BF8);
  }

  return result;
}

uint64_t sub_100042CF4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x61746144636E7973LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61746144636E7973LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x726F68636E61LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726F68636E61LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_100042DDC(void *a1)
{
  uint64_t v3 = sub_100005394(&qword_100078C08);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_1000087E0(a1, v7);
  unint64_t v9 = sub_100042FC0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for VoiceAssistantSyncResponseContent.CodingKeys,  &type metadata for VoiceAssistantSyncResponseContent.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    sub_100007A28(a1);
  }

  else
  {
    sub_100005394(&qword_100078C18);
    HIBYTE(v1sub_100007A28(v0 + 3) = 0;
    sub_100043910( &qword_100078C20,  &qword_100078C18,  (void (*)(void))sub_100043004,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v14);
    uint64_t v7 = v14;
    BYTE6(v1sub_100007A28(v0 + 3) = 1;
    swift_bridgeObjectRetain(v14);
    KeyedDecodingContainer.decode(_:forKey:)((char *)&v13 + 6, v3);
    uint64_t v12 = v11;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain(v12);
    sub_100007A28(a1);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v7);
  }

  return v7;
}

unint64_t sub_100042FC0()
{
  unint64_t result = qword_100078C10;
  if (!qword_100078C10)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E358, &type metadata for VoiceAssistantSyncResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078C10);
  }

  return result;
}

unint64_t sub_100043004()
{
  unint64_t result = qword_100078C28;
  if (!qword_100078C28)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E330, &type metadata for VoiceAssistantSyncObjects);
    atomic_store(result, (unint64_t *)&qword_100078C28);
  }

  return result;
}

unint64_t sub_100043048()
{
  unint64_t result = qword_100078C40;
  if (!qword_100078C40)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E308, &type metadata for VoiceAssistantSyncObjects);
    atomic_store(result, (unint64_t *)&qword_100078C40);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for VoiceAssistantSyncResponseContent.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000430D8 + 4 * byte_10005DFF5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10004310C + 4 * asc_10005DFF0[v4]))();
}

uint64_t sub_10004310C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100043114(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10004311CLL);
  }
  return result;
}

uint64_t sub_100043128(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100043130LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100043134(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004313C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VoiceAssistantSyncResponseContent.CodingKeys()
{
  return &type metadata for VoiceAssistantSyncResponseContent.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for VoiceAssistantResponseContent.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100043198 + 4 * byte_10005DFFA[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000431B8 + 4 * byte_10005DFFF[v4]))();
  }
}

_BYTE *sub_100043198(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000431B8(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000431C0(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000431C8(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000431D0(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000431D8(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for VoiceAssistantResponseContent.CodingKeys()
{
  return &type metadata for VoiceAssistantResponseContent.CodingKeys;
}

uint64_t destroy for VoiceAssistantSyncObjects(void *a1)
{
  return swift_bridgeObjectRelease(a1[4]);
}

void *initializeWithCopy for VoiceAssistantSyncObjects(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for VoiceAssistantSyncObjects(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for VoiceAssistantSyncObjects(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 3sub_100007A28(v0 + 2) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  return result;
}

void *assignWithTake for VoiceAssistantSyncObjects(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  uint64_t v6 = a1[4];
  *(_OWORD *)(a1 + sub_100007A28(v0 + 3) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for VoiceAssistantSyncObjects(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vsub_100007A28(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VoiceAssistantSyncObjects(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for VoiceAssistantSyncObjects()
{
  return &type metadata for VoiceAssistantSyncObjects;
}

uint64_t sub_100043404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000095A0(a1, a2, a3, (uint64_t (*)(void))sub_100043004, (uint64_t (*)(void))sub_100043048);
}

unint64_t sub_10004341C()
{
  unint64_t result = qword_100078C48;
  if (!qword_100078C48)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E228, &type metadata for VoiceAssistantResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078C48);
  }

  return result;
}

unint64_t sub_100043464()
{
  unint64_t result = qword_100078C50;
  if (!qword_100078C50)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E2E0, &type metadata for VoiceAssistantSyncResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078C50);
  }

  return result;
}

unint64_t sub_1000434AC()
{
  unint64_t result = qword_100078C58;
  if (!qword_100078C58)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E250, &type metadata for VoiceAssistantSyncResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078C58);
  }

  return result;
}

unint64_t sub_1000434F4()
{
  unint64_t result = qword_100078C60;
  if (!qword_100078C60)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E278, &type metadata for VoiceAssistantSyncResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078C60);
  }

  return result;
}

unint64_t sub_10004353C()
{
  unint64_t result = qword_100078C68;
  if (!qword_100078C68)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E198, &type metadata for VoiceAssistantResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078C68);
  }

  return result;
}

unint64_t sub_100043584()
{
  unint64_t result = qword_100078C70;
  if (!qword_100078C70)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E1C0, &type metadata for VoiceAssistantResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078C70);
  }

  return result;
}

unint64_t sub_1000435C8(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100069510, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100043610@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100005394(&qword_100078C78);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000087E0(a1, v9);
  unint64_t v11 = sub_100043888();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for VoiceAssistantSyncObjects.CodingKeys,  &type metadata for VoiceAssistantSyncObjects.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100007A28(a1);
  }
  char v28 = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v5);
  uint64_t v14 = v13;
  uint64_t v24 = v12;
  char v27 = 1;
  swift_bridgeObjectRetain(v13);
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)(&v27, v5);
  uint64_t v17 = v16;
  uint64_t v22 = v15;
  uint64_t v18 = sub_100005394(&qword_100078C88);
  char v26 = 2;
  sub_100043910( &qword_100078C90,  &qword_100078C88,  (void (*)(void))sub_1000438CC,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  uint64_t v23 = v17;
  swift_bridgeObjectRetain(v17);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v25, v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v19 = v25;
  swift_bridgeObjectRetain(v25);
  sub_100007A28(a1);
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = v23;
  swift_bridgeObjectRelease(v23);
  uint64_t result = swift_bridgeObjectRelease(v14);
  *a2 = v24;
  a2[1] = v14;
  a2[2] = v22;
  a2[3] = v20;
  a2[4] = v19;
  return result;
}

unint64_t sub_100043888()
{
  unint64_t result = qword_100078C80;
  if (!qword_100078C80)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E4E8, &type metadata for VoiceAssistantSyncObjects.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078C80);
  }

  return result;
}

unint64_t sub_1000438CC()
{
  unint64_t result = qword_100078C98;
  if (!qword_100078C98)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E784, &type metadata for FMIPVoiceAssistantDeviceName);
    atomic_store(result, (unint64_t *)&qword_100078C98);
  }

  return result;
}

uint64_t sub_100043910(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v8 = sub_100005420(a2);
    a3();
    uint64_t result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100043974()
{
  unint64_t result = qword_100078CB0;
  if (!qword_100078CB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E75C, &type metadata for FMIPVoiceAssistantDeviceName);
    atomic_store(result, (unint64_t *)&qword_100078CB0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for VoiceAssistantSyncObjects.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100043A04 + 4 * byte_10005E009[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100043A38 + 4 * byte_10005E004[v4]))();
}

uint64_t sub_100043A38(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100043A40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100043A48LL);
  }
  return result;
}

uint64_t sub_100043A54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100043A5CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100043A60(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100043A68(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VoiceAssistantSyncObjects.CodingKeys()
{
  return &type metadata for VoiceAssistantSyncObjects.CodingKeys;
}

unint64_t sub_100043A88()
{
  unint64_t result = qword_100078CB8;
  if (!qword_100078CB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E4C0, &type metadata for VoiceAssistantSyncObjects.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078CB8);
  }

  return result;
}

unint64_t sub_100043AD0()
{
  unint64_t result = qword_100078CC0;
  if (!qword_100078CC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E3F8, &type metadata for VoiceAssistantSyncObjects.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078CC0);
  }

  return result;
}

unint64_t sub_100043B18()
{
  unint64_t result = qword_100078CC8;
  if (!qword_100078CC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E420, &type metadata for VoiceAssistantSyncObjects.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078CC8);
  }

  return result;
}

ValueMetadata *type metadata accessor for DeviceDiscoveryDeviceInput()
{
  return &type metadata for DeviceDiscoveryDeviceInput;
}

uint64_t sub_100043B84(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100005394(&qword_100078CF0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_1000087E0(a1, v8);
  unint64_t v10 = sub_100043E74();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for DeviceDiscoveryDeviceInput.CodingKeys,  &type metadata for DeviceDiscoveryDeviceInput.CodingKeys,  v10,  v8,  v9);
  uint64_t v13 = a2;
  sub_100005394(&qword_1000785F8);
  sub_100043EFC(&qword_100078CF8, (void (*)(void))sub_100043F64, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v13);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100043CA0(uint64_t a1)
{
  unint64_t v2 = sub_100043E74();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100043CC8(uint64_t a1)
{
  unint64_t v2 = sub_100043E74();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100043CF0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = sub_100043D30(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100043D18(void *a1)
{
  return sub_100043B84(a1, *v1);
}

void *sub_100043D30(void *a1)
{
  uint64_t v3 = sub_100005394(&qword_100078CD0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_1000087E0(a1, v7);
  unint64_t v10 = sub_100043E74();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for DeviceDiscoveryDeviceInput.CodingKeys,  &type metadata for DeviceDiscoveryDeviceInput.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    sub_100007A28(a1);
  }

  else
  {
    uint64_t v11 = sub_100005394(&qword_1000785F8);
    sub_100043EFC( &qword_100078CE0,  (void (*)(void))sub_100043EB8,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = v14;
    sub_100007A28(a1);
  }

  return v9;
}

unint64_t sub_100043E74()
{
  unint64_t result = qword_100078CD8;
  if (!qword_100078CD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E6A0, &type metadata for DeviceDiscoveryDeviceInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078CD8);
  }

  return result;
}

unint64_t sub_100043EB8()
{
  unint64_t result = qword_100078CE8;
  if (!qword_100078CE8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DeviceDiscoveryAutomationDevice,  &type metadata for DeviceDiscoveryAutomationDevice);
    atomic_store(result, (unint64_t *)&qword_100078CE8);
  }

  return result;
}

uint64_t sub_100043EFC(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_100005420(&qword_1000785F8);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100043F64()
{
  unint64_t result = qword_100078D00;
  if (!qword_100078D00)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DeviceDiscoveryAutomationDevice,  &type metadata for DeviceDiscoveryAutomationDevice);
    atomic_store(result, (unint64_t *)&qword_100078D00);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for DeviceDiscoveryDeviceInput.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100043FE8 + 4 * byte_10005E540[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100044008 + 4 * byte_10005E545[v4]))();
  }
}

_BYTE *sub_100043FE8(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100044008(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100044010(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100044018(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100044020(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100044028(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DeviceDiscoveryDeviceInput.CodingKeys()
{
  return &type metadata for DeviceDiscoveryDeviceInput.CodingKeys;
}

unint64_t sub_100044048()
{
  unint64_t result = qword_100078D08;
  if (!qword_100078D08)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E678, &type metadata for DeviceDiscoveryDeviceInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078D08);
  }

  return result;
}

unint64_t sub_100044090()
{
  unint64_t result = qword_100078D10;
  if (!qword_100078D10)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E5E8, &type metadata for DeviceDiscoveryDeviceInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078D10);
  }

  return result;
}

unint64_t sub_1000440D8()
{
  unint64_t result = qword_100078D18;
  if (!qword_100078D18)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E610, &type metadata for DeviceDiscoveryDeviceInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078D18);
  }

  return result;
}

ValueMetadata *type metadata accessor for FMIPVoiceAssistantDeviceName()
{
  return &type metadata for FMIPVoiceAssistantDeviceName;
}

uint64_t sub_10004412C()
{
  return 0x614E656369766564LL;
}

uint64_t sub_100044148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x614E656369766564LL && a2 == 0xEA0000000000656DLL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xEA0000000000656DLL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x614E656369766564LL, 0xEA0000000000656DLL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1000441E8(uint64_t a1)
{
  unint64_t v2 = sub_100044474();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100044210(uint64_t a1)
{
  unint64_t v2 = sub_100044474();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_100044238(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000438CC();
  unint64_t result = sub_100043974();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

uint64_t sub_100044264@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100005394(&qword_100078D20);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000087E0(a1, v9);
  unint64_t v11 = sub_100044474();
  uint64_t v12 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for FMIPVoiceAssistantDeviceName.CodingKeys,  &type metadata for FMIPVoiceAssistantDeviceName.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100007A28(a1);
  }
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  uint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_100007A28(a1);
  *a2 = v13;
  a2[1] = v15;
  return result;
}

uint64_t sub_100044388(void *a1)
{
  uint64_t v3 = sub_100005394(&qword_100078D30);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  uint64_t v8 = v1[1];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000087E0(a1, v9);
  unint64_t v11 = sub_100044474();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for FMIPVoiceAssistantDeviceName.CodingKeys,  &type metadata for FMIPVoiceAssistantDeviceName.CodingKeys,  v11,  v9,  v10);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, v12, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_100044474()
{
  unint64_t result = qword_100078D28;
  if (!qword_100078D28)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E870, &type metadata for FMIPVoiceAssistantDeviceName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078D28);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPVoiceAssistantDeviceName.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000444F8 + 4 * byte_10005E6F0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100044518 + 4 * byte_10005E6F5[v4]))();
  }
}

_BYTE *sub_1000444F8(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100044518(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100044520(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100044528(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100044530(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100044538(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FMIPVoiceAssistantDeviceName.CodingKeys()
{
  return &type metadata for FMIPVoiceAssistantDeviceName.CodingKeys;
}

unint64_t sub_100044558()
{
  unint64_t result = qword_100078D38;
  if (!qword_100078D38)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E848, &type metadata for FMIPVoiceAssistantDeviceName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078D38);
  }

  return result;
}

unint64_t sub_1000445A0()
{
  unint64_t result = qword_100078D40;
  if (!qword_100078D40)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E7B8, &type metadata for FMIPVoiceAssistantDeviceName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078D40);
  }

  return result;
}

unint64_t sub_1000445E8()
{
  unint64_t result = qword_100078D48;
  if (!qword_100078D48)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E7E0, &type metadata for FMIPVoiceAssistantDeviceName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100078D48);
  }

  return result;
}

uint64_t sub_10004462C(uint64_t a1, char a2)
{
  int v3 = v2;
  if (*(void *)(a1 + 24))
  {
    sub_100007A00((__int128 *)a1, (uint64_t)v16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    uint64_t v14 = *v2;
    *uint64_t v2 = 0x8000000000000000LL;
    sub_100048D74(v16, a2, isUniquelyReferenced_nonNull_native);
    uint64_t v6 = *v2;
    *uint64_t v2 = v14;
    return swift_bridgeObjectRelease(v6);
  }

  else
  {
    sub_10000D20C(a1, &qword_100078EA8);
    unint64_t v8 = sub_10004840C(a2);
    if ((v9 & 1) != 0)
    {
      unint64_t v10 = v8;
      char v11 = swift_isUniquelyReferenced_nonNull_native(*v2);
      uint64_t v12 = *v2;
      uint64_t v15 = *v3;
      uint64_t *v3 = 0x8000000000000000LL;
      if ((v11 & 1) == 0)
      {
        sub_1000492EC();
        uint64_t v12 = v15;
      }

      sub_100007A00((__int128 *)(*(void *)(v12 + 56) + 40 * v10), (uint64_t)v16);
      sub_100048A4C(v10, v12);
      uint64_t v13 = *v3;
      uint64_t *v3 = v12;
      swift_bridgeObjectRelease(v13);
    }

    else
    {
      uint64_t v17 = 0LL;
      memset(v16, 0, sizeof(v16));
    }

    return sub_10000D20C((uint64_t)v16, &qword_100078EA8);
  }

void *sub_100044744(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    if (a3 < 0) {
      uint64_t v7 = a3;
    }
    else {
      uint64_t v7 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v8 = __CocoaSet.makeIterator()(v7);
    uint64_t v9 = type metadata accessor for DeviceDiscoverySession(0LL);
    uint64_t v10 = sub_1000078F8(&qword_100078EA0, type metadata accessor for DeviceDiscoverySession, (uint64_t)&unk_10005D348);
    unint64_t result = Set.Iterator.init(_cocoa:)(v33, v8, v9, v10);
    uint64_t v5 = v33[0];
    uint64_t v31 = v33[1];
    uint64_t v12 = v33[2];
    int64_t v13 = v33[3];
    unint64_t v14 = v33[4];
  }

  else
  {
    uint64_t v15 = -1LL << *(_BYTE *)(a3 + 32);
    uint64_t v31 = a3 + 56;
    uint64_t v16 = ~v15;
    uint64_t v17 = -v15;
    if (v17 < 64) {
      uint64_t v18 = ~(-1LL << v17);
    }
    else {
      uint64_t v18 = -1LL;
    }
    unint64_t v14 = v18 & *(void *)(a3 + 56);
    unint64_t result = (void *)swift_bridgeObjectRetain(a3);
    uint64_t v12 = v16;
    int64_t v13 = 0LL;
  }

  int64_t v30 = (unint64_t)(v12 + 64) >> 6;
  if ((v5 & 0x8000000000000000LL) == 0) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v19 = __CocoaSet.Iterator.next()(result);
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v32 = v19;
    uint64_t v21 = type metadata accessor for DeviceDiscoverySession(0LL);
    swift_unknownObjectRetain(v20);
    swift_dynamicCast(&v34, &v32, (char *)&type metadata for Swift.AnyObject + 8, v21, 7LL);
    uint64_t v22 = v34;
    swift_unknownObjectRelease(v20);
    int64_t v23 = v13;
    uint64_t v24 = v14;
    while (v22)
    {
      uint64_t v34 = v22;
      a1(&v34);
      unint64_t result = (void *)swift_release(v22);
      if (v4)
      {
        uint64_t v29 = v5;
        return (void *)sub_1000085D0(v29);
      }

      int64_t v13 = v23;
      unint64_t v14 = v24;
      if (v5 < 0) {
        goto LABEL_11;
      }
LABEL_14:
      if (v14)
      {
        uint64_t v24 = (v14 - 1) & v14;
        unint64_t v25 = __clz(__rbit64(v14)) | (v13 << 6);
        int64_t v23 = v13;
      }

      else
      {
        int64_t v23 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
          __break(1u);
          return result;
        }

        if (v23 >= v30) {
          break;
        }
        unint64_t v26 = *(void *)(v31 + 8 * v23);
        if (!v26)
        {
          int64_t v27 = v13 + 2;
          if (v13 + 2 >= v30) {
            break;
          }
          unint64_t v26 = *(void *)(v31 + 8 * v27);
          if (v26) {
            goto LABEL_25;
          }
          int64_t v27 = v13 + 3;
          if (v13 + 3 >= v30) {
            break;
          }
          unint64_t v26 = *(void *)(v31 + 8 * v27);
          if (v26) {
            goto LABEL_25;
          }
          int64_t v27 = v13 + 4;
          if (v13 + 4 >= v30) {
            break;
          }
          unint64_t v26 = *(void *)(v31 + 8 * v27);
          if (v26)
          {
LABEL_25:
            int64_t v23 = v27;
          }

          else
          {
            int64_t v23 = v13 + 5;
            if (v13 + 5 >= v30) {
              break;
            }
            unint64_t v26 = *(void *)(v31 + 8 * v23);
            if (!v26)
            {
              int64_t v28 = v13 + 6;
              while (v30 != v28)
              {
                unint64_t v26 = *(void *)(v31 + 8 * v28++);
                if (v26)
                {
                  int64_t v23 = v28 - 1;
                  goto LABEL_26;
                }
              }

              break;
            }
          }
        }

void *sub_100044A3C()
{
  uint64_t v0 = type metadata accessor for DeviceDiscoveryFactory();
  uint64_t v1 = swift_allocObject(v0, 48LL, 7LL);
  unint64_t result = sub_100048194();
  qword_100079958 = v1;
  return result;
}

void sub_100044A74(char a1@<W0>, uint64_t *a2@<X8>, double a3@<D0>)
{
  uint64_t v6 = sub_100005394(&qword_100079660);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v8 = sub_100005854();
  *(void *)(v7 + 64) = v8;
  strcpy((char *)(v7 + 32), "discovery(_:)");
  *(_WORD *)(v7 + 46) = -4864;
  uint64_t v9 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v10 = (void *)static OS_os_log.default.getter(v9);
  uint64_t v11 = static os_log_type_t.default.getter(v10);
  os_log(_:dso:log:type:_:)("%{public}@", 10LL, 2LL, &_mh_execute_header, v10, v11, v7);
  swift_bridgeObjectRelease(v7);

  uint64_t v12 = type metadata accessor for DeviceDiscoverySession(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v13 = sub_100024604(a1, a3);
  uint64_t v14 = swift_allocObject(&unk_10006F7D8, 24LL, 7LL);
  swift_weakInit(v14 + 16, v13);
  uint64_t v15 = (uint64_t (**)())(v13 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_requestStartHandler);
  uint64_t v16 = *(void *)(v13 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_requestStartHandler);
  uint64_t v17 = *(void *)(v13 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_requestStartHandler + 8);
  char *v15 = sub_10004BFD0;
  v15[1] = (uint64_t (*)())v14;
  sub_10000787C(v16, v17);
  uint64_t v18 = swift_allocObject(&unk_10006F7D8, 24LL, 7LL);
  swift_weakInit(v18 + 16, v13);
  uint64_t v19 = (uint64_t (**)())(v13 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_requestStopHandler);
  uint64_t v20 = *(void *)(v13 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_requestStopHandler);
  uint64_t v21 = *(void *)(v13 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_requestStopHandler + 8);
  *uint64_t v19 = sub_10004BFF0;
  v19[1] = (uint64_t (*)())v18;
  sub_10000787C(v20, v21);
  uint64_t v22 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v22 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
  *(void *)(v22 + 56) = &type metadata for String;
  *(void *)(v22 + 64) = v8;
  strcpy((char *)(v22 + 32), "discovery(_:)");
  *(_WORD *)(v22 + 46) = -4864;
  int64_t v23 = (void *)static OS_os_log.default.getter(v22);
  uint64_t v24 = static os_log_type_t.default.getter(v23);
  os_log(_:dso:log:type:_:)("Generated DeviceDiscovery %@", 28LL, 2LL, &_mh_execute_header, v23, v24, v22);
  swift_bridgeObjectRelease(v22);

  a2[3] = v12;
  a2[4] = (uint64_t)&off_10006C568;
  *a2 = v13;
}

uint64_t sub_100044CE0(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    if (qword_100076B18 != -1) {
      swift_once(&qword_100076B18, sub_100044A3C);
    }
    a2(v5);
    return swift_release(v5);
  }

  return result;
}

uint64_t sub_100044D74@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  id v4 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v5 = [v4 isInternalBuild];

  if (v5
    && (uint64_t v6 = (void *)objc_opt_self(&OBJC_CLASS___FMPreferencesUtil),
        NSString v7 = String._bridgeToObjectiveC()(),
        NSString v8 = String._bridgeToObjectiveC()(),
        LODWORD(v6) = [v6 BOOLForKey:v7 inDomain:v8],
        v7,
        v8,
        (_DWORD)v6))
  {
    uint64_t v9 = sub_100005394(&qword_100079660);
    uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
    *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
    *(void *)(v10 + 56) = &type metadata for Bool;
    *(void *)(v10 + 64) = &protocol witness table for Bool;
    *(_BYTE *)(v10 + 3sub_100007A28(v0 + 2) = 1;
    uint64_t v11 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v12 = (void *)static OS_os_log.default.getter(v11);
    static os_log_type_t.default.getter(v12);
    os_log(_:dso:log:type:_:)("isDeviceDiscoveryAutomationActive %d", v17);
    swift_bridgeObjectRelease(v10);

    uint64_t v13 = type metadata accessor for DeviceDiscoveryAutomation();
    swift_allocObject(v13, 32LL, 7LL);
    uint64_t result = sub_10002ECA0();
    uint64_t v15 = &off_10006D578;
  }

  else
  {
    if (a1)
    {
      if (a1 != 1)
      {
        uint64_t v13 = type metadata accessor for RapportDiscovery();
        swift_allocObject(v13, 72LL, 7LL);
        uint64_t result = sub_100006E1C();
        uint64_t v15 = &off_100069680;
        goto LABEL_10;
      }

      uint64_t v13 = type metadata accessor for DeviceDiscovery();
      swift_allocObject(v13, 73LL, 7LL);
      int v16 = 1;
    }

    else
    {
      uint64_t v13 = type metadata accessor for DeviceDiscovery();
      swift_allocObject(v13, 73LL, 7LL);
      int v16 = 0;
    }

    uint64_t result = sub_10002584C(v16);
    uint64_t v15 = &off_10006C5F0;
  }

LABEL_10:
  a2[3] = v13;
  a2[4] = (uint64_t)v15;
  *a2 = result;
  return result;
}

uint64_t sub_100044FBC@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v65 = a2;
  uint64_t v4 = sub_100005394(&qword_100077418);
  __chkstk_darwin(v4);
  uint64_t v66 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(v2 + 24, v76, 0LL, 0LL);
  uint64_t v10 = *(void *)(v2 + 24);
  uint64_t v69 = v6;
  if ((v10 & 0xC000000000000001LL) != 0)
  {
    uint64_t v67 = 0LL;
    Swift::Int v11 = (Swift::Int)&_swiftEmptySetSingleton;
    uint64_t v71 = &_swiftEmptySetSingleton;
    if (v10 < 0) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = v10 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v10);
    uint64_t v13 = __CocoaSet.makeIterator()(v12);
    uint64_t v14 = __CocoaSet.Iterator.next()(v13);
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = type metadata accessor for DeviceDiscoverySession(0LL);
      do
      {
        v70[0] = v15;
        swift_dynamicCast(&v72, v70, (char *)&type metadata for Swift.AnyObject + 8, v16, 7LL);
        uint64_t v18 = v72;
        if (*(unsigned __int8 *)(v72 + 24) == a1)
        {
          uint64_t v19 = v71;
          unint64_t v20 = v71[2];
          if (v71[3] <= v20)
          {
            sub_1000366C0(v20 + 1);
            uint64_t v19 = v71;
          }

          Hasher.init(_seed:)(v70, v19[5]);
          uint64_t v21 = type metadata accessor for UUID(0LL);
          uint64_t v22 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          dispatch thunk of Hashable.hash(into:)(v70, v21, v22);
          Swift::Int v17 = Hasher._finalize()();
          int64_t v23 = v19 + 7;
          uint64_t v24 = -1LL << *((_BYTE *)v19 + 32);
          unint64_t v25 = v17 & ~v24;
          unint64_t v26 = v25 >> 6;
          if (((-1LL << v25) & ~v19[(v25 >> 6) + 7]) != 0)
          {
            unint64_t v27 = __clz(__rbit64((-1LL << v25) & ~v19[(v25 >> 6) + 7])) | v25 & 0x7FFFFFFFFFFFFFC0LL;
          }

          else
          {
            char v28 = 0;
            unint64_t v29 = (unint64_t)(63 - v24) >> 6;
            do
            {
              if (++v26 == v29 && (v28 & 1) != 0)
              {
                __break(1u);
                __break(1u);
                goto LABEL_53;
              }

              BOOL v30 = v26 == v29;
              if (v26 == v29) {
                unint64_t v26 = 0LL;
              }
              v28 |= v30;
              uint64_t v31 = v23[v26];
            }

            while (v31 == -1);
            unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
          }

          *(void *)((char *)v23 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v27;
          *(void *)(v19[6] + 8 * v27) = v18;
          ++v19[2];
        }

        else
        {
          Swift::Int v17 = swift_release(v72);
        }

        uint64_t v15 = __CocoaSet.Iterator.next()(v17);
      }

      while (v15);
      Swift::Int v11 = (Swift::Int)v71;
    }

    swift_release(v13);
    uint64_t v6 = v69;
    unint64_t v33 = v11 & 0xC000000000000001LL;
    if ((v11 & 0xC000000000000001LL) != 0)
    {
LABEL_28:
      uint64_t v34 = __CocoaSet.count.getter(v11);
      if (v34) {
        goto LABEL_29;
      }
LABEL_25:
      swift_release(v11);
      uint64_t v35 = _swiftEmptyArrayStorage;
      goto LABEL_46;
    }
  }

  else
  {
    uint64_t v32 = swift_bridgeObjectRetain(v10);
    Swift::Int v11 = sub_10004BC28(v32, a1);
    uint64_t v67 = 0LL;
    unint64_t v33 = v11 & 0xC000000000000001LL;
    if ((v11 & 0xC000000000000001LL) != 0) {
      goto LABEL_28;
    }
  }

  uint64_t v34 = *(void *)(v11 + 16);
  if (!v34) {
    goto LABEL_25;
  }
LABEL_29:
  __int128 v75 = _swiftEmptyArrayStorage;
  sub_100049500(0LL, v34 & ~(v34 >> 63), 0);
  if (v33)
  {
    uint64_t v36 = __CocoaSet.startIndex.getter(v11);
    char v38 = 1;
  }

  else
  {
    uint64_t v36 = sub_10004B7C4(v11);
    char v38 = v39 & 1;
  }

  uint64_t v72 = v36;
  uint64_t v73 = v37;
  char v74 = v38;
  if (v34 < 0)
  {
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }

  Swift::Int v68 = v11;
  do
  {
    while (1)
    {
      uint64_t v49 = sub_10004B510(v72, v73, v74, v11);
      uint64_t v50 = v49 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_discoveryStopDate;
      swift_beginAccess( v49 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_discoveryStopDate,  &v71,  0LL,  0LL);
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v50, v6);
      swift_release(v49);
      uint64_t v51 = v75;
      if ((swift_isUniquelyReferenced_nonNull_native(v75) & 1) == 0)
      {
        sub_100049500(0LL, v51[2] + 1LL, 1);
        uint64_t v51 = v75;
      }

      unint64_t v53 = v51[2];
      unint64_t v52 = v51[3];
      if (v53 >= v52 >> 1)
      {
        sub_100049500(v52 > 1, v53 + 1, 1);
        uint64_t v51 = v75;
      }

      v51[2] = v53 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))( (unint64_t)v51 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + *(void *)(v7 + 72) * v53,
        v9,
        v6);
      __int128 v75 = v51;
      if (v33) {
        break;
      }
      uint64_t v40 = v72;
      uint64_t v41 = v73;
      char v42 = v74;
      int64_t v43 = sub_10004B42C(v72, v73, v74, v11);
      uint64_t v45 = v44;
      char v47 = v46;
      sub_10004BFC4(v40, v41, v42);
      uint64_t v72 = v43;
      uint64_t v73 = v45;
      unint64_t v33 = 0LL;
      Swift::Int v11 = v68;
      char v48 = v47 & 1;
      uint64_t v6 = v69;
      char v74 = v48;
      if (!--v34) {
        goto LABEL_45;
      }
    }

    if ((v74 & 1) == 0) {
      goto LABEL_54;
    }
    uint64_t v54 = __CocoaSet.Index.handleBitPattern.getter(v72, v73);
    if (v54) {
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v54);
    }
    else {
      uint64_t isUniquelyReferenced_nonNull_native = 1LL;
    }
    uint64_t v56 = sub_100005394(&qword_100078EB8);
    uint64_t v57 = (void (*)(void *, void))Set.Index._asCocoa.modify(v70, v56);
    __CocoaSet.formIndex(after:isUnique:)(v58, isUniquelyReferenced_nonNull_native, v11);
    v57(v70, 0LL);
    --v34;
  }

  while (v34);
LABEL_45:
  sub_10004BFC4(v72, v73, v74);
  swift_release(v11);
  uint64_t v35 = v75;
LABEL_46:
  v70[0] = v35;
  swift_bridgeObjectRetain(v35);
  uint64_t v59 = v67;
  sub_100049DD0(v70);
  uint64_t v60 = (uint64_t)v66;
  if (v59)
  {
LABEL_55:
    uint64_t result = swift_release(v70[0]);
    __break(1u);
    return result;
  }

  swift_bridgeObjectRelease(v35);
  uint64_t v61 = v70[0];
  if (*(void *)(v70[0] + 16LL))
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16))( v60,  v70[0] + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)),  v6);
    uint64_t v62 = 0LL;
  }

  else
  {
    uint64_t v62 = 1LL;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v60, v62, 1LL, v6);
  swift_release(v61);
  uint64_t v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v60, 1LL, v6);
  if ((_DWORD)v63 != 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v65, v60, v6);
  }
  static Date.distantPast.getter(v63);
  return sub_10000D20C(v60, &qword_100077418);
}

uint64_t sub_100045610(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v21 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000079C8(0LL, (unint64_t *)&qword_100078760, &OBJC_CLASS___OS_dispatch_queue_ptr);
  Swift::Int v11 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v12 = swift_allocObject(&unk_10006F738, 32LL, 7LL);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = v1;
  *(double *)(v12 + 24) = a1;
  aBlock[4] = sub_10004BFA8;
  uint64_t v23 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  void aBlock[3] = &unk_10006F750;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = v23;
  swift_retain(v2);
  uint64_t v15 = swift_release(v14);
  static DispatchQoS.unspecified.getter(v15);
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v18 = sub_100007938(&qword_100076D58, (uint64_t *)&unk_100078740);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v17, v18, v4, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void sub_100045830(uint64_t a1, double a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void **)(a1 + 40);
  if (v8)
  {
    [v8 timeInterval];
    if (v9 <= a2) {
      return;
    }
  }

  else
  {
    uint64_t v19 = static Date.distantFuture.getter();
    double v20 = Date.timeIntervalSinceNow.getter(v19);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if (v20 <= a2) {
      return;
    }
  }

  uint64_t v10 = sub_100005394(&qword_100079660);
  uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
  *(void *)(v11 + 56) = &type metadata for Double;
  *(void *)(v11 + 64) = &protocol witness table for Double;
  *(double *)(v11 + 3sub_100007A28(v0 + 2) = a2;
  uint64_t v12 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v13 = (void *)static OS_os_log.default.getter(v12);
  static os_log_type_t.default.getter(v13);
  os_log(_:dso:log:type:_:)("Discovery timer scheduled %f.", aBlock[0]);
  swift_bridgeObjectRelease(v11);

  [*(id *)(a1 + 40) invalidate];
  uint64_t v14 = (void *)objc_opt_self(&OBJC_CLASS___NSTimer);
  uint64_t v15 = swift_allocObject(&unk_10006F580, 24LL, 7LL);
  swift_weakInit(v15 + 16, a1);
  *(void *)&aBlock[4] = sub_10004BFB4;
  uint64_t v22 = v15;
  *(void *)&aBlock[0] = _NSConcreteStackBlock;
  *(void *)&aBlock[1] = 1107296256LL;
  *(void *)&aBlock[2] = sub_100006800;
  *(void *)&void aBlock[3] = &unk_10006F778;
  uint64_t v16 = _Block_copy(aBlock);
  swift_release(v22);
  id v17 = [v14 scheduledTimerWithTimeInterval:0 repeats:v16 block:a2];
  _Block_release(v16);
  uint64_t v18 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v17;
}

uint64_t sub_100045A54(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v12 = (void *)static OS_os_log.default.getter(v11);
  uint64_t v13 = static os_log_type_t.default.getter(v12);
  os_log(_:dso:log:type:_:)("Discovery timer fired.", 22LL, 2LL, &_mh_execute_header, v12, v13, _swiftEmptyArrayStorage);

  swift_beginAccess(a2 + 16, v31, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a2 + 16);
  if (Strong)
  {
    uint64_t v15 = *(void **)(Strong + 40);
    *(void *)(Strong + 40) = 0LL;
    swift_release(Strong);
  }

  swift_beginAccess(a2 + 16, v30, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2 + 16);
  if (result)
  {
    uint64_t v17 = result;
    id v18 = *(id *)(result + 32);
    swift_release(v17);
    aBlock[4] = sub_10004BFBC;
    uint64_t v29 = a2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_10004DB74;
    void aBlock[3] = &unk_10006F7A0;
    uint64_t v19 = _Block_copy(aBlock);
    uint64_t v20 = swift_retain(a2);
    static DispatchQoS.unspecified.getter(v20);
    unint64_t v27 = _swiftEmptyArrayStorage;
    uint64_t v21 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v22 = sub_100005394((uint64_t *)&unk_100078740);
    uint64_t v26 = v7;
    uint64_t v23 = v4;
    uint64_t v24 = v22;
    uint64_t v25 = sub_100007938(&qword_100076D58, (uint64_t *)&unk_100078740);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v24, v25, v3, v21);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6, v19);
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v26);
    return swift_release(v29);
  }

  return result;
}

uint64_t sub_100045CE0(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    uint64_t v3 = result;
    sub_100045F6C();
    return swift_release(v3);
  }

  return result;
}

uint64_t sub_100045D34()
{
  uint64_t v1 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v2 = (void *)static OS_os_log.default.getter(v1);
  uint64_t v3 = static os_log_type_t.default.getter(v2);
  os_log(_:dso:log:type:_:)( "Stopping all discoveries. No active sessions.",  45LL,  2LL,  &_mh_execute_header,  v2,  v3,  _swiftEmptyArrayStorage);

  swift_beginAccess(v0 + 16, v23, 1LL, 0LL);
  uint64_t v4 = *(void *)(v0 + 16);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v5 = v4 + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(v4 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(v4 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(v4);
  int64_t v11 = 0LL;
  while (1)
  {
    if (v8)
    {
      unint64_t v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }

    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v16 >= v9) {
      goto LABEL_25;
    }
    unint64_t v17 = *(void *)(v5 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_25;
      }
      unint64_t v17 = *(void *)(v5 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_25;
        }
        unint64_t v17 = *(void *)(v5 + 8 * v11);
        if (!v17)
        {
          int64_t v11 = v16 + 3;
          if (v16 + 3 >= v9) {
            goto LABEL_25;
          }
          unint64_t v17 = *(void *)(v5 + 8 * v11);
          if (!v17)
          {
            int64_t v11 = v16 + 4;
            if (v16 + 4 >= v9) {
              goto LABEL_25;
            }
            unint64_t v17 = *(void *)(v5 + 8 * v11);
            if (!v17) {
              break;
            }
          }
        }
      }
    }

uint64_t sub_100045F6C()
{
  uint64_t v1 = v0;
  uint64_t v75 = type metadata accessor for Date(0LL);
  uint64_t v82 = *(void *)(v75 - 8);
  uint64_t v2 = __chkstk_darwin(v75);
  uint64_t v81 = (char *)v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v70 - v4;
  uint64_t v80 = sub_100005394(&qword_100079660);
  uint64_t v6 = swift_allocObject(v80, 72LL, 7LL);
  __int128 v79 = xmmword_10005B2C0;
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v78 = sub_100005854();
  *(void *)(v6 + 64) = v78;
  *(void *)(v6 + 3sub_100007A28(v0 + 2) = 0xD000000000000016LL;
  *(void *)(v6 + 40) = 0x8000000100058C20LL;
  uint64_t v77 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v7 = (void *)static OS_os_log.default.getter(v77);
  uint64_t v8 = static os_log_type_t.default.getter(v7);
  os_log(_:dso:log:type:_:)("%{public}@", 10LL, 2LL, &_mh_execute_header, v7, v8, v6);
  swift_bridgeObjectRelease(v6);

  swift_beginAccess(v1 + 24, v95, 0LL, 0LL);
  uint64_t v9 = *(void *)(v1 + 24);
  unint64_t v10 = v9 & 0xC000000000000001LL;
  if ((v9 & 0xC000000000000001LL) == 0)
  {
    uint64_t v20 = *(void *)(v9 + 16);
    uint64_t result = swift_bridgeObjectRetain(*(void *)(v1 + 24));
    if (v20) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t result = sub_100045D34();
    if (v10) {
      goto LABEL_7;
    }
LABEL_13:
    int64_t v18 = 0LL;
    uint64_t v21 = -1LL << *(_BYTE *)(v9 + 32);
    uint64_t v22 = *(void *)(v9 + 56);
    uint64_t v74 = v9 + 56;
    uint64_t v17 = ~v21;
    uint64_t v23 = -v21;
    if (v23 < 64) {
      uint64_t v24 = ~(-1LL << v23);
    }
    else {
      uint64_t v24 = -1LL;
    }
    unint64_t v19 = v24 & v22;
    goto LABEL_17;
  }

  if (v9 < 0) {
    uint64_t v11 = *(void *)(v1 + 24);
  }
  else {
    uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*(void *)(v1 + 24));
  uint64_t result = __CocoaSet.count.getter(v11);
  if (!result) {
    goto LABEL_12;
  }
LABEL_6:
  if (!v10) {
    goto LABEL_13;
  }
LABEL_7:
  if (v9 < 0) {
    uint64_t v13 = v9;
  }
  else {
    uint64_t v13 = v9 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t v14 = __CocoaSet.makeIterator()(v13);
  uint64_t v15 = type metadata accessor for DeviceDiscoverySession(0LL);
  uint64_t v16 = sub_1000078F8(&qword_100078EA0, type metadata accessor for DeviceDiscoverySession, (uint64_t)&unk_10005D348);
  uint64_t result = (uint64_t)Set.Iterator.init(_cocoa:)(v96, v14, v15, v16);
  uint64_t v9 = v96[0];
  uint64_t v74 = v96[1];
  uint64_t v17 = v96[2];
  int64_t v18 = v96[3];
  unint64_t v19 = v96[4];
LABEL_17:
  uint64_t v25 = 0LL;
  uint64_t v72 = v9 & 0x7FFFFFFFFFFFFFFFLL;
  v70[1] = v17;
  int64_t v73 = (unint64_t)(v17 + 64) >> 6;
  uint64_t v83 = v1 + 16;
  uint64_t v71 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v26 = v75;
  uint64_t v76 = v9;
  while (1)
  {
    if (v9 < 0)
    {
      uint64_t v32 = __CocoaSet.Iterator.next()(result);
      if (!v32) {
        return sub_1000085D0(v9);
      }
      uint64_t v33 = v32;
      *(void *)&__int128 v88 = v32;
      uint64_t v34 = type metadata accessor for DeviceDiscoverySession(0LL);
      swift_unknownObjectRetain(v33);
      swift_dynamicCast(&v92, &v88, v71, v34, 7LL);
      uint64_t v35 = v33;
      uint64_t v36 = v92;
      swift_unknownObjectRelease(v35);
      int64_t v31 = v18;
      uint64_t v29 = v19;
      if (!v36) {
        return sub_1000085D0(v9);
      }
    }

    else
    {
      if (v19)
      {
        uint64_t v29 = (v19 - 1) & v19;
        unint64_t v30 = __clz(__rbit64(v19)) | (v18 << 6);
        int64_t v31 = v18;
      }

      else
      {
        int64_t v31 = v18 + 1;
        if (__OFADD__(v18, 1LL)) {
          goto LABEL_59;
        }
        if (v31 >= v73) {
          return sub_1000085D0(v9);
        }
        unint64_t v37 = *(void *)(v74 + 8 * v31);
        if (!v37)
        {
          int64_t v38 = v18 + 2;
          if (v18 + 2 >= v73) {
            return sub_1000085D0(v9);
          }
          unint64_t v37 = *(void *)(v74 + 8 * v38);
          if (v37) {
            goto LABEL_33;
          }
          int64_t v38 = v18 + 3;
          if (v18 + 3 >= v73) {
            return sub_1000085D0(v9);
          }
          unint64_t v37 = *(void *)(v74 + 8 * v38);
          if (v37)
          {
LABEL_33:
            int64_t v31 = v38;
          }

          else
          {
            int64_t v31 = v18 + 4;
            if (v18 + 4 >= v73) {
              return sub_1000085D0(v9);
            }
            unint64_t v37 = *(void *)(v74 + 8 * v31);
            if (!v37)
            {
              int64_t v69 = v18 + 5;
              while (v73 != v69)
              {
                unint64_t v37 = *(void *)(v74 + 8 * v69++);
                if (v37)
                {
                  int64_t v31 = v69 - 1;
                  goto LABEL_34;
                }
              }

              return sub_1000085D0(v9);
            }
          }
        }

LABEL_34:
        uint64_t v29 = (v37 - 1) & v37;
        unint64_t v30 = __clz(__rbit64(v37)) + (v31 << 6);
      }

      uint64_t v36 = *(void *)(*(void *)(v9 + 48) + 8 * v30);
      swift_retain(v36);
      if (!v36) {
        return sub_1000085D0(v9);
      }
    }

    uint64_t v39 = *(void *)(v36 + 16);
    uint64_t v86 = v36;
    char v40 = *(_BYTE *)(v36 + 24);
    sub_100044FBC(v40, (uint64_t)v5);
    uint64_t v41 = swift_beginAccess(v83, v91, 0LL, 0LL);
    uint64_t v42 = *(void *)(v1 + 16);
    __chkstk_darwin(v41);
    LOBYTE(v70[-2]) = v40;
    uint64_t v43 = swift_bridgeObjectRetain(v42);
    uint64_t v44 = sub_10004BA0C(v43, (uint64_t (*)(uint64_t, void *))sub_100049B10, (uint64_t)&v70[-4]);
    swift_bridgeObjectRelease(v42);
    uint64_t result = sub_10004B390(v44);
    if ((v46 & 1) != 0) {
      goto LABEL_60;
    }
    if (*(_DWORD *)(v44 + 36) != v45) {
      break;
    }
    uint64_t v47 = 1LL << *(_BYTE *)(v44 + 32);
    if (result == v47)
    {
      uint64_t v90 = 0LL;
      __int128 v89 = 0u;
      __int128 v88 = 0u;
    }

    else
    {
      if (result < 0 || result >= v47) {
        goto LABEL_57;
      }
      sub_100007E2C(*(void *)(v44 + 56) + 40 * result, (uint64_t)&v88);
    }

    uint64_t v85 = v25;
    swift_release(v44);
    unint64_t v84 = v29;
    int64_t v48 = v31;
    if (*((void *)&v89 + 1))
    {
      uint64_t v49 = sub_100007A00(&v88, (uint64_t)&v92);
    }

    else
    {
      sub_10000D20C((uint64_t)&v88, &qword_100078EA8);
      sub_100044D74(v40, &v92);
      sub_100007E2C((uint64_t)&v92, (uint64_t)&v88);
      swift_beginAccess(v83, v87, 33LL, 0LL);
      sub_10004462C((uint64_t)&v88, v40);
      uint64_t v49 = swift_endAccess(v87);
    }

    uint64_t v50 = v81;
    Date.init()(v49);
    uint64_t v51 = v5;
    char v52 = static Date.> infix(_:_:)(v5, v50);
    unint64_t v53 = *(void (**)(char *, uint64_t))(v82 + 8);
    v53(v50, v26);
    uint64_t v54 = swift_allocObject(v80, 72LL, 7LL);
    *(_OWORD *)(v54 + swift_weakDestroy(v0 + 16) = v79;
    uint64_t v55 = Date.description.getter();
    unint64_t v56 = v78;
    *(void *)(v54 + 56) = &type metadata for String;
    *(void *)(v54 + 64) = v56;
    *(void *)(v54 + 3sub_100007A28(v0 + 2) = v55;
    *(void *)(v54 + 40) = v57;
    uint64_t v58 = (void *)static OS_os_log.default.getter(v55);
    uint64_t v59 = static os_log_type_t.default.getter(v58);
    if ((v52 & 1) != 0)
    {
      os_log(_:dso:log:type:_:)( "Starting discovery - expected stop is %@",  40LL,  2LL,  &_mh_execute_header,  v58,  v59,  v54);
      swift_bridgeObjectRelease(v54);

      uint64_t v60 = v93;
      uint64_t v61 = v94;
      sub_1000087E0(&v92, v93);
      uint64_t v62 = v1;
      uint64_t v63 = swift_allocObject(&unk_10006F648, 33LL, 7LL);
      *(void *)(v63 + swift_weakDestroy(v0 + 16) = v62;
      *(void *)(v63 + 24) = v39;
      *(_BYTE *)(v63 + 3sub_100007A28(v0 + 2) = v40;
      uint64_t v64 = swift_allocObject(&unk_10006F670, 33LL, 7LL);
      *(void *)(v64 + swift_weakDestroy(v0 + 16) = v62;
      *(void *)(v64 + 24) = v39;
      *(_BYTE *)(v64 + 3sub_100007A28(v0 + 2) = v40;
      uint64_t v65 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v61 + 16);
      swift_retain_n(v62, 2LL);
      v65(sub_10004BBA0, v63, sub_10004BBB0, v64, v60, v61);
      uint64_t v66 = v63;
      uint64_t v1 = v62;
      uint64_t v26 = v75;
      swift_release(v66);
      uint64_t v67 = swift_release(v64);
      double v68 = Date.timeIntervalSinceNow.getter(v67);
      sub_100045610(v68);
    }

    else
    {
      os_log(_:dso:log:type:_:)( "Stopping discovery - expected stop was %@",  41LL,  2LL,  &_mh_execute_header,  v58,  v59,  v54);
      swift_bridgeObjectRelease(v54);

      uint64_t v27 = v93;
      uint64_t v28 = v94;
      sub_1000087E0(&v92, v93);
      (*(void (**)(uint64_t, uint64_t))(v28 + 24))(v27, v28);
    }

    uint64_t v5 = v51;
    swift_release(v86);
    v53(v51, v26);
    uint64_t result = sub_100007A28(&v92);
    int64_t v18 = v48;
    unint64_t v19 = v84;
    uint64_t v9 = v76;
    uint64_t v25 = v85;
  }

  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
  return result;
}

uint64_t sub_1000467C4(uint64_t a1, uint64_t a2, char a3, double a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v25 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = *(void *)(a2 + 32);
  uint64_t v15 = swift_allocObject(&unk_10006F580, 24LL, 7LL);
  swift_weakInit(v15 + 16, a2);
  sub_100007E2C(a1, (uint64_t)v29);
  uint64_t v16 = swift_allocObject(&unk_10006F6E8, 80LL, 7LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = v15;
  *(double *)(v16 + 24) = a4;
  *(_BYTE *)(v16 + 3sub_100007A28(v0 + 2) = a3;
  sub_100007A00(v29, v16 + 40);
  aBlock[4] = sub_10004BF40;
  uint64_t v28 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  void aBlock[3] = &unk_10006F700;
  uint64_t v17 = _Block_copy(aBlock);
  uint64_t v18 = swift_retain(v15);
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v20 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v21 = sub_100007938(&qword_100076D58, (uint64_t *)&unk_100078740);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v20, v21, v8, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v10, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v22 = v28;
  swift_release(v15);
  return swift_release(v22);
}

Swift::Int sub_100046A18(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v36, 0LL, 0LL);
  Swift::Int result = swift_weakLoadStrong(v5);
  if (result)
  {
    Swift::Int v7 = result;
    swift_beginAccess(result + 24, v35, 0LL, 0LL);
    uint64_t v8 = *(void *)(v7 + 24);
    swift_bridgeObjectRetain(v8);
    swift_release(v7);
    if ((v8 & 0xC000000000000001LL) != 0)
    {
      uint64_t v9 = &_swiftEmptySetSingleton;
      uint64_t v34 = &_swiftEmptySetSingleton;
      if (v8 < 0) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = v8 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v11 = __CocoaSet.makeIterator()(v10);
      uint64_t v12 = __CocoaSet.Iterator.next()(v11);
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v31 = a3;
        uint64_t v14 = type metadata accessor for DeviceDiscoverySession(0LL);
        do
        {
          v32[0] = v13;
          swift_dynamicCast(&v33, v32, (char *)&type metadata for Swift.AnyObject + 8, v14, 7LL);
          uint64_t v15 = v33;
          if (*(unsigned __int8 *)(v33 + 24) == a2)
          {
            uint64_t v16 = v34;
            unint64_t v17 = v34[2];
            if (v34[3] <= v17)
            {
              sub_1000366C0(v17 + 1);
              uint64_t v16 = v34;
            }

            Hasher.init(_seed:)(v32, v16[5]);
            uint64_t v18 = type metadata accessor for UUID(0LL);
            uint64_t v19 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            dispatch thunk of Hashable.hash(into:)(v32, v18, v19);
            Swift::Int result = Hasher._finalize()();
            uint64_t v20 = v16 + 7;
            uint64_t v21 = -1LL << *((_BYTE *)v16 + 32);
            unint64_t v22 = result & ~v21;
            unint64_t v23 = v22 >> 6;
            if (((-1LL << v22) & ~v16[(v22 >> 6) + 7]) != 0)
            {
              unint64_t v24 = __clz(__rbit64((-1LL << v22) & ~v16[(v22 >> 6) + 7])) | v22 & 0x7FFFFFFFFFFFFFC0LL;
            }

            else
            {
              char v25 = 0;
              unint64_t v26 = (unint64_t)(63 - v21) >> 6;
              do
              {
                if (++v23 == v26 && (v25 & 1) != 0)
                {
                  __break(1u);
                  return result;
                }

                BOOL v27 = v23 == v26;
                if (v23 == v26) {
                  unint64_t v23 = 0LL;
                }
                v25 |= v27;
                uint64_t v28 = v20[v23];
              }

              while (v28 == -1);
              unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
            }

            *(void *)((char *)v20 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
            *(void *)(v16[6] + 8 * v24) = v15;
            ++v16[2];
          }

          else
          {
            Swift::Int result = swift_release(v33);
          }

          uint64_t v13 = __CocoaSet.Iterator.next()(result);
        }

        while (v13);
        uint64_t v9 = v34;
        a3 = v31;
      }

      Swift::Int v29 = swift_release(v11);
    }

    else
    {
      Swift::Int v29 = sub_10004BC28(v8, a2);
      uint64_t v9 = (void *)v29;
    }

    __chkstk_darwin(v29);
    v30[2] = a3;
    sub_100044744((void (*)(uint64_t *))sub_10004BF54, (uint64_t)v30, (uint64_t)v9);
    return swift_release(v9);
  }

  return result;
}

uint64_t sub_100046CF8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v27 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = *(void *)(a3 + 32);
  uint64_t v17 = swift_allocObject(&unk_10006F580, 24LL, 7LL);
  swift_weakInit(v17 + 16, a3);
  sub_100007E2C(a1, (uint64_t)v31);
  uint64_t v18 = swift_allocObject(&unk_10006F698, 88LL, 7LL);
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = v17;
  *(double *)(v18 + 24) = a5;
  *(_BYTE *)(v18 + 3sub_100007A28(v0 + 2) = a4;
  sub_100007A00(v31, v18 + 40);
  *(void *)(v18 + 80) = a2;
  aBlock[4] = sub_10004BBF4;
  uint64_t v30 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  void aBlock[3] = &unk_10006F6B0;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain(v17);
  uint64_t v20 = swift_errorRetain(a2);
  static DispatchQoS.unspecified.getter(v20);
  uint64_t v28 = _swiftEmptyArrayStorage;
  uint64_t v21 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v22 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v23 = sub_100007938(&qword_100076D58, (uint64_t *)&unk_100078740);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v22, v23, v10, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v16, v12, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v24 = v30;
  swift_release(v17);
  return swift_release(v24);
}

Swift::Int sub_100046F58(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v41, 0LL, 0LL);
  Swift::Int result = swift_weakLoadStrong(v7);
  if (result)
  {
    Swift::Int v9 = result;
    swift_beginAccess(result + 16, v40, 33LL, 0LL);
    sub_100047284(a2, (uint64_t)v37);
    sub_10000D20C((uint64_t)v37, &qword_100078EA8);
    swift_endAccess(v40);
    swift_beginAccess(v9 + 24, v40, 0LL, 0LL);
    uint64_t v10 = *(void *)(v9 + 24);
    if ((v10 & 0xC000000000000001LL) != 0)
    {
      uint64_t v11 = &_swiftEmptySetSingleton;
      uint64_t v39 = &_swiftEmptySetSingleton;
      if (v10 < 0) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = v10 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v10);
      uint64_t v13 = __CocoaSet.makeIterator()(v12);
      uint64_t v14 = __CocoaSet.Iterator.next()(v13);
      if (v14)
      {
        uint64_t v15 = v14;
        Swift::Int v34 = v9;
        uint64_t v35 = a3;
        uint64_t v36 = a4;
        uint64_t v16 = type metadata accessor for DeviceDiscoverySession(0LL);
        do
        {
          v37[0] = v15;
          swift_dynamicCast(&v38, v37, (char *)&type metadata for Swift.AnyObject + 8, v16, 7LL);
          uint64_t v17 = v38;
          if (*(unsigned __int8 *)(v38 + 24) == a2)
          {
            uint64_t v18 = v39;
            unint64_t v19 = v39[2];
            if (v39[3] <= v19)
            {
              sub_1000366C0(v19 + 1);
              uint64_t v18 = v39;
            }

            Hasher.init(_seed:)(v37, v18[5]);
            uint64_t v20 = type metadata accessor for UUID(0LL);
            uint64_t v21 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            dispatch thunk of Hashable.hash(into:)(v37, v20, v21);
            Swift::Int result = Hasher._finalize()();
            uint64_t v22 = v18 + 7;
            uint64_t v23 = -1LL << *((_BYTE *)v18 + 32);
            unint64_t v24 = result & ~v23;
            unint64_t v25 = v24 >> 6;
            if (((-1LL << v24) & ~v18[(v24 >> 6) + 7]) != 0)
            {
              unint64_t v26 = __clz(__rbit64((-1LL << v24) & ~v18[(v24 >> 6) + 7])) | v24 & 0x7FFFFFFFFFFFFFC0LL;
            }

            else
            {
              char v27 = 0;
              unint64_t v28 = (unint64_t)(63 - v23) >> 6;
              do
              {
                if (++v25 == v28 && (v27 & 1) != 0)
                {
                  __break(1u);
                  return result;
                }

                BOOL v29 = v25 == v28;
                if (v25 == v28) {
                  unint64_t v25 = 0LL;
                }
                v27 |= v29;
                uint64_t v30 = v22[v25];
              }

              while (v30 == -1);
              unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
            }

            *(void *)((char *)v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v26;
            *(void *)(v18[6] + 8 * v26) = v17;
            ++v18[2];
          }

          else
          {
            Swift::Int result = swift_release(v38);
          }

          uint64_t v15 = __CocoaSet.Iterator.next()(result);
        }

        while (v15);
        uint64_t v11 = v39;
        a3 = v35;
        a4 = v36;
        Swift::Int v9 = v34;
      }

      Swift::Int v32 = swift_release(v13);
    }

    else
    {
      uint64_t v31 = swift_bridgeObjectRetain(v10);
      Swift::Int v32 = sub_10004BC28(v31, a2);
      uint64_t v11 = (void *)v32;
    }

    __chkstk_darwin(v32);
    _OWORD v33[2] = a3;
    _BYTE v33[3] = a4;
    v33[4] = v9;
    sub_100044744((void (*)(uint64_t *))sub_10004BC0C, (uint64_t)v33, (uint64_t)v11);
    swift_release(v11);
    return swift_release(v9);
  }

  return result;
}

double sub_100047284@<D0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  unint64_t v5 = sub_10004840C(a1);
  if ((v6 & 1) != 0)
  {
    unint64_t v7 = v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    uint64_t v9 = *v2;
    uint64_t v12 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000492EC();
      uint64_t v9 = v12;
    }

    sub_100007A00((__int128 *)(*(void *)(v9 + 56) + 40 * v7), a2);
    sub_100048A4C(v7, v9);
    uint64_t v10 = *v3;
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease(v10);
  }

  else
  {
    *(void *)(a2 + 3sub_100007A28(v0 + 2) = 0LL;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = 0u;
  }

  return result;
}

uint64_t sub_100047338(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  sub_100024984(a2, a3);
  swift_beginAccess(a4 + 24, v8, 33LL, 0LL);
  uint64_t v6 = sub_100038398(v5);
  swift_endAccess(v8);
  return swift_release(v6);
}

uint64_t sub_1000473B4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v20 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v19[1] = *(void *)(v1 + 32);
  uint64_t v10 = swift_allocObject(&unk_10006F580, 24LL, 7LL);
  swift_weakInit(v10 + 16, v1);
  uint64_t v11 = swift_allocObject(&unk_10006F5F8, 32LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v10;
  *(void *)(v11 + 24) = a1;
  aBlock[4] = sub_100049B08;
  uint64_t v23 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  void aBlock[3] = &unk_10006F610;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain(v10);
  uint64_t v13 = swift_retain(a1);
  static DispatchQoS.unspecified.getter(v13);
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v16 = sub_100007938(&qword_100076D58, (uint64_t *)&unk_100078740);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v15, v16, v3, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v5, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v17 = v23;
  swift_release(v10);
  return swift_release(v17);
}

uint64_t sub_1000475DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v70, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  uint64_t v50 = v3;
  uint64_t v60 = sub_100005394(&qword_100079660);
  uint64_t v6 = swift_allocObject(v60, 72LL, 7LL);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
  *(void *)&v68[0] = a2;
  uint64_t v7 = type metadata accessor for DeviceDiscoverySession(0LL);
  swift_retain(a2);
  uint64_t v8 = String.init<A>(describing:)(v68, v7);
  uint64_t v10 = v9;
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v11 = sub_100005854();
  *(void *)(v6 + 64) = v11;
  *(void *)(v6 + 3sub_100007A28(v0 + 2) = v8;
  *(void *)(v6 + 40) = v10;
  uint64_t v59 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v12 = (void *)static OS_os_log.default.getter(v59);
  uint64_t v13 = static os_log_type_t.default.getter(v12);
  os_log(_:dso:log:type:_:)("Did request start discovery %@", 30LL, 2LL, &_mh_execute_header, v12, v13, v6);
  swift_bridgeObjectRelease(v6);

  swift_beginAccess(v5 + 24, v68, 33LL, 0LL);
  swift_retain(a2);
  sub_10003541C(v65, a2);
  swift_endAccess(v68);
  swift_release(v65[0]);
  swift_beginAccess(v5 + 16, v69, 0LL, 0LL);
  uint64_t v14 = *(void *)(v5 + 16);
  uint64_t v51 = v5;
  uint64_t v52 = v14 + 64;
  uint64_t v15 = 1LL << *(_BYTE *)(v14 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & *(void *)(v14 + 64);
  uint64_t v18 = a2 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_deviceDiscoveredHandler;
  int64_t v54 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v55 = *(void *)(v5 + 16);
  uint64_t result = swift_bridgeObjectRetain(v14);
  int64_t v19 = 0LL;
  uint64_t v53 = a2;
  while (1)
  {
    if (v17)
    {
      unint64_t v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v21 = v20 | (v19 << 6);
      goto LABEL_25;
    }

    int64_t v22 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
      __break(1u);
LABEL_36:
      __break(1u);
      return result;
    }

    if (v22 >= v54) {
      goto LABEL_31;
    }
    unint64_t v23 = *(void *)(v52 + 8 * v22);
    ++v19;
    if (!v23)
    {
      int64_t v19 = v22 + 1;
      if (v22 + 1 >= v54) {
        goto LABEL_31;
      }
      unint64_t v23 = *(void *)(v52 + 8 * v19);
      if (!v23)
      {
        int64_t v19 = v22 + 2;
        if (v22 + 2 >= v54) {
          goto LABEL_31;
        }
        unint64_t v23 = *(void *)(v52 + 8 * v19);
        if (!v23)
        {
          int64_t v19 = v22 + 3;
          if (v22 + 3 >= v54) {
            goto LABEL_31;
          }
          unint64_t v23 = *(void *)(v52 + 8 * v19);
          if (!v23) {
            break;
          }
        }
      }
    }

LABEL_31:
  swift_release(v55);
  swift_beginAccess(v50, v68, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v50);
  if (Strong)
  {
    uint64_t v49 = Strong;
    sub_100045F6C();
    swift_release(v49);
  }

  return swift_release(v51);
}

uint64_t sub_100047B78(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v20 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v19[1] = *(void *)(v1 + 32);
  uint64_t v10 = swift_allocObject(&unk_10006F580, 24LL, 7LL);
  swift_weakInit(v10 + 16, v1);
  uint64_t v11 = swift_allocObject(&unk_10006F5A8, 32LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v11 + 24) = v10;
  aBlock[4] = sub_100048174;
  uint64_t v23 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  void aBlock[3] = &unk_10006F5C0;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain(a1);
  uint64_t v13 = swift_retain(v10);
  static DispatchQoS.unspecified.getter(v13);
  unint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v16 = sub_100007938(&qword_100076D58, (uint64_t *)&unk_100078740);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v15, v16, v3, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v5, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v17 = v23;
  swift_release(v10);
  return swift_release(v17);
}

uint64_t sub_100047DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  uint64_t v4 = sub_100005394(&qword_100079660);
  uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
  *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
  v19[0] = a1;
  uint64_t v6 = type metadata accessor for DeviceDiscoverySession(0LL);
  swift_retain(a1);
  uint64_t v7 = String.init<A>(describing:)(v19, v6);
  uint64_t v9 = v8;
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_100005854();
  *(void *)(v5 + 3sub_100007A28(v0 + 2) = v7;
  *(void *)(v5 + 40) = v9;
  uint64_t v10 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v11 = (void *)static OS_os_log.default.getter(v10);
  uint64_t v12 = static os_log_type_t.default.getter(v11);
  os_log(_:dso:log:type:_:)("Did request stop discovery %@", 29LL, 2LL, &_mh_execute_header, v11, v12, v5);
  swift_bridgeObjectRelease(v5);

  swift_beginAccess(v3, v19, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    uint64_t v14 = Strong;
    swift_beginAccess(Strong + 24, v18, 33LL, 0LL);
    uint64_t v15 = sub_100038398(a1);
    swift_endAccess(v18);
    swift_release(v14);
    swift_release(v15);
  }

  swift_beginAccess(v3, v18, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v17 = result;
    sub_100045F6C();
    return swift_release(v17);
  }

  return result;
}

uint64_t sub_100047F30()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t type metadata accessor for DeviceDiscoveryFactory()
{
  return objc_opt_self(&OBJC_CLASS____TtC20FMIPClientXPCService22DeviceDiscoveryFactory);
}

uint64_t storeEnumTagSinglePayload for DeviceDiscoveryConfiguration.DiscoveryMode( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100047FD8 + 4 * byte_10005E8C5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10004800C + 4 * byte_10005E8C0[v4]))();
}

uint64_t sub_10004800C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100048014(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10004801CLL);
  }
  return result;
}

uint64_t sub_100048028(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100048030LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100048034(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004803C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceDiscoveryConfiguration.DiscoveryMode()
{
  return &type metadata for DeviceDiscoveryConfiguration.DiscoveryMode;
}

uint64_t initializeBufferWithCopyOfBuffer for DeviceDiscoveryConfiguration(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for DeviceDiscoveryConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceDiscoveryConfiguration( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = a2 + 2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DeviceDiscoveryConfiguration()
{
  return &type metadata for DeviceDiscoveryConfiguration;
}

unint64_t sub_100048108()
{
  unint64_t result = qword_100078E98;
  if (!qword_100078E98)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005E9C0, &type metadata for DeviceDiscoveryConfiguration.DiscoveryMode);
    atomic_store(result, (unint64_t *)&qword_100078E98);
  }

  return result;
}

uint64_t sub_10004814C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100048174()
{
  return sub_100047DA0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10004817C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100007A28(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004818C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void *sub_100048194()
{
  __int16 v1 = v0;
  uint64_t v16 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v2 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  BOOL v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v1[2] = &_swiftEmptyDictionarySingleton;
  v1[3] = &_swiftEmptySetSingleton;
  uint64_t v11 = sub_1000079C8(0LL, (unint64_t *)&qword_100078760, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v11);
  uint64_t v17 = &_swiftEmptyArrayStorage;
  uint64_t v12 = sub_1000078F8( (unint64_t *)&qword_100076B38,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v13 = sub_100005394((uint64_t *)&unk_100078770);
  uint64_t v14 = sub_100007938((unint64_t *)&qword_100076B40, (uint64_t *)&unk_100078770);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v5, v12);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))( v4,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v16);
  v1[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001BLL,  0x8000000100058DC0LL,  v10,  v7,  v4,  0LL);
  v1[5] = 0LL;
  return v1;
}

unint64_t sub_100048378(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_100048EF8(a1, a2, v5);
}

unint64_t sub_1000483DC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100048FD8(a1, v4);
}

unint64_t sub_10004840C(unsigned __int8 a1)
{
  Swift::Int v3 = Hasher._finalize()();
  return sub_10004909C(a1, v3);
}

Swift::Int sub_100048464(uint64_t a1, uint64_t a2)
{
  Swift::Int v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005394(&qword_100078EE0);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  Swift::String v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v37) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          Swift::Int v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v37) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

Swift::Int sub_100048770(uint64_t a1, uint64_t a2)
{
  Swift::Int v3 = v2;
  Swift::Int v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100005394(&qword_100078EB0);
  Swift::Int result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  Swift::Int v8 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v9 = 0LL;
    uint64_t v32 = (void *)(v5 + 64);
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    double v30 = v3;
    int64_t v31 = (unint64_t)(v10 + 63) >> 6;
    Swift::Int v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v15 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v16 = v15 | (v9 << 6);
      }

      else
      {
        int64_t v17 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }

        Swift::Int result = v5 + 64;
        if (v17 >= v31) {
          goto LABEL_37;
        }
        unint64_t v18 = v32[v17];
        ++v9;
        if (!v18)
        {
          int64_t v9 = v17 + 1;
          if (v17 + 1 >= v31) {
            goto LABEL_37;
          }
          unint64_t v18 = v32[v9];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v31)
            {
LABEL_37:
              if ((a2 & 1) == 0)
              {
                Swift::Int result = swift_release(v5);
                Swift::Int v3 = v30;
                goto LABEL_44;
              }

              uint64_t v29 = 1LL << *(_BYTE *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                void *v32 = -1LL << v29;
              }
              Swift::Int v3 = v30;
              *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v18 = v32[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v9 = v19 + 1;
                if (__OFADD__(v19, 1LL)) {
                  goto LABEL_46;
                }
                if (v9 >= v31) {
                  goto LABEL_37;
                }
                unint64_t v18 = v32[v9];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v9 = v19;
          }
        }

unint64_t sub_100048A4C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::UInt v11 = *(unsigned __int8 *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)(v25, *(void *)(a2 + 40));
        Hasher._combine(_:)(v11);
        Swift::Int result = Hasher._finalize()();
        unint64_t v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }

        else if (v12 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          unint64_t v14 = (_BYTE *)(v13 + v3);
          unint64_t v15 = (_BYTE *)(v13 + v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *unint64_t v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          unint64_t v17 = v16 + 40 * v3;
          unint64_t v18 = (__int128 *)(v16 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            __int128 v9 = *v18;
            __int128 v10 = v18[1];
            *(void *)(v17 + 3sub_100007A28(v0 + 2) = *((void *)v18 + 4);
            *(_OWORD *)unint64_t v17 = v9;
            *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = v10;
            int64_t v3 = v6;
          }
        }

void sub_100048C18(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100048378(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10004913C();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v1sub_100007A28(v0 + 2) = a1;
      return;
    }

uint64_t sub_100048D74(__int128 *a1, char a2, char a3)
{
  uint64_t v4 = (void **)v3;
  unint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10004840C(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      char v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = (void *)(v16[7] + 40 * v10);
        sub_100007A28(v17);
        return sub_100007A00(a1, (uint64_t)v17);
      }

      return sub_100048E90(v10, a2, a1, v16);
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1000492EC();
      goto LABEL_7;
    }

    sub_100048770(v13, a3 & 1);
    unint64_t v19 = sub_10004840C(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
      return sub_100048E90(v10, a2, a1, v16);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DeviceDiscoveryConfiguration.DiscoveryMode);
  __break(1u);
  return result;
}

uint64_t sub_100048E90(unint64_t a1, char a2, __int128 *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(_BYTE *)(a4[6] + a1) = a2;
  uint64_t result = sub_100007A00(a3, a4[7] + 40 * a1);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

unint64_t sub_100048EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        char v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_100048FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_10004C010(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_100030F50((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

unint64_t sub_10004909C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
      }
    }
  }

  return result;
}

id sub_10004913C()
{
  uint64_t v1 = v0;
  sub_100005394(&qword_100078EE0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    char v20 = *(void **)(*(void *)(v2 + 56) + v19);
    char v21 = (void *)(*(void *)(v4 + 48) + v16);
    *char v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    id result = v20;
  }

  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(_BYTE *)(*(void *)(v2 + 48) + v15);
    sub_100007E2C(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v20);
    *(_BYTE *)(*(void *)(v4 + 48) + v15) = v16;
    id result = (void *)sub_100007A00(v20, *(void *)(v4 + 56) + 40 * v15);
  }

  uint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

        id result = swift_release(v5);
        __break(1u);
        goto LABEL_26;
      }

void *sub_1000492EC()
{
  uint64_t v1 = v0;
  sub_100005394(&qword_100078EB0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }

void *sub_1000494AC(void *a1, int64_t a2, char a3)
{
  id result = sub_100049538(a1, a2, a3, *v3);
  void *v3 = result;
  return result;
}

char *sub_1000494C8(char *a1, int64_t a2, char a3)
{
  id result = sub_10004966C(a1, a2, a3, *v3);
  void *v3 = result;
  return result;
}

char *sub_1000494E4(char *a1, int64_t a2, char a3)
{
  id result = sub_10004977C(a1, a2, a3, *v3);
  void *v3 = result;
  return result;
}

size_t sub_100049500(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_100049894(a1, a2, a3, (void *)*v3);
  size_t *v3 = result;
  return result;
}

char *sub_10004951C(char *a1, int64_t a2, char a3)
{
  size_t result = sub_100049A08(a1, a2, a3, *v3);
  size_t *v3 = result;
  return result;
}

void *sub_100049538(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005394(&qword_100078608);
    uint64_t v11 = (void *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    _OWORD v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }

  else
  {
    uint64_t v11 = &_swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v11 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    uint64_t v14 = sub_100005394(&qword_100076D68);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v14);
  }

  swift_release(a4);
  return v11;
}

char *sub_10004966C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005394(&qword_100078ED8);
    uint64_t v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_100007A28(v0 + 2) = v8;
    *((void *)v11 + sub_100007A28(v0 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  int64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8]) {
      memmove(v13, v14, 40 * v8);
    }
    *((void *)a4 + sub_100007A28(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for FMIPPlaySoundDevice);
  }

  swift_release(a4);
  return v11;
}

char *sub_10004977C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005394(&qword_100078ED0);
    uint64_t v11 = (char *)swift_allocObject(v10, 96 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + sub_100007A28(v0 + 2) = v8;
    *((void *)v11 + sub_100007A28(v0 + 3) = 2 * ((uint64_t)(v12 - 32) / 96);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  int64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[96 * v8]) {
      memmove(v13, v14, 96 * v8);
    }
    *((void *)a4 + sub_100007A28(v0 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v13, v14, v8, &type metadata for FMIPSearchRequestDevice);
  }

  swift_release(a4);
  return v11;
}

size_t sub_100049894(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v15 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100005394(&qword_100078EC8);
  uint64_t v11 = *(void *)(type metadata accessor for Date(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  unint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (result - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_29;
  }
  uint64_t v15[2] = v8;
  void v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  char v20 = (char *)v15 + v19;
  char v21 = (char *)a4 + v19;
  if ((v5 & 1) != 0)
  {
    if (v15 < a4 || v20 >= &v21[*(void *)(v18 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v20, v21, v8, v17);
    }

    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v20, v21);
    }

    a4[2] = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v20, v21, v8, v17);
  }

  swift_release(a4);
  return (size_t)v15;
}

char *sub_100049A08(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10005345C();
    uint64_t v11 = (char *)swift_allocObject( v10,  ((*(unsigned int *)(v10 + 48) + 7LL) & 0x1FFFFFFF8LL) + 8 * v9,  *(unsigned __int16 *)(v10 + 52) | 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + sub_100007A28(v0 + 2) = v8;
    *((void *)v11 + sub_100007A28(v0 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v14, v15, 8 * v8);
    }
    *((void *)a4 + sub_100007A28(v0 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 8 * v8);
  }

  swift_release(a4);
  return v11;
}

uint64_t sub_100049B08()
{
  return sub_1000475DC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

BOOL sub_100049B10(unsigned __int8 a1)
{
  return *(unsigned __int8 *)(v1 + 16) == a1;
}

Swift::Int sub_100049B20(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }

  sub_100005394(&qword_100078EB0);
  Swift::Int result = static _DictionaryStorage.allocate(capacity:)(v5);
  Swift::Int v8 = result;
  uint64_t v27 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  Swift::Int v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
    }

    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1LL)) {
        goto LABEL_40;
      }
      if (v14 >= v27) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        uint64_t v10 = v14 + 1;
        if (v14 + 1 >= v27) {
          return v8;
        }
        unint64_t v15 = a1[v10];
        if (!v15)
        {
          uint64_t v10 = v14 + 2;
          if (v14 + 2 >= v27) {
            return v8;
          }
          unint64_t v15 = a1[v10];
          if (!v15)
          {
            uint64_t v16 = v14 + 3;
            if (v16 >= v27) {
              return v8;
            }
            unint64_t v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v10 = v16 + 1;
                if (__OFADD__(v16, 1LL)) {
                  goto LABEL_41;
                }
                if (v10 >= v27) {
                  return v8;
                }
                unint64_t v15 = a1[v10];
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v10 = v16;
          }
        }
      }

LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100049DD0(void *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for Date(0LL) - 8);
  uint64_t v3 = (void *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v3 = (void *)sub_10004B418(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  uint64_t result = sub_100049E50(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_100049E50(void *a1)
{
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v154 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  __int128 v139 = (char *)&v134 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  char v151 = (char *)&v134 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v147 = (char *)&v134 - v9;
  __chkstk_darwin(v8);
  Swift::String v146 = (char *)&v134 - v10;
  Swift::Int v11 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if ((v11 & 0x8000000000000000LL) == 0)
    {
      if (v11) {
        return sub_10004A850(0LL, v11, 1LL, a1);
      }
      return result;
    }

    goto LABEL_142;
  }

  if (v11 >= 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v11 + 1;
  }
  if (v11 < -1)
  {
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
    return result;
  }

  uint64_t v14 = result;
  uint64_t v150 = v3;
  uint64_t v142 = v1;
  if (v11 <= 1)
  {
    Swift::UInt v17 = _swiftEmptyArrayStorage;
    unint64_t v141 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v154 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80));
    char v135 = _swiftEmptyArrayStorage;
    if (v11 != 1)
    {
      unint64_t v19 = _swiftEmptyArrayStorage[2];
LABEL_106:
      if (v19 < 2)
      {
LABEL_117:
        swift_bridgeObjectRelease(v17);
        uint64_t v133 = v135;
        v135[2] = 0LL;
        return swift_bridgeObjectRelease(v133);
      }

      uint64_t v125 = *a1;
      while (1)
      {
        unint64_t v126 = v19 - 2;
        if (v19 < 2) {
          goto LABEL_136;
        }
        uint64_t v127 = v142;
        if (!v125) {
          goto LABEL_149;
        }
        uint64_t v128 = v17;
        int64_t v129 = v17[2 * v126 + 4];
        int64_t v130 = v17[2 * v19 + 3];
        uint64_t result = sub_10004AAA4( v125 + *(void *)(v154 + 72) * v129,  v125 + *(void *)(v154 + 72) * v17[2 * v19 + 2],  v125 + *(void *)(v154 + 72) * v130,  v141);
        if (v127)
        {
          int v123 = v17;
          goto LABEL_104;
        }

        if (v130 < v129) {
          goto LABEL_137;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native(v17);
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_10004B0C8((uint64_t)v17);
          uint64_t v128 = (unint64_t *)result;
        }

        if (v126 >= v128[2]) {
          goto LABEL_138;
        }
        uint64_t v131 = &v128[2 * v126 + 4];
        unint64_t *v131 = v129;
        v131[1] = v130;
        unint64_t v132 = v128[2];
        if (v19 > v132) {
          goto LABEL_139;
        }
        Swift::UInt v17 = v128;
        uint64_t result = (uint64_t)memmove(&v128[2 * v19 + 2], &v128[2 * v19 + 4], 16 * (v132 - v19));
        v128[2] = v132 - 1;
        unint64_t v19 = v132 - 1;
        uint64_t v142 = 0LL;
        if (v132 <= 2) {
          goto LABEL_117;
        }
      }
    }
  }

  else
  {
    uint64_t v15 = v13 >> 1;
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)(v13 >> 1, v3);
    *(void *)(result + swift_weakDestroy(v0 + 16) = v15;
    uint64_t v16 = *(unsigned __int8 *)(v154 + 80);
    char v135 = (void *)result;
    unint64_t v141 = result + ((v16 + 32) & ~v16);
  }

  Swift::Int v18 = 0LL;
  Swift::UInt v17 = _swiftEmptyArrayStorage;
  v149 = a1;
  uint64_t v136 = v14;
  while (1)
  {
    Swift::Int v20 = v18;
    Swift::Int v21 = v18 + 1;
    __int128 v137 = v17;
    if (v18 + 1 >= v11)
    {
      ++v18;
      uint64_t v41 = v142;
    }

    else
    {
      uint64_t v22 = *a1;
      uint64_t v23 = v154;
      Swift::Int v24 = v18;
      uint64_t v25 = *(void *)(v154 + 72);
      uint64_t v26 = *a1 + v25 * v21;
      uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v154 + 16);
      uint64_t v28 = v146;
      Swift::Int v152 = v11;
      uint64_t v29 = v150;
      v27(v146, v26, v150);
      double v30 = v147;
      v27(v147, v22 + v25 * v24, v29);
      LODWORD(v148) = static Date.< infix(_:_:)(v28, v30);
      int64_t v31 = *(void (**)(char *, uint64_t))(v23 + 8);
      v31(v30, v29);
      uint64_t v32 = v29;
      Swift::Int v11 = v152;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v31)(v28, v32);
      Swift::Int v18 = v24 + 2;
      uint64_t v144 = v22;
      uint64_t v153 = v25;
      if (v24 + 2 >= v11)
      {
        a1 = v149;
        uint64_t v41 = v142;
        uint64_t v40 = v25;
        Swift::Int v20 = v24;
        uint64_t v14 = v136;
      }

      else
      {
        Swift::Int v140 = v24;
        uint64_t v145 = v25 * v21;
        uint64_t v33 = v22;
        uint64_t v34 = v25 * v18;
        while (1)
        {
          Swift::Int v35 = v18;
          Swift::String v36 = v146;
          uint64_t v37 = v150;
          v27(v146, v33 + v34, v150);
          uint64_t v38 = v147;
          v27(v147, v33 + v145, v37);
          int v39 = static Date.< infix(_:_:)(v36, v38);
          v31(v38, v37);
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v31)(v36, v37);
          Swift::Int v18 = v35 + 1;
          uint64_t v40 = v153;
          v33 += v153;
          if (v152 == v35 + 1)
          {
            Swift::Int v11 = v152;
            Swift::Int v18 = v152;
            a1 = v149;
            uint64_t v41 = v142;
            uint64_t v14 = v136;
            Swift::Int v20 = v140;
            goto LABEL_24;
          }
        }

        a1 = v149;
        uint64_t v41 = v142;
        uint64_t v14 = v136;
        Swift::Int v18 = v35;
        Swift::Int v20 = v140;
        Swift::Int v11 = v152;
        uint64_t v40 = v153;
      }

LABEL_87:
    if ((v99 & 1) != 0) {
      goto LABEL_130;
    }
    int v107 = &v74[16 * v76];
    uint64_t v109 = *(void *)v107;
    uint64_t v108 = *((void *)v107 + 1);
    BOOL v87 = __OFSUB__(v108, v109);
    uint64_t v110 = v108 - v109;
    if (v87) {
      goto LABEL_132;
    }
    if (v110 < v98) {
      goto LABEL_14;
    }
LABEL_95:
    unint64_t v115 = v76 - 1;
    if (v76 - 1 >= v19)
    {
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
      goto LABEL_135;
    }

    uint64_t v116 = *a1;
    if (!*a1) {
      goto LABEL_147;
    }
    uint64_t v117 = &v74[16 * v115];
    uint64_t v118 = *(void *)v117;
    uint64_t v119 = &v74[16 * v76];
    uint64_t v120 = *((void *)v119 + 1);
    uint64_t v121 = v142;
    uint64_t result = sub_10004AAA4( v116 + *(void *)(v154 + 72) * *(void *)v117,  v116 + *(void *)(v154 + 72) * *(void *)v119,  v116 + *(void *)(v154 + 72) * v120,  v141);
    uint64_t v142 = v121;
    if (v121) {
      break;
    }
    if (v120 < v118) {
      goto LABEL_121;
    }
    if (v76 > v17[2]) {
      goto LABEL_122;
    }
    *(void *)uint64_t v117 = v118;
    *(void *)&v74[16 * v115 + 8] = v120;
    unint64_t v122 = v17[2];
    if (v76 >= v122) {
      goto LABEL_123;
    }
    unint64_t v19 = v122 - 1;
    uint64_t result = (uint64_t)memmove(&v74[16 * v76], v119 + 16, 16 * (v122 - 1 - v76));
    _BYTE v17[2] = v122 - 1;
    a1 = v149;
    if (v122 <= 2) {
      goto LABEL_14;
    }
  }

  int v123 = v17;
LABEL_104:
  swift_bridgeObjectRelease(v123);
  uint64_t v124 = v135;
  v135[2] = 0LL;
  return swift_bridgeObjectRelease(v124);
}

uint64_t sub_10004A850(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v29 = a1;
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v37 = *(void **)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  Swift::String v36 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v33 = (char *)&v27 - v11;
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v32 = (char *)&v27 - v13;
  uint64_t v35 = a3;
  uint64_t v28 = a2;
  if (a3 != a2)
  {
    uint64_t v14 = v37[9];
    double v30 = (void (*)(char *, uint64_t, uint64_t))v37[2];
    int64_t v31 = a4;
    uint64_t v39 = v14 * (v35 - 1);
    uint64_t v34 = v14;
    uint64_t v38 = v14 * v35;
LABEL_5:
    uint64_t v15 = 0LL;
    uint64_t v16 = v29;
    while (1)
    {
      uint64_t v17 = *a4;
      Swift::Int v18 = v32;
      unint64_t v19 = v30;
      v30(v32, v38 + v15 + *a4, v7);
      Swift::Int v20 = v33;
      v19(v33, v39 + v15 + v17, v7);
      LOBYTE(v17) = static Date.< infix(_:_:)(v18, v20);
      Swift::Int v21 = (void (*)(char *, uint64_t))v37[1];
      uint64_t v22 = v20;
      a4 = v31;
      v21(v22, v7);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v21)(v18, v7);
      if ((v17 & 1) == 0)
      {
LABEL_4:
        v39 += v34;
        v38 += v34;
        if (++v35 == v28) {
          return result;
        }
        goto LABEL_5;
      }

      uint64_t v23 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v24 = v23 + v38 + v15;
      uint64_t v25 = v23 + v39 + v15;
      uint64_t v26 = (void (*)(char *, uint64_t, uint64_t))v37[4];
      v26(v36, v24, v7);
      swift_arrayInitWithTakeFrontToBack(v24, v25, 1LL, v7);
      uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v26)(v25, v36, v7);
      v15 -= v34;
      if (v35 == ++v16) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_10004AAA4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v52 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v9);
  unint64_t v51 = (char *)&v46 - v12;
  uint64_t v53 = v13;
  uint64_t v14 = *(void *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    return result;
  }

  if (a2 - a1 == 0x8000000000000000LL && v14 == -1) {
    goto LABEL_60;
  }
  int64_t v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000LL && v14 == -1) {
    goto LABEL_61;
  }
  uint64_t v16 = (uint64_t)(a2 - a1) / v14;
  unint64_t v56 = a1;
  unint64_t v55 = a4;
  uint64_t v17 = v15 / v14;
  if (v16 >= v15 / v14)
  {
    uint64_t v19 = v17 * v14;
    if (a4 < a2 || a2 + v19 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a2, v17, v8);
    }

    else if (a4 != a2)
    {
      swift_arrayInitWithTakeBackToFront(a4, a2);
    }

    unint64_t v31 = a4 + v19;
    unint64_t v54 = a4 + v19;
    unint64_t v56 = a2;
    if (v19 >= 1 && a1 < a2)
    {
      uint64_t v33 = -v14;
      uint64_t v34 = *(void (**)(char *, unint64_t, uint64_t))(v53 + 16);
      unint64_t v48 = a4;
      uint64_t v49 = v34;
      unint64_t v47 = a1;
      uint64_t v35 = v51;
      do
      {
        unint64_t v50 = a3 + v33;
        Swift::String v36 = v49;
        v49(v35, v31 + v33, v8);
        unint64_t v37 = a2 + v33;
        uint64_t v38 = v52;
        v36(v52, a2 + v33, v8);
        char v39 = static Date.< infix(_:_:)(v35, v38);
        uint64_t v40 = *(void (**)(char *, uint64_t))(v53 + 8);
        v40(v38, v8);
        v40(v35, v8);
        if ((v39 & 1) != 0)
        {
          unint64_t v41 = v50;
          if (a3 < a2 || v50 >= a2)
          {
            swift_arrayInitWithTakeFrontToBack(v50, a2 + v33, 1LL, v8);
            unint64_t v43 = v47;
            unint64_t v42 = v48;
          }

          else
          {
            unint64_t v43 = v47;
            unint64_t v42 = v48;
            if (a3 != a2) {
              swift_arrayInitWithTakeBackToFront(v50, a2 + v33);
            }
          }

          v56 += v33;
        }

        else
        {
          unint64_t v44 = v54;
          unint64_t v45 = v54 + v33;
          v54 += v33;
          unint64_t v41 = v50;
          if (a3 < v44 || v50 >= v44)
          {
            swift_arrayInitWithTakeFrontToBack(v50, v45, 1LL, v8);
            unint64_t v37 = a2;
            unint64_t v43 = v47;
            unint64_t v42 = v48;
          }

          else
          {
            unint64_t v43 = v47;
            unint64_t v42 = v48;
            if (a3 != v44) {
              swift_arrayInitWithTakeBackToFront(v50, v45);
            }
            unint64_t v37 = a2;
          }
        }

        unint64_t v31 = v54;
        if (v54 <= v42) {
          break;
        }
        a2 = v37;
        a3 = v41;
      }

      while (v37 > v43);
    }
  }

  else
  {
    uint64_t v18 = v16 * v14;
    if (a4 < a1 || a1 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v16, v8);
    }

    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }

    unint64_t v50 = a4 + v18;
    unint64_t v54 = a4 + v18;
    if (v18 >= 1 && a2 < a3)
    {
      Swift::Int v21 = *(void (**)(char *, unint64_t, uint64_t))(v53 + 16);
      do
      {
        unint64_t v22 = a3;
        unint64_t v23 = a4;
        uint64_t v24 = v51;
        v21(v51, a2, v8);
        uint64_t v25 = v52;
        v21(v52, v23, v8);
        char v26 = static Date.< infix(_:_:)(v24, v25);
        uint64_t v27 = *(void (**)(char *, uint64_t))(v53 + 8);
        v27(v25, v8);
        v27(v24, v8);
        unint64_t v28 = v56;
        if ((v26 & 1) != 0)
        {
          unint64_t v29 = a2 + v14;
          if (v56 < a2 || v56 >= v29)
          {
            swift_arrayInitWithTakeFrontToBack(v56, a2, 1LL, v8);
          }

          else if (v56 == a2)
          {
            unint64_t v28 = a2;
          }

          else
          {
            swift_arrayInitWithTakeBackToFront(v56, a2);
          }
        }

        else
        {
          unint64_t v30 = v55 + v14;
          if (v56 < v55 || v56 >= v30)
          {
            swift_arrayInitWithTakeFrontToBack(v56, v55, 1LL, v8);
          }

          else if (v56 != v55)
          {
            swift_arrayInitWithTakeBackToFront(v56, v55);
          }

          unint64_t v55 = v30;
          unint64_t v29 = a2;
        }

        unint64_t v56 = v28 + v14;
        a4 = v55;
        if (v55 >= v50) {
          break;
        }
        a3 = v22;
        a2 = v29;
      }

      while (v29 < v22);
    }
  }

  sub_10004B018(&v56, &v55, (uint64_t *)&v54);
  return 1LL;
}

char *sub_10004AF20(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100005394(&qword_100078EC0);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + sub_100007A28(v0 + 2) = v8;
    *((void *)v11 + sub_100007A28(v0 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  int64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + sub_100007A28(v0 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 16 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_10004B018(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72LL);
  if (!v7)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }

  if (v5 - v4 == 0x8000000000000000LL && v7 == -1) {
    goto LABEL_13;
  }
  uint64_t v9 = (uint64_t)(v5 - v4) / v7;
  if (v3 < v4 || v3 >= v4 + v9 * v7) {
    return swift_arrayInitWithTakeFrontToBack(v3, v4, v9, result);
  }
  if (v3 != v4) {
    return swift_arrayInitWithTakeBackToFront(v3, v4);
  }
  return result;
}

char *sub_10004B0C8(uint64_t a1)
{
  return sub_10004AF20(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

Swift::Int sub_10004B0DC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v9;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100005394((uint64_t *)&unk_100078780);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  uint64_t v9 = (void *)result;
  unint64_t v30 = a1;
  uint64_t v31 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  Swift::Int v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }

    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_39;
    }
    if (v15 >= v31) {
      goto LABEL_36;
    }
    unint64_t v16 = v30[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= v31) {
        goto LABEL_36;
      }
      unint64_t v16 = v30[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= v31) {
          goto LABEL_36;
        }
        unint64_t v16 = v30[v11];
        if (!v16) {
          break;
        }
      }
    }

LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v4 + 48) + 8 * v14);
    Hasher.init(_seed:)(v32, v9[5]);
    uint64_t v19 = type metadata accessor for UUID(0LL);
    uint64_t v20 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    swift_retain(v18);
    dispatch thunk of Hashable.hash(into:)(v32, v19, v20);
    Swift::Int result = Hasher._finalize()();
    uint64_t v21 = -1LL << *((_BYTE *)v9 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0LL;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v23);
      }

      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }

    *(void *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
    *(void *)(v9[6] + 8 * v24) = v18;
    ++v9[2];
    if (__OFSUB__(v5--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v5) {
      goto LABEL_36;
    }
  }

  uint64_t v17 = v15 + 3;
  if (v17 >= v31) {
    goto LABEL_36;
  }
  unint64_t v16 = v30[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }

  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v11 >= v31) {
      goto LABEL_36;
    }
    unint64_t v16 = v30[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }

uint64_t sub_10004B390(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2LL;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

size_t sub_10004B418(void *a1)
{
  return sub_100049894(0LL, a1[2], 0, a1);
}

int64_t sub_10004B42C(int64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (Swift::Int result = 1LL << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  unint64_t v8 = v7 & (-2LL << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }

  return result;
}

uint64_t sub_10004B510(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = a2;
  unint64_t v6 = result;
  if ((a4 & 0xC000000000000001LL) == 0)
  {
    if ((a3 & 1) != 0) {
      goto LABEL_13;
    }
    if (result < 0 || 1LL << *(_BYTE *)(a4 + 32) <= result)
    {
      __break(1u);
    }

    else if (((*(void *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> result) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2) {
        goto LABEL_20;
      }
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(result, a2) == *(_DWORD *)(a4 + 36))
      {
        uint64_t v11 = __CocoaSet.Index.element.getter(v6, v5);
        uint64_t v24 = v11;
        uint64_t v12 = type metadata accessor for DeviceDiscoverySession(0LL);
        swift_unknownObjectRetain(v11);
        swift_dynamicCast(v23, &v24, (char *)&type metadata for Swift.AnyObject + 8, v12, 7LL);
        uint64_t v5 = v23[0];
        swift_unknownObjectRelease(v11);
        Hasher.init(_seed:)(v23, *(void *)(a4 + 40));
        uint64_t v13 = v5 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_uuid;
        uint64_t v14 = type metadata accessor for UUID(0LL);
        uint64_t v15 = sub_1000078F8( &qword_100078750,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v23, v14, v15);
        Swift::Int v16 = Hasher._finalize()();
        uint64_t v17 = -1LL << *(_BYTE *)(a4 + 32);
        unint64_t v6 = v16 & ~v17;
        if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
        {
          uint64_t v18 = *(void *)(*(void *)(a4 + 48) + 8 * v6);
          uint64_t v19 = v18 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_uuid;
          swift_retain(v18);
          LOBYTE(v19) = static UUID.== infix(_:_:)(v19, v13);
          swift_release(v18);
          if ((v19 & 1) == 0)
          {
            uint64_t v20 = ~v17;
            do
            {
              unint64_t v6 = (v6 + 1) & v20;
              if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
                goto LABEL_25;
              }
              uint64_t v21 = *(void *)(*(void *)(a4 + 48) + 8 * v6);
              uint64_t v22 = v21 + OBJC_IVAR____TtC20FMIPClientXPCService22DeviceDiscoverySession_uuid;
              swift_retain(v21);
              LOBYTE(v2sub_100007A28(v0 + 2) = static UUID.== infix(_:_:)(v22, v13);
              swift_release(v21);
            }

            while ((v22 & 1) == 0);
          }

          swift_release(v5);
LABEL_20:
          uint64_t v10 = *(void *)(*(void *)(a4 + 48) + 8 * v6);
          swift_retain(v10);
          return v10;
        }

uint64_t sub_10004B7C4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2LL;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_10004B84C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void *))
{
  uint64_t v20 = (unint64_t *)result;
  int64_t v6 = 0LL;
  uint64_t v7 = a3 + 64;
  uint64_t v8 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }

    int64_t v15 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v15 >= v11) {
      return sub_100049B20(v20, a2, v22, a3);
    }
    unint64_t v16 = *(void *)(v7 + 8 * v15);
    ++v6;
    if (!v16)
    {
      int64_t v6 = v15 + 1;
      if (v15 + 1 >= v11) {
        return sub_100049B20(v20, a2, v22, a3);
      }
      unint64_t v16 = *(void *)(v7 + 8 * v6);
      if (!v16)
      {
        int64_t v6 = v15 + 2;
        if (v15 + 2 >= v11) {
          return sub_100049B20(v20, a2, v22, a3);
        }
        unint64_t v16 = *(void *)(v7 + 8 * v6);
        if (!v16) {
          break;
        }
      }
    }

LABEL_20:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v13 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_5:
    uint64_t v14 = *(unsigned __int8 *)(*(void *)(a3 + 48) + v13);
    sub_100007E2C(*(void *)(a3 + 56) + 40 * v13, (uint64_t)v21);
    LOBYTE(v14) = a4(v14, v21);
    Swift::Int result = sub_100007A28(v21);
    if ((v14 & 1) != 0)
    {
      *(unint64_t *)((char *)v20 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      if (__OFADD__(v22++, 1LL))
      {
        __break(1u);
        return sub_100049B20(v20, a2, v22, a3);
      }
    }
  }

  int64_t v17 = v15 + 3;
  if (v17 >= v11) {
    return sub_100049B20(v20, a2, v22, a3);
  }
  unint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16)
  {
    int64_t v6 = v17;
    goto LABEL_20;
  }

  while (1)
  {
    int64_t v6 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v6 >= v11) {
      return sub_100049B20(v20, a2, v22, a3);
    }
    unint64_t v16 = *(void *)(v7 + 8 * v6);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }

    unint64_t v12 = (v17 - 1) & v17;
    int64_t v15 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_5:
    if (*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 48) + 8 * v15) + 24LL) == a4)
    {
      *(void *)(result + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      if (__OFADD__(v7++, 1LL))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        return sub_10004B0DC(v6, a2, v7, a3);
      }
    }
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_24;
  }
  int64_t v17 = *(void *)(v9 + 8 * v18);
  if (v17)
  {
    uint64_t v8 = v18;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v8 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v8 >= v13) {
      goto LABEL_24;
    }
    int64_t v17 = *(void *)(v9 + 8 * v8);
    ++v18;
    if (v17) {
      goto LABEL_20;
    }
  }

uint64_t sub_10004BA0C( uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t, void *), uint64_t a3)
{
  uint64_t v6 = isStackAllocationSafe;
  char v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (1LL << v7) + 63;
  uint64_t v10 = v9 >> 6;
  size_t v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0LL), v11);
    uint64_t v12 = sub_10004B84C((uint64_t)&v15 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0LL), v10, v6, a2);
    if (v3) {
      swift_willThrow(v12);
    }
    else {
      return v12;
    }
  }

  else
  {
    unint64_t v13 = (void *)swift_slowAlloc(v11, -1LL);
    bzero(v13, v11);
    a3 = sub_10004B84C((uint64_t)v13, v10, v6, a2);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  return a3;
}

uint64_t sub_10004BB7C()
{
  return swift_deallocObject(v0, 33LL, 7LL);
}

uint64_t sub_10004BBA0(uint64_t a1)
{
  return sub_1000467C4(a1, *(void *)(v1 + 16), *(_BYTE *)(v1 + 32), *(double *)(v1 + 24));
}

uint64_t sub_10004BBB0(uint64_t a1, uint64_t a2)
{
  return sub_100046CF8(a1, a2, *(void *)(v2 + 16), *(_BYTE *)(v2 + 32), *(double *)(v2 + 24));
}

uint64_t sub_10004BBC0()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

Swift::Int sub_10004BBF4()
{
  return sub_100046F58(*(void *)(v0 + 16), *(_BYTE *)(v0 + 32), v0 + 40, *(void *)(v0 + 80));
}

uint64_t sub_10004BC0C(uint64_t *a1)
{
  return sub_100047338(a1, v1[2], v1[3], v1[4]);
}

Swift::Int sub_10004BC28(uint64_t isStackAllocationSafe, unsigned __int8 a2)
{
  uint64_t v4 = isStackAllocationSafe;
  char v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (1LL << v5) + 63;
  uint64_t v8 = v7 >> 6;
  size_t v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0LL), v9);
    Swift::Int v10 = sub_10004BD98((Swift::Int)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0LL), v8, v4, a2);
    uint64_t v11 = swift_release(v4);
    if (v2) {
      swift_willThrow(v11);
    }
  }

  else
  {
    uint64_t v12 = (void *)swift_slowAlloc(v9, -1LL);
    bzero(v12, v9);
    Swift::Int v10 = sub_10004BD98((Swift::Int)v12, v8, v4, a2);
    swift_release(v4);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  return v10;
}

Swift::Int sub_10004BD98(Swift::Int result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  unsigned int v6 = (unint64_t *)result;
  uint64_t v7 = 0LL;
  int64_t v8 = 0LL;
  uint64_t v9 = a3 + 56;
  uint64_t v10 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(a3 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v8 << 6);
      goto LABEL_5;
    }

    int64_t v16 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v16 >= v13) {
      goto LABEL_24;
    }
    unint64_t v17 = *(void *)(v9 + 8 * v16);
    ++v8;
    if (!v17)
    {
      int64_t v8 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_24;
      }
      unint64_t v17 = *(void *)(v9 + 8 * v8);
      if (!v17)
      {
        int64_t v8 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_24;
        }
        unint64_t v17 = *(void *)(v9 + 8 * v8);
        if (!v17) {
          break;
        }
      }
    }

uint64_t sub_10004BF14()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

Swift::Int sub_10004BF40()
{
  return sub_100046A18(*(void *)(v0 + 16), *(_BYTE *)(v0 + 32), v0 + 40);
}

void sub_10004BF54()
{
}

uint64_t sub_10004BF84()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10004BFA8()
{
}

uint64_t sub_10004BFB4(uint64_t a1)
{
  return sub_100045A54(a1, v1);
}

uint64_t sub_10004BFBC()
{
  return sub_100045CE0(v0);
}

uint64_t sub_10004BFC4(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_10004BFD0()
{
  return sub_100044CE0(v0, (void (*)(uint64_t))sub_1000473B4);
}

uint64_t sub_10004BFF0()
{
  return sub_100044CE0(v0, (void (*)(uint64_t))sub_100047B78);
}

uint64_t sub_10004C010(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t *sub_10004C084(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_100005394(&qword_100077690);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = *(int *)(v4 + 44);
    int64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for URL(0LL);
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }

  return a1;
}

uint64_t sub_10004C130(uint64_t a1)
{
  uint64_t v2 = a1 + *(int *)(sub_100005394(&qword_100077690) + 44);
  uint64_t v3 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
}

void *sub_10004C180(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  uint64_t v5 = *(int *)(sub_100005394(&qword_100077690) + 44);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
  return a1;
}

void *sub_10004C1F0(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(int *)(sub_100005394(&qword_100077690) + 44);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24LL))(v7, v8, v9);
  return a1;
}

_OWORD *sub_10004C274(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(sub_100005394(&qword_100077690) + 44);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

void *sub_10004C2E0(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(int *)(sub_100005394(&qword_100077690) + 44);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40LL))(v7, v8, v9);
  return a1;
}

uint64_t sub_10004C354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004C360);
}

uint64_t sub_10004C360(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005394(&qword_100077690);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_10004C3A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004C3AC);
}

uint64_t sub_10004C3AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005394(&qword_100077690);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ClientConfigurationCache(uint64_t a1)
{
  return sub_10002163C(a1, (uint64_t *)&unk_100078F40, (uint64_t)&nominal type descriptor for ClientConfigurationCache);
}

void sub_10004C404(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
  }

void sub_10004C46C(uint64_t a1)
{
  if (!qword_100078F50)
  {
    uint64_t v2 = type metadata accessor for ClientConfiguration(255LL);
    uint64_t v3 = sub_1000078F8(&qword_100078F58, type metadata accessor for ClientConfiguration, (uint64_t)&unk_10005EAC8);
    uint64_t v4 = sub_1000078F8( (unint64_t *)&unk_100078F60,  type metadata accessor for ClientConfiguration,  (uint64_t)&unk_10005EAA0);
    unint64_t v5 = type metadata accessor for DiskCache(a1, v2, v3, v4);
    if (!v6) {
      atomic_store(v5, (unint64_t *)&qword_100078F50);
    }
  }

uint64_t type metadata accessor for ClientConfiguration(uint64_t a1)
{
  return sub_10002163C(a1, qword_100078FE8, (uint64_t)&nominal type descriptor for ClientConfiguration);
}

void *sub_10004C524(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(void *)a1 = *a2;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for DateComponents(0LL);
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10))
    {
      uint64_t v12 = sub_100005394(&qword_100077670);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
    }

    *((_BYTE *)v4 + *(int *)(a3 + swift_release(*(void *)(v0 + 32)) = *((_BYTE *)a2 + *(int *)(a3 + 32));
  }

  return v4;
}

uint64_t sub_10004C630(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 28);
  uint64_t v3 = type metadata accessor for DateComponents(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1LL, v3);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }
  return result;
}

uint64_t sub_10004C69C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for DateComponents(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = sub_100005394(&qword_100077670);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  *(_BYTE *)(a1 + *(int *)(a3 + swift_release(*(void *)(v0 + 32)) = *(_BYTE *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_10004C77C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for DateComponents(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1LL, v9);
  int v13 = v11(v8, 1LL, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }

  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100005394(&qword_100077670);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
LABEL_7:
  *(_BYTE *)(a1 + *(int *)(a3 + swift_release(*(void *)(v0 + 32)) = *(_BYTE *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_10004C8B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for DateComponents(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = sub_100005394(&qword_100077670);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  *(_BYTE *)(a1 + *(int *)(a3 + swift_release(*(void *)(v0 + 32)) = *(_BYTE *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_10004C990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for DateComponents(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1LL, v9);
  int v13 = v11(v8, 1LL, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }

  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100005394(&qword_100077670);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
LABEL_7:
  *(_BYTE *)(a1 + *(int *)(a3 + swift_release(*(void *)(v0 + 32)) = *(_BYTE *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_10004CAC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004CAD0);
}

uint64_t sub_10004CAD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v10 = sub_100005394(&qword_100077670);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v10);
  }

uint64_t sub_10004CB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004CB5C);
}

uint64_t sub_10004CB5C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = a2 + 1;
  }

  else
  {
    uint64_t v7 = sub_100005394(&qword_100077670);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 28),  a2,  a2,  v7);
  }

  return result;
}

void sub_10004CBD0(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_10005EA78;
  void v4[2] = &unk_10005EA78;
  sub_10002148C(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(v2 - 8) + 64LL;
    void v4[4] = &unk_10005EA78;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
  }

uint64_t sub_10004CC54(void *a1)
{
  uint64_t v2 = type metadata accessor for ClientConfiguration(0LL);
  __chkstk_darwin(v2);
  unsigned int v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100005818();
  uint64_t v5 = (void *)static OS_os_log.default.getter();
  uint64_t v6 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)( "Saving client configuration to disk.",  36LL,  2LL,  &_mh_execute_header,  v5,  v6,  &_swiftEmptyArrayStorage);

  uint64_t v7 = *sub_1000087E0(a1, a1[3]);
  char v8 = *((_BYTE *)sub_1000087E0(a1, a1[3]) + 8);
  char v9 = *((_BYTE *)sub_1000087E0(a1, a1[3]) + 9);
  uint64_t v10 = (char *)sub_1000087E0(a1, a1[3]) + *(int *)(v2 + 28);
  uint64_t v11 = sub_1000087E0(a1, a1[3]);
  uint64_t v12 = *(int *)(v2 + 28);
  LOBYTE(a1) = *((_BYTE *)v11 + *(int *)(v2 + 32));
  *(void *)unsigned int v4 = v7;
  v4[8] = v8;
  void v4[9] = v9;
  sub_10004D46C((uint64_t)v10, (uint64_t)&v4[v12]);
  v4[*(int *)(v2 + 32)] = (char)a1;
  sub_10001C174((uint64_t)v4);
  return sub_10004D430((uint64_t)v4);
}

uint64_t sub_10004CDB4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10004CDF0 + 4 * byte_10005E9F0[a1]))( 0xD000000000000012LL,  0x8000000100058E10LL);
}

unint64_t sub_10004CDF0()
{
  return 0xD000000000000011LL;
}

uint64_t sub_10004CE0C()
{
  return v0 + 11;
}

uint64_t sub_10004CE44(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100005394(&qword_100079048);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 5];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000087E0(a1, v9);
  unint64_t v11 = sub_10004D3A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ClientConfiguration.CodingKeys,  &type metadata for ClientConfiguration.CodingKeys,  v11,  v9,  v10);
  double v12 = *(double *)v3;
  char v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v23, v5, v12);
  if (!v2)
  {
    uint64_t v13 = *(unsigned __int8 *)(v3 + 8);
    char v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v22, v5);
    uint64_t v14 = *(unsigned __int8 *)(v3 + 9);
    char v21 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v21, v5);
    uint64_t v15 = type metadata accessor for ClientConfiguration(0LL);
    uint64_t v16 = v3 + *(int *)(v15 + 28);
    v20[1] = 3;
    type metadata accessor for DateComponents(0LL);
    sub_1000078F8( &qword_100079050,  (uint64_t (*)(uint64_t))&type metadata accessor for DateComponents,  (uint64_t)&protocol conformance descriptor for DateComponents);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v16);
    uint64_t v17 = *(unsigned __int8 *)(v3 + *(int *)(v15 + 32));
    v20[0] = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v20, v5);
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10004D018@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v4 = sub_100005394(&qword_100077670);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v25 = sub_100005394(&qword_100079030);
  uint64_t v7 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ClientConfiguration(0LL);
  __chkstk_darwin(v10);
  double v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  unint64_t v26 = a1;
  sub_1000087E0(a1, v13);
  unint64_t v15 = sub_10004D3A4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ClientConfiguration.CodingKeys,  &type metadata for ClientConfiguration.CodingKeys,  v15,  v13,  v14);
  if (v2) {
    return sub_100007A28(v26);
  }
  char v30 = 0;
  uint64_t v16 = v25;
  KeyedDecodingContainer.decode(_:forKey:)(&v30, v25);
  *(void *)double v12 = v17;
  char v29 = 1;
  char v18 = KeyedDecodingContainer.decode(_:forKey:)(&v29, v16);
  uint64_t v19 = v7;
  v12[8] = v18 & 1;
  char v28 = 2;
  v12[9] = KeyedDecodingContainer.decode(_:forKey:)(&v28, v25) & 1;
  type metadata accessor for DateComponents(0LL);
  v27[1] = 3;
  sub_1000078F8( &qword_100079040,  (uint64_t (*)(uint64_t))&type metadata accessor for DateComponents,  (uint64_t)&protocol conformance descriptor for DateComponents);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v6);
  sub_10004D3E8((uint64_t)v6, (uint64_t)&v12[*(int *)(v10 + 28)]);
  v27[0] = 4;
  uint64_t v20 = v25;
  char v21 = KeyedDecodingContainer.decode(_:forKey:)(v27, v25);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v20);
  v12[*(int *)(v10 + 32)] = v21 & 1;
  sub_100019D94((uint64_t)v12, v24);
  sub_100007A28(v26);
  return sub_10004D430((uint64_t)v12);
}

uint64_t sub_10004D300()
{
  return sub_10004CDB4(*v0);
}

uint64_t sub_10004D308@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10004D984(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10004D32C(uint64_t a1)
{
  unint64_t v2 = sub_10004D3A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004D354(uint64_t a1)
{
  unint64_t v2 = sub_10004D3A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10004D37C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10004D018(a1, a2);
}

uint64_t sub_10004D390(void *a1)
{
  return sub_10004CE44(a1);
}

unint64_t sub_10004D3A4()
{
  unint64_t result = qword_100079038;
  if (!qword_100079038)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005EBB4, &type metadata for ClientConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100079038);
  }

  return result;
}

uint64_t sub_10004D3E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005394(&qword_100077670);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004D430(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ClientConfiguration(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10004D46C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100005394(&qword_100077670);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004D4B4(uint64_t a1, void (*a2)(char *, uint64_t))
{
  uint64_t v4 = sub_100005394(&qword_1000787D0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = static os_log_type_t.debug.getter(v5);
  uint64_t v9 = sub_100005394(&qword_100079660);
  uint64_t v10 = swift_allocObject(v9, 72LL, 7LL);
  *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
  uint64_t v19 = a1;
  swift_errorRetain(a1);
  uint64_t v11 = sub_100005394(&qword_100076D70);
  uint64_t v12 = String.init<A>(describing:)(&v19, v11);
  uint64_t v14 = v13;
  *(void *)(v10 + 56) = &type metadata for String;
  *(void *)(v10 + 64) = sub_100005854();
  *(void *)(v10 + 3sub_100007A28(v0 + 2) = v12;
  *(void *)(v10 + 40) = v14;
  sub_100005818();
  unint64_t v15 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:type:_:)("Failed reading client configuration %@", 38LL, 2LL, &_mh_execute_header, v15, v8, v10);
  swift_bridgeObjectRelease(v10);

  uint64_t v16 = type metadata accessor for ClientConfiguration(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v7, 1LL, 1LL, v16);
  a2(v7, a1);
  return sub_10000D20C((uint64_t)v7, &qword_1000787D0);
}

uint64_t sub_10004D638(uint64_t a1, void (*a2)(char *, void))
{
  uint64_t v4 = sub_100005394(&qword_1000787D0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ClientConfiguration(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100005394(&qword_100079660);
  uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_10005B2C0;
  sub_100019D94(a1, (uint64_t)v10);
  uint64_t v13 = String.init<A>(describing:)(v10, v7);
  uint64_t v15 = v14;
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = sub_100005854();
  *(void *)(v12 + 3sub_100007A28(v0 + 2) = v13;
  *(void *)(v12 + 40) = v15;
  sub_100005818();
  uint64_t v16 = (void *)static OS_os_log.default.getter();
  uint64_t v17 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)("Read client configuration %@", 28LL, 2LL, &_mh_execute_header, v16, v17, v12);
  swift_bridgeObjectRelease(v12);

  sub_100019D94(a1, (uint64_t)v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0LL, 1LL, v7);
  a2(v6, 0LL);
  return sub_10000D20C((uint64_t)v6, &qword_1000787D0);
}

uint64_t storeEnumTagSinglePayload for ClientConfiguration.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10004D82C + 4 * byte_10005E9FA[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10004D860 + 4 * byte_10005E9F5[v4]))();
}

uint64_t sub_10004D860(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004D868(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10004D870LL);
  }
  return result;
}

uint64_t sub_10004D87C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10004D884LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10004D888(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004D890(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClientConfiguration.CodingKeys()
{
  return &type metadata for ClientConfiguration.CodingKeys;
}

unint64_t sub_10004D8B0()
{
  unint64_t result = qword_100079058;
  if (!qword_100079058)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005EB8C, &type metadata for ClientConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100079058);
  }

  return result;
}

unint64_t sub_10004D8F8()
{
  unint64_t result = qword_100079060;
  if (!qword_100079060)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005EAFC, &type metadata for ClientConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100079060);
  }

  return result;
}

unint64_t sub_10004D940()
{
  unint64_t result = qword_100079068;
  if (!qword_100079068)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005EB24, &type metadata for ClientConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100079068);
  }

  return result;
}

uint64_t sub_10004D984(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000012LL && a2 == 0x8000000100058E10LL)
  {
    unint64_t v4 = 0x8000000100058E10LL;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000100058E10LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
    goto LABEL_6;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v6 = 0x8000000100058E30LL;
    if (a2 == 0x8000000100058E30LL) {
      goto LABEL_11;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000100058E30LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if (a1 == 0xD00000000000001CLL && a2 == 0x8000000100055AD0LL)
  {
    unint64_t v7 = 0x8000000100055AD0LL;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000100055AD0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_17;
  }

  if (a1 == 0xD000000000000016LL && a2 == 0x8000000100058E50LL)
  {
    unint64_t v8 = 0x8000000100058E50LL;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x8000000100058E50LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_23;
  }

  if (a1 == 0xD000000000000015LL && a2 == 0x8000000100058E70LL)
  {
    swift_bridgeObjectRelease(0x8000000100058E70LL);
    return 4LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x8000000100058E70LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t sub_10004DB78(uint64_t a1)
{
  __int16 v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t *Scheduler.mainThreadScheduler.unsafeMutableAddressor()
{
  if (qword_100076B30 != -1) {
    swift_once(&qword_100076B30, sub_10004DF9C);
  }
  return &static Scheduler.mainThreadScheduler;
}

uint64_t sub_10004DBE4()
{
  uint64_t v0 = type metadata accessor for _ImmediateScheduler();
  uint64_t result = swift_allocObject(v0, 16LL, 7LL);
  qword_100079978 = v0;
  unk_100079980 = &off_10006F9B8;
  static Scheduler.immediateScheduler = result;
  return result;
}

uint64_t *Scheduler.immediateScheduler.unsafeMutableAddressor()
{
  if (qword_100076B20 != -1) {
    swift_once(&qword_100076B20, sub_10004DBE4);
  }
  return &static Scheduler.immediateScheduler;
}

uint64_t static Scheduler.immediateScheduler.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10004DE40(&qword_100076B20, (uint64_t)&static Scheduler.immediateScheduler, (uint64_t)sub_10004DBE4, a1);
}

uint64_t static Scheduler.immediateScheduler.setter(void *a1)
{
  return sub_10004DEBC(a1, &qword_100076B20, static Scheduler.immediateScheduler, (uint64_t)sub_10004DBE4);
}

uint64_t (*static Scheduler.immediateScheduler.modify(uint64_t a1))(void)
{
  if (qword_100076B20 != -1) {
    swift_once(&qword_100076B20, sub_10004DBE4);
  }
  swift_beginAccess(static Scheduler.immediateScheduler, a1, 33LL, 0LL);
  return j_j__swift_endAccess;
}

uint64_t sub_10004DD10()
{
  uint64_t v0 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100005310();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchQoS.QoSClass.default(_:), v0);
  uint64_t v4 = static OS_dispatch_queue.global(qos:)(v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v5 = type metadata accessor for _QueueScheduler();
  uint64_t result = swift_allocObject(v5, 24LL, 7LL);
  *(void *)(result + swift_weakDestroy(v0 + 16) = v4;
  qword_1000799A0 = v5;
  unk_1000799A8 = &off_10006FA08;
  static Scheduler.globalAsyncScheduler = result;
  return result;
}

uint64_t *Scheduler.globalAsyncScheduler.unsafeMutableAddressor()
{
  if (qword_100076B28 != -1) {
    swift_once(&qword_100076B28, sub_10004DD10);
  }
  return &static Scheduler.globalAsyncScheduler;
}

uint64_t static Scheduler.globalAsyncScheduler.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10004DE40(&qword_100076B28, (uint64_t)&static Scheduler.globalAsyncScheduler, (uint64_t)sub_10004DD10, a1);
}

uint64_t sub_10004DE40@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  swift_beginAccess(a2, v7, 0LL, 0LL);
  return sub_100007E2C(a2, a4);
}

uint64_t static Scheduler.globalAsyncScheduler.setter(void *a1)
{
  return sub_10004DEBC(a1, &qword_100076B28, &static Scheduler.globalAsyncScheduler, (uint64_t)sub_10004DD10);
}

uint64_t sub_10004DEBC(void *a1, void *a2, void *a3, uint64_t a4)
{
  if (*a2 != -1LL) {
    swift_once(a2, a4);
  }
  swift_beginAccess(a3, v7, 33LL, 0LL);
  sub_100028F3C(a3, a1);
  swift_endAccess(v7);
  return sub_100007A28(a1);
}

uint64_t (*static Scheduler.globalAsyncScheduler.modify(uint64_t a1))(void)
{
  if (qword_100076B28 != -1) {
    swift_once(&qword_100076B28, sub_10004DD10);
  }
  swift_beginAccess(&static Scheduler.globalAsyncScheduler, a1, 33LL, 0LL);
  return j_j__swift_endAccess;
}

uint64_t sub_10004DF9C()
{
  uint64_t v0 = type metadata accessor for _MainThreadScheduler();
  uint64_t result = swift_allocObject(v0, 16LL, 7LL);
  qword_1000799C8 = v0;
  unk_1000799D0 = &off_10006F998;
  static Scheduler.mainThreadScheduler = result;
  return result;
}

uint64_t static Scheduler.mainThreadScheduler.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10004DE40(&qword_100076B30, (uint64_t)&static Scheduler.mainThreadScheduler, (uint64_t)sub_10004DF9C, a1);
}

uint64_t static Scheduler.mainThreadScheduler.setter(void *a1)
{
  return sub_10004DEBC(a1, &qword_100076B30, static Scheduler.mainThreadScheduler, (uint64_t)sub_10004DF9C);
}

uint64_t (*static Scheduler.mainThreadScheduler.modify(uint64_t a1))(void)
{
  if (qword_100076B30 != -1) {
    swift_once(&qword_100076B30, sub_10004DF9C);
  }
  swift_beginAccess(static Scheduler.mainThreadScheduler, a1, 33LL, 0LL);
  return j_j__swift_endAccess;
}

id static Scheduler.scheduler(with:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = type metadata accessor for _QueueScheduler();
  uint64_t v4 = swift_allocObject(v3, 24LL, 7LL);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a1;
  a2[3] = v3;
  a2[4] = (uint64_t)&off_10006FA08;
  *a2 = v4;
  return a1;
}

uint64_t type metadata accessor for _QueueScheduler()
{
  return objc_opt_self(&OBJC_CLASS____TtC20FMIPClientXPCServiceP33_7ADD31A58049705285988E1B1F7A98B815_QueueScheduler);
}

uint64_t static Scheduler.serialDispatchQueueScheduler(name:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v18 = sub_100005310();
  static DispatchQoS.default.getter(v18);
  uint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v12 = sub_1000078F8( (unint64_t *)&qword_100076B38,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v13 = sub_100005394((uint64_t *)&unk_100078770);
  uint64_t v14 = sub_100007938((unint64_t *)&qword_100076B40, (uint64_t *)&unk_100078770);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v13, v14, v6, v12);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v2);
  uint64_t v15 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0LL,  0xE000000000000000LL,  v11,  v8,  v5,  0LL);
  uint64_t v16 = type metadata accessor for _QueueScheduler();
  uint64_t result = swift_allocObject(v16, 24LL, 7LL);
  *(void *)(result + swift_weakDestroy(v0 + 16) = v15;
  a1[3] = v16;
  a1[4] = (uint64_t)&off_10006FA08;
  *a1 = result;
  return result;
}

id static Scheduler.operationQueueScheduler(maxConcurrentOperationCount:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for _OperationQueueScheduler();
  uint64_t v5 = swift_allocObject(v4, 24LL, 7LL);
  id v6 = [objc_allocWithZone(NSOperationQueue) init];
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v6;
  id result = [v6 setMaxConcurrentOperationCount:a1];
  a2[3] = v4;
  a2[4] = (uint64_t)&off_10006F9E8;
  *a2 = v5;
  return result;
}

uint64_t type metadata accessor for _OperationQueueScheduler()
{
  return objc_opt_self(&OBJC_CLASS____TtC20FMIPClientXPCServiceP33_7ADD31A58049705285988E1B1F7A98B824_OperationQueueScheduler);
}

uint64_t Scheduler.deinit()
{
  return v0;
}

uint64_t type metadata accessor for Scheduler()
{
  return objc_opt_self(&OBJC_CLASS____TtC20FMIPClientXPCService9Scheduler);
}

uint64_t (*sub_10004E3A0(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_10004E3DC()
{
  uint64_t v15 = _swiftEmptyArrayStorage;
  uint64_t v1 = *(dispatch_queue_s **)(v0 + 32);
  uint64_t v2 = swift_allocObject(&unk_10006FDA8, 32LL, 7LL);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = &v15;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject(&unk_10006FDD0, 32LL, 7LL);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = sub_10004FEC4;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_100010FA0;
  uint64_t v14 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10003CE54;
  void aBlock[3] = &unk_10006FDE8;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v14;
  swift_retain();
  swift_retain();
  swift_release(v5);
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v3, "", 92LL, 63LL, 26LL, 1LL);
  uint64_t result = swift_release(v3);
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v7 = v15;
    uint64_t v8 = v15[2];
    if (v8)
    {
      swift_bridgeObjectRetain(v15);
      uint64_t v9 = v7 + 5;
      do
      {
        uint64_t v11 = (void (*)(uint64_t))*(v9 - 1);
        uint64_t v10 = *v9;
        uint64_t v12 = swift_retain();
        v11(v12);
        swift_release(v10);
        v9 += 2;
        --v8;
      }

      while (v8);
      swift_bridgeObjectRelease(v7);
      uint64_t v7 = v15;
    }

    swift_release(v2);
    return swift_bridgeObjectRelease(v7);
  }

  return result;
}

uint64_t sub_10004E564(uint64_t *a1, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    uint64_t v3 = &_swiftEmptyArrayStorage;
LABEL_5:
    uint64_t v7 = *a1;
    *a1 = (uint64_t)v3;
    return swift_bridgeObjectRelease(v7);
  }

  *(_BYTE *)(a2 + swift_weakDestroy(v0 + 16) = 1;
  uint64_t v5 = (void *)(a2 + 24);
  uint64_t result = swift_beginAccess(a2 + 24, v8, 1LL, 0LL);
  uint64_t v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *uint64_t v5 = 0LL;
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

uint64_t sub_10004E5E4()
{
  unsigned __int8 v10 = 0;
  uint64_t v1 = *(dispatch_queue_s **)(v0 + 32);
  uint64_t v2 = swift_allocObject(&unk_10006FD30, 32LL, 7LL);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = &v10;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject(&unk_10006FD58, 32LL, 7LL);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = sub_10003E6F8;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_100010FA0;
  uint64_t v9 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10003CE54;
  void aBlock[3] = &unk_10006FD70;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v9;
  swift_retain();
  swift_retain();
  swift_release(v5);
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v3, "", 92LL, 85LL, 26LL, 1LL);
  uint64_t result = swift_release(v3);
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v7 = v10;
    swift_release(v2);
    return v7;
  }

  return result;
}

uint64_t sub_10004E71C(uint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  if (*(_BYTE *)(result + 16) == 1)
  {
    *a2 = 1;
  }

  else
  {
    uint64_t v7 = sub_10004E3A0((uint64_t)v15);
    if (*v6)
    {
      uint64_t v8 = (void **)v6;
      uint64_t v9 = swift_allocObject(&unk_10006FCB8, 32LL, 7LL);
      *(void *)(v9 + swift_weakDestroy(v0 + 16) = a3;
      *(void *)(v9 + 24) = a4;
      unsigned __int8 v10 = *v8;
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
      *uint64_t v8 = v10;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unsigned __int8 v10 = sub_10002F980(0LL, v10[2] + 1LL, 1, v10);
        *uint64_t v8 = v10;
      }

      unint64_t v13 = v10[2];
      unint64_t v12 = v10[3];
      if (v13 >= v12 >> 1)
      {
        unsigned __int8 v10 = sub_10002F980((void *)(v12 > 1), v13 + 1, 1, v10);
        *uint64_t v8 = v10;
      }

      v10[2] = v13 + 1;
      uint64_t v14 = &v10[2 * v13];
      v14[4] = sub_10003E69C;
      v14[5] = v9;
    }

    return ((uint64_t (*)(_BYTE *, void))v7)(v15, 0LL);
  }

  return result;
}

uint64_t sub_10004E834()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for CancellationToken()
{
  return objc_opt_self(&OBJC_CLASS____TtC20FMIPClientXPCServiceP33_7ADD31A58049705285988E1B1F7A98B817CancellationToken);
}

uint64_t sub_10004E880()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_BYTE *)(v1 + swift_weakDestroy(v0 + 16) = 0;
  *(void *)(v1 + 24) = 0LL;
  unint64_t v16 = sub_100005310();
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t v12 = sub_1000078F8( (unint64_t *)&qword_100076B38,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v13 = sub_100005394((uint64_t *)&unk_100078770);
  uint64_t v14 = sub_100007938((unint64_t *)&qword_100076B40, (uint64_t *)&unk_100078770);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v6, v12);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v2);
  *(void *)(v1 + 3sub_100007A28(v0 + 2) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000026LL,  0x80000001000590C0LL,  v11,  v8,  v5,  0LL);
  return v1;
}

uint64_t sub_10004EA48()
{
  return sub_10004E3DC();
}

uint64_t type metadata accessor for _ImmediateScheduler()
{
  return objc_opt_self(&OBJC_CLASS____TtC20FMIPClientXPCServiceP33_7ADD31A58049705285988E1B1F7A98B819_ImmediateScheduler);
}

uint64_t sub_10004EA88@<X0>(void (*a1)(void *)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CancellationToken();
  swift_allocObject(v4, 40LL, 7LL);
  void v6[3] = v4;
  _OWORD v6[4] = &off_10006F9D8;
  v6[0] = sub_10004E880();
  a1(v6);
  sub_100007A28(v6);
  swift_allocObject(v4, 40LL, 7LL);
  uint64_t result = sub_10004E880();
  a2[3] = v4;
  a2[4] = (uint64_t)&off_10006F9D8;
  *a2 = result;
  return result;
}

uint64_t sub_10004EB28@<X0>(void (*a1)(id)@<X0>, uint64_t *a2@<X8>, double a3@<D0>)
{
  id v5 = [(id)objc_opt_self(NSThread) sleepForTimeInterval:a3];
  a1(v5);
  uint64_t v6 = type metadata accessor for CancellationToken();
  swift_allocObject(v6, 40LL, 7LL);
  uint64_t result = sub_10004E880();
  a2[3] = v6;
  a2[4] = (uint64_t)&off_10006F9D8;
  *a2 = result;
  return result;
}

void sub_10004EBB0(void (*a1)(void *)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CancellationToken();
  swift_allocObject(v6, 40LL, 7LL);
  uint64_t v7 = sub_10004E880();
  if ([(id)objc_opt_self(NSThread) isMainThread])
  {
    uint64_t v14 = (void *)v6;
    uint64_t v15 = (uint64_t (*)())&off_10006F9D8;
    v13[0] = v7;
    swift_retain();
    a1(v13);
    sub_100007A28(v13);
LABEL_5:
    a3[3] = v6;
    a3[4] = (uint64_t)&off_10006F9D8;
    *a3 = v7;
    return;
  }

  uint64_t v8 = (void *)swift_allocObject(&unk_10006FCE0, 40LL, 7LL);
  void v8[2] = v7;
  v8[3] = a1;
  v8[4] = a2;
  swift_retain();
  swift_retain();
  uint64_t v9 = CFRunLoopGetMain();
  if (kCFRunLoopDefaultMode)
  {
    uint64_t v10 = v9;
    uint64_t v15 = sub_10004FF40;
    unint64_t v16 = v8;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256LL;
    void v13[2] = sub_10004DB74;
    uint64_t v14 = &unk_10006FCF8;
    uint64_t v11 = _Block_copy(v13);
    uint64_t v12 = v16;
    swift_retain();
    swift_release(v12);
    CFRunLoopPerformBlock(v10, kCFRunLoopDefaultMode, v11);
    _Block_release(v11);
    swift_release(v8);

    goto LABEL_5;
  }

  __break(1u);
}

void sub_10004ED44(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___NSTimer);
  uint64_t v9 = swift_allocObject(&unk_10006FBC8, 32LL, 7LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  char v30 = sub_10003E69C;
  uint64_t v31 = v9;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v27 = 1107296256LL;
  char v28 = sub_100006800;
  char v29 = &unk_10006FBE0;
  uint64_t v10 = _Block_copy(&aBlock);
  uint64_t v11 = v31;
  swift_retain();
  swift_release(v11);
  id v12 = [v8 scheduledTimerWithTimeInterval:0 repeats:v10 block:a4];
  _Block_release(v10);
  uint64_t v13 = type metadata accessor for CancellationToken();
  swift_allocObject(v13, 40LL, 7LL);
  uint64_t v14 = sub_10004E880();
  uint64_t v15 = swift_allocObject(&unk_10006FC18, 24LL, 7LL);
  uint64_t v16 = v15 + 16;
  uint64_t v24 = v12;
  swift_unknownObjectWeakInit(v15 + 16, v12);
  char v25 = 0;
  uint64_t v17 = *(dispatch_queue_s **)(v14 + 32);
  unint64_t v18 = (void *)swift_allocObject(&unk_10006FC40, 48LL, 7LL);
  v18[2] = v14;
  v18[3] = &v25;
  v18[4] = sub_10004FE60;
  void v18[5] = v15;
  uint64_t v19 = swift_allocObject(&unk_10006FC68, 32LL, 7LL);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = sub_10004FE94;
  *(void *)(v19 + 24) = v18;
  char v30 = sub_1000078F0;
  uint64_t v31 = v19;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v27 = 1107296256LL;
  char v28 = sub_10003CE54;
  char v29 = &unk_10006FC80;
  uint64_t v20 = _Block_copy(&aBlock);
  uint64_t v21 = v31;
  swift_retain_n(v15, 3LL);
  swift_retain();
  swift_retain();
  swift_release(v21);
  dispatch_sync(v17, v20);
  _Block_release(v20);
  LOBYTE(v21) = swift_isEscapingClosureAtFileLocation(v19, "", 92LL, 95LL, 26LL, 1LL);
  swift_release(v19);
  if ((v21 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    if (v25 == 1
      && (swift_beginAccess(v16, &aBlock, 0LL, 0LL), (uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v16)) != 0LL))
    {
      uint64_t v23 = Strong;
      objc_msgSend(Strong, "invalidate", v24);
      swift_release(v15);
      swift_release(v18);
    }

    else
    {
      swift_release(v15);
      swift_release(v18);
    }

    swift_release_n(v15, 2LL);
    a3[3] = v13;
    a3[4] = (uint64_t)&off_10006F9D8;

    *a3 = v14;
  }

void sub_10004F020(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = Strong;
    [Strong invalidate];
  }

uint64_t type metadata accessor for _MainThreadScheduler()
{
  return objc_opt_self(&OBJC_CLASS____TtC20FMIPClientXPCServiceP33_7ADD31A58049705285988E1B1F7A98B820_MainThreadScheduler);
}

void sub_10004F09C(void (*a1)(void *)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

void sub_10004F0BC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
}

uint64_t sub_10004F0DC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = *(void *)(v2 + 16);
  uint64_t v13 = swift_allocObject(&unk_10006FB78, 32LL, 7LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v13 + 24) = a2;
  aBlock[4] = sub_10003E69C;
  uint64_t v23 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  void aBlock[3] = &unk_10006FB90;
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v18 = sub_100007938(&qword_100076D58, (uint64_t *)&unk_100078740);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v23);
}

uint64_t sub_10004F2C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v25 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v23 = *(void *)(v10 - 8);
  uint64_t v24 = v10;
  __chkstk_darwin(v10);
  id v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for CancellationToken();
  swift_allocObject(v13, 40LL, 7LL);
  uint64_t v14 = sub_10004E880();
  v22[1] = *(void *)(v3 + 16);
  uint64_t v15 = (void *)swift_allocObject(&unk_10006FB28, 40LL, 7LL);
  uint64_t v15[2] = v14;
  void v15[3] = a1;
  v15[4] = a2;
  aBlock[4] = sub_10004FDFC;
  char v28 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  void aBlock[3] = &unk_10006FB40;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v17 = swift_retain();
  static DispatchQoS.unspecified.getter(v17);
  unint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v19 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v20 = sub_100007938(&qword_100076D58, (uint64_t *)&unk_100078740);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v19, v20, v7, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v9, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v24);
  uint64_t result = swift_release(v28);
  a3[3] = v13;
  a3[4] = (uint64_t)&off_10006F9D8;
  *a3 = v14;
  return result;
}

uint64_t sub_10004F4F8(uint64_t a1, void (*a2)(void *))
{
  uint64_t result = sub_10004E5E4();
  if ((result & 1) == 0)
  {
    v5[3] = type metadata accessor for CancellationToken();
    v5[4] = &off_10006F9D8;
    v5[0] = a1;
    swift_retain();
    a2(v5);
    return sub_100007A28(v5);
  }

  return result;
}

uint64_t sub_10004F568@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t v29 = a1;
  uint64_t v35 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v34 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v32 = *(void *)(v10 - 8);
  uint64_t v33 = v10;
  __chkstk_darwin(v10);
  id v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchTime(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)v28 - v18;
  uint64_t v31 = type metadata accessor for CancellationToken();
  swift_allocObject(v31, 40LL, 7LL);
  uint64_t v30 = sub_10004E880();
  v28[1] = *(void *)(v4 + 16);
  static DispatchTime.now()(v30);
  + infix(_:_:)(v17, a4);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v14 + 8);
  v20(v17, v13);
  aBlock[4] = v29;
  uint64_t v38 = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10004DB74;
  void aBlock[3] = &unk_10006FAF0;
  uint64_t v21 = _Block_copy(aBlock);
  uint64_t v22 = swift_retain();
  static DispatchQoS.unspecified.getter(v22);
  Swift::String v36 = _swiftEmptyArrayStorage;
  uint64_t v23 = sub_1000078F8( &qword_100076D50,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v24 = sub_100005394((uint64_t *)&unk_100078740);
  uint64_t v25 = sub_100007938(&qword_100076D58, (uint64_t *)&unk_100078740);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v24, v25, v7, v23);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v19, v12, v9, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v33);
  v20(v19, v13);
  uint64_t result = swift_release(v38);
  uint64_t v27 = v35;
  void v35[3] = v31;
  v27[4] = (uint64_t)&off_10006F9D8;
  *uint64_t v27 = v30;
  return result;
}

uint64_t sub_10004F814()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t sub_10004F838(uint64_t a1, uint64_t a2)
{
  return sub_10004F0DC(a1, a2);
}

uint64_t sub_10004F858@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_10004F2C4(a1, a2, a3);
}

uint64_t sub_10004F878@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  return sub_10004F568(a1, a2, a3, a4);
}

void sub_10004F898(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for CancellationToken();
  swift_allocObject(v8, 40LL, 7LL);
  uint64_t v9 = sub_10004E880();
  uint64_t v10 = (void *)swift_allocObject(&unk_10006FAB0, 40LL, 7LL);
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = v9;
  v14[4] = sub_10004FDEC;
  uint64_t v15 = v10;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256LL;
  __int128 v14[2] = sub_10004DB74;
  void v14[3] = &unk_10006FAC8;
  uint64_t v11 = _Block_copy(v14);
  id v12 = (void *)objc_opt_self(&OBJC_CLASS___NSBlockOperation);
  swift_retain();
  swift_retain();
  id v13 = [v12 blockOperationWithBlock:v11];
  _Block_release(v11);
  swift_release(v15);
  [*(id *)(v4 + 16) addOperation:v13];
  a3[3] = v8;
  a3[4] = (uint64_t)&off_10006F9D8;

  *a3 = v9;
}

uint64_t sub_10004F9DC(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  void v6[3] = type metadata accessor for CancellationToken();
  _OWORD v6[4] = &off_10006F9D8;
  v6[0] = a3;
  swift_retain();
  a1(v6);
  return sub_100007A28(v6);
}

uint64_t sub_10004FA40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  void (*v13)(void *__return_ptr, uint64_t (*)(), void *, uint64_t, uint64_t, double);
  uint64_t result;
  void v15[5];
  void v16[3];
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];
  uint64_t v8 = type metadata accessor for CancellationToken();
  swift_allocObject(v8, 40LL, 7LL);
  uint64_t v9 = sub_10004E880();
  if (qword_100076B28 != -1) {
    swift_once(&qword_100076B28, sub_10004DD10);
  }
  swift_beginAccess(&static Scheduler.globalAsyncScheduler, v19, 0LL, 0LL);
  sub_100007E2C((uint64_t)&static Scheduler.globalAsyncScheduler, (uint64_t)v16);
  uint64_t v10 = v17;
  uint64_t v11 = v18;
  sub_1000087E0(v16, v17);
  id v12 = (void *)swift_allocObject(&unk_10006FA88, 40LL, 7LL);
  v12[2] = v9;
  v12[3] = a1;
  v12[4] = a2;
  id v13 = *(void (**)(void *__return_ptr, uint64_t (*)(), void *, uint64_t, uint64_t, double))(v11 + 24);
  swift_retain();
  swift_retain();
  v13(v15, sub_10004FD84, v12, v10, v11, a4);
  swift_release(v12);
  sub_100007A28(v15);
  uint64_t result = sub_100007A28(v16);
  a3[3] = v8;
  a3[4] = (uint64_t)&off_10006F9D8;
  *a3 = v9;
  return result;
}

void sub_10004FB9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(*(void *)v2 + 16LL);
  v7[4] = a1;
  uint64_t v8 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256LL;
  v7[2] = sub_10004DB74;
  v7[3] = &unk_10006FA28;
  uint64_t v5 = _Block_copy(v7);
  uint64_t v6 = v8;
  swift_retain(a2);
  swift_release(v6);
  [v4 addOperationWithBlock:v5];
  _Block_release(v5);
}

void sub_10004FC3C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

uint64_t sub_10004FC5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  return sub_10004FA40(a1, a2, a3, a4);
}

uint64_t sub_10004FC7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100007A28(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004FC8C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_10004FC94(void (*a1)(void), uint64_t a2)
{
  if ([(id)objc_opt_self(NSThread) isMainThread])
  {
    a1();
  }

  else
  {
    uint64_t v4 = CFRunLoopGetMain();
    if (kCFRunLoopDefaultMode)
    {
      uint64_t v5 = v4;
      v8[4] = a1;
      uint64_t v9 = a2;
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 1107296256LL;
      void v8[2] = sub_10004DB74;
      v8[3] = &unk_10006FA50;
      uint64_t v6 = _Block_copy(v8);
      uint64_t v7 = v9;
      swift_retain(a2);
      swift_release(v7);
      CFRunLoopPerformBlock(v5, kCFRunLoopDefaultMode, v6);
      _Block_release(v6);
    }

    else
    {
      __break(1u);
    }
  }

uint64_t sub_10004FD84()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 24);
  uint64_t result = sub_10004E5E4();
  if ((result & 1) == 0) {
    return v1();
  }
  return result;
}

uint64_t sub_10004FDC0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10004FDEC()
{
  return sub_10004F9DC(*(void (**)(void *))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10004FDFC()
{
  return sub_10004F4F8(*(void *)(v0 + 16), *(void (**)(void *))(v0 + 24));
}

uint64_t sub_10004FE18()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004FE3C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10004FE60()
{
}

uint64_t sub_10004FE68()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10004FE94()
{
  return sub_10004E71C(*(void *)(v0 + 16), *(_BYTE **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_10004FEA0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004FEB4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004FEC4()
{
  return sub_10004E564(*(uint64_t **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10004FECC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t DeviceDiscoveryAutomationDevice.transportAddresses.getter()
{
  return sub_100050304(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t DeviceDiscoveryAutomationDevice.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t DeviceDiscoveryAutomationDevice.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(v2[1]);
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t DeviceDiscoveryAutomationDevice.idsUniqueIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

uint64_t DeviceDiscoveryAutomationDevice.idsUniqueIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 24));
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

Swift::Void (__swiftcall *DeviceDiscoveryAutomationDevice.idsUniqueIdentifier.modify())()
{
  return Future.didCancel();
}

uint64_t DeviceDiscoveryAutomationDevice.bluetoothAddress.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain(*(void *)(v0 + 40));
  return v1;
}

uint64_t DeviceDiscoveryAutomationDevice.bluetoothAddress.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v2 + 40));
  *(void *)(v2 + 3sub_100007A28(v0 + 2) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

Swift::Void (__swiftcall *DeviceDiscoveryAutomationDevice.bluetoothAddress.modify())()
{
  return Future.didCancel();
}

uint64_t sub_100050094()
{
  unint64_t v1 = 0xD000000000000013LL;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000010LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701667182LL;
  }
}

uint64_t sub_1000500F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10005084C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100050118(uint64_t a1)
{
  unint64_t v2 = sub_100050808();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100050140(uint64_t a1)
{
  unint64_t v2 = sub_100050808();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t DeviceDiscoveryAutomationDevice.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100005394(&qword_100079510);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000087E0(a1, v9);
  unint64_t v11 = sub_100050808();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for DeviceDiscoveryAutomationDevice.CodingKeys,  &type metadata for DeviceDiscoveryAutomationDevice.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v22 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v22, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v21 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v21, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    char v20 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v20, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double DeviceDiscoveryAutomationDevice.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }

  return result;
}

uint64_t sub_1000502E4(void *a1)
{
  return DeviceDiscoveryAutomationDevice.encode(to:)(a1);
}

uint64_t sub_1000502F8()
{
  return sub_100050304(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100050304(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a4) {
    goto LABEL_12;
  }
  unint64_t v6 = a4;
  Hasher.init(_seed:)(v52, *((void *)&_swiftEmptySetSingleton + 5));
  Hasher._combine(_:)(1uLL);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v52, a3, v6);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *((_BYTE *)&_swiftEmptySetSingleton + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)((char *)&_swiftEmptySetSingleton + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *((void *)&_swiftEmptySetSingleton + 6);
    while (1)
    {
      uint64_t v13 = v12 + 24 * v10;
      if (!*(_BYTE *)(v13 + 16))
      {
        uint64_t v14 = *(void *)(v13 + 8);
        BOOL v15 = *(void *)v13 == a3 && v14 == v6;
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v13, v14, a3, v6, 0LL) & 1) != 0) {
          break;
        }
      }

      unint64_t v10 = (v10 + 1) & v11;
    }

    swift_bridgeObjectRelease(v6);
LABEL_12:
    if (!a2) {
      return (uint64_t)&_swiftEmptySetSingleton;
    }
    goto LABEL_33;
  }

LABEL_43:
  swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
  int v39 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptySetSingleton);
  unint64_t v40 = *((void *)&_swiftEmptySetSingleton + 2);
  unint64_t v41 = *((void *)&_swiftEmptySetSingleton + 3);
  uint64_t result = swift_bridgeObjectRetain(a2);
  if (v41 > v40)
  {
    if ((v39 & 1) == 0) {
      uint64_t result = (uint64_t)sub_100037150();
    }
    goto LABEL_59;
  }

  uint64_t v42 = v40 + 1;
  if (v39) {
    sub_100035DE8(v42);
  }
  else {
    sub_10003764C(v42);
  }
  Hasher.init(_seed:)(v52, *((void *)&_swiftEmptySetSingleton + 5));
  Hasher._combine(_:)(2uLL);
  String.hash(into:)(v52, a1, a2);
  uint64_t result = Hasher._finalize()();
  uint64_t v43 = -1LL << *((_BYTE *)&_swiftEmptySetSingleton + 32);
  unint64_t v6 = result & ~v43;
  if (((*(void *)((char *)&_swiftEmptySetSingleton + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v6) & 1) != 0)
  {
    uint64_t v44 = ~v43;
    uint64_t v45 = *((void *)&_swiftEmptySetSingleton + 6);
    while (1)
    {
      uint64_t v46 = v45 + 24 * v6;
      if (*(_BYTE *)(v46 + 16) == 1)
      {
        uint64_t v47 = *(void *)(v46 + 8);
        if (*(void *)v46 == a1 && v47 == a2) {
          break;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v46, v47, a1, a2, 0LL);
        if ((result & 1) != 0) {
          break;
        }
      }

      unint64_t v6 = (v6 + 1) & v44;
    }

LABEL_58:
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for TransportAddress);
    __break(1u);
  }

LABEL_64:
  __break(1u);
  return result;
}

unint64_t sub_100050808()
{
  unint64_t result = qword_100079518;
  if (!qword_100079518)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005EEE4, &type metadata for DeviceDiscoveryAutomationDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100079518);
  }

  return result;
}

uint64_t sub_10005084C(uint64_t a1, unint64_t a2)
{
  if (a1 == 1701667182 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000013LL)
  {
    unint64_t v7 = 0x80000001000590F0LL;
    if (a2 == 0x80000001000590F0LL) {
      goto LABEL_13;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x80000001000590F0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x8000000100059110LL)
  {
    swift_bridgeObjectRelease(0x8000000100059110LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100059110LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_100050984@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100005394(&qword_100079538);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000087E0(a1, v9);
  unint64_t v11 = sub_100050808();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for DeviceDiscoveryAutomationDevice.CodingKeys,  &type metadata for DeviceDiscoveryAutomationDevice.CodingKeys,  v11,  v9,  v10);
  if (v2)
  {
    sub_100007A28(a1);
    swift_bridgeObjectRelease(0LL);
    return swift_bridgeObjectRelease(0LL);
  }

  else
  {
    char v27 = 0;
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v27, v5);
    uint64_t v14 = v13;
    uint64_t v24 = v12;
    char v26 = 1;
    uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v26, v5);
    uint64_t v17 = v16;
    uint64_t v23 = v15;
    char v25 = 2;
    uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v25, v5);
    uint64_t v19 = v8;
    uint64_t v21 = v20;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v5);
    uint64_t result = sub_100007A28(a1);
    *a2 = v24;
    a2[1] = v14;
    a2[2] = v23;
    a2[3] = v17;
    a2[4] = v18;
    a2[5] = v21;
  }

  return result;
}

uint64_t destroy for DeviceDiscoveryAutomationDevice(void *a1)
{
  return swift_bridgeObjectRelease(a1[5]);
}

void *initializeWithCopy for DeviceDiscoveryAutomationDevice(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for DeviceDiscoveryAutomationDevice(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for DeviceDiscoveryAutomationDevice(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 3sub_100007A28(v0 + 2) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for DeviceDiscoveryAutomationDevice(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceDiscoveryAutomationDevice(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(vsub_100007A28(v0 + 3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceDiscoveryAutomationDevice( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DeviceDiscoveryAutomationDevice()
{
  return &type metadata for DeviceDiscoveryAutomationDevice;
}

uint64_t storeEnumTagSinglePayload for DeviceDiscoveryAutomationDevice.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100050DF0 + 4 * byte_10005ED75[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100050E24 + 4 * byte_10005ED70[v4]))();
}

uint64_t sub_100050E24(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100050E2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100050E34LL);
  }
  return result;
}

uint64_t sub_100050E40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100050E48LL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_100050E4C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100050E54(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceDiscoveryAutomationDevice.CodingKeys()
{
  return &type metadata for DeviceDiscoveryAutomationDevice.CodingKeys;
}

unint64_t sub_100050E74()
{
  unint64_t result = qword_100079520;
  if (!qword_100079520)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005EEBC, &type metadata for DeviceDiscoveryAutomationDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100079520);
  }

  return result;
}

unint64_t sub_100050EBC()
{
  unint64_t result = qword_100079528;
  if (!qword_100079528)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005EE2C, &type metadata for DeviceDiscoveryAutomationDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100079528);
  }

  return result;
}

unint64_t sub_100050F04()
{
  unint64_t result = qword_100079530;
  if (!qword_100079530)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005EE54, &type metadata for DeviceDiscoveryAutomationDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100079530);
  }

  return result;
}

uint64_t Data.write(to:excludeFromBackup:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v18 = a2;
  uint64_t v19 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = &v17[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t result = Data.write(to:options:)(a1, 1073741825LL, a3, a4);
  if (!v4)
  {
    URLResourceValues.init()(result);
    URLResourceValues.isExcludedFromBackup.setter(v18 & 1);
    uint64_t v16 = v19;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v19);
    URL.setResourceValues(_:)(v14);
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v16);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v11);
  }

  return result;
}

ValueMetadata *type metadata accessor for VAClientContextRequestContent()
{
  return &type metadata for VAClientContextRequestContent;
}

ValueMetadata *type metadata accessor for VAClientContextProperties()
{
  return &type metadata for VAClientContextProperties;
}

uint64_t sub_1000510B8()
{
  return 0x6B6F545350416176LL;
}

uint64_t sub_1000510D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x6B6F545350416176LL && a2 == 0xEA00000000006E65LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xEA00000000006E65LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B6F545350416176LL, 0xEA00000000006E65LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100051174(uint64_t a1)
{
  unint64_t v2 = sub_100051488();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005119C(uint64_t a1)
{
  unint64_t v2 = sub_100051488();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000511C4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100005394(&qword_100079550);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000087E0(a1, v9);
  unint64_t v11 = sub_100051488();
  uint64_t v12 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for VAClientContextProperties.CodingKeys,  &type metadata for VAClientContextProperties.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100007A28(a1);
  }
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  uint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_100007A28(a1);
  *a2 = v13;
  a2[1] = v15;
  return result;
}

uint64_t sub_1000512E8(void *a1)
{
  uint64_t v3 = sub_100005394(&qword_100079560);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  uint64_t v8 = v1[1];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1000087E0(a1, v9);
  unint64_t v11 = sub_100051488();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for VAClientContextProperties.CodingKeys,  &type metadata for VAClientContextProperties.CodingKeys,  v11,  v9,  v10);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, v12, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1000513D4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100051400();
  unint64_t result = sub_100051444();
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_100051400()
{
  unint64_t result = qword_100079540;
  if (!qword_100079540)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005EFD4, &type metadata for VAClientContextProperties);
    atomic_store(result, (unint64_t *)&qword_100079540);
  }

  return result;
}

unint64_t sub_100051444()
{
  unint64_t result = qword_100079548;
  if (!qword_100079548)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005EFAC, &type metadata for VAClientContextProperties);
    atomic_store(result, (unint64_t *)&qword_100079548);
  }

  return result;
}

unint64_t sub_100051488()
{
  unint64_t result = qword_100079558;
  if (!qword_100079558)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005F0EC, &type metadata for VAClientContextProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100079558);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for VAClientContextProperties.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10005150C + 4 * byte_10005EF40[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10005152C + 4 * byte_10005EF45[v4]))();
  }
}

_BYTE *sub_10005150C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10005152C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100051534(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10005153C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100051544(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10005154C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for VAClientContextProperties.CodingKeys()
{
  return &type metadata for VAClientContextProperties.CodingKeys;
}

unint64_t sub_10005156C()
{
  unint64_t result = qword_100079568;
  if (!qword_100079568)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005F0C4, &type metadata for VAClientContextProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100079568);
  }

  return result;
}

unint64_t sub_1000515B4()
{
  unint64_t result = qword_100079570;
  if (!qword_100079570)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005F034, &type metadata for VAClientContextProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100079570);
  }

  return result;
}

unint64_t sub_1000515FC()
{
  unint64_t result = qword_100079578;
  if (!qword_100079578)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005F05C, &type metadata for VAClientContextProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100079578);
  }

  return result;
}

uint64_t sub_100051640(char a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD00000000000001CLL;
  unint64_t v3 = 0x8000000100055A90LL;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v4 = 0x8000000100055AB0LL;
    }
    else {
      unint64_t v4 = 0x8000000100055AD0LL;
    }
    unint64_t v5 = 0xD00000000000001CLL;
    int v6 = a2;
    if (a2)
    {
LABEL_6:
      if (v6 == 1) {
        unint64_t v3 = 0x8000000100055AB0LL;
      }
      else {
        unint64_t v3 = 0x8000000100055AD0LL;
      }
      if (v5 != 0xD00000000000001CLL) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
  }

  else
  {
    unint64_t v5 = 0xD000000000000014LL;
    unint64_t v4 = 0x8000000100055A90LL;
    int v6 = a2;
    if (a2) {
      goto LABEL_6;
    }
  }

  unint64_t v2 = 0xD000000000000014LL;
  if (v5 != 0xD000000000000014LL)
  {
LABEL_15:
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v4, v2, v3, 0LL);
    goto LABEL_16;
  }

LABEL_13:
  if (v4 != v3) {
    goto LABEL_15;
  }
  char v7 = 1;
  unint64_t v3 = v4;
LABEL_16:
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  return v7 & 1;
}

uint64_t sub_100051738(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEE00656D614E7473LL;
  uint64_t v3 = 0x72694672656E776FLL;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x73614C72656E776FLL;
    }
    else {
      uint64_t v5 = 0x73656369766564LL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xED0000656D614E74LL;
    }
    else {
      unint64_t v6 = 0xE700000000000000LL;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }

  uint64_t v5 = 0x72694672656E776FLL;
  unint64_t v6 = 0xEE00656D614E7473LL;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      uint64_t v3 = 0x73614C72656E776FLL;
    }
    else {
      uint64_t v3 = 0x73656369766564LL;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xED0000656D614E74LL;
    }
    else {
      unint64_t v2 = 0xE700000000000000LL;
    }
  }

uint64_t sub_100051878(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x6F43737574617473LL;
  }
  else {
    uint64_t v3 = 0x646F43726F727265LL;
  }
  if (v2) {
    unint64_t v4 = 0xE900000000000065LL;
  }
  else {
    unint64_t v4 = 0xEA00000000006564LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x6F43737574617473LL;
  }
  else {
    uint64_t v5 = 0x646F43726F727265LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEA00000000006564LL;
  }
  else {
    unint64_t v6 = 0xE900000000000065LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_100051924(char a1)
{
  __asm { BR              X10 }

uint64_t sub_10005195C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000519DC + 4 * byte_10005F147[a2]))(3158066LL);
}

uint64_t sub_1000519DC(uint64_t a1)
{
  if (a1 == 3158066 && v1 == 0xE300000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 3158066LL, 0xE300000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  return v2 & 1;
}

void sub_100051AB0(char a1)
{
  __asm { BR              X11 }

uint64_t sub_100051B0C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100051BB8 + 4 * byte_10005F154[a2]))(0x49534472656E776FLL);
}

uint64_t sub_100051BB8(uint64_t a1)
{
  if (a1 == 0x49534472656E776FLL && v1 == 0xE900000000000044LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x49534472656E776FLL, 0xE900000000000044LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE900000000000044LL);
  return v2 & 1;
}

uint64_t sub_100051CB0(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0x6449726576726573LL;
  int v3 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v4 = 0x7974696C61636F6CLL;
    }
    else {
      unint64_t v4 = 0xD00000000000001ALL;
    }
    if (v3 == 1) {
      unint64_t v5 = 0xE800000000000000LL;
    }
    else {
      unint64_t v5 = 0x8000000100055B00LL;
    }
    int v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1) {
        unint64_t v2 = 0x7974696C61636F6CLL;
      }
      else {
        unint64_t v2 = 0xD00000000000001ALL;
      }
      if (v6 == 1) {
        unint64_t v7 = 0xE800000000000000LL;
      }
      else {
        unint64_t v7 = 0x8000000100055B00LL;
      }
      if (v4 != v2) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }

  else
  {
    unint64_t v5 = 0xE800000000000000LL;
    unint64_t v4 = 0x6449726576726573LL;
    int v6 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }

  unint64_t v7 = 0xE800000000000000LL;
  if (v4 != 0x6449726576726573LL)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0LL);
    goto LABEL_22;
  }

LABEL_19:
  if (v5 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
  unint64_t v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_100051DC8(uint64_t a1, char a2)
{
  unint64_t v3 = 0xD00000000000001CLL;
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v4 = 0x8000000100055AB0LL;
    }
    else {
      unint64_t v4 = 0x8000000100055AD0LL;
    }
  }

  else
  {
    unint64_t v3 = 0xD000000000000014LL;
    unint64_t v4 = 0x8000000100055A90LL;
  }

  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

void sub_100051E40(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_100051E8C(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE900000000000044LL);
}

void sub_100051F34(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_100051F8C()
{
  return Hasher._finalize()();
}

void sub_100052048(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_100052088()
{
  return Hasher._finalize()();
}

Swift::Int sub_100052110(uint64_t a1, char a2)
{
  unint64_t v3 = 0xD00000000000001CLL;
  Hasher.init(_seed:)(v6, a1);
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v4 = 0x8000000100055AB0LL;
    }
    else {
      unint64_t v4 = 0x8000000100055AD0LL;
    }
  }

  else
  {
    unint64_t v3 = 0xD000000000000014LL;
    unint64_t v4 = 0x8000000100055A90LL;
  }

  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_1000521AC(char *a1)
{
}

void sub_1000521B8()
{
}

void sub_1000521C4()
{
  __asm { BR              X10 }

uint64_t sub_1000521F4(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE300000000000000LL);
}

void sub_100052268(uint64_t a1)
{
}

unint64_t sub_100052270@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000527BC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10005229C()
{
  return ((uint64_t (*)(void))((char *)sub_1000522C0 + 4 * byte_10005F174[*v0]))();
}

void sub_1000522C0(void *a1@<X8>)
{
  *a1 = 3158066LL;
  a1[1] = 0xE300000000000000LL;
}

void sub_1000522D4(void *a1@<X8>)
{
  *a1 = 825503796LL;
  a1[1] = 0xE400000000000000LL;
}

void sub_1000522E8(void *a1@<X8>)
{
  *a1 = 842281012LL;
  a1[1] = 0xE400000000000000LL;
}

void sub_1000522FC(void *a1@<X8>)
{
  *a1 = 859058228LL;
  a1[1] = 0xE400000000000000LL;
}

void sub_100052310(void *a1@<X8>)
{
  *a1 = 875835444LL;
  a1[1] = 0xE400000000000000LL;
}

void sub_100052324(void *a1@<X8>)
{
  *a1 = 892612660LL;
  a1[1] = 0xE400000000000000LL;
}

uint64_t sub_100052338(char *a1, char *a2)
{
  return sub_100051878(*a1, *a2);
}

Swift::Int sub_100052344()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    uint64_t v2 = 0x6F43737574617473LL;
  }
  else {
    uint64_t v2 = 0x646F43726F727265LL;
  }
  if (v1) {
    unint64_t v3 = 0xEA00000000006564LL;
  }
  else {
    unint64_t v3 = 0xE900000000000065LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000523CC(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 0x6F43737574617473LL;
  }
  else {
    uint64_t v2 = 0x646F43726F727265LL;
  }
  if (*v1) {
    unint64_t v3 = 0xEA00000000006564LL;
  }
  else {
    unint64_t v3 = 0xE900000000000065LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100052430(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    uint64_t v3 = 0x6F43737574617473LL;
  }
  else {
    uint64_t v3 = 0x646F43726F727265LL;
  }
  if (v2) {
    unint64_t v4 = 0xEA00000000006564LL;
  }
  else {
    unint64_t v4 = 0xE900000000000065LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000524B4@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  unint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100069578, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_100052510(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x646F43726F727265LL;
  if (*v1) {
    uint64_t v2 = 0x6F43737574617473LL;
  }
  unint64_t v3 = 0xE900000000000065LL;
  if (*v1) {
    unint64_t v3 = 0xEA00000000006564LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100052558()
{
  if (*v0) {
    return 0x6F43737574617473LL;
  }
  else {
    return 0x646F43726F727265LL;
  }
}

uint64_t sub_10005259C@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100069578, v3);
  uint64_t result = swift_bridgeObjectRelease(object);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_1000525FC(uint64_t a1)
{
  unint64_t v2 = sub_100052C98();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100052624(uint64_t a1)
{
  unint64_t v2 = sub_100052C98();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005264C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v9 = sub_100005394(&qword_1000795A8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_1000087E0(a1, v14);
  unint64_t v15 = sub_100052C98();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for FMIPSearchResponseStatus.CodingKeys,  &type metadata for FMIPSearchResponseStatus.CodingKeys,  v15,  v14,  v13);
  char v20 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a4, a5, &v20, v9);
  if (!v5)
  {
    char v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v19, v9);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

void *sub_100052774@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100052AFC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

uint64_t sub_1000527A0(void *a1)
{
  return sub_10005264C(a1, *v1, v1[1], v1[2], v1[3]);
}

unint64_t sub_1000527BC(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100069328, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7) {
    return 7LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100052804(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 1LL;
  }
  uint64_t v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 1LL;
  }
  swift_bridgeObjectRetain_n(a2, 2LL);
  v13._countAndFlagsBits = a1;
  v13._object = (void *)a2;
  unint64_t v5 = sub_1000527BC(v13);
  if (v5 == 7)
  {
    uint64_t v6 = static os_log_type_t.error.getter(v5);
    uint64_t v7 = sub_100005394(&qword_100079660);
    uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
    *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B2C0;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_100005854();
    *(void *)(v8 + 3sub_100007A28(v0 + 2) = a1;
    *(void *)(v8 + 40) = a2;
    unint64_t v9 = sub_100005818();
    uint64_t v10 = (void *)static OS_os_log.default.getter(v9);
    os_log(_:dso:log:type:_:)("FMIPSearchResponseStatus is not handled %@", 42LL, 2LL, &_mh_execute_header, v10, v6, v8);
    swift_bridgeObjectRelease(v8);

    return 1LL;
  }

  char v12 = v5;
  swift_bridgeObjectRelease(a2);
  return qword_10005F438[v12];
}

uint64_t storeEnumTagSinglePayload for FMIPSearchResponseStatus.Status( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_100052970 + 4 * byte_10005F180[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000529A4 + 4 * byte_10005F17B[v4]))();
}

uint64_t sub_1000529A4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000529AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000529B4LL);
  }
  return result;
}

uint64_t sub_1000529C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000529C8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_1000529CC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000529D4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPSearchResponseStatus.Status()
{
  return &type metadata for FMIPSearchResponseStatus.Status;
}

ValueMetadata *type metadata accessor for FMIPSearchResponseStatus()
{
  return &type metadata for FMIPSearchResponseStatus;
}

unint64_t sub_100052A04()
{
  unint64_t result = qword_100079580;
  if (!qword_100079580)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005F2A4, &type metadata for FMIPSearchResponseStatus.Status);
    atomic_store(result, (unint64_t *)&qword_100079580);
  }

  return result;
}

unint64_t sub_100052A48(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100052A74();
  unint64_t result = sub_100052AB8();
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_100052A74()
{
  unint64_t result = qword_100079588;
  if (!qword_100079588)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005F204, &type metadata for FMIPSearchResponseStatus);
    atomic_store(result, (unint64_t *)&qword_100079588);
  }

  return result;
}

unint64_t sub_100052AB8()
{
  unint64_t result = qword_100079590;
  if (!qword_100079590)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005F1DC, &type metadata for FMIPSearchResponseStatus);
    atomic_store(result, (unint64_t *)&qword_100079590);
  }

  return result;
}

void *sub_100052AFC(void *a1)
{
  uint64_t v3 = sub_100005394(&qword_100079598);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  unint64_t v9 = sub_1000087E0(a1, v7);
  unint64_t v10 = sub_100052C98();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for FMIPSearchResponseStatus.CodingKeys,  &type metadata for FMIPSearchResponseStatus.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    sub_100007A28(a1);
  }

  else
  {
    char v16 = 0;
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v16, v3);
    uint64_t v13 = v12;
    char v15 = 1;
    swift_bridgeObjectRetain(v12);
    unint64_t v9 = (void *)KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100007A28(a1);
    swift_bridgeObjectRelease(v13);
  }

  return v9;
}

unint64_t sub_100052C98()
{
  unint64_t result = qword_1000795A0;
  if (!qword_1000795A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005F3E4, &type metadata for FMIPSearchResponseStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000795A0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPSearchResponseStatus.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100052D28 + 4 * byte_10005F18A[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100052D5C + 4 * byte_10005F185[v4]))();
}

uint64_t sub_100052D5C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100052D64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100052D6CLL);
  }
  return result;
}

uint64_t sub_100052D78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100052D80LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100052D84(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100052D8C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPSearchResponseStatus.CodingKeys()
{
  return &type metadata for FMIPSearchResponseStatus.CodingKeys;
}

unint64_t sub_100052DAC()
{
  unint64_t result = qword_1000795B0;
  if (!qword_1000795B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005F3BC, &type metadata for FMIPSearchResponseStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000795B0);
  }

  return result;
}

unint64_t sub_100052DF4()
{
  unint64_t result = qword_1000795B8;
  if (!qword_1000795B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005F2F4, &type metadata for FMIPSearchResponseStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000795B8);
  }

  return result;
}

unint64_t sub_100052E3C()
{
  unint64_t result = qword_1000795C0;
  if (!qword_1000795C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10005F31C, &type metadata for FMIPSearchResponseStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000795C0);
  }

  return result;
}

id Daemon.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

id Daemon.init()()
{
  uint64_t v1 = OBJC_IVAR____TtC20FMIPClientXPCService6Daemon_xpcManager;
  uint64_t v2 = qword_100076AF0;
  int v3 = v0;
  if (v2 != -1) {
    swift_once(&qword_100076AF0, sub_10000558C);
  }
  *(void *)&v3[v1] = qword_1000798B8;
  swift_retain();

  uint64_t v4 = sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v5 = (void *)static OS_os_log.default.getter(v4);
  uint64_t v6 = static os_log_type_t.default.getter(v5);
  os_log(_:dso:log:type:_:)("Daemon initializing", 19LL, 2LL, &_mh_execute_header, v5, v6, _swiftEmptyArrayStorage);

  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for Daemon();
  return objc_msgSendSuper2(&v8, "init");
}

uint64_t type metadata accessor for Daemon()
{
  return objc_opt_self(&OBJC_CLASS____TtC20FMIPClientXPCService6Daemon);
}

Swift::Void __swiftcall Daemon.startup()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_1000079C8(0LL, (unint64_t *)&qword_100078760, &OBJC_CLASS___OS_dispatch_queue_ptr);
  *uint64_t v5 = static OS_dispatch_queue.main.getter();
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  char v6 = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v7 = (void *)static OS_os_log.default.getter();
    uint64_t v8 = static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)( "Daemon is starting up ...",  25LL,  2LL,  &_mh_execute_header,  v7,  v8,  &_swiftEmptyArrayStorage);

    sub_1000055C0(v1);
    id v9 = [(id)objc_opt_self(NSRunLoop) mainRunLoop];
    [v9 run];
  }

  else
  {
    __break(1u);
  }

id Daemon.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Daemon();
  return objc_msgSendSuper2(&v2, "dealloc");
}

Swift::Bool __swiftcall Daemon.listener(_:shouldAcceptNewConnection:)( NSXPCListener *_, NSXPCConnection *shouldAcceptNewConnection)
{
  return sub_1000534F4(shouldAcceptNewConnection);
}

void sub_10005323C(void *a1)
{
  uint64_t v2 = static os_log_type_t.error.getter(a1);
  uint64_t v3 = sub_100005394(&qword_100079660);
  uint64_t v4 = swift_allocObject(v3, 72LL, 7LL);
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B2C0;
  *(void *)(v4 + 56) = sub_1000079C8(0LL, &qword_100079668, &OBJC_CLASS___NSXPCConnection_ptr);
  *(void *)(v4 + 64) = sub_100053A78();
  *(void *)(v4 + 3sub_100007A28(v0 + 2) = a1;
  sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  id v5 = (id)static OS_os_log.default.getter(a1);
  os_log(_:dso:log:type:_:)("Connection from client interrupted", 34LL, 2LL, &_mh_execute_header, v5, v2, v4);
  swift_bridgeObjectRelease(v4);
}

void sub_100053320(void *a1)
{
  uint64_t v2 = sub_100005394(&qword_100079660);
  uint64_t v3 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B2C0;
  *(void *)(v3 + 56) = sub_1000079C8(0LL, &qword_100079668, &OBJC_CLASS___NSXPCConnection_ptr);
  *(void *)(v3 + 64) = sub_100053A78();
  *(void *)(v3 + 3sub_100007A28(v0 + 2) = a1;
  sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  id v5 = (id)static OS_os_log.default.getter(a1);
  uint64_t v4 = static os_log_type_t.default.getter(v5);
  os_log(_:dso:log:type:_:)("Connection from client invalidated", 34LL, 2LL, &_mh_execute_header, v5, v4, v3);
  swift_bridgeObjectRelease(v3);
}

uint64_t sub_10005345C()
{
  uint64_t v0 = sub_100005394(&qword_1000796A0);
  else {
    uint64_t v1 = 0LL;
  }
  if (v1) {
    uint64_t v2 = (uint64_t *)&unk_100079698;
  }
  else {
    uint64_t v2 = (uint64_t *)&unk_1000796A8;
  }
  return sub_100005394(v2);
}

uint64_t sub_1000534A8()
{
  uint64_t v0 = sub_100005394(&qword_100076D88);
  else {
    uint64_t v1 = 0LL;
  }
  if (v1) {
    uint64_t v2 = (uint64_t *)&unk_100079698;
  }
  else {
    uint64_t v2 = (uint64_t *)&unk_100079690;
  }
  return sub_100005394(v2);
}

uint64_t sub_1000534F4(void *a1)
{
  uint64_t v2 = sub_100005394(&qword_100079660);
  uint64_t v3 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B2C0;
  *(void *)(v3 + 56) = sub_1000079C8(0LL, &qword_100079668, &OBJC_CLASS___NSXPCConnection_ptr);
  *(void *)(v3 + 64) = sub_100053A78();
  *(void *)(v3 + 3sub_100007A28(v0 + 2) = a1;
  sub_1000079C8(0LL, (unint64_t *)&qword_100076C18, &OBJC_CLASS___OS_os_log_ptr);
  id v4 = a1;
  id v5 = (void *)static OS_os_log.default.getter(v4);
  uint64_t v6 = static os_log_type_t.default.getter(v5);
  os_log(_:dso:log:type:_:)("Should accept new connection? %@", 32LL, 2LL, &_mh_execute_header, v5, v6, v3);
  swift_bridgeObjectRelease(v3);

  id v7 = v4;
  uint64_t v8 = (uint64_t *)Constants.FMClientXPCServiceName.unsafeMutableAddressor();
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  id v11 = objc_allocWithZone((Class)type metadata accessor for ServerSession(0LL));
  swift_bridgeObjectRetain(v10);
  id v12 = sub_100018F28(v7, v9, v10);

  uint64_t v13 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCInterface);
  id v14 = [v13 interfaceWithProtocol:&OBJC_PROTOCOL____TtP8FMClient21ServerSessionProtocol_];
  uint64_t v15 = sub_10005345C();
  uint64_t inited = swift_initStackObject(v15, v56);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B320;
  uint64_t v17 = sub_1000079C8(0LL, &qword_100079678, &OBJC_CLASS___NSSet_ptr);
  *(void *)(inited + 3sub_100007A28(v0 + 2) = v17;
  *(void *)(inited + 40) = type metadata accessor for DiscoveredDevice(0LL);
  uint64_t v18 = sub_10005345C();
  uint64_t v19 = swift_initStackObject(v18, v55);
  *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B320;
  *(void *)(v19 + 3sub_100007A28(v0 + 2) = type metadata accessor for PlaySoundDevice(0LL);
  uint64_t v20 = sub_1000079C8(0LL, (unint64_t *)&unk_100079680, &OBJC_CLASS___NSArray_ptr);
  *(void *)(v19 + 40) = v20;
  uint64_t v21 = sub_10005345C();
  uint64_t v22 = swift_initStackObject(v21, v54);
  *(_OWORD *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005C070;
  *(void *)(v22 + 3sub_100007A28(v0 + 2) = type metadata accessor for SearchFilter(0LL);
  *(void *)(v22 + 40) = type metadata accessor for SearchFilterDevice(0LL);
  *(void *)(v22 + 48) = v20;
  uint64_t v23 = sub_10005345C();
  uint64_t v24 = swift_initStackObject(v23, v53);
  *(_OWORD *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005C070;
  *(void *)(v24 + 3sub_100007A28(v0 + 2) = type metadata accessor for SearchResult(0LL);
  *(void *)(v24 + 40) = type metadata accessor for SearchResultDevice(0LL);
  *(void *)(v24 + 48) = v20;
  uint64_t v25 = sub_10005345C();
  uint64_t v26 = swift_initStackObject(v25, v52);
  *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005C070;
  *(void *)(v26 + 3sub_100007A28(v0 + 2) = v17;
  *(void *)(v26 + 40) = type metadata accessor for VoiceAssistantDeviceName(0LL);
  *(void *)(v26 + 48) = type metadata accessor for VoiceAssistantSyncResult(0LL);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(inited, "discoverNearbyDevicesWithCompletion:", 0LL, 1LL);
  swift_bridgeObjectRelease(inited);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v19, "playSound:completion:", 0LL, 0LL);
  swift_bridgeObjectRelease(v19);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v22, "deviceSearch:completion:", 0LL, 0LL);
  swift_bridgeObjectRelease(v22);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v24, "deviceSearch:completion:", 0LL, 1LL);
  swift_bridgeObjectRelease(v24);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v26, "voiceAssistantSyncWithCompletion:", 0LL, 1LL);
  swift_setDeallocating(v26);
  id v27 = [v13 interfaceWithProtocol:&OBJC_PROTOCOL____TtP8FMClient21ClientSessionProtocol_];
  uint64_t v28 = sub_1000534A8();
  uint64_t v29 = swift_initStackObject(v28, v51);
  *(_OWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B2C0;
  uint64_t v30 = type metadata accessor for AuthenticationCredential(0LL);
  *(void *)(v29 + 3sub_100007A28(v0 + 2) = v30;
  uint64_t v31 = sub_1000534A8();
  uint64_t v32 = swift_initStackObject(v31, v50);
  *(_OWORD *)(v32 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10005B2C0;
  *(void *)(v32 + 3sub_100007A28(v0 + 2) = v30;
  uint64_t v33 = sub_100006B90(v29);
  swift_bridgeObjectRelease(v29);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v33, "credential:", 0LL, 1LL);
  swift_bridgeObjectRelease(v33);
  uint64_t v34 = sub_100006B90(v32);
  swift_setDeallocating(v32);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)( v34,  "credentialNotAuthorizedWithCredential:error:completion:",  0LL,  0LL);
  swift_bridgeObjectRelease(v34);
  [v7 setExportedObject:v12];
  [v7 setRemoteObjectInterface:v27];
  [v7 setExportedInterface:v14];
  uint64_t v35 = swift_allocObject(&unk_100070568, 24LL, 7LL);
  *(void *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  unint64_t v48 = sub_100053AF4;
  uint64_t v49 = v35;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v45 = 1107296256LL;
  uint64_t v46 = sub_10004DB74;
  uint64_t v47 = &unk_100070580;
  uint64_t v36 = _Block_copy(&aBlock);
  uint64_t v37 = v49;
  id v38 = v7;
  swift_release(v37);
  [v38 setInterruptionHandler:v36];
  _Block_release(v36);
  uint64_t v39 = swift_allocObject(&unk_1000705B8, 24LL, 7LL);
  *(void *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = v38;
  unint64_t v48 = sub_100053B14;
  uint64_t v49 = v39;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v45 = 1107296256LL;
  uint64_t v46 = sub_10004DB74;
  uint64_t v47 = &unk_1000705D0;
  unint64_t v40 = _Block_copy(&aBlock);
  uint64_t v41 = v49;
  id v42 = v38;
  swift_release(v41);
  [v42 setInvalidationHandler:v40];
  _Block_release(v40);
  [v42 resume];

  return 1LL;
}

unint64_t sub_100053A78()
{
  unint64_t result = qword_100079670;
  if (!qword_100079670)
  {
    uint64_t v1 = sub_1000079C8(255LL, &qword_100079668, &OBJC_CLASS___NSXPCConnection_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100079670);
  }

  return result;
}

uint64_t sub_100053AD0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100053AF4()
{
}

uint64_t sub_100053AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100007A28(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100053B0C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_100053B14()
{
}

uint64_t sub_100053B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32LL);
}

uint64_t sub_100053B30(uint64_t a1)
{
  v4[0] = &unk_10005F4E0;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 0LL, 2LL, v4, a1 + 40);
    return 0LL;
  }

  return result;
}

uint64_t *sub_100053BA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    uint64_t *v3 = *a2;
    unint64_t v3 = (uint64_t *)(v11 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v11);
  }

  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 44);
    id v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for URL(0LL);
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }

  return v3;
}

uint64_t sub_100053C40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void *sub_100053C88(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 44);
  uint64_t v6 = (char *)a1 + v5;
  id v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

void *sub_100053CF8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 44);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  return a1;
}

_OWORD *sub_100053D74(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

void *sub_100053DD0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 44);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  return a1;
}

uint64_t sub_100053E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100053E48);
}

uint64_t sub_100053E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 44),  a2,  v8);
  }

uint64_t sub_100053EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100053ED0);
}

uint64_t sub_100053ED0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 44),  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for DiskCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100013400(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DiskCache);
}

uint64_t sub_100053F50(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100053F9C + 4 * byte_10005F495[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100053FD0 + 4 * asc_10005F490[v4]))();
}

uint64_t sub_100053FD0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100053FD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100053FE0LL);
  }
  return result;
}

uint64_t sub_100053FEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100053FF4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100053FF8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100054000(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for DiskCache.CacheError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100013400(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DiskCache.CacheError);
}

uint64_t sub_100054018(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 0LL, 1LL, &v4, a1 + 40);
    return 0LL;
  }

  return result;
}

uint64_t sub_100054084(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_100054134 + 4 * byte_10005F49A[(v7 - 1)]))();
}

void sub_100054184(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = &dword_100000004;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = &_mh_execute_header.magic + 1;
    }
  }

  else
  {
    unsigned int v11 = 0;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + sub_100007A28(v0 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t type metadata accessor for DiskCache.CacheFormat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100013400(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DiskCache.CacheFormat);
}

uint64_t sub_100054340(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10005F588, a1);
}

BOOL sub_100054350(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_100054360(uint64_t a1, char a2)
{
}

Swift::Int sub_100054384(char a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1000543C8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x7463656A626FLL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7463656A626FLL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

uint64_t sub_100054444(void *a1, void *a2)
{
  uint64_t v3 = a2[3];
  v13[0] = a2[2];
  uint64_t v4 = type metadata accessor for DiskCache.CacheFormat.CodingKeys(255LL, v13[0], v3, a2[4]);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10005F718, v4);
  uint64_t v6 = type metadata accessor for KeyedEncodingContainer(0LL, v4, WitnessTable);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  BOOL v9 = (char *)v13 - v8;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_1000087E0(a1, v10);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v4, v4, WitnessTable, v10, v11);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v13[1]);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100054560@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v31 = a5;
  uint64_t v36 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v37 = (uint64_t *)((char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = type metadata accessor for DiskCache.CacheFormat.CodingKeys(255LL, v10, v11, v12);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10005F718, v13);
  uint64_t v38 = type metadata accessor for KeyedDecodingContainer(0LL, v13, WitnessTable);
  uint64_t v32 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  char v16 = (char *)&v29 - v15;
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v30 = type metadata accessor for DiskCache.CacheFormat(0LL, a2, a3, a4);
  uint64_t v17 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v19 = (char *)&v29 - v18;
  uint64_t v21 = a1[3];
  uint64_t v20 = a1[4];
  sub_1000087E0(a1, v21);
  uint64_t v33 = v16;
  uint64_t v22 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v13, v13, WitnessTable, v21, v20);
  if (!v22)
  {
    uint64_t v39 = v17;
    uint64_t v23 = v32;
    uint64_t v24 = v33;
    uint64_t v25 = v36;
    uint64_t v26 = v37;
    uint64_t v27 = v34;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v37, v34);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v38);
    (*(void (**)(char *, void *, uint64_t))(v25 + 32))(v19, v26, v27);
    (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v31, v19, v30);
  }

  return sub_100007A28(a1);
}

BOOL sub_100054758(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100054350(*a1, *a2);
}

Swift::Int sub_100054764()
{
  return sub_100054384(*v0);
}

void sub_10005476C(uint64_t a1)
{
}

Swift::Int sub_100054774(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1000547B0()
{
  return 0x7463656A626FLL;
}

uint64_t sub_1000547C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000543C8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1000547F8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static FutureError.__derived_enum_equals(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10005482C(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10005F718, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_100054860(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10005F718, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t sub_100054894@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100054560(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t sub_1000548B4(void *a1, void *a2)
{
  return sub_100054444(a1, a2);
}

uint64_t type metadata accessor for DiskCache.CacheFormat.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100013400(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DiskCache.CacheFormat.CodingKeys);
}

uint64_t sub_1000548D4(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100054914 + 4 * byte_10005F4A8[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100054934 + 4 * byte_10005F4AD[v4]))();
  }
}

_BYTE *sub_100054914(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_100054934(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10005493C(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_100054944(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10005494C(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_100054954(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_100054960(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10005F6F0, a1);
}

uint64_t sub_100054970(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10005F660, a1);
}

uint64_t sub_100054980(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10005F688, a1);
}

uint64_t _s20FMIPClientXPCService6FutureC4uuid33_40B9CAF5474C2AE132CCEC7BECE26906LL10Foundation4UUIDVvpfi_0()
{
  return UUID.init()();
}