uint64_t outlined init with take of LinkDialogIdProvider(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  v2 = *a1;
  v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void LinkSuggestionsOwnerDefinition.getSourceGenerator()(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for LinkSuggestionsGenerator();
  uint64_t v5 = OUTLINED_FUNCTION_1(v4, 56LL);
  outlined init with take of LinkDialogIdProvider(&v8, v5 + 16);
  a2[3] = v4;
  OUTLINED_FUNCTION_16( &lazy protocol witness table cache variable for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator,  255LL,  v6,  (uint64_t)&protocol conformance descriptor for LinkSuggestionsGenerator);
  a2[4] = v7;
  *a2 = v5;
  OUTLINED_FUNCTION_15();
}

void LinkSuggestionsOwnerDefinition.getTargetOwnerDefinition()(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for LinkSuggestionsTargetOwnerDefinition();
  uint64_t v4 = OUTLINED_FUNCTION_1(v3, 96LL);
  outlined init with take of LinkDialogIdProvider(v9, v4 + 16);
  outlined init with take of LinkDialogIdProvider(v8, v4 + 56);
  a1[3] = v3;
  OUTLINED_FUNCTION_16( (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestionsTargetOwnerDefinition and conformance LinkSuggestionsTargetOwnerDefinition,  v5,  v6,  (uint64_t)&protocol conformance descriptor for LinkSuggestionsTargetOwnerDefinition);
  a1[4] = v7;
  *a1 = v4;
}

uint64_t LinkSuggestionsOwnerDefinition.__allocating_init(linkClient:dialogIdProvider:)( __int128 *a1, __int128 *a2)
{
  uint64_t v5 = OUTLINED_FUNCTION_1(v2, 96LL);
  outlined init with take of LinkDialogIdProvider(a1, v5 + 16);
  outlined init with take of LinkDialogIdProvider(a2, v5 + 56);
  return v5;
}

uint64_t LinkSuggestionsOwnerDefinition.deinit()
{
  return v0;
}

void protocol witness for OwnerDefinition.getSourceGenerator() in conformance LinkSuggestionsOwnerDefinition( uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
}

void protocol witness for OwnerDefinition.getTargetOwnerDefinition() in conformance LinkSuggestionsOwnerDefinition( uint64_t *a1@<X8>)
{
}

uint64_t protocol witness for OwnerProvider.getOwner() in conformance LinkSuggestionsOwnerDefinition()
{
  return LinkSuggestionsTargetOwnerDefinition.getOwner()();
}

void LinkSuggestionsOwnerDefinition.init(linkClient:dialogIdProvider:)(__int128 *a1, __int128 *a2)
{
}

void LinkSuggestionsTargetOwnerDefinition.getSuggestionsRepo()(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for LinkSuggestionsRepository();
  uint64_t v5 = OUTLINED_FUNCTION_1(v4, 56LL);
  outlined init with take of LinkDialogIdProvider(&v8, v5 + 16);
  a2[3] = v4;
  OUTLINED_FUNCTION_16( &lazy protocol witness table cache variable for type LinkSuggestionsRepository and conformance LinkSuggestionsRepository,  255LL,  v6,  (uint64_t)&protocol conformance descriptor for LinkSuggestionsRepository);
  a2[4] = v7;
  *a2 = v5;
  OUTLINED_FUNCTION_15();
}

uint64_t LinkSuggestionsTargetOwnerDefinition.getSuggestionsResolvers()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Resolver>);
  uint64_t v2 = OUTLINED_FUNCTION_1(v1, 72LL);
  *(_OWORD *)(v2 + 16) = xmmword_3C030;
  OUTLINED_FUNCTION_18(v0 + 16, v3);
  uint64_t v4 = type metadata accessor for LinkActionResolver();
  OUTLINED_FUNCTION_1(v4, 72LL);
  uint64_t v5 = LinkActionResolver.init(linkClient:)(&v8);
  *(void *)(v2 + 56) = v4;
  lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( &lazy protocol witness table cache variable for type LinkActionResolver and conformance LinkActionResolver,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for LinkActionResolver,  (uint64_t)&protocol conformance descriptor for LinkActionResolver);
  *(void *)(v2 + 64) = v6;
  *(void *)(v2 + 32) = v5;
  return v2;
}

void LinkSuggestionsTargetOwnerDefinition.getSuggestionsFilter()(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for NoOpSuggestionFilter(0LL);
  uint64_t v3 = static NoOpSuggestionFilter.Instance.getter();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for NoOpSuggestionFilter;
  *a1 = v3;
  OUTLINED_FUNCTION_3();
}

uint64_t LinkSuggestionsOwnerDefinition.getOwner()@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for linkOwner != -1) {
    swift_once(&one-time initialization token for linkOwner, one-time initialization function for linkOwner);
  }
  uint64_t v2 = static LinkSuggestionsOwners.linkOwner;
  a1[3] = type metadata accessor for DefaultOwner(0LL);
  lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( (unint64_t *)&lazy protocol witness table cache variable for type DefaultOwner and conformance DefaultOwner,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DefaultOwner,  (uint64_t)&protocol conformance descriptor for DefaultOwner);
  a1[4] = v3;
  *a1 = v2;
  return swift_retain(v2);
}

uint64_t LinkSuggestionsOwnerDefinition.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 96LL, 7LL);
}

void protocol witness for TargetOwnerDefinition.getSuggestionsRepo() in conformance LinkSuggestionsTargetOwnerDefinition( uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
}

uint64_t protocol witness for TargetOwnerDefinition.getSuggestionsResolvers() in conformance LinkSuggestionsTargetOwnerDefinition()
{
  return LinkSuggestionsTargetOwnerDefinition.getSuggestionsResolvers()();
}

void protocol witness for TargetOwnerDefinition.getSuggestionsFilter() in conformance LinkSuggestionsTargetOwnerDefinition( uint64_t *a1@<X8>)
{
}

void outlined init with copy of LinkClient(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  OUTLINED_FUNCTION_3();
}

uint64_t type metadata accessor for LinkSuggestionsTargetOwnerDefinition()
{
  return objc_opt_self(&OBJC_CLASS____TtC25SiriLinkSuggestionsPlugin36LinkSuggestionsTargetOwnerDefinition);
}

void lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  if (!*a1)
  {
    uint64_t v6 = a3(a2);
    atomic_store(swift_getWitnessTable(a4, v6), a1);
  }

  OUTLINED_FUNCTION_3();
}

uint64_t variable initialization expression of LinkSuggestionConfigurator.suggestionId()
{
  if (one-time initialization token for suggestionIdentifier != -1) {
    swift_once( &one-time initialization token for suggestionIdentifier,  one-time initialization function for suggestionIdentifier);
  }
  uint64_t v0 = static LinkSuggestionsRepository.suggestionIdentifier;
  swift_bridgeObjectRetain(unk_53AB0);
  return v0;
}

uint64_t variable initialization expression of DefaultToolClient.toolSessionSetupTask()
{
  uint64_t v1 = (char *)v15 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = type metadata accessor for TaskPriority(0LL);
  __swift_storeEnumTagSinglePayload((uint64_t)v1, 1LL, 1LL, v2);
  uint64_t v3 = OUTLINED_FUNCTION_1((uint64_t)&unk_492D0, 32LL);
  *(void *)(v3 + 16) = 0LL;
  *(void *)(v3 + 24) = 0LL;
  if (__swift_getEnumTagSinglePayload((uint64_t)v1, 1LL, v2) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v1);
    uint64_t v4 = 0LL;
    uint64_t v5 = 0LL;
    uint64_t v6 = 7168LL;
  }

  else
  {
    unsigned __int8 v7 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
    uint64_t v6 = v7 | 0x1C00LL;
    uint64_t v8 = *(void *)(v3 + 16);
    if (v8)
    {
      uint64_t v9 = *(void *)(v3 + 24);
      uint64_t ObjectType = swift_getObjectType(v8);
      swift_unknownObjectRetain(v8);
      uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v9);
      uint64_t v5 = v11;
      swift_unknownObjectRelease(v8);
    }

    else
    {
      uint64_t v4 = 0LL;
      uint64_t v5 = 0LL;
    }
  }

  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ToolExecutionSession);
  if (v5 | v4)
  {
    v15[0] = 0LL;
    v15[1] = 0LL;
    v13 = v15;
    v15[2] = v4;
    v15[3] = v5;
  }

  else
  {
    v13 = 0LL;
  }

  return swift_task_create( v6,  v13,  v12,  &async function pointer to partial apply for closure #1 in variable initialization expression of DefaultToolClient.toolSessionSetupTask,  v3);
}

uint64_t default argument 3 of LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RetrievedContext]);
  return Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v0,  &protocol witness table for String);
}

unint64_t variable initialization expression of MetaDataSourcedAppIntentResolver.resolverTypeOperand()
{
  return OUTLINED_FUNCTION_6(23LL);
}

void default argument 1 of MetaDataSourcedAppIntentResolver.init(linkClient:toolClient:)(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for DefaultToolClient();
  OUTLINED_FUNCTION_1(v2, 24LL);
  uint64_t v3 = DefaultToolClient.init()();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DefaultToolClient;
  *a1 = v3;
  OUTLINED_FUNCTION_7();
}

uint64_t __swift_destroy_boxed_opaque_existential_1(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void specialized == infix<A>(_:_:)(uint64_t a1)
{
  uint64_t v3 = OUTLINED_FUNCTION_9();
  if (v2 != v3 || v1 != v4) {
    OUTLINED_FUNCTION_0(v3, v4);
  }
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
}

void specialized == infix<A>(_:_:)(char a1, char a2)
{
  uint64_t v3 = LinkSuggestionsOwners.rawValue.getter(a1);
  uint64_t v5 = v4;
  uint64_t v6 = LinkSuggestionsOwners.rawValue.getter(a2);
  if (v3 != v6 || v5 != v7) {
    OUTLINED_FUNCTION_0(v6, v7);
  }
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

Swift::Int variable initialization expression of DefaultLinkClient.fullUODSupportedLocales()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject(v0, &v3);
  *(_OWORD *)(inited + 16) = xmmword_3C040;
  *(void *)(inited + 32) = 0x53552D6E65LL;
  *(void *)(inited + 40) = 0xE500000000000000LL;
  *(void *)(inited + 48) = 0x42472D6E65LL;
  *(void *)(inited + 56) = 0xE500000000000000LL;
  *(void *)(inited + 64) = 0x41432D6E65LL;
  *(void *)(inited + 72) = 0xE500000000000000LL;
  *(void *)(inited + 80) = 0x55412D6E65LL;
  *(void *)(inited + 88) = 0xE500000000000000LL;
  *(void *)(inited + 96) = 0x4E432D687ALL;
  *(void *)(inited + 104) = 0xE500000000000000LL;
  *(void *)(inited + 112) = 0x4B482D687ALL;
  *(void *)(inited + 120) = 0xE500000000000000LL;
  *(void *)(inited + 128) = 0x504A2D616ALL;
  *(void *)(inited + 136) = 0xE500000000000000LL;
  *(void *)(inited + 144) = 0x52462D7266LL;
  *(void *)(inited + 152) = 0xE500000000000000LL;
  *(void *)(inited + 160) = 0x45442D6564LL;
  *(void *)(inited + 168) = 0xE500000000000000LL;
  *(void *)(inited + 176) = 0x53452D7365LL;
  *(void *)(inited + 184) = 0xE500000000000000LL;
  *(void *)(inited + 192) = 0x584D2D7365LL;
  *(void *)(inited + 200) = 0xE500000000000000LL;
  *(void *)(inited + 208) = 0x53552D7365LL;
  *(void *)(inited + 216) = 0xE500000000000000LL;
  *(void *)(inited + 224) = 0x4E492D6E65LL;
  *(void *)(inited + 232) = 0xE500000000000000LL;
  return specialized Set.init(_nonEmptyArrayLiteral:)(inited);
}

unint64_t variable initialization expression of AppIntentCandidateSuggestionConfigurator.suggestionId()
{
  return OUTLINED_FUNCTION_6(19LL);
}

uint64_t variable initialization expression of LinkViewProvider.invocationActionProvider()
{
  uint64_t v0 = type metadata accessor for LinkInvocationActionProvider();
  return swift_allocObject(v0, 16LL, 7LL);
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_31F0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t partial apply for closure #1 in variable initialization expression of DefaultToolClient.toolSessionSetupTask( uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_4E594);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #1 in variable initialization expression of DefaultToolClient.toolSessionSetupTask;
  return closure #1 in variable initialization expression of DefaultToolClient.toolSessionSetupTask(a1);
}

uint64_t partial apply for closure #1 in variable initialization expression of DefaultToolClient.toolSessionSetupTask()
{
  uint64_t v4 = *v0;
  uint64_t v1 = *(void *)(v4 + 16);
  uint64_t v2 = *v0;
  uint64_t v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t variable initialization expression of AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver.resolverTypeOperand()
{
  return OUTLINED_FUNCTION_6(25LL);
}

unint64_t variable initialization expression of AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.resolverTypeOperand()
{
  return OUTLINED_FUNCTION_6(26LL);
}

uint64_t variable initialization expression of AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.configuratorPerBundleIdentifier()
{
  return 0LL;
}

id variable initialization expression of AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.lock()
{
  return [objc_allocWithZone(NSLock) init];
}

unint64_t variable initialization expression of AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.suggestionId()
{
  return OUTLINED_FUNCTION_6(22LL);
}

id variable initialization expression of LinkRegistryObserver.notificationCenter()
{
  return [(id)objc_opt_self(NSDistributedNotificationCenter) defaultCenter];
}

void protocol witness for SetAlgebra.init() in conformance NSMatchingOptions(uint64_t *a1@<X8>)
{
  *a1 = variable initialization expression of AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.configuratorPerBundleIdentifier();
  OUTLINED_FUNCTION_3();
}

void protocol witness for RawRepresentable.rawValue.getter in conformance LNExamplePhraseKind( uint64_t a1@<X1>, Swift::OpaquePointer a2@<X2>, void *a3@<X8>)
{
  uint64_t v4 = *v3;
  *a3 = (unint64_t)ToolParamSummary.init(toolPhrase:paramValues:)(*(Swift::String *)(&a1 - 1), a2);
  OUTLINED_FUNCTION_3();
}

void protocol witness for Hashable.hashValue.getter in conformance LNSuggestedActionDialogParameterKey()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LNSuggestedActionDialogParameterKey( uint64_t a1)
{
  return specialized _SwiftNewtypeWrapper<>.hash(into:)(a1, *v1);
}

uint64_t specialized _SwiftNewtypeWrapper<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v3 = OUTLINED_FUNCTION_5(a1, a2);
  uint64_t v5 = v4;
  String.hash(into:)(v2, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance LNSuggestedActionDialogParameterKey( uint64_t a1)
{
}

void specialized _SwiftNewtypeWrapper<>._rawHashValue(seed:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = OUTLINED_FUNCTION_5(a1, a2);
  uint64_t v3 = OUTLINED_FUNCTION_4(v2);
  OUTLINED_FUNCTION_11((uint64_t)v3);
  Hasher._finalize()();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_13();
}

void protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance LNSuggestedActionDialogParameterKey()
{
}

void specialized _SwiftNewtypeWrapper<>.hashValue.getter(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  a2(v3);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_3();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance LNSuggestedActionDialogParameterKey( uint64_t a1, id *a2)
{
  return specialized static _SwiftNewtypeWrapper<>._forceBridgeFromObjectiveC(_:result:)(a1, a2);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance LNSuggestedActionDialogParameterKey( uint64_t a1, id *a2)
{
  return specialized static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2) & 1;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance LNSystemProtocolIdentifier( uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = v3;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance LNSuggestedActionDialogParameterKey( uint64_t *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LNSystemProtocolIdentifier(uint64_t a1)
{
  return specialized _SwiftNewtypeWrapper<>.hash(into:)(a1, *v1);
}

void *protocol witness for OptionSet.init(rawValue:) in conformance NSMatchingOptions@<X0>( void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance LNSuggestedActionDialogParameterKey( void *a1@<X8>)
{
  *a1 = LNSuggestedActionDialogParameterKey.rawValue.getter(*v1);
  a1[1] = v3;
  OUTLINED_FUNCTION_3();
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance LNSuggestedActionDialogParameterKey( void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_2();
  *a1 = v2;
  OUTLINED_FUNCTION_7();
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LNSystemProtocolIdentifier@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = LNSuggestedActionDialogParameterKey.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance LNSuggestedActionDialogParameterKey( uint64_t a1)
{
  uint64_t v3 = v2;
  lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( &lazy protocol witness table cache variable for type LNSuggestedActionDialogParameterKey and conformance LNSuggestedActionDialogParameterKey,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for LNSuggestedActionDialogParameterKey,  (uint64_t)&protocol conformance descriptor for LNSuggestedActionDialogParameterKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance LNSystemProtocolIdentifier( uint64_t a1)
{
  uint64_t v3 = v2;
  lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( &lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier,  (uint64_t)&protocol conformance descriptor for LNSystemProtocolIdentifier);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptySetSingleton;
    goto LABEL_25;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)result;
  uint64_t v27 = *(void *)(a1 + 16);
  if (!v27)
  {
LABEL_25:
    OUTLINED_FUNCTION_8();
    return (Swift::Int)v4;
  }

  unint64_t v5 = 0LL;
  Swift::Int v6 = result + 56;
  while (v5 < *(void *)(a1 + 16))
  {
    uint64_t v7 = (uint64_t *)(a1 + 32 + 16 * v5);
    uint64_t v9 = *v7;
    uint64_t v8 = v7[1];
    Hasher.init(_seed:)(v28, v4[5]);
    swift_bridgeObjectRetain(v8);
    String.hash(into:)(v28, v9, v8);
    Swift::Int result = Hasher._finalize()();
    uint64_t v10 = -1LL << *((_BYTE *)v4 + 32);
    unint64_t v11 = result & ~v10;
    unint64_t v12 = v11 >> 6;
    uint64_t v13 = *(void *)(v6 + 8 * (v11 >> 6));
    uint64_t v14 = 1LL << v11;
    if (((1LL << v11) & v13) != 0)
    {
      uint64_t v15 = v4[6];
      v16 = (uint64_t *)(v15 + 16 * v11);
      uint64_t v17 = v16[1];
      BOOL v18 = *v16 == v9 && v17 == v8;
      if (v18 || (Swift::Int result = OUTLINED_FUNCTION_12(*v16, v17), (result & 1) != 0))
      {
LABEL_11:
        Swift::Int result = swift_bridgeObjectRelease(v8);
        goto LABEL_22;
      }

      uint64_t v19 = ~v10;
      while (1)
      {
        unint64_t v11 = (v11 + 1) & v19;
        unint64_t v12 = v11 >> 6;
        uint64_t v13 = *(void *)(v6 + 8 * (v11 >> 6));
        uint64_t v14 = 1LL << v11;
        if ((v13 & (1LL << v11)) == 0) {
          break;
        }
        v20 = (uint64_t *)(v15 + 16 * v11);
        uint64_t v21 = v20[1];
        if (*v20 != v9 || v21 != v8)
        {
          Swift::Int result = OUTLINED_FUNCTION_12(*v20, v21);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_11;
      }
    }

    *(void *)(v6 + 8 * v12) = v14 | v13;
    v23 = (void *)(v4[6] + 16 * v11);
    void *v23 = v9;
    v23[1] = v8;
    uint64_t v24 = v4[2];
    BOOL v25 = __OFADD__(v24, 1LL);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_27;
    }
    v4[2] = v26;
LABEL_22:
    if (++v5 == v27) {
      goto LABEL_25;
    }
  }

  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void base witness table accessor for OwnerProvider in LinkSuggestionsOwnerDefinition(uint64_t a1, uint64_t a2)
{
}

uint64_t type metadata accessor for LinkSuggestionsOwnerDefinition()
{
  return objc_opt_self(&OBJC_CLASS____TtC25SiriLinkSuggestionsPlugin30LinkSuggestionsOwnerDefinition);
}

void base witness table accessor for Wrappable in LinkSuggestionsOwnerDefinition(uint64_t a1, uint64_t a2)
{
}

void base witness table accessor for OwnerProvider in LinkSuggestionsTargetOwnerDefinition( uint64_t a1, uint64_t a2)
{
}

void type metadata accessor for LNSystemProtocolIdentifier(uint64_t a1)
{
}

void type metadata accessor for LNSuggestedActionDialogParameterKey(uint64_t a1)
{
}

void type metadata accessor for LNSystemProtocolIdentifier(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

void base witness table accessor for RawRepresentable in LNSuggestedActionDialogParameterKey()
{
}

void base witness table accessor for _HasCustomAnyHashableRepresentation in LNSuggestedActionDialogParameterKey()
{
}

void base witness table accessor for RawRepresentable in LNSystemProtocolIdentifier()
{
}

void base witness table accessor for _HasCustomAnyHashableRepresentation in LNSystemProtocolIdentifier()
{
}

void base witness table accessor for Equatable in LNSystemProtocolIdentifier()
{
}

void base witness table accessor for Equatable in LNSuggestedActionDialogParameterKey()
{
}

uint64_t specialized static _SwiftNewtypeWrapper<>._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, id *a2)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(v3, &v6);
  if (v7)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    uint64_t result = OUTLINED_FUNCTION_2();
  }

  else
  {
    NSString v5 = 0LL;
  }

  *uint64_t v2 = v5;
  return result;
}

uint64_t specialized static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)( uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(v3, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *uint64_t v2 = v6;
  return v4 & 1;
}

void specialized static _SwiftNewtypeWrapper<>._unconditionallyBridgeFromObjectiveC(_:)(uint64_t a1)
{
}

uint64_t OUTLINED_FUNCTION_0(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, a1, a2, 0LL);
}

uint64_t OUTLINED_FUNCTION_1(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7LL);
}

uint64_t OUTLINED_FUNCTION_2()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

void *OUTLINED_FUNCTION_4(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, v1);
}

uint64_t OUTLINED_FUNCTION_5(uint64_t a1, uint64_t a2)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
}

unint64_t OUTLINED_FUNCTION_6(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
}

  ;
}

uint64_t OUTLINED_FUNCTION_8()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_9()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

void OUTLINED_FUNCTION_10(uint64_t a1, id *a2)
{
}

uint64_t OUTLINED_FUNCTION_11(uint64_t a1, ...)
{
  return String.hash(into:)(va, v1, v2);
}

uint64_t OUTLINED_FUNCTION_12(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_16(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t OUTLINED_FUNCTION_17()
{
  return swift_bridgeObjectRelease(v0);
}

void OUTLINED_FUNCTION_18(uint64_t a1, uint64_t a2, ...)
{
}

void LinkSuggestionsGenerator.__allocating_init(linkClient:)(__int128 *a1)
{
  uint64_t v3 = OUTLINED_FUNCTION_1(v1, 56LL);
  outlined init with take of LinkDialogIdProvider(a1, v3 + 16);
  OUTLINED_FUNCTION_3();
}

uint64_t AppIntentsDialogProvider.init(linkClient:)(__int128 *a1)
{
  return v1;
}

uint64_t LinkSuggestionsGenerator.generateCandidateSuggestions(interaction:environment:factory:)()
{
  return LinkSuggestionsGenerator.generateCandidateSuggestions(interaction:environment:factory:)( *(uint64_t (**)(uint64_t))(v0 + 8),  v0,  (uint64_t)_swiftEmptyArrayStorage);
}

uint64_t LinkSuggestionsGenerator.generateCandidateSuggestions(interaction:environment:factory:)( uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t LinkSuggestionsGenerator.getSubscriptions()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  OUTLINED_FUNCTION_38();
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  uint64_t v5 = _swiftEmptyArrayStorage;
  if (v4) {
    NSString v6 = (void *)v4;
  }
  else {
    NSString v6 = _swiftEmptyArrayStorage;
  }
  uint64_t v7 = v6[2];
  if (v7)
  {
    uint64_t v52 = v0;
    v60 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    type metadata accessor for Signal(0LL);
    uint64_t v8 = _swiftEmptyArrayStorage;
    uint64_t v55 = type metadata accessor for CoreSignalTypes(0LL);
    lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( &lazy protocol witness table cache variable for type CoreSignalTypes and conformance CoreSignalTypes,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for CoreSignalTypes,  (uint64_t)&protocol conformance descriptor for CoreSignalTypes);
    uint64_t v54 = v9;
    unsigned int v53 = enum case for CoreSignalTypes.app(_:);
    v51 = v6;
    uint64_t v10 = v6 + 5;
    do
    {
      uint64_t v12 = *(v10 - 1);
      uint64_t v11 = *v10;
      uint64_t v58 = v55;
      uint64_t v59 = v54;
      uint64_t v13 = __swift_allocate_boxed_opaque_existential_1(&v56);
      (*(void (**)(void *, void, uint64_t))(*(void *)(v55 - 8) + 104LL))(v13, v53, v55);
      OUTLINED_FUNCTION_29();
      uint64_t v14 = v5;
      uint64_t v15 = Signal.__allocating_init(signalType:signalValue:fallbackSignals:)(&v56, v12, v11, v5);
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CandidateSuggestionConfigurator>);
      uint64_t v17 = OUTLINED_FUNCTION_1(v16, 72LL);
      *(_OWORD *)(v17 + 16) = xmmword_3C030;
      uint64_t v18 = type metadata accessor for LinkSuggestionConfigurator();
      uint64_t v20 = OUTLINED_FUNCTION_1(v18, 32LL);
      if (one-time initialization token for suggestionIdentifier != -1) {
        swift_once( &one-time initialization token for suggestionIdentifier,  one-time initialization function for suggestionIdentifier);
      }
      uint64_t v21 = unk_53AB0;
      *(void *)(v20 + 16) = static LinkSuggestionsRepository.suggestionIdentifier;
      *(void *)(v20 + 24) = v21;
      *(void *)(v17 + 56) = v18;
      lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( &lazy protocol witness table cache variable for type LinkSuggestionConfigurator and conformance LinkSuggestionConfigurator,  v19,  (uint64_t (*)(uint64_t))type metadata accessor for LinkSuggestionConfigurator,  (uint64_t)&protocol conformance descriptor for LinkSuggestionConfigurator);
      *(void *)(v17 + 64) = v22;
      *(void *)(v17 + 32) = v20;
      swift_bridgeObjectRetain(v21);
      OUTLINED_FUNCTION_8();
      v60 = v8;
      unint64_t v23 = v8[2];
      if (v23 >= v8[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v8 = v60;
      }

      v10 += 2;
      __int128 v8[2] = v23 + 1;
      uint64_t v24 = &v8[2 * v23];
      v24[4] = v15;
      v24[5] = v17;
      --v7;
      uint64_t v5 = v14;
    }

    while (v7);
    swift_bridgeObjectRelease(v51);
    uint64_t v1 = v52;
  }

  else
  {
    swift_bridgeObjectRelease(v6);
    uint64_t v8 = _swiftEmptyArrayStorage;
  }

  BOOL v25 = specialized Dictionary.init<A>(_:uniquingKeysWith:)((uint64_t)v8);
  uint64_t v26 = *(void *)(v1 + 40);
  uint64_t v27 = *(void *)(v1 + 48);
  OUTLINED_FUNCTION_38();
  uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v26, v27);
  if (one-time initialization token for linkSuggestions != -1) {
    swift_once(&one-time initialization token for linkSuggestions, one-time initialization function for linkSuggestions);
  }
  uint64_t v29 = OUTLINED_FUNCTION_45();
  __swift_project_value_buffer(v29, (uint64_t)static Logger.linkSuggestions);
  uint64_t v30 = swift_bridgeObjectRetain_n(v28, 2LL);
  v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)OUTLINED_FUNCTION_16_0(12LL);
    uint64_t v34 = OUTLINED_FUNCTION_16_0(32LL);
    v60 = (void *)v34;
    *(_DWORD *)v33 = 136315138;
    if (v28) {
      uint64_t v35 = *(void *)(v28 + 16);
    }
    else {
      uint64_t v35 = 0LL;
    }
    uint64_t v56 = v35;
    v57[0] = v28 == 0;
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    uint64_t v37 = String.init<A>(describing:)(&v56, v36);
    unint64_t v39 = v38;
    uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, (uint64_t *)&v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v33 + 4);
    OUTLINED_FUNCTION_41();
    swift_bridgeObjectRelease(v39);
    _os_log_impl(&dword_0, v31, v32, "Found %s link apps", v33, 0xCu);
    swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_3_0(v34);
    OUTLINED_FUNCTION_3_0((uint64_t)v33);
  }

  else
  {

    OUTLINED_FUNCTION_41();
  }

  type metadata accessor for Signal(0LL);
  uint64_t v40 = static Signal.HomeScreen.getter();
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CandidateSuggestionConfigurator>);
  uint64_t v42 = OUTLINED_FUNCTION_1(v41, 72LL);
  *(_OWORD *)(v42 + 16) = xmmword_3C030;
  if (v28) {
    uint64_t v43 = v28;
  }
  else {
    uint64_t v43 = (uint64_t)v5;
  }
  uint64_t v44 = type metadata accessor for LinkHomeScreenSuggestionConfigurator();
  uint64_t v45 = OUTLINED_FUNCTION_1(v44, 40LL);
  LinkHomeScreenSuggestionConfigurator.init(_:)(v43);
  *(void *)(v42 + 56) = v44;
  lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( &lazy protocol witness table cache variable for type LinkHomeScreenSuggestionConfigurator and conformance LinkHomeScreenSuggestionConfigurator,  v46,  (uint64_t (*)(uint64_t))type metadata accessor for LinkHomeScreenSuggestionConfigurator,  (uint64_t)&protocol conformance descriptor for LinkHomeScreenSuggestionConfigurator);
  *(void *)(v42 + 64) = v47;
  *(void *)(v42 + 32) = v45;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
  uint64_t v56 = (uint64_t)v25;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v42, v40, isUniquelyReferenced_nonNull_native);
  uint64_t v49 = v56;
  OUTLINED_FUNCTION_5_0();
  swift_bridgeObjectRelease(0x8000000000000000LL);
  return v49;
}

void LinkSuggestionConfigurator.__allocating_init()()
{
  uint64_t v1 = OUTLINED_FUNCTION_1(v0, 32LL);
  if (one-time initialization token for suggestionIdentifier != -1) {
    swift_once( &one-time initialization token for suggestionIdentifier,  one-time initialization function for suggestionIdentifier);
  }
  uint64_t v2 = unk_53AB0;
  *(void *)(v1 + 16) = static LinkSuggestionsRepository.suggestionIdentifier;
  *(void *)(v1 + 24) = v2;
  swift_bridgeObjectRetain(v2);
  OUTLINED_FUNCTION_3();
}

void *specialized Dictionary.init<A>(_:uniquingKeysWith:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Signal, [CandidateSuggestionConfigurator]>);
    uint64_t v4 = (void *)static _DictionaryStorage.allocate(capacity:)(v3);
  }

  else
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v7 = v4;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, 1, &v7);
  uint64_t v5 = v7;
  if (v1) {
    swift_release(v7);
  }
  return v5;
}

void LinkHomeScreenSuggestionConfigurator.__allocating_init(_:)(uint64_t a1)
{
}

uint64_t CATLinkDialogCallback.deinit()
{
  return v0;
}

uint64_t OnRequestAppIntents.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t protocol witness for SignalSubscriber.getSubscriptions() in conformance LinkSuggestionsGenerator()
{
  return LinkSuggestionsGenerator.getSubscriptions()();
}

uint64_t protocol witness for SignalSubscriber.getAsyncSubscriptions() in conformance LinkSuggestionsGenerator( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to SignalSubscriber.getAsyncSubscriptions()[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for SignalSubscriber.getAsyncLookupSubscriptions() in conformance LinkSuggestionsGenerator;
  return SignalSubscriber.getAsyncSubscriptions()(a1, a2);
}

uint64_t protocol witness for SignalSubscriber.getAsyncLookupSubscriptions() in conformance LinkSuggestionsGenerator( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to SignalSubscriber.getAsyncLookupSubscriptions()[1]);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for SignalSubscriber.getAsyncLookupSubscriptions() in conformance LinkSuggestionsGenerator;
  return SignalSubscriber.getAsyncLookupSubscriptions()(a1, a2);
}

uint64_t protocol witness for InternalGenerator.generateCandidateSuggestions(interaction:environment:factory:) in conformance LinkSuggestionsGenerator()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_4E21C);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for InternalGenerator.generateCandidateSuggestions(interaction:environment:factory:) in conformance LinkSuggestionsGenerator;
  return protocol witness for InternalGenerator.generateCandidateSuggestions(interaction:environment:factory:) in conformance LinkSuggestionsGenerator((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t protocol witness for InternalGenerator.generateCandidateSuggestions(interaction:environment:factory:) in conformance LinkSuggestionsGenerator( uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(a1);
}

uint64_t AppIntentCandidateSuggestionConfigurator.appBundleId.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

uint64_t LinkSuggestionConfigurator.updateContext(context:signal:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return OUTLINED_FUNCTION_22((uint64_t)LinkSuggestionConfigurator.updateContext(context:signal:));
}

uint64_t LinkSuggestionConfigurator.updateContext(context:signal:)()
{
  uint64_t v1 = EnvironmentAwareSignal.activeSignal.getter();
  uint64_t v2 = LinkSuggestedActionsRequest.init(signal:)(v1);
  *(void *)(v0 + 32) = v4;
  if (!v4) {
    return OUTLINED_FUNCTION_17_0(*(uint64_t (**)(void))(v0 + 8));
  }
  uint64_t v5 = *(uint64_t **)(v0 + 16);
  *(_WORD *)(v0 + 72) = v3;
  *(void *)(v0 + 40) = v2;
  uint64_t v6 = *v5;
  *(void *)(v0 + 48) = *v5;
  *(void *)(v0 + 56) = v5[1];
  uint64_t ObjectType = swift_getObjectType(v6);
  *(void *)(v0 + 64) = ObjectType;
  OUTLINED_FUNCTION_27(ObjectType);
  OUTLINED_FUNCTION_40();
  return OUTLINED_FUNCTION_18_0();
}

{
  uint64_t v0;
  SiriLinkSuggestionsPlugin::LinkSuggestedActionsRequest v2;
  v2.bundleIdentifier._countAndFlagsBits = *(void *)(v0 + 40);
  *(_WORD *)&v2.onScreen = *(_WORD *)(v0 + 72) & 0x101;
  v2.bundleIdentifier._object = *(void **)(v0 + 32);
  Context.addSuggestedActionsRequest(_:)(v2);
  OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_17_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t LinkSuggestedActionsRequest.init(signal:)(uint64_t a1)
{
  uint64_t v2 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v37 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v36 - v4;
  uint64_t v6 = type metadata accessor for CoreSignalTypes(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CoreSignalTypes?, CoreSignalTypes?));
  OUTLINED_FUNCTION_31();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CoreSignalTypes?);
  OUTLINED_FUNCTION_31();
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v36 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  unint64_t v23 = (char *)&v36 - v22;
  uint64_t v38 = a1;
  Signal.signalType.getter(v39, v21);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SignalType);
  int v25 = swift_dynamicCast(v23, v39, v24, v6, 6LL);
  OUTLINED_FUNCTION_43((uint64_t)v23, v25 ^ 1u);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v20, enum case for CoreSignalTypes.app(_:), v6);
  OUTLINED_FUNCTION_43((uint64_t)v20, 0LL);
  uint64_t v26 = (uint64_t)&v13[*(int *)(v10 + 48)];
  outlined init with copy of CoreSignalTypes?((uint64_t)v23, (uint64_t)v13);
  outlined init with copy of CoreSignalTypes?((uint64_t)v20, v26);
  OUTLINED_FUNCTION_33((uint64_t)v13);
  if (v27)
  {
    outlined destroy of CoreSignalTypes?( (uint64_t)v20,  &demangling cache variable for type metadata for CoreSignalTypes?);
    OUTLINED_FUNCTION_33(v26);
    if (v27)
    {
      outlined destroy of CoreSignalTypes?( (uint64_t)v13,  &demangling cache variable for type metadata for CoreSignalTypes?);
      outlined destroy of CoreSignalTypes?( (uint64_t)v23,  &demangling cache variable for type metadata for CoreSignalTypes?);
      goto LABEL_12;
    }

    goto LABEL_9;
  }

  outlined init with copy of CoreSignalTypes?((uint64_t)v13, (uint64_t)v17);
  OUTLINED_FUNCTION_33(v26);
  if (v27)
  {
    outlined destroy of CoreSignalTypes?( (uint64_t)v20,  &demangling cache variable for type metadata for CoreSignalTypes?);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
LABEL_9:
    outlined destroy of CoreSignalTypes?( (uint64_t)v13,  (uint64_t *)&demangling cache variable for type metadata for (CoreSignalTypes?, CoreSignalTypes?));
    outlined destroy of CoreSignalTypes?( (uint64_t)v23,  &demangling cache variable for type metadata for CoreSignalTypes?);
LABEL_10:
    OUTLINED_FUNCTION_5_0();
    return 0LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v9, v26, v6);
  lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( &lazy protocol witness table cache variable for type CoreSignalTypes and conformance CoreSignalTypes,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for CoreSignalTypes,  (uint64_t)&protocol conformance descriptor for CoreSignalTypes);
  char v30 = dispatch thunk of static Equatable.== infix(_:_:)(v17, v9, v6, v29);
  v31 = *(void (**)(char *, uint64_t))(v7 + 8);
  v31(v9, v6);
  OUTLINED_FUNCTION_37((uint64_t)v20);
  v31(v17, v6);
  OUTLINED_FUNCTION_37((uint64_t)v13);
  OUTLINED_FUNCTION_37((uint64_t)v23);
  if ((v30 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_12:
  uint64_t v28 = Signal.signalValue.getter();
  ((void (*)(void))Signal.context.getter)();
  uint64_t v32 = type metadata accessor for SignalContext(0LL);
  if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1LL, v32) == 1)
  {
    outlined destroy of CoreSignalTypes?((uint64_t)v5, &demangling cache variable for type metadata for SignalContext?);
  }

  else
  {
    SignalContext.onScreen.getter();
    uint64_t v33 = OUTLINED_FUNCTION_23();
  }

  uint64_t v34 = (uint64_t)v37;
  Signal.context.getter(v33);
  if (__swift_getEnumTagSinglePayload(v34, 1LL, v32) == 1)
  {
    OUTLINED_FUNCTION_5_0();
    outlined destroy of CoreSignalTypes?(v34, &demangling cache variable for type metadata for SignalContext?);
  }

  else
  {
    SignalContext.explicitRequest.getter();
    OUTLINED_FUNCTION_5_0();
    OUTLINED_FUNCTION_23();
  }

  return v28;
}

Swift::Void __swiftcall Context.addSuggestedActionsRequest(_:)( SiriLinkSuggestionsPlugin::LinkSuggestedActionsRequest a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  __int16 v5 = *(_WORD *)&a1.onScreen;
  object = a1.bundleIdentifier._object;
  uint64_t countAndFlagsBits = a1.bundleIdentifier._countAndFlagsBits;
  uint64_t v8 = Context.getSuggestedActionsRequests()(v1, v2);
  swift_bridgeObjectRetain(object);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
  v14[0] = v8;
  specialized _NativeSet.update(with:isUnique:)( countAndFlagsBits,  (uint64_t)object,  v5 & 0x101,  isUniquelyReferenced_nonNull_native);
  uint64_t v11 = v10;
  uint64_t v12 = v14[0];
  swift_bridgeObjectRelease(0x8000000000000000LL);
  swift_bridgeObjectRelease(v11);
  v14[3] = &type metadata for LinkSuggestionsOwners;
  v14[4] = lazy protocol witness table accessor for type LinkSuggestionsOwners and conformance LinkSuggestionsOwners();
  LOBYTE(v14[0]) = 0;
  v13[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<LinkSuggestedActionsRequest>);
  v13[0] = v12;
  Context.setParam(for:key:value:)(v14, 0xD000000000000017LL, 0x800000000003E7D0LL, v13, v4, v3);
  __swift_destroy_boxed_opaque_existential_1(v13);
  __swift_destroy_boxed_opaque_existential_1(v14);
}

uint64_t LinkSuggestionConfigurator.deinit()
{
  return v0;
}

uint64_t LinkSuggestionConfigurator.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t LinkSuggestionConfigurator.init()()
{
  if (one-time initialization token for suggestionIdentifier != -1) {
    swift_once( &one-time initialization token for suggestionIdentifier,  one-time initialization function for suggestionIdentifier);
  }
  uint64_t v1 = unk_53AB0;
  *(void *)(v0 + 16) = static LinkSuggestionsRepository.suggestionIdentifier;
  *(void *)(v0 + 24) = v1;
  swift_bridgeObjectRetain(v1);
  return v0;
}

uint64_t protocol witness for CandidateSuggestionConfigurator.suggestionId.getter in conformance LinkSuggestionConfigurator()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 24LL));
  return v1;
}

uint64_t protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance LinkSuggestionConfigurator( uint64_t a1, uint64_t a2)
{
  __int16 v5 = (void *)swift_task_alloc(dword_4E24C);
  *(void *)(v2 + 16) = v5;
  *__int16 v5 = v2;
  v5[1] = protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance LinkSuggestionConfigurator;
  return LinkSuggestionConfigurator.updateContext(context:signal:)(a1, a2);
}

uint64_t protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance LinkSuggestionConfigurator()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for CandidateSuggestionConfigurator.isValid(signal:) in conformance LinkSuggestionConfigurator( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to CandidateSuggestionConfigurator.isValid(signal:)[1]);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for InternalGenerator.generateCandidateSuggestions(interaction:environment:factory:) in conformance LinkSuggestionsGenerator;
  return CandidateSuggestionConfigurator.isValid(signal:)(a1, a2, a3);
}

uint64_t LinkHomeScreenSuggestionConfigurator.linkAppBundleIds.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 32));
}

void LinkHomeScreenSuggestionConfigurator.init(_:)(uint64_t a1)
{
  if (one-time initialization token for suggestionIdentifier != -1) {
    swift_once( &one-time initialization token for suggestionIdentifier,  one-time initialization function for suggestionIdentifier);
  }
  uint64_t v3 = unk_53AB0;
  v1[2] = static LinkSuggestionsRepository.suggestionIdentifier;
  v1[3] = v3;
  v1[4] = a1;
  swift_bridgeObjectRetain(v3);
  OUTLINED_FUNCTION_3();
}

uint64_t LinkHomeScreenSuggestionConfigurator.updateContext(context:signal:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_22((uint64_t)LinkHomeScreenSuggestionConfigurator.updateContext(context:signal:));
}

uint64_t LinkHomeScreenSuggestionConfigurator.updateContext(context:signal:)()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 24) + 32LL);
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = v1[2];
  *(void *)(v0 + 40) = v2;
  if (!v2) {
    return OUTLINED_FUNCTION_7_0(*(uint64_t (**)(void))(v0 + 8));
  }
  *(void *)(v0 + 48) = 0LL;
  *(void *)(v0 + 56) = v1[4];
  *(void *)(v0 + 64) = v1[5];
  uint64_t v3 = one-time initialization token for linkSuggestions;
  OUTLINED_FUNCTION_35();
  swift_bridgeObjectRetain(v1);
  if (v3 != -1) {
    swift_once(&one-time initialization token for linkSuggestions, one-time initialization function for linkSuggestions);
  }
  uint64_t v4 = OUTLINED_FUNCTION_45();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.linkSuggestions);
  uint64_t v5 = OUTLINED_FUNCTION_29();
  uint64_t v6 = (void *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_32(v7))
  {
    uint64_t v8 = OUTLINED_FUNCTION_16_0(12LL);
    uint64_t v9 = (void *)OUTLINED_FUNCTION_16_0(8LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    id v10 = objc_allocWithZone(&OBJC_CLASS___LNSuggestionsRequest);
    OUTLINED_FUNCTION_35();
    NSString v11 = OUTLINED_FUNCTION_42();
    uint64_t v12 = OUTLINED_FUNCTION_8();
    id v13 = OUTLINED_FUNCTION_25(v12, "initWithBundleIdentifier:onScreen:explicitRequest:");

    *(void *)(v8 + 4) = v13;
    *uint64_t v9 = v13;
    OUTLINED_FUNCTION_15_0();
    OUTLINED_FUNCTION_26(&dword_0, v14, v15, "Adding homescreen request %@");
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_34(v16);
    OUTLINED_FUNCTION_3_0((uint64_t)v9);
    OUTLINED_FUNCTION_3_0(v8);
  }

  else
  {
    OUTLINED_FUNCTION_15_0();
  }

  uint64_t v18 = OUTLINED_FUNCTION_14();
  *(void *)(v0 + 88) = v18;
  OUTLINED_FUNCTION_27(v18);
  OUTLINED_FUNCTION_40();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  SiriLinkSuggestionsPlugin::LinkSuggestedActionsRequest v2;
  v2.bundleIdentifier._uint64_t countAndFlagsBits = *(void *)(v0 + 56);
  v2.bundleIdentifier._object = *(void **)(v0 + 64);
  *(_WORD *)&v2.onScreen = 0;
  Context.addSuggestedActionsRequest(_:)(v2);
  OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_18_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  os_log_type_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  NSString v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v1 = *(void *)(v0 + 48) + 1LL;
  if (v1 == *(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 32));
    return OUTLINED_FUNCTION_7_0(*(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    *(void *)(v0 + 48) = v1;
    uint64_t v3 = *(void *)(v0 + 32) + 16 * v1;
    *(void *)(v0 + 56) = *(void *)(v3 + 32);
    *(void *)(v0 + 64) = *(void *)(v3 + 40);
    uint64_t v4 = one-time initialization token for linkSuggestions;
    OUTLINED_FUNCTION_35();
    if (v4 != -1) {
      swift_once( &one-time initialization token for linkSuggestions,  one-time initialization function for linkSuggestions);
    }
    uint64_t v5 = OUTLINED_FUNCTION_45();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.linkSuggestions);
    uint64_t v6 = OUTLINED_FUNCTION_29();
    os_log_type_t v7 = (void *)Logger.logObject.getter(v6);
    uint64_t v8 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_32(v8))
    {
      uint64_t v9 = OUTLINED_FUNCTION_16_0(12LL);
      id v10 = (void *)OUTLINED_FUNCTION_16_0(8LL);
      *(_DWORD *)uint64_t v9 = 138412290;
      NSString v11 = objc_allocWithZone(&OBJC_CLASS___LNSuggestionsRequest);
      OUTLINED_FUNCTION_35();
      uint64_t v12 = OUTLINED_FUNCTION_42();
      id v13 = OUTLINED_FUNCTION_8();
      uint64_t v14 = OUTLINED_FUNCTION_25(v13, "initWithBundleIdentifier:onScreen:explicitRequest:");

      *(void *)(v9 + 4) = v14;
      *id v10 = v14;
      OUTLINED_FUNCTION_15_0();
      OUTLINED_FUNCTION_26(&dword_0, v15, v16, "Adding homescreen request %@");
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_34(v17);
      OUTLINED_FUNCTION_3_0((uint64_t)v10);
      OUTLINED_FUNCTION_3_0(v9);
    }

    else
    {
      OUTLINED_FUNCTION_15_0();
    }

    uint64_t v18 = OUTLINED_FUNCTION_14();
    *(void *)(v0 + 88) = v18;
    OUTLINED_FUNCTION_27(v18);
    OUTLINED_FUNCTION_40();
    return OUTLINED_FUNCTION_8_0();
  }

uint64_t LinkHomeScreenSuggestionConfigurator.deinit()
{
  return v0;
}

uint64_t LinkHomeScreenSuggestionConfigurator.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance LinkHomeScreenSuggestionConfigurator( uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_4E274);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance LinkHomeScreenSuggestionConfigurator;
  return LinkHomeScreenSuggestionConfigurator.updateContext(context:signal:)(a1);
}

uint64_t protocol witness for CandidateSuggestionConfigurator.isValid(signal:) in conformance LinkHomeScreenSuggestionConfigurator( uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_type_t v7 = (void *)swift_task_alloc(async function pointer to CandidateSuggestionConfigurator.isValid(signal:)[1]);
  *(void *)(v3 + 16) = v7;
  *os_log_type_t v7 = v3;
  v7[1] = protocol witness for SignalSubscriber.getAsyncLookupSubscriptions() in conformance LinkSuggestionsGenerator;
  return CandidateSuggestionConfigurator.isValid(signal:)(a1, a2, a3);
}

void *Context.getSuggestedActionsRequests()(uint64_t a1, uint64_t a2)
{
  v6[3] = &type metadata for LinkSuggestionsOwners;
  v6[4] = lazy protocol witness table accessor for type LinkSuggestionsOwners and conformance LinkSuggestionsOwners();
  LOBYTE(v6[0]) = 0;
  Context.getParam(for:key:)(v7, v6, 0xD000000000000017LL, 0x800000000003E7D0LL, a1, a2);
  __swift_destroy_boxed_opaque_existential_1(v6);
  if (v7[3])
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<LinkSuggestedActionsRequest>);
  }

  else
  {
    outlined destroy of CoreSignalTypes?((uint64_t)v7, &demangling cache variable for type metadata for Any?);
  }

  return &_swiftEmptySetSingleton;
}

void *ContextConstants.suggestedActionsRequest.unsafeMutableAddressor()
{
  return &static ContextConstants.suggestedActionsRequest;
}

unint64_t static ContextConstants.suggestedActionsRequest.getter()
{
  return 0xD000000000000017LL;
}

void LNSuggestionsRequest.__allocating_init(bundleIdentifier:onScreen:explicitRequest:)( uint64_t a1, uint64_t a2, char a3, char a4)
{
  id v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v4));
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [v8 initWithBundleIdentifier:v9 onScreen:a3 & 1 explicitRequest:a4 & 1];

  OUTLINED_FUNCTION_13_0();
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)()
{
  return v0();
}

void specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_36();
    OUTLINED_FUNCTION_21( (uint64_t)"Fatal error",  v1,  v2,  (uint64_t)"Can't construct Array with count < 0",  v3,  v4,  (uint64_t)"Swift/Array.swift");
    __break(1u);
  }

  else
  {
    if (a1) {
      *(void *)(static Array._allocateBufferUninitialized(minimumCapacity:)(a1, &type metadata for String) + 16) = a1;
    }
    OUTLINED_FUNCTION_39();
  }

{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_36();
    OUTLINED_FUNCTION_21( (uint64_t)"Fatal error",  v3,  v4,  (uint64_t)"Can't construct Array with count < 0",  v5,  v6,  (uint64_t)"Swift/Array.swift");
    __break(1u);
  }

  else
  {
    if (a1)
    {
      uint64_t v2 = type metadata accessor for LNAutoShortcut();
      *(void *)((char *)&dword_10
                + (static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v2) & 0xFFFFFFFFFFFFF8LL)) = a1;
    }

    OUTLINED_FUNCTION_39();
  }

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  unint64_t v8 = v7;
  uint64_t v9 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  uint64_t v10 = *a1;
  uint64_t v11 = *a1 + 8;
  uint64_t v12 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v10);
  swift_bridgeObjectRelease(v8);
  *a1 = v11;
  OUTLINED_FUNCTION_30();
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    unint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  __swift_destroy_boxed_opaque_existential_1(v12);
  return v7;
}

void *specialized _StringGuts._deconstructUTF8<A>(scratch:)( void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
      uint64_t result = 0LL;
      *a1 = __dst;
      return result;
    }

    goto LABEL_11;
  }

  if ((a6 & 0x1000000000000000LL) != 0)
  {
LABEL_11:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }

  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }

  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL);
      __break(1u);
      return result;
    }
  }

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return (void *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)( char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory with negative count",  60LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1170LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  2,  1173LL,  0);
  }

  __break(1u);
  return result;
}

void *_StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v2[2] + 1LL,  1,  (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v3 > 1),  v4 + 1,  1,  (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v4 = String.UTF8View._foreignCount()();
    if (v4) {
      goto LABEL_6;
    }
    return _swiftEmptyArrayStorage;
  }

  if ((a2 & 0x2000000000000000LL) != 0) {
    Swift::Int v4 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
LABEL_6:
  uint64_t v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v4, 0LL);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  2,  71LL,  0);
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v6 = v5;
  uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    uint64_t v9 = "Insufficient space allocated to copy string contents";
    uint64_t v10 = "Swift/StringUTF8View.swift";
    uint64_t v11 = 52LL;
    uint64_t v12 = 26LL;
    goto LABEL_15;
  }

  if (v7 == v4) {
    return v6;
  }
  uint64_t v9 = "invalid Collection: less than 'count' elements in collection";
  uint64_t v10 = "Swift/ContiguousArrayBuffer.swift";
  uint64_t v11 = 60LL;
  uint64_t v12 = 33LL;
LABEL_15:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11LL, 2LL, v9, v11, 2LL, v10, v12);
  __break(1u);
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = _swift_stdlib_malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v14, v8, v13);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v14, v8, v13);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000LL) != 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }

  return __src;
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  char v4 = *result;
  *char v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  int64_t v7 = (void *)v6;
  uint64_t v8 = *a1;
  uint64_t v9 = *a1 + 8;
  if (v6) {
    uint64_t v11 = v6;
  }
  else {
    uint64_t v11 = 0LL;
  }
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v8);
  *a1 = v9;
  uint64_t v10 = *a2;
  if (*a2)
  {
    *uint64_t v10 = v7;
    *a2 = v10 + 1;
  }

  else
  {
  }

  OUTLINED_FUNCTION_30();
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)( uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return swift_bridgeObjectRelease(v3);
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v26 = v3;
  for (i = (uint64_t *)(v3 + 40); ; i += 2)
  {
    uint64_t v9 = *(i - 1);
    uint64_t v8 = *i;
    uint64_t v10 = (void *)*a3;
    swift_retain(v9);
    swift_bridgeObjectRetain(v8);
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    uint64_t v13 = v10[2];
    BOOL v14 = (v11 & 1) == 0;
    uint64_t v15 = v13 + v14;
    if (__OFADD__(v13, v14)) {
      break;
    }
    char v16 = v11;
    if (v10[3] >= v15)
    {
      if ((a2 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Signal, [CandidateSuggestionConfigurator]>);
        _NativeDictionary.copy()();
      }
    }

    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
      unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
      if ((v16 & 1) != (v18 & 1)) {
        goto LABEL_18;
      }
      unint64_t v12 = v17;
    }

    uint64_t v19 = (void *)*a3;
    if ((v16 & 1) != 0)
    {
      swift_release(v9);
      uint64_t v20 = v19[7];
      swift_bridgeObjectRelease(*(void *)(v20 + 8 * v12));
      *(void *)(v20 + 8 * v12) = v8;
    }

    else
    {
      v19[(v12 >> 6) + 8] |= 1LL << v12;
      *(void *)(v19[6] + 8 * v12) = v9;
      *(void *)(v19[7] + 8 * v12) = v8;
      uint64_t v21 = v19[2];
      BOOL v22 = __OFADD__(v21, 1LL);
      uint64_t v23 = v21 + 1;
      if (v22) {
        goto LABEL_17;
      }
      v19[2] = v23;
    }

    a2 = 1;
    if (!--v4)
    {
      uint64_t v3 = v26;
      swift_bridgeObjectRelease(v26);
      return swift_bridgeObjectRelease(v3);
    }
  }

  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  uint64_t v25 = type metadata accessor for Signal(0LL);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v25);
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease(a1);
  }
  swift_bridgeObjectRetain(a1);
  char v30 = v6;
  for (i = (uint64_t *)(v6 + 40); ; i += 2)
  {
    uint64_t v9 = *(i - 1);
    uint64_t v8 = *i;
    uint64_t v34 = v9;
    uint64_t v10 = (void *)*a3;
    swift_retain(v9);
    swift_bridgeObjectRetain(v8);
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    uint64_t v13 = v10[2];
    BOOL v14 = (v11 & 1) == 0;
    uint64_t v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      uint64_t v26 = type metadata accessor for Signal(0LL);
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v26);
      __break(1u);
      goto LABEL_20;
    }

    char v16 = v11;
    if (v10[3] < v15) {
      break;
    }
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0) {
        goto LABEL_14;
      }
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Signal, [CandidateSuggestionConfigurator]>);
      _NativeDictionary.copy()();
      if ((v16 & 1) != 0) {
        goto LABEL_14;
      }
    }

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  void *v17;
  uint64_t *v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  Swift::String v29;
  Swift::String v30;
  uint64_t v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease(a1);
  }
  char v5 = a1 + 32;
  swift_bridgeObjectRetain(a1);
  while (1)
  {
    outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)( v5,  (uint64_t)&v40,  &demangling cache variable for type metadata for (String, ActionParameter));
    uint64_t v6 = v40;
    int64_t v7 = v41;
    uint64_t v38 = v40;
    unint64_t v39 = v41;
    uint64_t v35 = v42;
    uint64_t v36 = v43;
    uint64_t v37 = v44;
    uint64_t v8 = (void *)*a3;
    uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v41);
    char v11 = v8[2];
    unint64_t v12 = (v9 & 1) == 0;
    uint64_t v13 = v11 + v12;
    if (__OFADD__(v11, v12))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_20;
    }

    BOOL v14 = v9;
    if (v8[3] < v13) {
      break;
    }
    if ((a2 & 1) != 0)
    {
      if ((v9 & 1) != 0) {
        goto LABEL_14;
      }
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, ActionParameter>);
      _NativeDictionary.copy()();
      if ((v14 & 1) != 0) {
        goto LABEL_14;
      }
    }

{
  uint64_t v3;
  char *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  void *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36[2];
  uint64_t v37;
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease(a1);
  }
  char v30 = swift_bridgeObjectRetain(a1);
  for (i = (char *)(v30 + 65); ; i += 40)
  {
    int64_t v7 = *(void *)(i - 25);
    v31 = *(void *)(i - 17);
    uint64_t v8 = *(void *)(i - 9);
    uint64_t v32 = *i;
    uint64_t v9 = *(i - 1);
    v36[0] = *(void *)(i - 33);
    uint64_t v6 = v36[0];
    v36[1] = v7;
    uint64_t v10 = (void *)*a3;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v36[0], v7);
    uint64_t v13 = v10[2];
    BOOL v14 = (v11 & 1) == 0;
    uint64_t v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_20;
    }

    char v16 = v11;
    if (v10[3] < v15) {
      break;
    }
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0) {
        goto LABEL_14;
      }
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, LinkSuggestedActionsRequest>);
      _NativeDictionary.copy()();
      if ((v16 & 1) != 0) {
        goto LABEL_14;
      }
    }

{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  void *v26;
  uint64_t *v27;
  void *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45[2];
  uint64_t v46;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return swift_bridgeObjectRelease(a1);
  }
  unint64_t v39 = v3;
  uint64_t v40 = swift_bridgeObjectRetain(a1);
  uint64_t v6 = (uint64_t *)(v40 + 56);
  while (1)
  {
    int64_t v7 = *(v6 - 2);
    uint64_t v10 = *(v6 - 1);
    uint64_t v9 = *v6;
    v45[0] = *(v6 - 3);
    uint64_t v8 = v45[0];
    v45[1] = v7;
    char v11 = (void *)*a3;
    swift_bridgeObjectRetain(v7);
    uint64_t v41 = v9;
    swift_bridgeObjectRetain(v9);
    uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v45[0], v7);
    uint64_t v20 = v11[2];
    uint64_t v21 = (v12 & 1) == 0;
    BOOL v22 = v20 + v21;
    if (__OFADD__(v20, v21))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      goto LABEL_20;
    }

    uint64_t v23 = v12;
    if (v11[3] < v22) {
      break;
    }
    if ((a2 & 1) != 0)
    {
      if ((v12 & 1) != 0) {
        goto LABEL_14;
      }
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
      _NativeDictionary.copy()();
      if ((v23 & 1) != 0) {
        goto LABEL_14;
      }
    }

{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  void *v19;
  void *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease(a1);
  }
  swift_bridgeObjectRetain(a1);
  v31 = v5;
  uint64_t v6 = (uint64_t *)(v5 + 48);
  while (1)
  {
    int64_t v7 = *(v6 - 1);
    uint64_t v8 = *v6;
    uint64_t v36 = (id)*(v6 - 2);
    uint64_t v9 = (void *)*a3;
    uint64_t v10 = v36;
    swift_bridgeObjectRetain(v8);
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
    uint64_t v13 = v9[2];
    BOOL v14 = (v11 & 1) == 0;
    uint64_t v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      type metadata accessor for LNSuggestedActionDialogParameterKey(0LL);
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v27);
      __break(1u);
      goto LABEL_20;
    }

    char v16 = v11;
    if (v9[3] < v15) {
      break;
    }
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0) {
        goto LABEL_14;
      }
    }

    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<LNSuggestedActionDialogParameterKey, String>);
      _NativeDictionary.copy()();
      if ((v16 & 1) != 0) {
        goto LABEL_14;
      }
    }

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t result;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v4 = v3;
  char v5 = a1;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    return swift_bridgeObjectRelease(v5);
  }
  v61 = v4;
  swift_bridgeObjectRetain(a1);
  v60 = v5;
  uint64_t v9 = (uint64_t *)(v5 + 48);
  v62 = a3;
  while (1)
  {
    v63 = v6;
    char v11 = *(v9 - 2);
    uint64_t v10 = *(v9 - 1);
    unint64_t v12 = *v9;
    uint64_t v13 = (void *)*a3;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v12);
    uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
    BOOL v22 = v13[2];
    uint64_t v23 = (v14 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23)) {
      break;
    }
    uint64_t v25 = v14;
    if (v13[3] >= v24)
    {
      if ((a2 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [RetrievedContext]>);
        _NativeDictionary.copy()();
      }
    }

    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v24,  a2 & 1,  v15,  v16,  v17,  v18,  v19,  v20,  v57,  v58,  v59,  v60,  v61,  SBYTE4(v61));
      uint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
      if ((v25 & 1) != (v27 & 1)) {
        goto LABEL_40;
      }
      uint64_t v21 = v26;
    }

    uint64_t v28 = (void *)*a3;
    if ((v25 & 1) != 0)
    {
      uint64_t v29 = v28[7];
      char v30 = *(void *)(v29 + 8 * v21);
      v31 = *(void *)(v12 + 16);
      uint64_t v32 = *(void *)(v30 + 16);
      uint64_t v33 = v32 + v31;
      if (__OFADD__(v32, v31)) {
        goto LABEL_36;
      }
      uint64_t v34 = swift_bridgeObjectRetain(*(void *)(v29 + 8 * v21));
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || v33 > *(void *)(v30 + 24) >> 1)
      {
        if (v32 <= v33) {
          uint64_t v36 = v32 + v31;
        }
        else {
          uint64_t v36 = v32;
        }
        char v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v36,  1LL,  v30);
      }

      a3 = v62;
      if (*(void *)(v12 + 16))
      {
        uint64_t v37 = *(void *)(v30 + 16);
        uint64_t v38 = (*(void *)(v30 + 24) >> 1) - v37;
        unint64_t v39 = type metadata accessor for RetrievedContext(0LL);
        if (v38 < v31) {
          goto LABEL_38;
        }
        uint64_t v40 = *(void *)(v39 - 8);
        uint64_t v41 = (*(unsigned __int8 *)(v40 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
        uint64_t v42 = *(void *)(v40 + 72);
        uint64_t v43 = v30 + v41 + v42 * v37;
        uint64_t v44 = v12 + v41;
        uint64_t v45 = v42 * v31;
        uint64_t v46 = v43 + v45;
        uint64_t v47 = v44 + v45;
        v48 = v44 >= v46 || v43 >= v47;
        a3 = v62;
        if (!v48) {
          goto LABEL_41;
        }
        swift_arrayInitWithCopy(v43);
        if (v31)
        {
          uint64_t v49 = *(void *)(v30 + 16);
          v50 = __OFADD__(v49, v31);
          v51 = v49 + v31;
          if (v50) {
            goto LABEL_39;
          }
          *(void *)(v30 + 16) = v51;
        }
      }

      else if (v31)
      {
        goto LABEL_37;
      }

      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v10);
      uint64_t v55 = v28[7];
      swift_bridgeObjectRelease(*(void *)(v55 + 8 * v21));
      *(void *)(v55 + 8 * v21) = v30;
    }

    else
    {
      v28[(v21 >> 6) + 8] |= 1LL << v21;
      uint64_t v52 = (uint64_t *)(v28[6] + 16 * v21);
      *uint64_t v52 = v11;
      v52[1] = v10;
      *(void *)(v28[7] + 8 * v21) = v12;
      unsigned int v53 = v28[2];
      v50 = __OFADD__(v53, 1LL);
      uint64_t v54 = v53 + 1;
      if (v50) {
        goto LABEL_35;
      }
      v28[2] = v54;
    }

    v9 += 3;
    a2 = 1;
    --v6;
    if (v63 == 1)
    {
      char v5 = v60;
      swift_bridgeObjectRelease(v60);
      return swift_bridgeObjectRelease(v5);
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_41:
  LOBYTE(v57) = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v57,  1092LL,  0);
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v14 = v9;
  char v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Signal, [CandidateSuggestionConfigurator]>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    uint64_t v21 = type metadata accessor for Signal(0LL);
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
    __break(1u);
    return result;
  }

  unint64_t v14 = v16;
LABEL_5:
  char v18 = *v4;
  if ((v15 & 1) != 0)
  {
    uint64_t v19 = v18[7];
    uint64_t result = swift_bridgeObjectRelease(*(void *)(v19 + 8 * v14));
    *(void *)(v19 + 8 * v14) = a1;
  }

  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a1, v18);
    return swift_retain(a2);
  }

  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, char a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v7 = a2 & 1;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2 & 1);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }

  unint64_t v14 = v9;
  char v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<SiriLinkSuggestionsFeatureFlags, Bool>);
  uint64_t result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13);
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SiriLinkSuggestionsFeatureFlags);
    __break(1u);
    return result;
  }

  unint64_t v14 = result;
LABEL_5:
  char v18 = *v4;
  if ((v15 & 1) == 0) {
    return specialized _NativeDictionary._insert(at:key:value:)(v14, v7, a1 & 1, v18);
  }
  *(_BYTE *)(v18[7] + v14) = a1 & 1;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1LL << result;
  *(void *)(a4[6] + 8 * result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1LL);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)( unint64_t result, char a2, char a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1LL << result;
  *(_BYTE *)(a4[6] + result) = a2 & 1;
  *(_BYTE *)(a4[7] + result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1LL);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

void *__swift_allocate_boxed_opaque_existential_1(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t type metadata accessor for LinkSuggestionConfigurator()
{
  return objc_opt_self(&OBJC_CLASS____TtC25SiriLinkSuggestionsPlugin26LinkSuggestionConfigurator);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t type metadata accessor for LinkHomeScreenSuggestionConfigurator()
{
  return objc_opt_self(&OBJC_CLASS____TtC25SiriLinkSuggestionsPlugin36LinkHomeScreenSuggestionConfigurator);
}

uint64_t outlined init with copy of CoreSignalTypes?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CoreSignalTypes?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( char *a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  *uint64_t v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  *v3,  &demangling cache variable for type metadata for _ContiguousArrayStorage<InvocationType>,  (uint64_t (*)(void))&type metadata accessor for InvocationType,  (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:),  (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *uint64_t v3 = v4;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  uint64_t v17;
  OUTLINED_FUNCTION_1_0();
  if ((v6 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_0();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_24();
      if (v7)
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_6_0();
    }
  }

  OUTLINED_FUNCTION_12_0();
  if (v5)
  {
    unint64_t v14 = OUTLINED_FUNCTION_20(v9, v10, v11, v12, v13);
    char v15 = (void *)OUTLINED_FUNCTION_1(v14, 16 * v5 + 32);
    unint64_t v16 = _swift_stdlib_malloc_size(v15);
    v15[2] = v4;
    v15[3] = 2 * ((uint64_t)(v16 - 32) / 16);
  }

  char v17 = OUTLINED_FUNCTION_11_0();
  if ((v3 & 1) != 0)
  {
    v2(v17);
    *(void *)(v0 + 16) = 0LL;
  }

  else
  {
    v1(v17);
  }

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_13_0();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  OUTLINED_FUNCTION_1_0();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_0();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_24();
      if (v6)
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_6_0();
    }
  }

  OUTLINED_FUNCTION_12_0();
  if (v4)
  {
    Swift::Int v13 = OUTLINED_FUNCTION_20(v8, v9, v10, v11, v12);
    unint64_t v14 = (void *)OUTLINED_FUNCTION_1(v13, 48 * v4 + 32);
    OUTLINED_FUNCTION_10_0(v14);
  }

  char v15 = OUTLINED_FUNCTION_11_0();
  if ((v3 & 1) != 0)
  {
    v2(v15);
    *(void *)(v0 + 16) = 0LL;
  }

  else
  {
    v1(v15);
  }

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_9_0();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  OUTLINED_FUNCTION_1_0();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_0();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_24();
      if (v6)
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_6_0();
    }
  }

  OUTLINED_FUNCTION_12_0();
  if (v4)
  {
    Swift::Int v13 = OUTLINED_FUNCTION_20(v8, v9, v10, v11, v12);
    unint64_t v14 = (void *)OUTLINED_FUNCTION_1(v13, 24 * v4 + 32);
    OUTLINED_FUNCTION_10_0(v14);
  }

  char v15 = OUTLINED_FUNCTION_11_0();
  if ((v3 & 1) != 0)
  {
    v2(v15);
    *(void *)(v0 + 16) = 0LL;
  }

  else
  {
    v1(v15);
  }

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_9_0();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  uint64_t v17;
  OUTLINED_FUNCTION_1_0();
  if ((v6 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_0();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_24();
      if (v7)
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_6_0();
    }
  }

  OUTLINED_FUNCTION_12_0();
  if (v5)
  {
    unint64_t v14 = OUTLINED_FUNCTION_20(v9, v10, v11, v12, v13);
    char v15 = (void *)OUTLINED_FUNCTION_1(v14, 32 * v5 + 32);
    unint64_t v16 = _swift_stdlib_malloc_size(v15);
    v15[2] = v4;
    v15[3] = 2 * ((uint64_t)(v16 - 32) / 32);
  }

  char v17 = OUTLINED_FUNCTION_11_0();
  if ((v3 & 1) != 0)
  {
    v2(v17);
    *(void *)(v0 + 16) = 0LL;
  }

  else
  {
    v1(v17);
  }

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_13_0();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  OUTLINED_FUNCTION_1_0();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_0();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_24();
      if (v6)
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_6_0();
    }
  }

  OUTLINED_FUNCTION_12_0();
  if (v4)
  {
    Swift::Int v13 = OUTLINED_FUNCTION_20(v8, v9, v10, v11, v12);
    unint64_t v14 = (void *)OUTLINED_FUNCTION_1(v13, 40 * v4 + 32);
    OUTLINED_FUNCTION_10_0(v14);
  }

  char v15 = OUTLINED_FUNCTION_11_0();
  if ((v3 & 1) != 0)
  {
    v2(v15);
    *(void *)(v0 + 16) = 0LL;
  }

  else
  {
    v1(v15);
  }

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_9_0();
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, SiriSuggestions.DisplayRepresentable)>);
    uint64_t v11 = (char *)swift_allocObject(v10, 56 * v9 + 32, 7LL);
    size_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  Swift::Int v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v11 + 32);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((uint64_t)v13, v8);
  }

  swift_release(a4);
  return v11;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), void (*a7)(uint64_t, uint64_t, char *), void (*a8)(uint64_t, uint64_t, char *))
{
  char v12 = a1;
  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_0();
    if (v14 != v15)
    {
      OUTLINED_FUNCTION_24();
      if (v14)
      {
LABEL_24:
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_6_0();
    }
  }

  else
  {
    uint64_t v13 = a2;
  }

  uint64_t v16 = *(void *)(a4 + 16);
  if (v13 <= v16) {
    uint64_t v17 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v17 = v13;
  }
  if (!v17)
  {
    uint64_t v23 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }

  uint64_t v18 = OUTLINED_FUNCTION_20(a1, a2, a3, a4, a5);
  uint64_t v19 = *(void *)(a6(0LL) - 8);
  uint64_t v20 = *(void *)(v19 + 72);
  uint64_t v21 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v22 = (v21 + 32) & ~v21;
  uint64_t v23 = (void *)swift_allocObject(v18, v22 + v20 * v17, v21 | 7);
  size_t v24 = _swift_stdlib_malloc_size(v23);
  if (!v20)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  if (v24 - v22 == 0x8000000000000000LL && v20 == -1) {
    goto LABEL_23;
  }
  v23[2] = v16;
  v23[3] = 2 * ((uint64_t)(v24 - v22) / v20);
LABEL_18:
  uint64_t v26 = *(unsigned __int8 *)(*(void *)(a6(0LL) - 8) + 80LL);
  uint64_t v27 = (v26 + 32) & ~v26;
  uint64_t v28 = (char *)v23 + v27;
  uint64_t v29 = a4 + v27;
  if ((v12 & 1) != 0)
  {
    a7(v29, v16, v28);
    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    a8(v29, v16, v28);
  }

  OUTLINED_FUNCTION_5_0();
}

uint64_t specialized _NativeSet.update(with:isUnique:)(uint64_t a1, uint64_t a2, __int16 a3, char a4)
{
  char v5 = v4;
  int v54 = a3 & 1;
  int v55 = a3 & 0x100;
  uint64_t v9 = *v4;
  Hasher.init(_seed:)(v56, *(void *)(*v4 + 40));
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v56, a1, a2);
  swift_bridgeObjectRelease(a2);
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1LL << *(_BYTE *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0)
  {
    char v53 = a4;
    uint64_t v13 = ~v11;
    uint64_t v14 = *(void *)(v9 + 48);
    while (1)
    {
      uint64_t v15 = v14 + 24 * v12;
      uint64_t v16 = *(void *)(v15 + 8);
      int v17 = *(unsigned __int8 *)(v15 + 16);
      int v18 = *(unsigned __int8 *)(v15 + 17);
      if (*(void *)v15 == a1 && v16 == a2)
      {
        if ((((v54 != 0) ^ v17) & 1) == 0 && (v55 != 0) == v18)
        {
LABEL_17:
          uint64_t v21 = 0LL;
          int v20 = 1;
          char v5 = v4;
          a4 = v53;
          goto LABEL_18;
        }
      }

      else if ((_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v15, v16, a1, a2, 0LL) & 1) != 0 {
             && (((v54 != 0) ^ v17) & 1) == 0
      }
             && (((v55 != 0) ^ v18) & 1) == 0)
      {
        goto LABEL_17;
      }

      unint64_t v12 = (v12 + 1) & v13;
      if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0)
      {
        int v20 = 0;
        char v5 = v4;
        a4 = v53;
        goto LABEL_16;
      }
    }
  }

  int v20 = 0;
LABEL_16:
  uint64_t v21 = 1LL;
LABEL_18:
  uint64_t v22 = *(void *)(v9 + 16);
  uint64_t v23 = v22 + v21;
  if (__OFADD__(v22, v21))
  {
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }

  uint64_t v24 = *(void *)(v9 + 24);
  if (v24 >= v23 && (a4 & 1) != 0)
  {
    if (v20)
    {
LABEL_22:
      uint64_t v25 = 24 * v12;
      goto LABEL_48;
    }

    goto LABEL_27;
  }

  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v23);
  }

  else
  {
    if (v24 >= v23)
    {
      specialized _NativeSet.copy()();
      if (v20) {
        goto LABEL_22;
      }
LABEL_27:
      unint64_t v26 = v12 >> 6;
      uint64_t v27 = 1LL << v12;
LABEL_44:
      uint64_t v45 = *v5;
      *(void *)(*v5 + 8 * v26 + 56) |= v27;
      uint64_t v46 = *(void *)(v45 + 48) + 24 * v12;
      *(void *)uint64_t v46 = a1;
      *(void *)(v46 + 8) = a2;
      *(_BYTE *)(v46 + 16) = v54;
      *(_BYTE *)(v46 + 17) = BYTE1(v55);
      uint64_t v47 = *(void *)(v45 + 16);
      BOOL v48 = __OFADD__(v47, 1LL);
      uint64_t v49 = v47 + 1;
      if (!v48)
      {
        uint64_t result = 0LL;
        *(void *)(v45 + 16) = v49;
        return result;
      }

      goto LABEL_50;
    }

    specialized _NativeSet.copyAndResize(capacity:)(v23);
  }

  uint64_t v28 = *v5;
  Hasher.init(_seed:)(v56, *(void *)(*v5 + 40));
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v56, a1, a2);
  swift_bridgeObjectRelease(a2);
  Swift::Int v29 = Hasher._finalize()();
  uint64_t v30 = -1LL << *(_BYTE *)(v28 + 32);
  unint64_t v12 = v29 & ~v30;
  uint64_t v31 = v28 + 56;
  unint64_t v26 = v12 >> 6;
  uint64_t v27 = 1LL << v12;
  if (((1LL << v12) & *(void *)(v28 + 56 + 8 * (v12 >> 6))) == 0)
  {
    if ((v20 & 1) != 0)
    {
LABEL_51:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for LinkSuggestedActionsRequest);
      __break(1u);
      return result;
    }

    goto LABEL_44;
  }

  char v52 = v20;
  uint64_t v32 = ~v30;
  uint64_t v33 = *(void *)(v28 + 48);
  while (1)
  {
    uint64_t v34 = v33 + 24 * v12;
    uint64_t v35 = *(void *)(v34 + 8);
    int v36 = *(unsigned __int8 *)(v34 + 16);
    int v37 = *(unsigned __int8 *)(v34 + 17);
    if (*(void *)v34 != a1 || v35 != a2) {
      break;
    }
    BOOL v44 = v55 != 0;
    if ((((v54 != 0) ^ v36) & 1) == 0) {
      goto LABEL_39;
    }
LABEL_40:
    unint64_t v12 = (v12 + 1) & v32;
    unint64_t v26 = v12 >> 6;
    uint64_t v27 = 1LL << v12;
    if ((*(void *)(v31 + 8 * (v12 >> 6)) & (1LL << v12)) == 0)
    {
      if ((v52 & 1) == 0) {
        goto LABEL_44;
      }
      goto LABEL_51;
    }
  }

  uint64_t v39 = a1;
  uint64_t v40 = v31;
  uint64_t v41 = a1;
  uint64_t v42 = v33;
  char v43 = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v34, v35, v39, a2, 0LL);
  uint64_t v33 = v42;
  a1 = v41;
  uint64_t v31 = v40;
  if ((v43 & 1) == 0 || (((v54 != 0) ^ v36) & 1) != 0) {
    goto LABEL_40;
  }
  BOOL v44 = v55 != 0;
LABEL_39:
  if (((v44 ^ v37) & 1) != 0) {
    goto LABEL_40;
  }
  if ((v52 & 1) == 0) {
    goto LABEL_51;
  }
  uint64_t v25 = 24 * v12;
LABEL_48:
  uint64_t v51 = *(void *)(*v5 + 48) + v25;
  uint64_t result = *(void *)v51;
  *(void *)uint64_t v51 = a1;
  *(void *)(v51 + 8) = a2;
  *(_BYTE *)(v51 + 16) = v54;
  *(_BYTE *)(v51 + 17) = BYTE1(v55);
  return result;
}

unint64_t lazy protocol witness table accessor for type LinkSuggestionsOwners and conformance LinkSuggestionsOwners()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestionsOwners and conformance LinkSuggestionsOwners;
  if (!lazy protocol witness table cache variable for type LinkSuggestionsOwners and conformance LinkSuggestionsOwners)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LinkSuggestionsOwners,  &type metadata for LinkSuggestionsOwners);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestionsOwners and conformance LinkSuggestionsOwners);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestionsOwners and conformance LinkSuggestionsOwners;
  if (!lazy protocol witness table cache variable for type LinkSuggestionsOwners and conformance LinkSuggestionsOwners)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LinkSuggestionsOwners,  &type metadata for LinkSuggestionsOwners);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestionsOwners and conformance LinkSuggestionsOwners);
  }

  return result;
}

void outlined destroy of CoreSignalTypes?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  OUTLINED_FUNCTION_3();
}

void base witness table accessor for InternalGenerator in LinkSuggestionsGenerator(uint64_t a1, uint64_t a2)
{
}

uint64_t type metadata accessor for LinkSuggestionsGenerator()
{
  return objc_opt_self(&OBJC_CLASS____TtC25SiriLinkSuggestionsPlugin24LinkSuggestionsGenerator);
}

void base witness table accessor for Wrappable in LinkSuggestionsGenerator(uint64_t a1, uint64_t a2)
{
}

ValueMetadata *type metadata accessor for ContextConstants()
{
  return &type metadata for ContextConstants;
}

unint64_t type metadata accessor for LNAutoShortcut()
{
  unint64_t result = lazy cache variable for type metadata for LNAutoShortcut;
  if (!lazy cache variable for type metadata for LNAutoShortcut)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___LNAutoShortcut);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNAutoShortcut);
  }

  return result;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_0()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - 8) = *v0;
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v1 - 8) = *v0;
  return swift_task_dealloc(v3);
}

  ;
}

uint64_t OUTLINED_FUNCTION_3_0(uint64_t a1)
{
  return swift_slowDealloc(a1, -1LL, -1LL);
}

  ;
}

uint64_t OUTLINED_FUNCTION_5_0()
{
  return swift_release(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_7_0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_8_0()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

  ;
}

size_t OUTLINED_FUNCTION_10_0(void *a1)
{
  size_t result = _swift_stdlib_malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

uint64_t OUTLINED_FUNCTION_11_0()
{
  return v0 + 32;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_14()
{
  uint64_t v1 = (uint64_t *)v0[2];
  uint64_t v2 = *v1;
  v0[9] = *v1;
  v0[10] = v1[1];
  return swift_getObjectType(v2);
}

uint64_t OUTLINED_FUNCTION_15_0()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t OUTLINED_FUNCTION_16_0(uint64_t a1)
{
  return swift_slowAlloc(a1, -1LL);
}

uint64_t OUTLINED_FUNCTION_17_0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_18_0()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t OUTLINED_FUNCTION_20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return __swift_instantiateConcreteTypeFromMangledName(a5);
}

uint64_t OUTLINED_FUNCTION_21( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 36LL, 2LL, a7, 17LL);
}

uint64_t OUTLINED_FUNCTION_22(uint64_t a1)
{
  return swift_task_switch(a1, 0LL, 0LL);
}

uint64_t OUTLINED_FUNCTION_23()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8LL))(v0, v1);
}

  ;
}

id OUTLINED_FUNCTION_25(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2, 0, 0);
}

void OUTLINED_FUNCTION_26(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_27(uint64_t a1)
{
  return dispatch thunk of Actor.unownedExecutor.getter(a1, *(void *)(*(void *)(v1 + 8) + 8LL));
}

uint64_t OUTLINED_FUNCTION_29()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

  ;
}

  ;
}

BOOL OUTLINED_FUNCTION_32(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_33(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1LL, v1);
}

uint64_t OUTLINED_FUNCTION_34(uint64_t a1)
{
  return swift_arrayDestroy(v1, 1LL, a1);
}

uint64_t OUTLINED_FUNCTION_35()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

void OUTLINED_FUNCTION_37(uint64_t a1)
{
}

void *OUTLINED_FUNCTION_38()
{
  return __swift_project_boxed_opaque_existential_1(v1, v0);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_41()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

NSString OUTLINED_FUNCTION_42()
{
  return String._bridgeToObjectiveC()();
}

uint64_t OUTLINED_FUNCTION_43(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1LL, v2);
}

uint64_t OUTLINED_FUNCTION_44()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 24));
}

uint64_t OUTLINED_FUNCTION_45()
{
  return type metadata accessor for Logger(0LL);
}

uint64_t ToolParamSummary.toolPhrase.getter(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t ToolParamSummary.paramValues.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRetain(a3);
}

BOOL static DialogType.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void DialogType.hash(into:)(uint64_t a1, char a2)
{
}

uint64_t ToolParamSummary.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x617268506C6F6F74LL && a2 == 0xEA00000000006573LL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x617268506C6F6F74LL, 0xEA00000000006573LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  else if (a1 == 0x6C61566D61726170LL && a2 == 0xEB00000000736575LL)
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C61566D61726170LL, 0xEB00000000736575LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t ToolParamSummary.CodingKeys.init(intValue:)()
{
  return 2LL;
}

Swift::Int DialogType.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t LinkSuggestedAction.CodingKeys.intValue.getter()
{
  return 0LL;
}

uint64_t ToolParamSummary.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x6C61566D61726170LL;
  }
  else {
    return 0x617268506C6F6F74LL;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ToolParamSummary.CodingKeys( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static DialogType.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ToolParamSummary.CodingKeys()
{
  return DialogType.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ToolParamSummary.CodingKeys(uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolParamSummary.CodingKeys( uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ToolParamSummary.CodingKeys()
{
  return ToolParamSummary.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ToolParamSummary.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = ToolParamSummary.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance ToolParamSummary.CodingKeys()
{
  return LinkSuggestedAction.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance ToolParamSummary.CodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = ToolParamSummary.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolParamSummary.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolParamSummary.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ToolParamSummary.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolParamSummary.CodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_22_0();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  unint64_t v15 = lazy protocol witness table accessor for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_49640, &unk_49640, v15, v13, v14);
  char v22 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v22, v8);
  if (!v4)
  {
    uint64_t v20 = a4;
    char v21 = 1;
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    uint64_t v17 = lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]( &lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B],  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v21, v8, v16, v17);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
}

unint64_t lazy protocol witness table accessor for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ToolParamSummary.CodingKeys, &unk_49640);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ToolParamSummary.CodingKeys, &unk_49640);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ToolParamSummary.CodingKeys, &unk_49640);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ToolParamSummary.CodingKeys, &unk_49640);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys);
  }

  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t ToolParamSummary.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolParamSummary.CodingKeys>);
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_22_0();
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  unint64_t v6 = lazy protocol witness table accessor for type ToolParamSummary.CodingKeys and conformance ToolParamSummary.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_49640, &unk_49640, v6, v4, v5);
  if (v1)
  {
    OUTLINED_FUNCTION_37_0();
  }

  else
  {
    char v13 = 0;
    uint64_t v5 = KeyedDecodingContainer.decode(_:forKey:)(&v13, v3);
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    char v11 = 1;
    uint64_t v9 = lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]( &lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B],  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
    OUTLINED_FUNCTION_59();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v12, v8, &v11, v3, v8, v9);
    OUTLINED_FUNCTION_9_1();
    uint64_t v10 = v12;
    swift_bridgeObjectRetain(v12);
    OUTLINED_FUNCTION_37_0();
    swift_bridgeObjectRelease(v10);
    OUTLINED_FUNCTION_60();
  }

  return v5;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ToolParamSummary@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = ToolParamSummary.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ToolParamSummary(void *a1)
{
  return ToolParamSummary.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t one-time initialization function for appIntentSuggestionsSignposter()
{
  uint64_t v0 = type metadata accessor for OSSignposter(0LL);
  __swift_allocate_value_buffer(v0, static DefaultToolClient.appIntentSuggestionsSignposter);
  __swift_project_value_buffer(v0, (uint64_t)static DefaultToolClient.appIntentSuggestionsSignposter);
  return OSSignposter.init(subsystem:category:)( 0xD00000000000001BLL,  0x800000000003ECE0LL,  0xD000000000000019LL,  0x800000000003ED00LL);
}

{
  uint64_t v0;
  uint64_t v0 = type metadata accessor for OSSignposter(0LL);
  __swift_allocate_value_buffer(v0, static DefaultLinkClient.appIntentSuggestionsSignposter);
  __swift_project_value_buffer(v0, (uint64_t)static DefaultLinkClient.appIntentSuggestionsSignposter);
  return OSSignposter.init(subsystem:category:)( 0xD00000000000001BLL,  0x800000000003ECE0LL,  0xD000000000000019LL,  0x800000000003ED00LL);
}

uint64_t DefaultToolClient.appIntentSuggestionsSignposter.unsafeMutableAddressor()
{
  if (one-time initialization token for appIntentSuggestionsSignposter != -1) {
    swift_once( &one-time initialization token for appIntentSuggestionsSignposter,  one-time initialization function for appIntentSuggestionsSignposter);
  }
  uint64_t v0 = OUTLINED_FUNCTION_52();
  return __swift_project_value_buffer(v0, (uint64_t)static DefaultToolClient.appIntentSuggestionsSignposter);
}

uint64_t static DefaultToolClient.appIntentSuggestionsSignposter.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for appIntentSuggestionsSignposter != -1) {
    swift_once( &one-time initialization token for appIntentSuggestionsSignposter,  one-time initialization function for appIntentSuggestionsSignposter);
  }
  uint64_t v2 = OUTLINED_FUNCTION_52();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static DefaultToolClient.appIntentSuggestionsSignposter);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(a1, v3, v2);
}

uint64_t closure #1 in variable initialization expression of DefaultToolClient.toolSessionSetupTask( uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to static ToolExecutor.start()[1]);
  *(void *)(v1 + 24) = v2;
  *uint64_t v2 = v1;
  v2[1] = closure #1 in variable initialization expression of DefaultToolClient.toolSessionSetupTask;
  return static ToolExecutor.start()();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 24);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1) {
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  *(void *)(v4 + 32) = a1;
  OUTLINED_FUNCTION_16_1();
  return swift_task_switch(v8, v9, v10);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v3 = *(void **)(v1 + 16);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2( a1,  &opaque type descriptor for <<opaque return type of static ToolExecutor.start()>>,  1LL);
  *uint64_t v3 = v2;
  v3[1] = OpaqueTypeConformance2;
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t DefaultToolClient.fetchParamSummary(toolId:parameterValuesByKey:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[9] = a3;
  v4[10] = v3;
  v4[7] = a1;
  v4[8] = a2;
  uint64_t v5 = type metadata accessor for OSSignpostError(0LL);
  v4[11] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[12] = v6;
  v4[13] = OUTLINED_FUNCTION_3_1(v6);
  v4[14] = OUTLINED_FUNCTION_4_1();
  v4[15] = OUTLINED_FUNCTION_4_1();
  uint64_t v7 = type metadata accessor for ToolInvocationSummary.ParameterSummary.Value(0LL);
  v4[16] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[17] = v8;
  v4[18] = OUTLINED_FUNCTION_2_0(v8);
  uint64_t v9 = type metadata accessor for ToolInvocationSummary.ParameterSummary(0LL);
  v4[19] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[20] = v10;
  v4[21] = OUTLINED_FUNCTION_2_0(v10);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: ToolInvocationSummary.ParameterSummary)?);
  v4[22] = OUTLINED_FUNCTION_3_1(*(void *)(v11 - 8));
  v4[23] = OUTLINED_FUNCTION_4_1();
  uint64_t v12 = type metadata accessor for ToolInvocationSummary(0LL);
  v4[24] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v4[25] = v13;
  v4[26] = OUTLINED_FUNCTION_3_1(v13);
  v4[27] = OUTLINED_FUNCTION_4_1();
  uint64_t v14 = type metadata accessor for OSSignpostID(0LL);
  v4[28] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v4[29] = v15;
  v4[30] = OUTLINED_FUNCTION_3_1(v15);
  v4[31] = OUTLINED_FUNCTION_4_1();
  v4[32] = OUTLINED_FUNCTION_4_1();
  v4[33] = OUTLINED_FUNCTION_4_1();
  v4[34] = OUTLINED_FUNCTION_4_1();
  uint64_t v16 = OUTLINED_FUNCTION_52();
  v4[35] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v4[36] = v17;
  v4[37] = OUTLINED_FUNCTION_2_0(v17);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ToolInvocation?);
  v4[38] = OUTLINED_FUNCTION_2_0(*(void *)(v18 - 8));
  uint64_t v19 = type metadata accessor for ToolInvocation(0LL);
  v4[39] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v4[40] = v20;
  v4[41] = OUTLINED_FUNCTION_2_0(v20);
  OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_11_1(v21, v22, v23);
}

uint64_t DefaultToolClient.fetchParamSummary(toolId:parameterValuesByKey:)()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  swift_bridgeObjectRetain(v2);
  unint64_t v4 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v1);
  ToolInvocation.init(localToolId:parameterValuesByKey:)(v3, v2, v4);
  uint64_t v6 = v0[40];
  uint64_t v5 = v0[41];
  uint64_t v7 = v0[38];
  __swift_storeEnumTagSinglePayload(v7, 0LL, 1LL, v0[39]);
  OUTLINED_FUNCTION_42_0(v5, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32));
  if (one-time initialization token for appIntentSuggestionsSignposter != -1) {
    swift_once( &one-time initialization token for appIntentSuggestionsSignposter,  one-time initialization function for appIntentSuggestionsSignposter);
  }
  uint64_t v9 = v0[36];
  uint64_t v8 = v0[37];
  uint64_t v10 = __swift_project_value_buffer(v0[35], (uint64_t)static DefaultToolClient.appIntentSuggestionsSignposter);
  uint64_t v11 = OUTLINED_FUNCTION_42_0(v8, v10, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
  uint64_t v12 = OSSignposter.logHandle.getter(v11);
  uint64_t v13 = OSSignpostID.init(log:)(v12);
  uint64_t v14 = (os_log_s *)OSSignposter.logHandle.getter(v13);
  os_signpost_type_t v15 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    uint64_t v16 = (uint8_t *)OUTLINED_FUNCTION_16_0(2LL);
    *(_WORD *)uint64_t v16 = 0;
    os_signpost_id_t v18 = OSSignpostID.rawValue.getter(v16, v17);
    _os_signpost_emit_with_name_impl(&dword_0, v14, v15, v18, "fetchToolInvocationSummary", "", v16, 2u);
    OUTLINED_FUNCTION_3_0((uint64_t)v16);
  }

  uint64_t v19 = v0[33];
  uint64_t v20 = v0[34];
  uint64_t v21 = v0[28];
  uint64_t v22 = v0[29];
  uint64_t v23 = v0[10];

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v19, v20, v21);
  uint64_t v24 = type metadata accessor for OSSignpostIntervalState(0LL);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v0[42] = OSSignpostIntervalState.init(id:isOpen:)(v19, 1LL);
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8);
  v0[43] = v25;
  OUTLINED_FUNCTION_56(v25);
  uint64_t v26 = *(void *)(v23 + 16);
  uint64_t v27 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
  v0[44] = v27;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ToolExecutionSession);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *uint64_t v27 = v0;
  v27[1] = DefaultToolClient.fetchParamSummary(toolId:parameterValuesByKey:);
  return Task.value.getter(v0 + 2, v26, v28, v29, &protocol self-conformance witness table for Error);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  void *v11;
  uint64_t v2 = *(void *)(*(void *)v1 + 352LL);
  uint64_t v3 = *(void **)v1;
  v3[45] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    OUTLINED_FUNCTION_16_1();
    return swift_task_switch(v4, v5, v6);
  }

  else
  {
    uint64_t v9 = v3[2];
    uint64_t v8 = v3[3];
    v3[46] = v9;
    uint64_t ObjectType = swift_getObjectType(v9);
    uint64_t v11 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ToolExecutionSession.fetchToolInvocationSummary(for:)[1]);
    v3[47] = v11;
    *uint64_t v11 = v3;
    v11[1] = DefaultToolClient.fetchParamSummary(toolId:parameterValuesByKey:);
    return dispatch thunk of ToolExecutionSession.fetchToolInvocationSummary(for:)(v3[27], v3[41], ObjectType, v8);
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v2 = *(void *)(*(void *)v1 + 376LL);
  *(void *)(*(void *)v1 + 384LL) = v0;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_11_1(v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_s *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v59;
  int v60;
  BOOL v61;
  Swift::Int v62;
  unint64_t v63;
  void *v64;
  char v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  os_log_s *v77;
  uint64_t v78;
  os_signpost_type_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  _WORD *v85;
  uint64_t v86;
  os_signpost_id_t v87;
  void (*v88)(uint64_t, uint64_t);
  os_log_s *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void (*v158)(uint64_t, uint64_t);
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  OUTLINED_FUNCTION_21_0();
  v212 = v1;
  v213 = v2;
  v211 = v0;
  uint64_t v3 = swift_unknownObjectRelease(*(void *)(v0 + 368));
  unint64_t v4 = ((uint64_t (*)(uint64_t))ToolInvocationSummary.formatString.getter)(v3);
  v163 = v5;
  v169 = v4;
  if (one-time initialization token for appIntentsSuggestions != -1) {
LABEL_49:
  }
    swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
  uint64_t v6 = *(void *)(v0 + 208);
  uint64_t v7 = *(void *)(v0 + 216);
  uint64_t v8 = *(void *)(v0 + 192);
  uint64_t v9 = *(void *)(v0 + 200);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v10, (uint64_t)static Logger.appIntentsSuggestions);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v6, v7, v8);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  uint64_t v13 = static os_log_type_t.debug.getter();
  uint64_t v14 = os_log_type_enabled(v12, v13);
  uint64_t v16 = *(void *)(v0 + 200);
  os_signpost_type_t v15 = *(void *)(v0 + 208);
  if (v14)
  {
    uint64_t v17 = *(void *)(v0 + 152);
    v205 = *(void *)(v0 + 192);
    os_signpost_id_t v18 = (uint8_t *)OUTLINED_FUNCTION_16_0(12LL);
    v207 = OUTLINED_FUNCTION_16_0(32LL);
    v210 = (void *)v207;
    *(_DWORD *)os_signpost_id_t v18 = 136315138;
    uint64_t v19 = ((uint64_t (*)(void))ToolInvocationSummary.parameterSummaries.getter)();
    uint64_t v20 = ((uint64_t (*)(uint64_t, void *, uint64_t, void *))Dictionary.description.getter)( v19,  &type metadata for String,  v17,  &protocol witness table for String);
    uint64_t v22 = v21;
    swift_bridgeObjectRelease(v19);
    *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, (uint64_t *)&v210);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v18 + 4);
    swift_bridgeObjectRelease(v22);
    v158 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v158(v15, v205);
    _os_log_impl(&dword_0, v12, v13, "toolInvocationSummary.parameterSummaries - %s", v18, 0xCu);
    swift_arrayDestroy(v207, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_3_0(v207);
    OUTLINED_FUNCTION_3_0((uint64_t)v18);
  }

  else
  {
    v158 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v158(*(void *)(v0 + 208), *(void *)(v0 + 192));
  }

  v208 = *(void *)(v0 + 184);
  v200 = *(void *)(v0 + 176);
  uint64_t v23 = *(void *)(v0 + 160);
  v180 = *(void *)(v0 + 136);
  uint64_t v24 = ((uint64_t (*)(void))ToolInvocationSummary.parameterSummaries.getter)();
  uint64_t v25 = 0LL;
  v191 = v24 + 64;
  uint64_t v26 = -1LL;
  uint64_t v27 = -1LL << *(_BYTE *)(v24 + 32);
  if (-v27 < 64) {
    uint64_t v26 = ~(-1LL << -(char)v27);
  }
  uint64_t v28 = v26 & *(void *)(v24 + 64);
  v206 = enum case for ToolInvocationSummary.ParameterSummary.value(_:);
  v196 = (unint64_t)(63 - v27) >> 6;
  v138 = v196 - 1;
  v186 = &_swiftEmptyDictionarySingleton;
  uint64_t v29 = &demangling cache variable for type metadata for (key: String, value: ToolInvocationSummary.ParameterSummary);
  v203 = v24;
  v143 = v24 + 104;
  while (1)
  {
    if (v28)
    {
      uint64_t v30 = __clz(__rbit64(v28));
      v28 &= v28 - 1;
      uint64_t v31 = v30 | (v25 << 6);
LABEL_10:
      uint64_t v32 = *(void **)(v0 + 176);
      uint64_t v33 = (void *)(*(void *)(v203 + 48) + 16 * v31);
      uint64_t v34 = v33[1];
      *uint64_t v32 = *v33;
      *(void *)(v200 + 8) = v34;
      uint64_t v35 = *(void *)(v203 + 56) + *(void *)(v23 + 72) * v31;
      int v36 = v29;
      int v37 = OUTLINED_FUNCTION_46();
      OUTLINED_FUNCTION_42_0( (uint64_t)v32 + *(int *)(v37 + 48),  v35,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16));
      uint64_t v38 = v37;
      uint64_t v29 = v36;
      __swift_storeEnumTagSinglePayload((uint64_t)v32, 0LL, 1LL, v38);
      swift_bridgeObjectRetain(v34);
      goto LABEL_17;
    }

    uint64_t v39 = v25 + 1;
    if (__OFADD__(v25, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    if (v39 >= v196)
    {
      uint64_t v41 = v25;
    }

    else
    {
      uint64_t v40 = *(void *)(v191 + 8 * v39);
      if (v40) {
        goto LABEL_14;
      }
      uint64_t v41 = v25 + 1;
      if (v25 + 2 < v196)
      {
        uint64_t v40 = *(void *)(v191 + 8 * (v25 + 2));
        if (v40)
        {
          uint64_t v39 = v25 + 2;
LABEL_14:
          uint64_t v28 = (v40 - 1) & v40;
          uint64_t v31 = __clz(__rbit64(v40)) + (v39 << 6);
          uint64_t v25 = v39;
          goto LABEL_10;
        }

        uint64_t v41 = v25 + 2;
        if (v25 + 3 < v196)
        {
          uint64_t v40 = *(void *)(v191 + 8 * (v25 + 3));
          if (v40)
          {
            uint64_t v39 = v25 + 3;
            goto LABEL_14;
          }

          uint64_t v39 = v25 + 4;
          uint64_t v41 = v25 + 3;
          if (v25 + 4 < v196)
          {
            uint64_t v40 = *(void *)(v191 + 8 * v39);
            if (v40) {
              goto LABEL_14;
            }
            while (v25 + 5 < v196)
            {
              uint64_t v40 = *(void *)(v143 + 8 * v25++);
              if (v40)
              {
                uint64_t v39 = v25 + 4;
                goto LABEL_14;
              }
            }

            uint64_t v41 = v196 - 1;
          }
        }
      }
    }

    uint64_t v42 = *(void *)(v0 + 176);
    char v43 = OUTLINED_FUNCTION_46();
    __swift_storeEnumTagSinglePayload(v42, 1LL, 1LL, v43);
    uint64_t v28 = 0LL;
    uint64_t v25 = v41;
LABEL_17:
    BOOL v44 = *(void *)(v0 + 184);
    outlined init with take of (key: String, value: ToolInvocationSummary.ParameterSummary)?( *(void *)(v0 + 176),  v44,  &demangling cache variable for type metadata for (key: String, value: ToolInvocationSummary.ParameterSummary)?);
    uint64_t v45 = OUTLINED_FUNCTION_46();
    uint64_t v46 = *(uint64_t **)(v0 + 184);
    uint64_t v47 = *(void *)(v0 + 168);
    BOOL v48 = *(void *)(v0 + 152);
    uint64_t v49 = *v46;
    v50 = *(void *)(v208 + 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v47, (char *)v46 + *(int *)(v45 + 48), v48);
    uint64_t v51 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 88))(v47, v48);
    char v52 = *(void *)(v0 + 168);
    if (v51 == v206)
    {
      char v53 = *(void *)(v0 + 144);
      int v54 = *(void *)(v0 + 128);
      OUTLINED_FUNCTION_61(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 96));
      int v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v180 + 32))(v53, v52, v54);
      v148 = ((uint64_t (*)(uint64_t))ToolInvocationSummary.ParameterSummary.Value.localizedLabel.getter)(v55);
      v153 = v56;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v186);
      v210 = v186;
      uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v49, v50);
      uint64_t v59 = v186[2];
      HIDWORD(v175) = v60;
      v61 = (v60 & 1) == 0;
      v62 = v59 + v61;
      if (__OFADD__(v59, v61))
      {
        __break(1u);
LABEL_51:
        __break(1u);
        return result;
      }

      v63 = result;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
      uint64_t result = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v62);
      v64 = v210;
      uint64_t v29 = &demangling cache variable for type metadata for (key: String, value: ToolInvocationSummary.ParameterSummary);
      if ((result & 1) != 0)
      {
        uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v49, v50);
        if ((BYTE4(v175) & 1) != (v65 & 1)) {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        }
        v63 = result;
      }

      v186 = v64;
      if ((v175 & 0x100000000LL) != 0)
      {
        v66 = (uint64_t *)(v64[7] + 16 * v63);
        swift_bridgeObjectRelease(v66[1]);
        *v66 = v148;
        v66[1] = v153;
      }

      else
      {
        v64[(v63 >> 6) + 8] |= 1LL << v63;
        v67 = (uint64_t *)(v64[6] + 16 * v63);
        *v67 = v49;
        v67[1] = v50;
        v68 = (uint64_t *)(v64[7] + 16 * v63);
        *v68 = v148;
        v68[1] = v153;
        v69 = v64[2];
        v70 = __OFADD__(v69, 1LL);
        v71 = v69 + 1;
        if (v70) {
          goto LABEL_51;
        }
        v64[2] = v71;
        swift_bridgeObjectRetain(v50);
      }

      v72 = *(void *)(v0 + 144);
      v73 = *(void *)(v0 + 128);
      swift_bridgeObjectRelease(0x8000000000000000LL);
      swift_bridgeObjectRelease(v50);
      (*(void (**)(uint64_t, uint64_t))(v180 + 8))(v72, v73);
    }

    else
    {
      swift_bridgeObjectRelease(v50);
      OUTLINED_FUNCTION_61(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
    }
  }

  v74 = *(void *)(v0 + 216);
  v75 = *(void *)(v0 + 192);
  swift_release(v203);
  v76 = ((uint64_t (*)(uint64_t, uint64_t))v158)(v74, v75);
  v77 = (os_log_s *)((uint64_t (*)(uint64_t))OSSignposter.logHandle.getter)(v76);
  v78 = OSSignpostIntervalState.signpostID.getter();
  v79 = ((uint64_t (*)(uint64_t))static os_signpost_type_t.end.getter)(v78);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v80 = *(void *)(v0 + 120);
    v81 = *(void *)(v0 + 88);
    v82 = *(void *)(v0 + 96);
    v83 = OUTLINED_FUNCTION_62();
    ((void (*)(uint64_t))checkForErrorAndConsumeState(state:))(v83);
    OUTLINED_FUNCTION_25_0();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v82 + 88))(v80, v81) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v84 = "[Error] Interval already ended";
    }

    else
    {
      OUTLINED_FUNCTION_41_0(*(void *)(v0 + 120));
      v84 = "";
    }

    v85 = (_WORD *)OUTLINED_FUNCTION_16_0(2LL);
    *v85 = 0;
    v87 = OSSignpostID.rawValue.getter(v85, v86);
    OUTLINED_FUNCTION_12_1(&dword_0, v77, v79, v87, "fetchToolInvocationSummary", v84);
    OUTLINED_FUNCTION_3_0((uint64_t)v85);
  }

  v88 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
  v209 = *(void *)(v0 + 328);
  v89 = v77;
  v91 = *(void *)(v0 + 312);
  v90 = *(void *)(v0 + 320);
  v92 = *(void *)(v0 + 288);
  v93 = *(void *)(v0 + 296);
  v94 = *(void *)(v0 + 280);
  v95 = *(void *)(v0 + 256);
  v96 = *(void *)(v0 + 224);

  v88(v95, v96);
  OUTLINED_FUNCTION_25_0();
  (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v93, v94);
  (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v209, v91);
  v97 = OUTLINED_FUNCTION_14_0();
  v181 = *(void *)(v0 + 184);
  v192 = *(void *)(v0 + 176);
  v197 = *(void *)(v0 + 168);
  v201 = *(void *)(v0 + 144);
  v204 = *(void *)(v0 + 120);
  swift_task_dealloc(v97);
  OUTLINED_FUNCTION_55();
  OUTLINED_FUNCTION_29_0();
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v88);
  OUTLINED_FUNCTION_26_0();
  swift_task_dealloc(v90);
  v98 = swift_task_dealloc(v92);
  v106 = OUTLINED_FUNCTION_36_0( v98,  v99,  v100,  v101,  v102,  v103,  v104,  v105,  v138,  v143,  v148,  v153,  (uint64_t)v158,  v163,  v169,  v175,  v181);
  v114 = OUTLINED_FUNCTION_35_0( v106,  v107,  v108,  v109,  v110,  v111,  v112,  v113,  v139,  v144,  v149,  v154,  v159,  v164,  v170,  v176,  v182,  (uint64_t)v186,  v192);
  v122 = OUTLINED_FUNCTION_34_0( v114,  v115,  v116,  v117,  v118,  v119,  v120,  v121,  v140,  v145,  v150,  v155,  v160,  v165,  v171,  v177,  v183,  v187,  v193,  v197);
  v130 = OUTLINED_FUNCTION_33_0( v122,  v123,  v124,  v125,  v126,  v127,  v128,  v129,  v141,  v146,  v151,  v156,  v161,  v166,  v172,  v178,  v184,  v188,  v194,  v198,  v201);
  OUTLINED_FUNCTION_45_0( v130,  v131,  v132,  v133,  v134,  v135,  v136,  v137,  v142,  v147,  v152,  v157,  v162,  v167,  v173,  v179,  v185,  v189,  v195,  v199,  v202,  v204);
  OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_40_0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v174, v168, v190);
}

#error "8C78: call analysis failed (funcsize=94)"
#error "8E18: call analysis failed (funcsize=100)"
unint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t result;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  void *boxed_opaque_existential_1;
  __int128 *v33;
  unint64_t v34;
  char v35;
  uint64_t *v36;
  void *v37;
  uint64_t *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  int64_t v44;
  uint64_t v45;
  __int128 *v46;
  uint64_t *v47;
  __int128 *v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  void v52[5];
  __int128 v53;
  uint64_t v54;
  __int128 v55[3];
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: TypedValue));
  uint64_t v2 = __chkstk_darwin(v49);
  uint64_t v47 = (uint64_t *)((char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v42 - v4;
  v50 = a1;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, TypedValueAsyncResolvable>);
    uint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)(v6);
  }

  else
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v8 = *(void *)(v50 + 64);
  uint64_t v45 = v50 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(v50 + 32);
  if (-v9 < 64) {
    uint64_t v10 = ~(-1LL << -(char)v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  uint64_t v11 = v10 & v8;
  uint64_t v42 = -1LL << *(_BYTE *)(v50 + 32);
  BOOL v44 = (unint64_t)(63 - v9) >> 6;
  BOOL v48 = (__int128 *)v52;
  uint64_t v46 = (__int128 *)&v54;
  char v43 = v7 + 8;
  uint64_t result = swift_bridgeObjectRetain(v50);
  uint64_t v51 = 0LL;
  while (1)
  {
    while (1)
    {
      if (v11)
      {
        uint64_t v13 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v14 = v13 | (v51 << 6);
      }

      else
      {
        os_signpost_type_t v15 = v51 + 1;
        if (__OFADD__(v51, 1LL)) {
          goto LABEL_34;
        }
        if (v15 >= v44)
        {
LABEL_31:
          outlined consume of [String : String].Iterator._Variant(v50);
          return (unint64_t)v7;
        }

        uint64_t v16 = *(void *)(v45 + 8 * v15);
        uint64_t v17 = v51 + 1;
        if (!v16)
        {
          uint64_t v17 = v51 + 2;
          if (v51 + 2 >= v44) {
            goto LABEL_31;
          }
          uint64_t v16 = *(void *)(v45 + 8 * v17);
          if (!v16)
          {
            uint64_t v17 = v51 + 3;
            if (v51 + 3 >= v44) {
              goto LABEL_31;
            }
            uint64_t v16 = *(void *)(v45 + 8 * v17);
            if (!v16)
            {
              uint64_t v17 = v51 + 4;
              if (v51 + 4 >= v44) {
                goto LABEL_31;
              }
              uint64_t v16 = *(void *)(v45 + 8 * v17);
              if (!v16)
              {
                os_signpost_id_t v18 = v51 + 5;
                if (v51 + 5 >= v44) {
                  goto LABEL_31;
                }
                uint64_t v16 = *(void *)(v45 + 8 * v18);
                if (!v16)
                {
                  while (1)
                  {
                    uint64_t v17 = v18 + 1;
                    if (__OFADD__(v18, 1LL)) {
                      goto LABEL_35;
                    }
                    if (v17 >= v44) {
                      goto LABEL_31;
                    }
                    uint64_t v16 = *(void *)(v45 + 8 * v17);
                    ++v18;
                    if (v16) {
                      goto LABEL_25;
                    }
                  }
                }

                uint64_t v17 = v51 + 5;
              }
            }
          }
        }

LABEL_25:
        uint64_t v11 = (v16 - 1) & v16;
        uint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
        uint64_t v51 = v17;
      }

      uint64_t v19 = *(void *)(v50 + 56);
      uint64_t v20 = (uint64_t *)(*(void *)(v50 + 48) + 16 * v14);
      uint64_t v21 = *v20;
      uint64_t v22 = v20[1];
      uint64_t v23 = type metadata accessor for TypedValue(0LL);
      uint64_t v24 = *(void *)(v23 - 8);
      uint64_t v25 = v19 + *(void *)(v24 + 72) * v14;
      uint64_t v26 = v49;
      (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(&v5[*(int *)(v49 + 48)], v25, v23);
      *(void *)uint64_t v5 = v21;
      *((void *)v5 + 1) = v22;
      uint64_t v27 = v47;
      outlined init with take of (key: String, value: ToolInvocationSummary.ParameterSummary)?( (uint64_t)v5,  (uint64_t)v47,  &demangling cache variable for type metadata for (key: String, value: TypedValue));
      uint64_t v28 = (char *)v27 + *(int *)(v26 + 48);
      uint64_t v30 = *v27;
      uint64_t v29 = v27[1];
      v52[3] = v23;
      v52[4] = &protocol witness table for TypedValue;
      uint64_t v31 = v48;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v48);
      (*(void (**)(void *, char *, uint64_t))(v24 + 32))(boxed_opaque_existential_1, v28, v23);
      uint64_t v33 = v46;
      outlined init with take of LinkDialogIdProvider(v31, (uint64_t)v46);
      outlined init with take of LinkDialogIdProvider(v33, (uint64_t)v55);
      outlined init with take of LinkDialogIdProvider(v55, (uint64_t)&v53);
      swift_bridgeObjectRetain(v22);
      uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v30, v29);
      uint64_t v34 = result;
      if ((v35 & 1) == 0) {
        break;
      }
      int v36 = (uint64_t *)(v7[6] + 16 * result);
      swift_bridgeObjectRelease(v36[1]);
      *int v36 = v30;
      v36[1] = v29;
      int v37 = (void *)(v7[7] + 40 * v34);
      __swift_destroy_boxed_opaque_existential_1(v37);
      uint64_t result = outlined init with take of LinkDialogIdProvider(&v53, (uint64_t)v37);
    }

    if (v7[2] >= v7[3]) {
      break;
    }
    *(void *)((char *)v43 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v38 = (uint64_t *)(v7[6] + 16 * result);
    *uint64_t v38 = v30;
    v38[1] = v29;
    uint64_t result = outlined init with take of LinkDialogIdProvider(&v53, v7[7] + 40 * result);
    uint64_t v39 = v7[2];
    uint64_t v40 = __OFADD__(v39, 1LL);
    uint64_t v41 = v39 + 1;
    if (v40) {
      goto LABEL_33;
    }
    v7[2] = v41;
  }

  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

        OUTLINED_FUNCTION_64();
        uint64_t v46 = v21;
        uint64_t v47 = v22;
        uint64_t v10 = v23 + (v21 << 6);
      }

      uint64_t v24 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
      uint64_t v26 = *v24;
      uint64_t v25 = v24[1];
      uint64_t v27 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v10);
      uint64_t v28 = *v27;
      uint64_t v29 = v27[1];
      v48[3] = v7;
      v48[4] = v8;
      v48[0] = v28;
      v48[1] = v29;
      outlined init with take of LinkDialogIdProvider(v5, (uint64_t)v6);
      outlined init with take of LinkDialogIdProvider(v6, (uint64_t)v51);
      outlined init with take of LinkDialogIdProvider(v51, (uint64_t)&v49);
      OUTLINED_FUNCTION_59();
      swift_bridgeObjectRetain(v29);
      uint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
      uint64_t v31 = v30;
      if ((v32 & 1) == 0) {
        break;
      }
      uint64_t v33 = v6;
      uint64_t v34 = v2;
      uint64_t v35 = v8;
      int v36 = v7;
      int v37 = v5;
      uint64_t v38 = (uint64_t *)(v3[6] + 16 * v30);
      swift_bridgeObjectRelease(v38[1]);
      *uint64_t v38 = v26;
      v38[1] = v25;
      uint64_t v5 = v37;
      uint64_t v7 = v36;
      uint64_t v8 = v35;
      uint64_t v2 = v34;
      uint64_t v6 = v33;
      uint64_t v39 = (void *)(v3[7] + 40 * v31);
      __swift_destroy_boxed_opaque_existential_1(v39);
      outlined init with take of LinkDialogIdProvider(&v49, (uint64_t)v39);
      uint64_t v1 = v47;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    OUTLINED_FUNCTION_53((v30 >> 3) & 0x1FFFFFFFFFFFFFF8LL);
    uint64_t v41 = (uint64_t *)(v40 + 16 * v31);
    *uint64_t v41 = v26;
    v41[1] = v25;
    outlined init with take of LinkDialogIdProvider(&v49, v3[7] + 40 * v31);
    uint64_t v42 = v3[2];
    uint64_t v13 = __OFADD__(v42, 1LL);
    char v43 = v42 + 1;
    if (v13) {
      goto LABEL_33;
    }
    v3[2] = v43;
    uint64_t v1 = v47;
  }

  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
}

        OUTLINED_FUNCTION_64();
        v50 = v22;
        uint64_t v11 = v24 + (v23 << 6);
        uint64_t v7 = v23;
      }

      uint64_t v25 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v11);
      uint64_t v27 = *v25;
      uint64_t v26 = v25[1];
      uint64_t v28 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v11);
      uint64_t v29 = *v28;
      uint64_t v30 = v28[1];
      char v52 = v27;
      char v53 = v26;
      v51[0] = v29;
      v51[1] = v30;
      swift_bridgeObjectRetain(v26);
      OUTLINED_FUNCTION_59();
      swift_dynamicCast(v5, v51, v9, v8, 7LL);
      uint64_t v31 = v52;
      uint64_t v32 = v53;
      outlined init with take of Any(v5, v6);
      outlined init with take of Any(v6, v57);
      outlined init with take of Any(v57, &v55);
      uint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
      uint64_t v34 = v33;
      if ((v35 & 1) == 0) {
        break;
      }
      uint64_t v49 = v7;
      int v36 = v6;
      int v37 = v5;
      uint64_t v38 = v2;
      uint64_t v39 = v9;
      uint64_t v40 = v8;
      uint64_t v41 = (uint64_t *)(v3[6] + 16 * v33);
      swift_bridgeObjectRelease(v41[1]);
      *uint64_t v41 = v31;
      v41[1] = v32;
      uint64_t v8 = v40;
      uint64_t v9 = v39;
      uint64_t v2 = v38;
      uint64_t v5 = v37;
      uint64_t v6 = v36;
      uint64_t v7 = v49;
      uint64_t v42 = (void *)(v3[7] + 32 * v34);
      __swift_destroy_boxed_opaque_existential_1(v42);
      outlined init with take of Any(&v55, v42);
      uint64_t v1 = v50;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    OUTLINED_FUNCTION_53((v33 >> 3) & 0x1FFFFFFFFFFFFFF8LL);
    BOOL v44 = (uint64_t *)(v43 + 16 * v34);
    *BOOL v44 = v31;
    v44[1] = v32;
    outlined init with take of Any(&v55, (_OWORD *)(v3[7] + 32 * v34));
    uint64_t v45 = v3[2];
    uint64_t v14 = __OFADD__(v45, 1LL);
    uint64_t v46 = v45 + 1;
    if (v14) {
      goto LABEL_33;
    }
    v3[2] = v46;
    uint64_t v1 = v50;
  }

  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
}

  __break(1u);
  return result;
}

    OUTLINED_FUNCTION_4_6();
    uint64_t v13 = v20 & v19;
  }

  os_signpost_id_t v18 = v17 + 3;
  if (v18 >= v14) {
    goto LABEL_28;
  }
  if (v5[v18])
  {
    uint64_t v9 = v18;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    ++v18;
    if (v5[v9]) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v18 - 1) & v18;
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  os_signpost_id_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    os_signpost_id_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v18 - 1) & v18;
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  os_signpost_id_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    os_signpost_id_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

  __break(1u);
  return result;
}

void specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v2 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Encodable>);
    uint64_t v3 = (void *)OUTLINED_FUNCTION_20_0();
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v45 = v2 + 64;
  OUTLINED_FUNCTION_6_1();
  uint64_t v44 = v4;
  uint64_t v5 = (__int128 *)v48;
  uint64_t v6 = (__int128 *)&v50;
  swift_bridgeObjectRetain(v2);
  uint64_t v46 = 0LL;
  uint64_t v7 = &type metadata for String;
  uint64_t v8 = &protocol witness table for String;
  while (1)
  {
    while (1)
    {
      if (v1)
      {
        OUTLINED_FUNCTION_39_0();
        uint64_t v47 = v1;
        uint64_t v10 = v9 | (v46 << 6);
      }

      else
      {
        uint64_t v11 = v46 + 1;
        if (__OFADD__(v46, 1LL)) {
          goto LABEL_34;
        }
        if (v11 >= v44)
        {
LABEL_31:
          outlined consume of [String : String].Iterator._Variant(v2);
          OUTLINED_FUNCTION_10_1();
          return;
        }

        if (!*(void *)(v45 + 8 * v11))
        {
          OUTLINED_FUNCTION_54();
          if (v12 == v13) {
            goto LABEL_31;
          }
          OUTLINED_FUNCTION_30_0();
          if (!v14)
          {
            OUTLINED_FUNCTION_54();
            if (v12 == v13) {
              goto LABEL_31;
            }
            OUTLINED_FUNCTION_30_0();
            if (!v15)
            {
              OUTLINED_FUNCTION_54();
              if (v12 == v13) {
                goto LABEL_31;
              }
              OUTLINED_FUNCTION_30_0();
              if (!v17)
              {
                uint64_t v18 = v16 + 4;
                if (v18 >= v44) {
                  goto LABEL_31;
                }
                if (!*(void *)(v45 + 8 * v18))
                {
                  while (!__OFADD__(v18, 1LL))
                  {
                    OUTLINED_FUNCTION_54();
                    if (v12 == v13) {
                      goto LABEL_31;
                    }
                    OUTLINED_FUNCTION_30_0();
                    uint64_t v18 = v19 + 1;
                    if (v20) {
                      goto LABEL_25;
                    }
                  }

                  goto LABEL_35;
                }
              }
            }
          }
        }

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  void *v39;
  char *v40;
  uint64_t *v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void v51[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  _OWORD v57[2];
  uint64_t v2 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v3 = (void *)OUTLINED_FUNCTION_20_0();
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  BOOL v48 = v2 + 64;
  OUTLINED_FUNCTION_6_1();
  uint64_t v47 = v4;
  uint64_t v5 = &v54;
  uint64_t v6 = &v56;
  swift_bridgeObjectRetain(v2);
  uint64_t v7 = 0LL;
  uint64_t v8 = (char *)&type metadata for Any + 8;
  uint64_t v9 = &type metadata for String;
  while (1)
  {
    while (1)
    {
      if (v1)
      {
        OUTLINED_FUNCTION_39_0();
        uint64_t v50 = v1;
        uint64_t v11 = v10 | (v7 << 6);
      }

      else
      {
        char v12 = v7 + 1;
        if (__OFADD__(v7, 1LL)) {
          goto LABEL_34;
        }
        if (v12 >= v47)
        {
LABEL_31:
          outlined consume of [String : String].Iterator._Variant(v2);
          OUTLINED_FUNCTION_10_1();
          return;
        }

        if (!*(void *)(v48 + 8 * v12))
        {
          OUTLINED_FUNCTION_31_0();
          if (v13 == v14) {
            goto LABEL_31;
          }
          OUTLINED_FUNCTION_44_0();
          if (!v15)
          {
            OUTLINED_FUNCTION_31_0();
            if (v13 == v14) {
              goto LABEL_31;
            }
            OUTLINED_FUNCTION_44_0();
            if (!v16)
            {
              OUTLINED_FUNCTION_31_0();
              if (v13 == v14) {
                goto LABEL_31;
              }
              OUTLINED_FUNCTION_44_0();
              if (!v18)
              {
                uint64_t v19 = v17 + 4;
                if (v19 >= v47) {
                  goto LABEL_31;
                }
                if (!*(void *)(v48 + 8 * v19))
                {
                  while (!__OFADD__(v19, 1LL))
                  {
                    OUTLINED_FUNCTION_31_0();
                    if (v13 == v14) {
                      goto LABEL_31;
                    }
                    OUTLINED_FUNCTION_44_0();
                    uint64_t v19 = v20 + 1;
                    if (v21) {
                      goto LABEL_25;
                    }
                  }

                  goto LABEL_35;
                }
              }
            }
          }
        }

uint64_t DefaultToolClient.deinit()
{
  return v0;
}

uint64_t DefaultToolClient.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

void DefaultToolClient.__allocating_init()()
{
}

uint64_t DefaultToolClient.init()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin();
  OUTLINED_FUNCTION_22_0();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = type metadata accessor for TaskPriority(0LL);
  __swift_storeEnumTagSinglePayload(v4, 1LL, 1LL, v5);
  uint64_t v6 = swift_allocObject(&unk_49518, 32LL, 7LL);
  *(void *)(v6 + 16) = 0LL;
  *(void *)(v6 + 24) = 0LL;
  if (__swift_getEnumTagSinglePayload(v4, 1LL, v5) == 1)
  {
    outlined destroy of CoreSignalTypes?(v4, &demangling cache variable for type metadata for TaskPriority?);
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v9 = 7168LL;
  }

  else
  {
    unsigned __int8 v10 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
    uint64_t v9 = v10 | 0x1C00LL;
    uint64_t v11 = *(void *)(v6 + 16);
    if (v11)
    {
      uint64_t v12 = *(void *)(v6 + 24);
      uint64_t ObjectType = swift_getObjectType(v11);
      swift_unknownObjectRetain(v11);
      uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v12);
      uint64_t v8 = v14;
      swift_unknownObjectRelease(v11);
    }

    else
    {
      uint64_t v7 = 0LL;
      uint64_t v8 = 0LL;
    }
  }

  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ToolExecutionSession);
  if (v8 | v7)
  {
    v18[0] = 0LL;
    v18[1] = 0LL;
    uint64_t v16 = v18;
    v18[2] = v7;
    v18[3] = v8;
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  *(void *)(v1 + 16) = swift_task_create( v9,  v16,  v15,  &async function pointer to partial apply for closure #1 in variable initialization expression of DefaultToolClient.toolSessionSetupTask,  v6);
  return v1;
}

uint64_t protocol witness for ToolClient.fetchParamSummary(toolId:parameterValuesByKey:) in conformance DefaultToolClient( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_4E564);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for ToolClient.fetchParamSummary(toolId:parameterValuesByKey:) in conformance DefaultToolClient;
  return DefaultToolClient.fetchParamSummary(toolId:parameterValuesByKey:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v8 = OUTLINED_FUNCTION_0_0();
  if (!v3)
  {
    uint64_t v8 = a1;
    uint64_t v9 = a2;
    unsigned __int8 v10 = a3;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(v8, v9, v10);
}

uint64_t closure #1 in _globalStringTablePointerOfStaticString(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result) {
    *a2 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

void closure #1 in osSignpostWithoutMessage(log:name:id:type:state:formatString:)( uint8_t *a1, uint32_t a2, os_log_s *a3, os_signpost_type_t a4, uint64_t a5, const char *a6, const char *a7)
{
  os_signpost_id_t v13 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_0, a3, a4, v13, a6, a7, a1, a2);
}

uint64_t static AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors.__derived_enum_equals(_:_:)()
{
  return 1LL;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = OUTLINED_FUNCTION_17_1();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_23_0(a1);
  uint64_t v3 = OUTLINED_FUNCTION_13_1(v2);
  OUTLINED_FUNCTION_19((uint64_t)v3);
  Swift::Int v4 = OUTLINED_FUNCTION_17_1();
  OUTLINED_FUNCTION_57();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v1, v4);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v3 = *(void *)(v1 + 40);
  Swift::Int v4 = type metadata accessor for Signal(0LL);
  lazy protocol witness table accessor for type Signal and conformance Signal( &lazy protocol witness table cache variable for type Signal and conformance Signal,  (uint64_t)&protocol conformance descriptor for Signal);
  uint64_t v6 = dispatch thunk of Hashable._rawHashValue(seed:)(v3, v4, v5);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  uint64_t v2 = v1;
  char v4 = a1 & 1;
  Hasher.init(_seed:)(v7, *(void *)(v2 + 40));
  Hasher._combine(_:)(a1 & 1);
  Swift::Int v5 = OUTLINED_FUNCTION_17_1();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v4, v5);
}

uint64_t sub_9D28()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t _s25SiriLinkSuggestionsPlugin17DefaultToolClientC20toolSessionSetupTask33_4798BCE20D0F3642FE2DAC187424D220LLScTy0F3Kit0f9ExecutionI0_ps5Error_pGvpfiAfG_pyYaKcfU_TA_0( uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_4E594);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance LinkSuggestionConfigurator;
  return closure #1 in variable initialization expression of DefaultToolClient.toolSessionSetupTask(a1);
}

uint64_t destroy for ToolParamSummary(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

void initializeBufferWithCopyOfBuffer for ToolParamSummary(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  OUTLINED_FUNCTION_3();
}

void *assignWithCopy for ToolParamSummary(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for ToolParamSummary(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolParamSummary(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolParamSummary(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ToolParamSummary()
{
  return &type metadata for ToolParamSummary;
}

uint64_t type metadata accessor for DefaultToolClient()
{
  return objc_opt_self(&OBJC_CLASS____TtC25SiriLinkSuggestionsPlugin17DefaultToolClient);
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ToolParamSummary.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

      OUTLINED_FUNCTION_77();
    }
  }

  OUTLINED_FUNCTION_13_2();
  *uint64_t v14 = v16;
  OUTLINED_FUNCTION_23_1();
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolParamSummary.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_A064 + 4 * byte_3C725[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_A098 + 4 * byte_3C720[v4]))();
}

uint64_t sub_A098(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_A0A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0xA0A8LL);
  }
  return result;
}

uint64_t sub_A0B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0xA0BCLL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_A0C0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_A0C8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for ToolParamSummary.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for ToolParamSummary.CodingKeys(_BYTE *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

void *type metadata accessor for ToolParamSummary.CodingKeys()
{
  return &unk_49640;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unsigned __int8 v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2LL);
      return v5;
    }

    uint64_t v13 = v11;
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = ~v4;
      unint64_t v5 = (v5 + 1) & v15;
      if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
      {
        while (1)
        {
          uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
          uint64_t v9 = v17;
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19) {
            break;
          }
          uint64_t v21 = v19;
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0LL);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v15;
            if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
              continue;
            }
          }

          return v5;
        }

        goto LABEL_16;
      }
    }
  }

  return v5;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v13 = a1;
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    unint64_t v6 = v2;
    uint64_t v7 = ~v4;
    uint64_t v8 = type metadata accessor for Signal(0LL);
    lazy protocol witness table accessor for type Signal and conformance Signal( &lazy protocol witness table cache variable for type Signal and conformance Signal,  (uint64_t)&protocol conformance descriptor for Signal);
    uint64_t v10 = v9;
    do
    {
      BOOL v12 = *(void *)(*(void *)(v6 + 48) + 8 * v5);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v12, &v13, v8, v10) & 1) != 0) {
        break;
      }
      unint64_t v5 = (v5 + 1) & v7;
    }

    while (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0);
  }

  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(char a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (((((a1 & 1) == 0) ^ *(unsigned __int8 *)(v7 + result)) & 1) == 0)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (((((a1 & 1) == 0) ^ *(_BYTE *)(v7 + result)) & 1) != 0) {
          break;
        }
      }
    }
  }

  return result;
}

void lazy protocol witness table accessor for type Signal and conformance Signal( unint64_t *a1, uint64_t a2)
{
  if (!*a1)
  {
    uint64_t v4 = type metadata accessor for Signal(255LL);
    atomic_store(swift_getWitnessTable(a2, v4), a1);
  }

  OUTLINED_FUNCTION_3();
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void outlined init with take of (key: String, value: ToolInvocationSummary.ParameterSummary)?( uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  OUTLINED_FUNCTION_3();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

void OUTLINED_FUNCTION_0_1(void *a1@<X8>)
{
  uint64_t v3 = v1[14];
  *(void *)(v2 - 96) = v1[15];
  *(void *)(v2 - 88) = v3;
  *(void *)(v2 - 80) = v1[13];
}

uint64_t OUTLINED_FUNCTION_2_0@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t OUTLINED_FUNCTION_3_1@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t OUTLINED_FUNCTION_4_1()
{
  return swift_task_alloc(v0);
}

uint64_t OUTLINED_FUNCTION_5_1(uint64_t (*a1)(void))
{
  return a1();
}

  ;
}

uint64_t OUTLINED_FUNCTION_9_1()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_11_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

void OUTLINED_FUNCTION_12_1( void *a1, os_log_s *a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5, const char *a6)
{
}

void *OUTLINED_FUNCTION_13_1(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, v1);
}

uint64_t OUTLINED_FUNCTION_14_0()
{
  return *(void *)(v0 + 328);
}

  ;
}

Swift::Int OUTLINED_FUNCTION_17_1()
{
  return Hasher._finalize()();
}

uint64_t OUTLINED_FUNCTION_18_1(_WORD *a1, uint64_t a2)
{
  *a1 = 0;
  return OSSignpostID.rawValue.getter(a1, a2);
}

uint64_t OUTLINED_FUNCTION_19(uint64_t a1, ...)
{
  return String.hash(into:)(va, v1, v2);
}

uint64_t OUTLINED_FUNCTION_20_0()
{
  return static _DictionaryStorage.allocate(capacity:)(v0);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_23_0(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_24_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, a11);
}

uint64_t OUTLINED_FUNCTION_25_0()
{
  return swift_release(v0);
}

uint64_t OUTLINED_FUNCTION_26_0()
{
  return swift_task_dealloc(v0);
}

uint64_t OUTLINED_FUNCTION_27_0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 88))(v0, v2);
}

uint64_t OUTLINED_FUNCTION_28()
{
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t OUTLINED_FUNCTION_29_0()
{
  return swift_task_dealloc(v0);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_32_0()
{
  return swift_task_dealloc(*(void *)(v0 - 96));
}

uint64_t OUTLINED_FUNCTION_33_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  return swift_task_dealloc(a21);
}

uint64_t OUTLINED_FUNCTION_34_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return swift_task_dealloc(a20);
}

uint64_t OUTLINED_FUNCTION_35_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return swift_task_dealloc(a19);
}

uint64_t OUTLINED_FUNCTION_36_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return swift_task_dealloc(a17);
}

uint64_t OUTLINED_FUNCTION_37_0()
{
  return __swift_destroy_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_38_0()
{
  return v1(v0, v2);
}

  ;
}

uint64_t OUTLINED_FUNCTION_40_0()
{
  return swift_task_dealloc(*(void *)(v0 - 88));
}

uint64_t OUTLINED_FUNCTION_41_0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 + 96) + 8LL))(a1, *(void *)(v1 + 88));
}

uint64_t OUTLINED_FUNCTION_42_0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_43_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return swift_task_dealloc(a15);
}

  ;
}

uint64_t OUTLINED_FUNCTION_45_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  return swift_task_dealloc(a22);
}

uint64_t OUTLINED_FUNCTION_46()
{
  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_47( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return swift_task_dealloc(a14);
}

uint64_t OUTLINED_FUNCTION_48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return swift_task_dealloc(a13);
}

uint64_t OUTLINED_FUNCTION_49( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return swift_task_dealloc(a12);
}

uint64_t OUTLINED_FUNCTION_50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_task_dealloc(a9);
}

uint64_t OUTLINED_FUNCTION_51(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2LL);
}

uint64_t OUTLINED_FUNCTION_52()
{
  return type metadata accessor for OSSignposter(0LL);
}

void OUTLINED_FUNCTION_53(uint64_t a1@<X8>)
{
  *(void *)(v2 + a1) |= v1;
}

  ;
}

uint64_t OUTLINED_FUNCTION_55()
{
  return swift_task_dealloc(v0);
}

uint64_t OUTLINED_FUNCTION_56@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_57()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_59()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_60()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_61@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_62()
{
  return swift_retain(v0);
}

uint64_t OUTLINED_FUNCTION_63()
{
  return OS_os_log.signpostsEnabled.getter();
}

  ;
}

void LinkInvocationActionProvider.getInvocationAction(dialogProperties:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t v6 = dispatch thunk of DialogProperties.getParameters()(v4, v5);
  specialized Dictionary.subscript.getter(0xD00000000000001FLL, 0x800000000003ED20LL, v6, &v26);
  swift_bridgeObjectRelease(v6);
  if (v27)
  {
    if ((swift_dynamicCast(v25, &v26, (char *)&type metadata for Any + 8, &type metadata for LinkSuggestedAction, 6LL) & 1) != 0)
    {
      v28[0] = v25[0];
      v28[1] = v25[1];
      v28[2] = v25[2];
      uint64_t v20 = LinkInvocationActionProvider.invocationPayload(for:)((uint64_t *)v28);
      if (one-time initialization token for suggestionIdentifier != -1) {
        swift_once( &one-time initialization token for suggestionIdentifier,  one-time initialization function for suggestionIdentifier);
      }
      uint64_t v21 = static LinkSuggestionsRepository.suggestionIdentifier;
      uint64_t v22 = unk_53AB0;
      uint64_t v23 = type metadata accessor for DirectInvocationAction(0LL);
      swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
      swift_bridgeObjectRetain(v22);
      uint64_t v18 = DirectInvocationAction.init(siriKitIdentifier:payload:suggestionId:)( 0xD000000000000047LL,  0x800000000003ED40LL,  v20,  v21,  v22);
      a2[3] = v23;
      lazy protocol witness table accessor for type UtteranceAction and conformance UtteranceAction( &lazy protocol witness table cache variable for type DirectInvocationAction and conformance DirectInvocationAction,  (uint64_t (*)(uint64_t))&type metadata accessor for DirectInvocationAction,  (uint64_t)&protocol conformance descriptor for DirectInvocationAction);
      a2[4] = v24;
      outlined release of LinkSuggestedAction(v28);
      goto LABEL_14;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v26);
  }

  if (one-time initialization token for linkSuggestions != -1) {
    swift_once(&one-time initialization token for linkSuggestions, one-time initialization function for linkSuggestions);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v7, (uint64_t)static Logger.linkSuggestions);
  outlined init with copy of LinkClient((uint64_t)a1, (uint64_t)v28);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)OUTLINED_FUNCTION_16_0(12LL);
    uint64_t v12 = OUTLINED_FUNCTION_16_0(32LL);
    *(void *)&__int128 v26 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    outlined init with copy of LinkClient((uint64_t)v28, (uint64_t)v25);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DialogProperties);
    uint64_t v14 = String.init<A>(describing:)(v25, v13);
    unint64_t v16 = v15;
    *(void *)&v25[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, (uint64_t *)&v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v25, (char *)v25 + 8, v11 + 4);
    swift_bridgeObjectRelease(v16);
    __swift_destroy_boxed_opaque_existential_1(v28);
    _os_log_impl(&dword_0, v9, v10, "LinkInvocationActionProvider Link action retrieval failed: %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_3_0(v12);
    OUTLINED_FUNCTION_3_0((uint64_t)v11);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1(v28);
  }

  uint64_t v17 = type metadata accessor for UtteranceAction(0LL);
  uint64_t v18 = UtteranceAction.__allocating_init()();
  a2[3] = v17;
  lazy protocol witness table accessor for type UtteranceAction and conformance UtteranceAction( &lazy protocol witness table cache variable for type UtteranceAction and conformance UtteranceAction,  (uint64_t (*)(uint64_t))&type metadata accessor for UtteranceAction,  (uint64_t)&protocol conformance descriptor for UtteranceAction);
  a2[4] = v19;
LABEL_14:
  *a2 = v18;
}

double specialized Dictionary.subscript.getter@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = OUTLINED_FUNCTION_1_1(a1, a2), (v7 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v4 + 56) + 32 * v6, (uint64_t)a4);
  }

  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }

  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    unint64_t v4 = OUTLINED_FUNCTION_1_1(a1, a2);
    if ((v5 & 1) != 0) {
      id v6 = *(id *)(*(void *)(v3 + 56) + 8 * v4);
    }
  }

  OUTLINED_FUNCTION_3();
}

{
  uint64_t v3;
  unint64_t v4;
  char v5;
  if (*(void *)(a3 + 16))
  {
    unint64_t v4 = OUTLINED_FUNCTION_1_1(a1, a2);
    if ((v5 & 1) != 0) {
      swift_bridgeObjectRetain(*(void *)(*(void *)(v3 + 56) + 8 * v4));
    }
  }

  OUTLINED_FUNCTION_3();
}

{
  uint64_t v3;
  unint64_t v4;
  char v5;
  if (*(void *)(a3 + 16))
  {
    unint64_t v4 = OUTLINED_FUNCTION_1_1(a1, a2);
    if ((v5 & 1) != 0) {
      swift_retain(*(void *)(*(void *)(v3 + 56) + 8 * v4));
    }
  }

  OUTLINED_FUNCTION_3();
}

double specialized Dictionary.subscript.getter@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = OUTLINED_FUNCTION_1_1(a1, a2), (v7 & 1) != 0))
  {
    outlined init with copy of LinkClient(*(void *)(v4 + 56) + 40 * v6, a4);
  }

  else
  {
    *(void *)(a4 + 32) = 0LL;
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }

  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0LL;
  }
  unint64_t v4 = OUTLINED_FUNCTION_1_1(a1, a2);
  if ((v5 & 1) == 0) {
    return 0LL;
  }
  unint64_t v6 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v4);
  uint64_t v7 = *v6;
  swift_bridgeObjectRetain(v6[1]);
  return v7;
}

uint64_t specialized Dictionary.subscript.getter(char a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1 & 1), (v4 & 1) != 0)) {
    return *(unsigned __int8 *)(*(void *)(a2 + 56) + v3);
  }
  else {
    return 2LL;
  }
}

uint64_t *LinkInvocationActionProvider.invocationPayload(for:)(uint64_t *a1)
{
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
  uint64_t v3 = a1[3];
  id v28 = 0LL;
  id v4 = [v2 archivedDataWithRootObject:v3 requiringSecureCoding:1 error:&v28];
  id v5 = v28;
  if (v4)
  {
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    unint64_t v8 = v7;

    uint64_t v9 = a1[4];
    id v28 = 0LL;
    id v10 = [v2 archivedDataWithRootObject:v9 requiringSecureCoding:1 error:&v28];
    id v11 = v28;
    if (v10)
    {
      uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
      uint64_t v13 = v12;

      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Decodable & Encodable)>);
      uint64_t inited = swift_initStackObject(v14, v29);
      *(void *)(inited + 32) = 0xD000000000000010LL;
      *(void *)(inited + 40) = 0x800000000003EDD0LL;
      *(_OWORD *)(inited + 16) = xmmword_3C910;
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 80) = &protocol witness table for String;
      uint64_t v17 = *a1;
      uint64_t v16 = a1[1];
      *(void *)(inited + 88) = &protocol witness table for String;
      *(void *)(inited + 48) = v17;
      *(void *)(inited + 56) = v16;
      uint64_t v18 = one-time initialization token for ArchivedAction;
      swift_bridgeObjectRetain(v16);
      if (v18 != -1) {
        swift_once( &one-time initialization token for ArchivedAction,  one-time initialization function for ArchivedAction);
      }
      uint64_t v19 = unk_53B50;
      *(void *)(inited + 96) = static SiriLinkSuggestionsConstants.PayloadKeys.ArchivedAction;
      *(void *)(inited + 104) = v19;
      *(void *)(inited + 136) = &type metadata for Data;
      unint64_t v20 = lazy protocol witness table accessor for type Data and conformance Data();
      *(void *)(inited + 144) = v20;
      unint64_t v21 = lazy protocol witness table accessor for type Data and conformance Data();
      *(void *)(inited + 152) = v21;
      *(void *)(inited + 112) = v6;
      *(void *)(inited + 120) = v8;
      swift_bridgeObjectRetain(v19);
      outlined copy of Data._Representation(v6, v8);
      if (one-time initialization token for SystemProtocol != -1) {
        swift_once( &one-time initialization token for SystemProtocol,  one-time initialization function for SystemProtocol);
      }
      uint64_t v22 = unk_53B60;
      *(void *)(inited + 160) = static SiriLinkSuggestionsConstants.PayloadKeys.SystemProtocol;
      *(void *)(inited + 168) = v22;
      *(void *)(inited + 200) = &type metadata for Data;
      *(void *)(inited + 208) = v20;
      *(void *)(inited + 216) = v21;
      *(void *)(inited + 176) = v27;
      *(void *)(inited + 184) = v13;
      swift_bridgeObjectRetain(v22);
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decodable & Encodable);
      a1 = (uint64_t *)Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  v23,  &protocol witness table for String);
      outlined consume of Data._Representation(v6, v8);
    }

    else
    {
      uint64_t v25 = v11;
      _convertNSErrorToError(_:)(v11);

      swift_willThrow();
      outlined consume of Data._Representation(v6, v8);
    }
  }

  else
  {
    uint64_t v24 = v5;
    _convertNSErrorToError(_:)(v5);

    swift_willThrow();
  }

  return a1;
}

uint64_t LinkSuggestionsOwnerDefinitionFactory.deinit()
{
  return v0;
}

uint64_t LinkSuggestionsOwnerDefinitionFactory.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t LinkSuggestionsOwnerDefinitionFactory.__allocating_init()()
{
  return swift_allocObject(v0, 16LL, 7LL);
}

void protocol witness for InvocationActionProvider.getInvocationAction(dialogProperties:) in conformance LinkInvocationActionProvider( void *a1@<X0>, uint64_t *a2@<X8>)
{
}

void *outlined release of LinkSuggestedAction(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (void *)a1[3];
  id v4 = (void *)a1[4];
  swift_bridgeObjectRelease(a1[5]);

  swift_bridgeObjectRelease(v2);
  return a1;
}

void lazy protocol witness table accessor for type UtteranceAction and conformance UtteranceAction( unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = a2(255LL);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  OUTLINED_FUNCTION_3();
}

uint64_t type metadata accessor for LinkInvocationActionProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC25SiriLinkSuggestionsPlugin28LinkInvocationActionProvider);
}

uint64_t outlined consume of Data._Representation(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }

  return result;
}

uint64_t outlined copy of Data._Representation(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t OUTLINED_FUNCTION_1_1(uint64_t a1, uint64_t a2)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_2_1()
{
  return swift_errorRelease(v0);
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo25LNActionParameterMetadataCG_AG_18SiriSuggestionsKit0gH0O20DisplayRepresentable_pSgts5NeverOTg5( void (*a1)(_OWORD *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL));
  while (v6)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    if (v6 < 0)
    {
      __break(1u);
      return;
    }

    uint64_t v7 = 0LL;
    unint64_t v8 = v19;
    while (v6 != v7)
    {
      if ((a3 & 0xC000000000000001LL) != 0) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a3);
      }
      else {
        id v9 = *(id *)(a3 + 8 * v7 + 32);
      }
      id v10 = v9;
      id v17 = v9;
      a1(v18, &v17);
      if (v4)
      {
        swift_release(v8);

        return;
      }

      uint64_t v4 = 0LL;

      uint64_t v19 = v8;
      unint64_t v11 = v8[2];
      if (v11 >= v8[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        unint64_t v8 = v19;
      }

      ++v7;
      __int128 v8[2] = v11 + 1;
      uint64_t v12 = &v8[6 * v11];
      __int128 v13 = v18[0];
      __int128 v14 = v18[2];
      void v12[3] = v18[1];
      v12[4] = v14;
      v12[2] = v13;
      if (v6 == v7) {
        return;
      }
    }

    __break(1u);
LABEL_18:
    if (a3 < 0) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease(a3);
  }

uint64_t LinkClientResolver.getMetaData(for:for:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a5 + 16))(v25, a4, a5);
  uint64_t v8 = v26;
  uint64_t v9 = v27;
  __swift_project_boxed_opaque_existential_1(v25, v26);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v11 = swift_allocObject(v10, 48LL, 7LL);
  *(_OWORD *)(v11 + 16) = xmmword_3C030;
  id v24 = a1;
  id v12 = [a1 identifier];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v15 = v14;

  *(void *)(v11 + 32) = v13;
  *(void *)(v11 + 40) = v15;
  uint64_t v16 = v28;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 40))(a2, a3, v11, v8, v9);
  swift_bridgeObjectRelease(v11);
  if (!v16)
  {
    id v18 = [v24 identifier];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v21 = v20;

    specialized Dictionary.subscript.getter(v19, v21, v17);
    uint64_t v15 = v22;
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v17);
  }

  __swift_destroy_boxed_opaque_existential_1(v25);
  return v15;
}

uint64_t LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[11] = a7;
  v8[12] = v7;
  v8[9] = a5;
  v8[10] = a6;
  v8[7] = a1;
  v8[8] = a4;
  return swift_task_switch(LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:), 0LL, 0LL);
}

uint64_t LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:)()
{
  id v1 = [*(id *)(v0 + 56) identifier];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v4 = v3;

  *(void *)(v0 + 104) = v2;
  *(void *)(v0 + 112) = v4;
  uint64_t v5 = (void *)swift_task_alloc(dword_4E764);
  *(void *)(v0 + 120) = v5;
  *uint64_t v5 = v0;
  v5[1] = LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:);
  return LinkClientResolver.getParameters(for:withParameters:andSalientEntities:)( *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(void *)(v0 + 72),  *(void *)(v0 + 80),  *(void *)(v0 + 88));
}

{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint64_t v6;
  os_log_s *v7;
  os_log_type_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_s *v21;
  os_log_type_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v2 = *(void *)(v0 + 128);
  if (v2)
  {
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
    }
    uint64_t v3 = *(void *)(v0 + 112);
    uint64_t v4 = OUTLINED_FUNCTION_45();
    uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)static Logger.appIntentsSuggestions);
    OUTLINED_FUNCTION_58_0(v2);
    uint64_t v6 = OUTLINED_FUNCTION_58_0(v3);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    uint64_t v8 = static os_log_type_t.info.getter();
    uint64_t v9 = OUTLINED_FUNCTION_43_1(v8);
    uint64_t v10 = *(void *)(v0 + 112);
    if (v9)
    {
      uint64_t v34 = *(void *)(v0 + 104);
      uint64_t v11 = OUTLINED_FUNCTION_16_0(22LL);
      uint64_t v35 = OUTLINED_FUNCTION_16_0(64LL);
      int v36 = v35;
      *(_DWORD *)uint64_t v11 = 136315394;
      id v12 = OUTLINED_FUNCTION_70();
      uint64_t v13 = Dictionary.description.getter( v12,  &type metadata for String,  &type metadata for ActionParameter,  &protocol witness table for String);
      uint64_t v15 = v14;
      OUTLINED_FUNCTION_59_0();
      *(void *)(v0 + 40) = OUTLINED_FUNCTION_64_0(v13, v16, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v11 + 4);
      swift_bridgeObjectRelease(v15);
      OUTLINED_FUNCTION_51(v2);
      *(_WORD *)(v11 + 12) = 2080;
      OUTLINED_FUNCTION_59();
      *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v10, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v11 + 14);
      OUTLINED_FUNCTION_34_1(v10);
      OUTLINED_FUNCTION_81(&dword_0, v7, v5, "Got parameters: %s for %s", (uint8_t *)v11);
      OUTLINED_FUNCTION_98(v35, v17, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_3_0(v35);
      OUTLINED_FUNCTION_3_0(v11);
    }

    else
    {
      OUTLINED_FUNCTION_51(v2);
      OUTLINED_FUNCTION_51(v10);
    }

    unint64_t v30 = *(void *)(v0 + 128);
    unint64_t v31 = *(void *)(v0 + 104);
    char v32 = *(void *)(v0 + 112);
  }

  else
  {
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
    }
    id v18 = *(void *)(v0 + 112);
    uint64_t v19 = OUTLINED_FUNCTION_45();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.appIntentsSuggestions);
    uint64_t v20 = swift_bridgeObjectRetain(v18);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    uint64_t v22 = static os_log_type_t.error.getter();
    uint64_t v23 = OUTLINED_FUNCTION_43_1(v22);
    id v24 = *(void *)(v0 + 112);
    if (v23)
    {
      uint64_t v25 = *(void *)(v0 + 104);
      uint64_t v26 = (uint8_t *)OUTLINED_FUNCTION_16_0(12LL);
      uint64_t v27 = OUTLINED_FUNCTION_16_0(32LL);
      int v36 = v27;
      *(_DWORD *)uint64_t v26 = 136315138;
      swift_bridgeObjectRetain(v24);
      *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v26 + 4);
      OUTLINED_FUNCTION_34_1(v24);
      _os_log_impl(&dword_0, v21, v1, "Not all mandatory parameters for: %s could be determined", v26, 0xCu);
      OUTLINED_FUNCTION_94(v28, v29, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_3_0(v27);
      OUTLINED_FUNCTION_3_0((uint64_t)v26);
    }

    else
    {
      OUTLINED_FUNCTION_51(*(void *)(v0 + 112));
    }

    unint64_t v31 = 0LL;
    char v32 = 0LL;
    unint64_t v30 = 0LL;
  }

  return OUTLINED_FUNCTION_31_1(v31, v32, v30, *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_s *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
  }
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = OUTLINED_FUNCTION_45();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.appIntentsSuggestions);
  swift_errorRetain(v2);
  OUTLINED_FUNCTION_35();
  uint64_t v4 = swift_errorRetain(v2);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  uint64_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = OUTLINED_FUNCTION_43_1(v6);
  uint64_t v8 = *(void *)(v0 + 136);
  uint64_t v9 = *(void *)(v0 + 112);
  if (v7)
  {
    uint64_t v16 = *(void *)(v0 + 104);
    uint64_t v10 = OUTLINED_FUNCTION_16_0(22LL);
    uint64_t v11 = (void *)OUTLINED_FUNCTION_16_0(8LL);
    uint64_t v17 = OUTLINED_FUNCTION_16_0(32LL);
    id v18 = v17;
    *(_DWORD *)uint64_t v10 = 138412546;
    swift_errorRetain(v8);
    id v12 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(void *)(v0 + 16) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v10 + 4);
    *uint64_t v11 = v12;
    OUTLINED_FUNCTION_48_0();
    OUTLINED_FUNCTION_48_0();
    *(_WORD *)(v10 + 12) = 2080;
    swift_bridgeObjectRetain(v9);
    *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v9, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v10 + 14);
    OUTLINED_FUNCTION_34_1(v9);
    OUTLINED_FUNCTION_81(&dword_0, v5, v1, "Unable to fetch parameter info: %@ for: %s", (uint8_t *)v10);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_94(v13, v14, v13);
    OUTLINED_FUNCTION_3_0((uint64_t)v11);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_3_0(v17);
    OUTLINED_FUNCTION_3_0(v10);

    OUTLINED_FUNCTION_48_0();
  }

  else
  {
    OUTLINED_FUNCTION_48_0();
    OUTLINED_FUNCTION_48_0();
    OUTLINED_FUNCTION_48_0();
    OUTLINED_FUNCTION_51(v9);
  }

  return OUTLINED_FUNCTION_31_1(0LL, 0LL, 0LL, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 120);
  *(void *)(v3 + 128) = a1;
  *(void *)(v3 + 136) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:);
  }
  else {
    uint64_t v5 = LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:);
  }
  return OUTLINED_FUNCTION_11_1((uint64_t)v5, 0LL, 0LL);
}

uint64_t LinkClientResolver.getParameters(for:withParameters:andSalientEntities:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[89] = v5;
  v6[88] = a5;
  v6[87] = a4;
  v6[86] = a3;
  v6[85] = a2;
  v6[84] = a1;
  uint64_t v7 = OUTLINED_FUNCTION_45();
  v6[90] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[91] = v8;
  v6[92] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return OUTLINED_FUNCTION_11_1( (uint64_t)LinkClientResolver.getParameters(for:withParameters:andSalientEntities:),  0LL,  0LL);
}

uint64_t LinkClientResolver.getParameters(for:withParameters:andSalientEntities:)()
{
  uint64_t v1 = (void **)(v0 + 640);
  uint64_t v2 = *(void *)(v0 + 712);
  __int128 v97 = *(_OWORD *)(v0 + 696);
  __int128 v101 = *(_OWORD *)(v0 + 680);
  id v3 = [*(id *)(v0 + 672) parameters];
  uint64_t v4 = type metadata accessor for LNActionParameterMetadata( 0LL,  &lazy cache variable for type metadata for LNActionParameterMetadata,  &OBJC_CLASS___LNActionParameterMetadata_ptr);
  uint64_t v5 = (__int128 *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  uint64_t v6 = swift_task_alloc(64LL);
  *(_OWORD *)(v6 + 16) = v97;
  *(void *)(v6 + 32) = v2;
  *(_OWORD *)(v6 + 40) = v101;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo25LNActionParameterMetadataCG_AG_18SiriSuggestionsKit0gH0O20DisplayRepresentable_pSgts5NeverOTg5( (void (*)(_OWORD *__return_ptr, id *))partial apply for closure #1 in LinkClientResolver.getParameters(for:withParameters:andSalientEntities:),  v6,  (uint64_t)v5);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease(v5);
  swift_task_dealloc(v6);
  uint64_t v9 = _swiftEmptyArrayStorage;
  v105 = _swiftEmptyArrayStorage;
  unint64_t v10 = *(void *)(v8 + 16);
  OUTLINED_FUNCTION_70();
  uint64_t v100 = v0;
  unint64_t v102 = v10;
  uint64_t v98 = v8;
  if (v10)
  {
    unint64_t v10 = 0LL;
    uint64_t v5 = (__int128 *)(v0 + 80);
    uint64_t v11 = v8 + 32;
    uint64_t v90 = v0 + 136;
    uint64_t v12 = v0 + 88;
    uint64_t v92 = v0 + 184;
    uint64_t v95 = v0 + 176;
    uint64_t v13 = &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?);
    while (v10 < *(void *)(v8 + 16))
    {
      outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)( v11,  (uint64_t)v5,  &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
      uint64_t v14 = *(void **)(v100 + 80);
      *(void *)(v100 + 128) = v14;
      outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)( v12,  v90,  &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
      uint64_t v1 = (void **)[v14 isOptional];
      outlined destroy of CoreSignalTypes?( v90,  &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
      uint64_t v15 = *(void **)(v100 + 80);
      *(void *)(v100 + 176) = v15;
      outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)( v12,  v92,  &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
      uint64_t v16 = *(void *)(v100 + 208);
      id v17 = v15;
      outlined destroy of CoreSignalTypes?( v95,  &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
      if ((v1 & 1) != 0 || v16)
      {
        outlined destroy of CoreSignalTypes?( (uint64_t)v5,  &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
      }

      else
      {
        __int128 v18 = v5[1];
        __int128 v106 = *v5;
        __int128 v107 = v18;
        __int128 v108 = v5[2];
        if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
        {
          OUTLINED_FUNCTION_73();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v9 = v105;
        }

        unint64_t v19 = v9[2];
        if (v19 >= v9[3] >> 1)
        {
          uint64_t v1 = &v105;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v9 = v105;
        }

        __int128 v9[2] = v19 + 1;
        uint64_t v20 = &v9[6 * v19];
        __int128 v21 = v106;
        __int128 v22 = v108;
        v20[3] = v107;
        v20[4] = v22;
        v20[2] = v21;
      }

      ++v10;
      v11 += 48LL;
      uint64_t v8 = v98;
      if (v102 == v10) {
        goto LABEL_13;
      }
    }

    __break(1u);
    goto LABEL_54;
  }

LABEL_13:
  OUTLINED_FUNCTION_59_0();
  if (v9[2])
  {
    uint64_t v95 = (uint64_t)v9;
    OUTLINED_FUNCTION_59_0();
    uint64_t v13 = (uint64_t *)v100;
    if (one-time initialization token for appIntentsSuggestions == -1)
    {
LABEL_15:
      OUTLINED_FUNCTION_93();
      uint64_t v23 = __swift_project_value_buffer(v8, (uint64_t)static Logger.appIntentsSuggestions);
      (*(void (**)(void **, uint64_t, uint64_t))(v10 + 16))(v1, v23, v8);
      id v24 = v5;
      uint64_t v25 = swift_retain(v95);
      uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
      uint64_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, (os_log_type_t)v27))
      {
        os_log_type_t v89 = v27;
        v93 = v26;
        v85 = v13 + 84;
        uint64_t v28 = (void *)v13[84];
        uint64_t v29 = OUTLINED_FUNCTION_16_0(22LL);
        uint64_t v87 = OUTLINED_FUNCTION_16_0(64LL);
        uint64_t v104 = v87;
        *(_DWORD *)uint64_t v29 = 136315394;
        id v30 = [v28 identifier];
        uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        unint64_t v33 = v32;

        v13[82] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, &v104);
        v86 = v13 + 83;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v13 + 82, v13 + 83, v29 + 4);
        swift_bridgeObjectRelease(v33);

        v91 = (uint8_t *)v29;
        *(_WORD *)(v29 + 12) = 2080;
        uint64_t v34 = *(void *)(v95 + 16);
        uint64_t v35 = _swiftEmptyArrayStorage;
        if (v34)
        {
          int v36 = (void **)(v13 + 34);
          v105 = _swiftEmptyArrayStorage;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v37 = v95 + 32;
          uint64_t v103 = (uint64_t)(v13 + 41);
          uint64_t v99 = (uint64_t)(v13 + 35);
          uint64_t v38 = (void **)(v13 + 40);
          do
          {
            outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)( v37,  (uint64_t)v36,  &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
            *(void *)&__int128 v106 = 0LL;
            *((void *)&v106 + 1) = 0xE000000000000000LL;
            uint64_t v39 = *v36;
            *uint64_t v38 = *v36;
            OUTLINED_FUNCTION_56_0(v99, v103);
            outlined bridged method (ob) of @objc LNActionParameterMetadata.name.getter(v39);
            if (v41) {
              uint64_t v42 = v40;
            }
            else {
              uint64_t v42 = 0x656D616E5F6F6E3CLL;
            }
            if (v41) {
              uint64_t v43 = v41;
            }
            else {
              uint64_t v43 = (void *)0xE90000000000003ELL;
            }
            OUTLINED_FUNCTION_101(v103);
            v44._uint64_t countAndFlagsBits = v42;
            v44._object = v43;
            String.append(_:)(v44);
            OUTLINED_FUNCTION_102();
            __int128 v45 = v106;
            outlined destroy of CoreSignalTypes?( (uint64_t)v36,  &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
            uint64_t v35 = v105;
            if ((swift_isUniquelyReferenced_nonNull_native(v105) & 1) == 0)
            {
              OUTLINED_FUNCTION_73();
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v35 = v105;
            }

            unint64_t v46 = v35[2];
            if (v46 >= v35[3] >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v35 = v105;
            }

            v35[2] = v46 + 1;
            *(_OWORD *)&v35[2 * v46 + 4] = v45;
            v37 += 48LL;
            --v34;
          }

          while (v34);
        }

        uint64_t v13 = (uint64_t *)v100;
        uint64_t v71 = *(void *)(v100 + 736);
        uint64_t v72 = *(void *)(v100 + 728);
        uint64_t v73 = *(void *)(v100 + 720);
        *(void *)(v100 + 648) = v35;
        uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        unint64_t v75 = lazy protocol witness table accessor for type [String] and conformance [A]();
        uint64_t v76 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v74, v75);
        unint64_t v78 = v77;
        OUTLINED_FUNCTION_102();
        *(void *)(v100 + 664) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v78, &v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v86, v85, v91 + 14);
        swift_bridgeObjectRelease(v78);
        swift_release_n(v95, 2LL);
        OUTLINED_FUNCTION_81( &dword_0,  v93,  v89,  "We have not been able to set all mandatory parameters for action %s. Missing parameters:\n %s",  v91);
        OUTLINED_FUNCTION_98(v87, v79, (uint64_t)&type metadata for Any + 8);
        OUTLINED_FUNCTION_3_0(v87);
        OUTLINED_FUNCTION_3_0((uint64_t)v91);

        (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v71, v73);
      }

      else
      {
        OUTLINED_FUNCTION_93();

        swift_release_n(v95, 2LL);
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v27, v8);
      }

      v80 = 0LL;
      goto LABEL_52;
    }

  OUTLINED_FUNCTION_59_0();
  if (v9[2])
  {
    v118 = (uint64_t)v9;
    OUTLINED_FUNCTION_59_0();
    uint64_t v14 = v122;
    if (one-time initialization token for appIntentsSuggestions == -1)
    {
LABEL_15:
      OUTLINED_FUNCTION_99();
      uint64_t v23 = __swift_project_value_buffer(v8, (uint64_t)static Logger.appIntentsSuggestions);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v6, v23, v8);
      id v24 = v1;
      uint64_t v25 = swift_retain(v118);
      uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
      uint64_t v27 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_69_0(v27))
      {
        v113 = v6;
        __int128 v106 = v14 + 84;
        uint64_t v104 = v14 + 85;
        uint64_t v28 = (void *)v14[85];
        uint64_t v29 = OUTLINED_FUNCTION_16_0(22LL);
        __int128 v108 = OUTLINED_FUNCTION_16_0(64LL);
        v126 = v108;
        *(_DWORD *)uint64_t v29 = 136315394;
        id v30 = [v28 identifier];
        uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);

        v14[82] = OUTLINED_FUNCTION_91_0(v31, v32, &v126);
        OUTLINED_FUNCTION_94_0((uint64_t)(v14 + 82), v110);
        OUTLINED_FUNCTION_30_2();

        v116 = (uint8_t *)v29;
        *(_WORD *)(v29 + 12) = 2080;
        unint64_t v33 = *(void *)(v118 + 16);
        uint64_t v34 = _swiftEmptyArrayStorage;
        if (v33)
        {
          v111 = v26;
          uint64_t v35 = (void **)(v14 + 40);
          v127 = _swiftEmptyArrayStorage;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          int v36 = v118 + 32;
          v125 = (uint64_t)(v14 + 47);
          v121 = (uint64_t)(v14 + 41);
          uint64_t v37 = (void **)(v14 + 46);
          do
          {
            outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)( v36,  (uint64_t)v35,  &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
            *(void *)&v128 = 0LL;
            *((void *)&v128 + 1) = 0xE000000000000000LL;
            uint64_t v38 = *v35;
            *uint64_t v37 = *v35;
            outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)( v121,  v125,  &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
            outlined bridged method (ob) of @objc LNActionParameterMetadata.name.getter(v38);
            if (v40) {
              uint64_t v41 = v39;
            }
            else {
              uint64_t v41 = 0x656D616E5F6F6E3CLL;
            }
            if (v40) {
              uint64_t v42 = v40;
            }
            else {
              uint64_t v42 = (void *)0xE90000000000003ELL;
            }
            outlined destroy of CoreSignalTypes?( v125,  &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
            v43._uint64_t countAndFlagsBits = v41;
            v43._object = v42;
            String.append(_:)(v43);
            OUTLINED_FUNCTION_60();
            Swift::String v44 = v128;
            outlined destroy of CoreSignalTypes?( (uint64_t)v35,  &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
            uint64_t v34 = v127;
            if ((OUTLINED_FUNCTION_86_0() & 1) == 0)
            {
              OUTLINED_FUNCTION_67();
              uint64_t v34 = v127;
            }

            __int128 v45 = v34[2];
            if (v45 >= v34[3] >> 1)
            {
              OUTLINED_FUNCTION_67();
              uint64_t v34 = v127;
            }

            v34[2] = v45 + 1;
            *(_OWORD *)&v34[2 * v45 + 4] = v44;
            v36 += 48LL;
            --v33;
          }

          while (v33);
          uint64_t v26 = v111;
        }

        uint64_t v14 = v122;
        uint64_t v87 = v122[90];
        uint64_t v88 = v122[89];
        os_log_type_t v89 = v122[88];
        v122[81] = v34;
        uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        v91 = lazy protocol witness table accessor for type [String] and conformance [A]();
        uint64_t v92 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v90, v91);
        OUTLINED_FUNCTION_60();
        v122[84] = OUTLINED_FUNCTION_91_0(v92, v93, &v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v106, v104, v116 + 14);
        OUTLINED_FUNCTION_30_2();
        swift_release_n(v118, 2LL);
        OUTLINED_FUNCTION_81( &dword_0,  v26,  v113,  "We have not been able to set all mandatory parameters for action %s. Missing parameters:\n %s",  v116);
        OUTLINED_FUNCTION_98(v108, v94, (uint64_t)&type metadata for Any + 8);
        OUTLINED_FUNCTION_3_0(v108);
        OUTLINED_FUNCTION_3_0((uint64_t)v116);

        (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v87, v89);
      }

      else
      {
        OUTLINED_FUNCTION_99();

        swift_release_n(v118, 2LL);
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v6, v8);
      }

      uint64_t v95 = 0LL;
      goto LABEL_52;
    }

LABEL_54:
    swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
    goto LABEL_15;
  }

  swift_release(v9);
  uint64_t v13 = (uint64_t *)v100;
  if (v102)
  {
    uint64_t v47 = (__int128 *)(v100 + 16);
    uint64_t v48 = v100 + 464;
    __int128 v49 = (__int128 *)(v100 + 600);
    uint64_t v50 = v8 + 32;
    uint64_t v88 = v100 + 472;
    uint64_t v51 = v100 + 424;
    uint64_t v94 = v100 + 376;
    v96 = (void *)(v100 + 224);
    v83 = (void *)(v100 + 560);
    uint64_t v82 = v100 + 520;
    OUTLINED_FUNCTION_70();
    char v52 = _swiftEmptyArrayStorage;
    uint64_t v84 = v100 + 232;
    do
    {
      outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)( v50,  v48,  &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
      char v53 = (void *)v13[58];
      v13[52] = (uint64_t)v53;
      OUTLINED_FUNCTION_56_0(v88, v51);
      OUTLINED_FUNCTION_56_0(v88, (uint64_t)v49);
      if (v13[78])
      {
        outlined init with take of LinkDialogIdProvider(v49, (uint64_t)v83);
        *(void *)(v100 + 368) = v53;
        OUTLINED_FUNCTION_56_0(v51, v94);
        id v54 = v53;
        outlined bridged method (ob) of @objc LNActionParameterMetadata.name.getter(v54);
        uint64_t v56 = v55;
        uint64_t v58 = v57;
        void *v96 = v54;
        OUTLINED_FUNCTION_56_0(v51, v84);
        if (v58)
        {
          *(void *)(v100 + 16) = v56;
          *(void *)(v100 + 24) = v58;
          outlined init with copy of SiriSuggestions.DisplayRepresentable((uint64_t)v83, v100 + 32);
          *(void *)(v100 + 512) = v54;
          OUTLINED_FUNCTION_56_0(v84, v82);
          *(void *)(v100 + 72) = v54;
          id v59 = v54;
          OUTLINED_FUNCTION_70();
          OUTLINED_FUNCTION_101(v82);
          OUTLINED_FUNCTION_59_0();
        }

        else
        {
          *(_OWORD *)(v100 + 48) = 0u;
          *(_OWORD *)(v100 + 64) = 0u;
          *uint64_t v47 = 0u;
          *(_OWORD *)(v100 + 32) = 0u;
          id v61 = v54;
        }

        OUTLINED_FUNCTION_37((uint64_t)v96);
        OUTLINED_FUNCTION_101(v94);
        __swift_destroy_boxed_opaque_existential_1(v83);
        __int128 v49 = (__int128 *)(v100 + 600);
        uint64_t v48 = v100 + 464;
        uint64_t v51 = v100 + 424;
        uint64_t v13 = (uint64_t *)v100;
      }

      else
      {
        *(_OWORD *)(v100 + 48) = 0u;
        *(_OWORD *)(v100 + 64) = 0u;
        *uint64_t v47 = 0u;
        *(_OWORD *)(v100 + 32) = 0u;
        id v60 = v53;
      }

      OUTLINED_FUNCTION_37(v100 + 416);
      OUTLINED_FUNCTION_37(v48);
      if (v13[3])
      {
        __int128 v62 = *(_OWORD *)(v100 + 32);
        __int128 v106 = *v47;
        __int128 v107 = v62;
        __int128 v63 = *(_OWORD *)(v100 + 64);
        __int128 v108 = *(_OWORD *)(v100 + 48);
        __int128 v109 = v63;
        if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
        {
          OUTLINED_FUNCTION_95();
          char v52 = v69;
        }

        unint64_t v64 = v52[2];
        if (v64 >= v52[3] >> 1)
        {
          OUTLINED_FUNCTION_95();
          char v52 = v70;
        }

        v52[2] = v64 + 1;
        v65 = &v52[8 * v64];
        __int128 v66 = v106;
        __int128 v67 = v107;
        __int128 v68 = v109;
        v65[4] = v108;
        v65[5] = v68;
        v65[2] = v66;
        v65[3] = v67;
      }

      else
      {
        outlined destroy of CoreSignalTypes?( (uint64_t)v47,  &demangling cache variable for type metadata for (String, ActionParameter)?);
      }

      v50 += 48LL;
      --v102;
    }

    while (v102);
    OUTLINED_FUNCTION_51(v98);
  }

  else
  {
    OUTLINED_FUNCTION_59_0();
    char v52 = _swiftEmptyArrayStorage;
  }

  v80 = specialized Dictionary.init<A>(uniqueKeysWithValues:)( (uint64_t)v52,  &demangling cache variable for type metadata for _DictionaryStorage<String, ActionParameter>,  (void (*)(uint64_t, uint64_t, void **))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
LABEL_52:
  swift_task_dealloc(v13[92]);
  return ((uint64_t (*)(void *))v13[1])(v80);
}

    swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
    goto LABEL_15;
  }

  swift_release(v9);
  uint64_t v14 = v122;
  if (v124)
  {
    v117 = v122 + 10;
    v119 = (__int128 *)(v122 + 2);
    unint64_t v46 = (uint64_t)(v122 + 64);
    uint64_t v47 = (__int128 *)(v122 + 70);
    uint64_t v103 = (uint64_t)(v122 + 75);
    v105 = v122 + 34;
    uint64_t v48 = v8 + 32;
    __int128 v107 = (uint64_t)(v122 + 65);
    __int128 v109 = (uint64_t)(v122 + 52);
    __int128 v49 = (uint64_t)(v122 + 53);
    v114 = (uint64_t)(v122 + 35);
    uint64_t v99 = (uint64_t)(v122 + 4);
    uint64_t v100 = (uint64_t)(v122 + 11);
    uint64_t v98 = (uint64_t)(v122 + 59);
    OUTLINED_FUNCTION_70();
    uint64_t v50 = _swiftEmptyArrayStorage;
    __int128 v101 = (uint64_t)(v122 + 70);
    unint64_t v102 = (uint64_t)(v122 + 64);
    do
    {
      outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)( v48,  v46,  &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
      uint64_t v51 = (void *)v14[64];
      v14[52] = (uint64_t)v51;
      OUTLINED_FUNCTION_41_1(v107, v49);
      OUTLINED_FUNCTION_41_1(v107, (uint64_t)v47);
      if (v14[73])
      {
        v110 = (uint64_t)v50;
        id v60 = (void *)v103;
        outlined init with take of LinkDialogIdProvider(v47, v103);
        void *v105 = v51;
        OUTLINED_FUNCTION_41_1(v49, v114);
        id v61 = v51;
        outlined bridged method (ob) of @objc LNActionParameterMetadata.name.getter(v61);
        __int128 v63 = v62;
        v65 = v64;
        *v117 = v61;
        OUTLINED_FUNCTION_41_1(v49, v100);
        if (v65)
        {
          v122[2] = v63;
          v122[3] = v65;
          outlined init with copy of LinkClient(v103, v99);
          v122[58] = v61;
          OUTLINED_FUNCTION_41_1(v100, v98);
          v122[9] = v61;
          uint64_t v74 = v61;
          OUTLINED_FUNCTION_70();
          outlined destroy of CoreSignalTypes?( v98,  &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
          OUTLINED_FUNCTION_59_0();
        }

        else
        {
          OUTLINED_FUNCTION_93_0( v66,  v67,  v68,  v69,  v70,  v71,  v72,  v73,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  (uint64_t)v105,  v107,  v109,  v110,  v114,  (uint64_t)v117,  v119);
          uint64_t v76 = v61;
        }

        outlined destroy of CoreSignalTypes?( (uint64_t)v117,  &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
        outlined destroy of CoreSignalTypes?( v114,  &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
        __swift_destroy_boxed_opaque_existential_1(v60);
        uint64_t v47 = (__int128 *)v101;
        unint64_t v46 = v102;
        uint64_t v14 = v122;
        uint64_t v50 = (void *)v110;
      }

      else
      {
        OUTLINED_FUNCTION_93_0( v52,  v53,  v54,  v55,  v56,  v57,  v58,  v59,  v97,  v98,  v99,  v100,  v101,  v102,  v103,  (uint64_t)v105,  v107,  v109,  v110,  v114,  (uint64_t)v117,  v119);
        unint64_t v75 = v51;
      }

      outlined destroy of CoreSignalTypes?( v109,  &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
      outlined destroy of CoreSignalTypes?( v46,  &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
      if (v14[3])
      {
        unint64_t v77 = v119[1];
        v128 = *v119;
        v129 = v77;
        unint64_t v78 = v119[3];
        v130 = v119[2];
        v131 = v78;
        if ((swift_isUniquelyReferenced_nonNull_native(v50) & 1) == 0)
        {
          OUTLINED_FUNCTION_102_0();
          uint64_t v50 = v85;
        }

        v80 = v50[2];
        uint64_t v79 = v50[3];
        if (v80 >= v79 >> 1)
        {
          OUTLINED_FUNCTION_100_0(v79);
          OUTLINED_FUNCTION_102_0();
          uint64_t v50 = v86;
        }

        v50[2] = v80 + 1;
        v81 = &v50[8 * v80];
        uint64_t v82 = v128;
        v83 = v129;
        uint64_t v84 = v131;
        v81[4] = v130;
        v81[5] = v84;
        v81[2] = v82;
        v81[3] = v83;
      }

      else
      {
        outlined destroy of CoreSignalTypes?( (uint64_t)v119,  &demangling cache variable for type metadata for (String, ActionParameter)?);
      }

      v48 += 48LL;
      --v124;
    }

    while (v124);
    OUTLINED_FUNCTION_51(v120);
  }

  else
  {
    OUTLINED_FUNCTION_59_0();
    uint64_t v50 = _swiftEmptyArrayStorage;
  }

  uint64_t v95 = specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)v50);
LABEL_52:
  swift_task_dealloc(v14[90]);
  return ((uint64_t (*)(void *))v14[1])(v95);
}

void closure #1 in LinkClientResolver.getParameters(for:withParameters:andSalientEntities:)( void **a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void **a4@<X8>)
{
  uint64_t v5 = *a1;
  *a4 = *a1;
  LinkClientResolver.getParameter(for:withParameters:andSalientEntities:)(v5, a2, a3, (uint64_t)(a4 + 1));
}

void LinkClientResolver.getParameter(for:withParameters:andSalientEntities:)( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v105 = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RetrievedContext?);
  OUTLINED_FUNCTION_31();
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_79();
  uint64_t v10 = type metadata accessor for RetrievedContext(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  __int128 v101 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v91 - v15;
  __chkstk_darwin(v14);
  __int128 v18 = (char *)&v91 - v17;
  id v19 = [a1 name];
  unint64_t v102 = v16;
  uint64_t v103 = v11;
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    uint64_t v22 = v21;
  }

  else
  {
    uint64_t v104 = 0LL;
    uint64_t v22 = 0LL;
  }

  uint64_t v23 = (os_log_s *)[a1 valueType];
  if (!v22)
  {
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
    }
    uint64_t v24 = OUTLINED_FUNCTION_45();
    uint64_t v25 = __swift_project_value_buffer(v24, (uint64_t)static Logger.appIntentsSuggestions);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)OUTLINED_FUNCTION_16_0(2LL);
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl(&dword_0, v26, v27, "Unknown parameter name", v28, 2u);
      OUTLINED_FUNCTION_3_0((uint64_t)v28);
      uint64_t v29 = v23;
    }

    else
    {
      uint64_t v29 = v26;
      uint64_t v26 = v23;
    }

    goto LABEL_17;
  }

  OUTLINED_FUNCTION_59();
  specialized Dictionary.subscript.getter(v104, v22, a2, (uint64_t)&v106);
  swift_bridgeObjectRelease(v22);
  if (v107)
  {
    swift_bridgeObjectRelease(v22);

    outlined init with take of LinkDialogIdProvider(&v106, (uint64_t)v108);
    outlined init with take of LinkDialogIdProvider(v108, v105);
    goto LABEL_19;
  }

  outlined destroy of CoreSignalTypes?( (uint64_t)&v106,  &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
  id v30 = -[os_log_s description](v23, "description");
  uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  uint64_t v32 = v31;

  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
  }
  uint64_t v33 = OUTLINED_FUNCTION_45();
  uint64_t v34 = __swift_project_value_buffer(v33, (uint64_t)static Logger.appIntentsSuggestions);
  OUTLINED_FUNCTION_58_0(v22);
  OUTLINED_FUNCTION_58_0(v32);
  uint64_t v35 = OUTLINED_FUNCTION_58_0(a3);
  uint64_t v98 = v34;
  int v36 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  uint64_t v99 = v36;
  int v95 = v37;
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = OUTLINED_FUNCTION_16_0(32LL);
    uint64_t v93 = OUTLINED_FUNCTION_16_0(96LL);
    *(void *)&v108[0] = v93;
    *(_DWORD *)uint64_t v38 = 136315650;
    v96 = v18;
    OUTLINED_FUNCTION_59();
    uint64_t v39 = OUTLINED_FUNCTION_44_1();
    uint64_t v40 = OUTLINED_FUNCTION_69(v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v40, v41, v38 + 4);
    OUTLINED_FUNCTION_34_1(v22);
    uint64_t v94 = v10;
    *(_WORD *)(v38 + 12) = 2080;
    OUTLINED_FUNCTION_47_0();
    uint64_t v42 = v100;
    *(void *)&__int128 v106 = OUTLINED_FUNCTION_64_0(v100, v43, (uint64_t *)v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v5, v38 + 14);
    OUTLINED_FUNCTION_34_1(v32);
    *(_WORD *)(v38 + 22) = 2080;
    uint64_t v92 = v38 + 24;
    OUTLINED_FUNCTION_35();
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RetrievedContext]);
    uint64_t v45 = Dictionary.Keys.description.getter(a3, &type metadata for String, v44, &protocol witness table for String);
    __int128 v97 = v23;
    uint64_t v46 = v45;
    unint64_t v48 = v47;
    OUTLINED_FUNCTION_8();
    __int128 v18 = v96;
    *(void *)&__int128 v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, (uint64_t *)v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v5, v92);
    OUTLINED_FUNCTION_51(a3);
    unint64_t v49 = v48;
    uint64_t v10 = v94;
    swift_bridgeObjectRelease(v49);
    uint64_t v50 = v99;
    _os_log_impl( &dword_0,  v99,  (os_log_type_t)v95,  "determining parater - %s paramType - %s from andSalientEntities Keys - %s",  (uint8_t *)v38,  0x20u);
    uint64_t v51 = v32;
    uint64_t v52 = v93;
    swift_arrayDestroy(v93, 3LL, (char *)&type metadata for Any + 8);
    uint64_t v53 = v52;
    uint64_t v32 = v51;
    OUTLINED_FUNCTION_3_0(v53);
    OUTLINED_FUNCTION_3_0(v38);

    uint64_t v23 = v97;
  }

  else
  {

    OUTLINED_FUNCTION_51(a3);
    OUTLINED_FUNCTION_51(v32);
    OUTLINED_FUNCTION_51(v22);
    uint64_t v42 = v100;
  }

  OUTLINED_FUNCTION_47_0();
  uint64_t v55 = specialized Dictionary.subscript.getter(v42, v32, a3);
  swift_bridgeObjectRelease(v32);
  uint64_t v56 = v42;
  if (!v55)
  {
LABEL_24:
    OUTLINED_FUNCTION_59();
    uint64_t v58 = OUTLINED_FUNCTION_47_0();
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v58);
    os_log_type_t v59 = static os_log_type_t.debug.getter();
    if (!OUTLINED_FUNCTION_80(v59))
    {

      OUTLINED_FUNCTION_51(v32);
      OUTLINED_FUNCTION_51(v22);

      goto LABEL_18;
    }

    uint64_t v60 = OUTLINED_FUNCTION_16_0(22LL);
    uint64_t v61 = OUTLINED_FUNCTION_16_0(64LL);
    *(void *)&v108[0] = v61;
    *(_DWORD *)uint64_t v60 = 136315394;
    OUTLINED_FUNCTION_59();
    *(void *)&__int128 v106 = OUTLINED_FUNCTION_44_1();
    OUTLINED_FUNCTION_72();
    OUTLINED_FUNCTION_34_1(v22);
    *(_WORD *)(v60 + 12) = 2080;
    OUTLINED_FUNCTION_47_0();
    *(void *)&__int128 v106 = OUTLINED_FUNCTION_64_0(v56, v62, (uint64_t *)v108);
    OUTLINED_FUNCTION_72();
    OUTLINED_FUNCTION_34_1(v32);
    OUTLINED_FUNCTION_81( &dword_0,  v26,  (os_log_type_t)v4,  "No parameter available to set for %s, of type: %s",  (uint8_t *)v60);
    OUTLINED_FUNCTION_98(v61, v63, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_3_0(v61);
    OUTLINED_FUNCTION_3_0(v60);

LABEL_17:
LABEL_18:
    id v54 = (_OWORD *)v105;
    *(void *)(v105 + 32) = 0LL;
    *id v54 = 0u;
    v54[1] = 0u;
    goto LABEL_19;
  }

  *(void *)&v108[0] = v55;
  specialized MutableCollection<>.shuffle<A>(using:)();
  uint64_t v57 = *(void *)&v108[0];
  specialized Collection.first.getter(*(uint64_t *)&v108[0], v4);
  swift_release(v57);
  if (__swift_getEnumTagSinglePayload(v4, 1LL, v10) == 1)
  {
    outlined destroy of CoreSignalTypes?(v4, &demangling cache variable for type metadata for RetrievedContext?);
    goto LABEL_24;
  }

  __int128 v97 = v23;
  uint64_t v64 = v103;
  uint64_t v99 = *(os_log_s **)(v103 + 32);
  ((void (*)(char *, uint64_t, uint64_t))v99)(v18, v4, v10);
  v65 = v18;
  __int128 v66 = *(void (**)(char *))(v64 + 16);
  __int128 v67 = v102;
  v96 = v65;
  v66(v102);
  OUTLINED_FUNCTION_59();
  uint64_t v68 = OUTLINED_FUNCTION_47_0();
  v69 = (os_log_s *)Logger.logObject.getter(v68);
  os_log_type_t v70 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_80(v70))
  {
    uint64_t v71 = OUTLINED_FUNCTION_16_0(32LL);
    uint64_t v98 = OUTLINED_FUNCTION_16_0(96LL);
    *(void *)&v108[0] = v98;
    *(_DWORD *)uint64_t v71 = 136315650;
    OUTLINED_FUNCTION_59();
    uint64_t v72 = OUTLINED_FUNCTION_44_1();
    uint64_t v73 = OUTLINED_FUNCTION_69(v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v73, v74, v71 + 4);
    OUTLINED_FUNCTION_34_1(v22);
    *(_WORD *)(v71 + 12) = 2080;
    OUTLINED_FUNCTION_47_0();
    uint64_t v76 = OUTLINED_FUNCTION_64_0(v100, v75, (uint64_t *)v108);
    uint64_t v77 = OUTLINED_FUNCTION_92(v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v77, v78, v79);
    OUTLINED_FUNCTION_34_1(v32);
    *(_WORD *)(v71 + 22) = 2080;
    v80 = v101;
    ((void (*)(char *, char *, uint64_t))v66)(v101, v67, v10);
    uint64_t v81 = String.init<A>(describing:)(v80, v10);
    uint64_t v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, (uint64_t *)v108);
    uint64_t v84 = OUTLINED_FUNCTION_92(v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v84, v85, v86);
    OUTLINED_FUNCTION_102();
    (*(void (**)(char *, uint64_t))(v103 + 8))(v67, v10);
    _os_log_impl( &dword_0,  v69,  (os_log_type_t)v4,  "Setting parameter %s, of type: %s to %s using salient entities",  (uint8_t *)v71,  0x20u);
    uint64_t v87 = v98;
    swift_arrayDestroy(v98, 3LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_3_0(v87);
    OUTLINED_FUNCTION_3_0(v71);
  }

  else
  {
    OUTLINED_FUNCTION_51(v32);
    OUTLINED_FUNCTION_51(v22);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v67, v10);
  }

  uint64_t v88 = (void *)v105;
  *(void *)(v105 + 24) = v10;
  lazy protocol witness table accessor for type UtteranceAction and conformance UtteranceAction( &lazy protocol witness table cache variable for type RetrievedContext and conformance RetrievedContext,  (uint64_t (*)(uint64_t))&type metadata accessor for RetrievedContext,  (uint64_t)&protocol conformance descriptor for RetrievedContext);
  v88[4] = v89;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v88);
  ((void (*)(void *, char *, uint64_t))v99)(boxed_opaque_existential_1, v96, v10);

LABEL_19:
  OUTLINED_FUNCTION_57_0();
}

void *specialized Dictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1)
{
  return specialized Dictionary.init<A>(uniqueKeysWithValues:)( a1,  &demangling cache variable for type metadata for _DictionaryStorage<String, ActionParameter>,  (void (*)(uint64_t, uint64_t, void **))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
}

{
  return specialized Dictionary.init<A>(uniqueKeysWithValues:)( a1,  &demangling cache variable for type metadata for _DictionaryStorage<String, LinkSuggestedActionsRequest>,  (void (*)(uint64_t, uint64_t, void **))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
}

{
  return specialized Dictionary.init<A>(uniqueKeysWithValues:)( a1,  &demangling cache variable for type metadata for _DictionaryStorage<String, String>,  (void (*)(uint64_t, uint64_t, void **))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
}

{
  return specialized Dictionary.init<A>(uniqueKeysWithValues:)( a1,  &demangling cache variable for type metadata for _DictionaryStorage<LNSuggestedActionDialogParameterKey, String>,  (void (*)(uint64_t, uint64_t, void **))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
}

{
  return specialized Dictionary.init<A>(uniqueKeysWithValues:)( a1,  &demangling cache variable for type metadata for _DictionaryStorage<Signal, [CandidateSuggestionConfigurator]>,  (void (*)(uint64_t, uint64_t, void **))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
}

void *specialized Dictionary.init<A>(uniqueKeysWithValues:)( uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, void **))
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t v5 = (void *)static _DictionaryStorage.allocate(capacity:)(v4);
  }

  else
  {
    uint64_t v5 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v8 = v5;
  uint64_t v6 = OUTLINED_FUNCTION_35();
  a3(v6, 1LL, &v8);
  OUTLINED_FUNCTION_8();
  return v8;
}

void RetrievedContext.getDisplay(for:)()
{
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  RetrievedContext.typedValue.getter(v3);
  uint64_t v6 = type metadata accessor for TypedValue(0LL);
  if (__swift_getEnumTagSinglePayload(v0, 1LL, v6) == 1)
  {
    uint64_t v7 = &demangling cache variable for type metadata for TypedValue?;
    uint64_t v8 = v0;
  }

  else
  {
    TypedValue.displayRepresentation.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v0, v6);
    uint64_t v9 = type metadata accessor for DisplayRepresentation(0LL);
    if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1LL, v9) != 1)
    {
      DisplayRepresentation.title.getter();
      (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8LL))(v5, v9);
      goto LABEL_7;
    }

    uint64_t v7 = &demangling cache variable for type metadata for DisplayRepresentation?;
    uint64_t v8 = (uint64_t)v5;
  }

  outlined destroy of CoreSignalTypes?(v8, v7);
LABEL_7:
  OUTLINED_FUNCTION_7();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)( uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  return _swift_stdlib_bridgeErrorToNSError(v1);
}

void implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(void (*a1)(void))
{
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_0();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_24();
      if (v4)
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_6_0();
    }
  }

  OUTLINED_FUNCTION_40_1();
  if (v2)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, ActionParameter)>);
    uint64_t v7 = (void *)OUTLINED_FUNCTION_1(v6, (v2 << 6) | 0x20);
    size_t v8 = _swift_stdlib_malloc_size(v7);
    v7[2] = v1;
    v7[3] = 2 * ((uint64_t)(v8 - 32) / 64);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v9 = (char *)OUTLINED_FUNCTION_83();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v9, v10, v11);
    OUTLINED_FUNCTION_17_2();
  }

  else
  {
    uint64_t v12 = OUTLINED_FUNCTION_39_1();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v12, v13, v14, v15);
  }

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  void *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  OUTLINED_FUNCTION_65();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_0();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_24();
      if (v3)
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_6_0();
    }
  }

  OUTLINED_FUNCTION_40_1();
  if (v1)
  {
    char v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AppIntentDetails>);
    uint64_t v6 = (void *)OUTLINED_FUNCTION_32_1(v5);
    OUTLINED_FUNCTION_25_1(v6);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v7 = (char *)OUTLINED_FUNCTION_83();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_17_2();
  }

  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_39_1();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }

  OUTLINED_FUNCTION_13_0();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  void *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  OUTLINED_FUNCTION_65();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_0();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_24();
      if (v3)
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_6_0();
    }
  }

  OUTLINED_FUNCTION_40_1();
  if (v1)
  {
    char v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LinkSuggestedAction>);
    uint64_t v6 = (void *)OUTLINED_FUNCTION_32_1(v5);
    OUTLINED_FUNCTION_25_1(v6);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v7 = (char *)OUTLINED_FUNCTION_83();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_17_2();
  }

  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_39_1();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }

  OUTLINED_FUNCTION_13_0();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  void *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  OUTLINED_FUNCTION_65();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_0();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_24();
      if (v3)
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_6_0();
    }
  }

  OUTLINED_FUNCTION_40_1();
  if (v1)
  {
    char v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OwnerDefinition>);
    uint64_t v6 = (void *)OUTLINED_FUNCTION_32_1(v5);
    OUTLINED_FUNCTION_25_1(v6);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v7 = (char *)OUTLINED_FUNCTION_83();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_17_2();
  }

  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_39_1();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }

  OUTLINED_FUNCTION_13_0();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  void *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  OUTLINED_FUNCTION_65();
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_0();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_24();
      if (v3)
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_6_0();
    }
  }

  OUTLINED_FUNCTION_40_1();
  if (v1)
  {
    char v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase>);
    uint64_t v6 = (void *)OUTLINED_FUNCTION_32_1(v5);
    OUTLINED_FUNCTION_25_1(v6);
  }

  if ((v0 & 1) != 0)
  {
    uint64_t v7 = (char *)OUTLINED_FUNCTION_83();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_17_2();
  }

  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_39_1();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }

  OUTLINED_FUNCTION_13_0();
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [RetrievedContext])>);
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [LNAutoShortcut])>);
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<(Signal, [CandidateSuggestionConfigurator])>,  (void (*)(void, uint64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:),  (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<RetrievedContext>,  (void (*)(void))&type metadata accessor for RetrievedContext);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( a1,  a2,  a3,  a4,  &demangling cache variable for type metadata for _ContiguousArrayStorage<VersionedInvocation>,  (void (*)(void))&type metadata accessor for VersionedInvocation);
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  char v6 = a1;
  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_0();
    if (v8 != v9)
    {
      OUTLINED_FUNCTION_24();
      if (v8)
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_6_0();
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v10 = *(void *)(a4 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    uint64_t v12 = OUTLINED_FUNCTION_20(a1, a2, a3, a4, a5);
    uint64_t v13 = (char *)OUTLINED_FUNCTION_1(v12, 24 * v11 + 32);
    size_t v14 = _swift_stdlib_malloc_size(v13);
    *((void *)v13 + 2) = v10;
    *((void *)v13 + 3) = 2 * ((uint64_t)(v14 - 32) / 24);
  }

  else
  {
    uint64_t v13 = (char *)_swiftEmptyArrayStorage;
  }

  if ((v6 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v10, v13 + 32);
    OUTLINED_FUNCTION_17_2();
  }

  else
  {
    uint64_t v15 = OUTLINED_FUNCTION_91();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v15, v16, v17, v18, v19);
  }

  OUTLINED_FUNCTION_13_0();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(void))
{
  char v8 = a1;
  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_0();
    if (v10 != v11)
    {
      OUTLINED_FUNCTION_24();
      if (v10)
      {
        __break(1u);
LABEL_23:
        OUTLINED_FUNCTION_0_2();
        id v30 = "Division by zero";
        uint64_t v31 = 16LL;
LABEL_25:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v30,  v31,  2LL,  "Swift/IntegerTypes.swift",  24LL);
        __break(1u);
        return result;
      }

      OUTLINED_FUNCTION_6_0();
    }
  }

  else
  {
    uint64_t v9 = a2;
  }

  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (!v13)
  {
    id v19 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }

  uint64_t v14 = OUTLINED_FUNCTION_20(a1, a2, a3, a4, a5);
  uint64_t v15 = *(void *)(((uint64_t (*)(void))a6)(0LL) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  id v19 = (void *)swift_allocObject(v14, v18 + v16 * v13, v17 | 7);
  size_t v20 = _swift_stdlib_malloc_size(v19);
  if (!v16) {
    goto LABEL_23;
  }
  if (v20 - v18 == 0x8000000000000000LL && v16 == -1)
  {
    OUTLINED_FUNCTION_0_2();
    id v30 = "Division results in an overflow";
    uint64_t v31 = 31LL;
    goto LABEL_25;
  }

  v19[2] = v12;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_18:
  uint64_t v22 = *(unsigned __int8 *)(*(void *)(((uint64_t (*)(void))a6)(0LL) - 8) + 80LL);
  uint64_t v23 = (v22 + 32) & ~v22;
  if ((v8 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4 + v23, v12, (unint64_t)v19 + v23, a6);
    OUTLINED_FUNCTION_17_2();
  }

  else
  {
    uint64_t v24 = OUTLINED_FUNCTION_91();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v24, v25, v26, v27, v28);
  }

  return (uint64_t)v19;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(void, uint64_t, void *, uint64_t), void (*a7)(uint64_t, uint64_t, void *))
{
  char v10 = a1;
  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_4_0();
    if (v12 != v13)
    {
      OUTLINED_FUNCTION_24();
      if (v12)
      {
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_6_0();
    }
  }

  else
  {
    uint64_t v11 = a2;
  }

  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (v15)
  {
    uint64_t v16 = OUTLINED_FUNCTION_20(a1, a2, a3, a4, a5);
    uint64_t v17 = (void *)OUTLINED_FUNCTION_1(v16, 16 * v15 + 32);
    size_t v18 = _swift_stdlib_malloc_size(v17);
    v17[2] = v14;
    v17[3] = 2 * ((uint64_t)(v18 - 32) / 16);
  }

  else
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
  }

  id v19 = v17 + 4;
  if ((v10 & 1) != 0)
  {
    a7(a4 + 32, v14, v19);
    OUTLINED_FUNCTION_17_2();
  }

  else
  {
    a6(0LL, v14, v19, a4);
  }

  OUTLINED_FUNCTION_13_0();
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v7 = a4 + (a1 << 6) + 32;
  unint64_t v8 = a3 + (v4 << 6);
  if (v7 >= v8 || v7 + (v4 << 6) <= a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, ActionParameter));
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  char v6 = a4 + 16 * a1 + 32;
  unint64_t v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  char v6 = a4 + 24 * a1 + 32;
  unint64_t v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  char v6 = a4 + 48 * a1 + 32;
  unint64_t v7 = a3 + 48 * v4;
  if (v6 >= v7 || v6 + 48 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 16 * a1 + 32;
  unint64_t v8 = a3 + 16 * v4;
  if (v7 >= v8 || v7 + 16 * v4 <= a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Signal, [CandidateSuggestionConfigurator]));
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 40 * a1 + 32;
  unint64_t v8 = a3 + 40 * v4;
  if (v7 >= v8 || v7 + 40 * v4 <= a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OwnerDefinition);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  char v6 = a4 + 40 * a1 + 32;
  unint64_t v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_7_1();
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 24 * a1 + 32;
  unint64_t v8 = a3 + 24 * v5;
  if (v7 >= v8 || v7 + 24 * v5 <= a3)
  {
    OUTLINED_FUNCTION_20(a1, a2, a3, a4, a5);
    swift_arrayInitWithCopy(a3);
    OUTLINED_FUNCTION_8();
    return v8;
  }

  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_6_2();
LABEL_11:
  uint64_t result = OUTLINED_FUNCTION_3_2(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_7_1();
    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(a5(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    OUTLINED_FUNCTION_8();
    return v14;
  }

  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_6_2();
LABEL_11:
  uint64_t result = OUTLINED_FUNCTION_3_2(v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28);
  __break(1u);
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_2( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_2(a3, result);
  }

  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_2( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[48 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_2(a3, result);
  }

  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_2( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_2(a3, result);
  }

  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_2( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[56 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_2(a3, result);
  }

  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_2( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_2(a3, result);
  }

  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_2( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_2(a3, result);
  }

  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_2( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_2(a3, result);
  }

  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    uint64_t result = (char *)OUTLINED_FUNCTION_2_2( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_2(a3, result);
  }

  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[64 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, a2 << 6);
  }

  return __src;
}

{
  char v4;
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }

  return __src;
}

{
  if (__dst != __src || &__src[16 * a2] <= __dst) {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

uint64_t specialized UnsafeMutablePointer.moveInitialize(from:count:)( unint64_t a1, uint64_t a2, unint64_t a3)
{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)( a1,  a2,  a3,  (void (*)(void))&type metadata accessor for RetrievedContext);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)( a1,  a2,  a3,  (void (*)(void))&type metadata accessor for VersionedInvocation);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)( a1,  a2,  a3,  (void (*)(void))&type metadata accessor for InvocationType);
}

uint64_t specialized UnsafeMutablePointer.moveInitialize(from:count:)( unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void))
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    uint64_t result = OUTLINED_FUNCTION_2_2( (uint64_t)"Fatal error",  v11,  v12,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v13,  v14,  (uint64_t)"Swift/UnsafePointer.swift",  v15,  v16,  v17,  v18);
    __break(1u);
  }

  else if (a3 < a1 {
         || (uint64_t result = ((uint64_t (*)(void))a4)(0LL),
  }
             a1 + *(void *)(*(void *)(result - 8) + 72LL) * a2 <= a3))
  {
    a4(0LL);
    uint64_t v10 = OUTLINED_FUNCTION_88();
    return swift_arrayInitWithTakeFrontToBack(v10);
  }

  else if (a3 != a1)
  {
    uint64_t v9 = OUTLINED_FUNCTION_88();
    return swift_arrayInitWithTakeBackToFront(v9);
  }

  return result;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_7_1();
  }

  else
  {
    OUTLINED_FUNCTION_38_1();
    unint64_t v5 = v3 + 16 * v4;
    if (v2 + 16 * v4 > v3)
    {
      BOOL v6 = v5 >= v2;
      BOOL v7 = v5 == v2;
    }

    else
    {
      BOOL v6 = 0;
      BOOL v7 = 0;
    }

    if (v7 || !v6)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Signal, [CandidateSuggestionConfigurator]));
      uint64_t v8 = OUTLINED_FUNCTION_8_1();
      return OUTLINED_FUNCTION_4_2(v8);
    }

    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_6_2();
  }

  uint64_t result = OUTLINED_FUNCTION_3_2(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_7_1();
  }

  else
  {
    OUTLINED_FUNCTION_50_0();
    if (!v5 && v4)
    {
      uint64_t v4 = v3 >= v2;
      unint64_t v5 = v3 == v2;
    }

    else
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0;
    }

    if (v5 || !v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, LNActionMetadata));
      BOOL v6 = OUTLINED_FUNCTION_8_1();
      return OUTLINED_FUNCTION_4_2(v6);
    }

    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_6_2();
  }

  uint64_t result = OUTLINED_FUNCTION_3_2(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_7_1();
  }

  else
  {
    OUTLINED_FUNCTION_38_1();
    unint64_t v5 = v4 + 56 * v3;
    if (v2 + 56 * v3 > v4)
    {
      BOOL v6 = v5 >= v2;
      BOOL v7 = v5 == v2;
    }

    else
    {
      BOOL v6 = 0;
      BOOL v7 = 0;
    }

    if (v7 || !v6)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, SiriSuggestions.DisplayRepresentable));
      uint64_t v8 = OUTLINED_FUNCTION_8_1();
      return OUTLINED_FUNCTION_4_2(v8);
    }

    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_6_2();
  }

  uint64_t result = OUTLINED_FUNCTION_3_2(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_7_1();
  }

  else
  {
    OUTLINED_FUNCTION_49_0();
    if (!v5 && v4)
    {
      uint64_t v4 = v3 >= v2;
      unint64_t v5 = v3 == v2;
    }

    else
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0;
    }

    if (v5 || !v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, LinkSuggestedActionsRequest));
      BOOL v6 = OUTLINED_FUNCTION_8_1();
      return OUTLINED_FUNCTION_4_2(v6);
    }

    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_6_2();
  }

  uint64_t result = OUTLINED_FUNCTION_3_2(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_7_1();
  }

  else
  {
    OUTLINED_FUNCTION_38_1();
    unint64_t v5 = v3 + 8 * v4;
    if (v2 + 8 * v4 > v3)
    {
      BOOL v6 = v5 >= v2;
      BOOL v7 = v5 == v2;
    }

    else
    {
      BOOL v6 = 0;
      BOOL v7 = 0;
    }

    if (v7 || !v6)
    {
      type metadata accessor for LNActionParameterMetadata( 0LL,  (unint64_t *)&lazy cache variable for type metadata for LNAutoShortcut,  &OBJC_CLASS___LNAutoShortcut_ptr);
      uint64_t v8 = OUTLINED_FUNCTION_8_1();
      return OUTLINED_FUNCTION_4_2(v8);
    }

    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_6_2();
  }

  uint64_t result = OUTLINED_FUNCTION_3_2(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_7_1();
  }

  else
  {
    OUTLINED_FUNCTION_38_1();
    unint64_t v5 = v3 + 32 * v4;
    if (v2 + 32 * v4 > v3)
    {
      BOOL v6 = v5 >= v2;
      BOOL v7 = v5 == v2;
    }

    else
    {
      BOOL v6 = 0;
      BOOL v7 = 0;
    }

    if (v7 || !v6)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
      uint64_t v8 = OUTLINED_FUNCTION_8_1();
      return OUTLINED_FUNCTION_4_2(v8);
    }

    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_6_2();
  }

  uint64_t result = OUTLINED_FUNCTION_3_2(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_7_1();
  }

  else
  {
    OUTLINED_FUNCTION_50_0();
    if (!v5 && v4)
    {
      uint64_t v4 = v3 >= v2;
      unint64_t v5 = v3 == v2;
    }

    else
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0;
    }

    if (v5 || !v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (LNSuggestedActionDialogParameterKey, String));
      BOOL v6 = OUTLINED_FUNCTION_8_1();
      return OUTLINED_FUNCTION_4_2(v6);
    }

    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_6_2();
  }

  uint64_t result = OUTLINED_FUNCTION_3_2(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_7_1();
  }

  else
  {
    OUTLINED_FUNCTION_38_1();
    BOOL v6 = *(void *)(*(void *)(v5(0LL) - 8) + 72LL) * v2;
    BOOL v7 = v3 + v6;
    uint64_t v8 = v4 + v6;
    if (v7 <= v4 || v8 <= v3)
    {
      uint64_t v10 = OUTLINED_FUNCTION_8_1();
      return OUTLINED_FUNCTION_4_2(v10);
    }

    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_6_2();
  }

  uint64_t result = OUTLINED_FUNCTION_3_2(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_7_1();
  }

  else
  {
    OUTLINED_FUNCTION_49_0();
    if (!v6 && v5)
    {
      unint64_t v5 = v4 >= v2;
      BOOL v6 = v4 == v2;
    }

    else
    {
      unint64_t v5 = 0;
      BOOL v6 = 0;
    }

    if (v6 || !v5)
    {
      __swift_instantiateConcreteTypeFromMangledName(v3);
      BOOL v7 = OUTLINED_FUNCTION_8_1();
      return OUTLINED_FUNCTION_4_2(v7);
    }

    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_6_2();
  }

  uint64_t result = OUTLINED_FUNCTION_3_2(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
  return result;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)( unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_7_1();
  }

  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3) {
      return OUTLINED_FUNCTION_33_1(a3);
    }
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_6_2();
  }

  uint64_t result = OUTLINED_FUNCTION_3_2(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

{
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_7_1();
  }

  else
  {
    unint64_t v3 = a1 + 48 * a2;
    if (a3 + 48 * a2 > a1)
    {
      uint64_t v4 = v3 >= a3;
      uint64_t v5 = v3 == a3;
    }

    else
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
    }

    if (v5 || !v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
      uint64_t v6 = OUTLINED_FUNCTION_8_1();
      return OUTLINED_FUNCTION_4_2(v6);
    }

    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_6_2();
  }

  uint64_t result = OUTLINED_FUNCTION_3_2(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_7_1();
  }

  else
  {
    if (a3 + 48 * a2 <= a1 || a1 + 48 * a2 <= a3) {
      return OUTLINED_FUNCTION_33_1(a3);
    }
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_6_2();
  }

  uint64_t result = OUTLINED_FUNCTION_3_2(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_7_1();
  }

  else
  {
    if (a3 + 32 * a2 <= a1 || a1 + 32 * a2 <= a3) {
      return OUTLINED_FUNCTION_33_1(a3);
    }
    OUTLINED_FUNCTION_0_2();
    OUTLINED_FUNCTION_6_2();
  }

  uint64_t result = OUTLINED_FUNCTION_3_2(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

void partial apply for closure #1 in LinkClientResolver.getParameters(for:withParameters:andSalientEntities:)( void **a1@<X0>, void **a2@<X8>)
{
}

LABEL_10:
    uint64_t v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1LL << v12;
    *(void *)(v19[6] + 8 * v12) = v9;
    *(void *)(v19[7] + 8 * v12) = v8;
    int v20 = v19[2];
    uint64_t v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_18;
    }
    v19[2] = v22;
    a2 = 1;
    if (!--v3) {
      return swift_bridgeObjectRelease_n(v30, 2LL);
    }
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
  uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
  if ((v16 & 1) != (v18 & 1)) {
    goto LABEL_19;
  }
  uint64_t v12 = v17;
  if ((v16 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v23 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0LL, 0LL);
  swift_willThrow(v23);
  uint64_t v33 = v23;
  swift_errorRetain(v23);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast(v24, &v33, v24, &type metadata for _MergeError, 0LL) & 1) == 0)
  {
    swift_release(v9);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease_n(v30, 2LL);
    return swift_errorRelease(v33);
  }

    uint64_t v17 = (void *)*a3;
    *(void *)(*a3 + 8 * (v10 >> 6) + 64) |= 1LL << v10;
    int v18 = (uint64_t *)(v17[6] + 16 * v10);
    *int v18 = v6;
    v18[1] = v7;
    uint64_t v19 = (_OWORD *)(v17[7] + 48 * v10);
    int v20 = v35;
    uint64_t v21 = v37;
    v19[1] = v36;
    v19[2] = v21;
    *uint64_t v19 = v20;
    uint64_t v22 = v17[2];
    uint64_t v23 = __OFADD__(v22, 1LL);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_18;
    }
    v17[2] = v24;
    v5 += 64LL;
    a2 = 1;
    if (!--v3) {
      return swift_bridgeObjectRelease_n(a1, 2LL);
    }
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a2 & 1);
  int v15 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
  if ((v14 & 1) != (v16 & 1)) {
    goto LABEL_19;
  }
  uint64_t v10 = v15;
  if ((v14 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v25 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0LL, 0LL);
  swift_willThrow();
  uint64_t v45 = v25;
  swift_errorRetain(v25);
  int v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast(v26, &v45, v26, &type metadata for _MergeError, 0LL) & 1) == 0)
  {
    swift_bridgeObjectRelease(a1);
    outlined destroy of ActionParameter((uint64_t)&v35);
    uint64_t v27 = v39;
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease(v27);
    return swift_errorRelease(v45);
  }

    uint64_t v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1LL << v12;
    int v20 = (uint64_t *)(v19[6] + 16 * v12);
    void *v20 = v6;
    v20[1] = v7;
    uint64_t v21 = v19[7] + 24 * v12;
    *(void *)uint64_t v21 = v31;
    *(void *)(v21 + 8) = v8;
    *(_BYTE *)(v21 + 16) = v9;
    *(_BYTE *)(v21 + 17) = v32;
    uint64_t v22 = v19[2];
    uint64_t v23 = __OFADD__(v22, 1LL);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_18;
    }
    v19[2] = v24;
    a2 = 1;
    if (!--v3) {
      return swift_bridgeObjectRelease_n(v30, 2LL);
    }
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
  uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v36[0], v7);
  if ((v16 & 1) != (v18 & 1)) {
    goto LABEL_19;
  }
  uint64_t v12 = v17;
  if ((v16 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v25 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0LL, 0LL);
  swift_willThrow(v25);
  os_log_type_t v37 = v25;
  swift_errorRetain(v25);
  int v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast(v26, &v37, v26, &type metadata for _MergeError, 0LL) & 1) == 0)
  {
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease_n(v30, 2LL);
    return swift_errorRelease(v37);
  }

    int v26 = (void *)*a3;
    *(void *)(*a3 + 8 * (v19 >> 6) + 64) |= 1LL << v19;
    uint64_t v27 = (uint64_t *)(v26[6] + 16 * v19);
    *uint64_t v27 = v8;
    v27[1] = v7;
    int v28 = (void *)(v26[7] + 16 * v19);
    *int v28 = v10;
    v28[1] = v41;
    uint64_t v29 = v26[2];
    id v30 = __OFADD__(v29, 1LL);
    uint64_t v31 = v29 + 1;
    if (v30) {
      goto LABEL_18;
    }
    v6 += 4;
    v26[2] = v31;
    a2 = 1;
    if (!--v4) {
      return swift_bridgeObjectRelease_n(v40, 2LL);
    }
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v22,  a2 & 1,  v13,  v14,  v15,  v16,  v17,  v18,  v37,  v38,  v39,  v40,  v9,  SBYTE4(v9));
  uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v45[0], v7);
  if ((v23 & 1) != (v25 & 1)) {
    goto LABEL_19;
  }
  uint64_t v19 = v24;
  if ((v23 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v32 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0LL, 0LL);
  swift_willThrow(v32);
  uint64_t v46 = v32;
  swift_errorRetain(v32);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast(v33, &v46, v33, &type metadata for _MergeError, 0LL) & 1) == 0)
  {
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease_n(v40, 2LL);
    return swift_errorRelease(v46);
  }

    uint64_t v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1LL << v12;
    *(void *)(v19[6] + 8 * v12) = v10;
    int v20 = (void *)(v19[7] + 16 * v12);
    void *v20 = v7;
    v20[1] = v8;
    uint64_t v21 = v19[2];
    uint64_t v22 = __OFADD__(v21, 1LL);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_18;
    }
    v6 += 3;
    v19[2] = v23;
    a2 = 1;
    if (!--v3) {
      return swift_bridgeObjectRelease_n(v31, 2LL);
    }
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
  uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  if ((v16 & 1) != (v18 & 1)) {
    goto LABEL_19;
  }
  uint64_t v12 = v17;
  if ((v16 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v24 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0LL, 0LL);
  swift_willThrow(v24);
  uint64_t v35 = v24;
  swift_errorRetain(v24);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast(v25, &v35, v25, &type metadata for _MergeError, 0LL) & 1) == 0)
  {

    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease_n(v31, 2LL);
    return swift_errorRelease(v35);
  }

LABEL_20:
  uint64_t v31 = 0LL;
  uint64_t v32 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v27._object = (void *)0x800000000003EE20LL;
  v27._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v27);
  int v28 = type metadata accessor for Signal(0LL);
  _print_unlocked<A, B>(_:_:)( &v34,  &v31,  v28,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v29._uint64_t countAndFlagsBits = 39LL;
  v29._object = (void *)0xE100000000000000LL;
  String.append(_:)(v29);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v31,  v32,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

  uint64_t v33 = 0LL;
  uint64_t v34 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v29._object = (void *)0x800000000003EE20LL;
  v29._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v29);
  _print_unlocked<A, B>(_:_:)( &v38,  &v33,  &type metadata for String,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v30._uint64_t countAndFlagsBits = 39LL;
  v30._object = (void *)0xE100000000000000LL;
  String.append(_:)(v30);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v33,  v34,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

  uint64_t v34 = 0LL;
  uint64_t v35 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v28._object = (void *)0x800000000003EE20LL;
  v28._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v28);
  _print_unlocked<A, B>(_:_:)( v36,  &v34,  &type metadata for String,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v29._uint64_t countAndFlagsBits = 39LL;
  v29._object = (void *)0xE100000000000000LL;
  String.append(_:)(v29);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v34,  v35,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

  uint64_t v43 = 0LL;
  uint64_t v44 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v35._object = (void *)0x800000000003EE20LL;
  v35._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v35);
  _print_unlocked<A, B>(_:_:)( v45,  &v43,  &type metadata for String,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v36._uint64_t countAndFlagsBits = 39LL;
  v36._object = (void *)0xE100000000000000LL;
  String.append(_:)(v36);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v43,  v44,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

  uint64_t v33 = 0LL;
  uint64_t v34 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v28._object = (void *)0x800000000003EE20LL;
  v28._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v28);
  type metadata accessor for LNSuggestedActionDialogParameterKey(0LL);
  _print_unlocked<A, B>(_:_:)( &v36,  &v33,  v29,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v30._uint64_t countAndFlagsBits = 39LL;
  v30._object = (void *)0xE100000000000000LL;
  String.append(_:)(v30);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v33,  v34,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

      OUTLINED_FUNCTION_76();
      uint64_t v9 = v20 & v19;
    }

    OUTLINED_FUNCTION_13_2();
    uint64_t v34 = v38;
LABEL_36:
    if ((a2 & 1) != 0)
    {
      OUTLINED_FUNCTION_18_2();
      if (v15 != v16)
      {
        *uint64_t v34 = -1LL << v35;
      }

      else
      {
        int v36 = OUTLINED_FUNCTION_85();
        specialized UnsafeMutablePointer.assign(repeating:count:)(v36, v37, v34);
      }

      v4[2] = 0LL;
    }
  }

  OUTLINED_FUNCTION_13_2();
  *(void *)uint64_t v2 = a2;
}

    OUTLINED_FUNCTION_76();
    int v13 = v21 & v20;
  }

  uint64_t v19 = v18 + 2;
  if (v19 < v43)
  {
    if (!v44[v19])
    {
      while (1)
      {
        int v15 = v19 + 1;
        if (__OFADD__(v19, 1LL)) {
          goto LABEL_44;
        }
        if (v15 >= v43) {
          goto LABEL_36;
        }
        ++v19;
        if (v44[v15]) {
          goto LABEL_20;
        }
      }
    }

    int v15 = v19;
    goto LABEL_20;
  }

      OUTLINED_FUNCTION_97();
    }
  }

  OUTLINED_FUNCTION_13_2();
  *int v36 = v38;
  OUTLINED_FUNCTION_23_1();
}

      OUTLINED_FUNCTION_77();
    }
  }

  OUTLINED_FUNCTION_13_2();
  *uint64_t v14 = v16;
  OUTLINED_FUNCTION_23_1();
}

      OUTLINED_FUNCTION_4_6();
      uint64_t v8 = v17 & v16;
    }
  }

  OUTLINED_FUNCTION_13_2();
  *uint64_t v2 = v5;
  OUTLINED_FUNCTION_0_8();
}

    OUTLINED_FUNCTION_4_6();
    uint64_t v8 = v17 & v16;
  }

  int v15 = v14 + 3;
  if (v15 >= v33)
  {
LABEL_32:
    swift_release_n(v3, 2LL);
    goto LABEL_34;
  }

  if (*(void *)(v32 + 8 * v15))
  {
    uint64_t v10 = v15;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v10 >= v33) {
      goto LABEL_32;
    }
    ++v15;
    if (*(void *)(v32 + 8 * v10)) {
      goto LABEL_20;
    }
  }

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)v2;
  if (*(void *)(*(void *)v2 + 24LL) <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)v2 + 24LL);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Signal, [CandidateSuggestionConfigurator]>);
  static _DictionaryStorage.resize(original:capacity:move:)(v4, v5, a2);
  OUTLINED_FUNCTION_63_0();
  if (v6)
  {
    OUTLINED_FUNCTION_35_1();
    unint64_t v9 = v8 & v7;
    OUTLINED_FUNCTION_84();
    OUTLINED_FUNCTION_53_0();
    uint64_t v10 = 0LL;
    if (!v9) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = v21 + (v10 << 6))
    {
      uint64_t v22 = *(void *)(v4[6] + 8 * i);
      uint64_t v23 = *(void *)(v4[7] + 8 * i);
      if ((a2 & 1) == 0)
      {
        swift_retain(v22);
        swift_bridgeObjectRetain(v23);
      }

      uint64_t v24 = *(void *)(a2 + 40);
      uint64_t v25 = type metadata accessor for Signal(0LL);
      lazy protocol witness table accessor for type UtteranceAction and conformance UtteranceAction( &lazy protocol witness table cache variable for type Signal and conformance Signal,  (uint64_t (*)(uint64_t))&type metadata accessor for Signal,  (uint64_t)&protocol conformance descriptor for Signal);
      dispatch thunk of Hashable._rawHashValue(seed:)(v24, v25, v26);
      OUTLINED_FUNCTION_46_0();
      if (v27)
      {
        OUTLINED_FUNCTION_11_2();
        while (1)
        {
          OUTLINED_FUNCTION_55_0();
          if (v27)
          {
            if ((v29 & 1) != 0) {
              break;
            }
          }

          if (v30 == v31) {
            uint64_t v30 = 0LL;
          }
          if (*(void *)(a2 + 64 + 8 * v30) != -1LL)
          {
            OUTLINED_FUNCTION_10_2();
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_12_2();
LABEL_33:
      OUTLINED_FUNCTION_45_1(v28);
      *(void *)(v33 + 8 * v32) = v22;
      *(void *)(*(void *)(a2 + 56) + 8 * v32) = v23;
      OUTLINED_FUNCTION_27_1();
      if (v9) {
        goto LABEL_6;
      }
LABEL_7:
      if (__OFADD__(v10, 1LL)) {
        goto LABEL_43;
      }
      OUTLINED_FUNCTION_100();
      if (v15 == v16) {
        break;
      }
      uint64_t v34 = v38;
      uint64_t v10 = v13;
      if (!v38[v13])
      {
        uint64_t v10 = v13 + 1;
        if (v13 + 1 >= v14) {
          goto LABEL_35;
        }
        if (!v38[v10])
        {
          OUTLINED_FUNCTION_78();
          if (v15 == v16)
          {
LABEL_35:
            OUTLINED_FUNCTION_13_2();
            goto LABEL_36;
          }

          if (!v38[v17])
          {
            while (1)
            {
              uint64_t v10 = v17 + 1;
              if (__OFADD__(v17, 1LL)) {
                goto LABEL_44;
              }
              if (v10 >= v18) {
                goto LABEL_35;
              }
              ++v17;
              if (v38[v10]) {
                goto LABEL_20;
              }
            }
          }

          uint64_t v10 = v17;
        }
      }

{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void v34[9];
  _OWORD v35[2];
  uint64_t v4 = v2;
  uint64_t v6 = *v2;
  if (*(void *)(*v2 + 24LL) <= a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)(*v2 + 24LL);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  OUTLINED_FUNCTION_63_0();
  if (v8)
  {
    uint64_t v31 = v4;
    OUTLINED_FUNCTION_36_1();
    unint64_t v11 = v10 & v9;
    OUTLINED_FUNCTION_84();
    uint64_t v32 = v12;
    OUTLINED_FUNCTION_53_0();
    uint64_t v13 = 0LL;
    if (!v11) {
      goto LABEL_7;
    }
LABEL_6:
    for (v11 &= v11 - 1; ; unint64_t v11 = v17 & v16)
    {
      OUTLINED_FUNCTION_75();
      uint64_t v20 = (_OWORD *)(v19 + 32 * v18);
      if ((a2 & 1) != 0)
      {
        outlined init with take of Any(v20, v35);
      }

      else
      {
        outlined init with copy of Any((uint64_t)v20, (uint64_t)v35);
        OUTLINED_FUNCTION_59();
      }

      Hasher.init(_seed:)(v34, *(void *)(v3 + 40));
      OUTLINED_FUNCTION_61_0((uint64_t)v34);
      Hasher._finalize()();
      OUTLINED_FUNCTION_28_0();
      if (v21)
      {
        OUTLINED_FUNCTION_11_2();
        while (1)
        {
          OUTLINED_FUNCTION_55_0();
          if (v21)
          {
            if ((v23 & 1) != 0) {
              break;
            }
          }

          OUTLINED_FUNCTION_71();
          if (!v21)
          {
            OUTLINED_FUNCTION_10_2();
            goto LABEL_30;
          }
        }

        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_12_2();
LABEL_30:
      OUTLINED_FUNCTION_9_2(v22);
      outlined init with take of Any(v35, (_OWORD *)(v25 + 32 * v24));
      OUTLINED_FUNCTION_27_1();
      if (v11) {
        goto LABEL_6;
      }
LABEL_7:
      uint64_t v14 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_39;
      }
      if (v14 >= v32) {
        goto LABEL_32;
      }
      ++v13;
      if (!v33[v14])
      {
        uint64_t v13 = v14 + 1;
        if (v14 + 1 >= v32) {
          goto LABEL_32;
        }
        if (!v33[v13])
        {
          char v15 = v14 + 2;
          if (v15 >= v32)
          {
LABEL_32:
            OUTLINED_FUNCTION_13_2();
            uint64_t v4 = v31;
            if ((a2 & 1) != 0)
            {
              OUTLINED_FUNCTION_18_2();
              if (v27 != v28)
              {
                __int128 *v33 = -1LL << v26;
              }

              else
              {
                char v29 = OUTLINED_FUNCTION_85();
                specialized UnsafeMutablePointer.assign(repeating:count:)(v29, v30, v33);
              }

              *(void *)(v6 + 16) = 0LL;
            }

            break;
          }

          if (!v33[v15])
          {
            while (1)
            {
              uint64_t v13 = v15 + 1;
              if (__OFADD__(v15, 1LL)) {
                goto LABEL_40;
              }
              if (v13 >= v32) {
                goto LABEL_32;
              }
              ++v15;
              if (v33[v13]) {
                goto LABEL_18;
              }
            }
          }

          uint64_t v13 = v15;
        }
      }

Swift::Int specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ActionParameter>);
  char v43 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v42 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  if (!v11) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v15 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v14 << 6))
  {
    uint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    uint64_t v24 = (__int128 *)(*(void *)(v5 + 56) + 48 * i);
    if ((v43 & 1) != 0)
    {
      __int128 v25 = *v24;
      __int128 v26 = v24[2];
      __int128 v46 = v24[1];
      __int128 v47 = v26;
      __int128 v45 = v25;
    }

    else
    {
      outlined init with copy of ActionParameter((uint64_t)v24, (uint64_t)&v45);
      swift_bridgeObjectRetain(v22);
    }

    Hasher.init(_seed:)(v44, *(void *)(v8 + 40));
    String.hash(into:)(v44, v23, v22);
    Swift::Int result = Hasher._finalize()();
    uint64_t v27 = -1LL << *(_BYTE *)(v8 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) == 0)
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v27) >> 6;
      while (++v29 != v32 || (v31 & 1) == 0)
      {
        BOOL v33 = v29 == v32;
        if (v29 == v32) {
          unint64_t v29 = 0LL;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v29);
        if (v34 != -1)
        {
          unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
          goto LABEL_34;
        }
      }

      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    unint64_t v30 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_34:
    *(void *)(v12 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v30;
    char v35 = (void *)(*(void *)(v8 + 48) + 16 * v30);
    *char v35 = v23;
    v35[1] = v22;
    uint64_t v36 = (_OWORD *)(*(void *)(v8 + 56) + 48 * v30);
    __int128 v37 = v45;
    __int128 v38 = v47;
    v36[1] = v46;
    v36[2] = v38;
    *uint64_t v36 = v37;
    ++*(void *)(v8 + 16);
    if (v11) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      goto LABEL_45;
    }
    if (v17 >= v41)
    {
      swift_release(v5);
      unint64_t v3 = v40;
      uint64_t v18 = (void *)(v5 + 64);
      goto LABEL_38;
    }

    uint64_t v18 = (void *)(v5 + 64);
    unint64_t v19 = *(void *)(v42 + 8 * v17);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v41) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v42 + 8 * v14);
      if (!v19) {
        break;
      }
    }

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  void *v40;
  uint64_t v41;
  char v42;
  char v43;
  void v44[9];
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, LinkSuggestedActionsRequest>);
  uint64_t v42 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    __int128 v38 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v40 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v39 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    Swift::Int result = swift_retain(v5);
    int64_t v14 = 0LL;
    int64_t v41 = v5;
    if (!v11) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v15 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
    {
      int64_t v20 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
      uint64_t v22 = *v20;
      uint64_t v21 = v20[1];
      uint64_t v23 = *(void *)(v5 + 56) + 24 * i;
      uint64_t v24 = *(void *)v23;
      __int128 v25 = *(void *)(v23 + 8);
      __int128 v26 = *(_BYTE *)(v23 + 16);
      char v43 = *(_BYTE *)(v23 + 17);
      if ((v42 & 1) == 0)
      {
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v25);
      }

      Hasher.init(_seed:)(v44, *(void *)(v8 + 40));
      String.hash(into:)(v44, v22, v21);
      Swift::Int result = Hasher._finalize()();
      uint64_t v27 = -1LL << *(_BYTE *)(v8 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) == 0)
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v27) >> 6;
        while (++v29 != v32 || (v31 & 1) == 0)
        {
          BOOL v33 = v29 == v32;
          if (v29 == v32) {
            unint64_t v29 = 0LL;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v12 + 8 * v29);
          if (v34 != -1)
          {
            unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        return result;
      }

      unint64_t v30 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v12 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v30;
      char v35 = (void *)(*(void *)(v8 + 48) + 16 * v30);
      *char v35 = v22;
      v35[1] = v21;
      uint64_t v36 = *(void *)(v8 + 56) + 24 * v30;
      *(void *)uint64_t v36 = v24;
      *(void *)(v36 + 8) = v25;
      *(_BYTE *)(v36 + 16) = v26;
      *(_BYTE *)(v36 + 17) = v43;
      ++*(void *)(v8 + 16);
      uint64_t v5 = v41;
      if (v11) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v17 = v14 + 1;
      if (__OFADD__(v14, 1LL)) {
        goto LABEL_42;
      }
      if (v17 >= v39) {
        goto LABEL_35;
      }
      uint64_t v18 = v40[v17];
      ++v14;
      if (!v18)
      {
        int64_t v14 = v17 + 1;
        if (v17 + 1 >= v39) {
          goto LABEL_35;
        }
        uint64_t v18 = v40[v14];
        if (!v18)
        {
          unint64_t v19 = v17 + 2;
          if (v19 >= v39)
          {
LABEL_35:
            swift_release(v5);
            unint64_t v3 = v38;
            if ((v42 & 1) != 0)
            {
              __int128 v37 = 1LL << *(_BYTE *)(v5 + 32);
              if (v37 >= 64) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0LL, (unint64_t)(v37 + 63) >> 6, v40);
              }
              else {
                *uint64_t v40 = -1LL << v37;
              }
              *(void *)(v5 + 16) = 0LL;
            }

            break;
          }

          uint64_t v18 = v40[v19];
          if (!v18)
          {
            while (1)
            {
              int64_t v14 = v19 + 1;
              if (__OFADD__(v19, 1LL)) {
                goto LABEL_43;
              }
              if (v14 >= v39) {
                goto LABEL_35;
              }
              uint64_t v18 = v40[v14];
              ++v19;
              if (v18) {
                goto LABEL_21;
              }
            }
          }

          int64_t v14 = v19;
        }
      }

LABEL_21:
    unint64_t v11 = (v19 - 1) & v19;
  }

  int64_t v20 = v17 + 2;
  if (v20 < v41)
  {
    unint64_t v19 = *(void *)(v42 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        int64_t v14 = v20 + 1;
        if (__OFADD__(v20, 1LL)) {
          goto LABEL_46;
        }
        if (v14 >= v41) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v42 + 8 * v14);
        ++v20;
        if (v19) {
          goto LABEL_21;
        }
      }
    }

    int64_t v14 = v20;
    goto LABEL_21;
  }

      unint64_t v11 = (v18 - 1) & v18;
    }
  }

  Swift::Int result = swift_release(v5);
  *unint64_t v3 = v8;
  return result;
}

      unint64_t v11 = (v18 - 1) & v18;
    }
  }

  Swift::Int result = swift_release(v5);
  *unint64_t v3 = v8;
  return result;
}

  uint64_t v6 = v7;
LABEL_47:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (v12 - v4) / 16, v6);
  return 1LL;
}

    uint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    unint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    char v16 = *v15;
    int64_t v17 = v15[1];
    uint64_t v18 = *(void *)(*(void *)(v3 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease(v17);
    if ((v21 & 1) == 0)
    {
      swift_bridgeObjectRelease(v18);
      return 0LL;
    }

    uint64_t v22 = *(void *)(*(void *)(a2 + 56) + 8 * v19);
    swift_bridgeObjectRetain(v22);
    uint64_t v24 = specialized static Dictionary<>.== infix(_:_:)(v23, v18);
    swift_bridgeObjectRelease(v18);
    Swift::Int result = swift_bridgeObjectRelease(v22);
    if ((v24 & 1) == 0) {
      return 0LL;
    }
  }

  int64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1LL;
  }
  uint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    uint64_t v4 = v14;
    goto LABEL_21;
  }

  while (1)
  {
    uint64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      return 1LL;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }

    uint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    unint64_t v15 = *(void *)(*(void *)(v3 + 56) + 8 * v11);
    char v16 = *(id *)(*(void *)(v3 + 48) + 8 * v11);
    swift_unknownObjectRetain(v15);
    int64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16);
    unint64_t v19 = v18;

    if ((v19 & 1) == 0)
    {
      swift_unknownObjectRelease(v15);
      return 0LL;
    }

    int64_t v20 = [*(id *)(*(void *)(a2 + 56) + 8 * v17) isEqual:v15];
    Swift::Int result = swift_unknownObjectRelease(v15);
    if ((v20 & 1) == 0) {
      return 0LL;
    }
  }

  int64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1LL;
  }
  uint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    uint64_t v4 = v14;
    goto LABEL_21;
  }

  while (1)
  {
    uint64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      return 1LL;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }

  __break(1u);
}

  __break(1u);
}

LABEL_36:
  swift_release(v5);
  unint64_t v3 = v40;
LABEL_38:
  if ((v43 & 1) != 0)
  {
    uint64_t v39 = 1LL << *(_BYTE *)(v5 + 32);
    if (v39 >= 64) {
      specialized UnsafeMutablePointer.assign(repeating:count:)(0LL, (unint64_t)(v39 + 63) >> 6, v18);
    }
    else {
      *uint64_t v18 = -1LL << v39;
    }
    *(void *)(v5 + 16) = 0LL;
  }

  swift_release(v8);
  unint64_t v3 = v42;
  if ((v45 & 1) != 0)
  {
    __int128 v38 = 1LL << *(_BYTE *)(v8 + 32);
    if (v38 >= 64)
    {
      uint64_t v39 = OUTLINED_FUNCTION_85();
      specialized UnsafeMutablePointer.assign(repeating:count:)(v39, v40, v44);
    }

    else
    {
      *uint64_t v44 = -1LL << v38;
    }

    *(void *)(v8 + 16) = 0LL;
  }

                  outlined consume of [String : String].Iterator._Variant(v9);
                  return;
                }
              }
            }
          }
        }

              swift_release(v3);
              return (uint64_t)v6;
            }
          }
        }
      }
    }

LABEL_43:
  Swift::Int result = swift_release(v5);
  *unint64_t v3 = v8;
  return result;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14)
{
  if (v17)
  {
    OUTLINED_FUNCTION_35_1();
    uint64_t v20 = v19 & v18;
    id v54 = v14;
    uint64_t v21 = v16 + 64;
    OUTLINED_FUNCTION_53_0();
    uint64_t v22 = 0LL;
    if (!v20) {
      goto LABEL_4;
    }
LABEL_3:
    OUTLINED_FUNCTION_66();
    while (1)
    {
      uint64_t v35 = v15[6] + 16 * v28;
      uint64_t v36 = (uint64_t *)(v15[7] + 16 * v28);
      uint64_t v37 = *v36;
      uint64_t v38 = v36[1];
      if ((a14 & 1) == 0)
      {
        swift_bridgeObjectRetain(*(void *)(v35 + 8));
        uint64_t v23 = OUTLINED_FUNCTION_59();
      }

      uint64_t v39 = OUTLINED_FUNCTION_60_0(v23, v24, v25, v26, v27);
      OUTLINED_FUNCTION_86((uint64_t)v39, v40, v41, v42, v43);
      unint64_t v44 = OUTLINED_FUNCTION_96() & ~(-1LL << *(_BYTE *)(v16 + 32));
      if (((-1LL << v44) & ~*(void *)(v21 + 8 * (v44 >> 6))) == 0)
      {
        OUTLINED_FUNCTION_11_2();
        while (1)
        {
          OUTLINED_FUNCTION_55_0();
          if (v49)
          {
            if ((v46 & 1) != 0) {
              break;
            }
          }

          if (v47 == v48) {
            uint64_t v47 = 0LL;
          }
          if (*(void *)(v21 + 8 * v47) != -1LL)
          {
            OUTLINED_FUNCTION_10_2();
            goto LABEL_30;
          }
        }

        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_12_2();
LABEL_30:
      OUTLINED_FUNCTION_30_1(v45);
      uint64_t v52 = (void *)(v51 + 16 * v50);
      *uint64_t v52 = v37;
      v52[1] = v38;
      OUTLINED_FUNCTION_27_1();
      if (v20) {
        goto LABEL_3;
      }
LABEL_4:
      if (__OFADD__(v22, 1LL)) {
        goto LABEL_39;
      }
      OUTLINED_FUNCTION_100();
      if (v31 == v32) {
        goto LABEL_32;
      }
      uint64_t v22 = v29;
      if (!*(void *)(a12 + 8 * v29))
      {
        uint64_t v22 = v29 + 1;
        if (v29 + 1 >= v30) {
          goto LABEL_32;
        }
        if (!*(void *)(a12 + 8 * v22))
        {
          OUTLINED_FUNCTION_78();
          if (v31 == v32)
          {
LABEL_32:
            OUTLINED_FUNCTION_13_2();
            int64_t v14 = v54;
            if ((a14 & 1) != 0)
            {
              OUTLINED_FUNCTION_18_2();
              if (v31 != v32) {
                OUTLINED_FUNCTION_52_0(v53);
              }
              else {
                OUTLINED_FUNCTION_24_1(v53);
              }
              v15[2] = 0LL;
            }

            break;
          }

          if (!*(void *)(a12 + 8 * v33))
          {
            while (1)
            {
              uint64_t v22 = v33 + 1;
              if (__OFADD__(v33, 1LL)) {
                goto LABEL_40;
              }
              if (v22 >= v34) {
                goto LABEL_32;
              }
              ++v33;
              if (*(void *)(a12 + 8 * v22)) {
                goto LABEL_17;
              }
            }
          }

          uint64_t v22 = v33;
        }
      }

{
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( a1,  a2,  (uint64_t)&demangling cache variable for type metadata for _DictionaryStorage<String, [RetrievedContext]>,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14);
}

{
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( a1,  a2,  (uint64_t)&demangling cache variable for type metadata for _DictionaryStorage<String, [LNAutoShortcut]>,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14);
}

{
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  OUTLINED_FUNCTION_82();
  OUTLINED_FUNCTION_16_2();
  __swift_instantiateConcreteTypeFromMangledName(v17);
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_63_0();
  if (v18)
  {
    OUTLINED_FUNCTION_62_0();
    if (v19 < 64) {
      uint64_t v21 = ~(-1LL << v19);
    }
    else {
      uint64_t v21 = -1LL;
    }
    uint64_t v22 = v21 & v20;
    OUTLINED_FUNCTION_84();
    uint64_t v23 = v16 + 64;
    OUTLINED_FUNCTION_53_0();
    uint64_t v24 = 0LL;
    if (!v22) {
      goto LABEL_7;
    }
LABEL_6:
    OUTLINED_FUNCTION_66();
    while (1)
    {
      uint64_t v37 = *(void *)(v15[7] + 8 * v30);
      if ((a14 & 1) == 0)
      {
        swift_bridgeObjectRetain(*(void *)(v15[6] + 16 * v30 + 8));
        uint64_t v25 = OUTLINED_FUNCTION_59();
      }

      uint64_t v38 = OUTLINED_FUNCTION_60_0(v25, v26, v27, v28, v29);
      OUTLINED_FUNCTION_86((uint64_t)v38, v39, v40, v41, v42);
      uint64_t v43 = OUTLINED_FUNCTION_96() & ~(-1LL << *(_BYTE *)(v16 + 32));
      if (((-1LL << v43) & ~*(void *)(v23 + 8 * (v43 >> 6))) == 0)
      {
        OUTLINED_FUNCTION_11_2();
        while (1)
        {
          OUTLINED_FUNCTION_55_0();
          if (v48)
          {
            if ((v45 & 1) != 0) {
              break;
            }
          }

          if (v46 == v47) {
            char v46 = 0LL;
          }
          if (*(void *)(v23 + 8 * v46) != -1LL)
          {
            OUTLINED_FUNCTION_10_2();
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_12_2();
LABEL_33:
      OUTLINED_FUNCTION_30_1(v44);
      *(void *)(v50 + 8 * v49) = v37;
      OUTLINED_FUNCTION_27_1();
      if (v22) {
        goto LABEL_6;
      }
LABEL_7:
      if (__OFADD__(v24, 1LL)) {
        goto LABEL_42;
      }
      OUTLINED_FUNCTION_100();
      if (v33 == v34) {
        goto LABEL_35;
      }
      uint64_t v24 = v31;
      if (!*(void *)(a12 + 8 * v31))
      {
        uint64_t v24 = v31 + 1;
        if (v31 + 1 >= v32) {
          goto LABEL_35;
        }
        if (!*(void *)(a12 + 8 * v24))
        {
          OUTLINED_FUNCTION_78();
          if (v33 == v34)
          {
LABEL_35:
            OUTLINED_FUNCTION_13_2();
            if ((a14 & 1) != 0)
            {
              OUTLINED_FUNCTION_18_2();
              if (v33 != v34) {
                OUTLINED_FUNCTION_52_0(v51);
              }
              else {
                OUTLINED_FUNCTION_24_1(v51);
              }
              v15[2] = 0LL;
            }

            break;
          }

          if (!*(void *)(a12 + 8 * v35))
          {
            while (1)
            {
              uint64_t v24 = v35 + 1;
              if (__OFADD__(v35, 1LL)) {
                goto LABEL_43;
              }
              if (v24 >= v36) {
                goto LABEL_35;
              }
              ++v35;
              if (*(void *)(a12 + 8 * v24)) {
                goto LABEL_20;
              }
            }
          }

          uint64_t v24 = v35;
        }
      }

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  unint64_t v3 = v2;
  uint64_t v47 = type metadata accessor for TypedValue(0LL);
  uint64_t v6 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  char v46 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, TypedValue>);
  int v45 = a2;
  uint64_t v9 = OUTLINED_FUNCTION_37_1(v8, a1);
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v42 = v3;
  uint64_t v10 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v11 = *(void *)(v8 + 64);
  unint64_t v44 = (void *)(v8 + 64);
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & v11;
  OUTLINED_FUNCTION_84();
  uint64_t v43 = v14;
  swift_retain(v8);
  uint64_t v15 = 0LL;
  if (!v13) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v16 | (v15 << 6); ; unint64_t i = v22 + (v15 << 6))
  {
    uint64_t v23 = *(void *)(v8 + 56);
    uint64_t v24 = v8;
    uint64_t v25 = (uint64_t *)(*(void *)(v8 + 48) + 16 * i);
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    uint64_t v28 = *(void *)(v6 + 72);
    uint64_t v29 = v23 + v28 * i;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v46, v29, v47);
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v46, v29, v47);
      OUTLINED_FUNCTION_47_0();
    }

    Hasher.init(_seed:)(v48, *(void *)(v9 + 40));
    String.hash(into:)(v48, v27, v26);
    Hasher._finalize()();
    OUTLINED_FUNCTION_46_0();
    if (v30)
    {
      OUTLINED_FUNCTION_11_2();
      while (1)
      {
        OUTLINED_FUNCTION_55_0();
        if (v30)
        {
          if ((v32 & 1) != 0) {
            break;
          }
        }

        if (v33 == v34) {
          uint64_t v33 = 0LL;
        }
        if (*(void *)(v9 + 64 + 8 * v33) != -1LL)
        {
          OUTLINED_FUNCTION_10_2();
          goto LABEL_34;
        }
      }

      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      return;
    }

    OUTLINED_FUNCTION_12_2();
LABEL_34:
    OUTLINED_FUNCTION_45_1(v31);
    uint64_t v37 = (void *)(v36 + 16 * v35);
    *uint64_t v37 = v27;
    v37[1] = v26;
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v9 + 56) + v28 * v35, v46, v47);
    OUTLINED_FUNCTION_27_1();
    uint64_t v8 = v24;
    if (v13) {
      goto LABEL_8;
    }
LABEL_9:
    uint64_t v18 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      goto LABEL_43;
    }
    if (v18 >= v43) {
      goto LABEL_36;
    }
    ++v15;
    if (!v44[v18])
    {
      uint64_t v15 = v18 + 1;
      if (v18 + 1 >= v43) {
        goto LABEL_36;
      }
      if (!v44[v15]) {
        break;
      }
    }

LABEL_41:
  swift_release(v8);
  *unint64_t v3 = v9;
  OUTLINED_FUNCTION_57_0();
}

          uint64_t v38 = v44;
LABEL_42:
          outlined consume of [String : String].Iterator._Variant(v38);
          return (uint64_t)v2;
        }
      }
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14, __int16 a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
  a35 = v39;
  a36 = v40;
  OUTLINED_FUNCTION_16_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, LNActionMetadata>);
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_63_0();
  if (v41)
  {
    OUTLINED_FUNCTION_62_0();
    if (v42 < 64) {
      uint64_t v44 = ~(-1LL << v42);
    }
    else {
      uint64_t v44 = -1LL;
    }
    uint64_t v45 = v44 & v43;
    __int128 v67 = v36;
    OUTLINED_FUNCTION_53_0();
    uint64_t v46 = 0LL;
    if (!v45) {
      goto LABEL_7;
    }
LABEL_6:
    OUTLINED_FUNCTION_90();
    while (1)
    {
      OUTLINED_FUNCTION_75();
      uint64_t v60 = *(void **)(v59 + 8 * v58);
      if ((a14 & 1) == 0)
      {
        OUTLINED_FUNCTION_59();
        id v53 = v60;
      }

      OUTLINED_FUNCTION_60_0((uint64_t)v53, v54, v55, v56, v57);
      OUTLINED_FUNCTION_61_0((uint64_t)&a16);
      OUTLINED_FUNCTION_96();
      OUTLINED_FUNCTION_28_0();
      if (v61)
      {
        OUTLINED_FUNCTION_11_2();
        while (1)
        {
          OUTLINED_FUNCTION_55_0();
          if (v61)
          {
            if ((v63 & 1) != 0) {
              break;
            }
          }

          OUTLINED_FUNCTION_71();
          if (!v61)
          {
            OUTLINED_FUNCTION_10_2();
            goto LABEL_31;
          }
        }

        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_12_2();
LABEL_31:
      OUTLINED_FUNCTION_9_2(v62);
      *(void *)(v65 + 8 * v64) = v60;
      OUTLINED_FUNCTION_27_1();
      if (v45) {
        goto LABEL_6;
      }
LABEL_7:
      if (__OFADD__(v46, 1LL)) {
        goto LABEL_40;
      }
      OUTLINED_FUNCTION_100();
      if (v49 == v50) {
        goto LABEL_33;
      }
      uint64_t v46 = v47;
      if (!*(void *)(a12 + 8 * v47))
      {
        uint64_t v46 = v47 + 1;
        if (v47 + 1 >= v48) {
          goto LABEL_33;
        }
        if (!*(void *)(a12 + 8 * v46))
        {
          OUTLINED_FUNCTION_78();
          if (v49 == v50)
          {
LABEL_33:
            OUTLINED_FUNCTION_13_2();
            uint64_t v36 = v67;
            if ((a14 & 1) != 0)
            {
              OUTLINED_FUNCTION_18_2();
              if (v49 != v50) {
                OUTLINED_FUNCTION_52_0(v66);
              }
              else {
                OUTLINED_FUNCTION_24_1(v66);
              }
              *(void *)(v37 + 16) = 0LL;
            }

            break;
          }

          if (!*(void *)(a12 + 8 * v51))
          {
            while (1)
            {
              uint64_t v46 = v51 + 1;
              if (__OFADD__(v51, 1LL)) {
                goto LABEL_41;
              }
              if (v46 >= v52) {
                goto LABEL_33;
              }
              ++v51;
              if (*(void *)(a12 + 8 * v46)) {
                goto LABEL_20;
              }
            }
          }

          uint64_t v46 = v51;
        }
      }

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)()
{
  if (v4)
  {
    OUTLINED_FUNCTION_36_1();
    uint64_t v7 = v6 & v5;
    OUTLINED_FUNCTION_84();
    uint64_t v24 = v0;
    uint64_t v25 = v8;
    OUTLINED_FUNCTION_53_0();
    uint64_t v9 = 0LL;
    if (!v7) {
      goto LABEL_4;
    }
LABEL_3:
    OUTLINED_FUNCTION_90();
    while (1)
    {
      OUTLINED_FUNCTION_75();
      uint64_t v17 = (__int128 *)(v16 + 40 * v15);
      if ((v3 & 1) != 0)
      {
        outlined init with take of LinkDialogIdProvider(v17, (uint64_t)v28);
      }

      else
      {
        outlined init with copy of SiriSuggestions.DisplayRepresentable((uint64_t)v17, (uint64_t)v28);
        OUTLINED_FUNCTION_59();
      }

      Hasher.init(_seed:)(v27, *(void *)(v3 + 40));
      OUTLINED_FUNCTION_61_0((uint64_t)v27);
      Hasher._finalize()();
      OUTLINED_FUNCTION_28_0();
      if (v18)
      {
        OUTLINED_FUNCTION_11_2();
        while (1)
        {
          OUTLINED_FUNCTION_55_0();
          if (v18)
          {
            if ((v20 & 1) != 0) {
              break;
            }
          }

          OUTLINED_FUNCTION_71();
          if (!v18)
          {
            OUTLINED_FUNCTION_10_2();
            goto LABEL_28;
          }
        }

        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_12_2();
LABEL_28:
      OUTLINED_FUNCTION_9_2(v19);
      outlined init with take of LinkDialogIdProvider(v28, v22 + 40 * v21);
      OUTLINED_FUNCTION_27_1();
      if (v7) {
        goto LABEL_3;
      }
LABEL_4:
      uint64_t v10 = v9 + 1;
      if (__OFADD__(v9, 1LL)) {
        goto LABEL_37;
      }
      if (v10 >= v25) {
        goto LABEL_30;
      }
      ++v9;
      if (!*(void *)(v26 + 8 * v10))
      {
        uint64_t v9 = v10 + 1;
        if (v10 + 1 >= v25) {
          goto LABEL_30;
        }
        if (!*(void *)(v26 + 8 * v9))
        {
          OUTLINED_FUNCTION_78();
          if (v13 == v14)
          {
LABEL_30:
            OUTLINED_FUNCTION_13_2();
            char v0 = v24;
            if ((v3 & 1) != 0)
            {
              OUTLINED_FUNCTION_18_2();
              if (v13 != v14) {
                OUTLINED_FUNCTION_52_0(v23);
              }
              else {
                OUTLINED_FUNCTION_24_1(v23);
              }
              *(void *)(v2 + 16) = 0LL;
            }

            break;
          }

          if (!*(void *)(v26 + 8 * v11))
          {
            while (1)
            {
              uint64_t v9 = v11 + 1;
              if (__OFADD__(v11, 1LL)) {
                goto LABEL_38;
              }
              if (v9 >= v12) {
                goto LABEL_30;
              }
              ++v11;
              if (*(void *)(v26 + 8 * v9)) {
                goto LABEL_16;
              }
            }
          }

          uint64_t v9 = v11;
        }
      }

LABEL_16:
      OUTLINED_FUNCTION_97();
    }
  }

  OUTLINED_FUNCTION_13_2();
  *char v0 = v3;
}

    uint64_t v6 = (v9 - 1) & v9;
  }

  unint64_t v31 = 0;
  char v32 = (unint64_t)(63 - v27) >> 6;
  while (++v29 != v32 || (v31 & 1) == 0)
  {
    uint64_t v33 = v29 == v32;
    if (v29 == v32) {
      uint64_t v29 = 0LL;
    }
    v31 |= v33;
    uint64_t v34 = *(void *)&v26[8 * v29];
    if (v34 != -1)
    {
      char v30 = __clz(__rbit64(~v34)) + (v29 << 6);
      goto LABEL_31;
    }
  }

  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

LABEL_18:
        ++v8;
        if (v11 == v7) {
          goto LABEL_27;
        }
      }

      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      if (a1 < 0) {
        uint64_t v17 = a1;
      }
      else {
        uint64_t v17 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v17);
      if (!v7) {
        goto LABEL_27;
      }
    }

    uint64_t v9 = *(id *)(a1 + 8 * v8 + 32);
    goto LABEL_7;
  }

    uint64_t v7 = (v14 - 1) & v14;
  }

  uint64_t v15 = v13 + 2;
  if (v15 >= v8)
  {
LABEL_19:
    swift_release(a2);
    Hasher._combine(_:)(v9);
    return;
  }

  char v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    uint64_t v10 = v15;
    goto LABEL_16;
  }

  while (1)
  {
    uint64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_19;
    }
    char v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_16;
    }
  }

    uint64_t v6 = (v13 - 1) & v13;
  }

  char v14 = v12 + 2;
  if (v14 >= v7)
  {
LABEL_19:
    swift_release(a2);
    Hasher._combine(_:)(v8);
    return;
  }

  char v13 = *(void *)(v24 + 8 * v14);
  if (v13)
  {
    uint64_t v9 = v14;
    goto LABEL_16;
  }

  while (1)
  {
    uint64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_19;
    }
    char v13 = *(void *)(v24 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_16;
    }
  }

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<LNSuggestedActionDialogParameterKey, String>);
  char v44 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v40 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v42 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v41 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain(v5);
    int64_t v14 = 0LL;
    uint64_t v43 = v5;
    if (!v11) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v15 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
    {
      char v20 = *(void **)(*(void *)(v5 + 48) + 8 * i);
      uint64_t v21 = (uint64_t *)(*(void *)(v5 + 56) + 16 * i);
      uint64_t v22 = *v21;
      uint64_t v23 = v21[1];
      if ((v44 & 1) == 0)
      {
        id v24 = v20;
        swift_bridgeObjectRetain(v23);
      }

      uint64_t v25 = *(void *)(v8 + 40);
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      uint64_t v28 = v27;
      Hasher.init(_seed:)(v45, v25);
      String.hash(into:)(v45, v26, v28);
      Swift::Int v29 = Hasher._finalize()();
      uint64_t result = swift_bridgeObjectRelease(v28);
      uint64_t v30 = -1LL << *(_BYTE *)(v8 + 32);
      unint64_t v31 = v29 & ~v30;
      unint64_t v32 = v31 >> 6;
      if (((-1LL << v31) & ~*(void *)(v12 + 8 * (v31 >> 6))) == 0)
      {
        char v34 = 0;
        unint64_t v35 = (unint64_t)(63 - v30) >> 6;
        while (++v32 != v35 || (v34 & 1) == 0)
        {
          BOOL v36 = v32 == v35;
          if (v32 == v35) {
            unint64_t v32 = 0LL;
          }
          v34 |= v36;
          uint64_t v37 = *(void *)(v12 + 8 * v32);
          if (v37 != -1)
          {
            unint64_t v33 = __clz(__rbit64(~v37)) + (v32 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        return result;
      }

      unint64_t v33 = __clz(__rbit64((-1LL << v31) & ~*(void *)(v12 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v12 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v33;
      *(void *)(*(void *)(v8 + 48) + 8 * v33) = v20;
      uint64_t v38 = (void *)(*(void *)(v8 + 56) + 16 * v33);
      *uint64_t v38 = v22;
      v38[1] = v23;
      ++*(void *)(v8 + 16);
      uint64_t v5 = v43;
      if (v11) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v17 = v14 + 1;
      if (__OFADD__(v14, 1LL)) {
        goto LABEL_42;
      }
      if (v17 >= v41) {
        goto LABEL_35;
      }
      unint64_t v18 = v42[v17];
      ++v14;
      if (!v18)
      {
        int64_t v14 = v17 + 1;
        if (v17 + 1 >= v41) {
          goto LABEL_35;
        }
        unint64_t v18 = v42[v14];
        if (!v18)
        {
          int64_t v19 = v17 + 2;
          if (v19 >= v41)
          {
LABEL_35:
            swift_release(v5);
            uint64_t v3 = v40;
            if ((v44 & 1) != 0)
            {
              uint64_t v39 = 1LL << *(_BYTE *)(v5 + 32);
              if (v39 >= 64) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0LL, (unint64_t)(v39 + 63) >> 6, v42);
              }
              else {
                *uint64_t v42 = -1LL << v39;
              }
              *(void *)(v5 + 16) = 0LL;
            }

            break;
          }

          unint64_t v18 = v42[v19];
          if (!v18)
          {
            while (1)
            {
              int64_t v14 = v19 + 1;
              if (__OFADD__(v19, 1LL)) {
                goto LABEL_43;
              }
              if (v14 >= v41) {
                goto LABEL_35;
              }
              unint64_t v18 = v42[v14];
              ++v19;
              if (v18) {
                goto LABEL_21;
              }
            }
          }

          int64_t v14 = v19;
        }
      }

LABEL_18:
      OUTLINED_FUNCTION_76();
    }
  }

  OUTLINED_FUNCTION_13_2();
  *uint64_t v4 = v3;
}

    uint64_t v5 = (v10 - 1) & v10;
    uint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
    uint64_t v4 = v11;
  }

  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

    int64_t v14 = 1LL;
    goto LABEL_20;
  }

  if (one-time initialization token for linkSuggestions != -1) {
    swift_once(&one-time initialization token for linkSuggestions, one-time initialization function for linkSuggestions);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = __swift_project_value_buffer(v5, (uint64_t)static Logger.linkSuggestions);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  uint64_t v8 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v7, v8)) {
    goto LABEL_18;
  }
  uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
  *(_WORD *)uint64_t v9 = 0;
  uint64_t v10 = "Device/locale supported by hybrid, donating App Shortcut phrases for SiriHelp";
LABEL_12:
  _os_log_impl(&dword_0, v7, v8, v10, v9, 2u);
  int64_t v14 = 1LL;
LABEL_17:
  swift_slowDealloc(v9, -1LL, -1LL);
LABEL_20:

  return v14;
}

    uint64_t v8 = (v14 - 1) & v14;
  }

  unint64_t v15 = v13 + 3;
  if (v15 >= v9) {
    return v3;
  }
  int64_t v14 = *(void *)(v23 + 8 * v15);
  if (v14)
  {
    uint64_t v4 = v15;
    goto LABEL_18;
  }

  while (1)
  {
    uint64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      return v3;
    }
    int64_t v14 = *(void *)(v23 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }

    uint64_t v9 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    uint64_t v12 = v17;
  }

  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    uint64_t v8 = (v14 - 1) & v14;
  }

  unint64_t v15 = v13 + 3;
  if (v15 >= v9) {
    return (uint64_t)v3;
  }
  int64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    uint64_t v4 = v15;
    goto LABEL_18;
  }

  while (1)
  {
    uint64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      return (uint64_t)v3;
    }
    int64_t v14 = *(void *)(v5 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }

uint64_t specialized UnsafeMutablePointer.assign(repeating:count:)(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }

  return result;
}

void outlined bridged method (ob) of @objc LNActionParameterMetadata.name.getter(void *a1)
{
  id v2 = [a1 name];

  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  }

  OUTLINED_FUNCTION_7();
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }

  return result;
}

uint64_t outlined init with copy of SiriSuggestions.DisplayRepresentable(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for LNActionParameterMetadata(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

void outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)( uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  OUTLINED_FUNCTION_3();
}

uint64_t outlined destroy of ActionParameter(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of ActionParameter(uint64_t a1, uint64_t a2)
{
  return a2;
}

  ;
}

void *OUTLINED_FUNCTION_1_2@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t OUTLINED_FUNCTION_2_2( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 55LL, 2LL, a7, 25LL, a9, a10, a11);
}

uint64_t OUTLINED_FUNCTION_3_2( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2LL, a7, 25LL, a9, a10, a11);
}

uint64_t OUTLINED_FUNCTION_4_2(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_8_1()
{
  return v0;
}

void OUTLINED_FUNCTION_9_2(unint64_t a1@<X8>)
{
  *(void *)(v4 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << a1;
  uint64_t v5 = (void *)(*(void *)(v1 + 48) + 16 * a1);
  *uint64_t v5 = v3;
  v5[1] = v2;
}

  ;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_13_2()
{
  return swift_release(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_17_2()
{
  *(void *)(v0 + 16) = 0LL;
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_22_1()
{
  return static _DictionaryStorage.resize(original:capacity:move:)(v1, v0, v2);
}

  ;
}

uint64_t OUTLINED_FUNCTION_24_1@<X0>(uint64_t a1@<X8>)
{
  return specialized UnsafeMutablePointer.assign(repeating:count:)(0LL, (unint64_t)(a1 + 63) >> 6, v1);
}

size_t OUTLINED_FUNCTION_25_1(void *a1)
{
  size_t result = _swift_stdlib_malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

void OUTLINED_FUNCTION_27_1()
{
}

  ;
}

void OUTLINED_FUNCTION_30_1(unint64_t a1@<X8>)
{
  *(void *)(v2 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << a1;
  uint64_t v5 = (void *)(*(void *)(v1 + 48) + 16 * a1);
  *uint64_t v5 = v4;
  v5[1] = v3;
}

uint64_t OUTLINED_FUNCTION_31_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_32_1(uint64_t a1)
{
  return swift_allocObject(a1, v1 * v2 + 32, 7LL);
}

uint64_t OUTLINED_FUNCTION_33_1(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

uint64_t OUTLINED_FUNCTION_34_1(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3LL);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_37_1(uint64_t a1, uint64_t a2)
{
  return static _DictionaryStorage.resize(original:capacity:move:)(a1, a2, v2);
}

  ;
}

uint64_t OUTLINED_FUNCTION_39_1()
{
  return 0LL;
}

  ;
}

BOOL OUTLINED_FUNCTION_43_1(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_44_1()
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(void *)(v1 - 184), v0, (uint64_t *)(v1 - 128));
}

void OUTLINED_FUNCTION_45_1(unint64_t a1@<X8>)
{
  *(void *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << a1;
}

  ;
}

uint64_t OUTLINED_FUNCTION_47_0()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_48_0()
{
  return swift_errorRelease(v0);
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_52_0(char a1@<W8>)
{
  *uint64_t v1 = -1LL << a1;
}

uint64_t OUTLINED_FUNCTION_53_0()
{
  return swift_retain(v0);
}

  ;
}

void OUTLINED_FUNCTION_56_0(uint64_t a1, uint64_t a2)
{
}

  ;
}

uint64_t OUTLINED_FUNCTION_58_0(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2LL);
}

uint64_t OUTLINED_FUNCTION_59_0()
{
  return swift_bridgeObjectRelease(v0);
}

void *OUTLINED_FUNCTION_60_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, *(void *)(v5 + 40));
}

uint64_t OUTLINED_FUNCTION_61_0(uint64_t a1)
{
  return String.hash(into:)(a1, v2, v1);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_64_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_69(uint64_t a1)
{
  *(void *)(v1 - 168) = a1;
  return v1 - 168;
}

uint64_t OUTLINED_FUNCTION_70()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_72()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 168, v1, v0);
}

uint64_t OUTLINED_FUNCTION_73()
{
  return 0LL;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

BOOL OUTLINED_FUNCTION_80(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_81(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

uint64_t OUTLINED_FUNCTION_83()
{
  return v0 + 32;
}

  ;
}

uint64_t OUTLINED_FUNCTION_85()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_86(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return String.hash(into:)(va, v6, v5);
}

uint64_t OUTLINED_FUNCTION_88()
{
  return v0;
}

  ;
}

uint64_t OUTLINED_FUNCTION_91()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_92(uint64_t a1)
{
  *(void *)(v1 - 168) = a1;
  return v1 - 168;
}

  ;
}

uint64_t OUTLINED_FUNCTION_94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_arrayDestroy(v3, 1LL, a3);
}

void OUTLINED_FUNCTION_95()
{
}

Swift::Int OUTLINED_FUNCTION_96()
{
  return Hasher._finalize()();
}

  ;
}

uint64_t OUTLINED_FUNCTION_98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_arrayDestroy(a1, 2LL, a3);
}

  ;
}

void OUTLINED_FUNCTION_101(uint64_t a1)
{
}

uint64_t OUTLINED_FUNCTION_102()
{
  return swift_bridgeObjectRelease(v0);
}

void *specialized Dictionary.init<A>(_:uniquingKeysWith:)( uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, void **))
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t v6 = OUTLINED_FUNCTION_107();
    uint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)(v6);
  }

  else
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v10 = v7;
  a3(a1, 1LL, &v10);
  uint64_t v8 = v10;
  if (v3) {
    swift_release(v10);
  }
  return v8;
}

{
  uint64_t v3;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v10;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)(v6);
  }

  else
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v10 = v7;
  a3(a1, 1LL, &v10);
  uint64_t v8 = v10;
  if (v3) {
    swift_release(v10);
  }
  return v8;
}

uint64_t specialized LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[9] = a5;
  v6[10] = v5;
  v6[7] = a1;
  v6[8] = a4;
  return swift_task_switch( specialized LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:),  0LL,  0LL);
}

uint64_t specialized LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:)()
{
  id v1 = [*(id *)(v0 + 56) identifier];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v4 = v3;

  *(void *)(v0 + 88) = v2;
  *(void *)(v0 + 96) = v4;
  uint64_t v5 = (void *)swift_task_alloc(unk_4E9E4);
  *(void *)(v0 + 104) = v5;
  *uint64_t v5 = v0;
  v5[1] = specialized LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:);
  return v7(*(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  *(void *)(v2 + 112) = v1;
  *(void *)(v2 + 120) = v0;
  OUTLINED_FUNCTION_49_1(v3);
  OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_11_1(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_s *v4;
  uint64_t v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_s *v16;
  uint64_t v17;
  os_log_type_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v1 = *(void *)(v0 + 112);
  if (v1)
  {
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
    }
    uint64_t v2 = *(void *)(v0 + 96);
    uint64_t v3 = OUTLINED_FUNCTION_45();
    uint64_t v4 = (os_log_s *)__swift_project_value_buffer(v3, (uint64_t)static Logger.appIntentsSuggestions);
    OUTLINED_FUNCTION_58_0(v2);
    uint64_t v5 = OUTLINED_FUNCTION_58_0(v1);
    Logger.logObject.getter(v5);
    uint64_t v6 = OUTLINED_FUNCTION_106();
    uint64_t v7 = OUTLINED_FUNCTION_43_1(v6);
    uint64_t v8 = *(void *)(v0 + 96);
    if (v7)
    {
      unint64_t v31 = *(void *)(v0 + 88);
      uint64_t v9 = OUTLINED_FUNCTION_16_0(22LL);
      unint64_t v32 = OUTLINED_FUNCTION_16_0(64LL);
      unint64_t v33 = v32;
      *(_DWORD *)uint64_t v9 = 136315394;
      uint64_t v10 = OUTLINED_FUNCTION_70();
      unint64_t v11 = Dictionary.description.getter( v10,  &type metadata for String,  &type metadata for ActionParameter,  &protocol witness table for String);
      char v13 = v12;
      OUTLINED_FUNCTION_59_0();
      *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v33);
      OUTLINED_FUNCTION_90_0(v0 + 40, v0 + 48);
      OUTLINED_FUNCTION_88_0();
      OUTLINED_FUNCTION_51(v1);
      *(_WORD *)(v9 + 12) = 2080;
      OUTLINED_FUNCTION_59();
      *(void *)(v0 + 48) = OUTLINED_FUNCTION_60_1(v31, v14, &v33);
      OUTLINED_FUNCTION_85_0(v0 + 48, v0 + 56);
      OUTLINED_FUNCTION_34_1(v8);
      OUTLINED_FUNCTION_81(&dword_0, v4, (os_log_type_t)v4, "Got parameters: %s for %s", (uint8_t *)v9);
      OUTLINED_FUNCTION_98(v32, v15, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_3_0(v32);
      OUTLINED_FUNCTION_3_0(v9);
    }

    else
    {
      OUTLINED_FUNCTION_51(v1);
      OUTLINED_FUNCTION_51(v8);
    }

    uint64_t v27 = *(void *)(v0 + 112);
    uint64_t v28 = *(void *)(v0 + 88);
    Swift::Int v29 = *(void *)(v0 + 96);
  }

  else
  {
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
    }
    uint64_t v16 = *(os_log_s **)(v0 + 96);
    int64_t v17 = OUTLINED_FUNCTION_45();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.appIntentsSuggestions);
    OUTLINED_FUNCTION_26_1();
    OUTLINED_FUNCTION_82_0();
    unint64_t v18 = OUTLINED_FUNCTION_38_2();
    int64_t v19 = OUTLINED_FUNCTION_43_1(v18);
    char v20 = *(void *)(v0 + 96);
    if (v19)
    {
      uint64_t v21 = *(void *)(v0 + 88);
      uint64_t v22 = (_DWORD *)OUTLINED_FUNCTION_16_0(12LL);
      uint64_t v23 = OUTLINED_FUNCTION_16_0(32LL);
      unint64_t v33 = v23;
      *uint64_t v22 = 136315138;
      OUTLINED_FUNCTION_83_0();
      *(void *)(v0 + 32) = OUTLINED_FUNCTION_79_0(v21, v24, &v33);
      OUTLINED_FUNCTION_89(v0 + 32, v0 + 40);
      OUTLINED_FUNCTION_34_1(v20);
      OUTLINED_FUNCTION_11_3(&dword_0, v16, v25, "Not all mandatory parameters for: %s could be determined");
      OUTLINED_FUNCTION_9_3(v23, v26, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_3_0(v23);
      OUTLINED_FUNCTION_3_0((uint64_t)v22);
    }

    else
    {
      OUTLINED_FUNCTION_51(*(void *)(v0 + 96));
    }

    OUTLINED_FUNCTION_16_1();
  }

  return OUTLINED_FUNCTION_31_1(v28, v29, v27, *(uint64_t (**)(void))(v0 + 8));
}

{
  void *v0;
  os_log_type_t v1;
  os_log_s *v2;
  uint64_t v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
  }
  uint64_t v2 = (os_log_s *)v0[15];
  uint64_t v3 = OUTLINED_FUNCTION_45();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.appIntentsSuggestions);
  swift_errorRetain(v2);
  swift_errorRetain(v2);
  OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_82_0();
  uint64_t v4 = OUTLINED_FUNCTION_38_2();
  uint64_t v5 = OUTLINED_FUNCTION_43_1(v4);
  uint64_t v6 = v0[15];
  uint64_t v7 = v0[12];
  if (v5)
  {
    char v20 = v0[11];
    uint64_t v8 = OUTLINED_FUNCTION_16_0(22LL);
    uint64_t v9 = (void *)OUTLINED_FUNCTION_16_0(8LL);
    uint64_t v21 = OUTLINED_FUNCTION_16_0(32LL);
    uint64_t v22 = v21;
    *(_DWORD *)uint64_t v8 = 138412546;
    swift_errorRetain(v6);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(v6);
    v0[2] = v10;
    OUTLINED_FUNCTION_90_0((uint64_t)(v0 + 2), (uint64_t)(v0 + 3));
    *uint64_t v9 = v10;
    OUTLINED_FUNCTION_48_0();
    OUTLINED_FUNCTION_48_0();
    *(_WORD *)(v8 + 12) = 2080;
    OUTLINED_FUNCTION_83_0();
    v0[3] = OUTLINED_FUNCTION_79_0(v20, v11, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v8 + 14);
    OUTLINED_FUNCTION_34_1(v7);
    OUTLINED_FUNCTION_81(&dword_0, v2, v1, "Unable to fetch parameter info: %@ for: %s", (uint8_t *)v8);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_9_3((uint64_t)v9, v13, v12);
    OUTLINED_FUNCTION_3_0((uint64_t)v9);
    OUTLINED_FUNCTION_9_3(v21, v14, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_3_0(v21);
    OUTLINED_FUNCTION_3_0(v8);

    OUTLINED_FUNCTION_48_0();
  }

  else
  {
    OUTLINED_FUNCTION_48_0();
    OUTLINED_FUNCTION_48_0();
    OUTLINED_FUNCTION_48_0();
    OUTLINED_FUNCTION_51(v7);
  }

  OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_31_1(v15, v16, v17, v18);
}

uint64_t specialized LinkClientResolver.getParameters(for:withParameters:andSalientEntities:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[87] = a3;
  v4[86] = a2;
  v4[85] = a1;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v4[88] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[89] = v6;
  v4[90] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v4[80] = v3;
  return swift_task_switch( specialized LinkClientResolver.getParameters(for:withParameters:andSalientEntities:),  0LL,  0LL);
}

uint64_t specialized LinkClientResolver.getParameters(for:withParameters:andSalientEntities:)()
{
  id v1 = (void *)(v0 + 664);
  __int128 v123 = *(_OWORD *)(v0 + 688);
  id v2 = [*(id *)(v0 + 680) parameters];
  type metadata accessor for LNActionParameterMetadata( 0LL,  &lazy cache variable for type metadata for LNActionParameterMetadata,  &OBJC_CLASS___LNActionParameterMetadata_ptr);
  uint64_t v3 = OUTLINED_FUNCTION_107();
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  uint64_t v6 = swift_task_alloc(48LL);
  *(void *)(v6 + ++*(void *)(v0 + 16) = v0 + 640;
  *(_OWORD *)(v6 + 24) = v123;
  uint64_t v110 = v0 + 664;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo25LNActionParameterMetadataCG_AG_18SiriSuggestionsKit0gH0O20DisplayRepresentable_pSgts5NeverOTg5( (void (*)(_OWORD *__return_ptr, id *))partial apply for specialized closure #1 in LinkClientResolver.getParameters(for:withParameters:andSalientEntities:),  v6,  v5);
  uint64_t v8 = v7;
  OUTLINED_FUNCTION_8();
  swift_task_dealloc(v6);
  uint64_t v9 = _swiftEmptyArrayStorage;
  v127 = _swiftEmptyArrayStorage;
  unint64_t v10 = *(void *)(v8 + 16);
  OUTLINED_FUNCTION_70();
  uint64_t v120 = v8;
  v122 = (void *)v0;
  unint64_t v124 = v10;
  if (v10)
  {
    unint64_t v10 = 0LL;
    unint64_t v11 = (__int128 *)(v0 + 128);
    uint64_t v12 = v8 + 32;
    uint64_t v112 = v0 + 184;
    uint64_t v13 = v0 + 136;
    uint64_t v115 = v0 + 232;
    uint64_t v118 = v0 + 224;
    int64_t v14 = &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?);
    while (v10 < *(void *)(v8 + 16))
    {
      outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)( v12,  (uint64_t)v11,  &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
      unint64_t v15 = (void *)v122[16];
      v122[22] = v15;
      outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)( v13,  v112,  &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
      uint64_t v6 = (uint64_t)[v15 isOptional];
      outlined destroy of CoreSignalTypes?( v112,  &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
      id v1 = (void *)v122[16];
      v122[28] = v1;
      outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)( v13,  v115,  &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
      uint64_t v16 = v122[32];
      id v17 = v1;
      outlined destroy of CoreSignalTypes?( v118,  &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
      if ((v6 & 1) != 0 || v16)
      {
        outlined destroy of CoreSignalTypes?( (uint64_t)v11,  &demangling cache variable for type metadata for (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?));
      }

      else
      {
        __int128 v18 = v11[1];
        __int128 v128 = *v11;
        __int128 v129 = v18;
        __int128 v130 = v11[2];
        if ((OUTLINED_FUNCTION_86_0() & 1) == 0)
        {
          uint64_t v6 = (uint64_t)&v127;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v9 = v127;
        }

        unint64_t v19 = v9[2];
        id v1 = (void *)(v19 + 1);
        if (v19 >= v9[3] >> 1)
        {
          uint64_t v6 = (uint64_t)&v127;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v9 = v127;
        }

        __int128 v9[2] = v1;
        char v20 = &v9[6 * v19];
        __int128 v21 = v128;
        __int128 v22 = v130;
        v20[3] = v129;
        v20[4] = v22;
        v20[2] = v21;
      }

      ++v10;
      v12 += 48LL;
      uint64_t v8 = v120;
      if (v124 == v10) {
        goto LABEL_13;
      }
    }

    __break(1u);
    goto LABEL_54;
  }

void specialized closure #1 in LinkClientResolver.getParameters(for:withParameters:andSalientEntities:)( void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  *a4 = a1;
  specialized LinkClientResolver.getParameter(for:withParameters:andSalientEntities:)( a1,  a2,  a3,  (uint64_t)(a4 + 1));
}

void specialized LinkClientResolver.getParameter(for:withParameters:andSalientEntities:)( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v86 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RetrievedContext?);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for RetrievedContext(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  __int128 v82 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v72 - v15;
  __chkstk_darwin(v14);
  __int128 v18 = (char *)&v72 - v17;
  id v19 = [a1 name];
  __int128 v83 = v16;
  uint64_t v84 = v11;
  if (v19)
  {
    char v20 = v19;
    uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    unint64_t v22 = v21;
  }

  else
  {
    uint64_t v85 = 0LL;
    unint64_t v22 = 0LL;
  }

  uint64_t v23 = (os_log_s *)[a1 valueType];
  if (!v22)
  {
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    uint64_t v25 = __swift_project_value_buffer(v24, (uint64_t)static Logger.appIntentsSuggestions);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl(&dword_0, v26, v27, "Unknown parameter name", v28, 2u);
      swift_slowDealloc(v28, -1LL, -1LL);
      uint64_t v29 = v23;
    }

    else
    {
      uint64_t v29 = v26;
      uint64_t v26 = v23;
    }

    goto LABEL_17;
  }

  swift_bridgeObjectRetain(v22);
  specialized Dictionary.subscript.getter(v85, v22, a2, (uint64_t)&v87);
  swift_bridgeObjectRelease(v22);
  if (v88)
  {
    swift_bridgeObjectRelease(v22);

    outlined init with take of LinkDialogIdProvider(&v87, (uint64_t)v89);
    outlined init with take of LinkDialogIdProvider(v89, v86);
    return;
  }

  outlined destroy of CoreSignalTypes?( (uint64_t)&v87,  &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
  id v30 = -[os_log_s description](v23, "description");
  uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  unint64_t v32 = v31;

  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
  }
  uint64_t v33 = type metadata accessor for Logger(0LL);
  uint64_t v34 = __swift_project_value_buffer(v33, (uint64_t)static Logger.appIntentsSuggestions);
  swift_bridgeObjectRetain_n(v22, 2LL);
  swift_bridgeObjectRetain_n(v32, 2LL);
  uint64_t v35 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v79 = v34;
  uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  unint64_t v80 = v36;
  int v76 = v37;
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = swift_slowAlloc(32LL, -1LL);
    uint64_t v74 = swift_slowAlloc(96LL, -1LL);
    *(void *)&v89[0] = v74;
    *(_DWORD *)uint64_t v38 = 136315650;
    __int128 v77 = v18;
    swift_bridgeObjectRetain(v22);
    *(void *)&__int128 v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v22, (uint64_t *)v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, (char *)&v87 + 8, v38 + 4);
    swift_bridgeObjectRelease_n(v22, 3LL);
    uint64_t v75 = v10;
    *(_WORD *)(v38 + 12) = 2080;
    swift_bridgeObjectRetain(v32);
    uint64_t v39 = v81;
    *(void *)&__int128 v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v32, (uint64_t *)v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, (char *)&v87 + 8, v38 + 14);
    swift_bridgeObjectRelease_n(v32, 3LL);
    *(_WORD *)(v38 + 22) = 2080;
    uint64_t v73 = v38 + 24;
    swift_bridgeObjectRetain(a3);
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RetrievedContext]);
    uint64_t v41 = Dictionary.Keys.description.getter(a3, &type metadata for String, v40, &protocol witness table for String);
    __int128 v78 = v23;
    uint64_t v42 = v41;
    unint64_t v44 = v43;
    swift_bridgeObjectRelease(a3);
    __int128 v18 = v77;
    *(void *)&__int128 v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, (uint64_t *)v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, (char *)&v87 + 8, v73);
    swift_bridgeObjectRelease_n(a3, 2LL);
    unint64_t v45 = v44;
    uint64_t v10 = v75;
    swift_bridgeObjectRelease(v45);
    uint64_t v46 = v80;
    _os_log_impl( &dword_0,  v80,  (os_log_type_t)v76,  "determining parater - %s paramType - %s from andSalientEntities Keys - %s",  (uint8_t *)v38,  0x20u);
    uint64_t v47 = v74;
    swift_arrayDestroy(v74, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1LL, -1LL);
    swift_slowDealloc(v38, -1LL, -1LL);

    uint64_t v23 = v78;
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
    swift_bridgeObjectRelease_n(v32, 2LL);
    swift_bridgeObjectRelease_n(v22, 2LL);
    uint64_t v39 = v81;
  }

  swift_bridgeObjectRetain(v32);
  uint64_t v49 = specialized Dictionary.subscript.getter(v39, v32, a3);
  swift_bridgeObjectRelease(v32);
  uint64_t v50 = v39;
  if (!v49)
  {
LABEL_23:
    swift_bridgeObjectRetain(v22);
    uint64_t v52 = swift_bridgeObjectRetain(v32);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v52);
    os_log_type_t v53 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v26, v53))
    {

      swift_bridgeObjectRelease_n(v32, 2LL);
      swift_bridgeObjectRelease_n(v22, 2LL);

      goto LABEL_18;
    }

    uint64_t v54 = swift_slowAlloc(22LL, -1LL);
    uint64_t v55 = swift_slowAlloc(64LL, -1LL);
    *(void *)&v89[0] = v55;
    *(_DWORD *)uint64_t v54 = 136315394;
    swift_bridgeObjectRetain(v22);
    *(void *)&__int128 v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v22, (uint64_t *)v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, (char *)&v87 + 8, v54 + 4);
    swift_bridgeObjectRelease_n(v22, 3LL);
    *(_WORD *)(v54 + 12) = 2080;
    swift_bridgeObjectRetain(v32);
    *(void *)&__int128 v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v32, (uint64_t *)v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, (char *)&v87 + 8, v54 + 14);
    swift_bridgeObjectRelease_n(v32, 3LL);
    _os_log_impl(&dword_0, v26, v53, "No parameter available to set for %s, of type: %s", (uint8_t *)v54, 0x16u);
    swift_arrayDestroy(v55, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1LL, -1LL);
    swift_slowDealloc(v54, -1LL, -1LL);

LABEL_17:
LABEL_18:
    uint64_t v48 = (_OWORD *)v86;
    *(void *)(v86 + 32) = 0LL;
    *uint64_t v48 = 0u;
    v48[1] = 0u;
    return;
  }

  *(void *)&v89[0] = v49;
  specialized MutableCollection<>.shuffle<A>(using:)();
  uint64_t v51 = *(void *)&v89[0];
  specialized Collection.first.getter(*(uint64_t *)&v89[0], (uint64_t)v9);
  swift_release(v51);
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1LL, v10) == 1)
  {
    outlined destroy of CoreSignalTypes?( (uint64_t)v9,  &demangling cache variable for type metadata for RetrievedContext?);
    goto LABEL_23;
  }

  __int128 v78 = v23;
  uint64_t v56 = v84;
  unint64_t v80 = *(os_log_s **)(v84 + 32);
  ((void (*)(char *, char *, uint64_t))v80)(v18, v9, v10);
  uint64_t v57 = v18;
  uint64_t v58 = *(void (**)(char *))(v56 + 16);
  uint64_t v59 = v83;
  __int128 v77 = v57;
  v58(v83);
  swift_bridgeObjectRetain(v22);
  uint64_t v60 = swift_bridgeObjectRetain(v32);
  id v61 = (os_log_s *)Logger.logObject.getter(v60);
  os_log_type_t v62 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v61, v62))
  {
    uint64_t v63 = swift_slowAlloc(32LL, -1LL);
    uint64_t v79 = swift_slowAlloc(96LL, -1LL);
    *(void *)&v89[0] = v79;
    *(_DWORD *)uint64_t v63 = 136315650;
    swift_bridgeObjectRetain(v22);
    *(void *)&__int128 v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v22, (uint64_t *)v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, (char *)&v87 + 8, v63 + 4);
    swift_bridgeObjectRelease_n(v22, 3LL);
    *(_WORD *)(v63 + 12) = 2080;
    swift_bridgeObjectRetain(v32);
    *(void *)&__int128 v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v32, (uint64_t *)v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, (char *)&v87 + 8, v63 + 14);
    swift_bridgeObjectRelease_n(v32, 3LL);
    *(_WORD *)(v63 + 22) = 2080;
    uint64_t v64 = v82;
    ((void (*)(char *, char *, uint64_t))v58)(v82, v59, v10);
    uint64_t v65 = String.init<A>(describing:)(v64, v10);
    unint64_t v67 = v66;
    *(void *)&__int128 v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, (uint64_t *)v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, (char *)&v87 + 8, v63 + 24);
    swift_bridgeObjectRelease(v67);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v59, v10);
    _os_log_impl( &dword_0,  v61,  v62,  "Setting parameter %s, of type: %s to %s using salient entities",  (uint8_t *)v63,  0x20u);
    uint64_t v68 = v79;
    swift_arrayDestroy(v79, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v68, -1LL, -1LL);
    swift_slowDealloc(v63, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v32, 2LL);
    swift_bridgeObjectRelease_n(v22, 2LL);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v59, v10);
  }

  uint64_t v69 = (void *)v86;
  *(void *)(v86 + 24) = v10;
  lazy protocol witness table accessor for type MetaDataSourcedAppIntentResolver and conformance MetaDataSourcedAppIntentResolver( &lazy protocol witness table cache variable for type RetrievedContext and conformance RetrievedContext,  255LL,  (void (*)(uint64_t))&type metadata accessor for RetrievedContext);
  v69[4] = v70;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v69);
  ((void (*)(void *, char *, uint64_t))v80)(boxed_opaque_existential_1, v77, v10);
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v23 = v29[1];
  int64_t v7 = v29[3];
  unint64_t v8 = v29[4];
  int64_t v24 = (unint64_t)(v29[2] + 64LL) >> 6;
  uint64_t v25 = v29[0];
  swift_bridgeObjectRetain(a1);
  uint64_t v9 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v7 << 6);
      goto LABEL_15;
    }

    int64_t v12 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      break;
    }
    if (v12 >= v24) {
      goto LABEL_29;
    }
    unint64_t v13 = *(void *)(v23 + 8 * v12);
    if (!v13)
    {
      int64_t v14 = v7 + 2;
      if (v7 + 2 >= v24) {
        goto LABEL_29;
      }
      unint64_t v13 = *(void *)(v23 + 8 * v14);
      if (v13) {
        goto LABEL_13;
      }
      int64_t v14 = v7 + 3;
      if (v7 + 3 >= v24) {
        goto LABEL_29;
      }
      unint64_t v13 = *(void *)(v23 + 8 * v14);
      if (v13) {
        goto LABEL_13;
      }
      int64_t v14 = v7 + 4;
      if (v7 + 4 >= v24) {
        goto LABEL_29;
      }
      unint64_t v13 = *(void *)(v23 + 8 * v14);
      if (v13)
      {
LABEL_13:
        int64_t v12 = v14;
      }

      else
      {
        int64_t v12 = v7 + 5;
        if (v7 + 5 >= v24) {
          goto LABEL_29;
        }
        unint64_t v13 = *(void *)(v23 + 8 * v12);
        if (!v13)
        {
          int64_t v20 = v7 + 6;
          while (v20 < v24)
          {
            unint64_t v13 = *(void *)(v23 + 8 * v20++);
            if (v13)
            {
              int64_t v12 = v20 - 1;
              goto LABEL_14;
            }
          }

LABEL_29:
          swift_bridgeObjectRelease(a3);
          swift_release(v25);
          return;
        }
      }
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

LABEL_14:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v12 << 6);
    int64_t v7 = v12;
LABEL_15:
    id v30 = *(void **)(*(void *)(v25 + 56) + 8 * v11);
    uint64_t v15 = v30;
    closure #2 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:)( &v30,  a2,  a3,  &v27);
    if (v3)
    {
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v9);
      swift_release(v25);

      return;
    }

    if ((void)v28)
    {
      __int128 v26 = v28;
      uint64_t v16 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v9 = v21;
      }

      unint64_t v17 = v9[2];
      __int128 v18 = v26;
      if (v17 >= v9[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        __int128 v18 = v26;
        uint64_t v9 = v22;
      }

      __int128 v9[2] = v17 + 1;
      id v19 = &v9[3 * v17];
      v19[4] = v16;
      *(_OWORD *)(v19 + 5) = v18;
    }
  }

  __break(1u);
}

  id v19 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v19 + 48) + 8 * a2) = a1;
  int64_t v20 = *(void *)(v19 + 16);
  unint64_t v21 = __OFADD__(v20, 1LL);
  unint64_t v22 = v20 + 1;
  if (v21) {
    __break(1u);
  }
  else {
    *(void *)(v19 + ++*(void *)(v0 + 16) = v22;
  }
}

  ;
}

void MetaDataSourcedAppIntentResolver.linkClient.getter(uint64_t a1@<X8>)
{
}

void MetaDataSourcedAppIntentResolver.toolClient.getter(uint64_t a1@<X8>)
{
}

uint64_t MetaDataSourcedAppIntentResolver.resolverTypeOperand.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  OUTLINED_FUNCTION_26_1();
  return v1;
}

uint64_t MetaDataSourcedAppIntentResolver.__allocating_init(linkClient:toolClient:)( __int128 *a1, __int128 *a2)
{
  uint64_t v5 = OUTLINED_FUNCTION_1(v2, 112LL);
  MetaDataSourcedAppIntentResolver.init(linkClient:toolClient:)(a1, a2);
  return v5;
}

void MetaDataSourcedAppIntentResolver.init(linkClient:toolClient:)(__int128 *a1, __int128 *a2)
{
  *(void *)(v2 + 96) = 0xD000000000000017LL;
  *(void *)(v2 + 104) = 0x800000000003E670LL;
  outlined init with take of LinkDialogIdProvider(a1, v2 + 16);
  outlined init with take of LinkDialogIdProvider(a2, v2 + 56);
  OUTLINED_FUNCTION_3();
}

uint64_t static MetaDataSourcedAppIntentResolver.disruptsUserFlow(appIntentDetails:environmentSnapshot:)( uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = OUTLINED_FUNCTION_54_0();
  uint64_t valid = EnvironmentSnapshot.getValidOpenAppIds()(v7);
  uint64_t v9 = valid;
  uint64_t v10 = *(void *)(valid + 16);
  if (!v10) {
    goto LABEL_17;
  }
  uint64_t v11 = *(void *)(valid + 32);
  uint64_t v12 = *(void *)(v9 + 40);
  BOOL v13 = v11 == a1 && v12 == a2;
  if (v13 || (uint64_t result = OUTLINED_FUNCTION_72_0(v11, v12), (result & 1) != 0))
  {
LABEL_7:
    OUTLINED_FUNCTION_2();
    return 0LL;
  }

  if (v10 == 1)
  {
LABEL_17:
    OUTLINED_FUNCTION_2();
    return ([a3 openAppWhenRun] & 1) != 0;
  }

  uint64_t v15 = (uint64_t *)(v9 + 56);
  uint64_t v16 = 1LL;
  while (1)
  {
    uint64_t v17 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    uint64_t v18 = *(v15 - 1);
    uint64_t v19 = *v15;
    if (v18 == a1 && v19 == a2) {
      goto LABEL_7;
    }
    uint64_t result = OUTLINED_FUNCTION_72_0(v18, v19);
    if ((result & 1) != 0) {
      goto LABEL_7;
    }
    v15 += 2;
    ++v16;
    if (v17 == v10) {
      goto LABEL_17;
    }
  }

  __break(1u);
  return result;
}

uint64_t MetaDataSourcedAppIntentResolver.getSuggestionDialogFromTool(toolId:parametersToolValue:siriLocale:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[8] = a3;
  void v4[9] = v3;
  v4[6] = a1;
  v4[7] = a2;
  return OUTLINED_FUNCTION_22((uint64_t)MetaDataSourcedAppIntentResolver.getSuggestionDialogFromTool(toolId:parametersToolValue:siriLocale:));
}

uint64_t MetaDataSourcedAppIntentResolver.getSuggestionDialogFromTool(toolId:parametersToolValue:siriLocale:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22)
{
  a21 = v23;
  a22 = v24;
  a20 = v22;
  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
  }
  uint64_t v25 = v22[7];
  __int128 v26 = (os_log_s *)v22[8];
  uint64_t v27 = OUTLINED_FUNCTION_45();
  v22[10] = __swift_project_value_buffer(v27, (uint64_t)static Logger.appIntentsSuggestions);
  OUTLINED_FUNCTION_58_0(v25);
  OUTLINED_FUNCTION_58_0((uint64_t)v26);
  OUTLINED_FUNCTION_82_0();
  os_log_type_t v28 = OUTLINED_FUNCTION_32_2();
  BOOL v29 = OUTLINED_FUNCTION_7_2(v28);
  uint64_t v31 = v22[7];
  uint64_t v30 = v22[8];
  if (v29)
  {
    a9 = v22 + 4;
    uint64_t v32 = OUTLINED_FUNCTION_16_0(22LL);
    a10 = OUTLINED_FUNCTION_16_0(64LL);
    a11 = a10;
    *(_DWORD *)uint64_t v32 = 136315394;
    uint64_t v33 = OUTLINED_FUNCTION_47_0();
    v22[4] = OUTLINED_FUNCTION_44_2(v33, v34, &a11);
    OUTLINED_FUNCTION_90_0((uint64_t)(v22 + 4), (uint64_t)(v22 + 5));
    OUTLINED_FUNCTION_34_1(v31);
    *(_WORD *)(v32 + 12) = 2080;
    uint64_t v35 = OUTLINED_FUNCTION_97_0();
    uint64_t v36 = OUTLINED_FUNCTION_40_2();
    Dictionary.description.getter(v36, &type metadata for String, v35, &protocol witness table for String);
    uint64_t v37 = OUTLINED_FUNCTION_57();
    v22[5] = OUTLINED_FUNCTION_46_1(v37, v38, &a11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v22 + 5, v22 + 6, v32 + 14);
    OUTLINED_FUNCTION_70_0();
    OUTLINED_FUNCTION_51(v30);
    OUTLINED_FUNCTION_81( &dword_0,  v26,  (os_log_type_t)v25,  "Fetching parameter summary for tool - %s with parametersToolValue - %s",  (uint8_t *)v32);
    OUTLINED_FUNCTION_98(a10, v39, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_3_0(a10);
    OUTLINED_FUNCTION_3_0(v32);
  }

  else
  {
    OUTLINED_FUNCTION_51(v22[7]);
    OUTLINED_FUNCTION_51(v30);
  }

  uint64_t v40 = (void *)v22[9];
  uint64_t v41 = v40[11];
  OUTLINED_FUNCTION_65_0(v40 + 7, v40[10]);
  uint64_t v42 = (void *)OUTLINED_FUNCTION_50_1(*(void *)(v41 + 8));
  v22[11] = v42;
  *uint64_t v42 = v22;
  v42[1] = MetaDataSourcedAppIntentResolver.getSuggestionDialogFromTool(toolId:parametersToolValue:siriLocale:);
  OUTLINED_FUNCTION_29_1();
  return v48(v43, v44, v45, v46, v47, v48, v49, v50, a9, a10, a11, a12, a13, a14);
}

uint64_t MetaDataSourcedAppIntentResolver.getSuggestionDialogFromTool(toolId:parametersToolValue:siriLocale:)()
{
  v3[12] = v1;
  v3[13] = v2;
  v3[14] = v4;
  OUTLINED_FUNCTION_49_1(v5);
  if (v0) {
    swift_errorRelease(v0);
  }
  OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_11_1(v6, v7, v8);
}

uint64_t MetaDataSourcedAppIntentResolver.getSuggestionDialogFromTool(toolId:parametersToolValue:siriLocale:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  a21 = v24;
  a22 = v25;
  a20 = v22;
  uint64_t v26 = *(void *)(v22 + 104);
  if (v26)
  {
    uint64_t v27 = *(void *)(v22 + 112);
    os_log_type_t v28 = *(os_log_s **)(v22 + 80);
    swift_bridgeObjectRetain_n(*(void *)(v22 + 104), 4LL);
    uint64_t v29 = swift_bridgeObjectRetain_n(v27, 4LL);
    Logger.logObject.getter(v29);
    os_log_type_t v30 = OUTLINED_FUNCTION_32_2();
    if (OUTLINED_FUNCTION_43_1(v30))
    {
      uint64_t v31 = *(void *)(v22 + 96);
      uint64_t v32 = OUTLINED_FUNCTION_16_0(22LL);
      a10 = OUTLINED_FUNCTION_16_0(64LL);
      a11 = a10;
      *(_DWORD *)uint64_t v32 = 136315394;
      OUTLINED_FUNCTION_35();
      *(void *)(v22 + ++*(void *)(v0 + 16) = OUTLINED_FUNCTION_61_1(v31, v33, &a11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v22 + 16, v22 + 24, v32 + 4);
      OUTLINED_FUNCTION_34_1(v26);
      OUTLINED_FUNCTION_51(v27);
      *(_WORD *)(v32 + 12) = 2080;
      uint64_t v34 = OUTLINED_FUNCTION_70();
      Dictionary.description.getter( v34,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
      uint64_t v35 = OUTLINED_FUNCTION_59_0();
      *(void *)(v22 + 24) = OUTLINED_FUNCTION_46_1(v35, v36, &a11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v22 + 24, v22 + 32, v32 + 14);
      OUTLINED_FUNCTION_70_0();
      OUTLINED_FUNCTION_51(v26);
      OUTLINED_FUNCTION_51(v27);
      OUTLINED_FUNCTION_81( &dword_0,  v28,  v23,  "tool parameter summary - phrase template - %s and params - %s",  (uint8_t *)v32);
      OUTLINED_FUNCTION_98(a10, v37, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_3_0(a10);
      OUTLINED_FUNCTION_3_0(v32);
    }

    else
    {
      swift_bridgeObjectRelease_n(v26, 4LL);
      swift_bridgeObjectRelease_n(v27, 4LL);
    }

    static PhraseUtils.getHydratedPhrase(phraseTemplate:parameters:)(*(void ***)(v22 + 96), v26, v27);
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_59_0();
  }

  else
  {
    uint64_t v38 = *(void **)(v22 + 80);
    Logger.logObject.getter(v25);
    os_log_type_t v39 = OUTLINED_FUNCTION_38_2();
    if (OUTLINED_FUNCTION_7_2(v39))
    {
      uint64_t v40 = (_WORD *)OUTLINED_FUNCTION_16_0(2LL);
      *uint64_t v40 = 0;
      OUTLINED_FUNCTION_43_2(&dword_0, v41, v42, "failed to Create toolInvocation");
      OUTLINED_FUNCTION_3_0((uint64_t)v40);
    }
  }

  OUTLINED_FUNCTION_54_0();
  OUTLINED_FUNCTION_29_1();
  return v45(v43, v44, v45, v46, v47, v48, v49, v50, a9, a10, a11, a12, a13, a14);
}

uint64_t MetaDataSourcedAppIntentResolver.getSuggestionDialogFromTool(toolId:parametersToolValue:siriLocale:)( uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 80);
  Logger.logObject.getter(a1);
  os_log_type_t v3 = OUTLINED_FUNCTION_38_2();
  if (OUTLINED_FUNCTION_7_2(v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_16_0(2LL);
    *uint64_t v4 = 0;
    OUTLINED_FUNCTION_43_2(&dword_0, v5, v6, "failed to Create toolInvocation");
    OUTLINED_FUNCTION_3_0((uint64_t)v4);
  }

  return (*(uint64_t (**)(void, void))(v1 + 8))(0LL, 0LL);
}

uint64_t MetaDataSourcedAppIntentResolver.getSuggestionDialogFromAssistantIntentPhrase(appIntentAction:details:siriLocale:)()
{
  uint64_t v82 = v2;
  uint64_t v83 = v3;
  uint64_t v75 = v0;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  unint64_t v9 = v8;
  uint64_t v79 = v10;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v15 = type metadata accessor for Locale(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_57_1();
  id v17 = [v7 identifier];
  uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  uint64_t v19 = v18;

  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
  }
  uint64_t v20 = OUTLINED_FUNCTION_45();
  os_log_type_t v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.appIntentsSuggestions);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  uint64_t v78 = v5;
  v22(v1, v5, v15);
  OUTLINED_FUNCTION_58_0(v9);
  OUTLINED_FUNCTION_58_0(v19);
  OUTLINED_FUNCTION_58_0(v14);
  uint64_t v23 = OUTLINED_FUNCTION_58_0(v12);
  Logger.logObject.getter(v23);
  os_log_type_t v24 = OUTLINED_FUNCTION_68();
  uint64_t v77 = v12;
  if (OUTLINED_FUNCTION_56_1(v24))
  {
    uint64_t v73 = v15;
    uint64_t v25 = OUTLINED_FUNCTION_16_0(32LL);
    uint64_t v74 = OUTLINED_FUNCTION_16_0(96LL);
    v81[0] = v74;
    *(_DWORD *)uint64_t v25 = 136315650;
    uint64_t v70 = v14;
    uint64_t v71 = v16;
    uint64_t v69 = v1;
    uint64_t v26 = v12;
    os_log_t v72 = (os_log_t)v17;
    swift_bridgeObjectRetain(v9);
    uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v9, v81);
    uint64_t v68 = v81;
    OUTLINED_FUNCTION_85_0((uint64_t)&v80, (uint64_t)v81);
    OUTLINED_FUNCTION_34_1(v9);
    *(_WORD *)(v25 + 12) = 2080;
    OUTLINED_FUNCTION_47_1();
    uint64_t v80 = OUTLINED_FUNCTION_91_0(v76, v27, v81);
    OUTLINED_FUNCTION_85_0((uint64_t)&v80, (uint64_t)v81);
    uint64_t v28 = OUTLINED_FUNCTION_34_1(v19);
    *(_WORD *)(v25 + 22) = 2080;
    uint64_t v67 = v25 + 24;
    __chkstk_darwin(v28);
    uint64_t v66 = v1;
    uint64_t v29 = specialized _NativeDictionary.mapValues<A>(_:)( (void (*)(void *__return_ptr, _BYTE *))partial apply for closure #1 in implicit closure #3 in MetaDataSourcedAppIntentResolver.getSuggestionDialogFromAssistantIntentPhrase(appIntentAction:details:siriLocale:),  (uint64_t)&v65,  v12);
    os_log_type_t v30 = v21;
    unint64_t v31 = v9;
    uint64_t v32 = v26;
    uint64_t v33 = Dictionary.description.getter( v29,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
    swift_release(v29);
    uint64_t v34 = v32;
    unint64_t v9 = v31;
    uint64_t v80 = OUTLINED_FUNCTION_61_1(v33, v35, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v68, v67);
    OUTLINED_FUNCTION_51(v34);
    OUTLINED_FUNCTION_51(v70);
    OUTLINED_FUNCTION_8();
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v69, v73);
    os_log_t v36 = v72;
    _os_log_impl( &dword_0,  v72,  v30,  "Fetching assistant intent phrase - for bundleIdentifier %s and actionIdentifier - %s appIntentAction.parameters - %s",  (uint8_t *)v25,  0x20u);
    uint64_t v37 = v74;
    swift_arrayDestroy(v74, 3LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_3_0(v37);
    OUTLINED_FUNCTION_3_0(v25);
  }

  else
  {
    OUTLINED_FUNCTION_51(v12);
    OUTLINED_FUNCTION_51(v14);
    OUTLINED_FUNCTION_51(v19);
    OUTLINED_FUNCTION_51(v9);
    OUTLINED_FUNCTION_52_1(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8));
  }

  uint64_t v38 = v75[5];
  uint64_t v39 = v75[6];
  OUTLINED_FUNCTION_65_0(v75 + 2, v38);
  uint64_t v40 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 64))( v79,  v9,  v76,  v19,  v38,  v39);
  OUTLINED_FUNCTION_30_2();
  uint64_t v75 = (void *)v40;
  uint64_t v41 = *(void *)(v40 + 16);
  if (v41)
  {
    uint64_t v76 = 0LL;
    uint64_t v79 = 0LL;
    uint64_t v42 = v75 + 5;
    uint64_t v43 = -1LL;
    while (1)
    {
      uint64_t v44 = *(v42 - 1);
      unint64_t v45 = *v42;
      uint64_t v46 = one-time initialization token for variableNameRegex;
      OUTLINED_FUNCTION_40_2();
      if (v46 != -1) {
        swift_once( &one-time initialization token for variableNameRegex,  one-time initialization function for variableNameRegex);
      }
      uint64_t v47 = (void *)static PhraseUtils.variableNameRegex;
      OUTLINED_FUNCTION_54_0();
      NSString v48 = String._bridgeToObjectiveC()();
      if ((v45 & 0x1000000000000000LL) != 0)
      {
        OUTLINED_FUNCTION_54_0();
        Swift::Int v50 = String.UTF16View._foreignCount()();
      }

      else
      {
        uint64_t v49 = HIBYTE(v45) & 0xF;
        if ((v45 & 0x2000000000000000LL) == 0) {
          uint64_t v49 = v44;
        }
        Swift::Int v50 = ((uint64_t (*)(uint64_t, uint64_t, unint64_t))String.UTF16View._nativeGetOffset(for:))( (v49 << 16) | 7,  v44,  v45);
      }

      id v51 = objc_msgSend(v47, "matchesInString:options:range:", v48, 0, 0, v50);

      uint64_t v52 = type metadata accessor for LNActionParameterMetadata( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSTextCheckingResult,  &OBJC_CLASS___NSTextCheckingResult_ptr);
      uint64_t v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v51, v52);

      OUTLINED_FUNCTION_40_2();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo20NSTextCheckingResultCG_SSs5NeverOTg5095_s25SiriLinkSuggestionsPlugin11PhraseUtilsO16getVariableNames14phraseTemplateSaySSGSS_tFZSSSo20deF6CXEfU_SSTf1cn_n( v53,  v44,  v45);
      uint64_t v55 = v54;
      uint64_t v56 = OUTLINED_FUNCTION_77_0();
      uint64_t v57 = *(void *)(v55 + 16);
      if (v43 >= v57) {
        break;
      }
      __chkstk_darwin(v56);
      uint64_t v66 = v78;
      uint64_t v58 = specialized Dictionary.compactMapValues<A>(_:)((void (*)(uint64_t *__return_ptr, _OWORD *))partial apply for closure #1 in static PhraseUtils.getHydratedPhrase(phraseTemplate:parameters:locale:));
      uint64_t v59 = (void **)OUTLINED_FUNCTION_54_0();
      uint64_t v61 = static PhraseUtils.getHydratedPhrase(phraseTemplate:parameters:)(v59, v60, v58);
      uint64_t v63 = v62;
      OUTLINED_FUNCTION_57();
      OUTLINED_FUNCTION_77_0();
      OUTLINED_FUNCTION_8();
      if (v63)
      {
        uint64_t v43 = v57;
        uint64_t v76 = v61;
        uint64_t v79 = v63;
LABEL_18:
        OUTLINED_FUNCTION_57();
      }

      v42 += 2;
      if (!--v41) {
        goto LABEL_23;
      }
    }

    OUTLINED_FUNCTION_8();
    goto LABEL_18;
  }

  uint64_t v76 = 0LL;
  uint64_t v79 = 0LL;
LABEL_23:
  swift_bridgeObjectRelease(v75);
  return v76;
}

uint64_t closure #1 in implicit closure #3 in MetaDataSourcedAppIntentResolver.getSuggestionDialogFromAssistantIntentPhrase(appIntentAction:details:siriLocale:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = v12;
  if (!v12)
  {
    outlined destroy of CoreSignalTypes?( (uint64_t)v11,  &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
LABEL_5:
    uint64_t result = swift_bridgeObjectRelease(0LL);
    unint64_t v9 = 0xE400000000000000LL;
    uint64_t v7 = 1819047278LL;
    goto LABEL_6;
  }

  uint64_t v6 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  uint64_t v7 = dispatch thunk of SiriSuggestions.DisplayRepresentable.getDisplay(for:)(a2, v5, v6);
  unint64_t v9 = v8;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(v11);
  if (!v9) {
    goto LABEL_5;
  }
LABEL_6:
  *a3 = v7;
  a3[1] = v9;
  return result;
}

uint64_t MetaDataSourcedAppIntentResolver.getSuggestionDialog(appIntentAction:details:siriLocale:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[10] = a7;
  v8[11] = v7;
  v8[8] = a5;
  v8[9] = a6;
  v8[6] = a3;
  v8[7] = a4;
  v8[4] = a1;
  v8[5] = a2;
  return OUTLINED_FUNCTION_22((uint64_t)MetaDataSourcedAppIntentResolver.getSuggestionDialog(appIntentAction:details:siriLocale:));
}

uint64_t MetaDataSourcedAppIntentResolver.getSuggestionDialog(appIntentAction:details:siriLocale:)()
{
  uint64_t v2 = v1;
  *(void *)(v0 + 96) = v1;
  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
  }
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v5 = OUTLINED_FUNCTION_45();
  uint64_t v6 = __swift_project_value_buffer(v5, (uint64_t)static Logger.appIntentsSuggestions);
  OUTLINED_FUNCTION_58_0(v2);
  OUTLINED_FUNCTION_58_0(v4);
  uint64_t v7 = OUTLINED_FUNCTION_58_0(v3);
  unint64_t v8 = (os_log_s *)v6;
  Logger.logObject.getter(v7);
  os_log_type_t v9 = OUTLINED_FUNCTION_32_2();
  BOOL v10 = OUTLINED_FUNCTION_64_1(v9);
  uint64_t v12 = *(void *)(v0 + 40);
  uint64_t v11 = *(void *)(v0 + 48);
  if (v10)
  {
    uint64_t v33 = *(void *)(v0 + 40);
    uint64_t v13 = OUTLINED_FUNCTION_16_0(22LL);
    uint64_t v32 = OUTLINED_FUNCTION_16_0(64LL);
    uint64_t v34 = v32;
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v14 = OUTLINED_FUNCTION_97_0();
    uint64_t v15 = OUTLINED_FUNCTION_35();
    uint64_t v16 = Dictionary.description.getter(v15, &type metadata for String, v14, &protocol witness table for String);
    OUTLINED_FUNCTION_8();
    *(void *)(v0 + ++*(void *)(v0 + 16) = OUTLINED_FUNCTION_60_1(v16, v17, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v13 + 4);
    OUTLINED_FUNCTION_60();
    OUTLINED_FUNCTION_51(v2);
    *(_WORD *)(v13 + 12) = 2080;
    uint64_t v18 = OUTLINED_FUNCTION_40_2();
    Dictionary.description.getter( v18,  &type metadata for String,  &type metadata for ActionParameter,  &protocol witness table for String);
    uint64_t v19 = OUTLINED_FUNCTION_57();
    *(void *)(v0 + 24) = OUTLINED_FUNCTION_46_1(v19, v20, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v13 + 14);
    OUTLINED_FUNCTION_70_0();
    OUTLINED_FUNCTION_51(v33);
    OUTLINED_FUNCTION_51(v11);
    OUTLINED_FUNCTION_81( &dword_0,  v8,  (os_log_type_t)v4,  "toolParameterValues count - %s and appIntentAction.parameters - %s",  (uint8_t *)v13);
    OUTLINED_FUNCTION_98(v32, v21, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_3_0(v32);
    OUTLINED_FUNCTION_3_0(v13);
  }

  else
  {
    OUTLINED_FUNCTION_51(v2);
    OUTLINED_FUNCTION_51(v12);
    OUTLINED_FUNCTION_51(v11);
  }

  if (*(void *)(v2 + 16) == *(void *)(*(void *)(v0 + 48) + 16LL))
  {
    uint64_t v22 = *(void *)(v0 + 64);
    uint64_t v24 = *(void *)(v0 + 32);
    uint64_t v23 = *(void **)(v0 + 40);
    uint64_t v34 = *(void *)(v0 + 56);
    uint64_t v35 = v22;
    swift_bridgeObjectRetain(v22);
    v25._uint64_t countAndFlagsBits = 46LL;
    v25._object = (void *)0xE100000000000000LL;
    String.append(_:)(v25);
    OUTLINED_FUNCTION_70();
    v26._uint64_t countAndFlagsBits = v24;
    v26._object = v23;
    String.append(_:)(v26);
    OUTLINED_FUNCTION_59_0();
    uint64_t v28 = v34;
    uint64_t v27 = v35;
    *(void *)(v0 + 104) = v35;
    uint64_t v29 = (void *)swift_task_alloc(dword_4E89C);
    *(void *)(v0 + 112) = v29;
    *uint64_t v29 = v0;
    v29[1] = MetaDataSourcedAppIntentResolver.getSuggestionDialog(appIntentAction:details:siriLocale:);
    return MetaDataSourcedAppIntentResolver.getSuggestionDialogFromTool(toolId:parametersToolValue:siriLocale:)( v28,  v27,  v2);
  }

  else
  {
    OUTLINED_FUNCTION_8();
    uint64_t v31 = MetaDataSourcedAppIntentResolver.getSuggestionDialogFromAssistantIntentPhrase(appIntentAction:details:siriLocale:)();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v31);
  }

uint64_t MetaDataSourcedAppIntentResolver.getSuggestionDialog(appIntentAction:details:siriLocale:)( uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, a2);
}

uint64_t specialized Dictionary.compactMapValues<A>(_:)( void (*a1)(uint64_t *__return_ptr, _OWORD *))
{
  void (*v43)(uint64_t *__return_ptr, _OWORD *);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  _OWORD v49[3];
  __int128 v50;
  _OWORD v51[3];
  __int128 v52;
  _OWORD v53[3];
  void *v54;
  void v55[2];
  uint64_t v56;
  int64_t v57;
  unint64_t v58;
  _OWORD *v59;
  uint64_t v43 = a1;
  uint64_t v2 = &_swiftEmptyDictionarySingleton;
  uint64_t v54 = &_swiftEmptyDictionarySingleton;
  specialized _NativeDictionary.makeIterator()(v55);
  uint64_t v44 = v55[0];
  int64_t v3 = v57;
  unint64_t v4 = v58;
  uint64_t v39 = v56;
  int64_t v40 = (unint64_t)(v56 + 64) >> 6;
  uint64_t v41 = v55[1];
  uint64_t v42 = v53;
  uint64_t v59 = v51;
  uint64_t result = OUTLINED_FUNCTION_26_1();
  if (!v4) {
    goto LABEL_3;
  }
LABEL_2:
  uint64_t v6 = (v4 - 1) & v4;
  unint64_t v7 = __clz(__rbit64(v4)) | (v3 << 6);
  for (i = v3; ; unint64_t v7 = __clz(__rbit64(v9)) + (i << 6))
  {
    uint64_t v13 = (uint64_t *)(*(void *)(v44 + 48) + 16 * v7);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    outlined init with copy of ActionParameter(*(void *)(v44 + 56) + 48 * v7, (uint64_t)v42);
    *(void *)&uint64_t v52 = v15;
    *((void *)&v52 + 1) = v14;
    Swift::Int v50 = v52;
    v51[0] = v53[0];
    v51[1] = v53[1];
    v51[2] = v53[2];
    OUTLINED_FUNCTION_26_1();
    v43(&v46, v59);
    if (v1)
    {
      outlined destroy of CoreSignalTypes?( (uint64_t)&v50,  &demangling cache variable for type metadata for (key: String, value: ActionParameter));
      swift_release(v2);
      uint64_t v38 = v44;
      goto LABEL_42;
    }

    uint64_t v22 = v47;
    if (!v47)
    {
      outlined destroy of CoreSignalTypes?( (uint64_t)&v50,  &demangling cache variable for type metadata for (key: String, value: ActionParameter));
      uint64_t result = swift_bridgeObjectRelease(0LL);
      goto LABEL_32;
    }

    unint64_t v45 = v46;
    __int128 v23 = v50;
    NSString v48 = v50;
    __int128 v24 = v59[1];
    v49[0] = *v59;
    v49[1] = v24;
    v49[2] = v59[2];
    unint64_t v25 = v2[2];
    if (v2[3] <= v25)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v25 + 1,  1LL,  v16,  v17,  v18,  v19,  v20,  v21,  v39,  v40,  v41,  (uint64_t)v42,  (int)v43,  SBYTE4(v43));
      uint64_t v2 = v54;
    }

    Hasher.init(_seed:)(&v46, v2[5]);
    String.hash(into:)(&v46, v23, *((void *)&v23 + 1));
    uint64_t result = Hasher._finalize()();
    Swift::String v26 = (char *)(v2 + 8);
    uint64_t v27 = -1LL << *((_BYTE *)v2 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1LL << v28) & ~v2[(v28 >> 6) + 8]) == 0) {
      break;
    }
    unint64_t v30 = __clz(__rbit64((-1LL << v28) & ~v2[(v28 >> 6) + 8])) | v28 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_31:
    *(void *)&v26[(v30 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v30;
    *(_OWORD *)(v2[6] + 16 * v30) = v23;
    uint64_t v35 = (void *)(v2[7] + 16 * v30);
    *uint64_t v35 = v45;
    v35[1] = v22;
    ++v2[2];
    uint64_t result = outlined destroy of ActionParameter((uint64_t)v49);
LABEL_32:
    int64_t v3 = i;
    unint64_t v4 = v6;
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t i = v3 + 1;
    if (__OFADD__(v3, 1LL)) {
      goto LABEL_44;
    }
    if (i >= v40) {
      goto LABEL_41;
    }
    unint64_t v9 = *(void *)(v41 + 8 * i);
    if (!v9)
    {
      OUTLINED_FUNCTION_81_0();
      if (v10 == v11) {
        goto LABEL_41;
      }
      OUTLINED_FUNCTION_80_0();
      if (v9) {
        goto LABEL_15;
      }
      OUTLINED_FUNCTION_81_0();
      if (v10 == v11) {
        goto LABEL_41;
      }
      OUTLINED_FUNCTION_80_0();
      if (v9) {
        goto LABEL_15;
      }
      OUTLINED_FUNCTION_81_0();
      if (v10 == v11) {
        goto LABEL_41;
      }
      OUTLINED_FUNCTION_80_0();
      if (v9)
      {
LABEL_15:
        int64_t i = v12;
      }

      else
      {
        int64_t i = v3 + 5;
        if (v3 + 5 >= v40) {
          goto LABEL_41;
        }
        unint64_t v9 = *(void *)(v41 + 8 * i);
        if (!v9)
        {
          while (1)
          {
            OUTLINED_FUNCTION_81_0();
            if (v10 == v11) {
              break;
            }
            OUTLINED_FUNCTION_80_0();
            uint64_t v37 = v36 + 1;
            if (v9)
            {
              int64_t i = v37 - 1;
              goto LABEL_16;
            }
          }

void specialized Dictionary.compactMapValues<A>(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TypedValue?);
  __chkstk_darwin(v2);
  unint64_t v4 = (char *)v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for TypedValue(0LL);
  uint64_t v49 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  NSString v48 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v46 = (char *)v43 - v8;
  uint64_t v61 = &_swiftEmptyDictionarySingleton;
  specialized _NativeDictionary.makeIterator()(v62);
  uint64_t v9 = v62[0];
  uint64_t v50 = v62[1];
  int64_t v66 = v64;
  unint64_t v10 = v65;
  v43[1] = v63;
  int64_t v51 = (unint64_t)(v63 + 64) >> 6;
  uint64_t v52 = v60;
  uint64_t v53 = v58;
  uint64_t v47 = &v56;
  swift_bridgeObjectRetain(a1);
  uint64_t v44 = v9;
  uint64_t v45 = v5;
  while (1)
  {
    while (1)
    {
      if (v10)
      {
        unint64_t v11 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v12 = v11 | (v66 << 6);
      }

      else
      {
        int64_t v13 = v66 + 1;
        if (__OFADD__(v66, 1LL)) {
          goto LABEL_38;
        }
        if (v13 >= v51) {
          goto LABEL_36;
        }
        unint64_t v14 = *(void *)(v50 + 8 * v13);
        int64_t v15 = v66 + 1;
        if (!v14)
        {
          int64_t v15 = v66 + 2;
          if (v66 + 2 >= v51) {
            goto LABEL_36;
          }
          unint64_t v14 = *(void *)(v50 + 8 * v15);
          if (!v14)
          {
            int64_t v15 = v66 + 3;
            if (v66 + 3 >= v51) {
              goto LABEL_36;
            }
            unint64_t v14 = *(void *)(v50 + 8 * v15);
            if (!v14)
            {
              int64_t v15 = v66 + 4;
              if (v66 + 4 >= v51) {
                goto LABEL_36;
              }
              unint64_t v14 = *(void *)(v50 + 8 * v15);
              if (!v14)
              {
                int64_t v15 = v66 + 5;
                if (v66 + 5 >= v51) {
                  goto LABEL_36;
                }
                unint64_t v14 = *(void *)(v50 + 8 * v15);
                if (!v14)
                {
                  int64_t v16 = v66 + 6;
                  while (v16 < v51)
                  {
                    unint64_t v14 = *(void *)(v50 + 8 * v16++);
                    if (v14)
                    {
                      int64_t v15 = v16 - 1;
                      goto LABEL_19;
                    }
                  }

LABEL_19:
        unint64_t v10 = (v14 - 1) & v14;
        unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
        int64_t v66 = v15;
      }

      uint64_t v17 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v12);
      uint64_t v19 = *v17;
      uint64_t v18 = v17[1];
      outlined init with copy of ActionParameter(*(void *)(v9 + 56) + 48 * v12, (uint64_t)v52);
      *(void *)&__int128 v59 = v19;
      *((void *)&v59 + 1) = v18;
      __int128 v57 = v59;
      v58[0] = v60[0];
      v58[1] = v60[1];
      v58[2] = v60[2];
      outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)( (uint64_t)v53,  (uint64_t)v54,  &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
      uint64_t v20 = v54[3];
      swift_bridgeObjectRetain(v18);
      if (v20) {
        break;
      }
      outlined destroy of CoreSignalTypes?( (uint64_t)v54,  &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
      __swift_storeEnumTagSinglePayload((uint64_t)v4, 1LL, 1LL, v5);
LABEL_27:
      outlined destroy of CoreSignalTypes?( (uint64_t)&v57,  &demangling cache variable for type metadata for (key: String, value: ActionParameter));
      outlined destroy of CoreSignalTypes?((uint64_t)v4, &demangling cache variable for type metadata for TypedValue?);
    }

    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable);
    int v22 = swift_dynamicCast(v4, v54, v21, v5, 6LL);
    __swift_storeEnumTagSinglePayload((uint64_t)v4, v22 ^ 1u, 1LL, v5);
    __int128 v23 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
    __int128 v24 = v46;
    v23(v46, v4, v5);
    __int128 v25 = v57;
    __int128 v55 = v57;
    uint64_t v26 = (uint64_t)v53;
    __int128 v27 = v53[1];
    uint64_t v29 = (uint64_t)v47;
    unint64_t v28 = v48;
    *(_OWORD *)uint64_t v47 = *v53;
    *(_OWORD *)(v29 + ++*(void *)(v0 + 16) = v27;
    *(_OWORD *)(v29 + 32) = *(_OWORD *)(v26 + 32);
    v23(v28, v24, v5);
    unint64_t v30 = v61;
    unint64_t v31 = v61[2];
    if (v61[3] <= v31)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v31 + 1, 1);
      unint64_t v30 = v61;
    }

    Hasher.init(_seed:)(v54, v30[5]);
    String.hash(into:)(v54, v25, *((void *)&v25 + 1));
    Swift::Int v32 = Hasher._finalize()();
    BOOL v33 = v30 + 8;
    uint64_t v34 = -1LL << *((_BYTE *)v30 + 32);
    unint64_t v35 = v32 & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1LL << v35) & ~v30[(v35 >> 6) + 8]) == 0) {
      break;
    }
    unint64_t v37 = __clz(__rbit64((-1LL << v35) & ~v30[(v35 >> 6) + 8])) | v35 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_35:
    *(void *)((char *)v33 + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v37;
    *(_OWORD *)(v30[6] + 16 * v37) = v25;
    uint64_t v42 = v45;
    v23((char *)(v30[7] + *(void *)(v49 + 72) * v37), v48, v45);
    ++v30[2];
    uint64_t v5 = v42;
    outlined destroy of ActionParameter((uint64_t)v47);
    uint64_t v9 = v44;
  }

  char v38 = 0;
  unint64_t v39 = (unint64_t)(63 - v34) >> 6;
  while (++v36 != v39 || (v38 & 1) == 0)
  {
    BOOL v40 = v36 == v39;
    if (v36 == v39) {
      unint64_t v36 = 0LL;
    }
    v38 |= v40;
    uint64_t v41 = v33[v36];
    if (v41 != -1)
    {
      unint64_t v37 = __clz(__rbit64(~v41)) + (v36 << 6);
      goto LABEL_35;
    }
  }

  __break(1u);
LABEL_38:
  __break(1u);
}

  swift_bridgeObjectRelease(a1);

  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(v7);
}

uint64_t MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[39] = a4;
  v5[40] = v4;
  v5[38] = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeoutBehaviour<AppIntentDetails, Any>?);
  v5[41] = OUTLINED_FUNCTION_2_0(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for AppIntentFilter.AppIntentParameter(0LL);
  v5[42] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[43] = v8;
  v5[44] = OUTLINED_FUNCTION_2_0(v8);
  uint64_t v9 = type metadata accessor for Locale(0LL);
  v5[45] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[46] = v10;
  v5[47] = OUTLINED_FUNCTION_2_0(v10);
  uint64_t v11 = OUTLINED_FUNCTION_45();
  v5[48] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[49] = v12;
  v5[50] = OUTLINED_FUNCTION_2_0(v12);
  uint64_t v13 = type metadata accessor for AppIntentFilter(0LL);
  v5[51] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v5[52] = v14;
  v5[53] = OUTLINED_FUNCTION_2_0(v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentType?);
  v5[54] = OUTLINED_FUNCTION_4_1();
  v5[55] = OUTLINED_FUNCTION_4_1();
  v5[56] = OUTLINED_FUNCTION_4_1();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppIdDetails?);
  v5[57] = OUTLINED_FUNCTION_2_0(*(void *)(v15 - 8));
  OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_11_1(v16, v17, v18);
}

uint64_t MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_18_3(*(void **)(v0 + 304));
  *(void *)(v0 + 464) = v1;
  *(void *)(v0 + 472) = v2;
  uint64_t ObjectType = swift_getObjectType(v1);
  *(void *)(v0 + 480) = ObjectType;
  OUTLINED_FUNCTION_27(ObjectType);
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_40();
  return OUTLINED_FUNCTION_5_2(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Context.getAppId()(*(void *)(v0 + 480), *(void *)(v0 + 472));
  OUTLINED_FUNCTION_73_0();
  OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_11_1(v1, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v1 = *(void *)(v0 + 456);
  uint64_t v2 = type metadata accessor for AppIdDetails(0LL);
  if (__swift_getEnumTagSinglePayload(v1, 1LL, v2) == 1)
  {
    outlined destroy of CoreSignalTypes?(v1, &demangling cache variable for type metadata for AppIdDetails?);
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
  }

  else
  {
    uint64_t v3 = AppIdDetails.appId.getter();
    uint64_t v4 = v5;
    OUTLINED_FUNCTION_62_1(v1, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL));
  }

  *(void *)(v0 + 488) = v3;
  *(void *)(v0 + 496) = v4;
  uint64_t v6 = OUTLINED_FUNCTION_18_3(*(void **)(v0 + 304));
  *(void *)(v0 + 504) = v6;
  *(void *)(v0 + 512) = v7;
  uint64_t ObjectType = swift_getObjectType(v6);
  *(void *)(v0 + 520) = ObjectType;
  OUTLINED_FUNCTION_27(ObjectType);
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_40();
  return swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Context.getIntentType()(*(void *)(v0 + 520), *(void *)(v0 + 512));
  OUTLINED_FUNCTION_73_0();
  OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_11_1(v1, v2, v3);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (**v7)(uint64_t, uint64_t);
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_s *v23;
  os_log_type_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  Swift::String v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  os_log_s *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  os_log_type_t v61;
  _WORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  os_log_type_t v69;
  void *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  os_log_type_t v93;
  _WORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  os_log_type_t v110;
  uint8_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  __int128 *v121;
  __int128 *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  void *v134;
  uint64_t v135;
  os_log_type_t v136;
  uint8_t *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  uint64_t v142;
  void *v143;
  unint64_t v144;
  uint64_t (*v145)(uint64_t, char *);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  os_log_s *v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v1 = v0;
  v0[28] = 0LL;
  uint64_t v2 = v0 + 28;
  uint64_t v4 = v0[55];
  uint64_t v3 = v0[56];
  v0[29] = 0LL;
  outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)( v3,  v4,  &demangling cache variable for type metadata for IntentType?);
  uint64_t v5 = type metadata accessor for IntentType(0LL);
  if (__swift_getEnumTagSinglePayload(v4, 1LL, v5) != 1)
  {
    uint64_t v6 = v0[54];
    outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)( v0[55],  v6,  &demangling cache variable for type metadata for IntentType?);
    uint64_t v7 = *(uint64_t (***)(uint64_t, uint64_t))(v5 - 8);
    uint64_t v8 = v7[11](v6, v5);
    if (v8 == enum case for IntentType.appIntent(_:))
    {
      uint64_t v9 = v1[54];
LABEL_5:
      uint64_t v11 = v1[52];
      uint64_t v10 = v1[53];
      uint64_t v12 = v1[51];
      OUTLINED_FUNCTION_92_0(v7[12]);
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v10, v9, v12);
      v1[28] = AppIntentFilter.appId.getter(v13);
      v1[29] = v14;
      uint64_t v15 = AppIntentFilter.intentIdentifier.getter();
      v144 = v16;
      uint64_t v17 = (void *)AppIntentFilter.parameters.getter();
      uint64_t v18 = OUTLINED_FUNCTION_54_0();
      v19(v18);
      goto LABEL_8;
    }

    uint64_t v9 = v1[54];
    if (v8 == enum case for IntentType.appIntentV2(_:)) {
      goto LABEL_5;
    }
    OUTLINED_FUNCTION_92_0(v7[1]);
  }

  swift_bridgeObjectRelease(0LL);
  uint64_t v15 = 0LL;
  v144 = 0LL;
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
  uint64_t v17 = _swiftEmptyArrayStorage;
LABEL_8:
  v141 = v2 - 3;
  v142 = v15;
  v140 = v2 + 9;
  outlined destroy of CoreSignalTypes?(v1[55], &demangling cache variable for type metadata for IntentType?);
  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
  }
  uint64_t v21 = v1[49];
  uint64_t v20 = v1[50];
  __swift_project_value_buffer(v1[48], (uint64_t)static Logger.appIntentsSuggestions);
  (*(void (**)(uint64_t))(v21 + 16))(v20);
  OUTLINED_FUNCTION_58_0(v144);
  int v22 = OUTLINED_FUNCTION_58_0((uint64_t)v17);
  __int128 v23 = (os_log_s *)Logger.logObject.getter(v22);
  __int128 v24 = static os_log_type_t.debug.getter();
  v151 = v1;
  v143 = v17;
  v138 = v2 + 6;
  if (OUTLINED_FUNCTION_69_0(v24))
  {
    v136 = v20;
    v150 = v23;
    __int128 v25 = OUTLINED_FUNCTION_16_0(32LL);
    v135 = OUTLINED_FUNCTION_16_0(96LL);
    v158 = v135;
    *(_DWORD *)__int128 v25 = 136315650;
    swift_beginAccess(v2, v2 - 6, 0LL, 0LL);
    swift_bridgeObjectRetain(v1[29]);
    v1[34] = OUTLINED_FUNCTION_58_1();
    OUTLINED_FUNCTION_94_0((uint64_t)(v2 + 6), (uint64_t)(v2 + 7));
    OUTLINED_FUNCTION_59_0();
    *(_WORD *)(v25 + 12) = 2080;
    if (v144) {
      uint64_t v26 = v144;
    }
    else {
      uint64_t v26 = 0xE300000000000000LL;
    }
    OUTLINED_FUNCTION_83_0();
    v1[35] = OUTLINED_FUNCTION_58_1();
    OUTLINED_FUNCTION_94_0((uint64_t)(v2 + 7), (uint64_t)(v2 + 8));
    __int128 v27 = v2;
    unint64_t v28 = (uint64_t)v143;
    swift_bridgeObjectRelease(v26);
    OUTLINED_FUNCTION_51(v144);
    v137 = (uint8_t *)v25;
    *(_WORD *)(v25 + 22) = 2080;
    uint64_t v29 = v1;
    unint64_t v30 = v143[2];
    unint64_t v31 = _swiftEmptyArrayStorage;
    v139 = v27;
    if (v30)
    {
      v148 = v29[46];
      v149 = v27 - 16;
      Swift::Int v32 = v29[43];
      v159 = _swiftEmptyArrayStorage;
      OUTLINED_FUNCTION_47_1();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      BOOL v33 = (char *)v143 + ((*(unsigned __int8 *)(v32 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80));
      v146 = *(void *)(v32 + 72);
      v147 = v32;
      v145 = *(uint64_t (**)(uint64_t, char *))(v32 + 16);
      do
      {
        uint64_t v34 = v151[47];
        unint64_t v35 = v151[44];
        v152 = v151[45];
        v155 = v151[42];
        unint64_t v36 = v145(v35, v33);
        v160 = AppIntentFilter.AppIntentParameter.name.getter(v36);
        v161 = v37;
        swift_bridgeObjectRetain(v37);
        v38._uint64_t countAndFlagsBits = 32LL;
        v38._object = (void *)0xE100000000000000LL;
        String.append(_:)(v38);
        unint64_t v39 = OUTLINED_FUNCTION_30_2();
        BOOL v40 = v161;
        AppIntentFilter.AppIntentParameter.value.getter(v39);
        uint64_t v41 = v151[15];
        uint64_t v42 = v151[16];
        uint64_t v43 = OUTLINED_FUNCTION_65_0(v149, v41);
        static Locale.current.getter(v43);
        uint64_t v44 = dispatch thunk of SiriSuggestions.DisplayRepresentable.getDisplay(for:)(v34, v41, v42);
        uint64_t v46 = v45;
        (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v34, v152);
        if (v46) {
          uint64_t v47 = v44;
        }
        else {
          uint64_t v47 = 1819047278LL;
        }
        if (!v46) {
          uint64_t v46 = (void *)0xE400000000000000LL;
        }
        __swift_destroy_boxed_opaque_existential_1(v149);
        OUTLINED_FUNCTION_47_1();
        v48._uint64_t countAndFlagsBits = v47;
        v48._object = v46;
        String.append(_:)(v48);
        OUTLINED_FUNCTION_30_2();
        OUTLINED_FUNCTION_77_0();
        uint64_t v49 = v160;
        (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v35, v155);
        unint64_t v31 = v159;
        if ((OUTLINED_FUNCTION_86_0() & 1) == 0)
        {
          OUTLINED_FUNCTION_67();
          unint64_t v31 = v159;
        }

        int64_t v51 = v31[2];
        uint64_t v50 = v31[3];
        __int128 v23 = v150;
        if (v51 >= v50 >> 1)
        {
          OUTLINED_FUNCTION_100_0(v50);
          OUTLINED_FUNCTION_67();
          unint64_t v31 = v159;
        }

        v31[2] = v51 + 1;
        uint64_t v52 = &v31[2 * v51];
        v52[4] = v49;
        v52[5] = v40;
        v33 += v146;
        --v30;
      }

      while (v30);
      unint64_t v28 = (uint64_t)v143;
      OUTLINED_FUNCTION_30_2();
    }

    uint64_t v1 = v151;
    uint64_t v56 = v151[49];
    v156 = v151[50];
    uint64_t v54 = (os_log_s *)v137;
    uint64_t v53 = v151[48];
    __int128 v57 = Array.description.getter(v31, &type metadata for String);
    OUTLINED_FUNCTION_60();
    v151[37] = OUTLINED_FUNCTION_79_0(v57, v58, &v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v140, v151 + 38, v137 + 24);
    OUTLINED_FUNCTION_102();
    OUTLINED_FUNCTION_51(v28);
    _os_log_impl( &dword_0,  v23,  v136,  "MetaDataSourcedAppIntentResolver resolveParameter called with - appIdToUse - %s, intentIdentifierToUse - %s, parameters - %s",  v137,  0x20u);
    swift_arrayDestroy(v135, 3LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_3_0(v135);
    OUTLINED_FUNCTION_3_0((uint64_t)v137);

    OUTLINED_FUNCTION_62_1(v156, *(uint64_t (**)(uint64_t, uint64_t))(v56 + 8));
    uint64_t v2 = v139;
  }

  else
  {
    uint64_t v53 = v1[49];
    uint64_t v54 = (os_log_s *)v1[50];
    __int128 v55 = v1[48];
    OUTLINED_FUNCTION_51(v144);
    OUTLINED_FUNCTION_51((uint64_t)v17);

    (*(void (**)(os_log_s *, uint64_t))(v53 + 8))(v54, v55);
  }

  swift_beginAccess(v2, v141, 1LL, 0LL);
  __int128 v59 = v1[29];
  if (v59)
  {
    uint64_t v60 = v1[28];
    swift_bridgeObjectRelease(v1[62]);
LABEL_35:
    v157 = v2 + 5;
    uint64_t v67 = v2 + 3;
    OUTLINED_FUNCTION_59();
    uint64_t v68 = v144;
    if (v144)
    {
      OUTLINED_FUNCTION_58_0(v144);
      OUTLINED_FUNCTION_58_0(v59);
      OUTLINED_FUNCTION_39_2();
      uint64_t v69 = OUTLINED_FUNCTION_32_2();
      if (OUTLINED_FUNCTION_7_2(v69))
      {
        uint64_t v70 = v2;
        uint64_t v71 = v2 + 4;
        os_log_t v72 = OUTLINED_FUNCTION_16_0(22LL);
        uint64_t v73 = OUTLINED_FUNCTION_16_0(64LL);
        v160 = v73;
        *(_DWORD *)os_log_t v72 = 136315394;
        OUTLINED_FUNCTION_59();
        *uint64_t v67 = OUTLINED_FUNCTION_60_1(v60, v74, &v160);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v67, v71, v72 + 4);
        OUTLINED_FUNCTION_34_1(v59);
        *(_WORD *)(v72 + 12) = 2080;
        swift_bridgeObjectRetain(v144);
        uint64_t v75 = v142;
        *uint64_t v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v142, v144, &v160);
        uint64_t v76 = v71;
        uint64_t v2 = v70;
        uint64_t v68 = v144;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v76, v157, v72 + 14);
        OUTLINED_FUNCTION_34_1(v144);
        OUTLINED_FUNCTION_81( &dword_0,  v54,  (os_log_type_t)v53,  "Obtaining app intents details for appId: %s and %s",  (uint8_t *)v72);
        OUTLINED_FUNCTION_98(v73, v77, (uint64_t)&type metadata for Any + 8);
        OUTLINED_FUNCTION_3_0(v73);
        uint64_t v78 = v72;
        uint64_t v1 = v151;
        OUTLINED_FUNCTION_3_0(v78);
      }

      else
      {
        OUTLINED_FUNCTION_51(v59);
        OUTLINED_FUNCTION_51(v144);

        uint64_t v75 = v142;
      }

      uint64_t v85 = (void *)v1[40];
      uint64_t v86 = v85[5];
      __int128 v87 = v85[6];
      OUTLINED_FUNCTION_65_0(v85 + 2, v86);
      uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v89 = OUTLINED_FUNCTION_1(v88, 48LL);
      *(_OWORD *)(v89 + ++*(void *)(v0 + 16) = xmmword_3C030;
      *(void *)(v89 + 32) = v75;
      *(void *)(v89 + 40) = v68;
      uint64_t v90 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v87 + 40))( v60,  v59,  v89,  v86,  v87);
      OUTLINED_FUNCTION_8();
    }

    else
    {
      v153 = v60;
      OUTLINED_FUNCTION_58_0(v59);
      OUTLINED_FUNCTION_39_2();
      uint64_t v79 = OUTLINED_FUNCTION_32_2();
      if (os_log_type_enabled(v54, v79))
      {
        uint64_t v80 = (uint8_t *)OUTLINED_FUNCTION_16_0(12LL);
        uint64_t v81 = OUTLINED_FUNCTION_16_0(32LL);
        v160 = v81;
        *(_DWORD *)uint64_t v80 = 136315138;
        OUTLINED_FUNCTION_59();
        uint64_t v82 = v153;
        v2[2] = OUTLINED_FUNCTION_60_1(v153, v83, &v160);
        uint64_t v1 = v151;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 2, v2 + 3, v80 + 4);
        OUTLINED_FUNCTION_34_1(v59);
        OUTLINED_FUNCTION_12_3(&dword_0, v54, v79, "Obtaining app intents details for appId: %s", v80);
        OUTLINED_FUNCTION_9_3(v81, v84, (uint64_t)&type metadata for Any + 8);
        OUTLINED_FUNCTION_3_0(v81);
        OUTLINED_FUNCTION_3_0((uint64_t)v80);
      }

      else
      {
        OUTLINED_FUNCTION_51(v59);

        uint64_t v82 = v153;
      }

      unint64_t v91 = (void *)v1[40];
      uint64_t v92 = v91[5];
      uint64_t v89 = v91[6];
      OUTLINED_FUNCTION_65_0(v91 + 2, v92);
      uint64_t v90 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v89 + 48))(v82, v59, v92, v89);
      uint64_t v60 = v82;
    }

    uint64_t v107 = v2 - 26;
    uint64_t v108 = v1[39];
    OUTLINED_FUNCTION_59();
    specialized Sequence.compactMap<A>(_:)(v90, v60, v59);
    v154 = v109;
    v1[66] = v109;
    OUTLINED_FUNCTION_60();
    OUTLINED_FUNCTION_2();
    outlined init with copy of LinkClient(v108, (uint64_t)(v2 - 26));
    OUTLINED_FUNCTION_39_2();
    uint64_t v110 = OUTLINED_FUNCTION_68();
    if (os_log_type_enabled((os_log_t)v89, v110))
    {
      v111 = (uint8_t *)OUTLINED_FUNCTION_16_0(12LL);
      uint64_t v112 = OUTLINED_FUNCTION_16_0(32LL);
      v160 = v112;
      *(_DWORD *)v111 = 136315138;
      os_log_type_t v113 = v151[5];
      uint64_t v114 = v151[6];
      OUTLINED_FUNCTION_65_0(v107, v113);
      dispatch thunk of EnvironmentSnapshot.salientEntities.getter(v113, v114);
      type metadata accessor for SalientEntity(0LL);
      uint64_t v115 = OUTLINED_FUNCTION_107();
      v117 = Array.description.getter(v115, v116);
      v119 = v118;
      OUTLINED_FUNCTION_2();
      v151[33] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v117, v119, &v160);
      uint64_t v1 = v151;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v157, v138, v111 + 4);
      OUTLINED_FUNCTION_70_0();
      __swift_destroy_boxed_opaque_existential_1(v107);
      OUTLINED_FUNCTION_12_3(&dword_0, (os_log_s *)v89, v110, "environment.salientEntities - %s", v111);
      OUTLINED_FUNCTION_9_3(v112, v120, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_3_0(v112);
      OUTLINED_FUNCTION_3_0((uint64_t)v111);
    }

    else
    {
      __swift_destroy_boxed_opaque_existential_1(v107);
    }

    uint64_t v121 = (__int128 *)(v1 + 17);
    v122 = (__int128 *)(v1 + 7);
    __int128 v123 = v1[40];
    unint64_t v124 = v1[41];
    uint64_t v126 = v1[38];
    uint64_t v125 = (void *)v1[39];
    v127 = v1;
    __int128 v128 = v125[3];
    __int128 v129 = v125[4];
    OUTLINED_FUNCTION_65_0(v125, v128);
    dispatch thunk of EnvironmentSnapshot.salientEntities.getter(v128, v129);
    Array<A>.getRetrievedContext()();
    OUTLINED_FUNCTION_2();
    Array<A>.indexByType()();
    __int128 v131 = v130;
    OUTLINED_FUNCTION_30_2();
    v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeoutBehaviour<AppIntentDetails, Any>);
    __swift_storeEnumTagSinglePayload(v124, 1LL, 1LL, v132);
    outlined init with copy of LinkClient((uint64_t)v125, (uint64_t)v121);
    outlined init with copy of LinkClient(v126, (uint64_t)v122);
    v133 = (void *)OUTLINED_FUNCTION_1((uint64_t)&unk_49738, 120LL);
    v127[67] = v133;
    v133[2] = v123;
    v133[3] = v143;
    v133[4] = v131;
    outlined init with take of LinkDialogIdProvider(v121, (uint64_t)(v133 + 5));
    outlined init with take of LinkDialogIdProvider(v122, (uint64_t)(v133 + 10));
    swift_retain(v123);
    v134 = (void *)OUTLINED_FUNCTION_4_1();
    v127[68] = v134;
    *v134 = v127;
    v134[1] = MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:);
    return static AsyncAwaitUtils.run<A, B>(elements:timeoutBehaviour:execute:)( v154,  v127[41],  &async function pointer to partial apply for closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:),  v133,  &type metadata for AppIntentDetails,  (char *)&type metadata for Any + 8);
  }

  OUTLINED_FUNCTION_39_2();
  uint64_t v61 = OUTLINED_FUNCTION_106();
  if (OUTLINED_FUNCTION_7_2(v61))
  {
    uint64_t v62 = (_WORD *)OUTLINED_FUNCTION_16_0(2LL);
    *uint64_t v62 = 0;
    OUTLINED_FUNCTION_42_1( &dword_0,  v63,  v64,  "No explicit appId set on IntentType. Using the appId assign to the context instead");
    OUTLINED_FUNCTION_3_0((uint64_t)v62);
  }

  uint64_t v53 = v1[61];
  unint64_t v65 = v1[62];

  int64_t v66 = v1[29];
  v1[28] = v53;
  v1[29] = v65;
  swift_bridgeObjectRelease(v66);
  if (v65)
  {
    uint64_t v60 = v1[61];
    __int128 v59 = v1[62];
    goto LABEL_35;
  }

  OUTLINED_FUNCTION_59_0();
  swift_bridgeObjectRelease(v144);
  OUTLINED_FUNCTION_39_2();
  uint64_t v93 = OUTLINED_FUNCTION_106();
  if (OUTLINED_FUNCTION_7_2(v93))
  {
    uint64_t v94 = (_WORD *)OUTLINED_FUNCTION_16_0(2LL);
    *uint64_t v94 = 0;
    OUTLINED_FUNCTION_42_1( &dword_0,  v95,  v96,  "No intent type specified on context with an appId. No direction for what app intent to fetch. Skipping app intents");
    OUTLINED_FUNCTION_3_0((uint64_t)v94);
  }

  uint64_t v97 = v1[56];

  outlined destroy of CoreSignalTypes?(v97, &demangling cache variable for type metadata for IntentType?);
  swift_bridgeObjectRelease(v1[29]);
  uint64_t v98 = v1[56];
  uint64_t v99 = v1[54];
  uint64_t v100 = v1[55];
  uint64_t v101 = v1[53];
  uint64_t v102 = v1[50];
  uint64_t v103 = v1[47];
  uint64_t v104 = v1[44];
  uint64_t v105 = v1[41];
  swift_task_dealloc(v1[57]);
  swift_task_dealloc(v98);
  swift_task_dealloc(v100);
  swift_task_dealloc(v99);
  swift_task_dealloc(v101);
  swift_task_dealloc(v102);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  swift_task_dealloc(v105);
  return ((uint64_t (*)(void *))v1[1])(_swiftEmptyArrayStorage);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  OUTLINED_FUNCTION_25_2();
  uint64_t v1 = *(void *)(v0 + 536);
  uint64_t v2 = *(void *)(v0 + 328);
  OUTLINED_FUNCTION_24_2();
  *(void *)(v4 + 552) = v3;
  OUTLINED_FUNCTION_49_1(v5);
  swift_release(v1);
  OUTLINED_FUNCTION_8();
  outlined destroy of CoreSignalTypes?( v2,  &demangling cache variable for type metadata for TimeoutBehaviour<AppIntentDetails, Any>?);
  OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_5_2(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  outlined destroy of CoreSignalTypes?( *(void *)(v0 + 448),  &demangling cache variable for type metadata for IntentType?);
  swift_bridgeObjectRelease(*(void *)(v0 + 232));
  uint64_t v1 = *(void *)(v0 + 552);
  uint64_t v2 = *(void *)(v0 + 448);
  uint64_t v4 = *(void *)(v0 + 432);
  uint64_t v3 = *(void *)(v0 + 440);
  uint64_t v5 = *(void *)(v0 + 424);
  uint64_t v6 = *(void *)(v0 + 400);
  uint64_t v7 = *(void *)(v0 + 376);
  uint64_t v8 = *(void *)(v0 + 352);
  uint64_t v9 = *(void *)(v0 + 328);
  swift_task_dealloc(*(void *)(v0 + 456));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t closure #2 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:)@<X0>( void **a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = *a1;
  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v8, (uint64_t)static Logger.appIntentsSuggestions);
  id v9 = v7;
  swift_bridgeObjectRetain_n(a3, 2LL);
  id v10 = v9;
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v29 = swift_slowAlloc(96LL, -1LL);
    uint64_t v33 = v29;
    *(_DWORD *)uint64_t v13 = 136315650;
    unint64_t v30 = a4;
    log = v11;
    id v14 = [v10 identifier];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    unint64_t v17 = v16;

    uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v13 + 4);

    swift_bridgeObjectRelease(v17);
    os_log_type_t type = v12;
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain(a3);
    uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v13 + 14);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v13 + 22) = 2080;
    id v18 = v10;
    id v19 = [v18 description];
    uint64_t v20 = a2;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    unint64_t v23 = v22;

    uint64_t v24 = v21;
    a2 = v20;
    uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v23, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v13 + 24);

    a4 = v30;
    swift_bridgeObjectRelease(v23);
    _os_log_impl(&dword_0, log, type, "Got actions %s for: %s. Details: %s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy(v29, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  *a4 = a2;
  a4[1] = a3;
  a4[2] = (uint64_t)v10;
  id v25 = v10;
  return swift_bridgeObjectRetain(a3);
}

void Array<A>.indexByType()()
{
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for TypeIdentifier(0LL);
  uint64_t v54 = *(void *)(v3 - 8);
  uint64_t v55 = v3;
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_78_0();
  uint64_t v53 = v4;
  uint64_t v60 = OUTLINED_FUNCTION_97_0();
  uint64_t v52 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  OUTLINED_FUNCTION_78_0();
  uint64_t v51 = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TypedValue?);
  uint64_t v7 = __chkstk_darwin(v6);
  id v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v41 - v10;
  uint64_t v12 = type metadata accessor for RetrievedContext(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_57_1();
  uint64_t v14 = *(void *)(v2 + 16);
  if (v14)
  {
    uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
    uint64_t v16 = (v15 + 32) & ~v15;
    uint64_t v17 = v2 + v16;
    uint64_t v18 = *(void *)(v13 + 72);
    __int128 v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
    uint64_t v48 = v16;
    uint64_t v45 = v15 | 7;
    uint64_t v46 = v18 + v16;
    uint64_t v42 = v2;
    OUTLINED_FUNCTION_26_1();
    id v19 = _swiftEmptyArrayStorage;
    __int128 v43 = xmmword_3C030;
    uint64_t v49 = v11;
    uint64_t v50 = v9;
    uint64_t v47 = v18;
    uint64_t v44 = v13;
    do
    {
      uint64_t v61 = v19;
      uint64_t v20 = v59;
      uint64_t v21 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v59)(v0, v17, v12);
      RetrievedContext.typedValue.getter(v21);
      outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)( (uint64_t)v11,  (uint64_t)v9,  &demangling cache variable for type metadata for TypedValue?);
      uint64_t v22 = v60;
      if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1LL, v60) == 1)
      {
        outlined destroy of CoreSignalTypes?((uint64_t)v11, &demangling cache variable for type metadata for TypedValue?);
        OUTLINED_FUNCTION_52_1(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
        id v19 = v61;
      }

      else
      {
        uint64_t v23 = v52;
        uint64_t v24 = v12;
        uint64_t v25 = v51;
        uint64_t v26 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v52 + 32))(v51, v9, v22);
        uint64_t v27 = v53;
        uint64_t v28 = TypedValue.typeIdentifier.getter(v26);
        uint64_t v29 = TypeIdentifier.debugDescription.getter(v28);
        uint64_t v57 = v30;
        uint64_t v58 = v29;
        (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v27, v55);
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RetrievedContext>);
        uint64_t v32 = swift_allocObject(v31, v46, v45);
        *(_OWORD *)(v32 + ++*(void *)(v0 + 16) = v43;
        uint64_t v56 = v32;
        v20(v32 + v48, v0, v24);
        uint64_t v33 = v25;
        uint64_t v12 = v24;
        uint64_t v13 = v44;
        uint64_t v11 = v49;
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v33, v22);
        outlined destroy of CoreSignalTypes?((uint64_t)v11, &demangling cache variable for type metadata for TypedValue?);
        OUTLINED_FUNCTION_52_1(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
        id v19 = v61;
        if ((swift_isUniquelyReferenced_nonNull_native(v61) & 1) == 0)
        {
          OUTLINED_FUNCTION_103(0LL, v19[2] + 1LL);
          id v19 = v38;
        }

        unint64_t v35 = v19[2];
        unint64_t v34 = v19[3];
        if (v35 >= v34 >> 1)
        {
          BOOL v39 = OUTLINED_FUNCTION_100_0(v34);
          OUTLINED_FUNCTION_103(v39, v35 + 1);
          id v19 = v40;
        }

        v19[2] = v35 + 1;
        unint64_t v36 = &v19[3 * v35];
        uint64_t v37 = v57;
        v36[4] = v58;
        v36[5] = v37;
        v36[6] = v56;
        id v9 = v50;
        uint64_t v18 = v47;
      }

      v17 += v18;
      --v14;
    }

    while (v14);
    swift_bridgeObjectRelease(v42);
  }

  else
  {
    id v19 = _swiftEmptyArrayStorage;
  }

  specialized Dictionary.init<A>(_:uniquingKeysWith:)( (uint64_t)v19,  &demangling cache variable for type metadata for _DictionaryStorage<String, [RetrievedContext]>,  (void (*)(uint64_t, uint64_t, void **))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
  OUTLINED_FUNCTION_57_0();
}

uint64_t closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:)( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 264) = a5;
  *(void *)(v6 + 272) = a6;
  *(void *)(v6 + 248) = a3;
  *(void *)(v6 + 256) = a4;
  *(void *)(v6 + 240) = a2;
  uint64_t v8 = type metadata accessor for Locale(0LL);
  *(void *)(v6 + 280) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v6 + 288) = v9;
  uint64_t v10 = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *a1;
  *(void *)(v6 + 296) = v10;
  *(void *)(v6 + 304) = v11;
  *(_OWORD *)(v6 + 312) = *(_OWORD *)(a1 + 1);
  return swift_task_switch( closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:),  0LL,  0LL);
}

uint64_t closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:)()
{
  id v1 = [*(id *)(v0 + 320) identifier];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v4 = v3;

  *(void *)(v0 + 328) = v2;
  *(void *)(v0 + 336) = v4;
  Array<A>.indexByName()();
  uint64_t v6 = v5;
  *(void *)(v0 + 344) = v5;
  uint64_t v7 = (void *)OUTLINED_FUNCTION_50_1((uint64_t)&async function pointer to specialized LinkClientResolver.getAppIntentAction(from:for:withParameters:andSalientEntities:));
  *(void *)(v0 + 352) = v7;
  *uint64_t v7 = v0;
  v7[1] = closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:);
  return v9(*(void *)(v0 + 320), *(void *)(v0 + 304), *(void *)(v0 + 312), v6, *(void *)(v0 + 256));
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  OUTLINED_FUNCTION_25_2();
  v2[20] = v0;
  v2[21] = v1;
  v2[22] = v3;
  v2[23] = v4;
  OUTLINED_FUNCTION_24_2();
  *(void *)(v7 + 360) = v5;
  *(void *)(v7 + 368) = v6;
  OUTLINED_FUNCTION_49_1(v8);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_11_1(v9, v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  OUTLINED_FUNCTION_22_2(*(void *)(*(void *)v0 + 384LL));
  OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_11_1(v1, v2, v3);
}

{
  uint64_t v0;
  __int128 *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  os_log_type_t v17;
  uint64_t v18;
  os_log_s *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  os_log_type_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint8_t *v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  os_log_type_t v71;
  os_log_s *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v1 = (__int128 *)(v0 + 120);
  uint64_t v2 = *(void **)(v0 + 264);
  if (*(void *)(v0 + 144))
  {
    uint64_t v4 = *(void *)(v0 + 288);
    uint64_t v3 = *(void *)(v0 + 296);
    uint64_t v73 = *(void *)(v0 + 280);
    uint64_t v75 = v0 + 216;
    outlined init with take of LinkDialogIdProvider(v1, v0 + 80);
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v6 = *(void *)(v0 + 112);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 80), v5);
    uint64_t v7 = v2[3];
    uint64_t v8 = v2[4];
    __swift_project_boxed_opaque_existential_1(v2, v7);
    dispatch thunk of EnvironmentSnapshot.siriLocale.getter(v7, v8);
    uint64_t v9 = dispatch thunk of SiriSuggestions.DisplayRepresentable.getDisplay(for:)(v3, v5, v6);
    uint64_t v11 = v10;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v73);
    if (v11) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 1819047278LL;
    }
    if (v11) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = 0xE400000000000000LL;
    }
    __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 80));
    uint64_t v14 = one-time initialization token for appIntentsSuggestions;
    uint64_t v15 = *(id *)(v0 + 320);
    OUTLINED_FUNCTION_26_1();
    OUTLINED_FUNCTION_70();
    if (v14 != -1) {
      swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
    }
    uint64_t v16 = OUTLINED_FUNCTION_45();
    uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.appIntentsSuggestions);
    uint64_t v18 = OUTLINED_FUNCTION_70();
    id v19 = (os_log_s *)Logger.logObject.getter(v18);
    uint64_t v20 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_20_1(v19))
    {
      uint64_t v21 = (uint8_t *)OUTLINED_FUNCTION_16_0(12LL);
      uint64_t v22 = OUTLINED_FUNCTION_16_0(32LL);
      uint64_t v76 = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      OUTLINED_FUNCTION_70();
      *(void *)(v0 + 2++*(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v76);
      OUTLINED_FUNCTION_75_0(v75, v0 + 224, (uint64_t)(v21 + 4));
      OUTLINED_FUNCTION_34_1(v13);
      OUTLINED_FUNCTION_12_3(&dword_0, v19, v20, "dialog =%s", v21);
      OUTLINED_FUNCTION_9_3(v22, v23, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_3_0(v22);
      OUTLINED_FUNCTION_3_0((uint64_t)v21);
    }

    else
    {
      OUTLINED_FUNCTION_51(v13);
    }

    uint64_t v30 = *(void *)(v0 + 376);
    uint64_t v31 = *(void *)(v0 + 312);
    uint64_t v32 = *(void **)(v0 + 320);
    OUTLINED_FUNCTION_58_0(*(void *)(v0 + 368));
    OUTLINED_FUNCTION_58_0(v30);
    OUTLINED_FUNCTION_58_0(v31);
    uint64_t v33 = v32;
    OUTLINED_FUNCTION_58_0(v13);
    Logger.logObject.getter(v33);
    unint64_t v34 = OUTLINED_FUNCTION_68();
    unint64_t v35 = OUTLINED_FUNCTION_56_1(v34);
    uint64_t v37 = *(void *)(v0 + 368);
    unint64_t v36 = *(void *)(v0 + 376);
    if (v35)
    {
      os_log_t v72 = (os_log_s *)v33;
      char v38 = *(void *)(v0 + 360);
      BOOL v39 = *(void *)(v0 + 312);
      BOOL v40 = *(void **)(v0 + 320);
      uint64_t v71 = v17;
      uint64_t v41 = *(void *)(v0 + 304);
      uint64_t v74 = v12;
      uint64_t v42 = (uint8_t *)OUTLINED_FUNCTION_16_0(12LL);
      uint64_t v70 = OUTLINED_FUNCTION_16_0(32LL);
      uint64_t v76 = v70;
      OUTLINED_FUNCTION_63_1(4.8149e-34);
      *(void *)(v0 + ++*(void *)(v0 + 16) = v38;
      *(void *)(v0 + 24) = v37;
      *(void *)(v0 + 32) = v36;
      *(void *)(v0 + 40) = v41;
      *(void *)(v0 + 48) = v39;
      *(void *)(v0 + 56) = v40;
      *(void *)(v0 + 64) = v74;
      *(void *)(v0 + 72) = v13;
      OUTLINED_FUNCTION_47_0();
      OUTLINED_FUNCTION_47_1();
      OUTLINED_FUNCTION_40_2();
      __int128 v43 = v40;
      OUTLINED_FUNCTION_70();
      uint64_t v44 = String.init<A>(describing:)(v0 + 16, &type metadata for SuggestionAppIntent);
      *(void *)(v0 + 208) = OUTLINED_FUNCTION_108(v44, v45, v46, v47, v48, v49, v50, v51, v68, v0 + 16);
      OUTLINED_FUNCTION_104(v0 + 208, v75, v52, v53, v54, v55, v56, v57, v69);
      OUTLINED_FUNCTION_102();
      OUTLINED_FUNCTION_51(v37);
      OUTLINED_FUNCTION_51(v36);
      OUTLINED_FUNCTION_51(v39);

      OUTLINED_FUNCTION_51(v13);
      OUTLINED_FUNCTION_12_3(&dword_0, v72, v71, "Return suggestionAppIntent =%s", v42);
      OUTLINED_FUNCTION_9_3(v70, v58, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_3_0(v70);
      __int128 v59 = (uint64_t)v42;
      uint64_t v12 = v74;
      OUTLINED_FUNCTION_3_0(v59);
    }

    else
    {
      uint64_t v60 = *(void **)(v0 + 320);
      OUTLINED_FUNCTION_51(*(void *)(v0 + 312));

      OUTLINED_FUNCTION_51(v13);
      OUTLINED_FUNCTION_51(v36);
      OUTLINED_FUNCTION_51(v37);
    }

    uint64_t v61 = *(void *)(v0 + 360);
    uint64_t v63 = *(void *)(v0 + 312);
    uint64_t v62 = *(void **)(v0 + 320);
    uint64_t v64 = *(void *)(v0 + 304);
    unint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    int64_t v66 = OUTLINED_FUNCTION_1(v65, 64LL);
    *(_OWORD *)(v66 + ++*(void *)(v0 + 16) = xmmword_3C030;
    *(void *)(v66 + 56) = &type metadata for SuggestionAppIntent;
    uint64_t v67 = OUTLINED_FUNCTION_1((uint64_t)&unk_49778, 80LL);
    *(void *)(v66 + 32) = v67;
    *(void *)(v67 + ++*(void *)(v0 + 16) = v61;
    *(_OWORD *)(v67 + 24) = *(_OWORD *)(v0 + 368);
    *(void *)(v67 + 40) = v64;
    *(void *)(v67 + 48) = v63;
    *(void *)(v67 + 56) = v62;
    *(void *)(v67 + 64) = v12;
    *(void *)(v67 + 72) = v13;

    OUTLINED_FUNCTION_101_0();
    return OUTLINED_FUNCTION_21_1(v66, *(uint64_t (**)(void))(v0 + 8));
  }

  else
  {
    uint64_t v25 = *(void *)(v0 + 368);
    uint64_t v24 = *(void *)(v0 + 376);
    outlined destroy of CoreSignalTypes?( (uint64_t)v1,  &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
    uint64_t v26 = v2[3];
    uint64_t v27 = v2[4];
    __swift_project_boxed_opaque_existential_1(v2, v26);
    dispatch thunk of EnvironmentSnapshot.siriLocale.getter(v26, v27);
    uint64_t v28 = (void *)swift_task_alloc(dword_4E8AC);
    *(void *)(v0 + 392) = v28;
    *uint64_t v28 = v0;
    v28[1] = closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:);
    return MetaDataSourcedAppIntentResolver.getSuggestionDialog(appIntentAction:details:siriLocale:)( *(void *)(v0 + 360),  v25,  v24,  *(void *)(v0 + 304),  *(void *)(v0 + 312),  *(void *)(v0 + 320),  *(void *)(v0 + 296));
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  OUTLINED_FUNCTION_25_2();
  uint64_t v2 = *(void *)(v0 + 288);
  id v1 = *(void *)(v0 + 296);
  OUTLINED_FUNCTION_24_2();
  *(void *)(v5 + 400) = v3;
  *(void *)(v5 + 408) = v4;
  OUTLINED_FUNCTION_49_1(v6);
  OUTLINED_FUNCTION_62_1(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_5_2(v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  char **p_name;
  uint64_t v3;
  os_log_s *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  BOOL v15;
  void *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char *v24;
  id v25;
  uint64_t v26;
  os_log_s *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  os_log_s *v37;
  os_log_type_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint8_t *v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  os_log_s *v73;
  uint64_t v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  id v1 = *(void *)(v0 + 408);
  if (v1)
  {
    uint64_t v74 = v0 + 224;
    p_name = &stru_4CFF8.name;
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
    }
    uint64_t v3 = OUTLINED_FUNCTION_45();
    uint64_t v4 = (os_log_s *)__swift_project_value_buffer(v3, (uint64_t)static Logger.appIntentsSuggestions);
    uint64_t v5 = OUTLINED_FUNCTION_58_0(v1);
    Logger.logObject.getter(v5);
    uint64_t v6 = OUTLINED_FUNCTION_32_2();
    if (OUTLINED_FUNCTION_43_1(v6))
    {
      uint64_t v7 = *(void *)(v0 + 400);
      uint64_t v8 = (_DWORD *)OUTLINED_FUNCTION_16_0(12LL);
      uint64_t v9 = OUTLINED_FUNCTION_16_0(32LL);
      uint64_t v77 = v9;
      *uint64_t v8 = 136315138;
      OUTLINED_FUNCTION_35();
      *(void *)(v0 + 224) = OUTLINED_FUNCTION_61_1(v7, v10, &v77);
      p_name = (char **)(&stru_4CFF8 + 8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v74, v0 + 232, v8 + 1);
      OUTLINED_FUNCTION_34_1(v1);
      OUTLINED_FUNCTION_11_3(&dword_0, v4, v11, "computedDialog=%s");
      OUTLINED_FUNCTION_9_3(v9, v12, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_3_0(v9);
      OUTLINED_FUNCTION_3_0((uint64_t)v8);
    }

    else
    {
      OUTLINED_FUNCTION_51(v1);
    }

    uint64_t v76 = *(void *)(v0 + 400);
    uint64_t v24 = p_name[478];
    uint64_t v25 = *(id *)(v0 + 320);
    OUTLINED_FUNCTION_26_1();
    OUTLINED_FUNCTION_35();
    if (v24 != (char *)-1LL) {
      swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
    }
    __swift_project_value_buffer(v3, (uint64_t)static Logger.appIntentsSuggestions);
    uint64_t v26 = OUTLINED_FUNCTION_35();
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_20_1(v27))
    {
      uint64_t v28 = (_DWORD *)OUTLINED_FUNCTION_16_0(12LL);
      uint64_t v29 = OUTLINED_FUNCTION_16_0(32LL);
      uint64_t v77 = v29;
      *uint64_t v28 = 136315138;
      OUTLINED_FUNCTION_35();
      *(void *)(v0 + 2++*(void *)(v0 + 16) = OUTLINED_FUNCTION_61_1(v76, v30, &v77);
      OUTLINED_FUNCTION_75_0(v0 + 216, v74, (uint64_t)(v28 + 1));
      OUTLINED_FUNCTION_34_1(v1);
      OUTLINED_FUNCTION_11_3(&dword_0, v27, v31, "dialog =%s");
      OUTLINED_FUNCTION_9_3(v29, v32, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_3_0(v29);
      OUTLINED_FUNCTION_3_0((uint64_t)v28);
    }

    else
    {
      OUTLINED_FUNCTION_51(v1);
    }

    uint64_t v33 = *(void *)(v0 + 376);
    unint64_t v34 = *(void *)(v0 + 312);
    unint64_t v35 = *(void **)(v0 + 320);
    OUTLINED_FUNCTION_58_0(*(void *)(v0 + 368));
    OUTLINED_FUNCTION_58_0(v33);
    OUTLINED_FUNCTION_58_0(v34);
    unint64_t v36 = v35;
    OUTLINED_FUNCTION_58_0(v1);
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    char v38 = static os_log_type_t.debug.getter();
    BOOL v39 = os_log_type_enabled(v37, v38);
    uint64_t v41 = *(void *)(v0 + 368);
    BOOL v40 = *(void *)(v0 + 376);
    if (v39)
    {
      uint64_t v42 = *(void *)(v0 + 360);
      uint64_t v73 = v37;
      __int128 v43 = *(void *)(v0 + 312);
      uint64_t v44 = *(void **)(v0 + 320);
      uint64_t v75 = v38;
      uint64_t v45 = *(void *)(v0 + 304);
      uint64_t v46 = (uint8_t *)OUTLINED_FUNCTION_16_0(12LL);
      os_log_t v72 = OUTLINED_FUNCTION_16_0(32LL);
      uint64_t v77 = v72;
      OUTLINED_FUNCTION_63_1(4.8149e-34);
      *(void *)(v0 + ++*(void *)(v0 + 16) = v42;
      *(void *)(v0 + 24) = v41;
      *(void *)(v0 + 32) = v40;
      *(void *)(v0 + 40) = v45;
      *(void *)(v0 + 48) = v43;
      *(void *)(v0 + 56) = v44;
      *(void *)(v0 + 64) = v76;
      *(void *)(v0 + 72) = v1;
      OUTLINED_FUNCTION_47_0();
      OUTLINED_FUNCTION_47_1();
      OUTLINED_FUNCTION_70();
      uint64_t v47 = v44;
      OUTLINED_FUNCTION_35();
      uint64_t v48 = String.init<A>(describing:)(v0 + 16, &type metadata for SuggestionAppIntent);
      *(void *)(v0 + 208) = OUTLINED_FUNCTION_108(v48, v49, v50, v51, v52, v53, v54, v55, v70, v0 + 16);
      OUTLINED_FUNCTION_104(v0 + 208, v0 + 216, v56, v57, v58, v59, v60, v61, v71);
      OUTLINED_FUNCTION_102();
      OUTLINED_FUNCTION_51(v41);
      OUTLINED_FUNCTION_51(v40);
      OUTLINED_FUNCTION_51(v43);

      OUTLINED_FUNCTION_51(v1);
      OUTLINED_FUNCTION_12_3(&dword_0, v73, v75, "Return suggestionAppIntent =%s", v46);
      OUTLINED_FUNCTION_9_3(v72, v62, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_3_0(v72);
      OUTLINED_FUNCTION_3_0((uint64_t)v46);
    }

    else
    {
      uint64_t v63 = *(void **)(v0 + 320);
      OUTLINED_FUNCTION_51(*(void *)(v0 + 312));

      OUTLINED_FUNCTION_51(v1);
      OUTLINED_FUNCTION_51(v40);
      OUTLINED_FUNCTION_51(v41);
    }

    uint64_t v64 = *(void *)(v0 + 360);
    unint64_t v65 = *(void *)(v0 + 312);
    uint64_t v16 = *(void **)(v0 + 320);
    int64_t v66 = *(void *)(v0 + 304);
    uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v23 = (void *)OUTLINED_FUNCTION_1(v67, 64LL);
    *((_OWORD *)v23 + 1) = xmmword_3C030;
    v23[7] = &type metadata for SuggestionAppIntent;
    uint64_t v68 = OUTLINED_FUNCTION_1((uint64_t)&unk_49778, 80LL);
    v23[4] = v68;
    *(void *)(v68 + ++*(void *)(v0 + 16) = v64;
    *(_OWORD *)(v68 + 24) = *(_OWORD *)(v0 + 368);
    *(void *)(v68 + 40) = v66;
    *(void *)(v68 + 48) = v65;
    *(void *)(v68 + 56) = v16;
    *(void *)(v68 + 64) = v76;
    *(void *)(v68 + 72) = v1;
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 376));
    OUTLINED_FUNCTION_2();
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
    }
    uint64_t v13 = *(void **)(v0 + 320);
    uint64_t v14 = OUTLINED_FUNCTION_45();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.appIntentsSuggestions);
    Logger.logObject.getter(v13);
    OUTLINED_FUNCTION_68();
    uint64_t v15 = OUTLINED_FUNCTION_20_1((os_log_s *)v13);
    uint64_t v16 = *(void **)(v0 + 320);
    if (v15)
    {
      uint64_t v17 = (_DWORD *)OUTLINED_FUNCTION_16_0(12LL);
      uint64_t v18 = OUTLINED_FUNCTION_16_0(32LL);
      uint64_t v77 = v18;
      *uint64_t v17 = 136315138;
      static String._unconditionallyBridgeFromObjectiveC(_:)([v16 identifier]);
      OUTLINED_FUNCTION_95_0();
      *(void *)(v0 + 192) = OUTLINED_FUNCTION_44_2(v19, v20, &v77);
      OUTLINED_FUNCTION_75_0(v0 + 192, v0 + 200, (uint64_t)(v17 + 1));
      OUTLINED_FUNCTION_88_0();

      OUTLINED_FUNCTION_11_3(&dword_0, (os_log_s *)v13, v21, "Not suggesting %s since dialog cannot be determined");
      OUTLINED_FUNCTION_9_3(v18, v22, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_3_0(v18);
      OUTLINED_FUNCTION_3_0((uint64_t)v17);

      uint64_t v23 = _swiftEmptyArrayStorage;
    }

    else
    {

      uint64_t v23 = _swiftEmptyArrayStorage;
      uint64_t v16 = v13;
    }
  }

  OUTLINED_FUNCTION_101_0();
  return OUTLINED_FUNCTION_21_1((uint64_t)v23, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22)
{
  a21 = v24;
  a22 = v25;
  a20 = v23;
  if (v23[46])
  {
    uint64_t v26 = v23[23];
    uint64_t v28 = v23[39];
    uint64_t v27 = (void *)v23[40];
    uint64_t v29 = v23[38];
    uint64_t v30 = (void *)v23[33];
    swift_bridgeObjectRelease(v23[42]);
    v23[47] = v26;
    type metadata accessor for MetaDataSourcedAppIntentResolver();
    if ((static MetaDataSourcedAppIntentResolver.disruptsUserFlow(appIntentDetails:environmentSnapshot:)( v29,  v28,  v27,  v30) & 1) == 0)
    {
      uint64_t v54 = (void *)swift_task_alloc(dword_4E9D4);
      v23[48] = v54;
      *uint64_t v54 = v23;
      v54[1] = closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:);
      OUTLINED_FUNCTION_29_1();
      return MetaDataSourcedAppIntentResolver.getDialogOverride(_:)(v55, v56);
    }

    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_2();
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
    }
    uint64_t v31 = (void *)v23[40];
    uint64_t v32 = OUTLINED_FUNCTION_45();
    uint64_t v33 = (os_log_s *)__swift_project_value_buffer(v32, (uint64_t)static Logger.appIntentsSuggestions);
    Logger.logObject.getter(v31);
    os_log_type_t v34 = OUTLINED_FUNCTION_32_2();
    BOOL v35 = OUTLINED_FUNCTION_43_1(v34);
    unint64_t v36 = (os_log_s *)v23[40];
    if (v35)
    {
      a10 = v23 + 29;
      uint64_t v37 = (_DWORD *)OUTLINED_FUNCTION_16_0(12LL);
      uint64_t v38 = OUTLINED_FUNCTION_16_0(32LL);
      a11 = v38;
      *uint64_t v37 = 136315138;
      a9 = v37 + 1;
      static String._unconditionallyBridgeFromObjectiveC(_:)(-[os_log_s identifier](v36, "identifier"));
      OUTLINED_FUNCTION_95_0();
      v23[29] = OUTLINED_FUNCTION_44_2(v39, v40, &a11);
      OUTLINED_FUNCTION_75_0((uint64_t)(v23 + 29), (uint64_t)(v23 + 30), (uint64_t)(v37 + 1));
      OUTLINED_FUNCTION_88_0();

      OUTLINED_FUNCTION_11_3(&dword_0, v33, v41, "Not suggesting %s since it disrupts users flow");
      OUTLINED_FUNCTION_9_3(v38, v42, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_3_0(v38);
      OUTLINED_FUNCTION_3_0((uint64_t)v37);
    }

    else
    {

      unint64_t v36 = v33;
    }
  }

  else
  {
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
    }
    uint64_t v43 = OUTLINED_FUNCTION_45();
    uint64_t v44 = __swift_project_value_buffer(v43, (uint64_t)static Logger.appIntentsSuggestions);
    uint64_t v45 = OUTLINED_FUNCTION_26_1();
    uint64_t v46 = (os_log_s *)v44;
    Logger.logObject.getter(v45);
    os_log_type_t v47 = OUTLINED_FUNCTION_38_2();
    BOOL v48 = OUTLINED_FUNCTION_64_1(v47);
    unint64_t v49 = v23[42];
    if (v48)
    {
      uint64_t v50 = v23[41];
      uint64_t v51 = (uint8_t *)OUTLINED_FUNCTION_16_0(12LL);
      uint64_t v52 = OUTLINED_FUNCTION_16_0(32LL);
      a11 = v52;
      *(_DWORD *)uint64_t v51 = 136315138;
      OUTLINED_FUNCTION_40_2();
      v23[25] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v49, &a11);
      OUTLINED_FUNCTION_89((uint64_t)(v23 + 25), (uint64_t)(v23 + 26));
      OUTLINED_FUNCTION_34_1(v49);
      OUTLINED_FUNCTION_12_3(&dword_0, v46, v22, "Siri App Intent could not be determined. Skipping appIntent: %s", v51);
      OUTLINED_FUNCTION_9_3(v52, v53, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_3_0(v52);
      OUTLINED_FUNCTION_3_0((uint64_t)v51);
    }

    else
    {
      OUTLINED_FUNCTION_51(v23[42]);
    }

    unint64_t v36 = (os_log_s *)v23[40];
  }

  OUTLINED_FUNCTION_101_0();
  OUTLINED_FUNCTION_29_1();
  return v59(v58, v59, v60, v61, v62, v63, v64, v65, a9, a10, a11, a12, a13, a14);
}

void Array<A>.indexByName()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AppIntentFilter.AppIntentParameter(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    uint64_t v25 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v6, 0);
    uint64_t v8 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v20 = *(void *)(v3 + 72);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v10 = v3;
    do
    {
      uint64_t v11 = v9(v5, v8, v2);
      *(void *)&__int128 v21 = AppIntentFilter.AppIntentParameter.name.getter(v11);
      *((void *)&v21 + 1) = v12;
      AppIntentFilter.AppIntentParameter.value.getter(v21);
      OUTLINED_FUNCTION_62_1((uint64_t)v5, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
      uint64_t v7 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v7[2] + 1LL, 1);
        uint64_t v7 = v25;
      }

      unint64_t v14 = v7[2];
      unint64_t v13 = v7[3];
      if (v14 >= v13 >> 1)
      {
        BOOL v19 = OUTLINED_FUNCTION_100_0(v13);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)v19,  v14 + 1,  1);
        uint64_t v7 = v25;
      }

      v7[2] = v14 + 1;
      uint64_t v15 = &v7[7 * v14];
      __int128 v16 = v21;
      __int128 v17 = v22;
      __int128 v18 = v23;
      v15[10] = v24;
      *((_OWORD *)v15 + 3) = v17;
      *((_OWORD *)v15 + 4) = v18;
      *((_OWORD *)v15 + 2) = v16;
      v8 += v20;
      --v6;
      uint64_t v3 = v10;
    }

    while (v6);
  }

  specialized Dictionary.init<A>(_:uniquingKeysWith:)( (uint64_t)v7,  &demangling cache variable for type metadata for _DictionaryStorage<String, SiriSuggestions.DisplayRepresentable>,  (void (*)(uint64_t, uint64_t, void **))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
  OUTLINED_FUNCTION_57_0();
}

uint64_t MetaDataSourcedAppIntentResolver.getDialogOverride(_:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  return swift_task_switch(MetaDataSourcedAppIntentResolver.getDialogOverride(_:), 0LL, 0LL);
}

uint64_t MetaDataSourcedAppIntentResolver.getDialogOverride(_:)()
{
  uint64_t v3 = OUTLINED_FUNCTION_18_3(*(void **)(v2 + 136));
  *(void *)(v2 + 144) = v3;
  *(void *)(v2 + 152) = v4;
  *(void *)(v2 + 160) = swift_getObjectType(v3);
  uint64_t v5 = dispatch thunk of CandidateSuggestion.context.getter(v0, v1);
  *(void *)(v2 + 168) = v5;
  *(void *)(v2 + 176) = v6;
  uint64_t ObjectType = swift_getObjectType(v5);
  *(void *)(v2 + 184) = ObjectType;
  OUTLINED_FUNCTION_27(ObjectType);
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_40();
  return OUTLINED_FUNCTION_5_2(v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Context.getTargetOwner()(*(void *)(v0 + 184), *(void *)(v0 + 176));
  OUTLINED_FUNCTION_73_0();
  OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_11_1(v1, v2, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *boxed_opaque_existential_1;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(v0 + 2, v3);
  v0[10] = v3;
  v0[11] = *(void *)(v4 + 8);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 7);
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v3 - 8) + 16LL))(boxed_opaque_existential_1, v5, v3);
  dispatch thunk of Actor.unownedExecutor.getter(v1, *(void *)(*(void *)(v2 + 8) + 8LL));
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_40();
  return swift_task_switch(v7, v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Context.getParam(for:key:)(v0 + 12, v0 + 7, 0xD000000000000025LL, 0x800000000003EF40LL, v0[20], v0[19]);
  OUTLINED_FUNCTION_73_0();
  __swift_destroy_boxed_opaque_existential_1(v0 + 7);
  __swift_destroy_boxed_opaque_existential_1(v0 + 2);
  OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_5_2(v1, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = *(void *)(v0 + 128);
  if (*(void *)(v0 + 120))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable);
    if ((swift_dynamicCast(v1, v0 + 96, (char *)&type metadata for Any + 8, v2, 6LL) & 1) == 0)
    {
      uint64_t v3 = *(void *)(v0 + 128);
      *(void *)(v3 + 32) = 0LL;
      *(_OWORD *)uint64_t v3 = 0u;
      *(_OWORD *)(v3 + ++*(void *)(v0 + 16) = 0u;
    }
  }

  else
  {
    outlined destroy of CoreSignalTypes?(v0 + 96, &demangling cache variable for type metadata for Any?);
    *(_OWORD *)uint64_t v1 = 0u;
    *(_OWORD *)(v1 + ++*(void *)(v0 + 16) = 0u;
    *(void *)(v1 + 32) = 0LL;
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *MetaDataSourcedAppIntentResolver.deinit()
{
  return v0;
}

uint64_t MetaDataSourcedAppIntentResolver.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

void protocol witness for LinkClientResolver.linkClient.getter in conformance MetaDataSourcedAppIntentResolver( uint64_t a1@<X8>)
{
}

uint64_t protocol witness for InternalResolver.resolverTypeOperand.getter in conformance MetaDataSourcedAppIntentResolver()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96LL);
  swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 104LL));
  return v1;
}

uint64_t protocol witness for InternalResolver.resolveParameter(parameter:suggestion:interaction:environment:) in conformance MetaDataSourcedAppIntentResolver( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_4E8B4);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v4;
  v7[1] = protocol witness for InternalResolver.resolveParameter(parameter:suggestion:interaction:environment:) in conformance MetaDataSourcedAppIntentResolver;
  return MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:)( (uint64_t)v7,  a2,  v8,  a4);
}

uint64_t protocol witness for InternalResolver.resolveParameter(parameter:suggestion:interaction:environment:) in conformance MetaDataSourcedAppIntentResolver( uint64_t a1)
{
  return v1[1](a1);
}

uint64_t partial apply for closure #1 in static PhraseUtils.getHydratedPhrase(phraseTemplate:parameters:locale:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in static PhraseUtils.getHydratedPhrase(phraseTemplate:parameters:locale:)( a1,  *(void *)(v2 + 16),  a2);
}

uint64_t partial apply for closure #1 in implicit closure #3 in MetaDataSourcedAppIntentResolver.getSuggestionDialogFromAssistantIntentPhrase(appIntentAction:details:siriLocale:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in implicit closure #3 in MetaDataSourcedAppIntentResolver.getSuggestionDialogFromAssistantIntentPhrase(appIntentAction:details:siriLocale:)( a1,  *(void *)(v2 + 16),  a2);
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)( uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease(a1);
  }
  uint64_t v29 = (__int128 *)&v28;
  uint64_t v6 = a1 + 32;
  swift_bridgeObjectRetain(a1);
  while (1)
  {
    outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)( v6,  (uint64_t)v27,  &demangling cache variable for type metadata for (String, SiriSuggestions.DisplayRepresentable));
    uint64_t v7 = v27[0];
    uint64_t v8 = v27[1];
    outlined init with take of LinkDialogIdProvider(v29, (uint64_t)v26);
    uint64_t v9 = *a3;
    unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
    uint64_t v12 = *(void *)(v9 + 16);
    BOOL v13 = (v10 & 1) == 0;
    if (__OFADD__(v12, v13)) {
      break;
    }
    char v14 = v10;
    if (*(void *)(v9 + 24) >= v12 + v13)
    {
      if ((a2 & 1) != 0)
      {
        if ((v10 & 1) != 0) {
          goto LABEL_10;
        }
      }

      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, SiriSuggestions.DisplayRepresentable>);
        _NativeDictionary.copy()();
        if ((v14 & 1) != 0) {
          goto LABEL_10;
        }
      }
    }

    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
      unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
      if ((v14 & 1) != (v16 & 1)) {
        goto LABEL_20;
      }
      unint64_t v11 = v15;
      if ((v14 & 1) != 0)
      {
LABEL_10:
        outlined init with copy of LinkClient((uint64_t)v26, (uint64_t)v25);
        __swift_destroy_boxed_opaque_existential_1(v26);
        swift_bridgeObjectRelease(v8);
        __int128 v17 = (void *)(*(void *)(*a3 + 56) + 40 * v11);
        __swift_destroy_boxed_opaque_existential_1(v17);
        outlined init with take of LinkDialogIdProvider(v25, (uint64_t)v17);
        goto LABEL_14;
      }
    }

    __int128 v18 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1LL << v11;
    BOOL v19 = (uint64_t *)(v18[6] + 16 * v11);
    *BOOL v19 = v7;
    v19[1] = v8;
    outlined init with take of LinkDialogIdProvider(v26, v18[7] + 40 * v11);
    uint64_t v20 = v18[2];
    BOOL v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_19;
    }
    v18[2] = v22;
LABEL_14:
    v6 += 56LL;
    a2 = 1;
    if (!--v3) {
      return swift_bridgeObjectRelease_n(a1, 2LL);
    }
  }

  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void specialized MutableCollection<>.shuffle<A>(using:)()
{
  uint64_t v37 = v1;
  uint64_t v38 = v2;
  uint64_t v3 = ((uint64_t (*)(void))type metadata accessor for RetrievedContext)(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  BOOL v35 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  os_log_type_t v34 = (char *)&v29 - v7;
  uint64_t v8 = *v0;
  unint64_t v9 = *(void *)(*v0 + 16);
  unint64_t v10 = v9 - 2;
  if (v9 >= 2)
  {
    unint64_t v11 = 0LL;
    unint64_t v30 = v9 - 2;
    uint64_t v31 = v4;
    while (1)
    {
      OUTLINED_FUNCTION_66_0();
      uint64_t v12 = (v36 * (unsigned __int128)v9) >> 64;
      if (v9 > v36 * v9)
      {
        unint64_t v13 = -(uint64_t)v9 % v9;
        if (v13 > v36 * v9)
        {
          do
            OUTLINED_FUNCTION_66_0();
          while (v13 > v36 * v9);
          uint64_t v12 = (v36 * (unsigned __int128)v9) >> 64;
        }
      }

      unint64_t v14 = v11 + v12;
      if (__OFADD__(v11, v12)) {
        break;
      }
      if (v11 != v14)
      {
        unint64_t v15 = *(void *)(v8 + 16);
        if (v11 >= v15) {
          goto LABEL_20;
        }
        char v16 = v0;
        unint64_t v33 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
        unint64_t v17 = v8 + v33;
        uint64_t v18 = v8;
        uint64_t v19 = v3;
        uint64_t v20 = *(void *)(v4 + 72);
        uint64_t v32 = v20 * v11;
        BOOL v21 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
        v21(v34, v17 + v20 * v11, v19);
        if (v14 >= v15) {
          goto LABEL_21;
        }
        uint64_t v22 = v20 * v14;
        v21(v35, v17 + v20 * v14, v19);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
        uint64_t v0 = v16;
        uint64_t *v16 = v18;
        uint64_t v3 = v19;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v18);
          uint64_t v18 = v24;
          uint64_t *v16 = v24;
        }

        uint64_t v4 = v31;
        unint64_t v25 = v33;
        if (v11 >= *(void *)(v18 + 16)) {
          goto LABEL_22;
        }
        unint64_t v26 = v18 + v33 + v32;
        uint64_t v27 = *(void (**)(unint64_t, char *, uint64_t))(v31 + 40);
        v27(v26, v35, v19);
        if (v14 >= *(void *)(*v0 + 16)) {
          goto LABEL_23;
        }
        v27(*v0 + v25 + v22, v34, v19);
        uint64_t v8 = *v0;
        unint64_t v10 = v30;
      }

      --v9;
      if (v11++ == v10) {
        return;
      }
    }

    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }

uint64_t specialized _NativeDictionary.mapValues<A>(_:)( void (*a1)(void *__return_ptr, _BYTE *), uint64_t a2, uint64_t a3)
{
  uint64_t result = static _DictionaryStorage.copy(original:)(a3);
  uint64_t v6 = (void *)result;
  int64_t v7 = 0LL;
  uint64_t v33 = a3;
  uint64_t v10 = *(void *)(a3 + 64);
  uint64_t v9 = a3 + 64;
  uint64_t v8 = v10;
  uint64_t v11 = 1LL << *(_BYTE *)(v9 - 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v8;
  uint64_t v28 = v9;
  int64_t v29 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v14 = result + 64;
  if ((v12 & v8) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v7 << 6))
  {
    uint64_t v20 = (uint64_t *)(*(void *)(v33 + 48) + 16 * i);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    outlined init with copy of ActionParameter(*(void *)(v33 + 56) + 48 * i, (uint64_t)v32);
    swift_bridgeObjectRetain(v22);
    a1(v31, v32);
    if (v3)
    {
      swift_bridgeObjectRelease(v22);
      swift_release(v6);
      outlined destroy of ActionParameter((uint64_t)v32);
      return (uint64_t)v6;
    }

    uint64_t result = outlined destroy of ActionParameter((uint64_t)v32);
    *(void *)(v14 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    __int128 v23 = (void *)(v6[6] + 16 * i);
    void *v23 = v21;
    v23[1] = v22;
    uint64_t v24 = (void *)(v6[7] + 16 * i);
    uint64_t v25 = v31[1];
    *uint64_t v24 = v31[0];
    v24[1] = v25;
    uint64_t v26 = v6[2];
    BOOL v17 = __OFADD__(v26, 1LL);
    uint64_t v27 = v26 + 1;
    if (v17)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }

    v6[2] = v27;
    if (v13) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v17 = __OFADD__(v7++, 1LL);
    if (v17) {
      goto LABEL_25;
    }
    if (v7 >= v29) {
      return (uint64_t)v6;
    }
    unint64_t v18 = *(void *)(v28 + 8 * v7);
    if (!v18) {
      break;
    }
LABEL_13:
    unint64_t v13 = (v18 - 1) & v18;
  }

  int64_t v19 = v7 + 1;
  if (v7 + 1 >= v29) {
    return (uint64_t)v6;
  }
  unint64_t v18 = *(void *)(v28 + 8 * v19);
  if (v18) {
    goto LABEL_12;
  }
  int64_t v19 = v7 + 2;
  if (v7 + 2 >= v29) {
    return (uint64_t)v6;
  }
  unint64_t v18 = *(void *)(v28 + 8 * v19);
  if (v18)
  {
LABEL_12:
    int64_t v7 = v19;
    goto LABEL_13;
  }

  while (1)
  {
    int64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v29) {
      return (uint64_t)v6;
    }
    unint64_t v18 = *(void *)(v28 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_13;
    }
  }

LABEL_26:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_18A00()
{
  return swift_deallocObject(v0, 120LL, 7LL);
}

uint64_t partial apply for closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:)( uint64_t *a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  int64_t v7 = (void *)swift_task_alloc(dword_4E8DC);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v7;
  *int64_t v7 = v2;
  v7[1] = partial apply for closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:);
  return closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:)( a1,  v4,  v5,  v6,  (uint64_t)(v1 + 5),  (uint64_t)(v1 + 10));
}

uint64_t partial apply for closure #3 in MetaDataSourcedAppIntentResolver.resolveParameter(parameter:suggestion:interaction:environment:)()
{
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v0);
}

void instantiation function for generic protocol witness table for MetaDataSourcedAppIntentResolver( uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = v3;
}

uint64_t type metadata accessor for MetaDataSourcedAppIntentResolver()
{
  return objc_opt_self(&OBJC_CLASS____TtC25SiriLinkSuggestionsPlugin32MetaDataSourcedAppIntentResolver);
}

void base witness table accessor for InternalResolver in MetaDataSourcedAppIntentResolver( uint64_t a1, uint64_t a2)
{
}

void base witness table accessor for Wrappable in MetaDataSourcedAppIntentResolver(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_18BB0()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  return swift_deallocObject(v0, 80LL, 7LL);
}

void specialized closure #1 in LinkClientResolver.getParameters(for:withParameters:andSalientEntities:)( void **a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
}

void partial apply for specialized closure #1 in LinkClientResolver.getParameters(for:withParameters:andSalientEntities:)( void **a1@<X0>, void *a2@<X8>)
{
}

void lazy protocol witness table accessor for type MetaDataSourcedAppIntentResolver and conformance MetaDataSourcedAppIntentResolver( unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  if (!*a1)
  {
    a3(a2);
    uint64_t v4 = OUTLINED_FUNCTION_107();
    atomic_store(swift_getWitnessTable(v4, v5), a1);
  }

  OUTLINED_FUNCTION_3();
}

uint64_t OUTLINED_FUNCTION_5_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

BOOL OUTLINED_FUNCTION_7_2(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_9_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_arrayDestroy(a1, 1LL, a3);
}

void OUTLINED_FUNCTION_11_3(void *a1, os_log_s *a2, uint64_t a3, const char *a4)
{
}

void OUTLINED_FUNCTION_12_3(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t OUTLINED_FUNCTION_18_3(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return dispatch thunk of CandidateSuggestion.context.getter(v1, v2);
}

BOOL OUTLINED_FUNCTION_20_1(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t OUTLINED_FUNCTION_21_1(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_22_2(uint64_t a1)
{
  *(void *)(v2 - 8) = *v1;
  return swift_task_dealloc(a1);
}

void OUTLINED_FUNCTION_24_2()
{
  *(void *)(v1 - 8) = *v0;
}

void OUTLINED_FUNCTION_25_2()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_26_1()
{
  return swift_bridgeObjectRetain(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_30_2()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_32_2()
{
  return static os_log_type_t.debug.getter();
}

uint64_t OUTLINED_FUNCTION_38_2()
{
  return static os_log_type_t.error.getter();
}

uint64_t OUTLINED_FUNCTION_39_2()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_40_2()
{
  return swift_bridgeObjectRetain(v0);
}

void OUTLINED_FUNCTION_41_1(uint64_t a1, uint64_t a2)
{
}

void OUTLINED_FUNCTION_42_1(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

void OUTLINED_FUNCTION_43_2(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t OUTLINED_FUNCTION_44_2(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_46_1(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_47_1()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_49_1@<X0>(uint64_t a1@<X8>)
{
  return swift_task_dealloc(a1);
}

uint64_t OUTLINED_FUNCTION_50_1@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t OUTLINED_FUNCTION_52_1@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_54_0()
{
  return v0;
}

BOOL OUTLINED_FUNCTION_56_1(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_58_1()
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0, v1, (uint64_t *)(v2 - 120));
}

  ;
}

uint64_t OUTLINED_FUNCTION_60_1(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_61_1(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_62_1@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

void OUTLINED_FUNCTION_63_1(float a1)
{
  *unint64_t v1 = a1;
}

BOOL OUTLINED_FUNCTION_64_1(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void *OUTLINED_FUNCTION_65_0(void *a1, uint64_t a2)
{
  return __swift_project_boxed_opaque_existential_1(a1, a2);
}

uint64_t OUTLINED_FUNCTION_66_0()
{
  *(void *)(v0 - 88) = 0LL;
  return swift_stdlib_random(v0 - 88, 8LL);
}

void OUTLINED_FUNCTION_67()
{
}

uint64_t OUTLINED_FUNCTION_68()
{
  return static os_log_type_t.debug.getter();
}

BOOL OUTLINED_FUNCTION_69_0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_70_0()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_72_0(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t OUTLINED_FUNCTION_73_0()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_75_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3);
}

  ;
}

uint64_t OUTLINED_FUNCTION_77_0()
{
  return swift_bridgeObjectRelease(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_79_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_82_0()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_83_0()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_85_0(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_86_0()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t OUTLINED_FUNCTION_88_0()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_89(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_90_0(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_91_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_92_0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

double OUTLINED_FUNCTION_93_0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, _OWORD *a22)
{
  double result = 0.0;
  a22[2] = 0u;
  a22[3] = 0u;
  *a22 = 0u;
  a22[1] = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_94_0(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

void OUTLINED_FUNCTION_95_0()
{
}

uint64_t OUTLINED_FUNCTION_96_0()
{
  return swift_errorRetain(v0);
}

uint64_t OUTLINED_FUNCTION_97_0()
{
  return type metadata accessor for TypedValue(0LL);
}

  ;
}

BOOL OUTLINED_FUNCTION_100_0@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_101_0()
{
  return swift_task_dealloc(*(void *)(v0 + 296));
}

void OUTLINED_FUNCTION_102_0()
{
}

void OUTLINED_FUNCTION_103(uint64_t a1, uint64_t a2)
{
}

uint64_t OUTLINED_FUNCTION_104( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a9);
}

void OUTLINED_FUNCTION_105()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_106()
{
  return static os_log_type_t.info.getter();
}

uint64_t OUTLINED_FUNCTION_107()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_108( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t LinkSuggestionsOwners.getOwner()@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  if (a1)
  {
    if (a1 == 1)
    {
      if (one-time initialization token for appIntentsOwner != -1) {
        swift_once( &one-time initialization token for appIntentsOwner,  one-time initialization function for appIntentsOwner);
      }
      unint64_t v3 = &static LinkSuggestionsOwners.appIntentsOwner;
    }

    else
    {
      if (one-time initialization token for autoshortcutsOwner != -1) {
        swift_once( &one-time initialization token for autoshortcutsOwner,  one-time initialization function for autoshortcutsOwner);
      }
      unint64_t v3 = &static LinkSuggestionsOwners.autoshortcutsOwner;
    }
  }

  else
  {
    if (one-time initialization token for linkOwner != -1) {
      swift_once(&one-time initialization token for linkOwner, one-time initialization function for linkOwner);
    }
    unint64_t v3 = &static LinkSuggestionsOwners.linkOwner;
  }

  uint64_t v4 = *v3;
  a2[3] = type metadata accessor for DefaultOwner(0LL);
  a2[4] = lazy protocol witness table accessor for type DefaultOwner and conformance DefaultOwner( (unint64_t *)&lazy protocol witness table cache variable for type DefaultOwner and conformance DefaultOwner,  (uint64_t (*)(uint64_t))&type metadata accessor for DefaultOwner,  (uint64_t)&protocol conformance descriptor for DefaultOwner);
  *a2 = v4;
  return swift_retain(v4);
}

uint64_t one-time initialization function for linkOwner(uint64_t a1)
{
  return one-time initialization function for linkOwner( a1,  &enum case for CoreSuggestionGroups.app(_:),  1802398060LL,  0xE400000000000000LL,  &static LinkSuggestionsOwners.linkOwner);
}

uint64_t one-time initialization function for appIntentsOwner(uint64_t a1)
{
  return one-time initialization function for linkOwner( a1,  &enum case for CoreSuggestionGroups.app(_:),  0x6E65746E49707061LL,  0xEA00000000007374LL,  &static LinkSuggestionsOwners.appIntentsOwner);
}

uint64_t one-time initialization function for linkOwner( uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = type metadata accessor for CoreSuggestionGroups(0LL);
  v13[3] = v9;
  void v13[4] = lazy protocol witness table accessor for type DefaultOwner and conformance DefaultOwner( &lazy protocol witness table cache variable for type CoreSuggestionGroups and conformance CoreSuggestionGroups,  (uint64_t (*)(uint64_t))&type metadata accessor for CoreSuggestionGroups,  (uint64_t)&protocol conformance descriptor for CoreSuggestionGroups);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v13);
  (*(void (**)(void *, void, uint64_t))(*(void *)(v9 - 8) + 104LL))(boxed_opaque_existential_1, *a2, v9);
  uint64_t v11 = type metadata accessor for DefaultOwner(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  uint64_t result = DefaultOwner.init(group:identifier:)(v13, a3, a4);
  *a5 = result;
  return result;
}

uint64_t one-time initialization function for autoshortcutsOwner(uint64_t a1)
{
  return one-time initialization function for linkOwner( a1,  &enum case for CoreSuggestionGroups.thirdParty(_:),  0x726F68736F747561LL,  0xED00007374756374LL,  &static LinkSuggestionsOwners.autoshortcutsOwner);
}

SiriLinkSuggestionsPlugin::LinkSuggestionsOwners_optional __swiftcall LinkSuggestionsOwners.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of LinkSuggestionsOwners.init(rawValue:),  v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return (SiriLinkSuggestionsPlugin::LinkSuggestionsOwners_optional)3;
  }
  else {
    return (SiriLinkSuggestionsPlugin::LinkSuggestionsOwners_optional)v3;
  }
}

uint64_t LinkSuggestionsOwners.rawValue.getter(char a1)
{
  return *(void *)&aLink_2[8 * a1];
}

void protocol witness for static Equatable.== infix(_:_:) in conformance LinkSuggestionsOwners( char *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LinkSuggestionsOwners()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(char a1)
{
  uint64_t v2 = LinkSuggestionsOwners.rawValue.getter(a1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LinkSuggestionsOwners(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  uint64_t v3 = LinkSuggestionsOwners.rawValue.getter(a2);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LinkSuggestionsOwners( uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  uint64_t v3 = LinkSuggestionsOwners.rawValue.getter(a2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

SiriLinkSuggestionsPlugin::LinkSuggestionsOwners_optional protocol witness for RawRepresentable.init(rawValue:) in conformance LinkSuggestionsOwners@<W0>( Swift::String *a1@<X0>, SiriLinkSuggestionsPlugin::LinkSuggestionsOwners_optional *a2@<X8>)
{
  result.value = LinkSuggestionsOwners.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LinkSuggestionsOwners@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = LinkSuggestionsOwners.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for OwnerProvider.getOwner() in conformance LinkSuggestionsOwners@<X0>( uint64_t *a1@<X8>)
{
  return LinkSuggestionsOwners.getOwner()(*v1, a1);
}

Swift::String __swiftcall LinkGroups.getName()()
{
  uint64_t v0 = 1802398060LL;
  uint64_t v1 = (void *)0xE400000000000000LL;
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

void LinkGroups.CodingKeys.hash(into:)()
{
}

uint64_t LinkGroups.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 1802398060 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(a2);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(1802398060LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

Swift::Int LinkGroups.CodingKeys.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t LinkGroups.LinkCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

uint64_t LinkGroups.LinkCodingKeys.stringValue.getter()
{
  return 0LL;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LinkGroups.CodingKeys( uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LinkGroups.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = LinkGroups.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LinkGroups.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LinkGroups.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LinkGroups.LinkCodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = LinkGroups.LinkCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance LinkGroups.LinkCodingKeys()
{
  return LinkSuggestedAction.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance LinkGroups.LinkCodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = static AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors.__derived_enum_equals(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LinkGroups.LinkCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LinkGroups.LinkCodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void LinkGroups.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LinkGroups.LinkCodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_2_3();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LinkGroups.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  unint64_t v10 = lazy protocol witness table accessor for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_49978, &unk_49978, v10, v8, v9);
  lazy protocol witness table accessor for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  OUTLINED_FUNCTION_1_3(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  OUTLINED_FUNCTION_0_3();
}

unint64_t lazy protocol witness table accessor for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LinkGroups.CodingKeys, &unk_49978);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LinkGroups.CodingKeys, &unk_49978);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LinkGroups.CodingKeys, &unk_49978);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LinkGroups.CodingKeys, &unk_49978);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys;
  if (!lazy protocol witness table cache variable for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LinkGroups.LinkCodingKeys, &unk_49998);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys;
  if (!lazy protocol witness table cache variable for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LinkGroups.LinkCodingKeys, &unk_49998);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys;
  if (!lazy protocol witness table cache variable for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LinkGroups.LinkCodingKeys, &unk_49998);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys);
  }

  return result;
}

Swift::Int LinkGroups.hashValue.getter()
{
  unint64_t v0 = lazy protocol witness table accessor for type LinkGroups and conformance LinkGroups();
  dispatch thunk of Hashable.hash(into:)(v2, &type metadata for LinkGroups, v0);
  return Hasher._finalize()();
}

void LinkGroups.init(from:)(void *a1)
{
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LinkGroups.LinkCodingKeys>);
  uint64_t v2 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LinkGroups.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_2_3();
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  unint64_t v9 = lazy protocol witness table accessor for type LinkGroups.CodingKeys and conformance LinkGroups.CodingKeys();
  uint64_t v10 = v32;
  uint64_t v11 = v7;
  uint64_t v12 = a1;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_49978, &unk_49978, v9, v11, v8);
  if (v10) {
    goto LABEL_7;
  }
  uint64_t v30 = v2;
  uint64_t v32 = v6;
  uint64_t v13 = KeyedDecodingContainer.allKeys.getter(v5);
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 + 16);
  uint64_t v16 = v5;
  if (!v15)
  {
LABEL_6:
    uint64_t v23 = type metadata accessor for DecodingError(0LL);
    swift_allocError(v23, &protocol witness table for DecodingError, 0LL, 0LL);
    uint64_t v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v25 = &type metadata for LinkGroups;
    uint64_t v26 = KeyedDecodingContainer.codingPath.getter(v16);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v26,  0xD00000000000002BLL,  0x800000000003EF70LL,  0LL);
    uint64_t v27 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v23 - 8) + 104LL))( v25,  enum case for DecodingError.typeMismatch(_:),  v23);
    swift_willThrow(v27);
    uint64_t v28 = v32;
    uint64_t v12 = a1;
    swift_unknownObjectRelease(v14);
    OUTLINED_FUNCTION_1_3(*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
LABEL_7:
    int64_t v29 = v12;
    goto LABEL_8;
  }

  uint64_t v17 = specialized ArraySlice.subscript.getter(1LL, v15, v13, v13 + 32, 0LL, (2 * v15) | 1);
  uint64_t v18 = v14;
  uint64_t v20 = v19;
  unint64_t v22 = v21;
  swift_bridgeObjectRelease(v18);
  if (v20 != v22 >> 1)
  {
    uint64_t v14 = v17;
    goto LABEL_6;
  }

  lazy protocol witness table accessor for type LinkGroups.LinkCodingKeys and conformance LinkGroups.LinkCodingKeys();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v4, v31);
  swift_unknownObjectRelease(v17);
  OUTLINED_FUNCTION_1_3(*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
  int64_t v29 = a1;
LABEL_8:
  __swift_destroy_boxed_opaque_existential_1(v29);
  OUTLINED_FUNCTION_0_3();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LinkGroups( uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type LinkGroups and conformance LinkGroups();
  return static SuggestionGroup.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LinkGroups(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type LinkGroups and conformance LinkGroups();
  return SuggestionGroup.hash(into:)(a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LinkGroups( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type LinkGroups and conformance LinkGroups()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups;
  if (!lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LinkGroups, &type metadata for LinkGroups);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups;
  if (!lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LinkGroups, &type metadata for LinkGroups);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups;
  if (!lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LinkGroups, &type metadata for LinkGroups);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups;
  if (!lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LinkGroups, &type metadata for LinkGroups);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups;
  if (!lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LinkGroups, &type metadata for LinkGroups);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkGroups and conformance LinkGroups);
  }

  return result;
}

void protocol witness for Decodable.init(from:) in conformance LinkGroups(void *a1)
{
}

void protocol witness for Encodable.encode(to:) in conformance LinkGroups(void *a1)
{
}

uint64_t specialized ArraySlice.subscript.getter( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if ((a2 & 0x8000000000000000LL) == 0) {
    return swift_unknownObjectRetain(a3);
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for LinkSuggestionsOwners(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for LinkSuggestionsOwners(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_19ED8 + 4 * byte_3CB25[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_19F0C + 4 * asc_3CB20[v4]))();
}

uint64_t sub_19F0C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19F14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x19F1CLL);
  }
  return result;
}

uint64_t sub_19F28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x19F30LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_19F34(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19F3C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for LinkSuggestionsOwners(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for LinkSuggestionsOwners()
{
  return &type metadata for LinkSuggestionsOwners;
}

uint64_t getEnumTag for LinkGroups()
{
  return 0LL;
}

ValueMetadata *type metadata accessor for LinkGroups()
{
  return &type metadata for LinkGroups;
}

uint64_t getEnumTagSinglePayload for LinkGroups(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for LinkGroups(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1A014 + 4 * byte_3CB2A[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1A034 + 4 * byte_3CB2F[v4]))();
  }
}

_BYTE *sub_1A014(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1A034(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1A03C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1A044(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1A04C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1A054(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void *type metadata accessor for LinkGroups.CodingKeys()
{
  return &unk_49978;
}

void *type metadata accessor for LinkGroups.LinkCodingKeys()
{
  return &unk_49998;
}

uint64_t lazy protocol witness table accessor for type DefaultOwner and conformance DefaultOwner( unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

  ;
}

uint64_t OUTLINED_FUNCTION_1_3@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

  ;
}

uint64_t LinkSuggestionsRepository.__allocating_init(dialogIdProvider:)(__int128 *a1)
{
  uint64_t v3 = OUTLINED_FUNCTION_1(v1, 56LL);
  outlined init with take of LinkDialogIdProvider(a1, v3 + 16);
  return v3;
}

uint64_t *LinkSuggestionsRepository.suggestionIdentifier.unsafeMutableAddressor()
{
  if (one-time initialization token for suggestionIdentifier != -1) {
    swift_once( &one-time initialization token for suggestionIdentifier,  one-time initialization function for suggestionIdentifier);
  }
  return &static LinkSuggestionsRepository.suggestionIdentifier;
}

void *LinkSuggestionsRepository.resolvedAction.unsafeMutableAddressor()
{
  return &static LinkSuggestionsRepository.resolvedAction;
}

void one-time initialization function for suggestionIdentifier()
{
  static LinkSuggestionsRepository.suggestionIdentifier = 0x6775735F6B6E696CLL;
  unk_53AB0 = 0xEF6E6F6974736567LL;
}

uint64_t static LinkSuggestionsRepository.suggestionIdentifier.getter()
{
  if (one-time initialization token for suggestionIdentifier != -1) {
    swift_once( &one-time initialization token for suggestionIdentifier,  one-time initialization function for suggestionIdentifier);
  }
  uint64_t v0 = static LinkSuggestionsRepository.suggestionIdentifier;
  swift_bridgeObjectRetain(unk_53AB0);
  return v0;
}

unint64_t static LinkSuggestionsRepository.resolvedAction.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t LinkSuggestionsRepository.getPooledSuggestions()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Any, Any?>);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v29[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SuggestionDetails>);
  uint64_t v6 = type metadata accessor for SuggestionDetails(0LL);
  uint64_t v7 = swift_allocObject( v5,  ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL))
       + *(void *)(*(void *)(v6 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) | 7LL);
  __int128 v28 = xmmword_3C030;
  *(_OWORD *)(v7 + ++*(void *)(v0 + 16) = xmmword_3C030;
  if (one-time initialization token for suggestionIdentifier != -1) {
    swift_once( &one-time initialization token for suggestionIdentifier,  one-time initialization function for suggestionIdentifier);
  }
  uint64_t v8 = static LinkSuggestionsRepository.suggestionIdentifier;
  uint64_t v9 = unk_53AB0;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, ResolvableParameter)>);
  uint64_t inited = swift_initStackObject(v10, v35);
  *(_OWORD *)(inited + ++*(void *)(v0 + 16) = v28;
  *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xD00000000000001FLL;
  *(void *)(inited + 40) = 0x800000000003ED20LL;
  uint64_t v12 = type metadata accessor for ResolvableParameter(0LL);
  uint64_t v13 = one-time initialization token for typeIdentifier;
  swift_bridgeObjectRetain(v9);
  if (v13 != -1) {
    swift_once(&one-time initialization token for typeIdentifier, one-time initialization function for typeIdentifier);
  }
  uint64_t v14 = static LinkActionResolver.typeIdentifier;
  uint64_t v15 = unk_53B40;
  uint64_t v16 = swift_bridgeObjectRetain(unk_53B40);
  static SuggestionTransformers.passthroughParameterForLogging()(v16);
  *(void *)(inited + 48) = ResolvableParameter.__allocating_init(typeIdentifier:required:loggingKeyTransformer:)( v14,  v15,  1LL,  v4);
  uint64_t v17 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v12, &protocol witness table for String);
  outlined init with copy of SiriSuggestions.DisplayRepresentable(v1 + 16, (uint64_t)&v32);
  uint64_t v18 = type metadata accessor for LinkViewProvider();
  uint64_t v19 = OUTLINED_FUNCTION_1(v18, 64LL);
  uint64_t v20 = type metadata accessor for LinkInvocationActionProvider();
  *(void *)(v19 + 56) = OUTLINED_FUNCTION_1(v20, 16LL);
  outlined init with take of LinkDialogIdProvider(&v32, v19 + 16);
  uint64_t v33 = v18;
  uint64_t v34 = OUTLINED_FUNCTION_1_4( &lazy protocol witness table cache variable for type LinkViewProvider and conformance LinkViewProvider,  v21,  v22,  (uint64_t)&protocol conformance descriptor for LinkViewProvider);
  *(void *)&__int128 v32 = v19;
  uint64_t v23 = type metadata accessor for LinkLoggingActionKeyMapper();
  uint64_t v24 = OUTLINED_FUNCTION_1(v23, 16LL);
  v31[3] = v23;
  v31[4] = OUTLINED_FUNCTION_1_4( &lazy protocol witness table cache variable for type LinkLoggingActionKeyMapper and conformance LinkLoggingActionKeyMapper,  v25,  v26,  (uint64_t)&protocol conformance descriptor for LinkLoggingActionKeyMapper);
  v31[0] = v24;
  uint64_t v30 = 0LL;
  memset(v29, 0, sizeof(v29));
  SuggestionDetails.init(suggestionId:resolverParams:description:viewProvider:actionIdKeyMapper:filter:)( v8,  v9,  v17,  0xD000000000000016LL,  0x800000000003EFA0LL,  &v32,  v31,  v29);
  return v7;
}

uint64_t protocol witness for InternalSuggestionsRepository.getPooledSuggestions() in conformance LinkSuggestionsRepository()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96LL))();
}

uint64_t protocol witness for InternalSuggestionsRepository.getAsyncPooledSuggestions() in conformance LinkSuggestionsRepository( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to InternalSuggestionsRepository.getAsyncPooledSuggestions()[1]);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for InternalSuggestionsRepository.getAsyncPooledSuggestions() in conformance LinkSuggestionsRepository;
  return InternalSuggestionsRepository.getAsyncPooledSuggestions()(a1, a2);
}

uint64_t protocol witness for InternalSuggestionsRepository.getAsyncPooledSuggestions() in conformance LinkSuggestionsRepository( uint64_t a1)
{
  uint64_t v4 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t protocol witness for OwnerProvider.getOwner() in conformance LinkSuggestionsRepository(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for LinkSuggestionsRepository, a1);
  return SuggestionsRepository.getOwner()(a1, WitnessTable);
}

uint64_t base witness table accessor for InternalSuggestionsRepository in LinkSuggestionsRepository( uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type LinkViewProvider and conformance LinkViewProvider( &lazy protocol witness table cache variable for type LinkSuggestionsRepository and conformance LinkSuggestionsRepository,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for LinkSuggestionsRepository,  (uint64_t)&protocol conformance descriptor for LinkSuggestionsRepository);
}

uint64_t type metadata accessor for LinkSuggestionsRepository()
{
  return objc_opt_self(&OBJC_CLASS____TtC25SiriLinkSuggestionsPlugin25LinkSuggestionsRepository);
}

uint64_t base witness table accessor for OwnerProvider in LinkSuggestionsRepository(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type LinkViewProvider and conformance LinkViewProvider( &lazy protocol witness table cache variable for type LinkSuggestionsRepository and conformance LinkSuggestionsRepository,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for LinkSuggestionsRepository,  (uint64_t)&protocol conformance descriptor for LinkSuggestionsRepository);
}

uint64_t lazy protocol witness table accessor for type LinkViewProvider and conformance LinkViewProvider( unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_1_4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return lazy protocol witness table accessor for type LinkViewProvider and conformance LinkViewProvider( a1,  255LL,  v4,  a4);
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo20NSTextCheckingResultCG_SSs5NeverOTg5095_s25SiriLinkSuggestionsPlugin11PhraseUtilsO16getVariableNames14phraseTemplateSaySSGSS_tFZSSSo20deF6CXEfU_SSTf1cn_n( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  if (v6)
  {
    while (1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (v6 < 0) {
        break;
      }
      uint64_t v23 = v6;
      uint64_t v7 = 0LL;
      while (v6 != v7)
      {
        if ((a1 & 0xC000000000000001LL) != 0) {
          id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a1);
        }
        else {
          id v8 = *(id *)(a1 + 8 * v7 + 32);
        }
        uint64_t v9 = v8;
        uint64_t v10 = Range<>.init(_:in:)([v8 rangeAtIndex:1]);
        if ((v11 & 1) != 0) {
          goto LABEL_21;
        }
        uint64_t v12 = a2;
        uint64_t v13 = a3;
        uint64_t v14 = String.subscript.getter(v10);
        uint64_t v16 = v15;
        uint64_t v17 = static String._fromSubstring(_:)(v14);
        uint64_t v19 = v18;

        swift_bridgeObjectRelease(v16);
        unint64_t v20 = _swiftEmptyArrayStorage[2];
        if (v20 >= _swiftEmptyArrayStorage[3] >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        ++v7;
        _swiftEmptyArrayStorage[2] = v20 + 1;
        uint64_t v21 = &_swiftEmptyArrayStorage[2 * v20];
        v21[4] = v17;
        v21[5] = v19;
        uint64_t v6 = v23;
        a3 = v13;
        a2 = v12;
        if (v23 == v7) {
          goto LABEL_13;
        }
      }

      __break(1u);
LABEL_15:
      if (a1 < 0) {
        uint64_t v22 = a1;
      }
      else {
        uint64_t v22 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v22);
      swift_bridgeObjectRelease(a1);
      if (!v6) {
        goto LABEL_13;
      }
    }

    __break(1u);
LABEL_21:
    __break(1u);
  }

  else
  {
LABEL_13:
    swift_bridgeObjectRelease(a3);
  }

uint64_t static PhraseUtils.getHydratedPhrase(phraseTemplate:parameters:)(void **a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for variableNameRegex != -1) {
LABEL_27:
  }
    swift_once( &one-time initialization token for variableNameRegex,  one-time initialization function for variableNameRegex);
  uint64_t v6 = (void *)static PhraseUtils.variableNameRegex;
  OUTLINED_FUNCTION_7_3();
  NSString v7 = String._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_35();
  uint64_t v8 = OUTLINED_FUNCTION_7_3();
  uint64_t v9 = String.UTF16View.count.getter(v8);
  OUTLINED_FUNCTION_8();
  id v10 = objc_msgSend(v6, "matchesInString:options:range:", v7, 0, 0, v9);

  unint64_t v11 = type metadata accessor for NSTextCheckingResult();
  uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

  OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_9_4(v12, (uint64_t)a1);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease(v12);
  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v15, (uint64_t)static Logger.appIntentsSuggestions);
  OUTLINED_FUNCTION_58_0(a2);
  uint64_t v16 = OUTLINED_FUNCTION_58_0(a3);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  uint64_t v55 = v14;
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = OUTLINED_FUNCTION_16_0(22LL);
    uint64_t v56 = OUTLINED_FUNCTION_16_0(64LL);
    v61[0] = v56;
    *(_DWORD *)uint64_t v19 = 136315394;
    OUTLINED_FUNCTION_35();
    uint64_t v20 = OUTLINED_FUNCTION_7_3();
    uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v19 + 4);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v19 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    uint64_t v23 = swift_bridgeObjectRetain(a3);
    uint64_t v24 = Dictionary.description.getter( v23,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
    uint64_t v25 = a2;
    uint64_t v26 = a1;
    unint64_t v28 = v27;
    swift_bridgeObjectRelease(a3);
    uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v28, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v19 + 14);
    OUTLINED_FUNCTION_51(a3);
    unint64_t v29 = v28;
    a1 = v26;
    a2 = v25;
    swift_bridgeObjectRelease(v29);
    _os_log_impl(&dword_0, v17, v18, "Hydrating phraseTemplate - %s with parameters - %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy(v56, 2LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_3_0(v56);
    OUTLINED_FUNCTION_3_0(v19);
  }

  else
  {

    OUTLINED_FUNCTION_51(a3);
    OUTLINED_FUNCTION_51(a2);
  }

  uint64_t v30 = v14[2];
  if (!v30)
  {
    OUTLINED_FUNCTION_35();
LABEL_17:
    OUTLINED_FUNCTION_70_0();
    return OUTLINED_FUNCTION_7_3();
  }

  uint64_t v31 = v14[4];
  __int128 v32 = (void *)v14[5];
  uint64_t v54 = v31;
  if (*(void *)(a3 + 16))
  {
    OUTLINED_FUNCTION_58_0((uint64_t)v32);
    OUTLINED_FUNCTION_35();
    unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v31, (uint64_t)v32);
    if ((v34 & 1) != 0)
    {
      uint64_t v57 = a2;
      a2 = (uint64_t)a1;
      uint64_t v35 = 0LL;
      a1 = (void **)(v14 + 7);
      uint64_t v36 = v31;
      while (1)
      {
        uint64_t v37 = a3;
        uint64_t v38 = (uint64_t *)(*(void *)(a3 + 56) + 16 * v33);
        a3 = *v38;
        uint64_t v39 = v38[1];
        swift_bridgeObjectRetain(v39);
        swift_bridgeObjectRelease(v32);
        v61[0] = a2;
        v61[1] = v57;
        uint64_t v59 = 31524LL;
        unint64_t v60 = 0xE200000000000000LL;
        v40._uint64_t countAndFlagsBits = v36;
        v40._object = v32;
        String.append(_:)(v40);
        swift_bridgeObjectRelease(v32);
        v41._uint64_t countAndFlagsBits = 125LL;
        v41._object = (void *)0xE100000000000000LL;
        String.append(_:)(v41);
        unint64_t v42 = v60;
        v58[0] = a3;
        v58[1] = v39;
        unint64_t v43 = lazy protocol witness table accessor for type String and conformance String();
        a2 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v59,  v58,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v43,  v43,  v43);
        uint64_t v45 = v44;
        OUTLINED_FUNCTION_70_0();
        swift_bridgeObjectRelease(v57);
        swift_bridgeObjectRelease(v42);
        uint64_t v57 = v45;
        if (v30 - 1 == v35) {
          goto LABEL_17;
        }
        if ((unint64_t)++v35 >= v55[2])
        {
          __break(1u);
          goto LABEL_27;
        }

        uint64_t v36 = (uint64_t)*(a1 - 1);
        __int128 v32 = *a1;
        if (!*(void *)(v37 + 16))
        {
          uint64_t v54 = (uint64_t)*(a1 - 1);
          OUTLINED_FUNCTION_59();
          os_log_type_t v47 = v55;
          goto LABEL_22;
        }

        a3 = v37;
        a1 += 2;
        OUTLINED_FUNCTION_58_0((uint64_t)v32);
        unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v36, (uint64_t)v32);
        if ((v46 & 1) == 0)
        {
          uint64_t v54 = v36;
          swift_bridgeObjectRelease(v55);
          os_log_type_t v47 = v32;
          goto LABEL_22;
        }
      }
    }

    OUTLINED_FUNCTION_70_0();
    os_log_type_t v47 = v32;
  }

  else
  {
    OUTLINED_FUNCTION_35();
    OUTLINED_FUNCTION_59();
    os_log_type_t v47 = v14;
  }

LABEL_22:
  swift_bridgeObjectRelease(v47);
  OUTLINED_FUNCTION_8();
  uint64_t v48 = OUTLINED_FUNCTION_59();
  unint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
  os_log_type_t v50 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = (uint8_t *)OUTLINED_FUNCTION_16_0(12LL);
    uint64_t v52 = OUTLINED_FUNCTION_16_0(32LL);
    v61[0] = v52;
    *(_DWORD *)uint64_t v51 = 136315138;
    OUTLINED_FUNCTION_59();
    uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, (unint64_t)v32, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v51 + 4);
    swift_bridgeObjectRelease_n(v32, 3LL);
    _os_log_impl(&dword_0, v49, v50, "display representable cannot be obtained for variable - %s ", v51, 0xCu);
    swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_3_0(v52);
    OUTLINED_FUNCTION_3_0((uint64_t)v51);
  }

  else
  {

    OUTLINED_FUNCTION_51((uint64_t)v32);
  }

  return OUTLINED_FUNCTION_7_3();
}

    __break(1u);
  }

    __break(1u);
  }

  uint64_t v24 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  uint64_t v25 = (void *)(*(void *)(v24 + 48) + 16 * a3);
  *uint64_t v25 = a1;
  v25[1] = a2;
  uint64_t v26 = *(void *)(v24 + 16);
  unint64_t v27 = __OFADD__(v26, 1LL);
  unint64_t v28 = v26 + 1;
  if (v27) {
    __break(1u);
  }
  else {
    *(void *)(v24 + ++*(void *)(v0 + 16) = v28;
  }
}

uint64_t static PhraseUtils.getVariableNames(phraseTemplate:)(uint64_t a1)
{
  if (one-time initialization token for variableNameRegex != -1) {
    swift_once( &one-time initialization token for variableNameRegex,  one-time initialization function for variableNameRegex);
  }
  uint64_t v2 = (void *)static PhraseUtils.variableNameRegex;
  NSString v3 = String._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_35();
  uint64_t v4 = String.UTF16View.count.getter(a1);
  OUTLINED_FUNCTION_8();
  id v5 = objc_msgSend(v2, "matchesInString:options:range:", v3, 0, 0, v4);

  unint64_t v6 = type metadata accessor for NSTextCheckingResult();
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  OUTLINED_FUNCTION_35();
  OUTLINED_FUNCTION_9_4(v7, a1);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease(v7);
  return v9;
}

uint64_t static PhraseUtils.getHydratedPhrase(phraseTemplate:parameters:locale:)(void **a1, uint64_t a2)
{
  uint64_t v4 = specialized Dictionary.compactMapValues<A>(_:)((void (*)(uint64_t *__return_ptr, _OWORD *))partial apply for closure #1 in static PhraseUtils.getHydratedPhrase(phraseTemplate:parameters:locale:));
  uint64_t v5 = static PhraseUtils.getHydratedPhrase(phraseTemplate:parameters:)(a1, a2, v4);
  swift_bridgeObjectRelease(v4);
  return v5;
}

id one-time initialization function for variableNameRegex()
{
  id v0 = objc_allocWithZone(&OBJC_CLASS___NSRegularExpression);
  id result = @nonobjc NSRegularExpression.init(pattern:options:)(0x2B775C287B5C245CLL, 0xEB000000007D5C29LL, 0LL);
  static PhraseUtils.variableNameRegex = (uint64_t)result;
  return result;
}

uint64_t closure #1 in static PhraseUtils.getHydratedPhrase(phraseTemplate:parameters:locale:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = v11;
  if (v11)
  {
    uint64_t v6 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    uint64_t v7 = dispatch thunk of SiriSuggestions.DisplayRepresentable.getDisplay(for:)(a2, v5, v6);
    uint64_t v5 = v8;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1(v10);
  }

  else
  {
    uint64_t result = outlined destroy of SiriSuggestions.DisplayRepresentable?((uint64_t)v10);
    uint64_t v7 = 0LL;
  }

  *a3 = v7;
  a3[1] = v5;
  return result;
}

id @nonobjc NSRegularExpression.init(pattern:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v12 = 0LL;
  id v7 = [v3 initWithPattern:v6 options:a3 error:&v12];

  id v8 = v12;
  if (v7)
  {
    id v9 = v12;
  }

  else
  {
    id v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }

  return v7;
}

unint64_t type metadata accessor for NSTextCheckingResult()
{
  unint64_t result = lazy cache variable for type metadata for NSTextCheckingResult;
  if (!lazy cache variable for type metadata for NSTextCheckingResult)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSTextCheckingResult);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSTextCheckingResult);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }

  return result;
}

ValueMetadata *type metadata accessor for PhraseUtils()
{
  return &type metadata for PhraseUtils;
}

uint64_t outlined init with copy of SiriSuggestions.DisplayRepresentable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SiriSuggestions.DisplayRepresentable?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_7_3()
{
  return v0;
}

void OUTLINED_FUNCTION_9_4(uint64_t a1, uint64_t a2)
{
}

void one-time initialization function for forceEnabled()
{
  static SiriLinkSuggestionsFeatureFlags.forceEnabled = (uint64_t)&_swiftEmptyDictionarySingleton;
}

uint64_t *SiriLinkSuggestionsFeatureFlags.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
  }
  return &static SiriLinkSuggestionsFeatureFlags.forceEnabled;
}

uint64_t static SiriLinkSuggestionsFeatureFlags.forceEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
  }
  OUTLINED_FUNCTION_1_5((uint64_t)&static SiriLinkSuggestionsFeatureFlags.forceEnabled, (uint64_t)v1, 0LL);
  return swift_bridgeObjectRetain(static SiriLinkSuggestionsFeatureFlags.forceEnabled);
}

uint64_t static SiriLinkSuggestionsFeatureFlags.forceEnabled.setter(uint64_t a1)
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
  }
  OUTLINED_FUNCTION_1_5((uint64_t)&static SiriLinkSuggestionsFeatureFlags.forceEnabled, (uint64_t)v4, 1LL);
  uint64_t v2 = static SiriLinkSuggestionsFeatureFlags.forceEnabled;
  static SiriLinkSuggestionsFeatureFlags.forceEnabled = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t (*static SiriLinkSuggestionsFeatureFlags.forceEnabled.modify(uint64_t a1))()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
  }
  OUTLINED_FUNCTION_1_5((uint64_t)&static SiriLinkSuggestionsFeatureFlags.forceEnabled, a1, 33LL);
  return static SiriLinkSuggestionsFeatureFlags.forceEnabled.modify;
}

const char *SiriLinkSuggestionsFeatureFlags.domain.getter()
{
  return "SiriLinkSuggestions";
}

const char *SiriLinkSuggestionsFeatureFlags.feature.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return "appIntents";
  }
  else {
    return "link";
  }
}

uint64_t static SiriLinkSuggestionsFeatureFlags.isLinkEnabled.getter()
{
  return SiriLinkSuggestionsFeatureFlags.isEnabled.getter(0);
}

uint64_t SiriLinkSuggestionsFeatureFlags.isEnabled.getter(char a1)
{
  char v1 = a1 & 1;
  if (one-time initialization token for forceEnabled != -1) {
    swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
  }
  OUTLINED_FUNCTION_1_5((uint64_t)&static SiriLinkSuggestionsFeatureFlags.forceEnabled, (uint64_t)v7, 32LL);
  uint64_t v2 = static SiriLinkSuggestionsFeatureFlags.forceEnabled;
  if (*(void *)(static SiriLinkSuggestionsFeatureFlags.forceEnabled + 16)
    && (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(v1), (v4 & 1) != 0))
  {
    char v5 = *(_BYTE *)(*(void *)(v2 + 56) + v3);
    swift_endAccess(v7);
  }

  else
  {
    swift_endAccess(v7);
    v7[3] = &type metadata for SiriLinkSuggestionsFeatureFlags;
    void v7[4] = lazy protocol witness table accessor for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags();
    LOBYTE(v7[0]) = v1;
    char v5 = isFeatureEnabled(_:)(v7);
    __swift_destroy_boxed_opaque_existential_1(v7);
  }

  return v5 & 1;
}

uint64_t static SiriLinkSuggestionsFeatureFlags.isAppIntentsEnabled.getter()
{
  if ((SiriLinkSuggestionsFeatureFlags.isEnabled.getter(1) & 1) != 0) {
    return AFDeviceSupportsSystemAssistantExperience();
  }
  else {
    return 0LL;
  }
}

uint64_t SiriLinkSuggestionsFeatureFlags.withForcedEnabled<A>(_:block:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  *(_BYTE *)(v5 + 10__swift_destroy_boxed_opaque_existential_1(v0 + 5) = a5;
  *(void *)(v5 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a3;
  *(void *)(v5 + 80) = a4;
  *(_BYTE *)(v5 + 104) = a2;
  *(void *)(v5 + 64) = a1;
  return swift_task_switch(SiriLinkSuggestionsFeatureFlags.withForcedEnabled<A>(_:block:), 0LL, 0LL);
}

uint64_t SiriLinkSuggestionsFeatureFlags.withForcedEnabled<A>(_:block:)()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
  }
  char v1 = *(int **)(v0 + 72);
  char v2 = *(_BYTE *)(v0 + 104);
  char v3 = *(_BYTE *)(v0 + 105) & 1;
  OUTLINED_FUNCTION_1_5((uint64_t)&static SiriLinkSuggestionsFeatureFlags.forceEnabled, v0 + 16, 32LL);
  *(_BYTE *)(v0 + 106) = specialized Dictionary.subscript.getter( v3,  static SiriLinkSuggestionsFeatureFlags.forceEnabled);
  swift_endAccess(v0 + 16);
  OUTLINED_FUNCTION_1_5((uint64_t)&static SiriLinkSuggestionsFeatureFlags.forceEnabled, v0 + 40, 33LL);
  specialized Dictionary._Variant.setValue(_:forKey:)(v2, v3);
  swift_endAccess(v0 + 40);
  NSString v6 = (uint64_t (*)(void))((char *)v1 + *v1);
  char v4 = (void *)swift_task_alloc(v1[1]);
  *(void *)(v0 + 88) = v4;
  *char v4 = v0;
  v4[1] = SiriLinkSuggestionsFeatureFlags.withForcedEnabled<A>(_:block:);
  return v6(*(void *)(v0 + 64));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  char v2 = *(void *)(*(void *)v1 + 88LL);
  *(void *)(*(void *)v1 + 96LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    char v3 = SiriLinkSuggestionsFeatureFlags.withForcedEnabled<A>(_:block:);
  }
  else {
    char v3 = SiriLinkSuggestionsFeatureFlags.withForcedEnabled<A>(_:block:);
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_2_4();
  return OUTLINED_FUNCTION_0_4(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  OUTLINED_FUNCTION_2_4();
  return OUTLINED_FUNCTION_0_4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t SiriLinkSuggestionsFeatureFlags.updateForceEnabledFlags(oldFF:)(char a1, char a2)
{
  char v3 = a2 & 1;
  if (a1 == 2)
  {
    if (one-time initialization token for forceEnabled != -1) {
      swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
    }
    swift_beginAccess(&static SiriLinkSuggestionsFeatureFlags.forceEnabled, v14, 33LL, 0LL);
    unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if ((v5 & 1) != 0)
    {
      unint64_t v6 = v4;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(static SiriLinkSuggestionsFeatureFlags.forceEnabled);
      uint64_t v13 = static SiriLinkSuggestionsFeatureFlags.forceEnabled;
      uint64_t v8 = static SiriLinkSuggestionsFeatureFlags.forceEnabled;
      static SiriLinkSuggestionsFeatureFlags.forceEnabled = 0x8000000000000000LL;
      Swift::Int v9 = *(void *)(v8 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<SiriLinkSuggestionsFeatureFlags, Bool>);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v9);
      unint64_t v10 = lazy protocol witness table accessor for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags();
      _NativeDictionary._delete(at:)( v6,  v13,  &type metadata for SiriLinkSuggestionsFeatureFlags,  &type metadata for Bool,  v10);
      uint64_t v11 = static SiriLinkSuggestionsFeatureFlags.forceEnabled;
      static SiriLinkSuggestionsFeatureFlags.forceEnabled = v13;
      swift_bridgeObjectRelease(v11);
    }
  }

  else
  {
    if (one-time initialization token for forceEnabled != -1) {
      swift_once(&one-time initialization token for forceEnabled, one-time initialization function for forceEnabled);
    }
    swift_beginAccess(&static SiriLinkSuggestionsFeatureFlags.forceEnabled, v14, 33LL, 0LL);
    specialized Dictionary._Variant.setValue(_:forKey:)(a1 & 1, v3);
  }

  return swift_endAccess(v14);
}

void SiriLinkSuggestionsFeatureFlags.hashValue.getter(char a1)
{
}

void protocol witness for Hashable.hashValue.getter in conformance SiriLinkSuggestionsFeatureFlags()
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SiriLinkSuggestionsFeatureFlags( uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(v2);
  Hasher._finalize()();
  OUTLINED_FUNCTION_3_3();
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance SiriLinkSuggestionsFeatureFlags()
{
  return SiriLinkSuggestionsFeatureFlags.feature.getter(*v0);
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(char a1, char a2)
{
  char v4 = a2 & 1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  *Swift::UInt v2 = 0x8000000000000000LL;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, v4, isUniquelyReferenced_nonNull_native);
  uint64_t v6 = *v2;
  *Swift::UInt v2 = v8;
  return swift_bridgeObjectRelease(v6);
}

unint64_t lazy protocol witness table accessor for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags;
  if (!lazy protocol witness table cache variable for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkSuggestionsFeatureFlags,  &type metadata for SiriLinkSuggestionsFeatureFlags);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags;
  if (!lazy protocol witness table cache variable for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkSuggestionsFeatureFlags,  &type metadata for SiriLinkSuggestionsFeatureFlags);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags;
  if (!lazy protocol witness table cache variable for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SiriLinkSuggestionsFeatureFlags,  &type metadata for SiriLinkSuggestionsFeatureFlags);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkSuggestionsFeatureFlags and conformance SiriLinkSuggestionsFeatureFlags);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for SiriLinkSuggestionsFeatureFlags( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1BC98 + 4 * byte_3D035[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BCCC + 4 * asc_3D030[v4]))();
}

uint64_t sub_1BCCC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1BCDCLL);
  }
  return result;
}

uint64_t sub_1BCE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1BCF0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1BCF4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCFC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SiriLinkSuggestionsFeatureFlags()
{
  return &type metadata for SiriLinkSuggestionsFeatureFlags;
}

uint64_t OUTLINED_FUNCTION_0_4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_1_5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0LL);
}

uint64_t OUTLINED_FUNCTION_2_4()
{
  return SiriLinkSuggestionsFeatureFlags.updateForceEnabledFlags(oldFF:)(*(_BYTE *)(v0 + 106), *(_BYTE *)(v0 + 105) & 1);
}

  ;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_So32LNFullyQualifiedActionIdentifierCs5NeverOTg5052_s25SiriLinkSuggestionsPlugin07DefaultB6ClientC17getf87Metadata19forBundleIdentifier04withH11IdentifiersSDySSSo08LNActionI0CGSS_SaySSGtKFSo016D20QualifiedhL0CSSXEfU_SSTf1cn_n( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v4);
    id v7 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v8 = *(v7 - 1);
      uint64_t v9 = *v7;
      objc_allocWithZone(&OBJC_CLASS___LNFullyQualifiedActionIdentifier);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(a3);
      id v10 = @nonobjc LNFullyQualifiedActionIdentifier.init(actionIdentifier:bundleIdentifier:)(v8, v9, a2, a3);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v11 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      uint64_t v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
      specialized ContiguousArray._endMutation()(v12);
      v7 += 2;
      --v4;
    }

    while (v4);
    swift_bridgeObjectRelease(a3);
  }

  else
  {
    swift_bridgeObjectRelease(a3);
  }

  return _swiftEmptyArrayStorage;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay25SiriLinkSuggestionsPlugin0E23SuggestedActionsRequestVG_So013LNSuggestionsJ0Cs5NeverOTg504_s25def29Plugin07DefaultB6ClientC19geth38Actions3forSayAA0bH6ActionVGSayAA0bhI7j10VG_tFSo013K58L0CAJcfu0_33_453d8a4a6e74da537e2f1aa14de2db16AjMTf3nnnpk_nTf1cn_n( uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    type metadata accessor for LNActionParameterMetadata( 0LL,  (unint64_t *)&lazy cache variable for type metadata for LNSuggestionsRequest,  &OBJC_CLASS___LNSuggestionsRequest_ptr);
    uint64_t v4 = (char *)(a1 + 49);
    do
    {
      uint64_t v5 = *(void *)(v4 - 17);
      uint64_t v6 = *(void *)(v4 - 9);
      char v7 = *(v4 - 1);
      char v8 = *v4;
      v4 += 24;
      swift_bridgeObjectRetain(v6);
      LNSuggestionsRequest.__allocating_init(bundleIdentifier:onScreen:explicitRequest:)(v5, v6, v7, v8);
      uint64_t v10 = v9;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v11 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      uint64_t v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
      specialized ContiguousArray._endMutation()(v12);
      --v2;
    }

    while (v2);
    return _swiftEmptyArrayStorage;
  }

  return result;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo17LNSuggestedActionCG_25SiriLinkSuggestionsPlugin0g9SuggestedE0Vs5NeverOTg504_s25fgh29Plugin07DefaultB6ClientC19getj20Actions3forSayAA0bH6e29VGSayAA0bhI7RequestVG_tFAHSS_s5So011D19K0CGtXEfU0_AgMXEfU_AI0gj7ActionsY0VTf1cn_n( unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v4) = a4;
  uint64_t v6 = a1;
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v7 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  if (v7)
  {
    while (1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (v7 < 0) {
        break;
      }
      uint64_t v8 = 0LL;
      unint64_t v22 = v6 & 0xC000000000000001LL;
      uint64_t v23 = v6;
      unsigned int v20 = (v4 >> 8) & 1;
      char v21 = v4 & 1;
      while (v7 != v8)
      {
        if (v22) {
          id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
        }
        else {
          id v9 = *(id *)(v6 + 8 * v8 + 32);
        }
        uint64_t v10 = v9;
        swift_bridgeObjectRetain(a3);
        id v4 = [v10 action];
        id v11 = [v10 systemProtocol];
        uint64_t v12 = outlined bridged method (pb) of @objc LNSuggestedAction.dialogParameters.getter(v10);
        if (!v12)
        {
          type metadata accessor for LNSuggestedActionDialogParameterKey(0LL);
          uint64_t v14 = v13;
          unint64_t v15 = lazy protocol witness table accessor for type LNSuggestedActionDialogParameterKey and conformance LNSuggestedActionDialogParameterKey();
          uint64_t v12 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v14, &type metadata for String, v15);
        }

        uint64_t v16 = v12;

        unint64_t v17 = _swiftEmptyArrayStorage[2];
        if (v17 >= _swiftEmptyArrayStorage[3] >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        ++v8;
        _swiftEmptyArrayStorage[2] = v17 + 1;
        os_log_type_t v18 = &_swiftEmptyArrayStorage[6 * v17];
        uint64_t v6 = v23;
        void v18[4] = a2;
        v18[5] = a3;
        *((_BYTE *)v18 + 48) = v21;
        *((_BYTE *)v18 + 49) = v20;
        v18[7] = v4;
        v18[8] = v11;
        v18[9] = v16;
        if (v7 == v8) {
          goto LABEL_14;
        }
      }

      __break(1u);
LABEL_16:
      if (v6 < 0) {
        uint64_t v19 = v6;
      }
      else {
        uint64_t v19 = v6 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v6);
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v19);
      swift_bridgeObjectRelease(v6);
      if (!v7) {
        goto LABEL_14;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_14:
    swift_bridgeObjectRelease(a3);
  }

void *specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0LL;
      uint64_t v19 = v4;
      while ((a1 & 0xC000000000000001LL) != 0)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
LABEL_7:
        uint64_t v10 = v9;
        unint64_t v11 = v8 + 1;
        if (__OFADD__(v8, 1LL)) {
          goto LABEL_22;
        }
        uint64_t v4 = (uint64_t)[v9 parentIdentifier];
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
        uint64_t v14 = v13;

        if (v12 == a2 && v14 == a3)
        {
          swift_bridgeObjectRelease(a3);
        }

        else
        {
          uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, a2, a3, 0LL);
          swift_bridgeObjectRelease(v14);
          if ((v4 & 1) == 0) {
            goto LABEL_16;
          }
        }

        if (!objc_msgSend(v10, "kind", v19))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          uint64_t v4 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v4);
          uint64_t v16 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, v10);
          specialized ContiguousArray._endMutation()(v16);
          goto LABEL_18;
        }

LABEL_27:
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v26 = swift_bridgeObjectRetain(a1);
    uint64_t v7 = (uint64_t *)(v26 + 40);
    unint64_t v8 = _swiftEmptyArrayStorage;
    id v9 = &_s10Foundation12NotificationV36_unconditionallyBridgeFromObjectiveCyACSo14NSNotificationCSgFZ_ptr;
    uint64_t v27 = v5;
    do
    {
      uint64_t v10 = *(v7 - 1);
      uint64_t v11 = *v7;
      id v12 = objc_allocWithZone((Class)v9[437]);
      swift_bridgeObjectRetain_n(v11, 2LL);
      id v13 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v10, v11, 0);
      if (v4)
      {
        swift_errorRelease(v4);
        swift_bridgeObjectRelease(v11);
        uint64_t v4 = 0LL;
      }

      else
      {
        uint64_t v14 = v13;
        if (v13)
        {
          id v15 = [(id)objc_opt_self(LNAutoShortcutsProvider) sharedInstance];
          NSString v16 = String._bridgeToObjectiveC()();
          uint64_t v28 = (uint64_t)v8;
          id v17 = [v15 autoShortcutsForApplicationRecord:v14 localeIdentifier:v16];

          uint64_t v18 = type metadata accessor for LNActionParameterMetadata( 0LL,  (unint64_t *)&lazy cache variable for type metadata for LNAutoShortcut,  &OBJC_CLASS___LNAutoShortcut_ptr);
          uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

          unint64_t v8 = (void *)v28;
          if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v28 + 16) + 1LL,  1LL,  v28);
            unint64_t v8 = v23;
          }

          unint64_t v21 = v8[2];
          unint64_t v20 = v8[3];
          if (v21 >= v20 >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v20 > 1,  v21 + 1,  1LL,  (uint64_t)v8);
            unint64_t v8 = v24;
          }

          __int128 v8[2] = v21 + 1;
          unint64_t v22 = &v8[3 * v21];
          v22[4] = v10;
          v22[5] = v11;
          v22[6] = v19;
          uint64_t v5 = v27;
          id v9 = &_s10Foundation12NotificationV36_unconditionallyBridgeFromObjectiveCyACSo14NSNotificationCSgFZ_ptr;
        }

        else
        {
          swift_bridgeObjectRelease(v11);
        }
      }

      v7 += 2;
      --v6;
    }

    while (v6);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v26);
  }

  else
  {
    swift_bridgeObjectRelease(a3);
    return _swiftEmptyArrayStorage;
  }

  return v8;
}

uint64_t DefaultLinkClient.appIntentSuggestionsSignposter.unsafeMutableAddressor()
{
  if (one-time initialization token for appIntentSuggestionsSignposter != -1) {
    swift_once( &one-time initialization token for appIntentSuggestionsSignposter,  one-time initialization function for appIntentSuggestionsSignposter);
  }
  uint64_t v0 = OUTLINED_FUNCTION_52();
  return __swift_project_value_buffer(v0, (uint64_t)static DefaultLinkClient.appIntentSuggestionsSignposter);
}

uint64_t static DefaultLinkClient.appIntentSuggestionsSignposter.getter()
{
  if (one-time initialization token for appIntentSuggestionsSignposter != -1) {
    swift_once( &one-time initialization token for appIntentSuggestionsSignposter,  one-time initialization function for appIntentSuggestionsSignposter);
  }
  uint64_t v0 = OUTLINED_FUNCTION_52();
  __swift_project_value_buffer(v0, (uint64_t)static DefaultLinkClient.appIntentSuggestionsSignposter);
  uint64_t v1 = OUTLINED_FUNCTION_89_0();
  return v2(v1);
}

void DefaultLinkClient.__allocating_init(metadataProvider:suggestionsProvider:registryObserver:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void *DefaultLinkClient.init(metadataProvider:suggestionsProvider:registryObserver:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject(v7, v11);
  *(_OWORD *)(inited + ++*(void *)(v0 + 16) = xmmword_3C040;
  *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0x53552D6E65LL;
  *(void *)(inited + 40) = 0xE500000000000000LL;
  *(void *)(inited + 48) = 0x42472D6E65LL;
  *(void *)(inited + 56) = 0xE500000000000000LL;
  *(void *)(inited + 64) = 0x41432D6E65LL;
  *(void *)(inited + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xE500000000000000LL;
  *(void *)(inited + 80) = 0x55412D6E65LL;
  *(void *)(inited + 88) = 0xE500000000000000LL;
  *(void *)(inited + 96) = 0x4E432D687ALL;
  *(void *)(inited + 104) = 0xE500000000000000LL;
  *(void *)(inited + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0x4B482D687ALL;
  *(void *)(inited + 120) = 0xE500000000000000LL;
  *(void *)(inited + 128) = 0x504A2D616ALL;
  *(void *)(inited + 136) = 0xE500000000000000LL;
  *(void *)(inited + 144) = 0x52462D7266LL;
  *(void *)(inited + 15__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xE500000000000000LL;
  *(void *)(inited + 160) = 0x45442D6564LL;
  *(void *)(inited + 168) = 0xE500000000000000LL;
  *(void *)(inited + 176) = 0x53452D7365LL;
  *(void *)(inited + 184) = 0xE500000000000000LL;
  *(void *)(inited + 19__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0x584D2D7365LL;
  *(void *)(inited + 200) = 0xE500000000000000LL;
  *(void *)(inited + 208) = 0x53552D7365LL;
  *(void *)(inited + 2++*(void *)(v0 + 16) = 0xE500000000000000LL;
  *(void *)(inited + 224) = 0x4E492D6E65LL;
  *(void *)(inited + 23__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xE500000000000000LL;
  Swift::Int v9 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  v3[5] = v9;
  return v3;
}

Swift::OpaquePointer_optional __swiftcall DefaultLinkClient.getLinkEnabledBundleIdentifiers()()
{
  if (one-time initialization token for linkSuggestions != -1) {
    swift_once(&one-time initialization token for linkSuggestions, one-time initialization function for linkSuggestions);
  }
  uint64_t v1 = OUTLINED_FUNCTION_45();
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.linkSuggestions);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_16_0(2LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "Fetching Link-enabled bundles", v5, 2u);
    OUTLINED_FUNCTION_3_0((uint64_t)v5);
  }

  uint64_t v6 = *(void **)(v0 + 16);
  id v38 = 0LL;
  id v7 = [v6 bundlesWithError:&v38];
  id v8 = v38;
  if (v7)
  {
    Swift::Int v9 = v7;
    uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, &type metadata for String);
    id v11 = v8;

    uint64_t v12 = OUTLINED_FUNCTION_58_0(v10);
    id v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_57_2(v14))
    {
      id v15 = (uint8_t *)OUTLINED_FUNCTION_16_0(12LL);
      NSString v16 = (void *)OUTLINED_FUNCTION_16_0(32LL);
      id v38 = v16;
      *(_DWORD *)id v15 = 136315138;
      uint64_t v17 = OUTLINED_FUNCTION_35();
      uint64_t v18 = Array.description.getter(v17, &type metadata for String);
      unint64_t v20 = v19;
      OUTLINED_FUNCTION_8();
      uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, (uint64_t *)&v38);
      OUTLINED_FUNCTION_32_3((uint64_t)&v36, (uint64_t)&v37);
      OUTLINED_FUNCTION_51(v10);
      OUTLINED_FUNCTION_88_0();
      OUTLINED_FUNCTION_12_3(&dword_0, v13, (os_log_type_t)v9, "Fetched Link-enabled bundles: %s", v15);
      OUTLINED_FUNCTION_9_3((uint64_t)v16, v21, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_3_0((uint64_t)v16);
      OUTLINED_FUNCTION_3_0((uint64_t)v15);
    }

    else
    {

      OUTLINED_FUNCTION_51(v10);
    }
  }

  else
  {
    id v23 = v38;
    uint64_t v24 = _convertNSErrorToError(_:)(v8);

    swift_willThrow(v25);
    OUTLINED_FUNCTION_88_1();
    uint64_t v26 = OUTLINED_FUNCTION_88_1();
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_57_2(v28))
    {
      unint64_t v29 = (uint8_t *)OUTLINED_FUNCTION_16_0(12LL);
      uint64_t v30 = (void *)OUTLINED_FUNCTION_16_0(32LL);
      id v38 = v30;
      *(_DWORD *)unint64_t v29 = 136315138;
      uint64_t v36 = v24;
      OUTLINED_FUNCTION_88_1();
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v32 = String.init<A>(describing:)(&v36, v31);
      uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, (uint64_t *)&v38);
      OUTLINED_FUNCTION_32_3((uint64_t)&v36, (uint64_t)&v37);
      OUTLINED_FUNCTION_30_2();
      OUTLINED_FUNCTION_48_0();
      OUTLINED_FUNCTION_48_0();
      OUTLINED_FUNCTION_12_3(&dword_0, v27, (os_log_type_t)v23, "Error fetching bundles: %s", v29);
      OUTLINED_FUNCTION_9_3((uint64_t)v30, v34, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_3_0((uint64_t)v30);
      OUTLINED_FUNCTION_3_0((uint64_t)v29);

      OUTLINED_FUNCTION_48_0();
    }

    else
    {
      OUTLINED_FUNCTION_48_0();
      OUTLINED_FUNCTION_48_0();
      OUTLINED_FUNCTION_48_0();
    }

    uint64_t v10 = 0LL;
  }

  uint64_t v35 = (void *)v10;
  result.value._rawValue = v35;
  result.is_nil = v22;
  return result;
}

void DefaultLinkClient.getSuggestedActions(for:)()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  if (one-time initialization token for linkSuggestions != -1) {
    swift_once(&one-time initialization token for linkSuggestions, one-time initialization function for linkSuggestions);
  }
  uint64_t v4 = OUTLINED_FUNCTION_45();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.linkSuggestions);
  uint64_t v5 = OUTLINED_FUNCTION_58_0(v3);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)OUTLINED_FUNCTION_16_0(12LL);
    uint64_t v9 = OUTLINED_FUNCTION_16_0(32LL);
    *(void *)&__int128 v79 = v9;
    *(_DWORD *)id v8 = 136315138;
    uint64_t v10 = OUTLINED_FUNCTION_44_3();
    uint64_t v11 = Array.description.getter(v10, &type metadata for LinkSuggestedActionsRequest);
    unint64_t v13 = v12;
    swift_bridgeObjectRelease(v3);
    uint64_t v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, (uint64_t *)&v79);
    uint64_t v15 = OUTLINED_FUNCTION_94_1(v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v15, v16, v8 + 4);
    OUTLINED_FUNCTION_51(v3);
    unint64_t v17 = v13;
    uint64_t v1 = v0;
    swift_bridgeObjectRelease(v17);
    OUTLINED_FUNCTION_12_3(&dword_0, v6, v7, "Retrieving suggested actions for requests: %s", v8);
    OUTLINED_FUNCTION_9_3(v9, v18, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_3_0(v9);
    OUTLINED_FUNCTION_3_0((uint64_t)v8);
  }

  else
  {

    OUTLINED_FUNCTION_51(v3);
  }

  unint64_t v19 = *(void **)(v1 + 24);
  unint64_t v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay25SiriLinkSuggestionsPlugin0E23SuggestedActionsRequestVG_So013LNSuggestionsJ0Cs5NeverOTg504_s25def29Plugin07DefaultB6ClientC19geth38Actions3forSayAA0bH6ActionVGSayAA0bhI7j10VG_tFSo013K58L0CAJcfu0_33_453d8a4a6e74da537e2f1aa14de2db16AjMTf3nnnpk_nTf1cn_n(v3);
  OUTLINED_FUNCTION_55_1( (uint64_t)v20,  (unint64_t *)&lazy cache variable for type metadata for LNSuggestionsRequest,  &OBJC_CLASS___LNSuggestionsRequest_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  OUTLINED_FUNCTION_102();
  *(void *)&__int128 v79 = 0LL;
  id v22 = [v19 suggestedActionsForSuggestionsRequests:isa error:&v79];

  id v23 = (id)v79;
  if (v22)
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LNSuggestedAction]);
    uint64_t v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v22,  &type metadata for String,  v24,  &protocol witness table for String);

    uint64_t v26 = *(void *)(v3 + 16);
    uint64_t v27 = _swiftEmptyArrayStorage;
    if (v26)
    {
      uint64_t v74 = v24;
      uint64_t v75 = v25;
      *(void *)&__int128 v79 = _swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v27 = (void *)v79;
      os_log_type_t v28 = (char *)(v3 + 49);
      do
      {
        uint64_t v29 = *(void *)(v28 - 17);
        uint64_t v30 = *(void *)(v28 - 9);
        char v31 = *(v28 - 1);
        char v76 = *v28;
        *(void *)&__int128 v79 = v27;
        unint64_t v32 = v27[2];
        unint64_t v33 = v27[3];
        OUTLINED_FUNCTION_58_0(v30);
        if (v32 >= v33 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v27 = (void *)v79;
        }

        v28 += 24;
        void v27[2] = v32 + 1;
        uint64_t v34 = &v27[5 * v32];
        v34[4] = v29;
        v34[5] = v30;
        v34[6] = v29;
        v34[7] = v30;
        *((_BYTE *)v34 + 64) = v31;
        *((_BYTE *)v34 + 6__swift_destroy_boxed_opaque_existential_1(v0 + 5) = v76;
        --v26;
      }

      while (v26);
      uint64_t v25 = v75;
      uint64_t v24 = v74;
    }

    uint64_t v35 = specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)v27);
    uint64_t v36 = OUTLINED_FUNCTION_58_0(v25);
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)OUTLINED_FUNCTION_16_0(12LL);
      uint64_t v40 = OUTLINED_FUNCTION_16_0(32LL);
      *(void *)&__int128 v79 = v40;
      *(_DWORD *)uint64_t v39 = 136315138;
      uint64_t v41 = OUTLINED_FUNCTION_40_2();
      uint64_t v42 = Dictionary.description.getter(v41, &type metadata for String, v24, &protocol witness table for String);
      unint64_t v43 = v35;
      unint64_t v45 = v44;
      swift_bridgeObjectRelease(v25);
      uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v45, (uint64_t *)&v79);
      uint64_t v47 = OUTLINED_FUNCTION_94_1(v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v47, v48, v39 + 4);
      OUTLINED_FUNCTION_51(v25);
      unint64_t v49 = v45;
      uint64_t v35 = v43;
      swift_bridgeObjectRelease(v49);
      OUTLINED_FUNCTION_12_3(&dword_0, v37, v38, "Found suggested actions: %s", v39);
      OUTLINED_FUNCTION_9_3(v40, v50, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_3_0(v40);
      OUTLINED_FUNCTION_3_0((uint64_t)v39);
    }

    else
    {

      uint64_t v51 = OUTLINED_FUNCTION_51(v25);
    }

    __chkstk_darwin(v51);
    uint64_t v64 = specialized Sequence.flatMap<A>(_:)( v25,  (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #2 in DefaultLinkClient.getSuggestedActions(for:));
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v35);
    uint64_t v65 = *(void *)(v64 + 16);
    if (v65)
    {
      type metadata accessor for DefaultLinkDialogIdProvider(0LL);
      int64_t v66 = (__int128 *)(v64 + 32);
      uint64_t v67 = _swiftEmptyArrayStorage;
      do
      {
        __int128 v68 = *v66;
        __int128 v69 = v66[2];
        __int128 v80 = v66[1];
        __int128 v81 = v69;
        __int128 v79 = v68;
        outlined retain of LinkSuggestedAction(&v79);
        if ((static DefaultLinkDialogIdProvider.canDialog(action:)((uint64_t)&v79) & 1) != 0)
        {
          uint64_t v77 = (uint64_t)v67;
          if ((swift_isUniquelyReferenced_nonNull_native(v67) & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v67 = (void *)v77;
          }

          unint64_t v70 = v67[2];
          if (v70 >= v67[3] >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v67 = (void *)v77;
          }

          v67[2] = v70 + 1;
          uint64_t v71 = &v67[6 * v70];
          __int128 v72 = v79;
          __int128 v73 = v81;
          v71[3] = v80;
          v71[4] = v73;
          v71[2] = v72;
        }

        else
        {
          outlined release of LinkSuggestedAction(&v79);
        }

        v66 += 3;
        --v65;
      }

      while (v65);
    }

    OUTLINED_FUNCTION_8();
  }

  else
  {
    uint64_t v52 = v23;
    uint64_t v53 = _convertNSErrorToError(_:)(v23);

    swift_willThrow(v54);
    OUTLINED_FUNCTION_81_1();
    uint64_t v55 = OUTLINED_FUNCTION_81_1();
    uint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = (uint8_t *)OUTLINED_FUNCTION_16_0(12LL);
      uint64_t v59 = OUTLINED_FUNCTION_16_0(32LL);
      *(void *)&__int128 v79 = v59;
      *(_DWORD *)uint64_t v58 = 136315138;
      uint64_t v77 = v53;
      OUTLINED_FUNCTION_81_1();
      uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v61 = String.init<A>(describing:)(&v77, v60);
      uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, (uint64_t *)&v79);
      OUTLINED_FUNCTION_32_3((uint64_t)&v77, (uint64_t)&v78);
      OUTLINED_FUNCTION_30_2();
      OUTLINED_FUNCTION_33_2();
      OUTLINED_FUNCTION_33_2();
      OUTLINED_FUNCTION_12_3(&dword_0, v56, v57, "Error fetching suggested actions: %s", v58);
      OUTLINED_FUNCTION_9_3(v59, v63, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_3_0(v59);
      OUTLINED_FUNCTION_3_0((uint64_t)v58);
    }

    else
    {
      OUTLINED_FUNCTION_33_2();
      OUTLINED_FUNCTION_33_2();
    }

    OUTLINED_FUNCTION_33_2();
  }

  OUTLINED_FUNCTION_57_0();
}

void *closure #2 in DefaultLinkClient.getSuggestedActions(for:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (!*(void *)(a4 + 16)) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(a2);
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
    return _swiftEmptyArrayStorage;
  }

  uint64_t v10 = *(void *)(a4 + 56) + 24 * v8;
  uint64_t v11 = *(void *)v10;
  uint64_t v12 = *(void *)(v10 + 8);
  int v13 = *(unsigned __int8 *)(v10 + 16);
  int v14 = *(unsigned __int8 *)(v10 + 17);
  swift_bridgeObjectRetain_n(v12, 2LL);
  swift_bridgeObjectRelease(a2);
  if (v14) {
    int v15 = 256;
  }
  else {
    int v15 = 0;
  }
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo17LNSuggestedActionCG_25SiriLinkSuggestionsPlugin0g9SuggestedE0Vs5NeverOTg504_s25fgh29Plugin07DefaultB6ClientC19getj20Actions3forSayAA0bH6e29VGSayAA0bhI7RequestVG_tFAHSS_s5So011D19K0CGtXEfU0_AgMXEfU_AI0gj7ActionsY0VTf1cn_n( a3,  v11,  v12,  v15 | v13);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease(v12);
  return (void *)v17;
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  char v31 = a2;
  specialized _NativeDictionary.makeIterator()(a1, v30);
  uint64_t v3 = v30[0];
  int64_t v4 = v30[3];
  unint64_t v5 = v30[4];
  uint64_t v28 = v30[1];
  int64_t v29 = (unint64_t)(v30[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a1);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (!v5) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v7 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v8 = v7 | (v4 << 6);
  while (1)
  {
    int v13 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v8);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = *(void *)(*(void *)(v3 + 56) + 8 * v8);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    uint64_t v17 = v31(v14, v15, v16);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v15);
    uint64_t v18 = *(void *)(v17 + 16);
    uint64_t v19 = v6[2];
    if (__OFADD__(v19, v18)) {
      break;
    }
    if (!swift_isUniquelyReferenced_nonNull_native(v6) || v19 + v18 > v6[3] >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v6 = v20;
    }

    if (*(void *)(v17 + 16))
    {
      uint64_t v21 = v6[2];
      if ((v6[3] >> 1) - v21 < v18) {
        goto LABEL_39;
      }
      unint64_t v22 = (unint64_t)&v6[6 * v21 + 4];
      if (v17 + 32 < v22 + 48 * v18 && v22 < v17 + 32 + 48 * v18) {
        goto LABEL_42;
      }
      swift_arrayInitWithCopy(v22);
      if (v18)
      {
        uint64_t v24 = v6[2];
        BOOL v25 = __OFADD__(v24, v18);
        uint64_t v26 = v24 + v18;
        if (v25) {
          goto LABEL_40;
        }
        v6[2] = v26;
      }
    }

    else if (v18)
    {
      goto LABEL_38;
    }

    swift_bridgeObjectRelease(v17);
    if (v5) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v9 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      goto LABEL_41;
    }
    if (v9 >= v29) {
      goto LABEL_36;
    }
    unint64_t v10 = *(void *)(v28 + 8 * v9);
    int64_t v11 = v4 + 1;
    if (!v10)
    {
      int64_t v11 = v4 + 2;
      if (v4 + 2 >= v29) {
        goto LABEL_36;
      }
      unint64_t v10 = *(void *)(v28 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v4 + 3;
        if (v4 + 3 >= v29) {
          goto LABEL_36;
        }
        unint64_t v10 = *(void *)(v28 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v4 + 4;
          if (v4 + 4 >= v29) {
            goto LABEL_36;
          }
          unint64_t v10 = *(void *)(v28 + 8 * v11);
          if (!v10)
          {
            int64_t v11 = v4 + 5;
            if (v4 + 5 >= v29) {
              goto LABEL_36;
            }
            unint64_t v10 = *(void *)(v28 + 8 * v11);
            if (!v10)
            {
              int64_t v12 = v4 + 6;
              while (v12 < v29)
              {
                unint64_t v10 = *(void *)(v28 + 8 * v12++);
                if (v10)
                {
                  int64_t v11 = v12 - 1;
                  goto LABEL_18;
                }
              }

Swift::OpaquePointer_optional __swiftcall DefaultLinkClient.getAutoShortcutsByBundleIdentifier()()
{
  uint64_t v88 = v1;
  uint64_t v5 = OUTLINED_FUNCTION_91_1();
  uint64_t v86 = *(void *)(v5 - 8);
  uint64_t v87 = v5;
  OUTLINED_FUNCTION_18_4();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_4_3();
  uint64_t v91 = v7;
  OUTLINED_FUNCTION_7_4();
  __chkstk_darwin(v8);
  uint64_t v83 = (char *)&v82 - v9;
  OUTLINED_FUNCTION_7_4();
  __chkstk_darwin(v10);
  uint64_t v84 = (char *)&v82 - v11;
  uint64_t v92 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v12 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  OUTLINED_FUNCTION_35_2();
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_87();
  uint64_t v85 = v14;
  OUTLINED_FUNCTION_7_4();
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v82 - v17;
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_11_4();
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v82 - v20;
  OUTLINED_FUNCTION_52();
  OUTLINED_FUNCTION_85_1();
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_2_3();
  if (one-time initialization token for appIntentSuggestionsSignposter != -1) {
    swift_once( &one-time initialization token for appIntentSuggestionsSignposter,  one-time initialization function for appIntentSuggestionsSignposter);
  }
  uint64_t v23 = __swift_project_value_buffer(v0, (uint64_t)static DefaultLinkClient.appIntentSuggestionsSignposter);
  uint64_t v89 = v1;
  uint64_t v90 = v0;
  uint64_t v24 = OUTLINED_FUNCTION_42_0(v3, v23, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  static OSSignpostID.exclusive.getter(v24);
  BOOL v25 = (os_log_s *)OUTLINED_FUNCTION_41_2();
  os_signpost_type_t v26 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    uint64_t v27 = (uint8_t *)OUTLINED_FUNCTION_16_0(2LL);
    *(_WORD *)uint64_t v27 = 0;
    os_signpost_id_t v29 = OSSignpostID.rawValue.getter(v27, v28);
    OUTLINED_FUNCTION_13_3(&dword_0, v25, v26, v29, "getAutoShortcutsByBundleIdentifier", "", v27);
    OUTLINED_FUNCTION_3_0((uint64_t)v27);
  }

  uint64_t v30 = v92;
  OUTLINED_FUNCTION_42_0(v4, (uint64_t)v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16));
  uint64_t v31 = OUTLINED_FUNCTION_92_1();
  OUTLINED_FUNCTION_30_3(v31);
  OUTLINED_FUNCTION_19_0();
  unint64_t v32 = *(void (**)(char *, uint64_t))(v12 + 8);
  v32(v21, v30);
  id v33 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
  uint64_t v34 = outlined bridged method (ob) of @objc AFPreferences.languageCode()(v33);
  uint64_t v36 = v91;
  if (v35)
  {
    uint64_t v37 = v34;
    uint64_t v38 = v35;
    if ((DefaultLinkClient.isSupportedDeviceAndLocale(siriLanguage:)(v34, v35) & 1) != 0)
    {
      unint64_t v39 = (unint64_t)DefaultLinkClient.getLinkEnabledBundleIdentifiers()();
      if (v39)
      {
        uint64_t v40 = v39;
        swift_bridgeObjectRetain(v38);
        uint64_t v41 = specialized Sequence.compactMap<A>(_:)(v40, v37, v38);
        OUTLINED_FUNCTION_8();
        OUTLINED_FUNCTION_88_0();
        specialized Dictionary.init<A>(_:uniquingKeysWith:)( (uint64_t)v41,  &demangling cache variable for type metadata for _DictionaryStorage<String, [LNAutoShortcut]>,  (void (*)(uint64_t, uint64_t, void **))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
        uint64_t v42 = (os_log_s *)OUTLINED_FUNCTION_41_2();
        uint64_t v43 = OUTLINED_FUNCTION_38_3();
        os_signpost_type_t v44 = static os_signpost_type_t.end.getter(v43);
        if ((OUTLINED_FUNCTION_59_2() & 1) != 0)
        {
          uint64_t v45 = OUTLINED_FUNCTION_20_2();
          uint64_t v46 = (uint64_t)v84;
          checkForErrorAndConsumeState(state:)(v45);
          OUTLINED_FUNCTION_21_2();
          uint64_t v48 = v86;
          uint64_t v47 = v87;
          if (OUTLINED_FUNCTION_62_1(v46, *(uint64_t (**)(uint64_t, uint64_t))(v86 + 88)) == enum case for OSSignpostError.doubleEnd(_:))
          {
            unint64_t v49 = "[Error] Interval already ended";
          }

          else
          {
            OUTLINED_FUNCTION_62_1(v46, *(uint64_t (**)(uint64_t, uint64_t))(v48 + 8));
            unint64_t v49 = "";
          }

          uint64_t v71 = (_WORD *)OUTLINED_FUNCTION_16_0(2LL);
          __int128 v72 = OUTLINED_FUNCTION_48_1(v71);
          os_signpost_id_t v74 = OSSignpostID.rawValue.getter(v72, v73);
          OUTLINED_FUNCTION_12_4(&dword_0, v42, v44, v74, "getAutoShortcutsByBundleIdentifier", v49);
          OUTLINED_FUNCTION_3_0(v47);
        }
      }

      else
      {
        OUTLINED_FUNCTION_88_0();
        unint64_t v62 = (os_log_s *)OUTLINED_FUNCTION_41_2();
        uint64_t v63 = v85;
        uint64_t v64 = OUTLINED_FUNCTION_38_3();
        os_signpost_type_t v65 = static os_signpost_type_t.end.getter(v64);
        if ((OUTLINED_FUNCTION_59_2() & 1) != 0)
        {
          uint64_t v66 = OUTLINED_FUNCTION_20_2();
          uint64_t v67 = (uint64_t)v83;
          checkForErrorAndConsumeState(state:)(v66);
          OUTLINED_FUNCTION_21_2();
          uint64_t v69 = v86;
          uint64_t v68 = v87;
          if (OUTLINED_FUNCTION_62_1(v67, *(uint64_t (**)(uint64_t, uint64_t))(v86 + 88)) == enum case for OSSignpostError.doubleEnd(_:))
          {
            unint64_t v70 = "[Error] Interval already ended";
          }

          else
          {
            OUTLINED_FUNCTION_62_1(v67, *(uint64_t (**)(uint64_t, uint64_t))(v69 + 8));
            unint64_t v70 = "";
          }

          uint64_t v75 = (_WORD *)OUTLINED_FUNCTION_16_0(2LL);
          char v76 = OUTLINED_FUNCTION_48_1(v75);
          os_signpost_id_t v78 = OSSignpostID.rawValue.getter(v76, v77);
          OUTLINED_FUNCTION_12_4(&dword_0, v62, v65, v78, "getAutoShortcutsByBundleIdentifier", v70);
          OUTLINED_FUNCTION_3_0(v68);
        }

        uint64_t v18 = v63;
      }

      goto LABEL_27;
    }

    OUTLINED_FUNCTION_88_0();
  }

  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LNAutoShortcut]);
  Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v50,  &protocol witness table for String);
  uint64_t v51 = (os_log_s *)OUTLINED_FUNCTION_41_2();
  uint64_t v52 = OUTLINED_FUNCTION_38_3();
  os_signpost_type_t v53 = static os_signpost_type_t.end.getter(v52);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    uint64_t v54 = OUTLINED_FUNCTION_20_2();
    checkForErrorAndConsumeState(state:)(v54);
    OUTLINED_FUNCTION_21_2();
    uint64_t v56 = v86;
    uint64_t v55 = v87;
    if (OUTLINED_FUNCTION_62_1(v36, *(uint64_t (**)(uint64_t, uint64_t))(v86 + 88)) == enum case for OSSignpostError.doubleEnd(_:))
    {
      os_log_type_t v57 = "[Error] Interval already ended";
    }

    else
    {
      OUTLINED_FUNCTION_62_1(v36, *(uint64_t (**)(uint64_t, uint64_t))(v56 + 8));
      os_log_type_t v57 = "";
    }

    uint64_t v58 = (_WORD *)OUTLINED_FUNCTION_16_0(2LL);
    uint64_t v59 = OUTLINED_FUNCTION_48_1(v58);
    os_signpost_id_t v61 = OSSignpostID.rawValue.getter(v59, v60);
    OUTLINED_FUNCTION_12_4(&dword_0, v51, v53, v61, "getAutoShortcutsByBundleIdentifier", v57);
    OUTLINED_FUNCTION_3_0(v55);
  }

  uint64_t v18 = v2;
LABEL_27:
  uint64_t v79 = v89;
  v32(v18, v92);
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_62_1(v3, *(uint64_t (**)(uint64_t, uint64_t))(v79 + 8));
  OUTLINED_FUNCTION_57_0();
  result.value._rawValue = v80;
  result.is_nil = v81;
  return result;
}

uint64_t DefaultLinkClient.isSupportedDeviceAndLocale(siriLanguage:)(uint64_t a1, uint64_t a2)
{
  if (!AFShouldRunAsrOnServerForUOD())
  {
    specialized Set.contains(_:)(a1, a2, *(void *)(v2 + 40));
    if ((v11 & 1) == 0 || !AFDeviceSupportsFullSiriUOD())
    {
      if (one-time initialization token for linkSuggestions != -1) {
        swift_once( &one-time initialization token for linkSuggestions,  one-time initialization function for linkSuggestions);
      }
      uint64_t v15 = type metadata accessor for Logger(0LL);
      uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)static Logger.linkSuggestions);
      uint64_t v7 = (os_log_s *)Logger.logObject.getter(v16);
      os_log_type_t v17 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v7, v17))
      {
        uint64_t v14 = 0LL;
        goto LABEL_20;
      }

      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl( &dword_0,  v7,  v17,  "Device/locale not supported by hybrid or UOD, not donating App Shortcut phrases for SiriHelp",  v9,  2u);
      uint64_t v14 = 0LL;
      goto LABEL_17;
    }

    if (one-time initialization token for linkSuggestions != -1) {
      swift_once( &one-time initialization token for linkSuggestions,  one-time initialization function for linkSuggestions);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.linkSuggestions);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      uint64_t v10 = "Device/locale supported by full UOD, donating App Shortcut phrases for SiriHelp";
      goto LABEL_12;
    }

void DefaultLinkClient.getAutoShortcutsFor(bundleIdentifier:)()
{
  uint64_t v97 = v0;
  uint64_t v98 = v4;
  unint64_t v6 = v5;
  uint64_t v7 = OUTLINED_FUNCTION_91_1();
  uint64_t v95 = *(void *)(v7 - 8);
  v96 = (char *)v7;
  OUTLINED_FUNCTION_18_4();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_35_2();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v18 = OUTLINED_FUNCTION_43_3(v10, v11, v12, v13, v14, v15, v16, v17, v89);
  uint64_t v103 = type metadata accessor for OSSignpostID(v18);
  uint64_t v19 = *(void *)(v103 - 8);
  OUTLINED_FUNCTION_18_4();
  __chkstk_darwin(v20);
  OUTLINED_FUNCTION_4_3();
  uint64_t v102 = v21;
  OUTLINED_FUNCTION_7_4();
  uint64_t v23 = __chkstk_darwin(v22);
  BOOL v25 = (char *)&v89 - v24;
  __chkstk_darwin(v23);
  OUTLINED_FUNCTION_11_4();
  __chkstk_darwin(v26);
  uint64_t v27 = OUTLINED_FUNCTION_23_2();
  uint64_t v28 = type metadata accessor for OSSignposter(v27);
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v31 = (char *)&v89 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for appIntentSuggestionsSignposter != -1) {
    swift_once( &one-time initialization token for appIntentSuggestionsSignposter,  one-time initialization function for appIntentSuggestionsSignposter);
  }
  uint64_t v94 = v1;
  uint64_t v92 = v25;
  uint64_t v32 = __swift_project_value_buffer(v28, (uint64_t)static DefaultLinkClient.appIntentSuggestionsSignposter);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v31, v32, v28);
  uint64_t v33 = OUTLINED_FUNCTION_58_0(v6);
  static OSSignpostID.exclusive.getter(v33);
  uint64_t v34 = (os_log_s *)OUTLINED_FUNCTION_84_0();
  int v35 = static os_signpost_type_t.begin.getter();
  char v36 = OS_os_log.signpostsEnabled.getter();
  uint64_t v99 = v29;
  uint64_t v100 = v28;
  uint64_t v101 = v31;
  unint64_t v93 = v6;
  if ((v36 & 1) != 0)
  {
    HIDWORD(v89) = v35;
    uint64_t v37 = v19;
    uint64_t v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
    v90(v3, v2, v103);
    uint64_t v38 = (uint8_t *)OUTLINED_FUNCTION_16_0(12LL);
    uint64_t v39 = OUTLINED_FUNCTION_16_0(32LL);
    uint64_t v104 = v39;
    *(_DWORD *)uint64_t v38 = 136315138;
    OUTLINED_FUNCTION_44_3();
    uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v6, &v104);
    uint64_t v41 = OUTLINED_FUNCTION_75_1(v40);
    uint64_t v29 = v99;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v41, v42, v38 + 4);
    uint64_t v43 = OUTLINED_FUNCTION_34_1(v6);
    os_signpost_id_t v45 = OSSignpostID.rawValue.getter(v43, v44);
    _os_signpost_emit_with_name_impl( &dword_0,  v34,  BYTE4(v89),  v45,  "getAutoShortcutsForBundle",  "BundleId: %s",  v38,  0xCu);
    OUTLINED_FUNCTION_9_3(v39, v46, (uint64_t)&type metadata for Any + 8);
    uint64_t v47 = v39;
    uint64_t v31 = v101;
    OUTLINED_FUNCTION_3_0(v47);
    OUTLINED_FUNCTION_3_0((uint64_t)v38);

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v3, v103);
    uint64_t v48 = v90;
  }

  else
  {
    OUTLINED_FUNCTION_51(v6);

    uint64_t v37 = v19;
    uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  }

  uint64_t v49 = v103;
  v48(v3, v2, v103);
  uint64_t v50 = OUTLINED_FUNCTION_92_1();
  OUTLINED_FUNCTION_30_3(v50);
  OUTLINED_FUNCTION_19_0();
  uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
  v51(v2, v49);
  id v52 = [(id)objc_opt_self(AFPreferences) sharedPreferences];
  uint64_t v53 = outlined bridged method (ob) of @objc AFPreferences.languageCode()(v52);
  if (!v54) {
    goto LABEL_13;
  }
  if ((DefaultLinkClient.isSupportedDeviceAndLocale(siriLanguage:)(v53, v54) & 1) == 0
    || (id v55 = objc_allocWithZone(&OBJC_CLASS___LSApplicationRecord),
        uint64_t v56 = v93,
        swift_bridgeObjectRetain(v93),
        (id v57 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v98, v56, 0)) == 0LL))
  {
    OUTLINED_FUNCTION_102();
LABEL_13:
    os_signpost_type_t v65 = (os_log_s *)OUTLINED_FUNCTION_84_0();
    uint64_t v73 = OUTLINED_FUNCTION_38_3();
    static os_signpost_type_t.end.getter(v73);
    if ((OUTLINED_FUNCTION_59_2() & 1) == 0) {
      goto LABEL_20;
    }
    os_signpost_id_t v74 = v51;
    uint64_t v75 = OUTLINED_FUNCTION_20_2();
    uint64_t v76 = v94;
    checkForErrorAndConsumeState(state:)(v75);
    OUTLINED_FUNCTION_21_2();
    uint64_t v77 = v95;
    if (OUTLINED_FUNCTION_71_1(v76, *(uint64_t (**)(uint64_t, uint64_t))(v95 + 88)) == enum case for OSSignpostError.doubleEnd(_:))
    {
      os_signpost_id_t v78 = "[Error] Interval already ended";
    }

    else
    {
      OUTLINED_FUNCTION_71_1(v76, *(uint64_t (**)(uint64_t, uint64_t))(v77 + 8));
      os_signpost_id_t v78 = "";
    }

    uint64_t v79 = (_WORD *)OUTLINED_FUNCTION_16_0(2LL);
    __int128 v80 = OUTLINED_FUNCTION_48_1(v79);
    OSSignpostID.rawValue.getter(v80, v81);
    OUTLINED_FUNCTION_40_3();
    OUTLINED_FUNCTION_12_4(&dword_0, v65, v82, v83, "getAutoShortcutsForBundle", v78);
    uint64_t v51 = v74;
    goto LABEL_19;
  }

  id v58 = [(id)objc_opt_self(LNAutoShortcutsProvider) sharedInstance];
  NSString v59 = String._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_102();
  uint64_t v60 = (void *)OUTLINED_FUNCTION_89_0();
  id v62 = [v60 v61];

  uint64_t v31 = v101;
  uint64_t v64 = OUTLINED_FUNCTION_55_1( v63,  (unint64_t *)&lazy cache variable for type metadata for LNAutoShortcut,  &OBJC_CLASS___LNAutoShortcut_ptr);
  static Array._unconditionallyBridgeFromObjectiveC(_:)(v62, v64);

  os_signpost_type_t v65 = (os_log_s *)OUTLINED_FUNCTION_84_0();
  uint64_t v66 = v92;
  uint64_t v67 = OUTLINED_FUNCTION_38_3();
  os_signpost_type_t v68 = static os_signpost_type_t.end.getter(v67);
  if ((OUTLINED_FUNCTION_59_2() & 1) == 0)
  {
    uint64_t v102 = v66;
    goto LABEL_20;
  }

  uint64_t v69 = OUTLINED_FUNCTION_20_2();
  uint64_t v70 = v91;
  checkForErrorAndConsumeState(state:)(v69);
  OUTLINED_FUNCTION_21_2();
  uint64_t v71 = v95;
  uint64_t v31 = v96;
  if (OUTLINED_FUNCTION_62_1(v70, *(uint64_t (**)(uint64_t, uint64_t))(v95 + 88)) == enum case for OSSignpostError.doubleEnd(_:))
  {
    __int128 v72 = "[Error] Interval already ended";
  }

  else
  {
    OUTLINED_FUNCTION_62_1(v70, *(uint64_t (**)(uint64_t, uint64_t))(v71 + 8));
    __int128 v72 = "";
  }

  uint64_t v84 = (_WORD *)OUTLINED_FUNCTION_16_0(2LL);
  uint64_t v85 = OUTLINED_FUNCTION_48_1(v84);
  uint64_t v86 = v92;
  os_signpost_id_t v88 = OSSignpostID.rawValue.getter(v85, v87);
  OUTLINED_FUNCTION_12_4(&dword_0, v65, v68, v88, "getAutoShortcutsForBundle", v72);
  uint64_t v102 = v86;
LABEL_19:
  uint64_t v29 = v99;
  OUTLINED_FUNCTION_3_0((uint64_t)v31);
  uint64_t v31 = v101;
LABEL_20:

  v51((uint64_t)v102, v103);
  OUTLINED_FUNCTION_21_2();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v100);
  OUTLINED_FUNCTION_57_0();
}

void DefaultLinkClient.getActionMetadata(forBundleIdentifier:withActionIdentifiers:)( uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v9 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v95 = *(void *)(v9 - 8);
  uint64_t v96 = v9;
  OUTLINED_FUNCTION_18_4();
  __chkstk_darwin(v10);
  uint64_t v91 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  OUTLINED_FUNCTION_7_4();
  __chkstk_darwin(v12);
  uint64_t v92 = (char *)&v86 - v13;
  uint64_t v14 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v103 = *(void *)(v14 - 8);
  OUTLINED_FUNCTION_18_4();
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_4_3();
  uint64_t v93 = v16;
  OUTLINED_FUNCTION_7_4();
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_87();
  uint64_t v97 = v18;
  OUTLINED_FUNCTION_7_4();
  __chkstk_darwin(v19);
  uint64_t v99 = (char *)&v86 - v20;
  OUTLINED_FUNCTION_7_4();
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_87();
  uint64_t v98 = v22;
  OUTLINED_FUNCTION_7_4();
  __chkstk_darwin(v23);
  BOOL v25 = (char *)&v86 - v24;
  type metadata accessor for OSSignposter(0LL);
  OUTLINED_FUNCTION_85_1();
  __chkstk_darwin(v26);
  OUTLINED_FUNCTION_2_3();
  if (one-time initialization token for appIntentSuggestionsSignposter != -1) {
    swift_once( &one-time initialization token for appIntentSuggestionsSignposter,  one-time initialization function for appIntentSuggestionsSignposter);
  }
  uint64_t v27 = __swift_project_value_buffer(v3, (uint64_t)static DefaultLinkClient.appIntentSuggestionsSignposter);
  uint64_t v101 = v4;
  uint64_t v102 = v3;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v27, v3);
  uint64_t v28 = OUTLINED_FUNCTION_41_2();
  OSSignpostID.init(log:)(v28);
  OUTLINED_FUNCTION_58_0(a2);
  uint64_t v29 = OUTLINED_FUNCTION_58_0(a3);
  uint64_t v30 = (os_log_s *)OSSignposter.logHandle.getter(v29);
  int v31 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    int v88 = v31;
    uint64_t v94 = v5;
    uint64_t v89 = *(void (**)(uint64_t, char *, uint64_t))(v103 + 16);
    v89(v98, v25, v14);
    uint64_t v32 = OUTLINED_FUNCTION_16_0(22LL);
    uint64_t v87 = (void *)OUTLINED_FUNCTION_16_0(64LL);
    id v106 = v87;
    *(_DWORD *)uint64_t v32 = 136315394;
    OUTLINED_FUNCTION_83_0();
    uint64_t v90 = a1;
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v106);
    OUTLINED_FUNCTION_24_3(v33);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v32 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    uint64_t v105 = a3;
    swift_bridgeObjectRetain(a3);
    uint64_t v34 = v104;
    specialized MutableCollection<>.sort(by:)(&v105);
    uint64_t v86 = v14;
    uint64_t v104 = v34;
    if (v34)
    {
      swift_bridgeObjectRelease(a3);
      swift_release(v105);
      __break(1u);
      return;
    }

    uint64_t v35 = Array.description.getter(v105, &type metadata for String);
    unint64_t v37 = v36;
    OUTLINED_FUNCTION_21_2();
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, (uint64_t *)&v106);
    OUTLINED_FUNCTION_24_3(v38);
    OUTLINED_FUNCTION_51(a3);
    uint64_t v39 = OUTLINED_FUNCTION_77_0();
    uint64_t v40 = v98;
    os_signpost_id_t v42 = OSSignpostID.rawValue.getter(v39, v41);
    _os_signpost_emit_with_name_impl( &dword_0,  v30,  (os_signpost_type_t)v88,  v42,  "getActionMetadata",  "BundleId: %s, actionIdentifier - %s",  (uint8_t *)v32,  0x16u);
    uint64_t v43 = (uint64_t)v87;
    swift_arrayDestroy(v87, 2LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_3_0(v43);
    OUTLINED_FUNCTION_3_0(v32);

    uint64_t v44 = a3;
    uint64_t v45 = v103;
    uint64_t v14 = v86;
    (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v40, v86);
    uint64_t v5 = v94;
    uint64_t v46 = (void (*)(char *, char *, uint64_t))v89;
    a1 = v90;
  }

  else
  {
    OUTLINED_FUNCTION_51(a3);
    OUTLINED_FUNCTION_51(a2);

    uint64_t v45 = v103;
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v103 + 16);
    uint64_t v44 = a3;
  }

  uint64_t v47 = v99;
  v46(v99, v25, v14);
  uint64_t v48 = type metadata accessor for OSSignpostIntervalState(0LL);
  OUTLINED_FUNCTION_30_3(v48);
  OSSignpostIntervalState.init(id:isOpen:)(v47, 1LL);
  uint64_t v103 = *(void *)(v45 + 8);
  ((void (*)(char *, uint64_t))v103)(v25, v14);
  OUTLINED_FUNCTION_83_0();
  uint64_t v49 = v104;
  uint64_t v50 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_So32LNFullyQualifiedActionIdentifierCs5NeverOTg5052_s25SiriLinkSuggestionsPlugin07DefaultB6ClientC17getf87Metadata19forBundleIdentifier04withH11IdentifiersSDySSSo08LNActionI0CGSS_SaySSGtKFSo016D20QualifiedhL0CSSXEfU_SSTf1cn_n( v44,  a1,  a2);
  uint64_t v51 = *(void **)(v100 + 16);
  type metadata accessor for LNActionParameterMetadata( 0LL,  &lazy cache variable for type metadata for LNFullyQualifiedActionIdentifier,  &OBJC_CLASS___LNFullyQualifiedActionIdentifier_ptr);
  uint64_t v52 = a1;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v50);
  id v106 = 0LL;
  id v54 = [v51 actionsWithFullyQualifiedIdentifiers:isa error:&v106];

  id v55 = v106;
  if (v54)
  {
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : LNActionMetadata]);
    uint64_t v57 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v54,  &type metadata for String,  v56,  &protocol witness table for String);
    id v58 = v55;

    OUTLINED_FUNCTION_83_0();
    specialized Dictionary.subscript.getter(v52, a2, v57);
    swift_bridgeObjectRelease(a2);
    OUTLINED_FUNCTION_77_0();
    NSString v59 = (os_log_s *)OUTLINED_FUNCTION_41_2();
    uint64_t v60 = v97;
    uint64_t v61 = OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v62 = static os_signpost_type_t.end.getter(v61);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      uint64_t v104 = v49;
      uint64_t v63 = OUTLINED_FUNCTION_20_2();
      uint64_t v64 = v92;
      checkForErrorAndConsumeState(state:)(v63);
      OUTLINED_FUNCTION_21_2();
      uint64_t v66 = v95;
      uint64_t v65 = v96;
      if ((*(unsigned int (**)(char *, uint64_t))(v95 + 88))(v64, v96) == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v67 = "[Error] Interval already ended";
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v66 + 8))(v64, v65);
        uint64_t v67 = "";
      }

      os_signpost_id_t v78 = (uint8_t *)OUTLINED_FUNCTION_16_0(2LL);
      os_signpost_id_t v80 = OUTLINED_FUNCTION_90_1(v78, v79);
      uint64_t v81 = v67;
      uint64_t v60 = v65;
      OUTLINED_FUNCTION_13_3(&dword_0, v59, v62, v80, "getActionMetadata", v81, v78);
      OUTLINED_FUNCTION_3_0((uint64_t)v78);
    }

    OUTLINED_FUNCTION_76_1(v60);
    OUTLINED_FUNCTION_21_2();
    OUTLINED_FUNCTION_93_1(v101);
  }

  else
  {
    id v68 = v106;
    OUTLINED_FUNCTION_86_1();

    swift_willThrow(v69);
    uint64_t v70 = (os_log_s *)OUTLINED_FUNCTION_41_2();
    uint64_t v71 = v93;
    uint64_t v72 = OSSignpostIntervalState.signpostID.getter();
    static os_signpost_type_t.end.getter(v72);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      uint64_t v94 = v5;
      uint64_t v73 = OUTLINED_FUNCTION_20_2();
      os_signpost_id_t v74 = v91;
      checkForErrorAndConsumeState(state:)(v73);
      OUTLINED_FUNCTION_21_2();
      uint64_t v76 = v95;
      uint64_t v75 = v96;
      if ((*(unsigned int (**)(char *, uint64_t))(v95 + 88))(v74, v96) == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v77 = "[Error] Interval already ended";
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v76 + 8))(v74, v75);
        uint64_t v77 = "";
      }

      os_signpost_type_t v82 = (uint8_t *)OUTLINED_FUNCTION_16_0(2LL);
      *(_WORD *)os_signpost_type_t v82 = 0;
      OSSignpostID.rawValue.getter(v82, v83);
      OUTLINED_FUNCTION_40_3();
      OUTLINED_FUNCTION_13_3(&dword_0, v70, v84, v85, "getActionMetadata", v77, v82);
      OUTLINED_FUNCTION_3_0((uint64_t)v82);
      uint64_t v5 = v94;
    }

    OUTLINED_FUNCTION_76_1(v71);
    OUTLINED_FUNCTION_21_2();
    (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v5, v102);
  }

  OUTLINED_FUNCTION_0_3();
}

void DefaultLinkClient.getActionMetadata(forBundleIdentifier:)(uint64_t a1, unint64_t a2)
{
  uint64_t v114 = a1;
  uint64_t v6 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v107 = *(void *)(v6 - 8);
  uint64_t v108 = v6;
  OUTLINED_FUNCTION_18_4();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_4_3();
  uint64_t v104 = v8;
  OUTLINED_FUNCTION_7_4();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v18 = OUTLINED_FUNCTION_43_3(v10, v11, v12, v13, v14, v15, v16, v17, v102);
  uint64_t v19 = type metadata accessor for OSSignpostID(v18);
  unint64_t v117 = *(void *)(v19 - 8);
  OUTLINED_FUNCTION_18_4();
  __chkstk_darwin(v20);
  OUTLINED_FUNCTION_4_3();
  uint64_t v109 = v21;
  OUTLINED_FUNCTION_7_4();
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_11_4();
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v102 - v25;
  __chkstk_darwin(v24);
  uint64_t v27 = OUTLINED_FUNCTION_23_2();
  uint64_t v28 = type metadata accessor for OSSignposter(v27);
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  OUTLINED_FUNCTION_50_2();
  if (one-time initialization token for appIntentSuggestionsSignposter != -1) {
    swift_once( &one-time initialization token for appIntentSuggestionsSignposter,  one-time initialization function for appIntentSuggestionsSignposter);
  }
  uint64_t v110 = v4;
  uint64_t v30 = __swift_project_value_buffer(v28, (uint64_t)static DefaultLinkClient.appIntentSuggestionsSignposter);
  uint64_t v111 = v29;
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v2, v30, v28);
  uint64_t v32 = OSSignposter.logHandle.getter(v31);
  OSSignpostID.init(log:)(v32);
  uint64_t v33 = OUTLINED_FUNCTION_58_0(a2);
  uint64_t v115 = v2;
  uint64_t v34 = (os_log_s *)OSSignposter.logHandle.getter(v33);
  int v35 = static os_signpost_type_t.begin.getter();
  char v36 = OS_os_log.signpostsEnabled.getter();
  uint64_t v116 = v19;
  uint64_t v112 = v28;
  if ((v36 & 1) != 0)
  {
    uint64_t v105 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v117 + 16);
    OUTLINED_FUNCTION_65_1(v105);
    int v103 = v35;
    unint64_t v37 = (uint8_t *)OUTLINED_FUNCTION_16_0(12LL);
    uint64_t v38 = (void *)OUTLINED_FUNCTION_16_0(32LL);
    uint64_t v118 = v38;
    *(_DWORD *)unint64_t v37 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, a2, (uint64_t *)&v118);
    uint64_t v40 = OUTLINED_FUNCTION_75_1(v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v40, v41, v37 + 4);
    uint64_t v42 = swift_bridgeObjectRelease_n(a2, 3LL);
    os_signpost_id_t v44 = OSSignpostID.rawValue.getter(v42, v43);
    _os_signpost_emit_with_name_impl( &dword_0,  v34,  (os_signpost_type_t)v103,  v44,  "getActionMetadata",  "BundleId: %s",  v37,  0xCu);
    swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v45 = (uint64_t)v38;
    uint64_t v19 = v116;
    OUTLINED_FUNCTION_3_0(v45);
    uint64_t v46 = (uint64_t)v37;
    unint64_t v47 = v117;
    OUTLINED_FUNCTION_3_0(v46);

    (*(void (**)(char *, uint64_t))(v47 + 8))(v26, v19);
    uint64_t v48 = v105;
  }

  else
  {
    OUTLINED_FUNCTION_51(a2);

    unint64_t v47 = v117;
    uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v117 + 16);
  }

  OUTLINED_FUNCTION_65_1(v48);
  uint64_t v49 = type metadata accessor for OSSignpostIntervalState(0LL);
  OUTLINED_FUNCTION_30_3(v49);
  uint64_t v50 = OSSignpostIntervalState.init(id:isOpen:)(v26, 1LL);
  uint64_t v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 8);
  ((void (*)(uint64_t, uint64_t))v51)(v3, v19);
  NSString v52 = String._bridgeToObjectiveC()();
  uint64_t v118 = 0LL;
  uint64_t v53 = (void *)OUTLINED_FUNCTION_89_0();
  id v55 = [v53 v54];

  id v56 = v118;
  if (v55)
  {
    uint64_t v114 = v50;
    uint64_t v57 = type metadata accessor for LNActionParameterMetadata( 0LL,  &lazy cache variable for type metadata for LNActionMetadata,  &OBJC_CLASS___LNActionMetadata_ptr);
    uint64_t v58 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v55, v57);
    id v59 = v56;

    uint64_t v113 = v58;
    if ((unint64_t)v58 >> 62)
    {
      if (v58 < 0) {
        uint64_t v101 = v58;
      }
      else {
        uint64_t v101 = v58 & 0xFFFFFFFFFFFFFF8LL;
      }
      OUTLINED_FUNCTION_44_3();
      uint64_t v60 = _CocoaArrayWrapper.endIndex.getter(v101);
      OUTLINED_FUNCTION_77_0();
    }

    else
    {
      uint64_t v60 = *(void *)((char *)&dword_10 + (v58 & 0xFFFFFFFFFFFFF8LL));
    }

    uint64_t v61 = v116;
    uint64_t v105 = v51;
    if (v60)
    {
      uint64_t v118 = _swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (v60 < 0) {
        __break(1u);
      }
      uint64_t v62 = 0LL;
      uint64_t v63 = v118;
      uint64_t v64 = v113;
      unint64_t v117 = v113 & 0xC000000000000001LL;
      do
      {
        if (v117) {
          id v65 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v62, v64);
        }
        else {
          id v65 = *(id *)(v64 + 8 * v62 + 32);
        }
        id v66 = v65;
        id v67 = [v65 identifier];
        uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
        uint64_t v70 = v69;

        uint64_t v118 = v63;
        unint64_t v71 = v63[2];
        if (v71 >= v63[3] >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v64 = v113;
          uint64_t v63 = v118;
        }

        ++v62;
        v63[2] = v71 + 1;
        uint64_t v72 = &v63[3 * v71];
        v72[4] = v68;
        v72[5] = v70;
        v72[6] = v66;
      }

      while (v60 != v62);
      swift_bridgeObjectRelease(v64);
      uint64_t v61 = v116;
    }

    else
    {
      swift_bridgeObjectRelease(v113);
      uint64_t v63 = _swiftEmptyArrayStorage;
    }

    os_signpost_type_t v84 = specialized Dictionary.init<A>(_:uniquingKeysWith:)( (uint64_t)v63,  &demangling cache variable for type metadata for _DictionaryStorage<String, LNActionMetadata>,  (void (*)(uint64_t, uint64_t, void **))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
    os_signpost_id_t v85 = (os_log_s *)OSSignposter.logHandle.getter(v84);
    uint64_t v86 = v110;
    uint64_t v87 = v114;
    uint64_t v88 = OSSignpostIntervalState.signpostID.getter();
    static os_signpost_type_t.end.getter(v88);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      uint64_t v89 = swift_retain(v87);
      uint64_t v90 = v106;
      checkForErrorAndConsumeState(state:)(v89);
      swift_release(v87);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v107 + 88))(v90, v108) == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v91 = "[Error] Interval already ended";
      }

      else
      {
        OUTLINED_FUNCTION_60_2();
        uint64_t v91 = "";
      }

      uint64_t v92 = (uint8_t *)OUTLINED_FUNCTION_16_0(2LL);
      *(_WORD *)uint64_t v92 = 0;
      uint64_t v86 = v110;
      OSSignpostID.rawValue.getter(v92, v93);
      OUTLINED_FUNCTION_40_3();
      OUTLINED_FUNCTION_13_3(&dword_0, v85, v94, v95, "getActionMetadata", v91, v92);
      OUTLINED_FUNCTION_3_0((uint64_t)v92);
      uint64_t v61 = v116;
      uint64_t v87 = v114;
    }

    ((void (*)(uint64_t, uint64_t))v105)(v86, v61);
    swift_release(v87);
    (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v115, v112);
  }

  else
  {
    uint64_t v73 = v118;
    OUTLINED_FUNCTION_86_1();

    uint64_t v75 = swift_willThrow(v74);
    uint64_t v76 = (os_log_s *)OSSignposter.logHandle.getter(v75);
    uint64_t v77 = v109;
    uint64_t v78 = OSSignpostIntervalState.signpostID.getter();
    static os_signpost_type_t.end.getter(v78);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      uint64_t v79 = swift_retain(v50);
      uint64_t v80 = v104;
      checkForErrorAndConsumeState(state:)(v79);
      uint64_t v81 = v50;
      swift_release(v50);
      uint64_t v82 = v107;
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v107 + 88))(v80, v108) == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v83 = "[Error] Interval already ended";
      }

      else
      {
        OUTLINED_FUNCTION_60_2();
        uint64_t v83 = "";
      }

      uint64_t v96 = (uint8_t *)OUTLINED_FUNCTION_16_0(2LL);
      OUTLINED_FUNCTION_90_1(v96, v97);
      OUTLINED_FUNCTION_40_3();
      uint64_t v98 = v83;
      uint64_t v77 = v82;
      OUTLINED_FUNCTION_13_3(&dword_0, v76, v99, v100, "getActionMetadata", v98, v96);
      OUTLINED_FUNCTION_3_0((uint64_t)v96);
      uint64_t v50 = v81;
    }

    ((void (*)(uint64_t, uint64_t))v51)(v77, v116);
    swift_release(v50);
    OUTLINED_FUNCTION_93_1(v111);
  }

  OUTLINED_FUNCTION_0_3();
}

uint64_t DefaultLinkClient.getActionState(bundleIdentifier:actionIdentifiers:metadataForPolicy:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 128) = a3;
  *(void *)(v4 + 136) = a4;
  return OUTLINED_FUNCTION_11_1( (uint64_t)DefaultLinkClient.getActionState(bundleIdentifier:actionIdentifiers:metadataForPolicy:),  0LL,  0LL);
}

uint64_t DefaultLinkClient.getActionState(bundleIdentifier:actionIdentifiers:metadataForPolicy:)()
{
  id v1 =  [(id)objc_opt_self(LNConnectionPolicy) policyWithActionMetadata:*(void *)(v0 + 136)];
  *(void *)(v0 + 80) = 0LL;
  id v2 = [v1 connectionWithError:v0 + 80];
  *(void *)(v0 + 144) = v2;

  uint64_t v3 = *(void **)(v0 + 80);
  if (v2)
  {
    id v4 = v3;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    *(void *)(v0 + 15__swift_destroy_boxed_opaque_existential_1(v0 + 2) = isa;
    *(void *)(v0 + 56) = v0 + 120;
    *(void *)(v0 + ++*(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = DefaultLinkClient.getActionState(bundleIdentifier:actionIdentifiers:metadataForPolicy:);
    *(void *)(v0 + 11__swift_destroy_boxed_opaque_existential_1(v0 + 2) = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 0x40000000LL;
    *(void *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary?, @unowned NSError?) -> () with result type [String : NSNumber];
    *(void *)(v0 + 104) = &block_descriptor;
    [v2 fetchStateForAppIntentIdentifiers:isa completionHandler:v0 + 80];
    return swift_continuation_await(v0 + 16);
  }

  else
  {
    id v7 = v3;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  id v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 16Hasher.init(_seed:)(v2, 0LL) = v1;
  if (v1) {
    id v2 = DefaultLinkClient.getActionState(bundleIdentifier:actionIdentifiers:metadataForPolicy:);
  }
  else {
    id v2 = DefaultLinkClient.getActionState(bundleIdentifier:actionIdentifiers:metadataForPolicy:);
  }
  return OUTLINED_FUNCTION_11_1((uint64_t)v2, 0LL, 0LL);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  id v2 = *(void **)(v0 + 144);
  id v1 = *(void **)(v0 + 152);
  uint64_t v3 = specialized _NativeDictionary.mapValues<A>(_:)(*(void *)(v0 + 120));

  OUTLINED_FUNCTION_8();
  return (*(uint64_t (**)(void *))(v0 + 8))(v3);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  id v1 = *(void **)(v0 + 152);
  id v2 = *(void **)(v0 + 144);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0LL, 0LL);
  *uint64_t v6 = a2;
  return swift_continuation_throwingResumeWithError(a1, v5);
}

uint64_t specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  **(void **)(*(void *)(a1 + 64) + OUTLINED_FUNCTION_1(v1, 40LL) = a2;
  return swift_continuation_throwingResume();
}

void DefaultLinkClient.getExamplePhraseTemplates(bundleIdentifier:actionIdentifier:)()
{
  uint64_t v131 = v0;
  uint64_t v4 = v3;
  uint64_t v133 = v5;
  uint64_t v134 = v6;
  uint64_t v8 = v7;
  uint64_t v125 = OUTLINED_FUNCTION_91_1();
  uint64_t v9 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  OUTLINED_FUNCTION_4_3();
  v122 = v10;
  OUTLINED_FUNCTION_7_4();
  __chkstk_darwin(v11);
  uint64_t v12 = OUTLINED_FUNCTION_23_2();
  uint64_t v135 = type metadata accessor for OSSignpostID(v12);
  uint64_t v13 = *(void *)(v135 - 8);
  OUTLINED_FUNCTION_18_4();
  __chkstk_darwin(v14);
  __int128 v123 = (char *)&v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  OUTLINED_FUNCTION_7_4();
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_87();
  uint64_t v126 = v17;
  OUTLINED_FUNCTION_7_4();
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_11_4();
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v120 - v20;
  uint64_t v22 = OUTLINED_FUNCTION_52();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_50_2();
  if (one-time initialization token for appIntentSuggestionsSignposter != -1) {
    swift_once( &one-time initialization token for appIntentSuggestionsSignposter,  one-time initialization function for appIntentSuggestionsSignposter);
  }
  uint64_t v121 = v1;
  uint64_t v124 = v9;
  uint64_t v24 = __swift_project_value_buffer(v22, (uint64_t)static DefaultLinkClient.appIntentSuggestionsSignposter);
  uint64_t v129 = v23;
  uint64_t v130 = v22;
  uint64_t v25 = OUTLINED_FUNCTION_42_0(v0, v24, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16));
  uint64_t v26 = OSSignposter.logHandle.getter(v25);
  OSSignpostID.init(log:)(v26);
  OUTLINED_FUNCTION_58_0(v8);
  uint64_t v27 = OUTLINED_FUNCTION_58_0(v4);
  uint64_t v132 = v0;
  uint64_t v28 = (os_log_s *)OSSignposter.logHandle.getter(v27);
  int v29 = static os_signpost_type_t.begin.getter();
  char v30 = OS_os_log.signpostsEnabled.getter();
  unint64_t v136 = v8;
  if ((v30 & 1) != 0)
  {
    LODWORD(v12__swift_destroy_boxed_opaque_existential_1(v0 + 7) = v29;
    uint64_t v31 = v13;
    __int128 v128 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 16);
    v128(v2, v21, v135);
    uint64_t v32 = OUTLINED_FUNCTION_16_0(22LL);
    uint64_t v33 = (void *)OUTLINED_FUNCTION_16_0(64LL);
    v138[0] = v33;
    *(_DWORD *)uint64_t v32 = 136315394;
    swift_bridgeObjectRetain(v136);
    uint64_t v137 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v133, v136, (uint64_t *)v138);
    OUTLINED_FUNCTION_45_2();
    OUTLINED_FUNCTION_34_1(v136);
    *(_WORD *)(v32 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    OUTLINED_FUNCTION_40_2();
    uint64_t v137 = OUTLINED_FUNCTION_49_2();
    OUTLINED_FUNCTION_45_2();
    uint64_t v34 = OUTLINED_FUNCTION_34_1(v4);
    os_signpost_id_t v36 = OSSignpostID.rawValue.getter(v34, v35);
    _os_signpost_emit_with_name_impl( &dword_0,  v28,  (os_signpost_type_t)v127,  v36,  "getExamplePhraseTemplates",  "BundleId: %s, actionIdentifier - %s",  (uint8_t *)v32,  0x16u);
    swift_arrayDestroy(v33, 2LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_3_0((uint64_t)v33);
    uint64_t v37 = v32;
    uint64_t v38 = v135;
    OUTLINED_FUNCTION_3_0(v37);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v2, v38);
    v128(v2, v21, v38);
  }

  else
  {
    OUTLINED_FUNCTION_51(v4);
    OUTLINED_FUNCTION_51(v8);

    uint64_t v31 = v13;
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v2, v21, v135);
  }

  uint64_t v39 = OUTLINED_FUNCTION_92_1();
  OUTLINED_FUNCTION_30_3(v39);
  __int128 v128 = (void (*)(uint64_t, char *, uint64_t))OUTLINED_FUNCTION_19_0();
  uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
  OUTLINED_FUNCTION_73_1();
  NSString v41 = String._bridgeToObjectiveC()();
  v138[0] = 0LL;
  uint64_t v42 = (void *)OUTLINED_FUNCTION_89_0();
  id v44 = [v42 v43];

  id v46 = v138[0];
  if (v44)
  {
    uint64_t v47 = OUTLINED_FUNCTION_55_1( v45,  &lazy cache variable for type metadata for LNExamplePhraseDescription,  &OBJC_CLASS___LNExamplePhraseDescription_ptr);
    uint64_t v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v44, v47);
    id v49 = v46;

    OUTLINED_FUNCTION_40_2();
    uint64_t v50 = (uint64_t)specialized _ArrayProtocol.filter(_:)(v48, v134, v4);
    uint64_t v51 = v50;
    if ((unint64_t)v50 >> 62)
    {
      if (v50 < 0) {
        uint64_t v119 = v50;
      }
      else {
        uint64_t v119 = v50 & 0xFFFFFFFFFFFFFF8LL;
      }
      OUTLINED_FUNCTION_26_1();
      uint64_t v52 = _CocoaArrayWrapper.endIndex.getter(v119);
    }

    else
    {
      uint64_t v52 = *(void *)((char *)&dword_10 + (v50 & 0xFFFFFFFFFFFFF8LL));
      OUTLINED_FUNCTION_26_1();
    }

    v127 = v40;
    if (!v52)
    {
      unint64_t v53 = v4;
      id v55 = _swiftEmptyArrayStorage;
LABEL_27:
      OUTLINED_FUNCTION_51(v51);
      uint64_t v79 = OUTLINED_FUNCTION_64_2();
      specialized Set.init<A>(_:)(v79);
      specialized _copyCollectionToContiguousArray<A>(_:)();
      OUTLINED_FUNCTION_8();
      if (one-time initialization token for appIntentsSuggestions != -1) {
        swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
      }
      uint64_t v80 = OUTLINED_FUNCTION_45();
      __swift_project_value_buffer(v80, (uint64_t)static Logger.appIntentsSuggestions);
      unint64_t v81 = v136;
      OUTLINED_FUNCTION_58_0(v136);
      OUTLINED_FUNCTION_58_0(v53);
      uint64_t v82 = OUTLINED_FUNCTION_64_2();
      uint64_t v83 = (os_log_s *)Logger.logObject.getter(v82);
      os_log_type_t v84 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v83, v84))
      {
        uint64_t v85 = OUTLINED_FUNCTION_16_0(32LL);
        uint64_t v86 = (void *)OUTLINED_FUNCTION_16_0(96LL);
        v138[0] = v86;
        *(_DWORD *)uint64_t v85 = 136315650;
        OUTLINED_FUNCTION_83_0();
        uint64_t v137 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v133, v81, (uint64_t *)v138);
        OUTLINED_FUNCTION_17_3();
        OUTLINED_FUNCTION_34_1(v81);
        *(_WORD *)(v85 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
        swift_bridgeObjectRetain(v53);
        uint64_t v137 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v134, v53, (uint64_t *)v138);
        OUTLINED_FUNCTION_17_3();
        OUTLINED_FUNCTION_34_1(v53);
        *(_WORD *)(v85 + 2__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
        uint64_t v87 = OUTLINED_FUNCTION_64_2();
        uint64_t v88 = Array.description.getter(v87, &type metadata for String);
        unint64_t v90 = v89;
        swift_bridgeObjectRelease(v55);
        uint64_t v137 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v90, (uint64_t *)v138);
        OUTLINED_FUNCTION_17_3();
        OUTLINED_FUNCTION_51((uint64_t)v55);
        OUTLINED_FUNCTION_30_2();
        _os_log_impl( &dword_0,  v83,  v84,  "bundleIdentifier - %s with action identifier - %s got examplePhraseTemplates - %s",  (uint8_t *)v85,  0x20u);
        swift_arrayDestroy(v86, 3LL, (char *)&type metadata for Any + 8);
        OUTLINED_FUNCTION_3_0((uint64_t)v86);
        OUTLINED_FUNCTION_3_0(v85);
      }

      else
      {

        OUTLINED_FUNCTION_51((uint64_t)v55);
        OUTLINED_FUNCTION_51(v53);
        uint64_t v91 = OUTLINED_FUNCTION_51(v81);
      }

      uint64_t v31 = v132;
      uint64_t v92 = v128;
      uint64_t v93 = (os_log_s *)OSSignposter.logHandle.getter(v91);
      uint64_t v94 = v126;
      uint64_t v95 = OUTLINED_FUNCTION_68_0();
      static os_signpost_type_t.end.getter(v95);
      char v96 = OS_os_log.signpostsEnabled.getter();
      uint64_t v97 = v135;
      if ((v96 & 1) != 0)
      {
        uint64_t v98 = swift_retain(v92);
        uint64_t v99 = v121;
        checkForErrorAndConsumeState(state:)(v98);
        OUTLINED_FUNCTION_78_1();
        uint64_t v100 = v124;
        if (OUTLINED_FUNCTION_71_1(v99, *(uint64_t (**)(uint64_t, uint64_t))(v124 + 88)) == enum case for OSSignpostError.doubleEnd(_:))
        {
          uint64_t v101 = "[Error] Interval already ended";
        }

        else
        {
          OUTLINED_FUNCTION_71_1(v99, *(uint64_t (**)(uint64_t, uint64_t))(v100 + 8));
          uint64_t v101 = "";
        }

        uint64_t v111 = (_WORD *)OUTLINED_FUNCTION_16_0(2LL);
        OUTLINED_FUNCTION_66_1(v111, v112);
        OUTLINED_FUNCTION_40_3();
        OUTLINED_FUNCTION_13_3(&dword_0, v93, v113, v114, "getExamplePhraseTemplates", v101, (uint8_t *)v100);
        OUTLINED_FUNCTION_3_0(v100);
        uint64_t v31 = v132;
      }

      v127(v94, v97);
      goto LABEL_45;
    }

    if (v52 >= 1)
    {
      unint64_t v53 = v4;
      uint64_t v54 = 0LL;
      id v55 = _swiftEmptyArrayStorage;
      do
      {
        if ((v51 & 0xC000000000000001LL) != 0) {
          id v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v54, v51);
        }
        else {
          id v56 = *(id *)(v51 + 8 * v54 + 32);
        }
        uint64_t v57 = v56;
        uint64_t v58 = outlined bridged method (pb) of @objc LNExamplePhraseDescription.phraseTemplate.getter(v56);
        uint64_t v60 = v59;

        if (v60)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v55) & 1) == 0)
          {
            OUTLINED_FUNCTION_74(0LL, v55[2] + 1LL);
            id v55 = v64;
          }

          unint64_t v62 = v55[2];
          unint64_t v61 = v55[3];
          if (v62 >= v61 >> 1)
          {
            OUTLINED_FUNCTION_74(v61 > 1, v62 + 1);
            id v55 = v65;
          }

          v55[2] = v62 + 1;
          uint64_t v63 = &v55[2 * v62];
          v63[4] = v58;
          v63[5] = v60;
        }

        ++v54;
      }

      while (v52 != v54);
      goto LABEL_27;
    }

    __break(1u);
    goto LABEL_51;
  }

  id v66 = v138[0];
  uint64_t v2 = _convertNSErrorToError(_:)(v46);

  swift_willThrow(v67);
  uint64_t v31 = v132;
  if (one-time initialization token for appIntentsSuggestions != -1) {
LABEL_51:
  }
    swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
  uint64_t v68 = OUTLINED_FUNCTION_45();
  __swift_project_value_buffer(v68, (uint64_t)static Logger.appIntentsSuggestions);
  unint64_t v69 = v136;
  OUTLINED_FUNCTION_58_0(v136);
  uint64_t v70 = OUTLINED_FUNCTION_58_0(v4);
  unint64_t v71 = (os_log_s *)Logger.logObject.getter(v70);
  os_log_type_t v72 = static os_log_type_t.error.getter();
  BOOL v73 = os_log_type_enabled(v71, v72);
  uint64_t v74 = v128;
  if (v73)
  {
    uint64_t v75 = OUTLINED_FUNCTION_16_0(22LL);
    uint64_t v76 = (void *)OUTLINED_FUNCTION_16_0(64LL);
    v127 = v40;
    uint64_t v77 = (uint64_t)v76;
    v138[0] = v76;
    *(_DWORD *)uint64_t v75 = 136315394;
    OUTLINED_FUNCTION_64_2();
    uint64_t v137 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v133, v69, (uint64_t *)v138);
    uint64_t v133 = v2;
    OUTLINED_FUNCTION_46_2();
    OUTLINED_FUNCTION_34_1(v69);
    *(_WORD *)(v75 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    OUTLINED_FUNCTION_40_2();
    uint64_t v137 = OUTLINED_FUNCTION_49_2();
    OUTLINED_FUNCTION_46_2();
    OUTLINED_FUNCTION_34_1(v4);
    _os_log_impl( &dword_0,  v71,  v72,  "error attempting to get phrase templates for bundleIdentifier - %s and actionIdentifier - %s",  (uint8_t *)v75,  0x16u);
    swift_arrayDestroy(v77, 2LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_3_0(v77);
    OUTLINED_FUNCTION_3_0(v75);

    uint64_t v78 = v133;
  }

  else
  {

    OUTLINED_FUNCTION_51(v4);
    OUTLINED_FUNCTION_51(v69);
    uint64_t v78 = v2;
  }

  uint64_t v102 = swift_errorRelease(v78);
  int v103 = (os_log_s *)OSSignposter.logHandle.getter(v102);
  uint64_t v104 = OUTLINED_FUNCTION_68_0();
  os_signpost_type_t v105 = static os_signpost_type_t.end.getter(v104);
  char v106 = OS_os_log.signpostsEnabled.getter();
  uint64_t v107 = v122;
  if ((v106 & 1) != 0)
  {
    uint64_t v108 = swift_retain(v74);
    checkForErrorAndConsumeState(state:)(v108);
    OUTLINED_FUNCTION_78_1();
    uint64_t v109 = v124;
    if (OUTLINED_FUNCTION_71_1((uint64_t)v107, *(uint64_t (**)(uint64_t, uint64_t))(v124 + 88)) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v110 = "[Error] Interval already ended";
    }

    else
    {
      OUTLINED_FUNCTION_71_1((uint64_t)v107, *(uint64_t (**)(uint64_t, uint64_t))(v109 + 8));
      uint64_t v110 = "";
    }

    uint64_t v115 = (_WORD *)OUTLINED_FUNCTION_16_0(2LL);
    os_signpost_id_t v117 = OUTLINED_FUNCTION_66_1(v115, v116);
    OUTLINED_FUNCTION_13_3(&dword_0, v103, v105, v117, "getExamplePhraseTemplates", v110, v107);
    OUTLINED_FUNCTION_3_0((uint64_t)v107);
  }

  OUTLINED_FUNCTION_73_1();
LABEL_45:
  uint64_t v118 = v129;
  OUTLINED_FUNCTION_78_1();
  OUTLINED_FUNCTION_62_1(v31, *(uint64_t (**)(uint64_t, uint64_t))(v118 + 8));
  OUTLINED_FUNCTION_57_0();
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = Set.init(minimumCapacity:)(*(void *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  uint64_t v10 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      OUTLINED_FUNCTION_44_3();
      specialized Set._Variant.insert(_:)(v9, v5, v6);
      swift_bridgeObjectRelease(v9[1]);
      v4 += 2;
      --v3;
    }

    while (v3);
    OUTLINED_FUNCTION_8();
    return v10;
  }

  else
  {
    uint64_t v7 = v2;
    OUTLINED_FUNCTION_8();
  }

  return v7;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    OUTLINED_FUNCTION_35();
    uint64_t v3 = OUTLINED_FUNCTION_96_1();
    a1 = OUTLINED_FUNCTION_8();
  }

  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v4 = OUTLINED_FUNCTION_55_1( a1,  (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol,  &OBJC_CLASS___LNSystemProtocol_ptr);
  unint64_t v5 = lazy protocol witness table accessor for type LNSystemProtocol and conformance NSObject();
  uint64_t result = Set.init(minimumCapacity:)(v3, v4, v5);
  uint64_t v7 = result;
  uint64_t v13 = result;
  if (!v2)
  {
    uint64_t v8 = *(void *)((char *)&dword_10 + (v1 & 0xFFFFFFFFFFFFF8LL));
    if (v8) {
      goto LABEL_5;
    }
LABEL_16:
    OUTLINED_FUNCTION_8();
    return v7;
  }

  if (v1 < 0) {
    uint64_t v11 = v1;
  }
  else {
    uint64_t v11 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  OUTLINED_FUNCTION_35();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v11);
  uint64_t result = OUTLINED_FUNCTION_8();
  if (!v8) {
    goto LABEL_16;
  }
LABEL_5:
  if (v8 >= 1)
  {
    for (uint64_t i = 0LL; i != v8; ++i)
    {
      if ((v1 & 0xC000000000000001LL) != 0) {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
      }
      else {
        id v10 = *(id *)(v1 + 8 * i + 32);
      }
      specialized Set._Variant.insert(_:)((Swift::Int *)&v12, v10);
    }

    OUTLINED_FUNCTION_8();
    return v13;
  }

  __break(1u);
  return result;
}

uint64_t DefaultLinkClient.deinit()
{
  swift_release(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return v0;
}

uint64_t DefaultLinkClient.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

unint64_t protocol witness for LinkClient.getLinkEnabledBundleIdentifiers() in conformance DefaultLinkClient()
{
  return (unint64_t)DefaultLinkClient.getLinkEnabledBundleIdentifiers()();
}

void protocol witness for LinkClient.getSuggestedActions(for:) in conformance DefaultLinkClient()
{
}

unint64_t protocol witness for LinkClient.getAutoShortcutsByBundleIdentifier() in conformance DefaultLinkClient()
{
  return (unint64_t)DefaultLinkClient.getAutoShortcutsByBundleIdentifier()();
}

void protocol witness for LinkClient.getAutoShortcutsFor(bundleIdentifier:) in conformance DefaultLinkClient()
{
}

void protocol witness for LinkClient.getActionMetadata(forBundleIdentifier:withActionIdentifiers:) in conformance DefaultLinkClient( uint64_t a1, unint64_t a2, uint64_t a3)
{
}

void protocol witness for LinkClient.getActionMetadata(forBundleIdentifier:) in conformance DefaultLinkClient( uint64_t a1, unint64_t a2)
{
}

uint64_t protocol witness for LinkClient.getActionState(bundleIdentifier:actionIdentifiers:metadataForPolicy:) in conformance DefaultLinkClient( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_4EBEC);
  *(void *)(v4 + ++*(void *)(v0 + 16) = v7;
  *uint64_t v7 = v4;
  v7[1] = protocol witness for LinkClient.getActionState(bundleIdentifier:actionIdentifiers:metadataForPolicy:) in conformance DefaultLinkClient;
  return DefaultLinkClient.getActionState(bundleIdentifier:actionIdentifiers:metadataForPolicy:)( (uint64_t)v7,  v8,  a3,  a4);
}

uint64_t protocol witness for LinkClient.getActionState(bundleIdentifier:actionIdentifiers:metadataForPolicy:) in conformance DefaultLinkClient( uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 16);
  uint64_t v5 = *v2;
  uint64_t v6 = swift_task_dealloc(v4);
  if (!v1) {
    uint64_t v6 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

void protocol witness for LinkClient.getExamplePhraseTemplates(bundleIdentifier:actionIdentifier:) in conformance DefaultLinkClient()
{
}

id @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v12 = 0LL;
  id v7 = [v3 initWithBundleIdentifier:v6 allowPlaceholder:a3 & 1 error:&v12];

  id v8 = v12;
  if (v7)
  {
    id v9 = v12;
  }

  else
  {
    id v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }

  return v7;
}

id @nonobjc LNFullyQualifiedActionIdentifier.init(actionIdentifier:bundleIdentifier:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  id v9 = [v4 initWithActionIdentifier:v7 bundleIdentifier:v8];

  return v9;
}

#error "206D4: call analysis failed (funcsize=223)"
uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)( uint64_t a1,  char a2,  void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[5];
  uint64_t v38;
  os_signpost_id_t v36 = a3;
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return swift_bridgeObjectRelease(v4);
  }
  uint64_t v35 = v3;
  swift_bridgeObjectRetain(a1);
  uint64_t v34 = v4;
  for (uint64_t i = (uint64_t *)(v4 + 48); ; i += 3)
  {
    id v9 = *(i - 2);
    NSString v8 = *(i - 1);
    id v10 = *i;
    uint64_t v11 = (void *)*v36;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
    uint64_t v20 = v11[2];
    uint64_t v21 = (v12 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21)) {
      break;
    }
    uint64_t v23 = v12;
    if (v11[3] >= v22)
    {
      if ((a2 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [LNAutoShortcut]>);
        _NativeDictionary.copy()();
      }
    }

    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v22,  a2 & 1,  v13,  v14,  v15,  v16,  v17,  v18,  v33,  v34,  v35,  (uint64_t)v36,  *(int *)v37,  v37[4]);
      uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
      if ((v23 & 1) != (v25 & 1)) {
        goto LABEL_18;
      }
      uint64_t v19 = v24;
    }

    uint64_t v26 = (void *)*v36;
    if ((v23 & 1) != 0)
    {
      uint64_t v38 = *(void *)(v26[7] + 8 * v19);
      swift_bridgeObjectRetain(v38);
      specialized Array.append<A>(contentsOf:)(v10);
      swift_bridgeObjectRelease(v8);
      uint64_t v27 = v26[7];
      swift_bridgeObjectRelease(*(void *)(v27 + 8 * v19));
      *(void *)(v27 + 8 * v19) = v38;
    }

    else
    {
      v26[(v19 >> 6) + 8] |= 1LL << v19;
      uint64_t v28 = (uint64_t *)(v26[6] + 16 * v19);
      *uint64_t v28 = v9;
      v28[1] = v8;
      *(void *)(v26[7] + 8 * v19) = v10;
      int v29 = v26[2];
      char v30 = __OFADD__(v29, 1LL);
      uint64_t v31 = v29 + 1;
      if (v30) {
        goto LABEL_17;
      }
      __int128 v26[2] = v31;
    }

    a2 = 1;
    if (!--v5)
    {
      uint64_t v4 = v34;
      swift_bridgeObjectRelease(v34);
      return swift_bridgeObjectRelease(v4);
    }
  }

  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void specialized _copyCollectionToContiguousArray<A>(_:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v3 = (const void *)OUTLINED_FUNCTION_1(v2, 16 * v1 + 32);
    size_t v4 = _swift_stdlib_malloc_size(v3);
    OUTLINED_FUNCTION_58_2(2 * ((uint64_t)(v4 - 32) / 16));
    specialized Sequence._copySequenceContents(initializing:)(v5, v6, v7, v8);
    OUTLINED_FUNCTION_25_3();
    OUTLINED_FUNCTION_10_3();
    if (!v9) {
      __break(1u);
    }
  }

  OUTLINED_FUNCTION_8_2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  OUTLINED_FUNCTION_52_2();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v3 = (const void *)OUTLINED_FUNCTION_1(v2, 8 * v1 + 32);
    _swift_stdlib_malloc_size(v3);
    OUTLINED_FUNCTION_61_2();
    OUTLINED_FUNCTION_58_2(v4);
    specialized Sequence._copySequenceContents(initializing:)(v5, v6, v7, v8);
    OUTLINED_FUNCTION_25_3();
    OUTLINED_FUNCTION_10_3();
    if (!v9) {
      __break(1u);
    }
  }

  OUTLINED_FUNCTION_8_2();
}

void specialized _copyCollectionToContiguousArray<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v26;
  a26 = v28;
  uint64_t v29 = *(void *)(v27 + 16);
  if (v29)
  {
    uint64_t v30 = v27;
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LinkSuggestedActionsRequest>);
    uint64_t v32 = (void *)OUTLINED_FUNCTION_1(v31, 24 * v29 + 32);
    size_t v33 = _swift_stdlib_malloc_size(v32);
    v32[2] = v29;
    v32[3] = 2 * ((uint64_t)(v33 - 32) / 24);
    specialized Sequence._copySequenceContents(initializing:)((uint64_t)&a10, (uint64_t)(v32 + 4), v29, v30);
    OUTLINED_FUNCTION_26_1();
    OUTLINED_FUNCTION_10_3();
    if (!v34) {
      __break(1u);
    }
  }

  OUTLINED_FUNCTION_8_2();
}

void specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  while (v2)
  {
    if (v2 <= 0)
    {
      size_t v4 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      size_t v4 = (void *)OUTLINED_FUNCTION_1(v3, 8 * v2 + 32);
      _swift_stdlib_malloc_size(v4);
      OUTLINED_FUNCTION_61_2();
      v4[2] = v2;
      v4[3] = v5;
    }

    OUTLINED_FUNCTION_35();
    uint64_t v6 = specialized Array._copyContents(initializing:)((uint64_t)(v4 + 4), v2, v1);
    uint64_t v1 = v7;
    swift_bridgeObjectRelease(v6);
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_8:
    OUTLINED_FUNCTION_35();
    uint64_t v2 = OUTLINED_FUNCTION_96_1();
    OUTLINED_FUNCTION_8();
  }

  OUTLINED_FUNCTION_7();
}

void *specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  uint64_t result = (void *)static _DictionaryStorage.copy(original:)(a1);
  uint64_t v3 = result;
  int64_t v4 = 0LL;
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v23 = a1 + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & v5;
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  id v10 = (char *)(result + 8);
  if ((v7 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    uint64_t result = objc_msgSend(*(id *)(*(void *)(a1 + 56) + 8 * i), "BOOLValue", swift_bridgeObjectRetain(v17).n128_f64[0]);
    *(void *)&v10[(i >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << i;
    uint64_t v19 = (void *)(v3[6] + 16 * i);
    *uint64_t v19 = v18;
    v19[1] = v17;
    *(_BYTE *)(v3[7] + i) = (_BYTE)result;
    uint64_t v20 = v3[2];
    BOOL v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (v21)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    v3[2] = v22;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      goto LABEL_24;
    }
    if (v13 >= v9) {
      return v3;
    }
    unint64_t v14 = *(void *)(v23 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v9) {
        return v3;
      }
      unint64_t v14 = *(void *)(v23 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v9) {
          return v3;
        }
        unint64_t v14 = *(void *)(v23 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }

uint64_t specialized _NativeDictionary.makeIterator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1LL;
  uint64_t v3 = -1LL << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1LL << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0LL;
  a2[4] = v2 & v5;
  return result;
}

void *partial apply for closure #2 in DefaultLinkClient.getSuggestedActions(for:)( uint64_t a1, uint64_t a2, unint64_t a3)
{
  return closure #2 in DefaultLinkClient.getSuggestedActions(for:)(a1, a2, a3, *(void *)(v3 + 16));
}

void *outlined retain of LinkSuggestedAction(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  uint64_t v3 = (void *)a1[4];
  uint64_t v4 = a1[5];
  swift_bridgeObjectRetain(a1[1]);
  id v5 = v2;
  id v6 = v3;
  swift_bridgeObjectRetain(v4);
  return a1;
}

void specialized MutableCollection<>.sort(by:)(void *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v2 = v3;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v3) {
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0LL, v3, 1LL, a1);
      }
      return;
    }

LABEL_145:
    __break(1u);
    goto LABEL_146;
  }

  Swift::Int v5 = v4;
  specialized static Array._allocateUninitialized(_:)(v3 / 2);
  uint64_t v107 = v6;
  uint64_t v108 = v3;
  uint64_t v109 = v7;
  os_signpost_type_t v105 = a1;
  if (v3 > 0)
  {
    Swift::Int v106 = v5;
    Swift::Int v8 = 0LL;
    uint64_t v9 = *a1;
    uint64_t v104 = *a1 + 8;
    uint64_t v110 = (char *)_swiftEmptyArrayStorage;
    while (1)
    {
      Swift::Int v10 = v8++;
      if (v8 >= v3) {
        goto LABEL_32;
      }
      unint64_t v11 = (uint64_t *)(v9 + 16 * v8);
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      unint64_t v14 = (void *)(v9 + 16 * v10);
      uint64_t v15 = v14[1];
      if (v12 == *v14 && v13 == v15) {
        break;
      }
      int v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, *v14, v15, 1LL);
      Swift::Int v18 = v10 + 2;
      if (v10 + 2 < v3) {
        goto LABEL_13;
      }
LABEL_23:
      Swift::Int v8 = v18;
      if ((v17 & 1) == 0) {
        goto LABEL_32;
      }
LABEL_24:
      if (v18 < v10) {
        goto LABEL_149;
      }
      if (v10 < v18)
      {
        uint64_t v26 = 16 * v18;
        uint64_t v27 = 16 * v10;
        Swift::Int v28 = v18;
        Swift::Int v29 = v10;
        do
        {
          if (v29 != --v28)
          {
            if (!v9) {
              goto LABEL_153;
            }
            uint64_t v30 = v9 + v26;
            uint64_t v31 = *(void *)(v9 + v27);
            uint64_t v32 = *(void *)(v9 + v27 + 8);
            *(_OWORD *)(v9 + v2__swift_destroy_boxed_opaque_existential_1(v0 + 7) = *(_OWORD *)(v9 + v26 - 16);
            *(void *)(v30 - ++*(void *)(v0 + 16) = v31;
            *(void *)(v30 - 8) = v32;
          }

          ++v29;
          v26 -= 16LL;
          v27 += 16LL;
        }

        while (v29 < v28);
      }

            if ((v140 & 1) != 0) {
              goto LABEL_199;
            }
            v148 = &v115[2 * v117];
            v150 = *v148;
            v149 = v148[1];
            __int128 v128 = __OFSUB__(v149, v150);
            v151 = v149 - v150;
            if (v128) {
              goto LABEL_201;
            }
            if (v151 < v139) {
              goto LABEL_162;
            }
LABEL_153:
            Swift::Int v3 = v117 - 1;
            if (v117 - 1 >= v114)
            {
              __break(1u);
LABEL_190:
              __break(1u);
LABEL_191:
              __break(1u);
LABEL_192:
              __break(1u);
LABEL_193:
              __break(1u);
LABEL_194:
              __break(1u);
LABEL_195:
              __break(1u);
LABEL_196:
              __break(1u);
LABEL_197:
              __break(1u);
LABEL_198:
              __break(1u);
LABEL_199:
              __break(1u);
LABEL_200:
              __break(1u);
LABEL_201:
              __break(1u);
LABEL_202:
              __break(1u);
LABEL_203:
              __break(1u);
              goto LABEL_204;
            }

            if (!v11) {
              goto LABEL_217;
            }
            v156 = &v115[2 * v3];
            v157 = *v156;
            v158 = v117;
            v159 = &v115[2 * v117];
            v160 = v159[1];
            v161 = (char *)(v11 + 8 * *v156);
            v199 = (char *)(v11 + 8LL * *v159);
            v195 = v11 + 8 * v160;
            swift_bridgeObjectRetain(v200);
            specialized _merge<A>(low:mid:high:buffer:by:)(v161, v199, v195, v190, v200);
            if (v193)
            {
              v167 = v12;
LABEL_168:
              v168 = swift_bridgeObjectRelease(v167);
              Swift::Int v3 = v200;
              if (v189 >= -1)
              {
                *(void *)((char *)&dword_10 + (v204 & 0xFFFFFFFFFFFFF8LL)) = 0LL;
                specialized Array._endMutation()(v168);
                v169 = v204;
                swift_bridgeObjectRelease_n(v200, 3LL);
                swift_bridgeObjectRelease(v169);
                return swift_bridgeObjectRelease(v3);
              }

LABEL_31:
      Swift::Int v8 = v18;
LABEL_32:
      if (v8 >= v3) {
        goto LABEL_41;
      }
      if (__OFSUB__(v8, v10)) {
        goto LABEL_144;
      }
      if (v8 - v10 >= v106) {
        goto LABEL_41;
      }
      if (__OFADD__(v10, v106)) {
        goto LABEL_147;
      }
      if (v10 + v106 >= v3) {
        Swift::Int v33 = v3;
      }
      else {
        Swift::Int v33 = v10 + v106;
      }
      if (v33 < v10)
      {
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
        return;
      }

      if (v8 == v33)
      {
LABEL_41:
        char v34 = v110;
      }

      else
      {
        uint64_t v85 = (void *)(v9 + 16 * v8);
        char v34 = v110;
        do
        {
          uint64_t v86 = (uint64_t *)(v9 + 16 * v8);
          uint64_t v87 = *v86;
          uint64_t v88 = v86[1];
          Swift::Int v89 = v10;
          unint64_t v90 = v85;
          do
          {
            uint64_t v91 = *(v90 - 2);
            uint64_t v92 = *(v90 - 1);
            BOOL v93 = v87 == v91 && v88 == v92;
            if (v93 || (_stringCompareWithSmolCheck(_:_:expecting:)(v87, v88, v91, v92, 1LL) & 1) == 0) {
              break;
            }
            if (!v9) {
              goto LABEL_151;
            }
            uint64_t v87 = *v90;
            uint64_t v88 = v90[1];
            *(_OWORD *)unint64_t v90 = *((_OWORD *)v90 - 1);
            *(v90 - 1) = v88;
            *(v90 - __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v87;
            v90 -= 2;
            ++v89;
          }

          while (v8 != v89);
          ++v8;
          v85 += 2;
        }

        while (v8 != v33);
        Swift::Int v8 = v33;
      }

      if (v8 < v10) {
        goto LABEL_143;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *((void *)v34 + 2) + 1LL,  1,  v34);
        char v34 = v94;
      }

      unint64_t v36 = *((void *)v34 + 2);
      unint64_t v35 = *((void *)v34 + 3);
      unint64_t v37 = v36 + 1;
      if (v36 >= v35 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v35 > 1,  v36 + 1,  1,  v34);
        char v34 = v95;
      }

      *((void *)v34 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v37;
      uint64_t v38 = v34 + 32;
      uint64_t v39 = (Swift::Int *)&v34[16 * v36 + 32];
      *uint64_t v39 = v10;
      v39[1] = v8;
      uint64_t v110 = v34;
      if (v36)
      {
        while (1)
        {
          unint64_t v40 = v37 - 1;
          if (v37 >= 4)
          {
            uint64_t v45 = &v38[2 * v37];
            uint64_t v46 = *(v45 - 8);
            uint64_t v47 = *(v45 - 7);
            BOOL v51 = __OFSUB__(v47, v46);
            uint64_t v48 = v47 - v46;
            if (v51) {
              goto LABEL_128;
            }
            uint64_t v50 = *(v45 - 6);
            uint64_t v49 = *(v45 - 5);
            BOOL v51 = __OFSUB__(v49, v50);
            uint64_t v43 = v49 - v50;
            char v44 = v51;
            if (v51) {
              goto LABEL_129;
            }
            unint64_t v52 = v37 - 2;
            unint64_t v53 = &v38[2 * v37 - 4];
            uint64_t v55 = *v53;
            uint64_t v54 = v53[1];
            BOOL v51 = __OFSUB__(v54, v55);
            uint64_t v56 = v54 - v55;
            if (v51) {
              goto LABEL_130;
            }
            BOOL v51 = __OFADD__(v43, v56);
            uint64_t v57 = v43 + v56;
            if (v51) {
              goto LABEL_132;
            }
            if (v57 >= v48)
            {
              uint64_t v75 = &v38[2 * v40];
              uint64_t v77 = *v75;
              uint64_t v76 = v75[1];
              BOOL v51 = __OFSUB__(v76, v77);
              uint64_t v78 = v76 - v77;
              if (v51) {
                goto LABEL_138;
              }
              BOOL v68 = v43 < v78;
              goto LABEL_79;
            }
          }

          else
          {
            if (v37 != 3)
            {
              uint64_t v69 = *((void *)v34 + 4);
              uint64_t v70 = *((void *)v34 + 5);
              BOOL v51 = __OFSUB__(v70, v69);
              uint64_t v62 = v70 - v69;
              char v63 = v51;
              goto LABEL_73;
            }

            uint64_t v42 = *((void *)v34 + 4);
            uint64_t v41 = *((void *)v34 + 5);
            BOOL v51 = __OFSUB__(v41, v42);
            uint64_t v43 = v41 - v42;
            char v44 = v51;
          }

          if ((v44 & 1) != 0) {
            goto LABEL_131;
          }
          unint64_t v52 = v37 - 2;
          uint64_t v58 = &v38[2 * v37 - 4];
          uint64_t v60 = *v58;
          uint64_t v59 = v58[1];
          BOOL v61 = __OFSUB__(v59, v60);
          uint64_t v62 = v59 - v60;
          char v63 = v61;
          if (v61) {
            goto LABEL_133;
          }
          uint64_t v64 = &v38[2 * v40];
          uint64_t v66 = *v64;
          uint64_t v65 = v64[1];
          BOOL v51 = __OFSUB__(v65, v66);
          uint64_t v67 = v65 - v66;
          if (v51) {
            goto LABEL_135;
          }
          if (__OFADD__(v62, v67)) {
            goto LABEL_137;
          }
          if (v62 + v67 >= v43)
          {
            BOOL v68 = v43 < v67;
LABEL_79:
            if (v68) {
              unint64_t v40 = v52;
            }
            goto LABEL_81;
          }

LABEL_73:
          if ((v63 & 1) != 0) {
            goto LABEL_134;
          }
          unint64_t v71 = &v38[2 * v40];
          uint64_t v73 = *v71;
          uint64_t v72 = v71[1];
          BOOL v51 = __OFSUB__(v72, v73);
          uint64_t v74 = v72 - v73;
          if (v51) {
            goto LABEL_136;
          }
          if (v74 < v62) {
            goto LABEL_90;
          }
LABEL_81:
          unint64_t v79 = v40 - 1;
          if (v40 - 1 >= v37)
          {
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
            goto LABEL_139;
          }

          if (!v9) {
            goto LABEL_152;
          }
          uint64_t v80 = &v38[2 * v79];
          uint64_t v81 = *v80;
          uint64_t v82 = &v38[2 * v40];
          uint64_t v83 = v82[1];
          specialized _merge<A>(low:mid:high:buffer:by:)( (char *)(v9 + 16 * *v80),  (char *)(v9 + 16LL * *v82),  v9 + 16 * v83,  v109);
          if (v1)
          {
            char v96 = v110;
LABEL_107:
            swift_bridgeObjectRelease(v96);
            if (v108 >= -1)
            {
              *(void *)(v107 + ++*(void *)(v0 + 16) = 0LL;
              swift_bridgeObjectRelease(v107);
              return;
            }

LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
            goto LABEL_148;
          }

          if (v83 < v81) {
            goto LABEL_125;
          }
          if (v40 > *((void *)v110 + 2)) {
            goto LABEL_126;
          }
          uint64_t *v80 = v81;
          v38[2 * v79 + 1] = v83;
          unint64_t v84 = *((void *)v110 + 2);
          if (v40 >= v84) {
            goto LABEL_127;
          }
          char v34 = v110;
          unint64_t v37 = v84 - 1;
          memmove(&v38[2 * v40], v82 + 2, 16 * (v84 - 1 - v40));
          *((void *)v110 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v84 - 1;
          if (v84 <= 2) {
            goto LABEL_90;
          }
        }
      }

      unint64_t v37 = 1LL;
LABEL_90:
      Swift::Int v3 = v108;
      if (v8 >= v108) {
        goto LABEL_111;
      }
    }

    Swift::Int v18 = v10 + 2;
    if (v10 + 2 >= v3) {
      goto LABEL_31;
    }
    int v17 = 0;
LABEL_13:
    uint64_t v19 = (uint64_t *)(v104 + 16 * v18);
    do
    {
      uint64_t v20 = *(v19 - 1);
      uint64_t v21 = *v19;
      uint64_t v22 = (void *)(v9 + 16 * v8);
      uint64_t v23 = v22[1];
      if (v20 == *v22 && v21 == v23)
      {
        if ((v17 & 1) != 0) {
          goto LABEL_24;
        }
      }

      else if (((v17 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, *v22, v23, 1LL)) & 1) != 0)
      {
        goto LABEL_23;
      }

      v19 += 2;
      Swift::Int v25 = v18 + 1;
      Swift::Int v8 = v18;
      Swift::Int v18 = v25;
    }

    while (v25 < v3);
    Swift::Int v18 = v25;
    goto LABEL_23;
  }

  uint64_t v110 = (char *)_swiftEmptyArrayStorage;
  unint64_t v37 = _swiftEmptyArrayStorage[2];
LABEL_111:
  if (v37 >= 2)
  {
    uint64_t v97 = *v105;
    while (1)
    {
      unint64_t v98 = v37 - 2;
      if (v37 < 2) {
        break;
      }
      if (!v97) {
        goto LABEL_154;
      }
      char v96 = v110;
      uint64_t v99 = *(void *)&v110[16 * v98 + 32];
      uint64_t v100 = *(void *)&v110[16 * v37 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)( (char *)(v97 + 16 * v99),  (char *)(v97 + 16LL * *(void *)&v110[16 * v37 + 16]),  v97 + 16 * v100,  v109);
      if (v1) {
        goto LABEL_107;
      }
      if (v100 < v99) {
        goto LABEL_140;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v110) & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v110);
        char v96 = v103;
      }

      if (v98 >= *((void *)v96 + 2)) {
        goto LABEL_141;
      }
      uint64_t v101 = &v96[16 * v98 + 32];
      *(void *)uint64_t v101 = v99;
      *((void *)v101 + 1) = v100;
      unint64_t v102 = *((void *)v96 + 2);
      if (v37 > v102) {
        goto LABEL_142;
      }
      memmove(&v96[16 * v37 + 16], &v96[16 * v37 + 32], 16 * (v102 - v37));
      uint64_t v110 = v96;
      *((void *)v96 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v102 - 1;
      unint64_t v37 = v102 - 1;
      Swift::Int v3 = v108;
      if (v102 <= 2) {
        goto LABEL_122;
      }
    }

LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }

LABEL_122:
  swift_bridgeObjectRelease(v110);
  if (v3 < -1) {
    goto LABEL_150;
  }
  *(void *)(v107 + ++*(void *)(v0 + 16) = 0LL;
  swift_bridgeObjectRelease(v107);
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
    while (2)
    {
      uint64_t v9 = (uint64_t *)(v7 + 16 * v4);
      uint64_t result = *v9;
      uint64_t v10 = v9[1];
      uint64_t v11 = v6;
      uint64_t v12 = (uint64_t *)v8;
      do
      {
        uint64_t v13 = *(v12 - 2);
        uint64_t v14 = *(v12 - 1);
        if (result == v13 && v10 == v14) {
          break;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v13, v14, 1LL);
        if ((result & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return result;
        }

        uint64_t result = *v12;
        uint64_t v10 = v12[1];
        *(_OWORD *)uint64_t v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - __swift_destroy_boxed_opaque_existential_1(v0 + 2) = result;
        v12 -= 2;
        ++v11;
      }

      while (v4 != v11);
      ++v4;
      v8 += 16LL;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }

  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 16;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 16;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    uint64_t v12 = &v4[16 * v11];
    if (v7 >= v6 || v10 < 16) {
      goto LABEL_47;
    }
    uint64_t v20 = (char *)(a3 - 16);
    while (1)
    {
      uint64_t v21 = v20 + 16;
      uint64_t v22 = *((void *)v12 - 2);
      uint64_t v23 = *((void *)v12 - 1);
      uint64_t v24 = v12 - 16;
      uint64_t v25 = *((void *)v6 - 2);
      uint64_t v26 = *((void *)v6 - 1);
      BOOL v27 = v22 == v25 && v23 == v26;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v25, v26, 1LL) & 1) == 0)
      {
        BOOL v29 = v21 != v12 || v20 >= v12;
        v12 -= 16;
        if (!v29) {
          goto LABEL_43;
        }
      }

      else
      {
        BOOL v28 = v21 != v6 || v20 >= v6;
        uint64_t v24 = v6 - 16;
        v6 -= 16;
        if (!v28) {
          goto LABEL_43;
        }
      }

      *(_OWORD *)uint64_t v20 = *(_OWORD *)v24;
LABEL_43:
      v20 -= 16;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_47;
      }
    }
  }

  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 16, a4);
  uint64_t v12 = &v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      uint64_t v14 = *((void *)v6 + 1);
      uint64_t v15 = *((void *)v4 + 1);
      BOOL v16 = *(void *)v6 == *(void *)v4 && v14 == v15;
      if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v6, v14, *(void *)v4, v15, 1LL) & 1) != 0) {
        break;
      }
      int v17 = v4;
      BOOL v16 = v7 == v4;
      v4 += 16;
      if (!v16) {
        goto LABEL_15;
      }
LABEL_16:
      v7 += 16;
    }

    int v17 = v6;
    BOOL v16 = v7 == v6;
    v6 += 16;
    if (v16) {
      goto LABEL_16;
    }
LABEL_15:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v17;
    goto LABEL_16;
  }

uint64_t outlined bridged method (ob) of @objc AFPreferences.languageCode()(void *a1)
{
  id v2 = [a1 languageCode];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t outlined bridged method (pb) of @objc LNExamplePhraseDescription.phraseTemplate.getter(void *a1)
{
  id v1 = [a1 phraseTemplate];
  if (!v1) {
    return 0LL;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t type metadata accessor for DefaultLinkClient()
{
  return objc_opt_self(&OBJC_CLASS____TtC25SiriLinkSuggestionsPlugin17DefaultLinkClient);
}

uint64_t specialized Array._copyContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    OUTLINED_FUNCTION_35();
    uint64_t v7 = OUTLINED_FUNCTION_96_1();
    uint64_t result = OUTLINED_FUNCTION_8();
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL));
    if (!v7) {
      return a3;
    }
  }

  if (v5)
  {
    if (v6)
    {
      if (a3 < 0) {
        uint64_t v8 = a3;
      }
      else {
        uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
      }
      OUTLINED_FUNCTION_35();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v8);
      uint64_t result = OUTLINED_FUNCTION_8();
      if (v9 <= a2)
      {
        if (v7 >= 1)
        {
          lazy protocol witness table accessor for type [LNAutoShortcut] and conformance [A]();
          OUTLINED_FUNCTION_35();
          for (unint64_t i = 0LL; i != v7; ++i)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LNAutoShortcut]);
            uint64_t v11 = specialized protocol witness for Collection.subscript.read in conformance [A](v14, i, a3);
            id v13 = *v12;
            ((void (*)(void *, void))v11)(v14, 0LL);
            *(void *)(v5 + 8 * i) = v13;
          }

          OUTLINED_FUNCTION_8();
          return a3;
        }

        goto LABEL_19;
      }
    }

    else
    {
      if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8LL)) <= a2)
      {
        specialized UnsafeMutablePointer.initialize(from:count:)( (a3 & 0xFFFFFFFFFFFFFF8LL) + 32,  *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8LL)));
        return a3;
      }

      __break(1u);
    }

    __break(1u);
LABEL_19:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)( uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    *uint64_t v11 = v20;
    if (v13 == v10)
    {
      swift_retain(v20);
      goto LABEL_38;
    }

    ++v11;
    uint64_t result = swift_retain(v20);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

uint64_t specialized Sequence._copySequenceContents(initializing:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_39:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_39;
  }

  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v24 = -1LL << *(_BYTE *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void *)(a4 + 48) + 24 * v16;
    uint64_t v22 = *(void *)v20;
    uint64_t v21 = *(void *)(v20 + 8);
    char v23 = *(_BYTE *)(v20 + 16);
    LOBYTE(v20) = *(_BYTE *)(v20 + 17);
    *(void *)uint64_t v11 = v22;
    *(void *)(v11 + 8) = v21;
    *(_BYTE *)(v11 + ++*(void *)(v0 + 16) = v23;
    *(_BYTE *)(v11 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 7) = v20;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 24LL;
    uint64_t result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2LL;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0LL;
        int64_t v12 = v17;
      }

      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }

        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }

          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0LL;
            goto LABEL_37;
          }

          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1LL)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0LL;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }

              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }

          goto LABEL_17;
        }

        unint64_t v9 = 0LL;
        int64_t v12 = v17 + 2;
      }

LABEL_37:
      uint64_t v10 = v13;
LABEL_38:
      uint64_t v7 = v24;
      goto LABEL_39;
    }

  __break(1u);
}

unint64_t lazy protocol witness table accessor for type [LNAutoShortcut] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [LNAutoShortcut] and conformance [A];
  if (!lazy protocol witness table cache variable for type [LNAutoShortcut] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [LNAutoShortcut]);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [LNAutoShortcut] and conformance [A]);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type LNSystemProtocol and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type LNSystemProtocol and conformance NSObject;
  if (!lazy protocol witness table cache variable for type LNSystemProtocol and conformance NSObject)
  {
    uint64_t v1 = type metadata accessor for LNActionParameterMetadata( 255LL,  (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol,  &OBJC_CLASS___LNSystemProtocol_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LNSystemProtocol and conformance NSObject);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type LNSuggestedActionDialogParameterKey and conformance LNSuggestedActionDialogParameterKey()
{
  unint64_t result = lazy protocol witness table cache variable for type LNSuggestedActionDialogParameterKey and conformance LNSuggestedActionDialogParameterKey;
  if (!lazy protocol witness table cache variable for type LNSuggestedActionDialogParameterKey and conformance LNSuggestedActionDialogParameterKey)
  {
    type metadata accessor for LNSuggestedActionDialogParameterKey(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LNSuggestedActionDialogParameterKey, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LNSuggestedActionDialogParameterKey and conformance LNSuggestedActionDialogParameterKey);
  }

  return result;
}

  ;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_10_3()
{
  return outlined consume of [String : String].Iterator._Variant(v0);
}

  ;
}

void OUTLINED_FUNCTION_12_4( void *a1, os_log_s *a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5, const char *a6)
{
}

void OUTLINED_FUNCTION_13_3( void *a1, os_log_s *a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5, const char *a6, uint8_t *a7)
{
}

uint64_t OUTLINED_FUNCTION_17_3()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 120, v0, v1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_19_0()
{
  return OSSignpostIntervalState.init(id:isOpen:)(v0, 1LL);
}

uint64_t OUTLINED_FUNCTION_20_2()
{
  return swift_retain(v0);
}

uint64_t OUTLINED_FUNCTION_21_2()
{
  return swift_release(v0);
}

uint64_t OUTLINED_FUNCTION_23_2()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_24_3(uint64_t a1)
{
  *(void *)(v2 - 120) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 120, v2 - 112, v1);
}

uint64_t OUTLINED_FUNCTION_25_3()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_30_3(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t OUTLINED_FUNCTION_32_3(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_33_2()
{
  return swift_errorRelease(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_38_3()
{
  return OSSignpostIntervalState.signpostID.getter();
}

  ;
}

uint64_t OUTLINED_FUNCTION_41_2()
{
  return OSSignposter.logHandle.getter();
}

uint64_t OUTLINED_FUNCTION_43_3( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 208) = (char *)&a9 - v9;
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_44_3()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_45_2()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 120, v0, v1);
}

uint64_t OUTLINED_FUNCTION_46_2()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 120, v0, v1);
}

_WORD *OUTLINED_FUNCTION_48_1(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_49_2()
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(void *)(v1 - 144), v0, (uint64_t *)(v1 - 104));
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_55_1(uint64_t a1, unint64_t *a2, void *a3)
{
  return type metadata accessor for LNActionParameterMetadata(0LL, a2, a3);
}

BOOL OUTLINED_FUNCTION_57_2(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_58_2(uint64_t a1@<X8>)
{
  *(void *)(v2 + ++*(void *)(v0 + 16) = v1;
  *(void *)(v2 + 24) = a1;
}

uint64_t OUTLINED_FUNCTION_59_2()
{
  return OS_os_log.signpostsEnabled.getter();
}

uint64_t OUTLINED_FUNCTION_60_2()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_64_2()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t OUTLINED_FUNCTION_65_1@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v3, v2, v1);
}

uint64_t OUTLINED_FUNCTION_66_1(_WORD *a1, uint64_t a2)
{
  *a1 = 0;
  return OSSignpostID.rawValue.getter(a1, a2);
}

uint64_t OUTLINED_FUNCTION_68_0()
{
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t OUTLINED_FUNCTION_71_1@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_73_1()
{
  return v0(v1, v2);
}

void OUTLINED_FUNCTION_74(uint64_t a1, uint64_t a2)
{
}

uint64_t OUTLINED_FUNCTION_75_1(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t OUTLINED_FUNCTION_76_1(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 136))(a1, v1);
}

uint64_t OUTLINED_FUNCTION_78_1()
{
  return swift_release(v0);
}

uint64_t OUTLINED_FUNCTION_81_1()
{
  return swift_errorRetain(v0);
}

uint64_t OUTLINED_FUNCTION_84_0()
{
  return OSSignposter.logHandle.getter();
}

  ;
}

uint64_t OUTLINED_FUNCTION_86_1()
{
  return _convertNSErrorToError(_:)(v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_88_1()
{
  return swift_errorRetain(v0);
}

uint64_t OUTLINED_FUNCTION_89_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_90_1(_WORD *a1, uint64_t a2)
{
  *a1 = 0;
  return OSSignpostID.rawValue.getter(a1, a2);
}

uint64_t OUTLINED_FUNCTION_91_1()
{
  return type metadata accessor for OSSignpostError(0LL);
}

uint64_t OUTLINED_FUNCTION_92_1()
{
  return type metadata accessor for OSSignpostIntervalState(0LL);
}

uint64_t OUTLINED_FUNCTION_93_1@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t OUTLINED_FUNCTION_94_1(uint64_t a1)
{
  *(void *)(v1 - 168) = a1;
  return v1 - 168;
}

uint64_t OUTLINED_FUNCTION_96_1()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_So35LNSuggestedActionDialogParameterKeya_SSts5NeverOTg509_sS2SSo35defg37KeyaSSIgggoo_SS3key_SS5valuetAB_SSts5i164OIegnrzr_TR042_s25SiriLinkSuggestionsPlugin0B15Suggestedb37V7request6action14systemProtocol19rawc129ParametersAcA0bE14ActionsRequestV_So8LNActionCSo08LNSystemJ0CSDyk66SGtc33_A45247CBCD3FCD1A5B59037132DD4F4ELlfcSo011LNSuggestedfL12D19M25_SStSS_SStXEfU_Tf3nnnpf_nTf1cn_n( uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v3 = specialized Dictionary.startIndex.getter(a1);
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      unint64_t v5 = v3;
      if (v3 < 1LL << *(_BYTE *)(a1 + 32))
      {
        uint64_t v6 = a1 + 64;
        uint64_t v15 = a1 + 64;
        while ((*(void *)(v6 + 8 * (v5 >> 6)) & (1LL << v5)) != 0)
        {
          if (v4 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_18;
          }
          uint64_t v16 = v1;
          int v17 = v4;
          uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 16 * v5 + 8);
          uint64_t v8 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v5);
          uint64_t v9 = v8[1];
          uint64_t v18 = *v8;
          swift_bridgeObjectRetain(v7);
          swift_bridgeObjectRetain(v9);
          NSString v10 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v7);
          unint64_t v11 = _swiftEmptyArrayStorage[2];
          if (v11 >= _swiftEmptyArrayStorage[3] >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          _swiftEmptyArrayStorage[2] = v11 + 1;
          int64_t v12 = &_swiftEmptyArrayStorage[3 * v11];
          v12[4] = v10;
          v12[5] = v18;
          v12[6] = v9;
          uint64_t v13 = -1LL << *(_BYTE *)(a1 + 32);
          uint64_t v6 = a1 + 64;
          if ((*(void *)(v15 + 8 * (v5 >> 6)) & (1LL << v5)) == 0) {
            goto LABEL_20;
          }
          if (v17 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_21;
          }
          uint64_t v14 = _HashTable.occupiedBucket(after:)(v5, v15, ~v13);
          uint64_t v1 = v16 - 1;
          if (v16 == 1) {
            return;
          }
          unint64_t v5 = v14;
          if ((v14 & 0x8000000000000000LL) == 0)
          {
            int v4 = *(_DWORD *)(a1 + 36);
            if (v14 < 1LL << *(_BYTE *)(a1 + 32)) {
              continue;
            }
          }

          goto LABEL_22;
        }

        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }

void LinkSuggestedAction.init(request:suggestedAction:)( id a1@<X3>, uint64_t a2@<X0>, uint64_t a3@<X1>, __int16 a4@<W2>, uint64_t a5@<X8>)
{
  id v10 = [a1 action];
  id v11 = [a1 systemProtocol];
  uint64_t v12 = outlined bridged method (pb) of @objc LNSuggestedAction.dialogParameters.getter(a1);
  if (!v12)
  {
    type metadata accessor for LNSuggestedActionDialogParameterKey(0LL);
    uint64_t v14 = v13;
    unint64_t v15 = lazy protocol witness table accessor for type LNSuggestedActionDialogParameterKey and conformance LNSuggestedActionDialogParameterKey();
    uint64_t v12 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v14, &type metadata for String, v15);
  }

  uint64_t v16 = v12;

  *(void *)a5 = a2;
  *(void *)(a5 + 8) = a3;
  *(_BYTE *)(a5 + ++*(void *)(v0 + 16) = a4 & 1;
  *(_BYTE *)(a5 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 7) = HIBYTE(a4) & 1;
  *(void *)(a5 + 24) = v10;
  *(void *)(a5 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v11;
  *(void *)(a5 + 40) = v16;
}

uint64_t LinkSuggestedAction.request.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

id LinkSuggestedAction.action.getter()
{
  return *(id *)(v0 + 24);
}

id LinkSuggestedAction.systemProtocol.getter()
{
  return *(id *)(v0 + 32);
}

uint64_t LinkSuggestedAction.dialogParameters.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 40));
}

void *LinkSuggestedAction.rawDialogParmaters.getter()
{
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_8();
  return specialized Dictionary.init<A>(uniqueKeysWithValues:)(v3);
}

uint64_t LinkSuggestedAction.iconSystemImageName.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if (!*(void *)(v1 + 16)) {
    return 0LL;
  }
  id v2 = LNSuggestedActionDialogParameterKeyIconSystemImageName;
  unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v2);
  if ((v4 & 1) != 0)
  {
    unint64_t v5 = (uint64_t *)(*(void *)(v1 + 56) + 16 * v3);
    uint64_t v6 = *v5;
    swift_bridgeObjectRetain(v5[1]);
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  return v6;
}

BOOL static LinkSuggestedAction.CodingKeys.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void LinkSuggestedAction.CodingKeys.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

SiriLinkSuggestionsPlugin::LinkSuggestedAction::CodingKeys_optional __swiftcall LinkSuggestedAction.CodingKeys.init(stringValue:)( Swift::String stringValue)
{
  object = stringValue._object;
  BOOL v2 = stringValue._countAndFlagsBits == 0x74736575716572LL && stringValue._object == (void *)0xE700000000000000LL;
  if (v2
    || (uint64_t countAndFlagsBits = stringValue._countAndFlagsBits,
        (OUTLINED_FUNCTION_1_6(0x74736575716572LL, 0xE700000000000000LL) & 1) != 0))
  {
    OUTLINED_FUNCTION_8();
    return 0;
  }

  else
  {
    BOOL v5 = countAndFlagsBits == 0x6E6F69746361LL && object == (void *)0xE600000000000000LL;
    if (v5 || (OUTLINED_FUNCTION_1_6(0x6E6F69746361LL, 0xE600000000000000LL) & 1) != 0)
    {
      OUTLINED_FUNCTION_8();
      return (SiriLinkSuggestionsPlugin::LinkSuggestedAction::CodingKeys_optional)1;
    }

    else
    {
      BOOL v6 = countAndFlagsBits == 0x72506D6574737973LL && object == (void *)0xEE006C6F636F746FLL;
      if (v6 || (OUTLINED_FUNCTION_1_6(0x72506D6574737973LL, 0xEE006C6F636F746FLL) & 1) != 0)
      {
        OUTLINED_FUNCTION_8();
        return (SiriLinkSuggestionsPlugin::LinkSuggestedAction::CodingKeys_optional)2;
      }

      else if (countAndFlagsBits == 0xD000000000000010LL && object == (void *)0x800000000003F1D0LL)
      {
        swift_bridgeObjectRelease(0x800000000003F1D0LL);
        return (SiriLinkSuggestionsPlugin::LinkSuggestedAction::CodingKeys_optional)3;
      }

      else
      {
        char v7 = OUTLINED_FUNCTION_1_6(0xD000000000000010LL, 0x800000000003F1D0LL);
        OUTLINED_FUNCTION_8();
        if ((v7 & 1) != 0) {
          return (SiriLinkSuggestionsPlugin::LinkSuggestedAction::CodingKeys_optional)3;
        }
        else {
          return (SiriLinkSuggestionsPlugin::LinkSuggestedAction::CodingKeys_optional)4;
        }
      }
    }
  }

SiriLinkSuggestionsPlugin::LinkSuggestedAction::CodingKeys_optional __swiftcall LinkSuggestedAction.CodingKeys.init(intValue:)( Swift::Int intValue)
{
  return (SiriLinkSuggestionsPlugin::LinkSuggestedAction::CodingKeys_optional)4;
}

Swift::Int LinkSuggestedAction.CodingKeys.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t LinkSuggestedAction.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_22C1C + 4 * byte_3D1B0[a1]))( 0xD000000000000010LL,  0x800000000003F1D0LL);
}

uint64_t sub_22C1C()
{
  return 0x74736575716572LL;
}

uint64_t sub_22C34()
{
  return 0x72506D6574737973LL;
}

uint64_t sub_22C58()
{
  return 0x6E6F69746361LL;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LinkSuggestedAction.CodingKeys( char *a1, char *a2)
{
  return static LinkSuggestedAction.CodingKeys.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LinkSuggestedAction.CodingKeys()
{
  return LinkSuggestedAction.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance LinkSuggestedAction.CodingKeys(uint64_t a1)
{
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance LinkSuggestedAction.CodingKeys()
{
  return LinkSuggestedAction.CodingKeys.stringValue.getter(*v0);
}

SiriLinkSuggestionsPlugin::LinkSuggestedAction::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance LinkSuggestedAction.CodingKeys@<W0>( uint64_t a1@<X0>, SiriLinkSuggestionsPlugin::LinkSuggestedAction::CodingKeys_optional *a2@<X8>)
{
  result.value = LinkSuggestedAction.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance LinkSuggestedAction.CodingKeys( _BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LinkSuggestedAction.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LinkSuggestedAction.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void LinkSuggestedAction.init(from:)(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LinkSuggestedAction.CodingKeys>);
  __chkstk_darwin(v5);
  char v7 = (uint64_t *)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  Swift::Int v33 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v8);
  unint64_t v10 = lazy protocol witness table accessor for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for LinkSuggestedAction.CodingKeys,  &type metadata for LinkSuggestedAction.CodingKeys,  v10,  v8,  v9);
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1(v33);
  }

  else
  {
    uint64_t v31 = a2;
    unint64_t v32 = v10;
    char v38 = 0;
    unint64_t v11 = lazy protocol witness table accessor for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest();
    KeyedDecodingContainer.decode<A>(_:forKey:)( v34,  &type metadata for LinkSuggestedActionsRequest,  &v38,  v5,  &type metadata for LinkSuggestedActionsRequest,  v11);
    uint64_t v12 = v34[0];
    uint64_t v13 = v34[1];
    int v14 = v35;
    int v15 = v36;
    uint64_t v16 = specialized static LinkSuggestedAction.decode<A, B>(type:from:key:)( v7,  1,  (unint64_t *)&lazy cache variable for type metadata for LNAction,  &OBJC_CLASS___LNAction_ptr);
    int v29 = v15;
    uint64_t v30 = v13;
    int v37 = v14;
    int v17 = specialized static LinkSuggestedAction.decode<A, B>(type:from:key:)( v7,  2,  (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol,  &OBJC_CLASS___LNSystemProtocol_ptr);
    uint64_t v28 = v12;
    LOBYTE(v34[0]) = 3;
    uint64_t v18 = static CodableWrapper.decodeDictionary<A, B>(forType:forKey:container:)( &type metadata for String,  v34,  v7,  &type metadata for String,  &type metadata for LinkSuggestedAction.CodingKeys,  v32);
    uint64_t v19 = v30;
    uint64_t v20 = v18;
    uint64_t v21 = v16;
    uint64_t v22 = v17;
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDyS2SG_So35LNSuggestedActionDialogParameterKeya_SSts5NeverOTg509_sS2SSo35defg37KeyaSSIgggoo_SS3key_SS5valuetAB_SSts5i164OIegnrzr_TR042_s25SiriLinkSuggestionsPlugin0B15Suggestedb37V7request6action14systemProtocol19rawc129ParametersAcA0bE14ActionsRequestV_So8LNActionCSo08LNSystemJ0CSDyk66SGtc33_A45247CBCD3FCD1A5B59037132DD4F4ELlfcSo011LNSuggestedfL12D19M25_SStSS_SStXEfU_Tf3nnnpf_nTf1cn_n(v20);
    uint64_t v24 = v23;
    swift_bridgeObjectRelease(v20);
    uint64_t v25 = specialized Dictionary.init<A>(uniqueKeysWithValues:)(v24);

    uint64_t v26 = v22;
    OUTLINED_FUNCTION_0_5();
    __swift_destroy_boxed_opaque_existential_1(v33);
    BOOL v27 = v31;
    void *v31 = v28;
    v27[1] = v19;
    *((_BYTE *)v27 + ++*(void *)(v0 + 16) = v37;
    *((_BYTE *)v27 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 7) = v29;
    v27[3] = v21;
    v27[4] = v26;
    v27[5] = v25;
  }

  OUTLINED_FUNCTION_0_3();
}

uint64_t *specialized static LinkSuggestedAction.decode<A, B>(type:from:key:)( uint64_t *a1, char a2, unint64_t *a3, void *a4)
{
  uint64_t v7 = type metadata accessor for LNActionParameterMetadata(0LL, a3, a4);
  char v20 = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LinkSuggestedAction.CodingKeys>);
  unint64_t v9 = lazy protocol witness table accessor for type Data and conformance Data();
  uint64_t v10 = v8;
  unint64_t v11 = a1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v19, &type metadata for Data, &v20, v10, &type metadata for Data, v9);
  if (!v4)
  {
    uint64_t v13 = v19[0];
    uint64_t v12 = v19[1];
    type metadata accessor for LNActionParameterMetadata( 0LL,  &lazy cache variable for type metadata for NSKeyedUnarchiver,  &OBJC_CLASS___NSKeyedUnarchiver_ptr);
    uint64_t v14 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v7, v13, v12, v7);
    unint64_t v11 = (uint64_t *)v14;
    if (!v14)
    {
      unint64_t v16 = lazy protocol witness table accessor for type LinkSuggestedAction.CodingError and conformance LinkSuggestedAction.CodingError();
      swift_allocError(&type metadata for LinkSuggestedAction.CodingError, v16, 0LL, 0LL);
      unint64_t v11 = v17;
      *int v17 = v7;
      v17[4] = (uint64_t)&type metadata for LinkSuggestedAction.CodingKeys;
      unint64_t v18 = lazy protocol witness table accessor for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys();
      v11[5] = v18;
      *((_BYTE *)v11 + 8) = v20;
      swift_willThrow(v18);
    }

    OUTLINED_FUNCTION_6_3();
  }

  return v11;
}

void LinkSuggestedAction.encode(to:)(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LinkSuggestedAction.CodingKeys>);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  unint64_t v10 = lazy protocol witness table accessor for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for LinkSuggestedAction.CodingKeys,  &type metadata for LinkSuggestedAction.CodingKeys,  v10,  v8,  v9);
  __int128 v22 = *v3;
  __int16 v23 = *((_WORD *)v3 + 8);
  char v24 = 0;
  unint64_t v11 = lazy protocol witness table accessor for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v24, v5, &type metadata for LinkSuggestedActionsRequest, v11);
  if (v2)
  {
    OUTLINED_FUNCTION_4_4();
  }

  else
  {
    id v12 = *((id *)v3 + 3);
    specialized static LinkSuggestedAction.encode<A, B>(_:into:key:)((uint64_t)v12, (uint64_t)v7, 1);

    id v13 = *((id *)v3 + 4);
    specialized static LinkSuggestedAction.encode<A, B>(_:into:key:)((uint64_t)v13, (uint64_t)v7, 2);

    LOBYTE(v2__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 3;
    uint64_t v14 = *((void *)v3 + 5);
    swift_bridgeObjectRetain(v14);
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySo35LNSuggestedActionDialogParameterKeyaSSG_SS_SSts5NeverOTg506_sSo35defg38KeyaS3SIgggoo_AB3key_SS5valuetSS_SSts5i85OIegnrzr_TR042_s25SiriLinkSuggestionsPlugin0B15Suggestedb6V18rawc44ParmatersSDyS2SGvgq26_SStSo011LNSuggestedfH12d5L18_V5XEfU_Tf3nnnpf_nTf1cn_n(v15);
    uint64_t v17 = v16;
    swift_bridgeObjectRelease(v14);
    unint64_t v18 = specialized Dictionary.init<A>(uniqueKeysWithValues:)(v17);
    specialized _dictionaryUpCast<A, B, C, D>(_:)((uint64_t)v18);
    uint64_t v20 = v19;
    swift_bridgeObjectRelease(v18);
    static CodableWrapper.encodeDictionary<A>(to:forKey:instance:)( v7,  &v22,  v20,  &type metadata for LinkSuggestedAction.CodingKeys,  v10);
    OUTLINED_FUNCTION_4_4();
    swift_bridgeObjectRelease(v20);
  }

  OUTLINED_FUNCTION_0_3();
}

uint64_t specialized static LinkSuggestedAction.encode<A, B>(_:into:key:)(uint64_t a1, uint64_t a2, char a3)
{
  char v13 = a3;
  v14[0] = 0LL;
  id v3 =  [(id)objc_opt_self(NSKeyedArchiver) archivedDataWithRootObject:a1 requiringSecureCoding:1 error:v14];
  id v4 = v14[0];
  if (v3)
  {
    uint64_t v5 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    uint64_t v7 = v6;

    v14[0] = v5;
    v14[1] = v7;
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LinkSuggestedAction.CodingKeys>);
    unint64_t v9 = lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v13, v8, &type metadata for Data, v9);
    return outlined consume of Data._Representation((uint64_t)v5, (unint64_t)v7);
  }

  else
  {
    unint64_t v11 = v4;
    _convertNSErrorToError(_:)(v4);

    return swift_willThrow(v12);
  }

double protocol witness for Decodable.init(from:) in conformance LinkSuggestedAction@<D0>( void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }

  return result;
}

void protocol witness for Encodable.encode(to:) in conformance LinkSuggestedAction(void *a1)
{
}

uint64_t outlined bridged method (pb) of @objc LNSuggestedAction.dialogParameters.getter(void *a1)
{
  id v1 = [a1 dialogParameters];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  type metadata accessor for LNSuggestedActionDialogParameterKey(0LL);
  uint64_t v4 = v3;
  unint64_t v5 = lazy protocol witness table accessor for type LNSuggestedActionDialogParameterKey and conformance LNSuggestedActionDialogParameterKey();
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, v4, &type metadata for String, v5);

  return v6;
}

unint64_t lazy protocol witness table accessor for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LinkSuggestedAction.CodingKeys,  &type metadata for LinkSuggestedAction.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LinkSuggestedAction.CodingKeys,  &type metadata for LinkSuggestedAction.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LinkSuggestedAction.CodingKeys,  &type metadata for LinkSuggestedAction.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LinkSuggestedAction.CodingKeys,  &type metadata for LinkSuggestedAction.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedAction.CodingKeys and conformance LinkSuggestedAction.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest;
  if (!lazy protocol witness table cache variable for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LinkSuggestedActionsRequest,  &type metadata for LinkSuggestedActionsRequest);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest;
  if (!lazy protocol witness table cache variable for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LinkSuggestedActionsRequest,  &type metadata for LinkSuggestedActionsRequest);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest;
  if (!lazy protocol witness table cache variable for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LinkSuggestedActionsRequest,  &type metadata for LinkSuggestedActionsRequest);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedActionsRequest and conformance LinkSuggestedActionsRequest);
  }

  return result;
}

uint64_t destroy for LinkSuggestedAction(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 40));
}

uint64_t initializeWithCopy for LinkSuggestedAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + ++*(void *)(v0 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v4 = *(void **)(a2 + 24);
  unint64_t v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v3);
  id v7 = v4;
  id v8 = v5;
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for LinkSuggestedAction(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + ++*(void *)(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 7) = *(_BYTE *)(a2 + 17);
  uint64_t v6 = *(void **)(a2 + 24);
  id v7 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  id v8 = v6;

  unint64_t v9 = *(void **)(a2 + 32);
  unint64_t v10 = *(void **)(a1 + 32);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v9;
  id v11 = v9;

  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + ++*(void *)(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for LinkSuggestedAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + ++*(void *)(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 7) = *(_BYTE *)(a2 + 17);

  uint64_t v6 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkSuggestedAction(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkSuggestedAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for LinkSuggestedAction()
{
}

uint64_t initializeBufferWithCopyOfBuffer for LinkSuggestedAction.CodingError(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for LinkSuggestedAction.CodingError(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 8));
}

uint64_t initializeWithCopy for LinkSuggestedAction.CodingError(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 8, a2 + 8);
  return a1;
}

void *assignWithCopy for LinkSuggestedAction.CodingError(void *a1, void *a2)
{
  *a1 = *a2;
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  return a1;
}

void *__swift_assign_boxed_opaque_existential_1(void *result, void *a2)
{
  if (result != a2)
  {
    __int128 v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        __n128 result = (void *)swift_release(v11);
        *__int128 v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          *__int128 v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          *__int128 v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

uint64_t assignWithTake for LinkSuggestedAction.CodingError(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __swift_destroy_boxed_opaque_existential_1((void *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkSuggestedAction.CodingError(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 48))
    {
      LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkSuggestedAction.CodingError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for LinkSuggestedAction.CodingError()
{
}

uint64_t getEnumTagSinglePayload for LinkSuggestedAction.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for LinkSuggestedAction.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_23C0C + 4 * byte_3D1B9[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23C40 + 4 * byte_3D1B4[v4]))();
}

uint64_t sub_23C40(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x23C50LL);
  }
  return result;
}

uint64_t sub_23C5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x23C64LL);
  }
  *(_BYTE *)__n128 result = a2 + 3;
  return result;
}

uint64_t sub_23C68(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C70(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for LinkSuggestedAction.CodingKeys()
{
}

unint64_t lazy protocol witness table accessor for type LinkSuggestedAction.CodingError and conformance LinkSuggestedAction.CodingError()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedAction.CodingError and conformance LinkSuggestedAction.CodingError;
  if (!lazy protocol witness table cache variable for type LinkSuggestedAction.CodingError and conformance LinkSuggestedAction.CodingError)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LinkSuggestedAction.CodingError,  &type metadata for LinkSuggestedAction.CodingError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedAction.CodingError and conformance LinkSuggestedAction.CodingError);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_0_5()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_1_6(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t OUTLINED_FUNCTION_4_4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

  ;
}

uint64_t OUTLINED_FUNCTION_6_3()
{
  return outlined consume of Data._Representation(v1, v0);
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Collection.first.getter( a1,  (uint64_t (*)(void))&type metadata accessor for RetrievedContext,  a2);
}

uint64_t specialized Collection.first.getter@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = a2(0LL);
  uint64_t v7 = v6;
  if (v5)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))( a3,  a1 + ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL)),  v6);
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  return __swift_storeEnumTagSinglePayload(a3, v8, 1LL, v7);
}

void *specialized Collection.first.getter(uint64_t a1)
{
  unint64_t result = (void *)specialized Dictionary.startIndex.getter(a1);
  if ((v4 & 1) != 0) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }

  if (result == (void *)(1LL << *(_BYTE *)(a1 + 32))) {
    return 0LL;
  }
  else {
    return specialized Dictionary.subscript.getter(&v5, (uint64_t)result, v3, 0LL, a1);
  }
}

void *AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIntentResolverIdentifier.unsafeMutableAddressor()
{
  return &static AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIntentResolverIdentifier;
}

void *AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIntentSuggestionId.unsafeMutableAddressor()
{
  return &static AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIntentSuggestionId;
}

void one-time initialization function for appIdParameterName()
{
  static AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIdParameterName = 0x6E65746E49707061LL;
  unk_53AE0 = 0xEF64497070615F74LL;
}

uint64_t *AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIdParameterName.unsafeMutableAddressor()
{
  if (one-time initialization token for appIdParameterName != -1) {
    swift_once( &one-time initialization token for appIdParameterName,  one-time initialization function for appIdParameterName);
  }
  return &static AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIdParameterName;
}

uint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIdParameterName.getter()
{
  if (one-time initialization token for appIdParameterName != -1) {
    swift_once( &one-time initialization token for appIdParameterName,  one-time initialization function for appIdParameterName);
  }
  uint64_t v0 = static AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIdParameterName;
  swift_bridgeObjectRetain(unk_53AE0);
  return v0;
}

void *AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIdResolverIdentifier.unsafeMutableAddressor()
{
  return &static AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIdResolverIdentifier;
}

unint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIdResolverIdentifier.getter()
{
  return OUTLINED_FUNCTION_6(22LL);
}

void *AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIntentParameterName.unsafeMutableAddressor()
{
  return &static AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIntentParameterName;
}

unint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.Constants.appIntentParameterName.getter()
{
  return OUTLINED_FUNCTION_6(16LL);
}

void *AppIntentsSuggestionsOwnerDefinitionFactory.Constants.contextCandidateAppDetailsKey.unsafeMutableAddressor()
{
  return &static AppIntentsSuggestionsOwnerDefinitionFactory.Constants.contextCandidateAppDetailsKey;
}

unint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.Constants.contextCandidateAppDetailsKey.getter()
{
  return OUTLINED_FUNCTION_6(16LL);
}

uint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:)( void *a1, void *a2, uint64_t a3)
{
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = __swift_project_boxed_opaque_existential_1(a1, v7);
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[4];
  uint64_t v12 = __swift_project_boxed_opaque_existential_1(a2, v10);
  uint64_t v13 = (void *)OUTLINED_FUNCTION_50_1((uint64_t)&async function pointer to specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:));
  *(void *)(v4 + ++*(void *)(v0 + 16) = v13;
  void *v13 = v4;
  v13[1] = static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:);
  return v15(v9, v12, a3, v3, v7, v10, v8, v11);
}

uint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.getDialogProvider(linkClient:)(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_36_2();
  uint64_t v2 = OUTLINED_FUNCTION_1(v1, 56LL);
  outlined init with take of LinkDialogIdProvider(v4, v2 + 16);
  return v2;
}

void static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)( void *a1, void *a2)
{
  uint64_t v4 = (void *)swift_task_alloc(unk_4ED6C);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for InternalResolver.resolveParameter(parameter:suggestion:interaction:environment:) in conformance MetaDataSourcedAppIntentResolver;
  __asm { BR              X8 }

uint64_t closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  __int128 v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch( closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:),  0LL,  0LL);
}

uint64_t closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)()
{
  return OUTLINED_FUNCTION_0_4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.handleDialog(dialogProperties:dialogProvider:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v85 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  uint64_t v84 = *(void *)(v85 - 8);
  OUTLINED_FUNCTION_18_4();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_78_0();
  uint64_t v86 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  OUTLINED_FUNCTION_18_4();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_78_0();
  uint64_t v79 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingText?);
  OUTLINED_FUNCTION_18_4();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v81 = type metadata accessor for TemplatingText(0LL);
  uint64_t v77 = *(void *)(v81 - 8);
  OUTLINED_FUNCTION_18_4();
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_78_0();
  uint64_t v80 = v14;
  uint64_t v15 = type metadata accessor for Locale(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  unint64_t v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = a1[3];
  uint64_t v20 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v19);
  DialogProperties.appIntentAction.getter(v19, v20, (uint64_t)v91);
  uint64_t v21 = v91[1];
  uint64_t v22 = v91[2];
  uint64_t v82 = v91[4];
  id v83 = (id)v91[5];
  uint64_t v23 = v91[7];
  uint64_t result = outlined init with take of SuggestionAppIntent?((uint64_t)v91, (uint64_t)v92);
  if (!v93)
  {
    a3[3] = &type metadata for String;
    *a3 = 0LL;
    a3[1] = 0xE000000000000000LL;
    return result;
  }

  uint64_t v75 = v23;
  uint64_t v78 = a3;
  uint64_t v76 = v94;
  type metadata accessor for ViewContext(0LL);
  uint64_t v90 = ViewContext.__allocating_init()();
  (*(void (**)(void *__return_ptr, uint64_t *))(*(void *)a2 + 104LL))(v87, &v90);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DialogCallback);
  uint64_t v26 = OUTLINED_FUNCTION_32_4((uint64_t)v88, (uint64_t)v87, v25, (uint64_t)&type metadata for AppIntentDialogCallback);
  p_name = (char **)(&stru_4CFF8 + 8);
  if (!(_DWORD)v26)
  {
    uint64_t v89 = 0LL;
    memset(v88, 0, sizeof(v88));
    outlined destroy of CoreSignalTypes?( (uint64_t)v88,  &demangling cache variable for type metadata for AppIntentDialogCallback?);
LABEL_10:
    if (p_name[478] != (char *)-1LL) {
      swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
    }
    uint64_t v36 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v36, (uint64_t)static Logger.appIntentsSuggestions);
    OUTLINED_FUNCTION_58_0(v21);
    OUTLINED_FUNCTION_58_0(v22);
    OUTLINED_FUNCTION_58_0(v82);
    id v37 = v83;
    OUTLINED_FUNCTION_58_0(v75);
    char v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      unint64_t v40 = (uint8_t *)OUTLINED_FUNCTION_16_0(12LL);
      uint64_t v41 = OUTLINED_FUNCTION_16_0(32LL);
      *(void *)&v88[0] = v41;
      *(_DWORD *)unint64_t v40 = 136315138;
      id v42 = OUTLINED_FUNCTION_29_2(v41, "identifier");
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      unint64_t v45 = v44;

      uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, (uint64_t *)v88);
      uint64_t v47 = OUTLINED_FUNCTION_5_4(v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v47, v48, v40 + 4);
      swift_bridgeObjectRelease(v45);
      OUTLINED_FUNCTION_38_4();
      OUTLINED_FUNCTION_38_4();
      _os_log_impl(&dword_0, v38, v39, "Unable to get text from app intent for: %s", v40, 0xCu);
      swift_arrayDestroy(v41, 1LL, (char *)&type metadata for Any + 8);
      OUTLINED_FUNCTION_3_0(v41);
      OUTLINED_FUNCTION_3_0((uint64_t)v40);
    }

    else
    {
      OUTLINED_FUNCTION_0_6();
      OUTLINED_FUNCTION_0_6();
    }

    char v34 = _swiftEmptyArrayStorage;
    goto LABEL_16;
  }

  static Locale.current.getter(v26);
  uint64_t v28 = AppIntentDialogCallback.getText(dialogProperties:siriLocale:)(a1);
  unint64_t v30 = v29;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  outlined destroy of AppIntentDialogCallback((uint64_t)v88);
  uint64_t v31 = HIBYTE(v30) & 0xF;
  if ((v30 & 0x2000000000000000LL) == 0) {
    uint64_t v31 = v28 & 0xFFFFFFFFFFFFLL;
  }
  if (!v31)
  {
    swift_bridgeObjectRelease(v30);
    p_name = &stru_4CFF8.name;
    goto LABEL_10;
  }

  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TemplatingSection>);
  uint64_t v33 = *(void *)(type metadata accessor for TemplatingSection(0LL) - 8);
  char v34 = (void *)swift_allocObject( v32,  ((*(unsigned __int8 *)(v33 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))
                  + *(void *)(v33 + 72),
                    *(unsigned __int8 *)(v33 + 80) | 7LL);
  *((_OWORD *)v34 + 1) = xmmword_3C030;
  uint64_t v35 = v80;
  TemplatingText.init(text:speakableTextOverride:)(v28, v30, 0LL, 0LL);
  __swift_storeEnumTagSinglePayload((uint64_t)v12, 1LL, 1LL, v81);
  TemplatingSection.init(id:content:caption:spokenOnly:)(0xD000000000000010LL, 0x800000000003F250LL, v35, v12, 0LL);
LABEL_16:
  uint64_t v49 = v78;
  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
  }
  uint64_t v50 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v50, (uint64_t)static Logger.appIntentsSuggestions);
  OUTLINED_FUNCTION_0_6();
  swift_bridgeObjectRetain(v34);
  OUTLINED_FUNCTION_0_6();
  swift_bridgeObjectRetain(v34);
  unint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
  os_log_type_t v53 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = OUTLINED_FUNCTION_16_0(22LL);
    uint64_t v55 = OUTLINED_FUNCTION_16_0(64LL);
    *(void *)&v88[0] = v55;
    *(_DWORD *)uint64_t v54 = 136315394;
    id v56 = OUTLINED_FUNCTION_29_2(v55, "identifier");
    uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
    unint64_t v59 = v58;

    uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v59, (uint64_t *)v88);
    uint64_t v61 = OUTLINED_FUNCTION_5_4(v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v61, v62, v54 + 4);
    swift_bridgeObjectRelease(v59);
    OUTLINED_FUNCTION_0_6();
    OUTLINED_FUNCTION_0_6();
    *(_WORD *)(v54 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    uint64_t v63 = v79;
    specialized Collection.first.getter( (uint64_t)v34,  (uint64_t (*)(void))&type metadata accessor for TemplatingSection,  v79);
    uint64_t v64 = type metadata accessor for TemplatingSection(0LL);
    if (__swift_getEnumTagSinglePayload(v63, 1LL, v64) == 1)
    {
      outlined destroy of CoreSignalTypes?(v63, &demangling cache variable for type metadata for TemplatingSection?);
      uint64_t v65 = 0LL;
      unint64_t v66 = 0xE000000000000000LL;
    }

    else
    {
      uint64_t v67 = v80;
      TemplatingSection.content.getter();
      uint64_t v68 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v64 - 8) + 8LL))(v63, v64);
      uint64_t v65 = TemplatingText.text.getter(v68);
      unint64_t v66 = v69;
      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v67, v81);
    }

    uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, (uint64_t *)v88);
    uint64_t v71 = OUTLINED_FUNCTION_5_4(v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v71, v72, v54 + 14);
    OUTLINED_FUNCTION_33_3();
    swift_bridgeObjectRelease(v66);
    _os_log_impl(&dword_0, v52, v53, "Using dialog for %s as: %s", (uint8_t *)v54, 0x16u);
    swift_arrayDestroy(v55, 2LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_3_0(v55);
    OUTLINED_FUNCTION_3_0(v54);
  }

  else
  {
    OUTLINED_FUNCTION_0_6();
    OUTLINED_FUNCTION_0_6();

    OUTLINED_FUNCTION_33_3();
  }

  uint64_t v73 = v86;
  (*(void (**)(uint64_t, void, uint64_t))(v84 + 104))( v86,  enum case for BehaviorAfterSpeaking.defaultBehavior(_:),  v85);
  v49[3] = type metadata accessor for TemplatingResult(0LL);
  __swift_allocate_boxed_opaque_existential_0Tm(v49);
  TemplatingResult.init(templateIdentifier:sections:behaviorAfterSpeaking:)( 0x6E65746E49707061LL,  0xE900000000000074LL,  v34,  v73);
  outlined release of SuggestionAppIntent?( v91,  (void (*)(void, void, void, void, void, void, void, void))outlined consume of SuggestionAppIntent?);
  return swift_release(v90);
}

uint64_t closure #2 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&__int128 v75 = a4;
  uint64_t v6 = type metadata accessor for VersionedInvocation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v78 = v6;
  uint64_t v79 = v7;
  __chkstk_darwin(v6);
  uint64_t v80 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for InvocationType(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v77 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v81 = (char *)&v71 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v76 = (char *)&v71 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v71 - v18;
  __chkstk_darwin(v17);
  uint64_t v74 = (char *)&v71 - v20;
  *(void *)&__int128 v73 = type metadata accessor for IntentType(0LL);
  uint64_t v21 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v23 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v24 = *(void **)(a1 + 40);
  __int128 v71 = *(_OWORD *)(a1 + 24);
  uint64_t v25 = v71;
  uint64_t v72 = __swift_project_boxed_opaque_existential_1((void *)a1, v71);
  uint64_t v26 = static AppIntentsSuggestionsOwnerDefinitionFactory.getAppIntentResolvers(linkClient:toolClient:)(a3, v75);
  static Resolvers.unionResolvers(type:resolvers:)(v82, 0xD000000000000017LL, 0x800000000003E670LL, v26);
  swift_bridgeObjectRelease(v26);
  uint64_t v27 = static AppIntentsSuggestionsOwnerDefinitionFactory.createIntentParameter()();
  __int128 v86 = v71;
  uint64_t v87 = v24;
  __swift_allocate_boxed_opaque_existential_0Tm(v85);
  SuggestionDetailsBuilder.parameter(parameterName:resolver:resolveParam:)( 0xD000000000000010LL,  0x800000000003F210LL,  v82,  v27,  v25,  v24);
  swift_release(v27);
  outlined destroy of CoreSignalTypes?((uint64_t)v82, &demangling cache variable for type metadata for Resolver?);
  __swift_destroy_boxed_opaque_existential_1(v85);
  uint64_t v28 = *(void **)(a1 + 40);
  __int128 v75 = *(_OWORD *)(a1 + 24);
  uint64_t v29 = v75;
  *(void *)&__int128 v71 = a1;
  __swift_project_boxed_opaque_existential_1((void *)a1, v75);
  uint64_t v30 = static AppIntentFilter.builder()();
  dispatch thunk of AppIntentFilter.Builder.build()();
  swift_release(v30);
  uint64_t v31 = v73;
  (*(void (**)(char *, void, void))(v21 + 104))(v23, enum case for IntentType.appIntent(_:), v73);
  __int128 v86 = v75;
  uint64_t v87 = v28;
  __swift_allocate_boxed_opaque_existential_0Tm(v85);
  dispatch thunk of SuggestionDetailsBuilder.intentIdentifier(_:)(v23, v29, v28);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v31);
  uint64_t v32 = __swift_destroy_boxed_opaque_existential_1(v85);
  uint64_t result = static InvocationType.allCases.getter(v32);
  uint64_t v34 = result;
  v85[0] = _swiftEmptyArrayStorage;
  uint64_t v35 = *(void **)(result + 16);
  if (v35)
  {
    unint64_t v36 = 0LL;
    LODWORD(v7__swift_destroy_boxed_opaque_existential_1(v0 + 5) = enum case for InvocationType.assistantTurn(_:);
    id v37 = v74;
    *(void *)&__int128 v73 = result;
    uint64_t v72 = v35;
    while (v36 < *(void *)(v34 + 16))
    {
      unint64_t v38 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      uint64_t v39 = *(void *)(v10 + 72);
      unint64_t v40 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
      v40(v37, v34 + v38 + v39 * v36, v9);
      v40(v19, (unint64_t)v37, v9);
      int v41 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v19, v9);
      if (v41 == (_DWORD)v75)
      {
        (*(void (**)(char *, uint64_t))(v10 + 96))(v19, v9);
        uint64_t v43 = type metadata accessor for InvocationModality(0LL);
        (*(void (**)(char *, uint64_t))(*(void *)(v43 - 8) + 8LL))(v42, v43);
        uint64_t v44 = type metadata accessor for AssistantTurnState(0LL);
        (*(void (**)(char *, uint64_t))(*(void *)(v44 - 8) + 8LL))(v19, v44);
        unint64_t v45 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
        v45(v76, v37, v9);
        uint64_t v46 = v85[0];
        if ((swift_isUniquelyReferenced_nonNull_native(v85[0]) & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v46 + 16) + 1LL,  1LL);
          uint64_t v46 = v85[0];
        }

        unint64_t v48 = *(void *)(v46 + 16);
        unint64_t v47 = *(void *)(v46 + 24);
        if (v48 >= v47 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v47 > 1,  v48 + 1,  1LL);
          uint64_t v46 = v85[0];
        }

        *(void *)(v46 + ++*(void *)(v0 + 16) = v48 + 1;
        uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v45)(v46 + v38 + v48 * v39, v76, v9);
        v85[0] = v46;
        id v37 = v74;
        uint64_t v34 = v73;
        uint64_t v35 = v72;
      }

      else
      {
        uint64_t v49 = *(void (**)(char *, uint64_t))(v10 + 8);
        v49(v19, v9);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v49)(v37, v9);
      }

      if (v35 == (void *)++v36)
      {
        uint64_t v50 = (void *)v85[0];
        uint64_t v51 = v71;
        goto LABEL_14;
      }
    }

    __break(1u);
  }

  else
  {
    uint64_t v50 = _swiftEmptyArrayStorage;
    uint64_t v51 = v71;
LABEL_14:
    swift_bridgeObjectRelease(v34);
    outlined init with copy of SiriHelpSuggestionDetailsBuilderExtension & SuggestionDetailsBuilder(v51, (uint64_t)v85);
    unint64_t v52 = v87;
    __int128 v73 = v86;
    uint64_t v53 = v86;
    uint64_t v54 = (char *)__swift_project_boxed_opaque_existential_1(v85, v86);
    uint64_t v55 = v50[2];
    *(void *)&__int128 v75 = v53;
    uint64_t v74 = v54;
    if (v55)
    {
      uint64_t v72 = v52;
      v82[0] = _swiftEmptyArrayStorage;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v55, 0LL);
      unint64_t v56 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      *(void *)&__int128 v71 = v50;
      uint64_t v57 = (char *)v50 + v56;
      uint64_t v76 = *(char **)(v10 + 72);
      unint64_t v58 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
      do
      {
        unint64_t v59 = v81;
        v58(v81, v57, v9);
        uint64_t v60 = v77;
        v58(v77, v59, v9);
        VersionedInvocation.init(invocationType:versions:)(v60, 0LL);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v59, v9);
        uint64_t v61 = (char *)v82[0];
        if ((swift_isUniquelyReferenced_nonNull_native(v82[0]) & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v61 + 2) + 1LL,  1LL);
          uint64_t v61 = (char *)v82[0];
        }

        unint64_t v63 = *((void *)v61 + 2);
        unint64_t v62 = *((void *)v61 + 3);
        if (v63 >= v62 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v62 > 1,  v63 + 1,  1LL);
          uint64_t v61 = (char *)v82[0];
        }

        *((void *)v61 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v63 + 1;
        uint64_t v64 = *(unsigned __int8 *)(v79 + 80);
        uint64_t v65 = (v64 + 32) & ~v64;
        uint64_t v66 = *(void *)(v79 + 72);
        (*(void (**)(char *, char *, uint64_t))(v79 + 32))(&v61[v65 + v66 * v63], v80, v78);
        v82[0] = v61;
        uint64_t v57 = &v76[(void)v57];
        --v55;
      }

      while (v55);
      swift_release(v71);
      unint64_t v52 = v72;
    }

    else
    {
      swift_release(v50);
      uint64_t v66 = *(void *)(v79 + 72);
      uint64_t v64 = *(unsigned __int8 *)(v79 + 80);
      uint64_t v65 = (v64 + 32) & ~v64;
      uint64_t v61 = (char *)_swiftEmptyArrayStorage;
    }

    uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<VersionedInvocation>);
    uint64_t v68 = swift_allocObject(v67, v65 + v66, v64 | 7);
    *(_OWORD *)(v68 + ++*(void *)(v0 + 16) = xmmword_3C030;
    unint64_t v69 = v81;
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v81, enum case for InvocationType.siriHelp(_:), v9);
    VersionedInvocation.init(invocationType:versions:)(v69, 0LL);
    v82[0] = v61;
    specialized Array.append<A>(contentsOf:)(v68);
    uint64_t v70 = v82[0];
    __int128 v83 = v73;
    uint64_t v84 = v52;
    __swift_allocate_boxed_opaque_existential_0Tm(v82);
    dispatch thunk of SuggestionDetailsBuilder.validForInvocationTypes(_:)(v70, v75, v52);
    swift_bridgeObjectRelease(v70);
    __swift_destroy_boxed_opaque_existential_1(v82);
    return __swift_destroy_boxed_opaque_existential_1(v85);
  }

  return result;
}

uint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.getAppIntentResolvers(linkClient:toolClient:)( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Resolver>);
  uint64_t v5 = OUTLINED_FUNCTION_1(v4, 72LL);
  *(_OWORD *)(v5 + ++*(void *)(v0 + 16) = xmmword_3C030;
  outlined init with copy of LinkClient(a1, (uint64_t)v12);
  outlined init with copy of LinkClient(a2, (uint64_t)v11);
  uint64_t v6 = type metadata accessor for MetaDataSourcedAppIntentResolver();
  OUTLINED_FUNCTION_1(v6, 112LL);
  MetaDataSourcedAppIntentResolver.init(linkClient:toolClient:)(v12, v11);
  uint64_t v8 = v7;
  *(void *)(v5 + 56) = v6;
  lazy protocol witness table accessor for type UtteranceAction and conformance UtteranceAction( &lazy protocol witness table cache variable for type MetaDataSourcedAppIntentResolver and conformance MetaDataSourcedAppIntentResolver,  (uint64_t (*)(uint64_t))type metadata accessor for MetaDataSourcedAppIntentResolver,  (uint64_t)&protocol conformance descriptor for MetaDataSourcedAppIntentResolver);
  *(void *)(v5 + 64) = v9;
  *(void *)(v5 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v8;
  return v5;
}

uint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.createIntentParameter()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Intent, IntentParameter>);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Any, Any?>);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = swift_allocObject(&unk_49F80, 24LL, 7LL);
  *(void *)(v7 + ++*(void *)(v0 + 16) = v0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  Transformer.init(transform:)( partial apply for closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createIntentParameter(),  v7,  (char *)&type metadata for Any + 8,  v8);
  uint64_t v9 = type metadata accessor for Intent(0LL);
  uint64_t v10 = type metadata accessor for IntentParameter(0LL);
  Transformer.init(transform:)( closure #2 in static AppIntentsSuggestionsOwnerDefinitionFactory.createIntentParameter(),  0LL,  v9,  v10);
  uint64_t v11 = type metadata accessor for ResolvableParameter(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  return ResolvableParameter.init(typeIdentifier:required:loggingKeyTransformer:intentTransformer:)( 0xD000000000000017LL,  0x800000000003E670LL,  1LL,  v6,  v3);
}

void *closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createIntentParameter()@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of Any(a1, (uint64_t)&v41);
  if ((swift_dynamicCast(&v37, &v41, (char *)&type metadata for Any + 8, &type metadata for SuggestionAppIntent, 6LL) & 1) != 0)
  {
    v43[0] = v37;
    v43[1] = v38;
    void v43[2] = v39;
    v43[3] = v40;
    uint64_t v9 = *((void *)&v38 + 1);
    uint64_t v10 = (void *)v39;
    id v11 = [*((id *)&v39 + 1) identifier];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v14 = v13;

    *(void *)&__int128 v37 = v12;
    *((void *)&v37 + 1) = v14;
    v15._uint64_t countAndFlagsBits = 95LL;
    v15._object = (void *)0xE100000000000000LL;
    String.append(_:)(v15);
    swift_bridgeObjectRetain(v10);
    v16._uint64_t countAndFlagsBits = v9;
    v16._object = v10;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(v10);
    v17._uint64_t countAndFlagsBits = 95LL;
    v17._object = (void *)0xE100000000000000LL;
    String.append(_:)(v17);
    v18._uint64_t countAndFlagsBits = static AppIntentsSuggestionsOwnerDefinitionFactory.getParameterLoggingId(_:)((uint64_t)v43);
    object = v18._object;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(object);
    __int128 v20 = v37;
    *(void *)(a2 + 24) = &type metadata for String;
    uint64_t result = outlined release of SuggestionAppIntent(v43);
    *(_OWORD *)a2 = v20;
  }

  else
  {
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
    }
    uint64_t v22 = __swift_project_value_buffer(v5, (uint64_t)static Logger.appIntentsSuggestions);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v22, v5);
    uint64_t v23 = outlined init with copy of Any(a1, (uint64_t)v43);
    char v24 = (os_log_s *)Logger.logObject.getter(v23);
    int v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, (os_log_type_t)v25))
    {
      int v33 = v25;
      uint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v32 = swift_slowAlloc(32LL, -1LL);
      uint64_t v36 = v32;
      *(_DWORD *)uint64_t v26 = 136315138;
      outlined init with copy of Any((uint64_t)v43, (uint64_t)&v37);
      outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)( (uint64_t)&v37,  (uint64_t)&v41,  &demangling cache variable for type metadata for Any?);
      uint64_t v44 = v2;
      if (v42)
      {
        outlined init with take of Any(&v41, v35);
        outlined init with copy of Any((uint64_t)v35, (uint64_t)v34);
        uint64_t v27 = String.init<A>(describing:)(v34, (char *)&type metadata for Any + 8);
        unint64_t v29 = v28;
        __swift_destroy_boxed_opaque_existential_1(v35);
        outlined destroy of CoreSignalTypes?((uint64_t)&v37, &demangling cache variable for type metadata for Any?);
      }

      else
      {
        outlined destroy of CoreSignalTypes?((uint64_t)&v37, &demangling cache variable for type metadata for Any?);
        unint64_t v29 = 0xE300000000000000LL;
        uint64_t v27 = 7104878LL;
      }

      *(void *)&__int128 v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 8, v26 + 4);
      swift_bridgeObjectRelease(v29);
      __swift_destroy_boxed_opaque_existential_1(v43);
      _os_log_impl( &dword_0,  v24,  (os_log_type_t)v33,  "Unable to get parameter of type AppIntentAction. found value of type: %s",  v26,  0xCu);
      uint64_t v30 = v32;
      swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);

      uint64_t result = (void *)(*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }

    else
    {
      __swift_destroy_boxed_opaque_existential_1(v43);

      uint64_t result = (void *)(*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }

    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + ++*(void *)(v0 + 16) = 0u;
  }

  return result;
}

uint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.getParameterLoggingId(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    int v33 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v1);
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v4 = specialized Dictionary.startIndex.getter(v1);
    uint64_t v6 = v5;
    char v8 = v7 & 1;
    uint64_t v26 = v1;
    do
    {
      uint64_t v9 = v8 & 1;
      uint64_t v10 = specialized Dictionary.subscript.getter((uint64_t)v31, v4, v6, v9, v1);
      uint64_t v12 = v11;
      v30[0] = v10;
      v30[1] = v11;
      *(void *)&__int128 v28 = v10;
      *((void *)&v28 + 1) = v11;
      outlined init with copy of ActionParameter((uint64_t)v31, (uint64_t)v29);
      v27[0] = v28;
      v27[1] = v29[0];
      void v27[2] = v29[1];
      v27[3] = v29[2];
      swift_bridgeObjectRetain(v12);
      outlined destroy of CoreSignalTypes?( (uint64_t)v30,  &demangling cache variable for type metadata for (key: String, value: ActionParameter));
      closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.getParameterLoggingId(_:)((uint64_t *)v27, v32);
      outlined destroy of CoreSignalTypes?( (uint64_t)v27,  &demangling cache variable for type metadata for (key: String, value: ActionParameter));
      uint64_t v13 = v32[0];
      uint64_t v14 = v32[1];
      uint64_t v3 = v33;
      if ((swift_isUniquelyReferenced_nonNull_native(v33) & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v3 = v33;
      }

      unint64_t v15 = v3[2];
      if (v15 >= v3[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v3 = v33;
      }

      v3[2] = v15 + 1;
      Swift::String v16 = &v3[2 * v15];
      v16[4] = v13;
      v16[5] = v14;
      uint64_t v1 = v26;
      uint64_t v17 = specialized _NativeDictionary.index(after:)(v4, v6, v9, v26);
      uint64_t v19 = v18;
      char v8 = v20 & 1;
      outlined consume of [String : ActionParameter].Index._Variant(v4, v6, v9);
      uint64_t v4 = v17;
      uint64_t v6 = v19;
      --v2;
    }

    while (v2);
    outlined consume of [String : ActionParameter].Index._Variant(v17, v19, v8);
    swift_bridgeObjectRelease(v26);
  }

  v30[0] = v3;
  swift_bridgeObjectRetain(v3);
  specialized MutableCollection<>.sort(by:)(v30);
  swift_bridgeObjectRelease(v3);
  uint64_t v21 = v30[0];
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  unint64_t v23 = lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v24 = BidirectionalCollection<>.joined(separator:)(35LL, 0xE100000000000000LL, v22, v23);
  swift_release(v21);
  return v24;
}

uint64_t closure #2 in static AppIntentsSuggestionsOwnerDefinitionFactory.createIntentParameter()@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Intent(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  char v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (uint64_t *)((char *)&v20 - v9);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v20 - v9, a1, v4);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t))(v5 + 88);
  if (v12((char *)v10, v4) == enum case for Intent.appIntentV2(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 96))(v10, v4);
    uint64_t v13 = *v10;
    uint64_t v14 = v10[2];
  }

  else
  {
    unint64_t v15 = *(void (**)(uint64_t *, uint64_t))(v5 + 8);
    v15(v10, v4);
    v11(v8, a1, v4);
    if (v12(v8, v4) != enum case for Intent.appIntent(_:))
    {
      v15((uint64_t *)v8, v4);
      Swift::String v16 = (unsigned int *)&enum case for IntentParameter.ignore(_:);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t v13 = *(void *)v8;
    uint64_t v14 = *((void *)v8 + 2);
  }

  swift_bridgeObjectRelease(v14);
  a2[3] = type metadata accessor for LNAction();
  *a2 = v13;
  Swift::String v16 = (unsigned int *)&enum case for IntentParameter.context(_:);
LABEL_7:
  uint64_t v17 = *v16;
  uint64_t v18 = type metadata accessor for IntentParameter(0LL);
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104LL))(a2, v17, v18);
}

uint64_t closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.getParameterLoggingId(_:)@<X0>( uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1[1];
  uint64_t v16 = *a1;
  uint64_t v17 = v4;
  swift_bridgeObjectRetain(v4);
  v5._uint64_t countAndFlagsBits = 61LL;
  v5._object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  uint64_t v13 = v16;
  uint64_t v14 = v4;
  outlined init with copy of ActionParameter((uint64_t)(a1 + 2), (uint64_t)v15);
  outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)( (uint64_t)v15,  (uint64_t)v12,  &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
  outlined destroy of ActionParameter((uint64_t)v15);
  outlined init with copy of (LNActionParameterMetadata, SiriSuggestions.DisplayRepresentable?)( (uint64_t)v12,  (uint64_t)v11,  &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
  if (v11[3])
  {
    outlined destroy of CoreSignalTypes?( (uint64_t)v11,  &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
    outlined destroy of CoreSignalTypes?( (uint64_t)v12,  &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
    unint64_t v6 = 0xE300000000000000LL;
    uint64_t v7 = 7628147LL;
  }

  else
  {
    outlined destroy of CoreSignalTypes?( (uint64_t)v12,  &demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
    unint64_t v6 = 0xE600000000000000LL;
    uint64_t v7 = 0x7465732D6F6ELL;
  }

  unint64_t v8 = v6;
  String.append(_:)(*(Swift::String *)&v7);
  uint64_t result = swift_bridgeObjectRelease(v6);
  uint64_t v10 = v17;
  *a2 = v16;
  a2[1] = v10;
  return result;
}

uint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:)( uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  void v3[9] = v2;
  v3[7] = a1;
  return swift_task_switch( static AppIntentsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:),  0LL,  0LL);
}

uint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:)()
{
  if (one-time initialization token for appIntentsOwner != -1) {
    swift_once(&one-time initialization token for appIntentsOwner, one-time initialization function for appIntentsOwner);
  }
  uint64_t v1 = (int *)v0[7];
  uint64_t v2 = static LinkSuggestionsOwners.appIntentsOwner;
  v0[5] = OUTLINED_FUNCTION_37_2();
  lazy protocol witness table accessor for type UtteranceAction and conformance UtteranceAction( (unint64_t *)&lazy protocol witness table cache variable for type DefaultOwner and conformance DefaultOwner,  (uint64_t (*)(uint64_t))&type metadata accessor for DefaultOwner,  (uint64_t)&protocol conformance descriptor for DefaultOwner);
  v0[6] = v3;
  v0[2] = v2;
  uint64_t v4 = v1[1];
  uint64_t v7 = (uint64_t (*)(void *))((char *)v1 + *v1);
  swift_retain(v2);
  Swift::String v5 = (void *)swift_task_alloc(v4);
  v0[10] = v5;
  *Swift::String v5 = v0;
  v5[1] = static AppIntentsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:);
  return v7(v0 + 2);
}

{
  void *v0;
  uint64_t refreshed;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  refreshed = dispatch thunk of SuggestionOwnerDefinitionBuilder.getRefreshService()();
  uint64_t v3 = v2;
  v0[12] = refreshed;
  uint64_t v4 = [objc_allocWithZone(LNMetadataProvider) init];
  Swift::String v5 = [objc_allocWithZone(LNSuggestionsProvider) init];
  unint64_t v6 = type metadata accessor for LinkRegistryObserver();
  OUTLINED_FUNCTION_1(v6, 32LL);
  uint64_t v7 = swift_unknownObjectRetain(refreshed);
  unint64_t v8 = LinkRegistryObserver.init(refreshableService:)(v7, v3);
  uint64_t v9 = type metadata accessor for DefaultLinkClient();
  OUTLINED_FUNCTION_1(v9, 48LL);
  uint64_t v10 = DefaultLinkClient.init(metadataProvider:suggestionsProvider:registryObserver:)((uint64_t)v4, (uint64_t)v5, v8);
  v0[13] = v10;
  uint64_t v11 = type metadata accessor for DefaultToolClient();
  OUTLINED_FUNCTION_1(v11, 24LL);
  uint64_t v12 = DefaultToolClient.init()();
  v0[14] = v12;
  uint64_t v13 = unk_4ED9C;
  swift_retain(v10);
  uint64_t v14 = (void *)swift_task_alloc(v13);
  v0[15] = v14;
  *uint64_t v14 = v0;
  v14[1] = static AppIntentsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:);
  return v16((uint64_t)v10, v12, v0[11], v0[9]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 96);
  swift_release(*(void *)(v0 + 112));
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_13_2();
  swift_unknownObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 128));
}

uint64_t static AppIntentsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:)( uint64_t a1)
{
  uint64_t v2 = (void *)(*(void *)v1 + 16LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 80LL);
  *(void *)(*(void *)v1 + 88LL) = a1;
  swift_task_dealloc(v3);
  __swift_destroy_boxed_opaque_existential_1(v2);
  return OUTLINED_FUNCTION_11_1( (uint64_t)static AppIntentsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:),  0LL,  0LL);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v2 = *(void *)(*(void *)v1 + 120LL);
  *(void *)(*(void *)v1 + 128LL) = a1;
  swift_task_dealloc(v2);
  OUTLINED_FUNCTION_25_0();
  return OUTLINED_FUNCTION_11_1( (uint64_t)static AppIntentsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:),  0LL,  0LL);
}

void DialogProperties.appIntentAction.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = dispatch thunk of DialogProperties.getParameters()(a1, a2);
  specialized Dictionary.subscript.getter(0xD000000000000010LL, 0x800000000003F210LL, v4, &v17);
  swift_bridgeObjectRelease(v4);
  if (!v18)
  {
    outlined destroy of CoreSignalTypes?((uint64_t)&v17, &demangling cache variable for type metadata for Any?);
    goto LABEL_5;
  }

  if (!OUTLINED_FUNCTION_32_4( (uint64_t)&v11,  (uint64_t)&v17,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for SuggestionAppIntent))
  {
LABEL_5:
    uint64_t v5 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t v10 = 0LL;
    __int128 v6 = 0uLL;
    __int128 v8 = 0uLL;
    goto LABEL_6;
  }

  uint64_t v5 = v11;
  __int128 v6 = v12;
  uint64_t v7 = v13;
  __int128 v8 = v14;
  uint64_t v9 = v15;
  uint64_t v10 = v16;
LABEL_6:
  *(void *)a3 = v5;
  *(_OWORD *)(a3 + 8) = v6;
  *(void *)(a3 + 24) = v7;
  *(_OWORD *)(a3 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v8;
  *(void *)(a3 + 48) = v9;
  *(void *)(a3 + 56) = v10;
}

uint64_t protocol witness for static OwnerDefinitionFactory.createOwnerDefinitions() in conformance AppIntentsSuggestionsOwnerDefinitionFactory()
{
  return static OwnerDefinitionFactory.createOwnerDefinitions()(v0);
}

uint64_t protocol witness for static OwnerDefinitionFactory.createOwnerDefinitions(builderFactory:) in conformance AppIntentsSuggestionsOwnerDefinitionFactory( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_4ED94);
  *(void *)(v2 + ++*(void *)(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:);
  return static AppIntentsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:)(a1, a2);
}

void *Context.getAppIntentDetails()(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for appIntentsOwner != -1) {
    swift_once(&one-time initialization token for appIntentsOwner, one-time initialization function for appIntentsOwner);
  }
  uint64_t v4 = static LinkSuggestionsOwners.appIntentsOwner;
  uint64_t v5 = OUTLINED_FUNCTION_37_2();
  void v11[3] = v5;
  lazy protocol witness table accessor for type UtteranceAction and conformance UtteranceAction( (unint64_t *)&lazy protocol witness table cache variable for type DefaultOwner and conformance DefaultOwner,  (uint64_t (*)(uint64_t))&type metadata accessor for DefaultOwner,  (uint64_t)&protocol conformance descriptor for DefaultOwner);
  uint64_t v7 = v6;
  v11[4] = v6;
  v11[0] = v4;
  __swift_project_boxed_opaque_existential_1(v11, v5);
  void v10[3] = v5;
  v10[4] = *(void *)(v7 + 8);
  __swift_allocate_boxed_opaque_existential_0Tm(v10);
  (*(void (**)(void))(*(void *)(v5 - 8) + 16LL))();
  swift_retain(v4);
  Context.getParam(for:key:)(v12, v10, 0xD000000000000010LL, 0x800000000003F230LL, a1, a2);
  __swift_destroy_boxed_opaque_existential_1(v10);
  __swift_destroy_boxed_opaque_existential_1(v11);
  if (v12[3])
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AppIntentDetails]);
  }

  else
  {
    outlined destroy of CoreSignalTypes?((uint64_t)v12, &demangling cache variable for type metadata for Any?);
  }

  return _swiftEmptyArrayStorage;
}

Swift::Void __swiftcall Context.setAppIntentDetails(_:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  if (one-time initialization token for appIntentsOwner != -1) {
    swift_once(&one-time initialization token for appIntentsOwner, one-time initialization function for appIntentsOwner);
  }
  uint64_t v6 = static LinkSuggestionsOwners.appIntentsOwner;
  uint64_t v7 = OUTLINED_FUNCTION_37_2();
  void v12[3] = v7;
  lazy protocol witness table accessor for type UtteranceAction and conformance UtteranceAction( (unint64_t *)&lazy protocol witness table cache variable for type DefaultOwner and conformance DefaultOwner,  (uint64_t (*)(uint64_t))&type metadata accessor for DefaultOwner,  (uint64_t)&protocol conformance descriptor for DefaultOwner);
  uint64_t v9 = v8;
  void v12[4] = v8;
  v12[0] = v6;
  __swift_project_boxed_opaque_existential_1(v12, v7);
  void v11[3] = v7;
  v11[4] = *(void *)(v9 + 8);
  __swift_allocate_boxed_opaque_existential_0Tm(v11);
  (*(void (**)(void))(*(void *)(v7 - 8) + 16LL))();
  void v10[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AppIntentDetails]);
  v10[0] = a1._rawValue;
  swift_retain(v6);
  swift_bridgeObjectRetain(a1._rawValue);
  Context.setParam(for:key:value:)(v11, 0xD000000000000010LL, 0x800000000003F230LL, v10, v4, v3);
  __swift_destroy_boxed_opaque_existential_1(v10);
  __swift_destroy_boxed_opaque_existential_1(v11);
  __swift_destroy_boxed_opaque_existential_1(v12);
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  uint64_t v2 = 64LL;
  for (uint64_t i = 10LL; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64LL;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t specialized _NativeDictionary.index(after:)(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || -(-1LL << *(_BYTE *)(a4 + 32)) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a4 + 64 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a4 + 36) == a2) {
    return _HashTable.occupiedBucket(after:)();
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1LL << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a5 + 36) == a3)
  {
    char v5 = (uint64_t *)(*(void *)(a5 + 48) + 16 * a2);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    outlined init with copy of ActionParameter(*(void *)(a5 + 56) + 48 * a2, result);
    swift_bridgeObjectRetain(v7);
    return v6;
  }

LABEL_8:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void *specialized Dictionary.subscript.getter(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1LL << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a5 + 36) == a3)
  {
    char v5 = (uint64_t *)(*(void *)(a5 + 48) + 16 * a2);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    uint64_t v8 = *(void **)(*(void *)(a5 + 56) + 8 * a2);
    *uint64_t result = v8;
    swift_bridgeObjectRetain(v7);
    id v9 = v8;
    return (void *)v6;
  }

uint64_t specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[13] = a3;
  v4[14] = a4;
  v4[12] = a2;
  v4[5] = type metadata accessor for DefaultLinkClient();
  v4[6] = &protocol witness table for DefaultLinkClient;
  __int128 v4[2] = a1;
  swift_retain(a1);
  swift_retain(a2);
  return swift_task_switch( specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:),  0LL,  0LL);
}

uint64_t specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_36_2();
  uint64_t v2 = OUTLINED_FUNCTION_1(v1, 56LL);
  v0[15] = v2;
  OUTLINED_FUNCTION_35_3(v2);
  uint64_t v3 = v0[2];
  uint64_t v4 = (void *)OUTLINED_FUNCTION_50_1((uint64_t)&async function pointer to specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:));
  v0[16] = v4;
  *uint64_t v4 = v0;
  v4[1] = specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:);
  return v6(v3, v0[12], v0[13], v2, v0[14]);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  OUTLINED_FUNCTION_27_2();
  uint64_t v4 = *(void *)(v3 + 96);
  OUTLINED_FUNCTION_22_2(*(void *)(v3 + 128));
  OUTLINED_FUNCTION_13_2();
  __swift_destroy_boxed_opaque_existential_1(v0);
  swift_release(v4);
  return OUTLINED_FUNCTION_18_5(v1, *(uint64_t (**)(void))(v2 + 8));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  OUTLINED_FUNCTION_27_2();
  char v5 = v3[18];
  uint64_t v4 = v3[19];
  uint64_t v6 = v3[15];
  OUTLINED_FUNCTION_22_2(v3[22]);
  OUTLINED_FUNCTION_13_2();
  __swift_destroy_boxed_opaque_existential_1(v0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc(v4);
  return OUTLINED_FUNCTION_18_5(v1, *(uint64_t (**)(void))(v2 + 8));
}

uint64_t specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[16] = a7;
  v8[17] = a8;
  v8[14] = a5;
  v8[15] = a6;
  v8[12] = a3;
  v8[13] = a4;
  uint64_t v13 = *(void *)(a6 - 8);
  v8[18] = v13;
  uint64_t v14 = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v8[19] = v14;
  v8[5] = a5;
  v8[6] = a7;
  __swift_allocate_boxed_opaque_existential_0Tm(v8 + 2);
  v8[20] = v15;
  (*(void (**)(void))(*(void *)(a5 - 8) + 16LL))();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v14, a2, a6);
  return swift_task_switch( specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:),  0LL,  0LL);
}

void specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_36_2();
  uint64_t v2 = OUTLINED_FUNCTION_1(v1, 56LL);
  *(void *)(v0 + 168) = v2;
  OUTLINED_FUNCTION_35_3(v2);
  uint64_t v3 = (void *)OUTLINED_FUNCTION_50_1((uint64_t)&async function pointer to specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:));
  *(void *)(v0 + 176) = v3;
  *uint64_t v3 = v0;
  v3[1] = specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:);
  __asm { BR              X8 }

uint64_t specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[23] = a4;
  v5[24] = a5;
  v5[22] = a3;
  uint64_t v8 = type metadata accessor for DialogDetails(0LL);
  v5[25] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[26] = v9;
  v5[27] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v5[5] = type metadata accessor for DefaultLinkClient();
  v5[6] = &protocol witness table for DefaultLinkClient;
  uint64_t v5[2] = a1;
  v5[10] = type metadata accessor for DefaultToolClient();
  v5[11] = &protocol witness table for DefaultToolClient;
  v5[7] = a2;
  swift_retain(a1);
  swift_retain(a2);
  return swift_task_switch( specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:),  0LL,  0LL);
}

uint64_t specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)()
{
  uint64_t v5 = OUTLINED_FUNCTION_1((uint64_t)&unk_49F58, 32LL);
  *(void *)(v5 + ++*(void *)(v0 + 16) = v1;
  *(void *)(v5 + 24) = v2;
  *uint64_t v0 = &async function pointer to partial apply for closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:);
  v0[1] = v5;
  OUTLINED_FUNCTION_21_3(v5, enum case for DialogDetails.catTemplateCallback(_:));
  uint64_t v6 = (void *)swift_task_alloc(48LL);
  uint64_t v7 = OUTLINED_FUNCTION_10_4(v6);
  OUTLINED_FUNCTION_8_3( v7,  0x800000000003E690LL,  v8,  (uint64_t)partial apply for closure #2 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:));
  OUTLINED_FUNCTION_34_2();
  uint64_t v9 = OUTLINED_FUNCTION_19_1();
  OUTLINED_FUNCTION_24_4(v9, v10, v11, v12, v13, v14, v15, v16, v24);
  uint64_t v17 = type metadata accessor for OnRequestAppIntents();
  uint64_t v18 = OUTLINED_FUNCTION_1(v17, 56LL);
  outlined init with take of LinkDialogIdProvider(v4, v18 + 16);
  *(void *)(v3 + 120) = v17;
  lazy protocol witness table accessor for type UtteranceAction and conformance UtteranceAction( &lazy protocol witness table cache variable for type OnRequestAppIntents and conformance OnRequestAppIntents,  (uint64_t (*)(uint64_t))type metadata accessor for OnRequestAppIntents,  (uint64_t)&protocol conformance descriptor for OnRequestAppIntents);
  uint64_t v20 = OUTLINED_FUNCTION_15_1(v19);
  OUTLINED_FUNCTION_25_0();
  swift_release(v20);
  __swift_destroy_boxed_opaque_existential_1(v4);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OwnerDefinition>);
  uint64_t v22 = (__n128 *)OUTLINED_FUNCTION_1(v21, 72LL);
  OUTLINED_FUNCTION_20_3(v22, (__n128)xmmword_3C030);
  OUTLINED_FUNCTION_25_4();
  return OUTLINED_FUNCTION_2_5((uint64_t)v22, *(uint64_t (**)(void))(v3 + 8));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 *v22;
  uint64_t v24;
  OUTLINED_FUNCTION_9_5();
  uint64_t v5 = OUTLINED_FUNCTION_1((uint64_t)&unk_49FA8, 32LL);
  *(void *)(v5 + ++*(void *)(v0 + 16) = v1;
  *(void *)(v5 + 24) = v2;
  *uint64_t v0 = &closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)partial apply;
  v0[1] = v5;
  OUTLINED_FUNCTION_21_3(v5, enum case for DialogDetails.catTemplateCallback(_:));
  uint64_t v6 = (void *)swift_task_alloc(48LL);
  uint64_t v7 = OUTLINED_FUNCTION_10_4(v6);
  OUTLINED_FUNCTION_8_3( v7,  0x800000000003E690LL,  v8,  (uint64_t)closure #2 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)partial apply);
  OUTLINED_FUNCTION_34_2();
  uint64_t v9 = OUTLINED_FUNCTION_19_1();
  OUTLINED_FUNCTION_24_4(v9, v10, v11, v12, v13, v14, v15, v16, v24);
  uint64_t v17 = type metadata accessor for OnRequestAppIntents();
  uint64_t v18 = OUTLINED_FUNCTION_1(v17, 56LL);
  outlined init with take of LinkDialogIdProvider(v4, v18 + 16);
  *(void *)(v3 + 120) = v17;
  lazy protocol witness table accessor for type UtteranceAction and conformance UtteranceAction( &lazy protocol witness table cache variable for type OnRequestAppIntents and conformance OnRequestAppIntents,  (uint64_t (*)(uint64_t))type metadata accessor for OnRequestAppIntents,  (uint64_t)&protocol conformance descriptor for OnRequestAppIntents);
  uint64_t v20 = OUTLINED_FUNCTION_15_1(v19);
  OUTLINED_FUNCTION_25_0();
  swift_release(v20);
  __swift_destroy_boxed_opaque_existential_1(v4);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OwnerDefinition>);
  uint64_t v22 = (__n128 *)OUTLINED_FUNCTION_1(v21, 72LL);
  OUTLINED_FUNCTION_20_3(v22, (__n128)xmmword_3C030);
  OUTLINED_FUNCTION_25_4();
  return OUTLINED_FUNCTION_2_5((uint64_t)v22, *(uint64_t (**)(void))(v3 + 8));
}

uint64_t specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[23] = a4;
  v8[24] = a5;
  v8[22] = a3;
  uint64_t v12 = type metadata accessor for DialogDetails(0LL);
  v8[25] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v8[26] = v13;
  v8[27] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v8[5] = a6;
  v8[6] = a8;
  __swift_allocate_boxed_opaque_existential_0Tm(v8 + 2);
  (*(void (**)(void))(*(void *)(a6 - 8) + 16LL))();
  v8[10] = a7;
  v8[11] = v15;
  __swift_allocate_boxed_opaque_existential_0Tm(v8 + 7);
  (*(void (**)(void))(*(void *)(a7 - 8) + 16LL))();
  return swift_task_switch( specialized static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:),  0LL,  0LL);
}

uint64_t outlined init with take of SuggestionAppIntent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SuggestionAppIntent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined consume of SuggestionAppIntent?( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a5);

    return swift_bridgeObjectRelease(a8);
  }

  return result;
}

void outlined release of SuggestionAppIntent?( void *a1, void (*a2)(void, void, void, void, void, void, void, void))
{
}

uint64_t outlined copy of SuggestionAppIntent?( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a5);
    id v12 = a6;
    return swift_bridgeObjectRetain(a8);
  }

  return result;
}

uint64_t outlined destroy of AppIntentDialogCallback(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for AppIntentsSuggestionsOwnerDefinitionFactory()
{
  return objc_opt_self(&OBJC_CLASS____TtC25SiriLinkSuggestionsPlugin43AppIntentsSuggestionsOwnerDefinitionFactory);
}

ValueMetadata *type metadata accessor for AppIntentsSuggestionsOwnerDefinitionFactory.Constants()
{
  return &type metadata for AppIntentsSuggestionsOwnerDefinitionFactory.Constants;
}

uint64_t sub_26DD8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t partial apply for closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_4EE54);
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  uint64_t v2 = OUTLINED_FUNCTION_16_3(v1);
  return OUTLINED_FUNCTION_7_5(v2, v3, v4, v5);
}

uint64_t partial apply for closure #2 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)( uint64_t a1)
{
  return closure #2 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)( a1,  v1[2],  v1[3],  v1[4]);
}

void __swift_allocate_boxed_opaque_existential_0Tm(void *a1)
{
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0) {
    *a1 = swift_allocBox();
  }
  OUTLINED_FUNCTION_3();
}

uint64_t outlined init with copy of SiriHelpSuggestionDetailsBuilderExtension & SuggestionDetailsBuilder( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_26ED0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void *partial apply for closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createIntentParameter()@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createIntentParameter()(a1, a2);
}

unint64_t type metadata accessor for LNAction()
{
  unint64_t result = lazy cache variable for type metadata for LNAction;
  if (!lazy cache variable for type metadata for LNAction)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___LNAction);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNAction);
  }

  return result;
}

void *outlined release of SuggestionAppIntent(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[4];
  uint64_t v5 = (void *)a1[5];
  swift_bridgeObjectRelease(a1[7]);

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)partial apply()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_4EE54);
  *(void *)(v0 + ++*(void *)(v0 + 16) = v1;
  uint64_t v2 = OUTLINED_FUNCTION_16_3(v1);
  return OUTLINED_FUNCTION_7_5(v2, v3, v4, v5);
}

{
  uint64_t (**v0)(void);
  OUTLINED_FUNCTION_22_2(*((void *)*v0 + 2));
  return OUTLINED_FUNCTION_0_4(v0[1]);
}

void OUTLINED_FUNCTION_0_6()
{
}

uint64_t OUTLINED_FUNCTION_2_5(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_5_4(uint64_t a1)
{
  *(void *)(v1 - 31__swift_destroy_boxed_opaque_existential_1(v0 + 2) = a1;
  return v1 - 312;
}

uint64_t OUTLINED_FUNCTION_7_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in static AppIntentsSuggestionsOwnerDefinitionFactory.createAppIntentSuggestions(linkClient:toolClient:builder:dialogProvider:)( a1,  a2,  a3,  a4);
}

uint64_t OUTLINED_FUNCTION_8_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return dispatch thunk of SuggestionOwnerDefinitionBuilder.add(suggestionId:dialogDetails:builder:)( 0xD000000000000013LL,  a2,  v4,  a4,  v5);
}

  ;
}

uint64_t OUTLINED_FUNCTION_10_4(void *a1)
{
  a1[2] = v2;
  a1[3] = v3;
  a1[4] = v4;
  return swift_retain(v1);
}

uint64_t OUTLINED_FUNCTION_15_1(uint64_t a1)
{
  *(void *)(v1 + 128) = a1;
  *(void *)(v1 + 96) = v2;
  return dispatch thunk of SuggestionOwnerDefinitionBuilder.withConfiguratorProvider(_:)(v1 + 96);
}

uint64_t OUTLINED_FUNCTION_16_3(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_18_5(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_19_1()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_20_3(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return dispatch thunk of SuggestionOwnerDefinitionBuilder.build()();
}

uint64_t OUTLINED_FUNCTION_21_3(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v2, a2, v3);
}

void OUTLINED_FUNCTION_22_3()
{
}

void OUTLINED_FUNCTION_24_4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t OUTLINED_FUNCTION_25_4()
{
  return swift_task_dealloc(v0);
}

void OUTLINED_FUNCTION_27_2()
{
  *(void *)(v1 - 8) = *v0;
}

id OUTLINED_FUNCTION_29_2(uint64_t a1, const char *a2)
{
  return [*(id *)(v2 - 400) a2];
}

uint64_t OUTLINED_FUNCTION_32_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 6LL);
}

uint64_t OUTLINED_FUNCTION_33_3()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t OUTLINED_FUNCTION_34_2()
{
  return swift_task_dealloc(v0);
}

uint64_t OUTLINED_FUNCTION_35_3(uint64_t a1)
{
  return outlined init with take of LinkDialogIdProvider(v1, a1 + 16);
}

uint64_t OUTLINED_FUNCTION_36_2()
{
  return type metadata accessor for AppIntentsDialogProvider();
}

uint64_t OUTLINED_FUNCTION_37_2()
{
  return type metadata accessor for DefaultOwner(0LL);
}

void OUTLINED_FUNCTION_38_4()
{
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySo35LNSuggestedActionDialogParameterKeyaSSG_SS_SSts5NeverOTg506_sSo35defg38KeyaS3SIgggoo_AB3key_SS5valuetSS_SSts5i85OIegnrzr_TR042_s25SiriLinkSuggestionsPlugin0B15Suggestedb6V18rawc44ParmatersSDyS2SGvgq26_SStSo011LNSuggestedfH12d5L18_V5XEfU_Tf3nnnpf_nTf1cn_n( uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v3 = specialized Dictionary.startIndex.getter(a1);
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      unint64_t v5 = v3;
      if (v3 < 1LL << *(_BYTE *)(a1 + 32))
      {
        int v6 = v4;
        uint64_t v7 = a1 + 64;
        uint64_t v17 = a1 + 64;
        while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1LL << v5)) != 0)
        {
          if (v6 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_18;
          }
          uint64_t v18 = v1;
          uint64_t v8 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v5);
          uint64_t v9 = v8[1];
          uint64_t v21 = *v8;
          uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(a1 + 48) + 8 * v5));
          uint64_t v19 = v11;
          uint64_t v20 = v10;
          unint64_t v13 = _swiftEmptyArrayStorage[2];
          unint64_t v12 = _swiftEmptyArrayStorage[3];
          swift_bridgeObjectRetain(v9);
          if (v13 >= v12 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          _swiftEmptyArrayStorage[2] = v13 + 1;
          uint64_t v14 = &_swiftEmptyArrayStorage[4 * v13];
          void v14[4] = v20;
          void v14[5] = v19;
          v14[6] = v21;
          v14[7] = v9;
          uint64_t v15 = -1LL << *(_BYTE *)(a1 + 32);
          uint64_t v7 = a1 + 64;
          if ((*(void *)(v17 + 8 * (v5 >> 6)) & (1LL << v5)) == 0) {
            goto LABEL_20;
          }
          if (v6 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_21;
          }
          uint64_t v16 = _HashTable.occupiedBucket(after:)(v5, v17, ~v15);
          --v1;
          if (v18 == 1) {
            return;
          }
          unint64_t v5 = v16;
          if ((v16 & 0x8000000000000000LL) == 0)
          {
            int v6 = *(_DWORD *)(a1 + 36);
            if (v16 < 1LL << *(_BYTE *)(a1 + 32)) {
              continue;
            }
          }

          goto LABEL_22;
        }

        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }

uint64_t static DefaultLinkDialogIdProvider.canDialog(action:)(uint64_t a1)
{
  if (one-time initialization token for supportedSystemProtocols != -1) {
    swift_once( &one-time initialization token for supportedSystemProtocols,  one-time initialization function for supportedSystemProtocols);
  }
  uint64_t v3 = static DefaultLinkDialogIdProvider.supportedSystemProtocols;
  id v4 = *(id *)(a1 + 32);
  LOBYTE(v3) = specialized Set.contains(_:)(v4, v3);

  if ((v3 & 1) != 0)
  {
    if ((static DefaultLinkDialogIdProvider.validDialogParameters(for:)((void *)a1) & 1) != 0) {
      return 1LL;
    }
    if (one-time initialization token for linkSuggestions != -1) {
      swift_once( &one-time initialization token for linkSuggestions,  one-time initialization function for linkSuggestions);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v21, (uint64_t)static Logger.linkSuggestions);
    OUTLINED_FUNCTION_5_5();
    OUTLINED_FUNCTION_5_5();
    OUTLINED_FUNCTION_5_5();
    uint64_t v22 = OUTLINED_FUNCTION_5_5();
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_43_1(v23))
    {
      uint64_t v10 = OUTLINED_FUNCTION_16_0(22LL);
      uint64_t v11 = OUTLINED_FUNCTION_16_0(64LL);
      uint64_t v41 = v11;
      *(_DWORD *)uint64_t v10 = 136315394;
      id v24 = [v4 identifier];
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      unint64_t v27 = v26;

      uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v41);
      OUTLINED_FUNCTION_12_5(v40, v28);
      swift_bridgeObjectRelease(v27);
      OUTLINED_FUNCTION_1_7();
      OUTLINED_FUNCTION_1_7();
      *(_WORD *)(v10 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
      uint64_t v29 = *(void *)(a1 + 40);
      uint64_t v30 = swift_bridgeObjectRetain(v29);
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySo35LNSuggestedActionDialogParameterKeyaSSG_SS_SSts5NeverOTg506_sSo35defg38KeyaS3SIgggoo_AB3key_SS5valuetSS_SSts5i85OIegnrzr_TR042_s25SiriLinkSuggestionsPlugin0B15Suggestedb6V18rawc44ParmatersSDyS2SGvgq26_SStSo011LNSuggestedfH12d5L18_V5XEfU_Tf3nnnpf_nTf1cn_n(v30);
      uint64_t v32 = v31;
      swift_bridgeObjectRelease(v29);
      int v33 = specialized Dictionary.init<A>(uniqueKeysWithValues:)(v32);
      Dictionary.description.getter( v33,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
      uint64_t v35 = v34;
      uint64_t v36 = swift_bridgeObjectRelease(v33);
      uint64_t v40 = OUTLINED_FUNCTION_13_4(v36, v37, v38);
      OUTLINED_FUNCTION_12_5(v40, v39);
      swift_bridgeObjectRelease(v35);
      OUTLINED_FUNCTION_1_7();
      OUTLINED_FUNCTION_1_7();
      _os_log_impl( &dword_0,  v8,  v1,  "Invalid dialog parameters in canDialog for protocol: %s, parameters: %s",  (uint8_t *)v10,  0x16u);
      uint64_t v18 = (char *)&type metadata for Any + 8;
      uint64_t v19 = v11;
      uint64_t v20 = 2LL;
      goto LABEL_14;
    }

    OUTLINED_FUNCTION_1_7();
    OUTLINED_FUNCTION_1_7();
LABEL_16:
    OUTLINED_FUNCTION_1_7();
    OUTLINED_FUNCTION_1_7();
    goto LABEL_17;
  }

  if (one-time initialization token for linkSuggestions != -1) {
    swift_once(&one-time initialization token for linkSuggestions, one-time initialization function for linkSuggestions);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v6, (uint64_t)static Logger.linkSuggestions);
  OUTLINED_FUNCTION_5_5();
  uint64_t v7 = OUTLINED_FUNCTION_5_5();
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (!OUTLINED_FUNCTION_43_1(v9)) {
    goto LABEL_16;
  }
  uint64_t v10 = OUTLINED_FUNCTION_16_0(12LL);
  uint64_t v11 = OUTLINED_FUNCTION_16_0(32LL);
  uint64_t v41 = v11;
  *(_DWORD *)uint64_t v10 = 136315138;
  id v12 = [v4 identifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v14 = v13;

  uint64_t v40 = OUTLINED_FUNCTION_13_4(v15, v16, v17);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v10 + 4);
  swift_bridgeObjectRelease(v14);
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_1_7();
  _os_log_impl(&dword_0, v8, v1, "Unknown system protocol in canDialog: %s", (uint8_t *)v10, 0xCu);
  uint64_t v18 = (char *)&type metadata for Any + 8;
  uint64_t v19 = v11;
  uint64_t v20 = 1LL;
LABEL_14:
  swift_arrayDestroy(v19, v20, v18);
  OUTLINED_FUNCTION_3_0(v11);
  OUTLINED_FUNCTION_3_0(v10);
LABEL_17:

  return 0LL;
}

uint64_t specialized Set.contains(_:)(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001LL) != 0)
  {
    id v4 = a1;
    char v5 = __CocoaSet.contains(_:)();

    return v5 & 1;
  }

  if (!*(void *)(a2 + 16)
    || (Swift::Int v7 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40)),
        uint64_t v8 = -1LL << *(_BYTE *)(a2 + 32),
        unint64_t v9 = v7 & ~v8,
        uint64_t v10 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0))
  {
LABEL_11:
    char v13 = 0;
    return v13 & 1;
  }

  type metadata accessor for LNSystemProtocol();
  id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v9);
  char v12 = static NSObject.== infix(_:_:)(v11, a1);

  if ((v12 & 1) == 0)
  {
    uint64_t v14 = ~v8;
    unint64_t v15 = (v9 + 1) & v14;
    if (((*(void *)(v10 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0)
    {
      do
      {
        id v16 = *(id *)(*(void *)(a2 + 48) + 8 * v15);
        char v13 = static NSObject.== infix(_:_:)(v16, a1);

        if ((v13 & 1) != 0) {
          break;
        }
        unint64_t v15 = (v15 + 1) & v14;
      }

      while (((*(void *)(v10 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0);
      return v13 & 1;
    }

    goto LABEL_11;
  }

  char v13 = 1;
  return v13 & 1;
}

void specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(v21, *(void *)(a3 + 40));
    String.hash(into:)(v21, a1, a2);
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    Swift::Int v8 = v6 & ~v7;
    OUTLINED_FUNCTION_4_5();
    if ((v9 & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      id v11 = (uint64_t *)(v10 + 16 * v8);
      uint64_t v12 = v11[1];
      if ((*v11 != a1 || v12 != a2) && (OUTLINED_FUNCTION_8_4(*v11, v12) & 1) == 0)
      {
        uint64_t v14 = ~v7;
        uint64_t v15 = (v8 + 1) & v14;
        OUTLINED_FUNCTION_4_5();
        if ((v16 & 1) != 0)
        {
          do
          {
            uint64_t v17 = (uint64_t *)(v10 + 16 * v15);
            uint64_t v18 = v17[1];
            if (*v17 == a1 && v18 == a2) {
              break;
            }
            if ((OUTLINED_FUNCTION_8_4(*v17, v18) & 1) != 0) {
              break;
            }
            uint64_t v15 = (v15 + 1) & v14;
            OUTLINED_FUNCTION_4_5();
          }

          while ((v20 & 1) != 0);
        }
      }
    }
  }

uint64_t DialogDetails.dialogId.getter()
{
  return v0;
}

uint64_t DialogDetails.dialogType.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t DialogDetails.getTemplateLocation()()
{
  uint64_t v0 = OUTLINED_FUNCTION_9_6();
  return OUTLINED_FUNCTION_2_6(v0, v1, v2, v3);
}

uint64_t DialogDetails.sectionIdentifier.getter()
{
  if (*(_BYTE *)(v0 + 24)) {
    return 0x7470697263736564LL;
  }
  else {
    return 0x6974736567677573LL;
  }
}

Swift::String __swiftcall DialogType.getSectionId()()
{
  BOOL v1 = (v0 & 1) == 0;
  if ((v0 & 1) != 0) {
    uint64_t v2 = 0x7470697263736564LL;
  }
  else {
    uint64_t v2 = 0x6974736567677573LL;
  }
  if (v1) {
    uint64_t v3 = (void *)0xEA00000000006E6FLL;
  }
  else {
    uint64_t v3 = (void *)0xEB000000006E6F69LL;
  }
  result._object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t DialogDetails.init(dialogId:dialogParams:dialogType:templateLocation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + ++*(void *)(v0 + 16) = a3;
  *(_BYTE *)(a6 + 24) = a4 & 1;
  uint64_t v7 = a6 + *(int *)(type metadata accessor for DialogDetails(0LL) + 28);
  uint64_t v8 = OUTLINED_FUNCTION_0_7();
  return OUTLINED_FUNCTION_2_6(v7, a5, v8, *(uint64_t (**)(void))(*(void *)(v8 - 8) + 32LL));
}

uint64_t protocol witness for CATDialogProvider.isSpeakable.getter in conformance DialogDetails(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type DialogDetails and conformance DialogDetails( &lazy protocol witness table cache variable for type DialogDetails and conformance DialogDetails,  (uint64_t)&protocol conformance descriptor for DialogDetails);
  return DialogIdProvider.isSpeakable.getter(a1, v2);
}

uint64_t one-time initialization function for supportedSystemProtocols()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  unint64_t inited = swift_initStackObject(v0, v4);
  *(_OWORD *)(inited + ++*(void *)(v0 + 16) = xmmword_3D450;
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___LNSystemProtocol);
  *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = [v2 openEntitySystemProtocol];
  *(void *)(inited + 40) = [v2 cancelProtocol];
  *(void *)(inited + 48) = [v2 createEntitySystemProtocol];
  *(void *)(inited + outlined init with copy of LinkClient(v0 + 16, v0 + 56) = [v2 searchSystemProtocol];
  *(void *)(inited + 64) = [v2 closeEntityProtocol];
  *(void *)(inited + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = [v2 navigateSequentiallyProtocol];
  *(void *)(inited + 80) = [v2 changeBinarySettingSystemProtocol];
  specialized Array._endMutation()();
  uint64_t result = specialized Set.init<A>(_:)(inited);
  static DefaultLinkDialogIdProvider.supportedSystemProtocols = result;
  return result;
}

uint64_t *DefaultLinkDialogIdProvider.supportedSystemProtocols.unsafeMutableAddressor()
{
  if (one-time initialization token for supportedSystemProtocols != -1) {
    swift_once( &one-time initialization token for supportedSystemProtocols,  one-time initialization function for supportedSystemProtocols);
  }
  return &static DefaultLinkDialogIdProvider.supportedSystemProtocols;
}

double static DefaultLinkDialogIdProvider.supportedSystemProtocols.getter()
{
  if (one-time initialization token for supportedSystemProtocols != -1) {
    swift_once( &one-time initialization token for supportedSystemProtocols,  one-time initialization function for supportedSystemProtocols);
  }
  *(void *)&double result = swift_bridgeObjectRetain(static DefaultLinkDialogIdProvider.supportedSystemProtocols).n128_u64[0];
  return result;
}

void DefaultLinkDialogIdProvider.__allocating_init(templateDir:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_3_4(v1);
  OUTLINED_FUNCTION_7();
}

void DefaultLinkDialogIdProvider.init(templateDir:)()
{
  uint64_t v0 = OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_3_4(v0);
  OUTLINED_FUNCTION_7();
}

uint64_t static DefaultLinkDialogIdProvider.validDialogParameters(for:)(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = (void *)objc_opt_self(&OBJC_CLASS___LNSystemProtocol);
  id v4 = v2;
  id v5 = [v3 openEntitySystemProtocol];
  type metadata accessor for LNSystemProtocol();
  char v6 = static NSObject.== infix(_:_:)(v5, v4);

  if ((v6 & 1) != 0) {
    goto LABEL_15;
  }
  id v4 = v4;
  id v7 = [v3 cancelProtocol];
  char v8 = static NSObject.== infix(_:_:)(v7, v4);

  if ((v8 & 1) != 0) {
    goto LABEL_15;
  }
  id v9 = v4;
  id v10 = [v3 createEntitySystemProtocol];
  char v11 = static NSObject.== infix(_:_:)(v10, v9);

  if ((v11 & 1) != 0)
  {

    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LNSuggestedActionDialogParameterKey>);
    uint64_t v13 = swift_allocObject(v12, 40LL, 7LL);
    uint64_t v14 = v13;
    *(_OWORD *)(v13 + ++*(void *)(v0 + 16) = xmmword_3C030;
    uint64_t v15 = (void **)&LNSuggestedActionDialogParameterKeyEntityType;
    goto LABEL_5;
  }

  id v4 = v9;
  id v23 = [v3 searchSystemProtocol];
  char v24 = static NSObject.== infix(_:_:)(v23, v4);

  if ((v24 & 1) != 0) {
    goto LABEL_15;
  }
  id v25 = v4;
  id v26 = [v3 closeEntityProtocol];
  char v27 = static NSObject.== infix(_:_:)(v26, v25);

  if ((v27 & 1) != 0)
  {

    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LNSuggestedActionDialogParameterKey>);
    uint64_t inited = swift_initStackObject(v28, &v58);
    *(_OWORD *)(inited + ++*(void *)(v0 + 16) = xmmword_3D460;
    uint64_t v30 = (void *)LNSuggestedActionDialogParameterKeyEntityType;
    uint64_t v31 = (void *)LNSuggestedActionDialogParameterKeyEntityName;
    *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = LNSuggestedActionDialogParameterKeyEntityType;
    *(void *)(inited + 40) = v31;
    uint64_t v32 = a1[5];
    uint64_t v60 = v32;
    uint64_t v33 = *(void *)(v32 + 16);
    id v34 = v30;
    id v35 = v31;
    swift_bridgeObjectRetain(inited);
    if (v33)
    {
      id v36 = v34;
      outlined retain of [LNSuggestedActionDialogParameterKey : String](&v60);
      specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v36);
      char v38 = v37;
      outlined release of [LNSuggestedActionDialogParameterKey : String](&v60);

      if ((v38 & 1) != 0)
      {
        swift_bridgeObjectRelease(inited);
        char v22 = 1;
LABEL_22:
        swift_setDeallocating(inited);
        specialized _ContiguousArrayStorage.__deallocating_deinit();
        return v22 & 1;
      }

      if (*(void *)(v32 + 16))
      {
        unint64_t v45 = *(void **)(inited + 40);
        outlined retain of [LNSuggestedActionDialogParameterKey : String](&v60);
        id v46 = v45;
        specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v46);
        char v22 = v47;
        outlined release of [LNSuggestedActionDialogParameterKey : String](&v60);
        swift_bridgeObjectRelease(inited);

        goto LABEL_22;
      }
    }

    swift_bridgeObjectRelease(inited);
    char v22 = 0;
    goto LABEL_22;
  }

  id v4 = v25;
  id v39 = [v3 navigateSequentiallyProtocol];
  char v40 = static NSObject.== infix(_:_:)(v39, v4);

  if ((v40 & 1) != 0)
  {
LABEL_15:

    char v22 = 1;
    return v22 & 1;
  }

  id v42 = [v3 changeBinarySettingSystemProtocol];
  char v43 = static NSObject.== infix(_:_:)(v42, v4);

  if ((v43 & 1) == 0)
  {
    if (one-time initialization token for linkSuggestions != -1) {
      swift_once( &one-time initialization token for linkSuggestions,  one-time initialization function for linkSuggestions);
    }
    uint64_t v48 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v48, (uint64_t)static Logger.linkSuggestions);
    outlined retain of LinkSuggestedAction(a1);
    uint64_t v49 = outlined retain of LinkSuggestedAction(a1);
    uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      unint64_t v52 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v53 = swift_slowAlloc(32LL, -1LL);
      uint64_t v60 = v53;
      *(_DWORD *)unint64_t v52 = 136315138;
      id v54 = [v4 identifier];
      uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
      unint64_t v57 = v56;

      uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v57, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v52 + 4);
      swift_bridgeObjectRelease(v57);
      outlined release of LinkSuggestedAction(a1);
      outlined release of LinkSuggestedAction(a1);
      _os_log_impl(&dword_0, v50, v51, "Unknown system protocol in validDialogParameters: %s", v52, 0xCu);
      swift_arrayDestroy(v53, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_slowDealloc(v52, -1LL, -1LL);
    }

    else
    {
      outlined release of LinkSuggestedAction(a1);
      outlined release of LinkSuggestedAction(a1);
    }

    goto LABEL_13;
  }

  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LNSuggestedActionDialogParameterKey>);
  uint64_t v13 = swift_allocObject(v44, 40LL, 7LL);
  uint64_t v14 = v13;
  *(_OWORD *)(v13 + ++*(void *)(v0 + 16) = xmmword_3C030;
  uint64_t v15 = (void **)&LNSuggestedActionDialogParameterKeyEntityName;
LABEL_5:
  char v16 = *v15;
  *(void *)(v13 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v16;
  id v17 = v16;
  uint64_t v60 = a1[5];
  uint64_t v18 = *(void **)(v14 + 32);
  uint64_t v19 = *(void *)(v60 + 16);
  swift_bridgeObjectRetain(v14);
  if (!v19)
  {
    swift_bridgeObjectRelease_n(v14, 2LL);
LABEL_13:
    char v22 = 0;
    return v22 & 1;
  }

  id v20 = v18;
  outlined retain of [LNSuggestedActionDialogParameterKey : String](&v60);
  specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v20);
  char v22 = v21;
  outlined release of [LNSuggestedActionDialogParameterKey : String](&v60);

  swift_bridgeObjectRelease_n(v14, 2LL);
  return v22 & 1;
}

uint64_t DefaultLinkDialogIdProvider.getDialogId(linkAction:dialogType:)@<X0>( __int128 *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v7 = DefaultLinkDialogIdProvider.dialogId(for:)(a1);
  if (v8)
  {
    unint64_t v9 = v7;
    uint64_t v10 = v8;
    char v11 = a2 & 1;
    uint64_t v12 = DefaultLinkDialogIdProvider.extractDialogParam(linkAction:)(a1);
    uint64_t v13 = v3 + OBJC_IVAR____TtC25SiriLinkSuggestionsPlugin27DefaultLinkDialogIdProvider_templateDir;
    uint64_t v14 = type metadata accessor for DialogDetails(0LL);
    uint64_t v15 = a3 + *(int *)(v14 + 28);
    uint64_t v16 = OUTLINED_FUNCTION_0_7();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL))(v15, v13, v16);
    *(void *)a3 = v9;
    *(void *)(a3 + 8) = v10;
    *(void *)(a3 + ++*(void *)(v0 + 16) = v12;
    *(_BYTE *)(a3 + 24) = v11;
    uint64_t v17 = a3;
    uint64_t v18 = 0LL;
    uint64_t v19 = v14;
  }

  else
  {
    uint64_t v19 = type metadata accessor for DialogDetails(0LL);
    uint64_t v17 = a3;
    uint64_t v18 = 1LL;
  }

  return __swift_storeEnumTagSinglePayload(v17, v18, 1LL, v19);
}

unint64_t DefaultLinkDialogIdProvider.dialogId(for:)(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = (void *)objc_opt_self(&OBJC_CLASS___LNSystemProtocol);
  id v4 = v2;
  id v5 = [v3 openEntitySystemProtocol];
  type metadata accessor for LNSystemProtocol();
  char v6 = static NSObject.== infix(_:_:)(v5, v4);

  if ((v6 & 1) != 0)
  {

    return 0xD000000000000010LL;
  }

  id v8 = v4;
  id v9 = [v3 cancelProtocol];
  char v10 = static NSObject.== infix(_:_:)(v9, v8);

  if ((v10 & 1) != 0) {
    goto LABEL_7;
  }
  id v8 = v8;
  id v11 = [v3 createEntitySystemProtocol];
  char v12 = static NSObject.== infix(_:_:)(v11, v8);

  if ((v12 & 1) != 0
    || (id v8 = v8,
        id v13 = [v3 searchSystemProtocol],
        char v14 = static NSObject.== infix(_:_:)(v13, v8),
        v8,
        v13,
        (v14 & 1) != 0))
  {
LABEL_7:
    unint64_t v7 = 0xD000000000000012LL;

    return v7;
  }

  id v15 = v8;
  id v16 = [v3 closeEntityProtocol];
  char v17 = static NSObject.== infix(_:_:)(v16, v15);

  if ((v17 & 1) != 0)
  {

    return 0xD000000000000011LL;
  }

  id v19 = v15;
  id v20 = [v3 navigateSequentiallyProtocol];
  char v21 = static NSObject.== infix(_:_:)(v20, v19);

  if ((v21 & 1) != 0)
  {

    uint64_t v22 = a1[5];
    swift_bridgeObjectRetain(v22);
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySo35LNSuggestedActionDialogParameterKeyaSSG_SS_SSts5NeverOTg506_sSo35defg38KeyaS3SIgggoo_AB3key_SS5valuetSS_SSts5i85OIegnrzr_TR042_s25SiriLinkSuggestionsPlugin0B15Suggestedb6V18rawc44ParmatersSDyS2SGvgq26_SStSo011LNSuggestedfH12d5L18_V5XEfU_Tf3nnnpf_nTf1cn_n(v23);
    uint64_t v25 = v24;
    swift_bridgeObjectRelease(v22);
    id v26 = specialized Dictionary.init<A>(uniqueKeysWithValues:)(v25);
    uint64_t v27 = specialized Dictionary.subscript.getter(0x6F69746365726964LL, 0xE90000000000006ELL, (uint64_t)v26);
    uint64_t v29 = v28;
    swift_bridgeObjectRelease(v26);
    unint64_t v30 = DefaultLinkDialogIdProvider.navigateSequentiallyDialogId(for:)(v27, v29);
LABEL_15:
    unint64_t v7 = v30;
    swift_bridgeObjectRelease(v29);
    return v7;
  }

  id v31 = [v3 changeBinarySettingSystemProtocol];
  char v32 = static NSObject.== infix(_:_:)(v31, v19);

  if ((v32 & 1) != 0)
  {
    uint64_t v33 = a1[5];
    swift_bridgeObjectRetain(v33);
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySo35LNSuggestedActionDialogParameterKeyaSSG_SS_SSts5NeverOTg506_sSo35defg38KeyaS3SIgggoo_AB3key_SS5valuetSS_SSts5i85OIegnrzr_TR042_s25SiriLinkSuggestionsPlugin0B15Suggestedb6V18rawc44ParmatersSDyS2SGvgq26_SStSo011LNSuggestedfH12d5L18_V5XEfU_Tf3nnnpf_nTf1cn_n(v34);
    uint64_t v36 = v35;
    swift_bridgeObjectRelease(v33);
    char v37 = specialized Dictionary.init<A>(uniqueKeysWithValues:)(v36);
    uint64_t v38 = specialized Dictionary.subscript.getter(0x704F65676E616863LL, 0xEF6E6F6974617265LL, (uint64_t)v37);
    uint64_t v29 = v39;
    swift_bridgeObjectRelease(v37);
    unint64_t v30 = DefaultLinkDialogIdProvider.changeBinarySettingDialogId(for:)(v38, v29);
    goto LABEL_15;
  }

  if (one-time initialization token for linkSuggestions != -1) {
    swift_once(&one-time initialization token for linkSuggestions, one-time initialization function for linkSuggestions);
  }
  uint64_t v40 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v40, (uint64_t)static Logger.linkSuggestions);
  outlined retain of LinkSuggestedAction(a1);
  uint64_t v41 = outlined retain of LinkSuggestedAction(a1);
  id v42 = (os_log_s *)Logger.logObject.getter(v41);
  os_log_type_t v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v45 = swift_slowAlloc(32LL, -1LL);
    uint64_t v51 = v45;
    *(_DWORD *)uint64_t v44 = 136315138;
    id v46 = [v19 identifier];
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
    unint64_t v49 = v48;

    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v44 + 4);
    swift_bridgeObjectRelease(v49);
    outlined release of LinkSuggestedAction(a1);
    outlined release of LinkSuggestedAction(a1);
    _os_log_impl(&dword_0, v42, v43, "Unknown system protocol in dialogId: %s", v44, 0xCu);
    swift_arrayDestroy(v45, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1LL, -1LL);
    swift_slowDealloc(v44, -1LL, -1LL);
  }

  else
  {
    outlined release of LinkSuggestedAction(a1);
    outlined release of LinkSuggestedAction(a1);
  }

  return 0LL;
}

uint64_t DefaultLinkDialogIdProvider.extractDialogParam(linkAction:)(__int128 *a1)
{
  __int128 v22 = *a1;
  __int16 v23 = *((_WORD *)a1 + 8);
  __int128 v2 = v22;
  uint64_t v3 = (void *)static SAAppInfoFactory.createAppInfo(appIdentifier:)(v22, *((void *)&v22 + 1));
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject(v4, v21);
  uint64_t v6 = inited;
  *(_OWORD *)(inited + ++*(void *)(v0 + 16) = xmmword_3C910;
  *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xD000000000000013LL;
  *(void *)(inited + 40) = 0x800000000003F310LL;
  *(_OWORD *)(inited + 48) = v2;
  *(void *)(inited + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = &type metadata for String;
  *(void *)(inited + 80) = 0x656D614E707061LL;
  *(void *)(inited + 88) = 0xE700000000000000LL;
  if (!v3)
  {
    id v9 = (uint64_t *)(inited + 96);
    *(void *)(inited + 120) = &type metadata for String;
    swift_bridgeObjectRetain(*((void *)&v2 + 1));
    goto LABEL_5;
  }

  outlined retain of LinkSuggestedActionsRequest((uint64_t)&v22);
  uint64_t v7 = outlined bridged method (ob) of @objc SAAppInfo.displayAppName.getter(v3);
  id v9 = (uint64_t *)(v6 + 96);
  *(void *)(v6 + 120) = &type metadata for String;
  if (!v8)
  {
LABEL_5:
    *id v9 = 0LL;
    unint64_t v8 = 0xE000000000000000LL;
    goto LABEL_6;
  }

  *id v9 = v7;
LABEL_6:
  *(void *)(v6 + 104) = v8;
  *(void *)(v6 + 128) = 0xD000000000000013LL;
  *(void *)(v6 + 136) = 0x800000000003F330LL;
  BOOL v10 = ((v23 | HIBYTE(v23)) & 1) == 0;
  *(void *)(v6 + 168) = &type metadata for Bool;
  *(_BYTE *)(v6 + 144) = v10;
  uint64_t v11 = Dictionary.init(dictionaryLiteral:)( v6,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  uint64_t v12 = *((void *)a1 + 5);
  swift_bridgeObjectRetain(v12);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySo35LNSuggestedActionDialogParameterKeyaSSG_SS_SSts5NeverOTg506_sSo35defg38KeyaS3SIgggoo_AB3key_SS5valuetSS_SSts5i85OIegnrzr_TR042_s25SiriLinkSuggestionsPlugin0B15Suggestedb6V18rawc44ParmatersSDyS2SGvgq26_SStSo011LNSuggestedfH12d5L18_V5XEfU_Tf3nnnpf_nTf1cn_n(v13);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease(v12);
  id v16 = specialized Dictionary.init<A>(uniqueKeysWithValues:)(v15);
  specialized _dictionaryUpCast<A, B, C, D>(_:)((uint64_t)v16);
  uint64_t v18 = v17;
  swift_bridgeObjectRelease(v16);
  uint64_t v19 = specialized Dictionary.merging(_:uniquingKeysWith:)(v18, v11);

  return v19;
}

uint64_t specialized Dictionary.merging(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  uint64_t v8 = a2;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)( a1,  (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B),  0LL,  isUniquelyReferenced_nonNull_native,  &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  if (v2) {
    swift_bridgeObjectRelease(v6);
  }
  return v6;
}

unint64_t DefaultLinkDialogIdProvider.navigateSequentiallyDialogId(for:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xD000000000000010LL;
  if (a2)
  {
    BOOL v5 = a1 == 1954047342 && a2 == 0xE400000000000000LL;
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)(1954047342LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0) {
      return v4;
    }
    BOOL v6 = a1 == 0x73756F6976657270LL && a2 == 0xE800000000000000LL;
    if (v6
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x73756F6976657270LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
    {
      return 0xD000000000000014LL;
    }
  }

  if (one-time initialization token for linkSuggestions != -1) {
    swift_once(&one-time initialization token for linkSuggestions, one-time initialization function for linkSuggestions);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v7, (uint64_t)static Logger.linkSuggestions);
  uint64_t v8 = swift_bridgeObjectRetain_n(a2, 2LL);
  id v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v21 = a2;
    uint64_t v22 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v20 = a1;
    swift_bridgeObjectRetain(a2);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v14 = String.init<A>(describing:)(&v20, v13);
    unint64_t v16 = v15;
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v11 + 4);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease(v16);
    _os_log_impl(&dword_0, v9, v10, "Unknown direction in navigateSequentiallyDialogId: %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject(v17, v23);
  *(_OWORD *)(inited + ++*(void *)(v0 + 16) = xmmword_3D460;
  *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xD000000000000010LL;
  *(void *)(inited + 40) = 0x800000000003F3F0LL;
  *(void *)(inited + 48) = 0xD000000000000014LL;
  *(void *)(inited + outlined init with copy of LinkClient(v0 + 16, v0 + 56) = 0x800000000003F410LL;
  unint64_t v4 = specialized Collection.randomElement<A>(using:)(inited, inited);
  swift_setDeallocating(inited);
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  return v4;
}

unint64_t DefaultLinkDialogIdProvider.changeBinarySettingDialogId(for:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xD000000000000012LL;
  if (!a2) {
    goto LABEL_18;
  }
  BOOL v5 = a1 == 0x656C62616E65LL && a2 == 0xE600000000000000LL;
  if (!v5
    && (_stringCompareWithSmolCheck(_:_:expecting:)(0x656C62616E65LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) == 0)
  {
    BOOL v6 = a1 == 0x656C6261736964LL && a2 == 0xE700000000000000LL;
    if (v6
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x656C6261736964LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
    {
      return 0xD000000000000013LL;
    }

    BOOL v7 = a1 == 0x656C67676F74LL && a2 == 0xE600000000000000LL;
    if (!v7
      && (_stringCompareWithSmolCheck(_:_:expecting:)(0x656C67676F74LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) == 0)
    {
LABEL_18:
      if (one-time initialization token for linkSuggestions != -1) {
        swift_once( &one-time initialization token for linkSuggestions,  one-time initialization function for linkSuggestions);
      }
      uint64_t v8 = type metadata accessor for Logger(0LL);
      __swift_project_value_buffer(v8, (uint64_t)static Logger.linkSuggestions);
      uint64_t v9 = swift_bridgeObjectRetain_n(a2, 2LL);
      os_log_type_t v10 = (os_log_s *)Logger.logObject.getter(v9);
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v13 = swift_slowAlloc(32LL, -1LL);
        uint64_t v22 = a2;
        uint64_t v23 = v13;
        *(_DWORD *)uint64_t v12 = 136315138;
        uint64_t v21 = a1;
        swift_bridgeObjectRetain(a2);
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        uint64_t v15 = String.init<A>(describing:)(&v21, v14);
        unint64_t v17 = v16;
        uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v12 + 4);
        swift_bridgeObjectRelease_n(a2, 2LL);
        swift_bridgeObjectRelease(v17);
        _os_log_impl(&dword_0, v10, v11, "Unknown changeOperation in changeBinarySettingDialogId: %s", v12, 0xCu);
        swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v13, -1LL, -1LL);
        swift_slowDealloc(v12, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(a2, 2LL);
      }

      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t inited = swift_initStackObject(v18, v24);
      *(_OWORD *)(inited + ++*(void *)(v0 + 16) = xmmword_3C910;
      *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xD000000000000012LL;
      *(void *)(inited + 40) = 0x800000000003F430LL;
      *(void *)(inited + 48) = 0xD000000000000013LL;
      *(void *)(inited + outlined init with copy of LinkClient(v0 + 16, v0 + 56) = 0x800000000003F450LL;
      *(void *)(inited + 64) = 0xD000000000000012LL;
      *(void *)(inited + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0x800000000003F470LL;
      unint64_t v4 = specialized Collection.randomElement<A>(using:)(inited, inited);
      swift_setDeallocating(inited);
      specialized _ContiguousArrayStorage.__deallocating_deinit();
    }
  }

  return v4;
}

uint64_t DefaultLinkDialogIdProvider.deinit()
{
  uint64_t v1 = OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_7_6(v1);
  return v0;
}

uint64_t DefaultLinkDialogIdProvider.__deallocating_deinit()
{
  uint64_t v1 = OUTLINED_FUNCTION_0_7();
  OUTLINED_FUNCTION_7_6(v1);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t protocol witness for LinkDialogIdProvider.getDialogId(linkAction:dialogType:) in conformance DefaultLinkDialogIdProvider@<X0>( __int128 *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  return DefaultLinkDialogIdProvider.getDialogId(linkAction:dialogType:)(a1, a2 & 1, a3);
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit()
{
  uint64_t v1 = *(void *)(v0 + 16);
  type metadata accessor for LNSuggestedActionDialogParameterKey(0LL);
  swift_arrayDestroy(v0 + 32, v1, v2);
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

{
  uint64_t v0;
  swift_arrayDestroy(v0 + 32, *(void *)(v0 + 16), &type metadata for String);
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for DialogDetails(uint64_t a1)
{
  return type metadata accessor for DialogDetails( a1,  (uint64_t *)&type metadata singleton initialization cache for DialogDetails,  (uint64_t)&nominal type descriptor for DialogDetails);
}

uint64_t base witness table accessor for CATDialogProvider in DialogDetails()
{
  return lazy protocol witness table accessor for type DialogDetails and conformance DialogDetails( &lazy protocol witness table cache variable for type DialogDetails and conformance DialogDetails,  (uint64_t)&protocol conformance descriptor for DialogDetails);
}

uint64_t base witness table accessor for DialogProvider in DialogDetails()
{
  return lazy protocol witness table accessor for type DialogDetails and conformance DialogDetails( &lazy protocol witness table cache variable for type DialogDetails and conformance DialogDetails,  (uint64_t)&protocol conformance descriptor for DialogDetails);
}

uint64_t lazy protocol witness table accessor for type DialogDetails and conformance DialogDetails( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for DialogDetails(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type DialogType and conformance DialogType()
{
  unint64_t result = lazy protocol witness table cache variable for type DialogType and conformance DialogType;
  if (!lazy protocol witness table cache variable for type DialogType and conformance DialogType)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DialogType, &type metadata for DialogType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DialogType and conformance DialogType);
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for DialogDetails(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v12 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v12);
  }

  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[2];
    *(void *)(a1 + ++*(void *)(v0 + 16) = v6;
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for URL(0LL);
    os_log_type_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }

  return v3;
}

uint64_t destroy for DialogDetails(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t initializeWithCopy for DialogDetails(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + ++*(void *)(v0 + 16) = v5;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10(v7, v8, v9);
  return a1;
}

uint64_t assignWithCopy for DialogDetails(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(void *)(v0 + 16) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for DialogDetails(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + ++*(void *)(v0 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for DialogDetails(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + ++*(void *)(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40LL))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for DialogDetails(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_29698);
}

uint64_t sub_29698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = OUTLINED_FUNCTION_0_7();
    return __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 28), a2, v8);
  }

uint64_t storeEnumTagSinglePayload for DialogDetails(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_29714);
}

uint64_t sub_29714(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = OUTLINED_FUNCTION_0_7();
    return __swift_storeEnumTagSinglePayload(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }

  return result;
}

uint64_t type metadata completion function for DialogDetails(uint64_t a1)
{
  v4[0] = &unk_3D628;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  __int128 v4[2] = &unk_3D640;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for DialogType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_29854 + 4 * byte_3D475[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_29888 + 4 * byte_3D470[v4]))();
}

uint64_t sub_29888(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_29890(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x29898LL);
  }
  return result;
}

uint64_t sub_298A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x298ACLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_298B0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_298B8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DialogType()
{
  return &type metadata for DialogType;
}

uint64_t ObjC metadata update function for DefaultLinkDialogIdProvider()
{
  return type metadata accessor for DefaultLinkDialogIdProvider(0LL);
}

uint64_t type metadata accessor for DefaultLinkDialogIdProvider(uint64_t a1)
{
  return type metadata accessor for DialogDetails( a1,  (uint64_t *)&type metadata singleton initialization cache for DefaultLinkDialogIdProvider,  (uint64_t)&nominal type descriptor for DefaultLinkDialogIdProvider);
}

uint64_t type metadata accessor for DialogDetails(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t type metadata completion function for DefaultLinkDialogIdProvider(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 1LL, &v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v28 = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v27 = a3;
  swift_retain(a3);
  specialized LazyMapSequence.Iterator.next()(&v31);
  uint64_t v9 = *((void *)&v31 + 1);
  if (!*((void *)&v31 + 1))
  {
LABEL_14:
    swift_release(v27);
    swift_bridgeObjectRelease(v28);
    outlined consume of [String : String].Iterator._Variant(v33[0]);
    return swift_release(v33[6]);
  }

  while (1)
  {
    uint64_t v10 = v31;
    outlined init with take of Any(&v32, v30);
    uint64_t v11 = *a5;
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
    uint64_t v14 = *(void *)(v11 + 16);
    BOOL v15 = (v12 & 1) == 0;
    uint64_t v16 = v14 + v15;
    if (__OFADD__(v14, v15)) {
      break;
    }
    char v17 = v12;
    if (*(void *)(v11 + 24) >= v16)
    {
      if ((a4 & 1) != 0)
      {
        if ((v12 & 1) != 0) {
          goto LABEL_9;
        }
      }

      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
        _NativeDictionary.copy()();
        if ((v17 & 1) != 0) {
          goto LABEL_9;
        }
      }
    }

    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a4 & 1);
      unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
      if ((v17 & 1) != (v19 & 1)) {
        goto LABEL_17;
      }
      unint64_t v13 = v18;
      if ((v17 & 1) != 0)
      {
LABEL_9:
        outlined init with copy of Any((uint64_t)v30, (uint64_t)v29);
        __swift_destroy_boxed_opaque_existential_1(v30);
        swift_bridgeObjectRelease(v9);
        uint64_t v20 = (void *)(*(void *)(*a5 + 56) + 32 * v13);
        __swift_destroy_boxed_opaque_existential_1(v20);
        outlined init with take of Any(v29, v20);
        goto LABEL_13;
      }
    }

    uint64_t v21 = (void *)*a5;
    *(void *)(*a5 + 8 * (v13 >> 6) + 64) |= 1LL << v13;
    uint64_t v22 = (uint64_t *)(v21[6] + 16 * v13);
    *uint64_t v22 = v10;
    v22[1] = v9;
    outlined init with take of Any(v30, (_OWORD *)(v21[7] + 32 * v13));
    uint64_t v23 = v21[2];
    BOOL v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_16;
    }
    v21[2] = v25;
LABEL_13:
    specialized LazyMapSequence.Iterator.next()(&v31);
    uint64_t v9 = *((void *)&v31 + 1);
    a4 = 1;
    if (!*((void *)&v31 + 1)) {
      goto LABEL_14;
    }
  }

  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)( (uint64_t)(a2 + 2),  *a1,  a1[1],  (uint64_t)(a1 + 2));
  *a2 = result;
  a2[1] = v4;
  return result;
}

unint64_t specialized Collection.randomElement<A>(using:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  unint64_t result = specialized RandomNumberGenerator.next<A>(upperBound:)(*(void *)(a2 + 16));
  if (result < v2)
  {
    uint64_t v5 = a2 + 16 * result;
    uint64_t v6 = *(void *)(v5 + 32);
    swift_bridgeObjectRetain(*(void *)(v5 + 40));
    return v6;
  }

  __break(1u);
  return result;
}

unint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    unint64_t v3 = 0LL;
    swift_stdlib_random(&v3, 8LL);
    unint64_t result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      unint64_t v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          unint64_t v3 = 0LL;
          swift_stdlib_random(&v3, 8LL);
        }

        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t outlined bridged method (ob) of @objc SAAppInfo.displayAppName.getter(void *a1)
{
  id v2 = [a1 displayAppName];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t outlined retain of LinkSuggestedActionsRequest(uint64_t a1)
{
  return a1;
}

uint64_t specialized LazyMapSequence.makeIterator()@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v8 = -1LL;
  }
  a4[3] = 0LL;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&__int128 v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain(v12);
    goto LABEL_23;
  }

  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
    __break(1u);
    return result;
  }

  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }

    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }

      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }

        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v18 < v15)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }

  uint64_t v9 = 0LL;
  memset(v24, 0, sizeof(v24));
  __int128 v23 = 0u;
LABEL_23:
  *unint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  char v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = outlined init with take of (key: String, value: Any)?((uint64_t)&v23, (uint64_t)v22);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return outlined destroy of (key: String, value: Any)((uint64_t)v21);
  }

  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }

  return result;
}

uint64_t outlined init with take of (key: String, value: Any)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Any)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of (key: String, value: Any)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Any));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for LNSystemProtocol()
{
  unint64_t result = lazy cache variable for type metadata for LNSystemProtocol;
  if (!lazy cache variable for type metadata for LNSystemProtocol)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___LNSystemProtocol);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_0_7()
{
  return type metadata accessor for URL(0LL);
}

void *OUTLINED_FUNCTION_1_7()
{
  return outlined release of LinkSuggestedAction(v0);
}

uint64_t OUTLINED_FUNCTION_2_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_3_4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32LL))(v2, v1, a1);
}

  ;
}

void *OUTLINED_FUNCTION_5_5()
{
  return outlined retain of LinkSuggestedAction(v0);
}

uint64_t OUTLINED_FUNCTION_6_4()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t OUTLINED_FUNCTION_7_6(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t OUTLINED_FUNCTION_8_4(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t OUTLINED_FUNCTION_9_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_12_5(uint64_t a1, uint64_t a2, ...)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v2, v3);
}

uint64_t OUTLINED_FUNCTION_13_4(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v4, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_15_2()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 8));
}

uint64_t AppIntentsDialogProvider.__allocating_init(linkClient:)(__int128 *a1)
{
  uint64_t v2 = OUTLINED_FUNCTION_7_7();
  uint64_t v5 = swift_allocObject(v2, v3, v4);
  outlined init with take of LinkDialogIdProvider(a1, v5 + 16);
  return v5;
}

uint64_t AppIntentDialogCallback.getText(dialogProperties:siriLocale:)(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  DialogProperties.appIntentAction.getter(v1, v2, (uint64_t)v10);
  outlined init with take of SuggestionAppIntent?((uint64_t)v10, (uint64_t)v11);
  if (v12)
  {
    uint64_t v3 = v13;
    swift_bridgeObjectRetain(v14);
    outlined release of SuggestionAppIntent?((uint64_t)v10);
  }

  else
  {
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)static Logger.appIntentsSuggestions);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v8 = 0;
      _os_log_impl(&dword_0, v6, v7, "Unable to find appIntentAction parameter", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    return 0LL;
  }

  return v3;
}

uint64_t AppIntentDialogCallback.init(linkClient:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of LinkDialogIdProvider(a1, a2);
}

void *AppIntentsDialogProvider.appIntentDialogDetails.unsafeMutableAddressor()
{
  return &static AppIntentsDialogProvider.appIntentDialogDetails;
}

unint64_t static AppIntentsDialogProvider.appIntentDialogDetails.getter()
{
  return 0xD000000000000016LL;
}

uint64_t AppIntentsDialogProvider.getSpokenDialogCallback(context:)@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = (uint64_t)&type metadata for AppIntentDialogCallback;
  a1[4] = lazy protocol witness table accessor for type AppIntentDialogCallback and conformance AppIntentDialogCallback();
  uint64_t v3 = swift_allocObject(&unk_4A140, 56LL, 7LL);
  *a1 = v3;
  return outlined init with copy of AppIntentDialogCallback(v1 + 16, v3 + 16);
}

double AppIntentsDialogProvider.getDescriptionCallback(context:)@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + ++*(void *)(v0 + 16) = 0u;
  return result;
}

uint64_t AppIntentsDialogProvider.deinit()
{
  return v0;
}

uint64_t AppIntentsDialogProvider.__deallocating_deinit()
{
  uint64_t v1 = OUTLINED_FUNCTION_7_7();
  return swift_deallocClassInstance(v1, v2, v3);
}

uint64_t protocol witness for DialogCallbacksProvider.getSpokenDialogCallback(context:) in conformance AppIntentsDialogProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96LL))();
}

uint64_t protocol witness for DialogCallbacksProvider.getDisplayedDialogCallback(context:) in conformance AppIntentsDialogProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104LL))();
}

uint64_t protocol witness for DialogCallbacksProvider.getDescriptionCallback(context:) in conformance AppIntentsDialogProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112LL))();
}

uint64_t AppIntentDialogCallback.getText(dialog:dialogProperties:environment:viewContext:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[3] = a3;
  void v4[4] = v3;
  __int128 v4[2] = a2;
  uint64_t v5 = type metadata accessor for Locale(0LL);
  v4[5] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[6] = v6;
  v4[7] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(AppIntentDialogCallback.getText(dialog:dialogProperties:environment:viewContext:), 0LL, 0LL);
}

uint64_t AppIntentDialogCallback.getText(dialog:dialogProperties:environment:viewContext:)()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v5 = *(void **)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  uint64_t v6 = v4[3];
  uint64_t v7 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v6);
  dispatch thunk of EnvironmentSnapshot.siriLocale.getter(v6, v7);
  uint64_t v8 = AppIntentDialogCallback.getText(dialogProperties:siriLocale:)(v5);
  uint64_t v10 = v9;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v8, v10);
}

uint64_t protocol witness for DialogCallback.getText(dialog:dialogProperties:environment:) in conformance AppIntentDialogCallback( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to DialogCallback.getText(dialog:dialogProperties:environment:)[1]);
  *(void *)(v5 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = protocol witness for DialogCallback.getText(dialog:dialogProperties:environment:) in conformance AppIntentDialogCallback;
  return DialogCallback.getText(dialog:dialogProperties:environment:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for DialogCallback.getText(dialog:dialogProperties:environment:viewContext:) in conformance AppIntentDialogCallback( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_task_alloc(dword_4F034);
  *(void *)(v3 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = protocol witness for DialogCallback.getText(dialog:dialogProperties:environment:viewContext:) in conformance AppIntentDialogCallback;
  return AppIntentDialogCallback.getText(dialog:dialogProperties:environment:viewContext:)((uint64_t)v6, a2, a3);
}

uint64_t protocol witness for DialogCallback.getText(dialog:dialogProperties:environment:viewContext:) in conformance AppIntentDialogCallback( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(*v3 + 16);
  uint64_t v7 = *v3;
  uint64_t v8 = swift_task_dealloc(v6);
  if (!v2)
  {
    uint64_t v8 = a1;
    uint64_t v9 = a2;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
}

void LNAction.getNonNilParameterSet()()
{
  id v14[2] = (uint64_t)&_swiftEmptySetSingleton;
  id v1 = [v0 parameters];
  uint64_t v2 = OUTLINED_FUNCTION_55_1( (uint64_t)v1,  &lazy cache variable for type metadata for LNProperty,  &OBJC_CLASS___LNProperty_ptr);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if (!((unint64_t)v3 >> 62))
  {
    uint64_t v4 = *(void *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFF8LL));
    if (v4) {
      goto LABEL_3;
    }
LABEL_17:
    OUTLINED_FUNCTION_8();
    return;
  }

  if (v3 < 0) {
    uint64_t v13 = v3;
  }
  else {
    uint64_t v13 = v3 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v3);
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v13);
  OUTLINED_FUNCTION_8();
  if (!v4) {
    goto LABEL_17;
  }
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
  }

  else
  {
    for (uint64_t i = 0LL; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001LL) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
      }
      else {
        id v6 = *(id *)(v3 + 8 * i + 32);
      }
      uint64_t v7 = v6;
      id v8 = [v6 value];

      if (v8)
      {
        id v9 = [v7 identifier];
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        uint64_t v12 = v11;

        specialized Set._Variant.insert(_:)(v14, v10, v12);
        swift_bridgeObjectRelease(v14[1]);
      }

      else
      {
      }
    }

    OUTLINED_FUNCTION_8();
  }

uint64_t outlined release of SuggestionAppIntent?(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type AppIntentDialogCallback and conformance AppIntentDialogCallback()
{
  unint64_t result = lazy protocol witness table cache variable for type AppIntentDialogCallback and conformance AppIntentDialogCallback;
  if (!lazy protocol witness table cache variable for type AppIntentDialogCallback and conformance AppIntentDialogCallback)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AppIntentDialogCallback,  &type metadata for AppIntentDialogCallback);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AppIntentDialogCallback and conformance AppIntentDialogCallback);
  }

  return result;
}

uint64_t sub_2A884()
{
  uint64_t v1 = OUTLINED_FUNCTION_7_7();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t outlined init with copy of AppIntentDialogCallback(uint64_t a1, uint64_t a2)
{
  return a2;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
  uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
  uint64_t v23 = v4;
  uint64_t v5 = __CocoaSet.makeIterator()(a1);
  uint64_t v6 = __CocoaSet.Iterator.next()();
  if (!v6)
  {
LABEL_16:
    swift_release(v5);
    return v4;
  }

  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for LNActionParameterMetadata( 0LL,  (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol,  &OBJC_CLASS___LNSystemProtocol_ptr);
  while (1)
  {
    uint64_t v21 = v7;
    swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
    uint64_t v4 = v23;
    unint64_t v9 = *(void *)(v23 + 16);
    if (*(void *)(v23 + 24) <= v9)
    {
      specialized _NativeSet.resize(capacity:)(v9 + 1);
      uint64_t v4 = v23;
    }

    uint64_t v10 = v22;
    Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
    uint64_t v12 = v4 + 56;
    uint64_t v13 = -1LL << *(_BYTE *)(v4 + 32);
    unint64_t v14 = result & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1LL << v14) & ~*(void *)(v4 + 56 + 8 * (v14 >> 6))) == 0) {
      break;
    }
    unint64_t v16 = __clz(__rbit64((-1LL << v14) & ~*(void *)(v4 + 56 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_15:
    *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    *(void *)(*(void *)(v4 + 48) + 8 * voutlined destroy of AppIntentDialogCallback(v0 + 16) = v10;
    ++*(void *)(v4 + 16);
    uint64_t v7 = __CocoaSet.Iterator.next()();
    if (!v7) {
      goto LABEL_16;
    }
  }

  char v17 = 0;
  unint64_t v18 = (unint64_t)(63 - v13) >> 6;
  while (++v15 != v18 || (v17 & 1) == 0)
  {
    BOOL v19 = v15 == v18;
    if (v15 == v18) {
      unint64_t v15 = 0LL;
    }
    v17 |= v19;
    uint64_t v20 = *(void *)(v12 + 8 * v15);
    if (v20 != -1)
    {
      unint64_t v16 = __clz(__rbit64(~v20)) + (v15 << 6);
      goto LABEL_15;
    }
  }

  __break(1u);
  return result;
}

void specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = (void *)*v1;
  if (*(void *)(*v1 + 24LL) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24LL);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LinkSuggestedActionsRequest>);
  uint64_t v5 = (void *)static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  if (v3[2])
  {
    OUTLINED_FUNCTION_6_5();
    uint64_t v35 = v3 + 7;
    OUTLINED_FUNCTION_15_3();
    unint64_t v8 = v7 & v6;
    int64_t v34 = (unint64_t)(v9 + 63) >> 6;
    swift_retain(v3);
    int64_t v10 = 0LL;
    uint64_t v11 = 24LL;
    if (!v8) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    for (unint64_t i = v12 | (v10 << 6); ; unint64_t i = v18 + (v10 << 6))
    {
      BOOL v19 = v3;
      uint64_t v20 = v3[6] + i * v11;
      uint64_t v21 = *(void *)v20;
      uint64_t v22 = *(void *)(v20 + 8);
      char v23 = *(_BYTE *)(v20 + 16);
      char v24 = *(_BYTE *)(v20 + 17);
      Hasher.init(_seed:)(v36, v5[5]);
      swift_bridgeObjectRetain(v22);
      String.hash(into:)(v36, v21, v22);
      OUTLINED_FUNCTION_60();
      Hasher._finalize()();
      OUTLINED_FUNCTION_2_7();
      if (v25)
      {
        OUTLINED_FUNCTION_11_2();
        while (++v28 != v29 || (v27 & 1) == 0)
        {
          BOOL v30 = v28 == v29;
          if (v28 == v29) {
            uint64_t v28 = 0LL;
          }
          v27 |= v30;
          if (v5[v28 + 7] != -1LL)
          {
            OUTLINED_FUNCTION_10_2();
            goto LABEL_30;
          }
        }

        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return;
      }

      OUTLINED_FUNCTION_12_2();
LABEL_30:
      OUTLINED_FUNCTION_1_8(v26);
      uint64_t v11 = 24LL;
      uint64_t v32 = v5[6] + 24 * v31;
      *(void *)uint64_t v32 = v21;
      *(void *)(v32 + 8) = v22;
      *(_BYTE *)(v32 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v23;
      *(_BYTE *)(v32 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 7) = v24;
      ++v5[2];
      uint64_t v3 = v19;
      if (v8) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1LL)) {
        goto LABEL_38;
      }
      if (v14 >= v34) {
        goto LABEL_32;
      }
      ++v10;
      if (!v35[v14])
      {
        int64_t v10 = v14 + 1;
        if (v14 + 1 >= v34) {
          goto LABEL_32;
        }
        if (!v35[v10])
        {
          int64_t v10 = v14 + 2;
          if (v14 + 2 >= v34) {
            goto LABEL_32;
          }
          if (!v35[v10])
          {
            int64_t v15 = v14 + 3;
            if (v15 >= v34)
            {
LABEL_32:
              OUTLINED_FUNCTION_13_2();
              OUTLINED_FUNCTION_6_5();
              if (v33 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0LL, (unint64_t)(v33 + 63) >> 6, v35);
              }
              else {
                *uint64_t v35 = -1LL << v33;
              }
              v3[2] = 0LL;
              break;
            }

            if (!v35[v15])
            {
              while (1)
              {
                int64_t v10 = v15 + 1;
                if (__OFADD__(v15, 1LL)) {
                  goto LABEL_39;
                }
                if (v10 >= v34) {
                  goto LABEL_32;
                }
                ++v15;
                if (v35[v10]) {
                  goto LABEL_20;
                }
              }
            }

            int64_t v10 = v15;
          }
        }
      }

Swift::Int specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v32 = v2;
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    if (!v9) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      BOOL v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v20, v21);
      Swift::Int result = Hasher._finalize()();
      uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          BOOL v28 = v24 == v27;
          if (v24 == v27) {
            unint64_t v24 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v11 + 8 * v24);
          if (v29 != -1)
          {
            unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
      BOOL v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
      *BOOL v30 = v20;
      v30[1] = v21;
      ++*(void *)(v6 + 16);
      if (v9) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_41;
      }
      if (v16 >= v10) {
        goto LABEL_35;
      }
      unint64_t v17 = v33[v16];
      ++v13;
      if (!v17)
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v10) {
          goto LABEL_35;
        }
        unint64_t v17 = v33[v13];
        if (!v17)
        {
          int64_t v13 = v16 + 2;
          if (v16 + 2 >= v10) {
            goto LABEL_35;
          }
          unint64_t v17 = v33[v13];
          if (!v17)
          {
            int64_t v18 = v16 + 3;
            if (v18 >= v10)
            {
LABEL_35:
              swift_release(v3);
              uint64_t v2 = v32;
              uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
              if (v31 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0LL, (unint64_t)(v31 + 63) >> 6, v33);
              }
              else {
                void *v33 = -1LL << v31;
              }
              *(void *)(v3 + outlined destroy of AppIntentDialogCallback(v0 + 16) = 0LL;
              break;
            }

            unint64_t v17 = v33[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v13 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_42;
                }
                if (v13 >= v10) {
                  goto LABEL_35;
                }
                unint64_t v17 = v33[v13];
                ++v18;
                if (v17) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v13 = v18;
          }
        }
      }

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    BOOL v30 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      unint64_t v9 = ~(-1LL << v7);
    }
    else {
      unint64_t v9 = -1LL;
    }
    int64_t v10 = v9 & *(void *)(v3 + 56);
    uint64_t v11 = (unint64_t)(v7 + 63) >> 6;
    unint64_t v12 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    unint64_t v14 = 0LL;
    if (!v10) {
      goto LABEL_10;
    }
LABEL_9:
    int64_t v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
    {
      uint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * i);
      Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) == 0)
      {
        unint64_t v25 = 0;
        char v26 = (unint64_t)(63 - v21) >> 6;
        while (++v23 != v26 || (v25 & 1) == 0)
        {
          unint64_t v27 = v23 == v26;
          if (v23 == v26) {
            unint64_t v23 = 0LL;
          }
          v25 |= v27;
          BOOL v28 = *(void *)(v12 + 8 * v23);
          if (v28 != -1)
          {
            unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v24 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
      *(void *)(*(void *)(v6 + 48) + 8 * v24) = v20;
      ++*(void *)(v6 + 16);
      if (v10) {
        goto LABEL_9;
      }
LABEL_10:
      unint64_t v17 = v14 + 1;
      if (__OFADD__(v14, 1LL)) {
        goto LABEL_41;
      }
      if (v17 >= v11) {
        goto LABEL_35;
      }
      int64_t v18 = v8[v17];
      ++v14;
      if (!v18)
      {
        unint64_t v14 = v17 + 1;
        if (v17 + 1 >= v11) {
          goto LABEL_35;
        }
        int64_t v18 = v8[v14];
        if (!v18)
        {
          unint64_t v14 = v17 + 2;
          if (v17 + 2 >= v11) {
            goto LABEL_35;
          }
          int64_t v18 = v8[v14];
          if (!v18)
          {
            BOOL v19 = v17 + 3;
            if (v19 >= v11)
            {
LABEL_35:
              swift_release(v3);
              uint64_t v2 = v30;
              uint64_t v29 = 1LL << *(_BYTE *)(v3 + 32);
              if (v29 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)( 0LL,  (unint64_t)(v29 + 63) >> 6,  (void *)(v3 + 56));
              }
              else {
                *uint64_t v8 = -1LL << v29;
              }
              *(void *)(v3 + outlined destroy of AppIntentDialogCallback(v0 + 16) = 0LL;
              break;
            }

            int64_t v18 = v8[v19];
            if (!v18)
            {
              while (1)
              {
                unint64_t v14 = v19 + 1;
                if (__OFADD__(v19, 1LL)) {
                  goto LABEL_42;
                }
                if (v14 >= v11) {
                  goto LABEL_35;
                }
                int64_t v18 = v8[v14];
                ++v19;
                if (v18) {
                  goto LABEL_23;
                }
              }
            }

            unint64_t v14 = v19;
          }
        }
      }

LABEL_23:
      unint64_t v9 = (v17 - 1) & v17;
    }
  }

  Swift::Int result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

      int64_t v10 = (v18 - 1) & v18;
    }
  }

  Swift::Int result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

    int64_t v10 = (v17 - 1) & v17;
  }

  int64_t v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_35:
    Swift::Int result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_37;
  }

  unint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
    int64_t v13 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    int64_t v13 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

    int64_t v10 = (v18 - 1) & v18;
  }

  BOOL v19 = v17 + 3;
  if (v19 >= v11)
  {
LABEL_35:
    Swift::Int result = swift_release_n(v3, 2LL);
    uint64_t v2 = v30;
    goto LABEL_37;
  }

  int64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    unint64_t v14 = v19;
    goto LABEL_23;
  }

  while (1)
  {
    unint64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_35;
    }
    int64_t v18 = *(void *)(v8 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40));
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

void specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LinkSuggestedActionsRequest>);
  uint64_t v2 = (void *)*v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  if (!v2[2])
  {
LABEL_28:
    OUTLINED_FUNCTION_13_2();
    *uint64_t v1 = v3;
    return;
  }

  OUTLINED_FUNCTION_6_5();
  uint64_t v5 = v2 + 7;
  unint64_t v7 = (unint64_t)(v6 + 63) >> 6;
  if ((void *)v3 != v2 || v4 >= &v2[v7 + 7]) {
    memmove(v4, v2 + 7, 8 * v7);
  }
  int64_t v9 = 0LL;
  *(void *)(v3 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v2[2];
  OUTLINED_FUNCTION_6_5();
  uint64_t v11 = v2[7];
  uint64_t v12 = -1LL;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = v21 + (v9 << 6))
  {
    uint64_t v22 = 3 * i;
    uint64_t v23 = v2[6] + 8 * v22;
    uint64_t v25 = *(void *)v23;
    uint64_t v24 = *(void *)(v23 + 8);
    char v26 = *(_BYTE *)(v23 + 16);
    LOBYTE(v23) = *(_BYTE *)(v23 + 17);
    uint64_t v27 = *(void *)(v3 + 48) + 8 * v22;
    *(void *)uint64_t v27 = v25;
    *(void *)(v27 + 8) = v24;
    *(_BYTE *)(v27 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v26;
    *(_BYTE *)(v27 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 7) = v23;
    swift_bridgeObjectRetain(v24);
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    ++v9;
    if (!v5[v17])
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      if (!v5[v9])
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        if (!v5[v9]) {
          break;
        }
      }
    }

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  Swift::Int v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + outlined destroy of AppIntentDialogCallback(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1LL;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    *uint64_t v22 = *v20;
    v22[1] = v21;
    swift_bridgeObjectRetain(v21);
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    int64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      int64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        int64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }

LABEL_30:
  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

id specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + outlined destroy of AppIntentDialogCallback(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1LL;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    *(void *)(*(void *)(v4 + 48) + 8 * i) = v20;
    id result = v20;
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }

void specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24LL) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24LL);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LinkSuggestedActionsRequest>);
  uint64_t v5 = (void *)static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  if (!*(void *)(v3 + 16))
  {
    swift_release(v3);
LABEL_34:
    *uint64_t v2 = v5;
    OUTLINED_FUNCTION_0_8();
    return;
  }

  OUTLINED_FUNCTION_6_5();
  uint64_t v32 = v3 + 56;
  OUTLINED_FUNCTION_15_3();
  unint64_t v8 = v7 & v6;
  int64_t v33 = (unint64_t)(v9 + 63) >> 6;
  swift_retain(v3);
  int64_t v10 = 0LL;
  uint64_t v11 = 24LL;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v10 << 6); ; unint64_t i = v18 + (v10 << 6))
  {
    uint64_t v19 = *(void *)(v3 + 48) + i * v11;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    char v22 = *(_BYTE *)(v19 + 16);
    char v23 = *(_BYTE *)(v19 + 17);
    Hasher.init(_seed:)(v34, v5[5]);
    swift_bridgeObjectRetain_n(v21, 2LL);
    String.hash(into:)(v34, v20, v21);
    swift_bridgeObjectRelease(v21);
    Hasher._finalize()();
    OUTLINED_FUNCTION_2_7();
    if (v24)
    {
      OUTLINED_FUNCTION_11_2();
      while (++v27 != v28 || (v26 & 1) == 0)
      {
        BOOL v29 = v27 == v28;
        if (v27 == v28) {
          uint64_t v27 = 0LL;
        }
        v26 |= v29;
        if (v5[v27 + 7] != -1LL)
        {
          OUTLINED_FUNCTION_10_2();
          goto LABEL_30;
        }
      }

      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }

    OUTLINED_FUNCTION_12_2();
LABEL_30:
    OUTLINED_FUNCTION_1_8(v25);
    uint64_t v11 = 24LL;
    uint64_t v31 = v5[6] + 24 * v30;
    *(void *)uint64_t v31 = v20;
    *(void *)(v31 + 8) = v21;
    *(_BYTE *)(v31 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v22;
    *(_BYTE *)(v31 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 7) = v23;
    ++v5[2];
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      goto LABEL_36;
    }
    if (v14 >= v33) {
      goto LABEL_32;
    }
    ++v10;
    if (!*(void *)(v32 + 8 * v14))
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v33) {
        goto LABEL_32;
      }
      if (!*(void *)(v32 + 8 * v10))
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v33) {
          goto LABEL_32;
        }
        if (!*(void *)(v32 + 8 * v10)) {
          break;
        }
      }
    }

Swift::Int specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  if (!v10) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    uint64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v21);
    String.hash(into:)(v33, v20, v21);
    Swift::Int result = Hasher._finalize()();
    uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v24);
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    uint64_t v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
    *uint64_t v30 = v20;
    v30[1] = v21;
    ++*(void *)(v6 + 16);
    if (v10) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_39;
    }
    if (v16 >= v32) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v32) {
        goto LABEL_35;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v16 + 2;
        if (v16 + 2 >= v32) {
          goto LABEL_35;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v13);
        if (!v17) {
          break;
        }
      }
    }

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::Int v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<LNSystemProtocol>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v30 = v2;
  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v11 = (unint64_t)(v7 + 63) >> 6;
  unint64_t v12 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  unint64_t v14 = 0LL;
  if (!v10) {
    goto LABEL_10;
  }
LABEL_9:
  int64_t v15 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    uint64_t v20 = *(void *)(v6 + 40);
    uint64_t v21 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    Swift::Int result = NSObject._rawHashValue(seed:)(v20);
    uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v24);
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    *(void *)(*(void *)(v6 + 48) + 8 * v2__swift_destroy_boxed_opaque_existential_1(v0 + 5) = v21;
    ++*(void *)(v6 + 16);
    if (v10) {
      goto LABEL_9;
    }
LABEL_10:
    unint64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      goto LABEL_39;
    }
    if (v17 >= v11) {
      goto LABEL_35;
    }
    int64_t v18 = *(void *)(v8 + 8 * v17);
    ++v14;
    if (!v18)
    {
      unint64_t v14 = v17 + 1;
      if (v17 + 1 >= v11) {
        goto LABEL_35;
      }
      int64_t v18 = *(void *)(v8 + 8 * v14);
      if (!v18)
      {
        unint64_t v14 = v17 + 2;
        if (v17 + 2 >= v11) {
          goto LABEL_35;
        }
        int64_t v18 = *(void *)(v8 + 8 * v14);
        if (!v18) {
          break;
        }
      }
    }

LABEL_40:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    swift_bridgeObjectRelease(v32);
    uint64_t v6 = v49;
    p_name = v28;
LABEL_41:
    a3 = v47 + 1;
    if (v47 + 1 != a2) {
      continue;
    }
    break;
  }

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v26, *(void *)(*v3 + 40LL));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v26, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  OUTLINED_FUNCTION_4_5();
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = *(void *)(v7 + 48);
    int64_t v13 = (uint64_t *)(v12 + 16 * v10);
    uint64_t v14 = v13[1];
    BOOL v15 = *v13 == a2 && v14 == a3;
    if (v15 || (OUTLINED_FUNCTION_12(*v13, v14) & 1) != 0)
    {
LABEL_7:
      OUTLINED_FUNCTION_77_0();
      OUTLINED_FUNCTION_60();
      int64_t v16 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v17 = v16[1];
      *a1 = *v16;
      a1[1] = v17;
      swift_bridgeObjectRetain(v17);
      return 0LL;
    }

    uint64_t v19 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v19;
      OUTLINED_FUNCTION_4_5();
      if ((v20 & 1) == 0) {
        break;
      }
      uint64_t v21 = (uint64_t *)(v12 + 16 * v10);
      uint64_t v22 = v21[1];
      BOOL v23 = *v21 == a2 && v22 == a3;
      if (v23 || (OUTLINED_FUNCTION_12(*v21, v22) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  OUTLINED_FUNCTION_60();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  OUTLINED_FUNCTION_21_4();
  OUTLINED_FUNCTION_44_3();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v25 = *v3;
  *uint64_t v3 = v26[0];
  swift_bridgeObjectRelease(v25);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t type metadata accessor for AppIntentsDialogProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC25SiriLinkSuggestionsPlugin24AppIntentsDialogProvider);
}

uint64_t initializeWithCopy for AppIntentDialogCallback(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

void *assignWithCopy for AppIntentDialogCallback(void *a1, void *a2)
{
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AppIntentDialogCallback(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v4;
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppIntentDialogCallback(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppIntentDialogCallback(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AppIntentDialogCallback()
{
  return &type metadata for AppIntentDialogCallback;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, void *a2)
{
  __int128 v4 = v2;
  uint64_t v7 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v7 < 0) {
      uint64_t v8 = *v2;
    }
    else {
      uint64_t v8 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_44_3();
    id v9 = a2;
    uint64_t v10 = __CocoaSet.member(for:)();

    if (v10)
    {
      OUTLINED_FUNCTION_77_0();

      uint64_t v36 = v10;
      uint64_t v12 = OUTLINED_FUNCTION_55_1( v11,  (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol,  &OBJC_CLASS___LNSystemProtocol_ptr);
      swift_unknownObjectRetain(v10);
      swift_dynamicCast(&v37, &v36, (char *)&type metadata for Swift.AnyObject + 8, v12, 7LL);
      *a1 = v37;
      swift_unknownObjectRelease(v10);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v8);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v28 = specialized _NativeSet.init(_:capacity:)(v8, result + 1);
    Swift::Int v37 = v28;
    unint64_t v29 = *(void *)(v28 + 16);
    if (*(void *)(v28 + 24) <= v29)
    {
      uint64_t v34 = v29 + 1;
      id v35 = v9;
      specialized _NativeSet.resize(capacity:)(v34);
      uint64_t v30 = v37;
    }

    else
    {
      uint64_t v30 = v28;
      id v31 = v9;
    }

    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v9, v30);
    uint64_t v33 = *v4;
    *__int128 v4 = v30;
  }

  else
  {
    Swift::Int v13 = *(void *)(v7 + 40);
    OUTLINED_FUNCTION_44_3();
    Swift::Int v14 = NSObject._rawHashValue(seed:)(v13);
    uint64_t v15 = -1LL << *(_BYTE *)(v7 + 32);
    unint64_t v16 = v14 & ~v15;
    OUTLINED_FUNCTION_11_5();
    if ((v18 & 1) != 0)
    {
      OUTLINED_FUNCTION_55_1( v17,  (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol,  &OBJC_CLASS___LNSystemProtocol_ptr);
      id v19 = OUTLINED_FUNCTION_9_7();
      char v20 = OUTLINED_FUNCTION_8_5((uint64_t)v19);

      if ((v20 & 1) != 0)
      {
LABEL_12:

        OUTLINED_FUNCTION_77_0();
        uint64_t v25 = *(void **)(*(void *)(*v4 + 48) + 8 * v16);
        *a1 = (Swift::Int)v25;
        id v26 = v25;
        return 0LL;
      }

      uint64_t v21 = ~v15;
      while (1)
      {
        unint64_t v16 = (v16 + 1) & v21;
        OUTLINED_FUNCTION_11_5();
        if ((v22 & 1) == 0) {
          break;
        }
        id v23 = OUTLINED_FUNCTION_9_7();
        char v24 = OUTLINED_FUNCTION_8_5((uint64_t)v23);

        if ((v24 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    OUTLINED_FUNCTION_77_0();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    OUTLINED_FUNCTION_21_4();
    id v9 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    uint64_t v33 = *v4;
    *__int128 v4 = v37;
  }

  swift_bridgeObjectRelease(v33);
  *a1 = (Swift::Int)v9;
  return 1LL;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v11);
  }

  else
  {
    if (v10 > v9)
    {
      specialized _NativeSet.copy()();
      goto LABEL_22;
    }

    specialized _NativeSet.copyAndResize(capacity:)(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v29, *(void *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  Swift::Int v13 = Hasher._finalize()();
  uint64_t v14 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  uint64_t v15 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v16 = *(void *)(v12 + 48);
    uint64_t v17 = (void *)(v16 + 16 * a3);
    uint64_t v18 = v17[1];
    BOOL v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(void *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v21 = (void *)(v16 + 16 * a3);
        uint64_t v22 = v21[1];
        BOOL v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0LL) & 1) != 0) {
          goto LABEL_21;
        }
      }
    }
  }

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  __int128 v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v9);
  }

  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }

    specialized _NativeSet.copyAndResize(capacity:)(v9);
  }

  uint64_t v10 = *v3;
  Swift::Int v11 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v12 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v13 = type metadata accessor for LNActionParameterMetadata( 0LL,  (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol,  &OBJC_CLASS___LNSystemProtocol_ptr);
    id v14 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
    char v15 = static NSObject.== infix(_:_:)(v14, a1);

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }

    else
    {
      uint64_t v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
        char v18 = static NSObject.== infix(_:_:)(v17, a1);

        if ((v18 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

void OUTLINED_FUNCTION_1_8(unint64_t a1@<X8>)
{
  *(void *)(v1 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << a1;
}

  ;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_7_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_5(uint64_t a1)
{
  return static NSObject.== infix(_:_:)(a1, v1);
}

id OUTLINED_FUNCTION_9_7()
{
  return *(id *)(*(void *)(v0 + 48) + 8 * v1);
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_21_4()
{
  *uint64_t v0 = 0x8000000000000000LL;
}

void *specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v22))
  {
    unint64_t v24 = v5 & 0xC000000000000001LL;
    uint64_t v25 = _swiftEmptyArrayStorage;
    uint64_t v7 = 4LL;
    uint64_t v23 = v5;
    while (1)
    {
      if (v24)
      {
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5);
      }

      else
      {
        uint64_t v8 = *(void *)(v5 + 8 * v7);
        swift_retain(v8);
      }

      uint64_t v9 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      uint64_t v10 = OnRequestAppIntents.getAppIntentsForSignal(_:)(v8);
      if (v3)
      {
        swift_release(a2);
        swift_bridgeObjectRelease(v25);
        swift_bridgeObjectRelease(v5);
        return (void *)swift_release(v8);
      }

      uint64_t v12 = v10;
      uint64_t v13 = v11;
      swift_release(v8);
      if (v12)
      {
        id v14 = v25;
        if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v25[2] + 1LL,  1LL,  (uint64_t)v25);
          id v14 = v19;
        }

        char v15 = v14;
        unint64_t v16 = v14[2];
        uint64_t v25 = v15;
        unint64_t v17 = v15[3];
        if (v16 >= v17 >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v17 > 1,  v16 + 1,  1LL,  (uint64_t)v25);
          uint64_t v25 = v20;
        }

        __int128 v25[2] = v16 + 1;
        char v18 = &v25[2 * v16];
        void v18[4] = v12;
        v18[5] = v13;
        uint64_t v5 = v23;
      }

      ++v7;
      if (v9 == v6)
      {
        swift_release(a2);
        swift_bridgeObjectRelease(v5);
        return v25;
      }
    }

    __break(1u);
LABEL_19:
    if (v5 < 0) {
      uint64_t v22 = v5;
    }
    else {
      uint64_t v22 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
  }

  swift_release(a2);
  swift_bridgeObjectRelease(v5);
  return _swiftEmptyArrayStorage;
}

void OnRequestAppIntents.__allocating_init(linkClient:)(__int128 *a1)
{
  uint64_t v3 = swift_allocObject(v1, 56LL, 7LL);
  outlined init with take of LinkDialogIdProvider(a1, v3 + 16);
  OUTLINED_FUNCTION_3();
}

uint64_t OnRequestAppIntents.getAppIntentsForSignal(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CoreSignalTypes(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CoreSignalTypes?, CoreSignalTypes?));
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CoreSignalTypes?);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  char v15 = (char *)&v42 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  char v18 = (char *)&v42 - v17;
  uint64_t v43 = a1;
  Signal.signalType.getter(v44, v16);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SignalType);
  int v20 = swift_dynamicCast(v18, v44, v19, v2, 6LL);
  __swift_storeEnumTagSinglePayload((uint64_t)v18, v20 ^ 1u, 1LL, v2);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v15, enum case for CoreSignalTypes.app(_:), v2);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0LL, 1LL, v2);
  uint64_t v21 = (uint64_t)&v8[*(int *)(v6 + 48)];
  outlined init with copy of CoreSignalTypes?((uint64_t)v18, (uint64_t)v8);
  outlined init with copy of CoreSignalTypes?((uint64_t)v15, v21);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1LL, v2) != 1)
  {
    outlined init with copy of CoreSignalTypes?((uint64_t)v8, (uint64_t)v12);
    if (__swift_getEnumTagSinglePayload(v21, 1LL, v2) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v5, v21, v2);
      lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( &lazy protocol witness table cache variable for type CoreSignalTypes and conformance CoreSignalTypes,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for CoreSignalTypes,  (uint64_t)&protocol conformance descriptor for CoreSignalTypes);
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v5, v2, v22);
      unint64_t v24 = *(void (**)(char *, uint64_t))(v3 + 8);
      v24(v5, v2);
      outlined destroy of CoreSignalTypes?( (uint64_t)v15,  &demangling cache variable for type metadata for CoreSignalTypes?);
      v24(v12, v2);
      outlined destroy of CoreSignalTypes?( (uint64_t)v8,  &demangling cache variable for type metadata for CoreSignalTypes?);
      outlined destroy of CoreSignalTypes?( (uint64_t)v18,  &demangling cache variable for type metadata for CoreSignalTypes?);
      if ((v23 & 1) != 0) {
        goto LABEL_8;
      }
      return 0LL;
    }

    outlined destroy of CoreSignalTypes?( (uint64_t)v15,  &demangling cache variable for type metadata for CoreSignalTypes?);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
LABEL_6:
    outlined destroy of CoreSignalTypes?( (uint64_t)v8,  (uint64_t *)&demangling cache variable for type metadata for (CoreSignalTypes?, CoreSignalTypes?));
    outlined destroy of CoreSignalTypes?( (uint64_t)v18,  &demangling cache variable for type metadata for CoreSignalTypes?);
    return 0LL;
  }

  outlined destroy of CoreSignalTypes?((uint64_t)v15, &demangling cache variable for type metadata for CoreSignalTypes?);
  outlined destroy of CoreSignalTypes?((uint64_t)v8, &demangling cache variable for type metadata for CoreSignalTypes?);
  outlined destroy of CoreSignalTypes?((uint64_t)v18, &demangling cache variable for type metadata for CoreSignalTypes?);
LABEL_8:
  uint64_t v25 = v43;
  uint64_t v26 = Signal.signalValue.getter();
  unint64_t v28 = v27;
  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
  }
  uint64_t v29 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v29, (uint64_t)static Logger.appIntentsSuggestions);
  uint64_t v30 = swift_bridgeObjectRetain_n(v28, 2LL);
  id v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v34 = swift_slowAlloc(32LL, -1LL);
    v44[0] = v34;
    *(_DWORD *)uint64_t v33 = 136315138;
    uint64_t v25 = v43;
    swift_bridgeObjectRetain(v28);
    uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v33 + 4);
    swift_bridgeObjectRelease_n(v28, 3LL);
    _os_log_impl(&dword_0, v31, v32, "Getting app specific AppIntent suggestions for %s", v33, 0xCu);
    swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v33, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v28, 2LL);
  }

  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CandidateSuggestionConfigurator>);
  uint64_t v36 = swift_allocObject(v35, 72LL, 7LL);
  *(_OWORD *)(v36 + outlined destroy of AppIntentDialogCallback(v0 + 16) = xmmword_3C030;
  uint64_t v37 = type metadata accessor for AppIntentCandidateSuggestionConfigurator();
  uint64_t v38 = (void *)swift_allocObject(v37, 48LL, 7LL);
  v38[4] = 0xD000000000000013LL;
  v38[5] = 0x800000000003E690LL;
  v38[2] = v26;
  v38[3] = v28;
  *(void *)(v36 + outlined init with copy of LinkClient(v0 + 16, v0 + 56) = v37;
  lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( &lazy protocol witness table cache variable for type AppIntentCandidateSuggestionConfigurator and conformance AppIntentCandidateSuggestionConfigurator,  v39,  (uint64_t (*)(uint64_t))type metadata accessor for AppIntentCandidateSuggestionConfigurator,  (uint64_t)&protocol conformance descriptor for AppIntentCandidateSuggestionConfigurator);
  *(void *)(v36 + 64) = v40;
  *(void *)(v36 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v38;
  swift_retain(v25);
  return v25;
}

void *AppIntentCandidateSuggestionConfigurator.__allocating_init(appBundleId:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)swift_allocObject(v2, 48LL, 7LL);
  result[4] = 0xD000000000000013LL;
  result[5] = 0x800000000003E690LL;
  result[2] = a1;
  result[3] = a2;
  return result;
}

void *OnRequestAppIntents.getConfigurators(for:)(unint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  __swift_project_value_buffer(v4, (uint64_t)static Logger.appIntentsSuggestions);
  uint64_t v5 = swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_16_0(12LL);
    uint64_t v9 = OUTLINED_FUNCTION_16_0(32LL);
    v19[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v10 = type metadata accessor for Signal(0LL);
    swift_bridgeObjectRetain(a1);
    uint64_t v12 = Array.description.getter(v11, v10);
    unint64_t v14 = v13;
    swift_bridgeObjectRelease(a1);
    uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v8 + 4);
    OUTLINED_FUNCTION_5_6();
    unint64_t v15 = v14;
    uint64_t v2 = v1;
    swift_bridgeObjectRelease(v15);
    _os_log_impl(&dword_0, v6, v7, "Determining valid app intents for signals: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    OUTLINED_FUNCTION_3_0(v9);
    OUTLINED_FUNCTION_3_0((uint64_t)v8);
  }

  else
  {

    OUTLINED_FUNCTION_5_6();
  }

  swift_retain(v2);
  uint64_t v16 = specialized Sequence.compactMap<A>(_:)(a1, v2);
  return specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)v16);
}

void *protocol witness for ConfiguratorProvider.getConfigurators(for:) in conformance OnRequestAppIntents( unint64_t a1)
{
  return OnRequestAppIntents.getConfigurators(for:)(a1);
}

uint64_t AppIntentCandidateSuggestionConfigurator.suggestionId.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain(*(void *)(v0 + 40));
  return v1;
}

void *AppIntentCandidateSuggestionConfigurator.init(appBundleId:)(uint64_t a1, uint64_t a2)
{
  v2[4] = 0xD000000000000013LL;
  v2[5] = 0x800000000003E690LL;
  v2[2] = a1;
  v2[3] = a2;
  return v2;
}

uint64_t AppIntentCandidateSuggestionConfigurator.updateContext(context:signal:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for Party(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = OUTLINED_FUNCTION_2_0(v4);
  uint64_t v5 = type metadata accessor for IntentType(0LL);
  v2[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[8] = v6;
  void v2[9] = OUTLINED_FUNCTION_2_0(v6);
  return swift_task_switch(AppIntentCandidateSuggestionConfigurator.updateContext(context:signal:), 0LL, 0LL);
}

uint64_t AppIntentCandidateSuggestionConfigurator.updateContext(context:signal:)()
{
  if (one-time initialization token for appIntentsSuggestions != -1) {
    swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.appIntentsSuggestions);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)OUTLINED_FUNCTION_16_0(2LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "Updating app intent context", v5, 2u);
    OUTLINED_FUNCTION_3_0((uint64_t)v5);
  }

  uint64_t v7 = v0[8];
  uint64_t v6 = v0[9];
  uint64_t v8 = v0[7];
  uint64_t v9 = (uint64_t *)v0[2];
  uint64_t v10 = v0[3];

  uint64_t v11 = *v9;
  uint64_t v12 = v9[1];
  uint64_t ObjectType = swift_getObjectType(v11);
  uint64_t v14 = static AppIntentFilter.builder()();
  v0[10] = *(void *)(v10 + 16);
  v0[11] = *(void *)(v10 + 24);
  uint64_t v15 = dispatch thunk of AppIntentFilter.Builder.withAppId(_:)();
  uint64_t v16 = swift_release(v14);
  dispatch thunk of AppIntentFilter.Builder.build()(v16);
  swift_release(v15);
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v6, enum case for IntentType.appIntent(_:), v8);
  uint64_t v17 = (void *)swift_task_alloc(async function pointer to Context.setIntentType(_:)[1]);
  v0[12] = v17;
  *uint64_t v17 = v0;
  v17[1] = AppIntentCandidateSuggestionConfigurator.updateContext(context:signal:);
  return Context.setIntentType(_:)(v0[9], ObjectType, v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *(void *)(*(void *)v0 + 64LL);
  uint64_t v1 = *(void *)(*(void *)v0 + 72LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 56LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 96LL));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(AppIntentCandidateSuggestionConfigurator.updateContext(context:signal:), 0LL, 0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v1 = v0[6];
  uint64_t v2 = (uint64_t *)v0[2];
  uint64_t v3 = *v2;
  v0[13] = *v2;
  os_log_type_t v4 = v2[1];
  v0[14] = v4;
  uint64_t ObjectType = swift_getObjectType(v3);
  v0[15] = ObjectType;
  default argument 1 of Context.setAppId(_:party:)(v1);
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, *(void *)(*(void *)(v4 + 8) + 8LL));
  return swift_task_switch(AppIntentCandidateSuggestionConfigurator.updateContext(context:signal:), v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  os_log_type_t v4 = *(void *)(v0 + 32);
  Context.setAppId(_:party:)( *(void *)(v0 + 80),  *(void *)(v0 + 88),  v2,  *(void *)(v0 + 120),  *(void *)(v0 + 112));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t default argument 1 of Context.setAppId(_:party:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for Party.unknown(_:);
  uint64_t v3 = type metadata accessor for Party(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104LL))(a1, v2, v3);
}

uint64_t AppIntentCandidateSuggestionConfigurator.deinit()
{
  return v0;
}

uint64_t AppIntentCandidateSuggestionConfigurator.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t protocol witness for CandidateSuggestionConfigurator.suggestionId.getter in conformance AppIntentCandidateSuggestionConfigurator()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32LL);
  swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 40LL));
  return v1;
}

uint64_t protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance AppIntentCandidateSuggestionConfigurator( uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_4F124);
  *(void *)(v1 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance LinkSuggestionConfigurator;
  return AppIntentCandidateSuggestionConfigurator.updateContext(context:signal:)(a1);
}

uint64_t type metadata accessor for OnRequestAppIntents()
{
  return objc_opt_self(&OBJC_CLASS____TtC25SiriLinkSuggestionsPlugin19OnRequestAppIntents);
}

uint64_t type metadata accessor for AppIntentCandidateSuggestionConfigurator()
{
  return objc_opt_self(&OBJC_CLASS____TtC25SiriLinkSuggestionsPlugin40AppIntentCandidateSuggestionConfigurator);
}

uint64_t OUTLINED_FUNCTION_5_6()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t Logger.linkSuggestions.unsafeMutableAddressor()
{
  return Logger.linkSuggestions.unsafeMutableAddressor( &one-time initialization token for linkSuggestions,  (uint64_t)static Logger.linkSuggestions,  (uint64_t)one-time initialization function for linkSuggestions);
}

void *Logger.siriLinkFlowSubsystem.unsafeMutableAddressor()
{
  return &static Logger.siriLinkFlowSubsystem;
}

void *Logger.appIntentsSuggestionsCategory.unsafeMutableAddressor()
{
  return &static Logger.appIntentsSuggestionsCategory;
}

uint64_t Logger.appIntentsSuggestions.unsafeMutableAddressor()
{
  return Logger.linkSuggestions.unsafeMutableAddressor( &one-time initialization token for appIntentsSuggestions,  (uint64_t)static Logger.appIntentsSuggestions,  (uint64_t)one-time initialization function for appIntentsSuggestions);
}

uint64_t Logger.linkSuggestions.unsafeMutableAddressor(void *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v4 = OUTLINED_FUNCTION_45();
  return __swift_project_value_buffer(v4, a2);
}

unint64_t static Logger.siriLinkFlowSubsystem.getter()
{
  return OUTLINED_FUNCTION_6(27LL);
}

void *Logger.linkSuggestionsCategory.unsafeMutableAddressor()
{
  return &static Logger.linkSuggestionsCategory;
}

unint64_t static Logger.linkSuggestionsCategory.getter()
{
  return OUTLINED_FUNCTION_6(19LL);
}

void *Logger.autoshortcutsSuggestionsCategory.unsafeMutableAddressor()
{
  return &static Logger.autoshortcutsSuggestionsCategory;
}

unint64_t static Logger.autoshortcutsSuggestionsCategory.getter()
{
  return OUTLINED_FUNCTION_6(28LL);
}

unint64_t static Logger.appIntentsSuggestionsCategory.getter()
{
  return OUTLINED_FUNCTION_6(25LL);
}

uint64_t one-time initialization function for linkSuggestions(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_9(a1, static Logger.linkSuggestions, 19LL, 0x800000000003F5C0LL);
}

uint64_t static Logger.linkSuggestions.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.linkSuggestions.getter( &one-time initialization token for linkSuggestions,  (uint64_t)static Logger.linkSuggestions,  (uint64_t)one-time initialization function for linkSuggestions,  a1);
}

uint64_t one-time initialization function for autoshortcutsSuggestions(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_9(a1, static Logger.autoshortcutsSuggestions, 28LL, 0x800000000003F5E0LL);
}

uint64_t Logger.autoshortcutsSuggestions.unsafeMutableAddressor()
{
  return Logger.linkSuggestions.unsafeMutableAddressor( &one-time initialization token for autoshortcutsSuggestions,  (uint64_t)static Logger.autoshortcutsSuggestions,  (uint64_t)one-time initialization function for autoshortcutsSuggestions);
}

uint64_t static Logger.autoshortcutsSuggestions.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.linkSuggestions.getter( &one-time initialization token for autoshortcutsSuggestions,  (uint64_t)static Logger.autoshortcutsSuggestions,  (uint64_t)one-time initialization function for autoshortcutsSuggestions,  a1);
}

uint64_t static Logger.linkSuggestions.getter@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v6 = OUTLINED_FUNCTION_45();
  uint64_t v7 = __swift_project_value_buffer(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a4, v7, v6);
}

uint64_t one-time initialization function for appIntentsSuggestions(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_9(a1, static Logger.appIntentsSuggestions, 25LL, 0x800000000003ED00LL);
}

uint64_t one-time initialization function for linkSuggestions( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = OUTLINED_FUNCTION_45();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0xD00000000000001BLL, 0x800000000003ECE0LL, a3, a4);
}

uint64_t static Logger.appIntentsSuggestions.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.linkSuggestions.getter( &one-time initialization token for appIntentsSuggestions,  (uint64_t)static Logger.appIntentsSuggestions,  (uint64_t)one-time initialization function for appIntentsSuggestions,  a1);
}

ValueMetadata *type metadata accessor for Logger()
{
  return &type metadata for Logger;
}

uint64_t OUTLINED_FUNCTION_0_9(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return one-time initialization function for linkSuggestions(a1, a2, a3 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a4);
}

uint64_t ActionParameter.init(displayRepresentable:metaData:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = outlined init with take of SiriSuggestions.DisplayRepresentable?(a1, a3);
  *(void *)(a3 + 40) = a2;
  return result;
}

uint64_t outlined init with take of SiriSuggestions.DisplayRepresentable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriSuggestions.DisplayRepresentable?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t SuggestionAppIntent.init(appIntentAction:details:dialog:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  return result;
}

void SuggestionAppIntent.appIntentAction.getter()
{
}

void SuggestionAppIntent.details.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void **)(v0 + 40);
  swift_bridgeObjectRetain(v1);
  id v3 = v2;
  OUTLINED_FUNCTION_7();
}

uint64_t SuggestionAppIntent.dialog.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  OUTLINED_FUNCTION_26_1();
  return v1;
}

uint64_t static AppIntentDetails.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v8 = a1 == a4 && a2 == a5;
  if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0LL) & 1) == 0) {
    return 0LL;
  }
  type metadata accessor for NSObject();
  return static NSObject.== infix(_:_:)(a3, a6) & 1;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSObject);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }

  return result;
}

void AppIntentDetails.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  NSObject.hash(into:)(a1);
}

Swift::Int AppIntentDetails.hashValue.getter(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  NSObject.hash(into:)(v7);

  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AppIntentDetails( uint64_t *a1, uint64_t *a2)
{
  return static AppIntentDetails.__derived_struct_equals(_:_:)(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AppIntentDetails()
{
  return AppIntentDetails.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16));
}

void protocol witness for Hashable.hash(into:) in conformance AppIntentDetails(uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AppIntentDetails(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = (void *)v1[2];
  Hasher.init(_seed:)(v7, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v7, v2, v3);
  swift_bridgeObjectRelease(v3);
  id v5 = v4;
  NSObject.hash(into:)(v7);

  return Hasher._finalize()();
}

uint64_t ActionParameter.displayRepresentable.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SiriSuggestions.DisplayRepresentable?(v1, a1);
}

id ActionParameter.metaData.getter()
{
  return *(id *)(v0 + 40);
}

unint64_t lazy protocol witness table accessor for type AppIntentDetails and conformance AppIntentDetails()
{
  unint64_t result = lazy protocol witness table cache variable for type AppIntentDetails and conformance AppIntentDetails;
  if (!lazy protocol witness table cache variable for type AppIntentDetails and conformance AppIntentDetails)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AppIntentDetails,  &type metadata for AppIntentDetails);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AppIntentDetails and conformance AppIntentDetails);
  }

  return result;
}

uint64_t destroy for SuggestionAppIntent(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 56));
}

void *initializeWithCopy for SuggestionAppIntent(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v5 = a2[2];
  uint64_t v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  uint64_t v6 = a2[4];
  id v7 = (void *)a2[5];
  a1[4] = v6;
  a1[5] = v7;
  uint64_t v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  id v9 = v7;
  swift_bridgeObjectRetain(v8);
  return a1;
}

void *assignWithCopy for SuggestionAppIntent(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = (void *)a2[5];
  uint64_t v11 = (void *)a1[5];
  a1[5] = v10;
  id v12 = v10;

  a1[6] = a2[6];
  uint64_t v13 = a2[7];
  uint64_t v14 = a1[7];
  a1[7] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v3;
  return result;
}

void *assignWithTake for SuggestionAppIntent(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  a1[3] = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(a1[4]);
  uint64_t v5 = (void *)a1[5];
  *((_OWORD *)a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_OWORD *)(a2 + 32);

  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v7 = a1[7];
  a1[6] = *(void *)(a2 + 48);
  a1[7] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SuggestionAppIntent(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 64))
    {
      LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SuggestionAppIntent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + outlined init with copy of LinkClient(v0 + 16, v0 + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for SuggestionAppIntent()
{
}

void destroy for AppIntentDetails(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for AppIntentDetails(void *a1, void *a2)
{
  id v4 = v3;
  return v2;
}

void *assignWithCopy for AppIntentDetails(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = (void *)a2[2];
  uint64_t v7 = (void *)a1[2];
  a1[2] = v6;
  id v8 = v6;

  return a1;
}

void *assignWithTake for AppIntentDetails(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = (void *)a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);

  return a1;
}

void type metadata accessor for AppIntentDetails()
{
}

uint64_t initializeBufferWithCopyOfBuffer for AppIntentAction(void *a1, void *a2)
{
  return v2;
}

void type metadata accessor for AppIntentAction()
{
}

void destroy for ActionParameter(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1((void *)a1);
  }
}

uint64_t initializeWithCopy for ActionParameter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }

  else
  {
    __int128 v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v6;
    *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(void *)(a2 + 32);
  }

  uint64_t v7 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v7;
  id v8 = v7;
  return a1;
}

uint64_t assignWithCopy for ActionParameter(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }

LABEL_7:
    __int128 v5 = *a2;
    __int128 v6 = a2[1];
    *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v6;
    goto LABEL_8;
  }

  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1((void *)a1);
    goto LABEL_7;
  }

  __swift_assign_boxed_opaque_existential_1((void *)a1, a2);
LABEL_8:
  uint64_t v7 = (void *)*((void *)a2 + 5);
  id v8 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for ActionParameter(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1((void *)a1);
  }
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  __int128 v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;

  return a1;
}

uint64_t getEnumTagSinglePayload for ActionParameter(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 40);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionParameter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for ActionParameter()
{
}

uint64_t OUTLINED_FUNCTION_0_10(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  return swift_bridgeObjectRetain(v3);
}

uint64_t OUTLINED_FUNCTION_4_7(uint64_t a1)
{
  return String.hash(into:)(a1, v2, v1);
}

uint64_t LinkLoggingActionKeyMapper.map(suggestion:resolvedParams:)(uint64_t a1, uint64_t a2)
{
  if (!v12)
  {
    outlined destroy of Any?((uint64_t)&v11);
    goto LABEL_7;
  }

  if (!swift_dynamicCast( &v13,  &v11,  (char *)&type metadata for Any + 8,  &type metadata for LinkSuggestedAction,  6LL))
  {
LABEL_7:
    uint64_t v2 = 0LL;
    uint64_t v3 = 0LL;
    uint64_t v8 = 0LL;
    __int128 v4 = 0LL;
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    goto LABEL_8;
  }

  uint64_t v2 = v13;
  uint64_t v3 = v14;
  __int128 v4 = v16;
  uint64_t v5 = v17;
  uint64_t v6 = v18;
  uint64_t v7 = 256LL;
  if (!BYTE1(v15)) {
    uint64_t v7 = 0LL;
  }
  uint64_t v8 = v7 | v15;
LABEL_8:
  uint64_t v13 = v2;
  uint64_t v14 = v3;
  uint64_t v15 = v8;
  uint64_t v16 = v4;
  uint64_t v17 = v5;
  uint64_t v18 = v6;
  uint64_t v9 = LinkLoggingActionKeyMapper.mappedParamaters(for:)(&v13);
  Action.init(actionId:params:)(0xD000000000000012LL, 0x800000000003F600LL, v9);
  return outlined consume of LinkSuggestedAction?(v2, v3, v8, v4, v5, v6);
}

uint64_t LinkLoggingActionKeyMapper.mappedParamaters(for:)(void *a1)
{
  if (!*((void *)&v12 + 1)) {
    return Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  }
  __int128 v15 = v12;
  uint64_t v2 = v14;
  uint64_t v16 = v13;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  uint64_t inited = swift_initStackObject(v3, &v11);
  *(_OWORD *)(inited + outlined destroy of AppIntentDialogCallback(v0 + 16) = xmmword_3D460;
  *(void *)(inited + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0xD000000000000010LL;
  *(void *)(inited + 40) = 0x800000000003EDD0LL;
  __int16 v18 = v16;
  __int128 v17 = v15;
  *(_OWORD *)(inited + 48) = v15;
  *(void *)(inited + 64) = 0xD000000000000010LL;
  *(void *)(inited + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0x800000000003F660LL;
  outlined retain of LinkSuggestedAction?( a1,  (void (*)(void, void, void, void, void, void))outlined copy of LinkSuggestedAction?);
  outlined retain of LinkSuggestedActionsRequest((uint64_t)&v17);
  id v5 = [v2 identifier];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  *(void *)(inited + 80) = v6;
  *(void *)(inited + 88) = v8;
  uint64_t v9 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  outlined retain of LinkSuggestedAction?( a1,  (void (*)(void, void, void, void, void, void))outlined consume of LinkSuggestedAction?);
  return v9;
}

uint64_t outlined consume of LinkSuggestedAction?( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);

    return swift_bridgeObjectRelease(a6);
  }

  return result;
}

uint64_t protocol witness for ActionKeyMapper.map(suggestion:resolvedParams:) in conformance LinkLoggingActionKeyMapper( uint64_t a1, uint64_t a2)
{
  return LinkLoggingActionKeyMapper.map(suggestion:resolvedParams:)(a1, a2);
}

uint64_t type metadata accessor for LinkLoggingActionKeyMapper()
{
  return objc_opt_self(&OBJC_CLASS____TtC25SiriLinkSuggestionsPlugin26LinkLoggingActionKeyMapper);
}

uint64_t outlined init with take of LinkSuggestedAction?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LinkSuggestedAction?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of LinkSuggestedAction?( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    id v9 = a4;
    id v10 = a5;
    return swift_bridgeObjectRetain(a6);
  }

  return result;
}

void *outlined retain of LinkSuggestedAction?( void *a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

void LinkViewProvider.__allocating_init(dialogIdProvider:)(__int128 *a1)
{
  uint64_t v3 = OUTLINED_FUNCTION_1(v1, 64LL);
  uint64_t v4 = OUTLINED_FUNCTION_16_4();
  *(void *)(v3 + outlined init with copy of LinkClient(v0 + 16, v0 + 56) = OUTLINED_FUNCTION_1(v4, 16LL);
  outlined init with take of LinkDialogIdProvider(a1, v3 + 16);
  OUTLINED_FUNCTION_3();
}

void LinkViewProvider.init(dialogIdProvider:)(__int128 *a1)
{
  uint64_t v3 = OUTLINED_FUNCTION_16_4();
  *(void *)(v1 + outlined init with copy of LinkClient(v0 + 16, v0 + 56) = OUTLINED_FUNCTION_1(v3, 16LL);
  outlined init with take of LinkDialogIdProvider(a1, v1 + 16);
  OUTLINED_FUNCTION_3();
}

uint64_t LinkViewProvider.getInvocationActionProvider(context:)@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 56);
  a1[3] = OUTLINED_FUNCTION_16_4();
  lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( &lazy protocol witness table cache variable for type LinkInvocationActionProvider and conformance LinkInvocationActionProvider,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for LinkInvocationActionProvider,  (uint64_t)&protocol conformance descriptor for LinkInvocationActionProvider);
  a1[4] = v4;
  *a1 = v3;
  return swift_retain(v3);
}

uint64_t CATLinkDialogCallback.__allocating_init(dialogIdProvider:dialogType:)(__int128 *a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = OUTLINED_FUNCTION_1(v2, 57LL);
  outlined init with take of LinkDialogIdProvider(a1, v5 + 16);
  *(_BYTE *)(v5 + outlined init with copy of LinkClient(v0 + 16, v0 + 56) = v4;
  return v5;
}

uint64_t type metadata accessor for CATLinkDialogCallback()
{
  return objc_opt_self(&OBJC_CLASS____TtC25SiriLinkSuggestionsPlugin21CATLinkDialogCallback);
}

void LinkViewProvider.getSpokenDialogCallback(context:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CATLinkDialogCallback();
  uint64_t v4 = OUTLINED_FUNCTION_1(v3, 57LL);
  OUTLINED_FUNCTION_7_8(v4, v5, v6, v7, v8, v9, v10, v11, v14, v15);
  *(_BYTE *)(v2 + outlined init with copy of LinkClient(v0 + 16, v0 + 56) = 0;
  v1[3] = v3;
  lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( &lazy protocol witness table cache variable for type CATLinkDialogCallback and conformance CATLinkDialogCallback,  v12,  (uint64_t (*)(uint64_t))type metadata accessor for CATLinkDialogCallback,  (uint64_t)&protocol conformance descriptor for CATLinkDialogCallback);
  v1[4] = v13;
  *uint64_t v1 = v2;
  OUTLINED_FUNCTION_15();
}

void LinkViewProvider.getDescriptionCallback(context:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CATLinkDialogCallback();
  uint64_t v4 = OUTLINED_FUNCTION_1(v3, 57LL);
  OUTLINED_FUNCTION_7_8(v4, v5, v6, v7, v8, v9, v10, v11, v14, v15);
  *(_BYTE *)(v2 + outlined init with copy of LinkClient(v0 + 16, v0 + 56) = 1;
  v1[3] = v3;
  lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( &lazy protocol witness table cache variable for type CATLinkDialogCallback and conformance CATLinkDialogCallback,  v12,  (uint64_t (*)(uint64_t))type metadata accessor for CATLinkDialogCallback,  (uint64_t)&protocol conformance descriptor for CATLinkDialogCallback);
  v1[4] = v13;
  *uint64_t v1 = v2;
  OUTLINED_FUNCTION_15();
}

void *LinkViewProvider.getAssets(context:suggestion:)(uint64_t a1, void *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image?);
  __chkstk_darwin(v3);
  uint64_t v5 = (uint64_t *)((char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v6);
  uint64_t v8 = dispatch thunk of CandidateSuggestion.params.getter(v6, v7);
  OUTLINED_FUNCTION_11_6(0x800000000003ED20LL, &v27);
  swift_bridgeObjectRelease(v8);
  if (!v28)
  {
    outlined destroy of CoreSignalTypes?((uint64_t)&v27, &demangling cache variable for type metadata for Any?);
    goto LABEL_6;
  }

  if ((swift_dynamicCast(v26, &v27, (char *)&type metadata for Any + 8, &type metadata for LinkSuggestedAction, 6LL) & 1) == 0)
  {
LABEL_6:
    uint64_t v19 = OUTLINED_FUNCTION_15_4();
    OUTLINED_FUNCTION_18_6((uint64_t)v5, v20, v21, v19);
    return (void *)OUTLINED_FUNCTION_14_1();
  }

  v29[0] = v26[0];
  v29[1] = v26[1];
  _OWORD v29[2] = v26[2];
  uint64_t v9 = LinkSuggestedAction.iconSystemImageName.getter();
  if (v10)
  {
    uint64_t v11 = v9;
    uint64_t v12 = v10;
    uint64_t v13 = (uint64_t)v5
    *uint64_t v5 = v11;
    v5[1] = v12;
    uint64_t v14 = type metadata accessor for Color(0LL);
    OUTLINED_FUNCTION_18_6(v13, v15, v16, v14);
    uint64_t v17 = enum case for Image.symbol(_:);
    uint64_t v18 = OUTLINED_FUNCTION_15_4();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104LL))(v5, v17, v18);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0LL, 1LL, v18);
  }

  else
  {
    uint64_t v23 = *((void *)&v29[0] + 1);
    *uint64_t v5 = *(void *)&v29[0];
    v5[1] = v23;
    uint64_t v24 = enum case for Image.appIcon(_:);
    uint64_t v25 = OUTLINED_FUNCTION_15_4();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 104LL))(v5, v24, v25);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0LL, 1LL, v25);
    swift_bridgeObjectRetain(v23);
  }

  OUTLINED_FUNCTION_14_1();
  return outlined release of LinkSuggestedAction(v29);
}

uint64_t LinkViewProvider.deinit()
{
  return v0;
}

uint64_t LinkViewProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

uint64_t protocol witness for ViewProvider.getInvocationActionProvider(context:) in conformance LinkViewProvider@<X0>( void *a1@<X8>)
{
  return LinkViewProvider.getInvocationActionProvider(context:)(a1);
}

uint64_t protocol witness for DialogCallbacksProvider.getDisplayedDialogCallback(context:) in conformance LinkViewProvider()
{
  return LinkViewProvider.getDisplayedDialogCallback(context:)();
}

void protocol witness for DialogCallbacksProvider.getDescriptionCallback(context:) in conformance LinkViewProvider( uint64_t a1)
{
}

void *protocol witness for AssetProvider.getAssets(context:suggestion:) in conformance LinkViewProvider( uint64_t a1, void *a2)
{
  return LinkViewProvider.getAssets(context:suggestion:)(a1, a2);
}

void CATLinkDialogCallback.init(dialogIdProvider:dialogType:)(__int128 *a1, char a2)
{
  char v3 = a2 & 1;
  outlined init with take of LinkDialogIdProvider(a1, v2 + 16);
  *(_BYTE *)(v2 + outlined init with copy of LinkClient(v0 + 16, v0 + 56) = v3;
  OUTLINED_FUNCTION_3();
}

uint64_t CATLinkDialogCallback.getText(dialog:dialogProperties:environment:viewContext:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[43] = a4;
  v5[44] = v4;
  v5[41] = a2;
  v5[42] = a3;
  v5[40] = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DialogDetails?);
  v5[45] = OUTLINED_FUNCTION_5_7(v6);
  uint64_t v7 = type metadata accessor for DialogDetails(0LL);
  v5[46] = v7;
  v5[47] = OUTLINED_FUNCTION_5_7(v7);
  return swift_task_switch(CATLinkDialogCallback.getText(dialog:dialogProperties:environment:viewContext:), 0LL, 0LL);
}

uint64_t CATLinkDialogCallback.getText(dialog:dialogProperties:environment:viewContext:)()
{
  uint64_t v1 = *(void **)(v0 + 328);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v4 = dispatch thunk of DialogProperties.getParameters()(v2, v3);
  OUTLINED_FUNCTION_11_6(0x800000000003ED20LL, (_OWORD *)(v0 + 272));
  swift_bridgeObjectRelease(v4);
  if (!*(void *)(v0 + 296))
  {
    outlined destroy of CoreSignalTypes?(v0 + 272, &demangling cache variable for type metadata for Any?);
    goto LABEL_9;
  }

  if ((swift_dynamicCast( v0 + 64,  v0 + 272,  (char *)&type metadata for Any + 8,  &type metadata for LinkSuggestedAction,  6LL) & 1) == 0)
  {
LABEL_9:
    if (one-time initialization token for linkSuggestions != -1) {
      swift_once( &one-time initialization token for linkSuggestions,  one-time initialization function for linkSuggestions);
    }
    uint64_t v22 = *(void *)(v0 + 328);
    uint64_t v23 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v23, (uint64_t)static Logger.linkSuggestions);
    outlined init with copy of LinkClient(v22, v0 + 112);
    uint64_t v25 = (void *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_32(v26))
    {
      __int128 v27 = (_DWORD *)OUTLINED_FUNCTION_16_0(12LL);
      uint64_t v28 = OUTLINED_FUNCTION_16_0(32LL);
      uint64_t v51 = v28;
      *__int128 v27 = 136315138;
      outlined init with copy of LinkClient(v0 + 112, v0 + 152);
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DialogProperties);
      uint64_t v30 = String.init<A>(describing:)(v0 + 152, v29);
      unint64_t v32 = v31;
      *(void *)(v0 + 31__swift_destroy_boxed_opaque_existential_1(v0 + 2) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v27 + 1);
      swift_bridgeObjectRelease(v32);
      __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 112));
      OUTLINED_FUNCTION_26(&dword_0, v33, v34, "CATLinkDialogCallback Link action retrieval failed: %s");
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      OUTLINED_FUNCTION_3_0(v28);
      OUTLINED_FUNCTION_3_0((uint64_t)v27);
    }

    else
    {
      __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 112));
    }

    goto LABEL_15;
  }

  uint64_t v6 = *(void *)(v0 + 360);
  uint64_t v5 = *(void *)(v0 + 368);
  uint64_t v7 = *(void *)(v0 + 352);
  __int128 v8 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + outlined destroy of AppIntentDialogCallback(v0 + 16) = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v8;
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 96);
  uint64_t v9 = *(void *)(v7 + 40);
  uint64_t v10 = *(void *)(v7 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v7 + 16), v9);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 8))(v0 + 16, *(unsigned __int8 *)(v7 + 56), v9, v10);
  if (__swift_getEnumTagSinglePayload(v6, 1LL, v5) == 1)
  {
    outlined destroy of CoreSignalTypes?( *(void *)(v0 + 360),  &demangling cache variable for type metadata for DialogDetails?);
    if (one-time initialization token for linkSuggestions != -1) {
      swift_once( &one-time initialization token for linkSuggestions,  one-time initialization function for linkSuggestions);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v11, (uint64_t)static Logger.linkSuggestions);
    outlined retain of LinkSuggestedAction((void *)(v0 + 16));
    uint64_t v12 = outlined retain of LinkSuggestedAction((void *)(v0 + 16));
    uint64_t v13 = (void *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_32(v14))
    {
      uint64_t v15 = (_DWORD *)OUTLINED_FUNCTION_16_0(12LL);
      uint64_t v50 = OUTLINED_FUNCTION_16_0(32LL);
      uint64_t v51 = v50;
      *uint64_t v15 = 136315138;
      id v16 = [*(id *)(v0 + 40) identifier];
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      unint64_t v19 = v18;

      *(void *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v15 + 1);
      swift_bridgeObjectRelease(v19);
      OUTLINED_FUNCTION_6_6();
      OUTLINED_FUNCTION_6_6();
      OUTLINED_FUNCTION_26(&dword_0, v20, v21, "CATLinkDialogCallback Dialog details retrieval failed: %s");
      swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
      OUTLINED_FUNCTION_3_0(v50);
      OUTLINED_FUNCTION_3_0((uint64_t)v15);
    }

    else
    {
      OUTLINED_FUNCTION_6_6();
      OUTLINED_FUNCTION_6_6();
    }

    OUTLINED_FUNCTION_6_6();
LABEL_15:
    uint64_t v35 = *(void *)(v0 + 360);
    swift_task_dealloc(*(void *)(v0 + 376));
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void, unint64_t))(v0 + 8))(0LL, 0xE000000000000000LL);
  }

  uint64_t v37 = *(void *)(v0 + 368);
  uint64_t v38 = *(void **)(v0 + 320);
  outlined init with take of DialogDetails(*(void *)(v0 + 360), *(void *)(v0 + 376));
  uint64_t v39 = v38[3];
  uint64_t v40 = v38[4];
  __swift_project_boxed_opaque_existential_1(v38, v39);
  *(void *)(v0 + 2outlined init with copy of LinkClient(v0 + 16, v0 + 56) = v37;
  OUTLINED_FUNCTION_13_5( &lazy protocol witness table cache variable for type DialogDetails and conformance DialogDetails,  v41,  v42,  (uint64_t)&protocol conformance descriptor for DialogDetails);
  *(void *)(v0 + 264) = v43;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 232));
  OUTLINED_FUNCTION_17_4((uint64_t)boxed_opaque_existential_1);
  *(void *)(v0 + 2outlined destroy of AppIntentDialogCallback(v0 + 16) = v37;
  OUTLINED_FUNCTION_13_5( &lazy protocol witness table cache variable for type DialogDetails and conformance DialogDetails,  v45,  v46,  (uint64_t)&protocol conformance descriptor for DialogDetails);
  *(void *)(v0 + 224) = v47;
  unint64_t v48 = __swift_allocate_boxed_opaque_existential_1((void *)(v0 + 192));
  OUTLINED_FUNCTION_17_4((uint64_t)v48);
  unint64_t v49 = (void *)swift_task_alloc(async function pointer to dispatch thunk of DialogService.templateDialog(propertyProvider:dialogProperties:environment:viewContext:)[1]);
  *(void *)(v0 + 384) = v49;
  *unint64_t v49 = v0;
  v49[1] = CATLinkDialogCallback.getText(dialog:dialogProperties:environment:viewContext:);
  return dispatch thunk of DialogService.templateDialog(propertyProvider:dialogProperties:environment:viewContext:)( v0 + 232,  v0 + 192,  *(void *)(v0 + 336),  *(void *)(v0 + 344),  v39,  v40);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v1 = *(void *)(v0 + 376);
  outlined release of LinkSuggestedAction((void *)(v0 + 16));
  outlined destroy of DialogDetails(v1);
  uint64_t v2 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 408);
  uint64_t v4 = *(void *)(v0 + 360);
  swift_task_dealloc(*(void *)(v0 + 376));
  swift_task_dealloc(v4);
  return OUTLINED_FUNCTION_1_9(v3, v2, *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 360);
  outlined release of LinkSuggestedAction((void *)(v0 + 16));
  outlined destroy of DialogDetails(v1);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 192));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 232));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CATLinkDialogCallback.getText(dialog:dialogProperties:environment:viewContext:)( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void **)v3;
  uint64_t v7 = *(void *)(*(void *)v3 + 384LL);
  *(void *)(*(void *)v3 + 392LL) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    __int128 v8 = CATLinkDialogCallback.getText(dialog:dialogProperties:environment:viewContext:);
  }

  else
  {
    v6[50] = a2;
    v6[51] = a1;
    __swift_destroy_boxed_opaque_existential_1(v6 + 24);
    __swift_destroy_boxed_opaque_existential_1(v6 + 29);
    __int128 v8 = CATLinkDialogCallback.getText(dialog:dialogProperties:environment:viewContext:);
  }

  return swift_task_switch(v8, 0LL, 0LL);
}

uint64_t CATLinkDialogCallback.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 57LL, 7LL);
}

uint64_t protocol witness for DialogCallback.getText(dialog:dialogProperties:environment:) in conformance CATLinkDialogCallback( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to DialogCallback.getText(dialog:dialogProperties:environment:)[1]);
  *(void *)(v5 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = protocol witness for DialogCallback.getText(dialog:dialogProperties:environment:) in conformance CATLinkDialogCallback;
  return DialogCallback.getText(dialog:dialogProperties:environment:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for DialogCallback.getText(dialog:dialogProperties:environment:viewContext:) in conformance CATLinkDialogCallback( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc(dword_4F354);
  *(void *)(v4 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for DialogCallback.getText(dialog:dialogProperties:environment:viewContext:) in conformance CATLinkDialogCallback;
  return CATLinkDialogCallback.getText(dialog:dialogProperties:environment:viewContext:)(a1, a2, a3, a4);
}

uint64_t protocol witness for DialogCallback.getText(dialog:dialogProperties:environment:viewContext:) in conformance CATLinkDialogCallback( uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *v3;
  uint64_t v6 = swift_task_dealloc(*(void *)(*v3 + 16));
  if (!v2)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a2;
  }

  return OUTLINED_FUNCTION_1_9(v6, v7, *(uint64_t (**)(void))(v9 + 8));
}

uint64_t outlined init with take of DialogDetails(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DialogDetails(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of DialogDetails(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DialogDetails(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DialogDetails(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DialogDetails(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void base witness table accessor for AssetProvider in LinkViewProvider(uint64_t a1, uint64_t a2)
{
}

uint64_t type metadata accessor for LinkViewProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC25SiriLinkSuggestionsPlugin16LinkViewProvider);
}

void base witness table accessor for DialogCallbacksProvider in LinkViewProvider(uint64_t a1, uint64_t a2)
{
}

uint64_t OUTLINED_FUNCTION_1_9(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t OUTLINED_FUNCTION_5_7(uint64_t a1)
{
  return swift_task_alloc((*(void *)(*(void *)(a1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

void *OUTLINED_FUNCTION_6_6()
{
  return outlined release of LinkSuggestedAction(v0);
}

uint64_t OUTLINED_FUNCTION_7_8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 a10)
{
  return outlined init with take of LinkDialogIdProvider(&a10, a1 + 16);
}

void OUTLINED_FUNCTION_9_8(uint64_t a1, ...)
{
}

double OUTLINED_FUNCTION_11_6@<D0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  return specialized Dictionary.subscript.getter(0xD00000000000001FLL, a1, v2, a2);
}

void OUTLINED_FUNCTION_13_5(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t OUTLINED_FUNCTION_14_1()
{
  return Assets.init(icon:)(v0);
}

uint64_t OUTLINED_FUNCTION_15_4()
{
  return type metadata accessor for Image(0LL);
}

uint64_t OUTLINED_FUNCTION_16_4()
{
  return type metadata accessor for LinkInvocationActionProvider();
}

uint64_t OUTLINED_FUNCTION_17_4(uint64_t a1)
{
  return outlined init with copy of DialogDetails(v1, a1);
}

uint64_t OUTLINED_FUNCTION_18_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, 1LL, 1LL, a4);
}

uint64_t LinkActionResolver.__allocating_init(linkClient:)(__int128 *a1)
{
  uint64_t v3 = swift_allocObject(v1, 72LL, 7LL);
  LinkActionResolver.init(linkClient:)(a1);
  return v3;
}

uint64_t *LinkActionResolver.typeIdentifier.unsafeMutableAddressor()
{
  if (one-time initialization token for typeIdentifier != -1) {
    swift_once(&one-time initialization token for typeIdentifier, one-time initialization function for typeIdentifier);
  }
  return &static LinkActionResolver.typeIdentifier;
}

void one-time initialization function for typeIdentifier()
{
  unk_53B47 = -18;
}

uint64_t static LinkActionResolver.typeIdentifier.getter()
{
  if (one-time initialization token for typeIdentifier != -1) {
    swift_once(&one-time initialization token for typeIdentifier, one-time initialization function for typeIdentifier);
  }
  uint64_t v0 = static LinkActionResolver.typeIdentifier;
  swift_bridgeObjectRetain(unk_53B40);
  return v0;
}

uint64_t LinkActionResolver.init(linkClient:)(__int128 *a1)
{
  if (one-time initialization token for typeIdentifier != -1) {
    swift_once(&one-time initialization token for typeIdentifier, one-time initialization function for typeIdentifier);
  }
  uint64_t v3 = unk_53B40;
  *(void *)(v1 + outlined destroy of AppIntentDialogCallback(v0 + 16) = static LinkActionResolver.typeIdentifier;
  *(void *)(v1 + 24) = v3;
  outlined init with take of LinkDialogIdProvider(a1, v1 + 32);
  swift_bridgeObjectRetain(v3);
  return v1;
}

uint64_t LinkActionResolver.resolveParameter(parameter:suggestion:interaction:environment:)( uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + outlined destroy of AppIntentDialogCallback(v0 + 16) = a2;
  *(void *)(v3 + 24) = v2;
  return swift_task_switch(LinkActionResolver.resolveParameter(parameter:suggestion:interaction:environment:), 0LL, 0LL);
}

uint64_t LinkActionResolver.resolveParameter(parameter:suggestion:interaction:environment:)()
{
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v4 = dispatch thunk of CandidateSuggestion.context.getter(v2, v3);
  uint64_t v6 = v5;
  v0[4] = v4;
  v0[5] = v5;
  uint64_t ObjectType = swift_getObjectType(v4);
  v0[6] = ObjectType;
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, *(void *)(*(void *)(v6 + 8) + 8LL));
  return swift_task_switch(LinkActionResolver.resolveParameter(parameter:suggestion:interaction:environment:), v8, v9);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v1 = v0[4];
  v0[7] = Context.getSuggestedActionsRequests()(v0[6], v0[5]);
  swift_unknownObjectRelease(v1);
  return swift_task_switch(LinkActionResolver.resolveParameter(parameter:suggestion:interaction:environment:), 0LL, 0LL);
}

#error "2FAD0: call analysis failed (funcsize=41)"
void *specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  char v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  unint64_t v13;
  void v15[2];
  char v16;
  char v17;
  void *v18;
  void *v19;
  uint64_t v20;
  _OWORD v21[2];
  void *v22;
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v22 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *v4;
      uint64_t v6 = *((_BYTE *)v4 + 8);
      uint64_t v7 = *((_BYTE *)v4 + 9);
      uint64_t v8 = (void *)v4[2];
      uint64_t v9 = (void *)v4[3];
      uint64_t v10 = v4[4];
      v15[0] = *(v4 - 1);
      v15[1] = v5;
      id v16 = v6;
      uint64_t v17 = v7;
      unint64_t v18 = v8;
      unint64_t v19 = v9;
      uint64_t v20 = v10;
      swift_bridgeObjectRetain(v5);
      uint64_t v11 = v8;
      uint64_t v12 = v9;
      swift_bridgeObjectRetain(v10);
      swift_dynamicCast(v21, v15, &type metadata for LinkSuggestedAction, (char *)&type metadata for Any + 8, 7LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v22;
      }

      uint64_t v13 = v2[2];
      if (v13 >= v2[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v22;
      }

      v2[2] = v13 + 1;
      outlined init with take of Any(v21, &v2[4 * v13 + 4]);
      v4 += 6;
      --v1;
    }

    while (v1);
  }

  return v2;
}

void *specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    os_log_type_t v14 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (void **)(a1 + 64);
    do
    {
      uint64_t v5 = (uint64_t)*(v4 - 3);
      uint64_t v6 = (uint64_t)*(v4 - 2);
      uint64_t v7 = (uint64_t)*(v4 - 1);
      uint64_t v8 = *v4;
      v12[0] = *(v4 - 4);
      v12[1] = v5;
      __int128 v12[2] = v6;
      void v12[3] = v7;
      void v12[4] = v8;
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(v7);
      id v9 = v8;
      swift_dynamicCast( v13,  v12,  &type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase,  (char *)&type metadata for Any + 8,  7LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v14;
      }

      unint64_t v10 = v2[2];
      if (v10 >= v2[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v14;
      }

      v2[2] = v10 + 1;
      outlined init with take of Any(v13, &v2[4 * v10 + 4]);
      v4 += 5;
      --v1;
    }

    while (v1);
  }

  return v2;
}

void specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  }

  if (v2)
  {
    unint64_t v18 = _swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    if (v2 < 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t v3 = 0LL;
      uint64_t v4 = v18;
      do
      {
        if ((a1 & 0xC000000000000001LL) != 0)
        {
          uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3, a1);
        }

        else
        {
          uint64_t v5 = *(void *)(a1 + 8 * v3 + 32);
          swift_retain(v5);
        }

        uint64_t v6 = type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator();
        uint64_t v16 = v6;
        uint64_t v7 = lazy protocol witness table accessor for type LinkViewProvider and conformance LinkViewProvider( &lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator,  (uint64_t)&protocol conformance descriptor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator);
        uint64_t v17 = v7;
        unint64_t v18 = v4;
        v15[0] = v5;
        unint64_t v8 = v4[2];
        if (v8 >= v4[3] >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v6 = v16;
          uint64_t v9 = v17;
        }

        else
        {
          uint64_t v9 = v7;
        }

        ++v3;
        uint64_t v10 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v15, v6);
        __chkstk_darwin(v10);
        uint64_t v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v13 + 16))(v12);
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)( v8,  (uint64_t)v12,  (uint64_t *)&v18,  v6,  v9);
        __swift_destroy_boxed_opaque_existential_1(v15);
        uint64_t v4 = v18;
      }

      while (v2 != v3);
    }
  }

uint64_t LinkActionResolver.deinit()
{
  return v0;
}

uint64_t LinkActionResolver.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t protocol witness for InternalResolver.resolveParameter(parameter:suggestion:interaction:environment:) in conformance LinkActionResolver( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_4F4DC);
  *(void *)(v2 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for InternalSuggestionsRepository.getAsyncPooledSuggestions() in conformance LinkSuggestionsRepository;
  return LinkActionResolver.resolveParameter(parameter:suggestion:interaction:environment:)((uint64_t)v4, a2);
}

uint64_t base witness table accessor for InternalResolver in LinkActionResolver(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type LinkViewProvider and conformance LinkViewProvider( &lazy protocol witness table cache variable for type LinkActionResolver and conformance LinkActionResolver,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for LinkActionResolver,  (uint64_t)&protocol conformance descriptor for LinkActionResolver);
}

uint64_t type metadata accessor for LinkActionResolver()
{
  return objc_opt_self(&OBJC_CLASS____TtC25SiriLinkSuggestionsPlugin18LinkActionResolver);
}

uint64_t base witness table accessor for Wrappable in LinkActionResolver(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type LinkViewProvider and conformance LinkViewProvider( &lazy protocol witness table cache variable for type LinkActionResolver and conformance LinkActionResolver,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for LinkActionResolver,  (uint64_t)&protocol conformance descriptor for LinkActionResolver);
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v9 = __swift_allocate_boxed_opaque_existential_1(&v12);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32LL))(v9, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + outlined destroy of AppIntentDialogCallback(v0 + 16) = a1 + 1;
  return outlined init with take of LinkDialogIdProvider(&v12, v10 + 40 * a1 + 32);
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

void *SiriLinkSuggestionsConstants.RunSuggestedLinkDirectInvocation.unsafeMutableAddressor()
{
  return &static SiriLinkSuggestionsConstants.RunSuggestedLinkDirectInvocation;
}

void *SiriLinkSuggestionsConstants.PayloadKeys.BundleIdentifier.unsafeMutableAddressor()
{
  return &static SiriLinkSuggestionsConstants.PayloadKeys.BundleIdentifier;
}

uint64_t *SiriLinkSuggestionsConstants.PayloadKeys.ArchivedAction.unsafeMutableAddressor()
{
  if (one-time initialization token for ArchivedAction != -1) {
    swift_once(&one-time initialization token for ArchivedAction, one-time initialization function for ArchivedAction);
  }
  return &static SiriLinkSuggestionsConstants.PayloadKeys.ArchivedAction;
}

uint64_t *SiriLinkSuggestionsConstants.PayloadKeys.SystemProtocol.unsafeMutableAddressor()
{
  if (one-time initialization token for SystemProtocol != -1) {
    swift_once(&one-time initialization token for SystemProtocol, one-time initialization function for SystemProtocol);
  }
  return &static SiriLinkSuggestionsConstants.PayloadKeys.SystemProtocol;
}

void *SiriLinkSuggestionsConstants.IntentActionIdentifier.unsafeMutableAddressor()
{
  return &static SiriLinkSuggestionsConstants.IntentActionIdentifier;
}

void *SiriLinkSuggestionsConstants.MappedParameterKeys.BundleIdentifier.unsafeMutableAddressor()
{
  return &static SiriLinkSuggestionsConstants.MappedParameterKeys.BundleIdentifier;
}

void *SiriLinkSuggestionsConstants.MappedParameterKeys.ActionIdentifier.unsafeMutableAddressor()
{
  return &static SiriLinkSuggestionsConstants.MappedParameterKeys.ActionIdentifier;
}

unint64_t static SiriLinkSuggestionsConstants.RunSuggestedLinkDirectInvocation.getter()
{
  return 0xD000000000000047LL;
}

unint64_t static SiriLinkSuggestionsConstants.IntentActionIdentifier.getter()
{
  return 0xD000000000000012LL;
}

unint64_t static SiriLinkSuggestionsConstants.MappedParameterKeys.BundleIdentifier.getter()
{
  return OUTLINED_FUNCTION_0_11();
}

void one-time initialization function for ArchivedAction()
{
}

uint64_t static SiriLinkSuggestionsConstants.PayloadKeys.ArchivedAction.getter()
{
  return static SiriLinkSuggestionsConstants.PayloadKeys.ArchivedAction.getter( &one-time initialization token for ArchivedAction,  &static SiriLinkSuggestionsConstants.PayloadKeys.ArchivedAction,  &qword_53B50);
}

void one-time initialization function for SystemProtocol()
{
}

uint64_t static SiriLinkSuggestionsConstants.PayloadKeys.SystemProtocol.getter()
{
  return static SiriLinkSuggestionsConstants.PayloadKeys.ArchivedAction.getter( &one-time initialization token for SystemProtocol,  &static SiriLinkSuggestionsConstants.PayloadKeys.SystemProtocol,  &qword_53B60);
}

uint64_t static SiriLinkSuggestionsConstants.PayloadKeys.ArchivedAction.getter( void *a1, uint64_t *a2, void *a3)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  uint64_t v5 = *a2;
  swift_bridgeObjectRetain(*a3);
  return v5;
}

unint64_t static SiriLinkSuggestionsConstants.MappedParameterKeys.ActionIdentifier.getter()
{
  return OUTLINED_FUNCTION_0_11();
}

void type metadata accessor for SiriLinkSuggestionsConstants()
{
}

void type metadata accessor for SiriLinkSuggestionsConstants.PayloadKeys()
{
}

void type metadata accessor for SiriLinkSuggestionsConstants.MappedParameterKeys()
{
}

unint64_t OUTLINED_FUNCTION_0_11()
{
  return 0xD000000000000010LL;
}

void OUTLINED_FUNCTION_2_8(void *a1@<X8>)
{
  *a1 = v1;
  a1[1] = v2 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000LL;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v3 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v4 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    if (v4 < 0) {
      uint64_t v17 = *v1;
    }
    else {
      uint64_t v17 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_44_3();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(v4);
  }

  else
  {
    uint64_t v5 = *(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFF8LL));
  }

  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *uint64_t v1 = v4;
  uint64_t v5 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000LL) == 0 && (v4 & 0x4000000000000000LL) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v5 = 1LL;
  }

  uint64_t v9 = *(void *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFF8LL));
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    OUTLINED_FUNCTION_44_3();
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1LL, v4);
    swift_bridgeObjectRelease(*v1);
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
LABEL_16:
    uint64_t result = specialized Array._copyContents(initializing:)( v8 + 8LL * *(void *)(v8 + 16) + 32,  (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16),  a1);
    if (v11 >= v3) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0) {
      uint64_t v18 = v4;
    }
    else {
      uint64_t v18 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_44_3();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }

  if (v11 < 1) {
    goto LABEL_20;
  }
  uint64_t v12 = *(void *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8LL));
  BOOL v13 = __OFADD__(v12, v11);
  uint64_t v14 = v12 + v11;
  if (!v13)
  {
    *(void *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8LL)) = v14;
LABEL_20:
    uint64_t v15 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }

  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!(_DWORD)result || v5 > *(void *)(v3 + 24) >> 1)
  {
    if (v4 <= v5) {
      uint64_t v7 = v4 + v2;
    }
    else {
      uint64_t v7 = v4;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( result,  v7,  1LL,  v3);
    uint64_t v3 = result;
  }

  if (!*(void *)(v6 + 16))
  {
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }

  uint64_t v8 = (*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16);
  uint64_t result = type metadata accessor for VersionedInvocation(0LL);
  if (v8 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t result = specialized UnsafeMutablePointer.initialize(from:count:)( v6 + ((*(unsigned __int8 *)(*(void *)(result - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(result - 8) + 80LL)),  v2);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease(v6);
    *uint64_t v1 = v3;
    return result;
  }

  uint64_t v9 = *(void *)(v3 + 16);
  BOOL v10 = __OFADD__(v9, v2);
  uint64_t v11 = v9 + v2;
  if (!v10)
  {
    *(void *)(v3 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v11;
    goto LABEL_14;
  }

void specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16LL);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!swift_isUniquelyReferenced_nonNull_native(*v1) || v4 + v2 > *(void *)(v3 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v3 = v6;
  }

  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  specialized UnsafeMutablePointer.initialize(from:count:)(a1 + 32, v2);
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease(a1);
    *uint64_t v1 = v3;
    return;
  }

  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v9;
    goto LABEL_11;
  }

LABEL_15:
  __break(1u);
}

double one-time initialization function for linkClientOverride()
{
  qword_53B88 = 0LL;
  double result = 0.0;
  static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride = 0u;
  unk_53B78 = 0u;
  return result;
}

__int128 *LinkSuggestionsOwnerDefinitionFactory.linkClientOverride.unsafeMutableAddressor()
{
  if (one-time initialization token for linkClientOverride != -1) {
    swift_once( &one-time initialization token for linkClientOverride,  one-time initialization function for linkClientOverride);
  }
  return &static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride;
}

void static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride.getter(uint64_t a1@<X8>)
{
}

void static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride.setter(uint64_t a1)
{
}

void static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride.modify()
{
  if (one-time initialization token for linkClientOverride != -1) {
    swift_once( &one-time initialization token for linkClientOverride,  one-time initialization function for linkClientOverride);
  }
  OUTLINED_FUNCTION_1_10();
  OUTLINED_FUNCTION_3();
}

double one-time initialization function for toolClientOverride()
{
  qword_53BB0 = 0LL;
  double result = 0.0;
  static LinkSuggestionsOwnerDefinitionFactory.toolClientOverride = 0u;
  unk_53BA0 = 0u;
  return result;
}

__int128 *LinkSuggestionsOwnerDefinitionFactory.toolClientOverride.unsafeMutableAddressor()
{
  if (one-time initialization token for toolClientOverride != -1) {
    swift_once( &one-time initialization token for toolClientOverride,  one-time initialization function for toolClientOverride);
  }
  return &static LinkSuggestionsOwnerDefinitionFactory.toolClientOverride;
}

void static LinkSuggestionsOwnerDefinitionFactory.toolClientOverride.getter(uint64_t a1@<X8>)
{
}

void static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride.getter( void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a4);
  }
  OUTLINED_FUNCTION_1_5(a2, (uint64_t)v8, 0LL);
  outlined init with copy of LinkClient?(a2, a5, a3);
  OUTLINED_FUNCTION_5_8();
}

void static LinkSuggestionsOwnerDefinitionFactory.toolClientOverride.setter(uint64_t a1)
{
}

void static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride.setter( uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (*a2 != -1LL) {
    swift_once(a2, a5);
  }
  OUTLINED_FUNCTION_1_5(a3, (uint64_t)v8, 33LL);
  outlined assign with copy of LinkClient?(a1, a3, a4);
  swift_endAccess(v8);
  outlined destroy of CoreSignalTypes?(a1, a4);
  OUTLINED_FUNCTION_5_8();
}

void static LinkSuggestionsOwnerDefinitionFactory.toolClientOverride.modify()
{
  if (one-time initialization token for toolClientOverride != -1) {
    swift_once( &one-time initialization token for toolClientOverride,  one-time initialization function for toolClientOverride);
  }
  OUTLINED_FUNCTION_1_10();
  OUTLINED_FUNCTION_3();
}

double one-time initialization function for clockOverride()
{
  qword_53BD8 = 0LL;
  double result = 0.0;
  static LinkSuggestionsOwnerDefinitionFactory.clockOverride = 0u;
  unk_53BC8 = 0u;
  return result;
}

__int128 *LinkSuggestionsOwnerDefinitionFactory.clockOverride.unsafeMutableAddressor()
{
  if (one-time initialization token for clockOverride != -1) {
    swift_once(&one-time initialization token for clockOverride, one-time initialization function for clockOverride);
  }
  return &static LinkSuggestionsOwnerDefinitionFactory.clockOverride;
}

void static LinkSuggestionsOwnerDefinitionFactory.clockOverride.getter(uint64_t a1@<X8>)
{
}

void outlined init with copy of LinkClient?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = OUTLINED_FUNCTION_8_6(a1, a2, a3);
  OUTLINED_FUNCTION_16_5(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL));
  OUTLINED_FUNCTION_3();
}

void static LinkSuggestionsOwnerDefinitionFactory.clockOverride.setter(uint64_t a1)
{
}

void outlined assign with copy of LinkClient?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = OUTLINED_FUNCTION_8_6(a1, a2, a3);
  OUTLINED_FUNCTION_16_5(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 24LL));
  OUTLINED_FUNCTION_3();
}

void static LinkSuggestionsOwnerDefinitionFactory.clockOverride.modify()
{
  if (one-time initialization token for clockOverride != -1) {
    swift_once(&one-time initialization token for clockOverride, one-time initialization function for clockOverride);
  }
  OUTLINED_FUNCTION_1_10();
  OUTLINED_FUNCTION_3();
}

uint64_t static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:)( uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 4outlined destroy of AppIntentDialogCallback(v0 + 16) = a1;
  *(void *)(v2 + 424) = a2;
  return swift_task_switch( static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:),  0LL,  0LL);
}

uint64_t static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:)()
{
  if (one-time initialization token for linkSuggestions != -1) {
    swift_once(&one-time initialization token for linkSuggestions, one-time initialization function for linkSuggestions);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[54] = v2;
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.linkSuggestions);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_64_1(v5))
  {
    uint64_t v6 = (uint8_t *)OUTLINED_FUNCTION_14_2();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_0, v4, v0, "Initializing SiriLinkSuggestionsPlugin", v6, 2u);
    OUTLINED_FUNCTION_3_0((uint64_t)v6);
  }

  v1[51] = _swiftEmptyArrayStorage;
  if (one-time initialization token for autoshortcutsOwner != -1) {
    swift_once( &one-time initialization token for autoshortcutsOwner,  one-time initialization function for autoshortcutsOwner);
  }
  uint64_t v7 = (int *)v1[52];
  uint64_t v8 = static LinkSuggestionsOwners.autoshortcutsOwner;
  uint64_t v9 = type metadata accessor for DefaultOwner(0LL);
  v1[55] = v9;
  v1[10] = v9;
  unint64_t v10 = lazy protocol witness table accessor for type DefaultOwner and conformance DefaultOwner();
  v1[56] = v10;
  v1[11] = v10;
  v1[7] = v8;
  uint64_t v11 = v7[1];
  uint64_t v14 = (uint64_t (*)(void))((char *)v7 + *v7);
  swift_retain(v8);
  uint64_t v12 = (void *)swift_task_alloc(v11);
  v1[57] = v12;
  *uint64_t v12 = v1;
  v12[1] = static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:);
  return OUTLINED_FUNCTION_2_9((uint64_t)(v1 + 7), v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  *(void *)(v1 + 464) = v0;
  OUTLINED_FUNCTION_49_1(v2);
  OUTLINED_FUNCTION_15_5();
  return OUTLINED_FUNCTION_11_1( (uint64_t)static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:),  0LL,  0LL);
}

{
  uint64_t v0;
  uint64_t refreshed;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  refreshed = dispatch thunk of SuggestionOwnerDefinitionBuilder.getRefreshService()();
  uint64_t v3 = v2;
  *(void *)(v0 + 47__swift_destroy_boxed_opaque_existential_1(v0 + 2) = refreshed;
  if (one-time initialization token for linkClientOverride != -1) {
    swift_once( &one-time initialization token for linkClientOverride,  one-time initialization function for linkClientOverride);
  }
  OUTLINED_FUNCTION_1_5((uint64_t)&static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride, v0 + 384, 0LL);
  outlined init with copy of LinkClient?( (uint64_t)&static LinkSuggestionsOwnerDefinitionFactory.linkClientOverride,  v0 + 176,  &demangling cache variable for type metadata for LinkClient?);
  if (*(void *)(v0 + 200))
  {
    outlined init with take of LinkDialogIdProvider((__int128 *)(v0 + 176), v0 + 96);
  }

  else
  {
    uint64_t v4 = [objc_allocWithZone(LNMetadataProvider) init];
    os_log_type_t v5 = [objc_allocWithZone(LNSuggestionsProvider) init];
    uint64_t v6 = type metadata accessor for LinkRegistryObserver();
    OUTLINED_FUNCTION_1(v6, 32LL);
    uint64_t v7 = swift_unknownObjectRetain(refreshed);
    uint64_t v8 = LinkRegistryObserver.init(refreshableService:)(v7, v3);
    uint64_t v9 = type metadata accessor for DefaultLinkClient();
    OUTLINED_FUNCTION_1(v9, 48LL);
    unint64_t v10 = DefaultLinkClient.init(metadataProvider:suggestionsProvider:registryObserver:)((uint64_t)v4, (uint64_t)v5, v8);
    *(void *)(v0 + 120) = v9;
    *(void *)(v0 + 128) = &protocol witness table for DefaultLinkClient;
    *(void *)(v0 + 96) = v10;
    outlined destroy of CoreSignalTypes?(v0 + 176, &demangling cache variable for type metadata for LinkClient?);
  }

  if (one-time initialization token for clockOverride != -1) {
    swift_once(&one-time initialization token for clockOverride, one-time initialization function for clockOverride);
  }
  OUTLINED_FUNCTION_1_5((uint64_t)&static LinkSuggestionsOwnerDefinitionFactory.clockOverride, v0 + 336, 0LL);
  outlined init with copy of LinkClient?( (uint64_t)&static LinkSuggestionsOwnerDefinitionFactory.clockOverride,  v0 + 296,  &demangling cache variable for type metadata for Clock?);
  if (*(void *)(v0 + 320))
  {
    outlined init with take of LinkDialogIdProvider((__int128 *)(v0 + 296), v0 + 216);
  }

  else
  {
    static Clocks.getSystemClock()();
    outlined destroy of CoreSignalTypes?(v0 + 296, &demangling cache variable for type metadata for Clock?);
  }

  uint64_t v11 = type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory();
  uint64_t v12 = *(void *)(v0 + 120);
  BOOL v13 = *(void *)(v0 + 128);
  uint64_t v14 = __swift_project_boxed_opaque_existential_1((void *)(v0 + 96), v12);
  uint64_t v15 = (void *)swift_task_alloc(unk_4F6AC);
  *(void *)(v0 + 480) = v15;
  *uint64_t v15 = v0;
  v15[1] = static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:);
  return v17((uint64_t)v14, *(void *)(v0 + 464), v0 + 216, v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  *(void *)(v1 + 488) = v0;
  OUTLINED_FUNCTION_49_1(v2);
  OUTLINED_FUNCTION_15_5();
  return OUTLINED_FUNCTION_11_1( (uint64_t)static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:),  0LL,  0LL);
}

{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_s *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t (*v14)(void);
  specialized Array.append<A>(contentsOf:)(*(void *)(v1 + 488));
  if ((SiriLinkSuggestionsFeatureFlags.isEnabled.getter(1) & 1) != 0
    && AFDeviceSupportsSystemAssistantExperience())
  {
    if (one-time initialization token for appIntentsSuggestions != -1) {
      swift_once( &one-time initialization token for appIntentsSuggestions,  one-time initialization function for appIntentsSuggestions);
    }
    uint64_t v2 = __swift_project_value_buffer(*(void *)(v1 + 432), (uint64_t)static Logger.appIntentsSuggestions);
    uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
    uint64_t v4 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_64_1(v4))
    {
      os_log_type_t v5 = (uint8_t *)OUTLINED_FUNCTION_14_2();
      *(_WORD *)os_log_type_t v5 = 0;
      _os_log_impl(&dword_0, v3, v0, "adding appIntentsSuggestions", v5, 2u);
      OUTLINED_FUNCTION_3_0((uint64_t)v5);
    }

    if (one-time initialization token for toolClientOverride != -1) {
      swift_once( &one-time initialization token for toolClientOverride,  one-time initialization function for toolClientOverride);
    }
    OUTLINED_FUNCTION_1_5((uint64_t)&static LinkSuggestionsOwnerDefinitionFactory.toolClientOverride, v1 + 360, 0LL);
    outlined init with copy of LinkClient?( (uint64_t)&static LinkSuggestionsOwnerDefinitionFactory.toolClientOverride,  v1 + 136,  &demangling cache variable for type metadata for ToolClient?);
    if (*(void *)(v1 + 160))
    {
      outlined init with take of LinkDialogIdProvider((__int128 *)(v1 + 136), v1 + 256);
    }

    else
    {
      uint64_t v7 = type metadata accessor for DefaultToolClient();
      OUTLINED_FUNCTION_1(v7, 24LL);
      uint64_t v8 = DefaultToolClient.init()();
      *(void *)(v1 + 280) = v7;
      *(void *)(v1 + 288) = &protocol witness table for DefaultToolClient;
      *(void *)(v1 + 2outlined init with copy of LinkClient(v0 + 16, v0 + 56) = v8;
      outlined destroy of CoreSignalTypes?(v1 + 136, &demangling cache variable for type metadata for ToolClient?);
    }

    *(void *)(v1 + 496) = type metadata accessor for AppIntentsSuggestionsOwnerDefinitionFactory();
    if (one-time initialization token for appIntentsOwner != -1) {
      swift_once( &one-time initialization token for appIntentsOwner,  one-time initialization function for appIntentsOwner);
    }
    uint64_t v9 = *(int **)(v1 + 416);
    unint64_t v10 = static LinkSuggestionsOwners.appIntentsOwner;
    *(_OWORD *)(v1 + 40) = *(_OWORD *)(v1 + 440);
    *(void *)(v1 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v10;
    uint64_t v11 = v9[1];
    uint64_t v14 = (uint64_t (*)(void))((char *)v9 + *v9);
    swift_retain(v10);
    uint64_t v12 = (void *)swift_task_alloc(v11);
    *(void *)(v1 + 504) = v12;
    *uint64_t v12 = v1;
    v12[1] = static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:);
    return OUTLINED_FUNCTION_2_9(v1 + 16, v14);
  }

  else
  {
    uint64_t v6 = *(void *)(v1 + 472);
    swift_release(*(void *)(v1 + 464));
    swift_unknownObjectRelease(v6);
    OUTLINED_FUNCTION_15_5();
    return OUTLINED_FUNCTION_2_9(*(void *)(v1 + 408), *(uint64_t (**)(void))(v1 + 8));
  }

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  OUTLINED_FUNCTION_25_2();
  uint64_t v1 = *(void *)(v0 + 512);
  OUTLINED_FUNCTION_24_2();
  *(void *)(v3 + 528) = v2;
  OUTLINED_FUNCTION_49_1(v4);
  swift_release(v1);
  return OUTLINED_FUNCTION_11_1( (uint64_t)static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:),  0LL,  0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v2 = *(void *)(v0 + 464);
  uint64_t v1 = *(void *)(v0 + 472);
  specialized Array.append<A>(contentsOf:)(*(void *)(v0 + 528));
  swift_release(v2);
  swift_unknownObjectRelease(v1);
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 256));
  __swift_destroy_boxed_opaque_existential_1((void *)(v0 + 96));
  return OUTLINED_FUNCTION_2_9(*(void *)(v0 + 408), *(uint64_t (**)(void))(v0 + 8));
}

uint64_t static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 504LL);
  BOOL v13 = *(void **)v1;
  v13[64] = a1;
  swift_task_dealloc(v3);
  __swift_destroy_boxed_opaque_existential_1(v13 + 2);
  uint64_t v4 = v13[15];
  uint64_t v5 = v13[16];
  uint64_t v6 = __swift_project_boxed_opaque_existential_1(v13 + 12, v4);
  uint64_t v7 = v13[35];
  uint64_t v8 = v13[36];
  uint64_t v9 = __swift_project_boxed_opaque_existential_1(v13 + 32, v7);
  unint64_t v10 = (void *)swift_task_alloc(unk_4ED5C);
  v13[65] = v10;
  *unint64_t v10 = v13;
  v10[1] = static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:);
  return ((uint64_t (*)(void *, void *, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))v12)( v6,  v9,  a1,  v13[62],  v4,  v7,  v5,  v8);
}

unint64_t lazy protocol witness table accessor for type DefaultOwner and conformance DefaultOwner()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultOwner and conformance DefaultOwner;
  if (!lazy protocol witness table cache variable for type DefaultOwner and conformance DefaultOwner)
  {
    uint64_t v1 = type metadata accessor for DefaultOwner(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DefaultOwner, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DefaultOwner and conformance DefaultOwner);
  }

  return result;
}

uint64_t protocol witness for static OwnerDefinitionFactory.createOwnerDefinitions(builderFactory:) in conformance LinkSuggestionsOwnerDefinitionFactory( uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_4F5BC);
  *(void *)(v2 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for InternalSuggestionsRepository.getAsyncPooledSuggestions() in conformance LinkSuggestionsRepository;
  return static LinkSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:)(a1, a2);
}

uint64_t type metadata accessor for LinkSuggestionsOwnerDefinitionFactory()
{
  return objc_opt_self(&OBJC_CLASS____TtC25SiriLinkSuggestionsPlugin37LinkSuggestionsOwnerDefinitionFactory);
}

uint64_t OUTLINED_FUNCTION_1_10()
{
  return swift_beginAccess(v1, v0, 33LL, 0LL);
}

uint64_t OUTLINED_FUNCTION_2_9(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

  ;
}

uint64_t OUTLINED_FUNCTION_8_6(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return __swift_instantiateConcreteTypeFromMangledName(a3);
}

uint64_t OUTLINED_FUNCTION_14_2()
{
  return swift_slowAlloc(2LL, -1LL);
}

uint64_t OUTLINED_FUNCTION_15_5()
{
  return __swift_destroy_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_16_5@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

SiriLinkSuggestionsPlugin::LinkSuggestedActionsRequest __swiftcall LinkSuggestedActionsRequest.init(bundleIdentifier:onScreen:explicitRequest:)( Swift::String bundleIdentifier, Swift::Bool onScreen, Swift::Bool explicitRequest)
{
  if (explicitRequest) {
    __int16 v3 = 256;
  }
  else {
    __int16 v3 = 0;
  }
  __int16 v4 = v3 & 0xFFFE | onScreen;
  result.bundleIdentifier = bundleIdentifier;
  result.onScreen = v4;
  result.explicitRequest = HIBYTE(v4);
  return result;
}

void LinkSuggestedActionsRequest.suggestionsRequest.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v3 = a3;
  int v6 = (a3 >> 8) & 1;
  type metadata accessor for LNSuggestionsRequest();
  swift_bridgeObjectRetain(a2);
  LNSuggestionsRequest.__allocating_init(bundleIdentifier:onScreen:explicitRequest:)(a1, a2, v3 & 1, v6);
}

unint64_t type metadata accessor for LNSuggestionsRequest()
{
  unint64_t result = lazy cache variable for type metadata for LNSuggestionsRequest;
  if (!lazy cache variable for type metadata for LNSuggestionsRequest)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___LNSuggestionsRequest);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNSuggestionsRequest);
  }

  return result;
}

uint64_t LinkSuggestedActionsRequest.onScreen.getter(uint64_t a1, uint64_t a2, char a3)
{
  return a3 & 1;
}

uint64_t LinkSuggestedActionsRequest.explicitRequest.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a3 >> 8) & 1;
}

uint64_t LinkSuggestedActionsRequest.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRelease(a3);
}

uint64_t static LinkSuggestedActionsRequest.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  if (a1 == a4 && a2 == a5)
  {
    if (((a3 ^ a6) & 1) != 0) {
      return 0LL;
    }
    return ((a3 & 0x100) == 0) ^ ((unsigned __int16)(a6 & 0x100) >> 8);
  }

  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0LL);
  uint64_t result = 0LL;
  if ((v9 & 1) != 0 && ((a3 ^ a6) & 1) == 0) {
    return ((a3 & 0x100) == 0) ^ ((unsigned __int16)(a6 & 0x100) >> 8);
  }
  return result;
}

uint64_t LinkSuggestedActionsRequest.CodingKeys.init(stringValue:)(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x800000000003EDD0LL;
    if (a2 == 0x800000000003EDD0LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000000003EDD0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  BOOL v6 = a1 == 0x6E65657263536E6FLL && a2 == 0xE800000000000000LL;
  if (v6
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E65657263536E6FLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  else if (a1 == 0x746963696C707865LL && a2 == 0xEF74736575716552LL)
  {
    swift_bridgeObjectRelease(a2);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746963696C707865LL, 0xEF74736575716552LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

SiriLinkSuggestionsPlugin::AutoShortcutsSuggestionsOwnerDefinitionFactory::ResolvedPhrase::CodingKeys_optional __swiftcall AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys.init(intValue:)( Swift::Int intValue)
{
  return (SiriLinkSuggestionsPlugin::AutoShortcutsSuggestionsOwnerDefinitionFactory::ResolvedPhrase::CodingKeys_optional)3;
}

uint64_t LinkSuggestedActionsRequest.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0xD000000000000010LL;
  }
  if (a1 == 1) {
    return 0x6E65657263536E6FLL;
  }
  return 0x746963696C707865LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance LinkSuggestedActionsRequest.CodingKeys()
{
  return LinkSuggestedActionsRequest.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LinkSuggestedActionsRequest.CodingKeys@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = LinkSuggestedActionsRequest.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

SiriLinkSuggestionsPlugin::AutoShortcutsSuggestionsOwnerDefinitionFactory::ResolvedPhrase::CodingKeys_optional protocol witness for CodingKey.init(intValue:) in conformance LinkSuggestedActionsRequest.CodingKeys@<W0>( Swift::Int a1@<X0>, SiriLinkSuggestionsPlugin::AutoShortcutsSuggestionsOwnerDefinitionFactory::ResolvedPhrase::CodingKeys_optional *a2@<X8>)
{
  result.value = AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys.init(intValue:)(a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LinkSuggestedActionsRequest.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LinkSuggestedActionsRequest.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LinkSuggestedActionsRequest.encode(to:)(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v18 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LinkSuggestedActionsRequest.CodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  unint64_t v14 = lazy protocol witness table accessor for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&unk_4A780, &unk_4A780, v14, v12, v13);
  char v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v21, v8);
  if (!v4)
  {
    unsigned int v15 = (unsigned __int16)v18;
    char v20 = 1;
    OUTLINED_FUNCTION_1_11(v18 & 1, (uint64_t)&v20);
    char v19 = 2;
    OUTLINED_FUNCTION_1_11((v15 >> 8) & 1, (uint64_t)&v19);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

unint64_t lazy protocol witness table accessor for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LinkSuggestedActionsRequest.CodingKeys,  &unk_4A780);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LinkSuggestedActionsRequest.CodingKeys,  &unk_4A780);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LinkSuggestedActionsRequest.CodingKeys,  &unk_4A780);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LinkSuggestedActionsRequest.CodingKeys,  &unk_4A780);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys);
  }

  return result;
}

void LinkSuggestedActionsRequest.hashValue.getter(uint64_t a1, uint64_t a2)
{
}

uint64_t LinkSuggestedActionsRequest.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LinkSuggestedActionsRequest.CodingKeys>);
  __chkstk_darwin(v3);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  unint64_t v6 = lazy protocol witness table accessor for type LinkSuggestedActionsRequest.CodingKeys and conformance LinkSuggestedActionsRequest.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_4A780, &unk_4A780, v6, v4, v5);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }

  else
  {
    char v11 = 0;
    uint64_t v5 = KeyedDecodingContainer.decode(_:forKey:)(&v11, v3);
    char v10 = 1;
    swift_bridgeObjectRetain(v8);
    OUTLINED_FUNCTION_2_10((uint64_t)&v10);
    char v9 = 2;
    OUTLINED_FUNCTION_2_10((uint64_t)&v9);
    OUTLINED_FUNCTION_0_5();
    __swift_destroy_boxed_opaque_existential_1(a1);
    OUTLINED_FUNCTION_102();
  }

  return v5;
}

void protocol witness for Hashable.hashValue.getter in conformance LinkSuggestedActionsRequest()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LinkSuggestedActionsRequest(uint64_t a1)
{
  return LinkSuggestedActionsRequest.hash(into:)(a1, *v1, v1[1]);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance LinkSuggestedActionsRequest( uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  Hasher.init(_seed:)(v4, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v4, v2, v3);
  swift_bridgeObjectRelease(v3);
  Hasher._finalize()();
  OUTLINED_FUNCTION_3_3();
}

uint64_t protocol witness for Decodable.init(from:) in conformance LinkSuggestedActionsRequest@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = LinkSuggestedActionsRequest.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v6 & 1;
    *(_BYTE *)(a2 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 7) = HIBYTE(v6) & 1;
  }

  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance LinkSuggestedActionsRequest(void *a1)
{
  if (*(_BYTE *)(v1 + 17)) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  return LinkSuggestedActionsRequest.encode(to:)( a1,  *(void *)v1,  *(void *)(v1 + 8),  v2 | *(unsigned __int8 *)(v1 + 16));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LinkSuggestedActionsRequest( uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 17)) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  if (*(_BYTE *)(a2 + 17)) {
    int v3 = 256;
  }
  else {
    int v3 = 0;
  }
  return static LinkSuggestedActionsRequest.__derived_struct_equals(_:_:)( *(void *)a1,  *(void *)(a1 + 8),  v2 | *(unsigned __int8 *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  v3 | *(unsigned __int8 *)(a2 + 16));
}

uint64_t destroy for LinkSuggestedActionsRequest(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

uint64_t initializeBufferWithCopyOfBuffer for LinkSuggestedActionsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + outlined destroy of AppIntentDialogCallback(v0 + 16) = *(_WORD *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for LinkSuggestedActionsRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + outlined destroy of AppIntentDialogCallback(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 7) = *(_BYTE *)(a2 + 17);
  return a1;
}

__n128 __swift_memcpy18_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for LinkSuggestedActionsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + outlined destroy of AppIntentDialogCallback(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 7) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkSuggestedActionsRequest(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 18))
    {
      LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkSuggestedActionsRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + outlined destroy of AppIntentDialogCallback(v0 + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 18) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 18) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LinkSuggestedActionsRequest()
{
  return &type metadata for LinkSuggestedActionsRequest;
}

uint64_t storeEnumTagSinglePayload for LinkSuggestedActionsRequest.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_31ED4 + 4 * byte_3DD15[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_31F08 + 4 * asc_3DD10[v4]))();
}

uint64_t sub_31F08(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_31F10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x31F18LL);
  }
  return result;
}

uint64_t sub_31F24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x31F2CLL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_31F30(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_31F38(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for LinkSuggestedActionsRequest.CodingKeys()
{
  return &unk_4A780;
}

uint64_t OUTLINED_FUNCTION_1_11(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_2_10(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_5_9(uint64_t a1)
{
  return String.hash(into:)(a1, v2, v1);
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo14LNAutoShortcutCG_SSs5NeverOTg5075_s25SiriLinkSuggestionsPlugin013AutoShortcutsC22OwnerDefinitionFactoryC0E22e188PhraseResolverC16resolveParameter9parameter10suggestion11interaction11environmentSayypG0aC3Kit010ResolvableN0C_AL19CandidateSuggestion_pAL11Interaction_pAL19EnvironmentSnapshot_ptYaFSSSo06D57J0Ccfu3_33_727fba25be9f1dfe045bd6ea49c3456dASSSTf3nnnpk_nTf1cn_nTm( uint64_t a1)
{
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  while (v2)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    if (v2 < 0)
    {
      __break(1u);
      return;
    }

    uint64_t v3 = 0LL;
    while (v2 != v3)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, a1);
      }
      else {
        id v4 = *(id *)(a1 + 8 * v3 + 32);
      }
      uint64_t v5 = v4;
      id v6 = [v4 actionIdentifier];
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      uint64_t v9 = v8;

      unint64_t v10 = _swiftEmptyArrayStorage[2];
      if (v10 >= _swiftEmptyArrayStorage[3] >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v3;
      _swiftEmptyArrayStorage[2] = v10 + 1;
      char v11 = &_swiftEmptyArrayStorage[2 * v10];
      v11[4] = v7;
      void v11[5] = v9;
      if (v2 == v3) {
        return;
      }
    }

    __break(1u);
LABEL_15:
    if (a1 < 0) {
      uint64_t v12 = a1;
    }
    else {
      uint64_t v12 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    OUTLINED_FUNCTION_44_3();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(a1);
  }

void specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a5;
  uint64_t v7 = a3;
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    unint64_t v10 = 0LL;
    unint64_t v32 = (void *)LNSystemProtocolIdentifierConditionallyEnabled;
    uint64_t v33 = *(void *)(a1 + 16);
    uint64_t v11 = a1 + 40;
    uint64_t v27 = v9 - 1;
    uint64_t v12 = _swiftEmptyArrayStorage;
    uint64_t v28 = a1 + 40;
    while (1)
    {
      unint64_t v31 = v12;
      uint64_t v13 = (uint64_t *)(v11 + 16 * v10);
      unint64_t v14 = v10;
      uint64_t v15 = v33;
      while (1)
      {
        if (v14 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return;
        }

        if (*(void *)(a4 + 16)) {
          break;
        }
LABEL_12:
        ++v14;
        v13 += 2;
        if (v15 == v14)
        {
          uint64_t v7 = a3;
          uint64_t v5 = a5;
          goto LABEL_19;
        }
      }

      uint64_t v17 = *(v13 - 1);
      uint64_t v16 = *v13;
      swift_bridgeObjectRetain_n(*v13, 2LL);
      unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
      if ((v19 & 1) == 0)
      {
        swift_bridgeObjectRelease_n(v16, 2LL);
        goto LABEL_12;
      }

      uint64_t v20 = *(void *)(*(void *)(a4 + 56) + 8 * v18);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRelease(v16);
      if (!*(void *)(v20 + 16))
      {
        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease(v20);
        goto LABEL_12;
      }

      id v21 = v32;
      specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v21);
      char v23 = v22;
      swift_bridgeObjectRelease(v20);

      if ((v23 & 1) == 0) {
        break;
      }
      uint64_t v12 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v12 = v31;
      }

      uint64_t v7 = a3;
      unint64_t v24 = v12[2];
      unint64_t v25 = v24 + 1;
      if (v24 >= v12[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        unint64_t v25 = v24 + 1;
        uint64_t v12 = v31;
      }

      unint64_t v10 = v14 + 1;
      __int128 v12[2] = v25;
      os_log_type_t v26 = &v12[2 * v24];
      v26[4] = v17;
      v26[5] = v16;
      uint64_t v11 = v28;
      uint64_t v5 = a5;
      if (v27 == v14) {
        goto LABEL_19;
      }
    }

    swift_bridgeObjectRelease(v16);
    uint64_t v15 = v33;
    goto LABEL_12;
  }

void *specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  if (v6)
  {
    while (1)
    {
      uint64_t v29 = v5;
      unint64_t v7 = 0LL;
      unint64_t v32 = v5 & 0xC000000000000001LL;
      unint64_t v30 = a3;
      uint64_t v31 = v5 & 0xFFFFFFFFFFFFFF8LL;
      while (v32)
      {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
LABEL_7:
        uint64_t v9 = v8;
        a3 = v7 + 1;
        if (__OFADD__(v7, 1LL)) {
          goto LABEL_19;
        }
        id v10 = [v8 actionIdentifier];
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        uint64_t v13 = v12;

        specialized Set.contains(_:)(v11, v13, a2);
        LOBYTE(v__swift_destroy_boxed_opaque_existential_1(v0 + 10) = v14;
        uint64_t v15 = swift_bridgeObjectRelease(v13);
        if ((v10 & 1) != 0)
        {
          uint64_t v16 = v6;
          uint64_t v17 = a2;
          id v18 = [v9 actionIdentifier];
          uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
          uint64_t v21 = v20;

          if (!*(void *)(v30 + 16)
            || (unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v21), (v23 & 1) == 0))
          {

            swift_bridgeObjectRelease(v21);
            a2 = v17;
            uint64_t v6 = v16;
            uint64_t v5 = v29;
            goto LABEL_14;
          }

          char v24 = *(_BYTE *)(*(void *)(v30 + 56) + v22);
          uint64_t v15 = swift_bridgeObjectRelease(v21);
          a2 = v17;
          uint64_t v6 = v16;
          uint64_t v5 = v29;
          if ((v24 & 1) == 0)
          {

            goto LABEL_14;
          }
        }

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
        uint64_t v25 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v25);
        uint64_t v26 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v9);
        specialized ContiguousArray._endMutation()(v26);
LABEL_14:
        ++v7;
        if (a3 == v6)
        {
          a3 = v30;
          goto LABEL_24;
        }
      }

      if (v7 < *(void *)(v31 + 16)) {
        break;
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      if (v5 < 0) {
        uint64_t v27 = v5;
      }
      else {
        uint64_t v27 = v5 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v27);
      if (!v6) {
        goto LABEL_24;
      }
    }

    id v8 = *(id *)(v5 + 8 * v7 + 32);
    goto LABEL_7;
  }

LABEL_24:
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(a3);
  return _swiftEmptyArrayStorage;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v15))
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
    for (uint64_t i = 4LL; ; ++i)
    {
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1);
      }

      else
      {
        uint64_t v8 = *(void *)(a1 + 8 * i);
        swift_retain(v8);
      }

      uint64_t v9 = i - 3;
      if (__OFADD__(i - 4, 1LL)) {
        break;
      }
      uint64_t v20 = v8;
      closure #1 in AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.getConfigurators(for:)( &v20,  a2,  (uint64_t *)&v19);
      if (v3)
      {
        swift_release(a2);
        swift_bridgeObjectRelease(v6);
        swift_bridgeObjectRelease(a1);
        swift_release(v8);
        return v6;
      }

      swift_release(v8);
      if ((void)v19)
      {
        __int128 v18 = v19;
        if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6[2] + 1LL,  1LL,  (uint64_t)v6);
          uint64_t v6 = v13;
        }

        unint64_t v11 = v6[2];
        unint64_t v10 = v6[3];
        __int128 v12 = v18;
        if (v11 >= v10 >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v10 > 1,  v11 + 1,  1LL,  (uint64_t)v6);
          __int128 v12 = v18;
          uint64_t v6 = v14;
        }

        _OWORD v6[2] = v11 + 1;
        *(_OWORD *)&v6[2 * v11 + 4] = v12;
      }

      if (v9 == v5)
      {
        swift_release(a2);
        swift_bridgeObjectRelease(a1);
        return v6;
      }
    }

    __break(1u);
LABEL_19:
    if (a1 < 0) {
      uint64_t v15 = a1;
    }
    else {
      uint64_t v15 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

  swift_release(a2);
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

void *specialized Sequence.compactMap<A>(_:)( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v31 = a4;
  unint64_t v30 = a5;
  uint64_t v6 = a1;
  if (a1 >> 62) {
    goto LABEL_28;
  }
  uint64_t v7 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a1);
  while (v7)
  {
    unint64_t v35 = v6 & 0xC000000000000001LL;
    uint64_t v8 = _swiftEmptyArrayStorage;
    uint64_t v9 = 4LL;
    uint64_t v32 = v7;
    uint64_t v33 = v6;
    while (1)
    {
      id v10 = v35 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, v6) : *(id *)(v6 + 8 * v9);
      unint64_t v11 = v10;
      uint64_t v12 = v9 - 3;
      if (__OFADD__(v9 - 4, 1LL)) {
        break;
      }
      id v13 = objc_msgSend(v10, "orderedPhrases", v30, v31);
      type metadata accessor for NSObject( 0LL,  &lazy cache variable for type metadata for LNAutoShortcutLocalizedPhrase,  &OBJC_CLASS___LNAutoShortcutLocalizedPhrase_ptr);
      uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

      if ((unint64_t)v15 >> 62)
      {
        if (v15 < 0) {
          uint64_t v24 = v15;
        }
        else {
          uint64_t v24 = v15 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v15);
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter(v24);
        swift_bridgeObjectRelease(v15);
        if (!v25)
        {
LABEL_22:

          swift_bridgeObjectRelease(v15);
          goto LABEL_23;
        }
      }

      else if (!*(void *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFF8LL)))
      {
        goto LABEL_22;
      }

      if ((v15 & 0xC000000000000001LL) != 0)
      {
        id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v15);
      }

      else
      {
        id v16 = *(id *)(v15 + 32);
      }

      uint64_t v17 = v16;
      swift_bridgeObjectRelease(v15);
      id v18 = [v17 localizedPhrase];

      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      uint64_t v21 = v20;

      swift_bridgeObjectRetain(a3);
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v8 = v26;
      }

      unint64_t v22 = v8[2];
      if (v22 >= v8[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v8 = v27;
      }

      __int128 v8[2] = v22 + 1;
      char v23 = &v8[5 * v22];
      v23[4] = v19;
      v23[5] = v21;
      uint64_t v6 = v33;
      v23[6] = a2;
      v23[7] = a3;
      v23[8] = v11;
      uint64_t v7 = v32;
LABEL_23:
      ++v9;
      if (v12 == v7) {
        goto LABEL_33;
      }
    }

    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    if (v6 < 0) {
      uint64_t v28 = v6;
    }
    else {
      uint64_t v28 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v28);
  }

  uint64_t v8 = _swiftEmptyArrayStorage;
LABEL_33:
  swift_bridgeObjectRelease(v6);

  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(a3);
  return v8;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFF8LL));
  swift_bridgeObjectRetain(a2);
  if (v4)
  {
    while (1)
    {
      id v5 = (a2 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a2)
         : *(id *)(a2 + 32);
      uint64_t v6 = v5;
      type metadata accessor for NSObject( 0LL,  (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol,  &OBJC_CLASS___LNSystemProtocol_ptr);
      char v7 = static NSObject.== infix(_:_:)(v6, a1);

      if ((v7 & 1) != 0) {
        break;
      }
      if (v4 != 1)
      {
        uint64_t v10 = 5LL;
        while (1)
        {
          id v11 = (a2 & 0xC000000000000001LL) != 0
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, a2)
              : *(id *)(a2 + 8 * v10);
          uint64_t v12 = v11;
          uint64_t v13 = v10 - 3;
          if (__OFADD__(v10 - 4, 1LL)) {
            break;
          }
          char v8 = static NSObject.== infix(_:_:)(v11, a1);

          if ((v8 & 1) == 0)
          {
            ++v10;
            if (v13 != v4) {
              continue;
            }
          }

          goto LABEL_9;
        }

        __break(1u);
LABEL_19:
        uint64_t v14 = a2 < 0 ? a2 : a2 & 0xFFFFFFFFFFFFFF8LL;
        swift_bridgeObjectRetain(a2);
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v14);
        if (v4) {
          continue;
        }
      }

      goto LABEL_8;
    }

    char v8 = 1;
  }

  else
  {
LABEL_8:
    char v8 = 0;
  }

LABEL_9:
  swift_bridgeObjectRelease(a2);
  return v8 & 1;
}

uint64_t static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:)( void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = __swift_project_boxed_opaque_existential_1(a1, v7);
  uint64_t v10 = (void *)OUTLINED_FUNCTION_50_1((uint64_t)&async function pointer to specialized static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:));
  *(void *)(v4 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v10;
  *uint64_t v10 = v4;
  v10[1] = protocol witness for InternalGenerator.generateCandidateSuggestions(interaction:environment:factory:) in conformance LinkSuggestionsGenerator;
  return v12(v9, a2, a3, v3, v7, v8);
}

void *AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.phraseParameterName.unsafeMutableAddressor()
{
  return &static AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.phraseParameterName;
}

unint64_t static AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.phraseParameterName.getter()
{
  return OUTLINED_FUNCTION_6(19LL);
}

void *AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.appIdParameterName.unsafeMutableAddressor()
{
  return &static AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.appIdParameterName;
}

unint64_t static AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.appIdParameterName.getter()
{
  return OUTLINED_FUNCTION_6(18LL);
}

void *AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.phraseResolverIdentifier.unsafeMutableAddressor()
{
  return &static AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.phraseResolverIdentifier;
}

unint64_t static AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.phraseResolverIdentifier.getter()
{
  return OUTLINED_FUNCTION_6(26LL);
}

void *AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.appIdResolverIdentifier.unsafeMutableAddressor()
{
  return &static AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.appIdResolverIdentifier;
}

unint64_t static AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.appIdResolverIdentifier.getter()
{
  return OUTLINED_FUNCTION_6(25LL);
}

void *AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.contextCandidateAppDetailsKey.unsafeMutableAddressor()
{
  return &static AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.contextCandidateAppDetailsKey;
}

unint64_t static AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants.contextCandidateAppDetailsKey.getter()
{
  return OUTLINED_FUNCTION_6(31LL);
}

void static AutoShortcutsSuggestionsOwnerDefinitionFactory.handleDialog(dialogProperties:)( void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BehaviorAfterSpeaking(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_22_0();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingText?);
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_22_0();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = type metadata accessor for TemplatingText(0LL);
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_22_0();
  uint64_t v16 = v15 - v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  DialogProperties.resolvedPhrase.getter((uint64_t)v25);
  outlined init with take of AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase?((uint64_t)v25, (uint64_t)&v26);
  uint64_t v17 = v27;
  if (v27)
  {
    uint64_t v18 = v26;
    __int128 v30 = v28;
    uint64_t v24 = v29;
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TemplatingSection>);
    uint64_t v20 = type metadata accessor for TemplatingSection(0LL);
    uint64_t v21 = swift_allocObject( v19,  ((*(unsigned __int8 *)(*(void *)(v20 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v20 - 8) + 80LL))
          + *(void *)(*(void *)(v20 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v20 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v21 + outlined destroy of AppIntentDialogCallback(v0 + 16) = xmmword_3C030;
    OUTLINED_FUNCTION_26_1();
    TemplatingText.init(text:speakableTextOverride:)(v18, v17, 0LL, 0LL);
    __swift_storeEnumTagSinglePayload(v12, 1LL, 1LL, v13);
    TemplatingSection.init(id:content:caption:spokenOnly:)(0xD000000000000010LL, 0x800000000003F250LL, v16, v12, 0LL);
    (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))( v8,  enum case for BehaviorAfterSpeaking.defaultBehavior(_:),  v4);
    a2[3] = type metadata accessor for TemplatingResult(0LL);
    __swift_allocate_boxed_opaque_existential_0Tm(a2);
    uint64_t v22 = OUTLINED_FUNCTION_69_1(0x68736F747561LL);
    TemplatingResult.init(templateIdentifier:sections:behaviorAfterSpeaking:)(v22, v23, v21, v8);
    OUTLINED_FUNCTION_2();
    __int128 v31 = v30;
    outlined release of String((uint64_t)&v31);
  }

  else
  {
    a2[3] = &type metadata for String;
    *a2 = 0LL;
    a2[1] = 0xE000000000000000LL;
  }

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed DialogProperties) -> (@out Any)( uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed DialogProperties) -> (@out Any)(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Any, Any?>);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v27[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(a1 + 40);
  __int128 v26 = *(_OWORD *)(a1 + 24);
  uint64_t v11 = v26;
  __swift_project_boxed_opaque_existential_1((void *)a1, v26);
  outlined init with copy of LinkClient(a2, (uint64_t)&v30);
  uint64_t v12 = type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver();
  uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
  AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.init(linkClient:)(&v30);
  uint64_t v28 = v12;
  lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver,  v14,  (uint64_t (*)(uint64_t))type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver,  (uint64_t)&protocol conformance descriptor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver);
  uint64_t v29 = v15;
  v27[0] = v13;
  uint64_t v16 = static AutoShortcutsSuggestionsOwnerDefinitionFactory.createPhraseParameter(clock:)(a4);
  __int128 v31 = v26;
  uint64_t v32 = v10;
  __swift_allocate_boxed_opaque_existential_0Tm(&v30);
  SuggestionDetailsBuilder.parameter(parameterName:resolver:resolveParam:)( 0xD000000000000013LL,  0x800000000003F7C0LL,  v27,  v16,  v11,  v10);
  swift_release(v16);
  outlined destroy of CoreSignalTypes?((uint64_t)v27, &demangling cache variable for type metadata for Resolver?);
  __swift_destroy_boxed_opaque_existential_1(&v30);
  uint64_t v17 = *(void *)(a1 + 40);
  __int128 v26 = *(_OWORD *)(a1 + 24);
  uint64_t v18 = v26;
  __swift_project_boxed_opaque_existential_1((void *)a1, v26);
  uint64_t v19 = type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver();
  uint64_t v20 = swift_allocObject(v19, 32LL, 7LL);
  *(void *)(v20 + outlined destroy of AppIntentDialogCallback(v0 + 16) = 0xD000000000000019LL;
  *(void *)(v20 + 24) = 0x800000000003DF60LL;
  uint64_t v28 = v19;
  lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( &lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver,  v21,  (uint64_t (*)(uint64_t))type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver,  (uint64_t)&protocol conformance descriptor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver);
  uint64_t v29 = v22;
  v27[0] = v20;
  uint64_t v23 = type metadata accessor for ResolvableParameter(0LL);
  static SuggestionTransformers.passthroughParameterForLogging()(v23);
  uint64_t v24 = ResolvableParameter.__allocating_init(typeIdentifier:required:loggingKeyTransformer:)( 0xD000000000000019LL,  0x800000000003DF60LL,  1LL,  v9);
  __int128 v31 = v26;
  uint64_t v32 = v17;
  __swift_allocate_boxed_opaque_existential_0Tm(&v30);
  SuggestionDetailsBuilder.parameter(parameterName:resolver:resolveParam:)( 0xD000000000000012LL,  0x800000000003F7E0LL,  v27,  v24,  v18,  v17);
  swift_release(v24);
  outlined destroy of CoreSignalTypes?((uint64_t)v27, &demangling cache variable for type metadata for Resolver?);
  return __swift_destroy_boxed_opaque_existential_1(&v30);
}

void AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.__allocating_init(linkClient:)( __int128 *a1)
{
}

uint64_t static AutoShortcutsSuggestionsOwnerDefinitionFactory.createPhraseParameter(clock:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Any, Any?>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v19 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v19 - v10;
  type metadata accessor for ResolvableParameter(0LL);
  outlined init with copy of LinkClient(a1, (uint64_t)v20);
  uint64_t v12 = swift_allocObject(&unk_4ABB8, 56LL, 7LL);
  outlined init with take of LinkDialogIdProvider(v20, v12 + 16);
  outlined init with copy of LinkClient(a1, (uint64_t)v20);
  uint64_t v13 = swift_allocObject(&unk_4ABE0, 56LL, 7LL);
  outlined init with take of LinkDialogIdProvider(v20, v13 + 16);
  static SuggestionTransformers.obfuscateParametersForLogging(numCharacters:rngFactory:currentDate:)( 16LL,  0LL,  partial apply for closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.rngFactory(_:),  v12,  partial apply for closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.createPhraseParameter(clock:),  v13);
  swift_release(v13);
  swift_release(v12);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v9, v2);
  uint64_t v14 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v15 = (v14 + 16) & ~v14;
  uint64_t v16 = swift_allocObject(&unk_4AC08, v15 + v4, v14 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v16 + v15, v6, v2);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  Transformer.init(transform:)( partial apply for closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.stripOutPhrase(_:),  v16,  (char *)&type metadata for Any + 8,  v17);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
  return ResolvableParameter.__allocating_init(typeIdentifier:required:loggingKeyTransformer:)( 0xD00000000000001ALL,  0x800000000003DF40LL,  1LL,  v11);
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver.__allocating_init()()
{
  uint64_t result = OUTLINED_FUNCTION_1(v0, 32LL);
  *(void *)(result + outlined destroy of AppIntentDialogCallback(v0 + 16) = 0xD000000000000019LL;
  *(void *)(result + 24) = 0x800000000003DF60LL;
  return result;
}

void AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.__allocating_init(linkClient:)( __int128 *a1)
{
}

uint64_t closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.stripOutPhrase(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((swift_dynamicCast( &v15,  &v20,  (char *)&type metadata for Any + 8,  &type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase,  6LL) & 1) == 0) {
    return outlined init with copy of Any(a1, a2);
  }
  uint64_t v5 = v15;
  uint64_t v4 = v16;
  uint64_t v7 = v17;
  uint64_t v6 = v18;
  id v22 = v19;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Any, Any?>);
  uint64_t v9 = (void (*)(uint64_t *))Transformer.transform.getter(v8);
  uint64_t v11 = v10;
  uint64_t v20 = v5;
  uint64_t v21 = v4;
  swift_bridgeObjectRetain(v4);
  v12._uint64_t countAndFlagsBits = 95LL;
  v12._object = (void *)0xE100000000000000LL;
  String.append(_:)(v12);
  swift_bridgeObjectRetain(v6);
  v13._uint64_t countAndFlagsBits = v7;
  v13._object = v6;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v6);
  uint64_t v18 = &type metadata for String;
  uint64_t v15 = v20;
  uint64_t v16 = v21;
  v9(&v15);

  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v4);
  swift_release(v11);
  return __swift_destroy_boxed_opaque_existential_1(&v15);
}

uint64_t closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.createPhraseParameter(clock:)( void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  double v3 = dispatch thunk of Clock.getCurrentTime()(v1, v2);
  return Date.init(timeIntervalSince1970:)(v3);
}

uint64_t closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.rngFactory(_:)@<X0>( double a1@<X0>, char a2@<W1>, void *a3@<X2>, void *a4@<X8>)
{
  if ((a2 & 1) != 0)
  {
    uint64_t v6 = a3[3];
    uint64_t v7 = a3[4];
    __swift_project_boxed_opaque_existential_1(a3, v6);
    a1 = dispatch thunk of Clock.getCurrentTime()(v6, v7);
  }

  a4[3] = type metadata accessor for SimpleRNG(0LL);
  lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( &lazy protocol witness table cache variable for type SimpleRNG and conformance SimpleRNG,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for SimpleRNG,  (uint64_t)&protocol conformance descriptor for SimpleRNG);
  a4[4] = v8;
  __swift_allocate_boxed_opaque_existential_0Tm(a4);
  return SimpleRNG.init(seed:)(*(void *)&a1);
}

uint64_t static AutoShortcutsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:)( uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  return OUTLINED_FUNCTION_22((uint64_t)static AutoShortcutsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:));
}

uint64_t static AutoShortcutsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:)()
{
  if (one-time initialization token for autoshortcutsOwner != -1) {
    swift_once( &one-time initialization token for autoshortcutsOwner,  one-time initialization function for autoshortcutsOwner);
  }
  uint64_t v1 = (int *)v0[12];
  uint64_t v2 = static LinkSuggestionsOwners.autoshortcutsOwner;
  v0[5] = OUTLINED_FUNCTION_37_2();
  OUTLINED_FUNCTION_80_1( (unint64_t *)&lazy protocol witness table cache variable for type DefaultOwner and conformance DefaultOwner,  v3,  (uint64_t (*)(uint64_t))&type metadata accessor for DefaultOwner,  (uint64_t)&protocol conformance descriptor for DefaultOwner);
  v0[6] = v4;
  v0[2] = v2;
  uint64_t v5 = v1[1];
  uint64_t v8 = (uint64_t (*)(void *))((char *)v1 + *v1);
  swift_retain(v2);
  uint64_t v6 = (void *)swift_task_alloc(v5);
  v0[15] = v6;
  *uint64_t v6 = v0;
  v6[1] = static AutoShortcutsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:);
  return v8(v0 + 2);
}

{
  void *v0;
  uint64_t refreshed;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v13)(void *, void, void *, void);
  refreshed = dispatch thunk of SuggestionOwnerDefinitionBuilder.getRefreshService()();
  uint64_t v3 = v2;
  v0[17] = refreshed;
  uint64_t v4 = [objc_allocWithZone(LNMetadataProvider) init];
  uint64_t v5 = [objc_allocWithZone(LNSuggestionsProvider) init];
  uint64_t v6 = type metadata accessor for LinkRegistryObserver();
  OUTLINED_FUNCTION_1(v6, 32LL);
  uint64_t v7 = swift_unknownObjectRetain(refreshed);
  uint64_t v8 = LinkRegistryObserver.init(refreshableService:)(v7, v3);
  uint64_t v9 = type metadata accessor for DefaultLinkClient();
  OUTLINED_FUNCTION_1(v9, 48LL);
  uint64_t v10 = DefaultLinkClient.init(metadataProvider:suggestionsProvider:registryObserver:)((uint64_t)v4, (uint64_t)v5, v8);
  v0[18] = v10;
  static Clocks.getSystemClock()();
  uint64_t v11 = (void *)OUTLINED_FUNCTION_50_1((uint64_t)&async function pointer to specialized static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:));
  v0[19] = v11;
  *uint64_t v11 = v0;
  v11[1] = static AutoShortcutsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:);
  return v13(v10, v0[16], v0 + 7, v0[14]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 128);
  swift_release(*(void *)(v0 + 144));
  swift_release(v2);
  swift_unknownObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 160));
}

uint64_t static AutoShortcutsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:)( uint64_t a1)
{
  uint64_t v2 = (void *)(*(void *)v1 + 16LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 120LL);
  *(void *)(*(void *)v1 + 128LL) = a1;
  OUTLINED_FUNCTION_49_1(v3);
  __swift_destroy_boxed_opaque_existential_1(v2);
  OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_11_1(v4, v5, v6);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v2 = (void *)(*(void *)v1 + 56LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 152LL);
  *(void *)(*(void *)v1 + 16Hasher.init(_seed:)(v3, 0LL) = a1;
  OUTLINED_FUNCTION_49_1(v3);
  __swift_destroy_boxed_opaque_existential_1(v2);
  OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_11_1(v4, v5, v6);
}

void DialogProperties.resolvedPhrase.getter(uint64_t a1@<X8>)
{
}

void AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.bundleIdentifier.getter()
{
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver.resolveParameter(parameter:suggestion:interaction:environment:)( uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 48) = a2;
  return OUTLINED_FUNCTION_22((uint64_t)AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver.resolveParameter(parameter:suggestion:interaction:environment:));
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver.resolveParameter(parameter:suggestion:interaction:environment:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_18_3(*(void **)(v0 + 48));
  uint64_t v3 = v2;
  *(void *)(v0 + outlined init with copy of LinkClient(v0 + 16, v0 + 56) = v1;
  *(void *)(v0 + 64) = v2;
  uint64_t ObjectType = swift_getObjectType(v1);
  *(void *)(v0 + 7__swift_destroy_boxed_opaque_existential_1(v0 + 2) = ObjectType;
  uint64_t v5 = OUTLINED_FUNCTION_87_0(ObjectType, *(void *)(v3 + 8));
  return OUTLINED_FUNCTION_5_2( (uint64_t)AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver.resolveParameter(parameter:suggestion:interaction:environment:),  v5,  v6);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v1 = Context.getCandidateApplicationDetails()(v0[9], v0[8]);
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_65_2(v1, v2, v4, v5);
  v0[10] = v3;
  OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_16_6(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  os_log_type_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v1 = *(void *)(v0 + 80);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 16);
    uint64_t v3 = *(void **)(v0 + 40);
    swift_bridgeObjectRelease(*(void *)(v0 + 32));

    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v5 = (void *)OUTLINED_FUNCTION_1(v4, 64LL);
    *((_OWORD *)v5 + 1) = xmmword_3C030;
    v5[7] = &type metadata for String;
    v5[4] = v2;
    v5[5] = v1;
  }

  else
  {
    if (one-time initialization token for autoshortcutsSuggestions != -1) {
      swift_once( &one-time initialization token for autoshortcutsSuggestions,  one-time initialization function for autoshortcutsSuggestions);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    uint64_t v7 = (void *)__swift_project_value_buffer(v6, (uint64_t)static Logger.autoshortcutsSuggestions);
    Logger.logObject.getter(v7);
    uint64_t v8 = OUTLINED_FUNCTION_32_2();
    if (OUTLINED_FUNCTION_7_2(v8))
    {
      uint64_t v9 = (_WORD *)OUTLINED_FUNCTION_16_0(2LL);
      *uint64_t v9 = 0;
      OUTLINED_FUNCTION_43_2(&dword_0, v10, v11, "Didn't find a bundle identifier");
      OUTLINED_FUNCTION_3_0((uint64_t)v9);
    }

    uint64_t v5 = _swiftEmptyArrayStorage;
  }

  return (*(uint64_t (**)(void *))(v0 + 8))(v5);
}

uint64_t Context.getCandidateApplicationDetails()(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for autoshortcutsOwner != -1) {
    swift_once( &one-time initialization token for autoshortcutsOwner,  one-time initialization function for autoshortcutsOwner);
  }
  uint64_t v4 = static LinkSuggestionsOwners.autoshortcutsOwner;
  uint64_t v5 = OUTLINED_FUNCTION_37_2();
  void v11[3] = v5;
  OUTLINED_FUNCTION_80_1( (unint64_t *)&lazy protocol witness table cache variable for type DefaultOwner and conformance DefaultOwner,  v6,  (uint64_t (*)(uint64_t))&type metadata accessor for DefaultOwner,  (uint64_t)&protocol conformance descriptor for DefaultOwner);
  uint64_t v8 = v7;
  v11[4] = v7;
  v11[0] = v4;
  __swift_project_boxed_opaque_existential_1(v11, v5);
  void v10[3] = v5;
  void v10[4] = *(void *)(v8 + 8);
  __swift_allocate_boxed_opaque_existential_0Tm(v10);
  (*(void (**)(void))(*(void *)(v5 - 8) + 16LL))();
  swift_retain(v4);
  Context.getParam(for:key:)(v12, v10, 0xD00000000000001FLL, 0x800000000003F800LL, a1, a2);
  __swift_destroy_boxed_opaque_existential_1(v10);
  __swift_destroy_boxed_opaque_existential_1(v11);
  if (v12[3])
  {
    if (swift_dynamicCast( v11,  v12,  (char *)&type metadata for Any + 8,  &type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails,  6LL)) {
      return v11[0];
    }
  }

  else
  {
    outlined destroy of CoreSignalTypes?((uint64_t)v12, &demangling cache variable for type metadata for Any?);
  }

  return OUTLINED_FUNCTION_84_1();
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + outlined destroy of AppIntentDialogCallback(v0 + 16) = 0xD000000000000019LL;
  *(void *)(v0 + 24) = 0x800000000003DF60LL;
  return result;
}

uint64_t protocol witness for InternalResolver.resolveParameter(parameter:suggestion:interaction:environment:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_4F6EC);
  *(void *)(v2 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for SignalSubscriber.getAsyncLookupSubscriptions() in conformance LinkSuggestionsGenerator;
  v4[6] = a2;
  return swift_task_switch( AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver.resolveParameter(parameter:suggestion:interaction:environment:),  0LL,  0LL);
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.init(linkClient:)( __int128 *a1)
{
  *(void *)(v1 + outlined destroy of AppIntentDialogCallback(v0 + 16) = 0xD00000000000001ALL;
  *(void *)(v1 + 24) = 0x800000000003DF40LL;
  outlined init with take of LinkDialogIdProvider(a1, v1 + 32);
  return v1;
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.resolveParameter(parameter:suggestion:interaction:environment:)( uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 240) = a2;
  *(void *)(v3 + 248) = v2;
  return OUTLINED_FUNCTION_22((uint64_t)AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.resolveParameter(parameter:suggestion:interaction:environment:));
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.resolveParameter(parameter:suggestion:interaction:environment:)()
{
  if (one-time initialization token for autoshortcutsSuggestions != -1) {
    swift_once( &one-time initialization token for autoshortcutsSuggestions,  one-time initialization function for autoshortcutsSuggestions);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.autoshortcutsSuggestions);
  *(void *)(v1 + 2outlined init with copy of LinkClient(v0 + 16, v0 + 56) = v3;
  uint64_t v4 = (os_log_s *)v3;
  Logger.logObject.getter(v3);
  os_log_type_t v5 = OUTLINED_FUNCTION_32_2();
  if (OUTLINED_FUNCTION_64_1(v5))
  {
    uint64_t v6 = OUTLINED_FUNCTION_16_0(22LL);
    uint64_t v7 = OUTLINED_FUNCTION_16_0(32LL);
    uint64_t v15 = v7;
    *(_DWORD *)uint64_t v6 = 136315394;
    *(void *)(v1 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0xD00000000000003FLL,  0x800000000003F820LL,  &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 224, v1 + 232, v6 + 4);
    *(_WORD *)(v6 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2048;
    *(void *)(v1 + 23__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 147LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 232, v1 + 240, v6 + 14);
    OUTLINED_FUNCTION_81(&dword_0, v4, v0, "Function: %s, line: %ld", (uint8_t *)v6);
    OUTLINED_FUNCTION_24_5((uint64_t)&type metadata for Any);
    OUTLINED_FUNCTION_3_0(v7);
    OUTLINED_FUNCTION_3_0(v6);
  }

  uint64_t v8 = OUTLINED_FUNCTION_18_3(*(void **)(v1 + 240));
  uint64_t v10 = v9;
  *(void *)(v1 + 264) = v8;
  *(void *)(v1 + 27__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v9;
  uint64_t ObjectType = swift_getObjectType(v8);
  *(void *)(v1 + 280) = ObjectType;
  uint64_t v12 = OUTLINED_FUNCTION_87_0(ObjectType, *(void *)(v10 + 8));
  return swift_task_switch( AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.resolveParameter(parameter:suggestion:interaction:environment:),  v12,  v13);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v1 = Context.getCandidateApplicationDetails()(v0[35], v0[34]);
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_65_2(v1, v2, v4, v5);
  v0[36] = v1;
  v0[37] = v3;
  OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_5_2(v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  os_log_s *v4;
  id v5;
  os_log_type_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  os_log_s *v37;
  uint64_t v38;
  id v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  os_log_s *v56;
  id v57;
  unint64_t v58;
  id v59;
  uint64_t v60;
  os_log_type_t v61;
  BOOL v62;
  void *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80[2];
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v3 = *(void **)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v4 = *(os_log_s **)(v0 + 256);
  OUTLINED_FUNCTION_58_0(*(void *)(v0 + 296));
  OUTLINED_FUNCTION_58_0(v2);
  os_log_type_t v5 = v3;
  OUTLINED_FUNCTION_58_0(v1);
  Logger.logObject.getter(v5);
  uint64_t v6 = OUTLINED_FUNCTION_32_2();
  if (OUTLINED_FUNCTION_7_2(v6))
  {
    uint64_t v7 = *(void *)(v0 + 344);
    uint64_t v8 = *(void **)(v0 + 304);
    uint64_t v9 = *(void *)(v0 + 312);
    uint64_t v10 = *(void *)(v0 + 288);
    uint64_t v11 = *(void *)(v0 + 296);
    uint64_t v12 = OUTLINED_FUNCTION_16_0(22LL);
    uint64_t v78 = OUTLINED_FUNCTION_16_0(64LL);
    v80[0] = v78;
    *(_DWORD *)uint64_t v12 = 136315394;
    swift_bridgeObjectRetain(v11);
    *(void *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v12 + 4);
    OUTLINED_FUNCTION_34_1(v11);
    OUTLINED_FUNCTION_51(v9);

    *(_WORD *)(v12 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    uint64_t v13 = OUTLINED_FUNCTION_83_0();
    uint64_t v14 = Dictionary.description.getter( v13,  &type metadata for String,  &type metadata for Bool,  &protocol witness table for String);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease(v7);
    uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, v80);
    *(void *)(v0 + 176) = v17;
    OUTLINED_FUNCTION_75_2(v17, v0 + 184);
    OUTLINED_FUNCTION_57();
    OUTLINED_FUNCTION_51(v7);
    OUTLINED_FUNCTION_81(&dword_0, v4, (os_log_type_t)v5, "ConditionallyEnabledIntent state for %s: %s", (uint8_t *)v12);
    OUTLINED_FUNCTION_70_1(v18, v19, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_3_0(v78);
    OUTLINED_FUNCTION_3_0(v12);
  }

  else
  {
    uint64_t v21 = *(void **)(v0 + 304);
    uint64_t v20 = *(void *)(v0 + 312);
    id v22 = *(void *)(v0 + 296);
    OUTLINED_FUNCTION_51(*(void *)(v0 + 344));

    OUTLINED_FUNCTION_51(v20);
    OUTLINED_FUNCTION_51(v22);
  }

  uint64_t v23 = *(void *)(v0 + 344);
  uint64_t v24 = *(void *)(v0 + 352);
  uint64_t v25 = *(void *)(v0 + 320);
  OUTLINED_FUNCTION_35();
  __int128 v26 = OUTLINED_FUNCTION_40_2();
  uint64_t v27 = specialized _ArrayProtocol.filter(_:)(v26, v25, v23);
  uint64_t v28 = *(void *)(v0 + 200);
  *(void *)(v0 + 200) = v27;
  swift_bridgeObjectRelease(v28);
  uint64_t v29 = *(void *)(v0 + 200);
  __int128 v30 = *(void *)(v0 + 320);
  if ((v29 & 0x8000000000000000LL) != 0 || (v29 & 0x4000000000000000LL) != 0)
  {
    OUTLINED_FUNCTION_58_0(*(void *)(v0 + 200));
    OUTLINED_FUNCTION_35();
    specialized _copyCollectionToContiguousArray<A>(_:)(v29);
    __int128 v31 = v72;
    OUTLINED_FUNCTION_2();
    __int128 v30 = *(void *)(v0 + 320);
  }

  else
  {
    __int128 v31 = v29 & 0xFFFFFFFFFFFFFF8LL;
    OUTLINED_FUNCTION_58_0(*(void *)(v0 + 200));
    OUTLINED_FUNCTION_35();
  }

  v80[0] = v31;
  specialized MutableCollection<>.sort(by:)(v80, v30);
  if (v24) {
    return swift_release(v80[0]);
  }
  uint64_t v33 = v0 + 72;
  uint64_t v77 = v0 + 144;
  uint64_t v79 = v0 + 128;
  uint64_t v34 = v0 + 200;
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_79_1(v80[0]);
  uint64_t v36 = *(void **)(v0 + 304);
  unint64_t v35 = *(void *)(v0 + 312);
  uint64_t v37 = *(os_log_s **)(v0 + 256);
  uint64_t v38 = *(void *)(v0 + 200);
  OUTLINED_FUNCTION_58_0(*(void *)(v0 + 296));
  OUTLINED_FUNCTION_58_0(v35);
  uint64_t v39 = v36;
  OUTLINED_FUNCTION_58_0(v38);
  Logger.logObject.getter(v39);
  uint64_t v40 = OUTLINED_FUNCTION_106();
  if (OUTLINED_FUNCTION_49_3(v40))
  {
    uint64_t v41 = OUTLINED_FUNCTION_16_0(22LL);
    uint64_t v42 = OUTLINED_FUNCTION_16_0(32LL);
    v80[0] = v42;
    *(_DWORD *)uint64_t v41 = 134218242;
    __int128 v75 = v42;
    if ((unint64_t)v38 >> 62)
    {
      if (v38 < 0) {
        __int128 v73 = v38;
      }
      else {
        __int128 v73 = v38 & 0xFFFFFFFFFFFFFF8LL;
      }
      OUTLINED_FUNCTION_47_0();
      uint64_t v43 = _CocoaArrayWrapper.endIndex.getter(v73);
      OUTLINED_FUNCTION_88_0();
    }

    else
    {
      uint64_t v43 = *(void *)((char *)&dword_10 + (v38 & 0xFFFFFFFFFFFFF8LL));
    }

    uint64_t v44 = *(void **)(v0 + 304);
    uint64_t v74 = *(void *)(v0 + 312);
    uint64_t v45 = *(void *)(v0 + 288);
    uint64_t v46 = *(void *)(v0 + 296);
    OUTLINED_FUNCTION_88_0();
    *(void *)(v0 + 128) = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v79, v0 + 136, v41 + 4);
    OUTLINED_FUNCTION_88_0();
    *(_WORD *)(v41 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    OUTLINED_FUNCTION_83_0();
    *(void *)(v0 + 136) = OUTLINED_FUNCTION_79_0(v45, v47, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v77, v41 + 14);
    OUTLINED_FUNCTION_34_1(v46);
    OUTLINED_FUNCTION_51(v74);

    OUTLINED_FUNCTION_81(&dword_0, v37, v40, "%ld AppShortcuts eligible for suggestions in %s", (uint8_t *)v41);
    OUTLINED_FUNCTION_9_3(v75, v48, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_3_0(v75);
    OUTLINED_FUNCTION_3_0(v41);

    uint64_t v34 = v0 + 200;
    uint64_t v33 = v0 + 72;
  }

  else
  {
    uint64_t v50 = *(void **)(v0 + 304);
    unint64_t v49 = *(void *)(v0 + 312);
    uint64_t v51 = *(void *)(v0 + 296);
    OUTLINED_FUNCTION_51(v38);

    OUTLINED_FUNCTION_51(v49);
    OUTLINED_FUNCTION_51(v51);
  }

  uint64_t v53 = *(void **)(v0 + 304);
  unint64_t v52 = *(void *)(v0 + 312);
  id v54 = *(void *)(v0 + 288);
  uint64_t v55 = *(void *)(v0 + 296);
  unint64_t v56 = *(os_log_s **)(v0 + 256);
  OUTLINED_FUNCTION_1_5(v34, v33, 0LL);
  OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_35();
  unint64_t v57 = v53;
  uint64_t v58 = OUTLINED_FUNCTION_83_0();
  OUTLINED_FUNCTION_35_4(v58);
  OUTLINED_FUNCTION_81_2();
  OUTLINED_FUNCTION_58_0(v55);
  OUTLINED_FUNCTION_58_0(v52);
  uint64_t v59 = v57;
  uint64_t v60 = OUTLINED_FUNCTION_70();
  Logger.logObject.getter(v60);
  uint64_t v61 = OUTLINED_FUNCTION_106();
  unint64_t v62 = os_log_type_enabled(v56, v61);
  unint64_t v63 = *(void **)(v0 + 304);
  uint64_t v64 = *(void *)(v0 + 312);
  uint64_t v65 = *(void *)(v0 + 296);
  if (v62)
  {
    uint64_t v76 = *(void *)(v0 + 288);
    uint64_t v66 = OUTLINED_FUNCTION_16_0(22LL);
    uint64_t v67 = OUTLINED_FUNCTION_16_0(32LL);
    v80[0] = v67;
    OUTLINED_FUNCTION_60_3(3.8521e-34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v77, v0 + 152, v68);
    OUTLINED_FUNCTION_59_0();
    *(_WORD *)(v66 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
    OUTLINED_FUNCTION_35();
    *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v65, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v79, v66 + 14);
    OUTLINED_FUNCTION_34_1(v65);
    OUTLINED_FUNCTION_51(v64);

    OUTLINED_FUNCTION_81(&dword_0, v56, v61, "%ld AppShortcut resolved phrases for %s", (uint8_t *)v66);
    OUTLINED_FUNCTION_9_3(v67, v69, (uint64_t)&type metadata for Any + 8);
    OUTLINED_FUNCTION_3_0(v67);
    OUTLINED_FUNCTION_3_0(v66);
  }

  else
  {
    OUTLINED_FUNCTION_59_0();

    OUTLINED_FUNCTION_51(v64);
    OUTLINED_FUNCTION_51(v65);
  }

  uint64_t v70 = *(void **)(v0 + 304);
  __int128 v71 = specialized _arrayForceCast<A, B>(_:)(v54);
  OUTLINED_FUNCTION_59_0();
  OUTLINED_FUNCTION_78_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_2();

  return (*(uint64_t (**)(void *))(v0 + 8))(v71);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  os_log_s *v3;
  os_log_type_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v2 = *(void **)(v0 + 304);
  uint64_t v1 = *(void *)(v0 + 312);
  OUTLINED_FUNCTION_58_0(*(void *)(v0 + 296));
  OUTLINED_FUNCTION_58_0(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  uint64_t v4 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_64_1(v4))
  {
    os_log_type_t v5 = *(void **)(v0 + 304);
    uint64_t v14 = *(void *)(v0 + 312);
    uint64_t v7 = *(void *)(v0 + 288);
    uint64_t v6 = *(void *)(v0 + 296);
    uint64_t v8 = (uint8_t *)OUTLINED_FUNCTION_16_0(12LL);
    uint64_t v9 = OUTLINED_FUNCTION_16_0(32LL);
    uint64_t v15 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    *(void *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v8 + 4);
    OUTLINED_FUNCTION_34_1(v6);
    OUTLINED_FUNCTION_51(v14);

    _os_log_impl(&dword_0, v3, (os_log_type_t)v2, "Could not retrieve AppIntents state from '%s'", v8, 0xCu);
    OUTLINED_FUNCTION_24_5((uint64_t)&type metadata for Any);
    OUTLINED_FUNCTION_3_0(v9);
    OUTLINED_FUNCTION_3_0((uint64_t)v8);
  }

  else
  {
    uint64_t v11 = *(void **)(v0 + 304);
    uint64_t v10 = *(void *)(v0 + 312);
    uint64_t v12 = *(void *)(v0 + 296);

    OUTLINED_FUNCTION_51(v10);
    OUTLINED_FUNCTION_51(v12);
  }

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_78_2();
  return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
}

void AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.resolveParameter(parameter:suggestion:interaction:environment:)( uint64_t a1)
{
  uint64_t v2 = v1[37];
  if (v2)
  {
    uint64_t v3 = v1 + 25;
    uint64_t v4 = v1[36];
    uint64_t v6 = v1[4];
    os_log_type_t v5 = (void *)v1[5];
    uint64_t v7 = (void *)v1[31];
    uint64_t v8 = (os_log_s *)v1[32];
    v1[38] = v5;
    v1[39] = v6;
    uint64_t v9 = v7[7];
    uint64_t v10 = v7[8];
    int v103 = v7;
    uint64_t v101 = v7 + 4;
    __swift_project_boxed_opaque_existential_1(v7 + 4, v9);
    v1[25] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 32))(v4, v2, v9, v10);
    OUTLINED_FUNCTION_58_0(v2);
    OUTLINED_FUNCTION_58_0(v6);
    id v11 = v5;
    uint64_t v12 = v8;
    Logger.logObject.getter(v11);
    os_log_type_t v13 = OUTLINED_FUNCTION_32_2();
    uint64_t v105 = (uint64_t)(v1 + 25);
    if (OUTLINED_FUNCTION_49_3(v13))
    {
      uint64_t v100 = v11;
      uint64_t v14 = OUTLINED_FUNCTION_16_0(22LL);
      uint64_t v15 = OUTLINED_FUNCTION_16_0(32LL);
      v106[0] = v15;
      *(_DWORD *)uint64_t v14 = 134218242;
      OUTLINED_FUNCTION_1_5((uint64_t)(v1 + 25), (uint64_t)(v1 + 6), 0LL);
      uint64_t v16 = *v3;
      if ((unint64_t)*v3 >> 62)
      {
        if (v16 < 0) {
          uint64_t v94 = *v3;
        }
        else {
          uint64_t v94 = v16 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(*v3);
        uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v94);
        swift_bridgeObjectRelease(v16);
      }

      else
      {
        uint64_t v17 = *(void *)((char *)&dword_10 + (v16 & 0xFFFFFFFFFFFFF8LL));
      }

      uint64_t v18 = v6;
      uint64_t v19 = v1[36];
      v1[26] = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 26, v1 + 27, v14 + 4);
      *(_WORD *)(v14 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
      OUTLINED_FUNCTION_83_0();
      uint64_t v21 = OUTLINED_FUNCTION_79_0(v19, v20, v106);
      v1[27] = v21;
      OUTLINED_FUNCTION_75_2(v21, (uint64_t)(v1 + 28));
      OUTLINED_FUNCTION_34_1(v2);
      OUTLINED_FUNCTION_51(v6);
      id v11 = v100;

      OUTLINED_FUNCTION_81(&dword_0, v12, v13, "Retrieved %ld AppShortcuts for bundle identifier: %s", (uint8_t *)v14);
      OUTLINED_FUNCTION_9_3(v15, v22, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_3_0(v15);
      OUTLINED_FUNCTION_3_0(v14);
    }

    else
    {
      OUTLINED_FUNCTION_51(v2);
      OUTLINED_FUNCTION_51(v6);

      uint64_t v18 = v6;
    }

    uint64_t v28 = (uint64_t)(v1 + 25);
    if ([(id)objc_opt_self(LNFeatureFlags) isConditionallyEnabledIntentsEnabled])
    {
      uint64_t v29 = v1[36];
      __int128 v30 = (os_log_s *)v1[32];
      OUTLINED_FUNCTION_1_5(v105, (uint64_t)(v1 + 12), 1LL);
      uint64_t v31 = OUTLINED_FUNCTION_40_2();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo14LNAutoShortcutCG_SSs5NeverOTg5075_s25SiriLinkSuggestionsPlugin013AutoShortcutsC22OwnerDefinitionFactoryC0E22e188PhraseResolverC16resolveParameter9parameter10suggestion11interaction11environmentSayypG0aC3Kit010ResolvableN0C_AL19CandidateSuggestion_pAL11Interaction_pAL19EnvironmentSnapshot_ptYaFSSSo06D57J0Ccfu3_33_727fba25be9f1dfe045bd6ea49c3456dASSSTf3nnnpk_nTf1cn_nTm(v31);
      uint64_t v32 = v11;
      uint64_t v34 = v33;
      OUTLINED_FUNCTION_57();
      OUTLINED_FUNCTION_83_0();
      swift_bridgeObjectRetain(v18);
      id v35 = v32;
      specialized _ArrayProtocol.filter(_:)(v34, v29, v2, v18, v35);
      uint64_t v37 = specialized Set.init<A>(_:)(v36);
      v1[40] = v37;
      OUTLINED_FUNCTION_58_0(v2);
      OUTLINED_FUNCTION_58_0(v18);
      id v38 = v35;
      OUTLINED_FUNCTION_58_0(v37);
      id v39 = v38;
      Logger.logObject.getter(v39);
      os_log_type_t v40 = OUTLINED_FUNCTION_32_2();
      if (OUTLINED_FUNCTION_7_2(v40))
      {
        uint64_t v41 = v1[36];
        uint64_t v42 = OUTLINED_FUNCTION_16_0(22LL);
        uint64_t v98 = OUTLINED_FUNCTION_16_0(64LL);
        v106[0] = v98;
        *(_DWORD *)uint64_t v42 = 136315394;
        OUTLINED_FUNCTION_83_0();
        v1[23] = OUTLINED_FUNCTION_79_0(v41, v43, v106);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 23, v1 + 24, v42 + 4);
        OUTLINED_FUNCTION_34_1(v2);
        OUTLINED_FUNCTION_51(v18);

        *(_WORD *)(v42 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
        uint64_t v44 = OUTLINED_FUNCTION_47_0();
        uint64_t v45 = Set.description.getter(v44, &type metadata for String, &protocol witness table for String);
        unint64_t v47 = v46;
        OUTLINED_FUNCTION_88_0();
        _BYTE v1[24] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, v106);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v105, v42 + 14);
        unint64_t v48 = v47;
        uint64_t v28 = (uint64_t)(v1 + 25);
        swift_bridgeObjectRelease(v48);
        OUTLINED_FUNCTION_51(v37);
        OUTLINED_FUNCTION_81( &dword_0,  v30,  (os_log_type_t)v38,  "AppShortcut-participating ConditionallyEnabledIntents for %s: %s",  (uint8_t *)v42);
        OUTLINED_FUNCTION_70_1(v49, v50, (uint64_t)&type metadata for Any + 8);
        OUTLINED_FUNCTION_3_0(v98);
        OUTLINED_FUNCTION_3_0(v42);
      }

      else
      {
        OUTLINED_FUNCTION_51(v2);
        OUTLINED_FUNCTION_51(v18);

        OUTLINED_FUNCTION_51(v37);
      }

      if (*(void *)(v37 + 16))
      {
        uint64_t v51 = v103[8];
        __swift_project_boxed_opaque_existential_1(v101, v103[7]);
        OUTLINED_FUNCTION_47_0();
        specialized _copyCollectionToContiguousArray<A>(_:)();
        v1[41] = v52;
        OUTLINED_FUNCTION_88_0();
        uint64_t v53 = (void *)swift_task_alloc(*(unsigned int *)(*(void *)(v51 + 56) + 4LL));
        v1[42] = v53;
        *uint64_t v53 = v1;
        v53[1] = AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.resolveParameter(parameter:suggestion:interaction:environment:);
        OUTLINED_FUNCTION_64_3();
        __asm { BR              X6 }
      }

      unint64_t v55 = v1[25];
      unint64_t v56 = v1[40];
      if ((v55 & 0x8000000000000000LL) != 0 || (v55 & 0x4000000000000000LL) != 0)
      {
        OUTLINED_FUNCTION_58_0(v1[25]);
        OUTLINED_FUNCTION_35();
        specialized _copyCollectionToContiguousArray<A>(_:)(v55);
        uint64_t v57 = v96;
        OUTLINED_FUNCTION_2();
        unint64_t v56 = v1[40];
      }

      else
      {
        uint64_t v57 = v55 & 0xFFFFFFFFFFFFFF8LL;
        OUTLINED_FUNCTION_58_0(v1[25]);
        OUTLINED_FUNCTION_35();
      }

      v106[0] = v57;
      specialized MutableCollection<>.sort(by:)(v106, v56);
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_79_1(v106[0]);
    }

    unint64_t v102 = v1 + 16;
    uint64_t v58 = (void *)v1[38];
    uint64_t v59 = v1[39];
    uint64_t v60 = (os_log_s *)v1[32];
    uint64_t v61 = v1[25];
    OUTLINED_FUNCTION_58_0(v1[37]);
    OUTLINED_FUNCTION_58_0(v59);
    id v62 = v58;
    OUTLINED_FUNCTION_58_0(v61);
    Logger.logObject.getter(v62);
    os_log_type_t v63 = OUTLINED_FUNCTION_106();
    if (OUTLINED_FUNCTION_49_3(v63))
    {
      uint64_t v99 = v1 + 17;
      uint64_t v64 = OUTLINED_FUNCTION_16_0(22LL);
      uint64_t v65 = OUTLINED_FUNCTION_16_0(32LL);
      v106[0] = v65;
      *(_DWORD *)uint64_t v64 = 134218242;
      if ((unint64_t)v61 >> 62)
      {
        if (v61 < 0) {
          uint64_t v95 = v61;
        }
        else {
          uint64_t v95 = v61 & 0xFFFFFFFFFFFFFF8LL;
        }
        OUTLINED_FUNCTION_35();
        uint64_t v66 = _CocoaArrayWrapper.endIndex.getter(v95);
        OUTLINED_FUNCTION_8();
      }

      else
      {
        uint64_t v66 = *(void *)((char *)&dword_10 + (v61 & 0xFFFFFFFFFFFFF8LL));
      }

      uint64_t v67 = (void *)v1[38];
      uint64_t v97 = v1[39];
      uint64_t v69 = v1[36];
      unint64_t v68 = v1[37];
      OUTLINED_FUNCTION_8();
      v1[16] = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v102, v99, v64 + 4);
      OUTLINED_FUNCTION_8();
      *(_WORD *)(v64 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
      OUTLINED_FUNCTION_70();
      v1[17] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v68, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v99, v1 + 18, v64 + 14);
      OUTLINED_FUNCTION_34_1(v68);
      OUTLINED_FUNCTION_51(v97);

      OUTLINED_FUNCTION_81(&dword_0, v60, v63, "%ld AppShortcuts eligible for suggestions in %s", (uint8_t *)v64);
      OUTLINED_FUNCTION_24_5((uint64_t)&type metadata for Any);
      OUTLINED_FUNCTION_3_0(v65);
      OUTLINED_FUNCTION_3_0(v64);

      uint64_t v28 = (uint64_t)(v1 + 25);
    }

    else
    {
      __int128 v71 = (void *)v1[38];
      uint64_t v70 = v1[39];
      uint64_t v72 = v1[37];
      OUTLINED_FUNCTION_51(v61);

      OUTLINED_FUNCTION_51(v70);
      OUTLINED_FUNCTION_51(v72);
    }

    uint64_t v74 = (void *)v1[38];
    uint64_t v73 = v1[39];
    uint64_t v75 = v1[36];
    uint64_t v76 = v1[37];
    uint64_t v77 = (os_log_s *)v1[32];
    OUTLINED_FUNCTION_1_5(v28, (uint64_t)(v1 + 9), 0LL);
    OUTLINED_FUNCTION_40_2();
    OUTLINED_FUNCTION_35();
    id v78 = v74;
    unint64_t v79 = OUTLINED_FUNCTION_83_0();
    OUTLINED_FUNCTION_35_4(v79);
    OUTLINED_FUNCTION_81_2();
    OUTLINED_FUNCTION_58_0(v76);
    OUTLINED_FUNCTION_58_0(v73);
    id v80 = v78;
    uint64_t v81 = OUTLINED_FUNCTION_70();
    Logger.logObject.getter(v81);
    os_log_type_t v82 = OUTLINED_FUNCTION_106();
    BOOL v83 = OUTLINED_FUNCTION_7_2(v82);
    uint64_t v85 = (void *)v1[38];
    uint64_t v84 = v1[39];
    unint64_t v86 = v1[37];
    if (v83)
    {
      uint64_t v104 = v1[36];
      uint64_t v87 = OUTLINED_FUNCTION_16_0(22LL);
      uint64_t v88 = OUTLINED_FUNCTION_16_0(32LL);
      v106[0] = v88;
      OUTLINED_FUNCTION_60_3(3.8521e-34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v90, v1 + 19, v89);
      OUTLINED_FUNCTION_59_0();
      *(_WORD *)(v87 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 2080;
      OUTLINED_FUNCTION_47_0();
      v1[15] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, v86, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 15, v102, v87 + 14);
      OUTLINED_FUNCTION_34_1(v86);
      OUTLINED_FUNCTION_51(v84);

      OUTLINED_FUNCTION_81(&dword_0, v77, (os_log_type_t)v73, "%ld AppShortcut resolved phrases for %s", (uint8_t *)v87);
      OUTLINED_FUNCTION_9_3(v88, v91, (uint64_t)&type metadata for Any + 8);
      OUTLINED_FUNCTION_3_0(v88);
      OUTLINED_FUNCTION_3_0(v87);
    }

    else
    {
      OUTLINED_FUNCTION_59_0();

      OUTLINED_FUNCTION_51(v84);
      OUTLINED_FUNCTION_51(v86);
    }

    uint64_t v92 = (void *)v1[38];
    specialized _arrayForceCast<A, B>(_:)(v75);
    OUTLINED_FUNCTION_59_0();
    OUTLINED_FUNCTION_78_2();
    OUTLINED_FUNCTION_57();
    OUTLINED_FUNCTION_8();
  }

  else
  {
    uint64_t v23 = (void *)Logger.logObject.getter(a1);
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_7_2(v24))
    {
      uint64_t v25 = (_WORD *)OUTLINED_FUNCTION_16_0(2LL);
      *uint64_t v25 = 0;
      OUTLINED_FUNCTION_43_2(&dword_0, v26, v27, "Didn't find candidate application details");
      OUTLINED_FUNCTION_3_0((uint64_t)v25);
    }
  }

  OUTLINED_FUNCTION_64_3();
  __asm { BR              X1 }

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.resolveParameter(parameter:suggestion:interaction:environment:)( uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 336LL);
  v3[43] = a1;
  v3[44] = v1;
  OUTLINED_FUNCTION_49_1(v4);
  swift_release(v3[41]);
  if (v1)
  {
    OUTLINED_FUNCTION_8();
    swift_errorRelease(v1);
  }

  OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_16_6(v5, v6, v7);
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.init(phrase:bundleIdentifier:autoShortcut:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.deinit()
{
  return v0;
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t protocol witness for InternalResolver.resolveParameter(parameter:suggestion:interaction:environment:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc(dword_4F6FC);
  *(void *)(v2 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for SignalSubscriber.getAsyncLookupSubscriptions() in conformance LinkSuggestionsGenerator;
  return AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver.resolveParameter(parameter:suggestion:interaction:environment:)( (uint64_t)v4,  a2);
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt.init(_:)( void *a1)
{
  id v2 = [a1 systemProtocolMetadata];
  type metadata accessor for LNSystemProtocolIdentifier(0LL);
  uint64_t v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LNSystemProtocolMetadata);
  lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( &lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier,  (uint64_t)&protocol conformance descriptor for LNSystemProtocolIdentifier);
  uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, v4, v5, v6);

  uint64_t v8 = specialized _NativeDictionary.mapValues<A>(_:)(v7);
  swift_bridgeObjectRelease(v7);

  return v8;
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1LL;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v4 = 0LL;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }

    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_29;
    }

    if (v12 >= v9) {
      return 1LL;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1LL;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1LL;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  char v18;
  char v19;
  unsigned __int8 v20;
  if (result == a2) {
    return 1LL;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v4 = 0LL;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }

    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_29;
    }

    if (v12 >= v9) {
      return 1LL;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1LL;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1LL;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt.hash(into:)( uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(v2);
}

void AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt.hashValue.getter( uint64_t a1)
{
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt( void *a1, void *a2)
{
  return static AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt.__derived_struct_equals(_:_:)( *a1,  *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt()
{
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt( uint64_t a1)
{
  return AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt.hash(into:)( a1,  *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt( uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  swift_bridgeObjectRetain(v2);
  specialized Dictionary<>.hash(into:)((uint64_t)v4, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

void AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.bundleIdentifier.getter( uint64_t a1, uint64_t a2)
{
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.init(bundleIdentifier:actionMetadata:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v5)
  {
    swift_bridgeObjectRelease(v5);
    specialized _NativeDictionary.mapValues<A>(_:)(a3);
    OUTLINED_FUNCTION_57();
  }

  else
  {
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_57();
    return 0LL;
  }

  return a1;
}

void static AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12 = a1 == a5 && a2 == a6;
  if ((v12 || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a5, a6, 0LL) & 1) != 0)
    && (specialized static Dictionary<>.== infix(_:_:)(a3, a7) & 1) != 0)
  {
    type metadata accessor for NSObject( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject,  &OBJC_CLASS___NSObject_ptr);
    static NSObject.== infix(_:_:)(a4, a8);
  }

  OUTLINED_FUNCTION_7();
}

void AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.hash(into:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8 = a5;
  NSObject.hash(into:)(a1);
}

Swift::Int AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.hashValue.getter( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  NSObject.hash(into:)(v8);

  return OUTLINED_FUNCTION_17_1();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails( uint64_t *a1, uint64_t *a2)
{
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails()
{
  return AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.hashValue.getter( *(void *)v0,  *(void *)(v0 + 8),  *(void *)(v0 + 16),  *(void **)(v0 + 24));
}

void protocol witness for Hashable.hash(into:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails( uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails( uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  int64_t v4 = (void *)v1[3];
  Hasher.init(_seed:)(v8, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v8, v2, v3);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRetain(v5);
  specialized Dictionary<>.hash(into:)((uint64_t)v8, v5);
  swift_bridgeObjectRelease(v5);
  id v6 = v4;
  NSObject.hash(into:)(v8);

  return Hasher._finalize()();
}

double AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.configuratorPerBundleIdentifier.getter()
{
  *(void *)&double result = swift_bridgeObjectRetain(*(void *)(v0 + 16)).n128_u64[0];
  return result;
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.configuratorPerBundleIdentifier.setter( uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + outlined destroy of AppIntentDialogCallback(v0 + 16) = a1;
  return swift_bridgeObjectRelease(v3);
}

void AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.configuratorPerBundleIdentifier.modify( uint64_t a1)
{
}

id AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.lock.getter()
{
  return *(id *)(v0 + 64);
}

void AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.init(linkClient:)(__int128 *a1)
{
  *(void *)(v1 + outlined destroy of AppIntentDialogCallback(v0 + 16) = 0LL;
  *(void *)(v1 + 64) = [objc_allocWithZone(NSLock) init];
  outlined init with take of LinkDialogIdProvider(a1, v1 + 24);
  OUTLINED_FUNCTION_3();
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.getConfiguratorsForAllApplications()()
{
  uint64_t v1 = (void *)v0[8];
  [v1 lock];
  uint64_t v2 = v0 + 2;
  OUTLINED_FUNCTION_1_5((uint64_t)(v0 + 2), (uint64_t)v47, 1LL);
  uint64_t v3 = (void *)v0[2];
  if (v3)
  {
    OUTLINED_FUNCTION_83_0();
LABEL_22:
    objc_msgSend(v1, "unlock", v41);
    return (uint64_t)v3;
  }

  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  __swift_project_boxed_opaque_existential_1(v0 + 3, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  if (!v6)
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_22;
  }

  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 + 16);
  if (!v8)
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
LABEL_21:
    OUTLINED_FUNCTION_8();
    *uint64_t v2 = v3;
    OUTLINED_FUNCTION_83_0();
    OUTLINED_FUNCTION_8();
    goto LABEL_22;
  }

  uint64_t v42 = v0 + 2;
  uint64_t v43 = v1;
  OUTLINED_FUNCTION_35();
  uint64_t v41 = v7;
  int64_t v9 = (uint64_t *)(v7 + 40);
  uint64_t v3 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    uint64_t v11 = *(v9 - 1);
    uint64_t v10 = *v9;
    OUTLINED_FUNCTION_47_1();
    uint64_t v12 = AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.getCandidateApplicationDetails(for:)( v11,  v10);
    if (!v13)
    {
      swift_bridgeObjectRelease(v10);
      goto LABEL_17;
    }

    uint64_t v16 = v12;
    uint64_t v17 = v13;
    uint64_t v18 = v14;
    unint64_t v19 = v15;
    uint64_t v20 = type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator();
    char v21 = (void *)OUTLINED_FUNCTION_1(v20, 64LL);
    v21[5] = v19;
    v21[6] = 0xD000000000000016LL;
    v21[7] = 0x800000000003E6F0LL;
    v21[2] = v16;
    _OWORD v21[3] = v17;
    v21[4] = v18;
    OUTLINED_FUNCTION_47_1();
    OUTLINED_FUNCTION_47_0();
    uint64_t v45 = v18;
    OUTLINED_FUNCTION_44_3();
    id v44 = v19;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
    uint64_t v23 = v11;
    Swift::Bool v24 = isUniquelyReferenced_nonNull_native;
    unint64_t v46 = v3;
    uint64_t v25 = v23;
    unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v10);
    uint64_t v28 = v3[2];
    BOOL v29 = (v27 & 1) == 0;
    Swift::Int v30 = v28 + v29;
    if (__OFADD__(v28, v29)) {
      break;
    }
    unint64_t v31 = v26;
    char v32 = v27;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator>);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v24, v30))
    {
      unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v10);
      if ((v32 & 1) != (v34 & 1)) {
        goto LABEL_25;
      }
      unint64_t v31 = v33;
    }

    uint64_t v3 = v46;
    if ((v32 & 1) != 0)
    {
      uint64_t v35 = v46[7];
      swift_release(*(void *)(v35 + 8 * v31));
      *(void *)(v35 + 8 * v31) = v21;
    }

    else
    {
      v46[(v31 >> 6) + 8] |= 1LL << v31;
      uint64_t v36 = (uint64_t *)(v46[6] + 16 * v31);
      *uint64_t v36 = v25;
      v36[1] = v10;
      *(void *)(v46[7] + 8 * v31) = v21;
      uint64_t v37 = v46[2];
      BOOL v38 = __OFADD__(v37, 1LL);
      uint64_t v39 = v37 + 1;
      if (v38) {
        goto LABEL_24;
      }
      v46[2] = v39;
      OUTLINED_FUNCTION_47_1();
    }

    swift_bridgeObjectRelease(v45);
    OUTLINED_FUNCTION_88_0();
    OUTLINED_FUNCTION_51(v10);
    swift_bridgeObjectRelease(0x8000000000000000LL);
LABEL_17:
    v9 += 2;
    if (!--v8)
    {
      OUTLINED_FUNCTION_8();
      uint64_t v2 = v42;
      uint64_t v1 = v43;
      goto LABEL_21;
    }
  }

  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.getCandidateApplicationDetails(for:)( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = v2 + 3;
  uint64_t v7 = v2[6];
  uint64_t v8 = v2[7];
  __swift_project_boxed_opaque_existential_1(v2 + 3, v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 32))(a1, a2, v7, v8);
  uint64_t v10 = v9;
  if ((unint64_t)v9 >> 62)
  {
    if (v9 >= 0) {
      v9 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    if (_CocoaArrayWrapper.endIndex.getter(v9)) {
      goto LABEL_3;
    }
  }

  else if (*(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8LL)))
  {
LABEL_3:
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo14LNAutoShortcutCG_SSs5NeverOTg5075_s25SiriLinkSuggestionsPlugin013AutoShortcutsC22OwnerDefinitionFactoryC0E22e188PhraseResolverC16resolveParameter9parameter10suggestion11interaction11environmentSayypG0aC3Kit010ResolvableN0C_AL19CandidateSuggestion_pAL11Interaction_pAL19EnvironmentSnapshot_ptYaFSSSo06D57J0Ccfu3_33_727fba25be9f1dfe045bd6ea49c3456dASSSTf3nnnpk_nTf1cn_nTm(v10);
    uint64_t v12 = v11;
    OUTLINED_FUNCTION_2();
    specialized Set.init<A>(_:)(v12);
    specialized _copyCollectionToContiguousArray<A>(_:)();
    uint64_t v14 = v13;
    OUTLINED_FUNCTION_2();
    uint64_t v16 = v3[6];
    uint64_t v15 = v3[7];
    __swift_project_boxed_opaque_existential_1(v6, v16);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 40))(a1, a2, v14, v16, v15);
    swift_release(v14);
    OUTLINED_FUNCTION_35();
    return AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.init(bundleIdentifier:actionMetadata:)( a1,  a2,  v17);
  }

  OUTLINED_FUNCTION_2();
  return OUTLINED_FUNCTION_84_1();
}

void *AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.__allocating_init(candidateApplicationDetails:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (void *)OUTLINED_FUNCTION_1(v4, 64LL);
  result[6] = 0xD000000000000016LL;
  result[7] = 0x800000000003E6F0LL;
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  return result;
}

void *AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.getConfigurators(for:)()
{
  uint64_t v1 = OUTLINED_FUNCTION_40_4();
  uint64_t v3 = specialized Sequence.compactMap<A>(_:)(v1, v2);
  return specialized Dictionary.init<A>(uniqueKeysWithValues:)((uint64_t)v3);
}

uint64_t closure #1 in AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.getConfigurators(for:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v66 = a3;
  v65[1] = a2;
  uint64_t v4 = type metadata accessor for CoreSignalTypes(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CoreSignalTypes?, CoreSignalTypes?));
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CoreSignalTypes?);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)v65 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)v65 - v19;
  uint64_t v67 = *a1;
  Signal.signalType.getter(v68, v18);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SignalType);
  int v22 = swift_dynamicCast(v20, v68, v21, v4, 6LL);
  __swift_storeEnumTagSinglePayload((uint64_t)v20, v22 ^ 1u, 1LL, v4);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v17, enum case for CoreSignalTypes.app(_:), v4);
  __swift_storeEnumTagSinglePayload((uint64_t)v17, 0LL, 1LL, v4);
  uint64_t v23 = (uint64_t)&v10[*(int *)(v8 + 48)];
  outlined init with copy of CoreSignalTypes?((uint64_t)v20, (uint64_t)v10);
  outlined init with copy of CoreSignalTypes?((uint64_t)v17, v23);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1LL, v4) == 1)
  {
    outlined destroy of CoreSignalTypes?( (uint64_t)v17,  &demangling cache variable for type metadata for CoreSignalTypes?);
    if (__swift_getEnumTagSinglePayload(v23, 1LL, v4) == 1)
    {
      outlined destroy of CoreSignalTypes?( (uint64_t)v10,  &demangling cache variable for type metadata for CoreSignalTypes?);
      outlined destroy of CoreSignalTypes?( (uint64_t)v20,  &demangling cache variable for type metadata for CoreSignalTypes?);
      uint64_t v24 = v67;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  outlined init with copy of CoreSignalTypes?((uint64_t)v10, (uint64_t)v14);
  if (__swift_getEnumTagSinglePayload(v23, 1LL, v4) == 1)
  {
    outlined destroy of CoreSignalTypes?( (uint64_t)v17,  &demangling cache variable for type metadata for CoreSignalTypes?);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
LABEL_6:
    outlined destroy of CoreSignalTypes?( (uint64_t)v10,  (uint64_t *)&demangling cache variable for type metadata for (CoreSignalTypes?, CoreSignalTypes?));
    outlined destroy of CoreSignalTypes?( (uint64_t)v20,  &demangling cache variable for type metadata for CoreSignalTypes?);
    uint64_t v24 = v67;
    goto LABEL_12;
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v23, v4);
  lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( &lazy protocol witness table cache variable for type CoreSignalTypes and conformance CoreSignalTypes,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for CoreSignalTypes,  (uint64_t)&protocol conformance descriptor for CoreSignalTypes);
  char v26 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v7, v4, v25);
  char v27 = *(void (**)(char *, uint64_t))(v5 + 8);
  v27(v7, v4);
  outlined destroy of CoreSignalTypes?((uint64_t)v17, &demangling cache variable for type metadata for CoreSignalTypes?);
  v27(v14, v4);
  outlined destroy of CoreSignalTypes?((uint64_t)v10, &demangling cache variable for type metadata for CoreSignalTypes?);
  outlined destroy of CoreSignalTypes?((uint64_t)v20, &demangling cache variable for type metadata for CoreSignalTypes?);
  uint64_t v24 = v67;
  if ((v26 & 1) != 0)
  {
LABEL_8:
    if (one-time initialization token for autoshortcutsSuggestions != -1) {
      swift_once( &one-time initialization token for autoshortcutsSuggestions,  one-time initialization function for autoshortcutsSuggestions);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    __swift_project_value_buffer(v28, (uint64_t)static Logger.autoshortcutsSuggestions);
    uint64_t v29 = swift_retain_n(v24, 2LL);
    Swift::Int v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      char v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v33 = swift_slowAlloc(32LL, -1LL);
      v68[0] = v33;
      *(_DWORD *)char v32 = 136315138;
      uint64_t v69 = v24;
      uint64_t v34 = type metadata accessor for Signal(0LL);
      lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( &lazy protocol witness table cache variable for type Signal and conformance Signal,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Signal,  (uint64_t)&protocol conformance descriptor for Signal);
      uint64_t v36 = v35;
      uint64_t v37 = v34;
      uint64_t v24 = v67;
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter(v37, v36);
      unint64_t v40 = v39;
      uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v32 + 4);
      swift_release_n(v24, 2LL);
      swift_bridgeObjectRelease(v40);
      _os_log_impl(&dword_0, v30, v31, "Getting app specific autoshortcuts suggestions for %s", v32, 0xCu);
      swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v24, 2LL);
    }

    id v44 = v66;
    uint64_t v55 = AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.getConfiguratorsForAllApplications()();
    uint64_t v56 = Signal.signalValue.getter();
    uint64_t v58 = v57;
    specialized Dictionary.subscript.getter(v56, v57, v55);
    uint64_t v60 = v59;
    swift_bridgeObjectRelease(v58);
    uint64_t result = swift_bridgeObjectRelease(v55);
    if (v60)
    {
      uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CandidateSuggestionConfigurator>);
      uint64_t v62 = swift_allocObject(v61, 72LL, 7LL);
      *(_OWORD *)(v62 + outlined destroy of AppIntentDialogCallback(v0 + 16) = xmmword_3C030;
      *(void *)(v62 + outlined init with copy of LinkClient(v0 + 16, v0 + 56) = type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator();
      lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( &lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator,  v63,  (uint64_t (*)(uint64_t))type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator,  (uint64_t)&protocol conformance descriptor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator);
      *(void *)(v62 + 64) = v64;
      *(void *)(v62 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v60;
      *id v44 = v24;
      v44[1] = v62;
      return swift_retain(v24);
    }

    goto LABEL_21;
  }

LABEL_12:
  type metadata accessor for Signal(0LL);
  uint64_t v41 = static Signal.HomeScreenTier1.getter();
  char v42 = static Signal.== infix(_:_:)(v24, v41);
  uint64_t result = swift_release(v41);
  id v44 = v66;
  if ((v42 & 1) == 0)
  {
LABEL_21:
    *id v44 = 0LL;
    v44[1] = 0LL;
    return result;
  }

  if (one-time initialization token for autoshortcutsSuggestions != -1) {
    swift_once( &one-time initialization token for autoshortcutsSuggestions,  one-time initialization function for autoshortcutsSuggestions);
  }
  uint64_t v45 = type metadata accessor for Logger(0LL);
  uint64_t v46 = __swift_project_value_buffer(v45, (uint64_t)static Logger.autoshortcutsSuggestions);
  unint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
  os_log_type_t v48 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v49 = 0;
    _os_log_impl(&dword_0, v47, v48, "Getting homescreen tier 1 autoshortcuts suggestions", v49, 2u);
    swift_slowDealloc(v49, -1LL, -1LL);
  }

  uint64_t v50 = AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.getConfiguratorsForAllApplications()();
  swift_retain(v24);
  specialized _copyCollectionToContiguousArray<A>(_:)();
  uint64_t v52 = v51;
  swift_bridgeObjectRelease(v50);
  specialized _arrayForceCast<A, B>(_:)(v52);
  uint64_t v54 = v53;
  uint64_t result = swift_release(v52);
  *id v44 = v24;
  v44[1] = v54;
  return result;
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.deinit()
{
  return v0;
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

void *protocol witness for ConfiguratorProvider.getConfigurators(for:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts()
{
  return AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts.getConfigurators(for:)();
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.candidateApplicationDetails.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 40);
  OUTLINED_FUNCTION_70();
  OUTLINED_FUNCTION_44_3();
  id v3 = v2;
  return v1;
}

void AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.suggestionId.getter()
{
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.init(candidateApplicationDetails:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = 0xD000000000000016LL;
  v4[7] = 0x800000000003E6F0LL;
  __int128 v4[2] = a1;
  v4[3] = a2;
  void v4[4] = a3;
  v4[5] = a4;
  return LinkSuggestionsOwnerDefinitionFactory.deinit();
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.updateContext(context:signal:)( uint64_t a1)
{
  *(void *)(v2 + outlined destroy of AppIntentDialogCallback(v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_22((uint64_t)AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.updateContext(context:signal:));
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.updateContext(context:signal:)()
{
  uint64_t v1 = (uint64_t *)v0[2];
  uint64_t v2 = (void *)v0[3];
  uint64_t v3 = *v1;
  v0[4] = *v1;
  uint64_t v4 = v1[1];
  v0[5] = v4;
  uint64_t ObjectType = swift_getObjectType(v3);
  v0[6] = ObjectType;
  v0[7] = v2[2];
  v0[8] = v2[3];
  v0[9] = v2[4];
  v0[10] = v2[5];
  uint64_t v6 = OUTLINED_FUNCTION_87_0(ObjectType, *(void *)(v4 + 8));
  return OUTLINED_FUNCTION_5_2( (uint64_t)AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.updateContext(context:signal:),  v6,  v7);
}

{
  uint64_t v0;
  Context.setCandidateApplicationDetails(_:)( *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(void *)(v0 + 72),  *(void **)(v0 + 80),  *(void *)(v0 + 48),  *(void *)(v0 + 40));
  return OUTLINED_FUNCTION_0_4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t Context.setCandidateApplicationDetails(_:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  if (one-time initialization token for autoshortcutsOwner != -1) {
    swift_once( &one-time initialization token for autoshortcutsOwner,  one-time initialization function for autoshortcutsOwner);
  }
  uint64_t v12 = static LinkSuggestionsOwners.autoshortcutsOwner;
  uint64_t v13 = OUTLINED_FUNCTION_37_2();
  _OWORD v22[3] = v13;
  OUTLINED_FUNCTION_80_1( (unint64_t *)&lazy protocol witness table cache variable for type DefaultOwner and conformance DefaultOwner,  v14,  (uint64_t (*)(uint64_t))&type metadata accessor for DefaultOwner,  (uint64_t)&protocol conformance descriptor for DefaultOwner);
  uint64_t v16 = v15;
  v22[4] = v15;
  v22[0] = v12;
  __swift_project_boxed_opaque_existential_1(v22, v13);
  _OWORD v21[3] = v13;
  v21[4] = *(void *)(v16 + 8);
  __swift_allocate_boxed_opaque_existential_0Tm(v21);
  (*(void (**)(void))(*(void *)(v13 - 8) + 16LL))();
  v20[3] = &type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails;
  uint64_t v17 = (void *)OUTLINED_FUNCTION_1((uint64_t)&unk_4A8A0, 48LL);
  v20[0] = v17;
  v17[2] = a1;
  v17[3] = a2;
  v17[4] = a3;
  v17[5] = a4;
  swift_retain(v12);
  OUTLINED_FUNCTION_83_0();
  OUTLINED_FUNCTION_40_2();
  id v18 = a4;
  Context.setParam(for:key:value:)(v21, 0xD00000000000001FLL, 0x800000000003F800LL, v20, a5, a6);
  __swift_destroy_boxed_opaque_existential_1(v20);
  __swift_destroy_boxed_opaque_existential_1(v21);
  return __swift_destroy_boxed_opaque_existential_1(v22);
}

void static AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.== infix(_:_:)( void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  BOOL v10 = v4 == v7 && v5 == v8;
  if ((v10 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v7, v8, 0LL) & 1) != 0)
    && (specialized static Dictionary<>.== infix(_:_:)(v6, v9) & 1) != 0)
  {
    type metadata accessor for NSObject( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject,  &OBJC_CLASS___NSObject_ptr);
    uint64_t v11 = OUTLINED_FUNCTION_40_4();
    static NSObject.== infix(_:_:)(v11, v12);
  }

  OUTLINED_FUNCTION_7();
}

void AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.deinit()
{
  OUTLINED_FUNCTION_59_0();
  OUTLINED_FUNCTION_8();
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  OUTLINED_FUNCTION_7();
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

uint64_t protocol witness for CandidateSuggestionConfigurator.suggestionId.getter in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 56LL));
  return v1;
}

uint64_t protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator( uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_4F724);
  *(void *)(v1 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator;
  return AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator.updateContext(context:signal:)(a1);
}

uint64_t protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator()
{
  return OUTLINED_FUNCTION_0_4(*(uint64_t (**)(void))(v0 + 8));
}

void AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.phrase.getter()
{
}

void AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys.hash(into:)( uint64_t a1, unsigned __int8 a2)
{
}

SiriLinkSuggestionsPlugin::AutoShortcutsSuggestionsOwnerDefinitionFactory::ResolvedPhrase::CodingKeys_optional __swiftcall AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys.init(stringValue:)( Swift::String stringValue)
{
  object = stringValue._object;
  BOOL v2 = stringValue._countAndFlagsBits == 0x657361726870LL && stringValue._object == (void *)0xE600000000000000LL;
  if (v2
    || (uint64_t countAndFlagsBits = stringValue._countAndFlagsBits,
        (OUTLINED_FUNCTION_1_6(0x657361726870LL, 0xE600000000000000LL) & 1) != 0))
  {
    OUTLINED_FUNCTION_8();
    return 0;
  }

  if (countAndFlagsBits == 0xD000000000000010LL)
  {
    unint64_t v5 = 0x800000000003EDD0LL;
  }

  if ((OUTLINED_FUNCTION_1_6(0xD000000000000010LL, 0x800000000003EDD0LL) & 1) != 0)
  {
    unint64_t v5 = (unint64_t)object;
LABEL_11:
    swift_bridgeObjectRelease(v5);
    return (SiriLinkSuggestionsPlugin::AutoShortcutsSuggestionsOwnerDefinitionFactory::ResolvedPhrase::CodingKeys_optional)1;
  }

  if (countAndFlagsBits == 0x726F68536F747561LL && object == (void *)0xEC00000074756374LL)
  {
    OUTLINED_FUNCTION_8();
    return (SiriLinkSuggestionsPlugin::AutoShortcutsSuggestionsOwnerDefinitionFactory::ResolvedPhrase::CodingKeys_optional)2;
  }

  else
  {
    uint64_t v7 = OUTLINED_FUNCTION_69_1(0x68536F747561LL);
    char v9 = OUTLINED_FUNCTION_1_6(v7, v8);
    OUTLINED_FUNCTION_8();
    if ((v9 & 1) != 0) {
      return (SiriLinkSuggestionsPlugin::AutoShortcutsSuggestionsOwnerDefinitionFactory::ResolvedPhrase::CodingKeys_optional)2;
    }
    else {
      return (SiriLinkSuggestionsPlugin::AutoShortcutsSuggestionsOwnerDefinitionFactory::ResolvedPhrase::CodingKeys_optional)3;
    }
  }

void AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys.hashValue.getter(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  OUTLINED_FUNCTION_17_5(a1);
  Hasher._combine(_:)(v1);
  OUTLINED_FUNCTION_17_1();
  OUTLINED_FUNCTION_3_3();
}

uint64_t AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x657361726870LL;
  }
  if (a1 == 1) {
    return 0xD000000000000010LL;
  }
  return 0x726F68536F747561LL;
}

void protocol witness for Hashable.hashValue.getter in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys()
{
}

void protocol witness for Hashable.hash(into:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys( uint64_t a1)
{
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys()
{
  return AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys.stringValue.getter(*v0);
}

SiriLinkSuggestionsPlugin::AutoShortcutsSuggestionsOwnerDefinitionFactory::ResolvedPhrase::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys@<W0>( uint64_t a1@<X0>, SiriLinkSuggestionsPlugin::AutoShortcutsSuggestionsOwnerDefinitionFactory::ResolvedPhrase::CodingKeys_optional *a2@<X8>)
{
  result.value = AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys( _BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys();
  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys( uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys();
  return CodingKey.debugDescription.getter(a1, v2);
}

void AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.init(from:)( void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v32 = type metadata accessor for NSCodingAdaptor(0LL);
  uint64_t v3 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  OUTLINED_FUNCTION_22_0();
  uint64_t v33 = v5 - v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_22_0();
  uint64_t v10 = v9 - v8;
  uint64_t v12 = a1[3];
  uint64_t v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  unint64_t v13 = lazy protocol witness table accessor for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys();
  uint64_t v14 = v12;
  uint64_t v15 = a1;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys,  &type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys,  v13,  v14,  v11);
  if (v34) {
    goto LABEL_5;
  }
  uint64_t v16 = v6;
  char v38 = 2;
  uint64_t v17 = static CodableWrapper.decode<A, B>(forType:forKey:container:)( v32,  &v38,  v10,  v32,  &type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys,  v13);
  uint64_t v18 = NSCodingAdaptor.data.getter(v17);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v33, v32);
  uint64_t v19 = objc_opt_self(&OBJC_CLASS___LNAutoShortcut);
  uint64_t v20 = swift_dynamicCastObjCClass(v18, v19);
  if (!v20)
  {
    swift_unknownObjectRelease(v18);
    unint64_t v23 = lazy protocol witness table accessor for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors();
    uint64_t v24 = swift_allocError( &type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors,  v23,  0LL,  0LL);
    swift_willThrow(v24);
    OUTLINED_FUNCTION_32_5();
LABEL_5:
    __swift_destroy_boxed_opaque_existential_1(v15);
    goto LABEL_6;
  }

  uint64_t v21 = v20;
  char v37 = 0;
  uint64_t v22 = OUTLINED_FUNCTION_63_2((uint64_t)&v37);
  uint64_t v26 = v25;
  uint64_t v35 = v22;
  char v36 = 1;
  uint64_t v27 = OUTLINED_FUNCTION_63_2((uint64_t)&v36);
  uint64_t v28 = v10;
  uint64_t v30 = v29;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v28, v16);
  __swift_destroy_boxed_opaque_existential_1(a1);
  *a2 = v35;
  a2[1] = v26;
  a2[2] = v27;
  a2[3] = v30;
  a2[4] = v21;
LABEL_6:
  OUTLINED_FUNCTION_0_3();
}

void AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys>);
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_22_0();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  unint64_t v10 = lazy protocol witness table accessor for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys,  &type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys,  v10,  v8,  v9);
  char v19 = 2;
  uint64_t v11 = (void *)v2[4];
  _OWORD v18[3] = type metadata accessor for NSCodingAdaptor(0LL);
  lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( &lazy protocol witness table cache variable for type NSCodingAdaptor and conformance NSCodingAdaptor,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for NSCodingAdaptor,  (uint64_t)&protocol conformance descriptor for NSCodingAdaptor);
  void v18[4] = v12;
  __swift_allocate_boxed_opaque_existential_0Tm(v18);
  NSCodingAdaptor.init(data:)(v11);
  static CodableWrapper.encode<A>(to:forKey:instance:)( v7,  &v19,  v18,  &type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys,  v10);
  if (v17)
  {
    OUTLINED_FUNCTION_61_3();
    __swift_destroy_boxed_opaque_existential_1(v18);
  }

  else
  {
    __swift_destroy_boxed_opaque_existential_1(v18);
    uint64_t v13 = *v2;
    uint64_t v14 = v2[1];
    LOBYTE(v18[0]) = 0;
    OUTLINED_FUNCTION_48_2(v13, v14);
    uint64_t v15 = v2[2];
    uint64_t v16 = v2[3];
    LOBYTE(v18[0]) = 1;
    OUTLINED_FUNCTION_48_2(v15, v16);
    OUTLINED_FUNCTION_61_3();
  }

  OUTLINED_FUNCTION_0_3();
}

double protocol witness for Decodable.init(from:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase@<D0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    double result = *(double *)v6;
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v5;
    *(void *)(a2 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = v7;
  }

  return result;
}

void protocol witness for Encodable.encode(to:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase( void *a1)
{
}

id static AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata.== infix(_:_:)( void *a1, uint64_t a2)
{
  return [a1 isEqual:a2];
}

void AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata.hash(into:)(int a1, id a2)
{
}

void AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata.hashValue.getter(void *a1)
{
}

id protocol witness for static Equatable.== infix(_:_:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata( void **a1, uint64_t *a2)
{
  return static AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata.== infix(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata()
{
}

void protocol witness for Hashable.hash(into:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata( int a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata( uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)((Swift::UInt)[v2 hash]);
  return Hasher._finalize()();
}

void AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors.hash(into:)()
{
}

void AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors.hashValue.getter(uint64_t a1)
{
}

uint64_t protocol witness for static OwnerDefinitionFactory.createOwnerDefinitions(builderFactory:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory( uint64_t a1, uint64_t a2)
{
  __int128 v5 = (void *)swift_task_alloc(dword_4F6CC);
  *(void *)(v2 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v5;
  *__int128 v5 = v2;
  v5[1] = protocol witness for SignalSubscriber.getAsyncLookupSubscriptions() in conformance LinkSuggestionsGenerator;
  return static AutoShortcutsSuggestionsOwnerDefinitionFactory.createOwnerDefinitions(builderFactory:)(a1, a2);
}

void CandidateSuggestion.resolvedPhrase.getter(uint64_t a1@<X8>)
{
}

void DialogProperties.resolvedPhrase.getter(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1();
  specialized Dictionary.subscript.getter(0xD000000000000013LL, 0x800000000003F7C0LL, v3, &v10);
  OUTLINED_FUNCTION_2();
  if (!v11)
  {
    outlined destroy of CoreSignalTypes?((uint64_t)&v10, &demangling cache variable for type metadata for Any?);
    goto LABEL_5;
  }

  if (!swift_dynamicCast( v8,  &v10,  (char *)&type metadata for Any + 8,  &type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase,  6LL))
  {
LABEL_5:
    uint64_t v4 = 0LL;
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    __int128 v7 = 0uLL;
    goto LABEL_6;
  }

  uint64_t v4 = v8[0];
  uint64_t v5 = v8[1];
  uint64_t v6 = v8[2];
  __int128 v7 = v9;
LABEL_6:
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v6;
  *(_OWORD *)(a2 + 24) = v7;
}

void LNActionMetadata.isConditionallyEnabled.getter()
{
  id v1 = [v0 systemProtocols];
  type metadata accessor for NSObject( 0LL,  (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol,  &OBJC_CLASS___LNSystemProtocol_ptr);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  id v4 = [(id)objc_opt_self(LNSystemProtocol) conditionallyEnabledProtocol];
  specialized Sequence<>.contains(_:)((uint64_t)v4, v3);
  OUTLINED_FUNCTION_59_0();

  OUTLINED_FUNCTION_7();
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)( unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8LL)) > result)
    {
      return result;
    }

    __break(1u);
  }

  return result;
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  uint64_t result = static _DictionaryStorage.copy(original:)(a1);
  uint64_t v3 = (void *)result;
  int64_t v4 = 0LL;
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = result + 64;
  if (!v8) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    uint64_t v16 = *(void **)(*(void *)(a1 + 48) + 8 * i);
    uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    *(void *)(v10 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    *(void *)(v3[6] + 8 * i) = v16;
    *(void *)(v3[7] + 8 * i) = v17;
    uint64_t v18 = v3[2];
    BOOL v19 = __OFADD__(v18, 1LL);
    uint64_t v20 = v18 + 1;
    if (v19)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    v3[2] = v20;
    id v21 = v16;
    uint64_t result = swift_unknownObjectRetain(v17);
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      goto LABEL_24;
    }
    if (v13 >= v9) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v9) {
        return (uint64_t)v3;
      }
      unint64_t v14 = *(void *)(v5 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v9) {
          return (uint64_t)v3;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t i;
  BOOL v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt>);
  uint64_t result = static _DictionaryStorage.copy(original:)(a1);
  uint64_t v5 = 0LL;
  uint64_t v34 = a1;
  uint64_t v35 = (void *)result;
  unint64_t v8 = *(void *)(a1 + 64);
  uint64_t v7 = a1 + 64;
  uint64_t v6 = v8;
  int64_t v9 = 1LL << *(_BYTE *)(v7 - 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & v6;
  os_log_type_t v31 = v7;
  uint64_t v32 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v33 = result + 64;
  if ((v10 & v6) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  char v36 = v2;
  uint64_t v12 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v12 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v5 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v34 + 48) + 16 * i);
    uint64_t v18 = *v17;
    BOOL v19 = v17[1];
    uint64_t v20 = *(id *)(*(void *)(v34 + 56) + 8 * i);
    id v21 = objc_msgSend(v20, "systemProtocolMetadata", swift_bridgeObjectRetain(v19).n128_f64[0]);
    type metadata accessor for LNSystemProtocolIdentifier(0LL);
    unint64_t v23 = v22;
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LNSystemProtocolMetadata);
    lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( &lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier,  255LL,  (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier,  (uint64_t)&protocol conformance descriptor for LNSystemProtocolIdentifier);
    uint64_t v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v21, v23, v24, v25);

    uint64_t v27 = specialized _NativeDictionary.mapValues<A>(_:)(v26);
    uint64_t v2 = v36;
    swift_bridgeObjectRelease(v26);

    *(void *)(v33 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    uint64_t result = (uint64_t)v35;
    uint64_t v28 = (void *)(v35[6] + 16 * i);
    *uint64_t v28 = v18;
    v28[1] = v19;
    *(void *)(v35[7] + 8 * i) = v27;
    uint64_t v29 = v35[2];
    unint64_t v14 = __OFADD__(v29, 1LL);
    uint64_t v30 = v29 + 1;
    if (v14)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }

    _OWORD v35[2] = v30;
    if (v11) {
      goto LABEL_4;
    }
LABEL_5:
    unint64_t v14 = __OFADD__(v5++, 1LL);
    if (v14) {
      goto LABEL_25;
    }
    if (v5 >= v32) {
      return result;
    }
    int64_t v15 = *(void *)(v31 + 8 * v5);
    if (!v15) {
      break;
    }
LABEL_15:
    char v36 = v2;
    unint64_t v11 = (v15 - 1) & v15;
  }

  uint64_t v16 = v5 + 1;
  if (v5 + 1 >= v32) {
    return result;
  }
  int64_t v15 = *(void *)(v31 + 8 * v16);
  if (v15) {
    goto LABEL_14;
  }
  uint64_t v16 = v5 + 2;
  if (v5 + 2 >= v32) {
    return result;
  }
  int64_t v15 = *(void *)(v31 + 8 * v16);
  if (v15) {
    goto LABEL_14;
  }
  uint64_t v16 = v5 + 3;
  if (v5 + 3 >= v32) {
    return result;
  }
  int64_t v15 = *(void *)(v31 + 8 * v16);
  if (v15)
  {
LABEL_14:
    uint64_t v5 = v16;
    goto LABEL_15;
  }

  while (1)
  {
    uint64_t v5 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v5 >= v32) {
      return result;
    }
    int64_t v15 = *(void *)(v31 + 8 * v5);
    ++v16;
    if (v15) {
      goto LABEL_15;
    }
  }

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  swift_bridgeObjectRetain_n(a2, 2LL);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v4 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
    *a1 = v4;
  }

  uint64_t v6 = *(void *)(v4 + 16);
  v9[0] = v4 + 32;
  v9[1] = v6;
  swift_bridgeObjectRetain(a2);
  uint64_t v7 = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v9, a2);
  specialized ContiguousArray._endMutation()(v7);
  return swift_bridgeObjectRelease_n(a2, 3LL);
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, unint64_t a2)
{
  unint64_t v3 = a2;
  Swift::Int v5 = a1[1];
  swift_bridgeObjectRetain_n(a2, 3LL);
  Swift::Int v6 = _minimumMergeRunLength(_:)(v5);
  if (v6 >= v5)
  {
    if ((v5 & 0x8000000000000000LL) == 0)
    {
      if (v5)
      {
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0LL, v5, 1LL, a1, v3);
        unint64_t v165 = v3;
        uint64_t v166 = 2LL;
      }

      else
      {
        unint64_t v165 = v3;
        uint64_t v166 = 3LL;
      }

      swift_bridgeObjectRelease_n(v165, v166);
      return swift_bridgeObjectRelease(v3);
    }

    goto LABEL_210;
  }

  Swift::Int v186 = v6;
  uint64_t v193 = v2;
  specialized static Array._allocateUninitialized(_:)(v5 / 2);
  uint64_t v189 = v5;
  v190 = v7;
  uint64_t v204 = v8;
  uint64_t v200 = v3;
  v185 = a1;
  if (v5 <= 0)
  {
    uint64_t v12 = (char *)_swiftEmptyArrayStorage;
    unint64_t v114 = _swiftEmptyArrayStorage[2];
    goto LABEL_171;
  }

  Swift::Int v9 = v5;
  uint64_t v10 = 0LL;
  uint64_t v11 = *a1;
  unint64_t v201 = v3 + 56;
  uint64_t v184 = *a1 - 8;
  uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  uint64_t v196 = v11;
LABEL_4:
  v187 = v12;
  uint64_t v13 = v10 + 1;
  uint64_t v194 = v10;
  if (v10 + 1 >= v9)
  {
    uint64_t v30 = v10 + 1;
LABEL_66:
    if (v30 >= v189) {
      goto LABEL_114;
    }
    if (__OFSUB__(v30, v194)) {
      goto LABEL_209;
    }
    if (v30 - v194 >= v186) {
      goto LABEL_114;
    }
    uint64_t v74 = v194 + v186;
    if (__OFADD__(v194, v186)) {
      goto LABEL_212;
    }
    if (v74 >= v189) {
      uint64_t v74 = v189;
    }
    if (v74 < v194)
    {
LABEL_213:
      __break(1u);
      goto LABEL_214;
    }

    uint64_t v188 = v74;
    if (v30 == v74) {
      goto LABEL_114;
    }
    while (1)
    {
      uint64_t v75 = *(void **)(v11 + 8 * v30);
      uint64_t v191 = v30;
      while (1)
      {
        uint64_t v76 = v30 - 1;
        uint64_t v77 = *(void **)(v11 + 8 * (v30 - 1));
        id v78 = v75;
        id v79 = v77;
        v198 = v78;
        id v80 = [v78 actionIdentifier];
        uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
        uint64_t v83 = v82;

        if (!*(void *)(v3 + 16)
          || (Hasher.init(_seed:)(v203, *(void *)(v3 + 40)),
              String.hash(into:)(v203, v81, v83),
              Swift::Int v84 = Hasher._finalize()(),
              uint64_t v85 = -1LL << *(_BYTE *)(v3 + 32),
              unint64_t v86 = v84 & ~v85,
              ((*(void *)(v201 + ((v86 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v86) & 1) == 0))
        {
LABEL_91:
          char v91 = 0;
          goto LABEL_92;
        }

        uint64_t v87 = *(void *)(v3 + 48);
        uint64_t v88 = (void *)(v87 + 16 * v86);
        uint64_t v89 = v88[1];
        BOOL v90 = *v88 == v81 && v89 == v83;
        if (!v90 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v88, v89, v81, v83, 0LL) & 1) == 0)
        {
          uint64_t v92 = ~v85;
          unint64_t v93 = (v86 + 1) & ~v85;
          if (((*(void *)(v201 + ((v93 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v93) & 1) == 0) {
            goto LABEL_91;
          }
          while (1)
          {
            uint64_t v94 = (void *)(v87 + 16 * v93);
            uint64_t v95 = v94[1];
            BOOL v96 = *v94 == v81 && v95 == v83;
            if (v96 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v94, v95, v81, v83, 0LL) & 1) != 0) {
              break;
            }
            char v91 = 0;
            unint64_t v93 = (v93 + 1) & v92;
            if (((*(void *)(v201 + ((v93 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v93) & 1) == 0) {
              goto LABEL_92;
            }
          }
        }

        char v91 = 1;
LABEL_92:
        swift_bridgeObjectRelease(v83);
        id v97 = [v79 actionIdentifier];
        uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
        uint64_t v100 = v99;

        if (!*(void *)(v200 + 16)) {
          goto LABEL_110;
        }
        Hasher.init(_seed:)(v203, *(void *)(v200 + 40));
        String.hash(into:)(v203, v98, v100);
        Swift::Int v101 = Hasher._finalize()();
        uint64_t v102 = -1LL << *(_BYTE *)(v200 + 32);
        unint64_t v103 = v101 & ~v102;
        if (((*(void *)(v201 + ((v103 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v103) & 1) == 0) {
          goto LABEL_110;
        }
        uint64_t v104 = *(void *)(v200 + 48);
        uint64_t v105 = (void *)(v104 + 16 * v103);
        uint64_t v106 = v105[1];
        BOOL v107 = *v105 == v98 && v106 == v100;
        if (!v107 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v105, v106, v98, v100, 0LL) & 1) == 0) {
          break;
        }
LABEL_106:

        swift_bridgeObjectRelease(v100);
        unint64_t v3 = v200;
        if ((v91 & 1) != 0) {
          goto LABEL_111;
        }
        uint64_t v11 = v196;
        if (!v196) {
          goto LABEL_216;
        }
        uint64_t v75 = *(void **)(v196 + 8 * v30);
        *(void *)(v196 + 8 * v30) = *(void *)(v196 + 8 * v76);
        *(void *)(v196 + 8 * v76) = v75;
        --v30;
        if (v76 == v194) {
          goto LABEL_112;
        }
      }

      uint64_t v108 = ~v102;
      while (1)
      {
        unint64_t v103 = (v103 + 1) & v108;
        if (((*(void *)(v201 + ((v103 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v103) & 1) == 0) {
          break;
        }
        uint64_t v109 = (void *)(v104 + 16 * v103);
        uint64_t v110 = v109[1];
        BOOL v111 = *v109 == v98 && v110 == v100;
        if (v111 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v109, v110, v98, v100, 0LL) & 1) != 0) {
          goto LABEL_106;
        }
      }

LABEL_110:
      swift_bridgeObjectRelease(v100);
      unint64_t v3 = v200;
LABEL_111:
      uint64_t v11 = v196;
LABEL_112:
      uint64_t v30 = v191 + 1;
      if (v191 + 1 == v188)
      {
        uint64_t v30 = v188;
LABEL_114:
        if (v30 < v194)
        {
LABEL_208:
          __break(1u);
LABEL_209:
          __break(1u);
LABEL_210:
          __break(1u);
          goto LABEL_211;
        }

        uint64_t v192 = v30;
        uint64_t v12 = v187;
        if ((swift_isUniquelyReferenced_nonNull_native(v187) & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *((void *)v187 + 2) + 1LL,  1,  v187);
          uint64_t v12 = v163;
        }

        unint64_t v113 = *((void *)v12 + 2);
        unint64_t v112 = *((void *)v12 + 3);
        unint64_t v114 = v113 + 1;
        uint64_t v11 = v196;
        if (v113 >= v112 >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v112 > 1,  v113 + 1,  1,  v12);
          uint64_t v11 = v196;
          uint64_t v12 = v164;
        }

        *((void *)v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v114;
        uint64_t v115 = v12 + 32;
        uint64_t v116 = &v12[16 * v113 + 32];
        *(void *)uint64_t v116 = v194;
        *((void *)v116 + 1) = v192;
        if (v113)
        {
          while (1)
          {
            unint64_t v117 = v114 - 1;
            if (v114 >= 4)
            {
              v122 = &v115[2 * v114];
              uint64_t v123 = *(v122 - 8);
              uint64_t v124 = *(v122 - 7);
              BOOL v128 = __OFSUB__(v124, v123);
              uint64_t v125 = v124 - v123;
              if (v128) {
                goto LABEL_193;
              }
              uint64_t v127 = *(v122 - 6);
              uint64_t v126 = *(v122 - 5);
              BOOL v128 = __OFSUB__(v126, v127);
              uint64_t v120 = v126 - v127;
              char v121 = v128;
              if (v128) {
                goto LABEL_194;
              }
              unint64_t v129 = v114 - 2;
              uint64_t v130 = &v115[2 * v114 - 4];
              uint64_t v132 = *v130;
              uint64_t v131 = v130[1];
              BOOL v128 = __OFSUB__(v131, v132);
              uint64_t v133 = v131 - v132;
              if (v128) {
                goto LABEL_195;
              }
              BOOL v128 = __OFADD__(v120, v133);
              uint64_t v134 = v120 + v133;
              if (v128) {
                goto LABEL_197;
              }
              if (v134 >= v125)
              {
                v152 = &v115[2 * v117];
                uint64_t v154 = *v152;
                uint64_t v153 = v152[1];
                BOOL v128 = __OFSUB__(v153, v154);
                uint64_t v155 = v153 - v154;
                if (v128) {
                  goto LABEL_203;
                }
                BOOL v145 = v120 < v155;
                goto LABEL_151;
              }
            }

            else
            {
              if (v114 != 3)
              {
                uint64_t v146 = *((void *)v12 + 4);
                uint64_t v147 = *((void *)v12 + 5);
                BOOL v128 = __OFSUB__(v147, v146);
                uint64_t v139 = v147 - v146;
                char v140 = v128;
                goto LABEL_145;
              }

              uint64_t v119 = *((void *)v12 + 4);
              uint64_t v118 = *((void *)v12 + 5);
              BOOL v128 = __OFSUB__(v118, v119);
              uint64_t v120 = v118 - v119;
              char v121 = v128;
            }

            if ((v121 & 1) != 0) {
              goto LABEL_196;
            }
            unint64_t v129 = v114 - 2;
            uint64_t v135 = &v115[2 * v114 - 4];
            uint64_t v137 = *v135;
            uint64_t v136 = v135[1];
            BOOL v138 = __OFSUB__(v136, v137);
            uint64_t v139 = v136 - v137;
            char v140 = v138;
            if (v138) {
              goto LABEL_198;
            }
            v141 = &v115[2 * v117];
            uint64_t v143 = *v141;
            uint64_t v142 = v141[1];
            BOOL v128 = __OFSUB__(v142, v143);
            uint64_t v144 = v142 - v143;
            if (v128) {
              goto LABEL_200;
            }
            if (__OFADD__(v139, v144)) {
              goto LABEL_202;
            }
            if (v139 + v144 >= v120)
            {
              BOOL v145 = v120 < v144;
LABEL_151:
              if (v145) {
                unint64_t v117 = v129;
              }
              goto LABEL_153;
            }

LABEL_211:
              __break(1u);
LABEL_212:
              __break(1u);
              goto LABEL_213;
            }

            if (v160 < v157) {
              goto LABEL_190;
            }
            if (v158 > *((void *)v12 + 2)) {
              goto LABEL_191;
            }
            unint64_t v162 = v158;
            uint64_t *v156 = v157;
            v115[2 * v3 + 1] = v160;
            unint64_t v3 = *((void *)v12 + 2);
            if (v158 >= v3) {
              goto LABEL_192;
            }
            unint64_t v114 = v3 - 1;
            memmove(v159, v159 + 2, 16 * (v3 - 1 - v162));
            *((void *)v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v3 - 1;
            BOOL v145 = v3 > 2;
            unint64_t v3 = v200;
            uint64_t v11 = v196;
            if (!v145) {
              goto LABEL_162;
            }
          }
        }

        unint64_t v114 = 1LL;
LABEL_162:
        Swift::Int v9 = v189;
        uint64_t v10 = v192;
        if (v192 >= v189)
        {
LABEL_171:
          uint64_t v170 = (uint64_t)v12;
          if (v114 >= 2)
          {
            uint64_t v171 = *v185;
            uint64_t v202 = *v185;
            while (1)
            {
              unint64_t v172 = v114 - 2;
              if (v114 < 2) {
                break;
              }
              if (!v171) {
                goto LABEL_219;
              }
              unint64_t v3 = v114 - 1;
              uint64_t v173 = *(void *)(v170 + 32 + 16 * v172);
              uint64_t v174 = *(void *)(v170 + 32 + 16 * (v114 - 1) + 8);
              v175 = (char *)(v171 + 8 * v173);
              v176 = (char *)(v171 + 8LL * *(void *)(v170 + 32 + 16 * (v114 - 1)));
              unint64_t v177 = v171 + 8 * v174;
              swift_bridgeObjectRetain(v200);
              specialized _merge<A>(low:mid:high:buffer:by:)(v175, v176, v177, v190, v200);
              if (v193)
              {
                v167 = (char *)v170;
                goto LABEL_168;
              }

              if (v174 < v173) {
                goto LABEL_205;
              }
              if ((swift_isUniquelyReferenced_nonNull_native(v170) & 1) == 0)
              {
                specialized _ArrayBuffer._consumeAndCreateNew()(v170);
                uint64_t v170 = v180;
              }

              if (v172 >= *(void *)(v170 + 16)) {
                goto LABEL_206;
              }
              v178 = (void *)(v170 + 32 + 16 * v172);
              void *v178 = v173;
              v178[1] = v174;
              unint64_t v179 = *(void *)(v170 + 16);
              if (v114 > v179) {
                goto LABEL_207;
              }
              memmove((void *)(v170 + 32 + 16 * v3), (const void *)(v170 + 32 + 16 * v114), 16 * (v179 - v114));
              *(void *)(v170 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v179 - 1;
              unint64_t v114 = v179 - 1;
              unint64_t v3 = v200;
              uint64_t v171 = v202;
              if (v179 <= 2) {
                goto LABEL_185;
              }
            }

LABEL_204:
            __break(1u);
LABEL_205:
            __break(1u);
LABEL_206:
            __break(1u);
LABEL_207:
            __break(1u);
            goto LABEL_208;
          }

LABEL_185:
          uint64_t v181 = swift_bridgeObjectRelease(v170);
          if (v189 < -1) {
            goto LABEL_215;
          }
          *(void *)((char *)&dword_10 + (v204 & 0xFFFFFFFFFFFFF8LL)) = 0LL;
          specialized Array._endMutation()(v181);
          uint64_t v182 = v204;
          swift_bridgeObjectRelease_n(v3, 3LL);
          swift_bridgeObjectRelease(v182);
          return swift_bridgeObjectRelease(v3);
        }

        goto LABEL_4;
      }
    }
  }

  unint64_t v14 = *(void **)(v11 + 8 * v10);
  id v15 = *(id *)(v11 + 8 * v13);
  id v16 = v14;
  unint64_t v3 = v200;
  id v17 = v16;
  id v18 = [v15 actionIdentifier];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  uint64_t v21 = v20;

  specialized Set.contains(_:)(v19, v21, v200);
  LOBYTE(v19) = v22;
  swift_bridgeObjectRelease(v21);
  id v23 = [v17 actionIdentifier];
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  uint64_t v26 = v25;

  specialized Set.contains(_:)(v24, v26, v200);
  char v28 = v27;

  swift_bridgeObjectRelease(v26);
  uint64_t v29 = v10 + 2;
  if ((v19 & 1) == 0)
  {
    if ((v28 & 1) == 0)
    {
      uint64_t v11 = v196;
      if (v29 < v189)
      {
        int v197 = 0;
        goto LABEL_15;
      }

      goto LABEL_65;
    }

    uint64_t v11 = v196;
    if (v29 < v189)
    {
      int v197 = 1;
      goto LABEL_15;
    }

    uint64_t v68 = v10;
LABEL_59:
    if (v68 < v29)
    {
      uint64_t v69 = (uint64_t *)(v184 + 8 * v29);
      uint64_t v70 = v29;
      uint64_t v71 = v68;
      uint64_t v72 = (uint64_t *)(v11 + 8 * v68);
      do
      {
        if (v71 != --v70)
        {
          if (!v11) {
            goto LABEL_218;
          }
          uint64_t v73 = *v72;
          *uint64_t v72 = *v69;
          uint64_t *v69 = v73;
        }

        ++v71;
        --v69;
        ++v72;
      }

      while (v71 < v70);
    }

LABEL_65:
    uint64_t v30 = v29;
    goto LABEL_66;
  }

  if (v29 >= v189)
  {
    uint64_t v30 = v10 + 2;
    uint64_t v11 = v196;
    goto LABEL_66;
  }

  int v197 = 0;
  uint64_t v11 = v196;
  while (1)
  {
    while (1)
    {
LABEL_15:
      os_log_type_t v31 = *(void **)(v11 + 8 * v13);
      id v32 = *(id *)(v11 + 8 * v29);
      id v33 = v31;
      id v34 = [v32 actionIdentifier];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      uint64_t v37 = v36;

      if (!*(void *)(v3 + 16)
        || (Hasher.init(_seed:)(v203, *(void *)(v3 + 40)),
            String.hash(into:)(v203, v35, v37),
            Swift::Int v38 = Hasher._finalize()(),
            uint64_t v39 = -1LL << *(_BYTE *)(v3 + 32),
            unint64_t v40 = v3,
            unint64_t v41 = v38 & ~v39,
            ((*(void *)(v201 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v41) & 1) == 0))
      {
LABEL_31:
        char v46 = 0;
        goto LABEL_32;
      }

      uint64_t v42 = *(void *)(v40 + 48);
      uint64_t v43 = (void *)(v42 + 16 * v41);
      uint64_t v44 = v43[1];
      BOOL v45 = *v43 == v35 && v44 == v37;
      if (!v45 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v43, v44, v35, v37, 0LL) & 1) == 0)
      {
        uint64_t v47 = ~v39;
        unint64_t v48 = (v41 + 1) & v47;
        if (((*(void *)(v201 + ((v48 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v48) & 1) == 0) {
          goto LABEL_31;
        }
        while (1)
        {
          uint64_t v49 = (void *)(v42 + 16 * v48);
          uint64_t v50 = v49[1];
          BOOL v51 = *v49 == v35 && v50 == v37;
          if (v51 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v49, v50, v35, v37, 0LL) & 1) != 0) {
            break;
          }
          char v46 = 0;
          unint64_t v48 = (v48 + 1) & v47;
          if (((*(void *)(v201 + ((v48 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v48) & 1) == 0) {
            goto LABEL_32;
          }
        }
      }

      char v46 = 1;
LABEL_32:
      swift_bridgeObjectRelease(v37);
      id v52 = [v33 actionIdentifier];
      uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
      uint64_t v55 = v54;

      if (!*(void *)(v200 + 16)) {
        break;
      }
      Hasher.init(_seed:)(v203, *(void *)(v200 + 40));
      String.hash(into:)(v203, v53, v55);
      Swift::Int v56 = Hasher._finalize()();
      uint64_t v57 = -1LL << *(_BYTE *)(v200 + 32);
      unint64_t v58 = v56 & ~v57;
      if (((*(void *)(v201 + ((v58 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v58) & 1) == 0) {
        break;
      }
      uint64_t v59 = *(void *)(v200 + 48);
      uint64_t v60 = (void *)(v59 + 16 * v58);
      uint64_t v61 = v60[1];
      BOOL v62 = *v60 == v53 && v61 == v55;
      if (!v62 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v60, v61, v53, v55, 0LL) & 1) == 0)
      {
        uint64_t v64 = ~v57;
        do
        {
          unint64_t v58 = (v58 + 1) & v64;
          if (((*(void *)(v201 + ((v58 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v58) & 1) == 0) {
            goto LABEL_51;
          }
          uint64_t v65 = (void *)(v59 + 16 * v58);
          uint64_t v66 = v65[1];
          BOOL v67 = *v65 == v53 && v66 == v55;
        }

        while (!v67 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v65, v66, v53, v55, 0LL) & 1) == 0);
      }

      swift_bridgeObjectRelease(v55);
      unint64_t v3 = v200;
      if ((v46 & 1) != 0) {
        goto LABEL_52;
      }
      uint64_t v11 = v196;
      if (!v197) {
        goto LABEL_65;
      }
      uint64_t v63 = v29 + 1;
      uint64_t v13 = v29;
      uint64_t v29 = v63;
      if (v63 >= v189) {
        goto LABEL_56;
      }
    }

LABEL_51:
    swift_bridgeObjectRelease(v55);
    unint64_t v3 = v200;
LABEL_52:
    uint64_t v11 = v196;
    if ((v197 & 1) != 0) {
      break;
    }
    uint64_t v30 = v29 + 1;
    uint64_t v13 = v29;
    uint64_t v29 = v30;
    if (v30 >= v189) {
      goto LABEL_66;
    }
  }

  uint64_t v63 = v29;
LABEL_56:
  uint64_t v29 = v63;
  uint64_t v68 = v194;
  if (v63 >= v194) {
    goto LABEL_59;
  }
LABEL_214:
  __break(1u);
LABEL_215:
  __break(1u);
LABEL_216:
  swift_bridgeObjectRelease_n(v3, 3LL);
  __break(1u);
LABEL_217:
  swift_bridgeObjectRelease_n(v200, 3LL);
  __break(1u);
LABEL_218:
  swift_bridgeObjectRelease_n(v3, 3LL);
  __break(1u);
LABEL_219:
  uint64_t result = swift_bridgeObjectRelease_n(v200, 3LL);
  __break(1u);
  return result;
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 == a2) {
    goto LABEL_42;
  }
  uint64_t v6 = *a4;
  uint64_t v55 = a5 + 56;
  p_name = &stru_4CFF8.name;
  uint64_t v49 = v6;
  while (2)
  {
    uint64_t v8 = *(void **)(v6 + 8 * a3);
    uint64_t v47 = a3;
    while (1)
    {
      uint64_t v51 = a3;
      uint64_t v9 = a3 - 1;
      uint64_t v10 = *(void **)(v6 + 8 * (a3 - 1));
      id v11 = v8;
      id v53 = v10;
      id v12 = objc_msgSend(v11, p_name[451]);
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      uint64_t v15 = v14;

      uint64_t v50 = v9;
      id v52 = v11;
      if (!*(void *)(a5 + 16)
        || (Hasher.init(_seed:)(v54, *(void *)(a5 + 40)),
            String.hash(into:)(v54, v13, v15),
            Swift::Int v16 = Hasher._finalize()(),
            uint64_t v17 = -1LL << *(_BYTE *)(a5 + 32),
            unint64_t v18 = v16 & ~v17,
            ((*(void *)(v55 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v18) & 1) == 0))
      {
LABEL_20:
        char v23 = 0;
        goto LABEL_21;
      }

      uint64_t v19 = *(void *)(a5 + 48);
      uint64_t v20 = (void *)(v19 + 16 * v18);
      uint64_t v21 = v20[1];
      BOOL v22 = *v20 == v13 && v21 == v15;
      if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v13, v15, 0LL) & 1) == 0)
      {
        unint64_t v24 = (v18 + 1) & ~v17;
        if (((*(void *)(v55 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v24) & 1) == 0) {
          goto LABEL_20;
        }
        while (1)
        {
          uint64_t v25 = (void *)(v19 + 16 * v24);
          uint64_t v26 = v25[1];
          BOOL v27 = *v25 == v13 && v26 == v15;
          if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v25, v26, v13, v15, 0LL) & 1) != 0) {
            break;
          }
          char v23 = 0;
          unint64_t v24 = (v24 + 1) & ~v17;
          if (((*(void *)(v55 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v24) & 1) == 0) {
            goto LABEL_21;
          }
        }
      }

      char v23 = 1;
LABEL_21:
      swift_bridgeObjectRelease(v15);
      char v28 = p_name;
      id v29 = objc_msgSend(v53, p_name[451]);
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      uint64_t v32 = v31;

      if (!*(void *)(a5 + 16)) {
        goto LABEL_40;
      }
      Hasher.init(_seed:)(v54, *(void *)(a5 + 40));
      String.hash(into:)(v54, v30, v32);
      Swift::Int v33 = Hasher._finalize()();
      uint64_t v34 = -1LL << *(_BYTE *)(a5 + 32);
      unint64_t v35 = v33 & ~v34;
      if (((*(void *)(v55 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v35) & 1) == 0) {
        goto LABEL_40;
      }
      uint64_t v36 = *(void *)(a5 + 48);
      uint64_t v37 = (void *)(v36 + 16 * v35);
      uint64_t v38 = v37[1];
      BOOL v39 = *v37 == v30 && v38 == v32;
      if (!v39 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v37, v38, v30, v32, 0LL) & 1) == 0) {
        break;
      }
LABEL_28:

      swift_bridgeObjectRelease(v32);
      uint64_t v6 = v49;
      p_name = v28;
      if ((v23 & 1) == 0)
      {
        if (!v49)
        {
          __break(1u);
          return;
        }

        uint64_t v8 = *(void **)(v49 + 8 * v51);
        *(void *)(v49 + 8 * v51) = *(void *)(v49 + 8 * v50);
        *(void *)(v49 + 8 * v50) = v8;
        a3 = v50;
        if (v50 != a1) {
          continue;
        }
      }

      goto LABEL_41;
    }

    uint64_t v40 = ~v34;
    for (unint64_t i = v35 + 1; ; unint64_t i = v42 + 1)
    {
      uint64_t v42 = i & v40;
      uint64_t v43 = (void *)(v36 + 16 * v42);
      uint64_t v44 = v43[1];
      BOOL v45 = *v43 == v30 && v44 == v32;
      if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v43, v44, v30, v32, 0LL) & 1) != 0) {
        goto LABEL_28;
      }
    }

LABEL_42:
  swift_bridgeObjectRelease(a5);
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)( char *a1, char *a2, unint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v65 = a1;
  Swift::Int v5 = a4;
  uint64_t v7 = (id *)a2;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 8;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 8;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 8, a4);
    uint64_t v13 = &v5[8 * v11];
    uint64_t v57 = v5;
    Swift::Int v16 = (id *)(a3 - 8);
    while (1)
    {
      uint64_t v59 = v16 + 1;
      uint64_t v60 = v7;
      unint64_t v63 = (unint64_t)v13;
      uint64_t v17 = v13 - 8;
      uint64_t v19 = v7 - 1;
      unint64_t v18 = *(v7 - 1);
      id v20 = *((id *)v13 - 1);
      id v21 = v18;
      id v22 = [v20 actionIdentifier];
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      uint64_t v25 = v24;

      specialized Set.contains(_:)(v23, v25, a5);
      char v58 = v26;
      swift_bridgeObjectRelease(v25);
      id v27 = [v21 actionIdentifier];
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      uint64_t v30 = v29;

      specialized Set.contains(_:)(v28, v30, a5);
      char v32 = v31;

      swift_bridgeObjectRelease(v30);
      if ((v58 & 1) != 0 || (v32 & 1) == 0)
      {
        uint64_t v7 = v60;
        BOOL v35 = v59 != (id *)v63 || (unint64_t)v16 >= v63;
        uint64_t v13 = v17;
        Swift::Int v5 = v57;
        unint64_t v34 = (unint64_t)v65;
        if (!v35) {
          goto LABEL_26;
        }
      }

      else
      {
        BOOL v33 = v59 != v60 || v16 >= v60;
        uint64_t v17 = (char *)v19;
        uint64_t v7 = v19;
        Swift::Int v5 = v57;
        unint64_t v34 = (unint64_t)v65;
        uint64_t v13 = (char *)v63;
        if (!v33) {
          goto LABEL_26;
        }
      }

      id *v16 = *(id *)v17;
LABEL_26:
      --v16;
    }
  }

  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 8, a4);
  uint64_t v13 = &v5[8 * v9];
  if ((unint64_t)v7 < a3 && v8 >= 8)
  {
    uint64_t v64 = &v5[8 * v9];
    unint64_t v61 = a3;
    while (1)
    {
      uint64_t v37 = v7;
      uint64_t v38 = v5;
      BOOL v39 = *(void **)v5;
      id v40 = *v7;
      id v41 = v39;
      id v42 = [v40 actionIdentifier];
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      uint64_t v45 = v44;

      specialized Set.contains(_:)(v43, v45, a5);
      LOBYTE(v43) = v46;
      swift_bridgeObjectRelease(v45);
      id v47 = [v41 actionIdentifier];
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
      uint64_t v50 = v49;

      specialized Set.contains(_:)(v48, v50, a5);
      char v52 = v51;

      swift_bridgeObjectRelease(v50);
      if ((v43 & 1) == 0 && (v52 & 1) != 0) {
        break;
      }
      id v53 = v38;
      Swift::Int v5 = v38 + 8;
      uint64_t v54 = v65;
      uint64_t v7 = v37;
      if (v65 != v38) {
        goto LABEL_36;
      }
LABEL_37:
      uint64_t v65 = v54 + 8;
      uint64_t v13 = v64;
      if (v5 >= v64 || (unint64_t)v7 >= v61)
      {
        uint64_t v7 = (id *)(v54 + 8);
        goto LABEL_43;
      }
    }

    id v53 = v37;
    uint64_t v7 = v37 + 1;
    uint64_t v54 = v65;
    Swift::Int v5 = v38;
LABEL_36:
    *(void *)uint64_t v54 = *v53;
    goto LABEL_37;
  }

  uint64_t v7 = (id *)a1;
LABEL_43:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v5, (v13 - v5) / 8, (char *)v7);
  swift_bridgeObjectRelease(a5);
  return 1LL;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v11 = (char *)OUTLINED_FUNCTION_1(v10, 16 * v9 + 32);
    size_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || &v14[16 * v8] <= v13) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + __swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, 16 * v8);
  }

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_7();
}

void specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
}

void (*specialized protocol witness for Collection.subscript.read in conformance [A]( void *a1, unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  id v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

void (*specialized Array.subscript.read(void *a1, unint64_t a2, uint64_t a3))(id *a1)
{
  unint64_t v6 = a3 & 0xC000000000000001LL;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a2, (a3 & 0xC000000000000001LL) == 0, a3);
  if (v6) {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
  }
  else {
    id v7 = *(id *)(a3 + 8 * a2 + 32);
  }
  *a1 = v7;
  return Array.subscript.readspecialized ;
}

void Array.subscript.readspecialized (id *a1)
{
}

void specialized Dictionary<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(a2 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  Swift::UInt v9 = 0LL;
  int64_t v10 = 0LL;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    Swift::Int v16 = (uint64_t *)(*(void *)(a2 + 48) + 16 * i);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = *(void *)(*(void *)(a2 + 56) + 8 * i);
    uint64_t v20 = *(void *)(a1 + 64);
    __int128 v21 = *(_OWORD *)(a1 + 16);
    v23[0] = *(_OWORD *)a1;
    v23[1] = v21;
    __int128 v22 = *(_OWORD *)(a1 + 48);
    v23[2] = *(_OWORD *)(a1 + 32);
    v23[3] = v22;
    uint64_t v24 = v20;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v23, v17, v18);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRetain(v19);
    specialized Dictionary<>.hash(into:)((uint64_t)v23, v19);
    swift_bridgeObjectRelease_n(v19, 2LL);
    v9 ^= Hasher._finalize()();
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_21;
    }

    if (v13 >= v8) {
      goto LABEL_19;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        goto LABEL_19;
      }
      unint64_t v14 = *(void *)(v4 + 8 * v10);
      if (!v14) {
        break;
      }
    }

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  Swift::UInt v8;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  _OWORD v25[4];
  uint64_t v26;
  uint64_t v24 = a2 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  uint64_t v6 = v5 & *(void *)(a2 + 64);
  unint64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  int64_t v8 = 0LL;
  Swift::UInt v9 = 0LL;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  int64_t v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v10 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    int64_t v15 = *(void **)(*(void *)(a2 + 48) + 8 * i);
    Swift::Int v16 = *(void **)(*(void *)(a2 + 56) + 8 * i);
    uint64_t v17 = *(void *)(a1 + 64);
    uint64_t v18 = *(_OWORD *)(a1 + 16);
    v25[0] = *(_OWORD *)a1;
    v25[1] = v18;
    uint64_t v19 = *(_OWORD *)(a1 + 48);
    __int128 v25[2] = *(_OWORD *)(a1 + 32);
    void v25[3] = v19;
    char v26 = v17;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    __int128 v22 = v21;
    uint64_t v23 = v15;
    swift_unknownObjectRetain(v16);
    String.hash(into:)(v25, v20, v22);

    swift_bridgeObjectRelease(v22);
    Hasher._combine(_:)((Swift::UInt)[v16 hash]);
    swift_unknownObjectRelease(v16);
    v8 ^= Hasher._finalize()();
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    size_t v12 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_21;
    }

    if (v12 >= v7) {
      goto LABEL_19;
    }
    int64_t v13 = *(void *)(v24 + 8 * v12);
    ++v9;
    if (!v13)
    {
      Swift::UInt v9 = v12 + 1;
      if (v12 + 1 >= v7) {
        goto LABEL_19;
      }
      int64_t v13 = *(void *)(v24 + 8 * v9);
      if (!v13) {
        break;
      }
    }

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0LL,  a1);
}

uint64_t specialized static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[18] = a3;
  v4[19] = a4;
  v4[17] = a2;
  uint64_t v6 = type metadata accessor for DialogDetails(0LL);
  v4[20] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[21] = v7;
  v4[22] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v4[5] = type metadata accessor for DefaultLinkClient();
  v4[6] = &protocol witness table for DefaultLinkClient;
  __int128 v4[2] = a1;
  swift_retain(a1);
  return swift_task_switch( specialized static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:),  0LL,  0LL);
}

uint64_t specialized static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:)()
{
  uint64_t v5 = OUTLINED_FUNCTION_1((uint64_t)&unk_4AB68, 24LL);
  *(void *)(v5 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v4;
  uint64_t v6 = OUTLINED_FUNCTION_1((uint64_t)&unk_4AB90, 32LL);
  *(void *)(v6 + outlined destroy of AppIntentDialogCallback(v0 + 16) = partial apply for implicit closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:);
  *(void *)(v6 + 24) = v5;
  *uint64_t v0 = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed DialogProperties) -> (@out Any);
  v0[1] = v6;
  OUTLINED_FUNCTION_62_2(v6, enum case for DialogDetails.catTemplateCallback(_:));
  uint64_t v7 = (void *)swift_task_alloc(48LL);
  v7[2] = v1;
  v7[3] = v4;
  void v7[4] = v3;
  OUTLINED_FUNCTION_38_5( (uint64_t)v7,  0x800000000003E6F0LL,  v8,  (uint64_t)partial apply for closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:));
  OUTLINED_FUNCTION_82_1();
  uint64_t v9 = OUTLINED_FUNCTION_66_2();
  OUTLINED_FUNCTION_59_3(v9, v10, v11, v12, v13, v14, v15, v16, v23);
  uint64_t v17 = type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts();
  OUTLINED_FUNCTION_1(v17, 72LL);
  OUTLINED_FUNCTION_89_1();
  *(void *)(v2 + 80) = v17;
  lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( &lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts,  v18,  (uint64_t (*)(uint64_t))type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts,  (uint64_t)&protocol conformance descriptor for AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts);
  OUTLINED_FUNCTION_37_3(v19);
  OUTLINED_FUNCTION_88_2();
  swift_release(v5);
  __swift_destroy_boxed_opaque_existential_1(v3);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OwnerDefinition>);
  __int128 v21 = (__n128 *)OUTLINED_FUNCTION_1(v20, 72LL);
  OUTLINED_FUNCTION_58_3(v21, (__n128)xmmword_3C030);
  __swift_destroy_boxed_opaque_existential_1(v1);
  swift_task_dealloc(v0);
  return OUTLINED_FUNCTION_2_5((uint64_t)v21, *(uint64_t (**)(void))(v2 + 8));
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 *v21;
  uint64_t v23;
  OUTLINED_FUNCTION_52_3();
  uint64_t v5 = OUTLINED_FUNCTION_1((uint64_t)&unk_4AC30, 24LL);
  *(void *)(v5 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v4;
  uint64_t v6 = OUTLINED_FUNCTION_1((uint64_t)&unk_4AC58, 32LL);
  *(void *)(v6 + outlined destroy of AppIntentDialogCallback(v0 + 16) = implicit closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:)partial apply;
  *(void *)(v6 + 24) = v5;
  *uint64_t v0 = &thunk for @escaping @callee_guaranteed (@in_guaranteed DialogProperties) -> (@out Any)partial apply;
  v0[1] = v6;
  OUTLINED_FUNCTION_62_2(v6, enum case for DialogDetails.catTemplateCallback(_:));
  uint64_t v7 = (void *)swift_task_alloc(48LL);
  v7[2] = v1;
  v7[3] = v4;
  void v7[4] = v3;
  OUTLINED_FUNCTION_38_5( (uint64_t)v7,  0x800000000003E6F0LL,  v8,  (uint64_t)closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:)partial apply);
  OUTLINED_FUNCTION_82_1();
  uint64_t v9 = OUTLINED_FUNCTION_66_2();
  OUTLINED_FUNCTION_59_3(v9, v10, v11, v12, v13, v14, v15, v16, v23);
  uint64_t v17 = type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts();
  OUTLINED_FUNCTION_1(v17, 72LL);
  OUTLINED_FUNCTION_89_1();
  *(void *)(v2 + 80) = v17;
  lazy protocol witness table accessor for type LinkSuggestionsGenerator and conformance LinkSuggestionsGenerator( &lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts,  v18,  (uint64_t (*)(uint64_t))type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts,  (uint64_t)&protocol conformance descriptor for AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts);
  OUTLINED_FUNCTION_37_3(v19);
  OUTLINED_FUNCTION_88_2();
  swift_release(v5);
  __swift_destroy_boxed_opaque_existential_1(v3);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<OwnerDefinition>);
  __int128 v21 = (__n128 *)OUTLINED_FUNCTION_1(v20, 72LL);
  OUTLINED_FUNCTION_58_3(v21, (__n128)xmmword_3C030);
  __swift_destroy_boxed_opaque_existential_1(v1);
  swift_task_dealloc(v0);
  return OUTLINED_FUNCTION_2_5((uint64_t)v21, *(uint64_t (**)(void))(v2 + 8));
}

uint64_t specialized static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[18] = a3;
  v6[19] = a4;
  v6[17] = a2;
  uint64_t v9 = type metadata accessor for DialogDetails(0LL);
  v6[20] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[21] = v10;
  v6[22] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  void v6[5] = a5;
  v6[6] = a6;
  __swift_allocate_boxed_opaque_existential_0Tm(v6 + 2);
  (*(void (**)(void))(*(void *)(a5 - 8) + 16LL))();
  OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_16_6(v11, v12, v13);
}

uint64_t outlined init with take of AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase?( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of String(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator()
{
  return objc_opt_self(&OBJC_CLASS____TtCC25SiriLinkSuggestionsPlugin46AutoShortcutsSuggestionsOwnerDefinitionFactory43AutoShortcutCandidateSuggestionConfigurator);
}

uint64_t sub_39828()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys,  &type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys,  &type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys,  &type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys,  &type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors;
  if (!lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors,  &type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors;
  if (!lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors,  &type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors);
  }

  return result;
}

void base witness table accessor for InternalResolver in AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver( uint64_t a1, uint64_t a2)
{
}

uint64_t type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver()
{
  return objc_opt_self(&OBJC_CLASS____TtCC25SiriLinkSuggestionsPlugin46AutoShortcutsSuggestionsOwnerDefinitionFactory25AutoShortcutAppIdResolver);
}

void base witness table accessor for Wrappable in AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutAppIdResolver( uint64_t a1, uint64_t a2)
{
}

void base witness table accessor for InternalResolver in AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver( uint64_t a1, uint64_t a2)
{
}

uint64_t type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver()
{
  return objc_opt_self(&OBJC_CLASS____TtCC25SiriLinkSuggestionsPlugin46AutoShortcutsSuggestionsOwnerDefinitionFactory26AutoShortcutPhraseResolver);
}

void base witness table accessor for Wrappable in AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutPhraseResolver( uint64_t a1, uint64_t a2)
{
}

unint64_t lazy protocol witness table accessor for type AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt;
  if (!lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt,  &type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails;
  if (!lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails,  &type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata;
  if (!lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata,  &type metadata for AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata and conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata);
  }

  return result;
}

uint64_t type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory()
{
  return objc_opt_self(&OBJC_CLASS____TtC25SiriLinkSuggestionsPlugin46AutoShortcutsSuggestionsOwnerDefinitionFactory);
}

void type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.Constants()
{
}

void destroy for AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails(uint64_t a1)
{
}

void *initializeWithCopy for AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails( void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  uint64_t v5 = (void *)a2[3];
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  id v6 = v5;
  return a1;
}

void *assignWithCopy for AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails( void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = (void *)a2[3];
  uint64_t v9 = (void *)a1[3];
  a1[3] = v8;
  id v10 = v8;

  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails( void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = (void *)a1[3];
  a1[3] = *(void *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails( uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + outlined destroy of AppIntentDialogCallback(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails()
{
}

void type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.CandidateApplicationDetails.ActionMetadataExcerpt()
{
}

uint64_t type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.OnRequestAutoShortcuts()
{
  return objc_opt_self(&OBJC_CLASS____TtCC25SiriLinkSuggestionsPlugin46AutoShortcutsSuggestionsOwnerDefinitionFactory22OnRequestAutoShortcuts);
}

void destroy for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase(uint64_t a1)
{
}

void *initializeWithCopy for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase( void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = (void *)a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  id v6 = v5;
  return a1;
}

void *assignWithCopy for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase( void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = (void *)a2[4];
  uint64_t v9 = (void *)a1[4];
  a1[4] = v8;
  id v10 = v8;

  return a1;
}

void *assignWithTake for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase( void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  uint64_t v6 = (void *)a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase( uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v__swift_destroy_boxed_opaque_existential_1(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase()
{
}

uint64_t storeEnumTagSinglePayload for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_39FE8 + 4 * byte_3DF45[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_3A01C + 4 * byte_3DF40[v4]))();
}

uint64_t sub_3A01C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_3A024(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x3A02CLL);
  }
  return result;
}

uint64_t sub_3A038(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x3A040LL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_3A044(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_3A04C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.ResolvedPhrase.CodingKeys()
{
}

void type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.SystemProtocolMetadata()
{
}

uint64_t storeEnumTagSinglePayload for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_3A0B0 + 4 * byte_3DF4A[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_3A0D0 + 4 * byte_3DF4F[v4]))();
  }
}

_BYTE *sub_3A0B0(_BYTE *result, char a2)
{
  *__n128 result = a2;
  return result;
}

_BYTE *sub_3A0D0(_BYTE *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_3A0D8(_DWORD *result, int a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_3A0E0(_WORD *result, __int16 a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_3A0E8(_WORD *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_3A0F0(_DWORD *result)
{
  *__n128 result = 0;
  return result;
}

void type metadata accessor for AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoshortcutErrors()
{
}

void type metadata accessor for NSObject(uint64_t a1, unint64_t *a2, void *a3)
{
  if (!*a2)
  {
    uint64_t v4 = objc_opt_self(*a3);
    atomic_store(swift_getObjCClassMetadata(v4), a2);
  }

  OUTLINED_FUNCTION_3();
}

void partial apply for implicit closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:)( void *a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_3A154()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed DialogProperties) -> (@out Any)()
{
  __int16 v1 = (void *)swift_task_alloc(dword_4FB6C);
  *(void *)(v0 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v1;
  uint64_t v2 = OUTLINED_FUNCTION_23_3(v1);
  return OUTLINED_FUNCTION_20_4(v2, v3, v4, v5, v6);
}

uint64_t partial apply for closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:)( uint64_t a1)
{
  return closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.createAutoShortcutSuggestions(linkClient:builder:clock:)( a1,  v1[2],  v1[3],  v1[4]);
}

uint64_t sub_3A1D8()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t partial apply for closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.rngFactory(_:)@<X0>( double a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  return closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.rngFactory(_:)( a1,  a2 & 1,  (void *)(v3 + 16),  a3);
}

uint64_t partial apply for closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.createPhraseParameter(clock:)()
{
  return closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.createPhraseParameter(clock:)((void *)(v0 + 16));
}

uint64_t sub_3A210()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Any, Any?>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t partial apply for closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.stripOutPhrase(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in static AutoShortcutsSuggestionsOwnerDefinitionFactory.stripOutPhrase(_:)(a1, a2);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed DialogProperties) -> (@out Any)( uint64_t (*a1)(void))
{
  return a1();
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed DialogProperties) -> (@out Any)partial apply()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_4FB6C);
  *(void *)(v0 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v1;
  uint64_t v2 = OUTLINED_FUNCTION_23_3(v1);
  return OUTLINED_FUNCTION_20_4(v2, v3, v4, v5, v6);
}

uint64_t OUTLINED_FUNCTION_16_6(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

void *OUTLINED_FUNCTION_17_5(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, 0LL);
}

uint64_t OUTLINED_FUNCTION_20_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_23_3(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_24_5@<X0>(uint64_t a1@<X8>)
{
  return swift_arrayDestroy(v1, 1LL, a1 + 8);
}

uint64_t OUTLINED_FUNCTION_27_3()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t OUTLINED_FUNCTION_32_5()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void *OUTLINED_FUNCTION_35_4(unint64_t a1)
{
  return specialized Sequence.compactMap<A>(_:)(a1, v2, v3, v1, v4);
}

uint64_t OUTLINED_FUNCTION_37_3(uint64_t a1)
{
  *(void *)(v2 + 88) = a1;
  *(void *)(v2 + outlined init with copy of LinkClient(v0 + 16, v0 + 56) = v1;
  return dispatch thunk of SuggestionOwnerDefinitionBuilder.withConfiguratorProvider(_:)(v2 + 56);
}

uint64_t OUTLINED_FUNCTION_38_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return dispatch thunk of SuggestionOwnerDefinitionBuilder.add(suggestionId:dialogDetails:builder:)( 0xD000000000000016LL,  a2,  v4,  a4,  v5);
}

uint64_t OUTLINED_FUNCTION_40_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_48_2(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v3 - 120, v2);
}

BOOL OUTLINED_FUNCTION_49_3(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_58_3(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return dispatch thunk of SuggestionOwnerDefinitionBuilder.build()();
}

void OUTLINED_FUNCTION_59_3( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void OUTLINED_FUNCTION_60_3(float a1)
{
  *uint64_t v3 = a1;
  *(void *)(v2 + 144) = *(void *)(v1 + 16);
}

uint64_t OUTLINED_FUNCTION_61_3()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_62_2(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v2, a2, v3);
}

uint64_t OUTLINED_FUNCTION_63_2(uint64_t a1)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, v1);
}

  ;
}

uint64_t OUTLINED_FUNCTION_65_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5[2] = a1;
  v5[3] = a2;
  v5[4] = a3;
  v5[5] = a4;
  return swift_unknownObjectRelease(v4);
}

uint64_t OUTLINED_FUNCTION_66_2()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_67_0(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t OUTLINED_FUNCTION_69_1(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0x726F000000000000LL;
}

uint64_t OUTLINED_FUNCTION_70_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_arrayDestroy(v3, 2LL, a3);
}

uint64_t OUTLINED_FUNCTION_75_2(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, a2, v3);
}

uint64_t OUTLINED_FUNCTION_78_2()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 200));
}

uint64_t OUTLINED_FUNCTION_79_1@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 200);
  *(void *)(v1 + 200) = a1;
  return swift_bridgeObjectRelease(v2);
}

void OUTLINED_FUNCTION_80_1(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
}

uint64_t OUTLINED_FUNCTION_81_2()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t OUTLINED_FUNCTION_82_1()
{
  return swift_task_dealloc(v0);
}

uint64_t OUTLINED_FUNCTION_83_1(uint64_t a1)
{
  return String.hash(into:)(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_84_1()
{
  return 0LL;
}

uint64_t OUTLINED_FUNCTION_87_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return dispatch thunk of Actor.unownedExecutor.getter(a1, *(void *)(a2 + 8));
}

uint64_t OUTLINED_FUNCTION_88_2()
{
  return swift_release(v0);
}

void OUTLINED_FUNCTION_89_1()
{
}

uint64_t LinkRegistryObserver.__allocating_init(refreshableService:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = OUTLINED_FUNCTION_1_12();
  uint64_t v7 = swift_allocObject(v4, v5, v6);
  LinkRegistryObserver.init(refreshableService:)(a1, a2);
  return v7;
}

uint64_t LinkRegistryObserver.init(refreshableService:)(uint64_t a1, uint64_t a2)
{
  id v5 = [(id)objc_opt_self(NSDistributedNotificationCenter) defaultCenter];
  *(void *)(v2 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v5;
  uint64_t v6 = LNMetadataChangedNotification;
  uint64_t v7 = swift_allocObject(&unk_4ADE0, 32LL, 7LL);
  *(void *)(v7 + outlined destroy of AppIntentDialogCallback(v0 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  void v13[4] = partial apply for closure #1 in LinkRegistryObserver.init(refreshableService:);
  uint64_t v14 = v7;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256LL;
  _OWORD v13[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  v13[3] = &block_descriptor_0;
  uint64_t v8 = _Block_copy(v13);
  uint64_t v9 = v14;
  swift_unknownObjectRetain(a1);
  id v10 = v5;
  swift_release(v9);
  id v11 = [v10 addObserverForName:v6 object:0 queue:0 usingBlock:v8];
  swift_unknownObjectRelease(a1);
  _Block_release(v8);

  *(void *)(v2 + 24) = v11;
  return v2;
}

void closure #1 in LinkRegistryObserver.init(refreshableService:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for linkSuggestions != -1) {
    swift_once(&one-time initialization token for linkSuggestions, one-time initialization function for linkSuggestions);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = __swift_project_value_buffer(v8, (uint64_t)static Logger.linkSuggestions);
  id v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_0, v10, v11, "Received LNMetadataChanged notification - refreshing plugin", v12, 2u);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  if (a2)
  {
    uint64_t v14 = type metadata accessor for TaskPriority(0LL);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 1LL, 1LL, v14);
    uint64_t v15 = (void *)swift_allocObject(&unk_4AE30, 48LL, 7LL);
    v15[2] = 0LL;
    void v15[3] = 0LL;
    void v15[4] = a2;
    v15[5] = a3;
    swift_unknownObjectRetain(a2);
    uint64_t v16 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( (uint64_t)v7,  (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in LinkRegistryObserver.init(refreshableService:),  (uint64_t)v15);
    swift_release(v16);
  }

  else
  {
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v13);
    uint64_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, (os_log_type_t)v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl( &dword_0,  v20,  (os_log_type_t)v17,  "Unable to refresh link suggestions. No refreshable service is found",  v18,  2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }
  }

uint64_t sub_3A924()
{
  uint64_t v1 = OUTLINED_FUNCTION_1_12();
  return swift_deallocObject(v1, v2, v3);
}

void partial apply for closure #1 in LinkRegistryObserver.init(refreshableService:)(uint64_t a1)
{
}

uint64_t closure #1 in closure #1 in LinkRegistryObserver.init(refreshableService:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType = swift_getObjectType(a4);
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to dispatch thunk of SuggestionsServiceRefreshable.refreshAsync()[1]);
  *(void *)(v5 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v8;
  *uint64_t v8 = v5;
  v8[1] = protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance LinkHomeScreenSuggestionConfigurator;
  return dispatch thunk of SuggestionsServiceRefreshable.refreshAsync()(ObjectType, a5);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  if (__swift_getEnumTagSinglePayload(a1, 1LL, v6) == 1)
  {
    outlined destroy of TaskPriority?(a1);
    uint64_t v7 = 7168LL;
  }

  else
  {
    unsigned __int8 v8 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v7 = v8 | 0x1C00LL;
  }

  uint64_t v9 = *(void *)(a3 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v9);
    uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
    uint64_t v14 = v13;
    swift_unknownObjectRelease(v9);
  }

  else
  {
    uint64_t v12 = 0LL;
    uint64_t v14 = 0LL;
  }

  uint64_t v15 = swift_allocObject(&unk_4AE58, 32LL, 7LL);
  *(void *)(v15 + outlined destroy of AppIntentDialogCallback(v0 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  if (v14 | v12)
  {
    v18[0] = 0LL;
    v18[1] = 0LL;
    uint64_t v16 = v18;
    v18[2] = v12;
    _OWORD v18[3] = v14;
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  return swift_task_create( v7,  v16,  (char *)&type metadata for () + 8,  &_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATu,  v15);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ()( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Notification(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void (**)(char *))(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3__swift_destroy_boxed_opaque_existential_1(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t block_destroy_helper(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t LinkRegistryObserver.deinit()
{
  uint64_t v1 = *(void **)(v0 + 16);
  [v1 removeObserver:*(void *)(v0 + 24)];

  swift_unknownObjectRelease(*(void *)(v0 + 24));
  return v0;
}

uint64_t LinkRegistryObserver.__deallocating_deinit()
{
  uint64_t v0 = OUTLINED_FUNCTION_1_12();
  return swift_deallocClassInstance(v0, v1, v2);
}

uint64_t type metadata accessor for LinkRegistryObserver()
{
  return objc_opt_self(&OBJC_CLASS____TtC25SiriLinkSuggestionsPlugin20LinkRegistryObserver);
}

uint64_t sub_3AC20()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t partial apply for closure #1 in closure #1 in LinkRegistryObserver.init(refreshableService:)( uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_4FC6C);
  *(void *)(v2 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance LinkSuggestionConfigurator;
  return closure #1 in closure #1 in LinkRegistryObserver.init(refreshableService:)(a1, v4, v5, v7, v6);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  return OUTLINED_FUNCTION_0_4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_3AD50()
{
  uint64_t v1 = OUTLINED_FUNCTION_1_12();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_4FC7C);
  *(void *)(v2 + outlined destroy of AppIntentDialogCallback(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for CandidateSuggestionConfigurator.updateContext(context:signal:) in conformance AutoShortcutsSuggestionsOwnerDefinitionFactory.AutoShortcutCandidateSuggestionConfigurator;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))( a1,  v4);
}

uint64_t OUTLINED_FUNCTION_1_12()
{
  return v0;
}