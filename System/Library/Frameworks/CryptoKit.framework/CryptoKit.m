uint64_t HPKE.KDF.value.getter()
{
  unsigned __int8 *v0;
  return *v0 + 1;
}

BOOL static HPKE.KDF.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t HPKE.KDF.hash(into:)()
{
  return sub_186F87FF4();
}

void *static HPKE.KDF.allCases.getter()
{
  return &unk_189FABAD8;
}

uint64_t HPKE.KDF.hashValue.getter()
{
  return sub_186F88018();
}

BOOL sub_186F318C8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void sub_186F318DC(void *a1@<X8>)
{
  *a1 = &unk_189FABB00;
}

uint64_t sub_186F318EC()
{
  return sub_186F88018();
}

uint64_t sub_186F31930()
{
  return sub_186F87FF4();
}

uint64_t sub_186F31958()
{
  return sub_186F88018();
}

unint64_t sub_186F3199C()
{
  unint64_t result = qword_18C6B06C8;
  if (!qword_18C6B06C8)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C6B06D0);
    unint64_t result = MEMORY[0x18959EFD8](MEMORY[0x189618488], v1);
    atomic_store(result, (unint64_t *)&qword_18C6B06C8);
  }

  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = MEMORY[0x18959EFCC](255LL, (char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_186F31A30()
{
  unint64_t result = qword_18C6B06D8;
  if (!qword_18C6B06D8)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for HPKE.KDF, &type metadata for HPKE.KDF);
    atomic_store(result, (unint64_t *)&qword_18C6B06D8);
  }

  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t _s3KDFOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

      __break(1u);
      return result;
    }

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  __break(1u);
  return result;
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

          sub_186F36690();
          swift_allocError();
          BOOL v7 = 4;
          goto LABEL_18;
        }

        goto LABEL_21;
      }
    }

    __break(1u);
LABEL_21:
    __break(1u);
  }

  __break(1u);
}

  __break(1u);
  return result;
}

uint64_t _s3KDFOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_186F31B60 + 4 * byte_186F888E5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_186F31B94 + 4 * byte_186F888E0[v4]))();
}

uint64_t sub_186F31B94(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F31B9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x186F31BA4LL);
  }
  return result;
}

uint64_t sub_186F31BB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x186F31BB8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_186F31BBC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F31BC4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F31BD0(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_186F31BDC(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for HPKE.KDF()
{
  return &type metadata for HPKE.KDF;
}

void type metadata accessor for ccdigest_ctx(uint64_t a1)
{
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_186F31C2C(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_186F31C88(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 72) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 72) = 0;
    }
    if (a2) {
      *(void *)(result + 48) = a2;
    }
  }

  return result;
}

void type metadata accessor for ccdigest_info(uint64_t a1)
{
}

__n128 __swift_memcpy256_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __int128 v8 = a2[8];
  __int128 v9 = a2[9];
  __int128 v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  __n128 result = (__n128)a2[12];
  __int128 v12 = a2[13];
  __int128 v13 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v13;
  *(__n128 *)(a1 + 192) = result;
  *(_OWORD *)(a1 + 208) = v12;
  return result;
}

uint64_t sub_186F31D44(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 256)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_186F31D64(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 248) = 0LL;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 256) = v3;
  return result;
}

void type metadata accessor for ccchacha20poly1305_ctx(uint64_t a1)
{
}

uint64_t _s11KeyScheduleVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t sub_186F31E30(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_186F31E8C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 80) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }

  return result;
}

void type metadata accessor for ccmode_gcm(uint64_t a1)
{
}

void type metadata accessor for ccgcm_ctx(uint64_t a1)
{
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for SHA256Digest(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for SHA256Digest(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for ccec_cp(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for cc_impl(uint64_t a1)
{
}

void type metadata accessor for ccdigest_state(uint64_t a1)
{
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t sub_186F31FE0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_186F32000(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 88) = 0LL;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 96) = v3;
  return result;
}

void type metadata accessor for ccpoly1305_ctx(uint64_t a1)
{
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t sub_186F3208C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 136)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_186F320AC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 136) = v3;
  return result;
}

void type metadata accessor for ccchacha20_ctx(uint64_t a1)
{
}

void sub_186F3210C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_186F32150(uint64_t a1)
{
  return sub_186F87B08();
}

uint64_t sub_186F3218C()
{
  return sub_186F87AFC();
}

uint64_t sub_186F321D4(uint64_t a1, uint64_t a2)
{
  return sub_186F88018();
}

uint64_t sub_186F3222C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186F87AF0();
}

uint64_t sub_186F32278()
{
  return sub_186F322C0((unint64_t *)&qword_18C6B0620, (uint64_t)&unk_186F88ADC);
}

uint64_t sub_186F3229C()
{
  return sub_186F322C0(&qword_18C4B53C8, (uint64_t)&unk_186F88A84);
}

uint64_t sub_186F322C0(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CFString(255LL);
    uint64_t result = MEMORY[0x18959EFD8](a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t static ANSIKDFx963.deriveKey<A>(inputKeyMaterial:info:outputByteCount:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, int64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v41 = a5;
  uint64_t v42 = a7;
  uint64_t v40 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v39 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = ((uint64_t (*)(void))MEMORY[0x1895F8858])();
  v44 = (char *)&v30 - v16;
  uint64_t v36 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v15);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a3 < 0) {
    goto LABEL_18;
  }
  uint64_t v8 = *a1;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v37 = *(uint64_t (**)(uint64_t))(AssociatedConformanceWitness + 40);
  uint64_t v38 = AssociatedConformanceWitness;
  unint64_t v20 = v37(AssociatedTypeWitness);
  if ((v20 & 0x8000000000000000LL) != 0) {
    goto LABEL_19;
  }
  if (!is_mul_ok(v20, 0xFFFFFFFFuLL)) {
    goto LABEL_20;
  }
  v30 = a8;
  if (0xFFFFFFFF * v20 > a3)
  {
    if (qword_18C4B5020 != -1) {
      goto LABEL_21;
    }
    while (1)
    {
      v46 = off_18C4B5018;
      swift_retain();
      sub_186F3E304(a3);
      int64_t v31 = a3;
      if (!a3) {
        break;
      }
      v21 = *(void (**)(uint64_t, uint64_t))(a6 + 32);
      uint64_t v34 = v8 + 32;
      v35 = v21;
      v33 = (void *)(v8 + 16);
      swift_beginAccess();
      uint64_t v8 = 0LL;
      unsigned int v22 = 1;
      uint64_t v32 = MEMORY[0x18961AFC8] + 8LL;
      a3 = v31;
      while (1)
      {
        v35(a4, a6);
        uint64_t v23 = v34 + *v33;
        v45[0] = v34;
        v45[1] = v23;
        unint64_t v24 = sub_186F32834();
        HashFunction.update<A>(data:)((uint64_t)v45, a4, MEMORY[0x1896181D0], a6, v24);
        sub_186F5FE80(bswap32(v22), a4, a6);
        HashFunction.update<A>(data:)(v40, a4, v41, a6, v42);
        (*(void (**)(uint64_t, uint64_t))(a6 + 48))(a4, a6);
        if (v22 == -1) {
          break;
        }
        uint64_t v25 = ((uint64_t (*)(uint64_t, uint64_t))v37)(AssociatedTypeWitness, v38);
        v43 = &v30;
        if (v25 >= a3) {
          int64_t v26 = a3;
        }
        else {
          int64_t v26 = v25;
        }
        MEMORY[0x1895F8858](v25);
        sub_186F879B8();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v44, AssociatedTypeWitness);
        BOOL v27 = __OFSUB__(a3, v26);
        a3 -= v26;
        if (v27) {
          goto LABEL_17;
        }
        (*(void (**)(char *, uint64_t))(v36 + 8))(v18, a4);
        ++v22;
        if (a3 <= 0) {
          goto LABEL_14;
        }
      }

      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      swift_once();
    }

LABEL_14:
    v28 = v46;
    uint64_t result = swift_beginAccess();
    if (v28[2] == v31)
    {
      void *v30 = v28;
      return result;
    }

    __break(1u);
  }

  uint64_t result = sub_186F87F40();
  __break(1u);
  return result;
}

      __break(1u);
      return result;
    }

    __break(1u);
    goto LABEL_14;
  }

  return result;
}

          __int128 v9 = __OFADD__(v7++, 1LL);
          if (v9) {
            goto LABEL_27;
          }
        }

        __int128 v9 = __OFADD__(v10++, 1LL);
        if (v9) {
          goto LABEL_26;
        }
      }

      goto LABEL_25;
    }

    __int128 v9 = __OFADD__(v7++, 1LL);
  }

  while (!v9);
  __break(1u);
LABEL_9:
  swift_release();
  __int128 v10 = *(void *)(v4 + 16);
  __int128 v7 = v10;
  return sub_186F7435C(v7, v10);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

        __break(1u);
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
    }
  }

  __int128 v7 = a4 + result;
  if (!__OFADD__(a4, result))
  {
    if (v5 >= v7) {
      goto LABEL_8;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  __int128 v10 = a5 << ((8 - v7) & 0x38);
  else {
    LOBYTE(v8) = v10;
  }
LABEL_11:
  *a6 = v8;
  return nullsub_1;
}

uint64_t static ANSIKDFx963.deriveKey(inputKeyMaterial:outputByteCount:)@<X0>( uint64_t *a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v13 = *a1;
  uint64_t v12 = MEMORY[0x18961AFE8];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53B8);
  unint64_t v10 = sub_186F327D4();
  return static ANSIKDFx963.deriveKey<A>(inputKeyMaterial:info:outputByteCount:)( &v13,  (uint64_t)&v12,  a2,  a3,  v9,  a4,  v10,  a5);
}

size_t sub_186F32754(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_186F5D2A8(*(void *)(v2 + 24), a1, a2);
  return sub_186F512D0(v3, v4, v5, v6);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = MEMORY[0x18959EFC0]((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_186F327D4()
{
  unint64_t result = qword_18C4B5138;
  if (!qword_18C4B5138)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C4B53B8);
    unint64_t result = MEMORY[0x18959EFD8](MEMORY[0x1896071F8], v1);
    atomic_store(result, (unint64_t *)&qword_18C4B5138);
  }

  return result;
}

uint64_t sub_186F32820()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for ANSIKDFx963(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ANSIKDFx963);
}

unint64_t sub_186F32834()
{
  unint64_t result = qword_18C4B5130;
  if (!qword_18C4B5130)
  {
    unint64_t result = MEMORY[0x18959EFD8](MEMORY[0x1896071A8], MEMORY[0x1896181D0]);
    atomic_store(result, (unint64_t *)&qword_18C4B5130);
  }

  return result;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x18959EF9C](a1, v6, a5);
}

uint64_t sub_186F328A4()
{
  uint64_t result = sub_186F3895C(0x685F64695F6B7370LL, 0xEB00000000687361LL);
  qword_18C6B07A8 = result;
  unk_18C6B07B0 = v1;
  return result;
}

uint64_t sub_186F328E0()
{
  uint64_t result = sub_186F3895C(0x7361685F6F666E69LL, 0xE900000000000068LL);
  qword_18C6B07B8 = result;
  unk_18C6B07C0 = v1;
  return result;
}

uint64_t sub_186F32918()
{
  uint64_t result = sub_186F3895C(0x746572636573LL, 0xE600000000000000LL);
  qword_18C6B07C8 = result;
  unk_18C6B07D0 = v1;
  return result;
}

uint64_t sub_186F32948()
{
  uint64_t result = sub_186F3895C(7955819LL, 0xE300000000000000LL);
  qword_18C6B07D8 = result;
  unk_18C6B07E0 = v1;
  return result;
}

uint64_t sub_186F32974()
{
  uint64_t result = sub_186F3895C(0x6E6F6E5F65736162LL, 0xEA00000000006563LL);
  qword_18C6B07E8 = result;
  unk_18C6B07F0 = v1;
  return result;
}

uint64_t sub_186F329AC()
{
  uint64_t result = sub_186F3895C(7370853LL, 0xE300000000000000LL);
  qword_18C6B07F8 = result;
  unk_18C6B0800 = v1;
  return result;
}

uint64_t sub_186F329D8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>)
{
  char v14 = a1;
  uint64_t v162 = *MEMORY[0x1895F89C0];
  uint64_t v15 = *a5;
  uint64_t v16 = *a8;
  uint64_t v17 = a8[1];
  uint64_t v18 = a8[2];
  *(void *)&v161[0] = *a5;
  sub_186F33D64(a1, v161, a6, a7);
  if (v9)
  {
    sub_186F33EA0(a6, a7);
    sub_186F33C98(a3, a4);
    __swift_destroy_boxed_opaque_existential_1(a2);
    swift_release();
    return sub_186F33EA0(0LL, 0xF000000000000000LL);
  }

  else
  {
    __int16 v151 = v17;
    char v139 = v14;
    unint64_t v147 = a4;
    uint64_t v146 = a3;
    if (qword_18C6B0628 != -1) {
      swift_once();
    }
    if (a7 >> 60 == 15)
    {
      uint64_t v20 = 0LL;
      memset((char *)v161 + 8, 0, 32);
    }

    else
    {
      *((void *)&v161[1] + 1) = &type metadata for SymmetricKey;
      *(void *)&v161[2] = sub_186F33F14();
      sub_186F33D20(a6, a7);
      sub_186F516FC(a6, a7);
      uint64_t v20 = v21;
      sub_186F33EA0(a6, a7);
    }

    uint64_t v22 = v16;
    uint64_t v141 = a6;
    unint64_t v142 = a7;
    *(void *)&v161[0] = v20;
    if (qword_18C6B0670 != -1)
    {
      swift_once();
      uint64_t v22 = v16;
    }

    uint64_t v136 = v15;
    __int128 v160 = xmmword_18C6B0CF0;
    uint64_t v23 = qword_186F88B70[v22];
    sub_186F33D20(xmmword_18C6B0CF0, *((unint64_t *)&xmmword_18C6B0CF0 + 1));
    uint64_t v150 = v23;
    sub_186F5ADA0(v23, 2LL);
    uint64_t v25 = v24;
    unint64_t v27 = v26;
    sub_186F87AC0();
    sub_186F33C98(v25, v27);
    uint64_t v152 = v17 + 1;
    sub_186F5ADA0(v17 + 1, 2LL);
    uint64_t v29 = v28;
    unint64_t v31 = v30;
    sub_186F87AC0();
    sub_186F33C98(v29, v31);
    uint64_t v153 = qword_186F88B90[v18];
    sub_186F5ADA0(v153, 2LL);
    uint64_t v33 = v32;
    unint64_t v35 = v34;
    sub_186F87AC0();
    sub_186F33C98(v33, v35);
    __int128 v36 = v160;
    if (qword_18C6B06B0 != -1) {
      swift_once();
    }
    __int128 v160 = xmmword_18C6B17A0;
    sub_186F33D20(xmmword_18C6B17A0, *((unint64_t *)&xmmword_18C6B17A0 + 1));
    sub_186F87AC0();
    sub_186F87AC0();
    sub_186F63C1C((uint64_t)v161);
    __int128 v37 = v160;
    sub_186F33D20(v160, *((unint64_t *)&v160 + 1));
    sub_186F516FC(v160, *((uint64_t *)&v160 + 1));
    sub_186F33C98(v160, *((unint64_t *)&v160 + 1));
    sub_186F6376C(0LL, 0xC000000000000000LL, v17, (uint64_t *)&v159);
    swift_release();
    sub_186F33C98(v37, *((unint64_t *)&v37 + 1));
    uint64_t v38 = v159;
    swift_beginAccess();
    uint64_t v39 = v38 + 32 + *(void *)(v38 + 16);
    swift_retain();
    uint64_t v40 = sub_186F38E60(v38 + 32, v39);
    unint64_t v144 = v41;
    uint64_t v145 = v40;
    swift_release_n();
    sub_186F33C98(v36, *((unint64_t *)&v36 + 1));
    sub_186F33ED4((uint64_t)v161);
    if (qword_18C6B0630 != -1) {
      swift_once();
    }
    *((void *)&v161[1] + 1) = &type metadata for SymmetricKey;
    unint64_t v133 = sub_186F33F14();
    *(void *)&v161[2] = v133;
    sub_186F33D20(a3, v147);
    sub_186F516FC(a3, v147);
    uint64_t v43 = v42;
    sub_186F33C98(a3, v147);
    *(void *)&v161[0] = v43;
    __int128 v159 = xmmword_18C6B0CF0;
    sub_186F33D20(xmmword_18C6B0CF0, *((unint64_t *)&xmmword_18C6B0CF0 + 1));
    sub_186F5ADA0(v150, 2LL);
    uint64_t v45 = v44;
    unint64_t v47 = v46;
    sub_186F87AC0();
    sub_186F33C98(v45, v47);
    sub_186F5ADA0(v152, 2LL);
    uint64_t v49 = v48;
    unint64_t v51 = v50;
    sub_186F87AC0();
    sub_186F33C98(v49, v51);
    sub_186F5ADA0(v153, 2LL);
    uint64_t v53 = v52;
    unint64_t v55 = v54;
    sub_186F87AC0();
    sub_186F33C98(v53, v55);
    __int128 v56 = v159;
    __int128 v159 = xmmword_18C6B17A0;
    sub_186F33D20(xmmword_18C6B17A0, *((unint64_t *)&xmmword_18C6B17A0 + 1));
    sub_186F87AC0();
    sub_186F87AC0();
    sub_186F63C1C((uint64_t)v161);
    __int128 v57 = v159;
    sub_186F33D20(v159, *((unint64_t *)&v159 + 1));
    sub_186F516FC(v57, *((uint64_t *)&v57 + 1));
    sub_186F33C98(v57, *((unint64_t *)&v57 + 1));
    sub_186F6376C(0LL, 0xC000000000000000LL, v17, (uint64_t *)&v158);
    swift_release();
    sub_186F33C98(v57, *((unint64_t *)&v57 + 1));
    uint64_t v58 = v158;
    swift_beginAccess();
    uint64_t v59 = v58 + 32 + *(void *)(v58 + 16);
    swift_retain();
    uint64_t v60 = sub_186F38E60(v58 + 32, v59);
    unint64_t v62 = v61;
    swift_release_n();
    sub_186F33C98(v56, *((unint64_t *)&v56 + 1));
    sub_186F33ED4((uint64_t)v161);
    __int128 v158 = xmmword_186F88B50;
    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6B0818);
    *((void *)&v161[1] + 1) = v63;
    *(void *)&v161[2] = sub_186F33F58();
    LOBYTE(v161[0]) = v139;
    LOBYTE(v157) = *(_BYTE *)__swift_project_boxed_opaque_existential_1(v161, v63);
    sub_186F87A3C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v161);
    sub_186F87AC0();
    unint64_t v138 = v62;
    uint64_t v140 = v60;
    sub_186F87AC0();
    sub_186F33FC8(a2, (uint64_t)v161);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v161, *((uint64_t *)&v161[1] + 1));
    uint64_t v64 = sub_186F643D0();
    unint64_t v66 = v65;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v161);
    if (qword_18C6B0638 != -1) {
      swift_once();
    }
    char v154 = v18;
    if (v136)
    {
      *((void *)&v161[1] + 1) = &type metadata for SymmetricKey;
      *(void *)&v161[2] = v133;
      *(void *)&v161[0] = sub_186F515FC(v136);
      swift_release();
    }

    else
    {
      memset(v161, 0, 40);
    }

    char v143 = v16;
    __int128 v157 = xmmword_18C6B0CF0;
    sub_186F33D20(xmmword_18C6B0CF0, *((unint64_t *)&xmmword_18C6B0CF0 + 1));
    sub_186F5ADA0(v150, 2LL);
    uint64_t v68 = v67;
    unint64_t v70 = v69;
    sub_186F87AC0();
    sub_186F33C98(v68, v70);
    sub_186F5ADA0(v152, 2LL);
    uint64_t v72 = v71;
    unint64_t v74 = v73;
    sub_186F87AC0();
    sub_186F33C98(v72, v74);
    sub_186F5ADA0(v153, 2LL);
    uint64_t v76 = v75;
    unint64_t v78 = v77;
    sub_186F87AC0();
    sub_186F33C98(v76, v78);
    __int128 v79 = v157;
    __int128 v157 = xmmword_18C6B17A0;
    sub_186F33D20(xmmword_18C6B17A0, *((unint64_t *)&xmmword_18C6B17A0 + 1));
    sub_186F87AC0();
    sub_186F87AC0();
    sub_186F63C1C((uint64_t)v161);
    __int128 v80 = v157;
    sub_186F33D20(v64, v66);
    sub_186F33D20(v157, *((unint64_t *)&v157 + 1));
    sub_186F516FC(v157, *((uint64_t *)&v157 + 1));
    sub_186F33C98(v157, *((unint64_t *)&v157 + 1));
    __int16 v81 = v151;
    sub_186F6376C(v64, v66, v151, &v156);
    swift_release();
    sub_186F33C98(v64, v66);
    sub_186F33C98(v80, *((unint64_t *)&v80 + 1));
    sub_186F33C98(v79, *((unint64_t *)&v79 + 1));
    sub_186F33C98(v64, v66);
    sub_186F33ED4((uint64_t)v161);
    uint64_t v148 = v156;
    if (v18 == 3)
    {
      uint64_t v135 = 0LL;
      uint64_t v137 = 0LL;
      unint64_t v134 = 0xF000000000000000LL;
    }

    else
    {
      if (qword_18C6B0640 != -1) {
        swift_once();
      }
      __int128 v82 = v158;
      __int128 v83 = xmmword_18C6B0CF0;
      v161[0] = xmmword_18C6B0CF0;
      sub_186F33D20(v158, *((unint64_t *)&v158 + 1));
      sub_186F33D20(v83, *((unint64_t *)&v83 + 1));
      sub_186F5ADA0(v150, 2LL);
      uint64_t v85 = v84;
      unint64_t v87 = v86;
      sub_186F87AC0();
      sub_186F33C98(v85, v87);
      sub_186F5ADA0(v152, 2LL);
      uint64_t v89 = v88;
      unint64_t v91 = v90;
      sub_186F87AC0();
      sub_186F33C98(v89, v91);
      sub_186F5ADA0(v153, 2LL);
      uint64_t v93 = v92;
      unint64_t v95 = v94;
      sub_186F87AC0();
      sub_186F33C98(v93, v95);
      __int128 v96 = v161[0];
      sub_186F63CF4( v148,  v82,  *((uint64_t *)&v82 + 1),  0x2000200010uLL >> (16 * v18),  (size_t *)v161,  v151);
      sub_186F33C98(v96, *((unint64_t *)&v96 + 1));
      sub_186F33C98(v82, *((unint64_t *)&v82 + 1));
      uint64_t v137 = *(void *)&v161[0];
      if (qword_18C6B0648 != -1) {
        swift_once();
      }
      __int128 v97 = xmmword_18C6B0CF0;
      v161[0] = xmmword_18C6B0CF0;
      sub_186F33D20(v82, *((unint64_t *)&v82 + 1));
      sub_186F33D20(v97, *((unint64_t *)&v97 + 1));
      sub_186F5ADA0(v150, 2LL);
      uint64_t v99 = v98;
      unint64_t v101 = v100;
      sub_186F87AC0();
      sub_186F33C98(v99, v101);
      sub_186F5ADA0(v152, 2LL);
      uint64_t v103 = v102;
      unint64_t v105 = v104;
      sub_186F87AC0();
      sub_186F33C98(v103, v105);
      sub_186F5ADA0(v153, 2LL);
      uint64_t v107 = v106;
      unint64_t v109 = v108;
      sub_186F87AC0();
      sub_186F33C98(v107, v109);
      __int128 v110 = v161[0];
      __int16 v81 = v151;
      sub_186F63CF4(v148, v82, *((uint64_t *)&v82 + 1), 0xCu, (size_t *)&v157, v151);
      uint64_t v111 = v157;
      swift_beginAccess();
      uint64_t v112 = v111 + 32 + *(void *)(v111 + 16);
      swift_retain();
      uint64_t v113 = sub_186F38E60(v111 + 32, v112);
      unint64_t v134 = v114;
      uint64_t v135 = v113;
      swift_release_n();
      sub_186F33C98(v110, *((unint64_t *)&v110 + 1));
      sub_186F33C98(v82, *((unint64_t *)&v82 + 1));
      sub_186F33EA0(0LL, 0xF000000000000000LL);
    }

    if (qword_18C6B0650 != -1) {
      swift_once();
    }
    __int128 v115 = v158;
    unsigned __int16 v116 = 16 * v81 + 32;
    __int128 v117 = xmmword_18C6B0CF0;
    __int128 v157 = xmmword_18C6B0CF0;
    sub_186F33D20(v158, *((unint64_t *)&v158 + 1));
    sub_186F33D20(v117, *((unint64_t *)&v117 + 1));
    sub_186F5ADA0(v150, 2LL);
    uint64_t v119 = v118;
    char v120 = v81;
    unint64_t v122 = v121;
    sub_186F87AC0();
    sub_186F33C98(v119, v122);
    sub_186F5ADA0(v152, 2LL);
    uint64_t v124 = v123;
    unint64_t v126 = v125;
    sub_186F87AC0();
    sub_186F33C98(v124, v126);
    sub_186F5ADA0(v153, 2LL);
    uint64_t v128 = v127;
    unint64_t v130 = v129;
    sub_186F87AC0();
    sub_186F33C98(v128, v130);
    __int128 v131 = v157;
    sub_186F63CF4(v148, v115, *((uint64_t *)&v115 + 1), v116, (size_t *)&v157, v120);
    sub_186F33C98(v131, *((unint64_t *)&v131 + 1));
    sub_186F33C98(v140, v138);
    sub_186F33C98(v145, v144);
    sub_186F33EA0(v141, v142);
    sub_186F33C98(v146, v147);
    __swift_destroy_boxed_opaque_existential_1(a2);
    sub_186F33C98(v115, *((unint64_t *)&v115 + 1));
    sub_186F33C98(v115, *((unint64_t *)&v115 + 1));
    swift_release();
    uint64_t v132 = v157;
    *(void *)a9 = 0LL;
    *(void *)(a9 + 8) = v137;
    *(void *)(a9 + 16) = v135;
    *(void *)(a9 + 24) = v134;
    *(void *)(a9 + 32) = v132;
    *(_BYTE *)(a9 + 40) = v143;
    *(_BYTE *)(a9 + 41) = v120;
    *(_BYTE *)(a9 + 42) = v154;
    swift_retain();
    sub_186F34034(v135, v134);
    swift_retain();
    swift_release();
    sub_186F33EA0(v135, v134);
    return swift_release();
  }

uint64_t sub_186F336FC(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = *((unsigned __int8 *)v2 + 42);
  if (v5 == 3)
  {
    sub_186F33CDC();
    swift_allocError();
    *uint64_t v6 = 2;
    swift_willThrow();
    return v4;
  }

  uint64_t v18 = *v2;
  __int128 v19 = *(_OWORD *)(v2 + 1);
  sub_186F338F4();
  if ((void)v19)
  {
    uint64_t v11 = v9;
    unint64_t v12 = v10;
    swift_retain();
    sub_186F47DC0(a1, a2, v11, v12);
    uint64_t v4 = v13;
    unint64_t v15 = v14;
    swift_release();
    sub_186F33C98(v11, v12);
    if (v3) {
      return v4;
    }
    if (v5 < 3)
    {
      if (v18 == -1)
      {
        sub_186F33CDC();
        swift_allocError();
        *uint64_t v17 = 6;
        swift_willThrow();
        sub_186F33C98(v4, v15);
      }

      else
      {
        *uint64_t v2 = v18 + 1;
      }

      return v4;
    }
  }

  else
  {
    __break(1u);
  }

  uint64_t result = sub_186F87F40();
  __break(1u);
  return result;
}

void sub_186F338F4()
{
  v5[6] = *MEMORY[0x1895F89C0];
  if (*(unsigned __int8 *)(v0 + 42) < 3u)
  {
    unint64_t v1 = *(void *)v0;
    unint64_t v2 = *(void *)(v0 + 24);
    uint64_t v3 = sub_186F87CE8();
    *(void *)(v3 + 16) = 4LL;
    *(_DWORD *)(v3 + 32) = 0;
    unint64_t v4 = bswap64(v1);
    v5[0] = v3;
    sub_186F84A74((uint64_t)&v4, (char *)v5);
    if (v2 >> 60 != 15) {
      __asm { BR              X10 }
    }

    __break(1u);
    JUMPOUT(0x186F33A2CLL);
  }

  sub_186F87F40();
  __break(1u);
  JUMPOUT(0x186F33A7CLL);
}

uint64_t sub_186F33A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7 = *((unsigned __int8 *)v4 + 42);
  if (v7 == 3)
  {
    sub_186F33CDC();
    swift_allocError();
    *uint64_t v8 = 2;
    swift_willThrow();
    return v6;
  }

  char v31 = *((_BYTE *)v4 + 42);
  uint64_t v11 = v4[3];
  uint64_t v12 = v4[4];
  __int16 v13 = *((_WORD *)v4 + 20);
  uint64_t v22 = *v4;
  uint64_t v25 = *v4;
  __int128 v26 = *(_OWORD *)(v4 + 1);
  uint64_t v27 = v11;
  uint64_t v28 = v12;
  __int16 v29 = v13;
  char v30 = v7;
  sub_186F338F4();
  if ((void)v26)
  {
    uint64_t v16 = v14;
    unint64_t v17 = v15;
    uint64_t v25 = v26;
    swift_retain();
    uint64_t v6 = sub_186F481A4(a1, v16, v17, a2, &v25, a3, a4);
    unint64_t v19 = v18;
    swift_release();
    sub_186F33C98(v16, v17);
    if (v5) {
      return v6;
    }
    if (v7 < 3)
    {
      if (v22 == -1)
      {
        sub_186F33CDC();
        swift_allocError();
        *uint64_t v21 = 6;
        swift_willThrow();
        sub_186F33C98(v6, v19);
      }

      else
      {
        *unint64_t v4 = v22 + 1;
      }

      return v6;
    }
  }

  else
  {
    __break(1u);
  }

  uint64_t result = sub_186F87F40();
  __break(1u);
  return result;
}

_BYTE *sub_186F33C84@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result[1] ^ *result;
  return result;
}

uint64_t sub_186F33C98(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

unint64_t sub_186F33CDC()
{
  unint64_t result = qword_18C6B0808;
  if (!qword_18C6B0808)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for HPKE.Errors, &type metadata for HPKE.Errors);
    atomic_store(result, (unint64_t *)&qword_18C6B0808);
  }

  return result;
}

uint64_t sub_186F33D20(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_186F33D64(uint64_t result, void *a2, uint64_t a3, unint64_t a4)
{
  if ((a4 >> 60 == 15) == (*a2 != 0LL))
  {
    char v6 = 3;
LABEL_10:
    sub_186F33CDC();
    swift_allocError();
    *unsigned int v7 = v6;
    return swift_willThrow();
  }

  if (!*a2)
  {
    if (result != 1)
    {
      for (uint64_t i = 0x21u; ; ++i)
      {
        uint64_t v9 = i - 31;
        if (__OFADD__(i - 32, 1LL)) {
          break;
        }
        if (v9 == 2) {
          return result;
        }
      }

      goto LABEL_20;
    }

LABEL_13:
    char v6 = 4;
    goto LABEL_10;
  }

  if (result != 1)
  {
    uint64_t v4 = 0x21u;
    while (1)
    {
      uint64_t v5 = v4 - 31;
      if (__OFADD__(v4 - 32, 1LL)) {
        break;
      }
      ++v4;
      if (v5 == 2)
      {
        char v6 = 5;
        goto LABEL_10;
      }
    }

    __break(1u);
LABEL_20:
    __break(1u);
  }

  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  if (v6 == v3) {
    return result;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_30;
  }
  do
  {
    while (1)
    {
      if (v6 <= v3)
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }

      __int16 v13 = v6 - 1 + v5;
      if (__OFADD__(v6 - 1, v5)) {
        goto LABEL_24;
      }
      uint64_t v14 = v6 - 1;
      if (v6 < 1) {
        goto LABEL_25;
      }
      unint64_t v15 = *(void *)(v7 + 16);
      if (v14 >= v15) {
        goto LABEL_26;
      }
      if (v13 < v15) {
        break;
      }
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      uint64_t result = (uint64_t)sub_186F52EB0(v7);
      unsigned int v7 = result;
    }

    *(_BYTE *)(v7 + 32 + v13) = *(_BYTE *)(v7 + v6-- + 31);
  }

  while (v14 != v3);
  *uint64_t v4 = v7;
  return result;
}

uint64_t sub_186F33EA0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_186F33C98(a1, a2);
  }
  return a1;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_186F33ED4(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B5288);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_186F33F14()
{
  unint64_t result = qword_18C6B0810;
  if (!qword_18C6B0810)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SymmetricKey, &type metadata for SymmetricKey);
    atomic_store(result, (unint64_t *)&qword_18C6B0810);
  }

  return result;
}

unint64_t sub_186F33F58()
{
  unint64_t result = qword_18C6B0820;
  if (!qword_18C6B0820)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C6B0818);
    unint64_t result = MEMORY[0x18959EFD8](MEMORY[0x189607388], v1);
    atomic_store(result, (unint64_t *)&qword_18C6B0820);
  }

  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t sub_186F33FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t sub_186F34034(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_186F33D20(a1, a2);
  }
  return a1;
}

uint64_t _s11KeyScheduleVwxx(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >> 60 != 15) {
    sub_186F33C98(*(void *)(a1 + 16), v2);
  }
  return swift_release();
}

uint64_t _s11KeyScheduleVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = (_OWORD *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  swift_retain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }

  else
  {
    uint64_t v7 = *(void *)v5;
    sub_186F33D20(v7, v6);
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v6;
  }

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  swift_retain();
  return a1;
}

uint64_t _s11KeyScheduleVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) >> 60 != 15LL)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_186F33D20(*v4, *(void *)(a2 + 24));
      uint64_t v8 = *(void *)(a1 + 16);
      unint64_t v9 = *(void *)(a1 + 24);
      *(void *)(a1 + 16) = v7;
      *(void *)(a1 + 24) = v5;
      sub_186F33C98(v8, v9);
      goto LABEL_8;
    }

    sub_186F34214(a1 + 16);
    goto LABEL_6;
  }

  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
    goto LABEL_8;
  }

  uint64_t v6 = *v4;
  sub_186F33D20(*v4, *(void *)(a2 + 24));
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v5;
LABEL_8:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  return a1;
}

uint64_t sub_186F34214(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy43_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 27) = *(_OWORD *)(a2 + 27);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s11KeyScheduleVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  unint64_t v5 = (void *)(a2 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 24);
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *v5;
      *(void *)(a1 + 24) = v7;
      sub_186F33C98(v8, v6);
      goto LABEL_6;
    }

    sub_186F34214(a1 + 16);
  }

  *(_OWORD *)(a1 + 16) = *(_OWORD *)v5;
LABEL_6:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  return a1;
}

uint64_t _s11KeyScheduleVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 43)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s11KeyScheduleVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 42) = 0;
    *(_WORD *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 43) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 43) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *_s11KeyScheduleVMa()
{
  return &_s11KeyScheduleVN;
}

size_t sub_186F343AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
    return sub_186F352C8(a1, a2, a3);
  }
  uint64_t v7 = *v3;
  type metadata accessor for CoreCryptoGCMImpl.Context();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = *(void *)(v7 + 24);
  *(void *)(v8 + 24) = v9;
  swift_retain();
  MEMORY[0x18959ECCC](v9);
  unint64_t v10 = (void *)swift_slowAlloc();
  uint64_t v11 = *(const void **)(v7 + 16);
  size_t result = MEMORY[0x18959ECCC](v9);
  if ((result & 0x8000000000000000LL) == 0)
  {
    memmove(v10, v11, result);
    swift_release();
    *(void *)(v8 + 16) = v10;
    *__int128 v3 = v8;
    swift_release();
    return sub_186F352C8(a1, a2, a3);
  }

  __break(1u);
  return result;
}

void sub_186F3449C(uint64_t a1, uint64_t a2)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
    goto LABEL_4;
  }
  uint64_t v5 = *v2;
  type metadata accessor for CoreCryptoGCMImpl.Context();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = *(void *)(v5 + 24);
  *(void *)(v6 + 24) = v7;
  swift_retain();
  MEMORY[0x18959ECCC](v7);
  uint64_t v8 = (void *)swift_slowAlloc();
  uint64_t v9 = *(const void **)(v5 + 16);
  size_t v10 = MEMORY[0x18959ECCC](v7);
  if ((v10 & 0x8000000000000000LL) == 0)
  {
    memmove(v8, v9, v10);
    swift_release();
    *(void *)(v6 + 16) = v8;
    *unint64_t v2 = v6;
    swift_release();
LABEL_4:
    sub_186F35544(a1, a2);
    return;
  }

  __break(1u);
}

uint64_t sub_186F345A4@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v32 = a8;
  uint64_t v33 = a2;
  uint64_t v34 = a5;
  uint64_t v35 = a7;
  uint64_t v36 = a4;
  v30[1] = a9;
  uint64_t v42 = *MEMORY[0x1895F89C0];
  uint64_t v37 = sub_186F87DCC();
  uint64_t v13 = *(void *)(v37 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v37);
  uint64_t v16 = (char *)v30 - v15;
  uint64_t v38 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](v14);
  char v31 = (char *)v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *a1;
  uint64_t v19 = *a3;
  unint64_t v20 = a3[1];
  uint64_t v21 = *a3;
  unint64_t v22 = v20;
  if (v20 >> 60 == 15)
  {
    *(void *)((char *)&v41 + 6) = 0LL;
    *(void *)&__int128 v41 = 0LL;
    BYTE14(v41) = 12;
    LODWORD(v40) = 0;
    if (!ccrng())
    {
      __break(1u);
      JUMPOUT(0x186F349A8LL);
    }

    if ((_DWORD)v40)
    {
      __break(1u);
      JUMPOUT(0x186F3498CLL);
    }

    ccrng_generate_bridge();
    uint64_t v21 = v41;
    unint64_t v22 = DWORD2(v41) | ((unint64_t)BYTE12(v41) << 32) | ((unint64_t)BYTE13(v41) << 40) | ((unint64_t)BYTE14(v41) << 48);
  }

  swift_retain();
  sub_186F33D20(v21, v22);
  sub_186F34034(v19, v20);
  uint64_t v23 = ccaes_gcm_encrypt_mode();
  if (!v23) {
    __break(1u);
  }
  uint64_t v24 = v23;
  uint64_t v39 = v18;
  *(void *)&__int128 v41 = v21;
  *((void *)&v41 + 1) = v22;
  type metadata accessor for CoreCryptoGCMImpl.Context();
  swift_allocObject();
  uint64_t v25 = sub_186F34F10(&v39, (uint64_t *)&v41, v24);
  if (!v9)
  {
    uint64_t v40 = v25;
    uint64_t v27 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v36, v37);
    uint64_t v28 = v38;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v16, 1LL, a6) == 1)
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v27);
    }

    else
    {
      uint64_t v29 = (uint64_t)v31;
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v31, v16, a6);
      sub_186F343AC(v29, a6, v32);
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, a6);
    }

    __asm { BR              X10 }
  }

  return sub_186F33C98(v21, v22);
}

void sub_186F349B8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[2] = a5;
  v12[4] = a3;
  uint64_t v6 = sub_186F87DCC();
  v12[5] = *(void *)(v6 - 8);
  v12[6] = v6;
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  MEMORY[0x1895F8858](v7);
  v12[1] = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *a2;
  unint64_t v10 = a2[1];
  uint64_t v11 = a2[2];
  sub_186F33D20(*a2, v10);
  sub_186F33D20(v9, v10);
  swift_retain();
  sub_186F5D2B4(v11, v9, v10);
  __asm { BR              X10 }

uint64_t sub_186F34AB8()
{
  if (BYTE6(v3) < 0xCuLL)
  {
LABEL_10:
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v21 = 1;
    *(_BYTE *)(v21 + 4) = 1;
    swift_willThrow();
    sub_186F33C98(v5, v3);
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x186F34EF0LL);
  }

  *(void *)(v9 - 168) = v8;
  sub_186F394BC(v5, v3);
  uint64_t v5 = v10;
  uint64_t v12 = v11;
  sub_186F33C98(v0, v2);
  uint64_t v13 = ccaes_gcm_decrypt_mode();
  if (!v13)
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v14 = v13;
  *(void *)(v9 - 112) = v1;
  *(void *)(v9 - 96) = v5;
  *(void *)(v9 - 88) = v12;
  type metadata accessor for CoreCryptoGCMImpl.Context();
  swift_allocObject();
  uint64_t v15 = *(void *)(v9 - 136);
  uint64_t result = sub_186F34F10((uint64_t *)(v9 - 112), (uint64_t *)(v9 - 96), v14);
  if (!v15)
  {
    *(void *)(v9 - 72) = result;
    uint64_t v17 = *(void *)(v9 - 152);
    uint64_t v18 = *(void *)(v9 - 144);
    (*(void (**)(uint64_t, void, uint64_t))(v17 + 16))(v4, *(void *)(v9 - 160), v18);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v4, 1LL, v6) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v4, v18);
    }

    else
    {
      uint64_t v20 = *(void *)(v9 - 184);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v20, v4, v6);
      sub_186F343AC(v20, v6, *(void *)(v9 - 176));
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v20, v6);
    }

    uint64_t v19 = *(void *)(v9 - 168);
    *(_OWORD *)(v9 - 96) = xmmword_186F88B50;
    sub_186F33D20(v0, v2);
    sub_186F5E5B8(v19, v0, v2);
    sub_186F5EC20(16LL, *(void *)(v9 - 128), *(void *)(v9 - 120));
    __asm { BR              X10 }
  }

  return result;
}

uint64_t sub_186F34F10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *a1;
  uint64_t v8 = *a2;
  unint64_t v7 = a2[1];
  swift_beginAccess();
  unint64_t v9 = *(void *)(v6 + 16);
  if (v9 >> 60)
  {
    __break(1u);
    JUMPOUT(0x186F35298LL);
  }

  uint64_t v10 = 8 * v9;
  if (v10 == 128 || v10 == 192 || v10 == 256)
  {
    MEMORY[0x18959ECCC](a3);
    *(void *)(v4 + 16) = swift_slowAlloc();
    *(void *)(v4 + 24) = a3;
    int v11 = ccgcm_init();
    if (!v11)
    {
      swift_release();
      __asm { BR              X10 }
    }

    int v12 = v11;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = v12;
    *(_BYTE *)(v13 + 4) = 0;
    swift_willThrow();
    sub_186F33C98(v8, v7);
    swift_release();
    swift_release();
  }

  else
  {
    sub_186F33C98(v8, v7);
    swift_release();
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v14 = 0;
    *(_BYTE *)(v14 + 4) = 1;
    swift_willThrow();
    type metadata accessor for CoreCryptoGCMImpl.Context();
    swift_deallocPartialClassInstance();
  }

  return v4;
}

uint64_t sub_186F352C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  unint64_t v9 = &v11[-v8];
  sub_186F87910();
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = v3;
  swift_getAssociatedConformanceWitness();
  sub_186F87CA0();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

uint64_t sub_186F353DC()
{
  return sub_186F879B8();
}

uint64_t sub_186F354D0(uint64_t result)
{
  if (result)
  {
    uint64_t result = ccgcm_aad();
    if ((_DWORD)result)
    {
      int v1 = result;
      sub_186F35D6C();
      swift_allocError();
      *(_DWORD *)uint64_t v2 = v1;
      *(_BYTE *)(v2 + 4) = 0;
      return swift_willThrow();
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_186F35544(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }

void sub_186F35598()
{
  if (sub_186F87D3C() < 0)
  {
    __break(1u);
    JUMPOUT(0x186F35640LL);
  }

  uint64_t v0 = sub_186F5D744();
  MEMORY[0x1895F8858](v0);
  sub_186F5A524();
}

uint64_t sub_186F35658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v23 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = sub_186F5E748(a3, a1, a2);
  uint64_t v18 = v17 + v16;
  uint64_t v20 = v17 + v19;
  if (!v17)
  {
    uint64_t v20 = 0LL;
    uint64_t v18 = 0LL;
  }

  v28[0] = v18;
  v28[1] = v20;
  sub_186F87910();
  uint64_t v24 = a6;
  uint64_t v25 = a7;
  __int128 v26 = v28;
  uint64_t v27 = v23;
  swift_getAssociatedConformanceWitness();
  sub_186F87CA0();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
}

uint64_t sub_186F357B4()
{
  return sub_186F879B8();
}

uint64_t sub_186F358AC(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a2 - result;
  if (result) {
    uint64_t v5 = a2 - result;
  }
  else {
    uint64_t v5 = 0LL;
  }
  if (!*a3)
  {
    if (v5 <= 0) {
      goto LABEL_6;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (a3[1] - *a3 < v5) {
    goto LABEL_10;
  }
LABEL_6:
  if (!result)
  {
    __break(1u);
    return result;
  }

  int v6 = ccgcm_update();
  if (v6)
  {
    int v7 = v6;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = v7;
    *(_BYTE *)(v8 + 4) = 0;
    return swift_willThrow();
  }

LABEL_11:
  uint64_t result = sub_186F5E748(v4, *a3, a3[1]);
  uint64_t v10 = v9 + result;
  uint64_t v12 = v9 + v11;
  if (!v9)
  {
    uint64_t v12 = 0LL;
    uint64_t v10 = 0LL;
  }

  *a3 = v10;
  a3[1] = v12;
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  uint64_t result = ccecb_one_shot();
  if ((_DWORD)result)
  {
    uint64_t v11 = result;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v12 = v11;
    *(_BYTE *)(v12 + 4) = 0;
    return swift_willThrow();
  }

  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_186F35988()
{
  v5[5] = *MEMORY[0x1895F89C0];
  v4[0] = 0LL;
  v4[1] = 0LL;
  int v0 = ccgcm_finalize();
  if (v0)
  {
    int v1 = v0;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v2 = v1;
    *(_BYTE *)(v2 + 4) = 0;
    return swift_willThrow();
  }

  else
  {
    v5[3] = MEMORY[0x1896181D0];
    v5[4] = MEMORY[0x1896071B0];
    v5[0] = v4;
    v5[1] = v5;
    __swift_project_boxed_opaque_existential_1(v5, MEMORY[0x1896181D0]);
    sub_186F87A54();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }

void sub_186F35A78(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }

BOOL sub_186F35AD0( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __src, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20, char a21, char a22, char a23, char a24, uint64_t __dst, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  if (BYTE6(v40) != 16LL) {
    return 0LL;
  }
  v64[0] = 0LL;
  v64[1] = 0LL;
  uint64_t v41 = *(void *)(v37 + 24);
  uint64_t v42 = ccaes_gcm_decrypt_mode();
  if (!v42)
  {
    __break(1u);
    JUMPOUT(0x186F35CECLL);
  }

  if (v41 != v42)
  {
    __break(1u);
    JUMPOUT(0x186F35CCCLL);
  }

  if (v38)
  {
    if (v38 == 1)
    {
      if (v39 >> 32 >= (int)v39)
      {
        sub_186F33D20(v39, v40);
        uint64_t v43 = sub_186F8797C();
        if (!v43)
        {
          sub_186F87994();
LABEL_26:
          sub_186F33C98(v39, v40);
          return ccgcm_finalize() == 0;
        }

        uint64_t v44 = v43;
        uint64_t v45 = sub_186F879A0();
        uint64_t v46 = (int)v39 - v45;
        if (!__OFSUB__((int)v39, v45))
        {
          uint64_t v47 = sub_186F87994();
          else {
            size_t v48 = v47;
          }
          memmove(v64, (const void *)(v44 + v46), v48);
          goto LABEL_26;
        }

        goto LABEL_31;
      }

      __break(1u);
    }

    else
    {
      uint64_t v50 = *(void *)(v39 + 16);
      uint64_t v51 = *(void *)(v39 + 24);
      swift_retain();
      swift_retain();
      uint64_t v52 = (char *)sub_186F8797C();
      if (v52)
      {
        uint64_t v53 = sub_186F879A0();
        if (__OFSUB__(v50, v53)) {
          goto LABEL_32;
        }
        v52 += v50 - v53;
      }

      BOOL v54 = __OFSUB__(v51, v50);
      int64_t v55 = v51 - v50;
      if (!v54)
      {
        uint64_t v56 = sub_186F87994();
        if (v52)
        {
          if (v56 >= v55) {
            size_t v57 = v55;
          }
          else {
            size_t v57 = v56;
          }
          memmove(v64, v52, v57);
        }

        swift_release();
        swift_release();
        return ccgcm_finalize() == 0;
      }
    }

    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }

  uint64_t v58 = v39;
  __int16 v59 = v40;
  char v60 = BYTE2(v40);
  char v61 = BYTE3(v40);
  char v62 = BYTE4(v40);
  char v63 = BYTE5(v40);
  memcpy(v64, &v58, BYTE6(v40));
  return ccgcm_finalize() == 0;
}

uint64_t sub_186F35CFC()
{
  int v1 = *(void **)(v0 + 16);
  rsize_t v2 = MEMORY[0x18959ECCC](*(void *)(v0 + 24));
  memset_s(v1, v2, 0, v2);
  MEMORY[0x18959F068](v1, -1LL, -1LL);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CoreCryptoGCMImpl.Context()
{
  return objc_opt_self();
}

unint64_t sub_186F35D6C()
{
  unint64_t result = qword_18C6B0828;
  if (!qword_18C6B0828)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for CryptoKitError, &type metadata for CryptoKitError);
    atomic_store(result, (unint64_t *)&qword_18C6B0828);
  }

  return result;
}

uint64_t sub_186F35DB0(uint64_t a1, uint64_t a2)
{
  return sub_186F35658(a1, a2, v2[4], v2[5], v2[6], v2[2], v2[3]);
}

uint64_t sub_186F35DD0()
{
  return sub_186F357B4();
}

uint64_t sub_186F35DEC(uint64_t a1, uint64_t a2)
{
  return sub_186F358AC(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_186F35E04()
{
  return sub_186F353DC();
}

uint64_t sub_186F35E20(uint64_t a1)
{
  return sub_186F354D0(a1);
}

ValueMetadata *type metadata accessor for CoreCryptoGCMImpl()
{
  return &type metadata for CoreCryptoGCMImpl;
}

uint64_t Curve25519.Signing.PublicKey.isValidSignature<A, B>(_:for:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5, uint64_t a6)
{
  return sub_186F48A44(a1, a2, a3, a4, a5, a6) & 1;
}

uint64_t Curve25519.Signing.PrivateKey.signature<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186F490FC(a1, a2, a3);
}

uint64_t sub_186F35EA4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16LL);
  sub_186F87FF4();
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8LL;
      sub_186F87FF4();
      --v2;
    }

    while (v2);
  }

  if (!v0[1]) {
    return sub_186F88000();
  }
  uint64_t v4 = v0[3];
  unint64_t v5 = v0[4];
  uint64_t v6 = v0[2];
  sub_186F88000();
  unint64_t v7 = v5 >> 1;
  uint64_t result = (v5 >> 1) - v4;
  if (__OFSUB__(v5 >> 1, v4))
  {
    __break(1u);
    goto LABEL_14;
  }

  uint64_t result = sub_186F87FF4();
  BOOL v9 = __OFSUB__(v7, v4);
  uint64_t v10 = v7 - v4;
  if (!v10) {
    return result;
  }
  if ((v10 < 0) ^ v9 | (v10 == 0))
  {
LABEL_14:
    __break(1u);
    return result;
  }

  uint64_t v11 = v6 + v4;
  do
  {
    ++v11;
    uint64_t result = sub_186F88000();
    --v10;
  }

  while (v10);
  return result;
}

uint64_t sub_186F35F58()
{
  return sub_186F88018();
}

uint64_t sub_186F35F98()
{
  return sub_186F88018();
}

uint64_t sub_186F35FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 32);
  if (sub_186F46718(*(void **)a1, *(void **)a2))
  {
    if (v2)
    {
      if (v6 && (sub_186F3AF28(v3, v4, v5, v7, v8, v9) & 1) != 0) {
        return 1LL;
      }
    }

    else if (!v6)
    {
      return 1LL;
    }
  }

  return 0LL;
}

uint64_t sub_186F36060()
{
  if (qword_18C6B0690 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_18C6B5FA0;
  uint64_t v1 = qword_18C6B0678;
  sub_186F87CDC();
  if (v1 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_18C6B5F88;
  sub_186F87CDC();
  uint64_t v7 = sub_186F3CB8C(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  MEMORY[0x1895F8858](v7);
  v6[2] = v2;
  sub_186F6B888(6, &v7, (uint64_t (*)(char **))sub_186F36A30, (uint64_t)v6);
  uint64_t v3 = v7;
  uint64_t v4 = *((void *)v7 + 2);
  uint64_t result = swift_bridgeObjectRelease();
  qword_18C6B5F10 = v0;
  *(void *)algn_18C6B5F18 = v3;
  xmmword_18C6B5F20 = (unint64_t)(v3 + 32);
  qword_18C6B5F30 = (2 * v4) | 1;
  return result;
}

uint64_t sub_186F3618C()
{
  if (qword_18C6B0690 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_18C6B5FA0;
  uint64_t v1 = qword_18C6B0680;
  sub_186F87CDC();
  if (v1 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_18C6B5F90;
  sub_186F87CDC();
  uint64_t v7 = sub_186F3CB8C(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  MEMORY[0x1895F8858](v7);
  v6[2] = v2;
  sub_186F6B888(6, &v7, (uint64_t (*)(char **))sub_186F36A30, (uint64_t)v6);
  uint64_t v3 = v7;
  uint64_t v4 = *((void *)v7 + 2);
  uint64_t result = swift_bridgeObjectRelease();
  qword_18C6B5F38 = v0;
  unk_18C6B5F40 = v3;
  xmmword_18C6B5F48 = (unint64_t)(v3 + 32);
  qword_18C6B5F58 = (2 * v4) | 1;
  return result;
}

uint64_t sub_186F362B8()
{
  if (qword_18C6B0690 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_18C6B5FA0;
  uint64_t v1 = qword_18C6B0688;
  sub_186F87CDC();
  if (v1 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_18C6B5F98;
  sub_186F87CDC();
  uint64_t v7 = sub_186F3CB8C(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  MEMORY[0x1895F8858](v7);
  v6[2] = v2;
  sub_186F6B888(6, &v7, (uint64_t (*)(char **))sub_186F363E4, (uint64_t)v6);
  uint64_t v3 = v7;
  uint64_t v4 = *((void *)v7 + 2);
  uint64_t result = swift_bridgeObjectRelease();
  qword_18C6B5F60 = v0;
  *(void *)algn_18C6B5F68 = v3;
  xmmword_18C6B5F70 = (unint64_t)(v3 + 32);
  qword_18C6B5F80 = (2 * v4) | 1;
  return result;
}

uint64_t sub_186F363E4(uint64_t a1)
{
  return sub_186F462DC(a1, *(void **)(v1 + 16));
}

uint64_t sub_186F363FC@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 a2@<W1>, char **a3@<X8>)
{
  if (*a1 != a2 || (a1[48] & 1) != 0)
  {
    sub_186F36690();
    swift_allocError();
    *uint64_t v6 = 1;
    swift_willThrow();
    return sub_186F366D4((uint64_t)a1);
  }

  swift_unknownObjectRetain_n();
  sub_186F5BC2C(0x30u, &v23);
  if (v3)
  {
LABEL_9:
    swift_unknownObjectRelease();
    sub_186F366D4((uint64_t)a1);
    return sub_186F366D4((uint64_t)a1);
  }

  uint64_t v7 = v23;
  uint64_t v34 = (char *)v24[0];
  uint64_t v8 = (char *)v24[1];
  unint64_t v9 = (char *)v24[2];
  uint64_t v10 = (char *)v24[3];
  sub_186F65184((uint64_t)v25);
  sub_186F36734((uint64_t)v25, (uint64_t)v28, &qword_18C4B5298);
  if (v29 == 255)
  {
    sub_186F36690();
    swift_allocError();
    *uint64_t v17 = 3;
    swift_willThrow();
    uint64_t v33 = v23;
    sub_186F3670C((uint64_t)&v33);
    sub_186F36734((uint64_t)v24, (uint64_t)v32, &qword_18C6B0868);
    sub_186F36778((uint64_t)v32);
    goto LABEL_9;
  }

  v30[0] = v28[0];
  v30[1] = v28[1];
  void v30[2] = v28[2];
  unsigned __int8 v31 = v29;
  uint64_t v11 = sub_186F3B2AC((unsigned __int8 *)v30, 3u);
  uint64_t v20 = v13;
  uint64_t v21 = v12;
  uint64_t v22 = v14;
  uint64_t v15 = v11;
  sub_186F65184((uint64_t)v26);
  sub_186F367A0((uint64_t)v26);
  sub_186F36734((uint64_t)v26, (uint64_t)v27, &qword_18C4B5298);
  if (v27[48] != 255)
  {
    sub_186F36690();
    swift_allocError();
    *uint64_t v16 = 3;
    swift_willThrow();
    sub_186F366D4((uint64_t)a1);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return sub_186F366D4((uint64_t)a1);
  }

  swift_unknownObjectRelease();
  sub_186F366D4((uint64_t)a1);
  uint64_t result = sub_186F366D4((uint64_t)a1);
  uint64_t v19 = v34;
  *a3 = v7;
  a3[1] = v19;
  a3[2] = v8;
  a3[3] = v9;
  a3[4] = v10;
  a3[5] = (char *)v15;
  a3[6] = v22;
  a3[7] = v21;
  a3[8] = v20;
  return result;
}

unint64_t sub_186F36690()
{
  unint64_t result = qword_18C6B0860;
  if (!qword_18C6B0860)
  {
    unint64_t result = MEMORY[0x18959EFD8]( &protocol conformance descriptor for CryptoKitASN1Error,  &type metadata for CryptoKitASN1Error);
    atomic_store(result, (unint64_t *)&qword_18C6B0860);
  }

  return result;
}

uint64_t sub_186F366D4(uint64_t a1)
{
  return a1;
}

uint64_t sub_186F3670C(uint64_t a1)
{
  return a1;
}

uint64_t sub_186F36734(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_186F36778(uint64_t a1)
{
  return a1;
}

uint64_t sub_186F367A0(uint64_t a1)
{
  return a1;
}

uint64_t sub_186F367D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  if (a7 != 255) {
    return j__swift_unknownObjectRelease(a2, a3, a4, a5, a6, a7 & 1);
  }
  return result;
}

uint64_t _s26RFC5480AlgorithmIdentifierVwxx()
{
  return swift_unknownObjectRelease();
}

uint64_t _s26RFC5480AlgorithmIdentifierVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_186F87CDC();
  swift_unknownObjectRetain();
  return a1;
}

void *_s26RFC5480AlgorithmIdentifierVwca(void *a1, void *a2)
{
  *a1 = *a2;
  sub_186F87CDC();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s26RFC5480AlgorithmIdentifierVwta(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t _s26RFC5480AlgorithmIdentifierVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t _s26RFC5480AlgorithmIdentifierVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *_s26RFC5480AlgorithmIdentifierVMa()
{
  return &_s26RFC5480AlgorithmIdentifierVN;
}

unint64_t sub_186F369EC()
{
  unint64_t result = qword_18C6B0870;
  if (!qword_18C6B0870)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F88C4C, &_s26RFC5480AlgorithmIdentifierVN);
    atomic_store(result, (unint64_t *)&qword_18C6B0870);
  }

  return result;
}

uint64_t sub_186F36A30(uint64_t a1)
{
  return sub_186F363E4(a1);
}

uint64_t sub_186F36A44()
{
  return sub_186F36BAC(&qword_18C6B0878, qword_18C6B0880);
}

uint64_t sub_186F36A68()
{
  return sub_186F36BAC(&qword_18C6B08C0, qword_18C6B08C8);
}

uint64_t sub_186F36A8C()
{
  return sub_186F36BAC(&qword_18C6B0908, qword_18C6B0910);
}

uint64_t sub_186F36AB0()
{
  return sub_186F36BAC(&qword_18C6B0950, qword_18C6B0958);
}

uint64_t sub_186F36AD4()
{
  return sub_186F36BAC(&qword_18C6B0998, qword_18C6B09A0);
}

uint64_t sub_186F36AF8()
{
  return sub_186F36BAC(&qword_18C6B09E0, qword_18C6B09E8);
}

uint64_t sub_186F36B1C()
{
  return sub_186F36BAC(&qword_18C6B0A28, qword_18C6B0A30);
}

uint64_t sub_186F36B40()
{
  return sub_186F36BAC(&qword_18C6B0A70, qword_18C6B0A78);
}

uint64_t sub_186F36B64()
{
  return sub_186F36BAC(&qword_18C6B0AB8, qword_18C6B0AC0);
}

uint64_t sub_186F36B88()
{
  return sub_186F36BAC(&qword_18C6B0B00, qword_18C6B0B08);
}

uint64_t sub_186F36BAC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = MEMORY[0x18959EFD8](&unk_186F892C8, v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_186F36BEC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_186F36BF4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *sub_186F36C60(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  __int128 v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(void *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }

  else
  {
    uint64_t v8 = *a2;
    *__int128 v3 = *a2;
    __int128 v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }

  return v3;
}

uint64_t sub_186F36CD0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))();
}

uint64_t sub_186F36CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_186F36D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_186F36D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_186F36D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_186F36DA0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_186F36E50 + 4 * byte_186F88CF0[(v7 - 1)]))();
}

void sub_186F36EA0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t type metadata accessor for IntegerBytesCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for IntegerBytesCollection);
}

void sub_186F3705C()
{
}

uint64_t sub_186F3706C()
{
  return MEMORY[0x189618758];
}

uint64_t sub_186F37078()
{
  return MEMORY[0x189618790];
}

uint64_t sub_186F37084(uint64_t result)
{
  if (__OFSUB__(result, 1LL))
  {
    __break(1u);
  }

  else if ((unint64_t)(result - 0x1000000000000001LL) >> 61 == 7)
  {
    sub_186F3842C();
    return sub_186F87E98();
  }

  __break(1u);
  return result;
}

uint64_t sub_186F37108()
{
  return sub_186F652F4();
}

uint64_t sub_186F37114(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v53 = *(void *)(a2 + 24);
  BOOL v54 = (char *)a1;
  uint64_t v48 = *(void *)(*(void *)(v53 + 8) + 24LL);
  uint64_t v49 = v3;
  swift_getAssociatedTypeWitness();
  uint64_t v55 = *(void *)(swift_getAssociatedConformanceWitness() + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v52 = (char *)&v45 - v5;
  uint64_t v6 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v4);
  size_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = swift_checkMetadataState();
  uint64_t v57 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](v9);
  uint64_t v46 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  uint64_t v50 = (char *)&v45 - v13;
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  __int16 v59 = (char *)&v45 - v15;
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  uint64_t v56 = (char *)&v45 - v17;
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v45 - v19;
  uint64_t v47 = (char *)&v45 - v19;
  MEMORY[0x1895F8858](v18);
  uint64_t v22 = (char *)&v45 - v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2, v3);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_186F87E50();
  sub_186F37084((uint64_t)v54);
  sub_186F87E68();
  uint64_t v23 = v3;
  uint64_t v24 = (char *)AssociatedTypeWitness;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v23);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v57 + 8);
  v25(v20, v9);
  swift_getAssociatedConformanceWitness();
  sub_186F87F94();
  sub_186F87F64();
  __int128 v26 = v56;
  BOOL v54 = v22;
  sub_186F87E5C();
  v25(v20, v9);
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
  v27(v59, v26, v9);
  if ((sub_186F87E8C() & 1) == 0
    || (sub_186F87F94(),
        uint64_t v28 = v47,
        sub_186F87F64(),
        swift_getAssociatedConformanceWitness(),
        char v29 = sub_186F87B68(),
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v25)(v28, v9),
        (v29 & 1) != 0))
  {
    if (sub_186F87E80() < 8) {
      goto LABEL_15;
    }
    v27(v50, v59, v9);
    unsigned __int8 v60 = -1;
    char v31 = sub_186F87E8C();
    uint64_t v32 = sub_186F87E80();
    if ((v31 & 1) != 0)
    {
      if (v32 <= 8)
      {
        sub_186F87F94();
        uint64_t v33 = v47;
        sub_186F87F64();
        swift_getAssociatedConformanceWitness();
        uint64_t v34 = v50;
        char v35 = sub_186F87B50();
        v25(v33, v9);
        unsigned int v36 = v60;
        uint64_t v24 = v46;
        (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v46, v34, v9);
        if ((v35 & 1) == 0)
        {
LABEL_14:
          v25(v24, v9);
          goto LABEL_15;
        }

        unsigned __int8 v37 = sub_186F87E74();
        v25(v24, v9);
        if (v36 < v37)
        {
LABEL_13:
          __break(1u);
          goto LABEL_14;
        }

LABEL_15:
        uint64_t v43 = v59;
        uint64_t v44 = sub_186F87E74();
        v25(v43, v9);
        v25(v56, v9);
        v25(v54, v9);
        return v44;
      }
    }

    else if (v32 < 9)
    {
      uint64_t v41 = v50;
      unsigned __int8 v42 = sub_186F87E74();
      v25(v41, v9);
      goto LABEL_15;
    }

    sub_186F383E8();
    int v38 = v47;
    sub_186F87E50();
    swift_getAssociatedConformanceWitness();
    uint64_t v39 = v50;
    char v40 = sub_186F87B5C();
    v25(v38, v9);
    v25(v39, v9);
    if ((v40 & 1) != 0) {
      goto LABEL_13;
    }
    goto LABEL_15;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }

    __break(1u);
    goto LABEL_15;
  }

  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_186F37744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = type metadata accessor for IntegerBytesCollection.Index(255LL, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
  MEMORY[0x18959EFD8](&unk_186F89058, v4);
  return sub_186F87D0C();
}

uint64_t sub_186F377B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = type metadata accessor for IntegerBytesCollection.Index(255LL, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
  MEMORY[0x18959EFD8](&unk_186F89058, v4);
  return sub_186F87D24();
}

uint64_t sub_186F37820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186F37B80(a1, a2, a3, MEMORY[0x189618808]);
}

void *sub_186F3782C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_186F37C10(a1, a2, a3, MEMORY[0x189618808]);
}

uint64_t sub_186F3783C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_186F87D00();
}

uint64_t sub_186F378A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_186F37108();
  *a1 = result;
  return result;
}

uint64_t sub_186F378C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_186F380A8();
  *a1 = result;
  return result;
}

void (*sub_186F378F4(void *a1, uint64_t *a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  uint64_t v7 = sub_186F37984((uint64_t)v6, *a2, a3);
  v6[40] = v8;
  *((void *)v6 + 4) = v7;
  return sub_186F37958;
}

void sub_186F37958(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

uint64_t (*sub_186F37984(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  return nullsub_1;
}

uint64_t sub_186F379B0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for IntegerBytesCollection.Index(255LL, *(void *)(a1 + 16), *(void *)(a1 + 24), v2);
  MEMORY[0x18959EFD8](&unk_186F89058, v3);
  return sub_186F87D18();
}

void sub_186F37A20(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_186F37A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for IntegerBytesCollection.Index(255LL, *(void *)(a3 + 16), *(void *)(a3 + 24), v4);
  MEMORY[0x18959EFD8](&unk_186F89058, v5);
  return sub_186F87D0C();
}

uint64_t sub_186F37AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for IntegerBytesCollection.Index(255LL, *(void *)(a3 + 16), *(void *)(a3 + 24), v4);
  MEMORY[0x18959EFD8](&unk_186F89058, v5);
  return sub_186F87D24();
}

uint64_t sub_186F37B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_186F380B0( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x189618A18],  (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x189617B40]);
}

uint64_t sub_186F37B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_186F380B0( a1,  a2,  a3,  a4,  MEMORY[0x189617BE0],  (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x189617B50]);
}

uint64_t sub_186F37B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186F37B80(a1, a2, a3, MEMORY[0x189618800]);
}

uint64_t sub_186F37B80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = MEMORY[0x18959EFD8](&unk_186F892C8);
  uint64_t v8 = type metadata accessor for IntegerBytesCollection.Index(255LL, *(void *)(a2 + 16), *(void *)(a2 + 24), v7);
  uint64_t v9 = MEMORY[0x18959EFD8](&unk_186F89058, v8);
  return a4(a1, a2, v6, v9);
}

void *sub_186F37C04(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_186F37C10(a1, a2, a3, MEMORY[0x189618800]);
}

void *sub_186F37C10( void *a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = MEMORY[0x18959EFD8](&unk_186F892C8);
  uint64_t v9 = type metadata accessor for IntegerBytesCollection.Index(255LL, *(void *)(a2 + 16), *(void *)(a2 + 24), v8);
  uint64_t v10 = MEMORY[0x18959EFD8](&unk_186F89058, v9);
  uint64_t result = a4(&v12, a1, a2, v7, v10);
  *a1 = v12;
  return result;
}

uint64_t sub_186F37C98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, v2, a1);
  uint64_t v6 = sub_186F37108();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, a1);
  MEMORY[0x18959EFD8](&unk_186F89188, a1);
  uint64_t result = sub_186F87F1C();
  *(void *)(a2 + *(int *)(result + 36)) = v6;
  return result;
}

uint64_t sub_186F37D24(uint64_t a1)
{
  return sub_186F87D54();
}

uint64_t sub_186F37D58()
{
  return 2LL;
}

uint64_t sub_186F37D60(uint64_t a1)
{
  uint64_t v3 = MEMORY[0x18959EFD8](&unk_186F89188, a1);
  uint64_t v4 = sub_186F3825C(v1, a1, v3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
  return v4;
}

uint64_t sub_186F37DC4()
{
  return sub_186F87C94();
}

uint64_t sub_186F37DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186F87E38();
}

BOOL sub_186F37E30(uint64_t a1, uint64_t a2)
{
  return a2 < a1;
}

BOOL sub_186F37E3C(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

BOOL sub_186F37E48(uint64_t a1, uint64_t a2)
{
  return a1 >= a2;
}

BOOL sub_186F37E54(uint64_t a1, uint64_t a2)
{
  return a2 >= a1;
}

BOOL sub_186F37E60(uint64_t *a1, uint64_t *a2)
{
  return sub_186F37E30(*a1, *a2);
}

BOOL sub_186F37E6C(uint64_t *a1, uint64_t *a2)
{
  return sub_186F37E48(*a1, *a2);
}

BOOL sub_186F37E78(uint64_t *a1, uint64_t *a2)
{
  return sub_186F37E54(*a1, *a2);
}

BOOL sub_186F37E84(uint64_t *a1, uint64_t *a2)
{
  return sub_186F37E3C(*a1, *a2);
}

uint64_t sub_186F37E90(uint64_t a1, uint64_t a2)
{
  BOOL v2 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t sub_186F37EA0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_186F37E90(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_186F37ECC()
{
  return sub_186F87E44();
}

void sub_186F37EE8()
{
}

void sub_186F37EF8()
{
}

void sub_186F37F08()
{
}

uint64_t sub_186F37F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186F37FF8(a1, a2, a3, MEMORY[0x189618A60]);
}

unint64_t sub_186F37F24()
{
  unint64_t result = qword_18C6B0BC8;
  if (!qword_18C6B0BC8)
  {
    unint64_t result = MEMORY[0x18959EFD8](MEMORY[0x189618768], MEMORY[0x189618740]);
    atomic_store(result, (unint64_t *)&qword_18C6B0BC8);
  }

  return result;
}

void sub_186F37F68()
{
}

void sub_186F37F78()
{
}

uint64_t sub_186F37F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186F37FF8(a1, a2, a3, MEMORY[0x189618A40]);
}

uint64_t sub_186F37F94(uint64_t a1)
{
  uint64_t v3 = MEMORY[0x18959EFD8](&unk_186F89268);
  return MEMORY[0x18959EFD8](MEMORY[0x18961A5C8], a1, &v3);
}

void sub_186F37FDC()
{
}

uint64_t sub_186F37FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186F37FF8(a1, a2, a3, MEMORY[0x189618A58]);
}

uint64_t sub_186F37FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = MEMORY[0x18959EFD8](&unk_186F89058, *(void *)(a1 + 16));
  v7[1] = sub_186F37F24();
  return MEMORY[0x18959EFD8](a4, a1, v7);
}

uint64_t sub_186F38054(uint64_t a1)
{
  uint64_t v3 = MEMORY[0x18959EFD8](&unk_186F892C8);
  return MEMORY[0x18959EFD8](MEMORY[0x18961A5E0], a1, &v3);
}

uint64_t type metadata accessor for IntegerBytesCollection.Index( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for IntegerBytesCollection.Index);
}

uint64_t sub_186F380A8()
{
  return 0LL;
}

uint64_t sub_186F380B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v23 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = a5(0LL, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v18 = (char *)&v22 - v17;
  char v19 = sub_186F87B74();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }

  char v20 = v23(v18, &v15[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_186F38260(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_186F87DA8();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v17 - v9;
  char v11 = sub_186F87B74();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v8, a2, v4);
  if ((v11 & 1) == 0)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v10, v4);
    goto LABEL_5;
  }

  char v13 = sub_186F87B74();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v14)(v10, v4);
  if ((v13 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

unint64_t sub_186F383E8()
{
  unint64_t result = qword_18C6B0BD0;
  if (!qword_18C6B0BD0)
  {
    unint64_t result = MEMORY[0x18959EFD8](MEMORY[0x18961A640], MEMORY[0x18961A610]);
    atomic_store(result, (unint64_t *)&qword_18C6B0BD0);
  }

  return result;
}

unint64_t sub_186F3842C()
{
  unint64_t result = qword_18C6B0BD8[0];
  if (!qword_18C6B0BD8[0])
  {
    unint64_t result = MEMORY[0x18959EFD8](MEMORY[0x189618788], MEMORY[0x189618740]);
    atomic_store(result, qword_18C6B0BD8);
  }

  return result;
}

ValueMetadata *type metadata accessor for Curve25519()
{
  return &type metadata for Curve25519;
}

uint64_t AES.CCM.SealedBox.tag.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_186F33D20(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t AES.CCM.SealedBox.ciphertext.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_186F33D20(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t AES.CCM.SealedBox.nonce.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  unint64_t v3 = *(void *)(v1 + 40);
  *a1 = v2;
  a1[1] = v3;
  return sub_186F33D20(v2, v3);
}

void AES.CCM.SealedBox.securityLevel.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 48);
}

uint64_t AES.CCM.SealedBox.init<A, B>(nonce:ciphertext:tag:securityLevel:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v33 = a5;
  uint64_t v38 = a2;
  uint64_t v9 = *(void *)(a4 - 8);
  uint64_t v10 = MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = (uint64_t *)MEMORY[0x1895F8858](v10);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v18 = v15[1];
  uint64_t v36 = *v15;
  unint64_t v37 = v18;
  int v20 = *v19;
  uint64_t v21 = sub_186F87D3C();
  int v34 = v20;
  uint64_t v22 = 8LL;
  if (v20) {
    uint64_t v22 = 16LL;
  }
  if (v21 == v22)
  {
    uint64_t v23 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v38, v35);
    uint64_t v24 = sub_186F87AE4();
    uint64_t v33 = v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a3, a4);
    uint64_t v26 = sub_186F87AE4();
    uint64_t v28 = v27;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a3, a4);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v38, v23);
    *(void *)a6 = v26;
    *(void *)(a6 + 8) = v28;
    uint64_t v30 = v33;
    *(void *)(a6 + 16) = v24;
    *(void *)(a6 + 24) = v30;
    unint64_t v31 = v37;
    *(void *)(a6 + 32) = v36;
    *(void *)(a6 + 40) = v31;
    *(_BYTE *)(a6 + 48) = v34;
  }

  else
  {
    sub_186F33C98(v36, v37);
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v32 = 1;
    *(_BYTE *)(v32 + 4) = 1;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a3, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v38, v35);
  }

  return result;
}

uint64_t _s9SealedBoxVwxx(uint64_t a1)
{
  return sub_186F33C98(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t _s9SealedBoxVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_186F33D20(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_186F33D20(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  sub_186F33D20(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t _s9SealedBoxVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_186F33D20(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_186F33C98(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  sub_186F33D20(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  sub_186F33C98(v10, v11);
  uint64_t v12 = *(void *)(a2 + 32);
  unint64_t v13 = *(void *)(a2 + 40);
  sub_186F33D20(v12, v13);
  uint64_t v14 = *(void *)(a1 + 32);
  unint64_t v15 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v13;
  sub_186F33C98(v14, v15);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s9SealedBoxVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_186F33C98(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_186F33C98(v6, v7);
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_186F33C98(v8, v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t _s9SealedBoxVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s9SealedBoxVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 49) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 49) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 48) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AES.CCM.SealedBox()
{
  return &type metadata for AES.CCM.SealedBox;
}

uint64_t sub_186F3895C(uint64_t a1, unint64_t a2)
{
  v17[5] = *MEMORY[0x1895F89C0];
  *(void *)&__int128 v16 = a1;
  *((void *)&v16 + 1) = a2;
  sub_186F87CDC();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B5280);
  if (!swift_dynamicCast())
  {
    uint64_t v15 = 0LL;
    memset(v14, 0, sizeof(v14));
    sub_186F3A31C((uint64_t)v14, &qword_18C4B5288);
    if ((a2 & 0x1000000000000000LL) != 0) {
      goto LABEL_20;
    }
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      v17[0] = a1;
      v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      BOOL v4 = (char *)v17 + (HIBYTE(a2) & 0xF);
      int v5 = v17;
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) != 0)
      {
        uint64_t v2 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v2 = sub_186F87F04();
      }

      if (v2) {
        BOOL v4 = (_BYTE *)(v2 + v3);
      }
      else {
        BOOL v4 = 0LL;
      }
      int v5 = (_BYTE *)v2;
    }

    uint64_t v6 = sub_186F39F7C(v5, v4);
    unint64_t v8 = v7;
    if (v7 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v14[0] = v6;
      *((void *)&v14[0] + 1) = v8;
      return *(void *)&v14[0];
    }

    if ((a2 & 0x1000000000000000LL) != 0)
    {
LABEL_20:
      uint64_t v9 = sub_186F87BF8();
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      uint64_t v9 = HIBYTE(a2) & 0xF;
    }

    else
    {
      uint64_t v9 = a1 & 0xFFFFFFFFFFFFLL;
    }

    *(void *)&v14[0] = sub_186F39FE0(v9);
    *((void *)&v14[0] + 1) = v10;
    MEMORY[0x1895F8858](*(void *)&v14[0]);
    sub_186F5A000();
    __asm { BR              X12 }
  }

  sub_186F3A3A0(v14, (uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v17, v17[3]);
  sub_186F879B8();
  swift_bridgeObjectRelease();
  v14[0] = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return *(void *)&v14[0];
}

uint64_t sub_186F38E60(uint64_t a1, uint64_t a2)
{
  v8[3] = MEMORY[0x1896181D0];
  v8[4] = MEMORY[0x1896071B0];
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x1896181D0]);
  uint64_t v3 = (_BYTE *)*v2;
  if (*v2 && (BOOL v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = sub_186F6F884(v3, v4);
    }

    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = sub_186F39E84((uint64_t)v3, (uint64_t)v4);
    }

    else
    {
      uint64_t v6 = sub_186F39EFC((uint64_t)v3, (uint64_t)v4);
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

uint64_t sub_186F38F18(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6B0C78);
  MEMORY[0x1895F8858](v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6B0C80);
  MEMORY[0x1895F8858](v3);
  __int128 v15 = *(_OWORD *)a1;
  __int128 v4 = *(_OWORD *)a1;
  __int128 v16 = *(_OWORD *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 32);
  __int128 v5 = *(_OWORD *)(a1 + 16);
  __int128 v11 = v4;
  __int128 v12 = v5;
  uint64_t v13 = *(void *)(a1 + 32);
  sub_186F3A270(a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6B0C88);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B5280);
  if (!swift_dynamicCast())
  {
    uint64_t v10 = 0LL;
    memset(v9, 0, sizeof(v9));
    sub_186F3A31C((uint64_t)v9, &qword_18C4B5288);
    __asm { BR              X13 }
  }

  sub_186F3A3A0(v9, (uint64_t)v14);
  __swift_project_boxed_opaque_existential_1(v14, v14[3]);
  sub_186F879B8();
  uint64_t v6 = *((void *)&v15 + 1);
  unint64_t v7 = v16;
  swift_bridgeObjectRelease();
  sub_186F33C98(v6, v7);
  swift_release();
  __int128 v11 = v9[0];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v11;
}

void sub_186F394BC(uint64_t a1, uint64_t a2)
{
  v3[5] = *MEMORY[0x1895F89C0];
  v3[3] = MEMORY[0x189606D70];
  v3[4] = MEMORY[0x189606D58];
  v3[0] = a1;
  v3[1] = a2;
  uint64_t v2 = (char *)&loc_186F39520
     + dword_186F39754[__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x189606D70])[1] >> 62];
  __asm { BR              X10 }

uint64_t sub_186F39530()
{
  uint64_t v6 = v2;
  __int16 v7 = v3;
  char v8 = BYTE2(v3);
  char v9 = BYTE3(v3);
  char v10 = BYTE4(v3);
  char v11 = BYTE5(v3);
  sub_186F33D20(v1, v0);
  sub_186F39C00(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_186F33C98(v1, v0);
  uint64_t v4 = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  return v4;
}

void sub_186F39764(uint64_t a1, uint64_t a2)
{
  v5[5] = *MEMORY[0x1895F89C0];
  v5[3] = &type metadata for ChaChaPoly.Nonce;
  v5[4] = sub_186F3A44C();
  v5[0] = a1;
  v5[1] = a2;
  uint64_t v4 = (char *)&loc_186F397CC
     + *((int *)qword_186F39A00
       + (__swift_project_boxed_opaque_existential_1(v5, (uint64_t)&type metadata for ChaChaPoly.Nonce)[1] >> 62));
  __asm { BR              X10 }

uint64_t sub_186F397DC()
{
  uint64_t v6 = v2;
  __int16 v7 = v3;
  char v8 = BYTE2(v3);
  char v9 = BYTE3(v3);
  char v10 = BYTE4(v3);
  char v11 = BYTE5(v3);
  sub_186F33D20(v1, v0);
  sub_186F39C00(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_186F33C98(v1, v0);
  uint64_t v4 = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  return v4;
}

uint64_t Curve448.Signing.PrivateKey.init()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = sub_186F87CE8();
  *(void *)(v2 + 16) = 57LL;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 73) = 0u;
  uint64_t v5 = v2;
  unint64_t v3 = sub_186F41B88(0x39uLL, (uint64_t)&v5);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

size_t Curve448.Signing.PrivateKey.publicKey.getter@<X0>(size_t *a1@<X8>)
{
  size_t result = sub_186F63348();
  *a1 = result;
  return result;
}

uint64_t Curve448.Signing.PrivateKey.init<A>(rawRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = sub_186F6368C();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  if (!v3) {
    *a3 = v7;
  }
  return result;
}

uint64_t Curve448.Signing.PrivateKey.rawRepresentation.getter()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = sub_186F41BA4(v0);
  swift_release();
  return v1;
}

uint64_t Curve448.Signing.PublicKey.init<A>(rawRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = sub_186F636F8();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  if (!v3) {
    *a3 = v7;
  }
  return result;
}

uint64_t Curve448.Signing.PublicKey.rawRepresentation.getter()
{
  uint64_t v0 = sub_186F87CDC();
  uint64_t v1 = sub_186F3A07C(v0);
  swift_bridgeObjectRelease();
  return v1;
}

_BYTE *sub_186F39C00@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    uint64_t result = (_BYTE *)sub_186F6F884(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (_BYTE *)sub_186F39E84((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    uint64_t result = (_BYTE *)sub_186F39EFC((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

  uint64_t v7 = v6 + 1;
  if (v6 + 1 < v1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (v6 >= -1)
  {
    uint64_t v8 = v0[3] & 1LL | (2 * v7);
    v0[2] = v7;
    char v9 = swift_unknownObjectRetain();
    sub_186F465A4(v9, v5, v1, v8);
    return;
  }

void *sub_186F39C74( void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }

  uint64_t result = a1(&v6, 0LL, 0LL);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

uint64_t sub_186F39CD8(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    return a1(a3, a4 - a3);
  }
  else {
    return a1(0LL, 0LL);
  }
}

uint64_t sub_186F39D24@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    sub_186F87CDC();
    uint64_t result = sub_186F87EF8();
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = result;
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = 0LL;
      a2[1] = 0xE000000000000000LL;
      a2[2] = 15LL;
      a2[3] = v4;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_186F39DAC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  __int128 v3 = *(_OWORD *)(a3 + 3);
  __int128 v7 = *(_OWORD *)(a3 + 1);
  __int128 v8 = v3;
  v5[2] = &v6;
  return sub_186F39CD8((uint64_t (*)(uint64_t, uint64_t))sub_186F3A3B8, (uint64_t)v5, a1, a2);
}

void sub_186F39E00(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  __int128 v5 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v5;
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_18C6B0C78) + 48);
  sub_186F3A270((uint64_t)v8);
  sub_186F69FA8(a3, a1);
  *(void *)(a3 + v6) = v7;
}

uint64_t sub_186F39E84(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0LL;
  }
  sub_186F879AC();
  swift_allocObject();
  uint64_t result = sub_186F87970();
  if (v2 < 0)
  {
    __break(1u);
  }

  else
  {
    sub_186F87A24();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = v2;
  }

  return result;
}

uint64_t sub_186F39EFC(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0LL;
  }
  sub_186F879AC();
  swift_allocObject();
  uint64_t result = sub_186F87970();
  if (v2 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

_BYTE *sub_186F39F7C(_BYTE *result, _BYTE *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0LL;
    }

    else if (v2 <= 14)
    {
      return (_BYTE *)sub_186F6F884(result, a2);
    }

    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)sub_186F39E84((uint64_t)result, (uint64_t)a2);
    }

    else
    {
      return (_BYTE *)sub_186F39EFC((uint64_t)result, (uint64_t)a2);
    }
  }

  return result;
}

uint64_t sub_186F39FE0(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0LL;
      }
    }

    else
    {
      sub_186F879AC();
      swift_allocObject();
      sub_186F87988();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_186F87A24();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0LL;
        *(void *)(result + 24) = v1;
      }

      else
      {
        return v1 << 32;
      }
    }
  }

  return result;
}

uint64_t sub_186F3A07C(uint64_t a1)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53B8);
  uint64_t v10 = sub_186F3A490((unint64_t *)&qword_18C4B53C0, &qword_18C4B53B8, MEMORY[0x189607200]);
  v8[0] = a1;
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  __int128 v3 = (_BYTE *)(*v2 + 32LL);
  uint64_t v4 = &v3[*(void *)(*v2 + 16LL)];
  sub_186F87CDC();
  sub_186F39C00(v3, v4, &v7);
  uint64_t v5 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

void *sub_186F3A12C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B52A8);
  v19[3] = v8;
  v19[4] = sub_186F3A490((unint64_t *)&qword_18C4B52A0, &qword_18C4B52A8, MEMORY[0x189607380]);
  uint64_t v9 = (void *)swift_allocObject();
  v19[0] = v9;
  __int128 v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  uint64_t result = __swift_project_boxed_opaque_existential_1(v19, v8);
  uint64_t v11 = result[2];
  uint64_t v12 = result[3] >> 1;
  BOOL v13 = __OFSUB__(v12, v11);
  uint64_t v14 = v12 - v11;
  if (v13)
  {
    __break(1u);
  }

  else
  {
    __int128 v15 = (_BYTE *)(result[1] + v11);
    __int128 v16 = &v15[v14];
    swift_unknownObjectRetain();
    sub_186F39C00(v15, v16, &v18);
    uint64_t v17 = v18;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return (void *)v17;
  }

  return result;
}

ValueMetadata *type metadata accessor for Curve448.Signing()
{
  return &type metadata for Curve448.Signing;
}

ValueMetadata *type metadata accessor for Curve448.Signing.PrivateKey()
{
  return &type metadata for Curve448.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for Curve448.Signing.PublicKey()
{
  return &type metadata for Curve448.Signing.PublicKey;
}

uint64_t sub_186F3A24C()
{
  return swift_deallocObject();
}

uint64_t sub_186F3A270(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  sub_186F87CDC();
  sub_186F33D20(v2, v3);
  swift_retain();
  return a1;
}

uint64_t sub_186F3A2BC(uint64_t a1, uint64_t a2)
{
  return sub_186F39DAC(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_186F3A2D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6B0C80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_186F3A31C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

unint64_t sub_186F3A358()
{
  unint64_t result = qword_18C6B0C98;
  if (!qword_18C6B0C98)
  {
    uint64_t v1 = sub_186F87ACC();
    unint64_t result = MEMORY[0x18959EFD8](MEMORY[0x189606D20], v1);
    atomic_store(result, (unint64_t *)&qword_18C6B0C98);
  }

  return result;
}

uint64_t sub_186F3A3A0(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void sub_186F3A3B8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void *sub_186F3A3D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  unint64_t result = sub_186F39C74( (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_186F3A430,  (uint64_t)v12,  a1,  a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_186F3A430@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_186F39D24(a1, a2);
}

unint64_t sub_186F3A44C()
{
  unint64_t result = qword_18C6B0CA0;
  if (!qword_18C6B0CA0)
  {
    unint64_t result = MEMORY[0x18959EFD8]( &protocol conformance descriptor for ChaChaPoly.Nonce,  &type metadata for ChaChaPoly.Nonce);
    atomic_store(result, (unint64_t *)&qword_18C6B0CA0);
  }

  return result;
}

uint64_t sub_186F3A490(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = MEMORY[0x18959EFD8](a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t Curve448.Signing.PublicKey.isValidSignature<A, B>(_:for:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5, uint64_t a6)
{
  return sub_186F49C04(a1, a2, a3, a4, a5, a6) & 1;
}

uint64_t Curve448.Signing.PrivateKey.signature<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186F4A2BC(a1, a2, a3);
}

uint64_t KEM.EncapsulationResult.sharedSecret.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

uint64_t KEM.EncapsulationResult.encapsulated.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_186F33D20(v1, *(void *)(v0 + 16));
  return v1;
}

void *KEM.EncapsulationResult.init(sharedSecret:encapsulated:)@<X0>( void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = *result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

ValueMetadata *type metadata accessor for KEM()
{
  return &type metadata for KEM;
}

uint64_t destroy for KEM.EncapsulationResult(uint64_t a1)
{
  return sub_186F33C98(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

void *_s9CryptoKit3KEMO19EncapsulationResultVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  unint64_t v4 = a2[2];
  swift_retain();
  sub_186F33D20(v3, v4);
  a1[1] = v3;
  a1[2] = v4;
  return a1;
}

void *assignWithCopy for KEM.EncapsulationResult(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[1];
  unint64_t v4 = a2[2];
  sub_186F33D20(v5, v4);
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  a1[1] = v5;
  a1[2] = v4;
  sub_186F33C98(v6, v7);
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for KEM.EncapsulationResult(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_186F33C98(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for KEM.EncapsulationResult(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KEM.EncapsulationResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for KEM.EncapsulationResult()
{
  return &type metadata for KEM.EncapsulationResult;
}

uint64_t dispatch thunk of KEMPublicKey.encapsulate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static KEMPrivateKey.generate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of KEMPrivateKey.decapsulate(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of KEMPrivateKey.publicKey.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

unint64_t HPKE.KEM.value.getter()
{
  return 0x20001200110010uLL >> (16 * *v0);
}

unint64_t HPKE.KEM.nEnc.getter()
{
  return 0x20008500610041uLL >> (16 * *v0);
}

BOOL static HPKE.KEM.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t HPKE.KEM.hash(into:)()
{
  return sub_186F87FF4();
}

void *static HPKE.KEM.allCases.getter()
{
  return &unk_189FABCB0;
}

uint64_t HPKE.KEM.hashValue.getter()
{
  return sub_186F88018();
}

void sub_186F3A868(void *a1@<X8>)
{
  *a1 = &unk_189FABCD8;
}

unint64_t sub_186F3A87C()
{
  unint64_t result = qword_18C6B0CD8;
  if (!qword_18C6B0CD8)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C6B0CE0);
    unint64_t result = MEMORY[0x18959EFD8](MEMORY[0x189618488], v1);
    atomic_store(result, (unint64_t *)&qword_18C6B0CD8);
  }

  return result;
}

unint64_t sub_186F3A8CC()
{
  unint64_t result = qword_18C6B0CE8;
  if (!qword_18C6B0CE8)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for HPKE.KEM, &type metadata for HPKE.KEM);
    atomic_store(result, (unint64_t *)&qword_18C6B0CE8);
  }

  return result;
}

uint64_t _s3KEMOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t _s3KEMOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_186F3A9EC + 4 * byte_186F89491[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_186F3AA20 + 4 * asc_186F8948C[v4]))();
}

uint64_t sub_186F3AA20(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F3AA28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x186F3AA30LL);
  }
  return result;
}

uint64_t sub_186F3AA3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x186F3AA44LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_186F3AA48(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F3AA50(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HPKE.KEM()
{
  return &type metadata for HPKE.KEM;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CryptoTokenKitError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for CryptoTokenKitError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0LL;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_186F3AAD0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_186F3AAEC(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }

  else
  {
    *(_BYTE *)(result + 8) = 0;
  }

  return result;
}

ValueMetadata *type metadata accessor for CryptoTokenKitError()
{
  return &type metadata for CryptoTokenKitError;
}

_BYTE *HPKE.Ciphersuite.init(kem:kdf:aead:)@<X0>( _BYTE *result@<X0>, char *a2@<X1>, char *a3@<X2>, _BYTE *a4@<X8>)
{
  char v4 = *a2;
  char v5 = *a3;
  *a4 = *result;
  a4[1] = v4;
  a4[2] = v5;
  return result;
}

void static HPKE.Ciphersuite.P256_SHA256_AES_GCM_256.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 1;
}

void static HPKE.Ciphersuite.P384_SHA384_AES_GCM_256.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 257;
  *(_BYTE *)(a1 + 2) = 1;
}

void static HPKE.Ciphersuite.P521_SHA512_AES_GCM_256.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 514;
  *(_BYTE *)(a1 + 2) = 1;
}

void static HPKE.Ciphersuite.Curve25519_SHA256_ChachaPoly.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 3;
  *(_BYTE *)(a1 + 2) = 2;
}

uint64_t sub_186F3AB94()
{
  uint64_t result = sub_186F3895C(1162563656LL, 0xE400000000000000LL);
  qword_18C6B0CF0 = result;
  *(void *)algn_18C6B0CF8 = v1;
  return result;
}

void HPKE.Ciphersuite.kem.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

void HPKE.Ciphersuite.kdf.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 1);
}

void HPKE.Ciphersuite.aead.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 2);
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)uint64_t result = v2;
  return result;
}

uint64_t _s11CiphersuiteVwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE)
  {
    if ((a2 + 33554178) >> 24)
    {
      int v2 = a1[3];
      if (a1[3]) {
        return (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776962;
      }
    }

    else
    {
      int v2 = *(unsigned __int16 *)(a1 + 3);
      if (*(_WORD *)(a1 + 3)) {
        return (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776962;
      }
    }
  }

  unsigned int v4 = a1[1];
  BOOL v5 = v4 >= 3;
  int v6 = v4 - 3;
  if (!v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t _s11CiphersuiteVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554178) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFD) {
    int v3 = 0;
  }
  if (a2 > 0xFD)
  {
    *(_WORD *)uint64_t result = a2 - 254;
    *(_BYTE *)(result + 2) = (a2 - 254) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 254) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(_BYTE *)(result + 3) = v4;
      }
    }
  }

  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(_BYTE *)(result + 1) = a2 + 2;
      return result;
    }

    *(_BYTE *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for HPKE.Ciphersuite()
{
  return &type metadata for HPKE.Ciphersuite;
}

uint64_t sub_186F3AD04(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v9 = sub_186F3CB8C(0LL, *((void *)v9 + 2) + 1LL, 1, v9);
  }
  unint64_t v11 = *((void *)v9 + 2);
  unint64_t v10 = *((void *)v9 + 3);
  if (v11 >= v10 >> 1) {
    uint64_t v9 = sub_186F3CB8C((char *)(v10 > 1), v11 + 1, 1, v9);
  }
  *((void *)v9 + 2) = v11 + 1;
  v9[v11 + 32] = 0;
  *a1 = v9;
  uint64_t v12 = swift_unknownObjectRetain();
  sub_186F87654(v12, a3, a4, a5);
  return swift_unknownObjectRelease();
}

uint64_t sub_186F3ADEC()
{
  return sub_186F3B408(*(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_186F3ADF8(uint64_t a1)
{
  return sub_186F3B3A4(a1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_186F3AE04()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  sub_186F87FDC();
  unint64_t v4 = v3 >> 1;
  uint64_t result = v4 - v2;
  if (__OFSUB__(v4, v2))
  {
    __break(1u);
  }

  else
  {
    uint64_t result = sub_186F87FF4();
    BOOL v6 = __OFSUB__(v4, v2);
    uint64_t v7 = v4 - v2;
    if (!v7) {
      return sub_186F88018();
    }
    if (!((v7 < 0) ^ v6 | (v7 == 0)))
    {
      uint64_t v8 = v1 + v2;
      do
      {
        ++v8;
        sub_186F88000();
        --v7;
      }

      while (v7);
      return sub_186F88018();
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_186F3AE84(uint64_t a1, uint64_t a2)
{
  return sub_186F3AF28( *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a2 + 8),  *(void *)(a2 + 16),  *(void *)(a2 + 24));
}

uint64_t sub_186F3AEA0()
{
  return sub_186F87EB0();
}

uint64_t sub_186F3AEC0()
{
  return sub_186F3AEA0();
}

unint64_t sub_186F3AEE4()
{
  unint64_t result = qword_18C6B0D00;
  if (!qword_18C6B0D00)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F895E4, &_s13ASN1BitStringVN);
    atomic_store(result, (unint64_t *)&qword_18C6B0D00);
  }

  return result;
}

uint64_t sub_186F3AF28( uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int64_t v6 = a3 >> 1;
  uint64_t v7 = (a3 >> 1) - a2;
  if (!__OFSUB__(a3 >> 1, a2))
  {
    int64_t v8 = a6 >> 1;
    if (__OFSUB__(a6 >> 1, a5)) {
      goto LABEL_20;
    }
    if (v7 != (a6 >> 1) - a5) {
      return 0LL;
    }
    if (!v7 || result + a2 == a4 + a5 || v6 == a2) {
      return 1LL;
    }
    if (v6 <= a2) {
      goto LABEL_22;
    }
    uint64_t v9 = a2 + 1;
    int v10 = *(unsigned __int8 *)(result + a2);
    if (v6 == a2) {
      return 1LL;
    }
    uint64_t v11 = a5;
    if (v8 == a5) {
      return 0LL;
    }
    while (v11 >= a5 && v11 < v8)
    {
      if (v6 == v9) {
        return 1LL;
      }
      if (v9 >= v6) {
        goto LABEL_21;
      }
      int v10 = *(unsigned __int8 *)(result + v9++);
      if (v8 == ++v11) {
        return 0LL;
      }
    }

    __break(1u);
  }

  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_186F3AFFC( uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int64_t v6 = a3 >> 1;
  uint64_t v7 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v8 = a5;
  int64_t v9 = a6 >> 1;
  if (__OFSUB__(a6 >> 1, a5)) {
    goto LABEL_34;
  }
  if (v7 != (a6 >> 1) - a5)
  {
    char v13 = 0;
    return v13 & 1;
  }

  if (!v7) {
    goto LABEL_11;
  }
  uint64_t v11 = result;
  uint64_t v12 = (unsigned __int8 *)(result + 48 * a2);
  if (v6 <= a2)
  {
LABEL_37:
    __break(1u);
    return result;
  }

  uint64_t v14 = *v12;
  __int128 v15 = (void *)(result + 48 * a2);
  uint64_t v17 = v15[4];
  unint64_t v16 = v15[5];
  uint64_t v18 = v15[2];
  uint64_t v35 = a2 + 1;
  uint64_t v37 = v15[3];
  uint64_t v38 = v15[1];
  unint64_t result = swift_unknownObjectRetain();
  uint64_t v19 = v35;
  if (v18 == 1)
  {
LABEL_11:
    char v13 = 1;
    return v13 & 1;
  }

  uint64_t v20 = 0LL;
  uint64_t v36 = a4 + 48 * v8;
  uint64_t v32 = v11 + 48 * v19;
  uint64_t v33 = v9;
  uint64_t v21 = v8;
  while (1)
  {
    if (v9 == v21)
    {
      sub_186F3B490(v14, v38, v18);
      uint64_t v29 = 0LL;
      uint64_t v30 = 0LL;
      uint64_t v31 = 1LL;
      goto LABEL_31;
    }

    if (v21 < v8 || v21 >= v9) {
      goto LABEL_35;
    }
    uint64_t v22 = (void *)(v36 + v20);
    if (*(unsigned __int8 *)(v36 + v20) != v14 || v38 != v22[1])
    {
      uint64_t v29 = v14;
      uint64_t v30 = v38;
      uint64_t v31 = v18;
LABEL_31:
      sub_186F3B490(v29, v30, v31);
      char v13 = 0;
      return v13 & 1;
    }

    uint64_t v23 = v22[2];
    if (!v18) {
      break;
    }
    if (!v23) {
      goto LABEL_32;
    }
    uint64_t v34 = v18;
    uint64_t v24 = v20;
    char v13 = sub_186F3AF28(v37, v17, v16, v22[3], v22[4], v22[5]);
    unint64_t result = sub_186F3B490(v14, v38, v34);
    if ((v13 & 1) == 0 || v6 == v19) {
      return v13 & 1;
    }
LABEL_26:
    if (v19 >= v6) {
      goto LABEL_36;
    }
    uint64_t v25 = v6;
    uint64_t v26 = v8;
    uint64_t v27 = v24 + 48;
    ++v19;
    ++v21;
    uint64_t v28 = v32 + v24;
    uint64_t v14 = *(unsigned __int8 *)(v32 + v24);
    uint64_t v17 = *(void *)(v32 + v24 + 32);
    unint64_t v16 = *(void *)(v32 + v24 + 40);
    uint64_t v18 = *(void *)(v32 + v24 + 16);
    uint64_t v37 = *(void *)(v28 + 24);
    uint64_t v38 = *(void *)(v28 + 8);
    unint64_t result = swift_unknownObjectRetain();
    char v13 = 1;
    uint64_t v20 = v27;
    uint64_t v8 = v26;
    int64_t v6 = v25;
    int64_t v9 = v33;
    if (v18 == 1) {
      return v13 & 1;
    }
  }

  if (!v23)
  {
    uint64_t v24 = v20;
    unint64_t result = sub_186F3B490(v14, v38, 0LL);
    if (v6 == v19) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }

LABEL_32:
  swift_unknownObjectRelease();
  char v13 = 0;
  return v13 & 1;
}

  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_186F3B2AC(unsigned __int8 *a1, unsigned __int8 a2)
{
  if (*a1 != a2)
  {
    sub_186F36690();
    swift_allocError();
    char v5 = 1;
    goto LABEL_9;
  }

  sub_186F3B4A4((uint64_t)(a1 + 8), (uint64_t)v6);
  uint64_t result = sub_186F3B4A4((uint64_t)v6, (uint64_t)v7);
  if ((v10 & 1) != 0)
  {
    if (v8 != v9 >> 1)
    {
      if (v8 >= (uint64_t)(v9 >> 1))
      {
        __break(1u);
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }

      if (!*(_BYTE *)(v7[1] + v8))
      {
        if (!__OFSUB__(v9 >> 1, v8)) {
          return v7[0];
        }
        goto LABEL_12;
      }
    }

    sub_186F36690();
    swift_allocError();
    char v5 = 3;
LABEL_9:
    *unint64_t v4 = v5;
    swift_willThrow();
    return sub_186F366D4((uint64_t)a1);
  }

uint64_t sub_186F3B3A4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t result = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_8;
  }

  uint64_t result = sub_186F87FF4();
  BOOL v8 = __OFSUB__(v4, a3);
  uint64_t v9 = v4 - a3;
  if (!v9) {
    return result;
  }
  if ((v9 < 0) ^ v8 | (v9 == 0))
  {
LABEL_8:
    __break(1u);
    return result;
  }

  uint64_t v10 = a2 + a3;
  do
  {
    ++v10;
    uint64_t result = sub_186F88000();
    --v9;
  }

  while (v9);
  return result;
}

uint64_t sub_186F3B408(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 1;
  uint64_t result = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
    __break(1u);
  }

  else
  {
    uint64_t result = sub_186F87FF4();
    BOOL v8 = __OFSUB__(v6, a2);
    uint64_t v9 = v6 - a2;
    if (!v9) {
      return sub_186F88018();
    }
    if (!((v9 < 0) ^ v8 | (v9 == 0)))
    {
      uint64_t v10 = a1 + a2;
      do
      {
        ++v10;
        sub_186F88000();
        --v9;
      }

      while (v9);
      return sub_186F88018();
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_186F3B490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1) {
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_186F3B4A4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _s7ASN1AnyVwxx()
{
  return swift_unknownObjectRelease();
}

uint64_t _s7ASN1AnyVwcp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

void *_s7ASN1AnyVwca(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

_OWORD *_s7ASN1AnyVwta(_OWORD *a1, _OWORD *a2)
{
  __int128 v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  return a1;
}

uint64_t _s7ASN1AnyVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t _s7ASN1AnyVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *_s13ASN1BitStringVMa()
{
  return &_s13ASN1BitStringVN;
}

uint64_t static HMAC.isValidAuthenticationCode(_:authenticating:using:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *a4;
  v15[0] = a2;
  v15[1] = a3;
  uint64_t v14 = v9;
  uint64_t v10 = type metadata accessor for HashedAuthenticationCode(0LL, a5, a6, (uint64_t)a4);
  uint64_t v11 = MEMORY[0x18959EFD8](&protocol conformance descriptor for HashedAuthenticationCode<A>, v10);
  unint64_t v12 = sub_186F32834();
  return sub_186F3B6F0(a1, (uint64_t)v15, &v14, a5, v10, MEMORY[0x1896181D0], a6, v11, v12) & 1;
}

uint64_t sub_186F3B6F0( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v27 = a5;
  uint64_t v28 = a8;
  uint64_t v25 = a6;
  uint64_t v26 = a1;
  uint64_t v24 = a9;
  uint64_t v13 = type metadata accessor for HashedAuthenticationCode(0LL, a4, a7, a4);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  unint64_t v16 = (char *)&v24 - v15;
  uint64_t v18 = type metadata accessor for HMAC(0LL, a4, a7, v17);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1895F8858](v18);
  uint64_t v21 = (char *)&v24 - v20;
  uint64_t v29 = *a3;
  swift_retain();
  HMAC.init(key:)(&v29, a4, a7);
  HMAC.update<A>(data:)(a2, v18, v25, v24);
  HMAC.finalize()(v18, v16);
  uint64_t v22 = MEMORY[0x18959EFD8](&protocol conformance descriptor for HashedAuthenticationCode<A>, v13);
  LOBYTE(a2) = sub_186F6CF48(v26, v16, v27, v13, v28, v22);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  return a2 & 1;
}

uint64_t type metadata accessor for HashedAuthenticationCode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for HashedAuthenticationCode);
}

uint64_t HMAC.init(key:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t *)(*a1 + 16LL);
  swift_beginAccess();
  uint64_t v7 = *(void *)(v5 + 16);
  BOOL v8 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 24);
  if (v7 == v8(a2, a3))
  {
    uint64_t v26 = &type metadata for SymmetricKey;
    unint64_t v27 = sub_186F33F14();
    v25[0] = v5;
    goto LABEL_18;
  }

  unint64_t v10 = *v6;
  uint64_t v11 = a2;
  if (v8(a2, a3) >= (uint64_t)v10)
  {
    uint64_t v16 = v8(a2, a3);
    if ((v16 & 0x8000000000000000LL) == 0)
    {
      unint64_t v10 = v16;
      if (v16)
      {
        uint64_t v11 = sub_186F87CE8();
        *(void *)(v11 + 16) = v10;
        bzero((void *)(v11 + 32), v10);
      }

      else
      {
        uint64_t v11 = MEMORY[0x18961AFE8];
        unint64_t v10 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      }

      size_t v13 = *(void *)(v5 + 16);
      if (v10 >= v13)
      {
        if (v10 <= *(void *)(v11 + 24) >> 1)
        {
          if (!v13)
          {
LABEL_17:
            swift_release();
            uint64_t v26 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53B8);
            unint64_t v27 = sub_186F3A490((unint64_t *)&qword_18C4B53C0, &qword_18C4B53B8, MEMORY[0x189607200]);
            v25[0] = v11;
            goto LABEL_18;
          }

LABEL_16:
          memcpy((void *)(v11 + 32), (const void *)(v5 + 32), v13);
          goto LABEL_17;
        }

  sub_186F87EEC();
  swift_bridgeObjectRelease();
  sub_186F87CDC();
  sub_186F87BEC();
  swift_bridgeObjectRelease();
  sub_186F87BEC();
  uint64_t v36 = MEMORY[0x18959E618](0x444E452D2D2D2D2DLL, 0xE900000000000020LL);
  uint64_t v38 = v37;
  char v40 = v39;
  unsigned __int8 v42 = v41;
  uint64_t v44 = *((void *)v22 + 2);
  uint64_t v43 = *((void *)v22 + 3);
  if (v44 >= v43 >> 1) {
    uint64_t v22 = sub_186F3CDBC((char *)(v43 > 1), v44 + 1, 1, v22);
  }
  *((void *)v22 + 2) = v44 + 1;
  uint64_t v45 = &v22[32 * v44];
  *((void *)v45 + 4) = v36;
  *((void *)v45 + 5) = v38;
  *((void *)v45 + 6) = v40;
  *((void *)v45 + 7) = v42;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6B0DE8);
  sub_186F3A490(&qword_18C6B0DF0, &qword_18C6B0DE8, MEMORY[0x189618470]);
  sub_186F435C0();
  uint64_t v46 = sub_186F87CAC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v46;
}

  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    __break(1u);
  }

          swift_unknownObjectRelease();
          sub_186F5CC48( (uint64_t)v18,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
          return sub_186F5CC48( (uint64_t)v18,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
        }

        sub_186F6CBD8();
        swift_allocError();
        *uint64_t v17 = 0;
      }

      swift_willThrow();
      goto LABEL_16;
    }
  }

  sub_186F36690();
  swift_allocError();
  *uint64_t v7 = 1;
  swift_willThrow();
  return sub_186F5CC48( (uint64_t)v18,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
}

  *(void *)a2 = v6;
  *(_OWORD *)(a2 + 8) = v13;
}

    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (v8 > v4)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (v7[0])
  {
    if (v6 == v7[0])
    {
      *(void *)(v5 + 16) = v8;
      return v5;
    }

    goto LABEL_19;
  }

LABEL_22:
        size_t v21 = v13;
        uint64_t v22 = sub_186F3CB8C((char *)1, v10, 1, (char *)v11);
        size_t v13 = v21;
        uint64_t v11 = (uint64_t)v22;
        if (!v21) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }

  __break(1u);
LABEL_23:
  swift_once();
LABEL_5:
  uint64_t v32 = off_18C4B5018;
  uint64_t v72 = off_18C4B5018;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v28, v67, v13);
  swift_retain();
  SymmetricKey.init<A>(data:)((uint64_t)v28, v13, v73);
  if (!(_DWORD)a5)
  {
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }

  uint64_t v53 = a10;
  uint64_t v67 = v73[0];
  uint64_t v55 = (uint64_t)v73 + 1;
  swift_retain();
  LOBYTE(v33) = 1;
  uint64_t v34 = v59;
  while (1)
  {
    v73[0] = v67;
    swift_retain();
    HMAC.init(key:)(v73, v64, v66);
    v73[0] = (uint64_t)v32;
    uint64_t v35 = sub_186F40C80();
    HMAC.update<A>(data:)((uint64_t)v73, v22, (uint64_t)&type metadata for SecureBytes, v35);
    uint64_t v37 = v60;
    uint64_t v36 = v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v19, v63, v61);
    uint64_t v38 = v65;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v19, 1LL, v65) == 1)
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v19, v36);
    }

    else
    {
      uint64_t v39 = (uint64_t)v54;
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v54, v19, v38);
      HMAC.update<A>(data:)(v39, v22, v38, v53);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v39, v38);
    }

    LOBYTE(v73[0]) = v33;
    sub_186F3C570((uint64_t)v73, v55, v22);
    char v40 = v56;
    HMAC.finalize()(v22, v56);
    uint64_t v41 = v58;
    MEMORY[0x18959EFD8](&protocol conformance descriptor for HashedAuthenticationCode<A>, v58);
    unsigned __int8 v42 = sub_186F41B44();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v40, v41);
    swift_release();
    uint64_t v43 = swift_retain();
    sub_186F51190(v43);
    swift_release();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v25, v22);
    uint64_t v33 = v33 + 1;
    uint64_t v32 = (void *)v42;
    if ((v33 & 0x100) != 0)
    {
      __break(1u);
      break;
    }
  }

  uint64_t v44 = v52;
  if (v52 < 0) {
    goto LABEL_25;
  }
  uint64_t v45 = (uint64_t)v72;
  swift_beginAccess();
  uint64_t v46 = *(void *)(v45 + 16);
  uint64_t v47 = sub_186F51450(0LL, v44, v46, v45);
  if ((v48 & 1) != 0) {
    uint64_t v49 = v46;
  }
  else {
    uint64_t v49 = v47;
  }
  if ((v49 | v46) < 0) {
    goto LABEL_26;
  }
  if (v46 < v49) {
    goto LABEL_27;
  }
  uint64_t v68 = 0LL;
  unint64_t v69 = v49;
  unint64_t v70 = v45;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B5150);
  type metadata accessor for SecureBytes.Backing();
  sub_186F410F4();
  sub_186F87FD0();
  swift_release();
  swift_release();
  uint64_t result = swift_release_n();
  *uint64_t v51 = v71;
  return result;
}

LABEL_21:
      __break(1u);
      goto LABEL_22;
    }

    __break(1u);
    goto LABEL_22;
  }

  if (v9 != a2 - a1)
  {
LABEL_10:
    sub_186F35D6C();
    swift_allocError();
    size_t v14 = 1;
    *(_DWORD *)size_t v13 = 1;
    goto LABEL_11;
  }

  uint64_t result = a4();
  if (!result) {
    goto LABEL_21;
  }
  uint64_t v11 = cckem_import_privkey();
  if (v11)
  {
    uint64_t v12 = v11;
    sub_186F35D6C();
    swift_allocError();
    size_t v14 = 0;
    *(_DWORD *)size_t v13 = v12;
LABEL_11:
    *(_BYTE *)(v13 + 4) = v14;
    return swift_willThrow();
  }

  uint64_t result = cckem_public_ctx();
  if (!result) {
    goto LABEL_23;
  }
  uint64_t result = a4();
  if (!result)
  {
LABEL_24:
    __break(1u);
    return result;
  }

  uint64_t result = cckem_import_pubkey();
  if ((_DWORD)result)
  {
    uint64_t v15 = result;
    sub_186F35D6C();
    swift_allocError();
    size_t v14 = 0;
    *(_DWORD *)size_t v13 = v15;
    goto LABEL_11;
  }

  return result;
}

  __break(1u);
  return result;
}

LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v12 = v8(a2, a3);
  if (v12 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }

  size_t v14 = v12;
  if (v12)
  {
    uint64_t v15 = sub_186F87CE8();
    *(void *)(v15 + 16) = v14;
    bzero((void *)(v15 + 32), v14);
  }

  else
  {
    uint64_t v15 = MEMORY[0x18961AFE8];
  }

  uint64_t v24 = v15;
  sub_186F3BBE0(v5 + 32, v5 + 32 + *(void *)(v5 + 16), (uint64_t)&v24, a2, a3);
  swift_release();
  sub_186F3A3A0(v23, (uint64_t)v25);
  swift_bridgeObjectRelease();
LABEL_18:
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(a3 + 32);
  type metadata accessor for HMAC(0LL, a2, a3, v9);
  v17(a2, a3);
  __swift_project_boxed_opaque_existential_1(v25, (uint64_t)v26);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53B8);
  sub_186F879B8();
  uint64_t v19 = sub_186F3A490((unint64_t *)&qword_18C4B5138, &qword_18C4B53B8, MEMORY[0x1896071F8]);
  HashFunction.update<A>(data:)((uint64_t)v23, a2, v18, a3, v19);
  swift_bridgeObjectRelease();
  v17(a2, a3);
  __swift_project_boxed_opaque_existential_1(v25, (uint64_t)v26);
  sub_186F879B8();
  HashFunction.update<A>(data:)((uint64_t)v23, a2, v18, a3, v19);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  return swift_bridgeObjectRelease();
}

          __break(1u);
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }

        if (v19 <= v8) {
          goto LABEL_72;
        }
      }

      if (v19 < 0) {
        goto LABEL_73;
      }
    }

    uint64_t v22 = v19 - v13;
    if (__OFSUB__(v19, v13)) {
      goto LABEL_74;
    }
    if (v22 < 0) {
      goto LABEL_75;
    }
    uint64_t v23 = v5 - v13;
    if (__OFSUB__(v5, v13)) {
      goto LABEL_76;
    }
    if (!v22 || v23 < 0 || (uint64_t v18 = v5, v23 >= v22))
    {
      uint64_t v18 = v19;
      if (__OFADD__(v13, v22)) {
        goto LABEL_80;
      }
      if (v5 < v19) {
        goto LABEL_77;
      }
    }

    if (v18 <= v8) {
      goto LABEL_78;
    }
    if (v13 != v19)
    {
      if (v13 >= v19) {
        goto LABEL_82;
      }
      uint64_t v24 = *(void *)(a2 + 48 * v13 + 8);
      if (v17 >= v24) {
        goto LABEL_83;
      }
      uint64_t v25 = v8 + 2;
      if (v8 + 2 != v19)
      {
        if (v8 + 2 >= v19) {
          goto LABEL_85;
        }
        uint64_t v26 = (void *)(v41 + 48 * v8);
        while (v25 > v8)
        {
          if (v17 >= *v26) {
            goto LABEL_67;
          }
          ++v25;
          v26 += 6;
          if (v19 == v25) {
            goto LABEL_40;
          }
        }

        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }

  uint64_t v19 = v49;
  if (__OFSUB__(v49, v47)) {
    goto LABEL_45;
  }
  if (v49 == v47) {
    goto LABEL_15;
  }
  uint64_t v20 = *((void *)v3 + 2);
  size_t v21 = v48;
  uint64_t v43 = v46;
  uint64_t v44 = v47;
  uint64_t v22 = sub_186F87250(v45, v49, v46, v47, v48, v5);
  uint64_t v24 = *v23;
  uint64_t result = ((uint64_t (*)(_BYTE *, void))v22)(v45, 0LL);
  uint64_t v25 = v19 - 1;
  if (v19 < 1) {
    goto LABEL_47;
  }
  uint64_t v26 = v21;
  unsigned __int8 v42 = (71 - __clz(v21)) >> 3;
  if (v42 < v19) {
    goto LABEL_47;
  }
  unint64_t v27 = v44;
  uint64_t v28 = -v44;
LABEL_26:
  while (1)
  {
    uint64_t v29 = *((void *)v3 + 3);
    uint64_t v30 = v29 >> 1;
    uint64_t v31 = v20 + 1;
    uint64_t v32 = (_BYTE *)(v20 - v30);
    if (v20 < v30) {
      goto LABEL_28;
    }
LABEL_25:
    *((void *)v3 + 2) = v20;
  }

  uint64_t v38 = v3;
  uint64_t v39 = v26;
  uint64_t result = (uint64_t)sub_186F3CB8C((char *)(v29 > 1), v20 + 1, 1, v38);
  uint64_t v26 = v39;
  unint64_t v27 = v44;
  unint64_t v3 = (char *)result;
  uint64_t v30 = *(void *)(result + 24) >> 1;
  uint64_t v32 = (_BYTE *)(v20 - v30);
  if (v20 >= v30) {
    goto LABEL_25;
  }
LABEL_28:
  v3[v20 + 32] = v24;
  if (__OFSUB__(v25, v27)) {
    goto LABEL_46;
  }
  char v40 = v30;
  if (v25 == v27)
  {
LABEL_42:
    *((void *)v3 + 2) = v31;
    goto LABEL_15;
  }

  uint64_t v11 = v20;
  unint64_t v6 = 0LL;
  uint64_t v41 = (_BYTE *)(v28 + v25);
  uint64_t v33 = v32 + 1;
  uint64_t v34 = v3 + 33;
  while (1)
  {
    uint64_t v35 = v26;
    uint64_t v36 = sub_186F87250(v45, v25 + v6, v43, v27, v26, v32);
    uint64_t v24 = *v37;
    uint64_t result = ((uint64_t (*)(_BYTE *, void))v36)(v45, 0LL);
    if (v25 > v42 || v25 + v6 < 1) {
      break;
    }
    uint64_t v26 = v35;
    if (v33 == (_BYTE *)v6)
    {
      uint64_t v25 = v25 + v6 - 1;
      uint64_t v28 = -v44;
      uint64_t v20 = v40;
      unint64_t v27 = v44;
      *((void *)v3 + 2) = v40;
      goto LABEL_26;
    }

    v34[v11] = v24;
    unint64_t v27 = v44;
    if (__OFSUB__(v25 + v6 - 1, v44)) {
      goto LABEL_44;
    }
    --v6;
    ++v34;
    uint64_t v32 = v41;
    if (!&v41[v6]) {
      goto LABEL_41;
    }
  }

  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

uint64_t sub_186F3BBE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  size_t v13 = &v15[-v12];
  static HashFunction.hash(bufferPointer:)(a1, a2, a4, a5);
  uint64_t v16 = a3;
  swift_getAssociatedConformanceWitness();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B5280);
  sub_186F879B8();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t sub_186F3BD14@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char **a3@<X2>, char **a4@<X8>)
{
  if (result)
  {
    unint64_t v6 = (const void *)result;
    BOOL v8 = *a3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      BOOL v8 = sub_186F3CB8C(0LL, *((void *)v8 + 2), 0, v8);
    }
    *a3 = v8;
    memcpy(v8 + 32, v6, a2 - (void)v6);
    unint64_t v10 = *a3;
    a4[3] = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53B8);
    a4[4] = (char *)sub_186F3A490((unint64_t *)&qword_18C4B53C0, &qword_18C4B53B8, MEMORY[0x189607200]);
    *a4 = v10;
    return sub_186F87CDC();
  }

  else
  {
    __break(1u);
  }

  return result;
}

char *sub_186F3BDDC@<X0>(char *result@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  if (!result)
  {
    uint64_t v5 = MEMORY[0x18961AFE8];
    goto LABEL_10;
  }

  __int128 v4 = result;
  uint64_t v5 = MEMORY[0x18961AFE8];
  uint64_t v6 = a2 - result;
  if (a2 == result)
  {
LABEL_10:
    *a3 = v5;
    return result;
  }

  uint64_t v11 = MEMORY[0x18961AFE8];
  uint64_t result = sub_186F3D0BC(0LL, v6 & ~(v6 >> 63), 0);
  if (v6 >= 1)
  {
    uint64_t v5 = v11;
    unint64_t v7 = *(void *)(v11 + 16);
    do
    {
      char v9 = *v4++;
      char v8 = v9;
      uint64_t v12 = v5;
      unint64_t v10 = *(void *)(v5 + 24);
      if (v7 >= v10 >> 1)
      {
        uint64_t result = sub_186F3D0BC((char *)(v10 > 1), v7 + 1, 1);
        uint64_t v5 = v12;
      }

      *(void *)(v5 + 16) = v7 + 1;
      *(_BYTE *)(v5 + v7++ + 32) = v8 ^ 0x36;
      --v6;
    }

    while (v6);
    goto LABEL_10;
  }

  __break(1u);
  return result;
}

char *sub_186F3BED4@<X0>(char *result@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  if (!result)
  {
    uint64_t v5 = MEMORY[0x18961AFE8];
    goto LABEL_10;
  }

  __int128 v4 = result;
  uint64_t v5 = MEMORY[0x18961AFE8];
  uint64_t v6 = a2 - result;
  if (a2 == result)
  {
LABEL_10:
    *a3 = v5;
    return result;
  }

  uint64_t v11 = MEMORY[0x18961AFE8];
  uint64_t result = sub_186F3D0BC(0LL, v6 & ~(v6 >> 63), 0);
  if (v6 >= 1)
  {
    uint64_t v5 = v11;
    unint64_t v7 = *(void *)(v11 + 16);
    do
    {
      char v9 = *v4++;
      char v8 = v9;
      uint64_t v12 = v5;
      unint64_t v10 = *(void *)(v5 + 24);
      if (v7 >= v10 >> 1)
      {
        uint64_t result = sub_186F3D0BC((char *)(v10 > 1), v7 + 1, 1);
        uint64_t v5 = v12;
      }

      *(void *)(v5 + 16) = v7 + 1;
      *(_BYTE *)(v5 + v7++ + 32) = v8 ^ 0x5C;
      --v6;
    }

    while (v6);
    goto LABEL_10;
  }

  __break(1u);
  return result;
}

uint64_t static HMAC.authenticationCode<A>(for:using:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v14 = type metadata accessor for HMAC(0LL, a3, a5, a4);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v19 - v16;
  uint64_t v20 = *a2;
  swift_retain();
  HMAC.init(key:)(&v20, a3, a5);
  HMAC.update<A>(data:)(a1, v14, a4, a6);
  HMAC.finalize()(v14, a7);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t HMAC.update<A>(data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v11 = &v14[-v10];
  sub_186F87910();
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v15 = *(void *)(a2 + 16);
  uint64_t v16 = a3;
  uint64_t v17 = v12;
  uint64_t v18 = a4;
  uint64_t v19 = v4;
  swift_getAssociatedConformanceWitness();
  sub_186F87CA0();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
}

uint64_t HMAC.finalize()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v21 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](a1);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(v4 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = MEMORY[0x1895F8858](v10);
  uint64_t v15 = (char *)&v20 - v14;
  MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v20 - v16;
  (*(void (**)(uint64_t, uint64_t))(v7 + 48))(v3, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v6, v2, v3);
  uint64_t v22 = v3;
  uint64_t v23 = v7;
  uint64_t v24 = v6;
  swift_getAssociatedConformanceWitness();
  sub_186F879B8();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v17, AssociatedTypeWitness);
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v18(v12, v15, AssociatedTypeWitness);
  v18(v20, v12, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v6, v3);
}

uint64_t static HMAC.isValidAuthenticationCode<A>(_:authenticating:using:)( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v16 = *a3;
  uint64_t v13 = type metadata accessor for HashedAuthenticationCode(0LL, a4, a6, a4);
  uint64_t v14 = MEMORY[0x18959EFD8](&protocol conformance descriptor for HashedAuthenticationCode<A>, v13);
  return sub_186F3B6F0(a1, a2, &v16, a4, v13, a5, a6, v14, a7) & 1;
}

uint64_t static HMAC.isValidAuthenticationCode<A, B>(_:authenticating:using:)( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = *a3;
  return sub_186F3B6F0(a1, a2, &v10, a4, a5, a6, a7, a8, a9) & 1;
}

uint64_t sub_186F3C474()
{
  return sub_186F879B8();
}

uint64_t sub_186F3C570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a3 + 24) + 40LL))( a1,  a2,  *(void *)(a3 + 16));
}

uint64_t sub_186F3C59C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a4 - 8);
  uint64_t v9 = MEMORY[0x1895F8858]();
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))(v12 + 40))(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(a5 + 48))(a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, a4);
}

uint64_t HashedAuthenticationCode.byteCount.getter()
{
  return sub_186F3D504();
}

uint64_t HashedAuthenticationCode.description.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v4 = (char *)&v10 - v3;
  uint64_t v13 = 0LL;
  unint64_t v14 = 0xE000000000000000LL;
  sub_186F87EEC();
  swift_bridgeObjectRelease();
  uint64_t v13 = 0x7469772043414D48LL;
  unint64_t v14 = 0xEA00000000002068LL;
  sub_186F88024();
  sub_186F87BEC();
  swift_bridgeObjectRelease();
  sub_186F87BEC();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  uint64_t result = sub_186F87CF4();
  uint64_t v6 = *(void *)(result + 16);
  if (v6 + 0x4000000000000000LL < 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  size_t v7 = 2 * v6;
  if (2 * v6 < 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }

  uint64_t v8 = result;
  if (v6)
  {
    uint64_t v9 = sub_186F87CE8();
    *(void *)(v9 + 16) = v7;
    bzero((void *)(v9 + 32), v7);
  }

  else
  {
    uint64_t v9 = MEMORY[0x18961AFE8];
  }

  uint64_t v11 = 0LL;
  uint64_t v12 = v9;
  sub_186F87CDC();
  sub_186F3D3B8(v8, &v12, &v11);
  swift_bridgeObjectRelease();
  sub_186F87CDC();
  sub_186F87BC8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_186F87BEC();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t HashedAuthenticationCode.withUnsafeBytes<A>(_:)()
{
  return sub_186F879B8();
}

uint64_t HashedAuthenticationCode.hash(into:)()
{
  return sub_186F87B2C();
}

uint64_t HashedAuthenticationCode.hashValue.getter()
{
  return sub_186F88018();
}

uint64_t sub_186F3CA00()
{
  return sub_186F3D504();
}

uint64_t sub_186F3CA14()
{
  return sub_186F88018();
}

uint64_t sub_186F3CA54()
{
  return HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
}

uint64_t sub_186F3CA78@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = MessageAuthenticationCode.makeIterator()();
  uint64_t v7 = v6;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v2, a1);
  *a2 = v5;
  a2[1] = v7;
  return result;
}

uint64_t sub_186F3CAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_186F3D0D8(v2, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v2, a1);
  return v4;
}

uint64_t sub_186F3CB34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = MEMORY[0x18959EFD8](&protocol conformance descriptor for HashedAuthenticationCode<A>, a3);
  return static MessageAuthenticationCode.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t type metadata accessor for HMAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HMAC);
}

char *sub_186F3CB8C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_18C4B5430);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v12, v13, v8);
  }

  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_186F3CC74()
{
  return sub_186F3C474();
}

uint64_t sub_186F3CC94(uint64_t a1, uint64_t a2)
{
  return sub_186F3C59C(a1, a2, v2[4], v2[2], v2[3]);
}

char *sub_186F3CCB0(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_186F3CCC8(a1, a2, a3, a4, &qword_18C4B52B8);
}

char *sub_186F3CCBC(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_186F3CCC8(a1, a2, a3, a4, &qword_18C4B52C0);
}

char *sub_186F3CCC8(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v8 = a2;
  }

  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    size_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    size_t v11 = (char *)MEMORY[0x18961AFE8];
  }

  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 8 * v9);
  }

  swift_bridgeObjectRelease();
  return v11;
}

char *sub_186F3CDBC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_18C6B0D40);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

char *sub_186F3CEBC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B52B0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy();
  }

  swift_bridgeObjectRelease();
  return v10;
}

char *sub_186F3CFD4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_18C4B5430);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }

  else
  {
    uint64_t v10 = (char *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v12, v13, v8);
  }

  swift_release();
  return v10;
}

char *sub_186F3D0BC(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_186F3CFD4(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_186F3D0DC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v6 = (a4 >> 1) - a3;
  if (a4 >> 1 != a3)
  {
    if ((uint64_t)(a4 >> 1) > a3)
    {
      uint64_t result = swift_unknownObjectRetain();
      uint64_t v12 = *a6;
      uint64_t v13 = (unsigned __int8 *)(a2 + a3);
      while (v12 + 0x4000000000000000LL >= 0)
      {
        unsigned int v15 = *v13++;
        char v14 = v15;
        int v16 = (v15 >> 4) + 87;
        int v17 = (v15 >> 4) | 0x30;
        if (v15 <= 0x9F) {
          char v18 = v17;
        }
        else {
          char v18 = v16;
        }
        uint64_t v19 = *a5;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        *a5 = v19;
        if ((result & 1) != 0)
        {
          unint64_t v20 = 2 * v12;
          if (2 * v12 < 0) {
            goto LABEL_20;
          }
        }

        else
        {
          uint64_t result = (uint64_t)sub_186F52EB0(v19);
          uint64_t v19 = result;
          unint64_t v20 = 2 * v12;
          if (2 * v12 < 0)
          {
LABEL_20:
            __break(1u);
            return swift_unknownObjectRelease();
          }
        }

        unint64_t v21 = *(void *)(v19 + 16);
        if (v20 >= v21) {
          goto LABEL_24;
        }
        *(_BYTE *)(v19 + 32 + v20) = v18;
        uint64_t v22 = *a6;
        if (*a6 + 0x4000000000000000LL < 0) {
          goto LABEL_25;
        }
        if (v22 < 0) {
          goto LABEL_26;
        }
        uint64_t v23 = (2 * v22) | 1;
        if ((v14 & 0xFu) <= 9) {
          char v24 = v14 & 0xF | 0x30;
        }
        else {
          char v24 = (v14 & 0xF) + 87;
        }
        *(_BYTE *)(v19 + 32 + v23) = v24;
        *a5 = v19;
        uint64_t v12 = v22 + 1;
        *a6 = v22 + 1;
        if (!--v6) {
          return swift_unknownObjectRelease();
        }
      }

      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_186F3D230(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = (void *)(a1 + 16);
  swift_retain();
  uint64_t result = swift_beginAccess();
  uint64_t v20 = a1;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = 32LL;
  while (1)
  {
    if (v9 - 32 == v8) {
      return swift_release();
    }
    uint64_t v10 = v9 - 31;
    if (__OFADD__(v9 - 32, 1LL)) {
      break;
    }
    uint64_t v11 = *a3;
    if (*a3 + 0x4000000000000000LL < 0) {
      goto LABEL_24;
    }
    unsigned int v12 = *(unsigned __int8 *)(v20 + v9);
    if (v12 <= 0x9F) {
      char v13 = (*(_BYTE *)(v20 + v9) >> 4) | 0x30;
    }
    else {
      char v13 = (*(_BYTE *)(v20 + v9) >> 4) + 87;
    }
    uint64_t v14 = *a2;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v14;
    if ((result & 1) != 0)
    {
      unint64_t v15 = 2 * v11;
      if (2 * v11 < 0) {
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t result = (uint64_t)sub_186F52EB0(v14);
      uint64_t v14 = result;
      unint64_t v15 = 2 * v11;
      if (2 * v11 < 0)
      {
LABEL_21:
        __break(1u);
        return swift_release();
      }
    }

    unint64_t v16 = *(void *)(v14 + 16);
    if (v15 >= v16) {
      goto LABEL_25;
    }
    *(_BYTE *)(v14 + 32 + v15) = v13;
    uint64_t v17 = *a3;
    if (*a3 + 0x4000000000000000LL < 0) {
      goto LABEL_26;
    }
    if (v17 < 0) {
      goto LABEL_27;
    }
    uint64_t v18 = (2 * v17) | 1;
    if ((v12 & 0xF) <= 9) {
      char v19 = v12 & 0xF | 0x30;
    }
    else {
      char v19 = (v12 & 0xF) + 87;
    }
    *(_BYTE *)(v14 + 32 + v18) = v19;
    *a2 = v14;
    *a3 = v17 + 1;
    uint64_t v8 = *v6;
    ++v9;
    if (__OFSUB__(*v6, v10)) {
      goto LABEL_28;
    }
  }

  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_186F3D3B8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v16 = *(void *)(result + 16);
  if (v16)
  {
    uint64_t v5 = result;
    uint64_t result = sub_186F87CDC();
    uint64_t v6 = 0LL;
    uint64_t v7 = *a3;
    while (v7 + 0x4000000000000000LL >= 0)
    {
      unsigned int v8 = *(unsigned __int8 *)(v5 + v6 + 32);
      if (v8 <= 0x9F) {
        char v9 = (*(_BYTE *)(v5 + v6 + 32) >> 4) | 0x30;
      }
      else {
        char v9 = (*(_BYTE *)(v5 + v6 + 32) >> 4) + 87;
      }
      uint64_t v10 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v10;
      if ((result & 1) != 0)
      {
        unint64_t v11 = 2 * v7;
        if (2 * v7 < 0) {
          goto LABEL_19;
        }
      }

      else
      {
        uint64_t result = (uint64_t)sub_186F52EB0(v10);
        uint64_t v10 = result;
        unint64_t v11 = 2 * v7;
        if (2 * v7 < 0)
        {
LABEL_19:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }

      unint64_t v12 = *(void *)(v10 + 16);
      if (v11 >= v12) {
        goto LABEL_23;
      }
      *(_BYTE *)(v10 + 32 + v11) = v9;
      uint64_t v13 = *a3;
      if (*a3 + 0x4000000000000000LL < 0) {
        goto LABEL_24;
      }
      if (v13 < 0) {
        goto LABEL_25;
      }
      uint64_t v14 = (2 * v13) | 1;
      ++v6;
      if ((v8 & 0xF) <= 9) {
        char v15 = v8 & 0xF | 0x30;
      }
      else {
        char v15 = (v8 & 0xF) + 87;
      }
      *(_BYTE *)(v10 + 32 + v14) = v15;
      *a2 = v10;
      uint64_t v7 = v13 + 1;
      *a3 = v13 + 1;
      if (v16 == v6) {
        return swift_bridgeObjectRelease();
      }
    }

    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }

  return result;
}

uint64_t sub_186F3D504()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))( AssociatedTypeWitness,  AssociatedConformanceWitness);
}

void sub_186F3D580()
{
}

uint64_t sub_186F3D590(void *a1, uint64_t a2)
{
  a1[1] = MEMORY[0x18959EFD8](&protocol conformance descriptor for HashedAuthenticationCode<A>);
  a1[2] = MEMORY[0x18959EFD8](&protocol conformance descriptor for HashedAuthenticationCode<A>, a2);
  a1[3] = MEMORY[0x18959EFD8](&protocol conformance descriptor for HashedAuthenticationCode<A>, a2);
  uint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for HashedAuthenticationCode<A>, a2);
  a1[4] = result;
  return result;
}

void sub_186F3D5FC()
{
}

uint64_t sub_186F3D60C()
{
  return sub_186F3A490((unint64_t *)&qword_18C4B5270, &qword_18C4B5278, MEMORY[0x189619678]);
}

uint64_t sub_186F3D638()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *sub_186F3D6A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = v7 + v8;
  unint64_t v11 = ((v7 + v8) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }

  else
  {
    char v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, *(void *)(a3 + 16));
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)(((unint64_t)a2 + v10) & v9), v5);
  }

  return v4;
}

uint64_t sub_186F3D758(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t, uint64_t))(v4 + 8);
  v6(a1, v3);
  return v6( (*(void *)(v4 + 64) + a1 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80),  v3);
}

unint64_t sub_186F3D7C0(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v7( (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  v5);
  return a1;
}

unint64_t sub_186F3D82C(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v7( (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  v5);
  return a1;
}

unint64_t sub_186F3D898(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v7( (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  v5);
  return a1;
}

unint64_t sub_186F3D904(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v7( (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  (*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80),  v5);
  return a1;
}

uint64_t sub_186F3D970(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_186F3DA30 + 4 * byte_186F89690[(v7 - 1)]))();
}

void sub_186F3DA80(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t sub_186F3DC40()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *sub_186F3DCBC(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7 && *(void *)(v5 + 64) <= 0x18uLL && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }

  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }

  return a1;
}

uint64_t sub_186F3DD50(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))( a1,  AssociatedTypeWitness);
}

uint64_t sub_186F3DD9C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( a1,  a2,  AssociatedTypeWitness);
  return a1;
}

uint64_t sub_186F3DDF4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24LL))( a1,  a2,  AssociatedTypeWitness);
  return a1;
}

uint64_t sub_186F3DE4C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32LL))( a1,  a2,  AssociatedTypeWitness);
  return a1;
}

uint64_t sub_186F3DEA4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40LL))( a1,  a2,  AssociatedTypeWitness);
  return a1;
}

uint64_t sub_186F3DEFC(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v5 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if ((_DWORD)v6) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, AssociatedTypeWitness);
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if ((_DWORD)v7)
  {
    __asm { BR              X11 }
  }

  return (v6 + v11 + 1);
}

void sub_186F3E03C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    unsigned int v9 = 0u;
  }

  else if (v8 <= 3)
  {
    unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      unsigned int v9 = 4u;
    }

    else if (v11 >= 0x100)
    {
      unsigned int v9 = 2;
    }

    else
    {
      unsigned int v9 = v11 > 1;
    }
  }

  else
  {
    unsigned int v9 = 1u;
  }

  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }

        else
        {
          *a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t sub_186F3E214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for HMAC(0LL, *(void *)(v4 + 16), *(void *)(v4 + 32), a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(v7 + 24) + 40LL))( a1,  a2,  *(void *)(v7 + 16));
}

uint64_t sub_186F3E274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  return sub_186F3BD14(a1, a2, *(char ***)(v3 + 16), a3);
}

uint64_t type metadata accessor for SecureBytes.Backing()
{
  uint64_t result = qword_18C4B53E8;
  if (!qword_18C4B53E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_186F3E2C8()
{
  return swift_initClassMetadata2();
}

size_t sub_186F3E304(int64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (char *)*v2;
  size_t result = _swift_stdlib_malloc_size(*v2);
  if ((uint64_t)(result - 32) < a1)
  {
    if (a1 < 0)
    {
      __break(1u);
    }

    else if (!HIDWORD(a1))
    {
      if ((_DWORD)a1)
      {
        unsigned int v6 = (a1 - 1) | ((a1 - 1) >> 1) | ((((_DWORD)a1 - 1) | ((a1 - 1) >> 1)) >> 2);
        unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
        int v8 = v7 | HIWORD(v7);
        if (v8 == -1) {
          uint64_t v9 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v9 = (v8 + 1);
        }
      }

      else
      {
        uint64_t v9 = 1LL;
      }

      type metadata accessor for SecureBytes.Backing();
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = 0LL;
      *(void *)(v10 + 24) = v9;
      size_t result = swift_beginAccess();
      uint64_t v11 = *((void *)v4 + 2);
      if ((v11 & 0x8000000000000000LL) == 0)
      {
        sub_186F3F07C(v4, 0LL, v11);
        size_t result = swift_release();
        *uint64_t v2 = (const void *)v10;
        return result;
      }

uint64_t sub_186F3E3EC(uint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  if (!a2)
  {
    uint64_t v6 = 0LL;
    goto LABEL_14;
  }

  uint64_t v6 = a3;
  if (!a3)
  {
LABEL_14:
    *uint64_t v5 = a4;
    v5[1] = v6;
    return v6;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    size_t result = swift_beginAccess();
    uint64_t v8 = *(void *)(a4 + 16);
    if (v8)
    {
      *a2 = *(_BYTE *)(a4 + 32);
      uint64_t v9 = v6 - 1;
      if (v6 != 1)
      {
        uint64_t v10 = 0LL;
        while (v9 != v10)
        {
          if (__OFSUB__(v8, v10 + 1)) {
            goto LABEL_16;
          }
          if (v8 - 1 == v10) {
            goto LABEL_13;
          }
          a2[v10 + 1] = *(_BYTE *)(a4 + 33 + v10);
          if (v9 == ++v10) {
            goto LABEL_14;
          }
        }

        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }

    else
    {
LABEL_13:
      uint64_t v6 = v8;
    }

    goto LABEL_14;
  }

uint64_t sub_186F3E4C0()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  off_18C4B5018 = (_UNKNOWN *)result;
  return result;
}

uint64_t sub_186F3E4F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7 = sub_186F5D430(a3, a1, a2);
  uint64_t v9 = v8 + v7;
  uint64_t v11 = v8 + v10;
  if (!v8)
  {
    uint64_t v11 = 0LL;
    uint64_t v9 = 0LL;
  }

  v17[0] = v9;
  v17[1] = v11;
  swift_beginAccess();
  sub_186F6FE14(a5 + 32, v17, v16);
  int v12 = v16[0];
  if (v16[0])
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = v12;
    *(_BYTE *)(v13 + 4) = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    return swift_release();
  }

  else
  {
    uint64_t v15 = *a4;
    swift_beginAccess();
    *(void *)(v15 + 16) = 32LL;
    swift_release();
    return swift_bridgeObjectRelease();
  }

uint64_t sub_186F3E614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7 = sub_186F5D430(a3, a1, a2);
  uint64_t v9 = v8 + v7;
  uint64_t v11 = v8 + v10;
  if (!v8)
  {
    uint64_t v11 = 0LL;
    uint64_t v9 = 0LL;
  }

  v15[0] = v9;
  v15[1] = v11;
  swift_beginAccess();
  uint64_t result = sub_186F5D09C(a5 + 32, v15, v14);
  if (v14[0])
  {
    __break(1u);
  }

  else
  {
    uint64_t v13 = *a4;
    swift_beginAccess();
    *(void *)(v13 + 16) = 56LL;
    swift_release();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_186F3E6F0(const void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  char v19 = a3;
  uint64_t v12 = (uint64_t)a1 + 32;
  uint64_t v13 = (uint64_t)a1 + result;
  uint64_t v14 = result - 32;
  uint64_t result = sub_186F5F968(0LL, a2, result - 32, v12, v13);
  if ((v15 & 1) != 0) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = result;
  }
  if (v16 < 0) {
    goto LABEL_10;
  }
  v20[0] = v12;
  v20[1] = v12 + v16;
  uint64_t v21 = 0LL;
  sub_186F41354((uint64_t)v20, (uint64_t)&v21, a4, a5);
  if (!v5)
  {
    uint64_t v17 = *v19;
    uint64_t v18 = v21;
    swift_beginAccess();
    *(void *)(v17 + 16) = v18;
  }

  return sub_186F33C98(a4, a5);
}

uint64_t sub_186F3E800(const void *a1, uint64_t a2, uint64_t *a3)
{
  size_t v6 = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v7 = (uint64_t)a1 + 32;
  uint64_t v8 = (uint64_t)a1 + v6;
  size_t v9 = v6 - 32;
  uint64_t v10 = sub_186F5F968(0LL, a2, v6 - 32, v7, v8);
  if ((v11 & 1) != 0) {
    uint64_t v12 = v9;
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12 < 0) {
    goto LABEL_10;
  }
  if (!ccrng()) {
    goto LABEL_12;
  }
  if (cccurve25519_make_priv())
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }

  uint64_t v13 = *a3;
  uint64_t result = swift_beginAccess();
  *(void *)(v13 + 16) = 32LL;
  return result;
}

size_t sub_186F3E8FC(const void *a1, uint64_t a2, uint64_t *a3, char a4, uint64_t a5, uint64_t (*a6)(void))
{
  size_t result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v14 = (uint64_t)a1 + 32;
  uint64_t v15 = (uint64_t)a1 + result;
  size_t v16 = result - 32;
  size_t result = sub_186F5F968(0LL, a2, result - 32, v14, v15);
  if ((v17 & 1) != 0) {
    size_t v18 = v16;
  }
  else {
    size_t v18 = result;
  }
  if ((v18 & 0x8000000000000000LL) != 0) {
    goto LABEL_10;
  }
  v22[0] = v14;
  v22[1] = v14 + v18;
  uint64_t v21 = 0LL;
  size_t result = (size_t)sub_186F411CC(v22, &v21, a4 & 1, a5, a6);
  if (!v6)
  {
    uint64_t v19 = *a3;
    uint64_t v20 = v21;
    size_t result = swift_beginAccess();
    *(void *)(v19 + 16) = v20;
  }

  return result;
}

uint64_t sub_186F3E9E0( const void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  size_t v11 = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    __break(1u);
LABEL_12:
    __break(1u);
  }

  uint64_t v12 = (uint64_t)a1 + 32;
  uint64_t v13 = (uint64_t)a1 + v11;
  size_t v14 = v11 - 32;
  uint64_t v15 = sub_186F5F968(0LL, a2, v11 - 32, v12, v13);
  if ((v16 & 1) != 0) {
    uint64_t v17 = v14;
  }
  else {
    uint64_t v17 = v15;
  }
  if (v17 < 0) {
    goto LABEL_11;
  }
  if (!ccrng()) {
    goto LABEL_12;
  }
  int v18 = ccecdh_compute_shared_secret();
  if (v18)
  {
    int v19 = v18;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v20 = v19;
    *(_BYTE *)(v20 + 4) = 0;
    return swift_willThrow();
  }

  else
  {
    uint64_t v22 = *a3;
    uint64_t result = swift_beginAccess();
    *(void *)(v22 + 16) = a7;
  }

  return result;
}

uint64_t sub_186F3EB3C( char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v12 = &a1[_swift_stdlib_malloc_size(a1)];
  swift_retain();
  sub_186F87CDC();
  a6(a1 + 32, v12, a2, a3, a4, a5);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_186F3EBE4(const void *a1, uint64_t a2, uint64_t *a3)
{
  size_t v6 = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v7 = (uint64_t)a1 + 32;
  uint64_t v8 = (uint64_t)a1 + v6;
  size_t v9 = v6 - 32;
  uint64_t v10 = sub_186F5F968(0LL, a2, v6 - 32, v7, v8);
  if ((v11 & 1) != 0) {
    uint64_t v12 = v9;
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12 < 0) {
    goto LABEL_10;
  }
  if (!ccrng()) {
    goto LABEL_12;
  }
  if (cccurve448_make_priv())
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }

  uint64_t v13 = *a3;
  uint64_t result = swift_beginAccess();
  *(void *)(v13 + 16) = 56LL;
  return result;
}

uint64_t sub_186F3ECE0( const void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(void *, uint64_t *, uint64_t))
{
  uint64_t result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v12 = (uint64_t)a1 + 32;
  uint64_t v13 = (uint64_t)a1 + result;
  uint64_t v14 = result - 32;
  uint64_t result = sub_186F5F968(0LL, a2, result - 32, v12, v13);
  if ((v15 & 1) != 0) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = result;
  }
  if (v16 < 0) {
    goto LABEL_10;
  }
  v19[0] = v12;
  v19[1] = v12 + v16;
  uint64_t v20 = 0LL;
  uint64_t result = a5(v19, &v20, a4);
  if (!v5)
  {
    uint64_t v17 = *a3;
    uint64_t v18 = v20;
    uint64_t result = swift_beginAccess();
    *(void *)(v17 + 16) = v18;
  }

  return result;
}

uint64_t sub_186F3EDB8( const void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, void **a6, uint64_t a7)
{
  uint64_t result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v14 = (uint64_t)a1 + 32;
    uint64_t v15 = (uint64_t)a1 + result;
    uint64_t v16 = result - 32;
    uint64_t result = sub_186F5F968(0LL, a2, result - 32, v14, v15);
    if ((v17 & 1) != 0) {
      uint64_t v18 = v16;
    }
    else {
      uint64_t v18 = result;
    }
    if ((v18 & 0x8000000000000000LL) == 0)
    {
      swift_retain();
      init_ccec_ctx_full();
      swift_beginAccess();
      sub_186F6E8E0(a5 + 32, a5 + 32 + *(void *)(a5 + 16), a6);
      uint64_t v19 = *a3;
      swift_beginAccess();
      *(void *)(v19 + 16) = a7;
      return swift_release_n();
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_186F3EECC(const void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  uint64_t result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v12 = (uint64_t)a1 + 32;
  uint64_t v13 = (uint64_t)a1 + result;
  uint64_t v14 = result - 32;
  uint64_t result = sub_186F5F968(0LL, a2, result - 32, v12, v13);
  if ((v15 & 1) != 0) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = result;
  }
  if (v16 < 0) {
    goto LABEL_10;
  }
  uint64_t result = a6();
  if (result)
  {
    cckem_full_ctx_init();
    uint64_t result = cckem_generate_key();
    if (!(_DWORD)result)
    {
      uint64_t v17 = *a3;
      uint64_t result = swift_beginAccess();
      *(void *)(v17 + 16) = a5;
      return result;
    }

    goto LABEL_11;
  }

LABEL_12:
  __break(1u);
  return result;
}

    sub_186F564C8();
    swift_allocError();
    *uint64_t v22 = 1;
    swift_willThrow();
    goto LABEL_13;
  }

  if (!*(void *)(v9 + 16) || (sub_186F56938(v10), (v14 & 1) == 0))
  {

    swift_bridgeObjectRelease();
    goto LABEL_12;
  }

  uint64_t v29 = a3;
  swift_unknownObjectRetain();

  swift_bridgeObjectRelease();
LABEL_9:
  swift_unknownObjectRetain();
  objc_opt_self();
  char v15 = (void *)swift_dynamicCastObjCClassUnconditional();
  uint64_t v16 = sub_186F87A9C();
  uint64_t v18 = v17;

  uint64_t v19 = a2(&v30, v16, v18, 0LL, 0LL);
  if (v3)
  {
    sub_186F33C98(v16, v18);
    swift_unknownObjectRelease();
LABEL_13:

    goto LABEL_14;
  }

  uint64_t v23 = (void *)v19;
  char v24 = v20;
  uint64_t v25 = v21;
  sub_186F33C98(v16, v18);
  uint64_t v26 = v30;
  unint64_t v27 = v23;
  sub_186F33D20(v24, v25);
  sub_186F33C98(v24, v25);
  uint64_t v28 = v27;
  sub_186F33D20(v24, v25);

  sub_186F33C98(v24, v25);
  swift_unknownObjectRelease();

  *uint64_t v29 = v26;
  v29[1] = v24;
  v29[2] = v25;
  v29[3] = v28;
}

  if ((v13 & 0x8000000000000000LL) == 0)
  {
    char v15 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000LL) == 0) {
      char v15 = v6 & 0xFFFFFFFFFFFFLL;
    }
    if (v15 < v13) {
      goto LABEL_26;
    }
    uint64_t result = (v13 << 16) | 4;
    goto LABEL_17;
  }

  if ((v13 & 0x8000000000000000LL) == 0)
  {
    uint64_t v16 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000LL) == 0) {
      uint64_t v16 = v6 & 0xFFFFFFFFFFFFLL;
    }
    if (v16 < v13) {
      goto LABEL_26;
    }
    char v15 = (v13 << 16) | 4;
    goto LABEL_17;
  }

  __break(1u);
}

  uint64_t v14 = *((void *)v7 + 2);
  if ((*((void *)v7 + 3) >> 1) - v14 < v6) {
    goto LABEL_19;
  }
  memcpy(&v7[8 * v14 + 32], (const void *)(a2 + 8 * a3), 8 * v6);
  if (v6 <= 0)
  {
LABEL_16:
    *uint64_t v4 = v7;
    return;
  }

  char v15 = *((void *)v7 + 2);
  uint64_t v16 = __OFADD__(v15, v6);
  uint64_t v17 = v15 + v6;
  if (!v16)
  {
    *((void *)v7 + 2) = v17;
    goto LABEL_16;
  }

  uint64_t v14 = *((void *)v7 + 2);
  if ((*((void *)v7 + 3) >> 1) - v14 < v6) {
    goto LABEL_19;
  }
  memcpy(&v7[v14 + 32], (const void *)(a2 + a3), v6);
  if (v6 <= 0)
  {
LABEL_16:
    *uint64_t v4 = v7;
    return;
  }

  char v15 = *((void *)v7 + 2);
  uint64_t v16 = __OFADD__(v15, v6);
  uint64_t v17 = v15 + v6;
  if (!v16)
  {
    *((void *)v7 + 2) = v17;
    goto LABEL_16;
  }

uint64_t sub_186F3EFA8( const void *a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t *), uint64_t a4, uint64_t *a5)
{
  uint64_t result = _swift_stdlib_malloc_size(a1);
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v11 = (uint64_t)a1 + 32;
  uint64_t v12 = (uint64_t)a1 + result;
  uint64_t v13 = result - 32;
  uint64_t result = sub_186F5F968(0LL, a2, result - 32, v11, v12);
  if ((v14 & 1) != 0) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = result;
  }
  if (v15 < 0) {
    goto LABEL_10;
  }
  v18[0] = v11;
  v18[1] = v11 + v15;
  uint64_t v19 = 0LL;
  uint64_t result = a3(v18, &v19);
  if (!v5)
  {
    uint64_t v16 = *a5;
    uint64_t v17 = v19;
    uint64_t result = swift_beginAccess();
    *(void *)(v16 + 16) = v17;
  }

  return result;
}

char *sub_186F3F07C(char *result, uint64_t a2, uint64_t a3)
{
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v4 = v3;
  uint64_t v7 = result;
  uint64_t result = (char *)_swift_stdlib_malloc_size(result);
  if ((uint64_t)(result - 32) < a3)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  size_t v8 = _swift_stdlib_malloc_size(v4) - 32;
  size_t v9 = v4 + 2;
  uint64_t result = (char *)swift_beginAccess();
  uint64_t v10 = v4[2];
  size_t v11 = v8 - v10;
  if (__OFSUB__(v8, v10))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  BOOL v12 = __OFSUB__(a3, a2);
  size_t v13 = a3 - a2;
  if (v12)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  BOOL v12 = __OFSUB__(v11, v13);
  size_t v14 = v11 - v13;
  if (v12)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if ((v14 & 0x8000000000000000LL) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t result = (char *)_swift_stdlib_malloc_size(v4);
  if ((uint64_t)(result - 32) < v10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t result = (char *)memmove((char *)v4 + v10 + 32, &v7[a2 + 32], v13);
  size_t v15 = *v9 + v13;
  if (!__OFADD__(*v9, v13))
  {
    uint64_t result = (char *)swift_beginAccess();
    *size_t v9 = v15;
    return result;
  }

size_t sub_186F3F18C()
{
  unint64_t v1 = v0;
  uint64_t v2 = sub_186F87D3C();
  size_t v3 = _swift_stdlib_malloc_size(v1) - 32;
  size_t result = swift_beginAccess();
  int64_t v5 = v1[2];
  size_t v6 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
    __break(1u);
    goto LABEL_8;
  }

  BOOL v7 = __OFSUB__(v6, v2);
  size_t v8 = v6 - v2;
  if (v7)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if ((v8 & 0x8000000000000000LL) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  size_t result = _swift_stdlib_malloc_size(v1);
  if ((uint64_t)(result - 32) < v5)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  size_t result = sub_186F87E2C();
  uint64_t v9 = v1[2];
  BOOL v7 = __OFADD__(v9, v2);
  uint64_t v10 = v9 + v2;
  if (!v7)
  {
    v1[2] = v10;
    return result;
  }

uint64_t sub_186F3F278(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  return sub_186F5AFAC(v2 + 32, v2 + 32 + *(void *)(v2 + 16), v3) & 1;
}

void sub_186F3F2D8(void *a1@<X8>)
{
  *a1 = 0LL;
}

uint64_t sub_186F3F2E0@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  *a1 = *(void *)(v3 + 16);
  return result;
}

uint64_t (*sub_186F3F324(_BYTE *a1, void *a2))()
{
  *a1 = *(_BYTE *)(*v2 + *a2 + 32LL);
  return nullsub_1;
}

uint64_t sub_186F3F34C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = *v2;
  uint64_t result = swift_beginAccess();
  uint64_t v8 = *(void *)(v6 + 16);
  if (v8 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (v5 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (v8 >= v4)
  {
    *a2 = v5;
    a2[1] = v4;
    a2[2] = v6;
    return swift_retain();
  }

LABEL_7:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

      __break(1u);
      JUMPOUT(0x186F4178CLL);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  goto LABEL_7;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  sub_186F33D20(result, a2);
  sub_186F516FC(v5, v4);
  swift_beginAccess();
  uint64_t v18 = swift_retain();
  sub_186F7694C(v18, &v41);
  uint64_t v19 = sub_186F87CB8();
  sub_186F53300(v19, v20);
  uint64_t v21 = v41;
  sub_186F4CB9C(&v42);
  char v40 = v21;
  uint64_t v30 = v42;
  uint64_t v31 = v43;
  uint64_t v32 = v44;
  uint64_t v33 = v45;
  swift_retain();
  sub_186F53300((uint64_t)&v30, (uint64_t)&v34);
  swift_retain();
  sub_186F4CB9C(&v35);
  swift_release();
  swift_release();
  swift_release_n();
  uint64_t v26 = v36;
  uint64_t v29 = v35;
  char v24 = v37;
  uint64_t v22 = v38;
  uint64_t v23 = v39;
  swift_release();
  sub_186F33C98(v5, v4);
  type metadata accessor for SecureBytes.Backing();
  BOOL v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_186F8B2C0;
  _swift_stdlib_malloc_size((const void *)v12);
  *(_OWORD *)(v12 + 32) = v29;
  *(_OWORD *)(v12 + 48) = v26;
  *(_OWORD *)(v12 + 64) = v24;
  *(void *)(v12 + 80) = v22;
  *(void *)(v12 + 88) = v23;
  swift_beginAccess();
  *(void *)(v12 + 16) = 64LL;
  uint64_t result = _swift_stdlib_malloc_size((const void *)v12);
  if (result < 96) {
    __break(1u);
  }
LABEL_8:
  *a4 = v12;
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_186F3F3C4@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 16);
  if (v5 < 0)
  {
    __break(1u);
  }

  else
  {
    *a1 = 0LL;
    a1[1] = v5;
  }

  return result;
}

BOOL sub_186F3F410()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(void *)(v1 + 16) == 0LL;
}

uint64_t *sub_186F3F460(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }

  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }

  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *sub_186F3F47C(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

void *sub_186F3F498(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

void *sub_186F3F4B4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1LL)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1LL;
  }
  return result;
}

void *sub_186F3F4CC(void *result)
{
  if (__OFADD__(*result, 1LL)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

void sub_186F3F4E4(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0LL;
}

uint64_t sub_186F3F4F0()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(void *)(v1 + 16);
}

uint64_t sub_186F3F52C()
{
  uint64_t v1 = sub_186F41944(*v0);
  swift_release();
  return v1;
}

uint64_t sub_186F3F560(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_186F3E3EC(a1, a2, a3, *v3);
}

uint64_t sub_186F3F568@<X0>(uint64_t (*a1)(uint64_t, void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_186F3F584(a1, a2, a3);
}

uint64_t sub_186F3F584@<X0>(uint64_t (*a1)(uint64_t, void)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return sub_186F404D4(a1, a2, a3);
}

void *sub_186F3F5A8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, 1LL)) {
    __break(1u);
  }
  else {
    *a2 = *result - 1LL;
  }
  return result;
}

void *sub_186F3F5C0(void *result)
{
  if (__OFSUB__(*result, 1LL)) {
    __break(1u);
  }
  else {
    --*result;
  }
  return result;
}

void *sub_186F3F5D8@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = *v3;
    uint64_t result = (void *)swift_beginAccess();
    if ((v5 & 0x8000000000000000LL) == 0 && *(void *)(v6 + 16) >= v5)
    {
      *a3 = v5;
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_186F3F644@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_186F51450(*a1, a2, *a3, *v4);
  *(void *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t sub_186F3F67C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = *v2;
  uint64_t result = swift_beginAccess();
  uint64_t v7 = *(void *)(v5 + 16);
  if (v7 >= v4 && ((v4 | v3) & 0x8000000000000000LL) == 0 && v7 >= v3) {
    return v4 - v3;
  }
  __break(1u);
  return result;
}

_BYTE *sub_186F3F6E8(_BYTE *result, void *a2)
{
  *(_BYTE *)(*v2 + *a2 + 32LL) = *result;
  return result;
}

uint64_t (*sub_186F3F700(uint64_t a1, uint64_t *a2))(uint64_t result)
{
  uint64_t v3 = *a2;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(*v2 + v3 + 32);
  return sub_186F3F72C;
}

uint64_t sub_186F3F72C(uint64_t result)
{
  *(_BYTE *)(**(void **)result + *(void *)(result + 8) + 32LL) = *(_BYTE *)(result + 16);
  return result;
}

uint64_t sub_186F3F744(uint64_t *a1, uint64_t *a2)
{
  return swift_release();
}

void (*sub_186F3F77C(void *a1, uint64_t *a2))(void *a1)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_186F3F7C8(v4, *a2, a2[1]);
  return sub_186F37958;
}

void (*sub_186F3F7C8(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1)
{
  uint64_t v7 = malloc(0x48uLL);
  *a1 = v7;
  v7[7] = a3;
  v7[8] = v3;
  v7[6] = a2;
  uint64_t v8 = *v3;
  uint64_t result = (void (*)(uint64_t **))swift_beginAccess();
  uint64_t v10 = *(void *)(v8 + 16);
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (a2 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (v10 >= a3)
  {
    *uint64_t v7 = a2;
    v7[1] = a3;
    void v7[2] = v8;
    swift_retain();
    return sub_186F3F86C;
  }

void sub_186F3F86C(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_186F417A4((uint64_t *)(*a1)[8], v1[6], (*a1)[7], *v1, v1[1], v1[2]);
  swift_release();
  free(v1);
}

uint64_t sub_186F3F8A8@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_186F41A1C(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

void *sub_186F3F8D0(void *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v4 = *a2;
  if (__OFSUB__(*a2, *result))
  {
    __break(1u);
  }

  else if (*a2 != *result)
  {
    uint64_t v5 = *v2 + 32LL;
    char v6 = *(_BYTE *)(v5 + v3);
    *(_BYTE *)(v5 + v3) = *(_BYTE *)(v5 + v4);
    *(_BYTE *)(v5 + v4) = v6;
  }

  return result;
}

uint64_t sub_186F3F904()
{
  return sub_186F87B98();
}

uint64_t sub_186F3F924()
{
  return sub_186F87B8C();
}

uint64_t sub_186F3F944(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = (char *)*v4 + 16;
  uint64_t result = swift_beginAccess();
  int64_t v12 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_20;
  }

  int64_t v13 = *v10 - v12;
  if (__OFSUB__(*v10, v12))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t result = sub_186F87D3C();
  BOOL v14 = __OFADD__(v13, result);
  uint64_t v15 = v13 + result;
  if (v14)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result)
  {
    uint64_t result = _swift_stdlib_malloc_size(*v5);
    if (result - 32 >= v15)
    {
      if (a2 >= a1) {
        return sub_186F3FB10(a1, a2, a3, a4);
      }
      goto LABEL_26;
    }
  }

  if (v15 < 0) {
    goto LABEL_22;
  }
  if (HIDWORD(v15))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if ((_DWORD)v15)
  {
    unsigned int v16 = (v15 - 1) | ((v15 - 1) >> 1) | ((((_DWORD)v15 - 1) | ((v15 - 1) >> 1)) >> 2);
    unsigned int v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
    int v18 = v17 | HIWORD(v17);
    if (v18 == -1) {
      uint64_t v19 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v19 = (v18 + 1);
    }
  }

  else
  {
    uint64_t v19 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = v19;
  if (a1 < 0) {
    goto LABEL_24;
  }
  uint64_t v20 = (const void *)result;
  uint64_t v21 = (char *)*v5;
  uint64_t result = swift_beginAccess();
  uint64_t v22 = *((void *)v21 + 2);
  if (v22 < a2)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }

  sub_186F3F07C(v21, 0LL, a1);
  sub_186F3F18C();
  sub_186F3F07C((char *)*v5, a2, v22);
  *uint64_t v5 = v20;
  return swift_release();
}

uint64_t sub_186F3FB10(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  int64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v14);
  uint64_t v15 = v5 + 2;
  uint64_t result = swift_beginAccess();
  int64_t v17 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_11;
  }

  int64_t v27 = a2;
  int64_t v18 = *v15 - v17;
  if (__OFSUB__(*v15, v17))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  uint64_t result = sub_186F87D3C();
  BOOL v19 = __OFADD__(v18, result);
  int64_t v20 = v18 + result;
  if (v19)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v26 = a1;
  int64_t v21 = _swift_stdlib_malloc_size(v5) - 32;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a4);
  if (v21 < v20)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t result = sub_186F87D3C();
  uint64_t v22 = result - v17;
  if (__OFSUB__(result, v17))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t result = v27;
  if (*v15 < v27)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  sub_186F409F4(v27, *v15, v22);
  sub_186F40AA8(a3, v26, a4);
  uint64_t result = sub_186F87D3C();
  uint64_t v23 = result - v17;
  if (__OFSUB__(result, v17))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  BOOL v19 = __OFADD__(*v15, v23);
  int64_t v24 = *v15 + v23;
  if (!v19)
  {
    *uint64_t v15 = v24;
    return result;
  }

uint64_t sub_186F3FCA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  int64_t v12 = &v16[-v11];
  int64_t v17 = v3;
  uint64_t result = sub_186F87C7C();
  if (v18 == 1)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
    sub_186F87C70();
    swift_getAssociatedConformanceWitness();
    sub_186F87E20();
    if ((v20 & 1) == 0)
    {
      size_t v14 = v19;
      do
      {
        uint64_t v15 = *v3;
        swift_beginAccess();
        sub_186F71630(*(void *)(v15 + 16), *(void *)(v15 + 16), v14);
        sub_186F87E20();
        size_t v14 = v19;
      }

      while (v20 != 1);
    }

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  }

  return result;
}

uint64_t sub_186F3FE70@<X0>(void *a1@<X8>)
{
  if (qword_18C4B5020 != -1) {
    swift_once();
  }
  *a1 = off_18C4B5018;
  return swift_retain();
}

uint64_t sub_186F3FEC0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a2, a3);
}

void *sub_186F3FF14@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_186F427D4(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_186F3FF3C()
{
  return sub_186F87D9C();
}

uint64_t sub_186F3FF54(unsigned __int8 *a1)
{
  uint64_t v2 = *v1;
  size_t v3 = *a1;
  swift_beginAccess();
  return sub_186F71630(*(void *)(v2 + 16), *(void *)(v2 + 16), v3);
}

uint64_t sub_186F3FFAC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
}

uint64_t sub_186F3FFE8(unsigned __int8 *a1, int64_t *a2)
{
  return sub_186F71630(*a2, *a2, *a1);
}

uint64_t sub_186F3FFF8()
{
  return sub_186F87D90();
}

uint64_t sub_186F40010@<X0>(int64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  int64_t v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(v5 + 16))
  {
    __break(1u);
    goto LABEL_6;
  }

  int64_t v7 = v4 + 1;
  if (__OFADD__(v4, 1LL))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (v7 >= v4)
  {
    char v8 = *(_BYTE *)(v5 + v4 + 32);
    uint64_t result = sub_186F7435C(v4, v7);
    *a2 = v8;
    return result;
  }

uint64_t sub_186F40090(int64_t *a1)
{
  return sub_186F7435C(*a1, a1[1]);
}

void sub_186F4009C(_WORD *a1@<X8>)
{
  *a1 = 256;
}

uint64_t sub_186F400A8()
{
  return 0LL;
}

int64_t sub_186F400B0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v3 = *v1;
  int64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 16);
  if (!v5)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  char v6 = *(_BYTE *)(v3 + 32);
  int64_t result = sub_186F51450(0LL, 1LL, v5, v3);
  if ((v7 & 1) == 0)
  {
    if ((result & 0x8000000000000000LL) == 0)
    {
      int64_t result = sub_186F7435C(0LL, result);
      *a1 = v6;
      return result;
    }

    goto LABEL_6;
  }

int64_t sub_186F40138(int64_t result)
{
  if (result)
  {
    uint64_t v2 = result;
    if (result < 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t v3 = *v1;
      swift_beginAccess();
      int64_t result = sub_186F51450(0LL, v2, *(void *)(v3 + 16), v3);
      if ((v4 & 1) != 0)
      {
LABEL_9:
        __break(1u);
        return result;
      }

      if ((result & 0x8000000000000000LL) == 0) {
        return sub_186F7435C(0LL, result);
      }
    }

    __break(1u);
    goto LABEL_9;
  }

  return result;
}

uint64_t sub_186F401BC(char a1)
{
  uint64_t v2 = *v1;
  if ((a1 & 1) != 0)
  {
    swift_beginAccess();
    int64_t v3 = *(void *)(v2 + 16);
    if ((v3 & 0x8000000000000000LL) == 0) {
      return sub_186F7435C(0LL, v3);
    }
    __break(1u);
    goto LABEL_7;
  }

  swift_release();
  if (qword_18C4B5020 != -1) {
LABEL_7:
  }
    swift_once();
  *uint64_t v1 = (uint64_t)off_18C4B5018;
  return swift_retain();
}

uint64_t sub_186F40258(uint64_t (*a1)(char *))
{
  return sub_186F4026C(a1);
}

uint64_t sub_186F4026C(uint64_t (*a1)(char *))
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)(*v1 + 16LL);
  swift_retain();
  uint64_t result = swift_beginAccess();
  int64_t v7 = 0LL;
  uint64_t v8 = v4 + 32;
  do
  {
    if (__OFSUB__(*v5, v7))
    {
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }

    if (v7 == *v5) {
      goto LABEL_9;
    }
    char v12 = *(_BYTE *)(v4 + v7 + 32);
    uint64_t result = a1(&v12);
    if (v2) {
      return swift_release();
    }
    if ((result & 1) != 0)
    {
      uint64_t result = swift_release();
      int64_t v10 = v7 + 1;
      if (__OFADD__(v7, 1LL))
      {
        __break(1u);
        goto LABEL_14;
      }

      while (!__OFSUB__(*v5, v10))
      {
        if (*v5 == v10)
        {
          if (v10 < v7) {
            goto LABEL_29;
          }
          return sub_186F7435C(v7, v10);
        }

        char v12 = *(_BYTE *)(v8 + v10);
        uint64_t result = a1(&v12);
        if ((result & 1) == 0)
        {
          if (__OFSUB__(v10, v7)) {
            goto LABEL_28;
          }
          if (v10 != v7)
          {
            char v11 = *(_BYTE *)(v8 + v7);
            *(_BYTE *)(v8 + v7) = *(_BYTE *)(v8 + v10);
            *(_BYTE *)(v8 + v10) = v11;
          }

uint64_t sub_186F403F0(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3 + 32, a3 + 32 + *(void *)(a3 + 16));
}

uint64_t sub_186F40464(uint64_t (*a1)(uint64_t, uint64_t))
{
  return a1(v1 + 32, v1 + 32 + *(void *)(v1 + 16));
}

uint64_t sub_186F404D4@<X0>(uint64_t (*a1)(uint64_t, void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = a1(v3 + 32, *(void *)(v3 + 16));
  if (!v4) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56LL))(a3, 0LL, 1LL, a2);
  }
  return result;
}

uint64_t sub_186F4056C(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return sub_186F403F0(a1, a2, *v2);
}

uint64_t sub_186F40584@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

uint64_t sub_186F40590()
{
  return sub_186F8791C();
}

uint64_t sub_186F405B4()
{
  return sub_186F87958();
}

uint64_t sub_186F405DC()
{
  return sub_186F87940();
}

uint64_t sub_186F405EC()
{
  return sub_186F87934();
}

uint64_t sub_186F40604()
{
  return sub_186F87928();
}

uint64_t sub_186F40620()
{
  return sub_186F879C4();
}

uint64_t sub_186F40638()
{
  return sub_186F88018();
}

uint64_t sub_186F4067C()
{
  return sub_186F87FF4();
}

uint64_t sub_186F406A4()
{
  return sub_186F88018();
}

void *sub_186F406E4(void *result, void *a2)
{
  if (!__OFSUB__(*a2, *result)) {
    return (void *)(*a2 == *result);
  }
  __break(1u);
  return result;
}

BOOL sub_186F40700(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_186F40714(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_186F40728(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_186F4073C(void *a1, void *a2)
{
  return *a2 < *a1;
}

void *sub_186F40750@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, *v2)) {
    __break(1u);
  }
  else {
    *a2 = *result - *v2;
  }
  return result;
}

void *sub_186F4076C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*v2, *result)) {
    __break(1u);
  }
  else {
    *a2 = *v2 + *result;
  }
  return result;
}

void *sub_186F40788(void *result, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  if (__OFADD__(*a4, *a6))
  {
    __break(1u);
  }

  else
  {
    *uint64_t result = *a4 + *a6;
    return 0LL;
  }

  return result;
}

uint64_t sub_186F407AC()
{
  return v1;
}

size_t sub_186F40810@<X0>(size_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int64_t v4 = a2 - result;
  if (result) {
    size_t v5 = a2 - result;
  }
  else {
    size_t v5 = 0LL;
  }
  if ((v5 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }

  if (HIDWORD(v5))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  char v6 = (const void *)result;
  if ((_DWORD)v5)
  {
    unsigned int v7 = (v5 - 1) | ((v5 - 1) >> 1) | ((((_DWORD)v5 - 1) | ((v5 - 1) >> 1)) >> 2);
    unsigned int v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    int v9 = v8 | HIWORD(v8);
    if (v9 == -1) {
      uint64_t v10 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v10 = (v9 + 1);
    }
  }

  else
  {
    uint64_t v10 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  char v11 = (void *)swift_allocObject();
  v11[2] = 0LL;
  v11[3] = v10;
  _swift_stdlib_malloc_size(v11);
  if (v6) {
    memmove(v11 + 4, v6, v4);
  }
  else {
    int64_t v4 = 0LL;
  }
  swift_beginAccess();
  v11[2] = v4;
  uint64_t result = _swift_stdlib_malloc_size(v11);
  if ((uint64_t)(result - 32) >= v4)
  {
    *a3 = v11;
    return result;
  }

LABEL_18:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

      __break(1u);
      goto LABEL_19;
    }
  }

  unsigned int v8 = a4 + v7;
  if (!__OFADD__(a4, v7)) {
    goto LABEL_10;
  }
LABEL_22:
  __break(1u);
  return result;
}

  __break(1u);
}

  sub_186F36734(v1, v2, &qword_18C6B0C80);
  return v3;
}

uint64_t sub_186F40928()
{
  return swift_deallocClassInstance();
}

uint64_t sub_186F40978()
{
  return type metadata accessor for SecureBytes.Backing();
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SecureBytes.BackingHeader(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for SecureBytes.BackingHeader(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SecureBytes.BackingHeader()
{
  return &type metadata for SecureBytes.BackingHeader;
}

ValueMetadata *type metadata accessor for SecureBytes()
{
  return &type metadata for SecureBytes;
}

size_t sub_186F409F4(size_t result, int64_t a2, uint64_t a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }

  int64_t v4 = v3;
  size_t v7 = result;
  __n128 result = _swift_stdlib_malloc_size(v4);
  uint64_t v8 = v7 + a3;
  if (__OFADD__(v7, a3))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  BOOL v9 = __OFADD__(a2, a3);
  uint64_t v10 = a2 + a3;
  if (v9)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (v10 < v8)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  __n128 result = _swift_stdlib_malloc_size(v4);
  if ((uint64_t)(result - 32) >= v10)
  {
    _swift_stdlib_malloc_size(v4);
    return (size_t)memmove(&v4[v8 + 32], &v4[v7 + 32], a2 - v7);
  }

uint64_t sub_186F40AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4 = v3;
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t result = MEMORY[0x1895F8858](a1);
  char v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v12 < 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, a3);
  uint64_t result = sub_186F87D3C();
  int64_t v13 = a2 + result;
  if (__OFADD__(a2, result))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  int64_t v14 = _swift_stdlib_malloc_size(v4) - 32;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, a3);
  if (v14 < v13)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t result = sub_186F87D3C();
  if (__OFADD__(a2, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (a2 + result >= a2)
  {
    _swift_stdlib_malloc_size(v4);
    return sub_186F87E2C();
  }

uint64_t sub_186F40BCC(uint64_t (*a1)(uint64_t, uint64_t))
{
  return sub_186F40464(a1);
}

unint64_t sub_186F40BF0()
{
  unint64_t result = qword_18C6B0D60;
  if (!qword_18C6B0D60)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F8991C, &type metadata for SecureBytes.Index);
    atomic_store(result, (unint64_t *)&qword_18C6B0D60);
  }

  return result;
}

unint64_t sub_186F40C38()
{
  unint64_t result = qword_18C6B0D68;
  if (!qword_18C6B0D68)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F89964, &type metadata for SecureBytes.Index);
    atomic_store(result, (unint64_t *)&qword_18C6B0D68);
  }

  return result;
}

unint64_t sub_186F40C80()
{
  unint64_t result = qword_18C4B4FC0;
  if (!qword_18C4B4FC0)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F89D7C, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_18C4B4FC0);
  }

  return result;
}

unint64_t sub_186F40CC8()
{
  unint64_t result = qword_18C6B0D70;
  if (!qword_18C6B0D70)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F89AC4, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_18C6B0D70);
  }

  return result;
}

unint64_t sub_186F40D10()
{
  unint64_t result = qword_18C4B5238;
  if (!qword_18C4B5238)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F89A0C, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_18C4B5238);
  }

  return result;
}

unint64_t sub_186F40D58()
{
  unint64_t result = qword_18C4B4FE0;
  if (!qword_18C4B4FE0)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F89C4C, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_18C4B4FE0);
  }

  return result;
}

uint64_t sub_186F40D9C()
{
  return sub_186F41164(&qword_18C6B0D78, (uint64_t (*)(void))sub_186F40D10, MEMORY[0x18961A5F0]);
}

uint64_t sub_186F40DC8()
{
  return sub_186F41164(&qword_18C6B0D80, (uint64_t (*)(void))sub_186F40CC8, MEMORY[0x18961A5D0]);
}

unint64_t sub_186F40DF8()
{
  unint64_t result = qword_18C4B4FC8;
  if (!qword_18C4B4FC8)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F89B84, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_18C4B4FC8);
  }

  return result;
}

uint64_t sub_186F40E3C()
{
  return sub_186F40FFC(&qword_18C6B0D88, MEMORY[0x189618A58]);
}

unint64_t sub_186F40E60()
{
  unint64_t result = qword_18C6B0D98;
  if (!qword_18C6B0D98)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F898C4, &type metadata for SecureBytes.Index);
    atomic_store(result, (unint64_t *)&qword_18C6B0D98);
  }

  return result;
}

uint64_t sub_186F40EA4()
{
  return sub_186F41164(&qword_18C6B0DA0, (uint64_t (*)(void))sub_186F40ED0, MEMORY[0x18961A5E0]);
}

unint64_t sub_186F40ED0()
{
  unint64_t result = qword_18C4B4FD8;
  if (!qword_18C4B4FD8)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F89B34, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_18C4B4FD8);
  }

  return result;
}

uint64_t sub_186F40F14()
{
  return sub_186F40FFC(&qword_18C6B0DA8, MEMORY[0x189618A40]);
}

uint64_t sub_186F40F38()
{
  return sub_186F41164(&qword_18C6B0DB0, (uint64_t (*)(void))sub_186F40DF8, MEMORY[0x18961A5C8]);
}

uint64_t sub_186F40F64()
{
  return sub_186F3A490(&qword_18C6B0DB8, &qword_18C6B0DC0, MEMORY[0x189619678]);
}

unint64_t sub_186F40F94()
{
  unint64_t result = qword_18C4B4FD0;
  if (!qword_18C4B4FD0)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F89BE4, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_18C4B4FD0);
  }

  return result;
}

uint64_t sub_186F40FD8()
{
  return sub_186F40FFC(&qword_18C6B0DC8, MEMORY[0x189618A60]);
}

uint64_t sub_186F40FFC(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C6B0D90);
    v6[0] = sub_186F40E60();
    v6[1] = sub_186F37F24();
    uint64_t result = MEMORY[0x18959EFD8](a2, v5, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_186F41068()
{
  return sub_186F3A490(&qword_18C6B0DD0, &qword_18C4B5150, MEMORY[0x18961A5E8]);
}

uint64_t sub_186F41098()
{
  return sub_186F3A490(&qword_18C4B5140, &qword_18C4B5148, MEMORY[0x189619490]);
}

uint64_t sub_186F410C4()
{
  return sub_186F41164(&qword_18C6B0DD8, (uint64_t (*)(void))sub_186F40C80, MEMORY[0x189607400]);
}

unint64_t sub_186F410F4()
{
  unint64_t result = qword_18C4B4FB8;
  if (!qword_18C4B4FB8)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F89D54, &type metadata for SecureBytes);
    atomic_store(result, (unint64_t *)&qword_18C4B4FB8);
  }

  return result;
}

uint64_t sub_186F41138()
{
  return sub_186F41164(&qword_18C6B0DE0, (uint64_t (*)(void))sub_186F410F4, MEMORY[0x189607408]);
}

uint64_t sub_186F41164(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C4B5150);
    uint64_t v8 = a2();
    uint64_t result = MEMORY[0x18959EFD8](a3, v7, &v8);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t *sub_186F411CC(uint64_t *result, void *a2, char a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = *result;
  if ((a3 & 1) == 0) {
    goto LABEL_7;
  }
  if (!v7)
  {
    __break(1u);
    goto LABEL_14;
  }

  uint64_t result = (uint64_t *)a5();
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  swift_dynamicCast();
  uint64_t result = (uint64_t *)ccrng();
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t result = (uint64_t *)ccec_compact_generate_key();
  if (!(_DWORD)result)
  {
LABEL_11:
    *a2 = a4;
    return result;
  }

  __break(1u);
LABEL_7:
  if (!v7)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t result = (uint64_t *)a5();
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  swift_dynamicCast();
  uint64_t result = (uint64_t *)ccrng();
  if (result)
  {
    uint64_t result = (uint64_t *)ccec_generate_key_fips();
    if ((_DWORD)result) {
      __break(1u);
    }
    goto LABEL_11;
  }

void sub_186F41354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

void sub_186F413C0()
{
  uint64_t v7 = v2;
  __int16 v8 = v3;
  char v9 = BYTE2(v3);
  char v10 = BYTE3(v3);
  char v11 = BYTE4(v3);
  char v12 = BYTE5(v3);
  sub_186F41628((uint64_t)&v7, (uint64_t)&v7 + BYTE6(v3), v6, v2, v3, v5, v4);
  *uint64_t v1 = v0;
}

void sub_186F41628( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  if (a1)
  {
    if (*a3)
    {
      if (a7())
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
        swift_dynamicCast();
        __asm { BR              X10 }
      }

uint64_t sub_186F417A4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *a1;
  uint64_t result = swift_beginAccess();
  uint64_t v13 = *(void *)(v11 + 16);
  if (v13 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (a2 < 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  if (v13 < a3)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if (__OFSUB__(a3, a2))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  if (a3 != a2)
  {
    if (__OFSUB__(a5, a4))
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }

    if (a5 == a4)
    {
LABEL_29:
      __break(1u);
      return result;
    }

    while (a4 < a5)
    {
      *(_BYTE *)(v11 + 32 + a2) = *(_BYTE *)(a6 + 32 + a4);
      uint64_t v14 = a2 + 1;
      if (__OFADD__(a2, 1LL)) {
        goto LABEL_19;
      }
      if (__OFSUB__(a3, v14)) {
        goto LABEL_20;
      }
      ++a4;
      if (v14 == a3) {
        goto LABEL_6;
      }
      if (__OFSUB__(a5, a4)) {
        goto LABEL_21;
      }
      ++a2;
      if (a5 == a4)
      {
        __break(1u);
        break;
      }
    }

    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

LABEL_6:
  if (__OFSUB__(a5, a4))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  if (a4 != a5)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  return result;
}

void *sub_186F418B8(const void *a1, int64_t a2)
{
  if (!a2) {
    return (void *)MEMORY[0x18961AFE8];
  }
  if (a2 <= 0)
  {
    int64_t v4 = (void *)MEMORY[0x18961AFE8];
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_18C4B5430);
    int64_t v4 = (void *)swift_allocObject();
    size_t v5 = _swift_stdlib_malloc_size(v4);
    void v4[2] = a2;
    v4[3] = 2 * v5 - 64;
  }

  memcpy(v4 + 4, a1, a2);
  return v4;
}

uint64_t sub_186F41944(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return MEMORY[0x18961AFE8];
  }
  if (v2 <= 0)
  {
    uint64_t v3 = MEMORY[0x18961AFE8];
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_18C4B5430);
    uint64_t v3 = swift_allocObject();
    size_t v4 = _swift_stdlib_malloc_size((const void *)v3);
    *(void *)(v3 + 16) = v2;
    *(void *)(v3 + 24) = 2 * v4 - 64;
  }

  uint64_t v5 = sub_186F3E3EC((uint64_t)&v7, (_BYTE *)(v3 + 32), v2, a1);
  swift_retain();
  uint64_t result = swift_release();
  if (v5 == v2) {
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_186F41A1C(uint64_t (*a1)(char *))
{
  uint64_t v4 = *v1;
  swift_beginAccess();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5 < 1) {
    return 0LL;
  }
  uint64_t v6 = 0LL;
  uint64_t v7 = v4 + 32;
  uint64_t v8 = v4 + 31;
  do
  {
    char v14 = *(_BYTE *)(v7 + v6);
    char v9 = a1(&v14);
    if (v2) {
      break;
    }
    if ((v9 & 1) != 0)
    {
      if (v6 >= v5 - 1) {
        return v6;
      }
      while (1)
      {
        char v14 = *(_BYTE *)(v8 + v5);
        uint64_t result = a1(&v14);
        uint64_t v11 = v5 - 1;
        if ((result & 1) == 0) {
          break;
        }
        uint64_t v12 = v5 - 2;
        if (__OFSUB__(v11, 1LL))
        {
          __break(1u);
          goto LABEL_17;
        }

        --v5;
        if (v6 >= v12) {
          return v6;
        }
      }

      if (!__OFSUB__(v11, v6))
      {
        char v13 = *(_BYTE *)(v7 + v6);
        *(_BYTE *)(v7 + v6) = *(_BYTE *)(v8 + v5);
        *(_BYTE *)(v8 + v5--) = v13;
        goto LABEL_3;
      }

LABEL_3:
    ++v6;
  }

  while (v6 < v5);
  return v6;
}

uint64_t sub_186F41B44()
{
  return sub_186F407AC();
}

unint64_t sub_186F41B88(unint64_t a1, uint64_t a2)
{
  return sub_186F42360(a1, a2, (uint64_t (*)(void *, uint64_t *, uint64_t))sub_186F63450);
}

uint64_t sub_186F41BA4(uint64_t a1)
{
  uint64_t v2 = sub_186F879F4();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (uint64_t (**)())((char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  swift_beginAccess();
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *uint64_t v5 = sub_186F429C0;
  v5[1] = (uint64_t (*)())v7;
  (*(void (**)(uint64_t (**)(), void, uint64_t))(v3 + 104))(v5, *MEMORY[0x189606B40], v2);
  swift_retain();
  sub_186F879E8();
  if (v6)
  {
    sub_186F879AC();
    swift_allocObject();
    swift_retain();
    uint64_t v8 = sub_186F87964();
    uint64_t v9 = sub_186F6F944(v8, v6);
    swift_release();
  }

  else
  {
    char v10 = (void (*)(uint64_t, void))sub_186F879E8();
    v10(a1 + 32, 0LL);
    swift_release();
    swift_release();
    uint64_t v9 = 0LL;
  }

  (*(void (**)(uint64_t (**)(), uint64_t))(v3 + 8))(v5, v2);
  return v9;
}

unint64_t sub_186F41D38(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_186F41D70(a1, a2, a3);
}

unint64_t sub_186F41D54(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_186F41D70(a1, a2, a3);
}

unint64_t sub_186F41D70(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v4 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }

  if ((_DWORD)result)
  {
    unsigned int v7 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    int v9 = v8 | HIWORD(v8);
    if (v9 == -1) {
      uint64_t v10 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v10 = (v9 + 1);
    }
  }

  else
  {
    uint64_t v10 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0LL;
  *(void *)(v11 + 24) = v10;
  uint64_t v13 = v11;
  sub_186F33D20(a2, a3);
  uint64_t v12 = (const void *)swift_retain();
  sub_186F3E6F0(v12, v4, &v13, a2, a3);
  swift_release();
  if (v3) {
    swift_release();
  }
  return v11;
}

unint64_t sub_186F41E88(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_186F41D70(a1, a2, a3);
}

unint64_t sub_186F41EA4(unint64_t a1)
{
  return sub_186F42270(a1, (void (*)(uint64_t, unint64_t, uint64_t *))sub_186F3E800);
}

unint64_t sub_186F41EC0(unint64_t a1, char a2, uint64_t a3)
{
  return sub_186F41F14(a1, a2, a3, MEMORY[0x1895F9B10]);
}

unint64_t sub_186F41EDC(unint64_t a1, char a2, uint64_t a3)
{
  return sub_186F41F14(a1, a2, a3, MEMORY[0x1895F9B18]);
}

unint64_t sub_186F41EF8(unint64_t a1, char a2, uint64_t a3)
{
  return sub_186F41F14(a1, a2, a3, MEMORY[0x1895F9B20]);
}

unint64_t sub_186F41F14(unint64_t result, char a2, uint64_t a3, uint64_t (*a4)(void))
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v5 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }

  if ((_DWORD)result)
  {
    unsigned int v9 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
    int v11 = v10 | HIWORD(v10);
    if (v11 == -1) {
      uint64_t v12 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v12 = (v11 + 1);
    }
  }

  else
  {
    uint64_t v12 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0LL;
  *(void *)(v13 + 24) = v12;
  uint64_t v15 = v13;
  char v14 = (const void *)swift_retain();
  sub_186F3E8FC(v14, v5, &v15, a2 & 1, a3, a4);
  swift_release();
  if (v4) {
    swift_release();
  }
  return v13;
}

unint64_t sub_186F42004(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186F42150( a1,  a2,  a3,  (void (*)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F3E4F0);
}

unint64_t sub_186F42020(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_186F42034(a1, a2, a3, a4, a5);
}

unint64_t sub_186F42034(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v6 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }

  if ((_DWORD)result)
  {
    unsigned int v11 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
    int v13 = v12 | HIWORD(v12);
    if (v13 == -1) {
      uint64_t v14 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v14 = (v13 + 1);
    }
  }

  else
  {
    uint64_t v14 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0LL;
  *(void *)(v15 + 24) = v14;
  uint64_t v17 = v15;
  unsigned int v16 = (const void *)swift_retain();
  sub_186F3E9E0(v16, v6, &v17, a2, a3, a4, a5);
  swift_release();
  if (v5) {
    swift_release();
  }
  return v15;
}

unint64_t sub_186F42134(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186F42150( a1,  a2,  a3,  (void (*)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F3E614);
}

unint64_t sub_186F42150( unint64_t result, uint64_t a2, uint64_t a3, void (*a4)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v5 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }

  if ((_DWORD)result)
  {
    unsigned int v9 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
    int v11 = v10 | HIWORD(v10);
    if (v11 == -1) {
      uint64_t v12 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v12 = (v11 + 1);
    }
  }

  else
  {
    uint64_t v12 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0LL;
  *(void *)(v13 + 24) = v12;
  uint64_t v15 = v13;
  swift_retain();
  sub_186F87CDC();
  uint64_t v14 = (char *)swift_retain();
  sub_186F3EB3C(v14, v5, (uint64_t)&v15, a2, a3, a4);
  swift_release();
  if (v4) {
    swift_release();
  }
  return v13;
}

unint64_t sub_186F42254(unint64_t a1)
{
  return sub_186F42270(a1, (void (*)(uint64_t, unint64_t, uint64_t *))sub_186F3EBE4);
}

unint64_t sub_186F42270( unint64_t result, void (*a2)(uint64_t, unint64_t, uint64_t *))
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  unint64_t v3 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }

  if ((_DWORD)result)
  {
    unsigned int v5 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
    int v7 = v6 | HIWORD(v6);
    if (v7 == -1) {
      uint64_t v8 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v8 = (v7 + 1);
    }
  }

  else
  {
    uint64_t v8 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = 0LL;
  *(void *)(v9 + 24) = v8;
  uint64_t v11 = v9;
  uint64_t v10 = swift_retain();
  a2(v10, v3, &v11);
  swift_release();
  if (v2) {
    swift_release();
  }
  return v9;
}

unint64_t sub_186F42344(unint64_t a1, uint64_t a2)
{
  return sub_186F42360(a1, a2, (uint64_t (*)(void *, uint64_t *, uint64_t))sub_186F6EE30);
}

unint64_t sub_186F42360( unint64_t result, uint64_t a2, uint64_t (*a3)(void *, uint64_t *, uint64_t))
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v4 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }

  if ((_DWORD)result)
  {
    unsigned int v7 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    int v9 = v8 | HIWORD(v8);
    if (v9 == -1) {
      uint64_t v10 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v10 = (v9 + 1);
    }
  }

  else
  {
    uint64_t v10 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0LL;
  *(void *)(v11 + 24) = v10;
  uint64_t v13 = v11;
  uint64_t v12 = (const void *)swift_retain();
  sub_186F3ECE0(v12, v4, &v13, a2, a3);
  swift_release();
  if (v3) {
    swift_release();
  }
  return v11;
}

unint64_t sub_186F42448(unint64_t result, uint64_t a2, uint64_t a3, void **a4, uint64_t a5)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v6 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }

  if ((_DWORD)result)
  {
    unsigned int v11 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
    int v13 = v12 | HIWORD(v12);
    if (v13 == -1) {
      uint64_t v14 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v14 = (v13 + 1);
    }
  }

  else
  {
    uint64_t v14 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0LL;
  *(void *)(v15 + 24) = v14;
  uint64_t v17 = v15;
  swift_retain();
  unsigned int v16 = (const void *)swift_retain();
  sub_186F3EDB8(v16, v6, &v17, a2, a3, a4, a5);
  swift_release();
  if (v5) {
    swift_release();
  }
  return v15;
}

unint64_t sub_186F42554(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186F4258C(a1, a2, a3, MEMORY[0x1895F9FF8]);
}

unint64_t sub_186F42570(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186F4258C(a1, a2, a3, MEMORY[0x1895F9FF0]);
}

unint64_t sub_186F4258C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v5 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }

  if ((_DWORD)result)
  {
    unsigned int v9 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
    int v11 = v10 | HIWORD(v10);
    if (v11 == -1) {
      uint64_t v12 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v12 = (v11 + 1);
    }
  }

  else
  {
    uint64_t v12 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0LL;
  *(void *)(v13 + 24) = v12;
  uint64_t v15 = v13;
  uint64_t v14 = (const void *)swift_retain();
  sub_186F3EECC(v14, v5, &v15, a2, a3, a4);
  swift_release();
  if (v4) {
    swift_release();
  }
  return v13;
}

unint64_t sub_186F4267C( unint64_t result, uint64_t (*a2)(void *, uint64_t *), uint64_t a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v4 = result;
  if (HIDWORD(result))
  {
LABEL_12:
    __break(1u);
    return result;
  }

  if ((_DWORD)result)
  {
    unsigned int v7 = (result - 1) | ((result - 1) >> 1) | ((((_DWORD)result - 1) | ((result - 1) >> 1)) >> 2);
    unsigned int v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    int v9 = v8 | HIWORD(v8);
    if (v9 == -1) {
      uint64_t v10 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v10 = (v9 + 1);
    }
  }

  else
  {
    uint64_t v10 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0LL;
  *(void *)(v11 + 24) = v10;
  uint64_t v13 = v11;
  uint64_t v12 = (const void *)swift_retain();
  sub_186F3EFA8(v12, v4, a2, a3, &v13);
  swift_release();
  if (v3) {
    swift_release();
  }
  return v11;
}

uint64_t sub_186F42764(void *a1, size_t a2)
{
  uint64_t v5 = **(void **)(v2 + 16);
  swift_beginAccess();
  return sub_186F717CC(*(void *)(v5 + 16), *(void *)(v5 + 16), a1, a2);
}

void *sub_186F427D4(size_t a1, uint64_t a2)
{
  if (qword_18C4B5020 != -1) {
    swift_once();
  }
  uint64_t result = off_18C4B5018;
  uint64_t v5 = off_18C4B5018;
  if (!a2) {
    return (void *)swift_retain();
  }
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    swift_retain();
    do
    {
      swift_beginAccess();
      sub_186F71630(v5[2], v5[2], a1);
      --a2;
    }

    while (a2);
    return v5;
  }

  return result;
}

uint64_t sub_186F42888(int64_t a1)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_14;
  }

  if (HIDWORD(a1))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if ((_DWORD)a1)
  {
    unsigned int v2 = (a1 - 1) | ((a1 - 1) >> 1) | ((((_DWORD)a1 - 1) | ((a1 - 1) >> 1)) >> 2);
    unsigned int v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
    int v4 = v3 | HIWORD(v3);
    if (v4 == -1) {
      uint64_t v5 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v5 = (v4 + 1);
    }
  }

  else
  {
    uint64_t v5 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t v6 = (void *)swift_allocObject();
  void v6[2] = 0LL;
  void v6[3] = v5;
  size_t v7 = _swift_stdlib_malloc_size(v6);
  if (!a1) {
    goto LABEL_12;
  }
  if ((uint64_t)(v7 - 32) < a1)
  {
LABEL_15:
    __break(1u);
    __break(1u);
  }

  uint64_t result = ccrng();
  if (result)
  {
    ccrng_generate_bridge();
LABEL_12:
    swift_beginAccess();
    void v6[2] = a1;
    return (uint64_t)v6;
  }

  __break(1u);
  return result;
}

uint64_t sub_186F429B0()
{
  return swift_deallocObject();
}

uint64_t sub_186F429C0()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for SecureBytes.Index()
{
  return &type metadata for SecureBytes.Index;
}

unint64_t sub_186F429DC( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((result & 0xC) == 4LL << v8)
  {
    uint64_t result = sub_186F43604(result, a3, a4);
    unint64_t v7 = result;
  }

  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_186F43604(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    return sub_186F87C28();
  }

  __break(1u);
  return result;
}

uint64_t sub_186F42AC8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_16;
  }

  int64_t v5 = a5 >> 1;
  unint64_t v6 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v7 = v6 - result;
  if (__OFSUB__(v6, result))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (v7 < 1)
  {
    uint64_t v7 = 0LL;
  }

  else if ((v6 & 0x8000000000000000LL) == 0)
  {
    int64_t v8 = a5 >> 1;
    if (v6 < v7)
    {
LABEL_10:
      if (v8 >= a4)
      {
        if (v5 >= a4)
        {
          if (v5 >= v8)
          {
            if ((v8 & 0x8000000000000000LL) == 0) {
              return a2;
            }
            goto LABEL_21;
          }

LABEL_19:
        __break(1u);
        goto LABEL_20;
      }

    unsigned __int8 v19 = v15 & 0xC;
    uint64_t result = v15;
    if (v19 == v14) {
      uint64_t result = sub_186F43604(v15, a1, a2);
    }
    char v20 = result >> 16;
    if (result >> 16 >= v11) {
      break;
    }
    if ((a2 & 0x1000000000000000LL) != 0)
    {
      uint64_t result = sub_186F87C34();
      int64_t v21 = result;
      if (v19 != v14) {
        goto LABEL_29;
      }
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      v31[0] = a1;
      v31[1] = v25;
      int64_t v21 = *((_BYTE *)v31 + v20);
      if (v19 != v14) {
        goto LABEL_29;
      }
    }

    else
    {
      uint64_t result = v24;
      if ((a1 & 0x1000000000000000LL) == 0) {
        uint64_t result = sub_186F87F04();
      }
      int64_t v21 = *(_BYTE *)(result + v20);
      if (v19 != v14)
      {
LABEL_29:
        if ((a2 & 0x1000000000000000LL) != 0) {
          goto LABEL_33;
        }
        goto LABEL_30;
      }
    }

    uint64_t result = sub_186F43604(v15, a1, a2);
    uint64_t v15 = result;
    if ((a2 & 0x1000000000000000LL) != 0)
    {
LABEL_33:
      if (v11 <= v15 >> 16) {
        goto LABEL_45;
      }
      uint64_t v15 = sub_186F87C04();
      goto LABEL_35;
    }

  swift_release();
  int64_t v21 = v6[3];
  if (v21 >= 2)
  {
    uint64_t v22 = v21 >> 1;
    char v20 = __OFSUB__(v22, v7);
    uint64_t v23 = v22 - v7;
    if (v20) {
      goto LABEL_25;
    }
    void v6[2] = v23;
  }

  return v6;
}

  swift_release();
  unsigned __int8 v19 = v4[3];
  if (v19 >= 2)
  {
    char v20 = v19 >> 1;
    char v18 = __OFSUB__(v20, v5);
    int64_t v21 = v20 - v5;
    if (v18) {
      goto LABEL_25;
    }
    void v4[2] = v21;
  }

  return v4;
}

  swift_release();
  char v20 = v5[3];
  if (v20 >= 2)
  {
    int64_t v21 = v20 >> 1;
    unsigned __int8 v19 = __OFSUB__(v21, v6);
    uint64_t v22 = v21 - v6;
    if (v19) {
      goto LABEL_25;
    }
    v5[2] = v22;
  }

  return v5;
}

  swift_release();
  char v20 = v5[3];
  if (v20 >= 2)
  {
    int64_t v21 = v20 >> 1;
    unsigned __int8 v19 = __OFSUB__(v21, v6);
    uint64_t v22 = v21 - v6;
    if (v19) {
      goto LABEL_25;
    }
    v5[2] = v22;
  }

  return v5;
}

  swift_release();
  unsigned __int8 v19 = v4[3];
  if (v19 >= 2)
  {
    char v20 = v19 >> 1;
    char v18 = __OFSUB__(v20, v5);
    int64_t v21 = v20 - v5;
    if (v18) {
      goto LABEL_25;
    }
    void v4[2] = v21;
  }

  return v4;
}

uint64_t sub_186F42B5C(unint64_t a1)
{
  int64_t v6 = v5;
  unint64_t v7 = sub_186F87C64();
  unint64_t v9 = v8;
  unint64_t v11 = v10;
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();
  unint64_t v14 = sub_186F429DC(v7, v9, v11, v13);
  uint64_t v16 = v14 + 64;
  if (__OFADD__(v14, 64LL)) {
    goto LABEL_21;
  }
  unint64_t v49 = v11;
  if (v16 < 0) {
    uint64_t v16 = v14 + 127;
  }
  uint64_t v17 = v16 >> 6;
  if (v17 <= -2) {
    uint64_t v17 = -2LL;
  }
  char v18 = sub_186F3CDBC(0LL, v17 + 2, 0, MEMORY[0x18961AFE8]);
  sub_186F87EEC();
  swift_bridgeObjectRelease();
  sub_186F87CDC();
  sub_186F87BEC();
  swift_bridgeObjectRelease();
  sub_186F87BEC();
  unint64_t v11 = MEMORY[0x18959E618](0x4745422D2D2D2D2DLL, 0xEB00000000204E49LL);
  uint64_t v3 = v19;
  a1 = v20;
  uint64_t v2 = v21;
  uint64_t v15 = v18;
  unint64_t v1 = *((void *)v18 + 2);
  uint64_t v16 = *((void *)v18 + 3);
  int64_t v6 = v1 + 1;
  while (1)
  {
    *((void *)v15 + 2) = v6;
    uint64_t v22 = v15;
    uint64_t v23 = &v15[32 * v1];
    *((void *)v23 + 4) = v11;
    *((void *)v23 + 5) = v3;
    *((void *)v23 + 6) = a1;
    *((void *)v23 + 7) = v2;
    sub_186F87CDC();
    a1 = v49;
    uint64_t v24 = sub_186F87DFC();
    swift_bridgeObjectRelease();
    if (v24 < 1) {
      break;
    }
    while (1)
    {
      sub_186F87CDC();
      int64_t v6 = sub_186F87DD8();
      char v26 = v25;
      swift_bridgeObjectRelease();
      unint64_t v11 = (v26 & 1) != 0 ? v9 : v6;
      unint64_t v1 = v11 >> 14;
      if (v11 >> 14 < v7 >> 14) {
        break;
      }
      sub_186F87CDC();
      unint64_t v49 = a1;
      uint64_t v2 = sub_186F87E14();
      uint64_t v3 = v27;
      a1 = v28;
      uint64_t v48 = v29;
      swift_bridgeObjectRelease();
      uint64_t v15 = v22;
      unint64_t v30 = *((void *)v22 + 2);
      unint64_t v31 = *((void *)v15 + 3);
      int64_t v6 = v30 + 1;
      if (v30 >= v31 >> 1) {
        uint64_t v15 = sub_186F3CDBC((char *)(v31 > 1), v30 + 1, 1, v15);
      }
      *((void *)v15 + 2) = v6;
      uint64_t v16 = (uint64_t)&v15[32 * v30];
      *(void *)(v16 + 32) = v2;
      *(void *)(v16 + 40) = v3;
      *(void *)(v16 + 48) = a1;
      *(void *)(v16 + 56) = v48;
      if (v1 > v9 >> 14) {
        goto LABEL_20;
      }
      uint64_t v22 = v15;
      sub_186F87CDC();
      unint64_t v7 = sub_186F87E14();
      unint64_t v9 = v32;
      a1 = v33;
      uint64_t v2 = v34;
      swift_bridgeObjectRelease_n();
      sub_186F87CDC();
      uint64_t v35 = sub_186F87DFC();
      swift_bridgeObjectRelease();
      if (v35 <= 0) {
        goto LABEL_16;
      }
    }

    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    uint64_t v15 = sub_186F3CDBC((char *)((unint64_t)v16 > 1), v6, 1, v15);
  }

unint64_t sub_186F4302C( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8)
{
  if (a6 >> 14 < a5 >> 14)
  {
    __break(1u);
LABEL_24:
    unint64_t result = sub_186F87BF8();
    uint64_t v20 = result;
    if ((v8 & 0x1000000000000000LL) == 0) {
      goto LABEL_7;
    }
LABEL_25:
    unint64_t result = sub_186F87BF8();
    uint64_t v21 = result;
    if ((v20 & 0x8000000000000000LL) == 0) {
      goto LABEL_11;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    return result;
  }

  unint64_t v8 = a4;
  unint64_t v10 = a3;
  unint64_t v9 = a2;
  unint64_t v11 = a1;
  unint64_t result = sub_186F4367C(a5, a6, a5, a6, a7, a8);
  unint64_t v13 = result;
  unint64_t v14 = v17;
  unint64_t v15 = v18;
  uint64_t v12 = v19;
  if ((v9 & 0x1000000000000000LL) != 0) {
    goto LABEL_24;
  }
  if ((v9 & 0x2000000000000000LL) != 0) {
    uint64_t v20 = HIBYTE(v9) & 0xF;
  }
  else {
    uint64_t v20 = v11 & 0xFFFFFFFFFFFFLL;
  }
  if ((v8 & 0x1000000000000000LL) != 0) {
    goto LABEL_25;
  }
LABEL_7:
  if ((v8 & 0x2000000000000000LL) != 0) {
    uint64_t v21 = HIBYTE(v8) & 0xF;
  }
  else {
    uint64_t v21 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (v20 < 0) {
    goto LABEL_26;
  }
LABEL_11:
  sub_186F87CDC();
  unint64_t result = sub_186F87DE4();
  if ((v22 & 1) != 0) {
    unint64_t v23 = v14;
  }
  else {
    unint64_t v23 = result;
  }
  if (v23 >> 14 < v13 >> 14) {
    goto LABEL_27;
  }
  unint64_t v58 = v11;
  uint64_t v24 = sub_186F4367C(v13, v23, v13, v14, v15, v12);
  uint64_t v56 = v25;
  unint64_t v57 = v24;
  unint64_t v55 = v26;
  unint64_t v28 = v27;
  sub_186F87CDC();
  sub_186F87CDC();
  unint64_t result = sub_186F87DE4();
  if ((v29 & 1) != 0) {
    unint64_t result = v14;
  }
  if (v14 >> 14 < result >> 14) {
    goto LABEL_28;
  }
  unint64_t v54 = v10;
  unint64_t v30 = sub_186F4367C(result, v14, v13, v14, v15, v12);
  unint64_t v32 = v31;
  unint64_t v34 = v33;
  unint64_t v36 = v35;
  sub_186F87CDC();
  swift_bridgeObjectRelease_n();
  unint64_t v37 = sub_186F5FB3C(v21, v30, v32, v34, v36);
  uint64_t v52 = v38;
  unint64_t v53 = v37;
  unint64_t v51 = v39;
  unint64_t v41 = v40;
  unint64_t v42 = sub_186F5FC68(v21, v30, v32, v34, v36);
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  sub_186F87CDC();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  sub_186F87CDC();
  LOBYTE(v32) = sub_186F43320(v58, v9, v57, v56, v55, v28);
  swift_bridgeObjectRelease();
  if ((v32 & 1) != 0
    && (sub_186F87CDC(), char v49 = sub_186F43320(v54, v8, v53, v52, v51, v41), swift_bridgeObjectRelease(), (v49 & 1) != 0))
  {
    uint64_t v50 = MEMORY[0x18959E468](v42, v44, v46, v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v50 = 0LL;
  }

  swift_bridgeObjectRelease();
  return v50;
}

unint64_t sub_186F43320( unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v9 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000LL) == 0) {
    LOBYTE(v9) = 1;
  }
  if ((a6 & 0x2000000000000000LL) != 0) {
    uint64_t v10 = HIBYTE(a6) & 0xF;
  }
  else {
    uint64_t v10 = a5 & 0xFFFFFFFFFFFFLL;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    unint64_t v11 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v12 = 4LL << v9;
  uint64_t v29 = 4 * v11;
  uint64_t v13 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000LL) == 0) {
    LOBYTE(v13) = 1;
  }
  uint64_t v14 = 4LL << v13;
  uint64_t v25 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v26 = v12;
  unint64_t v23 = v10;
  uint64_t v24 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  sub_186F87CDC();
  sub_186F87CDC();
  unint64_t v15 = 15LL;
  while (1)
  {
    unint64_t v16 = a3 ^ a4;
    if ((a3 ^ a4) < 0x4000)
    {
      if (v29 != v15 >> 14)
      {
        char v17 = 0;
        goto LABEL_19;
      }

      uint64_t v22 = 1LL;
LABEL_43:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v22;
    }

    unint64_t result = sub_186F87DF0();
    char v17 = result;
    if ((a3 & 0xC) == v26)
    {
      unint64_t result = sub_186F43604(a3, a5, a6);
      a3 = result;
      if ((a6 & 0x1000000000000000LL) == 0)
      {
LABEL_17:
        a3 = (a3 & 0xFFFFFFFFFFFF0000LL) + 65540;
        goto LABEL_18;
      }
    }

    else if ((a6 & 0x1000000000000000LL) == 0)
    {
      goto LABEL_17;
    }

    if (v23 <= a3 >> 16) {
      goto LABEL_46;
    }
    a3 = sub_186F87C04();
LABEL_18:
    if (v29 == v15 >> 14)
    {
      uint64_t v22 = 0LL;
      goto LABEL_43;
    }

LABEL_30:
    unint64_t v15 = (v15 & 0xFFFFFFFFFFFF0000LL) + 65540;
LABEL_35:
    uint64_t v22 = 0LL;
    if (v16 < 0x4000 || v17 != v21) {
      goto LABEL_43;
    }
  }

  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

unint64_t sub_186F435C0()
{
  unint64_t result = qword_18C6B0DF8;
  if (!qword_18C6B0DF8)
  {
    unint64_t result = MEMORY[0x18959EFD8](MEMORY[0x189618C78], MEMORY[0x189618C50]);
    atomic_store(result, (unint64_t *)&qword_18C6B0DF8);
  }

  return result;
}

uint64_t sub_186F43604(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v10 = sub_186F87C40();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000LL;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }

  else
  {
    uint64_t v5 = MEMORY[0x18959E42C](15LL, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000LL;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }

uint64_t sub_186F4367C( uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  unint64_t v11 = result;
  uint64_t v12 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000LL) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4LL << v12;
  if ((a2 & 0xC) == 4LL << v12)
  {
    unint64_t result = sub_186F43604(a2, a5, a6);
    unint64_t v10 = result;
  }

  if ((v11 & 0xC) == v13)
  {
    unint64_t result = sub_186F43604(v11, a5, a6);
    unint64_t v11 = result;
  }

  if (v10 >> 14 <= a4 >> 14 && v11 >> 14 >= a3 >> 14 && v10 >> 14 >= v11 >> 14) {
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_186F43758(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3)
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (char *)MEMORY[0x18961AFE8];
    unint64_t v2 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
    if (v2) {
      goto LABEL_32;
    }
LABEL_48:
    sub_186F36690();
    swift_allocError();
    *char v49 = 7;
    swift_willThrow();
    return swift_bridgeObjectRelease();
  }

  uint64_t v4 = a1;
  unint64_t v5 = 4 * v3;
  uint64_t v6 = (char *)MEMORY[0x18961AFE8];
  unint64_t v7 = 15LL;
  unint64_t v8 = 15LL;
  unint64_t v9 = 15LL;
  uint64_t v70 = 4 * v3;
  do
  {
    while (1)
    {
      uint64_t v11 = sub_186F87C4C();
      if ((v12 & 0x2000000000000000LL) != 0) {
        uint64_t v13 = HIBYTE(v12) & 0xF;
      }
      else {
        uint64_t v13 = v11 & 0xFFFFFFFFFFFFLL;
      }
      if (!v13)
      {
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }

      if ((v12 & 0x1000000000000000LL) != 0)
      {
        uint64_t v14 = sub_186F87EE0();
      }

      else
      {
        if ((v12 & 0x2000000000000000LL) == 0 && (v11 & 0x1000000000000000LL) == 0) {
          sub_186F87F04();
        }
        uint64_t v14 = sub_186F87F10();
      }

      unint64_t v2 = v14;
      swift_bridgeObjectRelease();
      if (v8 >> 14 != v7 >> 14)
      {
        if (v7 >> 14 < v8 >> 14) {
          goto LABEL_80;
        }
        uint64_t v15 = sub_186F87C64();
        uint64_t v17 = v16;
        uint64_t v19 = v18;
        unint64_t v2 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v6 = sub_186F3CDBC(0LL, *((void *)v6 + 2) + 1LL, 1, v6);
        }
        unint64_t v22 = *((void *)v6 + 2);
        unint64_t v21 = *((void *)v6 + 3);
        unint64_t v23 = v6;
        if (v22 >= v21 >> 1) {
          unint64_t v23 = sub_186F3CDBC((char *)(v21 > 1), v22 + 1, 1, v6);
        }
        *((void *)v23 + 2) = v22 + 1;
        uint64_t v6 = v23;
        unint64_t v10 = &v23[32 * v22];
        *((void *)v10 + 4) = v15;
        *((void *)v10 + 5) = v17;
        *((void *)v10 + 6) = v19;
        *((void *)v10 + 7) = v2;
        unint64_t v5 = v70;
      }

      unint64_t v7 = sub_186F87BE0();
      unint64_t v8 = v7;
      unint64_t v9 = v7;
      if (v5 == v7 >> 14) {
        goto LABEL_28;
      }
    }

    unint64_t v7 = sub_186F87BE0();
  }

  while (v5 != v7 >> 14);
LABEL_28:
  if (v5 != v8 >> 14)
  {
    if (v5 >= v9 >> 14)
    {
      uint64_t v4 = sub_186F87C64();
      unint64_t v2 = v42;
      unint64_t v7 = v43;
      unint64_t v8 = v44;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
        goto LABEL_42;
      }
      goto LABEL_83;
    }

LABEL_82:
    __break(1u);
LABEL_83:
    uint64_t v6 = sub_186F3CDBC(0LL, *((void *)v6 + 2) + 1LL, 1, v6);
LABEL_42:
    unint64_t v46 = *((void *)v6 + 2);
    unint64_t v45 = *((void *)v6 + 3);
    uint64_t v47 = v6;
    if (v46 >= v45 >> 1) {
      uint64_t v47 = sub_186F3CDBC((char *)(v45 > 1), v46 + 1, 1, v6);
    }
    *((void *)v47 + 2) = v46 + 1;
    uint64_t v6 = v47;
    uint64_t v48 = &v47[32 * v46];
    *((void *)v48 + 4) = v4;
    *((void *)v48 + 5) = v2;
    *((void *)v48 + 6) = v7;
    *((void *)v48 + 7) = v8;
    unint64_t v2 = *((void *)v47 + 2);
    if (v2) {
      goto LABEL_32;
    }
    goto LABEL_48;
  }

  swift_bridgeObjectRelease();
  unint64_t v2 = *((void *)v6 + 2);
  if (!v2) {
    goto LABEL_48;
  }
LABEL_32:
  uint64_t v24 = v6 + 32;
  uint64_t v25 = v6;
  unint64_t v27 = *((void *)v6 + 4);
  unint64_t v26 = *((void *)v6 + 5);
  unint64_t v28 = *((void *)v25 + 6);
  uint64_t v29 = *((void *)v25 + 7);
  uint64_t v30 = (uint64_t)v25;
  uint64_t v69 = (uint64_t)v24;
  unint64_t v31 = &v24[32 * v2];
  unint64_t v32 = *((void *)v31 - 4);
  unint64_t v33 = *((void *)v31 - 3);
  unint64_t v35 = *((void *)v31 - 2);
  uint64_t v34 = *((void *)v31 - 1);
  sub_186F87CDC();
  sub_186F87CDC();
  unint64_t v71 = sub_186F4302C( 0x4745422D2D2D2D2DuLL,  0xEB00000000204E49LL,  0x2D2D2D2D2DuLL,  0xE500000000000000LL,  v27,  v26,  v28,  v29);
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  if (!v37)
  {
LABEL_46:
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }

  sub_186F87CDC();
  unint64_t v38 = sub_186F4302C( 0x444E452D2D2D2D2DuLL,  0xE900000000000020LL,  0x2D2D2D2D2DuLL,  0xE500000000000000LL,  v32,  v33,  v35,  v34);
  unint64_t v8 = v39;
  swift_bridgeObjectRelease();
  if (!v8)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_48;
  }

  if (v71 == v38 && v37 == v8)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    char v41 = sub_186F87F70();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v41 & 1) == 0) {
      goto LABEL_46;
    }
  }

  uint64_t result = sub_186F42AC8(1LL, v30, v69, 1LL, (2 * v2) | 1);
  if (__OFSUB__(v53 >> 1, v52))
  {
    __break(1u);
    goto LABEL_85;
  }

  unint64_t v7 = result;
  if ((uint64_t)((v53 >> 1) - v52) < 1)
  {
LABEL_76:
    swift_bridgeObjectRelease();
LABEL_77:
    sub_186F36690();
    swift_allocError();
    *unint64_t v65 = 7;
    swift_willThrow();
    return swift_unknownObjectRelease();
  }

  uint64_t v66 = v51;
  int64_t v67 = v53 >> 1;
  uint64_t v68 = v52;
  uint64_t result = sub_186F42AC8(1LL, result, v51, v52, v53);
  unint64_t v56 = result;
  uint64_t v4 = v57 >> 1;
  if (v55 != v57 >> 1)
  {
    uint64_t v58 = v55;
    uint64_t v6 = (char *)(v54 + 32 * v55 + 16);
    do
    {
      if (v58 >= v4) {
        goto LABEL_81;
      }
      unint64_t v59 = *((void *)v6 - 2);
      unint64_t v8 = *((void *)v6 - 1);
      uint64_t v60 = *(void *)v6;
      unint64_t v2 = *((void *)v6 + 1);
      uint64_t v61 = (*(void *)v6 >> 59) & 1LL;
      if ((v2 & 0x1000000000000000LL) == 0) {
        LOBYTE(v61) = 1;
      }
      unint64_t v7 = 4LL << v61;
      if ((*((void *)v6 - 2) & 0xCLL) == 4LL << v61)
      {
        uint64_t result = sub_186F43604(*((void *)v6 - 2), *(void *)v6, *((void *)v6 + 1));
        unint64_t v59 = result;
      }

      if ((v8 & 0xC) == v7)
      {
        unint64_t v7 = v56;
        uint64_t result = sub_186F43604(v8, v60, v2);
        unint64_t v8 = result;
        if ((v2 & 0x1000000000000000LL) == 0)
        {
LABEL_65:
          uint64_t result = (v8 >> 16) - (v59 >> 16);
          if (result != 64) {
            goto LABEL_74;
          }
          goto LABEL_66;
        }
      }

      else if ((v2 & 0x1000000000000000LL) == 0)
      {
        goto LABEL_65;
      }

      unint64_t v62 = HIBYTE(v2) & 0xF;
      if ((v2 & 0x2000000000000000LL) == 0) {
        unint64_t v62 = v60 & 0xFFFFFFFFFFFFLL;
      }
      if (v62 < v59 >> 16) {
        goto LABEL_87;
      }
      if (v62 < v8 >> 16) {
        goto LABEL_88;
      }
      unint64_t v7 = v56;
      uint64_t result = sub_186F87C28();
      if (result != 64)
      {
LABEL_74:
        swift_unknownObjectRetain();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        goto LABEL_77;
      }

LABEL_66:
      ++v58;
      v6 += 32;
    }

    while (v4 != v58);
  }

  swift_unknownObjectRetain_n();
  uint64_t result = swift_unknownObjectRelease();
  if (v68 == v67)
  {
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    return result;
  }

  if (v67 <= v68) {
    goto LABEL_86;
  }
  if ((uint64_t)sub_186F429DC( *(void *)(v66 + 32 * v67 - 32),  *(void *)(v66 + 32 * v67 - 24),  *(void *)(v66 + 32 * v67 - 16),  *(void *)(v66 + 32 * v67 - 8)) > 64)
  {
    swift_unknownObjectRelease();
    goto LABEL_76;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6B0E00);
  sub_186F3A490(&qword_18C6B0E08, &qword_18C6B0E00, MEMORY[0x189618F90]);
  sub_186F435C0();
  sub_186F87CAC();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_186F87A18();
  unint64_t v64 = v63;
  swift_bridgeObjectRelease();
  if (v64 >> 60 == 15) {
    goto LABEL_76;
  }
  swift_unknownObjectRelease();
  return v71;
}

uint64_t static AES.CCM.seal<A, B>(_:using:nonce:authenticating:)( uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v20 = a7;
  uint64_t v18 = a1;
  uint64_t v19 = a5;
  uint64_t v11 = sub_186F87DCC();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v17 - v13;
  uint64_t v23 = *a2;
  __int128 v22 = *a3;
  uint64_t v15 = *(void *)(a6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v17 - v13, a4, a6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v14, 0LL, 1LL, a6);
  unsigned __int8 v21 = 1;
  sub_186F5487C(v18, &v23, (uint64_t *)&v22, (uint64_t)v14, &v21);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t static AES.CCM.seal<A>(_:using:nonce:)(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v9 = *a2;
  __int128 v4 = *a3;
  __int128 v7 = xmmword_186F89E20;
  __int128 v8 = v4;
  unsigned __int8 v6 = 1;
  sub_186F44100();
  return sub_186F5487C(a1, &v9, (uint64_t *)&v8, (uint64_t)&v7, &v6);
}

unint64_t sub_186F44100()
{
  unint64_t result = qword_18C4B54C8;
  if (!qword_18C4B54C8)
  {
    unint64_t result = MEMORY[0x18959EFD8](MEMORY[0x189606D48], MEMORY[0x189606D70]);
    atomic_store(result, (unint64_t *)&qword_18C4B54C8);
  }

  return result;
}

uint64_t static AES.CCM.open<A>(_:using:authenticating:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_186F87DCC();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)v17 - v10;
  LOBYTE(v10) = *(_BYTE *)(a1 + 48);
  uint64_t v12 = *a2;
  __int128 v13 = *(_OWORD *)(a1 + 16);
  v17[0] = *(_OWORD *)a1;
  v17[1] = v13;
  void v17[2] = *(_OWORD *)(a1 + 32);
  char v18 = v10;
  uint64_t v19 = v12;
  uint64_t v14 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v11, a3, a4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, a4);
  uint64_t v15 = sub_186F54B44((uint64_t)v17, &v19, (uint64_t)v11, a4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v15;
}

uint64_t sub_186F44268(uint64_t a1, uint64_t a2)
{
  v10[4] = *MEMORY[0x1895F89C0];
  ccaes_ccm_decrypt_mode();
  swift_beginAccess();
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >> 60)
  {
    __break(1u);
    JUMPOUT(0x186F44710LL);
  }

  uint64_t v5 = 8 * v4;
  if (v5 == 128 || v5 == 256 || v5 == 192)
  {
    __int128 v8 = *(_OWORD *)(a1 + 16);
    sub_186F44D4C((uint64_t)&v8, (uint64_t)v9);
    sub_186F44D4C((uint64_t)v9, (uint64_t)v10);
    __asm { BR              X11 }
  }

  sub_186F35D6C();
  swift_allocError();
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  swift_willThrow();
  return a1;
}

uint64_t static AES.CCM.open(_:using:)(uint64_t a1, uint64_t *a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v2;
  void v4[2] = *(_OWORD *)(a1 + 32);
  char v5 = *(_BYTE *)(a1 + 48);
  return sub_186F44268((uint64_t)v4, *a2);
}

ValueMetadata *type metadata accessor for AES.CCM()
{
  return &type metadata for AES.CCM;
}

void sub_186F447AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  __int128 v3 = *(_OWORD *)(a3 + 32);
  sub_186F44D4C((uint64_t)&v3, (uint64_t)v4);
  sub_186F44D4C((uint64_t)v4, (uint64_t)v5);
  __asm { BR              X11 }

uint64_t sub_186F44854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 - 104) = a2 & 0x3FFFFFFFFFFFFFFFLL;
  *(void *)(v2 - 288) = *(void *)(v2 - 112);
  *(void *)(v2 - 282) = *(void *)(v2 - 106);
  *(_OWORD *)(v2 - 192) = *(_OWORD *)(v2 - 176);
  MEMORY[0x1895F8858](a1);
  sub_186F5A524();
  return sub_186F44EAC(v2 - 160);
}

void sub_186F44A40(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x186F44D38LL);
}

uint64_t sub_186F44D4C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_186F44D88( uint64_t a1, uint64_t a2, uint64_t a3, char **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t result = sub_186F8797C();
  uint64_t v20 = result;
  if (result)
  {
    uint64_t result = sub_186F879A0();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v20 += a1 - result;
  }

  BOOL v21 = __OFSUB__(a2, a1);
  uint64_t v22 = a2 - a1;
  if (v21)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v23 = sub_186F87994();
  if (v23 >= v22) {
    uint64_t v24 = v22;
  }
  else {
    uint64_t v24 = v23;
  }
  uint64_t v25 = v20 + v24;
  if (v20) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = 0LL;
  }
  return sub_186F55C90(v20, v26, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_186F44E80(uint64_t a1)
{
  return a1;
}

uint64_t sub_186F44EAC(uint64_t a1)
{
  return a1;
}

uint64_t *sub_186F44ED8(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  return a1;
}

void sub_186F44F38()
{
}

void sub_186F44F9C()
{
}

void sub_186F44FB0(uint64_t a1, uint64_t a2)
{
}

void sub_186F44FEC()
{
}

uint64_t static P256.hash2fieldL.getter()
{
  return 48LL;
}

uint64_t static P256.curveType.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F450B4(MEMORY[0x1895F9B10], a1);
}

uint64_t sub_186F45064@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F451D8(MEMORY[0x1895F9B10], a1);
}

uint64_t sub_186F45070()
{
  return 48LL;
}

uint64_t static P384.hash2fieldL.getter()
{
  return 72LL;
}

uint64_t static P384.curveType.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F450B4(MEMORY[0x1895F9B18], a1);
}

uint64_t sub_186F4508C@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F451D8(MEMORY[0x1895F9B18], a1);
}

uint64_t sub_186F45098()
{
  return 72LL;
}

uint64_t static P521.hash2fieldL.getter()
{
  return 98LL;
}

uint64_t static P521.curveType.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F450B4(MEMORY[0x1895F9B20], a1);
}

uint64_t sub_186F450B4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
    a2[3] = result;
    *a2 = v4;
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t sub_186F450F8()
{
  unint64_t result = qword_18C4B54C0;
  if (!qword_18C4B54C0)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SHA256, &type metadata for SHA256);
    atomic_store(result, (unint64_t *)&qword_18C4B54C0);
  }

  return result;
}

unint64_t sub_186F45140()
{
  unint64_t result = qword_18C4B5128;
  if (!qword_18C4B5128)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SHA384, &type metadata for SHA384);
    atomic_store(result, (unint64_t *)&qword_18C4B5128);
  }

  return result;
}

unint64_t sub_186F45188()
{
  unint64_t result = qword_18C6B05D8;
  if (!qword_18C6B05D8)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SHA512, &type metadata for SHA512);
    atomic_store(result, (unint64_t *)&qword_18C6B05D8);
  }

  return result;
}

uint64_t sub_186F451CC@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F451D8(MEMORY[0x1895F9B20], a1);
}

uint64_t sub_186F451D8@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
    a2[3] = result;
    *a2 = v4;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_186F45218()
{
  return 98LL;
}

uint64_t dispatch thunk of static CorecryptoSupportedNISTCurve.curveType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static CorecryptoSupportedNISTCurve.hash2fieldL.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t type metadata accessor for CoreCryptoNISTCurvePrivateKeyImpl( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for CoreCryptoNISTCurvePrivateKeyImpl);
}

uint64_t type metadata accessor for CoreCryptoNISTCurvePublicKeyImpl( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for CoreCryptoNISTCurvePublicKeyImpl);
}

unint64_t sub_186F45248(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_opt_self();
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 24))(v7, a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  swift_dynamicCast();
  unint64_t result = (unint64_t)objc_msgSend(v4, sel_groupOrderByteCountForCP_, v6);
  if ((result & 0x8000000000000000LL) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_186F452E4(uint64_t result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!*a3)
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v6 = result;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a6 + 24))(v9, a4, a6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  unint64_t result = swift_dynamicCast();
  if (!v6)
  {
LABEL_7:
    __break(1u);
    return result;
  }

  unint64_t result = ccec_x963_import_priv();
  if ((_DWORD)result)
  {
    int v7 = result;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = v7;
    *(_BYTE *)(v8 + 4) = 0;
    return swift_willThrow();
  }

  return result;
}

uint64_t sub_186F453C8(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *a3;
  if (!*a3)
  {
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v10 = result;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a6 + 24))(v17, a4, a6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  unint64_t result = swift_dynamicCast();
  if (!v10)
  {
LABEL_14:
    __break(1u);
    return result;
  }

  int v11 = ccec_raw_import_priv_only();
  int v18 = v11;
  if (v11)
  {
    int v12 = v11;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = v12;
    *(_BYTE *)(v13 + 4) = 0;
    return swift_willThrow();
  }

  else
  {
    int64_t v14 = ccec_der_export_priv_size();
    if (v14)
    {
      uint64_t v15 = (void *)sub_186F42888(v14);
    }

    else
    {
      if (qword_18C4B5020 != -1) {
        swift_once();
      }
      uint64_t v15 = off_18C4B5018;
      swift_retain();
    }

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      size_t v16 = sub_186F515FC((uint64_t)v15);
      swift_release();
      uint64_t v15 = (void *)v16;
    }

    swift_beginAccess();
    sub_186F45590((uint64_t)(v15 + 4), (uint64_t)v15 + v15[2] + 32, &v18, v6, a4, a5, a6);
    return swift_release();
  }

uint64_t sub_186F45590( uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!result)
  {
    __break(1u);
    return result;
  }

  int v10 = ccec_der_export_priv();
  *a3 = v10;
  if (v10)
  {
    int v11 = v10;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v12 = v11;
  }

  else
  {
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a7 + 24))(v14, a5, a7);
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
    swift_dynamicCast();
    unint64_t result = ccec_der_import_priv();
    *a3 = result;
    if (!(_DWORD)result) {
      return result;
    }
    int v13 = result;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v12 = v13;
  }

  *(_BYTE *)(v12 + 4) = 0;
  return swift_willThrow();
}

uint64_t sub_186F456CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = 0LL;
  uint64_t v9 = a1;
  sub_186F879B8();
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
  }

  else
  {
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v14, a2, a4);
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
    swift_dynamicCast();
    uint64_t v10 = getccec_pub_ctx_size();
    uint64_t v13 = MEMORY[0x1895F8858](v10);
    uint64_t v9 = sub_186F830E4(v13, (uint64_t (*)(void *, uint64_t *))sub_186F461A8);
    if (v15)
    {
      sub_186F35D6C();
      swift_allocError();
      *(_DWORD *)uint64_t v11 = 1;
      *(_BYTE *)(v11 + 4) = 1;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
      swift_bridgeObjectRelease();
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
    }
  }

  return v9;
}

unint64_t sub_186F4587C(_BYTE *a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result = sub_186F45248(a3, a5);
  if ((uint64_t)(result + 0x4000000000000000LL) < 0)
  {
    __break(1u);
    goto LABEL_11;
  }

  if (!a1 || a2 - a1 != ((2 * result) | 1))
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = 1;
    goto LABEL_8;
  }

  if (a2 == a1)
  {
LABEL_11:
    __break(1u);
    return result;
  }

  if (*a1 == 4) {
    return result;
  }
  sub_186F35D6C();
  swift_allocError();
  *(_DWORD *)uint64_t v8 = 5;
LABEL_8:
  *(_BYTE *)(v8 + 4) = 1;
  return swift_willThrow();
}

uint64_t sub_186F4595C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a1;
  sub_186F879B8();
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
  }

  else
  {
    uint64_t v15 = 0LL;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v14, a2, a4);
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
    swift_dynamicCast();
    uint64_t v10 = getccec_pub_ctx_size();
    uint64_t v13 = MEMORY[0x1895F8858](v10);
    uint64_t v9 = sub_186F830E4(v13, (uint64_t (*)(void *, uint64_t *))sub_186F45F24);
    if (v15)
    {
      sub_186F35D6C();
      swift_allocError();
      *(_DWORD *)uint64_t v11 = 1;
      *(_BYTE *)(v11 + 4) = 1;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
      swift_bridgeObjectRelease();
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
    }
  }

  return v9;
}

unint64_t sub_186F45B0C(_BYTE *a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result = sub_186F45248(a3, a5);
  if (__OFADD__(result, 1LL))
  {
    __break(1u);
    return result;
  }

  uint64_t v8 = a2 - a1;
  if (!a1) {
    uint64_t v8 = 0LL;
  }
  if (v8 != result + 1)
  {
    sub_186F35D6C();
    swift_allocError();
    int v10 = 1;
    goto LABEL_10;
  }

  if (!a1 || a2 == a1 || (*a1 & 0xFE) != 2)
  {
    sub_186F35D6C();
    swift_allocError();
    int v10 = 5;
LABEL_10:
    *(_DWORD *)uint64_t v9 = v10;
    *(_BYTE *)(v9 + 4) = 1;
    return swift_willThrow();
  }

  return result;
}

void *sub_186F45BE8(void *result)
{
  if (*result) {
    return (void *)sub_186F879B8();
  }
  __break(1u);
  return result;
}

uint64_t sub_186F45C48( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  (*(void (**)(void *__return_ptr, uint64_t))(a9 + 24))(v19, a7);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  uint64_t result = swift_dynamicCast();
  if (a1)
  {
    uint64_t result = a11(v18, a2 - a1, a1, a4);
    *a3 = (int)result;
    *a5 = a6;
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t sub_186F45D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_186F45D48(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t *))sub_186F45E38);
}

unint64_t sub_186F45D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_186F45D48(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t *))sub_186F45E00);
}

unint64_t sub_186F45D48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void *, uint64_t *))
{
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v15, a2, a4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  swift_dynamicCast();
  void v13[2] = a2;
  v13[3] = a3;
  v13[4] = a4;
  v13[5] = a5;
  v13[6] = a1;
  unint64_t v14 = getccec_full_ctx_size();
  return sub_186F4267C(v14, a6, (uint64_t)v13);
}

uint64_t sub_186F45E00(uint64_t a1, void *a2)
{
  return sub_186F45E54(a1, a2);
}

uint64_t sub_186F45E1C(uint64_t a1, uint64_t a2)
{
  return sub_186F45EE4( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_186F453C8);
}

uint64_t sub_186F45E38(uint64_t a1, void *a2)
{
  return sub_186F45E54(a1, a2);
}

uint64_t sub_186F45E54(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(v2 + 56);
  uint64_t result = sub_186F879B8();
  if (!v3) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_186F45EC8(uint64_t a1, uint64_t a2)
{
  return sub_186F45EE4( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_186F452E4);
}

uint64_t sub_186F45EE4( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void))
{
  return a3(a1, a2, v3[6], v3[2], v3[3], v3[4], v3[5]);
}

unint64_t sub_186F45F08(_BYTE *a1, _BYTE *a2)
{
  return sub_186F45B0C(a1, a2, v2[2], v2[3], v2[4]);
}

void *sub_186F45F24(void *a1)
{
  return sub_186F45F94(a1);
}

uint64_t sub_186F45F40(uint64_t a1, uint64_t a2)
{
  return sub_186F45FE4(a1, a2, MEMORY[0x1895F9AF0]);
}

uint64_t sub_186F45F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_186F46038(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t *))sub_186F45F78);
}

void *sub_186F45F78(void *a1)
{
  return sub_186F45F94(a1);
}

void *sub_186F45F94(void *a1)
{
  return sub_186F45BE8(a1);
}

uint64_t sub_186F45FC8(uint64_t a1, uint64_t a2)
{
  return sub_186F45FE4(a1, a2, MEMORY[0x1895F9AD8]);
}

uint64_t sub_186F45FE4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  return sub_186F45C48( a1,  a2,  *(void **)(v3 + 48),  *(void *)(v3 + 56),  *(void **)(v3 + 64),  *(void *)(v3 + 72),  *(void *)(v3 + 16),  *(void *)(v3 + 24),  *(void *)(v3 + 32),  *(void *)(v3 + 40),  a3);
}

uint64_t sub_186F4601C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_186F46038(a1, a2, a3, a4, a5, (uint64_t (*)(void *, uint64_t *))sub_186F46154);
}

uint64_t sub_186F46038( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void *, uint64_t *))
{
  uint64_t v12 = 0LL;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v11, a2, a4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  swift_dynamicCast();
  uint64_t v10 = getccec_pub_ctx_size();
  uint64_t v7 = sub_186F830E4(v10, a6);
  if (v12)
  {
    swift_bridgeObjectRelease();
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = 1;
    *(_BYTE *)(v8 + 4) = 1;
    swift_willThrow();
  }

  return v7;
}

void *sub_186F46154(void *a1)
{
  return sub_186F45F94(a1);
}

uint64_t sub_186F46170(uint64_t a1, uint64_t a2)
{
  return sub_186F45FE4(a1, a2, MEMORY[0x1895F9BD0]);
}

unint64_t sub_186F4618C(_BYTE *a1, _BYTE *a2)
{
  return sub_186F4587C(a1, a2, v2[2], v2[3], v2[4]);
}

void *sub_186F461A8(void *a1)
{
  return sub_186F45F94(a1);
}

uint64_t sub_186F461C4(uint64_t a1, uint64_t a2)
{
  return sub_186F45FE4(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1895F9BA8]);
}

void sub_186F461E0()
{
  uint64_t v1 = v0[2];
  unint64_t v2 = v0[3];
  uint64_t v3 = v2 >> 1;
  if (v1 == v2 >> 1) {
    goto LABEL_2;
  }
  if (v1 >= (uint64_t)(v2 >> 1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v5 = v0[1];
  uint64_t v6 = v0[2];
  if (*(char *)(v5 + v1) < 0)
  {
    uint64_t v6 = v1 + 1;
    if (v1 + 1 == v3)
    {
LABEL_2:
      sub_186F36690();
      swift_allocError();
      *uint64_t v4 = 3;
      swift_willThrow();
      return;
    }

    while (v6 < v3)
    {
      uint64_t v10 = v6 + 1;
      if (__OFADD__(v6, 1LL)) {
        goto LABEL_15;
      }
      ++v6;
      if (v10 == v3) {
        goto LABEL_2;
      }
    }

    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

uint64_t sub_186F462DC(uint64_t result, void *a2)
{
  uint64_t v2 = a2[2];
  if (!v2)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  if (v2 == 1)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  unint64_t v4 = a2[4];
  if (!is_mul_ok(v4, 0x28uLL))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v5 = 40 * v4;
  uint64_t v6 = a2[5];
  unint64_t v7 = v5 + v6;
  if (!__CFADD__(v5, v6))
  {
    unint64_t v8 = (char **)result;
    sub_186F87CDC();
    uint64_t result = sub_186F46B90(v7, v8);
    uint64_t v9 = v2 - 2;
    if (!v9) {
      return swift_bridgeObjectRelease();
    }
    uint64_t v10 = 0LL;
    while (v9 != v10)
    {
      uint64_t result = sub_186F46B90(a2[v10++ + 6], v8);
      if (v9 == v10) {
        return swift_unknownObjectRelease();
      }
    }

    __break(1u);
    goto LABEL_12;
  }

uint64_t sub_186F463B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_186F87FF4();
  if (v2)
  {
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 8LL;
      sub_186F87FF4();
      --v2;
    }

    while (v2);
  }

  return sub_186F88018();
}

uint64_t sub_186F46424()
{
  return sub_186F463B8(*v0);
}

uint64_t sub_186F4642C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  uint64_t result = sub_186F87FF4();
  if (v2)
  {
    uint64_t v4 = v1 + 32;
    do
    {
      v4 += 8LL;
      uint64_t result = sub_186F87FF4();
      --v2;
    }

    while (v2);
  }

  return result;
}

uint64_t sub_186F4647C()
{
  uint64_t v1 = *v0;
  sub_186F87FDC();
  uint64_t v2 = *(void *)(v1 + 16);
  sub_186F87FF4();
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8LL;
      sub_186F87FF4();
      --v2;
    }

    while (v2);
  }

  return sub_186F88018();
}

BOOL sub_186F464E4(void **a1, void **a2)
{
  return sub_186F46718(*a1, *a2);
}

uint64_t sub_186F464F0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

unint64_t sub_186F464FC()
{
  unint64_t result = qword_18C6B0F88;
  if (!qword_18C6B0F88)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F89FA0, &_s20ASN1ObjectIdentifierVN);
    atomic_store(result, (unint64_t *)&qword_18C6B0F88);
  }

  return result;
}

void sub_186F46540()
{
  qword_18C6B5F88 = (uint64_t)&unk_189FABBC8;
}

void sub_186F46554()
{
  qword_18C6B5F90 = (uint64_t)&unk_189FABC20;
}

void sub_186F46568()
{
  qword_18C6B5F98 = (uint64_t)&unk_189FABC68;
}

void sub_186F4657C()
{
  qword_18C6B5F08 = (uint64_t)&unk_189FABD00;
}

void sub_186F46590()
{
  qword_18C6B5FA0 = (uint64_t)&unk_189FABB78;
}

void sub_186F465A4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v7 = 7 * v5;
  if ((unsigned __int128)(v5 * (__int128)7LL) >> 64 != (7 * v5) >> 63)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  if (!__OFADD__(v7, 7LL))
  {
    if (v7 + 7 > 71)
    {
      sub_186F36690();
      swift_allocError();
      *unint64_t v8 = 3;
      swift_willThrow();
      swift_unknownObjectRelease();
      return;
    }

    uint64_t v10 = sub_186F7F1E4(0LL, v7, 7LL);
    uint64_t v11 = *(void *)(v10 + 16);
    if (!v11)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return;
    }

    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    if (a3 <= v4) {
      uint64_t v14 = v4;
    }
    else {
      uint64_t v14 = a3;
    }
    unint64_t v15 = v14 - a3;
    while (v15 > v11 - 1)
    {
      unint64_t v17 = *(void *)(v10 + 8 * v13 + 32);
      if (v17 - 65 <= 0xFFFFFFFFFFFFFF7ELL)
      {
        unint64_t v16 = 0LL;
      }

      else
      {
        unint64_t v18 = *(_BYTE *)(a2 + a3 + v13) & 0x7F;
        if ((v17 & 0x8000000000000000LL) != 0)
        {
          unint64_t v20 = v18 >> -(char)v17;
          if (v17 <= 0xFFFFFFFFFFFFFFC0LL) {
            unint64_t v16 = 0LL;
          }
          else {
            unint64_t v16 = v20;
          }
        }

        else
        {
          uint64_t v19 = v18 << v17;
          if (v17 >= 0x40) {
            unint64_t v16 = 0LL;
          }
          else {
            unint64_t v16 = v19;
          }
        }
      }

      ++v13;
      v12 |= v16;
      if (v11 == v13) {
        goto LABEL_22;
      }
    }

    __break(1u);
    goto LABEL_24;
  }

LABEL_26:
  __break(1u);
}

BOOL sub_186F46718(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  if (a1[4] != a2[4]) {
    return 0LL;
  }
  uint64_t v3 = a1 + 5;
  int64_t v4 = a2 + 5;
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    uint64_t v8 = *v3++;
    uint64_t v7 = v8;
    uint64_t v9 = *v4++;
    --v5;
  }

  while (v7 == v9);
  return result;
}

char *sub_186F46784(char *result, char a2, uint64_t a3, char *a4)
{
  uint64_t v8 = (uint64_t)result;
  if (*result != a2)
  {
    sub_186F36690();
    swift_allocError();
    *unint64_t v16 = 1;
    swift_willThrow();
    return (char *)sub_186F366D4(v8);
  }

  if (result[48] != 1)
  {
LABEL_48:
    __break(1u);
    return result;
  }

  uint64_t v9 = v5;
  unint64_t v10 = *((void *)result + 3);
  unint64_t v40 = v10;
  unint64_t v41 = *((void *)result + 4);
  int64_t v11 = v41 >> 1;
  uint64_t v12 = (v41 >> 1) - v10;
  if (__OFSUB__(v41 >> 1, v10))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  swift_unknownObjectRetain();
  uint64_t v6 = (char *)MEMORY[0x18961AFE8];
  if (v12 >= 1)
  {
    do
    {
      sub_186F461E0();
      if (v9)
      {
        sub_186F366D4(v8);
        swift_bridgeObjectRelease();
        return (char *)swift_unknownObjectRelease();
      }

      uint64_t v14 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = sub_186F3CCBC(0LL, *((void *)v6 + 2) + 1LL, 1, v6);
      }
      unint64_t v7 = *((void *)v6 + 2);
      unint64_t v15 = *((void *)v6 + 3);
      unint64_t v4 = v7 + 1;
      if (v7 >= v15 >> 1) {
        uint64_t v6 = sub_186F3CCBC((char *)(v15 > 1), v7 + 1, 1, v6);
      }
      *((void *)v6 + 2) = v4;
      *(void *)&v6[8 * v7 + 32] = v14;
      unint64_t v10 = v41 >> 1;
      int64_t v11 = (v41 >> 1) - v40;
      if (__OFSUB__(v41 >> 1, v40))
      {
        __break(1u);
        goto LABEL_39;
      }
    }

    while (v11 > 0);
    if (v4 < 2) {
      goto LABEL_15;
    }
LABEL_19:
    BOOL result = sub_186F3CCBC(0LL, v4 + 1, 0, MEMORY[0x18961AFE8]);
    int64_t v11 = *((void *)v6 + 2);
    if (v11)
    {
      a4 = result;
      unint64_t v7 = (unint64_t)(v6 + 32);
      unint64_t v19 = *((void *)v6 + 4);
      if (v19 <= 0x27)
      {
        int64_t v11 = *((void *)result + 2);
        unint64_t v10 = *((void *)result + 3);
        unint64_t v4 = v11 + 1;
        if (v11 < v10 >> 1) {
          goto LABEL_22;
        }
        goto LABEL_41;
      }

      unint64_t v21 = *((void *)result + 2);
      unint64_t v22 = *((void *)result + 3);
      unint64_t v23 = v22 >> 1;
      unint64_t v24 = v21 + 1;
      if (v19 <= 0x4F)
      {
        if (v23 <= v21)
        {
          unint64_t v30 = v21 + 1;
          unint64_t v37 = *((void *)result + 2);
          BOOL result = sub_186F3CCBC((char *)(v22 > 1), v21 + 1, 1, result);
          unint64_t v21 = v37;
          unint64_t v24 = v30;
          a4 = result;
        }

        *((void *)a4 + 2) = v24;
        *(void *)&a4[8 * v21 + 32] = 1LL;
        unint64_t v22 = *((void *)v6 + 2);
        if (!v22)
        {
          __break(1u);
          goto LABEL_45;
        }

        unint64_t v22 = *(void *)v7 - 40LL;
        if (*(void *)v7 >= 0x28uLL)
        {
LABEL_34:
          unint64_t v25 = *((void *)a4 + 3);
          unint64_t v26 = v21 + 2;
          if (v24 >= v25 >> 1)
          {
            unint64_t v33 = v22;
            unint64_t v36 = v24;
            uint64_t v29 = sub_186F3CCBC((char *)(v25 > 1), v21 + 2, 1, a4);
            unint64_t v22 = v33;
            unint64_t v24 = v36;
            a4 = v29;
          }

          *((void *)a4 + 2) = v26;
          *(void *)&a4[8 * v24 + 32] = v22;
          goto LABEL_37;
        }

        __break(1u);
      }

      if (v23 > v21)
      {
LABEL_32:
        *((void *)a4 + 2) = v24;
        *(void *)&a4[8 * v21 + 32] = 2LL;
        if (*((void *)v6 + 2))
        {
          unint64_t v22 = *(void *)v7 - 80LL;
          if (*(void *)v7 >= 0x50uLL) {
            goto LABEL_34;
          }
        }

        else
        {
          __break(1u);
        }

        __break(1u);
        goto LABEL_48;
      }

LABEL_45:
      unint64_t v31 = v24;
      unint64_t v38 = v21;
      BOOL result = sub_186F3CCBC((char *)(v22 > 1), v24, 1, a4);
      unint64_t v21 = v38;
      unint64_t v24 = v31;
      a4 = result;
      goto LABEL_32;
    }

LABEL_40:
    __break(1u);
LABEL_41:
    int64_t v34 = v11;
    unint64_t v27 = sub_186F3CCBC((char *)(v10 > 1), v4, 1, a4);
    int64_t v11 = v34;
    a4 = v27;
LABEL_22:
    *((void *)a4 + 2) = v4;
    *(void *)&a4[8 * v11 + 32] = 0LL;
    uint64_t v20 = *((void *)v6 + 2);
    if (v20)
    {
      uint64_t v20 = *(void *)v7;
      unint64_t v18 = *((void *)a4 + 3);
      v11 += 2LL;
      if (v4 < v18 >> 1)
      {
LABEL_24:
        *((void *)a4 + 2) = v11;
        *(void *)&a4[8 * v4 + 32] = v20;
LABEL_37:
        unint64_t v39 = a4;
        sub_186F87560((uint64_t)v6, v7, *((void *)v6 + 2) != 0LL, (2LL * *((void *)v6 + 2)) | 1);
        swift_bridgeObjectRelease();
        sub_186F366D4(v8);
        swift_unknownObjectRelease();
        return v39;
      }
    }

    else
    {
      __break(1u);
    }

    uint64_t v32 = v20;
    int64_t v35 = v11;
    unint64_t v28 = sub_186F3CCBC((char *)(v18 > 1), v11, 1, a4);
    uint64_t v20 = v32;
    int64_t v11 = v35;
    a4 = v28;
    goto LABEL_24;
  }

  unint64_t v4 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
  if (v4 >= 2) {
    goto LABEL_19;
  }
LABEL_15:
  swift_bridgeObjectRelease();
  sub_186F36690();
  swift_allocError();
  *unint64_t v17 = 2;
  swift_willThrow();
  sub_186F366D4(v8);
  return (char *)swift_unknownObjectRelease();
}

      if (v24 != v17 + 1) {
        goto LABEL_84;
      }
    }

    unint64_t v16 = v43 | (2 * v19);
    BOOL result = swift_unknownObjectRetain();
    unint64_t v46 = a2;
    uint64_t v14 = v10;
    if (v4)
    {
      uint64_t v47 = v16;
      uint64_t v8 = v18;
      a2 = v45;
      unint64_t v27 = v45;
      uint64_t v14 = v10;
      goto LABEL_57;
    }

uint64_t sub_186F46B90(unint64_t a1, char **a2)
{
  if (a1)
  {
    unint64_t v4 = __clz(a1);
    uint64_t v5 = *a2;
    if (v4 - 57 >= 7)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = sub_186F3CB8C(0LL, *((void *)v5 + 2) + 1LL, 1, v5);
      }
      uint64_t v7 = 7 * v6 - 7;
      uint64_t v8 = v6;
      while (v8 <= v6)
      {
        unint64_t v10 = *((void *)v5 + 2);
        unint64_t v9 = *((void *)v5 + 3);
        if (v10 >= v9 >> 1) {
          uint64_t v5 = sub_186F3CB8C((char *)(v9 > 1), v10 + 1, 1, v5);
        }
        --v8;
        *((void *)v5 + 2) = v10 + 1;
        v5[v10 + 32] = (a1 >> v7) | 0x80;
        v7 -= 7LL;
        if (v8 == 1) {
          goto LABEL_17;
        }
      }

      __break(1u);
LABEL_17:
      *a2 = v5;
    }

    char v15 = a1 & 0x7F;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_186F3CB8C(0LL, *((void *)v5 + 2) + 1LL, 1, v5);
      uint64_t v5 = (char *)result;
    }

    unint64_t v13 = *((void *)v5 + 2);
    unint64_t v16 = *((void *)v5 + 3);
    unint64_t v14 = v13 + 1;
    if (v13 >= v16 >> 1)
    {
      uint64_t result = (uint64_t)sub_186F3CB8C((char *)(v16 > 1), v13 + 1, 1, v5);
      uint64_t v5 = (char *)result;
    }
  }

  else
  {
    uint64_t v5 = *a2;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_186F3CB8C(0LL, *((void *)v5 + 2) + 1LL, 1, v5);
      uint64_t v5 = (char *)result;
    }

    unint64_t v13 = *((void *)v5 + 2);
    unint64_t v12 = *((void *)v5 + 3);
    unint64_t v14 = v13 + 1;
    if (v13 >= v12 >> 1)
    {
      uint64_t result = (uint64_t)sub_186F3CB8C((char *)(v12 > 1), v13 + 1, 1, v5);
      uint64_t v5 = (char *)result;
    }

    char v15 = 0;
  }

  *((void *)v5 + 2) = v14;
  v5[v13 + 32] = v15;
  *a2 = v5;
  return result;
}

ValueMetadata *_s20ASN1ObjectIdentifierVMa()
{
  return &_s20ASN1ObjectIdentifierVN;
}

ValueMetadata *type metadata accessor for P256()
{
  return &type metadata for P256;
}

ValueMetadata *type metadata accessor for P384()
{
  return &type metadata for P384;
}

ValueMetadata *type metadata accessor for P521()
{
  return &type metadata for P521;
}

uint64_t static HMAC.isValidAuthenticationCode<A>(_:authenticating:using:)( void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v30 = a2;
  uint64_t v13 = type metadata accessor for HashedAuthenticationCode(0LL, a4, a6, a4);
  uint64_t v32 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  char v15 = (char *)&v26 - v14;
  uint64_t v17 = type metadata accessor for HMAC(0LL, a4, a6, v16);
  uint64_t v31 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v17);
  unint64_t v19 = (char *)&v26 - v18;
  uint64_t v34 = *a3;
  swift_retain();
  uint64_t v27 = a4;
  uint64_t v29 = a6;
  HMAC.init(key:)(&v34, a4, a6);
  uint64_t v20 = v30;
  uint64_t v28 = a5;
  uint64_t v30 = a7;
  HMAC.update<A>(data:)(v20, v17, a5, a7);
  HMAC.finalize()(v17, v15);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_186F879B8();
  uint64_t v21 = v34;
  HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
  if (v21 == v33)
  {
    unint64_t v22 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    MEMORY[0x1895F8858](v22);
    uint64_t v23 = v28;
    *(&v26 - 6) = v27;
    *(&v26 - 5) = v23;
    uint64_t v24 = v30;
    *(&v26 - 4) = v29;
    *(&v26 - 3) = v24;
    *(&v26 - 2) = (uint64_t)v15;
    sub_186F879B8();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v17);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v13);
    return v34;
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v17);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v13);
    return 0LL;
  }

uint64_t sub_186F47038@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a2 - result;
  if (!result) {
    uint64_t v3 = 0LL;
  }
  *a3 = v3;
  return result;
}

uint64_t sub_186F4704C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
}

uint64_t sub_186F470BC@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, BOOL *a3@<X8>)
{
  if (a2)
  {
    if (result)
    {
      uint64_t result = cc_cmp_safe();
      *a3 = (_DWORD)result == 0;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_186F4710C@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  return sub_186F470BC(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_186F47124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_186F47038(a1, a2, a3);
}

uint64_t Digest.makeIterator()()
{
  return v1;
}

size_t sub_186F4719C@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, size_t *a3@<X8>)
{
  size_t result = sub_186F4B3D0(a1, a2);
  *a3 = result;
  a3[1] = 0LL;
  return result;
}

uint64_t static Digest.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_186F6CF48(a1, a2, a3, a3, *(void *)(a4 + 8), *(void *)(a4 + 8));
}

uint64_t static Digest.== infix<A>(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v41 = a5;
  uint64_t v42 = a1;
  uint64_t v43 = a3;
  swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = sub_186F87DCC();
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  unint64_t v38 = (char *)v37 - v12;
  v37[0] = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = swift_checkMetadataState();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  unint64_t v19 = (char *)v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  uint64_t v21 = (char *)v37 - v20;
  uint64_t v40 = a6;
  sub_186F87910();
  v37[1] = v9;
  uint64_t v22 = sub_186F87D3C();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v16 + 8);
  v23(v21, v15);
  if (v22 != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v37[0] + 16LL))(v14, a2, a4);
    uint64_t v34 = sub_186F87AE4();
    unint64_t v36 = v35;
    v44[0] = v34;
    v44[1] = v35;
    char v33 = sub_186F6CF48(v42, v44, v43, MEMORY[0x189606D70], *(void *)(v41 + 8), MEMORY[0x189606D58]);
    sub_186F33C98(v34, v36);
    return v33 & 1;
  }

  uint64_t v24 = v41;
  uint64_t v25 = v42;
  uint64_t v26 = v43;
  sub_186F87910();
  uint64_t v27 = v38;
  sub_186F87D60();
  v23(v19, v15);
  uint64_t v28 = AssociatedTypeWitness;
  uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1LL, AssociatedTypeWitness);
  if ((_DWORD)result != 1)
  {
    uint64_t v31 = *(void *)(v24 + 8);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    char v33 = sub_186F6CF48(v25, v27, v26, v28, v31, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v28);
    return v33 & 1;
  }

  __break(1u);
  return result;
}

uint64_t Digest.description.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_186F88024();
  uint64_t v16 = v6;
  sub_186F87BEC();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  uint64_t result = sub_186F87CF4();
  uint64_t v8 = *(void *)(result + 16);
  if (v8 + 0x4000000000000000LL < 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  size_t v9 = 2 * v8;
  if (2 * v8 < 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }

  uint64_t v10 = result;
  if (v8)
  {
    uint64_t v11 = sub_186F87CE8();
    *(void *)(v11 + 16) = v9;
    bzero((void *)(v11 + 32), v9);
  }

  else
  {
    uint64_t v11 = MEMORY[0x18961AFE8];
  }

  uint64_t v13 = 0LL;
  uint64_t v14 = v11;
  sub_186F87CDC();
  sub_186F3D3B8(v10, &v14, &v13);
  swift_bridgeObjectRelease();
  sub_186F87CDC();
  sub_186F87BC8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_186F87BEC();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t dispatch thunk of static Digest.byteCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t static AES.permute<A>(_:key:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_186F47874(a1, a2, a3, a4, 0);
}

uint64_t sub_186F47688(uint64_t a1, uint64_t *a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v10 = *a2;
  if (sub_186F87D3C() != 16)
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v16 = 1;
LABEL_11:
    *(_BYTE *)(v16 + 4) = 1;
    return swift_willThrow();
  }

  uint64_t v11 = swift_beginAccess();
  unint64_t v12 = *(void *)(v10 + 16);
  if (v12 >> 60) {
    __break(1u);
  }
  uint64_t v13 = 8 * v12;
  if (v13 != 128 && v13 != 192 && v13 != 256)
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v16 = 0;
    goto LABEL_11;
  }

  int v14 = a3 & 1;
  MEMORY[0x1895F8858](v11);
  uint64_t result = sub_186F87B80();
  if (!v5 && (LOBYTE(v17[0]) == 2 || (v17[0] & 1) != 0))
  {
    v17[0] = 0LL;
    v17[1] = 0LL;
    return sub_186F478F8((char *)v17, v18, a1, v10, v14, a4, a5);
  }

  return result;
}

uint64_t static AES.inversePermute<A>(_:key:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_186F47874(a1, a2, a3, a4, 1);
}

uint64_t sub_186F47874(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = *a2;
  return sub_186F47688(a1, &v6, a5, a3, a4);
}

uint64_t sub_186F478AC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _BYTE *a4@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *a1 + a1[1];
  if (!*a1) {
    uint64_t v7 = 0LL;
  }
  uint64_t v9 = a2;
  uint64_t result = sub_186F47BB8(v6, v7, &v9, a3 & 1);
  if (!v4) {
    *a4 = 0;
  }
  return result;
}

uint64_t sub_186F478F8(char *a1, char *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v34 = a4;
  int v33 = a5;
  uint64_t v43 = a3;
  uint64_t v40 = a7;
  uint64_t v10 = *(void (**)(void, void))(a7 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v41 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v42 = AssociatedTypeWitness;
  uint64_t v12 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  int v14 = &v32[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v15 = MEMORY[0x1895F8858](v12);
  uint64_t v17 = &v32[-v16];
  uint64_t v18 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](v15);
  uint64_t v20 = &v32[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v21 = (char *)(a2 - a1);
  if (!a1) {
    uint64_t v21 = 0LL;
  }
  unint64_t v38 = a2;
  unint64_t v39 = v21;
  uint64_t v22 = *(char **)(v18 + 16);
  ((void (*)(_BYTE *, uint64_t, uint64_t))v22)(v20, v43, a6);
  unint64_t v37 = v10;
  uint64_t v23 = sub_186F87D3C();
  unint64_t v36 = *(void (**)(_BYTE *, uint64_t))(v18 + 8);
  v36(v20, a6);
  if (v39 != (char *)v23)
  {
    __break(1u);
    goto LABEL_11;
  }

  char v24 = v33 & 1;
  uint64_t v25 = v43;
  ((void (*)(_BYTE *, uint64_t, uint64_t))v22)(v20, v43, a6);
  uint64_t v26 = (uint64_t)v38;
  sub_186F87E2C();
  v36(v20, a6);
  uint64_t v27 = v35;
  uint64_t v45 = v34;
  uint64_t result = sub_186F47BB8((uint64_t)a1, v26, &v45, v24);
  if (!v27)
  {
    uint64_t v35 = 0LL;
    unint64_t v39 = v22;
    ((void (*)(_BYTE *, uint64_t, uint64_t))v22)(v20, v25, a6);
    uint64_t v29 = (void (*)(void, void))v36;
    sub_186F87D30();
    uint64_t v10 = v29;
    v29(v20, a6);
    uint64_t v22 = v38;
    if (a1)
    {
      if (v38) {
        goto LABEL_11;
      }
    }

    else
    {
      if (!v38) {
        return (*(uint64_t (**)(_BYTE *, uint64_t))(v41 + 8))(v17, v42);
      }
      a1 = 0LL;
    }

    do
    {
      do
      {
        char v30 = *a1++;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v41 + 16))(v14, v17, v42);
        char v44 = v30;
        uint64_t v31 = v43;
        sub_186F87BA4();
        ((void (*)(_BYTE *, uint64_t, uint64_t))v39)(v20, v31, a6);
        sub_186F87D48();
        v10(v20, a6);
      }

      while (!v22);
LABEL_11:
      ;
    }

    while (a1 != v22);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v41 + 8))(v17, v42);
  }

  return result;
}

uint64_t sub_186F47B9C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_186F478AC(a1, *(void *)(v2 + 16), *(_BYTE *)(v2 + 24), a2);
}

uint64_t sub_186F47BB8(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v7 = *a3;
  uint64_t result = swift_beginAccess();
  unint64_t v9 = *(void *)(v7 + 16);
  if (v9 >> 60)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v10 = 8 * v9;
  if (v10 != 128 && v10 != 192 && v10 != 256) {
    goto LABEL_16;
  }
  if (!a1 || a2 - a1 != 16)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  if ((a4 & 1) == 0)
  {
    if (ccaes_ecb_encrypt_mode()) {
      goto LABEL_11;
    }
    __break(1u);
  }

  uint64_t result = ccaes_ecb_decrypt_mode();
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }

void HPKE.AEAD.keyByteCount.getter()
{
  __asm { BR              X10 }

uint64_t sub_186F47CF0()
{
  return 32LL;
}

void sub_186F47D00()
{
}

uint64_t HPKE.AEAD.nonceByteCount.getter()
{
  if (*v0 <= 2u) {
    return 12LL;
  }
  uint64_t result = sub_186F87F40();
  __break(1u);
  return result;
}

void sub_186F47DC0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 62;
  if (*v4 == 2) {
    __asm { BR              X9 }
  }

  __asm { BR              X9 }

void sub_186F48068(uint64_t a1)
{
  if (BYTE6(v2) >= a1)
  {
    sub_186F87A60();
    sub_186F33C98(v1, v2);
    JUMPOUT(0x186F47F8CLL);
  }

  __break(1u);
  JUMPOUT(0x186F48140LL);
}

uint64_t sub_186F481A4( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  v24[3] = a4;
  void v24[4] = a7;
  v24[8] = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  v24[10] = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v24[11] = v13;
  v24[9] = *(void *)(*(void *)(v13 + 8) + 8LL);
  *(void *)&__int128 v25 = swift_getAssociatedTypeWitness();
  v24[7] = *(void *)(v25 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v25);
  v24[5] = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  v24[6] = (char *)v24 - v17;
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  MEMORY[0x1895F8858](v18);
  v24[2] = *a5;
  unsigned int v19 = *v8;
  uint64_t v20 = sub_186F87D3C();
  if (v19 >= 3)
  {
    sub_186F87F40();
    __break(1u);
    JUMPOUT(0x186F48794LL);
  }

  if (v20 >= 16)
  {
    unint64_t v22 = a3 >> 62;
    if (v19 <= 1) {
      __asm { BR              X10 }
    }

    __asm { BR              X10 }
  }

  sub_186F33CDC();
  swift_allocError();
  *uint64_t v21 = 4;
  swift_willThrow();
  return a1;
}

unint64_t HPKE.AEAD.value.getter()
{
  return 0xFFFF000300020001LL >> (16 * *v0);
}

BOOL static HPKE.AEAD.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t HPKE.AEAD.tagByteCount.getter()
{
  if (*v0 <= 2u) {
    return 16LL;
  }
  uint64_t result = sub_186F87F40();
  __break(1u);
  return result;
}

uint64_t HPKE.AEAD.hash(into:)()
{
  return sub_186F87FF4();
}

void *static HPKE.AEAD.allCases.getter()
{
  return &unk_189FABD68;
}

uint64_t HPKE.AEAD.hashValue.getter()
{
  return sub_186F88018();
}

void sub_186F488D0(void *a1@<X8>)
{
  *a1 = &unk_189FABD90;
}

unint64_t sub_186F488E4()
{
  unint64_t result = qword_18C6B0F90;
  if (!qword_18C6B0F90)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C6B0F98);
    unint64_t result = MEMORY[0x18959EFD8](MEMORY[0x189618488], v1);
    atomic_store(result, (unint64_t *)&qword_18C6B0F90);
  }

  return result;
}

unint64_t sub_186F48934()
{
  unint64_t result = qword_18C6B0FA0;
  if (!qword_18C6B0FA0)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for HPKE.AEAD, &type metadata for HPKE.AEAD);
    atomic_store(result, (unint64_t *)&qword_18C6B0FA0);
  }

  return result;
}

uint64_t _s4AEADOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_186F489C4 + 4 * byte_186F8A0D5[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_186F489F8 + 4 * byte_186F8A0D0[v4]))();
}

uint64_t sub_186F489F8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F48A00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x186F48A08LL);
  }
  return result;
}

uint64_t sub_186F48A14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x186F48A1CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_186F48A20(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F48A28(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HPKE.AEAD()
{
  return &type metadata for HPKE.AEAD;
}

uint64_t sub_186F48A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5, uint64_t a6)
{
  uint64_t v66 = a2;
  uint64_t v70 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t v67 = a6;
  uint64_t v65 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = sub_186F87DCC();
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  unint64_t v57 = (char *)&v54 - v12;
  uint64_t v68 = a4;
  uint64_t v55 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v11);
  unint64_t v56 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = swift_checkMetadataState();
  uint64_t v63 = *(void *)(v64 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v64);
  uint64_t v54 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  unint64_t v62 = (char *)&v54 - v16;
  swift_getAssociatedTypeWitness();
  uint64_t v69 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v60 = swift_getAssociatedTypeWitness();
  uint64_t v17 = sub_186F87DCC();
  uint64_t v18 = MEMORY[0x1895F8858](v17);
  unint64_t v59 = (char *)&v54 - v19;
  uint64_t v20 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](v18);
  unint64_t v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = swift_checkMetadataState();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x1895F8858](v23);
  uint64_t v27 = (char *)&v54 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v25);
  uint64_t v29 = (char *)&v54 - v28;
  uint64_t v61 = *v71;
  unint64_t v71 = a5;
  uint64_t v30 = v70;
  if (sub_186F87D3C() != 64) {
    return 0LL;
  }
  sub_186F87910();
  uint64_t v31 = sub_186F87D3C();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v24 + 8);
  v32(v29, v23);
  if (v31 == 1)
  {
    sub_186F87910();
    int v33 = v59;
    sub_186F87D60();
    v32(v27, v23);
    uint64_t v34 = v60;
    uint64_t v35 = *(void *)(v60 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1LL, v60);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      goto LABEL_14;
    }

    uint64_t v77 = v34;
    unint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v76);
    (*(void (**)(uint64_t *, char *, uint64_t))(v35 + 32))(boxed_opaque_existential_1, v33, v34);
    sub_186F3A3A0(&v76, (uint64_t)v79);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v30, a3);
    uint64_t v39 = sub_186F87CF4();
    v79[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53B8);
    v79[4] = sub_186F494E4();
    v79[0] = v39;
  }

  uint64_t v40 = v68;
  uint64_t v41 = v66;
  uint64_t v42 = v64;
  uint64_t v43 = v62;
  sub_186F87910();
  uint64_t v44 = sub_186F87D3C();
  uint64_t v45 = *(void (**)(char *, uint64_t))(v63 + 8);
  v45(v43, v42);
  if (v44 != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v56, v41, v40);
    uint64_t v51 = sub_186F87CF4();
    uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53B8);
    unint64_t AssociatedConformanceWitness = sub_186F494E4();
    *(void *)&__int128 v76 = v51;
    goto LABEL_11;
  }

  unint64_t v46 = v54;
  sub_186F87910();
  uint64_t v47 = v57;
  sub_186F87D60();
  v45(v46, v42);
  uint64_t v48 = AssociatedTypeWitness;
  uint64_t v49 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1LL, AssociatedTypeWitness);
  if ((_DWORD)result != 1)
  {
    uint64_t v74 = v48;
    uint64_t v75 = swift_getAssociatedConformanceWitness();
    uint64_t v50 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v73);
    (*(void (**)(uint64_t *, char *, uint64_t))(v49 + 32))(v50, v47, v48);
    sub_186F3A3A0(&v73, (uint64_t)&v76);
LABEL_11:
    uint64_t v52 = v61;
    sub_186F33FC8((uint64_t)&v76, (uint64_t)&v73);
    unint64_t v53 = __swift_project_boxed_opaque_existential_1(&v73, v74);
    MEMORY[0x1895F8858](v53);
    *(&v54 - 2) = (char *)v79;
    *(&v54 - 1) = v52;
    sub_186F879B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v76);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
    uint64_t v38 = v72;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
    return v38;
  }

uint64_t sub_186F490FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  swift_getAssociatedTypeWitness();
  uint64_t v40 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_186F87DCC();
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  unint64_t v36 = (char *)&v34 - v10;
  uint64_t v35 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = swift_checkMetadataState();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v19 = (char *)&v34 - v18;
  uint64_t v38 = *v4;
  uint64_t v20 = a1;
  uint64_t v41 = a3;
  sub_186F87910();
  uint64_t v21 = sub_186F87D3C();
  unint64_t v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v19, v13);
  if (v21 == 1)
  {
    sub_186F87910();
    uint64_t v23 = v36;
    sub_186F87D60();
    v22(v17, v13);
    uint64_t v24 = AssociatedTypeWitness;
    uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1LL, AssociatedTypeWitness);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      return result;
    }

    uint64_t v43 = v24;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v42);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
    sub_186F3A3A0(&v42, (uint64_t)v47);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v12, v20, a2);
    uint64_t v28 = sub_186F87CF4();
    v47[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53B8);
    v47[4] = sub_186F494E4();
    v47[0] = v28;
  }

  uint64_t v30 = v38;
  uint64_t v29 = v39;
  sub_186F879AC();
  swift_allocObject();
  uint64_t v31 = sub_186F87988();
  *(void *)&__int128 v42 = 0x4000000000LL;
  *((void *)&v42 + 1) = v31;
  sub_186F4A954((int *)&v42, 0);
  uint64_t v45 = v42;
  unint64_t v46 = *((void *)&v42 + 1) | 0x4000000000000000LL;
  uint64_t v32 = sub_186F87CE8();
  *(void *)(v32 + 16) = 32LL;
  *(_OWORD *)(v32 + 32) = 0u;
  *(_OWORD *)(v32 + 48) = 0u;
  uint64_t v48 = (char *)v32;
  swift_beginAccess();
  uint64_t v33 = v30 + 32 + *(void *)(v30 + 16);
  swift_retain();
  sub_186F49644(v30 + 32, v33, &v48, v47);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  swift_release();
  if (v29)
  {
    swift_bridgeObjectRelease();
    sub_186F33C98(v45, v46);
  }

  else
  {
    uint64_t v33 = v45;
    swift_bridgeObjectRelease();
  }

  return v33;
}

unint64_t sub_186F494E4()
{
  unint64_t result = qword_18C4B53C0;
  if (!qword_18C4B53C0)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C4B53B8);
    unint64_t result = MEMORY[0x18959EFD8](MEMORY[0x189607200], v1);
    atomic_store(result, (unint64_t *)&qword_18C4B53C0);
  }

  return result;
}

uint64_t sub_186F49530(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_186F879B8();
}

uint64_t sub_186F495C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, BOOL *a3@<X8>)
{
  uint64_t result = ccsha512_di();
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (!a2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (a1)
  {
    uint64_t result = cced25519_verify();
    *a3 = (_DWORD)result == 0;
    return result;
  }

uint64_t sub_186F49644(uint64_t result, uint64_t a2, char **a3, void *a4)
{
  if (!result)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t result = ccsha512_di();
  if (!result)
  {
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v6 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v6 = sub_186F3CB8C(0LL, *((void *)v6 + 2), 0, v6);
  }
  *a3 = v6;
  int pub = cced25519_make_pub();
  if (pub)
  {
    int v9 = pub;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = v9;
LABEL_9:
    *(_BYTE *)(v10 + 4) = 0;
    return swift_willThrow();
  }

  uint64_t v11 = __swift_project_boxed_opaque_existential_1(a4, a4[3]);
  MEMORY[0x1895F8858](v11);
  uint64_t result = sub_186F879B8();
  if (v12)
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = v12;
    goto LABEL_9;
  }

  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }

  return v1;
}

void sub_186F497FC(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_186F49864@<X0>(uint64_t a1@<X8>)
{
  LOWORD(v5) = a1;
  BYTE2(v5) = BYTE2(a1);
  HIBYTE(v5) = BYTE3(a1);
  unsigned __int8 v6 = BYTE4(a1);
  unsigned __int8 v7 = BYTE5(a1);
  unsigned __int8 v8 = BYTE6(a1);
  if (!ccsha512_di())
  {
    __break(1u);
    goto LABEL_5;
  }

  if (!v2)
  {
LABEL_5:
    __break(1u);
    JUMPOUT(0x186F49AE0LL);
  }

  uint64_t result = cced25519_sign();
  *uint64_t v1 = v3;
  v1[1] = v5 | ((unint64_t)v6 << 32) | ((unint64_t)v7 << 40) | ((unint64_t)v8 << 48);
  return result;
}

void sub_186F49AF8(_DWORD *a1@<X8>)
{
  *a1 = v3;
}

uint64_t sub_186F49B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_186F8797C();
  if (!result) {
    goto LABEL_7;
  }
  uint64_t result = sub_186F879A0();
  if (__OFSUB__(a1, result))
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  sub_186F87994();
  uint64_t result = ccsha512_di();
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (a3) {
    return cced25519_sign();
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_186F49BD0(uint64_t a1, uint64_t a2)
{
  return sub_186F49530(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_186F49BE8@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  return sub_186F495C4(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_186F49C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5, uint64_t a6)
{
  uint64_t v66 = a2;
  uint64_t v70 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t v67 = a6;
  uint64_t v65 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = sub_186F87DCC();
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  unint64_t v57 = (char *)&v54 - v12;
  uint64_t v68 = a4;
  uint64_t v55 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v11);
  unint64_t v56 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = swift_checkMetadataState();
  uint64_t v63 = *(void *)(v64 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v64);
  uint64_t v54 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  unint64_t v62 = (char *)&v54 - v16;
  swift_getAssociatedTypeWitness();
  uint64_t v69 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v60 = swift_getAssociatedTypeWitness();
  uint64_t v17 = sub_186F87DCC();
  uint64_t v18 = MEMORY[0x1895F8858](v17);
  unint64_t v59 = (char *)&v54 - v19;
  uint64_t v20 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](v18);
  unint64_t v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = swift_checkMetadataState();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x1895F8858](v23);
  uint64_t v27 = (char *)&v54 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v25);
  uint64_t v29 = (char *)&v54 - v28;
  uint64_t v61 = *v71;
  unint64_t v71 = a5;
  uint64_t v30 = v70;
  if (sub_186F87D3C() != 114) {
    return 0LL;
  }
  sub_186F87910();
  uint64_t v31 = sub_186F87D3C();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v24 + 8);
  v32(v29, v23);
  if (v31 == 1)
  {
    sub_186F87910();
    uint64_t v33 = v59;
    sub_186F87D60();
    v32(v27, v23);
    uint64_t v34 = v60;
    uint64_t v35 = *(void *)(v60 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1LL, v60);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      goto LABEL_14;
    }

    uint64_t v77 = v34;
    unint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v76);
    (*(void (**)(uint64_t *, char *, uint64_t))(v35 + 32))(boxed_opaque_existential_1, v33, v34);
    sub_186F3A3A0(&v76, (uint64_t)v79);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v30, a3);
    uint64_t v39 = sub_186F87CF4();
    v79[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53B8);
    v79[4] = sub_186F494E4();
    v79[0] = v39;
  }

  uint64_t v40 = v68;
  uint64_t v41 = v66;
  uint64_t v42 = v64;
  uint64_t v43 = v62;
  sub_186F87910();
  uint64_t v44 = sub_186F87D3C();
  uint64_t v45 = *(void (**)(char *, uint64_t))(v63 + 8);
  v45(v43, v42);
  if (v44 != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v56, v41, v40);
    uint64_t v51 = sub_186F87CF4();
    uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53B8);
    unint64_t AssociatedConformanceWitness = sub_186F494E4();
    *(void *)&__int128 v76 = v51;
    goto LABEL_11;
  }

  unint64_t v46 = v54;
  sub_186F87910();
  uint64_t v47 = v57;
  sub_186F87D60();
  v45(v46, v42);
  uint64_t v48 = AssociatedTypeWitness;
  uint64_t v49 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1LL, AssociatedTypeWitness);
  if ((_DWORD)result != 1)
  {
    uint64_t v74 = v48;
    uint64_t v75 = swift_getAssociatedConformanceWitness();
    uint64_t v50 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v73);
    (*(void (**)(uint64_t *, char *, uint64_t))(v49 + 32))(v50, v47, v48);
    sub_186F3A3A0(&v73, (uint64_t)&v76);
LABEL_11:
    uint64_t v52 = v61;
    sub_186F33FC8((uint64_t)&v76, (uint64_t)&v73);
    unint64_t v53 = __swift_project_boxed_opaque_existential_1(&v73, v74);
    MEMORY[0x1895F8858](v53);
    *(&v54 - 2) = (char *)v79;
    *(&v54 - 1) = v52;
    sub_186F879B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v76);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
    uint64_t v38 = v72;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
    return v38;
  }

uint64_t sub_186F4A2BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  swift_getAssociatedTypeWitness();
  uint64_t v40 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_186F87DCC();
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  unint64_t v36 = (char *)&v34 - v10;
  uint64_t v35 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = swift_checkMetadataState();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  uint64_t v19 = (char *)&v34 - v18;
  uint64_t v38 = *v4;
  uint64_t v20 = a1;
  uint64_t v41 = a3;
  sub_186F87910();
  uint64_t v21 = sub_186F87D3C();
  unint64_t v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v19, v13);
  if (v21 == 1)
  {
    sub_186F87910();
    uint64_t v23 = v36;
    sub_186F87D60();
    v22(v17, v13);
    uint64_t v24 = AssociatedTypeWitness;
    uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1LL, AssociatedTypeWitness);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      return result;
    }

    uint64_t v43 = v24;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v42);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
    sub_186F3A3A0(&v42, (uint64_t)v47);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v12, v20, a2);
    uint64_t v28 = sub_186F87CF4();
    v47[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53B8);
    v47[4] = sub_186F494E4();
    v47[0] = v28;
  }

  uint64_t v30 = v38;
  uint64_t v29 = v39;
  sub_186F879AC();
  swift_allocObject();
  uint64_t v31 = sub_186F87988();
  *(void *)&__int128 v42 = 0x7200000000LL;
  *((void *)&v42 + 1) = v31;
  sub_186F4A954((int *)&v42, 0);
  uint64_t v45 = v42;
  unint64_t v46 = *((void *)&v42 + 1) | 0x4000000000000000LL;
  uint64_t v32 = sub_186F87CE8();
  *(void *)(v32 + 16) = 57LL;
  *(_OWORD *)(v32 + 32) = 0u;
  *(_OWORD *)(v32 + 48) = 0u;
  *(_OWORD *)(v32 + 64) = 0u;
  *(_OWORD *)(v32 + 73) = 0u;
  uint64_t v48 = (char *)v32;
  swift_beginAccess();
  uint64_t v33 = v30 + 32 + *(void *)(v30 + 16);
  swift_retain();
  sub_186F4A794(v30 + 32, v33, &v48, v47);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  swift_release();
  if (v29)
  {
    swift_bridgeObjectRelease();
    sub_186F33C98(v45, v46);
  }

  else
  {
    uint64_t v33 = v45;
    swift_bridgeObjectRelease();
  }

  return v33;
}

uint64_t sub_186F4A6AC(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_186F879B8();
}

uint64_t sub_186F4A740@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, BOOL *a3@<X8>)
{
  if (a2)
  {
    if (result)
    {
      uint64_t result = cced448_verify();
      *a3 = (_DWORD)result == 0;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_186F4A794(uint64_t a1, uint64_t a2, char **a3, void *a4)
{
  if (!a1)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }

  if (!ccrng()) {
    goto LABEL_9;
  }
  unsigned __int8 v6 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unsigned __int8 v6 = sub_186F3CB8C(0LL, *((void *)v6 + 2), 0, v6);
  }
  *a3 = v6;
  int pub = cced448_make_pub();
  if (pub)
  {
    int v9 = pub;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = v9;
    *(_BYTE *)(v10 + 4) = 0;
    return swift_willThrow();
  }

  else
  {
    uint64_t v11 = __swift_project_boxed_opaque_existential_1(a4, a4[3]);
    MEMORY[0x1895F8858](v11);
    return sub_186F879B8();
  }

char *sub_186F4A954(int *a1, int a2)
{
  uint64_t result = (char *)sub_186F87A00();
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if ((int)v6 < (int)v5)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t result = (char *)sub_186F8797C();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  unsigned __int8 v7 = result;
  uint64_t result = (char *)sub_186F879A0();
  uint64_t v8 = v5 - (void)result;
  if (__OFSUB__(v5, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  int64_t v9 = v6 - v5;
  uint64_t v10 = sub_186F87994();
  if (v10 >= v9) {
    size_t v11 = v9;
  }
  else {
    size_t v11 = v10;
  }
  return (char *)memset(&v7[v8], a2, v11);
}

void sub_186F4A9D4(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_186F4AA3C@<X0>(uint64_t a1@<X8>)
{
  LOWORD(v5) = a1;
  BYTE2(v5) = BYTE2(a1);
  HIBYTE(v5) = BYTE3(a1);
  unsigned __int8 v6 = BYTE4(a1);
  unsigned __int8 v7 = BYTE5(a1);
  unsigned __int8 v8 = BYTE6(a1);
  if (!ccrng())
  {
    __break(1u);
    goto LABEL_5;
  }

  if (!v2)
  {
LABEL_5:
    __break(1u);
    JUMPOUT(0x186F4ACE0LL);
  }

  uint64_t result = cced448_sign();
  *uint64_t v1 = v3;
  v1[1] = v5 | ((unint64_t)v6 << 32) | ((unint64_t)v7 << 40) | ((unint64_t)v8 << 48);
  return result;
}

void sub_186F4ACF8(_DWORD *a1@<X8>)
{
  *a1 = v3;
}

uint64_t sub_186F4AD2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_186F8797C()) {
    goto LABEL_7;
  }
  if (__OFSUB__(a1, sub_186F879A0()))
  {
    __break(1u);
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  sub_186F87994();
  if (!ccrng())
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }

  if (!a3) {
    goto LABEL_9;
  }
  return cced448_sign();
}

uint64_t sub_186F4AE18(uint64_t a1, uint64_t a2)
{
  return sub_186F4A6AC(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_186F4AE30@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  return sub_186F4A740(a1, *(void *)(v2 + 16), a2);
}

double AES.CCM.Nonce.init()@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = sub_186F42888(12LL);
  sub_186F4AEB8(v2, &v4);
  double result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t sub_186F4AEB8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(uint64_t *)(a1 + 16) < 1)
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = 1;
    *(_BYTE *)(v10 + 4) = 1;
    swift_willThrow();
    return swift_release();
  }

  else
  {
    v12[3] = &type metadata for SecureBytes;
    void v12[4] = sub_186F410F4();
    v12[0] = a1;
    uint64_t v4 = *__swift_project_boxed_opaque_existential_1(v12, (uint64_t)&type metadata for SecureBytes);
    swift_beginAccess();
    unsigned int v5 = (_BYTE *)(v4 + 32);
    unsigned __int8 v6 = (_BYTE *)(v4 + 32 + *(void *)(v4 + 16));
    swift_retain_n();
    sub_186F39C00(v5, v6, v11);
    swift_release();
    uint64_t v7 = v11[0];
    uint64_t v8 = v11[1];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    uint64_t result = swift_release();
    *a2 = v7;
    a2[1] = v8;
  }

  return result;
}

uint64_t AES.CCM.Nonce.init<A>(data:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (sub_186F87D3C() < 1)
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = 1;
    *(_BYTE *)(v13 + 4) = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
    uint64_t v9 = sub_186F87AE4();
    uint64_t v11 = v10;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
    *a3 = v9;
    a3[1] = v11;
  }

  return result;
}

uint64_t AES.CCM.Nonce.withUnsafeBytes<A>(_:)()
{
  return sub_186F87A78();
}

void AES.CCM.Nonce.makeIterator()()
{
  __asm { BR              X10 }

size_t sub_186F4B164()
{
  uint64_t v3 = v0;
  __int16 v4 = v1;
  char v5 = BYTE2(v1);
  char v6 = BYTE3(v1);
  char v7 = BYTE4(v1);
  char v8 = BYTE5(v1);
  return sub_186F4B3D0((size_t)&v3, (unint64_t)&v3 + BYTE6(v1));
}

uint64_t sub_186F4B338()
{
  return AES.CCM.Nonce.withUnsafeBytes<A>(_:)();
}

uint64_t sub_186F4B34C@<X0>(void *a1@<X8>)
{
  uint64_t v4 = v3;
  uint64_t result = sub_186F33C98(*(void *)v1, *(void *)(v1 + 8));
  *a1 = v4;
  a1[1] = 0LL;
  return result;
}

uint64_t sub_186F4B384()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = sub_186F6A784(v1, v2);
  sub_186F33C98(v1, v2);
  return v3;
}

uint64_t sub_186F4B3C8(uint64_t *a1, _BYTE *a2, uint64_t a3)
{
  return sub_186F696F4(a1, a2, a3, *(void *)v3, *(void *)(v3 + 8));
}

size_t sub_186F4B3D0(size_t result, unint64_t a2)
{
  if (!result) {
    return MEMORY[0x18961AFE8];
  }
  uint64_t v3 = (const void *)result;
  int64_t v4 = a2 - result;
  if (a2 == result) {
    return MEMORY[0x18961AFE8];
  }
  if (v4 < 1)
  {
    char v5 = (void *)MEMORY[0x18961AFE8];
    if (!a2) {
      goto LABEL_13;
    }
  }

  else
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_18C4B5430);
    char v5 = (void *)swift_allocObject();
    uint64_t result = _swift_stdlib_malloc_size(v5);
    v5[2] = v4;
    v5[3] = 2 * result - 64;
    if (!a2) {
      goto LABEL_13;
    }
  }

  if ((unint64_t)v3 < a2)
  {
    if ((v4 & 0x8000000000000000LL) == 0)
    {
      memmove(v5 + 4, v3, v4);
      return (size_t)v5;
    }

    __break(1u);
  }

unint64_t sub_186F4B484()
{
  unint64_t result = qword_18C4B5270;
  if (!qword_18C4B5270)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C4B5278);
    unint64_t result = MEMORY[0x18959EFD8](MEMORY[0x189619678], v1);
    atomic_store(result, (unint64_t *)&qword_18C4B5270);
  }

  return result;
}

uint64_t *_s5NonceVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_186F33D20(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t _s5NonceVwxx(uint64_t a1)
{
  return sub_186F33C98(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *_s5NonceVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_186F33D20(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_186F33C98(v5, v6);
  return a1;
}

uint64_t *_s5NonceVwta(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_186F33C98(v3, v4);
  return a1;
}

uint64_t _s5NonceVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s5NonceVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)unint64_t result = a2 - 13;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AES.CCM.Nonce()
{
  return &type metadata for AES.CCM.Nonce;
}

uint64_t sub_186F4B648()
{
  uint64_t result = sub_186F3895C(5064011LL, 0xE300000000000000LL);
  qword_18C6B0FA8 = result;
  unk_18C6B0FB0 = v1;
  return result;
}

uint64_t sub_186F4B674@<X0>( uint64_t a1@<X0>, uint64_t a2@<X5>, unint64_t a3@<X6>, char *a4@<X7>, size_t *a5@<X8>, char *a6)
{
  uint64_t v8 = *a4;
  char v19 = *a4;
  char v9 = *a6;
  if (qword_18C6B0698 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_18C6B0FA8;
  unint64_t v25 = qword_18C6B0FB0;
  uint64_t v10 = qword_186F8A240[v8];
  sub_186F33D20(qword_18C6B0FA8, qword_18C6B0FB0);
  sub_186F5ADA0(v10, 2LL);
  uint64_t v12 = v11;
  unint64_t v14 = v13;
  sub_186F87AC0();
  sub_186F33C98(v12, v14);
  __int128 v23 = xmmword_186F88B50;
  sub_186F87AC0();
  sub_186F87AC0();
  if (a3 >> 60 != 15)
  {
    sub_186F33D20(a2, a3);
    sub_186F87AC0();
    sub_186F33EA0(a2, a3);
  }

  __int128 v15 = v23;
  uint64_t v16 = v24;
  unint64_t v17 = v25;
  LOBYTE(v23) = v19;
  char v22 = v9;
  sub_186F33D20(v24, v25);
  sub_186F6402C(a1, v15, *((uint64_t *)&v15 + 1), (unsigned __int8 *)&v23, &v22, a5);
  sub_186F33C98(v16, v17);
  sub_186F33C98(v15, *((unint64_t *)&v15 + 1));
  return sub_186F33C98(v16, v17);
}

uint64_t sub_186F4B814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return swift_unknownObjectRelease();
}

unint64_t sub_186F4B884()
{
  unint64_t result = qword_18C6B0FB8;
  if (!qword_18C6B0FB8)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F8A288, &_s15ASN1OctetStringVN);
    atomic_store(result, (unint64_t *)&qword_18C6B0FB8);
  }

  return result;
}

ValueMetadata *_s15ASN1OctetStringVMa()
{
  return &_s15ASN1OctetStringVN;
}

BOOL static IEEESecurity.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t IEEESecurity.hash(into:)()
{
  return sub_186F87FF4();
}

void *static IEEESecurity.allCases.getter()
{
  return &unk_189FABDB8;
}

uint64_t IEEESecurity.hashValue.getter()
{
  return sub_186F88018();
}

BOOL sub_186F4B968(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

unint64_t sub_186F4B984()
{
  unint64_t result = qword_18C6B0FC0;
  if (!qword_18C6B0FC0)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for IEEESecurity, &type metadata for IEEESecurity);
    atomic_store(result, (unint64_t *)&qword_18C6B0FC0);
  }

  return result;
}

unint64_t sub_186F4B9CC()
{
  unint64_t result = qword_18C6B0FC8;
  if (!qword_18C6B0FC8)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_18C6B0FD0);
    unint64_t result = MEMORY[0x18959EFD8](MEMORY[0x189618488], v1);
    atomic_store(result, (unint64_t *)&qword_18C6B0FC8);
  }

  return result;
}

void sub_186F4BA18(void *a1@<X8>)
{
  *a1 = &unk_189FABDE0;
}

uint64_t getEnumTagSinglePayload for IEEESecurity(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for IEEESecurity(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_186F4BB04 + 4 * byte_186F8A335[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_186F4BB38 + 4 * byte_186F8A330[v4]))();
}

uint64_t sub_186F4BB38(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F4BB40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x186F4BB48LL);
  }
  return result;
}

uint64_t sub_186F4BB54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x186F4BB5CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_186F4BB60(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F4BB68(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_186F4BB74(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for IEEESecurity()
{
  return &type metadata for IEEESecurity;
}

uint64_t SecureEnclave.P256.Signing.PrivateKey.signature<A>(for:)()
{
  return sub_186F4BC00();
}

uint64_t sub_186F4BBB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_186F4BC5C(a1, a2, *(void **)(v3 + 40), (uint64_t (*)(uint64_t))MEMORY[0x1895F9B10], 32LL, a3);
}

uint64_t SecureEnclave.P384.Signing.PrivateKey.signature<A>(for:)()
{
  return sub_186F4BC00();
}

uint64_t sub_186F4BC00()
{
  return sub_186F879B8();
}

uint64_t sub_186F4BC5C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X5>, uint64_t (*a4)(uint64_t)@<X6>, uint64_t a5@<X7>, _OWORD *a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v27 = a4;
  uint64_t v10 = sub_186F879F4();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  unint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x189606B30], v10);
    sub_186F879E8();
    uint64_t v14 = a2 - a1;
    if (v14)
    {
      sub_186F879AC();
      swift_allocObject();
      swift_retain();
      uint64_t v18 = sub_186F87964();
      uint64_t v16 = sub_186F6F944(v18, v14);
      unint64_t v17 = v19;
      swift_release();
    }

    else
    {
      __int128 v15 = (void (*)(uint64_t, void))sub_186F879E8();
      v15(a1, 0LL);
      swift_release();
      swift_release();
      uint64_t v16 = 0LL;
      unint64_t v17 = 0xC000000000000000LL;
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v20 = sub_186F4BE74(a3);
    if (!v6)
    {
      uint64_t v22 = (uint64_t)v20;
      unint64_t v23 = v21;
      sub_186F33D20((uint64_t)v20, v21);
      sub_186F4C000(v22, v23, v27, v26);
      sub_186F33C98(v22, v23);
    }

    return sub_186F33C98(v16, v17);
  }

  else
  {
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }

  return result;
}

uint64_t sub_186F4BE4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return sub_186F4BC5C(a1, a2, *(void **)(v3 + 40), (uint64_t (*)(uint64_t))MEMORY[0x1895F9B18], 61LL, a3);
}

void *sub_186F4BE74(void *a1)
{
  v11[1] = *(id *)MEMORY[0x1895F89C0];
  int v2 = (void *)sub_186F87A84();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6B05F8);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_186F8A440;
  *(void *)(v3 + 32) = sub_186F87BBC();
  *(void *)(v3 + 40) = v4;
  uint64_t v5 = (void *)sub_186F87CC4();
  swift_bridgeObjectRelease();
  sub_186F7D274(MEMORY[0x18961AFE8]);
  uint64_t v6 = (void *)sub_186F87B14();
  swift_bridgeObjectRelease();
  v11[0] = 0LL;
  id v7 = objc_msgSend(a1, sel_sign_algorithms_parameters_error_, v2, v5, v6, v11);

  id v8 = v11[0];
  if (v7)
  {
    char v9 = (void *)sub_186F87A9C();
  }

  else
  {
    char v9 = v8;
    sub_186F879D0();

    swift_willThrow();
  }

  return v9;
}

uint64_t sub_186F4C000@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, _OWORD *a4@<X8>)
{
  if (v4)
  {
    sub_186F33C98(a1, a2);
    return swift_release();
  }

  swift_release();
  sub_186F3B4A4((uint64_t)&v38, (uint64_t)v39);
  sub_186F4CDF8((uint64_t)v39);
  uint64_t v11 = sub_186F859D8(v37, 0x30u, (uint64_t *)&v31);
  uint64_t v12 = v32;
  unint64_t v29 = v33;
  __int128 v27 = v34;
  __int128 v28 = v31;
  unint64_t v25 = v36;
  uint64_t v26 = v35;
  uint64_t result = a3(v11);
  if (!result) {
    goto LABEL_34;
  }
  uint64_t v13 = result;
  uint64_t v14 = (void *)objc_opt_self();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  uint64_t v33 = v15;
  *(void *)&__int128 v31 = v13;
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v14, sel_groupOrderByteCountForCP_, v30);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v24 = v12;
  BOOL v16 = __OFSUB__(v29 >> 1, v12);
  uint64_t v17 = (v29 >> 1) - v12;
  if (v16)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if (result < v17)
  {
LABEL_9:
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v18 = 1;
    *(_BYTE *)(v18 + 4) = 1;
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_186F366D4((uint64_t)v37);
    return sub_186F33C98(a1, a2);
  }

  if (__OFSUB__(v25 >> 1, v26)) {
    goto LABEL_23;
  }
  uint64_t v23 = (v25 >> 1) - v26;
  uint64_t v33 = v15;
  *(void *)&__int128 v31 = v13;
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v14, sel_groupOrderByteCountForCP_, v40);
  if (result < 0) {
    goto LABEL_24;
  }
  if (result + 0x4000000000000000LL < 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  sub_186F87A48();
  uint64_t v33 = v15;
  *(void *)&__int128 v31 = v13;
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v14, sel_groupOrderByteCountForCP_, v40);
  if (result < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  BOOL v16 = __OFSUB__(result, v17);
  result -= v17;
  if (v16)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  if (result < 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  sub_186F5D744();
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B52A8);
  uint64_t v33 = v19;
  unint64_t v22 = sub_186F4CE30();
  *(void *)&__int128 v34 = v22;
  uint64_t v20 = swift_allocObject();
  *(void *)&__int128 v31 = v20;
  *(_OWORD *)(v20 + 16) = v28;
  *(void *)(v20 + 32) = v24;
  *(void *)(v20 + 40) = v29;
  uint64_t result = (uint64_t)__swift_project_boxed_opaque_existential_1(&v31, v19);
  if (__OFSUB__(*(void *)(result + 24) >> 1, *(void *)(result + 16)))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  swift_unknownObjectRetain_n();
  sub_186F87A54();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
  swift_unknownObjectRelease();
  uint64_t v33 = v15;
  *(void *)&__int128 v31 = v13;
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v14, sel_groupOrderByteCountForCP_, v40);
  if (result < 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  BOOL v16 = __OFSUB__(result, v23);
  result -= v23;
  if (v16)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  if ((result & 0x8000000000000000LL) == 0)
  {
    sub_186F5D744();
    uint64_t v33 = v19;
    *(void *)&__int128 v34 = v22;
    uint64_t v21 = swift_allocObject();
    *(void *)&__int128 v31 = v21;
    *(_OWORD *)(v21 + 16) = v27;
    *(void *)(v21 + 32) = v26;
    *(void *)(v21 + 40) = v25;
    uint64_t result = (uint64_t)__swift_project_boxed_opaque_existential_1(&v31, v19);
    if (!__OFSUB__(*(void *)(result + 24) >> 1, *(void *)(result + 16)))
    {
      swift_unknownObjectRetain_n();
      sub_186F87A54();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      sub_186F366D4((uint64_t)v37);
      sub_186F33C98(a1, a2);
      uint64_t result = swift_unknownObjectRelease();
      *a4 = xmmword_186F88B50;
      return result;
    }

    goto LABEL_33;
  }

uint64_t SecureEnclave.P256.Signing.PrivateKey.signature<A>(for:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v23 = a3;
  v26[1] = *MEMORY[0x1895F89C0];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v10 = *v3;
  uint64_t v21 = v3[1];
  uint64_t v22 = v10;
  uint64_t v11 = v3[2];
  uint64_t v19 = (void *)v3[3];
  uint64_t v20 = v11;
  uint64_t v12 = ccsha256_di();
  if (!v12) {
    __break(1u);
  }
  uint64_t v13 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B54B8);
  uint64_t v14 = swift_allocObject();
  getDigestSizeForDigestInfo();
  uint64_t v15 = swift_slowAlloc();
  ccdigest_init();
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 24) = v15;
  v26[0] = v14;
  uint64_t v16 = sub_186F87910();
  MEMORY[0x1895F8858](v16);
  *(&v18 - 4) = a1;
  *(&v18 - 3) = a2;
  *(&v18 - 2) = (uint64_t)v26;
  swift_getAssociatedConformanceWitness();
  sub_186F87CA0();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  swift_retain();
  sub_186F4CA64((uint64_t)v25);
  swift_release();
  v24[0] = v25[0];
  v24[1] = v25[1];
  sub_186F4BC5C((uint64_t)v24, (uint64_t)v25, v19, (uint64_t (*)(uint64_t))MEMORY[0x1895F9B10], 32LL, v23);
  return swift_release();
}

uint64_t sub_186F4C708()
{
  return sub_186F4C968();
}

uint64_t SecureEnclave.P384.Signing.PrivateKey.signature<A>(for:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v23 = a3;
  v26[1] = *MEMORY[0x1895F89C0];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v10 = *v3;
  uint64_t v21 = v3[1];
  uint64_t v22 = v10;
  uint64_t v11 = v3[2];
  uint64_t v19 = (void *)v3[3];
  uint64_t v20 = v11;
  uint64_t v12 = ccsha384_di();
  if (!v12) {
    __break(1u);
  }
  uint64_t v13 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B4FB0);
  uint64_t v14 = swift_allocObject();
  getDigestSizeForDigestInfo();
  uint64_t v15 = swift_slowAlloc();
  ccdigest_init();
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 24) = v15;
  v26[0] = v14;
  uint64_t v16 = sub_186F87910();
  MEMORY[0x1895F8858](v16);
  *(&v18 - 4) = a1;
  *(&v18 - 3) = a2;
  *(&v18 - 2) = (uint64_t)v26;
  swift_getAssociatedConformanceWitness();
  sub_186F87CA0();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  swift_retain();
  sub_186F4CAFC((uint64_t)v25);
  swift_release();
  v24[0] = v25[0];
  v24[1] = v25[1];
  _OWORD v24[2] = v25[2];
  sub_186F4BC5C((uint64_t)v24, (uint64_t)v25, v19, (uint64_t (*)(uint64_t))MEMORY[0x1895F9B18], 61LL, v23);
  return swift_release();
}

uint64_t sub_186F4C968()
{
  return sub_186F879B8();
}

uint64_t sub_186F4CA64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_186F87CE8();
  *(void *)(v3 + 16) = 32LL;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  ccdigest_final(*(void *)(v1 + 16));
  if (*(void *)(v3 + 16) == 32LL)
  {
    __int128 v7 = *(_OWORD *)(v3 + 32);
    uint64_t v4 = *(void *)(v3 + 48);
    uint64_t v5 = *(void *)(v3 + 56);
    uint64_t result = swift_bridgeObjectRelease();
    *(_OWORD *)a1 = v7;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v5;
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }

  return result;
}

uint64_t sub_186F4CAFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_186F87CE8();
  *(void *)(v3 + 16) = 48LL;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  ccdigest_final(*(void *)(v1 + 16));
  if (*(void *)(v3 + 16) == 48LL)
  {
    __int128 v7 = *(_OWORD *)(v3 + 48);
    __int128 v8 = *(_OWORD *)(v3 + 32);
    uint64_t v4 = *(void *)(v3 + 64);
    uint64_t v5 = *(void *)(v3 + 72);
    uint64_t result = swift_bridgeObjectRelease();
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + 16) = v7;
    *(void *)(a1 + 32) = v4;
    *(void *)(a1 + 40) = v5;
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }

  return result;
}

uint64_t sub_186F4CB9C@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = sub_186F87CE8();
  *(void *)(v3 + 16) = 64LL;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  ccdigest_final(*(void *)(v1 + 16));
  sub_186F7A32C((__int128 *)(v3 + 32), v3 + 32 + *(void *)(v3 + 16), (uint64_t)v8);
  uint64_t result = swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    __int128 v5 = v8[1];
    __int128 v6 = v8[2];
    __int128 v7 = v8[3];
    *a1 = v8[0];
    a1[1] = v5;
    a1[2] = v6;
    a1[3] = v7;
  }

  return result;
}

uint64_t sub_186F4CC3C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (void *)sub_186F87CE8();
  v3[2] = 16LL;
  v3[5] = 0LL;
  v3[4] = 0LL;
  ccdigest_final(*(void *)(v1 + 16));
  if (v3[2] != 16LL)
  {
    swift_bridgeObjectRelease();
    __break(1u);
  }

  uint64_t v4 = v3[4];
  uint64_t v5 = v3[5];
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v4;
  a1[1] = v5;
  return result;
}

uint64_t sub_186F4CCEC@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_186F87CE8();
  *(void *)(v3 + 16) = 20LL;
  *(void *)(v3 + 40) = 0LL;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0LL;
  ccdigest_final(*(void *)(v1 + 16));
  if (*(void *)(v3 + 16) == 20LL)
  {
    uint64_t v4 = *(void *)(v3 + 32);
    uint64_t v5 = *(void *)(v3 + 40);
    uint64_t v6 = *(unsigned int *)(v3 + 48);
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = v4;
    a1[1] = v5;
    a1[2] = v6;
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }

  return result;
}

uint64_t sub_186F4CD7C()
{
  return sub_186F4C968();
}

uint64_t ccdigest_final(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 56))();
}

void *sub_186F4CDA8(uint64_t a1, uint64_t a2)
{
  return sub_186F5330C(a1, a2);
}

void *sub_186F4CDD0(uint64_t a1, uint64_t a2)
{
  return sub_186F53318(a1, a2);
}

uint64_t sub_186F4CDF8(uint64_t a1)
{
  return a1;
}

unint64_t sub_186F4CE30()
{
  unint64_t result = qword_18C4B52A0;
  if (!qword_18C4B52A0)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C4B52A8);
    unint64_t result = MEMORY[0x18959EFD8](MEMORY[0x189607380], v1);
    atomic_store(result, (unint64_t *)&qword_18C4B52A0);
  }

  return result;
}

uint64_t sub_186F4CE7C()
{
  return swift_deallocObject();
}

uint64_t _s7ContextVwxx(void *a1)
{
  unint64_t v2 = a1[3];
  if (v2 >> 60 != 15) {
    sub_186F33C98(a1[2], v2);
  }
  swift_release();
  return sub_186F33C98(a1[6], a1[7]);
}

uint64_t _s7ContextVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = (_OWORD *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  swift_retain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }

  else
  {
    uint64_t v7 = *(void *)v5;
    sub_186F33D20(v7, v6);
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v6;
  }

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  uint64_t v9 = *(void *)(a2 + 48);
  unint64_t v8 = *(void *)(a2 + 56);
  swift_retain();
  sub_186F33D20(v9, v8);
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v8;
  return a1;
}

uint64_t _s7ContextVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) >> 60 != 15LL)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_186F33D20(*v4, *(void *)(a2 + 24));
      uint64_t v8 = *(void *)(a1 + 16);
      unint64_t v9 = *(void *)(a1 + 24);
      *(void *)(a1 + 16) = v7;
      *(void *)(a1 + 24) = v5;
      sub_186F33C98(v8, v9);
      goto LABEL_8;
    }

    sub_186F34214(a1 + 16);
    goto LABEL_6;
  }

  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
    goto LABEL_8;
  }

  uint64_t v6 = *v4;
  sub_186F33D20(*v4, *(void *)(a2 + 24));
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v5;
LABEL_8:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  uint64_t v11 = *(void *)(a2 + 48);
  unint64_t v10 = *(void *)(a2 + 56);
  sub_186F33D20(v11, v10);
  uint64_t v12 = *(void *)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v10;
  sub_186F33C98(v12, v13);
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s7ContextVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  unint64_t v5 = (void *)(a2 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 24);
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *v5;
      *(void *)(a1 + 24) = v7;
      sub_186F33C98(v8, v6);
      goto LABEL_6;
    }

    sub_186F34214(a1 + 16);
  }

  *(_OWORD *)(a1 + 16) = *(_OWORD *)v5;
LABEL_6:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  uint64_t v9 = *(void *)(a1 + 48);
  unint64_t v10 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_186F33C98(v9, v10);
  return a1;
}

uint64_t _s7ContextVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s7ContextVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *_s7ContextVMa()
{
  return &_s7ContextVN;
}

uint64_t sub_186F4D218@<X0>( char *a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  unint64_t v57 = a3;
  uint64_t v53 = a7;
  unint64_t v54 = a8;
  uint64_t v55 = a4;
  unint64_t v56 = a5;
  unsigned int v52 = a2;
  uint64_t v49 = a9;
  uint64_t v13 = *(void *)(a10 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = _s5DHKEMO9PublicKeyVMa(0LL, a10, a11, v16);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)&v45 - v19;
  char v21 = *a1;
  int v22 = a1[1];
  int v50 = a1[2];
  int v51 = v22;
  uint64_t v23 = *v57;
  uint64_t v24 = *(void (**)(char *, uint64_t *, uint64_t))(v13 + 16);
  unint64_t v57 = a6;
  unint64_t v25 = a6;
  char v26 = v21;
  v24(v15, v25, a10);
  LOBYTE(v61) = v26;
  uint64_t v27 = v58;
  sub_186F4E2DC((uint64_t)v15, (char *)&v61, a10, a11, v20);
  if (v27)
  {
    swift_release();
    sub_186F33C98(v53, v54);
    sub_186F33EA0(v55, v56);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v13 + 8))(v57, a10);
  }

  else
  {
    char v28 = v26;
    uint64_t v29 = v23;
    uint64_t v30 = v53;
    uint64_t v48 = a10;
    uint64_t v58 = v18;
    __int128 v31 = v57;
    sub_186F4E390(v17, &v61);
    unint64_t v46 = v20;
    uint64_t v47 = v17;
    uint64_t v33 = v61;
    uint64_t v34 = v62;
    unint64_t v35 = v63;
    v60[3] = &type metadata for SymmetricKey;
    v60[4] = sub_186F33F14();
    v60[0] = v33;
    uint64_t v68 = v29;
    uint64_t v36 = v34;
    v59[0] = v28;
    v59[1] = v51;
    v59[2] = v50;
    sub_186F33D20(v34, v35);
    sub_186F33D20(v34, v35);
    swift_retain();
    sub_186F329D8(v52, (uint64_t)v60, v30, v54, &v68, v55, v56, v59, (uint64_t)&v61);
    unint64_t v37 = v31;
    uint64_t v38 = v58;
    uint64_t v39 = v48;
    swift_release();
    sub_186F33C98(v36, v35);
    (*(void (**)(uint64_t *, uint64_t))(v13 + 8))(v37, v39);
    (*(void (**)(_BYTE *, uint64_t))(v38 + 8))(v46, v47);
    uint64_t v40 = v62;
    uint64_t v58 = v61;
    uint64_t v41 = v63;
    unint64_t v42 = v64;
    uint64_t v43 = v65;
    LODWORD(v57) = v66;
    LOBYTE(v30) = v67;
    swift_retain();
    sub_186F34034(v41, v42);
    swift_retain();
    sub_186F33D20(v36, v35);
    sub_186F33C98(v36, v35);
    uint64_t v44 = v49;
    *uint64_t v49 = v58;
    v44[1] = v40;
    void v44[2] = v41;
    v44[3] = v42;
    v44[4] = v43;
    *((_WORD *)v44 + 20) = (_WORD)v57;
    *((_BYTE *)v44 + 42) = v30;
    v44[6] = v36;
    v44[7] = v35;
    swift_release();
    sub_186F33EA0(v41, v42);
    swift_release();
    return sub_186F33C98(v36, v35);
  }

uint64_t sub_186F4D5B0@<X0>( char *a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, size_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unint64_t v66 = a8;
  uint64_t v65 = a7;
  uint64_t v71 = a6;
  unsigned __int8 v72 = a3;
  uint64_t v67 = a4;
  unint64_t v68 = a5;
  unsigned int v59 = a2;
  unint64_t v56 = a9;
  uint64_t v74 = a10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v70 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  unint64_t v63 = (unint64_t)&v53 - v14;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v69 = AssociatedTypeWitness;
  uint64_t v62 = AssociatedConformanceWitness;
  uint64_t v61 = _s5DHKEMO9PublicKeyVMa(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v16);
  uint64_t v60 = *(void *)(v61 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](v61);
  unint64_t v64 = (char *)&v53 - v18;
  uint64_t v19 = *(void *)(a11 - 8);
  MEMORY[0x1895F8858](v17);
  char v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = _s5DHKEMO10PrivateKeyVMa(0LL, a11, a12, v22);
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1895F8858](v23);
  char v26 = (uint64_t *)((char *)&v53 - v25);
  char v27 = *a1;
  int v58 = a1[1];
  int v57 = a1[2];
  uint64_t v28 = *v72;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v74, a11);
  LOBYTE(v77[0]) = v27;
  uint64_t v29 = v73;
  sub_186F4E6B4((uint64_t)v21, (char *)v77, a11, a12, (uint64_t)v26);
  if (v29)
  {
    swift_release();
    sub_186F33C98(v65, v66);
    sub_186F33EA0(v67, v68);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v74, a11);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 8))(v71, v69);
  }

  else
  {
    uint64_t v53 = v28;
    uint64_t v54 = v19;
    unsigned __int8 v72 = v26;
    uint64_t v55 = v24;
    uint64_t v73 = v23;
    uint64_t v31 = v70;
    uint64_t v32 = v71;
    uint64_t v33 = v63;
    uint64_t v34 = v69;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v70 + 16))(v63, v71, v69);
    LOBYTE(v77[0]) = v27;
    unint64_t v35 = v64;
    sub_186F4E2DC(v33, (char *)v77, v34, v62, v64);
    uint64_t v36 = sub_186F4E82C(v77, (uint64_t)v35, v73);
    size_t v37 = v77[0];
    unint64_t v39 = v38;
    uint64_t v40 = v36;
    swift_retain();
    sub_186F33D20(v40, v39);
    swift_release();
    v76[3] = &type metadata for SymmetricKey;
    v76[4] = sub_186F33F14();
    v76[0] = v37;
    uint64_t v80 = v53;
    v75[0] = v27;
    v75[1] = v58;
    v75[2] = v57;
    swift_retain();
    uint64_t v41 = v40;
    unint64_t v63 = v39;
    sub_186F33D20(v40, v39);
    sub_186F329D8(v59, (uint64_t)v76, v65, v66, &v80, v67, v68, v75, (uint64_t)v77);
    uint64_t v42 = v74;
    uint64_t v43 = v55;
    swift_release();
    uint64_t v44 = v41;
    uint64_t v45 = v41;
    unint64_t v46 = v63;
    sub_186F33C98(v45, v63);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v42, a11);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v34);
    (*(void (**)(_BYTE *, uint64_t))(v60 + 8))(v64, v61);
    (*(void (**)(uint64_t *, uint64_t))(v43 + 8))(v72, v73);
    size_t v47 = v77[0];
    size_t v48 = v77[1];
    uint64_t v49 = v77[2];
    unint64_t v50 = v77[3];
    size_t v51 = v77[4];
    LODWORD(v74) = v78;
    LOBYTE(v32) = v79;
    swift_retain();
    sub_186F34034(v49, v50);
    swift_retain();
    sub_186F33D20(v44, v46);
    sub_186F33C98(v44, v46);
    unsigned int v52 = v56;
    *unint64_t v56 = v47;
    v52[1] = v48;
    v52[2] = v49;
    v52[3] = v50;
    v52[4] = v51;
    *((_WORD *)v52 + 20) = v74;
    *((_BYTE *)v52 + 42) = v32;
    v52[6] = v44;
    v52[7] = v46;
    swift_release();
    sub_186F33EA0(v49, v50);
    swift_release();
    return sub_186F33C98(v44, v46);
  }

uint64_t sub_186F4DC00@<X0>( unsigned __int8 *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, size_t a8@<X7>, size_t *a9@<X8>, uint64_t a10, unint64_t a11, _BYTE *a12, uint64_t a13, uint64_t a14)
{
  size_t v83 = a8;
  unint64_t v75 = a7;
  uint64_t v74 = a6;
  unint64_t v78 = a4;
  char v79 = a5;
  uint64_t v77 = a3;
  unsigned int v67 = a2;
  unint64_t v64 = a9;
  __int128 v82 = a12;
  unint64_t v73 = a11;
  uint64_t v72 = a10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v81 = sub_186F87DCC();
  uint64_t v76 = *(void *)(v81 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v81);
  uint64_t v69 = &v58[-v17];
  uint64_t v71 = AssociatedTypeWitness;
  uint64_t v70 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  unint64_t v68 = &v58[-v19];
  uint64_t v20 = *(void *)(a13 - 8);
  MEMORY[0x1895F8858](v18);
  uint64_t v22 = &v58[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v24 = _s5DHKEMO10PrivateKeyVMa(0LL, a13, a14, v23);
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1895F8858](v24);
  char v27 = (uint64_t *)&v58[-v26];
  int v28 = *a1;
  int v66 = a1[1];
  int v65 = a1[2];
  uint64_t v29 = *v79;
  (*(void (**)(_BYTE *, size_t, uint64_t))(v20 + 16))(v22, v83, a13);
  LOBYTE(v86[0]) = v28;
  uint64_t v30 = v80;
  sub_186F4E6B4((uint64_t)v22, (char *)v86, a13, a14, (uint64_t)v27);
  if (v30)
  {
    swift_release();
    sub_186F33C98(v72, v73);
    sub_186F33EA0(v74, v75);
    sub_186F33C98(v77, v78);
    (*(void (**)(_BYTE *, uint64_t))(v76 + 8))(v82, v81);
    return (*(uint64_t (**)(size_t, uint64_t))(v20 + 8))(v83, a13);
  }

  uint64_t v63 = 0LL;
  int v59 = v28;
  uint64_t v32 = v68;
  char v79 = v27;
  uint64_t v61 = a13;
  uint64_t v62 = v25;
  uint64_t v80 = v24;
  uint64_t v60 = v20;
  uint64_t v34 = v77;
  unint64_t v33 = v78;
  uint64_t v35 = v76;
  uint64_t v36 = v69;
  uint64_t v38 = v81;
  size_t v37 = v82;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v76 + 16))(v69, v82, v81);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v70 + 48))(v36, 1LL, v71) == 1)
  {
    unint64_t v39 = *(void (**)(_BYTE *, uint64_t))(v35 + 8);
    v39(v36, v38);
    uint64_t v40 = v34;
    uint64_t v41 = v34;
    uint64_t v42 = v35;
    uint64_t v43 = v79;
    uint64_t v44 = v80;
    uint64_t v45 = v63;
    sub_186F4F7E4(v41, v33, v80, v86);
    if (v45)
    {
      swift_release();
      sub_186F33C98(v72, v73);
      sub_186F33EA0(v74, v75);
      sub_186F33C98(v40, v33);
      v39(v82, v38);
      (*(void (**)(size_t, uint64_t))(v60 + 8))(v83, v61);
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v62 + 8))(v43, v44);
    }

    size_t v50 = v86[0];
  }

  else
  {
    unint64_t v46 = v32;
    (*(void (**)(char *, _BYTE *, uint64_t))(v70 + 32))(v32, v36, v71);
    uint64_t v40 = v34;
    uint64_t v47 = v34;
    uint64_t v43 = v79;
    uint64_t v48 = v80;
    uint64_t v49 = v63;
    sub_186F4F06C(v47, v33, v46, v80, v86);
    if (v49)
    {
      swift_release();
      sub_186F33C98(v72, v73);
      sub_186F33EA0(v74, v75);
      sub_186F33C98(v40, v33);
      (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v37, v81);
      (*(void (**)(size_t, uint64_t))(v60 + 8))(v83, v61);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v46, v71);
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v62 + 8))(v43, v48);
    }

    uint64_t v42 = v35;
    (*(void (**)(char *, uint64_t))(v70 + 8))(v46, v71);
    size_t v50 = v86[0];
    uint64_t v38 = v81;
  }

  uint64_t v51 = v60;
  v85[3] = &type metadata for SymmetricKey;
  v85[4] = sub_186F33F14();
  v85[0] = v50;
  uint64_t v89 = v29;
  v84[0] = v59;
  v84[1] = v66;
  v84[2] = v65;
  sub_186F33D20(v40, v33);
  swift_retain();
  sub_186F329D8(v67, (uint64_t)v85, v72, v73, &v89, v74, v75, v84, (uint64_t)v86);
  swift_release();
  (*(void (**)(_BYTE *, uint64_t))(v42 + 8))(v82, v38);
  (*(void (**)(size_t, uint64_t))(v51 + 8))(v83, v61);
  (*(void (**)(uint64_t *, uint64_t))(v62 + 8))(v43, v80);
  size_t v52 = v86[1];
  size_t v83 = v86[0];
  uint64_t v53 = v86[2];
  unint64_t v54 = v86[3];
  size_t v55 = v86[4];
  __int16 v56 = v87;
  LOBYTE(v51) = v88;
  swift_retain();
  sub_186F34034(v53, v54);
  swift_retain();
  sub_186F33D20(v40, v33);
  sub_186F33C98(v40, v33);
  int v57 = v64;
  *unint64_t v64 = v83;
  v57[1] = v52;
  v57[2] = v53;
  v57[3] = v54;
  v57[4] = v55;
  *((_WORD *)v57 + 20) = v56;
  *((_BYTE *)v57 + 42) = v51;
  v57[6] = v40;
  v57[7] = v33;
  swift_release();
  sub_186F33EA0(v53, v54);
  swift_release();
  return sub_186F33C98(v40, v33);
}

uint64_t dispatch thunk of HPKEPublicKeySerialization.init<A>(_:kem:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of HPKEPublicKeySerialization.hpkeRepresentation(kem:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of HPKEDiffieHellmanPrivateKeyGeneration.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

ValueMetadata *type metadata accessor for HPKE.DHKEM()
{
  return &type metadata for HPKE.DHKEM;
}

uint64_t sub_186F4E2DC@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  char v10 = *a2;
  char v16 = *a2;
  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(a4 + 8) + 16LL))(&v16, a3);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
  }
  sub_186F33C98(v11, v12);
  uint64_t v15 = _s5DHKEMO9PublicKeyVMa(0LL, a3, a4, v14);
  uint64_t result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32LL))( &a5[*(int *)(v15 + 36)],  a1,  a3);
  *a5 = v10;
  return result;
}

uint64_t sub_186F4E390@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v33 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](a1);
  uint64_t v35 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(v5 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v27 - v10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))( AssociatedTypeWitness,  AssociatedConformanceWitness);
  uint64_t v13 = *(int *)(a1 + 36);
  uint64_t v34 = v2;
  uint64_t v14 = *(void *)(*(void *)(AssociatedConformanceWitness + 8) + 8LL);
  uint64_t v15 = v36;
  (*(void (**)(void *__return_ptr, _BYTE *, uint64_t, uint64_t))(v14 + 24))( v39,  &v2[v13],  AssociatedTypeWitness,  v14);
  if (v15) {
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  }
  uint64_t v36 = v9;
  uint64_t v31 = v39[0];
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(AssociatedTypeWitness, v14);
  uint64_t v17 = v34;
  LOBYTE(v39[0]) = *v34;
  uint64_t v18 = *(void *)(v7 + 8);
  int v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v29 = v28(v39, v4, v18);
  uint64_t v30 = v19;
  (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v4);
  LOBYTE(v39[0]) = *v17;
  char v20 = v39[0];
  uint64_t v21 = v28(v39, v4, v18);
  unint64_t v23 = v22;
  v39[3] = &type metadata for SharedSecret;
  v39[4] = sub_186F4F76C();
  v39[0] = v31;
  char v38 = v20;
  char v37 = 0x20100u >> (8 * v20);
  swift_retain();
  uint64_t v25 = v29;
  uint64_t v24 = v30;
  sub_186F4B674((uint64_t)v39, 0LL, 0xF000000000000000LL, &v38, &v40, &v37);
  sub_186F33C98(v21, v23);
  swift_release();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v11, AssociatedTypeWitness);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  uint64_t v26 = v32;
  *uint64_t v32 = v40;
  v26[1] = v25;
  void v26[2] = v24;
  return result;
}

uint64_t sub_186F4E6B4@<X0>( uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v23[0] = a5;
  uint64_t v9 = *(void *)(a4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v13 = (char *)v23 - v12;
  char v14 = *a2;
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(a3, v9);
  char v24 = v14;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v16 = v23[1];
  uint64_t v17 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(AssociatedConformanceWitness + 8) + 16LL))( &v24,  AssociatedTypeWitness);
  if (v16)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a1, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  }

  else
  {
    sub_186F33C98(v17, v18);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
    uint64_t v21 = _s5DHKEMO10PrivateKeyVMa(0LL, a3, a4, v20);
    unint64_t v22 = (_BYTE *)v23[0];
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32LL))( v23[0] + *(int *)(v21 + 36),  a1,  a3);
    *unint64_t v22 = v14;
  }

  return result;
}

uint64_t sub_186F4E82C(size_t *a1, uint64_t a2, uint64_t a3)
{
  void (*v19)(void *__return_ptr, unint64_t, uint64_t, uint64_t);
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  void (*v31)(void *__return_ptr, unint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  unsigned __int8 *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  unint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  __int128 v65;
  uint64_t v66;
  unint64_t v67;
  void v68[2];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  size_t *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unsigned __int8 *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  __int128 v83;
  uint64_t v84;
  unint64_t v85;
  void v86[3];
  ValueMetadata *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  unint64_t v73 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v77 = a3;
  uint64_t v80 = *(void *)(v4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v75 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v74 = (char *)v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v7);
  uint64_t v76 = (char *)v68 - v9;
  char v79 = v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  char v14 = (char *)v68 - v13;
  uint64_t v15 = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(v15 + 16))(v11, v15);
  unint64_t v17 = a2 + *(int *)(_s5DHKEMO9PublicKeyVMa(0LL, AssociatedTypeWitness, AssociatedConformanceWitness, v16) + 36);
  uint64_t v18 = *(void *)(*(void *)(v15 + 8) + 8LL);
  uint64_t v19 = *(void (**)(void *__return_ptr, unint64_t, uint64_t, uint64_t))(v18 + 24);
  __int16 v87 = &type metadata for SharedSecret;
  uint64_t v20 = sub_186F4F76C();
  char v88 = v20;
  uint64_t v81 = v17;
  uint64_t v21 = v91;
  v19(v86, v17, v11, v18);
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return __swift_deallocate_boxed_opaque_existential_1((uint64_t)v86);
  }

  else
  {
    uint64_t v70 = AssociatedTypeWitness;
    uint64_t v71 = v12;
    uint64_t v72 = v11;
    unint64_t v91 = v14;
    unint64_t v22 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v86, (uint64_t)v87);
    MEMORY[0x1895F8858](v22);
    char v24 = (void *)((char *)v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    (*(void (**)(uint64_t *))(v25 + 16))(v24);
    uint64_t v26 = *v24;
    swift_beginAccess();
    uint64_t v27 = sub_186F38E60(v26 + 32, v26 + 32 + *(void *)(v26 + 16));
    uint64_t v29 = v28;
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
    uint64_t v89 = v27;
    unint64_t v90 = v29;
    uint64_t v30 = v78;
    uint64_t v31 = *(void (**)(void *__return_ptr, unint64_t, uint64_t))(v80 + 24);
    __int16 v87 = &type metadata for SharedSecret;
    char v88 = v20;
    v31(v86, v81, v79);
    uint64_t v77 = 0LL;
    uint64_t v33 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v86, (uint64_t)v87);
    MEMORY[0x1895F8858](v33);
    uint64_t v35 = (void *)((char *)v68 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    (*(void (**)(uint64_t *))(v36 + 16))(v35);
    char v37 = *v35;
    swift_beginAccess();
    char v38 = sub_186F38E60(v37 + 32, v37 + 32 + *(void *)(v37 + 16));
    size_t v40 = v39;
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
    sub_186F87AC0();
    sub_186F33C98(v38, v40);
    uint64_t v41 = v76;
    uint64_t v42 = v30;
    uint64_t v43 = v91;
    uint64_t v44 = v72;
    (*(void (**)(uint64_t, uint64_t))(v18 + 16))(v72, v18);
    LOBYTE(v86[0]) = *v42;
    uint64_t v45 = *(void *)(AssociatedConformanceWitness + 8);
    unint64_t v46 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v45 + 16);
    uint64_t v47 = v77;
    uint64_t v48 = v70;
    uint64_t v49 = v46(v86, v70, v45);
    if (v47)
    {
      (*(void (**)(char *, uint64_t))(v75 + 8))(v41, v48);
      sub_186F33C98(v89, v90);
      return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v43, v44);
    }

    else
    {
      v68[1] = v50;
      uint64_t v69 = v49;
      uint64_t v51 = *(void (**)(char *, uint64_t))(v75 + 8);
      v51(v41, v48);
      __int16 v87 = (ValueMetadata *)MEMORY[0x189606D70];
      char v88 = MEMORY[0x189606D58];
      v86[0] = v89;
      v86[1] = v90;
      LODWORD(v77) = *v42;
      LOBYTE(v84) = v77;
      sub_186F33D20(v89, v90);
      uint64_t v76 = (char *)v46(&v84, v48, v45);
      uint64_t v81 = v52;
      uint64_t v53 = v74;
      (*(void (**)(uint64_t))(v80 + 16))(v79);
      LOBYTE(v84) = v77;
      unint64_t v54 = v46(&v84, v48, v45);
      __int16 v56 = v55;
      uint64_t v77 = 0LL;
      v51(v53, v48);
      int v57 = (char)*v78;
      LODWORD(v80) = *v78;
      LODWORD(v79) = 0x20100u >> (8 * v80);
      if (qword_18C6B0698 != -1) {
        swift_once();
      }
      uint64_t v84 = qword_18C6B0FA8;
      uint64_t v85 = qword_18C6B0FB0;
      int v58 = qword_186F8A5E0[v57];
      sub_186F33D20(qword_18C6B0FA8, qword_18C6B0FB0);
      sub_186F5ADA0(v58, 2LL);
      uint64_t v60 = v59;
      uint64_t v62 = v61;
      sub_186F87AC0();
      sub_186F33C98(v60, v62);
      size_t v83 = xmmword_186F88B50;
      sub_186F87AC0();
      uint64_t v63 = (uint64_t)v76;
      unint64_t v64 = v81;
      sub_186F87AC0();
      sub_186F33D20(v54, v56);
      sub_186F87AC0();
      sub_186F33C98(v54, v56);
      int v65 = v83;
      int v66 = v84;
      unsigned int v67 = v85;
      LOBYTE(v83) = v80;
      __int128 v82 = v79;
      sub_186F33D20(v84, v85);
      sub_186F6402C((uint64_t)v86, v65, *((uint64_t *)&v65 + 1), (unsigned __int8 *)&v83, &v82, v73);
      sub_186F33C98(v66, v67);
      sub_186F33C98(v65, *((unint64_t *)&v65 + 1));
      sub_186F33C98(v66, v67);
      sub_186F33C98(v54, v56);
      sub_186F33C98(v63, v64);
      sub_186F33C98(v89, v90);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v91, v72);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
      return v69;
    }
  }

uint64_t sub_186F4F06C@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, size_t *a5@<X8>)
{
  void (*v23)(uint64_t *__return_ptr, char *, uint64_t, uint64_t);
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  void (*v43)(void, void);
  uint64_t v44;
  uint64_t (*v45)(uint64_t *, uint64_t, uint64_t);
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  __int128 v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  size_t *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  char v77;
  __int128 v78;
  uint64_t v79;
  unint64_t v80;
  char v81[24];
  uint64_t v82;
  unint64_t v83;
  ValueMetadata *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void (*v88)(void, void);
  uint64_t v6 = v5;
  uint64_t v72 = a3;
  uint64_t v71 = a5;
  uint64_t v10 = *(void *)(a4 + 16);
  uint64_t v74 = *(void *)(*(void *)(a4 + 24) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v73 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  char v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v64 - v15;
  __int128 v82 = a1;
  size_t v83 = a2;
  unint64_t v75 = v6;
  v81[0] = *v6;
  uint64_t v76 = v10;
  uint64_t v17 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v18 = *(uint64_t (**)(uint64_t *, char *, void, void, uint64_t, uint64_t))(v17 + 8);
  sub_186F33D20(a1, a2);
  uint64_t v19 = v88;
  uint64_t result = v18(&v82, v81, MEMORY[0x189606D70], MEMORY[0x189606D58], AssociatedTypeWitness, v17);
  if (!v19)
  {
    uint64_t v69 = v17;
    char v88 = (void (*)(void, void))v14;
    unsigned int v67 = a1;
    uint64_t v70 = AssociatedTypeWitness;
    unint64_t v68 = a2;
    uint64_t v21 = (uint64_t *)&v75[*(int *)(a4 + 36)];
    uint64_t v22 = v74;
    unint64_t v23 = *(void (**)(uint64_t *__return_ptr, char *, uint64_t, uint64_t))(v74 + 24);
    uint64_t v84 = &type metadata for SharedSecret;
    char v24 = sub_186F4F76C();
    uint64_t v85 = v24;
    v23(&v82, v16, v76, v22);
    int v65 = v16;
    uint64_t v25 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v82, (uint64_t)v84);
    int v66 = &v64;
    MEMORY[0x1895F8858](v25);
    uint64_t v27 = v21;
    int v28 = (uint64_t *)((char *)&v64 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    (*(void (**)(uint64_t *))(v29 + 16))(v28);
    uint64_t v30 = *v28;
    swift_beginAccess();
    uint64_t v31 = sub_186F38E60(v30 + 32, v30 + 32 + *(void *)(v30 + 16));
    uint64_t v33 = v32;
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v82);
    unint64_t v86 = v31;
    __int16 v87 = v33;
    uint64_t v84 = &type metadata for SharedSecret;
    uint64_t v85 = v24;
    int v66 = v27;
    v23(&v82, v72, v76, v22);
    uint64_t v34 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v82, (uint64_t)v84);
    MEMORY[0x1895F8858](v34);
    uint64_t v36 = (uint64_t *)((char *)&v64 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    (*(void (**)(uint64_t *))(v37 + 16))(v36);
    char v38 = *v36;
    swift_beginAccess();
    unint64_t v39 = sub_186F38E60(v38 + 32, v38 + 32 + *(void *)(v38 + 16));
    uint64_t v41 = v40;
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v82);
    sub_186F87AC0();
    sub_186F33C98(v39, v41);
    uint64_t v84 = (ValueMetadata *)MEMORY[0x189606D70];
    uint64_t v85 = MEMORY[0x189606D58];
    __int128 v82 = v86;
    size_t v83 = v87;
    uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v22 + 16);
    sub_186F33D20(v86, v87);
    uint64_t v43 = v88;
    v42(v76, v22);
    LOBYTE(v79) = *v75;
    uint64_t v44 = v69;
    uint64_t v45 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v69 + 16);
    unint64_t v46 = v70;
    uint64_t v47 = v75;
    uint64_t v48 = v45(&v79, v70, v69);
    size_t v50 = v49;
    char v88 = *(void (**)(void, void))(v73 + 8);
    v88(v43, v46);
    uint64_t v51 = (char)*v47;
    LOBYTE(v79) = *v47;
    size_t v52 = v45(&v79, v46, v44);
    unint64_t v54 = v53;
    size_t v55 = v52;
    uint64_t v76 = 0LL;
    LODWORD(v75) = v51;
    LODWORD(v74) = 0x20100u >> (8 * v51);
    if (qword_18C6B0698 != -1) {
      swift_once();
    }
    char v79 = qword_18C6B0FA8;
    uint64_t v80 = qword_18C6B0FB0;
    __int16 v56 = qword_186F8A5E0[v51];
    sub_186F33D20(qword_18C6B0FA8, qword_18C6B0FB0);
    sub_186F5ADA0(v56, 2LL);
    int v58 = v57;
    uint64_t v60 = v59;
    sub_186F87AC0();
    sub_186F33C98(v58, v60);
    unint64_t v78 = xmmword_186F88B50;
    sub_186F87AC0();
    sub_186F87AC0();
    sub_186F33D20(v55, v54);
    sub_186F87AC0();
    sub_186F33C98(v55, v54);
    uint64_t v61 = v78;
    uint64_t v62 = v79;
    uint64_t v63 = v80;
    LOBYTE(v78) = (_BYTE)v75;
    uint64_t v77 = v74;
    sub_186F33D20(v79, v80);
    sub_186F6402C((uint64_t)&v82, v61, *((uint64_t *)&v61 + 1), (unsigned __int8 *)&v78, &v77, v71);
    sub_186F33C98(v62, v63);
    sub_186F33C98(v61, *((unint64_t *)&v61 + 1));
    sub_186F33C98(v62, v63);
    sub_186F33C98(v55, v54);
    sub_186F33C98(v48, v50);
    sub_186F33C98(v86, v87);
    v88(v65, v46);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v82);
  }

  return result;
}

unint64_t sub_186F4F76C()
{
  unint64_t result = qword_18C6B1038[0];
  if (!qword_18C6B1038[0])
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SharedSecret, &type metadata for SharedSecret);
    atomic_store(result, qword_18C6B1038);
  }

  return result;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8LL) + 80LL) & 0x20000) != 0) {
    JUMPOUT(0x18959F068LL);
  }
  return result;
}

uint64_t sub_186F4F7E4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, size_t *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v33 = a4;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v37 = *(void *)(*(void *)(a3 + 24) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v35 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  char v14 = (char *)v32 - v13;
  v39[0] = a1;
  v39[1] = a2;
  uint64_t v34 = v5;
  int v15 = *v5;
  char v42 = v15;
  uint64_t v36 = v8;
  uint64_t v16 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v17 = *(uint64_t (**)(void *, char *, void, void, uint64_t, uint64_t))(v16 + 8);
  sub_186F33D20(a1, a2);
  uint64_t v18 = v38;
  uint64_t result = v17(v39, &v42, MEMORY[0x189606D70], MEMORY[0x189606D58], AssociatedTypeWitness, v16);
  if (!v18)
  {
    int v40 = v15;
    uint64_t v38 = AssociatedTypeWitness;
    v32[1] = a1;
    v32[2] = a2;
    uint64_t v20 = v34;
    (*(void (**)(void *__return_ptr, char *, uint64_t))(v37 + 24))(v39, v14, v36);
    uint64_t v21 = v14;
    uint64_t v22 = v20;
    v32[0] = v21;
    uint64_t v23 = v39[0];
    v39[3] = &type metadata for SharedSecret;
    v39[4] = sub_186F4F76C();
    v39[0] = v23;
    uint64_t v24 = v37;
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v37 + 16);
    swift_retain();
    uint64_t v26 = v12;
    v25(v36, v24);
    char v42 = v40;
    uint64_t v27 = v38;
    uint64_t v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16))(&v42, v38, v16);
    unint64_t v30 = v29;
    uint64_t v31 = *(void (**)(char *, uint64_t))(v35 + 8);
    v31(v26, v27);
    char v42 = *v22;
    char v41 = 0x20100u >> (8 * v42);
    sub_186F4B674((uint64_t)v39, 0LL, 0xF000000000000000LL, &v42, v33, &v41);
    sub_186F33C98(v28, v30);
    swift_release();
    v31((char *)v32[0], v27);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  }

  return result;
}

uint64_t sub_186F4FAB8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_186F4E390(a1, a2);
}

void sub_186F4FACC()
{
}

uint64_t sub_186F4FB24@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  char v12 = *v2;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return sub_186F4E2DC((uint64_t)v8, &v12, AssociatedTypeWitness, AssociatedConformanceWitness, a2);
}

void sub_186F4FC40()
{
}

uint64_t sub_186F4FC4C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, size_t *a4@<X8>)
{
  return sub_186F4F7E4(a1, a2, a3, a4);
}

uint64_t _s5DHKEMO10PrivateKeyVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s5DHKEMO10PrivateKeyVMn);
}

uint64_t _s5DHKEMO9PublicKeyVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s5DHKEMO9PublicKeyVMn);
}

uint64_t sub_186F4FCA0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *sub_186F4FD18(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  __int128 v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = ~v5;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 1) & (unint64_t)~v5) + *(void *)(v4 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *__int128 v3 = *a2;
    __int128 v3 = (uint64_t *)(v9 + ((v5 + 16) & v6));
    swift_retain();
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))( ((unint64_t)a1 + v5 + 1) & v6,  ((unint64_t)a2 + v5 + 1) & v6);
  }

  return v3;
}

uint64_t sub_186F4FDB4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))((a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 80LL) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 80LL));
}

_BYTE *sub_186F4FDD4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))( (unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80),  (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_BYTE *sub_186F4FE24(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))( (unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80),  (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_BYTE *sub_186F4FE74(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))( (unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80),  (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_BYTE *sub_186F4FEC4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))( (unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80),  (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_186F4FF14(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFC) {
    unsigned int v6 = 252;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  int v8 = a2 - v6;
  if (a2 <= v6) {
    goto LABEL_22;
  }
  uint64_t v9 = ((v7 + 1) & ~v7) + *(void *)(v4 + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)&a1[v9];
      if (!v11) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }

    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)&a1[v9];
      if (!*(_WORD *)&a1[v9]) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }

    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0xFC) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v7 + 1] & ~v7);
      }
      unsigned int v15 = *a1;
      if (v15 >= 4) {
        return v15 - 3;
      }
      else {
        return 0LL;
      }
    }
  }

  int v11 = a1[v9];
  if (!a1[v9]) {
    goto LABEL_22;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (!(_DWORD)v9) {
    return v6 + v14 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_186F4FFE8 + 4 * byte_186F8A4A0[(v9 - 1)]))();
}

void sub_186F50058(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0xFCu) {
    unsigned int v6 = 252;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  size_t v7 = ((*(unsigned __int8 *)(v5 + 80) + 1LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(void *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      unsigned int v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        unsigned int v8 = 4u;
      }

      else if (v10 >= 0x100)
      {
        unsigned int v8 = 2;
      }

      else
      {
        unsigned int v8 = v10 > 1;
      }
    }

    else
    {
      unsigned int v8 = 1u;
    }
  }

  else
  {
    unsigned int v8 = 0u;
  }

  if (v6 < a2)
  {
    int v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        int v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }

        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }

        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }

    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X13 }

_UNKNOWN **sub_186F50244()
{
  return &off_189FADF78;
}

uint64_t SecureEnclave.P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)@<X0>(void *a1@<X8>)
{
  return sub_186F5028C(a1);
}

uint64_t sub_186F50264@<X0>(void *a1@<X8>)
{
  return sub_186F5028C(a1);
}

uint64_t SecureEnclave.P384.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)@<X0>(void *a1@<X8>)
{
  return sub_186F5028C(a1);
}

uint64_t sub_186F5028C@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t)sub_186F50308(*(void **)(v1 + 24));
  if (!v2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v5;
    sub_186F33D20(result, v5);
    sub_186F516FC(v6, v7);
    uint64_t v9 = v8;
    sub_186F33C98(v6, v7);
    uint64_t result = sub_186F33C98(v6, v7);
    *a1 = v9;
  }

  return result;
}

void *sub_186F50308(void *a1)
{
  v16[1] = *(id *)MEMORY[0x1895F89C0];
  sub_186F87CDC();
  unint64_t v2 = ccec_export_pub_size();
  uint64_t v3 = sub_186F87CE8();
  *(void *)(v3 + 16) = v2;
  ccec_export_pub();
  *(void *)(v3 + 16) = v2;
  uint64_t v4 = sub_186F3A07C(v3);
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v7 = (void *)sub_186F87A84();
  sub_186F33C98(v4, v6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6B05F8);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_186F8A440;
  *(void *)(v8 + 32) = sub_186F87BBC();
  *(void *)(v8 + 40) = v9;
  unsigned int v10 = (void *)sub_186F87CC4();
  swift_bridgeObjectRelease();
  sub_186F7D274(MEMORY[0x18961AFE8]);
  int v11 = (void *)sub_186F87B14();
  swift_bridgeObjectRelease();
  v16[0] = 0LL;
  id v12 = objc_msgSend(a1, sel_exchangeKey_algorithms_parameters_error_, v7, v10, v11, v16);

  id v13 = v16[0];
  if (v12)
  {
    int v14 = (void *)sub_186F87A9C();
  }

  else
  {
    int v14 = v13;
    sub_186F879D0();

    swift_willThrow();
  }

  return v14;
}

uint64_t SecureEnclave.Curve25519.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)@<X0>( uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (uint64_t)sub_186F5057C(*(void **)(v2 + 24), *a1);
  if (!v3)
  {
    uint64_t v7 = result;
    unint64_t v8 = v6;
    sub_186F33D20(result, v6);
    sub_186F516FC(v7, v8);
    uint64_t v10 = v9;
    sub_186F33C98(v7, v8);
    uint64_t result = sub_186F33C98(v7, v8);
    *a2 = v10;
  }

  return result;
}

void *sub_186F5057C(void *a1, uint64_t a2)
{
  v16[1] = *(id *)MEMORY[0x1895F89C0];
  sub_186F87CDC();
  uint64_t v4 = sub_186F3A07C(a2);
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)sub_186F87A84();
  sub_186F33C98(v4, v6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6B05F8);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_186F8A440;
  *(void *)(v8 + 32) = sub_186F87BBC();
  *(void *)(v8 + 40) = v9;
  uint64_t v10 = (void *)sub_186F87CC4();
  swift_bridgeObjectRelease();
  sub_186F7D274(MEMORY[0x18961AFE8]);
  int v11 = (void *)sub_186F87B14();
  swift_bridgeObjectRelease();
  v16[0] = 0LL;
  id v12 = objc_msgSend(a1, sel_exchangeKey_algorithms_parameters_error_, v7, v10, v11, v16);

  id v13 = v16[0];
  if (v12)
  {
    int v14 = (void *)sub_186F87A9C();
  }

  else
  {
    int v14 = v13;
    sub_186F879D0();

    swift_willThrow();
  }

  return v14;
}

uint64_t sub_186F50738@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (uint64_t)sub_186F5057C(*(void **)(v2 + 24), *a1);
  if (!v3)
  {
    uint64_t v7 = result;
    unint64_t v8 = v6;
    sub_186F33D20(result, v6);
    sub_186F516FC(v7, v8);
    uint64_t v10 = v9;
    sub_186F33C98(v7, v8);
    uint64_t result = sub_186F33C98(v7, v8);
    *a2 = v10;
  }

  return result;
}

unint64_t ccec_export_pub_size()
{
  return ((unint64_t)(cczp_bitlen() + 7) >> 2) | 1;
}

uint64_t static HKDF.extract<A>(inputKeyMaterial:salt:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v44 = a3;
  uint64_t v45 = a5;
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  uint64_t v46 = a7;
  swift_getAssociatedTypeWitness();
  uint64_t v43 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_186F87DCC();
  MEMORY[0x1895F8858](v9);
  int v40 = (char *)&v39 - v10;
  uint64_t v11 = swift_checkMetadataState();
  uint64_t v42 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  unint64_t v39 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  unsigned int v15 = (char *)&v39 - v14;
  uint64_t v16 = sub_186F87DCC();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v39 - v19;
  uint64_t v21 = *((void *)a4 - 1);
  uint64_t v22 = MEMORY[0x1895F8858](v18);
  uint64_t v24 = (char *)&v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v22);
  uint64_t v26 = (char *)&v39 - v25;
  uint64_t v47 = (void *)*v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v48, v16);
  if ((*(unsigned int (**)(char *, uint64_t, char *))(v21 + 48))(v20, 1LL, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    size_t v27 = sub_186F51514(MEMORY[0x18961AFE8]);
    size_t v28 = v27;
LABEL_7:
    uint64_t v49 = v47;
    MEMORY[0x1895F8858](v27);
    *(&v39 - 6) = (char *)v36;
    *(&v39 - 5) = a4;
    *(&v39 - 4) = (char *)v37;
    *(&v39 - 3) = a6;
    *(&v39 - 2) = (char *)v28;
    type metadata accessor for HashedAuthenticationCode(0LL, v36, v37, v38);
    SymmetricKey.withUnsafeBytes<A>(_:)((uint64_t (*)(uint64_t, uint64_t))sub_186F51F28, (uint64_t)(&v39 - 8));
    return swift_release();
  }

  (*(void (**)(char *, char *, char *))(v21 + 32))(v26, v20, a4);
  sub_186F87910();
  uint64_t v29 = sub_186F87D3C();
  unint64_t v30 = *(void (**)(char *, uint64_t))(v42 + 8);
  v30(v15, v11);
  if (v29 != 1)
  {
    (*(void (**)(char *, char *, char *))(v21 + 16))(v24, v26, a4);
    size_t v35 = sub_186F87CF4();
    size_t v28 = sub_186F51514(v35);
    swift_bridgeObjectRelease();
    size_t v27 = (*(uint64_t (**)(char *, char *))(v21 + 8))(v26, a4);
    goto LABEL_7;
  }

  uint64_t v31 = v39;
  sub_186F87910();
  uint64_t v32 = (uint64_t)v40;
  sub_186F87D60();
  v30(v31, v11);
  uint64_t v33 = AssociatedTypeWitness;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48LL))( v32,  1LL,  AssociatedTypeWitness);
  if ((_DWORD)result != 1)
  {
    swift_getAssociatedConformanceWitness();
    SymmetricKey.init<A>(data:)(v32, v33, (uint64_t *)&v49);
    size_t v27 = (*(uint64_t (**)(char *, char *))(v21 + 8))(v26, a4);
    size_t v28 = (size_t)v49;
    goto LABEL_7;
  }

  __break(1u);
  return result;
}

uint64_t static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v55 = a8;
  uint64_t v13 = a4;
  uint64_t v63 = a2;
  uint64_t v67 = a1;
  uint64_t v51 = a9;
  v73[3] = *MEMORY[0x1895F89C0];
  uint64_t v58 = type metadata accessor for HashedAuthenticationCode(0LL, a4, a7, a4);
  uint64_t v62 = *(void *)(v58 - 8);
  MEMORY[0x1895F8858](v58);
  __int16 v56 = (char *)&v51 - v15;
  uint64_t v16 = sub_186F87DCC();
  uint64_t v60 = *(void *)(v16 - 8);
  uint64_t v61 = v16;
  uint64_t v17 = MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)&v51 - v18;
  uint64_t v65 = a6;
  uint64_t v59 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](v17);
  unint64_t v54 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for HMAC(0LL, v13, a7, v21);
  uint64_t v57 = *(void *)(v22 - 8);
  uint64_t v23 = MEMORY[0x1895F8858](v22);
  uint64_t v25 = (char *)&v51 - v24;
  uint64_t v26 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](v23);
  size_t v28 = (char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v52 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v66 = a7;
  uint64_t v64 = v13;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  double v31 = ceil( (double)a3 / (double)(*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))( AssociatedTypeWitness,  AssociatedConformanceWitness));
  if ((~*(void *)&v31 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }

  if (v31 <= -1.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  if (v31 < 256.0)
  {
    uint64_t v13 = a5;
    LODWORD(a5) = (int)v31;
    if (qword_18C4B5020 == -1) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }

uint64_t sub_186F51190(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  swift_beginAccess();
  uint64_t v5 = v4[2];
  uint64_t result = swift_beginAccess();
  uint64_t v7 = *(void *)(a1 + 16);
  BOOL v8 = __OFADD__(v5, v7);
  uint64_t v9 = v5 + v7;
  if (v8)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result)
  {
    uint64_t result = _swift_stdlib_malloc_size(*v2);
    if (result - 32 >= v9) {
      return sub_186F712E0(a1);
    }
  }

  if (v9 < 0) {
    goto LABEL_15;
  }
  if (HIDWORD(v9))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  if ((_DWORD)v9)
  {
    unsigned int v10 = (v9 - 1) | ((v9 - 1) >> 1) | ((((_DWORD)v9 - 1) | ((v9 - 1) >> 1)) >> 2);
    unsigned int v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
    int v12 = v11 | HIWORD(v11);
    if (v12 == -1) {
      uint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v13 = (v12 + 1);
    }
  }

  else
  {
    uint64_t v13 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0LL;
  *(void *)(v14 + 24) = v13;
  uint64_t v15 = (char *)*v2;
  uint64_t result = swift_beginAccess();
  uint64_t v16 = *((void *)v15 + 2);
  if ((v16 & 0x8000000000000000LL) == 0)
  {
    sub_186F3F07C(v15, 0LL, v16);
    *uint64_t v2 = (const void *)v14;
    swift_release();
    return sub_186F712E0(a1);
  }

size_t sub_186F512D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  unsigned int v10 = *v4;
  size_t result = swift_beginAccess();
  uint64_t v12 = a4 - a3;
  if (!a3) {
    uint64_t v12 = 0LL;
  }
  if (a1 < 0 || v12 < a1)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  if (a2 < 0 || v12 < a2) {
    goto LABEL_21;
  }
  uint64_t v13 = v10[2];
  int64_t v14 = v13 + a2 - a1;
  if (__OFADD__(v13, a2 - a1))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  size_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result)
  {
    size_t result = _swift_stdlib_malloc_size(*v5);
  }

  if (v14 < 0) {
    goto LABEL_23;
  }
  if (HIDWORD(v14))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if ((_DWORD)v14)
  {
    unsigned int v15 = (v14 - 1) | ((v14 - 1) >> 1) | ((((_DWORD)v14 - 1) | ((v14 - 1) >> 1)) >> 2);
    unsigned int v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
    int v17 = v16 | HIWORD(v16);
    if (v17 == -1) {
      uint64_t v18 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v18 = (v17 + 1);
    }
  }

  else
  {
    uint64_t v18 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = 0LL;
  *(void *)(v19 + 24) = v18;
  uint64_t v20 = (char *)*v5;
  size_t result = swift_beginAccess();
  uint64_t v21 = *((void *)v20 + 2);
  if ((v21 & 0x8000000000000000LL) == 0)
  {
    sub_186F3F07C(v20, 0LL, v21);
    *uint64_t v5 = (const void *)v19;
    swift_release();
    return sub_186F713AC(a1, a2, a3, a4);
  }

LABEL_25:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

  *uint64_t v2 = v7;
  return result;
}

uint64_t sub_186F51450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_beginAccess();
  uint64_t v9 = *(void *)(a4 + 16);
  if (v9 < a3 || (a3 | a1) < 0 || v9 < a1)
  {
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v10 = a3 - a1;
  if (a2 >= 1)
  {
    if (v10 < 0 || v10 >= a2) {
      goto LABEL_11;
    }
    return 0LL;
  }

  if (v10 <= 0 && v10 > a2) {
    return 0LL;
  }
LABEL_11:
  uint64_t result = a1 + a2;
  if (__OFADD__(a1, a2))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }

  if (result < 0 || v9 < result) {
    goto LABEL_17;
  }
  return result;
}

size_t sub_186F51514(size_t result)
{
  size_t v1 = *(void *)(result + 16);
  if (HIDWORD(v1))
  {
    __break(1u);
  }

  else
  {
    if ((_DWORD)v1)
    {
      unsigned int v2 = (v1 - 1) | ((v1 - 1) >> 1) | ((((_DWORD)v1 - 1) | ((v1 - 1) >> 1)) >> 2);
      unsigned int v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
      int v4 = v3 | HIWORD(v3);
      if (v4 == -1) {
        uint64_t v5 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v5 = (v4 + 1);
      }
    }

    else
    {
      uint64_t v5 = 1LL;
    }

    unint64_t v6 = (const void *)(result + 32);
    type metadata accessor for SecureBytes.Backing();
    uint64_t v7 = (void *)swift_allocObject();
    void v7[2] = 0LL;
    v7[3] = v5;
    _swift_stdlib_malloc_size(v7);
    memcpy(v7 + 4, v6, v1);
    swift_beginAccess();
    void v7[2] = v1;
    uint64_t result = _swift_stdlib_malloc_size(v7);
  }

  __break(1u);
  return result;
}

size_t sub_186F515FC(uint64_t a1)
{
  size_t result = swift_beginAccess();
  size_t v3 = *(void *)(a1 + 16);
  if (HIDWORD(v3))
  {
    __break(1u);
  }

  else
  {
    int v4 = (const void *)(a1 + 32);
    if ((_DWORD)v3)
    {
      unsigned int v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
      unsigned int v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
      int v7 = v6 | HIWORD(v6);
      if (v7 == -1) {
        uint64_t v8 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v8 = (v7 + 1);
      }
    }

    else
    {
      uint64_t v8 = 1LL;
    }

    type metadata accessor for SecureBytes.Backing();
    uint64_t v9 = (void *)swift_allocObject();
    __int128 v9[2] = 0LL;
    v9[3] = v8;
    _swift_stdlib_malloc_size(v9);
    memcpy(v9 + 4, v4, v3);
    swift_beginAccess();
    __int128 v9[2] = v3;
    size_t result = _swift_stdlib_malloc_size(v9);
  }

  __break(1u);
  return result;
}

void sub_186F516FC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void *sub_186F5173C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __src, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20, char a21, char a22, char a23, char a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  uint64_t v44 = v37;
  __int16 v45 = v38;
  char v46 = BYTE2(v38);
  char v47 = BYTE3(v38);
  char v48 = BYTE4(v38);
  int64_t v39 = BYTE6(v38);
  char v49 = BYTE5(v38);
  if (BYTE6(v38))
  {
    unsigned int v40 = (BYTE6(v38) - 1) | ((BYTE6(v38) - 1) >> 1) | (((BYTE6(v38) - 1) | ((BYTE6(v38) - 1) >> 1)) >> 2);
    uint64_t v41 = (v40 | (v40 >> 4)) + 1;
  }

  else
  {
    uint64_t v41 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t v42 = (void *)swift_allocObject();
  v42[2] = 0LL;
  v42[3] = v41;
  _swift_stdlib_malloc_size(v42);
  memcpy(v42 + 4, &v44, v39);
  swift_beginAccess();
  v42[2] = v39;
  if ((uint64_t)(_swift_stdlib_malloc_size(v42) - 32) < v39)
  {
    __break(1u);
    JUMPOUT(0x186F51950LL);
  }

  return v42;
}

uint64_t static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, char *a10, uint64_t a11)
{
  uint64_t v32 = a8;
  uint64_t v33 = a2;
  uint64_t v41 = a4;
  int64_t v39 = a9;
  uint64_t v36 = a3;
  uint64_t v37 = a11;
  uint64_t v34 = a10;
  uint64_t v40 = sub_186F87DCC();
  uint64_t v38 = *(void *)(v40 - 8);
  MEMORY[0x1895F8858](v40);
  int v17 = (char *)&v31 - v16;
  uint64_t v18 = sub_186F87DCC();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1895F8858](v18);
  uint64_t v21 = (char *)&v31 - v20;
  uint64_t v23 = type metadata accessor for HashedAuthenticationCode(0LL, a5, a8, v22);
  uint64_t v35 = *(void *)(v23 - 8);
  MEMORY[0x1895F8858](v23);
  uint64_t v25 = (char *)&v31 - v24;
  uint64_t v42 = *a1;
  uint64_t v26 = *((void *)a6 - 1);
  (*(void (**)(char *, uint64_t, char *))(v26 + 16))(v21, v33, a6);
  (*(void (**)(char *, void, uint64_t, char *))(v26 + 56))(v21, 0LL, 1LL, a6);
  uint64_t v27 = v32;
  static HKDF.extract<A>(inputKeyMaterial:salt:)(&v42, (uint64_t)v21, a5, a6, v32, v34, (uint64_t)v25);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  uint64_t v28 = *(void *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v17, v36, a7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v17, 0LL, 1LL, a7);
  uint64_t v29 = MEMORY[0x18959EFD8](&protocol conformance descriptor for HashedAuthenticationCode<A>, v23);
  static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)( (uint64_t)v25,  (uint64_t)v17,  v41,  a5,  v23,  a7,  v27,  v29,  v39,  v37);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v17, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v25, v23);
}

uint64_t static HKDF.deriveKey<A>(inputKeyMaterial:info:outputByteCount:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v19 = *a1;
  uint64_t v18 = MEMORY[0x18961AFE8];
  unsigned int v15 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53B8);
  uint64_t v16 = (char *)sub_186F327D4();
  return static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)( &v19,  (uint64_t)&v18,  a2,  a3,  a4,  v15,  a5,  a6,  a8,  v16,  a7);
}

uint64_t static HKDF.deriveKey<A>(inputKeyMaterial:salt:outputByteCount:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, void *a8@<X8>)
{
  uint64_t v19 = *a1;
  uint64_t v18 = MEMORY[0x18961AFE8];
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53B8);
  unint64_t v16 = sub_186F327D4();
  return static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)( &v19,  a2,  (uint64_t)&v18,  a3,  a4,  a5,  v15,  a6,  a8,  a7,  v16);
}

uint64_t static HKDF.deriveKey(inputKeyMaterial:outputByteCount:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v14 = *a1;
  uint64_t v12 = MEMORY[0x18961AFE8];
  uint64_t v13 = MEMORY[0x18961AFE8];
  uint64_t v9 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53B8);
  uint64_t v10 = (char *)sub_186F327D4();
  return static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)( &v14,  (uint64_t)&v13,  (uint64_t)&v12,  a2,  a3,  v9,  (uint64_t)v9,  a4,  a5,  v10,  (uint64_t)v10);
}

uint64_t sub_186F51F28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5 = v3[2];
  uint64_t v6 = v3[4];
  uint64_t v7 = v3[6];
  v11[0] = a1;
  v11[1] = a2;
  uint64_t v10 = v7;
  unint64_t v8 = sub_186F32834();
  return static HMAC.authenticationCode<A>(for:using:)((uint64_t)v11, &v10, v5, MEMORY[0x1896181D0], v6, v8, a3);
}

uint64_t sub_186F51F98(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 - a3;
  if (!a3) {
    uint64_t v4 = 0LL;
  }
  if (result < 0 || v4 < result)
  {
    __break(1u);
  }

  else if ((a2 & 0x8000000000000000LL) == 0 && v4 >= a2)
  {
    return a2 - result;
  }

  __break(1u);
  return result;
}

uint64_t type metadata accessor for HKDF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HKDF);
}

void sub_186F51FD8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_186F52030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  __int16 v9 = v5;
  char v10 = BYTE2(v5);
  char v11 = BYTE3(v5);
  char v12 = BYTE4(v5);
  char v13 = BYTE5(v5);
  sub_186F5B050((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v5), a3, a4);
  return v6 & 1;
}

uint64_t AES.CMAC.update<A>(data:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  __int16 v9 = &v11[-v8];
  sub_186F87910();
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = v3;
  swift_getAssociatedConformanceWitness();
  sub_186F87CA0();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

uint64_t AES.CMAC.finalize()@<X0>(void *a1@<X8>)
{
  uint64_t v7 = sub_186F39FE0(*(void *)(v1 + 8));
  uint64_t v8 = v3;
  sub_186F791FC((uint64_t)&v7);
  sub_186F87CDC();
  sub_186F52B24((uint64_t)&v7);
  sub_186F394BC(v7, v8);
  *a1 = v4;
  a1[1] = v5;
  return swift_bridgeObjectRelease();
}

uint64_t AES.CMAC.init(key:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t result = AES.CMAC.init(key:outputSize:)(&v5, 16LL, v6);
  uint64_t v4 = v6[1];
  *a2 = v6[0];
  a2[1] = v4;
  return result;
}

uint64_t AES.CMAC.init(key:outputSize:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t result = swift_beginAccess();
  unint64_t v7 = *(void *)(v5 + 16);
  if (v7 >> 60)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = 8 * v7;
    if (v8 != 128 && v8 != 192 && v8 != 256) {
      goto LABEL_14;
    }
    uint64_t result = getCMACContextSize();
    if ((result & 0x8000000000000000LL) == 0)
    {
      size_t v9 = result;
      if (result)
      {
        uint64_t v10 = sub_186F87CE8();
        *(void *)(v10 + 16) = v9;
        bzero((void *)(v10 + 32), v9);
      }

      else
      {
        uint64_t v10 = MEMORY[0x18961AFE8];
      }

      ccaes_cbc_encrypt_mode();
      int v11 = cccmac_init();
      uint64_t result = swift_release();
      if (!v11)
      {
        *a3 = v10;
        a3[1] = a2;
        return result;
      }

      goto LABEL_13;
    }
  }

  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t AES.CMAC.update(bufferPointer:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if (a1) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  uint64_t result = (uint64_t)sub_186F52EB0(v3);
  uint64_t v3 = result;
  if (!a1) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t result = cccmac_update();
  if (!(_DWORD)result)
  {
    *uint64_t v1 = v3;
    return result;
  }

uint64_t sub_186F524E0()
{
  return sub_186F879B8();
}

uint64_t sub_186F525D4()
{
  return sub_186F524E0();
}

uint64_t sub_186F525F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v5;
  if ((result & 1) != 0)
  {
    if (a1) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  uint64_t result = (uint64_t)sub_186F52EB0(v5);
  uint64_t v5 = result;
  *a3 = result;
  if (!a1) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t result = cccmac_update();
  if (!(_DWORD)result)
  {
    *a3 = v5;
    return result;
  }

uint64_t AES.CMAC.MAC.byteCount.getter()
{
  return ((uint64_t (*)(void))((char *)&loc_186F5268C
                                         + *((int *)qword_186F526D0 + (*(void *)(v0 + 8) >> 62))))(0LL);
}

uint64_t sub_186F5269C()
{
  return BYTE6(v0);
}

uint64_t AES.CMAC.MAC.withUnsafeBytes<A>(_:)()
{
  return sub_186F87A78();
}

uint64_t AES.CMAC.MAC.hash(into:)()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  sub_186F33D20(v2, v1);
  sub_186F87AA8();
  return sub_186F33C98(v2, v1);
}

uint64_t AES.CMAC.MAC.hashValue.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  sub_186F87FDC();
  sub_186F33D20(v1, v2);
  sub_186F87AA8();
  sub_186F33C98(v1, v2);
  return sub_186F88018();
}

uint64_t sub_186F527A8()
{
  return ((uint64_t (*)(void))((char *)&loc_186F527BC
                                         + *((int *)qword_186F52800 + (*(void *)(v0 + 8) >> 62))))(0LL);
}

uint64_t sub_186F527CC()
{
  return BYTE6(v0);
}

uint64_t sub_186F52810()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  sub_186F87FDC();
  sub_186F33D20(v1, v2);
  sub_186F87AA8();
  sub_186F33C98(v1, v2);
  return sub_186F88018();
}

uint64_t sub_186F52870()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  sub_186F33D20(v2, v1);
  sub_186F87AA8();
  return sub_186F33C98(v2, v1);
}

uint64_t sub_186F528BC()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  sub_186F87FDC();
  sub_186F33D20(v1, v2);
  sub_186F87AA8();
  sub_186F33C98(v1, v2);
  return sub_186F88018();
}

uint64_t sub_186F52918()
{
  return AES.CMAC.MAC.withUnsafeBytes<A>(_:)();
}

uint64_t sub_186F5292C()
{
  return sub_186F52934(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_186F52934(uint64_t a1, unint64_t a2)
{
  uint64_t v11 = 0x203A43414DLL;
  unint64_t v12 = 0xE500000000000000LL;
  sub_186F33D20(a1, a2);
  uint64_t v4 = sub_186F6A918(a1, a2);
  uint64_t result = sub_186F33C98(a1, a2);
  uint64_t v6 = *(void *)(v4 + 16);
  if (v6 + 0x4000000000000000LL < 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  size_t v7 = 2 * v6;
  if (2 * v6 < 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }

  if (v6)
  {
    uint64_t v8 = sub_186F87CE8();
    *(void *)(v8 + 16) = v7;
    bzero((void *)(v8 + 32), v7);
  }

  else
  {
    uint64_t v8 = MEMORY[0x18961AFE8];
  }

  uint64_t v9 = 0LL;
  uint64_t v10 = v8;
  sub_186F87CDC();
  sub_186F3D3B8(v4, &v10, &v9);
  swift_bridgeObjectRelease();
  sub_186F87CDC();
  sub_186F87BC8();
  swift_release();
  swift_bridgeObjectRelease_n();
  sub_186F87BEC();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_186F52A70@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  sub_186F653A4(v4, v3);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t result = sub_186F33C98(v4, v3);
  *a1 = v6;
  a1[1] = v8;
  return result;
}

uint64_t sub_186F52AC4()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = sub_186F6A918(v1, v2);
  sub_186F33C98(v1, v2);
  return v3;
}

uint64_t sub_186F52B08(void *a1, _BYTE *a2, uint64_t a3)
{
  return sub_186F69888(a1, a2, a3, *(void *)v3, *(void *)(v3 + 8));
}

void sub_186F52B10(uint64_t *a1)
{
}

void sub_186F52B24(uint64_t a1)
{
  __asm { BR              X12 }

uint64_t sub_186F52B80()
{
  uint64_t v7 = v0;
  LOWORD(v8) = v3;
  BYTE2(v8) = BYTE2(v3);
  HIBYTE(v8) = BYTE3(v3);
  uint64_t v4 = *v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v4 = sub_186F52EB0((uint64_t)v4);
    *uint64_t v1 = v4;
  }

  uint64_t result = cccmac_final_generate();
  if ((_DWORD)result)
  {
    __break(1u);
    JUMPOUT(0x186F52D7CLL);
  }

  *uint64_t v1 = v4;
  *unint64_t v2 = v7;
  v2[1] = v8 | ((unint64_t)BYTE4(v3) << 32) | ((unint64_t)BYTE5(v3) << 40) | ((unint64_t)BYTE6(v3) << 48);
  return result;
}

uint64_t sub_186F52DCC(char *a1, char **a2)
{
  uint64_t v4 = *(int *)a1;
  if (*((_DWORD *)a1 + 1) < (int)v4)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  a1 = (char *)*((void *)a1 + 1);
  uint64_t result = sub_186F8797C();
  if (!result) {
    goto LABEL_11;
  }
  if (__OFSUB__(v4, sub_186F879A0())) {
    goto LABEL_8;
  }
  sub_186F87994();
  a1 = *a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = a1;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_9:
    a1 = sub_186F52EB0((uint64_t)a1);
    *a2 = a1;
  }

  uint64_t result = cccmac_final_generate();
  if (!(_DWORD)result)
  {
    *a2 = a1;
    return result;
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_186F52E9C(uint64_t a1)
{
  return sub_186F3CCB0(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_186F52EB0(uint64_t a1)
{
  return sub_186F3CB8C(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

unint64_t sub_186F52EC8()
{
  unint64_t result = qword_18C6B1250;
  if (!qword_18C6B1250)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for AES.CMAC.MAC, &type metadata for AES.CMAC.MAC);
    atomic_store(result, (unint64_t *)&qword_18C6B1250);
  }

  return result;
}

unint64_t sub_186F52F0C(void *a1)
{
  a1[1] = sub_186F52F48();
  a1[2] = sub_186F52F8C();
  a1[3] = sub_186F52FD0();
  unint64_t result = sub_186F53014();
  a1[4] = result;
  return result;
}

unint64_t sub_186F52F48()
{
  unint64_t result = qword_18C6B1290;
  if (!qword_18C6B1290)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for AES.CMAC.MAC, &type metadata for AES.CMAC.MAC);
    atomic_store(result, (unint64_t *)&qword_18C6B1290);
  }

  return result;
}

unint64_t sub_186F52F8C()
{
  unint64_t result = qword_18C6B1298;
  if (!qword_18C6B1298)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for AES.CMAC.MAC, &type metadata for AES.CMAC.MAC);
    atomic_store(result, (unint64_t *)&qword_18C6B1298);
  }

  return result;
}

unint64_t sub_186F52FD0()
{
  unint64_t result = qword_18C6B12A0;
  if (!qword_18C6B12A0)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for AES.CMAC.MAC, &type metadata for AES.CMAC.MAC);
    atomic_store(result, (unint64_t *)&qword_18C6B12A0);
  }

  return result;
}

unint64_t sub_186F53014()
{
  unint64_t result = qword_18C6B12A8;
  if (!qword_18C6B12A8)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for AES.CMAC.MAC, &type metadata for AES.CMAC.MAC);
    atomic_store(result, (unint64_t *)&qword_18C6B12A8);
  }

  return result;
}

unint64_t sub_186F5305C()
{
  unint64_t result = qword_18C6B12B0;
  if (!qword_18C6B12B0)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for AES.CMAC.MAC, &type metadata for AES.CMAC.MAC);
    atomic_store(result, (unint64_t *)&qword_18C6B12B0);
  }

  return result;
}

void *_s4CMACVwCP(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  sub_186F87CDC();
  return a1;
}

uint64_t _s4CMACVwxx()
{
  return swift_bridgeObjectRelease();
}

void *_s4CMACVwca(void *a1, void *a2)
{
  *a1 = *a2;
  sub_186F87CDC();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *_s4CMACVwta(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t _s4CMACVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t _s4CMACVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AES.CMAC()
{
  return &type metadata for AES.CMAC;
}

ValueMetadata *type metadata accessor for AES.CMAC.MAC()
{
  return &type metadata for AES.CMAC.MAC;
}

void sub_186F53200(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (!v4) {
    *a3 = v6 & 1;
  }
}

uint64_t sub_186F53234(uint64_t a1, uint64_t a2)
{
  return sub_186F525F0(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t SHA256.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F535B8(MEMORY[0x1895FA278], &qword_18C4B54B8, a1);
}

void *SHA256.update(bufferPointer:)(uint64_t a1, uint64_t a2)
{
  return sub_186F53324(a1, a2, &qword_18C4B54B8);
}

uint64_t SHA256.finalize()@<X0>(uint64_t a1@<X8>)
{
  return sub_186F4CA64(a1);
}

uint64_t SHA384.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F535B8(MEMORY[0x1895FA280], &qword_18C4B4FB0, a1);
}

void *SHA384.update(bufferPointer:)(uint64_t a1, uint64_t a2)
{
  return sub_186F53324(a1, a2, &qword_18C4B4FB0);
}

uint64_t SHA384.finalize()@<X0>(uint64_t a1@<X8>)
{
  return sub_186F4CAFC(a1);
}

uint64_t static SHA256.blockByteCount.getter()
{
  return 64LL;
}

uint64_t static SHA256.byteCount.getter()
{
  return 32LL;
}

void *sub_186F53300(uint64_t a1, uint64_t a2)
{
  return sub_186F53324(a1, a2, &qword_18C6B05D0);
}

void *sub_186F5330C(uint64_t a1, uint64_t a2)
{
  return sub_186F53324(a1, a2, &qword_18C4B4FB0);
}

void *sub_186F53318(uint64_t a1, uint64_t a2)
{
  return sub_186F53324(a1, a2, &qword_18C4B54B8);
}

void *sub_186F53324(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
    return (void *)ccdigest_update();
  }
  uint64_t v5 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = *(void *)(v5 + 16);
  swift_retain();
  size_t DigestSizeForDigestInfo = getDigestSizeForDigestInfo();
  unint64_t result = (void *)swift_slowAlloc();
  if ((DigestSizeForDigestInfo & 0x8000000000000000LL) == 0)
  {
    uint64_t v9 = result;
    memmove(result, *(const void **)(v5 + 24), DigestSizeForDigestInfo);
    swift_release();
    *(void *)(v6 + 24) = v9;
    *uint64_t v3 = v6;
    swift_release();
    return (void *)ccdigest_update();
  }

  __break(1u);
  return result;
}

void *_s9CryptoKit8InsecureO3MD5V6update13bufferPointerySW_tF_0(uint64_t a1, uint64_t a2)
{
  return sub_186F5340C(a1, a2, &qword_18C4B4FA0);
}

void *_s9CryptoKit8InsecureO4SHA1V6update13bufferPointerySW_tF_0(uint64_t a1, uint64_t a2)
{
  return sub_186F5340C(a1, a2, &qword_18C4B54D0);
}

void *sub_186F5340C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *v3;
  if (isUniquelyReferenced_nonNull_native) {
    return (void *)ccdigest_update();
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = *(void *)(v6 + 16);
  size_t DigestSizeForDigestInfo = getDigestSizeForDigestInfo();
  unint64_t result = (void *)swift_slowAlloc();
  if ((DigestSizeForDigestInfo & 0x8000000000000000LL) == 0)
  {
    uint64_t v10 = result;
    memmove(result, *(const void **)(v6 + 24), DigestSizeForDigestInfo);
    swift_release();
    *(void *)(v7 + 24) = v10;
    *uint64_t v3 = v7;
    return (void *)ccdigest_update();
  }

  __break(1u);
  return result;
}

uint64_t sub_186F534D4()
{
  return 64LL;
}

uint64_t sub_186F534DC@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F53680(MEMORY[0x1895FA278], &qword_18C4B54B8, a1);
}

void *sub_186F534F0(uint64_t a1, uint64_t a2)
{
  return sub_186F53324(a1, a2, &qword_18C4B54B8);
}

uint64_t sub_186F5350C@<X0>(uint64_t a1@<X8>)
{
  return sub_186F4CA64(a1);
}

uint64_t static SHA384.blockByteCount.getter()
{
  return 128LL;
}

uint64_t static SHA384.byteCount.getter()
{
  return 48LL;
}

uint64_t sub_186F5353C()
{
  return 128LL;
}

uint64_t sub_186F53544@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F53680(MEMORY[0x1895FA280], &qword_18C4B4FB0, a1);
}

void *sub_186F53558(uint64_t a1, uint64_t a2)
{
  return sub_186F53324(a1, a2, &qword_18C4B4FB0);
}

uint64_t sub_186F53574@<X0>(uint64_t a1@<X8>)
{
  return sub_186F4CAFC(a1);
}

uint64_t static SHA512.blockByteCount.getter()
{
  return 128LL;
}

uint64_t static SHA512.byteCount.getter()
{
  return 64LL;
}

uint64_t SHA512.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F535B8(MEMORY[0x1895FA298], &qword_18C6B05D0, a1);
}

uint64_t sub_186F535B8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a1();
  if (result)
  {
    uint64_t v6 = result;
    __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t v7 = swift_allocObject();
    getDigestSizeForDigestInfo();
    uint64_t v8 = swift_slowAlloc();
    uint64_t result = ccdigest_init();
    *(void *)(v7 + 16) = v6;
    *(void *)(v7 + 24) = v8;
    *a3 = v7;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void *SHA512.update(bufferPointer:)(uint64_t a1, uint64_t a2)
{
  return sub_186F53324(a1, a2, &qword_18C6B05D0);
}

uint64_t SHA512.finalize()@<X0>(_OWORD *a1@<X8>)
{
  return sub_186F4CB9C(a1);
}

uint64_t sub_186F5366C@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F53680(MEMORY[0x1895FA298], &qword_18C6B05D0, a1);
}

uint64_t sub_186F53680@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = a1();
  if (result)
  {
    uint64_t v6 = result;
    __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t v7 = swift_allocObject();
    getDigestSizeForDigestInfo();
    uint64_t v8 = swift_slowAlloc();
    uint64_t result = ccdigest_init();
    *(void *)(v7 + 16) = v6;
    *(void *)(v7 + 24) = v8;
    *a3 = v7;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void *sub_186F536F8(uint64_t a1, uint64_t a2)
{
  return sub_186F53324(a1, a2, &qword_18C6B05D0);
}

uint64_t sub_186F53714@<X0>(_OWORD *a1@<X8>)
{
  return sub_186F4CB9C(a1);
}

unint64_t sub_186F53738()
{
  unint64_t result = qword_18C6B12B8;
  if (!qword_18C6B12B8)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F8BBD8, &type metadata for SHA256Digest);
    atomic_store(result, (unint64_t *)&qword_18C6B12B8);
  }

  return result;
}

unint64_t sub_186F5377C(uint64_t a1)
{
  unint64_t result = sub_186F450F8();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_186F537A4()
{
  unint64_t result = qword_18C4B5268;
  if (!qword_18C4B5268)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SHA256Digest, &type metadata for SHA256Digest);
    atomic_store(result, (unint64_t *)&qword_18C4B5268);
  }

  return result;
}

unint64_t sub_186F537EC()
{
  unint64_t result = qword_18C6B1330;
  if (!qword_18C6B1330)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F8BD30, &type metadata for SHA384Digest);
    atomic_store(result, (unint64_t *)&qword_18C6B1330);
  }

  return result;
}

unint64_t sub_186F53830(uint64_t a1)
{
  unint64_t result = sub_186F45140();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_186F53858()
{
  unint64_t result = qword_18C4B5010;
  if (!qword_18C4B5010)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SHA384Digest, &type metadata for SHA384Digest);
    atomic_store(result, (unint64_t *)&qword_18C4B5010);
  }

  return result;
}

unint64_t sub_186F538A0()
{
  unint64_t result = qword_18C6B13A8;
  if (!qword_18C6B13A8)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F8BE88, &type metadata for SHA512Digest);
    atomic_store(result, (unint64_t *)&qword_18C6B13A8);
  }

  return result;
}

unint64_t sub_186F538E4(uint64_t a1)
{
  unint64_t result = sub_186F45188();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_186F5390C()
{
  unint64_t result = qword_18C6B13E8;
  if (!qword_18C6B13E8)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SHA512Digest, &type metadata for SHA512Digest);
    atomic_store(result, (unint64_t *)&qword_18C6B13E8);
  }

  return result;
}

ValueMetadata *type metadata accessor for SHA256()
{
  return &type metadata for SHA256;
}

ValueMetadata *type metadata accessor for SHA384()
{
  return &type metadata for SHA384;
}

ValueMetadata *type metadata accessor for SHA512()
{
  return &type metadata for SHA512;
}

ValueMetadata *type metadata accessor for Insecure()
{
  return &type metadata for Insecure;
}

uint64_t sub_186F53990@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v42 = a5;
  uint64_t v45 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  char v46 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_getAssociatedTypeWitness();
  uint64_t v50 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_186F87DCC();
  MEMORY[0x1895F8858](v9);
  uint64_t v44 = (char *)&v41 - v10;
  uint64_t v11 = swift_checkMetadataState();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v43 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  unint64_t v16 = (char *)&v41 - v15;
  uint64_t v51 = a4;
  uint64_t v52 = a2;
  sub_186F87D3C();
  uint64_t v48 = ccwrap_unwrapped_size();
  uint64_t result = ccaes_ecb_decrypt_mode();
  if (result)
  {
    uint64_t v18 = result;
    uint64_t v57 = MEMORY[0x18959ECB4]();
    uint64_t v19 = swift_slowAlloc();
    swift_beginAccess();
    uint64_t v20 = (void *)v19;
    int v21 = ccecb_init();
    if (v21)
    {
      int v22 = v21;
      sub_186F35D6C();
      swift_allocError();
      *(_DWORD *)uint64_t v23 = v22;
      *(_BYTE *)(v23 + 4) = 0;
      swift_willThrow();
      goto LABEL_10;
    }

    uint64_t v41 = v19;
    sub_186F87910();
    uint64_t v24 = sub_186F87D3C();
    uint64_t v25 = *(void (**)(char *, uint64_t))(v12 + 8);
    v25(v16, v11);
    if (v24 != 1)
    {
      uint64_t v31 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v46, v52, a3);
      uint64_t v34 = sub_186F87AE4();
      v56[3] = MEMORY[0x189606D70];
      v56[4] = MEMORY[0x189606D58];
      v56[0] = v34;
      v56[1] = v35;
      uint64_t v33 = v49;
      uint64_t v27 = v51;
      goto LABEL_8;
    }

    uint64_t v26 = v43;
    uint64_t v27 = v51;
    sub_186F87910();
    uint64_t v28 = v44;
    sub_186F87D60();
    v25(v26, v11);
    uint64_t v29 = AssociatedTypeWitness;
    uint64_t v30 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1LL, AssociatedTypeWitness);
    uint64_t v31 = v52;
    if ((_DWORD)result != 1)
    {
      uint64_t v54 = v29;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v53);
      (*(void (**)(uint64_t *, char *, uint64_t))(v30 + 32))(boxed_opaque_existential_1, v28, v29);
      sub_186F3A3A0(&v53, (uint64_t)v56);
      uint64_t v33 = v49;
LABEL_8:
      unint64_t v36 = MEMORY[0x1895F8858](v48);
      *(&v41 - 6) = a3;
      *(&v41 - 5) = v27;
      *(&v41 - 4) = (uint64_t)v56;
      *(&v41 - 3) = v18;
      uint64_t v20 = (void *)v41;
      *(&v41 - 2) = v41;
      *(&v41 - 1) = v31;
      unint64_t v37 = sub_186F4267C(v36, (uint64_t (*)(void *, uint64_t *))sub_186F53EE0, (uint64_t)(&v41 - 8));
      if (!v33)
      {
        unint64_t v40 = v37;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
        *uint64_t v42 = v40;
        int64_t v39 = v20;
        rsize_t v38 = v57;
        goto LABEL_11;
      }

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
LABEL_10:
      rsize_t v38 = v57;
      int64_t v39 = v20;
LABEL_11:
      memset_s(v39, v38, 0, v38);
      return MEMORY[0x18959F068](v20, -1LL, -1LL);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_186F53DE4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = sub_186F879B8();
  if (v5)
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v4 = 4;
    *(_BYTE *)(v4 + 4) = 1;
    return swift_willThrow();
  }

  return result;
}

uint64_t sub_186F53EE0(uint64_t a1, uint64_t a2)
{
  return sub_186F53DE4(a1, a2, *(void **)(v2 + 32));
}

uint64_t sub_186F53F00@<X0>(uint64_t result@<X0>, void *a2@<X2>, _DWORD *a3@<X8>)
{
  if (*a2)
  {
    uint64_t v3 = result;
    uint64_t result = sub_186F87D3C();
    if (v3)
    {
      uint64_t result = ccwrap_auth_decrypt();
      *a3 = result;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_186F53F9C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_186F53F00(a1, *(void **)(v2 + 32), a2);
}

void sub_186F53FCC(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_186F54034@<X0>(uint64_t a1@<X8>)
{
  LOWORD(v4) = a1;
  BYTE2(v4) = BYTE2(a1);
  HIBYTE(v4) = BYTE3(a1);
  unsigned __int8 v5 = BYTE4(a1);
  unsigned __int8 v6 = BYTE5(a1);
  unsigned __int8 v7 = BYTE6(a1);
  swift_beginAccess();
  uint64_t result = ccwrap_auth_encrypt();
  *uint64_t v1 = v2;
  v1[1] = v4 | ((unint64_t)v5 << 32) | ((unint64_t)v6 << 40) | ((unint64_t)v7 << 48);
  return result;
}

uint64_t sub_186F54390(uint64_t a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *a2;
  swift_beginAccess();
  uint64_t v14 = ccwrap_wrapped_size();
  *(void *)&__int128 v15 = sub_186F39FE0(v14);
  *((void *)&v15 + 1) = v3;
  sub_186F791FC((uint64_t)&v15);
  __int128 v16 = v15;
  if (!ccaes_ecb_encrypt_mode()) {
    __break(1u);
  }
  rsize_t v4 = MEMORY[0x18959ECB4]();
  unsigned __int8 v5 = (void *)swift_slowAlloc();
  swift_beginAccess();
  int v6 = ccecb_init();
  if (v6)
  {
    int v7 = v6;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = v7;
    *(_BYTE *)(v8 + 4) = 0;
  }

  else
  {
    swift_retain();
    sub_186F53FCC((uint64_t)&v16);
    int v10 = v9;
    swift_release();
    if (!v10)
    {
      unint64_t v13 = *((void *)&v16 + 1);
      uint64_t v2 = v16;
      sub_186F33D20(v16, *((unint64_t *)&v16 + 1));
      memset_s(v5, v4, 0, v4);
      MEMORY[0x18959F068](v5, -1LL, -1LL);
      sub_186F33C98(v2, v13);
      return v2;
    }

    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v11 = 3;
    *(_BYTE *)(v11 + 4) = 1;
  }

  swift_willThrow();
  memset_s(v5, v4, 0, v4);
  MEMORY[0x18959F068](v5, -1LL, -1LL);
  sub_186F33C98(v16, *((unint64_t *)&v16 + 1));
  return v2;
}

uint64_t sub_186F545B4()
{
  return v1;
}

uint64_t sub_186F54618@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, BOOL *a5@<X8>)
{
  uint64_t result = a4 - a3;
  if (a3) {
    uint64_t v8 = a4 - a3;
  }
  else {
    uint64_t v8 = 0LL;
  }
  if (a1)
  {
    if (v8 == a2 - a1)
    {
      if (a3)
      {
        uint64_t result = cc_cmp_safe();
        BOOL v9 = (_DWORD)result == 0;
LABEL_10:
        *a5 = v9;
        return result;
      }

      goto LABEL_12;
    }

LABEL_9:
    BOOL v9 = 0;
    goto LABEL_10;
  }

  if (v8) {
    goto LABEL_9;
  }
  if (!a3) {
LABEL_12:
  }
    __break(1u);
  __break(1u);
  return result;
}

  if (v7 == a5 + 1)
  {
LABEL_10:
    *a6 = result;
    a6[1] = a2;
    a6[2] = a3;
    a6[3] = a4;
    a6[4] = a5;
    return result;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_186F54690()
{
  return sub_186F879B8();
}

uint64_t sub_186F546D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  return sub_186F54618(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24), a3);
}

void sub_186F546EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __asm { BR              X10 }

uint64_t sub_186F5474C()
{
  uint64_t v8 = 16LL;
  if (!v7) {
    uint64_t v8 = 8LL;
  }
  if (BYTE6(v2) == v8)
  {
    sub_186F33D20(v1, v0);
    sub_186F394BC(v1, v0);
    uint64_t v18 = v9;
    uint64_t v17 = v10;
    sub_186F394BC(v3, v2);
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    uint64_t result = sub_186F33C98(v1, v0);
    *(void *)uint64_t v6 = v12;
    *(void *)(v6 + 8) = v14;
    *(void *)(v6 + 16) = v18;
    *(void *)(v6 + 24) = v17;
    *(void *)(v6 + 32) = v5;
    *(void *)(v6 + 40) = v4;
    *(_BYTE *)(v6 + 48) = v7;
  }

  else
  {
    sub_186F33C98(v5, v4);
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v16 = 1;
    *(_BYTE *)(v16 + 4) = 1;
    swift_willThrow();
    sub_186F33C98(v3, v2);
    return sub_186F33C98(v1, v0);
  }

  return result;
}

uint64_t sub_186F5487C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a3;
  unint64_t v8 = a3[1];
  int v27 = *a5;
  swift_beginAccess();
  unint64_t v9 = *(void *)(v6 + 16);
  if (v9 >> 60)
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v10 = 8 * v9;
  if (v10 != 128 && v10 != 256 && v10 != 192)
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v22 = 0;
    *(_BYTE *)(v22 + 4) = 1;
    return swift_willThrow();
  }

  ccaes_ccm_encrypt_mode();
  if (v8 >> 60 != 15)
  {
    uint64_t v23 = v7;
    unint64_t v12 = v8;
    goto LABEL_9;
  }

  uint64_t v11 = sub_186F42888(12LL);
  sub_186F4AEB8(v11, &v26);
  if (v5)
  {
LABEL_18:
    swift_unexpectedError();
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }

  unint64_t v12 = *((void *)&v26 + 1);
  uint64_t v23 = v26;
LABEL_9:
  sub_186F34034(v7, v8);
  uint64_t v13 = sub_186F87D3C();
  *(void *)&__int128 v25 = sub_186F39FE0(v13);
  *((void *)&v25 + 1) = v14;
  sub_186F791FC((uint64_t)&v25);
  __int128 v26 = v25;
  if (v27) {
    uint64_t v15 = 16LL;
  }
  else {
    uint64_t v15 = 8LL;
  }
  *(void *)&__int128 v24 = sub_186F39FE0(v15);
  *((void *)&v24 + 1) = v16;
  sub_186F791FC((uint64_t)&v24);
  __int128 v25 = v24;
  sub_186F55050(v6 + 32, v6 + 32 + *(void *)(v6 + 16), v23, v12);
  if (v5)
  {
    sub_186F33C98(v23, v12);
    sub_186F33C98(v25, *((unint64_t *)&v25 + 1));
    unint64_t v18 = *((void *)&v26 + 1);
    uint64_t v17 = v26;
  }

  else
  {
    unsigned __int128 v19 = v26;
    __int128 v20 = v25;
    sub_186F33D20(v23, v12);
    sub_186F33D20(v19, *((unint64_t *)&v19 + 1));
    sub_186F33D20(v20, *((unint64_t *)&v20 + 1));
    sub_186F546EC(v23, v12, v19, *((uint64_t *)&v19 + 1), v20, *((uint64_t *)&v20 + 1));
    sub_186F33C98(v23, v12);
    sub_186F33C98(v20, *((unint64_t *)&v20 + 1));
    unint64_t v18 = v19 >> 64;
    uint64_t v17 = v19;
  }

  return sub_186F33C98(v17, v18);
}

uint64_t sub_186F54B44(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  v13[4] = *MEMORY[0x1895F89C0];
  __int128 v10 = *(_OWORD *)(a1 + 16);
  uint64_t v5 = *a2;
  ccaes_ccm_decrypt_mode();
  swift_beginAccess();
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 >> 60)
  {
    __break(1u);
    JUMPOUT(0x186F55008LL);
  }

  uint64_t v7 = 8 * v6;
  if (v7 == 128 || v7 == 256 || v7 == 192)
  {
    __int128 v11 = v10;
    sub_186F44D4C((uint64_t)&v11, (uint64_t)v12);
    sub_186F44D4C((uint64_t)v12, (uint64_t)v13);
    __asm { BR              X11 }
  }

  sub_186F35D6C();
  swift_allocError();
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  swift_willThrow();
  return a4;
}

void sub_186F55050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X17 }

uint64_t sub_186F550D0@<X0>(uint64_t a1@<X5>, uint64_t a2@<X6>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  uint64_t v13 = v10;
  __int16 v14 = v11;
  char v15 = BYTE2(v11);
  char v16 = BYTE3(v11);
  char v17 = BYTE4(v11);
  char v18 = BYTE5(v11);
  return sub_186F5527C((uint64_t)&v13, (uint64_t)&v13 + BYTE6(v11), a1, a2, a3, v6, v4, v9, v5, v8, v7, a4);
}

uint64_t sub_186F5527C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  uint64_t v31 = a5;
  uint64_t v32 = a2;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a1;
  uint64_t v35 = a8;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = sub_186F87DCC();
  MEMORY[0x1895F8858](v13);
  char v15 = (char *)&v28 - v14;
  uint64_t v16 = swift_checkMetadataState();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v16);
  unsigned __int128 v19 = (char *)&v28 - v18;
  sub_186F87910();
  sub_186F87D60();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v15, 1LL, AssociatedTypeWitness);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    MEMORY[0x1895F8858](result);
    *(&v28 - 12) = a10;
    *(&v28 - 11) = v22;
    *(&v28 - 10) = a12;
    *(&v28 - 9) = v23;
    uint64_t v24 = v29;
    *(&v28 - 8) = v28;
    *(&v28 - 7) = v24;
    uint64_t v25 = v33;
    *(&v28 - 6) = v31;
    *(&v28 - 5) = v25;
    *(&v28 - 4) = v34;
    *(&v28 - 3) = v26;
    uint64_t v27 = v32;
    *(&v28 - 2) = v30;
    *(&v28 - 1) = v27;
    swift_getAssociatedConformanceWitness();
    sub_186F879B8();
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v15, AssociatedTypeWitness);
  }

  return result;
}

uint64_t sub_186F554DC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v42 = a9;
  uint64_t v40 = a2;
  uint64_t v41 = a8;
  uint64_t v38 = a1;
  uint64_t v39 = a7;
  uint64_t v36 = a5;
  uint64_t v37 = a6;
  uint64_t v35 = a4;
  uint64_t v44 = a3;
  swift_getAssociatedTypeWitness();
  uint64_t v43 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = sub_186F87DCC();
  MEMORY[0x1895F8858](v15);
  uint64_t v17 = (char *)&v35 - v16;
  uint64_t v18 = swift_checkMetadataState();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1895F8858](v18);
  int v21 = (char *)&v35 - v20;
  uint64_t v22 = sub_186F87DCC();
  MEMORY[0x1895F8858](v22);
  uint64_t v24 = (char *)&v35 - v23;
  (*(void (**)(char *, uint64_t))(v25 + 16))((char *)&v35 - v23, v44);
  uint64_t v26 = *(void *)(a14 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1LL, a14);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    sub_186F87910();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v24, a14);
    sub_186F87D60();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v17, 1LL, AssociatedTypeWitness);
    if ((_DWORD)result != 1)
    {
      MEMORY[0x1895F8858](result);
      uint64_t v29 = v36;
      *(&v35 - 10) = v35;
      *(&v35 - 9) = v29;
      uint64_t v30 = v39;
      *(&v35 - 8) = v37;
      *(&v35 - 7) = v30;
      *(&v35 - 6) = v41;
      *(&v35 - 5) = v31;
      *(&v35 - 4) = v33;
      *(&v35 - 3) = v32;
      uint64_t v34 = v40;
      *(&v35 - 2) = v38;
      *(&v35 - 1) = v34;
      swift_getAssociatedConformanceWitness();
      sub_186F879B8();
      return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v17, AssociatedTypeWitness);
    }
  }

  __break(1u);
  return result;
}

void sub_186F557AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  __int128 v3 = *(_OWORD *)(a3 + 32);
  sub_186F44D4C((uint64_t)&v3, (uint64_t)v4);
  sub_186F44D4C((uint64_t)v4, (uint64_t)v5);
  __asm { BR              X11 }

uint64_t sub_186F55854@<X0>(uint64_t a1@<X8>)
{
  *((void *)&v12 + 1) = a1 & 0x3FFFFFFFFFFFFFFFLL;
  *(void *)uint64_t v10 = v12;
  *(void *)&v10[6] = *(void *)((char *)&v12 + 6);
  uint64_t v13 = v1;
  uint64_t v14 = v2;
  uint64_t v15 = v8;
  uint64_t v16 = v7;
  uint64_t v17 = v5;
  uint64_t v18 = v3;
  uint64_t v19 = v6;
  uint64_t v20 = v4;
  int v21 = v10;
  uint64_t v22 = &v10[BYTE6(a1)];
  sub_186F5A524();
  return sub_186F44EAC((uint64_t)&v11);
}

uint64_t sub_186F559C4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v41 = a9;
  uint64_t v39 = a7;
  uint64_t v40 = a8;
  uint64_t v37 = a6;
  uint64_t v38 = a2;
  uint64_t v34 = a4;
  uint64_t v35 = a5;
  uint64_t v43 = a3;
  uint64_t v36 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = sub_186F87DCC();
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v34 - v15;
  uint64_t v17 = swift_checkMetadataState();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)&v34 - v19;
  uint64_t v21 = sub_186F87DCC();
  MEMORY[0x1895F8858](v21);
  uint64_t v23 = (char *)&v34 - v22;
  (*(void (**)(char *, uint64_t))(v24 + 16))((char *)&v34 - v22, v43);
  uint64_t v25 = *(void *)(a13 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1LL, a13);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    sub_186F87910();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v23, a13);
    sub_186F87D60();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v16, 1LL, AssociatedTypeWitness);
    if ((_DWORD)result != 1)
    {
      MEMORY[0x1895F8858](result);
      uint64_t v28 = v35;
      *(&v34 - 10) = v34;
      *(&v34 - 9) = v28;
      uint64_t v29 = v39;
      *(&v34 - 8) = v37;
      *(&v34 - 7) = v29;
      *(&v34 - 6) = v40;
      *(&v34 - 5) = v30;
      uint64_t v31 = v38;
      *(&v34 - 4) = v36;
      *(&v34 - 3) = v31;
      *(&v34 - 2) = v33;
      *(&v34 - 1) = v32;
      swift_getAssociatedConformanceWitness();
      sub_186F879B8();
      return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v16, AssociatedTypeWitness);
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_186F55C90( uint64_t a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v14 = sub_186F52EB0((uint64_t)v14);
    *a3 = v14;
  }

  uint64_t result = sub_186F55D84( (uint64_t)(v14 + 32),  (uint64_t)&v14[*((void *)v14 + 2) + 32],  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a1);
  *a3 = v14;
  return result;
}

uint64_t sub_186F55D58( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return sub_186F55D84(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_186F55D84( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a4)
  {
    __break(1u);
    goto LABEL_11;
  }

  if (!a6)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (!a8)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  if (!a10)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!a12)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if (!result)
  {
LABEL_15:
    __break(1u);
    return result;
  }

  uint64_t result = ccccm_one_shot();
  if ((_DWORD)result)
  {
    int v12 = result;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = v12;
    *(_BYTE *)(v13 + 4) = 0;
    return swift_willThrow();
  }

  return result;
}

void sub_186F55E64(uint64_t a1)
{
  __asm { BR              X12 }

uint64_t sub_186F55ED8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v15 - 112) = v8;
  *(_WORD *)(v15 - 104) = v10;
  *(_BYTE *)(v15 - 102) = BYTE2(v10);
  *(_BYTE *)(v15 - 101) = BYTE3(v10);
  *(_BYTE *)(v15 - 100) = BYTE4(v10);
  *(_BYTE *)(v15 - 99) = BYTE5(v10);
  *(_BYTE *)(v15 - 98) = BYTE6(v10);
  uint64_t result = sub_186F55D84(v15 - 112, v15 - 112 + BYTE6(v10), a3, a4, a5, a6, a7, v9, a8, v11, v12, v14);
  unint64_t v17 = *(unsigned int *)(v15 - 104) | ((unint64_t)*(unsigned __int8 *)(v15 - 100) << 32) | ((unint64_t)*(unsigned __int8 *)(v15 - 99) << 40) | ((unint64_t)*(unsigned __int8 *)(v15 - 98) << 48);
  *uint64_t v13 = *(void *)(v15 - 112);
  v13[1] = v17;
  return result;
}

uint64_t sub_186F560EC( int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result = sub_186F87A00();
  uint64_t v18 = *a1;
  uint64_t v19 = a1[1];
  if ((int)v19 < (int)v18)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t result = sub_186F8797C();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v20 = result;
  uint64_t result = sub_186F879A0();
  uint64_t v21 = v18 - result;
  if (__OFSUB__(v18, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v22 = v19 - v18;
  uint64_t v23 = sub_186F87994();
  if (v23 >= v22) {
    uint64_t v24 = v22;
  }
  else {
    uint64_t v24 = v23;
  }
  return sub_186F55D84(v20 + v21, v20 + v21 + v24, a2, v25, v26, a5, a6, a7, a8, a9, a10, a11);
}

void sub_186F561E4()
{
}

void sub_186F56240()
{
}

uint64_t sub_186F5629C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_186F559C4(a1, a2, v3[4], v3[5], v3[6], v3[7], v3[8], v3[9], a3, v3[10], v3[11], v3[12], v3[2]);
}

uint64_t sub_186F562DC(uint64_t a1, uint64_t a2)
{
  return sub_186F55C90( a1,  a2,  *(char ***)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(void *)(v2 + 48),  *(void *)(v2 + 56),  *(void *)(v2 + 64),  *(void *)(v2 + 72),  *(void *)(v2 + 80),  *(void *)(v2 + 88));
}

uint64_t sub_186F56314@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_186F5527C(a1, a2, v3[7], v3[8], v3[9], v3[10], v3[11], a3, v3[12], v3[2], v3[3], v3[4]);
}

void sub_186F56354()
{
}

uint64_t sub_186F563B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_186F554DC(a1, a2, v3[6], v3[7], v3[8], v3[9], v3[10], v3[11], a3, v3[12], v3[13], v3[14], v3[2], v3[3]);
}

void sub_186F563FC()
{
}

uint64_t static AES.KeyWrap.wrap(_:using:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v4 = *a1;
  uint64_t v5 = v2;
  return sub_186F54390((uint64_t)&v5, &v4);
}

uint64_t static AES.KeyWrap.unwrap<A>(_:using:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v6 = *a2;
  return sub_186F53990((uint64_t)&v6, a1, a3, a4, a5);
}

ValueMetadata *type metadata accessor for AES.KeyWrap()
{
  return &type metadata for AES.KeyWrap;
}

void SecureEnclave.P256.KeyAgreement.PrivateKey.init(from:)(__SecKey *a1@<X0>, void *a2@<X8>)
{
}

unint64_t sub_186F564C8()
{
  unint64_t result = qword_18C6B1428;
  if (!qword_18C6B1428)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F8A980, &type metadata for SecKeySEPInteropErrors);
    atomic_store(result, (unint64_t *)&qword_18C6B1428);
  }

  return result;
}

unint64_t sub_186F5650C()
{
  unint64_t result = qword_18C6B1430;
  if (!qword_18C6B1430)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_18C6B1430);
  }

  return result;
}

unint64_t sub_186F56548()
{
  unint64_t result = qword_18C6B1438;
  if (!qword_18C6B1438)
  {
    unint64_t v1 = sub_186F5650C();
    unint64_t result = MEMORY[0x18959EFD8](MEMORY[0x18961BB08], v1);
    atomic_store(result, (unint64_t *)&qword_18C6B1438);
  }

  return result;
}

void SecureEnclave.P256.Signing.PrivateKey.init(from:)(__SecKey *a1@<X0>, void *a2@<X8>)
{
}

void SecureEnclave.P384.KeyAgreement.PrivateKey.init(from:)(__SecKey *a1@<X0>, void *a2@<X8>)
{
}

void SecureEnclave.P384.Signing.PrivateKey.init(from:)(__SecKey *a1@<X0>, void *a2@<X8>)
{
}

void SecureEnclave.Curve25519.KeyAgreement.PrivateKey.init(from:)(__SecKey *a1@<X0>, void *a2@<X8>)
{
}

void SecureEnclave.Curve25519.Signing.PrivateKey.init(from:)(__SecKey *a1@<X0>, void *a2@<X8>)
{
}

void sub_186F5661C( __SecKey *a1@<X0>, uint64_t (*a2)(uint64_t *, uint64_t, unint64_t, void, void)@<X1>, void *a3@<X8>)
{
  CFDictionaryRef v7 = SecKeyCopyAttributes(a1);
  if (!v7)
  {
    sub_186F564C8();
    swift_allocError();
    *uint64_t v13 = 0;
    swift_willThrow();
LABEL_14:

    return;
  }

  CFDictionaryRef v8 = v7;
  sub_186F5650C();
  sub_186F56548();
  uint64_t v9 = sub_186F87B20();
  uint64_t v10 = sub_186F87BB0();
  uint64_t v11 = (void *)v10;
  if ((v9 & 0xC000000000000001LL) != 0)
  {
    uint64_t v12 = sub_186F87F34();

    swift_bridgeObjectRelease();
    if (v12)
    {
      uint64_t v29 = a3;
      goto LABEL_9;
    }

unint64_t sub_186F568A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_186F88018();
  return sub_186F56A7C(a1, a2, v4);
}

unint64_t sub_186F56908(uint64_t a1)
{
  uint64_t v2 = sub_186F87EBC();
  return sub_186F56B5C(a1, v2);
}

unint64_t sub_186F56938(uint64_t a1)
{
  uint64_t v2 = sub_186F87DB4();
  return sub_186F56C90(a1, v2);
}

uint64_t storeEnumTagSinglePayload for SecKeySEPInteropErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_186F569B4 + 4 * byte_186F8A8F5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_186F569E8 + 4 * asc_186F8A8F0[v4]))();
}

uint64_t sub_186F569E8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F569F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x186F569F8LL);
  }
  return result;
}

uint64_t sub_186F56A04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x186F56A0CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_186F56A10(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F56A18(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecKeySEPInteropErrors()
{
  return &type metadata for SecKeySEPInteropErrors;
}

unint64_t sub_186F56A38()
{
  unint64_t result = qword_18C6B1440;
  if (!qword_18C6B1440)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F8A958, &type metadata for SecKeySEPInteropErrors);
    atomic_store(result, (unint64_t *)&qword_18C6B1440);
  }

  return result;
}

unint64_t sub_186F56A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_186F87F70() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (sub_186F87F70() & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_186F56B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_186F56C20(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x18959E6D8](v9, a1);
      sub_186F56C5C((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

uint64_t sub_186F56C20(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_186F56C5C(uint64_t a1)
{
  return a1;
}

unint64_t sub_186F56C90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_186F5650C();
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = sub_186F87DC0();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = sub_186F87DC0();

        if ((v10 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

uint64_t Curve448.KeyAgreement.PublicKey.init<A>(rawRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = sub_186F5D1C8();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  if (!v3) {
    *a3 = v7;
  }
  return result;
}

uint64_t Curve448.KeyAgreement.PublicKey.rawRepresentation.getter()
{
  uint64_t v0 = sub_186F87CDC();
  uint64_t v1 = sub_186F3A07C(v0);
  swift_bridgeObjectRelease();
  return v1;
}

unint64_t Curve448.KeyAgreement.PrivateKey.init()@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_186F42254(0x38uLL);
  *a1 = result;
  return result;
}

size_t Curve448.KeyAgreement.PrivateKey.publicKey.getter@<X0>(size_t *a1@<X8>)
{
  size_t result = sub_186F5CEBC();
  *a1 = result;
  return result;
}

uint64_t Curve448.KeyAgreement.PrivateKey.init<A>(rawRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = sub_186F5D23C();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  if (!v3) {
    *a3 = v7;
  }
  return result;
}

uint64_t Curve448.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)@<X0>( uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  swift_retain();
  sub_186F87CDC();
  unint64_t v6 = sub_186F42134(0x38uLL, v5, v4);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v6;
  return result;
}

uint64_t Curve448.KeyAgreement.PrivateKey.rawRepresentation.getter()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = sub_186F41BA4(v0);
  swift_release();
  return v1;
}

size_t sub_186F56FC0@<X0>(size_t *a1@<X8>)
{
  size_t result = sub_186F5CEBC();
  *a1 = result;
  return result;
}

uint64_t sub_186F56FE8@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  swift_retain();
  sub_186F87CDC();
  unint64_t v6 = sub_186F42134(0x38uLL, v5, v4);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v6;
  return result;
}

ValueMetadata *type metadata accessor for Curve448.KeyAgreement()
{
  return &type metadata for Curve448.KeyAgreement;
}

ValueMetadata *type metadata accessor for Curve448.KeyAgreement.PublicKey()
{
  return &type metadata for Curve448.KeyAgreement.PublicKey;
}

ValueMetadata *type metadata accessor for Curve448.KeyAgreement.PrivateKey()
{
  return &type metadata for Curve448.KeyAgreement.PrivateKey;
}

void sub_186F5708C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_186F570C8()
{
  if (BYTE6(v0) == 12LL)
  {
    sub_186F394BC(v1, v0);
    *uint64_t v2 = v3;
    v2[1] = v4;
  }

  else
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v5 = 1;
    *(_BYTE *)(v5 + 4) = 1;
    swift_willThrow();
    sub_186F33C98(v1, v0);
  }

uint64_t static ChaChaPoly.seal<A, B>(_:using:nonce:authenticating:)( uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = a8;
  uint64_t v22 = a7;
  uint64_t v14 = sub_186F87DCC();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  unint64_t v17 = (char *)&v21 - v16;
  uint64_t v25 = *a2;
  __int128 v24 = *a3;
  uint64_t v18 = *(void *)(a6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v21 - v16, a4, a6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v17, 0LL, 1LL, a6);
  uint64_t v19 = sub_186F58810(&v25, a1, (uint64_t *)&v24, (uint64_t)v17, a5, a6, v22, v23);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  return v19;
}

uint64_t ChaChaPoly.SealedBox.init<A, B>(nonce:ciphertext:tag:)( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_186F584E4(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8LL))(a3, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8LL))(a2, a4);
  return v9;
}

uint64_t static ChaChaPoly.open<A>(_:using:authenticating:)( uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_186F87DCC();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v18 - v12;
  uint64_t v19 = *a3;
  uint64_t v14 = *(void *)(a5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v18 - v12, a4, a5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v13, 0LL, 1LL, a5);
  sub_186F58B34((uint64_t)&v19, a1, a2);
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v16;
}

uint64_t static ChaChaPoly.seal<A>(_:using:nonce:)( uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *a2;
  __int128 v8 = *a3;
  __int128 v11 = xmmword_186F89E20;
  *(_OWORD *)uint64_t v12 = v8;
  unint64_t v9 = sub_186F44100();
  return sub_186F58810(&v13, a1, v12, (uint64_t)&v11, a4, MEMORY[0x189606D70], a5, v9);
}

void sub_186F574B4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_186F5753C(uint64_t a1, unint64_t a2)
{
  if (BYTE6(a2) != 12LL)
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v20 = 1;
    *(_BYTE *)(v20 + 4) = 1;
    swift_willThrow();
    sub_186F33C98(v8, a2);
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x186F57A1CLL);
  }

  sub_186F394BC(v8, a2);
  uint64_t v23 = v3;
  *(void *)&v25[0] = v9;
  *((void *)&v25[0] + 1) = v10;
  type metadata accessor for CoreCryptoChaChaPolyImpl.Context();
  swift_allocObject();
  uint64_t result = sub_186F5932C(&v23, (uint64_t *)v25);
  if (!v2)
  {
    uint64_t v12 = result;
    if (v6 >> 60 != 15)
    {
      sub_186F33D20(v7, v6);
      if (!swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v13 = swift_allocObject();
        swift_retain();
        uint64_t v14 = (void *)swift_slowAlloc();
        *(void *)(v13 + 16) = v14;
        memmove(v14, *(const void **)(v12 + 16), 0x100uLL);
        swift_release_n();
        uint64_t v12 = v13;
      }

      sub_186F57CFC(v7, v6);
      sub_186F33EA0(v7, v6);
    }

    v25[0] = xmmword_186F88B50;
    sub_186F33D20(v5, v4);
    sub_186F5E5B8(12LL, v5, v4);
    sub_186F5EC20(16LL, v21, v22);
    uint64_t v15 = v23;
    unint64_t v16 = v24;
    if (!swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v17 = swift_allocObject();
      swift_retain();
      uint64_t v18 = (void *)swift_slowAlloc();
      *(void *)(v17 + 16) = v18;
      memmove(v18, *(const void **)(v12 + 16), 0x100uLL);
      swift_release_n();
    }

    sub_186F57FC0(v15, v16, (uint64_t)v25);
    sub_186F33C98(v15, v16);
    sub_186F33D20(v5, v4);
    swift_retain();
    sub_186F5EAA0(16LL, v5, v4);
    __asm { BR              X10 }
  }

  return result;
}

void static ChaChaPoly.open(_:using:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
}

uint64_t ChaChaPoly.SealedBox.combined.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t ChaChaPoly.SealedBox.tag.getter(uint64_t a1, unint64_t a2)
{
  return v5;
}

uint64_t ChaChaPoly.SealedBox.ciphertext.getter(uint64_t a1, unint64_t a2)
{
  return v7;
}

void ChaChaPoly.SealedBox.nonce.getter(uint64_t a1, unint64_t a2)
{
}

char *ChaChaPoly.SealedBox.init<A>(combined:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (sub_186F87D3C() >= 28)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
    uint64_t v6 = (char *)sub_186F87AE4();
  }

  else
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v7 = 1;
    *(_BYTE *)(v7 + 4) = 1;
    swift_willThrow();
  }

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
  return v6;
}

void sub_186F57CFC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_186F57D54()
{
  uint64_t v2 = qword_18C6B06A0;
  swift_retain_n();
  if (v2 != -1) {
    swift_once();
  }
  int v3 = ccchacha20poly1305_aad();
  if (v3)
  {
    int v4 = v3;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v5 = v4;
    *(_BYTE *)(v5 + 4) = 0;
    swift_willThrow();
  }

  sub_186F33C98(v1, v0);
  return swift_release_n();
}

void sub_186F57FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X12 }

uint64_t sub_186F58010(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_186F58048 + dword_186F5810C[a2 >> 62]))();
}

void sub_186F58058()
{
  uint64_t v0 = sub_186F5D744();
  MEMORY[0x1895F8858](v0);
  sub_186F5A524();
}

uint64_t sub_186F5811C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_186F33C98(a4, a5);
}

void sub_186F581C8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_186F58228()
{
  uint64_t v6 = v3;
  __int16 v7 = v4;
  char v8 = BYTE2(v4);
  char v9 = BYTE3(v4);
  char v10 = BYTE4(v4);
  char v11 = BYTE5(v4);
  return sub_186F59D64((uint64_t)&v6, (uint64_t)&v6 + BYTE6(v4), v2, v1, v0);
}

uint64_t sub_186F58434(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_186F8797C();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = sub_186F879A0();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v5 += a1 - result;
  }

  if (!__OFSUB__(a2, a1))
  {
    sub_186F87994();
    sub_186F59914(v5);
    return swift_release();
  }

  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_186F584E4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v1 = a1[1];
  if (sub_186F87D3C() == 16)
  {
    sub_186F39764(v2, v1);
    uint64_t v4 = v3;
    unint64_t v6 = v5;
    uint64_t v11 = v3;
    sub_186F587CC();
    sub_186F87D84();
    sub_186F33C98(v4, v6);
    sub_186F87D84();
    sub_186F33C98(v9, v10);
    return v11;
  }

  else
  {
    sub_186F33C98(v2, v1);
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = 1;
    *(_BYTE *)(v8 + 4) = 1;
    return swift_willThrow();
  }

unint64_t sub_186F5864C()
{
  unint64_t result = qword_18C6B1468;
  if (!qword_18C6B1468)
  {
    unint64_t result = MEMORY[0x18959EFD8]( &protocol conformance descriptor for ChaChaPoly.Nonce,  &type metadata for ChaChaPoly.Nonce);
    atomic_store(result, (unint64_t *)&qword_18C6B1468);
  }

  return result;
}

unint64_t sub_186F58694()
{
  unint64_t result = qword_18C6B1470;
  if (!qword_18C6B1470)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F8AA60, &type metadata for ChaChaPoly.SealedBox);
    atomic_store(result, (unint64_t *)&qword_18C6B1470);
  }

  return result;
}

ValueMetadata *type metadata accessor for ChaChaPoly()
{
  return &type metadata for ChaChaPoly;
}

ValueMetadata *type metadata accessor for ChaChaPoly.SealedBox()
{
  return &type metadata for ChaChaPoly.SealedBox;
}

uint64_t sub_186F586F8(uint64_t a1)
{
  uint64_t v2 = sub_186F8797C();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t result = sub_186F879A0();
    if (__OFSUB__(a1, result)) {
      goto LABEL_10;
    }
    uint64_t v5 = v3 + a1 - result;
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  uint64_t result = sub_186F87994();
  if (qword_18C6B06A0 == -1)
  {
    if (v5) {
      return ccchacha20poly1305_verify() == 0;
    }
  }

  else
  {
    uint64_t result = swift_once();
    if (v5) {
      return ccchacha20poly1305_verify() == 0;
    }
  }

  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_186F587AC(uint64_t a1, uint64_t a2)
{
  return sub_186F5811C(a1, a2, *(void *)(v2 + 16), **(void **)(v2 + 24), *(void *)(*(void *)(v2 + 24) + 8LL));
}

unint64_t sub_186F587CC()
{
  unint64_t result = qword_18C6B14F0;
  if (!qword_18C6B14F0)
  {
    unint64_t result = MEMORY[0x18959EFD8](MEMORY[0x189606DB0], MEMORY[0x189606D70]);
    atomic_store(result, (unint64_t *)&qword_18C6B14F0);
  }

  return result;
}

uint64_t sub_186F58810( uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v28 = a8;
  uint64_t v29 = a2;
  uint64_t v30 = a5;
  uint64_t v31 = a7;
  uint64_t v33 = a4;
  uint64_t v39 = *MEMORY[0x1895F89C0];
  uint64_t v34 = sub_186F87DCC();
  uint64_t v32 = *(void *)(v34 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v34);
  uint64_t v14 = (char *)&v27 - v13;
  uint64_t v35 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](v12);
  id v27 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *a1;
  uint64_t v17 = *a3;
  uint64_t v19 = *a3;
  unint64_t v20 = a3[1];
  unint64_t v18 = v20;
  if (v20 >> 60 == 15)
  {
    *(void *)((char *)&v38 + 6) = 0LL;
    *(void *)&__int128 v38 = 0LL;
    BYTE14(v38) = 12;
    LODWORD(v37) = 0;
    uint64_t result = ccrng();
    if (!result)
    {
      __break(1u);
      return result;
    }

    if ((_DWORD)v37) {
      __break(1u);
    }
    ccrng_generate_bridge();
    uint64_t v19 = v38;
    unint64_t v20 = DWORD2(v38) | ((unint64_t)BYTE12(v38) << 32) | ((unint64_t)BYTE13(v38) << 40) | ((unint64_t)BYTE14(v38) << 48);
  }

  uint64_t v36 = v16;
  *(void *)&__int128 v38 = v19;
  *((void *)&v38 + 1) = v20;
  type metadata accessor for CoreCryptoChaChaPolyImpl.Context();
  swift_allocObject();
  sub_186F34034(v17, v18);
  swift_retain();
  sub_186F33D20(v19, v20);
  uint64_t v22 = sub_186F5932C(&v36, (uint64_t *)&v38);
  if (v8) {
    return sub_186F33C98(v19, v20);
  }
  uint64_t v37 = v22;
  uint64_t v23 = v32;
  uint64_t v24 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v14, v33, v34);
  uint64_t v25 = v35;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v14, 1LL, a6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v24);
  }

  else
  {
    uint64_t v26 = (uint64_t)v27;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v27, v14, a6);
    sub_186F591AC(v26, a6, v28);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, a6);
  }

  *(void *)&__int128 v38 = v19;
  *((void *)&v38 + 1) = v20;
  sub_186F33D20(v19, v20);
  sub_186F59264(v29, (uint64_t)&v38);
  swift_retain();
  sub_186F59E78();
  swift_release();
  sub_186F33C98(v19, v20);
  swift_release();
  return v38;
}

void sub_186F58B34(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = sub_186F87DCC();
  uint64_t v6 = MEMORY[0x1895F8858](v5);
  MEMORY[0x1895F8858](v6);
  swift_retain();
  sub_186F33D20(a2, a3);
  sub_186F5D2B4(12LL, a2, a3);
  __asm { BR              X10 }

uint64_t sub_186F58C30()
{
  if (BYTE6(v2) != 12LL)
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v21 = 1;
    *(_BYTE *)(v21 + 4) = 1;
    swift_willThrow();
    sub_186F33C98(v5, v2);
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x186F59134LL);
  }

  sub_186F394BC(v5, v2);
  *(void *)(v9 - 128) = v1;
  *(void *)(v9 - 112) = v10;
  *(void *)(v9 - 104) = v11;
  type metadata accessor for CoreCryptoChaChaPolyImpl.Context();
  swift_allocObject();
  uint64_t v12 = *(void *)(v9 - 160);
  uint64_t result = sub_186F5932C((uint64_t *)(v9 - 128), (uint64_t *)(v9 - 112));
  if (!v12)
  {
    *(void *)(v9 - 152) = result;
    (*(void (**)(uint64_t, void, uint64_t))(v0 + 16))(v8, *(void *)(v9 - 168), v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v8, 1LL, v4) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v8, v6);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v7, v8, v4);
      sub_186F591AC(v7, v4, *(void *)(v9 - 192));
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v4);
    }

    *(_OWORD *)(v9 - 112) = xmmword_186F88B50;
    uint64_t v15 = *(void *)(v9 - 184);
    unint64_t v14 = *(void *)(v9 - 176);
    sub_186F33D20(v15, v14);
    sub_186F5E5B8(12LL, v15, v14);
    sub_186F5EC20(16LL, *(void *)(v9 - 144), *(void *)(v9 - 136));
    uint64_t v16 = *(void *)(v9 - 128);
    unint64_t v17 = *(void *)(v9 - 120);
    uint64_t v18 = *(void *)(v9 - 152);
    if (!swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v19 = swift_allocObject();
      swift_retain();
      unint64_t v20 = (void *)swift_slowAlloc();
      *(void *)(v19 + 16) = v20;
      memmove(v20, *(const void **)(v18 + 16), 0x100uLL);
      swift_release();
      *(void *)(v9 - 152) = v19;
      swift_release();
    }

    sub_186F57FC0(v16, v17, v9 - 112);
    sub_186F33C98(v16, v17);
    sub_186F33D20(v15, v14);
    swift_retain();
    sub_186F5EAA0(16LL, v15, v14);
    __asm { BR              X10 }
  }

  return result;
}

uint64_t sub_186F59190()
{
  uint64_t result = ccchacha20poly1305_info();
  qword_18C6B5FA8 = result;
  return result;
}

uint64_t sub_186F591AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v7 = *v3;
    type metadata accessor for CoreCryptoChaChaPolyImpl.Context();
    uint64_t v8 = swift_allocObject();
    swift_retain();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(void *)(v8 + 16) = v9;
    memmove(v9, *(const void **)(v7 + 16), 0x100uLL);
    swift_release();
    *uint64_t v3 = v8;
    swift_release();
  }

  return sub_186F5970C(a1, a2, a3);
}

void sub_186F59264(uint64_t a1, uint64_t a2)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *v2;
    type metadata accessor for CoreCryptoChaChaPolyImpl.Context();
    uint64_t v6 = swift_allocObject();
    swift_retain();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(void *)(v6 + 16) = v7;
    memmove(v7, *(const void **)(v5 + 16), 0x100uLL);
    swift_release();
    *unint64_t v2 = v6;
    swift_release();
  }

  sub_186F599EC(a1, a2);
}

uint64_t sub_186F5932C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  swift_beginAccess();
  unint64_t v6 = *(void *)(v3 + 16);
  if (v6 >> 60)
  {
    __break(1u);
LABEL_10:
    swift_once();
    goto LABEL_4;
  }

  if (v6 != 32)
  {
    swift_release();
    sub_186F33C98(v4, v5);
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v11 = 0;
    *(_BYTE *)(v11 + 4) = 1;
    swift_willThrow();
    type metadata accessor for CoreCryptoChaChaPolyImpl.Context();
    swift_deallocPartialClassInstance();
    return v2;
  }

  uint64_t v7 = (_OWORD *)swift_slowAlloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = 0u;
  v7[1] = 0u;
  void v7[2] = 0u;
  v7[3] = 0u;
  void v7[4] = 0u;
  v7[5] = 0u;
  v7[6] = 0u;
  v7[7] = 0u;
  v7[8] = 0u;
  v7[9] = 0u;
  v7[10] = 0u;
  v7[11] = 0u;
  v7[12] = 0u;
  v7[13] = 0u;
  v7[14] = 0u;
  *(_OWORD *)((char *)v7 + 233) = 0u;
  if (qword_18C6B06A0 != -1) {
    goto LABEL_10;
  }
LABEL_4:
  int v8 = ccchacha20poly1305_init();
  if (!v8)
  {
    swift_release();
    __asm { BR              X10 }
  }

  int v9 = v8;
  sub_186F35D6C();
  swift_allocError();
  *(_DWORD *)uint64_t v10 = v9;
  *(_BYTE *)(v10 + 4) = 0;
  swift_willThrow();
  sub_186F33C98(v4, v5);
  swift_release();
  swift_release();
  return v2;
}

uint64_t sub_186F5970C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  int v9 = &v11[-v8];
  sub_186F87910();
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = v3;
  swift_getAssociatedConformanceWitness();
  sub_186F87CA0();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

uint64_t sub_186F59820()
{
  return sub_186F879B8();
}

uint64_t sub_186F59914(uint64_t result)
{
  uint64_t v1 = result;
  if (qword_18C6B06A0 == -1)
  {
    if (result) {
      goto LABEL_3;
    }
LABEL_7:
    __break(1u);
    return result;
  }

  uint64_t result = swift_once();
  if (!v1) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t result = ccchacha20poly1305_aad();
  if ((_DWORD)result)
  {
    int v2 = result;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v3 = v2;
    *(_BYTE *)(v3 + 4) = 0;
    return swift_willThrow();
  }

  return result;
}

void sub_186F599C8(uint64_t a1, uint64_t a2)
{
}

void sub_186F599EC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }

void sub_186F59A48()
{
  if (sub_186F87D3C() < 0)
  {
    __break(1u);
    JUMPOUT(0x186F59AF4LL);
  }

  uint64_t v0 = sub_186F5D744();
  MEMORY[0x1895F8858](v0);
  sub_186F5A524();
}

uint64_t sub_186F59B0C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v23 - v15;
  uint64_t v17 = sub_186F5E748(a3, a1, a2);
  uint64_t v19 = v18 + v17;
  uint64_t v21 = v18 + v20;
  if (!v18)
  {
    uint64_t v21 = 0LL;
    uint64_t v19 = 0LL;
  }

  v30[0] = v19;
  v30[1] = v21;
  sub_186F87910();
  uint64_t v25 = a7;
  uint64_t v26 = a8;
  id v27 = v30;
  uint64_t v28 = v23;
  uint64_t v29 = v24;
  swift_getAssociatedConformanceWitness();
  sub_186F87CA0();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
}

uint64_t sub_186F59C6C()
{
  return sub_186F879B8();
}

uint64_t sub_186F59D64( uint64_t result, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, void, uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v8 = result;
  uint64_t v9 = a2 - result;
  if (result) {
    uint64_t v10 = a2 - result;
  }
  else {
    uint64_t v10 = 0LL;
  }
  uint64_t v11 = *a3;
  if (*a3) {
    uint64_t v11 = a3[1] - v11;
  }
  if (v11 < v10)
  {
    __break(1u);
  }

  else if (qword_18C6B06A0 == -1)
  {
    if (result) {
      goto LABEL_9;
    }
LABEL_16:
    __break(1u);
    return result;
  }

  uint64_t result = swift_once();
  if (!v8) {
    goto LABEL_16;
  }
LABEL_9:
  int v12 = a4(qword_18C6B5FA8, *(void *)(a5 + 16), v9, v8, *a3);
  if (v12)
  {
    int v13 = v12;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v14 = v13;
    *(_BYTE *)(v14 + 4) = 0;
    return swift_willThrow();
  }

  else
  {
    uint64_t result = sub_186F5E748(v9, *a3, a3[1]);
    uint64_t v16 = v15 + result;
    uint64_t v18 = v15 + v17;
    if (!v15)
    {
      uint64_t v18 = 0LL;
      uint64_t v16 = 0LL;
    }

    *a3 = v16;
    a3[1] = v18;
  }

  return result;
}

uint64_t sub_186F59E78()
{
  v5[5] = *MEMORY[0x1895F89C0];
  v4[0] = 0LL;
  v4[1] = 0LL;
  if (qword_18C6B06A0 != -1) {
    swift_once();
  }
  int v0 = ccchacha20poly1305_finalize();
  if (v0)
  {
    int v1 = v0;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v2 = v1;
    *(_BYTE *)(v2 + 4) = 0;
    return swift_willThrow();
  }

  else
  {
    v5[3] = MEMORY[0x1896181D0];
    void v5[4] = MEMORY[0x1896071B0];
    v5[0] = v4;
    v5[1] = v5;
    __swift_project_boxed_opaque_existential_1(v5, MEMORY[0x1896181D0]);
    sub_186F87A54();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }

uint64_t sub_186F59F94()
{
  int v1 = *(void **)(v0 + 16);
  memset_s(v1, 0x100uLL, 0, 0x100uLL);
  MEMORY[0x18959F068](v1, -1LL, -1LL);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CoreCryptoChaChaPolyImpl.Context()
{
  return objc_opt_self();
}

void sub_186F5A000()
{
  __asm { BR              X11 }

void *sub_186F5A060@<X0>(uint64_t a1@<X8>)
{
  void *(*v3)(void **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  void *result;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  uint64_t v10 = BYTE4(a1);
  uint64_t v11 = BYTE5(a1);
  int v12 = BYTE6(a1);
  uint64_t result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2) {
    uint64_t result = v7;
  }
  unint64_t v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *int v1 = v8;
  v1[1] = v6;
  return result;
}

void sub_186F5A2F0()
{
  __asm { BR              X12 }

uint64_t sub_186F5A350@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = v1;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  unsigned __int8 v8 = BYTE4(a1);
  unsigned __int8 v9 = BYTE5(a1);
  unsigned __int8 v10 = BYTE6(a1);
  uint64_t result = v2(&v6, (char *)&v6 + BYTE6(a1));
  unint64_t v5 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  *uint64_t v3 = v6;
  v3[1] = v5;
  return result;
}

void sub_186F5A524()
{
  __asm { BR              X12 }

uint64_t sub_186F5A584@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = v1;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  unsigned __int8 v8 = BYTE4(a1);
  unsigned __int8 v9 = BYTE5(a1);
  unsigned __int8 v10 = BYTE6(a1);
  uint64_t result = v2(&v6, (char *)&v6 + BYTE6(a1));
  unint64_t v5 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  *uint64_t v3 = v6;
  v3[1] = v5;
  return result;
}

void sub_186F5A758()
{
  __asm { BR              X11 }

void *sub_186F5A7B8@<X0>(uint64_t a1@<X8>)
{
  void *(*v3)(void **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  void *result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  void *v12;
  unsigned int v7 = v4;
  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  unsigned __int8 v9 = BYTE4(a1);
  unsigned __int8 v10 = BYTE5(a1);
  uint64_t v11 = BYTE6(a1);
  uint64_t result = v3(&v12, &v7, (char *)&v7 + BYTE6(a1));
  if (!v2) {
    uint64_t result = v12;
  }
  uint64_t v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  *uint64_t v1 = v7;
  v1[1] = v6;
  return result;
}

uint64_t sub_186F5AA50(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t result = sub_186F87A00();
  uint64_t v4 = *v1;
  uint64_t v5 = v1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t result = sub_186F8797C();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v6 = result;
  uint64_t result = sub_186F879A0();
  uint64_t v7 = v4 - result;
  if (__OFSUB__(v4, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v8 = v5 - v4;
  uint64_t v9 = sub_186F87994();
  if (v9 >= v8) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v9;
  }
  return a1(v6 + v7, v6 + v7 + v10);
}

char *sub_186F5AAF8(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)sub_186F8797C();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)sub_186F879A0();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }

  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v12 = sub_186F87994();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

char *sub_186F5ABA4(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)sub_186F8797C();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)sub_186F879A0();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }

  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v12 = sub_186F87994();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t sub_186F5AC54(uint64_t a1, uint64_t a2)
{
  return sub_186F59B0C(a1, a2, v2[4], v2[5], v2[6], v2[7], v2[2], v2[3]);
}

uint64_t sub_186F5AC74()
{
  return sub_186F59C6C();
}

uint64_t sub_186F5AC94(uint64_t a1, uint64_t a2)
{
  return sub_186F59D64( a1,  a2,  *(uint64_t **)(v2 + 16),  *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t))(v2 + 24),  *(void *)(v2 + 32));
}

uint64_t sub_186F5ACB0()
{
  return sub_186F59820();
}

uint64_t sub_186F5ACCC(uint64_t a1)
{
  return sub_186F59914(a1);
}

uint64_t sub_186F5ACE4(uint64_t a1)
{
  uint64_t v2 = sub_186F8797C();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t result = sub_186F879A0();
    if (__OFSUB__(a1, result)) {
      goto LABEL_10;
    }
    uint64_t v5 = v3 + a1 - result;
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  uint64_t result = sub_186F87994();
  if (qword_18C6B06A0 == -1)
  {
    if (v5) {
      return ccchacha20poly1305_setnonce();
    }
  }

  else
  {
    uint64_t result = swift_once();
    if (v5) {
      return ccchacha20poly1305_setnonce();
    }
  }

  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for CoreCryptoChaChaPolyImpl()
{
  return &type metadata for CoreCryptoChaChaPolyImpl;
}

void sub_186F5ADA0(uint64_t a1, uint64_t a2)
{
  if (a1 < 0 || (uint64_t v3 = a2 - 1, a2 < 1))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  if (a1 <= 1) {
    uint64_t v4 = 1LL;
  }
  else {
    uint64_t v4 = a1;
  }
  BOOL v5 = __OFADD__(v4, 1LL);
  uint64_t v6 = v4 + 1;
  if (v5) {
    goto LABEL_27;
  }
  double v7 = ceil(log2((double)v6) * 0.125);
  if ((~*(void *)&v7 & 0x7FF0000000000000LL) == 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  if (v7 <= -9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (v7 >= 9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  uint64_t v8 = (uint64_t)v7;
  if ((uint64_t)v7 > a2)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  v14[0] = sub_186F39FE0(a2);
  v14[1] = v9;
  sub_186F791FC((uint64_t)v14);
  if (__OFSUB__(a2, v8))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  if (a2 - v8 < a2)
  {
    uint64_t v10 = -v8;
    while (1)
    {
      uint64_t v11 = a2 + v10;
      if (__OFSUB__(v3, a2 + v10)) {
        break;
      }
      BOOL v13 = __CFADD__(v10++, 1LL);
      sub_186F87A6C();
      if (v13) {
        return;
      }
      if (__OFADD__(v11, 1LL))
      {
        __break(1u);
        return;
      }
    }

    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

LABEL_33:
  __break(1u);
}

      a1 = sub_186F3CEBC(0LL, *((void *)a1 + 2) + 1LL, 1, a1);
      goto LABEL_13;
    }

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      a1 = sub_186F3CEBC(0LL, *((void *)a1 + 2) + 1LL, 1, a1);
    }
    uint64_t v20 = *((void *)a1 + 2);
    uint64_t v30 = *((void *)a1 + 3);
    if (v20 >= v30 >> 1) {
      a1 = sub_186F3CEBC((char *)(v30 > 1), v20 + 1, 1, a1);
    }
    *((void *)a1 + 2) = v20 + 1;
    uint64_t v31 = &a1[48 * v20];
    v31[32] = v10;
    *((void *)v31 + 5) = a2;
    *((_OWORD *)v31 + 3) = 0u;
    *((_OWORD *)v31 + 4) = 0u;
    *a3 = a1;
    if (!v14)
    {
      swift_unknownObjectRelease();
      return;
    }

    while (1)
    {
      sub_186F66D0C(v37, a2 + 1, a3);
      if (__OFSUB__(v39 >> 1, v38)) {
        break;
      }
    }

    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  sub_186F36690();
  swift_allocError();
  *uint64_t v29 = 5;
  swift_unknownObjectRetain();
  swift_willThrow();
LABEL_21:
  swift_unknownObjectRelease();
}

ValueMetadata *type metadata accessor for AES()
{
  return &type metadata for AES;
}

uint64_t SymmetricKey.init<A>(data:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_186F41B44();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  *a3 = v6;
  return result;
}

uint64_t SymmetricKey.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return sub_186F403F0(a1, a2, *v2);
}

uint64_t sub_186F5AFAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186F5AFC4(a1, a2, a3) & 1;
}

uint64_t sub_186F5AFC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = a2 - a1;
  if (a1) {
    uint64_t v7 = a2 - a1;
  }
  else {
    uint64_t v7 = 0LL;
  }
  if (v7 != *(void *)(a3 + 16)) {
    return 0LL;
  }
  if (a1) {
    return cc_cmp_safe() == 0;
  }
  __break(1u);
  return result;
}

void sub_186F5B050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

BOOL sub_186F5B0B0()
{
  if (v0) {
    uint64_t v3 = v1 - v0;
  }
  else {
    uint64_t v3 = 0LL;
  }
  if (v3 != BYTE6(v2)) {
    return 0LL;
  }
  if (!v0)
  {
    __break(1u);
    JUMPOUT(0x186F5B314LL);
  }

  return cc_cmp_safe() == 0;
}

void sub_186F5B33C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

BOOL sub_186F5B39C()
{
  uint64_t v6 = v2;
  __int16 v7 = v3;
  char v8 = BYTE2(v3);
  char v9 = BYTE3(v3);
  char v10 = BYTE4(v3);
  char v11 = BYTE5(v3);
  sub_186F54618((uint64_t)&v6, (uint64_t)&v6 + BYTE6(v3), v0, v1, &v5);
  return v5;
}

uint64_t SymmetricKey.bitCount.getter()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_beginAccess();
  unint64_t v3 = *(void *)(v1 + 16);
  if (!(v3 >> 60)) {
    return 8 * v3;
  }
  __break(1u);
  return result;
}

uint64_t SymmetricKeySize.bitCount.getter()
{
  return *(void *)v0;
}

void static SymmetricKeySize.bits128.getter(void *a1@<X8>)
{
  *a1 = 128LL;
}

CryptoKit::SymmetricKeySize __swiftcall SymmetricKeySize.init(bitCount:)(CryptoKit::SymmetricKeySize bitCount)
{
  if (bitCount.bitCount < 1 || (bitCount.bitCount & 7) != 0) {
    __break(1u);
  }
  else {
    v1->bitCount = bitCount.bitCount;
  }
  return bitCount;
}

void static SymmetricKeySize.bits192.getter(void *a1@<X8>)
{
  *a1 = 192LL;
}

void static SymmetricKeySize.bits256.getter(void *a1@<X8>)
{
  *a1 = 256LL;
}

uint64_t SymmetricKey.init(size:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if ((unint64_t)(*a1 + 7) > 0xE)
  {
    if (v3 < 0) {
      uint64_t v3 = *a1 + 7;
    }
    uint64_t result = sub_186F42888(v3 >> 3);
  }

  else
  {
    if (qword_18C4B5020 != -1) {
      swift_once();
    }
    uint64_t result = swift_retain();
  }

  *a2 = result;
  return result;
}

uint64_t sub_186F5B710(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return SymmetricKey.withUnsafeBytes<A>(_:)(a1, a2);
}

uint64_t static SymmetricKey.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  return sub_186F5AFC4(v2 + 32, v2 + 32 + *(void *)(v2 + 16), v3) & 1;
}

uint64_t sub_186F5B784(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  return sub_186F5AFC4(v2 + 32, v2 + 32 + *(void *)(v2 + 16), v3) & 1;
}

ValueMetadata *type metadata accessor for SymmetricKeySize()
{
  return &type metadata for SymmetricKeySize;
}

ValueMetadata *type metadata accessor for SymmetricKey()
{
  return &type metadata for SymmetricKey;
}

uint64_t HashFunction.update<A>(data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858]();
  BOOL v13 = &v15[-v12];
  sub_186F87910();
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v20 = v5;
  swift_getAssociatedConformanceWitness();
  sub_186F87CA0();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t static HashFunction.hash(bufferPointer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858]();
  char v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v12, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 40))(a1, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a3);
}

uint64_t static HashFunction.hash<A>(data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a2 - 8);
  double v11 = MEMORY[0x1895F8858](a1);
  BOOL v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t, uint64_t, double))(v14 + 32))(v15, v14, v11);
  HashFunction.update<A>(data:)(a1, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(a4 + 48))(a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, a2);
}

uint64_t sub_186F5BABC()
{
  return sub_186F879B8();
}

uint64_t sub_186F5BBB8()
{
  return sub_186F5BABC();
}

uint64_t dispatch thunk of static HashFunction.blockByteCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of HashFunction.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of HashFunction.update(bufferPointer:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of HashFunction.finalize()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t sub_186F5BBF8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(v2 + 32) + 40LL))( a1,  a2,  *(void *)(v2 + 16));
}

uint64_t sub_186F5BC2C@<X0>(unsigned __int8 a1@<W1>, char **a2@<X8>)
{
  if (v40 == 255)
  {
    sub_186F36690();
    swift_allocError();
    *uint64_t v6 = 3;
    return swift_willThrow();
  }

  v41[0] = v39[0];
  v41[1] = v39[1];
  v41[2] = v39[2];
  unsigned __int8 v42 = v40;
  if (LOBYTE(v39[0]) != a1
    || (sub_186F3B4A4((uint64_t)v41 + 8, (uint64_t)v43), sub_186F3B4A4((uint64_t)v43, (uint64_t)v51), (v53 & 1) != 0))
  {
    sub_186F36690();
    swift_allocError();
    *uint64_t v5 = 1;
    swift_willThrow();
    return sub_186F5CC48( (uint64_t)v28,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
  }

  __int128 v25 = v51[0];
  __int128 v26 = v51[1];
  uint64_t v27 = v52;
  sub_186F65184((uint64_t)v29);
  sub_186F36734((uint64_t)v29, (uint64_t)v35, &qword_18C4B5298);
  if (v36 == 255)
  {
    sub_186F36690();
    swift_allocError();
    *uint64_t v22 = 3;
    sub_186F5CC48( (uint64_t)v28,  (void (*)(void, void, void, void, void, void, void))sub_186F5CC84);
    sub_186F5CC48( (uint64_t)v28,  (void (*)(void, void, void, void, void, void, void))sub_186F5CC84);
    swift_willThrow();
    goto LABEL_11;
  }

  v37[0] = v35[0];
  v37[1] = v35[1];
  void v37[2] = v35[2];
  unsigned __int8 v38 = v36;
  sub_186F5CC48( (uint64_t)v28,  (void (*)(void, void, void, void, void, void, void))sub_186F5CC84);
  sub_186F5CC48( (uint64_t)v28,  (void (*)(void, void, void, void, void, void, void))sub_186F5CC84);
  uint64_t v10 = sub_186F46784((char *)v37, 6, v8, v9);
  if (v2)
  {
LABEL_11:
    swift_unknownObjectRelease();
    sub_186F5CC48( (uint64_t)v28,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
    return sub_186F5CC48( (uint64_t)v28,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
  }

  uint64_t v54 = v10;
  sub_186F65184((uint64_t)v30);
  char v11 = v30[0];
  uint64_t v12 = v30[1];
  uint64_t v13 = v30[2];
  uint64_t v14 = v30[3];
  uint64_t v15 = v30[4];
  uint64_t v16 = v30[5];
  char v17 = v31;
  sub_186F36734((uint64_t)v30, (uint64_t)v34, &qword_18C4B5298);
  if (v34[48] == 255)
  {
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v21 = 0LL;
  }

  else
  {
    v44[0] = v11;
    uint64_t v45 = v12;
    uint64_t v46 = v13;
    uint64_t v47 = v14;
    uint64_t v48 = v15;
    uint64_t v49 = v16;
    char v50 = v17 & 1;
    uint64_t v24 = sub_186F3CB8C(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
    sub_186F5CC48( (uint64_t)v30,  (void (*)(void, void, void, void, void, void, void))sub_186F5CC84);
    sub_186F6B58C(v11, (uint64_t)&v24, (uint64_t)v44);
    sub_186F5CC48( (uint64_t)v30,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
    uint64_t v18 = v24;
    uint64_t v19 = v24 + 32;
    uint64_t v20 = *((void *)v24 + 2);
    sub_186F5CC48( (uint64_t)v30,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
    uint64_t v21 = (2 * v20) | 1;
  }

  sub_186F65184((uint64_t)v32);
  sub_186F5CC48( (uint64_t)v32,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
  sub_186F36734((uint64_t)v32, (uint64_t)v33, &qword_18C4B5298);
  if (v33[48] != 255)
  {
    sub_186F36690();
    swift_allocError();
    *uint64_t v23 = 3;
    swift_willThrow();
    sub_186F5CC48( (uint64_t)v28,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return sub_186F5CC48( (uint64_t)v28,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
  }

  swift_unknownObjectRelease();
  sub_186F5CC48( (uint64_t)v28,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
  uint64_t result = sub_186F5CC48( (uint64_t)v28,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
  *a2 = v54;
  a2[1] = v18;
  a2[2] = v19;
  a2[3] = 0LL;
  a2[4] = (char *)v21;
  return result;
}

uint64_t sub_186F5C044(uint64_t *a1, unint64_t a2)
{
  if (a2)
  {
    unint64_t v3 = sub_186F85120(a2);
    return sub_186F84C78(v3, v4, v5);
  }

  else
  {
    uint64_t v7 = *a1;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_186F3CB8C(0LL, *(void *)(v7 + 16) + 1LL, 1, (char *)v7);
      uint64_t v7 = result;
    }

    unint64_t v9 = *(void *)(v7 + 16);
    unint64_t v8 = *(void *)(v7 + 24);
    if (v9 >= v8 >> 1)
    {
      uint64_t result = (uint64_t)sub_186F3CB8C((char *)(v8 > 1), v9 + 1, 1, (char *)v7);
      uint64_t v7 = result;
    }

    *(void *)(v7 + 16) = v9 + 1;
    *(_BYTE *)(v7 + v9 + 32) = 0;
    *a1 = v7;
  }

  return result;
}

uint64_t sub_186F5C0FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (v52 != 255)
  {
    v53[0] = v51[0];
    v53[1] = v51[1];
    v53[2] = v51[2];
    unsigned __int8 v54 = v52;
    uint64_t result = sub_186F6FECC((unsigned __int8 *)v53, 2u);
    if (v2) {
      return result;
    }
    if (!result)
    {
      sub_186F5BC2C(0x30u, &v35);
      uint64_t v7 = v35;
      uint64_t v8 = v36;
      uint64_t v9 = v37;
      uint64_t v10 = v38;
      unint64_t v62 = v39;
      sub_186F65184((uint64_t)v40);
      sub_186F36734((uint64_t)v40, (uint64_t)v47, &qword_18C4B5298);
      if (v48 == 255)
      {
        sub_186F36690();
        swift_allocError();
        *uint64_t v15 = 3;
        swift_willThrow();
      }

      else
      {
        v49[0] = v47[0];
        v49[1] = v47[1];
        v49[2] = v47[2];
        unsigned __int8 v50 = v48;
        if (LOBYTE(v47[0]) == 4)
        {
          uint64_t v30 = v10;
          uint64_t v31 = v9;
          uint64_t v32 = v8;
          uint64_t v33 = v7;
          sub_186F3B4A4((uint64_t)v49 + 8, (uint64_t)v55);
          uint64_t result = sub_186F3B4A4((uint64_t)v55, (uint64_t)v60);
          if ((v61 & 1) == 0)
          {
            __break(1u);
            return result;
          }

          uint64_t v11 = v60[0];
          uint64_t v12 = v60[1];
          uint64_t v13 = v60[2];
          unint64_t v14 = v60[3];
          sub_186F655A8(a1, 0LL, 2);
          sub_186F5CC48( (uint64_t)v40,  (void (*)(void, void, void, void, void, void, void))sub_186F5CC84);
          sub_186F6BA0C(v11, v12, v13, v14, (uint64_t)v41);
          sub_186F5CC48( (uint64_t)v40,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
          sub_186F5CCB4( (uint64_t)v41,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
          sub_186F710A4(v41, 0x30u, (uint64_t)v42);
          uint64_t v18 = v42[0];
          uint64_t v19 = v42[1];
          uint64_t v20 = v42[2];
          uint64_t v21 = v42[3];
          uint64_t v22 = v42[4];
          __int128 v28 = v44;
          __int128 v29 = v43;
          __int128 v26 = v46;
          __int128 v27 = v45;
          if (!v42[0])
          {
            sub_186F5CCB4( (uint64_t)v41,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
            uint64_t result = sub_186F5CC48( (uint64_t)v40,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
LABEL_27:
            unint64_t v25 = v62;
            *(void *)a2 = v33;
            *(void *)(a2 + 8) = v32;
            *(void *)(a2 + 16) = v31;
            *(void *)(a2 + 24) = v30;
            *(void *)(a2 + 32) = v25;
            *(void *)(a2 + 40) = v18;
            *(void *)(a2 + 48) = v19;
            *(void *)(a2 + 56) = v20;
            *(void *)(a2 + 64) = v21;
            *(void *)(a2 + 72) = v22;
            *(_OWORD *)(a2 + 80) = v29;
            *(_OWORD *)(a2 + 96) = v28;
            *(_OWORD *)(a2 + 112) = v27;
            *(_OWORD *)(a2 + 128) = v26;
            return result;
          }

          uint64_t v57 = v35;
          if (sub_186F46718(v42[0], v35))
          {
            if (v19)
            {
              if (v36)
              {
                char v23 = sub_186F3AF28((uint64_t)v20, (uint64_t)v21, (unint64_t)v22, v37, v38, v39);
                swift_unknownObjectRetain();
                sub_186F87CDC();
                if ((v23 & 1) != 0)
                {
                  sub_186F5CCB4( (uint64_t)v41,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
                  sub_186F5CC48( (uint64_t)v40,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
                  swift_unknownObjectRelease();
LABEL_26:
                  uint64_t result = swift_bridgeObjectRelease();
                  goto LABEL_27;
                }

                goto LABEL_24;
              }
            }

            else if (!v36)
            {
              sub_186F87CDC();
              sub_186F5CCB4( (uint64_t)v41,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
              sub_186F5CC48( (uint64_t)v40,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
              goto LABEL_26;
            }

            sub_186F87CDC();
            swift_unknownObjectRetain();
          }

          else
          {
            swift_unknownObjectRetain();
            sub_186F87CDC();
          }

LABEL_24:
          sub_186F36690();
          swift_allocError();
          *uint64_t v24 = 3;
          swift_willThrow();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          sub_186F5CB24((uint64_t *)v42);
          sub_186F5CCB4( (uint64_t)v41,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
          sub_186F5CC48( (uint64_t)v40,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
          sub_186F3670C((uint64_t)&v57);
          sub_186F36734((uint64_t)&v36, (uint64_t)v56, &qword_18C6B0868);
          char v17 = v56;
          return sub_186F36778((uint64_t)v17);
        }

        sub_186F36690();
        swift_allocError();
        *uint64_t v16 = 1;
        swift_willThrow();
        sub_186F5CC48( (uint64_t)v40,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
      }

      uint64_t v59 = v35;
      sub_186F3670C((uint64_t)&v59);
      sub_186F36734((uint64_t)&v36, (uint64_t)v58, &qword_18C6B0868);
      char v17 = v58;
      return sub_186F36778((uint64_t)v17);
    }
  }

  sub_186F36690();
  swift_allocError();
  *uint64_t v6 = 3;
  return swift_willThrow();
}

  *a1 = v10;
  a1[1] = a3;
  return a3;
}

  *a1 = v8;
  a1[1] = a3;
  return a3;
}

  *a1 = v9;
  a1[1] = a3;
  return a3;
}

  *a1 = v9;
  a1[1] = a3;
  return a3;
}

  *a1 = v8;
  a1[1] = a3;
  return a3;
}

uint64_t sub_186F5C690(char **a1, uint64_t a2)
{
  uint64_t v16 = &v17;
  char v17 = 0LL;
  sub_186F6B888(2, a1, (uint64_t (*)(char **))sub_186F5C83C, (uint64_t)v15);
  __int128 v5 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v5;
  uint64_t v21 = *(void *)(a2 + 32);
  uint64_t v23 = *(void *)&v20[0];
  sub_186F36734((uint64_t)v20 + 8, (uint64_t)v22, &qword_18C6B0868);
  sub_186F5C858((uint64_t)&v23);
  sub_186F5C880((uint64_t)v22);
  uint64_t result = sub_186F67478(48, a1, (char *)v20);
  if (!v2)
  {
    char v17 = sub_186F3CB8C(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
    __int128 v7 = *(_OWORD *)(a2 + 88);
    __int128 v8 = *(_OWORD *)(a2 + 120);
    v18[4] = *(_OWORD *)(a2 + 104);
    v18[5] = v8;
    uint64_t v19 = *(void *)(a2 + 136);
    __int128 v9 = *(_OWORD *)(a2 + 56);
    v18[0] = *(_OWORD *)(a2 + 40);
    v18[1] = v9;
    void v18[2] = *(_OWORD *)(a2 + 72);
    v18[3] = v7;
    sub_186F5CAA4((uint64_t *)v18);
    sub_186F6BEA4(48, &v17, (char *)v18);
    uint64_t v10 = sub_186F5CB24((uint64_t *)v18);
    uint64_t v11 = v17;
    MEMORY[0x1895F8858](v10);
    void v14[2] = v11;
    v14[3] = v12;
    void v14[4] = 0LL;
    void v14[5] = v13;
    sub_186F6B888(4, a1, (uint64_t (*)(char **))sub_186F5CBA0, (uint64_t)v14);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_186F5C824(uint64_t *a1, unint64_t *a2)
{
  return sub_186F5C044(a1, *a2);
}

uint64_t sub_186F5C83C(uint64_t *a1)
{
  return sub_186F5C044(a1, **(void **)(v1 + 16));
}

uint64_t sub_186F5C858(uint64_t a1)
{
  return a1;
}

uint64_t sub_186F5C880(uint64_t a1)
{
  return a1;
}

uint64_t sub_186F5C8A8@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 a2@<W1>, _OWORD *a3@<X8>)
{
  if (*a1 != a2 || (a1[48] & 1) != 0)
  {
    sub_186F36690();
    swift_allocError();
    *uint64_t v6 = 1;
    swift_willThrow();
    uint64_t v7 = (uint64_t)a1;
    return sub_186F5CCB4( v7,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  }

  uint64_t v8 = *((void *)a1 + 5);
  __int128 v9 = *(_OWORD *)(a1 + 24);
  v26[0] = *(_OWORD *)(a1 + 8);
  v26[1] = v9;
  uint64_t v27 = v8;
  swift_unknownObjectRetain_n();
  sub_186F5C0FC((uint64_t)v26, (uint64_t)&v17);
  if (v3)
  {
    swift_unknownObjectRelease();
    sub_186F5CCB4( (uint64_t)a1,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
LABEL_8:
    uint64_t v7 = (uint64_t)a1;
    return sub_186F5CCB4( v7,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  }

  sub_186F65184((uint64_t)v28);
  sub_186F5CC48( (uint64_t)v28,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
  sub_186F36734((uint64_t)v28, (uint64_t)v29, &qword_18C4B5298);
  if (v29[48] != 255)
  {
    sub_186F36690();
    swift_allocError();
    *uint64_t v10 = 3;
    swift_willThrow();
    sub_186F5CCB4( (uint64_t)a1,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
    _DWORD v16[6] = v23;
    v16[7] = v24;
    v16[8] = v25;
    id v16[2] = v19;
    v16[3] = v20;
    v16[4] = v21;
    v16[5] = v22;
    v16[0] = v17;
    v16[1] = v18;
    sub_186F5CBBC((uint64_t)v16);
    swift_unknownObjectRelease();
    goto LABEL_8;
  }

  swift_unknownObjectRelease();
  sub_186F5CCB4( (uint64_t)a1,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  uint64_t result = sub_186F5CCB4( (uint64_t)a1,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  __int128 v12 = v24;
  a3[6] = v23;
  a3[7] = v12;
  a3[8] = v25;
  __int128 v13 = v20;
  a3[2] = v19;
  a3[3] = v13;
  __int128 v14 = v22;
  a3[4] = v21;
  a3[5] = v14;
  __int128 v15 = v18;
  *a3 = v17;
  a3[1] = v15;
  return result;
}

uint64_t *sub_186F5CAA4(uint64_t *a1)
{
  return a1;
}

uint64_t sub_186F5CAF4(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRetain();
    return sub_186F87CDC();
  }

  return result;
}

uint64_t *sub_186F5CB24(uint64_t *a1)
{
  return a1;
}

uint64_t sub_186F5CB74(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }

  return result;
}

uint64_t sub_186F5CBA0(uint64_t a1)
{
  return sub_186F4B814(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_186F5CBBC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_186F5CB74(v2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_186F5CC48( uint64_t a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_186F5CC84( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  if (a7 != 255) {
    return j__swift_unknownObjectRetain(a2, a3, a4, a5, a6, a7 & 1);
  }
  return result;
}

uint64_t sub_186F5CCB4(uint64_t a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_186F5CCEC()
{
  return sub_186F88018();
}

uint64_t sub_186F5CD30()
{
  return sub_186F88000();
}

uint64_t sub_186F5CD58()
{
  return sub_186F88018();
}

uint64_t sub_186F5CD98()
{
  return 0LL;
}

unint64_t sub_186F5CE48()
{
  unint64_t result = qword_18C6B14F8;
  if (!qword_18C6B14F8)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F8AB8C, &_s14ASN1IdentifierVN);
    atomic_store(result, (unint64_t *)&qword_18C6B14F8);
  }

  return result;
}

ValueMetadata *_s14ASN1IdentifierVMa()
{
  return &_s14ASN1IdentifierVN;
}

ValueMetadata *_s32CoreCryptoCurve448PrivateKeyImplVMa_0()
{
  return &_s32CoreCryptoCurve448PrivateKeyImplVN_0;
}

ValueMetadata *_s31CoreCryptoCurve448PublicKeyImplVMa_0()
{
  return &_s31CoreCryptoCurve448PublicKeyImplVN_0;
}

size_t sub_186F5CEBC()
{
  uint64_t v0 = sub_186F87CE8();
  *(void *)(v0 + 16) = 56LL;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(void *)(v0 + 80) = 0LL;
  if (!ccrng()) {
LABEL_5:
  }
    __break(1u);
  if (cccurve448_make_pub())
  {
    __break(1u);
    goto LABEL_5;
  }

  uint64_t v1 = sub_186F87CDC();
  size_t v2 = sub_186F5D154(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

size_t sub_186F5CFC4@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, size_t *a3@<X8>)
{
  if (a1 && a2 - a1 == 56)
  {
    size_t result = sub_186F4B3D0(a1, a2);
    *a3 = result;
  }

  else
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v5 = 0;
    *(_BYTE *)(v5 + 4) = 1;
    return swift_willThrow();
  }

  return result;
}

uint64_t sub_186F5D038(uint64_t result, uint64_t a2)
{
  if (!result || a2 - result != 56)
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v2 = 0;
    *(_BYTE *)(v2 + 4) = 1;
    return swift_willThrow();
  }

  return result;
}

uint64_t sub_186F5D09C@<X0>(uint64_t a1@<X0>, void *a2@<X2>, _DWORD *a3@<X8>)
{
  if (!ccrng())
  {
    __break(1u);
    goto LABEL_6;
  }

  if (!*a2)
  {
LABEL_6:
    __break(1u);
LABEL_7:
    __break(1u);
  }

  if (!a1) {
    goto LABEL_7;
  }
  uint64_t result = cccurve448();
  *a3 = result;
  return result;
}

size_t sub_186F5D154(uint64_t a1)
{
  if (*(void *)(a1 + 16) == 56LL) {
    return sub_186F4B3D0(a1 + 32, a1 + 88);
  }
  sub_186F35D6C();
  swift_allocError();
  *(_DWORD *)uint64_t v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return swift_willThrow();
}

uint64_t sub_186F5D1C8()
{
  uint64_t result = sub_186F879B8();
  if (!v0) {
    return v2;
  }
  return result;
}

uint64_t sub_186F5D23C()
{
  uint64_t result = sub_186F879B8();
  if (!v0) {
    return sub_186F41B44();
  }
  return result;
}

uint64_t sub_186F5D2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186F5D43C(a1, a2, a3, sub_186F5F8C8);
}

void sub_186F5D2B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000LL) == 0) {
    __asm { BR              X9 }
  }

  __break(1u);
  JUMPOUT(0x186F5D3FCLL);
}

uint64_t sub_186F5D430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186F5D43C(a1, a2, a3, sub_186F5F968);
}

uint64_t sub_186F5D43C( uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    if (a2) {
      uint64_t v4 = a3 - a2;
    }
    else {
      uint64_t v4 = 0LL;
    }
    uint64_t result = a4(0LL, result, v4, a2, a3);
    if ((v5 & 1) != 0) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = result;
    }
    if ((v6 & 0x8000000000000000LL) == 0) {
      return 0LL;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_186F5D4B0(uint64_t result, uint64_t a2, uint64_t a3, int64_t a4, unint64_t a5)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_13;
  }

  int64_t v5 = a5 >> 1;
  uint64_t v6 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if (!result || v6 < 0 || (int64_t v7 = a5 >> 1, v6 >= result))
  {
    int64_t v7 = a4 + result;
    if (__OFADD__(a4, result)) {
      goto LABEL_18;
    }
  }

  if (v7 < a4) {
    goto LABEL_14;
  }
  if (v5 < a4)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (v5 >= v7)
  {
    if ((v7 & 0x8000000000000000LL) == 0) {
      return a2;
    }
    goto LABEL_17;
  }

void sub_186F5D52C(uint64_t a1, uint64_t a2)
{
  v3[5] = *MEMORY[0x1895F89C0];
  v3[3] = MEMORY[0x189606D70];
  v3[4] = MEMORY[0x189606D58];
  v3[0] = a1;
  v3[1] = a2;
  uint64_t v2 = (char *)&loc_186F5D590
     + dword_186F5D734[__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x189606D70])[1] >> 62];
  __asm { BR              X10 }

uint64_t sub_186F5D5A0()
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v3);
}

uint64_t sub_186F5D744()
{
  v5[5] = *MEMORY[0x1895F89C0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B5290);
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B5280);
  if (!swift_dynamicCast())
  {
    uint64_t v4 = 0LL;
    memset(v3, 0, sizeof(v3));
    sub_186F33ED4((uint64_t)v3);
    __asm { BR              X12 }
  }

  sub_186F3A3A0(v3, (uint64_t)v5);
  uint64_t v1 = __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  MEMORY[0x1895F8858](v1);
  sub_186F879B8();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

void sub_186F5DAF0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_186F5DB80( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__src, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  if (BYTE6(v33) < 0xCuLL)
  {
LABEL_14:
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v50 = 1;
    *(_BYTE *)(v50 + 4) = 1;
    swift_willThrow();
    sub_186F33C98(v31, v33);
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x186F5E000LL);
  }

  uint64_t v57 = v32;
  uint64_t v36 = v35;
  sub_186F394BC(v31, v33);
  unint64_t v33 = v37;
  uint64_t v39 = v38;
  sub_186F33C98(v29, v27);
  uint64_t v40 = ccaes_gcm_decrypt_mode();
  if (!v40)
  {
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v41 = v40;
  v55[0] = v28;
  *(void *)&__int128 v56 = v33;
  *((void *)&v56 + 1) = v39;
  type metadata accessor for CoreCryptoGCMImpl.Context();
  swift_allocObject();
  uint64_t result = sub_186F34F10(v55, (uint64_t *)&v56, v41);
  if (!v30)
  {
    uint64_t v43 = result;
    if (v34 >> 60 == 15)
    {
      uint64_t v44 = v57;
    }

    else
    {
      uint64_t v45 = v36;
      sub_186F33D20(v36, v34);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v46 = swift_allocObject();
        uint64_t v47 = *(void *)(v43 + 24);
        uint64_t v52 = v46;
        *(void *)(v46 + 24) = v47;
        swift_retain();
        MEMORY[0x18959ECCC](v47);
        unsigned __int8 v48 = (void *)swift_slowAlloc();
        uint64_t v51 = *(const void **)(v43 + 16);
        size_t v49 = MEMORY[0x18959ECCC](v47);
        if ((v49 & 0x8000000000000000LL) != 0)
        {
          __break(1u);
          JUMPOUT(0x186F5DF98LL);
        }

        memmove(v48, v51, v49);
        swift_release();
        *(void *)(v52 + 16) = v48;
        swift_release();
        uint64_t v45 = v36;
      }

      sub_186F5E154(v45, v34);
      sub_186F33EA0(v45, v34);
      uint64_t v44 = v57;
    }

    __int128 v56 = xmmword_186F88B50;
    sub_186F33D20(v29, v27);
    sub_186F5E5B8(v44, v29, v27);
    sub_186F5EC20(16LL, v53, v54);
    __asm { BR              X10 }
  }

  return result;
}

void AES.GCM.SealedBox.nonce.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  sub_186F33D20(v1, v2);
  sub_186F5D2B4(v3, v1, v2);
  sub_186F5EDA0(v4, v5);
}

uint64_t AES.GCM.SealedBox.ciphertext.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  sub_186F33D20(v1, v2);
  sub_186F5E5B8(v3, v1, v2);
  sub_186F5EC20(16LL, v5, v6);
  return v7;
}

uint64_t AES.GCM.SealedBox.tag.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  sub_186F33D20(v1, v2);
  sub_186F5EAA0(16LL, v1, v2);
  return v4;
}

void sub_186F5E154(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_186F5E1AC()
{
  int v2 = ccgcm_aad();
  if (v2)
  {
    int v3 = v2;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v4 = v3;
    *(_BYTE *)(v4 + 4) = 0;
    swift_willThrow();
  }

  sub_186F33C98(v1, v0);
  return swift_release_n();
}

void sub_186F5E3C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X12 }

uint64_t sub_186F5E40C(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_186F5E444 + *((int *)qword_186F5E508 + (a2 >> 62))))();
}

void sub_186F5E454()
{
  uint64_t v0 = sub_186F5D744();
  MEMORY[0x1895F8858](v0);
  sub_186F5A524();
}

uint64_t sub_186F5E518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_186F33C98(a4, a5);
}

void sub_186F5E5B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000LL) == 0) {
    __asm { BR              X9 }
  }

  __break(1u);
  JUMPOUT(0x186F5E714LL);
}

uint64_t sub_186F5E748(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }

  uint64_t v5 = a3 - a2;
  if (a2) {
    uint64_t v6 = a3 - a2;
  }
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t result = sub_186F5F968(0LL, result, v6, a2, a3);
  if ((v7 & 1) != 0)
  {
    uint64_t result = v5;
    if (!a2) {
      return 0LL;
    }
  }

  else if (!a2)
  {
    uint64_t v5 = 0LL;
  }

  if (v5 < result) {
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_186F5E7D4(uint64_t result, uint64_t a2, uint64_t a3, int64_t a4, unint64_t a5)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  int64_t v5 = a5 >> 1;
  uint64_t v6 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  if (result)
  {
    if ((v6 & 0x8000000000000000LL) == 0)
    {
      int64_t v7 = a5 >> 1;
      if (v6 < result)
      {
LABEL_8:
        if (v7 >= a4)
        {
          if (v5 >= a4) {
            return a2;
          }
          goto LABEL_15;
        }

void sub_186F5E844(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_186F5E8A4()
{
  uint64_t v4 = v1;
  __int16 v5 = v2;
  char v6 = BYTE2(v2);
  char v7 = BYTE3(v2);
  char v8 = BYTE4(v2);
  char v9 = BYTE5(v2);
  return sub_186F358AC((uint64_t)&v4, (uint64_t)&v4 + BYTE6(v2), v0);
}

void sub_186F5EAA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000LL) == 0) {
    __asm { BR              X9 }
  }

  __break(1u);
  JUMPOUT(0x186F5EBECLL);
}

void sub_186F5EC20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000LL) == 0) {
    __asm { BR              X9 }
  }

  __break(1u);
  JUMPOUT(0x186F5ED70LL);
}

void sub_186F5EDA0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_186F5EDDC()
{
  if (BYTE6(v0) >= 0xCuLL)
  {
    sub_186F394BC(v1, v0);
    *uint64_t v2 = v4;
    v2[1] = v5;
  }

  else
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v3 = 1;
    *(_BYTE *)(v3 + 4) = 1;
    swift_willThrow();
    sub_186F33C98(v1, v0);
  }

uint64_t static AES.GCM.seal<A, B>(_:using:nonce:authenticating:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v23 = a8;
  uint64_t v21 = a5;
  uint64_t v22 = a7;
  uint64_t v15 = sub_186F87DCC();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  __int128 v18 = (char *)&v21 - v17;
  uint64_t v25 = *a2;
  __int128 v24 = *a3;
  uint64_t v19 = *(void *)(a6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v21 - v17, a4, a6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v18, 0LL, 1LL, a6);
  sub_186F345A4(&v25, a1, (uint64_t *)&v24, (uint64_t)v18, v21, a6, v22, v23, a9);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t AES.GCM.SealedBox.combined.getter()
{
  if (v0[2] != 12) {
    return 0LL;
  }
  uint64_t v2 = v0;
  uint64_t v1 = *v0;
  sub_186F33D20(v1, v2[1]);
  return v1;
}

uint64_t AES.GCM.SealedBox.init<A, B>(nonce:ciphertext:tag:)( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *a1;
  unint64_t v9 = a1[1];
  if (sub_186F87D3C() == 16) {
    __asm { BR              X10 }
  }

  sub_186F33C98(v10, v9);
  sub_186F35D6C();
  swift_allocError();
  *(_DWORD *)uint64_t v11 = 1;
  *(_BYTE *)(v11 + 4) = 1;
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8LL))(a3, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8LL))(a2, a4);
}

uint64_t static AES.GCM.open<A>(_:using:authenticating:)( __int128 *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_186F87DCC();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  __int128 v13 = (char *)&v19 - v12;
  uint64_t v14 = *((void *)a1 + 2);
  uint64_t v21 = *a2;
  __int128 v19 = *a1;
  uint64_t v20 = v14;
  uint64_t v15 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, a3, a4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v13, 0LL, 1LL, a4);
  sub_186F349B8((uint64_t)&v21, (uint64_t *)&v19, (uint64_t)v13, a4, a5);
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v17;
}

uint64_t static AES.GCM.seal<A>(_:using:nonce:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v15 = *a2;
  __int128 v10 = *a3;
  __int128 v13 = xmmword_186F89E20;
  __int128 v14 = v10;
  unint64_t v11 = sub_186F44100();
  return sub_186F345A4(&v15, a1, (uint64_t *)&v14, (uint64_t)&v13, a4, MEMORY[0x189606D70], a5, v11, a6);
}

void static AES.GCM.open(_:using:)(uint64_t a1, uint64_t *a2)
{
}

uint64_t AES.GCM.SealedBox.init(combined:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  a3[2] = 12LL;
  return result;
}

uint64_t AES.GCM.SealedBox.init<A>(combined:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  char v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (sub_186F87D3C() >= 28)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
    uint64_t v11 = sub_186F87AE4();
    uint64_t v13 = v12;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
    *a3 = v11;
    a3[1] = v13;
    a3[2] = 12LL;
  }

  else
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v9 = 1;
    *(_BYTE *)(v9 + 4) = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  }

  return result;
}

unint64_t sub_186F5F540()
{
  unint64_t result = qword_18C6B1500;
  if (!qword_18C6B1500)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for AES.GCM.Nonce, &type metadata for AES.GCM.Nonce);
    atomic_store(result, (unint64_t *)&qword_18C6B1500);
  }

  return result;
}

unint64_t sub_186F5F588()
{
  unint64_t result = qword_18C6B1508;
  if (!qword_18C6B1508)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F8AC7C, &type metadata for AES.GCM.SealedBox);
    atomic_store(result, (unint64_t *)&qword_18C6B1508);
  }

  return result;
}

ValueMetadata *type metadata accessor for AES.GCM()
{
  return &type metadata for AES.GCM;
}

uint64_t *sub_186F5F5E0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_186F33D20(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  return a1;
}

uint64_t *_s3GCMO9SealedBoxVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_186F33D20(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_186F33C98(v6, v7);
  a1[2] = a2[2];
  return a1;
}

uint64_t *_s3GCMO9SealedBoxVwta(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_186F33C98(v4, v5);
  a1[2] = *(void *)(a2 + 16);
  return a1;
}

uint64_t _s3GCMO9SealedBoxVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s3GCMO9SealedBoxVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)unint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AES.GCM.SealedBox()
{
  return &type metadata for AES.GCM.SealedBox;
}

uint64_t sub_186F5F76C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_186F8797C();
  if (!result || (uint64_t result = sub_186F879A0(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_186F87994();
      return sub_186F87A54();
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_186F5F7FC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_186F8797C();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = sub_186F879A0();
    if (__OFSUB__(a1, result))
    {
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }

    v5 += a1 - result;
  }

  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t result = sub_186F87994();
  if (!v5)
  {
LABEL_11:
    __break(1u);
    return result;
  }

  int v6 = ccgcm_aad();
  if (v6)
  {
    int v7 = v6;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = v7;
    *(_BYTE *)(v8 + 4) = 0;
    swift_willThrow();
  }

  return swift_release();
}

uint64_t sub_186F5F8C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_186F51F98(a1, a3, a4, a5);
  if (a2 > 0)
  {
    return 0LL;
  }

  if (v9 <= 0 && v9 > a2) {
    return 0LL;
  }
LABEL_8:
  uint64_t result = a1 + a2;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }

  uint64_t v11 = a5 - a4;
  if (!a4) {
    uint64_t v11 = 0LL;
  }
  if (result < 0 || v11 < result) {
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_186F5F968(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5 - a4;
  if (!a4) {
    uint64_t v5 = 0LL;
  }
  if (result < 0 || v5 < result)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (a3 < 0 || v5 < a3) {
    goto LABEL_19;
  }
  uint64_t v6 = a3 - result;
  if (a2 > 0)
  {
    return 0LL;
  }

  if (v6 <= 0 && v6 > a2) {
    return 0LL;
  }
LABEL_14:
  BOOL v7 = __OFADD__(result, a2);
  result += a2;
  if (v7)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }

  if (result < 0 || v5 < result) {
    goto LABEL_21;
  }
  return result;
}

uint64_t sub_186F5F9F0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x186F5FA50LL);
  }

  return ((uint64_t (*)(uint64_t))((char *)&loc_186F5FA08 + dword_186F5FA54[a4 >> 62]))(v5);
}

uint64_t sub_186F5FA64(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_186F5FA74 + dword_186F5FB1C[a4 >> 62]))();
}

uint64_t sub_186F5FA88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x186F5FB14LL);
  }

  return ((uint64_t (*)(void))((char *)&loc_186F5FAC4 + dword_186F5FB2C[a3]))();
}

unint64_t sub_186F5FB3C( uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    unint64_t v5 = a5;
    unint64_t v6 = a4;
    unint64_t v7 = a3;
    unint64_t v8 = a2;
    uint64_t v9 = a1;
    uint64_t v10 = (a4 >> 59) & 1;
    if ((a5 & 0x1000000000000000LL) == 0) {
      LOBYTE(v10) = 1;
    }
    unint64_t result = a3;
    if ((a3 & 0xC) != 4LL << v10)
    {
      if ((a5 & 0x1000000000000000LL) == 0) {
        goto LABEL_6;
      }
LABEL_21:
      unint64_t result = sub_186F87C10();
      if ((v16 & 1) != 0) {
        unint64_t result = v8;
      }
      goto LABEL_17;
    }
  }

  unint64_t result = sub_186F43604(v7, v6, v5);
  if ((v5 & 0x1000000000000000LL) != 0) {
    goto LABEL_21;
  }
LABEL_6:
  unint64_t v12 = result >> 16;
  int64_t v13 = (result >> 16) - v9;
  unint64_t v14 = v8 >> 16;
  if (v9)
  {
    if (v12 < v14) {
      goto LABEL_12;
    }
    unint64_t result = v8;
LABEL_17:
    if (v7 >> 14 >= result >> 14) {
      return sub_186F4367C(result, v7, v8, v7, v6, v5);
    }
    __break(1u);
    goto LABEL_25;
  }

  if (v14 >= v12)
  {
    unint64_t result = v8;
  }

unint64_t sub_186F5FC68( uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    unint64_t v5 = a5;
    unint64_t v6 = a4;
    unint64_t v7 = a3;
    unint64_t v8 = a2;
    uint64_t v9 = a1;
    uint64_t v10 = (a4 >> 59) & 1;
    if ((a5 & 0x1000000000000000LL) == 0) {
      LOBYTE(v10) = 1;
    }
    unint64_t result = a3;
    if ((a3 & 0xC) != 4LL << v10)
    {
      if ((a5 & 0x1000000000000000LL) == 0) {
        goto LABEL_6;
      }
LABEL_21:
      unint64_t result = sub_186F87C10();
      if ((v17 & 1) != 0) {
        unint64_t v15 = v8;
      }
      else {
        unint64_t v15 = result;
      }
      goto LABEL_17;
    }
  }

  unint64_t result = sub_186F43604(v7, v6, v5);
  if ((v5 & 0x1000000000000000LL) != 0) {
    goto LABEL_21;
  }
LABEL_6:
  unint64_t v12 = result >> 16;
  int64_t v13 = (result >> 16) - v9;
  unint64_t v14 = v8 >> 16;
  if (v9)
  {
    if (v12 < v14) {
      goto LABEL_12;
    }
    unint64_t v15 = v8;
LABEL_17:
    if (v15 >> 14 >= v8 >> 14) {
      return sub_186F4367C(v8, v15, v8, v7, v6, v5);
    }
    __break(1u);
    goto LABEL_25;
  }

  if (v14 >= v12)
  {
    unint64_t v15 = v8;
  }

uint64_t sub_186F5FD94(uint64_t a1, uint64_t a2)
{
  return sub_186F5E518(a1, a2, *(void *)(v2 + 16), **(void **)(v2 + 24), *(void *)(*(void *)(v2 + 24) + 8LL));
}

uint64_t sub_186F5FDB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_186F5FE0C(a1, a2, *(void *)(v3 + 16), **(void **)(v3 + 32), *(_BYTE *)(*(void *)(v3 + 32) + 8LL));
  if (!v4)
  {
    *(void *)a3 = result;
    *(_BYTE *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = v8;
    *(void *)(a3 + 24) = v9;
  }

  return result;
}

uint64_t sub_186F5FDF4()
{
  return sub_186F87228();
}

uint64_t sub_186F5FE0C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!result) {
    return a4;
  }
  if (!__OFSUB__(a2 - result, a3))
  {
    sub_186F6A1EC((uint64_t)&v5, (_BYTE *)(result + a3), a2 - result - a3, a4, a5);
    return v5;
  }

  __break(1u);
  return result;
}

uint64_t sub_186F5FE80(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  int v4 = a1;
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t))(a3 + 40))(&v4, &v5, a2);
}

uint64_t SharedSecret.init<A>(withExternalSS:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_186F41B44();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  *a3 = v6;
  return result;
}

uint64_t SharedSecret.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return sub_186F403F0(a1, a2, *v2);
}

uint64_t SharedSecret.x963DerivedSymmetricKey<A, B>(using:sharedInfo:outputByteCount:)@<X0>( uint64_t a1@<X1>, int64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, void *a7@<X8>)
{
  uint64_t v15 = *v7;
  swift_beginAccess();
  return sub_186F5FFE8(v15 + 32, v15 + 32 + *(void *)(v15 + 16), a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_186F5FFE8@<X0>( size_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  return swift_release();
}

uint64_t SharedSecret.hkdfDerivedSymmetricKey<A, B, C>(using:salt:sharedInfo:outputByteCount:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, char *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, char *a9, uint64_t a10)
{
  uint64_t v12 = *v10;
  return static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)( &v12,  a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10);
}

uint64_t sub_186F600B0(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return SharedSecret.withUnsafeBytes<A>(_:)(a1, a2);
}

uint64_t SharedSecret.hash(into:)()
{
  return sub_186F87FE8();
}

uint64_t SharedSecret.hashValue.getter()
{
  return sub_186F88018();
}

uint64_t sub_186F60174()
{
  return sub_186F88018();
}

uint64_t sub_186F601D4()
{
  return sub_186F87FE8();
}

uint64_t sub_186F60224()
{
  return sub_186F88018();
}

uint64_t static SharedSecret.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  return sub_186F5AFAC(v2 + 32, v2 + 32 + *(void *)(v2 + 16), v3) & 1;
}

uint64_t static SharedSecret.== infix<A>(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_186F87DCC();
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  uint64_t v36 = (char *)&v34 - v10;
  uint64_t v35 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = swift_checkMetadataState();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  __int128 v19 = (char *)&v34 - v18;
  uint64_t v20 = *a1;
  uint64_t v38 = a2;
  uint64_t v39 = a4;
  sub_186F87910();
  uint64_t v21 = sub_186F87D3C();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v19, v13);
  if (v21 != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v12, v38, a3);
    uint64_t v30 = sub_186F87AE4();
    unint64_t v32 = v31;
    swift_beginAccess();
    sub_186F5B33C(v20 + 32, v20 + 32 + *(void *)(v20 + 16), v30, v32);
    char v29 = v33;
    sub_186F33C98(v30, v32);
    return v29 & 1;
  }

  v40[0] = v20;
  sub_186F87910();
  uint64_t v23 = v36;
  sub_186F87D60();
  v22(v17, v13);
  uint64_t v24 = AssociatedTypeWitness;
  uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1LL, AssociatedTypeWitness);
  if ((_DWORD)result != 1)
  {
    unint64_t v27 = sub_186F4F76C();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    char v29 = sub_186F6CF48(v40, v23, &type metadata for SharedSecret, v24, v27, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v23, v24);
    return v29 & 1;
  }

  __break(1u);
  return result;
}

uint64_t SharedSecret.description.getter()
{
  uint64_t v1 = *v0;
  strcpy((char *)v9, "SharedSecret: ");
  HIBYTE(v9[1]) = -18;
  uint64_t result = swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3 + 0x4000000000000000LL < 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  size_t v4 = 2 * v3;
  if (2 * v3 < 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }

  swift_retain();
  if (v4)
  {
    uint64_t v5 = sub_186F87CE8();
    *(void *)(v5 + 16) = v4;
    bzero((void *)(v5 + 32), v4);
  }

  else
  {
    uint64_t v5 = MEMORY[0x18961AFE8];
  }

  uint64_t v7 = 0LL;
  uint64_t v8 = v5;
  uint64_t v6 = swift_retain();
  sub_186F3D230(v6, &v8, &v7);
  swift_release();
  sub_186F87CDC();
  sub_186F87BC8();
  swift_release();
  swift_bridgeObjectRelease_n();
  sub_186F87BEC();
  swift_bridgeObjectRelease();
  return v9[0];
}

unint64_t sub_186F6072C()
{
  unint64_t result = qword_18C6B1588;
  if (!qword_18C6B1588)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SharedSecret, &type metadata for SharedSecret);
    atomic_store(result, (unint64_t *)&qword_18C6B1588);
  }

  return result;
}

uint64_t dispatch thunk of DiffieHellmanKeyAgreement.publicKey.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DiffieHellmanKeyAgreement.sharedSecretFromKeyAgreement(with:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for SharedSecret()
{
  return &type metadata for SharedSecret;
}

uint64_t static Insecure.SHA1.blockByteCount.getter()
{
  return 64LL;
}

uint64_t static Insecure.SHA1.byteCount.getter()
{
  return 20LL;
}

uint64_t Insecure.SHA1.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F535B8(MEMORY[0x1895FA268], &qword_18C4B54D0, a1);
}

uint64_t Insecure.SHA1.finalize()@<X0>(void *a1@<X8>)
{
  return sub_186F4CCEC(a1);
}

uint64_t sub_186F607E8@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F53680(MEMORY[0x1895FA268], &qword_18C4B54D0, a1);
}

uint64_t sub_186F60800@<X0>(void *a1@<X8>)
{
  return sub_186F4CCEC(a1);
}

uint64_t static Insecure.MD5.blockByteCount.getter()
{
  return 64LL;
}

uint64_t static Insecure.MD5.byteCount.getter()
{
  return 16LL;
}

uint64_t Insecure.MD5.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F535B8(MEMORY[0x1895FA068], &qword_18C4B4FA0, a1);
}

uint64_t Insecure.MD5.finalize()@<X0>(void *a1@<X8>)
{
  return sub_186F4CC3C(a1);
}

uint64_t sub_186F60868@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F53680(MEMORY[0x1895FA068], &qword_18C4B4FA0, a1);
}

uint64_t sub_186F60880@<X0>(void *a1@<X8>)
{
  return sub_186F4CC3C(a1);
}

unint64_t sub_186F608A4()
{
  unint64_t result = qword_18C6B1590;
  if (!qword_18C6B1590)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F8BFE0, &type metadata for Insecure.SHA1Digest);
    atomic_store(result, (unint64_t *)&qword_18C6B1590);
  }

  return result;
}

unint64_t sub_186F608E8(uint64_t a1)
{
  unint64_t result = sub_186F6090C();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_186F6090C()
{
  unint64_t result = qword_18C4B54D8;
  if (!qword_18C4B54D8)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for Insecure.SHA1, &type metadata for Insecure.SHA1);
    atomic_store(result, (unint64_t *)&qword_18C4B54D8);
  }

  return result;
}

unint64_t sub_186F60954()
{
  unint64_t result = qword_18C6B15D0;
  if (!qword_18C6B15D0)
  {
    unint64_t result = MEMORY[0x18959EFD8]( &protocol conformance descriptor for Insecure.SHA1Digest,  &type metadata for Insecure.SHA1Digest);
    atomic_store(result, (unint64_t *)&qword_18C6B15D0);
  }

  return result;
}

unint64_t sub_186F6099C()
{
  unint64_t result = qword_18C6B1610;
  if (!qword_18C6B1610)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F8C138, &type metadata for Insecure.MD5Digest);
    atomic_store(result, (unint64_t *)&qword_18C6B1610);
  }

  return result;
}

unint64_t sub_186F609E0(uint64_t a1)
{
  unint64_t result = sub_186F60A04();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_186F60A04()
{
  unint64_t result = qword_18C4B4FA8;
  if (!qword_18C4B4FA8)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for Insecure.MD5, &type metadata for Insecure.MD5);
    atomic_store(result, (unint64_t *)&qword_18C4B4FA8);
  }

  return result;
}

unint64_t sub_186F60A4C()
{
  unint64_t result = qword_18C6B1650;
  if (!qword_18C6B1650)
  {
    unint64_t result = MEMORY[0x18959EFD8]( &protocol conformance descriptor for Insecure.MD5Digest,  &type metadata for Insecure.MD5Digest);
    atomic_store(result, (unint64_t *)&qword_18C6B1650);
  }

  return result;
}

ValueMetadata *type metadata accessor for Insecure.SHA1()
{
  return &type metadata for Insecure.SHA1;
}

ValueMetadata *type metadata accessor for Insecure.MD5()
{
  return &type metadata for Insecure.MD5;
}

uint64_t sub_186F60AB4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_186F60AF8()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CoreCryptoDigestBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for CoreCryptoDigestBuffer);
}

uint64_t type metadata accessor for CoreCryptoDigestImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CoreCryptoDigestImpl);
}

uint64_t Curve25519.KeyAgreement.PublicKey.init<A>(_:kem:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*v10 == 3)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a2);
    Curve25519.KeyAgreement.PublicKey.init<A>(rawRepresentation:)((uint64_t)v9, a2, &v14);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
    if (!v3) {
      *a3 = v14;
    }
  }

  else
  {
    sub_186F33CDC();
    swift_allocError();
    *uint64_t v12 = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
  }

  return result;
}

uint64_t Curve25519.KeyAgreement.PublicKey.hpkeRepresentation(kem:)(_BYTE *a1)
{
  if (*a1 == 3)
  {
    uint64_t v1 = sub_186F87CDC();
    uint64_t v2 = sub_186F3A07C(v1);
    swift_bridgeObjectRelease();
    return v2;
  }

  else
  {
    sub_186F33CDC();
    swift_allocError();
    *size_t v4 = 1;
    return swift_willThrow();
  }

uint64_t sub_186F60CE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  return Curve25519.KeyAgreement.PublicKey.init<A>(_:kem:)(a1, a2, a3);
}

uint64_t sub_186F60D08(_BYTE *a1)
{
  if (*a1 == 3)
  {
    uint64_t v1 = sub_186F87CDC();
    uint64_t v2 = sub_186F3A07C(v1);
    swift_bridgeObjectRelease();
    return v2;
  }

  else
  {
    sub_186F33CDC();
    swift_allocError();
    *size_t v4 = 1;
    return swift_willThrow();
  }

_UNKNOWN **sub_186F60D98()
{
  return &protocol witness table for Curve25519.KeyAgreement.PublicKey;
}

_UNKNOWN **sub_186F60DA4()
{
  return &protocol witness table for Curve25519.KeyAgreement.PrivateKey;
}

uint64_t MessageAuthenticationCode.makeIterator()()
{
  return v1;
}

uint64_t static MessageAuthenticationCode.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_186F6CF48(a1, a2, a3, a3, *(void *)(a4 + 8), *(void *)(a4 + 8));
}

uint64_t MessageAuthenticationCode.description.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_186F88024();
  uint64_t v16 = v6;
  sub_186F87BEC();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  uint64_t result = sub_186F87CF4();
  uint64_t v8 = *(void *)(result + 16);
  if (v8 + 0x4000000000000000LL < 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  size_t v9 = 2 * v8;
  if (2 * v8 < 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }

  uint64_t v10 = result;
  if (v8)
  {
    uint64_t v11 = sub_186F87CE8();
    *(void *)(v11 + 16) = v9;
    bzero((void *)(v11 + 32), v9);
  }

  else
  {
    uint64_t v11 = MEMORY[0x18961AFE8];
  }

  uint64_t v13 = 0LL;
  uint64_t v14 = v11;
  sub_186F87CDC();
  sub_186F3D3B8(v10, &v14, &v13);
  swift_bridgeObjectRelease();
  sub_186F87CDC();
  sub_186F87BC8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_186F87BEC();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t static MessageAuthenticationCode.== infix<A>(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v41 = a5;
  uint64_t v42 = a1;
  uint64_t v43 = a3;
  swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = sub_186F87DCC();
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  uint64_t v38 = (char *)v37 - v12;
  v37[0] = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = swift_checkMetadataState();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](v15);
  __int128 v19 = (char *)v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  uint64_t v21 = (char *)v37 - v20;
  uint64_t v40 = a6;
  sub_186F87910();
  v37[1] = v9;
  uint64_t v22 = sub_186F87D3C();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v16 + 8);
  v23(v21, v15);
  if (v22 != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v37[0] + 16LL))(v14, a2, a4);
    uint64_t v34 = sub_186F87AE4();
    unint64_t v36 = v35;
    v44[0] = v34;
    v44[1] = v35;
    char v33 = sub_186F6CF48(v42, v44, v43, MEMORY[0x189606D70], *(void *)(v41 + 8), MEMORY[0x189606D58]);
    sub_186F33C98(v34, v36);
    return v33 & 1;
  }

  uint64_t v24 = v41;
  uint64_t v25 = v42;
  uint64_t v26 = v43;
  sub_186F87910();
  unint64_t v27 = v38;
  sub_186F87D60();
  v23(v19, v15);
  uint64_t v28 = AssociatedTypeWitness;
  uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1LL, AssociatedTypeWitness);
  if ((_DWORD)result != 1)
  {
    uint64_t v31 = *(void *)(v24 + 8);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    char v33 = sub_186F6CF48(v25, v27, v26, v28, v31, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v28);
    return v33 & 1;
  }

  __break(1u);
  return result;
}

void *sub_186F612B4@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a1) {
    int64_t v4 = a2 - (void)a1;
  }
  else {
    int64_t v4 = 0LL;
  }
  uint64_t result = sub_186F418B8(a1, v4);
  *a3 = result;
  a3[1] = 0LL;
  return result;
}

uint64_t dispatch thunk of MessageAuthenticationCode.byteCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t CryptoKitError.hash(into:)()
{
  if (*(_BYTE *)(v0 + 4) == 1) {
    __asm { BR              X9 }
  }

  sub_186F87FF4();
  return sub_186F8800C();
}

uint64_t CryptoKitError.hashValue.getter()
{
  uint64_t v1 = *v0;
  int v2 = *((unsigned __int8 *)v0 + 4);
  sub_186F87FDC();
  if (v2 == 1) {
    __asm { BR              X9 }
  }

  sub_186F87FF4();
  sub_186F8800C();
  return sub_186F88018();
}

uint64_t sub_186F6144C()
{
  if (*(_BYTE *)(v0 + 4) == 1) {
    __asm { BR              X9 }
  }

  sub_186F87FF4();
  return sub_186F8800C();
}

uint64_t sub_186F614D8()
{
  uint64_t v1 = *v0;
  int v2 = *((unsigned __int8 *)v0 + 4);
  sub_186F87FDC();
  if (v2 == 1) {
    __asm { BR              X9 }
  }

  sub_186F87FF4();
  sub_186F8800C();
  return sub_186F88018();
}

BOOL static CryptoKitASN1Error.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t CryptoKitASN1Error.hash(into:)()
{
  return sub_186F87FF4();
}

uint64_t CryptoKitASN1Error.hashValue.getter()
{
  return sub_186F88018();
}

uint64_t _s9CryptoKit0aB5ErrorO2eeoiySbAC_ACtFZ_0(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_BYTE *)a1 + 4) == 1) {
    return ((uint64_t (*)(void))((char *)&loc_186F61644 + 4 * byte_186F8AFE8[v2]))();
  }
  if ((*(_BYTE *)(a2 + 4) & 1) != 0) {
    return 0LL;
  }
  return (_DWORD)v2 == *(_DWORD *)a2;
}

uint64_t sub_186F61670@<X0>(char a1@<W8>)
{
  if (v1 != 1) {
    a1 = 0;
  }
  if ((a1 & 1) == 0) {
    JUMPOUT(0x186F6165CLL);
  }
  return 1LL;
}

uint64_t sub_186F61684@<X0>(char a1@<W8>)
{
  if (v1 != 2) {
    a1 = 0;
  }
  if ((a1 & 1) == 0) {
    JUMPOUT(0x186F6165CLL);
  }
  return 1LL;
}

uint64_t sub_186F61698@<X0>(char a1@<W8>)
{
  if (v1 != 3) {
    a1 = 0;
  }
  if ((a1 & 1) == 0) {
    JUMPOUT(0x186F6165CLL);
  }
  return 1LL;
}

uint64_t sub_186F616AC@<X0>(char a1@<W8>)
{
  if (v1 != 4) {
    a1 = 0;
  }
  if ((a1 & 1) == 0) {
    JUMPOUT(0x186F6165CLL);
  }
  return 1LL;
}

uint64_t sub_186F616C0@<X0>(char a1@<W8>)
{
  if (v1 <= 4) {
    a1 = 0;
  }
  if ((a1 & 1) == 0) {
    JUMPOUT(0x186F6165CLL);
  }
  return 1LL;
}

unint64_t sub_186F616D8()
{
  unint64_t result = qword_18C6B1760;
  if (!qword_18C6B1760)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for CryptoKitError, &type metadata for CryptoKitError);
    atomic_store(result, (unint64_t *)&qword_18C6B1760);
  }

  return result;
}

unint64_t sub_186F61720()
{
  unint64_t result = qword_18C6B1768;
  if (!qword_18C6B1768)
  {
    unint64_t result = MEMORY[0x18959EFD8]( &protocol conformance descriptor for CryptoKitASN1Error,  &type metadata for CryptoKitASN1Error);
    atomic_store(result, (unint64_t *)&qword_18C6B1768);
  }

  return result;
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CryptoKitError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for CryptoKitError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 5) = v3;
  return result;
}

uint64_t sub_186F617C4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_186F617E0(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)unint64_t result = a2 - 1;
    *(_BYTE *)(result + 4) = 1;
  }

  else
  {
    *(_BYTE *)(result + 4) = 0;
  }

  return result;
}

ValueMetadata *type metadata accessor for CryptoKitError()
{
  return &type metadata for CryptoKitError;
}

uint64_t getEnumTagSinglePayload for CryptoKitASN1Error(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

uint64_t storeEnumTagSinglePayload for CryptoKitASN1Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_186F618EC + 4 * byte_186F8AFF3[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_186F61920 + 4 * byte_186F8AFEE[v4]))();
}

uint64_t sub_186F61920(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F61928(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x186F61930LL);
  }
  return result;
}

uint64_t sub_186F6193C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x186F61944LL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_186F61948(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F61950(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CryptoKitASN1Error()
{
  return &type metadata for CryptoKitASN1Error;
}

uint64_t Curve25519.KeyAgreement.PublicKey.rawRepresentation.getter()
{
  uint64_t v0 = sub_186F87CDC();
  uint64_t v1 = sub_186F3A07C(v0);
  swift_bridgeObjectRelease();
  return v1;
}

unint64_t sub_186F619B4@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_186F41EA4(0x20uLL);
  *a1 = result;
  return result;
}

unint64_t Curve25519.KeyAgreement.PrivateKey.init()@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_186F41EA4(0x20uLL);
  *a1 = result;
  return result;
}

uint64_t Curve25519.KeyAgreement.PublicKey.init<A>(rawRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = sub_186F6F0F4();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  if (!v3) {
    *a3 = v7;
  }
  return result;
}

size_t Curve25519.KeyAgreement.PrivateKey.publicKey.getter@<X0>(size_t *a1@<X8>)
{
  size_t result = sub_186F6FD10();
  *a1 = result;
  return result;
}

uint64_t Curve25519.KeyAgreement.PrivateKey.init<A>(rawRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = sub_186F6F088();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  if (!v3) {
    *a3 = v7;
  }
  return result;
}

uint64_t Curve25519.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)@<X0>( uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *v2;
  swift_retain();
  sub_186F87CDC();
  unint64_t v7 = sub_186F42004(0x20uLL, v6, v5);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v3) {
    *a2 = v7;
  }
  return result;
}

uint64_t Curve25519.KeyAgreement.PrivateKey.rawRepresentation.getter()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = sub_186F41BA4(v0);
  swift_release();
  return v1;
}

size_t sub_186F61BD4@<X0>(size_t *a1@<X8>)
{
  size_t result = sub_186F6FD10();
  *a1 = result;
  return result;
}

uint64_t sub_186F61BFC@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *v2;
  swift_retain();
  sub_186F87CDC();
  unint64_t v7 = sub_186F42004(0x20uLL, v6, v5);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v3) {
    *a2 = v7;
  }
  return result;
}

ValueMetadata *type metadata accessor for Curve25519.KeyAgreement()
{
  return &type metadata for Curve25519.KeyAgreement;
}

ValueMetadata *type metadata accessor for Curve25519.KeyAgreement.PublicKey()
{
  return &type metadata for Curve25519.KeyAgreement.PublicKey;
}

ValueMetadata *type metadata accessor for Curve25519.KeyAgreement.PrivateKey()
{
  return &type metadata for Curve25519.KeyAgreement.PrivateKey;
}

uint64_t sub_186F61CA4()
{
  uint64_t result = sub_186F3895C(6514035LL, 0xE300000000000000LL);
  qword_18C6B1790 = result;
  *(void *)algn_18C6B1798 = v1;
  return result;
}

uint64_t HPKE.Sender.encapsulatedKey.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  sub_186F33D20(v1, *(void *)(v0 + 72));
  return v1;
}

uint64_t HPKE.Sender.exportSecret<A>(context:outputByteCount:)@<X0>(uint64_t a1@<X1>, size_t *a2@<X8>)
{
  if (a1 < 1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v3 = a1;
    unint64_t v7 = a2;
    uint64_t v4 = *(char *)(v2 + 40);
    uint64_t v5 = *(unsigned __int8 *)(v2 + 41);
    uint64_t v6 = *(char *)(v2 + 42);
    uint64_t v28 = *(void *)(v2 + 32);
    uint64_t v8 = qword_18C6B06A8;
    swift_retain();
    if (v8 == -1)
    {
      if (!(v3 >> 16)) {
        goto LABEL_4;
      }
LABEL_8:
      __break(1u);
      goto LABEL_9;
    }
  }

  swift_once();
  if (v3 >> 16) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v25 = v7;
  if (qword_18C6B0670 != -1) {
LABEL_9:
  }
    swift_once();
  uint64_t v26 = qword_18C6B0CF0;
  unint64_t v27 = *(void *)algn_18C6B0CF8;
  uint64_t v9 = qword_186F8B230[v4];
  sub_186F33D20(qword_18C6B0CF0, *(unint64_t *)algn_18C6B0CF8);
  sub_186F5ADA0(v9, 2LL);
  uint64_t v11 = v10;
  unint64_t v13 = v12;
  sub_186F87AC0();
  sub_186F33C98(v11, v13);
  sub_186F5ADA0(v5 + 1, 2LL);
  uint64_t v15 = v14;
  unint64_t v17 = v16;
  sub_186F87AC0();
  sub_186F33C98(v15, v17);
  sub_186F5ADA0(qword_186F8B250[v6], 2LL);
  uint64_t v19 = v18;
  unint64_t v21 = v20;
  sub_186F87AC0();
  sub_186F33C98(v19, v21);
  uint64_t v22 = v26;
  unint64_t v23 = v27;
  LOBYTE(v26) = v5;
  sub_186F63E88(&v28, v3, (unsigned __int8 *)&v26, v25);
  sub_186F33C98(v22, v23);
  return swift_release();
}

uint64_t HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v13 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v15 = (uint64_t *)((char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  char v17 = *((_BYTE *)v16 + 2);
  __int16 v34 = *v16;
  char v35 = v17;
  uint64_t v27 = 0LL;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v18);
  sub_186F4D218((char *)&v34, 0, &v27, 0LL, 0xF000000000000000LL, v15, a2, a3, v28, a4, a5);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(a1, a4);
  if (!v6)
  {
    uint64_t v20 = v29;
    __int16 v21 = v30;
    char v22 = v31;
    uint64_t v23 = v32;
    unint64_t v24 = v33;
    __int128 v25 = v28[1];
    *(_OWORD *)a6 = v28[0];
    *(_OWORD *)(a6 + 16) = v25;
    *(void *)(a6 + 32) = v20;
    *(_WORD *)(a6 + 40) = v21;
    *(_BYTE *)(a6 + 42) = v22;
    *(void *)(a6 + 48) = v23;
    *(void *)(a6 + 56) = v24;
    *(void *)(a6 + 64) = v23;
    *(void *)(a6 + 72) = v24;
    return sub_186F33D20(v23, v24);
  }

  return result;
}

uint64_t HPKE.Sender.init<A>(recipientKey:ciphersuite:info:presharedKey:presharedKeyIdentifier:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X5>, unint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8)
{
  unint64_t v31 = a5;
  uint64_t v14 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  unint64_t v16 = (uint64_t *)((char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  char v18 = *((_BYTE *)v17 + 2);
  uint64_t v20 = *v19;
  __int16 v40 = *v17;
  char v41 = v18;
  uint64_t v33 = v20;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v21);
  uint64_t v22 = v32;
  sub_186F4D218((char *)&v40, 1u, &v33, a4, v31, v16, a2, a3, v34, a6, a8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a6);
  if (!v22)
  {
    uint64_t v24 = v35;
    __int16 v25 = v36;
    char v26 = v37;
    uint64_t v27 = v38;
    unint64_t v28 = v39;
    __int128 v29 = v34[1];
    *(_OWORD *)a7 = v34[0];
    *(_OWORD *)(a7 + 16) = v29;
    *(void *)(a7 + 32) = v24;
    *(_WORD *)(a7 + 40) = v25;
    *(_BYTE *)(a7 + 42) = v26;
    *(void *)(a7 + 48) = v27;
    *(void *)(a7 + 56) = v28;
    *(void *)(a7 + 64) = v27;
    *(void *)(a7 + 72) = v28;
    return sub_186F33D20(v27, v28);
  }

  return result;
}

uint64_t HPKE.Sender.init<A>(recipientKey:ciphersuite:info:authenticatedBy:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _OWORD *a8@<X8>)
{
  unint64_t v35 = a4;
  uint64_t v33 = a1;
  uint64_t v34 = a3;
  uint64_t v32 = a8;
  uint64_t v12 = *(void *)(a6 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  char v18 = (char *)&v31 - v17;
  LOWORD(v17) = *(_WORD *)a2;
  char v19 = *(_BYTE *)(a2 + 2);
  uint64_t v20 = v33;
  __int16 v45 = v17;
  char v46 = v19;
  uint64_t v38 = 0LL;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v33, AssociatedTypeWitness);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v37 = a5;
  v21(v14, a5, a6);
  uint64_t v22 = v36;
  sub_186F4D5B0( (char *)&v45,  2u,  &v38,  0LL,  0xF000000000000000LL,  (uint64_t)v18,  v34,  v35,  (size_t *)v39,  (uint64_t)v14,  a6,  a7);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v37, a6);
  if (v22) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v20, AssociatedTypeWitness);
  }
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v20, AssociatedTypeWitness);
  uint64_t v24 = v40;
  __int16 v25 = v41;
  char v26 = v42;
  uint64_t v27 = v43;
  unint64_t v28 = v44;
  __int128 v29 = v39[1];
  uint64_t v30 = v32;
  *uint64_t v32 = v39[0];
  v30[1] = v29;
  *((void *)v30 + 4) = v24;
  *((_WORD *)v30 + 20) = v25;
  *((_BYTE *)v30 + 42) = v26;
  *((void *)v30 + 6) = v27;
  *((void *)v30 + 7) = v28;
  *((void *)v30 + 8) = v27;
  *((void *)v30 + 9) = v28;
  return sub_186F33D20(v27, v28);
}

uint64_t HPKE.Sender.init<A>(recipientKey:ciphersuite:info:authenticatedBy:presharedKey:presharedKeyIdentifier:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, _OWORD *a9@<X8>, uint64_t a10, uint64_t a11)
{
  unint64_t v39 = a8;
  uint64_t v37 = a7;
  unint64_t v38 = a4;
  __int16 v41 = a6;
  uint64_t v35 = a1;
  uint64_t v36 = a3;
  uint64_t v34 = a9;
  uint64_t v13 = *(void *)(a10 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  char v19 = (char *)&v33 - v18;
  LOWORD(v18) = *(_WORD *)a2;
  char v20 = *(_BYTE *)(a2 + 2);
  uint64_t v21 = v35;
  uint64_t v22 = *v41;
  __int16 v49 = v18;
  char v50 = v20;
  uint64_t v42 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v35, AssociatedTypeWitness);
  uint64_t v23 = *(void (**)(char *, uint64_t *, uint64_t))(v13 + 16);
  __int16 v41 = a5;
  v23(v15, a5, a10);
  uint64_t v24 = v40;
  sub_186F4D5B0((char *)&v49, 3u, &v42, v37, v39, (uint64_t)v19, v36, v38, (size_t *)v43, (uint64_t)v15, a10, a11);
  (*(void (**)(uint64_t *, uint64_t))(v13 + 8))(v41, a10);
  if (v24) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v21, AssociatedTypeWitness);
  }
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v21, AssociatedTypeWitness);
  uint64_t v26 = v44;
  __int16 v27 = v45;
  char v28 = v46;
  uint64_t v29 = v47;
  unint64_t v30 = v48;
  __int128 v31 = v43[1];
  uint64_t v32 = v34;
  *uint64_t v34 = v43[0];
  v32[1] = v31;
  *((void *)v32 + 4) = v26;
  *((_WORD *)v32 + 20) = v27;
  *((_BYTE *)v32 + 42) = v28;
  *((void *)v32 + 6) = v29;
  *((void *)v32 + 7) = v30;
  *((void *)v32 + 8) = v29;
  *((void *)v32 + 9) = v30;
  return sub_186F33D20(v29, v30);
}

uint64_t HPKE.Sender.seal<A, B>(_:authenticating:)(uint64_t a1, uint64_t a2)
{
  return sub_186F336FC(a1, a2);
}

uint64_t HPKE.Sender.seal<A>(_:)(uint64_t a1)
{
  __int128 v3 = xmmword_186F88B50;
  sub_186F44100();
  return sub_186F336FC(a1, (uint64_t)&v3);
}

uint64_t HPKE.Recipient.exportSecret<A>(context:outputByteCount:)@<X0>(uint64_t a1@<X1>, size_t *a2@<X8>)
{
  if (a1 < 1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v3 = a1;
    unint64_t v7 = a2;
    uint64_t v4 = *(char *)(v2 + 40);
    uint64_t v5 = *(unsigned __int8 *)(v2 + 41);
    uint64_t v6 = *(char *)(v2 + 42);
    uint64_t v26 = *(void *)(v2 + 32);
    uint64_t v8 = qword_18C6B06A8;
    swift_retain();
    if (v8 == -1)
    {
      if (!(v3 >> 16)) {
        goto LABEL_4;
      }
LABEL_8:
      __break(1u);
      goto LABEL_9;
    }
  }

  swift_once();
  if (v3 >> 16) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v24 = v7;
  if (qword_18C6B0670 != -1) {
LABEL_9:
  }
    swift_once();
  __int128 v25 = xmmword_18C6B0CF0;
  uint64_t v9 = qword_186F8B230[v4];
  sub_186F33D20(xmmword_18C6B0CF0, *((unint64_t *)&xmmword_18C6B0CF0 + 1));
  sub_186F5ADA0(v9, 2LL);
  uint64_t v11 = v10;
  unint64_t v13 = v12;
  sub_186F87AC0();
  sub_186F33C98(v11, v13);
  sub_186F5ADA0(v5 + 1, 2LL);
  uint64_t v15 = v14;
  unint64_t v17 = v16;
  sub_186F87AC0();
  sub_186F33C98(v15, v17);
  sub_186F5ADA0(qword_186F8B250[v6], 2LL);
  uint64_t v19 = v18;
  unint64_t v21 = v20;
  sub_186F87AC0();
  sub_186F33C98(v19, v21);
  __int128 v22 = v25;
  LOBYTE(v25) = v5;
  sub_186F63E88(&v26, v3, (unsigned __int8 *)&v25, v24);
  sub_186F33C98(v22, *((unint64_t *)&v22 + 1));
  return swift_release();
}

double HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:)@<D0>( uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unint64_t v33 = a6;
  unint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v30 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = sub_186F87DCC();
  uint64_t v16 = MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v30 - v17;
  uint64_t v19 = *(void *)(a7 - 8);
  MEMORY[0x1895F8858](v16);
  unint64_t v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v22 = *((_BYTE *)a2 + 2);
  __int16 v41 = *a2;
  char v42 = v22;
  uint64_t v35 = 0LL;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a1, a7);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v18,  1LL,  1LL,  AssociatedTypeWitness);
  uint64_t v23 = v34;
  sub_186F4DC00( (unsigned __int8 *)&v41,  0,  v32,  v33,  &v35,  0LL,  0xF000000000000000LL,  (size_t)v21,  (size_t *)v36,  v30,  v31,  v18,  a7,  a8);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a1, a7);
  if (!v23)
  {
    uint64_t v25 = v37;
    __int16 v26 = v38;
    char v27 = v39;
    double result = *(double *)v36;
    __int128 v28 = v36[1];
    __int128 v29 = v40;
    *(_OWORD *)a9 = v36[0];
    *(_OWORD *)(a9 + 16) = v28;
    *(void *)(a9 + 32) = v25;
    *(_WORD *)(a9 + 40) = v26;
    *(_BYTE *)(a9 + 42) = v27;
    *(_OWORD *)(a9 + 48) = v29;
  }

  return result;
}

double HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:presharedKey:presharedKeyIdentifier:)@<D0>( uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>, unint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v40 = a8;
  uint64_t v38 = a5;
  unint64_t v39 = a6;
  uint64_t v35 = a3;
  unint64_t v36 = a4;
  uint64_t v34 = a9;
  unint64_t v37 = a10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = sub_186F87DCC();
  uint64_t v17 = MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)&v33 - v18;
  uint64_t v20 = *(void *)(a11 - 8);
  MEMORY[0x1895F8858](v17);
  char v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v23 = *((_BYTE *)a2 + 2);
  uint64_t v24 = *a7;
  __int16 v48 = *a2;
  char v49 = v23;
  uint64_t v42 = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a1, a11);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v19,  1LL,  1LL,  AssociatedTypeWitness);
  uint64_t v25 = v41;
  sub_186F4DC00( (unsigned __int8 *)&v48,  1u,  v38,  v39,  &v42,  v40,  v37,  (size_t)v22,  (size_t *)v43,  v35,  v36,  v19,  a11,  a12);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a1, a11);
  if (!v25)
  {
    uint64_t v27 = v44;
    __int16 v28 = v45;
    char v29 = v46;
    double result = *(double *)v43;
    __int128 v30 = v43[1];
    __int128 v31 = v47;
    uint64_t v32 = v34;
    *uint64_t v34 = v43[0];
    v32[1] = v30;
    *((void *)v32 + 4) = v27;
    *((_WORD *)v32 + 20) = v28;
    *((_BYTE *)v32 + 42) = v29;
    void v32[3] = v31;
  }

  return result;
}

double HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:authenticatedBy:)@<D0>( uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>, uint64_t a10)
{
  unint64_t v36 = a6;
  unint64_t v34 = a4;
  uint64_t v35 = a5;
  uint64_t v32 = a9;
  uint64_t v33 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = sub_186F87DCC();
  uint64_t v16 = MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v32 - v17;
  uint64_t v19 = *(void *)(a8 - 8);
  MEMORY[0x1895F8858](v16);
  uint64_t v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v22 = *((_BYTE *)a2 + 2);
  __int16 v45 = *a2;
  char v46 = v22;
  uint64_t v38 = a1;
  uint64_t v39 = 0LL;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a1, a8);
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v23 + 16))(v18, a7, AssociatedTypeWitness);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v23 + 56))(v18, 0LL, 1LL, AssociatedTypeWitness);
  uint64_t v24 = v37;
  sub_186F4DC00( (unsigned __int8 *)&v45,  2u,  v35,  v36,  &v39,  0LL,  0xF000000000000000LL,  (size_t)v21,  (size_t *)v40,  v33,  v34,  v18,  a8,  a10);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a7, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v38, a8);
  if (!v24)
  {
    uint64_t v26 = v41;
    __int16 v27 = v42;
    char v28 = v43;
    double result = *(double *)v40;
    __int128 v29 = v40[1];
    __int128 v30 = v44;
    __int128 v31 = v32;
    *uint64_t v32 = v40[0];
    v31[1] = v29;
    *((void *)v31 + 4) = v26;
    *((_WORD *)v31 + 20) = v27;
    *((_BYTE *)v31 + 42) = v28;
    v31[3] = v30;
  }

  return result;
}

double HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:authenticatedBy:presharedKey:presharedKeyIdentifier:)@<D0>( uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, _OWORD *a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13)
{
  unint64_t v45 = a6;
  uint64_t v38 = a9;
  uint64_t v39 = a7;
  unint64_t v43 = a4;
  uint64_t v44 = a5;
  uint64_t v41 = a10;
  uint64_t v42 = a3;
  unint64_t v40 = a11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = sub_186F87DCC();
  uint64_t v18 = MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)&v37 - v19;
  uint64_t v21 = *(void *)(a12 - 8);
  MEMORY[0x1895F8858](v18);
  uint64_t v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v24 = *((_BYTE *)a2 + 2);
  uint64_t v25 = *a8;
  __int16 v54 = *a2;
  char v55 = v24;
  uint64_t v47 = a1;
  uint64_t v48 = v25;
  uint64_t v26 = a1;
  uint64_t v27 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v26, a12);
  uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v28 + 16))(v20, v27, AssociatedTypeWitness);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v28 + 56))(v20, 0LL, 1LL, AssociatedTypeWitness);
  uint64_t v29 = v46;
  sub_186F4DC00( (unsigned __int8 *)&v54,  3u,  v44,  v45,  &v48,  v41,  v40,  (size_t)v23,  (size_t *)v49,  v42,  v43,  v20,  a12,  a13);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v47, a12);
  if (!v29)
  {
    uint64_t v31 = v50;
    __int16 v32 = v51;
    char v33 = v52;
    double result = *(double *)v49;
    __int128 v34 = v49[1];
    __int128 v35 = v53;
    unint64_t v36 = v38;
    *uint64_t v38 = v49[0];
    v36[1] = v34;
    *((void *)v36 + 4) = v31;
    *((_WORD *)v36 + 20) = v32;
    *((_BYTE *)v36 + 42) = v33;
    v36[3] = v35;
  }

  return result;
}

uint64_t HPKE.Recipient.open<A, B>(_:authenticating:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_186F33A8C(a1, a2, a3, a4);
}

uint64_t HPKE.Recipient.open<A>(_:)(uint64_t a1, uint64_t a2)
{
  __int128 v5 = xmmword_186F88B50;
  sub_186F44100();
  return sub_186F33A8C(a1, (uint64_t)&v5, a2, MEMORY[0x189606D70]);
}

ValueMetadata *type metadata accessor for HPKE()
{
  return &type metadata for HPKE;
}

uint64_t destroy for HPKE.Sender(void *a1)
{
  unint64_t v2 = a1[3];
  if (v2 >> 60 != 15) {
    sub_186F33C98(a1[2], v2);
  }
  swift_release();
  sub_186F33C98(a1[6], a1[7]);
  return sub_186F33C98(a1[8], a1[9]);
}

uint64_t initializeWithCopy for HPKE.Sender(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  __int128 v5 = (_OWORD *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  swift_retain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }

  else
  {
    uint64_t v7 = *(void *)v5;
    sub_186F33D20(v7, v6);
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v6;
  }

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  uint64_t v8 = *(void *)(a2 + 48);
  unint64_t v9 = *(void *)(a2 + 56);
  swift_retain();
  sub_186F33D20(v8, v9);
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  uint64_t v11 = *(void *)(a2 + 64);
  unint64_t v10 = *(void *)(a2 + 72);
  sub_186F33D20(v11, v10);
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v10;
  return a1;
}

uint64_t assignWithCopy for HPKE.Sender(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) >> 60 != 15LL)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_186F33D20(*v4, *(void *)(a2 + 24));
      uint64_t v8 = *(void *)(a1 + 16);
      unint64_t v9 = *(void *)(a1 + 24);
      *(void *)(a1 + 16) = v7;
      *(void *)(a1 + 24) = v5;
      sub_186F33C98(v8, v9);
      goto LABEL_8;
    }

    sub_186F34214(a1 + 16);
    goto LABEL_6;
  }

  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
    goto LABEL_8;
  }

  uint64_t v6 = *v4;
  sub_186F33D20(*v4, *(void *)(a2 + 24));
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v5;
LABEL_8:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  uint64_t v10 = *(void *)(a2 + 48);
  unint64_t v11 = *(void *)(a2 + 56);
  sub_186F33D20(v10, v11);
  uint64_t v12 = *(void *)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  sub_186F33C98(v12, v13);
  uint64_t v15 = *(void *)(a2 + 64);
  unint64_t v14 = *(void *)(a2 + 72);
  sub_186F33D20(v15, v14);
  uint64_t v16 = *(void *)(a1 + 64);
  unint64_t v17 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = v15;
  *(void *)(a1 + 72) = v14;
  sub_186F33C98(v16, v17);
  return a1;
}

uint64_t assignWithTake for HPKE.Sender(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  unint64_t v5 = (void *)(a2 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 24);
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *v5;
      *(void *)(a1 + 24) = v7;
      sub_186F33C98(v8, v6);
      goto LABEL_6;
    }

    sub_186F34214(a1 + 16);
  }

  *(_OWORD *)(a1 + 16) = *(_OWORD *)v5;
LABEL_6:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  uint64_t v9 = *(void *)(a1 + 48);
  unint64_t v10 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_186F33C98(v9, v10);
  uint64_t v11 = *(void *)(a1 + 64);
  unint64_t v12 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_186F33C98(v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for HPKE.Sender(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HPKE.Sender(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for HPKE.Sender()
{
  return &type metadata for HPKE.Sender;
}

ValueMetadata *type metadata accessor for HPKE.Recipient()
{
  return &type metadata for HPKE.Recipient;
}

ValueMetadata *_s31CoreCryptoCurve448PublicKeyImplVMa()
{
  return &_s31CoreCryptoCurve448PublicKeyImplVN;
}

ValueMetadata *_s32CoreCryptoCurve448PrivateKeyImplVMa()
{
  return &_s32CoreCryptoCurve448PrivateKeyImplVN;
}

size_t sub_186F63348()
{
  uint64_t v0 = sub_186F87CE8();
  *(void *)(v0 + 16) = 57LL;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 73) = 0u;
  if (!ccrng()) {
LABEL_5:
  }
    __break(1u);
  if (cced448_make_pub())
  {
    __break(1u);
    goto LABEL_5;
  }

  uint64_t v1 = sub_186F87CDC();
  size_t v2 = sub_186F63618(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_186F63450(void *a1, void *a2, char **a3)
{
  if (!ccrng()) {
    goto LABEL_8;
  }
  if (!*a1) {
    goto LABEL_9;
  }
  unint64_t v6 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v6 = sub_186F3CB8C(0LL, *((void *)v6 + 2), 0, v6);
  }
  *a3 = v6;
  uint64_t result = cced448_make_key_pair();
  if ((_DWORD)result)
  {
    __break(1u);
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }

  *a2 = 57LL;
  return result;
}

uint64_t sub_186F63540(uint64_t result, uint64_t a2)
{
  if (!result || a2 - result != 57)
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v2 = 0;
    *(_BYTE *)(v2 + 4) = 1;
    return swift_willThrow();
  }

  return result;
}

size_t sub_186F635A4@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, size_t *a3@<X8>)
{
  if (a1 && a2 - a1 == 57)
  {
    size_t result = sub_186F4B3D0(a1, a2);
    *a3 = result;
  }

  else
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v5 = 0;
    *(_BYTE *)(v5 + 4) = 1;
    return swift_willThrow();
  }

  return result;
}

size_t sub_186F63618(uint64_t a1)
{
  if (*(void *)(a1 + 16) == 57LL) {
    return sub_186F4B3D0(a1 + 32, a1 + 89);
  }
  sub_186F35D6C();
  swift_allocError();
  *(_DWORD *)uint64_t v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return swift_willThrow();
}

uint64_t sub_186F6368C()
{
  uint64_t result = sub_186F879B8();
  if (!v0) {
    return sub_186F41B44();
  }
  return result;
}

uint64_t sub_186F636F8()
{
  uint64_t result = sub_186F879B8();
  if (!v0) {
    return v2;
  }
  return result;
}

int64_t sub_186F6376C@<X0>( int64_t result@<X0>, unint64_t a2@<X1>, char a3@<W3>, uint64_t *a4@<X8>)
{
  unint64_t v4 = a2;
  uint64_t v5 = result;
  uint64_t v46 = *MEMORY[0x1895F89C0];
  if (!a3)
  {
LABEL_5:
    sub_186F33D20(result, a2);
    sub_186F516FC(v5, v4);
    swift_beginAccess();
    uint64_t v13 = swift_retain();
    sub_186F76CC4(v13, &v41);
    uint64_t v14 = sub_186F87CB8();
    sub_186F53318(v14, v15);
    uint64_t v16 = v41;
    sub_186F4CA64((uint64_t)&v42);
    uint64_t v40 = v16;
    __int128 v30 = v42;
    __int128 v31 = v43;
    swift_retain();
    sub_186F53318((uint64_t)&v30, (uint64_t)&v32);
    swift_retain();
    sub_186F4CA64((uint64_t)&v35);
    swift_release();
    swift_release();
    swift_release_n();
    __int128 v28 = v35;
    __int128 v17 = v36;
    swift_release();
    sub_186F33C98(v5, v4);
    type metadata accessor for SecureBytes.Backing();
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_186F8B2D0;
    unint64_t v4 = v12 + 16;
    _swift_stdlib_malloc_size((const void *)v12);
    *(_OWORD *)(v12 + 32) = v28;
    *(_OWORD *)(v12 + 48) = v17;
    swift_beginAccess();
    *(void *)(v12 + 16) = 32LL;
    uint64_t result = _swift_stdlib_malloc_size((const void *)v12);
    if (result >= 64) {
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_7;
  }

  if (a3 == 1)
  {
    sub_186F33D20(result, a2);
    sub_186F516FC(v5, v4);
    swift_beginAccess();
    uint64_t v7 = swift_retain();
    sub_186F76970(v7, &v41);
    uint64_t v8 = sub_186F87CB8();
    sub_186F5330C(v8, v9);
    uint64_t v10 = v41;
    sub_186F4CAFC((uint64_t)&v42);
    uint64_t v40 = v10;
    __int128 v30 = v42;
    __int128 v31 = v43;
    __int128 v32 = v44;
    swift_retain();
    sub_186F5330C((uint64_t)&v30, (uint64_t)&v33);
    swift_retain();
    sub_186F4CAFC((uint64_t)&v35);
    swift_release();
    swift_release();
    swift_release_n();
    __int128 v25 = v36;
    __int128 v27 = v35;
    __int128 v11 = v37;
    swift_release();
    sub_186F33C98(v5, v4);
    type metadata accessor for SecureBytes.Backing();
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_186F8B2C0;
    unint64_t v4 = v12 + 16;
    _swift_stdlib_malloc_size((const void *)v12);
    *(_OWORD *)(v12 + 32) = v27;
    *(_OWORD *)(v12 + 48) = v25;
    *(_OWORD *)(v12 + 64) = v11;
    swift_beginAccess();
    *(void *)(v12 + 16) = 48LL;
    uint64_t result = _swift_stdlib_malloc_size((const void *)v12);
    if (result >= 80) {
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_5;
  }

BOOL sub_186F63C1C(uint64_t a1)
{
  uint64_t v1 = v8;
  if (v8)
  {
    sub_186F3A3A0(&v7, (uint64_t)v6);
    sub_186F33FC8((uint64_t)v6, (uint64_t)v5);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v5[3]);
    sub_186F879B8();
    uint64_t v2 = v9;
    unint64_t v3 = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
    sub_186F87AC0();
    sub_186F33C98(v2, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }

  return v1 == 0;
}

uint64_t sub_186F63CF4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, unsigned __int16 a4@<W5>, size_t *a5@<X8>, char a6)
{
  uint64_t v9 = a4;
  sub_186F5ADA0(a4, 2LL);
  uint64_t v18 = v10;
  unint64_t v19 = v11;
  if (qword_18C6B06B0 != -1) {
    swift_once();
  }
  sub_186F87AC0();
  sub_186F87AC0();
  sub_186F87AC0();
  sub_186F5D52C(a2, a3);
  uint64_t v13 = v18;
  unint64_t v12 = v19;
  if (a6)
  {
    sub_186F33D20(v18, v19);
    if (a6 == 1) {
      sub_186F74B34(a1, v19, v9, &v17);
    }
    else {
      sub_186F75124(a1, v19, v9, &v17);
    }
  }

  else
  {
    sub_186F33D20(v18, v19);
    sub_186F74578(a1, v19, v9, &v17);
  }

  size_t v14 = sub_186F515FC(v17);
  swift_release();
  sub_186F33C98(v13, v12);
  uint64_t result = sub_186F33C98(v13, v12);
  *a5 = v14;
  return result;
}

uint64_t sub_186F63E88@<X0>( uint64_t *a1@<X0>, unsigned __int16 a2@<W4>, unsigned __int8 *a3@<X7>, size_t *a4@<X8>)
{
  uint64_t v12 = *a1;
  int v4 = *a3;
  uint64_t v5 = a2;
  sub_186F5ADA0(a2, 2LL);
  uint64_t v15 = v6;
  unint64_t v16 = v7;
  if (qword_18C6B06B0 != -1) {
    swift_once();
  }
  sub_186F87AC0();
  sub_186F87AC0();
  sub_186F87AC0();
  sub_186F87AB4();
  uint64_t v9 = v15;
  unint64_t v8 = v16;
  if (v4)
  {
    sub_186F33D20(v15, v16);
    if (v4 == 1) {
      sub_186F74B34(v12, v16, v5, &v14);
    }
    else {
      sub_186F75124(v12, v16, v5, &v14);
    }
  }

  else
  {
    sub_186F33D20(v15, v16);
    sub_186F74578(v12, v16, v5, &v14);
  }

  size_t v10 = sub_186F515FC(v14);
  swift_release();
  sub_186F33C98(v9, v8);
  uint64_t result = sub_186F33C98(v9, v8);
  *a4 = v10;
  return result;
}

uint64_t sub_186F6402C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X5>, char *a5@<X6>, size_t *a6@<X8>)
{
  int v10 = *a4;
  char v11 = *a5;
  if (qword_18C6B06B8 != -1) {
    swift_once();
  }
  sub_186F33FC8(a1, (uint64_t)v18);
  if (qword_18C6B06B0 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_18C6B17A0;
  unint64_t v17 = *(void *)algn_18C6B17A8;
  sub_186F33D20(qword_18C6B17A0, *(unint64_t *)algn_18C6B17A8);
  sub_186F87AC0();
  sub_186F87AC0();
  sub_186F63C1C((uint64_t)v18);
  sub_186F33D20(v16, v17);
  sub_186F516FC(v16, v17);
  sub_186F33C98(v16, v17);
  sub_186F6376C(0LL, 0xC000000000000000LL, v11, &v19);
  swift_release();
  sub_186F33C98(v16, v17);
  sub_186F33ED4((uint64_t)v18);
  uint64_t v12 = v19;
  if (qword_18C6B06C0 != -1) {
    swift_once();
  }
  if (v10 == 2) {
    __int16 v13 = 64;
  }
  else {
    __int16 v13 = 32;
  }
  if (v10 == 1) {
    unsigned __int16 v14 = 48;
  }
  else {
    unsigned __int16 v14 = v13;
  }
  sub_186F63CF4(v12, a2, a3, v14, a6, v11);
  return swift_release();
}

uint64_t sub_186F64218()
{
  uint64_t result = sub_186F3895C(0x31762D454B5048LL, 0xE700000000000000LL);
  qword_18C6B17A0 = result;
  *(void *)algn_18C6B17A8 = v1;
  return result;
}

uint64_t sub_186F6424C()
{
  uint64_t result = sub_186F3895C(0x6B72705F656165LL, 0xE700000000000000LL);
  qword_18C6B17B0 = result;
  *(void *)algn_18C6B17B8 = v1;
  return result;
}

uint64_t sub_186F64280()
{
  uint64_t result = sub_186F3895C(0x735F646572616873LL, 0xED00007465726365LL);
  qword_18C6B17C0 = result;
  *(void *)algn_18C6B17C8 = v1;
  return result;
}

uint64_t sub_186F642C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v14[3] = MEMORY[0x1896181D0];
  void v14[4] = MEMORY[0x1896071B0];
  v14[0] = a1;
  v14[1] = a2;
  int v4 = __swift_project_boxed_opaque_existential_1(v14, MEMORY[0x1896181D0]);
  uint64_t v5 = (_BYTE *)*v4;
  if (*v4 && (uint64_t v6 = (_BYTE *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      uint64_t v8 = sub_186F6F884(v5, v6);
      unint64_t v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }

    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      uint64_t v8 = sub_186F39E84((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v13 | 0x8000000000000000LL;
    }

    else
    {
      uint64_t v8 = sub_186F39EFC((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v11 | 0x4000000000000000LL;
    }
  }

  else
  {
    uint64_t v8 = 0LL;
    unint64_t v9 = 0xC000000000000000LL;
  }

  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t sub_186F64388(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B5288);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_186F643D0()
{
  return v1;
}

unint64_t sub_186F6442C()
{
  unint64_t result = qword_18C6B17D0;
  if (!qword_18C6B17D0)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_18C4B52A8);
    unint64_t result = MEMORY[0x18959EFD8](MEMORY[0x189618F98], v1);
    atomic_store(result, (unint64_t *)&qword_18C6B17D0);
  }

  return result;
}

uint64_t P256.KeyAgreement.PrivateKey.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F64924(MEMORY[0x1895F9B10], (uint64_t (*)(uint64_t, void, uint64_t))sub_186F41EC0, a1);
}

uint64_t sub_186F6448C@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F649C8(MEMORY[0x1895F9B10], (uint64_t (*)(uint64_t, void, uint64_t))sub_186F41EC0, a1);
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(_:kem:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*v12)
  {
    sub_186F33CDC();
    swift_allocError();
    *uint64_t v13 = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a2);
    P256.KeyAgreement.PublicKey.init<A>(x963Representation:)((uint64_t)v11, a2, a3, &v16);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
    if (!v4) {
      *a4 = v16;
    }
  }

  return result;
}

uint64_t P256.KeyAgreement.PublicKey.hpkeRepresentation(kem:)(_BYTE *a1)
{
  if (*a1)
  {
    sub_186F33CDC();
    swift_allocError();
    *uint64_t v1 = 1;
    return swift_willThrow();
  }

  else
  {
    sub_186F87CDC();
    unint64_t v3 = ccec_export_pub_size();
    uint64_t v4 = sub_186F87CE8();
    *(void *)(v4 + 16) = v3;
    ccec_export_pub();
    *(void *)(v4 + 16) = v3;
    uint64_t v5 = sub_186F3A07C(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v5;
  }

uint64_t sub_186F64684@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  return P256.KeyAgreement.PublicKey.init<A>(_:kem:)(a1, a2, a3, a4);
}

uint64_t sub_186F646AC(_BYTE *a1)
{
  return P256.KeyAgreement.PublicKey.hpkeRepresentation(kem:)(a1);
}

uint64_t P384.KeyAgreement.PrivateKey.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F64924(MEMORY[0x1895F9B18], (uint64_t (*)(uint64_t, void, uint64_t))sub_186F41EDC, a1);
}

uint64_t sub_186F646D4@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F649C8(MEMORY[0x1895F9B18], (uint64_t (*)(uint64_t, void, uint64_t))sub_186F41EDC, a1);
}

uint64_t P384.KeyAgreement.PublicKey.init<A>(_:kem:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*v12 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a2);
    P384.KeyAgreement.PublicKey.init<A>(x963Representation:)((uint64_t)v11, a2, a3, &v16);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
    if (!v4) {
      *a4 = v16;
    }
  }

  else
  {
    sub_186F33CDC();
    swift_allocError();
    *unsigned __int16 v14 = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  }

  return result;
}

uint64_t P384.KeyAgreement.PublicKey.hpkeRepresentation(kem:)(_BYTE *a1)
{
  if (*a1 == 1)
  {
    sub_186F87CDC();
    unint64_t v1 = ccec_export_pub_size();
    uint64_t v2 = sub_186F87CE8();
    *(void *)(v2 + 16) = v1;
    ccec_export_pub();
    *(void *)(v2 + 16) = v1;
    uint64_t v3 = sub_186F3A07C(v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v3;
  }

  else
  {
    sub_186F33CDC();
    swift_allocError();
    *uint64_t v5 = 1;
    return swift_willThrow();
  }

uint64_t sub_186F648D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  return P384.KeyAgreement.PublicKey.init<A>(_:kem:)(a1, a2, a3, a4);
}

uint64_t sub_186F648FC(_BYTE *a1)
{
  return P384.KeyAgreement.PublicKey.hpkeRepresentation(kem:)(a1);
}

uint64_t P521.KeyAgreement.PrivateKey.init()@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F64924(MEMORY[0x1895F9B20], (uint64_t (*)(uint64_t, void, uint64_t))sub_186F41EF8, a1);
}

uint64_t sub_186F64924@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(uint64_t, void, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a1();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
    swift_dynamicCast();
    uint64_t v6 = getccec_full_ctx_size();
    uint64_t result = a2(v6, 0LL, v6);
    *a3 = result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_186F649B4@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F649C8(MEMORY[0x1895F9B20], (uint64_t (*)(uint64_t, void, uint64_t))sub_186F41EF8, a1);
}

uint64_t sub_186F649C8@<X0>( uint64_t (*a1)(void)@<X2>, uint64_t (*a2)(uint64_t, void, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = a1();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
    swift_dynamicCast();
    uint64_t v6 = getccec_full_ctx_size();
    uint64_t result = a2(v6, 0LL, v6);
    *a3 = result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t P521.KeyAgreement.PublicKey.init<A>(_:kem:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*v12 == 2)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a2);
    P521.KeyAgreement.PublicKey.init<A>(x963Representation:)((uint64_t)v11, a2, a3, &v16);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
    if (!v4) {
      *a4 = v16;
    }
  }

  else
  {
    sub_186F33CDC();
    swift_allocError();
    *unsigned __int16 v14 = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  }

  return result;
}

uint64_t P521.KeyAgreement.PublicKey.hpkeRepresentation(kem:)(_BYTE *a1)
{
  if (*a1 == 2)
  {
    sub_186F87CDC();
    unint64_t v1 = ccec_export_pub_size();
    uint64_t v2 = sub_186F87CE8();
    *(void *)(v2 + 16) = v1;
    ccec_export_pub();
    *(void *)(v2 + 16) = v1;
    uint64_t v3 = sub_186F3A07C(v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v3;
  }

  else
  {
    sub_186F33CDC();
    swift_allocError();
    *uint64_t v5 = 1;
    return swift_willThrow();
  }

uint64_t sub_186F64C44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  return P521.KeyAgreement.PublicKey.init<A>(_:kem:)(a1, a2, a3, a4);
}

uint64_t sub_186F64C6C(_BYTE *a1)
{
  return P521.KeyAgreement.PublicKey.hpkeRepresentation(kem:)(a1);
}

_UNKNOWN **sub_186F64C80()
{
  return &protocol witness table for P256.KeyAgreement.PublicKey;
}

_UNKNOWN **sub_186F64C8C()
{
  return &protocol witness table for P256.KeyAgreement.PrivateKey;
}

_UNKNOWN **sub_186F64C98()
{
  return &protocol witness table for P384.KeyAgreement.PublicKey;
}

_UNKNOWN **sub_186F64CA4()
{
  return &protocol witness table for P384.KeyAgreement.PrivateKey;
}

_UNKNOWN **sub_186F64CB0()
{
  return &protocol witness table for P521.KeyAgreement.PublicKey;
}

_UNKNOWN **sub_186F64CBC()
{
  return &protocol witness table for P521.KeyAgreement.PrivateKey;
}

ValueMetadata *type metadata accessor for ASN1()
{
  return &type metadata for ASN1;
}

uint64_t destroy for ASN1.ASN1Node(uint64_t a1)
{
  return j__swift_unknownObjectRelease( *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 48));
}

uint64_t initializeWithCopy for ASN1.ASN1Node(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(unsigned __int8 *)(a2 + 48);
  j__swift_unknownObjectRetain(v3, v4, v5, v6, v7, v8);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = v8;
  return a1;
}

uint64_t assignWithCopy for ASN1.ASN1Node(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(unsigned __int8 *)(a2 + 48);
  j__swift_unknownObjectRetain(v3, v4, v5, v6, v7, v8);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(unsigned __int8 *)(a1 + 48);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = v8;
  j__swift_unknownObjectRelease(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for ASN1.ASN1Node(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 40);
  char v4 = *(_BYTE *)(a2 + 48);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 48);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v3;
  *(_BYTE *)(a1 + 48) = v4;
  j__swift_unknownObjectRelease(v5, v7, v6, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1.ASN1Node(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1.ASN1Node(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 49) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 49) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 48) = -(char)a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ASN1.ASN1Node()
{
  return &type metadata for ASN1.ASN1Node;
}

uint64_t destroy for ASN1.ASN1Node.Content(uint64_t a1)
{
  return j__swift_unknownObjectRelease( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 40));
}

uint64_t initializeWithCopy for ASN1.ASN1Node.Content(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = *((unsigned __int8 *)a2 + 40);
  j__swift_unknownObjectRetain(*a2, v4, v5, v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return a1;
}

uint64_t *assignWithCopy for ASN1.ASN1Node.Content(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = *((unsigned __int8 *)a2 + 40);
  j__swift_unknownObjectRetain(*a2, v4, v5, v6, v7, v8);
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v14 = *((unsigned __int8 *)a1 + 40);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  *((_BYTE *)a1 + 40) = v8;
  j__swift_unknownObjectRelease(v9, v10, v11, v12, v13, v14);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for ASN1.ASN1Node.Content(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(_BYTE *)(a2 + 40);
  uint64_t v5 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = *((unsigned __int8 *)a1 + 40);
  __int128 v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v11;
  a1[4] = v3;
  *((_BYTE *)a1 + 40) = v4;
  j__swift_unknownObjectRelease(v5, v7, v6, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1.ASN1Node.Content(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1.ASN1Node.Content( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 41) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 41) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 40) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_186F65118(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_186F65120(uint64_t result, char a2)
{
  *(_BYTE *)(result + 40) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ASN1.ASN1Node.Content()
{
  return &type metadata for ASN1.ASN1Node.Content;
}

unint64_t sub_186F65140()
{
  unint64_t result = qword_18C6B18E8;
  if (!qword_18C6B18E8)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F8B518, &type metadata for ASN1.ASN1NodeCollection.Iterator);
    atomic_store(result, (unint64_t *)&qword_18C6B18E8);
  }

  return result;
}

void sub_186F65184(uint64_t a1@<X8>)
{
  int64_t v3 = v1[2];
  unint64_t v4 = v1[3];
  if (v3 == v4 >> 1)
  {
    unsigned int v5 = 0;
    uint64_t v6 = 0LL;
    __int128 v7 = 0uLL;
    char v8 = -1;
    __int128 v9 = 0uLL;
LABEL_9:
    *(void *)a1 = v5;
    *(_OWORD *)(a1 + 8) = v7;
    *(_OWORD *)(a1 + 24) = v9;
    *(void *)(a1 + 40) = v6;
    *(_BYTE *)(a1 + 48) = v8;
    return;
  }

  if (v3 >= (uint64_t)(v4 >> 1))
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v10 = *v1;
  uint64_t v11 = v1[1];
  uint64_t v12 = (unsigned __int8 *)(v11 + 48 * v3);
  unsigned int v5 = *v12;
  uint64_t v13 = *((void *)v12 + 1);
  __int128 v14 = *((_OWORD *)v12 + 1);
  __int128 v15 = *((_OWORD *)v12 + 2);
  int64_t v16 = v3 + 1;
  v1[2] = v3 + 1;
  if ((v5 & 0x20) != 0)
  {
    sub_186F6B98C(v10, v11, v3 + 1, v4, v13);
    uint64_t v21 = v20;
    uint64_t v22 = (v19 >> 1) - v18;
    if (!__OFSUB__(v19 >> 1, v18))
    {
      uint64_t v23 = v18;
      unint64_t v24 = v19;
      uint64_t v33 = v17;
      uint64_t v25 = v11;
      uint64_t v26 = v21;
      *unint64_t v1 = sub_186F5E5B4(v22, v10, v25, v16, v4);
      v1[1] = v27;
      v1[2] = v28;
      v1[3] = v29;
      sub_186F6B048(v26, v33, v23, v24, v13, v35);
      __int128 v31 = v35[1];
      __int128 v34 = v35[0];
      uint64_t v6 = v36;
      swift_unknownObjectRetain();
      __int128 v9 = v31;
      __int128 v7 = v34;
      char v8 = 0;
      goto LABEL_9;
    }

    goto LABEL_11;
  }

  __int128 v30 = v15;
  __int128 v32 = v14;
  if ((void)v14)
  {
    swift_unknownObjectRetain();
    uint64_t v6 = 0LL;
    char v8 = 1;
    __int128 v9 = v30;
    __int128 v7 = v32;
    goto LABEL_9;
  }

uint64_t sub_186F652F4()
{
  uint64_t v0 = sub_186F87E80();
  uint64_t result = sub_186F87F28();
  uint64_t v2 = v0 - result;
  if (__OFSUB__(v0, result))
  {
    __break(1u);
  }

  else
  {
    BOOL v3 = __OFADD__(v2, 7LL);
    uint64_t v4 = v2 + 7;
    if (!v3) {
      return v4 / 8;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_186F6535C()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3] >> 1;
  if (v1 == v2)
  {
    int v3 = 0;
  }

  else
  {
    if (v1 >= v2)
    {
      __break(1u);
      return result;
    }

    int v3 = *(unsigned __int8 *)(v0[1] + v1);
    v0[2] = v1 + 1;
  }

  return v3 | ((v1 == v2) << 8);
}

void sub_186F653A4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void *sub_186F653F8()
{
  uint64_t v3 = v0;
  __int16 v4 = v1;
  char v5 = BYTE2(v1);
  char v6 = BYTE3(v1);
  char v7 = BYTE4(v1);
  char v8 = BYTE5(v1);
  return sub_186F418B8(&v3, BYTE6(v1));
}

uint64_t sub_186F655A8(uint64_t a1, unint64_t a2, char a3)
{
  if (v8 != 255)
  {
    __int128 v9 = v7[0];
    __int128 v10 = v7[1];
    __int128 v11 = v7[2];
    unsigned __int8 v12 = v8;
    if (a2 <= 0x1E) {
      __asm { BR              X12 }
    }

    __break(1u);
    JUMPOUT(0x186F65890LL);
  }

  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return 1LL;
}

uint64_t sub_186F658A8(uint64_t a1, unint64_t a2, char a3)
{
  return sub_186F658E0(a1, a2, a3);
}

uint64_t sub_186F658C4(uint64_t a1, unint64_t a2, char a3)
{
  return sub_186F658E0(a1, a2, a3);
}

uint64_t sub_186F658E0(uint64_t a1, unint64_t a2, char a3)
{
  if (v8 != 255)
  {
    __int128 v9 = v7[0];
    __int128 v10 = v7[1];
    __int128 v11 = v7[2];
    unsigned __int8 v12 = v8;
    if (a2 <= 0x1E) {
      __asm { BR              X12 }
    }

    __break(1u);
    JUMPOUT(0x186F65C1CLL);
  }

  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return 1LL;
}

uint64_t sub_186F65C34(uint64_t a1, unint64_t a2, char a3)
{
  if (v8 != 255)
  {
    __int128 v9 = v7[0];
    __int128 v10 = v7[1];
    __int128 v11 = v7[2];
    unsigned __int8 v12 = v8;
    if (a2 <= 0x1E) {
      __asm { BR              X12 }
    }

    __break(1u);
    JUMPOUT(0x186F65FF8LL);
  }

  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return 1LL;
}

uint64_t sub_186F66010(uint64_t a1, unint64_t a2, char a3)
{
  if (v8 != 255)
  {
    __int128 v9 = v7[0];
    __int128 v10 = v7[1];
    __int128 v11 = v7[2];
    unsigned __int8 v12 = v8;
    if (a2 <= 0x1E) {
      __asm { BR              X12 }
    }

    __break(1u);
    JUMPOUT(0x186F6633CLL);
  }

  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return 0LL;
}

uint64_t sub_186F66354(uint64_t a1, unint64_t a2, char a3)
{
  if (v8 != 255)
  {
    __int128 v9 = v7[0];
    __int128 v10 = v7[1];
    __int128 v11 = v7[2];
    unsigned __int8 v12 = v8;
    if (a2 <= 0x1E) {
      __asm { BR              X12 }
    }

    __break(1u);
    JUMPOUT(0x186F666D8LL);
  }

  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return 0LL;
}

uint64_t sub_186F666F0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_186F667B8()
{
  if (!v0[2])
  {
    sub_186F88000();
    return sub_186F88018();
  }

  uint64_t v1 = v0[4];
  unint64_t v2 = v0[5];
  uint64_t v3 = v0[3];
  sub_186F88000();
  unint64_t v4 = v2 >> 1;
  uint64_t result = (v2 >> 1) - v1;
  if (__OFSUB__(v2 >> 1, v1))
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t result = sub_186F87FF4();
  BOOL v6 = __OFSUB__(v4, v1);
  uint64_t v7 = v4 - v1;
  if (!v7) {
    return sub_186F88018();
  }
  if (!((v7 < 0) ^ v6 | (v7 == 0)))
  {
    uint64_t v8 = v3 + v1;
    do
    {
      ++v8;
      sub_186F88000();
      --v7;
    }

    while (v7);
    return sub_186F88018();
  }

uint64_t sub_186F66884()
{
  return sub_186F667B8();
}

uint64_t sub_186F668BC()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  unint64_t v4 = v0[5];
  sub_186F88000();
  sub_186F87FF4();
  if (!v1) {
    return sub_186F88000();
  }
  sub_186F88000();
  unint64_t v5 = v4 >> 1;
  uint64_t result = (v4 >> 1) - v3;
  if (__OFSUB__(v4 >> 1, v3))
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t result = sub_186F87FF4();
  BOOL v7 = __OFSUB__(v5, v3);
  uint64_t v8 = v5 - v3;
  if (!v8) {
    return result;
  }
  if ((v8 < 0) ^ v7 | (v8 == 0))
  {
LABEL_11:
    __break(1u);
    return result;
  }

  uint64_t v9 = v2 + v3;
  do
  {
    ++v9;
    uint64_t result = sub_186F88000();
    --v8;
  }

  while (v8);
  return result;
}

uint64_t sub_186F66958()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  unint64_t v4 = v0[5];
  sub_186F87FDC();
  sub_186F88000();
  sub_186F87FF4();
  if (!v1)
  {
    sub_186F88000();
    return sub_186F88018();
  }

  sub_186F88000();
  unint64_t v5 = v4 >> 1;
  uint64_t result = (v4 >> 1) - v3;
  if (__OFSUB__(v4 >> 1, v3))
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t result = sub_186F87FF4();
  BOOL v7 = __OFSUB__(v5, v3);
  uint64_t v8 = v5 - v3;
  if (!v8) {
    return sub_186F88018();
  }
  if (!((v8 < 0) ^ v7 | (v8 == 0)))
  {
    uint64_t v9 = v2 + v3;
    do
    {
      ++v9;
      sub_186F88000();
      --v8;
    }

    while (v8);
    return sub_186F88018();
  }

BOOL sub_186F66A24(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  __int128 v3 = *a2;
  __int128 v4 = a2[1];
  void v7[2] = a1[2];
  v8[0] = v3;
  __int128 v5 = a2[2];
  v8[1] = v4;
  _OWORD v8[2] = v5;
  return sub_186F6B0D8(v7, v8);
}

uint64_t sub_186F66A68()
{
  v3[0] = 0LL;
  v3[1] = 0xE000000000000000LL;
  sub_186F87EEC();
  sub_186F87BEC();
  sub_186F666F0();
  sub_186F87BEC();
  v3[0] = *(void *)(v0 + 8);
  sub_186F87F58();
  sub_186F87BEC();
  swift_bridgeObjectRelease();
  sub_186F87BEC();
  sub_186F36734(v0 + 16, (uint64_t)v2, &qword_18C6B1900);
  uint64_t result = sub_186F36734((uint64_t)v2, (uint64_t)v3, &qword_18C6B1900);
  if (v3[0] && __OFSUB__(v3[3] >> 1, v3[2]))
  {
    __break(1u);
  }

  else
  {
    sub_186F87F58();
    sub_186F87BEC();
    swift_bridgeObjectRelease();
    sub_186F87BEC();
    return 0LL;
  }

  return result;
}

uint64_t sub_186F66BE0()
{
  return sub_186F66A68();
}

char *sub_186F66C18(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v10 = a4;
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v9 = a3;
  swift_unknownObjectRetain();
  __int128 v11 = sub_186F3CEBC(0LL, 16LL, 0, MEMORY[0x18961AFE8]);
  sub_186F66D0C((char *)v8, 1LL, &v11);
  uint64_t result = (char *)v8[0];
  if (v5) {
    goto LABEL_6;
  }
  if (!__OFSUB__(v10 >> 1, v9))
  {
    if (v10 >> 1 == v9)
    {
      __int128 v4 = v11;
      swift_unknownObjectRelease();
      return v4;
    }

    sub_186F36690();
    swift_allocError();
    *BOOL v7 = 3;
    swift_willThrow();
LABEL_6:
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return v4;
  }

  __break(1u);
  return result;
}

void sub_186F66D0C(char *a1, uint64_t a2, char **a3)
{
  if (a2 > 10) {
    goto LABEL_2;
  }
  __int16 v9 = sub_186F6535C();
  if ((v9 & 0x100) != 0) {
    goto LABEL_16;
  }
  char v10 = v9;
  if ((~v9 & 0x1F) == 0)
  {
    sub_186F36690();
    swift_allocError();
    *__int128 v11 = 0;
LABEL_18:
    swift_willThrow();
    return;
  }

  sub_186F67058();
  if (v3) {
    return;
  }
  if ((v13 & 1) != 0)
  {
LABEL_16:
    sub_186F36690();
    swift_allocError();
    char v5 = 5;
    goto LABEL_17;
  }

  uint64_t v14 = v12;
  if (v12 < 0)
  {
LABEL_2:
    sub_186F36690();
    swift_allocError();
    char v5 = 3;
LABEL_17:
    *__int128 v4 = v5;
    goto LABEL_18;
  }

  uint64_t v15 = *(void *)a1;
  unint64_t v40 = *((void *)a1 + 1);
  unint64_t v35 = *((void *)a1 + 3);
  int64_t v36 = *((void *)a1 + 2);
  uint64_t v16 = sub_186F5D4B0(v12, v15, v40, v36, v35);
  uint64_t v18 = v17;
  unint64_t v20 = v19;
  uint64_t v33 = v21;
  unint64_t v34 = v16;
  v37[0] = v16;
  v37[1] = v21;
  uint64_t v38 = v17;
  unint64_t v39 = v19;
  *(void *)a1 = sub_186F5E5B4(v14, v15, v40, v36, v35);
  *((void *)a1 + 1) = v22;
  *((void *)a1 + 2) = v23;
  *((void *)a1 + 3) = v24;
  unint64_t v40 = v20;
  if (__OFSUB__(v20 >> 1, v18)) {
    goto LABEL_32;
  }
  if ((v20 >> 1) - v18 == v14)
  {
    uint64_t v15 = v18;
    a1 = *a3;
    swift_unknownObjectRetain();
    if ((v10 & 0x20) == 0)
    {
      unint64_t v20 = v34;
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_13:
        uint64_t v25 = v33;
        unint64_t v27 = *((void *)a1 + 2);
        unint64_t v26 = *((void *)a1 + 3);
        if (v27 >= v26 >> 1)
        {
          __int128 v32 = sub_186F3CEBC((char *)(v26 > 1), v27 + 1, 1, a1);
          uint64_t v25 = v33;
          a1 = v32;
        }

        *((void *)a1 + 2) = v27 + 1;
        uint64_t v28 = &a1[48 * v27];
        v28[32] = v10;
        *((void *)v28 + 5) = a2;
        *((void *)v28 + 6) = v20;
        *((void *)v28 + 7) = v25;
        *((void *)v28 + 8) = v15;
        *((void *)v28 + 9) = v40;
        swift_unknownObjectRelease();
        *a3 = a1;
        return;
      }

void sub_186F67058()
{
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  int64_t v4 = v3 >> 1;
  if (v2 == v3 >> 1) {
    return;
  }
  if (v2 >= v4)
  {
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v5 = *v0;
  uint64_t v6 = v0[1];
  int v7 = *(unsigned __int8 *)(v6 + v2);
  int64_t v8 = v2 + 1;
  v0[2] = v2 + 1;
  if (v7 == 128)
  {
    sub_186F36690();
    swift_allocError();
    *__int16 v9 = 6;
    swift_willThrow();
    return;
  }

  if ((v7 & 0x80) != 0)
  {
    BOOL v10 = __OFSUB__(v4, v8);
    int64_t v11 = v4 - v8;
    if (!v10)
    {
      unint64_t v12 = v7 & 0x7F;
      if (v11 >= (uint64_t)v12)
      {
        sub_186F5D4B0(v7 & 0x7F, v5, v6, v2 + 1, v3);
        uint64_t v24 = v13;
        uint64_t v15 = v14;
        unint64_t v23 = v16;
        *uint64_t v0 = sub_186F5E5B4(v12, v5, v6, v8, v3);
        v0[1] = v17;
        v0[2] = v18;
        v0[3] = v19;
        swift_unknownObjectRetain();
        uint64_t v20 = swift_unknownObjectRetain();
        sub_186F703E8(v20, v24, v15, v23);
        if (!v1 && (v21 <= 0x7F || v12 > (71 - __clz(v21)) >> 3))
        {
          sub_186F36690();
          swift_allocError();
          *uint64_t v22 = 6;
          swift_willThrow();
        }

        swift_unknownObjectRelease();
      }

      return;
    }

uint64_t sub_186F67218()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  sub_186F87FDC();
  sub_186F6B89C((uint64_t)v5, v1, v2, v3);
  return sub_186F88018();
}

uint64_t sub_186F67270(uint64_t a1)
{
  return sub_186F6B89C(a1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_186F6727C()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  sub_186F87FDC();
  sub_186F6B89C((uint64_t)v5, v1, v2, v3);
  return sub_186F88018();
}

uint64_t sub_186F672D0(uint64_t a1, uint64_t a2)
{
  return sub_186F3AFFC( *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a2 + 8),  *(void *)(a2 + 16),  *(void *)(a2 + 24));
}

uint64_t sub_186F672EC@<X0>(uint64_t a1@<X8>)
{
  return sub_186F36734((uint64_t)v3, a1, &qword_18C4B5298);
}

__n128 sub_186F6732C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  __n128 result = *(__n128 *)v1;
  __int128 v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v2;
  return result;
}

uint64_t sub_186F67340()
{
  uint64_t v1 = sub_186F6B1A0(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_186F67378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186F699FC(a1, a2, a3);
}

unint64_t sub_186F673B4()
{
  unint64_t result = qword_18C6B18F0;
  if (!qword_18C6B18F0)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F8B548, &type metadata for ASN1.ASN1ParseResult);
    atomic_store(result, (unint64_t *)&qword_18C6B18F0);
  }

  return result;
}

unint64_t sub_186F673FC()
{
  unint64_t result = qword_18C6B18F8;
  if (!qword_18C6B18F8)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F8B5D8, &type metadata for ASN1.ASN1ParserNode);
    atomic_store(result, (unint64_t *)&qword_18C6B18F8);
  }

  return result;
}

uint64_t sub_186F67440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186F5CCB4( a3,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
}

uint64_t sub_186F67478(char a1, char **a2, char *a3)
{
  unint64_t v5 = v3;
  __int16 v9 = *a2;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_186F3CB8C(0LL, *((void *)v9 + 2) + 1LL, 1, v9);
    __int16 v9 = (char *)isUniquelyReferenced_nonNull_native;
  }

  unint64_t v12 = *((void *)v9 + 2);
  unint64_t v11 = *((void *)v9 + 3);
  int64_t v13 = v11 >> 1;
  uint64_t v14 = v12 + 1;
  if (v11 >> 1 <= v12)
  {
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_186F3CB8C((char *)(v11 > 1), v12 + 1, 1, v9);
    __int16 v9 = (char *)isUniquelyReferenced_nonNull_native;
    unint64_t v11 = *(void *)(isUniquelyReferenced_nonNull_native + 24);
    int64_t v13 = v11 >> 1;
  }

  *((void *)v9 + 2) = v14;
  v9[v12 + 32] = a1;
  unint64_t v15 = v12 + 2;
  if (v13 < (uint64_t)v15)
  {
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_186F3CB8C((char *)(v11 > 1), v15, 1, v9);
    __int16 v9 = (char *)isUniquelyReferenced_nonNull_native;
  }

  *((void *)v9 + 2) = v15;
  v9[v14 + 32] = 0;
  *a2 = v9;
  unint64_t v16 = v15 - 1;
  if (__OFSUB__(v15, 1LL))
  {
    __break(1u);
    goto LABEL_38;
  }

  uint64_t v17 = *(void *)a3;
  MEMORY[0x1895F8858](isUniquelyReferenced_nonNull_native);
  _OWORD v24[2] = v17;
  sub_186F6BBA4(6, a2, (uint64_t (*)(char **))sub_186F363E4, (uint64_t)v24);
  if (*((void *)a3 + 1))
  {
    uint64_t v14 = *((void *)a3 + 3);
    unint64_t v18 = *((void *)a3 + 4);
    uint64_t v19 = *((void *)a3 + 2);
    uint64_t v20 = swift_unknownObjectRetain();
    sub_186F87654(v20, v19, v14, v18);
    swift_unknownObjectRelease();
  }

  a3 = *a2;
  unint64_t v21 = *((void *)*a2 + 2);
  unint64_t v4 = v21 - v15;
  if ((uint64_t)(v21 - v15) >= 128)
  {
    if (v21 >= v15)
    {
      v24[5] = v5;
      unint64_t v5 = 71 - __clz(v4);
      uint64_t v14 = v5 >> 3;
      sub_186F69140(v5 >> 3, v15, v21);
      a3 = *a2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_13:
        if (v16 < *((void *)a3 + 2))
        {
          uint64_t v22 = a3 + 32;
          a3[v16 + 32] = (v5 >> 3) | 0x80;
          *a2 = a3;
          if (v15 >= *((void *)a3 + 2)) {
            goto LABEL_35;
          }
          v22[v15] = v4 >> (8 * ((v14 - 1) & 7));
          if (v14 == 1) {
            goto LABEL_34;
          }
          if (v15 + 1 >= *((void *)a3 + 2)) {
            goto LABEL_35;
          }
          v22[v15 + 1] = v4 >> (8 * ((v14 - 2) & 7));
          if (v14 == 2) {
            goto LABEL_34;
          }
          if (v15 + 2 >= *((void *)a3 + 2)) {
            goto LABEL_35;
          }
          v22[v15 + 2] = v4 >> (8 * ((v14 - 3) & 7));
          if (v14 == 3) {
            goto LABEL_34;
          }
          if (v15 + 3 >= *((void *)a3 + 2)) {
            goto LABEL_35;
          }
          v22[v15 + 3] = v4 >> (8 * ((v14 - 4) & 7));
          if (v14 == 4) {
            goto LABEL_34;
          }
          if (v15 + 4 >= *((void *)a3 + 2)) {
            goto LABEL_35;
          }
          v22[v15 + 4] = v4 >> (8 * ((v14 - 5) & 7));
          if (v14 == 5) {
            goto LABEL_34;
          }
          if (v15 + 5 >= *((void *)a3 + 2)) {
            goto LABEL_35;
          }
          v22[v15 + 5] = v4 >> (8 * ((v14 - 6) & 7));
          if (v14 == 6) {
            goto LABEL_34;
          }
          if (v15 + 6 >= *((void *)a3 + 2)) {
            goto LABEL_35;
          }
          v22[v15 + 6] = v4 >> (8 * ((v14 - 7) & 7));
          if (v14 == 7) {
            goto LABEL_34;
          }
          if (v15 + 7 >= *((void *)a3 + 2))
          {
LABEL_35:
            __break(1u);
            goto LABEL_34;
          }

          v22[v15 + 7] = v4 >> (v5 & 0x38);
LABEL_34:
          swift_bridgeObjectRelease();
          uint64_t result = swift_unknownObjectRelease();
          *a2 = a3;
          return result;
        }

        __break(1u);
        goto LABEL_41;
      }

LABEL_39:
      a3 = sub_186F52EB0((uint64_t)a3);
      goto LABEL_13;
    }

  __break(1u);
  return result;
}

LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  if ((v4 & 0x8000000000000000LL) == 0)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0) {
      goto LABEL_32;
    }
    goto LABEL_42;
  }

LABEL_41:
  __break(1u);
LABEL_42:
  uint64_t result = (uint64_t)sub_186F52EB0((uint64_t)a3);
  a3 = (char *)result;
LABEL_32:
  if (v16 < *((void *)a3 + 2))
  {
    a3[v16 + 32] = v4;
    goto LABEL_34;
  }

  __break(1u);
  return result;
}

uint64_t sub_186F67800(unint64_t a1, char **a2)
{
  uint64_t v6 = *a2;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_36;
  }
  while (1)
  {
    unint64_t v9 = *((void *)v6 + 2);
    unint64_t v8 = *((void *)v6 + 3);
    int64_t v10 = v8 >> 1;
    unint64_t v11 = v9 + 1;
    if (v8 >> 1 <= v9)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_186F3CB8C((char *)(v8 > 1), v9 + 1, 1, v6);
      uint64_t v6 = (char *)isUniquelyReferenced_nonNull_native;
      unint64_t v8 = *(void *)(isUniquelyReferenced_nonNull_native + 24);
      int64_t v10 = v8 >> 1;
    }

    *((void *)v6 + 2) = v11;
    v6[v9 + 32] = a1;
    unint64_t v12 = v9 + 2;
    if (v10 < (uint64_t)v12)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_186F3CB8C((char *)(v8 > 1), v12, 1, v6);
      uint64_t v6 = (char *)isUniquelyReferenced_nonNull_native;
    }

    *((void *)v6 + 2) = v12;
    v6[v11 + 32] = 0;
    *a2 = v6;
    unint64_t v13 = v12 - 1;
    if (__OFSUB__(v12, 1LL))
    {
      __break(1u);
    }

    else if (qword_18C6B0610 == -1)
    {
      goto LABEL_8;
    }

    uint64_t isUniquelyReferenced_nonNull_native = swift_once();
LABEL_8:
    MEMORY[0x1895F8858](isUniquelyReferenced_nonNull_native);
    void v19[2] = v14;
    sub_186F6BBA4(6, a2, (uint64_t (*)(char **))sub_186F36A30, (uint64_t)v19);
    uint64_t result = sub_186F67B68(48, a2);
    if (v2) {
      return result;
    }
    uint64_t v6 = *a2;
    unint64_t v16 = *((void *)*a2 + 2);
    unint64_t v17 = v16 - v12;
    if (v16 < v12)
    {
      __break(1u);
    }

    else
    {
      unint64_t v3 = 71 - __clz(v17);
      a1 = v3 >> 3;
      sub_186F69140(v3 >> 3, v12, v16);
      uint64_t v6 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0) {
        goto LABEL_12;
      }
    }

    uint64_t result = (uint64_t)sub_186F52EB0((uint64_t)v6);
    uint64_t v6 = (char *)result;
LABEL_12:
    if (v13 >= *((void *)v6 + 2))
    {
      __break(1u);
      goto LABEL_42;
    }

    unint64_t v18 = v6 + 32;
    v6[v13 + 32] = (v3 >> 3) | 0x80;
    *a2 = v6;
    if (v12 < *((void *)v6 + 2))
    {
      v18[v12] = v17 >> (8 * ((a1 - 1) & 7));
      if (a1 == 1) {
        goto LABEL_33;
      }
      if (v12 + 1 < *((void *)v6 + 2))
      {
        v18[v12 + 1] = v17 >> (8 * ((a1 - 2) & 7));
        if (a1 == 2) {
          goto LABEL_33;
        }
        if (v12 + 2 < *((void *)v6 + 2))
        {
          v18[v12 + 2] = v17 >> (8 * ((a1 - 3) & 7));
          if (a1 == 3) {
            goto LABEL_33;
          }
          if (v12 + 3 < *((void *)v6 + 2))
          {
            v18[v12 + 3] = v17 >> (8 * ((a1 - 4) & 7));
            if (a1 == 4) {
              goto LABEL_33;
            }
            if (v12 + 4 < *((void *)v6 + 2))
            {
              v18[v12 + 4] = v17 >> (8 * ((a1 - 5) & 7));
              if (a1 == 5) {
                goto LABEL_33;
              }
              if (v12 + 5 < *((void *)v6 + 2))
              {
                v18[v12 + 5] = v17 >> (8 * ((a1 - 6) & 7));
                if (a1 == 6) {
                  goto LABEL_33;
                }
                if (v12 + 6 < *((void *)v6 + 2))
                {
                  v18[v12 + 6] = v17 >> (8 * ((a1 - 7) & 7));
                  if (a1 == 7) {
                    goto LABEL_33;
                  }
                  if (v12 + 7 < *((void *)v6 + 2))
                  {
                    v18[v12 + 7] = v17 >> (v3 & 0x38);
LABEL_33:
                    *a2 = v6;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }

    __break(1u);
LABEL_36:
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_186F3CB8C(0LL, *((void *)v6 + 2) + 1LL, 1, v6);
    uint64_t v6 = (char *)isUniquelyReferenced_nonNull_native;
  }

  if ((v17 & 0x8000000000000000LL) != 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0) {
    goto LABEL_31;
  }
LABEL_43:
  uint64_t result = (uint64_t)sub_186F52EB0((uint64_t)v6);
  uint64_t v6 = (char *)result;
LABEL_31:
  if (v13 < *((void *)v6 + 2))
  {
    v6[v13 + 32] = v17;
    goto LABEL_33;
  }

  __break(1u);
  return result;
}

uint64_t sub_186F67B68(char a1, char **a2)
{
  uint64_t v6 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = sub_186F3CB8C(0LL, *((void *)v6 + 2) + 1LL, 1, v6);
  }
  unint64_t v8 = *((void *)v6 + 2);
  unint64_t v7 = *((void *)v6 + 3);
  int64_t v9 = v7 >> 1;
  unint64_t v10 = v8 + 1;
  if (v7 >> 1 <= v8)
  {
    uint64_t v6 = sub_186F3CB8C((char *)(v7 > 1), v8 + 1, 1, v6);
    unint64_t v7 = *((void *)v6 + 3);
    int64_t v9 = v7 >> 1;
  }

  *((void *)v6 + 2) = v10;
  v6[v8 + 32] = a1;
  unint64_t v11 = (char *)(v8 + 2);
  *((void *)v6 + 2) = v11;
  v6[v10 + 32] = 0;
  *a2 = v6;
  unint64_t v12 = v8 + 1;
  if (__OFSUB__(v11, 1LL))
  {
    __break(1u);
    goto LABEL_36;
  }

  uint64_t result = sub_186F67EA4(160, a2, (uint64_t (*)(uint64_t, char **))sub_186F684D8);
  if (!v2)
  {
    sub_186F67EA4(161, a2, (uint64_t (*)(uint64_t, char **))sub_186F68830);
    sub_186F681A0(0xA2uLL, a2);
    uint64_t v6 = *a2;
    unint64_t v14 = *((void *)*a2 + 2);
    unint64_t v8 = v14 - (void)v11;
    if ((uint64_t)(v14 - (void)v11) <= 127)
    {
      if ((v8 & 0x8000000000000000LL) != 0) {
        goto LABEL_38;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0) {
        goto LABEL_32;
      }
    }

    else
    {
      unint64_t v3 = 71 - __clz(v8);
      uint64_t v6 = (char *)(v3 >> 3);
      sub_186F69140(v3 >> 3, (uint64_t)v11, v14);
      unint64_t v11 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        goto LABEL_39;
      }
      while (v12 < *((void *)v11 + 2))
      {
        unint64_t v15 = v11 + 32;
        v11[v12 + 32] = (v3 >> 3) | 0x80;
        *a2 = v11;
        if (v12 + 1 < *((void *)v11 + 2))
        {
          v15[v12 + 1] = v8 >> (8 * (((_BYTE)v6 - 1) & 7u));
          if (v12 + 2 < *((void *)v11 + 2))
          {
            v15[v12 + 2] = v8 >> (8 * (((_BYTE)v6 - 2) & 7u));
            if (v12 + 3 < *((void *)v11 + 2))
            {
              v15[v12 + 3] = v8 >> (8 * (((_BYTE)v6 - 3) & 7u));
              if (v12 + 4 < *((void *)v11 + 2))
              {
                v15[v12 + 4] = v8 >> (8 * (((_BYTE)v6 - 4) & 7u));
                if (v12 + 5 < *((void *)v11 + 2))
                {
                  v15[v12 + 5] = v8 >> (8 * (((_BYTE)v6 - 5) & 7u));
                  if (v12 + 6 < *((void *)v11 + 2))
                  {
                    v15[v12 + 6] = v8 >> (8 * (((_BYTE)v6 - 6) & 7u));
                    if (v12 + 7 < *((void *)v11 + 2))
                    {
                      v15[v12 + 7] = v8 >> (8 * (((_BYTE)v6 - 7) & 7u));
                      if (v12 + 8 < *((void *)v11 + 2))
                      {
                        v15[v12 + 8] = v8 >> (v3 & 0x38);
LABEL_29:
                        *a2 = v11;
                        return result;
                      }
                    }
                  }
                }
              }
            }
          }
        }

LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        uint64_t result = (uint64_t)sub_186F52EB0((uint64_t)v11);
        unint64_t v11 = (char *)result;
      }

      __break(1u);
    }

    uint64_t result = (uint64_t)sub_186F52EB0((uint64_t)v6);
    uint64_t v6 = (char *)result;
LABEL_32:
    if (v12 >= *((void *)v6 + 2))
    {
      __break(1u);
    }

    else
    {
      v6[v12 + 32] = v8;
      *a2 = v6;
    }
  }

  return result;
}

uint64_t sub_186F67EA4(char a1, char **a2, uint64_t (*a3)(uint64_t, char **))
{
  uint64_t v6 = v3;
  LOBYTE(v8) = a1;
  int64_t v9 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_35;
  }
  while (1)
  {
    unint64_t v11 = *((void *)v9 + 2);
    unint64_t v10 = *((void *)v9 + 3);
    int64_t v12 = v10 >> 1;
    unint64_t v13 = v11 + 1;
    if (v10 >> 1 <= v11)
    {
      int64_t v9 = sub_186F3CB8C((char *)(v10 > 1), v11 + 1, 1, v9);
      unint64_t v10 = *((void *)v9 + 3);
      int64_t v12 = v10 >> 1;
    }

    *((void *)v9 + 2) = v13;
    v9[v11 + 32] = v8;
    unint64_t v8 = v11 + 2;
    *((void *)v9 + 2) = v8;
    v9[v13 + 32] = 0;
    *a2 = v9;
    unint64_t v14 = v11 + 1;
    if (__OFSUB__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_37;
    }

    uint64_t result = a3(48LL, a2);
    a3 = (uint64_t (*)(uint64_t, char **))v6;
    if (v6) {
      return result;
    }
    uint64_t v6 = (uint64_t)*a2;
    unint64_t v16 = *((void *)*a2 + 2);
    unint64_t v11 = v16 - v8;
    if (v16 >= v8)
    {
      unint64_t v4 = 71 - __clz(v11);
      int64_t v9 = (char *)(v4 >> 3);
      sub_186F69140(v4 >> 3, v8, v16);
      uint64_t v6 = (uint64_t)*a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0) {
        goto LABEL_11;
      }
      goto LABEL_38;
    }

LABEL_37:
    __break(1u);
LABEL_38:
    uint64_t result = (uint64_t)sub_186F52EB0(v6);
    uint64_t v6 = result;
LABEL_11:
    if (v14 >= *(void *)(v6 + 16))
    {
      __break(1u);
      goto LABEL_40;
    }

    uint64_t v17 = v6 + 32;
    *(_BYTE *)(v6 + 32 + v14) = (v4 >> 3) | 0x80;
    *a2 = (char *)v6;
    if (v8 < *(void *)(v6 + 16))
    {
      *(_BYTE *)(v17 + v8) = v11 >> (8 * (((_BYTE)v9 - 1) & 7u));
      if (v8 + 1 < *(void *)(v6 + 16))
      {
        *(_BYTE *)(v17 + v8 + 1) = v11 >> (8 * (((_BYTE)v9 - 2) & 7u));
        if (v8 + 2 < *(void *)(v6 + 16))
        {
          *(_BYTE *)(v17 + v8 + 2) = v11 >> (8 * (((_BYTE)v9 - 3) & 7u));
          if (v8 + 3 < *(void *)(v6 + 16))
          {
            *(_BYTE *)(v17 + v8 + 3) = v11 >> (8 * (((_BYTE)v9 - 4) & 7u));
            if (v8 + 4 < *(void *)(v6 + 16))
            {
              *(_BYTE *)(v17 + v8 + 4) = v11 >> (8 * (((_BYTE)v9 - 5) & 7u));
              if (v8 + 5 < *(void *)(v6 + 16))
              {
                *(_BYTE *)(v17 + v8 + 5) = v11 >> (8 * (((_BYTE)v9 - 6) & 7u));
                if (v8 + 6 < *(void *)(v6 + 16))
                {
                  *(_BYTE *)(v17 + v8 + 6) = v11 >> (8 * (((_BYTE)v9 - 7) & 7u));
                  if (v8 + 7 < *(void *)(v6 + 16))
                  {
                    *(_BYTE *)(v17 + v8 + 7) = v11 >> (v4 & 0x38);
LABEL_32:
                    *a2 = (char *)v6;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }

    __break(1u);
LABEL_35:
    int64_t v9 = sub_186F3CB8C(0LL, *((void *)v9 + 2) + 1LL, 1, v9);
  }

  if ((v11 & 0x8000000000000000LL) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0) {
    goto LABEL_30;
  }
LABEL_41:
  uint64_t result = (uint64_t)sub_186F52EB0(v6);
  uint64_t v6 = result;
LABEL_30:
  if (v14 < *(void *)(v6 + 16))
  {
    *(_BYTE *)(v6 + v14 + 32) = v11;
    goto LABEL_32;
  }

  __break(1u);
  return result;
}

    __break(1u);
LABEL_38:
    uint64_t result = (uint64_t)sub_186F52EB0(a3);
    a3 = result;
LABEL_11:
    if ((unint64_t)v9 >= *(void *)(a3 + 16))
    {
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v16 = a3 + 32;
    v9[a3 + 32] = (v11 >> 3) | 0x80;
    *unint64_t v5 = (char *)a3;
    if (v8 < *(void *)(a3 + 16))
    {
      *(_BYTE *)(v16 + v8) = v13 >> (8 * (((_BYTE)a2 - 1) & 7u));
      if (v8 + 1 < *(void *)(a3 + 16))
      {
        *(_BYTE *)(v16 + v8 + 1) = v13 >> (8 * (((_BYTE)a2 - 2) & 7u));
        if (v8 + 2 < *(void *)(a3 + 16))
        {
          *(_BYTE *)(v16 + v8 + 2) = v13 >> (8 * (((_BYTE)a2 - 3) & 7u));
          if (v8 + 3 < *(void *)(a3 + 16))
          {
            *(_BYTE *)(v16 + v8 + 3) = v13 >> (8 * (((_BYTE)a2 - 4) & 7u));
            if (v8 + 4 < *(void *)(a3 + 16))
            {
              *(_BYTE *)(v16 + v8 + 4) = v13 >> (8 * (((_BYTE)a2 - 5) & 7u));
              if (v8 + 5 < *(void *)(a3 + 16))
              {
                *(_BYTE *)(v16 + v8 + 5) = v13 >> (8 * (((_BYTE)a2 - 6) & 7u));
                if (v8 + 6 < *(void *)(a3 + 16))
                {
                  *(_BYTE *)(v16 + v8 + 6) = v13 >> (8 * (((_BYTE)a2 - 7) & 7u));
                  if (v8 + 7 < *(void *)(a3 + 16))
                  {
                    *(_BYTE *)(v16 + v8 + 7) = v13 >> (v11 & 0x38);
LABEL_32:
                    *unint64_t v5 = (char *)a3;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }

    __break(1u);
LABEL_35:
    int64_t v9 = sub_186F3CB8C(0LL, *((void *)v9 + 2) + 1LL, 1, v9);
  }

  if ((v13 & 0x8000000000000000LL) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0) {
    goto LABEL_30;
  }
LABEL_41:
  uint64_t result = (uint64_t)sub_186F52EB0(a3);
  a3 = result;
LABEL_30:
  if ((unint64_t)v9 < *(void *)(a3 + 16))
  {
    v9[a3 + 32] = v13;
    goto LABEL_32;
  }

  __break(1u);
  return result;
}

      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
    }
  }

  return result;
}

    __break(1u);
LABEL_38:
    uint64_t result = (uint64_t)sub_186F52EB0(a3);
    a3 = result;
LABEL_11:
    if (v13 >= *(void *)(a3 + 16))
    {
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v16 = a3 + 32;
    *(_BYTE *)(a3 + 32 + v13) = (v4 >> 3) | 0x80;
    *(void *)a2 = a3;
    if (v7 < *(void *)(a3 + 16))
    {
      *(_BYTE *)(v16 + v7) = v10 >> (8 * (((_BYTE)v8 - 1) & 7u));
      if (v7 + 1 < *(void *)(a3 + 16))
      {
        *(_BYTE *)(v16 + v7 + 1) = v10 >> (8 * (((_BYTE)v8 - 2) & 7u));
        if (v7 + 2 < *(void *)(a3 + 16))
        {
          *(_BYTE *)(v16 + v7 + 2) = v10 >> (8 * (((_BYTE)v8 - 3) & 7u));
          if (v7 + 3 < *(void *)(a3 + 16))
          {
            *(_BYTE *)(v16 + v7 + 3) = v10 >> (8 * (((_BYTE)v8 - 4) & 7u));
            if (v7 + 4 < *(void *)(a3 + 16))
            {
              *(_BYTE *)(v16 + v7 + 4) = v10 >> (8 * (((_BYTE)v8 - 5) & 7u));
              if (v7 + 5 < *(void *)(a3 + 16))
              {
                *(_BYTE *)(v16 + v7 + 5) = v10 >> (8 * (((_BYTE)v8 - 6) & 7u));
                if (v7 + 6 < *(void *)(a3 + 16))
                {
                  *(_BYTE *)(v16 + v7 + 6) = v10 >> (8 * (((_BYTE)v8 - 7) & 7u));
                  if (v7 + 7 < *(void *)(a3 + 16))
                  {
                    *(_BYTE *)(v16 + v7 + 7) = v10 >> (v4 & 0x38);
LABEL_32:
                    *(void *)a2 = a3;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }

    __break(1u);
LABEL_35:
    unint64_t v8 = sub_186F3CB8C(0LL, *((void *)v8 + 2) + 1LL, 1, v8);
  }

  if ((v10 & 0x8000000000000000LL) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0) {
    goto LABEL_30;
  }
LABEL_41:
  uint64_t result = (uint64_t)sub_186F52EB0(a3);
  a3 = result;
LABEL_30:
  if (v13 < *(void *)(a3 + 16))
  {
    *(_BYTE *)(a3 + v13 + 32) = v10;
    goto LABEL_32;
  }

  __break(1u);
  return result;
}

    __break(1u);
LABEL_38:
    uint64_t result = (uint64_t)sub_186F52EB0(a4);
    a4 = result;
LABEL_11:
    if ((unint64_t)v9 >= *(void *)(a4 + 16))
    {
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v16 = a4 + 32;
    v9[a4 + 32] = (v11 >> 3) | 0x80;
    *a2 = (char *)a4;
    if (v8 < *(void *)(a4 + 16))
    {
      *(_BYTE *)(v16 + v8) = v13 >> (8 * (((_BYTE)a3 - 1) & 7u));
      if (v8 + 1 < *(void *)(a4 + 16))
      {
        *(_BYTE *)(v16 + v8 + 1) = v13 >> (8 * (((_BYTE)a3 - 2) & 7u));
        if (v8 + 2 < *(void *)(a4 + 16))
        {
          *(_BYTE *)(v16 + v8 + 2) = v13 >> (8 * (((_BYTE)a3 - 3) & 7u));
          if (v8 + 3 < *(void *)(a4 + 16))
          {
            *(_BYTE *)(v16 + v8 + 3) = v13 >> (8 * (((_BYTE)a3 - 4) & 7u));
            if (v8 + 4 < *(void *)(a4 + 16))
            {
              *(_BYTE *)(v16 + v8 + 4) = v13 >> (8 * (((_BYTE)a3 - 5) & 7u));
              if (v8 + 5 < *(void *)(a4 + 16))
              {
                *(_BYTE *)(v16 + v8 + 5) = v13 >> (8 * (((_BYTE)a3 - 6) & 7u));
                if (v8 + 6 < *(void *)(a4 + 16))
                {
                  *(_BYTE *)(v16 + v8 + 6) = v13 >> (8 * (((_BYTE)a3 - 7) & 7u));
                  if (v8 + 7 < *(void *)(a4 + 16))
                  {
                    *(_BYTE *)(v16 + v8 + 7) = v13 >> (v11 & 0x38);
LABEL_32:
                    *a2 = (char *)a4;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }

    __break(1u);
LABEL_35:
    int64_t v9 = sub_186F3CB8C(0LL, *((void *)v9 + 2) + 1LL, 1, v9);
  }

  if ((v13 & 0x8000000000000000LL) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0) {
    goto LABEL_30;
  }
LABEL_41:
  uint64_t result = (uint64_t)sub_186F52EB0(a4);
  a4 = result;
LABEL_30:
  if ((unint64_t)v9 < *(void *)(a4 + 16))
  {
    v9[a4 + 32] = v13;
    goto LABEL_32;
  }

  __break(1u);
  return result;
}

    __break(1u);
LABEL_38:
    uint64_t result = (uint64_t)sub_186F52EB0((uint64_t)a3);
    a3 = (char *)result;
LABEL_11:
    if (v13 >= *((void *)a3 + 2))
    {
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v16 = a3 + 32;
    a3[v13 + 32] = (v4 >> 3) | 0x80;
    *a2 = a3;
    if (v7 < *((void *)a3 + 2))
    {
      v16[v7] = v10 >> (8 * (((_BYTE)v8 - 1) & 7u));
      if (v7 + 1 < *((void *)a3 + 2))
      {
        v16[v7 + 1] = v10 >> (8 * (((_BYTE)v8 - 2) & 7u));
        if (v7 + 2 < *((void *)a3 + 2))
        {
          v16[v7 + 2] = v10 >> (8 * (((_BYTE)v8 - 3) & 7u));
          if (v7 + 3 < *((void *)a3 + 2))
          {
            v16[v7 + 3] = v10 >> (8 * (((_BYTE)v8 - 4) & 7u));
            if (v7 + 4 < *((void *)a3 + 2))
            {
              v16[v7 + 4] = v10 >> (8 * (((_BYTE)v8 - 5) & 7u));
              if (v7 + 5 < *((void *)a3 + 2))
              {
                v16[v7 + 5] = v10 >> (8 * (((_BYTE)v8 - 6) & 7u));
                if (v7 + 6 < *((void *)a3 + 2))
                {
                  v16[v7 + 6] = v10 >> (8 * (((_BYTE)v8 - 7) & 7u));
                  if (v7 + 7 < *((void *)a3 + 2))
                  {
                    v16[v7 + 7] = v10 >> (v4 & 0x38);
LABEL_32:
                    *a2 = a3;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }

    __break(1u);
LABEL_35:
    unint64_t v8 = sub_186F3CB8C(0LL, *((void *)v8 + 2) + 1LL, 1, v8);
  }

  if ((v10 & 0x8000000000000000LL) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0) {
    goto LABEL_30;
  }
LABEL_41:
  uint64_t result = (uint64_t)sub_186F52EB0((uint64_t)a3);
  a3 = (char *)result;
LABEL_30:
  if (v13 < *((void *)a3 + 2))
  {
    a3[v13 + 32] = v10;
    goto LABEL_32;
  }

  __break(1u);
  return result;
}

    __break(1u);
LABEL_38:
    uint64_t result = (uint64_t)sub_186F52EB0((uint64_t)a4);
    a4 = (char *)result;
LABEL_11:
    if (v14 >= *((void *)a4 + 2))
    {
      __break(1u);
      goto LABEL_40;
    }

    uint64_t v22 = a4 + 32;
    a4[v14 + 32] = (v11 >> 3) | 0x80;
    *a2 = a4;
    if (v8 < *((void *)a4 + 2))
    {
      v22[v8] = v9 >> (8 * ((a3 - 1) & 7));
      if (a3 == 1) {
        goto LABEL_32;
      }
      if (v8 + 1 < *((void *)a4 + 2))
      {
        v22[v8 + 1] = v9 >> (8 * ((a3 - 2) & 7));
        if (a3 == 2) {
          goto LABEL_32;
        }
        if (v8 + 2 < *((void *)a4 + 2))
        {
          v22[v8 + 2] = v9 >> (8 * ((a3 - 3) & 7));
          if (a3 == 3) {
            goto LABEL_32;
          }
          if (v8 + 3 < *((void *)a4 + 2))
          {
            v22[v8 + 3] = v9 >> (8 * ((a3 - 4) & 7));
            if (a3 == 4) {
              goto LABEL_32;
            }
            if (v8 + 4 < *((void *)a4 + 2))
            {
              v22[v8 + 4] = v9 >> (8 * ((a3 - 5) & 7));
              if (a3 == 5) {
                goto LABEL_32;
              }
              if (v8 + 5 < *((void *)a4 + 2))
              {
                v22[v8 + 5] = v9 >> (8 * ((a3 - 6) & 7));
                if (a3 == 6) {
                  goto LABEL_32;
                }
                if (v8 + 6 < *((void *)a4 + 2))
                {
                  v22[v8 + 6] = v9 >> (8 * ((a3 - 7) & 7));
                  if (a3 == 7) {
                    goto LABEL_32;
                  }
                  if (v8 + 7 < *((void *)a4 + 2))
                  {
                    v22[v8 + 7] = v9 >> (v11 & 0x38);
LABEL_32:
                    *a2 = a4;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }

    __break(1u);
LABEL_35:
    int64_t v9 = (unint64_t)sub_186F3CB8C(0LL, *(void *)(v9 + 16) + 1LL, 1, (char *)v9);
  }

  if ((v9 & 0x8000000000000000LL) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0) {
    goto LABEL_30;
  }
LABEL_41:
  uint64_t result = (uint64_t)sub_186F52EB0((uint64_t)a4);
  a4 = (char *)result;
LABEL_30:
  if (v14 < *((void *)a4 + 2))
  {
    a4[v14 + 32] = v9;
    goto LABEL_32;
  }

  __break(1u);
  return result;
}

    __break(1u);
LABEL_38:
    uint64_t result = (uint64_t)sub_186F52EB0((uint64_t)a3);
    a3 = (char *)result;
LABEL_11:
    if (v13 >= *((void *)a3 + 2))
    {
      __break(1u);
      goto LABEL_40;
    }

    uint64_t v19 = a3 + 32;
    a3[v13 + 32] = (v4 >> 3) | 0x80;
    *a2 = a3;
    if (v7 < *((void *)a3 + 2))
    {
      v19[v7] = v10 >> (8 * (((_BYTE)v8 - 1) & 7u));
      if (v7 + 1 < *((void *)a3 + 2))
      {
        v19[v7 + 1] = v10 >> (8 * (((_BYTE)v8 - 2) & 7u));
        if (v7 + 2 < *((void *)a3 + 2))
        {
          v19[v7 + 2] = v10 >> (8 * (((_BYTE)v8 - 3) & 7u));
          if (v7 + 3 < *((void *)a3 + 2))
          {
            v19[v7 + 3] = v10 >> (8 * (((_BYTE)v8 - 4) & 7u));
            if (v7 + 4 < *((void *)a3 + 2))
            {
              v19[v7 + 4] = v10 >> (8 * (((_BYTE)v8 - 5) & 7u));
              if (v7 + 5 < *((void *)a3 + 2))
              {
                v19[v7 + 5] = v10 >> (8 * (((_BYTE)v8 - 6) & 7u));
                if (v7 + 6 < *((void *)a3 + 2))
                {
                  v19[v7 + 6] = v10 >> (8 * (((_BYTE)v8 - 7) & 7u));
                  if (v7 + 7 < *((void *)a3 + 2))
                  {
                    v19[v7 + 7] = v10 >> (v4 & 0x38);
LABEL_32:
                    *a2 = a3;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }

    __break(1u);
LABEL_35:
    unint64_t v8 = sub_186F3CB8C(0LL, *((void *)v8 + 2) + 1LL, 1, v8);
  }

  if ((v10 & 0x8000000000000000LL) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0) {
    goto LABEL_30;
  }
LABEL_41:
  uint64_t result = (uint64_t)sub_186F52EB0((uint64_t)a3);
  a3 = (char *)result;
LABEL_30:
  if (v13 < *((void *)a3 + 2))
  {
    a3[v13 + 32] = v10;
    goto LABEL_32;
  }

  __break(1u);
  return result;
}

    __break(1u);
LABEL_38:
    uint64_t result = (uint64_t)sub_186F52EB0((uint64_t)a3);
    a3 = (char *)result;
LABEL_11:
    if (v13 >= *((void *)a3 + 2))
    {
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v16 = a3 + 32;
    a3[v13 + 32] = (v4 >> 3) | 0x80;
    *a2 = a3;
    if (v7 < *((void *)a3 + 2))
    {
      v16[v7] = v10 >> (8 * (((_BYTE)v8 - 1) & 7u));
      if (v7 + 1 < *((void *)a3 + 2))
      {
        v16[v7 + 1] = v10 >> (8 * (((_BYTE)v8 - 2) & 7u));
        if (v7 + 2 < *((void *)a3 + 2))
        {
          v16[v7 + 2] = v10 >> (8 * (((_BYTE)v8 - 3) & 7u));
          if (v7 + 3 < *((void *)a3 + 2))
          {
            v16[v7 + 3] = v10 >> (8 * (((_BYTE)v8 - 4) & 7u));
            if (v7 + 4 < *((void *)a3 + 2))
            {
              v16[v7 + 4] = v10 >> (8 * (((_BYTE)v8 - 5) & 7u));
              if (v7 + 5 < *((void *)a3 + 2))
              {
                v16[v7 + 5] = v10 >> (8 * (((_BYTE)v8 - 6) & 7u));
                if (v7 + 6 < *((void *)a3 + 2))
                {
                  v16[v7 + 6] = v10 >> (8 * (((_BYTE)v8 - 7) & 7u));
                  if (v7 + 7 < *((void *)a3 + 2))
                  {
                    v16[v7 + 7] = v10 >> (v4 & 0x38);
LABEL_32:
                    *a2 = a3;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }

    __break(1u);
LABEL_35:
    unint64_t v8 = sub_186F3CB8C(0LL, *((void *)v8 + 2) + 1LL, 1, v8);
  }

  if ((v10 & 0x8000000000000000LL) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0) {
    goto LABEL_30;
  }
LABEL_41:
  uint64_t result = (uint64_t)sub_186F52EB0((uint64_t)a3);
  a3 = (char *)result;
LABEL_30:
  if (v13 < *((void *)a3 + 2))
  {
    a3[v13 + 32] = v10;
    goto LABEL_32;
  }

  __break(1u);
  return result;
}

uint64_t sub_186F681A0(unint64_t a1, char **a2)
{
  uint64_t v6 = *a2;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_33;
  }
  while (1)
  {
    unint64_t v9 = *((void *)v6 + 2);
    unint64_t v8 = *((void *)v6 + 3);
    int64_t v10 = v8 >> 1;
    unint64_t v11 = v9 + 1;
    if (v8 >> 1 <= v9)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_186F3CB8C((char *)(v8 > 1), v9 + 1, 1, v6);
      uint64_t v6 = (char *)isUniquelyReferenced_nonNull_native;
      unint64_t v8 = *(void *)(isUniquelyReferenced_nonNull_native + 24);
      int64_t v10 = v8 >> 1;
    }

    *((void *)v6 + 2) = v11;
    v6[v9 + 32] = a1;
    unint64_t v12 = v9 + 2;
    if (v10 < (uint64_t)v12)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_186F3CB8C((char *)(v8 > 1), v12, 1, v6);
      uint64_t v6 = (char *)isUniquelyReferenced_nonNull_native;
    }

    *((void *)v6 + 2) = v12;
    v6[v11 + 32] = 0;
    *a2 = v6;
    unint64_t v13 = v12 - 1;
    if (__OFSUB__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_35;
    }

    uint64_t v18 = 48LL;
    MEMORY[0x1895F8858](isUniquelyReferenced_nonNull_native);
    void v17[2] = &v18;
    sub_186F6BBA4(2, a2, (uint64_t (*)(char **))sub_186F6CC1C, (uint64_t)v17);
    uint64_t v6 = *a2;
    unint64_t v14 = *((void *)*a2 + 2);
    unint64_t v2 = v14 - v12;
    if (v14 >= v12)
    {
      unint64_t v3 = 71 - __clz(v2);
      a1 = v3 >> 3;
      sub_186F69140(v3 >> 3, v12, v14);
      uint64_t v6 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0) {
        goto LABEL_10;
      }
      goto LABEL_36;
    }

LABEL_35:
    __break(1u);
LABEL_36:
    uint64_t result = (uint64_t)sub_186F52EB0((uint64_t)v6);
    uint64_t v6 = (char *)result;
LABEL_10:
    if (v13 >= *((void *)v6 + 2))
    {
      __break(1u);
      goto LABEL_38;
    }

    unint64_t v16 = v6 + 32;
    v6[v13 + 32] = (v3 >> 3) | 0x80;
    *a2 = v6;
    if (v12 < *((void *)v6 + 2))
    {
      v16[v12] = v2 >> (8 * ((a1 - 1) & 7));
      if (a1 == 1) {
        goto LABEL_31;
      }
      if (v12 + 1 < *((void *)v6 + 2))
      {
        v16[v12 + 1] = v2 >> (8 * ((a1 - 2) & 7));
        if (a1 == 2) {
          goto LABEL_31;
        }
        if (v12 + 2 < *((void *)v6 + 2))
        {
          v16[v12 + 2] = v2 >> (8 * ((a1 - 3) & 7));
          if (a1 == 3) {
            goto LABEL_31;
          }
          if (v12 + 3 < *((void *)v6 + 2))
          {
            v16[v12 + 3] = v2 >> (8 * ((a1 - 4) & 7));
            if (a1 == 4) {
              goto LABEL_31;
            }
            if (v12 + 4 < *((void *)v6 + 2))
            {
              v16[v12 + 4] = v2 >> (8 * ((a1 - 5) & 7));
              if (a1 == 5) {
                goto LABEL_31;
              }
              if (v12 + 5 < *((void *)v6 + 2))
              {
                v16[v12 + 5] = v2 >> (8 * ((a1 - 6) & 7));
                if (a1 == 6) {
                  goto LABEL_31;
                }
                if (v12 + 6 < *((void *)v6 + 2))
                {
                  v16[v12 + 6] = v2 >> (8 * ((a1 - 7) & 7));
                  if (a1 == 7) {
                    goto LABEL_31;
                  }
                  if (v12 + 7 < *((void *)v6 + 2))
                  {
                    v16[v12 + 7] = v2 >> (v3 & 0x38);
LABEL_31:
                    *a2 = v6;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }

    __break(1u);
LABEL_33:
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_186F3CB8C(0LL, *((void *)v6 + 2) + 1LL, 1, v6);
    uint64_t v6 = (char *)isUniquelyReferenced_nonNull_native;
  }

  if ((v2 & 0x8000000000000000LL) != 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0) {
    goto LABEL_29;
  }
LABEL_39:
  uint64_t result = (uint64_t)sub_186F52EB0((uint64_t)v6);
  uint64_t v6 = (char *)result;
LABEL_29:
  if (v13 < *((void *)v6 + 2))
  {
    v6[v13 + 32] = v2;
    goto LABEL_31;
  }

  __break(1u);
  return result;
}

uint64_t sub_186F684D8(unint64_t a1, char **a2)
{
  unint64_t v5 = *a2;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_34;
  }
  while (1)
  {
    unint64_t v8 = *((void *)v5 + 2);
    unint64_t v7 = *((void *)v5 + 3);
    int64_t v9 = v7 >> 1;
    unint64_t v10 = v8 + 1;
    if (v7 >> 1 <= v8)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_186F3CB8C((char *)(v7 > 1), v8 + 1, 1, v5);
      unint64_t v5 = (char *)isUniquelyReferenced_nonNull_native;
      unint64_t v7 = *(void *)(isUniquelyReferenced_nonNull_native + 24);
      int64_t v9 = v7 >> 1;
    }

    *((void *)v5 + 2) = v10;
    v5[v8 + 32] = a1;
    unint64_t v11 = v8 + 2;
    if (v9 < (uint64_t)v11)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_186F3CB8C((char *)(v7 > 1), v11, 1, v5);
      unint64_t v5 = (char *)isUniquelyReferenced_nonNull_native;
    }

    *((void *)v5 + 2) = v11;
    v5[v10 + 32] = 0;
    *a2 = v5;
    unint64_t v12 = v11 - 1;
    if (__OFSUB__(v11, 1LL))
    {
      __break(1u);
    }

    else if (qword_18C6B0618 == -1)
    {
      goto LABEL_8;
    }

    uint64_t isUniquelyReferenced_nonNull_native = swift_once();
LABEL_8:
    MEMORY[0x1895F8858](isUniquelyReferenced_nonNull_native);
    void v18[2] = v13;
    sub_186F6BBA4(6, a2, (uint64_t (*)(char **))sub_186F36A30, (uint64_t)v18);
    unint64_t v5 = *a2;
    unint64_t v14 = *((void *)*a2 + 2);
    unint64_t v15 = v14 - v11;
    if (v14 < v11)
    {
      __break(1u);
    }

    else
    {
      unint64_t v2 = 71 - __clz(v15);
      a1 = v2 >> 3;
      sub_186F69140(v2 >> 3, v11, v14);
      unint64_t v5 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0) {
        goto LABEL_11;
      }
    }

    uint64_t result = (uint64_t)sub_186F52EB0((uint64_t)v5);
    unint64_t v5 = (char *)result;
LABEL_11:
    if (v12 >= *((void *)v5 + 2))
    {
      __break(1u);
      goto LABEL_40;
    }

    uint64_t v17 = v5 + 32;
    v5[v12 + 32] = (v2 >> 3) | 0x80;
    *a2 = v5;
    if (v11 < *((void *)v5 + 2))
    {
      v17[v11] = v15 >> (8 * ((a1 - 1) & 7));
      if (a1 == 1) {
        goto LABEL_32;
      }
      if (v11 + 1 < *((void *)v5 + 2))
      {
        v17[v11 + 1] = v15 >> (8 * ((a1 - 2) & 7));
        if (a1 == 2) {
          goto LABEL_32;
        }
        if (v11 + 2 < *((void *)v5 + 2))
        {
          v17[v11 + 2] = v15 >> (8 * ((a1 - 3) & 7));
          if (a1 == 3) {
            goto LABEL_32;
          }
          if (v11 + 3 < *((void *)v5 + 2))
          {
            v17[v11 + 3] = v15 >> (8 * ((a1 - 4) & 7));
            if (a1 == 4) {
              goto LABEL_32;
            }
            if (v11 + 4 < *((void *)v5 + 2))
            {
              v17[v11 + 4] = v15 >> (8 * ((a1 - 5) & 7));
              if (a1 == 5) {
                goto LABEL_32;
              }
              if (v11 + 5 < *((void *)v5 + 2))
              {
                v17[v11 + 5] = v15 >> (8 * ((a1 - 6) & 7));
                if (a1 == 6) {
                  goto LABEL_32;
                }
                if (v11 + 6 < *((void *)v5 + 2))
                {
                  v17[v11 + 6] = v15 >> (8 * ((a1 - 7) & 7));
                  if (a1 == 7) {
                    goto LABEL_32;
                  }
                  if (v11 + 7 < *((void *)v5 + 2))
                  {
                    v17[v11 + 7] = v15 >> (v2 & 0x38);
LABEL_32:
                    *a2 = v5;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }

    __break(1u);
LABEL_34:
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_186F3CB8C(0LL, *((void *)v5 + 2) + 1LL, 1, v5);
    unint64_t v5 = (char *)isUniquelyReferenced_nonNull_native;
  }

  if ((v15 & 0x8000000000000000LL) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0) {
    goto LABEL_30;
  }
LABEL_41:
  uint64_t result = (uint64_t)sub_186F52EB0((uint64_t)v5);
  unint64_t v5 = (char *)result;
LABEL_30:
  if (v12 < *((void *)v5 + 2))
  {
    v5[v12 + 32] = v15;
    goto LABEL_32;
  }

  __break(1u);
  return result;
}

uint64_t sub_186F68830(unint64_t a1, char **a2)
{
  uint64_t v6 = *a2;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_36;
  }
  while (1)
  {
    unint64_t v9 = *((void *)v6 + 2);
    unint64_t v8 = *((void *)v6 + 3);
    int64_t v10 = v8 >> 1;
    unint64_t v11 = v9 + 1;
    if (v8 >> 1 <= v9)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_186F3CB8C((char *)(v8 > 1), v9 + 1, 1, v6);
      uint64_t v6 = (char *)isUniquelyReferenced_nonNull_native;
      unint64_t v8 = *(void *)(isUniquelyReferenced_nonNull_native + 24);
      int64_t v10 = v8 >> 1;
    }

    *((void *)v6 + 2) = v11;
    v6[v9 + 32] = a1;
    unint64_t v12 = v9 + 2;
    if (v10 < (uint64_t)v12)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_186F3CB8C((char *)(v8 > 1), v12, 1, v6);
      uint64_t v6 = (char *)isUniquelyReferenced_nonNull_native;
    }

    *((void *)v6 + 2) = v12;
    v6[v11 + 32] = 0;
    *a2 = v6;
    unint64_t v13 = v12 - 1;
    if (__OFSUB__(v12, 1LL))
    {
      __break(1u);
    }

    else if (qword_18C6B0608 == -1)
    {
      goto LABEL_8;
    }

    uint64_t isUniquelyReferenced_nonNull_native = swift_once();
LABEL_8:
    MEMORY[0x1895F8858](isUniquelyReferenced_nonNull_native);
    void v19[2] = v14;
    sub_186F6BBA4(6, a2, (uint64_t (*)(char **))sub_186F36A30, (uint64_t)v19);
    uint64_t result = sub_186F684D8(0x30uLL, a2);
    if (v2) {
      return result;
    }
    uint64_t v6 = *a2;
    unint64_t v16 = *((void *)*a2 + 2);
    unint64_t v17 = v16 - v12;
    if (v16 < v12)
    {
      __break(1u);
    }

    else
    {
      unint64_t v3 = 71 - __clz(v17);
      a1 = v3 >> 3;
      sub_186F69140(v3 >> 3, v12, v16);
      uint64_t v6 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0) {
        goto LABEL_12;
      }
    }

    uint64_t result = (uint64_t)sub_186F52EB0((uint64_t)v6);
    uint64_t v6 = (char *)result;
LABEL_12:
    if (v13 >= *((void *)v6 + 2))
    {
      __break(1u);
      goto LABEL_42;
    }

    uint64_t v18 = v6 + 32;
    v6[v13 + 32] = (v3 >> 3) | 0x80;
    *a2 = v6;
    if (v12 < *((void *)v6 + 2))
    {
      v18[v12] = v17 >> (8 * ((a1 - 1) & 7));
      if (a1 == 1) {
        goto LABEL_33;
      }
      if (v12 + 1 < *((void *)v6 + 2))
      {
        v18[v12 + 1] = v17 >> (8 * ((a1 - 2) & 7));
        if (a1 == 2) {
          goto LABEL_33;
        }
        if (v12 + 2 < *((void *)v6 + 2))
        {
          v18[v12 + 2] = v17 >> (8 * ((a1 - 3) & 7));
          if (a1 == 3) {
            goto LABEL_33;
          }
          if (v12 + 3 < *((void *)v6 + 2))
          {
            v18[v12 + 3] = v17 >> (8 * ((a1 - 4) & 7));
            if (a1 == 4) {
              goto LABEL_33;
            }
            if (v12 + 4 < *((void *)v6 + 2))
            {
              v18[v12 + 4] = v17 >> (8 * ((a1 - 5) & 7));
              if (a1 == 5) {
                goto LABEL_33;
              }
              if (v12 + 5 < *((void *)v6 + 2))
              {
                v18[v12 + 5] = v17 >> (8 * ((a1 - 6) & 7));
                if (a1 == 6) {
                  goto LABEL_33;
                }
                if (v12 + 6 < *((void *)v6 + 2))
                {
                  v18[v12 + 6] = v17 >> (8 * ((a1 - 7) & 7));
                  if (a1 == 7) {
                    goto LABEL_33;
                  }
                  if (v12 + 7 < *((void *)v6 + 2))
                  {
                    v18[v12 + 7] = v17 >> (v3 & 0x38);
LABEL_33:
                    *a2 = v6;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }

    __break(1u);
LABEL_36:
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_186F3CB8C(0LL, *((void *)v6 + 2) + 1LL, 1, v6);
    uint64_t v6 = (char *)isUniquelyReferenced_nonNull_native;
  }

  if ((v17 & 0x8000000000000000LL) != 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0) {
    goto LABEL_31;
  }
LABEL_43:
  uint64_t result = (uint64_t)sub_186F52EB0((uint64_t)v6);
  uint64_t v6 = (char *)result;
LABEL_31:
  if (v13 < *((void *)v6 + 2))
  {
    v6[v13 + 32] = v17;
    goto LABEL_33;
  }

  __break(1u);
  return result;
}

uint64_t sub_186F68B98(char a1, uint64_t (*a2)(char **), uint64_t a3)
{
  unint64_t v5 = v3;
  LOBYTE(v8) = a1;
  unint64_t v9 = *v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_35;
  }
  while (1)
  {
    unint64_t v11 = *((void *)v9 + 2);
    unint64_t v10 = *((void *)v9 + 3);
    int64_t v12 = v10 >> 1;
    unint64_t v13 = v11 + 1;
    if (v10 >> 1 <= v11)
    {
      unint64_t v9 = sub_186F3CB8C((char *)(v10 > 1), v11 + 1, 1, v9);
      unint64_t v10 = *((void *)v9 + 3);
      int64_t v12 = v10 >> 1;
    }

    *((void *)v9 + 2) = v13;
    v9[v11 + 32] = v8;
    unint64_t v8 = v11 + 2;
    *((void *)v9 + 2) = v8;
    v9[v13 + 32] = 0;
    *unint64_t v5 = v9;
    unint64_t v9 = (char *)(v11 + 1);
    if (__OFSUB__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_37;
    }

    uint64_t result = a2(v5);
    if (v4) {
      return result;
    }
    a3 = (uint64_t)*v5;
    unint64_t v15 = *((void *)*v5 + 2);
    unint64_t v13 = v15 - v8;
    if (v15 >= v8)
    {
      unint64_t v11 = 71 - __clz(v13);
      a2 = (uint64_t (*)(char **))(v11 >> 3);
      sub_186F69140(v11 >> 3, v8, v15);
      a3 = (uint64_t)*v5;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0) {
        goto LABEL_11;
      }
      goto LABEL_38;
    }

uint64_t sub_186F68E98(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
    sub_186F5CCB4(a2, (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
    sub_186F87654(v4, v5, v6, v7);
    return sub_186F5CCB4( v2,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  }

  else
  {
    uint64_t v8 = v7 >> 1;
    if (v6 != v7 >> 1)
    {
      sub_186F5CCB4( a2,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
      unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v36 = v4;
      uint64_t result = swift_unknownObjectRetain();
      unint64_t v25 = v7 & 0xFFFFFFFFFFFFFFFELL;
      while (v6 < (uint64_t)(v7 >> 1))
      {
        if (v8 <= v6) {
          goto LABEL_38;
        }
        if (v7 >> 1 < v8) {
          goto LABEL_39;
        }
        int64_t v12 = (unsigned __int8 *)(v5 + 48 * v6);
        uint64_t v13 = *v12;
        uint64_t v14 = v6 + 1;
        unint64_t v15 = v7 & 1;
        if ((v13 & 0x20) != 0)
        {
          uint64_t v16 = *((void *)v12 + 1);
          if (v14 == v8)
          {
            uint64_t v17 = v8;
          }

          else
          {
            uint64_t v18 = (uint64_t *)(v5 + 56 + 48 * v6);
            uint64_t v17 = v6 + 1;
            do
            {
              if (v17 >= v8)
              {
                __break(1u);
LABEL_36:
                __break(1u);
                goto LABEL_37;
              }

              if (v16 >= *v18) {
                goto LABEL_20;
              }
              uint64_t v19 = v17 + 1;
              if (__OFADD__(v17, 1LL)) {
                goto LABEL_36;
              }
              ++v17;
              v18 += 6;
            }

            while (v19 != v8);
            uint64_t v17 = v8;
LABEL_20:
            if (v17 <= v6) {
              goto LABEL_40;
            }
            if (v17 < 0) {
              goto LABEL_41;
            }
          }

          uint64_t v20 = v17 - v14;
          if (__OFSUB__(v17, v14)) {
            goto LABEL_42;
          }
          if (v20 < 0) {
            goto LABEL_43;
          }
          uint64_t v21 = v8 - v14;
          if (__OFSUB__(v8, v14)) {
            goto LABEL_44;
          }
          uint64_t v22 = v3;
          if (!v20 || v21 < 0 || (uint64_t v23 = v8, v21 >= v20))
          {
            uint64_t v23 = v17;
            if (__OFADD__(v14, v20)) {
              goto LABEL_47;
            }
            if (v8 < v17) {
              goto LABEL_45;
            }
          }

          if (v23 <= v6) {
            goto LABEL_46;
          }
          sub_186F6B048(v36, v5, v14, v15 | (2 * v17), v16, v29);
          __int128 v26 = v29[1];
          __int128 v28 = v29[0];
          uint64_t v10 = v30;
          swift_unknownObjectRetain();
          __int128 v11 = v28;
          uint64_t v14 = v23;
          uint64_t v3 = v22;
          unint64_t v9 = v25;
        }

        else
        {
          __int128 v27 = *((_OWORD *)v12 + 1);
          uint64_t result = *((void *)v12 + 2);
          if (!(void)v27) {
            goto LABEL_48;
          }
          __int128 v26 = *((_OWORD *)v12 + 2);
          swift_unknownObjectRetain();
          uint64_t v10 = 0LL;
          __int128 v11 = v27;
        }

        v31[0] = v13;
        unint64_t v7 = v15 | v9;
        __int128 v32 = v11;
        __int128 v33 = v26;
        uint64_t v34 = v10;
        BOOL v35 = (v13 & 0x20) == 0;
        uint64_t result = sub_186F67440(v13, v3, (uint64_t)v31);
        uint64_t v6 = v14;
        if (v14 == v8)
        {
          swift_unknownObjectRelease();
          uint64_t v2 = a2;
          return sub_186F5CCB4( v2,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
        }
      }

uint64_t sub_186F69140(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < 1) {
    goto LABEL_28;
  }
  uint64_t v6 = a3;
  uint64_t v7 = *v4;
  uint64_t v8 = *(void *)(*v4 + 16);
  uint64_t v9 = v8 - a3;
  if (__OFSUB__(v8, a3)) {
    goto LABEL_29;
  }
  uint64_t v3 = a2;
  uint64_t v5 = result;
  if (v9 >= result) {
    goto LABEL_13;
  }
  uint64_t v10 = result - v9;
  if (__OFSUB__(result, v9))
  {
    __break(1u);
    goto LABEL_32;
  }

  if (v10 < 0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    uint64_t result = (uint64_t)sub_186F3CB8C(0LL, v8 + 1, 1, (char *)v7);
    uint64_t v7 = result;
LABEL_8:
    unint64_t v11 = *(void *)(v7 + 16);
    do
    {
      unint64_t v12 = *(void *)(v7 + 24);
      if (v11 >= v12 >> 1)
      {
        uint64_t result = (uint64_t)sub_186F3CB8C((char *)(v12 > 1), v11 + 1, 1, (char *)v7);
        uint64_t v7 = result;
      }

      *(void *)(v7 + 16) = v11 + 1;
      *(_BYTE *)(v7 + v11++ + 32) = 0;
      --v10;
    }

    while (v10);
    *uint64_t v4 = v7;
    goto LABEL_13;
  }

  if (v10)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }

uint64_t sub_186F692C4(uint64_t *a1, _BYTE *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_186F6970C(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t *, _BYTE *))ChaChaPoly.Nonce.makeIterator());
}

size_t sub_186F692D0(size_t *a1, _BYTE *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  v23[0] = a4;
  v23[1] = a5;
  void v23[2] = a6;
  v23[3] = a7;
  size_t v10 = sub_186F4B3D0((size_t)v23, (unint64_t)&v24);
  if (a2)
  {
    if (a3)
    {
      if ((a3 & 0x8000000000000000LL) != 0) {
        goto LABEL_26;
      }
      size_t v11 = *(void *)(v10 + 16);
      if (v11)
      {
        *a2 = *(_BYTE *)(v10 + 32);
        unint64_t v12 = a3 - 1;
        if (a3 != 1)
        {
          if (v11 - 1 < v12) {
            unint64_t v12 = v11 - 1;
          }
          if (v12 >= a3 - 2) {
            unint64_t v12 = a3 - 2;
          }
          unint64_t v13 = v12 + 1;
          if (v13 <= 0x10 || ((unint64_t)&a2[-v10] & 0xFFFFFFFFFFFFFFF0LL) == 0x20)
          {
            uint64_t v14 = 1LL;
            unint64_t v15 = a2;
          }

          else
          {
            uint64_t v16 = v13 & 0xF;
            if ((v13 & 0xF) == 0) {
              uint64_t v16 = 16LL;
            }
            unint64_t v17 = v13 - v16;
            uint64_t v14 = v13 - v16 + 1;
            unint64_t v15 = &a2[v17];
            uint64_t v18 = a2 + 1;
            uint64_t v19 = (__int128 *)(v10 + 33);
            do
            {
              __int128 v20 = *v19++;
              *v18++ = v20;
              v17 -= 16LL;
            }

            while (v17);
          }

          uint64_t v21 = v15 + 1;
          while (a3 != v14)
          {
            if (v11 == v14) {
              goto LABEL_23;
            }
            *v21++ = *(_BYTE *)(v10 + 32 + v14);
            if (a3 == ++v14) {
              goto LABEL_24;
            }
          }

          __break(1u);
LABEL_26:
          __break(1u);
        }
      }

      else
      {
LABEL_23:
        a3 = v11;
      }
    }
  }

  else
  {
    a3 = 0LL;
  }

size_t sub_186F6942C(size_t *a1, _BYTE *a2, size_t a3)
{
  v22[1] = *MEMORY[0x1895F89C0];
  __int128 v7 = v3[1];
  v21[0] = *v3;
  v21[1] = v7;
  v21[2] = v3[2];
  size_t v8 = sub_186F4B3D0((size_t)v21, (unint64_t)v22);
  if (a2)
  {
    if (a3)
    {
      if ((a3 & 0x8000000000000000LL) != 0) {
        goto LABEL_26;
      }
      size_t v9 = *(void *)(v8 + 16);
      if (v9)
      {
        *a2 = *(_BYTE *)(v8 + 32);
        unint64_t v10 = a3 - 1;
        if (a3 != 1)
        {
          if (v9 - 1 < v10) {
            unint64_t v10 = v9 - 1;
          }
          if (v10 >= a3 - 2) {
            unint64_t v10 = a3 - 2;
          }
          unint64_t v11 = v10 + 1;
          if (v11 <= 0x10 || ((unint64_t)&a2[-v8] & 0xFFFFFFFFFFFFFFF0LL) == 0x20)
          {
            uint64_t v12 = 1LL;
            unint64_t v13 = a2;
          }

          else
          {
            uint64_t v14 = v11 & 0xF;
            if ((v11 & 0xF) == 0) {
              uint64_t v14 = 16LL;
            }
            unint64_t v15 = v11 - v14;
            uint64_t v12 = v11 - v14 + 1;
            unint64_t v13 = &a2[v15];
            uint64_t v16 = a2 + 1;
            unint64_t v17 = (__int128 *)(v8 + 33);
            do
            {
              __int128 v18 = *v17++;
              *v16++ = v18;
              v15 -= 16LL;
            }

            while (v15);
          }

          uint64_t v19 = v13 + 1;
          while (a3 != v12)
          {
            if (v9 == v12) {
              goto LABEL_23;
            }
            *v19++ = *(_BYTE *)(v8 + 32 + v12);
            if (a3 == ++v12) {
              goto LABEL_24;
            }
          }

          __break(1u);
LABEL_26:
          __break(1u);
        }
      }

      else
      {
LABEL_23:
        a3 = v9;
      }
    }
  }

  else
  {
    a3 = 0LL;
  }

size_t sub_186F69590(size_t *a1, _BYTE *a2, size_t a3)
{
  v23[1] = *MEMORY[0x1895F89C0];
  __int128 v7 = v3[1];
  v22[0] = *v3;
  v22[1] = v7;
  __int128 v8 = v3[3];
  void v22[2] = v3[2];
  v22[3] = v8;
  size_t v9 = sub_186F4B3D0((size_t)v22, (unint64_t)v23);
  if (a2)
  {
    if (a3)
    {
      if ((a3 & 0x8000000000000000LL) != 0) {
        goto LABEL_26;
      }
      size_t v10 = *(void *)(v9 + 16);
      if (v10)
      {
        *a2 = *(_BYTE *)(v9 + 32);
        unint64_t v11 = a3 - 1;
        if (a3 != 1)
        {
          if (v10 - 1 < v11) {
            unint64_t v11 = v10 - 1;
          }
          if (v11 >= a3 - 2) {
            unint64_t v11 = a3 - 2;
          }
          unint64_t v12 = v11 + 1;
          if (v12 <= 0x10 || ((unint64_t)&a2[-v9] & 0xFFFFFFFFFFFFFFF0LL) == 0x20)
          {
            uint64_t v13 = 1LL;
            uint64_t v14 = a2;
          }

          else
          {
            uint64_t v15 = v12 & 0xF;
            if ((v12 & 0xF) == 0) {
              uint64_t v15 = 16LL;
            }
            unint64_t v16 = v12 - v15;
            uint64_t v13 = v12 - v15 + 1;
            uint64_t v14 = &a2[v16];
            unint64_t v17 = a2 + 1;
            __int128 v18 = (__int128 *)(v9 + 33);
            do
            {
              __int128 v19 = *v18++;
              *v17++ = v19;
              v16 -= 16LL;
            }

            while (v16);
          }

          __int128 v20 = v14 + 1;
          while (a3 != v13)
          {
            if (v10 == v13) {
              goto LABEL_23;
            }
            *v20++ = *(_BYTE *)(v9 + 32 + v13);
            if (a3 == ++v13) {
              goto LABEL_24;
            }
          }

          __break(1u);
LABEL_26:
          __break(1u);
        }
      }

      else
      {
LABEL_23:
        a3 = v10;
      }
    }
  }

  else
  {
    a3 = 0LL;
  }

uint64_t sub_186F696F4(uint64_t *a1, _BYTE *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_186F6970C(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t *, _BYTE *))AES.CCM.Nonce.makeIterator());
}

uint64_t sub_186F69700(uint64_t *a1, _BYTE *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_186F6970C(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t *, _BYTE *))AES.GCM.Nonce.makeIterator());
}

uint64_t sub_186F6970C( uint64_t *a1, _BYTE *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(uint64_t *, _BYTE *))
{
  uint64_t v11 = a6(a1, a2);
  unint64_t v13 = v12;
  uint64_t result = sub_186F33C98(a4, a5);
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    *a1 = v11;
    a1[1] = v13;
    return a3;
  }

  if (a3 < 0) {
    goto LABEL_28;
  }
  unint64_t v15 = *(void *)(v11 + 16);
  if (v13 == v15)
  {
LABEL_5:
    a3 = 0LL;
    goto LABEL_6;
  }

  if (v13 < v15)
  {
    unint64_t v16 = v13 + 1;
    *a2 = *(_BYTE *)(v11 + 32 + v13);
    unint64_t v17 = a3 - 1;
    if (a3 == 1)
    {
      ++v13;
      goto LABEL_6;
    }

    unint64_t v18 = a3 - 2;
    if (a3 - 2 >= v15 + ~v13) {
      unint64_t v18 = v15 + ~v13;
    }
    if (v18 < v17) {
      unint64_t v17 = v18;
    }
    unint64_t v19 = v17 + 1;
    if (v19 <= 0x10 || ((unint64_t)&a2[-v13 - v11] & 0xFFFFFFFFFFFFFFF0LL) == 0x20)
    {
      uint64_t v20 = 1LL;
      uint64_t v21 = a2;
    }

    else
    {
      uint64_t v22 = v19 & 0xF;
      if ((v19 & 0xF) == 0) {
        uint64_t v22 = 16LL;
      }
      unint64_t v23 = v19 - v22;
      uint64_t v20 = v19 - v22 + 1;
      v16 += v23;
      uint64_t v21 = &a2[v23];
      uint64_t v24 = a2 + 1;
      unint64_t v25 = (__int128 *)(v13 + v11 + 33);
      do
      {
        __int128 v26 = *v25++;
        *v24++ = v26;
        v23 -= 16LL;
      }

      while (v23);
    }

    __int128 v27 = v21 + 1;
    while (a3 != v20)
    {
      if (v15 == v16)
      {
        unint64_t v13 = v15;
        a3 = v20;
        goto LABEL_6;
      }

      ++v20;
      unint64_t v13 = v16 + 1;
      *v27++ = *(_BYTE *)(v11 + 32 + v16++);
      if (a3 == v20) {
        goto LABEL_6;
      }
    }

    __break(1u);
LABEL_28:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_186F69888(void *a1, _BYTE *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v11 = v10;
  unint64_t v13 = v12;
  uint64_t result = sub_186F33C98(a4, a5);
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    *a1 = v11;
    a1[1] = v13;
    return a3;
  }

  if (a3 < 0) {
    goto LABEL_28;
  }
  unint64_t v15 = *(void *)(v11 + 16);
  if (v13 == v15)
  {
LABEL_5:
    a3 = 0LL;
    goto LABEL_6;
  }

  if (v13 < v15)
  {
    unint64_t v16 = v13 + 1;
    *a2 = *(_BYTE *)(v11 + 32 + v13);
    unint64_t v17 = a3 - 1;
    if (a3 == 1)
    {
      ++v13;
      goto LABEL_6;
    }

    unint64_t v18 = a3 - 2;
    if (a3 - 2 >= v15 + ~v13) {
      unint64_t v18 = v15 + ~v13;
    }
    if (v18 < v17) {
      unint64_t v17 = v18;
    }
    unint64_t v19 = v17 + 1;
    if (v19 <= 0x10 || ((unint64_t)&a2[-v13 - v11] & 0xFFFFFFFFFFFFFFF0LL) == 0x20)
    {
      uint64_t v20 = 1LL;
      uint64_t v21 = a2;
    }

    else
    {
      uint64_t v22 = v19 & 0xF;
      if ((v19 & 0xF) == 0) {
        uint64_t v22 = 16LL;
      }
      unint64_t v23 = v19 - v22;
      uint64_t v20 = v19 - v22 + 1;
      v16 += v23;
      uint64_t v21 = &a2[v23];
      uint64_t v24 = a2 + 1;
      unint64_t v25 = (__int128 *)(v13 + v11 + 33);
      do
      {
        __int128 v26 = *v25++;
        *v24++ = v26;
        v23 -= 16LL;
      }

      while (v23);
    }

    __int128 v27 = v21 + 1;
    while (a3 != v20)
    {
      if (v15 == v16)
      {
        unint64_t v13 = v15;
        a3 = v20;
        goto LABEL_6;
      }

      ++v20;
      unint64_t v13 = v16 + 1;
      *v27++ = *(_BYTE *)(v11 + 32 + v16++);
      if (a3 == v20) {
        goto LABEL_6;
      }
    }

    __break(1u);
LABEL_28:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_186F699FC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  int64_t v6 = v3[2];
  __int128 v30 = *(_OWORD *)(v3 + 3);
  if (!a2) {
    goto LABEL_5;
  }
  uint64_t v7 = a3;
  if (!a3)
  {
LABEL_6:
    *(void *)uint64_t result = v4;
    *(void *)(result + 8) = v5;
    *(void *)(result + 16) = v6;
    *(_OWORD *)(result + 24) = v30;
    return v7;
  }

  if (a3 < 0) {
    goto LABEL_68;
  }
  int64_t v8 = (unint64_t)v30 >> 1;
  if (v6 == (unint64_t)v30 >> 1)
  {
LABEL_5:
    uint64_t v7 = 0LL;
    goto LABEL_6;
  }

  uint64_t v29 = v4;
  uint64_t v26 = result;
  if (v6 >= (uint64_t)((unint64_t)v30 >> 1))
  {
LABEL_48:
    __break(1u);
LABEL_49:
    uint64_t result = v26;
    uint64_t v4 = v29;
    uint64_t v5 = v31;
    goto LABEL_6;
  }

  uint64_t v9 = a2;
  uint64_t v27 = v5 + 104;
  uint64_t v10 = 1LL;
  uint64_t v31 = v5;
  while (1)
  {
    if (v8 <= v6) {
      goto LABEL_53;
    }
    uint64_t v11 = (char *)(v5 + 48 * v6);
    char v12 = *v11;
    int64_t v13 = v6 + 1;
    if ((*v11 & 0x20) == 0)
    {
      uint64_t result = *((void *)v11 + 2);
      if (!result) {
        goto LABEL_70;
      }
      uint64_t v5 = *((void *)v11 + 3);
      int64_t v14 = *((void *)v11 + 4);
      uint64_t v15 = *((void *)v11 + 5);
      uint64_t result = swift_unknownObjectRetain();
      uint64_t v16 = 0LL;
      int64_t v6 = v13;
      goto LABEL_45;
    }

    uint64_t v16 = *((void *)v11 + 1);
    int64_t v17 = (unint64_t)v30 >> 1;
    if (v13 != v8) {
      break;
    }
LABEL_25:
    int64_t v20 = v17 - v13;
    if (__OFSUB__(v17, v13)) {
      goto LABEL_58;
    }
    if (v20 < 0) {
      goto LABEL_59;
    }
    int64_t v21 = v8 - v13;
    if (__OFSUB__(v8, v13)) {
      goto LABEL_60;
    }
    if (!v20 || v21 < 0 || (int64_t v22 = (unint64_t)v30 >> 1, v21 >= v20))
    {
      int64_t v22 = v17;
      if (__OFADD__(v13, v20)) {
        goto LABEL_63;
      }
      if (v8 < v17) {
        goto LABEL_61;
      }
    }

    if (v22 <= v6) {
      goto LABEL_62;
    }
    if (v13 != v17)
    {
      if (v13 >= v17) {
        goto LABEL_65;
      }
      uint64_t v23 = *(void *)(v5 + 48 * v13 + 8);
      if (v16 >= v23) {
        goto LABEL_66;
      }
      int64_t v24 = v6 + 2;
      if (v6 + 2 != v17)
      {
        if (v6 + 2 >= v17) {
          goto LABEL_69;
        }
        unint64_t v25 = (void *)(v27 + 48 * v6);
        while (v24 > v6)
        {
          if (v16 >= *v25) {
            goto LABEL_52;
          }
          ++v24;
          v25 += 6;
          if (v17 == v24) {
            goto LABEL_43;
          }
        }

        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }

LABEL_43:
      if (v23 != v16 + 1) {
        goto LABEL_67;
      }
    }

    uint64_t v15 = v30 & 1 | (2 * v17);
    uint64_t result = swift_unknownObjectRetain();
    int64_t v14 = v13;
    int64_t v6 = v22;
    uint64_t v7 = a3;
LABEL_45:
    *(_BYTE *)uint64_t v9 = v12;
    *(void *)(v9 + 8) = result;
    *(void *)(v9 + 16) = v5;
    *(void *)(v9 + 24) = v14;
    *(void *)(v9 + 32) = v15;
    *(void *)(v9 + 40) = v16;
    *(_BYTE *)(v9 + 48) = (v12 & 0x20) == 0;
    if (v10 == v7) {
      goto LABEL_49;
    }
    uint64_t v5 = v31;
    if (v6 == v8)
    {
      int64_t v6 = (unint64_t)v30 >> 1;
      uint64_t v7 = v10;
      uint64_t result = v26;
      uint64_t v4 = v29;
      goto LABEL_6;
    }

    ++v10;
    v9 += 56LL;
    if (v6 >= v8) {
      goto LABEL_48;
    }
  }

  if (v13 >= v8) {
    goto LABEL_64;
  }
  int64_t v17 = v6 + 1;
  if (v16 >= *(void *)(v5 + 48 * v13 + 8))
  {
LABEL_24:
    if (v17 < 0) {
      goto LABEL_57;
    }
    goto LABEL_25;
  }

  int64_t v17 = (unint64_t)v30 >> 1;
  if (v6 + 2 == v8)
  {
LABEL_23:
    if (v17 <= v6) {
      goto LABEL_56;
    }
    goto LABEL_24;
  }

  unint64_t v18 = (void *)(v27 + 48 * v6);
  int64_t v17 = v6 + 2;
  while (v17 < v8)
  {
    if (v16 >= *v18) {
      goto LABEL_23;
    }
    int64_t v19 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      goto LABEL_55;
    }
    ++v17;
    v18 += 6;
    if (v19 == v8)
    {
      int64_t v17 = (unint64_t)v30 >> 1;
      goto LABEL_23;
    }
  }

    __int128 v28 = v6[3];
    uint64_t v29 = v6;
    uint64_t v47 = v16;
    __int128 v30 = v28 & 0xFFFFFFFFFFFFFFFELL;
    if (v30 <= 1) {
      uint64_t v31 = 1LL;
    }
    else {
      uint64_t v31 = v30;
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6B1908);
    int64_t v6 = (void *)swift_allocObject();
    __int128 v32 = (uint64_t)(_swift_stdlib_malloc_size(v6) - 32) / 56;
    uint64_t v6[2] = v31;
    void v6[3] = 2 * v32;
    __int128 v33 = (unint64_t)(v6 + 4);
    uint64_t v34 = v29[3] >> 1;
    BOOL v35 = 7 * v34;
    if (v29[2])
    {
      _OWORD v29[2] = 0LL;
    }

    uint64_t v11 = (void *)(v33 + v35 * 8);
    uint64_t v4 = (v32 & 0x7FFFFFFFFFFFFFFFLL) - v34;
    uint64_t result = swift_release();
    int64_t v8 = v18;
    uint64_t v10 = v42;
    goto LABEL_56;
  }

  uint64_t v4 = 0LL;
LABEL_62:
  uint64_t v38 = v6[3];
  if (v38 >= 2)
  {
    unint64_t v39 = v38 >> 1;
    __int128 v37 = __OFSUB__(v39, v4);
    unint64_t v40 = v39 - v4;
    if (v37) {
      goto LABEL_86;
    }
    uint64_t v6[2] = v40;
  }

  return (uint64_t)v6;
}

LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
  return result;
}

size_t sub_186F69CF4(size_t *a1, _BYTE *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v23[1] = *MEMORY[0x1895F89C0];
  v22[0] = a4;
  v22[1] = a5;
  v23[0] = a6;
  size_t v9 = sub_186F4B3D0((size_t)v22, (unint64_t)v23 + 4);
  if (a2)
  {
    if (a3)
    {
      if ((a3 & 0x8000000000000000LL) != 0) {
        goto LABEL_26;
      }
      size_t v10 = *(void *)(v9 + 16);
      if (v10)
      {
        *a2 = *(_BYTE *)(v9 + 32);
        unint64_t v11 = a3 - 1;
        if (a3 != 1)
        {
          if (v10 - 1 < v11) {
            unint64_t v11 = v10 - 1;
          }
          if (v11 >= a3 - 2) {
            unint64_t v11 = a3 - 2;
          }
          unint64_t v12 = v11 + 1;
          if (v12 <= 0x10 || ((unint64_t)&a2[-v9] & 0xFFFFFFFFFFFFFFF0LL) == 0x20)
          {
            uint64_t v13 = 1LL;
            int64_t v14 = a2;
          }

          else
          {
            uint64_t v15 = v12 & 0xF;
            if ((v12 & 0xF) == 0) {
              uint64_t v15 = 16LL;
            }
            unint64_t v16 = v12 - v15;
            uint64_t v13 = v12 - v15 + 1;
            int64_t v14 = &a2[v16];
            int64_t v17 = a2 + 1;
            unint64_t v18 = (__int128 *)(v9 + 33);
            do
            {
              __int128 v19 = *v18++;
              *v17++ = v19;
              v16 -= 16LL;
            }

            while (v16);
          }

          int64_t v20 = v14 + 1;
          while (a3 != v13)
          {
            if (v10 == v13) {
              goto LABEL_23;
            }
            *v20++ = *(_BYTE *)(v9 + 32 + v13);
            if (a3 == ++v13) {
              goto LABEL_24;
            }
          }

          __break(1u);
LABEL_26:
          __break(1u);
        }
      }

      else
      {
LABEL_23:
        a3 = v10;
      }
    }
  }

  else
  {
    a3 = 0LL;
  }

size_t sub_186F69E50(size_t *a1, _BYTE *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  v21[0] = a4;
  v21[1] = a5;
  size_t v8 = sub_186F4B3D0((size_t)v21, (unint64_t)&v22);
  if (a2)
  {
    if (a3)
    {
      if ((a3 & 0x8000000000000000LL) != 0) {
        goto LABEL_26;
      }
      size_t v9 = *(void *)(v8 + 16);
      if (v9)
      {
        *a2 = *(_BYTE *)(v8 + 32);
        unint64_t v10 = a3 - 1;
        if (a3 != 1)
        {
          if (v9 - 1 < v10) {
            unint64_t v10 = v9 - 1;
          }
          if (v10 >= a3 - 2) {
            unint64_t v10 = a3 - 2;
          }
          unint64_t v11 = v10 + 1;
          if (v11 <= 0x10 || ((unint64_t)&a2[-v8] & 0xFFFFFFFFFFFFFFF0LL) == 0x20)
          {
            uint64_t v12 = 1LL;
            uint64_t v13 = a2;
          }

          else
          {
            uint64_t v14 = v11 & 0xF;
            if ((v11 & 0xF) == 0) {
              uint64_t v14 = 16LL;
            }
            unint64_t v15 = v11 - v14;
            uint64_t v12 = v11 - v14 + 1;
            uint64_t v13 = &a2[v15];
            unint64_t v16 = a2 + 1;
            int64_t v17 = (__int128 *)(v8 + 33);
            do
            {
              __int128 v18 = *v17++;
              *v16++ = v18;
              v15 -= 16LL;
            }

            while (v15);
          }

          __int128 v19 = v13 + 1;
          while (a3 != v12)
          {
            if (v9 == v12) {
              goto LABEL_23;
            }
            *v19++ = *(_BYTE *)(v8 + 32 + v12);
            if (a3 == ++v12) {
              goto LABEL_24;
            }
          }

          __break(1u);
LABEL_26:
          __break(1u);
        }
      }

      else
      {
LABEL_23:
        a3 = v9;
      }
    }
  }

  else
  {
    a3 = 0LL;
  }

void sub_186F69FA8(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6B0C80);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (uint64_t *)((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = v2[2];
  uint64_t v8 = *v2;
  *uint64_t v5 = v8;
  v5[1] = 0LL;
  __asm { BR              X10 }

uint64_t sub_186F6A040()
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6B0C90);
  sub_186F87AD8();
  sub_186F33C98(v4, v6);
  uint64_t v9 = *(int *)(v8 + 56);
  *(_BYTE *)(v1 + v9) = 0;
  unint64_t v11 = *(void (**)(uint64_t))(v0 + 24);
  unint64_t v10 = *(void (**)(uint64_t))(v0 + 32);
  uint64_t v12 = (void (**)(uint64_t))(v1 + *(int *)(v5 + 44));
  *uint64_t v12 = v11;
  v12[1] = v10;
  if (*(void *)(v7 - 96))
  {
    if (v3)
    {
      if (v3 < 0)
      {
        __break(1u);
        JUMPOUT(0x186F6A1DCLL);
      }

      uint64_t v13 = *(void *)(v7 - 104);
      if (*(void *)(v13 + 16))
      {
        *(void *)(v7 - 136) = v9;
        *(void *)(v7 - 128) = v2;
        *(void *)(v7 - 112) = v13 + 32;
        *(void *)(v7 - 120) = sub_186F87ACC();
        sub_186F3A358();
        uint64_t v14 = v3;
        uint64_t v3 = 0LL;
        *(void *)(v7 - 144) = v14;
        uint64_t v2 = v14 - 1;
        while (1)
        {
          char v15 = *(_BYTE *)(*(void *)(v7 - 112) + v3);
          unint64_t v16 = v3 + 1;
          sub_186F87E20();
          if ((*(_BYTE *)(v7 - 81) & 1) != 0)
          {
            *(void *)(v1 + 8) = v16;
            goto LABEL_16;
          }

          char v17 = *(_BYTE *)(v7 - 82);
          *(_BYTE *)(v7 - 84) = v15;
          *(_BYTE *)(v7 - 83) = v17;
          v11(v7 - 84);
          *(_BYTE *)(*(void *)(v7 - 96) + v3) = *(_BYTE *)(v7 - 85);
          if (v2 == v3)
          {
            uint64_t v3 = *(void *)(v7 - 144);
            *(void *)(v1 + 8) = v3;
            uint64_t v2 = *(void *)(v7 - 128);
            goto LABEL_18;
          }

          unint64_t v18 = *(void *)(*(void *)(v7 - 104) + 16LL);
          if (v16 == v18) {
            break;
          }
          ++v3;
          if (v16 >= v18)
          {
            __break(1u);
            goto LABEL_11;
          }
        }

        *(void *)(v1 + 8) = ++v3;
LABEL_16:
        uint64_t v9 = *(void *)(v7 - 136);
        uint64_t v2 = *(void *)(v7 - 128);
      }

      else
      {
        uint64_t v3 = 0LL;
      }

      *(_BYTE *)(v1 + v9) = 1;
    }
  }

  else
  {
LABEL_11:
    uint64_t v3 = 0LL;
  }

uint64_t sub_186F6A1EC(uint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a2)
  {
    uint64_t v5 = 0LL;
    goto LABEL_23;
  }

  if (!a3)
  {
LABEL_22:
    uint64_t v5 = a3;
    goto LABEL_23;
  }

  if (a3 < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  uint64_t v5 = a4;
  if (!a4)
  {
LABEL_23:
    *(void *)uint64_t result = a4;
    *(_BYTE *)(result + 8) = a5;
    *(void *)(result + 16) = v5;
    return v5;
  }

  unint64_t v6 = a4 - 1;
  if (a4 >= 1)
  {
    *a2 = a5;
    if (a3 != 1)
    {
      if (a3 - 2 < v6) {
        unint64_t v6 = a3 - 2;
      }
      if (v6 >= a3 - 1) {
        unint64_t v6 = a3 - 1;
      }
      unint64_t v7 = v6 + 1;
      if (v7 > 0x10)
      {
        uint64_t v10 = v7 & 0xF;
        if ((v7 & 0xF) == 0) {
          uint64_t v10 = 16LL;
        }
        unint64_t v11 = v7 - v10;
        uint64_t v8 = v7 - v10 + 1;
        uint64_t v9 = &a2[v11];
        int8x16_t v12 = vdupq_n_s8(a5);
        uint64_t v13 = (int8x16_t *)(a2 + 1);
        do
        {
          *v13++ = v12;
          v11 -= 16LL;
        }

        while (v11);
      }

      else
      {
        uint64_t v8 = 1LL;
        uint64_t v9 = a2;
      }

      uint64_t v14 = v9 + 1;
      while (a3 != v8)
      {
        if (a4 == v8)
        {
          uint64_t v5 = a4;
          goto LABEL_23;
        }

        ++v8;
        *v14++ = a5;
        if (a3 == v8) {
          goto LABEL_22;
        }
      }

      __break(1u);
      goto LABEL_26;
    }

    goto LABEL_22;
  }

LABEL_27:
  __break(1u);
  return result;
}

    uint64_t v5 = (v14 - 1) & v14;
    int8x16_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    uint64_t v8 = v15;
LABEL_28:
    char v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    unint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    sub_186F87CDC();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    __int128 v32 = v28;
    __int128 v33 = v29;
    uint64_t v34 = v30;
    sub_186F7E550(&v31, v35);
    __int128 v28 = v32;
    uint64_t v29 = v33;
    __int128 v30 = v34;
    sub_186F7E550(v35, v36);
    sub_186F7E550(v36, &v32);
    uint64_t result = sub_186F87EBC();
    __int128 v19 = -1LL << *(_BYTE *)(v2 + 32);
    int64_t v20 = result & ~v19;
    int64_t v21 = v20 >> 6;
    if (((-1LL << v20) & ~*(void *)(v6 + 8 * (v20 >> 6))) != 0)
    {
      uint64_t v9 = __clz(__rbit64((-1LL << v20) & ~*(void *)(v6 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v22 = 0;
      uint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        int64_t v24 = v21 == v23;
        if (v21 == v23) {
          int64_t v21 = 0LL;
        }
        v22 |= v24;
        unint64_t v25 = *(void *)(v6 + 8 * v21);
      }

      while (v25 == -1);
      uint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }

    *(void *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v9;
    uint64_t v10 = *(void *)(v2 + 48) + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_186F7E550(&v32, (_OWORD *)(*(void *)(v2 + 56) + 32 * v9));
    ++*(void *)(v2 + 16);
  }

  unint64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_186F7E560();
    return v2;
  }

  uint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    char v15 = v8 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    char v15 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    uint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }

uint64_t sub_186F6A2C4(uint64_t a1, uint64_t a2)
{
  return sub_186F6A79C(a1, a2, (uint64_t (*)(void))ChaChaPoly.Nonce.makeIterator());
}

void *sub_186F6A2D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  v25[0] = a1;
  v25[1] = a2;
  _OWORD v25[2] = a3;
  _OWORD v25[3] = a4;
  size_t v4 = sub_186F4B3D0((size_t)v25, (unint64_t)&v26);
  uint64_t v5 = *(void *)(v4 + 16);
  unint64_t v6 = (void *)MEMORY[0x18961AFE8];
  size_t v7 = 0LL;
  if (v5)
  {
    uint64_t v8 = (_BYTE *)(MEMORY[0x18961AFE8] + 32LL);
    uint64_t v9 = (char *)(v4 + 32);
    while (1)
    {
      char v11 = *v9++;
      char v10 = v11;
      if (!v7)
      {
        unint64_t v12 = v6[3];
        int64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
        if (v13 <= 1) {
          uint64_t v14 = 1LL;
        }
        else {
          uint64_t v14 = v13;
        }
        __swift_instantiateConcreteTypeFromMangledName(qword_18C4B5430);
        char v15 = (void *)swift_allocObject();
        size_t v16 = 2 * _swift_stdlib_malloc_size(v15) - 64;
        void v15[2] = v14;
        v15[3] = v16;
        unint64_t v17 = (unint64_t)(v15 + 4);
        size_t v18 = v6[3] >> 1;
        if (v6[2])
        {
          uint64_t v6[2] = 0LL;
        }

        uint64_t v8 = (_BYTE *)(v17 + v18);
        size_t v7 = (v16 >> 1) - v18;
        swift_release();
        unint64_t v6 = v15;
      }

      BOOL v20 = __OFSUB__(v7--, 1LL);
      if (v20) {
        break;
      }
      *v8++ = v10;
      if (!--v5) {
        goto LABEL_19;
      }
    }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }

void *sub_186F6A45C(_OWORD *a1)
{
  v24[1] = *MEMORY[0x1895F89C0];
  __int128 v1 = a1[1];
  v23[0] = *a1;
  v23[1] = v1;
  void v23[2] = a1[2];
  size_t v2 = sub_186F4B3D0((size_t)v23, (unint64_t)v24);
  uint64_t v3 = *(void *)(v2 + 16);
  size_t v4 = (void *)MEMORY[0x18961AFE8];
  size_t v5 = 0LL;
  if (v3)
  {
    unint64_t v6 = (_BYTE *)(MEMORY[0x18961AFE8] + 32LL);
    size_t v7 = (char *)(v2 + 32);
    while (1)
    {
      char v9 = *v7++;
      char v8 = v9;
      if (!v5)
      {
        unint64_t v10 = v4[3];
        int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
        if (v11 <= 1) {
          uint64_t v12 = 1LL;
        }
        else {
          uint64_t v12 = v11;
        }
        __swift_instantiateConcreteTypeFromMangledName(qword_18C4B5430);
        int64_t v13 = (void *)swift_allocObject();
        size_t v14 = 2 * _swift_stdlib_malloc_size(v13) - 64;
        void v13[2] = v12;
        v13[3] = v14;
        unint64_t v15 = (unint64_t)(v13 + 4);
        size_t v16 = v4[3] >> 1;
        if (v4[2])
        {
          void v4[2] = 0LL;
        }

        unint64_t v6 = (_BYTE *)(v15 + v16);
        size_t v5 = (v14 >> 1) - v16;
        swift_release();
        size_t v4 = v13;
      }

      BOOL v18 = __OFSUB__(v5--, 1LL);
      if (v18) {
        break;
      }
      *v6++ = v8;
      if (!--v3) {
        goto LABEL_19;
      }
    }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }

void *sub_186F6A5F0(_OWORD *a1)
{
  v25[1] = *MEMORY[0x1895F89C0];
  __int128 v1 = a1[1];
  v24[0] = *a1;
  v24[1] = v1;
  __int128 v2 = a1[3];
  void v24[2] = a1[2];
  _OWORD v24[3] = v2;
  size_t v3 = sub_186F4B3D0((size_t)v24, (unint64_t)v25);
  uint64_t v4 = *(void *)(v3 + 16);
  size_t v5 = (void *)MEMORY[0x18961AFE8];
  size_t v6 = 0LL;
  if (v4)
  {
    size_t v7 = (_BYTE *)(MEMORY[0x18961AFE8] + 32LL);
    char v8 = (char *)(v3 + 32);
    while (1)
    {
      char v10 = *v8++;
      char v9 = v10;
      if (!v6)
      {
        unint64_t v11 = v5[3];
        int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
        if (v12 <= 1) {
          uint64_t v13 = 1LL;
        }
        else {
          uint64_t v13 = v12;
        }
        __swift_instantiateConcreteTypeFromMangledName(qword_18C4B5430);
        size_t v14 = (void *)swift_allocObject();
        size_t v15 = 2 * _swift_stdlib_malloc_size(v14) - 64;
        void v14[2] = v13;
        v14[3] = v15;
        unint64_t v16 = (unint64_t)(v14 + 4);
        size_t v17 = v5[3] >> 1;
        if (v5[2])
        {
          v5[2] = 0LL;
        }

        size_t v7 = (_BYTE *)(v16 + v17);
        size_t v6 = (v15 >> 1) - v17;
        swift_release();
        size_t v5 = v14;
      }

      BOOL v19 = __OFSUB__(v6--, 1LL);
      if (v19) {
        break;
      }
      *v7++ = v9;
      if (!--v4) {
        goto LABEL_19;
      }
    }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }

uint64_t sub_186F6A784(uint64_t a1, uint64_t a2)
{
  return sub_186F6A79C(a1, a2, (uint64_t (*)(void))AES.CCM.Nonce.makeIterator());
}

uint64_t sub_186F6A790(uint64_t a1, uint64_t a2)
{
  return sub_186F6A79C(a1, a2, (uint64_t (*)(void))AES.GCM.Nonce.makeIterator());
}

uint64_t sub_186F6A79C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  uint64_t v5 = *(void *)(result + 16);
  size_t v6 = (void *)MEMORY[0x18961AFE8];
  uint64_t v7 = v5 - v4;
  if (v5 != v4)
  {
    if (v5 > v4)
    {
      if (v4 < 0)
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }

      if (!v5)
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }

      size_t v8 = 0LL;
      char v9 = (char *)(v4 + result + 32);
      char v10 = (_BYTE *)(MEMORY[0x18961AFE8] + 32LL);
      while (1)
      {
        char v12 = *v9++;
        char v11 = v12;
        if (!v8)
        {
          unint64_t v13 = v6[3];
          int64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
          if (v14 <= 1) {
            uint64_t v15 = 1LL;
          }
          else {
            uint64_t v15 = v14;
          }
          __swift_instantiateConcreteTypeFromMangledName(qword_18C4B5430);
          unint64_t v16 = (void *)swift_allocObject();
          size_t v17 = 2 * _swift_stdlib_malloc_size(v16) - 64;
          id v16[2] = v15;
          v16[3] = v17;
          unint64_t v18 = (unint64_t)(v16 + 4);
          size_t v19 = v6[3] >> 1;
          if (v6[2])
          {
            uint64_t v6[2] = 0LL;
          }

          char v10 = (_BYTE *)(v18 + v19);
          size_t v8 = (v17 >> 1) - v19;
          uint64_t result = swift_release();
          size_t v6 = v16;
        }

        BOOL v21 = __OFSUB__(v8--, 1LL);
        if (v21) {
          break;
        }
        *v10++ = v11;
        if (!--v7) {
          goto LABEL_23;
        }
      }

      __break(1u);
LABEL_28:
      __break(1u);
    }

    __break(1u);
    goto LABEL_30;
  }

  size_t v8 = 0LL;
LABEL_23:
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v22 = v6[3];
  if (v22 < 2) {
    return (uint64_t)v6;
  }
  unint64_t v23 = v22 >> 1;
  BOOL v21 = __OFSUB__(v23, v8);
  unint64_t v24 = v23 - v8;
  if (!v21)
  {
    uint64_t v6[2] = v24;
    return (uint64_t)v6;
  }

uint64_t sub_186F6A918(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t result = sub_186F33C98(a1, a2);
  uint64_t v9 = *(void *)(v5 + 16);
  char v10 = (void *)MEMORY[0x18961AFE8];
  uint64_t v11 = v9 - v7;
  if (v9 != v7)
  {
    if (v9 > v7)
    {
      if (v7 < 0)
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }

      if (!v9)
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }

      size_t v12 = 0LL;
      unint64_t v13 = (char *)(v7 + v5 + 32);
      int64_t v14 = (_BYTE *)(MEMORY[0x18961AFE8] + 32LL);
      while (1)
      {
        char v16 = *v13++;
        char v15 = v16;
        if (!v12)
        {
          unint64_t v17 = v10[3];
          int64_t v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
          if (v18 <= 1) {
            uint64_t v19 = 1LL;
          }
          else {
            uint64_t v19 = v18;
          }
          __swift_instantiateConcreteTypeFromMangledName(qword_18C4B5430);
          unint64_t v20 = (void *)swift_allocObject();
          size_t v21 = 2 * _swift_stdlib_malloc_size(v20) - 64;
          _OWORD v20[2] = v19;
          v20[3] = v21;
          unint64_t v22 = (unint64_t)(v20 + 4);
          size_t v23 = v10[3] >> 1;
          if (v10[2])
          {
            v10[2] = 0LL;
          }

          int64_t v14 = (_BYTE *)(v22 + v23);
          size_t v12 = (v21 >> 1) - v23;
          uint64_t result = swift_release();
          char v10 = v20;
        }

        BOOL v25 = __OFSUB__(v12--, 1LL);
        if (v25) {
          break;
        }
        *v14++ = v15;
        if (!--v11) {
          goto LABEL_23;
        }
      }

      __break(1u);
LABEL_28:
      __break(1u);
    }

    __break(1u);
    goto LABEL_30;
  }

  size_t v12 = 0LL;
LABEL_23:
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v26 = v10[3];
  if (v26 < 2) {
    return (uint64_t)v10;
  }
  unint64_t v27 = v26 >> 1;
  BOOL v25 = __OFSUB__(v27, v12);
  unint64_t v28 = v27 - v12;
  if (!v25)
  {
    v10[2] = v28;
    return (uint64_t)v10;
  }

void *sub_186F6AAB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v25[1] = *MEMORY[0x1895F89C0];
  v24[0] = a1;
  v24[1] = a2;
  v25[0] = a3;
  size_t v3 = sub_186F4B3D0((size_t)v24, (unint64_t)v25 + 4);
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = (void *)MEMORY[0x18961AFE8];
  size_t v6 = 0LL;
  if (v4)
  {
    uint64_t v7 = (_BYTE *)(MEMORY[0x18961AFE8] + 32LL);
    size_t v8 = (char *)(v3 + 32);
    while (1)
    {
      char v10 = *v8++;
      char v9 = v10;
      if (!v6)
      {
        unint64_t v11 = v5[3];
        int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
        if (v12 <= 1) {
          uint64_t v13 = 1LL;
        }
        else {
          uint64_t v13 = v12;
        }
        __swift_instantiateConcreteTypeFromMangledName(qword_18C4B5430);
        int64_t v14 = (void *)swift_allocObject();
        size_t v15 = 2 * _swift_stdlib_malloc_size(v14) - 64;
        void v14[2] = v13;
        v14[3] = v15;
        unint64_t v16 = (unint64_t)(v14 + 4);
        size_t v17 = v5[3] >> 1;
        if (v5[2])
        {
          v5[2] = 0LL;
        }

        uint64_t v7 = (_BYTE *)(v16 + v17);
        size_t v6 = (v15 >> 1) - v17;
        swift_release();
        uint64_t v5 = v14;
      }

      BOOL v19 = __OFSUB__(v6--, 1LL);
      if (v19) {
        break;
      }
      *v7++ = v9;
      if (!--v4) {
        goto LABEL_19;
      }
    }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }

void *sub_186F6AC40(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  v23[0] = a1;
  v23[1] = a2;
  size_t v2 = sub_186F4B3D0((size_t)v23, (unint64_t)&v24);
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = (void *)MEMORY[0x18961AFE8];
  size_t v5 = 0LL;
  if (v3)
  {
    size_t v6 = (_BYTE *)(MEMORY[0x18961AFE8] + 32LL);
    uint64_t v7 = (char *)(v2 + 32);
    while (1)
    {
      char v9 = *v7++;
      char v8 = v9;
      if (!v5)
      {
        unint64_t v10 = v4[3];
        int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
        if (v11 <= 1) {
          uint64_t v12 = 1LL;
        }
        else {
          uint64_t v12 = v11;
        }
        __swift_instantiateConcreteTypeFromMangledName(qword_18C4B5430);
        uint64_t v13 = (void *)swift_allocObject();
        size_t v14 = 2 * _swift_stdlib_malloc_size(v13) - 64;
        void v13[2] = v12;
        v13[3] = v14;
        unint64_t v15 = (unint64_t)(v13 + 4);
        size_t v16 = v4[3] >> 1;
        if (v4[2])
        {
          void v4[2] = 0LL;
        }

        size_t v6 = (_BYTE *)(v15 + v16);
        size_t v5 = (v14 >> 1) - v16;
        swift_release();
        uint64_t v4 = v13;
      }

      BOOL v18 = __OFSUB__(v5--, 1LL);
      if (v18) {
        break;
      }
      *v6++ = v8;
      if (!--v3) {
        goto LABEL_19;
      }
    }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }

uint64_t sub_186F6ADC8(uint64_t result, int64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = 0LL;
  uint64_t v7 = 32LL;
  int64_t v8 = result;
  while (1)
  {
    BOOL v9 = v8 <= a2;
    if (a3 > 0) {
      BOOL v9 = v8 >= a2;
    }
    if (v9) {
      break;
    }
    BOOL v10 = __OFADD__(v8, a3);
    v8 += a3;
    if (v10) {
      int64_t v8 = (v8 >> 63) ^ 0x8000000000000000LL;
    }
    v7 += 8LL;
    BOOL v10 = __OFADD__(v6++, 1LL);
    if (v10)
    {
      __break(1u);
      break;
    }
  }

  if (v6 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B52B8);
    int64_t v11 = (int64_t *)swift_allocObject();
    uint64_t result = _swift_stdlib_malloc_size(v11);
    uint64_t v12 = result - 32;
    if (result < 32) {
      uint64_t v12 = result - 25;
    }
    uint64_t v13 = v12 >> 3;
    void v11[2] = v6;
    v11[3] = 2 * v13;
    size_t v14 = v11 + 4;
    uint64_t v15 = v13 & 0x7FFFFFFFFFFFFFFFLL;
LABEL_15:
    v15 -= v6;
    while (1)
    {
      BOOL v16 = v5 <= a2;
      if (a3 > 0) {
        BOOL v16 = v5 >= a2;
      }
      if (v16) {
        break;
      }
      if (__OFADD__(v5, a3)) {
        int64_t v17 = ((v5 + a3) >> 63) ^ 0x8000000000000000LL;
      }
      else {
        int64_t v17 = v5 + a3;
      }
      *v14++ = v5;
      uint64_t v5 = v17;
      if (!--v6) {
        goto LABEL_23;
      }
    }

    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }

  int64_t v11 = (int64_t *)MEMORY[0x18961AFE8];
  size_t v14 = (int64_t *)(MEMORY[0x18961AFE8] + 32LL);
  uint64_t v15 = *(void *)(MEMORY[0x18961AFE8] + 24LL) >> 1;
  if (v6) {
    goto LABEL_15;
  }
  int64_t v17 = result;
LABEL_23:
  BOOL v18 = v17 <= a2;
  if (a3 > 0) {
    BOOL v18 = v17 >= a2;
  }
  if (!v18)
  {
    uint64_t v19 = (a3 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      int64_t v20 = v17 + a3;
      if (__OFADD__(v17, a3))
      {
        int64_t v20 = v19;
        if (!v15) {
          goto LABEL_32;
        }
        int64_t v20 = v19;
      }

      else if (!v15)
      {
LABEL_32:
        unint64_t v21 = v11[3];
        int64_t v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
        if (v22 <= 1) {
          uint64_t v23 = 1LL;
        }
        else {
          uint64_t v23 = v22;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B52B8);
        uint64_t v24 = (int64_t *)swift_allocObject();
        int64_t v25 = _swift_stdlib_malloc_size(v24);
        uint64_t v26 = v25 - 32;
        if (v25 < 32) {
          uint64_t v26 = v25 - 25;
        }
        uint64_t v27 = v26 >> 3;
        void v24[2] = v23;
        _OWORD v24[3] = 2 * (v26 >> 3);
        unint64_t v28 = (unint64_t)(v24 + 4);
        unint64_t v29 = (unint64_t)v11[3] >> 1;
        if (v11[2])
        {
          void v11[2] = 0LL;
        }

        size_t v14 = (int64_t *)(v28 + 8 * v29);
        uint64_t v15 = (v27 & 0x7FFFFFFFFFFFFFFFLL) - v29;
        uint64_t result = swift_release();
        int64_t v11 = v24;
        uint64_t v19 = (a3 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
      }

      BOOL v10 = __OFSUB__(v15--, 1LL);
      if (v10) {
        goto LABEL_57;
      }
      *v14++ = v17;
      BOOL v31 = v20 <= a2;
      if (a3 > 0) {
        BOOL v31 = v20 >= a2;
      }
      int64_t v17 = v20;
    }

    while (!v31);
  }

  unint64_t v32 = v11[3];
  if (v32 < 2) {
    return (uint64_t)v11;
  }
  unint64_t v33 = v32 >> 1;
  BOOL v10 = __OFSUB__(v33, v15);
  unint64_t v34 = v33 - v15;
  if (!v10)
  {
    void v11[2] = v34;
    return (uint64_t)v11;
  }

LABEL_59:
  __break(1u);
  return result;
}

uint64_t sub_186F6B048@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  int64_t v6 = a4 >> 1;
  if (a4 >> 1 == a3) {
    goto LABEL_10;
  }
  if ((uint64_t)(a4 >> 1) <= a3)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v7 = *(void *)(a2 + 48 * a3 + 8);
  if (v7 <= a5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v8 = a3 + 1;
  if (a3 + 1 != v6)
  {
    BOOL v9 = (void *)(a2 + 48 * a3 + 56);
    while (v8 < v6)
    {
      if (*v9 <= a5) {
        goto LABEL_12;
      }
      ++v8;
      v9 += 6;
      if (v6 == v8) {
        goto LABEL_9;
      }
    }

    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

BOOL sub_186F6B0D8(void *a1, void *a2)
{
  uint64_t v3 = a2[2];
  if (a1[2])
  {
    if (v3) {
      return (sub_186F3AF28(a1[3], a1[4], a1[5], a2[3], a2[4], a2[5]) & 1) != 0;
    }
LABEL_8:
    sub_186F6B178((uint64_t)a1);
    sub_186F6B178((uint64_t)a2);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return 0LL;
  }

  if (v3) {
    goto LABEL_8;
  }
  return 1LL;
}

uint64_t sub_186F6B178(uint64_t a1)
{
  return a1;
}

uint64_t sub_186F6B1A0(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v5 = a4 >> 1;
  int64_t v6 = (void *)MEMORY[0x18961AFE8];
  if (a4 >> 1 != a3)
  {
    char v7 = a4;
    uint64_t v8 = a3;
    uint64_t v10 = result;
    uint64_t result = swift_unknownObjectRetain();
    if (v5 <= v8)
    {
LABEL_60:
      __break(1u);
LABEL_61:
      uint64_t result = swift_unknownObjectRelease();
      goto LABEL_62;
    }

    uint64_t v4 = 0LL;
    uint64_t v43 = v7 & 1;
    uint64_t v44 = v5;
    uint64_t v41 = a2 + 104;
    uint64_t v42 = v10;
    int64_t v11 = v6 + 4;
    uint64_t v45 = a2;
    while (1)
    {
      if (v5 <= v8) {
        goto LABEL_68;
      }
      uint64_t v12 = (char *)(a2 + 48 * v8);
      uint64_t v13 = v8 + 1;
      char v48 = *v12;
      if ((*v12 & 0x20) != 0) {
        break;
      }
      uint64_t v14 = *((void *)v12 + 2);
      if (!v14) {
        goto LABEL_87;
      }
      uint64_t v15 = *((void *)v12 + 4);
      uint64_t v46 = *((void *)v12 + 3);
      uint64_t v16 = *((void *)v12 + 5);
      uint64_t result = swift_unknownObjectRetain();
      uint64_t v17 = 0LL;
      uint64_t v18 = v13;
      uint64_t v13 = v15;
      if (!v4) {
        goto LABEL_43;
      }
      uint64_t v47 = v16;
      uint64_t v8 = v18;
      uint64_t v13 = v15;
LABEL_56:
      a2 = v45;
      uint64_t v27 = v46;
LABEL_57:
      BOOL v37 = __OFSUB__(v4--, 1LL);
      if (v37) {
        goto LABEL_70;
      }
      *(_BYTE *)int64_t v11 = v48;
      v11[1] = v14;
      void v11[2] = v27;
      v11[3] = v13;
      void v11[4] = v47;
      v11[5] = v17;
      *((_BYTE *)v11 + 48) = (v48 & 0x20) == 0;
      int64_t v5 = v44;
      if (v8 == v44) {
        goto LABEL_61;
      }
      v11 += 7;
      if (v8 >= v44) {
        goto LABEL_60;
      }
    }

    uint64_t v17 = *((void *)v12 + 1);
    uint64_t v19 = v5;
    if (v13 != v5)
    {
      if (v13 >= v5) {
        goto LABEL_81;
      }
      uint64_t v19 = v8 + 1;
      if (v17 < *(void *)(a2 + 48 * v13 + 8))
      {
        uint64_t v19 = v5;
        if (v8 + 2 != v5)
        {
          int64_t v20 = (void *)(v41 + 48 * v8);
          uint64_t v19 = v8 + 2;
          while (v19 < v5)
          {
            if (v17 >= *v20) {
              goto LABEL_20;
            }
            uint64_t v21 = v19 + 1;
            if (__OFADD__(v19, 1LL)) {
              goto LABEL_71;
            }
            ++v19;
            v20 += 6;
            if (v21 == v5)
            {
              uint64_t v19 = v5;
              goto LABEL_20;
            }
          }

LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
          return result;
        }

uint64_t sub_186F6B58C(char a1, uint64_t a2, uint64_t a3)
{
  LOBYTE(v7) = a1;
  uint64_t v8 = *(char **)a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_35;
  }
  while (1)
  {
    unint64_t v10 = *((void *)v8 + 2);
    unint64_t v9 = *((void *)v8 + 3);
    int64_t v11 = v9 >> 1;
    unint64_t v12 = v10 + 1;
    if (v9 >> 1 <= v10)
    {
      uint64_t v8 = sub_186F3CB8C((char *)(v9 > 1), v10 + 1, 1, v8);
      unint64_t v9 = *((void *)v8 + 3);
      int64_t v11 = v9 >> 1;
    }

    *((void *)v8 + 2) = v12;
    v8[v10 + 32] = v7;
    unint64_t v7 = v10 + 2;
    *((void *)v8 + 2) = v7;
    v8[v12 + 32] = 0;
    *(void *)a2 = v8;
    unint64_t v13 = v10 + 1;
    if (__OFSUB__(v7, 1LL))
    {
      __break(1u);
      goto LABEL_37;
    }

    uint64_t result = sub_186F68E98(a2, a3);
    if (v3) {
      return result;
    }
    a3 = *(void *)a2;
    unint64_t v15 = *(void *)(*(void *)a2 + 16LL);
    unint64_t v10 = v15 - v7;
    if (v15 >= v7)
    {
      unint64_t v4 = 71 - __clz(v10);
      uint64_t v8 = (char *)(v4 >> 3);
      sub_186F69140(v4 >> 3, v7, v15);
      a3 = *(void *)a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0) {
        goto LABEL_11;
      }
      goto LABEL_38;
    }

uint64_t sub_186F6B888(char a1, char **a2, uint64_t (*a3)(char **), uint64_t a4)
{
  return sub_186F6BBA4(a1, a2, a3, a4);
}

uint64_t sub_186F6B89C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4 = a4 >> 1;
  uint64_t result = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_18:
    __break(1u);
    return result;
  }

  uint64_t v6 = a3;
  uint64_t result = sub_186F87FF4();
  if (v4 != v6)
  {
    while (v6 < v4)
    {
      uint64_t v8 = (void *)(a2 + 48 * v6);
      uint64_t v9 = v8[3];
      uint64_t v10 = v8[4];
      unint64_t v11 = v8[5];
      uint64_t v12 = v8[2];
      sub_186F88000();
      sub_186F87FF4();
      if (v12)
      {
        sub_186F88000();
        unint64_t v13 = v11 >> 1;
        uint64_t result = (v11 >> 1) - v10;
        if (__OFSUB__(v11 >> 1, v10)) {
          goto LABEL_16;
        }
        uint64_t result = sub_186F87FF4();
        BOOL v14 = __OFSUB__(v13, v10);
        uint64_t v15 = v13 - v10;
        if (v15)
        {
          if ((v15 < 0) ^ v14 | (v15 == 0)) {
            goto LABEL_17;
          }
          uint64_t v16 = v9 + v10;
          do
          {
            ++v16;
            uint64_t result = sub_186F88000();
            --v15;
          }

          while (v15);
        }
      }

      else
      {
        uint64_t result = sub_186F88000();
      }

      if (++v6 == v4) {
        return result;
      }
    }

    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  return result;
}

void sub_186F6B98C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  int64_t v5 = a4 >> 1;
  int64_t v6 = a3;
  if (a4 >> 1 != a3)
  {
    unint64_t v7 = (void *)(a2 + 48 * a3 + 8);
    int64_t v6 = a3;
    while (1)
    {
      if (v6 >= v5)
      {
        __break(1u);
        goto LABEL_13;
      }

      if (*v7 <= a5) {
        break;
      }
      ++v6;
      v7 += 6;
      if (v5 == v6)
      {
        int64_t v6 = a4 >> 1;
        break;
      }
    }

    if (v6 >= a3) {
      goto LABEL_8;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

LABEL_8:
  if (v5 < a3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if (v5 < v6)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (v6 < 0) {
LABEL_16:
  }
    __break(1u);
}

uint64_t sub_186F6BA0C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = (uint64_t)sub_186F66C18(a1, a2, a3, a4);
  if (!v5)
  {
    unint64_t v11 = v10;
    unint64_t v12 = v10 >> 1;
    if (v9 == v10 >> 1)
    {
      __break(1u);
    }

    else if (v9 < (uint64_t)(v10 >> 1))
    {
      uint64_t v13 = result;
      uint64_t v14 = v8;
      uint64_t v15 = v8 + 48 * v9;
      char v16 = *(_BYTE *)v15;
      int64_t v17 = v9 + 1;
      if ((*(_BYTE *)v15 & 0x20) != 0)
      {
        uint64_t v31 = *(void *)(v15 + 8);
        sub_186F6B98C(result, v8, v9 + 1, v10, v31);
        uint64_t v29 = v21;
        uint64_t v34 = v22;
        uint64_t result = (v20 >> 1) - v19;
        if (__OFSUB__(v20 >> 1, v19))
        {
LABEL_17:
          __break(1u);
          goto LABEL_18;
        }

        uint64_t v23 = v19;
        unint64_t v24 = v20;
        sub_186F5E5B4(result, v13, v14, v17, v11);
        int64_t v17 = v25;
        unint64_t v27 = v26;
        sub_186F6B048(v29, v34, v23, v24, v31, v32);
        __int128 v28 = v32[1];
        __int128 v30 = v32[0];
        uint64_t v18 = v33;
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        unint64_t v12 = v27 >> 1;
      }

      else
      {
        __int128 v30 = *(_OWORD *)(v15 + 16);
        uint64_t result = *(void *)(v15 + 16);
        if (!(void)v30)
        {
LABEL_18:
          __break(1u);
          return result;
        }

        __int128 v28 = *(_OWORD *)(v15 + 32);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v18 = 0LL;
      }

      if (!__OFSUB__(v12, v17))
      {
        if (v12 == v17)
        {
          *(_BYTE *)a5 = v16;
          *(_OWORD *)(a5 + 8) = v30;
          *(_OWORD *)(a5 + 24) = v28;
          *(void *)(a5 + 40) = v18;
          *(_BYTE *)(a5 + 48) = (v16 & 0x20) == 0;
          return result;
        }

        goto LABEL_16;
      }

uint64_t sub_186F6BBA4(char a1, char **a2, uint64_t (*a3)(char **), uint64_t a4)
{
  LOBYTE(v8) = a1;
  int64_t v9 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_35;
  }
  while (1)
  {
    unint64_t v11 = *((void *)v9 + 2);
    unint64_t v10 = *((void *)v9 + 3);
    int64_t v12 = v10 >> 1;
    unint64_t v13 = v11 + 1;
    if (v10 >> 1 <= v11)
    {
      int64_t v9 = sub_186F3CB8C((char *)(v10 > 1), v11 + 1, 1, v9);
      unint64_t v10 = *((void *)v9 + 3);
      int64_t v12 = v10 >> 1;
    }

    *((void *)v9 + 2) = v13;
    v9[v11 + 32] = v8;
    unint64_t v8 = v11 + 2;
    *((void *)v9 + 2) = v8;
    v9[v13 + 32] = 0;
    *a2 = v9;
    int64_t v9 = (char *)(v11 + 1);
    if (__OFSUB__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_37;
    }

    uint64_t result = a3(a2);
    if (v4) {
      return result;
    }
    a4 = (uint64_t)*a2;
    unint64_t v15 = *((void *)*a2 + 2);
    unint64_t v13 = v15 - v8;
    if (v15 >= v8)
    {
      unint64_t v11 = 71 - __clz(v13);
      a3 = (uint64_t (*)(char **))(v11 >> 3);
      sub_186F69140(v11 >> 3, v8, v15);
      a4 = (uint64_t)*a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0) {
        goto LABEL_11;
      }
      goto LABEL_38;
    }

uint64_t sub_186F6BEA4(char a1, char **a2, char *a3)
{
  LOBYTE(v7) = a1;
  unint64_t v8 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_35;
  }
  while (1)
  {
    unint64_t v10 = *((void *)v8 + 2);
    unint64_t v9 = *((void *)v8 + 3);
    int64_t v11 = v9 >> 1;
    unint64_t v12 = v10 + 1;
    if (v9 >> 1 <= v10)
    {
      unint64_t v8 = sub_186F3CB8C((char *)(v9 > 1), v10 + 1, 1, v8);
      unint64_t v9 = *((void *)v8 + 3);
      int64_t v11 = v9 >> 1;
    }

    *((void *)v8 + 2) = v12;
    v8[v10 + 32] = v7;
    unint64_t v7 = v10 + 2;
    *((void *)v8 + 2) = v7;
    v8[v12 + 32] = 0;
    *a2 = v8;
    unint64_t v13 = v10 + 1;
    if (__OFSUB__(v7, 1LL))
    {
      __break(1u);
      goto LABEL_37;
    }

    uint64_t result = sub_186F70820(a2, (uint64_t)a3);
    if (v3) {
      return result;
    }
    a3 = *a2;
    unint64_t v15 = *((void *)*a2 + 2);
    unint64_t v10 = v15 - v7;
    if (v15 >= v7)
    {
      unint64_t v4 = 71 - __clz(v10);
      unint64_t v8 = (char *)(v4 >> 3);
      sub_186F69140(v4 >> 3, v7, v15);
      a3 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0) {
        goto LABEL_11;
      }
      goto LABEL_38;
    }

uint64_t sub_186F6C1A0(char a1, char **a2, uint64_t a3, char *a4)
{
  LOBYTE(v8) = a1;
  unint64_t v9 = (unint64_t)*a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_35;
  }
  while (1)
  {
    unint64_t v11 = *(void *)(v9 + 16);
    unint64_t v10 = *(void *)(v9 + 24);
    int64_t v12 = v10 >> 1;
    unint64_t v13 = v11 + 1;
    if (v10 >> 1 <= v11)
    {
      unint64_t v9 = (unint64_t)sub_186F3CB8C((char *)(v10 > 1), v11 + 1, 1, (char *)v9);
      unint64_t v10 = *(void *)(v9 + 24);
      int64_t v12 = v10 >> 1;
    }

    *(void *)(v9 + 16) = v13;
    *(_BYTE *)(v9 + v11 + 32) = v8;
    unint64_t v8 = v11 + 2;
    *(void *)(v9 + 16) = v8;
    *(_BYTE *)(v9 + v13 + 32) = 0;
    *a2 = (char *)v9;
    unint64_t v14 = v11 + 1;
    if (__OFSUB__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_37;
    }

    uint64_t result = sub_186F67800(0x30uLL, a2);
    if (v4) {
      return result;
    }
    sub_186F33D20(a3, (unint64_t)a4);
    sub_186F6DC48(a3, (uint64_t)a4);
    uint64_t v17 = v16;
    uint64_t v18 = sub_186F33C98(a3, (unint64_t)a4);
    MEMORY[0x1895F8858](v18);
    void v23[2] = v17;
    _OWORD v23[3] = v19;
    void v23[4] = 0LL;
    v23[5] = v20;
    sub_186F6BBA4(3, a2, sub_186F6CF34, (uint64_t)v23);
    swift_release();
    a4 = *a2;
    unint64_t v21 = *((void *)*a2 + 2);
    unint64_t v9 = v21 - v8;
    if (v21 >= v8)
    {
      unint64_t v11 = 71 - __clz(v9);
      a3 = v11 >> 3;
      sub_186F69140(v11 >> 3, v8, v21);
      a4 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0) {
        goto LABEL_11;
      }
      goto LABEL_38;
    }

uint64_t sub_186F6C52C(char a1, char **a2, char *a3)
{
  LOBYTE(v7) = a1;
  unint64_t v8 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_35;
  }
  while (1)
  {
    unint64_t v10 = *((void *)v8 + 2);
    unint64_t v9 = *((void *)v8 + 3);
    int64_t v11 = v9 >> 1;
    unint64_t v12 = v10 + 1;
    if (v9 >> 1 <= v10)
    {
      unint64_t v8 = sub_186F3CB8C((char *)(v9 > 1), v10 + 1, 1, v8);
      unint64_t v9 = *((void *)v8 + 3);
      int64_t v11 = v9 >> 1;
    }

    *((void *)v8 + 2) = v12;
    v8[v10 + 32] = v7;
    unint64_t v7 = v10 + 2;
    *((void *)v8 + 2) = v7;
    v8[v12 + 32] = 0;
    *a2 = v8;
    unint64_t v13 = v10 + 1;
    if (__OFSUB__(v7, 1LL))
    {
      __break(1u);
      goto LABEL_37;
    }

    __int128 v14 = *((_OWORD *)a3 + 1);
    v21[0] = *(_OWORD *)a3;
    v21[1] = v14;
    uint64_t v22 = *((void *)a3 + 4);
    uint64_t v24 = *(void *)&v21[0];
    sub_186F36734((uint64_t)v21 + 8, (uint64_t)v23, &qword_18C6B0868);
    sub_186F5C858((uint64_t)&v24);
    sub_186F5C880((uint64_t)v23);
    uint64_t result = sub_186F67478(48, a2, (char *)v21);
    if (v3) {
      return result;
    }
    unint64_t v8 = (char *)v21;
    *(double *)&__int128 v16 = MEMORY[0x1895F8858](result);
    v20[1] = v17;
    _OWORD v20[2] = v16;
    sub_186F6BBA4(3, a2, sub_186F6CBBC, (uint64_t)v20);
    a3 = *a2;
    unint64_t v18 = *((void *)*a2 + 2);
    unint64_t v10 = v18 - v7;
    if (v18 >= v7)
    {
      unint64_t v4 = 71 - __clz(v10);
      unint64_t v8 = (char *)(v4 >> 3);
      sub_186F69140(v4 >> 3, v7, v18);
      a3 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0) {
        goto LABEL_11;
      }
      goto LABEL_38;
    }

uint64_t sub_186F6C8C0(char a1, char **a2, char *a3)
{
  LOBYTE(v7) = a1;
  unint64_t v8 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_35;
  }
  while (1)
  {
    unint64_t v10 = *((void *)v8 + 2);
    unint64_t v9 = *((void *)v8 + 3);
    int64_t v11 = v9 >> 1;
    unint64_t v12 = v10 + 1;
    if (v9 >> 1 <= v10)
    {
      unint64_t v8 = sub_186F3CB8C((char *)(v9 > 1), v10 + 1, 1, v8);
      unint64_t v9 = *((void *)v8 + 3);
      int64_t v11 = v9 >> 1;
    }

    *((void *)v8 + 2) = v12;
    v8[v10 + 32] = v7;
    unint64_t v7 = v10 + 2;
    *((void *)v8 + 2) = v7;
    v8[v12 + 32] = 0;
    *a2 = v8;
    unint64_t v13 = v10 + 1;
    if (__OFSUB__(v7, 1LL))
    {
      __break(1u);
      goto LABEL_37;
    }

    uint64_t result = sub_186F5C690(a2, (uint64_t)a3);
    if (v3) {
      return result;
    }
    a3 = *a2;
    unint64_t v15 = *((void *)*a2 + 2);
    unint64_t v10 = v15 - v7;
    if (v15 >= v7)
    {
      unint64_t v4 = 71 - __clz(v10);
      unint64_t v8 = (char *)(v4 >> 3);
      sub_186F69140(v4 >> 3, v7, v15);
      a3 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0) {
        goto LABEL_11;
      }
      goto LABEL_38;
    }

uint64_t sub_186F6CBBC(char **a1)
{
  return sub_186F3AD04(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

unint64_t sub_186F6CBD8()
{
  unint64_t result = qword_18C6B1910;
  if (!qword_18C6B1910)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F8B81C, &type metadata for RSAPSSSPKIErrors);
    atomic_store(result, (unint64_t *)&qword_18C6B1910);
  }

  return result;
}

uint64_t sub_186F6CC1C(uint64_t *a1)
{
  return sub_186F5C824(a1, *(unint64_t **)(v1 + 16));
}

uint64_t destroy for ASN1.ASN1ParserNode()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for ASN1.ASN1ParserNode(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ASN1.ASN1ParserNode(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ASN1.ASN1ParserNode(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRelease();
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1.ASN1ParserNode(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1.ASN1ParserNode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ASN1.ASN1ParserNode()
{
  return &type metadata for ASN1.ASN1ParserNode;
}

ValueMetadata *type metadata accessor for ASN1.ASN1ParseResult()
{
  return &type metadata for ASN1.ASN1ParseResult;
}

ValueMetadata *type metadata accessor for ASN1.ASN1NodeCollection.Iterator()
{
  return &type metadata for ASN1.ASN1NodeCollection.Iterator;
}

uint64_t _s9CryptoKit4ASN1O18ASN1NodeCollectionVwcp_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

void *_s9CryptoKit4ASN1O18ASN1NodeCollectionVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t _s9CryptoKit4ASN1O18ASN1NodeCollectionVwta_0(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for ASN1.ASN1NodeCollection()
{
  return &type metadata for ASN1.ASN1NodeCollection;
}

uint64_t sub_186F6CF34(char **a1)
{
  return sub_186F6CBBC(a1);
}

BOOL static HPKE.Errors.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t HPKE.Errors.hash(into:)()
{
  return sub_186F87FF4();
}

uint64_t HPKE.Errors.hashValue.getter()
{
  return sub_186F88018();
}

unint64_t sub_186F6CFD0()
{
  unint64_t result = qword_18C6B1918;
  if (!qword_18C6B1918)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for HPKE.Errors, &type metadata for HPKE.Errors);
    atomic_store(result, (unint64_t *)&qword_18C6B1918);
  }

  return result;
}

uint64_t _s6ErrorsOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_186F6D060 + 4 * byte_186F8B689[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_186F6D094 + 4 * asc_186F8B684[v4]))();
}

uint64_t sub_186F6D094(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F6D09C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x186F6D0A4LL);
  }
  return result;
}

uint64_t sub_186F6D0B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x186F6D0B8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_186F6D0BC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F6D0C4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HPKE.Errors()
{
  return &type metadata for HPKE.Errors;
}

void sub_186F6D0E0()
{
  qword_18C6B5F00 = (uint64_t)&unk_189FABE60;
}

void sub_186F6D0F4()
{
  qword_18C6B5EF8 = (uint64_t)&unk_189FABE08;
}

uint64_t RSAPSSSPKI.rsaPublicKeyBytes.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_186F33D20(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t RSAPSSSPKI.rsaPublicKeyBytes.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_186F33C98(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t (*RSAPSSSPKI.rsaPublicKeyBytes.modify())()
{
  return nullsub_1;
}

uint64_t static RSAPSSSPKI.serialize(_:)(uint64_t a1, char *a2)
{
  unint64_t v7 = sub_186F3CB8C(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  sub_186F33D20(a1, (unint64_t)a2);
  sub_186F6C1A0(48, &v7, a1, a2);
  sub_186F33C98(a1, (unint64_t)a2);
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v6 = sub_186F3A07C((uint64_t)v7);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_186F6D238(uint64_t a1)
{
  if (*(_BYTE *)a1 == 48 && (*(_BYTE *)(a1 + 48) & 1) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    __int128 v6 = *(_OWORD *)(a1 + 24);
    v8[0] = *(_OWORD *)(a1 + 8);
    v8[1] = v6;
    uint64_t v9 = v5;
    swift_unknownObjectRetain_n();
    sub_186F6D7A0((uint64_t)v8, 2);
    if (v1
      || (sub_186F65184((uint64_t)v10),
          sub_186F5CC48( (uint64_t)v10,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8),  sub_186F6E394((uint64_t)v10, (uint64_t)v11),  v11[48] == 255))
    {
      swift_unknownObjectRelease();
      return sub_186F5CCB4( a1,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
    }

    else
    {
      sub_186F36690();
      swift_allocError();
      *unint64_t v7 = 3;
      swift_willThrow();
      sub_186F5CCB4( a1,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
      return swift_unknownObjectRelease();
    }
  }

  else
  {
    sub_186F36690();
    swift_allocError();
    *int v3 = 1;
    return swift_willThrow();
  }

uint64_t sub_186F6D37C(_BYTE *a1)
{
  if (*a1 == 48 && (a1[48] & 1) == 0)
  {
    swift_unknownObjectRetain_n();
    sub_186F6D4BC();
    if (v1
      || (sub_186F65184((uint64_t)v6),
          sub_186F5CC48( (uint64_t)v6,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8),  sub_186F6E394((uint64_t)v6, (uint64_t)v7),  v7[48] == 255))
    {
      swift_unknownObjectRelease();
      return sub_186F5CCB4( (uint64_t)a1,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
    }

    else
    {
      sub_186F36690();
      swift_allocError();
      *uint64_t v5 = 3;
      swift_willThrow();
      sub_186F5CCB4( (uint64_t)a1,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
      return swift_unknownObjectRelease();
    }
  }

  else
  {
    sub_186F36690();
    swift_allocError();
    *int v3 = 1;
    return swift_willThrow();
  }

char *sub_186F6D4BC()
{
  if (v34 == 255)
  {
    sub_186F36690();
LABEL_10:
    swift_allocError();
    char v13 = 3;
    goto LABEL_11;
  }

  v35[0] = v33[0];
  v35[1] = v33[1];
  _OWORD v35[2] = v33[2];
  unsigned __int8 v36 = v34;
  uint64_t result = sub_186F46784((char *)v35, 6, v1, v2);
  if (v0) {
    return result;
  }
  uint64_t v4 = result;
  if (qword_18C6B0608 != -1) {
    swift_once();
  }
  BOOL v5 = sub_186F46718(v4, (void *)qword_18C6B5EF8);
  swift_bridgeObjectRelease();
  if (!v5)
  {
    sub_186F6CBD8();
    goto LABEL_10;
  }

  sub_186F65184((uint64_t)v19);
  uint64_t v6 = v20;
  uint64_t v7 = v21;
  uint64_t v8 = v22;
  uint64_t v9 = v23;
  uint64_t v10 = v24;
  char v11 = v25;
  sub_186F6E394((uint64_t)v19, (uint64_t)v28);
  if (v32 == 255)
  {
    sub_186F6CBD8();
    swift_allocError();
    char v13 = 4;
LABEL_11:
    *unint64_t v12 = v13;
    return (char *)swift_willThrow();
  }

  if (v28[0] != 48 || (v32 & 1) != 0)
  {
    sub_186F36690();
    swift_allocError();
    *__int128 v14 = 1;
    swift_willThrow();
  }

  else
  {
    v16[0] = v29;
    v16[1] = v30;
    uint64_t v17 = v31;
    j__swift_unknownObjectRetain(v6, v7, v8, v9, v10, v11 & 1);
    swift_unknownObjectRetain();
    sub_186F6D7A0((uint64_t)v16, 5);
    sub_186F65184((uint64_t)v26);
    sub_186F5CC48( (uint64_t)v26,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
    sub_186F6E394((uint64_t)v26, (uint64_t)v27);
    if (v27[48] == 255)
    {
      swift_unknownObjectRelease();
      sub_186F5CC48( (uint64_t)v19,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
    }

    else
    {
      sub_186F36690();
      swift_allocError();
      *unint64_t v15 = 3;
      swift_willThrow();
      sub_186F5CC48( (uint64_t)v19,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
      swift_unknownObjectRelease();
    }
  }

  return (char *)sub_186F5CC48( (uint64_t)v19,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
}

uint64_t sub_186F6D7A0(uint64_t a1, char a2)
{
  if (v16 == 255)
  {
    sub_186F36690();
    swift_allocError();
    *uint64_t v10 = 3;
    return swift_willThrow();
  }

  v17[0] = v15[0];
  v17[1] = v15[1];
  void v17[2] = v15[2];
  unsigned __int8 v18 = v16;
  uint64_t result = (uint64_t)sub_186F46784((char *)v17, 6, v4, v5);
  if (v2) {
    return result;
  }
  uint64_t v7 = (void *)result;
  if (qword_18C6B0618 != -1) {
    swift_once();
  }
  BOOL v8 = sub_186F46718(v7, (void *)qword_18C6B5F08);
  swift_bridgeObjectRelease();
  if (!v8)
  {
    sub_186F6CBD8();
    swift_allocError();
    *char v11 = a2;
    return swift_willThrow();
  }

  sub_186F65184((uint64_t)v13);
  uint64_t result = sub_186F6E394((uint64_t)v13, (uint64_t)v14);
  if (v14[48] != 255)
  {
    if (v14[0] != 5)
    {
      sub_186F36690();
      swift_allocError();
      *uint64_t v9 = 3;
      swift_willThrow();
    }

    return sub_186F5CC48( (uint64_t)v13,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
  }

  return result;
}

uint64_t RSAPSSSPKI.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (v3)
  {
    sub_186F33C98(a1, a2);
    return swift_release();
  }

  swift_release();
  if (v19[0] != 48
    || (sub_186F3B4A4((uint64_t)&v20, (uint64_t)v28), sub_186F3B4A4((uint64_t)v28, (uint64_t)&v29), (v30 & 1) != 0))
  {
    sub_186F36690();
    swift_allocError();
    *uint64_t v9 = 1;
    swift_willThrow();
    sub_186F33C98(a1, a2);
    return sub_186F5CCB4( (uint64_t)v19,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  }

  sub_186F5CCB4( (uint64_t)v19,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
  sub_186F5CCB4( (uint64_t)v19,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
  sub_186F6E030();
  sub_186F65184((uint64_t)v21);
  sub_186F6E394((uint64_t)v21, (uint64_t)v24);
  if (v25 == 255)
  {
    sub_186F36690();
    swift_allocError();
    _BYTE *v18 = 3;
    swift_willThrow();
    swift_unknownObjectRelease();
    sub_186F5CCB4( (uint64_t)v19,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
    goto LABEL_7;
  }

  v26[0] = v24[0];
  v26[1] = v24[1];
  _OWORD v26[2] = v24[2];
  unsigned __int8 v27 = v25;
  uint64_t v10 = sub_186F3B2AC((unsigned __int8 *)v26, 3u);
  __int128 v14 = sub_186F3A12C(v10, v11, v12, v13);
  unint64_t v16 = v15;
  swift_unknownObjectRelease();
  sub_186F65184((uint64_t)v22);
  sub_186F5CC48( (uint64_t)v22,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
  sub_186F6E394((uint64_t)v22, (uint64_t)v23);
  if (v23[48] != 255)
  {
    sub_186F36690();
    swift_allocError();
    *uint64_t v17 = 3;
    swift_willThrow();
    sub_186F5CCB4( (uint64_t)v19,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
    sub_186F33C98((uint64_t)v14, v16);
    swift_unknownObjectRelease();
LABEL_7:
    sub_186F33C98(a1, a2);
    return sub_186F5CCB4( (uint64_t)v19,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  }

  swift_unknownObjectRelease();
  sub_186F5CCB4( (uint64_t)v19,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  sub_186F33C98(a1, a2);
  uint64_t result = sub_186F5CCB4( (uint64_t)v19,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  *a3 = v14;
  a3[1] = v16;
  return result;
}

void sub_186F6DC48(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_186F87ACC();
  MEMORY[0x1895F8858](v3);
  __asm { BR              X10 }

void *sub_186F6DCC4()
{
  if (BYTE6(v0))
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_18C4B5430);
    uint64_t v4 = (void *)swift_allocObject();
    size_t v6 = _swift_stdlib_malloc_size(v4);
    void v4[2] = BYTE6(v0);
    _OWORD v4[3] = 2 * v6 - 64;
    sub_186F33D20(v2, v0);
    uint64_t v7 = sub_186F87A0C();
    sub_186F33C98(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v7 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x186F6DD98LL);
    }
  }

  return v4;
}

uint64_t sub_186F6DDB0()
{
  uint64_t v1 = v15;
  uint64_t v2 = v16;
  uint64_t v3 = v17;
  uint64_t v4 = v18;
  uint64_t v5 = v19;
  char v6 = v20;
  sub_186F6E394((uint64_t)v14, (uint64_t)v23);
  if (v24 == 255)
  {
    sub_186F6CBD8();
    swift_allocError();
    *BOOL v8 = 1;
    return swift_willThrow();
  }

  else
  {
    v25[0] = v23[0];
    v25[1] = v23[1];
    void v25[2] = v23[2];
    unsigned __int8 v26 = v24;
    if (LOBYTE(v23[0]) == 48
      && (sub_186F3B4A4((uint64_t)v25 + 8, (uint64_t)v27), sub_186F3B4A4((uint64_t)v27, (uint64_t)v28), (v30 & 1) == 0))
    {
      v12[0] = v28[0];
      v12[1] = v28[1];
      uint64_t v13 = v29;
      uint64_t v10 = v6 & 1;
      j__swift_unknownObjectRetain(v1, v2, v3, v4, v5, v10);
      j__swift_unknownObjectRetain(v1, v2, v3, v4, v5, v10);
      sub_186F658A8((uint64_t)v12, 0LL, 2);
      if (v0
        || (sub_186F658C4((uint64_t)v12, 1uLL, 2),
            sub_186F65C34((uint64_t)v12, 2uLL, 2),
            sub_186F65184((uint64_t)v21),
            sub_186F5CC48( (uint64_t)v21,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8),  sub_186F6E394((uint64_t)v21, (uint64_t)v22),  v22[48] == 255))
      {
        swift_unknownObjectRelease();
        sub_186F5CC48( (uint64_t)v14,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
      }

      else
      {
        sub_186F36690();
        swift_allocError();
        *uint64_t v11 = 3;
        swift_willThrow();
        sub_186F5CC48( (uint64_t)v14,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
        swift_unknownObjectRelease();
      }
    }

    else
    {
      sub_186F36690();
      swift_allocError();
      *uint64_t v7 = 1;
      swift_willThrow();
    }

    return sub_186F5CC48( (uint64_t)v14,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
  }

uint64_t sub_186F6E030()
{
  uint64_t v2 = v19;
  uint64_t v1 = v20;
  uint64_t v4 = v21;
  uint64_t v3 = v22;
  uint64_t v5 = v23;
  char v6 = v24;
  sub_186F6E394((uint64_t)v18, (uint64_t)v32);
  if (v33 == 255)
  {
    sub_186F36690();
    swift_allocError();
    *BOOL v8 = 0;
    return swift_willThrow();
  }

  v34[0] = v32[0];
  v34[1] = v32[1];
  _OWORD v34[2] = v32[2];
  unsigned __int8 v35 = v33;
  if (LOBYTE(v32[0]) == 48)
  {
    sub_186F3B4A4((uint64_t)v34 + 8, (uint64_t)v36);
    sub_186F3B4A4((uint64_t)v36, (uint64_t)&v37);
    if ((v38 & 1) == 0)
    {
      sub_186F65184((uint64_t)v25);
      sub_186F6E394((uint64_t)v25, (uint64_t)v28);
      if (v29 == 255)
      {
        sub_186F36690();
        swift_allocError();
        *uint64_t v16 = 3;
        sub_186F5CC48( (uint64_t)v18,  (void (*)(void, void, void, void, void, void, void))sub_186F5CC84);
        j__swift_unknownObjectRetain(v2, v1, v4, v3, v5, v6 & 1);
      }

      else
      {
        v30[0] = v28[0];
        v30[1] = v28[1];
        void v30[2] = v28[2];
        unsigned __int8 v31 = v29;
        sub_186F5CC48( (uint64_t)v18,  (void (*)(void, void, void, void, void, void, void))sub_186F5CC84);
        j__swift_unknownObjectRetain(v2, v1, v4, v3, v5, v6 & 1);
        uint64_t v12 = sub_186F46784((char *)v30, 6, v10, v11);
        if (v0) {
          goto LABEL_16;
        }
        uint64_t v13 = v12;
        if (qword_18C6B0610 != -1) {
          swift_once();
        }
        BOOL v14 = sub_186F46718(v13, (void *)qword_18C6B5F00);
        swift_bridgeObjectRelease();
        if (v14)
        {
          sub_186F6DDB0();
          sub_186F65184((uint64_t)v26);
          sub_186F5CC48( (uint64_t)v26,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
          sub_186F6E394((uint64_t)v26, (uint64_t)v27);
          if (v27[48] != 255)
          {
            sub_186F36690();
            swift_allocError();
            *uint64_t v15 = 3;
            swift_willThrow();
            sub_186F5CC48( (uint64_t)v18,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
            swift_unknownObjectRelease();
            return sub_186F5CC48( (uint64_t)v18,  (void (*)(void, void, void, void, void, void, void))sub_186F367D8);
          }

uint64_t sub_186F6E394(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B5298);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for RSAPSSSPKI()
{
  return &type metadata for RSAPSSSPKI;
}

uint64_t getEnumTagSinglePayload for RSAPSSSPKIErrors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

uint64_t storeEnumTagSinglePayload for RSAPSSSPKIErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_186F6E4C8 + 4 * byte_186F8B775[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_186F6E4FC + 4 * byte_186F8B770[v4]))();
}

uint64_t sub_186F6E4FC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F6E504(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x186F6E50CLL);
  }
  return result;
}

uint64_t sub_186F6E518(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x186F6E520LL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_186F6E524(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186F6E52C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RSAPSSSPKIErrors()
{
  return &type metadata for RSAPSSSPKIErrors;
}

unint64_t sub_186F6E54C()
{
  unint64_t result = qword_18C6B1920;
  if (!qword_18C6B1920)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F8B7F4, &type metadata for RSAPSSSPKIErrors);
    atomic_store(result, (unint64_t *)&qword_18C6B1920);
  }

  return result;
}

uint64_t Curve25519.Signing.PrivateKey.init()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = sub_186F87CE8();
  *(void *)(v2 + 16) = 32LL;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  uint64_t v5 = v2;
  unint64_t v3 = sub_186F42344(0x20uLL, (uint64_t)&v5);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t Curve25519.Signing.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_186F6EAA4();
  *a1 = result;
  return result;
}

uint64_t Curve25519.Signing.PrivateKey.init<A>(rawRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = sub_186F6F088();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  if (!v3) {
    *a3 = v7;
  }
  return result;
}

uint64_t Curve25519.Signing.PrivateKey.rawRepresentation.getter()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = sub_186F41BA4(v0);
  swift_release();
  return v1;
}

uint64_t Curve25519.Signing.PublicKey.init<A>(rawRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = sub_186F6F0F4();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  if (!v3) {
    *a3 = v7;
  }
  return result;
}

uint64_t Curve25519.Signing.PublicKey.rawRepresentation.getter()
{
  uint64_t v0 = sub_186F87CDC();
  uint64_t v1 = sub_186F3A07C(v0);
  swift_bridgeObjectRelease();
  return v1;
}

ValueMetadata *type metadata accessor for Curve25519.Signing()
{
  return &type metadata for Curve25519.Signing;
}

ValueMetadata *type metadata accessor for Curve25519.Signing.PrivateKey()
{
  return &type metadata for Curve25519.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for Curve25519.Signing.PublicKey()
{
  return &type metadata for Curve25519.Signing.PublicKey;
}

uint64_t sub_186F6E7A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (!a1) {
    goto LABEL_8;
  }
  init_ccec_ctx_pub();
  swift_beginAccess();
  if (!ccrng()) {
    goto LABEL_9;
  }
  if (ccec_diversify_pub_twin())
  {
    __break(1u);
    goto LABEL_7;
  }

  size_t v3 = ccec_export_pub_size();
  uint64_t v4 = sub_186F87CE8();
  *(void *)(v4 + 16) = v3;
  bzero((void *)(v4 + 32), v3);
  uint64_t result = ccec_export_pub();
  if ((_DWORD)result)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }

  *a2 = v4;
  return result;
}

uint64_t sub_186F6E8E0(uint64_t a1, uint64_t a2, void **a3)
{
  if (!a1) {
    goto LABEL_5;
  }
  if (!ccrng()) {
    goto LABEL_6;
  }
  uint64_t result = ccec_diversify_priv_twin();
  if ((_DWORD)result)
  {
    __break(1u);
LABEL_5:
    __break(1u);
LABEL_6:
    __break(1u);
  }

  return result;
}

uint64_t ccec_ctx_k(void **a1)
{
  return (uint64_t)&a1[3 * **a1 + 2];
}

ValueMetadata *_s7ASN1AnyVMa()
{
  return &_s7ASN1AnyVN;
}

uint64_t sub_186F6E9D4()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3] >> 1;
  uint64_t result = v2 - v1;
  if (__OFSUB__(v2, v1))
  {
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v4 = v0[1];
  uint64_t result = sub_186F87FF4();
  BOOL v5 = __OFSUB__(v2, v1);
  uint64_t v6 = v2 - v1;
  if (!v6) {
    return result;
  }
  if ((v6 < 0) ^ v5 | (v6 == 0))
  {
LABEL_8:
    __break(1u);
    return result;
  }

  uint64_t v7 = v4 + v1;
  do
  {
    ++v7;
    uint64_t result = sub_186F88000();
    --v6;
  }

  while (v6);
  return result;
}

unint64_t sub_186F6EA40()
{
  unint64_t result = qword_18C6B1940;
  if (!qword_18C6B1940)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F8B898, &_s7ASN1AnyVN);
    atomic_store(result, (unint64_t *)&qword_18C6B1940);
  }

  return result;
}

ValueMetadata *_s33CoreCryptoCurve25519PublicKeyImplVMa_0()
{
  return &_s33CoreCryptoCurve25519PublicKeyImplVN_0;
}

ValueMetadata *_s34CoreCryptoCurve25519PrivateKeyImplVMa_0()
{
  return &_s34CoreCryptoCurve25519PrivateKeyImplVN_0;
}

uint64_t sub_186F6EAA4()
{
  uint64_t v0 = sub_186F87CE8();
  *(void *)(v0 + 16) = 32LL;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  if (ccsha512_di())
  {
    if (!cced25519_make_pub())
    {
      uint64_t v1 = sub_186F87CDC();
      size_t v2 = sub_186F6F014(v1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }

    __break(1u);
  }

  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

void sub_186F6EB68(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

size_t sub_186F6EBBC()
{
  uint64_t v5 = v2;
  __int16 v6 = v0;
  char v7 = BYTE2(v0);
  char v8 = BYTE3(v0);
  char v9 = BYTE4(v0);
  char v10 = BYTE5(v0);
  if ((v0 & 0xFF000000000000LL) == 0x20000000000000LL)
  {
    size_t v1 = sub_186F4B3D0((size_t)&v5, (unint64_t)v11);
    sub_186F33C98(v2, v0);
  }

  else
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v3 = 0;
    *(_BYTE *)(v3 + 4) = 1;
    swift_willThrow();
    sub_186F33C98(v2, v0);
  }

  return v1;
}

uint64_t sub_186F6EE30(void *a1, void *a2, char **a3)
{
  if (!ccsha512_di()) {
    goto LABEL_9;
  }
  if (!ccrng())
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (!*a1) {
    goto LABEL_11;
  }
  __int16 v6 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    __int16 v6 = sub_186F3CB8C(0LL, *((void *)v6 + 2), 0, v6);
  }
  *a3 = v6;
  uint64_t result = cced25519_make_key_pair();
  if ((_DWORD)result)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  *a2 = 32LL;
  return result;
}

uint64_t sub_186F6EF3C(uint64_t result, uint64_t a2)
{
  if (!result || a2 - result != 32)
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v2 = 0;
    *(_BYTE *)(v2 + 4) = 1;
    return swift_willThrow();
  }

  return result;
}

size_t sub_186F6EFA0@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, size_t *a3@<X8>)
{
  if (a1 && a2 - a1 == 32)
  {
    size_t result = sub_186F4B3D0(a1, a2);
    *a3 = result;
  }

  else
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v5 = 0;
    *(_BYTE *)(v5 + 4) = 1;
    return swift_willThrow();
  }

  return result;
}

size_t sub_186F6F014(uint64_t a1)
{
  if (*(void *)(a1 + 16) == 32LL) {
    return sub_186F4B3D0(a1 + 32, a1 + 64);
  }
  sub_186F35D6C();
  swift_allocError();
  *(_DWORD *)uint64_t v2 = 0;
  *(_BYTE *)(v2 + 4) = 1;
  return swift_willThrow();
}

uint64_t sub_186F6F088()
{
  uint64_t result = sub_186F879B8();
  if (!v0) {
    return sub_186F41B44();
  }
  return result;
}

uint64_t sub_186F6F0F4()
{
  uint64_t result = sub_186F879B8();
  if (!v0) {
    return v2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Curve448()
{
  return &type metadata for Curve448;
}

uint64_t SecureEnclave.Curve25519.Signing.PrivateKey.signature<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_186F87DCC();
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  unint64_t v39 = (char *)&v35 - v10;
  uint64_t v36 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](v9);
  __int128 v37 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = swift_checkMetadataState();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v35 - v17;
  uint64_t v19 = *v3;
  uint64_t v43 = v3[1];
  uint64_t v44 = v19;
  uint64_t v20 = v3[2];
  uint64_t v41 = v3[3];
  uint64_t v42 = v20;
  v50[7] = a3;
  sub_186F87910();
  uint64_t v38 = v7;
  uint64_t v21 = sub_186F87D3C();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  v22(v18, v12);
  if (v21 == 1)
  {
    sub_186F87910();
    uint64_t v23 = v39;
    sub_186F87D60();
    v22(v16, v12);
    uint64_t v24 = AssociatedTypeWitness;
    uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1LL, AssociatedTypeWitness);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      return result;
    }

    uint64_t v48 = v24;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v47);
    (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(boxed_opaque_existential_1, v23, v24);
    sub_186F3A3A0(&v47, (uint64_t)v50);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v37, a1, a2);
    uint64_t v28 = sub_186F87CF4();
    v50[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53B8);
    v50[4] = sub_186F494E4();
    v50[0] = v28;
  }

  uint64_t v30 = v44;
  uint64_t v29 = v45;
  uint64_t v32 = v42;
  uint64_t v31 = v43;
  uint64_t v33 = v41;
  sub_186F33FC8((uint64_t)v50, (uint64_t)&v47);
  unsigned __int8 v34 = __swift_project_boxed_opaque_existential_1(&v47, v48);
  MEMORY[0x1895F8858](v34);
  *(&v35 - 4) = v30;
  *(&v35 - 3) = v31;
  *(&v35 - 2) = v32;
  *(&v35 - 1) = v33;
  sub_186F879B8();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  if (!v29) {
    unsigned __int8 v34 = v46;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
  return (uint64_t)v34;
}

uint64_t sub_186F6F524@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X5>, void *a4@<X8>)
{
  uint64_t v25 = a4;
  uint64_t v8 = sub_186F879F4();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t result = MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, *MEMORY[0x189606B30], v8);
    sub_186F879E8();
    uint64_t v13 = a2 - a1;
    if (v13)
    {
      sub_186F879AC();
      swift_allocObject();
      swift_retain();
      uint64_t v17 = sub_186F87964();
      uint64_t v15 = sub_186F6F944(v17, v13);
      unint64_t v16 = v18;
      swift_release();
    }

    else
    {
      uint64_t v14 = (void (*)(uint64_t, void))sub_186F879E8();
      v14(a1, 0LL);
      swift_release();
      swift_release();
      uint64_t v15 = 0LL;
      unint64_t v16 = 0xC000000000000000LL;
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    uint64_t v19 = sub_186F6F6F0(a3);
    if (v4)
    {
      return sub_186F33C98(v15, v16);
    }

    else
    {
      uint64_t v21 = v19;
      uint64_t v22 = v20;
      uint64_t result = sub_186F33C98(v15, v16);
      uint64_t v23 = v25;
      *uint64_t v25 = v21;
      v23[1] = v22;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_186F6F6D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_186F6F524(a1, a2, *(void **)(v3 + 40), a3);
}

void *sub_186F6F6F0(void *a1)
{
  v11[1] = *(id *)MEMORY[0x1895F89C0];
  uint64_t v2 = (void *)sub_186F87A84();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6B05F8);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_186F8A440;
  if (!*MEMORY[0x18960BCA8]) {
    __break(1u);
  }
  *(void *)(v3 + 32) = sub_186F87BBC();
  *(void *)(v3 + 40) = v4;
  uint64_t v5 = (void *)sub_186F87CC4();
  swift_bridgeObjectRelease();
  sub_186F7D274(MEMORY[0x18961AFE8]);
  __int16 v6 = (void *)sub_186F87B14();
  swift_bridgeObjectRelease();
  v11[0] = 0LL;
  id v7 = objc_msgSend(a1, sel_sign_algorithms_parameters_error_, v2, v5, v6, v11);

  id v8 = v11[0];
  if (v7)
  {
    uint64_t v9 = (void *)sub_186F87A9C();
  }

  else
  {
    uint64_t v9 = v8;
    sub_186F879D0();

    swift_willThrow();
  }

  return v9;
}

uint64_t sub_186F6F884(_BYTE *__src, _BYTE *a2)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0LL;
  }
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_186F6F944(uint64_t result, uint64_t a2)
{
  if (!a2)
  {
    swift_release();
    return 0LL;
  }

  if (a2 > 14)
  {
    sub_186F87A24();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0LL;
    *(void *)(v3 + 24) = a2;
    return v3;
  }

  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = (_BYTE *)sub_186F8797C();
    if (!v4)
    {
LABEL_10:
      uint64_t v5 = sub_186F87994();
      if (v5 >= a2) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = v5;
      }
      id v7 = &v4[v6];
      if (v4) {
        id v8 = v7;
      }
      else {
        id v8 = 0LL;
      }
      uint64_t v3 = sub_186F6F884(v4, v8);
      swift_release();
      return v3;
    }

    uint64_t result = sub_186F879A0();
    if (!__OFSUB__(0LL, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }

  __break(1u);
  return result;
}

ValueMetadata *_s34CoreCryptoCurve25519PrivateKeyImplVMa()
{
  return &_s34CoreCryptoCurve25519PrivateKeyImplVN;
}

ValueMetadata *_s33CoreCryptoCurve25519PublicKeyImplVMa()
{
  return &_s33CoreCryptoCurve25519PublicKeyImplVN;
}

void sub_186F6FA48(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

size_t sub_186F6FA9C()
{
  uint64_t v5 = v2;
  __int16 v6 = v0;
  char v7 = BYTE2(v0);
  char v8 = BYTE3(v0);
  char v9 = BYTE4(v0);
  char v10 = BYTE5(v0);
  if ((v0 & 0xFF000000000000LL) == 0x20000000000000LL)
  {
    size_t v1 = sub_186F4B3D0((size_t)&v5, (unint64_t)v11);
    sub_186F33C98(v2, v0);
  }

  else
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v3 = 0;
    *(_BYTE *)(v3 + 4) = 1;
    swift_willThrow();
    sub_186F33C98(v2, v0);
  }

  return v1;
}

size_t sub_186F6FD10()
{
  uint64_t v0 = sub_186F87CE8();
  *(void *)(v0 + 16) = 32LL;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  if (!ccrng()) {
LABEL_5:
  }
    __break(1u);
  if (cccurve25519_make_pub_with_rng())
  {
    __break(1u);
    goto LABEL_5;
  }

  uint64_t v1 = sub_186F87CDC();
  size_t v2 = sub_186F6F014(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_186F6FE14@<X0>(uint64_t a1@<X0>, void *a2@<X2>, _DWORD *a3@<X8>)
{
  if (!ccrng())
  {
    __break(1u);
    goto LABEL_6;
  }

  if (!*a2)
  {
LABEL_6:
    __break(1u);
LABEL_7:
    __break(1u);
  }

  if (!a1) {
    goto LABEL_7;
  }
  uint64_t result = cccurve25519_with_rng();
  *a3 = result;
  return result;
}

uint64_t sub_186F6FECC(unsigned __int8 *a1, unsigned __int8 a2)
{
  if (*a1 != a2)
  {
    sub_186F36690();
    swift_allocError();
    char v9 = 1;
LABEL_16:
    *char v8 = v9;
    swift_willThrow();
    sub_186F366D4((uint64_t)a1);
    return v2;
  }

  sub_186F3B4A4((uint64_t)(a1 + 8), (uint64_t)v10);
  uint64_t result = sub_186F3B4A4((uint64_t)v10, (uint64_t)&v11);
  if ((v15 & 1) != 0)
  {
    int64_t v5 = v14 >> 1;
    if (__OFSUB__(v14 >> 1, v13))
    {
      __break(1u);
    }

    else
    {
      uint64_t result = v11;
      if (v13 == v5)
      {
LABEL_12:
        sub_186F70D44(v11, v12, v13, v14);
        uint64_t v2 = v7;
        sub_186F366D4((uint64_t)a1);
        return v2;
      }

      if (v13 < v5)
      {
        if (v13 + 1 == v5) {
          goto LABEL_12;
        }
        if (v13 + 1 < v5)
        {
          int v6 = *(char *)(v12 + v13 + 1);
          if (*(_BYTE *)(v12 + v13))
          {
            goto LABEL_15;
          }

          if ((v6 & 0x80000000) == 0)
          {
LABEL_15:
            sub_186F36690();
            swift_allocError();
            char v9 = 4;
            goto LABEL_16;
          }

          goto LABEL_12;
        }

        goto LABEL_20;
      }
    }

    __break(1u);
LABEL_20:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_186F70014(unsigned __int8 *a1, unsigned __int8 a2)
{
  if (*a1 == a2)
  {
    sub_186F3B4A4((uint64_t)(a1 + 8), (uint64_t)v8);
    uint64_t result = sub_186F3B4A4((uint64_t)v8, (uint64_t)&v9);
    if ((v13 & 1) == 0)
    {
LABEL_23:
      __break(1u);
      return result;
    }

    int64_t v4 = v12 >> 1;
    if (__OFSUB__(v12 >> 1, v11))
    {
      __break(1u);
    }

    else
    {
      uint64_t result = v9;
      if (v11 == v4) {
        return result;
      }
      if (v11 < v4)
      {
        int v5 = *(unsigned __int8 *)(v10 + v11);
        if (v11 + 1 == v4)
        {
          if (!*(_BYTE *)(v10 + v11)) {
            return result;
          }
LABEL_14:
          if ((v5 & 0x80) == 0) {
            return result;
          }
          goto LABEL_17;
        }

        if (v11 + 1 < v4)
        {
          if (!*(_BYTE *)(v10 + v11))
          {
            goto LABEL_17;
          }

          if (v5 != 255) {
            goto LABEL_14;
          }
LABEL_17:
          sub_186F36690();
          swift_allocError();
          char v7 = 4;
          goto LABEL_18;
        }

        goto LABEL_22;
      }
    }

    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  sub_186F36690();
  swift_allocError();
  char v7 = 1;
LABEL_18:
  *int v6 = v7;
  swift_willThrow();
  return sub_186F366D4((uint64_t)a1);
}

void sub_186F70144(unsigned __int8 *a1, unsigned __int8 a2)
{
  if (*a1 != a2)
  {
    sub_186F36690();
    swift_allocError();
    char v7 = 1;
LABEL_18:
    *int v6 = v7;
    swift_willThrow();
    sub_186F366D4((uint64_t)a1);
    return;
  }

  sub_186F3B4A4((uint64_t)(a1 + 8), (uint64_t)v8);
  sub_186F3B4A4((uint64_t)v8, (uint64_t)&v9);
  if ((v13 & 1) != 0)
  {
    unint64_t v3 = v11;
    int64_t v4 = v12 >> 1;
    if (__OFSUB__(v12 >> 1, v11))
    {
      __break(1u);
    }

    else
    {
      if (v11 == v4)
      {
LABEL_15:
        sub_186F70284(v9, v10, v3, v12);
        return;
      }

      if (v11 < v4)
      {
        int v5 = *(unsigned __int8 *)(v10 + v11);
        if (v11 + 1 == v4)
        {
          if (!*(_BYTE *)(v10 + v11))
          {
            unint64_t v3 = v12 >> 1;
            goto LABEL_15;
          }

          goto LABEL_14;
        }

        if (v11 + 1 < v4)
        {
          if (*(_BYTE *)(v10 + v11))
          {
            if (v5 != 255)
            {
LABEL_14:
              if ((v5 & 0x80) == 0) {
                goto LABEL_15;
              }
            }
          }

          else
          {
            unint64_t v3 = v11 + 1;
          }

void sub_186F70284(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (v5 > 8)
    {
      sub_186F36690();
      swift_allocError();
      *int v6 = 3;
      swift_willThrow();
      swift_unknownObjectRelease();
      return;
    }

    uint64_t v9 = sub_186F7F1E4(0LL, 8 * v5, 8LL);
    uint64_t v10 = *(void *)(v9 + 16);
    if (!v10)
    {
LABEL_21:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return;
    }

    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    if (a3 <= v4) {
      uint64_t v13 = v4;
    }
    else {
      uint64_t v13 = a3;
    }
    unint64_t v14 = v13 - a3;
    while (v14 > v10 - 1)
    {
      unint64_t v16 = *(void *)(v9 + 8 * v11 + 32);
      if (v16 - 65 < 0xFFFFFFFFFFFFFF7FLL)
      {
        unint64_t v15 = 0LL;
      }

      else
      {
        unint64_t v17 = *(unsigned __int8 *)(a2 + a3 + v11);
        if ((v16 & 0x8000000000000000LL) != 0)
        {
          unint64_t v19 = v17 >> -(char)v16;
          if (v16 <= 0xFFFFFFFFFFFFFFC0LL) {
            unint64_t v15 = 0LL;
          }
          else {
            unint64_t v15 = v19;
          }
        }

        else
        {
          uint64_t v18 = v17 << v16;
          if (v16 >= 0x40) {
            unint64_t v15 = 0LL;
          }
          else {
            unint64_t v15 = v18;
          }
        }
      }

      ++v11;
      v12 |= v15;
      if (v10 == v11) {
        goto LABEL_21;
      }
    }

    __break(1u);
  }

  __break(1u);
LABEL_24:
  __break(1u);
}

void sub_186F703E8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
}

uint64_t sub_186F703FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (v29 == 255) {
    goto LABEL_8;
  }
  v30[0] = v28[0];
  v30[1] = v28[1];
  void v30[2] = v28[2];
  unsigned __int8 v31 = v29;
  uint64_t result = sub_186F6FECC((unsigned __int8 *)v30, 2u);
  if (v2) {
    return result;
  }
  if (result != 1
    || (sub_186F65184((uint64_t)v21), sub_186F36734((uint64_t)v21, (uint64_t)v24, &qword_18C4B5298), v25 == 255))
  {
LABEL_8:
    sub_186F36690();
    swift_allocError();
    *uint64_t v12 = 3;
    return swift_willThrow();
  }

  else
  {
    v26[0] = v24[0];
    v26[1] = v24[1];
    _OWORD v26[2] = v24[2];
    unsigned __int8 v27 = v25;
    if (LOBYTE(v24[0]) == 4)
    {
      sub_186F3B4A4((uint64_t)v26 + 8, (uint64_t)v32);
      uint64_t result = sub_186F3B4A4((uint64_t)v32, (uint64_t)v33);
      if ((v34 & 1) != 0)
      {
        uint64_t v6 = v33[0];
        uint64_t v7 = v33[1];
        uint64_t v8 = v33[2];
        uint64_t v9 = v33[3];
        uint64_t v10 = (void *)sub_186F66010(a1, 0LL, 2);
        uint64_t v11 = sub_186F66354(a1, 1uLL, 2);
        uint64_t result = sub_186F70EC8(v6, v7, v8, v9, v10, v11, v14, v15, (uint64_t *)v22, v16);
        __int128 v17 = v22[5];
        *(_OWORD *)(a2 + 64) = v22[4];
        *(_OWORD *)(a2 + 80) = v17;
        *(void *)(a2 + 96) = v23;
        __int128 v18 = v22[1];
        *(_OWORD *)a2 = v22[0];
        *(_OWORD *)(a2 + 16) = v18;
        __int128 v19 = v22[3];
        *(_OWORD *)(a2 + 32) = v22[2];
        *(_OWORD *)(a2 + 48) = v19;
      }

      else
      {
        __break(1u);
      }
    }

    else
    {
      sub_186F36690();
      swift_allocError();
      *uint64_t v13 = 1;
      swift_willThrow();
      return sub_186F367A0((uint64_t)v21);
    }
  }

  return result;
}

uint64_t sub_186F7063C@<X0>(void **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  if (qword_18C6B0678 != -1) {
    swift_once();
  }
  if (sub_186F46718((void *)qword_18C6B5F88, v5))
  {
    if (qword_18C6B0658 != -1) {
      swift_once();
    }
    uint64_t v6 = &qword_18C6B5F10;
LABEL_19:
    *(void *)a3 = *v6;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(v6 + 1);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(v6 + 3);
    swift_unknownObjectRetain();
    return sub_186F87CDC();
  }

  if (qword_18C6B0680 != -1) {
    swift_once();
  }
  if (sub_186F46718((void *)qword_18C6B5F90, v5))
  {
    if (qword_18C6B0660 != -1) {
      swift_once();
    }
    uint64_t v6 = &qword_18C6B5F38;
    goto LABEL_19;
  }

  if (qword_18C6B0688 != -1) {
    swift_once();
  }
  if (sub_186F46718((void *)qword_18C6B5F98, v5))
  {
    if (qword_18C6B0668 != -1) {
      swift_once();
    }
    uint64_t v6 = &qword_18C6B5F60;
    goto LABEL_19;
  }

  sub_186F36690();
  uint64_t v8 = swift_allocError();
  *uint64_t v9 = 3;
  uint64_t result = swift_willThrow();
  *a2 = v8;
  return result;
}

uint64_t sub_186F70820(char **a1, uint64_t a2)
{
  int64_t v4 = a1;
  *(void *)&v39[0] = 1LL;
  v38[2] = v39;
  sub_186F6B888(2, a1, (uint64_t (*)(char **))sub_186F6CC1C, (uint64_t)v38);
  __int128 v5 = *(_OWORD *)(a2 + 56);
  v37[1] = *(_OWORD *)(a2 + 40);
  void v37[2] = v5;
  sub_186F6B888(4, v4, (uint64_t (*)(char **))sub_186F5CBA0, (uint64_t)v37);
  uint64_t v6 = v2;
  sub_186F36734(a2, (uint64_t)v41, &qword_18C6B1960);
  sub_186F36734((uint64_t)v41, (uint64_t)v42, &qword_18C6B1960);
  uint64_t v7 = (void *)v42[0];
  if (v42[0])
  {
    char v34 = v4;
    uint64_t v8 = v42[1];
    uint64_t v45 = v42[2];
    unint64_t v35 = v42[4];
    uint64_t v36 = v42[3];
    v44[0] = v42[0];
    sub_186F71274(v41);
    sub_186F5C858((uint64_t)v44);
    uint64_t v9 = qword_18C6B0658;
    swift_unknownObjectRetain();
    if (v9 != -1) {
      swift_once();
    }
    uint64_t v10 = *(void *)algn_18C6B5F18;
    uint64_t v12 = *((void *)&xmmword_18C6B5F20 + 1);
    uint64_t v11 = xmmword_18C6B5F20;
    unint64_t v13 = qword_18C6B5F30;
    if (sub_186F46718((void *)qword_18C6B5F10, v7))
    {
      if (v10)
      {
        if (v8)
        {
          char v14 = sub_186F3AF28(v11, v12, v13, v45, v36, v35);
          sub_186F3670C((uint64_t)v44);
          swift_unknownObjectRelease();
          if ((v14 & 1) != 0) {
            goto LABEL_31;
          }
LABEL_11:
          sub_186F5C858((uint64_t)v44);
          uint64_t v15 = qword_18C6B0660;
          swift_unknownObjectRetain();
          if (v15 != -1) {
            swift_once();
          }
          uint64_t v16 = unk_18C6B5F40;
          uint64_t v18 = *((void *)&xmmword_18C6B5F48 + 1);
          uint64_t v17 = xmmword_18C6B5F48;
          unint64_t v19 = qword_18C6B5F58;
          if (sub_186F46718((void *)qword_18C6B5F38, v7))
          {
            if (v16)
            {
              if (v8)
              {
                char v20 = sub_186F3AF28(v17, v18, v19, v45, v36, v35);
                sub_186F3670C((uint64_t)v44);
                swift_unknownObjectRelease();
                if ((v20 & 1) != 0) {
                  goto LABEL_35;
                }
LABEL_20:
                sub_186F5C858((uint64_t)v44);
                uint64_t v21 = qword_18C6B0668;
                swift_unknownObjectRetain();
                if (v21 != -1) {
                  swift_once();
                }
                uint64_t v22 = *(void *)algn_18C6B5F68;
                uint64_t v24 = *((void *)&xmmword_18C6B5F70 + 1);
                uint64_t v23 = xmmword_18C6B5F70;
                unint64_t v25 = qword_18C6B5F80;
                if (sub_186F46718((void *)qword_18C6B5F60, v7))
                {
                  if (v22)
                  {
                    if (v8)
                    {
                      char v26 = sub_186F3AF28(v23, v24, v25, v45, v36, v35);
                      sub_186F3670C((uint64_t)v44);
                      swift_unknownObjectRelease();
                      if ((v26 & 1) != 0) {
                        goto LABEL_39;
                      }
LABEL_29:
                      sub_186F36690();
                      swift_allocError();
                      *unsigned __int8 v27 = 3;
                      swift_willThrow();
                      sub_186F3670C((uint64_t)v44);
                      return swift_unknownObjectRelease();
                    }
                  }

                  else if (!v8)
                  {
                    sub_186F3670C((uint64_t)v44);
LABEL_39:
                    if (qword_18C6B0688 != -1) {
                      swift_once();
                    }
                    unsigned __int8 v29 = &qword_18C6B5F98;
                    goto LABEL_42;
                  }
                }

                sub_186F3670C((uint64_t)v44);
                swift_unknownObjectRelease();
                goto LABEL_29;
              }
            }

            else if (!v8)
            {
              sub_186F3670C((uint64_t)v44);
LABEL_35:
              if (qword_18C6B0680 != -1) {
                swift_once();
              }
              unsigned __int8 v29 = &qword_18C6B5F90;
LABEL_42:
              int64_t v4 = v34;
              goto LABEL_43;
            }
          }

          sub_186F3670C((uint64_t)v44);
          swift_unknownObjectRelease();
          goto LABEL_20;
        }
      }

      else if (!v8)
      {
        sub_186F3670C((uint64_t)v44);
LABEL_31:
        int64_t v4 = v34;
        if (qword_18C6B0678 != -1) {
          swift_once();
        }
        unsigned __int8 v29 = &qword_18C6B5F88;
LABEL_43:
        uint64_t v30 = *v29;
        uint64_t v31 = sub_186F87CDC();
        *(void *)&v39[0] = v30;
        MEMORY[0x1895F8858](v31);
        uint64_t v33 = v39;
        sub_186F6B888(160, v4, sub_186F712A4, (uint64_t)v32);
        sub_186F3670C((uint64_t)v44);
        swift_bridgeObjectRelease();
        uint64_t result = swift_unknownObjectRelease();
        if (v6) {
          return result;
        }
        goto LABEL_44;
      }
    }

    sub_186F3670C((uint64_t)v44);
    swift_unknownObjectRelease();
    goto LABEL_11;
  }

LABEL_44:
  sub_186F36734(a2 + 72, (uint64_t)v40, &qword_18C6B1968);
  uint64_t result = sub_186F36734((uint64_t)v40, (uint64_t)v43, &qword_18C6B1968);
  if (*(void *)&v43[0])
  {
    v39[0] = v43[0];
    v39[1] = v43[1];
    MEMORY[0x1895F8858](result);
    uint64_t v33 = v39;
    return sub_186F6B888(161, v4, sub_186F70D00, (uint64_t)v32);
  }

  return result;
}

uint64_t sub_186F70D00(char **a1)
{
  uint64_t v2 = *(_OWORD **)(v1 + 16);
  v4[1] = *v2;
  void v4[2] = v2[1];
  return sub_186F6B888(3, a1, sub_186F6CBBC, (uint64_t)v4);
}

void sub_186F70D44(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = swift_unknownObjectRetain();
  sub_186F70284(v8, a2, a3, a4);
}

uint64_t sub_186F70EC8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  char v14 = a5;
  if (a5)
  {
    uint64_t v31 = a5;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    sub_186F7063C(&v31, &v29, (uint64_t)v30);
    if (v10)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      sub_186F5CB74(0LL);
      swift_unknownObjectRelease();
      return swift_unknownObjectRelease();
    }

    uint64_t v24 = a3;
    uint64_t v25 = a4;
    uint64_t v26 = a7;
    uint64_t v27 = a8;
    swift_bridgeObjectRelease();
    uint64_t v23 = v30[0];
    uint64_t v22 = v30[1];
    uint64_t v21 = v30[2];
    uint64_t v20 = v30[3];
    char v14 = (void *)v30[4];
  }

  else
  {
    uint64_t v24 = a3;
    uint64_t v25 = a4;
    uint64_t v26 = a7;
    uint64_t v27 = a8;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
  }

  sub_186F5CAF4(v23);
  sub_186F5CAF4(v23);
  sub_186F5CB74(v23);
  sub_186F5CB74(v23);
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  *a9 = v23;
  a9[1] = v22;
  a9[2] = v21;
  a9[3] = v20;
  a9[4] = (uint64_t)v14;
  a9[5] = a1;
  a9[6] = a2;
  a9[7] = v24;
  a9[8] = v25;
  a9[9] = a6;
  a9[10] = v26;
  a9[11] = v27;
  a9[12] = a10;
  return result;
}

uint64_t sub_186F710A4@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  if (*a1 != a2 || (a1[48] & 1) != 0)
  {
    sub_186F36690();
    swift_allocError();
    *uint64_t v6 = 1;
    swift_willThrow();
LABEL_4:
    sub_186F366D4((uint64_t)a1);
    return sub_186F5CB74(0LL);
  }

  uint64_t v8 = *((void *)a1 + 5);
  __int128 v9 = *(_OWORD *)(a1 + 24);
  v23[0] = *(_OWORD *)(a1 + 8);
  v23[1] = v9;
  uint64_t v24 = v8;
  swift_unknownObjectRetain_n();
  sub_186F703FC((uint64_t)v23, (uint64_t)v17);
  if (v3)
  {
    swift_unknownObjectRelease();
    sub_186F366D4((uint64_t)a1);
    goto LABEL_4;
  }

  sub_186F65184((uint64_t)v25);
  sub_186F367A0((uint64_t)v25);
  sub_186F36734((uint64_t)v25, (uint64_t)v26, &qword_18C4B5298);
  if (v26[48] != 255)
  {
    sub_186F36690();
    swift_allocError();
    *uint64_t v10 = 3;
    swift_willThrow();
    sub_186F366D4((uint64_t)a1);
    sub_186F5CB74(*(uint64_t *)&v17[0]);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_4;
  }

  swift_unknownObjectRelease();
  sub_186F366D4((uint64_t)a1);
  uint64_t result = sub_186F366D4((uint64_t)a1);
  uint64_t v11 = v18;
  __int128 v12 = v19;
  __int128 v13 = v17[1];
  __int128 v14 = v20;
  __int128 v15 = v21;
  __int128 v16 = v22;
  *(_OWORD *)a3 = v17[0];
  *(_OWORD *)(a3 + 16) = v13;
  *(void *)(a3 + 32) = v11;
  *(_OWORD *)(a3 + 40) = v12;
  *(_OWORD *)(a3 + 56) = v14;
  *(_OWORD *)(a3 + 72) = v15;
  *(_OWORD *)(a3 + 88) = v16;
  return result;
}

uint64_t *sub_186F71274(uint64_t *a1)
{
  return a1;
}

uint64_t sub_186F712A4(char **a1)
{
  __int128 v3[2] = **(void **)(v1 + 16);
  return sub_186F6B888(6, a1, (uint64_t (*)(char **))sub_186F363E4, (uint64_t)v3);
}

uint64_t sub_186F712E0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  size_t v4 = _swift_stdlib_malloc_size((const void *)v1) - 32;
  uint64_t result = swift_beginAccess();
  uint64_t v6 = *(void *)(v1 + 16);
  size_t v7 = v4 - v6;
  if (__OFSUB__(v4, v6))
  {
    __break(1u);
    goto LABEL_7;
  }

  BOOL v8 = __OFSUB__(v7, v3);
  size_t v9 = v7 - v3;
  if (v8)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if ((v9 & 0x8000000000000000LL) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  size_t v10 = _swift_stdlib_malloc_size((const void *)v1);
  uint64_t result = (uint64_t)sub_186F71C90((char *)(v1 + 32), v1 + v10, v6, a1);
  uint64_t v11 = *(void *)(v1 + 16);
  BOOL v8 = __OFADD__(v11, v3);
  uint64_t v12 = v11 + v3;
  if (!v8)
  {
    *(void *)(v1 + 16) = v12;
    return result;
  }

size_t sub_186F713AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = sub_186F51F98(a1, a2, a3, a4);
  size_t v10 = _swift_stdlib_malloc_size(v4) - 32;
  size_t result = swift_beginAccess();
  int64_t v12 = v4[2];
  size_t v13 = v10 - v12;
  if (__OFSUB__(v10, v12))
  {
    __break(1u);
    goto LABEL_8;
  }

  BOOL v14 = __OFSUB__(v13, v9);
  size_t v15 = v13 - v9;
  if (v14)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if ((v15 & 0x8000000000000000LL) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  size_t result = _swift_stdlib_malloc_size(v4);
  if ((uint64_t)(result - 32) < v12)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  size_t result = sub_186F71D10(a1, a2, a3, a4, (uint64_t)v4 + v12 + 32);
  uint64_t v16 = v4[2];
  BOOL v14 = __OFADD__(v16, v9);
  uint64_t v17 = v16 + v9;
  if (!v14)
  {
    void v4[2] = v17;
    return result;
  }

size_t sub_186F71498(char a1)
{
  uint64_t v2 = v1;
  size_t v4 = _swift_stdlib_malloc_size(v2) - 32;
  __int128 v5 = v2 + 2;
  size_t result = swift_beginAccess();
  int64_t v7 = v2[2];
  size_t v8 = v4 - v7;
  if (__OFSUB__(v4, v7))
  {
    __break(1u);
    goto LABEL_8;
  }

  BOOL v9 = __OFSUB__(v8, 1LL);
  size_t v10 = v8 - 1;
  if (v9)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if ((v10 & 0x8000000000000000LL) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  size_t result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < v7)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  *((_BYTE *)v2 + v7 + 32) = a1;
  uint64_t v11 = *v5 + 1;
  if (!__OFADD__(*v5, 1LL))
  {
    size_t result = swift_beginAccess();
    *__int128 v5 = v11;
    return result;
  }

size_t sub_186F71560(const void *a1, size_t a2)
{
  uint64_t v3 = v2;
  size_t v6 = _swift_stdlib_malloc_size(v2) - 32;
  int64_t v7 = v2 + 2;
  size_t result = swift_beginAccess();
  int64_t v9 = v3[2];
  size_t v10 = v6 - v9;
  if (__OFSUB__(v6, v9))
  {
    __break(1u);
    goto LABEL_11;
  }

  BOOL v11 = __OFSUB__(v10, a2);
  size_t v12 = v10 - a2;
  if (v11)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if ((v12 & 0x8000000000000000LL) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  size_t result = _swift_stdlib_malloc_size(v3);
  if ((uint64_t)(result - 32) < v9)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if (!a1) {
    goto LABEL_8;
  }
  if ((a2 & 0x8000000000000000LL) == 0)
  {
    size_t result = (size_t)memmove((char *)v3 + v9 + 32, a1, a2);
LABEL_8:
    if (!__OFADD__(*v7, a2))
    {
      *v7 += a2;
      return result;
    }

    goto LABEL_14;
  }

uint64_t sub_186F71630(int64_t a1, int64_t a2, size_t a3)
{
  size_t v4 = v3;
  size_t v8 = (char *)*v3 + 16;
  uint64_t result = swift_beginAccess();
  int64_t v10 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_20;
  }

  BOOL v11 = __OFSUB__(*v8, v10);
  int64_t v12 = *v8 - v10;
  if (v11)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v13 = v12 + 1;
  if (__OFADD__(v12, 1LL))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result)
  {
    uint64_t result = _swift_stdlib_malloc_size(*v4);
    if (result - 32 >= v13)
    {
      if (a2 >= a1) {
        return sub_186F71974(a1, a2, a3);
      }
      goto LABEL_26;
    }
  }

  if (v13 < 0) {
    goto LABEL_22;
  }
  if (HIDWORD(v13))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if ((_DWORD)v13)
  {
    unsigned int v14 = (v13 - 1) | ((v13 - 1) >> 1) | ((((_DWORD)v13 - 1) | ((v13 - 1) >> 1)) >> 2);
    unsigned int v15 = v14 | (v14 >> 4) | ((v14 | (v14 >> 4)) >> 8);
    int v16 = v15 | HIWORD(v15);
    if (v16 == -1) {
      uint64_t v17 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v17 = (v16 + 1);
    }
  }

  else
  {
    uint64_t v17 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = v17;
  if (a1 < 0) {
    goto LABEL_24;
  }
  uint64_t v18 = (const void *)result;
  __int128 v19 = (char *)*v4;
  uint64_t result = swift_beginAccess();
  uint64_t v20 = *((void *)v19 + 2);
  if (v20 < a2)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }

  sub_186F3F07C(v19, 0LL, a1);
  sub_186F71498(a3);
  sub_186F3F07C((char *)*v4, a2, v20);
  *size_t v4 = v18;
  return swift_release();
}

uint64_t sub_186F717CC(uint64_t a1, int64_t a2, void *a3, size_t a4)
{
  __int128 v5 = v4;
  int64_t v10 = (char *)*v4 + 16;
  uint64_t result = swift_beginAccess();
  int64_t v12 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_20;
  }

  BOOL v13 = __OFSUB__(*v10, v12);
  int64_t v14 = *v10 - v12;
  if (v13)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v15 = v14 + a4;
  if (__OFADD__(v14, a4))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result)
  {
    uint64_t result = _swift_stdlib_malloc_size(*v5);
    if (result - 32 >= v15)
    {
      if (a2 >= a1) {
        return sub_186F71A70(a1, a2, a3, a4);
      }
      goto LABEL_26;
    }
  }

  if (v15 < 0) {
    goto LABEL_22;
  }
  if (HIDWORD(v15))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if ((_DWORD)v15)
  {
    unsigned int v16 = (v15 - 1) | ((v15 - 1) >> 1) | ((((_DWORD)v15 - 1) | ((v15 - 1) >> 1)) >> 2);
    unsigned int v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
    int v18 = v17 | HIWORD(v17);
    if (v18 == -1) {
      uint64_t v19 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v19 = (v18 + 1);
    }
  }

  else
  {
    uint64_t v19 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = v19;
  if (a1 < 0) {
    goto LABEL_24;
  }
  uint64_t v20 = (const void *)result;
  __int128 v21 = (char *)*v5;
  uint64_t result = swift_beginAccess();
  uint64_t v22 = *((void *)v21 + 2);
  if (v22 < a2)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }

  sub_186F3F07C(v21, 0LL, a1);
  sub_186F71560(a3, a4);
  sub_186F3F07C((char *)*v5, a2, v22);
  *__int128 v5 = v20;
  return swift_release();
}

size_t sub_186F71974(int64_t a1, int64_t a2, size_t a3)
{
  int64_t v7 = v3 + 2;
  size_t result = swift_beginAccess();
  int64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_10;
  }

  int64_t v10 = v3[2];
  int64_t v11 = v10 - v9;
  if (__OFSUB__(v10, v9))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  int64_t v12 = v11 + 1;
  if (__OFADD__(v11, 1LL))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  size_t result = _swift_stdlib_malloc_size(v3);
  if ((uint64_t)(result - 32) < v12)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  BOOL v13 = __OFSUB__(1LL, v9);
  uint64_t v14 = 1 - v9;
  if (v13)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (v10 < a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_186F409F4(a2, v10, v14);
  size_t result = sub_186F71B78(a3, a1);
  uint64_t v15 = v3[2];
  uint64_t v16 = v15 + v14;
  if (!__OFADD__(v15, v14))
  {
    size_t result = swift_beginAccess();
    *int64_t v7 = v16;
    return result;
  }

size_t sub_186F71A70(uint64_t a1, int64_t a2, void *a3, size_t a4)
{
  int64_t v9 = v4 + 2;
  size_t result = swift_beginAccess();
  int64_t v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_10;
  }

  int64_t v12 = v4[2];
  int64_t v13 = v12 - v11;
  if (__OFSUB__(v12, v11))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  int64_t v14 = v13 + a4;
  if (__OFADD__(v13, a4))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  size_t result = _swift_stdlib_malloc_size(v4);
  if ((uint64_t)(result - 32) < v14)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  BOOL v15 = __OFSUB__(a4, v11);
  uint64_t v16 = a4 - v11;
  if (v15)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (v12 < a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_186F409F4(a2, v12, v16);
  size_t result = (size_t)sub_186F71BE8(a3, a4, a1);
  uint64_t v17 = v4[2];
  uint64_t v18 = v17 + v16;
  if (!__OFADD__(v17, v16))
  {
    size_t result = swift_beginAccess();
    *int64_t v9 = v18;
    return result;
  }

size_t sub_186F71B78(size_t result, int64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_7;
  }

  int64_t v4 = a2 + 1;
  if (__OFADD__(a2, 1LL))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  char v5 = result;
  size_t result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < v4)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (v4 >= a2)
  {
    size_t result = _swift_stdlib_malloc_size(v2);
    *((_BYTE *)v2 + a2 + 32) = v5;
    return result;
  }

void *sub_186F71BE8(void *result, size_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v6 = a3 + a2;
  if (__OFADD__(a3, a2))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  int64_t v7 = v3;
  size_t v8 = result;
  size_t result = (void *)_swift_stdlib_malloc_size(v7);
  if ((uint64_t)result - 32 < v6)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (v6 < a3)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }

  size_t result = (void *)_swift_stdlib_malloc_size(v7);
  if (v8)
  {
    if ((a2 & 0x8000000000000000LL) == 0) {
      return memmove(&v7[a3 + 32], v8, a2);
    }
    goto LABEL_13;
  }

  return result;
}

char *sub_186F71C90(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    if (a2 - (uint64_t)result >= a3)
    {
      char v5 = &result[a3];
      swift_beginAccess();
      return (char *)memmove(v5, (const void *)(a4 + 32), *(void *)(a4 + 16));
    }

    __break(1u);
    goto LABEL_7;
  }

  if (a3 > 0) {
LABEL_7:
  }
    __break(1u);
  return result;
}

uint64_t sub_186F71D10(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v11[4] = result;
  v11[5] = a2;
  _BYTE v11[6] = a3;
  v11[7] = a4;
  if (a5)
  {
    v11[0] = MEMORY[0x1895F8858]();
    v11[1] = v5;
    id v11[2] = v8;
    v11[3] = v6;
    if (v8)
    {
      uint64_t v9 = v6 - v7;
      uint64_t v10 = v7;
    }

    else
    {
      uint64_t v10 = 0LL;
      uint64_t v9 = 0LL;
    }

    return sub_186F73FD4(v10, v9, v11, (uint64_t (*)(uint64_t, uint64_t))sub_186F74558);
  }

  return result;
}

uint64_t Kyber768.PublicKey.init<A>(dataRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_186F720D0(a1, a2, MEMORY[0x1895F9FF8], sub_186F71DF0, a3);
}

uint64_t sub_186F71DF0(uint64_t *a1, void *a2)
{
  return sub_186F7218C(a1, a2, v2[4], v2[5], v2[2], v2[3], MEMORY[0x1895F9FF8]);
}

uint64_t Kyber768.PublicKey.dataRepresentation.getter()
{
  return sub_186F72450(MEMORY[0x1895F9FF8]);
}

void Kyber768.PublicKey.encapsulate()(uint64_t a1@<X8>)
{
}

void sub_186F71EB8(uint64_t a1@<X8>)
{
}

uint64_t Kyber768.PrivateKey.init<A>(bytes:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  return sub_186F72778(a1, a2, a3, MEMORY[0x1895F9FF8], (uint64_t (*)(void *, uint64_t *))sub_186F74084, a4);
}

uint64_t Kyber768.PrivateKey.dataRepresentation.getter()
{
  return sub_186F72A70(MEMORY[0x1895F9FF8]);
}

uint64_t static Kyber768.PrivateKey.generate()@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F72B98(MEMORY[0x1895F9FF8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_186F42554, a1);
}

void Kyber768.PrivateKey.decapsulate(_:)(uint64_t a1, uint64_t a2)
{
}

uint64_t Kyber768.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F7310C(MEMORY[0x1895F9FF8], sub_186F740A8, a1);
}

uint64_t sub_186F7203C@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F732E0(MEMORY[0x1895F9FF8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_186F42554, a1);
}

void sub_186F72094(uint64_t a1, uint64_t a2)
{
}

uint64_t Kyber1024.PublicKey.init<A>(dataRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_186F720D0(a1, a2, MEMORY[0x1895F9FF0], sub_186F740C4, a3);
}

uint64_t sub_186F720D0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X3>, uint64_t (*a4)(void *, uint64_t *)@<X4>, uint64_t *a5@<X8>)
{
  uint64_t result = a3();
  if (result)
  {
    uint64_t v11 = cckem_sizeof_pub_ctx();
    uint64_t v13 = MEMORY[0x1895F8858](v11);
    uint64_t v12 = sub_186F830E4(v13, a4);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
    if (!v5) {
      *a5 = v12;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_186F7218C( uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t result = *a1;
  if (result) {
    return sub_186F7229C(result, a3, a2, a4, a5, a6, &v8, a7);
  }
  __break(1u);
  return result;
}

uint64_t sub_186F721D8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5();
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v9 = cckem_pub_ctx_init();
  uint64_t result = ((uint64_t (*)(uint64_t))a5)(v9);
  if (!result)
  {
LABEL_7:
    __break(1u);
    return result;
  }

  uint64_t result = cckem_import_pubkey();
  if ((_DWORD)result)
  {
    int v10 = result;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v11 = v10;
    *(_BYTE *)(v11 + 4) = 0;
    return swift_willThrow();
  }

  else
  {
    *a3 = a4;
  }

  return result;
}

uint64_t sub_186F7229C( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t (*a8)(void))
{
  uint64_t result = a8();
  if (result)
  {
    uint64_t v12 = cckem_pub_ctx_init();
    MEMORY[0x1895F8858](v12);
    uint64_t result = sub_186F879B8();
    if (v8) {
      *a7 = v8;
    }
    else {
      *a3 = a4;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_186F72374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4();
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (!a1)
  {
LABEL_7:
    __break(1u);
    return result;
  }

  uint64_t result = cckem_import_pubkey();
  if ((_DWORD)result)
  {
    int v6 = result;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v7 = v6;
    *(_BYTE *)(v7 + 4) = 0;
    return swift_willThrow();
  }

  return result;
}

uint64_t Kyber1024.PublicKey.dataRepresentation.getter()
{
  return sub_186F72450(MEMORY[0x1895F9FF0]);
}

uint64_t sub_186F72450(uint64_t (*a1)(void))
{
  _OWORD v4[3] = *MEMORY[0x1895F89C0];
  if (!a1()) {
    __break(1u);
  }
  uint64_t v1 = cckem_pubkey_nbytes_info();
  v4[0] = sub_186F39FE0(v1);
  v4[1] = v2;
  sub_186F791FC((uint64_t)v4);
  sub_186F733AC((uint64_t)v4);
  return v4[0];
}

void Kyber1024.PublicKey.encapsulate()(uint64_t a1@<X8>)
{
}

void sub_186F72548(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  int v14 = 0;
  if (!ccrng())
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }

  if (!a1()) {
    goto LABEL_19;
  }
  uint64_t v5 = cckem_shared_key_nbytes_info();
  if (qword_18C4B5020 != -1) {
    swift_once();
  }
  int v6 = off_18C4B5018;
  *(void *)&__int128 v12 = off_18C4B5018;
  if (v5)
  {
    if ((v5 & 0x8000000000000000LL) == 0)
    {
      swift_retain();
      do
      {
        swift_beginAccess();
        uint64_t v7 = sub_186F71630(*(void *)(v12 + 16), *(void *)(v12 + 16), 0LL);
        --v5;
      }

      while (v5);
      int v6 = (void *)v12;
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }

    __break(1u);
    goto LABEL_18;
  }

  uint64_t v11 = swift_retain();
LABEL_10:
  uint64_t v8 = cckem_encapsulated_key_nbytes_info();
  *(void *)&__int128 v12 = sub_186F39FE0(v8);
  *((void *)&v12 + 1) = v9;
  sub_186F791FC((uint64_t)&v12);
  __int128 v13 = v12;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    size_t v10 = sub_186F515FC((uint64_t)v6);
    swift_release();
    int v6 = (void *)v10;
  }

  swift_beginAccess();
  sub_186F73690((uint64_t)&v13);
  if (v2)
  {
    swift_release();
    sub_186F33C98(v13, *((unint64_t *)&v13 + 1));
    return;
  }

void sub_186F72740(uint64_t a1@<X8>)
{
}

uint64_t Kyber1024.PrivateKey.init<A>(bytes:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  return sub_186F72778(a1, a2, a3, MEMORY[0x1895F9FF0], (uint64_t (*)(void *, uint64_t *))sub_186F740F0, a4);
}

uint64_t sub_186F72778@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t (*a5)(void *, uint64_t *)@<X4>, unint64_t *a6@<X8>)
{
  uint64_t result = a4();
  if (result)
  {
    uint64_t v13 = cckem_sizeof_full_ctx();
    void v15[2] = a2;
    _OWORD v15[3] = a3;
    void v15[4] = a1;
    unint64_t v16 = MEMORY[0x1895F8858](v13);
    unint64_t v14 = sub_186F4267C(v16, a5, (uint64_t)v15);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
    if (!v6) {
      *a6 = v14;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

void *sub_186F72834(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  if (*result)
  {
    uint64_t result = (void *)sub_186F879B8();
    if (!v4) {
      *a2 = a4;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_186F728A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  if (!a4()) {
    goto LABEL_18;
  }
  uint64_t v7 = cckem_privkey_nbytes_info();
  if (!a4())
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v8 = cckem_pubkey_nbytes_info();
  uint64_t v9 = v7 + v8;
  if (__OFADD__(v7, v8))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (!a1)
  {
    if (v9) {
      goto LABEL_10;
    }
LABEL_20:
    uint64_t result = a4();
    if (result)
    {
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }

uint64_t Kyber1024.PrivateKey.dataRepresentation.getter()
{
  return sub_186F72A70(MEMORY[0x1895F9FF0]);
}

uint64_t sub_186F72A70(uint64_t (*a1)(void))
{
  void v6[3] = *MEMORY[0x1895F89C0];
  if (!a1()) {
    goto LABEL_6;
  }
  uint64_t v2 = cckem_privkey_nbytes_info();
  if (!a1()) {
    goto LABEL_7;
  }
  uint64_t v3 = cckem_pubkey_nbytes_info();
  if (__OFADD__(v2, v3))
  {
    __break(1u);
LABEL_6:
    __break(1u);
LABEL_7:
    __break(1u);
  }

  v6[0] = sub_186F39FE0(v2 + v3);
  v6[1] = v4;
  sub_186F791FC((uint64_t)v6);
  sub_186F73998((uint64_t)v6);
  return v6[0];
}

uint64_t static Kyber1024.PrivateKey.generate()@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F72B98(MEMORY[0x1895F9FF0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_186F42570, a1);
}

uint64_t sub_186F72B98@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = ccrng();
  if (!v6)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }

  uint64_t v7 = v6;
  if (!a1()) {
    goto LABEL_5;
  }
  uint64_t v8 = cckem_sizeof_full_ctx();
  uint64_t result = a2(v8, v7, v8);
  *a3 = result;
  return result;
}

void Kyber1024.PrivateKey.decapsulate(_:)(uint64_t a1, uint64_t a2)
{
}

void sub_186F72C9C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (a3())
  {
    uint64_t v4 = cckem_shared_key_nbytes_info();
    if (qword_18C4B5020 != -1) {
      swift_once();
    }
    uint64_t v5 = off_18C4B5018;
    uint64_t v6 = off_18C4B5018;
    if (v4)
    {
      if (v4 < 0)
      {
        __break(1u);
        JUMPOUT(0x186F73080LL);
      }

      swift_retain();
      do
      {
        swift_beginAccess();
        sub_186F71630(v6[2], v6[2], 0LL);
        --v4;
      }

      while (v4);
      uint64_t v5 = v6;
    }

    else
    {
      swift_retain();
    }

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_186F515FC((uint64_t)v5);
      swift_release();
    }

    swift_beginAccess();
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x186F73094LL);
}

uint64_t Kyber1024.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F7310C(MEMORY[0x1895F9FF0], sub_186F74114, a1);
}

uint64_t sub_186F7310C@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void *, uint64_t *)@<X1>, uint64_t *a3@<X8>)
{
  if (!a1()) {
    goto LABEL_12;
  }
  uint64_t v6 = cckem_sizeof_pub_ctx();
  if (v6 < 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }

  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = sub_186F87CE8();
    *(void *)(v8 + 16) = v7;
  }

  else
  {
    uint64_t v8 = MEMORY[0x18961AFE8];
  }

  if (!cckem_public_ctx()) {
    goto LABEL_13;
  }
  *(void *)(v8 + 16) = v7;
  if (!a1()) {
    goto LABEL_14;
  }
  uint64_t v9 = cckem_sizeof_pub_ctx();
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  uint64_t v10 = sub_186F830E4(v12, a2);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v10;
  return result;
}

uint64_t sub_186F73288@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F732E0(MEMORY[0x1895F9FF0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_186F42570, a1);
}

uint64_t sub_186F732E0@<X0>( uint64_t (*a1)(void)@<X2>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v6 = ccrng();
  if (!v6)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }

  uint64_t v7 = v6;
  if (!a1()) {
    goto LABEL_5;
  }
  uint64_t v8 = cckem_sizeof_full_ctx();
  uint64_t result = a2(v8, v7, v8);
  *a3 = result;
  return result;
}

void sub_186F73394(uint64_t a1, uint64_t a2)
{
}

void sub_186F733AC(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_186F7340C@<X0>(uint64_t a1@<X8>)
{
  LOWORD(v4) = a1;
  BYTE2(v4) = BYTE2(a1);
  HIBYTE(v4) = BYTE3(a1);
  unsigned __int8 v5 = BYTE4(a1);
  unsigned __int8 v6 = BYTE5(a1);
  unsigned __int8 v7 = BYTE6(a1);
  uint64_t result = cckem_export_pubkey();
  if ((_DWORD)result)
  {
    __break(1u);
    JUMPOUT(0x186F73658LL);
  }

  *uint64_t v2 = v1;
  v2[1] = v4 | ((unint64_t)v5 << 32) | ((unint64_t)v6 << 40) | ((unint64_t)v7 << 48);
  return result;
}

void sub_186F73690(uint64_t a1)
{
  __asm { BR              X13 }

uint64_t sub_186F736F8()
{
  uint64_t v7 = v1;
  LOWORD(v8) = v0;
  BYTE2(v8) = BYTE2(v0);
  HIBYTE(v8) = BYTE3(v0);
  unsigned __int8 v9 = BYTE4(v0);
  unsigned __int8 v10 = BYTE5(v0);
  unsigned __int8 v11 = BYTE6(v0);
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x186F7397CLL);
  }

  uint64_t result = cckem_encapsulate();
  if ((_DWORD)result)
  {
    int v5 = result;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v6 = v5;
    *(_BYTE *)(v6 + 4) = 0;
    uint64_t result = swift_willThrow();
  }

  *uint64_t v2 = v7;
  v2[1] = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  return result;
}

void sub_186F73998(uint64_t a1)
{
  __asm { BR              X13 }

uint64_t sub_186F739FC()
{
  uint64_t v6 = v1;
  LOWORD(v7) = v0;
  BYTE2(v7) = BYTE2(v0);
  HIBYTE(v7) = BYTE3(v0);
  unsigned __int8 v8 = BYTE4(v0);
  unsigned __int8 v9 = BYTE5(v0);
  unsigned __int8 v10 = BYTE6(v0);
  if (cckem_export_privkey())
  {
    __break(1u);
    JUMPOUT(0x186F73C2CLL);
  }

  if (__OFSUB__(v4, *v3))
  {
    __break(1u);
    JUMPOUT(0x186F73C38LL);
  }

  if (!cckem_public_ctx())
  {
    __break(1u);
    JUMPOUT(0x186F73C58LL);
  }

  uint64_t result = cckem_export_pubkey();
  if ((_DWORD)result)
  {
    __break(1u);
    JUMPOUT(0x186F73C44LL);
  }

  *uint64_t v2 = v6;
  v2[1] = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  return result;
}

uint64_t sub_186F73C74(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_186F87A00();
  uint64_t v6 = *a1;
  if (a1[1] < (int)v6)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t result = sub_186F8797C();
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t result = sub_186F879A0();
  if (__OFSUB__(v6, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t result = sub_186F87994();
  if (!a3)
  {
LABEL_11:
    __break(1u);
    return result;
  }

  uint64_t result = cckem_encapsulate();
  if ((_DWORD)result)
  {
    int v7 = result;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = v7;
    *(_BYTE *)(v8 + 4) = 0;
    return swift_willThrow();
  }

  return result;
}

uint64_t sub_186F73D74(int *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  if (a1[1] < (int)v7)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (!sub_186F8797C())
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }

  if (__OFSUB__(v7, sub_186F879A0())) {
    goto LABEL_10;
  }
  sub_186F87994();
  if (cckem_export_privkey())
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (__OFSUB__(a4, *a3))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!cckem_public_ctx()) {
    goto LABEL_15;
  }
  uint64_t result = cckem_export_pubkey();
  if ((_DWORD)result) {
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_186F73E88( uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t result = sub_186F8797C();
  uint64_t v8 = result;
  if (result)
  {
    uint64_t result = sub_186F879A0();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }

    v8 += a1 - result;
  }

  BOOL v9 = __OFSUB__(a2, a1);
  uint64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v11 = sub_186F87994();
  if (v11 >= v10) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v11;
  }
  uint64_t v13 = v8 + v12;
  if (v8) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0LL;
  }
  a3(&v16, v8, v14);
  if (!v3) {
    char v15 = v16;
  }
  return v15 & 1;
}

uint64_t sub_186F73F34(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t result = sub_186F8797C();
  uint64_t v7 = result;
  if (result)
  {
    uint64_t result = sub_186F879A0();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v7 += a1 - result;
  }

  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t v9 = a2 - a1;
  if (v8)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v10 = sub_186F87994();
  if (v10 >= v9) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = v7 + v11;
  if (v7) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0LL;
  }
  return a3(v7, v13);
}

uint64_t sub_186F73FD4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  uint64_t v9 = a3[2];
  uint64_t v8 = a3[3];
  uint64_t v10 = sub_186F51F98(0LL, *a3, v9, v8);
  uint64_t result = sub_186F51F98(v6, v7, v9, v8);
  if (__OFADD__(v10, result))
  {
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v12 = result;
  if (v10 + result < v10)
  {
LABEL_8:
    __break(1u);
    return result;
  }

  if (a1) {
    uint64_t v13 = a1 + v10;
  }
  else {
    uint64_t v13 = 0LL;
  }
  return a4(v13, v12);
}

void *sub_186F74084(void *a1, void *a2)
{
  return sub_186F72834(a1, a2, *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_186F740A8(uint64_t *a1, void *a2)
{
  return sub_186F74130(a1, a2, MEMORY[0x1895F9FF8]);
}

uint64_t sub_186F740C4(uint64_t *a1, void *a2)
{
  return sub_186F7218C(a1, a2, v2[4], v2[5], v2[2], v2[3], MEMORY[0x1895F9FF0]);
}

void *sub_186F740F0(void *a1, void *a2)
{
  return sub_186F72834(a1, a2, *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_186F74114(uint64_t *a1, void *a2)
{
  return sub_186F74130(a1, a2, MEMORY[0x1895F9FF0]);
}

uint64_t sub_186F74130(uint64_t *a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t result = *a1;
  if (result) {
    return sub_186F721D8(result, **(void **)(v3 + 16), a2, *(void *)(v3 + 24), a3);
  }
  __break(1u);
  return result;
}

_UNKNOWN **sub_186F74160()
{
  return &protocol witness table for Kyber768.PublicKey;
}

_UNKNOWN **sub_186F7416C()
{
  return &protocol witness table for Kyber1024.PublicKey;
}

ValueMetadata *type metadata accessor for Kyber768()
{
  return &type metadata for Kyber768;
}

ValueMetadata *type metadata accessor for Kyber768.PublicKey()
{
  return &type metadata for Kyber768.PublicKey;
}

ValueMetadata *type metadata accessor for Kyber768.PrivateKey()
{
  return &type metadata for Kyber768.PrivateKey;
}

ValueMetadata *type metadata accessor for Kyber1024()
{
  return &type metadata for Kyber1024;
}

ValueMetadata *type metadata accessor for Kyber1024.PublicKey()
{
  return &type metadata for Kyber1024.PublicKey;
}

ValueMetadata *type metadata accessor for Kyber1024.PrivateKey()
{
  return &type metadata for Kyber1024.PrivateKey;
}

size_t sub_186F741D8()
{
  size_t v1 = _swift_stdlib_malloc_size(v0) - 32;
  size_t result = swift_beginAccess();
  int64_t v3 = v0[2];
  if (__OFSUB__(v1, v3))
  {
    __break(1u);
    goto LABEL_6;
  }

  if (((v1 - v3) & 0x8000000000000000LL) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  size_t result = _swift_stdlib_malloc_size(v0);
  if ((uint64_t)(result - 32) >= v3)
  {
    v0[2] = v3;
    return result;
  }

size_t sub_186F74258(int64_t a1, int64_t a2)
{
  int v5 = v2 + 2;
  size_t result = swift_beginAccess();
  int64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_11;
  }

  int64_t v8 = v2[2];
  if (__OFSUB__(v8, v7))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  size_t result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < v8 - v7)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  BOOL v9 = __OFSUB__(0LL, v7);
  uint64_t v10 = a1 - a2;
  if (v9)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (v8 < a2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  size_t result = sub_186F409F4(a2, v8, v10);
  if (a1 < 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  size_t result = _swift_stdlib_malloc_size(v2);
  if ((uint64_t)(result - 32) < a1)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  size_t result = _swift_stdlib_malloc_size(v2);
  uint64_t v11 = v2[2];
  uint64_t v12 = v11 + v10;
  if (!__OFADD__(v11, v10))
  {
    size_t result = swift_beginAccess();
    *int v5 = v12;
    return result;
  }

uint64_t sub_186F7435C(int64_t a1, int64_t a2)
{
  int64_t v3 = v2;
  uint64_t v6 = (char *)*v2 + 16;
  uint64_t result = swift_beginAccess();
  int64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v9 = *v6 - v8;
  if (__OFSUB__(*v6, v8))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result)
  {
    uint64_t result = _swift_stdlib_malloc_size(*v3);
    if (result - 32 >= v9)
    {
      if (a2 >= a1) {
        return sub_186F74258(a1, a2);
      }
      goto LABEL_24;
    }
  }

  if (v9 < 0) {
    goto LABEL_20;
  }
  if (HIDWORD(v9))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if ((_DWORD)v9)
  {
    unsigned int v10 = (v9 - 1) | ((v9 - 1) >> 1) | ((((_DWORD)v9 - 1) | ((v9 - 1) >> 1)) >> 2);
    unsigned int v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
    int v12 = v11 | HIWORD(v11);
    if (v12 == -1) {
      uint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v13 = (v12 + 1);
    }
  }

  else
  {
    uint64_t v13 = 1LL;
  }

  type metadata accessor for SecureBytes.Backing();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = v13;
  if (a1 < 0) {
    goto LABEL_22;
  }
  uint64_t v14 = (const void *)result;
  char v15 = (char *)*v3;
  uint64_t result = swift_beginAccess();
  uint64_t v16 = *((void *)v15 + 2);
  if (v16 < a2)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    return result;
  }

  sub_186F3F07C(v15, 0LL, a1);
  sub_186F741D8();
  sub_186F3F07C((char *)*v3, a2, v16);
  *int64_t v3 = v14;
  return swift_release();
}

uint64_t sub_186F744D8(uint64_t a1, uint64_t a2)
{
  return sub_186F728A0(a1, a2, *(void *)(v2 + 16), MEMORY[0x1895F9FF0]);
}

uint64_t sub_186F744F8(uint64_t a1, uint64_t a2)
{
  return sub_186F72374(a1, a2, *(void *)(v2 + 16), MEMORY[0x1895F9FF0]);
}

uint64_t sub_186F74518(uint64_t a1, uint64_t a2)
{
  return sub_186F728A0(a1, a2, *(void *)(v2 + 16), MEMORY[0x1895F9FF8]);
}

uint64_t sub_186F74538(uint64_t a1, uint64_t a2)
{
  return sub_186F72374(a1, a2, *(void *)(v2 + 16), MEMORY[0x1895F9FF8]);
}

void *sub_186F74558(void *__src, size_t __len)
{
  if (__src)
  {
    if ((__len & 0x8000000000000000LL) != 0) {
      __break(1u);
    }
    else {
      return memmove(*(void **)(v2 + 40), __src, __len);
    }
  }

  return __src;
}

uint64_t sub_186F74578@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  double v8 = ceil((double)a3 * 0.03125);
  if ((~*(void *)&v8 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  if (v8 <= -1.0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (v8 < 256.0)
  {
    uint64_t v5 = a3;
    uint64_t v4 = a1;
    int v6 = (int)v8;
    if (qword_18C4B5020 == -1) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }

LABEL_23:
  __break(1u);
LABEL_24:
  swift_once();
LABEL_5:
  uint64_t v9 = off_18C4B5018;
  unint64_t v39 = off_18C4B5018;
  sub_186F515FC(v4);
  if (!v6)
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }

  uint64_t v27 = a4;
  uint64_t v28 = v5;
  unsigned int v10 = (char *)&v38 + 8;
  swift_retain_n();
  LOBYTE(v11) = 1;
  int v30 = v6;
  while (1)
  {
    uint64_t v12 = swift_retain();
    sub_186F76CC4(v12, &v38);
    swift_beginAccess();
    uint64_t v13 = (uint64_t)v9 + v9[2] + 32;
    swift_retain();
    sub_186F53318((uint64_t)(v9 + 4), v13);
    swift_release();
    if (a2 >> 60 != 15) {
      __asm { BR              X8 }
    }

    LOBYTE(v40[0]) = v11;
    uint64_t v14 = v10;
    sub_186F53318((uint64_t)v40, (uint64_t)v40 + 1);
    uint64_t v15 = v38;
    sub_186F4CA64((uint64_t)v40);
    uint64_t v37 = v15;
    v32[0] = v40[0];
    v32[1] = v40[1];
    swift_retain();
    sub_186F53318((uint64_t)v32, (uint64_t)&v33);
    swift_retain();
    sub_186F4CA64((uint64_t)&v34);
    swift_release_n();
    __int128 v31 = v34;
    uint64_t v17 = v35;
    uint64_t v16 = v36;
    type metadata accessor for SecureBytes.Backing();
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_186F8B2D0;
    _swift_stdlib_malloc_size((const void *)v18);
    *(_OWORD *)(v18 + 32) = v31;
    *(void *)(v18 + 48) = v17;
    *(void *)(v18 + 56) = v16;
    swift_beginAccess();
    *(void *)(v18 + 16) = 32LL;
    int64_t v19 = _swift_stdlib_malloc_size((const void *)v18);
    swift_release();
    if (v19 < 64)
    {
      __break(1u);
      JUMPOUT(0x186F74AE8LL);
    }

    uint64_t v20 = swift_retain();
    sub_186F51190(v20);
    swift_release();
    swift_release();
    swift_release();
    __int16 v11 = v11 + 1;
    uint64_t v9 = (void *)v18;
    unsigned int v10 = v14;
    if ((v11 & 0x100) != 0)
    {
      __break(1u);
      break;
    }
  }

  if (v28 < 0) {
    goto LABEL_26;
  }
  uint64_t v21 = (uint64_t)v39;
  swift_beginAccess();
  uint64_t v22 = *(void *)(v21 + 16);
  uint64_t v23 = sub_186F51450(0LL, v28, v22, v21);
  if ((v24 & 1) != 0) {
    uint64_t v25 = v22;
  }
  else {
    uint64_t v25 = v23;
  }
  if ((v25 | v22) < 0) {
    goto LABEL_27;
  }
  if (v22 < v25) {
    goto LABEL_28;
  }
  *(void *)&__int128 v34 = 0LL;
  *((void *)&v34 + 1) = v25;
  uint64_t v35 = v21;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B5150);
  sub_186F410F4();
  sub_186F87FD0();
  swift_release();
  swift_release();
  uint64_t result = swift_release_n();
  *uint64_t v27 = *(void *)&v32[0];
  return result;
}

  __break(1u);
LABEL_24:
  swift_once();
LABEL_5:
  uint64_t v9 = off_18C4B5018;
  uint64_t v41 = off_18C4B5018;
  sub_186F515FC(v4);
  if (!v6)
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }

  uint64_t v27 = a4;
  uint64_t v28 = v5;
  unsigned int v10 = (char *)&v40 + 8;
  swift_retain_n();
  LOBYTE(v11) = 1;
  int v30 = v6;
  while (1)
  {
    uint64_t v12 = swift_retain();
    sub_186F76994( v12,  MEMORY[0x1895FA280],  &qword_18C4B4FB0,  (void (*)(uint64_t, uint64_t))sub_186F5330C,  (char *)sub_186F77154,  &v40);
    swift_beginAccess();
    uint64_t v13 = (uint64_t)v9 + v9[2] + 32;
    swift_retain();
    sub_186F5330C((uint64_t)(v9 + 4), v13);
    swift_release();
    if (a2 >> 60 != 15) {
      __asm { BR              X8 }
    }

    LOBYTE(v42[0]) = v11;
    uint64_t v14 = v10;
    sub_186F5330C((uint64_t)v42, (uint64_t)v42 + 1);
    uint64_t v15 = v40;
    sub_186F4CAFC((uint64_t)v42);
    unint64_t v39 = v15;
    v33[0] = v42[0];
    v33[1] = v42[1];
    v33[2] = v42[2];
    swift_retain();
    sub_186F5330C((uint64_t)v33, (uint64_t)&v34);
    swift_retain();
    sub_186F4CAFC((uint64_t)&v35);
    swift_release_n();
    __int128 v31 = v36;
    uint64_t v32 = v35;
    uint64_t v17 = v37;
    uint64_t v16 = v38;
    type metadata accessor for SecureBytes.Backing();
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_186F8B2C0;
    _swift_stdlib_malloc_size((const void *)v18);
    *(_OWORD *)(v18 + 32) = v32;
    *(_OWORD *)(v18 + 48) = v31;
    *(void *)(v18 + 64) = v17;
    *(void *)(v18 + 72) = v16;
    swift_beginAccess();
    *(void *)(v18 + 16) = 48LL;
    int64_t v19 = _swift_stdlib_malloc_size((const void *)v18);
    swift_release();
    if (v19 < 80)
    {
      __break(1u);
      JUMPOUT(0x186F750D8LL);
    }

    uint64_t v20 = swift_retain();
    sub_186F51190(v20);
    swift_release();
    swift_release();
    swift_release();
    __int16 v11 = v11 + 1;
    uint64_t v9 = (void *)v18;
    unsigned int v10 = v14;
    if ((v11 & 0x100) != 0)
    {
      __break(1u);
      break;
    }
  }

  if (v28 < 0) {
    goto LABEL_26;
  }
  uint64_t v21 = (uint64_t)v41;
  swift_beginAccess();
  uint64_t v22 = *(void *)(v21 + 16);
  uint64_t v23 = sub_186F51450(0LL, v28, v22, v21);
  if ((v24 & 1) != 0) {
    uint64_t v25 = v22;
  }
  else {
    uint64_t v25 = v23;
  }
  if ((v25 | v22) < 0) {
    goto LABEL_27;
  }
  if (v22 < v25) {
    goto LABEL_28;
  }
  *(void *)&uint64_t v35 = 0LL;
  *((void *)&v35 + 1) = v25;
  *(void *)&uint64_t v36 = v21;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B5150);
  sub_186F410F4();
  sub_186F87FD0();
  swift_release();
  swift_release();
  uint64_t result = swift_release_n();
  *uint64_t v27 = *(void *)&v33[0];
  return result;
}

  __break(1u);
LABEL_24:
  swift_once();
LABEL_5:
  uint64_t v9 = off_18C4B5018;
  uint64_t v43 = off_18C4B5018;
  sub_186F515FC(v4);
  if (!v6)
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }

  uint64_t v27 = a4;
  uint64_t v28 = v5;
  unsigned int v10 = (char *)&v42 + 8;
  swift_retain_n();
  LOBYTE(v11) = 1;
  int v30 = v6;
  while (1)
  {
    uint64_t v12 = swift_retain();
    sub_186F76994( v12,  MEMORY[0x1895FA298],  &qword_18C6B05D0,  (void (*)(uint64_t, uint64_t))sub_186F53300,  (char *)sub_186F76FD8,  &v42);
    swift_beginAccess();
    uint64_t v13 = (uint64_t)v9 + v9[2] + 32;
    swift_retain();
    sub_186F53300((uint64_t)(v9 + 4), v13);
    swift_release();
    if (a2 >> 60 != 15) {
      __asm { BR              X8 }
    }

    LOBYTE(v44[0]) = v11;
    uint64_t v14 = v10;
    sub_186F53300((uint64_t)v44, (uint64_t)v44 + 1);
    uint64_t v15 = v42;
    sub_186F4CB9C(v44);
    uint64_t v41 = v15;
    v34[0] = v44[0];
    v34[1] = v44[1];
    _OWORD v34[2] = v44[2];
    _OWORD v34[3] = v44[3];
    swift_retain();
    sub_186F53300((uint64_t)v34, (uint64_t)&v35);
    swift_retain();
    sub_186F4CB9C(&v36);
    swift_release_n();
    uint64_t v32 = v37;
    uint64_t v33 = v36;
    __int128 v31 = v38;
    uint64_t v17 = v39;
    uint64_t v16 = v40;
    type metadata accessor for SecureBytes.Backing();
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_186F8B2C0;
    _swift_stdlib_malloc_size((const void *)v18);
    *(_OWORD *)(v18 + 32) = v33;
    *(_OWORD *)(v18 + 48) = v32;
    *(_OWORD *)(v18 + 64) = v31;
    *(void *)(v18 + 80) = v17;
    *(void *)(v18 + 88) = v16;
    swift_beginAccess();
    *(void *)(v18 + 16) = 64LL;
    int64_t v19 = _swift_stdlib_malloc_size((const void *)v18);
    swift_release();
    if (v19 < 96)
    {
      __break(1u);
      JUMPOUT(0x186F756E0LL);
    }

    uint64_t v20 = swift_retain();
    sub_186F51190(v20);
    swift_release();
    swift_release();
    swift_release();
    __int16 v11 = v11 + 1;
    uint64_t v9 = (void *)v18;
    unsigned int v10 = v14;
    if ((v11 & 0x100) != 0)
    {
      __break(1u);
      break;
    }
  }

  if (v28 < 0) {
    goto LABEL_26;
  }
  uint64_t v21 = (uint64_t)v43;
  swift_beginAccess();
  uint64_t v22 = *(void *)(v21 + 16);
  uint64_t v23 = sub_186F51450(0LL, v28, v22, v21);
  if ((v24 & 1) != 0) {
    uint64_t v25 = v22;
  }
  else {
    uint64_t v25 = v23;
  }
  if ((v25 | v22) < 0) {
    goto LABEL_27;
  }
  if (v22 < v25) {
    goto LABEL_28;
  }
  *(void *)&uint64_t v36 = 0LL;
  *((void *)&v36 + 1) = v25;
  *(void *)&uint64_t v37 = v21;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B5150);
  sub_186F410F4();
  sub_186F87FD0();
  swift_release();
  swift_release();
  uint64_t result = swift_release_n();
  *uint64_t v27 = *(void *)&v34[0];
  return result;
}

  __break(1u);
LABEL_24:
  swift_once();
LABEL_5:
  __int16 v11 = off_18C4B5018;
  uint64_t v40 = off_18C4B5018;
  sub_186F33D20(v6, v5);
  swift_retain();
  sub_186F516FC(v6, v5);
  sub_186F33C98(v6, v5);
  if (!v8)
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }

  uint64_t v29 = a5;
  int v30 = v7;
  uint64_t v12 = (char *)&v39 + 8;
  swift_retain();
  LOBYTE(v13) = 1;
  while (1)
  {
    uint64_t v14 = swift_retain();
    sub_186F76CC4(v14, &v39);
    swift_beginAccess();
    uint64_t v15 = (uint64_t)v11 + v11[2] + 32;
    swift_retain();
    sub_186F53318((uint64_t)(v11 + 4), v15);
    swift_release();
    if (a3 >> 60 != 15) {
      __asm { BR              X8 }
    }

    LOBYTE(v41[0]) = v13;
    uint64_t v16 = v12;
    sub_186F53318((uint64_t)v41, (uint64_t)v41 + 1);
    uint64_t v17 = v39;
    sub_186F4CA64((uint64_t)v41);
    __int128 v38 = v17;
    v33[0] = v41[0];
    v33[1] = v41[1];
    swift_retain();
    sub_186F53318((uint64_t)v33, (uint64_t)&v34);
    swift_retain();
    sub_186F4CA64((uint64_t)&v35);
    swift_release_n();
    uint64_t v32 = v35;
    int64_t v19 = v36;
    uint64_t v18 = v37;
    type metadata accessor for SecureBytes.Backing();
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_186F8B2D0;
    _swift_stdlib_malloc_size((const void *)v20);
    *(_OWORD *)(v20 + 32) = v32;
    *(void *)(v20 + 48) = v19;
    *(void *)(v20 + 56) = v18;
    swift_beginAccess();
    *(void *)(v20 + 16) = 32LL;
    uint64_t v21 = _swift_stdlib_malloc_size((const void *)v20);
    swift_release();
    if (v21 < 64)
    {
      __break(1u);
      JUMPOUT(0x186F75CC0LL);
    }

    uint64_t v22 = swift_retain();
    sub_186F51190(v22);
    swift_release();
    swift_release();
    swift_release();
    uint64_t v13 = v13 + 1;
    __int16 v11 = (void *)v20;
    uint64_t v12 = v16;
    if ((v13 & 0x100) != 0)
    {
      __break(1u);
      break;
    }
  }

  if (v30 < 0) {
    goto LABEL_26;
  }
  uint64_t v23 = (uint64_t)v40;
  swift_beginAccess();
  char v24 = *(void *)(v23 + 16);
  uint64_t v25 = sub_186F51450(0LL, v30, v24, v23);
  if ((v26 & 1) != 0) {
    uint64_t v27 = v24;
  }
  else {
    uint64_t v27 = v25;
  }
  if ((v27 | v24) < 0) {
    goto LABEL_27;
  }
  if (v24 < v27) {
    goto LABEL_28;
  }
  *(void *)&uint64_t v35 = 0LL;
  *((void *)&v35 + 1) = v27;
  uint64_t v36 = v23;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B5150);
  sub_186F410F4();
  sub_186F87FD0();
  swift_release();
  swift_release();
  uint64_t result = swift_release_n();
  *uint64_t v29 = *(void *)&v33[0];
  return result;
}

  __break(1u);
LABEL_24:
  swift_once();
LABEL_5:
  __int16 v11 = off_18C4B5018;
  uint64_t v42 = off_18C4B5018;
  sub_186F33D20(v6, v5);
  swift_retain();
  sub_186F516FC(v6, v5);
  sub_186F33C98(v6, v5);
  if (!v8)
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }

  uint64_t v29 = a5;
  int v30 = v7;
  uint64_t v12 = (char *)&v41 + 8;
  swift_retain();
  LOBYTE(v13) = 1;
  while (1)
  {
    uint64_t v14 = swift_retain();
    sub_186F76994( v14,  MEMORY[0x1895FA280],  &qword_18C4B4FB0,  (void (*)(uint64_t, uint64_t))sub_186F5330C,  (char *)sub_186F77154,  &v41);
    swift_beginAccess();
    uint64_t v15 = (uint64_t)v11 + v11[2] + 32;
    swift_retain();
    sub_186F5330C((uint64_t)(v11 + 4), v15);
    swift_release();
    if (a3 >> 60 != 15) {
      __asm { BR              X8 }
    }

    LOBYTE(v43[0]) = v13;
    uint64_t v16 = v12;
    sub_186F5330C((uint64_t)v43, (uint64_t)v43 + 1);
    uint64_t v17 = v41;
    sub_186F4CAFC((uint64_t)v43);
    uint64_t v40 = v17;
    v34[0] = v43[0];
    v34[1] = v43[1];
    _OWORD v34[2] = v43[2];
    swift_retain();
    sub_186F5330C((uint64_t)v34, (uint64_t)&v35);
    swift_retain();
    sub_186F4CAFC((uint64_t)&v36);
    swift_release_n();
    uint64_t v32 = v37;
    uint64_t v33 = v36;
    int64_t v19 = v38;
    uint64_t v18 = v39;
    type metadata accessor for SecureBytes.Backing();
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_186F8B2C0;
    _swift_stdlib_malloc_size((const void *)v20);
    *(_OWORD *)(v20 + 32) = v33;
    *(_OWORD *)(v20 + 48) = v32;
    *(void *)(v20 + 64) = v19;
    *(void *)(v20 + 72) = v18;
    swift_beginAccess();
    *(void *)(v20 + 16) = 48LL;
    uint64_t v21 = _swift_stdlib_malloc_size((const void *)v20);
    swift_release();
    if (v21 < 80)
    {
      __break(1u);
      JUMPOUT(0x186F762D4LL);
    }

    uint64_t v22 = swift_retain();
    sub_186F51190(v22);
    swift_release();
    swift_release();
    swift_release();
    uint64_t v13 = v13 + 1;
    __int16 v11 = (void *)v20;
    uint64_t v12 = v16;
    if ((v13 & 0x100) != 0)
    {
      __break(1u);
      break;
    }
  }

  if (v30 < 0) {
    goto LABEL_26;
  }
  uint64_t v23 = (uint64_t)v42;
  swift_beginAccess();
  char v24 = *(void *)(v23 + 16);
  uint64_t v25 = sub_186F51450(0LL, v30, v24, v23);
  if ((v26 & 1) != 0) {
    uint64_t v27 = v24;
  }
  else {
    uint64_t v27 = v25;
  }
  if ((v27 | v24) < 0) {
    goto LABEL_27;
  }
  if (v24 < v27) {
    goto LABEL_28;
  }
  *(void *)&uint64_t v36 = 0LL;
  *((void *)&v36 + 1) = v27;
  *(void *)&uint64_t v37 = v23;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B5150);
  sub_186F410F4();
  sub_186F87FD0();
  swift_release();
  swift_release();
  uint64_t result = swift_release_n();
  *uint64_t v29 = *(void *)&v34[0];
  return result;
}

  __break(1u);
LABEL_24:
  swift_once();
LABEL_5:
  __int16 v11 = off_18C4B5018;
  uint64_t v44 = off_18C4B5018;
  sub_186F33D20(v6, v5);
  swift_retain();
  sub_186F516FC(v6, v5);
  sub_186F33C98(v6, v5);
  if (!v8)
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }

  uint64_t v29 = a5;
  int v30 = v7;
  uint64_t v12 = (char *)&v43 + 8;
  swift_retain();
  LOBYTE(v13) = 1;
  while (1)
  {
    uint64_t v14 = swift_retain();
    sub_186F76994( v14,  MEMORY[0x1895FA298],  &qword_18C6B05D0,  (void (*)(uint64_t, uint64_t))sub_186F53300,  (char *)sub_186F76FD8,  &v43);
    swift_beginAccess();
    uint64_t v15 = (uint64_t)v11 + v11[2] + 32;
    swift_retain();
    sub_186F53300((uint64_t)(v11 + 4), v15);
    swift_release();
    if (a3 >> 60 != 15) {
      __asm { BR              X8 }
    }

    LOBYTE(v45[0]) = v13;
    uint64_t v16 = v12;
    sub_186F53300((uint64_t)v45, (uint64_t)v45 + 1);
    uint64_t v17 = v43;
    sub_186F4CB9C(v45);
    uint64_t v42 = v17;
    v35[0] = v45[0];
    v35[1] = v45[1];
    _OWORD v35[2] = v45[2];
    _OWORD v35[3] = v45[3];
    swift_retain();
    sub_186F53300((uint64_t)v35, (uint64_t)&v36);
    swift_retain();
    sub_186F4CB9C(&v37);
    swift_release_n();
    uint64_t v33 = v38;
    __int128 v34 = v37;
    uint64_t v32 = v39;
    int64_t v19 = v40;
    uint64_t v18 = v41;
    type metadata accessor for SecureBytes.Backing();
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_186F8B2C0;
    _swift_stdlib_malloc_size((const void *)v20);
    *(_OWORD *)(v20 + 32) = v34;
    *(_OWORD *)(v20 + 48) = v33;
    *(_OWORD *)(v20 + 64) = v32;
    *(void *)(v20 + 80) = v19;
    *(void *)(v20 + 88) = v18;
    swift_beginAccess();
    *(void *)(v20 + 16) = 64LL;
    uint64_t v21 = _swift_stdlib_malloc_size((const void *)v20);
    swift_release();
    if (v21 < 96)
    {
      __break(1u);
      JUMPOUT(0x186F76900LL);
    }

    uint64_t v22 = swift_retain();
    sub_186F51190(v22);
    swift_release();
    swift_release();
    swift_release();
    uint64_t v13 = v13 + 1;
    __int16 v11 = (void *)v20;
    uint64_t v12 = v16;
    if ((v13 & 0x100) != 0)
    {
      __break(1u);
      break;
    }
  }

  if (v30 < 0) {
    goto LABEL_26;
  }
  uint64_t v23 = (uint64_t)v44;
  swift_beginAccess();
  char v24 = *(void *)(v23 + 16);
  uint64_t v25 = sub_186F51450(0LL, v30, v24, v23);
  if ((v26 & 1) != 0) {
    uint64_t v27 = v24;
  }
  else {
    uint64_t v27 = v25;
  }
  if ((v27 | v24) < 0) {
    goto LABEL_27;
  }
  if (v24 < v27) {
    goto LABEL_28;
  }
  *(void *)&uint64_t v37 = 0LL;
  *((void *)&v37 + 1) = v27;
  *(void *)&__int128 v38 = v23;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B5150);
  sub_186F410F4();
  sub_186F87FD0();
  swift_release();
  swift_release();
  uint64_t result = swift_release_n();
  *uint64_t v29 = *(void *)&v35[0];
  return result;
}

uint64_t sub_186F74B34@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  double v8 = ceil((double)a3 / 48.0);
  if ((~*(void *)&v8 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  if (v8 <= -1.0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (v8 < 256.0)
  {
    uint64_t v5 = a3;
    uint64_t v4 = a1;
    int v6 = (int)v8;
    if (qword_18C4B5020 == -1) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }

uint64_t sub_186F75124@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  double v8 = ceil((double)a3 * 0.015625);
  if ((~*(void *)&v8 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  if (v8 <= -1.0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (v8 < 256.0)
  {
    uint64_t v5 = a3;
    uint64_t v4 = a1;
    int v6 = (int)v8;
    if (qword_18C4B5020 == -1) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }

uint64_t sub_186F7572C@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  double v10 = ceil((double)a4 * 0.03125);
  if ((~*(void *)&v10 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  if (v10 <= -1.0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (v10 < 256.0)
  {
    uint64_t v7 = a4;
    unint64_t v5 = a2;
    uint64_t v6 = a1;
    int v8 = (int)v10;
    if (qword_18C4B5020 == -1) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }

uint64_t sub_186F75D0C@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  double v10 = ceil((double)a4 / 48.0);
  if ((~*(void *)&v10 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  if (v10 <= -1.0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (v10 < 256.0)
  {
    uint64_t v7 = a4;
    unint64_t v5 = a2;
    uint64_t v6 = a1;
    int v8 = (int)v10;
    if (qword_18C4B5020 == -1) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }

uint64_t sub_186F76320@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  double v10 = ceil((double)a4 * 0.015625);
  if ((~*(void *)&v10 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  if (v10 <= -1.0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (v10 < 256.0)
  {
    uint64_t v7 = a4;
    unint64_t v5 = a2;
    uint64_t v6 = a1;
    int v8 = (int)v10;
    if (qword_18C4B5020 == -1) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }

uint64_t sub_186F7694C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_186F76994( a1,  MEMORY[0x1895FA298],  &qword_18C6B05D0,  (void (*)(uint64_t, uint64_t))sub_186F53300,  (char *)sub_186F76FD8,  a2);
}

uint64_t sub_186F76970@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_186F76994( a1,  MEMORY[0x1895FA280],  &qword_18C4B4FB0,  (void (*)(uint64_t, uint64_t))sub_186F5330C,  (char *)sub_186F77154,  a2);
}

uint64_t sub_186F76994@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t *a3@<X2>, void (*a4)(uint64_t, uint64_t)@<X3>, char *a5@<X4>, _OWORD *a6@<X8>)
{
  unint64_t v12 = *(void *)(a1 + 16);
  if (v12 == 128)
  {
    uint64_t v29 = &type metadata for SymmetricKey;
    unint64_t v30 = sub_186F33F14();
    v28[0] = a1;
    goto LABEL_11;
  }

  if (v12 > 0x80)
  {
    uint64_t v13 = sub_186F87CE8();
    *(void *)(v13 + 16) = 128LL;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    *(_OWORD *)(v13 + 80) = 0u;
    *(_OWORD *)(v13 + 96) = 0u;
    *(_OWORD *)(v13 + 112) = 0u;
    *(_OWORD *)(v13 + 128) = 0u;
    *(_OWORD *)(v13 + 144) = 0u;
    uint64_t v27 = v13;
    ((void (*)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t *))a5)( v26,  a1 + 32,  a1 + 32 + *(void *)(a1 + 16),  &v27);
    swift_release();
    sub_186F3A3A0(v26, (uint64_t)v28);
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }

  uint64_t v14 = sub_186F87CE8();
  *(void *)(v14 + 16) = 128LL;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_OWORD *)(v14 + 144) = 0u;
  size_t v15 = *(void *)(a1 + 16);
  if (v15 > 0x80)
  {
    __break(1u);
LABEL_15:
    a5 = sub_186F3CB8C((char *)1, 128LL, 1, a5);
    if (!v15) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  a5 = (char *)v14;
  if (*(void *)(v14 + 24) <= 0xFFuLL) {
    goto LABEL_15;
  }
  if (v15) {
LABEL_9:
  }
    memcpy(a5 + 32, (const void *)(a1 + 32), v15);
LABEL_10:
  swift_release();
  uint64_t v29 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53B8);
  unint64_t v30 = sub_186F494E4();
  v28[0] = a5;
LABEL_11:
  uint64_t result = a2();
  if (result)
  {
    uint64_t v17 = result;
    __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v18 = swift_allocObject();
    getDigestSizeForDigestInfo();
    uint64_t v19 = swift_slowAlloc();
    ccdigest_init();
    *(void *)(v18 + 16) = v17;
    *(void *)(v18 + 24) = v19;
    *((void *)&v26[0] + 1) = v18;
    __swift_project_boxed_opaque_existential_1(v28, (uint64_t)v29);
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53B8);
    sub_186F879B8();
    uint64_t v20 = sub_186F87CDC();
    a4(v20 + 32, v20 + 32 + *(void *)(v20 + 16));
    swift_bridgeObjectRelease();
    uint64_t v21 = swift_bridgeObjectRelease();
    uint64_t result = ((uint64_t (*)(uint64_t))a2)(v21);
    if (result)
    {
      uint64_t v22 = result;
      uint64_t v23 = swift_allocObject();
      getDigestSizeForDigestInfo();
      uint64_t v24 = swift_slowAlloc();
      ccdigest_init();
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = v24;
      *(void *)&v26[0] = v23;
      __swift_project_boxed_opaque_existential_1(v28, (uint64_t)v29);
      sub_186F879B8();
      uint64_t v25 = sub_186F87CDC();
      a4(v25 + 32, v25 + 32 + *(void *)(v25 + 16));
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      uint64_t result = swift_bridgeObjectRelease();
      *a6 = v26[0];
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_186F76CC4@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 == 64)
  {
    uint64_t v21 = &type metadata for SymmetricKey;
    unint64_t v22 = sub_186F33F14();
    v20[0] = a1;
    goto LABEL_11;
  }

  if (v5 > 0x40)
  {
    uint64_t v6 = sub_186F87CE8();
    *(void *)(v6 + 16) = 64LL;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 80) = 0u;
    uint64_t v19 = (char *)v6;
    sub_186F772C0(a1 + 32, a1 + 32 + *(void *)(a1 + 16), &v19, (char **)v18);
    swift_release();
    sub_186F3A3A0(v18, (uint64_t)v20);
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }

  uint64_t v7 = sub_186F87CE8();
  *(void *)(v7 + 16) = 64LL;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  size_t v8 = *(void *)(a1 + 16);
  if (v8 > 0x40)
  {
    __break(1u);
LABEL_15:
    uint64_t v2 = sub_186F3CB8C((char *)1, 64LL, 1, v2);
    if (!v8) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  uint64_t v2 = (char *)v7;
  if (*(void *)(v7 + 24) <= 0x7FuLL) {
    goto LABEL_15;
  }
  if (v8) {
LABEL_9:
  }
    memcpy(v2 + 32, (const void *)(a1 + 32), v8);
LABEL_10:
  swift_release();
  uint64_t v21 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53B8);
  unint64_t v22 = sub_186F494E4();
  v20[0] = v2;
LABEL_11:
  uint64_t result = ccsha256_di();
  if (result)
  {
    uint64_t v10 = result;
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B54B8);
    uint64_t v11 = swift_allocObject();
    getDigestSizeForDigestInfo();
    uint64_t v12 = swift_slowAlloc();
    ccdigest_init();
    *(void *)(v11 + 16) = v10;
    *(void *)(v11 + 24) = v12;
    *((void *)&v18[0] + 1) = v11;
    __swift_project_boxed_opaque_existential_1(v20, (uint64_t)v21);
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53B8);
    sub_186F879B8();
    uint64_t v13 = sub_186F87CDC();
    sub_186F53318(v13 + 32, v13 + 32 + *(void *)(v13 + 16));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = ccsha256_di();
    if (result)
    {
      uint64_t v14 = result;
      uint64_t v15 = swift_allocObject();
      getDigestSizeForDigestInfo();
      uint64_t v16 = swift_slowAlloc();
      ccdigest_init();
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = v16;
      *(void *)&v18[0] = v15;
      __swift_project_boxed_opaque_existential_1(v20, (uint64_t)v21);
      sub_186F879B8();
      uint64_t v17 = sub_186F87CDC();
      sub_186F53318(v17 + 32, v17 + 32 + *(void *)(v17 + 16));
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = v18[0];
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_186F76FD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, char **a4@<X8>)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  uint64_t v7 = ccsha512_di();
  if (!v7) {
    __break(1u);
  }
  uint64_t v8 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6B05D0);
  uint64_t v9 = swift_allocObject();
  getDigestSizeForDigestInfo();
  uint64_t v10 = swift_slowAlloc();
  ccdigest_init();
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = v10;
  sub_186F53300(a1, a2);
  sub_186F4CB9C(&v23);
  swift_release();
  __int128 v11 = v23;
  uint64_t v12 = v24;
  uint64_t v13 = v25;
  uint64_t v15 = v26;
  uint64_t v14 = v27;
  uint64_t v16 = v28;
  uint64_t v21 = v29;
  uint64_t v17 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v17 = sub_186F3CB8C(0LL, *((void *)v17 + 2), 0, v17);
  }
  *a3 = v17;
  *((_OWORD *)v17 + 2) = v11;
  *((void *)v17 + 6) = v12;
  *((void *)v17 + 7) = v13;
  *((void *)v17 + 8) = v15;
  *((void *)v17 + 9) = v14;
  *((void *)v17 + 10) = v16;
  *((void *)v17 + 11) = v21;
  uint64_t v19 = *a3;
  a4[3] = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53B8);
  a4[4] = (char *)sub_186F494E4();
  *a4 = v19;
  return sub_186F87CDC();
}

uint64_t sub_186F77154@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, char **a4@<X8>)
{
  _OWORD v22[6] = *MEMORY[0x1895F89C0];
  uint64_t v8 = ccsha384_di();
  if (!v8) {
    __break(1u);
  }
  uint64_t v9 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B4FB0);
  uint64_t v10 = swift_allocObject();
  getDigestSizeForDigestInfo();
  uint64_t v11 = swift_slowAlloc();
  ccdigest_init();
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = v11;
  sub_186F5330C(a1, a2);
  sub_186F4CAFC((uint64_t)v22);
  swift_release();
  uint64_t v12 = v22[0];
  uint64_t v13 = v22[1];
  uint64_t v14 = v22[2];
  uint64_t v15 = v22[3];
  uint64_t v17 = v22[4];
  uint64_t v16 = v22[5];
  uint64_t v18 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v18 = sub_186F3CB8C(0LL, *((void *)v18 + 2), 0, v18);
  }
  *a3 = v18;
  *((void *)v18 + 4) = v12;
  *((void *)v18 + 5) = v13;
  *((void *)v18 + 6) = v14;
  *((void *)v18 + 7) = v15;
  *((void *)v18 + 8) = v17;
  *((void *)v18 + 9) = v16;
  uint64_t v20 = *a3;
  a4[3] = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53B8);
  a4[4] = (char *)sub_186F494E4();
  *a4 = v20;
  return sub_186F87CDC();
}

uint64_t sub_186F772C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, char **a4@<X8>)
{
  v20[4] = *MEMORY[0x1895F89C0];
  uint64_t v8 = ccsha256_di();
  if (!v8) {
    __break(1u);
  }
  uint64_t v9 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B54B8);
  uint64_t v10 = swift_allocObject();
  getDigestSizeForDigestInfo();
  uint64_t v11 = swift_slowAlloc();
  ccdigest_init();
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = v11;
  sub_186F53318(a1, a2);
  sub_186F4CA64((uint64_t)v20);
  swift_release();
  uint64_t v12 = v20[0];
  uint64_t v13 = v20[1];
  uint64_t v14 = v20[2];
  uint64_t v15 = v20[3];
  uint64_t v16 = *a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v16 = sub_186F3CB8C(0LL, *((void *)v16 + 2), 0, v16);
  }
  *a3 = v16;
  *((void *)v16 + 4) = v12;
  *((void *)v16 + 5) = v13;
  *((void *)v16 + 6) = v14;
  *((void *)v16 + 7) = v15;
  uint64_t v18 = *a3;
  a4[3] = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53B8);
  a4[4] = (char *)sub_186F494E4();
  *a4 = v18;
  return sub_186F87CDC();
}

void sub_186F7741C(uint64_t a1, uint64_t a2)
{
}

void sub_186F77474(uint64_t a1, uint64_t a2)
{
}

void sub_186F774CC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t (*sub_186F77534())(void *, uint64_t *)
{
  *(void *)(v5 - 136) = v3;
  *(_WORD *)(v5 - 128) = v2;
  *(_BYTE *)(v5 - 126) = BYTE2(v2);
  *(_BYTE *)(v5 - 125) = BYTE3(v2);
  *(_BYTE *)(v5 - 124) = BYTE4(v2);
  *(_BYTE *)(v5 - 123) = BYTE5(v2);
  sub_186F77B54((_BYTE *)(v5 - 136), (_BYTE *)(v5 - 136 + BYTE6(v2)), v1);
  if (v4)
  {
    sub_186F33C98(v3, v2);
  }

  else
  {
    uint64_t v6 = v1();
    if (!v6)
    {
      __break(1u);
      JUMPOUT(0x186F7781CLL);
    }

    uint64_t v7 = v6;
    *(void *)(v5 - 112) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
    *(void *)(v5 - 136) = v7;
    swift_dynamicCast();
    uint64_t v8 = getccec_pub_ctx_size();
    uint64_t v11 = MEMORY[0x1895F8858](v8);
    uint64_t v0 = (uint64_t (*)(void *, uint64_t *))sub_186F830E4(v11, v0);
    if (*(void *)(v5 - 144))
    {
      sub_186F35D6C();
      swift_allocError();
      *(_DWORD *)uint64_t v9 = 1;
      *(_BYTE *)(v9 + 4) = 1;
      swift_willThrow();
      sub_186F33C98(*(void *)(v5 - 104), *(void *)(v5 - 96));
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_186F33C98(*(void *)(v5 - 104), *(void *)(v5 - 96));
    }
  }

  return v0;
}

uint64_t sub_186F7782C(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void *, uint64_t *))
{
  uint64_t v6 = sub_186F77B54((_BYTE *)(a1 + 32), (_BYTE *)(a1 + 32 + *(void *)(a1 + 16)), a2);
  if (v3)
  {
    swift_bridgeObjectRelease();
    return (uint64_t)a3;
  }

  uint64_t result = ((uint64_t (*)(uint64_t))a2)(v6);
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
    swift_dynamicCast();
    uint64_t v8 = getccec_pub_ctx_size();
    uint64_t v9 = MEMORY[0x1895F8858](v8);
    a3 = (uint64_t (*)(void *, uint64_t *))sub_186F830E4(v9, a3);
    swift_bridgeObjectRelease();
    return (uint64_t)a3;
  }

  __break(1u);
  return result;
}

uint64_t sub_186F77980(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_186F779C8(a1, a2, a3, a4, MEMORY[0x1895F9B10], sub_186F789EC);
}

uint64_t sub_186F779A4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_186F779C8(a1, a2, a3, a4, MEMORY[0x1895F9B18], sub_186F789C8);
}

uint64_t sub_186F779C8( uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void *, uint64_t *))
{
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }

  else
  {
    uint64_t v9 = sub_186F77B54((_BYTE *)(a2 + a3), (_BYTE *)(a2 + (a4 >> 1)), a5);
    if (v6)
    {
      swift_unknownObjectRelease();
      return (uint64_t)a6;
    }

    uint64_t result = ((uint64_t (*)(uint64_t))a5)(v9);
    if (result)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
      swift_dynamicCast();
      uint64_t v10 = getccec_pub_ctx_size();
      uint64_t v11 = MEMORY[0x1895F8858](v10);
      a6 = (uint64_t (*)(void *, uint64_t *))sub_186F830E4(v11, a6);
      swift_unknownObjectRelease();
      return (uint64_t)a6;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_186F77B30(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_186F779C8(a1, a2, a3, a4, MEMORY[0x1895F9B20], sub_186F789A4);
}

uint64_t sub_186F77B54(_BYTE *a1, _BYTE *a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (!result) {
    goto LABEL_15;
  }
  uint64_t v6 = result;
  uint64_t v7 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v7, sel_groupOrderByteCountForCP_, v9, v6);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_13;
  }

  if (result + 0x4000000000000000LL < 0)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }

  if (!a1 || a2 - a1 != ((2 * result) | 1))
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v8 = 1;
    goto LABEL_10;
  }

  if (a2 == a1) {
    goto LABEL_14;
  }
  if (*a1 == 4) {
    return result;
  }
  sub_186F35D6C();
  swift_allocError();
  *(_DWORD *)uint64_t v8 = 5;
LABEL_10:
  *(_BYTE *)(v8 + 4) = 1;
  return swift_willThrow();
}

void sub_186F77CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_186F77D14()
{
  uint64_t v11 = v4;
  __int16 v12 = v6;
  char v13 = BYTE2(v6);
  char v14 = BYTE3(v6);
  char v15 = BYTE4(v6);
  char v16 = BYTE5(v6);
  uint64_t v7 = v5();
  if (!v7)
  {
    __break(1u);
    JUMPOUT(0x186F77FE8LL);
  }

  uint64_t v8 = v7;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  uint64_t v17 = v8;
  swift_dynamicCast();
  uint64_t result = MEMORY[0x18959EA5C](v10, BYTE6(v6), &v11, v0);
  *unint64_t v2 = (int)result;
  *uint64_t v3 = v1;
  return result;
}

uint64_t sub_186F78020( uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t result = a7();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
    swift_dynamicCast();
    uint64_t result = MEMORY[0x18959EA5C](v14, v12, a2 + 32, a1);
    *a3 = (int)result;
    *a4 = a5;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_186F780E0( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v10 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
    __break(1u);
  }

  else
  {
    uint64_t v16 = result;
    uint64_t result = a10();
    if (result)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
      swift_dynamicCast();
      uint64_t result = MEMORY[0x18959EA5C](v17, v10, a3 + a4, v16);
      *a6 = (int)result;
      *a7 = a8;
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_186F781BC( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t result = a7();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
    uint64_t result = swift_dynamicCast();
    if (a1)
    {
      uint64_t result = MEMORY[0x18959EA5C](v14, a2 - a1, a1, a4);
      *a3 = (int)result;
      *a5 = a6;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void sub_186F78280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  if (a6())
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
    swift_dynamicCast();
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x186F78440LL);
}

void sub_186F78454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  if (a6())
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
    swift_dynamicCast();
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x186F785ECLL);
}

uint64_t P256.Signing.PublicKey.keyFromDiversification(with:seedExtractionLabel:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return sub_186F78798(a1, a2, a3, a4, MEMORY[0x1895F9B10], sub_186F78AA0, a5);
}

void P256.KeyAgreement.PrivateKey.keyFromDiversification(with:seedExtractionLabel:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = v7;
}

uint64_t P256.KeyAgreement.PublicKey.keyFromDiversification(with:seedExtractionLabel:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return sub_186F78798(a1, a2, a3, a4, MEMORY[0x1895F9B10], sub_186F78AA0, a5);
}

uint64_t P384.Signing.PublicKey.keyFromDiversification(with:seedExtractionLabel:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return sub_186F78798(a1, a2, a3, a4, MEMORY[0x1895F9B18], sub_186F78A7C, a5);
}

void P384.KeyAgreement.PrivateKey.keyFromDiversification(with:seedExtractionLabel:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = v7;
}

uint64_t P384.KeyAgreement.PublicKey.keyFromDiversification(with:seedExtractionLabel:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return sub_186F78798(a1, a2, a3, a4, MEMORY[0x1895F9B18], sub_186F78A7C, a5);
}

uint64_t P521.Signing.PublicKey.keyFromDiversification(with:seedExtractionLabel:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return sub_186F78798(a1, a2, a3, a4, MEMORY[0x1895F9B20], sub_186F78A58, a5);
}

void P521.KeyAgreement.PrivateKey.keyFromDiversification(with:seedExtractionLabel:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = v7;
}

uint64_t P521.KeyAgreement.PublicKey.keyFromDiversification(with:seedExtractionLabel:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return sub_186F78798(a1, a2, a3, a4, MEMORY[0x1895F9B20], sub_186F78A58, a5);
}

uint64_t sub_186F78798@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void)@<X4>, uint64_t (*a6)(void *, uint64_t *)@<X6>, uint64_t *a7@<X8>)
{
  uint64_t result = sub_186F7782C(v11, a5, a6);
  *a7 = result;
  return result;
}

uint64_t sub_186F78830( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t result = sub_186F8797C();
  uint64_t v9 = result;
  if (result)
  {
    uint64_t result = sub_186F879A0();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v9 += a1 - result;
  }

  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v12 = sub_186F87994();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t v14 = v9 + v13;
  if (v9) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0LL;
  }
  return a5(v9, v15);
}

void sub_186F788CC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a1;
  if (v4) {
    sub_186F77CA4(v4, *a4, a4[1]);
  }
  else {
    __break(1u);
  }
}

uint64_t sub_186F78910(uint64_t *a1, void *a2, uint64_t a3, uint64_t *a4, void *a5, uint64_t (*a6)(void))
{
  uint64_t result = *a1;
  if (result) {
    return sub_186F78020(result, *a4, a5, a2, a3, (uint64_t)v7, a6);
  }
  __break(1u);
  return result;
}

uint64_t sub_186F78958(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(void))
{
  uint64_t result = *a1;
  if (result) {
    return sub_186F780E0( result,  *(void *)a4,  *(void *)(a4 + 8),  *(void *)(a4 + 16),  *(void *)(a4 + 24),  a5,  a2,  a3,  (uint64_t)v7,  a6);
  }
  __break(1u);
  return result;
}

uint64_t sub_186F789A4(uint64_t *a1, void *a2)
{
  return sub_186F78958(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), MEMORY[0x1895F9B20]);
}

uint64_t sub_186F789C8(uint64_t *a1, void *a2)
{
  return sub_186F78958(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), MEMORY[0x1895F9B18]);
}

uint64_t sub_186F789EC(uint64_t *a1, void *a2)
{
  return sub_186F78958(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), MEMORY[0x1895F9B10]);
}

void sub_186F78A10(uint64_t *a1, uint64_t a2)
{
}

void sub_186F78A34(uint64_t *a1, uint64_t a2)
{
}

uint64_t sub_186F78A58(uint64_t *a1, void *a2)
{
  return sub_186F78910(a1, a2, *(void *)(v2 + 16), *(uint64_t **)(v2 + 24), *(void **)(v2 + 32), MEMORY[0x1895F9B20]);
}

uint64_t sub_186F78A7C(uint64_t *a1, void *a2)
{
  return sub_186F78910(a1, a2, *(void *)(v2 + 16), *(uint64_t **)(v2 + 24), *(void **)(v2 + 32), MEMORY[0x1895F9B18]);
}

uint64_t sub_186F78AA0(uint64_t *a1, void *a2)
{
  return sub_186F78910(a1, a2, *(void *)(v2 + 16), *(uint64_t **)(v2 + 24), *(void **)(v2 + 32), MEMORY[0x1895F9B10]);
}

uint64_t AES.GCM.Nonce.init()@<X0>(void *a1@<X8>)
{
  return sub_186F78D90(a1);
}

uint64_t ChaChaPoly.Nonce.init<A>(data:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (sub_186F87D3C() == 12)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
    uint64_t v9 = sub_186F87AE4();
    uint64_t v11 = v10;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
    *a3 = v9;
    a3[1] = v11;
  }

  else
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = 1;
    *(_BYTE *)(v13 + 4) = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  }

  return result;
}

uint64_t AES.GCM.Nonce.init<A>(data:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (sub_186F87D3C() >= 12)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
    uint64_t v11 = sub_186F87AE4();
    uint64_t v13 = v12;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
    *a3 = v11;
    a3[1] = v13;
  }

  else
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v9 = 1;
    *(_BYTE *)(v9 + 4) = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  }

  return result;
}

uint64_t ChaChaPoly.Nonce.init()@<X0>(void *a1@<X8>)
{
  return sub_186F78D90(a1);
}

uint64_t sub_186F78D90@<X0>(void *a1@<X8>)
{
  if (!ccrng()) {
    __break(1u);
  }
  uint64_t result = ccrng_generate_bridge();
  *a1 = 0LL;
  a1[1] = 0xC000000000000LL;
  return result;
}

uint64_t ChaChaPoly.Nonce.withUnsafeBytes<A>(_:)()
{
  return sub_186F87A78();
}

void AES.GCM.Nonce.makeIterator()()
{
}

uint64_t sub_186F78EA0()
{
  return ChaChaPoly.Nonce.withUnsafeBytes<A>(_:)();
}

uint64_t sub_186F78EB4@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F79178((uint64_t (*)(void))AES.GCM.Nonce.makeIterator(), a1);
}

uint64_t sub_186F78EC0()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = sub_186F6A790(v1, v2);
  sub_186F33C98(v1, v2);
  return v3;
}

uint64_t sub_186F78F04(uint64_t *a1, _BYTE *a2, uint64_t a3)
{
  return sub_186F69700(a1, a2, a3, *(void *)v3, *(void *)(v3 + 8));
}

void ChaChaPoly.Nonce.makeIterator()()
{
}

void sub_186F78F50()
{
  __asm { BR              X10 }

size_t sub_186F78F98()
{
  uint64_t v3 = v0;
  __int16 v4 = v1;
  char v5 = BYTE2(v1);
  char v6 = BYTE3(v1);
  char v7 = BYTE4(v1);
  char v8 = BYTE5(v1);
  return sub_186F4B3D0((size_t)&v3, (unint64_t)&v3 + BYTE6(v1));
}

uint64_t sub_186F7916C@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F79178((uint64_t (*)(void))ChaChaPoly.Nonce.makeIterator(), a1);
}

uint64_t sub_186F79178@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = a1();
  uint64_t result = sub_186F33C98(*(void *)v2, *(void *)(v2 + 8));
  *a2 = v4;
  a2[1] = 0LL;
  return result;
}

uint64_t sub_186F791B0()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = sub_186F6A2C4(v1, v2);
  sub_186F33C98(v1, v2);
  return v3;
}

uint64_t sub_186F791F4(uint64_t *a1, _BYTE *a2, uint64_t a3)
{
  return sub_186F692C4(a1, a2, a3, *(void *)v3, *(void *)(v3 + 8));
}

void sub_186F791FC(uint64_t a1)
{
  __asm { BR              X13 }

void *sub_186F79258( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __b, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v30 = v25;
  LOWORD(v31) = v24;
  BYTE2(v31) = BYTE2(v24);
  HIBYTE(v31) = BYTE3(v24);
  unsigned __int8 v32 = BYTE4(v24);
  unsigned __int8 v33 = BYTE5(v24);
  unsigned __int8 v34 = BYTE6(v24);
  uint64_t result = memset(&v30, v27, BYTE6(v24));
  unint64_t v29 = v31 | ((unint64_t)v32 << 32) | ((unint64_t)v33 << 40) | ((unint64_t)v34 << 48);
  *uint64_t v26 = v30;
  v26[1] = v29;
  return result;
}

ValueMetadata *type metadata accessor for AES.GCM.Nonce()
{
  return &type metadata for AES.GCM.Nonce;
}

ValueMetadata *type metadata accessor for ChaChaPoly.Nonce()
{
  return &type metadata for ChaChaPoly.Nonce;
}

uint64_t AES.GCM.Nonce.withUnsafeBytes<A>(_:)()
{
  return ChaChaPoly.Nonce.withUnsafeBytes<A>(_:)();
}

uint64_t static SHA256Digest.byteCount.getter()
{
  return 32LL;
}

uint64_t static SHA384Digest.byteCount.getter()
{
  return 48LL;
}

uint64_t static SHA512Digest.byteCount.getter()
{
  return 64LL;
}

uint64_t sub_186F79444( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x1895F8858]();
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = v16(v12, v12 + *(void *)(*(void *)(v15 - 8) + 64LL), v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t SHA256Digest.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  __int128 v5 = v3[1];
  v10[0] = *v3;
  v10[1] = v5;
  uint64_t v12 = a3;
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B5428);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B5420);
  return sub_186F79444( (uint64_t)v10,  (uint64_t)sub_186F795A4,  (uint64_t)v11,  v6,  v7,  a3,  MEMORY[0x18961A3E8],  (uint64_t)&v9);
}

uint64_t sub_186F795A4(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1) {
    uint64_t v6 = a1 + 32;
  }
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(a1, v6);
  if (v4) {
    *a3 = v4;
  }
  return result;
}

uint64_t sub_186F795E0()
{
  v6[1] = *MEMORY[0x1895F89C0];
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = *v0;
  v6[0] = MEMORY[0x18961AFE8];
  sub_186F84A74((uint64_t)&v5, (char *)v6);
  uint64_t v5 = v1;
  sub_186F84A74((uint64_t)&v5, (char *)v6);
  uint64_t v5 = v2;
  sub_186F84A74((uint64_t)&v5, (char *)v6);
  uint64_t v5 = v3;
  sub_186F84A74((uint64_t)&v5, (char *)v6);
  uint64_t result = v6[0];
  if (*(void *)(v6[0] + 16LL) < 0x20uLL) {
    __break(1u);
  }
  return result;
}

uint64_t SHA256Digest.description.getter()
{
  uint64_t v15 = 0x6420363532414853LL;
  unint64_t v16 = 0xEF203A7473656769LL;
  __int128 v1 = v0[1];
  v14[0] = *v0;
  v14[1] = v1;
  uint64_t result = sub_186F795E0();
  unint64_t v6 = (v5 >> 1) - v4;
  if (__OFSUB__(v5 >> 1, v4))
  {
    __break(1u);
    goto LABEL_9;
  }

  if ((uint64_t)(v6 + 0x4000000000000000LL) < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  size_t v7 = 2 * v6;
  if (((2 * v6) & 0x8000000000000000LL) != 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v8 = result;
  uint64_t v9 = v3;
  uint64_t v10 = v4;
  unint64_t v11 = v5;
  if (v7)
  {
    uint64_t v12 = sub_186F87CE8();
    *(void *)(v12 + 16) = v7;
    bzero((void *)(v12 + 32), v7);
  }

  else
  {
    uint64_t v12 = MEMORY[0x18961AFE8];
  }

  uint64_t v13 = 0LL;
  *(void *)&v14[0] = v12;
  sub_186F87EA4();
  sub_186F3D0DC(v8, v9, v10, v11, (uint64_t *)v14, &v13);
  swift_unknownObjectRelease();
  sub_186F87CDC();
  sub_186F87BC8();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_186F87BEC();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t SHA256Digest.hash(into:)()
{
  return sub_186F87FE8();
}

uint64_t SHA256Digest.hashValue.getter()
{
  return sub_186F88018();
}

uint64_t sub_186F7992C()
{
  return 32LL;
}

uint64_t sub_186F79934()
{
  return sub_186F88018();
}

uint64_t sub_186F799C0()
{
  return sub_186F87FE8();
}

uint64_t sub_186F79A2C()
{
  return sub_186F88018();
}

uint64_t sub_186F79AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SHA256Digest.withUnsafeBytes<A>(_:)(a1, a2, a3);
}

size_t sub_186F79ACC@<X0>(size_t *a1@<X8>)
{
  v6[1] = *MEMORY[0x1895F89C0];
  __int128 v3 = v1[1];
  v5[0] = *v1;
  v5[1] = v3;
  size_t result = sub_186F4B3D0((size_t)v5, (unint64_t)v6);
  *a1 = result;
  a1[1] = 0LL;
  return result;
}

void *sub_186F79B38()
{
  return sub_186F6A2D0(*v0, v0[1], v0[2], v0[3]);
}

size_t sub_186F79B44(size_t *a1, _BYTE *a2, size_t a3)
{
  return sub_186F692D0(a1, a2, a3, *v3, v3[1], v3[2], v3[3]);
}

BOOL sub_186F79B50()
{
  return cc_cmp_safe() == 0;
}

uint64_t SHA384Digest.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  __int128 v5 = v3[1];
  v10[0] = *v3;
  v10[1] = v5;
  _OWORD v10[2] = v3[2];
  uint64_t v12 = a3;
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B5158);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B5420);
  return sub_186F79444( (uint64_t)v10,  (uint64_t)sub_186F7B874,  (uint64_t)v11,  v6,  v7,  a3,  MEMORY[0x18961A3E8],  (uint64_t)&v9);
}

uint64_t sub_186F79C8C()
{
  v8[1] = *MEMORY[0x1895F89C0];
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v7 = *v0;
  v8[0] = MEMORY[0x18961AFE8];
  sub_186F84A74((uint64_t)&v7, (char *)v8);
  uint64_t v7 = v1;
  sub_186F84A74((uint64_t)&v7, (char *)v8);
  uint64_t v7 = v2;
  sub_186F84A74((uint64_t)&v7, (char *)v8);
  uint64_t v7 = v3;
  sub_186F84A74((uint64_t)&v7, (char *)v8);
  uint64_t v7 = v4;
  sub_186F84A74((uint64_t)&v7, (char *)v8);
  uint64_t v7 = v5;
  sub_186F84A74((uint64_t)&v7, (char *)v8);
  uint64_t result = v8[0];
  if (*(void *)(v8[0] + 16LL) < 0x30uLL) {
    __break(1u);
  }
  return result;
}

uint64_t SHA384Digest.description.getter()
{
  uint64_t v15 = 0x6420343833414853LL;
  unint64_t v16 = 0xEF203A7473656769LL;
  __int128 v1 = v0[1];
  v14[0] = *v0;
  v14[1] = v1;
  _OWORD v14[2] = v0[2];
  uint64_t result = sub_186F79C8C();
  unint64_t v6 = (v5 >> 1) - v4;
  if (__OFSUB__(v5 >> 1, v4))
  {
    __break(1u);
    goto LABEL_9;
  }

  if ((uint64_t)(v6 + 0x4000000000000000LL) < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  size_t v7 = 2 * v6;
  if (((2 * v6) & 0x8000000000000000LL) != 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v8 = result;
  uint64_t v9 = v3;
  uint64_t v10 = v4;
  unint64_t v11 = v5;
  if (v7)
  {
    uint64_t v12 = sub_186F87CE8();
    *(void *)(v12 + 16) = v7;
    bzero((void *)(v12 + 32), v7);
  }

  else
  {
    uint64_t v12 = MEMORY[0x18961AFE8];
  }

  uint64_t v13 = 0LL;
  *(void *)&v14[0] = v12;
  sub_186F87EA4();
  sub_186F3D0DC(v8, v9, v10, v11, (uint64_t *)v14, &v13);
  swift_unknownObjectRelease();
  sub_186F87CDC();
  sub_186F87BC8();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_186F87BEC();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t SHA384Digest.hash(into:)()
{
  return sub_186F87FE8();
}

uint64_t SHA384Digest.hashValue.getter()
{
  return sub_186F88018();
}

uint64_t sub_186F7A024()
{
  return sub_186F88018();
}

uint64_t sub_186F7A0B8()
{
  return sub_186F87FE8();
}

uint64_t sub_186F7A12C()
{
  return sub_186F88018();
}

uint64_t sub_186F7A1BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SHA384Digest.withUnsafeBytes<A>(_:)(a1, a2, a3);
}

size_t sub_186F7A1D4@<X0>(size_t *a1@<X8>)
{
  v6[1] = *MEMORY[0x1895F89C0];
  __int128 v3 = v1[1];
  v5[0] = *v1;
  v5[1] = v3;
  _OWORD v5[2] = v1[2];
  size_t result = sub_186F4B3D0((size_t)v5, (unint64_t)v6);
  *a1 = result;
  a1[1] = 0LL;
  return result;
}

void *sub_186F7A248()
{
  __int128 v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  __int128 v3[2] = v0[2];
  return sub_186F6A45C(v3);
}

size_t sub_186F7A278(size_t *a1, _BYTE *a2, size_t a3)
{
  return sub_186F6942C(a1, a2, a3);
}

BOOL sub_186F7A2B0()
{
  return cc_cmp_safe() == 0;
}

__int128 *sub_186F7A32C@<X0>(__int128 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (result) {
    BOOL v3 = a2 - (void)result == 64;
  }
  else {
    BOOL v3 = 0;
  }
  char v4 = !v3;
  __int128 v5 = 0uLL;
  __int128 v6 = 0uLL;
  __int128 v7 = 0uLL;
  __int128 v8 = 0uLL;
  if (v3)
  {
    __int128 v5 = *result;
    __int128 v6 = result[1];
    __int128 v7 = result[2];
    __int128 v8 = result[3];
  }

  *(_OWORD *)a3 = v5;
  *(_OWORD *)(a3 + 16) = v6;
  *(_OWORD *)(a3 + 32) = v7;
  *(_OWORD *)(a3 + 48) = v8;
  *(_BYTE *)(a3 + 64) = v4;
  return result;
}

uint64_t SHA512Digest.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  __int128 v5 = v3[1];
  v11[0] = *v3;
  v11[1] = v5;
  __int128 v6 = v3[3];
  id v11[2] = v3[2];
  v11[3] = v6;
  uint64_t v13 = a3;
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C6B19D0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B5420);
  return sub_186F79444( (uint64_t)v11,  (uint64_t)sub_186F7B8B0,  (uint64_t)v12,  v7,  v8,  a3,  MEMORY[0x18961A3E8],  (uint64_t)&v10);
}

uint64_t sub_186F7A47C()
{
  v10[1] = *MEMORY[0x1895F89C0];
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[7];
  uint64_t v9 = *v0;
  v10[0] = MEMORY[0x18961AFE8];
  sub_186F84A74((uint64_t)&v9, (char *)v10);
  uint64_t v9 = v1;
  sub_186F84A74((uint64_t)&v9, (char *)v10);
  uint64_t v9 = v2;
  sub_186F84A74((uint64_t)&v9, (char *)v10);
  uint64_t v9 = v3;
  sub_186F84A74((uint64_t)&v9, (char *)v10);
  uint64_t v9 = v4;
  sub_186F84A74((uint64_t)&v9, (char *)v10);
  uint64_t v9 = v5;
  sub_186F84A74((uint64_t)&v9, (char *)v10);
  uint64_t v9 = v6;
  sub_186F84A74((uint64_t)&v9, (char *)v10);
  uint64_t v9 = v7;
  sub_186F84A74((uint64_t)&v9, (char *)v10);
  uint64_t result = v10[0];
  if (*(void *)(v10[0] + 16LL) < 0x40uLL) {
    __break(1u);
  }
  return result;
}

uint64_t SHA512Digest.description.getter()
{
  uint64_t v16 = 0x6420323135414853LL;
  unint64_t v17 = 0xEF203A7473656769LL;
  __int128 v1 = v0[1];
  v15[0] = *v0;
  v15[1] = v1;
  __int128 v2 = v0[3];
  void v15[2] = v0[2];
  _OWORD v15[3] = v2;
  uint64_t result = sub_186F7A47C();
  unint64_t v7 = (v6 >> 1) - v5;
  if (__OFSUB__(v6 >> 1, v5))
  {
    __break(1u);
    goto LABEL_9;
  }

  if ((uint64_t)(v7 + 0x4000000000000000LL) < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  size_t v8 = 2 * v7;
  if (((2 * v7) & 0x8000000000000000LL) != 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v9 = result;
  uint64_t v10 = v4;
  uint64_t v11 = v5;
  unint64_t v12 = v6;
  if (v8)
  {
    uint64_t v13 = sub_186F87CE8();
    *(void *)(v13 + 16) = v8;
    bzero((void *)(v13 + 32), v8);
  }

  else
  {
    uint64_t v13 = MEMORY[0x18961AFE8];
  }

  uint64_t v14 = 0LL;
  *(void *)&v15[0] = v13;
  sub_186F87EA4();
  sub_186F3D0DC(v9, v10, v11, v12, (uint64_t *)v15, &v14);
  swift_unknownObjectRelease();
  sub_186F87CDC();
  sub_186F87BC8();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_186F87BEC();
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t SHA512Digest.hash(into:)()
{
  return sub_186F87FE8();
}

uint64_t SHA512Digest.hashValue.getter()
{
  return sub_186F88018();
}

uint64_t sub_186F7A854()
{
  return sub_186F88018();
}

uint64_t sub_186F7A8F4()
{
  return sub_186F87FE8();
}

uint64_t sub_186F7A968()
{
  return sub_186F88018();
}

uint64_t sub_186F7AA04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SHA512Digest.withUnsafeBytes<A>(_:)(a1, a2, a3);
}

size_t sub_186F7AA1C@<X0>(size_t *a1@<X8>)
{
  v7[1] = *MEMORY[0x1895F89C0];
  __int128 v3 = v1[1];
  v6[0] = *v1;
  v6[1] = v3;
  __int128 v4 = v1[3];
  void v6[2] = v1[2];
  void v6[3] = v4;
  size_t result = sub_186F4B3D0((size_t)v6, (unint64_t)v7);
  *a1 = result;
  a1[1] = 0LL;
  return result;
}

void *sub_186F7AA90()
{
  __int128 v1 = v0[1];
  v4[0] = *v0;
  v4[1] = v1;
  __int128 v2 = v0[3];
  void v4[2] = v0[2];
  _OWORD v4[3] = v2;
  return sub_186F6A5F0(v4);
}

size_t sub_186F7AAC0(size_t *a1, _BYTE *a2, size_t a3)
{
  return sub_186F69590(a1, a2, a3);
}

BOOL sub_186F7AAF8()
{
  return cc_cmp_safe() == 0;
}

uint64_t static Insecure.SHA1Digest.byteCount.getter()
{
  return 20LL;
}

uint64_t Insecure.SHA1Digest.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t v5 = *((void *)v3 + 2);
  __int128 v10 = *v3;
  uint64_t v11 = v5;
  uint64_t v13 = a3;
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B54E0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B5420);
  return sub_186F79444( (uint64_t)&v10,  (uint64_t)sub_186F7B8EC,  (uint64_t)v12,  v6,  v7,  a3,  MEMORY[0x18961A3E8],  (uint64_t)&v9);
}

uint64_t sub_186F7AC4C()
{
  v5[1] = *MEMORY[0x1895F89C0];
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[2];
  uint64_t v4 = *v0;
  v5[0] = MEMORY[0x18961AFE8];
  sub_186F84A74((uint64_t)&v4, (char *)v5);
  uint64_t v4 = v1;
  sub_186F84A74((uint64_t)&v4, (char *)v5);
  uint64_t v4 = v2;
  sub_186F84A74((uint64_t)&v4, (char *)v5);
  uint64_t result = v5[0];
  if (*(void *)(v5[0] + 16LL) < 0x14uLL) {
    __break(1u);
  }
  return result;
}

uint64_t Insecure.SHA1Digest.description.getter()
{
  uint64_t v1 = *((void *)v0 + 2);
  strcpy((char *)v16, "SHA1 digest: ");
  HIWORD(v16[1]) = -4864;
  __int128 v14 = *v0;
  uint64_t v15 = v1;
  uint64_t result = sub_186F7AC4C();
  unint64_t v6 = (v5 >> 1) - v4;
  if (__OFSUB__(v5 >> 1, v4))
  {
    __break(1u);
    goto LABEL_9;
  }

  if ((uint64_t)(v6 + 0x4000000000000000LL) < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  size_t v7 = 2 * v6;
  if (((2 * v6) & 0x8000000000000000LL) != 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v8 = result;
  uint64_t v9 = v3;
  uint64_t v10 = v4;
  unint64_t v11 = v5;
  if (v7)
  {
    uint64_t v12 = sub_186F87CE8();
    *(void *)(v12 + 16) = v7;
    bzero((void *)(v12 + 32), v7);
  }

  else
  {
    uint64_t v12 = MEMORY[0x18961AFE8];
  }

  uint64_t v13 = 0LL;
  *(void *)&__int128 v14 = v12;
  sub_186F87EA4();
  sub_186F3D0DC(v8, v9, v10, v11, (uint64_t *)&v14, &v13);
  swift_unknownObjectRelease();
  sub_186F87CDC();
  sub_186F87BC8();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_186F87BEC();
  swift_bridgeObjectRelease();
  return v16[0];
}

uint64_t Insecure.SHA1Digest.hash(into:)()
{
  return sub_186F87FE8();
}

uint64_t Insecure.SHA1Digest.hashValue.getter()
{
  return sub_186F88018();
}

uint64_t sub_186F7AF8C()
{
  return 20LL;
}

uint64_t sub_186F7AF94()
{
  return sub_186F88018();
}

uint64_t sub_186F7B020()
{
  return sub_186F87FE8();
}

uint64_t sub_186F7B094()
{
  return sub_186F88018();
}

uint64_t sub_186F7B11C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Insecure.SHA1Digest.withUnsafeBytes<A>(_:)(a1, a2, a3);
}

size_t sub_186F7B134@<X0>(size_t *a1@<X8>)
{
  v6[1] = *MEMORY[0x1895F89C0];
  uint64_t v3 = *((void *)v1 + 2);
  __int128 v5 = *v1;
  v6[0] = v3;
  size_t result = sub_186F4B3D0((size_t)&v5, (unint64_t)v6 + 4);
  *a1 = result;
  a1[1] = 0LL;
  return result;
}

void *sub_186F7B1A8()
{
  return sub_186F6AAB4(*v0, v0[1], v0[2]);
}

size_t sub_186F7B1B4(size_t *a1, _BYTE *a2, size_t a3)
{
  return sub_186F69CF4(a1, a2, a3, *v3, v3[1], v3[2]);
}

BOOL sub_186F7B1C0()
{
  return cc_cmp_safe() == 0;
}

uint64_t static Insecure.MD5Digest.byteCount.getter()
{
  return 16LL;
}

uint64_t Insecure.MD5Digest.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  __int128 v9 = *v3;
  uint64_t v11 = a3;
  uint64_t v12 = a1;
  uint64_t v13 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B54E8);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B5420);
  return sub_186F79444( (uint64_t)&v9,  (uint64_t)sub_186F7B928,  (uint64_t)v10,  v5,  v6,  a3,  MEMORY[0x18961A3E8],  (uint64_t)&v8);
}

uint64_t sub_186F7B30C()
{
  v4[1] = *MEMORY[0x1895F89C0];
  uint64_t v1 = v0[1];
  uint64_t v3 = *v0;
  v4[0] = MEMORY[0x18961AFE8];
  sub_186F84A74((uint64_t)&v3, (char *)v4);
  uint64_t v3 = v1;
  sub_186F84A74((uint64_t)&v3, (char *)v4);
  uint64_t result = v4[0];
  if (*(void *)(v4[0] + 16LL) < 0x10uLL) {
    __break(1u);
  }
  return result;
}

uint64_t Insecure.MD5Digest.description.getter()
{
  BYTE5(v14[1]) = 0;
  HIWORD(v14[1]) = -5120;
  __int128 v13 = *v0;
  uint64_t result = sub_186F7B30C();
  unint64_t v5 = (v4 >> 1) - v3;
  if (__OFSUB__(v4 >> 1, v3))
  {
    __break(1u);
    goto LABEL_9;
  }

  if ((uint64_t)(v5 + 0x4000000000000000LL) < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  size_t v6 = 2 * v5;
  if (((2 * v5) & 0x8000000000000000LL) != 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v7 = result;
  uint64_t v8 = v2;
  uint64_t v9 = v3;
  unint64_t v10 = v4;
  if (v6)
  {
    uint64_t v11 = sub_186F87CE8();
    *(void *)(v11 + 16) = v6;
    bzero((void *)(v11 + 32), v6);
  }

  else
  {
    uint64_t v11 = MEMORY[0x18961AFE8];
  }

  uint64_t v12 = 0LL;
  *(void *)&__int128 v13 = v11;
  sub_186F87EA4();
  sub_186F3D0DC(v7, v8, v9, v10, (uint64_t *)&v13, &v12);
  swift_unknownObjectRelease();
  sub_186F87CDC();
  sub_186F87BC8();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  sub_186F87BEC();
  swift_bridgeObjectRelease();
  return v14[0];
}

uint64_t Insecure.MD5Digest.hash(into:)()
{
  return sub_186F87FE8();
}

uint64_t Insecure.MD5Digest.hashValue.getter()
{
  return sub_186F88018();
}

uint64_t sub_186F7B610()
{
  return 16LL;
}

uint64_t sub_186F7B618()
{
  return sub_186F88018();
}

uint64_t sub_186F7B694()
{
  return sub_186F87FE8();
}

uint64_t sub_186F7B700()
{
  return sub_186F88018();
}

uint64_t sub_186F7B778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Insecure.MD5Digest.withUnsafeBytes<A>(_:)(a1, a2, a3);
}

size_t sub_186F7B790@<X0>(size_t *a1@<X8>)
{
  v5[1] = *MEMORY[0x1895F89C0];
  __int128 v4 = *v1;
  size_t result = sub_186F4B3D0((size_t)&v4, (unint64_t)v5);
  *a1 = result;
  a1[1] = 0LL;
  return result;
}

void *sub_186F7B7FC()
{
  return sub_186F6AC40(*v0, v0[1]);
}

size_t sub_186F7B804(size_t *a1, _BYTE *a2, size_t a3)
{
  return sub_186F69E50(a1, a2, a3, *v3, v3[1]);
}

BOOL sub_186F7B80C()
{
  return cc_cmp_safe() == 0;
}

uint64_t sub_186F7B874(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1) {
    uint64_t v6 = a1 + 48;
  }
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(a1, v6);
  if (v4) {
    *a3 = v4;
  }
  return result;
}

uint64_t sub_186F7B8B0(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1) {
    uint64_t v6 = a1 + 64;
  }
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(a1, v6);
  if (v4) {
    *a3 = v4;
  }
  return result;
}

uint64_t sub_186F7B8EC(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1) {
    uint64_t v6 = a1 + 20;
  }
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(a1, v6);
  if (v4) {
    *a3 = v4;
  }
  return result;
}

uint64_t sub_186F7B928(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1) {
    uint64_t v6 = a1 + 16;
  }
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(a1, v6);
  if (v4) {
    *a3 = v4;
  }
  return result;
}

unint64_t sub_186F7B964(uint64_t a1)
{
  unint64_t result = sub_186F537A4();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_186F7B988(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_186F7C02C( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F7B9AC,  (uint64_t (*)(void))sub_186F7B9F0,  (uint64_t (*)(void))sub_186F7BA34,  (uint64_t (*)(void))sub_186F7BA78);
}

unint64_t sub_186F7B9AC()
{
  unint64_t result = qword_18C4B5240;
  if (!qword_18C4B5240)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SHA256Digest, &type metadata for SHA256Digest);
    atomic_store(result, (unint64_t *)&qword_18C4B5240);
  }

  return result;
}

unint64_t sub_186F7B9F0()
{
  unint64_t result = qword_18C4B5260;
  if (!qword_18C4B5260)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SHA256Digest, &type metadata for SHA256Digest);
    atomic_store(result, (unint64_t *)&qword_18C4B5260);
  }

  return result;
}

unint64_t sub_186F7BA34()
{
  unint64_t result = qword_18C4B5248;
  if (!qword_18C4B5248)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SHA256Digest, &type metadata for SHA256Digest);
    atomic_store(result, (unint64_t *)&qword_18C4B5248);
  }

  return result;
}

unint64_t sub_186F7BA78()
{
  unint64_t result = qword_18C4B5258;
  if (!qword_18C4B5258)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SHA256Digest, &type metadata for SHA256Digest);
    atomic_store(result, (unint64_t *)&qword_18C4B5258);
  }

  return result;
}

unint64_t sub_186F7BAC0()
{
  unint64_t result = qword_18C4B5250;
  if (!qword_18C4B5250)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SHA256Digest, &type metadata for SHA256Digest);
    atomic_store(result, (unint64_t *)&qword_18C4B5250);
  }

  return result;
}

unint64_t sub_186F7BB04(uint64_t a1)
{
  unint64_t result = sub_186F53858();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_186F7BB28(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_186F7C02C( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F7BB4C,  (uint64_t (*)(void))sub_186F7BB90,  (uint64_t (*)(void))sub_186F7BBD4,  (uint64_t (*)(void))sub_186F7BC18);
}

unint64_t sub_186F7BB4C()
{
  unint64_t result = qword_18C4B4FE8;
  if (!qword_18C4B4FE8)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SHA384Digest, &type metadata for SHA384Digest);
    atomic_store(result, (unint64_t *)&qword_18C4B4FE8);
  }

  return result;
}

unint64_t sub_186F7BB90()
{
  unint64_t result = qword_18C4B5008;
  if (!qword_18C4B5008)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SHA384Digest, &type metadata for SHA384Digest);
    atomic_store(result, (unint64_t *)&qword_18C4B5008);
  }

  return result;
}

unint64_t sub_186F7BBD4()
{
  unint64_t result = qword_18C4B4FF0;
  if (!qword_18C4B4FF0)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SHA384Digest, &type metadata for SHA384Digest);
    atomic_store(result, (unint64_t *)&qword_18C4B4FF0);
  }

  return result;
}

unint64_t sub_186F7BC18()
{
  unint64_t result = qword_18C4B5000;
  if (!qword_18C4B5000)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SHA384Digest, &type metadata for SHA384Digest);
    atomic_store(result, (unint64_t *)&qword_18C4B5000);
  }

  return result;
}

unint64_t sub_186F7BC60()
{
  unint64_t result = qword_18C4B4FF8;
  if (!qword_18C4B4FF8)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SHA384Digest, &type metadata for SHA384Digest);
    atomic_store(result, (unint64_t *)&qword_18C4B4FF8);
  }

  return result;
}

unint64_t sub_186F7BCA4(uint64_t a1)
{
  unint64_t result = sub_186F5390C();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_186F7BCC8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_186F7C02C( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F7BCEC,  (uint64_t (*)(void))sub_186F7BD30,  (uint64_t (*)(void))sub_186F7BD74,  (uint64_t (*)(void))sub_186F7BDB8);
}

unint64_t sub_186F7BCEC()
{
  unint64_t result = qword_18C6B19D8;
  if (!qword_18C6B19D8)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SHA512Digest, &type metadata for SHA512Digest);
    atomic_store(result, (unint64_t *)&qword_18C6B19D8);
  }

  return result;
}

unint64_t sub_186F7BD30()
{
  unint64_t result = qword_18C6B19E0;
  if (!qword_18C6B19E0)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SHA512Digest, &type metadata for SHA512Digest);
    atomic_store(result, (unint64_t *)&qword_18C6B19E0);
  }

  return result;
}

unint64_t sub_186F7BD74()
{
  unint64_t result = qword_18C6B19E8;
  if (!qword_18C6B19E8)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SHA512Digest, &type metadata for SHA512Digest);
    atomic_store(result, (unint64_t *)&qword_18C6B19E8);
  }

  return result;
}

unint64_t sub_186F7BDB8()
{
  unint64_t result = qword_18C6B19F0;
  if (!qword_18C6B19F0)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SHA512Digest, &type metadata for SHA512Digest);
    atomic_store(result, (unint64_t *)&qword_18C6B19F0);
  }

  return result;
}

unint64_t sub_186F7BE00()
{
  unint64_t result = qword_18C6B19F8;
  if (!qword_18C6B19F8)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for SHA512Digest, &type metadata for SHA512Digest);
    atomic_store(result, (unint64_t *)&qword_18C6B19F8);
  }

  return result;
}

unint64_t sub_186F7BE44(uint64_t a1)
{
  unint64_t result = sub_186F60954();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_186F7BE68(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_186F7C02C( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F7BE8C,  (uint64_t (*)(void))sub_186F7BED0,  (uint64_t (*)(void))sub_186F7BF14,  (uint64_t (*)(void))sub_186F7BF58);
}

unint64_t sub_186F7BE8C()
{
  unint64_t result = qword_18C6B1A00;
  if (!qword_18C6B1A00)
  {
    unint64_t result = MEMORY[0x18959EFD8]( &protocol conformance descriptor for Insecure.SHA1Digest,  &type metadata for Insecure.SHA1Digest);
    atomic_store(result, (unint64_t *)&qword_18C6B1A00);
  }

  return result;
}

unint64_t sub_186F7BED0()
{
  unint64_t result = qword_18C6B1A08;
  if (!qword_18C6B1A08)
  {
    unint64_t result = MEMORY[0x18959EFD8]( &protocol conformance descriptor for Insecure.SHA1Digest,  &type metadata for Insecure.SHA1Digest);
    atomic_store(result, (unint64_t *)&qword_18C6B1A08);
  }

  return result;
}

unint64_t sub_186F7BF14()
{
  unint64_t result = qword_18C6B1A10;
  if (!qword_18C6B1A10)
  {
    unint64_t result = MEMORY[0x18959EFD8]( &protocol conformance descriptor for Insecure.SHA1Digest,  &type metadata for Insecure.SHA1Digest);
    atomic_store(result, (unint64_t *)&qword_18C6B1A10);
  }

  return result;
}

unint64_t sub_186F7BF58()
{
  unint64_t result = qword_18C6B1A18;
  if (!qword_18C6B1A18)
  {
    unint64_t result = MEMORY[0x18959EFD8]( &protocol conformance descriptor for Insecure.SHA1Digest,  &type metadata for Insecure.SHA1Digest);
    atomic_store(result, (unint64_t *)&qword_18C6B1A18);
  }

  return result;
}

unint64_t sub_186F7BFA0()
{
  unint64_t result = qword_18C6B1A20;
  if (!qword_18C6B1A20)
  {
    unint64_t result = MEMORY[0x18959EFD8]( &protocol conformance descriptor for Insecure.SHA1Digest,  &type metadata for Insecure.SHA1Digest);
    atomic_store(result, (unint64_t *)&qword_18C6B1A20);
  }

  return result;
}

unint64_t sub_186F7BFE4(uint64_t a1)
{
  unint64_t result = sub_186F60A4C();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_186F7C008(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_186F7C02C( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F7C07C,  (uint64_t (*)(void))sub_186F7C0C0,  (uint64_t (*)(void))sub_186F7C104,  (uint64_t (*)(void))sub_186F7C148);
}

uint64_t sub_186F7C02C( void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  a1[1] = a4();
  a1[2] = a5();
  a1[3] = a6();
  uint64_t result = a7();
  a1[4] = result;
  return result;
}

unint64_t sub_186F7C07C()
{
  unint64_t result = qword_18C6B1A28;
  if (!qword_18C6B1A28)
  {
    unint64_t result = MEMORY[0x18959EFD8]( &protocol conformance descriptor for Insecure.MD5Digest,  &type metadata for Insecure.MD5Digest);
    atomic_store(result, (unint64_t *)&qword_18C6B1A28);
  }

  return result;
}

unint64_t sub_186F7C0C0()
{
  unint64_t result = qword_18C6B1A30;
  if (!qword_18C6B1A30)
  {
    unint64_t result = MEMORY[0x18959EFD8]( &protocol conformance descriptor for Insecure.MD5Digest,  &type metadata for Insecure.MD5Digest);
    atomic_store(result, (unint64_t *)&qword_18C6B1A30);
  }

  return result;
}

unint64_t sub_186F7C104()
{
  unint64_t result = qword_18C6B1A38;
  if (!qword_18C6B1A38)
  {
    unint64_t result = MEMORY[0x18959EFD8]( &protocol conformance descriptor for Insecure.MD5Digest,  &type metadata for Insecure.MD5Digest);
    atomic_store(result, (unint64_t *)&qword_18C6B1A38);
  }

  return result;
}

unint64_t sub_186F7C148()
{
  unint64_t result = qword_18C6B1A40;
  if (!qword_18C6B1A40)
  {
    unint64_t result = MEMORY[0x18959EFD8]( &protocol conformance descriptor for Insecure.MD5Digest,  &type metadata for Insecure.MD5Digest);
    atomic_store(result, (unint64_t *)&qword_18C6B1A40);
  }

  return result;
}

unint64_t sub_186F7C190()
{
  unint64_t result = qword_18C6B1A48;
  if (!qword_18C6B1A48)
  {
    unint64_t result = MEMORY[0x18959EFD8]( &protocol conformance descriptor for Insecure.MD5Digest,  &type metadata for Insecure.MD5Digest);
    atomic_store(result, (unint64_t *)&qword_18C6B1A48);
  }

  return result;
}

ValueMetadata *type metadata accessor for SHA256Digest()
{
  return &type metadata for SHA256Digest;
}

uint64_t getEnumTagSinglePayload for SHA384Digest(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for SHA384Digest(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 48) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SHA384Digest()
{
  return &type metadata for SHA384Digest;
}

uint64_t getEnumTagSinglePayload for SHA512Digest(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for SHA512Digest(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 64) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SHA512Digest()
{
  return &type metadata for SHA512Digest;
}

uint64_t _s10SHA1DigestVwet(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t _s10SHA1DigestVwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Insecure.SHA1Digest()
{
  return &type metadata for Insecure.SHA1Digest;
}

ValueMetadata *type metadata accessor for Insecure.MD5Digest()
{
  return &type metadata for Insecure.MD5Digest;
}

uint64_t sub_186F7C324(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1LL;
  }
  uint64_t result = sub_186F87F70();
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (sub_186F87F70() & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_186F7C3E8@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return sub_186F87CDC();
}

uint64_t SecureEnclave.P256.KeyAgreement.PrivateKey.publicKey.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return sub_186F87CDC();
}

void SecureEnclave.P256.KeyAgreement.PrivateKey.init(dataRepresentation:)( uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
}

void SecureEnclave.P256.Signing.PrivateKey.init(dataRepresentation:)( uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
}

void sub_186F7C430(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = sub_186F7C714(&v16, a1, a2, 0LL, 0LL);
  if (v3)
  {
    sub_186F33C98(a1, a2);
  }

  else
  {
    unint64_t v10 = (void *)v7;
    uint64_t v11 = v8;
    unint64_t v12 = v9;
    sub_186F33C98(a1, a2);
    uint64_t v13 = v16;
    id v14 = v10;
    sub_186F33D20(v11, v12);
    sub_186F33C98(v11, v12);
    id v15 = v14;
    sub_186F33D20(v11, v12);

    sub_186F33C98(v11, v12);
    *a3 = v13;
    a3[1] = v11;
    a3[2] = v12;
    a3[3] = v15;
  }

void sub_186F7C510()
{
  id v0 = objc_allocWithZone(MEMORY[0x189605F08]);
  uint64_t v1 = (void *)sub_186F87BB0();
  swift_bridgeObjectRelease();
  id v2 = objc_msgSend(v0, sel_initWithTokenID_, v1);

  qword_18C6B5EF0 = (uint64_t)v2;
}

uint64_t static SecureEnclave.isAvailable.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x189605F20]), sel_init);
  id v1 = objc_msgSend(v0, sel_tokenIDs);
  id v2 = (void *)sub_186F87CD0();

  uint64_t v3 = sub_186F87BBC();
  char v5 = sub_186F7C324(v3, v4, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v5 & 1;
}

uint64_t sub_186F7C634(void *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  return sub_186F7C714(a1, a2, a3, a4, a5);
}

void SecureEnclave.P256.Signing.PrivateKey.init(compactRepresentable:accessControl:)( char a1@<W0>, void *a2@<X1>, void *a3@<X8>)
{
}

uint64_t SecureEnclave.P256.KeyAgreement.PrivateKey.dataRepresentation.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_186F33D20(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t sub_186F7C6C8(void *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  return sub_186F7C714(a1, a2, a3, a4, a5);
}

uint64_t sub_186F7C714(void *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  v32[1] = *(id *)MEMORY[0x1895F89C0];
  if (qword_18C6B05E0 != -1) {
    swift_once();
  }
  unint64_t v10 = (void *)qword_18C6B5EF0;
  id v11 = (id)qword_18C6B5EF0;
  if (a5) {
    unint64_t v12 = a5;
  }
  else {
    unint64_t v12 = sub_186F7D3A8(MEMORY[0x18961AFE8]);
  }
  sub_186F87CDC();
  sub_186F7D71C(v12);
  swift_bridgeObjectRelease();
  v32[0] = 0LL;
  id v13 = objc_allocWithZone(MEMORY[0x189605F10]);
  id v14 = a4;
  id v15 = (void *)sub_186F87B14();
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(v13, sel_initWithToken_LAContext_parameters_error_, v10, v14, v15, v32);

  id v17 = v32[0];
  if (v32[0])
  {
    id v18 = v32[0];
    swift_willThrow();

LABEL_8:
    return (uint64_t)v17;
  }

  uint64_t v20 = (void *)sub_186F87A84();
  v32[0] = 0LL;
  id v17 = objc_msgSend(v16, sel_objectForObjectID_error_, v20, v32);

  if (!v17)
  {
    id v29 = v32[0];
    sub_186F879D0();

    swift_willThrow();
    goto LABEL_8;
  }

  id v21 = v32[0];
  id v22 = objc_msgSend(v17, sel_publicKey);
  if (!v22)
  {
    sub_186F7D1E0();
    swift_allocError();
    *(void *)uint64_t v30 = 2LL;
    *(_BYTE *)(v30 + 8) = 1;
    swift_willThrow();

    id v16 = v17;
    goto LABEL_8;
  }

  __int128 v23 = v22;
  uint64_t v24 = sub_186F87A9C();
  unint64_t v26 = v25;

  sub_186F33D20(v24, v26);
  sub_186F7741C(v24, v26);
  if (!v5)
  {
    uint64_t v28 = v27;
    sub_186F33C98(v24, v26);

    *a1 = v28;
    sub_186F33D20(a2, a3);
    return (uint64_t)v17;
  }

  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_186F7CA08(void *a1, char a2, uint64_t a3, void *a4)
{
  v48[17] = *(id *)MEMORY[0x1895F89C0];
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x189605F20]), sel_init);
  id v8 = objc_msgSend(v7, sel_tokenIDs);
  unint64_t v9 = (void *)sub_186F87CD0();

  uint64_t v10 = sub_186F87BBC();
  id v12 = (id)v11;
  char v13 = sub_186F7C324(v10, v11, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((v13 & 1) == 0)
  {
    sub_186F7D1E0();
    swift_allocError();
    *(void *)uint64_t v20 = 0LL;
    *(_BYTE *)(v20 + 8) = 1;
    swift_willThrow();
    return (uint64_t)v12;
  }

  if (qword_18C6B05E0 != -1) {
    swift_once();
  }
  id v14 = (id)qword_18C6B5EF0;
  unint64_t v15 = sub_186F7D3A8(MEMORY[0x18961AFE8]);
  sub_186F7D71C(v15);
  swift_bridgeObjectRelease();
  v48[0] = 0LL;
  id v16 = objc_allocWithZone(MEMORY[0x189605F10]);
  id v17 = a4;
  id v18 = (void *)sub_186F87B14();
  swift_bridgeObjectRelease();
  id v12 = objc_msgSend(v16, sel_initWithToken_LAContext_parameters_error_, v14, v17, v18, v48);

  if (v48[0])
  {
    id v19 = v48[0];
    swift_willThrow();

    return (uint64_t)v12;
  }

  id v45 = v12;
  __int128 v43 = a1;
  id v44 = (id)objc_opt_self();
  id v22 = (void *)*MEMORY[0x18960B818];
  type metadata accessor for CFString(0LL);
  uint64_t v23 = 1000LL;
  sub_186F7D224();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6B0600);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_186F8A440;
    v48[0] = v22;
    id v25 = v22;
    sub_186F87ED4();
    id v26 = objc_msgSend(v44, sel_dataFromACL_, a3);
    uint64_t v27 = sub_186F87A9C();
    uint64_t v29 = v28;

    *(void *)(inited + 96) = MEMORY[0x189606D70];
    *(void *)(inited + 72) = v27;
    *(void *)(inited + 80) = v29;
    sub_186F7D4C0(inited);
    uint64_t v30 = (void *)sub_186F87B14();
    swift_bridgeObjectRelease();
    v48[0] = 0LL;
    id v12 = objc_msgSend(v45, sel_createObjectWithAttributes_error_, v30, v48);

    if (!v12)
    {
      id v12 = v48[0];
      sub_186F879D0();

      goto LABEL_19;
    }

    id v31 = v48[0];
    id v32 = objc_msgSend(v12, sel_publicKey);
    if (!v32)
    {
      __break(1u);
LABEL_21:
      __break(1u);
    }

    unsigned __int8 v33 = v32;
    uint64_t v34 = sub_186F87A9C();
    unint64_t v36 = v35;

    if ((a2 & 1) == 0) {
      break;
    }
    __int128 v37 = (void *)sub_186F87A84();
    uint64_t v38 = MEMORY[0x18959E9CC]();
    if (!v38) {
      goto LABEL_21;
    }
    __int128 v39 = (void *)v38;
    v48[3] = (id)__swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
    v48[0] = v39;
    swift_dynamicCast();
    LODWORD(v39) = keyIsCompactRepresentable();

    if ((_DWORD)v39) {
      break;
    }
    sub_186F33C98(v34, v36);

    if (!--v23)
    {
      sub_186F7D1E0();
      swift_allocError();
      *(void *)uint64_t v40 = 3LL;
      *(_BYTE *)(v40 + 8) = 1;
LABEL_19:
      swift_willThrow();

      return (uint64_t)v12;
    }
  }

  id v41 = objc_msgSend(v12, sel_objectID);
  sub_186F87A9C();

  sub_186F33D20(v34, v36);
  sub_186F7741C(v34, v36);
  if (!v4)
  {
    *__int128 v43 = v42;
    sub_186F33C98(v34, v36);

    return (uint64_t)v12;
  }

  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

void SecureEnclave.P256.KeyAgreement.PrivateKey.init(compactRepresentable:accessControl:)( char a1@<W0>, void *a2@<X1>, void *a3@<X8>)
{
}

void sub_186F7CF58(char a1@<W0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (void *)sub_186F7CA08(&v14, a1, (uint64_t)a2, 0LL);
  uint64_t v8 = v7;
  unint64_t v10 = v9;

  if (!v3)
  {
    uint64_t v11 = v14;
    id v12 = v6;
    sub_186F33D20(v8, v10);
    sub_186F33C98(v8, v10);
    id v13 = v12;
    sub_186F33D20(v8, v10);

    sub_186F33C98(v8, v10);
    *a3 = v11;
    a3[1] = v8;
    a3[2] = v10;
    a3[3] = v13;
  }

ValueMetadata *type metadata accessor for SecureEnclave()
{
  return &type metadata for SecureEnclave;
}

ValueMetadata *type metadata accessor for SecureEnclave.P256()
{
  return &type metadata for SecureEnclave.P256;
}

ValueMetadata *type metadata accessor for SecureEnclave.P256.Signing()
{
  return &type metadata for SecureEnclave.P256.Signing;
}

ValueMetadata *type metadata accessor for SecureEnclave.P256.Signing.PrivateKey()
{
  return &type metadata for SecureEnclave.P256.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for SecureEnclave.P256.KeyAgreement()
{
  return &type metadata for SecureEnclave.P256.KeyAgreement;
}

void _s9CryptoKit13SecureEnclaveO4P256O7SigningO10PrivateKeyVwxx_0(uint64_t a1)
{
}

void *_s9CryptoKit13SecureEnclaveO4P256O7SigningO10PrivateKeyVwcp_0(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  unint64_t v5 = a2[2];
  sub_186F87CDC();
  sub_186F33D20(v4, v5);
  a1[1] = v4;
  a1[2] = v5;
  uint64_t v6 = (void *)a2[3];
  a1[3] = v6;
  id v7 = v6;
  return a1;
}

void *_s9CryptoKit13SecureEnclaveO4P256O7SigningO10PrivateKeyVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  sub_186F87CDC();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[1];
  unint64_t v5 = a2[2];
  sub_186F33D20(v4, v5);
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  a1[1] = v4;
  a1[2] = v5;
  sub_186F33C98(v6, v7);
  uint64_t v8 = (void *)a2[3];
  unint64_t v9 = (void *)a1[3];
  a1[3] = v8;
  id v10 = v8;

  return a1;
}

void *_s9CryptoKit13SecureEnclaveO4P256O7SigningO10PrivateKeyVwta_0(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_186F33C98(v4, v5);
  uint64_t v6 = (void *)a1[3];
  a1[3] = *(void *)(a2 + 24);

  return a1;
}

ValueMetadata *type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey()
{
  return &type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey;
}

unint64_t sub_186F7D1E0()
{
  unint64_t result = qword_18C6B1A50;
  if (!qword_18C6B1A50)
  {
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F89564, &type metadata for CryptoTokenKitError);
    atomic_store(result, (unint64_t *)&qword_18C6B1A50);
  }

  return result;
}

unint64_t sub_186F7D224()
{
  unint64_t result = qword_18C6B0620;
  if (!qword_18C6B0620)
  {
    type metadata accessor for CFString(255LL);
    unint64_t result = MEMORY[0x18959EFD8](&unk_186F88ADC, v1);
    atomic_store(result, (unint64_t *)&qword_18C6B0620);
  }

  return result;
}

unint64_t sub_186F7D274(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6B1A60);
  uint64_t v2 = sub_186F87F4C();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }

  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_186F7E568(v6, (uint64_t)&v15, &qword_18C6B1A68);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_186F568A4(v15, v16);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_186F7E550(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1LL);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    __int128 v3[2] = v14;
    v6 += 48LL;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_186F7D3A8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6B1A58);
  uint64_t v2 = (void *)sub_186F87F4C();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }

  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    sub_186F87CDC();
    swift_unknownObjectRetain();
    unint64_t result = sub_186F568A4(v5, v6);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_186F7D4C0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x18961AFF0];
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C6B05F0);
  uint64_t v2 = sub_186F87F4C();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }

  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_186F7E568(v6, (uint64_t)v15, &qword_18C6B05E8);
    unint64_t result = sub_186F56908((uint64_t)v15);
    if ((v8 & 1) != 0) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v9 = v3[6] + 40 * result;
    __int128 v10 = v15[0];
    __int128 v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_186F7E550(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1LL);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    __int128 v3[2] = v14;
    v6 += 72LL;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t SecureEnclave.P384.KeyAgreement.PrivateKey.publicKey.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return sub_186F87CDC();
}

void SecureEnclave.P384.KeyAgreement.PrivateKey.init(dataRepresentation:)( uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
}

void SecureEnclave.P384.Signing.PrivateKey.init(dataRepresentation:)( uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
}

void sub_186F7D63C(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = sub_186F7DBB4(&v16, a1, a2, 0LL, 0LL);
  if (v3)
  {
    sub_186F33C98(a1, a2);
  }

  else
  {
    __int128 v10 = (void *)v7;
    uint64_t v11 = v8;
    unint64_t v12 = v9;
    sub_186F33C98(a1, a2);
    uint64_t v13 = v16;
    id v14 = v10;
    sub_186F33D20(v11, v12);
    sub_186F33C98(v11, v12);
    id v15 = v14;
    sub_186F33D20(v11, v12);

    sub_186F33C98(v11, v12);
    *a3 = v13;
    a3[1] = v11;
    a3[2] = v12;
    a3[3] = v15;
  }

uint64_t sub_186F7D71C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6B05F0);
    uint64_t v2 = sub_186F87F4C();
  }

  else
  {
    uint64_t v2 = MEMORY[0x18961AFF0];
  }

  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v3);
  }
  else {
    uint64_t v4 = -1LL;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  sub_186F87CDC();
  uint64_t result = swift_retain();
  int64_t v8 = 0LL;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }

    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }

uint64_t sub_186F7DAD4(void *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  return sub_186F7DBB4(a1, a2, a3, a4, a5);
}

void SecureEnclave.P384.Signing.PrivateKey.init(compactRepresentable:accessControl:)( char a1@<W0>, void *a2@<X1>, void *a3@<X8>)
{
}

uint64_t SecureEnclave.P384.KeyAgreement.PrivateKey.dataRepresentation.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_186F33D20(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t sub_186F7DB68(void *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  return sub_186F7DBB4(a1, a2, a3, a4, a5);
}

uint64_t sub_186F7DBB4(void *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  v32[1] = *(id *)MEMORY[0x1895F89C0];
  if (qword_18C6B05E0 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)qword_18C6B5EF0;
  id v11 = (id)qword_18C6B5EF0;
  if (a5) {
    unint64_t v12 = a5;
  }
  else {
    unint64_t v12 = sub_186F7D3A8(MEMORY[0x18961AFE8]);
  }
  sub_186F87CDC();
  sub_186F7D71C(v12);
  swift_bridgeObjectRelease();
  v32[0] = 0LL;
  id v13 = objc_allocWithZone(MEMORY[0x189605F10]);
  id v14 = a4;
  int64_t v15 = (void *)sub_186F87B14();
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(v13, sel_initWithToken_LAContext_parameters_error_, v10, v14, v15, v32);

  id v17 = v32[0];
  if (v32[0])
  {
    id v18 = v32[0];
    swift_willThrow();

LABEL_8:
    return (uint64_t)v17;
  }

  unint64_t v20 = (void *)sub_186F87A84();
  v32[0] = 0LL;
  id v17 = objc_msgSend(v16, sel_objectForObjectID_error_, v20, v32);

  if (!v17)
  {
    id v29 = v32[0];
    sub_186F879D0();

    swift_willThrow();
    goto LABEL_8;
  }

  id v21 = v32[0];
  id v22 = objc_msgSend(v17, sel_publicKey);
  if (!v22)
  {
    sub_186F7D1E0();
    swift_allocError();
    *(void *)uint64_t v30 = 2LL;
    *(_BYTE *)(v30 + 8) = 1;
    swift_willThrow();

    id v16 = v17;
    goto LABEL_8;
  }

  unint64_t v23 = v22;
  uint64_t v24 = sub_186F87A9C();
  unint64_t v26 = v25;

  sub_186F33D20(v24, v26);
  sub_186F77474(v24, v26);
  if (!v5)
  {
    uint64_t v28 = v27;
    sub_186F33C98(v24, v26);

    *a1 = v28;
    sub_186F33D20(a2, a3);
    return (uint64_t)v17;
  }

  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_186F7DEA8(void *a1, char a2, uint64_t a3, void *a4)
{
  v50[26] = *(id *)MEMORY[0x1895F89C0];
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x189605F20]), sel_init);
  id v8 = objc_msgSend(v7, sel_tokenIDs);
  unint64_t v9 = (void *)sub_186F87CD0();

  uint64_t v10 = sub_186F87BBC();
  id v12 = (id)v11;
  char v13 = sub_186F7C324(v10, v11, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((v13 & 1) == 0)
  {
    sub_186F7D1E0();
    swift_allocError();
    *(void *)uint64_t v20 = 0LL;
    *(_BYTE *)(v20 + 8) = 1;
    swift_willThrow();
    return (uint64_t)v12;
  }

  if (qword_18C6B05E0 != -1) {
    swift_once();
  }
  id v14 = (id)qword_18C6B5EF0;
  unint64_t v15 = sub_186F7D3A8(MEMORY[0x18961AFE8]);
  sub_186F7D71C(v15);
  swift_bridgeObjectRelease();
  v50[0] = 0LL;
  id v16 = objc_allocWithZone(MEMORY[0x189605F10]);
  id v17 = a4;
  id v18 = (void *)sub_186F87B14();
  swift_bridgeObjectRelease();
  id v12 = objc_msgSend(v16, sel_initWithToken_LAContext_parameters_error_, v14, v17, v18, v50);

  if (v50[0])
  {
    id v19 = v50[0];
    swift_willThrow();

    return (uint64_t)v12;
  }

  id v47 = v12;
  id v44 = a1;
  id v46 = (id)objc_opt_self();
  id v45 = (void *)*MEMORY[0x18960B988];
  id v22 = (void *)*MEMORY[0x18960B818];
  type metadata accessor for CFString(0LL);
  uint64_t v23 = 1000LL;
  sub_186F7D224();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C6B0600);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_186F8C320;
    v50[0] = v45;
    id v25 = v45;
    sub_186F87ED4();
    *(void *)(inited + 96) = MEMORY[0x189618740];
    *(void *)(inited + 72) = 384LL;
    v50[0] = v22;
    id v26 = v22;
    sub_186F87ED4();
    id v27 = objc_msgSend(v46, sel_dataFromACL_, a3);
    uint64_t v28 = sub_186F87A9C();
    uint64_t v30 = v29;

    *(void *)(inited + 168) = MEMORY[0x189606D70];
    *(void *)(inited + 144) = v28;
    *(void *)(inited + 152) = v30;
    sub_186F7D4C0(inited);
    __int128 v31 = (void *)sub_186F87B14();
    swift_bridgeObjectRelease();
    v50[0] = 0LL;
    id v12 = objc_msgSend(v47, sel_createObjectWithAttributes_error_, v31, v50);

    if (!v12)
    {
      id v12 = v50[0];
      sub_186F879D0();

      goto LABEL_19;
    }

    id v32 = v50[0];
    id v33 = objc_msgSend(v12, sel_publicKey);
    if (!v33)
    {
      __break(1u);
LABEL_21:
      __break(1u);
    }

    uint64_t v34 = v33;
    uint64_t v35 = sub_186F87A9C();
    unint64_t v37 = v36;

    if ((a2 & 1) == 0) {
      break;
    }
    uint64_t v38 = (void *)sub_186F87A84();
    uint64_t v39 = MEMORY[0x18959E9D8]();
    if (!v39) {
      goto LABEL_21;
    }
    uint64_t v40 = (void *)v39;
    v50[3] = (id)__swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
    v50[0] = v40;
    swift_dynamicCast();
    LODWORD(v40) = keyIsCompactRepresentable();

    if ((_DWORD)v40) {
      break;
    }
    sub_186F33C98(v35, v37);

    if (!--v23)
    {
      sub_186F7D1E0();
      swift_allocError();
      *(void *)uint64_t v41 = 3LL;
      *(_BYTE *)(v41 + 8) = 1;
LABEL_19:
      swift_willThrow();

      return (uint64_t)v12;
    }
  }

  id v42 = objc_msgSend(v12, sel_objectID);
  sub_186F87A9C();

  sub_186F33D20(v35, v37);
  sub_186F77474(v35, v37);
  if (!v4)
  {
    void *v44 = v43;
    sub_186F33C98(v35, v37);

    return (uint64_t)v12;
  }

  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

void SecureEnclave.P384.KeyAgreement.PrivateKey.init(compactRepresentable:accessControl:)( char a1@<W0>, void *a2@<X1>, void *a3@<X8>)
{
}

void sub_186F7E440(char a1@<W0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (void *)sub_186F7DEA8(&v14, a1, (uint64_t)a2, 0LL);
  uint64_t v8 = v7;
  unint64_t v10 = v9;

  if (!v3)
  {
    uint64_t v11 = v14;
    id v12 = v6;
    sub_186F33D20(v8, v10);
    sub_186F33C98(v8, v10);
    id v13 = v12;
    sub_186F33D20(v8, v10);

    sub_186F33C98(v8, v10);
    *a3 = v11;
    a3[1] = v8;
    a3[2] = v10;
    a3[3] = v13;
  }

ValueMetadata *type metadata accessor for SecureEnclave.P384()
{
  return &type metadata for SecureEnclave.P384;
}

ValueMetadata *type metadata accessor for SecureEnclave.P384.Signing()
{
  return &type metadata for SecureEnclave.P384.Signing;
}

ValueMetadata *type metadata accessor for SecureEnclave.P384.Signing.PrivateKey()
{
  return &type metadata for SecureEnclave.P384.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for SecureEnclave.P384.KeyAgreement()
{
  return &type metadata for SecureEnclave.P384.KeyAgreement;
}

ValueMetadata *type metadata accessor for SecureEnclave.P384.KeyAgreement.PrivateKey()
{
  return &type metadata for SecureEnclave.P384.KeyAgreement.PrivateKey;
}

_OWORD *sub_186F7E550(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_186F7E560()
{
  return swift_release();
}

uint64_t sub_186F7E568(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t SecureEnclave.Curve25519.KeyAgreement.PrivateKey.publicKey.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return sub_186F87CDC();
}

void SecureEnclave.Curve25519.KeyAgreement.PrivateKey.init(dataRepresentation:)( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

void SecureEnclave.Curve25519.Signing.PrivateKey.init(dataRepresentation:)( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

void sub_186F7E600( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(uint64_t, unint64_t)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = sub_186F7E7BC(&v17, a1, a2, 0LL, 0LL, a3);
  if (v4)
  {
    sub_186F33C98(a1, a2);
  }

  else
  {
    uint64_t v11 = (void *)v8;
    uint64_t v12 = v9;
    unint64_t v13 = v10;
    sub_186F33C98(a1, a2);
    uint64_t v14 = v17;
    id v15 = v11;
    sub_186F33D20(v12, v13);
    sub_186F33C98(v12, v13);
    id v16 = v15;
    sub_186F33D20(v12, v13);

    sub_186F33C98(v12, v13);
    *a4 = v14;
    a4[1] = v12;
    a4[2] = v13;
    a4[3] = (uint64_t)v16;
  }

uint64_t sub_186F7E6E4(uint64_t *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  return sub_186F7E7BC(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, unint64_t))sub_186F6EB68);
}

uint64_t SecureEnclave.Curve25519.KeyAgreement.PrivateKey.dataRepresentation.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_186F33D20(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t sub_186F7E768(uint64_t *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  return sub_186F7E7BC(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, unint64_t))sub_186F6FA48);
}

uint64_t sub_186F7E7BC( uint64_t *a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5, uint64_t (*a6)(uint64_t, unint64_t))
{
  v33[1] = *(id *)MEMORY[0x1895F89C0];
  if (qword_18C6B05E0 != -1) {
    swift_once();
  }
  id v11 = (id)qword_18C6B5EF0;
  id v12 = (id)qword_18C6B5EF0;
  if (a5) {
    unint64_t v13 = a5;
  }
  else {
    unint64_t v13 = sub_186F7D3A8(MEMORY[0x18961AFE8]);
  }
  sub_186F87CDC();
  sub_186F7D71C(v13);
  swift_bridgeObjectRelease();
  v33[0] = 0LL;
  id v14 = objc_allocWithZone(MEMORY[0x189605F10]);
  id v15 = a4;
  id v16 = (void *)sub_186F87B14();
  swift_bridgeObjectRelease();
  id v17 = objc_msgSend(v14, sel_initWithToken_LAContext_parameters_error_, v11, v15, v16, v33);

  if (v33[0])
  {
    id v18 = v33[0];
    swift_willThrow();

LABEL_8:
    return (uint64_t)v11;
  }

  uint64_t v20 = (void *)sub_186F87A84();
  v33[0] = 0LL;
  id v11 = objc_msgSend(v17, sel_objectForObjectID_error_, v20, v33);

  if (!v11)
  {
    id v29 = v33[0];
    sub_186F879D0();

    swift_willThrow();
    goto LABEL_8;
  }

  id v21 = v33[0];
  id v22 = objc_msgSend(v11, sel_publicKey);
  if (!v22)
  {
    sub_186F7D1E0();
    swift_allocError();
    *(void *)uint64_t v30 = 2LL;
    *(_BYTE *)(v30 + 8) = 1;
    swift_willThrow();

    id v17 = v11;
    goto LABEL_8;
  }

  uint64_t v23 = v22;
  uint64_t v24 = sub_186F87A9C();
  unint64_t v26 = v25;

  sub_186F33D20(v24, v26);
  uint64_t v27 = a6(v24, v26);
  if (!v6)
  {
    uint64_t v28 = v27;
    sub_186F33C98(v24, v26);

    *a1 = v28;
    sub_186F33D20(a2, a3);
    return (uint64_t)v11;
  }

  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for SecureEnclave.Curve25519()
{
  return &type metadata for SecureEnclave.Curve25519;
}

ValueMetadata *type metadata accessor for SecureEnclave.Curve25519.Signing()
{
  return &type metadata for SecureEnclave.Curve25519.Signing;
}

ValueMetadata *type metadata accessor for SecureEnclave.Curve25519.Signing.PrivateKey()
{
  return &type metadata for SecureEnclave.Curve25519.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for SecureEnclave.Curve25519.KeyAgreement()
{
  return &type metadata for SecureEnclave.Curve25519.KeyAgreement;
}

ValueMetadata *type metadata accessor for SecureEnclave.Curve25519.KeyAgreement.PrivateKey()
{
  return &type metadata for SecureEnclave.Curve25519.KeyAgreement.PrivateKey;
}

uint64_t sub_186F7EB10@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_186F7EC18( a1,  MEMORY[0x1895F9B10],  (uint64_t (*)(unint64_t, uint64_t, uint64_t, void *, unint64_t))sub_186F42020,  a2);
}

uint64_t sub_186F7EB68@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_186F7EC18( a1,  MEMORY[0x1895F9B18],  (uint64_t (*)(unint64_t, uint64_t, uint64_t, void *, unint64_t))sub_186F42020,  a2);
}

uint64_t sub_186F7EBC0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_186F7EC18( a1,  MEMORY[0x1895F9B20],  (uint64_t (*)(unint64_t, uint64_t, uint64_t, void *, unint64_t))sub_186F42020,  a2);
}

uint64_t sub_186F7EC18@<X0>( uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(unint64_t, uint64_t, uint64_t, void *, unint64_t)@<X2>, uint64_t *a4@<X8>)
{
  v16[5] = *MEMORY[0x1895F89C0];
  uint64_t v8 = *a1;
  uint64_t v9 = *v4;
  uint64_t v10 = a2();
  if (!v10) {
LABEL_7:
  }
    __break(1u);
  uint64_t v11 = v10;
  id v12 = (void *)objc_opt_self();
  v16[4] = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  v16[1] = v11;
  swift_dynamicCast();
  unint64_t v13 = (unint64_t)objc_msgSend(v12, sel_groupOrderByteCountForCP_, v16[0]);
  if ((v13 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }

  unint64_t v14 = v13;
  swift_beginAccess();
  v16[0] = v14;
  uint64_t result = a3(v14, v9 + 32, v8 + 32, v16, v14);
  if (!v5) {
    *a4 = result;
  }
  return result;
}

uint64_t sub_186F7ED40( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void *, uint64_t *))
{
  v13[0] = a1;
  v13[1] = a2;
  void v13[2] = a3;
  v13[3] = a4;
  uint64_t result = a5();
  if (result)
  {
    uint64_t v8 = result;
    v12[7] = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
    void v12[4] = v8;
    swift_dynamicCast();
    uint64_t v9 = getccec_full_ctx_size();
    MEMORY[0x1895F8858](v9);
    _OWORD v12[2] = v13;
    uint64_t v12[3] = v10;
    unint64_t v11 = sub_186F4267C(v10, a6, (uint64_t)v12);
    swift_unknownObjectRelease();
    return v11;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_186F7EE14(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v4 = *a3;
  if (!*a3)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v6 = result;
  uint64_t result = a4();
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  uint64_t result = swift_dynamicCast();
  if (!v6)
  {
LABEL_16:
    __break(1u);
    return result;
  }

  int v7 = ccec_raw_import_priv_only();
  int v13 = v7;
  if (v7)
  {
    int v8 = v7;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v9 = v8;
    *(_BYTE *)(v9 + 4) = 0;
    return swift_willThrow();
  }

  else
  {
    int64_t v10 = ccec_der_export_priv_size();
    if (v10)
    {
      unint64_t v11 = (void *)sub_186F42888(v10);
    }

    else
    {
      if (qword_18C4B5020 != -1) {
        swift_once();
      }
      unint64_t v11 = off_18C4B5018;
      swift_retain();
    }

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      size_t v12 = sub_186F515FC((uint64_t)v11);
      swift_release();
      unint64_t v11 = (void *)v12;
    }

    swift_beginAccess();
    sub_186F7EFC0((uint64_t)(v11 + 4), (uint64_t)v11 + v11[2] + 32, &v13, v4, a4);
    return swift_release();
  }

uint64_t sub_186F7EFC0(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t (*a5)(void))
{
  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }

  int v7 = ccec_der_export_priv();
  *a3 = v7;
  if (v7)
  {
    int v8 = v7;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v9 = v8;
    goto LABEL_7;
  }

  uint64_t result = a5();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  swift_dynamicCast();
  uint64_t result = ccec_der_import_priv();
  *a3 = result;
  if (!(_DWORD)result) {
    return result;
  }
  int v10 = result;
  sub_186F35D6C();
  swift_allocError();
  *(_DWORD *)uint64_t v9 = v10;
LABEL_7:
  *(_BYTE *)(v9 + 4) = 0;
  return swift_willThrow();
}

int64_t sub_186F7F0FC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = (const void *)ccec_ctx_k((void **)(a1 + 32));
  int64_t result = a2();
  if (result)
  {
    uint64_t v5 = (void *)objc_opt_self();
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
    swift_dynamicCast();
    int64_t result = (int64_t)objc_msgSend(v5, sel_groupOrderByteCountForCP_, v9);
    if ((result & 0x8000000000000000LL) == 0)
    {
      size_t v6 = sub_186F7F2A0(v3, result);
      size_t v7 = sub_186F51514(v6);
      swift_bridgeObjectRelease();
      uint64_t v8 = sub_186F41BA4(v7);
      swift_release();
      return v8;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_186F7F1E4(uint64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t result = sub_186F6ADC8(a1, a2, a3);
  uint64_t v4 = result;
  unint64_t v5 = *(void *)(result + 16);
  if (v5 < 2) {
    return v4;
  }
  unint64_t v6 = 0LL;
  unint64_t v7 = v5 >> 1;
  for (unint64_t i = v5 + 3; ; --i)
  {
    if (v6 == i - 4) {
      goto LABEL_5;
    }
    unint64_t v9 = *(void *)(v4 + 16);
    if (v6 >= v9) {
      break;
    }
    if (i - 4 >= v9) {
      goto LABEL_12;
    }
    uint64_t v10 = *(void *)(v4 + 8 * v6 + 32);
    uint64_t v11 = *(void *)(v4 + 8 * i);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_186F52E9C(v4);
      uint64_t v4 = result;
    }

    *(void *)(v4 + 8 * v6 + 32) = v11;
    *(void *)(v4 + 8 * i) = v10;
LABEL_5:
    if (v7 == ++v6) {
      return v4;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_186F7F2A0(const void *a1, int64_t a2)
{
  uint64_t result = (uint64_t)sub_186F418B8(a1, a2);
  uint64_t v3 = result;
  unint64_t v4 = *(void *)(result + 16);
  if (v4 < 2) {
    return v3;
  }
  unint64_t v5 = 0LL;
  unint64_t v6 = v4 >> 1;
  for (unint64_t i = v4 + 31; ; --i)
  {
    if (v5 == i - 32) {
      goto LABEL_5;
    }
    unint64_t v8 = *(void *)(v3 + 16);
    if (v5 >= v8) {
      break;
    }
    if (i - 32 >= v8) {
      goto LABEL_12;
    }
    char v9 = *(_BYTE *)(v3 + v5 + 32);
    char v10 = *(_BYTE *)(v3 + i);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_186F52EB0(v3);
      uint64_t v3 = result;
    }

    *(_BYTE *)(v3 + v5 + 32) = v10;
    *(_BYTE *)(v3 + i) = v9;
LABEL_5:
    if (v6 == ++v5) {
      return v3;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_186F7F35C(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  unint64_t v4 = ccec_export_pub_size();
  uint64_t v5 = sub_186F87CE8();
  *(void *)(v5 + 16) = v4;
  ccec_export_pub();
  *(void *)(v5 + 16) = v4;
  uint64_t v6 = sub_186F3A07C(v5);
  unint64_t v8 = v7;
  swift_bridgeObjectRelease();
  char v9 = (void *)sub_186F87A84();
  uint64_t v10 = sub_186F33C98(v6, v8);
  uint64_t result = a2(v10);
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
    swift_dynamicCast();
    int IsCompactRepresentable = keyIsCompactRepresentable();

    if (IsCompactRepresentable)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_186F52EB0(a1);
      }
      unint64_t v13 = ccec_compact_export_size();
      if (v13)
      {
        uint64_t v14 = sub_186F87CE8();
        *(void *)(v14 + 16) = v13;
      }

      else
      {
        uint64_t v14 = MEMORY[0x18961AFE8];
      }

      ccec_compact_export_pub();
      *(void *)(v14 + 16) = v13;
      uint64_t v15 = sub_186F3A07C(v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      return 0LL;
    }

    return v15;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_186F7F4FC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
    swift_dynamicCast();
    uint64_t result = ccec_compressed_x962_export_pub_size();
    if (result < 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t v3 = result;
      if (result)
      {
        uint64_t v4 = sub_186F87CE8();
        *(void *)(v4 + 16) = v3;
      }

      else
      {
        uint64_t v4 = MEMORY[0x18961AFE8];
      }

      uint64_t result = ccec_compressed_x962_export_pub();
      if (!(_DWORD)result)
      {
        *(void *)(v4 + 16) = v3;
        uint64_t v5 = sub_186F3A07C(v4);
        swift_bridgeObjectRelease();
        return v5;
      }
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

void sub_186F7F5E4()
{
  unint64_t v0 = ccec_export_pub_size();
  uint64_t v1 = sub_186F87CE8();
  *(void *)(v1 + 16) = v0;
  ccec_export_pub();
  *(void *)(v1 + 16) = v0;
  sub_186F3A07C(v1);
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  __asm { BR              X10 }

uint64_t sub_186F7F65C()
{
  if (!BYTE6(v0))
  {
    __break(1u);
    JUMPOUT(0x186F7F6B8LL);
  }

  uint64_t v2 = sub_186F87A60();
  sub_186F33C98(v1, v0);
  return v2;
}

uint64_t P256.KeyAgreement.PrivateKey.init(compactRepresentable:)@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_186F81D90(a1, MEMORY[0x1895F9B10], (uint64_t (*)(uint64_t, void, uint64_t))sub_186F41EC0, a2);
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(x963Representation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82308( a1,  a2,  a3,  (uint64_t (*)(uint64_t))sub_186F83234,  (uint64_t)&type metadata for P256,  (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F456CC,  a4);
}

uint64_t P384.KeyAgreement.PrivateKey.init(compactRepresentable:)@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_186F81D90(a1, MEMORY[0x1895F9B18], (uint64_t (*)(uint64_t, void, uint64_t))sub_186F41EDC, a2);
}

uint64_t P384.KeyAgreement.PublicKey.init<A>(x963Representation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82308( a1,  a2,  a3,  (uint64_t (*)(uint64_t))sub_186F83278,  (uint64_t)&type metadata for P384,  (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F456CC,  a4);
}

uint64_t P521.KeyAgreement.PrivateKey.init(compactRepresentable:)@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_186F81D90(a1, MEMORY[0x1895F9B20], (uint64_t (*)(uint64_t, void, uint64_t))sub_186F41EF8, a2);
}

uint64_t P521.KeyAgreement.PublicKey.init<A>(x963Representation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82308( a1,  a2,  a3,  (uint64_t (*)(uint64_t))sub_186F832BC,  (uint64_t)&type metadata for P521,  (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F456CC,  a4);
}

uint64_t P256.Signing.PublicKey.init<A>(x963Representation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82308( a1,  a2,  a3,  (uint64_t (*)(uint64_t))sub_186F83234,  (uint64_t)&type metadata for P256,  (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F456CC,  a4);
}

uint64_t P384.Signing.PublicKey.init<A>(x963Representation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82308( a1,  a2,  a3,  (uint64_t (*)(uint64_t))sub_186F83278,  (uint64_t)&type metadata for P384,  (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F456CC,  a4);
}

uint64_t P521.Signing.PublicKey.init<A>(x963Representation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82308( a1,  a2,  a3,  (uint64_t (*)(uint64_t))sub_186F832BC,  (uint64_t)&type metadata for P521,  (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F456CC,  a4);
}

uint64_t P256.Signing.PublicKey.init<A>(rawRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F83234,  (uint64_t)&type metadata for P256,  sub_186F4601C,  a4);
}

uint64_t P256.Signing.PublicKey.init<A>(compactRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F83234,  (uint64_t)&type metadata for P256,  sub_186F45F5C,  a4);
}

uint64_t P256.Signing.PublicKey.init<A>(compressedRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82308( a1,  a2,  a3,  (uint64_t (*)(uint64_t))sub_186F83234,  (uint64_t)&type metadata for P256,  (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F4595C,  a4);
}

uint64_t P256.Signing.PublicKey.init(pemRepresentation:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_186F82408(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_186F77980, a3);
}

uint64_t P256.Signing.PublicKey.init<A>(derRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_186F825F8(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_186F77980, a3);
}

uint64_t P256.Signing.PublicKey.derRepresentation.getter()
{
  if (qword_18C6B0658 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_18C6B5F10;
  uint64_t v1 = *(void *)algn_18C6B5F18;
  __int128 v13 = xmmword_18C6B5F20;
  uint64_t v2 = qword_18C6B5F30;
  swift_unknownObjectRetain();
  sub_186F87CDC();
  sub_186F87CDC();
  unint64_t v3 = ccec_export_pub_size();
  uint64_t v4 = sub_186F87CE8();
  *(void *)(v4 + 16) = v3;
  ccec_export_pub();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = sub_186F3A07C(v4);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_186F6DC48(v5, v7);
  uint64_t v9 = v8;
  sub_186F33C98(v5, v7);
  uint64_t v10 = (2LL * *(void *)(v9 + 16)) | 1;
  v15[0] = v0;
  v15[1] = v1;
  __int128 v16 = v13;
  uint64_t v17 = v2;
  uint64_t v18 = v9;
  uint64_t v19 = v9 + 32;
  uint64_t v20 = 0LL;
  uint64_t v21 = v10;
  uint64_t v14 = sub_186F3CB8C(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  sub_186F87CDC();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_186F6C52C(48, &v14, (char *)v15);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_186F3A07C((uint64_t)v14);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t P256.Signing.PublicKey.pemRepresentation.getter()
{
  return sub_186F801BC(P256.Signing.PublicKey.derRepresentation.getter);
}

uint64_t P256.Signing.PrivateKey.init(compactRepresentable:)@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_186F81D90(a1, MEMORY[0x1895F9B10], (uint64_t (*)(uint64_t, void, uint64_t))sub_186F41EC0, a2);
}

uint64_t P256.Signing.PrivateKey.init<A>(x963Representation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F83234,  (uint64_t)&type metadata for P256,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F45D10,  a4);
}

uint64_t P256.Signing.PrivateKey.init<A>(rawRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F83234,  (uint64_t)&type metadata for P256,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F45D2C,  a4);
}

uint64_t P256.Signing.PrivateKey.init(seed:compactRepresentable:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_186F802C4(a1, a2, a3);
}

uint64_t P256.Signing.PrivateKey.init(pemRepresentation:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_186F80340(a1, a2, MEMORY[0x1895F9B10], (uint64_t (*)(void *, uint64_t *))sub_186F83790, a3);
}

void P256.Signing.PrivateKey.init<A>(derRepresentation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

uint64_t P256.Signing.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F82A60(MEMORY[0x1895F9B10], a1);
}

uint64_t P256.Signing.PrivateKey.derRepresentation.getter()
{
  uint64_t v1 = *v0;
  if (qword_18C6B0658 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_18C6B5F10;
  uint64_t v3 = *(void *)algn_18C6B5F18;
  __int128 v4 = xmmword_18C6B5F20;
  uint64_t v5 = qword_18C6B5F30;
  swift_unknownObjectRetain();
  swift_retain();
  sub_186F87CDC();
  int64_t v6 = sub_186F7F0FC(v1, MEMORY[0x1895F9B10]);
  unint64_t v8 = v7;
  swift_release();
  sub_186F6DC48(v6, v8);
  uint64_t v10 = v9;
  uint64_t v11 = sub_186F33C98(v6, v8);
  uint64_t v12 = MEMORY[0x18959E9CC](v11);
  if (!v12) {
    goto LABEL_10;
  }
  uint64_t v13 = v12;
  *((void *)&v37 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  *(void *)&__int128 v36 = v13;
  swift_retain();
  swift_dynamicCast();
  uint64_t v14 = getccec_pub_ctx_size();
  if (v14 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }

  size_t v15 = v14;
  if (v14)
  {
    uint64_t v16 = sub_186F87CE8();
    *(void *)(v16 + 16) = v15;
  }

  else
  {
    uint64_t v16 = MEMORY[0x18961AFE8];
  }

  memcpy((void *)(v16 + 32), (const void *)(v1 + 32), v15);
  *(void *)(v16 + 16) = v15;
  swift_release();
  unint64_t v17 = ccec_export_pub_size();
  uint64_t v18 = sub_186F87CE8();
  *(void *)(v18 + 16) = v17;
  ccec_export_pub();
  *(void *)(v18 + 16) = v17;
  uint64_t v19 = sub_186F3A07C(v18);
  unint64_t v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_186F6DC48(v19, v21);
  uint64_t v23 = v22;
  sub_186F33C98(v19, v21);
  uint64_t v24 = *(void *)(v23 + 16);
  uint64_t v25 = (2LL * *(void *)(v10 + 16)) | 1;
  *(void *)&v29[0] = v2;
  *((void *)&v29[0] + 1) = v3;
  v29[1] = v4;
  *(void *)uint64_t v30 = v5;
  memset(&v30[8], 0, 32);
  uint64_t v31 = 0LL;
  *(void *)&__int128 v32 = v10;
  *((void *)&v32 + 1) = v10 + 32;
  *(void *)&__int128 v33 = 0LL;
  *((void *)&v33 + 1) = v25;
  *(void *)&__int128 v34 = v23;
  *((void *)&v34 + 1) = v23 + 32;
  *(void *)&__int128 v35 = 0LL;
  *((void *)&v35 + 1) = (2 * v24) | 1;
  __int128 v38 = *(_OWORD *)v30;
  __int128 v39 = *(_OWORD *)&v30[16];
  __int128 v36 = v29[0];
  __int128 v37 = v4;
  __int128 v43 = v34;
  __int128 v44 = v35;
  __int128 v41 = v32;
  __int128 v42 = v33;
  __int128 v40 = 0uLL;
  uint64_t v28 = sub_186F3CB8C(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  sub_186F83540((uint64_t)v29);
  sub_186F6C8C0(48, &v28, (char *)&v36);
  sub_186F5CBBC((uint64_t)v29);
  uint64_t v26 = sub_186F3A07C((uint64_t)v28);
  swift_bridgeObjectRelease();
  sub_186F5CBBC((uint64_t)v29);
  return v26;
}

uint64_t P256.Signing.PrivateKey.pemRepresentation.getter()
{
  return sub_186F80C40(P256.Signing.PrivateKey.derRepresentation.getter);
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(rawRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F83234,  (uint64_t)&type metadata for P256,  sub_186F4601C,  a4);
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(compactRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F83234,  (uint64_t)&type metadata for P256,  sub_186F45F5C,  a4);
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(compressedRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82308( a1,  a2,  a3,  (uint64_t (*)(uint64_t))sub_186F83234,  (uint64_t)&type metadata for P256,  (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F4595C,  a4);
}

uint64_t P256.KeyAgreement.PublicKey.init(pemRepresentation:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_186F82408(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_186F77980, a3);
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(derRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_186F825F8(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_186F77980, a3);
}

uint64_t P256.KeyAgreement.PublicKey.compactRepresentation.getter()
{
  return sub_186F7F35C(*v0, (uint64_t (*)(uint64_t))MEMORY[0x1895F9B10]);
}

void P256.KeyAgreement.PublicKey.rawRepresentation.getter()
{
}

uint64_t P256.KeyAgreement.PublicKey.compressedRepresentation.getter()
{
  return sub_186F7F4FC(*v0, MEMORY[0x1895F9B10]);
}

uint64_t P256.KeyAgreement.PublicKey.derRepresentation.getter()
{
  if (qword_18C6B0658 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_18C6B5F10;
  uint64_t v1 = *(void *)algn_18C6B5F18;
  __int128 v13 = xmmword_18C6B5F20;
  uint64_t v2 = qword_18C6B5F30;
  swift_unknownObjectRetain();
  sub_186F87CDC();
  sub_186F87CDC();
  unint64_t v3 = ccec_export_pub_size();
  uint64_t v4 = sub_186F87CE8();
  *(void *)(v4 + 16) = v3;
  ccec_export_pub();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = sub_186F3A07C(v4);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_186F6DC48(v5, v7);
  uint64_t v9 = v8;
  sub_186F33C98(v5, v7);
  uint64_t v10 = (2LL * *(void *)(v9 + 16)) | 1;
  v15[0] = v0;
  v15[1] = v1;
  __int128 v16 = v13;
  uint64_t v17 = v2;
  uint64_t v18 = v9;
  uint64_t v19 = v9 + 32;
  uint64_t v20 = 0LL;
  uint64_t v21 = v10;
  uint64_t v14 = sub_186F3CB8C(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  sub_186F87CDC();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_186F6C52C(48, &v14, (char *)v15);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_186F3A07C((uint64_t)v14);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t P256.KeyAgreement.PublicKey.pemRepresentation.getter()
{
  return sub_186F801BC(P256.KeyAgreement.PublicKey.derRepresentation.getter);
}

uint64_t sub_186F801BC(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  unint64_t v3 = v2;
  uint64_t v4 = sub_186F42B5C(0x4B2043494C425550uLL);
  swift_bridgeObjectRelease();
  sub_186F33C98(v1, v3);
  return v4;
}

uint64_t P256.KeyAgreement.PrivateKey.init<A>(x963Representation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F83234,  (uint64_t)&type metadata for P256,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F45D10,  a4);
}

uint64_t P256.KeyAgreement.PrivateKey.init<A>(rawRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F83234,  (uint64_t)&type metadata for P256,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F45D2C,  a4);
}

uint64_t P256.KeyAgreement.PrivateKey.init(seed:compactRepresentable:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_186F802C4(a1, a2, a3);
}

uint64_t sub_186F802C4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = v7;
  uint64_t result = sub_186F33C98(a1, a2);
  if (!v3) {
    *a3 = v8;
  }
  return result;
}

uint64_t P256.KeyAgreement.PrivateKey.init(pemRepresentation:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_186F80340(a1, a2, MEMORY[0x1895F9B10], (uint64_t (*)(void *, uint64_t *))sub_186F83790, a3);
}

uint64_t sub_186F80340@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void *, uint64_t *)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = sub_186F43758(a1, a2);
  if (!v5)
  {
    uint64_t v13 = result;
    uint64_t v14 = v10;
    uint64_t v15 = v11;
    unint64_t v16 = v12;
    if (result == 0x4156495250204345LL && v10 == 0xEE0059454B204554LL || (sub_186F87F70() & 1) != 0)
    {
      sub_186F33D20(v15, v16);
      sub_186F6DC48(v15, v16);
      uint64_t v18 = v17;
      sub_186F33C98(v15, v16);
      sub_186F6BA0C(v18, v18 + 32, 0LL, (2LL * *(void *)(v18 + 16)) | 1, (uint64_t)v32);
      swift_release();
      sub_186F710A4(v32, 0x30u, (uint64_t)v33);
      uint64_t v19 = v33[6];
      uint64_t v20 = v33[7];
      uint64_t v21 = v33[8];
      uint64_t v22 = swift_unknownObjectRetain();
      uint64_t v30 = sub_186F7ED40(v22, v19, v20, v21, a3, a4);
      swift_bridgeObjectRelease();
      sub_186F33C98(v15, v16);
      uint64_t result = (uint64_t)sub_186F5CB24(v33);
      *a5 = v30;
    }

    else if (v13 == 0x2045544156495250LL && v14 == 0xEB0000000059454BLL || (sub_186F87F70() & 1) != 0)
    {
      sub_186F33D20(v15, v16);
      sub_186F6DC48(v15, v16);
      uint64_t v24 = v23;
      sub_186F33C98(v15, v16);
      sub_186F6BA0C(v24, v24 + 32, 0LL, (2LL * *(void *)(v24 + 16)) | 1, (uint64_t)v34);
      swift_release();
      sub_186F5C8A8(v34, 0x30u, v35);
      uint64_t v25 = v36;
      uint64_t v26 = v37;
      uint64_t v27 = v38;
      uint64_t v28 = swift_unknownObjectRetain();
      uint64_t v31 = sub_186F7ED40(v28, v25, v26, v27, a3, a4);
      swift_bridgeObjectRelease();
      sub_186F33C98(v15, v16);
      uint64_t result = sub_186F5CBBC((uint64_t)v35);
      *a5 = v31;
    }

    else
    {
      sub_186F36690();
      swift_allocError();
      *id v29 = 7;
      swift_willThrow();
      swift_bridgeObjectRelease();
      return sub_186F33C98(v15, v16);
    }
  }

  return result;
}

void P256.KeyAgreement.PrivateKey.init<A>(derRepresentation:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

void sub_186F806C8( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X3>, uint64_t (*a4)(void *, uint64_t *)@<X4>, uint64_t *a5@<X8>)
{
  __int128 v35 = a4;
  uint64_t v27 = a3;
  unint64_t v6 = v5;
  uint64_t v10 = *(void *)(a2 - 8);
  double v11 = MEMORY[0x1895F8858](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))( (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  a2,  v11);
  uint64_t v13 = sub_186F87CF4();
  unint64_t v14 = (2LL * *(void *)(v13 + 16)) | 1;
  sub_186F6BA0C(v13, v13 + 32, 0LL, v14, (uint64_t)v28);
  uint64_t v26 = a5;
  if (v5)
  {
    sub_186F6BA0C(v13, v13 + 32, 0LL, v14, (uint64_t)v33);
    swift_bridgeObjectRelease();
    sub_186F710A4(v33, 0x30u, (uint64_t)v34);
    uint64_t v18 = v34[6];
    uint64_t v19 = v34[7];
    uint64_t v20 = v34[8];
    uint64_t v21 = swift_unknownObjectRetain();
    uint64_t v22 = sub_186F7ED40(v21, v18, v19, v20, v27, v35);

    sub_186F5CB24(v34);
    uint64_t v23 = v22;
  }

  else
  {
    sub_186F5C8A8(v28, 0x30u, v29);
    uint64_t v15 = v30;
    uint64_t v16 = v31;
    uint64_t v25 = v32;
    uint64_t v17 = swift_unknownObjectRetain();
    uint64_t v23 = sub_186F7ED40(v17, v15, v16, v25, v27, v35);
    swift_bridgeObjectRelease();
    sub_186F5CBBC((uint64_t)v29);
  }

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a2);
  *uint64_t v26 = v23;
}

uint64_t P256.KeyAgreement.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F82A60(MEMORY[0x1895F9B10], a1);
}

int64_t P256.KeyAgreement.PrivateKey.rawRepresentation.getter()
{
  return sub_186F7F0FC(*v0, MEMORY[0x1895F9B10]);
}

uint64_t P256.KeyAgreement.PrivateKey.derRepresentation.getter()
{
  uint64_t v1 = *v0;
  if (qword_18C6B0658 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_18C6B5F10;
  uint64_t v3 = *(void *)algn_18C6B5F18;
  __int128 v4 = xmmword_18C6B5F20;
  uint64_t v5 = qword_18C6B5F30;
  swift_unknownObjectRetain();
  swift_retain();
  sub_186F87CDC();
  int64_t v6 = sub_186F7F0FC(v1, MEMORY[0x1895F9B10]);
  unint64_t v8 = v7;
  swift_release();
  sub_186F6DC48(v6, v8);
  uint64_t v10 = v9;
  uint64_t v11 = sub_186F33C98(v6, v8);
  uint64_t v12 = MEMORY[0x18959E9CC](v11);
  if (!v12) {
    goto LABEL_10;
  }
  uint64_t v13 = v12;
  *((void *)&v37 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  *(void *)&__int128 v36 = v13;
  swift_retain();
  swift_dynamicCast();
  uint64_t v14 = getccec_pub_ctx_size();
  if (v14 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }

  size_t v15 = v14;
  if (v14)
  {
    uint64_t v16 = sub_186F87CE8();
    *(void *)(v16 + 16) = v15;
  }

  else
  {
    uint64_t v16 = MEMORY[0x18961AFE8];
  }

  memcpy((void *)(v16 + 32), (const void *)(v1 + 32), v15);
  *(void *)(v16 + 16) = v15;
  swift_release();
  unint64_t v17 = ccec_export_pub_size();
  uint64_t v18 = sub_186F87CE8();
  *(void *)(v18 + 16) = v17;
  ccec_export_pub();
  *(void *)(v18 + 16) = v17;
  uint64_t v19 = sub_186F3A07C(v18);
  unint64_t v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_186F6DC48(v19, v21);
  uint64_t v23 = v22;
  sub_186F33C98(v19, v21);
  uint64_t v24 = *(void *)(v23 + 16);
  uint64_t v25 = (2LL * *(void *)(v10 + 16)) | 1;
  *(void *)&v29[0] = v2;
  *((void *)&v29[0] + 1) = v3;
  v29[1] = v4;
  *(void *)uint64_t v30 = v5;
  memset(&v30[8], 0, 32);
  uint64_t v31 = 0LL;
  *(void *)&__int128 v32 = v10;
  *((void *)&v32 + 1) = v10 + 32;
  *(void *)&__int128 v33 = 0LL;
  *((void *)&v33 + 1) = v25;
  *(void *)&__int128 v34 = v23;
  *((void *)&v34 + 1) = v23 + 32;
  *(void *)&__int128 v35 = 0LL;
  *((void *)&v35 + 1) = (2 * v24) | 1;
  __int128 v38 = *(_OWORD *)v30;
  __int128 v39 = *(_OWORD *)&v30[16];
  __int128 v36 = v29[0];
  __int128 v37 = v4;
  __int128 v43 = v34;
  __int128 v44 = v35;
  __int128 v41 = v32;
  __int128 v42 = v33;
  __int128 v40 = 0uLL;
  uint64_t v28 = sub_186F3CB8C(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  sub_186F83540((uint64_t)v29);
  sub_186F6C8C0(48, &v28, (char *)&v36);
  sub_186F5CBBC((uint64_t)v29);
  uint64_t v26 = sub_186F3A07C((uint64_t)v28);
  swift_bridgeObjectRelease();
  sub_186F5CBBC((uint64_t)v29);
  return v26;
}

uint64_t P256.KeyAgreement.PrivateKey.pemRepresentation.getter()
{
  return sub_186F80C40(P256.KeyAgreement.PrivateKey.derRepresentation.getter);
}

uint64_t sub_186F80C40(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  unint64_t v3 = v2;
  uint64_t v4 = sub_186F42B5C(0x2045544156495250uLL);
  swift_bridgeObjectRelease();
  sub_186F33C98(v1, v3);
  return v4;
}

uint64_t P384.Signing.PublicKey.init<A>(rawRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F83278,  (uint64_t)&type metadata for P384,  sub_186F4601C,  a4);
}

uint64_t P384.Signing.PublicKey.init<A>(compactRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F83278,  (uint64_t)&type metadata for P384,  sub_186F45F5C,  a4);
}

uint64_t P384.Signing.PublicKey.init<A>(compressedRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82308( a1,  a2,  a3,  (uint64_t (*)(uint64_t))sub_186F83278,  (uint64_t)&type metadata for P384,  (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F4595C,  a4);
}

uint64_t P384.Signing.PublicKey.init(pemRepresentation:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_186F82408(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_186F779A4, a3);
}

uint64_t P384.Signing.PublicKey.init<A>(derRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_186F825F8(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_186F779A4, a3);
}

uint64_t P384.Signing.PublicKey.derRepresentation.getter()
{
  if (qword_18C6B0660 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_18C6B5F38;
  uint64_t v1 = unk_18C6B5F40;
  __int128 v13 = xmmword_18C6B5F48;
  uint64_t v2 = qword_18C6B5F58;
  swift_unknownObjectRetain();
  sub_186F87CDC();
  sub_186F87CDC();
  unint64_t v3 = ccec_export_pub_size();
  uint64_t v4 = sub_186F87CE8();
  *(void *)(v4 + 16) = v3;
  ccec_export_pub();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = sub_186F3A07C(v4);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_186F6DC48(v5, v7);
  uint64_t v9 = v8;
  sub_186F33C98(v5, v7);
  uint64_t v10 = (2LL * *(void *)(v9 + 16)) | 1;
  v15[0] = v0;
  v15[1] = v1;
  __int128 v16 = v13;
  uint64_t v17 = v2;
  uint64_t v18 = v9;
  uint64_t v19 = v9 + 32;
  uint64_t v20 = 0LL;
  uint64_t v21 = v10;
  uint64_t v14 = sub_186F3CB8C(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  sub_186F87CDC();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_186F6C52C(48, &v14, (char *)v15);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_186F3A07C((uint64_t)v14);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t P384.Signing.PublicKey.pemRepresentation.getter()
{
  return sub_186F801BC(P384.Signing.PublicKey.derRepresentation.getter);
}

uint64_t P384.Signing.PrivateKey.init(compactRepresentable:)@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_186F81D90(a1, MEMORY[0x1895F9B18], (uint64_t (*)(uint64_t, void, uint64_t))sub_186F41EDC, a2);
}

uint64_t P384.Signing.PrivateKey.init<A>(x963Representation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F83278,  (uint64_t)&type metadata for P384,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F45D10,  a4);
}

uint64_t P384.Signing.PrivateKey.init<A>(rawRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F83278,  (uint64_t)&type metadata for P384,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F45D2C,  a4);
}

uint64_t P384.Signing.PrivateKey.init(seed:compactRepresentable:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_186F802C4(a1, a2, a3);
}

uint64_t P384.Signing.PrivateKey.init(pemRepresentation:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_186F80340(a1, a2, MEMORY[0x1895F9B18], (uint64_t (*)(void *, uint64_t *))sub_186F83770, a3);
}

void P384.Signing.PrivateKey.init<A>(derRepresentation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

uint64_t P384.Signing.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F82A60(MEMORY[0x1895F9B18], a1);
}

uint64_t P384.Signing.PrivateKey.derRepresentation.getter()
{
  uint64_t v1 = *v0;
  if (qword_18C6B0660 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_18C6B5F38;
  uint64_t v3 = unk_18C6B5F40;
  __int128 v4 = xmmword_18C6B5F48;
  uint64_t v5 = qword_18C6B5F58;
  swift_unknownObjectRetain();
  swift_retain();
  sub_186F87CDC();
  int64_t v6 = sub_186F7F0FC(v1, MEMORY[0x1895F9B18]);
  unint64_t v8 = v7;
  swift_release();
  sub_186F6DC48(v6, v8);
  uint64_t v10 = v9;
  uint64_t v11 = sub_186F33C98(v6, v8);
  uint64_t v12 = MEMORY[0x18959E9D8](v11);
  if (!v12) {
    goto LABEL_10;
  }
  uint64_t v13 = v12;
  *((void *)&v37 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  *(void *)&__int128 v36 = v13;
  swift_retain();
  swift_dynamicCast();
  uint64_t v14 = getccec_pub_ctx_size();
  if (v14 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }

  size_t v15 = v14;
  if (v14)
  {
    uint64_t v16 = sub_186F87CE8();
    *(void *)(v16 + 16) = v15;
  }

  else
  {
    uint64_t v16 = MEMORY[0x18961AFE8];
  }

  memcpy((void *)(v16 + 32), (const void *)(v1 + 32), v15);
  *(void *)(v16 + 16) = v15;
  swift_release();
  unint64_t v17 = ccec_export_pub_size();
  uint64_t v18 = sub_186F87CE8();
  *(void *)(v18 + 16) = v17;
  ccec_export_pub();
  *(void *)(v18 + 16) = v17;
  uint64_t v19 = sub_186F3A07C(v18);
  unint64_t v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_186F6DC48(v19, v21);
  uint64_t v23 = v22;
  sub_186F33C98(v19, v21);
  uint64_t v24 = *(void *)(v23 + 16);
  uint64_t v25 = (2LL * *(void *)(v10 + 16)) | 1;
  *(void *)&v29[0] = v2;
  *((void *)&v29[0] + 1) = v3;
  v29[1] = v4;
  *(void *)uint64_t v30 = v5;
  memset(&v30[8], 0, 32);
  uint64_t v31 = 0LL;
  *(void *)&__int128 v32 = v10;
  *((void *)&v32 + 1) = v10 + 32;
  *(void *)&__int128 v33 = 0LL;
  *((void *)&v33 + 1) = v25;
  *(void *)&__int128 v34 = v23;
  *((void *)&v34 + 1) = v23 + 32;
  *(void *)&__int128 v35 = 0LL;
  *((void *)&v35 + 1) = (2 * v24) | 1;
  __int128 v38 = *(_OWORD *)v30;
  __int128 v39 = *(_OWORD *)&v30[16];
  __int128 v36 = v29[0];
  __int128 v37 = v4;
  __int128 v43 = v34;
  __int128 v44 = v35;
  __int128 v41 = v32;
  __int128 v42 = v33;
  __int128 v40 = 0uLL;
  uint64_t v28 = sub_186F3CB8C(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  sub_186F83540((uint64_t)v29);
  sub_186F6C8C0(48, &v28, (char *)&v36);
  sub_186F5CBBC((uint64_t)v29);
  uint64_t v26 = sub_186F3A07C((uint64_t)v28);
  swift_bridgeObjectRelease();
  sub_186F5CBBC((uint64_t)v29);
  return v26;
}

uint64_t P384.Signing.PrivateKey.pemRepresentation.getter()
{
  return sub_186F80C40(P384.Signing.PrivateKey.derRepresentation.getter);
}

uint64_t P384.KeyAgreement.PublicKey.init<A>(rawRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F83278,  (uint64_t)&type metadata for P384,  sub_186F4601C,  a4);
}

uint64_t P384.KeyAgreement.PublicKey.init<A>(compactRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F83278,  (uint64_t)&type metadata for P384,  sub_186F45F5C,  a4);
}

uint64_t P384.KeyAgreement.PublicKey.init<A>(compressedRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82308( a1,  a2,  a3,  (uint64_t (*)(uint64_t))sub_186F83278,  (uint64_t)&type metadata for P384,  (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F4595C,  a4);
}

uint64_t P384.KeyAgreement.PublicKey.init(pemRepresentation:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_186F82408(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_186F779A4, a3);
}

uint64_t P384.KeyAgreement.PublicKey.init<A>(derRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_186F825F8(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_186F779A4, a3);
}

uint64_t P384.KeyAgreement.PublicKey.compactRepresentation.getter()
{
  return sub_186F7F35C(*v0, (uint64_t (*)(uint64_t))MEMORY[0x1895F9B18]);
}

uint64_t P384.KeyAgreement.PublicKey.compressedRepresentation.getter()
{
  return sub_186F7F4FC(*v0, MEMORY[0x1895F9B18]);
}

uint64_t P384.KeyAgreement.PublicKey.derRepresentation.getter()
{
  if (qword_18C6B0660 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_18C6B5F38;
  uint64_t v1 = unk_18C6B5F40;
  __int128 v13 = xmmword_18C6B5F48;
  uint64_t v2 = qword_18C6B5F58;
  swift_unknownObjectRetain();
  sub_186F87CDC();
  sub_186F87CDC();
  unint64_t v3 = ccec_export_pub_size();
  uint64_t v4 = sub_186F87CE8();
  *(void *)(v4 + 16) = v3;
  ccec_export_pub();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = sub_186F3A07C(v4);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_186F6DC48(v5, v7);
  uint64_t v9 = v8;
  sub_186F33C98(v5, v7);
  uint64_t v10 = (2LL * *(void *)(v9 + 16)) | 1;
  v15[0] = v0;
  v15[1] = v1;
  __int128 v16 = v13;
  uint64_t v17 = v2;
  uint64_t v18 = v9;
  uint64_t v19 = v9 + 32;
  uint64_t v20 = 0LL;
  uint64_t v21 = v10;
  uint64_t v14 = sub_186F3CB8C(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  sub_186F87CDC();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_186F6C52C(48, &v14, (char *)v15);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_186F3A07C((uint64_t)v14);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t P384.KeyAgreement.PublicKey.pemRepresentation.getter()
{
  return sub_186F801BC(P384.KeyAgreement.PublicKey.derRepresentation.getter);
}

uint64_t P384.KeyAgreement.PrivateKey.init<A>(x963Representation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F83278,  (uint64_t)&type metadata for P384,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F45D10,  a4);
}

uint64_t P384.KeyAgreement.PrivateKey.init<A>(rawRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F83278,  (uint64_t)&type metadata for P384,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F45D2C,  a4);
}

uint64_t P384.KeyAgreement.PrivateKey.init(seed:compactRepresentable:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_186F802C4(a1, a2, a3);
}

uint64_t P384.KeyAgreement.PrivateKey.init(pemRepresentation:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_186F80340(a1, a2, MEMORY[0x1895F9B18], (uint64_t (*)(void *, uint64_t *))sub_186F83770, a3);
}

void P384.KeyAgreement.PrivateKey.init<A>(derRepresentation:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

uint64_t P384.KeyAgreement.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F82A60(MEMORY[0x1895F9B18], a1);
}

int64_t P384.KeyAgreement.PrivateKey.rawRepresentation.getter()
{
  return sub_186F7F0FC(*v0, MEMORY[0x1895F9B18]);
}

uint64_t P384.KeyAgreement.PrivateKey.derRepresentation.getter()
{
  uint64_t v1 = *v0;
  if (qword_18C6B0660 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_18C6B5F38;
  uint64_t v3 = unk_18C6B5F40;
  __int128 v4 = xmmword_18C6B5F48;
  uint64_t v5 = qword_18C6B5F58;
  swift_unknownObjectRetain();
  swift_retain();
  sub_186F87CDC();
  int64_t v6 = sub_186F7F0FC(v1, MEMORY[0x1895F9B18]);
  unint64_t v8 = v7;
  swift_release();
  sub_186F6DC48(v6, v8);
  uint64_t v10 = v9;
  uint64_t v11 = sub_186F33C98(v6, v8);
  uint64_t v12 = MEMORY[0x18959E9D8](v11);
  if (!v12) {
    goto LABEL_10;
  }
  uint64_t v13 = v12;
  *((void *)&v37 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  *(void *)&__int128 v36 = v13;
  swift_retain();
  swift_dynamicCast();
  uint64_t v14 = getccec_pub_ctx_size();
  if (v14 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }

  size_t v15 = v14;
  if (v14)
  {
    uint64_t v16 = sub_186F87CE8();
    *(void *)(v16 + 16) = v15;
  }

  else
  {
    uint64_t v16 = MEMORY[0x18961AFE8];
  }

  memcpy((void *)(v16 + 32), (const void *)(v1 + 32), v15);
  *(void *)(v16 + 16) = v15;
  swift_release();
  unint64_t v17 = ccec_export_pub_size();
  uint64_t v18 = sub_186F87CE8();
  *(void *)(v18 + 16) = v17;
  ccec_export_pub();
  *(void *)(v18 + 16) = v17;
  uint64_t v19 = sub_186F3A07C(v18);
  unint64_t v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_186F6DC48(v19, v21);
  uint64_t v23 = v22;
  sub_186F33C98(v19, v21);
  uint64_t v24 = *(void *)(v23 + 16);
  uint64_t v25 = (2LL * *(void *)(v10 + 16)) | 1;
  *(void *)&v29[0] = v2;
  *((void *)&v29[0] + 1) = v3;
  v29[1] = v4;
  *(void *)uint64_t v30 = v5;
  memset(&v30[8], 0, 32);
  uint64_t v31 = 0LL;
  *(void *)&__int128 v32 = v10;
  *((void *)&v32 + 1) = v10 + 32;
  *(void *)&__int128 v33 = 0LL;
  *((void *)&v33 + 1) = v25;
  *(void *)&__int128 v34 = v23;
  *((void *)&v34 + 1) = v23 + 32;
  *(void *)&__int128 v35 = 0LL;
  *((void *)&v35 + 1) = (2 * v24) | 1;
  __int128 v38 = *(_OWORD *)v30;
  __int128 v39 = *(_OWORD *)&v30[16];
  __int128 v36 = v29[0];
  __int128 v37 = v4;
  __int128 v43 = v34;
  __int128 v44 = v35;
  __int128 v41 = v32;
  __int128 v42 = v33;
  __int128 v40 = 0uLL;
  uint64_t v28 = sub_186F3CB8C(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  sub_186F83540((uint64_t)v29);
  sub_186F6C8C0(48, &v28, (char *)&v36);
  sub_186F5CBBC((uint64_t)v29);
  uint64_t v26 = sub_186F3A07C((uint64_t)v28);
  swift_bridgeObjectRelease();
  sub_186F5CBBC((uint64_t)v29);
  return v26;
}

uint64_t P384.KeyAgreement.PrivateKey.pemRepresentation.getter()
{
  return sub_186F80C40(P384.KeyAgreement.PrivateKey.derRepresentation.getter);
}

uint64_t P521.Signing.PublicKey.init<A>(rawRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F832BC,  (uint64_t)&type metadata for P521,  sub_186F4601C,  a4);
}

uint64_t P521.Signing.PublicKey.init<A>(compactRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F832BC,  (uint64_t)&type metadata for P521,  sub_186F45F5C,  a4);
}

uint64_t P521.Signing.PublicKey.init<A>(compressedRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82308( a1,  a2,  a3,  (uint64_t (*)(uint64_t))sub_186F832BC,  (uint64_t)&type metadata for P521,  (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F4595C,  a4);
}

uint64_t P521.Signing.PublicKey.init(pemRepresentation:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_186F82408(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_186F77B30, a3);
}

uint64_t P521.Signing.PublicKey.init<A>(derRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_186F825F8(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_186F77B30, a3);
}

uint64_t _s9CryptoKit4P256O12KeyAgreementO06PublicD0V18x963Representation10Foundation4DataVvg_0()
{
  unint64_t v0 = ccec_export_pub_size();
  uint64_t v1 = sub_186F87CE8();
  *(void *)(v1 + 16) = v0;
  ccec_export_pub();
  *(void *)(v1 + 16) = v0;
  uint64_t v2 = sub_186F3A07C(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t P521.Signing.PublicKey.derRepresentation.getter()
{
  if (qword_18C6B0668 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_18C6B5F60;
  uint64_t v1 = *(void *)algn_18C6B5F68;
  __int128 v13 = xmmword_18C6B5F70;
  uint64_t v2 = qword_18C6B5F80;
  swift_unknownObjectRetain();
  sub_186F87CDC();
  sub_186F87CDC();
  unint64_t v3 = ccec_export_pub_size();
  uint64_t v4 = sub_186F87CE8();
  *(void *)(v4 + 16) = v3;
  ccec_export_pub();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = sub_186F3A07C(v4);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_186F6DC48(v5, v7);
  uint64_t v9 = v8;
  sub_186F33C98(v5, v7);
  uint64_t v10 = (2LL * *(void *)(v9 + 16)) | 1;
  v15[0] = v0;
  v15[1] = v1;
  __int128 v16 = v13;
  uint64_t v17 = v2;
  uint64_t v18 = v9;
  uint64_t v19 = v9 + 32;
  uint64_t v20 = 0LL;
  uint64_t v21 = v10;
  uint64_t v14 = sub_186F3CB8C(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  sub_186F87CDC();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_186F6C52C(48, &v14, (char *)v15);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_186F3A07C((uint64_t)v14);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t P521.Signing.PublicKey.pemRepresentation.getter()
{
  return sub_186F801BC(P521.Signing.PublicKey.derRepresentation.getter);
}

uint64_t P521.Signing.PrivateKey.init(compactRepresentable:)@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  return sub_186F81D90(a1, MEMORY[0x1895F9B20], (uint64_t (*)(uint64_t, void, uint64_t))sub_186F41EF8, a2);
}

uint64_t sub_186F81D90@<X0>( char a1@<W0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(uint64_t, void, uint64_t)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = a2();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
    swift_dynamicCast();
    uint64_t v8 = getccec_full_ctx_size();
    uint64_t result = a3(v8, a1 & 1, v8);
    *a4 = result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t P521.Signing.PrivateKey.init<A>(x963Representation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F832BC,  (uint64_t)&type metadata for P521,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F45D10,  a4);
}

uint64_t P521.Signing.PrivateKey.init<A>(rawRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F832BC,  (uint64_t)&type metadata for P521,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F45D2C,  a4);
}

uint64_t P521.Signing.PrivateKey.init(seed:compactRepresentable:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_186F802C4(a1, a2, a3);
}

uint64_t P521.Signing.PrivateKey.init(pemRepresentation:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_186F80340(a1, a2, MEMORY[0x1895F9B20], (uint64_t (*)(void *, uint64_t *))sub_186F83730, a3);
}

void P521.Signing.PrivateKey.init<A>(derRepresentation:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

uint64_t P521.Signing.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F82A60(MEMORY[0x1895F9B20], a1);
}

uint64_t P521.Signing.PrivateKey.derRepresentation.getter()
{
  uint64_t v1 = *v0;
  if (qword_18C6B0668 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_18C6B5F60;
  uint64_t v3 = *(void *)algn_18C6B5F68;
  __int128 v4 = xmmword_18C6B5F70;
  uint64_t v5 = qword_18C6B5F80;
  swift_unknownObjectRetain();
  swift_retain();
  sub_186F87CDC();
  int64_t v6 = sub_186F7F0FC(v1, MEMORY[0x1895F9B20]);
  unint64_t v8 = v7;
  swift_release();
  sub_186F6DC48(v6, v8);
  uint64_t v10 = v9;
  sub_186F33C98(v6, v8);
  uint64_t v11 = ccec_cp_521();
  if (!v11) {
    goto LABEL_10;
  }
  uint64_t v12 = v11;
  *((void *)&v36 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  *(void *)&__int128 v35 = v12;
  swift_retain();
  swift_dynamicCast();
  uint64_t v13 = getccec_pub_ctx_size();
  if (v13 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }

  size_t v14 = v13;
  if (v13)
  {
    uint64_t v15 = sub_186F87CE8();
    *(void *)(v15 + 16) = v14;
  }

  else
  {
    uint64_t v15 = MEMORY[0x18961AFE8];
  }

  memcpy((void *)(v15 + 32), (const void *)(v1 + 32), v14);
  *(void *)(v15 + 16) = v14;
  swift_release();
  unint64_t v16 = ccec_export_pub_size();
  uint64_t v17 = sub_186F87CE8();
  *(void *)(v17 + 16) = v16;
  ccec_export_pub();
  *(void *)(v17 + 16) = v16;
  uint64_t v18 = sub_186F3A07C(v17);
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_186F6DC48(v18, v20);
  uint64_t v22 = v21;
  sub_186F33C98(v18, v20);
  uint64_t v23 = *(void *)(v22 + 16);
  uint64_t v24 = (2LL * *(void *)(v10 + 16)) | 1;
  *(void *)&v28[0] = v2;
  *((void *)&v28[0] + 1) = v3;
  v28[1] = v4;
  *(void *)id v29 = v5;
  memset(&v29[8], 0, 32);
  uint64_t v30 = 0LL;
  *(void *)&__int128 v31 = v10;
  *((void *)&v31 + 1) = v10 + 32;
  *(void *)&__int128 v32 = 0LL;
  *((void *)&v32 + 1) = v24;
  *(void *)&__int128 v33 = v22;
  *((void *)&v33 + 1) = v22 + 32;
  *(void *)&__int128 v34 = 0LL;
  *((void *)&v34 + 1) = (2 * v23) | 1;
  __int128 v37 = *(_OWORD *)v29;
  __int128 v38 = *(_OWORD *)&v29[16];
  __int128 v35 = v28[0];
  __int128 v36 = v4;
  __int128 v42 = v33;
  __int128 v43 = v34;
  __int128 v40 = v31;
  __int128 v41 = v32;
  __int128 v39 = 0uLL;
  uint64_t v27 = sub_186F3CB8C(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  sub_186F83540((uint64_t)v28);
  sub_186F6C8C0(48, &v27, (char *)&v35);
  sub_186F5CBBC((uint64_t)v28);
  uint64_t v25 = sub_186F3A07C((uint64_t)v27);
  swift_bridgeObjectRelease();
  sub_186F5CBBC((uint64_t)v28);
  return v25;
}

uint64_t P521.Signing.PrivateKey.pemRepresentation.getter()
{
  return sub_186F80C40(P521.Signing.PrivateKey.derRepresentation.getter);
}

uint64_t P521.KeyAgreement.PublicKey.init<A>(rawRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F832BC,  (uint64_t)&type metadata for P521,  sub_186F4601C,  a4);
}

uint64_t P521.KeyAgreement.PublicKey.init<A>(compactRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F832BC,  (uint64_t)&type metadata for P521,  sub_186F45F5C,  a4);
}

uint64_t sub_186F82248@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14 = a4();
  uint64_t v15 = a6(a1, a5, a2, v14, a3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8LL))(a1, a2);
  if (!v7) {
    *a7 = v15;
  }
  return result;
}

uint64_t P521.KeyAgreement.PublicKey.init<A>(compressedRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82308( a1,  a2,  a3,  (uint64_t (*)(uint64_t))sub_186F832BC,  (uint64_t)&type metadata for P521,  (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F4595C,  a4);
}

uint64_t sub_186F82308@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(char *, uint64_t, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v22 = a7;
  uint64_t v14 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858]();
  unint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, a2);
  uint64_t v18 = a4(v17);
  uint64_t v19 = a6(v16, a5, a2, v18, a3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a2);
  if (!v7) {
    *uint64_t v22 = v19;
  }
  return result;
}

uint64_t P521.KeyAgreement.PublicKey.init(pemRepresentation:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_186F82408(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_186F77B30, a3);
}

uint64_t sub_186F82408@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(uint64_t, char *, char *, char *)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_186F43758(a1, a2);
  if (!v4)
  {
    uint64_t v11 = v9;
    unint64_t v12 = v10;
    if (result == 0x4B2043494C425550LL && v8 == 0xEA00000000005945LL || (sub_186F87F70() & 1) != 0)
    {
      sub_186F33D20(v11, v12);
      sub_186F6DC48(v11, v12);
      sub_186F6BA0C(v13, v13 + 32, 0LL, (2LL * *(void *)(v13 + 16)) | 1, (uint64_t)v20);
      swift_release();
      sub_186F363FC(v20, 0x30u, v21);
      uint64_t v14 = v21[6];
      uint64_t v15 = v21[7];
      unint64_t v16 = v21[8];
      uint64_t v17 = swift_unknownObjectRetain();
      uint64_t v19 = a3(v17, v14, v15, v16);
      sub_186F834D0((uint64_t)v21);
      sub_186F33C98(v11, v12);
      swift_bridgeObjectRelease();
      uint64_t result = sub_186F33C98(v11, v12);
      *a4 = v19;
    }

    else
    {
      sub_186F36690();
      swift_allocError();
      _BYTE *v18 = 7;
      swift_willThrow();
      swift_bridgeObjectRelease();
      return sub_186F33C98(v11, v12);
    }
  }

  return result;
}

uint64_t P521.KeyAgreement.PublicKey.init<A>(derRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_186F825F8(a1, a2, (uint64_t (*)(uint64_t, char *, char *, char *))sub_186F77B30, a3);
}

uint64_t sub_186F825F8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, char *, char *, char *)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v9 + 16))( &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)],  a1,  a2);
  uint64_t v11 = sub_186F87CF4();
  sub_186F6BA0C(v11, v11 + 32, 0LL, (2LL * *(void *)(v11 + 16)) | 1, (uint64_t)v18);
  swift_bridgeObjectRelease();
  if (v4) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  }
  sub_186F363FC(v18, 0x30u, v19);
  unint64_t v12 = v19[6];
  uint64_t v13 = v19[7];
  uint64_t v14 = v19[8];
  uint64_t v15 = swift_unknownObjectRetain();
  uint64_t v16 = a3(v15, v12, v13, v14);
  sub_186F834D0((uint64_t)v19);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  *a4 = v16;
  return result;
}

uint64_t P521.KeyAgreement.PublicKey.compactRepresentation.getter()
{
  return sub_186F7F35C(*v0, (uint64_t (*)(uint64_t))MEMORY[0x1895F9B20]);
}

uint64_t P521.KeyAgreement.PublicKey.compressedRepresentation.getter()
{
  return sub_186F7F4FC(*v0, MEMORY[0x1895F9B20]);
}

uint64_t P521.KeyAgreement.PublicKey.derRepresentation.getter()
{
  if (qword_18C6B0668 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_18C6B5F60;
  uint64_t v1 = *(void *)algn_18C6B5F68;
  __int128 v13 = xmmword_18C6B5F70;
  uint64_t v2 = qword_18C6B5F80;
  swift_unknownObjectRetain();
  sub_186F87CDC();
  sub_186F87CDC();
  unint64_t v3 = ccec_export_pub_size();
  uint64_t v4 = sub_186F87CE8();
  *(void *)(v4 + 16) = v3;
  ccec_export_pub();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = sub_186F3A07C(v4);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_186F6DC48(v5, v7);
  uint64_t v9 = v8;
  sub_186F33C98(v5, v7);
  uint64_t v10 = (2LL * *(void *)(v9 + 16)) | 1;
  v15[0] = v0;
  v15[1] = v1;
  __int128 v16 = v13;
  uint64_t v17 = v2;
  uint64_t v18 = v9;
  uint64_t v19 = v9 + 32;
  uint64_t v20 = 0LL;
  uint64_t v21 = v10;
  uint64_t v14 = sub_186F3CB8C(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  sub_186F87CDC();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_186F6C52C(48, &v14, (char *)v15);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_186F3A07C((uint64_t)v14);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t P521.KeyAgreement.PublicKey.pemRepresentation.getter()
{
  return sub_186F801BC(P521.KeyAgreement.PublicKey.derRepresentation.getter);
}

uint64_t P521.KeyAgreement.PrivateKey.init<A>(x963Representation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F832BC,  (uint64_t)&type metadata for P521,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F45D10,  a4);
}

uint64_t P521.KeyAgreement.PrivateKey.init<A>(rawRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return sub_186F82248( a1,  a2,  a3,  (uint64_t (*)(void))sub_186F832BC,  (uint64_t)&type metadata for P521,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_186F45D2C,  a4);
}

uint64_t P521.KeyAgreement.PrivateKey.init(seed:compactRepresentable:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_186F802C4(a1, a2, a3);
}

uint64_t P521.KeyAgreement.PrivateKey.init(pemRepresentation:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_186F80340(a1, a2, MEMORY[0x1895F9B20], (uint64_t (*)(void *, uint64_t *))sub_186F83730, a3);
}

void P521.KeyAgreement.PrivateKey.init<A>(derRepresentation:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

uint64_t P521.KeyAgreement.PrivateKey.publicKey.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F82A60(MEMORY[0x1895F9B20], a1);
}

uint64_t sub_186F82A60@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t result = a1();
  if (!result) {
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  swift_dynamicCast();
  uint64_t result = getccec_pub_ctx_size();
  if (result < 0)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }

  size_t v6 = result;
  swift_retain();
  if (v6)
  {
    uint64_t v7 = sub_186F87CE8();
    *(void *)(v7 + 16) = v6;
  }

  else
  {
    uint64_t v7 = MEMORY[0x18961AFE8];
  }

  memcpy((void *)(v7 + 32), (const void *)(v4 + 32), v6);
  *(void *)(v7 + 16) = v6;
  uint64_t result = swift_release();
  *a2 = v7;
  return result;
}

int64_t P521.KeyAgreement.PrivateKey.rawRepresentation.getter()
{
  return sub_186F7F0FC(*v0, MEMORY[0x1895F9B20]);
}

uint64_t _s9CryptoKit4P256O7SigningO10PrivateKeyV18x963Representation10Foundation4DataVvg_0()
{
  unint64_t v0 = ccec_x963_export_size();
  uint64_t v1 = sub_186F87CE8();
  *(void *)(v1 + 16) = v0;
  ccec_x963_export();
  *(void *)(v1 + 16) = v0;
  uint64_t v2 = sub_186F3A07C(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t P521.KeyAgreement.PrivateKey.derRepresentation.getter()
{
  uint64_t v1 = *v0;
  if (qword_18C6B0668 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_18C6B5F60;
  uint64_t v3 = *(void *)algn_18C6B5F68;
  __int128 v4 = xmmword_18C6B5F70;
  uint64_t v5 = qword_18C6B5F80;
  swift_unknownObjectRetain();
  swift_retain();
  sub_186F87CDC();
  int64_t v6 = sub_186F7F0FC(v1, MEMORY[0x1895F9B20]);
  unint64_t v8 = v7;
  swift_release();
  sub_186F6DC48(v6, v8);
  uint64_t v10 = v9;
  sub_186F33C98(v6, v8);
  uint64_t v11 = ccec_cp_521();
  if (!v11) {
    goto LABEL_10;
  }
  uint64_t v12 = v11;
  *((void *)&v36 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  *(void *)&__int128 v35 = v12;
  swift_retain();
  swift_dynamicCast();
  uint64_t v13 = getccec_pub_ctx_size();
  if (v13 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }

  size_t v14 = v13;
  if (v13)
  {
    uint64_t v15 = sub_186F87CE8();
    *(void *)(v15 + 16) = v14;
  }

  else
  {
    uint64_t v15 = MEMORY[0x18961AFE8];
  }

  memcpy((void *)(v15 + 32), (const void *)(v1 + 32), v14);
  *(void *)(v15 + 16) = v14;
  swift_release();
  unint64_t v16 = ccec_export_pub_size();
  uint64_t v17 = sub_186F87CE8();
  *(void *)(v17 + 16) = v16;
  ccec_export_pub();
  *(void *)(v17 + 16) = v16;
  uint64_t v18 = sub_186F3A07C(v17);
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_186F6DC48(v18, v20);
  uint64_t v22 = v21;
  sub_186F33C98(v18, v20);
  uint64_t v23 = *(void *)(v22 + 16);
  uint64_t v24 = (2LL * *(void *)(v10 + 16)) | 1;
  *(void *)&v28[0] = v2;
  *((void *)&v28[0] + 1) = v3;
  v28[1] = v4;
  *(void *)id v29 = v5;
  memset(&v29[8], 0, 32);
  uint64_t v30 = 0LL;
  *(void *)&__int128 v31 = v10;
  *((void *)&v31 + 1) = v10 + 32;
  *(void *)&__int128 v32 = 0LL;
  *((void *)&v32 + 1) = v24;
  *(void *)&__int128 v33 = v22;
  *((void *)&v33 + 1) = v22 + 32;
  *(void *)&__int128 v34 = 0LL;
  *((void *)&v34 + 1) = (2 * v23) | 1;
  __int128 v37 = *(_OWORD *)v29;
  __int128 v38 = *(_OWORD *)&v29[16];
  __int128 v35 = v28[0];
  __int128 v36 = v4;
  __int128 v42 = v33;
  __int128 v43 = v34;
  __int128 v40 = v31;
  __int128 v41 = v32;
  __int128 v39 = 0uLL;
  uint64_t v27 = sub_186F3CB8C(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  sub_186F83540((uint64_t)v28);
  sub_186F6C8C0(48, &v27, (char *)&v35);
  sub_186F5CBBC((uint64_t)v28);
  uint64_t v25 = sub_186F3A07C((uint64_t)v27);
  swift_bridgeObjectRelease();
  sub_186F5CBBC((uint64_t)v28);
  return v25;
}

uint64_t P521.KeyAgreement.PrivateKey.pemRepresentation.getter()
{
  return sub_186F80C40(P521.KeyAgreement.PrivateKey.derRepresentation.getter);
}

uint64_t P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)(uint64_t a1)
{
  return sub_186F82F74(a1, (uint64_t (*)(void *))sub_186F7EB10);
}

uint64_t sub_186F82EEC@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F82FB8(MEMORY[0x1895F9B10], a1);
}

uint64_t sub_186F82EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186F830AC(a1, a2, a3, (uint64_t (*)(void *))sub_186F7EB10);
}

uint64_t P384.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)(uint64_t a1)
{
  return sub_186F82F74(a1, (uint64_t (*)(void *))sub_186F7EB68);
}

uint64_t sub_186F82F30@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F82FB8(MEMORY[0x1895F9B18], a1);
}

uint64_t sub_186F82F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186F830AC(a1, a2, a3, (uint64_t (*)(void *))sub_186F7EB68);
}

uint64_t P521.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)(uint64_t a1)
{
  return sub_186F82F74(a1, (uint64_t (*)(void *))sub_186F7EBC0);
}

uint64_t sub_186F82F74(uint64_t a1, uint64_t (*a2)(void *))
{
  void v4[2] = *v2;
  return a2(v4);
}

uint64_t sub_186F82FAC@<X0>(uint64_t *a1@<X8>)
{
  return sub_186F82FB8(MEMORY[0x1895F9B20], a1);
}

uint64_t sub_186F82FB8@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t result = a1();
  if (!result) {
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  swift_dynamicCast();
  uint64_t result = getccec_pub_ctx_size();
  if (result < 0)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }

  size_t v6 = result;
  swift_retain();
  if (v6)
  {
    uint64_t v7 = sub_186F87CE8();
    *(void *)(v7 + 16) = v6;
  }

  else
  {
    uint64_t v7 = MEMORY[0x18961AFE8];
  }

  memcpy((void *)(v7 + 32), (const void *)(v4 + 32), v6);
  *(void *)(v7 + 16) = v6;
  uint64_t result = swift_release();
  *a2 = v7;
  return result;
}

uint64_t sub_186F83090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_186F830AC(a1, a2, a3, (uint64_t (*)(void *))sub_186F7EBC0);
}

uint64_t sub_186F830AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *))
{
  void v6[2] = *v4;
  return a4(v6);
}

uint64_t sub_186F830E4(uint64_t result, uint64_t (*a2)(void *, uint64_t *))
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v4 = result;
  if (result)
  {
    uint64_t v5 = sub_186F87CE8();
    *(void *)(v5 + 16) = v4;
  }

  else
  {
    uint64_t v5 = MEMORY[0x18961AFE8];
  }

  uint64_t v6 = v5 + 32;
  v7[1] = v4;
  uint64_t v8 = 0LL;
  v7[0] = v5 + 32;
  uint64_t result = a2(v7, &v8);
  if (v2)
  {
    if (v8 <= v4)
    {
      if (!v7[0])
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }

      if (v6 == v7[0])
      {
        *(void *)(v5 + 16) = v8;
        swift_bridgeObjectRelease();
        return v5;
      }

      goto LABEL_17;
    }

uint64_t *sub_186F831DC(uint64_t *result, void *a2, void *a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a3[2];
  uint64_t v7 = a3[3] >> 1;
  BOOL v8 = __OFSUB__(v7, v6);
  uint64_t v9 = v7 - v6;
  if (v8)
  {
    __break(1u);
  }

  else
  {
    uint64_t result = (uint64_t *)sub_186F7EE14(a3[1] + v6, a3[1] + v6 + v9, result, a5);
    if (!v5) {
      *a2 = a4;
    }
  }

  return result;
}

unint64_t sub_186F83234()
{
  unint64_t result = qword_18C4B53B0;
  if (!qword_18C4B53B0)
  {
    unint64_t result = MEMORY[0x18959EFD8]("|\\"", &type metadata for P256);
    atomic_store(result, (unint64_t *)&qword_18C4B53B0);
  }

  return result;
}

unint64_t sub_186F83278()
{
  unint64_t result = qword_18C4B54F0;
  if (!qword_18C4B54F0)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for P384, &type metadata for P384);
    atomic_store(result, (unint64_t *)&qword_18C4B54F0);
  }

  return result;
}

unint64_t sub_186F832BC()
{
  unint64_t result = qword_18C6B1A70;
  if (!qword_18C6B1A70)
  {
    unint64_t result = MEMORY[0x18959EFD8](&protocol conformance descriptor for P521, &type metadata for P521);
    atomic_store(result, (unint64_t *)&qword_18C6B1A70);
  }

  return result;
}

void sub_186F83300(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_186F83348( uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (!a4())
  {
    __break(1u);
    JUMPOUT(0x186F834C0LL);
  }

  BOOL v8 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  swift_dynamicCast();
  unint64_t v9 = (unint64_t)objc_msgSend(v8, sel_groupOrderByteCountForCP_, v15);
  if ((v9 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }

  if (__OFADD__(v9, 8LL))
  {
LABEL_11:
    __break(1u);
    JUMPOUT(0x186F834B4LL);
  }

  if (BYTE6(v5) == v9 + 8)
  {
    swift_dynamicCast();
    uint64_t v10 = getccec_full_ctx_size();
    if ((a3 & 1) != 0) {
      uint64_t v11 = 9LL;
    }
    else {
      uint64_t v11 = 1LL;
    }
    return a5(v10, v6, v5, v11, v10);
  }

  else
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = 1;
    *(_BYTE *)(v13 + 4) = 1;
    return swift_willThrow();
  }

uint64_t sub_186F834D0(uint64_t a1)
{
  return a1;
}

unint64_t ccec_x963_export_size()
{
  return 3 * ((unint64_t)(cczp_bitlen() + 7) >> 3) + 1;
}

uint64_t sub_186F83540(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  swift_unknownObjectRetain();
  sub_186F87CDC();
  sub_186F5CAF4(v2);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

_UNKNOWN **sub_186F835C8()
{
  return &off_189FB02E8;
}

_UNKNOWN **sub_186F835D4()
{
  return &off_189FB0338;
}

_UNKNOWN **sub_186F835E0()
{
  return &off_189FB0388;
}

_UNKNOWN **sub_186F835EC()
{
  return &off_189FB03D8;
}

_UNKNOWN **sub_186F835F8()
{
  return &off_189FB0428;
}

_UNKNOWN **sub_186F83604()
{
  return &off_189FB0478;
}

ValueMetadata *type metadata accessor for P256.Signing()
{
  return &type metadata for P256.Signing;
}

ValueMetadata *type metadata accessor for P256.Signing.PublicKey()
{
  return &type metadata for P256.Signing.PublicKey;
}

ValueMetadata *type metadata accessor for P256.Signing.PrivateKey()
{
  return &type metadata for P256.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for P256.KeyAgreement()
{
  return &type metadata for P256.KeyAgreement;
}

ValueMetadata *type metadata accessor for P256.KeyAgreement.PublicKey()
{
  return &type metadata for P256.KeyAgreement.PublicKey;
}

ValueMetadata *type metadata accessor for P256.KeyAgreement.PrivateKey()
{
  return &type metadata for P256.KeyAgreement.PrivateKey;
}

ValueMetadata *type metadata accessor for P384.Signing()
{
  return &type metadata for P384.Signing;
}

ValueMetadata *type metadata accessor for P384.Signing.PublicKey()
{
  return &type metadata for P384.Signing.PublicKey;
}

ValueMetadata *type metadata accessor for P384.Signing.PrivateKey()
{
  return &type metadata for P384.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for P384.KeyAgreement()
{
  return &type metadata for P384.KeyAgreement;
}

ValueMetadata *type metadata accessor for P384.KeyAgreement.PublicKey()
{
  return &type metadata for P384.KeyAgreement.PublicKey;
}

ValueMetadata *type metadata accessor for P384.KeyAgreement.PrivateKey()
{
  return &type metadata for P384.KeyAgreement.PrivateKey;
}

ValueMetadata *type metadata accessor for P521.Signing()
{
  return &type metadata for P521.Signing;
}

ValueMetadata *type metadata accessor for P521.Signing.PublicKey()
{
  return &type metadata for P521.Signing.PublicKey;
}

ValueMetadata *type metadata accessor for P521.Signing.PrivateKey()
{
  return &type metadata for P521.Signing.PrivateKey;
}

ValueMetadata *type metadata accessor for P521.KeyAgreement()
{
  return &type metadata for P521.KeyAgreement;
}

ValueMetadata *type metadata accessor for P521.KeyAgreement.PublicKey()
{
  return &type metadata for P521.KeyAgreement.PublicKey;
}

ValueMetadata *type metadata accessor for P521.KeyAgreement.PrivateKey()
{
  return &type metadata for P521.KeyAgreement.PrivateKey;
}

uint64_t *sub_186F83730(uint64_t *a1, void *a2)
{
  return sub_186F831DC(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), MEMORY[0x1895F9B20]);
}

unint64_t ccec_compact_export_size()
{
  return (unint64_t)(cczp_bitlen() + 7) >> 3;
}

uint64_t *sub_186F83770(uint64_t *a1, void *a2)
{
  return sub_186F831DC(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), MEMORY[0x1895F9B18]);
}

uint64_t *sub_186F83790(uint64_t *a1, void *a2)
{
  return sub_186F831DC(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), MEMORY[0x1895F9B10]);
}

uint64_t sub_186F837E8()
{
  return sub_186F84188();
}

uint64_t sub_186F8380C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_186F838DC(a1, a2, a3, a4, MEMORY[0x1895F9B10], sub_186F85D14);
}

uint64_t sub_186F83834()
{
  return sub_186F83A64();
}

void sub_186F83840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

uint64_t sub_186F83890()
{
  return sub_186F84188();
}

uint64_t sub_186F838B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_186F838DC(a1, a2, a3, a4, MEMORY[0x1895F9B18], sub_186F85D34);
}

uint64_t sub_186F838DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), void (*a6)(void, void))
{
  if (!a3) {
    goto LABEL_10;
  }
  uint64_t v8 = a5();
  if (!v8) {
    goto LABEL_11;
  }
  uint64_t v9 = v8;
  uint64_t v10 = (void *)objc_opt_self();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  *(void *)&__int128 v15 = v9;
  swift_dynamicCast();
  int64_t v11 = (int64_t)objc_msgSend(v10, sel_groupOrderByteCountForCP_, v18);
  if (v11 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v11 + 0x4000000000000000LL < 0)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
    return result;
  }

  *(void *)&__int128 v15 = sub_186F39FE0(2 * v11);
  *((void *)&v15 + 1) = v12;
  sub_186F791FC((uint64_t)&v15);
  __int128 v17 = v15;
  sub_186F845C8((uint64_t)&v17);
  __int128 v13 = v17;
  if (!v6)
  {
    sub_186F33D20(v17, *((unint64_t *)&v17 + 1));
    a6(v13, *((void *)&v13 + 1));
  }

  return sub_186F33C98(v13, *((unint64_t *)&v13 + 1));
}

uint64_t sub_186F83A64()
{
  return v2;
}

void sub_186F83AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  __asm { BR              X10 }

uint64_t sub_186F83B38()
{
  uint64_t v8 = v2;
  __int16 v9 = v3;
  char v10 = BYTE2(v3);
  char v11 = BYTE3(v3);
  char v12 = BYTE4(v3);
  char v13 = BYTE5(v3);
  sub_186F33D20(v2, v3);
  sub_186F33D20(v1, v0);
  sub_186F83E8C((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v3), v2, v3, v1, v0);
  if (v4)
  {
    sub_186F33C98(v2, v3);
    sub_186F33C98(v1, v0);
    __break(1u);
    JUMPOUT(0x186F83E28LL);
  }

  sub_186F33C98(v2, v3);
  sub_186F33C98(v1, v0);
  sub_186F33C98(v2, v3);
  uint64_t result = sub_186F33C98(v1, v0);
  *uint64_t v5 = v7;
  return result;
}

void sub_186F83E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __asm { BR              X10 }

uint64_t sub_186F83EF8()
{
  uint64_t v7 = v4;
  __int16 v8 = v1;
  char v9 = BYTE2(v1);
  char v10 = BYTE3(v1);
  char v11 = BYTE4(v1);
  char v12 = BYTE5(v1);
  uint64_t result = sub_186F84568((uint64_t)&v7, v0, v3, &v6);
  *uint64_t v2 = v6;
  return result;
}

uint64_t sub_186F84164()
{
  return sub_186F84188();
}

uint64_t sub_186F84188()
{
  return sub_186F879B8();
}

uint64_t sub_186F84228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_186F838DC(a1, a2, a3, a4, MEMORY[0x1895F9B20], sub_186F85D50);
}

uint64_t sub_186F84250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  if (a1) {
    uint64_t v8 = a2 - a1;
  }
  else {
    uint64_t v8 = 0LL;
  }
  if (!a6()) {
    goto LABEL_36;
  }
  char v9 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  swift_dynamicCast();
  int64_t v10 = (int64_t)objc_msgSend(v9, sel_groupOrderByteCountForCP_, v19);
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_30;
  }

  if (v10 + 0x4000000000000000LL < 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  if (v8 < 2 * v10)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  swift_dynamicCast();
  uint64_t v11 = (uint64_t)objc_msgSend(v9, sel_groupOrderByteCountForCP_, v19);
  if (v11 < 0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  if (v11)
  {
    uint64_t v12 = v8 >= v11 ? v11 : v8;
    if ((v8 & 0x8000000000000000LL) == 0 && v12 < 0) {
      goto LABEL_35;
    }
  }

  swift_dynamicCast();
  uint64_t v13 = (uint64_t)objc_msgSend(v9, sel_groupOrderByteCountForCP_, v19);
  if (v13 < 0) {
    goto LABEL_33;
  }
  if (-v13 < -v8 && -v8 < 1) {
    uint64_t v15 = 0LL;
  }
  else {
    uint64_t v15 = v8 - v13;
  }
  if (v8 < v15) {
    goto LABEL_34;
  }
  if (!a4)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  if (!a1)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
  }

  if (!ccrng()) {
    goto LABEL_39;
  }
  uint64_t result = ccec_sign_composite();
  if ((_DWORD)result)
  {
    int v17 = result;
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v18 = v17;
    *(_BYTE *)(v18 + 4) = 0;
    return swift_willThrow();
  }

  return result;
}

uint64_t sub_186F8449C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  if (!a1) {
    __break(1u);
  }
  MEMORY[0x1895F8858](a1);
  uint64_t result = sub_186F879B8();
  *a2 = 0;
  return result;
}

uint64_t sub_186F84568@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, void *a4@<X8>)
{
  if (!a2)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (!a3)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (result)
  {
    uint64_t result = ccec_verify_composite();
    *a4 = (int)result;
    return result;
  }

void sub_186F845C8(uint64_t a1)
{
  __asm { BR              X12 }

uint64_t sub_186F84630@<X0>(uint64_t a1@<X4>, uint64_t (*a2)(void)@<X5>, uint64_t a3@<X8>)
{
  uint64_t v9 = v3;
  LOWORD(v10) = a3;
  BYTE2(v10) = BYTE2(a3);
  HIBYTE(v10) = BYTE3(a3);
  unsigned __int8 v11 = BYTE4(a3);
  unsigned __int8 v12 = BYTE5(a3);
  unsigned __int8 v13 = BYTE6(a3);
  uint64_t result = sub_186F84250((uint64_t)&v9, (uint64_t)&v9 + BYTE6(a3), v6, v5, a1, a2);
  unint64_t v8 = v10 | ((unint64_t)v11 << 32) | ((unint64_t)v12 << 40) | ((unint64_t)v13 << 48);
  *uint64_t v4 = v9;
  v4[1] = v8;
  return result;
}

uint64_t sub_186F84814(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = sub_186F87A00();
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  if ((int)v11 < (int)v12)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v18 = a2;
  uint64_t result = sub_186F8797C();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v13 = result;
  uint64_t result = sub_186F879A0();
  uint64_t v14 = v12 - result;
  if (__OFSUB__(v12, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v15 = v11 - v12;
  uint64_t v16 = sub_186F87994();
  if (v16 >= v15) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = v16;
  }
  return sub_186F84250(v13 + v14, v13 + v14 + v17, v18, a3, a4, a5);
}

void sub_186F848E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = sub_186F8797C();
  if (v12)
  {
    uint64_t v13 = sub_186F879A0();
    if (__OFSUB__(a1, v13))
    {
LABEL_13:
      __break(1u);
      return;
    }

    v12 += a1 - v13;
  }

  BOOL v14 = __OFSUB__(a2, a1);
  uint64_t v15 = a2 - a1;
  if (v14)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v16 = sub_186F87994();
  if (v16 >= v15) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = v16;
  }
  uint64_t v18 = v12 + v17;
  if (v12) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0LL;
  }
  sub_186F83E8C(v12, v19, a4, a5, a6, a7);
}

void sub_186F849CC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_186F849F0(uint64_t a1, uint64_t a2)
{
  return sub_186F838DC(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), MEMORY[0x1895F9B20], sub_186F85D50);
}

uint64_t sub_186F84A1C(uint64_t a1, uint64_t a2)
{
  return sub_186F838DC(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), MEMORY[0x1895F9B18], sub_186F85D34);
}

uint64_t sub_186F84A48(uint64_t a1, uint64_t a2)
{
  return sub_186F838DC(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), MEMORY[0x1895F9B10], sub_186F85D14);
}

uint64_t sub_186F84A74(uint64_t result, char *a2)
{
  int64_t v5 = (int64_t)&a2[-result];
  if (result) {
    int64_t v6 = (int64_t)&a2[-result];
  }
  else {
    int64_t v6 = 0LL;
  }
  uint64_t v7 = *v2;
  int64_t v8 = *(void *)(*v2 + 16);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v3 = a2;
  uint64_t v4 = (char *)result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || (int64_t v10 = *(void *)(v7 + 24) >> 1, v10 < v9))
  {
    if (v8 <= v9) {
      int64_t v11 = v8 + v6;
    }
    else {
      int64_t v11 = v8;
    }
    uint64_t result = (uint64_t)sub_186F3CB8C((char *)result, v11, 1, (char *)v7);
    uint64_t v7 = result;
    int64_t v10 = *(void *)(result + 24) >> 1;
  }

  uint64_t v12 = *(void *)(v7 + 16);
  int64_t v13 = v10 - v12;
  int64_t v14 = 0LL;
  if (v4 && v3 && v4 < v3 && v10 != v12)
  {
    if (v5 >= v13) {
      int64_t v14 = v10 - v12;
    }
    else {
      int64_t v14 = v5;
    }
    if (v14 < 0)
    {
      __break(1u);
      return result;
    }

    uint64_t result = (uint64_t)memmove((void *)(v7 + v12 + 32), v4, v14);
    v4 += v14;
  }

  if (v14 < v6) {
    goto LABEL_27;
  }
  if (v14)
  {
    uint64_t v15 = *(void *)(v7 + 16);
    BOOL v16 = __OFADD__(v15, v14);
    int64_t v17 = v15 + v14;
    if (v16)
    {
      __break(1u);
      goto LABEL_33;
    }

    *(void *)(v7 + 16) = v17;
  }

  if (v14 != v13) {
    goto LABEL_25;
  }
LABEL_28:
  int64_t v17 = *(void *)(v7 + 16);
  if (!v4)
  {
LABEL_33:
    if (!v3) {
      goto LABEL_25;
    }
    uint64_t v4 = 0LL;
    goto LABEL_35;
  }

  if (!v3 || v4 != v3)
  {
LABEL_35:
    char v20 = *v4;
    uint64_t v18 = v4 + 1;
    char v19 = v20;
    while (1)
    {
      while (1)
      {
        unint64_t v21 = *(void *)(v7 + 24);
        int64_t v22 = v21 >> 1;
        uint64_t v23 = v17 + 1;
        uint64_t v26 = (char *)v7;
        int64_t v27 = v17;
        uint64_t result = (uint64_t)sub_186F3CB8C((char *)(v21 > 1), v17 + 1, 1, v26);
        int64_t v17 = v27;
        uint64_t v7 = result;
        int64_t v22 = *(void *)(result + 24) >> 1;
        if (v17 < v22) {
          goto LABEL_39;
        }
LABEL_36:
        *(void *)(v7 + 16) = v17;
      }

      if (v17 >= v22) {
        goto LABEL_36;
      }
LABEL_39:
      *(_BYTE *)(v7 + v17 + 32) = v19;
      if (v3 && v3 == v18)
      {
LABEL_49:
        *(void *)(v7 + 16) = v23;
        break;
      }

      uint64_t v24 = 0LL;
      while (1)
      {
        uint64_t v25 = (uint64_t)&v18[v24 + 1];
        char v19 = v18[v24];
        if (~v17 + v22 == v24) {
          break;
        }
        *(_BYTE *)(v7 + v17 + 33 + v24++) = v19;
        if (v3 && (char *)v25 == v3)
        {
          uint64_t v23 = v17 + v24 + 1;
          goto LABEL_49;
        }
      }

      v18 += v24 + 1;
      int64_t v17 = v22;
      *(void *)(v7 + 16) = v22;
    }
  }

uint64_t sub_186F84C78(uint64_t result, unint64_t a2, unint64_t a3)
{
  int64_t v5 = (_BYTE *)((71 - __clz(a3)) >> 3);
  if ((unint64_t)v5 < result)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v6 = a2;
  if ((unint64_t)v5 < a2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  int64_t v7 = result;
  uint64_t v8 = result - a2;
  uint64_t v3 = *v4;
  int64_t v9 = *((void *)*v4 + 2);
  int64_t v10 = v9 + result - a2;
  if (__OFADD__(v9, result - a2))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  unint64_t v11 = a3;
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (int64_t v13 = *((void *)v3 + 3) >> 1, v13 < v10))
  {
    if (v9 <= v10) {
      int64_t v14 = v10;
    }
    else {
      int64_t v14 = v9;
    }
    uint64_t v3 = sub_186F3CB8C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
    int64_t v13 = *((void *)v3 + 3) >> 1;
  }

  uint64_t v15 = *((void *)v3 + 2);
  uint64_t v16 = v13 - v15;
  uint64_t result = (uint64_t)sub_186F87374(&v46, &v3[v15 + 32], v13 - v15, v7, v6, v11);
  if (result < v8) {
    goto LABEL_19;
  }
  if (result >= 1)
  {
    uint64_t v17 = *((void *)v3 + 2);
    BOOL v18 = __OFADD__(v17, result);
    int64_t v5 = (_BYTE *)(v17 + result);
    if (v18)
    {
      __break(1u);
LABEL_41:
      uint64_t v31 = v11 - v6 + 1;
      goto LABEL_42;
    }

    *((void *)v3 + 2) = v5;
  }

  if (result != v16)
  {
LABEL_15:
    *uint64_t v4 = v3;
    return result;
  }

uint64_t sub_186F84F64(uint64_t a1, uint64_t a2, int64_t a3, unint64_t a4, char **a5)
{
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_16;
  }

  int64_t v5 = a5;
  if (a4 >> 1 != a3)
  {
    if ((uint64_t)(a4 >> 1) <= a3)
    {
      __break(1u);
    }

    else
    {
      unint64_t v6 = a4;
      uint64_t v7 = a2;
      if ((*(char *)(a2 + a3) & 0x80000000) == 0)
      {
        uint64_t v13 = sub_186F85224(a1, a2, a3, a4);
        sub_186F87654(v13, v14, v15, v16);
        return swift_unknownObjectRelease();
      }

      uint64_t v8 = *a5;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *int64_t v5 = v8;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_11:
        unint64_t v18 = *((void *)v8 + 2);
        unint64_t v19 = *((void *)v8 + 3);
        unint64_t v20 = v18 + 1;
        if (v18 >= v19 >> 1)
        {
          unint64_t v25 = v18 + 1;
          int64_t v22 = v8;
          unint64_t v23 = *((void *)v8 + 2);
          char v24 = sub_186F3CB8C((char *)(v19 > 1), v18 + 1, 1, v22);
          unint64_t v18 = v23;
          unint64_t v20 = v25;
          uint64_t v8 = v24;
        }

        *((void *)v8 + 2) = v20;
        v8[v18 + 32] = 0;
        *int64_t v5 = v8;
        uint64_t v21 = swift_unknownObjectRetain();
        sub_186F87654(v21, v7, a3, v6);
        return swift_unknownObjectRelease();
      }
    }

    uint64_t v8 = sub_186F3CB8C(0LL, *((void *)v8 + 2) + 1LL, 1, v8);
    *int64_t v5 = v8;
    goto LABEL_11;
  }

  unint64_t v6 = (unint64_t)*a5;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *int64_t v5 = v6;
  if ((result & 1) == 0)
  {
LABEL_16:
    uint64_t result = (uint64_t)sub_186F3CB8C(0LL, *(void *)(v6 + 16) + 1LL, 1, (char *)v6);
    unint64_t v6 = result;
    *int64_t v5 = result;
  }

  unint64_t v11 = *(void *)(v6 + 16);
  unint64_t v10 = *(void *)(v6 + 24);
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)sub_186F3CB8C((char *)(v10 > 1), v11 + 1, 1, (char *)v6);
    unint64_t v6 = result;
  }

  *(void *)(v6 + 16) = v11 + 1;
  *(_BYTE *)(v6 + v11 + 32) = 0;
  *int64_t v5 = v6;
  return result;
}

unint64_t sub_186F85120(unint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  unint64_t v2 = 71 - __clz(a1);
  uint64_t v3 = v2 >> 3;
  unint64_t result = sub_186F872EC(v2 >> 3, v2 >> 3, 0LL, a1, v2);
  if (v3 >= 1) {
    uint64_t v6 = 1LL;
  }
  else {
    uint64_t v6 = v3;
  }
  uint64_t v7 = 8 * v3;
  char v8 = 16 - 8 * v3;
  unint64_t v9 = v3;
  while (1)
  {
    if (v9 < 2) {
      return v6;
    }
    unint64_t v15 = v9;
    uint64_t v10 = v7 - 8;
    if (v7 - 8 < 0) {
      unint64_t v11 = a1 << ((v8 - 8) & 0x38);
    }
    else {
      unint64_t v11 = a1 >> (v10 & 0x38);
    }
    unint64_t v9 = v15 - 1;
    if (v15 - 1 > v3) {
      break;
    }
    BOOL v12 = v7 < 16;
    unint64_t v13 = a1 >> ((v7 + 48) & 0x38);
    if (v12) {
      unint64_t v13 = a1 << (v8 & 0x38);
    }
    char v14 = result ^ v13;
    v8 += 8;
    uint64_t v7 = v10;
    if (v14 < 0) {
      return v15;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_186F85224(uint64_t a1, uint64_t a2, int64_t a3, unint64_t a4)
{
  int64_t v4 = a4 >> 1;
  if ((uint64_t)(a4 >> 1) < a3)
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }

  unint64_t v5 = a4;
  if (a4 >> 1 == a3) {
    return swift_unknownObjectRetain();
  }
  if (v4 <= a3)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }

  int v6 = *(unsigned __int8 *)(a2 + a3);
  if (v6 != 255 && v6 != 0) {
    return swift_unknownObjectRetain();
  }
  if (!__OFSUB__(v4, a3))
  {
    if (v4 - a3 >= 2)
    {
      while (1)
      {
        int64_t v8 = v5 >> 1;
        if (__OFSUB__(v4, a3)) {
          goto LABEL_34;
        }
        int64_t v9 = a4 >> 1;
        if (v4 != a3)
        {
          if (v4 <= a3) {
            goto LABEL_35;
          }
          int64_t v9 = a3 + 1;
        }

        if (v8 < v9) {
          goto LABEL_36;
        }
        if (v9 < a3) {
          goto LABEL_37;
        }
        if (v4 < a3) {
          goto LABEL_39;
        }
        if (v9 == v4) {
          goto LABEL_40;
        }
        if (v9 >= v4) {
          goto LABEL_41;
        }
        int64_t v10 = a4 >> 1;
        if (v4 != a3)
        {
          int64_t v10 = a3 + 1;
          if (__OFADD__(a3, 1LL)) {
            goto LABEL_47;
          }
          if (v4 < v10) {
            goto LABEL_42;
          }
        }

        if (v8 < v10) {
          goto LABEL_43;
        }
        if (v10 < a3) {
          goto LABEL_44;
        }
        if (__OFSUB__(v4, v10)) {
          goto LABEL_45;
        }
        unint64_t v5 = v5 & 1 | a4 & 0xFFFFFFFFFFFFFFFELL;
        if (v10 != v4)
        {
          a3 = v10;
          if (v4 - v10 >= 2) {
            continue;
          }
        }

        return swift_unknownObjectRetain();
      }

      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }

    return swift_unknownObjectRetain();
  }

LABEL_49:
  __break(1u);
  return result;
}

uint64_t P256.Signing.ECDSASignature.init<A>(derRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X8>)
{
  return sub_186F853D8(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1895F9B10], a3);
}

uint64_t P384.Signing.ECDSASignature.init<A>(derRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X8>)
{
  return sub_186F853D8(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1895F9B18], a3);
}

uint64_t sub_186F853D8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X3>, __int128 *a4@<X8>)
{
  uint64_t v9 = *(void *)(a2 - 8);
  double v10 = MEMORY[0x1895F8858](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))( (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  a2,  v10);
  uint64_t v12 = sub_186F87CF4();
  sub_186F6BA0C(v12, v12 + 32, 0LL, (2LL * *(void *)(v12 + 16)) | 1, (uint64_t)v49);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
    return swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  sub_186F3B4A4((uint64_t)&v50, (uint64_t)v51);
  sub_186F4CDF8((uint64_t)v51);
  uint64_t v14 = sub_186F859D8(v49, 0x30u, (uint64_t *)&v43);
  __int128 v40 = v43;
  uint64_t v15 = v44;
  unint64_t v41 = v45;
  __int128 v39 = v46;
  uint64_t v38 = v47;
  unint64_t v37 = v48;
  uint64_t result = a3(v14);
  if (!result) {
    goto LABEL_34;
  }
  uint64_t v16 = result;
  uint64_t v17 = (void *)objc_opt_self();
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  uint64_t v45 = v18;
  *(void *)&__int128 v43 = v16;
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v17, sel_groupOrderByteCountForCP_, (void)v42);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v36 = v15;
  BOOL v19 = __OFSUB__(v41 >> 1, v15);
  uint64_t v20 = (v41 >> 1) - v15;
  if (v19)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if (result < v20)
  {
LABEL_9:
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v21 = 1;
    *(_BYTE *)(v21 + 4) = 1;
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_186F5CCB4( (uint64_t)v49,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  }

  if (__OFSUB__(v37 >> 1, v38)) {
    goto LABEL_23;
  }
  uint64_t v34 = (v37 >> 1) - v38;
  __int128 v42 = xmmword_186F88B50;
  uint64_t v45 = v18;
  *(void *)&__int128 v43 = v16;
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v17, sel_groupOrderByteCountForCP_, v52);
  if (result < 0) {
    goto LABEL_24;
  }
  id v35 = v17;
  if (result + 0x4000000000000000LL < 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  sub_186F87A48();
  uint64_t v45 = v18;
  *(void *)&__int128 v43 = v16;
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v35, sel_groupOrderByteCountForCP_, v52);
  if (result < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  BOOL v19 = __OFSUB__(result, v20);
  result -= v20;
  if (v19)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v22 = v36;
  if (result < 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  sub_186F5D744();
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B52A8);
  uint64_t v45 = v23;
  unint64_t v33 = sub_186F4CE30();
  *(void *)&__int128 v46 = v33;
  uint64_t v24 = swift_allocObject();
  *(void *)&__int128 v43 = v24;
  *(_OWORD *)(v24 + 16) = v40;
  unint64_t v25 = v41;
  *(void *)(v24 + 32) = v22;
  *(void *)(v24 + 40) = v25;
  uint64_t v36 = v23;
  uint64_t result = (uint64_t)__swift_project_boxed_opaque_existential_1(&v43, v23);
  uint64_t v26 = *(void *)(result + 16);
  uint64_t v27 = *(void *)(result + 24) >> 1;
  BOOL v19 = __OFSUB__(v27, v26);
  uint64_t v28 = v27 - v26;
  if (v19)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  unint64_t v41 = *(void *)(result + 8) + v26 + v28;
  unint64_t v29 = v40;
  swift_unknownObjectRetain_n();
  sub_186F87A54();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v43);
  unint64_t v41 = v29;
  swift_unknownObjectRelease();
  uint64_t v45 = v18;
  *(void *)&__int128 v43 = v16;
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v35, sel_groupOrderByteCountForCP_, v52);
  if (result < 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  BOOL v19 = __OFSUB__(result, v34);
  result -= v34;
  if (v19)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  if ((result & 0x8000000000000000LL) == 0)
  {
    sub_186F5D744();
    uint64_t v30 = v36;
    uint64_t v45 = v36;
    *(void *)&__int128 v46 = v33;
    uint64_t v31 = swift_allocObject();
    *(void *)&__int128 v43 = v31;
    *(_OWORD *)(v31 + 16) = v39;
    unint64_t v32 = v37;
    *(void *)(v31 + 32) = v38;
    *(void *)(v31 + 40) = v32;
    uint64_t result = (uint64_t)__swift_project_boxed_opaque_existential_1(&v43, v30);
    if (!__OFSUB__(*(void *)(result + 24) >> 1, *(void *)(result + 16)))
    {
      swift_unknownObjectRetain_n();
      sub_186F87A54();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v43);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      sub_186F5CCB4( (uint64_t)v49,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
      uint64_t result = swift_unknownObjectRelease();
      *a4 = v42;
      return result;
    }

    goto LABEL_33;
  }

uint64_t sub_186F859D8@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t *a3@<X8>)
{
  if (*a1 != a2
    || (sub_186F3B4A4((uint64_t)(a1 + 8), (uint64_t)v39), sub_186F3B4A4((uint64_t)v39, (uint64_t)&v40), (v41 & 1) != 0))
  {
    sub_186F36690();
    swift_allocError();
    *int v6 = 1;
    swift_willThrow();
    uint64_t v7 = (uint64_t)a1;
    return sub_186F5CCB4( v7,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  }

  sub_186F65184((uint64_t)v27);
  sub_186F6E394((uint64_t)v27, (uint64_t)v35);
  if (v36 == 255)
  {
    sub_186F36690();
    swift_allocError();
    *uint64_t v22 = 3;
    sub_186F5CCB4( (uint64_t)a1,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
    sub_186F5CCB4( (uint64_t)a1,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
    swift_willThrow();
    goto LABEL_11;
  }

  v37[0] = v35[0];
  v37[1] = v35[1];
  void v37[2] = v35[2];
  unsigned __int8 v38 = v36;
  sub_186F5CCB4( (uint64_t)a1,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
  sub_186F5CCB4( (uint64_t)a1,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRetain);
  uint64_t v8 = sub_186F70014((unsigned __int8 *)v37, 2u);
  if (v3)
  {
LABEL_11:
    swift_unknownObjectRelease();
    sub_186F5CCB4( (uint64_t)a1,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
    goto LABEL_12;
  }

  uint64_t v12 = v8;
  uint64_t v13 = v9;
  uint64_t v14 = v10;
  uint64_t v15 = v11;
  sub_186F65184((uint64_t)v28);
  sub_186F6E394((uint64_t)v28, (uint64_t)v31);
  if (v32 == 255)
  {
    sub_186F36690();
    swift_allocError();
    *uint64_t v23 = 3;
    swift_willThrow();
    swift_unknownObjectRelease();
    goto LABEL_11;
  }

  v33[0] = v31[0];
  v33[1] = v31[1];
  id v33[2] = v31[2];
  unsigned __int8 v34 = v32;
  uint64_t v16 = sub_186F70014((unsigned __int8 *)v33, 2u);
  uint64_t v18 = v17;
  uint64_t v25 = v20;
  uint64_t v26 = v19;
  uint64_t v42 = v16;
  sub_186F65184((uint64_t)v29);
  sub_186F367A0((uint64_t)v29);
  sub_186F6E394((uint64_t)v29, (uint64_t)v30);
  if (v30[48] != 255)
  {
    sub_186F36690();
    swift_allocError();
    *uint64_t v21 = 3;
    swift_willThrow();
    sub_186F5CCB4( (uint64_t)a1,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
LABEL_12:
    uint64_t v7 = (uint64_t)a1;
    return sub_186F5CCB4( v7,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  }

  swift_unknownObjectRelease();
  sub_186F5CCB4( (uint64_t)a1,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  uint64_t result = sub_186F5CCB4( (uint64_t)a1,  (void (*)(void, void, void, void, void, void))j__swift_unknownObjectRelease);
  *a3 = v12;
  a3[1] = v13;
  a3[2] = v14;
  a3[3] = v15;
  a3[4] = v42;
  a3[5] = v18;
  a3[6] = v26;
  a3[7] = v25;
  return result;
}

void sub_186F85D14(uint64_t a1, uint64_t a2)
{
}

void sub_186F85D34(uint64_t a1, uint64_t a2)
{
}

void sub_186F85D50(uint64_t a1, uint64_t a2)
{
}

void sub_186F85D6C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_186F85DB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = a3();
  if (!v6)
  {
    __break(1u);
    JUMPOUT(0x186F85ED8LL);
  }

  uint64_t v7 = v6;
  uint64_t v8 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v8, sel_groupOrderByteCountForCP_, v11, v7);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (result + 0x4000000000000000LL < 0)
  {
LABEL_8:
    __break(1u);
    JUMPOUT(0x186F85ECCLL);
  }

  if (BYTE6(v3) == 2 * result)
  {
    *unint64_t v5 = v4;
    v5[1] = v3;
  }

  else
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v10 = 1;
    *(_BYTE *)(v10 + 4) = 1;
    swift_willThrow();
    return sub_186F33C98(v4, v3);
  }

  return result;
}

void sub_186F85EE8()
{
  __asm { BR              X10 }

uint64_t sub_186F85F1C()
{
  uint64_t v2 = sub_186F87A60();
  if (BYTE6(v1) < (uint64_t)((v1 >> 49) & 0x7F))
  {
    __break(1u);
    JUMPOUT(0x186F85FF0LL);
  }

  sub_186F87A60();
  sub_186F33C98(v0, v1);
  return v2;
}

uint64_t P256.Signing.ECDSASignature.rawRepresentation.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_186F33D20(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t P256.Signing.ECDSASignature.rawRepresentation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_186F33C98(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t (*P256.Signing.ECDSASignature.rawRepresentation.modify())()
{
  return nullsub_1;
}

uint64_t P256.Signing.ECDSASignature.init<A>(rawRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_186F86B30(a1, a2, MEMORY[0x1895F9B10], a3);
}

uint64_t P256.Signing.ECDSASignature.withUnsafeBytes<A>(_:)()
{
  return sub_186F87A78();
}

void P256.Signing.ECDSASignature.derRepresentation.getter()
{
  __asm { BR              X9 }

uint64_t sub_186F8616C()
{
  uint64_t v1 = sub_186F87A60();
  unint64_t v3 = v2;
  sub_186F6DC48(v1, v2);
  uint64_t v4 = sub_186F33C98(v1, v3);
  return ((uint64_t (*)(uint64_t))((char *)&loc_186F86214 + dword_186F863CC[v0]))(v4);
}

uint64_t sub_186F86224()
{
  if (BYTE6(v2) < v1)
  {
    __break(1u);
    JUMPOUT(0x186F86394LL);
  }

  uint64_t v7 = sub_186F87A60();
  unint64_t v9 = v8;
  sub_186F33C98(v0, v2);
  sub_186F6DC48(v7, v9);
  uint64_t v11 = v10;
  sub_186F33C98(v7, v9);
  uint64_t v12 = (2LL * *(void *)(v11 + 16)) | 1;
  swift_retain();
  swift_retain();
  uint64_t v13 = sub_186F3CB8C(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  *(void *)(v6 - 96) = v12;
  *(void *)(v6 - 88) = v13;
  *(void *)(v6 - 152) = v3;
  *(void *)(v6 - 144) = v4;
  *(void *)(v6 - 136) = 0LL;
  *(void *)(v6 - 128) = v5;
  *(void *)(v6 - 120) = v11;
  *(void *)(v6 - 112) = v11 + 32;
  *(void *)(v6 - 104) = 0LL;
  MEMORY[0x1895F8858](v13);
  void v16[2] = v6 - 152;
  sub_186F68B98(48, sub_186F8776C, (uint64_t)v16);
  uint64_t v14 = sub_186F3A07C(*(void *)(v6 - 88));
  swift_bridgeObjectRelease();
  sub_186F33C98(v0, v2);
  swift_release_n();
  swift_release_n();
  return v14;
}

uint64_t sub_186F863DC()
{
  return P256.Signing.ECDSASignature.withUnsafeBytes<A>(_:)();
}

uint64_t P256.Signing.PrivateKey.signature<A>(for:)()
{
  return sub_186F837E8();
}

uint64_t P256.Signing.PrivateKey.signature<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v7 = *v3;
  unint64_t v8 = sub_186F450F8();
  static HashFunction.hash<A>(data:)(a1, (uint64_t)&type metadata for SHA256, a2, v8, a3);
  swift_beginAccess();
  uint64_t v9 = v7 + 32 + *(void *)(v7 + 16);
  __int128 v11 = v14;
  uint64_t v12 = v15;
  uint64_t v13 = v16;
  return sub_186F8380C((uint64_t)&v11, (uint64_t)&v14, v7 + 32, v9);
}

uint64_t P256.Signing.PublicKey.isValidSignature<A>(_:for:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_186F870F8(a1, a2, a3, a4, (uint64_t (*)(__int128 *))sub_186F83834);
}

uint64_t P256.Signing.PublicKey.isValidSignature<A>(_:for:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v10 = *v4;
  unint64_t v11 = sub_186F450F8();
  static HashFunction.hash<A>(data:)(a2, (uint64_t)&type metadata for SHA256, a3, v11, a4);
  unsigned __int8 v16 = 0;
  v14[0] = v17;
  v14[1] = v18;
  sub_186F83840((uint64_t)v14, (uint64_t)&v15, v8, v9, v10 + 32, (uint64_t)&v16);
  return (v13 == 0) & v16;
}

uint64_t (*P384.Signing.ECDSASignature.rawRepresentation.modify())()
{
  return nullsub_1;
}

uint64_t P384.Signing.ECDSASignature.init<A>(rawRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_186F86B30(a1, a2, MEMORY[0x1895F9B18], a3);
}

void P384.Signing.ECDSASignature.derRepresentation.getter()
{
  __asm { BR              X9 }

uint64_t sub_186F86674()
{
  uint64_t v1 = sub_186F87A60();
  unint64_t v3 = v2;
  sub_186F6DC48(v1, v2);
  uint64_t v4 = sub_186F33C98(v1, v3);
  return ((uint64_t (*)(uint64_t))((char *)&loc_186F8671C + dword_186F868D4[v0]))(v4);
}

uint64_t sub_186F8672C()
{
  if (BYTE6(v2) < v1)
  {
    __break(1u);
    JUMPOUT(0x186F8689CLL);
  }

  uint64_t v7 = sub_186F87A60();
  unint64_t v9 = v8;
  sub_186F33C98(v0, v2);
  sub_186F6DC48(v7, v9);
  uint64_t v11 = v10;
  sub_186F33C98(v7, v9);
  uint64_t v12 = (2LL * *(void *)(v11 + 16)) | 1;
  swift_retain();
  swift_retain();
  uint64_t v13 = sub_186F3CB8C(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  *(void *)(v6 - 96) = v12;
  *(void *)(v6 - 88) = v13;
  *(void *)(v6 - 152) = v3;
  *(void *)(v6 - 144) = v4;
  *(void *)(v6 - 136) = 0LL;
  *(void *)(v6 - 128) = v5;
  *(void *)(v6 - 120) = v11;
  *(void *)(v6 - 112) = v11 + 32;
  *(void *)(v6 - 104) = 0LL;
  MEMORY[0x1895F8858](v13);
  void v16[2] = v6 - 152;
  sub_186F68B98(48, sub_186F878CC, (uint64_t)v16);
  uint64_t v14 = sub_186F3A07C(*(void *)(v6 - 88));
  swift_bridgeObjectRelease();
  sub_186F33C98(v0, v2);
  swift_release_n();
  swift_release_n();
  return v14;
}

uint64_t P384.Signing.PrivateKey.signature<A>(for:)()
{
  return sub_186F83890();
}

uint64_t P384.Signing.PrivateKey.signature<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v7 = *v3;
  unint64_t v8 = sub_186F45140();
  static HashFunction.hash<A>(data:)(a1, (uint64_t)&type metadata for SHA384, a2, v8, a3);
  swift_beginAccess();
  uint64_t v9 = v7 + 32 + *(void *)(v7 + 16);
  v11[0] = v14[0];
  v11[1] = v14[1];
  uint64_t v12 = v15;
  uint64_t v13 = v16;
  return sub_186F838B4((uint64_t)v11, (uint64_t)v14, v7 + 32, v9);
}

uint64_t P384.Signing.PublicKey.isValidSignature<A>(_:for:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_186F870F8(a1, a2, a3, a4, (uint64_t (*)(__int128 *))sub_186F83834);
}

uint64_t P384.Signing.PublicKey.isValidSignature<A>(_:for:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v10 = *v4;
  unint64_t v11 = sub_186F45140();
  static HashFunction.hash<A>(data:)(a2, (uint64_t)&type metadata for SHA384, a3, v11, a4);
  unsigned __int8 v16 = 0;
  v14[0] = v17;
  v14[1] = v18;
  _OWORD v14[2] = v19;
  sub_186F83840((uint64_t)v14, (uint64_t)&v15, v8, v9, v10 + 32, (uint64_t)&v16);
  return (v13 == 0) & v16;
}

uint64_t (*P521.Signing.ECDSASignature.rawRepresentation.modify())()
{
  return nullsub_1;
}

uint64_t P521.Signing.ECDSASignature.init<A>(rawRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_186F86B30(a1, a2, MEMORY[0x1895F9B20], a3);
}

uint64_t sub_186F86B30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v20 = a4;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_186F87D3C();
  uint64_t result = a3();
  if (!result) {
    goto LABEL_9;
  }
  uint64_t v12 = result;
  uint64_t v13 = (void *)objc_opt_self();
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_18C4B53D8);
  uint64_t v21 = v12;
  swift_dynamicCast();
  uint64_t result = (uint64_t)objc_msgSend(v13, sel_groupOrderByteCountForCP_, v23);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (result + 0x4000000000000000LL < 0)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }

  if (v10 == 2 * result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a2);
    uint64_t v14 = sub_186F87AE4();
    uint64_t v16 = v15;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
    __int128 v17 = v20;
    *uint64_t v20 = v14;
    v17[1] = v16;
  }

  else
  {
    sub_186F35D6C();
    swift_allocError();
    *(_DWORD *)uint64_t v18 = 1;
    *(_BYTE *)(v18 + 4) = 1;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
  }

  return result;
}

uint64_t P521.Signing.ECDSASignature.init<A>(derRepresentation:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X8>)
{
  return sub_186F853D8(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1895F9B20], a3);
}

void P521.Signing.ECDSASignature.derRepresentation.getter()
{
  __asm { BR              X9 }

uint64_t sub_186F86D48()
{
  uint64_t v1 = sub_186F87A60();
  unint64_t v3 = v2;
  sub_186F6DC48(v1, v2);
  uint64_t v4 = sub_186F33C98(v1, v3);
  return ((uint64_t (*)(uint64_t))((char *)&loc_186F86DF0 + *((int *)qword_186F86FA8 + v0)))(v4);
}

uint64_t sub_186F86E00()
{
  if (BYTE6(v2) < v1)
  {
    __break(1u);
    JUMPOUT(0x186F86F70LL);
  }

  uint64_t v7 = sub_186F87A60();
  unint64_t v9 = v8;
  sub_186F33C98(v0, v2);
  sub_186F6DC48(v7, v9);
  uint64_t v11 = v10;
  sub_186F33C98(v7, v9);
  uint64_t v12 = (2LL * *(void *)(v11 + 16)) | 1;
  swift_retain();
  swift_retain();
  uint64_t v13 = sub_186F3CB8C(0LL, 1024LL, 0, MEMORY[0x18961AFE8]);
  *(void *)(v6 - 96) = v12;
  *(void *)(v6 - 88) = v13;
  *(void *)(v6 - 152) = v3;
  *(void *)(v6 - 144) = v4;
  *(void *)(v6 - 136) = 0LL;
  *(void *)(v6 - 128) = v5;
  *(void *)(v6 - 120) = v11;
  *(void *)(v6 - 112) = v11 + 32;
  *(void *)(v6 - 104) = 0LL;
  MEMORY[0x1895F8858](v13);
  void v16[2] = v6 - 152;
  sub_186F68B98(48, sub_186F878CC, (uint64_t)v16);
  uint64_t v14 = sub_186F3A07C(*(void *)(v6 - 88));
  swift_bridgeObjectRelease();
  sub_186F33C98(v0, v2);
  swift_release_n();
  swift_release_n();
  return v14;
}

uint64_t P521.Signing.PrivateKey.signature<A>(for:)()
{
  return sub_186F84164();
}

uint64_t P521.Signing.PrivateKey.signature<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v7 = *v3;
  unint64_t v8 = sub_186F45188();
  static HashFunction.hash<A>(data:)(a1, (uint64_t)&type metadata for SHA512, a2, v8, a3);
  swift_beginAccess();
  uint64_t v9 = v7 + 32 + *(void *)(v7 + 16);
  v11[0] = v14[0];
  v11[1] = v14[1];
  _OWORD v11[2] = v14[2];
  uint64_t v12 = v15;
  uint64_t v13 = v16;
  return sub_186F84228((uint64_t)v11, (uint64_t)v14, v7 + 32, v9);
}

uint64_t P521.Signing.PublicKey.isValidSignature<A>(_:for:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_186F870F8(a1, a2, a3, a4, (uint64_t (*)(__int128 *))sub_186F83834);
}

uint64_t sub_186F870F8( __int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(__int128 *))
{
  uint64_t v8 = *v5;
  __int128 v7 = *a1;
  return a5(&v7) & 1;
}

uint64_t P521.Signing.PublicKey.isValidSignature<A>(_:for:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v10 = *v4;
  unint64_t v11 = sub_186F45188();
  static HashFunction.hash<A>(data:)(a2, (uint64_t)&type metadata for SHA512, a3, v11, a4);
  unsigned __int8 v16 = 0;
  v14[0] = v17;
  v14[1] = v18;
  _OWORD v14[2] = v19;
  _OWORD v14[3] = v20;
  sub_186F83840((uint64_t)v14, (uint64_t)&v15, v8, v9, v10 + 32, (uint64_t)&v16);
  return (v13 == 0) & v16;
}

uint64_t sub_186F87228()
{
  return sub_186F87A54();
}

uint64_t (*sub_186F87250@<X0>( _BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, _BYTE *a6@<X8>))()
{
  if (a3 < a2 || a4 >= a2)
  {
    __break(1u);
    goto LABEL_13;
  }

  int64_t v6 = (unint64_t)(a2 - 0x1000000000000001LL) >> 61;
  if (v6 != 7)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  a6 = a1;
  char v7 = 8 * a2;
  int64_t v6 = 8 * a2 - 8;
  if (v6 < -64)
  {
    LOBYTE(v8) = 0;
    goto LABEL_11;
  }

  if (v6 > 64)
  {
LABEL_7:
    LOBYTE(v8) = 0;
    goto LABEL_11;
  }

  if ((v6 & 0x8000000000000000LL) == 0)
  {
    if ((unint64_t)v6 < 0x40)
    {
      unint64_t v8 = a5 >> (v6 & 0x38);
      goto LABEL_11;
    }

    goto LABEL_7;
  }

unint64_t sub_186F872EC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, int64_t a5@<X8>)
{
  if (a2 < a1 || a3 >= a1)
  {
    __break(1u);
    goto LABEL_12;
  }

  a5 = (unint64_t)(a1 - 0x1000000000000001LL) >> 61;
  if (a5 != 7)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    uint64_t v7 = a4 << ((8 - v5) & 0x38);
    else {
      return v7;
    }
  }

  char v5 = 8 * a1;
  a5 = 8 * a1 - 8;
  if (a5 < -64) {
    return 0LL;
  }
  if (a5 > 64) {
    return 0LL;
  }
  if (a5 < 0) {
    goto LABEL_13;
  }
  return a4 >> (a5 & 0x38);
}

int64_t *sub_186F87374( int64_t *result, _BYTE *a2, int64_t a3, int64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2)
  {
    if (!a3) {
      goto LABEL_7;
    }
    if (a3 < 0) {
      goto LABEL_36;
    }
    if (__OFSUB__(a4, a5))
    {
LABEL_37:
      __break(1u);
      return result;
    }

    if (a4 != a5)
    {
      if (a4 <= a5) {
        goto LABEL_33;
      }
      uint64_t v7 = 0LL;
      int64_t v8 = (71 - __clz(a6)) >> 3;
      char v9 = 8 - 8 * a4;
      uint64_t v10 = 8 * a4 - 8;
      while (1)
      {
        if ((unint64_t)(a4 - 0x1000000000000001LL + v7) >> 61 != 7)
        {
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }

        if (v10 < -64)
        {
LABEL_13:
          LOBYTE(v11) = 0;
          if (v8 < a4) {
            goto LABEL_34;
          }
          goto LABEL_22;
        }

        if (v10 > 64) {
          break;
        }
        if (v10 < 0)
        {
          unint64_t v11 = a6 << (v9 & 0x38);
        }

        else
        {
          unint64_t v11 = a6 >> (v10 & 0x38);
        }

        if (v8 < a4) {
          goto LABEL_34;
        }
LABEL_22:
        if (a4 + v7 < 1) {
          goto LABEL_34;
        }
        *a2 = v11;
        if (!(a3 - 1 + v7))
        {
          uint64_t v6 = a4 + v7 - 1;
          goto LABEL_8;
        }

        if (__OFSUB__(a4 + v7 - 1, a5)) {
          goto LABEL_35;
        }
        if (!(a4 - a5 - 1 + v7))
        {
          uint64_t v6 = a5;
          a3 = a4 - a5;
          goto LABEL_8;
        }

        ++a2;
        --v7;
        v9 += 8;
        v10 -= 8LL;
        if (a4 + v7 <= a5) {
          goto LABEL_33;
        }
      }

      LOBYTE(v11) = 0;
      if (v8 < a4) {
        goto LABEL_34;
      }
      goto LABEL_22;
    }
  }

  a3 = 0LL;
LABEL_7:
  uint64_t v6 = a4;
LABEL_8:
  *uint64_t result = a4;
  result[1] = a5;
  result[2] = a6;
  result[3] = v6;
  return (int64_t *)a3;
}

uint64_t sub_186F874D4(char **a1, __int128 *a2)
{
  uint64_t v4 = *((void *)a2 + 6);
  uint64_t v5 = *((void *)a2 + 7);
  __int128 v6 = a2[1];
  __int128 v11 = *a2;
  __int128 v12 = v6;
  uint64_t v10 = &v11;
  sub_186F6B888(2, a1, sub_186F8788C, (uint64_t)v9);
  __int128 v11 = a2[2];
  *(void *)&__int128 v12 = v4;
  *((void *)&v12 + 1) = v5;
  void v8[2] = &v11;
  return sub_186F6B888(2, a1, sub_186F8788C, (uint64_t)v8);
}

void sub_186F87560(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v7 = *v4;
  int64_t v8 = *((void *)*v4 + 2);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((void *)v7 + 3) >> 1) {
    goto LABEL_8;
  }
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9) {
        int64_t v13 = v8 + v6;
      }
      else {
        int64_t v13 = v8;
      }
      char isUniquelyReferenced_nonNull_native = sub_186F3CCBC(isUniquelyReferenced_nonNull_native, v13, 1, v7);
      uint64_t v7 = isUniquelyReferenced_nonNull_native;
      if (v5 != a3) {
        goto LABEL_12;
      }
    }

    goto LABEL_16;
  }

void sub_186F87654(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  int64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v7 = *v4;
  int64_t v8 = *((void *)*v4 + 2);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((void *)v7 + 3) >> 1) {
    goto LABEL_8;
  }
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9) {
        int64_t v13 = v8 + v6;
      }
      else {
        int64_t v13 = v8;
      }
      char isUniquelyReferenced_nonNull_native = sub_186F3CB8C(isUniquelyReferenced_nonNull_native, v13, 1, v7);
      uint64_t v7 = isUniquelyReferenced_nonNull_native;
      if (v5 != a3) {
        goto LABEL_12;
      }
    }

    goto LABEL_16;
  }

uint64_t sub_186F87748()
{
  return swift_deallocObject();
}

uint64_t sub_186F8776C(char **a1)
{
  return sub_186F874D4(a1, *(__int128 **)(v1 + 16));
}

_UNKNOWN **sub_186F87784()
{
  return &off_189FB07D0;
}

_UNKNOWN **sub_186F87790()
{
  return &off_18C6B1A78;
}

_UNKNOWN **sub_186F8779C()
{
  return &off_18C6B1CC0;
}

_UNKNOWN **sub_186F877A8()
{
  return &off_18C6B1CF0;
}

_UNKNOWN **sub_186F877B4()
{
  return &off_18C6B1CD8;
}

_UNKNOWN **sub_186F877C0()
{
  return &off_189FB02E8;
}

_UNKNOWN **sub_186F877CC()
{
  return &off_189FB07F8;
}

_UNKNOWN **sub_186F877D8()
{
  return &off_18C6B1AF8;
}

_UNKNOWN **sub_186F877E4()
{
  return &off_18C6B1D70;
}

_UNKNOWN **sub_186F877F0()
{
  return &off_18C6B1DA0;
}

_UNKNOWN **sub_186F877FC()
{
  return &off_18C6B1D88;
}

_UNKNOWN **sub_186F87808()
{
  return &off_189FB0388;
}

_UNKNOWN **sub_186F87814()
{
  return &off_189FB0820;
}

_UNKNOWN **sub_186F87820()
{
  return &off_18C6B1B78;
}

_UNKNOWN **sub_186F8782C()
{
  return &off_18C6B1E20;
}

_UNKNOWN **sub_186F87838()
{
  return &off_18C6B1E50;
}

_UNKNOWN **sub_186F87844()
{
  return &off_18C6B1E38;
}

_UNKNOWN **sub_186F87850()
{
  return &off_189FB0428;
}

ValueMetadata *type metadata accessor for P256.Signing.ECDSASignature()
{
  return &type metadata for P256.Signing.ECDSASignature;
}

ValueMetadata *type metadata accessor for P384.Signing.ECDSASignature()
{
  return &type metadata for P384.Signing.ECDSASignature;
}

ValueMetadata *type metadata accessor for P521.Signing.ECDSASignature()
{
  return &type metadata for P521.Signing.ECDSASignature;
}

uint64_t sub_186F8788C(char **a1)
{
  return sub_186F878A0(a1);
}

uint64_t sub_186F878A0(char **a1)
{
  return sub_186F84F64( **(void **)(v1 + 16),  *(void *)(*(void *)(v1 + 16) + 8LL),  *(void *)(*(void *)(v1 + 16) + 16LL),  *(void *)(*(void *)(v1 + 16) + 24LL),  a1);
}

uint64_t sub_186F878CC(char **a1)
{
  return sub_186F8776C(a1);
}

uint64_t P384.Signing.ECDSASignature.withUnsafeBytes<A>(_:)()
{
  return P256.Signing.ECDSASignature.withUnsafeBytes<A>(_:)();
}

uint64_t P521.Signing.ECDSASignature.withUnsafeBytes<A>(_:)()
{
  return P256.Signing.ECDSASignature.withUnsafeBytes<A>(_:)();
}

uint64_t sub_186F87910()
{
  return MEMORY[0x189606158]();
}

uint64_t sub_186F8791C()
{
  return MEMORY[0x189606160]();
}

uint64_t sub_186F87928()
{
  return MEMORY[0x189606168]();
}

uint64_t sub_186F87934()
{
  return MEMORY[0x189606170]();
}

uint64_t sub_186F87940()
{
  return MEMORY[0x189606178]();
}

uint64_t sub_186F8794C()
{
  return MEMORY[0x189606180]();
}

uint64_t sub_186F87958()
{
  return MEMORY[0x189606188]();
}

uint64_t sub_186F87964()
{
  return MEMORY[0x1896061F0]();
}

uint64_t sub_186F87970()
{
  return MEMORY[0x189606200]();
}

uint64_t sub_186F8797C()
{
  return MEMORY[0x189606208]();
}

uint64_t sub_186F87988()
{
  return MEMORY[0x189606218]();
}

uint64_t sub_186F87994()
{
  return MEMORY[0x189606230]();
}

uint64_t sub_186F879A0()
{
  return MEMORY[0x189606240]();
}

uint64_t sub_186F879AC()
{
  return MEMORY[0x189606260]();
}

uint64_t sub_186F879B8()
{
  return MEMORY[0x189606318]();
}

uint64_t sub_186F879C4()
{
  return MEMORY[0x189606398]();
}

uint64_t sub_186F879D0()
{
  return MEMORY[0x189606940]();
}

uint64_t sub_186F879DC()
{
  return MEMORY[0x189606AF8]();
}

uint64_t sub_186F879E8()
{
  return MEMORY[0x189606B20]();
}

uint64_t sub_186F879F4()
{
  return MEMORY[0x189606B48]();
}

uint64_t sub_186F87A00()
{
  return MEMORY[0x189606B60]();
}

uint64_t sub_186F87A0C()
{
  return MEMORY[0x189606B90]();
}

uint64_t sub_186F87A18()
{
  return MEMORY[0x189606B98]();
}

uint64_t sub_186F87A24()
{
  return MEMORY[0x189606BA8]();
}

uint64_t sub_186F87A30()
{
  return MEMORY[0x189606BC0]();
}

uint64_t sub_186F87A3C()
{
  return MEMORY[0x189606BD0]();
}

uint64_t sub_186F87A48()
{
  return MEMORY[0x189606BD8]();
}

uint64_t sub_186F87A54()
{
  return MEMORY[0x189606BF0]();
}

uint64_t sub_186F87A60()
{
  return MEMORY[0x189606C18]();
}

uint64_t sub_186F87A6C()
{
  return MEMORY[0x189606C30]();
}

uint64_t sub_186F87A78()
{
  return MEMORY[0x189606C48]();
}

uint64_t sub_186F87A84()
{
  return MEMORY[0x189606C58]();
}

uint64_t sub_186F87A90()
{
  return MEMORY[0x189606C68]();
}

uint64_t sub_186F87A9C()
{
  return MEMORY[0x189606CA0]();
}

uint64_t sub_186F87AA8()
{
  return MEMORY[0x189606CA8]();
}

uint64_t sub_186F87AB4()
{
  return MEMORY[0x189606CE8]();
}

uint64_t sub_186F87AC0()
{
  return MEMORY[0x189606CF8]();
}

uint64_t sub_186F87ACC()
{
  return MEMORY[0x189606D08]();
}

uint64_t sub_186F87AD8()
{
  return MEMORY[0x189606D28]();
}

uint64_t sub_186F87AE4()
{
  return MEMORY[0x189606DB8]();
}

uint64_t sub_186F87AF0()
{
  return MEMORY[0x18961B560]();
}

uint64_t sub_186F87AFC()
{
  return MEMORY[0x18961B568]();
}

uint64_t sub_186F87B08()
{
  return MEMORY[0x18961B580]();
}

uint64_t sub_186F87B14()
{
  return MEMORY[0x189607050]();
}

uint64_t sub_186F87B20()
{
  return MEMORY[0x189607078]();
}

uint64_t sub_186F87B2C()
{
  return MEMORY[0x189617A00]();
}

uint64_t sub_186F87B38()
{
  return MEMORY[0x189617B10]();
}

uint64_t sub_186F87B44()
{
  return MEMORY[0x189617B20]();
}

uint64_t sub_186F87B50()
{
  return MEMORY[0x189617B38]();
}

uint64_t sub_186F87B5C()
{
  return MEMORY[0x189617B40]();
}

uint64_t sub_186F87B68()
{
  return MEMORY[0x189617B48]();
}

uint64_t sub_186F87B74()
{
  return MEMORY[0x189617B50]();
}

uint64_t sub_186F87B80()
{
  return MEMORY[0x189617B70]();
}

uint64_t sub_186F87B8C()
{
  return MEMORY[0x189617B80]();
}

uint64_t sub_186F87B98()
{
  return MEMORY[0x189617B88]();
}

uint64_t sub_186F87BA4()
{
  return MEMORY[0x189617BD8]();
}

uint64_t sub_186F87BB0()
{
  return MEMORY[0x1896070D8]();
}

uint64_t sub_186F87BBC()
{
  return MEMORY[0x189607100]();
}

uint64_t sub_186F87BC8()
{
  return MEMORY[0x189617D78]();
}

uint64_t sub_186F87BD4()
{
  return MEMORY[0x189617DD8]();
}

uint64_t sub_186F87BE0()
{
  return MEMORY[0x189617E28]();
}

uint64_t sub_186F87BEC()
{
  return MEMORY[0x189617E70]();
}

uint64_t sub_186F87BF8()
{
  return MEMORY[0x189617EB0]();
}

uint64_t sub_186F87C04()
{
  return MEMORY[0x189617EB8]();
}

uint64_t sub_186F87C10()
{
  return MEMORY[0x189617EC8]();
}

uint64_t sub_186F87C1C()
{
  return MEMORY[0x189617ED0]();
}

uint64_t sub_186F87C28()
{
  return MEMORY[0x189617ED8]();
}

uint64_t sub_186F87C34()
{
  return MEMORY[0x189617EE0]();
}

uint64_t sub_186F87C40()
{
  return MEMORY[0x189617F48]();
}

uint64_t sub_186F87C4C()
{
  return MEMORY[0x189618040]();
}

uint64_t sub_186F87C58()
{
  return MEMORY[0x189618048]();
}

uint64_t sub_186F87C64()
{
  return MEMORY[0x189618078]();
}

uint64_t sub_186F87C70()
{
  return MEMORY[0x189618080]();
}

uint64_t sub_186F87C7C()
{
  return MEMORY[0x1896180A8]();
}

uint64_t sub_186F87C88()
{
  return MEMORY[0x1896180E0]();
}

uint64_t sub_186F87C94()
{
  return MEMORY[0x1896180F8]();
}

uint64_t sub_186F87CA0()
{
  return MEMORY[0x189618158]();
}

uint64_t sub_186F87CAC()
{
  return MEMORY[0x1896181A0]();
}

uint64_t sub_186F87CB8()
{
  return MEMORY[0x1896071C0]();
}

uint64_t sub_186F87CC4()
{
  return MEMORY[0x1896071D0]();
}

uint64_t sub_186F87CD0()
{
  return MEMORY[0x1896071E0]();
}

uint64_t sub_186F87CDC()
{
  return MEMORY[0x1896071F0]();
}

uint64_t sub_186F87CE8()
{
  return MEMORY[0x189618390]();
}

uint64_t sub_186F87CF4()
{
  return MEMORY[0x189618438]();
}

uint64_t sub_186F87D00()
{
  return MEMORY[0x1896187F8]();
}

uint64_t sub_186F87D0C()
{
  return MEMORY[0x189618810]();
}

uint64_t sub_186F87D18()
{
  return MEMORY[0x189618818]();
}

uint64_t sub_186F87D24()
{
  return MEMORY[0x189618820]();
}

uint64_t sub_186F87D30()
{
  return MEMORY[0x189618828]();
}

uint64_t sub_186F87D3C()
{
  return MEMORY[0x189618848]();
}

uint64_t sub_186F87D48()
{
  return MEMORY[0x189618890]();
}

uint64_t sub_186F87D54()
{
  return MEMORY[0x1896188B8]();
}

uint64_t sub_186F87D60()
{
  return MEMORY[0x1896188D0]();
}

uint64_t sub_186F87D6C()
{
  return MEMORY[0x1896188F8]();
}

uint64_t sub_186F87D78()
{
  return MEMORY[0x189618940]();
}

uint64_t sub_186F87D84()
{
  return MEMORY[0x1896189A0]();
}

uint64_t sub_186F87D90()
{
  return MEMORY[0x1896189B8]();
}

uint64_t sub_186F87D9C()
{
  return MEMORY[0x1896189C8]();
}

uint64_t sub_186F87DA8()
{
  return MEMORY[0x189618A18]();
}

uint64_t sub_186F87DB4()
{
  return MEMORY[0x18961BAE0]();
}

uint64_t sub_186F87DC0()
{
  return MEMORY[0x18961BAF0]();
}

uint64_t sub_186F87DCC()
{
  return MEMORY[0x189618AC0]();
}

uint64_t sub_186F87DD8()
{
  return MEMORY[0x189618BE0]();
}

uint64_t sub_186F87DE4()
{
  return MEMORY[0x189618C08]();
}

uint64_t sub_186F87DF0()
{
  return MEMORY[0x189618C38]();
}

uint64_t sub_186F87DFC()
{
  return MEMORY[0x189618C40]();
}

uint64_t sub_186F87E08()
{
  return MEMORY[0x189618C98]();
}

uint64_t sub_186F87E14()
{
  return MEMORY[0x189618CA0]();
}

uint64_t sub_186F87E20()
{
  return MEMORY[0x189618CB0]();
}

uint64_t sub_186F87E2C()
{
  return MEMORY[0x189618D38]();
}

uint64_t sub_186F87E38()
{
  return MEMORY[0x189618D80]();
}

uint64_t sub_186F87E44()
{
  return MEMORY[0x189618D88]();
}

uint64_t sub_186F87E50()
{
  return MEMORY[0x189618E20]();
}

uint64_t sub_186F87E5C()
{
  return MEMORY[0x189618E28]();
}

uint64_t sub_186F87E68()
{
  return MEMORY[0x189618E68]();
}

uint64_t sub_186F87E74()
{
  return MEMORY[0x189618EA0]();
}

uint64_t sub_186F87E80()
{
  return MEMORY[0x189618EA8]();
}

uint64_t sub_186F87E8C()
{
  return MEMORY[0x189618EB8]();
}

uint64_t sub_186F87E98()
{
  return MEMORY[0x189618ED8]();
}

uint64_t sub_186F87EA4()
{
  return MEMORY[0x189607378]();
}

uint64_t sub_186F87EB0()
{
  return MEMORY[0x189618F50]();
}

uint64_t sub_186F87EBC()
{
  return MEMORY[0x1896190C8]();
}

uint64_t sub_186F87EC8()
{
  return MEMORY[0x1896190D0]();
}

uint64_t sub_186F87ED4()
{
  return MEMORY[0x189619100]();
}

uint64_t sub_186F87EE0()
{
  return MEMORY[0x1896191E0]();
}

uint64_t sub_186F87EEC()
{
  return MEMORY[0x1896191E8]();
}

uint64_t sub_186F87EF8()
{
  return MEMORY[0x1896191F0]();
}

uint64_t sub_186F87F04()
{
  return MEMORY[0x189619440]();
}

uint64_t sub_186F87F10()
{
  return MEMORY[0x189619448]();
}

uint64_t sub_186F87F1C()
{
  return MEMORY[0x189619668]();
}

uint64_t sub_186F87F28()
{
  return MEMORY[0x189619760]();
}

uint64_t sub_186F87F34()
{
  return MEMORY[0x189619888]();
}

uint64_t sub_186F87F40()
{
  return MEMORY[0x1896198A8]();
}

uint64_t sub_186F87F4C()
{
  return MEMORY[0x189619960]();
}

uint64_t sub_186F87F58()
{
  return MEMORY[0x189619CC8]();
}

uint64_t sub_186F87F64()
{
  return MEMORY[0x18961A010]();
}

uint64_t sub_186F87F70()
{
  return MEMORY[0x18961A050]();
}

uint64_t sub_186F87F7C()
{
  return MEMORY[0x18961A2C0]();
}

uint64_t sub_186F87F88()
{
  return MEMORY[0x18961A2E8]();
}

uint64_t sub_186F87F94()
{
  return MEMORY[0x18961A310]();
}

uint64_t sub_186F87FA0()
{
  return MEMORY[0x18961A3C0]();
}

uint64_t sub_186F87FAC()
{
  return MEMORY[0x18961A3C8]();
}

uint64_t sub_186F87FB8()
{
  return MEMORY[0x18961A3D0]();
}

uint64_t sub_186F87FC4()
{
  return MEMORY[0x18961A3D8]();
}

uint64_t sub_186F87FD0()
{
  return MEMORY[0x1896073F0]();
}

uint64_t sub_186F87FDC()
{
  return MEMORY[0x18961A680]();
}

uint64_t sub_186F87FE8()
{
  return MEMORY[0x18961A688]();
}

uint64_t sub_186F87FF4()
{
  return MEMORY[0x18961A690]();
}

uint64_t sub_186F88000()
{
  return MEMORY[0x18961A698]();
}

uint64_t sub_186F8800C()
{
  return MEMORY[0x18961A6A8]();
}

uint64_t sub_186F88018()
{
  return MEMORY[0x18961A6C0]();
}

uint64_t sub_186F88024()
{
  return MEMORY[0x18961AF88]();
}

CFDictionaryRef SecKeyCopyAttributes(SecKeyRef key)
{
  return (CFDictionaryRef)MEMORY[0x18960B420](key);
}

void bzero(void *a1, size_t a2)
{
}

uint64_t cc_cmp_safe()
{
  return MEMORY[0x1895F9750]();
}

uint64_t ccaes_cbc_encrypt_mode()
{
  return MEMORY[0x1895F9760]();
}

uint64_t ccaes_ccm_decrypt_mode()
{
  return MEMORY[0x1895F9768]();
}

uint64_t ccaes_ccm_encrypt_mode()
{
  return MEMORY[0x1895F9770]();
}

uint64_t ccaes_ecb_decrypt_mode()
{
  return MEMORY[0x1895F9780]();
}

uint64_t ccaes_ecb_encrypt_mode()
{
  return MEMORY[0x1895F9788]();
}

uint64_t ccaes_gcm_decrypt_mode()
{
  return MEMORY[0x1895F9790]();
}

uint64_t ccaes_gcm_encrypt_mode()
{
  return MEMORY[0x1895F9798]();
}

uint64_t ccccm_one_shot()
{
  return MEMORY[0x1895F97F8]();
}

uint64_t ccchacha20poly1305_aad()
{
  return MEMORY[0x1895F9808]();
}

uint64_t ccchacha20poly1305_finalize()
{
  return MEMORY[0x1895F9820]();
}

uint64_t ccchacha20poly1305_info()
{
  return MEMORY[0x1895F9828]();
}

uint64_t ccchacha20poly1305_init()
{
  return MEMORY[0x1895F9830]();
}

uint64_t ccchacha20poly1305_setnonce()
{
  return MEMORY[0x1895F9840]();
}

uint64_t ccchacha20poly1305_verify()
{
  return MEMORY[0x1895F9848]();
}

uint64_t cccmac_final_generate()
{
  return MEMORY[0x1895F9850]();
}

uint64_t cccmac_init()
{
  return MEMORY[0x1895F9858]();
}

uint64_t cccmac_update()
{
  return MEMORY[0x1895F9860]();
}

uint64_t cccurve25519_make_priv()
{
  return MEMORY[0x1895F9878]();
}

uint64_t cccurve25519_make_pub_with_rng()
{
  return MEMORY[0x1895F9888]();
}

uint64_t cccurve25519_with_rng()
{
  return MEMORY[0x1895F9890]();
}

uint64_t cccurve448()
{
  return MEMORY[0x1895F9898]();
}

uint64_t cccurve448_make_priv()
{
  return MEMORY[0x1895F98A8]();
}

uint64_t cccurve448_make_pub()
{
  return MEMORY[0x1895F98B0]();
}

uint64_t ccdigest_init()
{
  return MEMORY[0x1895F9A98]();
}

uint64_t ccdigest_update()
{
  return MEMORY[0x1895F9AA0]();
}

uint64_t ccec_compact_export_pub()
{
  return MEMORY[0x1895F9AB8]();
}

uint64_t ccec_compact_generate_key()
{
  return MEMORY[0x1895F9AC0]();
}

uint64_t ccec_compressed_x962_export_pub()
{
  return MEMORY[0x1895F9AE0]();
}

uint64_t ccec_compressed_x962_export_pub_size()
{
  return MEMORY[0x1895F9AE8]();
}

uint64_t ccec_cp_256()
{
  return MEMORY[0x1895F9B10]();
}

uint64_t ccec_cp_384()
{
  return MEMORY[0x1895F9B18]();
}

uint64_t ccec_cp_521()
{
  return MEMORY[0x1895F9B20]();
}

uint64_t ccec_der_export_priv()
{
  return MEMORY[0x1895F9B30]();
}

uint64_t ccec_der_export_priv_size()
{
  return MEMORY[0x1895F9B38]();
}

uint64_t ccec_der_import_priv()
{
  return MEMORY[0x1895F9B40]();
}

uint64_t ccec_diversify_min_entropy_len()
{
  return MEMORY[0x1895F9B50]();
}

uint64_t ccec_diversify_priv_twin()
{
  return MEMORY[0x1895F9B58]();
}

uint64_t ccec_diversify_pub_twin()
{
  return MEMORY[0x1895F9B60]();
}

uint64_t ccec_export_pub()
{
  return MEMORY[0x1895F9B68]();
}

uint64_t ccec_generate_key_deterministic()
{
  return MEMORY[0x1895F9B88]();
}

uint64_t ccec_generate_key_fips()
{
  return MEMORY[0x1895F9B90]();
}

uint64_t ccec_import_pub()
{
  return MEMORY[0x1895F9BA8]();
}

uint64_t ccec_raw_import_priv_only()
{
  return MEMORY[0x1895F9BC8]();
}

uint64_t ccec_sign_composite()
{
  return MEMORY[0x1895F9C28]();
}

uint64_t ccec_verify_composite()
{
  return MEMORY[0x1895F9C48]();
}

uint64_t ccec_x963_export()
{
  return MEMORY[0x1895F9C50]();
}

uint64_t ccec_x963_import_priv()
{
  return MEMORY[0x1895F9C58]();
}

uint64_t ccecb_init()
{
  return MEMORY[0x1895F9C80]();
}

uint64_t ccecb_one_shot()
{
  return MEMORY[0x1895F9C88]();
}

uint64_t ccecdh_compute_shared_secret()
{
  return MEMORY[0x1895F9C90]();
}

uint64_t cced25519_make_key_pair()
{
  return MEMORY[0x1895F9CE0]();
}

uint64_t cced25519_make_pub()
{
  return MEMORY[0x1895F9CF0]();
}

uint64_t cced25519_sign()
{
  return MEMORY[0x1895F9D00]();
}

uint64_t cced25519_verify()
{
  return MEMORY[0x1895F9D10]();
}

uint64_t cced448_make_key_pair()
{
  return MEMORY[0x1895F9D18]();
}

uint64_t cced448_make_pub()
{
  return MEMORY[0x1895F9D20]();
}

uint64_t cced448_sign()
{
  return MEMORY[0x1895F9D28]();
}

uint64_t cced448_verify()
{
  return MEMORY[0x1895F9D30]();
}

uint64_t ccgcm_aad()
{
  return MEMORY[0x1895F9D38]();
}

uint64_t ccgcm_finalize()
{
  return MEMORY[0x1895F9D48]();
}

uint64_t ccgcm_init()
{
  return MEMORY[0x1895F9D60]();
}

uint64_t ccgcm_set_iv()
{
  return MEMORY[0x1895F9D80]();
}

uint64_t ccgcm_update()
{
  return MEMORY[0x1895F9D88]();
}

uint64_t cckem_decapsulate()
{
  return MEMORY[0x1895F9FA0]();
}

uint64_t cckem_encapsulate()
{
  return MEMORY[0x1895F9FA8]();
}

uint64_t cckem_encapsulated_key_nbytes_info()
{
  return MEMORY[0x1895F9FB8]();
}

uint64_t cckem_export_privkey()
{
  return MEMORY[0x1895F9FC0]();
}

uint64_t cckem_export_pubkey()
{
  return MEMORY[0x1895F9FC8]();
}

uint64_t cckem_full_ctx_init()
{
  return MEMORY[0x1895F9FD0]();
}

uint64_t cckem_generate_key()
{
  return MEMORY[0x1895F9FD8]();
}

uint64_t cckem_import_privkey()
{
  return MEMORY[0x1895F9FE0]();
}

uint64_t cckem_import_pubkey()
{
  return MEMORY[0x1895F9FE8]();
}

uint64_t cckem_privkey_nbytes_info()
{
  return MEMORY[0x1895FA008]();
}

uint64_t cckem_pub_ctx_init()
{
  return MEMORY[0x1895FA010]();
}

uint64_t cckem_pubkey_nbytes_info()
{
  return MEMORY[0x1895FA020]();
}

uint64_t cckem_public_ctx()
{
  return MEMORY[0x1895FA028]();
}

uint64_t cckem_shared_key_nbytes_info()
{
  return MEMORY[0x1895FA038]();
}

uint64_t cckem_sizeof_full_ctx()
{
  return MEMORY[0x1895FA040]();
}

uint64_t cckem_sizeof_pub_ctx()
{
  return MEMORY[0x1895FA048]();
}

uint64_t ccrng()
{
  return MEMORY[0x1895FA118]();
}

uint64_t ccrng_generate_bridge()
{
  return MEMORY[0x18960F0A0]();
}

uint64_t ccsha256_di()
{
  return MEMORY[0x1895FA278]();
}

uint64_t ccsha384_di()
{
  return MEMORY[0x1895FA280]();
}

uint64_t ccsha512_di()
{
  return MEMORY[0x1895FA298]();
}

uint64_t ccwrap_auth_decrypt()
{
  return MEMORY[0x1895FA460]();
}

uint64_t ccwrap_auth_encrypt()
{
  return MEMORY[0x1895FA468]();
}

uint64_t ccwrap_unwrapped_size()
{
  return MEMORY[0x1895FA470]();
}

uint64_t ccwrap_wrapped_size()
{
  return MEMORY[0x1895FA478]();
}

uint64_t cczp_bitlen()
{
  return MEMORY[0x1895FA4B8]();
}

void free(void *a1)
{
}

uint64_t getCMACContextSize()
{
  return MEMORY[0x18960F0B0]();
}

uint64_t getContextSizeForECBMode()
{
  return MEMORY[0x18960F0B8]();
}

uint64_t getDigestSizeForDigestInfo()
{
  return MEMORY[0x18960F0C0]();
}

uint64_t getGCMCtxSize()
{
  return MEMORY[0x18960F0C8]();
}

uint64_t getccec_full_ctx_size()
{
  return MEMORY[0x18960F0D0]();
}

uint64_t getccec_pub_ctx_size()
{
  return MEMORY[0x18960F0D8]();
}

uint64_t init_ccec_ctx_full()
{
  return MEMORY[0x18960F0E0]();
}

uint64_t init_ccec_ctx_pub()
{
  return MEMORY[0x18960F0E8]();
}

uint64_t keyIsCompactRepresentable()
{
  return MEMORY[0x18960F0F0]();
}

double log2(double a1)
{
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1895FBC88](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1895FBCE0](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1895FBE18](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1895FBE30](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1895FBE48](__b, *(void *)&__c, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x1895FBE68](__s, __smax, *(void *)&__c, __n);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1896165B8](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x189616718](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x189616750]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x189616818](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x189616830](a1);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x18961B0A0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x18961B0A8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x18961B0B0]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x18961B0B8]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x18961B0C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x18961B0E0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x18961B0F8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x18961B108]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x18961B110]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x18961B118]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x18961B120]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x18961B128]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x18961B150]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x18961B158]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x18961B160]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x18961B180]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x18961B1B0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x18961B1E8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x18961B218]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x18961B220]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x18961B270]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x18961B290]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x18961B2B8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x18961B2D0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x18961B310]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x18961B318]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x18961B328]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x18961B330]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x18961B348]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x18961B358]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x18961B390]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x18961B3A8]();
}

uint64_t swift_once()
{
  return MEMORY[0x18961B3B8]();
}

uint64_t swift_release()
{
  return MEMORY[0x18961B3C8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x18961B3D0]();
}

uint64_t swift_retain()
{
  return MEMORY[0x18961B3E0]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x18961B3E8]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x18961B410]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x18961B418]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x18961B450]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x18961B458]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x18961B468]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x18961B470]();
}